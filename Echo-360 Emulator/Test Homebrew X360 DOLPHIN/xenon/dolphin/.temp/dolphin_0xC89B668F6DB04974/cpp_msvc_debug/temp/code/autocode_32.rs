#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821AB640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB640);
		  /* 821AB640h */ case    0:  		/* addic. R30, R30, -1 */
		/* 821AB640h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821AB640h case    0:*/		return 0x821AB644;
		  /* 821AB644h */ case    1:  		/* addi R31, R31, 2 */
		/* 821AB644h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821AB644h case    1:*/		return 0x821AB648;
		  /* 821AB648h */ case    2:  		/* bc 4, CR0_EQ, -64 */
		/* 821AB648h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AB608;  }
		/* 821AB648h case    2:*/		return 0x821AB64C;
	}
	return 0x821AB64C;
} // Block from 821AB640h-821AB64Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AB64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB64C);
		  /* 821AB64Ch */ case    0:  		/* lwz R11, <#[R22 + 8]> */
		/* 821AB64Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821AB64Ch case    0:*/		return 0x821AB650;
		  /* 821AB650h */ case    1:  		/* li R27, 57 */
		/* 821AB650h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x39);
		/* 821AB650h case    1:*/		return 0x821AB654;
		  /* 821AB654h */ case    2:  		/* lwz R10, <#[R14 + 8]> */
		/* 821AB654h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000008) );
		/* 821AB654h case    2:*/		return 0x821AB658;
		  /* 821AB658h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AB658h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AB658h case    3:*/		return 0x821AB65C;
		  /* 821AB65Ch */ case    4:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821AB65Ch case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821AB65Ch case    4:*/		return 0x821AB660;
		  /* 821AB660h */ case    5:  		/* cmpw CR6, R11, R10 */
		/* 821AB660h case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821AB660h case    5:*/		return 0x821AB664;
		  /* 821AB664h */ case    6:  		/* bc 4, CR6_LT, 292 */
		/* 821AB664h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821AB788;  }
		/* 821AB664h case    6:*/		return 0x821AB668;
		  /* 821AB668h */ case    7:  		/* li R30, 0 */
		/* 821AB668h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AB668h case    7:*/		return 0x821AB66C;
		  /* 821AB66Ch */ case    8:  		/* cmplwi CR6, R25, 0 */
		/* 821AB66Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AB66Ch case    8:*/		return 0x821AB670;
		  /* 821AB670h */ case    9:  		/* bc 12, CR6_EQ, 72 */
		/* 821AB670h case    9:*/		if ( regs.CR[6].eq ) { return 0x821AB6B8;  }
		/* 821AB670h case    9:*/		return 0x821AB674;
		  /* 821AB674h */ case   10:  		/* li R11, 0 */
		/* 821AB674h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AB674h case   10:*/		return 0x821AB678;
		  /* 821AB678h */ case   11:  		/* mtspr CTR, R25 */
		/* 821AB678h case   11:*/		regs.CTR = regs.R25;
		/* 821AB678h case   11:*/		return 0x821AB67C;
		  /* 821AB67Ch */ case   12:  		/* addi R10, R1, 992 */
		/* 821AB67Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x3E0);
		/* 821AB67Ch case   12:*/		return 0x821AB680;
		  /* 821AB680h */ case   13:  		/* srw R9, R24, R11 */
		/* 821AB680h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R11);
		/* 821AB680h case   13:*/		return 0x821AB684;
		  /* 821AB684h */ case   14:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821AB684h case   14:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821AB684h case   14:*/		return 0x821AB688;
		  /* 821AB688h */ case   15:  		/* cmplwi CR6, R9, 1 */
		/* 821AB688h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821AB688h case   15:*/		return 0x821AB68C;
		  /* 821AB68Ch */ case   16:  		/* bc 4, CR6_EQ, 12 */
		/* 821AB68Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821AB698;  }
		/* 821AB68Ch case   16:*/		return 0x821AB690;
		  /* 821AB690h */ case   17:  		/* stfs FR30, <#[R10]> */
		/* 821AB690h case   17:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB690h case   17:*/		return 0x821AB694;
		  /* 821AB694h */ case   18:  		/* b 24 */
		/* 821AB694h case   18:*/		return 0x821AB6AC;
		/* 821AB694h case   18:*/		return 0x821AB698;
	}
	return 0x821AB698;
} // Block from 821AB64Ch-821AB698h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AB698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB698);
		  /* 821AB698h */ case    0:  		/* slw R9, R20, R11 */
		/* 821AB698h case    0:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R11);
		/* 821AB698h case    0:*/		return 0x821AB69C;
		  /* 821AB69Ch */ case    1:  		/* stfs FR28, <#[R10]> */
		/* 821AB69Ch case    1:*/		cpu::mem::store32f( regs, regs.FR28, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB69Ch case    1:*/		return 0x821AB6A0;
		  /* 821AB6A0h */ case    2:  		/* andc R9, R30, R9 */
		/* 821AB6A0h case    2:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R30,regs.R9);
		/* 821AB6A0h case    2:*/		return 0x821AB6A4;
		  /* 821AB6A4h */ case    3:  		/* slw R8, R19, R11 */
		/* 821AB6A4h case    3:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R19,regs.R11);
		/* 821AB6A4h case    3:*/		return 0x821AB6A8;
		  /* 821AB6A8h */ case    4:  		/* or R30, R9, R8 */
		/* 821AB6A8h case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R9,regs.R8);
		/* 821AB6A8h case    4:*/		return 0x821AB6AC;
	}
	return 0x821AB6AC;
} // Block from 821AB698h-821AB6ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB6AC);
		  /* 821AB6ACh */ case    0:  		/* addi R10, R10, 4 */
		/* 821AB6ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821AB6ACh case    0:*/		return 0x821AB6B0;
		  /* 821AB6B0h */ case    1:  		/* addi R11, R11, 2 */
		/* 821AB6B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AB6B0h case    1:*/		return 0x821AB6B4;
		  /* 821AB6B4h */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 821AB6B4h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AB680;  }
		/* 821AB6B4h case    2:*/		return 0x821AB6B8;
	}
	return 0x821AB6B8;
} // Block from 821AB6ACh-821AB6B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AB6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB6B8);
		  /* 821AB6B8h */ case    0:  		/* addi R11, R1, 120 */
		/* 821AB6B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821AB6B8h case    0:*/		return 0x821AB6BC;
		  /* 821AB6BCh */ case    1:  		/* lwz R17, <#[R1 + 1236]> */
		/* 821AB6BCh case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AB6BCh case    1:*/		return 0x821AB6C0;
		  /* 821AB6C0h */ case    2:  		/* li R10, 0 */
		/* 821AB6C0h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB6C0h case    2:*/		return 0x821AB6C4;
		  /* 821AB6C4h */ case    3:  		/* addi R5, R1, 992 */
		/* 821AB6C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3E0);
		/* 821AB6C4h case    3:*/		return 0x821AB6C8;
		  /* 821AB6C8h */ case    4:  		/* mr R4, R25 */
		/* 821AB6C8h case    4:*/		regs.R4 = regs.R25;
		/* 821AB6C8h case    4:*/		return 0x821AB6CC;
		  /* 821AB6CCh */ case    5:  		/* mr R3, R17 */
		/* 821AB6CCh case    5:*/		regs.R3 = regs.R17;
		/* 821AB6CCh case    5:*/		return 0x821AB6D0;
		  /* 821AB6D0h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821AB6D0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB6D0h case    6:*/		return 0x821AB6D4;
		  /* 821AB6D4h */ case    7:  		/* lwz R6, <#[R1 + 120]> */
		/* 821AB6D4h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000078) );
		/* 821AB6D4h case    7:*/		return 0x821AB6D8;
		  /* 821AB6D8h */ case    8:  		/* bl 506208 */
		/* 821AB6D8h case    8:*/		regs.LR = 0x821AB6DC; return 0x82227038;
		/* 821AB6D8h case    8:*/		return 0x821AB6DC;
		  /* 821AB6DCh */ case    9:  		/* lwz R11, <#[R21 + 12]> */
		/* 821AB6DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821AB6DCh case    9:*/		return 0x821AB6E0;
		  /* 821AB6E0h */ case   10:  		/* mr R31, R3 */
		/* 821AB6E0h case   10:*/		regs.R31 = regs.R3;
		/* 821AB6E0h case   10:*/		return 0x821AB6E4;
		  /* 821AB6E4h */ case   11:  		/* addi R11, R11, 4 */
		/* 821AB6E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AB6E4h case   11:*/		return 0x821AB6E8;
		  /* 821AB6E8h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821AB6E8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB6E8h case   12:*/		return 0x821AB6EC;
		  /* 821AB6ECh */ case   13:  		/* b 12 */
		/* 821AB6ECh case   13:*/		return 0x821AB6F8;
		/* 821AB6ECh case   13:*/		return 0x821AB6F0;
		  /* 821AB6F0h */ case   14:  		/* addi R11, R10, 8 */
		/* 821AB6F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821AB6F0h case   14:*/		return 0x821AB6F4;
		  /* 821AB6F4h */ case   15:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AB6F4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AB6F4h case   15:*/		return 0x821AB6F8;
	}
	return 0x821AB6F8;
} // Block from 821AB6B8h-821AB6F8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821AB6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB6F8);
		  /* 821AB6F8h */ case    0:  		/* cmplw CR6, R10, R21 */
		/* 821AB6F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821AB6F8h case    0:*/		return 0x821AB6FC;
		  /* 821AB6FCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB6FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB6F0;  }
		/* 821AB6FCh case    1:*/		return 0x821AB700;
		  /* 821AB700h */ case    2:  		/* lwz R8, <#[R21 + 8]> */
		/* 821AB700h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000008) );
		/* 821AB700h case    2:*/		return 0x821AB704;
		  /* 821AB704h */ case    3:  		/* mr R7, R27 */
		/* 821AB704h case    3:*/		regs.R7 = regs.R27;
		/* 821AB704h case    3:*/		return 0x821AB708;
		  /* 821AB708h */ case    4:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AB708h case    4:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AB708h case    4:*/		return 0x821AB70C;
		  /* 821AB70Ch */ case    5:  		/* mr R10, R15 */
		/* 821AB70Ch case    5:*/		regs.R10 = regs.R15;
		/* 821AB70Ch case    5:*/		return 0x821AB710;
		  /* 821AB710h */ case    6:  		/* mr R15, R16 */
		/* 821AB710h case    6:*/		regs.R15 = regs.R16;
		/* 821AB710h case    6:*/		return 0x821AB714;
		  /* 821AB714h */ case    7:  		/* mr R16, R10 */
		/* 821AB714h case    7:*/		regs.R16 = regs.R10;
		/* 821AB714h case    7:*/		return 0x821AB718;
		  /* 821AB718h */ case    8:  		/* mr R9, R14 */
		/* 821AB718h case    8:*/		regs.R9 = regs.R14;
		/* 821AB718h case    8:*/		return 0x821AB71C;
		  /* 821AB71Ch */ case    9:  		/* stw R8, <#[R11]> */
		/* 821AB71Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB71Ch case    9:*/		return 0x821AB720;
		  /* 821AB720h */ case   10:  		/* mr R3, R31 */
		/* 821AB720h case   10:*/		regs.R3 = regs.R31;
		/* 821AB720h case   10:*/		return 0x821AB724;
		  /* 821AB724h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821AB724h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821AB724h case   11:*/		return 0x821AB728;
		  /* 821AB728h */ case   12:  		/* mr R14, R22 */
		/* 821AB728h case   12:*/		regs.R14 = regs.R22;
		/* 821AB728h case   12:*/		return 0x821AB72C;
		  /* 821AB72Ch */ case   13:  		/* stw R11, <#[R21 + 8]> */
		/* 821AB72Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821AB72Ch case   13:*/		return 0x821AB730;
		  /* 821AB730h */ case   14:  		/* mr R22, R9 */
		/* 821AB730h case   14:*/		regs.R22 = regs.R9;
		/* 821AB730h case   14:*/		return 0x821AB734;
		  /* 821AB734h */ case   15:  		/* stw R21, <#[R31 + 4]> */
		/* 821AB734h case   15:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000004) );
		/* 821AB734h case   15:*/		return 0x821AB738;
		  /* 821AB738h */ case   16:  		/* mr R24, R30 */
		/* 821AB738h case   16:*/		regs.R24 = regs.R30;
		/* 821AB738h case   16:*/		return 0x821AB73C;
		  /* 821AB73Ch */ case   17:  		/* lwz R11, <#[R21]> */
		/* 821AB73Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB73Ch case   17:*/		return 0x821AB740;
		  /* 821AB740h */ case   18:  		/* rlwimi R11, R7, 7, 31, 31 */
		/* 821AB740h case   18:*/		cpu::op::rlwimi<0,7,31,31>(regs,&regs.R11,regs.R7);
		/* 821AB740h case   18:*/		return 0x821AB744;
		  /* 821AB744h */ case   19:  		/* rlwimi R11, R27, 7, 19, 29 */
		/* 821AB744h case   19:*/		cpu::op::rlwimi<0,7,19,29>(regs,&regs.R11,regs.R27);
		/* 821AB744h case   19:*/		return 0x821AB748;
		  /* 821AB748h */ case   20:  		/* stw R31, <#[R21 + 12]> */
		/* 821AB748h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R21 + 0x0000000C) );
		/* 821AB748h case   20:*/		return 0x821AB74C;
		  /* 821AB74Ch */ case   21:  		/* stw R9, <#[R1 + 132]> */
		/* 821AB74Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 821AB74Ch case   21:*/		return 0x821AB750;
		  /* 821AB750h */ case   22:  		/* subf R29, R29, R25 */
		/* 821AB750h case   22:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R29,regs.R25);
		/* 821AB750h case   22:*/		return 0x821AB754;
		  /* 821AB754h */ case   23:  		/* stw R11, <#[R21]> */
		/* 821AB754h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB754h case   23:*/		return 0x821AB758;
		  /* 821AB758h */ case   24:  		/* lwz R11, <#[R18 + 52]> */
		/* 821AB758h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000034) );
		/* 821AB758h case   24:*/		return 0x821AB75C;
		  /* 821AB75Ch */ case   25:  		/* lwz R10, <#[R18 + 48]> */
		/* 821AB75Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000030) );
		/* 821AB75Ch case   25:*/		return 0x821AB760;
		  /* 821AB760h */ case   26:  		/* stw R11, <#[R18 + 48]> */
		/* 821AB760h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000030) );
		/* 821AB760h case   26:*/		return 0x821AB764;
		  /* 821AB764h */ case   27:  		/* stw R10, <#[R18 + 52]> */
		/* 821AB764h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R18 + 0x00000034) );
		/* 821AB764h case   27:*/		return 0x821AB768;
		  /* 821AB768h */ case   28:  		/* bl -86968 */
		/* 821AB768h case   28:*/		regs.LR = 0x821AB76C; return 0x821963B0;
		/* 821AB768h case   28:*/		return 0x821AB76C;
		  /* 821AB76Ch */ case   29:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AB76Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB76Ch case   29:*/		return 0x821AB770;
		  /* 821AB770h */ case   30:  		/* mr R4, R18 */
		/* 821AB770h case   30:*/		regs.R4 = regs.R18;
		/* 821AB770h case   30:*/		return 0x821AB774;
		  /* 821AB774h */ case   31:  		/* oris R11, R11, 256 */
		/* 821AB774h case   31:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AB774h case   31:*/		return 0x821AB778;
		  /* 821AB778h */ case   32:  		/* mr R3, R17 */
		/* 821AB778h case   32:*/		regs.R3 = regs.R17;
		/* 821AB778h case   32:*/		return 0x821AB77C;
		  /* 821AB77Ch */ case   33:  		/* stw R11, <#[R31 + 8]> */
		/* 821AB77Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB77Ch case   33:*/		return 0x821AB780;
		  /* 821AB780h */ case   34:  		/* bl -44232 */
		/* 821AB780h case   34:*/		regs.LR = 0x821AB784; return 0x821A0AB8;
		/* 821AB780h case   34:*/		return 0x821AB784;
		  /* 821AB784h */ case   35:  		/* b 12 */
		/* 821AB784h case   35:*/		return 0x821AB790;
		/* 821AB784h case   35:*/		return 0x821AB788;
	}
	return 0x821AB788;
} // Block from 821AB6F8h-821AB788h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821AB788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB788);
		  /* 821AB788h */ case    0:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AB788h case    0:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AB788h case    0:*/		return 0x821AB78C;
		  /* 821AB78Ch */ case    1:  		/* lwz R17, <#[R1 + 1236]> */
		/* 821AB78Ch case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AB78Ch case    1:*/		return 0x821AB790;
	}
	return 0x821AB790;
} // Block from 821AB788h-821AB790h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AB790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB790);
		  /* 821AB790h */ case    0:  		/* li R11, 0 */
		/* 821AB790h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AB790h case    0:*/		return 0x821AB794;
		  /* 821AB794h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821AB794h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AB794h case    1:*/		return 0x821AB798;
		  /* 821AB798h */ case    2:  		/* bc 12, CR6_EQ, 520 */
		/* 821AB798h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AB9A0;  }
		/* 821AB798h case    2:*/		return 0x821AB79C;
		  /* 821AB79Ch */ case    3:  		/* li R10, 0 */
		/* 821AB79Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB79Ch case    3:*/		return 0x821AB7A0;
		  /* 821AB7A0h */ case    4:  		/* srw R9, R24, R10 */
		/* 821AB7A0h case    4:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R10);
		/* 821AB7A0h case    4:*/		return 0x821AB7A4;
		  /* 821AB7A4h */ case    5:  		/* rlwinm. R9, R9, 0, 30, 31 */
		/* 821AB7A4h case    5:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821AB7A4h case    5:*/		return 0x821AB7A8;
		  /* 821AB7A8h */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 821AB7A8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AB7BC;  }
		/* 821AB7A8h case    6:*/		return 0x821AB7AC;
		  /* 821AB7ACh */ case    7:  		/* addi R11, R11, 1 */
		/* 821AB7ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AB7ACh case    7:*/		return 0x821AB7B0;
		  /* 821AB7B0h */ case    8:  		/* addi R10, R10, 2 */
		/* 821AB7B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AB7B0h case    8:*/		return 0x821AB7B4;
		  /* 821AB7B4h */ case    9:  		/* cmplw CR6, R11, R25 */
		/* 821AB7B4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB7B4h case    9:*/		return 0x821AB7B8;
		  /* 821AB7B8h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821AB7B8h case   10:*/		if ( regs.CR[6].lt ) { return 0x821AB7A0;  }
		/* 821AB7B8h case   10:*/		return 0x821AB7BC;
	}
	return 0x821AB7BC;
} // Block from 821AB790h-821AB7BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AB7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB7BC);
		  /* 821AB7BCh */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 821AB7BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB7BCh case    0:*/		return 0x821AB7C0;
		  /* 821AB7C0h */ case    1:  		/* bc 4, CR6_LT, 480 */
		/* 821AB7C0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821AB9A0;  }
		/* 821AB7C0h case    1:*/		return 0x821AB7C4;
		  /* 821AB7C4h */ case    2:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 821AB7C4h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 821AB7C4h case    2:*/		return 0x821AB7C8;
		  /* 821AB7C8h */ case    3:  		/* srw R9, R24, R10 */
		/* 821AB7C8h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R10);
		/* 821AB7C8h case    3:*/		return 0x821AB7CC;
		  /* 821AB7CCh */ case    4:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821AB7CCh case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821AB7CCh case    4:*/		return 0x821AB7D0;
		  /* 821AB7D0h */ case    5:  		/* cmplwi CR6, R9, 1 */
		/* 821AB7D0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821AB7D0h case    5:*/		return 0x821AB7D4;
		  /* 821AB7D4h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 821AB7D4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821AB7E8;  }
		/* 821AB7D4h case    6:*/		return 0x821AB7D8;
		  /* 821AB7D8h */ case    7:  		/* addi R11, R11, 1 */
		/* 821AB7D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AB7D8h case    7:*/		return 0x821AB7DC;
		  /* 821AB7DCh */ case    8:  		/* addi R10, R10, 2 */
		/* 821AB7DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AB7DCh case    8:*/		return 0x821AB7E0;
		  /* 821AB7E0h */ case    9:  		/* cmplw CR6, R11, R25 */
		/* 821AB7E0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB7E0h case    9:*/		return 0x821AB7E4;
		  /* 821AB7E4h */ case   10:  		/* bc 12, CR6_LT, -28 */
		/* 821AB7E4h case   10:*/		if ( regs.CR[6].lt ) { return 0x821AB7C8;  }
		/* 821AB7E4h case   10:*/		return 0x821AB7E8;
	}
	return 0x821AB7E8;
} // Block from 821AB7BCh-821AB7E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AB7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB7E8);
		  /* 821AB7E8h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 821AB7E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB7E8h case    0:*/		return 0x821AB7EC;
		  /* 821AB7ECh */ case    1:  		/* bc 4, CR6_LT, 436 */
		/* 821AB7ECh case    1:*/		if ( !regs.CR[6].lt ) { return 0x821AB9A0;  }
		/* 821AB7ECh case    1:*/		return 0x821AB7F0;
		  /* 821AB7F0h */ case    2:  		/* subf R11, R29, R25 */
		/* 821AB7F0h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R25);
		/* 821AB7F0h case    2:*/		return 0x821AB7F4;
		  /* 821AB7F4h */ case    3:  		/* stfs FR30, <#[R1 + 512]> */
		/* 821AB7F4h case    3:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000200) );
		/* 821AB7F4h case    3:*/		return 0x821AB7F8;
		  /* 821AB7F8h */ case    4:  		/* addi R10, R1, 512 */
		/* 821AB7F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x200);
		/* 821AB7F8h case    4:*/		return 0x821AB7FC;
		  /* 821AB7FCh */ case    5:  		/* stfs FR30, <#[R1 + 516]> */
		/* 821AB7FCh case    5:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000204) );
		/* 821AB7FCh case    5:*/		return 0x821AB800;
		  /* 821AB800h */ case    6:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 821AB800h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821AB800h case    6:*/		return 0x821AB804;
		  /* 821AB804h */ case    7:  		/* stfs FR30, <#[R1 + 520]> */
		/* 821AB804h case    7:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000208) );
		/* 821AB804h case    7:*/		return 0x821AB808;
		  /* 821AB808h */ case    8:  		/* mr R8, R11 */
		/* 821AB808h case    8:*/		regs.R8 = regs.R11;
		/* 821AB808h case    8:*/		return 0x821AB80C;
		  /* 821AB80Ch */ case    9:  		/* stfs FR30, <#[R1 + 524]> */
		/* 821AB80Ch case    9:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x0000020C) );
		/* 821AB80Ch case    9:*/		return 0x821AB810;
		  /* 821AB810h */ case   10:  		/* add R7, R9, R10 */
		/* 821AB810h case   10:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R10);
		/* 821AB810h case   10:*/		return 0x821AB814;
		  /* 821AB814h */ case   11:  		/* mtspr CTR, R25 */
		/* 821AB814h case   11:*/		regs.CTR = regs.R25;
		/* 821AB814h case   11:*/		return 0x821AB818;
		  /* 821AB818h */ case   12:  		/* li R30, 0 */
		/* 821AB818h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AB818h case   12:*/		return 0x821AB81C;
		  /* 821AB81Ch */ case   13:  		/* li R29, 0 */
		/* 821AB81Ch case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821AB81Ch case   13:*/		return 0x821AB820;
		  /* 821AB820h */ case   14:  		/* li R5, 0 */
		/* 821AB820h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AB820h case   14:*/		return 0x821AB824;
		  /* 821AB824h */ case   15:  		/* li R28, 0 */
		/* 821AB824h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821AB824h case   15:*/		return 0x821AB828;
		  /* 821AB828h */ case   16:  		/* li R9, 0 */
		/* 821AB828h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AB828h case   16:*/		return 0x821AB82C;
		  /* 821AB82Ch */ case   17:  		/* li R10, 0 */
		/* 821AB82Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB82Ch case   17:*/		return 0x821AB830;
		  /* 821AB830h */ case   18:  		/* li R6, 0 */
		/* 821AB830h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AB830h case   18:*/		return 0x821AB834;
		  /* 821AB834h */ case   19:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821AB834h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821AB834h case   19:*/		return 0x821AB838;
		  /* 821AB838h */ case   20:  		/* addi R7, R7, -4 */
		/* 821AB838h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFC);
		/* 821AB838h case   20:*/		return 0x821AB83C;
		  /* 821AB83Ch */ case   21:  		/* srw R4, R24, R10 */
		/* 821AB83Ch case   21:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R24,regs.R10);
		/* 821AB83Ch case   21:*/		return 0x821AB840;
		  /* 821AB840h */ case   22:  		/* slw R3, R20, R10 */
		/* 821AB840h case   22:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R20,regs.R10);
		/* 821AB840h case   22:*/		return 0x821AB844;
		  /* 821AB844h */ case   23:  		/* rlwinm. R4, R4, 0, 30, 31 */
		/* 821AB844h case   23:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R4,regs.R4);
		/* 821AB844h case   23:*/		return 0x821AB848;
		  /* 821AB848h */ case   24:  		/* andc R3, R29, R3 */
		/* 821AB848h case   24:*/		cpu::op::andc<0>(regs,&regs.R3,regs.R29,regs.R3);
		/* 821AB848h case   24:*/		return 0x821AB84C;
		  /* 821AB84Ch */ case   25:  		/* bc 4, CR0_EQ, 36 */
		/* 821AB84Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x821AB870;  }
		/* 821AB84Ch case   25:*/		return 0x821AB850;
		  /* 821AB850h */ case   26:  		/* slw R4, R20, R6 */
		/* 821AB850h case   26:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R20,regs.R6);
		/* 821AB850h case   26:*/		return 0x821AB854;
		  /* 821AB854h */ case   27:  		/* slw R31, R9, R6 */
		/* 821AB854h case   27:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R9,regs.R6);
		/* 821AB854h case   27:*/		return 0x821AB858;
		  /* 821AB858h */ case   28:  		/* andc R4, R30, R4 */
		/* 821AB858h case   28:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R30,regs.R4);
		/* 821AB858h case   28:*/		return 0x821AB85C;
		  /* 821AB85Ch */ case   29:  		/* slw R26, R5, R10 */
		/* 821AB85Ch case   29:*/		cpu::op::slw<0>(regs,&regs.R26,regs.R5,regs.R10);
		/* 821AB85Ch case   29:*/		return 0x821AB860;
		  /* 821AB860h */ case   30:  		/* or R30, R4, R31 */
		/* 821AB860h case   30:*/		cpu::op::or<0>(regs,&regs.R30,regs.R4,regs.R31);
		/* 821AB860h case   30:*/		return 0x821AB864;
		  /* 821AB864h */ case   31:  		/* addi R5, R5, 1 */
		/* 821AB864h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821AB864h case   31:*/		return 0x821AB868;
		  /* 821AB868h */ case   32:  		/* addi R6, R6, 2 */
		/* 821AB868h case   32:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x2);
		/* 821AB868h case   32:*/		return 0x821AB86C;
		  /* 821AB86Ch */ case   33:  		/* b 52 */
		/* 821AB86Ch case   33:*/		return 0x821AB8A0;
		/* 821AB86Ch case   33:*/		return 0x821AB870;
	}
	return 0x821AB870;
} // Block from 821AB7E8h-821AB870h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821AB870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB870);
		  /* 821AB870h */ case    0:  		/* slw R4, R20, R11 */
		/* 821AB870h case    0:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R20,regs.R11);
		/* 821AB870h case    0:*/		return 0x821AB874;
		  /* 821AB874h */ case    1:  		/* stfsu FR28, <#[R7 + 4]> */
		/* 821AB874h case    1:*/		cpu::mem::store32f( regs, regs.FR28, (uint32)(regs.R7 + 0x00000004) );
		regs.R7 = (uint32)(regs.R7 + 0x00000004);
		/* 821AB874h case    1:*/		return 0x821AB878;
		  /* 821AB878h */ case    2:  		/* nor R4, R4, R4 */
		/* 821AB878h case    2:*/		cpu::op::nor<0>(regs,&regs.R4,regs.R4,regs.R4);
		/* 821AB878h case    2:*/		return 0x821AB87C;
		  /* 821AB87Ch */ case    3:  		/* slw R31, R9, R11 */
		/* 821AB87Ch case    3:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R9,regs.R11);
		/* 821AB87Ch case    3:*/		return 0x821AB880;
		  /* 821AB880h */ case    4:  		/* and R30, R30, R4 */
		/* 821AB880h case    4:*/		cpu::op::and<0>(regs,&regs.R30,regs.R30,regs.R4);
		/* 821AB880h case    4:*/		return 0x821AB884;
		  /* 821AB884h */ case    5:  		/* slw R23, R19, R11 */
		/* 821AB884h case    5:*/		cpu::op::slw<0>(regs,&regs.R23,regs.R19,regs.R11);
		/* 821AB884h case    5:*/		return 0x821AB888;
		  /* 821AB888h */ case    6:  		/* and R4, R28, R4 */
		/* 821AB888h case    6:*/		cpu::op::and<0>(regs,&regs.R4,regs.R28,regs.R4);
		/* 821AB888h case    6:*/		return 0x821AB88C;
		  /* 821AB88Ch */ case    7:  		/* slw R26, R8, R10 */
		/* 821AB88Ch case    7:*/		cpu::op::slw<0>(regs,&regs.R26,regs.R8,regs.R10);
		/* 821AB88Ch case    7:*/		return 0x821AB890;
		  /* 821AB890h */ case    8:  		/* or R30, R30, R31 */
		/* 821AB890h case    8:*/		cpu::op::or<0>(regs,&regs.R30,regs.R30,regs.R31);
		/* 821AB890h case    8:*/		return 0x821AB894;
		  /* 821AB894h */ case    9:  		/* or R28, R4, R23 */
		/* 821AB894h case    9:*/		cpu::op::or<0>(regs,&regs.R28,regs.R4,regs.R23);
		/* 821AB894h case    9:*/		return 0x821AB898;
		  /* 821AB898h */ case   10:  		/* addi R8, R8, 1 */
		/* 821AB898h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821AB898h case   10:*/		return 0x821AB89C;
		  /* 821AB89Ch */ case   11:  		/* addi R11, R11, 2 */
		/* 821AB89Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AB89Ch case   11:*/		return 0x821AB8A0;
	}
	return 0x821AB8A0;
} // Block from 821AB870h-821AB8A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AB8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB8A0);
		  /* 821AB8A0h */ case    0:  		/* or R29, R3, R26 */
		/* 821AB8A0h case    0:*/		cpu::op::or<0>(regs,&regs.R29,regs.R3,regs.R26);
		/* 821AB8A0h case    0:*/		return 0x821AB8A4;
		  /* 821AB8A4h */ case    1:  		/* addi R9, R9, 1 */
		/* 821AB8A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821AB8A4h case    1:*/		return 0x821AB8A8;
		  /* 821AB8A8h */ case    2:  		/* addi R10, R10, 2 */
		/* 821AB8A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AB8A8h case    2:*/		return 0x821AB8AC;
		  /* 821AB8ACh */ case    3:  		/* bc 16, CR0_LT, -112 */
		/* 821AB8ACh case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AB83C;  }
		/* 821AB8ACh case    3:*/		return 0x821AB8B0;
		  /* 821AB8B0h */ case    4:  		/* addi R11, R1, 120 */
		/* 821AB8B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821AB8B0h case    4:*/		return 0x821AB8B4;
		  /* 821AB8B4h */ case    5:  		/* li R10, 0 */
		/* 821AB8B4h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB8B4h case    5:*/		return 0x821AB8B8;
		  /* 821AB8B8h */ case    6:  		/* addi R5, R1, 512 */
		/* 821AB8B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x200);
		/* 821AB8B8h case    6:*/		return 0x821AB8BC;
		  /* 821AB8BCh */ case    7:  		/* mr R4, R25 */
		/* 821AB8BCh case    7:*/		regs.R4 = regs.R25;
		/* 821AB8BCh case    7:*/		return 0x821AB8C0;
		  /* 821AB8C0h */ case    8:  		/* mr R3, R17 */
		/* 821AB8C0h case    8:*/		regs.R3 = regs.R17;
		/* 821AB8C0h case    8:*/		return 0x821AB8C4;
		  /* 821AB8C4h */ case    9:  		/* stw R10, <#[R11]> */
		/* 821AB8C4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB8C4h case    9:*/		return 0x821AB8C8;
		  /* 821AB8C8h */ case   10:  		/* lwz R6, <#[R1 + 120]> */
		/* 821AB8C8h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000078) );
		/* 821AB8C8h case   10:*/		return 0x821AB8CC;
		  /* 821AB8CCh */ case   11:  		/* bl 505708 */
		/* 821AB8CCh case   11:*/		regs.LR = 0x821AB8D0; return 0x82227038;
		/* 821AB8CCh case   11:*/		return 0x821AB8D0;
		  /* 821AB8D0h */ case   12:  		/* lwz R11, <#[R21 + 12]> */
		/* 821AB8D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821AB8D0h case   12:*/		return 0x821AB8D4;
		  /* 821AB8D4h */ case   13:  		/* mr R31, R3 */
		/* 821AB8D4h case   13:*/		regs.R31 = regs.R3;
		/* 821AB8D4h case   13:*/		return 0x821AB8D8;
		  /* 821AB8D8h */ case   14:  		/* addi R11, R11, 4 */
		/* 821AB8D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AB8D8h case   14:*/		return 0x821AB8DC;
		  /* 821AB8DCh */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821AB8DCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB8DCh case   15:*/		return 0x821AB8E0;
		  /* 821AB8E0h */ case   16:  		/* b 12 */
		/* 821AB8E0h case   16:*/		return 0x821AB8EC;
		/* 821AB8E0h case   16:*/		return 0x821AB8E4;
		  /* 821AB8E4h */ case   17:  		/* addi R11, R10, 8 */
		/* 821AB8E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821AB8E4h case   17:*/		return 0x821AB8E8;
		  /* 821AB8E8h */ case   18:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AB8E8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AB8E8h case   18:*/		return 0x821AB8EC;
	}
	return 0x821AB8EC;
} // Block from 821AB8A0h-821AB8ECh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AB8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB8EC);
		  /* 821AB8ECh */ case    0:  		/* cmplw CR6, R10, R21 */
		/* 821AB8ECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821AB8ECh case    0:*/		return 0x821AB8F0;
		  /* 821AB8F0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB8F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB8E4;  }
		/* 821AB8F0h case    1:*/		return 0x821AB8F4;
		  /* 821AB8F4h */ case    2:  		/* lwz R10, <#[R21 + 8]> */
		/* 821AB8F4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 821AB8F4h case    2:*/		return 0x821AB8F8;
		  /* 821AB8F8h */ case    3:  		/* mr R4, R30 */
		/* 821AB8F8h case    3:*/		regs.R4 = regs.R30;
		/* 821AB8F8h case    3:*/		return 0x821AB8FC;
		  /* 821AB8FCh */ case    4:  		/* mr R3, R15 */
		/* 821AB8FCh case    4:*/		regs.R3 = regs.R15;
		/* 821AB8FCh case    4:*/		return 0x821AB900;
		  /* 821AB900h */ case    5:  		/* mr R23, R31 */
		/* 821AB900h case    5:*/		regs.R23 = regs.R31;
		/* 821AB900h case    5:*/		return 0x821AB904;
		  /* 821AB904h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821AB904h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB904h case    6:*/		return 0x821AB908;
		  /* 821AB908h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 821AB908h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821AB908h case    7:*/		return 0x821AB90C;
		  /* 821AB90Ch */ case    8:  		/* stw R11, <#[R21 + 8]> */
		/* 821AB90Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821AB90Ch case    8:*/		return 0x821AB910;
		  /* 821AB910h */ case    9:  		/* stw R21, <#[R31 + 4]> */
		/* 821AB910h case    9:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000004) );
		/* 821AB910h case    9:*/		return 0x821AB914;
		  /* 821AB914h */ case   10:  		/* stw R31, <#[R21 + 12]> */
		/* 821AB914h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R21 + 0x0000000C) );
		/* 821AB914h case   10:*/		return 0x821AB918;
		  /* 821AB918h */ case   11:  		/* lwz R11, <#[R21]> */
		/* 821AB918h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB918h case   11:*/		return 0x821AB91C;
		  /* 821AB91Ch */ case   12:  		/* rlwimi R11, R27, 7, 31, 31 */
		/* 821AB91Ch case   12:*/		cpu::op::rlwimi<0,7,31,31>(regs,&regs.R11,regs.R27);
		/* 821AB91Ch case   12:*/		return 0x821AB920;
		  /* 821AB920h */ case   13:  		/* rlwimi R11, R27, 7, 19, 29 */
		/* 821AB920h case   13:*/		cpu::op::rlwimi<0,7,19,29>(regs,&regs.R11,regs.R27);
		/* 821AB920h case   13:*/		return 0x821AB924;
		  /* 821AB924h */ case   14:  		/* stw R11, <#[R21]> */
		/* 821AB924h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB924h case   14:*/		return 0x821AB928;
		  /* 821AB928h */ case   15:  		/* bl -87864 */
		/* 821AB928h case   15:*/		regs.LR = 0x821AB92C; return 0x821961F0;
		/* 821AB928h case   15:*/		return 0x821AB92C;
		  /* 821AB92Ch */ case   16:  		/* mr R4, R30 */
		/* 821AB92Ch case   16:*/		regs.R4 = regs.R30;
		/* 821AB92Ch case   16:*/		return 0x821AB930;
		  /* 821AB930h */ case   17:  		/* mr R3, R16 */
		/* 821AB930h case   17:*/		regs.R3 = regs.R16;
		/* 821AB930h case   17:*/		return 0x821AB934;
		  /* 821AB934h */ case   18:  		/* bl -87876 */
		/* 821AB934h case   18:*/		regs.LR = 0x821AB938; return 0x821961F0;
		/* 821AB934h case   18:*/		return 0x821AB938;
		  /* 821AB938h */ case   19:  		/* lwz R30, <#[R18 + 4]> */
		/* 821AB938h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R18 + 0x00000004) );
		/* 821AB938h case   19:*/		return 0x821AB93C;
		  /* 821AB93Ch */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 821AB93Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821AB93Ch case   20:*/		return 0x821AB940;
		  /* 821AB940h */ case   21:  		/* bc 12, CR6_EQ, 48 */
		/* 821AB940h case   21:*/		if ( regs.CR[6].eq ) { return 0x821AB970;  }
		/* 821AB940h case   21:*/		return 0x821AB944;
		  /* 821AB944h */ case   22:  		/* lwz R11, <#[R30 + 16]> */
		/* 821AB944h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821AB944h case   22:*/		return 0x821AB948;
		  /* 821AB948h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821AB948h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AB948h case   23:*/		return 0x821AB94C;
		  /* 821AB94Ch */ case   24:  		/* bc 12, CR6_EQ, 28 */
		/* 821AB94Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x821AB968;  }
		/* 821AB94Ch case   24:*/		return 0x821AB950;
		  /* 821AB950h */ case   25:  		/* lwz R11, <#[R30]> */
		/* 821AB950h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AB950h case   25:*/		return 0x821AB954;
		  /* 821AB954h */ case   26:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AB954h case   26:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AB954h case   26:*/		return 0x821AB958;
		  /* 821AB958h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 821AB958h case   27:*/		if ( regs.CR[0].eq ) { return 0x821AB968;  }
		/* 821AB958h case   27:*/		return 0x821AB95C;
		  /* 821AB95Ch */ case   28:  		/* mr R4, R29 */
		/* 821AB95Ch case   28:*/		regs.R4 = regs.R29;
		/* 821AB95Ch case   28:*/		return 0x821AB960;
		  /* 821AB960h */ case   29:  		/* mr R3, R30 */
		/* 821AB960h case   29:*/		regs.R3 = regs.R30;
		/* 821AB960h case   29:*/		return 0x821AB964;
		  /* 821AB964h */ case   30:  		/* bl -240636 */
		/* 821AB964h case   30:*/		regs.LR = 0x821AB968; return 0x82170D68;
		/* 821AB964h case   30:*/		return 0x821AB968;
	}
	return 0x821AB968;
} // Block from 821AB8ECh-821AB968h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821AB968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB968);
		  /* 821AB968h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821AB968h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821AB968h case    0:*/		return 0x821AB96C;
		  /* 821AB96Ch */ case    1:  		/* b -48 */
		/* 821AB96Ch case    1:*/		return 0x821AB93C;
		/* 821AB96Ch case    1:*/		return 0x821AB970;
	}
	return 0x821AB970;
} // Block from 821AB968h-821AB970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AB970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB970);
		  /* 821AB970h */ case    0:  		/* mr R3, R31 */
		/* 821AB970h case    0:*/		regs.R3 = regs.R31;
		/* 821AB970h case    0:*/		return 0x821AB974;
		  /* 821AB974h */ case    1:  		/* bl -87492 */
		/* 821AB974h case    1:*/		regs.LR = 0x821AB978; return 0x821963B0;
		/* 821AB974h case    1:*/		return 0x821AB978;
		  /* 821AB978h */ case    2:  		/* addi R11, R31, 8 */
		/* 821AB978h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 821AB978h case    2:*/		return 0x821AB97C;
		  /* 821AB97Ch */ case    3:  		/* mr R4, R18 */
		/* 821AB97Ch case    3:*/		regs.R4 = regs.R18;
		/* 821AB97Ch case    3:*/		return 0x821AB980;
		  /* 821AB980h */ case    4:  		/* stw R11, <#[R1 + 112]> */
		/* 821AB980h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821AB980h case    4:*/		return 0x821AB984;
		  /* 821AB984h */ case    5:  		/* mr R3, R17 */
		/* 821AB984h case    5:*/		regs.R3 = regs.R17;
		/* 821AB984h case    5:*/		return 0x821AB988;
		  /* 821AB988h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AB988h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB988h case    6:*/		return 0x821AB98C;
		  /* 821AB98Ch */ case    7:  		/* oris R11, R11, 256 */
		/* 821AB98Ch case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AB98Ch case    7:*/		return 0x821AB990;
		  /* 821AB990h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821AB990h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB990h case    8:*/		return 0x821AB994;
		  /* 821AB994h */ case    9:  		/* bl -44764 */
		/* 821AB994h case    9:*/		regs.LR = 0x821AB998; return 0x821A0AB8;
		/* 821AB994h case    9:*/		return 0x821AB998;
		  /* 821AB998h */ case   10:  		/* mr R24, R28 */
		/* 821AB998h case   10:*/		regs.R24 = regs.R28;
		/* 821AB998h case   10:*/		return 0x821AB99C;
		  /* 821AB99Ch */ case   11:  		/* lwz R28, <#[R1 + 112]> */
		/* 821AB99Ch case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 821AB99Ch case   11:*/		return 0x821AB9A0;
	}
	return 0x821AB9A0;
} // Block from 821AB970h-821AB9A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AB9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB9A0);
		  /* 821AB9A0h */ case    0:  		/* lwz R5, <#[R15]> */
		/* 821AB9A0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R15 + 0x00000000) );
		/* 821AB9A0h case    0:*/		return 0x821AB9A4;
		  /* 821AB9A4h */ case    1:  		/* li R11, 0 */
		/* 821AB9A4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AB9A4h case    1:*/		return 0x821AB9A8;
		  /* 821AB9A8h */ case    2:  		/* lwz R10, <#[R16]> */
		/* 821AB9A8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821AB9A8h case    2:*/		return 0x821AB9AC;
		  /* 821AB9ACh */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821AB9ACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AB9ACh case    3:*/		return 0x821AB9B0;
		  /* 821AB9B0h */ case    4:  		/* rlwinm R7, R5, 27, 24, 31 */
		/* 821AB9B0h case    4:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R5);
		/* 821AB9B0h case    4:*/		return 0x821AB9B4;
		  /* 821AB9B4h */ case    5:  		/* rlwinm R6, R10, 27, 24, 31 */
		/* 821AB9B4h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R10);
		/* 821AB9B4h case    5:*/		return 0x821AB9B8;
		  /* 821AB9B8h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821AB9B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821AB9DC;  }
		/* 821AB9B8h case    6:*/		return 0x821AB9BC;
		  /* 821AB9BCh */ case    7:  		/* li R10, 0 */
		/* 821AB9BCh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB9BCh case    7:*/		return 0x821AB9C0;
		  /* 821AB9C0h */ case    8:  		/* srw R9, R24, R10 */
		/* 821AB9C0h case    8:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R10);
		/* 821AB9C0h case    8:*/		return 0x821AB9C4;
		  /* 821AB9C4h */ case    9:  		/* rlwinm. R9, R9, 0, 30, 31 */
		/* 821AB9C4h case    9:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821AB9C4h case    9:*/		return 0x821AB9C8;
		  /* 821AB9C8h */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 821AB9C8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821AB9DC;  }
		/* 821AB9C8h case   10:*/		return 0x821AB9CC;
		  /* 821AB9CCh */ case   11:  		/* addi R11, R11, 1 */
		/* 821AB9CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AB9CCh case   11:*/		return 0x821AB9D0;
		  /* 821AB9D0h */ case   12:  		/* addi R10, R10, 2 */
		/* 821AB9D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AB9D0h case   12:*/		return 0x821AB9D4;
		  /* 821AB9D4h */ case   13:  		/* cmplw CR6, R11, R25 */
		/* 821AB9D4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB9D4h case   13:*/		return 0x821AB9D8;
		  /* 821AB9D8h */ case   14:  		/* bc 12, CR6_LT, -24 */
		/* 821AB9D8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821AB9C0;  }
		/* 821AB9D8h case   14:*/		return 0x821AB9DC;
	}
	return 0x821AB9DC;
} // Block from 821AB9A0h-821AB9DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AB9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB9DC);
		  /* 821AB9DCh */ case    0:  		/* or. R27, R11, R11 */
		/* 821AB9DCh case    0:*/		cpu::op::or<1>(regs,&regs.R27,regs.R11,regs.R11);
		/* 821AB9DCh case    0:*/		return 0x821AB9E0;
		  /* 821AB9E0h */ case    1:  		/* mr R8, R7 */
		/* 821AB9E0h case    1:*/		regs.R8 = regs.R7;
		/* 821AB9E0h case    1:*/		return 0x821AB9E4;
		  /* 821AB9E4h */ case    2:  		/* mr R26, R6 */
		/* 821AB9E4h case    2:*/		regs.R26 = regs.R6;
		/* 821AB9E4h case    2:*/		return 0x821AB9E8;
		  /* 821AB9E8h */ case    3:  		/* li R11, 0 */
		/* 821AB9E8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AB9E8h case    3:*/		return 0x821AB9EC;
		  /* 821AB9ECh */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 821AB9ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x821ABA20;  }
		/* 821AB9ECh case    4:*/		return 0x821AB9F0;
		  /* 821AB9F0h */ case    5:  		/* rlwinm R11, R27, 1, 0, 30 */
		/* 821AB9F0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R27);
		/* 821AB9F0h case    5:*/		return 0x821AB9F4;
		  /* 821AB9F4h */ case    6:  		/* mtspr CTR, R27 */
		/* 821AB9F4h case    6:*/		regs.CTR = regs.R27;
		/* 821AB9F4h case    6:*/		return 0x821AB9F8;
		  /* 821AB9F8h */ case    7:  		/* li R10, 0 */
		/* 821AB9F8h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AB9F8h case    7:*/		return 0x821AB9FC;
		  /* 821AB9FCh */ case    8:  		/* srw R11, R6, R11 */
		/* 821AB9FCh case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821AB9FCh case    8:*/		return 0x821ABA00;
		  /* 821ABA00h */ case    9:  		/* rlwinm R9, R11, 0, 30, 31 */
		/* 821ABA00h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R11);
		/* 821ABA00h case    9:*/		return 0x821ABA04;
		  /* 821ABA04h */ case   10:  		/* mr R11, R27 */
		/* 821ABA04h case   10:*/		regs.R11 = regs.R27;
		/* 821ABA04h case   10:*/		return 0x821ABA08;
		  /* 821ABA08h */ case   11:  		/* slw R4, R20, R10 */
		/* 821ABA08h case   11:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R20,regs.R10);
		/* 821ABA08h case   11:*/		return 0x821ABA0C;
		  /* 821ABA0Ch */ case   12:  		/* slw R3, R9, R10 */
		/* 821ABA0Ch case   12:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R9,regs.R10);
		/* 821ABA0Ch case   12:*/		return 0x821ABA10;
		  /* 821ABA10h */ case   13:  		/* andc R4, R26, R4 */
		/* 821ABA10h case   13:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R26,regs.R4);
		/* 821ABA10h case   13:*/		return 0x821ABA14;
		  /* 821ABA14h */ case   14:  		/* addi R10, R10, 2 */
		/* 821ABA14h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821ABA14h case   14:*/		return 0x821ABA18;
		  /* 821ABA18h */ case   15:  		/* or R26, R4, R3 */
		/* 821ABA18h case   15:*/		cpu::op::or<0>(regs,&regs.R26,regs.R4,regs.R3);
		/* 821ABA18h case   15:*/		return 0x821ABA1C;
		  /* 821ABA1Ch */ case   16:  		/* bc 16, CR0_LT, -20 */
		/* 821ABA1Ch case   16:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821ABA08;  }
		/* 821ABA1Ch case   16:*/		return 0x821ABA20;
	}
	return 0x821ABA20;
} // Block from 821AB9DCh-821ABA20h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821ABA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABA20);
		  /* 821ABA20h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 821ABA20h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821ABA20h case    0:*/		return 0x821ABA24;
		  /* 821ABA24h */ case    1:  		/* bc 4, CR6_LT, 64 */
		/* 821ABA24h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821ABA64;  }
		/* 821ABA24h case    1:*/		return 0x821ABA28;
		  /* 821ABA28h */ case    2:  		/* addi R10, R27, -1 */
		/* 821ABA28h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFFF);
		/* 821ABA28h case    2:*/		return 0x821ABA2C;
		  /* 821ABA2Ch */ case    3:  		/* subf R9, R11, R25 */
		/* 821ABA2Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R25);
		/* 821ABA2Ch case    3:*/		return 0x821ABA30;
		  /* 821ABA30h */ case    4:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821ABA30h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821ABA30h case    4:*/		return 0x821ABA34;
		  /* 821ABA34h */ case    5:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821ABA34h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821ABA34h case    5:*/		return 0x821ABA38;
		  /* 821ABA38h */ case    6:  		/* srw R10, R7, R10 */
		/* 821ABA38h case    6:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821ABA38h case    6:*/		return 0x821ABA3C;
		  /* 821ABA3Ch */ case    7:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821ABA3Ch case    7:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821ABA3Ch case    7:*/		return 0x821ABA40;
		  /* 821ABA40h */ case    8:  		/* mtspr CTR, R9 */
		/* 821ABA40h case    8:*/		regs.CTR = regs.R9;
		/* 821ABA40h case    8:*/		return 0x821ABA44;
		  /* 821ABA44h */ case    9:  		/* slw R9, R20, R11 */
		/* 821ABA44h case    9:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R11);
		/* 821ABA44h case    9:*/		return 0x821ABA48;
		  /* 821ABA48h */ case   10:  		/* slw R4, R10, R11 */
		/* 821ABA48h case   10:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 821ABA48h case   10:*/		return 0x821ABA4C;
		  /* 821ABA4Ch */ case   11:  		/* andc R9, R8, R9 */
		/* 821ABA4Ch case   11:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821ABA4Ch case   11:*/		return 0x821ABA50;
		  /* 821ABA50h */ case   12:  		/* addi R11, R11, 2 */
		/* 821ABA50h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821ABA50h case   12:*/		return 0x821ABA54;
		  /* 821ABA54h */ case   13:  		/* or R8, R9, R4 */
		/* 821ABA54h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R9,regs.R4);
		/* 821ABA54h case   13:*/		return 0x821ABA58;
		  /* 821ABA58h */ case   14:  		/* bc 16, CR0_LT, -20 */
		/* 821ABA58h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821ABA44;  }
		/* 821ABA58h case   14:*/		return 0x821ABA5C;
		  /* 821ABA5Ch */ case   15:  		/* cmplw CR6, R8, R7 */
		/* 821ABA5Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821ABA5Ch case   15:*/		return 0x821ABA60;
		  /* 821ABA60h */ case   16:  		/* bc 4, CR6_EQ, 12 */
		/* 821ABA60h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821ABA6C;  }
		/* 821ABA60h case   16:*/		return 0x821ABA64;
	}
	return 0x821ABA64;
} // Block from 821ABA20h-821ABA64h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821ABA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABA64);
		  /* 821ABA64h */ case    0:  		/* cmplw CR6, R26, R6 */
		/* 821ABA64h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R6);
		/* 821ABA64h case    0:*/		return 0x821ABA68;
		  /* 821ABA68h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821ABA68h case    1:*/		if ( regs.CR[6].eq ) { return 0x821ABA8C;  }
		/* 821ABA68h case    1:*/		return 0x821ABA6C;
	}
	return 0x821ABA6C;
} // Block from 821ABA64h-821ABA6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ABA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABA6C);
		  /* 821ABA6Ch */ case    0:  		/* rlwimi R5, R8, 5, 19, 26 */
		/* 821ABA6Ch case    0:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R5,regs.R8);
		/* 821ABA6Ch case    0:*/		return 0x821ABA70;
		  /* 821ABA70h */ case    1:  		/* mr R4, R18 */
		/* 821ABA70h case    1:*/		regs.R4 = regs.R18;
		/* 821ABA70h case    1:*/		return 0x821ABA74;
		  /* 821ABA74h */ case    2:  		/* stw R5, <#[R15]> */
		/* 821ABA74h case    2:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R15 + 0x00000000) );
		/* 821ABA74h case    2:*/		return 0x821ABA78;
		  /* 821ABA78h */ case    3:  		/* mr R3, R17 */
		/* 821ABA78h case    3:*/		regs.R3 = regs.R17;
		/* 821ABA78h case    3:*/		return 0x821ABA7C;
		  /* 821ABA7Ch */ case    4:  		/* lwz R11, <#[R16]> */
		/* 821ABA7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821ABA7Ch case    4:*/		return 0x821ABA80;
		  /* 821ABA80h */ case    5:  		/* rlwimi R11, R26, 5, 19, 26 */
		/* 821ABA80h case    5:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R26);
		/* 821ABA80h case    5:*/		return 0x821ABA84;
		  /* 821ABA84h */ case    6:  		/* stw R11, <#[R16]> */
		/* 821ABA84h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821ABA84h case    6:*/		return 0x821ABA88;
		  /* 821ABA88h */ case    7:  		/* bl -45008 */
		/* 821ABA88h case    7:*/		regs.LR = 0x821ABA8C; return 0x821A0AB8;
		/* 821ABA88h case    7:*/		return 0x821ABA8C;
	}
	return 0x821ABA8C;
} // Block from 821ABA6Ch-821ABA8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821ABA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABA8C);
		  /* 821ABA8Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821ABA8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821ABA8Ch case    0:*/		return 0x821ABA90;
		  /* 821ABA90h */ case    1:  		/* bc 12, CR6_EQ, 1332 */
		/* 821ABA90h case    1:*/		if ( regs.CR[6].eq ) { return 0x821ABFC4;  }
		/* 821ABA90h case    1:*/		return 0x821ABA94;
		  /* 821ABA94h */ case    2:  		/* cmplw CR6, R27, R25 */
		/* 821ABA94h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R25);
		/* 821ABA94h case    2:*/		return 0x821ABA98;
		  /* 821ABA98h */ case    3:  		/* bc 12, CR6_EQ, 1332 */
		/* 821ABA98h case    3:*/		if ( regs.CR[6].eq ) { return 0x821ABFCC;  }
		/* 821ABA98h case    3:*/		return 0x821ABA9C;
		  /* 821ABA9Ch */ case    4:  		/* lwz R11, <#[R18 + 8]> */
		/* 821ABA9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821ABA9Ch case    4:*/		return 0x821ABAA0;
		  /* 821ABAA0h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821ABAA0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821ABAA0h case    5:*/		return 0x821ABAA4;
		  /* 821ABAA4h */ case    6:  		/* bc 4, CR0_EQ, 388 */
		/* 821ABAA4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821ABC28;  }
		/* 821ABAA4h case    6:*/		return 0x821ABAA8;
		  /* 821ABAA8h */ case    7:  		/* addi R29, R18, 4 */
		/* 821ABAA8h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R18,0x4);
		/* 821ABAA8h case    7:*/		return 0x821ABAAC;
		  /* 821ABAACh */ case    8:  		/* li R30, -1 */
		/* 821ABAACh case    8:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 821ABAACh case    8:*/		return 0x821ABAB0;
		  /* 821ABAB0h */ case    9:  		/* lwz R31, <#[R29]> */
		/* 821ABAB0h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821ABAB0h case    9:*/		return 0x821ABAB4;
		  /* 821ABAB4h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821ABAB4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ABAB4h case   10:*/		return 0x821ABAB8;
		  /* 821ABAB8h */ case   11:  		/* bc 12, CR6_EQ, 368 */
		/* 821ABAB8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821ABC28;  }
		/* 821ABAB8h case   11:*/		return 0x821ABABC;
		  /* 821ABABCh */ case   12:  		/* lwz R11, <#[R31 + 16]> */
		/* 821ABABCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821ABABCh case   12:*/		return 0x821ABAC0;
		  /* 821ABAC0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821ABAC0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ABAC0h case   13:*/		return 0x821ABAC4;
		  /* 821ABAC4h */ case   14:  		/* bc 12, CR6_EQ, 336 */
		/* 821ABAC4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821ABC14;  }
		/* 821ABAC4h case   14:*/		return 0x821ABAC8;
		  /* 821ABAC8h */ case   15:  		/* lwz R10, <#[R31]> */
		/* 821ABAC8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABAC8h case   15:*/		return 0x821ABACC;
		  /* 821ABACCh */ case   16:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821ABACCh case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821ABACCh case   16:*/		return 0x821ABAD0;
		  /* 821ABAD0h */ case   17:  		/* bc 12, CR0_EQ, 324 */
		/* 821ABAD0h case   17:*/		if ( regs.CR[0].eq ) { return 0x821ABC14;  }
		/* 821ABAD0h case   17:*/		return 0x821ABAD4;
		  /* 821ABAD4h */ case   18:  		/* lwz R10, <#[R11 + 28]> */
		/* 821ABAD4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821ABAD4h case   18:*/		return 0x821ABAD8;
		  /* 821ABAD8h */ case   19:  		/* lwz R9, <#[R18 + 28]> */
		/* 821ABAD8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x0000001C) );
		/* 821ABAD8h case   19:*/		return 0x821ABADC;
		  /* 821ABADCh */ case   20:  		/* cmpw CR6, R10, R9 */
		/* 821ABADCh case   20:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 821ABADCh case   20:*/		return 0x821ABAE0;
		  /* 821ABAE0h */ case   21:  		/* bc 4, CR6_EQ, 308 */
		/* 821ABAE0h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821ABC14;  }
		/* 821ABAE0h case   21:*/		return 0x821ABAE4;
		  /* 821ABAE4h */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ABAE4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ABAE4h case   22:*/		return 0x821ABAE8;
		  /* 821ABAE8h */ case   23:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821ABAE8h case   23:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821ABAE8h case   23:*/		return 0x821ABAEC;
		  /* 821ABAECh */ case   24:  		/* cmplwi CR6, R11, 110 */
		/* 821ABAECh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821ABAECh case   24:*/		return 0x821ABAF0;
		  /* 821ABAF0h */ case   25:  		/* bc 12, CR6_EQ, 292 */
		/* 821ABAF0h case   25:*/		if ( regs.CR[6].eq ) { return 0x821ABC14;  }
		/* 821ABAF0h case   25:*/		return 0x821ABAF4;
		  /* 821ABAF4h */ case   26:  		/* cmplwi CR6, R11, 111 */
		/* 821ABAF4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006F);
		/* 821ABAF4h case   26:*/		return 0x821ABAF8;
		  /* 821ABAF8h */ case   27:  		/* bc 12, CR6_EQ, 284 */
		/* 821ABAF8h case   27:*/		if ( regs.CR[6].eq ) { return 0x821ABC14;  }
		/* 821ABAF8h case   27:*/		return 0x821ABAFC;
		  /* 821ABAFCh */ case   28:  		/* mr R3, R31 */
		/* 821ABAFCh case   28:*/		regs.R3 = regs.R31;
		/* 821ABAFCh case   28:*/		return 0x821ABB00;
		  /* 821ABB00h */ case   29:  		/* bl -293056 */
		/* 821ABB00h case   29:*/		regs.LR = 0x821ABB04; return 0x82164240;
		/* 821ABB00h case   29:*/		return 0x821ABB04;
		  /* 821ABB04h */ case   30:  		/* slw R11, R19, R27 */
		/* 821ABB04h case   30:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R19,regs.R27);
		/* 821ABB04h case   30:*/		return 0x821ABB08;
		  /* 821ABB08h */ case   31:  		/* cmplw CR6, R3, R11 */
		/* 821ABB08h case   31:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821ABB08h case   31:*/		return 0x821ABB0C;
		  /* 821ABB0Ch */ case   32:  		/* bc 4, CR6_LT, 116 */
		/* 821ABB0Ch case   32:*/		if ( !regs.CR[6].lt ) { return 0x821ABB80;  }
		/* 821ABB0Ch case   32:*/		return 0x821ABB10;
		  /* 821ABB10h */ case   33:  		/* addi R7, R1, 288 */
		/* 821ABB10h case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x120);
		/* 821ABB10h case   33:*/		return 0x821ABB14;
		  /* 821ABB14h */ case   34:  		/* addi R6, R1, 120 */
		/* 821ABB14h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 821ABB14h case   34:*/		return 0x821ABB18;
		  /* 821ABB18h */ case   35:  		/* mr R5, R15 */
		/* 821ABB18h case   35:*/		regs.R5 = regs.R15;
		/* 821ABB18h case   35:*/		return 0x821ABB1C;
		  /* 821ABB1Ch */ case   36:  		/* mr R4, R31 */
		/* 821ABB1Ch case   36:*/		regs.R4 = regs.R31;
		/* 821ABB1Ch case   36:*/		return 0x821ABB20;
		  /* 821ABB20h */ case   37:  		/* mr R3, R17 */
		/* 821ABB20h case   37:*/		regs.R3 = regs.R17;
		/* 821ABB20h case   37:*/		return 0x821ABB24;
		  /* 821ABB24h */ case   38:  		/* bl -62860 */
		/* 821ABB24h case   38:*/		regs.LR = 0x821ABB28; return 0x8219C598;
		/* 821ABB24h case   38:*/		return 0x821ABB28;
		  /* 821ABB28h */ case   39:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ABB28h case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ABB28h case   39:*/		return 0x821ABB2C;
		  /* 821ABB2Ch */ case   40:  		/* bc 12, CR0_EQ, 232 */
		/* 821ABB2Ch case   40:*/		if ( regs.CR[0].eq ) { return 0x821ABC14;  }
		/* 821ABB2Ch case   40:*/		return 0x821ABB30;
		  /* 821ABB30h */ case   41:  		/* lwz R11, <#[R1 + 120]> */
		/* 821ABB30h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821ABB30h case   41:*/		return 0x821ABB34;
		  /* 821ABB34h */ case   42:  		/* rlwinm. R10, R11, 0, 27, 28 */
		/* 821ABB34h case   42:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R11);
		/* 821ABB34h case   42:*/		return 0x821ABB38;
		  /* 821ABB38h */ case   43:  		/* bc 4, CR0_EQ, 220 */
		/* 821ABB38h case   43:*/		if ( !regs.CR[0].eq ) { return 0x821ABC14;  }
		/* 821ABB38h case   43:*/		return 0x821ABB3C;
		  /* 821ABB3Ch */ case   44:  		/* lwz R10, <#[R31]> */
		/* 821ABB3Ch case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABB3Ch case   44:*/		return 0x821ABB40;
		  /* 821ABB40h */ case   45:  		/* mr R3, R31 */
		/* 821ABB40h case   45:*/		regs.R3 = regs.R31;
		/* 821ABB40h case   45:*/		return 0x821ABB44;
		  /* 821ABB44h */ case   46:  		/* rlwimi R11, R10, 0, 0, 26 */
		/* 821ABB44h case   46:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R10);
		/* 821ABB44h case   46:*/		return 0x821ABB48;
		  /* 821ABB48h */ case   47:  		/* stw R11, <#[R31]> */
		/* 821ABB48h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABB48h case   47:*/		return 0x821ABB4C;
		  /* 821ABB4Ch */ case   48:  		/* lwz R11, <#[R15]> */
		/* 821ABB4Ch case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821ABB4Ch case   48:*/		return 0x821ABB50;
		  /* 821ABB50h */ case   49:  		/* rlwinm R4, R11, 27, 24, 31 */
		/* 821ABB50h case   49:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R11);
		/* 821ABB50h case   49:*/		return 0x821ABB54;
		  /* 821ABB54h */ case   50:  		/* bl -241132 */
		/* 821ABB54h case   50:*/		regs.LR = 0x821ABB58; return 0x82170D68;
		/* 821ABB54h case   50:*/		return 0x821ABB58;
		  /* 821ABB58h */ case   51:  		/* lwz R11, <#[R31 + 12]> */
		/* 821ABB58h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABB58h case   51:*/		return 0x821ABB5C;
		  /* 821ABB5Ch */ case   52:  		/* lwz R9, <#[R15 + 12]> */
		/* 821ABB5Ch case   52:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R15 + 0x0000000C) );
		/* 821ABB5Ch case   52:*/		return 0x821ABB60;
		  /* 821ABB60h */ case   53:  		/* addi R11, R11, 4 */
		/* 821ABB60h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821ABB60h case   53:*/		return 0x821ABB64;
		  /* 821ABB64h */ case   54:  		/* lwz R10, <#[R11]> */
		/* 821ABB64h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ABB64h case   54:*/		return 0x821ABB68;
		  /* 821ABB68h */ case   55:  		/* b 12 */
		/* 821ABB68h case   55:*/		return 0x821ABB74;
		/* 821ABB68h case   55:*/		return 0x821ABB6C;
		  /* 821ABB6Ch */ case   56:  		/* addi R11, R10, 8 */
		/* 821ABB6Ch case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821ABB6Ch case   56:*/		return 0x821ABB70;
		  /* 821ABB70h */ case   57:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ABB70h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ABB70h case   57:*/		return 0x821ABB74;
	}
	return 0x821ABB74;
} // Block from 821ABA8Ch-821ABB74h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821ABB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABB74);
		  /* 821ABB74h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821ABB74h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821ABB74h case    0:*/		return 0x821ABB78;
		  /* 821ABB78h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ABB78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ABB6C;  }
		/* 821ABB78h case    1:*/		return 0x821ABB7C;
		  /* 821ABB7Ch */ case    2:  		/* b 128 */
		/* 821ABB7Ch case    2:*/		return 0x821ABBFC;
		/* 821ABB7Ch case    2:*/		return 0x821ABB80;
	}
	return 0x821ABB80;
} // Block from 821ABB74h-821ABB80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821ABB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABB80);
		  /* 821ABB80h */ case    0:  		/* slw R11, R30, R27 */
		/* 821ABB80h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R30,regs.R27);
		/* 821ABB80h case    0:*/		return 0x821ABB84;
		  /* 821ABB84h */ case    1:  		/* and R11, R11, R3 */
		/* 821ABB84h case    1:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821ABB84h case    1:*/		return 0x821ABB88;
		  /* 821ABB88h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 821ABB88h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821ABB88h case    2:*/		return 0x821ABB8C;
		  /* 821ABB8Ch */ case    3:  		/* bc 4, CR6_EQ, 136 */
		/* 821ABB8Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821ABC14;  }
		/* 821ABB8Ch case    3:*/		return 0x821ABB90;
		  /* 821ABB90h */ case    4:  		/* addi R7, R1, 288 */
		/* 821ABB90h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x120);
		/* 821ABB90h case    4:*/		return 0x821ABB94;
		  /* 821ABB94h */ case    5:  		/* addi R6, R1, 184 */
		/* 821ABB94h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB8);
		/* 821ABB94h case    5:*/		return 0x821ABB98;
		  /* 821ABB98h */ case    6:  		/* mr R5, R16 */
		/* 821ABB98h case    6:*/		regs.R5 = regs.R16;
		/* 821ABB98h case    6:*/		return 0x821ABB9C;
		  /* 821ABB9Ch */ case    7:  		/* mr R4, R31 */
		/* 821ABB9Ch case    7:*/		regs.R4 = regs.R31;
		/* 821ABB9Ch case    7:*/		return 0x821ABBA0;
		  /* 821ABBA0h */ case    8:  		/* mr R3, R17 */
		/* 821ABBA0h case    8:*/		regs.R3 = regs.R17;
		/* 821ABBA0h case    8:*/		return 0x821ABBA4;
		  /* 821ABBA4h */ case    9:  		/* bl -62988 */
		/* 821ABBA4h case    9:*/		regs.LR = 0x821ABBA8; return 0x8219C598;
		/* 821ABBA4h case    9:*/		return 0x821ABBA8;
		  /* 821ABBA8h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ABBA8h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ABBA8h case   10:*/		return 0x821ABBAC;
		  /* 821ABBACh */ case   11:  		/* bc 12, CR0_EQ, 104 */
		/* 821ABBACh case   11:*/		if ( regs.CR[0].eq ) { return 0x821ABC14;  }
		/* 821ABBACh case   11:*/		return 0x821ABBB0;
		  /* 821ABBB0h */ case   12:  		/* lwz R11, <#[R1 + 184]> */
		/* 821ABBB0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 821ABBB0h case   12:*/		return 0x821ABBB4;
		  /* 821ABBB4h */ case   13:  		/* rlwinm. R10, R11, 0, 27, 28 */
		/* 821ABBB4h case   13:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R11);
		/* 821ABBB4h case   13:*/		return 0x821ABBB8;
		  /* 821ABBB8h */ case   14:  		/* bc 4, CR0_EQ, 92 */
		/* 821ABBB8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821ABC14;  }
		/* 821ABBB8h case   14:*/		return 0x821ABBBC;
		  /* 821ABBBCh */ case   15:  		/* lwz R10, <#[R31]> */
		/* 821ABBBCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABBBCh case   15:*/		return 0x821ABBC0;
		  /* 821ABBC0h */ case   16:  		/* mr R3, R31 */
		/* 821ABBC0h case   16:*/		regs.R3 = regs.R31;
		/* 821ABBC0h case   16:*/		return 0x821ABBC4;
		  /* 821ABBC4h */ case   17:  		/* rlwimi R11, R10, 0, 0, 26 */
		/* 821ABBC4h case   17:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R10);
		/* 821ABBC4h case   17:*/		return 0x821ABBC8;
		  /* 821ABBC8h */ case   18:  		/* stw R11, <#[R31]> */
		/* 821ABBC8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABBC8h case   18:*/		return 0x821ABBCC;
		  /* 821ABBCCh */ case   19:  		/* lwz R11, <#[R16]> */
		/* 821ABBCCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821ABBCCh case   19:*/		return 0x821ABBD0;
		  /* 821ABBD0h */ case   20:  		/* rlwinm R4, R11, 27, 24, 31 */
		/* 821ABBD0h case   20:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R11);
		/* 821ABBD0h case   20:*/		return 0x821ABBD4;
		  /* 821ABBD4h */ case   21:  		/* bl -241260 */
		/* 821ABBD4h case   21:*/		regs.LR = 0x821ABBD8; return 0x82170D68;
		/* 821ABBD4h case   21:*/		return 0x821ABBD8;
		  /* 821ABBD8h */ case   22:  		/* lwz R11, <#[R31 + 12]> */
		/* 821ABBD8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABBD8h case   22:*/		return 0x821ABBDC;
		  /* 821ABBDCh */ case   23:  		/* lwz R9, <#[R16 + 12]> */
		/* 821ABBDCh case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x0000000C) );
		/* 821ABBDCh case   23:*/		return 0x821ABBE0;
		  /* 821ABBE0h */ case   24:  		/* addi R11, R11, 4 */
		/* 821ABBE0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821ABBE0h case   24:*/		return 0x821ABBE4;
		  /* 821ABBE4h */ case   25:  		/* lwz R10, <#[R11]> */
		/* 821ABBE4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ABBE4h case   25:*/		return 0x821ABBE8;
		  /* 821ABBE8h */ case   26:  		/* b 12 */
		/* 821ABBE8h case   26:*/		return 0x821ABBF4;
		/* 821ABBE8h case   26:*/		return 0x821ABBEC;
		  /* 821ABBECh */ case   27:  		/* addi R11, R10, 8 */
		/* 821ABBECh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821ABBECh case   27:*/		return 0x821ABBF0;
		  /* 821ABBF0h */ case   28:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ABBF0h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ABBF0h case   28:*/		return 0x821ABBF4;
	}
	return 0x821ABBF4;
} // Block from 821ABB80h-821ABBF4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821ABBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABBF4);
		  /* 821ABBF4h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821ABBF4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821ABBF4h case    0:*/		return 0x821ABBF8;
		  /* 821ABBF8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ABBF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ABBEC;  }
		/* 821ABBF8h case    1:*/		return 0x821ABBFC;
	}
	return 0x821ABBFC;
} // Block from 821ABBF4h-821ABBFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ABBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABBFC);
		  /* 821ABBFCh */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821ABBFCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821ABBFCh case    0:*/		return 0x821ABC00;
		  /* 821ABC00h */ case    1:  		/* stw R10, <#[R11]> */
		/* 821ABC00h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ABC00h case    1:*/		return 0x821ABC04;
		  /* 821ABC04h */ case    2:  		/* lwz R11, <#[R9 + 4]> */
		/* 821ABC04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821ABC04h case    2:*/		return 0x821ABC08;
		  /* 821ABC08h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821ABC08h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ABC08h case    3:*/		return 0x821ABC0C;
		  /* 821ABC0Ch */ case    4:  		/* stw R31, <#[R9 + 4]> */
		/* 821ABC0Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + 0x00000004) );
		/* 821ABC0Ch case    4:*/		return 0x821ABC10;
		  /* 821ABC10h */ case    5:  		/* stw R9, <#[R31 + 12]> */
		/* 821ABC10h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABC10h case    5:*/		return 0x821ABC14;
	}
	return 0x821ABC14;
} // Block from 821ABBFCh-821ABC14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821ABC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABC14);
		  /* 821ABC14h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821ABC14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821ABC14h case    0:*/		return 0x821ABC18;
		  /* 821ABC18h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821ABC18h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821ABC18h case    1:*/		return 0x821ABC1C;
		  /* 821ABC1Ch */ case    2:  		/* bc 4, CR6_EQ, -364 */
		/* 821ABC1Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821ABAB0;  }
		/* 821ABC1Ch case    2:*/		return 0x821ABC20;
		  /* 821ABC20h */ case    3:  		/* addi R29, R31, 8 */
		/* 821ABC20h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821ABC20h case    3:*/		return 0x821ABC24;
		  /* 821ABC24h */ case    4:  		/* b -372 */
		/* 821ABC24h case    4:*/		return 0x821ABAB0;
		/* 821ABC24h case    4:*/		return 0x821ABC28;
	}
	return 0x821ABC28;
} // Block from 821ABC14h-821ABC28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821ABC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABC28);
		  /* 821ABC28h */ case    0:  		/* lwz R11, <#[R18 + 8]> */
		/* 821ABC28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821ABC28h case    0:*/		return 0x821ABC2C;
		  /* 821ABC2Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821ABC2Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821ABC2Ch case    1:*/		return 0x821ABC30;
		  /* 821ABC30h */ case    2:  		/* bc 4, CR0_EQ, 1032 */
		/* 821ABC30h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AC038;  }
		/* 821ABC30h case    2:*/		return 0x821ABC34;
		  /* 821ABC34h */ case    3:  		/* li R28, 0 */
		/* 821ABC34h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821ABC34h case    3:*/		return 0x821ABC38;
		  /* 821ABC38h */ case    4:  		/* li R29, 0 */
		/* 821ABC38h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821ABC38h case    4:*/		return 0x821ABC3C;
		  /* 821ABC3Ch */ case    5:  		/* cmplwi CR6, R25, 0 */
		/* 821ABC3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821ABC3Ch case    5:*/		return 0x821ABC40;
		  /* 821ABC40h */ case    6:  		/* bc 12, CR6_EQ, 72 */
		/* 821ABC40h case    6:*/		if ( regs.CR[6].eq ) { return 0x821ABC88;  }
		/* 821ABC40h case    6:*/		return 0x821ABC44;
		  /* 821ABC44h */ case    7:  		/* li R11, 0 */
		/* 821ABC44h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821ABC44h case    7:*/		return 0x821ABC48;
		  /* 821ABC48h */ case    8:  		/* mtspr CTR, R25 */
		/* 821ABC48h case    8:*/		regs.CTR = regs.R25;
		/* 821ABC48h case    8:*/		return 0x821ABC4C;
		  /* 821ABC4Ch */ case    9:  		/* li R10, 0 */
		/* 821ABC4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821ABC4Ch case    9:*/		return 0x821ABC50;
		  /* 821ABC50h */ case   10:  		/* srw R9, R24, R10 */
		/* 821ABC50h case   10:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R10);
		/* 821ABC50h case   10:*/		return 0x821ABC54;
		  /* 821ABC54h */ case   11:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821ABC54h case   11:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821ABC54h case   11:*/		return 0x821ABC58;
		  /* 821ABC58h */ case   12:  		/* cmplwi CR6, R9, 1 */
		/* 821ABC58h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821ABC58h case   12:*/		return 0x821ABC5C;
		  /* 821ABC5Ch */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 821ABC5Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821ABC80;  }
		/* 821ABC5Ch case   13:*/		return 0x821ABC60;
		  /* 821ABC60h */ case   14:  		/* srw R9, R26, R10 */
		/* 821ABC60h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R26,regs.R10);
		/* 821ABC60h case   14:*/		return 0x821ABC64;
		  /* 821ABC64h */ case   15:  		/* slw R8, R20, R11 */
		/* 821ABC64h case   15:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R20,regs.R11);
		/* 821ABC64h case   15:*/		return 0x821ABC68;
		  /* 821ABC68h */ case   16:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821ABC68h case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821ABC68h case   16:*/		return 0x821ABC6C;
		  /* 821ABC6Ch */ case   17:  		/* andc R8, R28, R8 */
		/* 821ABC6Ch case   17:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R28,regs.R8);
		/* 821ABC6Ch case   17:*/		return 0x821ABC70;
		  /* 821ABC70h */ case   18:  		/* slw R9, R9, R11 */
		/* 821ABC70h case   18:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821ABC70h case   18:*/		return 0x821ABC74;
		  /* 821ABC74h */ case   19:  		/* addi R29, R29, 1 */
		/* 821ABC74h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821ABC74h case   19:*/		return 0x821ABC78;
		  /* 821ABC78h */ case   20:  		/* or R28, R9, R8 */
		/* 821ABC78h case   20:*/		cpu::op::or<0>(regs,&regs.R28,regs.R9,regs.R8);
		/* 821ABC78h case   20:*/		return 0x821ABC7C;
		  /* 821ABC7Ch */ case   21:  		/* addi R11, R11, 2 */
		/* 821ABC7Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821ABC7Ch case   21:*/		return 0x821ABC80;
	}
	return 0x821ABC80;
} // Block from 821ABC28h-821ABC80h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821ABC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABC80);
		  /* 821ABC80h */ case    0:  		/* addi R10, R10, 2 */
		/* 821ABC80h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821ABC80h case    0:*/		return 0x821ABC84;
		  /* 821ABC84h */ case    1:  		/* bc 16, CR0_LT, -52 */
		/* 821ABC84h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821ABC50;  }
		/* 821ABC84h case    1:*/		return 0x821ABC88;
	}
	return 0x821ABC88;
} // Block from 821ABC80h-821ABC88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ABC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABC88);
		  /* 821ABC88h */ case    0:  		/* mr R4, R15 */
		/* 821ABC88h case    0:*/		regs.R4 = regs.R15;
		/* 821ABC88h case    0:*/		return 0x821ABC8C;
		  /* 821ABC8Ch */ case    1:  		/* lwz R5, <#[R15 + 12]> */
		/* 821ABC8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R15 + 0x0000000C) );
		/* 821ABC8Ch case    1:*/		return 0x821ABC90;
		  /* 821ABC90h */ case    2:  		/* mr R3, R17 */
		/* 821ABC90h case    2:*/		regs.R3 = regs.R17;
		/* 821ABC90h case    2:*/		return 0x821ABC94;
		  /* 821ABC94h */ case    3:  		/* bl -240548 */
		/* 821ABC94h case    3:*/		regs.LR = 0x821ABC98; return 0x821710F0;
		/* 821ABC94h case    3:*/		return 0x821ABC98;
		  /* 821ABC98h */ case    4:  		/* mr R31, R3 */
		/* 821ABC98h case    4:*/		regs.R31 = regs.R3;
		/* 821ABC98h case    4:*/		return 0x821ABC9C;
		  /* 821ABC9Ch */ case    5:  		/* mr R4, R16 */
		/* 821ABC9Ch case    5:*/		regs.R4 = regs.R16;
		/* 821ABC9Ch case    5:*/		return 0x821ABCA0;
		  /* 821ABCA0h */ case    6:  		/* mr R3, R17 */
		/* 821ABCA0h case    6:*/		regs.R3 = regs.R17;
		/* 821ABCA0h case    6:*/		return 0x821ABCA4;
		  /* 821ABCA4h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821ABCA4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABCA4h case    7:*/		return 0x821ABCA8;
		  /* 821ABCA8h */ case    8:  		/* rlwimi R11, R27, 25, 4, 6 */
		/* 821ABCA8h case    8:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R27);
		/* 821ABCA8h case    8:*/		return 0x821ABCAC;
		  /* 821ABCACh */ case    9:  		/* stw R11, <#[R31]> */
		/* 821ABCACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821ABCACh case    9:*/		return 0x821ABCB0;
		  /* 821ABCB0h */ case   10:  		/* lwz R5, <#[R16 + 12]> */
		/* 821ABCB0h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000000C) );
		/* 821ABCB0h case   10:*/		return 0x821ABCB4;
		  /* 821ABCB4h */ case   11:  		/* bl -240580 */
		/* 821ABCB4h case   11:*/		regs.LR = 0x821ABCB8; return 0x821710F0;
		/* 821ABCB4h case   11:*/		return 0x821ABCB8;
		  /* 821ABCB8h */ case   12:  		/* lwz R8, <#[R3]> */
		/* 821ABCB8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821ABCB8h case   12:*/		return 0x821ABCBC;
		  /* 821ABCBCh */ case   13:  		/* rlwinm R9, R28, 0, 24, 31 */
		/* 821ABCBCh case   13:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R28);
		/* 821ABCBCh case   13:*/		return 0x821ABCC0;
		  /* 821ABCC0h */ case   14:  		/* rlwinm R11, R29, 20, 9, 11 */
		/* 821ABCC0h case   14:*/		cpu::op::rlwinm<0,20,9,11>(regs,&regs.R11,regs.R29);
		/* 821ABCC0h case   14:*/		return 0x821ABCC4;
		  /* 821ABCC4h */ case   15:  		/* rlwinm R7, R8, 0, 27, 18 */
		/* 821ABCC4h case   15:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R7,regs.R8);
		/* 821ABCC4h case   15:*/		return 0x821ABCC8;
		  /* 821ABCC8h */ case   16:  		/* or R11, R11, R9 */
		/* 821ABCC8h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821ABCC8h case   16:*/		return 0x821ABCCC;
		  /* 821ABCCCh */ case   17:  		/* rlwinm R7, R7, 0, 7, 3 */
		/* 821ABCCCh case   17:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R7,regs.R7);
		/* 821ABCCCh case   17:*/		return 0x821ABCD0;
		  /* 821ABCD0h */ case   18:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821ABCD0h case   18:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821ABCD0h case   18:*/		return 0x821ABCD4;
		  /* 821ABCD4h */ case   19:  		/* mr R30, R3 */
		/* 821ABCD4h case   19:*/		regs.R30 = regs.R3;
		/* 821ABCD4h case   19:*/		return 0x821ABCD8;
		  /* 821ABCD8h */ case   20:  		/* or R11, R11, R7 */
		/* 821ABCD8h case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821ABCD8h case   20:*/		return 0x821ABCDC;
		  /* 821ABCDCh */ case   21:  		/* mr R7, R3 */
		/* 821ABCDCh case   21:*/		regs.R7 = regs.R3;
		/* 821ABCDCh case   21:*/		return 0x821ABCE0;
		  /* 821ABCE0h */ case   22:  		/* stw R11, <#[R3]> */
		/* 821ABCE0h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821ABCE0h case   22:*/		return 0x821ABCE4;
		  /* 821ABCE4h */ case   23:  		/* li R10, 1 */
		/* 821ABCE4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ABCE4h case   23:*/		return 0x821ABCE8;
		  /* 821ABCE8h */ case   24:  		/* addi R9, R1, 384 */
		/* 821ABCE8h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x180);
		/* 821ABCE8h case   24:*/		return 0x821ABCEC;
		  /* 821ABCECh */ case   25:  		/* mr R8, R18 */
		/* 821ABCECh case   25:*/		regs.R8 = regs.R18;
		/* 821ABCECh case   25:*/		return 0x821ABCF0;
		  /* 821ABCF0h */ case   26:  		/* mr R6, R18 */
		/* 821ABCF0h case   26:*/		regs.R6 = regs.R18;
		/* 821ABCF0h case   26:*/		return 0x821ABCF4;
		  /* 821ABCF4h */ case   27:  		/* mr R5, R31 */
		/* 821ABCF4h case   27:*/		regs.R5 = regs.R31;
		/* 821ABCF4h case   27:*/		return 0x821ABCF8;
		  /* 821ABCF8h */ case   28:  		/* mr R4, R18 */
		/* 821ABCF8h case   28:*/		regs.R4 = regs.R18;
		/* 821ABCF8h case   28:*/		return 0x821ABCFC;
		  /* 821ABCFCh */ case   29:  		/* mr R3, R17 */
		/* 821ABCFCh case   29:*/		regs.R3 = regs.R17;
		/* 821ABCFCh case   29:*/		return 0x821ABD00;
		  /* 821ABD00h */ case   30:  		/* bl -48744 */
		/* 821ABD00h case   30:*/		regs.LR = 0x821ABD04; return 0x8219FE98;
		/* 821ABD00h case   30:*/		return 0x821ABD04;
		  /* 821ABD04h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 821ABD04h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821ABD04h case   31:*/		return 0x821ABD08;
		  /* 821ABD08h */ case   32:  		/* bc 4, CR0_EQ, 188 */
		/* 821ABD08h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821ABDC4;  }
		/* 821ABD08h case   32:*/		return 0x821ABD0C;
		  /* 821ABD0Ch */ case   33:  		/* addi R10, R1, 384 */
		/* 821ABD0Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x180);
		/* 821ABD0Ch case   33:*/		return 0x821ABD10;
		  /* 821ABD10h */ case   34:  		/* lwz R8, <#[R18 + 28]> */
		/* 821ABD10h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821ABD10h case   34:*/		return 0x821ABD14;
		  /* 821ABD14h */ case   35:  		/* mr R9, R18 */
		/* 821ABD14h case   35:*/		regs.R9 = regs.R18;
		/* 821ABD14h case   35:*/		return 0x821ABD18;
		  /* 821ABD18h */ case   36:  		/* mr R7, R30 */
		/* 821ABD18h case   36:*/		regs.R7 = regs.R30;
		/* 821ABD18h case   36:*/		return 0x821ABD1C;
		  /* 821ABD1Ch */ case   37:  		/* mr R6, R18 */
		/* 821ABD1Ch case   37:*/		regs.R6 = regs.R18;
		/* 821ABD1Ch case   37:*/		return 0x821ABD20;
		  /* 821ABD20h */ case   38:  		/* mr R5, R31 */
		/* 821ABD20h case   38:*/		regs.R5 = regs.R31;
		/* 821ABD20h case   38:*/		return 0x821ABD24;
		  /* 821ABD24h */ case   39:  		/* mr R4, R18 */
		/* 821ABD24h case   39:*/		regs.R4 = regs.R18;
		/* 821ABD24h case   39:*/		return 0x821ABD28;
		  /* 821ABD28h */ case   40:  		/* mr R3, R17 */
		/* 821ABD28h case   40:*/		regs.R3 = regs.R17;
		/* 821ABD28h case   40:*/		return 0x821ABD2C;
		  /* 821ABD2Ch */ case   41:  		/* bl -37428 */
		/* 821ABD2Ch case   41:*/		regs.LR = 0x821ABD30; return 0x821A2AF8;
		/* 821ABD2Ch case   41:*/		return 0x821ABD30;
		  /* 821ABD30h */ case   42:  		/* lwz R11, <#[R31 + 12]> */
		/* 821ABD30h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABD30h case   42:*/		return 0x821ABD34;
		  /* 821ABD34h */ case   43:  		/* mr R29, R3 */
		/* 821ABD34h case   43:*/		regs.R29 = regs.R3;
		/* 821ABD34h case   43:*/		return 0x821ABD38;
		  /* 821ABD38h */ case   44:  		/* addi R10, R11, 4 */
		/* 821ABD38h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821ABD38h case   44:*/		return 0x821ABD3C;
		  /* 821ABD3Ch */ case   45:  		/* lwz R11, <#[R11 + 4]> */
		/* 821ABD3Ch case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821ABD3Ch case   45:*/		return 0x821ABD40;
		  /* 821ABD40h */ case   46:  		/* b 12 */
		/* 821ABD40h case   46:*/		return 0x821ABD4C;
		/* 821ABD40h case   46:*/		return 0x821ABD44;
		  /* 821ABD44h */ case   47:  		/* addi R10, R11, 8 */
		/* 821ABD44h case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821ABD44h case   47:*/		return 0x821ABD48;
		  /* 821ABD48h */ case   48:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ABD48h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ABD48h case   48:*/		return 0x821ABD4C;
	}
	return 0x821ABD4C;
} // Block from 821ABC88h-821ABD4Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 821ABD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABD4C);
		  /* 821ABD4Ch */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821ABD4Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821ABD4Ch case    0:*/		return 0x821ABD50;
		  /* 821ABD50h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ABD50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ABD44;  }
		/* 821ABD50h case    1:*/		return 0x821ABD54;
		  /* 821ABD54h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ABD54h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ABD54h case    2:*/		return 0x821ABD58;
		  /* 821ABD58h */ case    3:  		/* li R6, 26 */
		/* 821ABD58h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821ABD58h case    3:*/		return 0x821ABD5C;
		  /* 821ABD5Ch */ case    4:  		/* li R5, 20 */
		/* 821ABD5Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821ABD5Ch case    4:*/		return 0x821ABD60;
		  /* 821ABD60h */ case    5:  		/* mr R4, R31 */
		/* 821ABD60h case    5:*/		regs.R4 = regs.R31;
		/* 821ABD60h case    5:*/		return 0x821ABD64;
		  /* 821ABD64h */ case    6:  		/* mr R3, R17 */
		/* 821ABD64h case    6:*/		regs.R3 = regs.R17;
		/* 821ABD64h case    6:*/		return 0x821ABD68;
		  /* 821ABD68h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821ABD68h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821ABD68h case    7:*/		return 0x821ABD6C;
		  /* 821ABD6Ch */ case    8:  		/* bl -291028 */
		/* 821ABD6Ch case    8:*/		regs.LR = 0x821ABD70; return 0x82164C98;
		/* 821ABD6Ch case    8:*/		return 0x821ABD70;
		  /* 821ABD70h */ case    9:  		/* lwz R11, <#[R30 + 12]> */
		/* 821ABD70h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ABD70h case    9:*/		return 0x821ABD74;
		  /* 821ABD74h */ case   10:  		/* addi R10, R11, 4 */
		/* 821ABD74h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821ABD74h case   10:*/		return 0x821ABD78;
		  /* 821ABD78h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821ABD78h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821ABD78h case   11:*/		return 0x821ABD7C;
		  /* 821ABD7Ch */ case   12:  		/* b 12 */
		/* 821ABD7Ch case   12:*/		return 0x821ABD88;
		/* 821ABD7Ch case   12:*/		return 0x821ABD80;
		  /* 821ABD80h */ case   13:  		/* addi R10, R11, 8 */
		/* 821ABD80h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821ABD80h case   13:*/		return 0x821ABD84;
		  /* 821ABD84h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ABD84h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ABD84h case   14:*/		return 0x821ABD88;
	}
	return 0x821ABD88;
} // Block from 821ABD4Ch-821ABD88h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821ABD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABD88);
		  /* 821ABD88h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 821ABD88h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821ABD88h case    0:*/		return 0x821ABD8C;
		  /* 821ABD8Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ABD8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ABD80;  }
		/* 821ABD8Ch case    1:*/		return 0x821ABD90;
		  /* 821ABD90h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ABD90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ABD90h case    2:*/		return 0x821ABD94;
		  /* 821ABD94h */ case    3:  		/* li R6, 26 */
		/* 821ABD94h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821ABD94h case    3:*/		return 0x821ABD98;
		  /* 821ABD98h */ case    4:  		/* li R5, 20 */
		/* 821ABD98h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821ABD98h case    4:*/		return 0x821ABD9C;
		  /* 821ABD9Ch */ case    5:  		/* mr R4, R30 */
		/* 821ABD9Ch case    5:*/		regs.R4 = regs.R30;
		/* 821ABD9Ch case    5:*/		return 0x821ABDA0;
		  /* 821ABDA0h */ case    6:  		/* mr R3, R17 */
		/* 821ABDA0h case    6:*/		regs.R3 = regs.R17;
		/* 821ABDA0h case    6:*/		return 0x821ABDA4;
		  /* 821ABDA4h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821ABDA4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821ABDA4h case    7:*/		return 0x821ABDA8;
		  /* 821ABDA8h */ case    8:  		/* bl -291088 */
		/* 821ABDA8h case    8:*/		regs.LR = 0x821ABDAC; return 0x82164C98;
		/* 821ABDA8h case    8:*/		return 0x821ABDAC;
		  /* 821ABDACh */ case    9:  		/* li R6, 1 */
		/* 821ABDACh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ABDACh case    9:*/		return 0x821ABDB0;
		  /* 821ABDB0h */ case   10:  		/* mr R5, R29 */
		/* 821ABDB0h case   10:*/		regs.R5 = regs.R29;
		/* 821ABDB0h case   10:*/		return 0x821ABDB4;
		  /* 821ABDB4h */ case   11:  		/* mr R4, R18 */
		/* 821ABDB4h case   11:*/		regs.R4 = regs.R18;
		/* 821ABDB4h case   11:*/		return 0x821ABDB8;
		  /* 821ABDB8h */ case   12:  		/* mr R3, R17 */
		/* 821ABDB8h case   12:*/		regs.R3 = regs.R17;
		/* 821ABDB8h case   12:*/		return 0x821ABDBC;
		  /* 821ABDBCh */ case   13:  		/* bl -26572 */
		/* 821ABDBCh case   13:*/		regs.LR = 0x821ABDC0; return 0x821A55F0;
		/* 821ABDBCh case   13:*/		return 0x821ABDC0;
		  /* 821ABDC0h */ case   14:  		/* b -5084 */
		/* 821ABDC0h case   14:*/		return 0x821AA9E4;
		/* 821ABDC0h case   14:*/		return 0x821ABDC4;
	}
	return 0x821ABDC4;
} // Block from 821ABD88h-821ABDC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821ABDC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABDC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABDC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABDC4);
		  /* 821ABDC4h */ case    0:  		/* lwz R11, <#[R15]> */
		/* 821ABDC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821ABDC4h case    0:*/		return 0x821ABDC8;
		  /* 821ABDC8h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821ABDC8h case    1:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821ABDC8h case    1:*/		return 0x821ABDCC;
		  /* 821ABDCCh */ case    2:  		/* bc 4, CR0_EQ, 616 */
		/* 821ABDCCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AC034;  }
		/* 821ABDCCh case    2:*/		return 0x821ABDD0;
		  /* 821ABDD0h */ case    3:  		/* lwz R11, <#[R16]> */
		/* 821ABDD0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821ABDD0h case    3:*/		return 0x821ABDD4;
		  /* 821ABDD4h */ case    4:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821ABDD4h case    4:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821ABDD4h case    4:*/		return 0x821ABDD8;
		  /* 821ABDD8h */ case    5:  		/* bc 4, CR0_EQ, 604 */
		/* 821ABDD8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821AC034;  }
		/* 821ABDD8h case    5:*/		return 0x821ABDDC;
		  /* 821ABDDCh */ case    6:  		/* mr R3, R18 */
		/* 821ABDDCh case    6:*/		regs.R3 = regs.R18;
		/* 821ABDDCh case    6:*/		return 0x821ABDE0;
		  /* 821ABDE0h */ case    7:  		/* bl -218464 */
		/* 821ABDE0h case    7:*/		regs.LR = 0x821ABDE4; return 0x82176880;
		/* 821ABDE0h case    7:*/		return 0x821ABDE4;
		  /* 821ABDE4h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821ABDE4h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821ABDE4h case    8:*/		return 0x821ABDE8;
		  /* 821ABDE8h */ case    9:  		/* bc 4, CR0_EQ, 588 */
		/* 821ABDE8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821AC034;  }
		/* 821ABDE8h case    9:*/		return 0x821ABDEC;
		  /* 821ABDECh */ case   10:  		/* mr R3, R14 */
		/* 821ABDECh case   10:*/		regs.R3 = regs.R14;
		/* 821ABDECh case   10:*/		return 0x821ABDF0;
		  /* 821ABDF0h */ case   11:  		/* bl -218480 */
		/* 821ABDF0h case   11:*/		regs.LR = 0x821ABDF4; return 0x82176880;
		/* 821ABDF0h case   11:*/		return 0x821ABDF4;
		  /* 821ABDF4h */ case   12:  		/* mr R31, R3 */
		/* 821ABDF4h case   12:*/		regs.R31 = regs.R3;
		/* 821ABDF4h case   12:*/		return 0x821ABDF8;
		  /* 821ABDF8h */ case   13:  		/* mr R3, R22 */
		/* 821ABDF8h case   13:*/		regs.R3 = regs.R22;
		/* 821ABDF8h case   13:*/		return 0x821ABDFC;
		  /* 821ABDFCh */ case   14:  		/* bl -218492 */
		/* 821ABDFCh case   14:*/		regs.LR = 0x821ABE00; return 0x82176880;
		/* 821ABDFCh case   14:*/		return 0x821ABE00;
		  /* 821ABE00h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 821ABE00h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ABE00h case   15:*/		return 0x821ABE04;
		  /* 821ABE04h */ case   16:  		/* bc 4, CR6_EQ, 332 */
		/* 821ABE04h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821ABF50;  }
		/* 821ABE04h case   16:*/		return 0x821ABE08;
		  /* 821ABE08h */ case   17:  		/* cmplwi CR6, R3, 0 */
		/* 821ABE08h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821ABE08h case   17:*/		return 0x821ABE0C;
		  /* 821ABE0Ch */ case   18:  		/* bc 12, CR6_EQ, 552 */
		/* 821ABE0Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821AC034;  }
		/* 821ABE0Ch case   18:*/		return 0x821ABE10;
		  /* 821ABE10h */ case   19:  		/* mr R29, R3 */
		/* 821ABE10h case   19:*/		regs.R29 = regs.R3;
		/* 821ABE10h case   19:*/		return 0x821ABE14;
		  /* 821ABE14h */ case   20:  		/* li R6, 1 */
		/* 821ABE14h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ABE14h case   20:*/		return 0x821ABE18;
		  /* 821ABE18h */ case   21:  		/* mr R5, R18 */
		/* 821ABE18h case   21:*/		regs.R5 = regs.R18;
		/* 821ABE18h case   21:*/		return 0x821ABE1C;
		  /* 821ABE1Ch */ case   22:  		/* mr R4, R29 */
		/* 821ABE1Ch case   22:*/		regs.R4 = regs.R29;
		/* 821ABE1Ch case   22:*/		return 0x821ABE20;
		  /* 821ABE20h */ case   23:  		/* mr R3, R17 */
		/* 821ABE20h case   23:*/		regs.R3 = regs.R17;
		/* 821ABE20h case   23:*/		return 0x821ABE24;
		  /* 821ABE24h */ case   24:  		/* bl 525892 */
		/* 821ABE24h case   24:*/		regs.LR = 0x821ABE28; return 0x8222C468;
		/* 821ABE24h case   24:*/		return 0x821ABE28;
		  /* 821ABE28h */ case   25:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ABE28h case   25:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ABE28h case   25:*/		return 0x821ABE2C;
		  /* 821ABE2Ch */ case   26:  		/* bc 12, CR0_EQ, 520 */
		/* 821ABE2Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x821AC034;  }
		/* 821ABE2Ch case   26:*/		return 0x821ABE30;
		  /* 821ABE30h */ case   27:  		/* addi R6, R1, 208 */
		/* 821ABE30h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD0);
		/* 821ABE30h case   27:*/		return 0x821ABE34;
		  /* 821ABE34h */ case   28:  		/* addi R5, R1, 480 */
		/* 821ABE34h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E0);
		/* 821ABE34h case   28:*/		return 0x821ABE38;
		  /* 821ABE38h */ case   29:  		/* addi R4, R1, 240 */
		/* 821ABE38h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xF0);
		/* 821ABE38h case   29:*/		return 0x821ABE3C;
		  /* 821ABE3Ch */ case   30:  		/* mr R3, R29 */
		/* 821ABE3Ch case   30:*/		regs.R3 = regs.R29;
		/* 821ABE3Ch case   30:*/		return 0x821ABE40;
		  /* 821ABE40h */ case   31:  		/* bl -67184 */
		/* 821ABE40h case   31:*/		regs.LR = 0x821ABE44; return 0x8219B7D0;
		/* 821ABE40h case   31:*/		return 0x821ABE44;
		  /* 821ABE44h */ case   32:  		/* li R27, 0 */
		/* 821ABE44h case   32:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821ABE44h case   32:*/		return 0x821ABE48;
		  /* 821ABE48h */ case   33:  		/* cmplwi CR6, R25, 0 */
		/* 821ABE48h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821ABE48h case   33:*/		return 0x821ABE4C;
		  /* 821ABE4Ch */ case   34:  		/* mr R30, R27 */
		/* 821ABE4Ch case   34:*/		regs.R30 = regs.R27;
		/* 821ABE4Ch case   34:*/		return 0x821ABE50;
		  /* 821ABE50h */ case   35:  		/* bc 12, CR6_EQ, 96 */
		/* 821ABE50h case   35:*/		if ( regs.CR[6].eq ) { return 0x821ABEB0;  }
		/* 821ABE50h case   35:*/		return 0x821ABE54;
		  /* 821ABE54h */ case   36:  		/* mr R28, R27 */
		/* 821ABE54h case   36:*/		regs.R28 = regs.R27;
		/* 821ABE54h case   36:*/		return 0x821ABE58;
		  /* 821ABE58h */ case   37:  		/* mr R31, R27 */
		/* 821ABE58h case   37:*/		regs.R31 = regs.R27;
		/* 821ABE58h case   37:*/		return 0x821ABE5C;
		  /* 821ABE5Ch */ case   38:  		/* srw R11, R24, R28 */
		/* 821ABE5Ch case   38:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R24,regs.R28);
		/* 821ABE5Ch case   38:*/		return 0x821ABE60;
		  /* 821ABE60h */ case   39:  		/* lwz R8, <#[R18 + 28]> */
		/* 821ABE60h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821ABE60h case   39:*/		return 0x821ABE64;
		  /* 821ABE64h */ case   40:  		/* rlwinm. R11, R11, 0, 30, 31 */
		/* 821ABE64h case   40:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821ABE64h case   40:*/		return 0x821ABE68;
		  /* 821ABE68h */ case   41:  		/* addi R11, R1, 384 */
		/* 821ABE68h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821ABE68h case   41:*/		return 0x821ABE6C;
		  /* 821ABE6Ch */ case   42:  		/* addi R6, R1, 336 */
		/* 821ABE6Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x150);
		/* 821ABE6Ch case   42:*/		return 0x821ABE70;
		  /* 821ABE70h */ case   43:  		/* addi R5, R1, 272 */
		/* 821ABE70h case   43:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 821ABE70h case   43:*/		return 0x821ABE74;
		  /* 821ABE74h */ case   44:  		/* li R10, 1 */
		/* 821ABE74h case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ABE74h case   44:*/		return 0x821ABE78;
		  /* 821ABE78h */ case   45:  		/* li R9, 0 */
		/* 821ABE78h case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821ABE78h case   45:*/		return 0x821ABE7C;
		  /* 821ABE7Ch */ case   46:  		/* mr R4, R30 */
		/* 821ABE7Ch case   46:*/		regs.R4 = regs.R30;
		/* 821ABE7Ch case   46:*/		return 0x821ABE80;
		  /* 821ABE80h */ case   47:  		/* add R7, R31, R11 */
		/* 821ABE80h case   47:*/		cpu::op::add<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 821ABE80h case   47:*/		return 0x821ABE84;
		  /* 821ABE84h */ case   48:  		/* add R6, R31, R6 */
		/* 821ABE84h case   48:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R6);
		/* 821ABE84h case   48:*/		return 0x821ABE88;
		  /* 821ABE88h */ case   49:  		/* add R5, R31, R5 */
		/* 821ABE88h case   49:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821ABE88h case   49:*/		return 0x821ABE8C;
		  /* 821ABE8Ch */ case   50:  		/* mr R3, R15 */
		/* 821ABE8Ch case   50:*/		regs.R3 = regs.R15;
		/* 821ABE8Ch case   50:*/		return 0x821ABE90;
		  /* 821ABE90h */ case   51:  		/* bc 12, CR0_EQ, 8 */
		/* 821ABE90h case   51:*/		if ( regs.CR[0].eq ) { return 0x821ABE98;  }
		/* 821ABE90h case   51:*/		return 0x821ABE94;
		  /* 821ABE94h */ case   52:  		/* mr R3, R16 */
		/* 821ABE94h case   52:*/		regs.R3 = regs.R16;
		/* 821ABE94h case   52:*/		return 0x821ABE98;
	}
	return 0x821ABE98;
} // Block from 821ABDC4h-821ABE98h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821ABE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABE98);
		  /* 821ABE98h */ case    0:  		/* bl 489016 */
		/* 821ABE98h case    0:*/		regs.LR = 0x821ABE9C; return 0x822234D0;
		/* 821ABE98h case    0:*/		return 0x821ABE9C;
		  /* 821ABE9Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 821ABE9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821ABE9Ch case    1:*/		return 0x821ABEA0;
		  /* 821ABEA0h */ case    2:  		/* addi R28, R28, 2 */
		/* 821ABEA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 821ABEA0h case    2:*/		return 0x821ABEA4;
		  /* 821ABEA4h */ case    3:  		/* addi R31, R31, 4 */
		/* 821ABEA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821ABEA4h case    3:*/		return 0x821ABEA8;
		  /* 821ABEA8h */ case    4:  		/* cmplw CR6, R30, R25 */
		/* 821ABEA8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 821ABEA8h case    4:*/		return 0x821ABEAC;
		  /* 821ABEACh */ case    5:  		/* bc 12, CR6_LT, -80 */
		/* 821ABEACh case    5:*/		if ( regs.CR[6].lt ) { return 0x821ABE5C;  }
		/* 821ABEACh case    5:*/		return 0x821ABEB0;
	}
	return 0x821ABEB0;
} // Block from 821ABE98h-821ABEB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821ABEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABEB0);
		  /* 821ABEB0h */ case    0:  		/* lwz R10, <#[R21]> */
		/* 821ABEB0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821ABEB0h case    0:*/		return 0x821ABEB4;
		  /* 821ABEB4h */ case    1:  		/* addi R9, R1, 384 */
		/* 821ABEB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x180);
		/* 821ABEB4h case    1:*/		return 0x821ABEB8;
		  /* 821ABEB8h */ case    2:  		/* lwz R7, <#[R29 + 8]> */
		/* 821ABEB8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821ABEB8h case    2:*/		return 0x821ABEBC;
		  /* 821ABEBCh */ case    3:  		/* addi R6, R1, 152 */
		/* 821ABEBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 821ABEBCh case    3:*/		return 0x821ABEC0;
		  /* 821ABEC0h */ case    4:  		/* addi R11, R1, 136 */
		/* 821ABEC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 821ABEC0h case    4:*/		return 0x821ABEC4;
		  /* 821ABEC4h */ case    5:  		/* stw R9, <#[R1 + 84]> */
		/* 821ABEC4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821ABEC4h case    5:*/		return 0x821ABEC8;
		  /* 821ABEC8h */ case    6:  		/* rlwinm R8, R10, 7, 29, 31 */
		/* 821ABEC8h case    6:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R8,regs.R10);
		/* 821ABEC8h case    6:*/		return 0x821ABECC;
		  /* 821ABECCh */ case    7:  		/* stw R6, <#[R1 + 100]> */
		/* 821ABECCh case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000064) );
		/* 821ABECCh case    7:*/		return 0x821ABED0;
		  /* 821ABED0h */ case    8:  		/* rlwinm R4, R7, 13, 29, 31 */
		/* 821ABED0h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R4,regs.R7);
		/* 821ABED0h case    8:*/		return 0x821ABED4;
		  /* 821ABED4h */ case    9:  		/* stw R27, <#[R1 + 152]> */
		/* 821ABED4h case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000098) );
		/* 821ABED4h case    9:*/		return 0x821ABED8;
		  /* 821ABED8h */ case   10:  		/* addi R10, R1, 336 */
		/* 821ABED8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x150);
		/* 821ABED8h case   10:*/		return 0x821ABEDC;
		  /* 821ABEDCh */ case   11:  		/* stw R11, <#[R1 + 92]> */
		/* 821ABEDCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821ABEDCh case   11:*/		return 0x821ABEE0;
		  /* 821ABEE0h */ case   12:  		/* addi R9, R1, 272 */
		/* 821ABEE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x110);
		/* 821ABEE0h case   12:*/		return 0x821ABEE4;
		  /* 821ABEE4h */ case   13:  		/* stw R27, <#[R1 + 136]> */
		/* 821ABEE4h case   13:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000088) );
		/* 821ABEE4h case   13:*/		return 0x821ABEE8;
		  /* 821ABEE8h */ case   14:  		/* addi R7, R1, 208 */
		/* 821ABEE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 821ABEE8h case   14:*/		return 0x821ABEEC;
		  /* 821ABEECh */ case   15:  		/* addi R6, R1, 480 */
		/* 821ABEECh case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1E0);
		/* 821ABEECh case   15:*/		return 0x821ABEF0;
		  /* 821ABEF0h */ case   16:  		/* addi R5, R1, 240 */
		/* 821ABEF0h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 821ABEF0h case   16:*/		return 0x821ABEF4;
		  /* 821ABEF4h */ case   17:  		/* mr R3, R17 */
		/* 821ABEF4h case   17:*/		regs.R3 = regs.R17;
		/* 821ABEF4h case   17:*/		return 0x821ABEF8;
		  /* 821ABEF8h */ case   18:  		/* bl -67264 */
		/* 821ABEF8h case   18:*/		regs.LR = 0x821ABEFC; return 0x8219B838;
		/* 821ABEF8h case   18:*/		return 0x821ABEFC;
		  /* 821ABEFCh */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ABEFCh case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ABEFCh case   19:*/		return 0x821ABF00;
		  /* 821ABF00h */ case   20:  		/* bc 12, CR0_EQ, 308 */
		/* 821ABF00h case   20:*/		if ( regs.CR[0].eq ) { return 0x821AC034;  }
		/* 821ABF00h case   20:*/		return 0x821ABF04;
		  /* 821ABF04h */ case   21:  		/* lwz R11, <#[R1 + 152]> */
		/* 821ABF04h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821ABF04h case   21:*/		return 0x821ABF08;
		  /* 821ABF08h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821ABF08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ABF08h case   22:*/		return 0x821ABF0C;
		  /* 821ABF0Ch */ case   23:  		/* bc 4, CR6_EQ, 296 */
		/* 821ABF0Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x821AC034;  }
		/* 821ABF0Ch case   23:*/		return 0x821ABF10;
		  /* 821ABF10h */ case   24:  		/* li R6, 0 */
		/* 821ABF10h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821ABF10h case   24:*/		return 0x821ABF14;
		  /* 821ABF14h */ case   25:  		/* mr R5, R18 */
		/* 821ABF14h case   25:*/		regs.R5 = regs.R18;
		/* 821ABF14h case   25:*/		return 0x821ABF18;
		  /* 821ABF18h */ case   26:  		/* mr R4, R29 */
		/* 821ABF18h case   26:*/		regs.R4 = regs.R29;
		/* 821ABF18h case   26:*/		return 0x821ABF1C;
		  /* 821ABF1Ch */ case   27:  		/* mr R3, R17 */
		/* 821ABF1Ch case   27:*/		regs.R3 = regs.R17;
		/* 821ABF1Ch case   27:*/		return 0x821ABF20;
		  /* 821ABF20h */ case   28:  		/* bl 531744 */
		/* 821ABF20h case   28:*/		regs.LR = 0x821ABF24; return 0x8222DC40;
		/* 821ABF20h case   28:*/		return 0x821ABF24;
		  /* 821ABF24h */ case   29:  		/* addi R30, R18, 4 */
		/* 821ABF24h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R18,0x4);
		/* 821ABF24h case   29:*/		return 0x821ABF28;
		  /* 821ABF28h */ case   30:  		/* lwz R31, <#[R30]> */
		/* 821ABF28h case   30:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821ABF28h case   30:*/		return 0x821ABF2C;
		  /* 821ABF2Ch */ case   31:  		/* cmplwi CR6, R31, 0 */
		/* 821ABF2Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ABF2Ch case   31:*/		return 0x821ABF30;
		  /* 821ABF30h */ case   32:  		/* bc 12, CR6_EQ, 120 */
		/* 821ABF30h case   32:*/		if ( regs.CR[6].eq ) { return 0x821ABFA8;  }
		/* 821ABF30h case   32:*/		return 0x821ABF34;
		  /* 821ABF34h */ case   33:  		/* lwz R11, <#[R31 + 16]> */
		/* 821ABF34h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821ABF34h case   33:*/		return 0x821ABF38;
		  /* 821ABF38h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 821ABF38h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ABF38h case   34:*/		return 0x821ABF3C;
		  /* 821ABF3Ch */ case   35:  		/* bc 12, CR6_EQ, 88 */
		/* 821ABF3Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x821ABF94;  }
		/* 821ABF3Ch case   35:*/		return 0x821ABF40;
		  /* 821ABF40h */ case   36:  		/* lwz R11, <#[R31 + 12]> */
		/* 821ABF40h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABF40h case   36:*/		return 0x821ABF44;
		  /* 821ABF44h */ case   37:  		/* addi R11, R11, 4 */
		/* 821ABF44h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821ABF44h case   37:*/		return 0x821ABF48;
		  /* 821ABF48h */ case   38:  		/* lwz R10, <#[R11]> */
		/* 821ABF48h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ABF48h case   38:*/		return 0x821ABF4C;
		  /* 821ABF4Ch */ case   39:  		/* b 28 */
		/* 821ABF4Ch case   39:*/		return 0x821ABF68;
		/* 821ABF4Ch case   39:*/		return 0x821ABF50;
	}
	return 0x821ABF50;
} // Block from 821ABEB0h-821ABF50h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821ABF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABF50);
		  /* 821ABF50h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821ABF50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821ABF50h case    0:*/		return 0x821ABF54;
		  /* 821ABF54h */ case    1:  		/* bc 4, CR6_EQ, 224 */
		/* 821ABF54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AC034;  }
		/* 821ABF54h case    1:*/		return 0x821ABF58;
		  /* 821ABF58h */ case    2:  		/* mr R29, R31 */
		/* 821ABF58h case    2:*/		regs.R29 = regs.R31;
		/* 821ABF58h case    2:*/		return 0x821ABF5C;
		  /* 821ABF5Ch */ case    3:  		/* b -328 */
		/* 821ABF5Ch case    3:*/		return 0x821ABE14;
		/* 821ABF5Ch case    3:*/		return 0x821ABF60;
		  /* 821ABF60h */ case    4:  		/* addi R11, R10, 8 */
		/* 821ABF60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821ABF60h case    4:*/		return 0x821ABF64;
		  /* 821ABF64h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ABF64h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ABF64h case    5:*/		return 0x821ABF68;
	}
	return 0x821ABF68;
} // Block from 821ABF50h-821ABF68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821ABF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABF68);
		  /* 821ABF68h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821ABF68h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821ABF68h case    0:*/		return 0x821ABF6C;
		  /* 821ABF6Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ABF6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ABF60;  }
		/* 821ABF6Ch case    1:*/		return 0x821ABF70;
		  /* 821ABF70h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821ABF70h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821ABF70h case    2:*/		return 0x821ABF74;
		  /* 821ABF74h */ case    3:  		/* mr R3, R31 */
		/* 821ABF74h case    3:*/		regs.R3 = regs.R31;
		/* 821ABF74h case    3:*/		return 0x821ABF78;
		  /* 821ABF78h */ case    4:  		/* lwz R4, <#[R1 + 136]> */
		/* 821ABF78h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821ABF78h case    4:*/		return 0x821ABF7C;
		  /* 821ABF7Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821ABF7Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ABF7Ch case    5:*/		return 0x821ABF80;
		  /* 821ABF80h */ case    6:  		/* lwz R11, <#[R29 + 4]> */
		/* 821ABF80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821ABF80h case    6:*/		return 0x821ABF84;
		  /* 821ABF84h */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821ABF84h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ABF84h case    7:*/		return 0x821ABF88;
		  /* 821ABF88h */ case    8:  		/* stw R31, <#[R29 + 4]> */
		/* 821ABF88h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821ABF88h case    8:*/		return 0x821ABF8C;
		  /* 821ABF8Ch */ case    9:  		/* stw R29, <#[R31 + 12]> */
		/* 821ABF8Ch case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821ABF8Ch case    9:*/		return 0x821ABF90;
		  /* 821ABF90h */ case   10:  		/* bl -242216 */
		/* 821ABF90h case   10:*/		regs.LR = 0x821ABF94; return 0x82170D68;
		/* 821ABF90h case   10:*/		return 0x821ABF94;
	}
	return 0x821ABF94;
} // Block from 821ABF68h-821ABF94h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821ABF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABF94);
		  /* 821ABF94h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821ABF94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821ABF94h case    0:*/		return 0x821ABF98;
		  /* 821ABF98h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821ABF98h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821ABF98h case    1:*/		return 0x821ABF9C;
		  /* 821ABF9Ch */ case    2:  		/* bc 4, CR6_EQ, -116 */
		/* 821ABF9Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821ABF28;  }
		/* 821ABF9Ch case    2:*/		return 0x821ABFA0;
		  /* 821ABFA0h */ case    3:  		/* addi R30, R31, 8 */
		/* 821ABFA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821ABFA0h case    3:*/		return 0x821ABFA4;
		  /* 821ABFA4h */ case    4:  		/* b -124 */
		/* 821ABFA4h case    4:*/		return 0x821ABF28;
		/* 821ABFA4h case    4:*/		return 0x821ABFA8;
	}
	return 0x821ABFA8;
} // Block from 821ABF94h-821ABFA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821ABFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABFA8);
		  /* 821ABFA8h */ case    0:  		/* li R6, 1 */
		/* 821ABFA8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ABFA8h case    0:*/		return 0x821ABFAC;
		  /* 821ABFACh */ case    1:  		/* lwz R5, <#[R17 + 652]> */
		/* 821ABFACh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R17 + 0x0000028C) );
		/* 821ABFACh case    1:*/		return 0x821ABFB0;
		  /* 821ABFB0h */ case    2:  		/* mr R4, R18 */
		/* 821ABFB0h case    2:*/		regs.R4 = regs.R18;
		/* 821ABFB0h case    2:*/		return 0x821ABFB4;
		  /* 821ABFB4h */ case    3:  		/* mr R3, R17 */
		/* 821ABFB4h case    3:*/		regs.R3 = regs.R17;
		/* 821ABFB4h case    3:*/		return 0x821ABFB8;
		  /* 821ABFB8h */ case    4:  		/* bl 521232 */
		/* 821ABFB8h case    4:*/		regs.LR = 0x821ABFBC; return 0x8222B3C8;
		/* 821ABFB8h case    4:*/		return 0x821ABFBC;
	}
	return 0x821ABFBC;
} // Block from 821ABFA8h-821ABFBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821ABFBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABFBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABFBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABFBC);
		  /* 821ABFBCh */ case    0:  		/* mr R3, R29 */
		/* 821ABFBCh case    0:*/		regs.R3 = regs.R29;
		/* 821ABFBCh case    0:*/		return 0x821ABFC0;
		  /* 821ABFC0h */ case    1:  		/* b -5592 */
		/* 821ABFC0h case    1:*/		return 0x821AA9E8;
		/* 821ABFC0h case    1:*/		return 0x821ABFC4;
	}
	return 0x821ABFC4;
} // Block from 821ABFBCh-821ABFC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ABFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABFC4);
		  /* 821ABFC4h */ case    0:  		/* mr R31, R16 */
		/* 821ABFC4h case    0:*/		regs.R31 = regs.R16;
		/* 821ABFC4h case    0:*/		return 0x821ABFC8;
		  /* 821ABFC8h */ case    1:  		/* b 8 */
		/* 821ABFC8h case    1:*/		return 0x821ABFD0;
		/* 821ABFC8h case    1:*/		return 0x821ABFCC;
	}
	return 0x821ABFCC;
} // Block from 821ABFC4h-821ABFCCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ABFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABFCC);
		  /* 821ABFCCh */ case    0:  		/* mr R31, R15 */
		/* 821ABFCCh case    0:*/		regs.R31 = regs.R15;
		/* 821ABFCCh case    0:*/		return 0x821ABFD0;
	}
	return 0x821ABFD0;
} // Block from 821ABFCCh-821ABFD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ABFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ABFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ABFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ABFD0);
		  /* 821ABFD0h */ case    0:  		/* mr R7, R31 */
		/* 821ABFD0h case    0:*/		regs.R7 = regs.R31;
		/* 821ABFD0h case    0:*/		return 0x821ABFD4;
		  /* 821ABFD4h */ case    1:  		/* mr R6, R31 */
		/* 821ABFD4h case    1:*/		regs.R6 = regs.R31;
		/* 821ABFD4h case    1:*/		return 0x821ABFD8;
		  /* 821ABFD8h */ case    2:  		/* mr R5, R18 */
		/* 821ABFD8h case    2:*/		regs.R5 = regs.R18;
		/* 821ABFD8h case    2:*/		return 0x821ABFDC;
		  /* 821ABFDCh */ case    3:  		/* li R4, 0 */
		/* 821ABFDCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821ABFDCh case    3:*/		return 0x821ABFE0;
		  /* 821ABFE0h */ case    4:  		/* mr R3, R17 */
		/* 821ABFE0h case    4:*/		regs.R3 = regs.R17;
		/* 821ABFE0h case    4:*/		return 0x821ABFE4;
		  /* 821ABFE4h */ case    5:  		/* bl -57644 */
		/* 821ABFE4h case    5:*/		regs.LR = 0x821ABFE8; return 0x8219DEB8;
		/* 821ABFE4h case    5:*/		return 0x821ABFE8;
		  /* 821ABFE8h */ case    6:  		/* lwz R11, <#[R18 + 8]> */
		/* 821ABFE8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821ABFE8h case    6:*/		return 0x821ABFEC;
		  /* 821ABFECh */ case    7:  		/* mr R30, R3 */
		/* 821ABFECh case    7:*/		regs.R30 = regs.R3;
		/* 821ABFECh case    7:*/		return 0x821ABFF0;
		  /* 821ABFF0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821ABFF0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821ABFF0h case    8:*/		return 0x821ABFF4;
		  /* 821ABFF4h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821ABFF4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AC004;  }
		/* 821ABFF4h case    9:*/		return 0x821ABFF8;
		  /* 821ABFF8h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821ABFF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821ABFF8h case   10:*/		return 0x821ABFFC;
		  /* 821ABFFCh */ case   11:  		/* ori R11, R11, 1 */
		/* 821ABFFCh case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821ABFFCh case   11:*/		return 0x821AC000;
		  /* 821AC000h */ case   12:  		/* stw R11, <#[R3 + 8]> */
		/* 821AC000h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AC000h case   12:*/		return 0x821AC004;
	}
	return 0x821AC004;
} // Block from 821ABFD0h-821AC004h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AC004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC004);
		  /* 821AC004h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821AC004h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AC004h case    0:*/		return 0x821AC008;
		  /* 821AC008h */ case    1:  		/* li R8, 1 */
		/* 821AC008h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AC008h case    1:*/		return 0x821AC00C;
		  /* 821AC00Ch */ case    2:  		/* li R6, 228 */
		/* 821AC00Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821AC00Ch case    2:*/		return 0x821AC010;
		  /* 821AC010h */ case    3:  		/* rlwinm R7, R11, 29, 31, 31 */
		/* 821AC010h case    3:*/		cpu::op::rlwinm<0,29,31,31>(regs,&regs.R7,regs.R11);
		/* 821AC010h case    3:*/		return 0x821AC014;
		  /* 821AC014h */ case    4:  		/* mr R5, R30 */
		/* 821AC014h case    4:*/		regs.R5 = regs.R30;
		/* 821AC014h case    4:*/		return 0x821AC018;
		  /* 821AC018h */ case    5:  		/* mr R4, R18 */
		/* 821AC018h case    5:*/		regs.R4 = regs.R18;
		/* 821AC018h case    5:*/		return 0x821AC01C;
		  /* 821AC01Ch */ case    6:  		/* mr R3, R17 */
		/* 821AC01Ch case    6:*/		regs.R3 = regs.R17;
		/* 821AC01Ch case    6:*/		return 0x821AC020;
		  /* 821AC020h */ case    7:  		/* bl -29632 */
		/* 821AC020h case    7:*/		regs.LR = 0x821AC024; return 0x821A4C60;
		/* 821AC020h case    7:*/		return 0x821AC024;
		  /* 821AC024h */ case    8:  		/* b 12444 */
		/* 821AC024h case    8:*/		return 0x821AF0C0;
		/* 821AC024h case    8:*/		return 0x821AC028;
	}
	return 0x821AC028;
} // Block from 821AC004h-821AC028h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AC028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC028);
		  /* 821AC028h */ case    0:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AC028h case    0:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AC028h case    0:*/		return 0x821AC02C;
		  /* 821AC02Ch */ case    1:  		/* lwz R17, <#[R1 + 1236]> */
		/* 821AC02Ch case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AC02Ch case    1:*/		return 0x821AC030;
		  /* 821AC030h */ case    2:  		/* b 8 */
		/* 821AC030h case    2:*/		return 0x821AC038;
		/* 821AC030h case    2:*/		return 0x821AC034;
	}
	return 0x821AC034;
} // Block from 821AC028h-821AC034h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AC034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC034);
		  /* 821AC034h */ case    0:  		/* lwz R28, <#[R1 + 112]> */
		/* 821AC034h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 821AC034h case    0:*/		return 0x821AC038;
	}
	return 0x821AC038;
} // Block from 821AC034h-821AC038h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC038);
		  /* 821AC038h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821AC038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AC038h case    0:*/		return 0x821AC03C;
		  /* 821AC03Ch */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AC03Ch case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AC03Ch case    1:*/		return 0x821AC040;
		  /* 821AC040h */ case    2:  		/* cmplwi CR6, R11, 6 */
		/* 821AC040h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821AC040h case    2:*/		return 0x821AC044;
		  /* 821AC044h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821AC044h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AC050;  }
		/* 821AC044h case    3:*/		return 0x821AC048;
		  /* 821AC048h */ case    4:  		/* cmplwi CR6, R11, 7 */
		/* 821AC048h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821AC048h case    4:*/		return 0x821AC04C;
		  /* 821AC04Ch */ case    5:  		/* bc 4, CR6_EQ, 196 */
		/* 821AC04Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AC110;  }
		/* 821AC04Ch case    5:*/		return 0x821AC050;
	}
	return 0x821AC050;
} // Block from 821AC038h-821AC050h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AC050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC050);
		  /* 821AC050h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821AC050h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AC050h case    0:*/		return 0x821AC054;
		  /* 821AC054h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AC054h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AC054h case    1:*/		return 0x821AC058;
		  /* 821AC058h */ case    2:  		/* bc 4, CR0_EQ, 184 */
		/* 821AC058h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AC110;  }
		/* 821AC058h case    2:*/		return 0x821AC05C;
		  /* 821AC05Ch */ case    3:  		/* lwz R31, <#[R23 + 48]> */
		/* 821AC05Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000030) );
		/* 821AC05Ch case    3:*/		return 0x821AC060;
		  /* 821AC060h */ case    4:  		/* mr R4, R15 */
		/* 821AC060h case    4:*/		regs.R4 = regs.R15;
		/* 821AC060h case    4:*/		return 0x821AC064;
		  /* 821AC064h */ case    5:  		/* lwz R30, <#[R23 + 44]> */
		/* 821AC064h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AC064h case    5:*/		return 0x821AC068;
		  /* 821AC068h */ case    6:  		/* mr R3, R31 */
		/* 821AC068h case    6:*/		regs.R3 = regs.R31;
		/* 821AC068h case    6:*/		return 0x821AC06C;
		  /* 821AC06Ch */ case    7:  		/* bl 483444 */
		/* 821AC06Ch case    7:*/		regs.LR = 0x821AC070; return 0x822220E0;
		/* 821AC06Ch case    7:*/		return 0x821AC070;
		  /* 821AC070h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC070h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC070h case    8:*/		return 0x821AC074;
		  /* 821AC074h */ case    9:  		/* bc 12, CR0_EQ, 88 */
		/* 821AC074h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AC0CC;  }
		/* 821AC074h case    9:*/		return 0x821AC078;
		  /* 821AC078h */ case   10:  		/* mr R4, R16 */
		/* 821AC078h case   10:*/		regs.R4 = regs.R16;
		/* 821AC078h case   10:*/		return 0x821AC07C;
		  /* 821AC07Ch */ case   11:  		/* mr R3, R30 */
		/* 821AC07Ch case   11:*/		regs.R3 = regs.R30;
		/* 821AC07Ch case   11:*/		return 0x821AC080;
		  /* 821AC080h */ case   12:  		/* bl 483424 */
		/* 821AC080h case   12:*/		regs.LR = 0x821AC084; return 0x822220E0;
		/* 821AC080h case   12:*/		return 0x821AC084;
		  /* 821AC084h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC084h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC084h case   13:*/		return 0x821AC088;
		  /* 821AC088h */ case   14:  		/* bc 12, CR0_EQ, 68 */
		/* 821AC088h case   14:*/		if ( regs.CR[0].eq ) { return 0x821AC0CC;  }
		/* 821AC088h case   14:*/		return 0x821AC08C;
		  /* 821AC08Ch */ case   15:  		/* mr R7, R31 */
		/* 821AC08Ch case   15:*/		regs.R7 = regs.R31;
		/* 821AC08Ch case   15:*/		return 0x821AC090;
		  /* 821AC090h */ case   16:  		/* mr R6, R30 */
		/* 821AC090h case   16:*/		regs.R6 = regs.R30;
		/* 821AC090h case   16:*/		return 0x821AC094;
		  /* 821AC094h */ case   17:  		/* mr R5, R18 */
		/* 821AC094h case   17:*/		regs.R5 = regs.R18;
		/* 821AC094h case   17:*/		return 0x821AC098;
		  /* 821AC098h */ case   18:  		/* li R4, 0 */
		/* 821AC098h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AC098h case   18:*/		return 0x821AC09C;
		  /* 821AC09Ch */ case   19:  		/* mr R3, R17 */
		/* 821AC09Ch case   19:*/		regs.R3 = regs.R17;
		/* 821AC09Ch case   19:*/		return 0x821AC0A0;
		  /* 821AC0A0h */ case   20:  		/* bl -57832 */
		/* 821AC0A0h case   20:*/		regs.LR = 0x821AC0A4; return 0x8219DEB8;
		/* 821AC0A0h case   20:*/		return 0x821AC0A4;
		  /* 821AC0A4h */ case   21:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AC0A4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AC0A4h case   21:*/		return 0x821AC0A8;
		  /* 821AC0A8h */ case   22:  		/* mr R31, R3 */
		/* 821AC0A8h case   22:*/		regs.R31 = regs.R3;
		/* 821AC0A8h case   22:*/		return 0x821AC0AC;
		  /* 821AC0ACh */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AC0ACh case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AC0ACh case   23:*/		return 0x821AC0B0;
		  /* 821AC0B0h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 821AC0B0h case   24:*/		if ( regs.CR[0].eq ) { return 0x821AC0C0;  }
		/* 821AC0B0h case   24:*/		return 0x821AC0B4;
		  /* 821AC0B4h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AC0B4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AC0B4h case   25:*/		return 0x821AC0B8;
		  /* 821AC0B8h */ case   26:  		/* ori R11, R11, 1 */
		/* 821AC0B8h case   26:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AC0B8h case   26:*/		return 0x821AC0BC;
		  /* 821AC0BCh */ case   27:  		/* stw R11, <#[R3 + 8]> */
		/* 821AC0BCh case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AC0BCh case   27:*/		return 0x821AC0C0;
	}
	return 0x821AC0C0;
} // Block from 821AC050h-821AC0C0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821AC0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC0C0);
		  /* 821AC0C0h */ case    0:  		/* mr R4, R18 */
		/* 821AC0C0h case    0:*/		regs.R4 = regs.R18;
		/* 821AC0C0h case    0:*/		return 0x821AC0C4;
		  /* 821AC0C4h */ case    1:  		/* mr R3, R17 */
		/* 821AC0C4h case    1:*/		regs.R3 = regs.R17;
		/* 821AC0C4h case    1:*/		return 0x821AC0C8;
		  /* 821AC0C8h */ case    2:  		/* b 4080 */
		/* 821AC0C8h case    2:*/		return 0x821AD0B8;
		/* 821AC0C8h case    2:*/		return 0x821AC0CC;
	}
	return 0x821AC0CC;
} // Block from 821AC0C0h-821AC0CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AC0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC0CC);
		  /* 821AC0CCh */ case    0:  		/* mr R4, R15 */
		/* 821AC0CCh case    0:*/		regs.R4 = regs.R15;
		/* 821AC0CCh case    0:*/		return 0x821AC0D0;
		  /* 821AC0D0h */ case    1:  		/* mr R3, R30 */
		/* 821AC0D0h case    1:*/		regs.R3 = regs.R30;
		/* 821AC0D0h case    1:*/		return 0x821AC0D4;
		  /* 821AC0D4h */ case    2:  		/* bl 483340 */
		/* 821AC0D4h case    2:*/		regs.LR = 0x821AC0D8; return 0x822220E0;
		/* 821AC0D4h case    2:*/		return 0x821AC0D8;
		  /* 821AC0D8h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC0D8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC0D8h case    3:*/		return 0x821AC0DC;
		  /* 821AC0DCh */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 821AC0DCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821AC110;  }
		/* 821AC0DCh case    4:*/		return 0x821AC0E0;
		  /* 821AC0E0h */ case    5:  		/* mr R4, R16 */
		/* 821AC0E0h case    5:*/		regs.R4 = regs.R16;
		/* 821AC0E0h case    5:*/		return 0x821AC0E4;
		  /* 821AC0E4h */ case    6:  		/* mr R3, R31 */
		/* 821AC0E4h case    6:*/		regs.R3 = regs.R31;
		/* 821AC0E4h case    6:*/		return 0x821AC0E8;
		  /* 821AC0E8h */ case    7:  		/* bl 483320 */
		/* 821AC0E8h case    7:*/		regs.LR = 0x821AC0EC; return 0x822220E0;
		/* 821AC0E8h case    7:*/		return 0x821AC0EC;
		  /* 821AC0ECh */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC0ECh case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC0ECh case    8:*/		return 0x821AC0F0;
		  /* 821AC0F0h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821AC0F0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AC110;  }
		/* 821AC0F0h case    9:*/		return 0x821AC0F4;
		  /* 821AC0F4h */ case   10:  		/* mr R7, R31 */
		/* 821AC0F4h case   10:*/		regs.R7 = regs.R31;
		/* 821AC0F4h case   10:*/		return 0x821AC0F8;
		  /* 821AC0F8h */ case   11:  		/* mr R6, R30 */
		/* 821AC0F8h case   11:*/		regs.R6 = regs.R30;
		/* 821AC0F8h case   11:*/		return 0x821AC0FC;
		  /* 821AC0FCh */ case   12:  		/* mr R5, R18 */
		/* 821AC0FCh case   12:*/		regs.R5 = regs.R18;
		/* 821AC0FCh case   12:*/		return 0x821AC100;
		  /* 821AC100h */ case   13:  		/* li R4, 0 */
		/* 821AC100h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AC100h case   13:*/		return 0x821AC104;
		  /* 821AC104h */ case   14:  		/* mr R3, R17 */
		/* 821AC104h case   14:*/		regs.R3 = regs.R17;
		/* 821AC104h case   14:*/		return 0x821AC108;
		  /* 821AC108h */ case   15:  		/* bl -57728 */
		/* 821AC108h case   15:*/		regs.LR = 0x821AC10C; return 0x8219DF88;
		/* 821AC108h case   15:*/		return 0x821AC10C;
		  /* 821AC10Ch */ case   16:  		/* b -104 */
		/* 821AC10Ch case   16:*/		return 0x821AC0A4;
		/* 821AC10Ch case   16:*/		return 0x821AC110;
	}
	return 0x821AC110;
} // Block from 821AC0CCh-821AC110h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AC110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC110);
		  /* 821AC110h */ case    0:  		/* lis R11, -32256 */
		/* 821AC110h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821AC110h case    0:*/		return 0x821AC114;
		  /* 821AC114h */ case    1:  		/* li R22, 0 */
		/* 821AC114h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821AC114h case    1:*/		return 0x821AC118;
		  /* 821AC118h */ case    2:  		/* lfd FR29, <#[R11 + 1848]> */
		/* 821AC118h case    2:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000738) );
		/* 821AC118h case    2:*/		return 0x821AC11C;
		  /* 821AC11Ch */ case    3:  		/* lwz R11, <#[R14 + 8]> */
		/* 821AC11Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 821AC11Ch case    3:*/		return 0x821AC120;
		  /* 821AC120h */ case    4:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821AC120h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821AC120h case    4:*/		return 0x821AC124;
		  /* 821AC124h */ case    5:  		/* cmplwi CR6, R10, 1664 */
		/* 821AC124h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000680);
		/* 821AC124h case    5:*/		return 0x821AC128;
		  /* 821AC128h */ case    6:  		/* bc 4, CR6_EQ, 944 */
		/* 821AC128h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC128h case    6:*/		return 0x821AC12C;
		  /* 821AC12Ch */ case    7:  		/* lwz R10, <#[R1 + 112]> */
		/* 821AC12Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821AC12Ch case    7:*/		return 0x821AC130;
		  /* 821AC130h */ case    8:  		/* lwz R10, <#[R10]> */
		/* 821AC130h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821AC130h case    8:*/		return 0x821AC134;
		  /* 821AC134h */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AC134h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AC134h case    9:*/		return 0x821AC138;
		  /* 821AC138h */ case   10:  		/* cmplwi CR6, R10, 16000 */
		/* 821AC138h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821AC138h case   10:*/		return 0x821AC13C;
		  /* 821AC13Ch */ case   11:  		/* bc 4, CR6_EQ, 924 */
		/* 821AC13Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC13Ch case   11:*/		return 0x821AC140;
		  /* 821AC140h */ case   12:  		/* lwz R10, <#[R15]> */
		/* 821AC140h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000000) );
		/* 821AC140h case   12:*/		return 0x821AC144;
		  /* 821AC144h */ case   13:  		/* rlwinm. R10, R10, 0, 27, 31 */
		/* 821AC144h case   13:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821AC144h case   13:*/		return 0x821AC148;
		  /* 821AC148h */ case   14:  		/* bc 4, CR0_EQ, 912 */
		/* 821AC148h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821AC4D8;  }
		/* 821AC148h case   14:*/		return 0x821AC14C;
		  /* 821AC14Ch */ case   15:  		/* lwz R10, <#[R16]> */
		/* 821AC14Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821AC14Ch case   15:*/		return 0x821AC150;
		  /* 821AC150h */ case   16:  		/* rlwinm. R10, R10, 0, 27, 28 */
		/* 821AC150h case   16:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R10);
		/* 821AC150h case   16:*/		return 0x821AC154;
		  /* 821AC154h */ case   17:  		/* bc 4, CR0_EQ, 900 */
		/* 821AC154h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821AC4D8;  }
		/* 821AC154h case   17:*/		return 0x821AC158;
		  /* 821AC158h */ case   18:  		/* lwz R30, <#[R14 + 44]> */
		/* 821AC158h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R14 + 0x0000002C) );
		/* 821AC158h case   18:*/		return 0x821AC15C;
		  /* 821AC15Ch */ case   19:  		/* lwz R10, <#[R30 + 12]> */
		/* 821AC15Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821AC15Ch case   19:*/		return 0x821AC160;
		  /* 821AC160h */ case   20:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AC160h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AC160h case   20:*/		return 0x821AC164;
		  /* 821AC164h */ case   21:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AC164h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AC164h case   21:*/		return 0x821AC168;
		  /* 821AC168h */ case   22:  		/* cmplwi CR6, R10, 16000 */
		/* 821AC168h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821AC168h case   22:*/		return 0x821AC16C;
		  /* 821AC16Ch */ case   23:  		/* bc 4, CR6_EQ, 876 */
		/* 821AC16Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC16Ch case   23:*/		return 0x821AC170;
		  /* 821AC170h */ case   24:  		/* lwz R10, <#[R30]> */
		/* 821AC170h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC170h case   24:*/		return 0x821AC174;
		  /* 821AC174h */ case   25:  		/* rlwinm R31, R11, 18, 29, 31 */
		/* 821AC174h case   25:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R31,regs.R11);
		/* 821AC174h case   25:*/		return 0x821AC178;
		  /* 821AC178h */ case   26:  		/* rlwinm R11, R10, 7, 29, 31 */
		/* 821AC178h case   26:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R10);
		/* 821AC178h case   26:*/		return 0x821AC17C;
		  /* 821AC17Ch */ case   27:  		/* cmplw CR6, R31, R11 */
		/* 821AC17Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821AC17Ch case   27:*/		return 0x821AC180;
		  /* 821AC180h */ case   28:  		/* bc 4, CR6_EQ, 856 */
		/* 821AC180h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC180h case   28:*/		return 0x821AC184;
		  /* 821AC184h */ case   29:  		/* mr R3, R15 */
		/* 821AC184h case   29:*/		regs.R3 = regs.R15;
		/* 821AC184h case   29:*/		return 0x821AC188;
		  /* 821AC188h */ case   30:  		/* bl -294728 */
		/* 821AC188h case   30:*/		regs.LR = 0x821AC18C; return 0x82164240;
		/* 821AC188h case   30:*/		return 0x821AC18C;
		  /* 821AC18Ch */ case   31:  		/* lis R11, -28311 */
		/* 821AC18Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821AC18Ch case   31:*/		return 0x821AC190;
		  /* 821AC190h */ case   32:  		/* lis R10, 0 */
		/* 821AC190h case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821AC190h case   32:*/		return 0x821AC194;
		  /* 821AC194h */ case   33:  		/* ori R11, R11, 5192 */
		/* 821AC194h case   33:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821AC194h case   33:*/		return 0x821AC198;
		  /* 821AC198h */ case   34:  		/* ori R10, R10, 36262 */
		/* 821AC198h case   34:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821AC198h case   34:*/		return 0x821AC19C;
		  /* 821AC19Ch */ case   35:  		/* rldicl R9, R3, 0, 32 */
		/* 821AC19Ch case   35:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R3);
		/* 821AC19Ch case   35:*/		return 0x821AC1A0;
		  /* 821AC1A0h */ case   36:  		/* rldimi R11, R10, 32, 0 */
		/* 821AC1A0h case   36:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821AC1A0h case   36:*/		return 0x821AC1A4;
		  /* 821AC1A4h */ case   37:  		/* srd R11, R11, R9 */
		/* 821AC1A4h case   37:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AC1A4h case   37:*/		return 0x821AC1A8;
		  /* 821AC1A8h */ case   38:  		/* srd R11, R11, R9 */
		/* 821AC1A8h case   38:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AC1A8h case   38:*/		return 0x821AC1AC;
		  /* 821AC1ACh */ case   39:  		/* srd R11, R11, R9 */
		/* 821AC1ACh case   39:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AC1ACh case   39:*/		return 0x821AC1B0;
		  /* 821AC1B0h */ case   40:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821AC1B0h case   40:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821AC1B0h case   40:*/		return 0x821AC1B4;
		  /* 821AC1B4h */ case   41:  		/* cmplw CR6, R31, R11 */
		/* 821AC1B4h case   41:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821AC1B4h case   41:*/		return 0x821AC1B8;
		  /* 821AC1B8h */ case   42:  		/* bc 4, CR6_EQ, 800 */
		/* 821AC1B8h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC1B8h case   42:*/		return 0x821AC1BC;
		  /* 821AC1BCh */ case   43:  		/* li R7, 1 */
		/* 821AC1BCh case   43:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AC1BCh case   43:*/		return 0x821AC1C0;
		  /* 821AC1C0h */ case   44:  		/* li R6, 1 */
		/* 821AC1C0h case   44:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AC1C0h case   44:*/		return 0x821AC1C4;
		  /* 821AC1C4h */ case   45:  		/* mr R5, R18 */
		/* 821AC1C4h case   45:*/		regs.R5 = regs.R18;
		/* 821AC1C4h case   45:*/		return 0x821AC1C8;
		  /* 821AC1C8h */ case   46:  		/* mr R4, R14 */
		/* 821AC1C8h case   46:*/		regs.R4 = regs.R14;
		/* 821AC1C8h case   46:*/		return 0x821AC1CC;
		  /* 821AC1CCh */ case   47:  		/* mr R3, R17 */
		/* 821AC1CCh case   47:*/		regs.R3 = regs.R17;
		/* 821AC1CCh case   47:*/		return 0x821AC1D0;
		  /* 821AC1D0h */ case   48:  		/* bl 530592 */
		/* 821AC1D0h case   48:*/		regs.LR = 0x821AC1D4; return 0x8222DA70;
		/* 821AC1D0h case   48:*/		return 0x821AC1D4;
		  /* 821AC1D4h */ case   49:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC1D4h case   49:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC1D4h case   49:*/		return 0x821AC1D8;
		  /* 821AC1D8h */ case   50:  		/* bc 12, CR0_EQ, 768 */
		/* 821AC1D8h case   50:*/		if ( regs.CR[0].eq ) { return 0x821AC4D8;  }
		/* 821AC1D8h case   50:*/		return 0x821AC1DC;
		  /* 821AC1DCh */ case   51:  		/* addi R4, R1, 384 */
		/* 821AC1DCh case   51:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x180);
		/* 821AC1DCh case   51:*/		return 0x821AC1E0;
		  /* 821AC1E0h */ case   52:  		/* mr R3, R21 */
		/* 821AC1E0h case   52:*/		regs.R3 = regs.R21;
		/* 821AC1E0h case   52:*/		return 0x821AC1E4;
		  /* 821AC1E4h */ case   53:  		/* bl -53852 */
		/* 821AC1E4h case   53:*/		regs.LR = 0x821AC1E8; return 0x8219EF88;
		/* 821AC1E4h case   53:*/		return 0x821AC1E8;
		  /* 821AC1E8h */ case   54:  		/* rlwinm. R29, R22, 0, 24, 31 */
		/* 821AC1E8h case   54:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R29,regs.R22);
		/* 821AC1E8h case   54:*/		return 0x821AC1EC;
		  /* 821AC1ECh */ case   55:  		/* bc 12, CR0_EQ, 72 */
		/* 821AC1ECh case   55:*/		if ( regs.CR[0].eq ) { return 0x821AC234;  }
		/* 821AC1ECh case   55:*/		return 0x821AC1F0;
		  /* 821AC1F0h */ case   56:  		/* lwz R11, <#[R21]> */
		/* 821AC1F0h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AC1F0h case   56:*/		return 0x821AC1F4;
		  /* 821AC1F4h */ case   57:  		/* li R10, 0 */
		/* 821AC1F4h case   57:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AC1F4h case   57:*/		return 0x821AC1F8;
		  /* 821AC1F8h */ case   58:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AC1F8h case   58:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AC1F8h case   58:*/		return 0x821AC1FC;
		  /* 821AC1FCh */ case   59:  		/* bc 12, CR0_EQ, 56 */
		/* 821AC1FCh case   59:*/		if ( regs.CR[0].eq ) { return 0x821AC234;  }
		/* 821AC1FCh case   59:*/		return 0x821AC200;
		  /* 821AC200h */ case   60:  		/* lwz R9, <#[R21]> */
		/* 821AC200h case   60:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000000) );
		/* 821AC200h case   60:*/		return 0x821AC204;
		  /* 821AC204h */ case   61:  		/* addi R11, R1, 384 */
		/* 821AC204h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821AC204h case   61:*/		return 0x821AC208;
		  /* 821AC208h */ case   62:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821AC208h case   62:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821AC208h case   62:*/		return 0x821AC20C;
		  /* 821AC20Ch */ case   63:  		/* lfd FR0, <#[R11]> */
		/* 821AC20Ch case   63:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC20Ch case   63:*/		return 0x821AC210;
		  /* 821AC210h */ case   64:  		/* fcmpu CR6, FR0, FR31 */
		/* 821AC210h case   64:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821AC210h case   64:*/		return 0x821AC214;
		  /* 821AC214h */ case   65:  		/* bc 4, CR6_EQ, 12 */
		/* 821AC214h case   65:*/		if ( !regs.CR[6].eq ) { return 0x821AC220;  }
		/* 821AC214h case   65:*/		return 0x821AC218;
		  /* 821AC218h */ case   66:  		/* stfd FR29, <#[R11]> */
		/* 821AC218h case   66:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC218h case   66:*/		return 0x821AC21C;
		  /* 821AC21Ch */ case   67:  		/* b 8 */
		/* 821AC21Ch case   67:*/		return 0x821AC224;
		/* 821AC21Ch case   67:*/		return 0x821AC220;
	}
	return 0x821AC220;
} // Block from 821AC110h-821AC220h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821AC220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC220);
		  /* 821AC220h */ case    0:  		/* stfd FR31, <#[R11]> */
		/* 821AC220h case    0:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC220h case    0:*/		return 0x821AC224;
	}
	return 0x821AC224;
} // Block from 821AC220h-821AC224h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC224);
		  /* 821AC224h */ case    0:  		/* addi R10, R10, 1 */
		/* 821AC224h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AC224h case    0:*/		return 0x821AC228;
		  /* 821AC228h */ case    1:  		/* addi R11, R11, 8 */
		/* 821AC228h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821AC228h case    1:*/		return 0x821AC22C;
		  /* 821AC22Ch */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 821AC22Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821AC22Ch case    2:*/		return 0x821AC230;
		  /* 821AC230h */ case    3:  		/* bc 12, CR6_LT, -36 */
		/* 821AC230h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AC20C;  }
		/* 821AC230h case    3:*/		return 0x821AC234;
	}
	return 0x821AC234;
} // Block from 821AC224h-821AC234h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC234);
		  /* 821AC234h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821AC234h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AC234h case    0:*/		return 0x821AC238;
		  /* 821AC238h */ case    1:  		/* li R19, 0 */
		/* 821AC238h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821AC238h case    1:*/		return 0x821AC23C;
		  /* 821AC23Ch */ case    2:  		/* li R10, 0 */
		/* 821AC23Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AC23Ch case    2:*/		return 0x821AC240;
		  /* 821AC240h */ case    3:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AC240h case    3:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AC240h case    3:*/		return 0x821AC244;
		  /* 821AC244h */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 821AC244h case    4:*/		if ( regs.CR[0].eq ) { return 0x821AC274;  }
		/* 821AC244h case    4:*/		return 0x821AC248;
		  /* 821AC248h */ case    5:  		/* lwz R9, <#[R21]> */
		/* 821AC248h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000000) );
		/* 821AC248h case    5:*/		return 0x821AC24C;
		  /* 821AC24Ch */ case    6:  		/* addi R11, R1, 384 */
		/* 821AC24Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821AC24Ch case    6:*/		return 0x821AC250;
		  /* 821AC250h */ case    7:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821AC250h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821AC250h case    7:*/		return 0x821AC254;
		  /* 821AC254h */ case    8:  		/* lfd FR0, <#[R11]> */
		/* 821AC254h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC254h case    8:*/		return 0x821AC258;
		  /* 821AC258h */ case    9:  		/* fcmpu CR6, FR0, FR31 */
		/* 821AC258h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821AC258h case    9:*/		return 0x821AC25C;
		  /* 821AC25Ch */ case   10:  		/* bc 12, CR6_EQ, 8 */
		/* 821AC25Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821AC264;  }
		/* 821AC25Ch case   10:*/		return 0x821AC260;
		  /* 821AC260h */ case   11:  		/* addi R19, R19, 1 */
		/* 821AC260h case   11:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 821AC260h case   11:*/		return 0x821AC264;
	}
	return 0x821AC264;
} // Block from 821AC234h-821AC264h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AC264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC264);
		  /* 821AC264h */ case    0:  		/* addi R10, R10, 1 */
		/* 821AC264h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AC264h case    0:*/		return 0x821AC268;
		  /* 821AC268h */ case    1:  		/* addi R11, R11, 8 */
		/* 821AC268h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821AC268h case    1:*/		return 0x821AC26C;
		  /* 821AC26Ch */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 821AC26Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821AC26Ch case    2:*/		return 0x821AC270;
		  /* 821AC270h */ case    3:  		/* bc 12, CR6_LT, -28 */
		/* 821AC270h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AC254;  }
		/* 821AC270h case    3:*/		return 0x821AC274;
	}
	return 0x821AC274;
} // Block from 821AC264h-821AC274h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC274);
		  /* 821AC274h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821AC274h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC274h case    0:*/		return 0x821AC278;
		  /* 821AC278h */ case    1:  		/* addi R4, R1, 336 */
		/* 821AC278h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x150);
		/* 821AC278h case    1:*/		return 0x821AC27C;
		  /* 821AC27Ch */ case    2:  		/* mr R3, R30 */
		/* 821AC27Ch case    2:*/		regs.R3 = regs.R30;
		/* 821AC27Ch case    2:*/		return 0x821AC280;
		  /* 821AC280h */ case    3:  		/* rlwinm R31, R11, 7, 29, 31 */
		/* 821AC280h case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R31,regs.R11);
		/* 821AC280h case    3:*/		return 0x821AC284;
		  /* 821AC284h */ case    4:  		/* bl -54012 */
		/* 821AC284h case    4:*/		regs.LR = 0x821AC288; return 0x8219EF88;
		/* 821AC284h case    4:*/		return 0x821AC288;
		  /* 821AC288h */ case    5:  		/* li R25, 0 */
		/* 821AC288h case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821AC288h case    5:*/		return 0x821AC28C;
		  /* 821AC28Ch */ case    6:  		/* li R23, 0 */
		/* 821AC28Ch case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821AC28Ch case    6:*/		return 0x821AC290;
		  /* 821AC290h */ case    7:  		/* li R11, 0 */
		/* 821AC290h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AC290h case    7:*/		return 0x821AC294;
		  /* 821AC294h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 821AC294h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AC294h case    8:*/		return 0x821AC298;
		  /* 821AC298h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 821AC298h case    9:*/		if ( regs.CR[6].eq ) { return 0x821AC2C0;  }
		/* 821AC298h case    9:*/		return 0x821AC29C;
		  /* 821AC29Ch */ case   10:  		/* addi R10, R1, 336 */
		/* 821AC29Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x150);
		/* 821AC29Ch case   10:*/		return 0x821AC2A0;
		  /* 821AC2A0h */ case   11:  		/* lfd FR0, <#[R10]> */
		/* 821AC2A0h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000000) );
		/* 821AC2A0h case   11:*/		return 0x821AC2A4;
		  /* 821AC2A4h */ case   12:  		/* fcmpu CR6, FR0, FR31 */
		/* 821AC2A4h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821AC2A4h case   12:*/		return 0x821AC2A8;
		  /* 821AC2A8h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 821AC2A8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821AC2C0;  }
		/* 821AC2A8h case   13:*/		return 0x821AC2AC;
		  /* 821AC2ACh */ case   14:  		/* addi R11, R11, 1 */
		/* 821AC2ACh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AC2ACh case   14:*/		return 0x821AC2B0;
		  /* 821AC2B0h */ case   15:  		/* addi R25, R25, 1 */
		/* 821AC2B0h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821AC2B0h case   15:*/		return 0x821AC2B4;
		  /* 821AC2B4h */ case   16:  		/* addi R10, R10, 8 */
		/* 821AC2B4h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821AC2B4h case   16:*/		return 0x821AC2B8;
		  /* 821AC2B8h */ case   17:  		/* cmplw CR6, R11, R31 */
		/* 821AC2B8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AC2B8h case   17:*/		return 0x821AC2BC;
		  /* 821AC2BCh */ case   18:  		/* bc 12, CR6_LT, -28 */
		/* 821AC2BCh case   18:*/		if ( regs.CR[6].lt ) { return 0x821AC2A0;  }
		/* 821AC2BCh case   18:*/		return 0x821AC2C0;
	}
	return 0x821AC2C0;
} // Block from 821AC274h-821AC2C0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AC2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC2C0);
		  /* 821AC2C0h */ case    0:  		/* mr R10, R25 */
		/* 821AC2C0h case    0:*/		regs.R10 = regs.R25;
		/* 821AC2C0h case    0:*/		return 0x821AC2C4;
		  /* 821AC2C4h */ case    1:  		/* cmplw CR6, R25, R31 */
		/* 821AC2C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R31);
		/* 821AC2C4h case    1:*/		return 0x821AC2C8;
		  /* 821AC2C8h */ case    2:  		/* bc 4, CR6_LT, 48 */
		/* 821AC2C8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821AC2F8;  }
		/* 821AC2C8h case    2:*/		return 0x821AC2CC;
		  /* 821AC2CCh */ case    3:  		/* rlwinm R9, R25, 3, 0, 28 */
		/* 821AC2CCh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R25);
		/* 821AC2CCh case    3:*/		return 0x821AC2D0;
		  /* 821AC2D0h */ case    4:  		/* addi R11, R1, 336 */
		/* 821AC2D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x150);
		/* 821AC2D0h case    4:*/		return 0x821AC2D4;
		  /* 821AC2D4h */ case    5:  		/* add R11, R9, R11 */
		/* 821AC2D4h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821AC2D4h case    5:*/		return 0x821AC2D8;
		  /* 821AC2D8h */ case    6:  		/* lfd FR0, <#[R11]> */
		/* 821AC2D8h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC2D8h case    6:*/		return 0x821AC2DC;
		  /* 821AC2DCh */ case    7:  		/* fcmpu CR6, FR0, FR29 */
		/* 821AC2DCh case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 821AC2DCh case    7:*/		return 0x821AC2E0;
		  /* 821AC2E0h */ case    8:  		/* bc 4, CR6_EQ, 24 */
		/* 821AC2E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821AC2F8;  }
		/* 821AC2E0h case    8:*/		return 0x821AC2E4;
		  /* 821AC2E4h */ case    9:  		/* addi R10, R10, 1 */
		/* 821AC2E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AC2E4h case    9:*/		return 0x821AC2E8;
		  /* 821AC2E8h */ case   10:  		/* addi R23, R23, 1 */
		/* 821AC2E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821AC2E8h case   10:*/		return 0x821AC2EC;
		  /* 821AC2ECh */ case   11:  		/* addi R11, R11, 8 */
		/* 821AC2ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821AC2ECh case   11:*/		return 0x821AC2F0;
		  /* 821AC2F0h */ case   12:  		/* cmplw CR6, R10, R31 */
		/* 821AC2F0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AC2F0h case   12:*/		return 0x821AC2F4;
		  /* 821AC2F4h */ case   13:  		/* bc 12, CR6_LT, -28 */
		/* 821AC2F4h case   13:*/		if ( regs.CR[6].lt ) { return 0x821AC2D8;  }
		/* 821AC2F4h case   13:*/		return 0x821AC2F8;
	}
	return 0x821AC2F8;
} // Block from 821AC2C0h-821AC2F8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AC2F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC2F8);
		  /* 821AC2F8h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821AC2F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AC2F8h case    0:*/		return 0x821AC2FC;
		  /* 821AC2FCh */ case    1:  		/* bc 12, CR6_EQ, 476 */
		/* 821AC2FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC2FCh case    1:*/		return 0x821AC300;
		  /* 821AC300h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 821AC300h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821AC300h case    2:*/		return 0x821AC304;
		  /* 821AC304h */ case    3:  		/* bc 12, CR6_EQ, 468 */
		/* 821AC304h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC304h case    3:*/		return 0x821AC308;
		  /* 821AC308h */ case    4:  		/* subf R11, R25, R31 */
		/* 821AC308h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R25,regs.R31);
		/* 821AC308h case    4:*/		return 0x821AC30C;
		  /* 821AC30Ch */ case    5:  		/* cmplw CR6, R23, R11 */
		/* 821AC30Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821AC30Ch case    5:*/		return 0x821AC310;
		  /* 821AC310h */ case    6:  		/* bc 4, CR6_EQ, 456 */
		/* 821AC310h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821AC4D8;  }
		/* 821AC310h case    6:*/		return 0x821AC314;
		  /* 821AC314h */ case    7:  		/* li R26, 0 */
		/* 821AC314h case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821AC314h case    7:*/		return 0x821AC318;
		  /* 821AC318h */ case    8:  		/* mr R20, R25 */
		/* 821AC318h case    8:*/		regs.R20 = regs.R25;
		/* 821AC318h case    8:*/		return 0x821AC31C;
		  /* 821AC31Ch */ case    9:  		/* add R27, R23, R25 */
		/* 821AC31Ch case    9:*/		cpu::op::add<0>(regs,&regs.R27,regs.R23,regs.R25);
		/* 821AC31Ch case    9:*/		return 0x821AC320;
		  /* 821AC320h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 821AC320h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821AC320h case   10:*/		return 0x821AC324;
		  /* 821AC324h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 821AC324h case   11:*/		if ( regs.CR[6].eq ) { return 0x821AC334;  }
		/* 821AC324h case   11:*/		return 0x821AC328;
		  /* 821AC328h */ case   12:  		/* li R27, 0 */
		/* 821AC328h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821AC328h case   12:*/		return 0x821AC32C;
		  /* 821AC32Ch */ case   13:  		/* mr R26, R19 */
		/* 821AC32Ch case   13:*/		regs.R26 = regs.R19;
		/* 821AC32Ch case   13:*/		return 0x821AC330;
		  /* 821AC330h */ case   14:  		/* add R20, R25, R19 */
		/* 821AC330h case   14:*/		cpu::op::add<0>(regs,&regs.R20,regs.R25,regs.R19);
		/* 821AC330h case   14:*/		return 0x821AC334;
	}
	return 0x821AC334;
} // Block from 821AC2F8h-821AC334h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AC334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC334);
		  /* 821AC334h */ case    0:  		/* mr R4, R16 */
		/* 821AC334h case    0:*/		regs.R4 = regs.R16;
		/* 821AC334h case    0:*/		return 0x821AC338;
		  /* 821AC338h */ case    1:  		/* lwz R5, <#[R16 + 12]> */
		/* 821AC338h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000000C) );
		/* 821AC338h case    1:*/		return 0x821AC33C;
		  /* 821AC33Ch */ case    2:  		/* mr R3, R17 */
		/* 821AC33Ch case    2:*/		regs.R3 = regs.R17;
		/* 821AC33Ch case    2:*/		return 0x821AC340;
		  /* 821AC340h */ case    3:  		/* bl -242256 */
		/* 821AC340h case    3:*/		regs.LR = 0x821AC344; return 0x821710F0;
		/* 821AC340h case    3:*/		return 0x821AC344;
		  /* 821AC344h */ case    4:  		/* mr R30, R3 */
		/* 821AC344h case    4:*/		regs.R30 = regs.R3;
		/* 821AC344h case    4:*/		return 0x821AC348;
		  /* 821AC348h */ case    5:  		/* rlwinm R24, R27, 1, 0, 30 */
		/* 821AC348h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R24,regs.R27);
		/* 821AC348h case    5:*/		return 0x821AC34C;
		  /* 821AC34Ch */ case    6:  		/* rlwinm R11, R19, 20, 9, 11 */
		/* 821AC34Ch case    6:*/		cpu::op::rlwinm<0,20,9,11>(regs,&regs.R11,regs.R19);
		/* 821AC34Ch case    6:*/		return 0x821AC350;
		  /* 821AC350h */ case    7:  		/* mr R3, R17 */
		/* 821AC350h case    7:*/		regs.R3 = regs.R17;
		/* 821AC350h case    7:*/		return 0x821AC354;
		  /* 821AC354h */ case    8:  		/* lwz R10, <#[R30]> */
		/* 821AC354h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC354h case    8:*/		return 0x821AC358;
		  /* 821AC358h */ case    9:  		/* mr R9, R10 */
		/* 821AC358h case    9:*/		regs.R9 = regs.R10;
		/* 821AC358h case    9:*/		return 0x821AC35C;
		  /* 821AC35Ch */ case   10:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821AC35Ch case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821AC35Ch case   10:*/		return 0x821AC360;
		  /* 821AC360h */ case   11:  		/* rlwinm R9, R9, 0, 27, 18 */
		/* 821AC360h case   11:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R9,regs.R9);
		/* 821AC360h case   11:*/		return 0x821AC364;
		  /* 821AC364h */ case   12:  		/* srw R10, R10, R24 */
		/* 821AC364h case   12:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R24);
		/* 821AC364h case   12:*/		return 0x821AC368;
		  /* 821AC368h */ case   13:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 821AC368h case   13:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821AC368h case   13:*/		return 0x821AC36C;
		  /* 821AC36Ch */ case   14:  		/* rlwinm R9, R9, 0, 7, 3 */
		/* 821AC36Ch case   14:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R9,regs.R9);
		/* 821AC36Ch case   14:*/		return 0x821AC370;
		  /* 821AC370h */ case   15:  		/* or R11, R10, R11 */
		/* 821AC370h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AC370h case   15:*/		return 0x821AC374;
		  /* 821AC374h */ case   16:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821AC374h case   16:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821AC374h case   16:*/		return 0x821AC378;
		  /* 821AC378h */ case   17:  		/* or R11, R11, R9 */
		/* 821AC378h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AC378h case   17:*/		return 0x821AC37C;
		  /* 821AC37Ch */ case   18:  		/* stw R11, <#[R30]> */
		/* 821AC37Ch case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC37Ch case   18:*/		return 0x821AC380;
		  /* 821AC380h */ case   19:  		/* lwz R4, <#[R14 + 48]> */
		/* 821AC380h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000030) );
		/* 821AC380h case   19:*/		return 0x821AC384;
		  /* 821AC384h */ case   20:  		/* lwz R5, <#[R4 + 12]> */
		/* 821AC384h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AC384h case   20:*/		return 0x821AC388;
		  /* 821AC388h */ case   21:  		/* bl -242328 */
		/* 821AC388h case   21:*/		regs.LR = 0x821AC38C; return 0x821710F0;
		/* 821AC388h case   21:*/		return 0x821AC38C;
		  /* 821AC38Ch */ case   22:  		/* mr R31, R3 */
		/* 821AC38Ch case   22:*/		regs.R31 = regs.R3;
		/* 821AC38Ch case   22:*/		return 0x821AC390;
		  /* 821AC390h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 821AC390h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AC390h case   23:*/		return 0x821AC394;
		  /* 821AC394h */ case   24:  		/* mr R3, R17 */
		/* 821AC394h case   24:*/		regs.R3 = regs.R17;
		/* 821AC394h case   24:*/		return 0x821AC398;
		  /* 821AC398h */ case   25:  		/* rlwimi R11, R25, 25, 4, 6 */
		/* 821AC398h case   25:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R25);
		/* 821AC398h case   25:*/		return 0x821AC39C;
		  /* 821AC39Ch */ case   26:  		/* stw R11, <#[R31]> */
		/* 821AC39Ch case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AC39Ch case   26:*/		return 0x821AC3A0;
		  /* 821AC3A0h */ case   27:  		/* lwz R4, <#[R14 + 52]> */
		/* 821AC3A0h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000034) );
		/* 821AC3A0h case   27:*/		return 0x821AC3A4;
		  /* 821AC3A4h */ case   28:  		/* lwz R5, <#[R4 + 12]> */
		/* 821AC3A4h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AC3A4h case   28:*/		return 0x821AC3A8;
		  /* 821AC3A8h */ case   29:  		/* bl -242360 */
		/* 821AC3A8h case   29:*/		regs.LR = 0x821AC3AC; return 0x821710F0;
		/* 821AC3A8h case   29:*/		return 0x821AC3AC;
		  /* 821AC3ACh */ case   30:  		/* lwz R7, <#[R3]> */
		/* 821AC3ACh case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 821AC3ACh case   30:*/		return 0x821AC3B0;
		  /* 821AC3B0h */ case   31:  		/* mr R4, R7 */
		/* 821AC3B0h case   31:*/		regs.R4 = regs.R7;
		/* 821AC3B0h case   31:*/		return 0x821AC3B4;
		  /* 821AC3B4h */ case   32:  		/* rlwinm R7, R7, 27, 24, 31 */
		/* 821AC3B4h case   32:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R7);
		/* 821AC3B4h case   32:*/		return 0x821AC3B8;
		  /* 821AC3B8h */ case   33:  		/* rlwinm R11, R25, 1, 0, 30 */
		/* 821AC3B8h case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R25);
		/* 821AC3B8h case   33:*/		return 0x821AC3BC;
		  /* 821AC3BCh */ case   34:  		/* rlwinm R6, R23, 20, 9, 11 */
		/* 821AC3BCh case   34:*/		cpu::op::rlwinm<0,20,9,11>(regs,&regs.R6,regs.R23);
		/* 821AC3BCh case   34:*/		return 0x821AC3C0;
		  /* 821AC3C0h */ case   35:  		/* srw R11, R7, R11 */
		/* 821AC3C0h case   35:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821AC3C0h case   35:*/		return 0x821AC3C4;
		  /* 821AC3C4h */ case   36:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821AC3C4h case   36:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AC3C4h case   36:*/		return 0x821AC3C8;
		  /* 821AC3C8h */ case   37:  		/* mr R28, R3 */
		/* 821AC3C8h case   37:*/		regs.R28 = regs.R3;
		/* 821AC3C8h case   37:*/		return 0x821AC3CC;
		  /* 821AC3CCh */ case   38:  		/* or R11, R11, R6 */
		/* 821AC3CCh case   38:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 821AC3CCh case   38:*/		return 0x821AC3D0;
		  /* 821AC3D0h */ case   39:  		/* rlwinm R3, R4, 0, 27, 18 */
		/* 821AC3D0h case   39:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R3,regs.R4);
		/* 821AC3D0h case   39:*/		return 0x821AC3D4;
		  /* 821AC3D4h */ case   40:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821AC3D4h case   40:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821AC3D4h case   40:*/		return 0x821AC3D8;
		  /* 821AC3D8h */ case   41:  		/* rlwinm R3, R3, 0, 7, 3 */
		/* 821AC3D8h case   41:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R3,regs.R3);
		/* 821AC3D8h case   41:*/		return 0x821AC3DC;
		  /* 821AC3DCh */ case   42:  		/* mr R5, R30 */
		/* 821AC3DCh case   42:*/		regs.R5 = regs.R30;
		/* 821AC3DCh case   42:*/		return 0x821AC3E0;
		  /* 821AC3E0h */ case   43:  		/* or R11, R11, R3 */
		/* 821AC3E0h case   43:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821AC3E0h case   43:*/		return 0x821AC3E4;
		  /* 821AC3E4h */ case   44:  		/* li R10, 1 */
		/* 821AC3E4h case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AC3E4h case   44:*/		return 0x821AC3E8;
		  /* 821AC3E8h */ case   45:  		/* stw R11, <#[R28]> */
		/* 821AC3E8h case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AC3E8h case   45:*/		return 0x821AC3EC;
		  /* 821AC3ECh */ case   46:  		/* addi R9, R1, 160 */
		/* 821AC3ECh case   46:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 821AC3ECh case   46:*/		return 0x821AC3F0;
		  /* 821AC3F0h */ case   47:  		/* mr R8, R14 */
		/* 821AC3F0h case   47:*/		regs.R8 = regs.R14;
		/* 821AC3F0h case   47:*/		return 0x821AC3F4;
		  /* 821AC3F4h */ case   48:  		/* mr R7, R31 */
		/* 821AC3F4h case   48:*/		regs.R7 = regs.R31;
		/* 821AC3F4h case   48:*/		return 0x821AC3F8;
		  /* 821AC3F8h */ case   49:  		/* mr R6, R14 */
		/* 821AC3F8h case   49:*/		regs.R6 = regs.R14;
		/* 821AC3F8h case   49:*/		return 0x821AC3FC;
		  /* 821AC3FCh */ case   50:  		/* mr R4, R18 */
		/* 821AC3FCh case   50:*/		regs.R4 = regs.R18;
		/* 821AC3FCh case   50:*/		return 0x821AC400;
		  /* 821AC400h */ case   51:  		/* mr R3, R17 */
		/* 821AC400h case   51:*/		regs.R3 = regs.R17;
		/* 821AC400h case   51:*/		return 0x821AC404;
		  /* 821AC404h */ case   52:  		/* bl -50540 */
		/* 821AC404h case   52:*/		regs.LR = 0x821AC408; return 0x8219FE98;
		/* 821AC404h case   52:*/		return 0x821AC408;
		  /* 821AC408h */ case   53:  		/* addi R11, R3, 0 */
		/* 821AC408h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x0);
		/* 821AC408h case   53:*/		return 0x821AC40C;
		  /* 821AC40Ch */ case   54:  		/* li R10, 1 */
		/* 821AC40Ch case   54:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AC40Ch case   54:*/		return 0x821AC410;
		  /* 821AC410h */ case   55:  		/* cntlzw R11, R11 */
		/* 821AC410h case   55:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821AC410h case   55:*/		return 0x821AC414;
		  /* 821AC414h */ case   56:  		/* addi R9, R1, 208 */
		/* 821AC414h case   56:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 821AC414h case   56:*/		return 0x821AC418;
		  /* 821AC418h */ case   57:  		/* mr R8, R14 */
		/* 821AC418h case   57:*/		regs.R8 = regs.R14;
		/* 821AC418h case   57:*/		return 0x821AC41C;
		  /* 821AC41Ch */ case   58:  		/* mr R7, R28 */
		/* 821AC41Ch case   58:*/		regs.R7 = regs.R28;
		/* 821AC41Ch case   58:*/		return 0x821AC420;
		  /* 821AC420h */ case   59:  		/* mr R6, R14 */
		/* 821AC420h case   59:*/		regs.R6 = regs.R14;
		/* 821AC420h case   59:*/		return 0x821AC424;
		  /* 821AC424h */ case   60:  		/* mr R5, R30 */
		/* 821AC424h case   60:*/		regs.R5 = regs.R30;
		/* 821AC424h case   60:*/		return 0x821AC428;
		  /* 821AC428h */ case   61:  		/* mr R4, R18 */
		/* 821AC428h case   61:*/		regs.R4 = regs.R18;
		/* 821AC428h case   61:*/		return 0x821AC42C;
		  /* 821AC42Ch */ case   62:  		/* mr R3, R17 */
		/* 821AC42Ch case   62:*/		regs.R3 = regs.R17;
		/* 821AC42Ch case   62:*/		return 0x821AC430;
		  /* 821AC430h */ case   63:  		/* rlwinm R29, R11, 27, 31, 31 */
		/* 821AC430h case   63:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R11);
		/* 821AC430h case   63:*/		return 0x821AC434;
		  /* 821AC434h */ case   64:  		/* bl -50588 */
		/* 821AC434h case   64:*/		regs.LR = 0x821AC438; return 0x8219FE98;
		/* 821AC434h case   64:*/		return 0x821AC438;
		  /* 821AC438h */ case   65:  		/* addi R11, R3, 0 */
		/* 821AC438h case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x0);
		/* 821AC438h case   65:*/		return 0x821AC43C;
		  /* 821AC43Ch */ case   66:  		/* lwz R7, <#[R1 + 208]> */
		/* 821AC43Ch case   66:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AC43Ch case   66:*/		return 0x821AC440;
		  /* 821AC440h */ case   67:  		/* cmplwi CR0, R29, 0 */
		/* 821AC440h case   67:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 821AC440h case   67:*/		return 0x821AC444;
		  /* 821AC444h */ case   68:  		/* cntlzw R11, R11 */
		/* 821AC444h case   68:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821AC444h case   68:*/		return 0x821AC448;
		  /* 821AC448h */ case   69:  		/* rlwinm R10, R11, 27, 31, 31 */
		/* 821AC448h case   69:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R11);
		/* 821AC448h case   69:*/		return 0x821AC44C;
		  /* 821AC44Ch */ case   70:  		/* bc 12, CR0_EQ, 32 */
		/* 821AC44Ch case   70:*/		if ( regs.CR[0].eq ) { return 0x821AC46C;  }
		/* 821AC44Ch case   70:*/		return 0x821AC450;
		  /* 821AC450h */ case   71:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821AC450h case   71:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821AC450h case   71:*/		return 0x821AC454;
		  /* 821AC454h */ case   72:  		/* bc 12, CR0_EQ, 84 */
		/* 821AC454h case   72:*/		if ( regs.CR[0].eq ) { return 0x821AC4A8;  }
		/* 821AC454h case   72:*/		return 0x821AC458;
		  /* 821AC458h */ case   73:  		/* lwz R11, <#[R1 + 160]> */
		/* 821AC458h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 821AC458h case   73:*/		return 0x821AC45C;
		  /* 821AC45Ch */ case   74:  		/* rlwinm R9, R7, 0, 21, 27 */
		/* 821AC45Ch case   74:*/		cpu::op::rlwinm<0,0,21,27>(regs,&regs.R9,regs.R7);
		/* 821AC45Ch case   74:*/		return 0x821AC460;
		  /* 821AC460h */ case   75:  		/* rlwinm R11, R11, 0, 21, 27 */
		/* 821AC460h case   75:*/		cpu::op::rlwinm<0,0,21,27>(regs,&regs.R11,regs.R11);
		/* 821AC460h case   75:*/		return 0x821AC464;
		  /* 821AC464h */ case   76:  		/* cmplw CR6, R9, R11 */
		/* 821AC464h case   76:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AC464h case   76:*/		return 0x821AC468;
		  /* 821AC468h */ case   77:  		/* bc 4, CR6_LT, 64 */
		/* 821AC468h case   77:*/		if ( !regs.CR[6].lt ) { return 0x821AC4A8;  }
		/* 821AC468h case   77:*/		return 0x821AC46C;
	}
	return 0x821AC46C;
} // Block from 821AC334h-821AC46Ch (78 instructions)

//////////////////////////////////////////////////////
// Block at 821AC46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC46C);
		  /* 821AC46Ch */ case    0:  		/* lwz R6, <#[R1 + 216]> */
		/* 821AC46Ch case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000D8) );
		/* 821AC46Ch case    0:*/		return 0x821AC470;
		  /* 821AC470h */ case    1:  		/* mr R11, R25 */
		/* 821AC470h case    1:*/		regs.R11 = regs.R25;
		/* 821AC470h case    1:*/		return 0x821AC474;
		  /* 821AC474h */ case    2:  		/* lwz R8, <#[R1 + 212]> */
		/* 821AC474h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000D4) );
		/* 821AC474h case    2:*/		return 0x821AC478;
		  /* 821AC478h */ case    3:  		/* mr R9, R31 */
		/* 821AC478h case    3:*/		regs.R9 = regs.R31;
		/* 821AC478h case    3:*/		return 0x821AC47C;
		  /* 821AC47Ch */ case    4:  		/* mr R31, R28 */
		/* 821AC47Ch case    4:*/		regs.R31 = regs.R28;
		/* 821AC47Ch case    4:*/		return 0x821AC480;
		  /* 821AC480h */ case    5:  		/* stw R7, <#[R1 + 160]> */
		/* 821AC480h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000A0) );
		/* 821AC480h case    5:*/		return 0x821AC484;
		  /* 821AC484h */ case    6:  		/* mr R25, R23 */
		/* 821AC484h case    6:*/		regs.R25 = regs.R23;
		/* 821AC484h case    6:*/		return 0x821AC488;
		  /* 821AC488h */ case    7:  		/* mr R20, R26 */
		/* 821AC488h case    7:*/		regs.R20 = regs.R26;
		/* 821AC488h case    7:*/		return 0x821AC48C;
		  /* 821AC48Ch */ case    8:  		/* stw R6, <#[R1 + 168]> */
		/* 821AC48Ch case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000A8) );
		/* 821AC48Ch case    8:*/		return 0x821AC490;
		  /* 821AC490h */ case    9:  		/* mr R29, R10 */
		/* 821AC490h case    9:*/		regs.R29 = regs.R10;
		/* 821AC490h case    9:*/		return 0x821AC494;
		  /* 821AC494h */ case   10:  		/* stw R8, <#[R1 + 164]> */
		/* 821AC494h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A4) );
		/* 821AC494h case   10:*/		return 0x821AC498;
		  /* 821AC498h */ case   11:  		/* mr R28, R9 */
		/* 821AC498h case   11:*/		regs.R28 = regs.R9;
		/* 821AC498h case   11:*/		return 0x821AC49C;
		  /* 821AC49Ch */ case   12:  		/* mr R23, R11 */
		/* 821AC49Ch case   12:*/		regs.R23 = regs.R11;
		/* 821AC49Ch case   12:*/		return 0x821AC4A0;
		  /* 821AC4A0h */ case   13:  		/* add R26, R11, R26 */
		/* 821AC4A0h case   13:*/		cpu::op::add<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 821AC4A0h case   13:*/		return 0x821AC4A4;
		  /* 821AC4A4h */ case   14:  		/* b 8 */
		/* 821AC4A4h case   14:*/		return 0x821AC4AC;
		/* 821AC4A4h case   14:*/		return 0x821AC4A8;
	}
	return 0x821AC4A8;
} // Block from 821AC46Ch-821AC4A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AC4A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC4A8);
		  /* 821AC4A8h */ case    0:  		/* lwz R8, <#[R1 + 164]> */
		/* 821AC4A8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A4) );
		/* 821AC4A8h case    0:*/		return 0x821AC4AC;
	}
	return 0x821AC4AC;
} // Block from 821AC4A8h-821AC4ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC4AC);
		  /* 821AC4ACh */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821AC4ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821AC4ACh case    0:*/		return 0x821AC4B0;
		  /* 821AC4B0h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821AC4B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AC4C4;  }
		/* 821AC4B0h case    1:*/		return 0x821AC4B4;
		  /* 821AC4B4h */ case    2:  		/* lwz R11, <#[R28 + 12]> */
		/* 821AC4B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821AC4B4h case    2:*/		return 0x821AC4B8;
		  /* 821AC4B8h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 821AC4B8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821AC4B8h case    3:*/		return 0x821AC4BC;
		  /* 821AC4BCh */ case    4:  		/* li R11, 1 */
		/* 821AC4BCh case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AC4BCh case    4:*/		return 0x821AC4C0;
		  /* 821AC4C0h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821AC4C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821AC4C8;  }
		/* 821AC4C0h case    5:*/		return 0x821AC4C4;
	}
	return 0x821AC4C4;
} // Block from 821AC4ACh-821AC4C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AC4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC4C4);
		  /* 821AC4C4h */ case    0:  		/* li R11, 0 */
		/* 821AC4C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AC4C4h case    0:*/		return 0x821AC4C8;
	}
	return 0x821AC4C8;
} // Block from 821AC4C4h-821AC4C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC4C8);
		  /* 821AC4C8h */ case    0:  		/* rlwinm. R10, R29, 0, 24, 31 */
		/* 821AC4C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R29);
		/* 821AC4C8h case    0:*/		return 0x821AC4CC;
		  /* 821AC4CCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821AC4CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821AC4D8;  }
		/* 821AC4CCh case    1:*/		return 0x821AC4D0;
		  /* 821AC4D0h */ case    2:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AC4D0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AC4D0h case    2:*/		return 0x821AC4D4;
		  /* 821AC4D4h */ case    3:  		/* bc 12, CR0_EQ, 44 */
		/* 821AC4D4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821AC500;  }
		/* 821AC4D4h case    3:*/		return 0x821AC4D8;
	}
	return 0x821AC4D8;
} // Block from 821AC4C8h-821AC4D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC4D8);
		  /* 821AC4D8h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821AC4D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821AC4D8h case    0:*/		return 0x821AC4DC;
		  /* 821AC4DCh */ case    1:  		/* bc 4, CR0_EQ, -6904 */
		/* 821AC4DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821AC4DCh case    1:*/		return 0x821AC4E0;
		  /* 821AC4E0h */ case    2:  		/* mr R11, R15 */
		/* 821AC4E0h case    2:*/		regs.R11 = regs.R15;
		/* 821AC4E0h case    2:*/		return 0x821AC4E4;
		  /* 821AC4E4h */ case    3:  		/* mr R10, R14 */
		/* 821AC4E4h case    3:*/		regs.R10 = regs.R14;
		/* 821AC4E4h case    3:*/		return 0x821AC4E8;
		  /* 821AC4E8h */ case    4:  		/* lwz R14, <#[R1 + 132]> */
		/* 821AC4E8h case    4:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000084) );
		/* 821AC4E8h case    4:*/		return 0x821AC4EC;
		  /* 821AC4ECh */ case    5:  		/* mr R15, R16 */
		/* 821AC4ECh case    5:*/		regs.R15 = regs.R16;
		/* 821AC4ECh case    5:*/		return 0x821AC4F0;
		  /* 821AC4F0h */ case    6:  		/* li R22, 1 */
		/* 821AC4F0h case    6:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821AC4F0h case    6:*/		return 0x821AC4F4;
		  /* 821AC4F4h */ case    7:  		/* stw R10, <#[R1 + 132]> */
		/* 821AC4F4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821AC4F4h case    7:*/		return 0x821AC4F8;
		  /* 821AC4F8h */ case    8:  		/* mr R16, R11 */
		/* 821AC4F8h case    8:*/		regs.R16 = regs.R11;
		/* 821AC4F8h case    8:*/		return 0x821AC4FC;
		  /* 821AC4FCh */ case    9:  		/* b -992 */
		/* 821AC4FCh case    9:*/		return 0x821AC11C;
		/* 821AC4FCh case    9:*/		return 0x821AC500;
	}
	return 0x821AC500;
} // Block from 821AC4D8h-821AC500h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821AC500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC500);
		  /* 821AC500h */ case    0:  		/* li R7, 1 */
		/* 821AC500h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AC500h case    0:*/		return 0x821AC504;
		  /* 821AC504h */ case    1:  		/* li R6, 1 */
		/* 821AC504h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AC504h case    1:*/		return 0x821AC508;
		  /* 821AC508h */ case    2:  		/* mr R5, R18 */
		/* 821AC508h case    2:*/		regs.R5 = regs.R18;
		/* 821AC508h case    2:*/		return 0x821AC50C;
		  /* 821AC50Ch */ case    3:  		/* mr R4, R14 */
		/* 821AC50Ch case    3:*/		regs.R4 = regs.R14;
		/* 821AC50Ch case    3:*/		return 0x821AC510;
		  /* 821AC510h */ case    4:  		/* mr R3, R17 */
		/* 821AC510h case    4:*/		regs.R3 = regs.R17;
		/* 821AC510h case    4:*/		return 0x821AC514;
		  /* 821AC514h */ case    5:  		/* bl 530036 */
		/* 821AC514h case    5:*/		regs.LR = 0x821AC518; return 0x8222DB88;
		/* 821AC514h case    5:*/		return 0x821AC518;
		  /* 821AC518h */ case    6:  		/* addi R10, R1, 160 */
		/* 821AC518h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 821AC518h case    6:*/		return 0x821AC51C;
		  /* 821AC51Ch */ case    7:  		/* mr R9, R14 */
		/* 821AC51Ch case    7:*/		regs.R9 = regs.R14;
		/* 821AC51Ch case    7:*/		return 0x821AC520;
		  /* 821AC520h */ case    8:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AC520h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AC520h case    8:*/		return 0x821AC524;
		  /* 821AC524h */ case    9:  		/* mr R7, R31 */
		/* 821AC524h case    9:*/		regs.R7 = regs.R31;
		/* 821AC524h case    9:*/		return 0x821AC528;
		  /* 821AC528h */ case   10:  		/* mr R6, R14 */
		/* 821AC528h case   10:*/		regs.R6 = regs.R14;
		/* 821AC528h case   10:*/		return 0x821AC52C;
		  /* 821AC52Ch */ case   11:  		/* mr R5, R30 */
		/* 821AC52Ch case   11:*/		regs.R5 = regs.R30;
		/* 821AC52Ch case   11:*/		return 0x821AC530;
		  /* 821AC530h */ case   12:  		/* mr R4, R18 */
		/* 821AC530h case   12:*/		regs.R4 = regs.R18;
		/* 821AC530h case   12:*/		return 0x821AC534;
		  /* 821AC534h */ case   13:  		/* mr R3, R17 */
		/* 821AC534h case   13:*/		regs.R3 = regs.R17;
		/* 821AC534h case   13:*/		return 0x821AC538;
		  /* 821AC538h */ case   14:  		/* bl -39488 */
		/* 821AC538h case   14:*/		regs.LR = 0x821AC53C; return 0x821A2AF8;
		/* 821AC538h case   14:*/		return 0x821AC53C;
		  /* 821AC53Ch */ case   15:  		/* add R10, R27, R19 */
		/* 821AC53Ch case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R27,regs.R19);
		/* 821AC53Ch case   15:*/		return 0x821AC540;
		  /* 821AC540h */ case   16:  		/* mr R22, R3 */
		/* 821AC540h case   16:*/		regs.R22 = regs.R3;
		/* 821AC540h case   16:*/		return 0x821AC544;
		  /* 821AC544h */ case   17:  		/* li R21, 0 */
		/* 821AC544h case   17:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821AC544h case   17:*/		return 0x821AC548;
		  /* 821AC548h */ case   18:  		/* li R31, 0 */
		/* 821AC548h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AC548h case   18:*/		return 0x821AC54C;
		  /* 821AC54Ch */ case   19:  		/* cmplw CR6, R27, R10 */
		/* 821AC54Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 821AC54Ch case   19:*/		return 0x821AC550;
		  /* 821AC550h */ case   20:  		/* bc 4, CR6_LT, 60 */
		/* 821AC550h case   20:*/		if ( !regs.CR[6].lt ) { return 0x821AC58C;  }
		/* 821AC550h case   20:*/		return 0x821AC554;
		  /* 821AC554h */ case   21:  		/* addi R9, R1, 524 */
		/* 821AC554h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x20C);
		/* 821AC554h case   21:*/		return 0x821AC558;
		  /* 821AC558h */ case   22:  		/* mr R11, R24 */
		/* 821AC558h case   22:*/		regs.R11 = regs.R24;
		/* 821AC558h case   22:*/		return 0x821AC55C;
		  /* 821AC55Ch */ case   23:  		/* li R24, 3 */
		/* 821AC55Ch case   23:*/		cpu::op::li<0>(regs,&regs.R24,0x3);
		/* 821AC55Ch case   23:*/		return 0x821AC560;
		  /* 821AC560h */ case   24:  		/* slw R8, R31, R11 */
		/* 821AC560h case   24:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R31,regs.R11);
		/* 821AC560h case   24:*/		return 0x821AC564;
		  /* 821AC564h */ case   25:  		/* stfsu FR30, <#[R9 + 4]> */
		/* 821AC564h case   25:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821AC564h case   25:*/		return 0x821AC568;
		  /* 821AC568h */ case   26:  		/* slw R7, R24, R11 */
		/* 821AC568h case   26:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R24,regs.R11);
		/* 821AC568h case   26:*/		return 0x821AC56C;
		  /* 821AC56Ch */ case   27:  		/* addi R31, R31, 1 */
		/* 821AC56Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821AC56Ch case   27:*/		return 0x821AC570;
		  /* 821AC570h */ case   28:  		/* andc R7, R21, R7 */
		/* 821AC570h case   28:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R21,regs.R7);
		/* 821AC570h case   28:*/		return 0x821AC574;
		  /* 821AC574h */ case   29:  		/* add R6, R31, R27 */
		/* 821AC574h case   29:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R27);
		/* 821AC574h case   29:*/		return 0x821AC578;
		  /* 821AC578h */ case   30:  		/* or R21, R7, R8 */
		/* 821AC578h case   30:*/		cpu::op::or<0>(regs,&regs.R21,regs.R7,regs.R8);
		/* 821AC578h case   30:*/		return 0x821AC57C;
		  /* 821AC57Ch */ case   31:  		/* addi R11, R11, 2 */
		/* 821AC57Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AC57Ch case   31:*/		return 0x821AC580;
		  /* 821AC580h */ case   32:  		/* cmplw CR6, R6, R10 */
		/* 821AC580h case   32:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 821AC580h case   32:*/		return 0x821AC584;
		  /* 821AC584h */ case   33:  		/* bc 12, CR6_LT, -36 */
		/* 821AC584h case   33:*/		if ( regs.CR[6].lt ) { return 0x821AC560;  }
		/* 821AC584h case   33:*/		return 0x821AC588;
		  /* 821AC588h */ case   34:  		/* b 8 */
		/* 821AC588h case   34:*/		return 0x821AC590;
		/* 821AC588h case   34:*/		return 0x821AC58C;
	}
	return 0x821AC58C;
} // Block from 821AC500h-821AC58Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AC58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC58C);
		  /* 821AC58Ch */ case    0:  		/* li R24, 3 */
		/* 821AC58Ch case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x3);
		/* 821AC58Ch case    0:*/		return 0x821AC590;
	}
	return 0x821AC590;
} // Block from 821AC58Ch-821AC590h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC590);
		  /* 821AC590h */ case    0:  		/* add R8, R26, R25 */
		/* 821AC590h case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R26,regs.R25);
		/* 821AC590h case    0:*/		return 0x821AC594;
		  /* 821AC594h */ case    1:  		/* cmplw CR6, R26, R8 */
		/* 821AC594h case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R8);
		/* 821AC594h case    1:*/		return 0x821AC598;
		  /* 821AC598h */ case    2:  		/* bc 4, CR6_LT, 68 */
		/* 821AC598h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821AC5DC;  }
		/* 821AC598h case    2:*/		return 0x821AC59C;
		  /* 821AC59Ch */ case    3:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 821AC59Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 821AC59Ch case    3:*/		return 0x821AC5A0;
		  /* 821AC5A0h */ case    4:  		/* addi R10, R1, 528 */
		/* 821AC5A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x210);
		/* 821AC5A0h case    4:*/		return 0x821AC5A4;
		  /* 821AC5A4h */ case    5:  		/* rlwinm R11, R26, 1, 0, 30 */
		/* 821AC5A4h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R26);
		/* 821AC5A4h case    5:*/		return 0x821AC5A8;
		  /* 821AC5A8h */ case    6:  		/* add R10, R9, R10 */
		/* 821AC5A8h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821AC5A8h case    6:*/		return 0x821AC5AC;
		  /* 821AC5ACh */ case    7:  		/* subf R9, R31, R26 */
		/* 821AC5ACh case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R31,regs.R26);
		/* 821AC5ACh case    7:*/		return 0x821AC5B0;
		  /* 821AC5B0h */ case    8:  		/* addi R10, R10, -4 */
		/* 821AC5B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821AC5B0h case    8:*/		return 0x821AC5B4;
		  /* 821AC5B4h */ case    9:  		/* slw R7, R31, R11 */
		/* 821AC5B4h case    9:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 821AC5B4h case    9:*/		return 0x821AC5B8;
		  /* 821AC5B8h */ case   10:  		/* stfsu FR30, <#[R10 + 4]> */
		/* 821AC5B8h case   10:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821AC5B8h case   10:*/		return 0x821AC5BC;
		  /* 821AC5BCh */ case   11:  		/* slw R6, R24, R11 */
		/* 821AC5BCh case   11:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R24,regs.R11);
		/* 821AC5BCh case   11:*/		return 0x821AC5C0;
		  /* 821AC5C0h */ case   12:  		/* addi R31, R31, 1 */
		/* 821AC5C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821AC5C0h case   12:*/		return 0x821AC5C4;
		  /* 821AC5C4h */ case   13:  		/* andc R6, R21, R6 */
		/* 821AC5C4h case   13:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R21,regs.R6);
		/* 821AC5C4h case   13:*/		return 0x821AC5C8;
		  /* 821AC5C8h */ case   14:  		/* add R5, R31, R9 */
		/* 821AC5C8h case   14:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R9);
		/* 821AC5C8h case   14:*/		return 0x821AC5CC;
		  /* 821AC5CCh */ case   15:  		/* or R21, R6, R7 */
		/* 821AC5CCh case   15:*/		cpu::op::or<0>(regs,&regs.R21,regs.R6,regs.R7);
		/* 821AC5CCh case   15:*/		return 0x821AC5D0;
		  /* 821AC5D0h */ case   16:  		/* addi R11, R11, 2 */
		/* 821AC5D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AC5D0h case   16:*/		return 0x821AC5D4;
		  /* 821AC5D4h */ case   17:  		/* cmplw CR6, R5, R8 */
		/* 821AC5D4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 821AC5D4h case   17:*/		return 0x821AC5D8;
		  /* 821AC5D8h */ case   18:  		/* bc 12, CR6_LT, -36 */
		/* 821AC5D8h case   18:*/		if ( regs.CR[6].lt ) { return 0x821AC5B4;  }
		/* 821AC5D8h case   18:*/		return 0x821AC5DC;
	}
	return 0x821AC5DC;
} // Block from 821AC590h-821AC5DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AC5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC5DC);
		  /* 821AC5DCh */ case    0:  		/* add R8, R20, R23 */
		/* 821AC5DCh case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R20,regs.R23);
		/* 821AC5DCh case    0:*/		return 0x821AC5E0;
		  /* 821AC5E0h */ case    1:  		/* cmplw CR6, R20, R8 */
		/* 821AC5E0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R8);
		/* 821AC5E0h case    1:*/		return 0x821AC5E4;
		  /* 821AC5E4h */ case    2:  		/* bc 4, CR6_LT, 68 */
		/* 821AC5E4h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821AC628;  }
		/* 821AC5E4h case    2:*/		return 0x821AC5E8;
		  /* 821AC5E8h */ case    3:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 821AC5E8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 821AC5E8h case    3:*/		return 0x821AC5EC;
		  /* 821AC5ECh */ case    4:  		/* addi R10, R1, 528 */
		/* 821AC5ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x210);
		/* 821AC5ECh case    4:*/		return 0x821AC5F0;
		  /* 821AC5F0h */ case    5:  		/* rlwinm R11, R20, 1, 0, 30 */
		/* 821AC5F0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R20);
		/* 821AC5F0h case    5:*/		return 0x821AC5F4;
		  /* 821AC5F4h */ case    6:  		/* add R10, R9, R10 */
		/* 821AC5F4h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821AC5F4h case    6:*/		return 0x821AC5F8;
		  /* 821AC5F8h */ case    7:  		/* subf R9, R31, R20 */
		/* 821AC5F8h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R31,regs.R20);
		/* 821AC5F8h case    7:*/		return 0x821AC5FC;
		  /* 821AC5FCh */ case    8:  		/* addi R10, R10, -4 */
		/* 821AC5FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821AC5FCh case    8:*/		return 0x821AC600;
		  /* 821AC600h */ case    9:  		/* slw R7, R31, R11 */
		/* 821AC600h case    9:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 821AC600h case    9:*/		return 0x821AC604;
		  /* 821AC604h */ case   10:  		/* stfsu FR28, <#[R10 + 4]> */
		/* 821AC604h case   10:*/		cpu::mem::store32f( regs, regs.FR28, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821AC604h case   10:*/		return 0x821AC608;
		  /* 821AC608h */ case   11:  		/* slw R6, R24, R11 */
		/* 821AC608h case   11:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R24,regs.R11);
		/* 821AC608h case   11:*/		return 0x821AC60C;
		  /* 821AC60Ch */ case   12:  		/* addi R31, R31, 1 */
		/* 821AC60Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821AC60Ch case   12:*/		return 0x821AC610;
		  /* 821AC610h */ case   13:  		/* andc R6, R21, R6 */
		/* 821AC610h case   13:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R21,regs.R6);
		/* 821AC610h case   13:*/		return 0x821AC614;
		  /* 821AC614h */ case   14:  		/* add R5, R31, R9 */
		/* 821AC614h case   14:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R9);
		/* 821AC614h case   14:*/		return 0x821AC618;
		  /* 821AC618h */ case   15:  		/* or R21, R6, R7 */
		/* 821AC618h case   15:*/		cpu::op::or<0>(regs,&regs.R21,regs.R6,regs.R7);
		/* 821AC618h case   15:*/		return 0x821AC61C;
		  /* 821AC61Ch */ case   16:  		/* addi R11, R11, 2 */
		/* 821AC61Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AC61Ch case   16:*/		return 0x821AC620;
		  /* 821AC620h */ case   17:  		/* cmplw CR6, R5, R8 */
		/* 821AC620h case   17:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 821AC620h case   17:*/		return 0x821AC624;
		  /* 821AC624h */ case   18:  		/* bc 12, CR6_LT, -36 */
		/* 821AC624h case   18:*/		if ( regs.CR[6].lt ) { return 0x821AC600;  }
		/* 821AC624h case   18:*/		return 0x821AC628;
	}
	return 0x821AC628;
} // Block from 821AC5DCh-821AC628h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AC628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC628);
		  /* 821AC628h */ case    0:  		/* addi R11, R1, 120 */
		/* 821AC628h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821AC628h case    0:*/		return 0x821AC62C;
		  /* 821AC62Ch */ case    1:  		/* li R10, 0 */
		/* 821AC62Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AC62Ch case    1:*/		return 0x821AC630;
		  /* 821AC630h */ case    2:  		/* addi R5, R1, 528 */
		/* 821AC630h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x210);
		/* 821AC630h case    2:*/		return 0x821AC634;
		  /* 821AC634h */ case    3:  		/* mr R4, R31 */
		/* 821AC634h case    3:*/		regs.R4 = regs.R31;
		/* 821AC634h case    3:*/		return 0x821AC638;
		  /* 821AC638h */ case    4:  		/* mr R3, R17 */
		/* 821AC638h case    4:*/		regs.R3 = regs.R17;
		/* 821AC638h case    4:*/		return 0x821AC63C;
		  /* 821AC63Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821AC63Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC63Ch case    5:*/		return 0x821AC640;
		  /* 821AC640h */ case    6:  		/* lwz R6, <#[R1 + 120]> */
		/* 821AC640h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000078) );
		/* 821AC640h case    6:*/		return 0x821AC644;
		  /* 821AC644h */ case    7:  		/* bl 502260 */
		/* 821AC644h case    7:*/		regs.LR = 0x821AC648; return 0x82227038;
		/* 821AC644h case    7:*/		return 0x821AC648;
		  /* 821AC648h */ case    8:  		/* mr R29, R3 */
		/* 821AC648h case    8:*/		regs.R29 = regs.R3;
		/* 821AC648h case    8:*/		return 0x821AC64C;
		  /* 821AC64Ch */ case    9:  		/* mr R4, R3 */
		/* 821AC64Ch case    9:*/		regs.R4 = regs.R3;
		/* 821AC64Ch case    9:*/		return 0x821AC650;
		  /* 821AC650h */ case   10:  		/* li R7, 0 */
		/* 821AC650h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821AC650h case   10:*/		return 0x821AC654;
		  /* 821AC654h */ case   11:  		/* li R6, 228 */
		/* 821AC654h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821AC654h case   11:*/		return 0x821AC658;
		  /* 821AC658h */ case   12:  		/* mr R5, R31 */
		/* 821AC658h case   12:*/		regs.R5 = regs.R31;
		/* 821AC658h case   12:*/		return 0x821AC65C;
		  /* 821AC65Ch */ case   13:  		/* mr R3, R17 */
		/* 821AC65Ch case   13:*/		regs.R3 = regs.R17;
		/* 821AC65Ch case   13:*/		return 0x821AC660;
		  /* 821AC660h */ case   14:  		/* bl -214432 */
		/* 821AC660h case   14:*/		regs.LR = 0x821AC664; return 0x821780C0;
		/* 821AC660h case   14:*/		return 0x821AC664;
		  /* 821AC664h */ case   15:  		/* lwz R11, <#[R22 + 12]> */
		/* 821AC664h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 821AC664h case   15:*/		return 0x821AC668;
		  /* 821AC668h */ case   16:  		/* mr R30, R3 */
		/* 821AC668h case   16:*/		regs.R30 = regs.R3;
		/* 821AC668h case   16:*/		return 0x821AC66C;
		  /* 821AC66Ch */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AC66Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC66Ch case   17:*/		return 0x821AC670;
		  /* 821AC670h */ case   18:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AC670h case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AC670h case   18:*/		return 0x821AC674;
		  /* 821AC674h */ case   19:  		/* cmplwi CR6, R11, 125 */
		/* 821AC674h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821AC674h case   19:*/		return 0x821AC678;
		  /* 821AC678h */ case   20:  		/* bc 12, CR6_EQ, 16 */
		/* 821AC678h case   20:*/		if ( regs.CR[6].eq ) { return 0x821AC688;  }
		/* 821AC678h case   20:*/		return 0x821AC67C;
		  /* 821AC67Ch */ case   21:  		/* cmplwi CR6, R11, 124 */
		/* 821AC67Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821AC67Ch case   21:*/		return 0x821AC680;
		  /* 821AC680h */ case   22:  		/* li R11, 0 */
		/* 821AC680h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AC680h case   22:*/		return 0x821AC684;
		  /* 821AC684h */ case   23:  		/* bc 4, CR6_EQ, 8 */
		/* 821AC684h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821AC68C;  }
		/* 821AC684h case   23:*/		return 0x821AC688;
	}
	return 0x821AC688;
} // Block from 821AC628h-821AC688h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AC688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC688);
		  /* 821AC688h */ case    0:  		/* li R11, 1 */
		/* 821AC688h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AC688h case    0:*/		return 0x821AC68C;
	}
	return 0x821AC68C;
} // Block from 821AC688h-821AC68Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC68C);
		  /* 821AC68Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AC68Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AC68Ch case    0:*/		return 0x821AC690;
		  /* 821AC690h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821AC690h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AC69C;  }
		/* 821AC690h case    1:*/		return 0x821AC694;
		  /* 821AC694h */ case    2:  		/* lwz R11, <#[R22]> */
		/* 821AC694h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821AC694h case    2:*/		return 0x821AC698;
		  /* 821AC698h */ case    3:  		/* b 52 */
		/* 821AC698h case    3:*/		return 0x821AC6CC;
		/* 821AC698h case    3:*/		return 0x821AC69C;
	}
	return 0x821AC69C;
} // Block from 821AC68Ch-821AC69Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC69C);
		  /* 821AC69Ch */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821AC69Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821AC69Ch case    0:*/		return 0x821AC6A0;
		  /* 821AC6A0h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AC6A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC6A0h case    1:*/		return 0x821AC6A4;
		  /* 821AC6A4h */ case    2:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AC6A4h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AC6A4h case    2:*/		return 0x821AC6A8;
		  /* 821AC6A8h */ case    3:  		/* cmplwi CR6, R11, 125 */
		/* 821AC6A8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821AC6A8h case    3:*/		return 0x821AC6AC;
		  /* 821AC6ACh */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821AC6ACh case    4:*/		if ( regs.CR[6].eq ) { return 0x821AC6BC;  }
		/* 821AC6ACh case    4:*/		return 0x821AC6B0;
		  /* 821AC6B0h */ case    5:  		/* cmplwi CR6, R11, 124 */
		/* 821AC6B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821AC6B0h case    5:*/		return 0x821AC6B4;
		  /* 821AC6B4h */ case    6:  		/* li R11, 0 */
		/* 821AC6B4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AC6B4h case    6:*/		return 0x821AC6B8;
		  /* 821AC6B8h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821AC6B8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AC6C0;  }
		/* 821AC6B8h case    7:*/		return 0x821AC6BC;
	}
	return 0x821AC6BC;
} // Block from 821AC69Ch-821AC6BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AC6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC6BC);
		  /* 821AC6BCh */ case    0:  		/* li R11, 1 */
		/* 821AC6BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AC6BCh case    0:*/		return 0x821AC6C0;
	}
	return 0x821AC6C0;
} // Block from 821AC6BCh-821AC6C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC6C0);
		  /* 821AC6C0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AC6C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AC6C0h case    0:*/		return 0x821AC6C4;
		  /* 821AC6C4h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 821AC6C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AC6E4;  }
		/* 821AC6C4h case    1:*/		return 0x821AC6C8;
		  /* 821AC6C8h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 821AC6C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AC6C8h case    2:*/		return 0x821AC6CC;
	}
	return 0x821AC6CC;
} // Block from 821AC6C0h-821AC6CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AC6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC6CC);
		  /* 821AC6CCh */ case    0:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 821AC6CCh case    0:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 821AC6CCh case    0:*/		return 0x821AC6D0;
		  /* 821AC6D0h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821AC6D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AC6E4;  }
		/* 821AC6D0h case    1:*/		return 0x821AC6D4;
		  /* 821AC6D4h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 821AC6D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC6D4h case    2:*/		return 0x821AC6D8;
		  /* 821AC6D8h */ case    3:  		/* li R10, 1 */
		/* 821AC6D8h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AC6D8h case    3:*/		return 0x821AC6DC;
		  /* 821AC6DCh */ case    4:  		/* rlwimi R11, R10, 1, 27, 31 */
		/* 821AC6DCh case    4:*/		cpu::op::rlwimi<0,1,27,31>(regs,&regs.R11,regs.R10);
		/* 821AC6DCh case    4:*/		return 0x821AC6E0;
		  /* 821AC6E0h */ case    5:  		/* stw R11, <#[R30]> */
		/* 821AC6E0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC6E0h case    5:*/		return 0x821AC6E4;
	}
	return 0x821AC6E4;
} // Block from 821AC6CCh-821AC6E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AC6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC6E4);
		  /* 821AC6E4h */ case    0:  		/* lwz R8, <#[R22]> */
		/* 821AC6E4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R22 + 0x00000000) );
		/* 821AC6E4h case    0:*/		return 0x821AC6E8;
		  /* 821AC6E8h */ case    1:  		/* rlwinm R9, R31, 25, 4, 6 */
		/* 821AC6E8h case    1:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R9,regs.R31);
		/* 821AC6E8h case    1:*/		return 0x821AC6EC;
		  /* 821AC6ECh */ case    2:  		/* add R11, R25, R19 */
		/* 821AC6ECh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R19);
		/* 821AC6ECh case    2:*/		return 0x821AC6F0;
		  /* 821AC6F0h */ case    3:  		/* rlwinm R10, R8, 7, 29, 31 */
		/* 821AC6F0h case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R10,regs.R8);
		/* 821AC6F0h case    3:*/		return 0x821AC6F4;
		  /* 821AC6F4h */ case    4:  		/* rlwinm R7, R8, 27, 24, 31 */
		/* 821AC6F4h case    4:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R8);
		/* 821AC6F4h case    4:*/		return 0x821AC6F8;
		  /* 821AC6F8h */ case    5:  		/* addi R10, R10, -1 */
		/* 821AC6F8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821AC6F8h case    5:*/		return 0x821AC6FC;
		  /* 821AC6FCh */ case    6:  		/* rlwinm R8, R8, 0, 7, 3 */
		/* 821AC6FCh case    6:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R8,regs.R8);
		/* 821AC6FCh case    6:*/		return 0x821AC700;
		  /* 821AC700h */ case    7:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821AC700h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821AC700h case    7:*/		return 0x821AC704;
		  /* 821AC704h */ case    8:  		/* or R6, R8, R9 */
		/* 821AC704h case    8:*/		cpu::op::or<0>(regs,&regs.R6,regs.R8,regs.R9);
		/* 821AC704h case    8:*/		return 0x821AC708;
		  /* 821AC708h */ case    9:  		/* srw R10, R7, R10 */
		/* 821AC708h case    9:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821AC708h case    9:*/		return 0x821AC70C;
		  /* 821AC70Ch */ case   10:  		/* rlwinm R8, R10, 0, 30, 31 */
		/* 821AC70Ch case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R10);
		/* 821AC70Ch case   10:*/		return 0x821AC710;
		  /* 821AC710h */ case   11:  		/* stw R6, <#[R22]> */
		/* 821AC710h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R22 + 0x00000000) );
		/* 821AC710h case   11:*/		return 0x821AC714;
		  /* 821AC714h */ case   12:  		/* cmplw CR6, R11, R31 */
		/* 821AC714h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AC714h case   12:*/		return 0x821AC718;
		  /* 821AC718h */ case   13:  		/* bc 4, CR6_LT, 64 */
		/* 821AC718h case   13:*/		if ( !regs.CR[6].lt ) { return 0x821AC758;  }
		/* 821AC718h case   13:*/		return 0x821AC71C;
		  /* 821AC71Ch */ case   14:  		/* subf R7, R11, R31 */
		/* 821AC71Ch case   14:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R31);
		/* 821AC71Ch case   14:*/		return 0x821AC720;
		  /* 821AC720h */ case   15:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 821AC720h case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 821AC720h case   15:*/		return 0x821AC724;
		  /* 821AC724h */ case   16:  		/* mtspr CTR, R7 */
		/* 821AC724h case   16:*/		regs.CTR = regs.R7;
		/* 821AC724h case   16:*/		return 0x821AC728;
		  /* 821AC728h */ case   17:  		/* slw R7, R24, R10 */
		/* 821AC728h case   17:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R24,regs.R10);
		/* 821AC728h case   17:*/		return 0x821AC72C;
		  /* 821AC72Ch */ case   18:  		/* lwz R6, <#[R22]> */
		/* 821AC72Ch case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R22 + 0x00000000) );
		/* 821AC72Ch case   18:*/		return 0x821AC730;
		  /* 821AC730h */ case   19:  		/* nor R7, R7, R7 */
		/* 821AC730h case   19:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 821AC730h case   19:*/		return 0x821AC734;
		  /* 821AC734h */ case   20:  		/* slw R5, R8, R10 */
		/* 821AC734h case   20:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R8,regs.R10);
		/* 821AC734h case   20:*/		return 0x821AC738;
		  /* 821AC738h */ case   21:  		/* rlwinm R7, R7, 5, 0, 26 */
		/* 821AC738h case   21:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R7,regs.R7);
		/* 821AC738h case   21:*/		return 0x821AC73C;
		  /* 821AC73Ch */ case   22:  		/* rlwinm R5, R5, 5, 0, 26 */
		/* 821AC73Ch case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R5,regs.R5);
		/* 821AC73Ch case   22:*/		return 0x821AC740;
		  /* 821AC740h */ case   23:  		/* and R7, R7, R6 */
		/* 821AC740h case   23:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821AC740h case   23:*/		return 0x821AC744;
		  /* 821AC744h */ case   24:  		/* addi R10, R10, 2 */
		/* 821AC744h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AC744h case   24:*/		return 0x821AC748;
		  /* 821AC748h */ case   25:  		/* or R7, R7, R5 */
		/* 821AC748h case   25:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 821AC748h case   25:*/		return 0x821AC74C;
		  /* 821AC74Ch */ case   26:  		/* rlwimi R7, R6, 0, 27, 18 */
		/* 821AC74Ch case   26:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R7,regs.R6);
		/* 821AC74Ch case   26:*/		return 0x821AC750;
		  /* 821AC750h */ case   27:  		/* stw R7, <#[R22]> */
		/* 821AC750h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R22 + 0x00000000) );
		/* 821AC750h case   27:*/		return 0x821AC754;
		  /* 821AC754h */ case   28:  		/* bc 16, CR0_LT, -44 */
		/* 821AC754h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AC728;  }
		/* 821AC754h case   28:*/		return 0x821AC758;
	}
	return 0x821AC758;
} // Block from 821AC6E4h-821AC758h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821AC758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC758);
		  /* 821AC758h */ case    0:  		/* lwz R10, <#[R28]> */
		/* 821AC758h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821AC758h case    0:*/		return 0x821AC75C;
		  /* 821AC75Ch */ case    1:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821AC75Ch case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821AC75Ch case    1:*/		return 0x821AC760;
		  /* 821AC760h */ case    2:  		/* li R8, 228 */
		/* 821AC760h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0xE4);
		/* 821AC760h case    2:*/		return 0x821AC764;
		  /* 821AC764h */ case    3:  		/* rlwinm R10, R10, 0, 7, 3 */
		/* 821AC764h case    3:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R10,regs.R10);
		/* 821AC764h case    3:*/		return 0x821AC768;
		  /* 821AC768h */ case    4:  		/* slw R11, R8, R11 */
		/* 821AC768h case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821AC768h case    4:*/		return 0x821AC76C;
		  /* 821AC76Ch */ case    5:  		/* or R10, R10, R9 */
		/* 821AC76Ch case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821AC76Ch case    5:*/		return 0x821AC770;
		  /* 821AC770h */ case    6:  		/* rlwinm R4, R11, 0, 24, 31 */
		/* 821AC770h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R4,regs.R11);
		/* 821AC770h case    6:*/		return 0x821AC774;
		  /* 821AC774h */ case    7:  		/* stw R10, <#[R28]> */
		/* 821AC774h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821AC774h case    7:*/		return 0x821AC778;
		  /* 821AC778h */ case    8:  		/* mr R3, R28 */
		/* 821AC778h case    8:*/		regs.R3 = regs.R28;
		/* 821AC778h case    8:*/		return 0x821AC77C;
		  /* 821AC77Ch */ case    9:  		/* bl -91532 */
		/* 821AC77Ch case    9:*/		regs.LR = 0x821AC780; return 0x821961F0;
		/* 821AC77Ch case    9:*/		return 0x821AC780;
		  /* 821AC780h */ case   10:  		/* mr R8, R28 */
		/* 821AC780h case   10:*/		regs.R8 = regs.R28;
		/* 821AC780h case   10:*/		return 0x821AC784;
		  /* 821AC784h */ case   11:  		/* mr R7, R22 */
		/* 821AC784h case   11:*/		regs.R7 = regs.R22;
		/* 821AC784h case   11:*/		return 0x821AC788;
		  /* 821AC788h */ case   12:  		/* mr R6, R30 */
		/* 821AC788h case   12:*/		regs.R6 = regs.R30;
		/* 821AC788h case   12:*/		return 0x821AC78C;
		  /* 821AC78Ch */ case   13:  		/* mr R5, R14 */
		/* 821AC78Ch case   13:*/		regs.R5 = regs.R14;
		/* 821AC78Ch case   13:*/		return 0x821AC790;
		  /* 821AC790h */ case   14:  		/* li R4, 0 */
		/* 821AC790h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AC790h case   14:*/		return 0x821AC794;
		  /* 821AC794h */ case   15:  		/* mr R3, R17 */
		/* 821AC794h case   15:*/		regs.R3 = regs.R17;
		/* 821AC794h case   15:*/		return 0x821AC798;
		  /* 821AC798h */ case   16:  		/* bl -58784 */
		/* 821AC798h case   16:*/		regs.LR = 0x821AC79C; return 0x8219E1F8;
		/* 821AC798h case   16:*/		return 0x821AC79C;
		  /* 821AC79Ch */ case   17:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AC79Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AC79Ch case   17:*/		return 0x821AC7A0;
		  /* 821AC7A0h */ case   18:  		/* mr R31, R3 */
		/* 821AC7A0h case   18:*/		regs.R31 = regs.R3;
		/* 821AC7A0h case   18:*/		return 0x821AC7A4;
		  /* 821AC7A4h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AC7A4h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AC7A4h case   19:*/		return 0x821AC7A8;
		  /* 821AC7A8h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 821AC7A8h case   20:*/		if ( regs.CR[0].eq ) { return 0x821AC7B8;  }
		/* 821AC7A8h case   20:*/		return 0x821AC7AC;
		  /* 821AC7ACh */ case   21:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AC7ACh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AC7ACh case   21:*/		return 0x821AC7B0;
		  /* 821AC7B0h */ case   22:  		/* ori R11, R11, 1 */
		/* 821AC7B0h case   22:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AC7B0h case   22:*/		return 0x821AC7B4;
		  /* 821AC7B4h */ case   23:  		/* stw R11, <#[R3 + 8]> */
		/* 821AC7B4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AC7B4h case   23:*/		return 0x821AC7B8;
	}
	return 0x821AC7B8;
} // Block from 821AC758h-821AC7B8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AC7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC7B8);
		  /* 821AC7B8h */ case    0:  		/* mr R3, R29 */
		/* 821AC7B8h case    0:*/		regs.R3 = regs.R29;
		/* 821AC7B8h case    0:*/		return 0x821AC7BC;
		  /* 821AC7BCh */ case    1:  		/* bl -91148 */
		/* 821AC7BCh case    1:*/		regs.LR = 0x821AC7C0; return 0x821963B0;
		/* 821AC7BCh case    1:*/		return 0x821AC7C0;
		  /* 821AC7C0h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821AC7C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AC7C0h case    2:*/		return 0x821AC7C4;
		  /* 821AC7C4h */ case    3:  		/* mr R6, R21 */
		/* 821AC7C4h case    3:*/		regs.R6 = regs.R21;
		/* 821AC7C4h case    3:*/		return 0x821AC7C8;
		  /* 821AC7C8h */ case    4:  		/* oris R11, R11, 256 */
		/* 821AC7C8h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AC7C8h case    4:*/		return 0x821AC7CC;
		  /* 821AC7CCh */ case    5:  		/* mr R4, R18 */
		/* 821AC7CCh case    5:*/		regs.R4 = regs.R18;
		/* 821AC7CCh case    5:*/		return 0x821AC7D0;
		  /* 821AC7D0h */ case    6:  		/* mr R3, R17 */
		/* 821AC7D0h case    6:*/		regs.R3 = regs.R17;
		/* 821AC7D0h case    6:*/		return 0x821AC7D4;
		  /* 821AC7D4h */ case    7:  		/* stw R11, <#[R29 + 8]> */
		/* 821AC7D4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AC7D4h case    7:*/		return 0x821AC7D8;
		  /* 821AC7D8h */ case    8:  		/* b 2276 */
		/* 821AC7D8h case    8:*/		return 0x821AD0BC;
		/* 821AC7D8h case    8:*/		return 0x821AC7DC;
	}
	return 0x821AC7DC;
} // Block from 821AC7B8h-821AC7DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AC7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC7DC);
		  /* 821AC7DCh */ case    0:  		/* lwz R29, <#[R25 + 44]> */
		/* 821AC7DCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AC7DCh case    0:*/		return 0x821AC7E0;
		  /* 821AC7E0h */ case    1:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821AC7E0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821AC7E0h case    1:*/		return 0x821AC7E4;
		  /* 821AC7E4h */ case    2:  		/* lwz R26, <#[R25 + 48]> */
		/* 821AC7E4h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000030) );
		/* 821AC7E4h case    2:*/		return 0x821AC7E8;
		  /* 821AC7E8h */ case    3:  		/* li R28, 0 */
		/* 821AC7E8h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821AC7E8h case    3:*/		return 0x821AC7EC;
		  /* 821AC7ECh */ case    4:  		/* bc 12, CR0_EQ, 228 */
		/* 821AC7ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x821AC8D0;  }
		/* 821AC7ECh case    4:*/		return 0x821AC7F0;
		  /* 821AC7F0h */ case    5:  		/* mr R4, R26 */
		/* 821AC7F0h case    5:*/		regs.R4 = regs.R26;
		/* 821AC7F0h case    5:*/		return 0x821AC7F4;
		  /* 821AC7F4h */ case    6:  		/* mr R3, R29 */
		/* 821AC7F4h case    6:*/		regs.R3 = regs.R29;
		/* 821AC7F4h case    6:*/		return 0x821AC7F8;
		  /* 821AC7F8h */ case    7:  		/* bl -296304 */
		/* 821AC7F8h case    7:*/		regs.LR = 0x821AC7FC; return 0x82164288;
		/* 821AC7F8h case    7:*/		return 0x821AC7FC;
		  /* 821AC7FCh */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC7FCh case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC7FCh case    8:*/		return 0x821AC800;
		  /* 821AC800h */ case    9:  		/* bc 12, CR0_EQ, 208 */
		/* 821AC800h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AC8D0;  }
		/* 821AC800h case    9:*/		return 0x821AC804;
		  /* 821AC804h */ case   10:  		/* lwz R31, <#[R29 + 12]> */
		/* 821AC804h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AC804h case   10:*/		return 0x821AC808;
		  /* 821AC808h */ case   11:  		/* mr R3, R31 */
		/* 821AC808h case   11:*/		regs.R3 = regs.R31;
		/* 821AC808h case   11:*/		return 0x821AC80C;
		  /* 821AC80Ch */ case   12:  		/* bl -91828 */
		/* 821AC80Ch case   12:*/		regs.LR = 0x821AC810; return 0x82196158;
		/* 821AC80Ch case   12:*/		return 0x821AC810;
		  /* 821AC810h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC810h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC810h case   13:*/		return 0x821AC814;
		  /* 821AC814h */ case   14:  		/* bc 12, CR0_EQ, 188 */
		/* 821AC814h case   14:*/		if ( regs.CR[0].eq ) { return 0x821AC8D0;  }
		/* 821AC814h case   14:*/		return 0x821AC818;
		  /* 821AC818h */ case   15:  		/* lwz R10, <#[R31 + 4]> */
		/* 821AC818h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821AC818h case   15:*/		return 0x821AC81C;
		  /* 821AC81Ch */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821AC81Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AC81Ch case   16:*/		return 0x821AC820;
		  /* 821AC820h */ case   17:  		/* bc 12, CR6_EQ, 40 */
		/* 821AC820h case   17:*/		if ( regs.CR[6].eq ) { return 0x821AC848;  }
		/* 821AC820h case   17:*/		return 0x821AC824;
		  /* 821AC824h */ case   18:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AC824h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AC824h case   18:*/		return 0x821AC828;
		  /* 821AC828h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821AC828h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AC828h case   19:*/		return 0x821AC82C;
		  /* 821AC82Ch */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 821AC82Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821AC838;  }
		/* 821AC82Ch case   20:*/		return 0x821AC830;
		  /* 821AC830h */ case   21:  		/* cmplw CR6, R11, R25 */
		/* 821AC830h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AC830h case   21:*/		return 0x821AC834;
		  /* 821AC834h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 821AC834h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821AC840;  }
		/* 821AC834h case   22:*/		return 0x821AC838;
	}
	return 0x821AC838;
} // Block from 821AC7DCh-821AC838h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821AC838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC838);
		  /* 821AC838h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AC838h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AC838h case    0:*/		return 0x821AC83C;
		  /* 821AC83Ch */ case    1:  		/* b -32 */
		/* 821AC83Ch case    1:*/		return 0x821AC81C;
		/* 821AC83Ch case    1:*/		return 0x821AC840;
	}
	return 0x821AC840;
} // Block from 821AC838h-821AC840h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AC840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC840);
		  /* 821AC840h */ case    0:  		/* li R11, 1 */
		/* 821AC840h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AC840h case    0:*/		return 0x821AC844;
		  /* 821AC844h */ case    1:  		/* b 8 */
		/* 821AC844h case    1:*/		return 0x821AC84C;
		/* 821AC844h case    1:*/		return 0x821AC848;
	}
	return 0x821AC848;
} // Block from 821AC840h-821AC848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AC848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC848);
		  /* 821AC848h */ case    0:  		/* mr R11, R28 */
		/* 821AC848h case    0:*/		regs.R11 = regs.R28;
		/* 821AC848h case    0:*/		return 0x821AC84C;
	}
	return 0x821AC84C;
} // Block from 821AC848h-821AC84Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AC84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC84C);
		  /* 821AC84Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AC84Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AC84Ch case    0:*/		return 0x821AC850;
		  /* 821AC850h */ case    1:  		/* bc 4, CR0_EQ, 128 */
		/* 821AC850h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AC8D0;  }
		/* 821AC850h case    1:*/		return 0x821AC854;
		  /* 821AC854h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821AC854h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AC854h case    2:*/		return 0x821AC858;
		  /* 821AC858h */ case    3:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821AC858h case    3:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821AC858h case    3:*/		return 0x821AC85C;
		  /* 821AC85Ch */ case    4:  		/* bc 4, CR0_EQ, 116 */
		/* 821AC85Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821AC8D0;  }
		/* 821AC85Ch case    4:*/		return 0x821AC860;
		  /* 821AC860h */ case    5:  		/* lwz R11, <#[R25 + 4]> */
		/* 821AC860h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821AC860h case    5:*/		return 0x821AC864;
		  /* 821AC864h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821AC864h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AC864h case    6:*/		return 0x821AC868;
		  /* 821AC868h */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 821AC868h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AC898;  }
		/* 821AC868h case    7:*/		return 0x821AC86C;
		  /* 821AC86Ch */ case    8:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AC86Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AC86Ch case    8:*/		return 0x821AC870;
		  /* 821AC870h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821AC870h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AC870h case    9:*/		return 0x821AC874;
		  /* 821AC874h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 821AC874h case   10:*/		if ( regs.CR[6].eq ) { return 0x821AC890;  }
		/* 821AC874h case   10:*/		return 0x821AC878;
		  /* 821AC878h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821AC878h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC878h case   11:*/		return 0x821AC87C;
		  /* 821AC87Ch */ case   12:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AC87Ch case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AC87Ch case   12:*/		return 0x821AC880;
		  /* 821AC880h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821AC880h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AC890;  }
		/* 821AC880h case   13:*/		return 0x821AC884;
		  /* 821AC884h */ case   14:  		/* addi R9, R10, -1 */
		/* 821AC884h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821AC884h case   14:*/		return 0x821AC888;
		  /* 821AC888h */ case   15:  		/* rlwimi R9, R10, 0, 0, 26 */
		/* 821AC888h case   15:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R9,regs.R10);
		/* 821AC888h case   15:*/		return 0x821AC88C;
		  /* 821AC88Ch */ case   16:  		/* stw R9, <#[R11]> */
		/* 821AC88Ch case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AC88Ch case   16:*/		return 0x821AC890;
	}
	return 0x821AC890;
} // Block from 821AC84Ch-821AC890h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AC890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC890);
		  /* 821AC890h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AC890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC890h case    0:*/		return 0x821AC894;
		  /* 821AC894h */ case    1:  		/* b -48 */
		/* 821AC894h case    1:*/		return 0x821AC864;
		/* 821AC894h case    1:*/		return 0x821AC898;
	}
	return 0x821AC898;
} // Block from 821AC890h-821AC898h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AC898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC898);
		  /* 821AC898h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AC898h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AC898h case    0:*/		return 0x821AC89C;
		  /* 821AC89Ch */ case    1:  		/* li R10, 1 */
		/* 821AC89Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AC89Ch case    1:*/		return 0x821AC8A0;
		  /* 821AC8A0h */ case    2:  		/* rlwimi R11, R10, 0, 27, 31 */
		/* 821AC8A0h case    2:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821AC8A0h case    2:*/		return 0x821AC8A4;
		  /* 821AC8A4h */ case    3:  		/* stw R11, <#[R29]> */
		/* 821AC8A4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AC8A4h case    3:*/		return 0x821AC8A8;
		  /* 821AC8A8h */ case    4:  		/* lwz R10, <#[R26]> */
		/* 821AC8A8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821AC8A8h case    4:*/		return 0x821AC8AC;
		  /* 821AC8ACh */ case    5:  		/* rlwimi R10, R11, 0, 27, 31 */
		/* 821AC8ACh case    5:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821AC8ACh case    5:*/		return 0x821AC8B0;
		  /* 821AC8B0h */ case    6:  		/* stw R10, <#[R26]> */
		/* 821AC8B0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821AC8B0h case    6:*/		return 0x821AC8B4;
		  /* 821AC8B4h */ case    7:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AC8B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AC8B4h case    7:*/		return 0x821AC8B8;
		  /* 821AC8B8h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AC8B8h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AC8B8h case    8:*/		return 0x821AC8BC;
		  /* 821AC8BCh */ case    9:  		/* stw R11, <#[R25 + 8]> */
		/* 821AC8BCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AC8BCh case    9:*/		return 0x821AC8C0;
		  /* 821AC8C0h */ case   10:  		/* lwz R11, <#[R29 + 12]> */
		/* 821AC8C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AC8C0h case   10:*/		return 0x821AC8C4;
		  /* 821AC8C4h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AC8C4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC8C4h case   11:*/		return 0x821AC8C8;
		  /* 821AC8C8h */ case   12:  		/* ori R10, R10, 1 */
		/* 821AC8C8h case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AC8C8h case   12:*/		return 0x821AC8CC;
		  /* 821AC8CCh */ case   13:  		/* stw R10, <#[R11 + 8]> */
		/* 821AC8CCh case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC8CCh case   13:*/		return 0x821AC8D0;
	}
	return 0x821AC8D0;
} // Block from 821AC898h-821AC8D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AC8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC8D0);
		  /* 821AC8D0h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AC8D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AC8D0h case    0:*/		return 0x821AC8D4;
		  /* 821AC8D4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AC8D4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AC8D4h case    1:*/		return 0x821AC8D8;
		  /* 821AC8D8h */ case    2:  		/* bc 4, CR0_EQ, 1016 */
		/* 821AC8D8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821ACCD0;  }
		/* 821AC8D8h case    2:*/		return 0x821AC8DC;
		  /* 821AC8DCh */ case    3:  		/* mr R4, R26 */
		/* 821AC8DCh case    3:*/		regs.R4 = regs.R26;
		/* 821AC8DCh case    3:*/		return 0x821AC8E0;
		  /* 821AC8E0h */ case    4:  		/* mr R3, R29 */
		/* 821AC8E0h case    4:*/		regs.R3 = regs.R29;
		/* 821AC8E0h case    4:*/		return 0x821AC8E4;
		  /* 821AC8E4h */ case    5:  		/* bl -296540 */
		/* 821AC8E4h case    5:*/		regs.LR = 0x821AC8E8; return 0x82164288;
		/* 821AC8E4h case    5:*/		return 0x821AC8E8;
		  /* 821AC8E8h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC8E8h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC8E8h case    6:*/		return 0x821AC8EC;
		  /* 821AC8ECh */ case    7:  		/* bc 12, CR0_EQ, 996 */
		/* 821AC8ECh case    7:*/		if ( regs.CR[0].eq ) { return 0x821ACCD0;  }
		/* 821AC8ECh case    7:*/		return 0x821AC8F0;
		  /* 821AC8F0h */ case    8:  		/* li R6, 0 */
		/* 821AC8F0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AC8F0h case    8:*/		return 0x821AC8F4;
		  /* 821AC8F4h */ case    9:  		/* mr R5, R29 */
		/* 821AC8F4h case    9:*/		regs.R5 = regs.R29;
		/* 821AC8F4h case    9:*/		return 0x821AC8F8;
		  /* 821AC8F8h */ case   10:  		/* mr R4, R25 */
		/* 821AC8F8h case   10:*/		regs.R4 = regs.R25;
		/* 821AC8F8h case   10:*/		return 0x821AC8FC;
		  /* 821AC8FCh */ case   11:  		/* mr R3, R20 */
		/* 821AC8FCh case   11:*/		regs.R3 = regs.R20;
		/* 821AC8FCh case   11:*/		return 0x821AC900;
		  /* 821AC900h */ case   12:  		/* bl -29456 */
		/* 821AC900h case   12:*/		regs.LR = 0x821AC904; return 0x821A55F0;
		/* 821AC900h case   12:*/		return 0x821AC904;
		  /* 821AC904h */ case   13:  		/* mr R3, R25 */
		/* 821AC904h case   13:*/		regs.R3 = regs.R25;
		/* 821AC904h case   13:*/		return 0x821AC908;
		  /* 821AC908h */ case   14:  		/* bl -294792 */
		/* 821AC908h case   14:*/		regs.LR = 0x821AC90C; return 0x82164980;
		/* 821AC908h case   14:*/		return 0x821AC90C;
		  /* 821AC90Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AC90Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AC90Ch case   15:*/		return 0x821AC910;
		  /* 821AC910h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 821AC910h case   16:*/		if ( regs.CR[0].eq ) { return 0x821AC91C;  }
		/* 821AC910h case   16:*/		return 0x821AC914;
		  /* 821AC914h */ case   17:  		/* lwz R3, <#[R29 + 12]> */
		/* 821AC914h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AC914h case   17:*/		return 0x821AC918;
		  /* 821AC918h */ case   18:  		/* b -7984 */
		/* 821AC918h case   18:*/		return 0x821AA9E8;
		/* 821AC918h case   18:*/		return 0x821AC91C;
	}
	return 0x821AC91C;
} // Block from 821AC8D0h-821AC91Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AC91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC91C);
		  /* 821AC91Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AC91Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AC91Ch case    0:*/		return 0x821AC920;
		  /* 821AC920h */ case    1:  		/* li R24, 0 */
		/* 821AC920h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821AC920h case    1:*/		return 0x821AC924;
		  /* 821AC924h */ case    2:  		/* lwz R23, <#[R1 + 1244]> */
		/* 821AC924h case    2:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AC924h case    2:*/		return 0x821AC928;
		  /* 821AC928h */ case    3:  		/* li R25, 0 */
		/* 821AC928h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821AC928h case    3:*/		return 0x821AC92C;
		  /* 821AC92Ch */ case    4:  		/* rlwinm. R27, R11, 7, 29, 31 */
		/* 821AC92Ch case    4:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R27,regs.R11);
		/* 821AC92Ch case    4:*/		return 0x821AC930;
		  /* 821AC930h */ case    5:  		/* li R28, 0 */
		/* 821AC930h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821AC930h case    5:*/		return 0x821AC934;
		  /* 821AC934h */ case    6:  		/* bc 12, CR0_EQ, 128 */
		/* 821AC934h case    6:*/		if ( regs.CR[0].eq ) { return 0x821AC9B4;  }
		/* 821AC934h case    6:*/		return 0x821AC938;
		  /* 821AC938h */ case    7:  		/* li R31, 0 */
		/* 821AC938h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AC938h case    7:*/		return 0x821AC93C;
		  /* 821AC93Ch */ case    8:  		/* addi R11, R1, 272 */
		/* 821AC93Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x110);
		/* 821AC93Ch case    8:*/		return 0x821AC940;
		  /* 821AC940h */ case    9:  		/* addi R7, R1, 384 */
		/* 821AC940h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x180);
		/* 821AC940h case    9:*/		return 0x821AC944;
		  /* 821AC944h */ case   10:  		/* add R30, R31, R11 */
		/* 821AC944h case   10:*/		cpu::op::add<0>(regs,&regs.R30,regs.R31,regs.R11);
		/* 821AC944h case   10:*/		return 0x821AC948;
		  /* 821AC948h */ case   11:  		/* addi R11, R1, 336 */
		/* 821AC948h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x150);
		/* 821AC948h case   11:*/		return 0x821AC94C;
		  /* 821AC94Ch */ case   12:  		/* li R10, 0 */
		/* 821AC94Ch case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AC94Ch case   12:*/		return 0x821AC950;
		  /* 821AC950h */ case   13:  		/* mr R9, R23 */
		/* 821AC950h case   13:*/		regs.R9 = regs.R23;
		/* 821AC950h case   13:*/		return 0x821AC954;
		  /* 821AC954h */ case   14:  		/* li R8, 0 */
		/* 821AC954h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821AC954h case   14:*/		return 0x821AC958;
		  /* 821AC958h */ case   15:  		/* add R7, R31, R7 */
		/* 821AC958h case   15:*/		cpu::op::add<0>(regs,&regs.R7,regs.R31,regs.R7);
		/* 821AC958h case   15:*/		return 0x821AC95C;
		  /* 821AC95Ch */ case   16:  		/* add R6, R31, R11 */
		/* 821AC95Ch case   16:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R11);
		/* 821AC95Ch case   16:*/		return 0x821AC960;
		  /* 821AC960h */ case   17:  		/* mr R5, R30 */
		/* 821AC960h case   17:*/		regs.R5 = regs.R30;
		/* 821AC960h case   17:*/		return 0x821AC964;
		  /* 821AC964h */ case   18:  		/* mr R4, R28 */
		/* 821AC964h case   18:*/		regs.R4 = regs.R28;
		/* 821AC964h case   18:*/		return 0x821AC968;
		  /* 821AC968h */ case   19:  		/* mr R3, R29 */
		/* 821AC968h case   19:*/		regs.R3 = regs.R29;
		/* 821AC968h case   19:*/		return 0x821AC96C;
		  /* 821AC96Ch */ case   20:  		/* bl 486244 */
		/* 821AC96Ch case   20:*/		regs.LR = 0x821AC970; return 0x822234D0;
		/* 821AC96Ch case   20:*/		return 0x821AC970;
		  /* 821AC970h */ case   21:  		/* lwz R11, <#[R30]> */
		/* 821AC970h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AC970h case   21:*/		return 0x821AC974;
		  /* 821AC974h */ case   22:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AC974h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AC974h case   22:*/		return 0x821AC978;
		  /* 821AC978h */ case   23:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AC978h case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AC978h case   23:*/		return 0x821AC97C;
		  /* 821AC97Ch */ case   24:  		/* cmplwi CR6, R10, 16000 */
		/* 821AC97Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821AC97Ch case   24:*/		return 0x821AC980;
		  /* 821AC980h */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 821AC980h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821AC988;  }
		/* 821AC980h case   25:*/		return 0x821AC984;
		  /* 821AC984h */ case   26:  		/* addi R24, R24, 1 */
		/* 821AC984h case   26:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821AC984h case   26:*/		return 0x821AC988;
	}
	return 0x821AC988;
} // Block from 821AC91Ch-821AC988h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821AC988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC988);
		  /* 821AC988h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821AC988h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AC988h case    0:*/		return 0x821AC98C;
		  /* 821AC98Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821AC98Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AC998;  }
		/* 821AC98Ch case    1:*/		return 0x821AC990;
		  /* 821AC990h */ case    2:  		/* mr R25, R11 */
		/* 821AC990h case    2:*/		regs.R25 = regs.R11;
		/* 821AC990h case    2:*/		return 0x821AC994;
		  /* 821AC994h */ case    3:  		/* b 16 */
		/* 821AC994h case    3:*/		return 0x821AC9A4;
		/* 821AC994h case    3:*/		return 0x821AC998;
	}
	return 0x821AC998;
} // Block from 821AC988h-821AC998h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC998);
		  /* 821AC998h */ case    0:  		/* cmplw CR6, R25, R11 */
		/* 821AC998h case    0:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821AC998h case    0:*/		return 0x821AC99C;
		  /* 821AC99Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821AC99Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821AC9A4;  }
		/* 821AC99Ch case    1:*/		return 0x821AC9A0;
		  /* 821AC9A0h */ case    2:  		/* li R25, 1 */
		/* 821AC9A0h case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821AC9A0h case    2:*/		return 0x821AC9A4;
	}
	return 0x821AC9A4;
} // Block from 821AC998h-821AC9A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AC9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC9A4);
		  /* 821AC9A4h */ case    0:  		/* addi R28, R28, 1 */
		/* 821AC9A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821AC9A4h case    0:*/		return 0x821AC9A8;
		  /* 821AC9A8h */ case    1:  		/* addi R31, R31, 4 */
		/* 821AC9A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821AC9A8h case    1:*/		return 0x821AC9AC;
		  /* 821AC9ACh */ case    2:  		/* cmplw CR6, R28, R27 */
		/* 821AC9ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R27);
		/* 821AC9ACh case    2:*/		return 0x821AC9B0;
		  /* 821AC9B0h */ case    3:  		/* bc 12, CR6_LT, -116 */
		/* 821AC9B0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AC93C;  }
		/* 821AC9B0h case    3:*/		return 0x821AC9B4;
	}
	return 0x821AC9B4;
} // Block from 821AC9A4h-821AC9B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AC9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC9B4);
		  /* 821AC9B4h */ case    0:  		/* cmplw CR6, R24, R27 */
		/* 821AC9B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R27);
		/* 821AC9B4h case    0:*/		return 0x821AC9B8;
		  /* 821AC9B8h */ case    1:  		/* bc 4, CR6_EQ, 304 */
		/* 821AC9B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ACAE8;  }
		/* 821AC9B8h case    1:*/		return 0x821AC9BC;
		  /* 821AC9BCh */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821AC9BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821AC9BCh case    2:*/		return 0x821AC9C0;
		  /* 821AC9C0h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 821AC9C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AC9FC;  }
		/* 821AC9C0h case    3:*/		return 0x821AC9C4;
		  /* 821AC9C4h */ case    4:  		/* li R31, 0 */
		/* 821AC9C4h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AC9C4h case    4:*/		return 0x821AC9C8;
		  /* 821AC9C8h */ case    5:  		/* mr R30, R27 */
		/* 821AC9C8h case    5:*/		regs.R30 = regs.R27;
		/* 821AC9C8h case    5:*/		return 0x821AC9CC;
		  /* 821AC9CCh */ case    6:  		/* addi R11, R1, 384 */
		/* 821AC9CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821AC9CCh case    6:*/		return 0x821AC9D0;
		  /* 821AC9D0h */ case    7:  		/* addi R10, R1, 336 */
		/* 821AC9D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x150);
		/* 821AC9D0h case    7:*/		return 0x821AC9D4;
		  /* 821AC9D4h */ case    8:  		/* addi R9, R1, 272 */
		/* 821AC9D4h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x110);
		/* 821AC9D4h case    8:*/		return 0x821AC9D8;
		  /* 821AC9D8h */ case    9:  		/* lwzx R5, <#[R31 + R11]> */
		/* 821AC9D8h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821AC9D8h case    9:*/		return 0x821AC9DC;
		  /* 821AC9DCh */ case   10:  		/* lwzx R4, <#[R31 + R10]> */
		/* 821AC9DCh case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 821AC9DCh case   10:*/		return 0x821AC9E0;
		  /* 821AC9E0h */ case   11:  		/* lwzx R3, <#[R31 + R9]> */
		/* 821AC9E0h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 821AC9E0h case   11:*/		return 0x821AC9E4;
		  /* 821AC9E4h */ case   12:  		/* bl 478372 */
		/* 821AC9E4h case   12:*/		regs.LR = 0x821AC9E8; return 0x82221688;
		/* 821AC9E4h case   12:*/		return 0x821AC9E8;
		  /* 821AC9E8h */ case   13:  		/* addi R11, R1, 1008 */
		/* 821AC9E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3F0);
		/* 821AC9E8h case   13:*/		return 0x821AC9EC;
		  /* 821AC9ECh */ case   14:  		/* addic. R30, R30, -1 */
		/* 821AC9ECh case   14:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821AC9ECh case   14:*/		return 0x821AC9F0;
		  /* 821AC9F0h */ case   15:  		/* stfsx FR1, <#[R31 + R11]> */
		/* 821AC9F0h case   15:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821AC9F0h case   15:*/		return 0x821AC9F4;
		  /* 821AC9F4h */ case   16:  		/* addi R31, R31, 4 */
		/* 821AC9F4h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821AC9F4h case   16:*/		return 0x821AC9F8;
		  /* 821AC9F8h */ case   17:  		/* bc 4, CR0_EQ, -44 */
		/* 821AC9F8h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821AC9CC;  }
		/* 821AC9F8h case   17:*/		return 0x821AC9FC;
	}
	return 0x821AC9FC;
} // Block from 821AC9B4h-821AC9FCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821AC9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AC9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AC9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AC9FC);
		  /* 821AC9FCh */ case    0:  		/* addi R11, R1, 120 */
		/* 821AC9FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821AC9FCh case    0:*/		return 0x821ACA00;
		  /* 821ACA00h */ case    1:  		/* lwz R25, <#[R1 + 1236]> */
		/* 821ACA00h case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000004D4) );
		/* 821ACA00h case    1:*/		return 0x821ACA04;
		  /* 821ACA04h */ case    2:  		/* li R10, 0 */
		/* 821ACA04h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821ACA04h case    2:*/		return 0x821ACA08;
		  /* 821ACA08h */ case    3:  		/* addi R5, R1, 1008 */
		/* 821ACA08h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3F0);
		/* 821ACA08h case    3:*/		return 0x821ACA0C;
		  /* 821ACA0Ch */ case    4:  		/* mr R4, R27 */
		/* 821ACA0Ch case    4:*/		regs.R4 = regs.R27;
		/* 821ACA0Ch case    4:*/		return 0x821ACA10;
		  /* 821ACA10h */ case    5:  		/* mr R3, R25 */
		/* 821ACA10h case    5:*/		regs.R3 = regs.R25;
		/* 821ACA10h case    5:*/		return 0x821ACA14;
		  /* 821ACA14h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821ACA14h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACA14h case    6:*/		return 0x821ACA18;
		  /* 821ACA18h */ case    7:  		/* lwz R6, <#[R1 + 120]> */
		/* 821ACA18h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000078) );
		/* 821ACA18h case    7:*/		return 0x821ACA1C;
		  /* 821ACA1Ch */ case    8:  		/* bl 501276 */
		/* 821ACA1Ch case    8:*/		regs.LR = 0x821ACA20; return 0x82227038;
		/* 821ACA1Ch case    8:*/		return 0x821ACA20;
		  /* 821ACA20h */ case    9:  		/* lwz R4, <#[R29 + 12]> */
		/* 821ACA20h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821ACA20h case    9:*/		return 0x821ACA24;
		  /* 821ACA24h */ case   10:  		/* mr R31, R3 */
		/* 821ACA24h case   10:*/		regs.R31 = regs.R3;
		/* 821ACA24h case   10:*/		return 0x821ACA28;
		  /* 821ACA28h */ case   11:  		/* cmplw CR6, R3, R4 */
		/* 821ACA28h case   11:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 821ACA28h case   11:*/		return 0x821ACA2C;
		  /* 821ACA2Ch */ case   12:  		/* bc 12, CR6_EQ, 192 */
		/* 821ACA2Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821ACAEC;  }
		/* 821ACA2Ch case   12:*/		return 0x821ACA30;
		  /* 821ACA30h */ case   13:  		/* mr R3, R25 */
		/* 821ACA30h case   13:*/		regs.R3 = regs.R25;
		/* 821ACA30h case   13:*/		return 0x821ACA34;
		  /* 821ACA34h */ case   14:  		/* bl -49020 */
		/* 821ACA34h case   14:*/		regs.LR = 0x821ACA38; return 0x821A0AB8;
		/* 821ACA34h case   14:*/		return 0x821ACA38;
		  /* 821ACA38h */ case   15:  		/* lwz R11, <#[R29 + 12]> */
		/* 821ACA38h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821ACA38h case   15:*/		return 0x821ACA3C;
		  /* 821ACA3Ch */ case   16:  		/* addi R11, R11, 4 */
		/* 821ACA3Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821ACA3Ch case   16:*/		return 0x821ACA40;
		  /* 821ACA40h */ case   17:  		/* lwz R10, <#[R11]> */
		/* 821ACA40h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACA40h case   17:*/		return 0x821ACA44;
		  /* 821ACA44h */ case   18:  		/* b 12 */
		/* 821ACA44h case   18:*/		return 0x821ACA50;
		/* 821ACA44h case   18:*/		return 0x821ACA48;
		  /* 821ACA48h */ case   19:  		/* addi R11, R10, 8 */
		/* 821ACA48h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821ACA48h case   19:*/		return 0x821ACA4C;
		  /* 821ACA4Ch */ case   20:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ACA4Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ACA4Ch case   20:*/		return 0x821ACA50;
	}
	return 0x821ACA50;
} // Block from 821AC9FCh-821ACA50h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821ACA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACA50);
		  /* 821ACA50h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821ACA50h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821ACA50h case    0:*/		return 0x821ACA54;
		  /* 821ACA54h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ACA54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ACA48;  }
		/* 821ACA54h case    1:*/		return 0x821ACA58;
		  /* 821ACA58h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821ACA58h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821ACA58h case    2:*/		return 0x821ACA5C;
		  /* 821ACA5Ch */ case    3:  		/* li R27, 57 */
		/* 821ACA5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x39);
		/* 821ACA5Ch case    3:*/		return 0x821ACA60;
		  /* 821ACA60h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821ACA60h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACA60h case    4:*/		return 0x821ACA64;
		  /* 821ACA64h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 821ACA64h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821ACA64h case    5:*/		return 0x821ACA68;
		  /* 821ACA68h */ case    6:  		/* stw R11, <#[R29 + 8]> */
		/* 821ACA68h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821ACA68h case    6:*/		return 0x821ACA6C;
		  /* 821ACA6Ch */ case    7:  		/* stw R29, <#[R31 + 4]> */
		/* 821ACA6Ch case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821ACA6Ch case    7:*/		return 0x821ACA70;
		  /* 821ACA70h */ case    8:  		/* stw R31, <#[R29 + 12]> */
		/* 821ACA70h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821ACA70h case    8:*/		return 0x821ACA74;
		  /* 821ACA74h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821ACA74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821ACA74h case    9:*/		return 0x821ACA78;
		  /* 821ACA78h */ case   10:  		/* rlwimi R11, R27, 7, 19, 31 */
		/* 821ACA78h case   10:*/		cpu::op::rlwimi<0,7,19,31>(regs,&regs.R11,regs.R27);
		/* 821ACA78h case   10:*/		return 0x821ACA7C;
		  /* 821ACA7Ch */ case   11:  		/* stw R11, <#[R29]> */
		/* 821ACA7Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821ACA7Ch case   11:*/		return 0x821ACA80;
		  /* 821ACA80h */ case   12:  		/* lwz R11, <#[R26 + 12]> */
		/* 821ACA80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821ACA80h case   12:*/		return 0x821ACA84;
		  /* 821ACA84h */ case   13:  		/* addi R11, R11, 4 */
		/* 821ACA84h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821ACA84h case   13:*/		return 0x821ACA88;
		  /* 821ACA88h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 821ACA88h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACA88h case   14:*/		return 0x821ACA8C;
		  /* 821ACA8Ch */ case   15:  		/* b 12 */
		/* 821ACA8Ch case   15:*/		return 0x821ACA98;
		/* 821ACA8Ch case   15:*/		return 0x821ACA90;
		  /* 821ACA90h */ case   16:  		/* addi R11, R10, 8 */
		/* 821ACA90h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821ACA90h case   16:*/		return 0x821ACA94;
		  /* 821ACA94h */ case   17:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ACA94h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ACA94h case   17:*/		return 0x821ACA98;
	}
	return 0x821ACA98;
} // Block from 821ACA50h-821ACA98h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821ACA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACA98);
		  /* 821ACA98h */ case    0:  		/* cmplw CR6, R10, R26 */
		/* 821ACA98h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821ACA98h case    0:*/		return 0x821ACA9C;
		  /* 821ACA9Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ACA9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ACA90;  }
		/* 821ACA9Ch case    1:*/		return 0x821ACAA0;
		  /* 821ACAA0h */ case    2:  		/* lwz R10, <#[R26 + 8]> */
		/* 821ACAA0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821ACAA0h case    2:*/		return 0x821ACAA4;
		  /* 821ACAA4h */ case    3:  		/* mr R3, R31 */
		/* 821ACAA4h case    3:*/		regs.R3 = regs.R31;
		/* 821ACAA4h case    3:*/		return 0x821ACAA8;
		  /* 821ACAA8h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821ACAA8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACAA8h case    4:*/		return 0x821ACAAC;
		  /* 821ACAACh */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 821ACAACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821ACAACh case    5:*/		return 0x821ACAB0;
		  /* 821ACAB0h */ case    6:  		/* stw R11, <#[R26 + 8]> */
		/* 821ACAB0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821ACAB0h case    6:*/		return 0x821ACAB4;
		  /* 821ACAB4h */ case    7:  		/* stw R26, <#[R31 + 4]> */
		/* 821ACAB4h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000004) );
		/* 821ACAB4h case    7:*/		return 0x821ACAB8;
		  /* 821ACAB8h */ case    8:  		/* stw R31, <#[R26 + 12]> */
		/* 821ACAB8h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x0000000C) );
		/* 821ACAB8h case    8:*/		return 0x821ACABC;
		  /* 821ACABCh */ case    9:  		/* lwz R11, <#[R26]> */
		/* 821ACABCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821ACABCh case    9:*/		return 0x821ACAC0;
		  /* 821ACAC0h */ case   10:  		/* rlwimi R11, R27, 7, 19, 31 */
		/* 821ACAC0h case   10:*/		cpu::op::rlwimi<0,7,19,31>(regs,&regs.R11,regs.R27);
		/* 821ACAC0h case   10:*/		return 0x821ACAC4;
		  /* 821ACAC4h */ case   11:  		/* stw R11, <#[R26]> */
		/* 821ACAC4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821ACAC4h case   11:*/		return 0x821ACAC8;
		  /* 821ACAC8h */ case   12:  		/* bl -91928 */
		/* 821ACAC8h case   12:*/		regs.LR = 0x821ACACC; return 0x821963B0;
		/* 821ACAC8h case   12:*/		return 0x821ACACC;
		  /* 821ACACCh */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 821ACACCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ACACCh case   13:*/		return 0x821ACAD0;
		  /* 821ACAD0h */ case   14:  		/* mr R4, R23 */
		/* 821ACAD0h case   14:*/		regs.R4 = regs.R23;
		/* 821ACAD0h case   14:*/		return 0x821ACAD4;
		  /* 821ACAD4h */ case   15:  		/* oris R11, R11, 256 */
		/* 821ACAD4h case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821ACAD4h case   15:*/		return 0x821ACAD8;
		  /* 821ACAD8h */ case   16:  		/* mr R3, R25 */
		/* 821ACAD8h case   16:*/		regs.R3 = regs.R25;
		/* 821ACAD8h case   16:*/		return 0x821ACADC;
		  /* 821ACADCh */ case   17:  		/* stw R11, <#[R31 + 8]> */
		/* 821ACADCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ACADCh case   17:*/		return 0x821ACAE0;
		  /* 821ACAE0h */ case   18:  		/* bl -49192 */
		/* 821ACAE0h case   18:*/		regs.LR = 0x821ACAE4; return 0x821A0AB8;
		/* 821ACAE0h case   18:*/		return 0x821ACAE4;
		  /* 821ACAE4h */ case   19:  		/* b 8 */
		/* 821ACAE4h case   19:*/		return 0x821ACAEC;
		/* 821ACAE4h case   19:*/		return 0x821ACAE8;
	}
	return 0x821ACAE8;
} // Block from 821ACA98h-821ACAE8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821ACAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACAE8);
		  /* 821ACAE8h */ case    0:  		/* lwz R25, <#[R1 + 1236]> */
		/* 821ACAE8h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000004D4) );
		/* 821ACAE8h case    0:*/		return 0x821ACAEC;
	}
	return 0x821ACAEC;
} // Block from 821ACAE8h-821ACAECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ACAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACAEC);
		  /* 821ACAECh */ case    0:  		/* lwz R30, <#[R29 + 12]> */
		/* 821ACAECh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821ACAECh case    0:*/		return 0x821ACAF0;
		  /* 821ACAF0h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 821ACAF0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821ACAF0h case    1:*/		return 0x821ACAF4;
		  /* 821ACAF4h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821ACAF4h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821ACAF4h case    2:*/		return 0x821ACAF8;
		  /* 821ACAF8h */ case    3:  		/* cmplwi CR6, R11, 14080 */
		/* 821ACAF8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821ACAF8h case    3:*/		return 0x821ACAFC;
		  /* 821ACAFCh */ case    4:  		/* bc 4, CR6_EQ, -8472 */
		/* 821ACAFCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821ACAFCh case    4:*/		return 0x821ACB00;
		  /* 821ACB00h */ case    5:  		/* mr R3, R29 */
		/* 821ACB00h case    5:*/		regs.R3 = regs.R29;
		/* 821ACB00h case    5:*/		return 0x821ACB04;
		  /* 821ACB04h */ case    6:  		/* lwz R31, <#[R30 + 8]> */
		/* 821ACB04h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 821ACB04h case    6:*/		return 0x821ACB08;
		  /* 821ACB08h */ case    7:  		/* bl -297160 */
		/* 821ACB08h case    7:*/		regs.LR = 0x821ACB0C; return 0x82164240;
		/* 821ACB08h case    7:*/		return 0x821ACB0C;
		  /* 821ACB0Ch */ case    8:  		/* rlwinm R11, R31, 31, 28, 31 */
		/* 821ACB0Ch case    8:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R31);
		/* 821ACB0Ch case    8:*/		return 0x821ACB10;
		  /* 821ACB10h */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 821ACB10h case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821ACB10h case    9:*/		return 0x821ACB14;
		  /* 821ACB14h */ case   10:  		/* bc 4, CR6_EQ, -8496 */
		/* 821ACB14h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821ACB14h case   10:*/		return 0x821ACB18;
		  /* 821ACB18h */ case   11:  		/* mr R3, R23 */
		/* 821ACB18h case   11:*/		regs.R3 = regs.R23;
		/* 821ACB18h case   11:*/		return 0x821ACB1C;
		  /* 821ACB1Ch */ case   12:  		/* bl -221852 */
		/* 821ACB1Ch case   12:*/		regs.LR = 0x821ACB20; return 0x82176880;
		/* 821ACB1Ch case   12:*/		return 0x821ACB20;
		  /* 821ACB20h */ case   13:  		/* or. R28, R3, R3 */
		/* 821ACB20h case   13:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821ACB20h case   13:*/		return 0x821ACB24;
		  /* 821ACB24h */ case   14:  		/* bc 12, CR0_EQ, -8512 */
		/* 821ACB24h case   14:*/		if ( regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821ACB24h case   14:*/		return 0x821ACB28;
		  /* 821ACB28h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 821ACB28h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821ACB28h case   15:*/		return 0x821ACB2C;
		  /* 821ACB2Ch */ case   16:  		/* rlwinm R10, R31, 9, 31, 31 */
		/* 821ACB2Ch case   16:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R10,regs.R31);
		/* 821ACB2Ch case   16:*/		return 0x821ACB30;
		  /* 821ACB30h */ case   17:  		/* rlwinm R9, R11, 9, 31, 31 */
		/* 821ACB30h case   17:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R9,regs.R11);
		/* 821ACB30h case   17:*/		return 0x821ACB34;
		  /* 821ACB34h */ case   18:  		/* cmplw CR6, R9, R10 */
		/* 821ACB34h case   18:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821ACB34h case   18:*/		return 0x821ACB38;
		  /* 821ACB38h */ case   19:  		/* bc 4, CR6_EQ, -8532 */
		/* 821ACB38h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821ACB38h case   19:*/		return 0x821ACB3C;
		  /* 821ACB3Ch */ case   20:  		/* lwz R10, <#[R23 + 4]> */
		/* 821ACB3Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821ACB3Ch case   20:*/		return 0x821ACB40;
		  /* 821ACB40h */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 821ACB40h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ACB40h case   21:*/		return 0x821ACB44;
		  /* 821ACB44h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 821ACB44h case   22:*/		if ( regs.CR[6].eq ) { return 0x821ACB6C;  }
		/* 821ACB44h case   22:*/		return 0x821ACB48;
		  /* 821ACB48h */ case   23:  		/* lwz R11, <#[R10 + 16]> */
		/* 821ACB48h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821ACB48h case   23:*/		return 0x821ACB4C;
		  /* 821ACB4Ch */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821ACB4Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ACB4Ch case   24:*/		return 0x821ACB50;
		  /* 821ACB50h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 821ACB50h case   25:*/		if ( regs.CR[6].eq ) { return 0x821ACB5C;  }
		/* 821ACB50h case   25:*/		return 0x821ACB54;
		  /* 821ACB54h */ case   26:  		/* cmplw CR6, R11, R28 */
		/* 821ACB54h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821ACB54h case   26:*/		return 0x821ACB58;
		  /* 821ACB58h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 821ACB58h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821ACB64;  }
		/* 821ACB58h case   27:*/		return 0x821ACB5C;
	}
	return 0x821ACB5C;
} // Block from 821ACAECh-821ACB5Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821ACB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACB5C);
		  /* 821ACB5Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ACB5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ACB5Ch case    0:*/		return 0x821ACB60;
		  /* 821ACB60h */ case    1:  		/* b -32 */
		/* 821ACB60h case    1:*/		return 0x821ACB40;
		/* 821ACB60h case    1:*/		return 0x821ACB64;
	}
	return 0x821ACB64;
} // Block from 821ACB5Ch-821ACB64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ACB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACB64);
		  /* 821ACB64h */ case    0:  		/* li R11, 1 */
		/* 821ACB64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821ACB64h case    0:*/		return 0x821ACB68;
		  /* 821ACB68h */ case    1:  		/* b 8 */
		/* 821ACB68h case    1:*/		return 0x821ACB70;
		/* 821ACB68h case    1:*/		return 0x821ACB6C;
	}
	return 0x821ACB6C;
} // Block from 821ACB64h-821ACB6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ACB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACB6C);
		  /* 821ACB6Ch */ case    0:  		/* li R11, 0 */
		/* 821ACB6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821ACB6Ch case    0:*/		return 0x821ACB70;
	}
	return 0x821ACB70;
} // Block from 821ACB6Ch-821ACB70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ACB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACB70);
		  /* 821ACB70h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821ACB70h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821ACB70h case    0:*/		return 0x821ACB74;
		  /* 821ACB74h */ case    1:  		/* bc 4, CR0_EQ, -8592 */
		/* 821ACB74h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821ACB74h case    1:*/		return 0x821ACB78;
		  /* 821ACB78h */ case    2:  		/* lwz R10, <#[R30 + 4]> */
		/* 821ACB78h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821ACB78h case    2:*/		return 0x821ACB7C;
		  /* 821ACB7Ch */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821ACB7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ACB7Ch case    3:*/		return 0x821ACB80;
		  /* 821ACB80h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821ACB80h case    4:*/		if ( regs.CR[6].eq ) { return 0x821ACBA8;  }
		/* 821ACB80h case    4:*/		return 0x821ACB84;
		  /* 821ACB84h */ case    5:  		/* lwz R11, <#[R10 + 16]> */
		/* 821ACB84h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821ACB84h case    5:*/		return 0x821ACB88;
		  /* 821ACB88h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821ACB88h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ACB88h case    6:*/		return 0x821ACB8C;
		  /* 821ACB8Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821ACB8Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821ACB98;  }
		/* 821ACB8Ch case    7:*/		return 0x821ACB90;
		  /* 821ACB90h */ case    8:  		/* cmplw CR6, R11, R23 */
		/* 821ACB90h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821ACB90h case    8:*/		return 0x821ACB94;
		  /* 821ACB94h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821ACB94h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821ACBA0;  }
		/* 821ACB94h case    9:*/		return 0x821ACB98;
	}
	return 0x821ACB98;
} // Block from 821ACB70h-821ACB98h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821ACB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACB98);
		  /* 821ACB98h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821ACB98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821ACB98h case    0:*/		return 0x821ACB9C;
		  /* 821ACB9Ch */ case    1:  		/* b -32 */
		/* 821ACB9Ch case    1:*/		return 0x821ACB7C;
		/* 821ACB9Ch case    1:*/		return 0x821ACBA0;
	}
	return 0x821ACBA0;
} // Block from 821ACB98h-821ACBA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ACBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACBA0);
		  /* 821ACBA0h */ case    0:  		/* li R11, 1 */
		/* 821ACBA0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821ACBA0h case    0:*/		return 0x821ACBA4;
		  /* 821ACBA4h */ case    1:  		/* b 8 */
		/* 821ACBA4h case    1:*/		return 0x821ACBAC;
		/* 821ACBA4h case    1:*/		return 0x821ACBA8;
	}
	return 0x821ACBA8;
} // Block from 821ACBA0h-821ACBA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ACBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACBA8);
		  /* 821ACBA8h */ case    0:  		/* li R11, 0 */
		/* 821ACBA8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821ACBA8h case    0:*/		return 0x821ACBAC;
	}
	return 0x821ACBAC;
} // Block from 821ACBA8h-821ACBACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ACBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACBAC);
		  /* 821ACBACh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821ACBACh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821ACBACh case    0:*/		return 0x821ACBB0;
		  /* 821ACBB0h */ case    1:  		/* bc 4, CR0_EQ, -8652 */
		/* 821ACBB0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821ACBB0h case    1:*/		return 0x821ACBB4;
		  /* 821ACBB4h */ case    2:  		/* li R31, 1 */
		/* 821ACBB4h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821ACBB4h case    2:*/		return 0x821ACBB8;
		  /* 821ACBB8h */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 821ACBB8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821ACBB8h case    3:*/		return 0x821ACBBC;
		  /* 821ACBBCh */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 821ACBBCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821ACBEC;  }
		/* 821ACBBCh case    4:*/		return 0x821ACBC0;
		  /* 821ACBC0h */ case    5:  		/* mr R4, R30 */
		/* 821ACBC0h case    5:*/		regs.R4 = regs.R30;
		/* 821ACBC0h case    5:*/		return 0x821ACBC4;
		  /* 821ACBC4h */ case    6:  		/* mr R3, R25 */
		/* 821ACBC4h case    6:*/		regs.R3 = regs.R25;
		/* 821ACBC4h case    6:*/		return 0x821ACBC8;
		  /* 821ACBC8h */ case    7:  		/* bl -166896 */
		/* 821ACBC8h case    7:*/		regs.LR = 0x821ACBCC; return 0x82183FD8;
		/* 821ACBC8h case    7:*/		return 0x821ACBCC;
		  /* 821ACBCCh */ case    8:  		/* mr R27, R3 */
		/* 821ACBCCh case    8:*/		regs.R27 = regs.R3;
		/* 821ACBCCh case    8:*/		return 0x821ACBD0;
		  /* 821ACBD0h */ case    9:  		/* mr R4, R28 */
		/* 821ACBD0h case    9:*/		regs.R4 = regs.R28;
		/* 821ACBD0h case    9:*/		return 0x821ACBD4;
		  /* 821ACBD4h */ case   10:  		/* mr R3, R25 */
		/* 821ACBD4h case   10:*/		regs.R3 = regs.R25;
		/* 821ACBD4h case   10:*/		return 0x821ACBD8;
		  /* 821ACBD8h */ case   11:  		/* bl -166912 */
		/* 821ACBD8h case   11:*/		regs.LR = 0x821ACBDC; return 0x82183FD8;
		/* 821ACBD8h case   11:*/		return 0x821ACBDC;
		  /* 821ACBDCh */ case   12:  		/* subf R11, R27, R3 */
		/* 821ACBDCh case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R3);
		/* 821ACBDCh case   12:*/		return 0x821ACBE0;
		  /* 821ACBE0h */ case   13:  		/* addic R11, R11, -1 */
		/* 821ACBE0h case   13:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821ACBE0h case   13:*/		return 0x821ACBE4;
		  /* 821ACBE4h */ case   14:  		/* subfe R11, R11, R11 */
		/* 821ACBE4h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821ACBE4h case   14:*/		return 0x821ACBE8;
		  /* 821ACBE8h */ case   15:  		/* and R31, R11, R31 */
		/* 821ACBE8h case   15:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821ACBE8h case   15:*/		return 0x821ACBEC;
	}
	return 0x821ACBEC;
} // Block from 821ACBACh-821ACBECh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821ACBECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACBEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACBEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACBEC);
		  /* 821ACBECh */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821ACBECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821ACBECh case    0:*/		return 0x821ACBF0;
		  /* 821ACBF0h */ case    1:  		/* bc 12, CR0_EQ, -8716 */
		/* 821ACBF0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821ACBF0h case    1:*/		return 0x821ACBF4;
		  /* 821ACBF4h */ case    2:  		/* li R5, 0 */
		/* 821ACBF4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821ACBF4h case    2:*/		return 0x821ACBF8;
		  /* 821ACBF8h */ case    3:  		/* addi R6, R28, 44 */
		/* 821ACBF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R28,0x2C);
		/* 821ACBF8h case    3:*/		return 0x821ACBFC;
		  /* 821ACBFCh */ case    4:  		/* lwz R11, <#[R28 + 8]> */
		/* 821ACBFCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821ACBFCh case    4:*/		return 0x821ACC00;
		  /* 821ACC00h */ case    5:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821ACC00h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821ACC00h case    5:*/		return 0x821ACC04;
		  /* 821ACC04h */ case    6:  		/* cmplw CR6, R5, R11 */
		/* 821ACC04h case    6:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821ACC04h case    6:*/		return 0x821ACC08;
		  /* 821ACC08h */ case    7:  		/* bc 4, CR6_LT, 156 */
		/* 821ACC08h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821ACCA4;  }
		/* 821ACC08h case    7:*/		return 0x821ACC0C;
		  /* 821ACC0Ch */ case    8:  		/* lwz R11, <#[R6]> */
		/* 821ACC0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821ACC0Ch case    8:*/		return 0x821ACC10;
		  /* 821ACC10h */ case    9:  		/* lwz R10, <#[R11 + 12]> */
		/* 821ACC10h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821ACC10h case    9:*/		return 0x821ACC14;
		  /* 821ACC14h */ case   10:  		/* cmplw CR6, R10, R23 */
		/* 821ACC14h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R23);
		/* 821ACC14h case   10:*/		return 0x821ACC18;
		  /* 821ACC18h */ case   11:  		/* bc 4, CR6_EQ, 128 */
		/* 821ACC18h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821ACC98;  }
		/* 821ACC18h case   11:*/		return 0x821ACC1C;
		  /* 821ACC1Ch */ case   12:  		/* lwz R9, <#[R11]> */
		/* 821ACC1Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACC1Ch case   12:*/		return 0x821ACC20;
		  /* 821ACC20h */ case   13:  		/* addi R10, R10, 4 */
		/* 821ACC20h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821ACC20h case   13:*/		return 0x821ACC24;
		  /* 821ACC24h */ case   14:  		/* lwz R8, <#[R29]> */
		/* 821ACC24h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 821ACC24h case   14:*/		return 0x821ACC28;
		  /* 821ACC28h */ case   15:  		/* rlwinm R9, R9, 28, 29, 30 */
		/* 821ACC28h case   15:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R9,regs.R9);
		/* 821ACC28h case   15:*/		return 0x821ACC2C;
		  /* 821ACC2Ch */ case   16:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821ACC2Ch case   16:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821ACC2Ch case   16:*/		return 0x821ACC30;
		  /* 821ACC30h */ case   17:  		/* srw R8, R8, R9 */
		/* 821ACC30h case   17:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821ACC30h case   17:*/		return 0x821ACC34;
		  /* 821ACC34h */ case   18:  		/* lwz R9, <#[R10]> */
		/* 821ACC34h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821ACC34h case   18:*/		return 0x821ACC38;
		  /* 821ACC38h */ case   19:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821ACC38h case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821ACC38h case   19:*/		return 0x821ACC3C;
		  /* 821ACC3Ch */ case   20:  		/* addi R8, R8, 11 */
		/* 821ACC3Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xB);
		/* 821ACC3Ch case   20:*/		return 0x821ACC40;
		  /* 821ACC40h */ case   21:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821ACC40h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821ACC40h case   21:*/		return 0x821ACC44;
		  /* 821ACC44h */ case   22:  		/* lwzx R8, <#[R8 + R30]> */
		/* 821ACC44h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 821ACC44h case   22:*/		return 0x821ACC48;
		  /* 821ACC48h */ case   23:  		/* lwz R7, <#[R8 + 12]> */
		/* 821ACC48h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x0000000C) );
		/* 821ACC48h case   23:*/		return 0x821ACC4C;
		  /* 821ACC4Ch */ case   24:  		/* b 12 */
		/* 821ACC4Ch case   24:*/		return 0x821ACC58;
		/* 821ACC4Ch case   24:*/		return 0x821ACC50;
		  /* 821ACC50h */ case   25:  		/* addi R10, R9, 8 */
		/* 821ACC50h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821ACC50h case   25:*/		return 0x821ACC54;
		  /* 821ACC54h */ case   26:  		/* lwz R9, <#[R9 + 8]> */
		/* 821ACC54h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821ACC54h case   26:*/		return 0x821ACC58;
	}
	return 0x821ACC58;
} // Block from 821ACBECh-821ACC58h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821ACC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACC58);
		  /* 821ACC58h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821ACC58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821ACC58h case    0:*/		return 0x821ACC5C;
		  /* 821ACC5Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ACC5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ACC50;  }
		/* 821ACC5Ch case    1:*/		return 0x821ACC60;
		  /* 821ACC60h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821ACC60h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821ACC60h case    2:*/		return 0x821ACC64;
		  /* 821ACC64h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821ACC64h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821ACC64h case    3:*/		return 0x821ACC68;
		  /* 821ACC68h */ case    4:  		/* lwz R10, <#[R7 + 4]> */
		/* 821ACC68h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 821ACC68h case    4:*/		return 0x821ACC6C;
		  /* 821ACC6Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821ACC6Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821ACC6Ch case    5:*/		return 0x821ACC70;
		  /* 821ACC70h */ case    6:  		/* stw R11, <#[R7 + 4]> */
		/* 821ACC70h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821ACC70h case    6:*/		return 0x821ACC74;
		  /* 821ACC74h */ case    7:  		/* stw R7, <#[R11 + 12]> */
		/* 821ACC74h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 821ACC74h case    7:*/		return 0x821ACC78;
		  /* 821ACC78h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821ACC78h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACC78h case    8:*/		return 0x821ACC7C;
		  /* 821ACC7Ch */ case    9:  		/* lwz R9, <#[R8]> */
		/* 821ACC7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821ACC7Ch case    9:*/		return 0x821ACC80;
		  /* 821ACC80h */ case   10:  		/* rlwimi R10, R9, 0, 27, 31 */
		/* 821ACC80h case   10:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 821ACC80h case   10:*/		return 0x821ACC84;
		  /* 821ACC84h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821ACC84h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACC84h case   11:*/		return 0x821ACC88;
		  /* 821ACC88h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821ACC88h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821ACC88h case   12:*/		return 0x821ACC8C;
		  /* 821ACC8Ch */ case   13:  		/* lwz R9, <#[R8]> */
		/* 821ACC8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821ACC8Ch case   13:*/		return 0x821ACC90;
		  /* 821ACC90h */ case   14:  		/* rlwimi R9, R10, 0, 27, 18 */
		/* 821ACC90h case   14:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R9,regs.R10);
		/* 821ACC90h case   14:*/		return 0x821ACC94;
		  /* 821ACC94h */ case   15:  		/* stw R9, <#[R11]> */
		/* 821ACC94h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACC94h case   15:*/		return 0x821ACC98;
	}
	return 0x821ACC98;
} // Block from 821ACC58h-821ACC98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821ACC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACC98);
		  /* 821ACC98h */ case    0:  		/* addi R5, R5, 1 */
		/* 821ACC98h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821ACC98h case    0:*/		return 0x821ACC9C;
		  /* 821ACC9Ch */ case    1:  		/* addi R6, R6, 4 */
		/* 821ACC9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821ACC9Ch case    1:*/		return 0x821ACCA0;
		  /* 821ACCA0h */ case    2:  		/* b -164 */
		/* 821ACCA0h case    2:*/		return 0x821ACBFC;
		/* 821ACCA0h case    2:*/		return 0x821ACCA4;
	}
	return 0x821ACCA4;
} // Block from 821ACC98h-821ACCA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821ACCA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACCA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACCA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACCA4);
		  /* 821ACCA4h */ case    0:  		/* li R6, 1 */
		/* 821ACCA4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ACCA4h case    0:*/		return 0x821ACCA8;
		  /* 821ACCA8h */ case    1:  		/* lwz R5, <#[R25 + 652]> */
		/* 821ACCA8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000028C) );
		/* 821ACCA8h case    1:*/		return 0x821ACCAC;
		  /* 821ACCACh */ case    2:  		/* mr R4, R23 */
		/* 821ACCACh case    2:*/		regs.R4 = regs.R23;
		/* 821ACCACh case    2:*/		return 0x821ACCB0;
		  /* 821ACCB0h */ case    3:  		/* mr R3, R25 */
		/* 821ACCB0h case    3:*/		regs.R3 = regs.R25;
		/* 821ACCB0h case    3:*/		return 0x821ACCB4;
		  /* 821ACCB4h */ case    4:  		/* bl 517908 */
		/* 821ACCB4h case    4:*/		regs.LR = 0x821ACCB8; return 0x8222B3C8;
		/* 821ACCB4h case    4:*/		return 0x821ACCB8;
		  /* 821ACCB8h */ case    5:  		/* li R6, 1 */
		/* 821ACCB8h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ACCB8h case    5:*/		return 0x821ACCBC;
		  /* 821ACCBCh */ case    6:  		/* mr R4, R30 */
		/* 821ACCBCh case    6:*/		regs.R4 = regs.R30;
		/* 821ACCBCh case    6:*/		return 0x821ACCC0;
		  /* 821ACCC0h */ case    7:  		/* lwz R5, <#[R25 + 652]> */
		/* 821ACCC0h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000028C) );
		/* 821ACCC0h case    7:*/		return 0x821ACCC4;
		  /* 821ACCC4h */ case    8:  		/* mr R3, R25 */
		/* 821ACCC4h case    8:*/		regs.R3 = regs.R25;
		/* 821ACCC4h case    8:*/		return 0x821ACCC8;
		  /* 821ACCC8h */ case    9:  		/* bl 517888 */
		/* 821ACCC8h case    9:*/		regs.LR = 0x821ACCCC; return 0x8222B3C8;
		/* 821ACCC8h case    9:*/		return 0x821ACCCC;
		  /* 821ACCCCh */ case   10:  		/* b -8936 */
		/* 821ACCCCh case   10:*/		return 0x821AA9E4;
		/* 821ACCCCh case   10:*/		return 0x821ACCD0;
	}
	return 0x821ACCD0;
} // Block from 821ACCA4h-821ACCD0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821ACCD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACCD0);
		  /* 821ACCD0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821ACCD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821ACCD0h case    0:*/		return 0x821ACCD4;
		  /* 821ACCD4h */ case    1:  		/* lis R10, 512 */
		/* 821ACCD4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821ACCD4h case    1:*/		return 0x821ACCD8;
		  /* 821ACCD8h */ case    2:  		/* rlwinm R11, R11, 0, 4, 6 */
		/* 821ACCD8h case    2:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821ACCD8h case    2:*/		return 0x821ACCDC;
		  /* 821ACCDCh */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821ACCDCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821ACCDCh case    3:*/		return 0x821ACCE0;
		  /* 821ACCE0h */ case    4:  		/* bc 4, CR6_EQ, -8956 */
		/* 821ACCE0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821ACCE0h case    4:*/		return 0x821ACCE4;
		  /* 821ACCE4h */ case    5:  		/* li R10, 1 */
		/* 821ACCE4h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ACCE4h case    5:*/		return 0x821ACCE8;
		  /* 821ACCE8h */ case    6:  		/* lwz R8, <#[R25 + 28]> */
		/* 821ACCE8h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821ACCE8h case    6:*/		return 0x821ACCEC;
		  /* 821ACCECh */ case    7:  		/* li R9, 0 */
		/* 821ACCECh case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821ACCECh case    7:*/		return 0x821ACCF0;
		  /* 821ACCF0h */ case    8:  		/* addi R7, R1, 320 */
		/* 821ACCF0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x140);
		/* 821ACCF0h case    8:*/		return 0x821ACCF4;
		  /* 821ACCF4h */ case    9:  		/* addi R6, R1, 264 */
		/* 821ACCF4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x108);
		/* 821ACCF4h case    9:*/		return 0x821ACCF8;
		  /* 821ACCF8h */ case   10:  		/* addi R5, R1, 236 */
		/* 821ACCF8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xEC);
		/* 821ACCF8h case   10:*/		return 0x821ACCFC;
		  /* 821ACCFCh */ case   11:  		/* li R4, 0 */
		/* 821ACCFCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821ACCFCh case   11:*/		return 0x821ACD00;
		  /* 821ACD00h */ case   12:  		/* mr R3, R29 */
		/* 821ACD00h case   12:*/		regs.R3 = regs.R29;
		/* 821ACD00h case   12:*/		return 0x821ACD04;
		  /* 821ACD04h */ case   13:  		/* bl 485324 */
		/* 821ACD04h case   13:*/		regs.LR = 0x821ACD08; return 0x822234D0;
		/* 821ACD04h case   13:*/		return 0x821ACD08;
		  /* 821ACD08h */ case   14:  		/* li R10, 1 */
		/* 821ACD08h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ACD08h case   14:*/		return 0x821ACD0C;
		  /* 821ACD0Ch */ case   15:  		/* li R9, 0 */
		/* 821ACD0Ch case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821ACD0Ch case   15:*/		return 0x821ACD10;
		  /* 821ACD10h */ case   16:  		/* lwz R8, <#[R25 + 28]> */
		/* 821ACD10h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821ACD10h case   16:*/		return 0x821ACD14;
		  /* 821ACD14h */ case   17:  		/* addi R7, R1, 312 */
		/* 821ACD14h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x138);
		/* 821ACD14h case   17:*/		return 0x821ACD18;
		  /* 821ACD18h */ case   18:  		/* addi R6, R1, 260 */
		/* 821ACD18h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x104);
		/* 821ACD18h case   18:*/		return 0x821ACD1C;
		  /* 821ACD1Ch */ case   19:  		/* addi R5, R1, 304 */
		/* 821ACD1Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x130);
		/* 821ACD1Ch case   19:*/		return 0x821ACD20;
		  /* 821ACD20h */ case   20:  		/* li R4, 0 */
		/* 821ACD20h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821ACD20h case   20:*/		return 0x821ACD24;
		  /* 821ACD24h */ case   21:  		/* mr R3, R26 */
		/* 821ACD24h case   21:*/		regs.R3 = regs.R26;
		/* 821ACD24h case   21:*/		return 0x821ACD28;
		  /* 821ACD28h */ case   22:  		/* bl 485288 */
		/* 821ACD28h case   22:*/		regs.LR = 0x821ACD2C; return 0x822234D0;
		/* 821ACD28h case   22:*/		return 0x821ACD2C;
		  /* 821ACD2Ch */ case   23:  		/* lwz R11, <#[R25 + 8]> */
		/* 821ACD2Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821ACD2Ch case   23:*/		return 0x821ACD30;
		  /* 821ACD30h */ case   24:  		/* mr R30, R28 */
		/* 821ACD30h case   24:*/		regs.R30 = regs.R28;
		/* 821ACD30h case   24:*/		return 0x821ACD34;
		  /* 821ACD34h */ case   25:  		/* oris R10, R11, 1024 */
		/* 821ACD34h case   25:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R11,0x400);
		/* 821ACD34h case   25:*/		return 0x821ACD38;
		  /* 821ACD38h */ case   26:  		/* rlwinm R29, R11, 6, 31, 31 */
		/* 821ACD38h case   26:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R29,regs.R11);
		/* 821ACD38h case   26:*/		return 0x821ACD3C;
		  /* 821ACD3Ch */ case   27:  		/* stw R10, <#[R25 + 8]> */
		/* 821ACD3Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 821ACD3Ch case   27:*/		return 0x821ACD40;
		  /* 821ACD40h */ case   28:  		/* lwz R11, <#[R20 + 652]> */
		/* 821ACD40h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000028C) );
		/* 821ACD40h case   28:*/		return 0x821ACD44;
		  /* 821ACD44h */ case   29:  		/* lwz R11, <#[R11 + 4]> */
		/* 821ACD44h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821ACD44h case   29:*/		return 0x821ACD48;
		  /* 821ACD48h */ case   30:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821ACD48h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821ACD48h case   30:*/		return 0x821ACD4C;
		  /* 821ACD4Ch */ case   31:  		/* bc 4, CR0_EQ, 44 */
		/* 821ACD4Ch case   31:*/		if ( !regs.CR[0].eq ) { return 0x821ACD78;  }
		/* 821ACD4Ch case   31:*/		return 0x821ACD50;
		  /* 821ACD50h */ case   32:  		/* cmplwi CR0, R11, 0 */
		/* 821ACD50h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821ACD50h case   32:*/		return 0x821ACD54;
		  /* 821ACD54h */ case   33:  		/* bc 12, CR0_EQ, 36 */
		/* 821ACD54h case   33:*/		if ( regs.CR[0].eq ) { return 0x821ACD78;  }
		/* 821ACD54h case   33:*/		return 0x821ACD58;
		  /* 821ACD58h */ case   34:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821ACD58h case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821ACD58h case   34:*/		return 0x821ACD5C;
		  /* 821ACD5Ch */ case   35:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ACD5Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ACD5Ch case   35:*/		return 0x821ACD60;
		  /* 821ACD60h */ case   36:  		/* add R30, R11, R30 */
		/* 821ACD60h case   36:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821ACD60h case   36:*/		return 0x821ACD64;
		  /* 821ACD64h */ case   37:  		/* lwz R11, <#[R10 + 4]> */
		/* 821ACD64h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821ACD64h case   37:*/		return 0x821ACD68;
		  /* 821ACD68h */ case   38:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821ACD68h case   38:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821ACD68h case   38:*/		return 0x821ACD6C;
		  /* 821ACD6Ch */ case   39:  		/* bc 4, CR0_EQ, 12 */
		/* 821ACD6Ch case   39:*/		if ( !regs.CR[0].eq ) { return 0x821ACD78;  }
		/* 821ACD6Ch case   39:*/		return 0x821ACD70;
		  /* 821ACD70h */ case   40:  		/* cmplwi CR6, R11, 0 */
		/* 821ACD70h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ACD70h case   40:*/		return 0x821ACD74;
		  /* 821ACD74h */ case   41:  		/* bc 4, CR6_EQ, -28 */
		/* 821ACD74h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821ACD58;  }
		/* 821ACD74h case   41:*/		return 0x821ACD78;
	}
	return 0x821ACD78;
} // Block from 821ACCD0h-821ACD78h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821ACD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACD78);
		  /* 821ACD78h */ case    0:  		/* addi R11, R1, 548 */
		/* 821ACD78h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x224);
		/* 821ACD78h case    0:*/		return 0x821ACD7C;
		  /* 821ACD7Ch */ case    1:  		/* stw R28, <#[R1 + 544]> */
		/* 821ACD7Ch case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000220) );
		/* 821ACD7Ch case    1:*/		return 0x821ACD80;
		  /* 821ACD80h */ case    2:  		/* addi R10, R1, 772 */
		/* 821ACD80h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x304);
		/* 821ACD80h case    2:*/		return 0x821ACD84;
		  /* 821ACD84h */ case    3:  		/* stw R28, <#[R1 + 768]> */
		/* 821ACD84h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000300) );
		/* 821ACD84h case    3:*/		return 0x821ACD88;
		  /* 821ACD88h */ case    4:  		/* addi R9, R1, 744 */
		/* 821ACD88h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x2E8);
		/* 821ACD88h case    4:*/		return 0x821ACD8C;
		  /* 821ACD8Ch */ case    5:  		/* lwz R8, <#[R1 + 320]> */
		/* 821ACD8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000140) );
		/* 821ACD8Ch case    5:*/		return 0x821ACD90;
		  /* 821ACD90h */ case    6:  		/* addi R7, R1, 968 */
		/* 821ACD90h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3C8);
		/* 821ACD90h case    6:*/		return 0x821ACD94;
		  /* 821ACD94h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 821ACD94h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821ACD94h case    7:*/		return 0x821ACD98;
		  /* 821ACD98h */ case    8:  		/* stw R28, <#[R11]> */
		/* 821ACD98h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821ACD98h case    8:*/		return 0x821ACD9C;
		  /* 821ACD9Ch */ case    9:  		/* stw R28, <#[R10]> */
		/* 821ACD9Ch case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 821ACD9Ch case    9:*/		return 0x821ACDA0;
		  /* 821ACDA0h */ case   10:  		/* stw R28, <#[R11 + 4]> */
		/* 821ACDA0h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 821ACDA0h case   10:*/		return 0x821ACDA4;
		  /* 821ACDA4h */ case   11:  		/* stw R28, <#[R10 + 4]> */
		/* 821ACDA4h case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000004) );
		/* 821ACDA4h case   11:*/		return 0x821ACDA8;
		  /* 821ACDA8h */ case   12:  		/* stw R28, <#[R1 + 572]> */
		/* 821ACDA8h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000023C) );
		/* 821ACDA8h case   12:*/		return 0x821ACDAC;
		  /* 821ACDACh */ case   13:  		/* stw R28, <#[R1 + 704]> */
		/* 821ACDACh case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000002C0) );
		/* 821ACDACh case   13:*/		return 0x821ACDB0;
		  /* 821ACDB0h */ case   14:  		/* stw R28, <#[R1 + 740]> */
		/* 821ACDB0h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000002E4) );
		/* 821ACDB0h case   14:*/		return 0x821ACDB4;
		  /* 821ACDB4h */ case   15:  		/* stw R28, <#[R1 + 796]> */
		/* 821ACDB4h case   15:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000031C) );
		/* 821ACDB4h case   15:*/		return 0x821ACDB8;
		  /* 821ACDB8h */ case   16:  		/* stw R28, <#[R1 + 928]> */
		/* 821ACDB8h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000003A0) );
		/* 821ACDB8h case   16:*/		return 0x821ACDBC;
		  /* 821ACDBCh */ case   17:  		/* stw R28, <#[R1 + 964]> */
		/* 821ACDBCh case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000003C4) );
		/* 821ACDBCh case   17:*/		return 0x821ACDC0;
		  /* 821ACDC0h */ case   18:  		/* std R28, <#[R9]> */
		/* 821ACDC0h case   18:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R9 + 0x00000000) );
		/* 821ACDC0h case   18:*/		return 0x821ACDC4;
		  /* 821ACDC4h */ case   19:  		/* std R28, <#[R7]> */
		/* 821ACDC4h case   19:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 821ACDC4h case   19:*/		return 0x821ACDC8;
		  /* 821ACDC8h */ case   20:  		/* std R28, <#[R9 + 8]> */
		/* 821ACDC8h case   20:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R9 + 0x00000008) );
		/* 821ACDC8h case   20:*/		return 0x821ACDCC;
		  /* 821ACDCCh */ case   21:  		/* std R28, <#[R7 + 8]> */
		/* 821ACDCCh case   21:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R7 + 0x00000008) );
		/* 821ACDCCh case   21:*/		return 0x821ACDD0;
		  /* 821ACDD0h */ case   22:  		/* lwz R11, <#[R1 + 236]> */
		/* 821ACDD0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 821ACDD0h case   22:*/		return 0x821ACDD4;
		  /* 821ACDD4h */ case   23:  		/* bc 4, CR6_EQ, 232 */
		/* 821ACDD4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821ACEBC;  }
		/* 821ACDD4h case   23:*/		return 0x821ACDD8;
		  /* 821ACDD8h */ case   24:  		/* lwz R10, <#[R11 + 8]> */
		/* 821ACDD8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821ACDD8h case   24:*/		return 0x821ACDDC;
		  /* 821ACDDCh */ case   25:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ACDDCh case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ACDDCh case   25:*/		return 0x821ACDE0;
		  /* 821ACDE0h */ case   26:  		/* cmplwi CR6, R10, 384 */
		/* 821ACDE0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000180);
		/* 821ACDE0h case   26:*/		return 0x821ACDE4;
		  /* 821ACDE4h */ case   27:  		/* bc 4, CR6_EQ, 216 */
		/* 821ACDE4h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821ACEBC;  }
		/* 821ACDE4h case   27:*/		return 0x821ACDE8;
		  /* 821ACDE8h */ case   28:  		/* lwz R8, <#[R1 + 304]> */
		/* 821ACDE8h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000130) );
		/* 821ACDE8h case   28:*/		return 0x821ACDEC;
		  /* 821ACDECh */ case   29:  		/* lwz R10, <#[R8 + 8]> */
		/* 821ACDECh case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 821ACDECh case   29:*/		return 0x821ACDF0;
		  /* 821ACDF0h */ case   30:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ACDF0h case   30:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ACDF0h case   30:*/		return 0x821ACDF4;
		  /* 821ACDF4h */ case   31:  		/* cmplwi CR6, R10, 16000 */
		/* 821ACDF4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821ACDF4h case   31:*/		return 0x821ACDF8;
		  /* 821ACDF8h */ case   32:  		/* bc 4, CR6_EQ, 92 */
		/* 821ACDF8h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821ACE54;  }
		/* 821ACDF8h case   32:*/		return 0x821ACDFC;
		  /* 821ACDFCh */ case   33:  		/* li R10, 1 */
		/* 821ACDFCh case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ACDFCh case   33:*/		return 0x821ACE00;
		  /* 821ACE00h */ case   34:  		/* lwz R8, <#[R25 + 28]> */
		/* 821ACE00h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821ACE00h case   34:*/		return 0x821ACE04;
		  /* 821ACE04h */ case   35:  		/* li R9, 0 */
		/* 821ACE04h case   35:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821ACE04h case   35:*/		return 0x821ACE08;
		  /* 821ACE08h */ case   36:  		/* lwz R3, <#[R11 + 48]> */
		/* 821ACE08h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821ACE08h case   36:*/		return 0x821ACE0C;
		  /* 821ACE0Ch */ case   37:  		/* addi R7, R1, 448 */
		/* 821ACE0Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C0);
		/* 821ACE0Ch case   37:*/		return 0x821ACE10;
		  /* 821ACE10h */ case   38:  		/* lwz R4, <#[R1 + 264]> */
		/* 821ACE10h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000108) );
		/* 821ACE10h case   38:*/		return 0x821ACE14;
		  /* 821ACE14h */ case   39:  		/* addi R6, R1, 464 */
		/* 821ACE14h case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1D0);
		/* 821ACE14h case   39:*/		return 0x821ACE18;
		  /* 821ACE18h */ case   40:  		/* addi R5, R1, 460 */
		/* 821ACE18h case   40:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1CC);
		/* 821ACE18h case   40:*/		return 0x821ACE1C;
		  /* 821ACE1Ch */ case   41:  		/* bl 485044 */
		/* 821ACE1Ch case   41:*/		regs.LR = 0x821ACE20; return 0x822234D0;
		/* 821ACE1Ch case   41:*/		return 0x821ACE20;
		  /* 821ACE20h */ case   42:  		/* addi R11, R1, 544 */
		/* 821ACE20h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x220);
		/* 821ACE20h case   42:*/		return 0x821ACE24;
		  /* 821ACE24h */ case   43:  		/* stw R25, <#[R1 + 84]> */
		/* 821ACE24h case   43:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821ACE24h case   43:*/		return 0x821ACE28;
		  /* 821ACE28h */ case   44:  		/* li R7, 0 */
		/* 821ACE28h case   44:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821ACE28h case   44:*/		return 0x821ACE2C;
		  /* 821ACE2Ch */ case   45:  		/* stw R11, <#[R1 + 92]> */
		/* 821ACE2Ch case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821ACE2Ch case   45:*/		return 0x821ACE30;
		  /* 821ACE30h */ case   46:  		/* li R6, 0 */
		/* 821ACE30h case   46:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821ACE30h case   46:*/		return 0x821ACE34;
		  /* 821ACE34h */ case   47:  		/* mr R5, R25 */
		/* 821ACE34h case   47:*/		regs.R5 = regs.R25;
		/* 821ACE34h case   47:*/		return 0x821ACE38;
		  /* 821ACE38h */ case   48:  		/* lwz R10, <#[R1 + 448]> */
		/* 821ACE38h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001C0) );
		/* 821ACE38h case   48:*/		return 0x821ACE3C;
		  /* 821ACE3Ch */ case   49:  		/* mr R4, R25 */
		/* 821ACE3Ch case   49:*/		regs.R4 = regs.R25;
		/* 821ACE3Ch case   49:*/		return 0x821ACE40;
		  /* 821ACE40h */ case   50:  		/* lwz R9, <#[R1 + 464]> */
		/* 821ACE40h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000001D0) );
		/* 821ACE40h case   50:*/		return 0x821ACE44;
		  /* 821ACE44h */ case   51:  		/* mr R3, R20 */
		/* 821ACE44h case   51:*/		regs.R3 = regs.R20;
		/* 821ACE44h case   51:*/		return 0x821ACE48;
		  /* 821ACE48h */ case   52:  		/* lwz R8, <#[R1 + 460]> */
		/* 821ACE48h case   52:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000001CC) );
		/* 821ACE48h case   52:*/		return 0x821ACE4C;
		  /* 821ACE4Ch */ case   53:  		/* bl -68996 */
		/* 821ACE4Ch case   53:*/		regs.LR = 0x821ACE50; return 0x8219C0C8;
		/* 821ACE4Ch case   53:*/		return 0x821ACE50;
		  /* 821ACE50h */ case   54:  		/* b 104 */
		/* 821ACE50h case   54:*/		return 0x821ACEB8;
		/* 821ACE50h case   54:*/		return 0x821ACE54;
	}
	return 0x821ACE54;
} // Block from 821ACD78h-821ACE54h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821ACE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACE54);
		  /* 821ACE54h */ case    0:  		/* lwz R10, <#[R1 + 572]> */
		/* 821ACE54h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000023C) );
		/* 821ACE54h case    0:*/		return 0x821ACE58;
		  /* 821ACE58h */ case    1:  		/* addi R5, R1, 556 */
		/* 821ACE58h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x22C);
		/* 821ACE58h case    1:*/		return 0x821ACE5C;
		  /* 821ACE5Ch */ case    2:  		/* lwz R9, <#[R1 + 260]> */
		/* 821ACE5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000104) );
		/* 821ACE5Ch case    2:*/		return 0x821ACE60;
		  /* 821ACE60h */ case    3:  		/* addi R31, R1, 708 */
		/* 821ACE60h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x2C4);
		/* 821ACE60h case    3:*/		return 0x821ACE64;
		  /* 821ACE64h */ case    4:  		/* rlwinm R4, R10, 2, 0, 29 */
		/* 821ACE64h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R10);
		/* 821ACE64h case    4:*/		return 0x821ACE68;
		  /* 821ACE68h */ case    5:  		/* lwz R10, <#[R1 + 312]> */
		/* 821ACE68h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000138) );
		/* 821ACE68h case    5:*/		return 0x821ACE6C;
		  /* 821ACE6Ch */ case    6:  		/* addi R7, R1, 544 */
		/* 821ACE6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x220);
		/* 821ACE6Ch case    6:*/		return 0x821ACE70;
		  /* 821ACE70h */ case    7:  		/* lwz R6, <#[R1 + 264]> */
		/* 821ACE70h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000108) );
		/* 821ACE70h case    7:*/		return 0x821ACE74;
		  /* 821ACE74h */ case    8:  		/* mr R3, R20 */
		/* 821ACE74h case    8:*/		regs.R3 = regs.R20;
		/* 821ACE74h case    8:*/		return 0x821ACE78;
		  /* 821ACE78h */ case    9:  		/* stw R25, <#[R1 + 84]> */
		/* 821ACE78h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821ACE78h case    9:*/		return 0x821ACE7C;
		  /* 821ACE7Ch */ case   10:  		/* stw R7, <#[R1 + 92]> */
		/* 821ACE7Ch case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821ACE7Ch case   10:*/		return 0x821ACE80;
		  /* 821ACE80h */ case   11:  		/* li R7, 0 */
		/* 821ACE80h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821ACE80h case   11:*/		return 0x821ACE84;
		  /* 821ACE84h */ case   12:  		/* stwx R9, <#[R4 + R5]> */
		/* 821ACE84h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 821ACE84h case   12:*/		return 0x821ACE88;
		  /* 821ACE88h */ case   13:  		/* mr R5, R11 */
		/* 821ACE88h case   13:*/		regs.R5 = regs.R11;
		/* 821ACE88h case   13:*/		return 0x821ACE8C;
		  /* 821ACE8Ch */ case   14:  		/* mr R4, R25 */
		/* 821ACE8Ch case   14:*/		regs.R4 = regs.R25;
		/* 821ACE8Ch case   14:*/		return 0x821ACE90;
		  /* 821ACE90h */ case   15:  		/* lwz R11, <#[R1 + 740]> */
		/* 821ACE90h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002E4) );
		/* 821ACE90h case   15:*/		return 0x821ACE94;
		  /* 821ACE94h */ case   16:  		/* lwz R28, <#[R1 + 572]> */
		/* 821ACE94h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000023C) );
		/* 821ACE94h case   16:*/		return 0x821ACE98;
		  /* 821ACE98h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821ACE98h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821ACE98h case   17:*/		return 0x821ACE9C;
		  /* 821ACE9Ch */ case   18:  		/* addi R28, R28, 1 */
		/* 821ACE9Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821ACE9Ch case   18:*/		return 0x821ACEA0;
		  /* 821ACEA0h */ case   19:  		/* stw R28, <#[R1 + 572]> */
		/* 821ACEA0h case   19:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000023C) );
		/* 821ACEA0h case   19:*/		return 0x821ACEA4;
		  /* 821ACEA4h */ case   20:  		/* stwx R25, <#[R11 + R31]> */
		/* 821ACEA4h case   20:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821ACEA4h case   20:*/		return 0x821ACEA8;
		  /* 821ACEA8h */ case   21:  		/* lwz R11, <#[R1 + 740]> */
		/* 821ACEA8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002E4) );
		/* 821ACEA8h case   21:*/		return 0x821ACEAC;
		  /* 821ACEACh */ case   22:  		/* addi R11, R11, 1 */
		/* 821ACEACh case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821ACEACh case   22:*/		return 0x821ACEB0;
		  /* 821ACEB0h */ case   23:  		/* stw R11, <#[R1 + 740]> */
		/* 821ACEB0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002E4) );
		/* 821ACEB0h case   23:*/		return 0x821ACEB4;
		  /* 821ACEB4h */ case   24:  		/* bl -69100 */
		/* 821ACEB4h case   24:*/		regs.LR = 0x821ACEB8; return 0x8219C0C8;
		/* 821ACEB4h case   24:*/		return 0x821ACEB8;
	}
	return 0x821ACEB8;
} // Block from 821ACE54h-821ACEB8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821ACEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACEB8);
		  /* 821ACEB8h */ case    0:  		/* lwz R11, <#[R1 + 236]> */
		/* 821ACEB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 821ACEB8h case    0:*/		return 0x821ACEBC;
	}
	return 0x821ACEBC;
} // Block from 821ACEB8h-821ACEBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ACEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACEBC);
		  /* 821ACEBCh */ case    0:  		/* lwz R10, <#[R1 + 312]> */
		/* 821ACEBCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000138) );
		/* 821ACEBCh case    0:*/		return 0x821ACEC0;
		  /* 821ACEC0h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821ACEC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ACEC0h case    1:*/		return 0x821ACEC4;
		  /* 821ACEC4h */ case    2:  		/* bc 4, CR6_EQ, 228 */
		/* 821ACEC4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821ACFA8;  }
		/* 821ACEC4h case    2:*/		return 0x821ACEC8;
		  /* 821ACEC8h */ case    3:  		/* lwz R5, <#[R1 + 304]> */
		/* 821ACEC8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000130) );
		/* 821ACEC8h case    3:*/		return 0x821ACECC;
		  /* 821ACECCh */ case    4:  		/* lwz R10, <#[R5 + 8]> */
		/* 821ACECCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 821ACECCh case    4:*/		return 0x821ACED0;
		  /* 821ACED0h */ case    5:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ACED0h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ACED0h case    5:*/		return 0x821ACED4;
		  /* 821ACED4h */ case    6:  		/* cmplwi CR6, R10, 384 */
		/* 821ACED4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000180);
		/* 821ACED4h case    6:*/		return 0x821ACED8;
		  /* 821ACED8h */ case    7:  		/* bc 4, CR6_EQ, 208 */
		/* 821ACED8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821ACFA8;  }
		/* 821ACED8h case    7:*/		return 0x821ACEDC;
		  /* 821ACEDCh */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821ACEDCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821ACEDCh case    8:*/		return 0x821ACEE0;
		  /* 821ACEE0h */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ACEE0h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ACEE0h case    9:*/		return 0x821ACEE4;
		  /* 821ACEE4h */ case   10:  		/* cmplwi CR6, R10, 16000 */
		/* 821ACEE4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821ACEE4h case   10:*/		return 0x821ACEE8;
		  /* 821ACEE8h */ case   11:  		/* bc 4, CR6_EQ, 92 */
		/* 821ACEE8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821ACF44;  }
		/* 821ACEE8h case   11:*/		return 0x821ACEEC;
		  /* 821ACEECh */ case   12:  		/* lwz R3, <#[R5 + 48]> */
		/* 821ACEECh case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + 0x00000030) );
		/* 821ACEECh case   12:*/		return 0x821ACEF0;
		  /* 821ACEF0h */ case   13:  		/* li R10, 1 */
		/* 821ACEF0h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ACEF0h case   13:*/		return 0x821ACEF4;
		  /* 821ACEF4h */ case   14:  		/* li R9, 0 */
		/* 821ACEF4h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821ACEF4h case   14:*/		return 0x821ACEF8;
		  /* 821ACEF8h */ case   15:  		/* lwz R8, <#[R25 + 28]> */
		/* 821ACEF8h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821ACEF8h case   15:*/		return 0x821ACEFC;
		  /* 821ACEFCh */ case   16:  		/* addi R7, R1, 420 */
		/* 821ACEFCh case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A4);
		/* 821ACEFCh case   16:*/		return 0x821ACF00;
		  /* 821ACF00h */ case   17:  		/* lwz R4, <#[R1 + 260]> */
		/* 821ACF00h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000104) );
		/* 821ACF00h case   17:*/		return 0x821ACF04;
		  /* 821ACF04h */ case   18:  		/* addi R6, R1, 428 */
		/* 821ACF04h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1AC);
		/* 821ACF04h case   18:*/		return 0x821ACF08;
		  /* 821ACF08h */ case   19:  		/* addi R5, R1, 436 */
		/* 821ACF08h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1B4);
		/* 821ACF08h case   19:*/		return 0x821ACF0C;
		  /* 821ACF0Ch */ case   20:  		/* bl 484804 */
		/* 821ACF0Ch case   20:*/		regs.LR = 0x821ACF10; return 0x822234D0;
		/* 821ACF0Ch case   20:*/		return 0x821ACF10;
		  /* 821ACF10h */ case   21:  		/* addi R11, R1, 768 */
		/* 821ACF10h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x300);
		/* 821ACF10h case   21:*/		return 0x821ACF14;
		  /* 821ACF14h */ case   22:  		/* stw R25, <#[R1 + 84]> */
		/* 821ACF14h case   22:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821ACF14h case   22:*/		return 0x821ACF18;
		  /* 821ACF18h */ case   23:  		/* li R7, 0 */
		/* 821ACF18h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821ACF18h case   23:*/		return 0x821ACF1C;
		  /* 821ACF1Ch */ case   24:  		/* stw R11, <#[R1 + 92]> */
		/* 821ACF1Ch case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821ACF1Ch case   24:*/		return 0x821ACF20;
		  /* 821ACF20h */ case   25:  		/* li R6, 0 */
		/* 821ACF20h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821ACF20h case   25:*/		return 0x821ACF24;
		  /* 821ACF24h */ case   26:  		/* mr R5, R25 */
		/* 821ACF24h case   26:*/		regs.R5 = regs.R25;
		/* 821ACF24h case   26:*/		return 0x821ACF28;
		  /* 821ACF28h */ case   27:  		/* lwz R10, <#[R1 + 420]> */
		/* 821ACF28h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001A4) );
		/* 821ACF28h case   27:*/		return 0x821ACF2C;
		  /* 821ACF2Ch */ case   28:  		/* mr R4, R25 */
		/* 821ACF2Ch case   28:*/		regs.R4 = regs.R25;
		/* 821ACF2Ch case   28:*/		return 0x821ACF30;
		  /* 821ACF30h */ case   29:  		/* lwz R9, <#[R1 + 428]> */
		/* 821ACF30h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000001AC) );
		/* 821ACF30h case   29:*/		return 0x821ACF34;
		  /* 821ACF34h */ case   30:  		/* mr R3, R20 */
		/* 821ACF34h case   30:*/		regs.R3 = regs.R20;
		/* 821ACF34h case   30:*/		return 0x821ACF38;
		  /* 821ACF38h */ case   31:  		/* lwz R8, <#[R1 + 436]> */
		/* 821ACF38h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000001B4) );
		/* 821ACF38h case   31:*/		return 0x821ACF3C;
		  /* 821ACF3Ch */ case   32:  		/* bl -69236 */
		/* 821ACF3Ch case   32:*/		regs.LR = 0x821ACF40; return 0x8219C0C8;
		/* 821ACF3Ch case   32:*/		return 0x821ACF40;
		  /* 821ACF40h */ case   33:  		/* b 104 */
		/* 821ACF40h case   33:*/		return 0x821ACFA8;
		/* 821ACF40h case   33:*/		return 0x821ACF44;
	}
	return 0x821ACF44;
} // Block from 821ACEBCh-821ACF44h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821ACF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACF44);
		  /* 821ACF44h */ case    0:  		/* lwz R10, <#[R1 + 796]> */
		/* 821ACF44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000031C) );
		/* 821ACF44h case    0:*/		return 0x821ACF48;
		  /* 821ACF48h */ case    1:  		/* addi R4, R1, 780 */
		/* 821ACF48h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x30C);
		/* 821ACF48h case    1:*/		return 0x821ACF4C;
		  /* 821ACF4Ch */ case    2:  		/* lwz R9, <#[R1 + 264]> */
		/* 821ACF4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000108) );
		/* 821ACF4Ch case    2:*/		return 0x821ACF50;
		  /* 821ACF50h */ case    3:  		/* mr R8, R11 */
		/* 821ACF50h case    3:*/		regs.R8 = regs.R11;
		/* 821ACF50h case    3:*/		return 0x821ACF54;
		  /* 821ACF54h */ case    4:  		/* rlwinm R3, R10, 2, 0, 29 */
		/* 821ACF54h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R10);
		/* 821ACF54h case    4:*/		return 0x821ACF58;
		  /* 821ACF58h */ case    5:  		/* stw R25, <#[R1 + 84]> */
		/* 821ACF58h case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821ACF58h case    5:*/		return 0x821ACF5C;
		  /* 821ACF5Ch */ case    6:  		/* addi R31, R1, 932 */
		/* 821ACF5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x3A4);
		/* 821ACF5Ch case    6:*/		return 0x821ACF60;
		  /* 821ACF60h */ case    7:  		/* lwz R6, <#[R1 + 260]> */
		/* 821ACF60h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000104) );
		/* 821ACF60h case    7:*/		return 0x821ACF64;
		  /* 821ACF64h */ case    8:  		/* addi R7, R1, 768 */
		/* 821ACF64h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x300);
		/* 821ACF64h case    8:*/		return 0x821ACF68;
		  /* 821ACF68h */ case    9:  		/* lwz R10, <#[R1 + 320]> */
		/* 821ACF68h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000140) );
		/* 821ACF68h case    9:*/		return 0x821ACF6C;
		  /* 821ACF6Ch */ case   10:  		/* stw R7, <#[R1 + 92]> */
		/* 821ACF6Ch case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821ACF6Ch case   10:*/		return 0x821ACF70;
		  /* 821ACF70h */ case   11:  		/* li R7, 0 */
		/* 821ACF70h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821ACF70h case   11:*/		return 0x821ACF74;
		  /* 821ACF74h */ case   12:  		/* stwx R9, <#[R3 + R4]> */
		/* 821ACF74h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + regs.R4 + 0x00000000) );
		/* 821ACF74h case   12:*/		return 0x821ACF78;
		  /* 821ACF78h */ case   13:  		/* mr R4, R25 */
		/* 821ACF78h case   13:*/		regs.R4 = regs.R25;
		/* 821ACF78h case   13:*/		return 0x821ACF7C;
		  /* 821ACF7Ch */ case   14:  		/* mr R3, R20 */
		/* 821ACF7Ch case   14:*/		regs.R3 = regs.R20;
		/* 821ACF7Ch case   14:*/		return 0x821ACF80;
		  /* 821ACF80h */ case   15:  		/* lwz R11, <#[R1 + 964]> */
		/* 821ACF80h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000003C4) );
		/* 821ACF80h case   15:*/		return 0x821ACF84;
		  /* 821ACF84h */ case   16:  		/* lwz R28, <#[R1 + 796]> */
		/* 821ACF84h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000031C) );
		/* 821ACF84h case   16:*/		return 0x821ACF88;
		  /* 821ACF88h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821ACF88h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821ACF88h case   17:*/		return 0x821ACF8C;
		  /* 821ACF8Ch */ case   18:  		/* addi R28, R28, 1 */
		/* 821ACF8Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821ACF8Ch case   18:*/		return 0x821ACF90;
		  /* 821ACF90h */ case   19:  		/* stw R28, <#[R1 + 796]> */
		/* 821ACF90h case   19:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000031C) );
		/* 821ACF90h case   19:*/		return 0x821ACF94;
		  /* 821ACF94h */ case   20:  		/* stwx R25, <#[R11 + R31]> */
		/* 821ACF94h case   20:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821ACF94h case   20:*/		return 0x821ACF98;
		  /* 821ACF98h */ case   21:  		/* lwz R11, <#[R1 + 964]> */
		/* 821ACF98h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000003C4) );
		/* 821ACF98h case   21:*/		return 0x821ACF9C;
		  /* 821ACF9Ch */ case   22:  		/* addi R11, R11, 1 */
		/* 821ACF9Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821ACF9Ch case   22:*/		return 0x821ACFA0;
		  /* 821ACFA0h */ case   23:  		/* stw R11, <#[R1 + 964]> */
		/* 821ACFA0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000003C4) );
		/* 821ACFA0h case   23:*/		return 0x821ACFA4;
		  /* 821ACFA4h */ case   24:  		/* bl -69340 */
		/* 821ACFA4h case   24:*/		regs.LR = 0x821ACFA8; return 0x8219C0C8;
		/* 821ACFA4h case   24:*/		return 0x821ACFA8;
	}
	return 0x821ACFA8;
} // Block from 821ACF44h-821ACFA8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821ACFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACFA8);
		  /* 821ACFA8h */ case    0:  		/* lwz R11, <#[R1 + 572]> */
		/* 821ACFA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000023C) );
		/* 821ACFA8h case    0:*/		return 0x821ACFAC;
		  /* 821ACFACh */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 821ACFACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821ACFACh case    1:*/		return 0x821ACFB0;
		  /* 821ACFB0h */ case    2:  		/* bc 12, CR6_EQ, 156 */
		/* 821ACFB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AD04C;  }
		/* 821ACFB0h case    2:*/		return 0x821ACFB4;
		  /* 821ACFB4h */ case    3:  		/* lwz R10, <#[R1 + 752]> */
		/* 821ACFB4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002F0) );
		/* 821ACFB4h case    3:*/		return 0x821ACFB8;
		  /* 821ACFB8h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 821ACFB8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821ACFB8h case    4:*/		return 0x821ACFBC;
		  /* 821ACFBCh */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821ACFBCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821ACFC8;  }
		/* 821ACFBCh case    5:*/		return 0x821ACFC0;
		  /* 821ACFC0h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821ACFC0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ACFC0h case    6:*/		return 0x821ACFC4;
		  /* 821ACFC4h */ case    7:  		/* bc 4, CR6_EQ, 136 */
		/* 821ACFC4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AD04C;  }
		/* 821ACFC4h case    7:*/		return 0x821ACFC8;
	}
	return 0x821ACFC8;
} // Block from 821ACFA8h-821ACFC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821ACFC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACFC8);
		  /* 821ACFC8h */ case    0:  		/* lwz R11, <#[R1 + 796]> */
		/* 821ACFC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000031C) );
		/* 821ACFC8h case    0:*/		return 0x821ACFCC;
		  /* 821ACFCCh */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 821ACFCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821ACFCCh case    1:*/		return 0x821ACFD0;
		  /* 821ACFD0h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 821ACFD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AD044;  }
		/* 821ACFD0h case    2:*/		return 0x821ACFD4;
		  /* 821ACFD4h */ case    3:  		/* lwz R31, <#[R1 + 976]> */
		/* 821ACFD4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000003D0) );
		/* 821ACFD4h case    3:*/		return 0x821ACFD8;
		  /* 821ACFD8h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 821ACFD8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821ACFD8h case    4:*/		return 0x821ACFDC;
		  /* 821ACFDCh */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821ACFDCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821ACFE8;  }
		/* 821ACFDCh case    5:*/		return 0x821ACFE0;
		  /* 821ACFE0h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821ACFE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ACFE0h case    6:*/		return 0x821ACFE4;
		  /* 821ACFE4h */ case    7:  		/* bc 4, CR6_EQ, 96 */
		/* 821ACFE4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AD044;  }
		/* 821ACFE4h case    7:*/		return 0x821ACFE8;
	}
	return 0x821ACFE8;
} // Block from 821ACFC8h-821ACFE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821ACFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ACFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ACFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ACFE8);
		  /* 821ACFE8h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821ACFE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ACFE8h case    0:*/		return 0x821ACFEC;
		  /* 821ACFECh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821ACFECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821AD000;  }
		/* 821ACFECh case    1:*/		return 0x821ACFF0;
		  /* 821ACFF0h */ case    2:  		/* mr R3, R20 */
		/* 821ACFF0h case    2:*/		regs.R3 = regs.R20;
		/* 821ACFF0h case    2:*/		return 0x821ACFF4;
		  /* 821ACFF4h */ case    3:  		/* lwz R5, <#[R1 + 756]> */
		/* 821ACFF4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002F4) );
		/* 821ACFF4h case    3:*/		return 0x821ACFF8;
		  /* 821ACFF8h */ case    4:  		/* lwz R4, <#[R1 + 544]> */
		/* 821ACFF8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000220) );
		/* 821ACFF8h case    4:*/		return 0x821ACFFC;
		  /* 821ACFFCh */ case    5:  		/* bl 524588 */
		/* 821ACFFCh case    5:*/		regs.LR = 0x821AD000; return 0x8222D128;
		/* 821ACFFCh case    5:*/		return 0x821AD000;
	}
	return 0x821AD000;
} // Block from 821ACFE8h-821AD000h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AD000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD000);
		  /* 821AD000h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821AD000h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AD000h case    0:*/		return 0x821AD004;
		  /* 821AD004h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821AD004h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AD018;  }
		/* 821AD004h case    1:*/		return 0x821AD008;
		  /* 821AD008h */ case    2:  		/* mr R3, R20 */
		/* 821AD008h case    2:*/		regs.R3 = regs.R20;
		/* 821AD008h case    2:*/		return 0x821AD00C;
		  /* 821AD00Ch */ case    3:  		/* lwz R5, <#[R1 + 980]> */
		/* 821AD00Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000003D4) );
		/* 821AD00Ch case    3:*/		return 0x821AD010;
		  /* 821AD010h */ case    4:  		/* lwz R4, <#[R1 + 768]> */
		/* 821AD010h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000300) );
		/* 821AD010h case    4:*/		return 0x821AD014;
		  /* 821AD014h */ case    5:  		/* bl 524564 */
		/* 821AD014h case    5:*/		regs.LR = 0x821AD018; return 0x8222D128;
		/* 821AD014h case    5:*/		return 0x821AD018;
	}
	return 0x821AD018;
} // Block from 821AD000h-821AD018h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AD018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD018);
		  /* 821AD018h */ case    0:  		/* li R6, 0 */
		/* 821AD018h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AD018h case    0:*/		return 0x821AD01C;
		  /* 821AD01Ch */ case    1:  		/* li R5, 1 */
		/* 821AD01Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821AD01Ch case    1:*/		return 0x821AD020;
		  /* 821AD020h */ case    2:  		/* mr R4, R30 */
		/* 821AD020h case    2:*/		regs.R4 = regs.R30;
		/* 821AD020h case    2:*/		return 0x821AD024;
		  /* 821AD024h */ case    3:  		/* mr R3, R20 */
		/* 821AD024h case    3:*/		regs.R3 = regs.R20;
		/* 821AD024h case    3:*/		return 0x821AD028;
		  /* 821AD028h */ case    4:  		/* bl -37288 */
		/* 821AD028h case    4:*/		regs.LR = 0x821AD02C; return 0x821A3E80;
		/* 821AD028h case    4:*/		return 0x821AD02C;
		  /* 821AD02Ch */ case    5:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821AD02Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821AD02Ch case    5:*/		return 0x821AD030;
		  /* 821AD030h */ case    6:  		/* bc 4, CR0_EQ, -9804 */
		/* 821AD030h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821AD030h case    6:*/		return 0x821AD034;
		  /* 821AD034h */ case    7:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AD034h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AD034h case    7:*/		return 0x821AD038;
		  /* 821AD038h */ case    8:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AD038h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AD038h case    8:*/		return 0x821AD03C;
		  /* 821AD03Ch */ case    9:  		/* stw R11, <#[R25 + 8]> */
		/* 821AD03Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AD03Ch case    9:*/		return 0x821AD040;
		  /* 821AD040h */ case   10:  		/* b -9820 */
		/* 821AD040h case   10:*/		return 0x821AA9E4;
		/* 821AD040h case   10:*/		return 0x821AD044;
	}
	return 0x821AD044;
} // Block from 821AD018h-821AD044h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AD044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD044);
		  /* 821AD044h */ case    0:  		/* addi R5, R1, 768 */
		/* 821AD044h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x300);
		/* 821AD044h case    0:*/		return 0x821AD048;
		  /* 821AD048h */ case    1:  		/* b 8 */
		/* 821AD048h case    1:*/		return 0x821AD050;
		/* 821AD048h case    1:*/		return 0x821AD04C;
	}
	return 0x821AD04C;
} // Block from 821AD044h-821AD04Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AD04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD04C);
		  /* 821AD04Ch */ case    0:  		/* addi R5, R1, 544 */
		/* 821AD04Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x220);
		/* 821AD04Ch case    0:*/		return 0x821AD050;
	}
	return 0x821AD050;
} // Block from 821AD04Ch-821AD050h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD050);
		  /* 821AD050h */ case    0:  		/* mr R4, R25 */
		/* 821AD050h case    0:*/		regs.R4 = regs.R25;
		/* 821AD050h case    0:*/		return 0x821AD054;
		  /* 821AD054h */ case    1:  		/* mr R3, R20 */
		/* 821AD054h case    1:*/		regs.R3 = regs.R20;
		/* 821AD054h case    1:*/		return 0x821AD058;
		  /* 821AD058h */ case    2:  		/* bl -16112 */
		/* 821AD058h case    2:*/		regs.LR = 0x821AD05C; return 0x821A9168;
		/* 821AD058h case    2:*/		return 0x821AD05C;
		  /* 821AD05Ch */ case    3:  		/* b -9844 */
		/* 821AD05Ch case    3:*/		return 0x821AA9E8;
		/* 821AD05Ch case    3:*/		return 0x821AD060;
	}
	return 0x821AD060;
} // Block from 821AD050h-821AD060h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AD060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD060);
		  /* 821AD060h */ case    0:  		/* lis R11, -32256 */
		/* 821AD060h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821AD060h case    0:*/		return 0x821AD064;
		  /* 821AD064h */ case    1:  		/* lwz R3, <#[R25 + 48]> */
		/* 821AD064h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821AD064h case    1:*/		return 0x821AD068;
		  /* 821AD068h */ case    2:  		/* lfd FR29, <#[R11 + 1808]> */
		/* 821AD068h case    2:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000710) );
		/* 821AD068h case    2:*/		return 0x821AD06C;
		  /* 821AD06Ch */ case    3:  		/* fmr FR1, FR29 */
		/* 821AD06Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821AD06Ch case    3:*/		return 0x821AD070;
		  /* 821AD070h */ case    4:  		/* bl -291520 */
		/* 821AD070h case    4:*/		regs.LR = 0x821AD074; return 0x82165DB0;
		/* 821AD070h case    4:*/		return 0x821AD074;
		  /* 821AD074h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD074h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD074h case    5:*/		return 0x821AD078;
		  /* 821AD078h */ case    6:  		/* bc 12, CR0_EQ, 128 */
		/* 821AD078h case    6:*/		if ( regs.CR[0].eq ) { return 0x821AD0F8;  }
		/* 821AD078h case    6:*/		return 0x821AD07C;
		  /* 821AD07Ch */ case    7:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AD07Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AD07Ch case    7:*/		return 0x821AD080;
		  /* 821AD080h */ case    8:  		/* mr R3, R20 */
		/* 821AD080h case    8:*/		regs.R3 = regs.R20;
		/* 821AD080h case    8:*/		return 0x821AD084;
		  /* 821AD084h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AD084h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AD084h case    9:*/		return 0x821AD088;
		  /* 821AD088h */ case   10:  		/* bc 12, CR0_EQ, 76 */
		/* 821AD088h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AD0D4;  }
		/* 821AD088h case   10:*/		return 0x821AD08C;
		  /* 821AD08Ch */ case   11:  		/* lwz R6, <#[R25 + 44]> */
		/* 821AD08Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AD08Ch case   11:*/		return 0x821AD090;
		  /* 821AD090h */ case   12:  		/* mr R5, R25 */
		/* 821AD090h case   12:*/		regs.R5 = regs.R25;
		/* 821AD090h case   12:*/		return 0x821AD094;
		  /* 821AD094h */ case   13:  		/* li R4, 0 */
		/* 821AD094h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AD094h case   13:*/		return 0x821AD098;
		  /* 821AD098h */ case   14:  		/* mr R7, R6 */
		/* 821AD098h case   14:*/		regs.R7 = regs.R6;
		/* 821AD098h case   14:*/		return 0x821AD09C;
		  /* 821AD09Ch */ case   15:  		/* bl -61924 */
		/* 821AD09Ch case   15:*/		regs.LR = 0x821AD0A0; return 0x8219DEB8;
		/* 821AD09Ch case   15:*/		return 0x821AD0A0;
		  /* 821AD0A0h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AD0A0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AD0A0h case   16:*/		return 0x821AD0A4;
		  /* 821AD0A4h */ case   17:  		/* mr R31, R3 */
		/* 821AD0A4h case   17:*/		regs.R31 = regs.R3;
		/* 821AD0A4h case   17:*/		return 0x821AD0A8;
		  /* 821AD0A8h */ case   18:  		/* ori R11, R11, 1 */
		/* 821AD0A8h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AD0A8h case   18:*/		return 0x821AD0AC;
		  /* 821AD0ACh */ case   19:  		/* mr R4, R25 */
		/* 821AD0ACh case   19:*/		regs.R4 = regs.R25;
		/* 821AD0ACh case   19:*/		return 0x821AD0B0;
		  /* 821AD0B0h */ case   20:  		/* mr R3, R20 */
		/* 821AD0B0h case   20:*/		regs.R3 = regs.R20;
		/* 821AD0B0h case   20:*/		return 0x821AD0B4;
		  /* 821AD0B4h */ case   21:  		/* stw R11, <#[R31 + 8]> */
		/* 821AD0B4h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AD0B4h case   21:*/		return 0x821AD0B8;
	}
	return 0x821AD0B8;
} // Block from 821AD060h-821AD0B8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821AD0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD0B8);
		  /* 821AD0B8h */ case    0:  		/* li R6, 228 */
		/* 821AD0B8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821AD0B8h case    0:*/		return 0x821AD0BC;
	}
	return 0x821AD0BC;
} // Block from 821AD0B8h-821AD0BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD0BC);
		  /* 821AD0BCh */ case    0:  		/* mr R5, R31 */
		/* 821AD0BCh case    0:*/		regs.R5 = regs.R31;
		/* 821AD0BCh case    0:*/		return 0x821AD0C0;
		  /* 821AD0C0h */ case    1:  		/* li R7, 1 */
		/* 821AD0C0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AD0C0h case    1:*/		return 0x821AD0C4;
		  /* 821AD0C4h */ case    2:  		/* li R8, 1 */
		/* 821AD0C4h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AD0C4h case    2:*/		return 0x821AD0C8;
		  /* 821AD0C8h */ case    3:  		/* bl -33896 */
		/* 821AD0C8h case    3:*/		regs.LR = 0x821AD0CC; return 0x821A4C60;
		/* 821AD0C8h case    3:*/		return 0x821AD0CC;
		  /* 821AD0CCh */ case    4:  		/* mr R3, R31 */
		/* 821AD0CCh case    4:*/		regs.R3 = regs.R31;
		/* 821AD0CCh case    4:*/		return 0x821AD0D0;
		  /* 821AD0D0h */ case    5:  		/* b -9960 */
		/* 821AD0D0h case    5:*/		return 0x821AA9E8;
		/* 821AD0D0h case    5:*/		return 0x821AD0D4;
	}
	return 0x821AD0D4;
} // Block from 821AD0BCh-821AD0D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AD0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD0D4);
		  /* 821AD0D4h */ case    0:  		/* lwz R5, <#[R25 + 44]> */
		/* 821AD0D4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AD0D4h case    0:*/		return 0x821AD0D8;
		  /* 821AD0D8h */ case    1:  		/* li R6, 0 */
		/* 821AD0D8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AD0D8h case    1:*/		return 0x821AD0DC;
		  /* 821AD0DCh */ case    2:  		/* mr R4, R25 */
		/* 821AD0DCh case    2:*/		regs.R4 = regs.R25;
		/* 821AD0DCh case    2:*/		return 0x821AD0E0;
		  /* 821AD0E0h */ case    3:  		/* lwz R31, <#[R5 + 12]> */
		/* 821AD0E0h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x0000000C) );
		/* 821AD0E0h case    3:*/		return 0x821AD0E4;
		  /* 821AD0E4h */ case    4:  		/* bl -31476 */
		/* 821AD0E4h case    4:*/		regs.LR = 0x821AD0E8; return 0x821A55F0;
		/* 821AD0E4h case    4:*/		return 0x821AD0E8;
		  /* 821AD0E8h */ case    5:  		/* mr R3, R25 */
		/* 821AD0E8h case    5:*/		regs.R3 = regs.R25;
		/* 821AD0E8h case    5:*/		return 0x821AD0EC;
		  /* 821AD0ECh */ case    6:  		/* bl -296812 */
		/* 821AD0ECh case    6:*/		regs.LR = 0x821AD0F0; return 0x82164980;
		/* 821AD0ECh case    6:*/		return 0x821AD0F0;
		  /* 821AD0F0h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD0F0h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD0F0h case    7:*/		return 0x821AD0F4;
		  /* 821AD0F4h */ case    8:  		/* bc 4, CR0_EQ, -40 */
		/* 821AD0F4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821AD0CC;  }
		/* 821AD0F4h case    8:*/		return 0x821AD0F8;
	}
	return 0x821AD0F8;
} // Block from 821AD0D4h-821AD0F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AD0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD0F8);
		  /* 821AD0F8h */ case    0:  		/* lwz R10, <#[R25 + 44]> */
		/* 821AD0F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AD0F8h case    0:*/		return 0x821AD0FC;
		  /* 821AD0FCh */ case    1:  		/* lwz R11, <#[R25 + 48]> */
		/* 821AD0FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821AD0FCh case    1:*/		return 0x821AD100;
		  /* 821AD100h */ case    2:  		/* mr R9, R10 */
		/* 821AD100h case    2:*/		regs.R9 = regs.R10;
		/* 821AD100h case    2:*/		return 0x821AD104;
		  /* 821AD104h */ case    3:  		/* lwz R8, <#[R10 + 12]> */
		/* 821AD104h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000000C) );
		/* 821AD104h case    3:*/		return 0x821AD108;
		  /* 821AD108h */ case    4:  		/* lwz R8, <#[R8 + 8]> */
		/* 821AD108h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821AD108h case    4:*/		return 0x821AD10C;
		  /* 821AD10Ch */ case    5:  		/* rlwinm R8, R8, 0, 18, 24 */
		/* 821AD10Ch case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R8,regs.R8);
		/* 821AD10Ch case    5:*/		return 0x821AD110;
		  /* 821AD110h */ case    6:  		/* cmplwi CR6, R8, 128 */
		/* 821AD110h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000080);
		/* 821AD110h case    6:*/		return 0x821AD114;
		  /* 821AD114h */ case    7:  		/* bc 12, CR6_EQ, 44 */
		/* 821AD114h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AD140;  }
		/* 821AD114h case    7:*/		return 0x821AD118;
		  /* 821AD118h */ case    8:  		/* lwz R8, <#[R11 + 12]> */
		/* 821AD118h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AD118h case    8:*/		return 0x821AD11C;
		  /* 821AD11Ch */ case    9:  		/* lwz R8, <#[R8 + 8]> */
		/* 821AD11Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821AD11Ch case    9:*/		return 0x821AD120;
		  /* 821AD120h */ case   10:  		/* rlwinm R8, R8, 0, 18, 24 */
		/* 821AD120h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R8,regs.R8);
		/* 821AD120h case   10:*/		return 0x821AD124;
		  /* 821AD124h */ case   11:  		/* cmplwi CR6, R8, 128 */
		/* 821AD124h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000080);
		/* 821AD124h case   11:*/		return 0x821AD128;
		  /* 821AD128h */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 821AD128h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821AD140;  }
		/* 821AD128h case   12:*/		return 0x821AD12C;
		  /* 821AD12Ch */ case   13:  		/* stw R11, <#[R25 + 44]> */
		/* 821AD12Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AD12Ch case   13:*/		return 0x821AD130;
		  /* 821AD130h */ case   14:  		/* mr R9, R11 */
		/* 821AD130h case   14:*/		regs.R9 = regs.R11;
		/* 821AD130h case   14:*/		return 0x821AD134;
		  /* 821AD134h */ case   15:  		/* mr R8, R10 */
		/* 821AD134h case   15:*/		regs.R8 = regs.R10;
		/* 821AD134h case   15:*/		return 0x821AD138;
		  /* 821AD138h */ case   16:  		/* stw R10, <#[R25 + 48]> */
		/* 821AD138h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 821AD138h case   16:*/		return 0x821AD13C;
		  /* 821AD13Ch */ case   17:  		/* mr R11, R10 */
		/* 821AD13Ch case   17:*/		regs.R11 = regs.R10;
		/* 821AD13Ch case   17:*/		return 0x821AD140;
	}
	return 0x821AD140;
} // Block from 821AD0F8h-821AD140h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821AD140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD140);
		  /* 821AD140h */ case    0:  		/* lis R10, -32256 */
		/* 821AD140h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821AD140h case    0:*/		return 0x821AD144;
		  /* 821AD144h */ case    1:  		/* lwz R7, <#[R25 + 8]> */
		/* 821AD144h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000008) );
		/* 821AD144h case    1:*/		return 0x821AD148;
		  /* 821AD148h */ case    2:  		/* rlwinm. R8, R7, 0, 31, 31 */
		/* 821AD148h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R7);
		/* 821AD148h case    2:*/		return 0x821AD14C;
		  /* 821AD14Ch */ case    3:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 821AD14Ch case    3:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 821AD14Ch case    3:*/		return 0x821AD150;
		  /* 821AD150h */ case    4:  		/* bc 4, CR0_EQ, 892 */
		/* 821AD150h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821AD4CC;  }
		/* 821AD150h case    4:*/		return 0x821AD154;
		  /* 821AD154h */ case    5:  		/* lwz R10, <#[R9 + 12]> */
		/* 821AD154h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000000C) );
		/* 821AD154h case    5:*/		return 0x821AD158;
		  /* 821AD158h */ case    6:  		/* lwz R8, <#[R11 + 12]> */
		/* 821AD158h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AD158h case    6:*/		return 0x821AD15C;
		  /* 821AD15Ch */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AD15Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AD15Ch case    7:*/		return 0x821AD160;
		  /* 821AD160h */ case    8:  		/* lwz R8, <#[R8 + 8]> */
		/* 821AD160h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821AD160h case    8:*/		return 0x821AD164;
		  /* 821AD164h */ case    9:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821AD164h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821AD164h case    9:*/		return 0x821AD168;
		  /* 821AD168h */ case   10:  		/* rlwinm R8, R8, 0, 18, 24 */
		/* 821AD168h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R8,regs.R8);
		/* 821AD168h case   10:*/		return 0x821AD16C;
		  /* 821AD16Ch */ case   11:  		/* addi R6, R10, -125 */
		/* 821AD16Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFF83);
		/* 821AD16Ch case   11:*/		return 0x821AD170;
		  /* 821AD170h */ case   12:  		/* addi R8, R8, -16000 */
		/* 821AD170h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFC180);
		/* 821AD170h case   12:*/		return 0x821AD174;
		  /* 821AD174h */ case   13:  		/* cntlzw R6, R6 */
		/* 821AD174h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R6,regs.R6);
		/* 821AD174h case   13:*/		return 0x821AD178;
		  /* 821AD178h */ case   14:  		/* cntlzw R8, R8 */
		/* 821AD178h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 821AD178h case   14:*/		return 0x821AD17C;
		  /* 821AD17Ch */ case   15:  		/* rlwinm R6, R6, 27, 31, 31 */
		/* 821AD17Ch case   15:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R6,regs.R6);
		/* 821AD17Ch case   15:*/		return 0x821AD180;
		  /* 821AD180h */ case   16:  		/* rlwinm R8, R8, 27, 31, 31 */
		/* 821AD180h case   16:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R8);
		/* 821AD180h case   16:*/		return 0x821AD184;
		  /* 821AD184h */ case   17:  		/* cmpw CR6, R6, R8 */
		/* 821AD184h case   17:*/		cpu::op::cmpw<6>(regs,regs.R6,regs.R8);
		/* 821AD184h case   17:*/		return 0x821AD188;
		  /* 821AD188h */ case   18:  		/* bc 12, CR6_EQ, 836 */
		/* 821AD188h case   18:*/		if ( regs.CR[6].eq ) { return 0x821AD4CC;  }
		/* 821AD188h case   18:*/		return 0x821AD18C;
		  /* 821AD18Ch */ case   19:  		/* cmplwi CR6, R10, 125 */
		/* 821AD18Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821AD18Ch case   19:*/		return 0x821AD190;
		  /* 821AD190h */ case   20:  		/* bc 4, CR6_EQ, 16 */
		/* 821AD190h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821AD1A0;  }
		/* 821AD190h case   20:*/		return 0x821AD194;
		  /* 821AD194h */ case   21:  		/* mr R29, R9 */
		/* 821AD194h case   21:*/		regs.R29 = regs.R9;
		/* 821AD194h case   21:*/		return 0x821AD198;
		  /* 821AD198h */ case   22:  		/* mr R25, R11 */
		/* 821AD198h case   22:*/		regs.R25 = regs.R11;
		/* 821AD198h case   22:*/		return 0x821AD19C;
		  /* 821AD19Ch */ case   23:  		/* b 12 */
		/* 821AD19Ch case   23:*/		return 0x821AD1A8;
		/* 821AD19Ch case   23:*/		return 0x821AD1A0;
	}
	return 0x821AD1A0;
} // Block from 821AD140h-821AD1A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AD1A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD1A0);
		  /* 821AD1A0h */ case    0:  		/* mr R29, R11 */
		/* 821AD1A0h case    0:*/		regs.R29 = regs.R11;
		/* 821AD1A0h case    0:*/		return 0x821AD1A4;
		  /* 821AD1A4h */ case    1:  		/* mr R25, R9 */
		/* 821AD1A4h case    1:*/		regs.R25 = regs.R9;
		/* 821AD1A4h case    1:*/		return 0x821AD1A8;
	}
	return 0x821AD1A8;
} // Block from 821AD1A0h-821AD1A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AD1A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD1A8);
		  /* 821AD1A8h */ case    0:  		/* li R24, 0 */
		/* 821AD1A8h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821AD1A8h case    0:*/		return 0x821AD1AC;
		  /* 821AD1ACh */ case    1:  		/* rlwinm R31, R7, 31, 28, 31 */
		/* 821AD1ACh case    1:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R31,regs.R7);
		/* 821AD1ACh case    1:*/		return 0x821AD1B0;
		  /* 821AD1B0h */ case    2:  		/* li R22, 1 */
		/* 821AD1B0h case    2:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821AD1B0h case    2:*/		return 0x821AD1B4;
		  /* 821AD1B4h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821AD1B4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AD1B4h case    3:*/		return 0x821AD1B8;
		  /* 821AD1B8h */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 821AD1B8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821AD20C;  }
		/* 821AD1B8h case    4:*/		return 0x821AD1BC;
		  /* 821AD1BCh */ case    5:  		/* addi R11, R31, -1 */
		/* 821AD1BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821AD1BCh case    5:*/		return 0x821AD1C0;
		  /* 821AD1C0h */ case    6:  		/* lwz R10, <#[R29]> */
		/* 821AD1C0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821AD1C0h case    6:*/		return 0x821AD1C4;
		  /* 821AD1C4h */ case    7:  		/* lwz R3, <#[R29 + 12]> */
		/* 821AD1C4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AD1C4h case    7:*/		return 0x821AD1C8;
		  /* 821AD1C8h */ case    8:  		/* andc R11, R31, R11 */
		/* 821AD1C8h case    8:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821AD1C8h case    8:*/		return 0x821AD1CC;
		  /* 821AD1CCh */ case    9:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821AD1CCh case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821AD1CCh case    9:*/		return 0x821AD1D0;
		  /* 821AD1D0h */ case   10:  		/* cntlzw R11, R11 */
		/* 821AD1D0h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821AD1D0h case   10:*/		return 0x821AD1D4;
		  /* 821AD1D4h */ case   11:  		/* rlwinm R5, R10, 0, 27, 31 */
		/* 821AD1D4h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R10);
		/* 821AD1D4h case   11:*/		return 0x821AD1D8;
		  /* 821AD1D8h */ case   12:  		/* subfic R30, R11, 31 */
		/* 821AD1D8h case   12:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R11,0x1F);
		/* 821AD1D8h case   12:*/		return 0x821AD1DC;
		  /* 821AD1DCh */ case   13:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821AD1DCh case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821AD1DCh case   13:*/		return 0x821AD1E0;
		  /* 821AD1E0h */ case   14:  		/* srw R11, R9, R11 */
		/* 821AD1E0h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821AD1E0h case   14:*/		return 0x821AD1E4;
		  /* 821AD1E4h */ case   15:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821AD1E4h case   15:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821AD1E4h case   15:*/		return 0x821AD1E8;
		  /* 821AD1E8h */ case   16:  		/* bl 476320 */
		/* 821AD1E8h case   16:*/		regs.LR = 0x821AD1EC; return 0x82221688;
		/* 821AD1E8h case   16:*/		return 0x821AD1EC;
		  /* 821AD1ECh */ case   17:  		/* fcmpu CR6, FR1, FR31 */
		/* 821AD1ECh case   17:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821AD1ECh case   17:*/		return 0x821AD1F0;
		  /* 821AD1F0h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 821AD1F0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821AD1FC;  }
		/* 821AD1F0h case   18:*/		return 0x821AD1F4;
		  /* 821AD1F4h */ case   19:  		/* slw R11, R22, R30 */
		/* 821AD1F4h case   19:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R30);
		/* 821AD1F4h case   19:*/		return 0x821AD1F8;
		  /* 821AD1F8h */ case   20:  		/* or R24, R11, R24 */
		/* 821AD1F8h case   20:*/		cpu::op::or<0>(regs,&regs.R24,regs.R11,regs.R24);
		/* 821AD1F8h case   20:*/		return 0x821AD1FC;
	}
	return 0x821AD1FC;
} // Block from 821AD1A8h-821AD1FCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821AD1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD1FC);
		  /* 821AD1FCh */ case    0:  		/* addi R11, R31, -1 */
		/* 821AD1FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821AD1FCh case    0:*/		return 0x821AD200;
		  /* 821AD200h */ case    1:  		/* andc R11, R31, R11 */
		/* 821AD200h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821AD200h case    1:*/		return 0x821AD204;
		  /* 821AD204h */ case    2:  		/* subf R31, R11, R31 */
		/* 821AD204h case    2:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821AD204h case    2:*/		return 0x821AD208;
		  /* 821AD208h */ case    3:  		/* b -84 */
		/* 821AD208h case    3:*/		return 0x821AD1B4;
		/* 821AD208h case    3:*/		return 0x821AD20C;
	}
	return 0x821AD20C;
} // Block from 821AD1FCh-821AD20Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AD20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD20C);
		  /* 821AD20Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821AD20Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821AD20Ch case    0:*/		return 0x821AD210;
		  /* 821AD210h */ case    1:  		/* bc 12, CR6_EQ, 700 */
		/* 821AD210h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AD4CC;  }
		/* 821AD210h case    1:*/		return 0x821AD214;
		  /* 821AD214h */ case    2:  		/* lwz R21, <#[R1 + 1244]> */
		/* 821AD214h case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AD214h case    2:*/		return 0x821AD218;
		  /* 821AD218h */ case    3:  		/* lwz R23, <#[R1 + 1236]> */
		/* 821AD218h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AD218h case    3:*/		return 0x821AD21C;
		  /* 821AD21Ch */ case    4:  		/* addi R26, R21, 4 */
		/* 821AD21Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R21,0x4);
		/* 821AD21Ch case    4:*/		return 0x821AD220;
		  /* 821AD220h */ case    5:  		/* lwz R27, <#[R21 + 4]> */
		/* 821AD220h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R21 + 0x00000004) );
		/* 821AD220h case    5:*/		return 0x821AD224;
		  /* 821AD224h */ case    6:  		/* li R28, 0 */
		/* 821AD224h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821AD224h case    6:*/		return 0x821AD228;
		  /* 821AD228h */ case    7:  		/* mr R29, R27 */
		/* 821AD228h case    7:*/		regs.R29 = regs.R27;
		/* 821AD228h case    7:*/		return 0x821AD22C;
		  /* 821AD22Ch */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 821AD22Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821AD22Ch case    8:*/		return 0x821AD230;
		  /* 821AD230h */ case    9:  		/* bc 12, CR6_EQ, 260 */
		/* 821AD230h case    9:*/		if ( regs.CR[6].eq ) { return 0x821AD334;  }
		/* 821AD230h case    9:*/		return 0x821AD234;
		  /* 821AD234h */ case   10:  		/* lwz R3, <#[R29 + 16]> */
		/* 821AD234h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 821AD234h case   10:*/		return 0x821AD238;
		  /* 821AD238h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 821AD238h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821AD238h case   11:*/		return 0x821AD23C;
		  /* 821AD23Ch */ case   12:  		/* bc 12, CR6_EQ, 240 */
		/* 821AD23Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821AD32C;  }
		/* 821AD23Ch case   12:*/		return 0x821AD240;
		  /* 821AD240h */ case   13:  		/* lwz R31, <#[R29]> */
		/* 821AD240h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821AD240h case   13:*/		return 0x821AD244;
		  /* 821AD244h */ case   14:  		/* rlwinm. R9, R31, 7, 29, 31 */
		/* 821AD244h case   14:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R9,regs.R31);
		/* 821AD244h case   14:*/		return 0x821AD248;
		  /* 821AD248h */ case   15:  		/* bc 12, CR0_EQ, 228 */
		/* 821AD248h case   15:*/		if ( regs.CR[0].eq ) { return 0x821AD32C;  }
		/* 821AD248h case   15:*/		return 0x821AD24C;
		  /* 821AD24Ch */ case   16:  		/* li R30, 0 */
		/* 821AD24Ch case   16:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AD24Ch case   16:*/		return 0x821AD250;
		  /* 821AD250h */ case   17:  		/* li R11, 0 */
		/* 821AD250h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AD250h case   17:*/		return 0x821AD254;
		  /* 821AD254h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 821AD254h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821AD254h case   18:*/		return 0x821AD258;
		  /* 821AD258h */ case   19:  		/* bc 12, CR6_EQ, 44 */
		/* 821AD258h case   19:*/		if ( regs.CR[6].eq ) { return 0x821AD284;  }
		/* 821AD258h case   19:*/		return 0x821AD25C;
		  /* 821AD25Ch */ case   20:  		/* li R10, 0 */
		/* 821AD25Ch case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AD25Ch case   20:*/		return 0x821AD260;
		  /* 821AD260h */ case   21:  		/* rlwinm R8, R31, 27, 24, 31 */
		/* 821AD260h case   21:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R31);
		/* 821AD260h case   21:*/		return 0x821AD264;
		  /* 821AD264h */ case   22:  		/* addi R11, R11, 1 */
		/* 821AD264h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AD264h case   22:*/		return 0x821AD268;
		  /* 821AD268h */ case   23:  		/* srw R8, R8, R10 */
		/* 821AD268h case   23:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 821AD268h case   23:*/		return 0x821AD26C;
		  /* 821AD26Ch */ case   24:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821AD26Ch case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821AD26Ch case   24:*/		return 0x821AD270;
		  /* 821AD270h */ case   25:  		/* addi R10, R10, 2 */
		/* 821AD270h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821AD270h case   25:*/		return 0x821AD274;
		  /* 821AD274h */ case   26:  		/* slw R8, R22, R8 */
		/* 821AD274h case   26:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R8);
		/* 821AD274h case   26:*/		return 0x821AD278;
		  /* 821AD278h */ case   27:  		/* or R30, R8, R30 */
		/* 821AD278h case   27:*/		cpu::op::or<0>(regs,&regs.R30,regs.R8,regs.R30);
		/* 821AD278h case   27:*/		return 0x821AD27C;
		  /* 821AD27Ch */ case   28:  		/* cmplw CR6, R11, R9 */
		/* 821AD27Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821AD27Ch case   28:*/		return 0x821AD280;
		  /* 821AD280h */ case   29:  		/* bc 12, CR6_LT, -32 */
		/* 821AD280h case   29:*/		if ( regs.CR[6].lt ) { return 0x821AD260;  }
		/* 821AD280h case   29:*/		return 0x821AD284;
	}
	return 0x821AD284;
} // Block from 821AD20Ch-821AD284h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821AD284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD284);
		  /* 821AD284h */ case    0:  		/* and. R11, R30, R24 */
		/* 821AD284h case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R30,regs.R24);
		/* 821AD284h case    0:*/		return 0x821AD288;
		  /* 821AD288h */ case    1:  		/* bc 12, CR0_EQ, 164 */
		/* 821AD288h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD32C;  }
		/* 821AD288h case    1:*/		return 0x821AD28C;
		  /* 821AD28Ch */ case    2:  		/* andc. R11, R30, R24 */
		/* 821AD28Ch case    2:*/		cpu::op::andc<1>(regs,&regs.R11,regs.R30,regs.R24);
		/* 821AD28Ch case    2:*/		return 0x821AD290;
		  /* 821AD290h */ case    3:  		/* bc 4, CR0_EQ, 148 */
		/* 821AD290h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821AD324;  }
		/* 821AD290h case    3:*/		return 0x821AD294;
		  /* 821AD294h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AD294h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AD294h case    4:*/		return 0x821AD298;
		  /* 821AD298h */ case    5:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AD298h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AD298h case    5:*/		return 0x821AD29C;
		  /* 821AD29Ch */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 821AD29Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821AD29Ch case    6:*/		return 0x821AD2A0;
		  /* 821AD2A0h */ case    7:  		/* bc 12, CR6_LT, 16 */
		/* 821AD2A0h case    7:*/		if ( regs.CR[6].lt ) { return 0x821AD2B0;  }
		/* 821AD2A0h case    7:*/		return 0x821AD2A4;
		  /* 821AD2A4h */ case    8:  		/* cmplwi CR6, R11, 102 */
		/* 821AD2A4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821AD2A4h case    8:*/		return 0x821AD2A8;
		  /* 821AD2A8h */ case    9:  		/* mr R11, R22 */
		/* 821AD2A8h case    9:*/		regs.R11 = regs.R22;
		/* 821AD2A8h case    9:*/		return 0x821AD2AC;
		  /* 821AD2ACh */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 821AD2ACh case   10:*/		if ( !regs.CR[6].gt ) { return 0x821AD2B4;  }
		/* 821AD2ACh case   10:*/		return 0x821AD2B0;
	}
	return 0x821AD2B0;
} // Block from 821AD284h-821AD2B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AD2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD2B0);
		  /* 821AD2B0h */ case    0:  		/* li R11, 0 */
		/* 821AD2B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AD2B0h case    0:*/		return 0x821AD2B4;
	}
	return 0x821AD2B4;
} // Block from 821AD2B0h-821AD2B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD2B4);
		  /* 821AD2B4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AD2B4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AD2B4h case    0:*/		return 0x821AD2B8;
		  /* 821AD2B8h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 821AD2B8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD324;  }
		/* 821AD2B8h case    1:*/		return 0x821AD2BC;
		  /* 821AD2BCh */ case    2:  		/* mr R5, R23 */
		/* 821AD2BCh case    2:*/		regs.R5 = regs.R23;
		/* 821AD2BCh case    2:*/		return 0x821AD2C0;
		  /* 821AD2C0h */ case    3:  		/* lwz R4, <#[R25 + 12]> */
		/* 821AD2C0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821AD2C0h case    3:*/		return 0x821AD2C4;
		  /* 821AD2C4h */ case    4:  		/* bl -93748 */
		/* 821AD2C4h case    4:*/		regs.LR = 0x821AD2C8; return 0x82196490;
		/* 821AD2C4h case    4:*/		return 0x821AD2C8;
		  /* 821AD2C8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD2C8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD2C8h case    5:*/		return 0x821AD2CC;
		  /* 821AD2CCh */ case    6:  		/* bc 12, CR0_EQ, 88 */
		/* 821AD2CCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821AD324;  }
		/* 821AD2CCh case    6:*/		return 0x821AD2D0;
		  /* 821AD2D0h */ case    7:  		/* lwz R11, <#[R25]> */
		/* 821AD2D0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821AD2D0h case    7:*/		return 0x821AD2D4;
		  /* 821AD2D4h */ case    8:  		/* rlwinm R10, R31, 0, 27, 31 */
		/* 821AD2D4h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R31);
		/* 821AD2D4h case    8:*/		return 0x821AD2D8;
		  /* 821AD2D8h */ case    9:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821AD2D8h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AD2D8h case    9:*/		return 0x821AD2DC;
		  /* 821AD2DCh */ case   10:  		/* rlwinm. R9, R11, 0, 27, 28 */
		/* 821AD2DCh case   10:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R9,regs.R11);
		/* 821AD2DCh case   10:*/		return 0x821AD2E0;
		  /* 821AD2E0h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821AD2E0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821AD2F4;  }
		/* 821AD2E0h case   11:*/		return 0x821AD2E4;
		  /* 821AD2E4h */ case   12:  		/* rlwinm. R9, R10, 0, 27, 28 */
		/* 821AD2E4h case   12:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R9,regs.R10);
		/* 821AD2E4h case   12:*/		return 0x821AD2E8;
		  /* 821AD2E8h */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 821AD2E8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AD2F4;  }
		/* 821AD2E8h case   13:*/		return 0x821AD2EC;
		  /* 821AD2ECh */ case   14:  		/* li R11, 0 */
		/* 821AD2ECh case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AD2ECh case   14:*/		return 0x821AD2F0;
		  /* 821AD2F0h */ case   15:  		/* b 44 */
		/* 821AD2F0h case   15:*/		return 0x821AD31C;
		/* 821AD2F0h case   15:*/		return 0x821AD2F4;
	}
	return 0x821AD2F4;
} // Block from 821AD2B4h-821AD2F4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821AD2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD2F4);
		  /* 821AD2F4h */ case    0:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821AD2F4h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821AD2F4h case    0:*/		return 0x821AD2F8;
		  /* 821AD2F8h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821AD2F8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD304;  }
		/* 821AD2F8h case    1:*/		return 0x821AD2FC;
		  /* 821AD2FCh */ case    2:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821AD2FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821AD2FCh case    2:*/		return 0x821AD300;
		  /* 821AD300h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821AD300h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821AD2EC;  }
		/* 821AD300h case    3:*/		return 0x821AD304;
	}
	return 0x821AD304;
} // Block from 821AD2F4h-821AD304h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AD304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD304);
		  /* 821AD304h */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821AD304h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821AD304h case    0:*/		return 0x821AD308;
		  /* 821AD308h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821AD308h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD318;  }
		/* 821AD308h case    1:*/		return 0x821AD30C;
		  /* 821AD30Ch */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821AD30Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821AD30Ch case    2:*/		return 0x821AD310;
		  /* 821AD310h */ case    3:  		/* li R11, 0 */
		/* 821AD310h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AD310h case    3:*/		return 0x821AD314;
		  /* 821AD314h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821AD314h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821AD31C;  }
		/* 821AD314h case    4:*/		return 0x821AD318;
	}
	return 0x821AD318;
} // Block from 821AD304h-821AD318h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AD318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD318);
		  /* 821AD318h */ case    0:  		/* mr R11, R22 */
		/* 821AD318h case    0:*/		regs.R11 = regs.R22;
		/* 821AD318h case    0:*/		return 0x821AD31C;
	}
	return 0x821AD31C;
} // Block from 821AD318h-821AD31Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD31C);
		  /* 821AD31Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AD31Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AD31Ch case    0:*/		return 0x821AD320;
		  /* 821AD320h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821AD320h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AD32C;  }
		/* 821AD320h case    1:*/		return 0x821AD324;
	}
	return 0x821AD324;
} // Block from 821AD31Ch-821AD324h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AD324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD324);
		  /* 821AD324h */ case    0:  		/* andc R24, R24, R30 */
		/* 821AD324h case    0:*/		cpu::op::andc<0>(regs,&regs.R24,regs.R24,regs.R30);
		/* 821AD324h case    0:*/		return 0x821AD328;
		  /* 821AD328h */ case    1:  		/* mr R28, R22 */
		/* 821AD328h case    1:*/		regs.R28 = regs.R22;
		/* 821AD328h case    1:*/		return 0x821AD32C;
	}
	return 0x821AD32C;
} // Block from 821AD324h-821AD32Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AD32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD32C);
		  /* 821AD32Ch */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821AD32Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821AD32Ch case    0:*/		return 0x821AD330;
		  /* 821AD330h */ case    1:  		/* b -260 */
		/* 821AD330h case    1:*/		return 0x821AD22C;
		/* 821AD330h case    1:*/		return 0x821AD334;
	}
	return 0x821AD334;
} // Block from 821AD32Ch-821AD334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AD334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD334);
		  /* 821AD334h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821AD334h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821AD334h case    0:*/		return 0x821AD338;
		  /* 821AD338h */ case    1:  		/* bc 4, CR0_EQ, -276 */
		/* 821AD338h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AD224;  }
		/* 821AD338h case    1:*/		return 0x821AD33C;
		  /* 821AD33Ch */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 821AD33Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821AD33Ch case    2:*/		return 0x821AD340;
		  /* 821AD340h */ case    3:  		/* bc 12, CR6_EQ, 396 */
		/* 821AD340h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AD4CC;  }
		/* 821AD340h case    3:*/		return 0x821AD344;
		  /* 821AD344h */ case    4:  		/* mr R30, R26 */
		/* 821AD344h case    4:*/		regs.R30 = regs.R26;
		/* 821AD344h case    4:*/		return 0x821AD348;
		  /* 821AD348h */ case    5:  		/* lwz R31, <#[R30]> */
		/* 821AD348h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821AD348h case    5:*/		return 0x821AD34C;
		  /* 821AD34Ch */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821AD34Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AD34Ch case    6:*/		return 0x821AD350;
		  /* 821AD350h */ case    7:  		/* bc 12, CR6_EQ, 380 */
		/* 821AD350h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AD4CC;  }
		/* 821AD350h case    7:*/		return 0x821AD354;
		  /* 821AD354h */ case    8:  		/* lwz R11, <#[R31 + 16]> */
		/* 821AD354h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AD354h case    8:*/		return 0x821AD358;
		  /* 821AD358h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821AD358h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AD358h case    9:*/		return 0x821AD35C;
		  /* 821AD35Ch */ case   10:  		/* bc 12, CR6_EQ, 348 */
		/* 821AD35Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821AD4B8;  }
		/* 821AD35Ch case   10:*/		return 0x821AD360;
		  /* 821AD360h */ case   11:  		/* lwz R8, <#[R31]> */
		/* 821AD360h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821AD360h case   11:*/		return 0x821AD364;
		  /* 821AD364h */ case   12:  		/* rlwinm. R11, R8, 7, 29, 31 */
		/* 821AD364h case   12:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R11,regs.R8);
		/* 821AD364h case   12:*/		return 0x821AD368;
		  /* 821AD368h */ case   13:  		/* bc 12, CR0_EQ, 336 */
		/* 821AD368h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AD4B8;  }
		/* 821AD368h case   13:*/		return 0x821AD36C;
		  /* 821AD36Ch */ case   14:  		/* li R9, 0 */
		/* 821AD36Ch case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AD36Ch case   14:*/		return 0x821AD370;
		  /* 821AD370h */ case   15:  		/* li R10, 0 */
		/* 821AD370h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AD370h case   15:*/		return 0x821AD374;
		  /* 821AD374h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821AD374h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AD374h case   16:*/		return 0x821AD378;
		  /* 821AD378h */ case   17:  		/* bc 12, CR6_EQ, 52 */
		/* 821AD378h case   17:*/		if ( regs.CR[6].eq ) { return 0x821AD3AC;  }
		/* 821AD378h case   17:*/		return 0x821AD37C;
		  /* 821AD37Ch */ case   18:  		/* rlwinm R7, R8, 0, 0, 31 */
		/* 821AD37Ch case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R8);
		/* 821AD37Ch case   18:*/		return 0x821AD380;
		  /* 821AD380h */ case   19:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821AD380h case   19:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821AD380h case   19:*/		return 0x821AD384;
		  /* 821AD384h */ case   20:  		/* li R11, 0 */
		/* 821AD384h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AD384h case   20:*/		return 0x821AD388;
		  /* 821AD388h */ case   21:  		/* rlwinm R7, R7, 7, 29, 31 */
		/* 821AD388h case   21:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R7,regs.R7);
		/* 821AD388h case   21:*/		return 0x821AD38C;
		  /* 821AD38Ch */ case   22:  		/* srw R6, R8, R11 */
		/* 821AD38Ch case   22:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R11);
		/* 821AD38Ch case   22:*/		return 0x821AD390;
		  /* 821AD390h */ case   23:  		/* rlwinm R6, R6, 0, 30, 31 */
		/* 821AD390h case   23:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R6);
		/* 821AD390h case   23:*/		return 0x821AD394;
		  /* 821AD394h */ case   24:  		/* addi R10, R10, 1 */
		/* 821AD394h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AD394h case   24:*/		return 0x821AD398;
		  /* 821AD398h */ case   25:  		/* slw R6, R22, R6 */
		/* 821AD398h case   25:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R22,regs.R6);
		/* 821AD398h case   25:*/		return 0x821AD39C;
		  /* 821AD39Ch */ case   26:  		/* or R9, R6, R9 */
		/* 821AD39Ch case   26:*/		cpu::op::or<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821AD39Ch case   26:*/		return 0x821AD3A0;
		  /* 821AD3A0h */ case   27:  		/* addi R11, R11, 2 */
		/* 821AD3A0h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AD3A0h case   27:*/		return 0x821AD3A4;
		  /* 821AD3A4h */ case   28:  		/* cmplw CR6, R10, R7 */
		/* 821AD3A4h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821AD3A4h case   28:*/		return 0x821AD3A8;
		  /* 821AD3A8h */ case   29:  		/* bc 12, CR6_LT, -28 */
		/* 821AD3A8h case   29:*/		if ( regs.CR[6].lt ) { return 0x821AD38C;  }
		/* 821AD3A8h case   29:*/		return 0x821AD3AC;
	}
	return 0x821AD3AC;
} // Block from 821AD334h-821AD3ACh (30 instructions)

//////////////////////////////////////////////////////
// Block at 821AD3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD3AC);
		  /* 821AD3ACh */ case    0:  		/* and. R11, R9, R24 */
		/* 821AD3ACh case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R24);
		/* 821AD3ACh case    0:*/		return 0x821AD3B0;
		  /* 821AD3B0h */ case    1:  		/* bc 12, CR0_EQ, 264 */
		/* 821AD3B0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD4B8;  }
		/* 821AD3B0h case    1:*/		return 0x821AD3B4;
		  /* 821AD3B4h */ case    2:  		/* lwz R10, <#[R31 + 12]> */
		/* 821AD3B4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AD3B4h case    2:*/		return 0x821AD3B8;
		  /* 821AD3B8h */ case    3:  		/* lwz R11, <#[R25 + 12]> */
		/* 821AD3B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821AD3B8h case    3:*/		return 0x821AD3BC;
		  /* 821AD3BCh */ case    4:  		/* addi R10, R10, 4 */
		/* 821AD3BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821AD3BCh case    4:*/		return 0x821AD3C0;
		  /* 821AD3C0h */ case    5:  		/* lwz R9, <#[R10]> */
		/* 821AD3C0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD3C0h case    5:*/		return 0x821AD3C4;
		  /* 821AD3C4h */ case    6:  		/* b 12 */
		/* 821AD3C4h case    6:*/		return 0x821AD3D0;
		/* 821AD3C4h case    6:*/		return 0x821AD3C8;
		  /* 821AD3C8h */ case    7:  		/* addi R10, R9, 8 */
		/* 821AD3C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821AD3C8h case    7:*/		return 0x821AD3CC;
		  /* 821AD3CCh */ case    8:  		/* lwz R9, <#[R9 + 8]> */
		/* 821AD3CCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821AD3CCh case    8:*/		return 0x821AD3D0;
	}
	return 0x821AD3D0;
} // Block from 821AD3ACh-821AD3D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AD3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD3D0);
		  /* 821AD3D0h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821AD3D0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821AD3D0h case    0:*/		return 0x821AD3D4;
		  /* 821AD3D4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AD3D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AD3C8;  }
		/* 821AD3D4h case    1:*/		return 0x821AD3D8;
		  /* 821AD3D8h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821AD3D8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821AD3D8h case    2:*/		return 0x821AD3DC;
		  /* 821AD3DCh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AD3DCh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD3DCh case    3:*/		return 0x821AD3E0;
		  /* 821AD3E0h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821AD3E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AD3E0h case    4:*/		return 0x821AD3E4;
		  /* 821AD3E4h */ case    5:  		/* stw R10, <#[R31 + 8]> */
		/* 821AD3E4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821AD3E4h case    5:*/		return 0x821AD3E8;
		  /* 821AD3E8h */ case    6:  		/* stw R31, <#[R11 + 4]> */
		/* 821AD3E8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821AD3E8h case    6:*/		return 0x821AD3EC;
		  /* 821AD3ECh */ case    7:  		/* stw R11, <#[R31 + 12]> */
		/* 821AD3ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AD3ECh case    7:*/		return 0x821AD3F0;
		  /* 821AD3F0h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821AD3F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AD3F0h case    8:*/		return 0x821AD3F4;
		  /* 821AD3F4h */ case    9:  		/* lwz R9, <#[R25]> */
		/* 821AD3F4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821AD3F4h case    9:*/		return 0x821AD3F8;
		  /* 821AD3F8h */ case   10:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821AD3F8h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821AD3F8h case   10:*/		return 0x821AD3FC;
		  /* 821AD3FCh */ case   11:  		/* rlwinm R11, R9, 0, 27, 31 */
		/* 821AD3FCh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R9);
		/* 821AD3FCh case   11:*/		return 0x821AD400;
		  /* 821AD400h */ case   12:  		/* rlwinm. R9, R11, 0, 29, 29 */
		/* 821AD400h case   12:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R11);
		/* 821AD400h case   12:*/		return 0x821AD404;
		  /* 821AD404h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821AD404h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AD414;  }
		/* 821AD404h case   13:*/		return 0x821AD408;
		  /* 821AD408h */ case   14:  		/* rlwinm. R9, R10, 0, 30, 30 */
		/* 821AD408h case   14:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R10);
		/* 821AD408h case   14:*/		return 0x821AD40C;
		  /* 821AD40Ch */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821AD40Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821AD414;  }
		/* 821AD40Ch case   15:*/		return 0x821AD410;
		  /* 821AD410h */ case   16:  		/* addi R11, R11, -4 */
		/* 821AD410h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821AD410h case   16:*/		return 0x821AD414;
	}
	return 0x821AD414;
} // Block from 821AD3D0h-821AD414h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AD414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD414);
		  /* 821AD414h */ case    0:  		/* and R9, R11, R10 */
		/* 821AD414h case    0:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821AD414h case    0:*/		return 0x821AD418;
		  /* 821AD418h */ case    1:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821AD418h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821AD418h case    1:*/		return 0x821AD41C;
		  /* 821AD41Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821AD41Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821AD428;  }
		/* 821AD41Ch case    2:*/		return 0x821AD420;
		  /* 821AD420h */ case    3:  		/* addi R11, R11, -4 */
		/* 821AD420h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821AD420h case    3:*/		return 0x821AD424;
		  /* 821AD424h */ case    4:  		/* addi R10, R10, -4 */
		/* 821AD424h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821AD424h case    4:*/		return 0x821AD428;
	}
	return 0x821AD428;
} // Block from 821AD414h-821AD428h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AD428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD428);
		  /* 821AD428h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821AD428h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821AD428h case    0:*/		return 0x821AD42C;
		  /* 821AD42Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821AD42Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD43C;  }
		/* 821AD42Ch case    1:*/		return 0x821AD430;
		  /* 821AD430h */ case    2:  		/* rlwinm. R9, R10, 0, 30, 30 */
		/* 821AD430h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R10);
		/* 821AD430h case    2:*/		return 0x821AD434;
		  /* 821AD434h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821AD434h case    3:*/		if ( regs.CR[0].eq ) { return 0x821AD43C;  }
		/* 821AD434h case    3:*/		return 0x821AD438;
		  /* 821AD438h */ case    4:  		/* addi R10, R10, -2 */
		/* 821AD438h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 821AD438h case    4:*/		return 0x821AD43C;
	}
	return 0x821AD43C;
} // Block from 821AD428h-821AD43Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AD43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD43C);
		  /* 821AD43Ch */ case    0:  		/* lwz R9, <#[R31]> */
		/* 821AD43Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821AD43Ch case    0:*/		return 0x821AD440;
		  /* 821AD440h */ case    1:  		/* or R11, R11, R10 */
		/* 821AD440h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AD440h case    1:*/		return 0x821AD444;
		  /* 821AD444h */ case    2:  		/* mr R3, R23 */
		/* 821AD444h case    2:*/		regs.R3 = regs.R23;
		/* 821AD444h case    2:*/		return 0x821AD448;
		  /* 821AD448h */ case    3:  		/* rlwimi R11, R9, 0, 0, 26 */
		/* 821AD448h case    3:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R9);
		/* 821AD448h case    3:*/		return 0x821AD44C;
		  /* 821AD44Ch */ case    4:  		/* stw R11, <#[R31]> */
		/* 821AD44Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AD44Ch case    4:*/		return 0x821AD450;
		  /* 821AD450h */ case    5:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821AD450h case    5:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821AD450h case    5:*/		return 0x821AD454;
		  /* 821AD454h */ case    6:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821AD454h case    6:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821AD454h case    6:*/		return 0x821AD458;
		  /* 821AD458h */ case    7:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821AD458h case    7:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821AD458h case    7:*/		return 0x821AD45C;
		  /* 821AD45Ch */ case    8:  		/* rlwinm R7, R11, 28, 29, 30 */
		/* 821AD45Ch case    8:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R11);
		/* 821AD45Ch case    8:*/		return 0x821AD460;
		  /* 821AD460h */ case    9:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821AD460h case    9:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821AD460h case    9:*/		return 0x821AD464;
		  /* 821AD464h */ case   10:  		/* lwz R6, <#[R25]> */
		/* 821AD464h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x00000000) );
		/* 821AD464h case   10:*/		return 0x821AD468;
		  /* 821AD468h */ case   11:  		/* rlwinm R6, R6, 27, 24, 31 */
		/* 821AD468h case   11:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R6);
		/* 821AD468h case   11:*/		return 0x821AD46C;
		  /* 821AD46Ch */ case   12:  		/* srw R10, R6, R10 */
		/* 821AD46Ch case   12:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821AD46Ch case   12:*/		return 0x821AD470;
		  /* 821AD470h */ case   13:  		/* srw R9, R6, R9 */
		/* 821AD470h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821AD470h case   13:*/		return 0x821AD474;
		  /* 821AD474h */ case   14:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821AD474h case   14:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821AD474h case   14:*/		return 0x821AD478;
		  /* 821AD478h */ case   15:  		/* srw R10, R6, R8 */
		/* 821AD478h case   15:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R6,regs.R8);
		/* 821AD478h case   15:*/		return 0x821AD47C;
		  /* 821AD47Ch */ case   16:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821AD47Ch case   16:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821AD47Ch case   16:*/		return 0x821AD480;
		  /* 821AD480h */ case   17:  		/* srw R8, R6, R7 */
		/* 821AD480h case   17:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R6,regs.R7);
		/* 821AD480h case   17:*/		return 0x821AD484;
		  /* 821AD484h */ case   18:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821AD484h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821AD484h case   18:*/		return 0x821AD488;
		  /* 821AD488h */ case   19:  		/* rlwimi R8, R10, 2, 0, 29 */
		/* 821AD488h case   19:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 821AD488h case   19:*/		return 0x821AD48C;
		  /* 821AD48Ch */ case   20:  		/* rlwinm R10, R8, 5, 0, 26 */
		/* 821AD48Ch case   20:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R8);
		/* 821AD48Ch case   20:*/		return 0x821AD490;
		  /* 821AD490h */ case   21:  		/* or R11, R10, R11 */
		/* 821AD490h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AD490h case   21:*/		return 0x821AD494;
		  /* 821AD494h */ case   22:  		/* stw R11, <#[R31]> */
		/* 821AD494h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AD494h case   22:*/		return 0x821AD498;
		  /* 821AD498h */ case   23:  		/* lwz R4, <#[R25 + 12]> */
		/* 821AD498h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821AD498h case   23:*/		return 0x821AD49C;
		  /* 821AD49Ch */ case   24:  		/* bl -51684 */
		/* 821AD49Ch case   24:*/		regs.LR = 0x821AD4A0; return 0x821A0AB8;
		/* 821AD49Ch case   24:*/		return 0x821AD4A0;
		  /* 821AD4A0h */ case   25:  		/* mr R3, R23 */
		/* 821AD4A0h case   25:*/		regs.R3 = regs.R23;
		/* 821AD4A0h case   25:*/		return 0x821AD4A4;
		  /* 821AD4A4h */ case   26:  		/* lwz R4, <#[R31 + 16]> */
		/* 821AD4A4h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821AD4A4h case   26:*/		return 0x821AD4A8;
		  /* 821AD4A8h */ case   27:  		/* bl -51696 */
		/* 821AD4A8h case   27:*/		regs.LR = 0x821AD4AC; return 0x821A0AB8;
		/* 821AD4A8h case   27:*/		return 0x821AD4AC;
		  /* 821AD4ACh */ case   28:  		/* mr R4, R21 */
		/* 821AD4ACh case   28:*/		regs.R4 = regs.R21;
		/* 821AD4ACh case   28:*/		return 0x821AD4B0;
		  /* 821AD4B0h */ case   29:  		/* mr R3, R23 */
		/* 821AD4B0h case   29:*/		regs.R3 = regs.R23;
		/* 821AD4B0h case   29:*/		return 0x821AD4B4;
		  /* 821AD4B4h */ case   30:  		/* bl -51708 */
		/* 821AD4B4h case   30:*/		regs.LR = 0x821AD4B8; return 0x821A0AB8;
		/* 821AD4B4h case   30:*/		return 0x821AD4B8;
	}
	return 0x821AD4B8;
} // Block from 821AD43Ch-821AD4B8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821AD4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD4B8);
		  /* 821AD4B8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821AD4B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AD4B8h case    0:*/		return 0x821AD4BC;
		  /* 821AD4BCh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821AD4BCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AD4BCh case    1:*/		return 0x821AD4C0;
		  /* 821AD4C0h */ case    2:  		/* bc 4, CR6_EQ, -376 */
		/* 821AD4C0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AD348;  }
		/* 821AD4C0h case    2:*/		return 0x821AD4C4;
		  /* 821AD4C4h */ case    3:  		/* addi R30, R31, 8 */
		/* 821AD4C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821AD4C4h case    3:*/		return 0x821AD4C8;
		  /* 821AD4C8h */ case    4:  		/* b -384 */
		/* 821AD4C8h case    4:*/		return 0x821AD348;
		/* 821AD4C8h case    4:*/		return 0x821AD4CC;
	}
	return 0x821AD4CC;
} // Block from 821AD4B8h-821AD4CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AD4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD4CC);
		  /* 821AD4CCh */ case    0:  		/* lwz R16, <#[R1 + 1236]> */
		/* 821AD4CCh case    0:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AD4CCh case    0:*/		return 0x821AD4D0;
		  /* 821AD4D0h */ case    1:  		/* lwz R11, <#[R16 + 40]> */
		/* 821AD4D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821AD4D0h case    1:*/		return 0x821AD4D4;
		  /* 821AD4D4h */ case    2:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821AD4D4h case    2:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821AD4D4h case    2:*/		return 0x821AD4D8;
		  /* 821AD4D8h */ case    3:  		/* bc 4, CR0_EQ, -10996 */
		/* 821AD4D8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821AD4D8h case    3:*/		return 0x821AD4DC;
		  /* 821AD4DCh */ case    4:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AD4DCh case    4:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AD4DCh case    4:*/		return 0x821AD4E0;
		  /* 821AD4E0h */ case    5:  		/* lis R10, -32256 */
		/* 821AD4E0h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821AD4E0h case    5:*/		return 0x821AD4E4;
		  /* 821AD4E4h */ case    6:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AD4E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AD4E4h case    6:*/		return 0x821AD4E8;
		  /* 821AD4E8h */ case    7:  		/* lfs FR30, <#[R10 + 1792]> */
		/* 821AD4E8h case    7:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R10 + 0x00000700) );
		/* 821AD4E8h case    7:*/		return 0x821AD4EC;
		  /* 821AD4ECh */ case    8:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821AD4ECh case    8:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821AD4ECh case    8:*/		return 0x821AD4F0;
		  /* 821AD4F0h */ case    9:  		/* stw R11, <#[R1 + 136]> */
		/* 821AD4F0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821AD4F0h case    9:*/		return 0x821AD4F4;
		  /* 821AD4F4h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821AD4F4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AD4F4h case   10:*/		return 0x821AD4F8;
		  /* 821AD4F8h */ case   11:  		/* bc 12, CR6_EQ, 7284 */
		/* 821AD4F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821AF16C;  }
		/* 821AD4F8h case   11:*/		return 0x821AD4FC;
		  /* 821AD4FCh */ case   12:  		/* addi R10, R11, -1 */
		/* 821AD4FCh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821AD4FCh case   12:*/		return 0x821AD500;
		  /* 821AD500h */ case   13:  		/* mr R4, R18 */
		/* 821AD500h case   13:*/		regs.R4 = regs.R18;
		/* 821AD500h case   13:*/		return 0x821AD504;
		  /* 821AD504h */ case   14:  		/* andc R11, R11, R10 */
		/* 821AD504h case   14:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AD504h case   14:*/		return 0x821AD508;
		  /* 821AD508h */ case   15:  		/* mr R3, R16 */
		/* 821AD508h case   15:*/		regs.R3 = regs.R16;
		/* 821AD508h case   15:*/		return 0x821AD50C;
		  /* 821AD50Ch */ case   16:  		/* cntlzw R11, R11 */
		/* 821AD50Ch case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821AD50Ch case   16:*/		return 0x821AD510;
		  /* 821AD510h */ case   17:  		/* subfic R29, R11, 31 */
		/* 821AD510h case   17:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0x1F);
		/* 821AD510h case   17:*/		return 0x821AD514;
		  /* 821AD514h */ case   18:  		/* mr R5, R29 */
		/* 821AD514h case   18:*/		regs.R5 = regs.R29;
		/* 821AD514h case   18:*/		return 0x821AD518;
		  /* 821AD518h */ case   19:  		/* stw R29, <#[R1 + 112]> */
		/* 821AD518h case   19:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000070) );
		/* 821AD518h case   19:*/		return 0x821AD51C;
		  /* 821AD51Ch */ case   20:  		/* bl -69804 */
		/* 821AD51Ch case   20:*/		regs.LR = 0x821AD520; return 0x8219C470;
		/* 821AD51Ch case   20:*/		return 0x821AD520;
		  /* 821AD520h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD520h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD520h case   21:*/		return 0x821AD524;
		  /* 821AD524h */ case   22:  		/* bc 12, CR0_EQ, 5308 */
		/* 821AD524h case   22:*/		if ( regs.CR[0].eq ) { return 0x821AE9E0;  }
		/* 821AD524h case   22:*/		return 0x821AD528;
		  /* 821AD528h */ case   23:  		/* li R10, 1 */
		/* 821AD528h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD528h case   23:*/		return 0x821AD52C;
		  /* 821AD52Ch */ case   24:  		/* lwz R3, <#[R18 + 44]> */
		/* 821AD52Ch case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x0000002C) );
		/* 821AD52Ch case   24:*/		return 0x821AD530;
		  /* 821AD530h */ case   25:  		/* li R9, 0 */
		/* 821AD530h case   25:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AD530h case   25:*/		return 0x821AD534;
		  /* 821AD534h */ case   26:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AD534h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AD534h case   26:*/		return 0x821AD538;
		  /* 821AD538h */ case   27:  		/* addi R7, R1, 200 */
		/* 821AD538h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC8);
		/* 821AD538h case   27:*/		return 0x821AD53C;
		  /* 821AD53Ch */ case   28:  		/* addi R6, R1, 196 */
		/* 821AD53Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC4);
		/* 821AD53Ch case   28:*/		return 0x821AD540;
		  /* 821AD540h */ case   29:  		/* addi R5, R1, 116 */
		/* 821AD540h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 821AD540h case   29:*/		return 0x821AD544;
		  /* 821AD544h */ case   30:  		/* mr R4, R29 */
		/* 821AD544h case   30:*/		regs.R4 = regs.R29;
		/* 821AD544h case   30:*/		return 0x821AD548;
		  /* 821AD548h */ case   31:  		/* bl 483208 */
		/* 821AD548h case   31:*/		regs.LR = 0x821AD54C; return 0x822234D0;
		/* 821AD548h case   31:*/		return 0x821AD54C;
		  /* 821AD54Ch */ case   32:  		/* li R10, 1 */
		/* 821AD54Ch case   32:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD54Ch case   32:*/		return 0x821AD550;
		  /* 821AD550h */ case   33:  		/* li R9, 0 */
		/* 821AD550h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AD550h case   33:*/		return 0x821AD554;
		  /* 821AD554h */ case   34:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AD554h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AD554h case   34:*/		return 0x821AD558;
		  /* 821AD558h */ case   35:  		/* addi R7, R1, 176 */
		/* 821AD558h case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 821AD558h case   35:*/		return 0x821AD55C;
		  /* 821AD55Ch */ case   36:  		/* lwz R3, <#[R18 + 48]> */
		/* 821AD55Ch case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000030) );
		/* 821AD55Ch case   36:*/		return 0x821AD560;
		  /* 821AD560h */ case   37:  		/* addi R6, R1, 192 */
		/* 821AD560h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 821AD560h case   37:*/		return 0x821AD564;
		  /* 821AD564h */ case   38:  		/* addi R5, R1, 124 */
		/* 821AD564h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 821AD564h case   38:*/		return 0x821AD568;
		  /* 821AD568h */ case   39:  		/* mr R4, R29 */
		/* 821AD568h case   39:*/		regs.R4 = regs.R29;
		/* 821AD568h case   39:*/		return 0x821AD56C;
		  /* 821AD56Ch */ case   40:  		/* bl 483172 */
		/* 821AD56Ch case   40:*/		regs.LR = 0x821AD570; return 0x822234D0;
		/* 821AD56Ch case   40:*/		return 0x821AD570;
		  /* 821AD570h */ case   41:  		/* lwz R26, <#[R1 + 200]> */
		/* 821AD570h case   41:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000C8) );
		/* 821AD570h case   41:*/		return 0x821AD574;
		  /* 821AD574h */ case   42:  		/* cmplwi CR6, R26, 0 */
		/* 821AD574h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821AD574h case   42:*/		return 0x821AD578;
		  /* 821AD578h */ case   43:  		/* bc 4, CR6_EQ, 376 */
		/* 821AD578h case   43:*/		if ( !regs.CR[6].eq ) { return 0x821AD6F0;  }
		/* 821AD578h case   43:*/		return 0x821AD57C;
		  /* 821AD57Ch */ case   44:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AD57Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AD57Ch case   44:*/		return 0x821AD580;
		  /* 821AD580h */ case   45:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AD580h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD580h case   45:*/		return 0x821AD584;
		  /* 821AD584h */ case   46:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AD584h case   46:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AD584h case   46:*/		return 0x821AD588;
		  /* 821AD588h */ case   47:  		/* cmplwi CR6, R10, 2304 */
		/* 821AD588h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000900);
		/* 821AD588h case   47:*/		return 0x821AD58C;
		  /* 821AD58Ch */ case   48:  		/* bc 4, CR6_EQ, 296 */
		/* 821AD58Ch case   48:*/		if ( !regs.CR[6].eq ) { return 0x821AD6B4;  }
		/* 821AD58Ch case   48:*/		return 0x821AD590;
		  /* 821AD590h */ case   49:  		/* lwz R10, <#[R1 + 176]> */
		/* 821AD590h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AD590h case   49:*/		return 0x821AD594;
		  /* 821AD594h */ case   50:  		/* cmplwi CR6, R10, 0 */
		/* 821AD594h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AD594h case   50:*/		return 0x821AD598;
		  /* 821AD598h */ case   51:  		/* bc 4, CR6_EQ, 284 */
		/* 821AD598h case   51:*/		if ( !regs.CR[6].eq ) { return 0x821AD6B4;  }
		/* 821AD598h case   51:*/		return 0x821AD59C;
		  /* 821AD59Ch */ case   52:  		/* lwz R10, <#[R1 + 124]> */
		/* 821AD59Ch case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD59Ch case   52:*/		return 0x821AD5A0;
		  /* 821AD5A0h */ case   53:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AD5A0h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AD5A0h case   53:*/		return 0x821AD5A4;
		  /* 821AD5A4h */ case   54:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AD5A4h case   54:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AD5A4h case   54:*/		return 0x821AD5A8;
		  /* 821AD5A8h */ case   55:  		/* cmplwi CR6, R10, 2304 */
		/* 821AD5A8h case   55:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000900);
		/* 821AD5A8h case   55:*/		return 0x821AD5AC;
		  /* 821AD5ACh */ case   56:  		/* bc 4, CR6_EQ, 264 */
		/* 821AD5ACh case   56:*/		if ( !regs.CR[6].eq ) { return 0x821AD6B4;  }
		/* 821AD5ACh case   56:*/		return 0x821AD5B0;
		  /* 821AD5B0h */ case   57:  		/* li R4, 0 */
		/* 821AD5B0h case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AD5B0h case   57:*/		return 0x821AD5B4;
		  /* 821AD5B4h */ case   58:  		/* lwz R3, <#[R11 + 52]> */
		/* 821AD5B4h case   58:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000034) );
		/* 821AD5B4h case   58:*/		return 0x821AD5B8;
		  /* 821AD5B8h */ case   59:  		/* bl -74976 */
		/* 821AD5B8h case   59:*/		regs.LR = 0x821AD5BC; return 0x8219B0D8;
		/* 821AD5B8h case   59:*/		return 0x821AD5BC;
		  /* 821AD5BCh */ case   60:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821AD5BCh case   60:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821AD5BCh case   60:*/		return 0x821AD5C0;
		  /* 821AD5C0h */ case   61:  		/* cmplwi CR6, R11, 3 */
		/* 821AD5C0h case   61:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821AD5C0h case   61:*/		return 0x821AD5C4;
		  /* 821AD5C4h */ case   62:  		/* bc 4, CR6_EQ, 224 */
		/* 821AD5C4h case   62:*/		if ( !regs.CR[6].eq ) { return 0x821AD6A4;  }
		/* 821AD5C4h case   62:*/		return 0x821AD5C8;
		  /* 821AD5C8h */ case   63:  		/* lwz R11, <#[R1 + 124]> */
		/* 821AD5C8h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD5C8h case   63:*/		return 0x821AD5CC;
		  /* 821AD5CCh */ case   64:  		/* li R4, 0 */
		/* 821AD5CCh case   64:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AD5CCh case   64:*/		return 0x821AD5D0;
		  /* 821AD5D0h */ case   65:  		/* lwz R3, <#[R11 + 52]> */
		/* 821AD5D0h case   65:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000034) );
		/* 821AD5D0h case   65:*/		return 0x821AD5D4;
		  /* 821AD5D4h */ case   66:  		/* bl -75004 */
		/* 821AD5D4h case   66:*/		regs.LR = 0x821AD5D8; return 0x8219B0D8;
		/* 821AD5D4h case   66:*/		return 0x821AD5D8;
		  /* 821AD5D8h */ case   67:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821AD5D8h case   67:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821AD5D8h case   67:*/		return 0x821AD5DC;
		  /* 821AD5DCh */ case   68:  		/* cmplwi CR6, R11, 3 */
		/* 821AD5DCh case   68:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821AD5DCh case   68:*/		return 0x821AD5E0;
		  /* 821AD5E0h */ case   69:  		/* bc 4, CR6_EQ, 196 */
		/* 821AD5E0h case   69:*/		if ( !regs.CR[6].eq ) { return 0x821AD6A4;  }
		/* 821AD5E0h case   69:*/		return 0x821AD5E4;
		  /* 821AD5E4h */ case   70:  		/* addi R11, R1, 480 */
		/* 821AD5E4h case   70:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x1E0);
		/* 821AD5E4h case   70:*/		return 0x821AD5E8;
		  /* 821AD5E8h */ case   71:  		/* lwz R4, <#[R1 + 116]> */
		/* 821AD5E8h case   71:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 821AD5E8h case   71:*/		return 0x821AD5EC;
		  /* 821AD5ECh */ case   72:  		/* addi R10, R1, 120 */
		/* 821AD5ECh case   72:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x78);
		/* 821AD5ECh case   72:*/		return 0x821AD5F0;
		  /* 821AD5F0h */ case   73:  		/* lwz R7, <#[R1 + 124]> */
		/* 821AD5F0h case   73:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD5F0h case   73:*/		return 0x821AD5F4;
		  /* 821AD5F4h */ case   74:  		/* stw R11, <#[R1 + 100]> */
		/* 821AD5F4h case   74:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821AD5F4h case   74:*/		return 0x821AD5F8;
		  /* 821AD5F8h */ case   75:  		/* addi R9, R1, 336 */
		/* 821AD5F8h case   75:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x150);
		/* 821AD5F8h case   75:*/		return 0x821AD5FC;
		  /* 821AD5FCh */ case   76:  		/* addi R11, R1, 184 */
		/* 821AD5FCh case   76:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB8);
		/* 821AD5FCh case   76:*/		return 0x821AD600;
		  /* 821AD600h */ case   77:  		/* stw R10, <#[R1 + 92]> */
		/* 821AD600h case   77:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AD600h case   77:*/		return 0x821AD604;
		  /* 821AD604h */ case   78:  		/* stw R9, <#[R1 + 108]> */
		/* 821AD604h case   78:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AD604h case   78:*/		return 0x821AD608;
		  /* 821AD608h */ case   79:  		/* mr R10, R18 */
		/* 821AD608h case   79:*/		regs.R10 = regs.R18;
		/* 821AD608h case   79:*/		return 0x821AD60C;
		  /* 821AD60Ch */ case   80:  		/* stw R11, <#[R1 + 84]> */
		/* 821AD60Ch case   80:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821AD60Ch case   80:*/		return 0x821AD610;
		  /* 821AD610h */ case   81:  		/* mr R3, R16 */
		/* 821AD610h case   81:*/		regs.R3 = regs.R16;
		/* 821AD610h case   81:*/		return 0x821AD614;
		  /* 821AD614h */ case   82:  		/* lwz R31, <#[R4 + 44]> */
		/* 821AD614h case   82:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x0000002C) );
		/* 821AD614h case   82:*/		return 0x821AD618;
		  /* 821AD618h */ case   83:  		/* lwz R30, <#[R4 + 48]> */
		/* 821AD618h case   83:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000030) );
		/* 821AD618h case   83:*/		return 0x821AD61C;
		  /* 821AD61Ch */ case   84:  		/* mr R5, R31 */
		/* 821AD61Ch case   84:*/		regs.R5 = regs.R31;
		/* 821AD61Ch case   84:*/		return 0x821AD620;
		  /* 821AD620h */ case   85:  		/* lwz R8, <#[R7 + 44]> */
		/* 821AD620h case   85:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x0000002C) );
		/* 821AD620h case   85:*/		return 0x821AD624;
		  /* 821AD624h */ case   86:  		/* mr R6, R30 */
		/* 821AD624h case   86:*/		regs.R6 = regs.R30;
		/* 821AD624h case   86:*/		return 0x821AD628;
		  /* 821AD628h */ case   87:  		/* lwz R9, <#[R7 + 48]> */
		/* 821AD628h case   87:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000030) );
		/* 821AD628h case   87:*/		return 0x821AD62C;
		  /* 821AD62Ch */ case   88:  		/* bl -52980 */
		/* 821AD62Ch case   88:*/		regs.LR = 0x821AD630; return 0x821A0738;
		/* 821AD62Ch case   88:*/		return 0x821AD630;
		  /* 821AD630h */ case   89:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD630h case   89:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD630h case   89:*/		return 0x821AD634;
		  /* 821AD634h */ case   90:  		/* bc 12, CR0_EQ, 112 */
		/* 821AD634h case   90:*/		if ( regs.CR[0].eq ) { return 0x821AD6A4;  }
		/* 821AD634h case   90:*/		return 0x821AD638;
		  /* 821AD638h */ case   91:  		/* lwz R11, <#[R1 + 336]> */
		/* 821AD638h case   91:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000150) );
		/* 821AD638h case   91:*/		return 0x821AD63C;
		  /* 821AD63Ch */ case   92:  		/* lwz R9, <#[R1 + 480]> */
		/* 821AD63Ch case   92:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000001E0) );
		/* 821AD63Ch case   92:*/		return 0x821AD640;
		  /* 821AD640h */ case   93:  		/* rlwinm R10, R11, 28, 25, 31 */
		/* 821AD640h case   93:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R10,regs.R11);
		/* 821AD640h case   93:*/		return 0x821AD644;
		  /* 821AD644h */ case   94:  		/* lwz R8, <#[R16 + 664]> */
		/* 821AD644h case   94:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R16 + 0x00000298) );
		/* 821AD644h case   94:*/		return 0x821AD648;
		  /* 821AD648h */ case   95:  		/* rlwinm R11, R9, 28, 25, 31 */
		/* 821AD648h case   95:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R11,regs.R9);
		/* 821AD648h case   95:*/		return 0x821AD64C;
		  /* 821AD64Ch */ case   96:  		/* add R11, R10, R11 */
		/* 821AD64Ch case   96:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AD64Ch case   96:*/		return 0x821AD650;
		  /* 821AD650h */ case   97:  		/* cmplw CR6, R11, R8 */
		/* 821AD650h case   97:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821AD650h case   97:*/		return 0x821AD654;
		  /* 821AD654h */ case   98:  		/* bc 12, CR6_GT, 80 */
		/* 821AD654h case   98:*/		if ( regs.CR[6].gt ) { return 0x821AD6A4;  }
		/* 821AD654h case   98:*/		return 0x821AD658;
		  /* 821AD658h */ case   99:  		/* addi R11, R1, 336 */
		/* 821AD658h case   99:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x150);
		/* 821AD658h case   99:*/		return 0x821AD65C;
		  /* 821AD65Ch */ case  100:  		/* lwz R9, <#[R1 + 120]> */
		/* 821AD65Ch case  100:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 821AD65Ch case  100:*/		return 0x821AD660;
		  /* 821AD660h */ case  101:  		/* addi R7, R1, 172 */
		/* 821AD660h case  101:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xAC);
		/* 821AD660h case  101:*/		return 0x821AD664;
		  /* 821AD664h */ case  102:  		/* lwz R8, <#[R1 + 184]> */
		/* 821AD664h case  102:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AD664h case  102:*/		return 0x821AD668;
		  /* 821AD668h */ case  103:  		/* stw R11, <#[R1 + 108]> */
		/* 821AD668h case  103:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AD668h case  103:*/		return 0x821AD66C;
		  /* 821AD66Ch */ case  104:  		/* addi R11, R1, 256 */
		/* 821AD66Ch case  104:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x100);
		/* 821AD66Ch case  104:*/		return 0x821AD670;
		  /* 821AD670h */ case  105:  		/* stw R7, <#[R1 + 92]> */
		/* 821AD670h case  105:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AD670h case  105:*/		return 0x821AD674;
		  /* 821AD674h */ case  106:  		/* addi R10, R1, 480 */
		/* 821AD674h case  106:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1E0);
		/* 821AD674h case  106:*/		return 0x821AD678;
		  /* 821AD678h */ case  107:  		/* stw R11, <#[R1 + 84]> */
		/* 821AD678h case  107:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821AD678h case  107:*/		return 0x821AD67C;
		  /* 821AD67Ch */ case  108:  		/* mr R6, R30 */
		/* 821AD67Ch case  108:*/		regs.R6 = regs.R30;
		/* 821AD67Ch case  108:*/		return 0x821AD680;
		  /* 821AD680h */ case  109:  		/* stw R10, <#[R1 + 100]> */
		/* 821AD680h case  109:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821AD680h case  109:*/		return 0x821AD684;
		  /* 821AD684h */ case  110:  		/* mr R10, R18 */
		/* 821AD684h case  110:*/		regs.R10 = regs.R18;
		/* 821AD684h case  110:*/		return 0x821AD688;
		  /* 821AD688h */ case  111:  		/* mr R5, R31 */
		/* 821AD688h case  111:*/		regs.R5 = regs.R31;
		/* 821AD688h case  111:*/		return 0x821AD68C;
		  /* 821AD68Ch */ case  112:  		/* lwz R7, <#[R1 + 124]> */
		/* 821AD68Ch case  112:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD68Ch case  112:*/		return 0x821AD690;
		  /* 821AD690h */ case  113:  		/* mr R3, R16 */
		/* 821AD690h case  113:*/		regs.R3 = regs.R16;
		/* 821AD690h case  113:*/		return 0x821AD694;
		  /* 821AD694h */ case  114:  		/* lwz R4, <#[R1 + 116]> */
		/* 821AD694h case  114:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 821AD694h case  114:*/		return 0x821AD698;
		  /* 821AD698h */ case  115:  		/* bl -27312 */
		/* 821AD698h case  115:*/		regs.LR = 0x821AD69C; return 0x821A6BE8;
		/* 821AD698h case  115:*/		return 0x821AD69C;
		  /* 821AD69Ch */ case  116:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD69Ch case  116:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD69Ch case  116:*/		return 0x821AD6A0;
		  /* 821AD6A0h */ case  117:  		/* bc 4, CR0_EQ, 4956 */
		/* 821AD6A0h case  117:*/		if ( !regs.CR[0].eq ) { return 0x821AE9FC;  }
		/* 821AD6A0h case  117:*/		return 0x821AD6A4;
	}
	return 0x821AD6A4;
} // Block from 821AD4CCh-821AD6A4h (118 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6A4);
		  /* 821AD6A4h */ case    0:  		/* lwz R26, <#[R1 + 200]> */
		/* 821AD6A4h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000C8) );
		/* 821AD6A4h case    0:*/		return 0x821AD6A8;
		  /* 821AD6A8h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 821AD6A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821AD6A8h case    1:*/		return 0x821AD6AC;
		  /* 821AD6ACh */ case    2:  		/* bc 4, CR6_EQ, 68 */
		/* 821AD6ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AD6F0;  }
		/* 821AD6ACh case    2:*/		return 0x821AD6B0;
		  /* 821AD6B0h */ case    3:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AD6B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AD6B0h case    3:*/		return 0x821AD6B4;
	}
	return 0x821AD6B4;
} // Block from 821AD6A4h-821AD6B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6B4);
		  /* 821AD6B4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AD6B4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD6B4h case    0:*/		return 0x821AD6B8;
		  /* 821AD6B8h */ case    1:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821AD6B8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821AD6B8h case    1:*/		return 0x821AD6BC;
		  /* 821AD6BCh */ case    2:  		/* cmplwi CR6, R10, 16 */
		/* 821AD6BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000010);
		/* 821AD6BCh case    2:*/		return 0x821AD6C0;
		  /* 821AD6C0h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 821AD6C0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AD6D0;  }
		/* 821AD6C0h case    3:*/		return 0x821AD6C4;
		  /* 821AD6C4h */ case    4:  		/* cmplwi CR6, R10, 18 */
		/* 821AD6C4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 821AD6C4h case    4:*/		return 0x821AD6C8;
		  /* 821AD6C8h */ case    5:  		/* li R10, 1 */
		/* 821AD6C8h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD6C8h case    5:*/		return 0x821AD6CC;
		  /* 821AD6CCh */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 821AD6CCh case    6:*/		if ( !regs.CR[6].gt ) { return 0x821AD6D4;  }
		/* 821AD6CCh case    6:*/		return 0x821AD6D0;
	}
	return 0x821AD6D0;
} // Block from 821AD6B4h-821AD6D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6D0);
		  /* 821AD6D0h */ case    0:  		/* li R10, 0 */
		/* 821AD6D0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AD6D0h case    0:*/		return 0x821AD6D4;
	}
	return 0x821AD6D4;
} // Block from 821AD6D0h-821AD6D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6D4);
		  /* 821AD6D4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821AD6D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821AD6D4h case    0:*/		return 0x821AD6D8;
		  /* 821AD6D8h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821AD6D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AD6F4;  }
		/* 821AD6D8h case    1:*/		return 0x821AD6DC;
		  /* 821AD6DCh */ case    2:  		/* lwz R27, <#[R1 + 192]> */
		/* 821AD6DCh case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000C0) );
		/* 821AD6DCh case    2:*/		return 0x821AD6E0;
		  /* 821AD6E0h */ case    3:  		/* mr R19, R11 */
		/* 821AD6E0h case    3:*/		regs.R19 = regs.R11;
		/* 821AD6E0h case    3:*/		return 0x821AD6E4;
		  /* 821AD6E4h */ case    4:  		/* lwz R25, <#[R1 + 124]> */
		/* 821AD6E4h case    4:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD6E4h case    4:*/		return 0x821AD6E8;
		  /* 821AD6E8h */ case    5:  		/* lwz R26, <#[R1 + 176]> */
		/* 821AD6E8h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AD6E8h case    5:*/		return 0x821AD6EC;
		  /* 821AD6ECh */ case    6:  		/* b 72 */
		/* 821AD6ECh case    6:*/		return 0x821AD734;
		/* 821AD6ECh case    6:*/		return 0x821AD6F0;
	}
	return 0x821AD6F0;
} // Block from 821AD6D4h-821AD6F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6F0);
		  /* 821AD6F0h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AD6F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AD6F0h case    0:*/		return 0x821AD6F4;
	}
	return 0x821AD6F4;
} // Block from 821AD6F0h-821AD6F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD6F4);
		  /* 821AD6F4h */ case    0:  		/* lwz R10, <#[R1 + 176]> */
		/* 821AD6F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AD6F4h case    0:*/		return 0x821AD6F8;
		  /* 821AD6F8h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821AD6F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AD6F8h case    1:*/		return 0x821AD6FC;
		  /* 821AD6FCh */ case    2:  		/* bc 4, CR6_EQ, 2532 */
		/* 821AD6FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AE0E0;  }
		/* 821AD6FCh case    2:*/		return 0x821AD700;
		  /* 821AD700h */ case    3:  		/* lwz R19, <#[R1 + 124]> */
		/* 821AD700h case    3:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AD700h case    3:*/		return 0x821AD704;
		  /* 821AD704h */ case    4:  		/* lwz R10, <#[R19 + 8]> */
		/* 821AD704h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000008) );
		/* 821AD704h case    4:*/		return 0x821AD708;
		  /* 821AD708h */ case    5:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821AD708h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821AD708h case    5:*/		return 0x821AD70C;
		  /* 821AD70Ch */ case    6:  		/* cmplwi CR6, R10, 16 */
		/* 821AD70Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000010);
		/* 821AD70Ch case    6:*/		return 0x821AD710;
		  /* 821AD710h */ case    7:  		/* bc 12, CR6_LT, 16 */
		/* 821AD710h case    7:*/		if ( regs.CR[6].lt ) { return 0x821AD720;  }
		/* 821AD710h case    7:*/		return 0x821AD714;
		  /* 821AD714h */ case    8:  		/* cmplwi CR6, R10, 18 */
		/* 821AD714h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 821AD714h case    8:*/		return 0x821AD718;
		  /* 821AD718h */ case    9:  		/* li R10, 1 */
		/* 821AD718h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD718h case    9:*/		return 0x821AD71C;
		  /* 821AD71Ch */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 821AD71Ch case   10:*/		if ( !regs.CR[6].gt ) { return 0x821AD724;  }
		/* 821AD71Ch case   10:*/		return 0x821AD720;
	}
	return 0x821AD720;
} // Block from 821AD6F4h-821AD720h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AD720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD720);
		  /* 821AD720h */ case    0:  		/* li R10, 0 */
		/* 821AD720h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821AD720h case    0:*/		return 0x821AD724;
	}
	return 0x821AD724;
} // Block from 821AD720h-821AD724h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AD724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD724);
		  /* 821AD724h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821AD724h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821AD724h case    0:*/		return 0x821AD728;
		  /* 821AD728h */ case    1:  		/* bc 12, CR0_EQ, 2488 */
		/* 821AD728h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AE0E0;  }
		/* 821AD728h case    1:*/		return 0x821AD72C;
		  /* 821AD72Ch */ case    2:  		/* lwz R27, <#[R1 + 196]> */
		/* 821AD72Ch case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000C4) );
		/* 821AD72Ch case    2:*/		return 0x821AD730;
		  /* 821AD730h */ case    3:  		/* mr R25, R11 */
		/* 821AD730h case    3:*/		regs.R25 = regs.R11;
		/* 821AD730h case    3:*/		return 0x821AD734;
	}
	return 0x821AD734;
} // Block from 821AD724h-821AD734h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AD734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD734);
		  /* 821AD734h */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821AD734h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821AD734h case    0:*/		return 0x821AD738;
		  /* 821AD738h */ case    1:  		/* bc 12, CR6_EQ, 2472 */
		/* 821AD738h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE0E0;  }
		/* 821AD738h case    1:*/		return 0x821AD73C;
		  /* 821AD73Ch */ case    2:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AD73Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AD73Ch case    2:*/		return 0x821AD740;
		  /* 821AD740h */ case    3:  		/* li R23, 0 */
		/* 821AD740h case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821AD740h case    3:*/		return 0x821AD744;
		  /* 821AD744h */ case    4:  		/* lwz R10, <#[R19 + 8]> */
		/* 821AD744h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000008) );
		/* 821AD744h case    4:*/		return 0x821AD748;
		  /* 821AD748h */ case    5:  		/* oris R9, R11, 1024 */
		/* 821AD748h case    5:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R11,0x400);
		/* 821AD748h case    5:*/		return 0x821AD74C;
		  /* 821AD74Ch */ case    6:  		/* rlwinm R31, R11, 6, 31, 31 */
		/* 821AD74Ch case    6:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R31,regs.R11);
		/* 821AD74Ch case    6:*/		return 0x821AD750;
		  /* 821AD750h */ case    7:  		/* stw R9, <#[R18 + 8]> */
		/* 821AD750h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R18 + 0x00000008) );
		/* 821AD750h case    7:*/		return 0x821AD754;
		  /* 821AD754h */ case    8:  		/* rlwinm R30, R10, 6, 31, 31 */
		/* 821AD754h case    8:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R30,regs.R10);
		/* 821AD754h case    8:*/		return 0x821AD758;
		  /* 821AD758h */ case    9:  		/* mr R17, R23 */
		/* 821AD758h case    9:*/		regs.R17 = regs.R23;
		/* 821AD758h case    9:*/		return 0x821AD75C;
		  /* 821AD75Ch */ case   10:  		/* stb R31, <#[R1 + 128]> */
		/* 821AD75Ch case   10:*/		cpu::mem::store8( regs, regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 821AD75Ch case   10:*/		return 0x821AD760;
		  /* 821AD760h */ case   11:  		/* stb R30, <#[R1 + 129]> */
		/* 821AD760h case   11:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R1 + 0x00000081) );
		/* 821AD760h case   11:*/		return 0x821AD764;
		  /* 821AD764h */ case   12:  		/* lwz R11, <#[R19 + 8]> */
		/* 821AD764h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AD764h case   12:*/		return 0x821AD768;
		  /* 821AD768h */ case   13:  		/* oris R11, R11, 1024 */
		/* 821AD768h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821AD768h case   13:*/		return 0x821AD76C;
		  /* 821AD76Ch */ case   14:  		/* stw R11, <#[R19 + 8]> */
		/* 821AD76Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AD76Ch case   14:*/		return 0x821AD770;
		  /* 821AD770h */ case   15:  		/* lwz R11, <#[R16 + 652]> */
		/* 821AD770h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000028C) );
		/* 821AD770h case   15:*/		return 0x821AD774;
		  /* 821AD774h */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AD774h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AD774h case   16:*/		return 0x821AD778;
		  /* 821AD778h */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AD778h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AD778h case   17:*/		return 0x821AD77C;
		  /* 821AD77Ch */ case   18:  		/* bc 4, CR0_EQ, 44 */
		/* 821AD77Ch case   18:*/		if ( !regs.CR[0].eq ) { return 0x821AD7A8;  }
		/* 821AD77Ch case   18:*/		return 0x821AD780;
		  /* 821AD780h */ case   19:  		/* cmplwi CR0, R11, 0 */
		/* 821AD780h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AD780h case   19:*/		return 0x821AD784;
		  /* 821AD784h */ case   20:  		/* bc 12, CR0_EQ, 36 */
		/* 821AD784h case   20:*/		if ( regs.CR[0].eq ) { return 0x821AD7A8;  }
		/* 821AD784h case   20:*/		return 0x821AD788;
		  /* 821AD788h */ case   21:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821AD788h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821AD788h case   21:*/		return 0x821AD78C;
		  /* 821AD78Ch */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AD78Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD78Ch case   22:*/		return 0x821AD790;
		  /* 821AD790h */ case   23:  		/* add R17, R11, R17 */
		/* 821AD790h case   23:*/		cpu::op::add<0>(regs,&regs.R17,regs.R11,regs.R17);
		/* 821AD790h case   23:*/		return 0x821AD794;
		  /* 821AD794h */ case   24:  		/* lwz R11, <#[R10 + 4]> */
		/* 821AD794h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821AD794h case   24:*/		return 0x821AD798;
		  /* 821AD798h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AD798h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AD798h case   25:*/		return 0x821AD79C;
		  /* 821AD79Ch */ case   26:  		/* bc 4, CR0_EQ, 12 */
		/* 821AD79Ch case   26:*/		if ( !regs.CR[0].eq ) { return 0x821AD7A8;  }
		/* 821AD79Ch case   26:*/		return 0x821AD7A0;
		  /* 821AD7A0h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821AD7A0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AD7A0h case   27:*/		return 0x821AD7A4;
		  /* 821AD7A4h */ case   28:  		/* bc 4, CR6_EQ, -28 */
		/* 821AD7A4h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821AD788;  }
		/* 821AD7A4h case   28:*/		return 0x821AD7A8;
	}
	return 0x821AD7A8;
} // Block from 821AD734h-821AD7A8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821AD7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD7A8);
		  /* 821AD7A8h */ case    0:  		/* mr R5, R18 */
		/* 821AD7A8h case    0:*/		regs.R5 = regs.R18;
		/* 821AD7A8h case    0:*/		return 0x821AD7AC;
		  /* 821AD7ACh */ case    1:  		/* lwz R6, <#[R1 + 112]> */
		/* 821AD7ACh case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 821AD7ACh case    1:*/		return 0x821AD7B0;
		  /* 821AD7B0h */ case    2:  		/* mr R4, R19 */
		/* 821AD7B0h case    2:*/		regs.R4 = regs.R19;
		/* 821AD7B0h case    2:*/		return 0x821AD7B4;
		  /* 821AD7B4h */ case    3:  		/* mr R3, R16 */
		/* 821AD7B4h case    3:*/		regs.R3 = regs.R16;
		/* 821AD7B4h case    3:*/		return 0x821AD7B8;
		  /* 821AD7B8h */ case    4:  		/* mr R15, R23 */
		/* 821AD7B8h case    4:*/		regs.R15 = regs.R23;
		/* 821AD7B8h case    4:*/		return 0x821AD7BC;
		  /* 821AD7BCh */ case    5:  		/* bl -16612 */
		/* 821AD7BCh case    5:*/		regs.LR = 0x821AD7C0; return 0x821A96D8;
		/* 821AD7BCh case    5:*/		return 0x821AD7C0;
		  /* 821AD7C0h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821AD7C0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821AD7C0h case    6:*/		return 0x821AD7C4;
		  /* 821AD7C4h */ case    7:  		/* bc 4, CR0_EQ, 5104 */
		/* 821AD7C4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821AEBB4;  }
		/* 821AD7C4h case    7:*/		return 0x821AD7C8;
		  /* 821AD7C8h */ case    8:  		/* lwz R29, <#[R19 + 44]> */
		/* 821AD7C8h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R19 + 0x0000002C) );
		/* 821AD7C8h case    8:*/		return 0x821AD7CC;
		  /* 821AD7CCh */ case    9:  		/* lwz R28, <#[R19 + 48]> */
		/* 821AD7CCh case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R19 + 0x00000030) );
		/* 821AD7CCh case    9:*/		return 0x821AD7D0;
		  /* 821AD7D0h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 821AD7D0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AD7D0h case   10:*/		return 0x821AD7D4;
		  /* 821AD7D4h */ case   11:  		/* rlwinm R14, R11, 7, 29, 31 */
		/* 821AD7D4h case   11:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R14,regs.R11);
		/* 821AD7D4h case   11:*/		return 0x821AD7D8;
		  /* 821AD7D8h */ case   12:  		/* cmplwi CR6, R14, 4 */
		/* 821AD7D8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000004);
		/* 821AD7D8h case   12:*/		return 0x821AD7DC;
		  /* 821AD7DCh */ case   13:  		/* bc 4, CR6_LT, 2236 */
		/* 821AD7DCh case   13:*/		if ( !regs.CR[6].lt ) { return 0x821AE098;  }
		/* 821AD7DCh case   13:*/		return 0x821AD7E0;
		  /* 821AD7E0h */ case   14:  		/* cmplwi CR6, R26, 0 */
		/* 821AD7E0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821AD7E0h case   14:*/		return 0x821AD7E4;
		  /* 821AD7E4h */ case   15:  		/* bc 4, CR6_EQ, 488 */
		/* 821AD7E4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821AD9CC;  }
		/* 821AD7E4h case   15:*/		return 0x821AD7E8;
		  /* 821AD7E8h */ case   16:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AD7E8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AD7E8h case   16:*/		return 0x821AD7EC;
		  /* 821AD7ECh */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AD7ECh case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AD7ECh case   17:*/		return 0x821AD7F0;
		  /* 821AD7F0h */ case   18:  		/* cmplwi CR6, R11, 256 */
		/* 821AD7F0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821AD7F0h case   18:*/		return 0x821AD7F4;
		  /* 821AD7F4h */ case   19:  		/* bc 4, CR6_EQ, 472 */
		/* 821AD7F4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821AD9CC;  }
		/* 821AD7F4h case   19:*/		return 0x821AD7F8;
		  /* 821AD7F8h */ case   20:  		/* li R10, 1 */
		/* 821AD7F8h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD7F8h case   20:*/		return 0x821AD7FC;
		  /* 821AD7FCh */ case   21:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AD7FCh case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AD7FCh case   21:*/		return 0x821AD800;
		  /* 821AD800h */ case   22:  		/* li R9, 0 */
		/* 821AD800h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AD800h case   22:*/		return 0x821AD804;
		  /* 821AD804h */ case   23:  		/* lwz R3, <#[R25 + 44]> */
		/* 821AD804h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AD804h case   23:*/		return 0x821AD808;
		  /* 821AD808h */ case   24:  		/* addi R7, R1, 444 */
		/* 821AD808h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1BC);
		/* 821AD808h case   24:*/		return 0x821AD80C;
		  /* 821AD80Ch */ case   25:  		/* addi R6, R1, 424 */
		/* 821AD80Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1A8);
		/* 821AD80Ch case   25:*/		return 0x821AD810;
		  /* 821AD810h */ case   26:  		/* addi R5, R1, 308 */
		/* 821AD810h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x134);
		/* 821AD810h case   26:*/		return 0x821AD814;
		  /* 821AD814h */ case   27:  		/* mr R4, R27 */
		/* 821AD814h case   27:*/		regs.R4 = regs.R27;
		/* 821AD814h case   27:*/		return 0x821AD818;
		  /* 821AD818h */ case   28:  		/* bl 482488 */
		/* 821AD818h case   28:*/		regs.LR = 0x821AD81C; return 0x822234D0;
		/* 821AD818h case   28:*/		return 0x821AD81C;
		  /* 821AD81Ch */ case   29:  		/* li R10, 1 */
		/* 821AD81Ch case   29:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD81Ch case   29:*/		return 0x821AD820;
		  /* 821AD820h */ case   30:  		/* li R9, 0 */
		/* 821AD820h case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AD820h case   30:*/		return 0x821AD824;
		  /* 821AD824h */ case   31:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AD824h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AD824h case   31:*/		return 0x821AD828;
		  /* 821AD828h */ case   32:  		/* addi R7, R1, 452 */
		/* 821AD828h case   32:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C4);
		/* 821AD828h case   32:*/		return 0x821AD82C;
		  /* 821AD82Ch */ case   33:  		/* lwz R3, <#[R25 + 48]> */
		/* 821AD82Ch case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821AD82Ch case   33:*/		return 0x821AD830;
		  /* 821AD830h */ case   34:  		/* addi R6, R1, 432 */
		/* 821AD830h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1B0);
		/* 821AD830h case   34:*/		return 0x821AD834;
		  /* 821AD834h */ case   35:  		/* addi R5, R1, 300 */
		/* 821AD834h case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x12C);
		/* 821AD834h case   35:*/		return 0x821AD838;
		  /* 821AD838h */ case   36:  		/* mr R4, R27 */
		/* 821AD838h case   36:*/		regs.R4 = regs.R27;
		/* 821AD838h case   36:*/		return 0x821AD83C;
		  /* 821AD83Ch */ case   37:  		/* bl 482452 */
		/* 821AD83Ch case   37:*/		regs.LR = 0x821AD840; return 0x822234D0;
		/* 821AD83Ch case   37:*/		return 0x821AD840;
		  /* 821AD840h */ case   38:  		/* mr R3, R16 */
		/* 821AD840h case   38:*/		regs.R3 = regs.R16;
		/* 821AD840h case   38:*/		return 0x821AD844;
		  /* 821AD844h */ case   39:  		/* lwz R6, <#[R1 + 444]> */
		/* 821AD844h case   39:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001BC) );
		/* 821AD844h case   39:*/		return 0x821AD848;
		  /* 821AD848h */ case   40:  		/* lwz R5, <#[R1 + 424]> */
		/* 821AD848h case   40:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001A8) );
		/* 821AD848h case   40:*/		return 0x821AD84C;
		  /* 821AD84Ch */ case   41:  		/* lwz R4, <#[R1 + 308]> */
		/* 821AD84Ch case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000134) );
		/* 821AD84Ch case   41:*/		return 0x821AD850;
		  /* 821AD850h */ case   42:  		/* bl -218856 */
		/* 821AD850h case   42:*/		regs.LR = 0x821AD854; return 0x82178168;
		/* 821AD850h case   42:*/		return 0x821AD854;
		  /* 821AD854h */ case   43:  		/* mr R31, R3 */
		/* 821AD854h case   43:*/		regs.R31 = regs.R3;
		/* 821AD854h case   43:*/		return 0x821AD858;
		  /* 821AD858h */ case   44:  		/* lwz R6, <#[R1 + 452]> */
		/* 821AD858h case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001C4) );
		/* 821AD858h case   44:*/		return 0x821AD85C;
		  /* 821AD85Ch */ case   45:  		/* mr R3, R16 */
		/* 821AD85Ch case   45:*/		regs.R3 = regs.R16;
		/* 821AD85Ch case   45:*/		return 0x821AD860;
		  /* 821AD860h */ case   46:  		/* lwz R5, <#[R1 + 432]> */
		/* 821AD860h case   46:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001B0) );
		/* 821AD860h case   46:*/		return 0x821AD864;
		  /* 821AD864h */ case   47:  		/* lwz R4, <#[R1 + 300]> */
		/* 821AD864h case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000012C) );
		/* 821AD864h case   47:*/		return 0x821AD868;
		  /* 821AD868h */ case   48:  		/* bl -218880 */
		/* 821AD868h case   48:*/		regs.LR = 0x821AD86C; return 0x82178168;
		/* 821AD868h case   48:*/		return 0x821AD86C;
		  /* 821AD86Ch */ case   49:  		/* addi R11, R1, 384 */
		/* 821AD86Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821AD86Ch case   49:*/		return 0x821AD870;
		  /* 821AD870h */ case   50:  		/* addi R9, R1, 152 */
		/* 821AD870h case   50:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x98);
		/* 821AD870h case   50:*/		return 0x821AD874;
		  /* 821AD874h */ case   51:  		/* stw R23, <#[R1 + 132]> */
		/* 821AD874h case   51:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000084) );
		/* 821AD874h case   51:*/		return 0x821AD878;
		  /* 821AD878h */ case   52:  		/* stw R11, <#[R1 + 108]> */
		/* 821AD878h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AD878h case   52:*/		return 0x821AD87C;
		  /* 821AD87Ch */ case   53:  		/* addi R10, R1, 208 */
		/* 821AD87Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 821AD87Ch case   53:*/		return 0x821AD880;
		  /* 821AD880h */ case   54:  		/* stw R9, <#[R1 + 92]> */
		/* 821AD880h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AD880h case   54:*/		return 0x821AD884;
		  /* 821AD884h */ case   55:  		/* mr R30, R3 */
		/* 821AD884h case   55:*/		regs.R30 = regs.R3;
		/* 821AD884h case   55:*/		return 0x821AD888;
		  /* 821AD888h */ case   56:  		/* addi R11, R1, 132 */
		/* 821AD888h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 821AD888h case   56:*/		return 0x821AD88C;
		  /* 821AD88Ch */ case   57:  		/* stw R10, <#[R1 + 100]> */
		/* 821AD88Ch case   57:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821AD88Ch case   57:*/		return 0x821AD890;
		  /* 821AD890h */ case   58:  		/* mr R9, R3 */
		/* 821AD890h case   58:*/		regs.R9 = regs.R3;
		/* 821AD890h case   58:*/		return 0x821AD894;
		  /* 821AD894h */ case   59:  		/* stw R23, <#[R1 + 152]> */
		/* 821AD894h case   59:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000098) );
		/* 821AD894h case   59:*/		return 0x821AD898;
		  /* 821AD898h */ case   60:  		/* mr R10, R18 */
		/* 821AD898h case   60:*/		regs.R10 = regs.R18;
		/* 821AD898h case   60:*/		return 0x821AD89C;
		  /* 821AD89Ch */ case   61:  		/* stw R11, <#[R1 + 84]> */
		/* 821AD89Ch case   61:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821AD89Ch case   61:*/		return 0x821AD8A0;
		  /* 821AD8A0h */ case   62:  		/* mr R8, R31 */
		/* 821AD8A0h case   62:*/		regs.R8 = regs.R31;
		/* 821AD8A0h case   62:*/		return 0x821AD8A4;
		  /* 821AD8A4h */ case   63:  		/* mr R7, R25 */
		/* 821AD8A4h case   63:*/		regs.R7 = regs.R25;
		/* 821AD8A4h case   63:*/		return 0x821AD8A8;
		  /* 821AD8A8h */ case   64:  		/* mr R6, R28 */
		/* 821AD8A8h case   64:*/		regs.R6 = regs.R28;
		/* 821AD8A8h case   64:*/		return 0x821AD8AC;
		  /* 821AD8ACh */ case   65:  		/* mr R5, R29 */
		/* 821AD8ACh case   65:*/		regs.R5 = regs.R29;
		/* 821AD8ACh case   65:*/		return 0x821AD8B0;
		  /* 821AD8B0h */ case   66:  		/* mr R4, R19 */
		/* 821AD8B0h case   66:*/		regs.R4 = regs.R19;
		/* 821AD8B0h case   66:*/		return 0x821AD8B4;
		  /* 821AD8B4h */ case   67:  		/* mr R3, R16 */
		/* 821AD8B4h case   67:*/		regs.R3 = regs.R16;
		/* 821AD8B4h case   67:*/		return 0x821AD8B8;
		  /* 821AD8B8h */ case   68:  		/* bl -53632 */
		/* 821AD8B8h case   68:*/		regs.LR = 0x821AD8BC; return 0x821A0738;
		/* 821AD8B8h case   68:*/		return 0x821AD8BC;
		  /* 821AD8BCh */ case   69:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD8BCh case   69:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD8BCh case   69:*/		return 0x821AD8C0;
		  /* 821AD8C0h */ case   70:  		/* bc 12, CR0_EQ, 128 */
		/* 821AD8C0h case   70:*/		if ( regs.CR[0].eq ) { return 0x821AD940;  }
		/* 821AD8C0h case   70:*/		return 0x821AD8C4;
		  /* 821AD8C4h */ case   71:  		/* lwz R11, <#[R1 + 384]> */
		/* 821AD8C4h case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000180) );
		/* 821AD8C4h case   71:*/		return 0x821AD8C8;
		  /* 821AD8C8h */ case   72:  		/* li R7, 3 */
		/* 821AD8C8h case   72:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821AD8C8h case   72:*/		return 0x821AD8CC;
		  /* 821AD8CCh */ case   73:  		/* lwz R9, <#[R1 + 208]> */
		/* 821AD8CCh case   73:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AD8CCh case   73:*/		return 0x821AD8D0;
		  /* 821AD8D0h */ case   74:  		/* mr R5, R18 */
		/* 821AD8D0h case   74:*/		regs.R5 = regs.R18;
		/* 821AD8D0h case   74:*/		return 0x821AD8D4;
		  /* 821AD8D4h */ case   75:  		/* rlwinm R10, R11, 28, 25, 31 */
		/* 821AD8D4h case   75:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R10,regs.R11);
		/* 821AD8D4h case   75:*/		return 0x821AD8D8;
		  /* 821AD8D8h */ case   76:  		/* rlwinm R11, R9, 28, 25, 31 */
		/* 821AD8D8h case   76:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R11,regs.R9);
		/* 821AD8D8h case   76:*/		return 0x821AD8DC;
		  /* 821AD8DCh */ case   77:  		/* mr R4, R19 */
		/* 821AD8DCh case   77:*/		regs.R4 = regs.R19;
		/* 821AD8DCh case   77:*/		return 0x821AD8E0;
		  /* 821AD8E0h */ case   78:  		/* add R6, R10, R11 */
		/* 821AD8E0h case   78:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 821AD8E0h case   78:*/		return 0x821AD8E4;
		  /* 821AD8E4h */ case   79:  		/* mr R3, R16 */
		/* 821AD8E4h case   79:*/		regs.R3 = regs.R16;
		/* 821AD8E4h case   79:*/		return 0x821AD8E8;
		  /* 821AD8E8h */ case   80:  		/* bl -37056 */
		/* 821AD8E8h case   80:*/		regs.LR = 0x821AD8EC; return 0x821A4828;
		/* 821AD8E8h case   80:*/		return 0x821AD8EC;
		  /* 821AD8ECh */ case   81:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD8ECh case   81:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD8ECh case   81:*/		return 0x821AD8F0;
		  /* 821AD8F0h */ case   82:  		/* bc 12, CR0_EQ, 80 */
		/* 821AD8F0h case   82:*/		if ( regs.CR[0].eq ) { return 0x821AD940;  }
		/* 821AD8F0h case   82:*/		return 0x821AD8F4;
		  /* 821AD8F4h */ case   83:  		/* addi R11, R1, 384 */
		/* 821AD8F4h case   83:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 821AD8F4h case   83:*/		return 0x821AD8F8;
		  /* 821AD8F8h */ case   84:  		/* lwz R9, <#[R1 + 152]> */
		/* 821AD8F8h case   84:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000098) );
		/* 821AD8F8h case   84:*/		return 0x821AD8FC;
		  /* 821AD8FCh */ case   85:  		/* addi R10, R1, 208 */
		/* 821AD8FCh case   85:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 821AD8FCh case   85:*/		return 0x821AD900;
		  /* 821AD900h */ case   86:  		/* lwz R8, <#[R1 + 132]> */
		/* 821AD900h case   86:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821AD900h case   86:*/		return 0x821AD904;
		  /* 821AD904h */ case   87:  		/* stw R11, <#[R1 + 108]> */
		/* 821AD904h case   87:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AD904h case   87:*/		return 0x821AD908;
		  /* 821AD908h */ case   88:  		/* addi R7, R1, 144 */
		/* 821AD908h case   88:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x90);
		/* 821AD908h case   88:*/		return 0x821AD90C;
		  /* 821AD90Ch */ case   89:  		/* addi R11, R1, 140 */
		/* 821AD90Ch case   89:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x8C);
		/* 821AD90Ch case   89:*/		return 0x821AD910;
		  /* 821AD910h */ case   90:  		/* stw R10, <#[R1 + 100]> */
		/* 821AD910h case   90:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821AD910h case   90:*/		return 0x821AD914;
		  /* 821AD914h */ case   91:  		/* stw R7, <#[R1 + 84]> */
		/* 821AD914h case   91:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 821AD914h case   91:*/		return 0x821AD918;
		  /* 821AD918h */ case   92:  		/* mr R10, R18 */
		/* 821AD918h case   92:*/		regs.R10 = regs.R18;
		/* 821AD918h case   92:*/		return 0x821AD91C;
		  /* 821AD91Ch */ case   93:  		/* stw R11, <#[R1 + 92]> */
		/* 821AD91Ch case   93:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AD91Ch case   93:*/		return 0x821AD920;
		  /* 821AD920h */ case   94:  		/* mr R7, R25 */
		/* 821AD920h case   94:*/		regs.R7 = regs.R25;
		/* 821AD920h case   94:*/		return 0x821AD924;
		  /* 821AD924h */ case   95:  		/* mr R6, R28 */
		/* 821AD924h case   95:*/		regs.R6 = regs.R28;
		/* 821AD924h case   95:*/		return 0x821AD928;
		  /* 821AD928h */ case   96:  		/* mr R5, R29 */
		/* 821AD928h case   96:*/		regs.R5 = regs.R29;
		/* 821AD928h case   96:*/		return 0x821AD92C;
		  /* 821AD92Ch */ case   97:  		/* mr R4, R19 */
		/* 821AD92Ch case   97:*/		regs.R4 = regs.R19;
		/* 821AD92Ch case   97:*/		return 0x821AD930;
		  /* 821AD930h */ case   98:  		/* mr R3, R16 */
		/* 821AD930h case   98:*/		regs.R3 = regs.R16;
		/* 821AD930h case   98:*/		return 0x821AD934;
		  /* 821AD934h */ case   99:  		/* bl -27980 */
		/* 821AD934h case   99:*/		regs.LR = 0x821AD938; return 0x821A6BE8;
		/* 821AD934h case   99:*/		return 0x821AD938;
		  /* 821AD938h */ case  100:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AD938h case  100:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AD938h case  100:*/		return 0x821AD93C;
		  /* 821AD93Ch */ case  101:  		/* bc 4, CR0_EQ, 4772 */
		/* 821AD93Ch case  101:*/		if ( !regs.CR[0].eq ) { return 0x821AEBE0;  }
		/* 821AD93Ch case  101:*/		return 0x821AD940;
	}
	return 0x821AD940;
} // Block from 821AD7A8h-821AD940h (102 instructions)

//////////////////////////////////////////////////////
// Block at 821AD940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD940);
		  /* 821AD940h */ case    0:  		/* lwz R11, <#[R1 + 308]> */
		/* 821AD940h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 821AD940h case    0:*/		return 0x821AD944;
		  /* 821AD944h */ case    1:  		/* addi R10, R11, 4 */
		/* 821AD944h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AD944h case    1:*/		return 0x821AD948;
		  /* 821AD948h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 821AD948h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD948h case    2:*/		return 0x821AD94C;
		  /* 821AD94Ch */ case    3:  		/* b 12 */
		/* 821AD94Ch case    3:*/		return 0x821AD958;
		/* 821AD94Ch case    3:*/		return 0x821AD950;
		  /* 821AD950h */ case    4:  		/* addi R10, R11, 8 */
		/* 821AD950h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AD950h case    4:*/		return 0x821AD954;
		  /* 821AD954h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AD954h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD954h case    5:*/		return 0x821AD958;
	}
	return 0x821AD958;
} // Block from 821AD940h-821AD958h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AD958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD958);
		  /* 821AD958h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821AD958h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AD958h case    0:*/		return 0x821AD95C;
		  /* 821AD95Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AD95Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AD950;  }
		/* 821AD95Ch case    1:*/		return 0x821AD960;
		  /* 821AD960h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AD960h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD960h case    2:*/		return 0x821AD964;
		  /* 821AD964h */ case    3:  		/* li R6, 26 */
		/* 821AD964h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AD964h case    3:*/		return 0x821AD968;
		  /* 821AD968h */ case    4:  		/* li R5, 20 */
		/* 821AD968h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AD968h case    4:*/		return 0x821AD96C;
		  /* 821AD96Ch */ case    5:  		/* mr R4, R31 */
		/* 821AD96Ch case    5:*/		regs.R4 = regs.R31;
		/* 821AD96Ch case    5:*/		return 0x821AD970;
		  /* 821AD970h */ case    6:  		/* mr R3, R16 */
		/* 821AD970h case    6:*/		regs.R3 = regs.R16;
		/* 821AD970h case    6:*/		return 0x821AD974;
		  /* 821AD974h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821AD974h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD974h case    7:*/		return 0x821AD978;
		  /* 821AD978h */ case    8:  		/* bl -298208 */
		/* 821AD978h case    8:*/		regs.LR = 0x821AD97C; return 0x82164C98;
		/* 821AD978h case    8:*/		return 0x821AD97C;
		  /* 821AD97Ch */ case    9:  		/* lwz R11, <#[R1 + 300]> */
		/* 821AD97Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000012C) );
		/* 821AD97Ch case    9:*/		return 0x821AD980;
		  /* 821AD980h */ case   10:  		/* addi R10, R11, 4 */
		/* 821AD980h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AD980h case   10:*/		return 0x821AD984;
		  /* 821AD984h */ case   11:  		/* lwz R11, <#[R10]> */
		/* 821AD984h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD984h case   11:*/		return 0x821AD988;
		  /* 821AD988h */ case   12:  		/* b 12 */
		/* 821AD988h case   12:*/		return 0x821AD994;
		/* 821AD988h case   12:*/		return 0x821AD98C;
		  /* 821AD98Ch */ case   13:  		/* addi R10, R11, 8 */
		/* 821AD98Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AD98Ch case   13:*/		return 0x821AD990;
		  /* 821AD990h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AD990h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD990h case   14:*/		return 0x821AD994;
	}
	return 0x821AD994;
} // Block from 821AD958h-821AD994h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AD994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD994);
		  /* 821AD994h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 821AD994h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AD994h case    0:*/		return 0x821AD998;
		  /* 821AD998h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AD998h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AD98C;  }
		/* 821AD998h case    1:*/		return 0x821AD99C;
		  /* 821AD99Ch */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AD99Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AD99Ch case    2:*/		return 0x821AD9A0;
		  /* 821AD9A0h */ case    3:  		/* li R6, 26 */
		/* 821AD9A0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AD9A0h case    3:*/		return 0x821AD9A4;
		  /* 821AD9A4h */ case    4:  		/* li R5, 20 */
		/* 821AD9A4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AD9A4h case    4:*/		return 0x821AD9A8;
		  /* 821AD9A8h */ case    5:  		/* mr R4, R30 */
		/* 821AD9A8h case    5:*/		regs.R4 = regs.R30;
		/* 821AD9A8h case    5:*/		return 0x821AD9AC;
		  /* 821AD9ACh */ case    6:  		/* mr R3, R16 */
		/* 821AD9ACh case    6:*/		regs.R3 = regs.R16;
		/* 821AD9ACh case    6:*/		return 0x821AD9B0;
		  /* 821AD9B0h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821AD9B0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AD9B0h case    7:*/		return 0x821AD9B4;
		  /* 821AD9B4h */ case    8:  		/* bl -298268 */
		/* 821AD9B4h case    8:*/		regs.LR = 0x821AD9B8; return 0x82164C98;
		/* 821AD9B4h case    8:*/		return 0x821AD9B8;
		  /* 821AD9B8h */ case    9:  		/* li R6, 0 */
		/* 821AD9B8h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AD9B8h case    9:*/		return 0x821AD9BC;
		  /* 821AD9BCh */ case   10:  		/* li R5, 1 */
		/* 821AD9BCh case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821AD9BCh case   10:*/		return 0x821AD9C0;
		  /* 821AD9C0h */ case   11:  		/* mr R4, R17 */
		/* 821AD9C0h case   11:*/		regs.R4 = regs.R17;
		/* 821AD9C0h case   11:*/		return 0x821AD9C4;
		  /* 821AD9C4h */ case   12:  		/* mr R3, R16 */
		/* 821AD9C4h case   12:*/		regs.R3 = regs.R16;
		/* 821AD9C4h case   12:*/		return 0x821AD9C8;
		  /* 821AD9C8h */ case   13:  		/* bl -39752 */
		/* 821AD9C8h case   13:*/		regs.LR = 0x821AD9CC; return 0x821A3E80;
		/* 821AD9C8h case   13:*/		return 0x821AD9CC;
	}
	return 0x821AD9CC;
} // Block from 821AD994h-821AD9CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AD9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AD9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AD9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AD9CC);
		  /* 821AD9CCh */ case    0:  		/* mr R6, R26 */
		/* 821AD9CCh case    0:*/		regs.R6 = regs.R26;
		/* 821AD9CCh case    0:*/		return 0x821AD9D0;
		  /* 821AD9D0h */ case    1:  		/* mr R5, R27 */
		/* 821AD9D0h case    1:*/		regs.R5 = regs.R27;
		/* 821AD9D0h case    1:*/		return 0x821AD9D4;
		  /* 821AD9D4h */ case    2:  		/* mr R4, R25 */
		/* 821AD9D4h case    2:*/		regs.R4 = regs.R25;
		/* 821AD9D4h case    2:*/		return 0x821AD9D8;
		  /* 821AD9D8h */ case    3:  		/* mr R3, R16 */
		/* 821AD9D8h case    3:*/		regs.R3 = regs.R16;
		/* 821AD9D8h case    3:*/		return 0x821AD9DC;
		  /* 821AD9DCh */ case    4:  		/* bl -219252 */
		/* 821AD9DCh case    4:*/		regs.LR = 0x821AD9E0; return 0x82178168;
		/* 821AD9DCh case    4:*/		return 0x821AD9E0;
		  /* 821AD9E0h */ case    5:  		/* mr R21, R3 */
		/* 821AD9E0h case    5:*/		regs.R21 = regs.R3;
		/* 821AD9E0h case    5:*/		return 0x821AD9E4;
		  /* 821AD9E4h */ case    6:  		/* mr R7, R3 */
		/* 821AD9E4h case    6:*/		regs.R7 = regs.R3;
		/* 821AD9E4h case    6:*/		return 0x821AD9E8;
		  /* 821AD9E8h */ case    7:  		/* li R10, 1 */
		/* 821AD9E8h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AD9E8h case    7:*/		return 0x821AD9EC;
		  /* 821AD9ECh */ case    8:  		/* addi R9, R1, 160 */
		/* 821AD9ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 821AD9ECh case    8:*/		return 0x821AD9F0;
		  /* 821AD9F0h */ case    9:  		/* mr R8, R18 */
		/* 821AD9F0h case    9:*/		regs.R8 = regs.R18;
		/* 821AD9F0h case    9:*/		return 0x821AD9F4;
		  /* 821AD9F4h */ case   10:  		/* mr R6, R18 */
		/* 821AD9F4h case   10:*/		regs.R6 = regs.R18;
		/* 821AD9F4h case   10:*/		return 0x821AD9F8;
		  /* 821AD9F8h */ case   11:  		/* mr R5, R29 */
		/* 821AD9F8h case   11:*/		regs.R5 = regs.R29;
		/* 821AD9F8h case   11:*/		return 0x821AD9FC;
		  /* 821AD9FCh */ case   12:  		/* mr R4, R19 */
		/* 821AD9FCh case   12:*/		regs.R4 = regs.R19;
		/* 821AD9FCh case   12:*/		return 0x821ADA00;
		  /* 821ADA00h */ case   13:  		/* mr R3, R16 */
		/* 821ADA00h case   13:*/		regs.R3 = regs.R16;
		/* 821ADA00h case   13:*/		return 0x821ADA04;
		  /* 821ADA04h */ case   14:  		/* mr R24, R23 */
		/* 821ADA04h case   14:*/		regs.R24 = regs.R23;
		/* 821ADA04h case   14:*/		return 0x821ADA08;
		  /* 821ADA08h */ case   15:  		/* mr R30, R23 */
		/* 821ADA08h case   15:*/		regs.R30 = regs.R23;
		/* 821ADA08h case   15:*/		return 0x821ADA0C;
		  /* 821ADA0Ch */ case   16:  		/* bl -56180 */
		/* 821ADA0Ch case   16:*/		regs.LR = 0x821ADA10; return 0x8219FE98;
		/* 821ADA0Ch case   16:*/		return 0x821ADA10;
		  /* 821ADA10h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 821ADA10h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821ADA10h case   17:*/		return 0x821ADA14;
		  /* 821ADA14h */ case   18:  		/* bc 4, CR0_EQ, 12 */
		/* 821ADA14h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821ADA20;  }
		/* 821ADA14h case   18:*/		return 0x821ADA18;
		  /* 821ADA18h */ case   19:  		/* mr R24, R29 */
		/* 821ADA18h case   19:*/		regs.R24 = regs.R29;
		/* 821ADA18h case   19:*/		return 0x821ADA1C;
		  /* 821ADA1Ch */ case   20:  		/* mr R30, R28 */
		/* 821ADA1Ch case   20:*/		regs.R30 = regs.R28;
		/* 821ADA1Ch case   20:*/		return 0x821ADA20;
	}
	return 0x821ADA20;
} // Block from 821AD9CCh-821ADA20h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821ADA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADA20);
		  /* 821ADA20h */ case    0:  		/* li R10, 1 */
		/* 821ADA20h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821ADA20h case    0:*/		return 0x821ADA24;
		  /* 821ADA24h */ case    1:  		/* addi R9, R1, 272 */
		/* 821ADA24h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x110);
		/* 821ADA24h case    1:*/		return 0x821ADA28;
		  /* 821ADA28h */ case    2:  		/* mr R8, R18 */
		/* 821ADA28h case    2:*/		regs.R8 = regs.R18;
		/* 821ADA28h case    2:*/		return 0x821ADA2C;
		  /* 821ADA2Ch */ case    3:  		/* mr R7, R21 */
		/* 821ADA2Ch case    3:*/		regs.R7 = regs.R21;
		/* 821ADA2Ch case    3:*/		return 0x821ADA30;
		  /* 821ADA30h */ case    4:  		/* mr R6, R18 */
		/* 821ADA30h case    4:*/		regs.R6 = regs.R18;
		/* 821ADA30h case    4:*/		return 0x821ADA34;
		  /* 821ADA34h */ case    5:  		/* mr R5, R28 */
		/* 821ADA34h case    5:*/		regs.R5 = regs.R28;
		/* 821ADA34h case    5:*/		return 0x821ADA38;
		  /* 821ADA38h */ case    6:  		/* mr R4, R19 */
		/* 821ADA38h case    6:*/		regs.R4 = regs.R19;
		/* 821ADA38h case    6:*/		return 0x821ADA3C;
		  /* 821ADA3Ch */ case    7:  		/* mr R3, R16 */
		/* 821ADA3Ch case    7:*/		regs.R3 = regs.R16;
		/* 821ADA3Ch case    7:*/		return 0x821ADA40;
		  /* 821ADA40h */ case    8:  		/* bl -56232 */
		/* 821ADA40h case    8:*/		regs.LR = 0x821ADA44; return 0x8219FE98;
		/* 821ADA40h case    8:*/		return 0x821ADA44;
		  /* 821ADA44h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 821ADA44h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821ADA44h case    9:*/		return 0x821ADA48;
		  /* 821ADA48h */ case   10:  		/* bc 4, CR0_EQ, 64 */
		/* 821ADA48h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821ADA88;  }
		/* 821ADA48h case   10:*/		return 0x821ADA4C;
		  /* 821ADA4Ch */ case   11:  		/* lwz R11, <#[R1 + 272]> */
		/* 821ADA4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 821ADA4Ch case   11:*/		return 0x821ADA50;
		  /* 821ADA50h */ case   12:  		/* cmplwi CR6, R24, 0 */
		/* 821ADA50h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821ADA50h case   12:*/		return 0x821ADA54;
		  /* 821ADA54h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 821ADA54h case   13:*/		if ( regs.CR[6].eq ) { return 0x821ADA6C;  }
		/* 821ADA54h case   13:*/		return 0x821ADA58;
		  /* 821ADA58h */ case   14:  		/* lwz R10, <#[R1 + 160]> */
		/* 821ADA58h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADA58h case   14:*/		return 0x821ADA5C;
		  /* 821ADA5Ch */ case   15:  		/* rlwinm R9, R11, 0, 21, 27 */
		/* 821ADA5Ch case   15:*/		cpu::op::rlwinm<0,0,21,27>(regs,&regs.R9,regs.R11);
		/* 821ADA5Ch case   15:*/		return 0x821ADA60;
		  /* 821ADA60h */ case   16:  		/* rlwinm R10, R10, 0, 21, 27 */
		/* 821ADA60h case   16:*/		cpu::op::rlwinm<0,0,21,27>(regs,&regs.R10,regs.R10);
		/* 821ADA60h case   16:*/		return 0x821ADA64;
		  /* 821ADA64h */ case   17:  		/* cmplw CR6, R9, R10 */
		/* 821ADA64h case   17:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821ADA64h case   17:*/		return 0x821ADA68;
		  /* 821ADA68h */ case   18:  		/* bc 4, CR6_LT, 32 */
		/* 821ADA68h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821ADA88;  }
		/* 821ADA68h case   18:*/		return 0x821ADA6C;
	}
	return 0x821ADA6C;
} // Block from 821ADA20h-821ADA6Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821ADA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADA6C);
		  /* 821ADA6Ch */ case    0:  		/* lwz R10, <#[R1 + 276]> */
		/* 821ADA6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 821ADA6Ch case    0:*/		return 0x821ADA70;
		  /* 821ADA70h */ case    1:  		/* mr R24, R28 */
		/* 821ADA70h case    1:*/		regs.R24 = regs.R28;
		/* 821ADA70h case    1:*/		return 0x821ADA74;
		  /* 821ADA74h */ case    2:  		/* lwz R9, <#[R1 + 280]> */
		/* 821ADA74h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000118) );
		/* 821ADA74h case    2:*/		return 0x821ADA78;
		  /* 821ADA78h */ case    3:  		/* mr R30, R29 */
		/* 821ADA78h case    3:*/		regs.R30 = regs.R29;
		/* 821ADA78h case    3:*/		return 0x821ADA7C;
		  /* 821ADA7Ch */ case    4:  		/* stw R11, <#[R1 + 160]> */
		/* 821ADA7Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADA7Ch case    4:*/		return 0x821ADA80;
		  /* 821ADA80h */ case    5:  		/* stw R10, <#[R1 + 164]> */
		/* 821ADA80h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 821ADA80h case    5:*/		return 0x821ADA84;
		  /* 821ADA84h */ case    6:  		/* stw R9, <#[R1 + 168]> */
		/* 821ADA84h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000A8) );
		/* 821ADA84h case    6:*/		return 0x821ADA88;
	}
	return 0x821ADA88;
} // Block from 821ADA6Ch-821ADA88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821ADA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADA88);
		  /* 821ADA88h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821ADA88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821ADA88h case    0:*/		return 0x821ADA8C;
		  /* 821ADA8Ch */ case    1:  		/* bc 12, CR6_EQ, 1548 */
		/* 821ADA8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE098;  }
		/* 821ADA8Ch case    1:*/		return 0x821ADA90;
		  /* 821ADA90h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 821ADA90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821ADA90h case    2:*/		return 0x821ADA94;
		  /* 821ADA94h */ case    3:  		/* li R7, 1 */
		/* 821ADA94h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821ADA94h case    3:*/		return 0x821ADA98;
		  /* 821ADA98h */ case    4:  		/* mr R3, R16 */
		/* 821ADA98h case    4:*/		regs.R3 = regs.R16;
		/* 821ADA98h case    4:*/		return 0x821ADA9C;
		  /* 821ADA9Ch */ case    5:  		/* lwz R4, <#[R30 + 12]> */
		/* 821ADA9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADA9Ch case    5:*/		return 0x821ADAA0;
		  /* 821ADAA0h */ case    6:  		/* rlwinm R6, R11, 0, 27, 31 */
		/* 821ADAA0h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R11);
		/* 821ADAA0h case    6:*/		return 0x821ADAA4;
		  /* 821ADAA4h */ case    7:  		/* fmr FR1, FR30 */
		/* 821ADAA4h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821ADAA4h case    7:*/		return 0x821ADAA8;
		  /* 821ADAA8h */ case    8:  		/* mr R22, R23 */
		/* 821ADAA8h case    8:*/		regs.R22 = regs.R23;
		/* 821ADAA8h case    8:*/		return 0x821ADAAC;
		  /* 821ADAACh */ case    9:  		/* mr R20, R23 */
		/* 821ADAACh case    9:*/		regs.R20 = regs.R23;
		/* 821ADAACh case    9:*/		return 0x821ADAB0;
		  /* 821ADAB0h */ case   10:  		/* li R25, 0 */
		/* 821ADAB0h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821ADAB0h case   10:*/		return 0x821ADAB4;
		  /* 821ADAB4h */ case   11:  		/* bl 519516 */
		/* 821ADAB4h case   11:*/		regs.LR = 0x821ADAB8; return 0x8222C810;
		/* 821ADAB4h case   11:*/		return 0x821ADAB8;
		  /* 821ADAB8h */ case   12:  		/* mr R31, R3 */
		/* 821ADAB8h case   12:*/		regs.R31 = regs.R3;
		/* 821ADAB8h case   12:*/		return 0x821ADABC;
		  /* 821ADABCh */ case   13:  		/* cmpwi CR6, R3, 4 */
		/* 821ADABCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821ADABCh case   13:*/		return 0x821ADAC0;
		  /* 821ADAC0h */ case   14:  		/* mr R3, R16 */
		/* 821ADAC0h case   14:*/		regs.R3 = regs.R16;
		/* 821ADAC0h case   14:*/		return 0x821ADAC4;
		  /* 821ADAC4h */ case   15:  		/* bc 12, CR6_EQ, 188 */
		/* 821ADAC4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821ADB80;  }
		/* 821ADAC4h case   15:*/		return 0x821ADAC8;
		  /* 821ADAC8h */ case   16:  		/* mr R4, R30 */
		/* 821ADAC8h case   16:*/		regs.R4 = regs.R30;
		/* 821ADAC8h case   16:*/		return 0x821ADACC;
		  /* 821ADACCh */ case   17:  		/* lwz R5, <#[R30 + 12]> */
		/* 821ADACCh case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADACCh case   17:*/		return 0x821ADAD0;
		  /* 821ADAD0h */ case   18:  		/* bl -248288 */
		/* 821ADAD0h case   18:*/		regs.LR = 0x821ADAD4; return 0x821710F0;
		/* 821ADAD0h case   18:*/		return 0x821ADAD4;
		  /* 821ADAD4h */ case   19:  		/* rlwinm R11, R14, 1, 0, 30 */
		/* 821ADAD4h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R14);
		/* 821ADAD4h case   19:*/		return 0x821ADAD8;
		  /* 821ADAD8h */ case   20:  		/* li R9, 3 */
		/* 821ADAD8h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821ADAD8h case   20:*/		return 0x821ADADC;
		  /* 821ADADCh */ case   21:  		/* lwz R7, <#[R3]> */
		/* 821ADADCh case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 821ADADCh case   21:*/		return 0x821ADAE0;
		  /* 821ADAE0h */ case   22:  		/* addi R8, R14, 1 */
		/* 821ADAE0h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R14,0x1);
		/* 821ADAE0h case   22:*/		return 0x821ADAE4;
		  /* 821ADAE4h */ case   23:  		/* lwz R10, <#[R1 + 160]> */
		/* 821ADAE4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADAE4h case   23:*/		return 0x821ADAE8;
		  /* 821ADAE8h */ case   24:  		/* slw R9, R9, R11 */
		/* 821ADAE8h case   24:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821ADAE8h case   24:*/		return 0x821ADAEC;
		  /* 821ADAECh */ case   25:  		/* nor R9, R9, R9 */
		/* 821ADAECh case   25:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821ADAECh case   25:*/		return 0x821ADAF0;
		  /* 821ADAF0h */ case   26:  		/* slw R11, R31, R11 */
		/* 821ADAF0h case   26:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821ADAF0h case   26:*/		return 0x821ADAF4;
		  /* 821ADAF4h */ case   27:  		/* rlwimi R7, R8, 25, 4, 6 */
		/* 821ADAF4h case   27:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R7,regs.R8);
		/* 821ADAF4h case   27:*/		return 0x821ADAF8;
		  /* 821ADAF8h */ case   28:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 821ADAF8h case   28:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 821ADAF8h case   28:*/		return 0x821ADAFC;
		  /* 821ADAFCh */ case   29:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821ADAFCh case   29:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821ADAFCh case   29:*/		return 0x821ADB00;
		  /* 821ADB00h */ case   30:  		/* and R9, R9, R7 */
		/* 821ADB00h case   30:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821ADB00h case   30:*/		return 0x821ADB04;
		  /* 821ADB04h */ case   31:  		/* rlwinm R31, R10, 0, 28, 20 */
		/* 821ADB04h case   31:*/		cpu::op::rlwinm<0,0,28,20>(regs,&regs.R31,regs.R10);
		/* 821ADB04h case   31:*/		return 0x821ADB08;
		  /* 821ADB08h */ case   32:  		/* or R11, R9, R11 */
		/* 821ADB08h case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821ADB08h case   32:*/		return 0x821ADB0C;
		  /* 821ADB0Ch */ case   33:  		/* mr R27, R3 */
		/* 821ADB0Ch case   33:*/		regs.R27 = regs.R3;
		/* 821ADB0Ch case   33:*/		return 0x821ADB10;
		  /* 821ADB10h */ case   34:  		/* stw R31, <#[R1 + 160]> */
		/* 821ADB10h case   34:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADB10h case   34:*/		return 0x821ADB14;
		  /* 821ADB14h */ case   35:  		/* rlwimi R11, R7, 0, 27, 18 */
		/* 821ADB14h case   35:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R11,regs.R7);
		/* 821ADB14h case   35:*/		return 0x821ADB18;
		  /* 821ADB18h */ case   36:  		/* stw R11, <#[R3]> */
		/* 821ADB18h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821ADB18h case   36:*/		return 0x821ADB1C;
		  /* 821ADB1Ch */ case   37:  		/* lwz R11, <#[R30 + 12]> */
		/* 821ADB1Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADB1Ch case   37:*/		return 0x821ADB20;
		  /* 821ADB20h */ case   38:  		/* lwz R11, <#[R11 + 4]> */
		/* 821ADB20h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821ADB20h case   38:*/		return 0x821ADB24;
		  /* 821ADB24h */ case   39:  		/* cmplwi CR6, R11, 0 */
		/* 821ADB24h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ADB24h case   39:*/		return 0x821ADB28;
		  /* 821ADB28h */ case   40:  		/* bc 12, CR6_EQ, 52 */
		/* 821ADB28h case   40:*/		if ( regs.CR[6].eq ) { return 0x821ADB5C;  }
		/* 821ADB28h case   40:*/		return 0x821ADB2C;
		  /* 821ADB2Ch */ case   41:  		/* lwz R4, <#[R11 + 16]> */
		/* 821ADB2Ch case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821ADB2Ch case   41:*/		return 0x821ADB30;
		  /* 821ADB30h */ case   42:  		/* cmplwi CR6, R4, 0 */
		/* 821ADB30h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821ADB30h case   42:*/		return 0x821ADB34;
		  /* 821ADB34h */ case   43:  		/* bc 12, CR6_EQ, 32 */
		/* 821ADB34h case   43:*/		if ( regs.CR[6].eq ) { return 0x821ADB54;  }
		/* 821ADB34h case   43:*/		return 0x821ADB38;
		  /* 821ADB38h */ case   44:  		/* lwz R10, <#[R4 + 8]> */
		/* 821ADB38h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821ADB38h case   44:*/		return 0x821ADB3C;
		  /* 821ADB3Ch */ case   45:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ADB3Ch case   45:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ADB3Ch case   45:*/		return 0x821ADB40;
		  /* 821ADB40h */ case   46:  		/* cmplwi CR6, R10, 14080 */
		/* 821ADB40h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821ADB40h case   46:*/		return 0x821ADB44;
		  /* 821ADB44h */ case   47:  		/* bc 4, CR6_EQ, 16 */
		/* 821ADB44h case   47:*/		if ( !regs.CR[6].eq ) { return 0x821ADB54;  }
		/* 821ADB44h case   47:*/		return 0x821ADB48;
		  /* 821ADB48h */ case   48:  		/* lwz R10, <#[R11]> */
		/* 821ADB48h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADB48h case   48:*/		return 0x821ADB4C;
		  /* 821ADB4Ch */ case   49:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821ADB4Ch case   49:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821ADB4Ch case   49:*/		return 0x821ADB50;
		  /* 821ADB50h */ case   50:  		/* bc 4, CR0_EQ, 16 */
		/* 821ADB50h case   50:*/		if ( !regs.CR[0].eq ) { return 0x821ADB60;  }
		/* 821ADB50h case   50:*/		return 0x821ADB54;
	}
	return 0x821ADB54;
} // Block from 821ADA88h-821ADB54h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821ADB54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADB54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADB54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADB54);
		  /* 821ADB54h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ADB54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADB54h case    0:*/		return 0x821ADB58;
		  /* 821ADB58h */ case    1:  		/* b -52 */
		/* 821ADB58h case    1:*/		return 0x821ADB24;
		/* 821ADB58h case    1:*/		return 0x821ADB5C;
	}
	return 0x821ADB5C;
} // Block from 821ADB54h-821ADB5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ADB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADB5C);
		  /* 821ADB5Ch */ case    0:  		/* li R4, 0 */
		/* 821ADB5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821ADB5Ch case    0:*/		return 0x821ADB60;
	}
	return 0x821ADB60;
} // Block from 821ADB5Ch-821ADB60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ADB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADB60);
		  /* 821ADB60h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821ADB60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821ADB60h case    0:*/		return 0x821ADB64;
		  /* 821ADB64h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821ADB64h case    1:*/		if ( regs.CR[6].eq ) { return 0x821ADB70;  }
		/* 821ADB64h case    1:*/		return 0x821ADB68;
		  /* 821ADB68h */ case    2:  		/* mr R3, R16 */
		/* 821ADB68h case    2:*/		regs.R3 = regs.R16;
		/* 821ADB68h case    2:*/		return 0x821ADB6C;
		  /* 821ADB6Ch */ case    3:  		/* bl -53428 */
		/* 821ADB6Ch case    3:*/		regs.LR = 0x821ADB70; return 0x821A0AB8;
		/* 821ADB6Ch case    3:*/		return 0x821ADB70;
	}
	return 0x821ADB70;
} // Block from 821ADB60h-821ADB70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821ADB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADB70);
		  /* 821ADB70h */ case    0:  		/* mr R3, R16 */
		/* 821ADB70h case    0:*/		regs.R3 = regs.R16;
		/* 821ADB70h case    0:*/		return 0x821ADB74;
		  /* 821ADB74h */ case    1:  		/* lwz R4, <#[R30 + 12]> */
		/* 821ADB74h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADB74h case    1:*/		return 0x821ADB78;
		  /* 821ADB78h */ case    2:  		/* bl -53440 */
		/* 821ADB78h case    2:*/		regs.LR = 0x821ADB7C; return 0x821A0AB8;
		/* 821ADB78h case    2:*/		return 0x821ADB7C;
		  /* 821ADB7Ch */ case    3:  		/* b 820 */
		/* 821ADB7Ch case    3:*/		return 0x821ADEB0;
		/* 821ADB7Ch case    3:*/		return 0x821ADB80;
	}
	return 0x821ADB80;
} // Block from 821ADB70h-821ADB80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821ADB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADB80);
		  /* 821ADB80h */ case    0:  		/* li R4, 1 */
		/* 821ADB80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821ADB80h case    0:*/		return 0x821ADB84;
		  /* 821ADB84h */ case    1:  		/* fmr FR4, FR31 */
		/* 821ADB84h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821ADB84h case    1:*/		return 0x821ADB88;
		  /* 821ADB88h */ case    2:  		/* fmr FR3, FR31 */
		/* 821ADB88h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821ADB88h case    2:*/		return 0x821ADB8C;
		  /* 821ADB8Ch */ case    3:  		/* fmr FR2, FR31 */
		/* 821ADB8Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821ADB8Ch case    3:*/		return 0x821ADB90;
		  /* 821ADB90h */ case    4:  		/* fmr FR1, FR30 */
		/* 821ADB90h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821ADB90h case    4:*/		return 0x821ADB94;
		  /* 821ADB94h */ case    5:  		/* bl 511940 */
		/* 821ADB94h case    5:*/		regs.LR = 0x821ADB98; return 0x8222AB58;
		/* 821ADB94h case    5:*/		return 0x821ADB98;
		  /* 821ADB98h */ case    6:  		/* mr R22, R3 */
		/* 821ADB98h case    6:*/		regs.R22 = regs.R3;
		/* 821ADB98h case    6:*/		return 0x821ADB9C;
		  /* 821ADB9Ch */ case    7:  		/* mr R4, R3 */
		/* 821ADB9Ch case    7:*/		regs.R4 = regs.R3;
		/* 821ADB9Ch case    7:*/		return 0x821ADBA0;
		  /* 821ADBA0h */ case    8:  		/* li R5, 0 */
		/* 821ADBA0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821ADBA0h case    8:*/		return 0x821ADBA4;
		  /* 821ADBA4h */ case    9:  		/* mr R3, R16 */
		/* 821ADBA4h case    9:*/		regs.R3 = regs.R16;
		/* 821ADBA4h case    9:*/		return 0x821ADBA8;
		  /* 821ADBA8h */ case   10:  		/* bl -219800 */
		/* 821ADBA8h case   10:*/		regs.LR = 0x821ADBAC; return 0x82178110;
		/* 821ADBA8h case   10:*/		return 0x821ADBAC;
		  /* 821ADBACh */ case   11:  		/* mr R26, R3 */
		/* 821ADBACh case   11:*/		regs.R26 = regs.R3;
		/* 821ADBACh case   11:*/		return 0x821ADBB0;
		  /* 821ADBB0h */ case   12:  		/* mr R3, R22 */
		/* 821ADBB0h case   12:*/		regs.R3 = regs.R22;
		/* 821ADBB0h case   12:*/		return 0x821ADBB4;
		  /* 821ADBB4h */ case   13:  		/* bl -96260 */
		/* 821ADBB4h case   13:*/		regs.LR = 0x821ADBB8; return 0x821963B0;
		/* 821ADBB4h case   13:*/		return 0x821ADBB8;
		  /* 821ADBB8h */ case   14:  		/* lwz R11, <#[R22 + 8]> */
		/* 821ADBB8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821ADBB8h case   14:*/		return 0x821ADBBC;
		  /* 821ADBBCh */ case   15:  		/* oris R11, R11, 256 */
		/* 821ADBBCh case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821ADBBCh case   15:*/		return 0x821ADBC0;
		  /* 821ADBC0h */ case   16:  		/* stw R11, <#[R22 + 8]> */
		/* 821ADBC0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821ADBC0h case   16:*/		return 0x821ADBC4;
		  /* 821ADBC4h */ case   17:  		/* lwz R11, <#[R30 + 12]> */
		/* 821ADBC4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADBC4h case   17:*/		return 0x821ADBC8;
		  /* 821ADBC8h */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ADBC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADBC8h case   18:*/		return 0x821ADBCC;
		  /* 821ADBCCh */ case   19:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821ADBCCh case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821ADBCCh case   19:*/		return 0x821ADBD0;
		  /* 821ADBD0h */ case   20:  		/* cmplwi CR6, R11, 16000 */
		/* 821ADBD0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821ADBD0h case   20:*/		return 0x821ADBD4;
		  /* 821ADBD4h */ case   21:  		/* bc 4, CR6_EQ, 12 */
		/* 821ADBD4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821ADBE0;  }
		/* 821ADBD4h case   21:*/		return 0x821ADBD8;
		  /* 821ADBD8h */ case   22:  		/* mr R25, R26 */
		/* 821ADBD8h case   22:*/		regs.R25 = regs.R26;
		/* 821ADBD8h case   22:*/		return 0x821ADBDC;
		  /* 821ADBDCh */ case   23:  		/* b 336 */
		/* 821ADBDCh case   23:*/		return 0x821ADD2C;
		/* 821ADBDCh case   23:*/		return 0x821ADBE0;
	}
	return 0x821ADBE0;
} // Block from 821ADB80h-821ADBE0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821ADBE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADBE0);
		  /* 821ADBE0h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821ADBE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADBE0h case    0:*/		return 0x821ADBE4;
		  /* 821ADBE4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821ADBE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821ADBE4h case    1:*/		return 0x821ADBE8;
		  /* 821ADBE8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821ADBE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ADBE8h case    2:*/		return 0x821ADBEC;
		  /* 821ADBECh */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 821ADBECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821ADC20;  }
		/* 821ADBECh case    3:*/		return 0x821ADBF0;
		  /* 821ADBF0h */ case    4:  		/* lwz R31, <#[R11 + 16]> */
		/* 821ADBF0h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821ADBF0h case    4:*/		return 0x821ADBF4;
		  /* 821ADBF4h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821ADBF4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ADBF4h case    5:*/		return 0x821ADBF8;
		  /* 821ADBF8h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 821ADBF8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821ADC18;  }
		/* 821ADBF8h case    6:*/		return 0x821ADBFC;
		  /* 821ADBFCh */ case    7:  		/* lwz R10, <#[R31 + 8]> */
		/* 821ADBFCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821ADBFCh case    7:*/		return 0x821ADC00;
		  /* 821ADC00h */ case    8:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821ADC00h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821ADC00h case    8:*/		return 0x821ADC04;
		  /* 821ADC04h */ case    9:  		/* cmplwi CR6, R10, 14080 */
		/* 821ADC04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821ADC04h case    9:*/		return 0x821ADC08;
		  /* 821ADC08h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 821ADC08h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821ADC18;  }
		/* 821ADC08h case   10:*/		return 0x821ADC0C;
		  /* 821ADC0Ch */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821ADC0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADC0Ch case   11:*/		return 0x821ADC10;
		  /* 821ADC10h */ case   12:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821ADC10h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821ADC10h case   12:*/		return 0x821ADC14;
		  /* 821ADC14h */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 821ADC14h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821ADC24;  }
		/* 821ADC14h case   13:*/		return 0x821ADC18;
	}
	return 0x821ADC18;
} // Block from 821ADBE0h-821ADC18h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821ADC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADC18);
		  /* 821ADC18h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ADC18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADC18h case    0:*/		return 0x821ADC1C;
		  /* 821ADC1Ch */ case    1:  		/* b -52 */
		/* 821ADC1Ch case    1:*/		return 0x821ADBE8;
		/* 821ADC1Ch case    1:*/		return 0x821ADC20;
	}
	return 0x821ADC20;
} // Block from 821ADC18h-821ADC20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ADC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADC20);
		  /* 821ADC20h */ case    0:  		/* li R31, 0 */
		/* 821ADC20h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821ADC20h case    0:*/		return 0x821ADC24;
	}
	return 0x821ADC24;
} // Block from 821ADC20h-821ADC24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ADC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADC24);
		  /* 821ADC24h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821ADC24h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821ADC24h case    0:*/		return 0x821ADC28;
		  /* 821ADC28h */ case    1:  		/* bc 12, CR6_EQ, 196 */
		/* 821ADC28h case    1:*/		if ( regs.CR[6].eq ) { return 0x821ADCEC;  }
		/* 821ADC28h case    1:*/		return 0x821ADC2C;
		  /* 821ADC2Ch */ case    2:  		/* li R27, 0 */
		/* 821ADC2Ch case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821ADC2Ch case    2:*/		return 0x821ADC30;
		  /* 821ADC30h */ case    3:  		/* addi R28, R31, 44 */
		/* 821ADC30h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x2C);
		/* 821ADC30h case    3:*/		return 0x821ADC34;
		  /* 821ADC34h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821ADC34h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ADC34h case    4:*/		return 0x821ADC38;
		  /* 821ADC38h */ case    5:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821ADC38h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821ADC38h case    5:*/		return 0x821ADC3C;
		  /* 821ADC3Ch */ case    6:  		/* cmplw CR6, R27, R11 */
		/* 821ADC3Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821ADC3Ch case    6:*/		return 0x821ADC40;
		  /* 821ADC40h */ case    7:  		/* bc 4, CR6_LT, 172 */
		/* 821ADC40h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821ADCEC;  }
		/* 821ADC40h case    7:*/		return 0x821ADC44;
		  /* 821ADC44h */ case    8:  		/* lwz R25, <#[R28]> */
		/* 821ADC44h case    8:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R28 + 0x00000000) );
		/* 821ADC44h case    8:*/		return 0x821ADC48;
		  /* 821ADC48h */ case    9:  		/* li R7, 1 */
		/* 821ADC48h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821ADC48h case    9:*/		return 0x821ADC4C;
		  /* 821ADC4Ch */ case   10:  		/* mr R3, R16 */
		/* 821ADC4Ch case   10:*/		regs.R3 = regs.R16;
		/* 821ADC4Ch case   10:*/		return 0x821ADC50;
		  /* 821ADC50h */ case   11:  		/* fmr FR1, FR30 */
		/* 821ADC50h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821ADC50h case   11:*/		return 0x821ADC54;
		  /* 821ADC54h */ case   12:  		/* lwz R11, <#[R25]> */
		/* 821ADC54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821ADC54h case   12:*/		return 0x821ADC58;
		  /* 821ADC58h */ case   13:  		/* lwz R4, <#[R25 + 12]> */
		/* 821ADC58h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821ADC58h case   13:*/		return 0x821ADC5C;
		  /* 821ADC5Ch */ case   14:  		/* rlwinm R6, R11, 0, 27, 31 */
		/* 821ADC5Ch case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R11);
		/* 821ADC5Ch case   14:*/		return 0x821ADC60;
		  /* 821ADC60h */ case   15:  		/* bl 519088 */
		/* 821ADC60h case   15:*/		regs.LR = 0x821ADC64; return 0x8222C810;
		/* 821ADC60h case   15:*/		return 0x821ADC64;
		  /* 821ADC64h */ case   16:  		/* mr R29, R3 */
		/* 821ADC64h case   16:*/		regs.R29 = regs.R3;
		/* 821ADC64h case   16:*/		return 0x821ADC68;
		  /* 821ADC68h */ case   17:  		/* cmpwi CR6, R3, 4 */
		/* 821ADC68h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821ADC68h case   17:*/		return 0x821ADC6C;
		  /* 821ADC6Ch */ case   18:  		/* bc 12, CR6_EQ, 72 */
		/* 821ADC6Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821ADCB4;  }
		/* 821ADC6Ch case   18:*/		return 0x821ADC70;
		  /* 821ADC70h */ case   19:  		/* lwz R11, <#[R31 + 8]> */
		/* 821ADC70h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821ADC70h case   19:*/		return 0x821ADC74;
		  /* 821ADC74h */ case   20:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821ADC74h case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821ADC74h case   20:*/		return 0x821ADC78;
		  /* 821ADC78h */ case   21:  		/* cmplwi CR6, R11, 14720 */
		/* 821ADC78h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821ADC78h case   21:*/		return 0x821ADC7C;
		  /* 821ADC7Ch */ case   22:  		/* bc 12, CR6_EQ, -156 */
		/* 821ADC7Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x821ADBE0;  }
		/* 821ADC7Ch case   22:*/		return 0x821ADC80;
		  /* 821ADC80h */ case   23:  		/* mr R4, R31 */
		/* 821ADC80h case   23:*/		regs.R4 = regs.R31;
		/* 821ADC80h case   23:*/		return 0x821ADC84;
		  /* 821ADC84h */ case   24:  		/* mr R3, R16 */
		/* 821ADC84h case   24:*/		regs.R3 = regs.R16;
		/* 821ADC84h case   24:*/		return 0x821ADC88;
		  /* 821ADC88h */ case   25:  		/* bl -53712 */
		/* 821ADC88h case   25:*/		regs.LR = 0x821ADC8C; return 0x821A0AB8;
		/* 821ADC88h case   25:*/		return 0x821ADC8C;
		  /* 821ADC8Ch */ case   26:  		/* mr R3, R16 */
		/* 821ADC8Ch case   26:*/		regs.R3 = regs.R16;
		/* 821ADC8Ch case   26:*/		return 0x821ADC90;
		  /* 821ADC90h */ case   27:  		/* lwz R4, <#[R25 + 12]> */
		/* 821ADC90h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821ADC90h case   27:*/		return 0x821ADC94;
		  /* 821ADC94h */ case   28:  		/* bl -53724 */
		/* 821ADC94h case   28:*/		regs.LR = 0x821ADC98; return 0x821A0AB8;
		/* 821ADC94h case   28:*/		return 0x821ADC98;
		  /* 821ADC98h */ case   29:  		/* li R6, 1 */
		/* 821ADC98h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ADC98h case   29:*/		return 0x821ADC9C;
		  /* 821ADC9Ch */ case   30:  		/* mr R5, R19 */
		/* 821ADC9Ch case   30:*/		regs.R5 = regs.R19;
		/* 821ADC9Ch case   30:*/		return 0x821ADCA0;
		  /* 821ADCA0h */ case   31:  		/* lwz R4, <#[R25 + 12]> */
		/* 821ADCA0h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821ADCA0h case   31:*/		return 0x821ADCA4;
		  /* 821ADCA4h */ case   32:  		/* mr R3, R16 */
		/* 821ADCA4h case   32:*/		regs.R3 = regs.R16;
		/* 821ADCA4h case   32:*/		return 0x821ADCA8;
		  /* 821ADCA8h */ case   33:  		/* bl 518080 */
		/* 821ADCA8h case   33:*/		regs.LR = 0x821ADCAC; return 0x8222C468;
		/* 821ADCA8h case   33:*/		return 0x821ADCAC;
		  /* 821ADCACh */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADCACh case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADCACh case   34:*/		return 0x821ADCB0;
		  /* 821ADCB0h */ case   35:  		/* bc 4, CR0_EQ, 16 */
		/* 821ADCB0h case   35:*/		if ( !regs.CR[0].eq ) { return 0x821ADCC0;  }
		/* 821ADCB0h case   35:*/		return 0x821ADCB4;
	}
	return 0x821ADCB4;
} // Block from 821ADC24h-821ADCB4h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821ADCB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADCB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADCB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADCB4);
		  /* 821ADCB4h */ case    0:  		/* addi R27, R27, 1 */
		/* 821ADCB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821ADCB4h case    0:*/		return 0x821ADCB8;
		  /* 821ADCB8h */ case    1:  		/* addi R28, R28, 4 */
		/* 821ADCB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821ADCB8h case    1:*/		return 0x821ADCBC;
		  /* 821ADCBCh */ case    2:  		/* b -136 */
		/* 821ADCBCh case    2:*/		return 0x821ADC34;
		/* 821ADCBCh case    2:*/		return 0x821ADCC0;
	}
	return 0x821ADCC0;
} // Block from 821ADCB4h-821ADCC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821ADCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADCC0);
		  /* 821ADCC0h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821ADCC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821ADCC0h case    0:*/		return 0x821ADCC4;
		  /* 821ADCC4h */ case    1:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 821ADCC4h case    1:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 821ADCC4h case    1:*/		return 0x821ADCC8;
		  /* 821ADCC8h */ case    2:  		/* cmpw CR6, R29, R11 */
		/* 821ADCC8h case    2:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R11);
		/* 821ADCC8h case    2:*/		return 0x821ADCCC;
		  /* 821ADCCCh */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821ADCCCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821ADCE4;  }
		/* 821ADCCCh case    3:*/		return 0x821ADCD0;
		  /* 821ADCD0h */ case    4:  		/* mr R5, R29 */
		/* 821ADCD0h case    4:*/		regs.R5 = regs.R29;
		/* 821ADCD0h case    4:*/		return 0x821ADCD4;
		  /* 821ADCD4h */ case    5:  		/* lwz R4, <#[R25 + 12]> */
		/* 821ADCD4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821ADCD4h case    5:*/		return 0x821ADCD8;
		  /* 821ADCD8h */ case    6:  		/* mr R3, R16 */
		/* 821ADCD8h case    6:*/		regs.R3 = regs.R16;
		/* 821ADCD8h case    6:*/		return 0x821ADCDC;
		  /* 821ADCDCh */ case    7:  		/* bl -220108 */
		/* 821ADCDCh case    7:*/		regs.LR = 0x821ADCE0; return 0x82178110;
		/* 821ADCDCh case    7:*/		return 0x821ADCE0;
		  /* 821ADCE0h */ case    8:  		/* mr R25, R3 */
		/* 821ADCE0h case    8:*/		regs.R25 = regs.R3;
		/* 821ADCE0h case    8:*/		return 0x821ADCE4;
	}
	return 0x821ADCE4;
} // Block from 821ADCC0h-821ADCE4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821ADCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADCE4);
		  /* 821ADCE4h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821ADCE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821ADCE4h case    0:*/		return 0x821ADCE8;
		  /* 821ADCE8h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 821ADCE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ADD2C;  }
		/* 821ADCE8h case    1:*/		return 0x821ADCEC;
	}
	return 0x821ADCEC;
} // Block from 821ADCE4h-821ADCECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821ADCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADCEC);
		  /* 821ADCECh */ case    0:  		/* mr R7, R26 */
		/* 821ADCECh case    0:*/		regs.R7 = regs.R26;
		/* 821ADCECh case    0:*/		return 0x821ADCF0;
		  /* 821ADCF0h */ case    1:  		/* mr R6, R26 */
		/* 821ADCF0h case    1:*/		regs.R6 = regs.R26;
		/* 821ADCF0h case    1:*/		return 0x821ADCF4;
		  /* 821ADCF4h */ case    2:  		/* mr R5, R19 */
		/* 821ADCF4h case    2:*/		regs.R5 = regs.R19;
		/* 821ADCF4h case    2:*/		return 0x821ADCF8;
		  /* 821ADCF8h */ case    3:  		/* li R4, 0 */
		/* 821ADCF8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821ADCF8h case    3:*/		return 0x821ADCFC;
		  /* 821ADCFCh */ case    4:  		/* mr R3, R16 */
		/* 821ADCFCh case    4:*/		regs.R3 = regs.R16;
		/* 821ADCFCh case    4:*/		return 0x821ADD00;
		  /* 821ADD00h */ case    5:  		/* bl -65096 */
		/* 821ADD00h case    5:*/		regs.LR = 0x821ADD04; return 0x8219DEB8;
		/* 821ADD00h case    5:*/		return 0x821ADD04;
		  /* 821ADD04h */ case    6:  		/* mr R20, R3 */
		/* 821ADD04h case    6:*/		regs.R20 = regs.R3;
		/* 821ADD04h case    6:*/		return 0x821ADD08;
		  /* 821ADD08h */ case    7:  		/* mr R3, R16 */
		/* 821ADD08h case    7:*/		regs.R3 = regs.R16;
		/* 821ADD08h case    7:*/		return 0x821ADD0C;
		  /* 821ADD0Ch */ case    8:  		/* mr R4, R20 */
		/* 821ADD0Ch case    8:*/		regs.R4 = regs.R20;
		/* 821ADD0Ch case    8:*/		return 0x821ADD10;
		  /* 821ADD10h */ case    9:  		/* bl -220432 */
		/* 821ADD10h case    9:*/		regs.LR = 0x821ADD14; return 0x82178000;
		/* 821ADD10h case    9:*/		return 0x821ADD14;
		  /* 821ADD14h */ case   10:  		/* mr R25, R3 */
		/* 821ADD14h case   10:*/		regs.R25 = regs.R3;
		/* 821ADD14h case   10:*/		return 0x821ADD18;
		  /* 821ADD18h */ case   11:  		/* mr R3, R20 */
		/* 821ADD18h case   11:*/		regs.R3 = regs.R20;
		/* 821ADD18h case   11:*/		return 0x821ADD1C;
		  /* 821ADD1Ch */ case   12:  		/* bl -219556 */
		/* 821ADD1Ch case   12:*/		regs.LR = 0x821ADD20; return 0x82178378;
		/* 821ADD1Ch case   12:*/		return 0x821ADD20;
		  /* 821ADD20h */ case   13:  		/* lwz R11, <#[R20 + 8]> */
		/* 821ADD20h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821ADD20h case   13:*/		return 0x821ADD24;
		  /* 821ADD24h */ case   14:  		/* oris R11, R11, 256 */
		/* 821ADD24h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821ADD24h case   14:*/		return 0x821ADD28;
		  /* 821ADD28h */ case   15:  		/* stw R11, <#[R20 + 8]> */
		/* 821ADD28h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821ADD28h case   15:*/		return 0x821ADD2C;
	}
	return 0x821ADD2C;
} // Block from 821ADCECh-821ADD2Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821ADD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADD2C);
		  /* 821ADD2Ch */ case    0:  		/* mr R4, R30 */
		/* 821ADD2Ch case    0:*/		regs.R4 = regs.R30;
		/* 821ADD2Ch case    0:*/		return 0x821ADD30;
		  /* 821ADD30h */ case    1:  		/* lwz R5, <#[R30 + 12]> */
		/* 821ADD30h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821ADD30h case    1:*/		return 0x821ADD34;
		  /* 821ADD34h */ case    2:  		/* mr R3, R16 */
		/* 821ADD34h case    2:*/		regs.R3 = regs.R16;
		/* 821ADD34h case    2:*/		return 0x821ADD38;
		  /* 821ADD38h */ case    3:  		/* bl -248904 */
		/* 821ADD38h case    3:*/		regs.LR = 0x821ADD3C; return 0x821710F0;
		/* 821ADD38h case    3:*/		return 0x821ADD3C;
		  /* 821ADD3Ch */ case    4:  		/* mr R31, R3 */
		/* 821ADD3Ch case    4:*/		regs.R31 = regs.R3;
		/* 821ADD3Ch case    4:*/		return 0x821ADD40;
		  /* 821ADD40h */ case    5:  		/* mr R5, R3 */
		/* 821ADD40h case    5:*/		regs.R5 = regs.R3;
		/* 821ADD40h case    5:*/		return 0x821ADD44;
		  /* 821ADD44h */ case    6:  		/* addi R9, R1, 160 */
		/* 821ADD44h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 821ADD44h case    6:*/		return 0x821ADD48;
		  /* 821ADD48h */ case    7:  		/* mr R8, R18 */
		/* 821ADD48h case    7:*/		regs.R8 = regs.R18;
		/* 821ADD48h case    7:*/		return 0x821ADD4C;
		  /* 821ADD4Ch */ case    8:  		/* mr R7, R25 */
		/* 821ADD4Ch case    8:*/		regs.R7 = regs.R25;
		/* 821ADD4Ch case    8:*/		return 0x821ADD50;
		  /* 821ADD50h */ case    9:  		/* mr R6, R20 */
		/* 821ADD50h case    9:*/		regs.R6 = regs.R20;
		/* 821ADD50h case    9:*/		return 0x821ADD54;
		  /* 821ADD54h */ case   10:  		/* mr R4, R19 */
		/* 821ADD54h case   10:*/		regs.R4 = regs.R19;
		/* 821ADD54h case   10:*/		return 0x821ADD58;
		  /* 821ADD58h */ case   11:  		/* mr R3, R16 */
		/* 821ADD58h case   11:*/		regs.R3 = regs.R16;
		/* 821ADD58h case   11:*/		return 0x821ADD5C;
		  /* 821ADD5Ch */ case   12:  		/* bl -55380 */
		/* 821ADD5Ch case   12:*/		regs.LR = 0x821ADD60; return 0x821A0508;
		/* 821ADD5Ch case   12:*/		return 0x821ADD60;
		  /* 821ADD60h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADD60h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADD60h case   13:*/		return 0x821ADD64;
		  /* 821ADD64h */ case   14:  		/* bc 4, CR0_EQ, 104 */
		/* 821ADD64h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821ADDCC;  }
		/* 821ADD64h case   14:*/		return 0x821ADD68;
		  /* 821ADD68h */ case   15:  		/* cmplwi CR6, R20, 0 */
		/* 821ADD68h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821ADD68h case   15:*/		return 0x821ADD6C;
		  /* 821ADD6Ch */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 821ADD6Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821ADD88;  }
		/* 821ADD6Ch case   16:*/		return 0x821ADD70;
		  /* 821ADD70h */ case   17:  		/* li R6, 1 */
		/* 821ADD70h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ADD70h case   17:*/		return 0x821ADD74;
		  /* 821ADD74h */ case   18:  		/* lwz R5, <#[R16 + 652]> */
		/* 821ADD74h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000028C) );
		/* 821ADD74h case   18:*/		return 0x821ADD78;
		  /* 821ADD78h */ case   19:  		/* mr R4, R20 */
		/* 821ADD78h case   19:*/		regs.R4 = regs.R20;
		/* 821ADD78h case   19:*/		return 0x821ADD7C;
		  /* 821ADD7Ch */ case   20:  		/* mr R3, R16 */
		/* 821ADD7Ch case   20:*/		regs.R3 = regs.R16;
		/* 821ADD7Ch case   20:*/		return 0x821ADD80;
		  /* 821ADD80h */ case   21:  		/* bl 513608 */
		/* 821ADD80h case   21:*/		regs.LR = 0x821ADD84; return 0x8222B3C8;
		/* 821ADD80h case   21:*/		return 0x821ADD84;
		  /* 821ADD84h */ case   22:  		/* b 788 */
		/* 821ADD84h case   22:*/		return 0x821AE098;
		/* 821ADD84h case   22:*/		return 0x821ADD88;
	}
	return 0x821ADD88;
} // Block from 821ADD2Ch-821ADD88h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821ADD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADD88);
		  /* 821ADD88h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821ADD88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821ADD88h case    0:*/		return 0x821ADD8C;
		  /* 821ADD8Ch */ case    1:  		/* addi R10, R22, 4 */
		/* 821ADD8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0x4);
		/* 821ADD8Ch case    1:*/		return 0x821ADD90;
		  /* 821ADD90h */ case    2:  		/* b 12 */
		/* 821ADD90h case    2:*/		return 0x821ADD9C;
		/* 821ADD90h case    2:*/		return 0x821ADD94;
		  /* 821ADD94h */ case    3:  		/* addi R10, R11, 8 */
		/* 821ADD94h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821ADD94h case    3:*/		return 0x821ADD98;
		  /* 821ADD98h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ADD98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADD98h case    4:*/		return 0x821ADD9C;
	}
	return 0x821ADD9C;
} // Block from 821ADD88h-821ADD9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821ADD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADD9C);
		  /* 821ADD9Ch */ case    0:  		/* cmplw CR6, R11, R26 */
		/* 821ADD9Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821ADD9Ch case    0:*/		return 0x821ADDA0;
		  /* 821ADDA0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821ADDA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821ADD94;  }
		/* 821ADDA0h case    1:*/		return 0x821ADDA4;
		  /* 821ADDA4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821ADDA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADDA4h case    2:*/		return 0x821ADDA8;
		  /* 821ADDA8h */ case    3:  		/* li R6, 26 */
		/* 821ADDA8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821ADDA8h case    3:*/		return 0x821ADDAC;
		  /* 821ADDACh */ case    4:  		/* li R5, 20 */
		/* 821ADDACh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821ADDACh case    4:*/		return 0x821ADDB0;
		  /* 821ADDB0h */ case    5:  		/* mr R4, R26 */
		/* 821ADDB0h case    5:*/		regs.R4 = regs.R26;
		/* 821ADDB0h case    5:*/		return 0x821ADDB4;
		  /* 821ADDB4h */ case    6:  		/* mr R3, R16 */
		/* 821ADDB4h case    6:*/		regs.R3 = regs.R16;
		/* 821ADDB4h case    6:*/		return 0x821ADDB8;
		  /* 821ADDB8h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821ADDB8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821ADDB8h case    7:*/		return 0x821ADDBC;
		  /* 821ADDBCh */ case    8:  		/* bl -299300 */
		/* 821ADDBCh case    8:*/		regs.LR = 0x821ADDC0; return 0x82164C98;
		/* 821ADDBCh case    8:*/		return 0x821ADDC0;
		  /* 821ADDC0h */ case    9:  		/* cmplw CR6, R25, R26 */
		/* 821ADDC0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R26);
		/* 821ADDC0h case    9:*/		return 0x821ADDC4;
		  /* 821ADDC4h */ case   10:  		/* bc 4, CR6_EQ, 648 */
		/* 821ADDC4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821AE04C;  }
		/* 821ADDC4h case   10:*/		return 0x821ADDC8;
		  /* 821ADDC8h */ case   11:  		/* b 720 */
		/* 821ADDC8h case   11:*/		return 0x821AE098;
		/* 821ADDC8h case   11:*/		return 0x821ADDCC;
	}
	return 0x821ADDCC;
} // Block from 821ADD9Ch-821ADDCCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821ADDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADDCC);
		  /* 821ADDCCh */ case    0:  		/* addi R10, R1, 160 */
		/* 821ADDCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 821ADDCCh case    0:*/		return 0x821ADDD0;
		  /* 821ADDD0h */ case    1:  		/* lwz R8, <#[R18 + 28]> */
		/* 821ADDD0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821ADDD0h case    1:*/		return 0x821ADDD4;
		  /* 821ADDD4h */ case    2:  		/* mr R9, R18 */
		/* 821ADDD4h case    2:*/		regs.R9 = regs.R18;
		/* 821ADDD4h case    2:*/		return 0x821ADDD8;
		  /* 821ADDD8h */ case    3:  		/* mr R7, R25 */
		/* 821ADDD8h case    3:*/		regs.R7 = regs.R25;
		/* 821ADDD8h case    3:*/		return 0x821ADDDC;
		  /* 821ADDDCh */ case    4:  		/* mr R6, R20 */
		/* 821ADDDCh case    4:*/		regs.R6 = regs.R20;
		/* 821ADDDCh case    4:*/		return 0x821ADDE0;
		  /* 821ADDE0h */ case    5:  		/* mr R5, R31 */
		/* 821ADDE0h case    5:*/		regs.R5 = regs.R31;
		/* 821ADDE0h case    5:*/		return 0x821ADDE4;
		  /* 821ADDE4h */ case    6:  		/* mr R4, R19 */
		/* 821ADDE4h case    6:*/		regs.R4 = regs.R19;
		/* 821ADDE4h case    6:*/		return 0x821ADDE8;
		  /* 821ADDE8h */ case    7:  		/* mr R3, R16 */
		/* 821ADDE8h case    7:*/		regs.R3 = regs.R16;
		/* 821ADDE8h case    7:*/		return 0x821ADDEC;
		  /* 821ADDECh */ case    8:  		/* bl -45812 */
		/* 821ADDECh case    8:*/		regs.LR = 0x821ADDF0; return 0x821A2AF8;
		/* 821ADDECh case    8:*/		return 0x821ADDF0;
		  /* 821ADDF0h */ case    9:  		/* lwz R4, <#[R3 + 12]> */
		/* 821ADDF0h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 821ADDF0h case    9:*/		return 0x821ADDF4;
		  /* 821ADDF4h */ case   10:  		/* mr R27, R3 */
		/* 821ADDF4h case   10:*/		regs.R27 = regs.R3;
		/* 821ADDF4h case   10:*/		return 0x821ADDF8;
		  /* 821ADDF8h */ case   11:  		/* lwz R11, <#[R4 + 8]> */
		/* 821ADDF8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821ADDF8h case   11:*/		return 0x821ADDFC;
		  /* 821ADDFCh */ case   12:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821ADDFCh case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821ADDFCh case   12:*/		return 0x821ADE00;
		  /* 821ADE00h */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 821ADE00h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821ADE00h case   13:*/		return 0x821ADE04;
		  /* 821ADE04h */ case   14:  		/* bc 12, CR6_LT, 16 */
		/* 821ADE04h case   14:*/		if ( regs.CR[6].lt ) { return 0x821ADE14;  }
		/* 821ADE04h case   14:*/		return 0x821ADE08;
		  /* 821ADE08h */ case   15:  		/* cmplwi CR6, R11, 102 */
		/* 821ADE08h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821ADE08h case   15:*/		return 0x821ADE0C;
		  /* 821ADE0Ch */ case   16:  		/* li R11, 1 */
		/* 821ADE0Ch case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821ADE0Ch case   16:*/		return 0x821ADE10;
		  /* 821ADE10h */ case   17:  		/* bc 4, CR6_GT, 8 */
		/* 821ADE10h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821ADE18;  }
		/* 821ADE10h case   17:*/		return 0x821ADE14;
	}
	return 0x821ADE14;
} // Block from 821ADDCCh-821ADE14h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821ADE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADE14);
		  /* 821ADE14h */ case    0:  		/* li R11, 0 */
		/* 821ADE14h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821ADE14h case    0:*/		return 0x821ADE18;
	}
	return 0x821ADE18;
} // Block from 821ADE14h-821ADE18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ADE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADE18);
		  /* 821ADE18h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821ADE18h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821ADE18h case    0:*/		return 0x821ADE1C;
		  /* 821ADE1Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821ADE1Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821ADE30;  }
		/* 821ADE1Ch case    1:*/		return 0x821ADE20;
		  /* 821ADE20h */ case    2:  		/* mr R5, R16 */
		/* 821ADE20h case    2:*/		regs.R5 = regs.R16;
		/* 821ADE20h case    2:*/		return 0x821ADE24;
		  /* 821ADE24h */ case    3:  		/* mr R3, R18 */
		/* 821ADE24h case    3:*/		regs.R3 = regs.R18;
		/* 821ADE24h case    3:*/		return 0x821ADE28;
		  /* 821ADE28h */ case    4:  		/* bl -220160 */
		/* 821ADE28h case    4:*/		regs.LR = 0x821ADE2C; return 0x82178228;
		/* 821ADE28h case    4:*/		return 0x821ADE2C;
		  /* 821ADE2Ch */ case    5:  		/* mr R23, R3 */
		/* 821ADE2Ch case    5:*/		regs.R23 = regs.R3;
		/* 821ADE2Ch case    5:*/		return 0x821ADE30;
	}
	return 0x821ADE30;
} // Block from 821ADE18h-821ADE30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821ADE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADE30);
		  /* 821ADE30h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821ADE30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821ADE30h case    0:*/		return 0x821ADE34;
		  /* 821ADE34h */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 821ADE34h case    1:*/		if ( regs.CR[6].eq ) { return 0x821ADEAC;  }
		/* 821ADE34h case    1:*/		return 0x821ADE38;
		  /* 821ADE38h */ case    2:  		/* mr R3, R20 */
		/* 821ADE38h case    2:*/		regs.R3 = regs.R20;
		/* 821ADE38h case    2:*/		return 0x821ADE3C;
		  /* 821ADE3Ch */ case    3:  		/* bl -300220 */
		/* 821ADE3Ch case    3:*/		regs.LR = 0x821ADE40; return 0x82164980;
		/* 821ADE3Ch case    3:*/		return 0x821ADE40;
		  /* 821ADE40h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADE40h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADE40h case    4:*/		return 0x821ADE44;
		  /* 821ADE44h */ case    5:  		/* bc 4, CR0_EQ, 104 */
		/* 821ADE44h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821ADEAC;  }
		/* 821ADE44h case    5:*/		return 0x821ADE48;
		  /* 821ADE48h */ case    6:  		/* lwz R10, <#[R1 + 160]> */
		/* 821ADE48h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADE48h case    6:*/		return 0x821ADE4C;
		  /* 821ADE4Ch */ case    7:  		/* lwz R11, <#[R27 + 12]> */
		/* 821ADE4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821ADE4Ch case    7:*/		return 0x821ADE50;
		  /* 821ADE50h */ case    8:  		/* rlwinm R9, R10, 0, 0, 27 */
		/* 821ADE50h case    8:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R9,regs.R10);
		/* 821ADE50h case    8:*/		return 0x821ADE54;
		  /* 821ADE54h */ case    9:  		/* addi R31, R9, 160 */
		/* 821ADE54h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0xA0);
		/* 821ADE54h case    9:*/		return 0x821ADE58;
		  /* 821ADE58h */ case   10:  		/* lwz R9, <#[R11 + 8]> */
		/* 821ADE58h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821ADE58h case   10:*/		return 0x821ADE5C;
		  /* 821ADE5Ch */ case   11:  		/* rlwimi R31, R10, 0, 28, 20 */
		/* 821ADE5Ch case   11:*/		cpu::op::rlwimi<0,0,28,20>(regs,&regs.R31,regs.R10);
		/* 821ADE5Ch case   11:*/		return 0x821ADE60;
		  /* 821ADE60h */ case   12:  		/* rlwinm R10, R9, 0, 18, 24 */
		/* 821ADE60h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R9);
		/* 821ADE60h case   12:*/		return 0x821ADE64;
		  /* 821ADE64h */ case   13:  		/* stw R31, <#[R1 + 160]> */
		/* 821ADE64h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADE64h case   13:*/		return 0x821ADE68;
		  /* 821ADE68h */ case   14:  		/* cmplwi CR6, R10, 1664 */
		/* 821ADE68h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000680);
		/* 821ADE68h case   14:*/		return 0x821ADE6C;
		  /* 821ADE6Ch */ case   15:  		/* bc 4, CR6_EQ, 68 */
		/* 821ADE6Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821ADEB0;  }
		/* 821ADE6Ch case   15:*/		return 0x821ADE70;
		  /* 821ADE70h */ case   16:  		/* lwz R11, <#[R11 + 44]> */
		/* 821ADE70h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821ADE70h case   16:*/		return 0x821ADE74;
		  /* 821ADE74h */ case   17:  		/* li R7, 1 */
		/* 821ADE74h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821ADE74h case   17:*/		return 0x821ADE78;
		  /* 821ADE78h */ case   18:  		/* mr R3, R16 */
		/* 821ADE78h case   18:*/		regs.R3 = regs.R16;
		/* 821ADE78h case   18:*/		return 0x821ADE7C;
		  /* 821ADE7Ch */ case   19:  		/* fmr FR1, FR30 */
		/* 821ADE7Ch case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821ADE7Ch case   19:*/		return 0x821ADE80;
		  /* 821ADE80h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821ADE80h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADE80h case   20:*/		return 0x821ADE84;
		  /* 821ADE84h */ case   21:  		/* lwz R4, <#[R11 + 12]> */
		/* 821ADE84h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821ADE84h case   21:*/		return 0x821ADE88;
		  /* 821ADE88h */ case   22:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 821ADE88h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 821ADE88h case   22:*/		return 0x821ADE8C;
		  /* 821ADE8Ch */ case   23:  		/* bl 518532 */
		/* 821ADE8Ch case   23:*/		regs.LR = 0x821ADE90; return 0x8222C810;
		/* 821ADE8Ch case   23:*/		return 0x821ADE90;
		  /* 821ADE90h */ case   24:  		/* cmpwi CR6, R3, 4 */
		/* 821ADE90h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821ADE90h case   24:*/		return 0x821ADE94;
		  /* 821ADE94h */ case   25:  		/* bc 12, CR6_EQ, 28 */
		/* 821ADE94h case   25:*/		if ( regs.CR[6].eq ) { return 0x821ADEB0;  }
		/* 821ADE94h case   25:*/		return 0x821ADE98;
		  /* 821ADE98h */ case   26:  		/* rlwinm R11, R31, 28, 4, 31 */
		/* 821ADE98h case   26:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R11,regs.R31);
		/* 821ADE98h case   26:*/		return 0x821ADE9C;
		  /* 821ADE9Ch */ case   27:  		/* addi R11, R11, -10 */
		/* 821ADE9Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF6);
		/* 821ADE9Ch case   27:*/		return 0x821ADEA0;
		  /* 821ADEA0h */ case   28:  		/* rlwimi R31, R11, 4, 21, 27 */
		/* 821ADEA0h case   28:*/		cpu::op::rlwimi<0,4,21,27>(regs,&regs.R31,regs.R11);
		/* 821ADEA0h case   28:*/		return 0x821ADEA4;
		  /* 821ADEA4h */ case   29:  		/* stw R31, <#[R1 + 160]> */
		/* 821ADEA4h case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADEA4h case   29:*/		return 0x821ADEA8;
		  /* 821ADEA8h */ case   30:  		/* b 8 */
		/* 821ADEA8h case   30:*/		return 0x821ADEB0;
		/* 821ADEA8h case   30:*/		return 0x821ADEAC;
	}
	return 0x821ADEAC;
} // Block from 821ADE30h-821ADEACh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821ADEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADEAC);
		  /* 821ADEACh */ case    0:  		/* lwz R31, <#[R1 + 160]> */
		/* 821ADEACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 821ADEACh case    0:*/		return 0x821ADEB0;
	}
	return 0x821ADEB0;
} // Block from 821ADEACh-821ADEB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821ADEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADEB0);
		  /* 821ADEB0h */ case    0:  		/* li R8, 0 */
		/* 821ADEB0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821ADEB0h case    0:*/		return 0x821ADEB4;
		  /* 821ADEB4h */ case    1:  		/* lwz R4, <#[R18 + 28]> */
		/* 821ADEB4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R18 + 0x0000001C) );
		/* 821ADEB4h case    1:*/		return 0x821ADEB8;
		  /* 821ADEB8h */ case    2:  		/* li R7, 0 */
		/* 821ADEB8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821ADEB8h case    2:*/		return 0x821ADEBC;
		  /* 821ADEBCh */ case    3:  		/* li R6, 117 */
		/* 821ADEBCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821ADEBCh case    3:*/		return 0x821ADEC0;
		  /* 821ADEC0h */ case    4:  		/* li R5, 0 */
		/* 821ADEC0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821ADEC0h case    4:*/		return 0x821ADEC4;
		  /* 821ADEC4h */ case    5:  		/* mr R3, R16 */
		/* 821ADEC4h case    5:*/		regs.R3 = regs.R16;
		/* 821ADEC4h case    5:*/		return 0x821ADEC8;
		  /* 821ADEC8h */ case    6:  		/* bl 486096 */
		/* 821ADEC8h case    6:*/		regs.LR = 0x821ADECC; return 0x82224998;
		/* 821ADEC8h case    6:*/		return 0x821ADECC;
		  /* 821ADECCh */ case    7:  		/* rlwinm R11, R18, 0, 0, 30 */
		/* 821ADECCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R18);
		/* 821ADECCh case    7:*/		return 0x821ADED0;
		  /* 821ADED0h */ case    8:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821ADED0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821ADED0h case    8:*/		return 0x821ADED4;
		  /* 821ADED4h */ case    9:  		/* addi R11, R11, 36 */
		/* 821ADED4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821ADED4h case    9:*/		return 0x821ADED8;
		  /* 821ADED8h */ case   10:  		/* addi R10, R10, 36 */
		/* 821ADED8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821ADED8h case   10:*/		return 0x821ADEDC;
		  /* 821ADEDCh */ case   11:  		/* addi R8, R11, -36 */
		/* 821ADEDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821ADEDCh case   11:*/		return 0x821ADEE0;
		  /* 821ADEE0h */ case   12:  		/* addi R6, R10, -36 */
		/* 821ADEE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821ADEE0h case   12:*/		return 0x821ADEE4;
		  /* 821ADEE4h */ case   13:  		/* addi R9, R10, 4 */
		/* 821ADEE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821ADEE4h case   13:*/		return 0x821ADEE8;
		  /* 821ADEE8h */ case   14:  		/* lwz R7, <#[R11]> */
		/* 821ADEE8h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADEE8h case   14:*/		return 0x821ADEEC;
		  /* 821ADEECh */ case   15:  		/* mr R4, R27 */
		/* 821ADEECh case   15:*/		regs.R4 = regs.R27;
		/* 821ADEECh case   15:*/		return 0x821ADEF0;
		  /* 821ADEF0h */ case   16:  		/* mr R28, R3 */
		/* 821ADEF0h case   16:*/		regs.R28 = regs.R3;
		/* 821ADEF0h case   16:*/		return 0x821ADEF4;
		  /* 821ADEF4h */ case   17:  		/* stw R7, <#[R10]> */
		/* 821ADEF4h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821ADEF4h case   17:*/		return 0x821ADEF8;
		  /* 821ADEF8h */ case   18:  		/* lwz R7, <#[R11]> */
		/* 821ADEF8h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADEF8h case   18:*/		return 0x821ADEFC;
		  /* 821ADEFCh */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821ADEFCh case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821ADEFCh case   19:*/		return 0x821ADF00;
		  /* 821ADF00h */ case   20:  		/* stw R6, <#[R7]> */
		/* 821ADF00h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821ADF00h case   20:*/		return 0x821ADF04;
		  /* 821ADF04h */ case   21:  		/* stw R8, <#[R10 + 4]> */
		/* 821ADF04h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821ADF04h case   21:*/		return 0x821ADF08;
		  /* 821ADF08h */ case   22:  		/* stw R9, <#[R11]> */
		/* 821ADF08h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821ADF08h case   22:*/		return 0x821ADF0C;
		  /* 821ADF0Ch */ case   23:  		/* bl -220484 */
		/* 821ADF0Ch case   23:*/		regs.LR = 0x821ADF10; return 0x821781C8;
		/* 821ADF0Ch case   23:*/		return 0x821ADF10;
		  /* 821ADF10h */ case   24:  		/* addi R9, R1, 240 */
		/* 821ADF10h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF0);
		/* 821ADF10h case   24:*/		return 0x821ADF14;
		  /* 821ADF14h */ case   25:  		/* mr R8, R18 */
		/* 821ADF14h case   25:*/		regs.R8 = regs.R18;
		/* 821ADF14h case   25:*/		return 0x821ADF18;
		  /* 821ADF18h */ case   26:  		/* mr R7, R21 */
		/* 821ADF18h case   26:*/		regs.R7 = regs.R21;
		/* 821ADF18h case   26:*/		return 0x821ADF1C;
		  /* 821ADF1Ch */ case   27:  		/* mr R6, R18 */
		/* 821ADF1Ch case   27:*/		regs.R6 = regs.R18;
		/* 821ADF1Ch case   27:*/		return 0x821ADF20;
		  /* 821ADF20h */ case   28:  		/* mr R5, R24 */
		/* 821ADF20h case   28:*/		regs.R5 = regs.R24;
		/* 821ADF20h case   28:*/		return 0x821ADF24;
		  /* 821ADF24h */ case   29:  		/* mr R4, R19 */
		/* 821ADF24h case   29:*/		regs.R4 = regs.R19;
		/* 821ADF24h case   29:*/		return 0x821ADF28;
		  /* 821ADF28h */ case   30:  		/* mr R3, R16 */
		/* 821ADF28h case   30:*/		regs.R3 = regs.R16;
		/* 821ADF28h case   30:*/		return 0x821ADF2C;
		  /* 821ADF2Ch */ case   31:  		/* bl -55844 */
		/* 821ADF2Ch case   31:*/		regs.LR = 0x821ADF30; return 0x821A0508;
		/* 821ADF2Ch case   31:*/		return 0x821ADF30;
		  /* 821ADF30h */ case   32:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADF30h case   32:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADF30h case   32:*/		return 0x821ADF34;
		  /* 821ADF34h */ case   33:  		/* bc 12, CR0_EQ, 172 */
		/* 821ADF34h case   33:*/		if ( regs.CR[0].eq ) { return 0x821ADFE0;  }
		/* 821ADF34h case   33:*/		return 0x821ADF38;
		  /* 821ADF38h */ case   34:  		/* lwz R30, <#[R1 + 240]> */
		/* 821ADF38h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000F0) );
		/* 821ADF38h case   34:*/		return 0x821ADF3C;
		  /* 821ADF3Ch */ case   35:  		/* rlwinm R26, R31, 28, 25, 31 */
		/* 821ADF3Ch case   35:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R26,regs.R31);
		/* 821ADF3Ch case   35:*/		return 0x821ADF40;
		  /* 821ADF40h */ case   36:  		/* cmplwi CR6, R14, 2 */
		/* 821ADF40h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000002);
		/* 821ADF40h case   36:*/		return 0x821ADF44;
		  /* 821ADF44h */ case   37:  		/* rlwinm R11, R30, 28, 25, 31 */
		/* 821ADF44h case   37:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R11,regs.R30);
		/* 821ADF44h case   37:*/		return 0x821ADF48;
		  /* 821ADF48h */ case   38:  		/* add R29, R11, R26 */
		/* 821ADF48h case   38:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R26);
		/* 821ADF48h case   38:*/		return 0x821ADF4C;
		  /* 821ADF4Ch */ case   39:  		/* bc 4, CR6_EQ, 44 */
		/* 821ADF4Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x821ADF78;  }
		/* 821ADF4Ch case   39:*/		return 0x821ADF50;
		  /* 821ADF50h */ case   40:  		/* lwz R11, <#[R18 + 8]> */
		/* 821ADF50h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821ADF50h case   40:*/		return 0x821ADF54;
		  /* 821ADF54h */ case   41:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821ADF54h case   41:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821ADF54h case   41:*/		return 0x821ADF58;
		  /* 821ADF58h */ case   42:  		/* cmplwi CR6, R11, 16384 */
		/* 821ADF58h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821ADF58h case   42:*/		return 0x821ADF5C;
		  /* 821ADF5Ch */ case   43:  		/* bc 4, CR6_EQ, 28 */
		/* 821ADF5Ch case   43:*/		if ( !regs.CR[6].eq ) { return 0x821ADF78;  }
		/* 821ADF5Ch case   43:*/		return 0x821ADF60;
		  /* 821ADF60h */ case   44:  		/* lwz R3, <#[R19 + 52]> */
		/* 821ADF60h case   44:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000034) );
		/* 821ADF60h case   44:*/		return 0x821ADF64;
		  /* 821ADF64h */ case   45:  		/* fmr FR1, FR29 */
		/* 821ADF64h case   45:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821ADF64h case   45:*/		return 0x821ADF68;
		  /* 821ADF68h */ case   46:  		/* bl -295352 */
		/* 821ADF68h case   46:*/		regs.LR = 0x821ADF6C; return 0x82165DB0;
		/* 821ADF68h case   46:*/		return 0x821ADF6C;
		  /* 821ADF6Ch */ case   47:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADF6Ch case   47:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADF6Ch case   47:*/		return 0x821ADF70;
		  /* 821ADF70h */ case   48:  		/* bc 12, CR0_EQ, 8 */
		/* 821ADF70h case   48:*/		if ( regs.CR[0].eq ) { return 0x821ADF78;  }
		/* 821ADF70h case   48:*/		return 0x821ADF74;
		  /* 821ADF74h */ case   49:  		/* addi R29, R29, 20 */
		/* 821ADF74h case   49:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x14);
		/* 821ADF74h case   49:*/		return 0x821ADF78;
	}
	return 0x821ADF78;
} // Block from 821ADEB0h-821ADF78h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821ADF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADF78);
		  /* 821ADF78h */ case    0:  		/* rlwinm. R11, R31, 17, 29, 31 */
		/* 821ADF78h case    0:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R11,regs.R31);
		/* 821ADF78h case    0:*/		return 0x821ADF7C;
		  /* 821ADF7Ch */ case    1:  		/* rlwinm R10, R31, 17, 15, 31 */
		/* 821ADF7Ch case    1:*/		cpu::op::rlwinm<0,17,15,31>(regs,&regs.R10,regs.R31);
		/* 821ADF7Ch case    1:*/		return 0x821ADF80;
		  /* 821ADF80h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821ADF80h case    2:*/		if ( regs.CR[0].eq ) { return 0x821ADFA0;  }
		/* 821ADF80h case    2:*/		return 0x821ADF84;
		  /* 821ADF84h */ case    3:  		/* rlwinm. R9, R30, 17, 29, 31 */
		/* 821ADF84h case    3:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R9,regs.R30);
		/* 821ADF84h case    3:*/		return 0x821ADF88;
		  /* 821ADF88h */ case    4:  		/* rlwinm R11, R30, 17, 15, 31 */
		/* 821ADF88h case    4:*/		cpu::op::rlwinm<0,17,15,31>(regs,&regs.R11,regs.R30);
		/* 821ADF88h case    4:*/		return 0x821ADF8C;
		  /* 821ADF8Ch */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821ADF8Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821ADFA0;  }
		/* 821ADF8Ch case    5:*/		return 0x821ADF90;
		  /* 821ADF90h */ case    6:  		/* xor R11, R11, R10 */
		/* 821ADF90h case    6:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821ADF90h case    6:*/		return 0x821ADF94;
		  /* 821ADF94h */ case    7:  		/* andi. R11, R11, 5 */
		/* 821ADF94h case    7:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x5);
		/* 821ADF94h case    7:*/		return 0x821ADF98;
		  /* 821ADF98h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821ADF98h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821ADF98h case    8:*/		return 0x821ADF9C;
		  /* 821ADF9Ch */ case    9:  		/* bc 4, CR0_EQ, 68 */
		/* 821ADF9Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821ADFE0;  }
		/* 821ADF9Ch case    9:*/		return 0x821ADFA0;
	}
	return 0x821ADFA0;
} // Block from 821ADF78h-821ADFA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821ADFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADFA0);
		  /* 821ADFA0h */ case    0:  		/* li R7, 3 */
		/* 821ADFA0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821ADFA0h case    0:*/		return 0x821ADFA4;
		  /* 821ADFA4h */ case    1:  		/* mr R6, R29 */
		/* 821ADFA4h case    1:*/		regs.R6 = regs.R29;
		/* 821ADFA4h case    1:*/		return 0x821ADFA8;
		  /* 821ADFA8h */ case    2:  		/* mr R5, R18 */
		/* 821ADFA8h case    2:*/		regs.R5 = regs.R18;
		/* 821ADFA8h case    2:*/		return 0x821ADFAC;
		  /* 821ADFACh */ case    3:  		/* mr R4, R19 */
		/* 821ADFACh case    3:*/		regs.R4 = regs.R19;
		/* 821ADFACh case    3:*/		return 0x821ADFB0;
		  /* 821ADFB0h */ case    4:  		/* mr R3, R16 */
		/* 821ADFB0h case    4:*/		regs.R3 = regs.R16;
		/* 821ADFB0h case    4:*/		return 0x821ADFB4;
		  /* 821ADFB4h */ case    5:  		/* bl -38796 */
		/* 821ADFB4h case    5:*/		regs.LR = 0x821ADFB8; return 0x821A4828;
		/* 821ADFB4h case    5:*/		return 0x821ADFB8;
		  /* 821ADFB8h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821ADFB8h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821ADFB8h case    6:*/		return 0x821ADFBC;
		  /* 821ADFBCh */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 821ADFBCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821ADFE0;  }
		/* 821ADFBCh case    7:*/		return 0x821ADFC0;
		  /* 821ADFC0h */ case    8:  		/* lwz R10, <#[R1 + 168]> */
		/* 821ADFC0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 821ADFC0h case    8:*/		return 0x821ADFC4;
		  /* 821ADFC4h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821ADFC4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821ADFC4h case    9:*/		return 0x821ADFC8;
		  /* 821ADFC8h */ case   10:  		/* bc 12, CR6_EQ, 3628 */
		/* 821ADFC8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821AEDF4;  }
		/* 821ADFC8h case   10:*/		return 0x821ADFCC;
		  /* 821ADFCCh */ case   11:  		/* lwz R11, <#[R1 + 248]> */
		/* 821ADFCCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 821ADFCCh case   11:*/		return 0x821ADFD0;
		  /* 821ADFD0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821ADFD0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821ADFD0h case   12:*/		return 0x821ADFD4;
		  /* 821ADFD4h */ case   13:  		/* bc 12, CR6_EQ, 3616 */
		/* 821ADFD4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821AEDF4;  }
		/* 821ADFD4h case   13:*/		return 0x821ADFD8;
		  /* 821ADFD8h */ case   14:  		/* cmplw CR6, R10, R11 */
		/* 821ADFD8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821ADFD8h case   14:*/		return 0x821ADFDC;
		  /* 821ADFDCh */ case   15:  		/* bc 12, CR6_EQ, 3608 */
		/* 821ADFDCh case   15:*/		if ( regs.CR[6].eq ) { return 0x821AEDF4;  }
		/* 821ADFDCh case   15:*/		return 0x821ADFE0;
	}
	return 0x821ADFE0;
} // Block from 821ADFA0h-821ADFE0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821ADFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821ADFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821ADFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821ADFE0);
		  /* 821ADFE0h */ case    0:  		/* lwz R11, <#[R16 + 40]> */
		/* 821ADFE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821ADFE0h case    0:*/		return 0x821ADFE4;
		  /* 821ADFE4h */ case    1:  		/* li R6, 1 */
		/* 821ADFE4h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821ADFE4h case    1:*/		return 0x821ADFE8;
		  /* 821ADFE8h */ case    2:  		/* li R5, 0 */
		/* 821ADFE8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821ADFE8h case    2:*/		return 0x821ADFEC;
		  /* 821ADFECh */ case    3:  		/* addi R11, R11, -4096 */
		/* 821ADFECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFF000);
		/* 821ADFECh case    3:*/		return 0x821ADFF0;
		  /* 821ADFF0h */ case    4:  		/* mr R4, R28 */
		/* 821ADFF0h case    4:*/		regs.R4 = regs.R28;
		/* 821ADFF0h case    4:*/		return 0x821ADFF4;
		  /* 821ADFF4h */ case    5:  		/* stw R11, <#[R16 + 40]> */
		/* 821ADFF4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821ADFF4h case    5:*/		return 0x821ADFF8;
		  /* 821ADFF8h */ case    6:  		/* mr R3, R16 */
		/* 821ADFF8h case    6:*/		regs.R3 = regs.R16;
		/* 821ADFF8h case    6:*/		return 0x821ADFFC;
		  /* 821ADFFCh */ case    7:  		/* bl 512972 */
		/* 821ADFFCh case    7:*/		regs.LR = 0x821AE000; return 0x8222B3C8;
		/* 821ADFFCh case    7:*/		return 0x821AE000;
		  /* 821AE000h */ case    8:  		/* lwz R11, <#[R16 + 40]> */
		/* 821AE000h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821AE000h case    8:*/		return 0x821AE004;
		  /* 821AE004h */ case    9:  		/* cmplwi CR6, R23, 0 */
		/* 821AE004h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821AE004h case    9:*/		return 0x821AE008;
		  /* 821AE008h */ case   10:  		/* addi R11, R11, 4096 */
		/* 821AE008h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821AE008h case   10:*/		return 0x821AE00C;
		  /* 821AE00Ch */ case   11:  		/* stw R11, <#[R16 + 40]> */
		/* 821AE00Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821AE00Ch case   11:*/		return 0x821AE010;
		  /* 821AE010h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE010h case   12:*/		if ( regs.CR[6].eq ) { return 0x821AE024;  }
		/* 821AE010h case   12:*/		return 0x821AE014;
		  /* 821AE014h */ case   13:  		/* mr R5, R16 */
		/* 821AE014h case   13:*/		regs.R5 = regs.R16;
		/* 821AE014h case   13:*/		return 0x821AE018;
		  /* 821AE018h */ case   14:  		/* mr R4, R23 */
		/* 821AE018h case   14:*/		regs.R4 = regs.R23;
		/* 821AE018h case   14:*/		return 0x821AE01C;
		  /* 821AE01Ch */ case   15:  		/* mr R3, R18 */
		/* 821AE01Ch case   15:*/		regs.R3 = regs.R18;
		/* 821AE01Ch case   15:*/		return 0x821AE020;
		  /* 821AE020h */ case   16:  		/* bl -218896 */
		/* 821AE020h case   16:*/		regs.LR = 0x821AE024; return 0x82178910;
		/* 821AE020h case   16:*/		return 0x821AE024;
	}
	return 0x821AE024;
} // Block from 821ADFE0h-821AE024h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AE024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE024);
		  /* 821AE024h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821AE024h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821AE024h case    0:*/		return 0x821AE028;
		  /* 821AE028h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821AE028h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE04C;  }
		/* 821AE028h case    1:*/		return 0x821AE02C;
		  /* 821AE02Ch */ case    2:  		/* mr R3, R20 */
		/* 821AE02Ch case    2:*/		regs.R3 = regs.R20;
		/* 821AE02Ch case    2:*/		return 0x821AE030;
		  /* 821AE030h */ case    3:  		/* bl -220344 */
		/* 821AE030h case    3:*/		regs.LR = 0x821AE034; return 0x82178378;
		/* 821AE030h case    3:*/		return 0x821AE034;
		  /* 821AE034h */ case    4:  		/* lwz R11, <#[R20 + 8]> */
		/* 821AE034h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821AE034h case    4:*/		return 0x821AE038;
		  /* 821AE038h */ case    5:  		/* mr R4, R20 */
		/* 821AE038h case    5:*/		regs.R4 = regs.R20;
		/* 821AE038h case    5:*/		return 0x821AE03C;
		  /* 821AE03Ch */ case    6:  		/* oris R11, R11, 256 */
		/* 821AE03Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AE03Ch case    6:*/		return 0x821AE040;
		  /* 821AE040h */ case    7:  		/* mr R3, R16 */
		/* 821AE040h case    7:*/		regs.R3 = regs.R16;
		/* 821AE040h case    7:*/		return 0x821AE044;
		  /* 821AE044h */ case    8:  		/* stw R11, <#[R20 + 8]> */
		/* 821AE044h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821AE044h case    8:*/		return 0x821AE048;
		  /* 821AE048h */ case    9:  		/* bl -54672 */
		/* 821AE048h case    9:*/		regs.LR = 0x821AE04C; return 0x821A0AB8;
		/* 821AE048h case    9:*/		return 0x821AE04C;
	}
	return 0x821AE04C;
} // Block from 821AE024h-821AE04Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821AE04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE04C);
		  /* 821AE04Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821AE04Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AE04Ch case    0:*/		return 0x821AE050;
		  /* 821AE050h */ case    1:  		/* bc 12, CR6_EQ, 72 */
		/* 821AE050h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE098;  }
		/* 821AE050h case    1:*/		return 0x821AE054;
		  /* 821AE054h */ case    2:  		/* lwz R11, <#[R25]> */
		/* 821AE054h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821AE054h case    2:*/		return 0x821AE058;
		  /* 821AE058h */ case    3:  		/* li R6, 0 */
		/* 821AE058h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AE058h case    3:*/		return 0x821AE05C;
		  /* 821AE05Ch */ case    4:  		/* li R5, 0 */
		/* 821AE05Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AE05Ch case    4:*/		return 0x821AE060;
		  /* 821AE060h */ case    5:  		/* lwz R31, <#[R25 + 12]> */
		/* 821AE060h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x0000000C) );
		/* 821AE060h case    5:*/		return 0x821AE064;
		  /* 821AE064h */ case    6:  		/* mr R4, R17 */
		/* 821AE064h case    6:*/		regs.R4 = regs.R17;
		/* 821AE064h case    6:*/		return 0x821AE068;
		  /* 821AE068h */ case    7:  		/* mr R3, R16 */
		/* 821AE068h case    7:*/		regs.R3 = regs.R16;
		/* 821AE068h case    7:*/		return 0x821AE06C;
		  /* 821AE06Ch */ case    8:  		/* rlwinm R30, R11, 27, 30, 31 */
		/* 821AE06Ch case    8:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R30,regs.R11);
		/* 821AE06Ch case    8:*/		return 0x821AE070;
		  /* 821AE070h */ case    9:  		/* bl -41456 */
		/* 821AE070h case    9:*/		regs.LR = 0x821AE074; return 0x821A3E80;
		/* 821AE070h case    9:*/		return 0x821AE074;
		  /* 821AE074h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AE074h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AE074h case   10:*/		return 0x821AE078;
		  /* 821AE078h */ case   11:  		/* mr R15, R3 */
		/* 821AE078h case   11:*/		regs.R15 = regs.R3;
		/* 821AE078h case   11:*/		return 0x821AE07C;
		  /* 821AE07Ch */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AE07Ch case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AE07Ch case   12:*/		return 0x821AE080;
		  /* 821AE080h */ case   13:  		/* cmplwi CR6, R11, 14720 */
		/* 821AE080h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821AE080h case   13:*/		return 0x821AE084;
		  /* 821AE084h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE084h case   14:*/		if ( regs.CR[6].eq ) { return 0x821AE098;  }
		/* 821AE084h case   14:*/		return 0x821AE088;
		  /* 821AE088h */ case   15:  		/* mr R5, R30 */
		/* 821AE088h case   15:*/		regs.R5 = regs.R30;
		/* 821AE088h case   15:*/		return 0x821AE08C;
		  /* 821AE08Ch */ case   16:  		/* mr R4, R31 */
		/* 821AE08Ch case   16:*/		regs.R4 = regs.R31;
		/* 821AE08Ch case   16:*/		return 0x821AE090;
		  /* 821AE090h */ case   17:  		/* mr R3, R16 */
		/* 821AE090h case   17:*/		regs.R3 = regs.R16;
		/* 821AE090h case   17:*/		return 0x821AE094;
		  /* 821AE094h */ case   18:  		/* bl 520340 */
		/* 821AE094h case   18:*/		regs.LR = 0x821AE098; return 0x8222D128;
		/* 821AE094h case   18:*/		return 0x821AE098;
	}
	return 0x821AE098;
} // Block from 821AE04Ch-821AE098h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AE098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE098);
		  /* 821AE098h */ case    0:  		/* mr R6, R15 */
		/* 821AE098h case    0:*/		regs.R6 = regs.R15;
		/* 821AE098h case    0:*/		return 0x821AE09C;
		  /* 821AE09Ch */ case    1:  		/* li R5, 1 */
		/* 821AE09Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821AE09Ch case    1:*/		return 0x821AE0A0;
		  /* 821AE0A0h */ case    2:  		/* mr R4, R17 */
		/* 821AE0A0h case    2:*/		regs.R4 = regs.R17;
		/* 821AE0A0h case    2:*/		return 0x821AE0A4;
		  /* 821AE0A4h */ case    3:  		/* mr R3, R16 */
		/* 821AE0A4h case    3:*/		regs.R3 = regs.R16;
		/* 821AE0A4h case    3:*/		return 0x821AE0A8;
		  /* 821AE0A8h */ case    4:  		/* bl -41512 */
		/* 821AE0A8h case    4:*/		regs.LR = 0x821AE0AC; return 0x821A3E80;
		/* 821AE0A8h case    4:*/		return 0x821AE0AC;
		  /* 821AE0ACh */ case    5:  		/* lbz R11, <#[R1 + 128]> */
		/* 821AE0ACh case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821AE0ACh case    5:*/		return 0x821AE0B0;
		  /* 821AE0B0h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821AE0B0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AE0B0h case    6:*/		return 0x821AE0B4;
		  /* 821AE0B4h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 821AE0B4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821AE0C4;  }
		/* 821AE0B4h case    7:*/		return 0x821AE0B8;
		  /* 821AE0B8h */ case    8:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AE0B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AE0B8h case    8:*/		return 0x821AE0BC;
		  /* 821AE0BCh */ case    9:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AE0BCh case    9:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AE0BCh case    9:*/		return 0x821AE0C0;
		  /* 821AE0C0h */ case   10:  		/* stw R11, <#[R18 + 8]> */
		/* 821AE0C0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AE0C0h case   10:*/		return 0x821AE0C4;
	}
	return 0x821AE0C4;
} // Block from 821AE098h-821AE0C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AE0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE0C4);
		  /* 821AE0C4h */ case    0:  		/* lbz R11, <#[R1 + 129]> */
		/* 821AE0C4h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821AE0C4h case    0:*/		return 0x821AE0C8;
		  /* 821AE0C8h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821AE0C8h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AE0C8h case    1:*/		return 0x821AE0CC;
		  /* 821AE0CCh */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821AE0CCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AE0DC;  }
		/* 821AE0CCh case    2:*/		return 0x821AE0D0;
		  /* 821AE0D0h */ case    3:  		/* lwz R11, <#[R19 + 8]> */
		/* 821AE0D0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AE0D0h case    3:*/		return 0x821AE0D4;
		  /* 821AE0D4h */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AE0D4h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AE0D4h case    4:*/		return 0x821AE0D8;
		  /* 821AE0D8h */ case    5:  		/* stw R11, <#[R19 + 8]> */
		/* 821AE0D8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AE0D8h case    5:*/		return 0x821AE0DC;
	}
	return 0x821AE0DC;
} // Block from 821AE0C4h-821AE0DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE0DC);
		  /* 821AE0DCh */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AE0DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE0DCh case    0:*/		return 0x821AE0E0;
	}
	return 0x821AE0E0;
} // Block from 821AE0DCh-821AE0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AE0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE0E0);
		  /* 821AE0E0h */ case    0:  		/* lwz R10, <#[R1 + 1252]> */
		/* 821AE0E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000004E4) );
		/* 821AE0E0h case    0:*/		return 0x821AE0E4;
		  /* 821AE0E4h */ case    1:  		/* cmplwi CR6, R10, 3 */
		/* 821AE0E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 821AE0E4h case    1:*/		return 0x821AE0E8;
		  /* 821AE0E8h */ case    2:  		/* bc 4, CR6_LT, 1080 */
		/* 821AE0E8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821AE520;  }
		/* 821AE0E8h case    2:*/		return 0x821AE0EC;
		  /* 821AE0ECh */ case    3:  		/* li R5, 0 */
		/* 821AE0ECh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AE0ECh case    3:*/		return 0x821AE0F0;
		  /* 821AE0F0h */ case    4:  		/* lwz R3, <#[R1 + 1236]> */
		/* 821AE0F0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE0F0h case    4:*/		return 0x821AE0F4;
		  /* 821AE0F4h */ case    5:  		/* li R4, 8 */
		/* 821AE0F4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821AE0F4h case    5:*/		return 0x821AE0F8;
		  /* 821AE0F8h */ case    6:  		/* bl -301064 */
		/* 821AE0F8h case    6:*/		regs.LR = 0x821AE0FC; return 0x821648F0;
		/* 821AE0F8h case    6:*/		return 0x821AE0FC;
		  /* 821AE0FCh */ case    7:  		/* mr R24, R3 */
		/* 821AE0FCh case    7:*/		regs.R24 = regs.R3;
		/* 821AE0FCh case    7:*/		return 0x821AE100;
		  /* 821AE100h */ case    8:  		/* addi R19, R3, 4 */
		/* 821AE100h case    8:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R3,0x4);
		/* 821AE100h case    8:*/		return 0x821AE104;
		  /* 821AE104h */ case    9:  		/* ori R11, R3, 1 */
		/* 821AE104h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821AE104h case    9:*/		return 0x821AE108;
		  /* 821AE108h */ case   10:  		/* ori R10, R19, 1 */
		/* 821AE108h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R19,0x1);
		/* 821AE108h case   10:*/		return 0x821AE10C;
		  /* 821AE10Ch */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 821AE10Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821AE10Ch case   11:*/		return 0x821AE110;
		  /* 821AE110h */ case   12:  		/* li R18, 0 */
		/* 821AE110h case   12:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821AE110h case   12:*/		return 0x821AE114;
		  /* 821AE114h */ case   13:  		/* stw R10, <#[R24]> */
		/* 821AE114h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821AE114h case   13:*/		return 0x821AE118;
		  /* 821AE118h */ case   14:  		/* addi R3, R1, 224 */
		/* 821AE118h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821AE118h case   14:*/		return 0x821AE11C;
		  /* 821AE11Ch */ case   15:  		/* mr R4, R24 */
		/* 821AE11Ch case   15:*/		regs.R4 = regs.R24;
		/* 821AE11Ch case   15:*/		return 0x821AE120;
		  /* 821AE120h */ case   16:  		/* mr R22, R18 */
		/* 821AE120h case   16:*/		regs.R22 = regs.R18;
		/* 821AE120h case   16:*/		return 0x821AE124;
		  /* 821AE124h */ case   17:  		/* bl -58100 */
		/* 821AE124h case   17:*/		regs.LR = 0x821AE128; return 0x8219FE30;
		/* 821AE124h case   17:*/		return 0x821AE128;
		  /* 821AE128h */ case   18:  		/* lwz R11, <#[R1 + 1244]> */
		/* 821AE128h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AE128h case   18:*/		return 0x821AE12C;
		  /* 821AE12Ch */ case   19:  		/* mr R23, R18 */
		/* 821AE12Ch case   19:*/		regs.R23 = regs.R18;
		/* 821AE12Ch case   19:*/		return 0x821AE130;
		  /* 821AE130h */ case   20:  		/* stw R18, <#[R1 + 232]> */
		/* 821AE130h case   20:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000E8) );
		/* 821AE130h case   20:*/		return 0x821AE134;
		  /* 821AE134h */ case   21:  		/* li R26, 1 */
		/* 821AE134h case   21:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821AE134h case   21:*/		return 0x821AE138;
		  /* 821AE138h */ case   22:  		/* li R21, 1 */
		/* 821AE138h case   22:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821AE138h case   22:*/		return 0x821AE13C;
		  /* 821AE13Ch */ case   23:  		/* lwz R20, <#[R1 + 224]> */
		/* 821AE13Ch case   23:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000E0) );
		/* 821AE13Ch case   23:*/		return 0x821AE140;
		  /* 821AE140h */ case   24:  		/* lwz R10, <#[R20 + 4]> */
		/* 821AE140h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000004) );
		/* 821AE140h case   24:*/		return 0x821AE144;
		  /* 821AE144h */ case   25:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821AE144h case   25:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821AE144h case   25:*/		return 0x821AE148;
		  /* 821AE148h */ case   26:  		/* addic R9, R9, -1 */
		/* 821AE148h case   26:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821AE148h case   26:*/		return 0x821AE14C;
		  /* 821AE14Ch */ case   27:  		/* subfe R9, R9, R9 */
		/* 821AE14Ch case   27:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821AE14Ch case   27:*/		return 0x821AE150;
		  /* 821AE150h */ case   28:  		/* and R10, R9, R10 */
		/* 821AE150h case   28:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821AE150h case   28:*/		return 0x821AE154;
		  /* 821AE154h */ case   29:  		/* stw R10, <#[R1 + 228]> */
		/* 821AE154h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000E4) );
		/* 821AE154h case   29:*/		return 0x821AE158;
		  /* 821AE158h */ case   30:  		/* lwz R25, <#[R11 + 4]> */
		/* 821AE158h case   30:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE158h case   30:*/		return 0x821AE15C;
		  /* 821AE15Ch */ case   31:  		/* cmplwi CR6, R25, 0 */
		/* 821AE15Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AE15Ch case   31:*/		return 0x821AE160;
		  /* 821AE160h */ case   32:  		/* bc 12, CR6_EQ, 436 */
		/* 821AE160h case   32:*/		if ( regs.CR[6].eq ) { return 0x821AE314;  }
		/* 821AE160h case   32:*/		return 0x821AE164;
		  /* 821AE164h */ case   33:  		/* lwz R9, <#[R25 + 16]> */
		/* 821AE164h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000010) );
		/* 821AE164h case   33:*/		return 0x821AE168;
		  /* 821AE168h */ case   34:  		/* cmplwi CR6, R9, 0 */
		/* 821AE168h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821AE168h case   34:*/		return 0x821AE16C;
		  /* 821AE16Ch */ case   35:  		/* bc 12, CR6_EQ, 148 */
		/* 821AE16Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x821AE200;  }
		/* 821AE16Ch case   35:*/		return 0x821AE170;
		  /* 821AE170h */ case   36:  		/* lwz R11, <#[R25]> */
		/* 821AE170h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821AE170h case   36:*/		return 0x821AE174;
		  /* 821AE174h */ case   37:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AE174h case   37:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AE174h case   37:*/		return 0x821AE178;
		  /* 821AE178h */ case   38:  		/* bc 12, CR0_EQ, 136 */
		/* 821AE178h case   38:*/		if ( regs.CR[0].eq ) { return 0x821AE200;  }
		/* 821AE178h case   38:*/		return 0x821AE17C;
		  /* 821AE17Ch */ case   39:  		/* lwz R11, <#[R9 + 8]> */
		/* 821AE17Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821AE17Ch case   39:*/		return 0x821AE180;
		  /* 821AE180h */ case   40:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821AE180h case   40:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821AE180h case   40:*/		return 0x821AE184;
		  /* 821AE184h */ case   41:  		/* cmplwi CR6, R10, 1 */
		/* 821AE184h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821AE184h case   41:*/		return 0x821AE188;
		  /* 821AE188h */ case   42:  		/* bc 4, CR6_EQ, 128 */
		/* 821AE188h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821AE208;  }
		/* 821AE188h case   42:*/		return 0x821AE18C;
		  /* 821AE18Ch */ case   43:  		/* lwz R8, <#[R9 + 44]> */
		/* 821AE18Ch case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x0000002C) );
		/* 821AE18Ch case   43:*/		return 0x821AE190;
		  /* 821AE190h */ case   44:  		/* cmplw CR6, R25, R8 */
		/* 821AE190h case   44:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R8);
		/* 821AE190h case   44:*/		return 0x821AE194;
		  /* 821AE194h */ case   45:  		/* bc 4, CR6_EQ, 116 */
		/* 821AE194h case   45:*/		if ( !regs.CR[6].eq ) { return 0x821AE208;  }
		/* 821AE194h case   45:*/		return 0x821AE198;
		  /* 821AE198h */ case   46:  		/* lwz R11, <#[R19]> */
		/* 821AE198h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821AE198h case   46:*/		return 0x821AE19C;
		  /* 821AE19Ch */ case   47:  		/* addi R10, R26, 1 */
		/* 821AE19Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x1);
		/* 821AE19Ch case   47:*/		return 0x821AE1A0;
		  /* 821AE1A0h */ case   48:  		/* stw R9, <#[R1 + 288]> */
		/* 821AE1A0h case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000120) );
		/* 821AE1A0h case   48:*/		return 0x821AE1A4;
		  /* 821AE1A4h */ case   49:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AE1A4h case   49:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AE1A4h case   49:*/		return 0x821AE1A8;
		  /* 821AE1A8h */ case   50:  		/* stw R10, <#[R1 + 292]> */
		/* 821AE1A8h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000124) );
		/* 821AE1A8h case   50:*/		return 0x821AE1AC;
		  /* 821AE1ACh */ case   51:  		/* bc 4, CR0_EQ, 40 */
		/* 821AE1ACh case   51:*/		if ( !regs.CR[0].eq ) { return 0x821AE1D4;  }
		/* 821AE1ACh case   51:*/		return 0x821AE1B0;
		  /* 821AE1B0h */ case   52:  		/* lwz R11, <#[R24]> */
		/* 821AE1B0h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821AE1B0h case   52:*/		return 0x821AE1B4;
		  /* 821AE1B4h */ case   53:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AE1B4h case   53:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AE1B4h case   53:*/		return 0x821AE1B8;
		  /* 821AE1B8h */ case   54:  		/* addic. R3, R11, -4 */
		/* 821AE1B8h case   54:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821AE1B8h case   54:*/		return 0x821AE1BC;
		  /* 821AE1BCh */ case   55:  		/* bc 12, CR0_EQ, 24 */
		/* 821AE1BCh case   55:*/		if ( regs.CR[0].eq ) { return 0x821AE1D4;  }
		/* 821AE1BCh case   55:*/		return 0x821AE1C0;
		  /* 821AE1C0h */ case   56:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AE1C0h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE1C0h case   56:*/		return 0x821AE1C4;
		  /* 821AE1C4h */ case   57:  		/* lwz R10, <#[R3 + 12]> */
		/* 821AE1C4h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821AE1C4h case   57:*/		return 0x821AE1C8;
		  /* 821AE1C8h */ case   58:  		/* addi R11, R11, 1 */
		/* 821AE1C8h case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AE1C8h case   58:*/		return 0x821AE1CC;
		  /* 821AE1CCh */ case   59:  		/* cmplw CR6, R11, R10 */
		/* 821AE1CCh case   59:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821AE1CCh case   59:*/		return 0x821AE1D0;
		  /* 821AE1D0h */ case   60:  		/* bc 4, CR6_GT, 16 */
		/* 821AE1D0h case   60:*/		if ( !regs.CR[6].gt ) { return 0x821AE1E0;  }
		/* 821AE1D0h case   60:*/		return 0x821AE1D4;
	}
	return 0x821AE1D4;
} // Block from 821AE0E0h-821AE1D4h (61 instructions)

//////////////////////////////////////////////////////
// Block at 821AE1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE1D4);
		  /* 821AE1D4h */ case    0:  		/* li R4, 1 */
		/* 821AE1D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AE1D4h case    0:*/		return 0x821AE1D8;
		  /* 821AE1D8h */ case    1:  		/* mr R3, R24 */
		/* 821AE1D8h case    1:*/		regs.R3 = regs.R24;
		/* 821AE1D8h case    1:*/		return 0x821AE1DC;
		  /* 821AE1DCh */ case    2:  		/* bl -62244 */
		/* 821AE1DCh case    2:*/		regs.LR = 0x821AE1E0; return 0x8219EEB8;
		/* 821AE1DCh case    2:*/		return 0x821AE1E0;
	}
	return 0x821AE1E0;
} // Block from 821AE1D4h-821AE1E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AE1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE1E0);
		  /* 821AE1E0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AE1E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE1E0h case    0:*/		return 0x821AE1E4;
		  /* 821AE1E4h */ case    1:  		/* addi R22, R22, 1 */
		/* 821AE1E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821AE1E4h case    1:*/		return 0x821AE1E8;
		  /* 821AE1E8h */ case    2:  		/* ld R10, <#[R1 + 288]> */
		/* 821AE1E8h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000120) );
		/* 821AE1E8h case    2:*/		return 0x821AE1EC;
		  /* 821AE1ECh */ case    3:  		/* addi R9, R11, 2 */
		/* 821AE1ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821AE1ECh case    3:*/		return 0x821AE1F0;
		  /* 821AE1F0h */ case    4:  		/* addi R8, R11, 1 */
		/* 821AE1F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821AE1F0h case    4:*/		return 0x821AE1F4;
		  /* 821AE1F4h */ case    5:  		/* rlwinm R11, R9, 3, 0, 28 */
		/* 821AE1F4h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R9);
		/* 821AE1F4h case    5:*/		return 0x821AE1F8;
		  /* 821AE1F8h */ case    6:  		/* stw R8, <#[R3 + 8]> */
		/* 821AE1F8h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE1F8h case    6:*/		return 0x821AE1FC;
		  /* 821AE1FCh */ case    7:  		/* stdx R10, <#[R11 + R3]> */
		/* 821AE1FCh case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821AE1FCh case    7:*/		return 0x821AE200;
	}
	return 0x821AE200;
} // Block from 821AE1E0h-821AE200h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AE200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE200);
		  /* 821AE200h */ case    0:  		/* lwz R25, <#[R25 + 8]> */
		/* 821AE200h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x00000008) );
		/* 821AE200h case    0:*/		return 0x821AE204;
		  /* 821AE204h */ case    1:  		/* b -168 */
		/* 821AE204h case    1:*/		return 0x821AE15C;
		/* 821AE204h case    1:*/		return 0x821AE208;
	}
	return 0x821AE208;
} // Block from 821AE200h-821AE208h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AE208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE208);
		  /* 821AE208h */ case    0:  		/* cmplwi CR6, R10, 110 */
		/* 821AE208h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000006E);
		/* 821AE208h case    0:*/		return 0x821AE20C;
		  /* 821AE20Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AE20Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AE200;  }
		/* 821AE20Ch case    1:*/		return 0x821AE210;
		  /* 821AE210h */ case    2:  		/* rlwinm. R10, R11, 13, 29, 31 */
		/* 821AE210h case    2:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R10,regs.R11);
		/* 821AE210h case    2:*/		return 0x821AE214;
		  /* 821AE214h */ case    3:  		/* mr R27, R18 */
		/* 821AE214h case    3:*/		regs.R27 = regs.R18;
		/* 821AE214h case    3:*/		return 0x821AE218;
		  /* 821AE218h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 821AE218h case    4:*/		if ( regs.CR[0].eq ) { return 0x821AE23C;  }
		/* 821AE218h case    4:*/		return 0x821AE21C;
		  /* 821AE21Ch */ case    5:  		/* addi R11, R9, 44 */
		/* 821AE21Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x2C);
		/* 821AE21Ch case    5:*/		return 0x821AE220;
		  /* 821AE220h */ case    6:  		/* lwz R8, <#[R11]> */
		/* 821AE220h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE220h case    6:*/		return 0x821AE224;
		  /* 821AE224h */ case    7:  		/* cmplw CR6, R8, R25 */
		/* 821AE224h case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R25);
		/* 821AE224h case    7:*/		return 0x821AE228;
		  /* 821AE228h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE228h case    8:*/		if ( regs.CR[6].eq ) { return 0x821AE23C;  }
		/* 821AE228h case    8:*/		return 0x821AE22C;
		  /* 821AE22Ch */ case    9:  		/* addi R27, R27, 1 */
		/* 821AE22Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821AE22Ch case    9:*/		return 0x821AE230;
		  /* 821AE230h */ case   10:  		/* addi R11, R11, 4 */
		/* 821AE230h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AE230h case   10:*/		return 0x821AE234;
		  /* 821AE234h */ case   11:  		/* cmplw CR6, R27, R10 */
		/* 821AE234h case   11:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 821AE234h case   11:*/		return 0x821AE238;
		  /* 821AE238h */ case   12:  		/* bc 12, CR6_LT, -24 */
		/* 821AE238h case   12:*/		if ( regs.CR[6].lt ) { return 0x821AE220;  }
		/* 821AE238h case   12:*/		return 0x821AE23C;
	}
	return 0x821AE23C;
} // Block from 821AE208h-821AE23Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AE23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE23C);
		  /* 821AE23Ch */ case    0:  		/* lwz R29, <#[R9 + 4]> */
		/* 821AE23Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + 0x00000004) );
		/* 821AE23Ch case    0:*/		return 0x821AE240;
		  /* 821AE240h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821AE240h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821AE240h case    1:*/		return 0x821AE244;
		  /* 821AE244h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 821AE244h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AE200;  }
		/* 821AE244h case    2:*/		return 0x821AE248;
		  /* 821AE248h */ case    3:  		/* lwz R28, <#[R29 + 16]> */
		/* 821AE248h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000010) );
		/* 821AE248h case    3:*/		return 0x821AE24C;
		  /* 821AE24Ch */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 821AE24Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821AE24Ch case    4:*/		return 0x821AE250;
		  /* 821AE250h */ case    5:  		/* bc 12, CR6_EQ, 188 */
		/* 821AE250h case    5:*/		if ( regs.CR[6].eq ) { return 0x821AE30C;  }
		/* 821AE250h case    5:*/		return 0x821AE254;
		  /* 821AE254h */ case    6:  		/* lwz R11, <#[R28 + 8]> */
		/* 821AE254h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821AE254h case    6:*/		return 0x821AE258;
		  /* 821AE258h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AE258h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AE258h case    7:*/		return 0x821AE25C;
		  /* 821AE25Ch */ case    8:  		/* cmplwi CR6, R11, 128 */
		/* 821AE25Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821AE25Ch case    8:*/		return 0x821AE260;
		  /* 821AE260h */ case    9:  		/* bc 4, CR6_EQ, 172 */
		/* 821AE260h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821AE30C;  }
		/* 821AE260h case    9:*/		return 0x821AE264;
		  /* 821AE264h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 821AE264h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AE264h case   10:*/		return 0x821AE268;
		  /* 821AE268h */ case   11:  		/* mr R30, R18 */
		/* 821AE268h case   11:*/		regs.R30 = regs.R18;
		/* 821AE268h case   11:*/		return 0x821AE26C;
		  /* 821AE26Ch */ case   12:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821AE26Ch case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821AE26Ch case   12:*/		return 0x821AE270;
		  /* 821AE270h */ case   13:  		/* bc 12, CR0_EQ, 156 */
		/* 821AE270h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AE30C;  }
		/* 821AE270h case   13:*/		return 0x821AE274;
		  /* 821AE274h */ case   14:  		/* mr R31, R18 */
		/* 821AE274h case   14:*/		regs.R31 = regs.R18;
		/* 821AE274h case   14:*/		return 0x821AE278;
		  /* 821AE278h */ case   15:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821AE278h case   15:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821AE278h case   15:*/		return 0x821AE27C;
		  /* 821AE27Ch */ case   16:  		/* srw R11, R11, R31 */
		/* 821AE27Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821AE27Ch case   16:*/		return 0x821AE280;
		  /* 821AE280h */ case   17:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821AE280h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821AE280h case   17:*/		return 0x821AE284;
		  /* 821AE284h */ case   18:  		/* cmpw CR6, R11, R27 */
		/* 821AE284h case   18:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821AE284h case   18:*/		return 0x821AE288;
		  /* 821AE288h */ case   19:  		/* bc 4, CR6_EQ, 108 */
		/* 821AE288h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821AE2F4;  }
		/* 821AE288h case   19:*/		return 0x821AE28C;
		  /* 821AE28Ch */ case   20:  		/* lwz R11, <#[R19]> */
		/* 821AE28Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821AE28Ch case   20:*/		return 0x821AE290;
		  /* 821AE290h */ case   21:  		/* addi R10, R26, 1 */
		/* 821AE290h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x1);
		/* 821AE290h case   21:*/		return 0x821AE294;
		  /* 821AE294h */ case   22:  		/* stw R28, <#[R1 + 368]> */
		/* 821AE294h case   22:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000170) );
		/* 821AE294h case   22:*/		return 0x821AE298;
		  /* 821AE298h */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AE298h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AE298h case   23:*/		return 0x821AE29C;
		  /* 821AE29Ch */ case   24:  		/* stw R10, <#[R1 + 372]> */
		/* 821AE29Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000174) );
		/* 821AE29Ch case   24:*/		return 0x821AE2A0;
		  /* 821AE2A0h */ case   25:  		/* bc 4, CR0_EQ, 40 */
		/* 821AE2A0h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821AE2C8;  }
		/* 821AE2A0h case   25:*/		return 0x821AE2A4;
		  /* 821AE2A4h */ case   26:  		/* lwz R11, <#[R24]> */
		/* 821AE2A4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821AE2A4h case   26:*/		return 0x821AE2A8;
		  /* 821AE2A8h */ case   27:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AE2A8h case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AE2A8h case   27:*/		return 0x821AE2AC;
		  /* 821AE2ACh */ case   28:  		/* addic. R3, R11, -4 */
		/* 821AE2ACh case   28:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821AE2ACh case   28:*/		return 0x821AE2B0;
		  /* 821AE2B0h */ case   29:  		/* bc 12, CR0_EQ, 24 */
		/* 821AE2B0h case   29:*/		if ( regs.CR[0].eq ) { return 0x821AE2C8;  }
		/* 821AE2B0h case   29:*/		return 0x821AE2B4;
		  /* 821AE2B4h */ case   30:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AE2B4h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE2B4h case   30:*/		return 0x821AE2B8;
		  /* 821AE2B8h */ case   31:  		/* lwz R10, <#[R3 + 12]> */
		/* 821AE2B8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821AE2B8h case   31:*/		return 0x821AE2BC;
		  /* 821AE2BCh */ case   32:  		/* addi R11, R11, 1 */
		/* 821AE2BCh case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AE2BCh case   32:*/		return 0x821AE2C0;
		  /* 821AE2C0h */ case   33:  		/* cmplw CR6, R11, R10 */
		/* 821AE2C0h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821AE2C0h case   33:*/		return 0x821AE2C4;
		  /* 821AE2C4h */ case   34:  		/* bc 4, CR6_GT, 16 */
		/* 821AE2C4h case   34:*/		if ( !regs.CR[6].gt ) { return 0x821AE2D4;  }
		/* 821AE2C4h case   34:*/		return 0x821AE2C8;
	}
	return 0x821AE2C8;
} // Block from 821AE23Ch-821AE2C8h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AE2C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE2C8);
		  /* 821AE2C8h */ case    0:  		/* li R4, 1 */
		/* 821AE2C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AE2C8h case    0:*/		return 0x821AE2CC;
		  /* 821AE2CCh */ case    1:  		/* mr R3, R24 */
		/* 821AE2CCh case    1:*/		regs.R3 = regs.R24;
		/* 821AE2CCh case    1:*/		return 0x821AE2D0;
		  /* 821AE2D0h */ case    2:  		/* bl -62488 */
		/* 821AE2D0h case    2:*/		regs.LR = 0x821AE2D4; return 0x8219EEB8;
		/* 821AE2D0h case    2:*/		return 0x821AE2D4;
	}
	return 0x821AE2D4;
} // Block from 821AE2C8h-821AE2D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AE2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE2D4);
		  /* 821AE2D4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AE2D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE2D4h case    0:*/		return 0x821AE2D8;
		  /* 821AE2D8h */ case    1:  		/* addi R22, R22, 1 */
		/* 821AE2D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821AE2D8h case    1:*/		return 0x821AE2DC;
		  /* 821AE2DCh */ case    2:  		/* ld R10, <#[R1 + 368]> */
		/* 821AE2DCh case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000170) );
		/* 821AE2DCh case    2:*/		return 0x821AE2E0;
		  /* 821AE2E0h */ case    3:  		/* addi R9, R11, 2 */
		/* 821AE2E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821AE2E0h case    3:*/		return 0x821AE2E4;
		  /* 821AE2E4h */ case    4:  		/* addi R8, R11, 1 */
		/* 821AE2E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821AE2E4h case    4:*/		return 0x821AE2E8;
		  /* 821AE2E8h */ case    5:  		/* rlwinm R11, R9, 3, 0, 28 */
		/* 821AE2E8h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R9);
		/* 821AE2E8h case    5:*/		return 0x821AE2EC;
		  /* 821AE2ECh */ case    6:  		/* stw R8, <#[R3 + 8]> */
		/* 821AE2ECh case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821AE2ECh case    6:*/		return 0x821AE2F0;
		  /* 821AE2F0h */ case    7:  		/* stdx R10, <#[R11 + R3]> */
		/* 821AE2F0h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821AE2F0h case    7:*/		return 0x821AE2F4;
	}
	return 0x821AE2F4;
} // Block from 821AE2D4h-821AE2F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AE2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE2F4);
		  /* 821AE2F4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AE2F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AE2F4h case    0:*/		return 0x821AE2F8;
		  /* 821AE2F8h */ case    1:  		/* addi R30, R30, 1 */
		/* 821AE2F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821AE2F8h case    1:*/		return 0x821AE2FC;
		  /* 821AE2FCh */ case    2:  		/* addi R31, R31, 2 */
		/* 821AE2FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821AE2FCh case    2:*/		return 0x821AE300;
		  /* 821AE300h */ case    3:  		/* rlwinm R10, R11, 7, 29, 31 */
		/* 821AE300h case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R10,regs.R11);
		/* 821AE300h case    3:*/		return 0x821AE304;
		  /* 821AE304h */ case    4:  		/* cmplw CR6, R30, R10 */
		/* 821AE304h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821AE304h case    4:*/		return 0x821AE308;
		  /* 821AE308h */ case    5:  		/* bc 12, CR6_LT, -144 */
		/* 821AE308h case    5:*/		if ( regs.CR[6].lt ) { return 0x821AE278;  }
		/* 821AE308h case    5:*/		return 0x821AE30C;
	}
	return 0x821AE30C;
} // Block from 821AE2F4h-821AE30Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE30C);
		  /* 821AE30Ch */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821AE30Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821AE30Ch case    0:*/		return 0x821AE310;
		  /* 821AE310h */ case    1:  		/* b -208 */
		/* 821AE310h case    1:*/		return 0x821AE240;
		/* 821AE310h case    1:*/		return 0x821AE314;
	}
	return 0x821AE314;
} // Block from 821AE30Ch-821AE314h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AE314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE314);
		  /* 821AE314h */ case    0:  		/* cmplw CR6, R23, R22 */
		/* 821AE314h case    0:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 821AE314h case    0:*/		return 0x821AE318;
		  /* 821AE318h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 821AE318h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE388;  }
		/* 821AE318h case    1:*/		return 0x821AE31C;
		  /* 821AE31Ch */ case    2:  		/* cmplwi CR6, R22, 10000 */
		/* 821AE31Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00002710);
		/* 821AE31Ch case    2:*/		return 0x821AE320;
		  /* 821AE320h */ case    3:  		/* bc 12, CR6_GT, 104 */
		/* 821AE320h case    3:*/		if ( regs.CR[6].gt ) { return 0x821AE388;  }
		/* 821AE320h case    3:*/		return 0x821AE324;
		  /* 821AE324h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 821AE324h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821AE324h case    4:*/		return 0x821AE328;
		  /* 821AE328h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 821AE328h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AE34C;  }
		/* 821AE328h case    5:*/		return 0x821AE32C;
		  /* 821AE32Ch */ case    6:  		/* lwz R11, <#[R20 + 4]> */
		/* 821AE32Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821AE32Ch case    6:*/		return 0x821AE330;
		  /* 821AE330h */ case    7:  		/* stw R18, <#[R1 + 232]> */
		/* 821AE330h case    7:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000E8) );
		/* 821AE330h case    7:*/		return 0x821AE334;
		  /* 821AE334h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821AE334h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AE334h case    8:*/		return 0x821AE338;
		  /* 821AE338h */ case    9:  		/* addic R10, R10, -1 */
		/* 821AE338h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821AE338h case    9:*/		return 0x821AE33C;
		  /* 821AE33Ch */ case   10:  		/* subfe R10, R10, R10 */
		/* 821AE33Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821AE33Ch case   10:*/		return 0x821AE340;
		  /* 821AE340h */ case   11:  		/* and R11, R10, R11 */
		/* 821AE340h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AE340h case   11:*/		return 0x821AE344;
		  /* 821AE344h */ case   12:  		/* stw R11, <#[R1 + 228]> */
		/* 821AE344h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 821AE344h case   12:*/		return 0x821AE348;
		  /* 821AE348h */ case   13:  		/* b 16 */
		/* 821AE348h case   13:*/		return 0x821AE358;
		/* 821AE348h case   13:*/		return 0x821AE34C;
	}
	return 0x821AE34C;
} // Block from 821AE314h-821AE34Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AE34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE34C);
		  /* 821AE34Ch */ case    0:  		/* addi R3, R1, 224 */
		/* 821AE34Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821AE34Ch case    0:*/		return 0x821AE350;
		  /* 821AE350h */ case    1:  		/* bl 76560 */
		/* 821AE350h case    1:*/		regs.LR = 0x821AE354; return 0x821C0E60;
		/* 821AE350h case    1:*/		return 0x821AE354;
		  /* 821AE354h */ case    2:  		/* lwz R20, <#[R1 + 224]> */
		/* 821AE354h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000E0) );
		/* 821AE354h case    2:*/		return 0x821AE358;
	}
	return 0x821AE358;
} // Block from 821AE34Ch-821AE358h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AE358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE358);
		  /* 821AE358h */ case    0:  		/* lwz R11, <#[R1 + 232]> */
		/* 821AE358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821AE358h case    0:*/		return 0x821AE35C;
		  /* 821AE35Ch */ case    1:  		/* addi R23, R23, 1 */
		/* 821AE35Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821AE35Ch case    1:*/		return 0x821AE360;
		  /* 821AE360h */ case    2:  		/* lwz R10, <#[R1 + 228]> */
		/* 821AE360h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000E4) );
		/* 821AE360h case    2:*/		return 0x821AE364;
		  /* 821AE364h */ case    3:  		/* addi R11, R11, 2 */
		/* 821AE364h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AE364h case    3:*/		return 0x821AE368;
		  /* 821AE368h */ case    4:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821AE368h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821AE368h case    4:*/		return 0x821AE36C;
		  /* 821AE36Ch */ case    5:  		/* add R11, R11, R10 */
		/* 821AE36Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE36Ch case    5:*/		return 0x821AE370;
		  /* 821AE370h */ case    6:  		/* lwz R26, <#[R11 + 4]> */
		/* 821AE370h case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE370h case    6:*/		return 0x821AE374;
		  /* 821AE374h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 821AE374h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE374h case    7:*/		return 0x821AE378;
		  /* 821AE378h */ case    8:  		/* cmplw CR6, R26, R21 */
		/* 821AE378h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R21);
		/* 821AE378h case    8:*/		return 0x821AE37C;
		  /* 821AE37Ch */ case    9:  		/* bc 4, CR6_GT, -548 */
		/* 821AE37Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x821AE158;  }
		/* 821AE37Ch case    9:*/		return 0x821AE380;
		  /* 821AE380h */ case   10:  		/* mr R21, R26 */
		/* 821AE380h case   10:*/		regs.R21 = regs.R26;
		/* 821AE380h case   10:*/		return 0x821AE384;
		  /* 821AE384h */ case   11:  		/* b -556 */
		/* 821AE384h case   11:*/		return 0x821AE158;
		/* 821AE384h case   11:*/		return 0x821AE388;
	}
	return 0x821AE388;
} // Block from 821AE358h-821AE388h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AE388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE388);
		  /* 821AE388h */ case    0:  		/* mr R28, R21 */
		/* 821AE388h case    0:*/		regs.R28 = regs.R21;
		/* 821AE388h case    0:*/		return 0x821AE38C;
		  /* 821AE38Ch */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 821AE38Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821AE38Ch case    1:*/		return 0x821AE390;
		  /* 821AE390h */ case    2:  		/* bc 12, CR6_EQ, 224 */
		/* 821AE390h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AE470;  }
		/* 821AE390h case    2:*/		return 0x821AE394;
		  /* 821AE394h */ case    3:  		/* lwz R27, <#[R1 + 1244]> */
		/* 821AE394h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AE394h case    3:*/		return 0x821AE398;
		  /* 821AE398h */ case    4:  		/* b 8 */
		/* 821AE398h case    4:*/		return 0x821AE3A0;
		/* 821AE398h case    4:*/		return 0x821AE39C;
		  /* 821AE39Ch */ case    5:  		/* lwz R20, <#[R1 + 224]> */
		/* 821AE39Ch case    5:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000E0) );
		/* 821AE39Ch case    5:*/		return 0x821AE3A0;
	}
	return 0x821AE3A0;
} // Block from 821AE388h-821AE3A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE3A0);
		  /* 821AE3A0h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821AE3A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821AE3A0h case    0:*/		return 0x821AE3A4;
		  /* 821AE3A4h */ case    1:  		/* li R29, 0 */
		/* 821AE3A4h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821AE3A4h case    1:*/		return 0x821AE3A8;
		  /* 821AE3A8h */ case    2:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821AE3A8h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AE3A8h case    2:*/		return 0x821AE3AC;
		  /* 821AE3ACh */ case    3:  		/* stw R29, <#[R1 + 232]> */
		/* 821AE3ACh case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000E8) );
		/* 821AE3ACh case    3:*/		return 0x821AE3B0;
		  /* 821AE3B0h */ case    4:  		/* addic R10, R10, -1 */
		/* 821AE3B0h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821AE3B0h case    4:*/		return 0x821AE3B4;
		  /* 821AE3B4h */ case    5:  		/* subfe R10, R10, R10 */
		/* 821AE3B4h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821AE3B4h case    5:*/		return 0x821AE3B8;
		  /* 821AE3B8h */ case    6:  		/* and R30, R10, R11 */
		/* 821AE3B8h case    6:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821AE3B8h case    6:*/		return 0x821AE3BC;
		  /* 821AE3BCh */ case    7:  		/* stw R30, <#[R1 + 228]> */
		/* 821AE3BCh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000E4) );
		/* 821AE3BCh case    7:*/		return 0x821AE3C0;
		  /* 821AE3C0h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 821AE3C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821AE3C0h case    8:*/		return 0x821AE3C4;
		  /* 821AE3C4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE3C4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821AE3D8;  }
		/* 821AE3C4h case    9:*/		return 0x821AE3C8;
		  /* 821AE3C8h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AE3C8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AE3C8h case   10:*/		return 0x821AE3CC;
		  /* 821AE3CCh */ case   11:  		/* cmplw CR6, R29, R11 */
		/* 821AE3CCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821AE3CCh case   11:*/		return 0x821AE3D0;
		  /* 821AE3D0h */ case   12:  		/* li R11, 0 */
		/* 821AE3D0h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AE3D0h case   12:*/		return 0x821AE3D4;
		  /* 821AE3D4h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821AE3D4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821AE3DC;  }
		/* 821AE3D4h case   13:*/		return 0x821AE3D8;
	}
	return 0x821AE3D8;
} // Block from 821AE3A0h-821AE3D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AE3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE3D8);
		  /* 821AE3D8h */ case    0:  		/* li R11, 1 */
		/* 821AE3D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AE3D8h case    0:*/		return 0x821AE3DC;
	}
	return 0x821AE3DC;
} // Block from 821AE3D8h-821AE3DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AE3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE3DC);
		  /* 821AE3DCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AE3DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AE3DCh case    0:*/		return 0x821AE3E0;
		  /* 821AE3E0h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821AE3E0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AE444;  }
		/* 821AE3E0h case    1:*/		return 0x821AE3E4;
		  /* 821AE3E4h */ case    2:  		/* addi R11, R29, 2 */
		/* 821AE3E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x2);
		/* 821AE3E4h case    2:*/		return 0x821AE3E8;
		  /* 821AE3E8h */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821AE3E8h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821AE3E8h case    3:*/		return 0x821AE3EC;
		  /* 821AE3ECh */ case    4:  		/* add R11, R11, R30 */
		/* 821AE3ECh case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821AE3ECh case    4:*/		return 0x821AE3F0;
		  /* 821AE3F0h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821AE3F0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE3F0h case    5:*/		return 0x821AE3F4;
		  /* 821AE3F4h */ case    6:  		/* cmplw CR6, R28, R10 */
		/* 821AE3F4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 821AE3F4h case    6:*/		return 0x821AE3F8;
		  /* 821AE3F8h */ case    7:  		/* bc 4, CR6_EQ, 56 */
		/* 821AE3F8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AE430;  }
		/* 821AE3F8h case    7:*/		return 0x821AE3FC;
		  /* 821AE3FCh */ case    8:  		/* lwz R31, <#[R11]> */
		/* 821AE3FCh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE3FCh case    8:*/		return 0x821AE400;
		  /* 821AE400h */ case    9:  		/* lwz R11, <#[R31 + 16]> */
		/* 821AE400h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AE400h case    9:*/		return 0x821AE404;
		  /* 821AE404h */ case   10:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 821AE404h case   10:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 821AE404h case   10:*/		return 0x821AE408;
		  /* 821AE408h */ case   11:  		/* bc 4, CR0_EQ, 40 */
		/* 821AE408h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821AE430;  }
		/* 821AE408h case   11:*/		return 0x821AE40C;
		  /* 821AE40Ch */ case   12:  		/* oris R11, R11, 32768 */
		/* 821AE40Ch case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821AE40Ch case   12:*/		return 0x821AE410;
		  /* 821AE410h */ case   13:  		/* lwz R3, <#[R1 + 1236]> */
		/* 821AE410h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE410h case   13:*/		return 0x821AE414;
		  /* 821AE414h */ case   14:  		/* li R6, 4 */
		/* 821AE414h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821AE414h case   14:*/		return 0x821AE418;
		  /* 821AE418h */ case   15:  		/* stw R11, <#[R31 + 16]> */
		/* 821AE418h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AE418h case   15:*/		return 0x821AE41C;
		  /* 821AE41Ch */ case   16:  		/* mr R5, R31 */
		/* 821AE41Ch case   16:*/		regs.R5 = regs.R31;
		/* 821AE41Ch case   16:*/		return 0x821AE420;
		  /* 821AE420h */ case   17:  		/* lwz R4, <#[R27 + 28]> */
		/* 821AE420h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000001C) );
		/* 821AE420h case   17:*/		return 0x821AE424;
		  /* 821AE424h */ case   18:  		/* bl 6564 */
		/* 821AE424h case   18:*/		regs.LR = 0x821AE428; return 0x821AFDC8;
		/* 821AE424h case   18:*/		return 0x821AE428;
		  /* 821AE428h */ case   19:  		/* cmplw CR6, R31, R3 */
		/* 821AE428h case   19:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821AE428h case   19:*/		return 0x821AE42C;
		  /* 821AE42Ch */ case   20:  		/* bc 4, CR6_EQ, 24 */
		/* 821AE42Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x821AE444;  }
		/* 821AE42Ch case   20:*/		return 0x821AE430;
	}
	return 0x821AE430;
} // Block from 821AE3DCh-821AE430h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821AE430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE430);
		  /* 821AE430h */ case    0:  		/* addi R3, R1, 224 */
		/* 821AE430h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821AE430h case    0:*/		return 0x821AE434;
		  /* 821AE434h */ case    1:  		/* bl 76332 */
		/* 821AE434h case    1:*/		regs.LR = 0x821AE438; return 0x821C0E60;
		/* 821AE434h case    1:*/		return 0x821AE438;
		  /* 821AE438h */ case    2:  		/* lwz R29, <#[R1 + 232]> */
		/* 821AE438h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000E8) );
		/* 821AE438h case    2:*/		return 0x821AE43C;
		  /* 821AE43Ch */ case    3:  		/* lwz R30, <#[R1 + 228]> */
		/* 821AE43Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000E4) );
		/* 821AE43Ch case    3:*/		return 0x821AE440;
		  /* 821AE440h */ case    4:  		/* b -128 */
		/* 821AE440h case    4:*/		return 0x821AE3C0;
		/* 821AE440h case    4:*/		return 0x821AE444;
	}
	return 0x821AE444;
} // Block from 821AE430h-821AE444h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AE444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE444);
		  /* 821AE444h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821AE444h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821AE444h case    0:*/		return 0x821AE448;
		  /* 821AE448h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE448h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AE45C;  }
		/* 821AE448h case    1:*/		return 0x821AE44C;
		  /* 821AE44Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AE44Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AE44Ch case    2:*/		return 0x821AE450;
		  /* 821AE450h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821AE450h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821AE450h case    3:*/		return 0x821AE454;
		  /* 821AE454h */ case    4:  		/* li R11, 0 */
		/* 821AE454h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AE454h case    4:*/		return 0x821AE458;
		  /* 821AE458h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821AE458h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AE460;  }
		/* 821AE458h case    5:*/		return 0x821AE45C;
	}
	return 0x821AE45C;
} // Block from 821AE444h-821AE45Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE45C);
		  /* 821AE45Ch */ case    0:  		/* li R11, 1 */
		/* 821AE45Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AE45Ch case    0:*/		return 0x821AE460;
	}
	return 0x821AE460;
} // Block from 821AE45Ch-821AE460h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AE460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE460);
		  /* 821AE460h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AE460h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AE460h case    0:*/		return 0x821AE464;
		  /* 821AE464h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821AE464h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AE470;  }
		/* 821AE464h case    1:*/		return 0x821AE468;
		  /* 821AE468h */ case    2:  		/* addic. R28, R28, -1 */
		/* 821AE468h case    2:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821AE468h case    2:*/		return 0x821AE46C;
		  /* 821AE46Ch */ case    3:  		/* bc 4, CR0_EQ, -208 */
		/* 821AE46Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821AE39C;  }
		/* 821AE46Ch case    3:*/		return 0x821AE470;
	}
	return 0x821AE470;
} // Block from 821AE460h-821AE470h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AE470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE470);
		  /* 821AE470h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821AE470h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821AE470h case    0:*/		return 0x821AE474;
		  /* 821AE474h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AE474h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AE474h case    1:*/		return 0x821AE478;
		  /* 821AE478h */ case    2:  		/* bc 4, CR0_EQ, 132 */
		/* 821AE478h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AE4FC;  }
		/* 821AE478h case    2:*/		return 0x821AE47C;
		  /* 821AE47Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821AE47Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AE47Ch case    3:*/		return 0x821AE480;
		  /* 821AE480h */ case    4:  		/* bc 12, CR0_EQ, 124 */
		/* 821AE480h case    4:*/		if ( regs.CR[0].eq ) { return 0x821AE4FC;  }
		/* 821AE480h case    4:*/		return 0x821AE484;
		  /* 821AE484h */ case    5:  		/* lwz R11, <#[R24]> */
		/* 821AE484h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821AE484h case    5:*/		return 0x821AE488;
		  /* 821AE488h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AE488h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AE488h case    6:*/		return 0x821AE48C;
		  /* 821AE48Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821AE48Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821AE48Ch case    7:*/		return 0x821AE490;
		  /* 821AE490h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AE490h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE490h case    8:*/		return 0x821AE494;
		  /* 821AE494h */ case    9:  		/* addi R10, R11, 1 */
		/* 821AE494h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821AE494h case    9:*/		return 0x821AE498;
		  /* 821AE498h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821AE498h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821AE498h case   10:*/		return 0x821AE49C;
		  /* 821AE49Ch */ case   11:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821AE49Ch case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821AE49Ch case   11:*/		return 0x821AE4A0;
		  /* 821AE4A0h */ case   12:  		/* ldx R10, <#[R10 + R4]> */
		/* 821AE4A0h case   12:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821AE4A0h case   12:*/		return 0x821AE4A4;
		  /* 821AE4A4h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821AE4A4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821AE4A4h case   13:*/		return 0x821AE4A8;
		  /* 821AE4A8h */ case   14:  		/* std R10, <#[R1 + 152]> */
		/* 821AE4A8h case   14:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 821AE4A8h case   14:*/		return 0x821AE4AC;
		  /* 821AE4ACh */ case   15:  		/* bc 4, CR0_EQ, 60 */
		/* 821AE4ACh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821AE4E8;  }
		/* 821AE4ACh case   15:*/		return 0x821AE4B0;
		  /* 821AE4B0h */ case   16:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821AE4B0h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821AE4B0h case   16:*/		return 0x821AE4B4;
		  /* 821AE4B4h */ case   17:  		/* mr R3, R24 */
		/* 821AE4B4h case   17:*/		regs.R3 = regs.R24;
		/* 821AE4B4h case   17:*/		return 0x821AE4B8;
		  /* 821AE4B8h */ case   18:  		/* lwz R10, <#[R11 + 4]> */
		/* 821AE4B8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE4B8h case   18:*/		return 0x821AE4BC;
		  /* 821AE4BCh */ case   19:  		/* lwz R9, <#[R11]> */
		/* 821AE4BCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE4BCh case   19:*/		return 0x821AE4C0;
		  /* 821AE4C0h */ case   20:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821AE4C0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821AE4C0h case   20:*/		return 0x821AE4C4;
		  /* 821AE4C4h */ case   21:  		/* stw R9, <#[R10]> */
		/* 821AE4C4h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AE4C4h case   21:*/		return 0x821AE4C8;
		  /* 821AE4C8h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821AE4C8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE4C8h case   22:*/		return 0x821AE4CC;
		  /* 821AE4CCh */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AE4CCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE4CCh case   23:*/		return 0x821AE4D0;
		  /* 821AE4D0h */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821AE4D0h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821AE4D0h case   24:*/		return 0x821AE4D4;
		  /* 821AE4D4h */ case   25:  		/* stw R11, <#[R10]> */
		/* 821AE4D4h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AE4D4h case   25:*/		return 0x821AE4D8;
		  /* 821AE4D8h */ case   26:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AE4D8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AE4D8h case   26:*/		return 0x821AE4DC;
		  /* 821AE4DCh */ case   27:  		/* addi R11, R11, 2 */
		/* 821AE4DCh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AE4DCh case   27:*/		return 0x821AE4E0;
		  /* 821AE4E0h */ case   28:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 821AE4E0h case   28:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 821AE4E0h case   28:*/		return 0x821AE4E4;
		  /* 821AE4E4h */ case   29:  		/* bl -378588 */
		/* 821AE4E4h case   29:*/		regs.LR = 0x821AE4E8; return 0x82151E08;
		/* 821AE4E4h case   29:*/		return 0x821AE4E8;
	}
	return 0x821AE4E8;
} // Block from 821AE470h-821AE4E8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821AE4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE4E8);
		  /* 821AE4E8h */ case    0:  		/* lwz R11, <#[R1 + 152]> */
		/* 821AE4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821AE4E8h case    0:*/		return 0x821AE4EC;
		  /* 821AE4ECh */ case    1:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AE4ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AE4ECh case    1:*/		return 0x821AE4F0;
		  /* 821AE4F0h */ case    2:  		/* rlwinm R10, R10, 0, 1, 31 */
		/* 821AE4F0h case    2:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R10,regs.R10);
		/* 821AE4F0h case    2:*/		return 0x821AE4F4;
		  /* 821AE4F4h */ case    3:  		/* stw R10, <#[R11 + 16]> */
		/* 821AE4F4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AE4F4h case    3:*/		return 0x821AE4F8;
		  /* 821AE4F8h */ case    4:  		/* b -136 */
		/* 821AE4F8h case    4:*/		return 0x821AE470;
		/* 821AE4F8h case    4:*/		return 0x821AE4FC;
	}
	return 0x821AE4FC;
} // Block from 821AE4E8h-821AE4FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AE4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE4FC);
		  /* 821AE4FCh */ case    0:  		/* lwz R31, <#[R1 + 1236]> */
		/* 821AE4FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE4FCh case    0:*/		return 0x821AE500;
		  /* 821AE500h */ case    1:  		/* li R6, 0 */
		/* 821AE500h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AE500h case    1:*/		return 0x821AE504;
		  /* 821AE504h */ case    2:  		/* li R5, 8 */
		/* 821AE504h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821AE504h case    2:*/		return 0x821AE508;
		  /* 821AE508h */ case    3:  		/* mr R4, R24 */
		/* 821AE508h case    3:*/		regs.R4 = regs.R24;
		/* 821AE508h case    3:*/		return 0x821AE50C;
		  /* 821AE50Ch */ case    4:  		/* mr R3, R31 */
		/* 821AE50Ch case    4:*/		regs.R3 = regs.R31;
		/* 821AE50Ch case    4:*/		return 0x821AE510;
		  /* 821AE510h */ case    5:  		/* bl -267968 */
		/* 821AE510h case    5:*/		regs.LR = 0x821AE514; return 0x8216CE50;
		/* 821AE510h case    5:*/		return 0x821AE514;
		  /* 821AE514h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 821AE514h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821AE514h case    6:*/		return 0x821AE518;
		  /* 821AE518h */ case    7:  		/* bc 4, CR6_EQ, 2968 */
		/* 821AE518h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AF0B0;  }
		/* 821AE518h case    7:*/		return 0x821AE51C;
		  /* 821AE51Ch */ case    8:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AE51Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE51Ch case    8:*/		return 0x821AE520;
	}
	return 0x821AE520;
} // Block from 821AE4FCh-821AE520h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AE520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE520);
		  /* 821AE520h */ case    0:  		/* lwz R10, <#[R1 + 124]> */
		/* 821AE520h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE520h case    0:*/		return 0x821AE524;
		  /* 821AE524h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 821AE524h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821AE524h case    1:*/		return 0x821AE528;
		  /* 821AE528h */ case    2:  		/* bc 4, CR6_EQ, 640 */
		/* 821AE528h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AE7A8;  }
		/* 821AE528h case    2:*/		return 0x821AE52C;
		  /* 821AE52Ch */ case    3:  		/* lwz R10, <#[R1 + 200]> */
		/* 821AE52Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C8) );
		/* 821AE52Ch case    3:*/		return 0x821AE530;
		  /* 821AE530h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821AE530h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AE530h case    4:*/		return 0x821AE534;
		  /* 821AE534h */ case    5:  		/* bc 4, CR6_EQ, 628 */
		/* 821AE534h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AE7A8;  }
		/* 821AE534h case    5:*/		return 0x821AE538;
		  /* 821AE538h */ case    6:  		/* lwz R10, <#[R1 + 176]> */
		/* 821AE538h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AE538h case    6:*/		return 0x821AE53C;
		  /* 821AE53Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821AE53Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AE53Ch case    7:*/		return 0x821AE540;
		  /* 821AE540h */ case    8:  		/* bc 4, CR6_EQ, 616 */
		/* 821AE540h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821AE7A8;  }
		/* 821AE540h case    8:*/		return 0x821AE544;
		  /* 821AE544h */ case    9:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AE544h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE544h case    9:*/		return 0x821AE548;
		  /* 821AE548h */ case   10:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AE548h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AE548h case   10:*/		return 0x821AE54C;
		  /* 821AE54Ch */ case   11:  		/* cmplwi CR6, R10, 256 */
		/* 821AE54Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821AE54Ch case   11:*/		return 0x821AE550;
		  /* 821AE550h */ case   12:  		/* bc 4, CR6_EQ, 600 */
		/* 821AE550h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821AE7A8;  }
		/* 821AE550h case   12:*/		return 0x821AE554;
		  /* 821AE554h */ case   13:  		/* lwz R10, <#[R11 + 44]> */
		/* 821AE554h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821AE554h case   13:*/		return 0x821AE558;
		  /* 821AE558h */ case   14:  		/* lwz R10, <#[R10]> */
		/* 821AE558h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821AE558h case   14:*/		return 0x821AE55C;
		  /* 821AE55Ch */ case   15:  		/* rlwinm. R10, R10, 0, 27, 28 */
		/* 821AE55Ch case   15:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R10);
		/* 821AE55Ch case   15:*/		return 0x821AE560;
		  /* 821AE560h */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 821AE560h case   16:*/		if ( regs.CR[0].eq ) { return 0x821AE574;  }
		/* 821AE560h case   16:*/		return 0x821AE564;
		  /* 821AE564h */ case   17:  		/* lwz R10, <#[R11 + 48]> */
		/* 821AE564h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821AE564h case   17:*/		return 0x821AE568;
		  /* 821AE568h */ case   18:  		/* lwz R10, <#[R10]> */
		/* 821AE568h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821AE568h case   18:*/		return 0x821AE56C;
		  /* 821AE56Ch */ case   19:  		/* rlwinm. R10, R10, 0, 27, 28 */
		/* 821AE56Ch case   19:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R10);
		/* 821AE56Ch case   19:*/		return 0x821AE570;
		  /* 821AE570h */ case   20:  		/* bc 4, CR0_EQ, 568 */
		/* 821AE570h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821AE7A8;  }
		/* 821AE570h case   20:*/		return 0x821AE574;
	}
	return 0x821AE574;
} // Block from 821AE520h-821AE574h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821AE574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE574);
		  /* 821AE574h */ case    0:  		/* lwz R26, <#[R1 + 1244]> */
		/* 821AE574h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AE574h case    0:*/		return 0x821AE578;
		  /* 821AE578h */ case    1:  		/* lwz R27, <#[R1 + 1236]> */
		/* 821AE578h case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE578h case    1:*/		return 0x821AE57C;
		  /* 821AE57Ch */ case    2:  		/* lwz R10, <#[R26 + 8]> */
		/* 821AE57Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE57Ch case    2:*/		return 0x821AE580;
		  /* 821AE580h */ case    3:  		/* rlwinm R10, R10, 0, 15, 17 */
		/* 821AE580h case    3:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R10,regs.R10);
		/* 821AE580h case    3:*/		return 0x821AE584;
		  /* 821AE584h */ case    4:  		/* cmplwi CR6, R10, 16384 */
		/* 821AE584h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00004000);
		/* 821AE584h case    4:*/		return 0x821AE588;
		  /* 821AE588h */ case    5:  		/* bc 4, CR6_EQ, 552 */
		/* 821AE588h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AE7B0;  }
		/* 821AE588h case    5:*/		return 0x821AE58C;
		  /* 821AE58Ch */ case    6:  		/* li R7, 1 */
		/* 821AE58Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AE58Ch case    6:*/		return 0x821AE590;
		  /* 821AE590h */ case    7:  		/* li R6, 10 */
		/* 821AE590h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 821AE590h case    7:*/		return 0x821AE594;
		  /* 821AE594h */ case    8:  		/* mr R5, R26 */
		/* 821AE594h case    8:*/		regs.R5 = regs.R26;
		/* 821AE594h case    8:*/		return 0x821AE598;
		  /* 821AE598h */ case    9:  		/* mr R4, R11 */
		/* 821AE598h case    9:*/		regs.R4 = regs.R11;
		/* 821AE598h case    9:*/		return 0x821AE59C;
		  /* 821AE59Ch */ case   10:  		/* mr R3, R27 */
		/* 821AE59Ch case   10:*/		regs.R3 = regs.R27;
		/* 821AE59Ch case   10:*/		return 0x821AE5A0;
		  /* 821AE5A0h */ case   11:  		/* bl -40312 */
		/* 821AE5A0h case   11:*/		regs.LR = 0x821AE5A4; return 0x821A4828;
		/* 821AE5A0h case   11:*/		return 0x821AE5A4;
		  /* 821AE5A4h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AE5A4h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AE5A4h case   12:*/		return 0x821AE5A8;
		  /* 821AE5A8h */ case   13:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AE5A8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE5A8h case   13:*/		return 0x821AE5AC;
		  /* 821AE5ACh */ case   14:  		/* bc 12, CR0_EQ, 516 */
		/* 821AE5ACh case   14:*/		if ( regs.CR[0].eq ) { return 0x821AE7B0;  }
		/* 821AE5ACh case   14:*/		return 0x821AE5B0;
		  /* 821AE5B0h */ case   15:  		/* lwz R4, <#[R11 + 44]> */
		/* 821AE5B0h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821AE5B0h case   15:*/		return 0x821AE5B4;
		  /* 821AE5B4h */ case   16:  		/* mr R3, R27 */
		/* 821AE5B4h case   16:*/		regs.R3 = regs.R27;
		/* 821AE5B4h case   16:*/		return 0x821AE5B8;
		  /* 821AE5B8h */ case   17:  		/* lwz R5, <#[R4 + 12]> */
		/* 821AE5B8h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AE5B8h case   17:*/		return 0x821AE5BC;
		  /* 821AE5BCh */ case   18:  		/* bl -251084 */
		/* 821AE5BCh case   18:*/		regs.LR = 0x821AE5C0; return 0x821710F0;
		/* 821AE5BCh case   18:*/		return 0x821AE5C0;
		  /* 821AE5C0h */ case   19:  		/* lwz R11, <#[R1 + 192]> */
		/* 821AE5C0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 821AE5C0h case   19:*/		return 0x821AE5C4;
		  /* 821AE5C4h */ case   20:  		/* mr R31, R3 */
		/* 821AE5C4h case   20:*/		regs.R31 = regs.R3;
		/* 821AE5C4h case   20:*/		return 0x821AE5C8;
		  /* 821AE5C8h */ case   21:  		/* lwz R10, <#[R1 + 196]> */
		/* 821AE5C8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C4) );
		/* 821AE5C8h case   21:*/		return 0x821AE5CC;
		  /* 821AE5CCh */ case   22:  		/* lis R9, 2 */
		/* 821AE5CCh case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0x2);
		/* 821AE5CCh case   22:*/		return 0x821AE5D0;
		  /* 821AE5D0h */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821AE5D0h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821AE5D0h case   23:*/		return 0x821AE5D4;
		  /* 821AE5D4h */ case   24:  		/* lis R12, -2561 */
		/* 821AE5D4h case   24:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF5FF);
		/* 821AE5D4h case   24:*/		return 0x821AE5D8;
		  /* 821AE5D8h */ case   25:  		/* ori R11, R11, 224 */
		/* 821AE5D8h case   25:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE0);
		/* 821AE5D8h case   25:*/		return 0x821AE5DC;
		  /* 821AE5DCh */ case   26:  		/* lwz R8, <#[R31]> */
		/* 821AE5DCh case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821AE5DCh case   26:*/		return 0x821AE5E0;
		  /* 821AE5E0h */ case   27:  		/* ori R12, R12, 57375 */
		/* 821AE5E0h case   27:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE01F);
		/* 821AE5E0h case   27:*/		return 0x821AE5E4;
		  /* 821AE5E4h */ case   28:  		/* or R11, R11, R10 */
		/* 821AE5E4h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE5E4h case   28:*/		return 0x821AE5E8;
		  /* 821AE5E8h */ case   29:  		/* mr R10, R8 */
		/* 821AE5E8h case   29:*/		regs.R10 = regs.R8;
		/* 821AE5E8h case   29:*/		return 0x821AE5EC;
		  /* 821AE5ECh */ case   30:  		/* rlwinm R7, R11, 27, 29, 30 */
		/* 821AE5ECh case   30:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R7,regs.R11);
		/* 821AE5ECh case   30:*/		return 0x821AE5F0;
		  /* 821AE5F0h */ case   31:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821AE5F0h case   31:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821AE5F0h case   31:*/		return 0x821AE5F4;
		  /* 821AE5F4h */ case   32:  		/* rlwinm R6, R11, 29, 29, 30 */
		/* 821AE5F4h case   32:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R6,regs.R11);
		/* 821AE5F4h case   32:*/		return 0x821AE5F8;
		  /* 821AE5F8h */ case   33:  		/* srw R7, R8, R7 */
		/* 821AE5F8h case   33:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 821AE5F8h case   33:*/		return 0x821AE5FC;
		  /* 821AE5FCh */ case   34:  		/* srw R6, R8, R6 */
		/* 821AE5FCh case   34:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 821AE5FCh case   34:*/		return 0x821AE600;
		  /* 821AE600h */ case   35:  		/* rlwimi R9, R7, 2, 28, 29 */
		/* 821AE600h case   35:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R7);
		/* 821AE600h case   35:*/		return 0x821AE604;
		  /* 821AE604h */ case   36:  		/* rlwinm R7, R6, 0, 30, 31 */
		/* 821AE604h case   36:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R6);
		/* 821AE604h case   36:*/		return 0x821AE608;
		  /* 821AE608h */ case   37:  		/* rlwinm R6, R11, 31, 29, 30 */
		/* 821AE608h case   37:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R6,regs.R11);
		/* 821AE608h case   37:*/		return 0x821AE60C;
		  /* 821AE60Ch */ case   38:  		/* or R9, R9, R7 */
		/* 821AE60Ch case   38:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821AE60Ch case   38:*/		return 0x821AE610;
		  /* 821AE610h */ case   39:  		/* rlwinm R11, R11, 1, 29, 30 */
		/* 821AE610h case   39:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R11,regs.R11);
		/* 821AE610h case   39:*/		return 0x821AE614;
		  /* 821AE614h */ case   40:  		/* srw R7, R8, R6 */
		/* 821AE614h case   40:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R6);
		/* 821AE614h case   40:*/		return 0x821AE618;
		  /* 821AE618h */ case   41:  		/* srw R11, R8, R11 */
		/* 821AE618h case   41:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821AE618h case   41:*/		return 0x821AE61C;
		  /* 821AE61Ch */ case   42:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821AE61Ch case   42:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821AE61Ch case   42:*/		return 0x821AE620;
		  /* 821AE620h */ case   43:  		/* and R10, R10, R12 */
		/* 821AE620h case   43:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 821AE620h case   43:*/		return 0x821AE624;
		  /* 821AE624h */ case   44:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 821AE624h case   44:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 821AE624h case   44:*/		return 0x821AE628;
		  /* 821AE628h */ case   45:  		/* mr R3, R27 */
		/* 821AE628h case   45:*/		regs.R3 = regs.R27;
		/* 821AE628h case   45:*/		return 0x821AE62C;
		  /* 821AE62Ch */ case   46:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821AE62Ch case   46:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821AE62Ch case   46:*/		return 0x821AE630;
		  /* 821AE630h */ case   47:  		/* or R11, R11, R10 */
		/* 821AE630h case   47:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE630h case   47:*/		return 0x821AE634;
		  /* 821AE634h */ case   48:  		/* stw R11, <#[R31]> */
		/* 821AE634h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AE634h case   48:*/		return 0x821AE638;
		  /* 821AE638h */ case   49:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AE638h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE638h case   49:*/		return 0x821AE63C;
		  /* 821AE63Ch */ case   50:  		/* lwz R4, <#[R11 + 48]> */
		/* 821AE63Ch case   50:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000030) );
		/* 821AE63Ch case   50:*/		return 0x821AE640;
		  /* 821AE640h */ case   51:  		/* lwz R5, <#[R4 + 12]> */
		/* 821AE640h case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AE640h case   51:*/		return 0x821AE644;
		  /* 821AE644h */ case   52:  		/* bl -251220 */
		/* 821AE644h case   52:*/		regs.LR = 0x821AE648; return 0x821710F0;
		/* 821AE644h case   52:*/		return 0x821AE648;
		  /* 821AE648h */ case   53:  		/* lwz R11, <#[R1 + 192]> */
		/* 821AE648h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 821AE648h case   53:*/		return 0x821AE64C;
		  /* 821AE64Ch */ case   54:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821AE64Ch case   54:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821AE64Ch case   54:*/		return 0x821AE650;
		  /* 821AE650h */ case   55:  		/* lwz R10, <#[R1 + 196]> */
		/* 821AE650h case   55:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C4) );
		/* 821AE650h case   55:*/		return 0x821AE654;
		  /* 821AE654h */ case   56:  		/* lwz R8, <#[R3]> */
		/* 821AE654h case   56:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821AE654h case   56:*/		return 0x821AE658;
		  /* 821AE658h */ case   57:  		/* lis R9, 2 */
		/* 821AE658h case   57:*/		cpu::op::lis<0>(regs,&regs.R9,0x2);
		/* 821AE658h case   57:*/		return 0x821AE65C;
		  /* 821AE65Ch */ case   58:  		/* ori R11, R11, 224 */
		/* 821AE65Ch case   58:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE0);
		/* 821AE65Ch case   58:*/		return 0x821AE660;
		  /* 821AE660h */ case   59:  		/* lis R12, -2561 */
		/* 821AE660h case   59:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF5FF);
		/* 821AE660h case   59:*/		return 0x821AE664;
		  /* 821AE664h */ case   60:  		/* or R11, R11, R10 */
		/* 821AE664h case   60:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE664h case   60:*/		return 0x821AE668;
		  /* 821AE668h */ case   61:  		/* mr R10, R8 */
		/* 821AE668h case   61:*/		regs.R10 = regs.R8;
		/* 821AE668h case   61:*/		return 0x821AE66C;
		  /* 821AE66Ch */ case   62:  		/* rlwinm R7, R11, 27, 29, 30 */
		/* 821AE66Ch case   62:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R7,regs.R11);
		/* 821AE66Ch case   62:*/		return 0x821AE670;
		  /* 821AE670h */ case   63:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821AE670h case   63:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821AE670h case   63:*/		return 0x821AE674;
		  /* 821AE674h */ case   64:  		/* rlwinm R6, R11, 29, 29, 30 */
		/* 821AE674h case   64:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R6,regs.R11);
		/* 821AE674h case   64:*/		return 0x821AE678;
		  /* 821AE678h */ case   65:  		/* srw R7, R8, R7 */
		/* 821AE678h case   65:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 821AE678h case   65:*/		return 0x821AE67C;
		  /* 821AE67Ch */ case   66:  		/* srw R6, R8, R6 */
		/* 821AE67Ch case   66:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 821AE67Ch case   66:*/		return 0x821AE680;
		  /* 821AE680h */ case   67:  		/* rlwimi R9, R7, 2, 28, 29 */
		/* 821AE680h case   67:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R7);
		/* 821AE680h case   67:*/		return 0x821AE684;
		  /* 821AE684h */ case   68:  		/* rlwinm R7, R6, 0, 30, 31 */
		/* 821AE684h case   68:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R6);
		/* 821AE684h case   68:*/		return 0x821AE688;
		  /* 821AE688h */ case   69:  		/* rlwinm R6, R11, 31, 29, 30 */
		/* 821AE688h case   69:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R6,regs.R11);
		/* 821AE688h case   69:*/		return 0x821AE68C;
		  /* 821AE68Ch */ case   70:  		/* or R9, R9, R7 */
		/* 821AE68Ch case   70:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821AE68Ch case   70:*/		return 0x821AE690;
		  /* 821AE690h */ case   71:  		/* rlwinm R11, R11, 1, 29, 30 */
		/* 821AE690h case   71:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R11,regs.R11);
		/* 821AE690h case   71:*/		return 0x821AE694;
		  /* 821AE694h */ case   72:  		/* srw R7, R8, R6 */
		/* 821AE694h case   72:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R6);
		/* 821AE694h case   72:*/		return 0x821AE698;
		  /* 821AE698h */ case   73:  		/* srw R11, R8, R11 */
		/* 821AE698h case   73:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821AE698h case   73:*/		return 0x821AE69C;
		  /* 821AE69Ch */ case   74:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821AE69Ch case   74:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821AE69Ch case   74:*/		return 0x821AE6A0;
		  /* 821AE6A0h */ case   75:  		/* ori R12, R12, 57375 */
		/* 821AE6A0h case   75:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE01F);
		/* 821AE6A0h case   75:*/		return 0x821AE6A4;
		  /* 821AE6A4h */ case   76:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 821AE6A4h case   76:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 821AE6A4h case   76:*/		return 0x821AE6A8;
		  /* 821AE6A8h */ case   77:  		/* and R10, R10, R12 */
		/* 821AE6A8h case   77:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 821AE6A8h case   77:*/		return 0x821AE6AC;
		  /* 821AE6ACh */ case   78:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821AE6ACh case   78:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821AE6ACh case   78:*/		return 0x821AE6B0;
		  /* 821AE6B0h */ case   79:  		/* mr R30, R3 */
		/* 821AE6B0h case   79:*/		regs.R30 = regs.R3;
		/* 821AE6B0h case   79:*/		return 0x821AE6B4;
		  /* 821AE6B4h */ case   80:  		/* or R11, R11, R10 */
		/* 821AE6B4h case   80:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE6B4h case   80:*/		return 0x821AE6B8;
		  /* 821AE6B8h */ case   81:  		/* rlwinm. R10, R11, 0, 27, 28 */
		/* 821AE6B8h case   81:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R11);
		/* 821AE6B8h case   81:*/		return 0x821AE6BC;
		  /* 821AE6BCh */ case   82:  		/* stw R11, <#[R3]> */
		/* 821AE6BCh case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821AE6BCh case   82:*/		return 0x821AE6C0;
		  /* 821AE6C0h */ case   83:  		/* bc 12, CR0_EQ, 16 */
		/* 821AE6C0h case   83:*/		if ( regs.CR[0].eq ) { return 0x821AE6D0;  }
		/* 821AE6C0h case   83:*/		return 0x821AE6C4;
		  /* 821AE6C4h */ case   84:  		/* mr R11, R31 */
		/* 821AE6C4h case   84:*/		regs.R11 = regs.R31;
		/* 821AE6C4h case   84:*/		return 0x821AE6C8;
		  /* 821AE6C8h */ case   85:  		/* mr R31, R3 */
		/* 821AE6C8h case   85:*/		regs.R31 = regs.R3;
		/* 821AE6C8h case   85:*/		return 0x821AE6CC;
		  /* 821AE6CCh */ case   86:  		/* mr R30, R11 */
		/* 821AE6CCh case   86:*/		regs.R30 = regs.R11;
		/* 821AE6CCh case   86:*/		return 0x821AE6D0;
	}
	return 0x821AE6D0;
} // Block from 821AE574h-821AE6D0h (87 instructions)

//////////////////////////////////////////////////////
// Block at 821AE6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE6D0);
		  /* 821AE6D0h */ case    0:  		/* li R4, 1 */
		/* 821AE6D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AE6D0h case    0:*/		return 0x821AE6D4;
		  /* 821AE6D4h */ case    1:  		/* fmr FR4, FR31 */
		/* 821AE6D4h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821AE6D4h case    1:*/		return 0x821AE6D8;
		  /* 821AE6D8h */ case    2:  		/* mr R3, R27 */
		/* 821AE6D8h case    2:*/		regs.R3 = regs.R27;
		/* 821AE6D8h case    2:*/		return 0x821AE6DC;
		  /* 821AE6DCh */ case    3:  		/* fmr FR3, FR31 */
		/* 821AE6DCh case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821AE6DCh case    3:*/		return 0x821AE6E0;
		  /* 821AE6E0h */ case    4:  		/* fmr FR2, FR31 */
		/* 821AE6E0h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821AE6E0h case    4:*/		return 0x821AE6E4;
		  /* 821AE6E4h */ case    5:  		/* fmr FR1, FR31 */
		/* 821AE6E4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821AE6E4h case    5:*/		return 0x821AE6E8;
		  /* 821AE6E8h */ case    6:  		/* bl 509040 */
		/* 821AE6E8h case    6:*/		regs.LR = 0x821AE6EC; return 0x8222AB58;
		/* 821AE6E8h case    6:*/		return 0x821AE6EC;
		  /* 821AE6ECh */ case    7:  		/* mr R29, R3 */
		/* 821AE6ECh case    7:*/		regs.R29 = regs.R3;
		/* 821AE6ECh case    7:*/		return 0x821AE6F0;
		  /* 821AE6F0h */ case    8:  		/* mr R4, R3 */
		/* 821AE6F0h case    8:*/		regs.R4 = regs.R3;
		/* 821AE6F0h case    8:*/		return 0x821AE6F4;
		  /* 821AE6F4h */ case    9:  		/* li R5, 0 */
		/* 821AE6F4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AE6F4h case    9:*/		return 0x821AE6F8;
		  /* 821AE6F8h */ case   10:  		/* mr R3, R27 */
		/* 821AE6F8h case   10:*/		regs.R3 = regs.R27;
		/* 821AE6F8h case   10:*/		return 0x821AE6FC;
		  /* 821AE6FCh */ case   11:  		/* bl -222700 */
		/* 821AE6FCh case   11:*/		regs.LR = 0x821AE700; return 0x82178110;
		/* 821AE6FCh case   11:*/		return 0x821AE700;
		  /* 821AE700h */ case   12:  		/* mr R8, R3 */
		/* 821AE700h case   12:*/		regs.R8 = regs.R3;
		/* 821AE700h case   12:*/		return 0x821AE704;
		  /* 821AE704h */ case   13:  		/* mr R7, R30 */
		/* 821AE704h case   13:*/		regs.R7 = regs.R30;
		/* 821AE704h case   13:*/		return 0x821AE708;
		  /* 821AE708h */ case   14:  		/* mr R6, R31 */
		/* 821AE708h case   14:*/		regs.R6 = regs.R31;
		/* 821AE708h case   14:*/		return 0x821AE70C;
		  /* 821AE70Ch */ case   15:  		/* mr R5, R26 */
		/* 821AE70Ch case   15:*/		regs.R5 = regs.R26;
		/* 821AE70Ch case   15:*/		return 0x821AE710;
		  /* 821AE710h */ case   16:  		/* li R4, 0 */
		/* 821AE710h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AE710h case   16:*/		return 0x821AE714;
		  /* 821AE714h */ case   17:  		/* mr R3, R27 */
		/* 821AE714h case   17:*/		regs.R3 = regs.R27;
		/* 821AE714h case   17:*/		return 0x821AE718;
		  /* 821AE718h */ case   18:  		/* bl -65680 */
		/* 821AE718h case   18:*/		regs.LR = 0x821AE71C; return 0x8219E688;
		/* 821AE718h case   18:*/		return 0x821AE71C;
		  /* 821AE71Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 821AE71Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AE71Ch case   19:*/		return 0x821AE720;
		  /* 821AE720h */ case   20:  		/* lwz R10, <#[R30]> */
		/* 821AE720h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821AE720h case   20:*/		return 0x821AE724;
		  /* 821AE724h */ case   21:  		/* mr R31, R3 */
		/* 821AE724h case   21:*/		regs.R31 = regs.R3;
		/* 821AE724h case   21:*/		return 0x821AE728;
		  /* 821AE728h */ case   22:  		/* or R11, R11, R10 */
		/* 821AE728h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AE728h case   22:*/		return 0x821AE72C;
		  /* 821AE72Ch */ case   23:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821AE72Ch case   23:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821AE72Ch case   23:*/		return 0x821AE730;
		  /* 821AE730h */ case   24:  		/* bc 12, CR0_EQ, 40 */
		/* 821AE730h case   24:*/		if ( regs.CR[0].eq ) { return 0x821AE758;  }
		/* 821AE730h case   24:*/		return 0x821AE734;
		  /* 821AE734h */ case   25:  		/* lwz R3, <#[R1 + 116]> */
		/* 821AE734h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE734h case   25:*/		return 0x821AE738;
		  /* 821AE738h */ case   26:  		/* bl -224288 */
		/* 821AE738h case   26:*/		regs.LR = 0x821AE73C; return 0x82177B18;
		/* 821AE738h case   26:*/		return 0x821AE73C;
		  /* 821AE73Ch */ case   27:  		/* mr R4, R3 */
		/* 821AE73Ch case   27:*/		regs.R4 = regs.R3;
		/* 821AE73Ch case   27:*/		return 0x821AE740;
		  /* 821AE740h */ case   28:  		/* mr R3, R27 */
		/* 821AE740h case   28:*/		regs.R3 = regs.R27;
		/* 821AE740h case   28:*/		return 0x821AE744;
		  /* 821AE744h */ case   29:  		/* li R5, 0 */
		/* 821AE744h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AE744h case   29:*/		return 0x821AE748;
		  /* 821AE748h */ case   30:  		/* bl -253944 */
		/* 821AE748h case   30:*/		regs.LR = 0x821AE74C; return 0x82170750;
		/* 821AE748h case   30:*/		return 0x821AE74C;
		  /* 821AE74Ch */ case   31:  		/* mr R4, R3 */
		/* 821AE74Ch case   31:*/		regs.R4 = regs.R3;
		/* 821AE74Ch case   31:*/		return 0x821AE750;
		  /* 821AE750h */ case   32:  		/* mr R3, R31 */
		/* 821AE750h case   32:*/		regs.R3 = regs.R31;
		/* 821AE750h case   32:*/		return 0x821AE754;
		  /* 821AE754h */ case   33:  		/* bl -222604 */
		/* 821AE754h case   33:*/		regs.LR = 0x821AE758; return 0x821781C8;
		/* 821AE754h case   33:*/		return 0x821AE758;
	}
	return 0x821AE758;
} // Block from 821AE6D0h-821AE758h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821AE758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE758);
		  /* 821AE758h */ case    0:  		/* mr R3, R29 */
		/* 821AE758h case    0:*/		regs.R3 = regs.R29;
		/* 821AE758h case    0:*/		return 0x821AE75C;
		  /* 821AE75Ch */ case    1:  		/* bl -99244 */
		/* 821AE75Ch case    1:*/		regs.LR = 0x821AE760; return 0x821963B0;
		/* 821AE75Ch case    1:*/		return 0x821AE760;
		  /* 821AE760h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821AE760h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AE760h case    2:*/		return 0x821AE764;
		  /* 821AE764h */ case    3:  		/* mr R4, R31 */
		/* 821AE764h case    3:*/		regs.R4 = regs.R31;
		/* 821AE764h case    3:*/		return 0x821AE768;
		  /* 821AE768h */ case    4:  		/* oris R11, R11, 256 */
		/* 821AE768h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AE768h case    4:*/		return 0x821AE76C;
		  /* 821AE76Ch */ case    5:  		/* mr R3, R27 */
		/* 821AE76Ch case    5:*/		regs.R3 = regs.R27;
		/* 821AE76Ch case    5:*/		return 0x821AE770;
		  /* 821AE770h */ case    6:  		/* stw R11, <#[R29 + 8]> */
		/* 821AE770h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AE770h case    6:*/		return 0x821AE774;
		  /* 821AE774h */ case    7:  		/* bl -70204 */
		/* 821AE774h case    7:*/		regs.LR = 0x821AE778; return 0x8219D538;
		/* 821AE774h case    7:*/		return 0x821AE778;
		  /* 821AE778h */ case    8:  		/* lwz R11, <#[R26 + 8]> */
		/* 821AE778h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE778h case    8:*/		return 0x821AE77C;
		  /* 821AE77Ch */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AE77Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AE77Ch case    9:*/		return 0x821AE780;
		  /* 821AE780h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821AE780h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AE790;  }
		/* 821AE780h case   10:*/		return 0x821AE784;
		  /* 821AE784h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AE784h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AE784h case   11:*/		return 0x821AE788;
		  /* 821AE788h */ case   12:  		/* ori R11, R11, 1 */
		/* 821AE788h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AE788h case   12:*/		return 0x821AE78C;
		  /* 821AE78Ch */ case   13:  		/* stw R11, <#[R31 + 8]> */
		/* 821AE78Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AE78Ch case   13:*/		return 0x821AE790;
	}
	return 0x821AE790;
} // Block from 821AE758h-821AE790h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AE790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE790);
		  /* 821AE790h */ case    0:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AE790h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AE790h case    0:*/		return 0x821AE794;
		  /* 821AE794h */ case    1:  		/* mr R6, R31 */
		/* 821AE794h case    1:*/		regs.R6 = regs.R31;
		/* 821AE794h case    1:*/		return 0x821AE798;
		  /* 821AE798h */ case    2:  		/* mr R4, R26 */
		/* 821AE798h case    2:*/		regs.R4 = regs.R26;
		/* 821AE798h case    2:*/		return 0x821AE79C;
		  /* 821AE79Ch */ case    3:  		/* mr R3, R27 */
		/* 821AE79Ch case    3:*/		regs.R3 = regs.R27;
		/* 821AE79Ch case    3:*/		return 0x821AE7A0;
		  /* 821AE7A0h */ case    4:  		/* bl -39040 */
		/* 821AE7A0h case    4:*/		regs.LR = 0x821AE7A4; return 0x821A4F20;
		/* 821AE7A0h case    4:*/		return 0x821AE7A4;
		  /* 821AE7A4h */ case    5:  		/* b -5848 */
		/* 821AE7A4h case    5:*/		return 0x821AD0CC;
		/* 821AE7A4h case    5:*/		return 0x821AE7A8;
	}
	return 0x821AE7A8;
} // Block from 821AE790h-821AE7A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE7A8);
		  /* 821AE7A8h */ case    0:  		/* lwz R27, <#[R1 + 1236]> */
		/* 821AE7A8h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE7A8h case    0:*/		return 0x821AE7AC;
		  /* 821AE7ACh */ case    1:  		/* lwz R26, <#[R1 + 1244]> */
		/* 821AE7ACh case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AE7ACh case    1:*/		return 0x821AE7B0;
	}
	return 0x821AE7B0;
} // Block from 821AE7A8h-821AE7B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AE7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE7B0);
		  /* 821AE7B0h */ case    0:  		/* lwz R10, <#[R1 + 124]> */
		/* 821AE7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE7B0h case    0:*/		return 0x821AE7B4;
		  /* 821AE7B4h */ case    1:  		/* li R9, 0 */
		/* 821AE7B4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AE7B4h case    1:*/		return 0x821AE7B8;
		  /* 821AE7B8h */ case    2:  		/* lwz R8, <#[R26 + 8]> */
		/* 821AE7B8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE7B8h case    2:*/		return 0x821AE7BC;
		  /* 821AE7BCh */ case    3:  		/* lwz R7, <#[R11 + 8]> */
		/* 821AE7BCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE7BCh case    3:*/		return 0x821AE7C0;
		  /* 821AE7C0h */ case    4:  		/* mr R31, R9 */
		/* 821AE7C0h case    4:*/		regs.R31 = regs.R9;
		/* 821AE7C0h case    4:*/		return 0x821AE7C4;
		  /* 821AE7C4h */ case    5:  		/* oris R6, R8, 1024 */
		/* 821AE7C4h case    5:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R8,0x400);
		/* 821AE7C4h case    5:*/		return 0x821AE7C8;
		  /* 821AE7C8h */ case    6:  		/* rlwinm R30, R8, 6, 31, 31 */
		/* 821AE7C8h case    6:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R30,regs.R8);
		/* 821AE7C8h case    6:*/		return 0x821AE7CC;
		  /* 821AE7CCh */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AE7CCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AE7CCh case    7:*/		return 0x821AE7D0;
		  /* 821AE7D0h */ case    8:  		/* rlwinm R29, R7, 6, 31, 31 */
		/* 821AE7D0h case    8:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R29,regs.R7);
		/* 821AE7D0h case    8:*/		return 0x821AE7D4;
		  /* 821AE7D4h */ case    9:  		/* stw R6, <#[R26 + 8]> */
		/* 821AE7D4h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE7D4h case    9:*/		return 0x821AE7D8;
		  /* 821AE7D8h */ case   10:  		/* rlwinm R28, R10, 6, 31, 31 */
		/* 821AE7D8h case   10:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R28,regs.R10);
		/* 821AE7D8h case   10:*/		return 0x821AE7DC;
		  /* 821AE7DCh */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AE7DCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE7DCh case   11:*/		return 0x821AE7E0;
		  /* 821AE7E0h */ case   12:  		/* oris R10, R10, 1024 */
		/* 821AE7E0h case   12:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 821AE7E0h case   12:*/		return 0x821AE7E4;
		  /* 821AE7E4h */ case   13:  		/* stw R10, <#[R11 + 8]> */
		/* 821AE7E4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE7E4h case   13:*/		return 0x821AE7E8;
		  /* 821AE7E8h */ case   14:  		/* lwz R11, <#[R1 + 124]> */
		/* 821AE7E8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE7E8h case   14:*/		return 0x821AE7EC;
		  /* 821AE7ECh */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AE7ECh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE7ECh case   15:*/		return 0x821AE7F0;
		  /* 821AE7F0h */ case   16:  		/* oris R10, R10, 1024 */
		/* 821AE7F0h case   16:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 821AE7F0h case   16:*/		return 0x821AE7F4;
		  /* 821AE7F4h */ case   17:  		/* stw R10, <#[R11 + 8]> */
		/* 821AE7F4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE7F4h case   17:*/		return 0x821AE7F8;
		  /* 821AE7F8h */ case   18:  		/* lwz R11, <#[R27 + 652]> */
		/* 821AE7F8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000028C) );
		/* 821AE7F8h case   18:*/		return 0x821AE7FC;
		  /* 821AE7FCh */ case   19:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AE7FCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE7FCh case   19:*/		return 0x821AE800;
		  /* 821AE800h */ case   20:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AE800h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AE800h case   20:*/		return 0x821AE804;
		  /* 821AE804h */ case   21:  		/* bc 4, CR0_EQ, 44 */
		/* 821AE804h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821AE830;  }
		/* 821AE804h case   21:*/		return 0x821AE808;
		  /* 821AE808h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 821AE808h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AE808h case   22:*/		return 0x821AE80C;
		  /* 821AE80Ch */ case   23:  		/* bc 12, CR0_EQ, 36 */
		/* 821AE80Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821AE830;  }
		/* 821AE80Ch case   23:*/		return 0x821AE810;
		  /* 821AE810h */ case   24:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821AE810h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821AE810h case   24:*/		return 0x821AE814;
		  /* 821AE814h */ case   25:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AE814h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE814h case   25:*/		return 0x821AE818;
		  /* 821AE818h */ case   26:  		/* add R31, R11, R31 */
		/* 821AE818h case   26:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821AE818h case   26:*/		return 0x821AE81C;
		  /* 821AE81Ch */ case   27:  		/* lwz R11, <#[R10 + 4]> */
		/* 821AE81Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821AE81Ch case   27:*/		return 0x821AE820;
		  /* 821AE820h */ case   28:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AE820h case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AE820h case   28:*/		return 0x821AE824;
		  /* 821AE824h */ case   29:  		/* bc 4, CR0_EQ, 12 */
		/* 821AE824h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821AE830;  }
		/* 821AE824h case   29:*/		return 0x821AE828;
		  /* 821AE828h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821AE828h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AE828h case   30:*/		return 0x821AE82C;
		  /* 821AE82Ch */ case   31:  		/* bc 4, CR6_EQ, -28 */
		/* 821AE82Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x821AE810;  }
		/* 821AE82Ch case   31:*/		return 0x821AE830;
	}
	return 0x821AE830;
} // Block from 821AE7B0h-821AE830h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821AE830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE830);
		  /* 821AE830h */ case    0:  		/* addi R8, R1, 772 */
		/* 821AE830h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x304);
		/* 821AE830h case    0:*/		return 0x821AE834;
		  /* 821AE834h */ case    1:  		/* stw R9, <#[R1 + 544]> */
		/* 821AE834h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000220) );
		/* 821AE834h case    1:*/		return 0x821AE838;
		  /* 821AE838h */ case    2:  		/* addi R11, R1, 548 */
		/* 821AE838h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x224);
		/* 821AE838h case    2:*/		return 0x821AE83C;
		  /* 821AE83Ch */ case    3:  		/* stw R9, <#[R1 + 768]> */
		/* 821AE83Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000300) );
		/* 821AE83Ch case    3:*/		return 0x821AE840;
		  /* 821AE840h */ case    4:  		/* addi R7, R1, 744 */
		/* 821AE840h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2E8);
		/* 821AE840h case    4:*/		return 0x821AE844;
		  /* 821AE844h */ case    5:  		/* lwz R10, <#[R1 + 200]> */
		/* 821AE844h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C8) );
		/* 821AE844h case    5:*/		return 0x821AE848;
		  /* 821AE848h */ case    6:  		/* addi R6, R1, 968 */
		/* 821AE848h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3C8);
		/* 821AE848h case    6:*/		return 0x821AE84C;
		  /* 821AE84Ch */ case    7:  		/* rlwinm. R5, R10, 0, 30, 28 */
		/* 821AE84Ch case    7:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R5,regs.R10);
		/* 821AE84Ch case    7:*/		return 0x821AE850;
		  /* 821AE850h */ case    8:  		/* stw R9, <#[R8]> */
		/* 821AE850h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821AE850h case    8:*/		return 0x821AE854;
		  /* 821AE854h */ case    9:  		/* stw R9, <#[R11]> */
		/* 821AE854h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AE854h case    9:*/		return 0x821AE858;
		  /* 821AE858h */ case   10:  		/* stw R9, <#[R8 + 4]> */
		/* 821AE858h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 821AE858h case   10:*/		return 0x821AE85C;
		  /* 821AE85Ch */ case   11:  		/* stw R9, <#[R11 + 4]> */
		/* 821AE85Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AE85Ch case   11:*/		return 0x821AE860;
		  /* 821AE860h */ case   12:  		/* stw R9, <#[R1 + 572]> */
		/* 821AE860h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000023C) );
		/* 821AE860h case   12:*/		return 0x821AE864;
		  /* 821AE864h */ case   13:  		/* stw R9, <#[R1 + 704]> */
		/* 821AE864h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002C0) );
		/* 821AE864h case   13:*/		return 0x821AE868;
		  /* 821AE868h */ case   14:  		/* stw R9, <#[R1 + 740]> */
		/* 821AE868h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002E4) );
		/* 821AE868h case   14:*/		return 0x821AE86C;
		  /* 821AE86Ch */ case   15:  		/* stw R9, <#[R1 + 796]> */
		/* 821AE86Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000031C) );
		/* 821AE86Ch case   15:*/		return 0x821AE870;
		  /* 821AE870h */ case   16:  		/* stw R9, <#[R1 + 928]> */
		/* 821AE870h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000003A0) );
		/* 821AE870h case   16:*/		return 0x821AE874;
		  /* 821AE874h */ case   17:  		/* stw R9, <#[R1 + 964]> */
		/* 821AE874h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000003C4) );
		/* 821AE874h case   17:*/		return 0x821AE878;
		  /* 821AE878h */ case   18:  		/* std R9, <#[R7]> */
		/* 821AE878h case   18:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821AE878h case   18:*/		return 0x821AE87C;
		  /* 821AE87Ch */ case   19:  		/* std R9, <#[R6]> */
		/* 821AE87Ch case   19:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 821AE87Ch case   19:*/		return 0x821AE880;
		  /* 821AE880h */ case   20:  		/* std R9, <#[R7 + 8]> */
		/* 821AE880h case   20:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R7 + 0x00000008) );
		/* 821AE880h case   20:*/		return 0x821AE884;
		  /* 821AE884h */ case   21:  		/* std R9, <#[R6 + 8]> */
		/* 821AE884h case   21:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 821AE884h case   21:*/		return 0x821AE888;
		  /* 821AE888h */ case   22:  		/* lwz R8, <#[R1 + 116]> */
		/* 821AE888h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE888h case   22:*/		return 0x821AE88C;
		  /* 821AE88Ch */ case   23:  		/* bc 4, CR0_EQ, 76 */
		/* 821AE88Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x821AE8D8;  }
		/* 821AE88Ch case   23:*/		return 0x821AE890;
		  /* 821AE890h */ case   24:  		/* lwz R11, <#[R8 + 8]> */
		/* 821AE890h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 821AE890h case   24:*/		return 0x821AE894;
		  /* 821AE894h */ case   25:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AE894h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AE894h case   25:*/		return 0x821AE898;
		  /* 821AE898h */ case   26:  		/* cmplwi CR6, R11, 128 */
		/* 821AE898h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821AE898h case   26:*/		return 0x821AE89C;
		  /* 821AE89Ch */ case   27:  		/* bc 4, CR6_EQ, 60 */
		/* 821AE89Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x821AE8D8;  }
		/* 821AE89Ch case   27:*/		return 0x821AE8A0;
		  /* 821AE8A0h */ case   28:  		/* addi R11, R1, 544 */
		/* 821AE8A0h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x220);
		/* 821AE8A0h case   28:*/		return 0x821AE8A4;
		  /* 821AE8A4h */ case   29:  		/* stw R26, <#[R1 + 84]> */
		/* 821AE8A4h case   29:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 821AE8A4h case   29:*/		return 0x821AE8A8;
		  /* 821AE8A8h */ case   30:  		/* mr R7, R10 */
		/* 821AE8A8h case   30:*/		regs.R7 = regs.R10;
		/* 821AE8A8h case   30:*/		return 0x821AE8AC;
		  /* 821AE8ACh */ case   31:  		/* lwz R10, <#[R1 + 176]> */
		/* 821AE8ACh case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AE8ACh case   31:*/		return 0x821AE8B0;
		  /* 821AE8B0h */ case   32:  		/* stw R11, <#[R1 + 92]> */
		/* 821AE8B0h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AE8B0h case   32:*/		return 0x821AE8B4;
		  /* 821AE8B4h */ case   33:  		/* mr R5, R8 */
		/* 821AE8B4h case   33:*/		regs.R5 = regs.R8;
		/* 821AE8B4h case   33:*/		return 0x821AE8B8;
		  /* 821AE8B8h */ case   34:  		/* mr R4, R26 */
		/* 821AE8B8h case   34:*/		regs.R4 = regs.R26;
		/* 821AE8B8h case   34:*/		return 0x821AE8BC;
		  /* 821AE8BCh */ case   35:  		/* lwz R9, <#[R1 + 192]> */
		/* 821AE8BCh case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000C0) );
		/* 821AE8BCh case   35:*/		return 0x821AE8C0;
		  /* 821AE8C0h */ case   36:  		/* mr R3, R27 */
		/* 821AE8C0h case   36:*/		regs.R3 = regs.R27;
		/* 821AE8C0h case   36:*/		return 0x821AE8C4;
		  /* 821AE8C4h */ case   37:  		/* lwz R8, <#[R1 + 124]> */
		/* 821AE8C4h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE8C4h case   37:*/		return 0x821AE8C8;
		  /* 821AE8C8h */ case   38:  		/* lwz R6, <#[R1 + 196]> */
		/* 821AE8C8h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000C4) );
		/* 821AE8C8h case   38:*/		return 0x821AE8CC;
		  /* 821AE8CCh */ case   39:  		/* bl -70372 */
		/* 821AE8CCh case   39:*/		regs.LR = 0x821AE8D0; return 0x8219D5E8;
		/* 821AE8CCh case   39:*/		return 0x821AE8D0;
		  /* 821AE8D0h */ case   40:  		/* lwz R10, <#[R1 + 200]> */
		/* 821AE8D0h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C8) );
		/* 821AE8D0h case   40:*/		return 0x821AE8D4;
		  /* 821AE8D4h */ case   41:  		/* lwz R8, <#[R1 + 116]> */
		/* 821AE8D4h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE8D4h case   41:*/		return 0x821AE8D8;
	}
	return 0x821AE8D8;
} // Block from 821AE830h-821AE8D8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821AE8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE8D8);
		  /* 821AE8D8h */ case    0:  		/* lwz R7, <#[R1 + 176]> */
		/* 821AE8D8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B0) );
		/* 821AE8D8h case    0:*/		return 0x821AE8DC;
		  /* 821AE8DCh */ case    1:  		/* rlwinm. R11, R7, 0, 30, 28 */
		/* 821AE8DCh case    1:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R7);
		/* 821AE8DCh case    1:*/		return 0x821AE8E0;
		  /* 821AE8E0h */ case    2:  		/* bc 4, CR0_EQ, 56 */
		/* 821AE8E0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AE918;  }
		/* 821AE8E0h case    2:*/		return 0x821AE8E4;
		  /* 821AE8E4h */ case    3:  		/* lwz R5, <#[R1 + 124]> */
		/* 821AE8E4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE8E4h case    3:*/		return 0x821AE8E8;
		  /* 821AE8E8h */ case    4:  		/* lwz R11, <#[R5 + 8]> */
		/* 821AE8E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821AE8E8h case    4:*/		return 0x821AE8EC;
		  /* 821AE8ECh */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AE8ECh case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AE8ECh case    5:*/		return 0x821AE8F0;
		  /* 821AE8F0h */ case    6:  		/* cmplwi CR6, R11, 128 */
		/* 821AE8F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821AE8F0h case    6:*/		return 0x821AE8F4;
		  /* 821AE8F4h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 821AE8F4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AE918;  }
		/* 821AE8F4h case    7:*/		return 0x821AE8F8;
		  /* 821AE8F8h */ case    8:  		/* addi R11, R1, 768 */
		/* 821AE8F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x300);
		/* 821AE8F8h case    8:*/		return 0x821AE8FC;
		  /* 821AE8FCh */ case    9:  		/* lwz R9, <#[R1 + 196]> */
		/* 821AE8FCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000C4) );
		/* 821AE8FCh case    9:*/		return 0x821AE900;
		  /* 821AE900h */ case   10:  		/* mr R4, R26 */
		/* 821AE900h case   10:*/		regs.R4 = regs.R26;
		/* 821AE900h case   10:*/		return 0x821AE904;
		  /* 821AE904h */ case   11:  		/* lwz R6, <#[R1 + 192]> */
		/* 821AE904h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000C0) );
		/* 821AE904h case   11:*/		return 0x821AE908;
		  /* 821AE908h */ case   12:  		/* stw R11, <#[R1 + 92]> */
		/* 821AE908h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AE908h case   12:*/		return 0x821AE90C;
		  /* 821AE90Ch */ case   13:  		/* mr R3, R27 */
		/* 821AE90Ch case   13:*/		regs.R3 = regs.R27;
		/* 821AE90Ch case   13:*/		return 0x821AE910;
		  /* 821AE910h */ case   14:  		/* stw R26, <#[R1 + 84]> */
		/* 821AE910h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 821AE910h case   14:*/		return 0x821AE914;
		  /* 821AE914h */ case   15:  		/* bl -70444 */
		/* 821AE914h case   15:*/		regs.LR = 0x821AE918; return 0x8219D5E8;
		/* 821AE914h case   15:*/		return 0x821AE918;
	}
	return 0x821AE918;
} // Block from 821AE8D8h-821AE918h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821AE918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE918);
		  /* 821AE918h */ case    0:  		/* addi R6, R1, 768 */
		/* 821AE918h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x300);
		/* 821AE918h case    0:*/		return 0x821AE91C;
		  /* 821AE91Ch */ case    1:  		/* addi R5, R1, 544 */
		/* 821AE91Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x220);
		/* 821AE91Ch case    1:*/		return 0x821AE920;
		  /* 821AE920h */ case    2:  		/* mr R4, R26 */
		/* 821AE920h case    2:*/		regs.R4 = regs.R26;
		/* 821AE920h case    2:*/		return 0x821AE924;
		  /* 821AE924h */ case    3:  		/* mr R3, R27 */
		/* 821AE924h case    3:*/		regs.R3 = regs.R27;
		/* 821AE924h case    3:*/		return 0x821AE928;
		  /* 821AE928h */ case    4:  		/* bl -41048 */
		/* 821AE928h case    4:*/		regs.LR = 0x821AE92C; return 0x821A48D0;
		/* 821AE928h case    4:*/		return 0x821AE92C;
		  /* 821AE92Ch */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AE92Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AE92Ch case    5:*/		return 0x821AE930;
		  /* 821AE930h */ case    6:  		/* bc 4, CR0_EQ, 1944 */
		/* 821AE930h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AF0C8;  }
		/* 821AE930h case    6:*/		return 0x821AE934;
		  /* 821AE934h */ case    7:  		/* addi R6, R1, 544 */
		/* 821AE934h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x220);
		/* 821AE934h case    7:*/		return 0x821AE938;
		  /* 821AE938h */ case    8:  		/* addi R5, R1, 768 */
		/* 821AE938h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x300);
		/* 821AE938h case    8:*/		return 0x821AE93C;
		  /* 821AE93Ch */ case    9:  		/* mr R4, R26 */
		/* 821AE93Ch case    9:*/		regs.R4 = regs.R26;
		/* 821AE93Ch case    9:*/		return 0x821AE940;
		  /* 821AE940h */ case   10:  		/* mr R3, R27 */
		/* 821AE940h case   10:*/		regs.R3 = regs.R27;
		/* 821AE940h case   10:*/		return 0x821AE944;
		  /* 821AE944h */ case   11:  		/* bl -41076 */
		/* 821AE944h case   11:*/		regs.LR = 0x821AE948; return 0x821A48D0;
		/* 821AE944h case   11:*/		return 0x821AE948;
		  /* 821AE948h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AE948h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AE948h case   12:*/		return 0x821AE94C;
		  /* 821AE94Ch */ case   13:  		/* bc 4, CR0_EQ, 2004 */
		/* 821AE94Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821AF120;  }
		/* 821AE94Ch case   13:*/		return 0x821AE950;
		  /* 821AE950h */ case   14:  		/* lwz R11, <#[R1 + 976]> */
		/* 821AE950h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000003D0) );
		/* 821AE950h case   14:*/		return 0x821AE954;
		  /* 821AE954h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821AE954h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AE954h case   15:*/		return 0x821AE958;
		  /* 821AE958h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE958h case   16:*/		if ( regs.CR[6].eq ) { return 0x821AE96C;  }
		/* 821AE958h case   16:*/		return 0x821AE95C;
		  /* 821AE95Ch */ case   17:  		/* mr R3, R27 */
		/* 821AE95Ch case   17:*/		regs.R3 = regs.R27;
		/* 821AE95Ch case   17:*/		return 0x821AE960;
		  /* 821AE960h */ case   18:  		/* lwz R5, <#[R1 + 980]> */
		/* 821AE960h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000003D4) );
		/* 821AE960h case   18:*/		return 0x821AE964;
		  /* 821AE964h */ case   19:  		/* lwz R4, <#[R1 + 768]> */
		/* 821AE964h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000300) );
		/* 821AE964h case   19:*/		return 0x821AE968;
		  /* 821AE968h */ case   20:  		/* bl 518080 */
		/* 821AE968h case   20:*/		regs.LR = 0x821AE96C; return 0x8222D128;
		/* 821AE968h case   20:*/		return 0x821AE96C;
	}
	return 0x821AE96C;
} // Block from 821AE918h-821AE96Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821AE96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE96C);
		  /* 821AE96Ch */ case    0:  		/* lwz R11, <#[R1 + 752]> */
		/* 821AE96Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002F0) );
		/* 821AE96Ch case    0:*/		return 0x821AE970;
		  /* 821AE970h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821AE970h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AE970h case    1:*/		return 0x821AE974;
		  /* 821AE974h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821AE974h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AE988;  }
		/* 821AE974h case    2:*/		return 0x821AE978;
		  /* 821AE978h */ case    3:  		/* mr R3, R27 */
		/* 821AE978h case    3:*/		regs.R3 = regs.R27;
		/* 821AE978h case    3:*/		return 0x821AE97C;
		  /* 821AE97Ch */ case    4:  		/* lwz R5, <#[R1 + 756]> */
		/* 821AE97Ch case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002F4) );
		/* 821AE97Ch case    4:*/		return 0x821AE980;
		  /* 821AE980h */ case    5:  		/* lwz R4, <#[R1 + 544]> */
		/* 821AE980h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000220) );
		/* 821AE980h case    5:*/		return 0x821AE984;
		  /* 821AE984h */ case    6:  		/* bl 518052 */
		/* 821AE984h case    6:*/		regs.LR = 0x821AE988; return 0x8222D128;
		/* 821AE984h case    6:*/		return 0x821AE988;
	}
	return 0x821AE988;
} // Block from 821AE96Ch-821AE988h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AE988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE988);
		  /* 821AE988h */ case    0:  		/* li R6, 0 */
		/* 821AE988h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AE988h case    0:*/		return 0x821AE98C;
		  /* 821AE98Ch */ case    1:  		/* li R5, 1 */
		/* 821AE98Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821AE98Ch case    1:*/		return 0x821AE990;
		  /* 821AE990h */ case    2:  		/* mr R4, R31 */
		/* 821AE990h case    2:*/		regs.R4 = regs.R31;
		/* 821AE990h case    2:*/		return 0x821AE994;
		  /* 821AE994h */ case    3:  		/* mr R3, R27 */
		/* 821AE994h case    3:*/		regs.R3 = regs.R27;
		/* 821AE994h case    3:*/		return 0x821AE998;
		  /* 821AE998h */ case    4:  		/* bl -43800 */
		/* 821AE998h case    4:*/		regs.LR = 0x821AE99C; return 0x821A3E80;
		/* 821AE998h case    4:*/		return 0x821AE99C;
		  /* 821AE99Ch */ case    5:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821AE99Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821AE99Ch case    5:*/		return 0x821AE9A0;
		  /* 821AE9A0h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821AE9A0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AE9B0;  }
		/* 821AE9A0h case    6:*/		return 0x821AE9A4;
		  /* 821AE9A4h */ case    7:  		/* lwz R11, <#[R26 + 8]> */
		/* 821AE9A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE9A4h case    7:*/		return 0x821AE9A8;
		  /* 821AE9A8h */ case    8:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AE9A8h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AE9A8h case    8:*/		return 0x821AE9AC;
		  /* 821AE9ACh */ case    9:  		/* stw R11, <#[R26 + 8]> */
		/* 821AE9ACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AE9ACh case    9:*/		return 0x821AE9B0;
	}
	return 0x821AE9B0;
} // Block from 821AE988h-821AE9B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821AE9B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE9B0);
		  /* 821AE9B0h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821AE9B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821AE9B0h case    0:*/		return 0x821AE9B4;
		  /* 821AE9B4h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AE9B4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AE9C8;  }
		/* 821AE9B4h case    1:*/		return 0x821AE9B8;
		  /* 821AE9B8h */ case    2:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AE9B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AE9B8h case    2:*/		return 0x821AE9BC;
		  /* 821AE9BCh */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AE9BCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE9BCh case    3:*/		return 0x821AE9C0;
		  /* 821AE9C0h */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AE9C0h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AE9C0h case    4:*/		return 0x821AE9C4;
		  /* 821AE9C4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AE9C4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE9C4h case    5:*/		return 0x821AE9C8;
	}
	return 0x821AE9C8;
} // Block from 821AE9B0h-821AE9C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE9C8);
		  /* 821AE9C8h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821AE9C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821AE9C8h case    0:*/		return 0x821AE9CC;
		  /* 821AE9CCh */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AE9CCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AE9E0;  }
		/* 821AE9CCh case    1:*/		return 0x821AE9D0;
		  /* 821AE9D0h */ case    2:  		/* lwz R11, <#[R1 + 124]> */
		/* 821AE9D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AE9D0h case    2:*/		return 0x821AE9D4;
		  /* 821AE9D4h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AE9D4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE9D4h case    3:*/		return 0x821AE9D8;
		  /* 821AE9D8h */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AE9D8h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AE9D8h case    4:*/		return 0x821AE9DC;
		  /* 821AE9DCh */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AE9DCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AE9DCh case    5:*/		return 0x821AE9E0;
	}
	return 0x821AE9E0;
} // Block from 821AE9C8h-821AE9E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AE9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE9E0);
		  /* 821AE9E0h */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 821AE9E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821AE9E0h case    0:*/		return 0x821AE9E4;
		  /* 821AE9E4h */ case    1:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AE9E4h case    1:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AE9E4h case    1:*/		return 0x821AE9E8;
		  /* 821AE9E8h */ case    2:  		/* addi R10, R11, -1 */
		/* 821AE9E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821AE9E8h case    2:*/		return 0x821AE9EC;
		  /* 821AE9ECh */ case    3:  		/* lwz R16, <#[R1 + 1236]> */
		/* 821AE9ECh case    3:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AE9ECh case    3:*/		return 0x821AE9F0;
		  /* 821AE9F0h */ case    4:  		/* andc R10, R11, R10 */
		/* 821AE9F0h case    4:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821AE9F0h case    4:*/		return 0x821AE9F4;
		  /* 821AE9F4h */ case    5:  		/* subf R11, R10, R11 */
		/* 821AE9F4h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AE9F4h case    5:*/		return 0x821AE9F8;
		  /* 821AE9F8h */ case    6:  		/* b -5384 */
		/* 821AE9F8h case    6:*/		return 0x821AD4F0;
		/* 821AE9F8h case    6:*/		return 0x821AE9FC;
	}
	return 0x821AE9FC;
} // Block from 821AE9E0h-821AE9FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AE9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AE9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AE9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AE9FC);
		  /* 821AE9FCh */ case    0:  		/* mr R5, R18 */
		/* 821AE9FCh case    0:*/		regs.R5 = regs.R18;
		/* 821AE9FCh case    0:*/		return 0x821AEA00;
		  /* 821AEA00h */ case    1:  		/* lwz R7, <#[R1 + 172]> */
		/* 821AEA00h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000AC) );
		/* 821AEA00h case    1:*/		return 0x821AEA04;
		  /* 821AEA04h */ case    2:  		/* li R4, 0 */
		/* 821AEA04h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AEA04h case    2:*/		return 0x821AEA08;
		  /* 821AEA08h */ case    3:  		/* lwz R6, <#[R1 + 256]> */
		/* 821AEA08h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000100) );
		/* 821AEA08h case    3:*/		return 0x821AEA0C;
		  /* 821AEA0Ch */ case    4:  		/* mr R3, R16 */
		/* 821AEA0Ch case    4:*/		regs.R3 = regs.R16;
		/* 821AEA0Ch case    4:*/		return 0x821AEA10;
		  /* 821AEA10h */ case    5:  		/* bl -66840 */
		/* 821AEA10h case    5:*/		regs.LR = 0x821AEA14; return 0x8219E4F8;
		/* 821AEA10h case    5:*/		return 0x821AEA14;
		  /* 821AEA14h */ case    6:  		/* lwz R4, <#[R1 + 488]> */
		/* 821AEA14h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001E8) );
		/* 821AEA14h case    6:*/		return 0x821AEA18;
		  /* 821AEA18h */ case    7:  		/* mr R31, R3 */
		/* 821AEA18h case    7:*/		regs.R31 = regs.R3;
		/* 821AEA18h case    7:*/		return 0x821AEA1C;
		  /* 821AEA1Ch */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 821AEA1Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEA1Ch case    8:*/		return 0x821AEA20;
		  /* 821AEA20h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEA20h case    9:*/		if ( regs.CR[6].eq ) { return 0x821AEA3C;  }
		/* 821AEA20h case    9:*/		return 0x821AEA24;
		  /* 821AEA24h */ case   10:  		/* li R5, 0 */
		/* 821AEA24h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEA24h case   10:*/		return 0x821AEA28;
		  /* 821AEA28h */ case   11:  		/* mr R3, R16 */
		/* 821AEA28h case   11:*/		regs.R3 = regs.R16;
		/* 821AEA28h case   11:*/		return 0x821AEA2C;
		  /* 821AEA2Ch */ case   12:  		/* bl -254684 */
		/* 821AEA2Ch case   12:*/		regs.LR = 0x821AEA30; return 0x82170750;
		/* 821AEA2Ch case   12:*/		return 0x821AEA30;
		  /* 821AEA30h */ case   13:  		/* mr R4, R3 */
		/* 821AEA30h case   13:*/		regs.R4 = regs.R3;
		/* 821AEA30h case   13:*/		return 0x821AEA34;
		  /* 821AEA34h */ case   14:  		/* mr R3, R31 */
		/* 821AEA34h case   14:*/		regs.R3 = regs.R31;
		/* 821AEA34h case   14:*/		return 0x821AEA38;
		  /* 821AEA38h */ case   15:  		/* bl -223344 */
		/* 821AEA38h case   15:*/		regs.LR = 0x821AEA3C; return 0x821781C8;
		/* 821AEA38h case   15:*/		return 0x821AEA3C;
	}
	return 0x821AEA3C;
} // Block from 821AE9FCh-821AEA3Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821AEA3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEA3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEA3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEA3C);
		  /* 821AEA3Ch */ case    0:  		/* lwz R4, <#[R1 + 344]> */
		/* 821AEA3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000158) );
		/* 821AEA3Ch case    0:*/		return 0x821AEA40;
		  /* 821AEA40h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AEA40h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEA40h case    1:*/		return 0x821AEA44;
		  /* 821AEA44h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEA44h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AEA60;  }
		/* 821AEA44h case    2:*/		return 0x821AEA48;
		  /* 821AEA48h */ case    3:  		/* li R5, 0 */
		/* 821AEA48h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEA48h case    3:*/		return 0x821AEA4C;
		  /* 821AEA4Ch */ case    4:  		/* mr R3, R16 */
		/* 821AEA4Ch case    4:*/		regs.R3 = regs.R16;
		/* 821AEA4Ch case    4:*/		return 0x821AEA50;
		  /* 821AEA50h */ case    5:  		/* bl -254720 */
		/* 821AEA50h case    5:*/		regs.LR = 0x821AEA54; return 0x82170750;
		/* 821AEA50h case    5:*/		return 0x821AEA54;
		  /* 821AEA54h */ case    6:  		/* mr R4, R3 */
		/* 821AEA54h case    6:*/		regs.R4 = regs.R3;
		/* 821AEA54h case    6:*/		return 0x821AEA58;
		  /* 821AEA58h */ case    7:  		/* mr R3, R31 */
		/* 821AEA58h case    7:*/		regs.R3 = regs.R31;
		/* 821AEA58h case    7:*/		return 0x821AEA5C;
		  /* 821AEA5Ch */ case    8:  		/* bl -223380 */
		/* 821AEA5Ch case    8:*/		regs.LR = 0x821AEA60; return 0x821781C8;
		/* 821AEA5Ch case    8:*/		return 0x821AEA60;
	}
	return 0x821AEA60;
} // Block from 821AEA3Ch-821AEA60h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AEA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEA60);
		  /* 821AEA60h */ case    0:  		/* lwz R8, <#[R1 + 116]> */
		/* 821AEA60h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 821AEA60h case    0:*/		return 0x821AEA64;
		  /* 821AEA64h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AEA64h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEA64h case    1:*/		return 0x821AEA68;
		  /* 821AEA68h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AEA68h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AEA68h case    2:*/		return 0x821AEA6C;
		  /* 821AEA6Ch */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AEA6Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821AEAD4;  }
		/* 821AEA6Ch case    3:*/		return 0x821AEA70;
		  /* 821AEA70h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AEA70h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEA70h case    4:*/		return 0x821AEA74;
		  /* 821AEA74h */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AEA74h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AEA74h case    5:*/		return 0x821AEA78;
		  /* 821AEA78h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AEA78h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AEAC0;  }
		/* 821AEA78h case    6:*/		return 0x821AEA7C;
		  /* 821AEA7Ch */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AEA7Ch case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AEA7Ch case    7:*/		return 0x821AEA80;
		  /* 821AEA80h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AEA80h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AEA8C;  }
		/* 821AEA80h case    8:*/		return 0x821AEA84;
		  /* 821AEA84h */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AEA84h case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AEA84h case    9:*/		return 0x821AEA88;
		  /* 821AEA88h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AEA88h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AEAC0;  }
		/* 821AEA88h case   10:*/		return 0x821AEA8C;
	}
	return 0x821AEA8C;
} // Block from 821AEA60h-821AEA8Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AEA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEA8C);
		  /* 821AEA8Ch */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AEA8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEA8Ch case    0:*/		return 0x821AEA90;
		  /* 821AEA90h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AEA90h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEA90h case    1:*/		return 0x821AEA94;
		  /* 821AEA94h */ case    2:  		/* b 12 */
		/* 821AEA94h case    2:*/		return 0x821AEAA0;
		/* 821AEA94h case    2:*/		return 0x821AEA98;
		  /* 821AEA98h */ case    3:  		/* addi R10, R9, 4 */
		/* 821AEA98h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AEA98h case    3:*/		return 0x821AEA9C;
		  /* 821AEA9Ch */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AEA9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AEA9Ch case    4:*/		return 0x821AEAA0;
	}
	return 0x821AEAA0;
} // Block from 821AEA8Ch-821AEAA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEAA0);
		  /* 821AEAA0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AEAA0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AEAA0h case    0:*/		return 0x821AEAA4;
		  /* 821AEAA4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AEAA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AEA98;  }
		/* 821AEAA4h case    1:*/		return 0x821AEAA8;
		  /* 821AEAA8h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AEAA8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEAA8h case    2:*/		return 0x821AEAAC;
		  /* 821AEAACh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AEAACh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEAACh case    3:*/		return 0x821AEAB0;
		  /* 821AEAB0h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AEAB0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEAB0h case    4:*/		return 0x821AEAB4;
		  /* 821AEAB4h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AEAB4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEAB4h case    5:*/		return 0x821AEAB8;
		  /* 821AEAB8h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AEAB8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEAB8h case    6:*/		return 0x821AEABC;
		  /* 821AEABCh */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AEABCh case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEABCh case    7:*/		return 0x821AEAC0;
	}
	return 0x821AEAC0;
} // Block from 821AEAA0h-821AEAC0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AEAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEAC0);
		  /* 821AEAC0h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AEAC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEAC0h case    0:*/		return 0x821AEAC4;
		  /* 821AEAC4h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AEAC4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AEAC4h case    1:*/		return 0x821AEAC8;
		  /* 821AEAC8h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AEAC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AEA64;  }
		/* 821AEAC8h case    2:*/		return 0x821AEACC;
		  /* 821AEACCh */ case    3:  		/* addi R8, R11, 4 */
		/* 821AEACCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AEACCh case    3:*/		return 0x821AEAD0;
		  /* 821AEAD0h */ case    4:  		/* b -108 */
		/* 821AEAD0h case    4:*/		return 0x821AEA64;
		/* 821AEAD0h case    4:*/		return 0x821AEAD4;
	}
	return 0x821AEAD4;
} // Block from 821AEAC0h-821AEAD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEAD4);
		  /* 821AEAD4h */ case    0:  		/* lwz R8, <#[R1 + 124]> */
		/* 821AEAD4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AEAD4h case    0:*/		return 0x821AEAD8;
		  /* 821AEAD8h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AEAD8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEAD8h case    1:*/		return 0x821AEADC;
		  /* 821AEADCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AEADCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AEADCh case    2:*/		return 0x821AEAE0;
		  /* 821AEAE0h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AEAE0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AEB48;  }
		/* 821AEAE0h case    3:*/		return 0x821AEAE4;
		  /* 821AEAE4h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AEAE4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEAE4h case    4:*/		return 0x821AEAE8;
		  /* 821AEAE8h */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AEAE8h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AEAE8h case    5:*/		return 0x821AEAEC;
		  /* 821AEAECh */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AEAECh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AEB34;  }
		/* 821AEAECh case    6:*/		return 0x821AEAF0;
		  /* 821AEAF0h */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AEAF0h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AEAF0h case    7:*/		return 0x821AEAF4;
		  /* 821AEAF4h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AEAF4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AEB00;  }
		/* 821AEAF4h case    8:*/		return 0x821AEAF8;
		  /* 821AEAF8h */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AEAF8h case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AEAF8h case    9:*/		return 0x821AEAFC;
		  /* 821AEAFCh */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AEAFCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821AEB34;  }
		/* 821AEAFCh case   10:*/		return 0x821AEB00;
	}
	return 0x821AEB00;
} // Block from 821AEAD4h-821AEB00h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB00);
		  /* 821AEB00h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AEB00h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEB00h case    0:*/		return 0x821AEB04;
		  /* 821AEB04h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AEB04h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEB04h case    1:*/		return 0x821AEB08;
		  /* 821AEB08h */ case    2:  		/* b 12 */
		/* 821AEB08h case    2:*/		return 0x821AEB14;
		/* 821AEB08h case    2:*/		return 0x821AEB0C;
		  /* 821AEB0Ch */ case    3:  		/* addi R10, R9, 4 */
		/* 821AEB0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AEB0Ch case    3:*/		return 0x821AEB10;
		  /* 821AEB10h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AEB10h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AEB10h case    4:*/		return 0x821AEB14;
	}
	return 0x821AEB14;
} // Block from 821AEB00h-821AEB14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB14);
		  /* 821AEB14h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AEB14h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AEB14h case    0:*/		return 0x821AEB18;
		  /* 821AEB18h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AEB18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AEB0C;  }
		/* 821AEB18h case    1:*/		return 0x821AEB1C;
		  /* 821AEB1Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AEB1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEB1Ch case    2:*/		return 0x821AEB20;
		  /* 821AEB20h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AEB20h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEB20h case    3:*/		return 0x821AEB24;
		  /* 821AEB24h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AEB24h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEB24h case    4:*/		return 0x821AEB28;
		  /* 821AEB28h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AEB28h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEB28h case    5:*/		return 0x821AEB2C;
		  /* 821AEB2Ch */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AEB2Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEB2Ch case    6:*/		return 0x821AEB30;
		  /* 821AEB30h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AEB30h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEB30h case    7:*/		return 0x821AEB34;
	}
	return 0x821AEB34;
} // Block from 821AEB14h-821AEB34h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB34);
		  /* 821AEB34h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AEB34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEB34h case    0:*/		return 0x821AEB38;
		  /* 821AEB38h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AEB38h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AEB38h case    1:*/		return 0x821AEB3C;
		  /* 821AEB3Ch */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AEB3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AEAD8;  }
		/* 821AEB3Ch case    2:*/		return 0x821AEB40;
		  /* 821AEB40h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AEB40h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AEB40h case    3:*/		return 0x821AEB44;
		  /* 821AEB44h */ case    4:  		/* b -108 */
		/* 821AEB44h case    4:*/		return 0x821AEAD8;
		/* 821AEB44h case    4:*/		return 0x821AEB48;
	}
	return 0x821AEB48;
} // Block from 821AEB34h-821AEB48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB48);
		  /* 821AEB48h */ case    0:  		/* lwz R11, <#[R1 + 480]> */
		/* 821AEB48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001E0) );
		/* 821AEB48h case    0:*/		return 0x821AEB4C;
		  /* 821AEB4Ch */ case    1:  		/* rlwinm. R5, R11, 17, 29, 31 */
		/* 821AEB4Ch case    1:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R5,regs.R11);
		/* 821AEB4Ch case    1:*/		return 0x821AEB50;
		  /* 821AEB50h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821AEB50h case    2:*/		if ( regs.CR[0].eq ) { return 0x821AEB60;  }
		/* 821AEB50h case    2:*/		return 0x821AEB54;
		  /* 821AEB54h */ case    3:  		/* mr R4, R31 */
		/* 821AEB54h case    3:*/		regs.R4 = regs.R31;
		/* 821AEB54h case    3:*/		return 0x821AEB58;
		  /* 821AEB58h */ case    4:  		/* mr R3, R16 */
		/* 821AEB58h case    4:*/		regs.R3 = regs.R16;
		/* 821AEB58h case    4:*/		return 0x821AEB5C;
		  /* 821AEB5Ch */ case    5:  		/* bl -71612 */
		/* 821AEB5Ch case    5:*/		regs.LR = 0x821AEB60; return 0x8219D3A0;
		/* 821AEB5Ch case    5:*/		return 0x821AEB60;
	}
	return 0x821AEB60;
} // Block from 821AEB48h-821AEB60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB60);
		  /* 821AEB60h */ case    0:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AEB60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEB60h case    0:*/		return 0x821AEB64;
		  /* 821AEB64h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AEB64h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AEB64h case    1:*/		return 0x821AEB68;
		  /* 821AEB68h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821AEB68h case    2:*/		if ( regs.CR[0].eq ) { return 0x821AEB78;  }
		/* 821AEB68h case    2:*/		return 0x821AEB6C;
		  /* 821AEB6Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AEB6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AEB6Ch case    3:*/		return 0x821AEB70;
		  /* 821AEB70h */ case    4:  		/* ori R11, R11, 1 */
		/* 821AEB70h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AEB70h case    4:*/		return 0x821AEB74;
		  /* 821AEB74h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821AEB74h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AEB74h case    5:*/		return 0x821AEB78;
	}
	return 0x821AEB78;
} // Block from 821AEB60h-821AEB78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEB78);
		  /* 821AEB78h */ case    0:  		/* mr R6, R31 */
		/* 821AEB78h case    0:*/		regs.R6 = regs.R31;
		/* 821AEB78h case    0:*/		return 0x821AEB7C;
		  /* 821AEB7Ch */ case    1:  		/* mr R5, R29 */
		/* 821AEB7Ch case    1:*/		regs.R5 = regs.R29;
		/* 821AEB7Ch case    1:*/		return 0x821AEB80;
		  /* 821AEB80h */ case    2:  		/* mr R4, R18 */
		/* 821AEB80h case    2:*/		regs.R4 = regs.R18;
		/* 821AEB80h case    2:*/		return 0x821AEB84;
		  /* 821AEB84h */ case    3:  		/* mr R3, R16 */
		/* 821AEB84h case    3:*/		regs.R3 = regs.R16;
		/* 821AEB84h case    3:*/		return 0x821AEB88;
		  /* 821AEB88h */ case    4:  		/* bl -40040 */
		/* 821AEB88h case    4:*/		regs.LR = 0x821AEB8C; return 0x821A4F20;
		/* 821AEB88h case    4:*/		return 0x821AEB8C;
		  /* 821AEB8Ch */ case    5:  		/* mr R4, R18 */
		/* 821AEB8Ch case    5:*/		regs.R4 = regs.R18;
		/* 821AEB8Ch case    5:*/		return 0x821AEB90;
		  /* 821AEB90h */ case    6:  		/* mr R3, R16 */
		/* 821AEB90h case    6:*/		regs.R3 = regs.R16;
		/* 821AEB90h case    6:*/		return 0x821AEB94;
		  /* 821AEB94h */ case    7:  		/* bl -57564 */
		/* 821AEB94h case    7:*/		regs.LR = 0x821AEB98; return 0x821A0AB8;
		/* 821AEB94h case    7:*/		return 0x821AEB98;
		  /* 821AEB98h */ case    8:  		/* mr R3, R16 */
		/* 821AEB98h case    8:*/		regs.R3 = regs.R16;
		/* 821AEB98h case    8:*/		return 0x821AEB9C;
		  /* 821AEB9Ch */ case    9:  		/* lwz R4, <#[R1 + 116]> */
		/* 821AEB9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 821AEB9Ch case    9:*/		return 0x821AEBA0;
		  /* 821AEBA0h */ case   10:  		/* bl -57576 */
		/* 821AEBA0h case   10:*/		regs.LR = 0x821AEBA4; return 0x821A0AB8;
		/* 821AEBA0h case   10:*/		return 0x821AEBA4;
		  /* 821AEBA4h */ case   11:  		/* lwz R4, <#[R1 + 124]> */
		/* 821AEBA4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AEBA4h case   11:*/		return 0x821AEBA8;
		  /* 821AEBA8h */ case   12:  		/* mr R3, R16 */
		/* 821AEBA8h case   12:*/		regs.R3 = regs.R16;
		/* 821AEBA8h case   12:*/		return 0x821AEBAC;
		  /* 821AEBACh */ case   13:  		/* bl -57588 */
		/* 821AEBACh case   13:*/		regs.LR = 0x821AEBB0; return 0x821A0AB8;
		/* 821AEBACh case   13:*/		return 0x821AEBB0;
		  /* 821AEBB0h */ case   14:  		/* b -6884 */
		/* 821AEBB0h case   14:*/		return 0x821AD0CC;
		/* 821AEBB0h case   14:*/		return 0x821AEBB4;
	}
	return 0x821AEBB4;
} // Block from 821AEB78h-821AEBB4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AEBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEBB4);
		  /* 821AEBB4h */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821AEBB4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821AEBB4h case    0:*/		return 0x821AEBB8;
		  /* 821AEBB8h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AEBB8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AEBC8;  }
		/* 821AEBB8h case    1:*/		return 0x821AEBBC;
		  /* 821AEBBCh */ case    2:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AEBBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEBBCh case    2:*/		return 0x821AEBC0;
		  /* 821AEBC0h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AEBC0h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AEBC0h case    3:*/		return 0x821AEBC4;
		  /* 821AEBC4h */ case    4:  		/* stw R11, <#[R18 + 8]> */
		/* 821AEBC4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEBC4h case    4:*/		return 0x821AEBC8;
	}
	return 0x821AEBC8;
} // Block from 821AEBB4h-821AEBC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEBC8);
		  /* 821AEBC8h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821AEBC8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821AEBC8h case    0:*/		return 0x821AEBCC;
		  /* 821AEBCCh */ case    1:  		/* bc 4, CR0_EQ, -16868 */
		/* 821AEBCCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E8;  }
		/* 821AEBCCh case    1:*/		return 0x821AEBD0;
		  /* 821AEBD0h */ case    2:  		/* lwz R11, <#[R19 + 8]> */
		/* 821AEBD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AEBD0h case    2:*/		return 0x821AEBD4;
		  /* 821AEBD4h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AEBD4h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AEBD4h case    3:*/		return 0x821AEBD8;
		  /* 821AEBD8h */ case    4:  		/* stw R11, <#[R19 + 8]> */
		/* 821AEBD8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AEBD8h case    4:*/		return 0x821AEBDC;
		  /* 821AEBDCh */ case    5:  		/* b -16884 */
		/* 821AEBDCh case    5:*/		return 0x821AA9E8;
		/* 821AEBDCh case    5:*/		return 0x821AEBE0;
	}
	return 0x821AEBE0;
} // Block from 821AEBC8h-821AEBE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEBE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEBE0);
		  /* 821AEBE0h */ case    0:  		/* lwz R7, <#[R1 + 140]> */
		/* 821AEBE0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000008C) );
		/* 821AEBE0h case    0:*/		return 0x821AEBE4;
		  /* 821AEBE4h */ case    1:  		/* cmplwi CR6, R14, 3 */
		/* 821AEBE4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000003);
		/* 821AEBE4h case    1:*/		return 0x821AEBE8;
		  /* 821AEBE8h */ case    2:  		/* lwz R6, <#[R1 + 144]> */
		/* 821AEBE8h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 821AEBE8h case    2:*/		return 0x821AEBEC;
		  /* 821AEBECh */ case    3:  		/* mr R5, R18 */
		/* 821AEBECh case    3:*/		regs.R5 = regs.R18;
		/* 821AEBECh case    3:*/		return 0x821AEBF0;
		  /* 821AEBF0h */ case    4:  		/* li R4, 0 */
		/* 821AEBF0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AEBF0h case    4:*/		return 0x821AEBF4;
		  /* 821AEBF4h */ case    5:  		/* mr R3, R16 */
		/* 821AEBF4h case    5:*/		regs.R3 = regs.R16;
		/* 821AEBF4h case    5:*/		return 0x821AEBF8;
		  /* 821AEBF8h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821AEBF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821AEC04;  }
		/* 821AEBF8h case    6:*/		return 0x821AEBFC;
		  /* 821AEBFCh */ case    7:  		/* bl -67332 */
		/* 821AEBFCh case    7:*/		regs.LR = 0x821AEC00; return 0x8219E4F8;
		/* 821AEBFCh case    7:*/		return 0x821AEC00;
		  /* 821AEC00h */ case    8:  		/* b 8 */
		/* 821AEC00h case    8:*/		return 0x821AEC08;
		/* 821AEC00h case    8:*/		return 0x821AEC04;
	}
	return 0x821AEC04;
} // Block from 821AEBE0h-821AEC04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC04);
		  /* 821AEC04h */ case    0:  		/* bl -67140 */
		/* 821AEC04h case    0:*/		regs.LR = 0x821AEC08; return 0x8219E5C0;
		/* 821AEC04h case    0:*/		return 0x821AEC08;
	}
	return 0x821AEC08;
} // Block from 821AEC04h-821AEC08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC08);
		  /* 821AEC08h */ case    0:  		/* lwz R4, <#[R1 + 216]> */
		/* 821AEC08h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D8) );
		/* 821AEC08h case    0:*/		return 0x821AEC0C;
		  /* 821AEC0Ch */ case    1:  		/* mr R31, R3 */
		/* 821AEC0Ch case    1:*/		regs.R31 = regs.R3;
		/* 821AEC0Ch case    1:*/		return 0x821AEC10;
		  /* 821AEC10h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821AEC10h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEC10h case    2:*/		return 0x821AEC14;
		  /* 821AEC14h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEC14h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AEC30;  }
		/* 821AEC14h case    3:*/		return 0x821AEC18;
		  /* 821AEC18h */ case    4:  		/* li R5, 0 */
		/* 821AEC18h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEC18h case    4:*/		return 0x821AEC1C;
		  /* 821AEC1Ch */ case    5:  		/* mr R3, R16 */
		/* 821AEC1Ch case    5:*/		regs.R3 = regs.R16;
		/* 821AEC1Ch case    5:*/		return 0x821AEC20;
		  /* 821AEC20h */ case    6:  		/* bl -255184 */
		/* 821AEC20h case    6:*/		regs.LR = 0x821AEC24; return 0x82170750;
		/* 821AEC20h case    6:*/		return 0x821AEC24;
		  /* 821AEC24h */ case    7:  		/* mr R4, R3 */
		/* 821AEC24h case    7:*/		regs.R4 = regs.R3;
		/* 821AEC24h case    7:*/		return 0x821AEC28;
		  /* 821AEC28h */ case    8:  		/* mr R3, R31 */
		/* 821AEC28h case    8:*/		regs.R3 = regs.R31;
		/* 821AEC28h case    8:*/		return 0x821AEC2C;
		  /* 821AEC2Ch */ case    9:  		/* bl -223844 */
		/* 821AEC2Ch case    9:*/		regs.LR = 0x821AEC30; return 0x821781C8;
		/* 821AEC2Ch case    9:*/		return 0x821AEC30;
	}
	return 0x821AEC30;
} // Block from 821AEC08h-821AEC30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC30);
		  /* 821AEC30h */ case    0:  		/* lwz R4, <#[R1 + 392]> */
		/* 821AEC30h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000188) );
		/* 821AEC30h case    0:*/		return 0x821AEC34;
		  /* 821AEC34h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AEC34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEC34h case    1:*/		return 0x821AEC38;
		  /* 821AEC38h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEC38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AEC54;  }
		/* 821AEC38h case    2:*/		return 0x821AEC3C;
		  /* 821AEC3Ch */ case    3:  		/* li R5, 0 */
		/* 821AEC3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEC3Ch case    3:*/		return 0x821AEC40;
		  /* 821AEC40h */ case    4:  		/* mr R3, R16 */
		/* 821AEC40h case    4:*/		regs.R3 = regs.R16;
		/* 821AEC40h case    4:*/		return 0x821AEC44;
		  /* 821AEC44h */ case    5:  		/* bl -255220 */
		/* 821AEC44h case    5:*/		regs.LR = 0x821AEC48; return 0x82170750;
		/* 821AEC44h case    5:*/		return 0x821AEC48;
		  /* 821AEC48h */ case    6:  		/* mr R4, R3 */
		/* 821AEC48h case    6:*/		regs.R4 = regs.R3;
		/* 821AEC48h case    6:*/		return 0x821AEC4C;
		  /* 821AEC4Ch */ case    7:  		/* mr R3, R31 */
		/* 821AEC4Ch case    7:*/		regs.R3 = regs.R31;
		/* 821AEC4Ch case    7:*/		return 0x821AEC50;
		  /* 821AEC50h */ case    8:  		/* bl -223880 */
		/* 821AEC50h case    8:*/		regs.LR = 0x821AEC54; return 0x821781C8;
		/* 821AEC50h case    8:*/		return 0x821AEC54;
	}
	return 0x821AEC54;
} // Block from 821AEC30h-821AEC54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC54);
		  /* 821AEC54h */ case    0:  		/* mr R8, R25 */
		/* 821AEC54h case    0:*/		regs.R8 = regs.R25;
		/* 821AEC54h case    0:*/		return 0x821AEC58;
		  /* 821AEC58h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AEC58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEC58h case    1:*/		return 0x821AEC5C;
		  /* 821AEC5Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AEC5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AEC5Ch case    2:*/		return 0x821AEC60;
		  /* 821AEC60h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AEC60h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AECC8;  }
		/* 821AEC60h case    3:*/		return 0x821AEC64;
		  /* 821AEC64h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AEC64h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEC64h case    4:*/		return 0x821AEC68;
		  /* 821AEC68h */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AEC68h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AEC68h case    5:*/		return 0x821AEC6C;
		  /* 821AEC6Ch */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AEC6Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AECB4;  }
		/* 821AEC6Ch case    6:*/		return 0x821AEC70;
		  /* 821AEC70h */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AEC70h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AEC70h case    7:*/		return 0x821AEC74;
		  /* 821AEC74h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AEC74h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AEC80;  }
		/* 821AEC74h case    8:*/		return 0x821AEC78;
		  /* 821AEC78h */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AEC78h case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AEC78h case    9:*/		return 0x821AEC7C;
		  /* 821AEC7Ch */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AEC7Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821AECB4;  }
		/* 821AEC7Ch case   10:*/		return 0x821AEC80;
	}
	return 0x821AEC80;
} // Block from 821AEC54h-821AEC80h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC80);
		  /* 821AEC80h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AEC80h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEC80h case    0:*/		return 0x821AEC84;
		  /* 821AEC84h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AEC84h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEC84h case    1:*/		return 0x821AEC88;
		  /* 821AEC88h */ case    2:  		/* b 12 */
		/* 821AEC88h case    2:*/		return 0x821AEC94;
		/* 821AEC88h case    2:*/		return 0x821AEC8C;
		  /* 821AEC8Ch */ case    3:  		/* addi R10, R9, 4 */
		/* 821AEC8Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AEC8Ch case    3:*/		return 0x821AEC90;
		  /* 821AEC90h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AEC90h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AEC90h case    4:*/		return 0x821AEC94;
	}
	return 0x821AEC94;
} // Block from 821AEC80h-821AEC94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEC94);
		  /* 821AEC94h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AEC94h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AEC94h case    0:*/		return 0x821AEC98;
		  /* 821AEC98h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AEC98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AEC8C;  }
		/* 821AEC98h case    1:*/		return 0x821AEC9C;
		  /* 821AEC9Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AEC9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEC9Ch case    2:*/		return 0x821AECA0;
		  /* 821AECA0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AECA0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AECA0h case    3:*/		return 0x821AECA4;
		  /* 821AECA4h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AECA4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AECA4h case    4:*/		return 0x821AECA8;
		  /* 821AECA8h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AECA8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AECA8h case    5:*/		return 0x821AECAC;
		  /* 821AECACh */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AECACh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AECACh case    6:*/		return 0x821AECB0;
		  /* 821AECB0h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AECB0h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AECB0h case    7:*/		return 0x821AECB4;
	}
	return 0x821AECB4;
} // Block from 821AEC94h-821AECB4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AECB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AECB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AECB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AECB4);
		  /* 821AECB4h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AECB4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AECB4h case    0:*/		return 0x821AECB8;
		  /* 821AECB8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AECB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AECB8h case    1:*/		return 0x821AECBC;
		  /* 821AECBCh */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AECBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AEC58;  }
		/* 821AECBCh case    2:*/		return 0x821AECC0;
		  /* 821AECC0h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AECC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AECC0h case    3:*/		return 0x821AECC4;
		  /* 821AECC4h */ case    4:  		/* b -108 */
		/* 821AECC4h case    4:*/		return 0x821AEC58;
		/* 821AECC4h case    4:*/		return 0x821AECC8;
	}
	return 0x821AECC8;
} // Block from 821AECB4h-821AECC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AECC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AECC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AECC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AECC8);
		  /* 821AECC8h */ case    0:  		/* mr R8, R19 */
		/* 821AECC8h case    0:*/		regs.R8 = regs.R19;
		/* 821AECC8h case    0:*/		return 0x821AECCC;
		  /* 821AECCCh */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AECCCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AECCCh case    1:*/		return 0x821AECD0;
		  /* 821AECD0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AECD0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AECD0h case    2:*/		return 0x821AECD4;
		  /* 821AECD4h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AECD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AED3C;  }
		/* 821AECD4h case    3:*/		return 0x821AECD8;
		  /* 821AECD8h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AECD8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AECD8h case    4:*/		return 0x821AECDC;
		  /* 821AECDCh */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AECDCh case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AECDCh case    5:*/		return 0x821AECE0;
		  /* 821AECE0h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AECE0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AED28;  }
		/* 821AECE0h case    6:*/		return 0x821AECE4;
		  /* 821AECE4h */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AECE4h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AECE4h case    7:*/		return 0x821AECE8;
		  /* 821AECE8h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AECE8h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AECF4;  }
		/* 821AECE8h case    8:*/		return 0x821AECEC;
		  /* 821AECECh */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AECECh case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AECECh case    9:*/		return 0x821AECF0;
		  /* 821AECF0h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AECF0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AED28;  }
		/* 821AECF0h case   10:*/		return 0x821AECF4;
	}
	return 0x821AECF4;
} // Block from 821AECC8h-821AECF4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AECF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AECF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AECF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AECF4);
		  /* 821AECF4h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AECF4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AECF4h case    0:*/		return 0x821AECF8;
		  /* 821AECF8h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AECF8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AECF8h case    1:*/		return 0x821AECFC;
		  /* 821AECFCh */ case    2:  		/* b 12 */
		/* 821AECFCh case    2:*/		return 0x821AED08;
		/* 821AECFCh case    2:*/		return 0x821AED00;
		  /* 821AED00h */ case    3:  		/* addi R10, R9, 4 */
		/* 821AED00h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AED00h case    3:*/		return 0x821AED04;
		  /* 821AED04h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AED04h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AED04h case    4:*/		return 0x821AED08;
	}
	return 0x821AED08;
} // Block from 821AECF4h-821AED08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AED08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED08);
		  /* 821AED08h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AED08h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AED08h case    0:*/		return 0x821AED0C;
		  /* 821AED0Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AED0Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AED00;  }
		/* 821AED0Ch case    1:*/		return 0x821AED10;
		  /* 821AED10h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AED10h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AED10h case    2:*/		return 0x821AED14;
		  /* 821AED14h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AED14h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AED14h case    3:*/		return 0x821AED18;
		  /* 821AED18h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AED18h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AED18h case    4:*/		return 0x821AED1C;
		  /* 821AED1Ch */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AED1Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AED1Ch case    5:*/		return 0x821AED20;
		  /* 821AED20h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AED20h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AED20h case    6:*/		return 0x821AED24;
		  /* 821AED24h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AED24h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AED24h case    7:*/		return 0x821AED28;
	}
	return 0x821AED28;
} // Block from 821AED08h-821AED28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AED28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED28);
		  /* 821AED28h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AED28h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AED28h case    0:*/		return 0x821AED2C;
		  /* 821AED2Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AED2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AED2Ch case    1:*/		return 0x821AED30;
		  /* 821AED30h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AED30h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AECCC;  }
		/* 821AED30h case    2:*/		return 0x821AED34;
		  /* 821AED34h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AED34h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AED34h case    3:*/		return 0x821AED38;
		  /* 821AED38h */ case    4:  		/* b -108 */
		/* 821AED38h case    4:*/		return 0x821AECCC;
		/* 821AED38h case    4:*/		return 0x821AED3C;
	}
	return 0x821AED3C;
} // Block from 821AED28h-821AED3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AED3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED3C);
		  /* 821AED3Ch */ case    0:  		/* lwz R11, <#[R1 + 208]> */
		/* 821AED3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AED3Ch case    0:*/		return 0x821AED40;
		  /* 821AED40h */ case    1:  		/* rlwinm. R5, R11, 17, 29, 31 */
		/* 821AED40h case    1:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R5,regs.R11);
		/* 821AED40h case    1:*/		return 0x821AED44;
		  /* 821AED44h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821AED44h case    2:*/		if ( regs.CR[0].eq ) { return 0x821AED54;  }
		/* 821AED44h case    2:*/		return 0x821AED48;
		  /* 821AED48h */ case    3:  		/* mr R4, R31 */
		/* 821AED48h case    3:*/		regs.R4 = regs.R31;
		/* 821AED48h case    3:*/		return 0x821AED4C;
		  /* 821AED4Ch */ case    4:  		/* mr R3, R16 */
		/* 821AED4Ch case    4:*/		regs.R3 = regs.R16;
		/* 821AED4Ch case    4:*/		return 0x821AED50;
		  /* 821AED50h */ case    5:  		/* bl -72112 */
		/* 821AED50h case    5:*/		regs.LR = 0x821AED54; return 0x8219D3A0;
		/* 821AED50h case    5:*/		return 0x821AED54;
	}
	return 0x821AED54;
} // Block from 821AED3Ch-821AED54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AED54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED54);
		  /* 821AED54h */ case    0:  		/* cmplwi CR6, R14, 3 */
		/* 821AED54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000003);
		/* 821AED54h case    0:*/		return 0x821AED58;
		  /* 821AED58h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 821AED58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AED8C;  }
		/* 821AED58h case    1:*/		return 0x821AED5C;
		  /* 821AED5Ch */ case    2:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AED5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AED5Ch case    2:*/		return 0x821AED60;
		  /* 821AED60h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AED60h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AED60h case    3:*/		return 0x821AED64;
		  /* 821AED64h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821AED64h case    4:*/		if ( regs.CR[0].eq ) { return 0x821AED74;  }
		/* 821AED64h case    4:*/		return 0x821AED68;
		  /* 821AED68h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AED68h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AED68h case    5:*/		return 0x821AED6C;
		  /* 821AED6Ch */ case    6:  		/* ori R11, R11, 1 */
		/* 821AED6Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AED6Ch case    6:*/		return 0x821AED70;
		  /* 821AED70h */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821AED70h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AED70h case    7:*/		return 0x821AED74;
	}
	return 0x821AED74;
} // Block from 821AED54h-821AED74h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AED74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED74);
		  /* 821AED74h */ case    0:  		/* mr R6, R31 */
		/* 821AED74h case    0:*/		regs.R6 = regs.R31;
		/* 821AED74h case    0:*/		return 0x821AED78;
		  /* 821AED78h */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AED78h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AED78h case    1:*/		return 0x821AED7C;
		  /* 821AED7Ch */ case    2:  		/* mr R4, R18 */
		/* 821AED7Ch case    2:*/		regs.R4 = regs.R18;
		/* 821AED7Ch case    2:*/		return 0x821AED80;
		  /* 821AED80h */ case    3:  		/* mr R3, R16 */
		/* 821AED80h case    3:*/		regs.R3 = regs.R16;
		/* 821AED80h case    3:*/		return 0x821AED84;
		  /* 821AED84h */ case    4:  		/* bl -40548 */
		/* 821AED84h case    4:*/		regs.LR = 0x821AED88; return 0x821A4F20;
		/* 821AED84h case    4:*/		return 0x821AED88;
		  /* 821AED88h */ case    5:  		/* b 28 */
		/* 821AED88h case    5:*/		return 0x821AEDA4;
		/* 821AED88h case    5:*/		return 0x821AED8C;
	}
	return 0x821AED8C;
} // Block from 821AED74h-821AED8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AED8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AED8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AED8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AED8C);
		  /* 821AED8Ch */ case    0:  		/* mr R7, R19 */
		/* 821AED8Ch case    0:*/		regs.R7 = regs.R19;
		/* 821AED8Ch case    0:*/		return 0x821AED90;
		  /* 821AED90h */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AED90h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AED90h case    1:*/		return 0x821AED94;
		  /* 821AED94h */ case    2:  		/* mr R6, R31 */
		/* 821AED94h case    2:*/		regs.R6 = regs.R31;
		/* 821AED94h case    2:*/		return 0x821AED98;
		  /* 821AED98h */ case    3:  		/* mr R4, R18 */
		/* 821AED98h case    3:*/		regs.R4 = regs.R18;
		/* 821AED98h case    3:*/		return 0x821AED9C;
		  /* 821AED9Ch */ case    4:  		/* mr R3, R16 */
		/* 821AED9Ch case    4:*/		regs.R3 = regs.R16;
		/* 821AED9Ch case    4:*/		return 0x821AEDA0;
		  /* 821AEDA0h */ case    5:  		/* bl -39112 */
		/* 821AEDA0h case    5:*/		regs.LR = 0x821AEDA4; return 0x821A54D8;
		/* 821AEDA0h case    5:*/		return 0x821AEDA4;
	}
	return 0x821AEDA4;
} // Block from 821AED8Ch-821AEDA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEDA4);
		  /* 821AEDA4h */ case    0:  		/* lbz R11, <#[R1 + 128]> */
		/* 821AEDA4h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821AEDA4h case    0:*/		return 0x821AEDA8;
		  /* 821AEDA8h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821AEDA8h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AEDA8h case    1:*/		return 0x821AEDAC;
		  /* 821AEDACh */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821AEDACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AEDBC;  }
		/* 821AEDACh case    2:*/		return 0x821AEDB0;
		  /* 821AEDB0h */ case    3:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AEDB0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEDB0h case    3:*/		return 0x821AEDB4;
		  /* 821AEDB4h */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AEDB4h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AEDB4h case    4:*/		return 0x821AEDB8;
		  /* 821AEDB8h */ case    5:  		/* stw R11, <#[R18 + 8]> */
		/* 821AEDB8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEDB8h case    5:*/		return 0x821AEDBC;
	}
	return 0x821AEDBC;
} // Block from 821AEDA4h-821AEDBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEDBC);
		  /* 821AEDBCh */ case    0:  		/* lbz R11, <#[R1 + 129]> */
		/* 821AEDBCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821AEDBCh case    0:*/		return 0x821AEDC0;
		  /* 821AEDC0h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821AEDC0h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AEDC0h case    1:*/		return 0x821AEDC4;
		  /* 821AEDC4h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821AEDC4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AEDD4;  }
		/* 821AEDC4h case    2:*/		return 0x821AEDC8;
		  /* 821AEDC8h */ case    3:  		/* lwz R11, <#[R19 + 8]> */
		/* 821AEDC8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AEDC8h case    3:*/		return 0x821AEDCC;
		  /* 821AEDCCh */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AEDCCh case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AEDCCh case    4:*/		return 0x821AEDD0;
		  /* 821AEDD0h */ case    5:  		/* stw R11, <#[R19 + 8]> */
		/* 821AEDD0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AEDD0h case    5:*/		return 0x821AEDD4;
	}
	return 0x821AEDD4;
} // Block from 821AEDBCh-821AEDD4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AEDD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEDD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEDD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEDD4);
		  /* 821AEDD4h */ case    0:  		/* mr R4, R18 */
		/* 821AEDD4h case    0:*/		regs.R4 = regs.R18;
		/* 821AEDD4h case    0:*/		return 0x821AEDD8;
		  /* 821AEDD8h */ case    1:  		/* mr R3, R16 */
		/* 821AEDD8h case    1:*/		regs.R3 = regs.R16;
		/* 821AEDD8h case    1:*/		return 0x821AEDDC;
		  /* 821AEDDCh */ case    2:  		/* bl -58148 */
		/* 821AEDDCh case    2:*/		regs.LR = 0x821AEDE0; return 0x821A0AB8;
		/* 821AEDDCh case    2:*/		return 0x821AEDE0;
		  /* 821AEDE0h */ case    3:  		/* mr R4, R19 */
		/* 821AEDE0h case    3:*/		regs.R4 = regs.R19;
		/* 821AEDE0h case    3:*/		return 0x821AEDE4;
		  /* 821AEDE4h */ case    4:  		/* mr R3, R16 */
		/* 821AEDE4h case    4:*/		regs.R3 = regs.R16;
		/* 821AEDE4h case    4:*/		return 0x821AEDE8;
		  /* 821AEDE8h */ case    5:  		/* bl -58160 */
		/* 821AEDE8h case    5:*/		regs.LR = 0x821AEDEC; return 0x821A0AB8;
		/* 821AEDE8h case    5:*/		return 0x821AEDEC;
		  /* 821AEDECh */ case    6:  		/* mr R4, R25 */
		/* 821AEDECh case    6:*/		regs.R4 = regs.R25;
		/* 821AEDECh case    6:*/		return 0x821AEDF0;
		  /* 821AEDF0h */ case    7:  		/* b -584 */
		/* 821AEDF0h case    7:*/		return 0x821AEBA8;
		/* 821AEDF0h case    7:*/		return 0x821AEDF4;
	}
	return 0x821AEDF4;
} // Block from 821AEDD4h-821AEDF4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AEDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEDF4);
		  /* 821AEDF4h */ case    0:  		/* mr R4, R24 */
		/* 821AEDF4h case    0:*/		regs.R4 = regs.R24;
		/* 821AEDF4h case    0:*/		return 0x821AEDF8;
		  /* 821AEDF8h */ case    1:  		/* lwz R5, <#[R24 + 12]> */
		/* 821AEDF8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x0000000C) );
		/* 821AEDF8h case    1:*/		return 0x821AEDFC;
		  /* 821AEDFCh */ case    2:  		/* mr R3, R16 */
		/* 821AEDFCh case    2:*/		regs.R3 = regs.R16;
		/* 821AEDFCh case    2:*/		return 0x821AEE00;
		  /* 821AEE00h */ case    3:  		/* bl -253200 */
		/* 821AEE00h case    3:*/		regs.LR = 0x821AEE04; return 0x821710F0;
		/* 821AEE00h case    3:*/		return 0x821AEE04;
		  /* 821AEE04h */ case    4:  		/* mr R5, R3 */
		/* 821AEE04h case    4:*/		regs.R5 = regs.R3;
		/* 821AEE04h case    4:*/		return 0x821AEE08;
		  /* 821AEE08h */ case    5:  		/* addi R10, R1, 240 */
		/* 821AEE08h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 821AEE08h case    5:*/		return 0x821AEE0C;
		  /* 821AEE0Ch */ case    6:  		/* lwz R8, <#[R18 + 28]> */
		/* 821AEE0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x0000001C) );
		/* 821AEE0Ch case    6:*/		return 0x821AEE10;
		  /* 821AEE10h */ case    7:  		/* mr R9, R18 */
		/* 821AEE10h case    7:*/		regs.R9 = regs.R18;
		/* 821AEE10h case    7:*/		return 0x821AEE14;
		  /* 821AEE14h */ case    8:  		/* mr R7, R21 */
		/* 821AEE14h case    8:*/		regs.R7 = regs.R21;
		/* 821AEE14h case    8:*/		return 0x821AEE18;
		  /* 821AEE18h */ case    9:  		/* mr R6, R18 */
		/* 821AEE18h case    9:*/		regs.R6 = regs.R18;
		/* 821AEE18h case    9:*/		return 0x821AEE1C;
		  /* 821AEE1Ch */ case   10:  		/* mr R4, R19 */
		/* 821AEE1Ch case   10:*/		regs.R4 = regs.R19;
		/* 821AEE1Ch case   10:*/		return 0x821AEE20;
		  /* 821AEE20h */ case   11:  		/* mr R3, R16 */
		/* 821AEE20h case   11:*/		regs.R3 = regs.R16;
		/* 821AEE20h case   11:*/		return 0x821AEE24;
		  /* 821AEE24h */ case   12:  		/* bl -49964 */
		/* 821AEE24h case   12:*/		regs.LR = 0x821AEE28; return 0x821A2AF8;
		/* 821AEE24h case   12:*/		return 0x821AEE28;
		  /* 821AEE28h */ case   13:  		/* mr R30, R3 */
		/* 821AEE28h case   13:*/		regs.R30 = regs.R3;
		/* 821AEE28h case   13:*/		return 0x821AEE2C;
		  /* 821AEE2Ch */ case   14:  		/* cmplwi CR6, R23, 0 */
		/* 821AEE2Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821AEE2Ch case   14:*/		return 0x821AEE30;
		  /* 821AEE30h */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 821AEE30h case   15:*/		if ( regs.CR[6].eq ) { return 0x821AEE44;  }
		/* 821AEE30h case   15:*/		return 0x821AEE34;
		  /* 821AEE34h */ case   16:  		/* mr R5, R16 */
		/* 821AEE34h case   16:*/		regs.R5 = regs.R16;
		/* 821AEE34h case   16:*/		return 0x821AEE38;
		  /* 821AEE38h */ case   17:  		/* mr R4, R23 */
		/* 821AEE38h case   17:*/		regs.R4 = regs.R23;
		/* 821AEE38h case   17:*/		return 0x821AEE3C;
		  /* 821AEE3Ch */ case   18:  		/* mr R3, R18 */
		/* 821AEE3Ch case   18:*/		regs.R3 = regs.R18;
		/* 821AEE3Ch case   18:*/		return 0x821AEE40;
		  /* 821AEE40h */ case   19:  		/* bl -222512 */
		/* 821AEE40h case   19:*/		regs.LR = 0x821AEE44; return 0x82178910;
		/* 821AEE40h case   19:*/		return 0x821AEE44;
	}
	return 0x821AEE44;
} // Block from 821AEDF4h-821AEE44h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821AEE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEE44);
		  /* 821AEE44h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821AEE44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821AEE44h case    0:*/		return 0x821AEE48;
		  /* 821AEE48h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 821AEE48h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AEEA8;  }
		/* 821AEE48h case    1:*/		return 0x821AEE4C;
		  /* 821AEE4Ch */ case    2:  		/* mr R3, R22 */
		/* 821AEE4Ch case    2:*/		regs.R3 = regs.R22;
		/* 821AEE4Ch case    2:*/		return 0x821AEE50;
		  /* 821AEE50h */ case    3:  		/* bl -101024 */
		/* 821AEE50h case    3:*/		regs.LR = 0x821AEE54; return 0x821963B0;
		/* 821AEE50h case    3:*/		return 0x821AEE54;
		  /* 821AEE54h */ case    4:  		/* lwz R11, <#[R22 + 8]> */
		/* 821AEE54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821AEE54h case    4:*/		return 0x821AEE58;
		  /* 821AEE58h */ case    5:  		/* cmplwi CR6, R20, 0 */
		/* 821AEE58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821AEE58h case    5:*/		return 0x821AEE5C;
		  /* 821AEE5Ch */ case    6:  		/* oris R11, R11, 256 */
		/* 821AEE5Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AEE5Ch case    6:*/		return 0x821AEE60;
		  /* 821AEE60h */ case    7:  		/* stw R11, <#[R22 + 8]> */
		/* 821AEE60h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821AEE60h case    7:*/		return 0x821AEE64;
		  /* 821AEE64h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 821AEE64h case    8:*/		if ( regs.CR[6].eq ) { return 0x821AEEA8;  }
		/* 821AEE64h case    8:*/		return 0x821AEE68;
		  /* 821AEE68h */ case    9:  		/* mr R3, R20 */
		/* 821AEE68h case    9:*/		regs.R3 = regs.R20;
		/* 821AEE68h case    9:*/		return 0x821AEE6C;
		  /* 821AEE6Ch */ case   10:  		/* bl -304364 */
		/* 821AEE6Ch case   10:*/		regs.LR = 0x821AEE70; return 0x82164980;
		/* 821AEE6Ch case   10:*/		return 0x821AEE70;
		  /* 821AEE70h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AEE70h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AEE70h case   11:*/		return 0x821AEE74;
		  /* 821AEE74h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 821AEE74h case   12:*/		if ( regs.CR[0].eq ) { return 0x821AEE94;  }
		/* 821AEE74h case   12:*/		return 0x821AEE78;
		  /* 821AEE78h */ case   13:  		/* li R6, 1 */
		/* 821AEE78h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AEE78h case   13:*/		return 0x821AEE7C;
		  /* 821AEE7Ch */ case   14:  		/* lwz R5, <#[R16 + 652]> */
		/* 821AEE7Ch case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000028C) );
		/* 821AEE7Ch case   14:*/		return 0x821AEE80;
		  /* 821AEE80h */ case   15:  		/* mr R4, R20 */
		/* 821AEE80h case   15:*/		regs.R4 = regs.R20;
		/* 821AEE80h case   15:*/		return 0x821AEE84;
		  /* 821AEE84h */ case   16:  		/* mr R3, R16 */
		/* 821AEE84h case   16:*/		regs.R3 = regs.R16;
		/* 821AEE84h case   16:*/		return 0x821AEE88;
		  /* 821AEE88h */ case   17:  		/* bl 509248 */
		/* 821AEE88h case   17:*/		regs.LR = 0x821AEE8C; return 0x8222B3C8;
		/* 821AEE88h case   17:*/		return 0x821AEE8C;
		  /* 821AEE8Ch */ case   18:  		/* li R20, 0 */
		/* 821AEE8Ch case   18:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821AEE8Ch case   18:*/		return 0x821AEE90;
		  /* 821AEE90h */ case   19:  		/* b 24 */
		/* 821AEE90h case   19:*/		return 0x821AEEA8;
		/* 821AEE90h case   19:*/		return 0x821AEE94;
	}
	return 0x821AEE94;
} // Block from 821AEE44h-821AEE94h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821AEE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEE94);
		  /* 821AEE94h */ case    0:  		/* mr R3, R20 */
		/* 821AEE94h case    0:*/		regs.R3 = regs.R20;
		/* 821AEE94h case    0:*/		return 0x821AEE98;
		  /* 821AEE98h */ case    1:  		/* bl -224032 */
		/* 821AEE98h case    1:*/		regs.LR = 0x821AEE9C; return 0x82178378;
		/* 821AEE98h case    1:*/		return 0x821AEE9C;
		  /* 821AEE9Ch */ case    2:  		/* lwz R11, <#[R20 + 8]> */
		/* 821AEE9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821AEE9Ch case    2:*/		return 0x821AEEA0;
		  /* 821AEEA0h */ case    3:  		/* oris R11, R11, 256 */
		/* 821AEEA0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AEEA0h case    3:*/		return 0x821AEEA4;
		  /* 821AEEA4h */ case    4:  		/* stw R11, <#[R20 + 8]> */
		/* 821AEEA4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821AEEA4h case    4:*/		return 0x821AEEA8;
	}
	return 0x821AEEA8;
} // Block from 821AEE94h-821AEEA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEEA8);
		  /* 821AEEA8h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 821AEEA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821AEEA8h case    0:*/		return 0x821AEEAC;
		  /* 821AEEACh */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821AEEACh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEEACh case    1:*/		return 0x821AEEB0;
		  /* 821AEEB0h */ case    2:  		/* b 12 */
		/* 821AEEB0h case    2:*/		return 0x821AEEBC;
		/* 821AEEB0h case    2:*/		return 0x821AEEB4;
		  /* 821AEEB4h */ case    3:  		/* addi R11, R10, 4 */
		/* 821AEEB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821AEEB4h case    3:*/		return 0x821AEEB8;
		  /* 821AEEB8h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821AEEB8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821AEEB8h case    4:*/		return 0x821AEEBC;
	}
	return 0x821AEEBC;
} // Block from 821AEEA8h-821AEEBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEEBC);
		  /* 821AEEBCh */ case    0:  		/* cmplw CR6, R10, R27 */
		/* 821AEEBCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 821AEEBCh case    0:*/		return 0x821AEEC0;
		  /* 821AEEC0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AEEC0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AEEB4;  }
		/* 821AEEC0h case    1:*/		return 0x821AEEC4;
		  /* 821AEEC4h */ case    2:  		/* lwz R10, <#[R27 + 4]> */
		/* 821AEEC4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821AEEC4h case    2:*/		return 0x821AEEC8;
		  /* 821AEEC8h */ case    3:  		/* li R9, 0 */
		/* 821AEEC8h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AEEC8h case    3:*/		return 0x821AEECC;
		  /* 821AEECCh */ case    4:  		/* li R6, 1 */
		/* 821AEECCh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AEECCh case    4:*/		return 0x821AEED0;
		  /* 821AEED0h */ case    5:  		/* li R5, 0 */
		/* 821AEED0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEED0h case    5:*/		return 0x821AEED4;
		  /* 821AEED4h */ case    6:  		/* mr R4, R28 */
		/* 821AEED4h case    6:*/		regs.R4 = regs.R28;
		/* 821AEED4h case    6:*/		return 0x821AEED8;
		  /* 821AEED8h */ case    7:  		/* mr R3, R16 */
		/* 821AEED8h case    7:*/		regs.R3 = regs.R16;
		/* 821AEED8h case    7:*/		return 0x821AEEDC;
		  /* 821AEEDCh */ case    8:  		/* stw R10, <#[R11]> */
		/* 821AEEDCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEEDCh case    8:*/		return 0x821AEEE0;
		  /* 821AEEE0h */ case    9:  		/* stw R9, <#[R27 + 16]> */
		/* 821AEEE0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 821AEEE0h case    9:*/		return 0x821AEEE4;
		  /* 821AEEE4h */ case   10:  		/* bl 509156 */
		/* 821AEEE4h case   10:*/		regs.LR = 0x821AEEE8; return 0x8222B3C8;
		/* 821AEEE4h case   10:*/		return 0x821AEEE8;
		  /* 821AEEE8h */ case   11:  		/* cmplwi CR6, R14, 3 */
		/* 821AEEE8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000003);
		/* 821AEEE8h case   11:*/		return 0x821AEEEC;
		  /* 821AEEECh */ case   12:  		/* mr R7, R27 */
		/* 821AEEECh case   12:*/		regs.R7 = regs.R27;
		/* 821AEEECh case   12:*/		return 0x821AEEF0;
		  /* 821AEEF0h */ case   13:  		/* mr R6, R30 */
		/* 821AEEF0h case   13:*/		regs.R6 = regs.R30;
		/* 821AEEF0h case   13:*/		return 0x821AEEF4;
		  /* 821AEEF4h */ case   14:  		/* mr R5, R18 */
		/* 821AEEF4h case   14:*/		regs.R5 = regs.R18;
		/* 821AEEF4h case   14:*/		return 0x821AEEF8;
		  /* 821AEEF8h */ case   15:  		/* li R4, 0 */
		/* 821AEEF8h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AEEF8h case   15:*/		return 0x821AEEFC;
		  /* 821AEEFCh */ case   16:  		/* mr R3, R16 */
		/* 821AEEFCh case   16:*/		regs.R3 = regs.R16;
		/* 821AEEFCh case   16:*/		return 0x821AEF00;
		  /* 821AEF00h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 821AEF00h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821AEF0C;  }
		/* 821AEF00h case   17:*/		return 0x821AEF04;
		  /* 821AEF04h */ case   18:  		/* bl -68108 */
		/* 821AEF04h case   18:*/		regs.LR = 0x821AEF08; return 0x8219E4F8;
		/* 821AEF04h case   18:*/		return 0x821AEF08;
		  /* 821AEF08h */ case   19:  		/* b 8 */
		/* 821AEF08h case   19:*/		return 0x821AEF10;
		/* 821AEF08h case   19:*/		return 0x821AEF0C;
	}
	return 0x821AEF0C;
} // Block from 821AEEBCh-821AEF0Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF0C);
		  /* 821AEF0Ch */ case    0:  		/* bl -67916 */
		/* 821AEF0Ch case    0:*/		regs.LR = 0x821AEF10; return 0x8219E5C0;
		/* 821AEF0Ch case    0:*/		return 0x821AEF10;
	}
	return 0x821AEF10;
} // Block from 821AEF0Ch-821AEF10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF10);
		  /* 821AEF10h */ case    0:  		/* mr R31, R3 */
		/* 821AEF10h case    0:*/		regs.R31 = regs.R3;
		/* 821AEF10h case    0:*/		return 0x821AEF14;
		  /* 821AEF14h */ case    1:  		/* mr R8, R19 */
		/* 821AEF14h case    1:*/		regs.R8 = regs.R19;
		/* 821AEF14h case    1:*/		return 0x821AEF18;
		  /* 821AEF18h */ case    2:  		/* lwz R11, <#[R8]> */
		/* 821AEF18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEF18h case    2:*/		return 0x821AEF1C;
		  /* 821AEF1Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821AEF1Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AEF1Ch case    3:*/		return 0x821AEF20;
		  /* 821AEF20h */ case    4:  		/* bc 12, CR6_EQ, 104 */
		/* 821AEF20h case    4:*/		if ( regs.CR[6].eq ) { return 0x821AEF88;  }
		/* 821AEF20h case    4:*/		return 0x821AEF24;
		  /* 821AEF24h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821AEF24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AEF24h case    5:*/		return 0x821AEF28;
		  /* 821AEF28h */ case    6:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AEF28h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AEF28h case    6:*/		return 0x821AEF2C;
		  /* 821AEF2Ch */ case    7:  		/* bc 4, CR0_EQ, 72 */
		/* 821AEF2Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821AEF74;  }
		/* 821AEF2Ch case    7:*/		return 0x821AEF30;
		  /* 821AEF30h */ case    8:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AEF30h case    8:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AEF30h case    8:*/		return 0x821AEF34;
		  /* 821AEF34h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821AEF34h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AEF40;  }
		/* 821AEF34h case    9:*/		return 0x821AEF38;
		  /* 821AEF38h */ case   10:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AEF38h case   10:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AEF38h case   10:*/		return 0x821AEF3C;
		  /* 821AEF3Ch */ case   11:  		/* bc 12, CR0_EQ, 56 */
		/* 821AEF3Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821AEF74;  }
		/* 821AEF3Ch case   11:*/		return 0x821AEF40;
	}
	return 0x821AEF40;
} // Block from 821AEF10h-821AEF40h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF40);
		  /* 821AEF40h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AEF40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEF40h case    0:*/		return 0x821AEF44;
		  /* 821AEF44h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AEF44h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEF44h case    1:*/		return 0x821AEF48;
		  /* 821AEF48h */ case    2:  		/* b 12 */
		/* 821AEF48h case    2:*/		return 0x821AEF54;
		/* 821AEF48h case    2:*/		return 0x821AEF4C;
		  /* 821AEF4Ch */ case    3:  		/* addi R10, R9, 4 */
		/* 821AEF4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AEF4Ch case    3:*/		return 0x821AEF50;
		  /* 821AEF50h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AEF50h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AEF50h case    4:*/		return 0x821AEF54;
	}
	return 0x821AEF54;
} // Block from 821AEF40h-821AEF54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF54);
		  /* 821AEF54h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AEF54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AEF54h case    0:*/		return 0x821AEF58;
		  /* 821AEF58h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AEF58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AEF4C;  }
		/* 821AEF58h case    1:*/		return 0x821AEF5C;
		  /* 821AEF5Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AEF5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEF5Ch case    2:*/		return 0x821AEF60;
		  /* 821AEF60h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AEF60h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AEF60h case    3:*/		return 0x821AEF64;
		  /* 821AEF64h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AEF64h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEF64h case    4:*/		return 0x821AEF68;
		  /* 821AEF68h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AEF68h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AEF68h case    5:*/		return 0x821AEF6C;
		  /* 821AEF6Ch */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AEF6Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AEF6Ch case    6:*/		return 0x821AEF70;
		  /* 821AEF70h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AEF70h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AEF70h case    7:*/		return 0x821AEF74;
	}
	return 0x821AEF74;
} // Block from 821AEF54h-821AEF74h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF74);
		  /* 821AEF74h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AEF74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AEF74h case    0:*/		return 0x821AEF78;
		  /* 821AEF78h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AEF78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AEF78h case    1:*/		return 0x821AEF7C;
		  /* 821AEF7Ch */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AEF7Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AEF18;  }
		/* 821AEF7Ch case    2:*/		return 0x821AEF80;
		  /* 821AEF80h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AEF80h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AEF80h case    3:*/		return 0x821AEF84;
		  /* 821AEF84h */ case    4:  		/* b -108 */
		/* 821AEF84h case    4:*/		return 0x821AEF18;
		/* 821AEF84h case    4:*/		return 0x821AEF88;
	}
	return 0x821AEF88;
} // Block from 821AEF74h-821AEF88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AEF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEF88);
		  /* 821AEF88h */ case    0:  		/* lwz R4, <#[R1 + 168]> */
		/* 821AEF88h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A8) );
		/* 821AEF88h case    0:*/		return 0x821AEF8C;
		  /* 821AEF8Ch */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AEF8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEF8Ch case    1:*/		return 0x821AEF90;
		  /* 821AEF90h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEF90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AEFAC;  }
		/* 821AEF90h case    2:*/		return 0x821AEF94;
		  /* 821AEF94h */ case    3:  		/* li R5, 0 */
		/* 821AEF94h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEF94h case    3:*/		return 0x821AEF98;
		  /* 821AEF98h */ case    4:  		/* mr R3, R16 */
		/* 821AEF98h case    4:*/		regs.R3 = regs.R16;
		/* 821AEF98h case    4:*/		return 0x821AEF9C;
		  /* 821AEF9Ch */ case    5:  		/* bl -256076 */
		/* 821AEF9Ch case    5:*/		regs.LR = 0x821AEFA0; return 0x82170750;
		/* 821AEF9Ch case    5:*/		return 0x821AEFA0;
		  /* 821AEFA0h */ case    6:  		/* mr R4, R3 */
		/* 821AEFA0h case    6:*/		regs.R4 = regs.R3;
		/* 821AEFA0h case    6:*/		return 0x821AEFA4;
		  /* 821AEFA4h */ case    7:  		/* mr R3, R31 */
		/* 821AEFA4h case    7:*/		regs.R3 = regs.R31;
		/* 821AEFA4h case    7:*/		return 0x821AEFA8;
		  /* 821AEFA8h */ case    8:  		/* bl -224736 */
		/* 821AEFA8h case    8:*/		regs.LR = 0x821AEFAC; return 0x821781C8;
		/* 821AEFA8h case    8:*/		return 0x821AEFAC;
	}
	return 0x821AEFAC;
} // Block from 821AEF88h-821AEFACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AEFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEFAC);
		  /* 821AEFACh */ case    0:  		/* lwz R4, <#[R1 + 248]> */
		/* 821AEFACh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000F8) );
		/* 821AEFACh case    0:*/		return 0x821AEFB0;
		  /* 821AEFB0h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AEFB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AEFB0h case    1:*/		return 0x821AEFB4;
		  /* 821AEFB4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AEFB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AEFD0;  }
		/* 821AEFB4h case    2:*/		return 0x821AEFB8;
		  /* 821AEFB8h */ case    3:  		/* li R5, 0 */
		/* 821AEFB8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AEFB8h case    3:*/		return 0x821AEFBC;
		  /* 821AEFBCh */ case    4:  		/* mr R3, R16 */
		/* 821AEFBCh case    4:*/		regs.R3 = regs.R16;
		/* 821AEFBCh case    4:*/		return 0x821AEFC0;
		  /* 821AEFC0h */ case    5:  		/* bl -256112 */
		/* 821AEFC0h case    5:*/		regs.LR = 0x821AEFC4; return 0x82170750;
		/* 821AEFC0h case    5:*/		return 0x821AEFC4;
		  /* 821AEFC4h */ case    6:  		/* mr R4, R3 */
		/* 821AEFC4h case    6:*/		regs.R4 = regs.R3;
		/* 821AEFC4h case    6:*/		return 0x821AEFC8;
		  /* 821AEFC8h */ case    7:  		/* mr R3, R31 */
		/* 821AEFC8h case    7:*/		regs.R3 = regs.R31;
		/* 821AEFC8h case    7:*/		return 0x821AEFCC;
		  /* 821AEFCCh */ case    8:  		/* bl -224772 */
		/* 821AEFCCh case    8:*/		regs.LR = 0x821AEFD0; return 0x821781C8;
		/* 821AEFCCh case    8:*/		return 0x821AEFD0;
	}
	return 0x821AEFD0;
} // Block from 821AEFACh-821AEFD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AEFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEFD0);
		  /* 821AEFD0h */ case    0:  		/* mr R4, R31 */
		/* 821AEFD0h case    0:*/		regs.R4 = regs.R31;
		/* 821AEFD0h case    0:*/		return 0x821AEFD4;
		  /* 821AEFD4h */ case    1:  		/* mr R3, R16 */
		/* 821AEFD4h case    1:*/		regs.R3 = regs.R16;
		/* 821AEFD4h case    1:*/		return 0x821AEFD8;
		  /* 821AEFD8h */ case    2:  		/* bl -72352 */
		/* 821AEFD8h case    2:*/		regs.LR = 0x821AEFDC; return 0x8219D538;
		/* 821AEFD8h case    2:*/		return 0x821AEFDC;
		  /* 821AEFDCh */ case    3:  		/* cmplwi CR6, R14, 3 */
		/* 821AEFDCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000003);
		/* 821AEFDCh case    3:*/		return 0x821AEFE0;
		  /* 821AEFE0h */ case    4:  		/* bc 4, CR6_EQ, 52 */
		/* 821AEFE0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821AF014;  }
		/* 821AEFE0h case    4:*/		return 0x821AEFE4;
		  /* 821AEFE4h */ case    5:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AEFE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AEFE4h case    5:*/		return 0x821AEFE8;
		  /* 821AEFE8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AEFE8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AEFE8h case    6:*/		return 0x821AEFEC;
		  /* 821AEFECh */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821AEFECh case    7:*/		if ( regs.CR[0].eq ) { return 0x821AEFFC;  }
		/* 821AEFECh case    7:*/		return 0x821AEFF0;
		  /* 821AEFF0h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AEFF0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AEFF0h case    8:*/		return 0x821AEFF4;
		  /* 821AEFF4h */ case    9:  		/* ori R11, R11, 1 */
		/* 821AEFF4h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AEFF4h case    9:*/		return 0x821AEFF8;
		  /* 821AEFF8h */ case   10:  		/* stw R11, <#[R31 + 8]> */
		/* 821AEFF8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AEFF8h case   10:*/		return 0x821AEFFC;
	}
	return 0x821AEFFC;
} // Block from 821AEFD0h-821AEFFCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AEFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AEFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AEFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AEFFC);
		  /* 821AEFFCh */ case    0:  		/* mr R6, R31 */
		/* 821AEFFCh case    0:*/		regs.R6 = regs.R31;
		/* 821AEFFCh case    0:*/		return 0x821AF000;
		  /* 821AF000h */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AF000h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF000h case    1:*/		return 0x821AF004;
		  /* 821AF004h */ case    2:  		/* mr R4, R18 */
		/* 821AF004h case    2:*/		regs.R4 = regs.R18;
		/* 821AF004h case    2:*/		return 0x821AF008;
		  /* 821AF008h */ case    3:  		/* mr R3, R16 */
		/* 821AF008h case    3:*/		regs.R3 = regs.R16;
		/* 821AF008h case    3:*/		return 0x821AF00C;
		  /* 821AF00Ch */ case    4:  		/* bl -41196 */
		/* 821AF00Ch case    4:*/		regs.LR = 0x821AF010; return 0x821A4F20;
		/* 821AF00Ch case    4:*/		return 0x821AF010;
		  /* 821AF010h */ case    5:  		/* b 28 */
		/* 821AF010h case    5:*/		return 0x821AF02C;
		/* 821AF010h case    5:*/		return 0x821AF014;
	}
	return 0x821AF014;
} // Block from 821AEFFCh-821AF014h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF014);
		  /* 821AF014h */ case    0:  		/* mr R7, R19 */
		/* 821AF014h case    0:*/		regs.R7 = regs.R19;
		/* 821AF014h case    0:*/		return 0x821AF018;
		  /* 821AF018h */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AF018h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF018h case    1:*/		return 0x821AF01C;
		  /* 821AF01Ch */ case    2:  		/* mr R6, R31 */
		/* 821AF01Ch case    2:*/		regs.R6 = regs.R31;
		/* 821AF01Ch case    2:*/		return 0x821AF020;
		  /* 821AF020h */ case    3:  		/* mr R4, R18 */
		/* 821AF020h case    3:*/		regs.R4 = regs.R18;
		/* 821AF020h case    3:*/		return 0x821AF024;
		  /* 821AF024h */ case    4:  		/* mr R3, R16 */
		/* 821AF024h case    4:*/		regs.R3 = regs.R16;
		/* 821AF024h case    4:*/		return 0x821AF028;
		  /* 821AF028h */ case    5:  		/* bl -39760 */
		/* 821AF028h case    5:*/		regs.LR = 0x821AF02C; return 0x821A54D8;
		/* 821AF028h case    5:*/		return 0x821AF02C;
	}
	return 0x821AF02C;
} // Block from 821AF014h-821AF02Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF02C);
		  /* 821AF02Ch */ case    0:  		/* lbz R11, <#[R1 + 128]> */
		/* 821AF02Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821AF02Ch case    0:*/		return 0x821AF030;
		  /* 821AF030h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821AF030h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AF030h case    1:*/		return 0x821AF034;
		  /* 821AF034h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821AF034h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AF044;  }
		/* 821AF034h case    2:*/		return 0x821AF038;
		  /* 821AF038h */ case    3:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AF038h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AF038h case    3:*/		return 0x821AF03C;
		  /* 821AF03Ch */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AF03Ch case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AF03Ch case    4:*/		return 0x821AF040;
		  /* 821AF040h */ case    5:  		/* stw R11, <#[R18 + 8]> */
		/* 821AF040h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AF040h case    5:*/		return 0x821AF044;
	}
	return 0x821AF044;
} // Block from 821AF02Ch-821AF044h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF044);
		  /* 821AF044h */ case    0:  		/* lbz R11, <#[R1 + 129]> */
		/* 821AF044h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821AF044h case    0:*/		return 0x821AF048;
		  /* 821AF048h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821AF048h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AF048h case    1:*/		return 0x821AF04C;
		  /* 821AF04Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821AF04Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AF05C;  }
		/* 821AF04Ch case    2:*/		return 0x821AF050;
		  /* 821AF050h */ case    3:  		/* lwz R11, <#[R19 + 8]> */
		/* 821AF050h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AF050h case    3:*/		return 0x821AF054;
		  /* 821AF054h */ case    4:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AF054h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AF054h case    4:*/		return 0x821AF058;
		  /* 821AF058h */ case    5:  		/* stw R11, <#[R19 + 8]> */
		/* 821AF058h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821AF058h case    5:*/		return 0x821AF05C;
	}
	return 0x821AF05C;
} // Block from 821AF044h-821AF05Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF05C);
		  /* 821AF05Ch */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821AF05Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821AF05Ch case    0:*/		return 0x821AF060;
		  /* 821AF060h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821AF060h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AF070;  }
		/* 821AF060h case    1:*/		return 0x821AF064;
		  /* 821AF064h */ case    2:  		/* mr R4, R20 */
		/* 821AF064h case    2:*/		regs.R4 = regs.R20;
		/* 821AF064h case    2:*/		return 0x821AF068;
		  /* 821AF068h */ case    3:  		/* mr R3, R16 */
		/* 821AF068h case    3:*/		regs.R3 = regs.R16;
		/* 821AF068h case    3:*/		return 0x821AF06C;
		  /* 821AF06Ch */ case    4:  		/* bl -58804 */
		/* 821AF06Ch case    4:*/		regs.LR = 0x821AF070; return 0x821A0AB8;
		/* 821AF06Ch case    4:*/		return 0x821AF070;
	}
	return 0x821AF070;
} // Block from 821AF05Ch-821AF070h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AF070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF070);
		  /* 821AF070h */ case    0:  		/* mr R4, R18 */
		/* 821AF070h case    0:*/		regs.R4 = regs.R18;
		/* 821AF070h case    0:*/		return 0x821AF074;
		  /* 821AF074h */ case    1:  		/* mr R3, R16 */
		/* 821AF074h case    1:*/		regs.R3 = regs.R16;
		/* 821AF074h case    1:*/		return 0x821AF078;
		  /* 821AF078h */ case    2:  		/* bl -58816 */
		/* 821AF078h case    2:*/		regs.LR = 0x821AF07C; return 0x821A0AB8;
		/* 821AF078h case    2:*/		return 0x821AF07C;
		  /* 821AF07Ch */ case    3:  		/* mr R4, R19 */
		/* 821AF07Ch case    3:*/		regs.R4 = regs.R19;
		/* 821AF07Ch case    3:*/		return 0x821AF080;
		  /* 821AF080h */ case    4:  		/* mr R3, R16 */
		/* 821AF080h case    4:*/		regs.R3 = regs.R16;
		/* 821AF080h case    4:*/		return 0x821AF084;
		  /* 821AF084h */ case    5:  		/* bl -58828 */
		/* 821AF084h case    5:*/		regs.LR = 0x821AF088; return 0x821A0AB8;
		/* 821AF084h case    5:*/		return 0x821AF088;
		  /* 821AF088h */ case    6:  		/* lwz R11, <#[R1 + 240]> */
		/* 821AF088h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821AF088h case    6:*/		return 0x821AF08C;
		  /* 821AF08Ch */ case    7:  		/* rlwinm. R11, R11, 0, 21, 27 */
		/* 821AF08Ch case    7:*/		cpu::op::rlwinm<1,0,21,27>(regs,&regs.R11,regs.R11);
		/* 821AF08Ch case    7:*/		return 0x821AF090;
		  /* 821AF090h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821AF090h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AF0A0;  }
		/* 821AF090h case    8:*/		return 0x821AF094;
		  /* 821AF094h */ case    9:  		/* mr R3, R16 */
		/* 821AF094h case    9:*/		regs.R3 = regs.R16;
		/* 821AF094h case    9:*/		return 0x821AF098;
		  /* 821AF098h */ case   10:  		/* lwz R4, <#[R30 + 12]> */
		/* 821AF098h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821AF098h case   10:*/		return 0x821AF09C;
		  /* 821AF09Ch */ case   11:  		/* bl -58852 */
		/* 821AF09Ch case   11:*/		regs.LR = 0x821AF0A0; return 0x821A0AB8;
		/* 821AF09Ch case   11:*/		return 0x821AF0A0;
	}
	return 0x821AF0A0;
} // Block from 821AF070h-821AF0A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0A0);
		  /* 821AF0A0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821AF0A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821AF0A0h case    0:*/		return 0x821AF0A4;
		  /* 821AF0A4h */ case    1:  		/* bc 12, CR6_EQ, -8152 */
		/* 821AF0A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AD0CC;  }
		/* 821AF0A4h case    1:*/		return 0x821AF0A8;
		  /* 821AF0A8h */ case    2:  		/* lwz R4, <#[R27 + 12]> */
		/* 821AF0A8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000000C) );
		/* 821AF0A8h case    2:*/		return 0x821AF0AC;
		  /* 821AF0ACh */ case    3:  		/* b -1284 */
		/* 821AF0ACh case    3:*/		return 0x821AEBA8;
		/* 821AF0ACh case    3:*/		return 0x821AF0B0;
	}
	return 0x821AF0B0;
} // Block from 821AF0A0h-821AF0B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0B0);
		  /* 821AF0B0h */ case    0:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821AF0B0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF0B0h case    0:*/		return 0x821AF0B4;
		  /* 821AF0B4h */ case    1:  		/* mr R3, R31 */
		/* 821AF0B4h case    1:*/		regs.R3 = regs.R31;
		/* 821AF0B4h case    1:*/		return 0x821AF0B8;
		  /* 821AF0B8h */ case    2:  		/* mr R4, R30 */
		/* 821AF0B8h case    2:*/		regs.R4 = regs.R30;
		/* 821AF0B8h case    2:*/		return 0x821AF0BC;
	}
	return 0x821AF0BC;
} // Block from 821AF0B0h-821AF0BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0BC);
		  /* 821AF0BCh */ case    0:  		/* bl -58884 */
		/* 821AF0BCh case    0:*/		regs.LR = 0x821AF0C0; return 0x821A0AB8;
		/* 821AF0BCh case    0:*/		return 0x821AF0C0;
	}
	return 0x821AF0C0;
} // Block from 821AF0BCh-821AF0C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0C0);
		  /* 821AF0C0h */ case    0:  		/* mr R3, R30 */
		/* 821AF0C0h case    0:*/		regs.R3 = regs.R30;
		/* 821AF0C0h case    0:*/		return 0x821AF0C4;
		  /* 821AF0C4h */ case    1:  		/* b -18140 */
		/* 821AF0C4h case    1:*/		return 0x821AA9E8;
		/* 821AF0C4h case    1:*/		return 0x821AF0C8;
	}
	return 0x821AF0C8;
} // Block from 821AF0C0h-821AF0C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0C8);
		  /* 821AF0C8h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821AF0C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821AF0C8h case    0:*/		return 0x821AF0CC;
		  /* 821AF0CCh */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AF0CCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF0DC;  }
		/* 821AF0CCh case    1:*/		return 0x821AF0D0;
		  /* 821AF0D0h */ case    2:  		/* lwz R11, <#[R26 + 8]> */
		/* 821AF0D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AF0D0h case    2:*/		return 0x821AF0D4;
		  /* 821AF0D4h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AF0D4h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AF0D4h case    3:*/		return 0x821AF0D8;
		  /* 821AF0D8h */ case    4:  		/* stw R11, <#[R26 + 8]> */
		/* 821AF0D8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AF0D8h case    4:*/		return 0x821AF0DC;
	}
	return 0x821AF0DC;
} // Block from 821AF0C8h-821AF0DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0DC);
		  /* 821AF0DCh */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821AF0DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821AF0DCh case    0:*/		return 0x821AF0E0;
		  /* 821AF0E0h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AF0E0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF0F4;  }
		/* 821AF0E0h case    1:*/		return 0x821AF0E4;
		  /* 821AF0E4h */ case    2:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AF0E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AF0E4h case    2:*/		return 0x821AF0E8;
		  /* 821AF0E8h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AF0E8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF0E8h case    3:*/		return 0x821AF0EC;
		  /* 821AF0ECh */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AF0ECh case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AF0ECh case    4:*/		return 0x821AF0F0;
		  /* 821AF0F0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AF0F0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF0F0h case    5:*/		return 0x821AF0F4;
	}
	return 0x821AF0F4;
} // Block from 821AF0DCh-821AF0F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF0F4);
		  /* 821AF0F4h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821AF0F4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821AF0F4h case    0:*/		return 0x821AF0F8;
		  /* 821AF0F8h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AF0F8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF10C;  }
		/* 821AF0F8h case    1:*/		return 0x821AF0FC;
		  /* 821AF0FCh */ case    2:  		/* lwz R11, <#[R1 + 124]> */
		/* 821AF0FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AF0FCh case    2:*/		return 0x821AF100;
		  /* 821AF100h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AF100h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF100h case    3:*/		return 0x821AF104;
		  /* 821AF104h */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AF104h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AF104h case    4:*/		return 0x821AF108;
		  /* 821AF108h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AF108h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF108h case    5:*/		return 0x821AF10C;
	}
	return 0x821AF10C;
} // Block from 821AF0F4h-821AF10Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF10C);
		  /* 821AF10Ch */ case    0:  		/* addi R4, R1, 544 */
		/* 821AF10Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x220);
		/* 821AF10Ch case    0:*/		return 0x821AF110;
		  /* 821AF110h */ case    1:  		/* mr R3, R27 */
		/* 821AF110h case    1:*/		regs.R3 = regs.R27;
		/* 821AF110h case    1:*/		return 0x821AF114;
		  /* 821AF114h */ case    2:  		/* lwz R5, <#[R1 + 112]> */
		/* 821AF114h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF114h case    2:*/		return 0x821AF118;
		  /* 821AF118h */ case    3:  		/* bl -26216 */
		/* 821AF118h case    3:*/		regs.LR = 0x821AF11C; return 0x821A8AB0;
		/* 821AF118h case    3:*/		return 0x821AF11C;
		  /* 821AF11Ch */ case    4:  		/* b -18228 */
		/* 821AF11Ch case    4:*/		return 0x821AA9E8;
		/* 821AF11Ch case    4:*/		return 0x821AF120;
	}
	return 0x821AF120;
} // Block from 821AF10Ch-821AF120h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AF120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF120);
		  /* 821AF120h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821AF120h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821AF120h case    0:*/		return 0x821AF124;
		  /* 821AF124h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AF124h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF134;  }
		/* 821AF124h case    1:*/		return 0x821AF128;
		  /* 821AF128h */ case    2:  		/* lwz R11, <#[R26 + 8]> */
		/* 821AF128h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AF128h case    2:*/		return 0x821AF12C;
		  /* 821AF12Ch */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AF12Ch case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AF12Ch case    3:*/		return 0x821AF130;
		  /* 821AF130h */ case    4:  		/* stw R11, <#[R26 + 8]> */
		/* 821AF130h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AF130h case    4:*/		return 0x821AF134;
	}
	return 0x821AF134;
} // Block from 821AF120h-821AF134h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AF134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF134);
		  /* 821AF134h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821AF134h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821AF134h case    0:*/		return 0x821AF138;
		  /* 821AF138h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AF138h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF14C;  }
		/* 821AF138h case    1:*/		return 0x821AF13C;
		  /* 821AF13Ch */ case    2:  		/* lwz R11, <#[R1 + 116]> */
		/* 821AF13Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821AF13Ch case    2:*/		return 0x821AF140;
		  /* 821AF140h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AF140h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF140h case    3:*/		return 0x821AF144;
		  /* 821AF144h */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AF144h case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AF144h case    4:*/		return 0x821AF148;
		  /* 821AF148h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AF148h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF148h case    5:*/		return 0x821AF14C;
	}
	return 0x821AF14C;
} // Block from 821AF134h-821AF14Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF14C);
		  /* 821AF14Ch */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821AF14Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821AF14Ch case    0:*/		return 0x821AF150;
		  /* 821AF150h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821AF150h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF164;  }
		/* 821AF150h case    1:*/		return 0x821AF154;
		  /* 821AF154h */ case    2:  		/* lwz R11, <#[R1 + 124]> */
		/* 821AF154h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821AF154h case    2:*/		return 0x821AF158;
		  /* 821AF158h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AF158h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF158h case    3:*/		return 0x821AF15C;
		  /* 821AF15Ch */ case    4:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821AF15Ch case    4:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821AF15Ch case    4:*/		return 0x821AF160;
		  /* 821AF160h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AF160h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF160h case    5:*/		return 0x821AF164;
	}
	return 0x821AF164;
} // Block from 821AF14Ch-821AF164h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF164);
		  /* 821AF164h */ case    0:  		/* addi R4, R1, 768 */
		/* 821AF164h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x300);
		/* 821AF164h case    0:*/		return 0x821AF168;
		  /* 821AF168h */ case    1:  		/* b -88 */
		/* 821AF168h case    1:*/		return 0x821AF110;
		/* 821AF168h case    1:*/		return 0x821AF16C;
	}
	return 0x821AF16C;
} // Block from 821AF164h-821AF16Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF16C);
		  /* 821AF16Ch */ case    0:  		/* lwz R11, <#[R18 + 8]> */
		/* 821AF16Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821AF16Ch case    0:*/		return 0x821AF170;
		  /* 821AF170h */ case    1:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821AF170h case    1:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821AF170h case    1:*/		return 0x821AF174;
		  /* 821AF174h */ case    2:  		/* cmplwi CR6, R11, 32768 */
		/* 821AF174h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00008000);
		/* 821AF174h case    2:*/		return 0x821AF178;
		  /* 821AF178h */ case    3:  		/* bc 4, CR6_EQ, -18324 */
		/* 821AF178h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821AF178h case    3:*/		return 0x821AF17C;
		  /* 821AF17Ch */ case    4:  		/* li R11, 0 */
		/* 821AF17Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AF17Ch case    4:*/		return 0x821AF180;
		  /* 821AF180h */ case    5:  		/* lwz R10, <#[R18 + 8]> */
		/* 821AF180h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 821AF180h case    5:*/		return 0x821AF184;
		  /* 821AF184h */ case    6:  		/* stw R11, <#[R1 + 152]> */
		/* 821AF184h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821AF184h case    6:*/		return 0x821AF188;
		  /* 821AF188h */ case    7:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821AF188h case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821AF188h case    7:*/		return 0x821AF18C;
		  /* 821AF18Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821AF18Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821AF18Ch case    8:*/		return 0x821AF190;
		  /* 821AF190h */ case    9:  		/* bc 4, CR6_LT, -18348 */
		/* 821AF190h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821AA9E4;  }
		/* 821AF190h case    9:*/		return 0x821AF194;
		  /* 821AF194h */ case   10:  		/* addi R11, R11, 11 */
		/* 821AF194h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821AF194h case   10:*/		return 0x821AF198;
		  /* 821AF198h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821AF198h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821AF198h case   11:*/		return 0x821AF19C;
		  /* 821AF19Ch */ case   12:  		/* lwzx R11, <#[R11 + R18]> */
		/* 821AF19Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 821AF19Ch case   12:*/		return 0x821AF1A0;
		  /* 821AF1A0h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821AF1A0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF1A0h case   13:*/		return 0x821AF1A4;
		  /* 821AF1A4h */ case   14:  		/* stw R11, <#[R1 + 256]> */
		/* 821AF1A4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 821AF1A4h case   14:*/		return 0x821AF1A8;
		  /* 821AF1A8h */ case   15:  		/* rlwinm. R10, R10, 0, 27, 31 */
		/* 821AF1A8h case   15:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821AF1A8h case   15:*/		return 0x821AF1AC;
		  /* 821AF1ACh */ case   16:  		/* bc 4, CR0_EQ, 1916 */
		/* 821AF1ACh case   16:*/		if ( !regs.CR[0].eq ) { return 0x821AF928;  }
		/* 821AF1ACh case   16:*/		return 0x821AF1B0;
		  /* 821AF1B0h */ case   17:  		/* lwz R17, <#[R11 + 12]> */
		/* 821AF1B0h case   17:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AF1B0h case   17:*/		return 0x821AF1B4;
		  /* 821AF1B4h */ case   18:  		/* lwz R11, <#[R17 + 8]> */
		/* 821AF1B4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821AF1B4h case   18:*/		return 0x821AF1B8;
		  /* 821AF1B8h */ case   19:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821AF1B8h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821AF1B8h case   19:*/		return 0x821AF1BC;
		  /* 821AF1BCh */ case   20:  		/* cmplwi CR6, R10, 128 */
		/* 821AF1BCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 821AF1BCh case   20:*/		return 0x821AF1C0;
		  /* 821AF1C0h */ case   21:  		/* bc 4, CR6_EQ, 1896 */
		/* 821AF1C0h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821AF928;  }
		/* 821AF1C0h case   21:*/		return 0x821AF1C4;
		  /* 821AF1C4h */ case   22:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821AF1C4h case   22:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821AF1C4h case   22:*/		return 0x821AF1C8;
		  /* 821AF1C8h */ case   23:  		/* cmplwi CR6, R11, 32768 */
		/* 821AF1C8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00008000);
		/* 821AF1C8h case   23:*/		return 0x821AF1CC;
		  /* 821AF1CCh */ case   24:  		/* bc 4, CR6_EQ, 1884 */
		/* 821AF1CCh case   24:*/		if ( !regs.CR[6].eq ) { return 0x821AF928;  }
		/* 821AF1CCh case   24:*/		return 0x821AF1D0;
		  /* 821AF1D0h */ case   25:  		/* lwz R10, <#[R17 + 4]> */
		/* 821AF1D0h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000004) );
		/* 821AF1D0h case   25:*/		return 0x821AF1D4;
		  /* 821AF1D4h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 821AF1D4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AF1D4h case   26:*/		return 0x821AF1D8;
		  /* 821AF1D8h */ case   27:  		/* bc 12, CR6_EQ, 40 */
		/* 821AF1D8h case   27:*/		if ( regs.CR[6].eq ) { return 0x821AF200;  }
		/* 821AF1D8h case   27:*/		return 0x821AF1DC;
		  /* 821AF1DCh */ case   28:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AF1DCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AF1DCh case   28:*/		return 0x821AF1E0;
		  /* 821AF1E0h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821AF1E0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AF1E0h case   29:*/		return 0x821AF1E4;
		  /* 821AF1E4h */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 821AF1E4h case   30:*/		if ( regs.CR[6].eq ) { return 0x821AF1F0;  }
		/* 821AF1E4h case   30:*/		return 0x821AF1E8;
		  /* 821AF1E8h */ case   31:  		/* cmplw CR6, R11, R18 */
		/* 821AF1E8h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821AF1E8h case   31:*/		return 0x821AF1EC;
		  /* 821AF1ECh */ case   32:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF1ECh case   32:*/		if ( !regs.CR[6].eq ) { return 0x821AF1F8;  }
		/* 821AF1ECh case   32:*/		return 0x821AF1F0;
	}
	return 0x821AF1F0;
} // Block from 821AF16Ch-821AF1F0h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821AF1F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF1F0);
		  /* 821AF1F0h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AF1F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AF1F0h case    0:*/		return 0x821AF1F4;
		  /* 821AF1F4h */ case    1:  		/* b -32 */
		/* 821AF1F4h case    1:*/		return 0x821AF1D4;
		/* 821AF1F4h case    1:*/		return 0x821AF1F8;
	}
	return 0x821AF1F8;
} // Block from 821AF1F0h-821AF1F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF1F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF1F8);
		  /* 821AF1F8h */ case    0:  		/* li R11, 1 */
		/* 821AF1F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AF1F8h case    0:*/		return 0x821AF1FC;
		  /* 821AF1FCh */ case    1:  		/* b 8 */
		/* 821AF1FCh case    1:*/		return 0x821AF204;
		/* 821AF1FCh case    1:*/		return 0x821AF200;
	}
	return 0x821AF200;
} // Block from 821AF1F8h-821AF200h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF200);
		  /* 821AF200h */ case    0:  		/* li R11, 0 */
		/* 821AF200h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AF200h case    0:*/		return 0x821AF204;
	}
	return 0x821AF204;
} // Block from 821AF200h-821AF204h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AF204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF204);
		  /* 821AF204h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AF204h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AF204h case    0:*/		return 0x821AF208;
		  /* 821AF208h */ case    1:  		/* bc 4, CR0_EQ, 1824 */
		/* 821AF208h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF928;  }
		/* 821AF208h case    1:*/		return 0x821AF20C;
		  /* 821AF20Ch */ case    2:  		/* li R14, 0 */
		/* 821AF20Ch case    2:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 821AF20Ch case    2:*/		return 0x821AF210;
		  /* 821AF210h */ case    3:  		/* addi R11, R17, 44 */
		/* 821AF210h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x2C);
		/* 821AF210h case    3:*/		return 0x821AF214;
		  /* 821AF214h */ case    4:  		/* addi R15, R17, 48 */
		/* 821AF214h case    4:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R17,0x30);
		/* 821AF214h case    4:*/		return 0x821AF218;
		  /* 821AF218h */ case    5:  		/* lwz R10, <#[R17 + 8]> */
		/* 821AF218h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 821AF218h case    5:*/		return 0x821AF21C;
		  /* 821AF21Ch */ case    6:  		/* stw R11, <#[R1 + 120]> */
		/* 821AF21Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821AF21Ch case    6:*/		return 0x821AF220;
		  /* 821AF220h */ case    7:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821AF220h case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821AF220h case    7:*/		return 0x821AF224;
		  /* 821AF224h */ case    8:  		/* stw R14, <#[R1 + 184]> */
		/* 821AF224h case    8:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AF224h case    8:*/		return 0x821AF228;
		  /* 821AF228h */ case    9:  		/* cmplw CR6, R14, R10 */
		/* 821AF228h case    9:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R10);
		/* 821AF228h case    9:*/		return 0x821AF22C;
		  /* 821AF22Ch */ case   10:  		/* bc 4, CR6_LT, 1788 */
		/* 821AF22Ch case   10:*/		if ( !regs.CR[6].lt ) { return 0x821AF928;  }
		/* 821AF22Ch case   10:*/		return 0x821AF230;
		  /* 821AF230h */ case   11:  		/* lwz R28, <#[R11]> */
		/* 821AF230h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF230h case   11:*/		return 0x821AF234;
		  /* 821AF234h */ case   12:  		/* lwz R11, <#[R28]> */
		/* 821AF234h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AF234h case   12:*/		return 0x821AF238;
		  /* 821AF238h */ case   13:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AF238h case   13:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AF238h case   13:*/		return 0x821AF23C;
		  /* 821AF23Ch */ case   14:  		/* bc 4, CR0_EQ, 1748 */
		/* 821AF23Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF23Ch case   14:*/		return 0x821AF240;
		  /* 821AF240h */ case   15:  		/* lwz R30, <#[R28 + 12]> */
		/* 821AF240h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x0000000C) );
		/* 821AF240h case   15:*/		return 0x821AF244;
		  /* 821AF244h */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AF244h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AF244h case   16:*/		return 0x821AF248;
		  /* 821AF248h */ case   17:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821AF248h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821AF248h case   17:*/		return 0x821AF24C;
		  /* 821AF24Ch */ case   18:  		/* cmplwi CR6, R10, 2 */
		/* 821AF24Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821AF24Ch case   18:*/		return 0x821AF250;
		  /* 821AF250h */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 821AF250h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821AF260;  }
		/* 821AF250h case   19:*/		return 0x821AF254;
		  /* 821AF254h */ case   20:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821AF254h case   20:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821AF254h case   20:*/		return 0x821AF258;
		  /* 821AF258h */ case   21:  		/* cmplwi CR6, R11, 32768 */
		/* 821AF258h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00008000);
		/* 821AF258h case   21:*/		return 0x821AF25C;
		  /* 821AF25Ch */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF25Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x821AF268;  }
		/* 821AF25Ch case   22:*/		return 0x821AF260;
	}
	return 0x821AF260;
} // Block from 821AF204h-821AF260h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821AF260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF260);
		  /* 821AF260h */ case    0:  		/* cmplwi CR6, R10, 110 */
		/* 821AF260h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000006E);
		/* 821AF260h case    0:*/		return 0x821AF264;
		  /* 821AF264h */ case    1:  		/* bc 4, CR6_EQ, 1708 */
		/* 821AF264h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF264h case    1:*/		return 0x821AF268;
	}
	return 0x821AF268;
} // Block from 821AF260h-821AF268h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF268);
		  /* 821AF268h */ case    0:  		/* lwz R10, <#[R30 + 4]> */
		/* 821AF268h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821AF268h case    0:*/		return 0x821AF26C;
		  /* 821AF26Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821AF26Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AF26Ch case    1:*/		return 0x821AF270;
		  /* 821AF270h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 821AF270h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AF298;  }
		/* 821AF270h case    2:*/		return 0x821AF274;
		  /* 821AF274h */ case    3:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AF274h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AF274h case    3:*/		return 0x821AF278;
		  /* 821AF278h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821AF278h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AF278h case    4:*/		return 0x821AF27C;
		  /* 821AF27Ch */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821AF27Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821AF290;  }
		/* 821AF27Ch case    5:*/		return 0x821AF280;
		  /* 821AF280h */ case    6:  		/* cmplw CR6, R11, R18 */
		/* 821AF280h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821AF280h case    6:*/		return 0x821AF284;
		  /* 821AF284h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821AF284h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AF290;  }
		/* 821AF284h case    7:*/		return 0x821AF288;
		  /* 821AF288h */ case    8:  		/* cmplw CR6, R11, R17 */
		/* 821AF288h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 821AF288h case    8:*/		return 0x821AF28C;
		  /* 821AF28Ch */ case    9:  		/* bc 4, CR6_EQ, 1668 */
		/* 821AF28Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF28Ch case    9:*/		return 0x821AF290;
	}
	return 0x821AF290;
} // Block from 821AF268h-821AF290h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821AF290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF290);
		  /* 821AF290h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AF290h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AF290h case    0:*/		return 0x821AF294;
		  /* 821AF294h */ case    1:  		/* b -40 */
		/* 821AF294h case    1:*/		return 0x821AF26C;
		/* 821AF294h case    1:*/		return 0x821AF298;
	}
	return 0x821AF298;
} // Block from 821AF290h-821AF298h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF298);
		  /* 821AF298h */ case    0:  		/* lwz R11, <#[R1 + 152]> */
		/* 821AF298h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821AF298h case    0:*/		return 0x821AF29C;
		  /* 821AF29Ch */ case    1:  		/* mr R19, R17 */
		/* 821AF29Ch case    1:*/		regs.R19 = regs.R17;
		/* 821AF29Ch case    1:*/		return 0x821AF2A0;
		  /* 821AF2A0h */ case    2:  		/* lwz R10, <#[R1 + 1244]> */
		/* 821AF2A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF2A0h case    2:*/		return 0x821AF2A4;
		  /* 821AF2A4h */ case    3:  		/* subfic R11, R11, 12 */
		/* 821AF2A4h case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821AF2A4h case    3:*/		return 0x821AF2A8;
		  /* 821AF2A8h */ case    4:  		/* lwz R18, <#[R15]> */
		/* 821AF2A8h case    4:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R15 + 0x00000000) );
		/* 821AF2A8h case    4:*/		return 0x821AF2AC;
		  /* 821AF2ACh */ case    5:  		/* mr R31, R10 */
		/* 821AF2ACh case    5:*/		regs.R31 = regs.R10;
		/* 821AF2ACh case    5:*/		return 0x821AF2B0;
		  /* 821AF2B0h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821AF2B0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821AF2B0h case    6:*/		return 0x821AF2B4;
		  /* 821AF2B4h */ case    7:  		/* lwzx R29, <#[R11 + R10]> */
		/* 821AF2B4h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821AF2B4h case    7:*/		return 0x821AF2B8;
		  /* 821AF2B8h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821AF2B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF2B8h case    8:*/		return 0x821AF2BC;
		  /* 821AF2BCh */ case    9:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AF2BCh case    9:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AF2BCh case    9:*/		return 0x821AF2C0;
		  /* 821AF2C0h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821AF2C0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821AF2D0;  }
		/* 821AF2C0h case   10:*/		return 0x821AF2C4;
		  /* 821AF2C4h */ case   11:  		/* lwz R11, <#[R29 + 12]> */
		/* 821AF2C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AF2C4h case   11:*/		return 0x821AF2C8;
		  /* 821AF2C8h */ case   12:  		/* cmplw CR6, R11, R30 */
		/* 821AF2C8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AF2C8h case   12:*/		return 0x821AF2CC;
		  /* 821AF2CCh */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 821AF2CCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821AF2E4;  }
		/* 821AF2CCh case   13:*/		return 0x821AF2D0;
	}
	return 0x821AF2D0;
} // Block from 821AF298h-821AF2D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AF2D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF2D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF2D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF2D0);
		  /* 821AF2D0h */ case    0:  		/* mr R11, R29 */
		/* 821AF2D0h case    0:*/		regs.R11 = regs.R29;
		/* 821AF2D0h case    0:*/		return 0x821AF2D4;
		  /* 821AF2D4h */ case    1:  		/* mr R29, R18 */
		/* 821AF2D4h case    1:*/		regs.R29 = regs.R18;
		/* 821AF2D4h case    1:*/		return 0x821AF2D8;
		  /* 821AF2D8h */ case    2:  		/* mr R18, R11 */
		/* 821AF2D8h case    2:*/		regs.R18 = regs.R11;
		/* 821AF2D8h case    2:*/		return 0x821AF2DC;
		  /* 821AF2DCh */ case    3:  		/* mr R31, R17 */
		/* 821AF2DCh case    3:*/		regs.R31 = regs.R17;
		/* 821AF2DCh case    3:*/		return 0x821AF2E0;
		  /* 821AF2E0h */ case    4:  		/* mr R19, R10 */
		/* 821AF2E0h case    4:*/		regs.R19 = regs.R10;
		/* 821AF2E0h case    4:*/		return 0x821AF2E4;
	}
	return 0x821AF2E4;
} // Block from 821AF2D0h-821AF2E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AF2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF2E4);
		  /* 821AF2E4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AF2E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF2E4h case    0:*/		return 0x821AF2E8;
		  /* 821AF2E8h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AF2E8h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AF2E8h case    1:*/		return 0x821AF2EC;
		  /* 821AF2ECh */ case    2:  		/* bc 4, CR0_EQ, 1572 */
		/* 821AF2ECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF2ECh case    2:*/		return 0x821AF2F0;
		  /* 821AF2F0h */ case    3:  		/* lwz R11, <#[R29 + 12]> */
		/* 821AF2F0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AF2F0h case    3:*/		return 0x821AF2F4;
		  /* 821AF2F4h */ case    4:  		/* cmplw CR6, R11, R30 */
		/* 821AF2F4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AF2F4h case    4:*/		return 0x821AF2F8;
		  /* 821AF2F8h */ case    5:  		/* bc 4, CR6_EQ, 1560 */
		/* 821AF2F8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF2F8h case    5:*/		return 0x821AF2FC;
		  /* 821AF2FCh */ case    6:  		/* lwz R4, <#[R1 + 1244]> */
		/* 821AF2FCh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF2FCh case    6:*/		return 0x821AF300;
		  /* 821AF300h */ case    7:  		/* mr R3, R16 */
		/* 821AF300h case    7:*/		regs.R3 = regs.R16;
		/* 821AF300h case    7:*/		return 0x821AF304;
		  /* 821AF304h */ case    8:  		/* lwz R11, <#[R4 + 8]> */
		/* 821AF304h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821AF304h case    8:*/		return 0x821AF308;
		  /* 821AF308h */ case    9:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821AF308h case    9:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821AF308h case    9:*/		return 0x821AF30C;
		  /* 821AF30Ch */ case   10:  		/* addi R10, R11, -1 */
		/* 821AF30Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821AF30Ch case   10:*/		return 0x821AF310;
		  /* 821AF310h */ case   11:  		/* andc R10, R11, R10 */
		/* 821AF310h case   11:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821AF310h case   11:*/		return 0x821AF314;
		  /* 821AF314h */ case   12:  		/* subf R11, R10, R11 */
		/* 821AF314h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AF314h case   12:*/		return 0x821AF318;
		  /* 821AF318h */ case   13:  		/* cntlzw R10, R10 */
		/* 821AF318h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821AF318h case   13:*/		return 0x821AF31C;
		  /* 821AF31Ch */ case   14:  		/* addi R9, R11, -1 */
		/* 821AF31Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821AF31Ch case   14:*/		return 0x821AF320;
		  /* 821AF320h */ case   15:  		/* subfic R21, R10, 31 */
		/* 821AF320h case   15:*/		cpu::op::subfic<0>(regs,&regs.R21,regs.R10,0x1F);
		/* 821AF320h case   15:*/		return 0x821AF324;
		  /* 821AF324h */ case   16:  		/* andc R11, R11, R9 */
		/* 821AF324h case   16:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AF324h case   16:*/		return 0x821AF328;
		  /* 821AF328h */ case   17:  		/* mr R5, R21 */
		/* 821AF328h case   17:*/		regs.R5 = regs.R21;
		/* 821AF328h case   17:*/		return 0x821AF32C;
		  /* 821AF32Ch */ case   18:  		/* cntlzw R11, R11 */
		/* 821AF32Ch case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821AF32Ch case   18:*/		return 0x821AF330;
		  /* 821AF330h */ case   19:  		/* subfic R20, R11, 31 */
		/* 821AF330h case   19:*/		cpu::op::subfic<0>(regs,&regs.R20,regs.R11,0x1F);
		/* 821AF330h case   19:*/		return 0x821AF334;
		  /* 821AF334h */ case   20:  		/* bl -77508 */
		/* 821AF334h case   20:*/		regs.LR = 0x821AF338; return 0x8219C470;
		/* 821AF334h case   20:*/		return 0x821AF338;
		  /* 821AF338h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF338h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF338h case   21:*/		return 0x821AF33C;
		  /* 821AF33Ch */ case   22:  		/* bc 12, CR0_EQ, 1516 */
		/* 821AF33Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821AF928;  }
		/* 821AF33Ch case   22:*/		return 0x821AF340;
		  /* 821AF340h */ case   23:  		/* mr R5, R20 */
		/* 821AF340h case   23:*/		regs.R5 = regs.R20;
		/* 821AF340h case   23:*/		return 0x821AF344;
		  /* 821AF344h */ case   24:  		/* lwz R4, <#[R1 + 1244]> */
		/* 821AF344h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF344h case   24:*/		return 0x821AF348;
		  /* 821AF348h */ case   25:  		/* mr R3, R16 */
		/* 821AF348h case   25:*/		regs.R3 = regs.R16;
		/* 821AF348h case   25:*/		return 0x821AF34C;
		  /* 821AF34Ch */ case   26:  		/* bl -77532 */
		/* 821AF34Ch case   26:*/		regs.LR = 0x821AF350; return 0x8219C470;
		/* 821AF34Ch case   26:*/		return 0x821AF350;
		  /* 821AF350h */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF350h case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF350h case   27:*/		return 0x821AF354;
		  /* 821AF354h */ case   28:  		/* bc 12, CR0_EQ, 1492 */
		/* 821AF354h case   28:*/		if ( regs.CR[0].eq ) { return 0x821AF928;  }
		/* 821AF354h case   28:*/		return 0x821AF358;
		  /* 821AF358h */ case   29:  		/* lwz R11, <#[R1 + 256]> */
		/* 821AF358h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 821AF358h case   29:*/		return 0x821AF35C;
		  /* 821AF35Ch */ case   30:  		/* rlwinm R8, R21, 1, 0, 30 */
		/* 821AF35Ch case   30:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R21);
		/* 821AF35Ch case   30:*/		return 0x821AF360;
		  /* 821AF360h */ case   31:  		/* rlwinm R7, R20, 1, 0, 30 */
		/* 821AF360h case   31:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R20);
		/* 821AF360h case   31:*/		return 0x821AF364;
		  /* 821AF364h */ case   32:  		/* mr R24, R30 */
		/* 821AF364h case   32:*/		regs.R24 = regs.R30;
		/* 821AF364h case   32:*/		return 0x821AF368;
		  /* 821AF368h */ case   33:  		/* mr R23, R30 */
		/* 821AF368h case   33:*/		regs.R23 = regs.R30;
		/* 821AF368h case   33:*/		return 0x821AF36C;
		  /* 821AF36Ch */ case   34:  		/* mr R10, R21 */
		/* 821AF36Ch case   34:*/		regs.R10 = regs.R21;
		/* 821AF36Ch case   34:*/		return 0x821AF370;
		  /* 821AF370h */ case   35:  		/* lwz R11, <#[R11]> */
		/* 821AF370h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF370h case   35:*/		return 0x821AF374;
		  /* 821AF374h */ case   36:  		/* mr R9, R20 */
		/* 821AF374h case   36:*/		regs.R9 = regs.R20;
		/* 821AF374h case   36:*/		return 0x821AF378;
		  /* 821AF378h */ case   37:  		/* cmplw CR6, R31, R17 */
		/* 821AF378h case   37:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R17);
		/* 821AF378h case   37:*/		return 0x821AF37C;
		  /* 821AF37Ch */ case   38:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821AF37Ch case   38:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821AF37Ch case   38:*/		return 0x821AF380;
		  /* 821AF380h */ case   39:  		/* srw R8, R11, R8 */
		/* 821AF380h case   39:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821AF380h case   39:*/		return 0x821AF384;
		  /* 821AF384h */ case   40:  		/* srw R11, R11, R7 */
		/* 821AF384h case   40:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821AF384h case   40:*/		return 0x821AF388;
		  /* 821AF388h */ case   41:  		/* rlwinm R22, R8, 0, 30, 31 */
		/* 821AF388h case   41:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R22,regs.R8);
		/* 821AF388h case   41:*/		return 0x821AF38C;
		  /* 821AF38Ch */ case   42:  		/* rlwinm R25, R11, 0, 30, 31 */
		/* 821AF38Ch case   42:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R25,regs.R11);
		/* 821AF38Ch case   42:*/		return 0x821AF390;
		  /* 821AF390h */ case   43:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF390h case   43:*/		if ( !regs.CR[6].eq ) { return 0x821AF39C;  }
		/* 821AF390h case   43:*/		return 0x821AF394;
		  /* 821AF394h */ case   44:  		/* mr R10, R22 */
		/* 821AF394h case   44:*/		regs.R10 = regs.R22;
		/* 821AF394h case   44:*/		return 0x821AF398;
		  /* 821AF398h */ case   45:  		/* mr R9, R25 */
		/* 821AF398h case   45:*/		regs.R9 = regs.R25;
		/* 821AF398h case   45:*/		return 0x821AF39C;
	}
	return 0x821AF39C;
} // Block from 821AF2E4h-821AF39Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 821AF39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF39C);
		  /* 821AF39Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AF39Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AF39Ch case    0:*/		return 0x821AF3A0;
		  /* 821AF3A0h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AF3A0h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AF3A0h case    1:*/		return 0x821AF3A4;
		  /* 821AF3A4h */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821AF3A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821AF3A4h case    2:*/		return 0x821AF3A8;
		  /* 821AF3A8h */ case    3:  		/* bc 12, CR6_EQ, 212 */
		/* 821AF3A8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AF47C;  }
		/* 821AF3A8h case    3:*/		return 0x821AF3AC;
		  /* 821AF3ACh */ case    4:  		/* lwz R11, <#[R30 + 44]> */
		/* 821AF3ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821AF3ACh case    4:*/		return 0x821AF3B0;
		  /* 821AF3B0h */ case    5:  		/* rlwinm R8, R10, 1, 0, 30 */
		/* 821AF3B0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R10);
		/* 821AF3B0h case    5:*/		return 0x821AF3B4;
		  /* 821AF3B4h */ case    6:  		/* lwz R10, <#[R29]> */
		/* 821AF3B4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF3B4h case    6:*/		return 0x821AF3B8;
		  /* 821AF3B8h */ case    7:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 821AF3B8h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 821AF3B8h case    7:*/		return 0x821AF3BC;
		  /* 821AF3BCh */ case    8:  		/* lwz R14, <#[R1 + 184]> */
		/* 821AF3BCh case    8:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AF3BCh case    8:*/		return 0x821AF3C0;
		  /* 821AF3C0h */ case    9:  		/* rlwinm R7, R22, 1, 0, 30 */
		/* 821AF3C0h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R22);
		/* 821AF3C0h case    9:*/		return 0x821AF3C4;
		  /* 821AF3C4h */ case   10:  		/* rlwinm R4, R10, 27, 24, 31 */
		/* 821AF3C4h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R10);
		/* 821AF3C4h case   10:*/		return 0x821AF3C8;
		  /* 821AF3C8h */ case   11:  		/* lwz R6, <#[R28]> */
		/* 821AF3C8h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 821AF3C8h case   11:*/		return 0x821AF3CC;
		  /* 821AF3CCh */ case   12:  		/* lwz R31, <#[R30 + 48]> */
		/* 821AF3CCh case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000030) );
		/* 821AF3CCh case   12:*/		return 0x821AF3D0;
		  /* 821AF3D0h */ case   13:  		/* rlwinm R5, R25, 1, 0, 30 */
		/* 821AF3D0h case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R25);
		/* 821AF3D0h case   13:*/		return 0x821AF3D4;
		  /* 821AF3D4h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 821AF3D4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF3D4h case   14:*/		return 0x821AF3D8;
		  /* 821AF3D8h */ case   15:  		/* rlwinm R6, R6, 27, 24, 31 */
		/* 821AF3D8h case   15:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R6);
		/* 821AF3D8h case   15:*/		return 0x821AF3DC;
		  /* 821AF3DCh */ case   16:  		/* srw R8, R4, R8 */
		/* 821AF3DCh case   16:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 821AF3DCh case   16:*/		return 0x821AF3E0;
		  /* 821AF3E0h */ case   17:  		/* std R10, <#[R1 + 184]> */
		/* 821AF3E0h case   17:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AF3E0h case   17:*/		return 0x821AF3E4;
		  /* 821AF3E4h */ case   18:  		/* srw R7, R6, R7 */
		/* 821AF3E4h case   18:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821AF3E4h case   18:*/		return 0x821AF3E8;
		  /* 821AF3E8h */ case   19:  		/* srw R9, R4, R9 */
		/* 821AF3E8h case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 821AF3E8h case   19:*/		return 0x821AF3EC;
		  /* 821AF3ECh */ case   20:  		/* lwz R3, <#[R31]> */
		/* 821AF3ECh case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821AF3ECh case   20:*/		return 0x821AF3F0;
		  /* 821AF3F0h */ case   21:  		/* srw R6, R6, R5 */
		/* 821AF3F0h case   21:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 821AF3F0h case   21:*/		return 0x821AF3F4;
		  /* 821AF3F4h */ case   22:  		/* rlwinm R5, R10, 27, 24, 31 */
		/* 821AF3F4h case   22:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R10);
		/* 821AF3F4h case   22:*/		return 0x821AF3F8;
		  /* 821AF3F8h */ case   23:  		/* rlwinm R8, R8, 1, 29, 30 */
		/* 821AF3F8h case   23:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R8,regs.R8);
		/* 821AF3F8h case   23:*/		return 0x821AF3FC;
		  /* 821AF3FCh */ case   24:  		/* rlwinm R9, R9, 1, 29, 30 */
		/* 821AF3FCh case   24:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R9,regs.R9);
		/* 821AF3FCh case   24:*/		return 0x821AF400;
		  /* 821AF400h */ case   25:  		/* rlwinm R7, R7, 1, 29, 30 */
		/* 821AF400h case   25:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R7,regs.R7);
		/* 821AF400h case   25:*/		return 0x821AF404;
		  /* 821AF404h */ case   26:  		/* rlwinm R4, R3, 27, 24, 31 */
		/* 821AF404h case   26:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R3);
		/* 821AF404h case   26:*/		return 0x821AF408;
		  /* 821AF408h */ case   27:  		/* rlwinm R6, R6, 1, 29, 30 */
		/* 821AF408h case   27:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R6,regs.R6);
		/* 821AF408h case   27:*/		return 0x821AF40C;
		  /* 821AF40Ch */ case   28:  		/* srw R28, R5, R9 */
		/* 821AF40Ch case   28:*/		cpu::op::srw<0>(regs,&regs.R28,regs.R5,regs.R9);
		/* 821AF40Ch case   28:*/		return 0x821AF410;
		  /* 821AF410h */ case   29:  		/* srw R3, R5, R8 */
		/* 821AF410h case   29:*/		cpu::op::srw<0>(regs,&regs.R3,regs.R5,regs.R8);
		/* 821AF410h case   29:*/		return 0x821AF414;
		  /* 821AF414h */ case   30:  		/* srw R29, R5, R7 */
		/* 821AF414h case   30:*/		cpu::op::srw<0>(regs,&regs.R29,regs.R5,regs.R7);
		/* 821AF414h case   30:*/		return 0x821AF418;
		  /* 821AF418h */ case   31:  		/* srw R5, R5, R6 */
		/* 821AF418h case   31:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R5,regs.R6);
		/* 821AF418h case   31:*/		return 0x821AF41C;
		  /* 821AF41Ch */ case   32:  		/* srw R9, R4, R9 */
		/* 821AF41Ch case   32:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 821AF41Ch case   32:*/		return 0x821AF420;
		  /* 821AF420h */ case   33:  		/* li R27, 224 */
		/* 821AF420h case   33:*/		cpu::op::li<0>(regs,&regs.R27,0xE0);
		/* 821AF420h case   33:*/		return 0x821AF424;
		  /* 821AF424h */ case   34:  		/* li R10, 224 */
		/* 821AF424h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0xE0);
		/* 821AF424h case   34:*/		return 0x821AF428;
		  /* 821AF428h */ case   35:  		/* srw R8, R4, R8 */
		/* 821AF428h case   35:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 821AF428h case   35:*/		return 0x821AF42C;
		  /* 821AF42Ch */ case   36:  		/* srw R6, R4, R6 */
		/* 821AF42Ch case   36:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R4,regs.R6);
		/* 821AF42Ch case   36:*/		return 0x821AF430;
		  /* 821AF430h */ case   37:  		/* li R30, 224 */
		/* 821AF430h case   37:*/		cpu::op::li<0>(regs,&regs.R30,0xE0);
		/* 821AF430h case   37:*/		return 0x821AF434;
		  /* 821AF434h */ case   38:  		/* li R26, 224 */
		/* 821AF434h case   38:*/		cpu::op::li<0>(regs,&regs.R26,0xE0);
		/* 821AF434h case   38:*/		return 0x821AF438;
		  /* 821AF438h */ case   39:  		/* srw R7, R4, R7 */
		/* 821AF438h case   39:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R4,regs.R7);
		/* 821AF438h case   39:*/		return 0x821AF43C;
		  /* 821AF43Ch */ case   40:  		/* rlwimi R10, R9, 2, 28, 29 */
		/* 821AF43Ch case   40:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R10,regs.R9);
		/* 821AF43Ch case   40:*/		return 0x821AF440;
		  /* 821AF440h */ case   41:  		/* rlwimi R27, R28, 2, 28, 29 */
		/* 821AF440h case   41:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R27,regs.R28);
		/* 821AF440h case   41:*/		return 0x821AF444;
		  /* 821AF444h */ case   42:  		/* rlwinm R5, R5, 0, 30, 31 */
		/* 821AF444h case   42:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R5);
		/* 821AF444h case   42:*/		return 0x821AF448;
		  /* 821AF448h */ case   43:  		/* rlwimi R30, R3, 2, 28, 29 */
		/* 821AF448h case   43:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R30,regs.R3);
		/* 821AF448h case   43:*/		return 0x821AF44C;
		  /* 821AF44Ch */ case   44:  		/* rlwinm R4, R29, 0, 30, 31 */
		/* 821AF44Ch case   44:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R29);
		/* 821AF44Ch case   44:*/		return 0x821AF450;
		  /* 821AF450h */ case   45:  		/* rlwimi R26, R8, 2, 28, 29 */
		/* 821AF450h case   45:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R26,regs.R8);
		/* 821AF450h case   45:*/		return 0x821AF454;
		  /* 821AF454h */ case   46:  		/* rlwinm R9, R6, 0, 30, 31 */
		/* 821AF454h case   46:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R6);
		/* 821AF454h case   46:*/		return 0x821AF458;
		  /* 821AF458h */ case   47:  		/* rlwinm R8, R7, 0, 30, 31 */
		/* 821AF458h case   47:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R7);
		/* 821AF458h case   47:*/		return 0x821AF45C;
		  /* 821AF45Ch */ case   48:  		/* or R28, R27, R5 */
		/* 821AF45Ch case   48:*/		cpu::op::or<0>(regs,&regs.R28,regs.R27,regs.R5);
		/* 821AF45Ch case   48:*/		return 0x821AF460;
		  /* 821AF460h */ case   49:  		/* or R6, R30, R4 */
		/* 821AF460h case   49:*/		cpu::op::or<0>(regs,&regs.R6,regs.R30,regs.R4);
		/* 821AF460h case   49:*/		return 0x821AF464;
		  /* 821AF464h */ case   50:  		/* or R27, R10, R9 */
		/* 821AF464h case   50:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R9);
		/* 821AF464h case   50:*/		return 0x821AF468;
		  /* 821AF468h */ case   51:  		/* ld R10, <#[R1 + 184]> */
		/* 821AF468h case   51:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AF468h case   51:*/		return 0x821AF46C;
		  /* 821AF46Ch */ case   52:  		/* or R26, R26, R8 */
		/* 821AF46Ch case   52:*/		cpu::op::or<0>(regs,&regs.R26,regs.R26,regs.R8);
		/* 821AF46Ch case   52:*/		return 0x821AF470;
		  /* 821AF470h */ case   53:  		/* mr R30, R11 */
		/* 821AF470h case   53:*/		regs.R30 = regs.R11;
		/* 821AF470h case   53:*/		return 0x821AF474;
		  /* 821AF474h */ case   54:  		/* mr R29, R31 */
		/* 821AF474h case   54:*/		regs.R29 = regs.R31;
		/* 821AF474h case   54:*/		return 0x821AF478;
		  /* 821AF478h */ case   55:  		/* b 492 */
		/* 821AF478h case   55:*/		return 0x821AF664;
		/* 821AF478h case   55:*/		return 0x821AF47C;
	}
	return 0x821AF47C;
} // Block from 821AF39Ch-821AF47Ch (56 instructions)

//////////////////////////////////////////////////////
// Block at 821AF47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF47C);
		  /* 821AF47Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821AF47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AF47Ch case    0:*/		return 0x821AF480;
		  /* 821AF480h */ case    1:  		/* rlwinm R7, R10, 1, 0, 30 */
		/* 821AF480h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R10);
		/* 821AF480h case    1:*/		return 0x821AF484;
		  /* 821AF484h */ case    2:  		/* rlwinm R6, R22, 1, 0, 30 */
		/* 821AF484h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R22);
		/* 821AF484h case    2:*/		return 0x821AF488;
		  /* 821AF488h */ case    3:  		/* lwz R8, <#[R29]> */
		/* 821AF488h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF488h case    3:*/		return 0x821AF48C;
		  /* 821AF48Ch */ case    4:  		/* rlwinm R10, R11, 27, 24, 31 */
		/* 821AF48Ch case    4:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R11);
		/* 821AF48Ch case    4:*/		return 0x821AF490;
		  /* 821AF490h */ case    5:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821AF490h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821AF490h case    5:*/		return 0x821AF494;
		  /* 821AF494h */ case    6:  		/* srw R11, R10, R6 */
		/* 821AF494h case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R6);
		/* 821AF494h case    6:*/		return 0x821AF498;
		  /* 821AF498h */ case    7:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821AF498h case    7:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821AF498h case    7:*/		return 0x821AF49C;
		  /* 821AF49Ch */ case    8:  		/* srw R7, R8, R7 */
		/* 821AF49Ch case    8:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 821AF49Ch case    8:*/		return 0x821AF4A0;
		  /* 821AF4A0h */ case    9:  		/* addi R6, R11, 11 */
		/* 821AF4A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xB);
		/* 821AF4A0h case    9:*/		return 0x821AF4A4;
		  /* 821AF4A4h */ case   10:  		/* rlwinm R11, R7, 0, 30, 31 */
		/* 821AF4A4h case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R7);
		/* 821AF4A4h case   10:*/		return 0x821AF4A8;
		  /* 821AF4A8h */ case   11:  		/* rlwinm R7, R6, 2, 0, 29 */
		/* 821AF4A8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R6);
		/* 821AF4A8h case   11:*/		return 0x821AF4AC;
		  /* 821AF4ACh */ case   12:  		/* addi R11, R11, 11 */
		/* 821AF4ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821AF4ACh case   12:*/		return 0x821AF4B0;
		  /* 821AF4B0h */ case   13:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 821AF4B0h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 821AF4B0h case   13:*/		return 0x821AF4B4;
		  /* 821AF4B4h */ case   14:  		/* lwzx R11, <#[R7 + R30]> */
		/* 821AF4B4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R30 + 0x00000000) );
		/* 821AF4B4h case   14:*/		return 0x821AF4B8;
		  /* 821AF4B8h */ case   15:  		/* lwzx R6, <#[R6 + R30]> */
		/* 821AF4B8h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R30 + 0x00000000) );
		/* 821AF4B8h case   15:*/		return 0x821AF4BC;
		  /* 821AF4BCh */ case   16:  		/* lwz R7, <#[R11]> */
		/* 821AF4BCh case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF4BCh case   16:*/		return 0x821AF4C0;
		  /* 821AF4C0h */ case   17:  		/* rlwinm. R5, R7, 0, 27, 31 */
		/* 821AF4C0h case   17:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R5,regs.R7);
		/* 821AF4C0h case   17:*/		return 0x821AF4C4;
		  /* 821AF4C4h */ case   18:  		/* bc 4, CR0_EQ, 1100 */
		/* 821AF4C4h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF4C4h case   18:*/		return 0x821AF4C8;
		  /* 821AF4C8h */ case   19:  		/* lwz R24, <#[R11 + 12]> */
		/* 821AF4C8h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AF4C8h case   19:*/		return 0x821AF4CC;
		  /* 821AF4CCh */ case   20:  		/* lwz R11, <#[R6 + 12]> */
		/* 821AF4CCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x0000000C) );
		/* 821AF4CCh case   20:*/		return 0x821AF4D0;
		  /* 821AF4D0h */ case   21:  		/* cmplw CR6, R24, R11 */
		/* 821AF4D0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821AF4D0h case   21:*/		return 0x821AF4D4;
		  /* 821AF4D4h */ case   22:  		/* bc 4, CR6_EQ, 1084 */
		/* 821AF4D4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF4D4h case   22:*/		return 0x821AF4D8;
		  /* 821AF4D8h */ case   23:  		/* lwz R11, <#[R24 + 8]> */
		/* 821AF4D8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821AF4D8h case   23:*/		return 0x821AF4DC;
		  /* 821AF4DCh */ case   24:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AF4DCh case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AF4DCh case   24:*/		return 0x821AF4E0;
		  /* 821AF4E0h */ case   25:  		/* cmplwi CR6, R11, 256 */
		/* 821AF4E0h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821AF4E0h case   25:*/		return 0x821AF4E4;
		  /* 821AF4E4h */ case   26:  		/* bc 4, CR6_EQ, 1068 */
		/* 821AF4E4h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF4E4h case   26:*/		return 0x821AF4E8;
		  /* 821AF4E8h */ case   27:  		/* lwz R5, <#[R24 + 4]> */
		/* 821AF4E8h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000004) );
		/* 821AF4E8h case   27:*/		return 0x821AF4EC;
		  /* 821AF4ECh */ case   28:  		/* cmplwi CR6, R5, 0 */
		/* 821AF4ECh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821AF4ECh case   28:*/		return 0x821AF4F0;
		  /* 821AF4F0h */ case   29:  		/* bc 12, CR6_EQ, 40 */
		/* 821AF4F0h case   29:*/		if ( regs.CR[6].eq ) { return 0x821AF518;  }
		/* 821AF4F0h case   29:*/		return 0x821AF4F4;
		  /* 821AF4F4h */ case   30:  		/* lwz R11, <#[R5 + 16]> */
		/* 821AF4F4h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 821AF4F4h case   30:*/		return 0x821AF4F8;
		  /* 821AF4F8h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821AF4F8h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AF4F8h case   31:*/		return 0x821AF4FC;
		  /* 821AF4FCh */ case   32:  		/* bc 12, CR6_EQ, 12 */
		/* 821AF4FCh case   32:*/		if ( regs.CR[6].eq ) { return 0x821AF508;  }
		/* 821AF4FCh case   32:*/		return 0x821AF500;
		  /* 821AF500h */ case   33:  		/* cmplw CR6, R11, R30 */
		/* 821AF500h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AF500h case   33:*/		return 0x821AF504;
		  /* 821AF504h */ case   34:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF504h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821AF510;  }
		/* 821AF504h case   34:*/		return 0x821AF508;
	}
	return 0x821AF508;
} // Block from 821AF47Ch-821AF508h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AF508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF508);
		  /* 821AF508h */ case    0:  		/* lwz R5, <#[R5 + 8]> */
		/* 821AF508h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000008) );
		/* 821AF508h case    0:*/		return 0x821AF50C;
		  /* 821AF50Ch */ case    1:  		/* b -32 */
		/* 821AF50Ch case    1:*/		return 0x821AF4EC;
		/* 821AF50Ch case    1:*/		return 0x821AF510;
	}
	return 0x821AF510;
} // Block from 821AF508h-821AF510h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF510);
		  /* 821AF510h */ case    0:  		/* li R11, 1 */
		/* 821AF510h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AF510h case    0:*/		return 0x821AF514;
		  /* 821AF514h */ case    1:  		/* b 8 */
		/* 821AF514h case    1:*/		return 0x821AF51C;
		/* 821AF514h case    1:*/		return 0x821AF518;
	}
	return 0x821AF518;
} // Block from 821AF510h-821AF518h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF518);
		  /* 821AF518h */ case    0:  		/* li R11, 0 */
		/* 821AF518h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AF518h case    0:*/		return 0x821AF51C;
	}
	return 0x821AF51C;
} // Block from 821AF518h-821AF51Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AF51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF51C);
		  /* 821AF51Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AF51Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AF51Ch case    0:*/		return 0x821AF520;
		  /* 821AF520h */ case    1:  		/* bc 4, CR0_EQ, 1008 */
		/* 821AF520h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF520h case    1:*/		return 0x821AF524;
		  /* 821AF524h */ case    2:  		/* rlwinm R5, R25, 1, 0, 30 */
		/* 821AF524h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R25);
		/* 821AF524h case    2:*/		return 0x821AF528;
		  /* 821AF528h */ case    3:  		/* lwz R11, <#[R24 + 44]> */
		/* 821AF528h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821AF528h case    3:*/		return 0x821AF52C;
		  /* 821AF52Ch */ case    4:  		/* rlwinm R4, R9, 1, 0, 30 */
		/* 821AF52Ch case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R9);
		/* 821AF52Ch case    4:*/		return 0x821AF530;
		  /* 821AF530h */ case    5:  		/* lwz R31, <#[R24 + 48]> */
		/* 821AF530h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000030) );
		/* 821AF530h case    5:*/		return 0x821AF534;
		  /* 821AF534h */ case    6:  		/* srw R10, R10, R5 */
		/* 821AF534h case    6:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 821AF534h case    6:*/		return 0x821AF538;
		  /* 821AF538h */ case    7:  		/* lwz R6, <#[R6]> */
		/* 821AF538h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000000) );
		/* 821AF538h case    7:*/		return 0x821AF53C;
		  /* 821AF53Ch */ case    8:  		/* rlwinm R9, R10, 0, 30, 31 */
		/* 821AF53Ch case    8:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R10);
		/* 821AF53Ch case    8:*/		return 0x821AF540;
		  /* 821AF540h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821AF540h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AF540h case    9:*/		return 0x821AF544;
		  /* 821AF544h */ case   10:  		/* srw R8, R8, R4 */
		/* 821AF544h case   10:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 821AF544h case   10:*/		return 0x821AF548;
		  /* 821AF548h */ case   11:  		/* lwz R5, <#[R31]> */
		/* 821AF548h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 821AF548h case   11:*/		return 0x821AF54C;
		  /* 821AF54Ch */ case   12:  		/* addi R9, R9, 11 */
		/* 821AF54Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xB);
		/* 821AF54Ch case   12:*/		return 0x821AF550;
		  /* 821AF550h */ case   13:  		/* rlwinm R6, R6, 28, 29, 30 */
		/* 821AF550h case   13:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R6);
		/* 821AF550h case   13:*/		return 0x821AF554;
		  /* 821AF554h */ case   14:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821AF554h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821AF554h case   14:*/		return 0x821AF558;
		  /* 821AF558h */ case   15:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821AF558h case   15:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821AF558h case   15:*/		return 0x821AF55C;
		  /* 821AF55Ch */ case   16:  		/* rlwinm R4, R10, 27, 24, 31 */
		/* 821AF55Ch case   16:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R10);
		/* 821AF55Ch case   16:*/		return 0x821AF560;
		  /* 821AF560h */ case   17:  		/* rlwinm R7, R7, 28, 29, 30 */
		/* 821AF560h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R7);
		/* 821AF560h case   17:*/		return 0x821AF564;
		  /* 821AF564h */ case   18:  		/* rlwinm R5, R5, 27, 24, 31 */
		/* 821AF564h case   18:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R5);
		/* 821AF564h case   18:*/		return 0x821AF568;
		  /* 821AF568h */ case   19:  		/* srw R29, R4, R6 */
		/* 821AF568h case   19:*/		cpu::op::srw<0>(regs,&regs.R29,regs.R4,regs.R6);
		/* 821AF568h case   19:*/		return 0x821AF56C;
		  /* 821AF56Ch */ case   20:  		/* lwzx R9, <#[R9 + R30]> */
		/* 821AF56Ch case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 821AF56Ch case   20:*/		return 0x821AF570;
		  /* 821AF570h */ case   21:  		/* addi R3, R8, 11 */
		/* 821AF570h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0xB);
		/* 821AF570h case   21:*/		return 0x821AF574;
		  /* 821AF574h */ case   22:  		/* lwz R8, <#[R9]> */
		/* 821AF574h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821AF574h case   22:*/		return 0x821AF578;
		  /* 821AF578h */ case   23:  		/* srw R4, R4, R7 */
		/* 821AF578h case   23:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R4,regs.R7);
		/* 821AF578h case   23:*/		return 0x821AF57C;
		  /* 821AF57Ch */ case   24:  		/* srw R6, R5, R6 */
		/* 821AF57Ch case   24:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 821AF57Ch case   24:*/		return 0x821AF580;
		  /* 821AF580h */ case   25:  		/* srw R7, R5, R7 */
		/* 821AF580h case   25:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R5,regs.R7);
		/* 821AF580h case   25:*/		return 0x821AF584;
		  /* 821AF584h */ case   26:  		/* rlwinm R5, R3, 2, 0, 29 */
		/* 821AF584h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R3);
		/* 821AF584h case   26:*/		return 0x821AF588;
		  /* 821AF588h */ case   27:  		/* li R28, 224 */
		/* 821AF588h case   27:*/		cpu::op::li<0>(regs,&regs.R28,0xE0);
		/* 821AF588h case   27:*/		return 0x821AF58C;
		  /* 821AF58Ch */ case   28:  		/* li R27, 224 */
		/* 821AF58Ch case   28:*/		cpu::op::li<0>(regs,&regs.R27,0xE0);
		/* 821AF58Ch case   28:*/		return 0x821AF590;
		  /* 821AF590h */ case   29:  		/* rlwimi R28, R29, 2, 28, 29 */
		/* 821AF590h case   29:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R28,regs.R29);
		/* 821AF590h case   29:*/		return 0x821AF594;
		  /* 821AF594h */ case   30:  		/* rlwimi R27, R6, 2, 28, 29 */
		/* 821AF594h case   30:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R27,regs.R6);
		/* 821AF594h case   30:*/		return 0x821AF598;
		  /* 821AF598h */ case   31:  		/* rlwinm R3, R7, 0, 30, 31 */
		/* 821AF598h case   31:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R3,regs.R7);
		/* 821AF598h case   31:*/		return 0x821AF59C;
		  /* 821AF59Ch */ case   32:  		/* lwzx R7, <#[R5 + R30]> */
		/* 821AF59Ch case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + regs.R30 + 0x00000000) );
		/* 821AF59Ch case   32:*/		return 0x821AF5A0;
		  /* 821AF5A0h */ case   33:  		/* rlwinm R4, R4, 0, 30, 31 */
		/* 821AF5A0h case   33:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R4);
		/* 821AF5A0h case   33:*/		return 0x821AF5A4;
		  /* 821AF5A4h */ case   34:  		/* rlwinm. R29, R8, 0, 27, 31 */
		/* 821AF5A4h case   34:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R29,regs.R8);
		/* 821AF5A4h case   34:*/		return 0x821AF5A8;
		  /* 821AF5A8h */ case   35:  		/* or R6, R28, R4 */
		/* 821AF5A8h case   35:*/		cpu::op::or<0>(regs,&regs.R6,regs.R28,regs.R4);
		/* 821AF5A8h case   35:*/		return 0x821AF5AC;
		  /* 821AF5ACh */ case   36:  		/* or R26, R27, R3 */
		/* 821AF5ACh case   36:*/		cpu::op::or<0>(regs,&regs.R26,regs.R27,regs.R3);
		/* 821AF5ACh case   36:*/		return 0x821AF5B0;
		  /* 821AF5B0h */ case   37:  		/* bc 4, CR0_EQ, 864 */
		/* 821AF5B0h case   37:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF5B0h case   37:*/		return 0x821AF5B4;
		  /* 821AF5B4h */ case   38:  		/* lwz R23, <#[R9 + 12]> */
		/* 821AF5B4h case   38:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R9 + 0x0000000C) );
		/* 821AF5B4h case   38:*/		return 0x821AF5B8;
		  /* 821AF5B8h */ case   39:  		/* lwz R9, <#[R7 + 12]> */
		/* 821AF5B8h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x0000000C) );
		/* 821AF5B8h case   39:*/		return 0x821AF5BC;
		  /* 821AF5BCh */ case   40:  		/* cmplw CR6, R23, R9 */
		/* 821AF5BCh case   40:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R9);
		/* 821AF5BCh case   40:*/		return 0x821AF5C0;
		  /* 821AF5C0h */ case   41:  		/* bc 4, CR6_EQ, 848 */
		/* 821AF5C0h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF5C0h case   41:*/		return 0x821AF5C4;
		  /* 821AF5C4h */ case   42:  		/* lwz R9, <#[R23 + 8]> */
		/* 821AF5C4h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 821AF5C4h case   42:*/		return 0x821AF5C8;
		  /* 821AF5C8h */ case   43:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821AF5C8h case   43:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821AF5C8h case   43:*/		return 0x821AF5CC;
		  /* 821AF5CCh */ case   44:  		/* cmplwi CR6, R9, 256 */
		/* 821AF5CCh case   44:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000100);
		/* 821AF5CCh case   44:*/		return 0x821AF5D0;
		  /* 821AF5D0h */ case   45:  		/* bc 4, CR6_EQ, 832 */
		/* 821AF5D0h case   45:*/		if ( !regs.CR[6].eq ) { return 0x821AF910;  }
		/* 821AF5D0h case   45:*/		return 0x821AF5D4;
		  /* 821AF5D4h */ case   46:  		/* lwz R5, <#[R23 + 4]> */
		/* 821AF5D4h case   46:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000004) );
		/* 821AF5D4h case   46:*/		return 0x821AF5D8;
		  /* 821AF5D8h */ case   47:  		/* cmplwi CR6, R5, 0 */
		/* 821AF5D8h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821AF5D8h case   47:*/		return 0x821AF5DC;
		  /* 821AF5DCh */ case   48:  		/* bc 12, CR6_EQ, 40 */
		/* 821AF5DCh case   48:*/		if ( regs.CR[6].eq ) { return 0x821AF604;  }
		/* 821AF5DCh case   48:*/		return 0x821AF5E0;
		  /* 821AF5E0h */ case   49:  		/* lwz R9, <#[R5 + 16]> */
		/* 821AF5E0h case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000010) );
		/* 821AF5E0h case   49:*/		return 0x821AF5E4;
		  /* 821AF5E4h */ case   50:  		/* cmplwi CR6, R9, 0 */
		/* 821AF5E4h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821AF5E4h case   50:*/		return 0x821AF5E8;
		  /* 821AF5E8h */ case   51:  		/* bc 12, CR6_EQ, 12 */
		/* 821AF5E8h case   51:*/		if ( regs.CR[6].eq ) { return 0x821AF5F4;  }
		/* 821AF5E8h case   51:*/		return 0x821AF5EC;
		  /* 821AF5ECh */ case   52:  		/* cmplw CR6, R9, R30 */
		/* 821AF5ECh case   52:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 821AF5ECh case   52:*/		return 0x821AF5F0;
		  /* 821AF5F0h */ case   53:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF5F0h case   53:*/		if ( !regs.CR[6].eq ) { return 0x821AF5FC;  }
		/* 821AF5F0h case   53:*/		return 0x821AF5F4;
	}
	return 0x821AF5F4;
} // Block from 821AF51Ch-821AF5F4h (54 instructions)

//////////////////////////////////////////////////////
// Block at 821AF5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF5F4);
		  /* 821AF5F4h */ case    0:  		/* lwz R5, <#[R5 + 8]> */
		/* 821AF5F4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000008) );
		/* 821AF5F4h case    0:*/		return 0x821AF5F8;
		  /* 821AF5F8h */ case    1:  		/* b -32 */
		/* 821AF5F8h case    1:*/		return 0x821AF5D8;
		/* 821AF5F8h case    1:*/		return 0x821AF5FC;
	}
	return 0x821AF5FC;
} // Block from 821AF5F4h-821AF5FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF5FC);
		  /* 821AF5FCh */ case    0:  		/* li R9, 1 */
		/* 821AF5FCh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821AF5FCh case    0:*/		return 0x821AF600;
		  /* 821AF600h */ case    1:  		/* b 8 */
		/* 821AF600h case    1:*/		return 0x821AF608;
		/* 821AF600h case    1:*/		return 0x821AF604;
	}
	return 0x821AF604;
} // Block from 821AF5FCh-821AF604h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AF604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF604);
		  /* 821AF604h */ case    0:  		/* li R9, 0 */
		/* 821AF604h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AF604h case    0:*/		return 0x821AF608;
	}
	return 0x821AF608;
} // Block from 821AF604h-821AF608h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AF608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF608);
		  /* 821AF608h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821AF608h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821AF608h case    0:*/		return 0x821AF60C;
		  /* 821AF60Ch */ case    1:  		/* bc 4, CR0_EQ, 772 */
		/* 821AF60Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF910;  }
		/* 821AF60Ch case    1:*/		return 0x821AF610;
		  /* 821AF610h */ case    2:  		/* lwz R30, <#[R23 + 44]> */
		/* 821AF610h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AF610h case    2:*/		return 0x821AF614;
		  /* 821AF614h */ case    3:  		/* rlwinm R9, R8, 28, 29, 30 */
		/* 821AF614h case    3:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R9,regs.R8);
		/* 821AF614h case    3:*/		return 0x821AF618;
		  /* 821AF618h */ case    4:  		/* lwz R29, <#[R23 + 48]> */
		/* 821AF618h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x00000030) );
		/* 821AF618h case    4:*/		return 0x821AF61C;
		  /* 821AF61Ch */ case    5:  		/* li R8, 224 */
		/* 821AF61Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0xE0);
		/* 821AF61Ch case    5:*/		return 0x821AF620;
		  /* 821AF620h */ case    6:  		/* lwz R7, <#[R7]> */
		/* 821AF620h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 821AF620h case    6:*/		return 0x821AF624;
		  /* 821AF624h */ case    7:  		/* li R5, 224 */
		/* 821AF624h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xE0);
		/* 821AF624h case    7:*/		return 0x821AF628;
		  /* 821AF628h */ case    8:  		/* rlwinm R7, R7, 28, 29, 30 */
		/* 821AF628h case    8:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R7);
		/* 821AF628h case    8:*/		return 0x821AF62C;
		  /* 821AF62Ch */ case    9:  		/* lwz R4, <#[R30]> */
		/* 821AF62Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821AF62Ch case    9:*/		return 0x821AF630;
		  /* 821AF630h */ case   10:  		/* lwz R3, <#[R29]> */
		/* 821AF630h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF630h case   10:*/		return 0x821AF634;
		  /* 821AF634h */ case   11:  		/* rlwinm R4, R4, 27, 24, 31 */
		/* 821AF634h case   11:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R4);
		/* 821AF634h case   11:*/		return 0x821AF638;
		  /* 821AF638h */ case   12:  		/* rlwinm R3, R3, 27, 24, 31 */
		/* 821AF638h case   12:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R3,regs.R3);
		/* 821AF638h case   12:*/		return 0x821AF63C;
		  /* 821AF63Ch */ case   13:  		/* srw R28, R4, R7 */
		/* 821AF63Ch case   13:*/		cpu::op::srw<0>(regs,&regs.R28,regs.R4,regs.R7);
		/* 821AF63Ch case   13:*/		return 0x821AF640;
		  /* 821AF640h */ case   14:  		/* srw R4, R4, R9 */
		/* 821AF640h case   14:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R4,regs.R9);
		/* 821AF640h case   14:*/		return 0x821AF644;
		  /* 821AF644h */ case   15:  		/* srw R7, R3, R7 */
		/* 821AF644h case   15:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R3,regs.R7);
		/* 821AF644h case   15:*/		return 0x821AF648;
		  /* 821AF648h */ case   16:  		/* srw R9, R3, R9 */
		/* 821AF648h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R3,regs.R9);
		/* 821AF648h case   16:*/		return 0x821AF64C;
		  /* 821AF64Ch */ case   17:  		/* rlwimi R8, R28, 2, 28, 29 */
		/* 821AF64Ch case   17:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R28);
		/* 821AF64Ch case   17:*/		return 0x821AF650;
		  /* 821AF650h */ case   18:  		/* rlwinm R4, R4, 0, 30, 31 */
		/* 821AF650h case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R4);
		/* 821AF650h case   18:*/		return 0x821AF654;
		  /* 821AF654h */ case   19:  		/* rlwimi R5, R7, 2, 28, 29 */
		/* 821AF654h case   19:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R5,regs.R7);
		/* 821AF654h case   19:*/		return 0x821AF658;
		  /* 821AF658h */ case   20:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821AF658h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821AF658h case   20:*/		return 0x821AF65C;
		  /* 821AF65Ch */ case   21:  		/* or R28, R8, R4 */
		/* 821AF65Ch case   21:*/		cpu::op::or<0>(regs,&regs.R28,regs.R8,regs.R4);
		/* 821AF65Ch case   21:*/		return 0x821AF660;
		  /* 821AF660h */ case   22:  		/* or R27, R5, R9 */
		/* 821AF660h case   22:*/		cpu::op::or<0>(regs,&regs.R27,regs.R5,regs.R9);
		/* 821AF660h case   22:*/		return 0x821AF664;
	}
	return 0x821AF664;
} // Block from 821AF608h-821AF664h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821AF664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF664);
		  /* 821AF664h */ case    0:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 821AF664h case    0:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821AF664h case    0:*/		return 0x821AF668;
		  /* 821AF668h */ case    1:  		/* lwz R4, <#[R11 + 12]> */
		/* 821AF668h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AF668h case    1:*/		return 0x821AF66C;
		  /* 821AF66Ch */ case    2:  		/* li R5, 2 */
		/* 821AF66Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821AF66Ch case    2:*/		return 0x821AF670;
		  /* 821AF670h */ case    3:  		/* mr R3, R16 */
		/* 821AF670h case    3:*/		regs.R3 = regs.R16;
		/* 821AF670h case    3:*/		return 0x821AF674;
		  /* 821AF674h */ case    4:  		/* bl -226740 */
		/* 821AF674h case    4:*/		regs.LR = 0x821AF678; return 0x821780C0;
		/* 821AF674h case    4:*/		return 0x821AF678;
		  /* 821AF678h */ case    5:  		/* stw R3, <#[R1 + 144]> */
		/* 821AF678h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 821AF678h case    5:*/		return 0x821AF67C;
		  /* 821AF67Ch */ case    6:  		/* mr R6, R28 */
		/* 821AF67Ch case    6:*/		regs.R6 = regs.R28;
		/* 821AF67Ch case    6:*/		return 0x821AF680;
		  /* 821AF680h */ case    7:  		/* li R5, 2 */
		/* 821AF680h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821AF680h case    7:*/		return 0x821AF684;
		  /* 821AF684h */ case    8:  		/* mr R3, R16 */
		/* 821AF684h case    8:*/		regs.R3 = regs.R16;
		/* 821AF684h case    8:*/		return 0x821AF688;
		  /* 821AF688h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821AF688h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AF688h case    9:*/		return 0x821AF68C;
		  /* 821AF68Ch */ case   10:  		/* lwz R4, <#[R30 + 12]> */
		/* 821AF68Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821AF68Ch case   10:*/		return 0x821AF690;
		  /* 821AF690h */ case   11:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821AF690h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821AF690h case   11:*/		return 0x821AF694;
		  /* 821AF694h */ case   12:  		/* bl -226772 */
		/* 821AF694h case   12:*/		regs.LR = 0x821AF698; return 0x821780C0;
		/* 821AF694h case   12:*/		return 0x821AF698;
		  /* 821AF698h */ case   13:  		/* stw R3, <#[R1 + 132]> */
		/* 821AF698h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 821AF698h case   13:*/		return 0x821AF69C;
		  /* 821AF69Ch */ case   14:  		/* mr R6, R26 */
		/* 821AF69Ch case   14:*/		regs.R6 = regs.R26;
		/* 821AF69Ch case   14:*/		return 0x821AF6A0;
		  /* 821AF6A0h */ case   15:  		/* li R5, 2 */
		/* 821AF6A0h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821AF6A0h case   15:*/		return 0x821AF6A4;
		  /* 821AF6A4h */ case   16:  		/* mr R3, R16 */
		/* 821AF6A4h case   16:*/		regs.R3 = regs.R16;
		/* 821AF6A4h case   16:*/		return 0x821AF6A8;
		  /* 821AF6A8h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 821AF6A8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AF6A8h case   17:*/		return 0x821AF6AC;
		  /* 821AF6ACh */ case   18:  		/* lwz R4, <#[R31 + 12]> */
		/* 821AF6ACh case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AF6ACh case   18:*/		return 0x821AF6B0;
		  /* 821AF6B0h */ case   19:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821AF6B0h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821AF6B0h case   19:*/		return 0x821AF6B4;
		  /* 821AF6B4h */ case   20:  		/* bl -226804 */
		/* 821AF6B4h case   20:*/		regs.LR = 0x821AF6B8; return 0x821780C0;
		/* 821AF6B4h case   20:*/		return 0x821AF6B8;
		  /* 821AF6B8h */ case   21:  		/* stw R3, <#[R1 + 172]> */
		/* 821AF6B8h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000AC) );
		/* 821AF6B8h case   21:*/		return 0x821AF6BC;
		  /* 821AF6BCh */ case   22:  		/* mr R6, R27 */
		/* 821AF6BCh case   22:*/		regs.R6 = regs.R27;
		/* 821AF6BCh case   22:*/		return 0x821AF6C0;
		  /* 821AF6C0h */ case   23:  		/* li R5, 2 */
		/* 821AF6C0h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821AF6C0h case   23:*/		return 0x821AF6C4;
		  /* 821AF6C4h */ case   24:  		/* mr R3, R16 */
		/* 821AF6C4h case   24:*/		regs.R3 = regs.R16;
		/* 821AF6C4h case   24:*/		return 0x821AF6C8;
		  /* 821AF6C8h */ case   25:  		/* lwz R11, <#[R29]> */
		/* 821AF6C8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AF6C8h case   25:*/		return 0x821AF6CC;
		  /* 821AF6CCh */ case   26:  		/* lwz R4, <#[R29 + 12]> */
		/* 821AF6CCh case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AF6CCh case   26:*/		return 0x821AF6D0;
		  /* 821AF6D0h */ case   27:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821AF6D0h case   27:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821AF6D0h case   27:*/		return 0x821AF6D4;
		  /* 821AF6D4h */ case   28:  		/* bl -226836 */
		/* 821AF6D4h case   28:*/		regs.LR = 0x821AF6D8; return 0x821780C0;
		/* 821AF6D4h case   28:*/		return 0x821AF6D8;
		  /* 821AF6D8h */ case   29:  		/* stw R3, <#[R1 + 136]> */
		/* 821AF6D8h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 821AF6D8h case   29:*/		return 0x821AF6DC;
		  /* 821AF6DCh */ case   30:  		/* mr R5, R21 */
		/* 821AF6DCh case   30:*/		regs.R5 = regs.R21;
		/* 821AF6DCh case   30:*/		return 0x821AF6E0;
		  /* 821AF6E0h */ case   31:  		/* mr R31, R20 */
		/* 821AF6E0h case   31:*/		regs.R31 = regs.R20;
		/* 821AF6E0h case   31:*/		return 0x821AF6E4;
		  /* 821AF6E4h */ case   32:  		/* cmplw CR6, R19, R17 */
		/* 821AF6E4h case   32:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R17);
		/* 821AF6E4h case   32:*/		return 0x821AF6E8;
		  /* 821AF6E8h */ case   33:  		/* bc 4, CR6_EQ, 12 */
		/* 821AF6E8h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821AF6F4;  }
		/* 821AF6E8h case   33:*/		return 0x821AF6EC;
		  /* 821AF6ECh */ case   34:  		/* mr R5, R22 */
		/* 821AF6ECh case   34:*/		regs.R5 = regs.R22;
		/* 821AF6ECh case   34:*/		return 0x821AF6F0;
		  /* 821AF6F0h */ case   35:  		/* mr R31, R25 */
		/* 821AF6F0h case   35:*/		regs.R31 = regs.R25;
		/* 821AF6F0h case   35:*/		return 0x821AF6F4;
	}
	return 0x821AF6F4;
} // Block from 821AF664h-821AF6F4h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821AF6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF6F4);
		  /* 821AF6F4h */ case    0:  		/* mr R4, R18 */
		/* 821AF6F4h case    0:*/		regs.R4 = regs.R18;
		/* 821AF6F4h case    0:*/		return 0x821AF6F8;
		  /* 821AF6F8h */ case    1:  		/* mr R3, R16 */
		/* 821AF6F8h case    1:*/		regs.R3 = regs.R16;
		/* 821AF6F8h case    1:*/		return 0x821AF6FC;
		  /* 821AF6FCh */ case    2:  		/* bl 254596 */
		/* 821AF6FCh case    2:*/		regs.LR = 0x821AF700; return 0x821ED980;
		/* 821AF6FCh case    2:*/		return 0x821AF700;
		  /* 821AF700h */ case    3:  		/* stw R3, <#[R1 + 112]> */
		/* 821AF700h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF700h case    3:*/		return 0x821AF704;
		  /* 821AF704h */ case    4:  		/* mr R5, R31 */
		/* 821AF704h case    4:*/		regs.R5 = regs.R31;
		/* 821AF704h case    4:*/		return 0x821AF708;
		  /* 821AF708h */ case    5:  		/* mr R4, R18 */
		/* 821AF708h case    5:*/		regs.R4 = regs.R18;
		/* 821AF708h case    5:*/		return 0x821AF70C;
		  /* 821AF70Ch */ case    6:  		/* mr R3, R16 */
		/* 821AF70Ch case    6:*/		regs.R3 = regs.R16;
		/* 821AF70Ch case    6:*/		return 0x821AF710;
		  /* 821AF710h */ case    7:  		/* bl 254576 */
		/* 821AF710h case    7:*/		regs.LR = 0x821AF714; return 0x821ED980;
		/* 821AF710h case    7:*/		return 0x821AF714;
		  /* 821AF714h */ case    8:  		/* stw R3, <#[R1 + 140]> */
		/* 821AF714h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000008C) );
		/* 821AF714h case    8:*/		return 0x821AF718;
		  /* 821AF718h */ case    9:  		/* addi R6, R1, 112 */
		/* 821AF718h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 821AF718h case    9:*/		return 0x821AF71C;
		  /* 821AF71Ch */ case   10:  		/* addi R5, R1, 172 */
		/* 821AF71Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xAC);
		/* 821AF71Ch case   10:*/		return 0x821AF720;
		  /* 821AF720h */ case   11:  		/* addi R4, R1, 144 */
		/* 821AF720h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 821AF720h case   11:*/		return 0x821AF724;
		  /* 821AF724h */ case   12:  		/* mr R3, R16 */
		/* 821AF724h case   12:*/		regs.R3 = regs.R16;
		/* 821AF724h case   12:*/		return 0x821AF728;
		  /* 821AF728h */ case   13:  		/* bl -64960 */
		/* 821AF728h case   13:*/		regs.LR = 0x821AF72C; return 0x8219F968;
		/* 821AF728h case   13:*/		return 0x821AF72C;
		  /* 821AF72Ch */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF72Ch case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF72Ch case   14:*/		return 0x821AF730;
		  /* 821AF730h */ case   15:  		/* bc 12, CR0_EQ, 120 */
		/* 821AF730h case   15:*/		if ( regs.CR[0].eq ) { return 0x821AF7A8;  }
		/* 821AF730h case   15:*/		return 0x821AF734;
		  /* 821AF734h */ case   16:  		/* addi R10, R1, 368 */
		/* 821AF734h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x170);
		/* 821AF734h case   16:*/		return 0x821AF738;
		  /* 821AF738h */ case   17:  		/* lwz R8, <#[R1 + 112]> */
		/* 821AF738h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF738h case   17:*/		return 0x821AF73C;
		  /* 821AF73Ch */ case   18:  		/* mr R9, R19 */
		/* 821AF73Ch case   18:*/		regs.R9 = regs.R19;
		/* 821AF73Ch case   18:*/		return 0x821AF740;
		  /* 821AF740h */ case   19:  		/* lwz R6, <#[R1 + 172]> */
		/* 821AF740h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000AC) );
		/* 821AF740h case   19:*/		return 0x821AF744;
		  /* 821AF744h */ case   20:  		/* mr R7, R24 */
		/* 821AF744h case   20:*/		regs.R7 = regs.R24;
		/* 821AF744h case   20:*/		return 0x821AF748;
		  /* 821AF748h */ case   21:  		/* lwz R4, <#[R1 + 144]> */
		/* 821AF748h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 821AF748h case   21:*/		return 0x821AF74C;
		  /* 821AF74Ch */ case   22:  		/* mr R5, R24 */
		/* 821AF74Ch case   22:*/		regs.R5 = regs.R24;
		/* 821AF74Ch case   22:*/		return 0x821AF750;
		  /* 821AF750h */ case   23:  		/* mr R3, R16 */
		/* 821AF750h case   23:*/		regs.R3 = regs.R16;
		/* 821AF750h case   23:*/		return 0x821AF754;
		  /* 821AF754h */ case   24:  		/* bl -82796 */
		/* 821AF754h case   24:*/		regs.LR = 0x821AF758; return 0x8219B3E8;
		/* 821AF754h case   24:*/		return 0x821AF758;
		  /* 821AF758h */ case   25:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF758h case   25:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF758h case   25:*/		return 0x821AF75C;
		  /* 821AF75Ch */ case   26:  		/* bc 12, CR0_EQ, 76 */
		/* 821AF75Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x821AF7A8;  }
		/* 821AF75Ch case   26:*/		return 0x821AF760;
		  /* 821AF760h */ case   27:  		/* addi R6, R1, 140 */
		/* 821AF760h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x8C);
		/* 821AF760h case   27:*/		return 0x821AF764;
		  /* 821AF764h */ case   28:  		/* addi R5, R1, 136 */
		/* 821AF764h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x88);
		/* 821AF764h case   28:*/		return 0x821AF768;
		  /* 821AF768h */ case   29:  		/* addi R4, R1, 132 */
		/* 821AF768h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x84);
		/* 821AF768h case   29:*/		return 0x821AF76C;
		  /* 821AF76Ch */ case   30:  		/* mr R3, R16 */
		/* 821AF76Ch case   30:*/		regs.R3 = regs.R16;
		/* 821AF76Ch case   30:*/		return 0x821AF770;
		  /* 821AF770h */ case   31:  		/* bl -65032 */
		/* 821AF770h case   31:*/		regs.LR = 0x821AF774; return 0x8219F968;
		/* 821AF770h case   31:*/		return 0x821AF774;
		  /* 821AF774h */ case   32:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF774h case   32:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF774h case   32:*/		return 0x821AF778;
		  /* 821AF778h */ case   33:  		/* bc 12, CR0_EQ, 48 */
		/* 821AF778h case   33:*/		if ( regs.CR[0].eq ) { return 0x821AF7A8;  }
		/* 821AF778h case   33:*/		return 0x821AF77C;
		  /* 821AF77Ch */ case   34:  		/* addi R10, R1, 288 */
		/* 821AF77Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x120);
		/* 821AF77Ch case   34:*/		return 0x821AF780;
		  /* 821AF780h */ case   35:  		/* lwz R8, <#[R1 + 140]> */
		/* 821AF780h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000008C) );
		/* 821AF780h case   35:*/		return 0x821AF784;
		  /* 821AF784h */ case   36:  		/* mr R9, R19 */
		/* 821AF784h case   36:*/		regs.R9 = regs.R19;
		/* 821AF784h case   36:*/		return 0x821AF788;
		  /* 821AF788h */ case   37:  		/* lwz R6, <#[R1 + 136]> */
		/* 821AF788h case   37:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000088) );
		/* 821AF788h case   37:*/		return 0x821AF78C;
		  /* 821AF78Ch */ case   38:  		/* mr R7, R23 */
		/* 821AF78Ch case   38:*/		regs.R7 = regs.R23;
		/* 821AF78Ch case   38:*/		return 0x821AF790;
		  /* 821AF790h */ case   39:  		/* lwz R4, <#[R1 + 132]> */
		/* 821AF790h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 821AF790h case   39:*/		return 0x821AF794;
		  /* 821AF794h */ case   40:  		/* mr R5, R23 */
		/* 821AF794h case   40:*/		regs.R5 = regs.R23;
		/* 821AF794h case   40:*/		return 0x821AF798;
		  /* 821AF798h */ case   41:  		/* mr R3, R16 */
		/* 821AF798h case   41:*/		regs.R3 = regs.R16;
		/* 821AF798h case   41:*/		return 0x821AF79C;
		  /* 821AF79Ch */ case   42:  		/* bl -82868 */
		/* 821AF79Ch case   42:*/		regs.LR = 0x821AF7A0; return 0x8219B3E8;
		/* 821AF79Ch case   42:*/		return 0x821AF7A0;
		  /* 821AF7A0h */ case   43:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AF7A0h case   43:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AF7A0h case   43:*/		return 0x821AF7A4;
		  /* 821AF7A4h */ case   44:  		/* bc 4, CR0_EQ, 404 */
		/* 821AF7A4h case   44:*/		if ( !regs.CR[0].eq ) { return 0x821AF938;  }
		/* 821AF7A4h case   44:*/		return 0x821AF7A8;
	}
	return 0x821AF7A8;
} // Block from 821AF6F4h-821AF7A8h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821AF7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF7A8);
		  /* 821AF7A8h */ case    0:  		/* lwz R4, <#[R1 + 144]> */
		/* 821AF7A8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 821AF7A8h case    0:*/		return 0x821AF7AC;
		  /* 821AF7ACh */ case    1:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF7ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF7ACh case    1:*/		return 0x821AF7B0;
		  /* 821AF7B0h */ case    2:  		/* addi R10, R11, 4 */
		/* 821AF7B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF7B0h case    2:*/		return 0x821AF7B4;
		  /* 821AF7B4h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF7B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF7B4h case    3:*/		return 0x821AF7B8;
		  /* 821AF7B8h */ case    4:  		/* b 12 */
		/* 821AF7B8h case    4:*/		return 0x821AF7C4;
		/* 821AF7B8h case    4:*/		return 0x821AF7BC;
		  /* 821AF7BCh */ case    5:  		/* addi R10, R11, 8 */
		/* 821AF7BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF7BCh case    5:*/		return 0x821AF7C0;
		  /* 821AF7C0h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF7C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF7C0h case    6:*/		return 0x821AF7C4;
	}
	return 0x821AF7C4;
} // Block from 821AF7A8h-821AF7C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AF7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF7C4);
		  /* 821AF7C4h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF7C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF7C4h case    0:*/		return 0x821AF7C8;
		  /* 821AF7C8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF7C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF7BC;  }
		/* 821AF7C8h case    1:*/		return 0x821AF7CC;
		  /* 821AF7CCh */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF7CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF7CCh case    2:*/		return 0x821AF7D0;
		  /* 821AF7D0h */ case    3:  		/* li R6, 26 */
		/* 821AF7D0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF7D0h case    3:*/		return 0x821AF7D4;
		  /* 821AF7D4h */ case    4:  		/* li R5, 20 */
		/* 821AF7D4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF7D4h case    4:*/		return 0x821AF7D8;
		  /* 821AF7D8h */ case    5:  		/* mr R3, R16 */
		/* 821AF7D8h case    5:*/		regs.R3 = regs.R16;
		/* 821AF7D8h case    5:*/		return 0x821AF7DC;
		  /* 821AF7DCh */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF7DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF7DCh case    6:*/		return 0x821AF7E0;
		  /* 821AF7E0h */ case    7:  		/* bl -305992 */
		/* 821AF7E0h case    7:*/		regs.LR = 0x821AF7E4; return 0x82164C98;
		/* 821AF7E0h case    7:*/		return 0x821AF7E4;
		  /* 821AF7E4h */ case    8:  		/* lwz R4, <#[R1 + 172]> */
		/* 821AF7E4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000AC) );
		/* 821AF7E4h case    8:*/		return 0x821AF7E8;
		  /* 821AF7E8h */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF7E8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF7E8h case    9:*/		return 0x821AF7EC;
		  /* 821AF7ECh */ case   10:  		/* addi R10, R11, 4 */
		/* 821AF7ECh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF7ECh case   10:*/		return 0x821AF7F0;
		  /* 821AF7F0h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF7F0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF7F0h case   11:*/		return 0x821AF7F4;
		  /* 821AF7F4h */ case   12:  		/* b 12 */
		/* 821AF7F4h case   12:*/		return 0x821AF800;
		/* 821AF7F4h case   12:*/		return 0x821AF7F8;
		  /* 821AF7F8h */ case   13:  		/* addi R10, R11, 8 */
		/* 821AF7F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF7F8h case   13:*/		return 0x821AF7FC;
		  /* 821AF7FCh */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF7FCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF7FCh case   14:*/		return 0x821AF800;
	}
	return 0x821AF800;
} // Block from 821AF7C4h-821AF800h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AF800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF800);
		  /* 821AF800h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF800h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF800h case    0:*/		return 0x821AF804;
		  /* 821AF804h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF804h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF7F8;  }
		/* 821AF804h case    1:*/		return 0x821AF808;
		  /* 821AF808h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF808h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF808h case    2:*/		return 0x821AF80C;
		  /* 821AF80Ch */ case    3:  		/* li R6, 26 */
		/* 821AF80Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF80Ch case    3:*/		return 0x821AF810;
		  /* 821AF810h */ case    4:  		/* li R5, 20 */
		/* 821AF810h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF810h case    4:*/		return 0x821AF814;
		  /* 821AF814h */ case    5:  		/* mr R3, R16 */
		/* 821AF814h case    5:*/		regs.R3 = regs.R16;
		/* 821AF814h case    5:*/		return 0x821AF818;
		  /* 821AF818h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF818h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF818h case    6:*/		return 0x821AF81C;
		  /* 821AF81Ch */ case    7:  		/* bl -306052 */
		/* 821AF81Ch case    7:*/		regs.LR = 0x821AF820; return 0x82164C98;
		/* 821AF81Ch case    7:*/		return 0x821AF820;
		  /* 821AF820h */ case    8:  		/* lwz R4, <#[R1 + 112]> */
		/* 821AF820h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF820h case    8:*/		return 0x821AF824;
		  /* 821AF824h */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF824h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF824h case    9:*/		return 0x821AF828;
		  /* 821AF828h */ case   10:  		/* addi R10, R11, 4 */
		/* 821AF828h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF828h case   10:*/		return 0x821AF82C;
		  /* 821AF82Ch */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF82Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF82Ch case   11:*/		return 0x821AF830;
		  /* 821AF830h */ case   12:  		/* b 12 */
		/* 821AF830h case   12:*/		return 0x821AF83C;
		/* 821AF830h case   12:*/		return 0x821AF834;
		  /* 821AF834h */ case   13:  		/* addi R10, R11, 8 */
		/* 821AF834h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF834h case   13:*/		return 0x821AF838;
		  /* 821AF838h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF838h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF838h case   14:*/		return 0x821AF83C;
	}
	return 0x821AF83C;
} // Block from 821AF800h-821AF83Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AF83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF83C);
		  /* 821AF83Ch */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF83Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF83Ch case    0:*/		return 0x821AF840;
		  /* 821AF840h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF840h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF834;  }
		/* 821AF840h case    1:*/		return 0x821AF844;
		  /* 821AF844h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF844h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF844h case    2:*/		return 0x821AF848;
		  /* 821AF848h */ case    3:  		/* li R6, 26 */
		/* 821AF848h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF848h case    3:*/		return 0x821AF84C;
		  /* 821AF84Ch */ case    4:  		/* li R5, 20 */
		/* 821AF84Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF84Ch case    4:*/		return 0x821AF850;
		  /* 821AF850h */ case    5:  		/* mr R3, R16 */
		/* 821AF850h case    5:*/		regs.R3 = regs.R16;
		/* 821AF850h case    5:*/		return 0x821AF854;
		  /* 821AF854h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF854h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF854h case    6:*/		return 0x821AF858;
		  /* 821AF858h */ case    7:  		/* bl -306112 */
		/* 821AF858h case    7:*/		regs.LR = 0x821AF85C; return 0x82164C98;
		/* 821AF858h case    7:*/		return 0x821AF85C;
		  /* 821AF85Ch */ case    8:  		/* lwz R4, <#[R1 + 132]> */
		/* 821AF85Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 821AF85Ch case    8:*/		return 0x821AF860;
		  /* 821AF860h */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF860h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF860h case    9:*/		return 0x821AF864;
		  /* 821AF864h */ case   10:  		/* addi R10, R11, 4 */
		/* 821AF864h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF864h case   10:*/		return 0x821AF868;
		  /* 821AF868h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF868h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF868h case   11:*/		return 0x821AF86C;
		  /* 821AF86Ch */ case   12:  		/* b 12 */
		/* 821AF86Ch case   12:*/		return 0x821AF878;
		/* 821AF86Ch case   12:*/		return 0x821AF870;
		  /* 821AF870h */ case   13:  		/* addi R10, R11, 8 */
		/* 821AF870h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF870h case   13:*/		return 0x821AF874;
		  /* 821AF874h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF874h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF874h case   14:*/		return 0x821AF878;
	}
	return 0x821AF878;
} // Block from 821AF83Ch-821AF878h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AF878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF878);
		  /* 821AF878h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF878h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF878h case    0:*/		return 0x821AF87C;
		  /* 821AF87Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF87Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF870;  }
		/* 821AF87Ch case    1:*/		return 0x821AF880;
		  /* 821AF880h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF880h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF880h case    2:*/		return 0x821AF884;
		  /* 821AF884h */ case    3:  		/* li R6, 26 */
		/* 821AF884h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF884h case    3:*/		return 0x821AF888;
		  /* 821AF888h */ case    4:  		/* li R5, 20 */
		/* 821AF888h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF888h case    4:*/		return 0x821AF88C;
		  /* 821AF88Ch */ case    5:  		/* mr R3, R16 */
		/* 821AF88Ch case    5:*/		regs.R3 = regs.R16;
		/* 821AF88Ch case    5:*/		return 0x821AF890;
		  /* 821AF890h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF890h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF890h case    6:*/		return 0x821AF894;
		  /* 821AF894h */ case    7:  		/* bl -306172 */
		/* 821AF894h case    7:*/		regs.LR = 0x821AF898; return 0x82164C98;
		/* 821AF894h case    7:*/		return 0x821AF898;
		  /* 821AF898h */ case    8:  		/* lwz R4, <#[R1 + 136]> */
		/* 821AF898h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821AF898h case    8:*/		return 0x821AF89C;
		  /* 821AF89Ch */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF89Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF89Ch case    9:*/		return 0x821AF8A0;
		  /* 821AF8A0h */ case   10:  		/* addi R10, R11, 4 */
		/* 821AF8A0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF8A0h case   10:*/		return 0x821AF8A4;
		  /* 821AF8A4h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF8A4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF8A4h case   11:*/		return 0x821AF8A8;
		  /* 821AF8A8h */ case   12:  		/* b 12 */
		/* 821AF8A8h case   12:*/		return 0x821AF8B4;
		/* 821AF8A8h case   12:*/		return 0x821AF8AC;
		  /* 821AF8ACh */ case   13:  		/* addi R10, R11, 8 */
		/* 821AF8ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF8ACh case   13:*/		return 0x821AF8B0;
		  /* 821AF8B0h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF8B0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF8B0h case   14:*/		return 0x821AF8B4;
	}
	return 0x821AF8B4;
} // Block from 821AF878h-821AF8B4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AF8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF8B4);
		  /* 821AF8B4h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF8B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF8B4h case    0:*/		return 0x821AF8B8;
		  /* 821AF8B8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF8B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF8AC;  }
		/* 821AF8B8h case    1:*/		return 0x821AF8BC;
		  /* 821AF8BCh */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF8BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF8BCh case    2:*/		return 0x821AF8C0;
		  /* 821AF8C0h */ case    3:  		/* li R6, 26 */
		/* 821AF8C0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF8C0h case    3:*/		return 0x821AF8C4;
		  /* 821AF8C4h */ case    4:  		/* li R5, 20 */
		/* 821AF8C4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF8C4h case    4:*/		return 0x821AF8C8;
		  /* 821AF8C8h */ case    5:  		/* mr R3, R16 */
		/* 821AF8C8h case    5:*/		regs.R3 = regs.R16;
		/* 821AF8C8h case    5:*/		return 0x821AF8CC;
		  /* 821AF8CCh */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF8CCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF8CCh case    6:*/		return 0x821AF8D0;
		  /* 821AF8D0h */ case    7:  		/* bl -306232 */
		/* 821AF8D0h case    7:*/		regs.LR = 0x821AF8D4; return 0x82164C98;
		/* 821AF8D0h case    7:*/		return 0x821AF8D4;
		  /* 821AF8D4h */ case    8:  		/* lwz R4, <#[R1 + 140]> */
		/* 821AF8D4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000008C) );
		/* 821AF8D4h case    8:*/		return 0x821AF8D8;
		  /* 821AF8D8h */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AF8D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AF8D8h case    9:*/		return 0x821AF8DC;
		  /* 821AF8DCh */ case   10:  		/* addi R10, R11, 4 */
		/* 821AF8DCh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AF8DCh case   10:*/		return 0x821AF8E0;
		  /* 821AF8E0h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AF8E0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AF8E0h case   11:*/		return 0x821AF8E4;
		  /* 821AF8E4h */ case   12:  		/* b 12 */
		/* 821AF8E4h case   12:*/		return 0x821AF8F0;
		/* 821AF8E4h case   12:*/		return 0x821AF8E8;
		  /* 821AF8E8h */ case   13:  		/* addi R10, R11, 8 */
		/* 821AF8E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AF8E8h case   13:*/		return 0x821AF8EC;
		  /* 821AF8ECh */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF8ECh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF8ECh case   14:*/		return 0x821AF8F0;
	}
	return 0x821AF8F0;
} // Block from 821AF8B4h-821AF8F0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AF8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF8F0);
		  /* 821AF8F0h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821AF8F0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821AF8F0h case    0:*/		return 0x821AF8F4;
		  /* 821AF8F4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AF8F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AF8E8;  }
		/* 821AF8F4h case    1:*/		return 0x821AF8F8;
		  /* 821AF8F8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AF8F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AF8F8h case    2:*/		return 0x821AF8FC;
		  /* 821AF8FCh */ case    3:  		/* li R6, 26 */
		/* 821AF8FCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AF8FCh case    3:*/		return 0x821AF900;
		  /* 821AF900h */ case    4:  		/* li R5, 20 */
		/* 821AF900h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AF900h case    4:*/		return 0x821AF904;
		  /* 821AF904h */ case    5:  		/* mr R3, R16 */
		/* 821AF904h case    5:*/		regs.R3 = regs.R16;
		/* 821AF904h case    5:*/		return 0x821AF908;
		  /* 821AF908h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821AF908h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AF908h case    6:*/		return 0x821AF90C;
		  /* 821AF90Ch */ case    7:  		/* bl -306292 */
		/* 821AF90Ch case    7:*/		regs.LR = 0x821AF910; return 0x82164C98;
		/* 821AF90Ch case    7:*/		return 0x821AF910;
	}
	return 0x821AF910;
} // Block from 821AF8F0h-821AF910h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AF910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF910);
		  /* 821AF910h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 821AF910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821AF910h case    0:*/		return 0x821AF914;
		  /* 821AF914h */ case    1:  		/* addi R14, R14, 1 */
		/* 821AF914h case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 821AF914h case    1:*/		return 0x821AF918;
		  /* 821AF918h */ case    2:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AF918h case    2:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF918h case    2:*/		return 0x821AF91C;
		  /* 821AF91Ch */ case    3:  		/* addi R15, R15, -4 */
		/* 821AF91Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0xFFFFFFFC);
		/* 821AF91Ch case    3:*/		return 0x821AF920;
		  /* 821AF920h */ case    4:  		/* addi R11, R11, 4 */
		/* 821AF920h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AF920h case    4:*/		return 0x821AF924;
		  /* 821AF924h */ case    5:  		/* b -1804 */
		/* 821AF924h case    5:*/		return 0x821AF218;
		/* 821AF924h case    5:*/		return 0x821AF928;
	}
	return 0x821AF928;
} // Block from 821AF910h-821AF928h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AF928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF928);
		  /* 821AF928h */ case    0:  		/* lwz R11, <#[R1 + 152]> */
		/* 821AF928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821AF928h case    0:*/		return 0x821AF92C;
		  /* 821AF92Ch */ case    1:  		/* lwz R18, <#[R1 + 1244]> */
		/* 821AF92Ch case    1:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF92Ch case    1:*/		return 0x821AF930;
		  /* 821AF930h */ case    2:  		/* addi R11, R11, 1 */
		/* 821AF930h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AF930h case    2:*/		return 0x821AF934;
		  /* 821AF934h */ case    3:  		/* b -1972 */
		/* 821AF934h case    3:*/		return 0x821AF180;
		/* 821AF934h case    3:*/		return 0x821AF938;
	}
	return 0x821AF938;
} // Block from 821AF928h-821AF938h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AF938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF938);
		  /* 821AF938h */ case    0:  		/* lwz R29, <#[R1 + 1244]> */
		/* 821AF938h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AF938h case    0:*/		return 0x821AF93C;
		  /* 821AF93Ch */ case    1:  		/* li R4, 0 */
		/* 821AF93Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AF93Ch case    1:*/		return 0x821AF940;
		  /* 821AF940h */ case    2:  		/* mr R3, R16 */
		/* 821AF940h case    2:*/		regs.R3 = regs.R16;
		/* 821AF940h case    2:*/		return 0x821AF944;
		  /* 821AF944h */ case    3:  		/* lwz R8, <#[R1 + 112]> */
		/* 821AF944h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 821AF944h case    3:*/		return 0x821AF948;
		  /* 821AF948h */ case    4:  		/* mr R5, R29 */
		/* 821AF948h case    4:*/		regs.R5 = regs.R29;
		/* 821AF948h case    4:*/		return 0x821AF94C;
		  /* 821AF94Ch */ case    5:  		/* lwz R7, <#[R1 + 172]> */
		/* 821AF94Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000AC) );
		/* 821AF94Ch case    5:*/		return 0x821AF950;
		  /* 821AF950h */ case    6:  		/* lwz R6, <#[R1 + 144]> */
		/* 821AF950h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 821AF950h case    6:*/		return 0x821AF954;
		  /* 821AF954h */ case    7:  		/* bl -70348 */
		/* 821AF954h case    7:*/		regs.LR = 0x821AF958; return 0x8219E688;
		/* 821AF954h case    7:*/		return 0x821AF958;
		  /* 821AF958h */ case    8:  		/* mr R31, R3 */
		/* 821AF958h case    8:*/		regs.R31 = regs.R3;
		/* 821AF958h case    8:*/		return 0x821AF95C;
		  /* 821AF95Ch */ case    9:  		/* mr R5, R29 */
		/* 821AF95Ch case    9:*/		regs.R5 = regs.R29;
		/* 821AF95Ch case    9:*/		return 0x821AF960;
		  /* 821AF960h */ case   10:  		/* lwz R8, <#[R1 + 140]> */
		/* 821AF960h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000008C) );
		/* 821AF960h case   10:*/		return 0x821AF964;
		  /* 821AF964h */ case   11:  		/* li R4, 0 */
		/* 821AF964h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AF964h case   11:*/		return 0x821AF968;
		  /* 821AF968h */ case   12:  		/* lwz R7, <#[R1 + 136]> */
		/* 821AF968h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 821AF968h case   12:*/		return 0x821AF96C;
		  /* 821AF96Ch */ case   13:  		/* mr R3, R16 */
		/* 821AF96Ch case   13:*/		regs.R3 = regs.R16;
		/* 821AF96Ch case   13:*/		return 0x821AF970;
		  /* 821AF970h */ case   14:  		/* lwz R6, <#[R1 + 132]> */
		/* 821AF970h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000084) );
		/* 821AF970h case   14:*/		return 0x821AF974;
		  /* 821AF974h */ case   15:  		/* bl -70380 */
		/* 821AF974h case   15:*/		regs.LR = 0x821AF978; return 0x8219E688;
		/* 821AF974h case   15:*/		return 0x821AF978;
		  /* 821AF978h */ case   16:  		/* lwz R11, <#[R29 + 8]> */
		/* 821AF978h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AF978h case   16:*/		return 0x821AF97C;
		  /* 821AF97Ch */ case   17:  		/* mr R30, R3 */
		/* 821AF97Ch case   17:*/		regs.R30 = regs.R3;
		/* 821AF97Ch case   17:*/		return 0x821AF980;
		  /* 821AF980h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AF980h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AF980h case   18:*/		return 0x821AF984;
		  /* 821AF984h */ case   19:  		/* bc 12, CR0_EQ, 28 */
		/* 821AF984h case   19:*/		if ( regs.CR[0].eq ) { return 0x821AF9A0;  }
		/* 821AF984h case   19:*/		return 0x821AF988;
		  /* 821AF988h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AF988h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AF988h case   20:*/		return 0x821AF98C;
		  /* 821AF98Ch */ case   21:  		/* ori R11, R11, 1 */
		/* 821AF98Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AF98Ch case   21:*/		return 0x821AF990;
		  /* 821AF990h */ case   22:  		/* stw R11, <#[R31 + 8]> */
		/* 821AF990h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AF990h case   22:*/		return 0x821AF994;
		  /* 821AF994h */ case   23:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AF994h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AF994h case   23:*/		return 0x821AF998;
		  /* 821AF998h */ case   24:  		/* ori R11, R11, 1 */
		/* 821AF998h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AF998h case   24:*/		return 0x821AF99C;
		  /* 821AF99Ch */ case   25:  		/* stw R11, <#[R3 + 8]> */
		/* 821AF99Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AF99Ch case   25:*/		return 0x821AF9A0;
	}
	return 0x821AF9A0;
} // Block from 821AF938h-821AF9A0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821AF9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF9A0);
		  /* 821AF9A0h */ case    0:  		/* lwz R4, <#[R1 + 368]> */
		/* 821AF9A0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000170) );
		/* 821AF9A0h case    0:*/		return 0x821AF9A4;
		  /* 821AF9A4h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AF9A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AF9A4h case    1:*/		return 0x821AF9A8;
		  /* 821AF9A8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AF9A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821AF9C4;  }
		/* 821AF9A8h case    2:*/		return 0x821AF9AC;
		  /* 821AF9ACh */ case    3:  		/* li R5, 0 */
		/* 821AF9ACh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AF9ACh case    3:*/		return 0x821AF9B0;
		  /* 821AF9B0h */ case    4:  		/* mr R3, R16 */
		/* 821AF9B0h case    4:*/		regs.R3 = regs.R16;
		/* 821AF9B0h case    4:*/		return 0x821AF9B4;
		  /* 821AF9B4h */ case    5:  		/* bl -258660 */
		/* 821AF9B4h case    5:*/		regs.LR = 0x821AF9B8; return 0x82170750;
		/* 821AF9B4h case    5:*/		return 0x821AF9B8;
		  /* 821AF9B8h */ case    6:  		/* mr R4, R3 */
		/* 821AF9B8h case    6:*/		regs.R4 = regs.R3;
		/* 821AF9B8h case    6:*/		return 0x821AF9BC;
		  /* 821AF9BCh */ case    7:  		/* mr R3, R31 */
		/* 821AF9BCh case    7:*/		regs.R3 = regs.R31;
		/* 821AF9BCh case    7:*/		return 0x821AF9C0;
		  /* 821AF9C0h */ case    8:  		/* bl -227320 */
		/* 821AF9C0h case    8:*/		regs.LR = 0x821AF9C4; return 0x821781C8;
		/* 821AF9C0h case    8:*/		return 0x821AF9C4;
	}
	return 0x821AF9C4;
} // Block from 821AF9A0h-821AF9C4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AF9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF9C4);
		  /* 821AF9C4h */ case    0:  		/* lwz R4, <#[R1 + 288]> */
		/* 821AF9C4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000120) );
		/* 821AF9C4h case    0:*/		return 0x821AF9C8;
		  /* 821AF9C8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AF9C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AF9C8h case    1:*/		return 0x821AF9CC;
		  /* 821AF9CCh */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AF9CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821AF9E8;  }
		/* 821AF9CCh case    2:*/		return 0x821AF9D0;
		  /* 821AF9D0h */ case    3:  		/* li R5, 0 */
		/* 821AF9D0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AF9D0h case    3:*/		return 0x821AF9D4;
		  /* 821AF9D4h */ case    4:  		/* mr R3, R16 */
		/* 821AF9D4h case    4:*/		regs.R3 = regs.R16;
		/* 821AF9D4h case    4:*/		return 0x821AF9D8;
		  /* 821AF9D8h */ case    5:  		/* bl -258696 */
		/* 821AF9D8h case    5:*/		regs.LR = 0x821AF9DC; return 0x82170750;
		/* 821AF9D8h case    5:*/		return 0x821AF9DC;
		  /* 821AF9DCh */ case    6:  		/* mr R4, R3 */
		/* 821AF9DCh case    6:*/		regs.R4 = regs.R3;
		/* 821AF9DCh case    6:*/		return 0x821AF9E0;
		  /* 821AF9E0h */ case    7:  		/* mr R3, R30 */
		/* 821AF9E0h case    7:*/		regs.R3 = regs.R30;
		/* 821AF9E0h case    7:*/		return 0x821AF9E4;
		  /* 821AF9E4h */ case    8:  		/* bl -227356 */
		/* 821AF9E4h case    8:*/		regs.LR = 0x821AF9E8; return 0x821781C8;
		/* 821AF9E4h case    8:*/		return 0x821AF9E8;
	}
	return 0x821AF9E8;
} // Block from 821AF9C4h-821AF9E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AF9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AF9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AF9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AF9E8);
		  /* 821AF9E8h */ case    0:  		/* mr R4, R31 */
		/* 821AF9E8h case    0:*/		regs.R4 = regs.R31;
		/* 821AF9E8h case    0:*/		return 0x821AF9EC;
		  /* 821AF9ECh */ case    1:  		/* mr R3, R16 */
		/* 821AF9ECh case    1:*/		regs.R3 = regs.R16;
		/* 821AF9ECh case    1:*/		return 0x821AF9F0;
		  /* 821AF9F0h */ case    2:  		/* bl -74936 */
		/* 821AF9F0h case    2:*/		regs.LR = 0x821AF9F4; return 0x8219D538;
		/* 821AF9F0h case    2:*/		return 0x821AF9F4;
		  /* 821AF9F4h */ case    3:  		/* mr R4, R30 */
		/* 821AF9F4h case    3:*/		regs.R4 = regs.R30;
		/* 821AF9F4h case    3:*/		return 0x821AF9F8;
		  /* 821AF9F8h */ case    4:  		/* mr R3, R16 */
		/* 821AF9F8h case    4:*/		regs.R3 = regs.R16;
		/* 821AF9F8h case    4:*/		return 0x821AF9FC;
		  /* 821AF9FCh */ case    5:  		/* bl -74948 */
		/* 821AF9FCh case    5:*/		regs.LR = 0x821AFA00; return 0x8219D538;
		/* 821AF9FCh case    5:*/		return 0x821AFA00;
		  /* 821AFA00h */ case    6:  		/* mr R6, R31 */
		/* 821AFA00h case    6:*/		regs.R6 = regs.R31;
		/* 821AFA00h case    6:*/		return 0x821AFA04;
		  /* 821AFA04h */ case    7:  		/* mr R5, R21 */
		/* 821AFA04h case    7:*/		regs.R5 = regs.R21;
		/* 821AFA04h case    7:*/		return 0x821AFA08;
		  /* 821AFA08h */ case    8:  		/* mr R4, R29 */
		/* 821AFA08h case    8:*/		regs.R4 = regs.R29;
		/* 821AFA08h case    8:*/		return 0x821AFA0C;
		  /* 821AFA0Ch */ case    9:  		/* mr R3, R16 */
		/* 821AFA0Ch case    9:*/		regs.R3 = regs.R16;
		/* 821AFA0Ch case    9:*/		return 0x821AFA10;
		  /* 821AFA10h */ case   10:  		/* bl -43760 */
		/* 821AFA10h case   10:*/		regs.LR = 0x821AFA14; return 0x821A4F20;
		/* 821AFA10h case   10:*/		return 0x821AFA14;
		  /* 821AFA14h */ case   11:  		/* mr R6, R30 */
		/* 821AFA14h case   11:*/		regs.R6 = regs.R30;
		/* 821AFA14h case   11:*/		return 0x821AFA18;
		  /* 821AFA18h */ case   12:  		/* mr R5, R20 */
		/* 821AFA18h case   12:*/		regs.R5 = regs.R20;
		/* 821AFA18h case   12:*/		return 0x821AFA1C;
		  /* 821AFA1Ch */ case   13:  		/* mr R4, R29 */
		/* 821AFA1Ch case   13:*/		regs.R4 = regs.R29;
		/* 821AFA1Ch case   13:*/		return 0x821AFA20;
		  /* 821AFA20h */ case   14:  		/* mr R3, R16 */
		/* 821AFA20h case   14:*/		regs.R3 = regs.R16;
		/* 821AFA20h case   14:*/		return 0x821AFA24;
		  /* 821AFA24h */ case   15:  		/* b -4740 */
		/* 821AFA24h case   15:*/		return 0x821AE7A0;
		/* 821AFA24h case   15:*/		return 0x821AFA28;
	}
	return 0x821AFA28;
} // Block from 821AF9E8h-821AFA28h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821AFA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFA28);
		  /* 821AFA28h */ case    0:  		/* mfspr R12, LR */
		/* 821AFA28h case    0:*/		regs.R12 = regs.LR;
		/* 821AFA28h case    0:*/		return 0x821AFA2C;
		  /* 821AFA2Ch */ case    1:  		/* bl -1173504 */
		/* 821AFA2Ch case    1:*/		regs.LR = 0x821AFA30; return 0x8209122C;
		/* 821AFA2Ch case    1:*/		return 0x821AFA30;
		  /* 821AFA30h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821AFA30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821AFA30h case    2:*/		return 0x821AFA34;
		  /* 821AFA34h */ case    3:  		/* mr R22, R3 */
		/* 821AFA34h case    3:*/		regs.R22 = regs.R3;
		/* 821AFA34h case    3:*/		return 0x821AFA38;
		  /* 821AFA38h */ case    4:  		/* mr R21, R4 */
		/* 821AFA38h case    4:*/		regs.R21 = regs.R4;
		/* 821AFA38h case    4:*/		return 0x821AFA3C;
		  /* 821AFA3Ch */ case    5:  		/* mr R24, R5 */
		/* 821AFA3Ch case    5:*/		regs.R24 = regs.R5;
		/* 821AFA3Ch case    5:*/		return 0x821AFA40;
		  /* 821AFA40h */ case    6:  		/* mr R23, R6 */
		/* 821AFA40h case    6:*/		regs.R23 = regs.R6;
		/* 821AFA40h case    6:*/		return 0x821AFA44;
		  /* 821AFA44h */ case    7:  		/* mr R17, R7 */
		/* 821AFA44h case    7:*/		regs.R17 = regs.R7;
		/* 821AFA44h case    7:*/		return 0x821AFA48;
		  /* 821AFA48h */ case    8:  		/* mr R20, R8 */
		/* 821AFA48h case    8:*/		regs.R20 = regs.R8;
		/* 821AFA48h case    8:*/		return 0x821AFA4C;
		  /* 821AFA4Ch */ case    9:  		/* mr R19, R9 */
		/* 821AFA4Ch case    9:*/		regs.R19 = regs.R9;
		/* 821AFA4Ch case    9:*/		return 0x821AFA50;
		  /* 821AFA50h */ case   10:  		/* mr R18, R10 */
		/* 821AFA50h case   10:*/		regs.R18 = regs.R10;
		/* 821AFA50h case   10:*/		return 0x821AFA54;
		  /* 821AFA54h */ case   11:  		/* cmplwi CR6, R6, 0 */
		/* 821AFA54h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821AFA54h case   11:*/		return 0x821AFA58;
		  /* 821AFA58h */ case   12:  		/* bc 12, CR6_EQ, 160 */
		/* 821AFA58h case   12:*/		if ( regs.CR[6].eq ) { return 0x821AFAF8;  }
		/* 821AFA58h case   12:*/		return 0x821AFA5C;
		  /* 821AFA5Ch */ case   13:  		/* addi R29, R5, -4 */
		/* 821AFA5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R5,0xFFFFFFFC);
		/* 821AFA5Ch case   13:*/		return 0x821AFA60;
		  /* 821AFA60h */ case   14:  		/* mr R28, R6 */
		/* 821AFA60h case   14:*/		regs.R28 = regs.R6;
		/* 821AFA60h case   14:*/		return 0x821AFA64;
		  /* 821AFA64h */ case   15:  		/* lwz R31, <#[R29 + 4]> */
		/* 821AFA64h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821AFA64h case   15:*/		return 0x821AFA68;
		  /* 821AFA68h */ case   16:  		/* b 104 */
		/* 821AFA68h case   16:*/		return 0x821AFAD0;
		/* 821AFA68h case   16:*/		return 0x821AFA6C;
		  /* 821AFA6Ch */ case   17:  		/* lwz R9, <#[R30 + 8]> */
		/* 821AFA6Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821AFA6Ch case   17:*/		return 0x821AFA70;
		  /* 821AFA70h */ case   18:  		/* rlwinm R10, R9, 25, 25, 31 */
		/* 821AFA70h case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R9);
		/* 821AFA70h case   18:*/		return 0x821AFA74;
		  /* 821AFA74h */ case   19:  		/* cmplwi CR6, R10, 32 */
		/* 821AFA74h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000020);
		/* 821AFA74h case   19:*/		return 0x821AFA78;
		  /* 821AFA78h */ case   20:  		/* bc 12, CR6_LT, 16 */
		/* 821AFA78h case   20:*/		if ( regs.CR[6].lt ) { return 0x821AFA88;  }
		/* 821AFA78h case   20:*/		return 0x821AFA7C;
		  /* 821AFA7Ch */ case   21:  		/* cmplwi CR6, R10, 82 */
		/* 821AFA7Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000052);
		/* 821AFA7Ch case   21:*/		return 0x821AFA80;
		  /* 821AFA80h */ case   22:  		/* li R11, 1 */
		/* 821AFA80h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AFA80h case   22:*/		return 0x821AFA84;
		  /* 821AFA84h */ case   23:  		/* bc 4, CR6_GT, 8 */
		/* 821AFA84h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821AFA8C;  }
		/* 821AFA84h case   23:*/		return 0x821AFA88;
	}
	return 0x821AFA88;
} // Block from 821AFA28h-821AFA88h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AFA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFA88);
		  /* 821AFA88h */ case    0:  		/* li R11, 0 */
		/* 821AFA88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AFA88h case    0:*/		return 0x821AFA8C;
	}
	return 0x821AFA8C;
} // Block from 821AFA88h-821AFA8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AFA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFA8C);
		  /* 821AFA8Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AFA8Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AFA8Ch case    0:*/		return 0x821AFA90;
		  /* 821AFA90h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821AFA90h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AFAA4;  }
		/* 821AFA90h case    1:*/		return 0x821AFA94;
		  /* 821AFA94h */ case    2:  		/* rlwinm R11, R9, 0, 10, 12 */
		/* 821AFA94h case    2:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R9);
		/* 821AFA94h case    2:*/		return 0x821AFA98;
		  /* 821AFA98h */ case    3:  		/* lis R8, 8 */
		/* 821AFA98h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0x8);
		/* 821AFA98h case    3:*/		return 0x821AFA9C;
		  /* 821AFA9Ch */ case    4:  		/* cmplw CR6, R11, R8 */
		/* 821AFA9Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821AFA9Ch case    4:*/		return 0x821AFAA0;
		  /* 821AFAA0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821AFAA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821AFAB4;  }
		/* 821AFAA0h case    5:*/		return 0x821AFAA4;
	}
	return 0x821AFAA4;
} // Block from 821AFA8Ch-821AFAA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAA4);
		  /* 821AFAA4h */ case    0:  		/* cmplwi CR6, R10, 96 */
		/* 821AFAA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000060);
		/* 821AFAA4h case    0:*/		return 0x821AFAA8;
		  /* 821AFAA8h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821AFAA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AFABC;  }
		/* 821AFAA8h case    1:*/		return 0x821AFAAC;
		  /* 821AFAACh */ case    2:  		/* rlwinm. R11, R9, 0, 10, 12 */
		/* 821AFAACh case    2:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R9);
		/* 821AFAACh case    2:*/		return 0x821AFAB0;
		  /* 821AFAB0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821AFAB0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821AFABC;  }
		/* 821AFAB0h case    3:*/		return 0x821AFAB4;
	}
	return 0x821AFAB4;
} // Block from 821AFAA4h-821AFAB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAB4);
		  /* 821AFAB4h */ case    0:  		/* lwz R31, <#[R30 + 44]> */
		/* 821AFAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000002C) );
		/* 821AFAB4h case    0:*/		return 0x821AFAB8;
		  /* 821AFAB8h */ case    1:  		/* b 24 */
		/* 821AFAB8h case    1:*/		return 0x821AFAD0;
		/* 821AFAB8h case    1:*/		return 0x821AFABC;
	}
	return 0x821AFABC;
} // Block from 821AFAB4h-821AFABCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AFABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFABC);
		  /* 821AFABCh */ case    0:  		/* cmplwi CR6, R10, 97 */
		/* 821AFABCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000061);
		/* 821AFABCh case    0:*/		return 0x821AFAC0;
		  /* 821AFAC0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821AFAC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AFACC;  }
		/* 821AFAC0h case    1:*/		return 0x821AFAC4;
		  /* 821AFAC4h */ case    2:  		/* cmplwi CR6, R10, 99 */
		/* 821AFAC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000063);
		/* 821AFAC4h case    2:*/		return 0x821AFAC8;
		  /* 821AFAC8h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821AFAC8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821AFAE8;  }
		/* 821AFAC8h case    3:*/		return 0x821AFACC;
	}
	return 0x821AFACC;
} // Block from 821AFABCh-821AFACCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AFACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFACC);
		  /* 821AFACCh */ case    0:  		/* lwz R31, <#[R30 + 48]> */
		/* 821AFACCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000030) );
		/* 821AFACCh case    0:*/		return 0x821AFAD0;
	}
	return 0x821AFAD0;
} // Block from 821AFACCh-821AFAD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAD0);
		  /* 821AFAD0h */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 821AFAD0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AFAD0h case    0:*/		return 0x821AFAD4;
		  /* 821AFAD4h */ case    1:  		/* mr R3, R30 */
		/* 821AFAD4h case    1:*/		regs.R3 = regs.R30;
		/* 821AFAD4h case    1:*/		return 0x821AFAD8;
		  /* 821AFAD8h */ case    2:  		/* bl -81384 */
		/* 821AFAD8h case    2:*/		regs.LR = 0x821AFADC; return 0x8219BCF0;
		/* 821AFAD8h case    2:*/		return 0x821AFADC;
		  /* 821AFADCh */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AFADCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AFADCh case    3:*/		return 0x821AFAE0;
		  /* 821AFAE0h */ case    4:  		/* bc 12, CR0_EQ, -116 */
		/* 821AFAE0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821AFA6C;  }
		/* 821AFAE0h case    4:*/		return 0x821AFAE4;
		  /* 821AFAE4h */ case    5:  		/* b 8 */
		/* 821AFAE4h case    5:*/		return 0x821AFAEC;
		/* 821AFAE4h case    5:*/		return 0x821AFAE8;
	}
	return 0x821AFAE8;
} // Block from 821AFAD0h-821AFAE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAE8);
		  /* 821AFAE8h */ case    0:  		/* li R31, 0 */
		/* 821AFAE8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AFAE8h case    0:*/		return 0x821AFAEC;
	}
	return 0x821AFAEC;
} // Block from 821AFAE8h-821AFAECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAEC);
		  /* 821AFAECh */ case    0:  		/* addic. R28, R28, -1 */
		/* 821AFAECh case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821AFAECh case    0:*/		return 0x821AFAF0;
		  /* 821AFAF0h */ case    1:  		/* stwu R31, <#[R29 + 8]> */
		/* 821AFAF0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000008) );
		regs.R29 = (uint32)(regs.R29 + 0x00000008);
		/* 821AFAF0h case    1:*/		return 0x821AFAF4;
		  /* 821AFAF4h */ case    2:  		/* bc 4, CR0_EQ, -144 */
		/* 821AFAF4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821AFA64;  }
		/* 821AFAF4h case    2:*/		return 0x821AFAF8;
	}
	return 0x821AFAF8;
} // Block from 821AFAECh-821AFAF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AFAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFAF8);
		  /* 821AFAF8h */ case    0:  		/* lis R11, -32230 */
		/* 821AFAF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821A);
		/* 821AFAF8h case    0:*/		return 0x821AFAFC;
		  /* 821AFAFCh */ case    1:  		/* li R5, 8 */
		/* 821AFAFCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821AFAFCh case    1:*/		return 0x821AFB00;
		  /* 821AFB00h */ case    2:  		/* addi R6, R11, -9296 */
		/* 821AFB00h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFDBB0);
		/* 821AFB00h case    2:*/		return 0x821AFB04;
		  /* 821AFB04h */ case    3:  		/* mr R4, R23 */
		/* 821AFB04h case    3:*/		regs.R4 = regs.R23;
		/* 821AFB04h case    3:*/		return 0x821AFB08;
		  /* 821AFB08h */ case    4:  		/* mr R3, R24 */
		/* 821AFB08h case    4:*/		regs.R3 = regs.R24;
		/* 821AFB08h case    4:*/		return 0x821AFB0C;
		  /* 821AFB0Ch */ case    5:  		/* bl -1170220 */
		/* 821AFB0Ch case    5:*/		regs.LR = 0x821AFB10; return 0x82091FE0;
		/* 821AFB0Ch case    5:*/		return 0x821AFB10;
		  /* 821AFB10h */ case    6:  		/* li R28, 0 */
		/* 821AFB10h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821AFB10h case    6:*/		return 0x821AFB14;
		  /* 821AFB14h */ case    7:  		/* li R31, 0 */
		/* 821AFB14h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AFB14h case    7:*/		return 0x821AFB18;
		  /* 821AFB18h */ case    8:  		/* li R30, 0 */
		/* 821AFB18h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AFB18h case    8:*/		return 0x821AFB1C;
		  /* 821AFB1Ch */ case    9:  		/* cmplwi CR6, R23, 0 */
		/* 821AFB1Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821AFB1Ch case    9:*/		return 0x821AFB20;
		  /* 821AFB20h */ case   10:  		/* bc 12, CR6_EQ, 136 */
		/* 821AFB20h case   10:*/		if ( regs.CR[6].eq ) { return 0x821AFBA8;  }
		/* 821AFB20h case   10:*/		return 0x821AFB24;
		  /* 821AFB24h */ case   11:  		/* li R27, 0 */
		/* 821AFB24h case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821AFB24h case   11:*/		return 0x821AFB28;
		  /* 821AFB28h */ case   12:  		/* mr R26, R24 */
		/* 821AFB28h case   12:*/		regs.R26 = regs.R24;
		/* 821AFB28h case   12:*/		return 0x821AFB2C;
		  /* 821AFB2Ch */ case   13:  		/* subfic R25, R24, 8 */
		/* 821AFB2Ch case   13:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R24,0x8);
		/* 821AFB2Ch case   13:*/		return 0x821AFB30;
		  /* 821AFB30h */ case   14:  		/* cmplw CR6, R31, R30 */
		/* 821AFB30h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821AFB30h case   14:*/		return 0x821AFB34;
		  /* 821AFB34h */ case   15:  		/* bc 12, CR6_EQ, 80 */
		/* 821AFB34h case   15:*/		if ( regs.CR[6].eq ) { return 0x821AFB84;  }
		/* 821AFB34h case   15:*/		return 0x821AFB38;
		  /* 821AFB38h */ case   16:  		/* add R29, R27, R24 */
		/* 821AFB38h case   16:*/		cpu::op::add<0>(regs,&regs.R29,regs.R27,regs.R24);
		/* 821AFB38h case   16:*/		return 0x821AFB3C;
		  /* 821AFB3Ch */ case   17:  		/* mr R4, R26 */
		/* 821AFB3Ch case   17:*/		regs.R4 = regs.R26;
		/* 821AFB3Ch case   17:*/		return 0x821AFB40;
		  /* 821AFB40h */ case   18:  		/* mr R3, R29 */
		/* 821AFB40h case   18:*/		regs.R3 = regs.R29;
		/* 821AFB40h case   18:*/		return 0x821AFB44;
		  /* 821AFB44h */ case   19:  		/* bl -74404 */
		/* 821AFB44h case   19:*/		regs.LR = 0x821AFB48; return 0x8219D8A0;
		/* 821AFB44h case   19:*/		return 0x821AFB48;
		  /* 821AFB48h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 821AFB48h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821AFB48h case   20:*/		return 0x821AFB4C;
		  /* 821AFB4Ch */ case   21:  		/* bc 12, CR0_EQ, 56 */
		/* 821AFB4Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821AFB84;  }
		/* 821AFB4Ch case   21:*/		return 0x821AFB50;
		  /* 821AFB50h */ case   22:  		/* subf R6, R31, R30 */
		/* 821AFB50h case   22:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R31,regs.R30);
		/* 821AFB50h case   22:*/		return 0x821AFB54;
		  /* 821AFB54h */ case   23:  		/* cmplw CR6, R6, R17 */
		/* 821AFB54h case   23:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R17);
		/* 821AFB54h case   23:*/		return 0x821AFB58;
		  /* 821AFB58h */ case   24:  		/* bc 12, CR6_LT, 36 */
		/* 821AFB58h case   24:*/		if ( regs.CR[6].lt ) { return 0x821AFB7C;  }
		/* 821AFB58h case   24:*/		return 0x821AFB5C;
		  /* 821AFB5Ch */ case   25:  		/* mr R9, R18 */
		/* 821AFB5Ch case   25:*/		regs.R9 = regs.R18;
		/* 821AFB5Ch case   25:*/		return 0x821AFB60;
		  /* 821AFB60h */ case   26:  		/* mr R8, R19 */
		/* 821AFB60h case   26:*/		regs.R8 = regs.R19;
		/* 821AFB60h case   26:*/		return 0x821AFB64;
		  /* 821AFB64h */ case   27:  		/* mr R7, R20 */
		/* 821AFB64h case   27:*/		regs.R7 = regs.R20;
		/* 821AFB64h case   27:*/		return 0x821AFB68;
		  /* 821AFB68h */ case   28:  		/* mr R5, R29 */
		/* 821AFB68h case   28:*/		regs.R5 = regs.R29;
		/* 821AFB68h case   28:*/		return 0x821AFB6C;
		  /* 821AFB6Ch */ case   29:  		/* mr R4, R21 */
		/* 821AFB6Ch case   29:*/		regs.R4 = regs.R21;
		/* 821AFB6Ch case   29:*/		return 0x821AFB70;
		  /* 821AFB70h */ case   30:  		/* mr R3, R22 */
		/* 821AFB70h case   30:*/		regs.R3 = regs.R22;
		/* 821AFB70h case   30:*/		return 0x821AFB74;
		  /* 821AFB74h */ case   31:  		/* bl -41116 */
		/* 821AFB74h case   31:*/		regs.LR = 0x821AFB78; return 0x821A5AD8;
		/* 821AFB74h case   31:*/		return 0x821AFB78;
		  /* 821AFB78h */ case   32:  		/* add R28, R3, R28 */
		/* 821AFB78h case   32:*/		cpu::op::add<0>(regs,&regs.R28,regs.R3,regs.R28);
		/* 821AFB78h case   32:*/		return 0x821AFB7C;
	}
	return 0x821AFB7C;
} // Block from 821AFAF8h-821AFB7Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 821AFB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFB7C);
		  /* 821AFB7Ch */ case    0:  		/* mr R31, R30 */
		/* 821AFB7Ch case    0:*/		regs.R31 = regs.R30;
		/* 821AFB7Ch case    0:*/		return 0x821AFB80;
		  /* 821AFB80h */ case    1:  		/* rlwinm R27, R30, 3, 0, 28 */
		/* 821AFB80h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R27,regs.R30);
		/* 821AFB80h case    1:*/		return 0x821AFB84;
	}
	return 0x821AFB84;
} // Block from 821AFB7Ch-821AFB84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AFB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFB84);
		  /* 821AFB84h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821AFB84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821AFB84h case    0:*/		return 0x821AFB88;
		  /* 821AFB88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821AFB88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AFB88h case    1:*/		return 0x821AFB8C;
		  /* 821AFB8Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821AFB8Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AFB98;  }
		/* 821AFB8Ch case    2:*/		return 0x821AFB90;
		  /* 821AFB90h */ case    3:  		/* addi R31, R30, 1 */
		/* 821AFB90h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x1);
		/* 821AFB90h case    3:*/		return 0x821AFB94;
		  /* 821AFB94h */ case    4:  		/* add R27, R25, R26 */
		/* 821AFB94h case    4:*/		cpu::op::add<0>(regs,&regs.R27,regs.R25,regs.R26);
		/* 821AFB94h case    4:*/		return 0x821AFB98;
	}
	return 0x821AFB98;
} // Block from 821AFB84h-821AFB98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AFB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFB98);
		  /* 821AFB98h */ case    0:  		/* addi R30, R30, 1 */
		/* 821AFB98h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821AFB98h case    0:*/		return 0x821AFB9C;
		  /* 821AFB9Ch */ case    1:  		/* addi R26, R26, 8 */
		/* 821AFB9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x8);
		/* 821AFB9Ch case    1:*/		return 0x821AFBA0;
		  /* 821AFBA0h */ case    2:  		/* cmplw CR6, R30, R23 */
		/* 821AFBA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R23);
		/* 821AFBA0h case    2:*/		return 0x821AFBA4;
		  /* 821AFBA4h */ case    3:  		/* bc 12, CR6_LT, -116 */
		/* 821AFBA4h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AFB30;  }
		/* 821AFBA4h case    3:*/		return 0x821AFBA8;
	}
	return 0x821AFBA8;
} // Block from 821AFB98h-821AFBA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AFBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFBA8);
		  /* 821AFBA8h */ case    0:  		/* subf. R6, R31, R23 */
		/* 821AFBA8h case    0:*/		cpu::op::subf<1>(regs,&regs.R6,regs.R31,regs.R23);
		/* 821AFBA8h case    0:*/		return 0x821AFBAC;
		  /* 821AFBACh */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821AFBACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821AFBDC;  }
		/* 821AFBACh case    1:*/		return 0x821AFBB0;
		  /* 821AFBB0h */ case    2:  		/* cmplw CR6, R6, R17 */
		/* 821AFBB0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R17);
		/* 821AFBB0h case    2:*/		return 0x821AFBB4;
		  /* 821AFBB4h */ case    3:  		/* bc 12, CR6_LT, 40 */
		/* 821AFBB4h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AFBDC;  }
		/* 821AFBB4h case    3:*/		return 0x821AFBB8;
		  /* 821AFBB8h */ case    4:  		/* rlwinm R11, R31, 3, 0, 28 */
		/* 821AFBB8h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R31);
		/* 821AFBB8h case    4:*/		return 0x821AFBBC;
		  /* 821AFBBCh */ case    5:  		/* mr R9, R18 */
		/* 821AFBBCh case    5:*/		regs.R9 = regs.R18;
		/* 821AFBBCh case    5:*/		return 0x821AFBC0;
		  /* 821AFBC0h */ case    6:  		/* mr R8, R19 */
		/* 821AFBC0h case    6:*/		regs.R8 = regs.R19;
		/* 821AFBC0h case    6:*/		return 0x821AFBC4;
		  /* 821AFBC4h */ case    7:  		/* mr R7, R20 */
		/* 821AFBC4h case    7:*/		regs.R7 = regs.R20;
		/* 821AFBC4h case    7:*/		return 0x821AFBC8;
		  /* 821AFBC8h */ case    8:  		/* add R5, R11, R24 */
		/* 821AFBC8h case    8:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R24);
		/* 821AFBC8h case    8:*/		return 0x821AFBCC;
		  /* 821AFBCCh */ case    9:  		/* mr R4, R21 */
		/* 821AFBCCh case    9:*/		regs.R4 = regs.R21;
		/* 821AFBCCh case    9:*/		return 0x821AFBD0;
		  /* 821AFBD0h */ case   10:  		/* mr R3, R22 */
		/* 821AFBD0h case   10:*/		regs.R3 = regs.R22;
		/* 821AFBD0h case   10:*/		return 0x821AFBD4;
		  /* 821AFBD4h */ case   11:  		/* bl -41212 */
		/* 821AFBD4h case   11:*/		regs.LR = 0x821AFBD8; return 0x821A5AD8;
		/* 821AFBD4h case   11:*/		return 0x821AFBD8;
		  /* 821AFBD8h */ case   12:  		/* add R28, R3, R28 */
		/* 821AFBD8h case   12:*/		cpu::op::add<0>(regs,&regs.R28,regs.R3,regs.R28);
		/* 821AFBD8h case   12:*/		return 0x821AFBDC;
	}
	return 0x821AFBDC;
} // Block from 821AFBA8h-821AFBDCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AFBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFBDC);
		  /* 821AFBDCh */ case    0:  		/* mr R3, R28 */
		/* 821AFBDCh case    0:*/		regs.R3 = regs.R28;
		/* 821AFBDCh case    0:*/		return 0x821AFBE0;
		  /* 821AFBE0h */ case    1:  		/* addi R1, R1, 208 */
		/* 821AFBE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821AFBE0h case    1:*/		return 0x821AFBE4;
		  /* 821AFBE4h */ case    2:  		/* b -1173864 */
		/* 821AFBE4h case    2:*/		return 0x8209127C;
		/* 821AFBE4h case    2:*/		return 0x821AFBE8;
	}
	return 0x821AFBE8;
} // Block from 821AFBDCh-821AFBE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AFBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFBE8);
		  /* 821AFBE8h */ case    0:  		/* mfspr R12, LR */
		/* 821AFBE8h case    0:*/		regs.R12 = regs.LR;
		/* 821AFBE8h case    0:*/		return 0x821AFBEC;
		  /* 821AFBECh */ case    1:  		/* bl -1173928 */
		/* 821AFBECh case    1:*/		regs.LR = 0x821AFBF0; return 0x82091244;
		/* 821AFBECh case    1:*/		return 0x821AFBF0;
		  /* 821AFBF0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821AFBF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821AFBF0h case    2:*/		return 0x821AFBF4;
		  /* 821AFBF4h */ case    3:  		/* mr R24, R3 */
		/* 821AFBF4h case    3:*/		regs.R24 = regs.R3;
		/* 821AFBF4h case    3:*/		return 0x821AFBF8;
		  /* 821AFBF8h */ case    4:  		/* mr R25, R4 */
		/* 821AFBF8h case    4:*/		regs.R25 = regs.R4;
		/* 821AFBF8h case    4:*/		return 0x821AFBFC;
		  /* 821AFBFCh */ case    5:  		/* mr R23, R5 */
		/* 821AFBFCh case    5:*/		regs.R23 = regs.R5;
		/* 821AFBFCh case    5:*/		return 0x821AFC00;
		  /* 821AFC00h */ case    6:  		/* lwz R11, <#[R25 + 4]> */
		/* 821AFC00h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821AFC00h case    6:*/		return 0x821AFC04;
		  /* 821AFC04h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AFC04h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AFC04h case    7:*/		return 0x821AFC08;
		  /* 821AFC08h */ case    8:  		/* bc 4, CR0_EQ, 440 */
		/* 821AFC08h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821AFDC0;  }
		/* 821AFC08h case    8:*/		return 0x821AFC0C;
		  /* 821AFC0Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821AFC0Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AFC0Ch case    9:*/		return 0x821AFC10;
		  /* 821AFC10h */ case   10:  		/* bc 12, CR0_EQ, 432 */
		/* 821AFC10h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AFDC0;  }
		/* 821AFC10h case   10:*/		return 0x821AFC14;
		  /* 821AFC14h */ case   11:  		/* lwz R11, <#[R25]> */
		/* 821AFC14h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821AFC14h case   11:*/		return 0x821AFC18;
		  /* 821AFC18h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AFC18h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AFC18h case   12:*/		return 0x821AFC1C;
		  /* 821AFC1Ch */ case   13:  		/* addi R4, R11, -4 */
		/* 821AFC1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821AFC1Ch case   13:*/		return 0x821AFC20;
		  /* 821AFC20h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AFC20h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AFC20h case   14:*/		return 0x821AFC24;
		  /* 821AFC24h */ case   15:  		/* addi R10, R11, 3 */
		/* 821AFC24h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821AFC24h case   15:*/		return 0x821AFC28;
		  /* 821AFC28h */ case   16:  		/* addic. R11, R11, -1 */
		/* 821AFC28h case   16:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821AFC28h case   16:*/		return 0x821AFC2C;
		  /* 821AFC2Ch */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821AFC2Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821AFC2Ch case   17:*/		return 0x821AFC30;
		  /* 821AFC30h */ case   18:  		/* lwzx R27, <#[R10 + R4]> */
		/* 821AFC30h case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821AFC30h case   18:*/		return 0x821AFC34;
		  /* 821AFC34h */ case   19:  		/* stw R11, <#[R4 + 8]> */
		/* 821AFC34h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821AFC34h case   19:*/		return 0x821AFC38;
		  /* 821AFC38h */ case   20:  		/* bc 4, CR0_EQ, 60 */
		/* 821AFC38h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821AFC74;  }
		/* 821AFC38h case   20:*/		return 0x821AFC3C;
		  /* 821AFC3Ch */ case   21:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821AFC3Ch case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821AFC3Ch case   21:*/		return 0x821AFC40;
		  /* 821AFC40h */ case   22:  		/* mr R3, R25 */
		/* 821AFC40h case   22:*/		regs.R3 = regs.R25;
		/* 821AFC40h case   22:*/		return 0x821AFC44;
		  /* 821AFC44h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 821AFC44h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AFC44h case   23:*/		return 0x821AFC48;
		  /* 821AFC48h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 821AFC48h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AFC48h case   24:*/		return 0x821AFC4C;
		  /* 821AFC4Ch */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821AFC4Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821AFC4Ch case   25:*/		return 0x821AFC50;
		  /* 821AFC50h */ case   26:  		/* stw R9, <#[R10]> */
		/* 821AFC50h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AFC50h case   26:*/		return 0x821AFC54;
		  /* 821AFC54h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 821AFC54h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AFC54h case   27:*/		return 0x821AFC58;
		  /* 821AFC58h */ case   28:  		/* lwz R11, <#[R11]> */
		/* 821AFC58h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821AFC58h case   28:*/		return 0x821AFC5C;
		  /* 821AFC5Ch */ case   29:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AFC5Ch case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AFC5Ch case   29:*/		return 0x821AFC60;
		  /* 821AFC60h */ case   30:  		/* stw R10, <#[R11]> */
		/* 821AFC60h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AFC60h case   30:*/		return 0x821AFC64;
		  /* 821AFC64h */ case   31:  		/* lwz R11, <#[R4 + 12]> */
		/* 821AFC64h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821AFC64h case   31:*/		return 0x821AFC68;
		  /* 821AFC68h */ case   32:  		/* addi R11, R11, 4 */
		/* 821AFC68h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AFC68h case   32:*/		return 0x821AFC6C;
		  /* 821AFC6Ch */ case   33:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821AFC6Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821AFC6Ch case   33:*/		return 0x821AFC70;
		  /* 821AFC70h */ case   34:  		/* bl -384616 */
		/* 821AFC70h case   34:*/		regs.LR = 0x821AFC74; return 0x82151E08;
		/* 821AFC70h case   34:*/		return 0x821AFC74;
	}
	return 0x821AFC74;
} // Block from 821AFBE8h-821AFC74h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AFC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFC74);
		  /* 821AFC74h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821AFC74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFC74h case    0:*/		return 0x821AFC78;
		  /* 821AFC78h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 18 */
		/* 821AFC78h case    1:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R11,regs.R11);
		/* 821AFC78h case    1:*/		return 0x821AFC7C;
		  /* 821AFC7Ch */ case    2:  		/* bc 12, CR0_EQ, -124 */
		/* 821AFC7Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821AFC00;  }
		/* 821AFC7Ch case    2:*/		return 0x821AFC80;
		  /* 821AFC80h */ case    3:  		/* lwz R11, <#[R27 + 24]> */
		/* 821AFC80h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 821AFC80h case    3:*/		return 0x821AFC84;
		  /* 821AFC84h */ case    4:  		/* addi R26, R27, 24 */
		/* 821AFC84h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0x18);
		/* 821AFC84h case    4:*/		return 0x821AFC88;
		  /* 821AFC88h */ case    5:  		/* li R31, 0 */
		/* 821AFC88h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AFC88h case    5:*/		return 0x821AFC8C;
		  /* 821AFC8Ch */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AFC8Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AFC8Ch case    6:*/		return 0x821AFC90;
		  /* 821AFC90h */ case    7:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821AFC90h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821AFC90h case    7:*/		return 0x821AFC94;
		  /* 821AFC94h */ case    8:  		/* rlwinm R30, R11, 13, 29, 31 */
		/* 821AFC94h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R30,regs.R11);
		/* 821AFC94h case    8:*/		return 0x821AFC98;
		  /* 821AFC98h */ case    9:  		/* cmplwi CR6, R10, 12800 */
		/* 821AFC98h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003200);
		/* 821AFC98h case    9:*/		return 0x821AFC9C;
		  /* 821AFC9Ch */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 821AFC9Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821AFCA8;  }
		/* 821AFC9Ch case   10:*/		return 0x821AFCA0;
		  /* 821AFCA0h */ case   11:  		/* li R31, 1 */
		/* 821AFCA0h case   11:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821AFCA0h case   11:*/		return 0x821AFCA4;
		  /* 821AFCA4h */ case   12:  		/* li R30, 1 */
		/* 821AFCA4h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821AFCA4h case   12:*/		return 0x821AFCA8;
	}
	return 0x821AFCA8;
} // Block from 821AFC74h-821AFCA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AFCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFCA8);
		  /* 821AFCA8h */ case    0:  		/* cmplw CR6, R31, R30 */
		/* 821AFCA8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821AFCA8h case    0:*/		return 0x821AFCAC;
		  /* 821AFCACh */ case    1:  		/* bc 4, CR6_LT, 56 */
		/* 821AFCACh case    1:*/		if ( !regs.CR[6].lt ) { return 0x821AFCE4;  }
		/* 821AFCACh case    1:*/		return 0x821AFCB0;
		  /* 821AFCB0h */ case    2:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821AFCB0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821AFCB0h case    2:*/		return 0x821AFCB4;
		  /* 821AFCB4h */ case    3:  		/* addi R11, R1, 80 */
		/* 821AFCB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821AFCB4h case    3:*/		return 0x821AFCB8;
		  /* 821AFCB8h */ case    4:  		/* subf R29, R31, R30 */
		/* 821AFCB8h case    4:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R31,regs.R30);
		/* 821AFCB8h case    4:*/		return 0x821AFCBC;
		  /* 821AFCBCh */ case    5:  		/* add R11, R10, R11 */
		/* 821AFCBCh case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AFCBCh case    5:*/		return 0x821AFCC0;
		  /* 821AFCC0h */ case    6:  		/* addi R28, R11, -4 */
		/* 821AFCC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 821AFCC0h case    6:*/		return 0x821AFCC4;
		  /* 821AFCC4h */ case    7:  		/* lwz R11, <#[R27]> */
		/* 821AFCC4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFCC4h case    7:*/		return 0x821AFCC8;
		  /* 821AFCC8h */ case    8:  		/* li R5, 0 */
		/* 821AFCC8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AFCC8h case    8:*/		return 0x821AFCCC;
		  /* 821AFCCCh */ case    9:  		/* mr R3, R24 */
		/* 821AFCCCh case    9:*/		regs.R3 = regs.R24;
		/* 821AFCCCh case    9:*/		return 0x821AFCD0;
		  /* 821AFCD0h */ case   10:  		/* rlwinm R4, R11, 3, 16, 28 */
		/* 821AFCD0h case   10:*/		cpu::op::rlwinm<0,3,16,28>(regs,&regs.R4,regs.R11);
		/* 821AFCD0h case   10:*/		return 0x821AFCD4;
		  /* 821AFCD4h */ case   11:  		/* bl -306332 */
		/* 821AFCD4h case   11:*/		regs.LR = 0x821AFCD8; return 0x82165038;
		/* 821AFCD4h case   11:*/		return 0x821AFCD8;
		  /* 821AFCD8h */ case   12:  		/* addic. R29, R29, -1 */
		/* 821AFCD8h case   12:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821AFCD8h case   12:*/		return 0x821AFCDC;
		  /* 821AFCDCh */ case   13:  		/* stwu R3, <#[R28 + 4]> */
		/* 821AFCDCh case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 821AFCDCh case   13:*/		return 0x821AFCE0;
		  /* 821AFCE0h */ case   14:  		/* bc 4, CR0_EQ, -28 */
		/* 821AFCE0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821AFCC4;  }
		/* 821AFCE0h case   14:*/		return 0x821AFCE4;
	}
	return 0x821AFCE4;
} // Block from 821AFCA8h-821AFCE4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AFCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFCE4);
		  /* 821AFCE4h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821AFCE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFCE4h case    0:*/		return 0x821AFCE8;
		  /* 821AFCE8h */ case    1:  		/* li R6, 0 */
		/* 821AFCE8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AFCE8h case    1:*/		return 0x821AFCEC;
		  /* 821AFCECh */ case    2:  		/* rlwinm. R11, R11, 0, 19, 31 */
		/* 821AFCECh case    2:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821AFCECh case    2:*/		return 0x821AFCF0;
		  /* 821AFCF0h */ case    3:  		/* bc 12, CR0_EQ, 100 */
		/* 821AFCF0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821AFD54;  }
		/* 821AFCF0h case    3:*/		return 0x821AFCF4;
		  /* 821AFCF4h */ case    4:  		/* mr R5, R26 */
		/* 821AFCF4h case    4:*/		regs.R5 = regs.R26;
		/* 821AFCF4h case    4:*/		return 0x821AFCF8;
		  /* 821AFCF8h */ case    5:  		/* lwz R7, <#[R5]> */
		/* 821AFCF8h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000000) );
		/* 821AFCF8h case    5:*/		return 0x821AFCFC;
		  /* 821AFCFCh */ case    6:  		/* cmplw CR6, R31, R30 */
		/* 821AFCFCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821AFCFCh case    6:*/		return 0x821AFD00;
		  /* 821AFD00h */ case    7:  		/* bc 4, CR6_LT, 60 */
		/* 821AFD00h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821AFD3C;  }
		/* 821AFD00h case    7:*/		return 0x821AFD04;
		  /* 821AFD04h */ case    8:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821AFD04h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821AFD04h case    8:*/		return 0x821AFD08;
		  /* 821AFD08h */ case    9:  		/* addi R11, R1, 80 */
		/* 821AFD08h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821AFD08h case    9:*/		return 0x821AFD0C;
		  /* 821AFD0Ch */ case   10:  		/* addi R9, R31, 10 */
		/* 821AFD0Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xA);
		/* 821AFD0Ch case   10:*/		return 0x821AFD10;
		  /* 821AFD10h */ case   11:  		/* subf R4, R31, R30 */
		/* 821AFD10h case   11:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R31,regs.R30);
		/* 821AFD10h case   11:*/		return 0x821AFD14;
		  /* 821AFD14h */ case   12:  		/* add R11, R10, R11 */
		/* 821AFD14h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AFD14h case   12:*/		return 0x821AFD18;
		  /* 821AFD18h */ case   13:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821AFD18h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821AFD18h case   13:*/		return 0x821AFD1C;
		  /* 821AFD1Ch */ case   14:  		/* addi R9, R11, -4 */
		/* 821AFD1Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFC);
		/* 821AFD1Ch case   14:*/		return 0x821AFD20;
		  /* 821AFD20h */ case   15:  		/* rlwinm R8, R6, 3, 0, 28 */
		/* 821AFD20h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R6);
		/* 821AFD20h case   15:*/		return 0x821AFD24;
		  /* 821AFD24h */ case   16:  		/* add R11, R10, R7 */
		/* 821AFD24h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R7);
		/* 821AFD24h case   16:*/		return 0x821AFD28;
		  /* 821AFD28h */ case   17:  		/* mtspr CTR, R4 */
		/* 821AFD28h case   17:*/		regs.CTR = regs.R4;
		/* 821AFD28h case   17:*/		return 0x821AFD2C;
		  /* 821AFD2Ch */ case   18:  		/* lwzu R10, <#[R11 + 4]> */
		/* 821AFD2Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821AFD2Ch case   18:*/		return 0x821AFD30;
		  /* 821AFD30h */ case   19:  		/* lwzu R7, <#[R9 + 4]> */
		/* 821AFD30h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821AFD30h case   19:*/		return 0x821AFD34;
		  /* 821AFD34h */ case   20:  		/* stwx R10, <#[R7 + R8]> */
		/* 821AFD34h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821AFD34h case   20:*/		return 0x821AFD38;
		  /* 821AFD38h */ case   21:  		/* bc 16, CR0_LT, -12 */
		/* 821AFD38h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AFD2C;  }
		/* 821AFD38h case   21:*/		return 0x821AFD3C;
	}
	return 0x821AFD3C;
} // Block from 821AFCE4h-821AFD3Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821AFD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFD3C);
		  /* 821AFD3Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821AFD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFD3Ch case    0:*/		return 0x821AFD40;
		  /* 821AFD40h */ case    1:  		/* addi R6, R6, 1 */
		/* 821AFD40h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821AFD40h case    1:*/		return 0x821AFD44;
		  /* 821AFD44h */ case    2:  		/* addi R5, R5, 4 */
		/* 821AFD44h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 821AFD44h case    2:*/		return 0x821AFD48;
		  /* 821AFD48h */ case    3:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821AFD48h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821AFD48h case    3:*/		return 0x821AFD4C;
		  /* 821AFD4Ch */ case    4:  		/* cmplw CR6, R6, R11 */
		/* 821AFD4Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821AFD4Ch case    4:*/		return 0x821AFD50;
		  /* 821AFD50h */ case    5:  		/* bc 12, CR6_LT, -88 */
		/* 821AFD50h case    5:*/		if ( regs.CR[6].lt ) { return 0x821AFCF8;  }
		/* 821AFD50h case    5:*/		return 0x821AFD54;
	}
	return 0x821AFD54;
} // Block from 821AFD3Ch-821AFD54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AFD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFD54);
		  /* 821AFD54h */ case    0:  		/* cmplw CR6, R31, R30 */
		/* 821AFD54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821AFD54h case    0:*/		return 0x821AFD58;
		  /* 821AFD58h */ case    1:  		/* bc 4, CR6_LT, -344 */
		/* 821AFD58h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821AFC00;  }
		/* 821AFD58h case    1:*/		return 0x821AFD5C;
		  /* 821AFD5Ch */ case    2:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 821AFD5Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 821AFD5Ch case    2:*/		return 0x821AFD60;
		  /* 821AFD60h */ case    3:  		/* addi R10, R1, 80 */
		/* 821AFD60h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821AFD60h case    3:*/		return 0x821AFD64;
		  /* 821AFD64h */ case    4:  		/* subf R31, R31, R30 */
		/* 821AFD64h case    4:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R31,regs.R30);
		/* 821AFD64h case    4:*/		return 0x821AFD68;
		  /* 821AFD68h */ case    5:  		/* add R11, R11, R10 */
		/* 821AFD68h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AFD68h case    5:*/		return 0x821AFD6C;
		  /* 821AFD6Ch */ case    6:  		/* addi R29, R11, -4 */
		/* 821AFD6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821AFD6Ch case    6:*/		return 0x821AFD70;
		  /* 821AFD70h */ case    7:  		/* lwz R11, <#[R27]> */
		/* 821AFD70h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFD70h case    7:*/		return 0x821AFD74;
		  /* 821AFD74h */ case    8:  		/* mr R10, R23 */
		/* 821AFD74h case    8:*/		regs.R10 = regs.R23;
		/* 821AFD74h case    8:*/		return 0x821AFD78;
		  /* 821AFD78h */ case    9:  		/* lwzu R30, <#[R29 + 4]> */
		/* 821AFD78h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821AFD78h case    9:*/		return 0x821AFD7C;
		  /* 821AFD7Ch */ case   10:  		/* mr R9, R25 */
		/* 821AFD7Ch case   10:*/		regs.R9 = regs.R25;
		/* 821AFD7Ch case   10:*/		return 0x821AFD80;
		  /* 821AFD80h */ case   11:  		/* li R8, 0 */
		/* 821AFD80h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821AFD80h case   11:*/		return 0x821AFD84;
		  /* 821AFD84h */ case   12:  		/* mr R5, R30 */
		/* 821AFD84h case   12:*/		regs.R5 = regs.R30;
		/* 821AFD84h case   12:*/		return 0x821AFD88;
		  /* 821AFD88h */ case   13:  		/* li R7, 0 */
		/* 821AFD88h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821AFD88h case   13:*/		return 0x821AFD8C;
		  /* 821AFD8Ch */ case   14:  		/* rlwinm R6, R11, 0, 19, 31 */
		/* 821AFD8Ch case   14:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R6,regs.R11);
		/* 821AFD8Ch case   14:*/		return 0x821AFD90;
		  /* 821AFD90h */ case   15:  		/* mr R4, R27 */
		/* 821AFD90h case   15:*/		regs.R4 = regs.R27;
		/* 821AFD90h case   15:*/		return 0x821AFD94;
		  /* 821AFD94h */ case   16:  		/* mr R3, R24 */
		/* 821AFD94h case   16:*/		regs.R3 = regs.R24;
		/* 821AFD94h case   16:*/		return 0x821AFD98;
		  /* 821AFD98h */ case   17:  		/* bl -880 */
		/* 821AFD98h case   17:*/		regs.LR = 0x821AFD9C; return 0x821AFA28;
		/* 821AFD98h case   17:*/		return 0x821AFD9C;
		  /* 821AFD9Ch */ case   18:  		/* lwz R11, <#[R27]> */
		/* 821AFD9Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AFD9Ch case   18:*/		return 0x821AFDA0;
		  /* 821AFDA0h */ case   19:  		/* li R6, 0 */
		/* 821AFDA0h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AFDA0h case   19:*/		return 0x821AFDA4;
		  /* 821AFDA4h */ case   20:  		/* mr R4, R30 */
		/* 821AFDA4h case   20:*/		regs.R4 = regs.R30;
		/* 821AFDA4h case   20:*/		return 0x821AFDA8;
		  /* 821AFDA8h */ case   21:  		/* mr R3, R24 */
		/* 821AFDA8h case   21:*/		regs.R3 = regs.R24;
		/* 821AFDA8h case   21:*/		return 0x821AFDAC;
		  /* 821AFDACh */ case   22:  		/* rlwinm R5, R11, 3, 16, 28 */
		/* 821AFDACh case   22:*/		cpu::op::rlwinm<0,3,16,28>(regs,&regs.R5,regs.R11);
		/* 821AFDACh case   22:*/		return 0x821AFDB0;
		  /* 821AFDB0h */ case   23:  		/* bl -274272 */
		/* 821AFDB0h case   23:*/		regs.LR = 0x821AFDB4; return 0x8216CE50;
		/* 821AFDB0h case   23:*/		return 0x821AFDB4;
		  /* 821AFDB4h */ case   24:  		/* addic. R31, R31, -1 */
		/* 821AFDB4h case   24:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821AFDB4h case   24:*/		return 0x821AFDB8;
		  /* 821AFDB8h */ case   25:  		/* bc 4, CR0_EQ, -72 */
		/* 821AFDB8h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821AFD70;  }
		/* 821AFDB8h case   25:*/		return 0x821AFDBC;
		  /* 821AFDBCh */ case   26:  		/* b -444 */
		/* 821AFDBCh case   26:*/		return 0x821AFC00;
		/* 821AFDBCh case   26:*/		return 0x821AFDC0;
	}
	return 0x821AFDC0;
} // Block from 821AFD54h-821AFDC0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821AFDC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFDC0);
		  /* 821AFDC0h */ case    0:  		/* addi R1, R1, 176 */
		/* 821AFDC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821AFDC0h case    0:*/		return 0x821AFDC4;
		  /* 821AFDC4h */ case    1:  		/* b -1174320 */
		/* 821AFDC4h case    1:*/		return 0x82091294;
		/* 821AFDC4h case    1:*/		return 0x821AFDC8;
	}
	return 0x821AFDC8;
} // Block from 821AFDC0h-821AFDC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AFDC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFDC8);
		  /* 821AFDC8h */ case    0:  		/* mfspr R12, LR */
		/* 821AFDC8h case    0:*/		regs.R12 = regs.LR;
		/* 821AFDC8h case    0:*/		return 0x821AFDCC;
		  /* 821AFDCCh */ case    1:  		/* bl -1174396 */
		/* 821AFDCCh case    1:*/		regs.LR = 0x821AFDD0; return 0x82091250;
		/* 821AFDCCh case    1:*/		return 0x821AFDD0;
		  /* 821AFDD0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821AFDD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821AFDD0h case    2:*/		return 0x821AFDD4;
		  /* 821AFDD4h */ case    3:  		/* mr R28, R3 */
		/* 821AFDD4h case    3:*/		regs.R28 = regs.R3;
		/* 821AFDD4h case    3:*/		return 0x821AFDD8;
		  /* 821AFDD8h */ case    4:  		/* mr R27, R4 */
		/* 821AFDD8h case    4:*/		regs.R27 = regs.R4;
		/* 821AFDD8h case    4:*/		return 0x821AFDDC;
		  /* 821AFDDCh */ case    5:  		/* mr R31, R5 */
		/* 821AFDDCh case    5:*/		regs.R31 = regs.R5;
		/* 821AFDDCh case    5:*/		return 0x821AFDE0;
		  /* 821AFDE0h */ case    6:  		/* mr R26, R6 */
		/* 821AFDE0h case    6:*/		regs.R26 = regs.R6;
		/* 821AFDE0h case    6:*/		return 0x821AFDE4;
		  /* 821AFDE4h */ case    7:  		/* bl 447964 */
		/* 821AFDE4h case    7:*/		regs.LR = 0x821AFDE8; return 0x8221D3C0;
		/* 821AFDE4h case    7:*/		return 0x821AFDE8;
		  /* 821AFDE8h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AFDE8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AFDE8h case    8:*/		return 0x821AFDEC;
		  /* 821AFDECh */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AFDECh case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AFDECh case    9:*/		return 0x821AFDF0;
		  /* 821AFDF0h */ case   10:  		/* cmplwi CR6, R11, 115 */
		/* 821AFDF0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000073);
		/* 821AFDF0h case   10:*/		return 0x821AFDF4;
		  /* 821AFDF4h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 821AFDF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821AFE24;  }
		/* 821AFDF4h case   11:*/		return 0x821AFDF8;
		  /* 821AFDF8h */ case   12:  		/* cmplwi CR6, R11, 125 */
		/* 821AFDF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821AFDF8h case   12:*/		return 0x821AFDFC;
		  /* 821AFDFCh */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 821AFDFCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821AFE24;  }
		/* 821AFDFCh case   13:*/		return 0x821AFE00;
		  /* 821AFE00h */ case   14:  		/* mr R3, R31 */
		/* 821AFE00h case   14:*/		regs.R3 = regs.R31;
		/* 821AFE00h case   14:*/		return 0x821AFE04;
		  /* 821AFE04h */ case   15:  		/* bl -308356 */
		/* 821AFE04h case   15:*/		regs.LR = 0x821AFE08; return 0x82164980;
		/* 821AFE04h case   15:*/		return 0x821AFE08;
		  /* 821AFE08h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AFE08h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AFE08h case   16:*/		return 0x821AFE0C;
		  /* 821AFE0Ch */ case   17:  		/* mr R4, R31 */
		/* 821AFE0Ch case   17:*/		regs.R4 = regs.R31;
		/* 821AFE0Ch case   17:*/		return 0x821AFE10;
		  /* 821AFE10h */ case   18:  		/* bc 12, CR0_EQ, 48 */
		/* 821AFE10h case   18:*/		if ( regs.CR[0].eq ) { return 0x821AFE40;  }
		/* 821AFE10h case   18:*/		return 0x821AFE14;
		  /* 821AFE14h */ case   19:  		/* li R6, 1 */
		/* 821AFE14h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AFE14h case   19:*/		return 0x821AFE18;
		  /* 821AFE18h */ case   20:  		/* lwz R5, <#[R28 + 652]> */
		/* 821AFE18h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000028C) );
		/* 821AFE18h case   20:*/		return 0x821AFE1C;
		  /* 821AFE1Ch */ case   21:  		/* mr R3, R28 */
		/* 821AFE1Ch case   21:*/		regs.R3 = regs.R28;
		/* 821AFE1Ch case   21:*/		return 0x821AFE20;
		  /* 821AFE20h */ case   22:  		/* bl 505256 */
		/* 821AFE20h case   22:*/		regs.LR = 0x821AFE24; return 0x8222B3C8;
		/* 821AFE20h case   22:*/		return 0x821AFE24;
	}
	return 0x821AFE24;
} // Block from 821AFDC8h-821AFE24h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821AFE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFE24);
		  /* 821AFE24h */ case    0:  		/* li R31, 0 */
		/* 821AFE24h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AFE24h case    0:*/		return 0x821AFE28;
		  /* 821AFE28h */ case    1:  		/* mr R4, R27 */
		/* 821AFE28h case    1:*/		regs.R4 = regs.R27;
		/* 821AFE28h case    1:*/		return 0x821AFE2C;
		  /* 821AFE2Ch */ case    2:  		/* mr R3, R28 */
		/* 821AFE2Ch case    2:*/		regs.R3 = regs.R28;
		/* 821AFE2Ch case    2:*/		return 0x821AFE30;
		  /* 821AFE30h */ case    3:  		/* bl 447888 */
		/* 821AFE30h case    3:*/		regs.LR = 0x821AFE34; return 0x8221D3C0;
		/* 821AFE30h case    3:*/		return 0x821AFE34;
		  /* 821AFE34h */ case    4:  		/* mr R3, R31 */
		/* 821AFE34h case    4:*/		regs.R3 = regs.R31;
		/* 821AFE34h case    4:*/		return 0x821AFE38;
		  /* 821AFE38h */ case    5:  		/* addi R1, R1, 160 */
		/* 821AFE38h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821AFE38h case    5:*/		return 0x821AFE3C;
		  /* 821AFE3Ch */ case    6:  		/* b -1174428 */
		/* 821AFE3Ch case    6:*/		return 0x820912A0;
		/* 821AFE3Ch case    6:*/		return 0x821AFE40;
	}
	return 0x821AFE40;
} // Block from 821AFE24h-821AFE40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AFE40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFE40);
		  /* 821AFE40h */ case    0:  		/* mr R3, R28 */
		/* 821AFE40h case    0:*/		regs.R3 = regs.R28;
		/* 821AFE40h case    0:*/		return 0x821AFE44;
		  /* 821AFE44h */ case    1:  		/* lwz R5, <#[R28 + 660]> */
		/* 821AFE44h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000294) );
		/* 821AFE44h case    1:*/		return 0x821AFE48;
		  /* 821AFE48h */ case    2:  		/* bl 53184 */
		/* 821AFE48h case    2:*/		regs.LR = 0x821AFE4C; return 0x821BCE08;
		/* 821AFE48h case    2:*/		return 0x821AFE4C;
		  /* 821AFE4Ch */ case    3:  		/* lwz R30, <#[R31 + 8]> */
		/* 821AFE4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821AFE4Ch case    3:*/		return 0x821AFE50;
		  /* 821AFE50h */ case    4:  		/* rlwinm R29, R30, 25, 25, 31 */
		/* 821AFE50h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R30);
		/* 821AFE50h case    4:*/		return 0x821AFE54;
		  /* 821AFE54h */ case    5:  		/* cmplwi CR6, R29, 115 */
		/* 821AFE54h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000073);
		/* 821AFE54h case    5:*/		return 0x821AFE58;
		  /* 821AFE58h */ case    6:  		/* bc 12, CR6_EQ, -52 */
		/* 821AFE58h case    6:*/		if ( regs.CR[6].eq ) { return 0x821AFE24;  }
		/* 821AFE58h case    6:*/		return 0x821AFE5C;
		  /* 821AFE5Ch */ case    7:  		/* lwz R11, <#[R31 + 28]> */
		/* 821AFE5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821AFE5Ch case    7:*/		return 0x821AFE60;
		  /* 821AFE60h */ case    8:  		/* cmplw CR6, R11, R27 */
		/* 821AFE60h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821AFE60h case    8:*/		return 0x821AFE64;
		  /* 821AFE64h */ case    9:  		/* bc 4, CR6_EQ, -64 */
		/* 821AFE64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821AFE24;  }
		/* 821AFE64h case    9:*/		return 0x821AFE68;
		  /* 821AFE68h */ case   10:  		/* rlwinm. R11, R30, 7, 31, 31 */
		/* 821AFE68h case   10:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R30);
		/* 821AFE68h case   10:*/		return 0x821AFE6C;
		  /* 821AFE6Ch */ case   11:  		/* bc 4, CR0_EQ, -68 */
		/* 821AFE6Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821AFE28;  }
		/* 821AFE6Ch case   11:*/		return 0x821AFE70;
		  /* 821AFE70h */ case   12:  		/* rlwinm. R11, R30, 27, 31, 31 */
		/* 821AFE70h case   12:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R30);
		/* 821AFE70h case   12:*/		return 0x821AFE74;
		  /* 821AFE74h */ case   13:  		/* bc 4, CR0_EQ, -76 */
		/* 821AFE74h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821AFE28;  }
		/* 821AFE74h case   13:*/		return 0x821AFE78;
		  /* 821AFE78h */ case   14:  		/* mr R3, R31 */
		/* 821AFE78h case   14:*/		regs.R3 = regs.R31;
		/* 821AFE78h case   14:*/		return 0x821AFE7C;
		  /* 821AFE7Ch */ case   15:  		/* bl -258252 */
		/* 821AFE7Ch case   15:*/		regs.LR = 0x821AFE80; return 0x82170DB0;
		/* 821AFE7Ch case   15:*/		return 0x821AFE80;
		  /* 821AFE80h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AFE80h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AFE80h case   16:*/		return 0x821AFE84;
		  /* 821AFE84h */ case   17:  		/* bc 12, CR0_EQ, 120 */
		/* 821AFE84h case   17:*/		if ( regs.CR[0].eq ) { return 0x821AFEFC;  }
		/* 821AFE84h case   17:*/		return 0x821AFE88;
		  /* 821AFE88h */ case   18:  		/* lwz R11, <#[R31 + 44]> */
		/* 821AFE88h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821AFE88h case   18:*/		return 0x821AFE8C;
		  /* 821AFE8Ch */ case   19:  		/* lwz R11, <#[R11]> */
		/* 821AFE8Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821AFE8Ch case   19:*/		return 0x821AFE90;
		  /* 821AFE90h */ case   20:  		/* rlwinm R11, R11, 21, 11, 31 */
		/* 821AFE90h case   20:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R11,regs.R11);
		/* 821AFE90h case   20:*/		return 0x821AFE94;
		  /* 821AFE94h */ case   21:  		/* xor R11, R11, R30 */
		/* 821AFE94h case   21:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821AFE94h case   21:*/		return 0x821AFE98;
		  /* 821AFE98h */ case   22:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821AFE98h case   22:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821AFE98h case   22:*/		return 0x821AFE9C;
		  /* 821AFE9Ch */ case   23:  		/* bc 12, CR0_EQ, 36 */
		/* 821AFE9Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821AFEC0;  }
		/* 821AFE9Ch case   23:*/		return 0x821AFEA0;
		  /* 821AFEA0h */ case   24:  		/* li R7, 1 */
		/* 821AFEA0h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AFEA0h case   24:*/		return 0x821AFEA4;
		  /* 821AFEA4h */ case   25:  		/* lwz R6, <#[R28 + 652]> */
		/* 821AFEA4h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x0000028C) );
		/* 821AFEA4h case   25:*/		return 0x821AFEA8;
		  /* 821AFEA8h */ case   26:  		/* rlwinm R5, R30, 31, 28, 31 */
		/* 821AFEA8h case   26:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R5,regs.R30);
		/* 821AFEA8h case   26:*/		return 0x821AFEAC;
		  /* 821AFEACh */ case   27:  		/* mr R4, R31 */
		/* 821AFEACh case   27:*/		regs.R4 = regs.R31;
		/* 821AFEACh case   27:*/		return 0x821AFEB0;
		  /* 821AFEB0h */ case   28:  		/* mr R3, R28 */
		/* 821AFEB0h case   28:*/		regs.R3 = regs.R28;
		/* 821AFEB0h case   28:*/		return 0x821AFEB4;
		  /* 821AFEB4h */ case   29:  		/* bl 113652 */
		/* 821AFEB4h case   29:*/		regs.LR = 0x821AFEB8; return 0x821CBAA8;
		/* 821AFEB4h case   29:*/		return 0x821AFEB8;
		  /* 821AFEB8h */ case   30:  		/* mr R3, R31 */
		/* 821AFEB8h case   30:*/		regs.R3 = regs.R31;
		/* 821AFEB8h case   30:*/		return 0x821AFEBC;
		  /* 821AFEBCh */ case   31:  		/* bl -228164 */
		/* 821AFEBCh case   31:*/		regs.LR = 0x821AFEC0; return 0x82178378;
		/* 821AFEBCh case   31:*/		return 0x821AFEC0;
	}
	return 0x821AFEC0;
} // Block from 821AFE40h-821AFEC0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821AFEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFEC0);
		  /* 821AFEC0h */ case    0:  		/* addi R6, R1, 80 */
		/* 821AFEC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821AFEC0h case    0:*/		return 0x821AFEC4;
		  /* 821AFEC4h */ case    1:  		/* mr R5, R31 */
		/* 821AFEC4h case    1:*/		regs.R5 = regs.R31;
		/* 821AFEC4h case    1:*/		return 0x821AFEC8;
		  /* 821AFEC8h */ case    2:  		/* mr R4, R31 */
		/* 821AFEC8h case    2:*/		regs.R4 = regs.R31;
		/* 821AFEC8h case    2:*/		return 0x821AFECC;
		  /* 821AFECCh */ case    3:  		/* mr R3, R28 */
		/* 821AFECCh case    3:*/		regs.R3 = regs.R28;
		/* 821AFECCh case    3:*/		return 0x821AFED0;
		  /* 821AFED0h */ case    4:  		/* bl -69264 */
		/* 821AFED0h case    4:*/		regs.LR = 0x821AFED4; return 0x8219F040;
		/* 821AFED0h case    4:*/		return 0x821AFED4;
		  /* 821AFED4h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AFED4h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AFED4h case    5:*/		return 0x821AFED8;
		  /* 821AFED8h */ case    6:  		/* bc 12, CR0_EQ, 272 */
		/* 821AFED8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821AFFE8;  }
		/* 821AFED8h case    6:*/		return 0x821AFEDC;
		  /* 821AFEDCh */ case    7:  		/* li R7, 0 */
		/* 821AFEDCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821AFEDCh case    7:*/		return 0x821AFEE0;
		  /* 821AFEE0h */ case    8:  		/* li R6, 1 */
		/* 821AFEE0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AFEE0h case    8:*/		return 0x821AFEE4;
		  /* 821AFEE4h */ case    9:  		/* mr R5, R31 */
		/* 821AFEE4h case    9:*/		regs.R5 = regs.R31;
		/* 821AFEE4h case    9:*/		return 0x821AFEE8;
		  /* 821AFEE8h */ case   10:  		/* addi R4, R1, 80 */
		/* 821AFEE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821AFEE8h case   10:*/		return 0x821AFEEC;
		  /* 821AFEECh */ case   11:  		/* mr R3, R28 */
		/* 821AFEECh case   11:*/		regs.R3 = regs.R28;
		/* 821AFEECh case   11:*/		return 0x821AFEF0;
		  /* 821AFEF0h */ case   12:  		/* bl -40816 */
		/* 821AFEF0h case   12:*/		regs.LR = 0x821AFEF4; return 0x821A5F80;
		/* 821AFEF0h case   12:*/		return 0x821AFEF4;
		  /* 821AFEF4h */ case   13:  		/* mr R31, R3 */
		/* 821AFEF4h case   13:*/		regs.R31 = regs.R3;
		/* 821AFEF4h case   13:*/		return 0x821AFEF8;
		  /* 821AFEF8h */ case   14:  		/* b 240 */
		/* 821AFEF8h case   14:*/		return 0x821AFFE8;
		/* 821AFEF8h case   14:*/		return 0x821AFEFC;
	}
	return 0x821AFEFC;
} // Block from 821AFEC0h-821AFEFCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AFEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFEFC);
		  /* 821AFEFCh */ case    0:  		/* cmplwi CR6, R29, 100 */
		/* 821AFEFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000064);
		/* 821AFEFCh case    0:*/		return 0x821AFF00;
		  /* 821AFF00h */ case    1:  		/* bc 4, CR6_EQ, 232 */
		/* 821AFF00h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AFFE8;  }
		/* 821AFF00h case    1:*/		return 0x821AFF04;
		  /* 821AFF04h */ case    2:  		/* lwz R29, <#[R31 + 48]> */
		/* 821AFF04h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000030) );
		/* 821AFF04h case    2:*/		return 0x821AFF08;
		  /* 821AFF08h */ case    3:  		/* rlwinm. R10, R30, 31, 30, 31 */
		/* 821AFF08h case    3:*/		cpu::op::rlwinm<1,31,30,31>(regs,&regs.R10,regs.R30);
		/* 821AFF08h case    3:*/		return 0x821AFF0C;
		  /* 821AFF0Ch */ case    4:  		/* rlwinm R11, R30, 31, 28, 31 */
		/* 821AFF0Ch case    4:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R30);
		/* 821AFF0Ch case    4:*/		return 0x821AFF10;
		  /* 821AFF10h */ case    5:  		/* bc 4, CR0_EQ, 160 */
		/* 821AFF10h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821AFFB0;  }
		/* 821AFF10h case    5:*/		return 0x821AFF14;
		  /* 821AFF14h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 821AFF14h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AFF14h case    6:*/		return 0x821AFF18;
		  /* 821AFF18h */ case    7:  		/* li R10, 7296 */
		/* 821AFF18h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1C80);
		/* 821AFF18h case    7:*/		return 0x821AFF1C;
		  /* 821AFF1Ch */ case    8:  		/* rlwinm R9, R11, 0, 27, 24 */
		/* 821AFF1Ch case    8:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R9,regs.R11);
		/* 821AFF1Ch case    8:*/		return 0x821AFF20;
		  /* 821AFF20h */ case    9:  		/* rlwimi R10, R11, 30, 25, 26 */
		/* 821AFF20h case    9:*/		cpu::op::rlwimi<0,30,25,26>(regs,&regs.R10,regs.R11);
		/* 821AFF20h case    9:*/		return 0x821AFF24;
		  /* 821AFF24h */ case   10:  		/* rlwinm R9, R9, 0, 24, 21 */
		/* 821AFF24h case   10:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R9,regs.R9);
		/* 821AFF24h case   10:*/		return 0x821AFF28;
		  /* 821AFF28h */ case   11:  		/* or R11, R10, R9 */
		/* 821AFF28h case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 821AFF28h case   11:*/		return 0x821AFF2C;
		  /* 821AFF2Ch */ case   12:  		/* li R9, 68 */
		/* 821AFF2Ch case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x44);
		/* 821AFF2Ch case   12:*/		return 0x821AFF30;
		  /* 821AFF30h */ case   13:  		/* stw R11, <#[R29]> */
		/* 821AFF30h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AFF30h case   13:*/		return 0x821AFF34;
		  /* 821AFF34h */ case   14:  		/* lwz R10, <#[R31 + 4]> */
		/* 821AFF34h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821AFF34h case   14:*/		return 0x821AFF38;
		  /* 821AFF38h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821AFF38h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AFF38h case   15:*/		return 0x821AFF3C;
		  /* 821AFF3Ch */ case   16:  		/* bc 12, CR6_EQ, 100 */
		/* 821AFF3Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821AFFA0;  }
		/* 821AFF3Ch case   16:*/		return 0x821AFF40;
		  /* 821AFF40h */ case   17:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AFF40h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AFF40h case   17:*/		return 0x821AFF44;
		  /* 821AFF44h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821AFF44h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AFF44h case   18:*/		return 0x821AFF48;
		  /* 821AFF48h */ case   19:  		/* bc 12, CR6_EQ, 80 */
		/* 821AFF48h case   19:*/		if ( regs.CR[6].eq ) { return 0x821AFF98;  }
		/* 821AFF48h case   19:*/		return 0x821AFF4C;
		  /* 821AFF4Ch */ case   20:  		/* lwz R11, <#[R10]> */
		/* 821AFF4Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AFF4Ch case   20:*/		return 0x821AFF50;
		  /* 821AFF50h */ case   21:  		/* rlwinm. R8, R11, 0, 4, 6 */
		/* 821AFF50h case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R11);
		/* 821AFF50h case   21:*/		return 0x821AFF54;
		  /* 821AFF54h */ case   22:  		/* bc 12, CR0_EQ, 68 */
		/* 821AFF54h case   22:*/		if ( regs.CR[0].eq ) { return 0x821AFF98;  }
		/* 821AFF54h case   22:*/		return 0x821AFF58;
		  /* 821AFF58h */ case   23:  		/* rlwinm R8, R11, 22, 29, 30 */
		/* 821AFF58h case   23:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R8,regs.R11);
		/* 821AFF58h case   23:*/		return 0x821AFF5C;
		  /* 821AFF5Ch */ case   24:  		/* rlwinm R7, R11, 24, 29, 30 */
		/* 821AFF5Ch case   24:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R11);
		/* 821AFF5Ch case   24:*/		return 0x821AFF60;
		  /* 821AFF60h */ case   25:  		/* srw R8, R9, R8 */
		/* 821AFF60h case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821AFF60h case   25:*/		return 0x821AFF64;
		  /* 821AFF64h */ case   26:  		/* srw R7, R9, R7 */
		/* 821AFF64h case   26:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R7);
		/* 821AFF64h case   26:*/		return 0x821AFF68;
		  /* 821AFF68h */ case   27:  		/* rlwimi R7, R8, 2, 28, 29 */
		/* 821AFF68h case   27:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 821AFF68h case   27:*/		return 0x821AFF6C;
		  /* 821AFF6Ch */ case   28:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821AFF6Ch case   28:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821AFF6Ch case   28:*/		return 0x821AFF70;
		  /* 821AFF70h */ case   29:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821AFF70h case   29:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821AFF70h case   29:*/		return 0x821AFF74;
		  /* 821AFF74h */ case   30:  		/* srw R8, R9, R8 */
		/* 821AFF74h case   30:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821AFF74h case   30:*/		return 0x821AFF78;
		  /* 821AFF78h */ case   31:  		/* rlwinm R6, R11, 28, 29, 30 */
		/* 821AFF78h case   31:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R11);
		/* 821AFF78h case   31:*/		return 0x821AFF7C;
		  /* 821AFF7Ch */ case   32:  		/* rlwimi R8, R7, 2, 0, 29 */
		/* 821AFF7Ch case   32:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821AFF7Ch case   32:*/		return 0x821AFF80;
		  /* 821AFF80h */ case   33:  		/* srw R7, R9, R6 */
		/* 821AFF80h case   33:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R6);
		/* 821AFF80h case   33:*/		return 0x821AFF84;
		  /* 821AFF84h */ case   34:  		/* rlwimi R7, R8, 2, 0, 29 */
		/* 821AFF84h case   34:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 821AFF84h case   34:*/		return 0x821AFF88;
		  /* 821AFF88h */ case   35:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821AFF88h case   35:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821AFF88h case   35:*/		return 0x821AFF8C;
		  /* 821AFF8Ch */ case   36:  		/* rlwinm R8, R7, 5, 0, 26 */
		/* 821AFF8Ch case   36:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R8,regs.R7);
		/* 821AFF8Ch case   36:*/		return 0x821AFF90;
		  /* 821AFF90h */ case   37:  		/* or R11, R8, R11 */
		/* 821AFF90h case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821AFF90h case   37:*/		return 0x821AFF94;
		  /* 821AFF94h */ case   38:  		/* stw R11, <#[R10]> */
		/* 821AFF94h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AFF94h case   38:*/		return 0x821AFF98;
	}
	return 0x821AFF98;
} // Block from 821AFEFCh-821AFF98h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821AFF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFF98);
		  /* 821AFF98h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AFF98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AFF98h case    0:*/		return 0x821AFF9C;
		  /* 821AFF9Ch */ case    1:  		/* b -100 */
		/* 821AFF9Ch case    1:*/		return 0x821AFF38;
		/* 821AFF9Ch case    1:*/		return 0x821AFFA0;
	}
	return 0x821AFFA0;
} // Block from 821AFF98h-821AFFA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AFFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFFA0);
		  /* 821AFFA0h */ case    0:  		/* mr R3, R31 */
		/* 821AFFA0h case    0:*/		regs.R3 = regs.R31;
		/* 821AFFA0h case    0:*/		return 0x821AFFA4;
		  /* 821AFFA4h */ case    1:  		/* bl -228396 */
		/* 821AFFA4h case    1:*/		regs.LR = 0x821AFFA8; return 0x82178378;
		/* 821AFFA4h case    1:*/		return 0x821AFFA8;
		  /* 821AFFA8h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AFFA8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AFFA8h case    2:*/		return 0x821AFFAC;
		  /* 821AFFACh */ case    3:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821AFFACh case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821AFFACh case    3:*/		return 0x821AFFB0;
	}
	return 0x821AFFB0;
} // Block from 821AFFA0h-821AFFB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AFFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFFB0);
		  /* 821AFFB0h */ case    0:  		/* rlwinm. R11, R11, 0, 28, 29 */
		/* 821AFFB0h case    0:*/		cpu::op::rlwinm<1,0,28,29>(regs,&regs.R11,regs.R11);
		/* 821AFFB0h case    0:*/		return 0x821AFFB4;
		  /* 821AFFB4h */ case    1:  		/* bc 4, CR0_EQ, 52 */
		/* 821AFFB4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AFFE8;  }
		/* 821AFFB4h case    1:*/		return 0x821AFFB8;
		  /* 821AFFB8h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821AFFB8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AFFB8h case    2:*/		return 0x821AFFBC;
		  /* 821AFFBCh */ case    3:  		/* lis R10, 512 */
		/* 821AFFBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821AFFBCh case    3:*/		return 0x821AFFC0;
		  /* 821AFFC0h */ case    4:  		/* rlwinm R9, R11, 0, 4, 6 */
		/* 821AFFC0h case    4:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R9,regs.R11);
		/* 821AFFC0h case    4:*/		return 0x821AFFC4;
		  /* 821AFFC4h */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 821AFFC4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821AFFC4h case    5:*/		return 0x821AFFC8;
		  /* 821AFFC8h */ case    6:  		/* bc 4, CR6_GT, 32 */
		/* 821AFFC8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821AFFE8;  }
		/* 821AFFC8h case    6:*/		return 0x821AFFCC;
		  /* 821AFFCCh */ case    7:  		/* li R10, 1 */
		/* 821AFFCCh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AFFCCh case    7:*/		return 0x821AFFD0;
		  /* 821AFFD0h */ case    8:  		/* lwz R4, <#[R29 + 12]> */
		/* 821AFFD0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821AFFD0h case    8:*/		return 0x821AFFD4;
		  /* 821AFFD4h */ case    9:  		/* mr R3, R28 */
		/* 821AFFD4h case    9:*/		regs.R3 = regs.R28;
		/* 821AFFD4h case    9:*/		return 0x821AFFD8;
		  /* 821AFFD8h */ case   10:  		/* rlwimi R11, R10, 25, 4, 6 */
		/* 821AFFD8h case   10:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R10);
		/* 821AFFD8h case   10:*/		return 0x821AFFDC;
		  /* 821AFFDCh */ case   11:  		/* stw R11, <#[R29]> */
		/* 821AFFDCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AFFDCh case   11:*/		return 0x821AFFE0;
		  /* 821AFFE0h */ case   12:  		/* lwz R5, <#[R28 + 660]> */
		/* 821AFFE0h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000294) );
		/* 821AFFE0h case   12:*/		return 0x821AFFE4;
		  /* 821AFFE4h */ case   13:  		/* bl 51572 */
		/* 821AFFE4h case   13:*/		regs.LR = 0x821AFFE8; return 0x821BC958;
		/* 821AFFE4h case   13:*/		return 0x821AFFE8;
	}
	return 0x821AFFE8;
} // Block from 821AFFB0h-821AFFE8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AFFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AFFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AFFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AFFE8);
		  /* 821AFFE8h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821AFFE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821AFFE8h case    0:*/		return 0x821AFFEC;
		  /* 821AFFECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821AFFECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AFFECh case    1:*/		return 0x821AFFF0;
		  /* 821AFFF0h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821AFFF0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B0024;  }
		/* 821AFFF0h case    2:*/		return 0x821AFFF4;
		  /* 821AFFF4h */ case    3:  		/* lwz R4, <#[R11 + 16]> */
		/* 821AFFF4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821AFFF4h case    3:*/		return 0x821AFFF8;
		  /* 821AFFF8h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821AFFF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AFFF8h case    4:*/		return 0x821AFFFC;
		  /* 821AFFFCh */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821AFFFCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821B001C;  }
		/* 821AFFFCh case    5:*/		return 0x821B0000;
		  /* 821B0000h */ case    6:  		/* lwz R10, <#[R4 + 8]> */
		/* 821B0000h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821B0000h case    6:*/		return 0x821B0004;
		  /* 821B0004h */ case    7:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821B0004h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821B0004h case    7:*/		return 0x821B0008;
		  /* 821B0008h */ case    8:  		/* cmplwi CR6, R10, 14080 */
		/* 821B0008h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821B0008h case    8:*/		return 0x821B000C;
		  /* 821B000Ch */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821B000Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B001C;  }
		/* 821B000Ch case    9:*/		return 0x821B0010;
		  /* 821B0010h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821B0010h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0010h case   10:*/		return 0x821B0014;
		  /* 821B0014h */ case   11:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821B0014h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821B0014h case   11:*/		return 0x821B0018;
		  /* 821B0018h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821B0018h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B0028;  }
		/* 821B0018h case   12:*/		return 0x821B001C;
	}
	return 0x821B001C;
} // Block from 821AFFE8h-821B001Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B001Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B001C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B001C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B001C);
		  /* 821B001Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B001Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B001Ch case    0:*/		return 0x821B0020;
		  /* 821B0020h */ case    1:  		/* b -52 */
		/* 821B0020h case    1:*/		return 0x821AFFEC;
		/* 821B0020h case    1:*/		return 0x821B0024;
	}
	return 0x821B0024;
} // Block from 821B001Ch-821B0024h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0024);
		  /* 821B0024h */ case    0:  		/* li R4, 0 */
		/* 821B0024h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B0024h case    0:*/		return 0x821B0028;
	}
	return 0x821B0028;
} // Block from 821B0024h-821B0028h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B0028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0028);
		  /* 821B0028h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821B0028h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B0028h case    0:*/		return 0x821B002C;
		  /* 821B002Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821B002Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821B0038;  }
		/* 821B002Ch case    1:*/		return 0x821B0030;
		  /* 821B0030h */ case    2:  		/* mr R3, R28 */
		/* 821B0030h case    2:*/		regs.R3 = regs.R28;
		/* 821B0030h case    2:*/		return 0x821B0034;
		  /* 821B0034h */ case    3:  		/* bl -62844 */
		/* 821B0034h case    3:*/		regs.LR = 0x821B0038; return 0x821A0AB8;
		/* 821B0034h case    3:*/		return 0x821B0038;
	}
	return 0x821B0038;
} // Block from 821B0028h-821B0038h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0038);
		  /* 821B0038h */ case    0:  		/* mr R5, R26 */
		/* 821B0038h case    0:*/		regs.R5 = regs.R26;
		/* 821B0038h case    0:*/		return 0x821B003C;
		  /* 821B003Ch */ case    1:  		/* mr R4, R31 */
		/* 821B003Ch case    1:*/		regs.R4 = regs.R31;
		/* 821B003Ch case    1:*/		return 0x821B0040;
		  /* 821B0040h */ case    2:  		/* mr R3, R28 */
		/* 821B0040h case    2:*/		regs.R3 = regs.R28;
		/* 821B0040h case    2:*/		return 0x821B0044;
		  /* 821B0044h */ case    3:  		/* bl -26164 */
		/* 821B0044h case    3:*/		regs.LR = 0x821B0048; return 0x821A9A10;
		/* 821B0044h case    3:*/		return 0x821B0048;
		  /* 821B0048h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821B0048h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B0048h case    4:*/		return 0x821B004C;
		  /* 821B004Ch */ case    5:  		/* bc 12, CR0_EQ, -548 */
		/* 821B004Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821AFE28;  }
		/* 821B004Ch case    5:*/		return 0x821B0050;
		  /* 821B0050h */ case    6:  		/* mr R4, R27 */
		/* 821B0050h case    6:*/		regs.R4 = regs.R27;
		/* 821B0050h case    6:*/		return 0x821B0054;
		  /* 821B0054h */ case    7:  		/* mr R3, R28 */
		/* 821B0054h case    7:*/		regs.R3 = regs.R28;
		/* 821B0054h case    7:*/		return 0x821B0058;
		  /* 821B0058h */ case    8:  		/* bl 474736 */
		/* 821B0058h case    8:*/		regs.LR = 0x821B005C; return 0x82223EC8;
		/* 821B0058h case    8:*/		return 0x821B005C;
		  /* 821B005Ch */ case    9:  		/* b -568 */
		/* 821B005Ch case    9:*/		return 0x821AFE24;
		/* 821B005Ch case    9:*/		return 0x821B0060;
	}
	return 0x821B0060;
} // Block from 821B0038h-821B0060h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0060);
		  /* 821B0060h */ case    0:  		/* mfspr R12, LR */
		/* 821B0060h case    0:*/		regs.R12 = regs.LR;
		/* 821B0060h case    0:*/		return 0x821B0064;
		  /* 821B0064h */ case    1:  		/* bl -1175064 */
		/* 821B0064h case    1:*/		regs.LR = 0x821B0068; return 0x8209124C;
		/* 821B0064h case    1:*/		return 0x821B0068;
		  /* 821B0068h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821B0068h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821B0068h case    2:*/		return 0x821B006C;
		  /* 821B006Ch */ case    3:  		/* mr R27, R3 */
		/* 821B006Ch case    3:*/		regs.R27 = regs.R3;
		/* 821B006Ch case    3:*/		return 0x821B0070;
		  /* 821B0070h */ case    4:  		/* mr R25, R4 */
		/* 821B0070h case    4:*/		regs.R25 = regs.R4;
		/* 821B0070h case    4:*/		return 0x821B0074;
		  /* 821B0074h */ case    5:  		/* mr R31, R5 */
		/* 821B0074h case    5:*/		regs.R31 = regs.R5;
		/* 821B0074h case    5:*/		return 0x821B0078;
		  /* 821B0078h */ case    6:  		/* mr R26, R6 */
		/* 821B0078h case    6:*/		regs.R26 = regs.R6;
		/* 821B0078h case    6:*/		return 0x821B007C;
		  /* 821B007Ch */ case    7:  		/* bl 447300 */
		/* 821B007Ch case    7:*/		regs.LR = 0x821B0080; return 0x8221D3C0;
		/* 821B007Ch case    7:*/		return 0x821B0080;
		  /* 821B0080h */ case    8:  		/* lwz R30, <#[R31 + 8]> */
		/* 821B0080h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0080h case    8:*/		return 0x821B0084;
		  /* 821B0084h */ case    9:  		/* rlwinm R29, R30, 25, 25, 31 */
		/* 821B0084h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R30);
		/* 821B0084h case    9:*/		return 0x821B0088;
		  /* 821B0088h */ case   10:  		/* cmplwi CR6, R29, 115 */
		/* 821B0088h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000073);
		/* 821B0088h case   10:*/		return 0x821B008C;
		  /* 821B008Ch */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 821B008Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821B00BC;  }
		/* 821B008Ch case   11:*/		return 0x821B0090;
		  /* 821B0090h */ case   12:  		/* cmplwi CR6, R29, 125 */
		/* 821B0090h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000007D);
		/* 821B0090h case   12:*/		return 0x821B0094;
		  /* 821B0094h */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 821B0094h case   13:*/		if ( regs.CR[6].eq ) { return 0x821B00BC;  }
		/* 821B0094h case   13:*/		return 0x821B0098;
		  /* 821B0098h */ case   14:  		/* mr R3, R31 */
		/* 821B0098h case   14:*/		regs.R3 = regs.R31;
		/* 821B0098h case   14:*/		return 0x821B009C;
		  /* 821B009Ch */ case   15:  		/* bl -309020 */
		/* 821B009Ch case   15:*/		regs.LR = 0x821B00A0; return 0x82164980;
		/* 821B009Ch case   15:*/		return 0x821B00A0;
		  /* 821B00A0h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B00A0h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B00A0h case   16:*/		return 0x821B00A4;
		  /* 821B00A4h */ case   17:  		/* bc 12, CR0_EQ, 32 */
		/* 821B00A4h case   17:*/		if ( regs.CR[0].eq ) { return 0x821B00C4;  }
		/* 821B00A4h case   17:*/		return 0x821B00A8;
		  /* 821B00A8h */ case   18:  		/* li R6, 1 */
		/* 821B00A8h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B00A8h case   18:*/		return 0x821B00AC;
		  /* 821B00ACh */ case   19:  		/* lwz R5, <#[R27 + 652]> */
		/* 821B00ACh case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000028C) );
		/* 821B00ACh case   19:*/		return 0x821B00B0;
		  /* 821B00B0h */ case   20:  		/* mr R4, R31 */
		/* 821B00B0h case   20:*/		regs.R4 = regs.R31;
		/* 821B00B0h case   20:*/		return 0x821B00B4;
		  /* 821B00B4h */ case   21:  		/* mr R3, R27 */
		/* 821B00B4h case   21:*/		regs.R3 = regs.R27;
		/* 821B00B4h case   21:*/		return 0x821B00B8;
		  /* 821B00B8h */ case   22:  		/* bl 504592 */
		/* 821B00B8h case   22:*/		regs.LR = 0x821B00BC; return 0x8222B3C8;
		/* 821B00B8h case   22:*/		return 0x821B00BC;
	}
	return 0x821B00BC;
} // Block from 821B0060h-821B00BCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821B00BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B00BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B00BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B00BC);
		  /* 821B00BCh */ case    0:  		/* li R31, 0 */
		/* 821B00BCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B00BCh case    0:*/		return 0x821B00C0;
		  /* 821B00C0h */ case    1:  		/* b 628 */
		/* 821B00C0h case    1:*/		return 0x821B0334;
		/* 821B00C0h case    1:*/		return 0x821B00C4;
	}
	return 0x821B00C4;
} // Block from 821B00BCh-821B00C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B00C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B00C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B00C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B00C4);
		  /* 821B00C4h */ case    0:  		/* cmplwi CR6, R29, 110 */
		/* 821B00C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000006E);
		/* 821B00C4h case    0:*/		return 0x821B00C8;
		  /* 821B00C8h */ case    1:  		/* bc 4, CR6_EQ, 88 */
		/* 821B00C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B0120;  }
		/* 821B00C8h case    1:*/		return 0x821B00CC;
		  /* 821B00CCh */ case    2:  		/* li R29, 0 */
		/* 821B00CCh case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821B00CCh case    2:*/		return 0x821B00D0;
		  /* 821B00D0h */ case    3:  		/* addi R28, R31, 44 */
		/* 821B00D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x2C);
		/* 821B00D0h case    3:*/		return 0x821B00D4;
		  /* 821B00D4h */ case    4:  		/* rlwinm R11, R30, 13, 29, 31 */
		/* 821B00D4h case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R30);
		/* 821B00D4h case    4:*/		return 0x821B00D8;
		  /* 821B00D8h */ case    5:  		/* cmplw CR6, R29, R11 */
		/* 821B00D8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B00D8h case    5:*/		return 0x821B00DC;
		  /* 821B00DCh */ case    6:  		/* bc 4, CR6_LT, 68 */
		/* 821B00DCh case    6:*/		if ( !regs.CR[6].lt ) { return 0x821B0120;  }
		/* 821B00DCh case    6:*/		return 0x821B00E0;
		  /* 821B00E0h */ case    7:  		/* lwz R11, <#[R28]> */
		/* 821B00E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B00E0h case    7:*/		return 0x821B00E4;
		  /* 821B00E4h */ case    8:  		/* lwz R5, <#[R11 + 12]> */
		/* 821B00E4h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B00E4h case    8:*/		return 0x821B00E8;
		  /* 821B00E8h */ case    9:  		/* lwz R11, <#[R5 + 8]> */
		/* 821B00E8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B00E8h case    9:*/		return 0x821B00EC;
		  /* 821B00ECh */ case   10:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B00ECh case   10:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B00ECh case   10:*/		return 0x821B00F0;
		  /* 821B00F0h */ case   11:  		/* bc 12, CR0_EQ, 36 */
		/* 821B00F0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B0114;  }
		/* 821B00F0h case   11:*/		return 0x821B00F4;
		  /* 821B00F4h */ case   12:  		/* addi R6, R26, 1 */
		/* 821B00F4h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R26,0x1);
		/* 821B00F4h case   12:*/		return 0x821B00F8;
		  /* 821B00F8h */ case   13:  		/* mr R4, R25 */
		/* 821B00F8h case   13:*/		regs.R4 = regs.R25;
		/* 821B00F8h case   13:*/		return 0x821B00FC;
		  /* 821B00FCh */ case   14:  		/* mr R3, R27 */
		/* 821B00FCh case   14:*/		regs.R3 = regs.R27;
		/* 821B00FCh case   14:*/		return 0x821B0100;
		  /* 821B0100h */ case   15:  		/* bl -160 */
		/* 821B0100h case   15:*/		regs.LR = 0x821B0104; return 0x821B0060;
		/* 821B0100h case   15:*/		return 0x821B0104;
		  /* 821B0104h */ case   16:  		/* lwz R30, <#[R31 + 8]> */
		/* 821B0104h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0104h case   16:*/		return 0x821B0108;
		  /* 821B0108h */ case   17:  		/* rlwinm R11, R30, 0, 18, 24 */
		/* 821B0108h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R30);
		/* 821B0108h case   17:*/		return 0x821B010C;
		  /* 821B010Ch */ case   18:  		/* cmplwi CR6, R11, 14720 */
		/* 821B010Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B010Ch case   18:*/		return 0x821B0110;
		  /* 821B0110h */ case   19:  		/* bc 12, CR6_EQ, -84 */
		/* 821B0110h case   19:*/		if ( regs.CR[6].eq ) { return 0x821B00BC;  }
		/* 821B0110h case   19:*/		return 0x821B0114;
	}
	return 0x821B0114;
} // Block from 821B00C4h-821B0114h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B0114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0114);
		  /* 821B0114h */ case    0:  		/* addi R29, R29, 1 */
		/* 821B0114h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821B0114h case    0:*/		return 0x821B0118;
		  /* 821B0118h */ case    1:  		/* addi R28, R28, 4 */
		/* 821B0118h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821B0118h case    1:*/		return 0x821B011C;
		  /* 821B011Ch */ case    2:  		/* b -72 */
		/* 821B011Ch case    2:*/		return 0x821B00D4;
		/* 821B011Ch case    2:*/		return 0x821B0120;
	}
	return 0x821B0120;
} // Block from 821B0114h-821B0120h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0120);
		  /* 821B0120h */ case    0:  		/* mr R4, R31 */
		/* 821B0120h case    0:*/		regs.R4 = regs.R31;
		/* 821B0120h case    0:*/		return 0x821B0124;
		  /* 821B0124h */ case    1:  		/* lwz R5, <#[R27 + 660]> */
		/* 821B0124h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000294) );
		/* 821B0124h case    1:*/		return 0x821B0128;
		  /* 821B0128h */ case    2:  		/* mr R3, R27 */
		/* 821B0128h case    2:*/		regs.R3 = regs.R27;
		/* 821B0128h case    2:*/		return 0x821B012C;
		  /* 821B012Ch */ case    3:  		/* bl 52444 */
		/* 821B012Ch case    3:*/		regs.LR = 0x821B0130; return 0x821BCE08;
		/* 821B012Ch case    3:*/		return 0x821B0130;
		  /* 821B0130h */ case    4:  		/* lwz R30, <#[R31 + 8]> */
		/* 821B0130h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0130h case    4:*/		return 0x821B0134;
		  /* 821B0134h */ case    5:  		/* rlwinm R29, R30, 25, 25, 31 */
		/* 821B0134h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R30);
		/* 821B0134h case    5:*/		return 0x821B0138;
		  /* 821B0138h */ case    6:  		/* cmplwi CR6, R29, 115 */
		/* 821B0138h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000073);
		/* 821B0138h case    6:*/		return 0x821B013C;
		  /* 821B013Ch */ case    7:  		/* bc 12, CR6_EQ, -128 */
		/* 821B013Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821B00BC;  }
		/* 821B013Ch case    7:*/		return 0x821B0140;
		  /* 821B0140h */ case    8:  		/* lwz R11, <#[R31 + 28]> */
		/* 821B0140h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821B0140h case    8:*/		return 0x821B0144;
		  /* 821B0144h */ case    9:  		/* cmplw CR6, R11, R25 */
		/* 821B0144h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821B0144h case    9:*/		return 0x821B0148;
		  /* 821B0148h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 821B0148h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B015C;  }
		/* 821B0148h case   10:*/		return 0x821B014C;
		  /* 821B014Ch */ case   11:  		/* cmplwi CR6, R29, 113 */
		/* 821B014Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000071);
		/* 821B014Ch case   11:*/		return 0x821B0150;
		  /* 821B0150h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 821B0150h case   12:*/		if ( regs.CR[6].eq ) { return 0x821B015C;  }
		/* 821B0150h case   12:*/		return 0x821B0154;
		  /* 821B0154h */ case   13:  		/* cmplwi CR6, R29, 124 */
		/* 821B0154h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000007C);
		/* 821B0154h case   13:*/		return 0x821B0158;
		  /* 821B0158h */ case   14:  		/* bc 4, CR6_EQ, -156 */
		/* 821B0158h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821B00BC;  }
		/* 821B0158h case   14:*/		return 0x821B015C;
	}
	return 0x821B015C;
} // Block from 821B0120h-821B015Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B015Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B015C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B015C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B015C);
		  /* 821B015Ch */ case    0:  		/* rlwinm. R11, R30, 7, 31, 31 */
		/* 821B015Ch case    0:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R30);
		/* 821B015Ch case    0:*/		return 0x821B0160;
		  /* 821B0160h */ case    1:  		/* bc 4, CR0_EQ, 468 */
		/* 821B0160h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B0334;  }
		/* 821B0160h case    1:*/		return 0x821B0164;
		  /* 821B0164h */ case    2:  		/* rlwinm. R11, R30, 27, 31, 31 */
		/* 821B0164h case    2:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R30);
		/* 821B0164h case    2:*/		return 0x821B0168;
		  /* 821B0168h */ case    3:  		/* bc 4, CR0_EQ, 460 */
		/* 821B0168h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B0334;  }
		/* 821B0168h case    3:*/		return 0x821B016C;
		  /* 821B016Ch */ case    4:  		/* mr R3, R31 */
		/* 821B016Ch case    4:*/		regs.R3 = regs.R31;
		/* 821B016Ch case    4:*/		return 0x821B0170;
		  /* 821B0170h */ case    5:  		/* bl -259008 */
		/* 821B0170h case    5:*/		regs.LR = 0x821B0174; return 0x82170DB0;
		/* 821B0170h case    5:*/		return 0x821B0174;
		  /* 821B0174h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0174h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0174h case    6:*/		return 0x821B0178;
		  /* 821B0178h */ case    7:  		/* bc 12, CR0_EQ, 120 */
		/* 821B0178h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B01F0;  }
		/* 821B0178h case    7:*/		return 0x821B017C;
		  /* 821B017Ch */ case    8:  		/* lwz R11, <#[R31 + 44]> */
		/* 821B017Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B017Ch case    8:*/		return 0x821B0180;
		  /* 821B0180h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821B0180h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0180h case    9:*/		return 0x821B0184;
		  /* 821B0184h */ case   10:  		/* rlwinm R11, R11, 21, 11, 31 */
		/* 821B0184h case   10:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R11,regs.R11);
		/* 821B0184h case   10:*/		return 0x821B0188;
		  /* 821B0188h */ case   11:  		/* xor R11, R11, R30 */
		/* 821B0188h case   11:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821B0188h case   11:*/		return 0x821B018C;
		  /* 821B018Ch */ case   12:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821B018Ch case   12:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B018Ch case   12:*/		return 0x821B0190;
		  /* 821B0190h */ case   13:  		/* bc 12, CR0_EQ, 36 */
		/* 821B0190h case   13:*/		if ( regs.CR[0].eq ) { return 0x821B01B4;  }
		/* 821B0190h case   13:*/		return 0x821B0194;
		  /* 821B0194h */ case   14:  		/* li R7, 1 */
		/* 821B0194h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821B0194h case   14:*/		return 0x821B0198;
		  /* 821B0198h */ case   15:  		/* lwz R6, <#[R27 + 652]> */
		/* 821B0198h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x0000028C) );
		/* 821B0198h case   15:*/		return 0x821B019C;
		  /* 821B019Ch */ case   16:  		/* rlwinm R5, R30, 31, 28, 31 */
		/* 821B019Ch case   16:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R5,regs.R30);
		/* 821B019Ch case   16:*/		return 0x821B01A0;
		  /* 821B01A0h */ case   17:  		/* mr R4, R31 */
		/* 821B01A0h case   17:*/		regs.R4 = regs.R31;
		/* 821B01A0h case   17:*/		return 0x821B01A4;
		  /* 821B01A4h */ case   18:  		/* mr R3, R27 */
		/* 821B01A4h case   18:*/		regs.R3 = regs.R27;
		/* 821B01A4h case   18:*/		return 0x821B01A8;
		  /* 821B01A8h */ case   19:  		/* bl 112896 */
		/* 821B01A8h case   19:*/		regs.LR = 0x821B01AC; return 0x821CBAA8;
		/* 821B01A8h case   19:*/		return 0x821B01AC;
		  /* 821B01ACh */ case   20:  		/* mr R3, R31 */
		/* 821B01ACh case   20:*/		regs.R3 = regs.R31;
		/* 821B01ACh case   20:*/		return 0x821B01B0;
		  /* 821B01B0h */ case   21:  		/* bl -228920 */
		/* 821B01B0h case   21:*/		regs.LR = 0x821B01B4; return 0x82178378;
		/* 821B01B0h case   21:*/		return 0x821B01B4;
	}
	return 0x821B01B4;
} // Block from 821B015Ch-821B01B4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B01B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B01B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B01B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B01B4);
		  /* 821B01B4h */ case    0:  		/* addi R6, R1, 80 */
		/* 821B01B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821B01B4h case    0:*/		return 0x821B01B8;
		  /* 821B01B8h */ case    1:  		/* mr R5, R31 */
		/* 821B01B8h case    1:*/		regs.R5 = regs.R31;
		/* 821B01B8h case    1:*/		return 0x821B01BC;
		  /* 821B01BCh */ case    2:  		/* mr R4, R31 */
		/* 821B01BCh case    2:*/		regs.R4 = regs.R31;
		/* 821B01BCh case    2:*/		return 0x821B01C0;
		  /* 821B01C0h */ case    3:  		/* mr R3, R27 */
		/* 821B01C0h case    3:*/		regs.R3 = regs.R27;
		/* 821B01C0h case    3:*/		return 0x821B01C4;
		  /* 821B01C4h */ case    4:  		/* bl -70020 */
		/* 821B01C4h case    4:*/		regs.LR = 0x821B01C8; return 0x8219F040;
		/* 821B01C4h case    4:*/		return 0x821B01C8;
		  /* 821B01C8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B01C8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B01C8h case    5:*/		return 0x821B01CC;
		  /* 821B01CCh */ case    6:  		/* bc 12, CR0_EQ, 272 */
		/* 821B01CCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821B02DC;  }
		/* 821B01CCh case    6:*/		return 0x821B01D0;
		  /* 821B01D0h */ case    7:  		/* li R7, 0 */
		/* 821B01D0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B01D0h case    7:*/		return 0x821B01D4;
		  /* 821B01D4h */ case    8:  		/* li R6, 1 */
		/* 821B01D4h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B01D4h case    8:*/		return 0x821B01D8;
		  /* 821B01D8h */ case    9:  		/* mr R5, R31 */
		/* 821B01D8h case    9:*/		regs.R5 = regs.R31;
		/* 821B01D8h case    9:*/		return 0x821B01DC;
		  /* 821B01DCh */ case   10:  		/* addi R4, R1, 80 */
		/* 821B01DCh case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821B01DCh case   10:*/		return 0x821B01E0;
		  /* 821B01E0h */ case   11:  		/* mr R3, R27 */
		/* 821B01E0h case   11:*/		regs.R3 = regs.R27;
		/* 821B01E0h case   11:*/		return 0x821B01E4;
		  /* 821B01E4h */ case   12:  		/* bl -41572 */
		/* 821B01E4h case   12:*/		regs.LR = 0x821B01E8; return 0x821A5F80;
		/* 821B01E4h case   12:*/		return 0x821B01E8;
		  /* 821B01E8h */ case   13:  		/* mr R31, R3 */
		/* 821B01E8h case   13:*/		regs.R31 = regs.R3;
		/* 821B01E8h case   13:*/		return 0x821B01EC;
		  /* 821B01ECh */ case   14:  		/* b 240 */
		/* 821B01ECh case   14:*/		return 0x821B02DC;
		/* 821B01ECh case   14:*/		return 0x821B01F0;
	}
	return 0x821B01F0;
} // Block from 821B01B4h-821B01F0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B01F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B01F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B01F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B01F0);
		  /* 821B01F0h */ case    0:  		/* cmplwi CR6, R29, 100 */
		/* 821B01F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000064);
		/* 821B01F0h case    0:*/		return 0x821B01F4;
		  /* 821B01F4h */ case    1:  		/* bc 4, CR6_EQ, 232 */
		/* 821B01F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B02DC;  }
		/* 821B01F4h case    1:*/		return 0x821B01F8;
		  /* 821B01F8h */ case    2:  		/* lwz R29, <#[R31 + 48]> */
		/* 821B01F8h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000030) );
		/* 821B01F8h case    2:*/		return 0x821B01FC;
		  /* 821B01FCh */ case    3:  		/* rlwinm. R10, R30, 31, 30, 31 */
		/* 821B01FCh case    3:*/		cpu::op::rlwinm<1,31,30,31>(regs,&regs.R10,regs.R30);
		/* 821B01FCh case    3:*/		return 0x821B0200;
		  /* 821B0200h */ case    4:  		/* rlwinm R11, R30, 31, 28, 31 */
		/* 821B0200h case    4:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R30);
		/* 821B0200h case    4:*/		return 0x821B0204;
		  /* 821B0204h */ case    5:  		/* bc 4, CR0_EQ, 160 */
		/* 821B0204h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B02A4;  }
		/* 821B0204h case    5:*/		return 0x821B0208;
		  /* 821B0208h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 821B0208h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B0208h case    6:*/		return 0x821B020C;
		  /* 821B020Ch */ case    7:  		/* li R10, 7296 */
		/* 821B020Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1C80);
		/* 821B020Ch case    7:*/		return 0x821B0210;
		  /* 821B0210h */ case    8:  		/* rlwinm R9, R11, 0, 27, 24 */
		/* 821B0210h case    8:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R9,regs.R11);
		/* 821B0210h case    8:*/		return 0x821B0214;
		  /* 821B0214h */ case    9:  		/* rlwimi R10, R11, 30, 25, 26 */
		/* 821B0214h case    9:*/		cpu::op::rlwimi<0,30,25,26>(regs,&regs.R10,regs.R11);
		/* 821B0214h case    9:*/		return 0x821B0218;
		  /* 821B0218h */ case   10:  		/* rlwinm R9, R9, 0, 24, 21 */
		/* 821B0218h case   10:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R9,regs.R9);
		/* 821B0218h case   10:*/		return 0x821B021C;
		  /* 821B021Ch */ case   11:  		/* or R11, R10, R9 */
		/* 821B021Ch case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 821B021Ch case   11:*/		return 0x821B0220;
		  /* 821B0220h */ case   12:  		/* li R9, 68 */
		/* 821B0220h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x44);
		/* 821B0220h case   12:*/		return 0x821B0224;
		  /* 821B0224h */ case   13:  		/* stw R11, <#[R29]> */
		/* 821B0224h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B0224h case   13:*/		return 0x821B0228;
		  /* 821B0228h */ case   14:  		/* lwz R10, <#[R31 + 4]> */
		/* 821B0228h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821B0228h case   14:*/		return 0x821B022C;
		  /* 821B022Ch */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821B022Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B022Ch case   15:*/		return 0x821B0230;
		  /* 821B0230h */ case   16:  		/* bc 12, CR6_EQ, 100 */
		/* 821B0230h case   16:*/		if ( regs.CR[6].eq ) { return 0x821B0294;  }
		/* 821B0230h case   16:*/		return 0x821B0234;
		  /* 821B0234h */ case   17:  		/* lwz R11, <#[R10 + 16]> */
		/* 821B0234h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821B0234h case   17:*/		return 0x821B0238;
		  /* 821B0238h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821B0238h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0238h case   18:*/		return 0x821B023C;
		  /* 821B023Ch */ case   19:  		/* bc 12, CR6_EQ, 80 */
		/* 821B023Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821B028C;  }
		/* 821B023Ch case   19:*/		return 0x821B0240;
		  /* 821B0240h */ case   20:  		/* lwz R11, <#[R10]> */
		/* 821B0240h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0240h case   20:*/		return 0x821B0244;
		  /* 821B0244h */ case   21:  		/* rlwinm. R8, R11, 0, 4, 6 */
		/* 821B0244h case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R11);
		/* 821B0244h case   21:*/		return 0x821B0248;
		  /* 821B0248h */ case   22:  		/* bc 12, CR0_EQ, 68 */
		/* 821B0248h case   22:*/		if ( regs.CR[0].eq ) { return 0x821B028C;  }
		/* 821B0248h case   22:*/		return 0x821B024C;
		  /* 821B024Ch */ case   23:  		/* rlwinm R8, R11, 22, 29, 30 */
		/* 821B024Ch case   23:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R8,regs.R11);
		/* 821B024Ch case   23:*/		return 0x821B0250;
		  /* 821B0250h */ case   24:  		/* rlwinm R7, R11, 24, 29, 30 */
		/* 821B0250h case   24:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R11);
		/* 821B0250h case   24:*/		return 0x821B0254;
		  /* 821B0254h */ case   25:  		/* srw R8, R9, R8 */
		/* 821B0254h case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821B0254h case   25:*/		return 0x821B0258;
		  /* 821B0258h */ case   26:  		/* srw R7, R9, R7 */
		/* 821B0258h case   26:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R7);
		/* 821B0258h case   26:*/		return 0x821B025C;
		  /* 821B025Ch */ case   27:  		/* rlwimi R7, R8, 2, 28, 29 */
		/* 821B025Ch case   27:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 821B025Ch case   27:*/		return 0x821B0260;
		  /* 821B0260h */ case   28:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821B0260h case   28:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821B0260h case   28:*/		return 0x821B0264;
		  /* 821B0264h */ case   29:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821B0264h case   29:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821B0264h case   29:*/		return 0x821B0268;
		  /* 821B0268h */ case   30:  		/* srw R8, R9, R8 */
		/* 821B0268h case   30:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821B0268h case   30:*/		return 0x821B026C;
		  /* 821B026Ch */ case   31:  		/* rlwinm R6, R11, 28, 29, 30 */
		/* 821B026Ch case   31:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R11);
		/* 821B026Ch case   31:*/		return 0x821B0270;
		  /* 821B0270h */ case   32:  		/* rlwimi R8, R7, 2, 0, 29 */
		/* 821B0270h case   32:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821B0270h case   32:*/		return 0x821B0274;
		  /* 821B0274h */ case   33:  		/* srw R7, R9, R6 */
		/* 821B0274h case   33:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R6);
		/* 821B0274h case   33:*/		return 0x821B0278;
		  /* 821B0278h */ case   34:  		/* rlwimi R7, R8, 2, 0, 29 */
		/* 821B0278h case   34:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 821B0278h case   34:*/		return 0x821B027C;
		  /* 821B027Ch */ case   35:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B027Ch case   35:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B027Ch case   35:*/		return 0x821B0280;
		  /* 821B0280h */ case   36:  		/* rlwinm R8, R7, 5, 0, 26 */
		/* 821B0280h case   36:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R8,regs.R7);
		/* 821B0280h case   36:*/		return 0x821B0284;
		  /* 821B0284h */ case   37:  		/* or R11, R8, R11 */
		/* 821B0284h case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821B0284h case   37:*/		return 0x821B0288;
		  /* 821B0288h */ case   38:  		/* stw R11, <#[R10]> */
		/* 821B0288h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0288h case   38:*/		return 0x821B028C;
	}
	return 0x821B028C;
} // Block from 821B01F0h-821B028Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 821B028Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B028C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B028C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B028C);
		  /* 821B028Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B028Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B028Ch case    0:*/		return 0x821B0290;
		  /* 821B0290h */ case    1:  		/* b -100 */
		/* 821B0290h case    1:*/		return 0x821B022C;
		/* 821B0290h case    1:*/		return 0x821B0294;
	}
	return 0x821B0294;
} // Block from 821B028Ch-821B0294h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0294);
		  /* 821B0294h */ case    0:  		/* mr R3, R31 */
		/* 821B0294h case    0:*/		regs.R3 = regs.R31;
		/* 821B0294h case    0:*/		return 0x821B0298;
	}
	return 0x821B0298;
} // Block from 821B0294h-821B0298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B0298h
// Function '?FindPossibleVectorizations@Compiler@D3DXShader@@AAAIPAUPossibleVectorization@2@PAUPossibleVectorizationCandidate@2@IIIPAV?$Stack@PAUPossibleVectorization@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAPAU32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0298);
		  /* 821B0298h */ case    0:  		/* bl -229152 */
		/* 821B0298h case    0:*/		regs.LR = 0x821B029C; return 0x82178378;
		/* 821B0298h case    0:*/		return 0x821B029C;
		  /* 821B029Ch */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B029Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B029Ch case    1:*/		return 0x821B02A0;
		  /* 821B02A0h */ case    2:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821B02A0h case    2:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821B02A0h case    2:*/		return 0x821B02A4;
	}
	return 0x821B02A4;
} // Block from 821B0298h-821B02A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B02A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B02A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B02A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B02A4);
		  /* 821B02A4h */ case    0:  		/* rlwinm. R11, R11, 0, 28, 29 */
		/* 821B02A4h case    0:*/		cpu::op::rlwinm<1,0,28,29>(regs,&regs.R11,regs.R11);
		/* 821B02A4h case    0:*/		return 0x821B02A8;
		  /* 821B02A8h */ case    1:  		/* bc 4, CR0_EQ, 52 */
		/* 821B02A8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B02DC;  }
		/* 821B02A8h case    1:*/		return 0x821B02AC;
		  /* 821B02ACh */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821B02ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B02ACh case    2:*/		return 0x821B02B0;
		  /* 821B02B0h */ case    3:  		/* lis R10, 512 */
		/* 821B02B0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821B02B0h case    3:*/		return 0x821B02B4;
		  /* 821B02B4h */ case    4:  		/* rlwinm R9, R11, 0, 4, 6 */
		/* 821B02B4h case    4:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R9,regs.R11);
		/* 821B02B4h case    4:*/		return 0x821B02B8;
		  /* 821B02B8h */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 821B02B8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821B02B8h case    5:*/		return 0x821B02BC;
		  /* 821B02BCh */ case    6:  		/* bc 4, CR6_GT, 32 */
		/* 821B02BCh case    6:*/		if ( !regs.CR[6].gt ) { return 0x821B02DC;  }
		/* 821B02BCh case    6:*/		return 0x821B02C0;
		  /* 821B02C0h */ case    7:  		/* li R10, 1 */
		/* 821B02C0h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B02C0h case    7:*/		return 0x821B02C4;
		  /* 821B02C4h */ case    8:  		/* lwz R4, <#[R29 + 12]> */
		/* 821B02C4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821B02C4h case    8:*/		return 0x821B02C8;
		  /* 821B02C8h */ case    9:  		/* mr R3, R27 */
		/* 821B02C8h case    9:*/		regs.R3 = regs.R27;
		/* 821B02C8h case    9:*/		return 0x821B02CC;
		  /* 821B02CCh */ case   10:  		/* rlwimi R11, R10, 25, 4, 6 */
		/* 821B02CCh case   10:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R10);
		/* 821B02CCh case   10:*/		return 0x821B02D0;
		  /* 821B02D0h */ case   11:  		/* stw R11, <#[R29]> */
		/* 821B02D0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B02D0h case   11:*/		return 0x821B02D4;
		  /* 821B02D4h */ case   12:  		/* lwz R5, <#[R27 + 660]> */
		/* 821B02D4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000294) );
		/* 821B02D4h case   12:*/		return 0x821B02D8;
		  /* 821B02D8h */ case   13:  		/* bl 50816 */
		/* 821B02D8h case   13:*/		regs.LR = 0x821B02DC; return 0x821BC958;
		/* 821B02D8h case   13:*/		return 0x821B02DC;
	}
	return 0x821B02DC;
} // Block from 821B02A4h-821B02DCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B02DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B02DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B02DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B02DC);
		  /* 821B02DCh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821B02DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821B02DCh case    0:*/		return 0x821B02E0;
		  /* 821B02E0h */ case    1:  		/* bc 4, CR6_EQ, 84 */
		/* 821B02E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B0334;  }
		/* 821B02E0h case    1:*/		return 0x821B02E4;
		  /* 821B02E4h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821B02E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821B02E4h case    2:*/		return 0x821B02E8;
		  /* 821B02E8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B02E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B02E8h case    3:*/		return 0x821B02EC;
		  /* 821B02ECh */ case    4:  		/* bc 12, CR6_EQ, 52 */
		/* 821B02ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x821B0320;  }
		/* 821B02ECh case    4:*/		return 0x821B02F0;
		  /* 821B02F0h */ case    5:  		/* lwz R4, <#[R11 + 16]> */
		/* 821B02F0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821B02F0h case    5:*/		return 0x821B02F4;
		  /* 821B02F4h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 821B02F4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B02F4h case    6:*/		return 0x821B02F8;
		  /* 821B02F8h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821B02F8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B0318;  }
		/* 821B02F8h case    7:*/		return 0x821B02FC;
		  /* 821B02FCh */ case    8:  		/* lwz R10, <#[R4 + 8]> */
		/* 821B02FCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821B02FCh case    8:*/		return 0x821B0300;
		  /* 821B0300h */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821B0300h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821B0300h case    9:*/		return 0x821B0304;
		  /* 821B0304h */ case   10:  		/* cmplwi CR6, R10, 14080 */
		/* 821B0304h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821B0304h case   10:*/		return 0x821B0308;
		  /* 821B0308h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 821B0308h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B0318;  }
		/* 821B0308h case   11:*/		return 0x821B030C;
		  /* 821B030Ch */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B030Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B030Ch case   12:*/		return 0x821B0310;
		  /* 821B0310h */ case   13:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821B0310h case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821B0310h case   13:*/		return 0x821B0314;
		  /* 821B0314h */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 821B0314h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B0324;  }
		/* 821B0314h case   14:*/		return 0x821B0318;
	}
	return 0x821B0318;
} // Block from 821B02DCh-821B0318h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B0318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0318);
		  /* 821B0318h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B0318h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0318h case    0:*/		return 0x821B031C;
		  /* 821B031Ch */ case    1:  		/* b -52 */
		/* 821B031Ch case    1:*/		return 0x821B02E8;
		/* 821B031Ch case    1:*/		return 0x821B0320;
	}
	return 0x821B0320;
} // Block from 821B0318h-821B0320h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0320);
		  /* 821B0320h */ case    0:  		/* li R4, 0 */
		/* 821B0320h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B0320h case    0:*/		return 0x821B0324;
	}
	return 0x821B0324;
} // Block from 821B0320h-821B0324h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B0324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0324);
		  /* 821B0324h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821B0324h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B0324h case    0:*/		return 0x821B0328;
		  /* 821B0328h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821B0328h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B0334;  }
		/* 821B0328h case    1:*/		return 0x821B032C;
		  /* 821B032Ch */ case    2:  		/* mr R3, R27 */
		/* 821B032Ch case    2:*/		regs.R3 = regs.R27;
		/* 821B032Ch case    2:*/		return 0x821B0330;
		  /* 821B0330h */ case    3:  		/* bl -63608 */
		/* 821B0330h case    3:*/		regs.LR = 0x821B0334; return 0x821A0AB8;
		/* 821B0330h case    3:*/		return 0x821B0334;
	}
	return 0x821B0334;
} // Block from 821B0324h-821B0334h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0334);
		  /* 821B0334h */ case    0:  		/* mr R4, R25 */
		/* 821B0334h case    0:*/		regs.R4 = regs.R25;
		/* 821B0334h case    0:*/		return 0x821B0338;
		  /* 821B0338h */ case    1:  		/* mr R3, R27 */
		/* 821B0338h case    1:*/		regs.R3 = regs.R27;
		/* 821B0338h case    1:*/		return 0x821B033C;
		  /* 821B033Ch */ case    2:  		/* bl 446596 */
		/* 821B033Ch case    2:*/		regs.LR = 0x821B0340; return 0x8221D3C0;
		/* 821B033Ch case    2:*/		return 0x821B0340;
		  /* 821B0340h */ case    3:  		/* mr R3, R31 */
		/* 821B0340h case    3:*/		regs.R3 = regs.R31;
		/* 821B0340h case    3:*/		return 0x821B0344;
		  /* 821B0344h */ case    4:  		/* addi R1, R1, 160 */
		/* 821B0344h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821B0344h case    4:*/		return 0x821B0348;
		  /* 821B0348h */ case    5:  		/* b -1175724 */
		/* 821B0348h case    5:*/		return 0x8209129C;
		/* 821B0348h case    5:*/		return 0x821B034C;
		  /* 821B034Ch */ case    6:  		/* nop */
		/* 821B034Ch case    6:*/		cpu::op::nop();
		/* 821B034Ch case    6:*/		return 0x821B0350;
	}
	return 0x821B0350;
} // Block from 821B0334h-821B0350h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B0350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0350);
		  /* 821B0350h */ case    0:  		/* mfspr R12, LR */
		/* 821B0350h case    0:*/		regs.R12 = regs.LR;
		/* 821B0350h case    0:*/		return 0x821B0354;
		  /* 821B0354h */ case    1:  		/* bl -1175808 */
		/* 821B0354h case    1:*/		regs.LR = 0x821B0358; return 0x82091254;
		/* 821B0354h case    1:*/		return 0x821B0358;
		  /* 821B0358h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821B0358h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821B0358h case    2:*/		return 0x821B035C;
		  /* 821B035Ch */ case    3:  		/* mr R30, R4 */
		/* 821B035Ch case    3:*/		regs.R30 = regs.R4;
		/* 821B035Ch case    3:*/		return 0x821B0360;
		  /* 821B0360h */ case    4:  		/* li R4, 793 */
		/* 821B0360h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x319);
		/* 821B0360h case    4:*/		return 0x821B0364;
		  /* 821B0364h */ case    5:  		/* mr R31, R3 */
		/* 821B0364h case    5:*/		regs.R31 = regs.R3;
		/* 821B0364h case    5:*/		return 0x821B0368;
		  /* 821B0368h */ case    6:  		/* mr R29, R5 */
		/* 821B0368h case    6:*/		regs.R29 = regs.R5;
		/* 821B0368h case    6:*/		return 0x821B036C;
		  /* 821B036Ch */ case    7:  		/* mr R28, R6 */
		/* 821B036Ch case    7:*/		regs.R28 = regs.R6;
		/* 821B036Ch case    7:*/		return 0x821B0370;
		  /* 821B0370h */ case    8:  		/* mr R27, R7 */
		/* 821B0370h case    8:*/		regs.R27 = regs.R7;
		/* 821B0370h case    8:*/		return 0x821B0374;
		  /* 821B0374h */ case    9:  		/* bl -86556 */
		/* 821B0374h case    9:*/		regs.LR = 0x821B0378; return 0x8219B158;
		/* 821B0374h case    9:*/		return 0x821B0378;
		  /* 821B0378h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0378h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0378h case   10:*/		return 0x821B037C;
		  /* 821B037Ch */ case   11:  		/* bc 12, CR0_EQ, 36 */
		/* 821B037Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821B03A0;  }
		/* 821B037Ch case   11:*/		return 0x821B0380;
		  /* 821B0380h */ case   12:  		/* li R8, 0 */
		/* 821B0380h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B0380h case   12:*/		return 0x821B0384;
		  /* 821B0384h */ case   13:  		/* mr R7, R27 */
		/* 821B0384h case   13:*/		regs.R7 = regs.R27;
		/* 821B0384h case   13:*/		return 0x821B0388;
		  /* 821B0388h */ case   14:  		/* mr R6, R28 */
		/* 821B0388h case   14:*/		regs.R6 = regs.R28;
		/* 821B0388h case   14:*/		return 0x821B038C;
		  /* 821B038Ch */ case   15:  		/* mr R5, R29 */
		/* 821B038Ch case   15:*/		regs.R5 = regs.R29;
		/* 821B038Ch case   15:*/		return 0x821B0390;
		  /* 821B0390h */ case   16:  		/* mr R4, R30 */
		/* 821B0390h case   16:*/		regs.R4 = regs.R30;
		/* 821B0390h case   16:*/		return 0x821B0394;
		  /* 821B0394h */ case   17:  		/* mr R3, R31 */
		/* 821B0394h case   17:*/		regs.R3 = regs.R31;
		/* 821B0394h case   17:*/		return 0x821B0398;
		  /* 821B0398h */ case   18:  		/* bl -39952 */
		/* 821B0398h case   18:*/		regs.LR = 0x821B039C; return 0x821A6788;
		/* 821B0398h case   18:*/		return 0x821B039C;
		  /* 821B039Ch */ case   19:  		/* b 8 */
		/* 821B039Ch case   19:*/		return 0x821B03A4;
		/* 821B039Ch case   19:*/		return 0x821B03A0;
	}
	return 0x821B03A0;
} // Block from 821B0350h-821B03A0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B03A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B03A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B03A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B03A0);
		  /* 821B03A0h */ case    0:  		/* li R3, 3 */
		/* 821B03A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 821B03A0h case    0:*/		return 0x821B03A4;
	}
	return 0x821B03A4;
} // Block from 821B03A0h-821B03A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B03A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B03A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B03A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B03A4);
		  /* 821B03A4h */ case    0:  		/* addi R1, R1, 128 */
		/* 821B03A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821B03A4h case    0:*/		return 0x821B03A8;
		  /* 821B03A8h */ case    1:  		/* b -1175812 */
		/* 821B03A8h case    1:*/		return 0x820912A4;
		/* 821B03A8h case    1:*/		return 0x821B03AC;
		  /* 821B03ACh */ case    2:  		/* nop */
		/* 821B03ACh case    2:*/		cpu::op::nop();
		/* 821B03ACh case    2:*/		return 0x821B03B0;
	}
	return 0x821B03B0;
} // Block from 821B03A4h-821B03B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B03B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B03B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B03B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B03B0);
		  /* 821B03B0h */ case    0:  		/* mfspr R12, LR */
		/* 821B03B0h case    0:*/		regs.R12 = regs.LR;
		/* 821B03B0h case    0:*/		return 0x821B03B4;
		  /* 821B03B4h */ case    1:  		/* bl -1175896 */
		/* 821B03B4h case    1:*/		regs.LR = 0x821B03B8; return 0x8209125C;
		/* 821B03B4h case    1:*/		return 0x821B03B8;
		  /* 821B03B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821B03B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821B03B8h case    2:*/		return 0x821B03BC;
		  /* 821B03BCh */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B03BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B03BCh case    3:*/		return 0x821B03C0;
		  /* 821B03C0h */ case    4:  		/* mr R31, R3 */
		/* 821B03C0h case    4:*/		regs.R31 = regs.R3;
		/* 821B03C0h case    4:*/		return 0x821B03C4;
		  /* 821B03C4h */ case    5:  		/* lwz R10, <#[R5 + 8]> */
		/* 821B03C4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 821B03C4h case    5:*/		return 0x821B03C8;
		  /* 821B03C8h */ case    6:  		/* mr R29, R4 */
		/* 821B03C8h case    6:*/		regs.R29 = regs.R4;
		/* 821B03C8h case    6:*/		return 0x821B03CC;
		  /* 821B03CCh */ case    7:  		/* mr R30, R5 */
		/* 821B03CCh case    7:*/		regs.R30 = regs.R5;
		/* 821B03CCh case    7:*/		return 0x821B03D0;
		  /* 821B03D0h */ case    8:  		/* xor R11, R11, R10 */
		/* 821B03D0h case    8:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B03D0h case    8:*/		return 0x821B03D4;
		  /* 821B03D4h */ case    9:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821B03D4h case    9:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B03D4h case    9:*/		return 0x821B03D8;
		  /* 821B03D8h */ case   10:  		/* bc 4, CR0_EQ, 100 */
		/* 821B03D8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B043C;  }
		/* 821B03D8h case   10:*/		return 0x821B03DC;
		  /* 821B03DCh */ case   11:  		/* mr R4, R5 */
		/* 821B03DCh case   11:*/		regs.R4 = regs.R5;
		/* 821B03DCh case   11:*/		return 0x821B03E0;
		  /* 821B03E0h */ case   12:  		/* bl -80544 */
		/* 821B03E0h case   12:*/		regs.LR = 0x821B03E4; return 0x8219C940;
		/* 821B03E0h case   12:*/		return 0x821B03E4;
		  /* 821B03E4h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B03E4h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B03E4h case   13:*/		return 0x821B03E8;
		  /* 821B03E8h */ case   14:  		/* bc 4, CR0_EQ, 84 */
		/* 821B03E8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B043C;  }
		/* 821B03E8h case   14:*/		return 0x821B03EC;
		  /* 821B03ECh */ case   15:  		/* li R7, 0 */
		/* 821B03ECh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B03ECh case   15:*/		return 0x821B03F0;
		  /* 821B03F0h */ case   16:  		/* addi R6, R1, 80 */
		/* 821B03F0h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821B03F0h case   16:*/		return 0x821B03F4;
		  /* 821B03F4h */ case   17:  		/* mr R5, R29 */
		/* 821B03F4h case   17:*/		regs.R5 = regs.R29;
		/* 821B03F4h case   17:*/		return 0x821B03F8;
		  /* 821B03F8h */ case   18:  		/* mr R4, R30 */
		/* 821B03F8h case   18:*/		regs.R4 = regs.R30;
		/* 821B03F8h case   18:*/		return 0x821B03FC;
		  /* 821B03FCh */ case   19:  		/* mr R3, R31 */
		/* 821B03FCh case   19:*/		regs.R3 = regs.R31;
		/* 821B03FCh case   19:*/		return 0x821B0400;
		  /* 821B0400h */ case   20:  		/* bl -176 */
		/* 821B0400h case   20:*/		regs.LR = 0x821B0404; return 0x821B0350;
		/* 821B0400h case   20:*/		return 0x821B0404;
		  /* 821B0404h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 821B0404h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821B0404h case   21:*/		return 0x821B0408;
		  /* 821B0408h */ case   22:  		/* bc 4, CR0_EQ, 52 */
		/* 821B0408h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821B043C;  }
		/* 821B0408h case   22:*/		return 0x821B040C;
		  /* 821B040Ch */ case   23:  		/* lwz R11, <#[R31 + 664]> */
		/* 821B040Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000298) );
		/* 821B040Ch case   23:*/		return 0x821B0410;
		  /* 821B0410h */ case   24:  		/* mr R3, R31 */
		/* 821B0410h case   24:*/		regs.R3 = regs.R31;
		/* 821B0410h case   24:*/		return 0x821B0414;
		  /* 821B0414h */ case   25:  		/* lwz R5, <#[R1 + 80]> */
		/* 821B0414h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821B0414h case   25:*/		return 0x821B0418;
		  /* 821B0418h */ case   26:  		/* cmplw CR6, R5, R11 */
		/* 821B0418h case   26:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821B0418h case   26:*/		return 0x821B041C;
		  /* 821B041Ch */ case   27:  		/* bc 12, CR6_GT, 24 */
		/* 821B041Ch case   27:*/		if ( regs.CR[6].gt ) { return 0x821B0434;  }
		/* 821B041Ch case   27:*/		return 0x821B0420;
		  /* 821B0420h */ case   28:  		/* li R6, 0 */
		/* 821B0420h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B0420h case   28:*/		return 0x821B0424;
		  /* 821B0424h */ case   29:  		/* mr R5, R29 */
		/* 821B0424h case   29:*/		regs.R5 = regs.R29;
		/* 821B0424h case   29:*/		return 0x821B0428;
		  /* 821B0428h */ case   30:  		/* mr R4, R30 */
		/* 821B0428h case   30:*/		regs.R4 = regs.R30;
		/* 821B0428h case   30:*/		return 0x821B042C;
		  /* 821B042Ch */ case   31:  		/* bl -38460 */
		/* 821B042Ch case   31:*/		regs.LR = 0x821B0430; return 0x821A6DF0;
		/* 821B042Ch case   31:*/		return 0x821B0430;
		  /* 821B0430h */ case   32:  		/* b 16 */
		/* 821B0430h case   32:*/		return 0x821B0440;
		/* 821B0430h case   32:*/		return 0x821B0434;
	}
	return 0x821B0434;
} // Block from 821B03B0h-821B0434h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821B0434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0434);
		  /* 821B0434h */ case    0:  		/* mr R4, R29 */
		/* 821B0434h case    0:*/		regs.R4 = regs.R29;
		/* 821B0434h case    0:*/		return 0x821B0438;
		  /* 821B0438h */ case    1:  		/* bl -63616 */
		/* 821B0438h case    1:*/		regs.LR = 0x821B043C; return 0x821A0BB8;
		/* 821B0438h case    1:*/		return 0x821B043C;
	}
	return 0x821B043C;
} // Block from 821B0434h-821B043Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B043Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B043C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B043C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B043C);
		  /* 821B043Ch */ case    0:  		/* li R3, 0 */
		/* 821B043Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821B043Ch case    0:*/		return 0x821B0440;
	}
	return 0x821B0440;
} // Block from 821B043Ch-821B0440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B0440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0440);
		  /* 821B0440h */ case    0:  		/* addi R1, R1, 128 */
		/* 821B0440h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821B0440h case    0:*/		return 0x821B0444;
		  /* 821B0444h */ case    1:  		/* b -1175960 */
		/* 821B0444h case    1:*/		return 0x820912AC;
		/* 821B0444h case    1:*/		return 0x821B0448;
	}
	return 0x821B0448;
} // Block from 821B0440h-821B0448h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0448);
		  /* 821B0448h */ case    0:  		/* mfspr R12, LR */
		/* 821B0448h case    0:*/		regs.R12 = regs.LR;
		/* 821B0448h case    0:*/		return 0x821B044C;
		  /* 821B044Ch */ case    1:  		/* bl -1176108 */
		/* 821B044Ch case    1:*/		regs.LR = 0x821B0450; return 0x82091220;
		/* 821B044Ch case    1:*/		return 0x821B0450;
		  /* 821B0450h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 821B0450h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 821B0450h case    2:*/		return 0x821B0454;
		  /* 821B0454h */ case    3:  		/* stw R10, <#[R1 + 380]> */
		/* 821B0454h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000017C) );
		/* 821B0454h case    3:*/		return 0x821B0458;
	}
	return 0x821B0458;
} // Block from 821B0448h-821B0458h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0458h
// Function '?DrainPossibleVectorizationStack@Compiler@D3DXShader@@AAAXPAV?$Stack@PAUPossibleVectorization@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAPAUPossibleVectorization@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0458);
		  /* 821B0458h */ case    0:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821B0458h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821B0458h case    0:*/		return 0x821B045C;
		  /* 821B045Ch */ case    1:  		/* lwz R10, <#[R4 + 20]> */
		/* 821B045Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 821B045Ch case    1:*/		return 0x821B0460;
		  /* 821B0460h */ case    2:  		/* li R9, 0 */
		/* 821B0460h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B0460h case    2:*/		return 0x821B0464;
		  /* 821B0464h */ case    3:  		/* mr R17, R3 */
		/* 821B0464h case    3:*/		regs.R17 = regs.R3;
		/* 821B0464h case    3:*/		return 0x821B0468;
		  /* 821B0468h */ case    4:  		/* stw R7, <#[R1 + 356]> */
		/* 821B0468h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000164) );
		/* 821B0468h case    4:*/		return 0x821B046C;
		  /* 821B046Ch */ case    5:  		/* ori R10, R10, 6 */
		/* 821B046Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6);
		/* 821B046Ch case    5:*/		return 0x821B0470;
		  /* 821B0470h */ case    6:  		/* stw R8, <#[R1 + 364]> */
		/* 821B0470h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000016C) );
		/* 821B0470h case    6:*/		return 0x821B0474;
		  /* 821B0474h */ case    7:  		/* mr R18, R4 */
		/* 821B0474h case    7:*/		regs.R18 = regs.R4;
		/* 821B0474h case    7:*/		return 0x821B0478;
		  /* 821B0478h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 821B0478h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821B0478h case    8:*/		return 0x821B047C;
		  /* 821B047Ch */ case    9:  		/* mr R31, R5 */
		/* 821B047Ch case    9:*/		regs.R31 = regs.R5;
		/* 821B047Ch case    9:*/		return 0x821B0480;
		  /* 821B0480h */ case   10:  		/* stw R9, <#[R1 + 80]> */
		/* 821B0480h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821B0480h case   10:*/		return 0x821B0484;
		  /* 821B0484h */ case   11:  		/* mr R15, R4 */
		/* 821B0484h case   11:*/		regs.R15 = regs.R4;
		/* 821B0484h case   11:*/		return 0x821B0488;
		  /* 821B0488h */ case   12:  		/* stw R10, <#[R4 + 20]> */
		/* 821B0488h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 821B0488h case   12:*/		return 0x821B048C;
		  /* 821B048Ch */ case   13:  		/* mr R14, R4 */
		/* 821B048Ch case   13:*/		regs.R14 = regs.R4;
		/* 821B048Ch case   13:*/		return 0x821B0490;
		  /* 821B0490h */ case   14:  		/* bc 12, CR0_EQ, 60 */
		/* 821B0490h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B04CC;  }
		/* 821B0490h case   14:*/		return 0x821B0494;
		  /* 821B0494h */ case   15:  		/* lwz R11, <#[R4 + 4]> */
		/* 821B0494h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821B0494h case   15:*/		return 0x821B0498;
		  /* 821B0498h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821B0498h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0498h case   16:*/		return 0x821B049C;
		  /* 821B049Ch */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 821B049Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821B04C8;  }
		/* 821B049Ch case   17:*/		return 0x821B04A0;
		  /* 821B04A0h */ case   18:  		/* lwz R10, <#[R11 + 16]> */
		/* 821B04A0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821B04A0h case   18:*/		return 0x821B04A4;
		  /* 821B04A4h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821B04A4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B04A4h case   19:*/		return 0x821B04A8;
		  /* 821B04A8h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821B04A8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821B04C0;  }
		/* 821B04A8h case   20:*/		return 0x821B04AC;
		  /* 821B04ACh */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821B04ACh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B04ACh case   21:*/		return 0x821B04B0;
		  /* 821B04B0h */ case   22:  		/* rlwinm. R8, R10, 0, 4, 6 */
		/* 821B04B0h case   22:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R10);
		/* 821B04B0h case   22:*/		return 0x821B04B4;
		  /* 821B04B4h */ case   23:  		/* bc 12, CR0_EQ, 12 */
		/* 821B04B4h case   23:*/		if ( regs.CR[0].eq ) { return 0x821B04C0;  }
		/* 821B04B4h case   23:*/		return 0x821B04B8;
		  /* 821B04B8h */ case   24:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821B04B8h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821B04B8h case   24:*/		return 0x821B04BC;
		  /* 821B04BCh */ case   25:  		/* or R9, R10, R9 */
		/* 821B04BCh case   25:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821B04BCh case   25:*/		return 0x821B04C0;
	}
	return 0x821B04C0;
} // Block from 821B0458h-821B04C0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821B04C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B04C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B04C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B04C0);
		  /* 821B04C0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B04C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B04C0h case    0:*/		return 0x821B04C4;
		  /* 821B04C4h */ case    1:  		/* b -44 */
		/* 821B04C4h case    1:*/		return 0x821B0498;
		/* 821B04C4h case    1:*/		return 0x821B04C8;
	}
	return 0x821B04C8;
} // Block from 821B04C0h-821B04C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B04C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B04C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B04C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B04C8);
		  /* 821B04C8h */ case    0:  		/* stw R9, <#[R1 + 80]> */
		/* 821B04C8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821B04C8h case    0:*/		return 0x821B04CC;
	}
	return 0x821B04CC;
} // Block from 821B04C8h-821B04CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B04CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B04CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B04CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B04CC);
		  /* 821B04CCh */ case    0:  		/* li R5, 37 */
		/* 821B04CCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x25);
		/* 821B04CCh case    0:*/		return 0x821B04D0;
		  /* 821B04D0h */ case    1:  		/* li R4, 16 */
		/* 821B04D0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 821B04D0h case    1:*/		return 0x821B04D4;
		  /* 821B04D4h */ case    2:  		/* mr R3, R17 */
		/* 821B04D4h case    2:*/		regs.R3 = regs.R17;
		/* 821B04D4h case    2:*/		return 0x821B04D8;
		  /* 821B04D8h */ case    3:  		/* bl -310248 */
		/* 821B04D8h case    3:*/		regs.LR = 0x821B04DC; return 0x821648F0;
		/* 821B04D8h case    3:*/		return 0x821B04DC;
		  /* 821B04DCh */ case    4:  		/* mr R16, R3 */
		/* 821B04DCh case    4:*/		regs.R16 = regs.R3;
		/* 821B04DCh case    4:*/		return 0x821B04E0;
		  /* 821B04E0h */ case    5:  		/* bl -71712 */
		/* 821B04E0h case    5:*/		regs.LR = 0x821B04E4; return 0x8219ECC0;
		/* 821B04E0h case    5:*/		return 0x821B04E4;
		  /* 821B04E4h */ case    6:  		/* lwz R30, <#[R31 + 4]> */
		/* 821B04E4h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 821B04E4h case    6:*/		return 0x821B04E8;
		  /* 821B04E8h */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 821B04E8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B04E8h case    7:*/		return 0x821B04EC;
		  /* 821B04ECh */ case    8:  		/* bc 12, CR6_EQ, 536 */
		/* 821B04ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x821B0704;  }
		/* 821B04ECh case    8:*/		return 0x821B04F0;
		  /* 821B04F0h */ case    9:  		/* lwz R31, <#[R30 + 16]> */
		/* 821B04F0h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821B04F0h case    9:*/		return 0x821B04F4;
		  /* 821B04F4h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821B04F4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B04F4h case   10:*/		return 0x821B04F8;
		  /* 821B04F8h */ case   11:  		/* bc 12, CR6_EQ, 516 */
		/* 821B04F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821B06FC;  }
		/* 821B04F8h case   11:*/		return 0x821B04FC;
		  /* 821B04FCh */ case   12:  		/* cmplw CR6, R18, R31 */
		/* 821B04FCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R31);
		/* 821B04FCh case   12:*/		return 0x821B0500;
		  /* 821B0500h */ case   13:  		/* bc 12, CR6_EQ, 508 */
		/* 821B0500h case   13:*/		if ( regs.CR[6].eq ) { return 0x821B06FC;  }
		/* 821B0500h case   13:*/		return 0x821B0504;
		  /* 821B0504h */ case   14:  		/* lwz R11, <#[R18 + 28]> */
		/* 821B0504h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B0504h case   14:*/		return 0x821B0508;
		  /* 821B0508h */ case   15:  		/* lwz R10, <#[R31 + 28]> */
		/* 821B0508h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821B0508h case   15:*/		return 0x821B050C;
		  /* 821B050Ch */ case   16:  		/* cmpw CR6, R11, R10 */
		/* 821B050Ch case   16:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821B050Ch case   16:*/		return 0x821B0510;
		  /* 821B0510h */ case   17:  		/* bc 4, CR6_EQ, 492 */
		/* 821B0510h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821B06FC;  }
		/* 821B0510h case   17:*/		return 0x821B0514;
		  /* 821B0514h */ case   18:  		/* lwz R10, <#[R18 + 8]> */
		/* 821B0514h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 821B0514h case   18:*/		return 0x821B0518;
		  /* 821B0518h */ case   19:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0518h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0518h case   19:*/		return 0x821B051C;
		  /* 821B051Ch */ case   20:  		/* xor R10, R10, R11 */
		/* 821B051Ch case   20:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B051Ch case   20:*/		return 0x821B0520;
		  /* 821B0520h */ case   21:  		/* rlwinm. R10, R10, 0, 18, 24 */
		/* 821B0520h case   21:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821B0520h case   21:*/		return 0x821B0524;
		  /* 821B0524h */ case   22:  		/* bc 4, CR0_EQ, 472 */
		/* 821B0524h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821B06FC;  }
		/* 821B0524h case   22:*/		return 0x821B0528;
		  /* 821B0528h */ case   23:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0528h case   23:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0528h case   23:*/		return 0x821B052C;
		  /* 821B052Ch */ case   24:  		/* bc 12, CR0_EQ, 20 */
		/* 821B052Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x821B0540;  }
		/* 821B052Ch case   24:*/		return 0x821B0530;
		  /* 821B0530h */ case   25:  		/* mr R4, R31 */
		/* 821B0530h case   25:*/		regs.R4 = regs.R31;
		/* 821B0530h case   25:*/		return 0x821B0534;
		  /* 821B0534h */ case   26:  		/* lwz R5, <#[R17 + 660]> */
		/* 821B0534h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R17 + 0x00000294) );
		/* 821B0534h case   26:*/		return 0x821B0538;
		  /* 821B0538h */ case   27:  		/* mr R3, R17 */
		/* 821B0538h case   27:*/		regs.R3 = regs.R17;
		/* 821B0538h case   27:*/		return 0x821B053C;
		  /* 821B053Ch */ case   28:  		/* bl 51404 */
		/* 821B053Ch case   28:*/		regs.LR = 0x821B0540; return 0x821BCE08;
		/* 821B053Ch case   28:*/		return 0x821B0540;
	}
	return 0x821B0540;
} // Block from 821B04CCh-821B0540h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B0540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0540);
		  /* 821B0540h */ case    0:  		/* mr R4, R31 */
		/* 821B0540h case    0:*/		regs.R4 = regs.R31;
		/* 821B0540h case    0:*/		return 0x821B0544;
		  /* 821B0544h */ case    1:  		/* mr R3, R17 */
		/* 821B0544h case    1:*/		regs.R3 = regs.R17;
		/* 821B0544h case    1:*/		return 0x821B0548;
		  /* 821B0548h */ case    2:  		/* bl -80904 */
		/* 821B0548h case    2:*/		regs.LR = 0x821B054C; return 0x8219C940;
		/* 821B0548h case    2:*/		return 0x821B054C;
		  /* 821B054Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B054Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B054Ch case    3:*/		return 0x821B0550;
		  /* 821B0550h */ case    4:  		/* bc 4, CR0_EQ, 428 */
		/* 821B0550h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B06FC;  }
		/* 821B0550h case    4:*/		return 0x821B0554;
		  /* 821B0554h */ case    5:  		/* addi R6, R1, 128 */
		/* 821B0554h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 821B0554h case    5:*/		return 0x821B0558;
		  /* 821B0558h */ case    6:  		/* mr R5, R31 */
		/* 821B0558h case    6:*/		regs.R5 = regs.R31;
		/* 821B0558h case    6:*/		return 0x821B055C;
		  /* 821B055Ch */ case    7:  		/* mr R4, R18 */
		/* 821B055Ch case    7:*/		regs.R4 = regs.R18;
		/* 821B055Ch case    7:*/		return 0x821B0560;
		  /* 821B0560h */ case    8:  		/* mr R3, R17 */
		/* 821B0560h case    8:*/		regs.R3 = regs.R17;
		/* 821B0560h case    8:*/		return 0x821B0564;
		  /* 821B0564h */ case    9:  		/* bl -69724 */
		/* 821B0564h case    9:*/		regs.LR = 0x821B0568; return 0x8219F508;
		/* 821B0564h case    9:*/		return 0x821B0568;
		  /* 821B0568h */ case   10:  		/* cmplwi CR6, R3, 4 */
		/* 821B0568h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821B0568h case   10:*/		return 0x821B056C;
		  /* 821B056Ch */ case   11:  		/* bc 12, CR6_GT, 400 */
		/* 821B056Ch case   11:*/		if ( regs.CR[6].gt ) { return 0x821B06FC;  }
		/* 821B056Ch case   11:*/		return 0x821B0570;
		  /* 821B0570h */ case   12:  		/* cmplw CR6, R31, R14 */
		/* 821B0570h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R14);
		/* 821B0570h case   12:*/		return 0x821B0574;
		  /* 821B0574h */ case   13:  		/* bc 12, CR6_EQ, 392 */
		/* 821B0574h case   13:*/		if ( regs.CR[6].eq ) { return 0x821B06FC;  }
		/* 821B0574h case   13:*/		return 0x821B0578;
		  /* 821B0578h */ case   14:  		/* cmplw CR6, R31, R15 */
		/* 821B0578h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R15);
		/* 821B0578h case   14:*/		return 0x821B057C;
		  /* 821B057Ch */ case   15:  		/* bc 12, CR6_EQ, 384 */
		/* 821B057Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821B06FC;  }
		/* 821B057Ch case   15:*/		return 0x821B0580;
		  /* 821B0580h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0580h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0580h case   16:*/		return 0x821B0584;
		  /* 821B0584h */ case   17:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821B0584h case   17:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821B0584h case   17:*/		return 0x821B0588;
		  /* 821B0588h */ case   18:  		/* bc 12, CR0_EQ, 48 */
		/* 821B0588h case   18:*/		if ( regs.CR[0].eq ) { return 0x821B05B8;  }
		/* 821B0588h case   18:*/		return 0x821B058C;
		  /* 821B058Ch */ case   19:  		/* lwz R11, <#[R14 + 8]> */
		/* 821B058Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 821B058Ch case   19:*/		return 0x821B0590;
		  /* 821B0590h */ case   20:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821B0590h case   20:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821B0590h case   20:*/		return 0x821B0594;
		  /* 821B0594h */ case   21:  		/* bc 12, CR0_EQ, 36 */
		/* 821B0594h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B05B8;  }
		/* 821B0594h case   21:*/		return 0x821B0598;
		  /* 821B0598h */ case   22:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B0598h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0598h case   22:*/		return 0x821B059C;
		  /* 821B059Ch */ case   23:  		/* lwz R10, <#[R14 + 20]> */
		/* 821B059Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000014) );
		/* 821B059Ch case   23:*/		return 0x821B05A0;
		  /* 821B05A0h */ case   24:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 821B05A0h case   24:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 821B05A0h case   24:*/		return 0x821B05A4;
		  /* 821B05A4h */ case   25:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 821B05A4h case   25:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 821B05A4h case   25:*/		return 0x821B05A8;
		  /* 821B05A8h */ case   26:  		/* subfc R11, R11, R10 */
		/* 821B05A8h case   26:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B05A8h case   26:*/		return 0x821B05AC;
		  /* 821B05ACh */ case   27:  		/* subfe R11, R11, R11 */
		/* 821B05ACh case   27:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821B05ACh case   27:*/		return 0x821B05B0;
		  /* 821B05B0h */ case   28:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 821B05B0h case   28:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 821B05B0h case   28:*/		return 0x821B05B4;
		  /* 821B05B4h */ case   29:  		/* b 16 */
		/* 821B05B4h case   29:*/		return 0x821B05C4;
		/* 821B05B4h case   29:*/		return 0x821B05B8;
	}
	return 0x821B05B8;
} // Block from 821B0540h-821B05B8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821B05B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B05B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B05B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B05B8);
		  /* 821B05B8h */ case    0:  		/* mr R4, R14 */
		/* 821B05B8h case    0:*/		regs.R4 = regs.R14;
		/* 821B05B8h case    0:*/		return 0x821B05BC;
		  /* 821B05BCh */ case    1:  		/* mr R3, R31 */
		/* 821B05BCh case    1:*/		regs.R3 = regs.R31;
		/* 821B05BCh case    1:*/		return 0x821B05C0;
		  /* 821B05C0h */ case    2:  		/* bl 482048 */
		/* 821B05C0h case    2:*/		regs.LR = 0x821B05C4; return 0x822260C0;
		/* 821B05C0h case    2:*/		return 0x821B05C4;
	}
	return 0x821B05C4;
} // Block from 821B05B8h-821B05C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B05C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B05C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B05C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B05C4);
		  /* 821B05C4h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B05C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B05C4h case    0:*/		return 0x821B05C8;
		  /* 821B05C8h */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 821B05C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B0628;  }
		/* 821B05C8h case    1:*/		return 0x821B05CC;
		  /* 821B05CCh */ case    2:  		/* rlwinm R11, R14, 0, 0, 30 */
		/* 821B05CCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R14);
		/* 821B05CCh case    2:*/		return 0x821B05D0;
		  /* 821B05D0h */ case    3:  		/* b 64 */
		/* 821B05D0h case    3:*/		return 0x821B0610;
		/* 821B05D0h case    3:*/		return 0x821B05D4;
		  /* 821B05D4h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821B05D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B05D4h case    4:*/		return 0x821B05D8;
		  /* 821B05D8h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821B05D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B05D8h case    5:*/		return 0x821B05DC;
		  /* 821B05DCh */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 821B05DCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821B0604;  }
		/* 821B05DCh case    6:*/		return 0x821B05E0;
		  /* 821B05E0h */ case    7:  		/* lwz R9, <#[R10 + 12]> */
		/* 821B05E0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821B05E0h case    7:*/		return 0x821B05E4;
		  /* 821B05E4h */ case    8:  		/* lwz R9, <#[R9 + 20]> */
		/* 821B05E4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 821B05E4h case    8:*/		return 0x821B05E8;
		  /* 821B05E8h */ case    9:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821B05E8h case    9:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821B05E8h case    9:*/		return 0x821B05EC;
		  /* 821B05ECh */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 821B05ECh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B05F8;  }
		/* 821B05ECh case   10:*/		return 0x821B05F0;
		  /* 821B05F0h */ case   11:  		/* lwz R10, <#[R10 + 4]> */
		/* 821B05F0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821B05F0h case   11:*/		return 0x821B05F4;
		  /* 821B05F4h */ case   12:  		/* b -28 */
		/* 821B05F4h case   12:*/		return 0x821B05D8;
		/* 821B05F4h case   12:*/		return 0x821B05F8;
	}
	return 0x821B05F8;
} // Block from 821B05C4h-821B05F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B05F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B05F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B05F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B05F8);
		  /* 821B05F8h */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 821B05F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B05F8h case    0:*/		return 0x821B05FC;
		  /* 821B05FCh */ case    1:  		/* ori R10, R10, 4 */
		/* 821B05FCh case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821B05FCh case    1:*/		return 0x821B0600;
		  /* 821B0600h */ case    2:  		/* stw R10, <#[R11 + 20]> */
		/* 821B0600h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B0600h case    2:*/		return 0x821B0604;
	}
	return 0x821B0604;
} // Block from 821B05F8h-821B0604h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0604);
		  /* 821B0604h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821B0604h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821B0604h case    0:*/		return 0x821B0608;
		  /* 821B0608h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821B0608h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B0624;  }
		/* 821B0608h case    1:*/		return 0x821B060C;
		  /* 821B060Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B060Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B060Ch case    2:*/		return 0x821B0610;
	}
	return 0x821B0610;
} // Block from 821B0604h-821B0610h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0610);
		  /* 821B0610h */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B0610h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B0610h case    0:*/		return 0x821B0614;
		  /* 821B0614h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B0614h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B0614h case    1:*/		return 0x821B0618;
		  /* 821B0618h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0618h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B0624;  }
		/* 821B0618h case    2:*/		return 0x821B061C;
		  /* 821B061Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B061Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B061Ch case    3:*/		return 0x821B0620;
		  /* 821B0620h */ case    4:  		/* bc 4, CR6_EQ, -76 */
		/* 821B0620h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821B05D4;  }
		/* 821B0620h case    4:*/		return 0x821B0624;
	}
	return 0x821B0624;
} // Block from 821B0610h-821B0624h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B0624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0624);
		  /* 821B0624h */ case    0:  		/* mr R14, R31 */
		/* 821B0624h case    0:*/		regs.R14 = regs.R31;
		/* 821B0624h case    0:*/		return 0x821B0628;
	}
	return 0x821B0628;
} // Block from 821B0624h-821B0628h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B0628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0628);
		  /* 821B0628h */ case    0:  		/* lwz R11, <#[R15 + 8]> */
		/* 821B0628h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821B0628h case    0:*/		return 0x821B062C;
		  /* 821B062Ch */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821B062Ch case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821B062Ch case    1:*/		return 0x821B0630;
		  /* 821B0630h */ case    2:  		/* bc 12, CR0_EQ, 48 */
		/* 821B0630h case    2:*/		if ( regs.CR[0].eq ) { return 0x821B0660;  }
		/* 821B0630h case    2:*/		return 0x821B0634;
		  /* 821B0634h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0634h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0634h case    3:*/		return 0x821B0638;
	}
	return 0x821B0638;
} // Block from 821B0628h-821B0638h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0638h
// Function '?PrepareToVectorizeInstr@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0638);
		  /* 821B0638h */ case    0:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821B0638h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821B0638h case    0:*/		return 0x821B063C;
		  /* 821B063Ch */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821B063Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821B0660;  }
		/* 821B063Ch case    1:*/		return 0x821B0640;
		  /* 821B0640h */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B0640h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0640h case    2:*/		return 0x821B0644;
		  /* 821B0644h */ case    3:  		/* lwz R10, <#[R15 + 20]> */
		/* 821B0644h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000014) );
		/* 821B0644h case    3:*/		return 0x821B0648;
		  /* 821B0648h */ case    4:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 821B0648h case    4:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 821B0648h case    4:*/		return 0x821B064C;
		  /* 821B064Ch */ case    5:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 821B064Ch case    5:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 821B064Ch case    5:*/		return 0x821B0650;
		  /* 821B0650h */ case    6:  		/* subfc R11, R10, R11 */
		/* 821B0650h case    6:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B0650h case    6:*/		return 0x821B0654;
		  /* 821B0654h */ case    7:  		/* subfe R11, R11, R11 */
		/* 821B0654h case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821B0654h case    7:*/		return 0x821B0658;
		  /* 821B0658h */ case    8:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 821B0658h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 821B0658h case    8:*/		return 0x821B065C;
		  /* 821B065Ch */ case    9:  		/* b 16 */
		/* 821B065Ch case    9:*/		return 0x821B066C;
		/* 821B065Ch case    9:*/		return 0x821B0660;
	}
	return 0x821B0660;
} // Block from 821B0638h-821B0660h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0660);
		  /* 821B0660h */ case    0:  		/* mr R4, R31 */
		/* 821B0660h case    0:*/		regs.R4 = regs.R31;
		/* 821B0660h case    0:*/		return 0x821B0664;
		  /* 821B0664h */ case    1:  		/* mr R3, R15 */
		/* 821B0664h case    1:*/		regs.R3 = regs.R15;
		/* 821B0664h case    1:*/		return 0x821B0668;
		  /* 821B0668h */ case    2:  		/* bl 481880 */
		/* 821B0668h case    2:*/		regs.LR = 0x821B066C; return 0x822260C0;
		/* 821B0668h case    2:*/		return 0x821B066C;
	}
	return 0x821B066C;
} // Block from 821B0660h-821B066Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B066Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B066C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B066C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B066C);
		  /* 821B066Ch */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B066Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B066Ch case    0:*/		return 0x821B0670;
		  /* 821B0670h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 821B0670h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B06DC;  }
		/* 821B0670h case    1:*/		return 0x821B0674;
		  /* 821B0674h */ case    2:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 821B0674h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 821B0674h case    2:*/		return 0x821B0678;
		  /* 821B0678h */ case    3:  		/* b 72 */
		/* 821B0678h case    3:*/		return 0x821B06C0;
		/* 821B0678h case    3:*/		return 0x821B067C;
		  /* 821B067Ch */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B067Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B067Ch case    4:*/		return 0x821B0680;
		  /* 821B0680h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821B0680h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B0680h case    5:*/		return 0x821B0684;
		  /* 821B0684h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821B0684h case    6:*/		if ( regs.CR[6].eq ) { return 0x821B06B4;  }
		/* 821B0684h case    6:*/		return 0x821B0688;
		  /* 821B0688h */ case    7:  		/* lwz R9, <#[R10 + 16]> */
		/* 821B0688h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 821B0688h case    7:*/		return 0x821B068C;
		  /* 821B068Ch */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 821B068Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821B068Ch case    8:*/		return 0x821B0690;
		  /* 821B0690h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 821B0690h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B06A0;  }
		/* 821B0690h case    9:*/		return 0x821B0694;
		  /* 821B0694h */ case   10:  		/* lwz R9, <#[R9 + 20]> */
		/* 821B0694h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 821B0694h case   10:*/		return 0x821B0698;
		  /* 821B0698h */ case   11:  		/* rlwinm. R9, R9, 0, 30, 30 */
		/* 821B0698h case   11:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R9);
		/* 821B0698h case   11:*/		return 0x821B069C;
		  /* 821B069Ch */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821B069Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B06A8;  }
		/* 821B069Ch case   12:*/		return 0x821B06A0;
	}
	return 0x821B06A0;
} // Block from 821B066Ch-821B06A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B06A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06A0);
		  /* 821B06A0h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B06A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B06A0h case    0:*/		return 0x821B06A4;
		  /* 821B06A4h */ case    1:  		/* b -36 */
		/* 821B06A4h case    1:*/		return 0x821B0680;
		/* 821B06A4h case    1:*/		return 0x821B06A8;
	}
	return 0x821B06A8;
} // Block from 821B06A0h-821B06A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B06A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06A8);
		  /* 821B06A8h */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 821B06A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B06A8h case    0:*/		return 0x821B06AC;
		  /* 821B06ACh */ case    1:  		/* ori R10, R10, 2 */
		/* 821B06ACh case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821B06ACh case    1:*/		return 0x821B06B0;
		  /* 821B06B0h */ case    2:  		/* stw R10, <#[R11 + 20]> */
		/* 821B06B0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B06B0h case    2:*/		return 0x821B06B4;
	}
	return 0x821B06B4;
} // Block from 821B06A8h-821B06B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B06B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06B4);
		  /* 821B06B4h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821B06B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821B06B4h case    0:*/		return 0x821B06B8;
		  /* 821B06B8h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821B06B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B06D8;  }
		/* 821B06B8h case    1:*/		return 0x821B06BC;
		  /* 821B06BCh */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B06BCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B06BCh case    2:*/		return 0x821B06C0;
	}
	return 0x821B06C0;
} // Block from 821B06B4h-821B06C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B06C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06C0);
		  /* 821B06C0h */ case    0:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B06C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B06C0h case    0:*/		return 0x821B06C4;
		  /* 821B06C4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B06C4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B06C4h case    1:*/		return 0x821B06C8;
		  /* 821B06C8h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821B06C8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B06D8;  }
		/* 821B06C8h case    2:*/		return 0x821B06CC;
		  /* 821B06CCh */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B06CCh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B06CCh case    3:*/		return 0x821B06D0;
		  /* 821B06D0h */ case    4:  		/* addic. R11, R11, -40 */
		/* 821B06D0h case    4:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821B06D0h case    4:*/		return 0x821B06D4;
		  /* 821B06D4h */ case    5:  		/* bc 4, CR0_EQ, -88 */
		/* 821B06D4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B067C;  }
		/* 821B06D4h case    5:*/		return 0x821B06D8;
	}
	return 0x821B06D8;
} // Block from 821B06C0h-821B06D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B06D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06D8);
		  /* 821B06D8h */ case    0:  		/* mr R15, R31 */
		/* 821B06D8h case    0:*/		regs.R15 = regs.R31;
		/* 821B06D8h case    0:*/		return 0x821B06DC;
	}
	return 0x821B06DC;
} // Block from 821B06D8h-821B06DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B06DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06DC);
		  /* 821B06DCh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B06DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B06DCh case    0:*/		return 0x821B06E0;
		  /* 821B06E0h */ case    1:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 821B06E0h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 821B06E0h case    1:*/		return 0x821B06E4;
		  /* 821B06E4h */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 821B06E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B06FC;  }
		/* 821B06E4h case    2:*/		return 0x821B06E8;
		  /* 821B06E8h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821B06E8h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821B06E8h case    3:*/		return 0x821B06EC;
		  /* 821B06ECh */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821B06ECh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B06FC;  }
		/* 821B06ECh case    4:*/		return 0x821B06F0;
		  /* 821B06F0h */ case    5:  		/* mr R4, R31 */
		/* 821B06F0h case    5:*/		regs.R4 = regs.R31;
		/* 821B06F0h case    5:*/		return 0x821B06F4;
		  /* 821B06F4h */ case    6:  		/* mr R3, R16 */
		/* 821B06F4h case    6:*/		regs.R3 = regs.R16;
		/* 821B06F4h case    6:*/		return 0x821B06F8;
		  /* 821B06F8h */ case    7:  		/* bl -72120 */
		/* 821B06F8h case    7:*/		regs.LR = 0x821B06FC; return 0x8219ED40;
		/* 821B06F8h case    7:*/		return 0x821B06FC;
	}
	return 0x821B06FC;
} // Block from 821B06DCh-821B06FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B06FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B06FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B06FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B06FC);
		  /* 821B06FCh */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821B06FCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821B06FCh case    0:*/		return 0x821B0700;
		  /* 821B0700h */ case    1:  		/* b -536 */
		/* 821B0700h case    1:*/		return 0x821B04E8;
		/* 821B0700h case    1:*/		return 0x821B0704;
	}
	return 0x821B0704;
} // Block from 821B06FCh-821B0704h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0704);
		  /* 821B0704h */ case    0:  		/* li R19, -1 */
		/* 821B0704h case    0:*/		cpu::op::li<0>(regs,&regs.R19,0xFFFFFFFF);
		/* 821B0704h case    0:*/		return 0x821B0708;
		  /* 821B0708h */ case    1:  		/* li R20, 0 */
		/* 821B0708h case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821B0708h case    1:*/		return 0x821B070C;
		  /* 821B070Ch */ case    2:  		/* li R21, 10 */
		/* 821B070Ch case    2:*/		cpu::op::li<0>(regs,&regs.R21,0xA);
		/* 821B070Ch case    2:*/		return 0x821B0710;
		  /* 821B0710h */ case    3:  		/* li R24, 0 */
		/* 821B0710h case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821B0710h case    3:*/		return 0x821B0714;
		  /* 821B0714h */ case    4:  		/* li R25, 0 */
		/* 821B0714h case    4:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821B0714h case    4:*/		return 0x821B0718;
		  /* 821B0718h */ case    5:  		/* mr R23, R19 */
		/* 821B0718h case    5:*/		regs.R23 = regs.R19;
		/* 821B0718h case    5:*/		return 0x821B071C;
		  /* 821B071Ch */ case    6:  		/* li R22, 0 */
		/* 821B071Ch case    6:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821B071Ch case    6:*/		return 0x821B0720;
		  /* 821B0720h */ case    7:  		/* b 684 */
		/* 821B0720h case    7:*/		return 0x821B09CC;
		/* 821B0720h case    7:*/		return 0x821B0724;
		  /* 821B0724h */ case    8:  		/* mr R3, R16 */
		/* 821B0724h case    8:*/		regs.R3 = regs.R16;
		/* 821B0724h case    8:*/		return 0x821B0728;
		  /* 821B0728h */ case    9:  		/* bl -76472 */
		/* 821B0728h case    9:*/		regs.LR = 0x821B072C; return 0x8219DC70;
		/* 821B0728h case    9:*/		return 0x821B072C;
		  /* 821B072Ch */ case   10:  		/* mr R28, R3 */
		/* 821B072Ch case   10:*/		regs.R28 = regs.R3;
		/* 821B072Ch case   10:*/		return 0x821B0730;
		  /* 821B0730h */ case   11:  		/* mr R5, R3 */
		/* 821B0730h case   11:*/		regs.R5 = regs.R3;
		/* 821B0730h case   11:*/		return 0x821B0734;
		  /* 821B0734h */ case   12:  		/* addi R6, R1, 112 */
		/* 821B0734h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 821B0734h case   12:*/		return 0x821B0738;
		  /* 821B0738h */ case   13:  		/* mr R4, R18 */
		/* 821B0738h case   13:*/		regs.R4 = regs.R18;
		/* 821B0738h case   13:*/		return 0x821B073C;
		  /* 821B073Ch */ case   14:  		/* mr R3, R17 */
		/* 821B073Ch case   14:*/		regs.R3 = regs.R17;
		/* 821B073Ch case   14:*/		return 0x821B0740;
		  /* 821B0740h */ case   15:  		/* bl -70200 */
		/* 821B0740h case   15:*/		regs.LR = 0x821B0744; return 0x8219F508;
		/* 821B0740h case   15:*/		return 0x821B0744;
		  /* 821B0744h */ case   16:  		/* mr R26, R3 */
		/* 821B0744h case   16:*/		regs.R26 = regs.R3;
		/* 821B0744h case   16:*/		return 0x821B0748;
		  /* 821B0748h */ case   17:  		/* addi R7, R1, 112 */
		/* 821B0748h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 821B0748h case   17:*/		return 0x821B074C;
		  /* 821B074Ch */ case   18:  		/* addi R6, R1, 88 */
		/* 821B074Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821B074Ch case   18:*/		return 0x821B0750;
		  /* 821B0750h */ case   19:  		/* mr R5, R28 */
		/* 821B0750h case   19:*/		regs.R5 = regs.R28;
		/* 821B0750h case   19:*/		return 0x821B0754;
		  /* 821B0754h */ case   20:  		/* mr R4, R18 */
		/* 821B0754h case   20:*/		regs.R4 = regs.R18;
		/* 821B0754h case   20:*/		return 0x821B0758;
		  /* 821B0758h */ case   21:  		/* mr R3, R17 */
		/* 821B0758h case   21:*/		regs.R3 = regs.R17;
		/* 821B0758h case   21:*/		return 0x821B075C;
		  /* 821B075Ch */ case   22:  		/* bl -1036 */
		/* 821B075Ch case   22:*/		regs.LR = 0x821B0760; return 0x821B0350;
		/* 821B075Ch case   22:*/		return 0x821B0760;
		  /* 821B0760h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 821B0760h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821B0760h case   23:*/		return 0x821B0764;
		  /* 821B0764h */ case   24:  		/* bc 4, CR0_EQ, 616 */
		/* 821B0764h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B09CC;  }
		/* 821B0764h case   24:*/		return 0x821B0768;
		  /* 821B0768h */ case   25:  		/* lwz R11, <#[R1 + 84]> */
		/* 821B0768h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821B0768h case   25:*/		return 0x821B076C;
		  /* 821B076Ch */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 821B076Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B076Ch case   26:*/		return 0x821B0770;
		  /* 821B0770h */ case   27:  		/* bc 12, CR6_EQ, 92 */
		/* 821B0770h case   27:*/		if ( regs.CR[6].eq ) { return 0x821B07CC;  }
		/* 821B0770h case   27:*/		return 0x821B0774;
		  /* 821B0774h */ case   28:  		/* lwz R11, <#[R28 + 4]> */
		/* 821B0774h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821B0774h case   28:*/		return 0x821B0778;
		  /* 821B0778h */ case   29:  		/* li R9, 0 */
		/* 821B0778h case   29:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B0778h case   29:*/		return 0x821B077C;
		  /* 821B077Ch */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821B077Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B077Ch case   30:*/		return 0x821B0780;
		  /* 821B0780h */ case   31:  		/* bc 12, CR6_EQ, 44 */
		/* 821B0780h case   31:*/		if ( regs.CR[6].eq ) { return 0x821B07AC;  }
		/* 821B0780h case   31:*/		return 0x821B0784;
		  /* 821B0784h */ case   32:  		/* lwz R10, <#[R11 + 16]> */
		/* 821B0784h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821B0784h case   32:*/		return 0x821B0788;
		  /* 821B0788h */ case   33:  		/* cmplwi CR6, R10, 0 */
		/* 821B0788h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B0788h case   33:*/		return 0x821B078C;
		  /* 821B078Ch */ case   34:  		/* bc 12, CR6_EQ, 24 */
		/* 821B078Ch case   34:*/		if ( regs.CR[6].eq ) { return 0x821B07A4;  }
		/* 821B078Ch case   34:*/		return 0x821B0790;
		  /* 821B0790h */ case   35:  		/* lwz R10, <#[R11]> */
		/* 821B0790h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0790h case   35:*/		return 0x821B0794;
		  /* 821B0794h */ case   36:  		/* rlwinm. R8, R10, 0, 4, 6 */
		/* 821B0794h case   36:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R10);
		/* 821B0794h case   36:*/		return 0x821B0798;
		  /* 821B0798h */ case   37:  		/* bc 12, CR0_EQ, 12 */
		/* 821B0798h case   37:*/		if ( regs.CR[0].eq ) { return 0x821B07A4;  }
		/* 821B0798h case   37:*/		return 0x821B079C;
		  /* 821B079Ch */ case   38:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821B079Ch case   38:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821B079Ch case   38:*/		return 0x821B07A0;
		  /* 821B07A0h */ case   39:  		/* or R9, R10, R9 */
		/* 821B07A0h case   39:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821B07A0h case   39:*/		return 0x821B07A4;
	}
	return 0x821B07A4;
} // Block from 821B0704h-821B07A4h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821B07A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B07A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B07A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B07A4);
		  /* 821B07A4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B07A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B07A4h case    0:*/		return 0x821B07A8;
		  /* 821B07A8h */ case    1:  		/* b -44 */
		/* 821B07A8h case    1:*/		return 0x821B077C;
		/* 821B07A8h case    1:*/		return 0x821B07AC;
	}
	return 0x821B07AC;
} // Block from 821B07A4h-821B07ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B07ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B07AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B07AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B07AC);
		  /* 821B07ACh */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821B07ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821B07ACh case    0:*/		return 0x821B07B0;
		  /* 821B07B0h */ case    1:  		/* xor R11, R9, R11 */
		/* 821B07B0h case    1:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821B07B0h case    1:*/		return 0x821B07B4;
		  /* 821B07B4h */ case    2:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821B07B4h case    2:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821B07B4h case    2:*/		return 0x821B07B8;
		  /* 821B07B8h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 821B07B8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B07CC;  }
		/* 821B07B8h case    3:*/		return 0x821B07BC;
		  /* 821B07BCh */ case    4:  		/* lwz R11, <#[R1 + 380]> */
		/* 821B07BCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000017C) );
		/* 821B07BCh case    4:*/		return 0x821B07C0;
		  /* 821B07C0h */ case    5:  		/* li R10, 1 */
		/* 821B07C0h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B07C0h case    5:*/		return 0x821B07C4;
		  /* 821B07C4h */ case    6:  		/* stb R10, <#[R11]> */
		/* 821B07C4h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B07C4h case    6:*/		return 0x821B07C8;
		  /* 821B07C8h */ case    7:  		/* b 516 */
		/* 821B07C8h case    7:*/		return 0x821B09CC;
		/* 821B07C8h case    7:*/		return 0x821B07CC;
	}
	return 0x821B07CC;
} // Block from 821B07ACh-821B07CCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B07CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B07CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B07CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B07CC);
		  /* 821B07CCh */ case    0:  		/* lwz R27, <#[R1 + 88]> */
		/* 821B07CCh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821B07CCh case    0:*/		return 0x821B07D0;
		  /* 821B07D0h */ case    1:  		/* mr R4, R18 */
		/* 821B07D0h case    1:*/		regs.R4 = regs.R18;
		/* 821B07D0h case    1:*/		return 0x821B07D4;
		  /* 821B07D4h */ case    2:  		/* mr R3, R17 */
		/* 821B07D4h case    2:*/		regs.R3 = regs.R17;
		/* 821B07D4h case    2:*/		return 0x821B07D8;
		  /* 821B07D8h */ case    3:  		/* cmplwi CR6, R27, 10 */
		/* 821B07D8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x0000000A);
		/* 821B07D8h case    3:*/		return 0x821B07DC;
		  /* 821B07DCh */ case    4:  		/* bc 4, CR6_LT, 488 */
		/* 821B07DCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x821B09C4;  }
		/* 821B07DCh case    4:*/		return 0x821B07E0;
		  /* 821B07E0h */ case    5:  		/* mr R5, R28 */
		/* 821B07E0h case    5:*/		regs.R5 = regs.R28;
		/* 821B07E0h case    5:*/		return 0x821B07E4;
		  /* 821B07E4h */ case    6:  		/* bl -85036 */
		/* 821B07E4h case    6:*/		regs.LR = 0x821B07E8; return 0x8219BBB8;
		/* 821B07E4h case    6:*/		return 0x821B07E8;
		  /* 821B07E8h */ case    7:  		/* or. R29, R3, R3 */
		/* 821B07E8h case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821B07E8h case    7:*/		return 0x821B07EC;
		  /* 821B07ECh */ case    8:  		/* bc 4, CR0_EQ, 32 */
		/* 821B07ECh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B080C;  }
		/* 821B07ECh case    8:*/		return 0x821B07F0;
		  /* 821B07F0h */ case    9:  		/* lwz R11, <#[R18 + 8]> */
		/* 821B07F0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821B07F0h case    9:*/		return 0x821B07F4;
		  /* 821B07F4h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B07F4h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B07F4h case   10:*/		return 0x821B07F8;
		  /* 821B07F8h */ case   11:  		/* cmplwi CR6, R11, 256 */
		/* 821B07F8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B07F8h case   11:*/		return 0x821B07FC;
		  /* 821B07FCh */ case   12:  		/* bc 4, CR6_EQ, 324 */
		/* 821B07FCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821B0940;  }
		/* 821B07FCh case   12:*/		return 0x821B0800;
		  /* 821B0800h */ case   13:  		/* mr R3, R17 */
		/* 821B0800h case   13:*/		regs.R3 = regs.R17;
		/* 821B0800h case   13:*/		return 0x821B0804;
		  /* 821B0804h */ case   14:  		/* bl -86324 */
		/* 821B0804h case   14:*/		regs.LR = 0x821B0808; return 0x8219B6D0;
		/* 821B0804h case   14:*/		return 0x821B0808;
		  /* 821B0808h */ case   15:  		/* mr R29, R3 */
		/* 821B0808h case   15:*/		regs.R29 = regs.R3;
		/* 821B0808h case   15:*/		return 0x821B080C;
	}
	return 0x821B080C;
} // Block from 821B07CCh-821B080Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B080Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B080C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B080C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B080C);
		  /* 821B080Ch */ case    0:  		/* lwz R11, <#[R1 + 364]> */
		/* 821B080Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000016C) );
		/* 821B080Ch case    0:*/		return 0x821B0810;
		  /* 821B0810h */ case    1:  		/* mr R9, R19 */
		/* 821B0810h case    1:*/		regs.R9 = regs.R19;
		/* 821B0810h case    1:*/		return 0x821B0814;
		  /* 821B0814h */ case    2:  		/* lwz R4, <#[R1 + 120]> */
		/* 821B0814h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821B0814h case    2:*/		return 0x821B0818;
		  /* 821B0818h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B0818h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0818h case    3:*/		return 0x821B081C;
		  /* 821B081Ch */ case    4:  		/* bc 12, CR6_EQ, 180 */
		/* 821B081Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821B08D0;  }
		/* 821B081Ch case    4:*/		return 0x821B0820;
		  /* 821B0820h */ case    5:  		/* lwz R5, <#[R1 + 356]> */
		/* 821B0820h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000164) );
		/* 821B0820h case    5:*/		return 0x821B0824;
		  /* 821B0824h */ case    6:  		/* li R8, 0 */
		/* 821B0824h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B0824h case    6:*/		return 0x821B0828;
		  /* 821B0828h */ case    7:  		/* mtspr CTR, R11 */
		/* 821B0828h case    7:*/		regs.CTR = regs.R11;
		/* 821B0828h case    7:*/		return 0x821B082C;
		  /* 821B082Ch */ case    8:  		/* lwz R11, <#[R5]> */
		/* 821B082Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821B082Ch case    8:*/		return 0x821B0830;
		  /* 821B0830h */ case    9:  		/* cmplw CR6, R11, R28 */
		/* 821B0830h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821B0830h case    9:*/		return 0x821B0834;
		  /* 821B0834h */ case   10:  		/* bc 4, CR6_EQ, 144 */
		/* 821B0834h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821B08C4;  }
		/* 821B0834h case   10:*/		return 0x821B0838;
		  /* 821B0838h */ case   11:  		/* lwz R9, <#[R5 + 20]> */
		/* 821B0838h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000014) );
		/* 821B0838h case   11:*/		return 0x821B083C;
		  /* 821B083Ch */ case   12:  		/* rlwinm. R6, R4, 0, 27, 31 */
		/* 821B083Ch case   12:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R6,regs.R4);
		/* 821B083Ch case   12:*/		return 0x821B0840;
		  /* 821B0840h */ case   13:  		/* li R7, 0 */
		/* 821B0840h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B0840h case   13:*/		return 0x821B0844;
		  /* 821B0844h */ case   14:  		/* bc 12, CR0_EQ, 128 */
		/* 821B0844h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B08C4;  }
		/* 821B0844h case   14:*/		return 0x821B0848;
		  /* 821B0848h */ case   15:  		/* li R11, 0 */
		/* 821B0848h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B0848h case   15:*/		return 0x821B084C;
		  /* 821B084Ch */ case   16:  		/* addi R10, R11, 3 */
		/* 821B084Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B084Ch case   16:*/		return 0x821B0850;
		  /* 821B0850h */ case   17:  		/* std R7, <#[R1 + 96]> */
		/* 821B0850h case   17:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000060) );
		/* 821B0850h case   17:*/		return 0x821B0854;
		  /* 821B0854h */ case   18:  		/* li R31, 2 */
		/* 821B0854h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x2);
		/* 821B0854h case   18:*/		return 0x821B0858;
		  /* 821B0858h */ case   19:  		/* lwz R3, <#[R1 + 356]> */
		/* 821B0858h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000164) );
		/* 821B0858h case   19:*/		return 0x821B085C;
		  /* 821B085Ch */ case   20:  		/* rldicl R10, R10, 0, 58 */
		/* 821B085Ch case   20:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R10);
		/* 821B085Ch case   20:*/		return 0x821B0860;
		  /* 821B0860h */ case   21:  		/* rlwinm R30, R11, 29, 3, 28 */
		/* 821B0860h case   21:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R30,regs.R11);
		/* 821B0860h case   21:*/		return 0x821B0864;
		  /* 821B0864h */ case   22:  		/* addi R7, R1, 112 */
		/* 821B0864h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 821B0864h case   22:*/		return 0x821B0868;
		  /* 821B0868h */ case   23:  		/* sld R10, R31, R10 */
		/* 821B0868h case   23:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R31,regs.R10);
		/* 821B0868h case   23:*/		return 0x821B086C;
		  /* 821B086Ch */ case   24:  		/* ldx R31, <#[R30 + R7]> */
		/* 821B086Ch case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R30 + regs.R7 + 0x00000000) );
		/* 821B086Ch case   24:*/		return 0x821B0870;
		  /* 821B0870h */ case   25:  		/* addi R10, R10, -1 */
		/* 821B0870h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B0870h case   25:*/		return 0x821B0874;
		  /* 821B0874h */ case   26:  		/* rldicl R30, R11, 0, 58 */
		/* 821B0874h case   26:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R30,regs.R11);
		/* 821B0874h case   26:*/		return 0x821B0878;
		  /* 821B0878h */ case   27:  		/* li R7, -1 */
		/* 821B0878h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 821B0878h case   27:*/		return 0x821B087C;
		  /* 821B087Ch */ case   28:  		/* and R10, R10, R31 */
		/* 821B087Ch case   28:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821B087Ch case   28:*/		return 0x821B0880;
		  /* 821B0880h */ case   29:  		/* sld R31, R7, R30 */
		/* 821B0880h case   29:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R7,regs.R30);
		/* 821B0880h case   29:*/		return 0x821B0884;
		  /* 821B0884h */ case   30:  		/* ld R7, <#[R1 + 96]> */
		/* 821B0884h case   30:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000060) );
		/* 821B0884h case   30:*/		return 0x821B0888;
		  /* 821B0888h */ case   31:  		/* and R10, R10, R31 */
		/* 821B0888h case   31:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821B0888h case   31:*/		return 0x821B088C;
		  /* 821B088Ch */ case   32:  		/* srd R10, R10, R30 */
		/* 821B088Ch case   32:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821B088Ch case   32:*/		return 0x821B0890;
		  /* 821B0890h */ case   33:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821B0890h case   33:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821B0890h case   33:*/		return 0x821B0894;
		  /* 821B0894h */ case   34:  		/* add R10, R10, R8 */
		/* 821B0894h case   34:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821B0894h case   34:*/		return 0x821B0898;
		  /* 821B0898h */ case   35:  		/* addi R10, R10, 1 */
		/* 821B0898h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B0898h case   35:*/		return 0x821B089C;
		  /* 821B089Ch */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B089Ch case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B089Ch case   36:*/		return 0x821B08A0;
		  /* 821B08A0h */ case   37:  		/* lwzx R10, <#[R10 + R3]> */
		/* 821B08A0h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 821B08A0h case   37:*/		return 0x821B08A4;
		  /* 821B08A4h */ case   38:  		/* addi R10, R10, -1 */
		/* 821B08A4h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B08A4h case   38:*/		return 0x821B08A8;
		  /* 821B08A8h */ case   39:  		/* cmplw CR6, R10, R9 */
		/* 821B08A8h case   39:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B08A8h case   39:*/		return 0x821B08AC;
		  /* 821B08ACh */ case   40:  		/* bc 4, CR6_LT, 8 */
		/* 821B08ACh case   40:*/		if ( !regs.CR[6].lt ) { return 0x821B08B4;  }
		/* 821B08ACh case   40:*/		return 0x821B08B0;
		  /* 821B08B0h */ case   41:  		/* mr R9, R10 */
		/* 821B08B0h case   41:*/		regs.R9 = regs.R10;
		/* 821B08B0h case   41:*/		return 0x821B08B4;
	}
	return 0x821B08B4;
} // Block from 821B080Ch-821B08B4h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821B08B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B08B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B08B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B08B4);
		  /* 821B08B4h */ case    0:  		/* addi R7, R7, 1 */
		/* 821B08B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821B08B4h case    0:*/		return 0x821B08B8;
		  /* 821B08B8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821B08B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B08B8h case    1:*/		return 0x821B08BC;
		  /* 821B08BCh */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 821B08BCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821B08BCh case    2:*/		return 0x821B08C0;
		  /* 821B08C0h */ case    3:  		/* bc 12, CR6_LT, -116 */
		/* 821B08C0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821B084C;  }
		/* 821B08C0h case    3:*/		return 0x821B08C4;
	}
	return 0x821B08C4;
} // Block from 821B08B4h-821B08C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B08C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B08C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B08C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B08C4);
		  /* 821B08C4h */ case    0:  		/* addi R5, R5, 28 */
		/* 821B08C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1C);
		/* 821B08C4h case    0:*/		return 0x821B08C8;
		  /* 821B08C8h */ case    1:  		/* addi R8, R8, 7 */
		/* 821B08C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x7);
		/* 821B08C8h case    1:*/		return 0x821B08CC;
		  /* 821B08CCh */ case    2:  		/* bc 16, CR0_LT, -160 */
		/* 821B08CCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821B082C;  }
		/* 821B08CCh case    2:*/		return 0x821B08D0;
	}
	return 0x821B08D0;
} // Block from 821B08C4h-821B08D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B08D0h
// Function '?PrepareToVectorizeInstr2@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B08D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B08D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B08D0);
		  /* 821B08D0h */ case    0:  		/* cmplw CR6, R29, R22 */
		/* 821B08D0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R22);
		/* 821B08D0h case    0:*/		return 0x821B08D4;
		  /* 821B08D4h */ case    1:  		/* bc 12, CR6_GT, 56 */
		/* 821B08D4h case    1:*/		if ( regs.CR[6].gt ) { return 0x821B090C;  }
		/* 821B08D4h case    1:*/		return 0x821B08D8;
		  /* 821B08D8h */ case    2:  		/* bc 4, CR6_EQ, 244 */
		/* 821B08D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B09CC;  }
		/* 821B08D8h case    2:*/		return 0x821B08DC;
		  /* 821B08DCh */ case    3:  		/* cmplw CR6, R9, R23 */
		/* 821B08DCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 821B08DCh case    3:*/		return 0x821B08E0;
		  /* 821B08E0h */ case    4:  		/* bc 12, CR6_LT, 44 */
		/* 821B08E0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821B090C;  }
		/* 821B08E0h case    4:*/		return 0x821B08E4;
		  /* 821B08E4h */ case    5:  		/* bc 4, CR6_EQ, 232 */
		/* 821B08E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B09CC;  }
		/* 821B08E4h case    5:*/		return 0x821B08E8;
		  /* 821B08E8h */ case    6:  		/* rlwinm R11, R4, 27, 29, 31 */
		/* 821B08E8h case    6:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R11,regs.R4);
		/* 821B08E8h case    6:*/		return 0x821B08EC;
		  /* 821B08ECh */ case    7:  		/* cmplw CR6, R11, R25 */
		/* 821B08ECh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821B08ECh case    7:*/		return 0x821B08F0;
		  /* 821B08F0h */ case    8:  		/* bc 12, CR6_GT, 28 */
		/* 821B08F0h case    8:*/		if ( regs.CR[6].gt ) { return 0x821B090C;  }
		/* 821B08F0h case    8:*/		return 0x821B08F4;
		  /* 821B08F4h */ case    9:  		/* bc 4, CR6_EQ, 216 */
		/* 821B08F4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B09CC;  }
		/* 821B08F4h case    9:*/		return 0x821B08F8;
		  /* 821B08F8h */ case   10:  		/* cmplw CR6, R26, R24 */
		/* 821B08F8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 821B08F8h case   10:*/		return 0x821B08FC;
		  /* 821B08FCh */ case   11:  		/* bc 12, CR6_GT, 16 */
		/* 821B08FCh case   11:*/		if ( regs.CR[6].gt ) { return 0x821B090C;  }
		/* 821B08FCh case   11:*/		return 0x821B0900;
		  /* 821B0900h */ case   12:  		/* bc 4, CR6_EQ, 204 */
		/* 821B0900h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821B09CC;  }
		/* 821B0900h case   12:*/		return 0x821B0904;
		  /* 821B0904h */ case   13:  		/* cmplw CR6, R27, R21 */
		/* 821B0904h case   13:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R21);
		/* 821B0904h case   13:*/		return 0x821B0908;
		  /* 821B0908h */ case   14:  		/* bc 4, CR6_LT, 196 */
		/* 821B0908h case   14:*/		if ( !regs.CR[6].lt ) { return 0x821B09CC;  }
		/* 821B0908h case   14:*/		return 0x821B090C;
	}
	return 0x821B090C;
} // Block from 821B08D0h-821B090Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B090Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B090C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B090C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B090C);
		  /* 821B090Ch */ case    0:  		/* addi R11, R1, 112 */
		/* 821B090Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821B090Ch case    0:*/		return 0x821B0910;
		  /* 821B0910h */ case    1:  		/* addi R10, R1, 128 */
		/* 821B0910h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 821B0910h case    1:*/		return 0x821B0914;
		  /* 821B0914h */ case    2:  		/* mr R20, R28 */
		/* 821B0914h case    2:*/		regs.R20 = regs.R28;
		/* 821B0914h case    2:*/		return 0x821B0918;
		  /* 821B0918h */ case    3:  		/* mr R21, R27 */
		/* 821B0918h case    3:*/		regs.R21 = regs.R27;
		/* 821B0918h case    3:*/		return 0x821B091C;
		  /* 821B091Ch */ case    4:  		/* mr R24, R26 */
		/* 821B091Ch case    4:*/		regs.R24 = regs.R26;
		/* 821B091Ch case    4:*/		return 0x821B0920;
		  /* 821B0920h */ case    5:  		/* ld R8, <#[R11]> */
		/* 821B0920h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0920h case    5:*/		return 0x821B0924;
		  /* 821B0924h */ case    6:  		/* rlwinm R25, R4, 27, 29, 31 */
		/* 821B0924h case    6:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R25,regs.R4);
		/* 821B0924h case    6:*/		return 0x821B0928;
		  /* 821B0928h */ case    7:  		/* ld R11, <#[R11 + 8]> */
		/* 821B0928h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0928h case    7:*/		return 0x821B092C;
		  /* 821B092Ch */ case    8:  		/* mr R23, R9 */
		/* 821B092Ch case    8:*/		regs.R23 = regs.R9;
		/* 821B092Ch case    8:*/		return 0x821B0930;
		  /* 821B0930h */ case    9:  		/* mr R22, R29 */
		/* 821B0930h case    9:*/		regs.R22 = regs.R29;
		/* 821B0930h case    9:*/		return 0x821B0934;
		  /* 821B0934h */ case   10:  		/* std R8, <#[R10]> */
		/* 821B0934h case   10:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0934h case   10:*/		return 0x821B0938;
		  /* 821B0938h */ case   11:  		/* std R11, <#[R10 + 8]> */
		/* 821B0938h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821B0938h case   11:*/		return 0x821B093C;
		  /* 821B093Ch */ case   12:  		/* b 144 */
		/* 821B093Ch case   12:*/		return 0x821B09CC;
		/* 821B093Ch case   12:*/		return 0x821B0940;
	}
	return 0x821B0940;
} // Block from 821B090Ch-821B0940h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B0940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0940);
		  /* 821B0940h */ case    0:  		/* lwz R30, <#[R18 + 4]> */
		/* 821B0940h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R18 + 0x00000004) );
		/* 821B0940h case    0:*/		return 0x821B0944;
		  /* 821B0944h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821B0944h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B0944h case    1:*/		return 0x821B0948;
		  /* 821B0948h */ case    2:  		/* bc 12, CR6_EQ, -316 */
		/* 821B0948h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B080C;  }
		/* 821B0948h case    2:*/		return 0x821B094C;
		  /* 821B094Ch */ case    3:  		/* lwz R4, <#[R30 + 16]> */
		/* 821B094Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821B094Ch case    3:*/		return 0x821B0950;
		  /* 821B0950h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821B0950h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B0950h case    4:*/		return 0x821B0954;
		  /* 821B0954h */ case    5:  		/* bc 12, CR6_EQ, 104 */
		/* 821B0954h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B09BC;  }
		/* 821B0954h case    5:*/		return 0x821B0958;
		  /* 821B0958h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 821B0958h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B0958h case    6:*/		return 0x821B095C;
		  /* 821B095Ch */ case    7:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B095Ch case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B095Ch case    7:*/		return 0x821B0960;
		  /* 821B0960h */ case    8:  		/* bc 12, CR0_EQ, 92 */
		/* 821B0960h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B09BC;  }
		/* 821B0960h case    8:*/		return 0x821B0964;
		  /* 821B0964h */ case    9:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B0964h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B0964h case    9:*/		return 0x821B0968;
		  /* 821B0968h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B0968h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B0968h case   10:*/		return 0x821B096C;
		  /* 821B096Ch */ case   11:  		/* cmplwi CR6, R11, 256 */
		/* 821B096Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B096Ch case   11:*/		return 0x821B0970;
		  /* 821B0970h */ case   12:  		/* bc 4, CR6_EQ, 76 */
		/* 821B0970h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821B09BC;  }
		/* 821B0970h case   12:*/		return 0x821B0974;
		  /* 821B0974h */ case   13:  		/* lwz R31, <#[R28 + 4]> */
		/* 821B0974h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 821B0974h case   13:*/		return 0x821B0978;
		  /* 821B0978h */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821B0978h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B0978h case   14:*/		return 0x821B097C;
		  /* 821B097Ch */ case   15:  		/* bc 12, CR6_EQ, 64 */
		/* 821B097Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821B09BC;  }
		/* 821B097Ch case   15:*/		return 0x821B0980;
		  /* 821B0980h */ case   16:  		/* lwz R5, <#[R31 + 16]> */
		/* 821B0980h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 821B0980h case   16:*/		return 0x821B0984;
		  /* 821B0984h */ case   17:  		/* cmplwi CR6, R5, 0 */
		/* 821B0984h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821B0984h case   17:*/		return 0x821B0988;
		  /* 821B0988h */ case   18:  		/* bc 12, CR6_EQ, 44 */
		/* 821B0988h case   18:*/		if ( regs.CR[6].eq ) { return 0x821B09B4;  }
		/* 821B0988h case   18:*/		return 0x821B098C;
		  /* 821B098Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 821B098Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B098Ch case   19:*/		return 0x821B0990;
		  /* 821B0990h */ case   20:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B0990h case   20:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B0990h case   20:*/		return 0x821B0994;
		  /* 821B0994h */ case   21:  		/* bc 12, CR0_EQ, 32 */
		/* 821B0994h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B09B4;  }
		/* 821B0994h case   21:*/		return 0x821B0998;
		  /* 821B0998h */ case   22:  		/* lwz R11, <#[R5 + 8]> */
		/* 821B0998h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B0998h case   22:*/		return 0x821B099C;
		  /* 821B099Ch */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B099Ch case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B099Ch case   23:*/		return 0x821B09A0;
		  /* 821B09A0h */ case   24:  		/* cmplwi CR6, R11, 256 */
		/* 821B09A0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B09A0h case   24:*/		return 0x821B09A4;
		  /* 821B09A4h */ case   25:  		/* bc 4, CR6_EQ, 16 */
		/* 821B09A4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821B09B4;  }
		/* 821B09A4h case   25:*/		return 0x821B09A8;
		  /* 821B09A8h */ case   26:  		/* mr R3, R17 */
		/* 821B09A8h case   26:*/		regs.R3 = regs.R17;
		/* 821B09A8h case   26:*/		return 0x821B09AC;
		  /* 821B09ACh */ case   27:  		/* bl -86748 */
		/* 821B09ACh case   27:*/		regs.LR = 0x821B09B0; return 0x8219B6D0;
		/* 821B09ACh case   27:*/		return 0x821B09B0;
		  /* 821B09B0h */ case   28:  		/* or R29, R3, R29 */
		/* 821B09B0h case   28:*/		cpu::op::or<0>(regs,&regs.R29,regs.R3,regs.R29);
		/* 821B09B0h case   28:*/		return 0x821B09B4;
	}
	return 0x821B09B4;
} // Block from 821B0940h-821B09B4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B09B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B09B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B09B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B09B4);
		  /* 821B09B4h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821B09B4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821B09B4h case    0:*/		return 0x821B09B8;
		  /* 821B09B8h */ case    1:  		/* b -64 */
		/* 821B09B8h case    1:*/		return 0x821B0978;
		/* 821B09B8h case    1:*/		return 0x821B09BC;
	}
	return 0x821B09BC;
} // Block from 821B09B4h-821B09BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B09BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B09BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B09BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B09BC);
		  /* 821B09BCh */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821B09BCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821B09BCh case    0:*/		return 0x821B09C0;
		  /* 821B09C0h */ case    1:  		/* b -124 */
		/* 821B09C0h case    1:*/		return 0x821B0944;
		/* 821B09C0h case    1:*/		return 0x821B09C4;
	}
	return 0x821B09C4;
} // Block from 821B09BCh-821B09C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B09C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B09C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B09C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B09C4);
		  /* 821B09C4h */ case    0:  		/* mr R5, R27 */
		/* 821B09C4h case    0:*/		regs.R5 = regs.R27;
		/* 821B09C4h case    0:*/		return 0x821B09C8;
		  /* 821B09C8h */ case    1:  		/* bl -65040 */
		/* 821B09C8h case    1:*/		regs.LR = 0x821B09CC; return 0x821A0BB8;
		/* 821B09C8h case    1:*/		return 0x821B09CC;
	}
	return 0x821B09CC;
} // Block from 821B09C4h-821B09CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B09CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B09CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B09CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B09CC);
		  /* 821B09CCh */ case    0:  		/* mr R3, R16 */
		/* 821B09CCh case    0:*/		regs.R3 = regs.R16;
		/* 821B09CCh case    0:*/		return 0x821B09D0;
		  /* 821B09D0h */ case    1:  		/* bl -77232 */
		/* 821B09D0h case    1:*/		regs.LR = 0x821B09D4; return 0x8219DC20;
		/* 821B09D0h case    1:*/		return 0x821B09D4;
		  /* 821B09D4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B09D4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B09D4h case    2:*/		return 0x821B09D8;
		  /* 821B09D8h */ case    3:  		/* bc 12, CR0_EQ, -692 */
		/* 821B09D8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B0724;  }
		/* 821B09D8h case    3:*/		return 0x821B09DC;
		  /* 821B09DCh */ case    4:  		/* lwz R10, <#[R17 + 984]> */
		/* 821B09DCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x000003D8) );
		/* 821B09DCh case    4:*/		return 0x821B09E0;
		  /* 821B09E0h */ case    5:  		/* addi R11, R17, 972 */
		/* 821B09E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x3CC);
		/* 821B09E0h case    5:*/		return 0x821B09E4;
		  /* 821B09E4h */ case    6:  		/* mr R11, R15 */
		/* 821B09E4h case    6:*/		regs.R11 = regs.R15;
		/* 821B09E4h case    6:*/		return 0x821B09E8;
		  /* 821B09E8h */ case    7:  		/* cmplwi CR6, R15, 0 */
		/* 821B09E8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821B09E8h case    7:*/		return 0x821B09EC;
		  /* 821B09ECh */ case    8:  		/* stw R10, <#[R16]> */
		/* 821B09ECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821B09ECh case    8:*/		return 0x821B09F0;
		  /* 821B09F0h */ case    9:  		/* stw R16, <#[R17 + 984]> */
		/* 821B09F0h case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R17 + 0x000003D8) );
		/* 821B09F0h case    9:*/		return 0x821B09F4;
		  /* 821B09F4h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 821B09F4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B0A24;  }
		/* 821B09F4h case   10:*/		return 0x821B09F8;
		  /* 821B09F8h */ case   11:  		/* lwz R10, <#[R11 + 20]> */
		/* 821B09F8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B09F8h case   11:*/		return 0x821B09FC;
		  /* 821B09FCh */ case   12:  		/* cmplw CR6, R11, R14 */
		/* 821B09FCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 821B09FCh case   12:*/		return 0x821B0A00;
		  /* 821B0A00h */ case   13:  		/* rlwinm R10, R10, 0, 31, 28 */
		/* 821B0A00h case   13:*/		cpu::op::rlwinm<0,0,31,28>(regs,&regs.R10,regs.R10);
		/* 821B0A00h case   13:*/		return 0x821B0A04;
		  /* 821B0A04h */ case   14:  		/* stw R10, <#[R11 + 20]> */
		/* 821B0A04h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B0A04h case   14:*/		return 0x821B0A08;
		  /* 821B0A08h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 821B0A08h case   15:*/		if ( regs.CR[6].eq ) { return 0x821B0A24;  }
		/* 821B0A08h case   15:*/		return 0x821B0A0C;
		  /* 821B0A0Ch */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B0A0Ch case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B0A0Ch case   16:*/		return 0x821B0A10;
		  /* 821B0A10h */ case   17:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B0A10h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B0A10h case   17:*/		return 0x821B0A14;
		  /* 821B0A14h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B0A14h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B0A14h case   18:*/		return 0x821B0A18;
		  /* 821B0A18h */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0A18h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821B0A24;  }
		/* 821B0A18h case   19:*/		return 0x821B0A1C;
		  /* 821B0A1Ch */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821B0A1Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0A1Ch case   20:*/		return 0x821B0A20;
		  /* 821B0A20h */ case   21:  		/* bc 4, CR6_EQ, -40 */
		/* 821B0A20h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821B09F8;  }
		/* 821B0A20h case   21:*/		return 0x821B0A24;
	}
	return 0x821B0A24;
} // Block from 821B09CCh-821B0A24h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B0A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0A24);
		  /* 821B0A24h */ case    0:  		/* lwz R11, <#[R17 + 664]> */
		/* 821B0A24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000298) );
		/* 821B0A24h case    0:*/		return 0x821B0A28;
		  /* 821B0A28h */ case    1:  		/* subfc R11, R21, R11 */
		/* 821B0A28h case    1:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 821B0A28h case    1:*/		return 0x821B0A2C;
		  /* 821B0A2Ch */ case    2:  		/* addze R10, R21 */
		/* 821B0A2Ch case    2:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R21);
		/* 821B0A2Ch case    2:*/		return 0x821B0A30;
		  /* 821B0A30h */ case    3:  		/* subf R11, R10, R21 */
		/* 821B0A30h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R21);
		/* 821B0A30h case    3:*/		return 0x821B0A34;
		  /* 821B0A34h */ case    4:  		/* and R31, R11, R20 */
		/* 821B0A34h case    4:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R20);
		/* 821B0A34h case    4:*/		return 0x821B0A38;
		  /* 821B0A38h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821B0A38h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B0A38h case    5:*/		return 0x821B0A3C;
		  /* 821B0A3Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 821B0A3Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821B0A54;  }
		/* 821B0A3Ch case    6:*/		return 0x821B0A40;
		  /* 821B0A40h */ case    7:  		/* addi R6, R1, 128 */
		/* 821B0A40h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 821B0A40h case    7:*/		return 0x821B0A44;
		  /* 821B0A44h */ case    8:  		/* mr R5, R31 */
		/* 821B0A44h case    8:*/		regs.R5 = regs.R31;
		/* 821B0A44h case    8:*/		return 0x821B0A48;
		  /* 821B0A48h */ case    9:  		/* mr R4, R18 */
		/* 821B0A48h case    9:*/		regs.R4 = regs.R18;
		/* 821B0A48h case    9:*/		return 0x821B0A4C;
		  /* 821B0A4Ch */ case   10:  		/* mr R3, R17 */
		/* 821B0A4Ch case   10:*/		regs.R3 = regs.R17;
		/* 821B0A4Ch case   10:*/		return 0x821B0A50;
		  /* 821B0A50h */ case   11:  		/* bl -40032 */
		/* 821B0A50h case   11:*/		regs.LR = 0x821B0A54; return 0x821A6DF0;
		/* 821B0A50h case   11:*/		return 0x821B0A54;
	}
	return 0x821B0A54;
} // Block from 821B0A24h-821B0A54h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B0A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0A54);
		  /* 821B0A54h */ case    0:  		/* addi R11, R31, 0 */
		/* 821B0A54h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x0);
		/* 821B0A54h case    0:*/		return 0x821B0A58;
		  /* 821B0A58h */ case    1:  		/* addic R10, R11, -1 */
		/* 821B0A58h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821B0A58h case    1:*/		return 0x821B0A5C;
		  /* 821B0A5Ch */ case    2:  		/* subfe R3, R10, R11 */
		/* 821B0A5Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821B0A5Ch case    2:*/		return 0x821B0A60;
		  /* 821B0A60h */ case    3:  		/* addi R1, R1, 304 */
		/* 821B0A60h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 821B0A60h case    3:*/		return 0x821B0A64;
		  /* 821B0A64h */ case    4:  		/* b -1177588 */
		/* 821B0A64h case    4:*/		return 0x82091270;
		/* 821B0A64h case    4:*/		return 0x821B0A68;
	}
	return 0x821B0A68;
} // Block from 821B0A54h-821B0A68h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B0A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0A68);
		  /* 821B0A68h */ case    0:  		/* mfspr R12, LR */
		/* 821B0A68h case    0:*/		regs.R12 = regs.LR;
		/* 821B0A68h case    0:*/		return 0x821B0A6C;
		  /* 821B0A6Ch */ case    1:  		/* bl -1177648 */
		/* 821B0A6Ch case    1:*/		regs.LR = 0x821B0A70; return 0x8209123C;
		/* 821B0A6Ch case    1:*/		return 0x821B0A70;
		  /* 821B0A70h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821B0A70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821B0A70h case    2:*/		return 0x821B0A74;
		  /* 821B0A74h */ case    3:  		/* lwz R11, <#[R4 + 20]> */
		/* 821B0A74h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821B0A74h case    3:*/		return 0x821B0A78;
		  /* 821B0A78h */ case    4:  		/* rlwinm R26, R4, 0, 0, 30 */
		/* 821B0A78h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R26,regs.R4);
		/* 821B0A78h case    4:*/		return 0x821B0A7C;
		  /* 821B0A7Ch */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 821B0A7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821B0A7Ch case    5:*/		return 0x821B0A80;
		  /* 821B0A80h */ case    6:  		/* mr R27, R3 */
		/* 821B0A80h case    6:*/		regs.R27 = regs.R3;
		/* 821B0A80h case    6:*/		return 0x821B0A84;
		  /* 821B0A84h */ case    7:  		/* ori R11, R11, 6 */
		/* 821B0A84h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821B0A84h case    7:*/		return 0x821B0A88;
		  /* 821B0A88h */ case    8:  		/* mr R28, R4 */
		/* 821B0A88h case    8:*/		regs.R28 = regs.R4;
		/* 821B0A88h case    8:*/		return 0x821B0A8C;
		  /* 821B0A8Ch */ case    9:  		/* stw R11, <#[R4 + 20]> */
		/* 821B0A8Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821B0A8Ch case    9:*/		return 0x821B0A90;
		  /* 821B0A90h */ case   10:  		/* mr R22, R5 */
		/* 821B0A90h case   10:*/		regs.R22 = regs.R5;
		/* 821B0A90h case   10:*/		return 0x821B0A94;
		  /* 821B0A94h */ case   11:  		/* lwz R11, <#[R26 + 36]> */
		/* 821B0A94h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821B0A94h case   11:*/		return 0x821B0A98;
		  /* 821B0A98h */ case   12:  		/* li R23, 0 */
		/* 821B0A98h case   12:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821B0A98h case   12:*/		return 0x821B0A9C;
		  /* 821B0A9Ch */ case   13:  		/* rlwinm R21, R10, 25, 25, 31 */
		/* 821B0A9Ch case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R21,regs.R10);
		/* 821B0A9Ch case   13:*/		return 0x821B0AA0;
		  /* 821B0AA0h */ case   14:  		/* li R24, 0 */
		/* 821B0AA0h case   14:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821B0AA0h case   14:*/		return 0x821B0AA4;
		  /* 821B0AA4h */ case   15:  		/* li R25, 0 */
		/* 821B0AA4h case   15:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821B0AA4h case   15:*/		return 0x821B0AA8;
		  /* 821B0AA8h */ case   16:  		/* b 316 */
		/* 821B0AA8h case   16:*/		return 0x821B0BE4;
		/* 821B0AA8h case   16:*/		return 0x821B0AAC;
		  /* 821B0AACh */ case   17:  		/* lwz R10, <#[R31 + 4]> */
		/* 821B0AACh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821B0AACh case   17:*/		return 0x821B0AB0;
		  /* 821B0AB0h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 821B0AB0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B0AB0h case   18:*/		return 0x821B0AB4;
		  /* 821B0AB4h */ case   19:  		/* bc 12, CR6_EQ, 64 */
		/* 821B0AB4h case   19:*/		if ( regs.CR[6].eq ) { return 0x821B0AF4;  }
		/* 821B0AB4h case   19:*/		return 0x821B0AB8;
		  /* 821B0AB8h */ case   20:  		/* lwz R11, <#[R10 + 16]> */
		/* 821B0AB8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821B0AB8h case   20:*/		return 0x821B0ABC;
		  /* 821B0ABCh */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821B0ABCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0ABCh case   21:*/		return 0x821B0AC0;
		  /* 821B0AC0h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 821B0AC0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B0ADC;  }
		/* 821B0AC0h case   22:*/		return 0x821B0AC4;
		  /* 821B0AC4h */ case   23:  		/* lwz R9, <#[R11 + 28]> */
		/* 821B0AC4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 821B0AC4h case   23:*/		return 0x821B0AC8;
		  /* 821B0AC8h */ case   24:  		/* cmplw CR6, R9, R22 */
		/* 821B0AC8h case   24:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 821B0AC8h case   24:*/		return 0x821B0ACC;
		  /* 821B0ACCh */ case   25:  		/* bc 4, CR6_EQ, 16 */
		/* 821B0ACCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x821B0ADC;  }
		/* 821B0ACCh case   25:*/		return 0x821B0AD0;
		  /* 821B0AD0h */ case   26:  		/* lwz R11, <#[R11 + 20]> */
		/* 821B0AD0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821B0AD0h case   26:*/		return 0x821B0AD4;
		  /* 821B0AD4h */ case   27:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821B0AD4h case   27:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821B0AD4h case   27:*/		return 0x821B0AD8;
		  /* 821B0AD8h */ case   28:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0AD8h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821B0AE4;  }
		/* 821B0AD8h case   28:*/		return 0x821B0ADC;
	}
	return 0x821B0ADC;
} // Block from 821B0A68h-821B0ADCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B0ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0ADC);
		  /* 821B0ADCh */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B0ADCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B0ADCh case    0:*/		return 0x821B0AE0;
		  /* 821B0AE0h */ case    1:  		/* b -48 */
		/* 821B0AE0h case    1:*/		return 0x821B0AB0;
		/* 821B0AE0h case    1:*/		return 0x821B0AE4;
	}
	return 0x821B0AE4;
} // Block from 821B0ADCh-821B0AE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0AE4);
		  /* 821B0AE4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B0AE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0AE4h case    0:*/		return 0x821B0AE8;
		  /* 821B0AE8h */ case    1:  		/* ori R11, R11, 2 */
		/* 821B0AE8h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821B0AE8h case    1:*/		return 0x821B0AEC;
		  /* 821B0AECh */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 821B0AECh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0AECh case    2:*/		return 0x821B0AF0;
		  /* 821B0AF0h */ case    3:  		/* b 236 */
		/* 821B0AF0h case    3:*/		return 0x821B0BDC;
		/* 821B0AF0h case    3:*/		return 0x821B0AF4;
	}
	return 0x821B0AF4;
} // Block from 821B0AE4h-821B0AF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0AF4);
		  /* 821B0AF4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0AF4h case    0:*/		return 0x821B0AF8;
		  /* 821B0AF8h */ case    1:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821B0AF8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821B0AF8h case    1:*/		return 0x821B0AFC;
		  /* 821B0AFCh */ case    2:  		/* cmpw CR6, R10, R21 */
		/* 821B0AFCh case    2:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R21);
		/* 821B0AFCh case    2:*/		return 0x821B0B00;
		  /* 821B0B00h */ case    3:  		/* bc 4, CR6_EQ, 220 */
		/* 821B0B00h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B0BDC;  }
		/* 821B0B00h case    3:*/		return 0x821B0B04;
		  /* 821B0B04h */ case    4:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0B04h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0B04h case    4:*/		return 0x821B0B08;
		  /* 821B0B08h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821B0B08h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B0B1C;  }
		/* 821B0B08h case    5:*/		return 0x821B0B0C;
		  /* 821B0B0Ch */ case    6:  		/* mr R4, R31 */
		/* 821B0B0Ch case    6:*/		regs.R4 = regs.R31;
		/* 821B0B0Ch case    6:*/		return 0x821B0B10;
		  /* 821B0B10h */ case    7:  		/* lwz R5, <#[R27 + 660]> */
		/* 821B0B10h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000294) );
		/* 821B0B10h case    7:*/		return 0x821B0B14;
		  /* 821B0B14h */ case    8:  		/* mr R3, R27 */
		/* 821B0B14h case    8:*/		regs.R3 = regs.R27;
		/* 821B0B14h case    8:*/		return 0x821B0B18;
		  /* 821B0B18h */ case    9:  		/* bl 49904 */
		/* 821B0B18h case    9:*/		regs.LR = 0x821B0B1C; return 0x821BCE08;
		/* 821B0B18h case    9:*/		return 0x821B0B1C;
	}
	return 0x821B0B1C;
} // Block from 821B0AF4h-821B0B1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0B1C);
		  /* 821B0B1Ch */ case    0:  		/* mr R4, R31 */
		/* 821B0B1Ch case    0:*/		regs.R4 = regs.R31;
		/* 821B0B1Ch case    0:*/		return 0x821B0B20;
		  /* 821B0B20h */ case    1:  		/* mr R3, R27 */
		/* 821B0B20h case    1:*/		regs.R3 = regs.R27;
		/* 821B0B20h case    1:*/		return 0x821B0B24;
		  /* 821B0B24h */ case    2:  		/* bl -82404 */
		/* 821B0B24h case    2:*/		regs.LR = 0x821B0B28; return 0x8219C940;
		/* 821B0B24h case    2:*/		return 0x821B0B28;
		  /* 821B0B28h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0B28h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0B28h case    3:*/		return 0x821B0B2C;
		  /* 821B0B2Ch */ case    4:  		/* bc 4, CR0_EQ, 176 */
		/* 821B0B2Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B0BDC;  }
		/* 821B0B2Ch case    4:*/		return 0x821B0B30;
		  /* 821B0B30h */ case    5:  		/* addi R6, R1, 96 */
		/* 821B0B30h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821B0B30h case    5:*/		return 0x821B0B34;
		  /* 821B0B34h */ case    6:  		/* mr R5, R31 */
		/* 821B0B34h case    6:*/		regs.R5 = regs.R31;
		/* 821B0B34h case    6:*/		return 0x821B0B38;
		  /* 821B0B38h */ case    7:  		/* mr R4, R28 */
		/* 821B0B38h case    7:*/		regs.R4 = regs.R28;
		/* 821B0B38h case    7:*/		return 0x821B0B3C;
		  /* 821B0B3Ch */ case    8:  		/* mr R3, R27 */
		/* 821B0B3Ch case    8:*/		regs.R3 = regs.R27;
		/* 821B0B3Ch case    8:*/		return 0x821B0B40;
		  /* 821B0B40h */ case    9:  		/* bl -71224 */
		/* 821B0B40h case    9:*/		regs.LR = 0x821B0B44; return 0x8219F508;
		/* 821B0B40h case    9:*/		return 0x821B0B44;
		  /* 821B0B44h */ case   10:  		/* mr R29, R3 */
		/* 821B0B44h case   10:*/		regs.R29 = regs.R3;
		/* 821B0B44h case   10:*/		return 0x821B0B48;
		  /* 821B0B48h */ case   11:  		/* cmplwi CR6, R3, 4 */
		/* 821B0B48h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821B0B48h case   11:*/		return 0x821B0B4C;
		  /* 821B0B4Ch */ case   12:  		/* bc 12, CR6_GT, 144 */
		/* 821B0B4Ch case   12:*/		if ( regs.CR[6].gt ) { return 0x821B0BDC;  }
		/* 821B0B4Ch case   12:*/		return 0x821B0B50;
		  /* 821B0B50h */ case   13:  		/* mr R5, R31 */
		/* 821B0B50h case   13:*/		regs.R5 = regs.R31;
		/* 821B0B50h case   13:*/		return 0x821B0B54;
		  /* 821B0B54h */ case   14:  		/* mr R4, R28 */
		/* 821B0B54h case   14:*/		regs.R4 = regs.R28;
		/* 821B0B54h case   14:*/		return 0x821B0B58;
		  /* 821B0B58h */ case   15:  		/* mr R3, R27 */
		/* 821B0B58h case   15:*/		regs.R3 = regs.R27;
		/* 821B0B58h case   15:*/		return 0x821B0B5C;
		  /* 821B0B5Ch */ case   16:  		/* bl -85924 */
		/* 821B0B5Ch case   16:*/		regs.LR = 0x821B0B60; return 0x8219BBB8;
		/* 821B0B5Ch case   16:*/		return 0x821B0B60;
		  /* 821B0B60h */ case   17:  		/* mr R30, R3 */
		/* 821B0B60h case   17:*/		regs.R30 = regs.R3;
		/* 821B0B60h case   17:*/		return 0x821B0B64;
		  /* 821B0B64h */ case   18:  		/* cmplw CR6, R3, R25 */
		/* 821B0B64h case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 821B0B64h case   18:*/		return 0x821B0B68;
		  /* 821B0B68h */ case   19:  		/* bc 12, CR6_LT, 116 */
		/* 821B0B68h case   19:*/		if ( regs.CR[6].lt ) { return 0x821B0BDC;  }
		/* 821B0B68h case   19:*/		return 0x821B0B6C;
		  /* 821B0B6Ch */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 821B0B6Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x821B0B78;  }
		/* 821B0B6Ch case   20:*/		return 0x821B0B70;
		  /* 821B0B70h */ case   21:  		/* cmplw CR6, R29, R24 */
		/* 821B0B70h case   21:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 821B0B70h case   21:*/		return 0x821B0B74;
		  /* 821B0B74h */ case   22:  		/* bc 4, CR6_GT, 104 */
		/* 821B0B74h case   22:*/		if ( !regs.CR[6].gt ) { return 0x821B0BDC;  }
		/* 821B0B74h case   22:*/		return 0x821B0B78;
	}
	return 0x821B0B78;
} // Block from 821B0B1Ch-821B0B78h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821B0B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0B78);
		  /* 821B0B78h */ case    0:  		/* addi R7, R1, 96 */
		/* 821B0B78h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821B0B78h case    0:*/		return 0x821B0B7C;
		  /* 821B0B7Ch */ case    1:  		/* addi R6, R1, 80 */
		/* 821B0B7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821B0B7Ch case    1:*/		return 0x821B0B80;
		  /* 821B0B80h */ case    2:  		/* mr R5, R31 */
		/* 821B0B80h case    2:*/		regs.R5 = regs.R31;
		/* 821B0B80h case    2:*/		return 0x821B0B84;
		  /* 821B0B84h */ case    3:  		/* mr R4, R28 */
		/* 821B0B84h case    3:*/		regs.R4 = regs.R28;
		/* 821B0B84h case    3:*/		return 0x821B0B88;
		  /* 821B0B88h */ case    4:  		/* mr R3, R27 */
		/* 821B0B88h case    4:*/		regs.R3 = regs.R27;
		/* 821B0B88h case    4:*/		return 0x821B0B8C;
		  /* 821B0B8Ch */ case    5:  		/* bl -2108 */
		/* 821B0B8Ch case    5:*/		regs.LR = 0x821B0B90; return 0x821B0350;
		/* 821B0B8Ch case    5:*/		return 0x821B0B90;
		  /* 821B0B90h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821B0B90h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821B0B90h case    6:*/		return 0x821B0B94;
		  /* 821B0B94h */ case    7:  		/* bc 4, CR0_EQ, 72 */
		/* 821B0B94h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821B0BDC;  }
		/* 821B0B94h case    7:*/		return 0x821B0B98;
		  /* 821B0B98h */ case    8:  		/* lwz R11, <#[R27 + 664]> */
		/* 821B0B98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000298) );
		/* 821B0B98h case    8:*/		return 0x821B0B9C;
		  /* 821B0B9Ch */ case    9:  		/* lwz R5, <#[R1 + 80]> */
		/* 821B0B9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821B0B9Ch case    9:*/		return 0x821B0BA0;
		  /* 821B0BA0h */ case   10:  		/* cmplw CR6, R5, R11 */
		/* 821B0BA0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821B0BA0h case   10:*/		return 0x821B0BA4;
		  /* 821B0BA4h */ case   11:  		/* bc 12, CR6_GT, 44 */
		/* 821B0BA4h case   11:*/		if ( regs.CR[6].gt ) { return 0x821B0BD0;  }
		/* 821B0BA4h case   11:*/		return 0x821B0BA8;
		  /* 821B0BA8h */ case   12:  		/* addi R11, R1, 96 */
		/* 821B0BA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821B0BA8h case   12:*/		return 0x821B0BAC;
		  /* 821B0BACh */ case   13:  		/* addi R10, R1, 112 */
		/* 821B0BACh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821B0BACh case   13:*/		return 0x821B0BB0;
		  /* 821B0BB0h */ case   14:  		/* mr R23, R31 */
		/* 821B0BB0h case   14:*/		regs.R23 = regs.R31;
		/* 821B0BB0h case   14:*/		return 0x821B0BB4;
		  /* 821B0BB4h */ case   15:  		/* mr R24, R29 */
		/* 821B0BB4h case   15:*/		regs.R24 = regs.R29;
		/* 821B0BB4h case   15:*/		return 0x821B0BB8;
		  /* 821B0BB8h */ case   16:  		/* mr R25, R30 */
		/* 821B0BB8h case   16:*/		regs.R25 = regs.R30;
		/* 821B0BB8h case   16:*/		return 0x821B0BBC;
		  /* 821B0BBCh */ case   17:  		/* ld R9, <#[R11]> */
		/* 821B0BBCh case   17:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0BBCh case   17:*/		return 0x821B0BC0;
	}
	return 0x821B0BC0;
} // Block from 821B0B78h-821B0BC0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B0BC0h
// Function '?CanCombine@Compiler@D3DXShader@@AAA?AW4CanCombineResult@2@PAVInstruction@2@0PAIPAUCombineInstructionsState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0BC0);
		  /* 821B0BC0h */ case    0:  		/* ld R11, <#[R11 + 8]> */
		/* 821B0BC0h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0BC0h case    0:*/		return 0x821B0BC4;
		  /* 821B0BC4h */ case    1:  		/* std R9, <#[R10]> */
		/* 821B0BC4h case    1:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0BC4h case    1:*/		return 0x821B0BC8;
		  /* 821B0BC8h */ case    2:  		/* std R11, <#[R10 + 8]> */
		/* 821B0BC8h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821B0BC8h case    2:*/		return 0x821B0BCC;
		  /* 821B0BCCh */ case    3:  		/* b 16 */
		/* 821B0BCCh case    3:*/		return 0x821B0BDC;
		/* 821B0BCCh case    3:*/		return 0x821B0BD0;
	}
	return 0x821B0BD0;
} // Block from 821B0BC0h-821B0BD0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0BD0);
		  /* 821B0BD0h */ case    0:  		/* mr R4, R28 */
		/* 821B0BD0h case    0:*/		regs.R4 = regs.R28;
		/* 821B0BD0h case    0:*/		return 0x821B0BD4;
		  /* 821B0BD4h */ case    1:  		/* mr R3, R27 */
		/* 821B0BD4h case    1:*/		regs.R3 = regs.R27;
		/* 821B0BD4h case    1:*/		return 0x821B0BD8;
		  /* 821B0BD8h */ case    2:  		/* bl -65568 */
		/* 821B0BD8h case    2:*/		regs.LR = 0x821B0BDC; return 0x821A0BB8;
		/* 821B0BD8h case    2:*/		return 0x821B0BDC;
	}
	return 0x821B0BDC;
} // Block from 821B0BD0h-821B0BDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0BDC);
		  /* 821B0BDCh */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B0BDCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B0BDCh case    0:*/		return 0x821B0BE0;
		  /* 821B0BE0h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B0BE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B0BE0h case    1:*/		return 0x821B0BE4;
	}
	return 0x821B0BE4;
} // Block from 821B0BDCh-821B0BE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0BE4);
		  /* 821B0BE4h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B0BE4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B0BE4h case    0:*/		return 0x821B0BE8;
		  /* 821B0BE8h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821B0BE8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B0BF8;  }
		/* 821B0BE8h case    1:*/		return 0x821B0BEC;
		  /* 821B0BECh */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B0BECh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B0BECh case    2:*/		return 0x821B0BF0;
		  /* 821B0BF0h */ case    3:  		/* addic. R31, R11, -40 */
		/* 821B0BF0h case    3:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821B0BF0h case    3:*/		return 0x821B0BF4;
		  /* 821B0BF4h */ case    4:  		/* bc 4, CR0_EQ, -328 */
		/* 821B0BF4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B0AAC;  }
		/* 821B0BF4h case    4:*/		return 0x821B0BF8;
	}
	return 0x821B0BF8;
} // Block from 821B0BE4h-821B0BF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B0BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0BF8);
		  /* 821B0BF8h */ case    0:  		/* lwz R31, <#[R26 + 40]> */
		/* 821B0BF8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000028) );
		/* 821B0BF8h case    0:*/		return 0x821B0BFC;
		  /* 821B0BFCh */ case    1:  		/* b 308 */
		/* 821B0BFCh case    1:*/		return 0x821B0D30;
		/* 821B0BFCh case    1:*/		return 0x821B0C00;
		  /* 821B0C00h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821B0C00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B0C00h case    2:*/		return 0x821B0C04;
		  /* 821B0C04h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B0C04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0C04h case    3:*/		return 0x821B0C08;
		  /* 821B0C08h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 821B0C08h case    4:*/		if ( regs.CR[6].eq ) { return 0x821B0C40;  }
		/* 821B0C08h case    4:*/		return 0x821B0C0C;
		  /* 821B0C0Ch */ case    5:  		/* lwz R10, <#[R11 + 12]> */
		/* 821B0C0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B0C0Ch case    5:*/		return 0x821B0C10;
		  /* 821B0C10h */ case    6:  		/* lwz R9, <#[R10 + 28]> */
		/* 821B0C10h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000001C) );
		/* 821B0C10h case    6:*/		return 0x821B0C14;
		  /* 821B0C14h */ case    7:  		/* cmplw CR6, R9, R22 */
		/* 821B0C14h case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 821B0C14h case    7:*/		return 0x821B0C18;
		  /* 821B0C18h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 821B0C18h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821B0C28;  }
		/* 821B0C18h case    8:*/		return 0x821B0C1C;
		  /* 821B0C1Ch */ case    9:  		/* lwz R10, <#[R10 + 20]> */
		/* 821B0C1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 821B0C1Ch case    9:*/		return 0x821B0C20;
	}
	return 0x821B0C20;
} // Block from 821B0BF8h-821B0C20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0C20h
// Function '?CombineVectorOperations@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0C20);
		  /* 821B0C20h */ case    0:  		/* rlwinm. R10, R10, 0, 29, 29 */
		/* 821B0C20h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R10);
		/* 821B0C20h case    0:*/		return 0x821B0C24;
		  /* 821B0C24h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0C24h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B0C30;  }
		/* 821B0C24h case    1:*/		return 0x821B0C28;
	}
	return 0x821B0C28;
} // Block from 821B0C20h-821B0C28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0C28);
		  /* 821B0C28h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B0C28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B0C28h case    0:*/		return 0x821B0C2C;
		  /* 821B0C2Ch */ case    1:  		/* b -40 */
		/* 821B0C2Ch case    1:*/		return 0x821B0C04;
		/* 821B0C2Ch case    1:*/		return 0x821B0C30;
	}
	return 0x821B0C30;
} // Block from 821B0C28h-821B0C30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0C30);
		  /* 821B0C30h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B0C30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0C30h case    0:*/		return 0x821B0C34;
		  /* 821B0C34h */ case    1:  		/* ori R11, R11, 4 */
		/* 821B0C34h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B0C34h case    1:*/		return 0x821B0C38;
		  /* 821B0C38h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 821B0C38h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B0C38h case    2:*/		return 0x821B0C3C;
		  /* 821B0C3Ch */ case    3:  		/* b 236 */
		/* 821B0C3Ch case    3:*/		return 0x821B0D28;
		/* 821B0C3Ch case    3:*/		return 0x821B0C40;
	}
	return 0x821B0C40;
} // Block from 821B0C30h-821B0C40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0C40);
		  /* 821B0C40h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0C40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0C40h case    0:*/		return 0x821B0C44;
		  /* 821B0C44h */ case    1:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821B0C44h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821B0C44h case    1:*/		return 0x821B0C48;
		  /* 821B0C48h */ case    2:  		/* cmpw CR6, R10, R21 */
		/* 821B0C48h case    2:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R21);
		/* 821B0C48h case    2:*/		return 0x821B0C4C;
		  /* 821B0C4Ch */ case    3:  		/* bc 4, CR6_EQ, 220 */
		/* 821B0C4Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B0D28;  }
		/* 821B0C4Ch case    3:*/		return 0x821B0C50;
		  /* 821B0C50h */ case    4:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0C50h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0C50h case    4:*/		return 0x821B0C54;
		  /* 821B0C54h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821B0C54h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B0C68;  }
		/* 821B0C54h case    5:*/		return 0x821B0C58;
		  /* 821B0C58h */ case    6:  		/* mr R4, R31 */
		/* 821B0C58h case    6:*/		regs.R4 = regs.R31;
		/* 821B0C58h case    6:*/		return 0x821B0C5C;
		  /* 821B0C5Ch */ case    7:  		/* lwz R5, <#[R27 + 660]> */
		/* 821B0C5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000294) );
		/* 821B0C5Ch case    7:*/		return 0x821B0C60;
		  /* 821B0C60h */ case    8:  		/* mr R3, R27 */
		/* 821B0C60h case    8:*/		regs.R3 = regs.R27;
		/* 821B0C60h case    8:*/		return 0x821B0C64;
		  /* 821B0C64h */ case    9:  		/* bl 49572 */
		/* 821B0C64h case    9:*/		regs.LR = 0x821B0C68; return 0x821BCE08;
		/* 821B0C64h case    9:*/		return 0x821B0C68;
	}
	return 0x821B0C68;
} // Block from 821B0C40h-821B0C68h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0C68);
		  /* 821B0C68h */ case    0:  		/* mr R4, R31 */
		/* 821B0C68h case    0:*/		regs.R4 = regs.R31;
		/* 821B0C68h case    0:*/		return 0x821B0C6C;
		  /* 821B0C6Ch */ case    1:  		/* mr R3, R27 */
		/* 821B0C6Ch case    1:*/		regs.R3 = regs.R27;
		/* 821B0C6Ch case    1:*/		return 0x821B0C70;
		  /* 821B0C70h */ case    2:  		/* bl -82736 */
		/* 821B0C70h case    2:*/		regs.LR = 0x821B0C74; return 0x8219C940;
		/* 821B0C70h case    2:*/		return 0x821B0C74;
		  /* 821B0C74h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0C74h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0C74h case    3:*/		return 0x821B0C78;
		  /* 821B0C78h */ case    4:  		/* bc 4, CR0_EQ, 176 */
		/* 821B0C78h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B0D28;  }
		/* 821B0C78h case    4:*/		return 0x821B0C7C;
		  /* 821B0C7Ch */ case    5:  		/* addi R6, R1, 96 */
		/* 821B0C7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821B0C7Ch case    5:*/		return 0x821B0C80;
		  /* 821B0C80h */ case    6:  		/* mr R5, R31 */
		/* 821B0C80h case    6:*/		regs.R5 = regs.R31;
		/* 821B0C80h case    6:*/		return 0x821B0C84;
		  /* 821B0C84h */ case    7:  		/* mr R4, R28 */
		/* 821B0C84h case    7:*/		regs.R4 = regs.R28;
		/* 821B0C84h case    7:*/		return 0x821B0C88;
		  /* 821B0C88h */ case    8:  		/* mr R3, R27 */
		/* 821B0C88h case    8:*/		regs.R3 = regs.R27;
		/* 821B0C88h case    8:*/		return 0x821B0C8C;
		  /* 821B0C8Ch */ case    9:  		/* bl -71556 */
		/* 821B0C8Ch case    9:*/		regs.LR = 0x821B0C90; return 0x8219F508;
		/* 821B0C8Ch case    9:*/		return 0x821B0C90;
		  /* 821B0C90h */ case   10:  		/* mr R29, R3 */
		/* 821B0C90h case   10:*/		regs.R29 = regs.R3;
		/* 821B0C90h case   10:*/		return 0x821B0C94;
		  /* 821B0C94h */ case   11:  		/* cmplwi CR6, R3, 4 */
		/* 821B0C94h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821B0C94h case   11:*/		return 0x821B0C98;
		  /* 821B0C98h */ case   12:  		/* bc 12, CR6_GT, 144 */
		/* 821B0C98h case   12:*/		if ( regs.CR[6].gt ) { return 0x821B0D28;  }
		/* 821B0C98h case   12:*/		return 0x821B0C9C;
		  /* 821B0C9Ch */ case   13:  		/* mr R5, R31 */
		/* 821B0C9Ch case   13:*/		regs.R5 = regs.R31;
		/* 821B0C9Ch case   13:*/		return 0x821B0CA0;
		  /* 821B0CA0h */ case   14:  		/* mr R4, R28 */
		/* 821B0CA0h case   14:*/		regs.R4 = regs.R28;
		/* 821B0CA0h case   14:*/		return 0x821B0CA4;
		  /* 821B0CA4h */ case   15:  		/* mr R3, R27 */
		/* 821B0CA4h case   15:*/		regs.R3 = regs.R27;
		/* 821B0CA4h case   15:*/		return 0x821B0CA8;
		  /* 821B0CA8h */ case   16:  		/* bl -86256 */
		/* 821B0CA8h case   16:*/		regs.LR = 0x821B0CAC; return 0x8219BBB8;
		/* 821B0CA8h case   16:*/		return 0x821B0CAC;
		  /* 821B0CACh */ case   17:  		/* mr R30, R3 */
		/* 821B0CACh case   17:*/		regs.R30 = regs.R3;
		/* 821B0CACh case   17:*/		return 0x821B0CB0;
		  /* 821B0CB0h */ case   18:  		/* cmplw CR6, R3, R25 */
		/* 821B0CB0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 821B0CB0h case   18:*/		return 0x821B0CB4;
		  /* 821B0CB4h */ case   19:  		/* bc 12, CR6_LT, 116 */
		/* 821B0CB4h case   19:*/		if ( regs.CR[6].lt ) { return 0x821B0D28;  }
		/* 821B0CB4h case   19:*/		return 0x821B0CB8;
	}
	return 0x821B0CB8;
} // Block from 821B0C68h-821B0CB8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B0CB8h
// Function '?CombineRelatedDependents@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0PAVBlock@2@PAUVectorizeDependentInstructionState@2@K_NPA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0CB8);
		  /* 821B0CB8h */ case    0:  		/* bc 4, CR6_EQ, 12 */
		/* 821B0CB8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821B0CC4;  }
		/* 821B0CB8h case    0:*/		return 0x821B0CBC;
		  /* 821B0CBCh */ case    1:  		/* cmplw CR6, R29, R24 */
		/* 821B0CBCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 821B0CBCh case    1:*/		return 0x821B0CC0;
		  /* 821B0CC0h */ case    2:  		/* bc 4, CR6_GT, 104 */
		/* 821B0CC0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821B0D28;  }
		/* 821B0CC0h case    2:*/		return 0x821B0CC4;
	}
	return 0x821B0CC4;
} // Block from 821B0CB8h-821B0CC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0CC4);
		  /* 821B0CC4h */ case    0:  		/* addi R7, R1, 96 */
		/* 821B0CC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821B0CC4h case    0:*/		return 0x821B0CC8;
		  /* 821B0CC8h */ case    1:  		/* addi R6, R1, 80 */
		/* 821B0CC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821B0CC8h case    1:*/		return 0x821B0CCC;
		  /* 821B0CCCh */ case    2:  		/* mr R5, R31 */
		/* 821B0CCCh case    2:*/		regs.R5 = regs.R31;
		/* 821B0CCCh case    2:*/		return 0x821B0CD0;
		  /* 821B0CD0h */ case    3:  		/* mr R4, R28 */
		/* 821B0CD0h case    3:*/		regs.R4 = regs.R28;
		/* 821B0CD0h case    3:*/		return 0x821B0CD4;
		  /* 821B0CD4h */ case    4:  		/* mr R3, R27 */
		/* 821B0CD4h case    4:*/		regs.R3 = regs.R27;
		/* 821B0CD4h case    4:*/		return 0x821B0CD8;
		  /* 821B0CD8h */ case    5:  		/* bl -2440 */
		/* 821B0CD8h case    5:*/		regs.LR = 0x821B0CDC; return 0x821B0350;
		/* 821B0CD8h case    5:*/		return 0x821B0CDC;
		  /* 821B0CDCh */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821B0CDCh case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821B0CDCh case    6:*/		return 0x821B0CE0;
		  /* 821B0CE0h */ case    7:  		/* bc 4, CR0_EQ, 72 */
		/* 821B0CE0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821B0D28;  }
		/* 821B0CE0h case    7:*/		return 0x821B0CE4;
		  /* 821B0CE4h */ case    8:  		/* lwz R11, <#[R27 + 664]> */
		/* 821B0CE4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000298) );
		/* 821B0CE4h case    8:*/		return 0x821B0CE8;
		  /* 821B0CE8h */ case    9:  		/* lwz R5, <#[R1 + 80]> */
		/* 821B0CE8h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821B0CE8h case    9:*/		return 0x821B0CEC;
		  /* 821B0CECh */ case   10:  		/* cmplw CR6, R5, R11 */
		/* 821B0CECh case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821B0CECh case   10:*/		return 0x821B0CF0;
		  /* 821B0CF0h */ case   11:  		/* bc 12, CR6_GT, 44 */
		/* 821B0CF0h case   11:*/		if ( regs.CR[6].gt ) { return 0x821B0D1C;  }
		/* 821B0CF0h case   11:*/		return 0x821B0CF4;
		  /* 821B0CF4h */ case   12:  		/* addi R11, R1, 96 */
		/* 821B0CF4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821B0CF4h case   12:*/		return 0x821B0CF8;
		  /* 821B0CF8h */ case   13:  		/* addi R10, R1, 112 */
		/* 821B0CF8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821B0CF8h case   13:*/		return 0x821B0CFC;
		  /* 821B0CFCh */ case   14:  		/* mr R23, R31 */
		/* 821B0CFCh case   14:*/		regs.R23 = regs.R31;
		/* 821B0CFCh case   14:*/		return 0x821B0D00;
		  /* 821B0D00h */ case   15:  		/* mr R24, R29 */
		/* 821B0D00h case   15:*/		regs.R24 = regs.R29;
		/* 821B0D00h case   15:*/		return 0x821B0D04;
		  /* 821B0D04h */ case   16:  		/* mr R25, R30 */
		/* 821B0D04h case   16:*/		regs.R25 = regs.R30;
		/* 821B0D04h case   16:*/		return 0x821B0D08;
		  /* 821B0D08h */ case   17:  		/* ld R9, <#[R11]> */
		/* 821B0D08h case   17:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B0D08h case   17:*/		return 0x821B0D0C;
		  /* 821B0D0Ch */ case   18:  		/* ld R11, <#[R11 + 8]> */
		/* 821B0D0Ch case   18:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0D0Ch case   18:*/		return 0x821B0D10;
		  /* 821B0D10h */ case   19:  		/* std R9, <#[R10]> */
		/* 821B0D10h case   19:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0D10h case   19:*/		return 0x821B0D14;
		  /* 821B0D14h */ case   20:  		/* std R11, <#[R10 + 8]> */
		/* 821B0D14h case   20:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821B0D14h case   20:*/		return 0x821B0D18;
		  /* 821B0D18h */ case   21:  		/* b 16 */
		/* 821B0D18h case   21:*/		return 0x821B0D28;
		/* 821B0D18h case   21:*/		return 0x821B0D1C;
	}
	return 0x821B0D1C;
} // Block from 821B0CC4h-821B0D1Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D1C);
		  /* 821B0D1Ch */ case    0:  		/* mr R4, R28 */
		/* 821B0D1Ch case    0:*/		regs.R4 = regs.R28;
		/* 821B0D1Ch case    0:*/		return 0x821B0D20;
		  /* 821B0D20h */ case    1:  		/* mr R3, R27 */
		/* 821B0D20h case    1:*/		regs.R3 = regs.R27;
		/* 821B0D20h case    1:*/		return 0x821B0D24;
		  /* 821B0D24h */ case    2:  		/* bl -65900 */
		/* 821B0D24h case    2:*/		regs.LR = 0x821B0D28; return 0x821A0BB8;
		/* 821B0D24h case    2:*/		return 0x821B0D28;
	}
	return 0x821B0D28;
} // Block from 821B0D1Ch-821B0D28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D28);
		  /* 821B0D28h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B0D28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B0D28h case    0:*/		return 0x821B0D2C;
		  /* 821B0D2Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B0D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B0D2Ch case    1:*/		return 0x821B0D30;
	}
	return 0x821B0D30;
} // Block from 821B0D28h-821B0D30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D30);
		  /* 821B0D30h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B0D30h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B0D30h case    0:*/		return 0x821B0D34;
		  /* 821B0D34h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0D34h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B0D40;  }
		/* 821B0D34h case    1:*/		return 0x821B0D38;
		  /* 821B0D38h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821B0D38h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B0D38h case    2:*/		return 0x821B0D3C;
		  /* 821B0D3Ch */ case    3:  		/* bc 4, CR6_EQ, -316 */
		/* 821B0D3Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B0C00;  }
		/* 821B0D3Ch case    3:*/		return 0x821B0D40;
	}
	return 0x821B0D40;
} // Block from 821B0D30h-821B0D40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D40);
		  /* 821B0D40h */ case    0:  		/* lwz R11, <#[R22 + 28]> */
		/* 821B0D40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 821B0D40h case    0:*/		return 0x821B0D44;
		  /* 821B0D44h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B0D44h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B0D44h case    1:*/		return 0x821B0D48;
		  /* 821B0D48h */ case    2:  		/* bc 4, CR0_EQ, 48 */
		/* 821B0D48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B0D78;  }
		/* 821B0D48h case    2:*/		return 0x821B0D4C;
		  /* 821B0D4Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821B0D4Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B0D4Ch case    3:*/		return 0x821B0D50;
		  /* 821B0D50h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 821B0D50h case    4:*/		if ( regs.CR[0].eq ) { return 0x821B0D78;  }
		/* 821B0D50h case    4:*/		return 0x821B0D54;
		  /* 821B0D54h */ case    5:  		/* lwz R10, <#[R11 + 20]> */
		/* 821B0D54h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B0D54h case    5:*/		return 0x821B0D58;
		  /* 821B0D58h */ case    6:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 821B0D58h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 821B0D58h case    6:*/		return 0x821B0D5C;
		  /* 821B0D5Ch */ case    7:  		/* rlwinm R10, R10, 0, 31, 28 */
		/* 821B0D5Ch case    7:*/		cpu::op::rlwinm<0,0,31,28>(regs,&regs.R10,regs.R10);
		/* 821B0D5Ch case    7:*/		return 0x821B0D60;
		  /* 821B0D60h */ case    8:  		/* stw R10, <#[R11 + 20]> */
		/* 821B0D60h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B0D60h case    8:*/		return 0x821B0D64;
		  /* 821B0D64h */ case    9:  		/* lwz R11, <#[R9 + 40]> */
		/* 821B0D64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000028) );
		/* 821B0D64h case    9:*/		return 0x821B0D68;
		  /* 821B0D68h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B0D68h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B0D68h case   10:*/		return 0x821B0D6C;
		  /* 821B0D6Ch */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821B0D6Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B0D78;  }
		/* 821B0D6Ch case   11:*/		return 0x821B0D70;
		  /* 821B0D70h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821B0D70h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B0D70h case   12:*/		return 0x821B0D74;
		  /* 821B0D74h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 821B0D74h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B0D54;  }
		/* 821B0D74h case   13:*/		return 0x821B0D78;
	}
	return 0x821B0D78;
} // Block from 821B0D40h-821B0D78h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D78);
		  /* 821B0D78h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821B0D78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B0D78h case    0:*/		return 0x821B0D7C;
		  /* 821B0D7Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821B0D7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821B0D94;  }
		/* 821B0D7Ch case    1:*/		return 0x821B0D80;
		  /* 821B0D80h */ case    2:  		/* addi R6, R1, 112 */
		/* 821B0D80h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 821B0D80h case    2:*/		return 0x821B0D84;
		  /* 821B0D84h */ case    3:  		/* mr R5, R23 */
		/* 821B0D84h case    3:*/		regs.R5 = regs.R23;
		/* 821B0D84h case    3:*/		return 0x821B0D88;
		  /* 821B0D88h */ case    4:  		/* mr R4, R28 */
		/* 821B0D88h case    4:*/		regs.R4 = regs.R28;
		/* 821B0D88h case    4:*/		return 0x821B0D8C;
		  /* 821B0D8Ch */ case    5:  		/* mr R3, R27 */
		/* 821B0D8Ch case    5:*/		regs.R3 = regs.R27;
		/* 821B0D8Ch case    5:*/		return 0x821B0D90;
		  /* 821B0D90h */ case    6:  		/* bl -40864 */
		/* 821B0D90h case    6:*/		regs.LR = 0x821B0D94; return 0x821A6DF0;
		/* 821B0D90h case    6:*/		return 0x821B0D94;
	}
	return 0x821B0D94;
} // Block from 821B0D78h-821B0D94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B0D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0D94);
		  /* 821B0D94h */ case    0:  		/* addi R11, R23, 0 */
		/* 821B0D94h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x0);
		/* 821B0D94h case    0:*/		return 0x821B0D98;
		  /* 821B0D98h */ case    1:  		/* addic R10, R11, -1 */
		/* 821B0D98h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821B0D98h case    1:*/		return 0x821B0D9C;
		  /* 821B0D9Ch */ case    2:  		/* subfe R3, R10, R11 */
		/* 821B0D9Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821B0D9Ch case    2:*/		return 0x821B0DA0;
		  /* 821B0DA0h */ case    3:  		/* addi R1, R1, 224 */
		/* 821B0DA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821B0DA0h case    3:*/		return 0x821B0DA4;
		  /* 821B0DA4h */ case    4:  		/* b -1178392 */
		/* 821B0DA4h case    4:*/		return 0x8209128C;
		/* 821B0DA4h case    4:*/		return 0x821B0DA8;
	}
	return 0x821B0DA8;
} // Block from 821B0D94h-821B0DA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B0DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0DA8);
		  /* 821B0DA8h */ case    0:  		/* mfspr R12, LR */
		/* 821B0DA8h case    0:*/		regs.R12 = regs.LR;
		/* 821B0DA8h case    0:*/		return 0x821B0DAC;
		  /* 821B0DACh */ case    1:  		/* bl -1178456 */
		/* 821B0DACh case    1:*/		regs.LR = 0x821B0DB0; return 0x82091254;
		/* 821B0DACh case    1:*/		return 0x821B0DB0;
		  /* 821B0DB0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821B0DB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821B0DB0h case    2:*/		return 0x821B0DB4;
		  /* 821B0DB4h */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 821B0DB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B0DB4h case    3:*/		return 0x821B0DB8;
		  /* 821B0DB8h */ case    4:  		/* mr R28, R3 */
		/* 821B0DB8h case    4:*/		regs.R28 = regs.R3;
		/* 821B0DB8h case    4:*/		return 0x821B0DBC;
		  /* 821B0DBCh */ case    5:  		/* mr R30, R5 */
		/* 821B0DBCh case    5:*/		regs.R30 = regs.R5;
		/* 821B0DBCh case    5:*/		return 0x821B0DC0;
		  /* 821B0DC0h */ case    6:  		/* mr R29, R6 */
		/* 821B0DC0h case    6:*/		regs.R29 = regs.R6;
		/* 821B0DC0h case    6:*/		return 0x821B0DC4;
		  /* 821B0DC4h */ case    7:  		/* mr R27, R7 */
		/* 821B0DC4h case    7:*/		regs.R27 = regs.R7;
		/* 821B0DC4h case    7:*/		return 0x821B0DC8;
		  /* 821B0DC8h */ case    8:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0DC8h case    8:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0DC8h case    8:*/		return 0x821B0DCC;
		  /* 821B0DCCh */ case    9:  		/* bc 4, CR0_EQ, 84 */
		/* 821B0DCCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821B0E20;  }
		/* 821B0DCCh case    9:*/		return 0x821B0DD0;
		  /* 821B0DD0h */ case   10:  		/* li R6, 0 */
		/* 821B0DD0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B0DD0h case   10:*/		return 0x821B0DD4;
		  /* 821B0DD4h */ case   11:  		/* bl -3444 */
		/* 821B0DD4h case   11:*/		regs.LR = 0x821B0DD8; return 0x821B0060;
		/* 821B0DD4h case   11:*/		return 0x821B0DD8;
		  /* 821B0DD8h */ case   12:  		/* or. R31, R3, R3 */
		/* 821B0DD8h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821B0DD8h case   12:*/		return 0x821B0DDC;
		  /* 821B0DDCh */ case   13:  		/* bc 12, CR0_EQ, 68 */
		/* 821B0DDCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821B0E20;  }
		/* 821B0DDCh case   13:*/		return 0x821B0DE0;
		  /* 821B0DE0h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0DE0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0DE0h case   14:*/		return 0x821B0DE4;
		  /* 821B0DE4h */ case   15:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0DE4h case   15:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0DE4h case   15:*/		return 0x821B0DE8;
		  /* 821B0DE8h */ case   16:  		/* bc 4, CR0_EQ, 56 */
		/* 821B0DE8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B0E20;  }
		/* 821B0DE8h case   16:*/		return 0x821B0DEC;
		  /* 821B0DECh */ case   17:  		/* addic R11, R29, -1 */
		/* 821B0DECh case   17:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821B0DECh case   17:*/		return 0x821B0DF0;
		  /* 821B0DF0h */ case   18:  		/* mr R4, R30 */
		/* 821B0DF0h case   18:*/		regs.R4 = regs.R30;
		/* 821B0DF0h case   18:*/		return 0x821B0DF4;
		  /* 821B0DF4h */ case   19:  		/* mr R5, R29 */
		/* 821B0DF4h case   19:*/		regs.R5 = regs.R29;
		/* 821B0DF4h case   19:*/		return 0x821B0DF8;
		  /* 821B0DF8h */ case   20:  		/* mr R3, R28 */
		/* 821B0DF8h case   20:*/		regs.R3 = regs.R28;
		/* 821B0DF8h case   20:*/		return 0x821B0DFC;
		  /* 821B0DFCh */ case   21:  		/* subfe R30, R11, R29 */
		/* 821B0DFCh case   21:*/		cpu::op::subfe<0>(regs,&regs.R30,regs.R11,regs.R29);
		/* 821B0DFCh case   21:*/		return 0x821B0E00;
		  /* 821B0E00h */ case   22:  		/* bl -86496 */
		/* 821B0E00h case   22:*/		regs.LR = 0x821B0E04; return 0x8219BC20;
		/* 821B0E00h case   22:*/		return 0x821B0E04;
		  /* 821B0E04h */ case   23:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 821B0E04h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 821B0E04h case   23:*/		return 0x821B0E08;
		  /* 821B0E08h */ case   24:  		/* or R4, R30, R31 */
		/* 821B0E08h case   24:*/		cpu::op::or<0>(regs,&regs.R4,regs.R30,regs.R31);
		/* 821B0E08h case   24:*/		return 0x821B0E0C;
		  /* 821B0E0Ch */ case   25:  		/* lwzx R3, <#[R11 + R27]> */
		/* 821B0E0Ch case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821B0E0Ch case   25:*/		return 0x821B0E10;
		  /* 821B0E10h */ case   26:  		/* bl -73936 */
		/* 821B0E10h case   26:*/		regs.LR = 0x821B0E14; return 0x8219ED40;
		/* 821B0E10h case   26:*/		return 0x821B0E14;
		  /* 821B0E14h */ case   27:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0E14h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0E14h case   27:*/		return 0x821B0E18;
		  /* 821B0E18h */ case   28:  		/* oris R11, R11, 1024 */
		/* 821B0E18h case   28:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821B0E18h case   28:*/		return 0x821B0E1C;
		  /* 821B0E1Ch */ case   29:  		/* stw R11, <#[R31 + 8]> */
		/* 821B0E1Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0E1Ch case   29:*/		return 0x821B0E20;
	}
	return 0x821B0E20;
} // Block from 821B0DA8h-821B0E20h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821B0E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0E20);
		  /* 821B0E20h */ case    0:  		/* addi R1, R1, 128 */
		/* 821B0E20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821B0E20h case    0:*/		return 0x821B0E24;
		  /* 821B0E24h */ case    1:  		/* b -1178496 */
		/* 821B0E24h case    1:*/		return 0x820912A4;
		/* 821B0E24h case    1:*/		return 0x821B0E28;
	}
	return 0x821B0E28;
} // Block from 821B0E20h-821B0E28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B0E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0E28);
		  /* 821B0E28h */ case    0:  		/* mfspr R12, LR */
		/* 821B0E28h case    0:*/		regs.R12 = regs.LR;
		/* 821B0E28h case    0:*/		return 0x821B0E2C;
		  /* 821B0E2Ch */ case    1:  		/* bl -1178612 */
		/* 821B0E2Ch case    1:*/		regs.LR = 0x821B0E30; return 0x82091238;
		/* 821B0E2Ch case    1:*/		return 0x821B0E30;
		  /* 821B0E30h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821B0E30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821B0E30h case    2:*/		return 0x821B0E34;
		  /* 821B0E34h */ case    3:  		/* mr R24, R3 */
		/* 821B0E34h case    3:*/		regs.R24 = regs.R3;
		/* 821B0E34h case    3:*/		return 0x821B0E38;
		  /* 821B0E38h */ case    4:  		/* mr R21, R4 */
		/* 821B0E38h case    4:*/		regs.R21 = regs.R4;
		/* 821B0E38h case    4:*/		return 0x821B0E3C;
		  /* 821B0E3Ch */ case    5:  		/* mr R22, R5 */
		/* 821B0E3Ch case    5:*/		regs.R22 = regs.R5;
		/* 821B0E3Ch case    5:*/		return 0x821B0E40;
		  /* 821B0E40h */ case    6:  		/* li R23, 0 */
		/* 821B0E40h case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821B0E40h case    6:*/		return 0x821B0E44;
		  /* 821B0E44h */ case    7:  		/* addi R20, R5, 4 */
		/* 821B0E44h case    7:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R5,0x4);
		/* 821B0E44h case    7:*/		return 0x821B0E48;
		  /* 821B0E48h */ case    8:  		/* mr R29, R20 */
		/* 821B0E48h case    8:*/		regs.R29 = regs.R20;
		/* 821B0E48h case    8:*/		return 0x821B0E4C;
		  /* 821B0E4Ch */ case    9:  		/* lwz R30, <#[R29]> */
		/* 821B0E4Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821B0E4Ch case    9:*/		return 0x821B0E50;
		  /* 821B0E50h */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 821B0E50h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B0E50h case   10:*/		return 0x821B0E54;
		  /* 821B0E54h */ case   11:  		/* bc 12, CR6_EQ, 396 */
		/* 821B0E54h case   11:*/		if ( regs.CR[6].eq ) { return 0x821B0FE0;  }
		/* 821B0E54h case   11:*/		return 0x821B0E58;
		  /* 821B0E58h */ case   12:  		/* lwz R31, <#[R30 + 16]> */
		/* 821B0E58h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821B0E58h case   12:*/		return 0x821B0E5C;
		  /* 821B0E5Ch */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 821B0E5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B0E5Ch case   13:*/		return 0x821B0E60;
		  /* 821B0E60h */ case   14:  		/* bc 4, CR6_EQ, 64 */
		/* 821B0E60h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821B0EA0;  }
		/* 821B0E60h case   14:*/		return 0x821B0E64;
		  /* 821B0E64h */ case   15:  		/* lwz R11, <#[R20]> */
		/* 821B0E64h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821B0E64h case   15:*/		return 0x821B0E68;
		  /* 821B0E68h */ case   16:  		/* mr R10, R20 */
		/* 821B0E68h case   16:*/		regs.R10 = regs.R20;
		/* 821B0E68h case   16:*/		return 0x821B0E6C;
		  /* 821B0E6Ch */ case   17:  		/* b 12 */
		/* 821B0E6Ch case   17:*/		return 0x821B0E78;
		/* 821B0E6Ch case   17:*/		return 0x821B0E70;
		  /* 821B0E70h */ case   18:  		/* addi R10, R11, 8 */
		/* 821B0E70h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B0E70h case   18:*/		return 0x821B0E74;
		  /* 821B0E74h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B0E74h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0E74h case   19:*/		return 0x821B0E78;
	}
	return 0x821B0E78;
} // Block from 821B0E28h-821B0E78h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B0E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0E78);
		  /* 821B0E78h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 821B0E78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821B0E78h case    0:*/		return 0x821B0E7C;
		  /* 821B0E7Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B0E7Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B0E70;  }
		/* 821B0E7Ch case    1:*/		return 0x821B0E80;
		  /* 821B0E80h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B0E80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B0E80h case    2:*/		return 0x821B0E84;
		  /* 821B0E84h */ case    3:  		/* li R6, 26 */
		/* 821B0E84h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B0E84h case    3:*/		return 0x821B0E88;
		  /* 821B0E88h */ case    4:  		/* li R5, 20 */
		/* 821B0E88h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B0E88h case    4:*/		return 0x821B0E8C;
		  /* 821B0E8Ch */ case    5:  		/* mr R4, R30 */
		/* 821B0E8Ch case    5:*/		regs.R4 = regs.R30;
		/* 821B0E8Ch case    5:*/		return 0x821B0E90;
		  /* 821B0E90h */ case    6:  		/* mr R3, R24 */
		/* 821B0E90h case    6:*/		regs.R3 = regs.R24;
		/* 821B0E90h case    6:*/		return 0x821B0E94;
		  /* 821B0E94h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821B0E94h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B0E94h case    7:*/		return 0x821B0E98;
		  /* 821B0E98h */ case    8:  		/* bl -311808 */
		/* 821B0E98h case    8:*/		regs.LR = 0x821B0E9C; return 0x82164C98;
		/* 821B0E98h case    8:*/		return 0x821B0E9C;
		  /* 821B0E9Ch */ case    9:  		/* b 288 */
		/* 821B0E9Ch case    9:*/		return 0x821B0FBC;
		/* 821B0E9Ch case    9:*/		return 0x821B0EA0;
	}
	return 0x821B0EA0;
} // Block from 821B0E78h-821B0EA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B0EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0EA0);
		  /* 821B0EA0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B0EA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B0EA0h case    0:*/		return 0x821B0EA4;
		  /* 821B0EA4h */ case    1:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821B0EA4h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821B0EA4h case    1:*/		return 0x821B0EA8;
		  /* 821B0EA8h */ case    2:  		/* cmplwi CR6, R10, 14080 */
		/* 821B0EA8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821B0EA8h case    2:*/		return 0x821B0EAC;
		  /* 821B0EACh */ case    3:  		/* bc 12, CR6_EQ, 272 */
		/* 821B0EACh case    3:*/		if ( regs.CR[6].eq ) { return 0x821B0FBC;  }
		/* 821B0EACh case    3:*/		return 0x821B0EB0;
		  /* 821B0EB0h */ case    4:  		/* lwz R10, <#[R31 + 28]> */
		/* 821B0EB0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821B0EB0h case    4:*/		return 0x821B0EB4;
		  /* 821B0EB4h */ case    5:  		/* cmplw CR6, R10, R21 */
		/* 821B0EB4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821B0EB4h case    5:*/		return 0x821B0EB8;
		  /* 821B0EB8h */ case    6:  		/* bc 4, CR6_EQ, 260 */
		/* 821B0EB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B0FBC;  }
		/* 821B0EB8h case    6:*/		return 0x821B0EBC;
		  /* 821B0EBCh */ case    7:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B0EBCh case    7:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0EBCh case    7:*/		return 0x821B0EC0;
		  /* 821B0EC0h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821B0EC0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B0ED4;  }
		/* 821B0EC0h case    8:*/		return 0x821B0EC4;
		  /* 821B0EC4h */ case    9:  		/* mr R4, R31 */
		/* 821B0EC4h case    9:*/		regs.R4 = regs.R31;
		/* 821B0EC4h case    9:*/		return 0x821B0EC8;
		  /* 821B0EC8h */ case   10:  		/* lwz R5, <#[R24 + 660]> */
		/* 821B0EC8h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000294) );
		/* 821B0EC8h case   10:*/		return 0x821B0ECC;
		  /* 821B0ECCh */ case   11:  		/* mr R3, R24 */
		/* 821B0ECCh case   11:*/		regs.R3 = regs.R24;
		/* 821B0ECCh case   11:*/		return 0x821B0ED0;
		  /* 821B0ED0h */ case   12:  		/* bl 48952 */
		/* 821B0ED0h case   12:*/		regs.LR = 0x821B0ED4; return 0x821BCE08;
		/* 821B0ED0h case   12:*/		return 0x821B0ED4;
	}
	return 0x821B0ED4;
} // Block from 821B0EA0h-821B0ED4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B0ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0ED4);
		  /* 821B0ED4h */ case    0:  		/* mr R3, R31 */
		/* 821B0ED4h case    0:*/		regs.R3 = regs.R31;
		/* 821B0ED4h case    0:*/		return 0x821B0ED8;
		  /* 821B0ED8h */ case    1:  		/* bl -262440 */
		/* 821B0ED8h case    1:*/		regs.LR = 0x821B0EDC; return 0x82170DB0;
		/* 821B0ED8h case    1:*/		return 0x821B0EDC;
		  /* 821B0EDCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0EDCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0EDCh case    2:*/		return 0x821B0EE0;
		  /* 821B0EE0h */ case    3:  		/* bc 4, CR0_EQ, 68 */
		/* 821B0EE0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B0F24;  }
		/* 821B0EE0h case    3:*/		return 0x821B0EE4;
		  /* 821B0EE4h */ case    4:  		/* mr R4, R31 */
		/* 821B0EE4h case    4:*/		regs.R4 = regs.R31;
		/* 821B0EE4h case    4:*/		return 0x821B0EE8;
		  /* 821B0EE8h */ case    5:  		/* mr R3, R24 */
		/* 821B0EE8h case    5:*/		regs.R3 = regs.R24;
		/* 821B0EE8h case    5:*/		return 0x821B0EEC;
		  /* 821B0EECh */ case    6:  		/* bl -85844 */
		/* 821B0EECh case    6:*/		regs.LR = 0x821B0EF0; return 0x8219BF98;
		/* 821B0EECh case    6:*/		return 0x821B0EF0;
		  /* 821B0EF0h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0EF0h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0EF0h case    7:*/		return 0x821B0EF4;
		  /* 821B0EF4h */ case    8:  		/* bc 4, CR0_EQ, 32 */
		/* 821B0EF4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B0F14;  }
		/* 821B0EF4h case    8:*/		return 0x821B0EF8;
		  /* 821B0EF8h */ case    9:  		/* mr R6, R21 */
		/* 821B0EF8h case    9:*/		regs.R6 = regs.R21;
		/* 821B0EF8h case    9:*/		return 0x821B0EFC;
		  /* 821B0EFCh */ case   10:  		/* mr R5, R22 */
		/* 821B0EFCh case   10:*/		regs.R5 = regs.R22;
		/* 821B0EFCh case   10:*/		return 0x821B0F00;
		  /* 821B0F00h */ case   11:  		/* mr R4, R31 */
		/* 821B0F00h case   11:*/		regs.R4 = regs.R31;
		/* 821B0F00h case   11:*/		return 0x821B0F04;
		  /* 821B0F04h */ case   12:  		/* mr R3, R24 */
		/* 821B0F04h case   12:*/		regs.R3 = regs.R24;
		/* 821B0F04h case   12:*/		return 0x821B0F08;
		  /* 821B0F08h */ case   13:  		/* bl -36224 */
		/* 821B0F08h case   13:*/		regs.LR = 0x821B0F0C; return 0x821A8188;
		/* 821B0F08h case   13:*/		return 0x821B0F0C;
		  /* 821B0F0Ch */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0F0Ch case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0F0Ch case   14:*/		return 0x821B0F10;
		  /* 821B0F10h */ case   15:  		/* bc 4, CR0_EQ, 192 */
		/* 821B0F10h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B0FD0;  }
		/* 821B0F10h case   15:*/		return 0x821B0F14;
	}
	return 0x821B0F14;
} // Block from 821B0ED4h-821B0F14h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B0F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0F14);
		  /* 821B0F14h */ case    0:  		/* mr R3, R31 */
		/* 821B0F14h case    0:*/		regs.R3 = regs.R31;
		/* 821B0F14h case    0:*/		return 0x821B0F18;
		  /* 821B0F18h */ case    1:  		/* bl -86568 */
		/* 821B0F18h case    1:*/		regs.LR = 0x821B0F1C; return 0x8219BCF0;
		/* 821B0F18h case    1:*/		return 0x821B0F1C;
		  /* 821B0F1Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0F1Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0F1Ch case    2:*/		return 0x821B0F20;
		  /* 821B0F20h */ case    3:  		/* bc 12, CR0_EQ, 156 */
		/* 821B0F20h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B0FBC;  }
		/* 821B0F20h case    3:*/		return 0x821B0F24;
	}
	return 0x821B0F24;
} // Block from 821B0F14h-821B0F24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0F24);
		  /* 821B0F24h */ case    0:  		/* mr R4, R31 */
		/* 821B0F24h case    0:*/		regs.R4 = regs.R31;
		/* 821B0F24h case    0:*/		return 0x821B0F28;
		  /* 821B0F28h */ case    1:  		/* mr R3, R24 */
		/* 821B0F28h case    1:*/		regs.R3 = regs.R24;
		/* 821B0F28h case    1:*/		return 0x821B0F2C;
		  /* 821B0F2Ch */ case    2:  		/* bl -83436 */
		/* 821B0F2Ch case    2:*/		regs.LR = 0x821B0F30; return 0x8219C940;
		/* 821B0F2Ch case    2:*/		return 0x821B0F30;
		  /* 821B0F30h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B0F30h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B0F30h case    3:*/		return 0x821B0F34;
		  /* 821B0F34h */ case    4:  		/* bc 4, CR0_EQ, 136 */
		/* 821B0F34h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B0FBC;  }
		/* 821B0F34h case    4:*/		return 0x821B0F38;
		  /* 821B0F38h */ case    5:  		/* cmplwi CR6, R23, 0 */
		/* 821B0F38h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B0F38h case    5:*/		return 0x821B0F3C;
		  /* 821B0F3Ch */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 821B0F3Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B0F68;  }
		/* 821B0F3Ch case    6:*/		return 0x821B0F40;
		  /* 821B0F40h */ case    7:  		/* li R5, 38 */
		/* 821B0F40h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B0F40h case    7:*/		return 0x821B0F44;
		  /* 821B0F44h */ case    8:  		/* li R4, 8 */
		/* 821B0F44h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B0F44h case    8:*/		return 0x821B0F48;
		  /* 821B0F48h */ case    9:  		/* mr R3, R24 */
		/* 821B0F48h case    9:*/		regs.R3 = regs.R24;
		/* 821B0F48h case    9:*/		return 0x821B0F4C;
		  /* 821B0F4Ch */ case   10:  		/* bl -312924 */
		/* 821B0F4Ch case   10:*/		regs.LR = 0x821B0F50; return 0x821648F0;
		/* 821B0F4Ch case   10:*/		return 0x821B0F50;
		  /* 821B0F50h */ case   11:  		/* addi R11, R3, 4 */
		/* 821B0F50h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B0F50h case   11:*/		return 0x821B0F54;
		  /* 821B0F54h */ case   12:  		/* ori R10, R3, 1 */
		/* 821B0F54h case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B0F54h case   12:*/		return 0x821B0F58;
		  /* 821B0F58h */ case   13:  		/* ori R11, R11, 1 */
		/* 821B0F58h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B0F58h case   13:*/		return 0x821B0F5C;
		  /* 821B0F5Ch */ case   14:  		/* mr R23, R3 */
		/* 821B0F5Ch case   14:*/		regs.R23 = regs.R3;
		/* 821B0F5Ch case   14:*/		return 0x821B0F60;
		  /* 821B0F60h */ case   15:  		/* stw R10, <#[R3 + 4]> */
		/* 821B0F60h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B0F60h case   15:*/		return 0x821B0F64;
		  /* 821B0F64h */ case   16:  		/* stw R11, <#[R3]> */
		/* 821B0F64h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B0F64h case   16:*/		return 0x821B0F68;
	}
	return 0x821B0F68;
} // Block from 821B0F24h-821B0F68h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B0F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0F68);
		  /* 821B0F68h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821B0F68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821B0F68h case    0:*/		return 0x821B0F6C;
		  /* 821B0F6Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B0F6Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B0F6Ch case    1:*/		return 0x821B0F70;
		  /* 821B0F70h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821B0F70h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B0F98;  }
		/* 821B0F70h case    2:*/		return 0x821B0F74;
		  /* 821B0F74h */ case    3:  		/* lwz R11, <#[R23]> */
		/* 821B0F74h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B0F74h case    3:*/		return 0x821B0F78;
		  /* 821B0F78h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B0F78h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B0F78h case    4:*/		return 0x821B0F7C;
		  /* 821B0F7Ch */ case    5:  		/* addic. R3, R11, -4 */
		/* 821B0F7Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821B0F7Ch case    5:*/		return 0x821B0F80;
		  /* 821B0F80h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821B0F80h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B0F98;  }
		/* 821B0F80h case    6:*/		return 0x821B0F84;
		  /* 821B0F84h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B0F84h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B0F84h case    7:*/		return 0x821B0F88;
		  /* 821B0F88h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821B0F88h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B0F88h case    8:*/		return 0x821B0F8C;
		  /* 821B0F8Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 821B0F8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B0F8Ch case    9:*/		return 0x821B0F90;
		  /* 821B0F90h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821B0F90h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B0F90h case   10:*/		return 0x821B0F94;
		  /* 821B0F94h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821B0F94h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821B0FA4;  }
		/* 821B0F94h case   11:*/		return 0x821B0F98;
	}
	return 0x821B0F98;
} // Block from 821B0F68h-821B0F98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B0F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0F98);
		  /* 821B0F98h */ case    0:  		/* li R4, 1 */
		/* 821B0F98h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B0F98h case    0:*/		return 0x821B0F9C;
		  /* 821B0F9Ch */ case    1:  		/* mr R3, R23 */
		/* 821B0F9Ch case    1:*/		regs.R3 = regs.R23;
		/* 821B0F9Ch case    1:*/		return 0x821B0FA0;
		  /* 821B0FA0h */ case    2:  		/* bl -147160 */
		/* 821B0FA0h case    2:*/		regs.LR = 0x821B0FA4; return 0x8218D0C8;
		/* 821B0FA0h case    2:*/		return 0x821B0FA4;
	}
	return 0x821B0FA4;
} // Block from 821B0F98h-821B0FA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B0FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0FA4);
		  /* 821B0FA4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B0FA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B0FA4h case    0:*/		return 0x821B0FA8;
		  /* 821B0FA8h */ case    1:  		/* addi R10, R11, 4 */
		/* 821B0FA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B0FA8h case    1:*/		return 0x821B0FAC;
		  /* 821B0FACh */ case    2:  		/* addi R9, R11, 1 */
		/* 821B0FACh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821B0FACh case    2:*/		return 0x821B0FB0;
		  /* 821B0FB0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821B0FB0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821B0FB0h case    3:*/		return 0x821B0FB4;
		  /* 821B0FB4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821B0FB4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821B0FB4h case    4:*/		return 0x821B0FB8;
		  /* 821B0FB8h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821B0FB8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821B0FB8h case    5:*/		return 0x821B0FBC;
	}
	return 0x821B0FBC;
} // Block from 821B0FA4h-821B0FBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B0FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0FBC);
		  /* 821B0FBCh */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821B0FBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B0FBCh case    0:*/		return 0x821B0FC0;
		  /* 821B0FC0h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821B0FC0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821B0FC0h case    1:*/		return 0x821B0FC4;
		  /* 821B0FC4h */ case    2:  		/* bc 4, CR6_EQ, -376 */
		/* 821B0FC4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B0E4C;  }
		/* 821B0FC4h case    2:*/		return 0x821B0FC8;
		  /* 821B0FC8h */ case    3:  		/* addi R29, R30, 8 */
		/* 821B0FC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821B0FC8h case    3:*/		return 0x821B0FCC;
		  /* 821B0FCCh */ case    4:  		/* b -384 */
		/* 821B0FCCh case    4:*/		return 0x821B0E4C;
		/* 821B0FCCh case    4:*/		return 0x821B0FD0;
	}
	return 0x821B0FD0;
} // Block from 821B0FBCh-821B0FD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B0FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0FD0);
		  /* 821B0FD0h */ case    0:  		/* mr R4, R21 */
		/* 821B0FD0h case    0:*/		regs.R4 = regs.R21;
		/* 821B0FD0h case    0:*/		return 0x821B0FD4;
		  /* 821B0FD4h */ case    1:  		/* mr R3, R24 */
		/* 821B0FD4h case    1:*/		regs.R3 = regs.R24;
		/* 821B0FD4h case    1:*/		return 0x821B0FD8;
		  /* 821B0FD8h */ case    2:  		/* bl 470768 */
		/* 821B0FD8h case    2:*/		regs.LR = 0x821B0FDC; return 0x82223EC8;
		/* 821B0FD8h case    2:*/		return 0x821B0FDC;
		  /* 821B0FDCh */ case    3:  		/* b -404 */
		/* 821B0FDCh case    3:*/		return 0x821B0E48;
		/* 821B0FDCh case    3:*/		return 0x821B0FE0;
	}
	return 0x821B0FE0;
} // Block from 821B0FD0h-821B0FE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B0FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B0FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B0FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B0FE0);
		  /* 821B0FE0h */ case    0:  		/* lwz R11, <#[R22 + 8]> */
		/* 821B0FE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821B0FE0h case    0:*/		return 0x821B0FE4;
		  /* 821B0FE4h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B0FE4h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B0FE4h case    1:*/		return 0x821B0FE8;
		  /* 821B0FE8h */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821B0FE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B0FE8h case    2:*/		return 0x821B0FEC;
		  /* 821B0FECh */ case    3:  		/* bc 4, CR6_EQ, 376 */
		/* 821B0FECh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B1164;  }
		/* 821B0FECh case    3:*/		return 0x821B0FF0;
		  /* 821B0FF0h */ case    4:  		/* li R26, 0 */
		/* 821B0FF0h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821B0FF0h case    4:*/		return 0x821B0FF4;
		  /* 821B0FF4h */ case    5:  		/* addi R27, R22, 44 */
		/* 821B0FF4h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R22,0x2C);
		/* 821B0FF4h case    5:*/		return 0x821B0FF8;
		  /* 821B0FF8h */ case    6:  		/* lwz R11, <#[R22 + 8]> */
		/* 821B0FF8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821B0FF8h case    6:*/		return 0x821B0FFC;
		  /* 821B0FFCh */ case    7:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B0FFCh case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B0FFCh case    7:*/		return 0x821B1000;
		  /* 821B1000h */ case    8:  		/* cmplw CR6, R26, R11 */
		/* 821B1000h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821B1000h case    8:*/		return 0x821B1004;
		  /* 821B1004h */ case    9:  		/* bc 4, CR6_LT, 352 */
		/* 821B1004h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821B1164;  }
		/* 821B1004h case    9:*/		return 0x821B1008;
		  /* 821B1008h */ case   10:  		/* lwz R11, <#[R27]> */
		/* 821B1008h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1008h case   10:*/		return 0x821B100C;
		  /* 821B100Ch */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 821B100Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B100Ch case   11:*/		return 0x821B1010;
		  /* 821B1010h */ case   12:  		/* addi R29, R11, 4 */
		/* 821B1010h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4);
		/* 821B1010h case   12:*/		return 0x821B1014;
		  /* 821B1014h */ case   13:  		/* mr R28, R29 */
		/* 821B1014h case   13:*/		regs.R28 = regs.R29;
		/* 821B1014h case   13:*/		return 0x821B1018;
		  /* 821B1018h */ case   14:  		/* lwz R30, <#[R28]> */
		/* 821B1018h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1018h case   14:*/		return 0x821B101C;
		  /* 821B101Ch */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 821B101Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B101Ch case   15:*/		return 0x821B1020;
		  /* 821B1020h */ case   16:  		/* bc 12, CR6_EQ, 312 */
		/* 821B1020h case   16:*/		if ( regs.CR[6].eq ) { return 0x821B1158;  }
		/* 821B1020h case   16:*/		return 0x821B1024;
		  /* 821B1024h */ case   17:  		/* lwz R31, <#[R30 + 16]> */
		/* 821B1024h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821B1024h case   17:*/		return 0x821B1028;
		  /* 821B1028h */ case   18:  		/* cmplwi CR6, R31, 0 */
		/* 821B1028h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1028h case   18:*/		return 0x821B102C;
		  /* 821B102Ch */ case   19:  		/* bc 4, CR6_EQ, 64 */
		/* 821B102Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821B106C;  }
		/* 821B102Ch case   19:*/		return 0x821B1030;
		  /* 821B1030h */ case   20:  		/* lwz R11, <#[R29]> */
		/* 821B1030h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B1030h case   20:*/		return 0x821B1034;
		  /* 821B1034h */ case   21:  		/* mr R10, R29 */
		/* 821B1034h case   21:*/		regs.R10 = regs.R29;
		/* 821B1034h case   21:*/		return 0x821B1038;
		  /* 821B1038h */ case   22:  		/* b 12 */
		/* 821B1038h case   22:*/		return 0x821B1044;
		/* 821B1038h case   22:*/		return 0x821B103C;
		  /* 821B103Ch */ case   23:  		/* addi R10, R11, 8 */
		/* 821B103Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B103Ch case   23:*/		return 0x821B1040;
		  /* 821B1040h */ case   24:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1040h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1040h case   24:*/		return 0x821B1044;
	}
	return 0x821B1044;
} // Block from 821B0FE0h-821B1044h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B1044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1044);
		  /* 821B1044h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 821B1044h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821B1044h case    0:*/		return 0x821B1048;
		  /* 821B1048h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B1048h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B103C;  }
		/* 821B1048h case    1:*/		return 0x821B104C;
		  /* 821B104Ch */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B104Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B104Ch case    2:*/		return 0x821B1050;
		  /* 821B1050h */ case    3:  		/* li R6, 26 */
		/* 821B1050h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B1050h case    3:*/		return 0x821B1054;
		  /* 821B1054h */ case    4:  		/* li R5, 20 */
		/* 821B1054h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B1054h case    4:*/		return 0x821B1058;
		  /* 821B1058h */ case    5:  		/* mr R4, R30 */
		/* 821B1058h case    5:*/		regs.R4 = regs.R30;
		/* 821B1058h case    5:*/		return 0x821B105C;
		  /* 821B105Ch */ case    6:  		/* mr R3, R24 */
		/* 821B105Ch case    6:*/		regs.R3 = regs.R24;
		/* 821B105Ch case    6:*/		return 0x821B1060;
		  /* 821B1060h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821B1060h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B1060h case    7:*/		return 0x821B1064;
		  /* 821B1064h */ case    8:  		/* bl -312268 */
		/* 821B1064h case    8:*/		regs.LR = 0x821B1068; return 0x82164C98;
		/* 821B1064h case    8:*/		return 0x821B1068;
		  /* 821B1068h */ case    9:  		/* b 220 */
		/* 821B1068h case    9:*/		return 0x821B1144;
		/* 821B1068h case    9:*/		return 0x821B106C;
	}
	return 0x821B106C;
} // Block from 821B1044h-821B106Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B106Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B106C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B106C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B106C);
		  /* 821B106Ch */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 821B106Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821B106Ch case    0:*/		return 0x821B1070;
		  /* 821B1070h */ case    1:  		/* cmplw CR6, R11, R21 */
		/* 821B1070h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821B1070h case    1:*/		return 0x821B1074;
		  /* 821B1074h */ case    2:  		/* bc 4, CR6_EQ, 208 */
		/* 821B1074h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B1144;  }
		/* 821B1074h case    2:*/		return 0x821B1078;
		  /* 821B1078h */ case    3:  		/* cmplw CR6, R31, R22 */
		/* 821B1078h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 821B1078h case    3:*/		return 0x821B107C;
		  /* 821B107Ch */ case    4:  		/* bc 12, CR6_EQ, 200 */
		/* 821B107Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821B1144;  }
		/* 821B107Ch case    4:*/		return 0x821B1080;
		  /* 821B1080h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B1080h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1080h case    5:*/		return 0x821B1084;
		  /* 821B1084h */ case    6:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B1084h case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B1084h case    6:*/		return 0x821B1088;
		  /* 821B1088h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821B1088h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B109C;  }
		/* 821B1088h case    7:*/		return 0x821B108C;
		  /* 821B108Ch */ case    8:  		/* mr R4, R31 */
		/* 821B108Ch case    8:*/		regs.R4 = regs.R31;
		/* 821B108Ch case    8:*/		return 0x821B1090;
		  /* 821B1090h */ case    9:  		/* lwz R5, <#[R24 + 660]> */
		/* 821B1090h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000294) );
		/* 821B1090h case    9:*/		return 0x821B1094;
		  /* 821B1094h */ case   10:  		/* mr R3, R24 */
		/* 821B1094h case   10:*/		regs.R3 = regs.R24;
		/* 821B1094h case   10:*/		return 0x821B1098;
		  /* 821B1098h */ case   11:  		/* bl 48496 */
		/* 821B1098h case   11:*/		regs.LR = 0x821B109C; return 0x821BCE08;
		/* 821B1098h case   11:*/		return 0x821B109C;
	}
	return 0x821B109C;
} // Block from 821B106Ch-821B109Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B109Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B109C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B109C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B109C);
		  /* 821B109Ch */ case    0:  		/* mr R3, R31 */
		/* 821B109Ch case    0:*/		regs.R3 = regs.R31;
		/* 821B109Ch case    0:*/		return 0x821B10A0;
		  /* 821B10A0h */ case    1:  		/* bl -86960 */
		/* 821B10A0h case    1:*/		regs.LR = 0x821B10A4; return 0x8219BCF0;
		/* 821B10A0h case    1:*/		return 0x821B10A4;
		  /* 821B10A4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B10A4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B10A4h case    2:*/		return 0x821B10A8;
		  /* 821B10A8h */ case    3:  		/* bc 12, CR0_EQ, 156 */
		/* 821B10A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B1144;  }
		/* 821B10A8h case    3:*/		return 0x821B10AC;
		  /* 821B10ACh */ case    4:  		/* mr R4, R31 */
		/* 821B10ACh case    4:*/		regs.R4 = regs.R31;
		/* 821B10ACh case    4:*/		return 0x821B10B0;
		  /* 821B10B0h */ case    5:  		/* mr R3, R24 */
		/* 821B10B0h case    5:*/		regs.R3 = regs.R24;
		/* 821B10B0h case    5:*/		return 0x821B10B4;
		  /* 821B10B4h */ case    6:  		/* bl -83828 */
		/* 821B10B4h case    6:*/		regs.LR = 0x821B10B8; return 0x8219C940;
		/* 821B10B4h case    6:*/		return 0x821B10B8;
		  /* 821B10B8h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B10B8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B10B8h case    7:*/		return 0x821B10BC;
		  /* 821B10BCh */ case    8:  		/* bc 4, CR0_EQ, 136 */
		/* 821B10BCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B1144;  }
		/* 821B10BCh case    8:*/		return 0x821B10C0;
		  /* 821B10C0h */ case    9:  		/* cmplwi CR6, R23, 0 */
		/* 821B10C0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B10C0h case    9:*/		return 0x821B10C4;
		  /* 821B10C4h */ case   10:  		/* bc 4, CR6_EQ, 44 */
		/* 821B10C4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821B10F0;  }
		/* 821B10C4h case   10:*/		return 0x821B10C8;
		  /* 821B10C8h */ case   11:  		/* li R5, 38 */
		/* 821B10C8h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B10C8h case   11:*/		return 0x821B10CC;
		  /* 821B10CCh */ case   12:  		/* li R4, 8 */
		/* 821B10CCh case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B10CCh case   12:*/		return 0x821B10D0;
		  /* 821B10D0h */ case   13:  		/* mr R3, R24 */
		/* 821B10D0h case   13:*/		regs.R3 = regs.R24;
		/* 821B10D0h case   13:*/		return 0x821B10D4;
		  /* 821B10D4h */ case   14:  		/* bl -313316 */
		/* 821B10D4h case   14:*/		regs.LR = 0x821B10D8; return 0x821648F0;
		/* 821B10D4h case   14:*/		return 0x821B10D8;
		  /* 821B10D8h */ case   15:  		/* addi R11, R3, 4 */
		/* 821B10D8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B10D8h case   15:*/		return 0x821B10DC;
		  /* 821B10DCh */ case   16:  		/* ori R10, R3, 1 */
		/* 821B10DCh case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B10DCh case   16:*/		return 0x821B10E0;
		  /* 821B10E0h */ case   17:  		/* ori R11, R11, 1 */
		/* 821B10E0h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B10E0h case   17:*/		return 0x821B10E4;
		  /* 821B10E4h */ case   18:  		/* mr R23, R3 */
		/* 821B10E4h case   18:*/		regs.R23 = regs.R3;
		/* 821B10E4h case   18:*/		return 0x821B10E8;
		  /* 821B10E8h */ case   19:  		/* stw R10, <#[R3 + 4]> */
		/* 821B10E8h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B10E8h case   19:*/		return 0x821B10EC;
		  /* 821B10ECh */ case   20:  		/* stw R11, <#[R3]> */
		/* 821B10ECh case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B10ECh case   20:*/		return 0x821B10F0;
	}
	return 0x821B10F0;
} // Block from 821B109Ch-821B10F0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B10F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B10F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B10F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B10F0);
		  /* 821B10F0h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821B10F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821B10F0h case    0:*/		return 0x821B10F4;
		  /* 821B10F4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B10F4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B10F4h case    1:*/		return 0x821B10F8;
		  /* 821B10F8h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821B10F8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B1120;  }
		/* 821B10F8h case    2:*/		return 0x821B10FC;
		  /* 821B10FCh */ case    3:  		/* lwz R11, <#[R23]> */
		/* 821B10FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B10FCh case    3:*/		return 0x821B1100;
		  /* 821B1100h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B1100h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B1100h case    4:*/		return 0x821B1104;
		  /* 821B1104h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821B1104h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821B1104h case    5:*/		return 0x821B1108;
		  /* 821B1108h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821B1108h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B1120;  }
		/* 821B1108h case    6:*/		return 0x821B110C;
		  /* 821B110Ch */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B110Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B110Ch case    7:*/		return 0x821B1110;
		  /* 821B1110h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821B1110h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B1110h case    8:*/		return 0x821B1114;
		  /* 821B1114h */ case    9:  		/* addi R11, R11, 1 */
		/* 821B1114h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B1114h case    9:*/		return 0x821B1118;
		  /* 821B1118h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821B1118h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B1118h case   10:*/		return 0x821B111C;
		  /* 821B111Ch */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821B111Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x821B112C;  }
		/* 821B111Ch case   11:*/		return 0x821B1120;
	}
	return 0x821B1120;
} // Block from 821B10F0h-821B1120h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B1120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1120);
		  /* 821B1120h */ case    0:  		/* li R4, 1 */
		/* 821B1120h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B1120h case    0:*/		return 0x821B1124;
		  /* 821B1124h */ case    1:  		/* mr R3, R23 */
		/* 821B1124h case    1:*/		regs.R3 = regs.R23;
		/* 821B1124h case    1:*/		return 0x821B1128;
		  /* 821B1128h */ case    2:  		/* bl -147552 */
		/* 821B1128h case    2:*/		regs.LR = 0x821B112C; return 0x8218D0C8;
		/* 821B1128h case    2:*/		return 0x821B112C;
	}
	return 0x821B112C;
} // Block from 821B1120h-821B112Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B112Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B112C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B112C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B112C);
		  /* 821B112Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B112Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B112Ch case    0:*/		return 0x821B1130;
		  /* 821B1130h */ case    1:  		/* addi R10, R11, 4 */
		/* 821B1130h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B1130h case    1:*/		return 0x821B1134;
		  /* 821B1134h */ case    2:  		/* addi R9, R11, 1 */
		/* 821B1134h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821B1134h case    2:*/		return 0x821B1138;
		  /* 821B1138h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821B1138h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821B1138h case    3:*/		return 0x821B113C;
		  /* 821B113Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821B113Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821B113Ch case    4:*/		return 0x821B1140;
		  /* 821B1140h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821B1140h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821B1140h case    5:*/		return 0x821B1144;
	}
	return 0x821B1144;
} // Block from 821B112Ch-821B1144h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B1144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1144);
		  /* 821B1144h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821B1144h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1144h case    0:*/		return 0x821B1148;
		  /* 821B1148h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821B1148h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821B1148h case    1:*/		return 0x821B114C;
		  /* 821B114Ch */ case    2:  		/* bc 4, CR6_EQ, -308 */
		/* 821B114Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B1018;  }
		/* 821B114Ch case    2:*/		return 0x821B1150;
		  /* 821B1150h */ case    3:  		/* addi R28, R30, 8 */
		/* 821B1150h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x8);
		/* 821B1150h case    3:*/		return 0x821B1154;
		  /* 821B1154h */ case    4:  		/* b -316 */
		/* 821B1154h case    4:*/		return 0x821B1018;
		/* 821B1154h case    4:*/		return 0x821B1158;
	}
	return 0x821B1158;
} // Block from 821B1144h-821B1158h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B1158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1158);
		  /* 821B1158h */ case    0:  		/* addi R26, R26, 1 */
		/* 821B1158h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821B1158h case    0:*/		return 0x821B115C;
		  /* 821B115Ch */ case    1:  		/* addi R27, R27, 4 */
		/* 821B115Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821B115Ch case    1:*/		return 0x821B1160;
		  /* 821B1160h */ case    2:  		/* b -360 */
		/* 821B1160h case    2:*/		return 0x821B0FF8;
		/* 821B1160h case    2:*/		return 0x821B1164;
	}
	return 0x821B1164;
} // Block from 821B1158h-821B1164h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B1164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1164);
		  /* 821B1164h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821B1164h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B1164h case    0:*/		return 0x821B1168;
		  /* 821B1168h */ case    1:  		/* bc 12, CR6_EQ, 816 */
		/* 821B1168h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B1498;  }
		/* 821B1168h case    1:*/		return 0x821B116C;
		  /* 821B116Ch */ case    2:  		/* lwz R11, <#[R23 + 4]> */
		/* 821B116Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821B116Ch case    2:*/		return 0x821B1170;
		  /* 821B1170h */ case    3:  		/* li R29, 0 */
		/* 821B1170h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821B1170h case    3:*/		return 0x821B1174;
		  /* 821B1174h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B1174h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1174h case    4:*/		return 0x821B1178;
		  /* 821B1178h */ case    5:  		/* bc 4, CR0_EQ, 44 */
		/* 821B1178h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B11A4;  }
		/* 821B1178h case    5:*/		return 0x821B117C;
		  /* 821B117Ch */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821B117Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B117Ch case    6:*/		return 0x821B1180;
		  /* 821B1180h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 821B1180h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B11A4;  }
		/* 821B1180h case    7:*/		return 0x821B1184;
		  /* 821B1184h */ case    8:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821B1184h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821B1184h case    8:*/		return 0x821B1188;
		  /* 821B1188h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1188h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1188h case    9:*/		return 0x821B118C;
		  /* 821B118Ch */ case   10:  		/* add R29, R11, R29 */
		/* 821B118Ch case   10:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821B118Ch case   10:*/		return 0x821B1190;
		  /* 821B1190h */ case   11:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B1190h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B1190h case   11:*/		return 0x821B1194;
		  /* 821B1194h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B1194h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1194h case   12:*/		return 0x821B1198;
		  /* 821B1198h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821B1198h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821B11A4;  }
		/* 821B1198h case   13:*/		return 0x821B119C;
		  /* 821B119Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821B119Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B119Ch case   14:*/		return 0x821B11A0;
		  /* 821B11A0h */ case   15:  		/* bc 4, CR6_EQ, -28 */
		/* 821B11A0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821B1184;  }
		/* 821B11A0h case   15:*/		return 0x821B11A4;
	}
	return 0x821B11A4;
} // Block from 821B1164h-821B11A4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B11A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B11A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B11A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B11A4);
		  /* 821B11A4h */ case    0:  		/* mulli R25, R29, 28 */
		/* 821B11A4h case    0:*/		cpu::op::mulli<0>(regs,&regs.R25,regs.R29,0x1C);
		/* 821B11A4h case    0:*/		return 0x821B11A8;
		  /* 821B11A8h */ case    1:  		/* li R5, 0 */
		/* 821B11A8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B11A8h case    1:*/		return 0x821B11AC;
		  /* 821B11ACh */ case    2:  		/* mr R4, R25 */
		/* 821B11ACh case    2:*/		regs.R4 = regs.R25;
		/* 821B11ACh case    2:*/		return 0x821B11B0;
		  /* 821B11B0h */ case    3:  		/* mr R3, R24 */
		/* 821B11B0h case    3:*/		regs.R3 = regs.R24;
		/* 821B11B0h case    3:*/		return 0x821B11B4;
		  /* 821B11B4h */ case    4:  		/* bl -311676 */
		/* 821B11B4h case    4:*/		regs.LR = 0x821B11B8; return 0x82165038;
		/* 821B11B4h case    4:*/		return 0x821B11B8;
		  /* 821B11B8h */ case    5:  		/* mr R26, R3 */
		/* 821B11B8h case    5:*/		regs.R26 = regs.R3;
		/* 821B11B8h case    5:*/		return 0x821B11BC;
		  /* 821B11BCh */ case    6:  		/* addi R30, R3, -28 */
		/* 821B11BCh case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0xFFFFFFE4);
		/* 821B11BCh case    6:*/		return 0x821B11C0;
		  /* 821B11C0h */ case    7:  		/* lwz R11, <#[R23 + 4]> */
		/* 821B11C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821B11C0h case    7:*/		return 0x821B11C4;
		  /* 821B11C4h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B11C4h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B11C4h case    8:*/		return 0x821B11C8;
		  /* 821B11C8h */ case    9:  		/* bc 4, CR0_EQ, 116 */
		/* 821B11C8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821B123C;  }
		/* 821B11C8h case    9:*/		return 0x821B11CC;
		  /* 821B11CCh */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821B11CCh case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B11CCh case   10:*/		return 0x821B11D0;
		  /* 821B11D0h */ case   11:  		/* bc 12, CR0_EQ, 108 */
		/* 821B11D0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B123C;  }
		/* 821B11D0h case   11:*/		return 0x821B11D4;
		  /* 821B11D4h */ case   12:  		/* lwz R11, <#[R23]> */
		/* 821B11D4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B11D4h case   12:*/		return 0x821B11D8;
		  /* 821B11D8h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B11D8h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B11D8h case   13:*/		return 0x821B11DC;
		  /* 821B11DCh */ case   14:  		/* addi R4, R11, -4 */
		/* 821B11DCh case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B11DCh case   14:*/		return 0x821B11E0;
		  /* 821B11E0h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B11E0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B11E0h case   15:*/		return 0x821B11E4;
		  /* 821B11E4h */ case   16:  		/* addi R10, R11, 3 */
		/* 821B11E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B11E4h case   16:*/		return 0x821B11E8;
		  /* 821B11E8h */ case   17:  		/* addic. R11, R11, -1 */
		/* 821B11E8h case   17:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B11E8h case   17:*/		return 0x821B11EC;
		  /* 821B11ECh */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B11ECh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B11ECh case   18:*/		return 0x821B11F0;
		  /* 821B11F0h */ case   19:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B11F0h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B11F0h case   19:*/		return 0x821B11F4;
		  /* 821B11F4h */ case   20:  		/* stw R11, <#[R4 + 8]> */
		/* 821B11F4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B11F4h case   20:*/		return 0x821B11F8;
		  /* 821B11F8h */ case   21:  		/* bc 4, CR0_EQ, 60 */
		/* 821B11F8h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821B1234;  }
		/* 821B11F8h case   21:*/		return 0x821B11FC;
		  /* 821B11FCh */ case   22:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B11FCh case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B11FCh case   22:*/		return 0x821B1200;
		  /* 821B1200h */ case   23:  		/* mr R3, R23 */
		/* 821B1200h case   23:*/		regs.R3 = regs.R23;
		/* 821B1200h case   23:*/		return 0x821B1204;
		  /* 821B1204h */ case   24:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B1204h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B1204h case   24:*/		return 0x821B1208;
		  /* 821B1208h */ case   25:  		/* lwz R9, <#[R11]> */
		/* 821B1208h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1208h case   25:*/		return 0x821B120C;
		  /* 821B120Ch */ case   26:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B120Ch case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B120Ch case   26:*/		return 0x821B1210;
		  /* 821B1210h */ case   27:  		/* stw R9, <#[R10]> */
		/* 821B1210h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B1210h case   27:*/		return 0x821B1214;
		  /* 821B1214h */ case   28:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B1214h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B1214h case   28:*/		return 0x821B1218;
		  /* 821B1218h */ case   29:  		/* lwz R11, <#[R11]> */
		/* 821B1218h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1218h case   29:*/		return 0x821B121C;
		  /* 821B121Ch */ case   30:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B121Ch case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B121Ch case   30:*/		return 0x821B1220;
		  /* 821B1220h */ case   31:  		/* stw R10, <#[R11]> */
		/* 821B1220h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1220h case   31:*/		return 0x821B1224;
		  /* 821B1224h */ case   32:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B1224h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B1224h case   32:*/		return 0x821B1228;
		  /* 821B1228h */ case   33:  		/* addi R11, R11, 4 */
		/* 821B1228h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B1228h case   33:*/		return 0x821B122C;
		  /* 821B122Ch */ case   34:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B122Ch case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B122Ch case   34:*/		return 0x821B1230;
		  /* 821B1230h */ case   35:  		/* bl -390184 */
		/* 821B1230h case   35:*/		regs.LR = 0x821B1234; return 0x82151E08;
		/* 821B1230h case   35:*/		return 0x821B1234;
	}
	return 0x821B1234;
} // Block from 821B11A4h-821B1234h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821B1234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1234);
		  /* 821B1234h */ case    0:  		/* stwu R31, <#[R30 + 28]> */
		/* 821B1234h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		regs.R30 = (uint32)(regs.R30 + 0x0000001C);
		/* 821B1234h case    0:*/		return 0x821B1238;
		  /* 821B1238h */ case    1:  		/* b -120 */
		/* 821B1238h case    1:*/		return 0x821B11C0;
		/* 821B1238h case    1:*/		return 0x821B123C;
	}
	return 0x821B123C;
} // Block from 821B1234h-821B123Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B123Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B123C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B123C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B123C);
		  /* 821B123Ch */ case    0:  		/* lwz R10, <#[R24 + 976]> */
		/* 821B123Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x000003D0) );
		/* 821B123Ch case    0:*/		return 0x821B1240;
		  /* 821B1240h */ case    1:  		/* addi R11, R24, 972 */
		/* 821B1240h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x3CC);
		/* 821B1240h case    1:*/		return 0x821B1244;
		  /* 821B1244h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821B1244h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B1244h case    2:*/		return 0x821B1248;
		  /* 821B1248h */ case    3:  		/* stw R10, <#[R23]> */
		/* 821B1248h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821B1248h case    3:*/		return 0x821B124C;
		  /* 821B124Ch */ case    4:  		/* stw R23, <#[R24 + 976]> */
		/* 821B124Ch case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R24 + 0x000003D0) );
		/* 821B124Ch case    4:*/		return 0x821B1250;
		  /* 821B1250h */ case    5:  		/* li R23, 0 */
		/* 821B1250h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821B1250h case    5:*/		return 0x821B1254;
		  /* 821B1254h */ case    6:  		/* bc 12, CR6_EQ, 332 */
		/* 821B1254h case    6:*/		if ( regs.CR[6].eq ) { return 0x821B13A0;  }
		/* 821B1254h case    6:*/		return 0x821B1258;
		  /* 821B1258h */ case    7:  		/* mr R31, R26 */
		/* 821B1258h case    7:*/		regs.R31 = regs.R26;
		/* 821B1258h case    7:*/		return 0x821B125C;
		  /* 821B125Ch */ case    8:  		/* mr R27, R29 */
		/* 821B125Ch case    8:*/		regs.R27 = regs.R29;
		/* 821B125Ch case    8:*/		return 0x821B1260;
		  /* 821B1260h */ case    9:  		/* lwz R3, <#[R31]> */
		/* 821B1260h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821B1260h case    9:*/		return 0x821B1264;
		  /* 821B1264h */ case   10:  		/* bl -263348 */
		/* 821B1264h case   10:*/		regs.LR = 0x821B1268; return 0x82170DB0;
		/* 821B1264h case   10:*/		return 0x821B1268;
		  /* 821B1268h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1268h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1268h case   11:*/		return 0x821B126C;
		  /* 821B126Ch */ case   12:  		/* bc 12, CR0_EQ, 296 */
		/* 821B126Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821B1394;  }
		/* 821B126Ch case   12:*/		return 0x821B1270;
		  /* 821B1270h */ case   13:  		/* mr R30, R26 */
		/* 821B1270h case   13:*/		regs.R30 = regs.R26;
		/* 821B1270h case   13:*/		return 0x821B1274;
		  /* 821B1274h */ case   14:  		/* mr R28, R29 */
		/* 821B1274h case   14:*/		regs.R28 = regs.R29;
		/* 821B1274h case   14:*/		return 0x821B1278;
		  /* 821B1278h */ case   15:  		/* lwz R4, <#[R31]> */
		/* 821B1278h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821B1278h case   15:*/		return 0x821B127C;
		  /* 821B127Ch */ case   16:  		/* lwz R5, <#[R30]> */
		/* 821B127Ch case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 821B127Ch case   16:*/		return 0x821B1280;
		  /* 821B1280h */ case   17:  		/* cmplw CR6, R4, R5 */
		/* 821B1280h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R5);
		/* 821B1280h case   17:*/		return 0x821B1284;
		  /* 821B1284h */ case   18:  		/* bc 12, CR6_EQ, 172 */
		/* 821B1284h case   18:*/		if ( regs.CR[6].eq ) { return 0x821B1330;  }
		/* 821B1284h case   18:*/		return 0x821B1288;
		  /* 821B1288h */ case   19:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B1288h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B1288h case   19:*/		return 0x821B128C;
		  /* 821B128Ch */ case   20:  		/* lwz R10, <#[R5 + 8]> */
		/* 821B128Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 821B128Ch case   20:*/		return 0x821B1290;
		  /* 821B1290h */ case   21:  		/* xor R11, R11, R10 */
		/* 821B1290h case   21:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B1290h case   21:*/		return 0x821B1294;
		  /* 821B1294h */ case   22:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821B1294h case   22:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B1294h case   22:*/		return 0x821B1298;
		  /* 821B1298h */ case   23:  		/* bc 4, CR0_EQ, 152 */
		/* 821B1298h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821B1330;  }
		/* 821B1298h case   23:*/		return 0x821B129C;
		  /* 821B129Ch */ case   24:  		/* addi R6, R1, 96 */
		/* 821B129Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821B129Ch case   24:*/		return 0x821B12A0;
		  /* 821B12A0h */ case   25:  		/* mr R3, R24 */
		/* 821B12A0h case   25:*/		regs.R3 = regs.R24;
		/* 821B12A0h case   25:*/		return 0x821B12A4;
		  /* 821B12A4h */ case   26:  		/* bl -74340 */
		/* 821B12A4h case   26:*/		regs.LR = 0x821B12A8; return 0x8219F040;
		/* 821B12A4h case   26:*/		return 0x821B12A8;
		  /* 821B12A8h */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B12A8h case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B12A8h case   27:*/		return 0x821B12AC;
		  /* 821B12ACh */ case   28:  		/* bc 12, CR0_EQ, 132 */
		/* 821B12ACh case   28:*/		if ( regs.CR[0].eq ) { return 0x821B1330;  }
		/* 821B12ACh case   28:*/		return 0x821B12B0;
		  /* 821B12B0h */ case   29:  		/* lwz R9, <#[R1 + 104]> */
		/* 821B12B0h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821B12B0h case   29:*/		return 0x821B12B4;
		  /* 821B12B4h */ case   30:  		/* li R10, 0 */
		/* 821B12B4h case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821B12B4h case   30:*/		return 0x821B12B8;
		  /* 821B12B8h */ case   31:  		/* lwz R11, <#[R31 + 24]> */
		/* 821B12B8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821B12B8h case   31:*/		return 0x821B12BC;
		  /* 821B12BCh */ case   32:  		/* rlwinm. R8, R9, 0, 27, 31 */
		/* 821B12BCh case   32:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R8,regs.R9);
		/* 821B12BCh case   32:*/		return 0x821B12C0;
		  /* 821B12C0h */ case   33:  		/* add R11, R11, R8 */
		/* 821B12C0h case   33:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821B12C0h case   33:*/		return 0x821B12C4;
		  /* 821B12C4h */ case   34:  		/* stw R11, <#[R31 + 24]> */
		/* 821B12C4h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821B12C4h case   34:*/		return 0x821B12C8;
		  /* 821B12C8h */ case   35:  		/* bc 12, CR0_EQ, 104 */
		/* 821B12C8h case   35:*/		if ( regs.CR[0].eq ) { return 0x821B1330;  }
		/* 821B12C8h case   35:*/		return 0x821B12CC;
		  /* 821B12CCh */ case   36:  		/* li R11, 0 */
		/* 821B12CCh case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B12CCh case   36:*/		return 0x821B12D0;
		  /* 821B12D0h */ case   37:  		/* addi R9, R11, 3 */
		/* 821B12D0h case   37:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 821B12D0h case   37:*/		return 0x821B12D4;
		  /* 821B12D4h */ case   38:  		/* rlwinm R7, R11, 29, 3, 28 */
		/* 821B12D4h case   38:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R7,regs.R11);
		/* 821B12D4h case   38:*/		return 0x821B12D8;
	}
	return 0x821B12D8;
} // Block from 821B123Ch-821B12D8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821B12D8h
// Function '?CombineUnrelated@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B12D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B12D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B12D8);
		  /* 821B12D8h */ case    0:  		/* rldicl R9, R9, 0, 58 */
		/* 821B12D8h case    0:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R9);
		/* 821B12D8h case    0:*/		return 0x821B12DC;
		  /* 821B12DCh */ case    1:  		/* li R6, 2 */
		/* 821B12DCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821B12DCh case    1:*/		return 0x821B12E0;
		  /* 821B12E0h */ case    2:  		/* addi R5, R1, 96 */
		/* 821B12E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821B12E0h case    2:*/		return 0x821B12E4;
		  /* 821B12E4h */ case    3:  		/* sld R9, R6, R9 */
		/* 821B12E4h case    3:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821B12E4h case    3:*/		return 0x821B12E8;
		  /* 821B12E8h */ case    4:  		/* ldx R7, <#[R7 + R5]> */
		/* 821B12E8h case    4:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R5 + 0x00000000) );
		/* 821B12E8h case    4:*/		return 0x821B12EC;
		  /* 821B12ECh */ case    5:  		/* addi R9, R9, -1 */
		/* 821B12ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B12ECh case    5:*/		return 0x821B12F0;
		  /* 821B12F0h */ case    6:  		/* rldicl R6, R11, 0, 58 */
		/* 821B12F0h case    6:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R6,regs.R11);
		/* 821B12F0h case    6:*/		return 0x821B12F4;
		  /* 821B12F4h */ case    7:  		/* li R5, -1 */
		/* 821B12F4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xFFFFFFFF);
		/* 821B12F4h case    7:*/		return 0x821B12F8;
		  /* 821B12F8h */ case    8:  		/* and R9, R9, R7 */
		/* 821B12F8h case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821B12F8h case    8:*/		return 0x821B12FC;
		  /* 821B12FCh */ case    9:  		/* sld R7, R5, R6 */
		/* 821B12FCh case    9:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R5,regs.R6);
		/* 821B12FCh case    9:*/		return 0x821B1300;
		  /* 821B1300h */ case   10:  		/* and R9, R9, R7 */
		/* 821B1300h case   10:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821B1300h case   10:*/		return 0x821B1304;
		  /* 821B1304h */ case   11:  		/* addi R10, R10, 1 */
		/* 821B1304h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B1304h case   11:*/		return 0x821B1308;
		  /* 821B1308h */ case   12:  		/* srd R9, R9, R6 */
		/* 821B1308h case   12:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821B1308h case   12:*/		return 0x821B130C;
		  /* 821B130Ch */ case   13:  		/* rlwinm R9, R9, 30, 2, 31 */
		/* 821B130Ch case   13:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R9);
		/* 821B130Ch case   13:*/		return 0x821B1310;
		  /* 821B1310h */ case   14:  		/* addi R11, R11, 4 */
		/* 821B1310h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B1310h case   14:*/		return 0x821B1314;
		  /* 821B1314h */ case   15:  		/* addi R9, R9, 1 */
		/* 821B1314h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821B1314h case   15:*/		return 0x821B1318;
		  /* 821B1318h */ case   16:  		/* cmplw CR6, R10, R8 */
		/* 821B1318h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821B1318h case   16:*/		return 0x821B131C;
		  /* 821B131Ch */ case   17:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821B131Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821B131Ch case   17:*/		return 0x821B1320;
		  /* 821B1320h */ case   18:  		/* lwzx R7, <#[R9 + R31]> */
		/* 821B1320h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 821B1320h case   18:*/		return 0x821B1324;
		  /* 821B1324h */ case   19:  		/* addi R7, R7, 1 */
		/* 821B1324h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821B1324h case   19:*/		return 0x821B1328;
		  /* 821B1328h */ case   20:  		/* stwx R7, <#[R9 + R31]> */
		/* 821B1328h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 821B1328h case   20:*/		return 0x821B132C;
		  /* 821B132Ch */ case   21:  		/* bc 12, CR6_LT, -92 */
		/* 821B132Ch case   21:*/		if ( regs.CR[6].lt ) { return 0x821B12D0;  }
		/* 821B132Ch case   21:*/		return 0x821B1330;
	}
	return 0x821B1330;
} // Block from 821B12D8h-821B1330h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B1330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1330);
		  /* 821B1330h */ case    0:  		/* addic. R28, R28, -1 */
		/* 821B1330h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821B1330h case    0:*/		return 0x821B1334;
		  /* 821B1334h */ case    1:  		/* addi R30, R30, 28 */
		/* 821B1334h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1C);
		/* 821B1334h case    1:*/		return 0x821B1338;
		  /* 821B1338h */ case    2:  		/* bc 4, CR0_EQ, -192 */
		/* 821B1338h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B1278;  }
		/* 821B1338h case    2:*/		return 0x821B133C;
		  /* 821B133Ch */ case    3:  		/* lwz R11, <#[R31]> */
		/* 821B133Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B133Ch case    3:*/		return 0x821B1340;
		  /* 821B1340h */ case    4:  		/* li R10, 4 */
		/* 821B1340h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821B1340h case    4:*/		return 0x821B1344;
		  /* 821B1344h */ case    5:  		/* stw R10, <#[R31 + 20]> */
		/* 821B1344h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821B1344h case    5:*/		return 0x821B1348;
		  /* 821B1348h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1348h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1348h case    6:*/		return 0x821B134C;
		  /* 821B134Ch */ case    7:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821B134Ch case    7:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821B134Ch case    7:*/		return 0x821B1350;
		  /* 821B1350h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821B1350h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1350h case    8:*/		return 0x821B1354;
		  /* 821B1354h */ case    9:  		/* bc 12, CR6_EQ, 64 */
		/* 821B1354h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B1394;  }
		/* 821B1354h case    9:*/		return 0x821B1358;
		  /* 821B1358h */ case   10:  		/* addi R10, R11, -1 */
		/* 821B1358h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821B1358h case   10:*/		return 0x821B135C;
		  /* 821B135Ch */ case   11:  		/* lwz R9, <#[R31 + 20]> */
		/* 821B135Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 821B135Ch case   11:*/		return 0x821B1360;
		  /* 821B1360h */ case   12:  		/* andc R10, R11, R10 */
		/* 821B1360h case   12:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821B1360h case   12:*/		return 0x821B1364;
		  /* 821B1364h */ case   13:  		/* cntlzw R10, R10 */
		/* 821B1364h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821B1364h case   13:*/		return 0x821B1368;
		  /* 821B1368h */ case   14:  		/* subfic R10, R10, 31 */
		/* 821B1368h case   14:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821B1368h case   14:*/		return 0x821B136C;
		  /* 821B136Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 821B136Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B136Ch case   15:*/		return 0x821B1370;
		  /* 821B1370h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B1370h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B1370h case   16:*/		return 0x821B1374;
		  /* 821B1374h */ case   17:  		/* lwzx R10, <#[R10 + R31]> */
		/* 821B1374h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821B1374h case   17:*/		return 0x821B1378;
		  /* 821B1378h */ case   18:  		/* cmplw CR6, R10, R9 */
		/* 821B1378h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B1378h case   18:*/		return 0x821B137C;
		  /* 821B137Ch */ case   19:  		/* bc 4, CR6_LT, 8 */
		/* 821B137Ch case   19:*/		if ( !regs.CR[6].lt ) { return 0x821B1384;  }
		/* 821B137Ch case   19:*/		return 0x821B1380;
		  /* 821B1380h */ case   20:  		/* stw R10, <#[R31 + 20]> */
		/* 821B1380h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821B1380h case   20:*/		return 0x821B1384;
	}
	return 0x821B1384;
} // Block from 821B1330h-821B1384h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B1384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1384);
		  /* 821B1384h */ case    0:  		/* addi R10, R11, -1 */
		/* 821B1384h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821B1384h case    0:*/		return 0x821B1388;
		  /* 821B1388h */ case    1:  		/* andc R10, R11, R10 */
		/* 821B1388h case    1:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821B1388h case    1:*/		return 0x821B138C;
		  /* 821B138Ch */ case    2:  		/* subf R11, R10, R11 */
		/* 821B138Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B138Ch case    2:*/		return 0x821B1390;
		  /* 821B1390h */ case    3:  		/* b -64 */
		/* 821B1390h case    3:*/		return 0x821B1350;
		/* 821B1390h case    3:*/		return 0x821B1394;
	}
	return 0x821B1394;
} // Block from 821B1384h-821B1394h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B1394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1394);
		  /* 821B1394h */ case    0:  		/* addic. R27, R27, -1 */
		/* 821B1394h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821B1394h case    0:*/		return 0x821B1398;
		  /* 821B1398h */ case    1:  		/* addi R31, R31, 28 */
		/* 821B1398h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1C);
		/* 821B1398h case    1:*/		return 0x821B139C;
		  /* 821B139Ch */ case    2:  		/* bc 4, CR0_EQ, -316 */
		/* 821B139Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B1260;  }
		/* 821B139Ch case    2:*/		return 0x821B13A0;
	}
	return 0x821B13A0;
} // Block from 821B1394h-821B13A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B13A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B13A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B13A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B13A0);
		  /* 821B13A0h */ case    0:  		/* lis R11, -32230 */
		/* 821B13A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821A);
		/* 821B13A0h case    0:*/		return 0x821B13A4;
		  /* 821B13A4h */ case    1:  		/* li R5, 28 */
		/* 821B13A4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821B13A4h case    1:*/		return 0x821B13A8;
		  /* 821B13A8h */ case    2:  		/* addi R6, R11, -13104 */
		/* 821B13A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCCD0);
		/* 821B13A8h case    2:*/		return 0x821B13AC;
		  /* 821B13ACh */ case    3:  		/* mr R4, R29 */
		/* 821B13ACh case    3:*/		regs.R4 = regs.R29;
		/* 821B13ACh case    3:*/		return 0x821B13B0;
		  /* 821B13B0h */ case    4:  		/* mr R3, R26 */
		/* 821B13B0h case    4:*/		regs.R3 = regs.R26;
		/* 821B13B0h case    4:*/		return 0x821B13B4;
		  /* 821B13B4h */ case    5:  		/* bl -1176532 */
		/* 821B13B4h case    5:*/		regs.LR = 0x821B13B8; return 0x82091FE0;
		/* 821B13B4h case    5:*/		return 0x821B13B8;
		  /* 821B13B8h */ case    6:  		/* li R11, 0 */
		/* 821B13B8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B13B8h case    6:*/		return 0x821B13BC;
		  /* 821B13BCh */ case    7:  		/* li R28, 0 */
		/* 821B13BCh case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821B13BCh case    7:*/		return 0x821B13C0;
		  /* 821B13C0h */ case    8:  		/* stb R11, <#[R1 + 80]> */
		/* 821B13C0h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821B13C0h case    8:*/		return 0x821B13C4;
		  /* 821B13C4h */ case    9:  		/* li R30, 0 */
		/* 821B13C4h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B13C4h case    9:*/		return 0x821B13C8;
		  /* 821B13C8h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 821B13C8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B13C8h case   10:*/		return 0x821B13CC;
		  /* 821B13CCh */ case   11:  		/* bc 12, CR6_EQ, 84 */
		/* 821B13CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821B1420;  }
		/* 821B13CCh case   11:*/		return 0x821B13D0;
		  /* 821B13D0h */ case   12:  		/* mr R31, R26 */
		/* 821B13D0h case   12:*/		regs.R31 = regs.R26;
		/* 821B13D0h case   12:*/		return 0x821B13D4;
		  /* 821B13D4h */ case   13:  		/* addi R10, R1, 80 */
		/* 821B13D4h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821B13D4h case   13:*/		return 0x821B13D8;
		  /* 821B13D8h */ case   14:  		/* lwz R4, <#[R31]> */
		/* 821B13D8h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821B13D8h case   14:*/		return 0x821B13DC;
		  /* 821B13DCh */ case   15:  		/* li R9, 1 */
		/* 821B13DCh case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821B13DCh case   15:*/		return 0x821B13E0;
		  /* 821B13E0h */ case   16:  		/* mr R8, R29 */
		/* 821B13E0h case   16:*/		regs.R8 = regs.R29;
		/* 821B13E0h case   16:*/		return 0x821B13E4;
		  /* 821B13E4h */ case   17:  		/* mr R7, R26 */
		/* 821B13E4h case   17:*/		regs.R7 = regs.R26;
		/* 821B13E4h case   17:*/		return 0x821B13E8;
		  /* 821B13E8h */ case   18:  		/* mr R6, R21 */
		/* 821B13E8h case   18:*/		regs.R6 = regs.R21;
		/* 821B13E8h case   18:*/		return 0x821B13EC;
		  /* 821B13ECh */ case   19:  		/* mr R5, R22 */
		/* 821B13ECh case   19:*/		regs.R5 = regs.R22;
		/* 821B13ECh case   19:*/		return 0x821B13F0;
		  /* 821B13F0h */ case   20:  		/* mr R3, R24 */
		/* 821B13F0h case   20:*/		regs.R3 = regs.R24;
		/* 821B13F0h case   20:*/		return 0x821B13F4;
		  /* 821B13F4h */ case   21:  		/* bl -4012 */
		/* 821B13F4h case   21:*/		regs.LR = 0x821B13F8; return 0x821B0448;
		/* 821B13F4h case   21:*/		return 0x821B13F8;
		  /* 821B13F8h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B13F8h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B13F8h case   22:*/		return 0x821B13FC;
		  /* 821B13FCh */ case   23:  		/* bc 4, CR0_EQ, 28 */
		/* 821B13FCh case   23:*/		if ( !regs.CR[0].eq ) { return 0x821B1418;  }
		/* 821B13FCh case   23:*/		return 0x821B1400;
		  /* 821B1400h */ case   24:  		/* addi R30, R30, 1 */
		/* 821B1400h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B1400h case   24:*/		return 0x821B1404;
		  /* 821B1404h */ case   25:  		/* addi R31, R31, 28 */
		/* 821B1404h case   25:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1C);
		/* 821B1404h case   25:*/		return 0x821B1408;
		  /* 821B1408h */ case   26:  		/* cmplw CR6, R30, R29 */
		/* 821B1408h case   26:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821B1408h case   26:*/		return 0x821B140C;
		  /* 821B140Ch */ case   27:  		/* bc 12, CR6_LT, -56 */
		/* 821B140Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x821B13D4;  }
		/* 821B140Ch case   27:*/		return 0x821B1410;
		  /* 821B1410h */ case   28:  		/* lbz R11, <#[R1 + 80]> */
		/* 821B1410h case   28:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821B1410h case   28:*/		return 0x821B1414;
		  /* 821B1414h */ case   29:  		/* b 12 */
		/* 821B1414h case   29:*/		return 0x821B1420;
		/* 821B1414h case   29:*/		return 0x821B1418;
	}
	return 0x821B1418;
} // Block from 821B13A0h-821B1418h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821B1418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1418);
		  /* 821B1418h */ case    0:  		/* li R28, 1 */
		/* 821B1418h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821B1418h case    0:*/		return 0x821B141C;
		  /* 821B141Ch */ case    1:  		/* li R11, 0 */
		/* 821B141Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B141Ch case    1:*/		return 0x821B1420;
	}
	return 0x821B1420;
} // Block from 821B1418h-821B1420h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1420);
		  /* 821B1420h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B1420h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B1420h case    0:*/		return 0x821B1424;
		  /* 821B1424h */ case    1:  		/* bc 12, CR0_EQ, 88 */
		/* 821B1424h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B147C;  }
		/* 821B1424h case    1:*/		return 0x821B1428;
		  /* 821B1428h */ case    2:  		/* li R30, 0 */
		/* 821B1428h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B1428h case    2:*/		return 0x821B142C;
		  /* 821B142Ch */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821B142Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B142Ch case    3:*/		return 0x821B1430;
		  /* 821B1430h */ case    4:  		/* bc 12, CR6_EQ, 76 */
		/* 821B1430h case    4:*/		if ( regs.CR[6].eq ) { return 0x821B147C;  }
		/* 821B1430h case    4:*/		return 0x821B1434;
		  /* 821B1434h */ case    5:  		/* mr R31, R26 */
		/* 821B1434h case    5:*/		regs.R31 = regs.R26;
		/* 821B1434h case    5:*/		return 0x821B1438;
		  /* 821B1438h */ case    6:  		/* addi R10, R1, 80 */
		/* 821B1438h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821B1438h case    6:*/		return 0x821B143C;
		  /* 821B143Ch */ case    7:  		/* lwz R4, <#[R31]> */
		/* 821B143Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821B143Ch case    7:*/		return 0x821B1440;
		  /* 821B1440h */ case    8:  		/* li R9, 0 */
		/* 821B1440h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B1440h case    8:*/		return 0x821B1444;
		  /* 821B1444h */ case    9:  		/* mr R8, R29 */
		/* 821B1444h case    9:*/		regs.R8 = regs.R29;
		/* 821B1444h case    9:*/		return 0x821B1448;
		  /* 821B1448h */ case   10:  		/* mr R7, R26 */
		/* 821B1448h case   10:*/		regs.R7 = regs.R26;
		/* 821B1448h case   10:*/		return 0x821B144C;
		  /* 821B144Ch */ case   11:  		/* mr R6, R21 */
		/* 821B144Ch case   11:*/		regs.R6 = regs.R21;
		/* 821B144Ch case   11:*/		return 0x821B1450;
		  /* 821B1450h */ case   12:  		/* mr R5, R22 */
		/* 821B1450h case   12:*/		regs.R5 = regs.R22;
		/* 821B1450h case   12:*/		return 0x821B1454;
		  /* 821B1454h */ case   13:  		/* mr R3, R24 */
		/* 821B1454h case   13:*/		regs.R3 = regs.R24;
		/* 821B1454h case   13:*/		return 0x821B1458;
		  /* 821B1458h */ case   14:  		/* bl -4112 */
		/* 821B1458h case   14:*/		regs.LR = 0x821B145C; return 0x821B0448;
		/* 821B1458h case   14:*/		return 0x821B145C;
		  /* 821B145Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B145Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B145Ch case   15:*/		return 0x821B1460;
		  /* 821B1460h */ case   16:  		/* bc 4, CR0_EQ, 24 */
		/* 821B1460h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B1478;  }
		/* 821B1460h case   16:*/		return 0x821B1464;
		  /* 821B1464h */ case   17:  		/* addi R30, R30, 1 */
		/* 821B1464h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B1464h case   17:*/		return 0x821B1468;
		  /* 821B1468h */ case   18:  		/* addi R31, R31, 28 */
		/* 821B1468h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1C);
		/* 821B1468h case   18:*/		return 0x821B146C;
		  /* 821B146Ch */ case   19:  		/* cmplw CR6, R30, R29 */
		/* 821B146Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821B146Ch case   19:*/		return 0x821B1470;
		  /* 821B1470h */ case   20:  		/* bc 12, CR6_LT, -56 */
		/* 821B1470h case   20:*/		if ( regs.CR[6].lt ) { return 0x821B1438;  }
		/* 821B1470h case   20:*/		return 0x821B1474;
		  /* 821B1474h */ case   21:  		/* b 8 */
		/* 821B1474h case   21:*/		return 0x821B147C;
		/* 821B1474h case   21:*/		return 0x821B1478;
	}
	return 0x821B1478;
} // Block from 821B1420h-821B1478h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B1478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1478);
		  /* 821B1478h */ case    0:  		/* li R28, 1 */
		/* 821B1478h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821B1478h case    0:*/		return 0x821B147C;
	}
	return 0x821B147C;
} // Block from 821B1478h-821B147Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B147Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B147C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B147C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B147C);
		  /* 821B147Ch */ case    0:  		/* li R6, 0 */
		/* 821B147Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B147Ch case    0:*/		return 0x821B1480;
		  /* 821B1480h */ case    1:  		/* mr R5, R25 */
		/* 821B1480h case    1:*/		regs.R5 = regs.R25;
		/* 821B1480h case    1:*/		return 0x821B1484;
		  /* 821B1484h */ case    2:  		/* mr R4, R26 */
		/* 821B1484h case    2:*/		regs.R4 = regs.R26;
		/* 821B1484h case    2:*/		return 0x821B1488;
		  /* 821B1488h */ case    3:  		/* mr R3, R24 */
		/* 821B1488h case    3:*/		regs.R3 = regs.R24;
		/* 821B1488h case    3:*/		return 0x821B148C;
		  /* 821B148Ch */ case    4:  		/* bl -280124 */
		/* 821B148Ch case    4:*/		regs.LR = 0x821B1490; return 0x8216CE50;
		/* 821B148Ch case    4:*/		return 0x821B1490;
		  /* 821B1490h */ case    5:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821B1490h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821B1490h case    5:*/		return 0x821B1494;
		  /* 821B1494h */ case    6:  		/* bc 4, CR0_EQ, -1220 */
		/* 821B1494h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B0FD0;  }
		/* 821B1494h case    6:*/		return 0x821B1498;
	}
	return 0x821B1498;
} // Block from 821B147Ch-821B1498h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B1498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1498);
		  /* 821B1498h */ case    0:  		/* addi R1, R1, 224 */
		/* 821B1498h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821B1498h case    0:*/		return 0x821B149C;
		  /* 821B149Ch */ case    1:  		/* b -1180180 */
		/* 821B149Ch case    1:*/		return 0x82091288;
		/* 821B149Ch case    1:*/		return 0x821B14A0;
	}
	return 0x821B14A0;
} // Block from 821B1498h-821B14A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B14A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B14A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B14A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B14A0);
		  /* 821B14A0h */ case    0:  		/* mfspr R12, LR */
		/* 821B14A0h case    0:*/		regs.R12 = regs.LR;
		/* 821B14A0h case    0:*/		return 0x821B14A4;
		  /* 821B14A4h */ case    1:  		/* bl -1180240 */
		/* 821B14A4h case    1:*/		regs.LR = 0x821B14A8; return 0x82091254;
		/* 821B14A4h case    1:*/		return 0x821B14A8;
		  /* 821B14A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821B14A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821B14A8h case    2:*/		return 0x821B14AC;
		  /* 821B14ACh */ case    3:  		/* mr R27, R3 */
		/* 821B14ACh case    3:*/		regs.R27 = regs.R3;
		/* 821B14ACh case    3:*/		return 0x821B14B0;
		  /* 821B14B0h */ case    4:  		/* mr R28, R4 */
		/* 821B14B0h case    4:*/		regs.R28 = regs.R4;
		/* 821B14B0h case    4:*/		return 0x821B14B4;
		  /* 821B14B4h */ case    5:  		/* mr R31, R5 */
		/* 821B14B4h case    5:*/		regs.R31 = regs.R5;
		/* 821B14B4h case    5:*/		return 0x821B14B8;
		  /* 821B14B8h */ case    6:  		/* li R29, 0 */
		/* 821B14B8h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821B14B8h case    6:*/		return 0x821B14BC;
		  /* 821B14BCh */ case    7:  		/* addi R30, R31, 44 */
		/* 821B14BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C);
		/* 821B14BCh case    7:*/		return 0x821B14C0;
		  /* 821B14C0h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B14C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B14C0h case    8:*/		return 0x821B14C4;
		  /* 821B14C4h */ case    9:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B14C4h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B14C4h case    9:*/		return 0x821B14C8;
		  /* 821B14C8h */ case   10:  		/* cmplw CR6, R29, R11 */
		/* 821B14C8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B14C8h case   10:*/		return 0x821B14CC;
		  /* 821B14CCh */ case   11:  		/* bc 4, CR6_LT, 140 */
		/* 821B14CCh case   11:*/		if ( !regs.CR[6].lt ) { return 0x821B1558;  }
		/* 821B14CCh case   11:*/		return 0x821B14D0;
		  /* 821B14D0h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 821B14D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B14D0h case   12:*/		return 0x821B14D4;
		  /* 821B14D4h */ case   13:  		/* lwz R5, <#[R11 + 12]> */
		/* 821B14D4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B14D4h case   13:*/		return 0x821B14D8;
		  /* 821B14D8h */ case   14:  		/* cmplw CR6, R5, R28 */
		/* 821B14D8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R28);
		/* 821B14D8h case   14:*/		return 0x821B14DC;
		  /* 821B14DCh */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 821B14DCh case   15:*/		if ( regs.CR[6].eq ) { return 0x821B1504;  }
		/* 821B14DCh case   15:*/		return 0x821B14E0;
		  /* 821B14E0h */ case   16:  		/* mr R4, R28 */
		/* 821B14E0h case   16:*/		regs.R4 = regs.R28;
		/* 821B14E0h case   16:*/		return 0x821B14E4;
		  /* 821B14E4h */ case   17:  		/* mr R3, R27 */
		/* 821B14E4h case   17:*/		regs.R3 = regs.R27;
		/* 821B14E4h case   17:*/		return 0x821B14E8;
		  /* 821B14E8h */ case   18:  		/* bl -4408 */
		/* 821B14E8h case   18:*/		regs.LR = 0x821B14EC; return 0x821B03B0;
		/* 821B14E8h case   18:*/		return 0x821B14EC;
		  /* 821B14ECh */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 821B14ECh case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B14ECh case   19:*/		return 0x821B14F0;
		  /* 821B14F0h */ case   20:  		/* bc 4, CR0_EQ, 116 */
		/* 821B14F0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821B1564;  }
		/* 821B14F0h case   20:*/		return 0x821B14F4;
		  /* 821B14F4h */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B14F4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B14F4h case   21:*/		return 0x821B14F8;
		  /* 821B14F8h */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B14F8h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B14F8h case   22:*/		return 0x821B14FC;
		  /* 821B14FCh */ case   23:  		/* cmplwi CR6, R11, 14720 */
		/* 821B14FCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B14FCh case   23:*/		return 0x821B1500;
		  /* 821B1500h */ case   24:  		/* bc 12, CR6_EQ, 16 */
		/* 821B1500h case   24:*/		if ( regs.CR[6].eq ) { return 0x821B1510;  }
		/* 821B1500h case   24:*/		return 0x821B1504;
	}
	return 0x821B1504;
} // Block from 821B14A0h-821B1504h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B1504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1504);
		  /* 821B1504h */ case    0:  		/* addi R29, R29, 1 */
		/* 821B1504h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821B1504h case    0:*/		return 0x821B1508;
		  /* 821B1508h */ case    1:  		/* addi R30, R30, 4 */
		/* 821B1508h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821B1508h case    1:*/		return 0x821B150C;
		  /* 821B150Ch */ case    2:  		/* b -76 */
		/* 821B150Ch case    2:*/		return 0x821B14C0;
		/* 821B150Ch case    2:*/		return 0x821B1510;
	}
	return 0x821B1510;
} // Block from 821B1504h-821B1510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B1510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1510);
		  /* 821B1510h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 821B1510h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821B1510h case    0:*/		return 0x821B1514;
		  /* 821B1514h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B1514h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1514h case    1:*/		return 0x821B1518;
		  /* 821B1518h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821B1518h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B154C;  }
		/* 821B1518h case    2:*/		return 0x821B151C;
		  /* 821B151Ch */ case    3:  		/* lwz R31, <#[R11 + 16]> */
		/* 821B151Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821B151Ch case    3:*/		return 0x821B1520;
		  /* 821B1520h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B1520h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1520h case    4:*/		return 0x821B1524;
		  /* 821B1524h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821B1524h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B1544;  }
		/* 821B1524h case    5:*/		return 0x821B1528;
		  /* 821B1528h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 821B1528h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1528h case    6:*/		return 0x821B152C;
		  /* 821B152Ch */ case    7:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821B152Ch case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821B152Ch case    7:*/		return 0x821B1530;
		  /* 821B1530h */ case    8:  		/* cmplwi CR6, R10, 14080 */
		/* 821B1530h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821B1530h case    8:*/		return 0x821B1534;
		  /* 821B1534h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821B1534h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B1544;  }
		/* 821B1534h case    9:*/		return 0x821B1538;
		  /* 821B1538h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821B1538h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1538h case   10:*/		return 0x821B153C;
		  /* 821B153Ch */ case   11:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821B153Ch case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821B153Ch case   11:*/		return 0x821B1540;
		  /* 821B1540h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821B1540h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B1550;  }
		/* 821B1540h case   12:*/		return 0x821B1544;
	}
	return 0x821B1544;
} // Block from 821B1510h-821B1544h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B1544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1544);
		  /* 821B1544h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1544h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1544h case    0:*/		return 0x821B1548;
		  /* 821B1548h */ case    1:  		/* b -52 */
		/* 821B1548h case    1:*/		return 0x821B1514;
		/* 821B1548h case    1:*/		return 0x821B154C;
	}
	return 0x821B154C;
} // Block from 821B1544h-821B154Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B154Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B154C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B154C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B154C);
		  /* 821B154Ch */ case    0:  		/* li R31, 0 */
		/* 821B154Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B154Ch case    0:*/		return 0x821B1550;
	}
	return 0x821B1550;
} // Block from 821B154Ch-821B1550h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B1550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1550);
		  /* 821B1550h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821B1550h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1550h case    0:*/		return 0x821B1554;
		  /* 821B1554h */ case    1:  		/* bc 4, CR6_EQ, -156 */
		/* 821B1554h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B14B8;  }
		/* 821B1554h case    1:*/		return 0x821B1558;
	}
	return 0x821B1558;
} // Block from 821B1550h-821B1558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1558);
		  /* 821B1558h */ case    0:  		/* li R3, 0 */
		/* 821B1558h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821B1558h case    0:*/		return 0x821B155C;
		  /* 821B155Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 821B155Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821B155Ch case    1:*/		return 0x821B1560;
		  /* 821B1560h */ case    2:  		/* b -1180348 */
		/* 821B1560h case    2:*/		return 0x820912A4;
		/* 821B1560h case    2:*/		return 0x821B1564;
	}
	return 0x821B1564;
} // Block from 821B1558h-821B1564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B1564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1564);
		  /* 821B1564h */ case    0:  		/* mr R3, R27 */
		/* 821B1564h case    0:*/		regs.R3 = regs.R27;
		/* 821B1564h case    0:*/		return 0x821B1568;
		  /* 821B1568h */ case    1:  		/* lwz R4, <#[R28 + 28]> */
		/* 821B1568h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000001C) );
		/* 821B1568h case    1:*/		return 0x821B156C;
		  /* 821B156Ch */ case    2:  		/* bl 469340 */
		/* 821B156Ch case    2:*/		regs.LR = 0x821B1570; return 0x82223EC8;
		/* 821B156Ch case    2:*/		return 0x821B1570;
		  /* 821B1570h */ case    3:  		/* li R3, 1 */
		/* 821B1570h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821B1570h case    3:*/		return 0x821B1574;
		  /* 821B1574h */ case    4:  		/* b -24 */
		/* 821B1574h case    4:*/		return 0x821B155C;
		/* 821B1574h case    4:*/		return 0x821B1578;
	}
	return 0x821B1578;
} // Block from 821B1564h-821B1578h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B1578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1578);
		  /* 821B1578h */ case    0:  		/* mfspr R12, LR */
		/* 821B1578h case    0:*/		regs.R12 = regs.LR;
		/* 821B1578h case    0:*/		return 0x821B157C;
		  /* 821B157Ch */ case    1:  		/* bl -1180472 */
		/* 821B157Ch case    1:*/		regs.LR = 0x821B1580; return 0x82091244;
		/* 821B157Ch case    1:*/		return 0x821B1580;
		  /* 821B1580h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821B1580h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821B1580h case    2:*/		return 0x821B1584;
		  /* 821B1584h */ case    3:  		/* mr R23, R3 */
		/* 821B1584h case    3:*/		regs.R23 = regs.R3;
		/* 821B1584h case    3:*/		return 0x821B1588;
		  /* 821B1588h */ case    4:  		/* mr R30, R4 */
		/* 821B1588h case    4:*/		regs.R30 = regs.R4;
		/* 821B1588h case    4:*/		return 0x821B158C;
		  /* 821B158Ch */ case    5:  		/* li R24, 0 */
		/* 821B158Ch case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821B158Ch case    5:*/		return 0x821B1590;
		  /* 821B1590h */ case    6:  		/* li R25, 44 */
		/* 821B1590h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x2C);
		/* 821B1590h case    6:*/		return 0x821B1594;
		  /* 821B1594h */ case    7:  		/* lwz R27, <#[R30 + 8]> */
		/* 821B1594h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000008) );
		/* 821B1594h case    7:*/		return 0x821B1598;
		  /* 821B1598h */ case    8:  		/* rlwinm R11, R27, 13, 29, 31 */
		/* 821B1598h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R27);
		/* 821B1598h case    8:*/		return 0x821B159C;
		  /* 821B159Ch */ case    9:  		/* cmplw CR6, R24, R11 */
		/* 821B159Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821B159Ch case    9:*/		return 0x821B15A0;
		  /* 821B15A0h */ case   10:  		/* bc 4, CR6_LT, 260 */
		/* 821B15A0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821B16A4;  }
		/* 821B15A0h case   10:*/		return 0x821B15A4;
		  /* 821B15A4h */ case   11:  		/* lwzx R26, <#[R25 + R30]> */
		/* 821B15A4h case   11:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + regs.R30 + 0x00000000) );
		/* 821B15A4h case   11:*/		return 0x821B15A8;
		  /* 821B15A8h */ case   12:  		/* lwz R31, <#[R26 + 12]> */
		/* 821B15A8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x0000000C) );
		/* 821B15A8h case   12:*/		return 0x821B15AC;
		  /* 821B15ACh */ case   13:  		/* mr R3, R31 */
		/* 821B15ACh case   13:*/		regs.R3 = regs.R31;
		/* 821B15ACh case   13:*/		return 0x821B15B0;
		  /* 821B15B0h */ case   14:  		/* bl -264192 */
		/* 821B15B0h case   14:*/		regs.LR = 0x821B15B4; return 0x82170DB0;
		/* 821B15B0h case   14:*/		return 0x821B15B4;
		  /* 821B15B4h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B15B4h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B15B4h case   15:*/		return 0x821B15B8;
		  /* 821B15B8h */ case   16:  		/* bc 12, CR0_EQ, 204 */
		/* 821B15B8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B1684;  }
		/* 821B15B8h case   16:*/		return 0x821B15BC;
		  /* 821B15BCh */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B15BCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B15BCh case   17:*/		return 0x821B15C0;
		  /* 821B15C0h */ case   18:  		/* lis R10, 1 */
		/* 821B15C0h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 821B15C0h case   18:*/		return 0x821B15C4;
		  /* 821B15C4h */ case   19:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821B15C4h case   19:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B15C4h case   19:*/		return 0x821B15C8;
		  /* 821B15C8h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821B15C8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B15C8h case   20:*/		return 0x821B15CC;
		  /* 821B15CCh */ case   21:  		/* bc 4, CR6_LT, 184 */
		/* 821B15CCh case   21:*/		if ( !regs.CR[6].lt ) { return 0x821B1684;  }
		/* 821B15CCh case   21:*/		return 0x821B15D0;
		  /* 821B15D0h */ case   22:  		/* li R28, 0 */
		/* 821B15D0h case   22:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821B15D0h case   22:*/		return 0x821B15D4;
		  /* 821B15D4h */ case   23:  		/* addi R29, R30, 44 */
		/* 821B15D4h case   23:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x2C);
		/* 821B15D4h case   23:*/		return 0x821B15D8;
		  /* 821B15D8h */ case   24:  		/* rlwinm R11, R27, 13, 29, 31 */
		/* 821B15D8h case   24:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R27);
		/* 821B15D8h case   24:*/		return 0x821B15DC;
		  /* 821B15DCh */ case   25:  		/* cmplw CR6, R28, R11 */
		/* 821B15DCh case   25:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821B15DCh case   25:*/		return 0x821B15E0;
		  /* 821B15E0h */ case   26:  		/* bc 4, CR6_LT, 156 */
		/* 821B15E0h case   26:*/		if ( !regs.CR[6].lt ) { return 0x821B167C;  }
		/* 821B15E0h case   26:*/		return 0x821B15E4;
		  /* 821B15E4h */ case   27:  		/* lwz R11, <#[R29]> */
		/* 821B15E4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B15E4h case   27:*/		return 0x821B15E8;
		  /* 821B15E8h */ case   28:  		/* cmplw CR6, R11, R26 */
		/* 821B15E8h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821B15E8h case   28:*/		return 0x821B15EC;
		  /* 821B15ECh */ case   29:  		/* bc 12, CR6_EQ, 144 */
		/* 821B15ECh case   29:*/		if ( regs.CR[6].eq ) { return 0x821B167C;  }
		/* 821B15ECh case   29:*/		return 0x821B15F0;
		  /* 821B15F0h */ case   30:  		/* lwz R5, <#[R11 + 12]> */
		/* 821B15F0h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B15F0h case   30:*/		return 0x821B15F4;
		  /* 821B15F4h */ case   31:  		/* cmplw CR6, R5, R31 */
		/* 821B15F4h case   31:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R31);
		/* 821B15F4h case   31:*/		return 0x821B15F8;
		  /* 821B15F8h */ case   32:  		/* bc 12, CR6_EQ, 40 */
		/* 821B15F8h case   32:*/		if ( regs.CR[6].eq ) { return 0x821B1620;  }
		/* 821B15F8h case   32:*/		return 0x821B15FC;
		  /* 821B15FCh */ case   33:  		/* mr R4, R31 */
		/* 821B15FCh case   33:*/		regs.R4 = regs.R31;
		/* 821B15FCh case   33:*/		return 0x821B1600;
		  /* 821B1600h */ case   34:  		/* mr R3, R23 */
		/* 821B1600h case   34:*/		regs.R3 = regs.R23;
		/* 821B1600h case   34:*/		return 0x821B1604;
		  /* 821B1604h */ case   35:  		/* bl -4692 */
		/* 821B1604h case   35:*/		regs.LR = 0x821B1608; return 0x821B03B0;
		/* 821B1604h case   35:*/		return 0x821B1608;
		  /* 821B1608h */ case   36:  		/* cmplwi CR0, R3, 0 */
		/* 821B1608h case   36:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B1608h case   36:*/		return 0x821B160C;
		  /* 821B160Ch */ case   37:  		/* bc 4, CR0_EQ, 132 */
		/* 821B160Ch case   37:*/		if ( !regs.CR[0].eq ) { return 0x821B1690;  }
		/* 821B160Ch case   37:*/		return 0x821B1610;
		  /* 821B1610h */ case   38:  		/* lwz R27, <#[R30 + 8]> */
		/* 821B1610h case   38:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000008) );
		/* 821B1610h case   38:*/		return 0x821B1614;
		  /* 821B1614h */ case   39:  		/* rlwinm R11, R27, 0, 18, 24 */
		/* 821B1614h case   39:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R27);
		/* 821B1614h case   39:*/		return 0x821B1618;
	}
	return 0x821B1618;
} // Block from 821B1578h-821B1618h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821B1618h
// Function '?QueueForVectorize@Compiler@D3DXShader@@AAAXPAVBlock@2@PAVInstruction@2@IQAPAV?$Queue@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z$09@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1618);
		  /* 821B1618h */ case    0:  		/* cmplwi CR6, R11, 14720 */
		/* 821B1618h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B1618h case    0:*/		return 0x821B161C;
		  /* 821B161Ch */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821B161Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821B162C;  }
		/* 821B161Ch case    1:*/		return 0x821B1620;
	}
	return 0x821B1620;
} // Block from 821B1618h-821B1620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1620);
		  /* 821B1620h */ case    0:  		/* addi R28, R28, 1 */
		/* 821B1620h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821B1620h case    0:*/		return 0x821B1624;
		  /* 821B1624h */ case    1:  		/* addi R29, R29, 4 */
		/* 821B1624h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821B1624h case    1:*/		return 0x821B1628;
		  /* 821B1628h */ case    2:  		/* b -80 */
		/* 821B1628h case    2:*/		return 0x821B15D8;
		/* 821B1628h case    2:*/		return 0x821B162C;
	}
	return 0x821B162C;
} // Block from 821B1620h-821B162Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B162Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B162C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B162C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B162C);
		  /* 821B162Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821B162Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821B162Ch case    0:*/		return 0x821B1630;
		  /* 821B1630h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B1630h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1630h case    1:*/		return 0x821B1634;
		  /* 821B1634h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821B1634h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B1670;  }
		/* 821B1634h case    2:*/		return 0x821B1638;
		  /* 821B1638h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821B1638h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821B1638h case    3:*/		return 0x821B163C;
		  /* 821B163Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821B163Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B163Ch case    4:*/		return 0x821B1640;
		  /* 821B1640h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821B1640h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B1660;  }
		/* 821B1640h case    5:*/		return 0x821B1644;
		  /* 821B1644h */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 821B1644h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B1644h case    6:*/		return 0x821B1648;
		  /* 821B1648h */ case    7:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821B1648h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821B1648h case    7:*/		return 0x821B164C;
		  /* 821B164Ch */ case    8:  		/* cmplwi CR6, R9, 14080 */
		/* 821B164Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821B164Ch case    8:*/		return 0x821B1650;
		  /* 821B1650h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821B1650h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B1660;  }
		/* 821B1650h case    9:*/		return 0x821B1654;
		  /* 821B1654h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 821B1654h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1654h case   10:*/		return 0x821B1658;
		  /* 821B1658h */ case   11:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821B1658h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821B1658h case   11:*/		return 0x821B165C;
		  /* 821B165Ch */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821B165Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B1668;  }
		/* 821B165Ch case   12:*/		return 0x821B1660;
	}
	return 0x821B1660;
} // Block from 821B162Ch-821B1660h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B1660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1660);
		  /* 821B1660h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1660h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1660h case    0:*/		return 0x821B1664;
		  /* 821B1664h */ case    1:  		/* b -52 */
		/* 821B1664h case    1:*/		return 0x821B1630;
		/* 821B1664h case    1:*/		return 0x821B1668;
	}
	return 0x821B1668;
} // Block from 821B1660h-821B1668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1668);
		  /* 821B1668h */ case    0:  		/* mr R30, R10 */
		/* 821B1668h case    0:*/		regs.R30 = regs.R10;
		/* 821B1668h case    0:*/		return 0x821B166C;
		  /* 821B166Ch */ case    1:  		/* b 8 */
		/* 821B166Ch case    1:*/		return 0x821B1674;
		/* 821B166Ch case    1:*/		return 0x821B1670;
	}
	return 0x821B1670;
} // Block from 821B1668h-821B1670h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1670);
		  /* 821B1670h */ case    0:  		/* li R30, 0 */
		/* 821B1670h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B1670h case    0:*/		return 0x821B1674;
	}
	return 0x821B1674;
} // Block from 821B1670h-821B1674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B1674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1674);
		  /* 821B1674h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821B1674h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B1674h case    0:*/		return 0x821B1678;
		  /* 821B1678h */ case    1:  		/* bc 4, CR6_EQ, -236 */
		/* 821B1678h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B158C;  }
		/* 821B1678h case    1:*/		return 0x821B167C;
	}
	return 0x821B167C;
} // Block from 821B1674h-821B167Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B167Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B167C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B167C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B167C);
		  /* 821B167Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821B167Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B167Ch case    0:*/		return 0x821B1680;
		  /* 821B1680h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821B1680h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B16A4;  }
		/* 821B1680h case    1:*/		return 0x821B1684;
	}
	return 0x821B1684;
} // Block from 821B167Ch-821B1684h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1684);
		  /* 821B1684h */ case    0:  		/* addi R24, R24, 1 */
		/* 821B1684h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821B1684h case    0:*/		return 0x821B1688;
		  /* 821B1688h */ case    1:  		/* addi R25, R25, 4 */
		/* 821B1688h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821B1688h case    1:*/		return 0x821B168C;
		  /* 821B168Ch */ case    2:  		/* b -248 */
		/* 821B168Ch case    2:*/		return 0x821B1594;
		/* 821B168Ch case    2:*/		return 0x821B1690;
	}
	return 0x821B1690;
} // Block from 821B1684h-821B1690h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B1690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1690);
		  /* 821B1690h */ case    0:  		/* mr R3, R23 */
		/* 821B1690h case    0:*/		regs.R3 = regs.R23;
		/* 821B1690h case    0:*/		return 0x821B1694;
		  /* 821B1694h */ case    1:  		/* lwz R4, <#[R30 + 28]> */
		/* 821B1694h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821B1694h case    1:*/		return 0x821B1698;
	}
	return 0x821B1698;
} // Block from 821B1690h-821B1698h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1698h
// Function '?VectorizeDependents@Compiler@D3DXShader@@AAAXPAVBlock@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1698);
		  /* 821B1698h */ case    0:  		/* bl 469040 */
		/* 821B1698h case    0:*/		regs.LR = 0x821B169C; return 0x82223EC8;
		/* 821B1698h case    0:*/		return 0x821B169C;
		  /* 821B169Ch */ case    1:  		/* li R3, 1 */
		/* 821B169Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821B169Ch case    1:*/		return 0x821B16A0;
		  /* 821B16A0h */ case    2:  		/* b 8 */
		/* 821B16A0h case    2:*/		return 0x821B16A8;
		/* 821B16A0h case    2:*/		return 0x821B16A4;
	}
	return 0x821B16A4;
} // Block from 821B1698h-821B16A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B16A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B16A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B16A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B16A4);
		  /* 821B16A4h */ case    0:  		/* li R3, 0 */
		/* 821B16A4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821B16A4h case    0:*/		return 0x821B16A8;
	}
	return 0x821B16A8;
} // Block from 821B16A4h-821B16A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B16A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B16A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B16A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B16A8);
		  /* 821B16A8h */ case    0:  		/* addi R1, R1, 160 */
		/* 821B16A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821B16A8h case    0:*/		return 0x821B16AC;
		  /* 821B16ACh */ case    1:  		/* b -1180696 */
		/* 821B16ACh case    1:*/		return 0x82091294;
		/* 821B16ACh case    1:*/		return 0x821B16B0;
	}
	return 0x821B16B0;
} // Block from 821B16A8h-821B16B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B16B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B16B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B16B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B16B0);
		  /* 821B16B0h */ case    0:  		/* mfspr R12, LR */
		/* 821B16B0h case    0:*/		regs.R12 = regs.LR;
		/* 821B16B0h case    0:*/		return 0x821B16B4;
		  /* 821B16B4h */ case    1:  		/* bl -1180768 */
		/* 821B16B4h case    1:*/		regs.LR = 0x821B16B8; return 0x82091254;
		/* 821B16B4h case    1:*/		return 0x821B16B8;
		  /* 821B16B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821B16B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821B16B8h case    2:*/		return 0x821B16BC;
		  /* 821B16BCh */ case    3:  		/* lwz R11, <#[R3 + 664]> */
		/* 821B16BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000298) );
		/* 821B16BCh case    3:*/		return 0x821B16C0;
		  /* 821B16C0h */ case    4:  		/* mr R29, R3 */
		/* 821B16C0h case    4:*/		regs.R29 = regs.R3;
		/* 821B16C0h case    4:*/		return 0x821B16C4;
		  /* 821B16C4h */ case    5:  		/* mr R27, R4 */
		/* 821B16C4h case    5:*/		regs.R27 = regs.R4;
		/* 821B16C4h case    5:*/		return 0x821B16C8;
		  /* 821B16C8h */ case    6:  		/* mr R30, R5 */
		/* 821B16C8h case    6:*/		regs.R30 = regs.R5;
		/* 821B16C8h case    6:*/		return 0x821B16CC;
		  /* 821B16CCh */ case    7:  		/* lis R28, 1 */
		/* 821B16CCh case    7:*/		cpu::op::lis<0>(regs,&regs.R28,0x1);
		/* 821B16CCh case    7:*/		return 0x821B16D0;
		  /* 821B16D0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821B16D0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B16D0h case    8:*/		return 0x821B16D4;
		  /* 821B16D4h */ case    9:  		/* bc 12, CR6_GT, 56 */
		/* 821B16D4h case    9:*/		if ( regs.CR[6].gt ) { return 0x821B170C;  }
		/* 821B16D4h case    9:*/		return 0x821B16D8;
		  /* 821B16D8h */ case   10:  		/* lwz R10, <#[R5 + 8]> */
		/* 821B16D8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 821B16D8h case   10:*/		return 0x821B16DC;
		  /* 821B16DCh */ case   11:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821B16DCh case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821B16DCh case   11:*/		return 0x821B16E0;
		  /* 821B16E0h */ case   12:  		/* cmplwi CR6, R11, 1 */
		/* 821B16E0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B16E0h case   12:*/		return 0x821B16E4;
		  /* 821B16E4h */ case   13:  		/* bc 12, CR6_LT, 16 */
		/* 821B16E4h case   13:*/		if ( regs.CR[6].lt ) { return 0x821B16F4;  }
		/* 821B16E4h case   13:*/		return 0x821B16E8;
		  /* 821B16E8h */ case   14:  		/* cmplwi CR6, R11, 102 */
		/* 821B16E8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821B16E8h case   14:*/		return 0x821B16EC;
		  /* 821B16ECh */ case   15:  		/* li R11, 1 */
		/* 821B16ECh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B16ECh case   15:*/		return 0x821B16F0;
		  /* 821B16F0h */ case   16:  		/* bc 4, CR6_GT, 8 */
		/* 821B16F0h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821B16F8;  }
		/* 821B16F0h case   16:*/		return 0x821B16F4;
	}
	return 0x821B16F4;
} // Block from 821B16B0h-821B16F4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B16F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B16F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B16F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B16F4);
		  /* 821B16F4h */ case    0:  		/* li R11, 0 */
		/* 821B16F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B16F4h case    0:*/		return 0x821B16F8;
	}
	return 0x821B16F8;
} // Block from 821B16F4h-821B16F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B16F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B16F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B16F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B16F8);
		  /* 821B16F8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B16F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B16F8h case    0:*/		return 0x821B16FC;
		  /* 821B16FCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821B16FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821B170C;  }
		/* 821B16FCh case    1:*/		return 0x821B1700;
		  /* 821B1700h */ case    2:  		/* rlwinm R11, R10, 0, 15, 17 */
		/* 821B1700h case    2:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R10);
		/* 821B1700h case    2:*/		return 0x821B1704;
		  /* 821B1704h */ case    3:  		/* cmplw CR6, R11, R28 */
		/* 821B1704h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821B1704h case    3:*/		return 0x821B1708;
		  /* 821B1708h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 821B1708h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821B171C;  }
		/* 821B1708h case    4:*/		return 0x821B170C;
	}
	return 0x821B170C;
} // Block from 821B16F8h-821B170Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B170Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B170C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B170C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B170C);
		  /* 821B170Ch */ case    0:  		/* mr R5, R30 */
		/* 821B170Ch case    0:*/		regs.R5 = regs.R30;
		/* 821B170Ch case    0:*/		return 0x821B1710;
		  /* 821B1710h */ case    1:  		/* mr R4, R27 */
		/* 821B1710h case    1:*/		regs.R4 = regs.R27;
		/* 821B1710h case    1:*/		return 0x821B1714;
		  /* 821B1714h */ case    2:  		/* mr R3, R29 */
		/* 821B1714h case    2:*/		regs.R3 = regs.R29;
		/* 821B1714h case    2:*/		return 0x821B1718;
		  /* 821B1718h */ case    3:  		/* bl -2288 */
		/* 821B1718h case    3:*/		regs.LR = 0x821B171C; return 0x821B0E28;
		/* 821B1718h case    3:*/		return 0x821B171C;
	}
	return 0x821B171C;
} // Block from 821B170Ch-821B171Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B171Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B171C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B171C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B171C);
		  /* 821B171Ch */ case    0:  		/* lwz R31, <#[R30 + 4]> */
		/* 821B171Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821B171Ch case    0:*/		return 0x821B1720;
		  /* 821B1720h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821B1720h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1720h case    1:*/		return 0x821B1724;
		  /* 821B1724h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 821B1724h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B174C;  }
		/* 821B1724h case    2:*/		return 0x821B1728;
		  /* 821B1728h */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 821B1728h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821B1728h case    3:*/		return 0x821B172C;
		  /* 821B172Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821B172Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B172Ch case    4:*/		return 0x821B1730;
		  /* 821B1730h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821B1730h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B1744;  }
		/* 821B1730h case    5:*/		return 0x821B1734;
		  /* 821B1734h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B1734h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B1734h case    6:*/		return 0x821B1738;
		  /* 821B1738h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B1738h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B1738h case    7:*/		return 0x821B173C;
		  /* 821B173Ch */ case    8:  		/* cmplwi CR6, R11, 14080 */
		/* 821B173Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B173Ch case    8:*/		return 0x821B1740;
		  /* 821B1740h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821B1740h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B174C;  }
		/* 821B1740h case    9:*/		return 0x821B1744;
	}
	return 0x821B1744;
} // Block from 821B171Ch-821B1744h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B1744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1744);
		  /* 821B1744h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821B1744h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1744h case    0:*/		return 0x821B1748;
		  /* 821B1748h */ case    1:  		/* b -40 */
		/* 821B1748h case    1:*/		return 0x821B1720;
		/* 821B1748h case    1:*/		return 0x821B174C;
	}
	return 0x821B174C;
} // Block from 821B1744h-821B174Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B174Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B174C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B174C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B174C);
		  /* 821B174Ch */ case    0:  		/* mr R4, R30 */
		/* 821B174Ch case    0:*/		regs.R4 = regs.R30;
		/* 821B174Ch case    0:*/		return 0x821B1750;
		  /* 821B1750h */ case    1:  		/* mr R3, R29 */
		/* 821B1750h case    1:*/		regs.R3 = regs.R29;
		/* 821B1750h case    1:*/		return 0x821B1754;
		  /* 821B1754h */ case    2:  		/* bl -85524 */
		/* 821B1754h case    2:*/		regs.LR = 0x821B1758; return 0x8219C940;
		/* 821B1754h case    2:*/		return 0x821B1758;
		  /* 821B1758h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1758h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1758h case    3:*/		return 0x821B175C;
		  /* 821B175Ch */ case    4:  		/* bc 4, CR0_EQ, 92 */
		/* 821B175Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B17B8;  }
		/* 821B175Ch case    4:*/		return 0x821B1760;
		  /* 821B1760h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821B1760h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1760h case    5:*/		return 0x821B1764;
		  /* 821B1764h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 821B1764h case    6:*/		if ( regs.CR[6].eq ) { return 0x821B17B8;  }
		/* 821B1764h case    6:*/		return 0x821B1768;
		  /* 821B1768h */ case    7:  		/* lwz R31, <#[R31 + 16]> */
		/* 821B1768h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 821B1768h case    7:*/		return 0x821B176C;
		  /* 821B176Ch */ case    8:  		/* mr R3, R29 */
		/* 821B176Ch case    8:*/		regs.R3 = regs.R29;
		/* 821B176Ch case    8:*/		return 0x821B1770;
		  /* 821B1770h */ case    9:  		/* mr R4, R31 */
		/* 821B1770h case    9:*/		regs.R4 = regs.R31;
		/* 821B1770h case    9:*/		return 0x821B1774;
		  /* 821B1774h */ case   10:  		/* bl -68796 */
		/* 821B1774h case   10:*/		regs.LR = 0x821B1778; return 0x821A0AB8;
		/* 821B1774h case   10:*/		return 0x821B1778;
		  /* 821B1778h */ case   11:  		/* mr R3, R30 */
		/* 821B1778h case   11:*/		regs.R3 = regs.R30;
		/* 821B1778h case   11:*/		return 0x821B177C;
		  /* 821B177Ch */ case   12:  		/* bl -264652 */
		/* 821B177Ch case   12:*/		regs.LR = 0x821B1780; return 0x82170DB0;
		/* 821B177Ch case   12:*/		return 0x821B1780;
		  /* 821B1780h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1780h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1780h case   13:*/		return 0x821B1784;
		  /* 821B1784h */ case   14:  		/* bc 12, CR0_EQ, 184 */
		/* 821B1784h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B183C;  }
		/* 821B1784h case   14:*/		return 0x821B1788;
		  /* 821B1788h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 821B1788h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B1788h case   15:*/		return 0x821B178C;
		  /* 821B178Ch */ case   16:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821B178Ch case   16:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B178Ch case   16:*/		return 0x821B1790;
		  /* 821B1790h */ case   17:  		/* cmplw CR6, R11, R28 */
		/* 821B1790h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821B1790h case   17:*/		return 0x821B1794;
		  /* 821B1794h */ case   18:  		/* bc 4, CR6_LT, 168 */
		/* 821B1794h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821B183C;  }
		/* 821B1794h case   18:*/		return 0x821B1798;
		  /* 821B1798h */ case   19:  		/* mr R5, R31 */
		/* 821B1798h case   19:*/		regs.R5 = regs.R31;
		/* 821B1798h case   19:*/		return 0x821B179C;
		  /* 821B179Ch */ case   20:  		/* mr R4, R30 */
		/* 821B179Ch case   20:*/		regs.R4 = regs.R30;
		/* 821B179Ch case   20:*/		return 0x821B17A0;
		  /* 821B17A0h */ case   21:  		/* mr R3, R29 */
		/* 821B17A0h case   21:*/		regs.R3 = regs.R29;
		/* 821B17A0h case   21:*/		return 0x821B17A4;
		  /* 821B17A4h */ case   22:  		/* bl -772 */
		/* 821B17A4h case   22:*/		regs.LR = 0x821B17A8; return 0x821B14A0;
		/* 821B17A4h case   22:*/		return 0x821B17A8;
		  /* 821B17A8h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B17A8h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B17A8h case   23:*/		return 0x821B17AC;
		  /* 821B17ACh */ case   24:  		/* bc 12, CR0_EQ, 144 */
		/* 821B17ACh case   24:*/		if ( regs.CR[0].eq ) { return 0x821B183C;  }
		/* 821B17ACh case   24:*/		return 0x821B17B0;
		  /* 821B17B0h */ case   25:  		/* li R3, 1 */
		/* 821B17B0h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821B17B0h case   25:*/		return 0x821B17B4;
		  /* 821B17B4h */ case   26:  		/* b 140 */
		/* 821B17B4h case   26:*/		return 0x821B1840;
		/* 821B17B4h case   26:*/		return 0x821B17B8;
	}
	return 0x821B17B8;
} // Block from 821B174Ch-821B17B8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B17B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B17B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B17B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B17B8);
		  /* 821B17B8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821B17B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B17B8h case    0:*/		return 0x821B17BC;
		  /* 821B17BCh */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B17BCh case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B17BCh case    1:*/		return 0x821B17C0;
		  /* 821B17C0h */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821B17C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B17C0h case    2:*/		return 0x821B17C4;
		  /* 821B17C4h */ case    3:  		/* bc 4, CR6_EQ, 120 */
		/* 821B17C4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B183C;  }
		/* 821B17C4h case    3:*/		return 0x821B17C8;
		  /* 821B17C8h */ case    4:  		/* lwz R31, <#[R27 + 28]> */
		/* 821B17C8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000001C) );
		/* 821B17C8h case    4:*/		return 0x821B17CC;
		  /* 821B17CCh */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B17CCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B17CCh case    5:*/		return 0x821B17D0;
		  /* 821B17D0h */ case    6:  		/* bc 4, CR0_EQ, 84 */
		/* 821B17D0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B1824;  }
		/* 821B17D0h case    6:*/		return 0x821B17D4;
		  /* 821B17D4h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821B17D4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B17D4h case    7:*/		return 0x821B17D8;
		  /* 821B17D8h */ case    8:  		/* bc 12, CR0_EQ, 76 */
		/* 821B17D8h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B1824;  }
		/* 821B17D8h case    8:*/		return 0x821B17DC;
		  /* 821B17DCh */ case    9:  		/* cmplw CR6, R30, R31 */
		/* 821B17DCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 821B17DCh case    9:*/		return 0x821B17E0;
		  /* 821B17E0h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 821B17E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B180C;  }
		/* 821B17E0h case   10:*/		return 0x821B17E4;
		  /* 821B17E4h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B17E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B17E4h case   11:*/		return 0x821B17E8;
		  /* 821B17E8h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B17E8h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B17E8h case   12:*/		return 0x821B17EC;
		  /* 821B17ECh */ case   13:  		/* cmplwi CR6, R11, 14080 */
		/* 821B17ECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B17ECh case   13:*/		return 0x821B17F0;
		  /* 821B17F0h */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 821B17F0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821B180C;  }
		/* 821B17F0h case   14:*/		return 0x821B17F4;
		  /* 821B17F4h */ case   15:  		/* mr R5, R31 */
		/* 821B17F4h case   15:*/		regs.R5 = regs.R31;
		/* 821B17F4h case   15:*/		return 0x821B17F8;
		  /* 821B17F8h */ case   16:  		/* mr R4, R30 */
		/* 821B17F8h case   16:*/		regs.R4 = regs.R30;
		/* 821B17F8h case   16:*/		return 0x821B17FC;
		  /* 821B17FCh */ case   17:  		/* mr R3, R29 */
		/* 821B17FCh case   17:*/		regs.R3 = regs.R29;
		/* 821B17FCh case   17:*/		return 0x821B1800;
		  /* 821B1800h */ case   18:  		/* bl -37872 */
		/* 821B1800h case   18:*/		regs.LR = 0x821B1804; return 0x821A8410;
		/* 821B1800h case   18:*/		return 0x821B1804;
		  /* 821B1804h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1804h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1804h case   19:*/		return 0x821B1808;
		  /* 821B1808h */ case   20:  		/* bc 4, CR0_EQ, 64 */
		/* 821B1808h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821B1848;  }
		/* 821B1808h case   20:*/		return 0x821B180C;
	}
	return 0x821B180C;
} // Block from 821B17B8h-821B180Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B180Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B180C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B180C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B180C);
		  /* 821B180Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B180Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B180Ch case    0:*/		return 0x821B1810;
		  /* 821B1810h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B1810h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B1810h case    1:*/		return 0x821B1814;
		  /* 821B1814h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B1814h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B1814h case    2:*/		return 0x821B1818;
		  /* 821B1818h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B1818h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B1824;  }
		/* 821B1818h case    3:*/		return 0x821B181C;
		  /* 821B181Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B181Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B181Ch case    4:*/		return 0x821B1820;
		  /* 821B1820h */ case    5:  		/* bc 4, CR6_EQ, -68 */
		/* 821B1820h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B17DC;  }
		/* 821B1820h case    5:*/		return 0x821B1824;
	}
	return 0x821B1824;
} // Block from 821B180Ch-821B1824h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B1824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1824);
		  /* 821B1824h */ case    0:  		/* mr R4, R30 */
		/* 821B1824h case    0:*/		regs.R4 = regs.R30;
		/* 821B1824h case    0:*/		return 0x821B1828;
		  /* 821B1828h */ case    1:  		/* mr R3, R29 */
		/* 821B1828h case    1:*/		regs.R3 = regs.R29;
		/* 821B1828h case    1:*/		return 0x821B182C;
		  /* 821B182Ch */ case    2:  		/* bl -692 */
		/* 821B182Ch case    2:*/		regs.LR = 0x821B1830; return 0x821B1578;
		/* 821B182Ch case    2:*/		return 0x821B1830;
		  /* 821B1830h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1830h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1830h case    3:*/		return 0x821B1834;
		  /* 821B1834h */ case    4:  		/* li R3, 1 */
		/* 821B1834h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821B1834h case    4:*/		return 0x821B1838;
		  /* 821B1838h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 821B1838h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B1840;  }
		/* 821B1838h case    5:*/		return 0x821B183C;
	}
	return 0x821B183C;
} // Block from 821B1824h-821B183Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B183Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B183C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B183C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B183C);
		  /* 821B183Ch */ case    0:  		/* li R3, 0 */
		/* 821B183Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821B183Ch case    0:*/		return 0x821B1840;
	}
	return 0x821B1840;
} // Block from 821B183Ch-821B1840h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B1840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1840);
		  /* 821B1840h */ case    0:  		/* addi R1, R1, 128 */
		/* 821B1840h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821B1840h case    0:*/		return 0x821B1844;
		  /* 821B1844h */ case    1:  		/* b -1181088 */
		/* 821B1844h case    1:*/		return 0x820912A4;
		/* 821B1844h case    1:*/		return 0x821B1848;
	}
	return 0x821B1848;
} // Block from 821B1840h-821B1848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1848);
		  /* 821B1848h */ case    0:  		/* mr R4, R27 */
		/* 821B1848h case    0:*/		regs.R4 = regs.R27;
		/* 821B1848h case    0:*/		return 0x821B184C;
		  /* 821B184Ch */ case    1:  		/* mr R3, R29 */
		/* 821B184Ch case    1:*/		regs.R3 = regs.R29;
		/* 821B184Ch case    1:*/		return 0x821B1850;
		  /* 821B1850h */ case    2:  		/* bl 468600 */
		/* 821B1850h case    2:*/		regs.LR = 0x821B1854; return 0x82223EC8;
		/* 821B1850h case    2:*/		return 0x821B1854;
		  /* 821B1854h */ case    3:  		/* b -164 */
		/* 821B1854h case    3:*/		return 0x821B17B0;
		/* 821B1854h case    3:*/		return 0x821B1858;
	}
	return 0x821B1858;
} // Block from 821B1848h-821B1858h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B1858h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1858);
		  /* 821B1858h */ case    0:  		/* mfspr R12, LR */
		/* 821B1858h case    0:*/		regs.R12 = regs.LR;
		/* 821B1858h case    0:*/		return 0x821B185C;
		  /* 821B185Ch */ case    1:  		/* bl -1181244 */
		/* 821B185Ch case    1:*/		regs.LR = 0x821B1860; return 0x82091220;
		/* 821B185Ch case    1:*/		return 0x821B1860;
		  /* 821B1860h */ case    2:  		/* addi R12, R1, -152 */
		/* 821B1860h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821B1860h case    2:*/		return 0x821B1864;
		  /* 821B1864h */ case    3:  		/* bl -1180748 */
		/* 821B1864h case    3:*/		regs.LR = 0x821B1868; return 0x82091418;
		/* 821B1864h case    3:*/		return 0x821B1868;
		  /* 821B1868h */ case    4:  		/* stwu R1, <#[R1 - 464]> */
		/* 821B1868h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE30);
		/* 821B1868h case    4:*/		return 0x821B186C;
		  /* 821B186Ch */ case    5:  		/* lis R11, -32256 */
		/* 821B186Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821B186Ch case    5:*/		return 0x821B1870;
		  /* 821B1870h */ case    6:  		/* lis R10, -32256 */
		/* 821B1870h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821B1870h case    6:*/		return 0x821B1874;
		  /* 821B1874h */ case    7:  		/* lis R9, -32256 */
		/* 821B1874h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 821B1874h case    7:*/		return 0x821B1878;
		  /* 821B1878h */ case    8:  		/* lis R8, -32256 */
		/* 821B1878h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 821B1878h case    8:*/		return 0x821B187C;
		  /* 821B187Ch */ case    9:  		/* mr R14, R3 */
		/* 821B187Ch case    9:*/		regs.R14 = regs.R3;
		/* 821B187Ch case    9:*/		return 0x821B1880;
		  /* 821B1880h */ case   10:  		/* lfd FR28, <#[R11 + 1848]> */
		/* 821B1880h case   10:*/		cpu::mem::load64f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000738) );
		/* 821B1880h case   10:*/		return 0x821B1884;
		  /* 821B1884h */ case   11:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 821B1884h case   11:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 821B1884h case   11:*/		return 0x821B1888;
		  /* 821B1888h */ case   12:  		/* lfs FR29, <#[R9 + 1792]> */
		/* 821B1888h case   12:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R9 + 0x00000700) );
		/* 821B1888h case   12:*/		return 0x821B188C;
		  /* 821B188Ch */ case   13:  		/* lfd FR30, <#[R8 + 1808]> */
		/* 821B188Ch case   13:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R8 + 0x00000710) );
		/* 821B188Ch case   13:*/		return 0x821B1890;
		  /* 821B1890h */ case   14:  		/* lwz R11, <#[R14 + 116]> */
		/* 821B1890h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000074) );
		/* 821B1890h case   14:*/		return 0x821B1894;
		  /* 821B1894h */ case   15:  		/* li R31, 0 */
		/* 821B1894h case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B1894h case   15:*/		return 0x821B1898;
		  /* 821B1898h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821B1898h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1898h case   16:*/		return 0x821B189C;
		  /* 821B189Ch */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 821B189Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821B18B4;  }
		/* 821B189Ch case   17:*/		return 0x821B18A0;
		  /* 821B18A0h */ case   18:  		/* li R6, 100 */
		/* 821B18A0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x64);
		/* 821B18A0h case   18:*/		return 0x821B18A4;
		  /* 821B18A4h */ case   19:  		/* addi R5, R1, 212 */
		/* 821B18A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD4);
		/* 821B18A4h case   19:*/		return 0x821B18A8;
		  /* 821B18A8h */ case   20:  		/* li R4, 1 */
		/* 821B18A8h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B18A8h case   20:*/		return 0x821B18AC;
		  /* 821B18ACh */ case   21:  		/* mr R3, R14 */
		/* 821B18ACh case   21:*/		regs.R3 = regs.R14;
		/* 821B18ACh case   21:*/		return 0x821B18B0;
		  /* 821B18B0h */ case   22:  		/* bl -175376 */
		/* 821B18B0h case   22:*/		regs.LR = 0x821B18B4; return 0x82186BA0;
		/* 821B18B0h case   22:*/		return 0x821B18B4;
	}
	return 0x821B18B4;
} // Block from 821B1858h-821B18B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821B18B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B18B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B18B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B18B4);
		  /* 821B18B4h */ case    0:  		/* li R5, 38 */
		/* 821B18B4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B18B4h case    0:*/		return 0x821B18B8;
		  /* 821B18B8h */ case    1:  		/* li R4, 8 */
		/* 821B18B8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B18B8h case    1:*/		return 0x821B18BC;
		  /* 821B18BCh */ case    2:  		/* mr R3, R14 */
		/* 821B18BCh case    2:*/		regs.R3 = regs.R14;
		/* 821B18BCh case    2:*/		return 0x821B18C0;
		  /* 821B18C0h */ case    3:  		/* bl -315344 */
		/* 821B18C0h case    3:*/		regs.LR = 0x821B18C4; return 0x821648F0;
		/* 821B18C0h case    3:*/		return 0x821B18C4;
		  /* 821B18C4h */ case    4:  		/* addi R11, R3, 4 */
		/* 821B18C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B18C4h case    4:*/		return 0x821B18C8;
		  /* 821B18C8h */ case    5:  		/* ori R10, R3, 1 */
		/* 821B18C8h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B18C8h case    5:*/		return 0x821B18CC;
		  /* 821B18CCh */ case    6:  		/* ori R11, R11, 1 */
		/* 821B18CCh case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B18CCh case    6:*/		return 0x821B18D0;
		  /* 821B18D0h */ case    7:  		/* stw R10, <#[R3 + 4]> */
		/* 821B18D0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B18D0h case    7:*/		return 0x821B18D4;
		  /* 821B18D4h */ case    8:  		/* li R5, 38 */
		/* 821B18D4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B18D4h case    8:*/		return 0x821B18D8;
		  /* 821B18D8h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821B18D8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B18D8h case    9:*/		return 0x821B18DC;
		  /* 821B18DCh */ case   10:  		/* li R4, 8 */
		/* 821B18DCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B18DCh case   10:*/		return 0x821B18E0;
		  /* 821B18E0h */ case   11:  		/* mr R3, R14 */
		/* 821B18E0h case   11:*/		regs.R3 = regs.R14;
		/* 821B18E0h case   11:*/		return 0x821B18E4;
		  /* 821B18E4h */ case   12:  		/* bl -315380 */
		/* 821B18E4h case   12:*/		regs.LR = 0x821B18E8; return 0x821648F0;
		/* 821B18E4h case   12:*/		return 0x821B18E8;
		  /* 821B18E8h */ case   13:  		/* addi R11, R3, 4 */
		/* 821B18E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B18E8h case   13:*/		return 0x821B18EC;
		  /* 821B18ECh */ case   14:  		/* ori R10, R3, 1 */
		/* 821B18ECh case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B18ECh case   14:*/		return 0x821B18F0;
		  /* 821B18F0h */ case   15:  		/* stw R3, <#[R14 + 652]> */
		/* 821B18F0h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B18F0h case   15:*/		return 0x821B18F4;
		  /* 821B18F4h */ case   16:  		/* ori R11, R11, 1 */
		/* 821B18F4h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B18F4h case   16:*/		return 0x821B18F8;
		  /* 821B18F8h */ case   17:  		/* stw R10, <#[R3 + 4]> */
		/* 821B18F8h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B18F8h case   17:*/		return 0x821B18FC;
		  /* 821B18FCh */ case   18:  		/* li R5, 45 */
		/* 821B18FCh case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x2D);
		/* 821B18FCh case   18:*/		return 0x821B1900;
		  /* 821B1900h */ case   19:  		/* stw R11, <#[R3]> */
		/* 821B1900h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1900h case   19:*/		return 0x821B1904;
		  /* 821B1904h */ case   20:  		/* li R4, 8 */
		/* 821B1904h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B1904h case   20:*/		return 0x821B1908;
		  /* 821B1908h */ case   21:  		/* mr R3, R14 */
		/* 821B1908h case   21:*/		regs.R3 = regs.R14;
		/* 821B1908h case   21:*/		return 0x821B190C;
		  /* 821B190Ch */ case   22:  		/* bl -315420 */
		/* 821B190Ch case   22:*/		regs.LR = 0x821B1910; return 0x821648F0;
		/* 821B190Ch case   22:*/		return 0x821B1910;
		  /* 821B1910h */ case   23:  		/* addi R11, R3, 4 */
		/* 821B1910h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B1910h case   23:*/		return 0x821B1914;
		  /* 821B1914h */ case   24:  		/* ori R10, R3, 1 */
		/* 821B1914h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B1914h case   24:*/		return 0x821B1918;
		  /* 821B1918h */ case   25:  		/* stw R3, <#[R14 + 656]> */
		/* 821B1918h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R14 + 0x00000290) );
		/* 821B1918h case   25:*/		return 0x821B191C;
		  /* 821B191Ch */ case   26:  		/* ori R11, R11, 1 */
		/* 821B191Ch case   26:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B191Ch case   26:*/		return 0x821B1920;
		  /* 821B1920h */ case   27:  		/* stw R10, <#[R3 + 4]> */
		/* 821B1920h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B1920h case   27:*/		return 0x821B1924;
		  /* 821B1924h */ case   28:  		/* li R5, 38 */
		/* 821B1924h case   28:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B1924h case   28:*/		return 0x821B1928;
		  /* 821B1928h */ case   29:  		/* stw R11, <#[R3]> */
		/* 821B1928h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1928h case   29:*/		return 0x821B192C;
		  /* 821B192Ch */ case   30:  		/* li R4, 8 */
		/* 821B192Ch case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B192Ch case   30:*/		return 0x821B1930;
		  /* 821B1930h */ case   31:  		/* mr R3, R14 */
		/* 821B1930h case   31:*/		regs.R3 = regs.R14;
		/* 821B1930h case   31:*/		return 0x821B1934;
		  /* 821B1934h */ case   32:  		/* bl -315460 */
		/* 821B1934h case   32:*/		regs.LR = 0x821B1938; return 0x821648F0;
		/* 821B1934h case   32:*/		return 0x821B1938;
		  /* 821B1938h */ case   33:  		/* addi R11, R3, 4 */
		/* 821B1938h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B1938h case   33:*/		return 0x821B193C;
		  /* 821B193Ch */ case   34:  		/* ori R10, R3, 1 */
		/* 821B193Ch case   34:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B193Ch case   34:*/		return 0x821B1940;
		  /* 821B1940h */ case   35:  		/* stw R3, <#[R14 + 660]> */
		/* 821B1940h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821B1940h case   35:*/		return 0x821B1944;
		  /* 821B1944h */ case   36:  		/* ori R11, R11, 1 */
		/* 821B1944h case   36:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B1944h case   36:*/		return 0x821B1948;
		  /* 821B1948h */ case   37:  		/* stb R31, <#[R1 + 81]> */
		/* 821B1948h case   37:*/		cpu::mem::store8( regs, regs.R31, (uint32)(regs.R1 + 0x00000051) );
		/* 821B1948h case   37:*/		return 0x821B194C;
		  /* 821B194Ch */ case   38:  		/* stw R10, <#[R3 + 4]> */
		/* 821B194Ch case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B194Ch case   38:*/		return 0x821B1950;
		  /* 821B1950h */ case   39:  		/* stw R11, <#[R3]> */
		/* 821B1950h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1950h case   39:*/		return 0x821B1954;
		  /* 821B1954h */ case   40:  		/* lwz R9, <#[R14 + 40]> */
		/* 821B1954h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000028) );
		/* 821B1954h case   40:*/		return 0x821B1958;
		  /* 821B1958h */ case   41:  		/* lwz R10, <#[R14 + 4]> */
		/* 821B1958h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000004) );
		/* 821B1958h case   41:*/		return 0x821B195C;
		  /* 821B195Ch */ case   42:  		/* lwz R11, <#[R14 + 44]> */
		/* 821B195Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000002C) );
		/* 821B195Ch case   42:*/		return 0x821B1960;
		  /* 821B1960h */ case   43:  		/* oris R11, R11, 8 */
		/* 821B1960h case   43:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821B1960h case   43:*/		return 0x821B1964;
		  /* 821B1964h */ case   44:  		/* ori R9, R9, 4096 */
		/* 821B1964h case   44:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1000);
		/* 821B1964h case   44:*/		return 0x821B1968;
		  /* 821B1968h */ case   45:  		/* stb R31, <#[R1 + 80]> */
		/* 821B1968h case   45:*/		cpu::mem::store8( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821B1968h case   45:*/		return 0x821B196C;
		  /* 821B196Ch */ case   46:  		/* stw R31, <#[R1 + 100]> */
		/* 821B196Ch case   46:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 821B196Ch case   46:*/		return 0x821B1970;
		  /* 821B1970h */ case   47:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821B1970h case   47:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821B1970h case   47:*/		return 0x821B1974;
		  /* 821B1974h */ case   48:  		/* stw R9, <#[R14 + 40]> */
		/* 821B1974h case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R14 + 0x00000028) );
		/* 821B1974h case   48:*/		return 0x821B1978;
		  /* 821B1978h */ case   49:  		/* stw R11, <#[R14 + 44]> */
		/* 821B1978h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x0000002C) );
		/* 821B1978h case   49:*/		return 0x821B197C;
		  /* 821B197Ch */ case   50:  		/* bc 4, CR0_EQ, 18288 */
		/* 821B197Ch case   50:*/		if ( !regs.CR[0].eq ) { return 0x821B60EC;  }
		/* 821B197Ch case   50:*/		return 0x821B1980;
		  /* 821B1980h */ case   51:  		/* lwz R11, <#[R14]> */
		/* 821B1980h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821B1980h case   51:*/		return 0x821B1984;
		  /* 821B1984h */ case   52:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B1984h case   52:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B1984h case   52:*/		return 0x821B1988;
		  /* 821B1988h */ case   53:  		/* addic. R11, R11, -4 */
		/* 821B1988h case   53:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B1988h case   53:*/		return 0x821B198C;
		  /* 821B198Ch */ case   54:  		/* stw R11, <#[R1 + 96]> */
		/* 821B198Ch case   54:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821B198Ch case   54:*/		return 0x821B1990;
		  /* 821B1990h */ case   55:  		/* bc 12, CR0_EQ, 18268 */
		/* 821B1990h case   55:*/		if ( regs.CR[0].eq ) { return 0x821B60EC;  }
		/* 821B1990h case   55:*/		return 0x821B1994;
		  /* 821B1994h */ case   56:  		/* addi R11, R1, 76 */
		/* 821B1994h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x4C);
		/* 821B1994h case   56:*/		return 0x821B1998;
		  /* 821B1998h */ case   57:  		/* addi R10, R1, 92 */
		/* 821B1998h case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 821B1998h case   57:*/		return 0x821B199C;
		  /* 821B199Ch */ case   58:  		/* ori R10, R10, 1 */
		/* 821B199Ch case   58:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B199Ch case   58:*/		return 0x821B19A0;
		  /* 821B19A0h */ case   59:  		/* ori R11, R11, 1 */
		/* 821B19A0h case   59:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B19A0h case   59:*/		return 0x821B19A4;
		  /* 821B19A4h */ case   60:  		/* stw R10, <#[R1 + 116]> */
		/* 821B19A4h case   60:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 821B19A4h case   60:*/		return 0x821B19A8;
		  /* 821B19A8h */ case   61:  		/* stw R11, <#[R1 + 128]> */
		/* 821B19A8h case   61:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821B19A8h case   61:*/		return 0x821B19AC;
		  /* 821B19ACh */ case   62:  		/* lwz R7, <#[R1 + 96]> */
		/* 821B19ACh case   62:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000060) );
		/* 821B19ACh case   62:*/		return 0x821B19B0;
		  /* 821B19B0h */ case   63:  		/* lwz R11, <#[R7 + 20]> */
		/* 821B19B0h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000014) );
		/* 821B19B0h case   63:*/		return 0x821B19B4;
		  /* 821B19B4h */ case   64:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B19B4h case   64:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B19B4h case   64:*/		return 0x821B19B8;
		  /* 821B19B8h */ case   65:  		/* bc 12, CR0_EQ, 40 */
		/* 821B19B8h case   65:*/		if ( regs.CR[0].eq ) { return 0x821B19E0;  }
		/* 821B19B8h case   65:*/		return 0x821B19BC;
		  /* 821B19BCh */ case   66:  		/* lwz R11, <#[R7 + 28]> */
		/* 821B19BCh case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 821B19BCh case   66:*/		return 0x821B19C0;
		  /* 821B19C0h */ case   67:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B19C0h case   67:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B19C0h case   67:*/		return 0x821B19C4;
		  /* 821B19C4h */ case   68:  		/* bc 12, CR0_EQ, 16 */
		/* 821B19C4h case   68:*/		if ( regs.CR[0].eq ) { return 0x821B19D4;  }
		/* 821B19C4h case   68:*/		return 0x821B19C8;
		  /* 821B19C8h */ case   69:  		/* lwz R9, <#[R7 + 36]> */
		/* 821B19C8h case   69:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000024) );
		/* 821B19C8h case   69:*/		return 0x821B19CC;
		  /* 821B19CCh */ case   70:  		/* addi R11, R7, 32 */
		/* 821B19CCh case   70:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x20);
		/* 821B19CCh case   70:*/		return 0x821B19D0;
		  /* 821B19D0h */ case   71:  		/* b 24 */
		/* 821B19D0h case   71:*/		return 0x821B19E8;
		/* 821B19D0h case   71:*/		return 0x821B19D4;
	}
	return 0x821B19D4;
} // Block from 821B18B4h-821B19D4h (72 instructions)

//////////////////////////////////////////////////////
// Block at 821B19D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B19D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B19D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B19D4);
		  /* 821B19D4h */ case    0:  		/* lwz R9, <#[R7 + 28]> */
		/* 821B19D4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x0000001C) );
		/* 821B19D4h case    0:*/		return 0x821B19D8;
		  /* 821B19D8h */ case    1:  		/* addi R11, R7, 24 */
		/* 821B19D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x18);
		/* 821B19D8h case    1:*/		return 0x821B19DC;
		  /* 821B19DCh */ case    2:  		/* b 12 */
		/* 821B19DCh case    2:*/		return 0x821B19E8;
		/* 821B19DCh case    2:*/		return 0x821B19E0;
	}
	return 0x821B19E0;
} // Block from 821B19D4h-821B19E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B19E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B19E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B19E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B19E0);
		  /* 821B19E0h */ case    0:  		/* lwz R9, <#[R7 + 20]> */
		/* 821B19E0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000014) );
		/* 821B19E0h case    0:*/		return 0x821B19E4;
		  /* 821B19E4h */ case    1:  		/* addi R11, R7, 16 */
		/* 821B19E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x10);
		/* 821B19E4h case    1:*/		return 0x821B19E8;
	}
	return 0x821B19E8;
} // Block from 821B19E0h-821B19E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B19E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B19E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B19E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B19E8);
		  /* 821B19E8h */ case    0:  		/* rlwinm R8, R9, 0, 31, 31 */
		/* 821B19E8h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R9);
		/* 821B19E8h case    0:*/		return 0x821B19EC;
		  /* 821B19ECh */ case    1:  		/* mr R10, R11 */
		/* 821B19ECh case    1:*/		regs.R10 = regs.R11;
		/* 821B19ECh case    1:*/		return 0x821B19F0;
		  /* 821B19F0h */ case    2:  		/* addic R11, R8, -1 */
		/* 821B19F0h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 821B19F0h case    2:*/		return 0x821B19F4;
		  /* 821B19F4h */ case    3:  		/* subfe R11, R11, R11 */
		/* 821B19F4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821B19F4h case    3:*/		return 0x821B19F8;
		  /* 821B19F8h */ case    4:  		/* and R11, R11, R9 */
		/* 821B19F8h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821B19F8h case    4:*/		return 0x821B19FC;
		  /* 821B19FCh */ case    5:  		/* b 116 */
		/* 821B19FCh case    5:*/		return 0x821B1A70;
		/* 821B19FCh case    5:*/		return 0x821B1A00;
		  /* 821B1A00h */ case    6:  		/* lwz R9, <#[R11 + 16]> */
		/* 821B1A00h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821B1A00h case    6:*/		return 0x821B1A04;
		  /* 821B1A04h */ case    7:  		/* rlwinm R8, R11, 0, 0, 30 */
		/* 821B1A04h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R11);
		/* 821B1A04h case    7:*/		return 0x821B1A08;
		  /* 821B1A08h */ case    8:  		/* lwz R6, <#[R11 + 20]> */
		/* 821B1A08h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000014) );
		/* 821B1A08h case    8:*/		return 0x821B1A0C;
		  /* 821B1A0Ch */ case    9:  		/* rlwinm R9, R9, 0, 1, 31 */
		/* 821B1A0Ch case    9:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R9,regs.R9);
		/* 821B1A0Ch case    9:*/		return 0x821B1A10;
		  /* 821B1A10h */ case   10:  		/* rlwinm R6, R6, 0, 0, 28 */
		/* 821B1A10h case   10:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R6,regs.R6);
		/* 821B1A10h case   10:*/		return 0x821B1A14;
		  /* 821B1A14h */ case   11:  		/* stw R9, <#[R11 + 16]> */
		/* 821B1A14h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821B1A14h case   11:*/		return 0x821B1A18;
		  /* 821B1A18h */ case   12:  		/* stw R6, <#[R11 + 20]> */
		/* 821B1A18h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000014) );
		/* 821B1A18h case   12:*/		return 0x821B1A1C;
		  /* 821B1A1Ch */ case   13:  		/* lwz R11, <#[R8 + 40]> */
		/* 821B1A1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000028) );
		/* 821B1A1Ch case   13:*/		return 0x821B1A20;
		  /* 821B1A20h */ case   14:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821B1A20h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821B1A20h case   14:*/		return 0x821B1A24;
		  /* 821B1A24h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821B1A24h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B1A30;  }
		/* 821B1A24h case   15:*/		return 0x821B1A28;
		  /* 821B1A28h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821B1A28h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1A28h case   16:*/		return 0x821B1A2C;
		  /* 821B1A2Ch */ case   17:  		/* bc 4, CR6_EQ, -44 */
		/* 821B1A2Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x821B1A00;  }
		/* 821B1A2Ch case   17:*/		return 0x821B1A30;
	}
	return 0x821B1A30;
} // Block from 821B19E8h-821B1A30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B1A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1A30);
		  /* 821B1A30h */ case    0:  		/* addi R8, R7, 32 */
		/* 821B1A30h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x20);
		/* 821B1A30h case    0:*/		return 0x821B1A34;
		  /* 821B1A34h */ case    1:  		/* cmplw CR6, R10, R8 */
		/* 821B1A34h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821B1A34h case    1:*/		return 0x821B1A38;
		  /* 821B1A38h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821B1A38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B1A78;  }
		/* 821B1A38h case    2:*/		return 0x821B1A3C;
		  /* 821B1A3Ch */ case    3:  		/* addi R9, R7, 24 */
		/* 821B1A3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x18);
		/* 821B1A3Ch case    3:*/		return 0x821B1A40;
		  /* 821B1A40h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821B1A40h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B1A40h case    4:*/		return 0x821B1A44;
		  /* 821B1A44h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821B1A44h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B1A60;  }
		/* 821B1A44h case    5:*/		return 0x821B1A48;
		  /* 821B1A48h */ case    6:  		/* lwz R11, <#[R7 + 28]> */
		/* 821B1A48h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 821B1A48h case    6:*/		return 0x821B1A4C;
		  /* 821B1A4Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B1A4Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B1A4Ch case    7:*/		return 0x821B1A50;
		  /* 821B1A50h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821B1A50h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B1A60;  }
		/* 821B1A50h case    8:*/		return 0x821B1A54;
		  /* 821B1A54h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821B1A54h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821B1A54h case    9:*/		return 0x821B1A58;
		  /* 821B1A58h */ case   10:  		/* mr R10, R9 */
		/* 821B1A58h case   10:*/		regs.R10 = regs.R9;
		/* 821B1A58h case   10:*/		return 0x821B1A5C;
		  /* 821B1A5Ch */ case   11:  		/* b 12 */
		/* 821B1A5Ch case   11:*/		return 0x821B1A68;
		/* 821B1A5Ch case   11:*/		return 0x821B1A60;
	}
	return 0x821B1A60;
} // Block from 821B1A30h-821B1A60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B1A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1A60);
		  /* 821B1A60h */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 821B1A60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821B1A60h case    0:*/		return 0x821B1A64;
		  /* 821B1A64h */ case    1:  		/* mr R10, R8 */
		/* 821B1A64h case    1:*/		regs.R10 = regs.R8;
		/* 821B1A64h case    1:*/		return 0x821B1A68;
	}
	return 0x821B1A68;
} // Block from 821B1A60h-821B1A68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1A68);
		  /* 821B1A68h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821B1A68h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821B1A68h case    0:*/		return 0x821B1A6C;
		  /* 821B1A6Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B1A6Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B1A78;  }
		/* 821B1A6Ch case    1:*/		return 0x821B1A70;
	}
	return 0x821B1A70;
} // Block from 821B1A68h-821B1A70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1A70);
		  /* 821B1A70h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B1A70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B1A70h case    0:*/		return 0x821B1A74;
		  /* 821B1A74h */ case    1:  		/* bc 4, CR6_EQ, -116 */
		/* 821B1A74h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B1A00;  }
		/* 821B1A74h case    1:*/		return 0x821B1A78;
	}
	return 0x821B1A78;
} // Block from 821B1A70h-821B1A78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1A78);
		  /* 821B1A78h */ case    0:  		/* li R11, 0 */
		/* 821B1A78h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B1A78h case    0:*/		return 0x821B1A7C;
		  /* 821B1A7Ch */ case    1:  		/* stw R7, <#[R14 + 564]> */
		/* 821B1A7Ch case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R14 + 0x00000234) );
		/* 821B1A7Ch case    1:*/		return 0x821B1A80;
		  /* 821B1A80h */ case    2:  		/* stw R11, <#[R1 + 104]> */
		/* 821B1A80h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821B1A80h case    2:*/		return 0x821B1A84;
		  /* 821B1A84h */ case    3:  		/* lwz R21, <#[R1 + 96]> */
		/* 821B1A84h case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000060) );
		/* 821B1A84h case    3:*/		return 0x821B1A88;
		  /* 821B1A88h */ case    4:  		/* li R20, 0 */
		/* 821B1A88h case    4:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821B1A88h case    4:*/		return 0x821B1A8C;
		  /* 821B1A8Ch */ case    5:  		/* addi R11, R21, 16 */
		/* 821B1A8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x10);
		/* 821B1A8Ch case    5:*/		return 0x821B1A90;
		  /* 821B1A90h */ case    6:  		/* mr R30, R20 */
		/* 821B1A90h case    6:*/		regs.R30 = regs.R20;
		/* 821B1A90h case    6:*/		return 0x821B1A94;
		  /* 821B1A94h */ case    7:  		/* lwz R31, <#[R21 + 20]> */
		/* 821B1A94h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000014) );
		/* 821B1A94h case    7:*/		return 0x821B1A98;
		  /* 821B1A98h */ case    8:  		/* rlwinm. R10, R31, 0, 31, 31 */
		/* 821B1A98h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R31);
		/* 821B1A98h case    8:*/		return 0x821B1A9C;
		  /* 821B1A9Ch */ case    9:  		/* bc 4, CR0_EQ, 172 */
		/* 821B1A9Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821B1B48;  }
		/* 821B1A9Ch case    9:*/		return 0x821B1AA0;
		  /* 821B1AA0h */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 821B1AA0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B1AA0h case   10:*/		return 0x821B1AA4;
		  /* 821B1AA4h */ case   11:  		/* bc 12, CR0_EQ, 164 */
		/* 821B1AA4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B1B48;  }
		/* 821B1AA4h case   11:*/		return 0x821B1AA8;
		  /* 821B1AA8h */ case   12:  		/* mr R3, R31 */
		/* 821B1AA8h case   12:*/		regs.R3 = regs.R31;
		/* 821B1AA8h case   12:*/		return 0x821B1AAC;
		  /* 821B1AACh */ case   13:  		/* bl -315692 */
		/* 821B1AACh case   13:*/		regs.LR = 0x821B1AB0; return 0x82164980;
		/* 821B1AACh case   13:*/		return 0x821B1AB0;
		  /* 821B1AB0h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1AB0h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1AB0h case   14:*/		return 0x821B1AB4;
		  /* 821B1AB4h */ case   15:  		/* bc 12, CR0_EQ, 24 */
		/* 821B1AB4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821B1ACC;  }
		/* 821B1AB4h case   15:*/		return 0x821B1AB8;
		  /* 821B1AB8h */ case   16:  		/* li R6, 1 */
		/* 821B1AB8h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B1AB8h case   16:*/		return 0x821B1ABC;
		  /* 821B1ABCh */ case   17:  		/* li R5, 0 */
		/* 821B1ABCh case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B1ABCh case   17:*/		return 0x821B1AC0;
		  /* 821B1AC0h */ case   18:  		/* mr R4, R31 */
		/* 821B1AC0h case   18:*/		regs.R4 = regs.R31;
		/* 821B1AC0h case   18:*/		return 0x821B1AC4;
		  /* 821B1AC4h */ case   19:  		/* mr R3, R14 */
		/* 821B1AC4h case   19:*/		regs.R3 = regs.R14;
		/* 821B1AC4h case   19:*/		return 0x821B1AC8;
		  /* 821B1AC8h */ case   20:  		/* bl 497920 */
		/* 821B1AC8h case   20:*/		regs.LR = 0x821B1ACC; return 0x8222B3C8;
		/* 821B1AC8h case   20:*/		return 0x821B1ACC;
	}
	return 0x821B1ACC;
} // Block from 821B1A78h-821B1ACCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B1ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1ACC);
		  /* 821B1ACCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821B1ACCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B1ACCh case    0:*/		return 0x821B1AD0;
		  /* 821B1AD0h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 821B1AD0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B1B14;  }
		/* 821B1AD0h case    1:*/		return 0x821B1AD4;
		  /* 821B1AD4h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821B1AD4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821B1AD4h case    2:*/		return 0x821B1AD8;
		  /* 821B1AD8h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B1AD8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B1AD8h case    3:*/		return 0x821B1ADC;
		  /* 821B1ADCh */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B1ADCh case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1ADCh case    4:*/		return 0x821B1AE0;
		  /* 821B1AE0h */ case    5:  		/* addic R10, R10, -1 */
		/* 821B1AE0h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B1AE0h case    5:*/		return 0x821B1AE4;
		  /* 821B1AE4h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821B1AE4h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B1AE4h case    6:*/		return 0x821B1AE8;
		  /* 821B1AE8h */ case    7:  		/* and R10, R10, R11 */
		/* 821B1AE8h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B1AE8h case    7:*/		return 0x821B1AEC;
		  /* 821B1AECh */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821B1AECh case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B1AECh case    8:*/		return 0x821B1AF0;
		  /* 821B1AF0h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821B1AF0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B1B04;  }
		/* 821B1AF0h case    9:*/		return 0x821B1AF4;
		  /* 821B1AF4h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B1AF4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B1AF4h case   10:*/		return 0x821B1AF8;
		  /* 821B1AF8h */ case   11:  		/* mr R30, R31 */
		/* 821B1AF8h case   11:*/		regs.R30 = regs.R31;
		/* 821B1AF8h case   11:*/		return 0x821B1AFC;
		  /* 821B1AFCh */ case   12:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B1AFCh case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B1AFCh case   12:*/		return 0x821B1B00;
		  /* 821B1B00h */ case   13:  		/* b 56 */
		/* 821B1B00h case   13:*/		return 0x821B1B38;
		/* 821B1B00h case   13:*/		return 0x821B1B04;
	}
	return 0x821B1B04;
} // Block from 821B1ACCh-821B1B04h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B1B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1B04);
		  /* 821B1B04h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B1B04h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1B04h case    0:*/		return 0x821B1B08;
		  /* 821B1B08h */ case    1:  		/* bc 4, CR0_EQ, 64 */
		/* 821B1B08h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B1B48;  }
		/* 821B1B08h case    1:*/		return 0x821B1B0C;
		  /* 821B1B0Ch */ case    2:  		/* mr R31, R11 */
		/* 821B1B0Ch case    2:*/		regs.R31 = regs.R11;
		/* 821B1B0Ch case    2:*/		return 0x821B1B10;
		  /* 821B1B10h */ case    3:  		/* b 48 */
		/* 821B1B10h case    3:*/		return 0x821B1B40;
		/* 821B1B10h case    3:*/		return 0x821B1B14;
	}
	return 0x821B1B14;
} // Block from 821B1B04h-821B1B14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B1B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1B14);
		  /* 821B1B14h */ case    0:  		/* lwz R10, <#[R21 + 20]> */
		/* 821B1B14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000014) );
		/* 821B1B14h case    0:*/		return 0x821B1B18;
		  /* 821B1B18h */ case    1:  		/* addi R11, R21, 16 */
		/* 821B1B18h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x10);
		/* 821B1B18h case    1:*/		return 0x821B1B1C;
		  /* 821B1B1Ch */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821B1B1Ch case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B1B1Ch case    2:*/		return 0x821B1B20;
		  /* 821B1B20h */ case    3:  		/* addic R9, R9, -1 */
		/* 821B1B20h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B1B20h case    3:*/		return 0x821B1B24;
		  /* 821B1B24h */ case    4:  		/* subfe R9, R9, R9 */
		/* 821B1B24h case    4:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B1B24h case    4:*/		return 0x821B1B28;
		  /* 821B1B28h */ case    5:  		/* and R10, R9, R10 */
		/* 821B1B28h case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821B1B28h case    5:*/		return 0x821B1B2C;
		  /* 821B1B2Ch */ case    6:  		/* cmplw CR6, R31, R10 */
		/* 821B1B2Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B1B2Ch case    6:*/		return 0x821B1B30;
		  /* 821B1B30h */ case    7:  		/* bc 12, CR6_EQ, -60 */
		/* 821B1B30h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B1AF4;  }
		/* 821B1B30h case    7:*/		return 0x821B1B34;
		  /* 821B1B34h */ case    8:  		/* lwz R31, <#[R11 + 4]> */
		/* 821B1B34h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821B1B34h case    8:*/		return 0x821B1B38;
	}
	return 0x821B1B38;
} // Block from 821B1B14h-821B1B38h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B1B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1B38);
		  /* 821B1B38h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B1B38h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B1B38h case    0:*/		return 0x821B1B3C;
		  /* 821B1B3Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B1B3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B1B48;  }
		/* 821B1B3Ch case    1:*/		return 0x821B1B40;
	}
	return 0x821B1B40;
} // Block from 821B1B38h-821B1B40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1B40);
		  /* 821B1B40h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821B1B40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B1B40h case    0:*/		return 0x821B1B44;
		  /* 821B1B44h */ case    1:  		/* bc 4, CR6_EQ, -156 */
		/* 821B1B44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B1AA8;  }
		/* 821B1B44h case    1:*/		return 0x821B1B48;
	}
	return 0x821B1B48;
} // Block from 821B1B40h-821B1B48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B1B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1B48);
		  /* 821B1B48h */ case    0:  		/* lwz R31, <#[R21 + 28]> */
		/* 821B1B48h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x0000001C) );
		/* 821B1B48h case    0:*/		return 0x821B1B4C;
		  /* 821B1B4Ch */ case    1:  		/* addi R11, R21, 24 */
		/* 821B1B4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x18);
		/* 821B1B4Ch case    1:*/		return 0x821B1B50;
		  /* 821B1B50h */ case    2:  		/* mr R23, R20 */
		/* 821B1B50h case    2:*/		regs.R23 = regs.R20;
		/* 821B1B50h case    2:*/		return 0x821B1B54;
		  /* 821B1B54h */ case    3:  		/* rlwinm. R10, R31, 0, 31, 31 */
		/* 821B1B54h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R31);
		/* 821B1B54h case    3:*/		return 0x821B1B58;
		  /* 821B1B58h */ case    4:  		/* bc 4, CR0_EQ, 2004 */
		/* 821B1B58h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B232C;  }
		/* 821B1B58h case    4:*/		return 0x821B1B5C;
		  /* 821B1B5Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821B1B5Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B1B5Ch case    5:*/		return 0x821B1B60;
		  /* 821B1B60h */ case    6:  		/* bc 12, CR0_EQ, 1996 */
		/* 821B1B60h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B232C;  }
		/* 821B1B60h case    6:*/		return 0x821B1B64;
		  /* 821B1B64h */ case    7:  		/* mr R3, R31 */
		/* 821B1B64h case    7:*/		regs.R3 = regs.R31;
		/* 821B1B64h case    7:*/		return 0x821B1B68;
		  /* 821B1B68h */ case    8:  		/* bl -89720 */
		/* 821B1B68h case    8:*/		regs.LR = 0x821B1B6C; return 0x8219BCF0;
		/* 821B1B68h case    8:*/		return 0x821B1B6C;
		  /* 821B1B6Ch */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1B6Ch case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1B6Ch case    9:*/		return 0x821B1B70;
		  /* 821B1B70h */ case   10:  		/* bc 12, CR0_EQ, 1856 */
		/* 821B1B70h case   10:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1B70h case   10:*/		return 0x821B1B74;
		  /* 821B1B74h */ case   11:  		/* stw R20, <#[R31 + 32]> */
		/* 821B1B74h case   11:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000020) );
		/* 821B1B74h case   11:*/		return 0x821B1B78;
		  /* 821B1B78h */ case   12:  		/* mr R4, R31 */
		/* 821B1B78h case   12:*/		regs.R4 = regs.R31;
		/* 821B1B78h case   12:*/		return 0x821B1B7C;
		  /* 821B1B7Ch */ case   13:  		/* mr R3, R14 */
		/* 821B1B7Ch case   13:*/		regs.R3 = regs.R14;
		/* 821B1B7Ch case   13:*/		return 0x821B1B80;
		  /* 821B1B80h */ case   14:  		/* bl -86592 */
		/* 821B1B80h case   14:*/		regs.LR = 0x821B1B84; return 0x8219C940;
		/* 821B1B80h case   14:*/		return 0x821B1B84;
		  /* 821B1B84h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1B84h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1B84h case   15:*/		return 0x821B1B88;
		  /* 821B1B88h */ case   16:  		/* bc 4, CR0_EQ, 1832 */
		/* 821B1B88h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1B88h case   16:*/		return 0x821B1B8C;
		  /* 821B1B8Ch */ case   17:  		/* lwz R30, <#[R31 + 8]> */
		/* 821B1B8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1B8Ch case   17:*/		return 0x821B1B90;
		  /* 821B1B90h */ case   18:  		/* rlwinm R11, R30, 25, 25, 31 */
		/* 821B1B90h case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R30);
		/* 821B1B90h case   18:*/		return 0x821B1B94;
		  /* 821B1B94h */ case   19:  		/* cmpwi CR6, R11, 3 */
		/* 821B1B94h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821B1B94h case   19:*/		return 0x821B1B98;
		  /* 821B1B98h */ case   20:  		/* bc 12, CR6_EQ, 948 */
		/* 821B1B98h case   20:*/		if ( regs.CR[6].eq ) { return 0x821B1F4C;  }
		/* 821B1B98h case   20:*/		return 0x821B1B9C;
		  /* 821B1B9Ch */ case   21:  		/* cmpwi CR6, R11, 5 */
		/* 821B1B9Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821B1B9Ch case   21:*/		return 0x821B1BA0;
		  /* 821B1BA0h */ case   22:  		/* bc 12, CR6_EQ, 812 */
		/* 821B1BA0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B1ECC;  }
		/* 821B1BA0h case   22:*/		return 0x821B1BA4;
		  /* 821B1BA4h */ case   23:  		/* cmpwi CR6, R11, 6 */
		/* 821B1BA4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821B1BA4h case   23:*/		return 0x821B1BA8;
		  /* 821B1BA8h */ case   24:  		/* bc 12, CR6_EQ, 564 */
		/* 821B1BA8h case   24:*/		if ( regs.CR[6].eq ) { return 0x821B1DDC;  }
		/* 821B1BA8h case   24:*/		return 0x821B1BAC;
		  /* 821B1BACh */ case   25:  		/* cmpwi CR6, R11, 7 */
		/* 821B1BACh case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821B1BACh case   25:*/		return 0x821B1BB0;
		  /* 821B1BB0h */ case   26:  		/* bc 12, CR6_EQ, 220 */
		/* 821B1BB0h case   26:*/		if ( regs.CR[6].eq ) { return 0x821B1C8C;  }
		/* 821B1BB0h case   26:*/		return 0x821B1BB4;
		  /* 821B1BB4h */ case   27:  		/* cmpwi CR6, R11, 8 */
		/* 821B1BB4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821B1BB4h case   27:*/		return 0x821B1BB8;
		  /* 821B1BB8h */ case   28:  		/* bc 4, CR6_EQ, 1784 */
		/* 821B1BB8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821B22B0;  }
		/* 821B1BB8h case   28:*/		return 0x821B1BBC;
		  /* 821B1BBCh */ case   29:  		/* lwz R3, <#[R31 + 48]> */
		/* 821B1BBCh case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1BBCh case   29:*/		return 0x821B1BC0;
		  /* 821B1BC0h */ case   30:  		/* fmr FR1, FR30 */
		/* 821B1BC0h case   30:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B1BC0h case   30:*/		return 0x821B1BC4;
		  /* 821B1BC4h */ case   31:  		/* bl -310804 */
		/* 821B1BC4h case   31:*/		regs.LR = 0x821B1BC8; return 0x82165DB0;
		/* 821B1BC4h case   31:*/		return 0x821B1BC8;
		  /* 821B1BC8h */ case   32:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1BC8h case   32:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1BC8h case   32:*/		return 0x821B1BCC;
		  /* 821B1BCCh */ case   33:  		/* bc 12, CR0_EQ, 1764 */
		/* 821B1BCCh case   33:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1BCCh case   33:*/		return 0x821B1BD0;
		  /* 821B1BD0h */ case   34:  		/* li R4, 1 */
		/* 821B1BD0h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B1BD0h case   34:*/		return 0x821B1BD4;
		  /* 821B1BD4h */ case   35:  		/* lwz R29, <#[R31 + 44]> */
		/* 821B1BD4h case   35:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B1BD4h case   35:*/		return 0x821B1BD8;
		  /* 821B1BD8h */ case   36:  		/* mr R3, R14 */
		/* 821B1BD8h case   36:*/		regs.R3 = regs.R14;
		/* 821B1BD8h case   36:*/		return 0x821B1BDC;
		  /* 821B1BDCh */ case   37:  		/* fmr FR4, FR31 */
		/* 821B1BDCh case   37:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821B1BDCh case   37:*/		return 0x821B1BE0;
		  /* 821B1BE0h */ case   38:  		/* fmr FR3, FR31 */
		/* 821B1BE0h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821B1BE0h case   38:*/		return 0x821B1BE4;
		  /* 821B1BE4h */ case   39:  		/* fmr FR2, FR31 */
		/* 821B1BE4h case   39:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821B1BE4h case   39:*/		return 0x821B1BE8;
		  /* 821B1BE8h */ case   40:  		/* fmr FR1, FR29 */
		/* 821B1BE8h case   40:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821B1BE8h case   40:*/		return 0x821B1BEC;
		  /* 821B1BECh */ case   41:  		/* bl 495468 */
		/* 821B1BECh case   41:*/		regs.LR = 0x821B1BF0; return 0x8222AB58;
		/* 821B1BECh case   41:*/		return 0x821B1BF0;
		  /* 821B1BF0h */ case   42:  		/* mr R30, R3 */
		/* 821B1BF0h case   42:*/		regs.R30 = regs.R3;
		/* 821B1BF0h case   42:*/		return 0x821B1BF4;
		  /* 821B1BF4h */ case   43:  		/* lwz R11, <#[R29]> */
		/* 821B1BF4h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B1BF4h case   43:*/		return 0x821B1BF8;
		  /* 821B1BF8h */ case   44:  		/* mr R3, R14 */
		/* 821B1BF8h case   44:*/		regs.R3 = regs.R14;
		/* 821B1BF8h case   44:*/		return 0x821B1BFC;
		  /* 821B1BFCh */ case   45:  		/* mr R4, R30 */
		/* 821B1BFCh case   45:*/		regs.R4 = regs.R30;
		/* 821B1BFCh case   45:*/		return 0x821B1C00;
		  /* 821B1C00h */ case   46:  		/* rlwinm R28, R11, 7, 29, 31 */
		/* 821B1C00h case   46:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R28,regs.R11);
		/* 821B1C00h case   46:*/		return 0x821B1C04;
		  /* 821B1C04h */ case   47:  		/* bl -236548 */
		/* 821B1C04h case   47:*/		regs.LR = 0x821B1C08; return 0x82178000;
		/* 821B1C04h case   47:*/		return 0x821B1C08;
		  /* 821B1C08h */ case   48:  		/* lwz R11, <#[R3]> */
		/* 821B1C08h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1C08h case   48:*/		return 0x821B1C0C;
		  /* 821B1C0Ch */ case   49:  		/* li R4, 0 */
		/* 821B1C0Ch case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1C0Ch case   49:*/		return 0x821B1C10;
		  /* 821B1C10h */ case   50:  		/* rlwimi R11, R28, 25, 4, 6 */
		/* 821B1C10h case   50:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R28);
		/* 821B1C10h case   50:*/		return 0x821B1C14;
		  /* 821B1C14h */ case   51:  		/* mr R27, R3 */
		/* 821B1C14h case   51:*/		regs.R27 = regs.R3;
		/* 821B1C14h case   51:*/		return 0x821B1C18;
		  /* 821B1C18h */ case   52:  		/* stw R11, <#[R3]> */
		/* 821B1C18h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1C18h case   52:*/		return 0x821B1C1C;
		  /* 821B1C1Ch */ case   53:  		/* bl -237916 */
		/* 821B1C1Ch case   53:*/		regs.LR = 0x821B1C20; return 0x82177AC0;
		/* 821B1C1Ch case   53:*/		return 0x821B1C20;
		  /* 821B1C20h */ case   54:  		/* lwz R11, <#[R27]> */
		/* 821B1C20h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1C20h case   54:*/		return 0x821B1C24;
		  /* 821B1C24h */ case   55:  		/* mr R8, R27 */
		/* 821B1C24h case   55:*/		regs.R8 = regs.R27;
		/* 821B1C24h case   55:*/		return 0x821B1C28;
		  /* 821B1C28h */ case   56:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1C28h case   56:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1C28h case   56:*/		return 0x821B1C2C;
		  /* 821B1C2Ch */ case   57:  		/* stw R11, <#[R27]> */
		/* 821B1C2Ch case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1C2Ch case   57:*/		return 0x821B1C30;
		  /* 821B1C30h */ case   58:  		/* lwz R7, <#[R31 + 48]> */
		/* 821B1C30h case   58:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1C30h case   58:*/		return 0x821B1C34;
		  /* 821B1C34h */ case   59:  		/* mr R6, R29 */
		/* 821B1C34h case   59:*/		regs.R6 = regs.R29;
		/* 821B1C34h case   59:*/		return 0x821B1C38;
		  /* 821B1C38h */ case   60:  		/* mr R5, R31 */
		/* 821B1C38h case   60:*/		regs.R5 = regs.R31;
		/* 821B1C38h case   60:*/		return 0x821B1C3C;
		  /* 821B1C3Ch */ case   61:  		/* li R4, 0 */
		/* 821B1C3Ch case   61:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1C3Ch case   61:*/		return 0x821B1C40;
		  /* 821B1C40h */ case   62:  		/* mr R3, R14 */
		/* 821B1C40h case   62:*/		regs.R3 = regs.R14;
		/* 821B1C40h case   62:*/		return 0x821B1C44;
		  /* 821B1C44h */ case   63:  		/* bl -80460 */
		/* 821B1C44h case   63:*/		regs.LR = 0x821B1C48; return 0x8219E1F8;
		/* 821B1C44h case   63:*/		return 0x821B1C48;
		  /* 821B1C48h */ case   64:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B1C48h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1C48h case   64:*/		return 0x821B1C4C;
		  /* 821B1C4Ch */ case   65:  		/* mr R29, R3 */
		/* 821B1C4Ch case   65:*/		regs.R29 = regs.R3;
		/* 821B1C4Ch case   65:*/		return 0x821B1C50;
		  /* 821B1C50h */ case   66:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B1C50h case   66:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B1C50h case   66:*/		return 0x821B1C54;
		  /* 821B1C54h */ case   67:  		/* bc 12, CR0_EQ, 16 */
		/* 821B1C54h case   67:*/		if ( regs.CR[0].eq ) { return 0x821B1C64;  }
		/* 821B1C54h case   67:*/		return 0x821B1C58;
		  /* 821B1C58h */ case   68:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B1C58h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B1C58h case   68:*/		return 0x821B1C5C;
		  /* 821B1C5Ch */ case   69:  		/* ori R11, R11, 1 */
		/* 821B1C5Ch case   69:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B1C5Ch case   69:*/		return 0x821B1C60;
		  /* 821B1C60h */ case   70:  		/* stw R11, <#[R3 + 8]> */
		/* 821B1C60h case   70:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B1C60h case   70:*/		return 0x821B1C64;
	}
	return 0x821B1C64;
} // Block from 821B1B48h-821B1C64h (71 instructions)

//////////////////////////////////////////////////////
// Block at 821B1C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1C64);
		  /* 821B1C64h */ case    0:  		/* mr R3, R30 */
		/* 821B1C64h case    0:*/		regs.R3 = regs.R30;
		/* 821B1C64h case    0:*/		return 0x821B1C68;
		  /* 821B1C68h */ case    1:  		/* bl -112824 */
		/* 821B1C68h case    1:*/		regs.LR = 0x821B1C6C; return 0x821963B0;
		/* 821B1C68h case    1:*/		return 0x821B1C6C;
		  /* 821B1C6Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821B1C6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B1C6Ch case    2:*/		return 0x821B1C70;
		  /* 821B1C70h */ case    3:  		/* mr R4, R29 */
		/* 821B1C70h case    3:*/		regs.R4 = regs.R29;
		/* 821B1C70h case    3:*/		return 0x821B1C74;
		  /* 821B1C74h */ case    4:  		/* oris R11, R11, 256 */
		/* 821B1C74h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821B1C74h case    4:*/		return 0x821B1C78;
		  /* 821B1C78h */ case    5:  		/* mr R3, R14 */
		/* 821B1C78h case    5:*/		regs.R3 = regs.R14;
		/* 821B1C78h case    5:*/		return 0x821B1C7C;
		  /* 821B1C7Ch */ case    6:  		/* stw R11, <#[R30 + 8]> */
		/* 821B1C7Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B1C7Ch case    6:*/		return 0x821B1C80;
		  /* 821B1C80h */ case    7:  		/* bl -83784 */
		/* 821B1C80h case    7:*/		regs.LR = 0x821B1C84; return 0x8219D538;
		/* 821B1C80h case    7:*/		return 0x821B1C84;
		  /* 821B1C84h */ case    8:  		/* mr R5, R29 */
		/* 821B1C84h case    8:*/		regs.R5 = regs.R29;
		/* 821B1C84h case    8:*/		return 0x821B1C88;
		  /* 821B1C88h */ case    9:  		/* b 1556 */
		/* 821B1C88h case    9:*/		return 0x821B229C;
		/* 821B1C88h case    9:*/		return 0x821B1C8C;
	}
	return 0x821B1C8C;
} // Block from 821B1C64h-821B1C8Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B1C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1C8C);
		  /* 821B1C8Ch */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 821B1C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1C8Ch case    0:*/		return 0x821B1C90;
		  /* 821B1C90h */ case    1:  		/* fmr FR1, FR30 */
		/* 821B1C90h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B1C90h case    1:*/		return 0x821B1C94;
		  /* 821B1C94h */ case    2:  		/* bl -311012 */
		/* 821B1C94h case    2:*/		regs.LR = 0x821B1C98; return 0x82165DB0;
		/* 821B1C94h case    2:*/		return 0x821B1C98;
		  /* 821B1C98h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1C98h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1C98h case    3:*/		return 0x821B1C9C;
		  /* 821B1C9Ch */ case    4:  		/* bc 12, CR0_EQ, 1556 */
		/* 821B1C9Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1C9Ch case    4:*/		return 0x821B1CA0;
		  /* 821B1CA0h */ case    5:  		/* li R4, 1 */
		/* 821B1CA0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B1CA0h case    5:*/		return 0x821B1CA4;
		  /* 821B1CA4h */ case    6:  		/* lwz R30, <#[R31 + 44]> */
		/* 821B1CA4h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B1CA4h case    6:*/		return 0x821B1CA8;
		  /* 821B1CA8h */ case    7:  		/* mr R3, R14 */
		/* 821B1CA8h case    7:*/		regs.R3 = regs.R14;
		/* 821B1CA8h case    7:*/		return 0x821B1CAC;
		  /* 821B1CACh */ case    8:  		/* fmr FR4, FR31 */
		/* 821B1CACh case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821B1CACh case    8:*/		return 0x821B1CB0;
		  /* 821B1CB0h */ case    9:  		/* fmr FR3, FR31 */
		/* 821B1CB0h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821B1CB0h case    9:*/		return 0x821B1CB4;
		  /* 821B1CB4h */ case   10:  		/* fmr FR2, FR31 */
		/* 821B1CB4h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821B1CB4h case   10:*/		return 0x821B1CB8;
		  /* 821B1CB8h */ case   11:  		/* fmr FR1, FR29 */
		/* 821B1CB8h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821B1CB8h case   11:*/		return 0x821B1CBC;
		  /* 821B1CBCh */ case   12:  		/* bl 495260 */
		/* 821B1CBCh case   12:*/		regs.LR = 0x821B1CC0; return 0x8222AB58;
		/* 821B1CBCh case   12:*/		return 0x821B1CC0;
		  /* 821B1CC0h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 821B1CC0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B1CC0h case   13:*/		return 0x821B1CC4;
		  /* 821B1CC4h */ case   14:  		/* mr R29, R3 */
		/* 821B1CC4h case   14:*/		regs.R29 = regs.R3;
		/* 821B1CC4h case   14:*/		return 0x821B1CC8;
		  /* 821B1CC8h */ case   15:  		/* mr R3, R14 */
		/* 821B1CC8h case   15:*/		regs.R3 = regs.R14;
		/* 821B1CC8h case   15:*/		return 0x821B1CCC;
		  /* 821B1CCCh */ case   16:  		/* rlwinm. R10, R11, 30, 31, 31 */
		/* 821B1CCCh case   16:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1CCCh case   16:*/		return 0x821B1CD0;
		  /* 821B1CD0h */ case   17:  		/* bc 12, CR0_EQ, 120 */
		/* 821B1CD0h case   17:*/		if ( regs.CR[0].eq ) { return 0x821B1D48;  }
		/* 821B1CD0h case   17:*/		return 0x821B1CD4;
		  /* 821B1CD4h */ case   18:  		/* mr R4, R30 */
		/* 821B1CD4h case   18:*/		regs.R4 = regs.R30;
		/* 821B1CD4h case   18:*/		return 0x821B1CD8;
		  /* 821B1CD8h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821B1CD8h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B1CD8h case   19:*/		return 0x821B1CDC;
		  /* 821B1CDCh */ case   20:  		/* bl -265196 */
		/* 821B1CDCh case   20:*/		regs.LR = 0x821B1CE0; return 0x821710F0;
		/* 821B1CDCh case   20:*/		return 0x821B1CE0;
		  /* 821B1CE0h */ case   21:  		/* mr R28, R3 */
		/* 821B1CE0h case   21:*/		regs.R28 = regs.R3;
		/* 821B1CE0h case   21:*/		return 0x821B1CE4;
		  /* 821B1CE4h */ case   22:  		/* mr R4, R29 */
		/* 821B1CE4h case   22:*/		regs.R4 = regs.R29;
		/* 821B1CE4h case   22:*/		return 0x821B1CE8;
		  /* 821B1CE8h */ case   23:  		/* mr R3, R14 */
		/* 821B1CE8h case   23:*/		regs.R3 = regs.R14;
		/* 821B1CE8h case   23:*/		return 0x821B1CEC;
		  /* 821B1CECh */ case   24:  		/* lwz R11, <#[R28]> */
		/* 821B1CECh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1CECh case   24:*/		return 0x821B1CF0;
		  /* 821B1CF0h */ case   25:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 821B1CF0h case   25:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821B1CF0h case   25:*/		return 0x821B1CF4;
		  /* 821B1CF4h */ case   26:  		/* stw R11, <#[R28]> */
		/* 821B1CF4h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1CF4h case   26:*/		return 0x821B1CF8;
		  /* 821B1CF8h */ case   27:  		/* lwz R11, <#[R30]> */
		/* 821B1CF8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B1CF8h case   27:*/		return 0x821B1CFC;
		  /* 821B1CFCh */ case   28:  		/* rlwinm R30, R11, 7, 29, 31 */
		/* 821B1CFCh case   28:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R30,regs.R11);
		/* 821B1CFCh case   28:*/		return 0x821B1D00;
		  /* 821B1D00h */ case   29:  		/* bl -236800 */
		/* 821B1D00h case   29:*/		regs.LR = 0x821B1D04; return 0x82178000;
		/* 821B1D00h case   29:*/		return 0x821B1D04;
		  /* 821B1D04h */ case   30:  		/* lwz R11, <#[R3]> */
		/* 821B1D04h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1D04h case   30:*/		return 0x821B1D08;
		  /* 821B1D08h */ case   31:  		/* li R4, 0 */
		/* 821B1D08h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1D08h case   31:*/		return 0x821B1D0C;
		  /* 821B1D0Ch */ case   32:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 821B1D0Ch case   32:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 821B1D0Ch case   32:*/		return 0x821B1D10;
	}
	return 0x821B1D10;
} // Block from 821B1C8Ch-821B1D10h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821B1D10h
// Function '?CombineSiblings@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1D10);
		  /* 821B1D10h */ case    0:  		/* mr R27, R3 */
		/* 821B1D10h case    0:*/		regs.R27 = regs.R3;
		/* 821B1D10h case    0:*/		return 0x821B1D14;
		  /* 821B1D14h */ case    1:  		/* stw R11, <#[R3]> */
		/* 821B1D14h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1D14h case    1:*/		return 0x821B1D18;
		  /* 821B1D18h */ case    2:  		/* bl -238168 */
		/* 821B1D18h case    2:*/		regs.LR = 0x821B1D1C; return 0x82177AC0;
		/* 821B1D18h case    2:*/		return 0x821B1D1C;
		  /* 821B1D1Ch */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821B1D1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1D1Ch case    3:*/		return 0x821B1D20;
		  /* 821B1D20h */ case    4:  		/* mr R6, R28 */
		/* 821B1D20h case    4:*/		regs.R6 = regs.R28;
		/* 821B1D20h case    4:*/		return 0x821B1D24;
		  /* 821B1D24h */ case    5:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1D24h case    5:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1D24h case    5:*/		return 0x821B1D28;
		  /* 821B1D28h */ case    6:  		/* mr R8, R27 */
		/* 821B1D28h case    6:*/		regs.R8 = regs.R27;
		/* 821B1D28h case    6:*/		return 0x821B1D2C;
		  /* 821B1D2Ch */ case    7:  		/* stw R11, <#[R27]> */
		/* 821B1D2Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1D2Ch case    7:*/		return 0x821B1D30;
		  /* 821B1D30h */ case    8:  		/* lwz R7, <#[R31 + 48]> */
		/* 821B1D30h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1D30h case    8:*/		return 0x821B1D34;
		  /* 821B1D34h */ case    9:  		/* mr R3, R14 */
		/* 821B1D34h case    9:*/		regs.R3 = regs.R14;
		/* 821B1D34h case    9:*/		return 0x821B1D38;
		  /* 821B1D38h */ case   10:  		/* li R4, 0 */
		/* 821B1D38h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1D38h case   10:*/		return 0x821B1D3C;
		  /* 821B1D3Ch */ case   11:  		/* mr R5, R31 */
		/* 821B1D3Ch case   11:*/		regs.R5 = regs.R31;
		/* 821B1D3Ch case   11:*/		return 0x821B1D40;
		  /* 821B1D40h */ case   12:  		/* bl -80200 */
		/* 821B1D40h case   12:*/		regs.LR = 0x821B1D44; return 0x8219E3F8;
		/* 821B1D40h case   12:*/		return 0x821B1D44;
		  /* 821B1D44h */ case   13:  		/* b 84 */
		/* 821B1D44h case   13:*/		return 0x821B1D98;
		/* 821B1D44h case   13:*/		return 0x821B1D48;
	}
	return 0x821B1D48;
} // Block from 821B1D10h-821B1D48h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B1D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1D48);
		  /* 821B1D48h */ case    0:  		/* mr R4, R29 */
		/* 821B1D48h case    0:*/		regs.R4 = regs.R29;
		/* 821B1D48h case    0:*/		return 0x821B1D4C;
		  /* 821B1D4Ch */ case    1:  		/* lwz R28, <#[R31 + 48]> */
		/* 821B1D4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1D4Ch case    1:*/		return 0x821B1D50;
		  /* 821B1D50h */ case    2:  		/* rlwinm R27, R11, 7, 29, 31 */
		/* 821B1D50h case    2:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R27,regs.R11);
		/* 821B1D50h case    2:*/		return 0x821B1D54;
		  /* 821B1D54h */ case    3:  		/* bl -236884 */
		/* 821B1D54h case    3:*/		regs.LR = 0x821B1D58; return 0x82178000;
		/* 821B1D54h case    3:*/		return 0x821B1D58;
		  /* 821B1D58h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821B1D58h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1D58h case    4:*/		return 0x821B1D5C;
		  /* 821B1D5Ch */ case    5:  		/* li R4, 0 */
		/* 821B1D5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1D5Ch case    5:*/		return 0x821B1D60;
		  /* 821B1D60h */ case    6:  		/* rlwimi R11, R27, 25, 4, 6 */
		/* 821B1D60h case    6:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R27);
		/* 821B1D60h case    6:*/		return 0x821B1D64;
		  /* 821B1D64h */ case    7:  		/* mr R26, R3 */
		/* 821B1D64h case    7:*/		regs.R26 = regs.R3;
		/* 821B1D64h case    7:*/		return 0x821B1D68;
		  /* 821B1D68h */ case    8:  		/* stw R11, <#[R3]> */
		/* 821B1D68h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1D68h case    8:*/		return 0x821B1D6C;
		  /* 821B1D6Ch */ case    9:  		/* bl -238252 */
		/* 821B1D6Ch case    9:*/		regs.LR = 0x821B1D70; return 0x82177AC0;
		/* 821B1D6Ch case    9:*/		return 0x821B1D70;
		  /* 821B1D70h */ case   10:  		/* lwz R11, <#[R26]> */
		/* 821B1D70h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1D70h case   10:*/		return 0x821B1D74;
		  /* 821B1D74h */ case   11:  		/* mr R8, R28 */
		/* 821B1D74h case   11:*/		regs.R8 = regs.R28;
		/* 821B1D74h case   11:*/		return 0x821B1D78;
		  /* 821B1D78h */ case   12:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1D78h case   12:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1D78h case   12:*/		return 0x821B1D7C;
		  /* 821B1D7Ch */ case   13:  		/* mr R6, R30 */
		/* 821B1D7Ch case   13:*/		regs.R6 = regs.R30;
		/* 821B1D7Ch case   13:*/		return 0x821B1D80;
		  /* 821B1D80h */ case   14:  		/* stw R11, <#[R26]> */
		/* 821B1D80h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1D80h case   14:*/		return 0x821B1D84;
		  /* 821B1D84h */ case   15:  		/* mr R7, R26 */
		/* 821B1D84h case   15:*/		regs.R7 = regs.R26;
		/* 821B1D84h case   15:*/		return 0x821B1D88;
		  /* 821B1D88h */ case   16:  		/* mr R5, R31 */
		/* 821B1D88h case   16:*/		regs.R5 = regs.R31;
		/* 821B1D88h case   16:*/		return 0x821B1D8C;
		  /* 821B1D8Ch */ case   17:  		/* li R4, 0 */
		/* 821B1D8Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1D8Ch case   17:*/		return 0x821B1D90;
		  /* 821B1D90h */ case   18:  		/* mr R3, R14 */
		/* 821B1D90h case   18:*/		regs.R3 = regs.R14;
		/* 821B1D90h case   18:*/		return 0x821B1D94;
		  /* 821B1D94h */ case   19:  		/* bl -80540 */
		/* 821B1D94h case   19:*/		regs.LR = 0x821B1D98; return 0x8219E2F8;
		/* 821B1D94h case   19:*/		return 0x821B1D98;
	}
	return 0x821B1D98;
} // Block from 821B1D48h-821B1D98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B1D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1D98);
		  /* 821B1D98h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B1D98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B1D98h case    0:*/		return 0x821B1D9C;
		  /* 821B1D9Ch */ case    1:  		/* mr R30, R3 */
		/* 821B1D9Ch case    1:*/		regs.R30 = regs.R3;
		/* 821B1D9Ch case    1:*/		return 0x821B1DA0;
		  /* 821B1DA0h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B1DA0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B1DA0h case    2:*/		return 0x821B1DA4;
		  /* 821B1DA4h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821B1DA4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B1DB4;  }
		/* 821B1DA4h case    3:*/		return 0x821B1DA8;
		  /* 821B1DA8h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B1DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B1DA8h case    4:*/		return 0x821B1DAC;
		  /* 821B1DACh */ case    5:  		/* ori R11, R11, 1 */
		/* 821B1DACh case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B1DACh case    5:*/		return 0x821B1DB0;
		  /* 821B1DB0h */ case    6:  		/* stw R11, <#[R3 + 8]> */
		/* 821B1DB0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B1DB0h case    6:*/		return 0x821B1DB4;
	}
	return 0x821B1DB4;
} // Block from 821B1D98h-821B1DB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B1DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1DB4);
		  /* 821B1DB4h */ case    0:  		/* mr R3, R29 */
		/* 821B1DB4h case    0:*/		regs.R3 = regs.R29;
		/* 821B1DB4h case    0:*/		return 0x821B1DB8;
		  /* 821B1DB8h */ case    1:  		/* bl -113160 */
		/* 821B1DB8h case    1:*/		regs.LR = 0x821B1DBC; return 0x821963B0;
		/* 821B1DB8h case    1:*/		return 0x821B1DBC;
		  /* 821B1DBCh */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B1DBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B1DBCh case    2:*/		return 0x821B1DC0;
		  /* 821B1DC0h */ case    3:  		/* mr R4, R30 */
		/* 821B1DC0h case    3:*/		regs.R4 = regs.R30;
		/* 821B1DC0h case    3:*/		return 0x821B1DC4;
		  /* 821B1DC4h */ case    4:  		/* oris R11, R11, 256 */
		/* 821B1DC4h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821B1DC4h case    4:*/		return 0x821B1DC8;
		  /* 821B1DC8h */ case    5:  		/* mr R3, R14 */
		/* 821B1DC8h case    5:*/		regs.R3 = regs.R14;
		/* 821B1DC8h case    5:*/		return 0x821B1DCC;
		  /* 821B1DCCh */ case    6:  		/* stw R11, <#[R29 + 8]> */
		/* 821B1DCCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B1DCCh case    6:*/		return 0x821B1DD0;
		  /* 821B1DD0h */ case    7:  		/* bl -84120 */
		/* 821B1DD0h case    7:*/		regs.LR = 0x821B1DD4; return 0x8219D538;
		/* 821B1DD0h case    7:*/		return 0x821B1DD4;
		  /* 821B1DD4h */ case    8:  		/* mr R5, R30 */
		/* 821B1DD4h case    8:*/		regs.R5 = regs.R30;
		/* 821B1DD4h case    8:*/		return 0x821B1DD8;
		  /* 821B1DD8h */ case    9:  		/* b 1220 */
		/* 821B1DD8h case    9:*/		return 0x821B229C;
		/* 821B1DD8h case    9:*/		return 0x821B1DDC;
	}
	return 0x821B1DDC;
} // Block from 821B1DB4h-821B1DDCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B1DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1DDC);
		  /* 821B1DDCh */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 821B1DDCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1DDCh case    0:*/		return 0x821B1DE0;
		  /* 821B1DE0h */ case    1:  		/* fmr FR1, FR30 */
		/* 821B1DE0h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B1DE0h case    1:*/		return 0x821B1DE4;
		  /* 821B1DE4h */ case    2:  		/* bl -311348 */
		/* 821B1DE4h case    2:*/		regs.LR = 0x821B1DE8; return 0x82165DB0;
		/* 821B1DE4h case    2:*/		return 0x821B1DE8;
	}
	return 0x821B1DE8;
} // Block from 821B1DDCh-821B1DE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B1DE8h
// Function '?CombineMERGEInputs@Compiler@D3DXShader@@AAA_NPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1DE8);
		  /* 821B1DE8h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1DE8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1DE8h case    0:*/		return 0x821B1DEC;
		  /* 821B1DECh */ case    1:  		/* bc 12, CR0_EQ, 1220 */
		/* 821B1DECh case    1:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1DECh case    1:*/		return 0x821B1DF0;
		  /* 821B1DF0h */ case    2:  		/* li R4, 1 */
		/* 821B1DF0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B1DF0h case    2:*/		return 0x821B1DF4;
		  /* 821B1DF4h */ case    3:  		/* lwz R30, <#[R31 + 44]> */
		/* 821B1DF4h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B1DF4h case    3:*/		return 0x821B1DF8;
		  /* 821B1DF8h */ case    4:  		/* mr R3, R14 */
		/* 821B1DF8h case    4:*/		regs.R3 = regs.R14;
		/* 821B1DF8h case    4:*/		return 0x821B1DFC;
		  /* 821B1DFCh */ case    5:  		/* fmr FR4, FR31 */
		/* 821B1DFCh case    5:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821B1DFCh case    5:*/		return 0x821B1E00;
		  /* 821B1E00h */ case    6:  		/* fmr FR3, FR31 */
		/* 821B1E00h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821B1E00h case    6:*/		return 0x821B1E04;
		  /* 821B1E04h */ case    7:  		/* fmr FR2, FR31 */
		/* 821B1E04h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821B1E04h case    7:*/		return 0x821B1E08;
		  /* 821B1E08h */ case    8:  		/* fmr FR1, FR29 */
		/* 821B1E08h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821B1E08h case    8:*/		return 0x821B1E0C;
		  /* 821B1E0Ch */ case    9:  		/* bl 494924 */
		/* 821B1E0Ch case    9:*/		regs.LR = 0x821B1E10; return 0x8222AB58;
		/* 821B1E0Ch case    9:*/		return 0x821B1E10;
		  /* 821B1E10h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 821B1E10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B1E10h case   10:*/		return 0x821B1E14;
		  /* 821B1E14h */ case   11:  		/* mr R29, R3 */
		/* 821B1E14h case   11:*/		regs.R29 = regs.R3;
		/* 821B1E14h case   11:*/		return 0x821B1E18;
		  /* 821B1E18h */ case   12:  		/* mr R3, R14 */
		/* 821B1E18h case   12:*/		regs.R3 = regs.R14;
		/* 821B1E18h case   12:*/		return 0x821B1E1C;
		  /* 821B1E1Ch */ case   13:  		/* rlwinm. R10, R11, 30, 31, 31 */
		/* 821B1E1Ch case   13:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R10,regs.R11);
		/* 821B1E1Ch case   13:*/		return 0x821B1E20;
		  /* 821B1E20h */ case   14:  		/* bc 12, CR0_EQ, 104 */
		/* 821B1E20h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B1E88;  }
		/* 821B1E20h case   14:*/		return 0x821B1E24;
		  /* 821B1E24h */ case   15:  		/* mr R4, R30 */
		/* 821B1E24h case   15:*/		regs.R4 = regs.R30;
		/* 821B1E24h case   15:*/		return 0x821B1E28;
		  /* 821B1E28h */ case   16:  		/* lwz R5, <#[R30 + 12]> */
		/* 821B1E28h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B1E28h case   16:*/		return 0x821B1E2C;
		  /* 821B1E2Ch */ case   17:  		/* bl -265532 */
		/* 821B1E2Ch case   17:*/		regs.LR = 0x821B1E30; return 0x821710F0;
		/* 821B1E2Ch case   17:*/		return 0x821B1E30;
		  /* 821B1E30h */ case   18:  		/* mr R28, R3 */
		/* 821B1E30h case   18:*/		regs.R28 = regs.R3;
		/* 821B1E30h case   18:*/		return 0x821B1E34;
		  /* 821B1E34h */ case   19:  		/* mr R4, R29 */
		/* 821B1E34h case   19:*/		regs.R4 = regs.R29;
		/* 821B1E34h case   19:*/		return 0x821B1E38;
		  /* 821B1E38h */ case   20:  		/* mr R3, R14 */
		/* 821B1E38h case   20:*/		regs.R3 = regs.R14;
		/* 821B1E38h case   20:*/		return 0x821B1E3C;
		  /* 821B1E3Ch */ case   21:  		/* lwz R11, <#[R28]> */
		/* 821B1E3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1E3Ch case   21:*/		return 0x821B1E40;
		  /* 821B1E40h */ case   22:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 821B1E40h case   22:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821B1E40h case   22:*/		return 0x821B1E44;
		  /* 821B1E44h */ case   23:  		/* stw R11, <#[R28]> */
		/* 821B1E44h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B1E44h case   23:*/		return 0x821B1E48;
		  /* 821B1E48h */ case   24:  		/* lwz R11, <#[R30]> */
		/* 821B1E48h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B1E48h case   24:*/		return 0x821B1E4C;
		  /* 821B1E4Ch */ case   25:  		/* rlwinm R30, R11, 7, 29, 31 */
		/* 821B1E4Ch case   25:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R30,regs.R11);
		/* 821B1E4Ch case   25:*/		return 0x821B1E50;
		  /* 821B1E50h */ case   26:  		/* bl -237136 */
		/* 821B1E50h case   26:*/		regs.LR = 0x821B1E54; return 0x82178000;
		/* 821B1E50h case   26:*/		return 0x821B1E54;
		  /* 821B1E54h */ case   27:  		/* lwz R11, <#[R3]> */
		/* 821B1E54h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1E54h case   27:*/		return 0x821B1E58;
		  /* 821B1E58h */ case   28:  		/* li R4, 0 */
		/* 821B1E58h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1E58h case   28:*/		return 0x821B1E5C;
		  /* 821B1E5Ch */ case   29:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 821B1E5Ch case   29:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 821B1E5Ch case   29:*/		return 0x821B1E60;
		  /* 821B1E60h */ case   30:  		/* mr R27, R3 */
		/* 821B1E60h case   30:*/		regs.R27 = regs.R3;
		/* 821B1E60h case   30:*/		return 0x821B1E64;
		  /* 821B1E64h */ case   31:  		/* stw R11, <#[R3]> */
		/* 821B1E64h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1E64h case   31:*/		return 0x821B1E68;
		  /* 821B1E68h */ case   32:  		/* bl -238504 */
		/* 821B1E68h case   32:*/		regs.LR = 0x821B1E6C; return 0x82177AC0;
		/* 821B1E68h case   32:*/		return 0x821B1E6C;
		  /* 821B1E6Ch */ case   33:  		/* lwz R11, <#[R27]> */
		/* 821B1E6Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1E6Ch case   33:*/		return 0x821B1E70;
		  /* 821B1E70h */ case   34:  		/* mr R6, R28 */
		/* 821B1E70h case   34:*/		regs.R6 = regs.R28;
		/* 821B1E70h case   34:*/		return 0x821B1E74;
		  /* 821B1E74h */ case   35:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1E74h case   35:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1E74h case   35:*/		return 0x821B1E78;
		  /* 821B1E78h */ case   36:  		/* mr R8, R27 */
		/* 821B1E78h case   36:*/		regs.R8 = regs.R27;
		/* 821B1E78h case   36:*/		return 0x821B1E7C;
		  /* 821B1E7Ch */ case   37:  		/* stw R11, <#[R27]> */
		/* 821B1E7Ch case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B1E7Ch case   37:*/		return 0x821B1E80;
		  /* 821B1E80h */ case   38:  		/* lwz R7, <#[R31 + 48]> */
		/* 821B1E80h case   38:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1E80h case   38:*/		return 0x821B1E84;
		  /* 821B1E84h */ case   39:  		/* b -252 */
		/* 821B1E84h case   39:*/		return 0x821B1D88;
		/* 821B1E84h case   39:*/		return 0x821B1E88;
	}
	return 0x821B1E88;
} // Block from 821B1DE8h-821B1E88h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821B1E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1E88);
		  /* 821B1E88h */ case    0:  		/* mr R4, R29 */
		/* 821B1E88h case    0:*/		regs.R4 = regs.R29;
		/* 821B1E88h case    0:*/		return 0x821B1E8C;
		  /* 821B1E8Ch */ case    1:  		/* lwz R28, <#[R31 + 48]> */
		/* 821B1E8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1E8Ch case    1:*/		return 0x821B1E90;
		  /* 821B1E90h */ case    2:  		/* rlwinm R27, R11, 7, 29, 31 */
		/* 821B1E90h case    2:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R27,regs.R11);
		/* 821B1E90h case    2:*/		return 0x821B1E94;
		  /* 821B1E94h */ case    3:  		/* bl -237204 */
		/* 821B1E94h case    3:*/		regs.LR = 0x821B1E98; return 0x82178000;
		/* 821B1E94h case    3:*/		return 0x821B1E98;
		  /* 821B1E98h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821B1E98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1E98h case    4:*/		return 0x821B1E9C;
		  /* 821B1E9Ch */ case    5:  		/* li R4, 0 */
		/* 821B1E9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1E9Ch case    5:*/		return 0x821B1EA0;
		  /* 821B1EA0h */ case    6:  		/* rlwimi R11, R27, 25, 4, 6 */
		/* 821B1EA0h case    6:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R27);
		/* 821B1EA0h case    6:*/		return 0x821B1EA4;
		  /* 821B1EA4h */ case    7:  		/* mr R26, R3 */
		/* 821B1EA4h case    7:*/		regs.R26 = regs.R3;
		/* 821B1EA4h case    7:*/		return 0x821B1EA8;
		  /* 821B1EA8h */ case    8:  		/* stw R11, <#[R3]> */
		/* 821B1EA8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1EA8h case    8:*/		return 0x821B1EAC;
		  /* 821B1EACh */ case    9:  		/* bl -238572 */
		/* 821B1EACh case    9:*/		regs.LR = 0x821B1EB0; return 0x82177AC0;
		/* 821B1EACh case    9:*/		return 0x821B1EB0;
		  /* 821B1EB0h */ case   10:  		/* lwz R11, <#[R26]> */
		/* 821B1EB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1EB0h case   10:*/		return 0x821B1EB4;
		  /* 821B1EB4h */ case   11:  		/* mr R8, R28 */
		/* 821B1EB4h case   11:*/		regs.R8 = regs.R28;
		/* 821B1EB4h case   11:*/		return 0x821B1EB8;
		  /* 821B1EB8h */ case   12:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1EB8h case   12:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1EB8h case   12:*/		return 0x821B1EBC;
		  /* 821B1EBCh */ case   13:  		/* mr R6, R30 */
		/* 821B1EBCh case   13:*/		regs.R6 = regs.R30;
		/* 821B1EBCh case   13:*/		return 0x821B1EC0;
		  /* 821B1EC0h */ case   14:  		/* stw R11, <#[R26]> */
		/* 821B1EC0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1EC0h case   14:*/		return 0x821B1EC4;
		  /* 821B1EC4h */ case   15:  		/* mr R7, R26 */
		/* 821B1EC4h case   15:*/		regs.R7 = regs.R26;
		/* 821B1EC4h case   15:*/		return 0x821B1EC8;
		  /* 821B1EC8h */ case   16:  		/* b -404 */
		/* 821B1EC8h case   16:*/		return 0x821B1D34;
		/* 821B1EC8h case   16:*/		return 0x821B1ECC;
	}
	return 0x821B1ECC;
} // Block from 821B1E88h-821B1ECCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B1ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1ECC);
		  /* 821B1ECCh */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 821B1ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1ECCh case    0:*/		return 0x821B1ED0;
		  /* 821B1ED0h */ case    1:  		/* fmr FR1, FR30 */
		/* 821B1ED0h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B1ED0h case    1:*/		return 0x821B1ED4;
		  /* 821B1ED4h */ case    2:  		/* bl -311588 */
		/* 821B1ED4h case    2:*/		regs.LR = 0x821B1ED8; return 0x82165DB0;
		/* 821B1ED4h case    2:*/		return 0x821B1ED8;
		  /* 821B1ED8h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1ED8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1ED8h case    3:*/		return 0x821B1EDC;
		  /* 821B1EDCh */ case    4:  		/* bc 12, CR0_EQ, 980 */
		/* 821B1EDCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1EDCh case    4:*/		return 0x821B1EE0;
		  /* 821B1EE0h */ case    5:  		/* li R4, 1 */
		/* 821B1EE0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B1EE0h case    5:*/		return 0x821B1EE4;
		  /* 821B1EE4h */ case    6:  		/* lwz R29, <#[R31 + 44]> */
		/* 821B1EE4h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B1EE4h case    6:*/		return 0x821B1EE8;
		  /* 821B1EE8h */ case    7:  		/* mr R3, R14 */
		/* 821B1EE8h case    7:*/		regs.R3 = regs.R14;
		/* 821B1EE8h case    7:*/		return 0x821B1EEC;
		  /* 821B1EECh */ case    8:  		/* fmr FR4, FR31 */
		/* 821B1EECh case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821B1EECh case    8:*/		return 0x821B1EF0;
		  /* 821B1EF0h */ case    9:  		/* fmr FR3, FR31 */
		/* 821B1EF0h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821B1EF0h case    9:*/		return 0x821B1EF4;
		  /* 821B1EF4h */ case   10:  		/* fmr FR2, FR31 */
		/* 821B1EF4h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821B1EF4h case   10:*/		return 0x821B1EF8;
		  /* 821B1EF8h */ case   11:  		/* fmr FR1, FR29 */
		/* 821B1EF8h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821B1EF8h case   11:*/		return 0x821B1EFC;
		  /* 821B1EFCh */ case   12:  		/* bl 494684 */
		/* 821B1EFCh case   12:*/		regs.LR = 0x821B1F00; return 0x8222AB58;
		/* 821B1EFCh case   12:*/		return 0x821B1F00;
		  /* 821B1F00h */ case   13:  		/* mr R30, R3 */
		/* 821B1F00h case   13:*/		regs.R30 = regs.R3;
		/* 821B1F00h case   13:*/		return 0x821B1F04;
		  /* 821B1F04h */ case   14:  		/* lwz R11, <#[R29]> */
		/* 821B1F04h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B1F04h case   14:*/		return 0x821B1F08;
		  /* 821B1F08h */ case   15:  		/* mr R3, R14 */
		/* 821B1F08h case   15:*/		regs.R3 = regs.R14;
		/* 821B1F08h case   15:*/		return 0x821B1F0C;
		  /* 821B1F0Ch */ case   16:  		/* lwz R28, <#[R31 + 48]> */
		/* 821B1F0Ch case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1F0Ch case   16:*/		return 0x821B1F10;
		  /* 821B1F10h */ case   17:  		/* mr R4, R30 */
		/* 821B1F10h case   17:*/		regs.R4 = regs.R30;
		/* 821B1F10h case   17:*/		return 0x821B1F14;
		  /* 821B1F14h */ case   18:  		/* rlwinm R27, R11, 7, 29, 31 */
		/* 821B1F14h case   18:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R27,regs.R11);
		/* 821B1F14h case   18:*/		return 0x821B1F18;
		  /* 821B1F18h */ case   19:  		/* bl -237336 */
		/* 821B1F18h case   19:*/		regs.LR = 0x821B1F1C; return 0x82178000;
		/* 821B1F18h case   19:*/		return 0x821B1F1C;
		  /* 821B1F1Ch */ case   20:  		/* lwz R11, <#[R3]> */
		/* 821B1F1Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1F1Ch case   20:*/		return 0x821B1F20;
	}
	return 0x821B1F20;
} // Block from 821B1ECCh-821B1F20h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B1F20h
// Function '?VectorizeInstr@Compiler@D3DXShader@@AAA_NPAVBlock@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1F20);
		  /* 821B1F20h */ case    0:  		/* li R4, 0 */
		/* 821B1F20h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B1F20h case    0:*/		return 0x821B1F24;
		  /* 821B1F24h */ case    1:  		/* rlwimi R11, R27, 25, 4, 6 */
		/* 821B1F24h case    1:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R27);
		/* 821B1F24h case    1:*/		return 0x821B1F28;
		  /* 821B1F28h */ case    2:  		/* mr R26, R3 */
		/* 821B1F28h case    2:*/		regs.R26 = regs.R3;
		/* 821B1F28h case    2:*/		return 0x821B1F2C;
		  /* 821B1F2Ch */ case    3:  		/* stw R11, <#[R3]> */
		/* 821B1F2Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B1F2Ch case    3:*/		return 0x821B1F30;
		  /* 821B1F30h */ case    4:  		/* bl -238704 */
		/* 821B1F30h case    4:*/		regs.LR = 0x821B1F34; return 0x82177AC0;
		/* 821B1F30h case    4:*/		return 0x821B1F34;
		  /* 821B1F34h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 821B1F34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1F34h case    5:*/		return 0x821B1F38;
		  /* 821B1F38h */ case    6:  		/* mr R8, R28 */
		/* 821B1F38h case    6:*/		regs.R8 = regs.R28;
		/* 821B1F38h case    6:*/		return 0x821B1F3C;
		  /* 821B1F3Ch */ case    7:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821B1F3Ch case    7:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821B1F3Ch case    7:*/		return 0x821B1F40;
		  /* 821B1F40h */ case    8:  		/* mr R7, R26 */
		/* 821B1F40h case    8:*/		regs.R7 = regs.R26;
		/* 821B1F40h case    8:*/		return 0x821B1F44;
		  /* 821B1F44h */ case    9:  		/* stw R11, <#[R26]> */
		/* 821B1F44h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B1F44h case    9:*/		return 0x821B1F48;
		  /* 821B1F48h */ case   10:  		/* b -788 */
		/* 821B1F48h case   10:*/		return 0x821B1C34;
		/* 821B1F48h case   10:*/		return 0x821B1F4C;
	}
	return 0x821B1F4C;
} // Block from 821B1F20h-821B1F4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B1F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B1F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B1F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B1F4C);
		  /* 821B1F4Ch */ case    0:  		/* lwz R24, <#[R31 + 44]> */
		/* 821B1F4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x0000002C) );
		/* 821B1F4Ch case    0:*/		return 0x821B1F50;
		  /* 821B1F50h */ case    1:  		/* lwz R11, <#[R24]> */
		/* 821B1F50h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B1F50h case    1:*/		return 0x821B1F54;
		  /* 821B1F54h */ case    2:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821B1F54h case    2:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821B1F54h case    2:*/		return 0x821B1F58;
		  /* 821B1F58h */ case    3:  		/* bc 4, CR0_EQ, 856 */
		/* 821B1F58h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1F58h case    3:*/		return 0x821B1F5C;
		  /* 821B1F5Ch */ case    4:  		/* mr R3, R24 */
		/* 821B1F5Ch case    4:*/		regs.R3 = regs.R24;
		/* 821B1F5Ch case    4:*/		return 0x821B1F60;
		  /* 821B1F60h */ case    5:  		/* lwz R4, <#[R31 + 48]> */
		/* 821B1F60h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821B1F60h case    5:*/		return 0x821B1F64;
		  /* 821B1F64h */ case    6:  		/* bl -318684 */
		/* 821B1F64h case    6:*/		regs.LR = 0x821B1F68; return 0x82164288;
		/* 821B1F64h case    6:*/		return 0x821B1F68;
		  /* 821B1F68h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1F68h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1F68h case    7:*/		return 0x821B1F6C;
		  /* 821B1F6Ch */ case    8:  		/* bc 12, CR0_EQ, 836 */
		/* 821B1F6Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1F6Ch case    8:*/		return 0x821B1F70;
		  /* 821B1F70h */ case    9:  		/* lwz R29, <#[R24 + 12]> */
		/* 821B1F70h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + 0x0000000C) );
		/* 821B1F70h case    9:*/		return 0x821B1F74;
		  /* 821B1F74h */ case   10:  		/* mr R3, R29 */
		/* 821B1F74h case   10:*/		regs.R3 = regs.R29;
		/* 821B1F74h case   10:*/		return 0x821B1F78;
		  /* 821B1F78h */ case   11:  		/* bl -266696 */
		/* 821B1F78h case   11:*/		regs.LR = 0x821B1F7C; return 0x82170DB0;
		/* 821B1F78h case   11:*/		return 0x821B1F7C;
		  /* 821B1F7Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1F7Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1F7Ch case   12:*/		return 0x821B1F80;
		  /* 821B1F80h */ case   13:  		/* bc 12, CR0_EQ, 816 */
		/* 821B1F80h case   13:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1F80h case   13:*/		return 0x821B1F84;
		  /* 821B1F84h */ case   14:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B1F84h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B1F84h case   14:*/		return 0x821B1F88;
		  /* 821B1F88h */ case   15:  		/* rlwinm R10, R30, 9, 23, 31 */
		/* 821B1F88h case   15:*/		cpu::op::rlwinm<0,9,23,31>(regs,&regs.R10,regs.R30);
		/* 821B1F88h case   15:*/		return 0x821B1F8C;
		  /* 821B1F8Ch */ case   16:  		/* rlwinm R11, R11, 9, 23, 31 */
		/* 821B1F8Ch case   16:*/		cpu::op::rlwinm<0,9,23,31>(regs,&regs.R11,regs.R11);
		/* 821B1F8Ch case   16:*/		return 0x821B1F90;
		  /* 821B1F90h */ case   17:  		/* xor R11, R10, R11 */
		/* 821B1F90h case   17:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B1F90h case   17:*/		return 0x821B1F94;
		  /* 821B1F94h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B1F94h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B1F94h case   18:*/		return 0x821B1F98;
		  /* 821B1F98h */ case   19:  		/* bc 4, CR0_EQ, 792 */
		/* 821B1F98h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1F98h case   19:*/		return 0x821B1F9C;
		  /* 821B1F9Ch */ case   20:  		/* li R4, 809 */
		/* 821B1F9Ch case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x329);
		/* 821B1F9Ch case   20:*/		return 0x821B1FA0;
		  /* 821B1FA0h */ case   21:  		/* mr R3, R14 */
		/* 821B1FA0h case   21:*/		regs.R3 = regs.R14;
		/* 821B1FA0h case   21:*/		return 0x821B1FA4;
		  /* 821B1FA4h */ case   22:  		/* bl -93772 */
		/* 821B1FA4h case   22:*/		regs.LR = 0x821B1FA8; return 0x8219B158;
		/* 821B1FA4h case   22:*/		return 0x821B1FA8;
		  /* 821B1FA8h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B1FA8h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B1FA8h case   23:*/		return 0x821B1FAC;
		  /* 821B1FACh */ case   24:  		/* bc 12, CR0_EQ, 772 */
		/* 821B1FACh case   24:*/		if ( regs.CR[0].eq ) { return 0x821B22B0;  }
		/* 821B1FACh case   24:*/		return 0x821B1FB0;
		  /* 821B1FB0h */ case   25:  		/* mr R4, R29 */
		/* 821B1FB0h case   25:*/		regs.R4 = regs.R29;
		/* 821B1FB0h case   25:*/		return 0x821B1FB4;
		  /* 821B1FB4h */ case   26:  		/* mr R3, R14 */
		/* 821B1FB4h case   26:*/		regs.R3 = regs.R14;
		/* 821B1FB4h case   26:*/		return 0x821B1FB8;
		  /* 821B1FB8h */ case   27:  		/* bl 469992 */
		/* 821B1FB8h case   27:*/		regs.LR = 0x821B1FBC; return 0x82224BA0;
		/* 821B1FB8h case   27:*/		return 0x821B1FBC;
		  /* 821B1FBCh */ case   28:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B1FBCh case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B1FBCh case   28:*/		return 0x821B1FC0;
		  /* 821B1FC0h */ case   29:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821B1FC0h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821B1FC0h case   29:*/		return 0x821B1FC4;
		  /* 821B1FC4h */ case   30:  		/* addi R11, R11, 36 */
		/* 821B1FC4h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821B1FC4h case   30:*/		return 0x821B1FC8;
		  /* 821B1FC8h */ case   31:  		/* addi R30, R10, 36 */
		/* 821B1FC8h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x24);
		/* 821B1FC8h case   31:*/		return 0x821B1FCC;
		  /* 821B1FCCh */ case   32:  		/* addi R9, R11, -36 */
		/* 821B1FCCh case   32:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821B1FCCh case   32:*/		return 0x821B1FD0;
		  /* 821B1FD0h */ case   33:  		/* addi R7, R30, -36 */
		/* 821B1FD0h case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R30,0xFFFFFFDC);
		/* 821B1FD0h case   33:*/		return 0x821B1FD4;
		  /* 821B1FD4h */ case   34:  		/* addi R10, R30, 4 */
		/* 821B1FD4h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821B1FD4h case   34:*/		return 0x821B1FD8;
		  /* 821B1FD8h */ case   35:  		/* lwz R8, <#[R11]> */
		/* 821B1FD8h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1FD8h case   35:*/		return 0x821B1FDC;
		  /* 821B1FDCh */ case   36:  		/* mr R27, R3 */
		/* 821B1FDCh case   36:*/		regs.R27 = regs.R3;
		/* 821B1FDCh case   36:*/		return 0x821B1FE0;
		  /* 821B1FE0h */ case   37:  		/* mr R26, R20 */
		/* 821B1FE0h case   37:*/		regs.R26 = regs.R20;
		/* 821B1FE0h case   37:*/		return 0x821B1FE4;
		  /* 821B1FE4h */ case   38:  		/* addi R28, R3, 44 */
		/* 821B1FE4h case   38:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x2C);
		/* 821B1FE4h case   38:*/		return 0x821B1FE8;
		  /* 821B1FE8h */ case   39:  		/* subf R25, R3, R29 */
		/* 821B1FE8h case   39:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R3,regs.R29);
		/* 821B1FE8h case   39:*/		return 0x821B1FEC;
		  /* 821B1FECh */ case   40:  		/* stw R8, <#[R30]> */
		/* 821B1FECh case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 821B1FECh case   40:*/		return 0x821B1FF0;
		  /* 821B1FF0h */ case   41:  		/* lwz R8, <#[R11]> */
		/* 821B1FF0h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821B1FF0h case   41:*/		return 0x821B1FF4;
		  /* 821B1FF4h */ case   42:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821B1FF4h case   42:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821B1FF4h case   42:*/		return 0x821B1FF8;
		  /* 821B1FF8h */ case   43:  		/* stw R7, <#[R8]> */
		/* 821B1FF8h case   43:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 821B1FF8h case   43:*/		return 0x821B1FFC;
		  /* 821B1FFCh */ case   44:  		/* stw R9, <#[R30 + 4]> */
		/* 821B1FFCh case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 821B1FFCh case   44:*/		return 0x821B2000;
		  /* 821B2000h */ case   45:  		/* stw R10, <#[R11]> */
		/* 821B2000h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2000h case   45:*/		return 0x821B2004;
		  /* 821B2004h */ case   46:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B2004h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B2004h case   46:*/		return 0x821B2008;
		  /* 821B2008h */ case   47:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B2008h case   47:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B2008h case   47:*/		return 0x821B200C;
		  /* 821B200Ch */ case   48:  		/* cmplw CR6, R26, R11 */
		/* 821B200Ch case   48:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821B200Ch case   48:*/		return 0x821B2010;
		  /* 821B2010h */ case   49:  		/* bc 4, CR6_LT, 160 */
		/* 821B2010h case   49:*/		if ( !regs.CR[6].lt ) { return 0x821B20B0;  }
		/* 821B2010h case   49:*/		return 0x821B2014;
		  /* 821B2014h */ case   50:  		/* mr R3, R27 */
		/* 821B2014h case   50:*/		regs.R3 = regs.R27;
		/* 821B2014h case   50:*/		return 0x821B2018;
		  /* 821B2018h */ case   51:  		/* lwzx R4, <#[R25 + R28]> */
		/* 821B2018h case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + regs.R28 + 0x00000000) );
		/* 821B2018h case   51:*/		return 0x821B201C;
		  /* 821B201Ch */ case   52:  		/* bl -237140 */
		/* 821B201Ch case   52:*/		regs.LR = 0x821B2020; return 0x821781C8;
		/* 821B201Ch case   52:*/		return 0x821B2020;
		  /* 821B2020h */ case   53:  		/* stw R3, <#[R28]> */
		/* 821B2020h case   53:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 821B2020h case   53:*/		return 0x821B2024;
		  /* 821B2024h */ case   54:  		/* lwz R11, <#[R3]> */
		/* 821B2024h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2024h case   54:*/		return 0x821B2028;
		  /* 821B2028h */ case   55:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B2028h case   55:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B2028h case   55:*/		return 0x821B202C;
		  /* 821B202Ch */ case   56:  		/* bc 12, CR0_EQ, 120 */
		/* 821B202Ch case   56:*/		if ( regs.CR[0].eq ) { return 0x821B20A4;  }
		/* 821B202Ch case   56:*/		return 0x821B2030;
		  /* 821B2030h */ case   57:  		/* lwz R11, <#[R3 + 12]> */
		/* 821B2030h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B2030h case   57:*/		return 0x821B2034;
		  /* 821B2034h */ case   58:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2034h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2034h case   58:*/		return 0x821B2038;
		  /* 821B2038h */ case   59:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B2038h case   59:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B2038h case   59:*/		return 0x821B203C;
		  /* 821B203Ch */ case   60:  		/* cmplwi CR6, R11, 15360 */
		/* 821B203Ch case   60:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003C00);
		/* 821B203Ch case   60:*/		return 0x821B2040;
		  /* 821B2040h */ case   61:  		/* bc 12, CR6_EQ, 100 */
		/* 821B2040h case   61:*/		if ( regs.CR[6].eq ) { return 0x821B20A4;  }
		/* 821B2040h case   61:*/		return 0x821B2044;
		  /* 821B2044h */ case   62:  		/* lwz R11, <#[R24]> */
		/* 821B2044h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B2044h case   62:*/		return 0x821B2048;
		  /* 821B2048h */ case   63:  		/* lwz R10, <#[R3]> */
		/* 821B2048h case   63:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2048h case   63:*/		return 0x821B204C;
		  /* 821B204Ch */ case   64:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821B204Ch case   64:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821B204Ch case   64:*/		return 0x821B2050;
		  /* 821B2050h */ case   65:  		/* mr R9, R10 */
		/* 821B2050h case   65:*/		regs.R9 = regs.R10;
		/* 821B2050h case   65:*/		return 0x821B2054;
		  /* 821B2054h */ case   66:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821B2054h case   66:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821B2054h case   66:*/		return 0x821B2058;
		  /* 821B2058h */ case   67:  		/* rlwinm R8, R11, 27, 29, 30 */
		/* 821B2058h case   67:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R8,regs.R11);
		/* 821B2058h case   67:*/		return 0x821B205C;
		  /* 821B205Ch */ case   68:  		/* rlwinm R7, R11, 29, 29, 30 */
		/* 821B205Ch case   68:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R7,regs.R11);
		/* 821B205Ch case   68:*/		return 0x821B2060;
		  /* 821B2060h */ case   69:  		/* srw R8, R10, R8 */
		/* 821B2060h case   69:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821B2060h case   69:*/		return 0x821B2064;
		  /* 821B2064h */ case   70:  		/* srw R7, R10, R7 */
		/* 821B2064h case   70:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 821B2064h case   70:*/		return 0x821B2068;
		  /* 821B2068h */ case   71:  		/* rlwimi R7, R8, 2, 28, 29 */
		/* 821B2068h case   71:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 821B2068h case   71:*/		return 0x821B206C;
		  /* 821B206Ch */ case   72:  		/* rlwinm R8, R11, 31, 29, 30 */
		/* 821B206Ch case   72:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R8,regs.R11);
		/* 821B206Ch case   72:*/		return 0x821B2070;
		  /* 821B2070h */ case   73:  		/* rlwinm R11, R11, 1, 29, 30 */
		/* 821B2070h case   73:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R11,regs.R11);
		/* 821B2070h case   73:*/		return 0x821B2074;
		  /* 821B2074h */ case   74:  		/* srw R8, R10, R8 */
		/* 821B2074h case   74:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821B2074h case   74:*/		return 0x821B2078;
		  /* 821B2078h */ case   75:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821B2078h case   75:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821B2078h case   75:*/		return 0x821B207C;
		  /* 821B207Ch */ case   76:  		/* srw R11, R10, R11 */
		/* 821B207Ch case   76:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B207Ch case   76:*/		return 0x821B2080;
		  /* 821B2080h */ case   77:  		/* rlwimi R8, R7, 2, 0, 29 */
		/* 821B2080h case   77:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821B2080h case   77:*/		return 0x821B2084;
		  /* 821B2084h */ case   78:  		/* rlwinm R10, R9, 0, 27, 18 */
		/* 821B2084h case   78:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R9);
		/* 821B2084h case   78:*/		return 0x821B2088;
		  /* 821B2088h */ case   79:  		/* rlwimi R11, R8, 2, 0, 29 */
		/* 821B2088h case   79:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 821B2088h case   79:*/		return 0x821B208C;
		  /* 821B208Ch */ case   80:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821B208Ch case   80:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821B208Ch case   80:*/		return 0x821B2090;
		  /* 821B2090h */ case   81:  		/* or R11, R11, R10 */
		/* 821B2090h case   81:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B2090h case   81:*/		return 0x821B2094;
		  /* 821B2094h */ case   82:  		/* stw R11, <#[R3]> */
		/* 821B2094h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2094h case   82:*/		return 0x821B2098;
		  /* 821B2098h */ case   83:  		/* lwz R10, <#[R24]> */
		/* 821B2098h case   83:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821B2098h case   83:*/		return 0x821B209C;
		  /* 821B209Ch */ case   84:  		/* rlwimi R10, R11, 0, 7, 3 */
		/* 821B209Ch case   84:*/		cpu::op::rlwimi<0,0,7,3>(regs,&regs.R10,regs.R11);
		/* 821B209Ch case   84:*/		return 0x821B20A0;
		  /* 821B20A0h */ case   85:  		/* stw R10, <#[R3]> */
		/* 821B20A0h case   85:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B20A0h case   85:*/		return 0x821B20A4;
	}
	return 0x821B20A4;
} // Block from 821B1F4Ch-821B20A4h (86 instructions)

//////////////////////////////////////////////////////
// Block at 821B20A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B20A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B20A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B20A4);
		  /* 821B20A4h */ case    0:  		/* addi R26, R26, 1 */
		/* 821B20A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821B20A4h case    0:*/		return 0x821B20A8;
		  /* 821B20A8h */ case    1:  		/* addi R28, R28, 4 */
		/* 821B20A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821B20A8h case    1:*/		return 0x821B20AC;
		  /* 821B20ACh */ case    2:  		/* b -168 */
		/* 821B20ACh case    2:*/		return 0x821B2004;
		/* 821B20ACh case    2:*/		return 0x821B20B0;
	}
	return 0x821B20B0;
} // Block from 821B20A4h-821B20B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B20B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B20B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B20B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B20B0);
		  /* 821B20B0h */ case    0:  		/* lwz R29, <#[R29]> */
		/* 821B20B0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000000) );
		/* 821B20B0h case    0:*/		return 0x821B20B4;
		  /* 821B20B4h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821B20B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B20B4h case    1:*/		return 0x821B20B8;
		  /* 821B20B8h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821B20B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B20DC;  }
		/* 821B20B8h case    2:*/		return 0x821B20BC;
		  /* 821B20BCh */ case    3:  		/* lwz R11, <#[R29]> */
		/* 821B20BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B20BCh case    3:*/		return 0x821B20C0;
		  /* 821B20C0h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B20C0h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B20C0h case    4:*/		return 0x821B20C4;
		  /* 821B20C4h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 821B20C4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B20D4;  }
		/* 821B20C4h case    5:*/		return 0x821B20C8;
	}
	return 0x821B20C8;
} // Block from 821B20B0h-821B20C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B20C8h
// Function '?Vectorize@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B20C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B20C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B20C8);
		  /* 821B20C8h */ case    0:  		/* mr R4, R29 */
		/* 821B20C8h case    0:*/		regs.R4 = regs.R29;
		/* 821B20C8h case    0:*/		return 0x821B20CC;
		  /* 821B20CCh */ case    1:  		/* mr R3, R27 */
		/* 821B20CCh case    1:*/		regs.R3 = regs.R27;
		/* 821B20CCh case    1:*/		return 0x821B20D0;
		  /* 821B20D0h */ case    2:  		/* bl -237320 */
		/* 821B20D0h case    2:*/		regs.LR = 0x821B20D4; return 0x821781C8;
		/* 821B20D0h case    2:*/		return 0x821B20D4;
	}
	return 0x821B20D4;
} // Block from 821B20C8h-821B20D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B20D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B20D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B20D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B20D4);
		  /* 821B20D4h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821B20D4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821B20D4h case    0:*/		return 0x821B20D8;
		  /* 821B20D8h */ case    1:  		/* b -36 */
		/* 821B20D8h case    1:*/		return 0x821B20B4;
		/* 821B20D8h case    1:*/		return 0x821B20DC;
	}
	return 0x821B20DC;
} // Block from 821B20D4h-821B20DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B20DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B20DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B20DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B20DC);
		  /* 821B20DCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B20DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B20DCh case    0:*/		return 0x821B20E0;
		  /* 821B20E0h */ case    1:  		/* lwz R10, <#[R27 + 8]> */
		/* 821B20E0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821B20E0h case    1:*/		return 0x821B20E4;
		  /* 821B20E4h */ case    2:  		/* lwz R9, <#[R27 + 16]> */
		/* 821B20E4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 821B20E4h case    2:*/		return 0x821B20E8;
		  /* 821B20E8h */ case    3:  		/* rlwimi R10, R11, 0, 15, 17 */
		/* 821B20E8h case    3:*/		cpu::op::rlwimi<0,0,15,17>(regs,&regs.R10,regs.R11);
		/* 821B20E8h case    3:*/		return 0x821B20EC;
		  /* 821B20ECh */ case    4:  		/* rlwinm R11, R9, 0, 16, 12 */
		/* 821B20ECh case    4:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R9);
		/* 821B20ECh case    4:*/		return 0x821B20F0;
		  /* 821B20F0h */ case    5:  		/* stw R10, <#[R27 + 8]> */
		/* 821B20F0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821B20F0h case    5:*/		return 0x821B20F4;
		  /* 821B20F4h */ case    6:  		/* lwz R9, <#[R31 + 8]> */
		/* 821B20F4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821B20F4h case    6:*/		return 0x821B20F8;
		  /* 821B20F8h */ case    7:  		/* rlwimi R10, R9, 0, 27, 30 */
		/* 821B20F8h case    7:*/		cpu::op::rlwimi<0,0,27,30>(regs,&regs.R10,regs.R9);
		/* 821B20F8h case    7:*/		return 0x821B20FC;
		  /* 821B20FCh */ case    8:  		/* mr R9, R10 */
		/* 821B20FCh case    8:*/		regs.R9 = regs.R10;
		/* 821B20FCh case    8:*/		return 0x821B2100;
		  /* 821B2100h */ case    9:  		/* stw R10, <#[R27 + 8]> */
		/* 821B2100h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821B2100h case    9:*/		return 0x821B2104;
		  /* 821B2104h */ case   10:  		/* lwz R10, <#[R31 + 8]> */
		/* 821B2104h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821B2104h case   10:*/		return 0x821B2108;
		  /* 821B2108h */ case   11:  		/* rlwimi R9, R10, 0, 31, 31 */
		/* 821B2108h case   11:*/		cpu::op::rlwimi<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B2108h case   11:*/		return 0x821B210C;
		  /* 821B210Ch */ case   12:  		/* stw R11, <#[R27 + 16]> */
		/* 821B210Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821B210Ch case   12:*/		return 0x821B2110;
		  /* 821B2110h */ case   13:  		/* rlwinm R11, R9, 0, 9, 7 */
		/* 821B2110h case   13:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R11,regs.R9);
		/* 821B2110h case   13:*/		return 0x821B2114;
		  /* 821B2114h */ case   14:  		/* stw R11, <#[R27 + 8]> */
		/* 821B2114h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821B2114h case   14:*/		return 0x821B2118;
		  /* 821B2118h */ case   15:  		/* lwz R11, <#[R31 + 16]> */
		/* 821B2118h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821B2118h case   15:*/		return 0x821B211C;
		  /* 821B211Ch */ case   16:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821B211Ch case   16:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821B211Ch case   16:*/		return 0x821B2120;
		  /* 821B2120h */ case   17:  		/* bc 12, CR0_EQ, 376 */
		/* 821B2120h case   17:*/		if ( regs.CR[0].eq ) { return 0x821B2298;  }
		/* 821B2120h case   17:*/		return 0x821B2124;
		  /* 821B2124h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 821B2124h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B2124h case   18:*/		return 0x821B2128;
		  /* 821B2128h */ case   19:  		/* b 348 */
		/* 821B2128h case   19:*/		return 0x821B2284;
		/* 821B2128h case   19:*/		return 0x821B212C;
		  /* 821B212Ch */ case   20:  		/* lwz R11, <#[R25 + 8]> */
		/* 821B212Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821B212Ch case   20:*/		return 0x821B2130;
		  /* 821B2130h */ case   21:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B2130h case   21:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B2130h case   21:*/		return 0x821B2134;
		  /* 821B2134h */ case   22:  		/* cmplwi CR6, R11, 1 */
		/* 821B2134h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B2134h case   22:*/		return 0x821B2138;
		  /* 821B2138h */ case   23:  		/* bc 12, CR6_LT, 16 */
		/* 821B2138h case   23:*/		if ( regs.CR[6].lt ) { return 0x821B2148;  }
		/* 821B2138h case   23:*/		return 0x821B213C;
		  /* 821B213Ch */ case   24:  		/* cmplwi CR6, R11, 102 */
		/* 821B213Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821B213Ch case   24:*/		return 0x821B2140;
		  /* 821B2140h */ case   25:  		/* li R11, 1 */
		/* 821B2140h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B2140h case   25:*/		return 0x821B2144;
		  /* 821B2144h */ case   26:  		/* bc 4, CR6_GT, 8 */
		/* 821B2144h case   26:*/		if ( !regs.CR[6].gt ) { return 0x821B214C;  }
		/* 821B2144h case   26:*/		return 0x821B2148;
	}
	return 0x821B2148;
} // Block from 821B20DCh-821B2148h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B2148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2148);
		  /* 821B2148h */ case    0:  		/* mr R11, R20 */
		/* 821B2148h case    0:*/		regs.R11 = regs.R20;
		/* 821B2148h case    0:*/		return 0x821B214C;
	}
	return 0x821B214C;
} // Block from 821B2148h-821B214Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B214Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B214C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B214C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B214C);
		  /* 821B214Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B214Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B214Ch case    0:*/		return 0x821B2150;
		  /* 821B2150h */ case    1:  		/* bc 12, CR0_EQ, 300 */
		/* 821B2150h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B227C;  }
		/* 821B2150h case    1:*/		return 0x821B2154;
		  /* 821B2154h */ case    2:  		/* lwz R11, <#[R27]> */
		/* 821B2154h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B2154h case    2:*/		return 0x821B2158;
		  /* 821B2158h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B2158h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2158h case    3:*/		return 0x821B215C;
		  /* 821B215Ch */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821B215Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821B217C;  }
		/* 821B215Ch case    4:*/		return 0x821B2160;
		  /* 821B2160h */ case    5:  		/* lwz R10, <#[R11 + 12]> */
		/* 821B2160h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B2160h case    5:*/		return 0x821B2164;
		  /* 821B2164h */ case    6:  		/* cmplw CR6, R10, R25 */
		/* 821B2164h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 821B2164h case    6:*/		return 0x821B2168;
		  /* 821B2168h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821B2168h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B2174;  }
		/* 821B2168h case    7:*/		return 0x821B216C;
		  /* 821B216Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B216Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B216Ch case    8:*/		return 0x821B2170;
		  /* 821B2170h */ case    9:  		/* b -24 */
		/* 821B2170h case    9:*/		return 0x821B2158;
		/* 821B2170h case    9:*/		return 0x821B2174;
	}
	return 0x821B2174;
} // Block from 821B214Ch-821B2174h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B2174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2174);
		  /* 821B2174h */ case    0:  		/* li R11, 1 */
		/* 821B2174h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B2174h case    0:*/		return 0x821B2178;
		  /* 821B2178h */ case    1:  		/* b 8 */
		/* 821B2178h case    1:*/		return 0x821B2180;
		/* 821B2178h case    1:*/		return 0x821B217C;
	}
	return 0x821B217C;
} // Block from 821B2174h-821B217Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B217Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B217C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B217C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B217C);
		  /* 821B217Ch */ case    0:  		/* mr R11, R20 */
		/* 821B217Ch case    0:*/		regs.R11 = regs.R20;
		/* 821B217Ch case    0:*/		return 0x821B2180;
	}
	return 0x821B2180;
} // Block from 821B217Ch-821B2180h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B2180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2180);
		  /* 821B2180h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B2180h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B2180h case    0:*/		return 0x821B2184;
		  /* 821B2184h */ case    1:  		/* bc 4, CR0_EQ, 248 */
		/* 821B2184h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B227C;  }
		/* 821B2184h case    1:*/		return 0x821B2188;
		  /* 821B2188h */ case    2:  		/* lwz R26, <#[R25]> */
		/* 821B2188h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 821B2188h case    2:*/		return 0x821B218C;
		  /* 821B218Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 821B218Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821B218Ch case    3:*/		return 0x821B2190;
		  /* 821B2190h */ case    4:  		/* bc 12, CR6_EQ, 236 */
		/* 821B2190h case    4:*/		if ( regs.CR[6].eq ) { return 0x821B227C;  }
		/* 821B2190h case    4:*/		return 0x821B2194;
		  /* 821B2194h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 821B2194h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B2194h case    5:*/		return 0x821B2198;
		  /* 821B2198h */ case    6:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B2198h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B2198h case    6:*/		return 0x821B219C;
		  /* 821B219Ch */ case    7:  		/* bc 12, CR0_EQ, 108 */
		/* 821B219Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821B2208;  }
		/* 821B219Ch case    7:*/		return 0x821B21A0;
		  /* 821B21A0h */ case    8:  		/* lwz R4, <#[R26 + 12]> */
		/* 821B21A0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000000C) );
		/* 821B21A0h case    8:*/		return 0x821B21A4;
		  /* 821B21A4h */ case    9:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B21A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B21A4h case    9:*/		return 0x821B21A8;
		  /* 821B21A8h */ case   10:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821B21A8h case   10:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821B21A8h case   10:*/		return 0x821B21AC;
		  /* 821B21ACh */ case   11:  		/* bc 12, CR0_EQ, 92 */
		/* 821B21ACh case   11:*/		if ( regs.CR[0].eq ) { return 0x821B2208;  }
		/* 821B21ACh case   11:*/		return 0x821B21B0;
		  /* 821B21B0h */ case   12:  		/* mr R3, R14 */
		/* 821B21B0h case   12:*/		regs.R3 = regs.R14;
		/* 821B21B0h case   12:*/		return 0x821B21B4;
		  /* 821B21B4h */ case   13:  		/* bl -190612 */
		/* 821B21B4h case   13:*/		regs.LR = 0x821B21B8; return 0x82183920;
		/* 821B21B4h case   13:*/		return 0x821B21B8;
		  /* 821B21B8h */ case   14:  		/* mr R30, R3 */
		/* 821B21B8h case   14:*/		regs.R30 = regs.R3;
		/* 821B21B8h case   14:*/		return 0x821B21BC;
		  /* 821B21BCh */ case   15:  		/* mr R4, R31 */
		/* 821B21BCh case   15:*/		regs.R4 = regs.R31;
		/* 821B21BCh case   15:*/		return 0x821B21C0;
		  /* 821B21C0h */ case   16:  		/* mr R3, R14 */
		/* 821B21C0h case   16:*/		regs.R3 = regs.R14;
		/* 821B21C0h case   16:*/		return 0x821B21C4;
		  /* 821B21C4h */ case   17:  		/* bl -190628 */
		/* 821B21C4h case   17:*/		regs.LR = 0x821B21C8; return 0x82183920;
		/* 821B21C4h case   17:*/		return 0x821B21C8;
		  /* 821B21C8h */ case   18:  		/* mr R29, R3 */
		/* 821B21C8h case   18:*/		regs.R29 = regs.R3;
		/* 821B21C8h case   18:*/		return 0x821B21CC;
		  /* 821B21CCh */ case   19:  		/* mr R28, R20 */
		/* 821B21CCh case   19:*/		regs.R28 = regs.R20;
		/* 821B21CCh case   19:*/		return 0x821B21D0;
		  /* 821B21D0h */ case   20:  		/* cmplw CR6, R30, R3 */
		/* 821B21D0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821B21D0h case   20:*/		return 0x821B21D4;
		  /* 821B21D4h */ case   21:  		/* bc 12, CR6_EQ, 40 */
		/* 821B21D4h case   21:*/		if ( regs.CR[6].eq ) { return 0x821B21FC;  }
		/* 821B21D4h case   21:*/		return 0x821B21D8;
		  /* 821B21D8h */ case   22:  		/* mr R4, R30 */
		/* 821B21D8h case   22:*/		regs.R4 = regs.R30;
		/* 821B21D8h case   22:*/		return 0x821B21DC;
		  /* 821B21DCh */ case   23:  		/* mr R3, R14 */
		/* 821B21DCh case   23:*/		regs.R3 = regs.R14;
		/* 821B21DCh case   23:*/		return 0x821B21E0;
		  /* 821B21E0h */ case   24:  		/* bl -188936 */
		/* 821B21E0h case   24:*/		regs.LR = 0x821B21E4; return 0x82183FD8;
		/* 821B21E0h case   24:*/		return 0x821B21E4;
		  /* 821B21E4h */ case   25:  		/* mr R30, R3 */
		/* 821B21E4h case   25:*/		regs.R30 = regs.R3;
		/* 821B21E4h case   25:*/		return 0x821B21E8;
		  /* 821B21E8h */ case   26:  		/* mr R4, R29 */
		/* 821B21E8h case   26:*/		regs.R4 = regs.R29;
		/* 821B21E8h case   26:*/		return 0x821B21EC;
		  /* 821B21ECh */ case   27:  		/* mr R3, R14 */
		/* 821B21ECh case   27:*/		regs.R3 = regs.R14;
		/* 821B21ECh case   27:*/		return 0x821B21F0;
		  /* 821B21F0h */ case   28:  		/* bl -188952 */
		/* 821B21F0h case   28:*/		regs.LR = 0x821B21F4; return 0x82183FD8;
		/* 821B21F0h case   28:*/		return 0x821B21F4;
		  /* 821B21F4h */ case   29:  		/* cmplw CR6, R30, R3 */
		/* 821B21F4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821B21F4h case   29:*/		return 0x821B21F8;
		  /* 821B21F8h */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 821B21F8h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821B2200;  }
		/* 821B21F8h case   30:*/		return 0x821B21FC;
	}
	return 0x821B21FC;
} // Block from 821B2180h-821B21FCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821B21FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B21FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B21FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B21FC);
		  /* 821B21FCh */ case    0:  		/* li R28, 1 */
		/* 821B21FCh case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821B21FCh case    0:*/		return 0x821B2200;
	}
	return 0x821B2200;
} // Block from 821B21FCh-821B2200h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B2200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2200);
		  /* 821B2200h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821B2200h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821B2200h case    0:*/		return 0x821B2204;
		  /* 821B2204h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B2204h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B2210;  }
		/* 821B2204h case    1:*/		return 0x821B2208;
	}
	return 0x821B2208;
} // Block from 821B2200h-821B2208h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B2208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2208);
		  /* 821B2208h */ case    0:  		/* lwz R26, <#[R26 + 4]> */
		/* 821B2208h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000004) );
		/* 821B2208h case    0:*/		return 0x821B220C;
		  /* 821B220Ch */ case    1:  		/* b -128 */
		/* 821B220Ch case    1:*/		return 0x821B218C;
		/* 821B220Ch case    1:*/		return 0x821B2210;
	}
	return 0x821B2210;
} // Block from 821B2208h-821B2210h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B2210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2210);
		  /* 821B2210h */ case    0:  		/* lwz R11, <#[R25 + 16]> */
		/* 821B2210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 821B2210h case    0:*/		return 0x821B2214;
		  /* 821B2214h */ case    1:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821B2214h case    1:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821B2214h case    1:*/		return 0x821B2218;
		  /* 821B2218h */ case    2:  		/* bc 12, CR0_EQ, 84 */
		/* 821B2218h case    2:*/		if ( regs.CR[0].eq ) { return 0x821B226C;  }
		/* 821B2218h case    2:*/		return 0x821B221C;
		  /* 821B221Ch */ case    3:  		/* lwz R29, <#[R25 + 4]> */
		/* 821B221Ch case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x00000004) );
		/* 821B221Ch case    3:*/		return 0x821B2220;
		  /* 821B2220h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821B2220h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B2220h case    4:*/		return 0x821B2224;
		  /* 821B2224h */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 821B2224h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B227C;  }
		/* 821B2224h case    5:*/		return 0x821B2228;
		  /* 821B2228h */ case    6:  		/* lwz R30, <#[R29 + 16]> */
		/* 821B2228h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000010) );
		/* 821B2228h case    6:*/		return 0x821B222C;
		  /* 821B222Ch */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 821B222Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B222Ch case    7:*/		return 0x821B2230;
		  /* 821B2230h */ case    8:  		/* bc 12, CR6_EQ, 52 */
		/* 821B2230h case    8:*/		if ( regs.CR[6].eq ) { return 0x821B2264;  }
		/* 821B2230h case    8:*/		return 0x821B2234;
		  /* 821B2234h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821B2234h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B2234h case    9:*/		return 0x821B2238;
		  /* 821B2238h */ case   10:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B2238h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B2238h case   10:*/		return 0x821B223C;
		  /* 821B223Ch */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 821B223Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821B2264;  }
		/* 821B223Ch case   11:*/		return 0x821B2240;
		  /* 821B2240h */ case   12:  		/* mr R4, R30 */
		/* 821B2240h case   12:*/		regs.R4 = regs.R30;
		/* 821B2240h case   12:*/		return 0x821B2244;
		  /* 821B2244h */ case   13:  		/* mr R3, R27 */
		/* 821B2244h case   13:*/		regs.R3 = regs.R27;
		/* 821B2244h case   13:*/		return 0x821B2248;
		  /* 821B2248h */ case   14:  		/* bl 474744 */
		/* 821B2248h case   14:*/		regs.LR = 0x821B224C; return 0x822260C0;
		/* 821B2248h case   14:*/		return 0x821B224C;
		  /* 821B224Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B224Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B224Ch case   15:*/		return 0x821B2250;
		  /* 821B2250h */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 821B2250h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B2264;  }
		/* 821B2250h case   16:*/		return 0x821B2254;
		  /* 821B2254h */ case   17:  		/* mr R5, R14 */
		/* 821B2254h case   17:*/		regs.R5 = regs.R14;
		/* 821B2254h case   17:*/		return 0x821B2258;
		  /* 821B2258h */ case   18:  		/* mr R4, R30 */
		/* 821B2258h case   18:*/		regs.R4 = regs.R30;
		/* 821B2258h case   18:*/		return 0x821B225C;
		  /* 821B225Ch */ case   19:  		/* mr R3, R27 */
		/* 821B225Ch case   19:*/		regs.R3 = regs.R27;
		/* 821B225Ch case   19:*/		return 0x821B2260;
		  /* 821B2260h */ case   20:  		/* bl -237520 */
		/* 821B2260h case   20:*/		regs.LR = 0x821B2264; return 0x82178290;
		/* 821B2260h case   20:*/		return 0x821B2264;
	}
	return 0x821B2264;
} // Block from 821B2210h-821B2264h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B2264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2264);
		  /* 821B2264h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821B2264h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821B2264h case    0:*/		return 0x821B2268;
		  /* 821B2268h */ case    1:  		/* b -72 */
		/* 821B2268h case    1:*/		return 0x821B2220;
		/* 821B2268h case    1:*/		return 0x821B226C;
	}
	return 0x821B226C;
} // Block from 821B2264h-821B226Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B226Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B226C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B226C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B226C);
		  /* 821B226Ch */ case    0:  		/* mr R5, R14 */
		/* 821B226Ch case    0:*/		regs.R5 = regs.R14;
		/* 821B226Ch case    0:*/		return 0x821B2270;
		  /* 821B2270h */ case    1:  		/* mr R4, R25 */
		/* 821B2270h case    1:*/		regs.R4 = regs.R25;
		/* 821B2270h case    1:*/		return 0x821B2274;
		  /* 821B2274h */ case    2:  		/* mr R3, R27 */
		/* 821B2274h case    2:*/		regs.R3 = regs.R27;
		/* 821B2274h case    2:*/		return 0x821B2278;
		  /* 821B2278h */ case    3:  		/* bl -237544 */
		/* 821B2278h case    3:*/		regs.LR = 0x821B227C; return 0x82178290;
		/* 821B2278h case    3:*/		return 0x821B227C;
	}
	return 0x821B227C;
} // Block from 821B226Ch-821B227Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B227Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B227C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B227C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B227C);
		  /* 821B227Ch */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821B227Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821B227Ch case    0:*/		return 0x821B2280;
		  /* 821B2280h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B2280h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B2280h case    1:*/		return 0x821B2284;
	}
	return 0x821B2284;
} // Block from 821B227Ch-821B2284h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B2284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2284);
		  /* 821B2284h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2284h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2284h case    0:*/		return 0x821B2288;
		  /* 821B2288h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2288h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B2298;  }
		/* 821B2288h case    1:*/		return 0x821B228C;
		  /* 821B228Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B228Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B228Ch case    2:*/		return 0x821B2290;
		  /* 821B2290h */ case    3:  		/* addic. R25, R11, -40 */
		/* 821B2290h case    3:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R11,0xFFFFFFD8);
		/* 821B2290h case    3:*/		return 0x821B2294;
		  /* 821B2294h */ case    4:  		/* bc 4, CR0_EQ, -360 */
		/* 821B2294h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B212C;  }
		/* 821B2294h case    4:*/		return 0x821B2298;
	}
	return 0x821B2298;
} // Block from 821B2284h-821B2298h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B2298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2298);
		  /* 821B2298h */ case    0:  		/* mr R5, R27 */
		/* 821B2298h case    0:*/		regs.R5 = regs.R27;
		/* 821B2298h case    0:*/		return 0x821B229C;
	}
	return 0x821B229C;
} // Block from 821B2298h-821B229Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B229Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B229C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B229C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B229C);
		  /* 821B229Ch */ case    0:  		/* li R7, 0 */
		/* 821B229Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B229Ch case    0:*/		return 0x821B22A0;
		  /* 821B22A0h */ case    1:  		/* li R6, 228 */
		/* 821B22A0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821B22A0h case    1:*/		return 0x821B22A4;
		  /* 821B22A4h */ case    2:  		/* mr R4, R31 */
		/* 821B22A4h case    2:*/		regs.R4 = regs.R31;
		/* 821B22A4h case    2:*/		return 0x821B22A8;
		  /* 821B22A8h */ case    3:  		/* mr R3, R14 */
		/* 821B22A8h case    3:*/		regs.R3 = regs.R14;
		/* 821B22A8h case    3:*/		return 0x821B22AC;
		  /* 821B22ACh */ case    4:  		/* bl -55508 */
		/* 821B22ACh case    4:*/		regs.LR = 0x821B22B0; return 0x821A49D8;
		/* 821B22ACh case    4:*/		return 0x821B22B0;
	}
	return 0x821B22B0;
} // Block from 821B229Ch-821B22B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B22B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B22B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B22B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B22B0);
		  /* 821B22B0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821B22B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B22B0h case    0:*/		return 0x821B22B4;
		  /* 821B22B4h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 821B22B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B22F8;  }
		/* 821B22B4h case    1:*/		return 0x821B22B8;
		  /* 821B22B8h */ case    2:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821B22B8h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821B22B8h case    2:*/		return 0x821B22BC;
		  /* 821B22BCh */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B22BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B22BCh case    3:*/		return 0x821B22C0;
		  /* 821B22C0h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B22C0h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B22C0h case    4:*/		return 0x821B22C4;
		  /* 821B22C4h */ case    5:  		/* addic R10, R10, -1 */
		/* 821B22C4h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B22C4h case    5:*/		return 0x821B22C8;
		  /* 821B22C8h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821B22C8h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B22C8h case    6:*/		return 0x821B22CC;
		  /* 821B22CCh */ case    7:  		/* and R10, R10, R11 */
		/* 821B22CCh case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B22CCh case    7:*/		return 0x821B22D0;
		  /* 821B22D0h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821B22D0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B22D0h case    8:*/		return 0x821B22D4;
		  /* 821B22D4h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821B22D4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B22E8;  }
		/* 821B22D4h case    9:*/		return 0x821B22D8;
		  /* 821B22D8h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B22D8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B22D8h case   10:*/		return 0x821B22DC;
		  /* 821B22DCh */ case   11:  		/* mr R23, R31 */
		/* 821B22DCh case   11:*/		regs.R23 = regs.R31;
		/* 821B22DCh case   11:*/		return 0x821B22E0;
		  /* 821B22E0h */ case   12:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B22E0h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B22E0h case   12:*/		return 0x821B22E4;
		  /* 821B22E4h */ case   13:  		/* b 56 */
		/* 821B22E4h case   13:*/		return 0x821B231C;
		/* 821B22E4h case   13:*/		return 0x821B22E8;
	}
	return 0x821B22E8;
} // Block from 821B22B0h-821B22E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B22E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B22E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B22E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B22E8);
		  /* 821B22E8h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B22E8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B22E8h case    0:*/		return 0x821B22EC;
		  /* 821B22ECh */ case    1:  		/* bc 4, CR0_EQ, 64 */
		/* 821B22ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B232C;  }
		/* 821B22ECh case    1:*/		return 0x821B22F0;
		  /* 821B22F0h */ case    2:  		/* mr R31, R11 */
		/* 821B22F0h case    2:*/		regs.R31 = regs.R11;
		/* 821B22F0h case    2:*/		return 0x821B22F4;
		  /* 821B22F4h */ case    3:  		/* b 48 */
		/* 821B22F4h case    3:*/		return 0x821B2324;
		/* 821B22F4h case    3:*/		return 0x821B22F8;
	}
	return 0x821B22F8;
} // Block from 821B22E8h-821B22F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B22F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B22F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B22F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B22F8);
		  /* 821B22F8h */ case    0:  		/* lwz R10, <#[R21 + 28]> */
		/* 821B22F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000001C) );
		/* 821B22F8h case    0:*/		return 0x821B22FC;
		  /* 821B22FCh */ case    1:  		/* addi R11, R21, 24 */
		/* 821B22FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x18);
		/* 821B22FCh case    1:*/		return 0x821B2300;
		  /* 821B2300h */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821B2300h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B2300h case    2:*/		return 0x821B2304;
		  /* 821B2304h */ case    3:  		/* addic R9, R9, -1 */
		/* 821B2304h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B2304h case    3:*/		return 0x821B2308;
		  /* 821B2308h */ case    4:  		/* subfe R9, R9, R9 */
		/* 821B2308h case    4:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B2308h case    4:*/		return 0x821B230C;
		  /* 821B230Ch */ case    5:  		/* and R10, R9, R10 */
		/* 821B230Ch case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821B230Ch case    5:*/		return 0x821B2310;
		  /* 821B2310h */ case    6:  		/* cmplw CR6, R31, R10 */
		/* 821B2310h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B2310h case    6:*/		return 0x821B2314;
		  /* 821B2314h */ case    7:  		/* bc 12, CR6_EQ, -60 */
		/* 821B2314h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B22D8;  }
		/* 821B2314h case    7:*/		return 0x821B2318;
		  /* 821B2318h */ case    8:  		/* lwz R31, <#[R11 + 4]> */
		/* 821B2318h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2318h case    8:*/		return 0x821B231C;
	}
	return 0x821B231C;
} // Block from 821B22F8h-821B231Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B231Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B231C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B231C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B231C);
		  /* 821B231Ch */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B231Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B231Ch case    0:*/		return 0x821B2320;
		  /* 821B2320h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B2320h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B232C;  }
		/* 821B2320h case    1:*/		return 0x821B2324;
	}
	return 0x821B2324;
} // Block from 821B231Ch-821B2324h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B2324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2324);
		  /* 821B2324h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821B2324h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2324h case    0:*/		return 0x821B2328;
		  /* 821B2328h */ case    1:  		/* bc 4, CR6_EQ, -1988 */
		/* 821B2328h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B1B64;  }
		/* 821B2328h case    1:*/		return 0x821B232C;
	}
	return 0x821B232C;
} // Block from 821B2324h-821B232Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B232Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B232C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B232C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B232C);
		  /* 821B232Ch */ case    0:  		/* lwz R31, <#[R21 + 36]> */
		/* 821B232Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000024) );
		/* 821B232Ch case    0:*/		return 0x821B2330;
		  /* 821B2330h */ case    1:  		/* addi R11, R21, 32 */
		/* 821B2330h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x20);
		/* 821B2330h case    1:*/		return 0x821B2334;
		  /* 821B2334h */ case    2:  		/* rlwinm. R10, R31, 0, 31, 31 */
		/* 821B2334h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R31);
		/* 821B2334h case    2:*/		return 0x821B2338;
		  /* 821B2338h */ case    3:  		/* bc 4, CR0_EQ, 56 */
		/* 821B2338h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2370;  }
		/* 821B2338h case    3:*/		return 0x821B233C;
		  /* 821B233Ch */ case    4:  		/* cmplwi CR0, R31, 0 */
		/* 821B233Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B233Ch case    4:*/		return 0x821B2340;
		  /* 821B2340h */ case    5:  		/* bc 12, CR0_EQ, 48 */
		/* 821B2340h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B2370;  }
		/* 821B2340h case    5:*/		return 0x821B2344;
		  /* 821B2344h */ case    6:  		/* mr R3, R31 */
		/* 821B2344h case    6:*/		regs.R3 = regs.R31;
		/* 821B2344h case    6:*/		return 0x821B2348;
		  /* 821B2348h */ case    7:  		/* bl -91736 */
		/* 821B2348h case    7:*/		regs.LR = 0x821B234C; return 0x8219BCF0;
		/* 821B2348h case    7:*/		return 0x821B234C;
		  /* 821B234Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B234Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B234Ch case    8:*/		return 0x821B2350;
		  /* 821B2350h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821B2350h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B2358;  }
		/* 821B2350h case    9:*/		return 0x821B2354;
		  /* 821B2354h */ case   10:  		/* stw R20, <#[R31 + 32]> */
		/* 821B2354h case   10:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000020) );
		/* 821B2354h case   10:*/		return 0x821B2358;
	}
	return 0x821B2358;
} // Block from 821B232Ch-821B2358h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B2358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2358);
		  /* 821B2358h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B2358h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B2358h case    0:*/		return 0x821B235C;
		  /* 821B235Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B235Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B235Ch case    1:*/		return 0x821B2360;
		  /* 821B2360h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B2360h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B2360h case    2:*/		return 0x821B2364;
		  /* 821B2364h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B2364h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2370;  }
		/* 821B2364h case    3:*/		return 0x821B2368;
		  /* 821B2368h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B2368h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2368h case    4:*/		return 0x821B236C;
		  /* 821B236Ch */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821B236Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B2344;  }
		/* 821B236Ch case    5:*/		return 0x821B2370;
	}
	return 0x821B2370;
} // Block from 821B2358h-821B2370h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B2370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2370);
		  /* 821B2370h */ case    0:  		/* mr R4, R21 */
		/* 821B2370h case    0:*/		regs.R4 = regs.R21;
		/* 821B2370h case    0:*/		return 0x821B2374;
		  /* 821B2374h */ case    1:  		/* mr R3, R14 */
		/* 821B2374h case    1:*/		regs.R3 = regs.R14;
		/* 821B2374h case    1:*/		return 0x821B2378;
		  /* 821B2378h */ case    2:  		/* bl 465744 */
		/* 821B2378h case    2:*/		regs.LR = 0x821B237C; return 0x82223EC8;
		/* 821B2378h case    2:*/		return 0x821B237C;
		  /* 821B237Ch */ case    3:  		/* li R5, 50 */
		/* 821B237Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x32);
		/* 821B237Ch case    3:*/		return 0x821B2380;
		  /* 821B2380h */ case    4:  		/* li R4, 8 */
		/* 821B2380h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B2380h case    4:*/		return 0x821B2384;
		  /* 821B2384h */ case    5:  		/* stw R20, <#[R1 + 84]> */
		/* 821B2384h case    5:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000054) );
		/* 821B2384h case    5:*/		return 0x821B2388;
		  /* 821B2388h */ case    6:  		/* mr R3, R14 */
		/* 821B2388h case    6:*/		regs.R3 = regs.R14;
		/* 821B2388h case    6:*/		return 0x821B238C;
		  /* 821B238Ch */ case    7:  		/* bl -318108 */
		/* 821B238Ch case    7:*/		regs.LR = 0x821B2390; return 0x821648F0;
		/* 821B238Ch case    7:*/		return 0x821B2390;
		  /* 821B2390h */ case    8:  		/* addi R11, R3, 4 */
		/* 821B2390h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B2390h case    8:*/		return 0x821B2394;
		  /* 821B2394h */ case    9:  		/* addi R10, R21, 24 */
		/* 821B2394h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R21,0x18);
		/* 821B2394h case    9:*/		return 0x821B2398;
		  /* 821B2398h */ case   10:  		/* stw R3, <#[R1 + 108]> */
		/* 821B2398h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 821B2398h case   10:*/		return 0x821B239C;
		  /* 821B239Ch */ case   11:  		/* ori R10, R3, 1 */
		/* 821B239Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B239Ch case   11:*/		return 0x821B23A0;
		  /* 821B23A0h */ case   12:  		/* ori R11, R11, 1 */
		/* 821B23A0h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B23A0h case   12:*/		return 0x821B23A4;
		  /* 821B23A4h */ case   13:  		/* stw R10, <#[R3 + 4]> */
		/* 821B23A4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B23A4h case   13:*/		return 0x821B23A8;
		  /* 821B23A8h */ case   14:  		/* mr R22, R3 */
		/* 821B23A8h case   14:*/		regs.R22 = regs.R3;
		/* 821B23A8h case   14:*/		return 0x821B23AC;
		  /* 821B23ACh */ case   15:  		/* stw R11, <#[R3]> */
		/* 821B23ACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B23ACh case   15:*/		return 0x821B23B0;
		  /* 821B23B0h */ case   16:  		/* lwz R11, <#[R21 + 28]> */
		/* 821B23B0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821B23B0h case   16:*/		return 0x821B23B4;
		  /* 821B23B4h */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B23B4h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B23B4h case   17:*/		return 0x821B23B8;
		  /* 821B23B8h */ case   18:  		/* bc 4, CR0_EQ, 2308 */
		/* 821B23B8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821B2CBC;  }
		/* 821B23B8h case   18:*/		return 0x821B23BC;
		  /* 821B23BCh */ case   19:  		/* mr R23, R11 */
		/* 821B23BCh case   19:*/		regs.R23 = regs.R11;
		/* 821B23BCh case   19:*/		return 0x821B23C0;
		  /* 821B23C0h */ case   20:  		/* cmplwi CR0, R11, 0 */
		/* 821B23C0h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B23C0h case   20:*/		return 0x821B23C4;
		  /* 821B23C4h */ case   21:  		/* bc 12, CR0_EQ, 2296 */
		/* 821B23C4h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B2CBC;  }
		/* 821B23C4h case   21:*/		return 0x821B23C8;
		  /* 821B23C8h */ case   22:  		/* lwz R31, <#[R23 + 8]> */
		/* 821B23C8h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000008) );
		/* 821B23C8h case   22:*/		return 0x821B23CC;
		  /* 821B23CCh */ case   23:  		/* rlwinm R11, R31, 25, 25, 31 */
		/* 821B23CCh case   23:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R31);
		/* 821B23CCh case   23:*/		return 0x821B23D0;
		  /* 821B23D0h */ case   24:  		/* cmplwi CR6, R11, 110 */
		/* 821B23D0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821B23D0h case   24:*/		return 0x821B23D4;
		  /* 821B23D4h */ case   25:  		/* bc 4, CR6_EQ, 184 */
		/* 821B23D4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821B248C;  }
		/* 821B23D4h case   25:*/		return 0x821B23D8;
		  /* 821B23D8h */ case   26:  		/* addi R10, R1, 240 */
		/* 821B23D8h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 821B23D8h case   26:*/		return 0x821B23DC;
		  /* 821B23DCh */ case   27:  		/* mr R11, R20 */
		/* 821B23DCh case   27:*/		regs.R11 = regs.R20;
		/* 821B23DCh case   27:*/		return 0x821B23E0;
		  /* 821B23E0h */ case   28:  		/* addi R9, R10, -8 */
		/* 821B23E0h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFF8);
		/* 821B23E0h case   28:*/		return 0x821B23E4;
		  /* 821B23E4h */ case   29:  		/* rlwinm R6, R31, 13, 29, 31 */
		/* 821B23E4h case   29:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R6,regs.R31);
		/* 821B23E4h case   29:*/		return 0x821B23E8;
		  /* 821B23E8h */ case   30:  		/* addi R10, R23, 40 */
		/* 821B23E8h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0x28);
		/* 821B23E8h case   30:*/		return 0x821B23EC;
		  /* 821B23ECh */ case   31:  		/* cmplw CR6, R11, R6 */
		/* 821B23ECh case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821B23ECh case   31:*/		return 0x821B23F0;
		  /* 821B23F0h */ case   32:  		/* bc 4, CR6_LT, 20 */
		/* 821B23F0h case   32:*/		if ( !regs.CR[6].lt ) { return 0x821B2404;  }
		/* 821B23F0h case   32:*/		return 0x821B23F4;
		  /* 821B23F4h */ case   33:  		/* lwzu R8, <#[R10 + 4]> */
		/* 821B23F4h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821B23F4h case   33:*/		return 0x821B23F8;
		  /* 821B23F8h */ case   34:  		/* addi R11, R11, 1 */
		/* 821B23F8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B23F8h case   34:*/		return 0x821B23FC;
		  /* 821B23FCh */ case   35:  		/* stwu R8, <#[R9 + 8]> */
		/* 821B23FCh case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 821B23FCh case   35:*/		return 0x821B2400;
		  /* 821B2400h */ case   36:  		/* b -20 */
		/* 821B2400h case   36:*/		return 0x821B23EC;
		/* 821B2400h case   36:*/		return 0x821B2404;
	}
	return 0x821B2404;
} // Block from 821B2370h-821B2404h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821B2404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2404);
		  /* 821B2404h */ case    0:  		/* addi R10, R1, 84 */
		/* 821B2404h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54);
		/* 821B2404h case    0:*/		return 0x821B2408;
		  /* 821B2408h */ case    1:  		/* mr R9, R22 */
		/* 821B2408h case    1:*/		regs.R9 = regs.R22;
		/* 821B2408h case    1:*/		return 0x821B240C;
		  /* 821B240Ch */ case    2:  		/* li R8, 100 */
		/* 821B240Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x64);
		/* 821B240Ch case    2:*/		return 0x821B2410;
		  /* 821B2410h */ case    3:  		/* li R7, 0 */
		/* 821B2410h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B2410h case    3:*/		return 0x821B2414;
		  /* 821B2414h */ case    4:  		/* addi R5, R1, 240 */
		/* 821B2414h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 821B2414h case    4:*/		return 0x821B2418;
		  /* 821B2418h */ case    5:  		/* li R4, 0 */
		/* 821B2418h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B2418h case    5:*/		return 0x821B241C;
		  /* 821B241Ch */ case    6:  		/* mr R3, R14 */
		/* 821B241Ch case    6:*/		regs.R3 = regs.R14;
		/* 821B241Ch case    6:*/		return 0x821B2420;
		  /* 821B2420h */ case    7:  		/* bl -10744 */
		/* 821B2420h case    7:*/		regs.LR = 0x821B2424; return 0x821AFA28;
		/* 821B2420h case    7:*/		return 0x821B2424;
		  /* 821B2424h */ case    8:  		/* lwz R11, <#[R23 + 8]> */
		/* 821B2424h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821B2424h case    8:*/		return 0x821B2428;
		  /* 821B2428h */ case    9:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821B2428h case    9:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2428h case    9:*/		return 0x821B242C;
		  /* 821B242Ch */ case   10:  		/* bc 4, CR0_EQ, 2164 */
		/* 821B242Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B2CA0;  }
		/* 821B242Ch case   10:*/		return 0x821B2430;
		  /* 821B2430h */ case   11:  		/* lwz R10, <#[R14 + 336]> */
		/* 821B2430h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000150) );
		/* 821B2430h case   11:*/		return 0x821B2434;
		  /* 821B2434h */ case   12:  		/* cmplwi CR6, R10, 1 */
		/* 821B2434h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821B2434h case   12:*/		return 0x821B2438;
		  /* 821B2438h */ case   13:  		/* bc 4, CR6_GT, 2152 */
		/* 821B2438h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821B2CA0;  }
		/* 821B2438h case   13:*/		return 0x821B243C;
		  /* 821B243Ch */ case   14:  		/* lwz R10, <#[R23 + 4]> */
		/* 821B243Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821B243Ch case   14:*/		return 0x821B2440;
		  /* 821B2440h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821B2440h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B2440h case   15:*/		return 0x821B2444;
		  /* 821B2444h */ case   16:  		/* bc 12, CR6_EQ, 48 */
		/* 821B2444h case   16:*/		if ( regs.CR[6].eq ) { return 0x821B2474;  }
		/* 821B2444h case   16:*/		return 0x821B2448;
		  /* 821B2448h */ case   17:  		/* lwz R9, <#[R10 + 16]> */
		/* 821B2448h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 821B2448h case   17:*/		return 0x821B244C;
		  /* 821B244Ch */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 821B244Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821B244Ch case   18:*/		return 0x821B2450;
		  /* 821B2450h */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 821B2450h case   19:*/		if ( regs.CR[6].eq ) { return 0x821B246C;  }
		/* 821B2450h case   19:*/		return 0x821B2454;
		  /* 821B2454h */ case   20:  		/* lwz R8, <#[R10]> */
		/* 821B2454h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2454h case   20:*/		return 0x821B2458;
		  /* 821B2458h */ case   21:  		/* rlwinm. R8, R8, 0, 4, 6 */
		/* 821B2458h case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R8);
		/* 821B2458h case   21:*/		return 0x821B245C;
		  /* 821B245Ch */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 821B245Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821B246C;  }
		/* 821B245Ch case   22:*/		return 0x821B2460;
		  /* 821B2460h */ case   23:  		/* lwz R9, <#[R9 + 8]> */
		/* 821B2460h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821B2460h case   23:*/		return 0x821B2464;
		  /* 821B2464h */ case   24:  		/* rlwinm. R9, R9, 27, 31, 31 */
		/* 821B2464h case   24:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R9,regs.R9);
		/* 821B2464h case   24:*/		return 0x821B2468;
		  /* 821B2468h */ case   25:  		/* bc 12, CR0_EQ, 2104 */
		/* 821B2468h case   25:*/		if ( regs.CR[0].eq ) { return 0x821B2CA0;  }
		/* 821B2468h case   25:*/		return 0x821B246C;
	}
	return 0x821B246C;
} // Block from 821B2404h-821B246Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821B246Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B246C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B246C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B246C);
		  /* 821B246Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B246Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B246Ch case    0:*/		return 0x821B2470;
		  /* 821B2470h */ case    1:  		/* b -48 */
		/* 821B2470h case    1:*/		return 0x821B2440;
		/* 821B2470h case    1:*/		return 0x821B2474;
	}
	return 0x821B2474;
} // Block from 821B246Ch-821B2474h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B2474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2474);
		  /* 821B2474h */ case    0:  		/* li R10, 111 */
		/* 821B2474h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x6F);
		/* 821B2474h case    0:*/		return 0x821B2478;
		  /* 821B2478h */ case    1:  		/* li R9, 1 */
		/* 821B2478h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821B2478h case    1:*/		return 0x821B247C;
		  /* 821B247Ch */ case    2:  		/* rlwimi R11, R10, 7, 18, 24 */
		/* 821B247Ch case    2:*/		cpu::op::rlwimi<0,7,18,24>(regs,&regs.R11,regs.R10);
		/* 821B247Ch case    2:*/		return 0x821B2480;
		  /* 821B2480h */ case    3:  		/* stb R9, <#[R1 + 81]> */
		/* 821B2480h case    3:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x00000051) );
		/* 821B2480h case    3:*/		return 0x821B2484;
		  /* 821B2484h */ case    4:  		/* stw R11, <#[R23 + 8]> */
		/* 821B2484h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821B2484h case    4:*/		return 0x821B2488;
		  /* 821B2488h */ case    5:  		/* b 2072 */
		/* 821B2488h case    5:*/		return 0x821B2CA0;
		/* 821B2488h case    5:*/		return 0x821B248C;
	}
	return 0x821B248C;
} // Block from 821B2474h-821B248Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B248Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B248C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B248C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B248C);
		  /* 821B248Ch */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821B248Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B248Ch case    0:*/		return 0x821B2490;
		  /* 821B2490h */ case    1:  		/* bc 4, CR6_EQ, 676 */
		/* 821B2490h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B2734;  }
		/* 821B2490h case    1:*/		return 0x821B2494;
		  /* 821B2494h */ case    2:  		/* rlwinm R25, R31, 31, 28, 31 */
		/* 821B2494h case    2:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R25,regs.R31);
		/* 821B2494h case    2:*/		return 0x821B2498;
		  /* 821B2498h */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821B2498h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821B2498h case    3:*/		return 0x821B249C;
		  /* 821B249Ch */ case    4:  		/* bc 12, CR6_EQ, 1332 */
		/* 821B249Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821B29D0;  }
		/* 821B249Ch case    4:*/		return 0x821B24A0;
		  /* 821B24A0h */ case    5:  		/* addi R11, R25, -1 */
		/* 821B24A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821B24A0h case    5:*/		return 0x821B24A4;
		  /* 821B24A4h */ case    6:  		/* lwz R8, <#[R23 + 28]> */
		/* 821B24A4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x0000001C) );
		/* 821B24A4h case    6:*/		return 0x821B24A8;
		  /* 821B24A8h */ case    7:  		/* li R10, 1 */
		/* 821B24A8h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B24A8h case    7:*/		return 0x821B24AC;
		  /* 821B24ACh */ case    8:  		/* lwz R3, <#[R23 + 44]> */
		/* 821B24ACh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x0000002C) );
		/* 821B24ACh case    8:*/		return 0x821B24B0;
		  /* 821B24B0h */ case    9:  		/* andc R11, R25, R11 */
		/* 821B24B0h case    9:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821B24B0h case    9:*/		return 0x821B24B4;
		  /* 821B24B4h */ case   10:  		/* li R9, 0 */
		/* 821B24B4h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B24B4h case   10:*/		return 0x821B24B8;
		  /* 821B24B8h */ case   11:  		/* cntlzw R11, R11 */
		/* 821B24B8h case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821B24B8h case   11:*/		return 0x821B24BC;
		  /* 821B24BCh */ case   12:  		/* addi R7, R1, 208 */
		/* 821B24BCh case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 821B24BCh case   12:*/		return 0x821B24C0;
		  /* 821B24C0h */ case   13:  		/* subfic R31, R11, 31 */
		/* 821B24C0h case   13:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821B24C0h case   13:*/		return 0x821B24C4;
		  /* 821B24C4h */ case   14:  		/* addi R6, R1, 216 */
		/* 821B24C4h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD8);
		/* 821B24C4h case   14:*/		return 0x821B24C8;
		  /* 821B24C8h */ case   15:  		/* mr R4, R31 */
		/* 821B24C8h case   15:*/		regs.R4 = regs.R31;
		/* 821B24C8h case   15:*/		return 0x821B24CC;
		  /* 821B24CCh */ case   16:  		/* addi R5, R1, 112 */
		/* 821B24CCh case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821B24CCh case   16:*/		return 0x821B24D0;
		  /* 821B24D0h */ case   17:  		/* bl 462848 */
		/* 821B24D0h case   17:*/		regs.LR = 0x821B24D4; return 0x822234D0;
		/* 821B24D0h case   17:*/		return 0x821B24D4;
		  /* 821B24D4h */ case   18:  		/* li R10, 1 */
		/* 821B24D4h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B24D4h case   18:*/		return 0x821B24D8;
		  /* 821B24D8h */ case   19:  		/* li R9, 0 */
		/* 821B24D8h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B24D8h case   19:*/		return 0x821B24DC;
		  /* 821B24DCh */ case   20:  		/* lwz R8, <#[R23 + 28]> */
		/* 821B24DCh case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x0000001C) );
		/* 821B24DCh case   20:*/		return 0x821B24E0;
		  /* 821B24E0h */ case   21:  		/* addi R7, R1, 188 */
		/* 821B24E0h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xBC);
		/* 821B24E0h case   21:*/		return 0x821B24E4;
		  /* 821B24E4h */ case   22:  		/* lwz R3, <#[R23 + 48]> */
		/* 821B24E4h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x00000030) );
		/* 821B24E4h case   22:*/		return 0x821B24E8;
		  /* 821B24E8h */ case   23:  		/* addi R6, R1, 204 */
		/* 821B24E8h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xCC);
		/* 821B24E8h case   23:*/		return 0x821B24EC;
		  /* 821B24ECh */ case   24:  		/* addi R5, R1, 124 */
		/* 821B24ECh case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 821B24ECh case   24:*/		return 0x821B24F0;
		  /* 821B24F0h */ case   25:  		/* mr R4, R31 */
		/* 821B24F0h case   25:*/		regs.R4 = regs.R31;
		/* 821B24F0h case   25:*/		return 0x821B24F4;
		  /* 821B24F4h */ case   26:  		/* bl 462812 */
		/* 821B24F4h case   26:*/		regs.LR = 0x821B24F8; return 0x822234D0;
		/* 821B24F4h case   26:*/		return 0x821B24F8;
		  /* 821B24F8h */ case   27:  		/* lwz R11, <#[R1 + 112]> */
		/* 821B24F8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821B24F8h case   27:*/		return 0x821B24FC;
		  /* 821B24FCh */ case   28:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B24FCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B24FCh case   28:*/		return 0x821B2500;
		  /* 821B2500h */ case   29:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B2500h case   29:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B2500h case   29:*/		return 0x821B2504;
		  /* 821B2504h */ case   30:  		/* cmplwi CR6, R11, 256 */
		/* 821B2504h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B2504h case   30:*/		return 0x821B2508;
		  /* 821B2508h */ case   31:  		/* bc 12, CR6_EQ, 24 */
		/* 821B2508h case   31:*/		if ( regs.CR[6].eq ) { return 0x821B2520;  }
		/* 821B2508h case   31:*/		return 0x821B250C;
		  /* 821B250Ch */ case   32:  		/* lwz R11, <#[R1 + 124]> */
		/* 821B250Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821B250Ch case   32:*/		return 0x821B2510;
		  /* 821B2510h */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2510h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2510h case   33:*/		return 0x821B2514;
		  /* 821B2514h */ case   34:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B2514h case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B2514h case   34:*/		return 0x821B2518;
		  /* 821B2518h */ case   35:  		/* cmplwi CR6, R11, 256 */
		/* 821B2518h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B2518h case   35:*/		return 0x821B251C;
		  /* 821B251Ch */ case   36:  		/* bc 4, CR6_EQ, 520 */
		/* 821B251Ch case   36:*/		if ( !regs.CR[6].eq ) { return 0x821B2724;  }
		/* 821B251Ch case   36:*/		return 0x821B2520;
	}
	return 0x821B2520;
} // Block from 821B248Ch-821B2520h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821B2520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2520);
		  /* 821B2520h */ case    0:  		/* li R5, 48 */
		/* 821B2520h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 821B2520h case    0:*/		return 0x821B2524;
		  /* 821B2524h */ case    1:  		/* li R4, 8 */
		/* 821B2524h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B2524h case    1:*/		return 0x821B2528;
		  /* 821B2528h */ case    2:  		/* mr R3, R14 */
		/* 821B2528h case    2:*/		regs.R3 = regs.R14;
		/* 821B2528h case    2:*/		return 0x821B252C;
		  /* 821B252Ch */ case    3:  		/* bl -318524 */
		/* 821B252Ch case    3:*/		regs.LR = 0x821B2530; return 0x821648F0;
		/* 821B252Ch case    3:*/		return 0x821B2530;
		  /* 821B2530h */ case    4:  		/* addi R30, R3, 4 */
		/* 821B2530h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x4);
		/* 821B2530h case    4:*/		return 0x821B2534;
		  /* 821B2534h */ case    5:  		/* ori R11, R3, 1 */
		/* 821B2534h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821B2534h case    5:*/		return 0x821B2538;
		  /* 821B2538h */ case    6:  		/* ori R10, R30, 1 */
		/* 821B2538h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R30,0x1);
		/* 821B2538h case    6:*/		return 0x821B253C;
		  /* 821B253Ch */ case    7:  		/* stw R11, <#[R3 + 4]> */
		/* 821B253Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B253Ch case    7:*/		return 0x821B2540;
		  /* 821B2540h */ case    8:  		/* mr R29, R3 */
		/* 821B2540h case    8:*/		regs.R29 = regs.R3;
		/* 821B2540h case    8:*/		return 0x821B2544;
		  /* 821B2544h */ case    9:  		/* stw R10, <#[R3]> */
		/* 821B2544h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2544h case    9:*/		return 0x821B2548;
		  /* 821B2548h */ case   10:  		/* mr R6, R3 */
		/* 821B2548h case   10:*/		regs.R6 = regs.R3;
		/* 821B2548h case   10:*/		return 0x821B254C;
		  /* 821B254Ch */ case   11:  		/* mr R5, R31 */
		/* 821B254Ch case   11:*/		regs.R5 = regs.R31;
		/* 821B254Ch case   11:*/		return 0x821B2550;
		  /* 821B2550h */ case   12:  		/* mr R4, R23 */
		/* 821B2550h case   12:*/		regs.R4 = regs.R23;
		/* 821B2550h case   12:*/		return 0x821B2554;
		  /* 821B2554h */ case   13:  		/* mr R3, R14 */
		/* 821B2554h case   13:*/		regs.R3 = regs.R14;
		/* 821B2554h case   13:*/		return 0x821B2558;
		  /* 821B2558h */ case   14:  		/* bl -58256 */
		/* 821B2558h case   14:*/		regs.LR = 0x821B255C; return 0x821A41C8;
		/* 821B2558h case   14:*/		return 0x821B255C;
		  /* 821B255Ch */ case   15:  		/* lwz R11, <#[R29 + 4]> */
		/* 821B255Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821B255Ch case   15:*/		return 0x821B2560;
		  /* 821B2560h */ case   16:  		/* mr R31, R20 */
		/* 821B2560h case   16:*/		regs.R31 = regs.R20;
		/* 821B2560h case   16:*/		return 0x821B2564;
		  /* 821B2564h */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2564h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2564h case   17:*/		return 0x821B2568;
		  /* 821B2568h */ case   18:  		/* bc 4, CR0_EQ, 428 */
		/* 821B2568h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821B2714;  }
		/* 821B2568h case   18:*/		return 0x821B256C;
		  /* 821B256Ch */ case   19:  		/* cmplwi CR0, R11, 0 */
		/* 821B256Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B256Ch case   19:*/		return 0x821B2570;
		  /* 821B2570h */ case   20:  		/* bc 12, CR0_EQ, 420 */
		/* 821B2570h case   20:*/		if ( regs.CR[0].eq ) { return 0x821B2714;  }
		/* 821B2570h case   20:*/		return 0x821B2574;
		  /* 821B2574h */ case   21:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821B2574h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821B2574h case   21:*/		return 0x821B2578;
		  /* 821B2578h */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2578h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2578h case   22:*/		return 0x821B257C;
		  /* 821B257Ch */ case   23:  		/* add R31, R11, R31 */
		/* 821B257Ch case   23:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821B257Ch case   23:*/		return 0x821B2580;
		  /* 821B2580h */ case   24:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B2580h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B2580h case   24:*/		return 0x821B2584;
		  /* 821B2584h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2584h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2584h case   25:*/		return 0x821B2588;
		  /* 821B2588h */ case   26:  		/* bc 4, CR0_EQ, 12 */
		/* 821B2588h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B2594;  }
		/* 821B2588h case   26:*/		return 0x821B258C;
		  /* 821B258Ch */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821B258Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B258Ch case   27:*/		return 0x821B2590;
		  /* 821B2590h */ case   28:  		/* bc 4, CR6_EQ, -28 */
		/* 821B2590h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821B2574;  }
		/* 821B2590h case   28:*/		return 0x821B2594;
	}
	return 0x821B2594;
} // Block from 821B2520h-821B2594h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B2594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2594);
		  /* 821B2594h */ case    0:  		/* cmplwi CR6, R31, 2 */
		/* 821B2594h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 821B2594h case    0:*/		return 0x821B2598;
		  /* 821B2598h */ case    1:  		/* bc 4, CR6_GT, 380 */
		/* 821B2598h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821B2714;  }
		/* 821B2598h case    1:*/		return 0x821B259C;
		  /* 821B259Ch */ case    2:  		/* rlwinm R26, R31, 3, 0, 28 */
		/* 821B259Ch case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R26,regs.R31);
		/* 821B259Ch case    2:*/		return 0x821B25A0;
		  /* 821B25A0h */ case    3:  		/* li R5, 0 */
		/* 821B25A0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B25A0h case    3:*/		return 0x821B25A4;
		  /* 821B25A4h */ case    4:  		/* mr R4, R26 */
		/* 821B25A4h case    4:*/		regs.R4 = regs.R26;
		/* 821B25A4h case    4:*/		return 0x821B25A8;
		  /* 821B25A8h */ case    5:  		/* mr R3, R14 */
		/* 821B25A8h case    5:*/		regs.R3 = regs.R14;
		/* 821B25A8h case    5:*/		return 0x821B25AC;
		  /* 821B25ACh */ case    6:  		/* bl -316788 */
		/* 821B25ACh case    6:*/		regs.LR = 0x821B25B0; return 0x82165038;
		/* 821B25ACh case    6:*/		return 0x821B25B0;
		  /* 821B25B0h */ case    7:  		/* addi R11, R31, -1 */
		/* 821B25B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821B25B0h case    7:*/		return 0x821B25B4;
		  /* 821B25B4h */ case    8:  		/* mr R27, R3 */
		/* 821B25B4h case    8:*/		regs.R27 = regs.R3;
		/* 821B25B4h case    8:*/		return 0x821B25B8;
		  /* 821B25B8h */ case    9:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821B25B8h case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821B25B8h case    9:*/		return 0x821B25BC;
		  /* 821B25BCh */ case   10:  		/* add R28, R11, R3 */
		/* 821B25BCh case   10:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R3);
		/* 821B25BCh case   10:*/		return 0x821B25C0;
		  /* 821B25C0h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 821B25C0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B25C0h case   11:*/		return 0x821B25C4;
		  /* 821B25C4h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B25C4h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B25C4h case   12:*/		return 0x821B25C8;
		  /* 821B25C8h */ case   13:  		/* bc 4, CR0_EQ, 180 */
		/* 821B25C8h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821B267C;  }
		/* 821B25C8h case   13:*/		return 0x821B25CC;
		  /* 821B25CCh */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821B25CCh case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B25CCh case   14:*/		return 0x821B25D0;
		  /* 821B25D0h */ case   15:  		/* bc 12, CR0_EQ, 172 */
		/* 821B25D0h case   15:*/		if ( regs.CR[0].eq ) { return 0x821B267C;  }
		/* 821B25D0h case   15:*/		return 0x821B25D4;
		  /* 821B25D4h */ case   16:  		/* lwz R11, <#[R29]> */
		/* 821B25D4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B25D4h case   16:*/		return 0x821B25D8;
		  /* 821B25D8h */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B25D8h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B25D8h case   17:*/		return 0x821B25DC;
		  /* 821B25DCh */ case   18:  		/* addi R11, R11, -4 */
		/* 821B25DCh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B25DCh case   18:*/		return 0x821B25E0;
		  /* 821B25E0h */ case   19:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B25E0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B25E0h case   19:*/		return 0x821B25E4;
		  /* 821B25E4h */ case   20:  		/* addi R10, R10, 1 */
		/* 821B25E4h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B25E4h case   20:*/		return 0x821B25E8;
		  /* 821B25E8h */ case   21:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821B25E8h case   21:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821B25E8h case   21:*/		return 0x821B25EC;
		  /* 821B25ECh */ case   22:  		/* add R11, R10, R11 */
		/* 821B25ECh case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B25ECh case   22:*/		return 0x821B25F0;
		  /* 821B25F0h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 821B25F0h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B25F0h case   23:*/		return 0x821B25F4;
		  /* 821B25F4h */ case   24:  		/* stw R10, <#[R28]> */
		/* 821B25F4h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821B25F4h case   24:*/		return 0x821B25F8;
		  /* 821B25F8h */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B25F8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B25F8h case   25:*/		return 0x821B25FC;
		  /* 821B25FCh */ case   26:  		/* lwz R11, <#[R11 + 16]> */
		/* 821B25FCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821B25FCh case   26:*/		return 0x821B2600;
		  /* 821B2600h */ case   27:  		/* lwz R10, <#[R11 + 12]> */
		/* 821B2600h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B2600h case   27:*/		return 0x821B2604;
		  /* 821B2604h */ case   28:  		/* oris R10, R10, 1 */
		/* 821B2604h case   28:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B2604h case   28:*/		return 0x821B2608;
		  /* 821B2608h */ case   29:  		/* stw R10, <#[R11 + 12]> */
		/* 821B2608h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B2608h case   29:*/		return 0x821B260C;
		  /* 821B260Ch */ case   30:  		/* lwz R11, <#[R30]> */
		/* 821B260Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B260Ch case   30:*/		return 0x821B2610;
		  /* 821B2610h */ case   31:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B2610h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B2610h case   31:*/		return 0x821B2614;
		  /* 821B2614h */ case   32:  		/* bc 12, CR0_EQ, 12 */
		/* 821B2614h case   32:*/		if ( regs.CR[0].eq ) { return 0x821B2620;  }
		/* 821B2614h case   32:*/		return 0x821B2618;
		  /* 821B2618h */ case   33:  		/* mr R4, R20 */
		/* 821B2618h case   33:*/		regs.R4 = regs.R20;
		/* 821B2618h case   33:*/		return 0x821B261C;
		  /* 821B261Ch */ case   34:  		/* b 16 */
		/* 821B261Ch case   34:*/		return 0x821B262C;
		/* 821B261Ch case   34:*/		return 0x821B2620;
	}
	return 0x821B2620;
} // Block from 821B2594h-821B2620h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821B2620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2620);
		  /* 821B2620h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821B2620h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B2620h case    0:*/		return 0x821B2624;
		  /* 821B2624h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2624h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2624h case    1:*/		return 0x821B2628;
		  /* 821B2628h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B2628h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B2628h case    2:*/		return 0x821B262C;
	}
	return 0x821B262C;
} // Block from 821B2620h-821B262Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B262Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B262C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B262C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B262C);
		  /* 821B262Ch */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B262Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B262Ch case    0:*/		return 0x821B2630;
		  /* 821B2630h */ case    1:  		/* addic. R11, R11, -1 */
		/* 821B2630h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B2630h case    1:*/		return 0x821B2634;
		  /* 821B2634h */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 821B2634h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B2634h case    2:*/		return 0x821B2638;
		  /* 821B2638h */ case    3:  		/* bc 4, CR0_EQ, 60 */
		/* 821B2638h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2674;  }
		/* 821B2638h case    3:*/		return 0x821B263C;
		  /* 821B263Ch */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B263Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B263Ch case    4:*/		return 0x821B2640;
		  /* 821B2640h */ case    5:  		/* mr R3, R29 */
		/* 821B2640h case    5:*/		regs.R3 = regs.R29;
		/* 821B2640h case    5:*/		return 0x821B2644;
		  /* 821B2644h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B2644h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2644h case    6:*/		return 0x821B2648;
		  /* 821B2648h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 821B2648h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2648h case    7:*/		return 0x821B264C;
		  /* 821B264Ch */ case    8:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B264Ch case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B264Ch case    8:*/		return 0x821B2650;
		  /* 821B2650h */ case    9:  		/* stw R9, <#[R10]> */
		/* 821B2650h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2650h case    9:*/		return 0x821B2654;
		  /* 821B2654h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B2654h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2654h case   10:*/		return 0x821B2658;
		  /* 821B2658h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821B2658h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2658h case   11:*/		return 0x821B265C;
		  /* 821B265Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B265Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B265Ch case   12:*/		return 0x821B2660;
		  /* 821B2660h */ case   13:  		/* stw R10, <#[R11]> */
		/* 821B2660h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2660h case   13:*/		return 0x821B2664;
		  /* 821B2664h */ case   14:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B2664h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B2664h case   14:*/		return 0x821B2668;
		  /* 821B2668h */ case   15:  		/* addi R11, R11, 2 */
		/* 821B2668h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821B2668h case   15:*/		return 0x821B266C;
		  /* 821B266Ch */ case   16:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 821B266Ch case   16:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 821B266Ch case   16:*/		return 0x821B2670;
		  /* 821B2670h */ case   17:  		/* bl -395368 */
		/* 821B2670h case   17:*/		regs.LR = 0x821B2674; return 0x82151E08;
		/* 821B2670h case   17:*/		return 0x821B2674;
	}
	return 0x821B2674;
} // Block from 821B262Ch-821B2674h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B2674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2674);
		  /* 821B2674h */ case    0:  		/* addi R28, R28, -8 */
		/* 821B2674h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFF8);
		/* 821B2674h case    0:*/		return 0x821B2678;
		  /* 821B2678h */ case    1:  		/* b -184 */
		/* 821B2678h case    1:*/		return 0x821B25C0;
		/* 821B2678h case    1:*/		return 0x821B267C;
	}
	return 0x821B267C;
} // Block from 821B2674h-821B267Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B267Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B267C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B267C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B267C);
		  /* 821B267Ch */ case    0:  		/* addi R10, R1, 84 */
		/* 821B267Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54);
		/* 821B267Ch case    0:*/		return 0x821B2680;
		  /* 821B2680h */ case    1:  		/* mr R9, R22 */
		/* 821B2680h case    1:*/		regs.R9 = regs.R22;
		/* 821B2680h case    1:*/		return 0x821B2684;
		  /* 821B2684h */ case    2:  		/* li R8, 0 */
		/* 821B2684h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B2684h case    2:*/		return 0x821B2688;
		  /* 821B2688h */ case    3:  		/* li R7, 3 */
		/* 821B2688h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821B2688h case    3:*/		return 0x821B268C;
		  /* 821B268Ch */ case    4:  		/* mr R6, R31 */
		/* 821B268Ch case    4:*/		regs.R6 = regs.R31;
		/* 821B268Ch case    4:*/		return 0x821B2690;
		  /* 821B2690h */ case    5:  		/* mr R5, R27 */
		/* 821B2690h case    5:*/		regs.R5 = regs.R27;
		/* 821B2690h case    5:*/		return 0x821B2694;
		  /* 821B2694h */ case    6:  		/* li R4, 0 */
		/* 821B2694h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B2694h case    6:*/		return 0x821B2698;
		  /* 821B2698h */ case    7:  		/* mr R3, R14 */
		/* 821B2698h case    7:*/		regs.R3 = regs.R14;
		/* 821B2698h case    7:*/		return 0x821B269C;
		  /* 821B269Ch */ case    8:  		/* bl -11380 */
		/* 821B269Ch case    8:*/		regs.LR = 0x821B26A0; return 0x821AFA28;
		/* 821B269Ch case    8:*/		return 0x821B26A0;
		  /* 821B26A0h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821B26A0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B26A0h case    9:*/		return 0x821B26A4;
		  /* 821B26A4h */ case   10:  		/* bc 12, CR6_EQ, 92 */
		/* 821B26A4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B2700;  }
		/* 821B26A4h case   10:*/		return 0x821B26A8;
		  /* 821B26A8h */ case   11:  		/* mr R30, R27 */
		/* 821B26A8h case   11:*/		regs.R30 = regs.R27;
		/* 821B26A8h case   11:*/		return 0x821B26AC;
		  /* 821B26ACh */ case   12:  		/* lwz R4, <#[R30]> */
		/* 821B26ACh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821B26ACh case   12:*/		return 0x821B26B0;
		  /* 821B26B0h */ case   13:  		/* lwz R11, <#[R4 + 16]> */
		/* 821B26B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821B26B0h case   13:*/		return 0x821B26B4;
		  /* 821B26B4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821B26B4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B26B4h case   14:*/		return 0x821B26B8;
		  /* 821B26B8h */ case   15:  		/* bc 4, CR6_EQ, 60 */
		/* 821B26B8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821B26F4;  }
		/* 821B26B8h case   15:*/		return 0x821B26BC;
		  /* 821B26BCh */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B26BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B26BCh case   16:*/		return 0x821B26C0;
		  /* 821B26C0h */ case   17:  		/* addi R10, R11, 4 */
		/* 821B26C0h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B26C0h case   17:*/		return 0x821B26C4;
		  /* 821B26C4h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B26C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B26C4h case   18:*/		return 0x821B26C8;
		  /* 821B26C8h */ case   19:  		/* b 12 */
		/* 821B26C8h case   19:*/		return 0x821B26D4;
		/* 821B26C8h case   19:*/		return 0x821B26CC;
		  /* 821B26CCh */ case   20:  		/* addi R10, R11, 8 */
		/* 821B26CCh case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B26CCh case   20:*/		return 0x821B26D0;
		  /* 821B26D0h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B26D0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B26D0h case   21:*/		return 0x821B26D4;
	}
	return 0x821B26D4;
} // Block from 821B267Ch-821B26D4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B26D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B26D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B26D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B26D4);
		  /* 821B26D4h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821B26D4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821B26D4h case    0:*/		return 0x821B26D8;
		  /* 821B26D8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B26D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B26CC;  }
		/* 821B26D8h case    1:*/		return 0x821B26DC;
		  /* 821B26DCh */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B26DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B26DCh case    2:*/		return 0x821B26E0;
		  /* 821B26E0h */ case    3:  		/* li R6, 26 */
		/* 821B26E0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B26E0h case    3:*/		return 0x821B26E4;
		  /* 821B26E4h */ case    4:  		/* li R5, 20 */
		/* 821B26E4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B26E4h case    4:*/		return 0x821B26E8;
		  /* 821B26E8h */ case    5:  		/* mr R3, R14 */
		/* 821B26E8h case    5:*/		regs.R3 = regs.R14;
		/* 821B26E8h case    5:*/		return 0x821B26EC;
		  /* 821B26ECh */ case    6:  		/* stw R11, <#[R10]> */
		/* 821B26ECh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B26ECh case    6:*/		return 0x821B26F0;
		  /* 821B26F0h */ case    7:  		/* bl -318040 */
		/* 821B26F0h case    7:*/		regs.LR = 0x821B26F4; return 0x82164C98;
		/* 821B26F0h case    7:*/		return 0x821B26F4;
	}
	return 0x821B26F4;
} // Block from 821B26D4h-821B26F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B26F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B26F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B26F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B26F4);
		  /* 821B26F4h */ case    0:  		/* addic. R31, R31, -1 */
		/* 821B26F4h case    0:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821B26F4h case    0:*/		return 0x821B26F8;
		  /* 821B26F8h */ case    1:  		/* addi R30, R30, 8 */
		/* 821B26F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821B26F8h case    1:*/		return 0x821B26FC;
		  /* 821B26FCh */ case    2:  		/* bc 4, CR0_EQ, -80 */
		/* 821B26FCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B26AC;  }
		/* 821B26FCh case    2:*/		return 0x821B2700;
	}
	return 0x821B2700;
} // Block from 821B26F4h-821B2700h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2700);
		  /* 821B2700h */ case    0:  		/* li R6, 0 */
		/* 821B2700h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B2700h case    0:*/		return 0x821B2704;
		  /* 821B2704h */ case    1:  		/* mr R5, R26 */
		/* 821B2704h case    1:*/		regs.R5 = regs.R26;
		/* 821B2704h case    1:*/		return 0x821B2708;
		  /* 821B2708h */ case    2:  		/* mr R4, R27 */
		/* 821B2708h case    2:*/		regs.R4 = regs.R27;
		/* 821B2708h case    2:*/		return 0x821B270C;
		  /* 821B270Ch */ case    3:  		/* mr R3, R14 */
		/* 821B270Ch case    3:*/		regs.R3 = regs.R14;
		/* 821B270Ch case    3:*/		return 0x821B2710;
		  /* 821B2710h */ case    4:  		/* bl -284864 */
		/* 821B2710h case    4:*/		regs.LR = 0x821B2714; return 0x8216CE50;
		/* 821B2710h case    4:*/		return 0x821B2714;
	}
	return 0x821B2714;
} // Block from 821B2700h-821B2714h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B2714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2714);
		  /* 821B2714h */ case    0:  		/* lwz R10, <#[R14 + 976]> */
		/* 821B2714h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x000003D0) );
		/* 821B2714h case    0:*/		return 0x821B2718;
		  /* 821B2718h */ case    1:  		/* addi R11, R14, 972 */
		/* 821B2718h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x3CC);
		/* 821B2718h case    1:*/		return 0x821B271C;
		  /* 821B271Ch */ case    2:  		/* stw R10, <#[R29]> */
		/* 821B271Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821B271Ch case    2:*/		return 0x821B2720;
		  /* 821B2720h */ case    3:  		/* stw R29, <#[R14 + 976]> */
		/* 821B2720h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R14 + 0x000003D0) );
		/* 821B2720h case    3:*/		return 0x821B2724;
	}
	return 0x821B2724;
} // Block from 821B2714h-821B2724h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B2724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2724);
		  /* 821B2724h */ case    0:  		/* addi R11, R25, -1 */
		/* 821B2724h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821B2724h case    0:*/		return 0x821B2728;
		  /* 821B2728h */ case    1:  		/* andc R11, R25, R11 */
		/* 821B2728h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821B2728h case    1:*/		return 0x821B272C;
		  /* 821B272Ch */ case    2:  		/* subf R25, R11, R25 */
		/* 821B272Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 821B272Ch case    2:*/		return 0x821B2730;
		  /* 821B2730h */ case    3:  		/* b -664 */
		/* 821B2730h case    3:*/		return 0x821B2498;
		/* 821B2730h case    3:*/		return 0x821B2734;
	}
	return 0x821B2734;
} // Block from 821B2724h-821B2734h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B2734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2734);
		  /* 821B2734h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 821B2734h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821B2734h case    0:*/		return 0x821B2738;
		  /* 821B2738h */ case    1:  		/* bc 4, CR6_EQ, 664 */
		/* 821B2738h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B29D0;  }
		/* 821B2738h case    1:*/		return 0x821B273C;
		  /* 821B273Ch */ case    2:  		/* lwz R4, <#[R23 + 48]> */
		/* 821B273Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000030) );
		/* 821B273Ch case    2:*/		return 0x821B2740;
		  /* 821B2740h */ case    3:  		/* lwz R3, <#[R23 + 44]> */
		/* 821B2740h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x0000002C) );
		/* 821B2740h case    3:*/		return 0x821B2744;
		  /* 821B2744h */ case    4:  		/* bl -320700 */
		/* 821B2744h case    4:*/		regs.LR = 0x821B2748; return 0x82164288;
		/* 821B2744h case    4:*/		return 0x821B2748;
		  /* 821B2748h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B2748h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B2748h case    5:*/		return 0x821B274C;
		  /* 821B274Ch */ case    6:  		/* bc 4, CR0_EQ, 644 */
		/* 821B274Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B29D0;  }
		/* 821B274Ch case    6:*/		return 0x821B2750;
		  /* 821B2750h */ case    7:  		/* rlwinm R25, R31, 31, 28, 31 */
		/* 821B2750h case    7:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R25,regs.R31);
		/* 821B2750h case    7:*/		return 0x821B2754;
		  /* 821B2754h */ case    8:  		/* cmplwi CR6, R25, 0 */
		/* 821B2754h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821B2754h case    8:*/		return 0x821B2758;
		  /* 821B2758h */ case    9:  		/* bc 12, CR6_EQ, 632 */
		/* 821B2758h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B29D0;  }
		/* 821B2758h case    9:*/		return 0x821B275C;
		  /* 821B275Ch */ case   10:  		/* addi R11, R25, -1 */
		/* 821B275Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821B275Ch case   10:*/		return 0x821B2760;
		  /* 821B2760h */ case   11:  		/* li R5, 27 */
		/* 821B2760h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1B);
		/* 821B2760h case   11:*/		return 0x821B2764;
		  /* 821B2764h */ case   12:  		/* andc R11, R25, R11 */
		/* 821B2764h case   12:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821B2764h case   12:*/		return 0x821B2768;
		  /* 821B2768h */ case   13:  		/* li R4, 8 */
		/* 821B2768h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B2768h case   13:*/		return 0x821B276C;
		  /* 821B276Ch */ case   14:  		/* cntlzw R11, R11 */
		/* 821B276Ch case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821B276Ch case   14:*/		return 0x821B2770;
		  /* 821B2770h */ case   15:  		/* mr R3, R14 */
		/* 821B2770h case   15:*/		regs.R3 = regs.R14;
		/* 821B2770h case   15:*/		return 0x821B2774;
		  /* 821B2774h */ case   16:  		/* subfic R31, R11, 31 */
		/* 821B2774h case   16:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821B2774h case   16:*/		return 0x821B2778;
		  /* 821B2778h */ case   17:  		/* bl -319112 */
		/* 821B2778h case   17:*/		regs.LR = 0x821B277C; return 0x821648F0;
		/* 821B2778h case   17:*/		return 0x821B277C;
		  /* 821B277Ch */ case   18:  		/* addi R30, R3, 4 */
		/* 821B277Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x4);
		/* 821B277Ch case   18:*/		return 0x821B2780;
		  /* 821B2780h */ case   19:  		/* ori R11, R3, 1 */
		/* 821B2780h case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821B2780h case   19:*/		return 0x821B2784;
		  /* 821B2784h */ case   20:  		/* ori R10, R30, 1 */
		/* 821B2784h case   20:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R30,0x1);
		/* 821B2784h case   20:*/		return 0x821B2788;
		  /* 821B2788h */ case   21:  		/* stw R11, <#[R3 + 4]> */
		/* 821B2788h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B2788h case   21:*/		return 0x821B278C;
		  /* 821B278Ch */ case   22:  		/* mr R27, R3 */
		/* 821B278Ch case   22:*/		regs.R27 = regs.R3;
		/* 821B278Ch case   22:*/		return 0x821B2790;
		  /* 821B2790h */ case   23:  		/* stw R10, <#[R3]> */
		/* 821B2790h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2790h case   23:*/		return 0x821B2794;
		  /* 821B2794h */ case   24:  		/* mr R6, R3 */
		/* 821B2794h case   24:*/		regs.R6 = regs.R3;
		/* 821B2794h case   24:*/		return 0x821B2798;
		  /* 821B2798h */ case   25:  		/* mr R5, R31 */
		/* 821B2798h case   25:*/		regs.R5 = regs.R31;
		/* 821B2798h case   25:*/		return 0x821B279C;
		  /* 821B279Ch */ case   26:  		/* mr R4, R23 */
		/* 821B279Ch case   26:*/		regs.R4 = regs.R23;
		/* 821B279Ch case   26:*/		return 0x821B27A0;
		  /* 821B27A0h */ case   27:  		/* mr R3, R14 */
		/* 821B27A0h case   27:*/		regs.R3 = regs.R14;
		/* 821B27A0h case   27:*/		return 0x821B27A4;
		  /* 821B27A4h */ case   28:  		/* bl -58180 */
		/* 821B27A4h case   28:*/		regs.LR = 0x821B27A8; return 0x821A4460;
		/* 821B27A4h case   28:*/		return 0x821B27A8;
		  /* 821B27A8h */ case   29:  		/* lwz R11, <#[R27 + 4]> */
		/* 821B27A8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821B27A8h case   29:*/		return 0x821B27AC;
		  /* 821B27ACh */ case   30:  		/* mr R31, R20 */
		/* 821B27ACh case   30:*/		regs.R31 = regs.R20;
		/* 821B27ACh case   30:*/		return 0x821B27B0;
		  /* 821B27B0h */ case   31:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B27B0h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B27B0h case   31:*/		return 0x821B27B4;
		  /* 821B27B4h */ case   32:  		/* bc 4, CR0_EQ, 508 */
		/* 821B27B4h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821B29B0;  }
		/* 821B27B4h case   32:*/		return 0x821B27B8;
		  /* 821B27B8h */ case   33:  		/* cmplwi CR0, R11, 0 */
		/* 821B27B8h case   33:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B27B8h case   33:*/		return 0x821B27BC;
		  /* 821B27BCh */ case   34:  		/* bc 12, CR0_EQ, 500 */
		/* 821B27BCh case   34:*/		if ( regs.CR[0].eq ) { return 0x821B29B0;  }
		/* 821B27BCh case   34:*/		return 0x821B27C0;
		  /* 821B27C0h */ case   35:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821B27C0h case   35:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821B27C0h case   35:*/		return 0x821B27C4;
		  /* 821B27C4h */ case   36:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B27C4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B27C4h case   36:*/		return 0x821B27C8;
		  /* 821B27C8h */ case   37:  		/* add R31, R11, R31 */
		/* 821B27C8h case   37:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821B27C8h case   37:*/		return 0x821B27CC;
		  /* 821B27CCh */ case   38:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B27CCh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B27CCh case   38:*/		return 0x821B27D0;
		  /* 821B27D0h */ case   39:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B27D0h case   39:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B27D0h case   39:*/		return 0x821B27D4;
		  /* 821B27D4h */ case   40:  		/* bc 4, CR0_EQ, 12 */
		/* 821B27D4h case   40:*/		if ( !regs.CR[0].eq ) { return 0x821B27E0;  }
		/* 821B27D4h case   40:*/		return 0x821B27D8;
		  /* 821B27D8h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 821B27D8h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B27D8h case   41:*/		return 0x821B27DC;
		  /* 821B27DCh */ case   42:  		/* bc 4, CR6_EQ, -28 */
		/* 821B27DCh case   42:*/		if ( !regs.CR[6].eq ) { return 0x821B27C0;  }
		/* 821B27DCh case   42:*/		return 0x821B27E0;
	}
	return 0x821B27E0;
} // Block from 821B2734h-821B27E0h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821B27E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B27E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B27E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B27E0);
		  /* 821B27E0h */ case    0:  		/* cmplwi CR6, R31, 4 */
		/* 821B27E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821B27E0h case    0:*/		return 0x821B27E4;
		  /* 821B27E4h */ case    1:  		/* bc 12, CR6_LT, 460 */
		/* 821B27E4h case    1:*/		if ( regs.CR[6].lt ) { return 0x821B29B0;  }
		/* 821B27E4h case    1:*/		return 0x821B27E8;
		  /* 821B27E8h */ case    2:  		/* rlwinm R24, R31, 3, 0, 28 */
		/* 821B27E8h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R24,regs.R31);
		/* 821B27E8h case    2:*/		return 0x821B27EC;
		  /* 821B27ECh */ case    3:  		/* li R5, 0 */
		/* 821B27ECh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B27ECh case    3:*/		return 0x821B27F0;
		  /* 821B27F0h */ case    4:  		/* mr R4, R24 */
		/* 821B27F0h case    4:*/		regs.R4 = regs.R24;
		/* 821B27F0h case    4:*/		return 0x821B27F4;
		  /* 821B27F4h */ case    5:  		/* mr R3, R14 */
		/* 821B27F4h case    5:*/		regs.R3 = regs.R14;
		/* 821B27F4h case    5:*/		return 0x821B27F8;
		  /* 821B27F8h */ case    6:  		/* bl -317376 */
		/* 821B27F8h case    6:*/		regs.LR = 0x821B27FC; return 0x82165038;
		/* 821B27F8h case    6:*/		return 0x821B27FC;
		  /* 821B27FCh */ case    7:  		/* addi R11, R31, -1 */
		/* 821B27FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821B27FCh case    7:*/		return 0x821B2800;
		  /* 821B2800h */ case    8:  		/* mr R26, R3 */
		/* 821B2800h case    8:*/		regs.R26 = regs.R3;
		/* 821B2800h case    8:*/		return 0x821B2804;
		  /* 821B2804h */ case    9:  		/* addi R11, R11, 1 */
		/* 821B2804h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B2804h case    9:*/		return 0x821B2808;
		  /* 821B2808h */ case   10:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821B2808h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821B2808h case   10:*/		return 0x821B280C;
		  /* 821B280Ch */ case   11:  		/* add R28, R11, R3 */
		/* 821B280Ch case   11:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R3);
		/* 821B280Ch case   11:*/		return 0x821B2810;
		  /* 821B2810h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 821B2810h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B2810h case   12:*/		return 0x821B2814;
		  /* 821B2814h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2814h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2814h case   13:*/		return 0x821B2818;
		  /* 821B2818h */ case   14:  		/* bc 4, CR0_EQ, 116 */
		/* 821B2818h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B288C;  }
		/* 821B2818h case   14:*/		return 0x821B281C;
		  /* 821B281Ch */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 821B281Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B281Ch case   15:*/		return 0x821B2820;
		  /* 821B2820h */ case   16:  		/* bc 12, CR0_EQ, 108 */
		/* 821B2820h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B288C;  }
		/* 821B2820h case   16:*/		return 0x821B2824;
		  /* 821B2824h */ case   17:  		/* lwz R11, <#[R27]> */
		/* 821B2824h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B2824h case   17:*/		return 0x821B2828;
		  /* 821B2828h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2828h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2828h case   18:*/		return 0x821B282C;
		  /* 821B282Ch */ case   19:  		/* addi R4, R11, -4 */
		/* 821B282Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B282Ch case   19:*/		return 0x821B2830;
		  /* 821B2830h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2830h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2830h case   20:*/		return 0x821B2834;
		  /* 821B2834h */ case   21:  		/* addi R10, R11, 3 */
		/* 821B2834h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B2834h case   21:*/		return 0x821B2838;
		  /* 821B2838h */ case   22:  		/* addic. R11, R11, -1 */
		/* 821B2838h case   22:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B2838h case   22:*/		return 0x821B283C;
		  /* 821B283Ch */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B283Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B283Ch case   23:*/		return 0x821B2840;
		  /* 821B2840h */ case   24:  		/* lwzx R29, <#[R10 + R4]> */
		/* 821B2840h case   24:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B2840h case   24:*/		return 0x821B2844;
		  /* 821B2844h */ case   25:  		/* stw R11, <#[R4 + 8]> */
		/* 821B2844h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B2844h case   25:*/		return 0x821B2848;
		  /* 821B2848h */ case   26:  		/* bc 4, CR0_EQ, 60 */
		/* 821B2848h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B2884;  }
		/* 821B2848h case   26:*/		return 0x821B284C;
		  /* 821B284Ch */ case   27:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B284Ch case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B284Ch case   27:*/		return 0x821B2850;
		  /* 821B2850h */ case   28:  		/* mr R3, R27 */
		/* 821B2850h case   28:*/		regs.R3 = regs.R27;
		/* 821B2850h case   28:*/		return 0x821B2854;
		  /* 821B2854h */ case   29:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B2854h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2854h case   29:*/		return 0x821B2858;
		  /* 821B2858h */ case   30:  		/* lwz R9, <#[R11]> */
		/* 821B2858h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2858h case   30:*/		return 0x821B285C;
		  /* 821B285Ch */ case   31:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B285Ch case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B285Ch case   31:*/		return 0x821B2860;
		  /* 821B2860h */ case   32:  		/* stw R9, <#[R10]> */
		/* 821B2860h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2860h case   32:*/		return 0x821B2864;
		  /* 821B2864h */ case   33:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B2864h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2864h case   33:*/		return 0x821B2868;
		  /* 821B2868h */ case   34:  		/* lwz R11, <#[R11]> */
		/* 821B2868h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2868h case   34:*/		return 0x821B286C;
		  /* 821B286Ch */ case   35:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B286Ch case   35:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B286Ch case   35:*/		return 0x821B2870;
		  /* 821B2870h */ case   36:  		/* stw R10, <#[R11]> */
		/* 821B2870h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2870h case   36:*/		return 0x821B2874;
		  /* 821B2874h */ case   37:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B2874h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B2874h case   37:*/		return 0x821B2878;
		  /* 821B2878h */ case   38:  		/* addi R11, R11, 4 */
		/* 821B2878h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B2878h case   38:*/		return 0x821B287C;
		  /* 821B287Ch */ case   39:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B287Ch case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B287Ch case   39:*/		return 0x821B2880;
		  /* 821B2880h */ case   40:  		/* bl -395896 */
		/* 821B2880h case   40:*/		regs.LR = 0x821B2884; return 0x82151E08;
		/* 821B2880h case   40:*/		return 0x821B2884;
	}
	return 0x821B2884;
} // Block from 821B27E0h-821B2884h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821B2884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2884);
		  /* 821B2884h */ case    0:  		/* stwu R29, <#[R28 - 8]> */
		/* 821B2884h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0xFFFFFFF8) );
		regs.R28 = (uint32)(regs.R28 + 0xFFFFFFF8);
		/* 821B2884h case    0:*/		return 0x821B2888;
		  /* 821B2888h */ case    1:  		/* b -120 */
		/* 821B2888h case    1:*/		return 0x821B2810;
		/* 821B2888h case    1:*/		return 0x821B288C;
	}
	return 0x821B288C;
} // Block from 821B2884h-821B288Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B288Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B288C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B288C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B288C);
		  /* 821B288Ch */ case    0:  		/* addi R10, R1, 84 */
		/* 821B288Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54);
		/* 821B288Ch case    0:*/		return 0x821B2890;
		  /* 821B2890h */ case    1:  		/* mr R9, R22 */
		/* 821B2890h case    1:*/		regs.R9 = regs.R22;
		/* 821B2890h case    1:*/		return 0x821B2894;
		  /* 821B2894h */ case    2:  		/* li R8, 0 */
		/* 821B2894h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B2894h case    2:*/		return 0x821B2898;
		  /* 821B2898h */ case    3:  		/* li R7, 0 */
		/* 821B2898h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B2898h case    3:*/		return 0x821B289C;
		  /* 821B289Ch */ case    4:  		/* mr R6, R31 */
		/* 821B289Ch case    4:*/		regs.R6 = regs.R31;
		/* 821B289Ch case    4:*/		return 0x821B28A0;
		  /* 821B28A0h */ case    5:  		/* mr R5, R26 */
		/* 821B28A0h case    5:*/		regs.R5 = regs.R26;
		/* 821B28A0h case    5:*/		return 0x821B28A4;
		  /* 821B28A4h */ case    6:  		/* li R4, 0 */
		/* 821B28A4h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B28A4h case    6:*/		return 0x821B28A8;
		  /* 821B28A8h */ case    7:  		/* mr R3, R14 */
		/* 821B28A8h case    7:*/		regs.R3 = regs.R14;
		/* 821B28A8h case    7:*/		return 0x821B28AC;
		  /* 821B28ACh */ case    8:  		/* bl -11908 */
		/* 821B28ACh case    8:*/		regs.LR = 0x821B28B0; return 0x821AFA28;
		/* 821B28ACh case    8:*/		return 0x821B28B0;
		  /* 821B28B0h */ case    9:  		/* mr R28, R20 */
		/* 821B28B0h case    9:*/		regs.R28 = regs.R20;
		/* 821B28B0h case    9:*/		return 0x821B28B4;
		  /* 821B28B4h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821B28B4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B28B4h case   10:*/		return 0x821B28B8;
		  /* 821B28B8h */ case   11:  		/* bc 12, CR6_EQ, 120 */
		/* 821B28B8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821B2930;  }
		/* 821B28B8h case   11:*/		return 0x821B28BC;
		  /* 821B28BCh */ case   12:  		/* mr R30, R26 */
		/* 821B28BCh case   12:*/		regs.R30 = regs.R26;
		/* 821B28BCh case   12:*/		return 0x821B28C0;
		  /* 821B28C0h */ case   13:  		/* mr R29, R31 */
		/* 821B28C0h case   13:*/		regs.R29 = regs.R31;
		/* 821B28C0h case   13:*/		return 0x821B28C4;
		  /* 821B28C4h */ case   14:  		/* lwz R4, <#[R30]> */
		/* 821B28C4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821B28C4h case   14:*/		return 0x821B28C8;
		  /* 821B28C8h */ case   15:  		/* lwz R11, <#[R4 + 16]> */
		/* 821B28C8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821B28C8h case   15:*/		return 0x821B28CC;
		  /* 821B28CCh */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821B28CCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B28CCh case   16:*/		return 0x821B28D0;
		  /* 821B28D0h */ case   17:  		/* bc 4, CR6_EQ, 64 */
		/* 821B28D0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821B2910;  }
		/* 821B28D0h case   17:*/		return 0x821B28D4;
		  /* 821B28D4h */ case   18:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B28D4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B28D4h case   18:*/		return 0x821B28D8;
		  /* 821B28D8h */ case   19:  		/* addi R10, R11, 4 */
		/* 821B28D8h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B28D8h case   19:*/		return 0x821B28DC;
		  /* 821B28DCh */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B28DCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B28DCh case   20:*/		return 0x821B28E0;
		  /* 821B28E0h */ case   21:  		/* b 12 */
		/* 821B28E0h case   21:*/		return 0x821B28EC;
		/* 821B28E0h case   21:*/		return 0x821B28E4;
		  /* 821B28E4h */ case   22:  		/* addi R10, R11, 8 */
		/* 821B28E4h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B28E4h case   22:*/		return 0x821B28E8;
		  /* 821B28E8h */ case   23:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B28E8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B28E8h case   23:*/		return 0x821B28EC;
	}
	return 0x821B28EC;
} // Block from 821B288Ch-821B28ECh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B28ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B28EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B28EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B28EC);
		  /* 821B28ECh */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821B28ECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821B28ECh case    0:*/		return 0x821B28F0;
		  /* 821B28F0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B28F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B28E4;  }
		/* 821B28F0h case    1:*/		return 0x821B28F4;
		  /* 821B28F4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B28F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B28F4h case    2:*/		return 0x821B28F8;
		  /* 821B28F8h */ case    3:  		/* li R6, 26 */
		/* 821B28F8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B28F8h case    3:*/		return 0x821B28FC;
		  /* 821B28FCh */ case    4:  		/* li R5, 20 */
		/* 821B28FCh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B28FCh case    4:*/		return 0x821B2900;
		  /* 821B2900h */ case    5:  		/* mr R3, R14 */
		/* 821B2900h case    5:*/		regs.R3 = regs.R14;
		/* 821B2900h case    5:*/		return 0x821B2904;
		  /* 821B2904h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821B2904h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2904h case    6:*/		return 0x821B2908;
		  /* 821B2908h */ case    7:  		/* bl -318576 */
		/* 821B2908h case    7:*/		regs.LR = 0x821B290C; return 0x82164C98;
		/* 821B2908h case    7:*/		return 0x821B290C;
		  /* 821B290Ch */ case    8:  		/* b 24 */
		/* 821B290Ch case    8:*/		return 0x821B2924;
		/* 821B290Ch case    8:*/		return 0x821B2910;
	}
	return 0x821B2910;
} // Block from 821B28ECh-821B2910h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B2910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2910);
		  /* 821B2910h */ case    0:  		/* lwz R11, <#[R4]> */
		/* 821B2910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821B2910h case    0:*/		return 0x821B2914;
		  /* 821B2914h */ case    1:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821B2914h case    1:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821B2914h case    1:*/		return 0x821B2918;
		  /* 821B2918h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B2918h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B2918h case    2:*/		return 0x821B291C;
		  /* 821B291Ch */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 821B291Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2924;  }
		/* 821B291Ch case    3:*/		return 0x821B2920;
		  /* 821B2920h */ case    4:  		/* addi R28, R28, 1 */
		/* 821B2920h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821B2920h case    4:*/		return 0x821B2924;
	}
	return 0x821B2924;
} // Block from 821B2910h-821B2924h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B2924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2924);
		  /* 821B2924h */ case    0:  		/* addic. R29, R29, -1 */
		/* 821B2924h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821B2924h case    0:*/		return 0x821B2928;
		  /* 821B2928h */ case    1:  		/* addi R30, R30, 8 */
		/* 821B2928h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821B2928h case    1:*/		return 0x821B292C;
		  /* 821B292Ch */ case    2:  		/* bc 4, CR0_EQ, -104 */
		/* 821B292Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B28C4;  }
		/* 821B292Ch case    2:*/		return 0x821B2930;
	}
	return 0x821B2930;
} // Block from 821B2924h-821B2930h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2930);
		  /* 821B2930h */ case    0:  		/* cmplw CR6, R28, R31 */
		/* 821B2930h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R31);
		/* 821B2930h case    0:*/		return 0x821B2934;
		  /* 821B2934h */ case    1:  		/* bc 4, CR6_EQ, 104 */
		/* 821B2934h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B299C;  }
		/* 821B2934h case    1:*/		return 0x821B2938;
		  /* 821B2938h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821B2938h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2938h case    2:*/		return 0x821B293C;
		  /* 821B293Ch */ case    3:  		/* bc 12, CR6_EQ, 96 */
		/* 821B293Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821B299C;  }
		/* 821B293Ch case    3:*/		return 0x821B2940;
		  /* 821B2940h */ case    4:  		/* mr R29, R26 */
		/* 821B2940h case    4:*/		regs.R29 = regs.R26;
		/* 821B2940h case    4:*/		return 0x821B2944;
		  /* 821B2944h */ case    5:  		/* lwz R30, <#[R29]> */
		/* 821B2944h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821B2944h case    5:*/		return 0x821B2948;
		  /* 821B2948h */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 821B2948h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B2948h case    6:*/		return 0x821B294C;
		  /* 821B294Ch */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B294Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B294Ch case    7:*/		return 0x821B2950;
		  /* 821B2950h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B2950h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B2950h case    8:*/		return 0x821B2954;
		  /* 821B2954h */ case    9:  		/* cmplwi CR6, R11, 3968 */
		/* 821B2954h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000F80);
		/* 821B2954h case    9:*/		return 0x821B2958;
		  /* 821B2958h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 821B2958h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B2990;  }
		/* 821B2958h case   10:*/		return 0x821B295C;
		  /* 821B295Ch */ case   11:  		/* lwz R11, <#[R30 + 16]> */
		/* 821B295Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821B295Ch case   11:*/		return 0x821B2960;
		  /* 821B2960h */ case   12:  		/* mr R6, R30 */
		/* 821B2960h case   12:*/		regs.R6 = regs.R30;
		/* 821B2960h case   12:*/		return 0x821B2964;
		  /* 821B2964h */ case   13:  		/* mr R4, R21 */
		/* 821B2964h case   13:*/		regs.R4 = regs.R21;
		/* 821B2964h case   13:*/		return 0x821B2968;
		  /* 821B2968h */ case   14:  		/* rlwinm R5, R11, 0, 0, 29 */
		/* 821B2968h case   14:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R11);
		/* 821B2968h case   14:*/		return 0x821B296C;
		  /* 821B296Ch */ case   15:  		/* mr R3, R14 */
		/* 821B296Ch case   15:*/		regs.R3 = regs.R14;
		/* 821B296Ch case   15:*/		return 0x821B2970;
		  /* 821B2970h */ case   16:  		/* bl 488200 */
		/* 821B2970h case   16:*/		regs.LR = 0x821B2974; return 0x82229C78;
		/* 821B2970h case   16:*/		return 0x821B2974;
		  /* 821B2974h */ case   17:  		/* li R10, 1 */
		/* 821B2974h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B2974h case   17:*/		return 0x821B2978;
		  /* 821B2978h */ case   18:  		/* li R11, 31 */
		/* 821B2978h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 821B2978h case   18:*/		return 0x821B297C;
		  /* 821B297Ch */ case   19:  		/* stb R10, <#[R1 + 80]> */
		/* 821B297Ch case   19:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821B297Ch case   19:*/		return 0x821B2980;
		  /* 821B2980h */ case   20:  		/* lwz R10, <#[R30 + 12]> */
		/* 821B2980h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B2980h case   20:*/		return 0x821B2984;
		  /* 821B2984h */ case   21:  		/* lwz R9, <#[R10 + 8]> */
		/* 821B2984h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B2984h case   21:*/		return 0x821B2988;
		  /* 821B2988h */ case   22:  		/* rlwimi R9, R11, 7, 18, 24 */
		/* 821B2988h case   22:*/		cpu::op::rlwimi<0,7,18,24>(regs,&regs.R9,regs.R11);
		/* 821B2988h case   22:*/		return 0x821B298C;
		  /* 821B298Ch */ case   23:  		/* stw R9, <#[R10 + 8]> */
		/* 821B298Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B298Ch case   23:*/		return 0x821B2990;
	}
	return 0x821B2990;
} // Block from 821B2930h-821B2990h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B2990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2990);
		  /* 821B2990h */ case    0:  		/* addic. R31, R31, -1 */
		/* 821B2990h case    0:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821B2990h case    0:*/		return 0x821B2994;
		  /* 821B2994h */ case    1:  		/* addi R29, R29, 8 */
		/* 821B2994h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 821B2994h case    1:*/		return 0x821B2998;
		  /* 821B2998h */ case    2:  		/* bc 4, CR0_EQ, -84 */
		/* 821B2998h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B2944;  }
		/* 821B2998h case    2:*/		return 0x821B299C;
	}
	return 0x821B299C;
} // Block from 821B2990h-821B299Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B299Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B299C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B299C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B299C);
		  /* 821B299Ch */ case    0:  		/* li R6, 0 */
		/* 821B299Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B299Ch case    0:*/		return 0x821B29A0;
		  /* 821B29A0h */ case    1:  		/* mr R5, R24 */
		/* 821B29A0h case    1:*/		regs.R5 = regs.R24;
		/* 821B29A0h case    1:*/		return 0x821B29A4;
		  /* 821B29A4h */ case    2:  		/* mr R4, R26 */
		/* 821B29A4h case    2:*/		regs.R4 = regs.R26;
		/* 821B29A4h case    2:*/		return 0x821B29A8;
		  /* 821B29A8h */ case    3:  		/* mr R3, R14 */
		/* 821B29A8h case    3:*/		regs.R3 = regs.R14;
		/* 821B29A8h case    3:*/		return 0x821B29AC;
		  /* 821B29ACh */ case    4:  		/* bl -285532 */
		/* 821B29ACh case    4:*/		regs.LR = 0x821B29B0; return 0x8216CE50;
		/* 821B29ACh case    4:*/		return 0x821B29B0;
	}
	return 0x821B29B0;
} // Block from 821B299Ch-821B29B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B29B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B29B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B29B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B29B0);
		  /* 821B29B0h */ case    0:  		/* lwz R10, <#[R14 + 976]> */
		/* 821B29B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x000003D0) );
		/* 821B29B0h case    0:*/		return 0x821B29B4;
		  /* 821B29B4h */ case    1:  		/* addi R9, R25, -1 */
		/* 821B29B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R25,0xFFFFFFFF);
		/* 821B29B4h case    1:*/		return 0x821B29B8;
		  /* 821B29B8h */ case    2:  		/* addi R11, R14, 972 */
		/* 821B29B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x3CC);
		/* 821B29B8h case    2:*/		return 0x821B29BC;
		  /* 821B29BCh */ case    3:  		/* andc R11, R25, R9 */
		/* 821B29BCh case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R9);
		/* 821B29BCh case    3:*/		return 0x821B29C0;
		  /* 821B29C0h */ case    4:  		/* subf R25, R11, R25 */
		/* 821B29C0h case    4:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 821B29C0h case    4:*/		return 0x821B29C4;
		  /* 821B29C4h */ case    5:  		/* stw R10, <#[R27]> */
		/* 821B29C4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821B29C4h case    5:*/		return 0x821B29C8;
		  /* 821B29C8h */ case    6:  		/* stw R27, <#[R14 + 976]> */
		/* 821B29C8h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R14 + 0x000003D0) );
		/* 821B29C8h case    6:*/		return 0x821B29CC;
		  /* 821B29CCh */ case    7:  		/* b -632 */
		/* 821B29CCh case    7:*/		return 0x821B2754;
		/* 821B29CCh case    7:*/		return 0x821B29D0;
	}
	return 0x821B29D0;
} // Block from 821B29B0h-821B29D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B29D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B29D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B29D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B29D0);
		  /* 821B29D0h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 821B29D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821B29D0h case    0:*/		return 0x821B29D4;
		  /* 821B29D4h */ case    1:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821B29D4h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821B29D4h case    1:*/		return 0x821B29D8;
		  /* 821B29D8h */ case    2:  		/* bc 12, CR0_EQ, 712 */
		/* 821B29D8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821B2CA0;  }
		/* 821B29D8h case    2:*/		return 0x821B29DC;
		  /* 821B29DCh */ case    3:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821B29DCh case    3:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B29DCh case    3:*/		return 0x821B29E0;
		  /* 821B29E0h */ case    4:  		/* bc 12, CR0_EQ, 704 */
		/* 821B29E0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821B2CA0;  }
		/* 821B29E0h case    4:*/		return 0x821B29E4;
		  /* 821B29E4h */ case    5:  		/* li R5, 36 */
		/* 821B29E4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 821B29E4h case    5:*/		return 0x821B29E8;
		  /* 821B29E8h */ case    6:  		/* li R4, 8 */
		/* 821B29E8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B29E8h case    6:*/		return 0x821B29EC;
		  /* 821B29ECh */ case    7:  		/* mr R3, R14 */
		/* 821B29ECh case    7:*/		regs.R3 = regs.R14;
		/* 821B29ECh case    7:*/		return 0x821B29F0;
		  /* 821B29F0h */ case    8:  		/* bl -319744 */
		/* 821B29F0h case    8:*/		regs.LR = 0x821B29F4; return 0x821648F0;
		/* 821B29F0h case    8:*/		return 0x821B29F4;
		  /* 821B29F4h */ case    9:  		/* addi R25, R3, 4 */
		/* 821B29F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821B29F4h case    9:*/		return 0x821B29F8;
		  /* 821B29F8h */ case   10:  		/* ori R10, R3, 1 */
		/* 821B29F8h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B29F8h case   10:*/		return 0x821B29FC;
		  /* 821B29FCh */ case   11:  		/* ori R11, R25, 1 */
		/* 821B29FCh case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R25,0x1);
		/* 821B29FCh case   11:*/		return 0x821B2A00;
		  /* 821B2A00h */ case   12:  		/* mr R27, R3 */
		/* 821B2A00h case   12:*/		regs.R27 = regs.R3;
		/* 821B2A00h case   12:*/		return 0x821B2A04;
		  /* 821B2A04h */ case   13:  		/* stw R10, <#[R3 + 4]> */
		/* 821B2A04h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B2A04h case   13:*/		return 0x821B2A08;
		  /* 821B2A08h */ case   14:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821B2A08h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B2A08h case   14:*/		return 0x821B2A0C;
		  /* 821B2A0Ch */ case   15:  		/* stw R11, <#[R3]> */
		/* 821B2A0Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B2A0Ch case   15:*/		return 0x821B2A10;
		  /* 821B2A10h */ case   16:  		/* bc 4, CR0_EQ, 36 */
		/* 821B2A10h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B2A34;  }
		/* 821B2A10h case   16:*/		return 0x821B2A14;
		  /* 821B2A14h */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2A14h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2A14h case   17:*/		return 0x821B2A18;
		  /* 821B2A18h */ case   18:  		/* addic. R11, R11, -4 */
		/* 821B2A18h case   18:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B2A18h case   18:*/		return 0x821B2A1C;
		  /* 821B2A1Ch */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821B2A1Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821B2A34;  }
		/* 821B2A1Ch case   19:*/		return 0x821B2A20;
		  /* 821B2A20h */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B2A20h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2A20h case   20:*/		return 0x821B2A24;
		  /* 821B2A24h */ case   21:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B2A24h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B2A24h case   21:*/		return 0x821B2A28;
		  /* 821B2A28h */ case   22:  		/* addi R10, R10, 1 */
		/* 821B2A28h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B2A28h case   22:*/		return 0x821B2A2C;
		  /* 821B2A2Ch */ case   23:  		/* cmplw CR6, R10, R9 */
		/* 821B2A2Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B2A2Ch case   23:*/		return 0x821B2A30;
		  /* 821B2A30h */ case   24:  		/* bc 4, CR6_GT, 20 */
		/* 821B2A30h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821B2A44;  }
		/* 821B2A30h case   24:*/		return 0x821B2A34;
	}
	return 0x821B2A34;
} // Block from 821B29D0h-821B2A34h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B2A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2A34);
		  /* 821B2A34h */ case    0:  		/* li R4, 1 */
		/* 821B2A34h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B2A34h case    0:*/		return 0x821B2A38;
		  /* 821B2A38h */ case    1:  		/* mr R3, R27 */
		/* 821B2A38h case    1:*/		regs.R3 = regs.R27;
		/* 821B2A38h case    1:*/		return 0x821B2A3C;
		  /* 821B2A3Ch */ case    2:  		/* bl -153972 */
		/* 821B2A3Ch case    2:*/		regs.LR = 0x821B2A40; return 0x8218D0C8;
		/* 821B2A3Ch case    2:*/		return 0x821B2A40;
		  /* 821B2A40h */ case    3:  		/* mr R11, R3 */
		/* 821B2A40h case    3:*/		regs.R11 = regs.R3;
		/* 821B2A40h case    3:*/		return 0x821B2A44;
	}
	return 0x821B2A44;
} // Block from 821B2A34h-821B2A44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B2A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2A44);
		  /* 821B2A44h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B2A44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2A44h case    0:*/		return 0x821B2A48;
		  /* 821B2A48h */ case    1:  		/* mr R4, R23 */
		/* 821B2A48h case    1:*/		regs.R4 = regs.R23;
		/* 821B2A48h case    1:*/		return 0x821B2A4C;
		  /* 821B2A4Ch */ case    2:  		/* mr R3, R14 */
		/* 821B2A4Ch case    2:*/		regs.R3 = regs.R14;
		/* 821B2A4Ch case    2:*/		return 0x821B2A50;
		  /* 821B2A50h */ case    3:  		/* addi R9, R10, 4 */
		/* 821B2A50h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B2A50h case    3:*/		return 0x821B2A54;
		  /* 821B2A54h */ case    4:  		/* addi R8, R10, 1 */
		/* 821B2A54h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B2A54h case    4:*/		return 0x821B2A58;
		  /* 821B2A58h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B2A58h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B2A58h case    5:*/		return 0x821B2A5C;
		  /* 821B2A5Ch */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 821B2A5Ch case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2A5Ch case    6:*/		return 0x821B2A60;
		  /* 821B2A60h */ case    7:  		/* stwx R23, <#[R10 + R11]> */
		/* 821B2A60h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B2A60h case    7:*/		return 0x821B2A64;
		  /* 821B2A64h */ case    8:  		/* bl -191116 */
		/* 821B2A64h case    8:*/		regs.LR = 0x821B2A68; return 0x82183FD8;
		/* 821B2A64h case    8:*/		return 0x821B2A68;
		  /* 821B2A68h */ case    9:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821B2A68h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821B2A68h case    9:*/		return 0x821B2A6C;
		  /* 821B2A6Ch */ case   10:  		/* mr R30, R3 */
		/* 821B2A6Ch case   10:*/		regs.R30 = regs.R3;
		/* 821B2A6Ch case   10:*/		return 0x821B2A70;
		  /* 821B2A70h */ case   11:  		/* b 132 */
		/* 821B2A70h case   11:*/		return 0x821B2AF4;
		/* 821B2A70h case   11:*/		return 0x821B2A74;
		  /* 821B2A74h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B2A74h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B2A74h case   12:*/		return 0x821B2A78;
		  /* 821B2A78h */ case   13:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821B2A78h case   13:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2A78h case   13:*/		return 0x821B2A7C;
		  /* 821B2A7Ch */ case   14:  		/* bc 12, CR0_EQ, 116 */
		/* 821B2A7Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821B2AF0;  }
		/* 821B2A7Ch case   14:*/		return 0x821B2A80;
		  /* 821B2A80h */ case   15:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821B2A80h case   15:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B2A80h case   15:*/		return 0x821B2A84;
		  /* 821B2A84h */ case   16:  		/* bc 12, CR0_EQ, 108 */
		/* 821B2A84h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B2AF0;  }
		/* 821B2A84h case   16:*/		return 0x821B2A88;
		  /* 821B2A88h */ case   17:  		/* mr R4, R31 */
		/* 821B2A88h case   17:*/		regs.R4 = regs.R31;
		/* 821B2A88h case   17:*/		return 0x821B2A8C;
		  /* 821B2A8Ch */ case   18:  		/* mr R3, R14 */
		/* 821B2A8Ch case   18:*/		regs.R3 = regs.R14;
		/* 821B2A8Ch case   18:*/		return 0x821B2A90;
		  /* 821B2A90h */ case   19:  		/* bl -191160 */
		/* 821B2A90h case   19:*/		regs.LR = 0x821B2A94; return 0x82183FD8;
		/* 821B2A90h case   19:*/		return 0x821B2A94;
		  /* 821B2A94h */ case   20:  		/* cmplw CR6, R3, R30 */
		/* 821B2A94h case   20:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821B2A94h case   20:*/		return 0x821B2A98;
		  /* 821B2A98h */ case   21:  		/* bc 4, CR6_EQ, 88 */
		/* 821B2A98h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821B2AF0;  }
		/* 821B2A98h case   21:*/		return 0x821B2A9C;
		  /* 821B2A9Ch */ case   22:  		/* lwz R11, <#[R25]> */
		/* 821B2A9Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B2A9Ch case   22:*/		return 0x821B2AA0;
		  /* 821B2AA0h */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B2AA0h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B2AA0h case   23:*/		return 0x821B2AA4;
		  /* 821B2AA4h */ case   24:  		/* bc 4, CR0_EQ, 40 */
		/* 821B2AA4h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B2ACC;  }
		/* 821B2AA4h case   24:*/		return 0x821B2AA8;
		  /* 821B2AA8h */ case   25:  		/* lwz R11, <#[R27]> */
		/* 821B2AA8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B2AA8h case   25:*/		return 0x821B2AAC;
		  /* 821B2AACh */ case   26:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2AACh case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2AACh case   26:*/		return 0x821B2AB0;
		  /* 821B2AB0h */ case   27:  		/* addic. R3, R11, -4 */
		/* 821B2AB0h case   27:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821B2AB0h case   27:*/		return 0x821B2AB4;
		  /* 821B2AB4h */ case   28:  		/* bc 12, CR0_EQ, 24 */
		/* 821B2AB4h case   28:*/		if ( regs.CR[0].eq ) { return 0x821B2ACC;  }
		/* 821B2AB4h case   28:*/		return 0x821B2AB8;
		  /* 821B2AB8h */ case   29:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B2AB8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2AB8h case   29:*/		return 0x821B2ABC;
		  /* 821B2ABCh */ case   30:  		/* lwz R10, <#[R3 + 12]> */
		/* 821B2ABCh case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B2ABCh case   30:*/		return 0x821B2AC0;
		  /* 821B2AC0h */ case   31:  		/* addi R11, R11, 1 */
		/* 821B2AC0h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B2AC0h case   31:*/		return 0x821B2AC4;
		  /* 821B2AC4h */ case   32:  		/* cmplw CR6, R11, R10 */
		/* 821B2AC4h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B2AC4h case   32:*/		return 0x821B2AC8;
		  /* 821B2AC8h */ case   33:  		/* bc 4, CR6_GT, 16 */
		/* 821B2AC8h case   33:*/		if ( !regs.CR[6].gt ) { return 0x821B2AD8;  }
		/* 821B2AC8h case   33:*/		return 0x821B2ACC;
	}
	return 0x821B2ACC;
} // Block from 821B2A44h-821B2ACCh (34 instructions)

//////////////////////////////////////////////////////
// Block at 821B2ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2ACC);
		  /* 821B2ACCh */ case    0:  		/* li R4, 1 */
		/* 821B2ACCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B2ACCh case    0:*/		return 0x821B2AD0;
		  /* 821B2AD0h */ case    1:  		/* mr R3, R27 */
		/* 821B2AD0h case    1:*/		regs.R3 = regs.R27;
		/* 821B2AD0h case    1:*/		return 0x821B2AD4;
		  /* 821B2AD4h */ case    2:  		/* bl -154124 */
		/* 821B2AD4h case    2:*/		regs.LR = 0x821B2AD8; return 0x8218D0C8;
		/* 821B2AD4h case    2:*/		return 0x821B2AD8;
	}
	return 0x821B2AD8;
} // Block from 821B2ACCh-821B2AD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2AD8);
		  /* 821B2AD8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B2AD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2AD8h case    0:*/		return 0x821B2ADC;
		  /* 821B2ADCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821B2ADCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B2ADCh case    1:*/		return 0x821B2AE0;
		  /* 821B2AE0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821B2AE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821B2AE0h case    2:*/		return 0x821B2AE4;
		  /* 821B2AE4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821B2AE4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821B2AE4h case    3:*/		return 0x821B2AE8;
		  /* 821B2AE8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821B2AE8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2AE8h case    4:*/		return 0x821B2AEC;
		  /* 821B2AECh */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821B2AECh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821B2AECh case    5:*/		return 0x821B2AF0;
	}
	return 0x821B2AF0;
} // Block from 821B2AD8h-821B2AF0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B2AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2AF0);
		  /* 821B2AF0h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B2AF0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B2AF0h case    0:*/		return 0x821B2AF4;
	}
	return 0x821B2AF4;
} // Block from 821B2AF0h-821B2AF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B2AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2AF4);
		  /* 821B2AF4h */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B2AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B2AF4h case    0:*/		return 0x821B2AF8;
		  /* 821B2AF8h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2AF8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2AF8h case    1:*/		return 0x821B2AFC;
		  /* 821B2AFCh */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2AFCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B2B0C;  }
		/* 821B2AFCh case    2:*/		return 0x821B2B00;
		  /* 821B2B00h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B2B00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2B00h case    3:*/		return 0x821B2B04;
		  /* 821B2B04h */ case    4:  		/* mr R31, R11 */
		/* 821B2B04h case    4:*/		regs.R31 = regs.R11;
		/* 821B2B04h case    4:*/		return 0x821B2B08;
		  /* 821B2B08h */ case    5:  		/* bc 4, CR6_EQ, -148 */
		/* 821B2B08h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B2A74;  }
		/* 821B2B08h case    5:*/		return 0x821B2B0C;
	}
	return 0x821B2B0C;
} // Block from 821B2AF4h-821B2B0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B2B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2B0C);
		  /* 821B2B0Ch */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821B2B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B2B0Ch case    0:*/		return 0x821B2B10;
		  /* 821B2B10h */ case    1:  		/* mr R31, R20 */
		/* 821B2B10h case    1:*/		regs.R31 = regs.R20;
		/* 821B2B10h case    1:*/		return 0x821B2B14;
		  /* 821B2B14h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2B14h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2B14h case    2:*/		return 0x821B2B18;
		  /* 821B2B18h */ case    3:  		/* bc 4, CR0_EQ, 44 */
		/* 821B2B18h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2B44;  }
		/* 821B2B18h case    3:*/		return 0x821B2B1C;
		  /* 821B2B1Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B2B1Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B2B1Ch case    4:*/		return 0x821B2B20;
		  /* 821B2B20h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821B2B20h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B2B44;  }
		/* 821B2B20h case    5:*/		return 0x821B2B24;
		  /* 821B2B24h */ case    6:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821B2B24h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821B2B24h case    6:*/		return 0x821B2B28;
		  /* 821B2B28h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2B28h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2B28h case    7:*/		return 0x821B2B2C;
		  /* 821B2B2Ch */ case    8:  		/* add R31, R11, R31 */
		/* 821B2B2Ch case    8:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821B2B2Ch case    8:*/		return 0x821B2B30;
		  /* 821B2B30h */ case    9:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B2B30h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B2B30h case    9:*/		return 0x821B2B34;
		  /* 821B2B34h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2B34h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2B34h case   10:*/		return 0x821B2B38;
		  /* 821B2B38h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821B2B38h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B2B44;  }
		/* 821B2B38h case   11:*/		return 0x821B2B3C;
		  /* 821B2B3Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821B2B3Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2B3Ch case   12:*/		return 0x821B2B40;
		  /* 821B2B40h */ case   13:  		/* bc 4, CR6_EQ, -28 */
		/* 821B2B40h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B2B24;  }
		/* 821B2B40h case   13:*/		return 0x821B2B44;
	}
	return 0x821B2B44;
} // Block from 821B2B0Ch-821B2B44h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B2B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2B44);
		  /* 821B2B44h */ case    0:  		/* rlwinm R26, R31, 3, 0, 28 */
		/* 821B2B44h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R26,regs.R31);
		/* 821B2B44h case    0:*/		return 0x821B2B48;
		  /* 821B2B48h */ case    1:  		/* li R5, 0 */
		/* 821B2B48h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B2B48h case    1:*/		return 0x821B2B4C;
		  /* 821B2B4Ch */ case    2:  		/* mr R4, R26 */
		/* 821B2B4Ch case    2:*/		regs.R4 = regs.R26;
		/* 821B2B4Ch case    2:*/		return 0x821B2B50;
		  /* 821B2B50h */ case    3:  		/* mr R3, R14 */
		/* 821B2B50h case    3:*/		regs.R3 = regs.R14;
		/* 821B2B50h case    3:*/		return 0x821B2B54;
		  /* 821B2B54h */ case    4:  		/* bl -318236 */
		/* 821B2B54h case    4:*/		regs.LR = 0x821B2B58; return 0x82165038;
		/* 821B2B54h case    4:*/		return 0x821B2B58;
		  /* 821B2B58h */ case    5:  		/* addi R11, R31, -1 */
		/* 821B2B58h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821B2B58h case    5:*/		return 0x821B2B5C;
		  /* 821B2B5Ch */ case    6:  		/* mr R28, R3 */
		/* 821B2B5Ch case    6:*/		regs.R28 = regs.R3;
		/* 821B2B5Ch case    6:*/		return 0x821B2B60;
		  /* 821B2B60h */ case    7:  		/* addi R11, R11, 1 */
		/* 821B2B60h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B2B60h case    7:*/		return 0x821B2B64;
		  /* 821B2B64h */ case    8:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821B2B64h case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821B2B64h case    8:*/		return 0x821B2B68;
		  /* 821B2B68h */ case    9:  		/* add R29, R11, R3 */
		/* 821B2B68h case    9:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R3);
		/* 821B2B68h case    9:*/		return 0x821B2B6C;
		  /* 821B2B6Ch */ case   10:  		/* lwz R11, <#[R25]> */
		/* 821B2B6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B2B6Ch case   10:*/		return 0x821B2B70;
		  /* 821B2B70h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2B70h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2B70h case   11:*/		return 0x821B2B74;
		  /* 821B2B74h */ case   12:  		/* bc 4, CR0_EQ, 128 */
		/* 821B2B74h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B2BF4;  }
		/* 821B2B74h case   12:*/		return 0x821B2B78;
		  /* 821B2B78h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821B2B78h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B2B78h case   13:*/		return 0x821B2B7C;
		  /* 821B2B7Ch */ case   14:  		/* bc 12, CR0_EQ, 120 */
		/* 821B2B7Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821B2BF4;  }
		/* 821B2B7Ch case   14:*/		return 0x821B2B80;
		  /* 821B2B80h */ case   15:  		/* lwz R11, <#[R27]> */
		/* 821B2B80h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B2B80h case   15:*/		return 0x821B2B84;
		  /* 821B2B84h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2B84h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2B84h case   16:*/		return 0x821B2B88;
		  /* 821B2B88h */ case   17:  		/* addi R4, R11, -4 */
		/* 821B2B88h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B2B88h case   17:*/		return 0x821B2B8C;
		  /* 821B2B8Ch */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2B8Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2B8Ch case   18:*/		return 0x821B2B90;
		  /* 821B2B90h */ case   19:  		/* addi R10, R11, 3 */
		/* 821B2B90h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B2B90h case   19:*/		return 0x821B2B94;
		  /* 821B2B94h */ case   20:  		/* addic. R11, R11, -1 */
		/* 821B2B94h case   20:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B2B94h case   20:*/		return 0x821B2B98;
		  /* 821B2B98h */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B2B98h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B2B98h case   21:*/		return 0x821B2B9C;
		  /* 821B2B9Ch */ case   22:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821B2B9Ch case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B2B9Ch case   22:*/		return 0x821B2BA0;
		  /* 821B2BA0h */ case   23:  		/* stw R11, <#[R4 + 8]> */
		/* 821B2BA0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B2BA0h case   23:*/		return 0x821B2BA4;
		  /* 821B2BA4h */ case   24:  		/* bc 4, CR0_EQ, 60 */
		/* 821B2BA4h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B2BE0;  }
		/* 821B2BA4h case   24:*/		return 0x821B2BA8;
		  /* 821B2BA8h */ case   25:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B2BA8h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B2BA8h case   25:*/		return 0x821B2BAC;
		  /* 821B2BACh */ case   26:  		/* mr R3, R27 */
		/* 821B2BACh case   26:*/		regs.R3 = regs.R27;
		/* 821B2BACh case   26:*/		return 0x821B2BB0;
		  /* 821B2BB0h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B2BB0h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2BB0h case   27:*/		return 0x821B2BB4;
		  /* 821B2BB4h */ case   28:  		/* lwz R9, <#[R11]> */
		/* 821B2BB4h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2BB4h case   28:*/		return 0x821B2BB8;
		  /* 821B2BB8h */ case   29:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B2BB8h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B2BB8h case   29:*/		return 0x821B2BBC;
		  /* 821B2BBCh */ case   30:  		/* stw R9, <#[R10]> */
		/* 821B2BBCh case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2BBCh case   30:*/		return 0x821B2BC0;
		  /* 821B2BC0h */ case   31:  		/* lwz R10, <#[R11]> */
		/* 821B2BC0h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2BC0h case   31:*/		return 0x821B2BC4;
		  /* 821B2BC4h */ case   32:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B2BC4h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B2BC4h case   32:*/		return 0x821B2BC8;
		  /* 821B2BC8h */ case   33:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2BC8h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2BC8h case   33:*/		return 0x821B2BCC;
		  /* 821B2BCCh */ case   34:  		/* stw R11, <#[R10]> */
		/* 821B2BCCh case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2BCCh case   34:*/		return 0x821B2BD0;
		  /* 821B2BD0h */ case   35:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B2BD0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B2BD0h case   35:*/		return 0x821B2BD4;
		  /* 821B2BD4h */ case   36:  		/* addi R11, R11, 4 */
		/* 821B2BD4h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B2BD4h case   36:*/		return 0x821B2BD8;
		  /* 821B2BD8h */ case   37:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B2BD8h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B2BD8h case   37:*/		return 0x821B2BDC;
		  /* 821B2BDCh */ case   38:  		/* bl -396756 */
		/* 821B2BDCh case   38:*/		regs.LR = 0x821B2BE0; return 0x82151E08;
		/* 821B2BDCh case   38:*/		return 0x821B2BE0;
	}
	return 0x821B2BE0;
} // Block from 821B2B44h-821B2BE0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821B2BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2BE0);
		  /* 821B2BE0h */ case    0:  		/* mr R4, R30 */
		/* 821B2BE0h case    0:*/		regs.R4 = regs.R30;
		/* 821B2BE0h case    0:*/		return 0x821B2BE4;
		  /* 821B2BE4h */ case    1:  		/* mr R3, R14 */
		/* 821B2BE4h case    1:*/		regs.R3 = regs.R14;
		/* 821B2BE4h case    1:*/		return 0x821B2BE8;
		  /* 821B2BE8h */ case    2:  		/* bl -240616 */
		/* 821B2BE8h case    2:*/		regs.LR = 0x821B2BEC; return 0x82178000;
		/* 821B2BE8h case    2:*/		return 0x821B2BEC;
		  /* 821B2BECh */ case    3:  		/* stwu R3, <#[R29 - 8]> */
		/* 821B2BECh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0xFFFFFFF8) );
		regs.R29 = (uint32)(regs.R29 + 0xFFFFFFF8);
		/* 821B2BECh case    3:*/		return 0x821B2BF0;
		  /* 821B2BF0h */ case    4:  		/* b -132 */
		/* 821B2BF0h case    4:*/		return 0x821B2B6C;
		/* 821B2BF0h case    4:*/		return 0x821B2BF4;
	}
	return 0x821B2BF4;
} // Block from 821B2BE0h-821B2BF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B2BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2BF4);
		  /* 821B2BF4h */ case    0:  		/* li R6, 36 */
		/* 821B2BF4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x24);
		/* 821B2BF4h case    0:*/		return 0x821B2BF8;
		  /* 821B2BF8h */ case    1:  		/* li R5, 8 */
		/* 821B2BF8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821B2BF8h case    1:*/		return 0x821B2BFC;
		  /* 821B2BFCh */ case    2:  		/* mr R4, R27 */
		/* 821B2BFCh case    2:*/		regs.R4 = regs.R27;
		/* 821B2BFCh case    2:*/		return 0x821B2C00;
		  /* 821B2C00h */ case    3:  		/* mr R3, R14 */
		/* 821B2C00h case    3:*/		regs.R3 = regs.R14;
		/* 821B2C00h case    3:*/		return 0x821B2C04;
		  /* 821B2C04h */ case    4:  		/* bl -286132 */
		/* 821B2C04h case    4:*/		regs.LR = 0x821B2C08; return 0x8216CE50;
		/* 821B2C04h case    4:*/		return 0x821B2C08;
		  /* 821B2C08h */ case    5:  		/* addi R10, R1, 84 */
		/* 821B2C08h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54);
		/* 821B2C08h case    5:*/		return 0x821B2C0C;
		  /* 821B2C0Ch */ case    6:  		/* mr R9, R22 */
		/* 821B2C0Ch case    6:*/		regs.R9 = regs.R22;
		/* 821B2C0Ch case    6:*/		return 0x821B2C10;
		  /* 821B2C10h */ case    7:  		/* li R8, 0 */
		/* 821B2C10h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B2C10h case    7:*/		return 0x821B2C14;
		  /* 821B2C14h */ case    8:  		/* li R7, 0 */
		/* 821B2C14h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B2C14h case    8:*/		return 0x821B2C18;
		  /* 821B2C18h */ case    9:  		/* mr R6, R31 */
		/* 821B2C18h case    9:*/		regs.R6 = regs.R31;
		/* 821B2C18h case    9:*/		return 0x821B2C1C;
		  /* 821B2C1Ch */ case   10:  		/* mr R5, R28 */
		/* 821B2C1Ch case   10:*/		regs.R5 = regs.R28;
		/* 821B2C1Ch case   10:*/		return 0x821B2C20;
		  /* 821B2C20h */ case   11:  		/* li R4, 0 */
		/* 821B2C20h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B2C20h case   11:*/		return 0x821B2C24;
		  /* 821B2C24h */ case   12:  		/* mr R3, R14 */
		/* 821B2C24h case   12:*/		regs.R3 = regs.R14;
		/* 821B2C24h case   12:*/		return 0x821B2C28;
		  /* 821B2C28h */ case   13:  		/* bl -12800 */
		/* 821B2C28h case   13:*/		regs.LR = 0x821B2C2C; return 0x821AFA28;
		/* 821B2C28h case   13:*/		return 0x821B2C2C;
		  /* 821B2C2Ch */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821B2C2Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2C2Ch case   14:*/		return 0x821B2C30;
		  /* 821B2C30h */ case   15:  		/* bc 12, CR6_EQ, 92 */
		/* 821B2C30h case   15:*/		if ( regs.CR[6].eq ) { return 0x821B2C8C;  }
		/* 821B2C30h case   15:*/		return 0x821B2C34;
		  /* 821B2C34h */ case   16:  		/* mr R30, R28 */
		/* 821B2C34h case   16:*/		regs.R30 = regs.R28;
		/* 821B2C34h case   16:*/		return 0x821B2C38;
		  /* 821B2C38h */ case   17:  		/* lwz R4, <#[R30]> */
		/* 821B2C38h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821B2C38h case   17:*/		return 0x821B2C3C;
		  /* 821B2C3Ch */ case   18:  		/* lwz R11, <#[R4 + 16]> */
		/* 821B2C3Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821B2C3Ch case   18:*/		return 0x821B2C40;
		  /* 821B2C40h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821B2C40h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2C40h case   19:*/		return 0x821B2C44;
		  /* 821B2C44h */ case   20:  		/* bc 4, CR6_EQ, 60 */
		/* 821B2C44h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821B2C80;  }
		/* 821B2C44h case   20:*/		return 0x821B2C48;
		  /* 821B2C48h */ case   21:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B2C48h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B2C48h case   21:*/		return 0x821B2C4C;
		  /* 821B2C4Ch */ case   22:  		/* addi R10, R11, 4 */
		/* 821B2C4Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B2C4Ch case   22:*/		return 0x821B2C50;
		  /* 821B2C50h */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2C50h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2C50h case   23:*/		return 0x821B2C54;
		  /* 821B2C54h */ case   24:  		/* b 12 */
		/* 821B2C54h case   24:*/		return 0x821B2C60;
		/* 821B2C54h case   24:*/		return 0x821B2C58;
		  /* 821B2C58h */ case   25:  		/* addi R10, R11, 8 */
		/* 821B2C58h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B2C58h case   25:*/		return 0x821B2C5C;
		  /* 821B2C5Ch */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2C5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2C5Ch case   26:*/		return 0x821B2C60;
	}
	return 0x821B2C60;
} // Block from 821B2BF4h-821B2C60h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B2C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2C60);
		  /* 821B2C60h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821B2C60h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821B2C60h case    0:*/		return 0x821B2C64;
		  /* 821B2C64h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B2C64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B2C58;  }
		/* 821B2C64h case    1:*/		return 0x821B2C68;
		  /* 821B2C68h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2C68h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2C68h case    2:*/		return 0x821B2C6C;
		  /* 821B2C6Ch */ case    3:  		/* li R6, 26 */
		/* 821B2C6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B2C6Ch case    3:*/		return 0x821B2C70;
		  /* 821B2C70h */ case    4:  		/* li R5, 20 */
		/* 821B2C70h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B2C70h case    4:*/		return 0x821B2C74;
		  /* 821B2C74h */ case    5:  		/* mr R3, R14 */
		/* 821B2C74h case    5:*/		regs.R3 = regs.R14;
		/* 821B2C74h case    5:*/		return 0x821B2C78;
		  /* 821B2C78h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821B2C78h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2C78h case    6:*/		return 0x821B2C7C;
		  /* 821B2C7Ch */ case    7:  		/* bl -319460 */
		/* 821B2C7Ch case    7:*/		regs.LR = 0x821B2C80; return 0x82164C98;
		/* 821B2C7Ch case    7:*/		return 0x821B2C80;
	}
	return 0x821B2C80;
} // Block from 821B2C60h-821B2C80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B2C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2C80);
		  /* 821B2C80h */ case    0:  		/* addic. R31, R31, -1 */
		/* 821B2C80h case    0:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821B2C80h case    0:*/		return 0x821B2C84;
		  /* 821B2C84h */ case    1:  		/* addi R30, R30, 8 */
		/* 821B2C84h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821B2C84h case    1:*/		return 0x821B2C88;
		  /* 821B2C88h */ case    2:  		/* bc 4, CR0_EQ, -80 */
		/* 821B2C88h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B2C38;  }
		/* 821B2C88h case    2:*/		return 0x821B2C8C;
	}
	return 0x821B2C8C;
} // Block from 821B2C80h-821B2C8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2C8C);
		  /* 821B2C8Ch */ case    0:  		/* li R6, 0 */
		/* 821B2C8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B2C8Ch case    0:*/		return 0x821B2C90;
		  /* 821B2C90h */ case    1:  		/* mr R5, R26 */
		/* 821B2C90h case    1:*/		regs.R5 = regs.R26;
		/* 821B2C90h case    1:*/		return 0x821B2C94;
		  /* 821B2C94h */ case    2:  		/* mr R4, R28 */
		/* 821B2C94h case    2:*/		regs.R4 = regs.R28;
		/* 821B2C94h case    2:*/		return 0x821B2C98;
		  /* 821B2C98h */ case    3:  		/* mr R3, R14 */
		/* 821B2C98h case    3:*/		regs.R3 = regs.R14;
		/* 821B2C98h case    3:*/		return 0x821B2C9C;
		  /* 821B2C9Ch */ case    4:  		/* bl -286284 */
		/* 821B2C9Ch case    4:*/		regs.LR = 0x821B2CA0; return 0x8216CE50;
		/* 821B2C9Ch case    4:*/		return 0x821B2CA0;
	}
	return 0x821B2CA0;
} // Block from 821B2C8Ch-821B2CA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B2CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2CA0);
		  /* 821B2CA0h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821B2CA0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821B2CA0h case    0:*/		return 0x821B2CA4;
		  /* 821B2CA4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B2CA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B2CA4h case    1:*/		return 0x821B2CA8;
		  /* 821B2CA8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2CA8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2CA8h case    2:*/		return 0x821B2CAC;
		  /* 821B2CACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2CACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2CBC;  }
		/* 821B2CACh case    3:*/		return 0x821B2CB0;
		  /* 821B2CB0h */ case    4:  		/* mr R23, R11 */
		/* 821B2CB0h case    4:*/		regs.R23 = regs.R11;
		/* 821B2CB0h case    4:*/		return 0x821B2CB4;
		  /* 821B2CB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821B2CB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2CB4h case    5:*/		return 0x821B2CB8;
		  /* 821B2CB8h */ case    6:  		/* bc 4, CR6_EQ, -2288 */
		/* 821B2CB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B23C8;  }
		/* 821B2CB8h case    6:*/		return 0x821B2CBC;
	}
	return 0x821B2CBC;
} // Block from 821B2CA0h-821B2CBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B2CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2CBC);
		  /* 821B2CBCh */ case    0:  		/* addi R5, R1, 84 */
		/* 821B2CBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821B2CBCh case    0:*/		return 0x821B2CC0;
		  /* 821B2CC0h */ case    1:  		/* mr R4, R22 */
		/* 821B2CC0h case    1:*/		regs.R4 = regs.R22;
		/* 821B2CC0h case    1:*/		return 0x821B2CC4;
		  /* 821B2CC4h */ case    2:  		/* mr R3, R14 */
		/* 821B2CC4h case    2:*/		regs.R3 = regs.R14;
		/* 821B2CC4h case    2:*/		return 0x821B2CC8;
		  /* 821B2CC8h */ case    3:  		/* bl -12512 */
		/* 821B2CC8h case    3:*/		regs.LR = 0x821B2CCC; return 0x821AFBE8;
		/* 821B2CC8h case    3:*/		return 0x821B2CCC;
		  /* 821B2CCCh */ case    4:  		/* lwz R10, <#[R21 + 28]> */
		/* 821B2CCCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000001C) );
		/* 821B2CCCh case    4:*/		return 0x821B2CD0;
		  /* 821B2CD0h */ case    5:  		/* addi R11, R21, 24 */
		/* 821B2CD0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x18);
		/* 821B2CD0h case    5:*/		return 0x821B2CD4;
		  /* 821B2CD4h */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821B2CD4h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821B2CD4h case    6:*/		return 0x821B2CD8;
		  /* 821B2CD8h */ case    7:  		/* bc 4, CR0_EQ, 524 */
		/* 821B2CD8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821B2EE4;  }
		/* 821B2CD8h case    7:*/		return 0x821B2CDC;
		  /* 821B2CDCh */ case    8:  		/* lwz R11, <#[R11]> */
		/* 821B2CDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2CDCh case    8:*/		return 0x821B2CE0;
		  /* 821B2CE0h */ case    9:  		/* b 504 */
		/* 821B2CE0h case    9:*/		return 0x821B2ED8;
		/* 821B2CE0h case    9:*/		return 0x821B2CE4;
		  /* 821B2CE4h */ case   10:  		/* mr R3, R26 */
		/* 821B2CE4h case   10:*/		regs.R3 = regs.R26;
		/* 821B2CE4h case   10:*/		return 0x821B2CE8;
		  /* 821B2CE8h */ case   11:  		/* bl -270136 */
		/* 821B2CE8h case   11:*/		regs.LR = 0x821B2CEC; return 0x82170DB0;
		/* 821B2CE8h case   11:*/		return 0x821B2CEC;
		  /* 821B2CECh */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B2CECh case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B2CECh case   12:*/		return 0x821B2CF0;
		  /* 821B2CF0h */ case   13:  		/* bc 12, CR0_EQ, 472 */
		/* 821B2CF0h case   13:*/		if ( regs.CR[0].eq ) { return 0x821B2EC8;  }
		/* 821B2CF0h case   13:*/		return 0x821B2CF4;
		  /* 821B2CF4h */ case   14:  		/* lwz R11, <#[R26 + 32]> */
		/* 821B2CF4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000020) );
		/* 821B2CF4h case   14:*/		return 0x821B2CF8;
		  /* 821B2CF8h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821B2CF8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2CF8h case   15:*/		return 0x821B2CFC;
		  /* 821B2CFCh */ case   16:  		/* bc 4, CR6_EQ, 460 */
		/* 821B2CFCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821B2EC8;  }
		/* 821B2CFCh case   16:*/		return 0x821B2D00;
		  /* 821B2D00h */ case   17:  		/* mr R4, R26 */
		/* 821B2D00h case   17:*/		regs.R4 = regs.R26;
		/* 821B2D00h case   17:*/		return 0x821B2D04;
		  /* 821B2D04h */ case   18:  		/* mr R3, R14 */
		/* 821B2D04h case   18:*/		regs.R3 = regs.R14;
		/* 821B2D04h case   18:*/		return 0x821B2D08;
		  /* 821B2D08h */ case   19:  		/* bl -91080 */
		/* 821B2D08h case   19:*/		regs.LR = 0x821B2D0C; return 0x8219C940;
		/* 821B2D08h case   19:*/		return 0x821B2D0C;
		  /* 821B2D0Ch */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B2D0Ch case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B2D0Ch case   20:*/		return 0x821B2D10;
		  /* 821B2D10h */ case   21:  		/* bc 4, CR0_EQ, 440 */
		/* 821B2D10h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821B2EC8;  }
		/* 821B2D10h case   21:*/		return 0x821B2D14;
		  /* 821B2D14h */ case   22:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821B2D14h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821B2D14h case   22:*/		return 0x821B2D18;
		  /* 821B2D18h */ case   23:  		/* li R30, 1 */
		/* 821B2D18h case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821B2D18h case   23:*/		return 0x821B2D1C;
		  /* 821B2D1Ch */ case   24:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B2D1Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B2D1Ch case   24:*/		return 0x821B2D20;
		  /* 821B2D20h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2D20h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2D20h case   25:*/		return 0x821B2D24;
		  /* 821B2D24h */ case   26:  		/* bc 4, CR0_EQ, 420 */
		/* 821B2D24h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B2EC8;  }
		/* 821B2D24h case   26:*/		return 0x821B2D28;
		  /* 821B2D28h */ case   27:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2D28h case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2D28h case   27:*/		return 0x821B2D2C;
		  /* 821B2D2Ch */ case   28:  		/* addic. R31, R11, -40 */
		/* 821B2D2Ch case   28:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821B2D2Ch case   28:*/		return 0x821B2D30;
		  /* 821B2D30h */ case   29:  		/* bc 12, CR0_EQ, 408 */
		/* 821B2D30h case   29:*/		if ( regs.CR[0].eq ) { return 0x821B2EC8;  }
		/* 821B2D30h case   29:*/		return 0x821B2D34;
		  /* 821B2D34h */ case   30:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B2D34h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B2D34h case   30:*/		return 0x821B2D38;
		  /* 821B2D38h */ case   31:  		/* rlwinm R29, R11, 25, 25, 31 */
		/* 821B2D38h case   31:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R11);
		/* 821B2D38h case   31:*/		return 0x821B2D3C;
		  /* 821B2D3Ch */ case   32:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B2D3Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B2D3Ch case   32:*/		return 0x821B2D40;
		  /* 821B2D40h */ case   33:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B2D40h case   33:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B2D40h case   33:*/		return 0x821B2D44;
		  /* 821B2D44h */ case   34:  		/* cmplw CR6, R29, R11 */
		/* 821B2D44h case   34:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B2D44h case   34:*/		return 0x821B2D48;
		  /* 821B2D48h */ case   35:  		/* bc 4, CR6_EQ, 40 */
		/* 821B2D48h case   35:*/		if ( !regs.CR[6].eq ) { return 0x821B2D70;  }
		/* 821B2D48h case   35:*/		return 0x821B2D4C;
		  /* 821B2D4Ch */ case   36:  		/* lwz R11, <#[R31 + 32]> */
		/* 821B2D4Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821B2D4Ch case   36:*/		return 0x821B2D50;
		  /* 821B2D50h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821B2D50h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2D50h case   37:*/		return 0x821B2D54;
		  /* 821B2D54h */ case   38:  		/* bc 4, CR6_EQ, 28 */
		/* 821B2D54h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821B2D70;  }
		/* 821B2D54h case   38:*/		return 0x821B2D58;
		  /* 821B2D58h */ case   39:  		/* mr R4, R31 */
		/* 821B2D58h case   39:*/		regs.R4 = regs.R31;
		/* 821B2D58h case   39:*/		return 0x821B2D5C;
		  /* 821B2D5Ch */ case   40:  		/* mr R3, R14 */
		/* 821B2D5Ch case   40:*/		regs.R3 = regs.R14;
		/* 821B2D5Ch case   40:*/		return 0x821B2D60;
		  /* 821B2D60h */ case   41:  		/* bl -91168 */
		/* 821B2D60h case   41:*/		regs.LR = 0x821B2D64; return 0x8219C940;
		/* 821B2D60h case   41:*/		return 0x821B2D64;
		  /* 821B2D64h */ case   42:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B2D64h case   42:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B2D64h case   42:*/		return 0x821B2D68;
		  /* 821B2D68h */ case   43:  		/* bc 4, CR0_EQ, 8 */
		/* 821B2D68h case   43:*/		if ( !regs.CR[0].eq ) { return 0x821B2D70;  }
		/* 821B2D68h case   43:*/		return 0x821B2D6C;
		  /* 821B2D6Ch */ case   44:  		/* addi R30, R30, 1 */
		/* 821B2D6Ch case   44:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B2D6Ch case   44:*/		return 0x821B2D70;
	}
	return 0x821B2D70;
} // Block from 821B2CBCh-821B2D70h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821B2D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2D70);
		  /* 821B2D70h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B2D70h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B2D70h case    0:*/		return 0x821B2D74;
		  /* 821B2D74h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B2D74h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B2D74h case    1:*/		return 0x821B2D78;
		  /* 821B2D78h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2D78h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2D78h case    2:*/		return 0x821B2D7C;
		  /* 821B2D7Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2D7Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2D8C;  }
		/* 821B2D7Ch case    3:*/		return 0x821B2D80;
		  /* 821B2D80h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2D80h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2D80h case    4:*/		return 0x821B2D84;
		  /* 821B2D84h */ case    5:  		/* addic. R31, R11, -40 */
		/* 821B2D84h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821B2D84h case    5:*/		return 0x821B2D88;
		  /* 821B2D88h */ case    6:  		/* bc 4, CR0_EQ, -76 */
		/* 821B2D88h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B2D3C;  }
		/* 821B2D88h case    6:*/		return 0x821B2D8C;
	}
	return 0x821B2D8C;
} // Block from 821B2D70h-821B2D8Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B2D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2D8C);
		  /* 821B2D8Ch */ case    0:  		/* cmplwi CR6, R30, 1 */
		/* 821B2D8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 821B2D8Ch case    0:*/		return 0x821B2D90;
		  /* 821B2D90h */ case    1:  		/* bc 4, CR6_GT, 312 */
		/* 821B2D90h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821B2EC8;  }
		/* 821B2D90h case    1:*/		return 0x821B2D94;
		  /* 821B2D94h */ case    2:  		/* rlwinm R27, R30, 3, 0, 28 */
		/* 821B2D94h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R27,regs.R30);
		/* 821B2D94h case    2:*/		return 0x821B2D98;
		  /* 821B2D98h */ case    3:  		/* li R5, 0 */
		/* 821B2D98h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B2D98h case    3:*/		return 0x821B2D9C;
		  /* 821B2D9Ch */ case    4:  		/* mr R4, R27 */
		/* 821B2D9Ch case    4:*/		regs.R4 = regs.R27;
		/* 821B2D9Ch case    4:*/		return 0x821B2DA0;
		  /* 821B2DA0h */ case    5:  		/* mr R3, R14 */
		/* 821B2DA0h case    5:*/		regs.R3 = regs.R14;
		/* 821B2DA0h case    5:*/		return 0x821B2DA4;
		  /* 821B2DA4h */ case    6:  		/* bl -318828 */
		/* 821B2DA4h case    6:*/		regs.LR = 0x821B2DA8; return 0x82165038;
		/* 821B2DA4h case    6:*/		return 0x821B2DA8;
		  /* 821B2DA8h */ case    7:  		/* addi R11, R30, -1 */
		/* 821B2DA8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821B2DA8h case    7:*/		return 0x821B2DAC;
		  /* 821B2DACh */ case    8:  		/* mr R28, R3 */
		/* 821B2DACh case    8:*/		regs.R28 = regs.R3;
		/* 821B2DACh case    8:*/		return 0x821B2DB0;
		  /* 821B2DB0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821B2DB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B2DB0h case    9:*/		return 0x821B2DB4;
		  /* 821B2DB4h */ case   10:  		/* mr R31, R26 */
		/* 821B2DB4h case   10:*/		regs.R31 = regs.R26;
		/* 821B2DB4h case   10:*/		return 0x821B2DB8;
		  /* 821B2DB8h */ case   11:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821B2DB8h case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821B2DB8h case   11:*/		return 0x821B2DBC;
		  /* 821B2DBCh */ case   12:  		/* add R29, R11, R3 */
		/* 821B2DBCh case   12:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R3);
		/* 821B2DBCh case   12:*/		return 0x821B2DC0;
		  /* 821B2DC0h */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B2DC0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B2DC0h case   13:*/		return 0x821B2DC4;
		  /* 821B2DC4h */ case   14:  		/* lwz R10, <#[R26 + 8]> */
		/* 821B2DC4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821B2DC4h case   14:*/		return 0x821B2DC8;
		  /* 821B2DC8h */ case   15:  		/* xor R11, R11, R10 */
		/* 821B2DC8h case   15:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B2DC8h case   15:*/		return 0x821B2DCC;
		  /* 821B2DCCh */ case   16:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821B2DCCh case   16:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B2DCCh case   16:*/		return 0x821B2DD0;
		  /* 821B2DD0h */ case   17:  		/* bc 4, CR0_EQ, 52 */
		/* 821B2DD0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821B2E04;  }
		/* 821B2DD0h case   17:*/		return 0x821B2DD4;
		  /* 821B2DD4h */ case   18:  		/* lwz R11, <#[R31 + 32]> */
		/* 821B2DD4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821B2DD4h case   18:*/		return 0x821B2DD8;
		  /* 821B2DD8h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821B2DD8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2DD8h case   19:*/		return 0x821B2DDC;
		  /* 821B2DDCh */ case   20:  		/* bc 4, CR6_EQ, 40 */
		/* 821B2DDCh case   20:*/		if ( !regs.CR[6].eq ) { return 0x821B2E04;  }
		/* 821B2DDCh case   20:*/		return 0x821B2DE0;
		  /* 821B2DE0h */ case   21:  		/* mr R4, R31 */
		/* 821B2DE0h case   21:*/		regs.R4 = regs.R31;
		/* 821B2DE0h case   21:*/		return 0x821B2DE4;
		  /* 821B2DE4h */ case   22:  		/* mr R3, R14 */
		/* 821B2DE4h case   22:*/		regs.R3 = regs.R14;
		/* 821B2DE4h case   22:*/		return 0x821B2DE8;
		  /* 821B2DE8h */ case   23:  		/* bl -91304 */
		/* 821B2DE8h case   23:*/		regs.LR = 0x821B2DEC; return 0x8219C940;
		/* 821B2DE8h case   23:*/		return 0x821B2DEC;
		  /* 821B2DECh */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B2DECh case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B2DECh case   24:*/		return 0x821B2DF0;
		  /* 821B2DF0h */ case   25:  		/* bc 4, CR0_EQ, 20 */
		/* 821B2DF0h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821B2E04;  }
		/* 821B2DF0h case   25:*/		return 0x821B2DF4;
		  /* 821B2DF4h */ case   26:  		/* mr R4, R31 */
		/* 821B2DF4h case   26:*/		regs.R4 = regs.R31;
		/* 821B2DF4h case   26:*/		return 0x821B2DF8;
		  /* 821B2DF8h */ case   27:  		/* mr R3, R14 */
		/* 821B2DF8h case   27:*/		regs.R3 = regs.R14;
		/* 821B2DF8h case   27:*/		return 0x821B2DFC;
		  /* 821B2DFCh */ case   28:  		/* bl -241148 */
		/* 821B2DFCh case   28:*/		regs.LR = 0x821B2E00; return 0x82178000;
		/* 821B2DFCh case   28:*/		return 0x821B2E00;
		  /* 821B2E00h */ case   29:  		/* stwu R3, <#[R29 - 8]> */
		/* 821B2E00h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0xFFFFFFF8) );
		regs.R29 = (uint32)(regs.R29 + 0xFFFFFFF8);
		/* 821B2E00h case   29:*/		return 0x821B2E04;
	}
	return 0x821B2E04;
} // Block from 821B2D8Ch-821B2E04h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821B2E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2E04);
		  /* 821B2E04h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B2E04h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B2E04h case    0:*/		return 0x821B2E08;
		  /* 821B2E08h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B2E08h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B2E08h case    1:*/		return 0x821B2E0C;
		  /* 821B2E0Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2E0Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2E0Ch case    2:*/		return 0x821B2E10;
		  /* 821B2E10h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2E10h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2E20;  }
		/* 821B2E10h case    3:*/		return 0x821B2E14;
		  /* 821B2E14h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2E14h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2E14h case    4:*/		return 0x821B2E18;
		  /* 821B2E18h */ case    5:  		/* addic. R31, R11, -40 */
		/* 821B2E18h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821B2E18h case    5:*/		return 0x821B2E1C;
		  /* 821B2E1Ch */ case    6:  		/* bc 4, CR0_EQ, -92 */
		/* 821B2E1Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B2DC0;  }
		/* 821B2E1Ch case    6:*/		return 0x821B2E20;
	}
	return 0x821B2E20;
} // Block from 821B2E04h-821B2E20h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B2E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2E20);
		  /* 821B2E20h */ case    0:  		/* addi R10, R1, 84 */
		/* 821B2E20h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54);
		/* 821B2E20h case    0:*/		return 0x821B2E24;
		  /* 821B2E24h */ case    1:  		/* mr R9, R22 */
		/* 821B2E24h case    1:*/		regs.R9 = regs.R22;
		/* 821B2E24h case    1:*/		return 0x821B2E28;
		  /* 821B2E28h */ case    2:  		/* li R8, 0 */
		/* 821B2E28h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B2E28h case    2:*/		return 0x821B2E2C;
		  /* 821B2E2Ch */ case    3:  		/* li R7, 0 */
		/* 821B2E2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B2E2Ch case    3:*/		return 0x821B2E30;
		  /* 821B2E30h */ case    4:  		/* mr R6, R30 */
		/* 821B2E30h case    4:*/		regs.R6 = regs.R30;
		/* 821B2E30h case    4:*/		return 0x821B2E34;
		  /* 821B2E34h */ case    5:  		/* mr R5, R28 */
		/* 821B2E34h case    5:*/		regs.R5 = regs.R28;
		/* 821B2E34h case    5:*/		return 0x821B2E38;
		  /* 821B2E38h */ case    6:  		/* li R4, 0 */
		/* 821B2E38h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B2E38h case    6:*/		return 0x821B2E3C;
		  /* 821B2E3Ch */ case    7:  		/* mr R3, R14 */
		/* 821B2E3Ch case    7:*/		regs.R3 = regs.R14;
		/* 821B2E3Ch case    7:*/		return 0x821B2E40;
		  /* 821B2E40h */ case    8:  		/* bl -13336 */
		/* 821B2E40h case    8:*/		regs.LR = 0x821B2E44; return 0x821AFA28;
		/* 821B2E40h case    8:*/		return 0x821B2E44;
		  /* 821B2E44h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 821B2E44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B2E44h case    9:*/		return 0x821B2E48;
		  /* 821B2E48h */ case   10:  		/* bc 12, CR6_EQ, 92 */
		/* 821B2E48h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B2EA4;  }
		/* 821B2E48h case   10:*/		return 0x821B2E4C;
		  /* 821B2E4Ch */ case   11:  		/* mr R31, R28 */
		/* 821B2E4Ch case   11:*/		regs.R31 = regs.R28;
		/* 821B2E4Ch case   11:*/		return 0x821B2E50;
		  /* 821B2E50h */ case   12:  		/* lwz R4, <#[R31]> */
		/* 821B2E50h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821B2E50h case   12:*/		return 0x821B2E54;
		  /* 821B2E54h */ case   13:  		/* lwz R11, <#[R4 + 16]> */
		/* 821B2E54h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821B2E54h case   13:*/		return 0x821B2E58;
		  /* 821B2E58h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821B2E58h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2E58h case   14:*/		return 0x821B2E5C;
		  /* 821B2E5Ch */ case   15:  		/* bc 4, CR6_EQ, 60 */
		/* 821B2E5Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821B2E98;  }
		/* 821B2E5Ch case   15:*/		return 0x821B2E60;
		  /* 821B2E60h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B2E60h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B2E60h case   16:*/		return 0x821B2E64;
		  /* 821B2E64h */ case   17:  		/* addi R10, R11, 4 */
		/* 821B2E64h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B2E64h case   17:*/		return 0x821B2E68;
		  /* 821B2E68h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2E68h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2E68h case   18:*/		return 0x821B2E6C;
		  /* 821B2E6Ch */ case   19:  		/* b 12 */
		/* 821B2E6Ch case   19:*/		return 0x821B2E78;
		/* 821B2E6Ch case   19:*/		return 0x821B2E70;
		  /* 821B2E70h */ case   20:  		/* addi R10, R11, 8 */
		/* 821B2E70h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821B2E70h case   20:*/		return 0x821B2E74;
		  /* 821B2E74h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2E74h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2E74h case   21:*/		return 0x821B2E78;
	}
	return 0x821B2E78;
} // Block from 821B2E20h-821B2E78h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B2E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2E78);
		  /* 821B2E78h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 821B2E78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821B2E78h case    0:*/		return 0x821B2E7C;
		  /* 821B2E7Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B2E7Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B2E70;  }
		/* 821B2E7Ch case    1:*/		return 0x821B2E80;
		  /* 821B2E80h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B2E80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B2E80h case    2:*/		return 0x821B2E84;
		  /* 821B2E84h */ case    3:  		/* li R6, 26 */
		/* 821B2E84h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821B2E84h case    3:*/		return 0x821B2E88;
		  /* 821B2E88h */ case    4:  		/* li R5, 20 */
		/* 821B2E88h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821B2E88h case    4:*/		return 0x821B2E8C;
		  /* 821B2E8Ch */ case    5:  		/* mr R3, R14 */
		/* 821B2E8Ch case    5:*/		regs.R3 = regs.R14;
		/* 821B2E8Ch case    5:*/		return 0x821B2E90;
		  /* 821B2E90h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821B2E90h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B2E90h case    6:*/		return 0x821B2E94;
		  /* 821B2E94h */ case    7:  		/* bl -319996 */
		/* 821B2E94h case    7:*/		regs.LR = 0x821B2E98; return 0x82164C98;
		/* 821B2E94h case    7:*/		return 0x821B2E98;
	}
	return 0x821B2E98;
} // Block from 821B2E78h-821B2E98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B2E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2E98);
		  /* 821B2E98h */ case    0:  		/* addic. R30, R30, -1 */
		/* 821B2E98h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821B2E98h case    0:*/		return 0x821B2E9C;
		  /* 821B2E9Ch */ case    1:  		/* addi R31, R31, 8 */
		/* 821B2E9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 821B2E9Ch case    1:*/		return 0x821B2EA0;
		  /* 821B2EA0h */ case    2:  		/* bc 4, CR0_EQ, -80 */
		/* 821B2EA0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B2E50;  }
		/* 821B2EA0h case    2:*/		return 0x821B2EA4;
	}
	return 0x821B2EA4;
} // Block from 821B2E98h-821B2EA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2EA4);
		  /* 821B2EA4h */ case    0:  		/* li R6, 0 */
		/* 821B2EA4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B2EA4h case    0:*/		return 0x821B2EA8;
		  /* 821B2EA8h */ case    1:  		/* mr R5, R27 */
		/* 821B2EA8h case    1:*/		regs.R5 = regs.R27;
		/* 821B2EA8h case    1:*/		return 0x821B2EAC;
		  /* 821B2EACh */ case    2:  		/* mr R4, R28 */
		/* 821B2EACh case    2:*/		regs.R4 = regs.R28;
		/* 821B2EACh case    2:*/		return 0x821B2EB0;
		  /* 821B2EB0h */ case    3:  		/* mr R3, R14 */
		/* 821B2EB0h case    3:*/		regs.R3 = regs.R14;
		/* 821B2EB0h case    3:*/		return 0x821B2EB4;
		  /* 821B2EB4h */ case    4:  		/* bl -286820 */
		/* 821B2EB4h case    4:*/		regs.LR = 0x821B2EB8; return 0x8216CE50;
		/* 821B2EB4h case    4:*/		return 0x821B2EB8;
		  /* 821B2EB8h */ case    5:  		/* addi R5, R1, 84 */
		/* 821B2EB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821B2EB8h case    5:*/		return 0x821B2EBC;
		  /* 821B2EBCh */ case    6:  		/* mr R4, R22 */
		/* 821B2EBCh case    6:*/		regs.R4 = regs.R22;
		/* 821B2EBCh case    6:*/		return 0x821B2EC0;
		  /* 821B2EC0h */ case    7:  		/* mr R3, R14 */
		/* 821B2EC0h case    7:*/		regs.R3 = regs.R14;
		/* 821B2EC0h case    7:*/		return 0x821B2EC4;
		  /* 821B2EC4h */ case    8:  		/* bl -13020 */
		/* 821B2EC4h case    8:*/		regs.LR = 0x821B2EC8; return 0x821AFBE8;
		/* 821B2EC4h case    8:*/		return 0x821B2EC8;
	}
	return 0x821B2EC8;
} // Block from 821B2EA4h-821B2EC8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B2EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2EC8);
		  /* 821B2EC8h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821B2EC8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821B2EC8h case    0:*/		return 0x821B2ECC;
		  /* 821B2ECCh */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B2ECCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B2ECCh case    1:*/		return 0x821B2ED0;
		  /* 821B2ED0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B2ED0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B2ED0h case    2:*/		return 0x821B2ED4;
		  /* 821B2ED4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B2ED4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B2EE4;  }
		/* 821B2ED4h case    3:*/		return 0x821B2ED8;
	}
	return 0x821B2ED8;
} // Block from 821B2EC8h-821B2ED8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B2ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2ED8);
		  /* 821B2ED8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2ED8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2ED8h case    0:*/		return 0x821B2EDC;
		  /* 821B2EDCh */ case    1:  		/* addic. R26, R11, -40 */
		/* 821B2EDCh case    1:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 821B2EDCh case    1:*/		return 0x821B2EE0;
		  /* 821B2EE0h */ case    2:  		/* bc 4, CR0_EQ, -508 */
		/* 821B2EE0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B2CE4;  }
		/* 821B2EE0h case    2:*/		return 0x821B2EE4;
	}
	return 0x821B2EE4;
} // Block from 821B2ED8h-821B2EE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2EE4);
		  /* 821B2EE4h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 821B2EE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821B2EE4h case    0:*/		return 0x821B2EE8;
		  /* 821B2EE8h */ case    1:  		/* lwz R29, <#[R1 + 116]> */
		/* 821B2EE8h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000074) );
		/* 821B2EE8h case    1:*/		return 0x821B2EEC;
		  /* 821B2EECh */ case    2:  		/* lwz R31, <#[R1 + 84]> */
		/* 821B2EECh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821B2EECh case    2:*/		return 0x821B2EF0;
		  /* 821B2EF0h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821B2EF0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2EF0h case    3:*/		return 0x821B2EF4;
		  /* 821B2EF4h */ case    4:  		/* stw R11, <#[R1 + 92]> */
		/* 821B2EF4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B2EF4h case    4:*/		return 0x821B2EF8;
		  /* 821B2EF8h */ case    5:  		/* stw R29, <#[R1 + 88]> */
		/* 821B2EF8h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000058) );
		/* 821B2EF8h case    5:*/		return 0x821B2EFC;
		  /* 821B2EFCh */ case    6:  		/* bc 12, CR6_EQ, 396 */
		/* 821B2EFCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821B3088;  }
		/* 821B2EFCh case    6:*/		return 0x821B2F00;
		  /* 821B2F00h */ case    7:  		/* addi R30, R1, 84 */
		/* 821B2F00h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x54);
		/* 821B2F00h case    7:*/		return 0x821B2F04;
		  /* 821B2F04h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 821B2F04h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B2F04h case    8:*/		return 0x821B2F08;
		  /* 821B2F08h */ case    9:  		/* bc 12, CR6_EQ, 380 */
		/* 821B2F08h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B3084;  }
		/* 821B2F08h case    9:*/		return 0x821B2F0C;
		  /* 821B2F0Ch */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821B2F0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B2F0Ch case   10:*/		return 0x821B2F10;
		  /* 821B2F10h */ case   11:  		/* rlwinm. R11, R11, 0, 3, 18 */
		/* 821B2F10h case   11:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R11,regs.R11);
		/* 821B2F10h case   11:*/		return 0x821B2F14;
		  /* 821B2F14h */ case   12:  		/* bc 4, CR0_EQ, 104 */
		/* 821B2F14h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B2F7C;  }
		/* 821B2F14h case   12:*/		return 0x821B2F18;
		  /* 821B2F18h */ case   13:  		/* lwz R10, <#[R31 + 12]> */
		/* 821B2F18h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B2F18h case   13:*/		return 0x821B2F1C;
		  /* 821B2F1Ch */ case   14:  		/* addi R11, R22, 4 */
		/* 821B2F1Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0x4);
		/* 821B2F1Ch case   14:*/		return 0x821B2F20;
		  /* 821B2F20h */ case   15:  		/* stw R10, <#[R30]> */
		/* 821B2F20h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821B2F20h case   15:*/		return 0x821B2F24;
		  /* 821B2F24h */ case   16:  		/* lwz R10, <#[R22 + 4]> */
		/* 821B2F24h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 821B2F24h case   16:*/		return 0x821B2F28;
		  /* 821B2F28h */ case   17:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821B2F28h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821B2F28h case   17:*/		return 0x821B2F2C;
		  /* 821B2F2Ch */ case   18:  		/* bc 4, CR0_EQ, 40 */
		/* 821B2F2Ch case   18:*/		if ( !regs.CR[0].eq ) { return 0x821B2F54;  }
		/* 821B2F2Ch case   18:*/		return 0x821B2F30;
		  /* 821B2F30h */ case   19:  		/* lwz R11, <#[R22]> */
		/* 821B2F30h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821B2F30h case   19:*/		return 0x821B2F34;
		  /* 821B2F34h */ case   20:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B2F34h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B2F34h case   20:*/		return 0x821B2F38;
		  /* 821B2F38h */ case   21:  		/* addic. R3, R11, -4 */
		/* 821B2F38h case   21:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821B2F38h case   21:*/		return 0x821B2F3C;
		  /* 821B2F3Ch */ case   22:  		/* bc 12, CR0_EQ, 24 */
		/* 821B2F3Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821B2F54;  }
		/* 821B2F3Ch case   22:*/		return 0x821B2F40;
		  /* 821B2F40h */ case   23:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B2F40h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2F40h case   23:*/		return 0x821B2F44;
		  /* 821B2F44h */ case   24:  		/* lwz R10, <#[R3 + 12]> */
		/* 821B2F44h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B2F44h case   24:*/		return 0x821B2F48;
		  /* 821B2F48h */ case   25:  		/* addi R11, R11, 1 */
		/* 821B2F48h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B2F48h case   25:*/		return 0x821B2F4C;
		  /* 821B2F4Ch */ case   26:  		/* cmplw CR6, R11, R10 */
		/* 821B2F4Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B2F4Ch case   26:*/		return 0x821B2F50;
		  /* 821B2F50h */ case   27:  		/* bc 4, CR6_GT, 16 */
		/* 821B2F50h case   27:*/		if ( !regs.CR[6].gt ) { return 0x821B2F60;  }
		/* 821B2F50h case   27:*/		return 0x821B2F54;
	}
	return 0x821B2F54;
} // Block from 821B2EE4h-821B2F54h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821B2F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2F54);
		  /* 821B2F54h */ case    0:  		/* li R4, 1 */
		/* 821B2F54h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B2F54h case    0:*/		return 0x821B2F58;
		  /* 821B2F58h */ case    1:  		/* mr R3, R22 */
		/* 821B2F58h case    1:*/		regs.R3 = regs.R22;
		/* 821B2F58h case    1:*/		return 0x821B2F5C;
		  /* 821B2F5Ch */ case    2:  		/* bl -155284 */
		/* 821B2F5Ch case    2:*/		regs.LR = 0x821B2F60; return 0x8218D0C8;
		/* 821B2F5Ch case    2:*/		return 0x821B2F60;
	}
	return 0x821B2F60;
} // Block from 821B2F54h-821B2F60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B2F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2F60);
		  /* 821B2F60h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B2F60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2F60h case    0:*/		return 0x821B2F64;
		  /* 821B2F64h */ case    1:  		/* addi R10, R11, 4 */
		/* 821B2F64h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B2F64h case    1:*/		return 0x821B2F68;
		  /* 821B2F68h */ case    2:  		/* addi R9, R11, 1 */
		/* 821B2F68h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821B2F68h case    2:*/		return 0x821B2F6C;
		  /* 821B2F6Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821B2F6Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821B2F6Ch case    3:*/		return 0x821B2F70;
		  /* 821B2F70h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821B2F70h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821B2F70h case    4:*/		return 0x821B2F74;
		  /* 821B2F74h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821B2F74h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821B2F74h case    5:*/		return 0x821B2F78;
		  /* 821B2F78h */ case    6:  		/* b 244 */
		/* 821B2F78h case    6:*/		return 0x821B306C;
		/* 821B2F78h case    6:*/		return 0x821B2F7C;
	}
	return 0x821B2F7C;
} // Block from 821B2F60h-821B2F7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B2F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2F7C);
		  /* 821B2F7Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821B2F7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821B2F7Ch case    0:*/		return 0x821B2F80;
		  /* 821B2F80h */ case    1:  		/* mr R10, R20 */
		/* 821B2F80h case    1:*/		regs.R10 = regs.R20;
		/* 821B2F80h case    1:*/		return 0x821B2F84;
		  /* 821B2F84h */ case    2:  		/* b 68 */
		/* 821B2F84h case    2:*/		return 0x821B2FC8;
		/* 821B2F84h case    2:*/		return 0x821B2F88;
		  /* 821B2F88h */ case    3:  		/* lwz R9, <#[R9 + 24]> */
		/* 821B2F88h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 821B2F88h case    3:*/		return 0x821B2F8C;
		  /* 821B2F8Ch */ case    4:  		/* stw R9, <#[R11]> */
		/* 821B2F8Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2F8Ch case    4:*/		return 0x821B2F90;
		  /* 821B2F90h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821B2F90h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2F90h case    5:*/		return 0x821B2F94;
		  /* 821B2F94h */ case    6:  		/* lwz R9, <#[R9]> */
		/* 821B2F94h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821B2F94h case    6:*/		return 0x821B2F98;
		  /* 821B2F98h */ case    7:  		/* rlwinm. R9, R9, 0, 3, 18 */
		/* 821B2F98h case    7:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R9,regs.R9);
		/* 821B2F98h case    7:*/		return 0x821B2F9C;
		  /* 821B2F9Ch */ case    8:  		/* lwz R9, <#[R11]> */
		/* 821B2F9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2F9Ch case    8:*/		return 0x821B2FA0;
		  /* 821B2FA0h */ case    9:  		/* bc 12, CR0_EQ, -24 */
		/* 821B2FA0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B2F88;  }
		/* 821B2FA0h case    9:*/		return 0x821B2FA4;
		  /* 821B2FA4h */ case   10:  		/* lwz R8, <#[R9]> */
		/* 821B2FA4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821B2FA4h case   10:*/		return 0x821B2FA8;
		  /* 821B2FA8h */ case   11:  		/* oris R8, R8, 16384 */
		/* 821B2FA8h case   11:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x4000);
		/* 821B2FA8h case   11:*/		return 0x821B2FAC;
		  /* 821B2FACh */ case   12:  		/* stw R8, <#[R9]> */
		/* 821B2FACh case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821B2FACh case   12:*/		return 0x821B2FB0;
		  /* 821B2FB0h */ case   13:  		/* lwz R9, <#[R11]> */
		/* 821B2FB0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B2FB0h case   13:*/		return 0x821B2FB4;
		  /* 821B2FB4h */ case   14:  		/* lwz R9, <#[R9]> */
		/* 821B2FB4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821B2FB4h case   14:*/		return 0x821B2FB8;
		  /* 821B2FB8h */ case   15:  		/* rlwinm. R9, R9, 0, 2, 2 */
		/* 821B2FB8h case   15:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R9,regs.R9);
		/* 821B2FB8h case   15:*/		return 0x821B2FBC;
		  /* 821B2FBCh */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 821B2FBCh case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B2FC4;  }
		/* 821B2FBCh case   16:*/		return 0x821B2FC0;
		  /* 821B2FC0h */ case   17:  		/* li R10, 1 */
		/* 821B2FC0h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B2FC0h case   17:*/		return 0x821B2FC4;
	}
	return 0x821B2FC4;
} // Block from 821B2F7Ch-821B2FC4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B2FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2FC4);
		  /* 821B2FC4h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B2FC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2FC4h case    0:*/		return 0x821B2FC8;
	}
	return 0x821B2FC8;
} // Block from 821B2FC4h-821B2FC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B2FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B2FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B2FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B2FC8);
		  /* 821B2FC8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B2FC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B2FC8h case    0:*/		return 0x821B2FCC;
		  /* 821B2FCCh */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 821B2FCCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B2F90;  }
		/* 821B2FCCh case    1:*/		return 0x821B2FD0;
		  /* 821B2FD0h */ case    2:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821B2FD0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821B2FD0h case    2:*/		return 0x821B2FD4;
		  /* 821B2FD4h */ case    3:  		/* bc 4, CR0_EQ, 148 */
		/* 821B2FD4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3068;  }
		/* 821B2FD4h case    3:*/		return 0x821B2FD8;
		  /* 821B2FD8h */ case    4:  		/* lwz R8, <#[R31 + 12]> */
		/* 821B2FD8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B2FD8h case    4:*/		return 0x821B2FDC;
		  /* 821B2FDCh */ case    5:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B2FDCh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B2FDCh case    5:*/		return 0x821B2FE0;
		  /* 821B2FE0h */ case    6:  		/* mr R9, R20 */
		/* 821B2FE0h case    6:*/		regs.R9 = regs.R20;
		/* 821B2FE0h case    6:*/		return 0x821B2FE4;
		  /* 821B2FE4h */ case    7:  		/* addi R11, R11, 12 */
		/* 821B2FE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821B2FE4h case    7:*/		return 0x821B2FE8;
		  /* 821B2FE8h */ case    8:  		/* addi R10, R11, 4 */
		/* 821B2FE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B2FE8h case    8:*/		return 0x821B2FEC;
		  /* 821B2FECh */ case    9:  		/* stw R8, <#[R30]> */
		/* 821B2FECh case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 821B2FECh case    9:*/		return 0x821B2FF0;
		  /* 821B2FF0h */ case   10:  		/* addi R8, R11, -12 */
		/* 821B2FF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFF4);
		/* 821B2FF0h case   10:*/		return 0x821B2FF4;
		  /* 821B2FF4h */ case   11:  		/* lwz R7, <#[R1 + 92]> */
		/* 821B2FF4h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B2FF4h case   11:*/		return 0x821B2FF8;
		  /* 821B2FF8h */ case   12:  		/* stw R7, <#[R11 + 4]> */
		/* 821B2FF8h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821B2FF8h case   12:*/		return 0x821B2FFC;
		  /* 821B2FFCh */ case   13:  		/* lwz R7, <#[R1 + 92]> */
		/* 821B2FFCh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B2FFCh case   13:*/		return 0x821B3000;
		  /* 821B3000h */ case   14:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821B3000h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821B3000h case   14:*/		return 0x821B3004;
		  /* 821B3004h */ case   15:  		/* stw R10, <#[R7 + 12]> */
		/* 821B3004h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x0000000C) );
		/* 821B3004h case   15:*/		return 0x821B3008;
		  /* 821B3008h */ case   16:  		/* stw R29, <#[R11]> */
		/* 821B3008h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3008h case   16:*/		return 0x821B300C;
		  /* 821B300Ch */ case   17:  		/* stw R8, <#[R1 + 92]> */
		/* 821B300Ch case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B300Ch case   17:*/		return 0x821B3010;
		  /* 821B3010h */ case   18:  		/* lwz R11, <#[R31]> */
		/* 821B3010h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3010h case   18:*/		return 0x821B3014;
		  /* 821B3014h */ case   19:  		/* oris R10, R11, 8192 */
		/* 821B3014h case   19:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R11,0x2000);
		/* 821B3014h case   19:*/		return 0x821B3018;
		  /* 821B3018h */ case   20:  		/* rlwinm. R11, R10, 0, 19, 31 */
		/* 821B3018h case   20:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R10);
		/* 821B3018h case   20:*/		return 0x821B301C;
		  /* 821B301Ch */ case   21:  		/* stw R10, <#[R31]> */
		/* 821B301Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821B301Ch case   21:*/		return 0x821B3020;
		  /* 821B3020h */ case   22:  		/* bc 12, CR0_EQ, 48 */
		/* 821B3020h case   22:*/		if ( regs.CR[0].eq ) { return 0x821B3050;  }
		/* 821B3020h case   22:*/		return 0x821B3024;
		  /* 821B3024h */ case   23:  		/* addi R10, R31, 24 */
		/* 821B3024h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 821B3024h case   23:*/		return 0x821B3028;
		  /* 821B3028h */ case   24:  		/* lwz R8, <#[R10]> */
		/* 821B3028h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3028h case   24:*/		return 0x821B302C;
		  /* 821B302Ch */ case   25:  		/* lhz R8, <#[R8 + 12]> */
		/* 821B302Ch case   25:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 821B302Ch case   25:*/		return 0x821B3030;
		  /* 821B3030h */ case   26:  		/* rlwinm. R8, R8, 0, 31, 31 */
		/* 821B3030h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R8);
		/* 821B3030h case   26:*/		return 0x821B3034;
		  /* 821B3034h */ case   27:  		/* bc 12, CR0_EQ, 28 */
		/* 821B3034h case   27:*/		if ( regs.CR[0].eq ) { return 0x821B3050;  }
		/* 821B3034h case   27:*/		return 0x821B3038;
		  /* 821B3038h */ case   28:  		/* lwz R8, <#[R31]> */
		/* 821B3038h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3038h case   28:*/		return 0x821B303C;
		  /* 821B303Ch */ case   29:  		/* addi R9, R9, 1 */
		/* 821B303Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821B303Ch case   29:*/		return 0x821B3040;
		  /* 821B3040h */ case   30:  		/* addi R10, R10, 4 */
		/* 821B3040h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821B3040h case   30:*/		return 0x821B3044;
		  /* 821B3044h */ case   31:  		/* rlwinm R8, R8, 0, 19, 31 */
		/* 821B3044h case   31:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R8);
		/* 821B3044h case   31:*/		return 0x821B3048;
		  /* 821B3048h */ case   32:  		/* cmplw CR6, R9, R8 */
		/* 821B3048h case   32:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821B3048h case   32:*/		return 0x821B304C;
		  /* 821B304Ch */ case   33:  		/* bc 12, CR6_LT, -36 */
		/* 821B304Ch case   33:*/		if ( regs.CR[6].lt ) { return 0x821B3028;  }
		/* 821B304Ch case   33:*/		return 0x821B3050;
	}
	return 0x821B3050;
} // Block from 821B2FC8h-821B3050h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821B3050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3050);
		  /* 821B3050h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821B3050h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821B3050h case    0:*/		return 0x821B3054;
		  /* 821B3054h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821B3054h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B306C;  }
		/* 821B3054h case    1:*/		return 0x821B3058;
		  /* 821B3058h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3058h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3058h case    2:*/		return 0x821B305C;
		  /* 821B305Ch */ case    3:  		/* ori R11, R11, 8192 */
		/* 821B305Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821B305Ch case    3:*/		return 0x821B3060;
		  /* 821B3060h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 821B3060h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3060h case    4:*/		return 0x821B3064;
		  /* 821B3064h */ case    5:  		/* b 8 */
		/* 821B3064h case    5:*/		return 0x821B306C;
		/* 821B3064h case    5:*/		return 0x821B3068;
	}
	return 0x821B3068;
} // Block from 821B3050h-821B3068h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3068);
		  /* 821B3068h */ case    0:  		/* addi R30, R31, 12 */
		/* 821B3068h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821B3068h case    0:*/		return 0x821B306C;
	}
	return 0x821B306C;
} // Block from 821B3068h-821B306Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B306Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B306C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B306C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B306C);
		  /* 821B306Ch */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821B306Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821B306Ch case    0:*/		return 0x821B3070;
		  /* 821B3070h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821B3070h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B3070h case    1:*/		return 0x821B3074;
		  /* 821B3074h */ case    2:  		/* bc 4, CR6_EQ, -360 */
		/* 821B3074h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B2F0C;  }
		/* 821B3074h case    2:*/		return 0x821B3078;
		  /* 821B3078h */ case    3:  		/* lwz R31, <#[R1 + 84]> */
		/* 821B3078h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821B3078h case    3:*/		return 0x821B307C;
		  /* 821B307Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B307Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B307Ch case    4:*/		return 0x821B3080;
		  /* 821B3080h */ case    5:  		/* bc 4, CR6_EQ, -384 */
		/* 821B3080h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B2F00;  }
		/* 821B3080h case    5:*/		return 0x821B3084;
	}
	return 0x821B3084;
} // Block from 821B306Ch-821B3084h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3084);
		  /* 821B3084h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3084h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3084h case    0:*/		return 0x821B3088;
	}
	return 0x821B3088;
} // Block from 821B3084h-821B3088h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3088);
		  /* 821B3088h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3088h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3088h case    0:*/		return 0x821B308C;
		  /* 821B308Ch */ case    1:  		/* bc 4, CR0_EQ, 1056 */
		/* 821B308Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B34AC;  }
		/* 821B308Ch case    1:*/		return 0x821B3090;
		  /* 821B3090h */ case    2:  		/* lwz R10, <#[R1 + 88]> */
		/* 821B3090h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821B3090h case    2:*/		return 0x821B3094;
		  /* 821B3094h */ case    3:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3094h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3094h case    3:*/		return 0x821B3098;
		  /* 821B3098h */ case    4:  		/* addic. R23, R10, -16 */
		/* 821B3098h case    4:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R10,0xFFFFFFF0);
		/* 821B3098h case    4:*/		return 0x821B309C;
		  /* 821B309Ch */ case    5:  		/* bc 12, CR0_EQ, 1040 */
		/* 821B309Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821B34AC;  }
		/* 821B309Ch case    5:*/		return 0x821B30A0;
		  /* 821B30A0h */ case    6:  		/* lwz R11, <#[R23 + 24]> */
		/* 821B30A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000018) );
		/* 821B30A0h case    6:*/		return 0x821B30A4;
		  /* 821B30A4h */ case    7:  		/* addi R15, R23, 24 */
		/* 821B30A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R23,0x18);
		/* 821B30A4h case    7:*/		return 0x821B30A8;
		  /* 821B30A8h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B30A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B30A8h case    8:*/		return 0x821B30AC;
		  /* 821B30ACh */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B30ACh case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B30ACh case    9:*/		return 0x821B30B0;
		  /* 821B30B0h */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 821B30B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B30B0h case   10:*/		return 0x821B30B4;
		  /* 821B30B4h */ case   11:  		/* bc 4, CR6_EQ, 244 */
		/* 821B30B4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B31A8;  }
		/* 821B30B4h case   11:*/		return 0x821B30B8;
		  /* 821B30B8h */ case   12:  		/* lwz R10, <#[R23]> */
		/* 821B30B8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821B30B8h case   12:*/		return 0x821B30BC;
		  /* 821B30BCh */ case   13:  		/* mr R31, R20 */
		/* 821B30BCh case   13:*/		regs.R31 = regs.R20;
		/* 821B30BCh case   13:*/		return 0x821B30C0;
		  /* 821B30C0h */ case   14:  		/* mr R11, R20 */
		/* 821B30C0h case   14:*/		regs.R11 = regs.R20;
		/* 821B30C0h case   14:*/		return 0x821B30C4;
		  /* 821B30C4h */ case   15:  		/* rlwinm. R10, R10, 0, 19, 31 */
		/* 821B30C4h case   15:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R10,regs.R10);
		/* 821B30C4h case   15:*/		return 0x821B30C8;
		  /* 821B30C8h */ case   16:  		/* bc 12, CR0_EQ, 52 */
		/* 821B30C8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B30FC;  }
		/* 821B30C8h case   16:*/		return 0x821B30CC;
		  /* 821B30CCh */ case   17:  		/* lwz R9, <#[R23]> */
		/* 821B30CCh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000000) );
		/* 821B30CCh case   17:*/		return 0x821B30D0;
		  /* 821B30D0h */ case   18:  		/* addi R10, R15, -4 */
		/* 821B30D0h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R15,0xFFFFFFFC);
		/* 821B30D0h case   18:*/		return 0x821B30D4;
		  /* 821B30D4h */ case   19:  		/* rlwinm R8, R9, 0, 19, 31 */
		/* 821B30D4h case   19:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R9);
		/* 821B30D4h case   19:*/		return 0x821B30D8;
		  /* 821B30D8h */ case   20:  		/* lwzu R9, <#[R10 + 4]> */
		/* 821B30D8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821B30D8h case   20:*/		return 0x821B30DC;
		  /* 821B30DCh */ case   21:  		/* addi R11, R11, 1 */
		/* 821B30DCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B30DCh case   21:*/		return 0x821B30E0;
		  /* 821B30E0h */ case   22:  		/* cmplw CR6, R11, R8 */
		/* 821B30E0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821B30E0h case   22:*/		return 0x821B30E4;
		  /* 821B30E4h */ case   23:  		/* lwz R9, <#[R9 + 8]> */
		/* 821B30E4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821B30E4h case   23:*/		return 0x821B30E8;
		  /* 821B30E8h */ case   24:  		/* rlwinm R9, R9, 18, 29, 31 */
		/* 821B30E8h case   24:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R9,regs.R9);
		/* 821B30E8h case   24:*/		return 0x821B30EC;
		  /* 821B30ECh */ case   25:  		/* add R31, R9, R31 */
		/* 821B30ECh case   25:*/		cpu::op::add<0>(regs,&regs.R31,regs.R9,regs.R31);
		/* 821B30ECh case   25:*/		return 0x821B30F0;
		  /* 821B30F0h */ case   26:  		/* bc 12, CR6_LT, -24 */
		/* 821B30F0h case   26:*/		if ( regs.CR[6].lt ) { return 0x821B30D8;  }
		/* 821B30F0h case   26:*/		return 0x821B30F4;
		  /* 821B30F4h */ case   27:  		/* cmplwi CR6, R31, 4 */
		/* 821B30F4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821B30F4h case   27:*/		return 0x821B30F8;
		  /* 821B30F8h */ case   28:  		/* bc 12, CR6_GT, 916 */
		/* 821B30F8h case   28:*/		if ( regs.CR[6].gt ) { return 0x821B348C;  }
		/* 821B30F8h case   28:*/		return 0x821B30FC;
	}
	return 0x821B30FC;
} // Block from 821B3088h-821B30FCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B30FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B30FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B30FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B30FC);
		  /* 821B30FCh */ case    0:  		/* lwz R4, <#[R23 + 20]> */
		/* 821B30FCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000014) );
		/* 821B30FCh case    0:*/		return 0x821B3100;
		  /* 821B3100h */ case    1:  		/* mr R3, R20 */
		/* 821B3100h case    1:*/		regs.R3 = regs.R20;
		/* 821B3100h case    1:*/		return 0x821B3104;
		  /* 821B3104h */ case    2:  		/* b 124 */
		/* 821B3104h case    2:*/		return 0x821B3180;
		/* 821B3104h case    2:*/		return 0x821B3108;
		  /* 821B3108h */ case    3:  		/* lwz R6, <#[R4]> */
		/* 821B3108h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000000) );
		/* 821B3108h case    3:*/		return 0x821B310C;
		  /* 821B310Ch */ case    4:  		/* addi R10, R6, 24 */
		/* 821B310Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x18);
		/* 821B310Ch case    4:*/		return 0x821B3110;
		  /* 821B3110h */ case    5:  		/* lwz R11, <#[R6 + 24]> */
		/* 821B3110h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000018) );
		/* 821B3110h case    5:*/		return 0x821B3114;
		  /* 821B3114h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B3114h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B3114h case    6:*/		return 0x821B3118;
		  /* 821B3118h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B3118h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B3118h case    7:*/		return 0x821B311C;
		  /* 821B311Ch */ case    8:  		/* cmplwi CR6, R11, 256 */
		/* 821B311Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821B311Ch case    8:*/		return 0x821B3120;
		  /* 821B3120h */ case    9:  		/* bc 4, CR6_EQ, 92 */
		/* 821B3120h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B317C;  }
		/* 821B3120h case    9:*/		return 0x821B3124;
		  /* 821B3124h */ case   10:  		/* lwz R8, <#[R6]> */
		/* 821B3124h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 821B3124h case   10:*/		return 0x821B3128;
		  /* 821B3128h */ case   11:  		/* mr R9, R20 */
		/* 821B3128h case   11:*/		regs.R9 = regs.R20;
		/* 821B3128h case   11:*/		return 0x821B312C;
		  /* 821B312Ch */ case   12:  		/* mr R11, R20 */
		/* 821B312Ch case   12:*/		regs.R11 = regs.R20;
		/* 821B312Ch case   12:*/		return 0x821B3130;
		  /* 821B3130h */ case   13:  		/* rlwinm. R7, R8, 0, 19, 31 */
		/* 821B3130h case   13:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R7,regs.R8);
		/* 821B3130h case   13:*/		return 0x821B3134;
		  /* 821B3134h */ case   14:  		/* bc 12, CR0_EQ, 44 */
		/* 821B3134h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B3160;  }
		/* 821B3134h case   14:*/		return 0x821B3138;
		  /* 821B3138h */ case   15:  		/* rlwinm R7, R8, 0, 0, 31 */
		/* 821B3138h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R8);
		/* 821B3138h case   15:*/		return 0x821B313C;
		  /* 821B313Ch */ case   16:  		/* addi R10, R10, -4 */
		/* 821B313Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821B313Ch case   16:*/		return 0x821B3140;
		  /* 821B3140h */ case   17:  		/* rlwinm R5, R7, 0, 19, 31 */
		/* 821B3140h case   17:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R5,regs.R7);
		/* 821B3140h case   17:*/		return 0x821B3144;
		  /* 821B3144h */ case   18:  		/* lwzu R7, <#[R10 + 4]> */
		/* 821B3144h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821B3144h case   18:*/		return 0x821B3148;
		  /* 821B3148h */ case   19:  		/* addi R11, R11, 1 */
		/* 821B3148h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B3148h case   19:*/		return 0x821B314C;
		  /* 821B314Ch */ case   20:  		/* cmplw CR6, R11, R5 */
		/* 821B314Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 821B314Ch case   20:*/		return 0x821B3150;
		  /* 821B3150h */ case   21:  		/* lwz R7, <#[R7 + 8]> */
		/* 821B3150h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821B3150h case   21:*/		return 0x821B3154;
		  /* 821B3154h */ case   22:  		/* rlwinm R7, R7, 18, 29, 31 */
		/* 821B3154h case   22:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R7,regs.R7);
		/* 821B3154h case   22:*/		return 0x821B3158;
		  /* 821B3158h */ case   23:  		/* add R9, R7, R9 */
		/* 821B3158h case   23:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821B3158h case   23:*/		return 0x821B315C;
		  /* 821B315Ch */ case   24:  		/* bc 12, CR6_LT, -24 */
		/* 821B315Ch case   24:*/		if ( regs.CR[6].lt ) { return 0x821B3144;  }
		/* 821B315Ch case   24:*/		return 0x821B3160;
	}
	return 0x821B3160;
} // Block from 821B30FCh-821B3160h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B3160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3160);
		  /* 821B3160h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821B3160h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821B3160h case    0:*/		return 0x821B3164;
		  /* 821B3164h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821B3164h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B317C;  }
		/* 821B3164h case    1:*/		return 0x821B3168;
		  /* 821B3168h */ case    2:  		/* rlwinm R11, R8, 19, 13, 31 */
		/* 821B3168h case    2:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R11,regs.R8);
		/* 821B3168h case    2:*/		return 0x821B316C;
		  /* 821B316Ch */ case    3:  		/* li R3, 1 */
		/* 821B316Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821B316Ch case    3:*/		return 0x821B3170;
		  /* 821B3170h */ case    4:  		/* rlwimi R8, R11, 14, 3, 17 */
		/* 821B3170h case    4:*/		cpu::op::rlwimi<0,14,3,17>(regs,&regs.R8,regs.R11);
		/* 821B3170h case    4:*/		return 0x821B3174;
		  /* 821B3174h */ case    5:  		/* rlwinm R11, R8, 0, 19, 17 */
		/* 821B3174h case    5:*/		cpu::op::rlwinm<0,0,19,17>(regs,&regs.R11,regs.R8);
		/* 821B3174h case    5:*/		return 0x821B3178;
		  /* 821B3178h */ case    6:  		/* stw R11, <#[R6]> */
		/* 821B3178h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821B3178h case    6:*/		return 0x821B317C;
	}
	return 0x821B317C;
} // Block from 821B3160h-821B317Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B317Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B317C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B317C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B317C);
		  /* 821B317Ch */ case    0:  		/* lwz R4, <#[R4 + 4]> */
		/* 821B317Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 821B317Ch case    0:*/		return 0x821B3180;
	}
	return 0x821B3180;
} // Block from 821B317Ch-821B3180h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3180);
		  /* 821B3180h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821B3180h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B3180h case    0:*/		return 0x821B3184;
		  /* 821B3184h */ case    1:  		/* bc 4, CR6_EQ, -124 */
		/* 821B3184h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3108;  }
		/* 821B3184h case    1:*/		return 0x821B3188;
		  /* 821B3188h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B3188h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B3188h case    2:*/		return 0x821B318C;
		  /* 821B318Ch */ case    3:  		/* bc 12, CR0_EQ, 676 */
		/* 821B318Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821B3430;  }
		/* 821B318Ch case    3:*/		return 0x821B3190;
		  /* 821B3190h */ case    4:  		/* lwz R11, <#[R23]> */
		/* 821B3190h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B3190h case    4:*/		return 0x821B3194;
		  /* 821B3194h */ case    5:  		/* rlwinm R10, R11, 19, 13, 31 */
		/* 821B3194h case    5:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R10,regs.R11);
		/* 821B3194h case    5:*/		return 0x821B3198;
		  /* 821B3198h */ case    6:  		/* rlwimi R11, R10, 14, 3, 17 */
		/* 821B3198h case    6:*/		cpu::op::rlwimi<0,14,3,17>(regs,&regs.R11,regs.R10);
		/* 821B3198h case    6:*/		return 0x821B319C;
		  /* 821B319Ch */ case    7:  		/* rlwinm R11, R11, 0, 19, 17 */
		/* 821B319Ch case    7:*/		cpu::op::rlwinm<0,0,19,17>(regs,&regs.R11,regs.R11);
		/* 821B319Ch case    7:*/		return 0x821B31A0;
		  /* 821B31A0h */ case    8:  		/* stw R11, <#[R23]> */
		/* 821B31A0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B31A0h case    8:*/		return 0x821B31A4;
		  /* 821B31A4h */ case    9:  		/* b 652 */
		/* 821B31A4h case    9:*/		return 0x821B3430;
		/* 821B31A4h case    9:*/		return 0x821B31A8;
	}
	return 0x821B31A8;
} // Block from 821B3180h-821B31A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B31A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B31A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B31A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B31A8);
		  /* 821B31A8h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 821B31A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821B31A8h case    0:*/		return 0x821B31AC;
		  /* 821B31ACh */ case    1:  		/* bc 4, CR6_EQ, 644 */
		/* 821B31ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3430;  }
		/* 821B31ACh case    1:*/		return 0x821B31B0;
		  /* 821B31B0h */ case    2:  		/* lwz R10, <#[R23]> */
		/* 821B31B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821B31B0h case    2:*/		return 0x821B31B4;
		  /* 821B31B4h */ case    3:  		/* mr R16, R20 */
		/* 821B31B4h case    3:*/		regs.R16 = regs.R20;
		/* 821B31B4h case    3:*/		return 0x821B31B8;
		  /* 821B31B8h */ case    4:  		/* mr R11, R20 */
		/* 821B31B8h case    4:*/		regs.R11 = regs.R20;
		/* 821B31B8h case    4:*/		return 0x821B31BC;
		  /* 821B31BCh */ case    5:  		/* rlwinm. R10, R10, 0, 19, 31 */
		/* 821B31BCh case    5:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R10,regs.R10);
		/* 821B31BCh case    5:*/		return 0x821B31C0;
		  /* 821B31C0h */ case    6:  		/* bc 12, CR0_EQ, 716 */
		/* 821B31C0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B348C;  }
		/* 821B31C0h case    6:*/		return 0x821B31C4;
		  /* 821B31C4h */ case    7:  		/* lwz R9, <#[R23]> */
		/* 821B31C4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000000) );
		/* 821B31C4h case    7:*/		return 0x821B31C8;
		  /* 821B31C8h */ case    8:  		/* addi R10, R15, -4 */
		/* 821B31C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R15,0xFFFFFFFC);
		/* 821B31C8h case    8:*/		return 0x821B31CC;
		  /* 821B31CCh */ case    9:  		/* rlwinm R8, R9, 0, 19, 31 */
		/* 821B31CCh case    9:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R9);
		/* 821B31CCh case    9:*/		return 0x821B31D0;
		  /* 821B31D0h */ case   10:  		/* lwzu R9, <#[R10 + 4]> */
		/* 821B31D0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821B31D0h case   10:*/		return 0x821B31D4;
		  /* 821B31D4h */ case   11:  		/* addi R11, R11, 1 */
		/* 821B31D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B31D4h case   11:*/		return 0x821B31D8;
		  /* 821B31D8h */ case   12:  		/* cmplw CR6, R11, R8 */
		/* 821B31D8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821B31D8h case   12:*/		return 0x821B31DC;
		  /* 821B31DCh */ case   13:  		/* lwz R9, <#[R9 + 8]> */
		/* 821B31DCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821B31DCh case   13:*/		return 0x821B31E0;
		  /* 821B31E0h */ case   14:  		/* rlwinm R9, R9, 18, 29, 31 */
		/* 821B31E0h case   14:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R9,regs.R9);
		/* 821B31E0h case   14:*/		return 0x821B31E4;
		  /* 821B31E4h */ case   15:  		/* add R16, R9, R16 */
		/* 821B31E4h case   15:*/		cpu::op::add<0>(regs,&regs.R16,regs.R9,regs.R16);
		/* 821B31E4h case   15:*/		return 0x821B31E8;
		  /* 821B31E8h */ case   16:  		/* bc 12, CR6_LT, -24 */
		/* 821B31E8h case   16:*/		if ( regs.CR[6].lt ) { return 0x821B31D0;  }
		/* 821B31E8h case   16:*/		return 0x821B31EC;
		  /* 821B31ECh */ case   17:  		/* cmplwi CR6, R16, 3 */
		/* 821B31ECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000003);
		/* 821B31ECh case   17:*/		return 0x821B31F0;
		  /* 821B31F0h */ case   18:  		/* bc 12, CR6_LT, 668 */
		/* 821B31F0h case   18:*/		if ( regs.CR[6].lt ) { return 0x821B348C;  }
		/* 821B31F0h case   18:*/		return 0x821B31F4;
		  /* 821B31F4h */ case   19:  		/* mr R17, R20 */
		/* 821B31F4h case   19:*/		regs.R17 = regs.R20;
		/* 821B31F4h case   19:*/		return 0x821B31F8;
		  /* 821B31F8h */ case   20:  		/* addi R11, R17, 6 */
		/* 821B31F8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x6);
		/* 821B31F8h case   20:*/		return 0x821B31FC;
		  /* 821B31FCh */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821B31FCh case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821B31FCh case   21:*/		return 0x821B3200;
		  /* 821B3200h */ case   22:  		/* lwzx R11, <#[R11 + R23]> */
		/* 821B3200h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821B3200h case   22:*/		return 0x821B3204;
		  /* 821B3204h */ case   23:  		/* lwz R19, <#[R11 + 4]> */
		/* 821B3204h case   23:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3204h case   23:*/		return 0x821B3208;
		  /* 821B3208h */ case   24:  		/* cmplwi CR6, R19, 0 */
		/* 821B3208h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821B3208h case   24:*/		return 0x821B320C;
		  /* 821B320Ch */ case   25:  		/* bc 12, CR6_EQ, 536 */
		/* 821B320Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x821B3424;  }
		/* 821B320Ch case   25:*/		return 0x821B3210;
		  /* 821B3210h */ case   26:  		/* lwz R18, <#[R19 + 16]> */
		/* 821B3210h case   26:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R19 + 0x00000010) );
		/* 821B3210h case   26:*/		return 0x821B3214;
		  /* 821B3214h */ case   27:  		/* cmplwi CR6, R18, 0 */
		/* 821B3214h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821B3214h case   27:*/		return 0x821B3218;
		  /* 821B3218h */ case   28:  		/* bc 12, CR6_EQ, 512 */
		/* 821B3218h case   28:*/		if ( regs.CR[6].eq ) { return 0x821B3418;  }
		/* 821B3218h case   28:*/		return 0x821B321C;
		  /* 821B321Ch */ case   29:  		/* lwz R11, <#[R19]> */
		/* 821B321Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821B321Ch case   29:*/		return 0x821B3220;
		  /* 821B3220h */ case   30:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B3220h case   30:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B3220h case   30:*/		return 0x821B3224;
		  /* 821B3224h */ case   31:  		/* bc 12, CR0_EQ, 500 */
		/* 821B3224h case   31:*/		if ( regs.CR[0].eq ) { return 0x821B3418;  }
		/* 821B3224h case   31:*/		return 0x821B3228;
		  /* 821B3228h */ case   32:  		/* lwz R11, <#[R18 + 8]> */
		/* 821B3228h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821B3228h case   32:*/		return 0x821B322C;
		  /* 821B322Ch */ case   33:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B322Ch case   33:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B322Ch case   33:*/		return 0x821B3230;
		  /* 821B3230h */ case   34:  		/* cmplwi CR6, R11, 128 */
		/* 821B3230h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821B3230h case   34:*/		return 0x821B3234;
		  /* 821B3234h */ case   35:  		/* bc 4, CR6_EQ, 484 */
		/* 821B3234h case   35:*/		if ( !regs.CR[6].eq ) { return 0x821B3418;  }
		/* 821B3234h case   35:*/		return 0x821B3238;
		  /* 821B3238h */ case   36:  		/* lwz R11, <#[R23]> */
		/* 821B3238h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B3238h case   36:*/		return 0x821B323C;
		  /* 821B323Ch */ case   37:  		/* addi R22, R17, 1 */
		/* 821B323Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R17,0x1);
		/* 821B323Ch case   37:*/		return 0x821B3240;
		  /* 821B3240h */ case   38:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B3240h case   38:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B3240h case   38:*/		return 0x821B3244;
		  /* 821B3244h */ case   39:  		/* cmplw CR6, R22, R11 */
		/* 821B3244h case   39:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 821B3244h case   39:*/		return 0x821B3248;
		  /* 821B3248h */ case   40:  		/* bc 4, CR6_LT, 464 */
		/* 821B3248h case   40:*/		if ( !regs.CR[6].lt ) { return 0x821B3418;  }
		/* 821B3248h case   40:*/		return 0x821B324C;
		  /* 821B324Ch */ case   41:  		/* addi R11, R22, 6 */
		/* 821B324Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0x6);
		/* 821B324Ch case   41:*/		return 0x821B3250;
		  /* 821B3250h */ case   42:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821B3250h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821B3250h case   42:*/		return 0x821B3254;
		  /* 821B3254h */ case   43:  		/* add R20, R11, R23 */
		/* 821B3254h case   43:*/		cpu::op::add<0>(regs,&regs.R20,regs.R11,regs.R23);
		/* 821B3254h case   43:*/		return 0x821B3258;
		  /* 821B3258h */ case   44:  		/* lwz R11, <#[R20]> */
		/* 821B3258h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821B3258h case   44:*/		return 0x821B325C;
		  /* 821B325Ch */ case   45:  		/* lwz R21, <#[R11 + 4]> */
		/* 821B325Ch case   45:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + 0x00000004) );
		/* 821B325Ch case   45:*/		return 0x821B3260;
		  /* 821B3260h */ case   46:  		/* cmplwi CR6, R21, 0 */
		/* 821B3260h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821B3260h case   46:*/		return 0x821B3264;
		  /* 821B3264h */ case   47:  		/* bc 12, CR6_EQ, 420 */
		/* 821B3264h case   47:*/		if ( regs.CR[6].eq ) { return 0x821B3408;  }
		/* 821B3264h case   47:*/		return 0x821B3268;
		  /* 821B3268h */ case   48:  		/* lwz R11, <#[R21 + 16]> */
		/* 821B3268h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821B3268h case   48:*/		return 0x821B326C;
		  /* 821B326Ch */ case   49:  		/* cmplwi CR6, R11, 0 */
		/* 821B326Ch case   49:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B326Ch case   49:*/		return 0x821B3270;
		  /* 821B3270h */ case   50:  		/* bc 12, CR6_EQ, 400 */
		/* 821B3270h case   50:*/		if ( regs.CR[6].eq ) { return 0x821B3400;  }
		/* 821B3270h case   50:*/		return 0x821B3274;
		  /* 821B3274h */ case   51:  		/* lwz R10, <#[R21]> */
		/* 821B3274h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821B3274h case   51:*/		return 0x821B3278;
		  /* 821B3278h */ case   52:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821B3278h case   52:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821B3278h case   52:*/		return 0x821B327C;
		  /* 821B327Ch */ case   53:  		/* bc 12, CR0_EQ, 388 */
		/* 821B327Ch case   53:*/		if ( regs.CR[0].eq ) { return 0x821B3400;  }
		/* 821B327Ch case   53:*/		return 0x821B3280;
		  /* 821B3280h */ case   54:  		/* cmplw CR6, R21, R19 */
		/* 821B3280h case   54:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R19);
		/* 821B3280h case   54:*/		return 0x821B3284;
		  /* 821B3284h */ case   55:  		/* bc 12, CR6_EQ, 380 */
		/* 821B3284h case   55:*/		if ( regs.CR[6].eq ) { return 0x821B3400;  }
		/* 821B3284h case   55:*/		return 0x821B3288;
		  /* 821B3288h */ case   56:  		/* cmplw CR6, R18, R11 */
		/* 821B3288h case   56:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 821B3288h case   56:*/		return 0x821B328C;
		  /* 821B328Ch */ case   57:  		/* bc 4, CR6_EQ, 372 */
		/* 821B328Ch case   57:*/		if ( !regs.CR[6].eq ) { return 0x821B3400;  }
		/* 821B328Ch case   57:*/		return 0x821B3290;
		  /* 821B3290h */ case   58:  		/* lwz R24, <#[R18 + 4]> */
		/* 821B3290h case   58:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R18 + 0x00000004) );
		/* 821B3290h case   58:*/		return 0x821B3294;
		  /* 821B3294h */ case   59:  		/* cmplwi CR6, R24, 0 */
		/* 821B3294h case   59:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821B3294h case   59:*/		return 0x821B3298;
		  /* 821B3298h */ case   60:  		/* bc 12, CR6_EQ, 360 */
		/* 821B3298h case   60:*/		if ( regs.CR[6].eq ) { return 0x821B3400;  }
		/* 821B3298h case   60:*/		return 0x821B329C;
		  /* 821B329Ch */ case   61:  		/* lwz R25, <#[R24 + 16]> */
		/* 821B329Ch case   61:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000010) );
		/* 821B329Ch case   61:*/		return 0x821B32A0;
		  /* 821B32A0h */ case   62:  		/* cmplwi CR6, R25, 0 */
		/* 821B32A0h case   62:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821B32A0h case   62:*/		return 0x821B32A4;
		  /* 821B32A4h */ case   63:  		/* bc 12, CR6_EQ, 160 */
		/* 821B32A4h case   63:*/		if ( regs.CR[6].eq ) { return 0x821B3344;  }
		/* 821B32A4h case   63:*/		return 0x821B32A8;
		  /* 821B32A8h */ case   64:  		/* lwz R11, <#[R24]> */
		/* 821B32A8h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B32A8h case   64:*/		return 0x821B32AC;
		  /* 821B32ACh */ case   65:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B32ACh case   65:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B32ACh case   65:*/		return 0x821B32B0;
		  /* 821B32B0h */ case   66:  		/* bc 12, CR0_EQ, 148 */
		/* 821B32B0h case   66:*/		if ( regs.CR[0].eq ) { return 0x821B3344;  }
		/* 821B32B0h case   66:*/		return 0x821B32B4;
		  /* 821B32B4h */ case   67:  		/* lwz R11, <#[R25 + 8]> */
		/* 821B32B4h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821B32B4h case   67:*/		return 0x821B32B8;
		  /* 821B32B8h */ case   68:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B32B8h case   68:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B32B8h case   68:*/		return 0x821B32BC;
		  /* 821B32BCh */ case   69:  		/* cmplwi CR6, R11, 128 */
		/* 821B32BCh case   69:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821B32BCh case   69:*/		return 0x821B32C0;
		  /* 821B32C0h */ case   70:  		/* bc 4, CR6_EQ, 132 */
		/* 821B32C0h case   70:*/		if ( !regs.CR[6].eq ) { return 0x821B3344;  }
		/* 821B32C0h case   70:*/		return 0x821B32C4;
		  /* 821B32C4h */ case   71:  		/* lwz R11, <#[R23]> */
		/* 821B32C4h case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B32C4h case   71:*/		return 0x821B32C8;
		  /* 821B32C8h */ case   72:  		/* li R26, 0 */
		/* 821B32C8h case   72:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821B32C8h case   72:*/		return 0x821B32CC;
		  /* 821B32CCh */ case   73:  		/* rlwinm. R11, R11, 0, 19, 31 */
		/* 821B32CCh case   73:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B32CCh case   73:*/		return 0x821B32D0;
		  /* 821B32D0h */ case   74:  		/* bc 12, CR0_EQ, 116 */
		/* 821B32D0h case   74:*/		if ( regs.CR[0].eq ) { return 0x821B3344;  }
		/* 821B32D0h case   74:*/		return 0x821B32D4;
		  /* 821B32D4h */ case   75:  		/* mr R27, R15 */
		/* 821B32D4h case   75:*/		regs.R27 = regs.R15;
		/* 821B32D4h case   75:*/		return 0x821B32D8;
		  /* 821B32D8h */ case   76:  		/* lwz R10, <#[R27]> */
		/* 821B32D8h case   76:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821B32D8h case   76:*/		return 0x821B32DC;
		  /* 821B32DCh */ case   77:  		/* lwz R11, <#[R25]> */
		/* 821B32DCh case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B32DCh case   77:*/		return 0x821B32E0;
		  /* 821B32E0h */ case   78:  		/* cmplwi CR6, R11, 0 */
		/* 821B32E0h case   78:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B32E0h case   78:*/		return 0x821B32E4;
		  /* 821B32E4h */ case   79:  		/* bc 12, CR6_EQ, 32 */
		/* 821B32E4h case   79:*/		if ( regs.CR[6].eq ) { return 0x821B3304;  }
		/* 821B32E4h case   79:*/		return 0x821B32E8;
		  /* 821B32E8h */ case   80:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B32E8h case   80:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B32E8h case   80:*/		return 0x821B32EC;
		  /* 821B32ECh */ case   81:  		/* cmplw CR6, R9, R10 */
		/* 821B32ECh case   81:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821B32ECh case   81:*/		return 0x821B32F0;
		  /* 821B32F0h */ case   82:  		/* bc 12, CR6_EQ, 12 */
		/* 821B32F0h case   82:*/		if ( regs.CR[6].eq ) { return 0x821B32FC;  }
		/* 821B32F0h case   82:*/		return 0x821B32F4;
		  /* 821B32F4h */ case   83:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B32F4h case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B32F4h case   83:*/		return 0x821B32F8;
		  /* 821B32F8h */ case   84:  		/* b -24 */
		/* 821B32F8h case   84:*/		return 0x821B32E0;
		/* 821B32F8h case   84:*/		return 0x821B32FC;
	}
	return 0x821B32FC;
} // Block from 821B31A8h-821B32FCh (85 instructions)

//////////////////////////////////////////////////////
// Block at 821B32FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B32FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B32FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B32FC);
		  /* 821B32FCh */ case    0:  		/* li R11, 1 */
		/* 821B32FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B32FCh case    0:*/		return 0x821B3300;
		  /* 821B3300h */ case    1:  		/* b 8 */
		/* 821B3300h case    1:*/		return 0x821B3308;
		/* 821B3300h case    1:*/		return 0x821B3304;
	}
	return 0x821B3304;
} // Block from 821B32FCh-821B3304h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3304);
		  /* 821B3304h */ case    0:  		/* li R11, 0 */
		/* 821B3304h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B3304h case    0:*/		return 0x821B3308;
	}
	return 0x821B3308;
} // Block from 821B3304h-821B3308h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3308);
		  /* 821B3308h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B3308h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B3308h case    0:*/		return 0x821B330C;
		  /* 821B330Ch */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 821B330Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821B332C;  }
		/* 821B330Ch case    1:*/		return 0x821B3310;
		  /* 821B3310h */ case    2:  		/* cmplwi CR6, R16, 3 */
		/* 821B3310h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000003);
		/* 821B3310h case    2:*/		return 0x821B3314;
		  /* 821B3314h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 821B3314h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B334C;  }
		/* 821B3314h case    3:*/		return 0x821B3318;
		  /* 821B3318h */ case    4:  		/* li R6, 41 */
		/* 821B3318h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x29);
		/* 821B3318h case    4:*/		return 0x821B331C;
		  /* 821B331Ch */ case    5:  		/* mr R5, R25 */
		/* 821B331Ch case    5:*/		regs.R5 = regs.R25;
		/* 821B331Ch case    5:*/		return 0x821B3320;
		  /* 821B3320h */ case    6:  		/* mr R4, R23 */
		/* 821B3320h case    6:*/		regs.R4 = regs.R23;
		/* 821B3320h case    6:*/		return 0x821B3324;
		  /* 821B3324h */ case    7:  		/* mr R3, R14 */
		/* 821B3324h case    7:*/		regs.R3 = regs.R14;
		/* 821B3324h case    7:*/		return 0x821B3328;
		  /* 821B3328h */ case    8:  		/* bl -91928 */
		/* 821B3328h case    8:*/		regs.LR = 0x821B332C; return 0x8219CC10;
		/* 821B3328h case    8:*/		return 0x821B332C;
	}
	return 0x821B332C;
} // Block from 821B3308h-821B332Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B332Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B332C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B332C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B332C);
		  /* 821B332Ch */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821B332Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B332Ch case    0:*/		return 0x821B3330;
		  /* 821B3330h */ case    1:  		/* addi R26, R26, 1 */
		/* 821B3330h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821B3330h case    1:*/		return 0x821B3334;
		  /* 821B3334h */ case    2:  		/* addi R27, R27, 4 */
		/* 821B3334h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821B3334h case    2:*/		return 0x821B3338;
		  /* 821B3338h */ case    3:  		/* rlwinm R8, R11, 0, 19, 31 */
		/* 821B3338h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R11);
		/* 821B3338h case    3:*/		return 0x821B333C;
		  /* 821B333Ch */ case    4:  		/* cmplw CR6, R26, R8 */
		/* 821B333Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R8);
		/* 821B333Ch case    4:*/		return 0x821B3340;
		  /* 821B3340h */ case    5:  		/* bc 12, CR6_LT, -104 */
		/* 821B3340h case    5:*/		if ( regs.CR[6].lt ) { return 0x821B32D8;  }
		/* 821B3340h case    5:*/		return 0x821B3344;
	}
	return 0x821B3344;
} // Block from 821B332Ch-821B3344h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3344);
		  /* 821B3344h */ case    0:  		/* lwz R24, <#[R24 + 8]> */
		/* 821B3344h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000008) );
		/* 821B3344h case    0:*/		return 0x821B3348;
		  /* 821B3348h */ case    1:  		/* b -180 */
		/* 821B3348h case    1:*/		return 0x821B3294;
		/* 821B3348h case    1:*/		return 0x821B334C;
	}
	return 0x821B334C;
} // Block from 821B3344h-821B334Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B334Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B334C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B334C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B334C);
		  /* 821B334Ch */ case    0:  		/* lwz R28, <#[R25 + 4]> */
		/* 821B334Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000004) );
		/* 821B334Ch case    0:*/		return 0x821B3350;
		  /* 821B3350h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821B3350h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821B3350h case    1:*/		return 0x821B3354;
		  /* 821B3354h */ case    2:  		/* bc 12, CR6_EQ, -40 */
		/* 821B3354h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B332C;  }
		/* 821B3354h case    2:*/		return 0x821B3358;
		  /* 821B3358h */ case    3:  		/* lwz R29, <#[R28 + 16]> */
		/* 821B3358h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000010) );
		/* 821B3358h case    3:*/		return 0x821B335C;
		  /* 821B335Ch */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821B335Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B335Ch case    4:*/		return 0x821B3360;
		  /* 821B3360h */ case    5:  		/* bc 12, CR6_EQ, 152 */
		/* 821B3360h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B33F8;  }
		/* 821B3360h case    5:*/		return 0x821B3364;
		  /* 821B3364h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821B3364h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B3364h case    6:*/		return 0x821B3368;
		  /* 821B3368h */ case    7:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B3368h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B3368h case    7:*/		return 0x821B336C;
		  /* 821B336Ch */ case    8:  		/* bc 12, CR0_EQ, 140 */
		/* 821B336Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821B33F8;  }
		/* 821B336Ch case    8:*/		return 0x821B3370;
		  /* 821B3370h */ case    9:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B3370h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B3370h case    9:*/		return 0x821B3374;
		  /* 821B3374h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B3374h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B3374h case   10:*/		return 0x821B3378;
		  /* 821B3378h */ case   11:  		/* cmplwi CR6, R11, 128 */
		/* 821B3378h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821B3378h case   11:*/		return 0x821B337C;
		  /* 821B337Ch */ case   12:  		/* bc 4, CR6_EQ, 124 */
		/* 821B337Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821B33F8;  }
		/* 821B337Ch case   12:*/		return 0x821B3380;
		  /* 821B3380h */ case   13:  		/* lwz R11, <#[R23]> */
		/* 821B3380h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B3380h case   13:*/		return 0x821B3384;
		  /* 821B3384h */ case   14:  		/* li R30, 0 */
		/* 821B3384h case   14:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B3384h case   14:*/		return 0x821B3388;
		  /* 821B3388h */ case   15:  		/* rlwinm. R11, R11, 0, 19, 31 */
		/* 821B3388h case   15:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B3388h case   15:*/		return 0x821B338C;
		  /* 821B338Ch */ case   16:  		/* bc 12, CR0_EQ, 108 */
		/* 821B338Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x821B33F8;  }
		/* 821B338Ch case   16:*/		return 0x821B3390;
		  /* 821B3390h */ case   17:  		/* mr R31, R15 */
		/* 821B3390h case   17:*/		regs.R31 = regs.R15;
		/* 821B3390h case   17:*/		return 0x821B3394;
		  /* 821B3394h */ case   18:  		/* lwz R10, <#[R31]> */
		/* 821B3394h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3394h case   18:*/		return 0x821B3398;
		  /* 821B3398h */ case   19:  		/* lwz R11, <#[R29]> */
		/* 821B3398h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B3398h case   19:*/		return 0x821B339C;
		  /* 821B339Ch */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821B339Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B339Ch case   20:*/		return 0x821B33A0;
		  /* 821B33A0h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 821B33A0h case   21:*/		if ( regs.CR[6].eq ) { return 0x821B33C0;  }
		/* 821B33A0h case   21:*/		return 0x821B33A4;
		  /* 821B33A4h */ case   22:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B33A4h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B33A4h case   22:*/		return 0x821B33A8;
		  /* 821B33A8h */ case   23:  		/* cmplw CR6, R9, R10 */
		/* 821B33A8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821B33A8h case   23:*/		return 0x821B33AC;
		  /* 821B33ACh */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 821B33ACh case   24:*/		if ( regs.CR[6].eq ) { return 0x821B33B8;  }
		/* 821B33ACh case   24:*/		return 0x821B33B0;
		  /* 821B33B0h */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B33B0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B33B0h case   25:*/		return 0x821B33B4;
		  /* 821B33B4h */ case   26:  		/* b -24 */
		/* 821B33B4h case   26:*/		return 0x821B339C;
		/* 821B33B4h case   26:*/		return 0x821B33B8;
	}
	return 0x821B33B8;
} // Block from 821B334Ch-821B33B8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B33B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B33B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B33B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B33B8);
		  /* 821B33B8h */ case    0:  		/* li R11, 1 */
		/* 821B33B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B33B8h case    0:*/		return 0x821B33BC;
		  /* 821B33BCh */ case    1:  		/* b 8 */
		/* 821B33BCh case    1:*/		return 0x821B33C4;
		/* 821B33BCh case    1:*/		return 0x821B33C0;
	}
	return 0x821B33C0;
} // Block from 821B33B8h-821B33C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B33C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B33C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B33C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B33C0);
		  /* 821B33C0h */ case    0:  		/* li R11, 0 */
		/* 821B33C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B33C0h case    0:*/		return 0x821B33C4;
	}
	return 0x821B33C4;
} // Block from 821B33C0h-821B33C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B33C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B33C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B33C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B33C4);
		  /* 821B33C4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B33C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B33C4h case    0:*/		return 0x821B33C8;
		  /* 821B33C8h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821B33C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B33E0;  }
		/* 821B33C8h case    1:*/		return 0x821B33CC;
		  /* 821B33CCh */ case    2:  		/* li R6, 61 */
		/* 821B33CCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3D);
		/* 821B33CCh case    2:*/		return 0x821B33D0;
		  /* 821B33D0h */ case    3:  		/* mr R5, R29 */
		/* 821B33D0h case    3:*/		regs.R5 = regs.R29;
		/* 821B33D0h case    3:*/		return 0x821B33D4;
		  /* 821B33D4h */ case    4:  		/* mr R4, R23 */
		/* 821B33D4h case    4:*/		regs.R4 = regs.R23;
		/* 821B33D4h case    4:*/		return 0x821B33D8;
		  /* 821B33D8h */ case    5:  		/* mr R3, R14 */
		/* 821B33D8h case    5:*/		regs.R3 = regs.R14;
		/* 821B33D8h case    5:*/		return 0x821B33DC;
		  /* 821B33DCh */ case    6:  		/* bl -92108 */
		/* 821B33DCh case    6:*/		regs.LR = 0x821B33E0; return 0x8219CC10;
		/* 821B33DCh case    6:*/		return 0x821B33E0;
	}
	return 0x821B33E0;
} // Block from 821B33C4h-821B33E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B33E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B33E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B33E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B33E0);
		  /* 821B33E0h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821B33E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B33E0h case    0:*/		return 0x821B33E4;
		  /* 821B33E4h */ case    1:  		/* addi R30, R30, 1 */
		/* 821B33E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B33E4h case    1:*/		return 0x821B33E8;
		  /* 821B33E8h */ case    2:  		/* addi R31, R31, 4 */
		/* 821B33E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821B33E8h case    2:*/		return 0x821B33EC;
		  /* 821B33ECh */ case    3:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B33ECh case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B33ECh case    3:*/		return 0x821B33F0;
		  /* 821B33F0h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821B33F0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821B33F0h case    4:*/		return 0x821B33F4;
		  /* 821B33F4h */ case    5:  		/* bc 12, CR6_LT, -96 */
		/* 821B33F4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821B3394;  }
		/* 821B33F4h case    5:*/		return 0x821B33F8;
	}
	return 0x821B33F8;
} // Block from 821B33E0h-821B33F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B33F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B33F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B33F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B33F8);
		  /* 821B33F8h */ case    0:  		/* lwz R28, <#[R28 + 8]> */
		/* 821B33F8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000008) );
		/* 821B33F8h case    0:*/		return 0x821B33FC;
		  /* 821B33FCh */ case    1:  		/* b -172 */
		/* 821B33FCh case    1:*/		return 0x821B3350;
		/* 821B33FCh case    1:*/		return 0x821B3400;
	}
	return 0x821B3400;
} // Block from 821B33F8h-821B3400h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3400);
		  /* 821B3400h */ case    0:  		/* lwz R21, <#[R21 + 8]> */
		/* 821B3400h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R21 + 0x00000008) );
		/* 821B3400h case    0:*/		return 0x821B3404;
		  /* 821B3404h */ case    1:  		/* b -420 */
		/* 821B3404h case    1:*/		return 0x821B3260;
		/* 821B3404h case    1:*/		return 0x821B3408;
	}
	return 0x821B3408;
} // Block from 821B3400h-821B3408h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3408);
		  /* 821B3408h */ case    0:  		/* addi R22, R22, 1 */
		/* 821B3408h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821B3408h case    0:*/		return 0x821B340C;
		  /* 821B340Ch */ case    1:  		/* addi R20, R20, 4 */
		/* 821B340Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 821B340Ch case    1:*/		return 0x821B3410;
		  /* 821B3410h */ case    2:  		/* cmplw CR6, R22, R8 */
		/* 821B3410h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R8);
		/* 821B3410h case    2:*/		return 0x821B3414;
		  /* 821B3414h */ case    3:  		/* bc 12, CR6_LT, -444 */
		/* 821B3414h case    3:*/		if ( regs.CR[6].lt ) { return 0x821B3258;  }
		/* 821B3414h case    3:*/		return 0x821B3418;
	}
	return 0x821B3418;
} // Block from 821B3408h-821B3418h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B3418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3418);
		  /* 821B3418h */ case    0:  		/* lwz R19, <#[R19 + 8]> */
		/* 821B3418h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R19 + 0x00000008) );
		/* 821B3418h case    0:*/		return 0x821B341C;
		  /* 821B341Ch */ case    1:  		/* li R20, 0 */
		/* 821B341Ch case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821B341Ch case    1:*/		return 0x821B3420;
		  /* 821B3420h */ case    2:  		/* b -536 */
		/* 821B3420h case    2:*/		return 0x821B3208;
		/* 821B3420h case    2:*/		return 0x821B3424;
	}
	return 0x821B3424;
} // Block from 821B3418h-821B3424h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3424);
		  /* 821B3424h */ case    0:  		/* addi R17, R17, 1 */
		/* 821B3424h case    0:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821B3424h case    0:*/		return 0x821B3428;
		  /* 821B3428h */ case    1:  		/* cmplw CR6, R17, R8 */
		/* 821B3428h case    1:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R8);
		/* 821B3428h case    1:*/		return 0x821B342C;
		  /* 821B342Ch */ case    2:  		/* bc 12, CR6_LT, -564 */
		/* 821B342Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x821B31F8;  }
		/* 821B342Ch case    2:*/		return 0x821B3430;
	}
	return 0x821B3430;
} // Block from 821B3424h-821B3430h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3430);
		  /* 821B3430h */ case    0:  		/* lwz R11, <#[R15]> */
		/* 821B3430h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821B3430h case    0:*/		return 0x821B3434;
		  /* 821B3434h */ case    1:  		/* mr R10, R20 */
		/* 821B3434h case    1:*/		regs.R10 = regs.R20;
		/* 821B3434h case    1:*/		return 0x821B3438;
		  /* 821B3438h */ case    2:  		/* addi R9, R11, 44 */
		/* 821B3438h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2C);
		/* 821B3438h case    2:*/		return 0x821B343C;
		  /* 821B343Ch */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B343Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B343Ch case    3:*/		return 0x821B3440;
		  /* 821B3440h */ case    4:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B3440h case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B3440h case    4:*/		return 0x821B3444;
		  /* 821B3444h */ case    5:  		/* cmplw CR6, R10, R11 */
		/* 821B3444h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821B3444h case    5:*/		return 0x821B3448;
		  /* 821B3448h */ case    6:  		/* bc 4, CR6_LT, 68 */
		/* 821B3448h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821B348C;  }
		/* 821B3448h case    6:*/		return 0x821B344C;
		  /* 821B344Ch */ case    7:  		/* lwz R8, <#[R9]> */
		/* 821B344Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821B344Ch case    7:*/		return 0x821B3450;
		  /* 821B3450h */ case    8:  		/* lwz R8, <#[R8]> */
		/* 821B3450h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 821B3450h case    8:*/		return 0x821B3454;
		  /* 821B3454h */ case    9:  		/* rlwinm. R8, R8, 0, 27, 28 */
		/* 821B3454h case    9:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R8,regs.R8);
		/* 821B3454h case    9:*/		return 0x821B3458;
		  /* 821B3458h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821B3458h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B3468;  }
		/* 821B3458h case   10:*/		return 0x821B345C;
		  /* 821B345Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 821B345Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B345Ch case   11:*/		return 0x821B3460;
		  /* 821B3460h */ case   12:  		/* addi R9, R9, 4 */
		/* 821B3460h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821B3460h case   12:*/		return 0x821B3464;
		  /* 821B3464h */ case   13:  		/* b -32 */
		/* 821B3464h case   13:*/		return 0x821B3444;
		/* 821B3464h case   13:*/		return 0x821B3468;
	}
	return 0x821B3468;
} // Block from 821B3430h-821B3468h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B3468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3468);
		  /* 821B3468h */ case    0:  		/* lwz R9, <#[R23]> */
		/* 821B3468h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000000) );
		/* 821B3468h case    0:*/		return 0x821B346C;
		  /* 821B346Ch */ case    1:  		/* lis R11, 1 */
		/* 821B346Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 821B346Ch case    1:*/		return 0x821B3470;
		  /* 821B3470h */ case    2:  		/* ori R10, R11, 16384 */
		/* 821B3470h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x4000);
		/* 821B3470h case    2:*/		return 0x821B3474;
		  /* 821B3474h */ case    3:  		/* rlwinm R8, R9, 0, 19, 31 */
		/* 821B3474h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R9);
		/* 821B3474h case    3:*/		return 0x821B3478;
		  /* 821B3478h */ case    4:  		/* rlwinm R11, R9, 0, 0, 18 */
		/* 821B3478h case    4:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R11,regs.R9);
		/* 821B3478h case    4:*/		return 0x821B347C;
		  /* 821B347Ch */ case    5:  		/* mullw R10, R8, R10 */
		/* 821B347Ch case    5:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821B347Ch case    5:*/		return 0x821B3480;
		  /* 821B3480h */ case    6:  		/* add R11, R10, R11 */
		/* 821B3480h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B3480h case    6:*/		return 0x821B3484;
		  /* 821B3484h */ case    7:  		/* rlwimi R11, R9, 0, 19, 2 */
		/* 821B3484h case    7:*/		cpu::op::rlwimi<0,0,19,2>(regs,&regs.R11,regs.R9);
		/* 821B3484h case    7:*/		return 0x821B3488;
		  /* 821B3488h */ case    8:  		/* stw R11, <#[R23]> */
		/* 821B3488h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B3488h case    8:*/		return 0x821B348C;
	}
	return 0x821B348C;
} // Block from 821B3468h-821B348Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B348Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B348C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B348C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B348C);
		  /* 821B348Ch */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821B348Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821B348Ch case    0:*/		return 0x821B3490;
		  /* 821B3490h */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821B3490h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B3490h case    1:*/		return 0x821B3494;
		  /* 821B3494h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3494h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3494h case    2:*/		return 0x821B3498;
		  /* 821B3498h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B3498h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B34A8;  }
		/* 821B3498h case    3:*/		return 0x821B349C;
		  /* 821B349Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B349Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B349Ch case    4:*/		return 0x821B34A0;
		  /* 821B34A0h */ case    5:  		/* addic. R23, R11, -16 */
		/* 821B34A0h case    5:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R11,0xFFFFFFF0);
		/* 821B34A0h case    5:*/		return 0x821B34A4;
		  /* 821B34A4h */ case    6:  		/* bc 4, CR0_EQ, -1028 */
		/* 821B34A4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B30A0;  }
		/* 821B34A4h case    6:*/		return 0x821B34A8;
	}
	return 0x821B34A8;
} // Block from 821B348Ch-821B34A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B34A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B34A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B34A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B34A8);
		  /* 821B34A8h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B34A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B34A8h case    0:*/		return 0x821B34AC;
	}
	return 0x821B34AC;
} // Block from 821B34A8h-821B34ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B34ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B34AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B34AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B34AC);
		  /* 821B34ACh */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B34ACh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B34ACh case    0:*/		return 0x821B34B0;
		  /* 821B34B0h */ case    1:  		/* bc 4, CR0_EQ, 124 */
		/* 821B34B0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B352C;  }
		/* 821B34B0h case    1:*/		return 0x821B34B4;
		  /* 821B34B4h */ case    2:  		/* mr R7, R11 */
		/* 821B34B4h case    2:*/		regs.R7 = regs.R11;
		/* 821B34B4h case    2:*/		return 0x821B34B8;
		  /* 821B34B8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B34B8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B34B8h case    3:*/		return 0x821B34BC;
		  /* 821B34BCh */ case    4:  		/* bc 12, CR6_EQ, 112 */
		/* 821B34BCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821B352C;  }
		/* 821B34BCh case    4:*/		return 0x821B34C0;
		  /* 821B34C0h */ case    5:  		/* lwz R11, <#[R7 + 20]> */
		/* 821B34C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000014) );
		/* 821B34C0h case    5:*/		return 0x821B34C4;
		  /* 821B34C4h */ case    6:  		/* addi R9, R7, 20 */
		/* 821B34C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x14);
		/* 821B34C4h case    6:*/		return 0x821B34C8;
		  /* 821B34C8h */ case    7:  		/* b 64 */
		/* 821B34C8h case    7:*/		return 0x821B3508;
		/* 821B34C8h case    7:*/		return 0x821B34CC;
		  /* 821B34CCh */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821B34CCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B34CCh case    8:*/		return 0x821B34D0;
		  /* 821B34D0h */ case    9:  		/* lwz R8, <#[R10 + 8]> */
		/* 821B34D0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 821B34D0h case    9:*/		return 0x821B34D4;
		  /* 821B34D4h */ case   10:  		/* rlwinm. R8, R8, 0, 18, 18 */
		/* 821B34D4h case   10:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R8,regs.R8);
		/* 821B34D4h case   10:*/		return 0x821B34D8;
		  /* 821B34D8h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 821B34D8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B34E8;  }
		/* 821B34D8h case   11:*/		return 0x821B34DC;
		  /* 821B34DCh */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B34DCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B34DCh case   12:*/		return 0x821B34E0;
		  /* 821B34E0h */ case   13:  		/* stw R11, <#[R9]> */
		/* 821B34E0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821B34E0h case   13:*/		return 0x821B34E4;
		  /* 821B34E4h */ case   14:  		/* b 32 */
		/* 821B34E4h case   14:*/		return 0x821B3504;
		/* 821B34E4h case   14:*/		return 0x821B34E8;
	}
	return 0x821B34E8;
} // Block from 821B34ACh-821B34E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B34E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B34E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B34E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B34E8);
		  /* 821B34E8h */ case    0:  		/* lwz R6, <#[R10]> */
		/* 821B34E8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821B34E8h case    0:*/		return 0x821B34EC;
		  /* 821B34ECh */ case    1:  		/* addi R9, R11, 4 */
		/* 821B34ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821B34ECh case    1:*/		return 0x821B34F0;
		  /* 821B34F0h */ case    2:  		/* lwz R11, <#[R7]> */
		/* 821B34F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821B34F0h case    2:*/		return 0x821B34F4;
		  /* 821B34F4h */ case    3:  		/* rlwinm R8, R6, 0, 0, 18 */
		/* 821B34F4h case    3:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R8,regs.R6);
		/* 821B34F4h case    3:*/		return 0x821B34F8;
		  /* 821B34F8h */ case    4:  		/* add R11, R8, R11 */
		/* 821B34F8h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821B34F8h case    4:*/		return 0x821B34FC;
		  /* 821B34FCh */ case    5:  		/* rlwimi R11, R6, 0, 19, 2 */
		/* 821B34FCh case    5:*/		cpu::op::rlwimi<0,0,19,2>(regs,&regs.R11,regs.R6);
		/* 821B34FCh case    5:*/		return 0x821B3500;
		  /* 821B3500h */ case    6:  		/* stw R11, <#[R10]> */
		/* 821B3500h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3500h case    6:*/		return 0x821B3504;
	}
	return 0x821B3504;
} // Block from 821B34E8h-821B3504h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B3504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3504);
		  /* 821B3504h */ case    0:  		/* lwz R11, <#[R9]> */
		/* 821B3504h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821B3504h case    0:*/		return 0x821B3508;
	}
	return 0x821B3508;
} // Block from 821B3504h-821B3508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3508);
		  /* 821B3508h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B3508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3508h case    0:*/		return 0x821B350C;
		  /* 821B350Ch */ case    1:  		/* bc 4, CR6_EQ, -64 */
		/* 821B350Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B34CC;  }
		/* 821B350Ch case    1:*/		return 0x821B3510;
		  /* 821B3510h */ case    2:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821B3510h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821B3510h case    2:*/		return 0x821B3514;
		  /* 821B3514h */ case    3:  		/* lwz R7, <#[R11 + 16]> */
		/* 821B3514h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 821B3514h case    3:*/		return 0x821B3518;
		  /* 821B3518h */ case    4:  		/* rlwinm. R11, R7, 0, 31, 31 */
		/* 821B3518h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R7);
		/* 821B3518h case    4:*/		return 0x821B351C;
		  /* 821B351Ch */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821B351Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B3528;  }
		/* 821B351Ch case    5:*/		return 0x821B3520;
		  /* 821B3520h */ case    6:  		/* cmplwi CR6, R7, 0 */
		/* 821B3520h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821B3520h case    6:*/		return 0x821B3524;
		  /* 821B3524h */ case    7:  		/* bc 4, CR6_EQ, -100 */
		/* 821B3524h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821B34C0;  }
		/* 821B3524h case    7:*/		return 0x821B3528;
	}
	return 0x821B3528;
} // Block from 821B3508h-821B3528h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B3528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3528);
		  /* 821B3528h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3528h case    0:*/		return 0x821B352C;
	}
	return 0x821B352C;
} // Block from 821B3528h-821B352Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B352Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B352C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B352C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B352C);
		  /* 821B352Ch */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B352Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B352Ch case    0:*/		return 0x821B3530;
		  /* 821B3530h */ case    1:  		/* bc 4, CR0_EQ, 384 */
		/* 821B3530h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B36B0;  }
		/* 821B3530h case    1:*/		return 0x821B3534;
		  /* 821B3534h */ case    2:  		/* mr R25, R11 */
		/* 821B3534h case    2:*/		regs.R25 = regs.R11;
		/* 821B3534h case    2:*/		return 0x821B3538;
		  /* 821B3538h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B3538h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3538h case    3:*/		return 0x821B353C;
		  /* 821B353Ch */ case    4:  		/* bc 12, CR6_EQ, 372 */
		/* 821B353Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821B36B0;  }
		/* 821B353Ch case    4:*/		return 0x821B3540;
		  /* 821B3540h */ case    5:  		/* lwz R11, <#[R25]> */
		/* 821B3540h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B3540h case    5:*/		return 0x821B3544;
		  /* 821B3544h */ case    6:  		/* li R18, 0 */
		/* 821B3544h case    6:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821B3544h case    6:*/		return 0x821B3548;
		  /* 821B3548h */ case    7:  		/* rlwinm. R17, R11, 0, 19, 31 */
		/* 821B3548h case    7:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R17,regs.R11);
		/* 821B3548h case    7:*/		return 0x821B354C;
		  /* 821B354Ch */ case    8:  		/* bc 12, CR0_EQ, 324 */
		/* 821B354Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821B3690;  }
		/* 821B354Ch case    8:*/		return 0x821B3550;
		  /* 821B3550h */ case    9:  		/* addi R19, R25, 24 */
		/* 821B3550h case    9:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R25,0x18);
		/* 821B3550h case    9:*/		return 0x821B3554;
		  /* 821B3554h */ case   10:  		/* mr R21, R19 */
		/* 821B3554h case   10:*/		regs.R21 = regs.R19;
		/* 821B3554h case   10:*/		return 0x821B3558;
		  /* 821B3558h */ case   11:  		/* lwz R24, <#[R21]> */
		/* 821B3558h case   11:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R21 + 0x00000000) );
		/* 821B3558h case   11:*/		return 0x821B355C;
		  /* 821B355Ch */ case   12:  		/* li R23, 0 */
		/* 821B355Ch case   12:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821B355Ch case   12:*/		return 0x821B3560;
		  /* 821B3560h */ case   13:  		/* li R22, 0 */
		/* 821B3560h case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821B3560h case   13:*/		return 0x821B3564;
		  /* 821B3564h */ case   14:  		/* li R27, 44 */
		/* 821B3564h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x2C);
		/* 821B3564h case   14:*/		return 0x821B3568;
		  /* 821B3568h */ case   15:  		/* lwz R11, <#[R24 + 8]> */
		/* 821B3568h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821B3568h case   15:*/		return 0x821B356C;
		  /* 821B356Ch */ case   16:  		/* rlwinm R20, R11, 13, 29, 31 */
		/* 821B356Ch case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R20,regs.R11);
		/* 821B356Ch case   16:*/		return 0x821B3570;
		  /* 821B3570h */ case   17:  		/* cmplw CR6, R22, R20 */
		/* 821B3570h case   17:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R20);
		/* 821B3570h case   17:*/		return 0x821B3574;
		  /* 821B3574h */ case   18:  		/* bc 4, CR6_LT, 244 */
		/* 821B3574h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821B3668;  }
		/* 821B3574h case   18:*/		return 0x821B3578;
		  /* 821B3578h */ case   19:  		/* lwzx R31, <#[R27 + R24]> */
		/* 821B3578h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + regs.R24 + 0x00000000) );
		/* 821B3578h case   19:*/		return 0x821B357C;
		  /* 821B357Ch */ case   20:  		/* lwz R29, <#[R31 + 12]> */
		/* 821B357Ch case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B357Ch case   20:*/		return 0x821B3580;
		  /* 821B3580h */ case   21:  		/* mr R3, R29 */
		/* 821B3580h case   21:*/		regs.R3 = regs.R29;
		/* 821B3580h case   21:*/		return 0x821B3584;
		  /* 821B3584h */ case   22:  		/* bl -96404 */
		/* 821B3584h case   22:*/		regs.LR = 0x821B3588; return 0x8219BCF0;
		/* 821B3584h case   22:*/		return 0x821B3588;
		  /* 821B3588h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B3588h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B3588h case   23:*/		return 0x821B358C;
		  /* 821B358Ch */ case   24:  		/* bc 12, CR0_EQ, 208 */
		/* 821B358Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x821B365C;  }
		/* 821B358Ch case   24:*/		return 0x821B3590;
		  /* 821B3590h */ case   25:  		/* lwz R26, <#[R29 + 32]> */
		/* 821B3590h case   25:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R29 + 0x00000020) );
		/* 821B3590h case   25:*/		return 0x821B3594;
		  /* 821B3594h */ case   26:  		/* cmplwi CR6, R26, 0 */
		/* 821B3594h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821B3594h case   26:*/		return 0x821B3598;
		  /* 821B3598h */ case   27:  		/* bc 12, CR6_EQ, 196 */
		/* 821B3598h case   27:*/		if ( regs.CR[6].eq ) { return 0x821B365C;  }
		/* 821B3598h case   27:*/		return 0x821B359C;
		  /* 821B359Ch */ case   28:  		/* mr R3, R31 */
		/* 821B359Ch case   28:*/		regs.R3 = regs.R31;
		/* 821B359Ch case   28:*/		return 0x821B35A0;
		  /* 821B35A0h */ case   29:  		/* bl -324448 */
		/* 821B35A0h case   29:*/		regs.LR = 0x821B35A4; return 0x82164240;
		/* 821B35A0h case   29:*/		return 0x821B35A4;
		  /* 821B35A4h */ case   30:  		/* mr R28, R3 */
		/* 821B35A4h case   30:*/		regs.R28 = regs.R3;
		/* 821B35A4h case   30:*/		return 0x821B35A8;
		  /* 821B35A8h */ case   31:  		/* li R30, 0 */
		/* 821B35A8h case   31:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B35A8h case   31:*/		return 0x821B35AC;
		  /* 821B35ACh */ case   32:  		/* mr R31, R19 */
		/* 821B35ACh case   32:*/		regs.R31 = regs.R19;
		/* 821B35ACh case   32:*/		return 0x821B35B0;
		  /* 821B35B0h */ case   33:  		/* lwz R11, <#[R31]> */
		/* 821B35B0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B35B0h case   33:*/		return 0x821B35B4;
		  /* 821B35B4h */ case   34:  		/* lwzx R3, <#[R27 + R11]> */
		/* 821B35B4h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821B35B4h case   34:*/		return 0x821B35B8;
		  /* 821B35B8h */ case   35:  		/* lwz R11, <#[R3 + 12]> */
		/* 821B35B8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B35B8h case   35:*/		return 0x821B35BC;
		  /* 821B35BCh */ case   36:  		/* cmplw CR6, R11, R29 */
		/* 821B35BCh case   36:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821B35BCh case   36:*/		return 0x821B35C0;
		  /* 821B35C0h */ case   37:  		/* bc 4, CR6_EQ, 40 */
		/* 821B35C0h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821B35E8;  }
		/* 821B35C0h case   37:*/		return 0x821B35C4;
		  /* 821B35C4h */ case   38:  		/* bl -324484 */
		/* 821B35C4h case   38:*/		regs.LR = 0x821B35C8; return 0x82164240;
		/* 821B35C4h case   38:*/		return 0x821B35C8;
		  /* 821B35C8h */ case   39:  		/* cmplw CR6, R28, R3 */
		/* 821B35C8h case   39:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R3);
		/* 821B35C8h case   39:*/		return 0x821B35CC;
		  /* 821B35CCh */ case   40:  		/* bc 4, CR6_EQ, 28 */
		/* 821B35CCh case   40:*/		if ( !regs.CR[6].eq ) { return 0x821B35E8;  }
		/* 821B35CCh case   40:*/		return 0x821B35D0;
		  /* 821B35D0h */ case   41:  		/* lwz R11, <#[R25]> */
		/* 821B35D0h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B35D0h case   41:*/		return 0x821B35D4;
		  /* 821B35D4h */ case   42:  		/* addi R30, R30, 1 */
		/* 821B35D4h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B35D4h case   42:*/		return 0x821B35D8;
		  /* 821B35D8h */ case   43:  		/* addi R31, R31, 4 */
		/* 821B35D8h case   43:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821B35D8h case   43:*/		return 0x821B35DC;
		  /* 821B35DCh */ case   44:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B35DCh case   44:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B35DCh case   44:*/		return 0x821B35E0;
		  /* 821B35E0h */ case   45:  		/* cmplw CR6, R30, R11 */
		/* 821B35E0h case   45:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821B35E0h case   45:*/		return 0x821B35E4;
		  /* 821B35E4h */ case   46:  		/* bc 12, CR6_LT, -52 */
		/* 821B35E4h case   46:*/		if ( regs.CR[6].lt ) { return 0x821B35B0;  }
		/* 821B35E4h case   46:*/		return 0x821B35E8;
	}
	return 0x821B35E8;
} // Block from 821B352Ch-821B35E8h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821B35E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B35E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B35E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B35E8);
		  /* 821B35E8h */ case    0:  		/* cmplw CR6, R30, R17 */
		/* 821B35E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R17);
		/* 821B35E8h case    0:*/		return 0x821B35EC;
		  /* 821B35ECh */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 821B35ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821B365C;  }
		/* 821B35ECh case    1:*/		return 0x821B35F0;
		  /* 821B35F0h */ case    2:  		/* lwz R9, <#[R25 + 20]> */
		/* 821B35F0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000014) );
		/* 821B35F0h case    2:*/		return 0x821B35F4;
		  /* 821B35F4h */ case    3:  		/* mr R11, R9 */
		/* 821B35F4h case    3:*/		regs.R11 = regs.R9;
		/* 821B35F4h case    3:*/		return 0x821B35F8;
		  /* 821B35F8h */ case    4:  		/* cmplwi CR0, R9, 0 */
		/* 821B35F8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821B35F8h case    4:*/		return 0x821B35FC;
		  /* 821B35FCh */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 821B35FCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821B3624;  }
		/* 821B35FCh case    5:*/		return 0x821B3600;
		  /* 821B3600h */ case    6:  		/* lwz R10, <#[R26]> */
		/* 821B3600h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821B3600h case    6:*/		return 0x821B3604;
		  /* 821B3604h */ case    7:  		/* lwz R8, <#[R11]> */
		/* 821B3604h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3604h case    7:*/		return 0x821B3608;
		  /* 821B3608h */ case    8:  		/* cmplw CR6, R8, R10 */
		/* 821B3608h case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821B3608h case    8:*/		return 0x821B360C;
		  /* 821B360Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 821B360Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821B361C;  }
		/* 821B360Ch case    9:*/		return 0x821B3610;
		  /* 821B3610h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3610h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3610h case   10:*/		return 0x821B3614;
		  /* 821B3614h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821B3614h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3614h case   11:*/		return 0x821B3618;
		  /* 821B3618h */ case   12:  		/* bc 4, CR6_EQ, -20 */
		/* 821B3618h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821B3604;  }
		/* 821B3618h case   12:*/		return 0x821B361C;
	}
	return 0x821B361C;
} // Block from 821B35E8h-821B361Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B361Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B361C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B361C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B361C);
		  /* 821B361Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B361Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B361Ch case    0:*/		return 0x821B3620;
		  /* 821B3620h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 821B3620h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3654;  }
		/* 821B3620h case    1:*/		return 0x821B3624;
	}
	return 0x821B3624;
} // Block from 821B361Ch-821B3624h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3624);
		  /* 821B3624h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821B3624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B3624h case    0:*/		return 0x821B3628;
		  /* 821B3628h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B3628h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B3628h case    1:*/		return 0x821B362C;
		  /* 821B362Ch */ case    2:  		/* rlwinm. R10, R10, 0, 18, 18 */
		/* 821B362Ch case    2:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R10,regs.R10);
		/* 821B362Ch case    2:*/		return 0x821B3630;
		  /* 821B3630h */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 821B3630h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3648;  }
		/* 821B3630h case    3:*/		return 0x821B3634;
		  /* 821B3634h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 821B3634h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3634h case    4:*/		return 0x821B3638;
		  /* 821B3638h */ case    5:  		/* rlwinm R11, R11, 19, 16, 31 */
		/* 821B3638h case    5:*/		cpu::op::rlwinm<0,19,16,31>(regs,&regs.R11,regs.R11);
		/* 821B3638h case    5:*/		return 0x821B363C;
		  /* 821B363Ch */ case    6:  		/* cmplw CR6, R11, R23 */
		/* 821B363Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821B363Ch case    6:*/		return 0x821B3640;
		  /* 821B3640h */ case    7:  		/* bc 4, CR6_GT, 8 */
		/* 821B3640h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821B3648;  }
		/* 821B3640h case    7:*/		return 0x821B3644;
		  /* 821B3644h */ case    8:  		/* mr R23, R11 */
		/* 821B3644h case    8:*/		regs.R23 = regs.R11;
		/* 821B3644h case    8:*/		return 0x821B3648;
	}
	return 0x821B3648;
} // Block from 821B3624h-821B3648h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B3648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3648);
		  /* 821B3648h */ case    0:  		/* lwz R26, <#[R26 + 4]> */
		/* 821B3648h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000004) );
		/* 821B3648h case    0:*/		return 0x821B364C;
		  /* 821B364Ch */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 821B364Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821B364Ch case    1:*/		return 0x821B3650;
		  /* 821B3650h */ case    2:  		/* bc 4, CR6_EQ, -92 */
		/* 821B3650h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B35F4;  }
		/* 821B3650h case    2:*/		return 0x821B3654;
	}
	return 0x821B3654;
} // Block from 821B3648h-821B3654h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3654);
		  /* 821B3654h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821B3654h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821B3654h case    0:*/		return 0x821B3658;
		  /* 821B3658h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821B3658h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3678;  }
		/* 821B3658h case    1:*/		return 0x821B365C;
	}
	return 0x821B365C;
} // Block from 821B3654h-821B365Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B365Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B365C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B365C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B365C);
		  /* 821B365Ch */ case    0:  		/* addi R22, R22, 1 */
		/* 821B365Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821B365Ch case    0:*/		return 0x821B3660;
		  /* 821B3660h */ case    1:  		/* addi R27, R27, 4 */
		/* 821B3660h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821B3660h case    1:*/		return 0x821B3664;
		  /* 821B3664h */ case    2:  		/* b -244 */
		/* 821B3664h case    2:*/		return 0x821B3570;
		/* 821B3664h case    2:*/		return 0x821B3668;
	}
	return 0x821B3668;
} // Block from 821B365Ch-821B3668h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3668);
		  /* 821B3668h */ case    0:  		/* lhz R11, <#[R25 + 6]> */
		/* 821B3668h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000006) );
		/* 821B3668h case    0:*/		return 0x821B366C;
		  /* 821B366Ch */ case    1:  		/* cmplw CR6, R23, R11 */
		/* 821B366Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821B366Ch case    1:*/		return 0x821B3670;
		  /* 821B3670h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821B3670h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821B3678;  }
		/* 821B3670h case    2:*/		return 0x821B3674;
		  /* 821B3674h */ case    3:  		/* sth R23, <#[R25 + 6]> */
		/* 821B3674h case    3:*/		cpu::mem::store16( regs, regs.R23, (uint32)(regs.R25 + 0x00000006) );
		/* 821B3674h case    3:*/		return 0x821B3678;
	}
	return 0x821B3678;
} // Block from 821B3668h-821B3678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B3678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3678);
		  /* 821B3678h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821B3678h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B3678h case    0:*/		return 0x821B367C;
		  /* 821B367Ch */ case    1:  		/* addi R18, R18, 1 */
		/* 821B367Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 821B367Ch case    1:*/		return 0x821B3680;
		  /* 821B3680h */ case    2:  		/* addi R21, R21, 4 */
		/* 821B3680h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 821B3680h case    2:*/		return 0x821B3684;
		  /* 821B3684h */ case    3:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B3684h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B3684h case    3:*/		return 0x821B3688;
		  /* 821B3688h */ case    4:  		/* cmplw CR6, R18, R11 */
		/* 821B3688h case    4:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 821B3688h case    4:*/		return 0x821B368C;
		  /* 821B368Ch */ case    5:  		/* bc 12, CR6_LT, -308 */
		/* 821B368Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821B3558;  }
		/* 821B368Ch case    5:*/		return 0x821B3690;
	}
	return 0x821B3690;
} // Block from 821B3678h-821B3690h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3690);
		  /* 821B3690h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821B3690h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821B3690h case    0:*/		return 0x821B3694;
		  /* 821B3694h */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 821B3694h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821B3694h case    1:*/		return 0x821B3698;
		  /* 821B3698h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3698h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3698h case    2:*/		return 0x821B369C;
		  /* 821B369Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B369Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B36AC;  }
		/* 821B369Ch case    3:*/		return 0x821B36A0;
		  /* 821B36A0h */ case    4:  		/* mr R25, R11 */
		/* 821B36A0h case    4:*/		regs.R25 = regs.R11;
		/* 821B36A0h case    4:*/		return 0x821B36A4;
		  /* 821B36A4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821B36A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B36A4h case    5:*/		return 0x821B36A8;
		  /* 821B36A8h */ case    6:  		/* bc 4, CR6_EQ, -360 */
		/* 821B36A8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B3540;  }
		/* 821B36A8h case    6:*/		return 0x821B36AC;
	}
	return 0x821B36AC;
} // Block from 821B3690h-821B36ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B36ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B36AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B36AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B36AC);
		  /* 821B36ACh */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B36ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B36ACh case    0:*/		return 0x821B36B0;
	}
	return 0x821B36B0;
} // Block from 821B36ACh-821B36B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B36B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B36B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B36B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B36B0);
		  /* 821B36B0h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B36B0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B36B0h case    0:*/		return 0x821B36B4;
		  /* 821B36B4h */ case    1:  		/* bc 4, CR0_EQ, 112 */
		/* 821B36B4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B3724;  }
		/* 821B36B4h case    1:*/		return 0x821B36B8;
		  /* 821B36B8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821B36B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B36B8h case    2:*/		return 0x821B36BC;
		  /* 821B36BCh */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821B36BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821B3724;  }
		/* 821B36BCh case    3:*/		return 0x821B36C0;
		  /* 821B36C0h */ case    4:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B36C0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B36C0h case    4:*/		return 0x821B36C4;
		  /* 821B36C4h */ case    5:  		/* rlwinm. R10, R10, 0, 18, 18 */
		/* 821B36C4h case    5:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R10,regs.R10);
		/* 821B36C4h case    5:*/		return 0x821B36C8;
		  /* 821B36C8h */ case    6:  		/* bc 12, CR0_EQ, 64 */
		/* 821B36C8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B3708;  }
		/* 821B36C8h case    6:*/		return 0x821B36CC;
		  /* 821B36CCh */ case    7:  		/* lwz R9, <#[R11 + 4]> */
		/* 821B36CCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821B36CCh case    7:*/		return 0x821B36D0;
		  /* 821B36D0h */ case    8:  		/* lwz R10, <#[R11 + 20]> */
		/* 821B36D0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821B36D0h case    8:*/		return 0x821B36D4;
		  /* 821B36D4h */ case    9:  		/* addi R9, R9, 100 */
		/* 821B36D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x64);
		/* 821B36D4h case    9:*/		return 0x821B36D8;
		  /* 821B36D8h */ case   10:  		/* sth R9, <#[R11 + 6]> */
		/* 821B36D8h case   10:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000006) );
		/* 821B36D8h case   10:*/		return 0x821B36DC;
		  /* 821B36DCh */ case   11:  		/* b 36 */
		/* 821B36DCh case   11:*/		return 0x821B3700;
		/* 821B36DCh case   11:*/		return 0x821B36E0;
		  /* 821B36E0h */ case   12:  		/* lwz R9, <#[R10]> */
		/* 821B36E0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B36E0h case   12:*/		return 0x821B36E4;
		  /* 821B36E4h */ case   13:  		/* lwz R8, <#[R9 + 8]> */
		/* 821B36E4h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 821B36E4h case   13:*/		return 0x821B36E8;
		  /* 821B36E8h */ case   14:  		/* rlwinm. R8, R8, 0, 17, 17 */
		/* 821B36E8h case   14:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R8,regs.R8);
		/* 821B36E8h case   14:*/		return 0x821B36EC;
		  /* 821B36ECh */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 821B36ECh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B36FC;  }
		/* 821B36ECh case   15:*/		return 0x821B36F0;
		  /* 821B36F0h */ case   16:  		/* lwz R8, <#[R9 + 4]> */
		/* 821B36F0h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 821B36F0h case   16:*/		return 0x821B36F4;
		  /* 821B36F4h */ case   17:  		/* addi R8, R8, 100 */
		/* 821B36F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x64);
		/* 821B36F4h case   17:*/		return 0x821B36F8;
		  /* 821B36F8h */ case   18:  		/* sth R8, <#[R9 + 6]> */
		/* 821B36F8h case   18:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R9 + 0x00000006) );
		/* 821B36F8h case   18:*/		return 0x821B36FC;
	}
	return 0x821B36FC;
} // Block from 821B36B0h-821B36FCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821B36FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B36FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B36FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B36FC);
		  /* 821B36FCh */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 821B36FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821B36FCh case    0:*/		return 0x821B3700;
	}
	return 0x821B3700;
} // Block from 821B36FCh-821B3700h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3700);
		  /* 821B3700h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821B3700h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B3700h case    0:*/		return 0x821B3704;
		  /* 821B3704h */ case    1:  		/* bc 4, CR6_EQ, -36 */
		/* 821B3704h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B36E0;  }
		/* 821B3704h case    1:*/		return 0x821B3708;
	}
	return 0x821B3708;
} // Block from 821B3700h-821B3708h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3708);
		  /* 821B3708h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3708h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3708h case    0:*/		return 0x821B370C;
		  /* 821B370Ch */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 821B370Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821B370Ch case    1:*/		return 0x821B3710;
		  /* 821B3710h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3710h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3710h case    2:*/		return 0x821B3714;
		  /* 821B3714h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B3714h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3720;  }
		/* 821B3714h case    3:*/		return 0x821B3718;
		  /* 821B3718h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821B3718h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3718h case    4:*/		return 0x821B371C;
		  /* 821B371Ch */ case    5:  		/* bc 4, CR6_EQ, -92 */
		/* 821B371Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B36C0;  }
		/* 821B371Ch case    5:*/		return 0x821B3720;
	}
	return 0x821B3720;
} // Block from 821B3708h-821B3720h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3720);
		  /* 821B3720h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3720h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3720h case    0:*/		return 0x821B3724;
	}
	return 0x821B3724;
} // Block from 821B3720h-821B3724h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3724);
		  /* 821B3724h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3724h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3724h case    0:*/		return 0x821B3728;
		  /* 821B3728h */ case    1:  		/* bc 4, CR0_EQ, 128 */
		/* 821B3728h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B37A8;  }
		/* 821B3728h case    1:*/		return 0x821B372C;
		  /* 821B372Ch */ case    2:  		/* lwz R10, <#[R1 + 88]> */
		/* 821B372Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821B372Ch case    2:*/		return 0x821B3730;
		  /* 821B3730h */ case    3:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3730h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3730h case    3:*/		return 0x821B3734;
		  /* 821B3734h */ case    4:  		/* addic. R10, R10, -16 */
		/* 821B3734h case    4:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFF0);
		/* 821B3734h case    4:*/		return 0x821B3738;
		  /* 821B3738h */ case    5:  		/* bc 12, CR0_EQ, 112 */
		/* 821B3738h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B37A8;  }
		/* 821B3738h case    5:*/		return 0x821B373C;
		  /* 821B373Ch */ case    6:  		/* lwz R8, <#[R10 + 20]> */
		/* 821B373Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 821B373Ch case    6:*/		return 0x821B3740;
		  /* 821B3740h */ case    7:  		/* b 40 */
		/* 821B3740h case    7:*/		return 0x821B3768;
		/* 821B3740h case    7:*/		return 0x821B3744;
		  /* 821B3744h */ case    8:  		/* lwz R11, <#[R8]> */
		/* 821B3744h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821B3744h case    8:*/		return 0x821B3748;
		  /* 821B3748h */ case    9:  		/* lwz R9, <#[R11 + 8]> */
		/* 821B3748h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821B3748h case    9:*/		return 0x821B374C;
		  /* 821B374Ch */ case   10:  		/* rlwinm. R9, R9, 0, 18, 18 */
		/* 821B374Ch case   10:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R9,regs.R9);
		/* 821B374Ch case   10:*/		return 0x821B3750;
		  /* 821B3750h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 821B3750h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B3764;  }
		/* 821B3750h case   11:*/		return 0x821B3754;
		  /* 821B3754h */ case   12:  		/* lwz R9, <#[R11 + 4]> */
		/* 821B3754h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3754h case   12:*/		return 0x821B3758;
		  /* 821B3758h */ case   13:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B3758h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B3758h case   13:*/		return 0x821B375C;
		  /* 821B375Ch */ case   14:  		/* add R11, R9, R11 */
		/* 821B375Ch case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821B375Ch case   14:*/		return 0x821B3760;
		  /* 821B3760h */ case   15:  		/* sth R11, <#[R10 + 6]> */
		/* 821B3760h case   15:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R10 + 0x00000006) );
		/* 821B3760h case   15:*/		return 0x821B3764;
	}
	return 0x821B3764;
} // Block from 821B3724h-821B3764h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B3764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3764);
		  /* 821B3764h */ case    0:  		/* lwz R8, <#[R8 + 4]> */
		/* 821B3764h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821B3764h case    0:*/		return 0x821B3768;
	}
	return 0x821B3768;
} // Block from 821B3764h-821B3768h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3768);
		  /* 821B3768h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821B3768h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821B3768h case    0:*/		return 0x821B376C;
		  /* 821B376Ch */ case    1:  		/* bc 4, CR6_EQ, -40 */
		/* 821B376Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3744;  }
		/* 821B376Ch case    1:*/		return 0x821B3770;
		  /* 821B3770h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 821B3770h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3770h case    2:*/		return 0x821B3774;
		  /* 821B3774h */ case    3:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821B3774h case    3:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821B3774h case    3:*/		return 0x821B3778;
		  /* 821B3778h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821B3778h case    4:*/		if ( regs.CR[0].eq ) { return 0x821B3788;  }
		/* 821B3778h case    4:*/		return 0x821B377C;
		  /* 821B377Ch */ case    5:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B377Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B377Ch case    5:*/		return 0x821B3780;
		  /* 821B3780h */ case    6:  		/* oris R11, R11, 65535 */
		/* 821B3780h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 821B3780h case    6:*/		return 0x821B3784;
		  /* 821B3784h */ case    7:  		/* stw R11, <#[R10 + 4]> */
		/* 821B3784h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B3784h case    7:*/		return 0x821B3788;
	}
	return 0x821B3788;
} // Block from 821B3768h-821B3788h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B3788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3788);
		  /* 821B3788h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821B3788h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821B3788h case    0:*/		return 0x821B378C;
		  /* 821B378Ch */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821B378Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B378Ch case    1:*/		return 0x821B3790;
		  /* 821B3790h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3790h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3790h case    2:*/		return 0x821B3794;
		  /* 821B3794h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B3794h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B37A4;  }
		/* 821B3794h case    3:*/		return 0x821B3798;
		  /* 821B3798h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3798h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3798h case    4:*/		return 0x821B379C;
		  /* 821B379Ch */ case    5:  		/* addic. R10, R11, -16 */
		/* 821B379Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R11,0xFFFFFFF0);
		/* 821B379Ch case    5:*/		return 0x821B37A0;
		  /* 821B37A0h */ case    6:  		/* bc 4, CR0_EQ, -100 */
		/* 821B37A0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B373C;  }
		/* 821B37A0h case    6:*/		return 0x821B37A4;
	}
	return 0x821B37A4;
} // Block from 821B3788h-821B37A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B37A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B37A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B37A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B37A4);
		  /* 821B37A4h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B37A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B37A4h case    0:*/		return 0x821B37A8;
	}
	return 0x821B37A8;
} // Block from 821B37A4h-821B37A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B37A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B37A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B37A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B37A8);
		  /* 821B37A8h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B37A8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B37A8h case    0:*/		return 0x821B37AC;
		  /* 821B37ACh */ case    1:  		/* li R7, 0 */
		/* 821B37ACh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B37ACh case    1:*/		return 0x821B37B0;
		  /* 821B37B0h */ case    2:  		/* bc 4, CR0_EQ, 100 */
		/* 821B37B0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B3814;  }
		/* 821B37B0h case    2:*/		return 0x821B37B4;
		  /* 821B37B4h */ case    3:  		/* mr R9, R11 */
		/* 821B37B4h case    3:*/		regs.R9 = regs.R11;
		/* 821B37B4h case    3:*/		return 0x821B37B8;
		  /* 821B37B8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821B37B8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B37B8h case    4:*/		return 0x821B37BC;
		  /* 821B37BCh */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 821B37BCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821B3814;  }
		/* 821B37BCh case    5:*/		return 0x821B37C0;
		  /* 821B37C0h */ case    6:  		/* lwz R8, <#[R9 + 20]> */
		/* 821B37C0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 821B37C0h case    6:*/		return 0x821B37C4;
		  /* 821B37C4h */ case    7:  		/* b 40 */
		/* 821B37C4h case    7:*/		return 0x821B37EC;
		/* 821B37C4h case    7:*/		return 0x821B37C8;
		  /* 821B37C8h */ case    8:  		/* lwz R10, <#[R8]> */
		/* 821B37C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821B37C8h case    8:*/		return 0x821B37CC;
		  /* 821B37CCh */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821B37CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821B37CCh case    9:*/		return 0x821B37D0;
		  /* 821B37D0h */ case   10:  		/* rlwinm R6, R11, 0, 16, 31 */
		/* 821B37D0h case   10:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R6,regs.R11);
		/* 821B37D0h case   10:*/		return 0x821B37D4;
		  /* 821B37D4h */ case   11:  		/* lhz R5, <#[R10 + 4]> */
		/* 821B37D4h case   11:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 821B37D4h case   11:*/		return 0x821B37D8;
		  /* 821B37D8h */ case   12:  		/* cmplw CR6, R6, R5 */
		/* 821B37D8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 821B37D8h case   12:*/		return 0x821B37DC;
		  /* 821B37DCh */ case   13:  		/* bc 4, CR6_LT, 12 */
		/* 821B37DCh case   13:*/		if ( !regs.CR[6].lt ) { return 0x821B37E8;  }
		/* 821B37DCh case   13:*/		return 0x821B37E0;
		  /* 821B37E0h */ case   14:  		/* li R7, 1 */
		/* 821B37E0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821B37E0h case   14:*/		return 0x821B37E4;
		  /* 821B37E4h */ case   15:  		/* sth R11, <#[R10 + 4]> */
		/* 821B37E4h case   15:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B37E4h case   15:*/		return 0x821B37E8;
	}
	return 0x821B37E8;
} // Block from 821B37A8h-821B37E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B37E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B37E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B37E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B37E8);
		  /* 821B37E8h */ case    0:  		/* lwz R8, <#[R8 + 4]> */
		/* 821B37E8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821B37E8h case    0:*/		return 0x821B37EC;
	}
	return 0x821B37EC;
} // Block from 821B37E8h-821B37ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B37ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B37EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B37EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B37EC);
		  /* 821B37ECh */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821B37ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821B37ECh case    0:*/		return 0x821B37F0;
		  /* 821B37F0h */ case    1:  		/* bc 4, CR6_EQ, -40 */
		/* 821B37F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B37C8;  }
		/* 821B37F0h case    1:*/		return 0x821B37F4;
		  /* 821B37F4h */ case    2:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821B37F4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821B37F4h case    2:*/		return 0x821B37F8;
		  /* 821B37F8h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821B37F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821B37F8h case    3:*/		return 0x821B37FC;
		  /* 821B37FCh */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B37FCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B37FCh case    4:*/		return 0x821B3800;
		  /* 821B3800h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 821B3800h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B3810;  }
		/* 821B3800h case    5:*/		return 0x821B3804;
		  /* 821B3804h */ case    6:  		/* mr R9, R11 */
		/* 821B3804h case    6:*/		regs.R9 = regs.R11;
		/* 821B3804h case    6:*/		return 0x821B3808;
		  /* 821B3808h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821B3808h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3808h case    7:*/		return 0x821B380C;
		  /* 821B380Ch */ case    8:  		/* bc 4, CR6_EQ, -76 */
		/* 821B380Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821B37C0;  }
		/* 821B380Ch case    8:*/		return 0x821B3810;
	}
	return 0x821B3810;
} // Block from 821B37ECh-821B3810h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B3810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3810);
		  /* 821B3810h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3810h case    0:*/		return 0x821B3814;
	}
	return 0x821B3814;
} // Block from 821B3810h-821B3814h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3814);
		  /* 821B3814h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3814h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3814h case    0:*/		return 0x821B3818;
		  /* 821B3818h */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 821B3818h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B3860;  }
		/* 821B3818h case    1:*/		return 0x821B381C;
		  /* 821B381Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821B381Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B381Ch case    2:*/		return 0x821B3820;
		  /* 821B3820h */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 821B3820h case    3:*/		if ( regs.CR[6].eq ) { return 0x821B3860;  }
		/* 821B3820h case    3:*/		return 0x821B3824;
		  /* 821B3824h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B3824h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3824h case    4:*/		return 0x821B3828;
		  /* 821B3828h */ case    5:  		/* lhz R9, <#[R11 + 4]> */
		/* 821B3828h case    5:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3828h case    5:*/		return 0x821B382C;
		  /* 821B382Ch */ case    6:  		/* rlwinm R8, R10, 0, 16, 31 */
		/* 821B382Ch case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R10);
		/* 821B382Ch case    6:*/		return 0x821B3830;
		  /* 821B3830h */ case    7:  		/* cmplw CR6, R9, R8 */
		/* 821B3830h case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821B3830h case    7:*/		return 0x821B3834;
		  /* 821B3834h */ case    8:  		/* bc 4, CR6_GT, 16 */
		/* 821B3834h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821B3844;  }
		/* 821B3834h case    8:*/		return 0x821B3838;
		  /* 821B3838h */ case    9:  		/* rlwinm R10, R10, 16, 16, 31 */
		/* 821B3838h case    9:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R10,regs.R10);
		/* 821B3838h case    9:*/		return 0x821B383C;
		  /* 821B383Ch */ case   10:  		/* li R7, 1 */
		/* 821B383Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821B383Ch case   10:*/		return 0x821B3840;
		  /* 821B3840h */ case   11:  		/* sth R10, <#[R11 + 6]> */
		/* 821B3840h case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000006) );
		/* 821B3840h case   11:*/		return 0x821B3844;
	}
	return 0x821B3844;
} // Block from 821B3814h-821B3844h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B3844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3844);
		  /* 821B3844h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3844h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3844h case    0:*/		return 0x821B3848;
		  /* 821B3848h */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 821B3848h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821B3848h case    1:*/		return 0x821B384C;
		  /* 821B384Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B384Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B384Ch case    2:*/		return 0x821B3850;
		  /* 821B3850h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B3850h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B385C;  }
		/* 821B3850h case    3:*/		return 0x821B3854;
		  /* 821B3854h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821B3854h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3854h case    4:*/		return 0x821B3858;
		  /* 821B3858h */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 821B3858h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B3824;  }
		/* 821B3858h case    5:*/		return 0x821B385C;
	}
	return 0x821B385C;
} // Block from 821B3844h-821B385Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B385Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B385C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B385C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B385C);
		  /* 821B385Ch */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B385Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B385Ch case    0:*/		return 0x821B3860;
	}
	return 0x821B3860;
} // Block from 821B385Ch-821B3860h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3860);
		  /* 821B3860h */ case    0:  		/* rlwinm. R10, R7, 0, 24, 31 */
		/* 821B3860h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R7);
		/* 821B3860h case    0:*/		return 0x821B3864;
		  /* 821B3864h */ case    1:  		/* bc 4, CR0_EQ, -188 */
		/* 821B3864h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B37A8;  }
		/* 821B3864h case    1:*/		return 0x821B3868;
		  /* 821B3868h */ case    2:  		/* li R23, 1 */
		/* 821B3868h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821B3868h case    2:*/		return 0x821B386C;
		  /* 821B386Ch */ case    3:  		/* b 8 */
		/* 821B386Ch case    3:*/		return 0x821B3874;
		/* 821B386Ch case    3:*/		return 0x821B3870;
		  /* 821B3870h */ case    4:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3870h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3870h case    4:*/		return 0x821B3874;
	}
	return 0x821B3874;
} // Block from 821B3860h-821B3874h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B3874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3874);
		  /* 821B3874h */ case    0:  		/* li R16, 3 */
		/* 821B3874h case    0:*/		cpu::op::li<0>(regs,&regs.R16,0x3);
		/* 821B3874h case    0:*/		return 0x821B3878;
		  /* 821B3878h */ case    1:  		/* li R15, 0 */
		/* 821B3878h case    1:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 821B3878h case    1:*/		return 0x821B387C;
		  /* 821B387Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B387Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B387Ch case    2:*/		return 0x821B3880;
		  /* 821B3880h */ case    3:  		/* mr R24, R15 */
		/* 821B3880h case    3:*/		regs.R24 = regs.R15;
		/* 821B3880h case    3:*/		return 0x821B3884;
		  /* 821B3884h */ case    4:  		/* mr R29, R15 */
		/* 821B3884h case    4:*/		regs.R29 = regs.R15;
		/* 821B3884h case    4:*/		return 0x821B3888;
		  /* 821B3888h */ case    5:  		/* bc 4, CR0_EQ, 948 */
		/* 821B3888h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821B3C3C;  }
		/* 821B3888h case    5:*/		return 0x821B388C;
		  /* 821B388Ch */ case    6:  		/* lwz R11, <#[R1 + 88]> */
		/* 821B388Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821B388Ch case    6:*/		return 0x821B3890;
		  /* 821B3890h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3890h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3890h case    7:*/		return 0x821B3894;
		  /* 821B3894h */ case    8:  		/* addic. R31, R11, -16 */
		/* 821B3894h case    8:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFF0);
		/* 821B3894h case    8:*/		return 0x821B3898;
		  /* 821B3898h */ case    9:  		/* bc 12, CR0_EQ, 932 */
		/* 821B3898h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B3C3C;  }
		/* 821B3898h case    9:*/		return 0x821B389C;
		  /* 821B389Ch */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821B389Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B389Ch case   10:*/		return 0x821B38A0;
		  /* 821B38A0h */ case   11:  		/* rlwinm. R10, R11, 0, 3, 18 */
		/* 821B38A0h case   11:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R10,regs.R11);
		/* 821B38A0h case   11:*/		return 0x821B38A4;
		  /* 821B38A4h */ case   12:  		/* bc 12, CR0_EQ, 400 */
		/* 821B38A4h case   12:*/		if ( regs.CR[0].eq ) { return 0x821B3A34;  }
		/* 821B38A4h case   12:*/		return 0x821B38A8;
		  /* 821B38A8h */ case   13:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821B38A8h case   13:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821B38A8h case   13:*/		return 0x821B38AC;
		  /* 821B38ACh */ case   14:  		/* bc 4, CR0_EQ, 392 */
		/* 821B38ACh case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B3A34;  }
		/* 821B38ACh case   14:*/		return 0x821B38B0;
		  /* 821B38B0h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B38B0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B38B0h case   15:*/		return 0x821B38B4;
		  /* 821B38B4h */ case   16:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B38B4h case   16:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B38B4h case   16:*/		return 0x821B38B8;
		  /* 821B38B8h */ case   17:  		/* cmplw CR6, R11, R23 */
		/* 821B38B8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821B38B8h case   17:*/		return 0x821B38BC;
		  /* 821B38BCh */ case   18:  		/* bc 12, CR6_EQ, 376 */
		/* 821B38BCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821B3A34;  }
		/* 821B38BCh case   18:*/		return 0x821B38C0;
		  /* 821B38C0h */ case   19:  		/* lhz R11, <#[R31 + 6]> */
		/* 821B38C0h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000006) );
		/* 821B38C0h case   19:*/		return 0x821B38C4;
		  /* 821B38C4h */ case   20:  		/* cmplwi CR6, R11, 20 */
		/* 821B38C4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000014);
		/* 821B38C4h case   20:*/		return 0x821B38C8;
		  /* 821B38C8h */ case   21:  		/* bc 12, CR6_GT, 364 */
		/* 821B38C8h case   21:*/		if ( regs.CR[6].gt ) { return 0x821B3A34;  }
		/* 821B38C8h case   21:*/		return 0x821B38CC;
		  /* 821B38CCh */ case   22:  		/* lwz R4, <#[R31 + 20]> */
		/* 821B38CCh case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 821B38CCh case   22:*/		return 0x821B38D0;
		  /* 821B38D0h */ case   23:  		/* addi R30, R31, 20 */
		/* 821B38D0h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x14);
		/* 821B38D0h case   23:*/		return 0x821B38D4;
		  /* 821B38D4h */ case   24:  		/* b 56 */
		/* 821B38D4h case   24:*/		return 0x821B390C;
		/* 821B38D4h case   24:*/		return 0x821B38D8;
		  /* 821B38D8h */ case   25:  		/* lwz R11, <#[R4]> */
		/* 821B38D8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821B38D8h case   25:*/		return 0x821B38DC;
		  /* 821B38DCh */ case   26:  		/* lwz R11, <#[R11]> */
		/* 821B38DCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B38DCh case   26:*/		return 0x821B38E0;
		  /* 821B38E0h */ case   27:  		/* rlwinm. R11, R11, 0, 3, 18 */
		/* 821B38E0h case   27:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R11,regs.R11);
		/* 821B38E0h case   27:*/		return 0x821B38E4;
		  /* 821B38E4h */ case   28:  		/* bc 4, CR0_EQ, 32 */
		/* 821B38E4h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821B3904;  }
		/* 821B38E4h case   28:*/		return 0x821B38E8;
		  /* 821B38E8h */ case   29:  		/* lwz R11, <#[R4 + 4]> */
		/* 821B38E8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821B38E8h case   29:*/		return 0x821B38EC;
		  /* 821B38ECh */ case   30:  		/* li R6, 49 */
		/* 821B38ECh case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x31);
		/* 821B38ECh case   30:*/		return 0x821B38F0;
		  /* 821B38F0h */ case   31:  		/* li R5, 8 */
		/* 821B38F0h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821B38F0h case   31:*/		return 0x821B38F4;
		  /* 821B38F4h */ case   32:  		/* mr R3, R14 */
		/* 821B38F4h case   32:*/		regs.R3 = regs.R14;
		/* 821B38F4h case   32:*/		return 0x821B38F8;
		  /* 821B38F8h */ case   33:  		/* stw R11, <#[R30]> */
		/* 821B38F8h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B38F8h case   33:*/		return 0x821B38FC;
		  /* 821B38FCh */ case   34:  		/* bl -289452 */
		/* 821B38FCh case   34:*/		regs.LR = 0x821B3900; return 0x8216CE50;
		/* 821B38FCh case   34:*/		return 0x821B3900;
		  /* 821B3900h */ case   35:  		/* b 8 */
		/* 821B3900h case   35:*/		return 0x821B3908;
		/* 821B3900h case   35:*/		return 0x821B3904;
	}
	return 0x821B3904;
} // Block from 821B3874h-821B3904h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821B3904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3904);
		  /* 821B3904h */ case    0:  		/* addi R30, R4, 4 */
		/* 821B3904h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R4,0x4);
		/* 821B3904h case    0:*/		return 0x821B3908;
	}
	return 0x821B3908;
} // Block from 821B3904h-821B3908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3908);
		  /* 821B3908h */ case    0:  		/* lwz R4, <#[R30]> */
		/* 821B3908h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821B3908h case    0:*/		return 0x821B390C;
	}
	return 0x821B390C;
} // Block from 821B3908h-821B390Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B390Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B390C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B390C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B390C);
		  /* 821B390Ch */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821B390Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821B390Ch case    0:*/		return 0x821B3910;
		  /* 821B3910h */ case    1:  		/* bc 4, CR6_EQ, -56 */
		/* 821B3910h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B38D8;  }
		/* 821B3910h case    1:*/		return 0x821B3914;
		  /* 821B3914h */ case    2:  		/* lwz R6, <#[R31]> */
		/* 821B3914h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3914h case    2:*/		return 0x821B3918;
		  /* 821B3918h */ case    3:  		/* mr R8, R15 */
		/* 821B3918h case    3:*/		regs.R8 = regs.R15;
		/* 821B3918h case    3:*/		return 0x821B391C;
		  /* 821B391Ch */ case    4:  		/* mr R9, R15 */
		/* 821B391Ch case    4:*/		regs.R9 = regs.R15;
		/* 821B391Ch case    4:*/		return 0x821B3920;
		  /* 821B3920h */ case    5:  		/* rlwinm. R11, R6, 0, 19, 31 */
		/* 821B3920h case    5:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R6);
		/* 821B3920h case    5:*/		return 0x821B3924;
		  /* 821B3924h */ case    6:  		/* bc 12, CR0_EQ, 88 */
		/* 821B3924h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B397C;  }
		/* 821B3924h case    6:*/		return 0x821B3928;
		  /* 821B3928h */ case    7:  		/* rlwinm R10, R6, 0, 0, 31 */
		/* 821B3928h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R6);
		/* 821B3928h case    7:*/		return 0x821B392C;
		  /* 821B392Ch */ case    8:  		/* addi R11, R31, 24 */
		/* 821B392Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x18);
		/* 821B392Ch case    8:*/		return 0x821B3930;
		  /* 821B3930h */ case    9:  		/* rlwinm R7, R10, 0, 19, 31 */
		/* 821B3930h case    9:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R7,regs.R10);
		/* 821B3930h case    9:*/		return 0x821B3934;
		  /* 821B3934h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821B3934h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3934h case   10:*/		return 0x821B3938;
		  /* 821B3938h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821B3938h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B3938h case   11:*/		return 0x821B393C;
		  /* 821B393Ch */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821B393Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821B394C;  }
		/* 821B393Ch case   12:*/		return 0x821B3940;
		  /* 821B3940h */ case   13:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B3940h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B3940h case   13:*/		return 0x821B3944;
		  /* 821B3944h */ case   14:  		/* rlwinm R10, R10, 18, 29, 31 */
		/* 821B3944h case   14:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R10);
		/* 821B3944h case   14:*/		return 0x821B3948;
		  /* 821B3948h */ case   15:  		/* add R8, R10, R8 */
		/* 821B3948h case   15:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821B3948h case   15:*/		return 0x821B394C;
	}
	return 0x821B394C;
} // Block from 821B390Ch-821B394Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B394Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B394C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B394C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B394C);
		  /* 821B394Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 821B394Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821B394Ch case    0:*/		return 0x821B3950;
		  /* 821B3950h */ case    1:  		/* addi R11, R11, 4 */
		/* 821B3950h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B3950h case    1:*/		return 0x821B3954;
		  /* 821B3954h */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 821B3954h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821B3954h case    2:*/		return 0x821B3958;
		  /* 821B3958h */ case    3:  		/* bc 12, CR6_LT, -36 */
		/* 821B3958h case    3:*/		if ( regs.CR[6].lt ) { return 0x821B3934;  }
		/* 821B3958h case    3:*/		return 0x821B395C;
		  /* 821B395Ch */ case    4:  		/* cmplwi CR6, R8, 4 */
		/* 821B395Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 821B395Ch case    4:*/		return 0x821B3960;
		  /* 821B3960h */ case    5:  		/* bc 4, CR6_GT, 28 */
		/* 821B3960h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821B397C;  }
		/* 821B3960h case    5:*/		return 0x821B3964;
		  /* 821B3964h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3964h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3964h case    6:*/		return 0x821B3968;
		  /* 821B3968h */ case    7:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 821B3968h case    7:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 821B3968h case    7:*/		return 0x821B396C;
		  /* 821B396Ch */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821B396Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B397C;  }
		/* 821B396Ch case    8:*/		return 0x821B3970;
		  /* 821B3970h */ case    9:  		/* oris R11, R6, 32768 */
		/* 821B3970h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R6,0x8000);
		/* 821B3970h case    9:*/		return 0x821B3974;
		  /* 821B3974h */ case   10:  		/* stw R11, <#[R31]> */
		/* 821B3974h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3974h case   10:*/		return 0x821B3978;
		  /* 821B3978h */ case   11:  		/* b 188 */
		/* 821B3978h case   11:*/		return 0x821B3A34;
		/* 821B3978h case   11:*/		return 0x821B397C;
	}
	return 0x821B397C;
} // Block from 821B394Ch-821B397Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B397Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B397C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B397C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B397C);
		  /* 821B397Ch */ case    0:  		/* lwz R30, <#[R31 + 24]> */
		/* 821B397Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000018) );
		/* 821B397Ch case    0:*/		return 0x821B3980;
		  /* 821B3980h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821B3980h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B3980h case    1:*/		return 0x821B3984;
		  /* 821B3984h */ case    2:  		/* bc 12, CR6_EQ, 176 */
		/* 821B3984h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B3A34;  }
		/* 821B3984h case    2:*/		return 0x821B3988;
		  /* 821B3988h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821B3988h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B3988h case    3:*/		return 0x821B398C;
		  /* 821B398Ch */ case    4:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B398Ch case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B398Ch case    4:*/		return 0x821B3990;
		  /* 821B3990h */ case    5:  		/* cmplwi CR6, R11, 14720 */
		/* 821B3990h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B3990h case    5:*/		return 0x821B3994;
		  /* 821B3994h */ case    6:  		/* bc 12, CR6_EQ, 160 */
		/* 821B3994h case    6:*/		if ( regs.CR[6].eq ) { return 0x821B3A34;  }
		/* 821B3994h case    6:*/		return 0x821B3998;
		  /* 821B3998h */ case    7:  		/* mr R4, R30 */
		/* 821B3998h case    7:*/		regs.R4 = regs.R30;
		/* 821B3998h case    7:*/		return 0x821B399C;
		  /* 821B399Ch */ case    8:  		/* mr R3, R14 */
		/* 821B399Ch case    8:*/		regs.R3 = regs.R14;
		/* 821B399Ch case    8:*/		return 0x821B39A0;
		  /* 821B39A0h */ case    9:  		/* bl -94304 */
		/* 821B39A0h case    9:*/		regs.LR = 0x821B39A4; return 0x8219C940;
		/* 821B39A0h case    9:*/		return 0x821B39A4;
		  /* 821B39A4h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B39A4h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B39A4h case   10:*/		return 0x821B39A8;
		  /* 821B39A8h */ case   11:  		/* bc 4, CR0_EQ, 140 */
		/* 821B39A8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B3A34;  }
		/* 821B39A8h case   11:*/		return 0x821B39AC;
		  /* 821B39ACh */ case   12:  		/* li R6, 0 */
		/* 821B39ACh case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B39ACh case   12:*/		return 0x821B39B0;
		  /* 821B39B0h */ case   13:  		/* lwz R4, <#[R30 + 28]> */
		/* 821B39B0h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821B39B0h case   13:*/		return 0x821B39B4;
		  /* 821B39B4h */ case   14:  		/* mr R5, R30 */
		/* 821B39B4h case   14:*/		regs.R5 = regs.R30;
		/* 821B39B4h case   14:*/		return 0x821B39B8;
		  /* 821B39B8h */ case   15:  		/* mr R3, R14 */
		/* 821B39B8h case   15:*/		regs.R3 = regs.R14;
		/* 821B39B8h case   15:*/		return 0x821B39BC;
		  /* 821B39BCh */ case   16:  		/* bl -14684 */
		/* 821B39BCh case   16:*/		regs.LR = 0x821B39C0; return 0x821B0060;
		/* 821B39BCh case   16:*/		return 0x821B39C0;
		  /* 821B39C0h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 821B39C0h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B39C0h case   17:*/		return 0x821B39C4;
		  /* 821B39C4h */ case   18:  		/* bc 12, CR0_EQ, 112 */
		/* 821B39C4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821B3A34;  }
		/* 821B39C4h case   18:*/		return 0x821B39C8;
		  /* 821B39C8h */ case   19:  		/* stw R3, <#[R31 + 24]> */
		/* 821B39C8h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 821B39C8h case   19:*/		return 0x821B39CC;
		  /* 821B39CCh */ case   20:  		/* lwz R11, <#[R3 + 32]> */
		/* 821B39CCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821B39CCh case   20:*/		return 0x821B39D0;
		  /* 821B39D0h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821B39D0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B39D0h case   21:*/		return 0x821B39D4;
		  /* 821B39D4h */ case   22:  		/* bc 12, CR6_EQ, 72 */
		/* 821B39D4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B3A1C;  }
		/* 821B39D4h case   22:*/		return 0x821B39D8;
		  /* 821B39D8h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 821B39D8h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B39D8h case   23:*/		return 0x821B39DC;
		  /* 821B39DCh */ case   24:  		/* lwz R9, <#[R10]> */
		/* 821B39DCh case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B39DCh case   24:*/		return 0x821B39E0;
		  /* 821B39E0h */ case   25:  		/* rlwinm. R8, R9, 0, 0, 0 */
		/* 821B39E0h case   25:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R8,regs.R9);
		/* 821B39E0h case   25:*/		return 0x821B39E4;
		  /* 821B39E4h */ case   26:  		/* bc 4, CR0_EQ, 36 */
		/* 821B39E4h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B3A08;  }
		/* 821B39E4h case   26:*/		return 0x821B39E8;
		  /* 821B39E8h */ case   27:  		/* lhz R10, <#[R10 + 6]> */
		/* 821B39E8h case   27:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000006) );
		/* 821B39E8h case   27:*/		return 0x821B39EC;
		  /* 821B39ECh */ case   28:  		/* cmplwi CR6, R10, 20 */
		/* 821B39ECh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000014);
		/* 821B39ECh case   28:*/		return 0x821B39F0;
		  /* 821B39F0h */ case   29:  		/* bc 12, CR6_GT, 24 */
		/* 821B39F0h case   29:*/		if ( regs.CR[6].gt ) { return 0x821B3A08;  }
		/* 821B39F0h case   29:*/		return 0x821B39F4;
		  /* 821B39F4h */ case   30:  		/* lwz R10, <#[R31]> */
		/* 821B39F4h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821B39F4h case   30:*/		return 0x821B39F8;
		  /* 821B39F8h */ case   31:  		/* rlwinm R9, R9, 0, 3, 18 */
		/* 821B39F8h case   31:*/		cpu::op::rlwinm<0,0,3,18>(regs,&regs.R9,regs.R9);
		/* 821B39F8h case   31:*/		return 0x821B39FC;
		  /* 821B39FCh */ case   32:  		/* rlwinm R10, R10, 0, 3, 18 */
		/* 821B39FCh case   32:*/		cpu::op::rlwinm<0,0,3,18>(regs,&regs.R10,regs.R10);
		/* 821B39FCh case   32:*/		return 0x821B3A00;
		  /* 821B3A00h */ case   33:  		/* cmplw CR6, R10, R9 */
		/* 821B3A00h case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B3A00h case   33:*/		return 0x821B3A04;
		  /* 821B3A04h */ case   34:  		/* bc 12, CR6_LT, 16 */
		/* 821B3A04h case   34:*/		if ( regs.CR[6].lt ) { return 0x821B3A14;  }
		/* 821B3A04h case   34:*/		return 0x821B3A08;
	}
	return 0x821B3A08;
} // Block from 821B397Ch-821B3A08h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821B3A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3A08);
		  /* 821B3A08h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3A08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3A08h case    0:*/		return 0x821B3A0C;
		  /* 821B3A0Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B3A0Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3A0Ch case    1:*/		return 0x821B3A10;
		  /* 821B3A10h */ case    2:  		/* bc 4, CR6_EQ, -56 */
		/* 821B3A10h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B39D8;  }
		/* 821B3A10h case    2:*/		return 0x821B3A14;
	}
	return 0x821B3A14;
} // Block from 821B3A08h-821B3A14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3A14);
		  /* 821B3A14h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B3A14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3A14h case    0:*/		return 0x821B3A18;
		  /* 821B3A18h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821B3A18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3A34;  }
		/* 821B3A18h case    1:*/		return 0x821B3A1C;
	}
	return 0x821B3A1C;
} // Block from 821B3A14h-821B3A1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3A1C);
		  /* 821B3A1Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821B3A1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3A1Ch case    0:*/		return 0x821B3A20;
		  /* 821B3A20h */ case    1:  		/* rlwinm R11, R11, 19, 16, 31 */
		/* 821B3A20h case    1:*/		cpu::op::rlwinm<0,19,16,31>(regs,&regs.R11,regs.R11);
		/* 821B3A20h case    1:*/		return 0x821B3A24;
		  /* 821B3A24h */ case    2:  		/* cmplw CR6, R11, R29 */
		/* 821B3A24h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821B3A24h case    2:*/		return 0x821B3A28;
		  /* 821B3A28h */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 821B3A28h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821B3A34;  }
		/* 821B3A28h case    3:*/		return 0x821B3A2C;
		  /* 821B3A2Ch */ case    4:  		/* mr R24, R31 */
		/* 821B3A2Ch case    4:*/		regs.R24 = regs.R31;
		/* 821B3A2Ch case    4:*/		return 0x821B3A30;
		  /* 821B3A30h */ case    5:  		/* mr R29, R11 */
		/* 821B3A30h case    5:*/		regs.R29 = regs.R11;
		/* 821B3A30h case    5:*/		return 0x821B3A34;
	}
	return 0x821B3A34;
} // Block from 821B3A1Ch-821B3A34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3A34);
		  /* 821B3A34h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B3A34h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B3A34h case    0:*/		return 0x821B3A38;
		  /* 821B3A38h */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821B3A38h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B3A38h case    1:*/		return 0x821B3A3C;
		  /* 821B3A3Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3A3Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3A3Ch case    2:*/		return 0x821B3A40;
		  /* 821B3A40h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B3A40h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3A50;  }
		/* 821B3A40h case    3:*/		return 0x821B3A44;
		  /* 821B3A44h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3A44h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3A44h case    4:*/		return 0x821B3A48;
		  /* 821B3A48h */ case    5:  		/* addic. R31, R11, -16 */
		/* 821B3A48h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFF0);
		/* 821B3A48h case    5:*/		return 0x821B3A4C;
		  /* 821B3A4Ch */ case    6:  		/* bc 4, CR0_EQ, -432 */
		/* 821B3A4Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B389C;  }
		/* 821B3A4Ch case    6:*/		return 0x821B3A50;
	}
	return 0x821B3A50;
} // Block from 821B3A34h-821B3A50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B3A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3A50);
		  /* 821B3A50h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821B3A50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821B3A50h case    0:*/		return 0x821B3A54;
		  /* 821B3A54h */ case    1:  		/* bc 12, CR6_EQ, 488 */
		/* 821B3A54h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B3C3C;  }
		/* 821B3A54h case    1:*/		return 0x821B3A58;
		  /* 821B3A58h */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821B3A58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821B3A58h case    2:*/		return 0x821B3A5C;
		  /* 821B3A5Ch */ case    3:  		/* li R6, 0 */
		/* 821B3A5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B3A5Ch case    3:*/		return 0x821B3A60;
		  /* 821B3A60h */ case    4:  		/* lwz R5, <#[R24 + 24]> */
		/* 821B3A60h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000018) );
		/* 821B3A60h case    4:*/		return 0x821B3A64;
		  /* 821B3A64h */ case    5:  		/* mr R3, R14 */
		/* 821B3A64h case    5:*/		regs.R3 = regs.R14;
		/* 821B3A64h case    5:*/		return 0x821B3A68;
		  /* 821B3A68h */ case    6:  		/* rlwimi R11, R23, 0, 19, 31 */
		/* 821B3A68h case    6:*/		cpu::op::rlwimi<0,0,19,31>(regs,&regs.R11,regs.R23);
		/* 821B3A68h case    6:*/		return 0x821B3A6C;
		  /* 821B3A6Ch */ case    7:  		/* stw R11, <#[R24 + 8]> */
		/* 821B3A6Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821B3A6Ch case    7:*/		return 0x821B3A70;
		  /* 821B3A70h */ case    8:  		/* lwz R4, <#[R5 + 28]> */
		/* 821B3A70h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821B3A70h case    8:*/		return 0x821B3A74;
		  /* 821B3A74h */ case    9:  		/* bl -14868 */
		/* 821B3A74h case    9:*/		regs.LR = 0x821B3A78; return 0x821B0060;
		/* 821B3A74h case    9:*/		return 0x821B3A78;
		  /* 821B3A78h */ case   10:  		/* or. R30, R3, R3 */
		/* 821B3A78h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821B3A78h case   10:*/		return 0x821B3A7C;
		  /* 821B3A7Ch */ case   11:  		/* bc 12, CR0_EQ, -524 */
		/* 821B3A7Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821B3870;  }
		/* 821B3A7Ch case   11:*/		return 0x821B3A80;
		  /* 821B3A80h */ case   12:  		/* lwz R11, <#[R24]> */
		/* 821B3A80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B3A80h case   12:*/		return 0x821B3A84;
		  /* 821B3A84h */ case   13:  		/* li R25, 2 */
		/* 821B3A84h case   13:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821B3A84h case   13:*/		return 0x821B3A88;
		  /* 821B3A88h */ case   14:  		/* stw R30, <#[R24 + 24]> */
		/* 821B3A88h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x00000018) );
		/* 821B3A88h case   14:*/		return 0x821B3A8C;
		  /* 821B3A8Ch */ case   15:  		/* rlwinm R10, R11, 0, 19, 31 */
		/* 821B3A8Ch case   15:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R10,regs.R11);
		/* 821B3A8Ch case   15:*/		return 0x821B3A90;
		  /* 821B3A90h */ case   16:  		/* rlwinm R11, R11, 19, 16, 31 */
		/* 821B3A90h case   16:*/		cpu::op::rlwinm<0,19,16,31>(regs,&regs.R11,regs.R11);
		/* 821B3A90h case   16:*/		return 0x821B3A94;
		  /* 821B3A94h */ case   17:  		/* mulli R10, R10, 20 */
		/* 821B3A94h case   17:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x14);
		/* 821B3A94h case   17:*/		return 0x821B3A98;
		  /* 821B3A98h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 821B3A98h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B3A98h case   18:*/		return 0x821B3A9C;
		  /* 821B3A9Ch */ case   19:  		/* bc 4, CR6_GT, 64 */
		/* 821B3A9Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821B3ADC;  }
		/* 821B3A9Ch case   19:*/		return 0x821B3AA0;
		  /* 821B3AA0h */ case   20:  		/* lwz R11, <#[R24 + 20]> */
		/* 821B3AA0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821B3AA0h case   20:*/		return 0x821B3AA4;
		  /* 821B3AA4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821B3AA4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3AA4h case   21:*/		return 0x821B3AA8;
		  /* 821B3AA8h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 821B3AA8h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B3AD8;  }
		/* 821B3AA8h case   22:*/		return 0x821B3AAC;
		  /* 821B3AACh */ case   23:  		/* lwz R10, <#[R11]> */
		/* 821B3AACh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3AACh case   23:*/		return 0x821B3AB0;
		  /* 821B3AB0h */ case   24:  		/* lwz R10, <#[R10]> */
		/* 821B3AB0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3AB0h case   24:*/		return 0x821B3AB4;
		  /* 821B3AB4h */ case   25:  		/* rlwinm. R9, R10, 0, 3, 18 */
		/* 821B3AB4h case   25:*/		cpu::op::rlwinm<1,0,3,18>(regs,&regs.R9,regs.R10);
		/* 821B3AB4h case   25:*/		return 0x821B3AB8;
		  /* 821B3AB8h */ case   26:  		/* bc 12, CR0_EQ, 12 */
		/* 821B3AB8h case   26:*/		if ( regs.CR[0].eq ) { return 0x821B3AC4;  }
		/* 821B3AB8h case   26:*/		return 0x821B3ABC;
		  /* 821B3ABCh */ case   27:  		/* rlwinm. R10, R10, 0, 0, 0 */
		/* 821B3ABCh case   27:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R10);
		/* 821B3ABCh case   27:*/		return 0x821B3AC0;
		  /* 821B3AC0h */ case   28:  		/* bc 12, CR0_EQ, 16 */
		/* 821B3AC0h case   28:*/		if ( regs.CR[0].eq ) { return 0x821B3AD0;  }
		/* 821B3AC0h case   28:*/		return 0x821B3AC4;
	}
	return 0x821B3AC4;
} // Block from 821B3A50h-821B3AC4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B3AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3AC4);
		  /* 821B3AC4h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3AC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3AC4h case    0:*/		return 0x821B3AC8;
		  /* 821B3AC8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B3AC8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3AC8h case    1:*/		return 0x821B3ACC;
		  /* 821B3ACCh */ case    2:  		/* bc 4, CR6_EQ, -32 */
		/* 821B3ACCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B3AAC;  }
		/* 821B3ACCh case    2:*/		return 0x821B3AD0;
	}
	return 0x821B3AD0;
} // Block from 821B3AC4h-821B3AD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3AD0);
		  /* 821B3AD0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B3AD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B3AD0h case    0:*/		return 0x821B3AD4;
		  /* 821B3AD4h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821B3AD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3ADC;  }
		/* 821B3AD4h case    1:*/		return 0x821B3AD8;
	}
	return 0x821B3AD8;
} // Block from 821B3AD0h-821B3AD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3AD8);
		  /* 821B3AD8h */ case    0:  		/* mr R25, R16 */
		/* 821B3AD8h case    0:*/		regs.R25 = regs.R16;
		/* 821B3AD8h case    0:*/		return 0x821B3ADC;
	}
	return 0x821B3ADC;
} // Block from 821B3AD8h-821B3ADCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3ADC);
		  /* 821B3ADCh */ case    0:  		/* li R26, 1 */
		/* 821B3ADCh case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821B3ADCh case    0:*/		return 0x821B3AE0;
		  /* 821B3AE0h */ case    1:  		/* li R27, 1 */
		/* 821B3AE0h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821B3AE0h case    1:*/		return 0x821B3AE4;
		  /* 821B3AE4h */ case    2:  		/* addi R28, R24, 28 */
		/* 821B3AE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R24,0x1C);
		/* 821B3AE4h case    2:*/		return 0x821B3AE8;
		  /* 821B3AE8h */ case    3:  		/* lwz R11, <#[R24]> */
		/* 821B3AE8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B3AE8h case    3:*/		return 0x821B3AEC;
		  /* 821B3AECh */ case    4:  		/* rlwinm R10, R11, 0, 19, 31 */
		/* 821B3AECh case    4:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R10,regs.R11);
		/* 821B3AECh case    4:*/		return 0x821B3AF0;
		  /* 821B3AF0h */ case    5:  		/* cmplw CR6, R27, R10 */
		/* 821B3AF0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 821B3AF0h case    5:*/		return 0x821B3AF4;
		  /* 821B3AF4h */ case    6:  		/* bc 4, CR6_LT, 292 */
		/* 821B3AF4h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821B3C18;  }
		/* 821B3AF4h case    6:*/		return 0x821B3AF8;
		  /* 821B3AF8h */ case    7:  		/* lwz R5, <#[R28]> */
		/* 821B3AF8h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000000) );
		/* 821B3AF8h case    7:*/		return 0x821B3AFC;
		  /* 821B3AFCh */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 821B3AFCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821B3AFCh case    8:*/		return 0x821B3B00;
		  /* 821B3B00h */ case    9:  		/* bc 12, CR6_EQ, 268 */
		/* 821B3B00h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B3C0C;  }
		/* 821B3B00h case    9:*/		return 0x821B3B04;
		  /* 821B3B04h */ case   10:  		/* li R6, 0 */
		/* 821B3B04h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B3B04h case   10:*/		return 0x821B3B08;
		  /* 821B3B08h */ case   11:  		/* lwz R4, <#[R5 + 28]> */
		/* 821B3B08h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821B3B08h case   11:*/		return 0x821B3B0C;
		  /* 821B3B0Ch */ case   12:  		/* mr R3, R14 */
		/* 821B3B0Ch case   12:*/		regs.R3 = regs.R14;
		/* 821B3B0Ch case   12:*/		return 0x821B3B10;
		  /* 821B3B10h */ case   13:  		/* mr R29, R15 */
		/* 821B3B10h case   13:*/		regs.R29 = regs.R15;
		/* 821B3B10h case   13:*/		return 0x821B3B14;
		  /* 821B3B14h */ case   14:  		/* bl -15028 */
		/* 821B3B14h case   14:*/		regs.LR = 0x821B3B18; return 0x821B0060;
		/* 821B3B14h case   14:*/		return 0x821B3B18;
		  /* 821B3B18h */ case   15:  		/* or. R31, R3, R3 */
		/* 821B3B18h case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821B3B18h case   15:*/		return 0x821B3B1C;
		  /* 821B3B1Ch */ case   16:  		/* bc 12, CR0_EQ, 204 */
		/* 821B3B1Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x821B3BE8;  }
		/* 821B3B1Ch case   16:*/		return 0x821B3B20;
		  /* 821B3B20h */ case   17:  		/* stw R31, <#[R28]> */
		/* 821B3B20h case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821B3B20h case   17:*/		return 0x821B3B24;
		  /* 821B3B24h */ case   18:  		/* cmplw CR6, R31, R30 */
		/* 821B3B24h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821B3B24h case   18:*/		return 0x821B3B28;
		  /* 821B3B28h */ case   19:  		/* bc 12, CR6_EQ, 192 */
		/* 821B3B28h case   19:*/		if ( regs.CR[6].eq ) { return 0x821B3BE8;  }
		/* 821B3B28h case   19:*/		return 0x821B3B2C;
		  /* 821B3B2Ch */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3B2Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3B2Ch case   20:*/		return 0x821B3B30;
		  /* 821B3B30h */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B3B30h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B3B30h case   21:*/		return 0x821B3B34;
		  /* 821B3B34h */ case   22:  		/* cmplwi CR6, R11, 14720 */
		/* 821B3B34h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B3B34h case   22:*/		return 0x821B3B38;
		  /* 821B3B38h */ case   23:  		/* bc 12, CR6_EQ, 176 */
		/* 821B3B38h case   23:*/		if ( regs.CR[6].eq ) { return 0x821B3BE8;  }
		/* 821B3B38h case   23:*/		return 0x821B3B3C;
		  /* 821B3B3Ch */ case   24:  		/* mr R4, R31 */
		/* 821B3B3Ch case   24:*/		regs.R4 = regs.R31;
		/* 821B3B3Ch case   24:*/		return 0x821B3B40;
		  /* 821B3B40h */ case   25:  		/* mr R3, R14 */
		/* 821B3B40h case   25:*/		regs.R3 = regs.R14;
		/* 821B3B40h case   25:*/		return 0x821B3B44;
		  /* 821B3B44h */ case   26:  		/* bl -94724 */
		/* 821B3B44h case   26:*/		regs.LR = 0x821B3B48; return 0x8219C940;
		/* 821B3B44h case   26:*/		return 0x821B3B48;
		  /* 821B3B48h */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B3B48h case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B3B48h case   27:*/		return 0x821B3B4C;
		  /* 821B3B4Ch */ case   28:  		/* bc 4, CR0_EQ, 156 */
		/* 821B3B4Ch case   28:*/		if ( !regs.CR[0].eq ) { return 0x821B3BE8;  }
		/* 821B3B4Ch case   28:*/		return 0x821B3B50;
		  /* 821B3B50h */ case   29:  		/* addi R6, R1, 224 */
		/* 821B3B50h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 821B3B50h case   29:*/		return 0x821B3B54;
		  /* 821B3B54h */ case   30:  		/* mr R5, R31 */
		/* 821B3B54h case   30:*/		regs.R5 = regs.R31;
		/* 821B3B54h case   30:*/		return 0x821B3B58;
		  /* 821B3B58h */ case   31:  		/* mr R4, R30 */
		/* 821B3B58h case   31:*/		regs.R4 = regs.R30;
		/* 821B3B58h case   31:*/		return 0x821B3B5C;
		  /* 821B3B5Ch */ case   32:  		/* mr R3, R14 */
		/* 821B3B5Ch case   32:*/		regs.R3 = regs.R14;
		/* 821B3B5Ch case   32:*/		return 0x821B3B60;
		  /* 821B3B60h */ case   33:  		/* bl -83544 */
		/* 821B3B60h case   33:*/		regs.LR = 0x821B3B64; return 0x8219F508;
		/* 821B3B60h case   33:*/		return 0x821B3B64;
		  /* 821B3B64h */ case   34:  		/* cmplwi CR6, R3, 4 */
		/* 821B3B64h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821B3B64h case   34:*/		return 0x821B3B68;
		  /* 821B3B68h */ case   35:  		/* bc 12, CR6_GT, 124 */
		/* 821B3B68h case   35:*/		if ( regs.CR[6].gt ) { return 0x821B3BE4;  }
		/* 821B3B68h case   35:*/		return 0x821B3B6C;
		  /* 821B3B6Ch */ case   36:  		/* addi R7, R1, 224 */
		/* 821B3B6Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 821B3B6Ch case   36:*/		return 0x821B3B70;
		  /* 821B3B70h */ case   37:  		/* addi R6, R1, 120 */
		/* 821B3B70h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 821B3B70h case   37:*/		return 0x821B3B74;
		  /* 821B3B74h */ case   38:  		/* mr R5, R31 */
		/* 821B3B74h case   38:*/		regs.R5 = regs.R31;
		/* 821B3B74h case   38:*/		return 0x821B3B78;
		  /* 821B3B78h */ case   39:  		/* mr R4, R30 */
		/* 821B3B78h case   39:*/		regs.R4 = regs.R30;
		/* 821B3B78h case   39:*/		return 0x821B3B7C;
		  /* 821B3B7Ch */ case   40:  		/* mr R3, R14 */
		/* 821B3B7Ch case   40:*/		regs.R3 = regs.R14;
		/* 821B3B7Ch case   40:*/		return 0x821B3B80;
		  /* 821B3B80h */ case   41:  		/* bl -14384 */
		/* 821B3B80h case   41:*/		regs.LR = 0x821B3B84; return 0x821B0350;
		/* 821B3B80h case   41:*/		return 0x821B3B84;
		  /* 821B3B84h */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 821B3B84h case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821B3B84h case   42:*/		return 0x821B3B88;
		  /* 821B3B88h */ case   43:  		/* bc 4, CR0_EQ, 48 */
		/* 821B3B88h case   43:*/		if ( !regs.CR[0].eq ) { return 0x821B3BB8;  }
		/* 821B3B88h case   43:*/		return 0x821B3B8C;
		  /* 821B3B8Ch */ case   44:  		/* lwz R11, <#[R1 + 120]> */
		/* 821B3B8Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821B3B8Ch case   44:*/		return 0x821B3B90;
		  /* 821B3B90h */ case   45:  		/* cmplw CR6, R11, R25 */
		/* 821B3B90h case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821B3B90h case   45:*/		return 0x821B3B94;
		  /* 821B3B94h */ case   46:  		/* bc 12, CR6_GT, 84 */
		/* 821B3B94h case   46:*/		if ( regs.CR[6].gt ) { return 0x821B3BE8;  }
		/* 821B3B94h case   46:*/		return 0x821B3B98;
		  /* 821B3B98h */ case   47:  		/* addi R6, R1, 224 */
		/* 821B3B98h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 821B3B98h case   47:*/		return 0x821B3B9C;
		  /* 821B3B9Ch */ case   48:  		/* mr R5, R31 */
		/* 821B3B9Ch case   48:*/		regs.R5 = regs.R31;
		/* 821B3B9Ch case   48:*/		return 0x821B3BA0;
		  /* 821B3BA0h */ case   49:  		/* mr R4, R30 */
		/* 821B3BA0h case   49:*/		regs.R4 = regs.R30;
		/* 821B3BA0h case   49:*/		return 0x821B3BA4;
		  /* 821B3BA4h */ case   50:  		/* mr R3, R14 */
		/* 821B3BA4h case   50:*/		regs.R3 = regs.R14;
		/* 821B3BA4h case   50:*/		return 0x821B3BA8;
		  /* 821B3BA8h */ case   51:  		/* bl -52664 */
		/* 821B3BA8h case   51:*/		regs.LR = 0x821B3BAC; return 0x821A6DF0;
		/* 821B3BA8h case   51:*/		return 0x821B3BAC;
		  /* 821B3BACh */ case   52:  		/* mr R30, R3 */
		/* 821B3BACh case   52:*/		regs.R30 = regs.R3;
		/* 821B3BACh case   52:*/		return 0x821B3BB0;
		  /* 821B3BB0h */ case   53:  		/* li R29, 1 */
		/* 821B3BB0h case   53:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821B3BB0h case   53:*/		return 0x821B3BB4;
		  /* 821B3BB4h */ case   54:  		/* b 52 */
		/* 821B3BB4h case   54:*/		return 0x821B3BE8;
		/* 821B3BB4h case   54:*/		return 0x821B3BB8;
	}
	return 0x821B3BB8;
} // Block from 821B3ADCh-821B3BB8h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821B3BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3BB8);
		  /* 821B3BB8h */ case    0:  		/* cmpwi CR6, R3, 1 */
		/* 821B3BB8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 821B3BB8h case    0:*/		return 0x821B3BBC;
		  /* 821B3BBCh */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821B3BBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821B3BE8;  }
		/* 821B3BBCh case    1:*/		return 0x821B3BC0;
		  /* 821B3BC0h */ case    2:  		/* lwz R11, <#[R24]> */
		/* 821B3BC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B3BC0h case    2:*/		return 0x821B3BC4;
		  /* 821B3BC4h */ case    3:  		/* addi R23, R23, 1 */
		/* 821B3BC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821B3BC4h case    3:*/		return 0x821B3BC8;
		  /* 821B3BC8h */ case    4:  		/* oris R11, R11, 32768 */
		/* 821B3BC8h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821B3BC8h case    4:*/		return 0x821B3BCC;
		  /* 821B3BCCh */ case    5:  		/* cmplwi CR6, R23, 8192 */
		/* 821B3BCCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00002000);
		/* 821B3BCCh case    5:*/		return 0x821B3BD0;
		  /* 821B3BD0h */ case    6:  		/* stw R11, <#[R24]> */
		/* 821B3BD0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B3BD0h case    6:*/		return 0x821B3BD4;
		  /* 821B3BD4h */ case    7:  		/* lwz R11, <#[R1 + 92]> */
		/* 821B3BD4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821B3BD4h case    7:*/		return 0x821B3BD8;
		  /* 821B3BD8h */ case    8:  		/* bc 12, CR6_LT, -860 */
		/* 821B3BD8h case    8:*/		if ( regs.CR[6].lt ) { return 0x821B387C;  }
		/* 821B3BD8h case    8:*/		return 0x821B3BDC;
		  /* 821B3BDCh */ case    9:  		/* mr R23, R15 */
		/* 821B3BDCh case    9:*/		regs.R23 = regs.R15;
		/* 821B3BDCh case    9:*/		return 0x821B3BE0;
		  /* 821B3BE0h */ case   10:  		/* b -868 */
		/* 821B3BE0h case   10:*/		return 0x821B387C;
		/* 821B3BE0h case   10:*/		return 0x821B3BE4;
	}
	return 0x821B3BE4;
} // Block from 821B3BB8h-821B3BE4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B3BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3BE4);
		  /* 821B3BE4h */ case    0:  		/* mr R30, R31 */
		/* 821B3BE4h case    0:*/		regs.R30 = regs.R31;
		/* 821B3BE4h case    0:*/		return 0x821B3BE8;
	}
	return 0x821B3BE8;
} // Block from 821B3BE4h-821B3BE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B3BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3BE8);
		  /* 821B3BE8h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821B3BE8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821B3BE8h case    0:*/		return 0x821B3BEC;
		  /* 821B3BECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B3BECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B3BF8;  }
		/* 821B3BECh case    1:*/		return 0x821B3BF0;
		  /* 821B3BF0h */ case    2:  		/* addi R26, R26, 1 */
		/* 821B3BF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821B3BF0h case    2:*/		return 0x821B3BF4;
		  /* 821B3BF4h */ case    3:  		/* b 24 */
		/* 821B3BF4h case    3:*/		return 0x821B3C0C;
		/* 821B3BF4h case    3:*/		return 0x821B3BF8;
	}
	return 0x821B3BF8;
} // Block from 821B3BE8h-821B3BF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B3BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3BF8);
		  /* 821B3BF8h */ case    0:  		/* addi R11, R23, 1 */
		/* 821B3BF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x1);
		/* 821B3BF8h case    0:*/		return 0x821B3BFC;
		  /* 821B3BFCh */ case    1:  		/* li R10, 8192 */
		/* 821B3BFCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2000);
		/* 821B3BFCh case    1:*/		return 0x821B3C00;
		  /* 821B3C00h */ case    2:  		/* subfc R10, R10, R11 */
		/* 821B3C00h case    2:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B3C00h case    2:*/		return 0x821B3C04;
		  /* 821B3C04h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821B3C04h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B3C04h case    3:*/		return 0x821B3C08;
		  /* 821B3C08h */ case    4:  		/* and R23, R10, R11 */
		/* 821B3C08h case    4:*/		cpu::op::and<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821B3C08h case    4:*/		return 0x821B3C0C;
	}
	return 0x821B3C0C;
} // Block from 821B3BF8h-821B3C0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B3C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3C0C);
		  /* 821B3C0Ch */ case    0:  		/* addi R27, R27, 1 */
		/* 821B3C0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821B3C0Ch case    0:*/		return 0x821B3C10;
		  /* 821B3C10h */ case    1:  		/* addi R28, R28, 4 */
		/* 821B3C10h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821B3C10h case    1:*/		return 0x821B3C14;
		  /* 821B3C14h */ case    2:  		/* b -300 */
		/* 821B3C14h case    2:*/		return 0x821B3AE8;
		/* 821B3C14h case    2:*/		return 0x821B3C18;
	}
	return 0x821B3C18;
} // Block from 821B3C0Ch-821B3C18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3C18);
		  /* 821B3C18h */ case    0:  		/* cmplwi CR6, R26, 1 */
		/* 821B3C18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821B3C18h case    0:*/		return 0x821B3C1C;
		  /* 821B3C1Ch */ case    1:  		/* bc 4, CR6_EQ, -940 */
		/* 821B3C1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3870;  }
		/* 821B3C1Ch case    1:*/		return 0x821B3C20;
		  /* 821B3C20h */ case    2:  		/* rlwinm R11, R11, 0, 19, 2 */
		/* 821B3C20h case    2:*/		cpu::op::rlwinm<0,0,19,2>(regs,&regs.R11,regs.R11);
		/* 821B3C20h case    2:*/		return 0x821B3C24;
		  /* 821B3C24h */ case    3:  		/* addi R23, R23, 1 */
		/* 821B3C24h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821B3C24h case    3:*/		return 0x821B3C28;
		  /* 821B3C28h */ case    4:  		/* stw R11, <#[R24]> */
		/* 821B3C28h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821B3C28h case    4:*/		return 0x821B3C2C;
		  /* 821B3C2Ch */ case    5:  		/* cmplwi CR6, R23, 8192 */
		/* 821B3C2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00002000);
		/* 821B3C2Ch case    5:*/		return 0x821B3C30;
		  /* 821B3C30h */ case    6:  		/* bc 12, CR6_LT, -960 */
		/* 821B3C30h case    6:*/		if ( regs.CR[6].lt ) { return 0x821B3870;  }
		/* 821B3C30h case    6:*/		return 0x821B3C34;
		  /* 821B3C34h */ case    7:  		/* mr R23, R15 */
		/* 821B3C34h case    7:*/		regs.R23 = regs.R15;
		/* 821B3C34h case    7:*/		return 0x821B3C38;
		  /* 821B3C38h */ case    8:  		/* b -968 */
		/* 821B3C38h case    8:*/		return 0x821B3870;
		/* 821B3C38h case    8:*/		return 0x821B3C3C;
	}
	return 0x821B3C3C;
} // Block from 821B3C18h-821B3C3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B3C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3C3C);
		  /* 821B3C3Ch */ case    0:  		/* lwz R30, <#[R1 + 108]> */
		/* 821B3C3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 821B3C3Ch case    0:*/		return 0x821B3C40;
		  /* 821B3C40h */ case    1:  		/* addi R11, R30, 4 */
		/* 821B3C40h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 821B3C40h case    1:*/		return 0x821B3C44;
		  /* 821B3C44h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 821B3C44h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821B3C44h case    2:*/		return 0x821B3C48;
		  /* 821B3C48h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3C48h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3C48h case    3:*/		return 0x821B3C4C;
		  /* 821B3C4Ch */ case    4:  		/* bc 4, CR0_EQ, 144 */
		/* 821B3C4Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B3CDC;  }
		/* 821B3C4Ch case    4:*/		return 0x821B3C50;
		  /* 821B3C50h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821B3C50h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B3C50h case    5:*/		return 0x821B3C54;
		  /* 821B3C54h */ case    6:  		/* bc 12, CR0_EQ, 136 */
		/* 821B3C54h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B3CDC;  }
		/* 821B3C54h case    6:*/		return 0x821B3C58;
		  /* 821B3C58h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821B3C58h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B3C58h case    7:*/		return 0x821B3C5C;
		  /* 821B3C5Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3C5Ch case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3C5Ch case    8:*/		return 0x821B3C60;
		  /* 821B3C60h */ case    9:  		/* addi R4, R11, -4 */
		/* 821B3C60h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B3C60h case    9:*/		return 0x821B3C64;
		  /* 821B3C64h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3C64h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3C64h case   10:*/		return 0x821B3C68;
		  /* 821B3C68h */ case   11:  		/* addi R10, R11, 3 */
		/* 821B3C68h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B3C68h case   11:*/		return 0x821B3C6C;
		  /* 821B3C6Ch */ case   12:  		/* addic. R11, R11, -1 */
		/* 821B3C6Ch case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B3C6Ch case   12:*/		return 0x821B3C70;
		  /* 821B3C70h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B3C70h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B3C70h case   13:*/		return 0x821B3C74;
		  /* 821B3C74h */ case   14:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B3C74h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B3C74h case   14:*/		return 0x821B3C78;
		  /* 821B3C78h */ case   15:  		/* stw R11, <#[R4 + 8]> */
		/* 821B3C78h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B3C78h case   15:*/		return 0x821B3C7C;
		  /* 821B3C7Ch */ case   16:  		/* bc 4, CR0_EQ, 60 */
		/* 821B3C7Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B3CB8;  }
		/* 821B3C7Ch case   16:*/		return 0x821B3C80;
		  /* 821B3C80h */ case   17:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B3C80h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B3C80h case   17:*/		return 0x821B3C84;
		  /* 821B3C84h */ case   18:  		/* mr R3, R30 */
		/* 821B3C84h case   18:*/		regs.R3 = regs.R30;
		/* 821B3C84h case   18:*/		return 0x821B3C88;
		  /* 821B3C88h */ case   19:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B3C88h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3C88h case   19:*/		return 0x821B3C8C;
		  /* 821B3C8Ch */ case   20:  		/* lwz R9, <#[R11]> */
		/* 821B3C8Ch case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3C8Ch case   20:*/		return 0x821B3C90;
		  /* 821B3C90h */ case   21:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3C90h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3C90h case   21:*/		return 0x821B3C94;
		  /* 821B3C94h */ case   22:  		/* stw R9, <#[R10]> */
		/* 821B3C94h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3C94h case   22:*/		return 0x821B3C98;
		  /* 821B3C98h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 821B3C98h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3C98h case   23:*/		return 0x821B3C9C;
		  /* 821B3C9Ch */ case   24:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3C9Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3C9Ch case   24:*/		return 0x821B3CA0;
		  /* 821B3CA0h */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3CA0h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3CA0h case   25:*/		return 0x821B3CA4;
		  /* 821B3CA4h */ case   26:  		/* stw R11, <#[R10]> */
		/* 821B3CA4h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3CA4h case   26:*/		return 0x821B3CA8;
		  /* 821B3CA8h */ case   27:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B3CA8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B3CA8h case   27:*/		return 0x821B3CAC;
		  /* 821B3CACh */ case   28:  		/* addi R11, R11, 4 */
		/* 821B3CACh case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B3CACh case   28:*/		return 0x821B3CB0;
		  /* 821B3CB0h */ case   29:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B3CB0h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B3CB0h case   29:*/		return 0x821B3CB4;
		  /* 821B3CB4h */ case   30:  		/* bl -401068 */
		/* 821B3CB4h case   30:*/		regs.LR = 0x821B3CB8; return 0x82151E08;
		/* 821B3CB4h case   30:*/		return 0x821B3CB8;
	}
	return 0x821B3CB8;
} // Block from 821B3C3Ch-821B3CB8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821B3CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3CB8);
		  /* 821B3CB8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821B3CB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3CB8h case    0:*/		return 0x821B3CBC;
		  /* 821B3CBCh */ case    1:  		/* li R6, 0 */
		/* 821B3CBCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B3CBCh case    1:*/		return 0x821B3CC0;
		  /* 821B3CC0h */ case    2:  		/* mr R4, R31 */
		/* 821B3CC0h case    2:*/		regs.R4 = regs.R31;
		/* 821B3CC0h case    2:*/		return 0x821B3CC4;
		  /* 821B3CC4h */ case    3:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821B3CC4h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821B3CC4h case    3:*/		return 0x821B3CC8;
		  /* 821B3CC8h */ case    4:  		/* mr R3, R14 */
		/* 821B3CC8h case    4:*/		regs.R3 = regs.R14;
		/* 821B3CC8h case    4:*/		return 0x821B3CCC;
		  /* 821B3CCCh */ case    5:  		/* addi R11, R11, 6 */
		/* 821B3CCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821B3CCCh case    5:*/		return 0x821B3CD0;
		  /* 821B3CD0h */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B3CD0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B3CD0h case    6:*/		return 0x821B3CD4;
		  /* 821B3CD4h */ case    7:  		/* bl -290436 */
		/* 821B3CD4h case    7:*/		regs.LR = 0x821B3CD8; return 0x8216CE50;
		/* 821B3CD4h case    7:*/		return 0x821B3CD8;
		  /* 821B3CD8h */ case    8:  		/* b -152 */
		/* 821B3CD8h case    8:*/		return 0x821B3C40;
		/* 821B3CD8h case    8:*/		return 0x821B3CDC;
	}
	return 0x821B3CDC;
} // Block from 821B3CB8h-821B3CDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B3CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3CDC);
		  /* 821B3CDCh */ case    0:  		/* li R6, 50 */
		/* 821B3CDCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x32);
		/* 821B3CDCh case    0:*/		return 0x821B3CE0;
		  /* 821B3CE0h */ case    1:  		/* li R5, 8 */
		/* 821B3CE0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821B3CE0h case    1:*/		return 0x821B3CE4;
		  /* 821B3CE4h */ case    2:  		/* mr R4, R30 */
		/* 821B3CE4h case    2:*/		regs.R4 = regs.R30;
		/* 821B3CE4h case    2:*/		return 0x821B3CE8;
		  /* 821B3CE8h */ case    3:  		/* mr R3, R14 */
		/* 821B3CE8h case    3:*/		regs.R3 = regs.R14;
		/* 821B3CE8h case    3:*/		return 0x821B3CEC;
		  /* 821B3CECh */ case    4:  		/* bl -290460 */
		/* 821B3CECh case    4:*/		regs.LR = 0x821B3CF0; return 0x8216CE50;
		/* 821B3CECh case    4:*/		return 0x821B3CF0;
		  /* 821B3CF0h */ case    5:  		/* lwz R17, <#[R1 + 96]> */
		/* 821B3CF0h case    5:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000060) );
		/* 821B3CF0h case    5:*/		return 0x821B3CF4;
		  /* 821B3CF4h */ case    6:  		/* mr R3, R14 */
		/* 821B3CF4h case    6:*/		regs.R3 = regs.R14;
		/* 821B3CF4h case    6:*/		return 0x821B3CF8;
		  /* 821B3CF8h */ case    7:  		/* mr R4, R17 */
		/* 821B3CF8h case    7:*/		regs.R4 = regs.R17;
		/* 821B3CF8h case    7:*/		return 0x821B3CFC;
		  /* 821B3CFCh */ case    8:  		/* bl 459212 */
		/* 821B3CFCh case    8:*/		regs.LR = 0x821B3D00; return 0x82223EC8;
		/* 821B3CFCh case    8:*/		return 0x821B3D00;
		  /* 821B3D00h */ case    9:  		/* lwz R11, <#[R14 + 40]> */
		/* 821B3D00h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B3D00h case    9:*/		return 0x821B3D04;
		  /* 821B3D04h */ case   10:  		/* stw R15, <#[R14 + 664]> */
		/* 821B3D04h case   10:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R14 + 0x00000298) );
		/* 821B3D04h case   10:*/		return 0x821B3D08;
		  /* 821B3D08h */ case   11:  		/* oris R11, R11, 2560 */
		/* 821B3D08h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xA00);
		/* 821B3D08h case   11:*/		return 0x821B3D0C;
		  /* 821B3D0Ch */ case   12:  		/* stw R11, <#[R14 + 40]> */
		/* 821B3D0Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B3D0Ch case   12:*/		return 0x821B3D10;
		  /* 821B3D10h */ case   13:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B3D10h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B3D10h case   13:*/		return 0x821B3D14;
		  /* 821B3D14h */ case   14:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B3D14h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B3D14h case   14:*/		return 0x821B3D18;
		  /* 821B3D18h */ case   15:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3D18h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3D18h case   15:*/		return 0x821B3D1C;
		  /* 821B3D1Ch */ case   16:  		/* bc 4, CR0_EQ, 196 */
		/* 821B3D1Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x821B3DE0;  }
		/* 821B3D1Ch case   16:*/		return 0x821B3D20;
		  /* 821B3D20h */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 821B3D20h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B3D20h case   17:*/		return 0x821B3D24;
		  /* 821B3D24h */ case   18:  		/* bc 12, CR0_EQ, 188 */
		/* 821B3D24h case   18:*/		if ( regs.CR[0].eq ) { return 0x821B3DE0;  }
		/* 821B3D24h case   18:*/		return 0x821B3D28;
		  /* 821B3D28h */ case   19:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B3D28h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B3D28h case   19:*/		return 0x821B3D2C;
		  /* 821B3D2Ch */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B3D2Ch case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B3D2Ch case   20:*/		return 0x821B3D30;
		  /* 821B3D30h */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 821B3D30h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B3D3C;  }
		/* 821B3D30h case   21:*/		return 0x821B3D34;
		  /* 821B3D34h */ case   22:  		/* mr R4, R15 */
		/* 821B3D34h case   22:*/		regs.R4 = regs.R15;
		/* 821B3D34h case   22:*/		return 0x821B3D38;
		  /* 821B3D38h */ case   23:  		/* b 16 */
		/* 821B3D38h case   23:*/		return 0x821B3D48;
		/* 821B3D38h case   23:*/		return 0x821B3D3C;
	}
	return 0x821B3D3C;
} // Block from 821B3CDCh-821B3D3Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B3D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3D3C);
		  /* 821B3D3Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B3D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B3D3Ch case    0:*/		return 0x821B3D40;
		  /* 821B3D40h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3D40h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3D40h case    1:*/		return 0x821B3D44;
		  /* 821B3D44h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B3D44h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B3D44h case    2:*/		return 0x821B3D48;
	}
	return 0x821B3D48;
} // Block from 821B3D3Ch-821B3D48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3D48);
		  /* 821B3D48h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B3D48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B3D48h case    0:*/		return 0x821B3D4C;
		  /* 821B3D4Ch */ case    1:  		/* addi R10, R11, 3 */
		/* 821B3D4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B3D4Ch case    1:*/		return 0x821B3D50;
		  /* 821B3D50h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B3D50h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B3D50h case    2:*/		return 0x821B3D54;
		  /* 821B3D54h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B3D54h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B3D54h case    3:*/		return 0x821B3D58;
		  /* 821B3D58h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B3D58h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B3D58h case    4:*/		return 0x821B3D5C;
		  /* 821B3D5Ch */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B3D5Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B3D5Ch case    5:*/		return 0x821B3D60;
		  /* 821B3D60h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B3D60h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B3D98;  }
		/* 821B3D60h case    6:*/		return 0x821B3D64;
		  /* 821B3D64h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B3D64h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B3D64h case    7:*/		return 0x821B3D68;
		  /* 821B3D68h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B3D68h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3D68h case    8:*/		return 0x821B3D6C;
		  /* 821B3D6Ch */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B3D6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3D6Ch case    9:*/		return 0x821B3D70;
		  /* 821B3D70h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3D70h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3D70h case   10:*/		return 0x821B3D74;
		  /* 821B3D74h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B3D74h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3D74h case   11:*/		return 0x821B3D78;
		  /* 821B3D78h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B3D78h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3D78h case   12:*/		return 0x821B3D7C;
		  /* 821B3D7Ch */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3D7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3D7Ch case   13:*/		return 0x821B3D80;
		  /* 821B3D80h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3D80h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3D80h case   14:*/		return 0x821B3D84;
		  /* 821B3D84h */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B3D84h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3D84h case   15:*/		return 0x821B3D88;
		  /* 821B3D88h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B3D88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B3D88h case   16:*/		return 0x821B3D8C;
		  /* 821B3D8Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 821B3D8Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B3D8Ch case   17:*/		return 0x821B3D90;
		  /* 821B3D90h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B3D90h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B3D90h case   18:*/		return 0x821B3D94;
		  /* 821B3D94h */ case   19:  		/* bl -401292 */
		/* 821B3D94h case   19:*/		regs.LR = 0x821B3D98; return 0x82151E08;
		/* 821B3D94h case   19:*/		return 0x821B3D98;
	}
	return 0x821B3D98;
} // Block from 821B3D48h-821B3D98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B3D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3D98);
		  /* 821B3D98h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3D98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3D98h case    0:*/		return 0x821B3D9C;
		  /* 821B3D9Ch */ case    1:  		/* rlwinm R10, R11, 0, 6, 4 */
		/* 821B3D9Ch case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R11);
		/* 821B3D9Ch case    1:*/		return 0x821B3DA0;
		  /* 821B3DA0h */ case    2:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821B3DA0h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821B3DA0h case    2:*/		return 0x821B3DA4;
		  /* 821B3DA4h */ case    3:  		/* stw R10, <#[R31 + 8]> */
		/* 821B3DA4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3DA4h case    3:*/		return 0x821B3DA8;
		  /* 821B3DA8h */ case    4:  		/* cmplwi CR6, R11, 115 */
		/* 821B3DA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000073);
		/* 821B3DA8h case    4:*/		return 0x821B3DAC;
		  /* 821B3DACh */ case    5:  		/* bc 12, CR6_EQ, -156 */
		/* 821B3DACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821B3D10;  }
		/* 821B3DACh case    5:*/		return 0x821B3DB0;
		  /* 821B3DB0h */ case    6:  		/* cmplwi CR6, R11, 125 */
		/* 821B3DB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821B3DB0h case    6:*/		return 0x821B3DB4;
		  /* 821B3DB4h */ case    7:  		/* bc 12, CR6_EQ, -164 */
		/* 821B3DB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B3D10;  }
		/* 821B3DB4h case    7:*/		return 0x821B3DB8;
		  /* 821B3DB8h */ case    8:  		/* mr R3, R31 */
		/* 821B3DB8h case    8:*/		regs.R3 = regs.R31;
		/* 821B3DB8h case    8:*/		return 0x821B3DBC;
		  /* 821B3DBCh */ case    9:  		/* bl -324668 */
		/* 821B3DBCh case    9:*/		regs.LR = 0x821B3DC0; return 0x82164980;
		/* 821B3DBCh case    9:*/		return 0x821B3DC0;
		  /* 821B3DC0h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B3DC0h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B3DC0h case   10:*/		return 0x821B3DC4;
		  /* 821B3DC4h */ case   11:  		/* bc 12, CR0_EQ, -180 */
		/* 821B3DC4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B3D10;  }
		/* 821B3DC4h case   11:*/		return 0x821B3DC8;
		  /* 821B3DC8h */ case   12:  		/* li R6, 1 */
		/* 821B3DC8h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B3DC8h case   12:*/		return 0x821B3DCC;
		  /* 821B3DCCh */ case   13:  		/* lwz R5, <#[R14 + 652]> */
		/* 821B3DCCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B3DCCh case   13:*/		return 0x821B3DD0;
		  /* 821B3DD0h */ case   14:  		/* mr R4, R31 */
		/* 821B3DD0h case   14:*/		regs.R4 = regs.R31;
		/* 821B3DD0h case   14:*/		return 0x821B3DD4;
		  /* 821B3DD4h */ case   15:  		/* mr R3, R14 */
		/* 821B3DD4h case   15:*/		regs.R3 = regs.R14;
		/* 821B3DD4h case   15:*/		return 0x821B3DD8;
		  /* 821B3DD8h */ case   16:  		/* bl 488944 */
		/* 821B3DD8h case   16:*/		regs.LR = 0x821B3DDC; return 0x8222B3C8;
		/* 821B3DD8h case   16:*/		return 0x821B3DDC;
		  /* 821B3DDCh */ case   17:  		/* b -204 */
		/* 821B3DDCh case   17:*/		return 0x821B3D10;
		/* 821B3DDCh case   17:*/		return 0x821B3DE0;
	}
	return 0x821B3DE0;
} // Block from 821B3D98h-821B3DE0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B3DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3DE0);
		  /* 821B3DE0h */ case    0:  		/* addi R11, R1, 160 */
		/* 821B3DE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 821B3DE0h case    0:*/		return 0x821B3DE4;
		  /* 821B3DE4h */ case    1:  		/* li R31, 7 */
		/* 821B3DE4h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x7);
		/* 821B3DE4h case    1:*/		return 0x821B3DE8;
		  /* 821B3DE8h */ case    2:  		/* addi R30, R11, -4 */
		/* 821B3DE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 821B3DE8h case    2:*/		return 0x821B3DEC;
		  /* 821B3DECh */ case    3:  		/* li R5, 37 */
		/* 821B3DECh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x25);
		/* 821B3DECh case    3:*/		return 0x821B3DF0;
		  /* 821B3DF0h */ case    4:  		/* li R4, 16 */
		/* 821B3DF0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 821B3DF0h case    4:*/		return 0x821B3DF4;
		  /* 821B3DF4h */ case    5:  		/* mr R3, R14 */
		/* 821B3DF4h case    5:*/		regs.R3 = regs.R14;
		/* 821B3DF4h case    5:*/		return 0x821B3DF8;
		  /* 821B3DF8h */ case    6:  		/* bl -324872 */
		/* 821B3DF8h case    6:*/		regs.LR = 0x821B3DFC; return 0x821648F0;
		/* 821B3DF8h case    6:*/		return 0x821B3DFC;
		  /* 821B3DFCh */ case    7:  		/* stwu R3, <#[R30 + 4]> */
		/* 821B3DFCh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821B3DFCh case    7:*/		return 0x821B3E00;
		  /* 821B3E00h */ case    8:  		/* bl -86336 */
		/* 821B3E00h case    8:*/		regs.LR = 0x821B3E04; return 0x8219ECC0;
		/* 821B3E00h case    8:*/		return 0x821B3E04;
		  /* 821B3E04h */ case    9:  		/* addic. R31, R31, -1 */
		/* 821B3E04h case    9:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821B3E04h case    9:*/		return 0x821B3E08;
		  /* 821B3E08h */ case   10:  		/* bc 4, CR0_EQ, -28 */
		/* 821B3E08h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B3DEC;  }
		/* 821B3E08h case   10:*/		return 0x821B3E0C;
		  /* 821B3E0Ch */ case   11:  		/* lwz R11, <#[R14 + 4]> */
		/* 821B3E0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000004) );
		/* 821B3E0Ch case   11:*/		return 0x821B3E10;
		  /* 821B3E10h */ case   12:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B3E10h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3E10h case   12:*/		return 0x821B3E14;
		  /* 821B3E14h */ case   13:  		/* addic R10, R10, -1 */
		/* 821B3E14h case   13:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B3E14h case   13:*/		return 0x821B3E18;
		  /* 821B3E18h */ case   14:  		/* subfe R10, R10, R10 */
		/* 821B3E18h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B3E18h case   14:*/		return 0x821B3E1C;
		  /* 821B3E1Ch */ case   15:  		/* and R11, R10, R11 */
		/* 821B3E1Ch case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B3E1Ch case   15:*/		return 0x821B3E20;
		  /* 821B3E20h */ case   16:  		/* lwz R31, <#[R11 + 20]> */
		/* 821B3E20h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000014) );
		/* 821B3E20h case   16:*/		return 0x821B3E24;
		  /* 821B3E24h */ case   17:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B3E24h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B3E24h case   17:*/		return 0x821B3E28;
		  /* 821B3E28h */ case   18:  		/* bc 4, CR0_EQ, 80 */
		/* 821B3E28h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821B3E78;  }
		/* 821B3E28h case   18:*/		return 0x821B3E2C;
		  /* 821B3E2Ch */ case   19:  		/* cmplwi CR0, R31, 0 */
		/* 821B3E2Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B3E2Ch case   19:*/		return 0x821B3E30;
		  /* 821B3E30h */ case   20:  		/* bc 12, CR0_EQ, 72 */
		/* 821B3E30h case   20:*/		if ( regs.CR[0].eq ) { return 0x821B3E78;  }
		/* 821B3E30h case   20:*/		return 0x821B3E34;
		  /* 821B3E34h */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3E34h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3E34h case   21:*/		return 0x821B3E38;
		  /* 821B3E38h */ case   22:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B3E38h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B3E38h case   22:*/		return 0x821B3E3C;
		  /* 821B3E3Ch */ case   23:  		/* cmplwi CR6, R11, 124 */
		/* 821B3E3Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821B3E3Ch case   23:*/		return 0x821B3E40;
		  /* 821B3E40h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 821B3E40h case   24:*/		if ( regs.CR[6].eq ) { return 0x821B3E4C;  }
		/* 821B3E40h case   24:*/		return 0x821B3E44;
		  /* 821B3E44h */ case   25:  		/* cmplwi CR6, R11, 113 */
		/* 821B3E44h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000071);
		/* 821B3E44h case   25:*/		return 0x821B3E48;
		  /* 821B3E48h */ case   26:  		/* bc 4, CR6_EQ, 24 */
		/* 821B3E48h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821B3E60;  }
		/* 821B3E48h case   26:*/		return 0x821B3E4C;
	}
	return 0x821B3E4C;
} // Block from 821B3DE0h-821B3E4Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B3E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3E4C);
		  /* 821B3E4Ch */ case    0:  		/* mr R6, R31 */
		/* 821B3E4Ch case    0:*/		regs.R6 = regs.R31;
		/* 821B3E4Ch case    0:*/		return 0x821B3E50;
		  /* 821B3E50h */ case    1:  		/* lwz R4, <#[R1 + 160]> */
		/* 821B3E50h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A0) );
		/* 821B3E50h case    1:*/		return 0x821B3E54;
		  /* 821B3E54h */ case    2:  		/* li R5, 0 */
		/* 821B3E54h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B3E54h case    2:*/		return 0x821B3E58;
		  /* 821B3E58h */ case    3:  		/* mr R3, R14 */
		/* 821B3E58h case    3:*/		regs.R3 = regs.R14;
		/* 821B3E58h case    3:*/		return 0x821B3E5C;
		  /* 821B3E5Ch */ case    4:  		/* bl -85788 */
		/* 821B3E5Ch case    4:*/		regs.LR = 0x821B3E60; return 0x8219EF40;
		/* 821B3E5Ch case    4:*/		return 0x821B3E60;
	}
	return 0x821B3E60;
} // Block from 821B3E4Ch-821B3E60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B3E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3E60);
		  /* 821B3E60h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B3E60h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B3E60h case    0:*/		return 0x821B3E64;
		  /* 821B3E64h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B3E64h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B3E64h case    1:*/		return 0x821B3E68;
		  /* 821B3E68h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B3E68h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B3E68h case    2:*/		return 0x821B3E6C;
		  /* 821B3E6Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B3E6Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3E78;  }
		/* 821B3E6Ch case    3:*/		return 0x821B3E70;
		  /* 821B3E70h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B3E70h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B3E70h case    4:*/		return 0x821B3E74;
		  /* 821B3E74h */ case    5:  		/* bc 4, CR6_EQ, -64 */
		/* 821B3E74h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B3E34;  }
		/* 821B3E74h case    5:*/		return 0x821B3E78;
	}
	return 0x821B3E78;
} // Block from 821B3E60h-821B3E78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B3E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3E78);
		  /* 821B3E78h */ case    0:  		/* lwz R31, <#[R17 + 28]> */
		/* 821B3E78h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B3E78h case    0:*/		return 0x821B3E7C;
		  /* 821B3E7Ch */ case    1:  		/* addi R11, R17, 24 */
		/* 821B3E7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B3E7Ch case    1:*/		return 0x821B3E80;
		  /* 821B3E80h */ case    2:  		/* mr R30, R15 */
		/* 821B3E80h case    2:*/		regs.R30 = regs.R15;
		/* 821B3E80h case    2:*/		return 0x821B3E84;
		  /* 821B3E84h */ case    3:  		/* rlwinm. R10, R31, 0, 31, 31 */
		/* 821B3E84h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R31);
		/* 821B3E84h case    3:*/		return 0x821B3E88;
		  /* 821B3E88h */ case    4:  		/* bc 4, CR0_EQ, 160 */
		/* 821B3E88h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B3F28;  }
		/* 821B3E88h case    4:*/		return 0x821B3E8C;
		  /* 821B3E8Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821B3E8Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B3E8Ch case    5:*/		return 0x821B3E90;
		  /* 821B3E90h */ case    6:  		/* bc 12, CR0_EQ, 152 */
		/* 821B3E90h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B3F28;  }
		/* 821B3E90h case    6:*/		return 0x821B3E94;
		  /* 821B3E94h */ case    7:  		/* addi R7, R1, 160 */
		/* 821B3E94h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 821B3E94h case    7:*/		return 0x821B3E98;
		  /* 821B3E98h */ case    8:  		/* li R6, 0 */
		/* 821B3E98h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B3E98h case    8:*/		return 0x821B3E9C;
		  /* 821B3E9Ch */ case    9:  		/* mr R5, R31 */
		/* 821B3E9Ch case    9:*/		regs.R5 = regs.R31;
		/* 821B3E9Ch case    9:*/		return 0x821B3EA0;
		  /* 821B3EA0h */ case   10:  		/* mr R4, R17 */
		/* 821B3EA0h case   10:*/		regs.R4 = regs.R17;
		/* 821B3EA0h case   10:*/		return 0x821B3EA4;
		  /* 821B3EA4h */ case   11:  		/* mr R3, R14 */
		/* 821B3EA4h case   11:*/		regs.R3 = regs.R14;
		/* 821B3EA4h case   11:*/		return 0x821B3EA8;
		  /* 821B3EA8h */ case   12:  		/* bl -12544 */
		/* 821B3EA8h case   12:*/		regs.LR = 0x821B3EAC; return 0x821B0DA8;
		/* 821B3EA8h case   12:*/		return 0x821B3EAC;
		  /* 821B3EACh */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 821B3EACh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B3EACh case   13:*/		return 0x821B3EB0;
		  /* 821B3EB0h */ case   14:  		/* bc 12, CR6_EQ, 68 */
		/* 821B3EB0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821B3EF4;  }
		/* 821B3EB0h case   14:*/		return 0x821B3EB4;
		  /* 821B3EB4h */ case   15:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821B3EB4h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821B3EB4h case   15:*/		return 0x821B3EB8;
		  /* 821B3EB8h */ case   16:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B3EB8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B3EB8h case   16:*/		return 0x821B3EBC;
		  /* 821B3EBCh */ case   17:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B3EBCh case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3EBCh case   17:*/		return 0x821B3EC0;
		  /* 821B3EC0h */ case   18:  		/* addic R10, R10, -1 */
		/* 821B3EC0h case   18:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B3EC0h case   18:*/		return 0x821B3EC4;
		  /* 821B3EC4h */ case   19:  		/* subfe R10, R10, R10 */
		/* 821B3EC4h case   19:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B3EC4h case   19:*/		return 0x821B3EC8;
		  /* 821B3EC8h */ case   20:  		/* and R10, R10, R11 */
		/* 821B3EC8h case   20:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B3EC8h case   20:*/		return 0x821B3ECC;
		  /* 821B3ECCh */ case   21:  		/* cmplw CR6, R31, R10 */
		/* 821B3ECCh case   21:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B3ECCh case   21:*/		return 0x821B3ED0;
		  /* 821B3ED0h */ case   22:  		/* bc 4, CR6_EQ, 20 */
		/* 821B3ED0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821B3EE4;  }
		/* 821B3ED0h case   22:*/		return 0x821B3ED4;
		  /* 821B3ED4h */ case   23:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B3ED4h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B3ED4h case   23:*/		return 0x821B3ED8;
		  /* 821B3ED8h */ case   24:  		/* mr R30, R31 */
		/* 821B3ED8h case   24:*/		regs.R30 = regs.R31;
		/* 821B3ED8h case   24:*/		return 0x821B3EDC;
		  /* 821B3EDCh */ case   25:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B3EDCh case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B3EDCh case   25:*/		return 0x821B3EE0;
		  /* 821B3EE0h */ case   26:  		/* b 56 */
		/* 821B3EE0h case   26:*/		return 0x821B3F18;
		/* 821B3EE0h case   26:*/		return 0x821B3EE4;
	}
	return 0x821B3EE4;
} // Block from 821B3E78h-821B3EE4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B3EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3EE4);
		  /* 821B3EE4h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3EE4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3EE4h case    0:*/		return 0x821B3EE8;
		  /* 821B3EE8h */ case    1:  		/* bc 4, CR0_EQ, 64 */
		/* 821B3EE8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B3F28;  }
		/* 821B3EE8h case    1:*/		return 0x821B3EEC;
		  /* 821B3EECh */ case    2:  		/* mr R31, R11 */
		/* 821B3EECh case    2:*/		regs.R31 = regs.R11;
		/* 821B3EECh case    2:*/		return 0x821B3EF0;
		  /* 821B3EF0h */ case    3:  		/* b 48 */
		/* 821B3EF0h case    3:*/		return 0x821B3F20;
		/* 821B3EF0h case    3:*/		return 0x821B3EF4;
	}
	return 0x821B3EF4;
} // Block from 821B3EE4h-821B3EF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B3EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3EF4);
		  /* 821B3EF4h */ case    0:  		/* lwz R10, <#[R17 + 28]> */
		/* 821B3EF4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B3EF4h case    0:*/		return 0x821B3EF8;
		  /* 821B3EF8h */ case    1:  		/* addi R11, R17, 24 */
		/* 821B3EF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B3EF8h case    1:*/		return 0x821B3EFC;
		  /* 821B3EFCh */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821B3EFCh case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B3EFCh case    2:*/		return 0x821B3F00;
		  /* 821B3F00h */ case    3:  		/* addic R9, R9, -1 */
		/* 821B3F00h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B3F00h case    3:*/		return 0x821B3F04;
		  /* 821B3F04h */ case    4:  		/* subfe R9, R9, R9 */
		/* 821B3F04h case    4:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B3F04h case    4:*/		return 0x821B3F08;
		  /* 821B3F08h */ case    5:  		/* and R10, R9, R10 */
		/* 821B3F08h case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821B3F08h case    5:*/		return 0x821B3F0C;
		  /* 821B3F0Ch */ case    6:  		/* cmplw CR6, R31, R10 */
		/* 821B3F0Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821B3F0Ch case    6:*/		return 0x821B3F10;
		  /* 821B3F10h */ case    7:  		/* bc 12, CR6_EQ, -60 */
		/* 821B3F10h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B3ED4;  }
		/* 821B3F10h case    7:*/		return 0x821B3F14;
		  /* 821B3F14h */ case    8:  		/* lwz R31, <#[R11 + 4]> */
		/* 821B3F14h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3F14h case    8:*/		return 0x821B3F18;
	}
	return 0x821B3F18;
} // Block from 821B3EF4h-821B3F18h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B3F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3F18);
		  /* 821B3F18h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B3F18h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B3F18h case    0:*/		return 0x821B3F1C;
		  /* 821B3F1Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B3F1Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B3F28;  }
		/* 821B3F1Ch case    1:*/		return 0x821B3F20;
	}
	return 0x821B3F20;
} // Block from 821B3F18h-821B3F20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3F20);
		  /* 821B3F20h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821B3F20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B3F20h case    0:*/		return 0x821B3F24;
		  /* 821B3F24h */ case    1:  		/* bc 4, CR6_EQ, -144 */
		/* 821B3F24h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3E94;  }
		/* 821B3F24h case    1:*/		return 0x821B3F28;
	}
	return 0x821B3F28;
} // Block from 821B3F20h-821B3F28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B3F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3F28);
		  /* 821B3F28h */ case    0:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B3F28h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B3F28h case    0:*/		return 0x821B3F2C;
		  /* 821B3F2Ch */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B3F2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B3F2Ch case    1:*/		return 0x821B3F30;
		  /* 821B3F30h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B3F30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B3F30h case    2:*/		return 0x821B3F34;
		  /* 821B3F34h */ case    3:  		/* bc 4, CR0_EQ, 164 */
		/* 821B3F34h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B3FD8;  }
		/* 821B3F34h case    3:*/		return 0x821B3F38;
		  /* 821B3F38h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B3F38h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B3F38h case    4:*/		return 0x821B3F3C;
		  /* 821B3F3Ch */ case    5:  		/* bc 12, CR0_EQ, 156 */
		/* 821B3F3Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821B3FD8;  }
		/* 821B3F3Ch case    5:*/		return 0x821B3F40;
		  /* 821B3F40h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B3F40h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B3F40h case    6:*/		return 0x821B3F44;
		  /* 821B3F44h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B3F44h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B3F44h case    7:*/		return 0x821B3F48;
		  /* 821B3F48h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821B3F48h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B3F54;  }
		/* 821B3F48h case    8:*/		return 0x821B3F4C;
		  /* 821B3F4Ch */ case    9:  		/* mr R4, R15 */
		/* 821B3F4Ch case    9:*/		regs.R4 = regs.R15;
		/* 821B3F4Ch case    9:*/		return 0x821B3F50;
		  /* 821B3F50h */ case   10:  		/* b 16 */
		/* 821B3F50h case   10:*/		return 0x821B3F60;
		/* 821B3F50h case   10:*/		return 0x821B3F54;
	}
	return 0x821B3F54;
} // Block from 821B3F28h-821B3F54h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B3F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3F54);
		  /* 821B3F54h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B3F54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B3F54h case    0:*/		return 0x821B3F58;
		  /* 821B3F58h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B3F58h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B3F58h case    1:*/		return 0x821B3F5C;
		  /* 821B3F5Ch */ case    2:  		/* addi R4, R11, -4 */
		/* 821B3F5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B3F5Ch case    2:*/		return 0x821B3F60;
	}
	return 0x821B3F60;
} // Block from 821B3F54h-821B3F60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B3F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3F60);
		  /* 821B3F60h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B3F60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B3F60h case    0:*/		return 0x821B3F64;
		  /* 821B3F64h */ case    1:  		/* addi R10, R11, 3 */
		/* 821B3F64h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B3F64h case    1:*/		return 0x821B3F68;
		  /* 821B3F68h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B3F68h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B3F68h case    2:*/		return 0x821B3F6C;
		  /* 821B3F6Ch */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B3F6Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B3F6Ch case    3:*/		return 0x821B3F70;
		  /* 821B3F70h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B3F70h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B3F70h case    4:*/		return 0x821B3F74;
		  /* 821B3F74h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B3F74h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B3F74h case    5:*/		return 0x821B3F78;
		  /* 821B3F78h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B3F78h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B3FB0;  }
		/* 821B3F78h case    6:*/		return 0x821B3F7C;
		  /* 821B3F7Ch */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B3F7Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B3F7Ch case    7:*/		return 0x821B3F80;
		  /* 821B3F80h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B3F80h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3F80h case    8:*/		return 0x821B3F84;
		  /* 821B3F84h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B3F84h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3F84h case    9:*/		return 0x821B3F88;
		  /* 821B3F88h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3F88h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3F88h case   10:*/		return 0x821B3F8C;
		  /* 821B3F8Ch */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B3F8Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3F8Ch case   11:*/		return 0x821B3F90;
		  /* 821B3F90h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B3F90h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B3F90h case   12:*/		return 0x821B3F94;
		  /* 821B3F94h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B3F94h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B3F94h case   13:*/		return 0x821B3F98;
		  /* 821B3F98h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B3F98h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B3F98h case   14:*/		return 0x821B3F9C;
		  /* 821B3F9Ch */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B3F9Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B3F9Ch case   15:*/		return 0x821B3FA0;
		  /* 821B3FA0h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B3FA0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B3FA0h case   16:*/		return 0x821B3FA4;
		  /* 821B3FA4h */ case   17:  		/* addi R11, R11, 4 */
		/* 821B3FA4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B3FA4h case   17:*/		return 0x821B3FA8;
		  /* 821B3FA8h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B3FA8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B3FA8h case   18:*/		return 0x821B3FAC;
		  /* 821B3FACh */ case   19:  		/* bl -401828 */
		/* 821B3FACh case   19:*/		regs.LR = 0x821B3FB0; return 0x82151E08;
		/* 821B3FACh case   19:*/		return 0x821B3FB0;
	}
	return 0x821B3FB0;
} // Block from 821B3F60h-821B3FB0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B3FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3FB0);
		  /* 821B3FB0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B3FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3FB0h case    0:*/		return 0x821B3FB4;
		  /* 821B3FB4h */ case    1:  		/* addi R7, R1, 160 */
		/* 821B3FB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 821B3FB4h case    1:*/		return 0x821B3FB8;
		  /* 821B3FB8h */ case    2:  		/* li R6, 0 */
		/* 821B3FB8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B3FB8h case    2:*/		return 0x821B3FBC;
		  /* 821B3FBCh */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B3FBCh case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B3FBCh case    3:*/		return 0x821B3FC0;
		  /* 821B3FC0h */ case    4:  		/* mr R5, R31 */
		/* 821B3FC0h case    4:*/		regs.R5 = regs.R31;
		/* 821B3FC0h case    4:*/		return 0x821B3FC4;
		  /* 821B3FC4h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821B3FC4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B3FC4h case    5:*/		return 0x821B3FC8;
		  /* 821B3FC8h */ case    6:  		/* mr R4, R17 */
		/* 821B3FC8h case    6:*/		regs.R4 = regs.R17;
		/* 821B3FC8h case    6:*/		return 0x821B3FCC;
		  /* 821B3FCCh */ case    7:  		/* mr R3, R14 */
		/* 821B3FCCh case    7:*/		regs.R3 = regs.R14;
		/* 821B3FCCh case    7:*/		return 0x821B3FD0;
		  /* 821B3FD0h */ case    8:  		/* bl -12840 */
		/* 821B3FD0h case    8:*/		regs.LR = 0x821B3FD4; return 0x821B0DA8;
		/* 821B3FD0h case    8:*/		return 0x821B3FD4;
		  /* 821B3FD4h */ case    9:  		/* b -172 */
		/* 821B3FD4h case    9:*/		return 0x821B3F28;
		/* 821B3FD4h case    9:*/		return 0x821B3FD8;
	}
	return 0x821B3FD8;
} // Block from 821B3FB0h-821B3FD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B3FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B3FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B3FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B3FD8);
		  /* 821B3FD8h */ case    0:  		/* mr R29, R15 */
		/* 821B3FD8h case    0:*/		regs.R29 = regs.R15;
		/* 821B3FD8h case    0:*/		return 0x821B3FDC;
		  /* 821B3FDCh */ case    1:  		/* addi R31, R1, 160 */
		/* 821B3FDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xA0);
		/* 821B3FDCh case    1:*/		return 0x821B3FE0;
		  /* 821B3FE0h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 821B3FE0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821B3FE0h case    2:*/		return 0x821B3FE4;
		  /* 821B3FE4h */ case    3:  		/* bl -91076 */
		/* 821B3FE4h case    3:*/		regs.LR = 0x821B3FE8; return 0x8219DC20;
		/* 821B3FE4h case    3:*/		return 0x821B3FE8;
		  /* 821B3FE8h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B3FE8h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B3FE8h case    4:*/		return 0x821B3FEC;
		  /* 821B3FECh */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821B3FECh case    5:*/		if ( regs.CR[0].eq ) { return 0x821B4004;  }
		/* 821B3FECh case    5:*/		return 0x821B3FF0;
		  /* 821B3FF0h */ case    6:  		/* addi R29, R29, 1 */
		/* 821B3FF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821B3FF0h case    6:*/		return 0x821B3FF4;
		  /* 821B3FF4h */ case    7:  		/* addi R31, R31, 4 */
		/* 821B3FF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821B3FF4h case    7:*/		return 0x821B3FF8;
		  /* 821B3FF8h */ case    8:  		/* cmplwi CR6, R29, 7 */
		/* 821B3FF8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 821B3FF8h case    8:*/		return 0x821B3FFC;
		  /* 821B3FFCh */ case    9:  		/* bc 12, CR6_LT, -28 */
		/* 821B3FFCh case    9:*/		if ( regs.CR[6].lt ) { return 0x821B3FE0;  }
		/* 821B3FFCh case    9:*/		return 0x821B4000;
		  /* 821B4000h */ case   10:  		/* b 496 */
		/* 821B4000h case   10:*/		return 0x821B41F0;
		/* 821B4000h case   10:*/		return 0x821B4004;
	}
	return 0x821B4004;
} // Block from 821B3FD8h-821B4004h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B4004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4004);
		  /* 821B4004h */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 821B4004h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 821B4004h case    0:*/		return 0x821B4008;
		  /* 821B4008h */ case    1:  		/* addi R10, R1, 160 */
		/* 821B4008h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 821B4008h case    1:*/		return 0x821B400C;
		  /* 821B400Ch */ case    2:  		/* lwzx R28, <#[R11 + R10]> */
		/* 821B400Ch case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821B400Ch case    2:*/		return 0x821B4010;
		  /* 821B4010h */ case    3:  		/* mr R3, R28 */
		/* 821B4010h case    3:*/		regs.R3 = regs.R28;
		/* 821B4010h case    3:*/		return 0x821B4014;
		  /* 821B4014h */ case    4:  		/* bl -91044 */
		/* 821B4014h case    4:*/		regs.LR = 0x821B4018; return 0x8219DC70;
		/* 821B4014h case    4:*/		return 0x821B4018;
		  /* 821B4018h */ case    5:  		/* rlwinm R5, R3, 0, 0, 29 */
		/* 821B4018h case    5:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R3);
		/* 821B4018h case    5:*/		return 0x821B401C;
		  /* 821B401Ch */ case    6:  		/* lwz R11, <#[R5 + 8]> */
		/* 821B401Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B401Ch case    6:*/		return 0x821B4020;
		  /* 821B4020h */ case    7:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821B4020h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821B4020h case    7:*/		return 0x821B4024;
		  /* 821B4024h */ case    8:  		/* cmplwi CR6, R10, 14720 */
		/* 821B4024h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821B4024h case    8:*/		return 0x821B4028;
		  /* 821B4028h */ case    9:  		/* bc 12, CR6_EQ, 408 */
		/* 821B4028h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B41C0;  }
		/* 821B4028h case    9:*/		return 0x821B402C;
		  /* 821B402Ch */ case   10:  		/* rlwinm R10, R3, 0, 30, 31 */
		/* 821B402Ch case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R3);
		/* 821B402Ch case   10:*/		return 0x821B4030;
		  /* 821B4030h */ case   11:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B4030h case   11:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B4030h case   11:*/		return 0x821B4034;
		  /* 821B4034h */ case   12:  		/* mulli R10, R10, 3 */
		/* 821B4034h case   12:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x3);
		/* 821B4034h case   12:*/		return 0x821B4038;
		  /* 821B4038h */ case   13:  		/* stw R11, <#[R5 + 8]> */
		/* 821B4038h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B4038h case   13:*/		return 0x821B403C;
		  /* 821B403Ch */ case   14:  		/* stw R10, <#[R14 + 664]> */
		/* 821B403Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R14 + 0x00000298) );
		/* 821B403Ch case   14:*/		return 0x821B4040;
		  /* 821B4040h */ case   15:  		/* li R6, 0 */
		/* 821B4040h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B4040h case   15:*/		return 0x821B4044;
		  /* 821B4044h */ case   16:  		/* mr R4, R17 */
		/* 821B4044h case   16:*/		regs.R4 = regs.R17;
		/* 821B4044h case   16:*/		return 0x821B4048;
		  /* 821B4048h */ case   17:  		/* mr R3, R14 */
		/* 821B4048h case   17:*/		regs.R3 = regs.R14;
		/* 821B4048h case   17:*/		return 0x821B404C;
		  /* 821B404Ch */ case   18:  		/* bl -16364 */
		/* 821B404Ch case   18:*/		regs.LR = 0x821B4050; return 0x821B0060;
		/* 821B404Ch case   18:*/		return 0x821B4050;
		  /* 821B4050h */ case   19:  		/* or. R31, R3, R3 */
		/* 821B4050h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821B4050h case   19:*/		return 0x821B4054;
		  /* 821B4054h */ case   20:  		/* bc 12, CR0_EQ, 364 */
		/* 821B4054h case   20:*/		if ( regs.CR[0].eq ) { return 0x821B41C0;  }
		/* 821B4054h case   20:*/		return 0x821B4058;
		  /* 821B4058h */ case   21:  		/* mr R4, R31 */
		/* 821B4058h case   21:*/		regs.R4 = regs.R31;
		/* 821B4058h case   21:*/		return 0x821B405C;
		  /* 821B405Ch */ case   22:  		/* lwz R5, <#[R14 + 664]> */
		/* 821B405Ch case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000298) );
		/* 821B405Ch case   22:*/		return 0x821B4060;
		  /* 821B4060h */ case   23:  		/* mr R3, R14 */
		/* 821B4060h case   23:*/		regs.R3 = regs.R14;
		/* 821B4060h case   23:*/		return 0x821B4064;
		  /* 821B4064h */ case   24:  		/* bl -99396 */
		/* 821B4064h case   24:*/		regs.LR = 0x821B4068; return 0x8219BC20;
		/* 821B4064h case   24:*/		return 0x821B4068;
		  /* 821B4068h */ case   25:  		/* mr R30, R3 */
		/* 821B4068h case   25:*/		regs.R30 = regs.R3;
		/* 821B4068h case   25:*/		return 0x821B406C;
		  /* 821B406Ch */ case   26:  		/* cmplw CR6, R3, R29 */
		/* 821B406Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 821B406Ch case   26:*/		return 0x821B4070;
		  /* 821B4070h */ case   27:  		/* bc 12, CR6_EQ, 20 */
		/* 821B4070h case   27:*/		if ( regs.CR[6].eq ) { return 0x821B4084;  }
		/* 821B4070h case   27:*/		return 0x821B4074;
		  /* 821B4074h */ case   28:  		/* mr R4, R31 */
		/* 821B4074h case   28:*/		regs.R4 = regs.R31;
		/* 821B4074h case   28:*/		return 0x821B4078;
		  /* 821B4078h */ case   29:  		/* mr R3, R14 */
		/* 821B4078h case   29:*/		regs.R3 = regs.R14;
		/* 821B4078h case   29:*/		return 0x821B407C;
		  /* 821B407Ch */ case   30:  		/* bl -79300 */
		/* 821B407Ch case   30:*/		regs.LR = 0x821B4080; return 0x821A0AB8;
		/* 821B407Ch case   30:*/		return 0x821B4080;
		  /* 821B4080h */ case   31:  		/* b 320 */
		/* 821B4080h case   31:*/		return 0x821B41C0;
		/* 821B4080h case   31:*/		return 0x821B4084;
	}
	return 0x821B4084;
} // Block from 821B4004h-821B4084h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821B4084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4084);
		  /* 821B4084h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4084h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4084h case    0:*/		return 0x821B4088;
		  /* 821B4088h */ case    1:  		/* rlwinm. R10, R11, 7, 31, 31 */
		/* 821B4088h case    1:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4088h case    1:*/		return 0x821B408C;
		  /* 821B408Ch */ case    2:  		/* bc 4, CR0_EQ, 52 */
		/* 821B408Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B40C0;  }
		/* 821B408Ch case    2:*/		return 0x821B4090;
		  /* 821B4090h */ case    3:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821B4090h case    3:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4090h case    3:*/		return 0x821B4094;
		  /* 821B4094h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 821B4094h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B40C0;  }
		/* 821B4094h case    4:*/		return 0x821B4098;
		  /* 821B4098h */ case    5:  		/* li R5, 0 */
		/* 821B4098h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B4098h case    5:*/		return 0x821B409C;
		  /* 821B409Ch */ case    6:  		/* mr R4, R31 */
		/* 821B409Ch case    6:*/		regs.R4 = regs.R31;
		/* 821B409Ch case    6:*/		return 0x821B40A0;
		  /* 821B40A0h */ case    7:  		/* mr R3, R14 */
		/* 821B40A0h case    7:*/		regs.R3 = regs.R14;
		/* 821B40A0h case    7:*/		return 0x821B40A4;
		  /* 821B40A4h */ case    8:  		/* bl -42644 */
		/* 821B40A4h case    8:*/		regs.LR = 0x821B40A8; return 0x821A9A10;
		/* 821B40A4h case    8:*/		return 0x821B40A8;
		  /* 821B40A8h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821B40A8h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B40A8h case    9:*/		return 0x821B40AC;
		  /* 821B40ACh */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 821B40ACh case   10:*/		if ( regs.CR[0].eq ) { return 0x821B40C0;  }
		/* 821B40ACh case   10:*/		return 0x821B40B0;
		  /* 821B40B0h */ case   11:  		/* mr R4, R17 */
		/* 821B40B0h case   11:*/		regs.R4 = regs.R17;
		/* 821B40B0h case   11:*/		return 0x821B40B4;
		  /* 821B40B4h */ case   12:  		/* mr R3, R14 */
		/* 821B40B4h case   12:*/		regs.R3 = regs.R14;
		/* 821B40B4h case   12:*/		return 0x821B40B8;
		  /* 821B40B8h */ case   13:  		/* bl 458256 */
		/* 821B40B8h case   13:*/		regs.LR = 0x821B40BC; return 0x82223EC8;
		/* 821B40B8h case   13:*/		return 0x821B40BC;
		  /* 821B40BCh */ case   14:  		/* b 260 */
		/* 821B40BCh case   14:*/		return 0x821B41C0;
		/* 821B40BCh case   14:*/		return 0x821B40C0;
	}
	return 0x821B40C0;
} // Block from 821B4084h-821B40C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B40C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B40C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B40C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B40C0);
		  /* 821B40C0h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821B40C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821B40C0h case    0:*/		return 0x821B40C4;
		  /* 821B40C4h */ case    1:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821B40C4h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821B40C4h case    1:*/		return 0x821B40C8;
		  /* 821B40C8h */ case    2:  		/* cmplwi CR6, R11, 110 */
		/* 821B40C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821B40C8h case    2:*/		return 0x821B40CC;
		  /* 821B40CCh */ case    3:  		/* bc 4, CR6_EQ, 164 */
		/* 821B40CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B4170;  }
		/* 821B40CCh case    3:*/		return 0x821B40D0;
		  /* 821B40D0h */ case    4:  		/* addi R11, R17, 24 */
		/* 821B40D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B40D0h case    4:*/		return 0x821B40D4;
		  /* 821B40D4h */ case    5:  		/* lwz R10, <#[R17 + 28]> */
		/* 821B40D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B40D4h case    5:*/		return 0x821B40D8;
		  /* 821B40D8h */ case    6:  		/* addi R11, R17, 24 */
		/* 821B40D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B40D8h case    6:*/		return 0x821B40DC;
		  /* 821B40DCh */ case    7:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821B40DCh case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B40DCh case    7:*/		return 0x821B40E0;
		  /* 821B40E0h */ case    8:  		/* addic R9, R9, -1 */
		/* 821B40E0h case    8:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B40E0h case    8:*/		return 0x821B40E4;
		  /* 821B40E4h */ case    9:  		/* subfe R9, R9, R9 */
		/* 821B40E4h case    9:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B40E4h case    9:*/		return 0x821B40E8;
		  /* 821B40E8h */ case   10:  		/* and R30, R9, R10 */
		/* 821B40E8h case   10:*/		cpu::op::and<0>(regs,&regs.R30,regs.R9,regs.R10);
		/* 821B40E8h case   10:*/		return 0x821B40EC;
		  /* 821B40ECh */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 821B40ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B40ECh case   11:*/		return 0x821B40F0;
		  /* 821B40F0h */ case   12:  		/* bc 12, CR6_EQ, 112 */
		/* 821B40F0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821B4160;  }
		/* 821B40F0h case   12:*/		return 0x821B40F4;
		  /* 821B40F4h */ case   13:  		/* cmplw CR6, R31, R30 */
		/* 821B40F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821B40F4h case   13:*/		return 0x821B40F8;
		  /* 821B40F8h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 821B40F8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821B4124;  }
		/* 821B40F8h case   14:*/		return 0x821B40FC;
		  /* 821B40FCh */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 821B40FCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821B40FCh case   15:*/		return 0x821B4100;
		  /* 821B4100h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B4100h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B4100h case   16:*/		return 0x821B4104;
		  /* 821B4104h */ case   17:  		/* cmplwi CR6, R11, 14080 */
		/* 821B4104h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B4104h case   17:*/		return 0x821B4108;
		  /* 821B4108h */ case   18:  		/* bc 4, CR6_EQ, 28 */
		/* 821B4108h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821B4124;  }
		/* 821B4108h case   18:*/		return 0x821B410C;
		  /* 821B410Ch */ case   19:  		/* mr R5, R30 */
		/* 821B410Ch case   19:*/		regs.R5 = regs.R30;
		/* 821B410Ch case   19:*/		return 0x821B4110;
		  /* 821B4110h */ case   20:  		/* mr R4, R31 */
		/* 821B4110h case   20:*/		regs.R4 = regs.R31;
		/* 821B4110h case   20:*/		return 0x821B4114;
		  /* 821B4114h */ case   21:  		/* mr R3, R14 */
		/* 821B4114h case   21:*/		regs.R3 = regs.R14;
		/* 821B4114h case   21:*/		return 0x821B4118;
		  /* 821B4118h */ case   22:  		/* bl -48392 */
		/* 821B4118h case   22:*/		regs.LR = 0x821B411C; return 0x821A8410;
		/* 821B4118h case   22:*/		return 0x821B411C;
		  /* 821B411Ch */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B411Ch case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B411Ch case   23:*/		return 0x821B4120;
		  /* 821B4120h */ case   24:  		/* bc 4, CR0_EQ, 32 */
		/* 821B4120h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B4140;  }
		/* 821B4120h case   24:*/		return 0x821B4124;
	}
	return 0x821B4124;
} // Block from 821B40C0h-821B4124h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B4124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4124);
		  /* 821B4124h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821B4124h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821B4124h case    0:*/		return 0x821B4128;
		  /* 821B4128h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B4128h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B4128h case    1:*/		return 0x821B412C;
		  /* 821B412Ch */ case    2:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B412Ch case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B412Ch case    2:*/		return 0x821B4130;
		  /* 821B4130h */ case    3:  		/* addic R10, R10, -1 */
		/* 821B4130h case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B4130h case    3:*/		return 0x821B4134;
		  /* 821B4134h */ case    4:  		/* subfe R10, R10, R10 */
		/* 821B4134h case    4:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B4134h case    4:*/		return 0x821B4138;
		  /* 821B4138h */ case    5:  		/* and R30, R10, R11 */
		/* 821B4138h case    5:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821B4138h case    5:*/		return 0x821B413C;
		  /* 821B413Ch */ case    6:  		/* b -80 */
		/* 821B413Ch case    6:*/		return 0x821B40EC;
		/* 821B413Ch case    6:*/		return 0x821B4140;
	}
	return 0x821B4140;
} // Block from 821B4124h-821B4140h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B4140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4140);
		  /* 821B4140h */ case    0:  		/* mr R4, R17 */
		/* 821B4140h case    0:*/		regs.R4 = regs.R17;
		/* 821B4140h case    0:*/		return 0x821B4144;
		  /* 821B4144h */ case    1:  		/* mr R3, R14 */
		/* 821B4144h case    1:*/		regs.R3 = regs.R14;
		/* 821B4144h case    1:*/		return 0x821B4148;
		  /* 821B4148h */ case    2:  		/* bl 458112 */
		/* 821B4148h case    2:*/		regs.LR = 0x821B414C; return 0x82223EC8;
		/* 821B4148h case    2:*/		return 0x821B414C;
		  /* 821B414Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B414Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B414Ch case    3:*/		return 0x821B4150;
		  /* 821B4150h */ case    4:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B4150h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B4150h case    4:*/		return 0x821B4154;
		  /* 821B4154h */ case    5:  		/* cmplwi CR6, R11, 14720 */
		/* 821B4154h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B4154h case    5:*/		return 0x821B4158;
		  /* 821B4158h */ case    6:  		/* bc 4, CR6_EQ, -132 */
		/* 821B4158h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B40D4;  }
		/* 821B4158h case    6:*/		return 0x821B415C;
		  /* 821B415Ch */ case    7:  		/* b 100 */
		/* 821B415Ch case    7:*/		return 0x821B41C0;
		/* 821B415Ch case    7:*/		return 0x821B4160;
	}
	return 0x821B4160;
} // Block from 821B4140h-821B4160h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B4160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4160);
		  /* 821B4160h */ case    0:  		/* mr R4, R31 */
		/* 821B4160h case    0:*/		regs.R4 = regs.R31;
		/* 821B4160h case    0:*/		return 0x821B4164;
		  /* 821B4164h */ case    1:  		/* mr R3, R14 */
		/* 821B4164h case    1:*/		regs.R3 = regs.R14;
		/* 821B4164h case    1:*/		return 0x821B4168;
		  /* 821B4168h */ case    2:  		/* bl -11248 */
		/* 821B4168h case    2:*/		regs.LR = 0x821B416C; return 0x821B1578;
		/* 821B4168h case    2:*/		return 0x821B416C;
		  /* 821B416Ch */ case    3:  		/* b 32 */
		/* 821B416Ch case    3:*/		return 0x821B418C;
		/* 821B416Ch case    3:*/		return 0x821B4170;
	}
	return 0x821B4170;
} // Block from 821B4160h-821B4170h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B4170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4170);
		  /* 821B4170h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 821B4170h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821B4170h case    0:*/		return 0x821B4174;
		  /* 821B4174h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821B4174h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B418C;  }
		/* 821B4174h case    1:*/		return 0x821B4178;
		  /* 821B4178h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821B4178h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B4178h case    2:*/		return 0x821B417C;
		  /* 821B417Ch */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 821B417Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B418C;  }
		/* 821B417Ch case    3:*/		return 0x821B4180;
		  /* 821B4180h */ case    4:  		/* rlwinm R11, R10, 0, 15, 17 */
		/* 821B4180h case    4:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R10);
		/* 821B4180h case    4:*/		return 0x821B4184;
		  /* 821B4184h */ case    5:  		/* cmplwi CR6, R11, 16384 */
		/* 821B4184h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821B4184h case    5:*/		return 0x821B4188;
		  /* 821B4188h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821B4188h case    6:*/		if ( regs.CR[6].eq ) { return 0x821B419C;  }
		/* 821B4188h case    6:*/		return 0x821B418C;
	}
	return 0x821B418C;
} // Block from 821B4170h-821B418Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B418Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B418C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B418C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B418C);
		  /* 821B418Ch */ case    0:  		/* mr R5, R31 */
		/* 821B418Ch case    0:*/		regs.R5 = regs.R31;
		/* 821B418Ch case    0:*/		return 0x821B4190;
		  /* 821B4190h */ case    1:  		/* mr R4, R17 */
		/* 821B4190h case    1:*/		regs.R4 = regs.R17;
		/* 821B4190h case    1:*/		return 0x821B4194;
		  /* 821B4194h */ case    2:  		/* mr R3, R14 */
		/* 821B4194h case    2:*/		regs.R3 = regs.R14;
		/* 821B4194h case    2:*/		return 0x821B4198;
		  /* 821B4198h */ case    3:  		/* bl -13168 */
		/* 821B4198h case    3:*/		regs.LR = 0x821B419C; return 0x821B0E28;
		/* 821B4198h case    3:*/		return 0x821B419C;
	}
	return 0x821B419C;
} // Block from 821B418Ch-821B419Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B419Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B419C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B419C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B419C);
		  /* 821B419Ch */ case    0:  		/* lwz R11, <#[R14 + 664]> */
		/* 821B419Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000298) );
		/* 821B419Ch case    0:*/		return 0x821B41A0;
		  /* 821B41A0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B41A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B41A0h case    1:*/		return 0x821B41A4;
		  /* 821B41A4h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 821B41A4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B41C0;  }
		/* 821B41A4h case    2:*/		return 0x821B41A8;
		  /* 821B41A8h */ case    3:  		/* addi R7, R1, 160 */
		/* 821B41A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 821B41A8h case    3:*/		return 0x821B41AC;
		  /* 821B41ACh */ case    4:  		/* li R6, 3 */
		/* 821B41ACh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821B41ACh case    4:*/		return 0x821B41B0;
		  /* 821B41B0h */ case    5:  		/* mr R5, R31 */
		/* 821B41B0h case    5:*/		regs.R5 = regs.R31;
		/* 821B41B0h case    5:*/		return 0x821B41B4;
		  /* 821B41B4h */ case    6:  		/* mr R4, R17 */
		/* 821B41B4h case    6:*/		regs.R4 = regs.R17;
		/* 821B41B4h case    6:*/		return 0x821B41B8;
		  /* 821B41B8h */ case    7:  		/* mr R3, R14 */
		/* 821B41B8h case    7:*/		regs.R3 = regs.R14;
		/* 821B41B8h case    7:*/		return 0x821B41BC;
		  /* 821B41BCh */ case    8:  		/* bl -13332 */
		/* 821B41BCh case    8:*/		regs.LR = 0x821B41C0; return 0x821B0DA8;
		/* 821B41BCh case    8:*/		return 0x821B41C0;
	}
	return 0x821B41C0;
} // Block from 821B419Ch-821B41C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B41C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B41C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B41C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B41C0);
		  /* 821B41C0h */ case    0:  		/* mr R3, R28 */
		/* 821B41C0h case    0:*/		regs.R3 = regs.R28;
		/* 821B41C0h case    0:*/		return 0x821B41C4;
		  /* 821B41C4h */ case    1:  		/* bl -91556 */
		/* 821B41C4h case    1:*/		regs.LR = 0x821B41C8; return 0x8219DC20;
		/* 821B41C4h case    1:*/		return 0x821B41C8;
		  /* 821B41C8h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B41C8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B41C8h case    2:*/		return 0x821B41CC;
		  /* 821B41CCh */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 821B41CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B41F0;  }
		/* 821B41CCh case    3:*/		return 0x821B41D0;
		  /* 821B41D0h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821B41D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B41D0h case    4:*/		return 0x821B41D4;
		  /* 821B41D4h */ case    5:  		/* bc 12, CR6_EQ, -452 */
		/* 821B41D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B4010;  }
		/* 821B41D4h case    5:*/		return 0x821B41D8;
		  /* 821B41D8h */ case    6:  		/* lwz R11, <#[R14 + 652]> */
		/* 821B41D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B41D8h case    6:*/		return 0x821B41DC;
		  /* 821B41DCh */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B41DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B41DCh case    7:*/		return 0x821B41E0;
		  /* 821B41E0h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B41E0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B41E0h case    8:*/		return 0x821B41E4;
		  /* 821B41E4h */ case    9:  		/* bc 4, CR0_EQ, -468 */
		/* 821B41E4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821B4010;  }
		/* 821B41E4h case    9:*/		return 0x821B41E8;
		  /* 821B41E8h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821B41E8h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B41E8h case   10:*/		return 0x821B41EC;
		  /* 821B41ECh */ case   11:  		/* bc 12, CR0_EQ, -476 */
		/* 821B41ECh case   11:*/		if ( regs.CR[0].eq ) { return 0x821B4010;  }
		/* 821B41ECh case   11:*/		return 0x821B41F0;
	}
	return 0x821B41F0;
} // Block from 821B41C0h-821B41F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B41F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B41F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B41F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B41F0);
		  /* 821B41F0h */ case    0:  		/* cmplwi CR6, R29, 7 */
		/* 821B41F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 821B41F0h case    0:*/		return 0x821B41F4;
		  /* 821B41F4h */ case    1:  		/* bc 4, CR6_EQ, -716 */
		/* 821B41F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B3F28;  }
		/* 821B41F4h case    1:*/		return 0x821B41F8;
		  /* 821B41F8h */ case    2:  		/* addi R11, R1, 160 */
		/* 821B41F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 821B41F8h case    2:*/		return 0x821B41FC;
		  /* 821B41FCh */ case    3:  		/* li R31, 7 */
		/* 821B41FCh case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x7);
		/* 821B41FCh case    3:*/		return 0x821B4200;
		  /* 821B4200h */ case    4:  		/* addi R29, R11, -4 */
		/* 821B4200h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821B4200h case    4:*/		return 0x821B4204;
		  /* 821B4204h */ case    5:  		/* lwzu R30, <#[R29 + 4]> */
		/* 821B4204h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821B4204h case    5:*/		return 0x821B4208;
		  /* 821B4208h */ case    6:  		/* mr R3, R30 */
		/* 821B4208h case    6:*/		regs.R3 = regs.R30;
		/* 821B4208h case    6:*/		return 0x821B420C;
		  /* 821B420Ch */ case    7:  		/* bl -91364 */
		/* 821B420Ch case    7:*/		regs.LR = 0x821B4210; return 0x8219DD28;
		/* 821B420Ch case    7:*/		return 0x821B4210;
		  /* 821B4210h */ case    8:  		/* li R6, 37 */
		/* 821B4210h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x25);
		/* 821B4210h case    8:*/		return 0x821B4214;
		  /* 821B4214h */ case    9:  		/* li R5, 16 */
		/* 821B4214h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821B4214h case    9:*/		return 0x821B4218;
		  /* 821B4218h */ case   10:  		/* mr R4, R30 */
		/* 821B4218h case   10:*/		regs.R4 = regs.R30;
		/* 821B4218h case   10:*/		return 0x821B421C;
		  /* 821B421Ch */ case   11:  		/* mr R3, R14 */
		/* 821B421Ch case   11:*/		regs.R3 = regs.R14;
		/* 821B421Ch case   11:*/		return 0x821B4220;
		  /* 821B4220h */ case   12:  		/* bl -291792 */
		/* 821B4220h case   12:*/		regs.LR = 0x821B4224; return 0x8216CE50;
		/* 821B4220h case   12:*/		return 0x821B4224;
		  /* 821B4224h */ case   13:  		/* addic. R31, R31, -1 */
		/* 821B4224h case   13:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821B4224h case   13:*/		return 0x821B4228;
		  /* 821B4228h */ case   14:  		/* bc 4, CR0_EQ, -36 */
		/* 821B4228h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B4204;  }
		/* 821B4228h case   14:*/		return 0x821B422C;
		  /* 821B422Ch */ case   15:  		/* stw R16, <#[R14 + 664]> */
		/* 821B422Ch case   15:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R14 + 0x00000298) );
		/* 821B422Ch case   15:*/		return 0x821B4230;
		  /* 821B4230h */ case   16:  		/* lwz R11, <#[R14 + 40]> */
		/* 821B4230h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B4230h case   16:*/		return 0x821B4234;
		  /* 821B4234h */ case   17:  		/* rlwinm R11, R11, 0, 5, 3 */
		/* 821B4234h case   17:*/		cpu::op::rlwinm<0,0,5,3>(regs,&regs.R11,regs.R11);
		/* 821B4234h case   17:*/		return 0x821B4238;
		  /* 821B4238h */ case   18:  		/* stw R11, <#[R14 + 40]> */
		/* 821B4238h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B4238h case   18:*/		return 0x821B423C;
		  /* 821B423Ch */ case   19:  		/* lwz R11, <#[R17 + 20]> */
		/* 821B423Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000014) );
		/* 821B423Ch case   19:*/		return 0x821B4240;
		  /* 821B4240h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B4240h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4240h case   20:*/		return 0x821B4244;
		  /* 821B4244h */ case   21:  		/* bc 12, CR0_EQ, 40 */
		/* 821B4244h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B426C;  }
		/* 821B4244h case   21:*/		return 0x821B4248;
		  /* 821B4248h */ case   22:  		/* lwz R11, <#[R17 + 28]> */
		/* 821B4248h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B4248h case   22:*/		return 0x821B424C;
		  /* 821B424Ch */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B424Ch case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B424Ch case   23:*/		return 0x821B4250;
		  /* 821B4250h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 821B4250h case   24:*/		if ( regs.CR[0].eq ) { return 0x821B4260;  }
		/* 821B4250h case   24:*/		return 0x821B4254;
		  /* 821B4254h */ case   25:  		/* lwz R11, <#[R17 + 36]> */
		/* 821B4254h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000024) );
		/* 821B4254h case   25:*/		return 0x821B4258;
		  /* 821B4258h */ case   26:  		/* addi R30, R17, 32 */
		/* 821B4258h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R17,0x20);
		/* 821B4258h case   26:*/		return 0x821B425C;
		  /* 821B425Ch */ case   27:  		/* b 24 */
		/* 821B425Ch case   27:*/		return 0x821B4274;
		/* 821B425Ch case   27:*/		return 0x821B4260;
	}
	return 0x821B4260;
} // Block from 821B41F0h-821B4260h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821B4260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4260);
		  /* 821B4260h */ case    0:  		/* lwz R11, <#[R17 + 28]> */
		/* 821B4260h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B4260h case    0:*/		return 0x821B4264;
		  /* 821B4264h */ case    1:  		/* addi R30, R17, 24 */
		/* 821B4264h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R17,0x18);
		/* 821B4264h case    1:*/		return 0x821B4268;
		  /* 821B4268h */ case    2:  		/* b 12 */
		/* 821B4268h case    2:*/		return 0x821B4274;
		/* 821B4268h case    2:*/		return 0x821B426C;
	}
	return 0x821B426C;
} // Block from 821B4260h-821B426Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B426Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B426C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B426C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B426C);
		  /* 821B426Ch */ case    0:  		/* lwz R11, <#[R17 + 20]> */
		/* 821B426Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000014) );
		/* 821B426Ch case    0:*/		return 0x821B4270;
		  /* 821B4270h */ case    1:  		/* addi R30, R17, 16 */
		/* 821B4270h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R17,0x10);
		/* 821B4270h case    1:*/		return 0x821B4274;
	}
	return 0x821B4274;
} // Block from 821B426Ch-821B4274h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B4274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4274);
		  /* 821B4274h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B4274h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4274h case    0:*/		return 0x821B4278;
		  /* 821B4278h */ case    1:  		/* addic R10, R10, -1 */
		/* 821B4278h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B4278h case    1:*/		return 0x821B427C;
		  /* 821B427Ch */ case    2:  		/* subfe R10, R10, R10 */
		/* 821B427Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B427Ch case    2:*/		return 0x821B4280;
		  /* 821B4280h */ case    3:  		/* and R31, R10, R11 */
		/* 821B4280h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821B4280h case    3:*/		return 0x821B4284;
		  /* 821B4284h */ case    4:  		/* b 228 */
		/* 821B4284h case    4:*/		return 0x821B4368;
		/* 821B4284h case    4:*/		return 0x821B4288;
		  /* 821B4288h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4288h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4288h case    5:*/		return 0x821B428C;
		  /* 821B428Ch */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B428Ch case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B428Ch case    6:*/		return 0x821B4290;
		  /* 821B4290h */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 821B4290h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B4290h case    7:*/		return 0x821B4294;
		  /* 821B4294h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 821B4294h case    8:*/		if ( regs.CR[6].eq ) { return 0x821B42B8;  }
		/* 821B4294h case    8:*/		return 0x821B4298;
		  /* 821B4298h */ case    9:  		/* cmplwi CR6, R11, 16 */
		/* 821B4298h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 821B4298h case    9:*/		return 0x821B429C;
		  /* 821B429Ch */ case   10:  		/* bc 12, CR6_LT, 16 */
		/* 821B429Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821B42AC;  }
		/* 821B429Ch case   10:*/		return 0x821B42A0;
		  /* 821B42A0h */ case   11:  		/* cmplwi CR6, R11, 18 */
		/* 821B42A0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 821B42A0h case   11:*/		return 0x821B42A4;
		  /* 821B42A4h */ case   12:  		/* li R11, 1 */
		/* 821B42A4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B42A4h case   12:*/		return 0x821B42A8;
		  /* 821B42A8h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821B42A8h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821B42B0;  }
		/* 821B42A8h case   13:*/		return 0x821B42AC;
	}
	return 0x821B42AC;
} // Block from 821B4274h-821B42ACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B42ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B42AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B42AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B42AC);
		  /* 821B42ACh */ case    0:  		/* mr R11, R15 */
		/* 821B42ACh case    0:*/		regs.R11 = regs.R15;
		/* 821B42ACh case    0:*/		return 0x821B42B0;
	}
	return 0x821B42B0;
} // Block from 821B42ACh-821B42B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B42B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B42B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B42B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B42B0);
		  /* 821B42B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B42B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B42B0h case    0:*/		return 0x821B42B4;
		  /* 821B42B4h */ case    1:  		/* bc 12, CR0_EQ, 92 */
		/* 821B42B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B4310;  }
		/* 821B42B4h case    1:*/		return 0x821B42B8;
	}
	return 0x821B42B8;
} // Block from 821B42B0h-821B42B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B42B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B42B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B42B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B42B8);
		  /* 821B42B8h */ case    0:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B42B8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B42B8h case    0:*/		return 0x821B42BC;
		  /* 821B42BCh */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B42BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B42BCh case    1:*/		return 0x821B42C0;
		  /* 821B42C0h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B42C0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B42C0h case    2:*/		return 0x821B42C4;
		  /* 821B42C4h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 821B42C4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B42EC;  }
		/* 821B42C4h case    3:*/		return 0x821B42C8;
		  /* 821B42C8h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821B42C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B42C8h case    4:*/		return 0x821B42CC;
		  /* 821B42CCh */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B42CCh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B42CCh case    5:*/		return 0x821B42D0;
		  /* 821B42D0h */ case    6:  		/* addic. R11, R11, -4 */
		/* 821B42D0h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B42D0h case    6:*/		return 0x821B42D4;
		  /* 821B42D4h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 821B42D4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B42EC;  }
		/* 821B42D4h case    7:*/		return 0x821B42D8;
		  /* 821B42D8h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B42D8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B42D8h case    8:*/		return 0x821B42DC;
		  /* 821B42DCh */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B42DCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B42DCh case    9:*/		return 0x821B42E0;
		  /* 821B42E0h */ case   10:  		/* addi R10, R10, 1 */
		/* 821B42E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B42E0h case   10:*/		return 0x821B42E4;
		  /* 821B42E4h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 821B42E4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B42E4h case   11:*/		return 0x821B42E8;
		  /* 821B42E8h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 821B42E8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821B42F8;  }
		/* 821B42E8h case   12:*/		return 0x821B42EC;
	}
	return 0x821B42EC;
} // Block from 821B42B8h-821B42ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B42ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B42EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B42EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B42EC);
		  /* 821B42ECh */ case    0:  		/* li R4, 1 */
		/* 821B42ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B42ECh case    0:*/		return 0x821B42F0;
		  /* 821B42F0h */ case    1:  		/* bl -160296 */
		/* 821B42F0h case    1:*/		regs.LR = 0x821B42F4; return 0x8218D0C8;
		/* 821B42F0h case    1:*/		return 0x821B42F4;
		  /* 821B42F4h */ case    2:  		/* mr R11, R3 */
		/* 821B42F4h case    2:*/		regs.R11 = regs.R3;
		/* 821B42F4h case    2:*/		return 0x821B42F8;
	}
	return 0x821B42F8;
} // Block from 821B42ECh-821B42F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B42F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B42F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B42F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B42F8);
		  /* 821B42F8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B42F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B42F8h case    0:*/		return 0x821B42FC;
		  /* 821B42FCh */ case    1:  		/* addi R9, R10, 4 */
		/* 821B42FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B42FCh case    1:*/		return 0x821B4300;
		  /* 821B4300h */ case    2:  		/* addi R8, R10, 1 */
		/* 821B4300h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B4300h case    2:*/		return 0x821B4304;
		  /* 821B4304h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B4304h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B4304h case    3:*/		return 0x821B4308;
		  /* 821B4308h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821B4308h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4308h case    4:*/		return 0x821B430C;
		  /* 821B430Ch */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821B430Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B430Ch case    5:*/		return 0x821B4310;
	}
	return 0x821B4310;
} // Block from 821B42F8h-821B4310h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B4310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4310);
		  /* 821B4310h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B4310h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B4310h case    0:*/		return 0x821B4314;
		  /* 821B4314h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B4314h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B4314h case    1:*/		return 0x821B4318;
		  /* 821B4318h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B4318h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B4318h case    2:*/		return 0x821B431C;
		  /* 821B431Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B431Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4328;  }
		/* 821B431Ch case    3:*/		return 0x821B4320;
		  /* 821B4320h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B4320h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B4320h case    4:*/		return 0x821B4324;
		  /* 821B4324h */ case    5:  		/* bc 4, CR6_EQ, -156 */
		/* 821B4324h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B4288;  }
		/* 821B4324h case    5:*/		return 0x821B4328;
	}
	return 0x821B4328;
} // Block from 821B4310h-821B4328h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B4328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4328);
		  /* 821B4328h */ case    0:  		/* addi R10, R17, 32 */
		/* 821B4328h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R17,0x20);
		/* 821B4328h case    0:*/		return 0x821B432C;
		  /* 821B432Ch */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821B432Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821B432Ch case    1:*/		return 0x821B4330;
		  /* 821B4330h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821B4330h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B4370;  }
		/* 821B4330h case    2:*/		return 0x821B4334;
		  /* 821B4334h */ case    3:  		/* addi R11, R17, 24 */
		/* 821B4334h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B4334h case    3:*/		return 0x821B4338;
		  /* 821B4338h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821B4338h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821B4338h case    4:*/		return 0x821B433C;
		  /* 821B433Ch */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821B433Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821B4358;  }
		/* 821B433Ch case    5:*/		return 0x821B4340;
		  /* 821B4340h */ case    6:  		/* lwz R9, <#[R17 + 28]> */
		/* 821B4340h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B4340h case    6:*/		return 0x821B4344;
		  /* 821B4344h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821B4344h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821B4344h case    7:*/		return 0x821B4348;
		  /* 821B4348h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821B4348h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B4358;  }
		/* 821B4348h case    8:*/		return 0x821B434C;
		  /* 821B434Ch */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 821B434Ch case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821B434Ch case    9:*/		return 0x821B4350;
		  /* 821B4350h */ case   10:  		/* mr R30, R11 */
		/* 821B4350h case   10:*/		regs.R30 = regs.R11;
		/* 821B4350h case   10:*/		return 0x821B4354;
		  /* 821B4354h */ case   11:  		/* b 12 */
		/* 821B4354h case   11:*/		return 0x821B4360;
		/* 821B4354h case   11:*/		return 0x821B4358;
	}
	return 0x821B4358;
} // Block from 821B4328h-821B4358h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B4358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4358);
		  /* 821B4358h */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 821B4358h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821B4358h case    0:*/		return 0x821B435C;
		  /* 821B435Ch */ case    1:  		/* mr R30, R10 */
		/* 821B435Ch case    1:*/		regs.R30 = regs.R10;
		/* 821B435Ch case    1:*/		return 0x821B4360;
	}
	return 0x821B4360;
} // Block from 821B4358h-821B4360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B4360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4360);
		  /* 821B4360h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B4360h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B4360h case    0:*/		return 0x821B4364;
		  /* 821B4364h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821B4364h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B4370;  }
		/* 821B4364h case    1:*/		return 0x821B4368;
	}
	return 0x821B4368;
} // Block from 821B4360h-821B4368h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B4368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4368);
		  /* 821B4368h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821B4368h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B4368h case    0:*/		return 0x821B436C;
		  /* 821B436Ch */ case    1:  		/* bc 4, CR6_EQ, -228 */
		/* 821B436Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B4288;  }
		/* 821B436Ch case    1:*/		return 0x821B4370;
	}
	return 0x821B4370;
} // Block from 821B4368h-821B4370h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B4370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4370);
		  /* 821B4370h */ case    0:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B4370h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4370h case    0:*/		return 0x821B4374;
		  /* 821B4374h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B4374h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4374h case    1:*/		return 0x821B4378;
		  /* 821B4378h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4378h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4378h case    2:*/		return 0x821B437C;
		  /* 821B437Ch */ case    3:  		/* bc 4, CR0_EQ, 180 */
		/* 821B437Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4430;  }
		/* 821B437Ch case    3:*/		return 0x821B4380;
		  /* 821B4380h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B4380h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4380h case    4:*/		return 0x821B4384;
		  /* 821B4384h */ case    5:  		/* bc 12, CR0_EQ, 172 */
		/* 821B4384h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B4430;  }
		/* 821B4384h case    5:*/		return 0x821B4388;
		  /* 821B4388h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B4388h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B4388h case    6:*/		return 0x821B438C;
		  /* 821B438Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B438Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B438Ch case    7:*/		return 0x821B4390;
		  /* 821B4390h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821B4390h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B439C;  }
		/* 821B4390h case    8:*/		return 0x821B4394;
		  /* 821B4394h */ case    9:  		/* mr R4, R15 */
		/* 821B4394h case    9:*/		regs.R4 = regs.R15;
		/* 821B4394h case    9:*/		return 0x821B4398;
		  /* 821B4398h */ case   10:  		/* b 16 */
		/* 821B4398h case   10:*/		return 0x821B43A8;
		/* 821B4398h case   10:*/		return 0x821B439C;
	}
	return 0x821B439C;
} // Block from 821B4370h-821B439Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B439Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B439C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B439C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B439C);
		  /* 821B439Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B439Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B439Ch case    0:*/		return 0x821B43A0;
		  /* 821B43A0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B43A0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B43A0h case    1:*/		return 0x821B43A4;
		  /* 821B43A4h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B43A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B43A4h case    2:*/		return 0x821B43A8;
	}
	return 0x821B43A8;
} // Block from 821B439Ch-821B43A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B43A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B43A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B43A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B43A8);
		  /* 821B43A8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B43A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B43A8h case    0:*/		return 0x821B43AC;
		  /* 821B43ACh */ case    1:  		/* addi R10, R11, 3 */
		/* 821B43ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B43ACh case    1:*/		return 0x821B43B0;
		  /* 821B43B0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B43B0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B43B0h case    2:*/		return 0x821B43B4;
		  /* 821B43B4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B43B4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B43B4h case    3:*/		return 0x821B43B8;
		  /* 821B43B8h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B43B8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B43B8h case    4:*/		return 0x821B43BC;
		  /* 821B43BCh */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B43BCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B43BCh case    5:*/		return 0x821B43C0;
		  /* 821B43C0h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B43C0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B43F8;  }
		/* 821B43C0h case    6:*/		return 0x821B43C4;
		  /* 821B43C4h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B43C4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B43C4h case    7:*/		return 0x821B43C8;
		  /* 821B43C8h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B43C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B43C8h case    8:*/		return 0x821B43CC;
		  /* 821B43CCh */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B43CCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B43CCh case    9:*/		return 0x821B43D0;
		  /* 821B43D0h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B43D0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B43D0h case   10:*/		return 0x821B43D4;
		  /* 821B43D4h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B43D4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B43D4h case   11:*/		return 0x821B43D8;
		  /* 821B43D8h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B43D8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B43D8h case   12:*/		return 0x821B43DC;
		  /* 821B43DCh */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B43DCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B43DCh case   13:*/		return 0x821B43E0;
		  /* 821B43E0h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B43E0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B43E0h case   14:*/		return 0x821B43E4;
		  /* 821B43E4h */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B43E4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B43E4h case   15:*/		return 0x821B43E8;
		  /* 821B43E8h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B43E8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B43E8h case   16:*/		return 0x821B43EC;
		  /* 821B43ECh */ case   17:  		/* addi R11, R11, 4 */
		/* 821B43ECh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B43ECh case   17:*/		return 0x821B43F0;
		  /* 821B43F0h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B43F0h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B43F0h case   18:*/		return 0x821B43F4;
		  /* 821B43F4h */ case   19:  		/* bl -402924 */
		/* 821B43F4h case   19:*/		regs.LR = 0x821B43F8; return 0x82151E08;
		/* 821B43F4h case   19:*/		return 0x821B43F8;
	}
	return 0x821B43F8;
} // Block from 821B43A8h-821B43F8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B43F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B43F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B43F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B43F8);
		  /* 821B43F8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B43F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B43F8h case    0:*/		return 0x821B43FC;
		  /* 821B43FCh */ case    1:  		/* li R6, 0 */
		/* 821B43FCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B43FCh case    1:*/		return 0x821B4400;
		  /* 821B4400h */ case    2:  		/* mr R5, R31 */
		/* 821B4400h case    2:*/		regs.R5 = regs.R31;
		/* 821B4400h case    2:*/		return 0x821B4404;
		  /* 821B4404h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B4404h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B4404h case    3:*/		return 0x821B4408;
		  /* 821B4408h */ case    4:  		/* mr R4, R17 */
		/* 821B4408h case    4:*/		regs.R4 = regs.R17;
		/* 821B4408h case    4:*/		return 0x821B440C;
		  /* 821B440Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821B440Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B440Ch case    5:*/		return 0x821B4410;
		  /* 821B4410h */ case    6:  		/* mr R3, R14 */
		/* 821B4410h case    6:*/		regs.R3 = regs.R14;
		/* 821B4410h case    6:*/		return 0x821B4414;
		  /* 821B4414h */ case    7:  		/* bl -17996 */
		/* 821B4414h case    7:*/		regs.LR = 0x821B4418; return 0x821AFDC8;
		/* 821B4414h case    7:*/		return 0x821B4418;
		  /* 821B4418h */ case    8:  		/* or. R5, R3, R3 */
		/* 821B4418h case    8:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 821B4418h case    8:*/		return 0x821B441C;
		  /* 821B441Ch */ case    9:  		/* bc 12, CR0_EQ, -172 */
		/* 821B441Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821B4370;  }
		/* 821B441Ch case    9:*/		return 0x821B4420;
		  /* 821B4420h */ case   10:  		/* mr R4, R17 */
		/* 821B4420h case   10:*/		regs.R4 = regs.R17;
		/* 821B4420h case   10:*/		return 0x821B4424;
		  /* 821B4424h */ case   11:  		/* mr R3, R14 */
		/* 821B4424h case   11:*/		regs.R3 = regs.R14;
		/* 821B4424h case   11:*/		return 0x821B4428;
		  /* 821B4428h */ case   12:  		/* bl -11640 */
		/* 821B4428h case   12:*/		regs.LR = 0x821B442C; return 0x821B16B0;
		/* 821B4428h case   12:*/		return 0x821B442C;
		  /* 821B442Ch */ case   13:  		/* b -188 */
		/* 821B442Ch case   13:*/		return 0x821B4370;
		/* 821B442Ch case   13:*/		return 0x821B4430;
	}
	return 0x821B4430;
} // Block from 821B43F8h-821B4430h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B4430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4430);
		  /* 821B4430h */ case    0:  		/* addi R11, R17, 24 */
		/* 821B4430h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B4430h case    0:*/		return 0x821B4434;
		  /* 821B4434h */ case    1:  		/* lwz R11, <#[R17 + 28]> */
		/* 821B4434h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B4434h case    1:*/		return 0x821B4438;
		  /* 821B4438h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4438h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4438h case    2:*/		return 0x821B443C;
		  /* 821B443Ch */ case    3:  		/* bc 4, CR0_EQ, 1468 */
		/* 821B443Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B49F8;  }
		/* 821B443Ch case    3:*/		return 0x821B4440;
		  /* 821B4440h */ case    4:  		/* mr R19, R11 */
		/* 821B4440h case    4:*/		regs.R19 = regs.R11;
		/* 821B4440h case    4:*/		return 0x821B4444;
		  /* 821B4444h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821B4444h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4444h case    5:*/		return 0x821B4448;
		  /* 821B4448h */ case    6:  		/* bc 12, CR0_EQ, 1456 */
		/* 821B4448h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B49F8;  }
		/* 821B4448h case    6:*/		return 0x821B444C;
		  /* 821B444Ch */ case    7:  		/* lwz R18, <#[R1 + 100]> */
		/* 821B444Ch case    7:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000064) );
		/* 821B444Ch case    7:*/		return 0x821B4450;
		  /* 821B4450h */ case    8:  		/* lwz R11, <#[R19 + 8]> */
		/* 821B4450h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821B4450h case    8:*/		return 0x821B4454;
		  /* 821B4454h */ case    9:  		/* rlwinm. R10, R11, 27, 31, 31 */
		/* 821B4454h case    9:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4454h case    9:*/		return 0x821B4458;
		  /* 821B4458h */ case   10:  		/* bc 12, CR0_EQ, 1408 */
		/* 821B4458h case   10:*/		if ( regs.CR[0].eq ) { return 0x821B49D8;  }
		/* 821B4458h case   10:*/		return 0x821B445C;
		  /* 821B445Ch */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B445Ch case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B445Ch case   11:*/		return 0x821B4460;
		  /* 821B4460h */ case   12:  		/* cmplwi CR6, R11, 384 */
		/* 821B4460h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821B4460h case   12:*/		return 0x821B4464;
		  /* 821B4464h */ case   13:  		/* bc 4, CR6_EQ, 1396 */
		/* 821B4464h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B49D8;  }
		/* 821B4464h case   13:*/		return 0x821B4468;
		  /* 821B4468h */ case   14:  		/* lwz R3, <#[R19 + 44]> */
		/* 821B4468h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x0000002C) );
		/* 821B4468h case   14:*/		return 0x821B446C;
		  /* 821B446Ch */ case   15:  		/* lwz R11, <#[R3]> */
		/* 821B446Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B446Ch case   15:*/		return 0x821B4470;
		  /* 821B4470h */ case   16:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821B4470h case   16:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821B4470h case   16:*/		return 0x821B4474;
		  /* 821B4474h */ case   17:  		/* bc 4, CR0_EQ, 1380 */
		/* 821B4474h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821B49D8;  }
		/* 821B4474h case   17:*/		return 0x821B4478;
		  /* 821B4478h */ case   18:  		/* lwz R20, <#[R3 + 12]> */
		/* 821B4478h case   18:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B4478h case   18:*/		return 0x821B447C;
		  /* 821B447Ch */ case   19:  		/* lwz R11, <#[R20 + 8]> */
		/* 821B447Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821B447Ch case   19:*/		return 0x821B4480;
		  /* 821B4480h */ case   20:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B4480h case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B4480h case   20:*/		return 0x821B4484;
		  /* 821B4484h */ case   21:  		/* cmplwi CR6, R11, 110 */
		/* 821B4484h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821B4484h case   21:*/		return 0x821B4488;
		  /* 821B4488h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 821B4488h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B4494;  }
		/* 821B4488h case   22:*/		return 0x821B448C;
		  /* 821B448Ch */ case   23:  		/* cmplwi CR6, R11, 111 */
		/* 821B448Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006F);
		/* 821B448Ch case   23:*/		return 0x821B4490;
		  /* 821B4490h */ case   24:  		/* bc 4, CR6_EQ, 1352 */
		/* 821B4490h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821B49D8;  }
		/* 821B4490h case   24:*/		return 0x821B4494;
	}
	return 0x821B4494;
} // Block from 821B4430h-821B4494h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B4494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4494);
		  /* 821B4494h */ case    0:  		/* lwz R4, <#[R19 + 48]> */
		/* 821B4494h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x00000030) );
		/* 821B4494h case    0:*/		return 0x821B4498;
		  /* 821B4498h */ case    1:  		/* bl -328208 */
		/* 821B4498h case    1:*/		regs.LR = 0x821B449C; return 0x82164288;
		/* 821B4498h case    1:*/		return 0x821B449C;
		  /* 821B449Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B449Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B449Ch case    2:*/		return 0x821B44A0;
		  /* 821B44A0h */ case    3:  		/* bc 12, CR0_EQ, 1336 */
		/* 821B44A0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B49D8;  }
		/* 821B44A0h case    3:*/		return 0x821B44A4;
		  /* 821B44A4h */ case    4:  		/* lwz R10, <#[R20 + 4]> */
		/* 821B44A4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000004) );
		/* 821B44A4h case    4:*/		return 0x821B44A8;
		  /* 821B44A8h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821B44A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B44A8h case    5:*/		return 0x821B44AC;
		  /* 821B44ACh */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 821B44ACh case    6:*/		if ( regs.CR[6].eq ) { return 0x821B44D4;  }
		/* 821B44ACh case    6:*/		return 0x821B44B0;
		  /* 821B44B0h */ case    7:  		/* lwz R11, <#[R10 + 16]> */
		/* 821B44B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821B44B0h case    7:*/		return 0x821B44B4;
		  /* 821B44B4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821B44B4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B44B4h case    8:*/		return 0x821B44B8;
		  /* 821B44B8h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821B44B8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821B44C4;  }
		/* 821B44B8h case    9:*/		return 0x821B44BC;
		  /* 821B44BCh */ case   10:  		/* cmplw CR6, R11, R19 */
		/* 821B44BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821B44BCh case   10:*/		return 0x821B44C0;
		  /* 821B44C0h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 821B44C0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B44CC;  }
		/* 821B44C0h case   11:*/		return 0x821B44C4;
	}
	return 0x821B44C4;
} // Block from 821B4494h-821B44C4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B44C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B44C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B44C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B44C4);
		  /* 821B44C4h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B44C4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B44C4h case    0:*/		return 0x821B44C8;
		  /* 821B44C8h */ case    1:  		/* b -32 */
		/* 821B44C8h case    1:*/		return 0x821B44A8;
		/* 821B44C8h case    1:*/		return 0x821B44CC;
	}
	return 0x821B44CC;
} // Block from 821B44C4h-821B44CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B44CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B44CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B44CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B44CC);
		  /* 821B44CCh */ case    0:  		/* li R11, 1 */
		/* 821B44CCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B44CCh case    0:*/		return 0x821B44D0;
		  /* 821B44D0h */ case    1:  		/* b 8 */
		/* 821B44D0h case    1:*/		return 0x821B44D8;
		/* 821B44D0h case    1:*/		return 0x821B44D4;
	}
	return 0x821B44D4;
} // Block from 821B44CCh-821B44D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B44D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B44D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B44D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B44D4);
		  /* 821B44D4h */ case    0:  		/* mr R11, R15 */
		/* 821B44D4h case    0:*/		regs.R11 = regs.R15;
		/* 821B44D4h case    0:*/		return 0x821B44D8;
	}
	return 0x821B44D8;
} // Block from 821B44D4h-821B44D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B44D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B44D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B44D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B44D8);
		  /* 821B44D8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B44D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B44D8h case    0:*/		return 0x821B44DC;
		  /* 821B44DCh */ case    1:  		/* bc 4, CR0_EQ, 1276 */
		/* 821B44DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B49D8;  }
		/* 821B44DCh case    1:*/		return 0x821B44E0;
		  /* 821B44E0h */ case    2:  		/* addi R23, R20, 44 */
		/* 821B44E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R20,0x2C);
		/* 821B44E0h case    2:*/		return 0x821B44E4;
		  /* 821B44E4h */ case    3:  		/* mr R22, R15 */
		/* 821B44E4h case    3:*/		regs.R22 = regs.R15;
		/* 821B44E4h case    3:*/		return 0x821B44E8;
		  /* 821B44E8h */ case    4:  		/* mr R21, R23 */
		/* 821B44E8h case    4:*/		regs.R21 = regs.R23;
		/* 821B44E8h case    4:*/		return 0x821B44EC;
		  /* 821B44ECh */ case    5:  		/* lwz R11, <#[R20 + 8]> */
		/* 821B44ECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821B44ECh case    5:*/		return 0x821B44F0;
		  /* 821B44F0h */ case    6:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B44F0h case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B44F0h case    6:*/		return 0x821B44F4;
		  /* 821B44F4h */ case    7:  		/* cmplw CR6, R22, R11 */
		/* 821B44F4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 821B44F4h case    7:*/		return 0x821B44F8;
		  /* 821B44F8h */ case    8:  		/* bc 4, CR6_LT, 1248 */
		/* 821B44F8h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821B49D8;  }
		/* 821B44F8h case    8:*/		return 0x821B44FC;
		  /* 821B44FCh */ case    9:  		/* lwz R11, <#[R21]> */
		/* 821B44FCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821B44FCh case    9:*/		return 0x821B4500;
		  /* 821B4500h */ case   10:  		/* lwz R28, <#[R11 + 12]> */
		/* 821B4500h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B4500h case   10:*/		return 0x821B4504;
		  /* 821B4504h */ case   11:  		/* mr R3, R28 */
		/* 821B4504h case   11:*/		regs.R3 = regs.R28;
		/* 821B4504h case   11:*/		return 0x821B4508;
		  /* 821B4508h */ case   12:  		/* bl -276312 */
		/* 821B4508h case   12:*/		regs.LR = 0x821B450C; return 0x82170DB0;
		/* 821B4508h case   12:*/		return 0x821B450C;
		  /* 821B450Ch */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B450Ch case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B450Ch case   13:*/		return 0x821B4510;
		  /* 821B4510h */ case   14:  		/* bc 12, CR0_EQ, 1212 */
		/* 821B4510h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B4510h case   14:*/		return 0x821B4514;
		  /* 821B4514h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 821B4514h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B4514h case   15:*/		return 0x821B4518;
		  /* 821B4518h */ case   16:  		/* rlwinm R10, R11, 0, 15, 17 */
		/* 821B4518h case   16:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R10,regs.R11);
		/* 821B4518h case   16:*/		return 0x821B451C;
		  /* 821B451Ch */ case   17:  		/* cmplwi CR6, R10, 16384 */
		/* 821B451Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00004000);
		/* 821B451Ch case   17:*/		return 0x821B4520;
		  /* 821B4520h */ case   18:  		/* bc 4, CR6_EQ, 1196 */
		/* 821B4520h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821B49CC;  }
		/* 821B4520h case   18:*/		return 0x821B4524;
		  /* 821B4524h */ case   19:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821B4524h case   19:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821B4524h case   19:*/		return 0x821B4528;
		  /* 821B4528h */ case   20:  		/* lis R10, 16 */
		/* 821B4528h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x10);
		/* 821B4528h case   20:*/		return 0x821B452C;
		  /* 821B452Ch */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 821B452Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B452Ch case   21:*/		return 0x821B4530;
		  /* 821B4530h */ case   22:  		/* bc 4, CR6_EQ, 1180 */
		/* 821B4530h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821B49CC;  }
		/* 821B4530h case   22:*/		return 0x821B4534;
		  /* 821B4534h */ case   23:  		/* lwz R10, <#[R28 + 4]> */
		/* 821B4534h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821B4534h case   23:*/		return 0x821B4538;
		  /* 821B4538h */ case   24:  		/* cmplwi CR6, R10, 0 */
		/* 821B4538h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B4538h case   24:*/		return 0x821B453C;
		  /* 821B453Ch */ case   25:  		/* bc 12, CR6_EQ, 40 */
		/* 821B453Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x821B4564;  }
		/* 821B453Ch case   25:*/		return 0x821B4540;
		  /* 821B4540h */ case   26:  		/* lwz R11, <#[R10 + 16]> */
		/* 821B4540h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821B4540h case   26:*/		return 0x821B4544;
		  /* 821B4544h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821B4544h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B4544h case   27:*/		return 0x821B4548;
		  /* 821B4548h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 821B4548h case   28:*/		if ( regs.CR[6].eq ) { return 0x821B4554;  }
		/* 821B4548h case   28:*/		return 0x821B454C;
		  /* 821B454Ch */ case   29:  		/* cmplw CR6, R11, R20 */
		/* 821B454Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 821B454Ch case   29:*/		return 0x821B4550;
		  /* 821B4550h */ case   30:  		/* bc 4, CR6_EQ, 12 */
		/* 821B4550h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821B455C;  }
		/* 821B4550h case   30:*/		return 0x821B4554;
	}
	return 0x821B4554;
} // Block from 821B44D8h-821B4554h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821B4554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4554);
		  /* 821B4554h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B4554h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B4554h case    0:*/		return 0x821B4558;
		  /* 821B4558h */ case    1:  		/* b -32 */
		/* 821B4558h case    1:*/		return 0x821B4538;
		/* 821B4558h case    1:*/		return 0x821B455C;
	}
	return 0x821B455C;
} // Block from 821B4554h-821B455Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B455Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B455C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B455C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B455C);
		  /* 821B455Ch */ case    0:  		/* li R11, 1 */
		/* 821B455Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B455Ch case    0:*/		return 0x821B4560;
		  /* 821B4560h */ case    1:  		/* b 8 */
		/* 821B4560h case    1:*/		return 0x821B4568;
		/* 821B4560h case    1:*/		return 0x821B4564;
	}
	return 0x821B4564;
} // Block from 821B455Ch-821B4564h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B4564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4564);
		  /* 821B4564h */ case    0:  		/* mr R11, R15 */
		/* 821B4564h case    0:*/		regs.R11 = regs.R15;
		/* 821B4564h case    0:*/		return 0x821B4568;
	}
	return 0x821B4568;
} // Block from 821B4564h-821B4568h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B4568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4568);
		  /* 821B4568h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B4568h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B4568h case    0:*/		return 0x821B456C;
		  /* 821B456Ch */ case    1:  		/* bc 4, CR0_EQ, 1120 */
		/* 821B456Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B456Ch case    1:*/		return 0x821B4570;
		  /* 821B4570h */ case    2:  		/* lwz R30, <#[R28 + 44]> */
		/* 821B4570h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x0000002C) );
		/* 821B4570h case    2:*/		return 0x821B4574;
		  /* 821B4574h */ case    3:  		/* lwz R29, <#[R28 + 48]> */
		/* 821B4574h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000030) );
		/* 821B4574h case    3:*/		return 0x821B4578;
		  /* 821B4578h */ case    4:  		/* lwz R11, <#[R30 + 12]> */
		/* 821B4578h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B4578h case    4:*/		return 0x821B457C;
		  /* 821B457Ch */ case    5:  		/* lwz R10, <#[R29 + 12]> */
		/* 821B457Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821B457Ch case    5:*/		return 0x821B4580;
		  /* 821B4580h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 821B4580h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B4580h case    6:*/		return 0x821B4584;
		  /* 821B4584h */ case    7:  		/* bc 12, CR6_EQ, 1096 */
		/* 821B4584h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B49CC;  }
		/* 821B4584h case    7:*/		return 0x821B4588;
		  /* 821B4588h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B4588h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4588h case    8:*/		return 0x821B458C;
		  /* 821B458Ch */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B458Ch case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B458Ch case    9:*/		return 0x821B4590;
		  /* 821B4590h */ case   10:  		/* cmplwi CR6, R11, 125 */
		/* 821B4590h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821B4590h case   10:*/		return 0x821B4594;
		  /* 821B4594h */ case   11:  		/* bc 4, CR6_EQ, 28 */
		/* 821B4594h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B45B0;  }
		/* 821B4594h case   11:*/		return 0x821B4598;
		  /* 821B4598h */ case   12:  		/* lwz R9, <#[R10 + 8]> */
		/* 821B4598h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B4598h case   12:*/		return 0x821B459C;
		  /* 821B459Ch */ case   13:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821B459Ch case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821B459Ch case   13:*/		return 0x821B45A0;
		  /* 821B45A0h */ case   14:  		/* cmplwi CR6, R9, 16000 */
		/* 821B45A0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003E80);
		/* 821B45A0h case   14:*/		return 0x821B45A4;
		  /* 821B45A4h */ case   15:  		/* bc 12, CR6_EQ, 1064 */
		/* 821B45A4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821B49CC;  }
		/* 821B45A4h case   15:*/		return 0x821B45A8;
		  /* 821B45A8h */ case   16:  		/* cmplwi CR6, R11, 125 */
		/* 821B45A8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821B45A8h case   16:*/		return 0x821B45AC;
		  /* 821B45ACh */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 821B45ACh case   17:*/		if ( regs.CR[6].eq ) { return 0x821B45BC;  }
		/* 821B45ACh case   17:*/		return 0x821B45B0;
	}
	return 0x821B45B0;
} // Block from 821B4568h-821B45B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B45B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B45B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B45B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B45B0);
		  /* 821B45B0h */ case    0:  		/* cmplwi CR6, R11, 124 */
		/* 821B45B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821B45B0h case    0:*/		return 0x821B45B4;
		  /* 821B45B4h */ case    1:  		/* mr R11, R15 */
		/* 821B45B4h case    1:*/		regs.R11 = regs.R15;
		/* 821B45B4h case    1:*/		return 0x821B45B8;
		  /* 821B45B8h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821B45B8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B45C0;  }
		/* 821B45B8h case    2:*/		return 0x821B45BC;
	}
	return 0x821B45BC;
} // Block from 821B45B0h-821B45BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B45BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B45BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B45BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B45BC);
		  /* 821B45BCh */ case    0:  		/* li R11, 1 */
		/* 821B45BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B45BCh case    0:*/		return 0x821B45C0;
	}
	return 0x821B45C0;
} // Block from 821B45BCh-821B45C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B45C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B45C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B45C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B45C0);
		  /* 821B45C0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B45C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B45C0h case    0:*/		return 0x821B45C4;
		  /* 821B45C4h */ case    1:  		/* bc 4, CR0_EQ, 1032 */
		/* 821B45C4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B45C4h case    1:*/		return 0x821B45C8;
		  /* 821B45C8h */ case    2:  		/* lwz R11, <#[R10 + 8]> */
		/* 821B45C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821B45C8h case    2:*/		return 0x821B45CC;
		  /* 821B45CCh */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B45CCh case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B45CCh case    3:*/		return 0x821B45D0;
		  /* 821B45D0h */ case    4:  		/* cmplwi CR6, R11, 125 */
		/* 821B45D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821B45D0h case    4:*/		return 0x821B45D4;
		  /* 821B45D4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821B45D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B45E4;  }
		/* 821B45D4h case    5:*/		return 0x821B45D8;
		  /* 821B45D8h */ case    6:  		/* cmplwi CR6, R11, 124 */
		/* 821B45D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821B45D8h case    6:*/		return 0x821B45DC;
		  /* 821B45DCh */ case    7:  		/* mr R11, R15 */
		/* 821B45DCh case    7:*/		regs.R11 = regs.R15;
		/* 821B45DCh case    7:*/		return 0x821B45E0;
		  /* 821B45E0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821B45E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821B45E8;  }
		/* 821B45E0h case    8:*/		return 0x821B45E4;
	}
	return 0x821B45E4;
} // Block from 821B45C0h-821B45E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B45E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B45E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B45E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B45E4);
		  /* 821B45E4h */ case    0:  		/* li R11, 1 */
		/* 821B45E4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B45E4h case    0:*/		return 0x821B45E8;
	}
	return 0x821B45E8;
} // Block from 821B45E4h-821B45E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B45E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B45E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B45E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B45E8);
		  /* 821B45E8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B45E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B45E8h case    0:*/		return 0x821B45EC;
		  /* 821B45ECh */ case    1:  		/* bc 4, CR0_EQ, 992 */
		/* 821B45ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B45ECh case    1:*/		return 0x821B45F0;
		  /* 821B45F0h */ case    2:  		/* addi R9, R1, 192 */
		/* 821B45F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xC0);
		/* 821B45F0h case    2:*/		return 0x821B45F4;
		  /* 821B45F4h */ case    3:  		/* mr R8, R28 */
		/* 821B45F4h case    3:*/		regs.R8 = regs.R28;
		/* 821B45F4h case    3:*/		return 0x821B45F8;
		  /* 821B45F8h */ case    4:  		/* mr R7, R29 */
		/* 821B45F8h case    4:*/		regs.R7 = regs.R29;
		/* 821B45F8h case    4:*/		return 0x821B45FC;
		  /* 821B45FCh */ case    5:  		/* mr R6, R28 */
		/* 821B45FCh case    5:*/		regs.R6 = regs.R28;
		/* 821B45FCh case    5:*/		return 0x821B4600;
		  /* 821B4600h */ case    6:  		/* mr R5, R30 */
		/* 821B4600h case    6:*/		regs.R5 = regs.R30;
		/* 821B4600h case    6:*/		return 0x821B4604;
		  /* 821B4604h */ case    7:  		/* mr R4, R28 */
		/* 821B4604h case    7:*/		regs.R4 = regs.R28;
		/* 821B4604h case    7:*/		return 0x821B4608;
		  /* 821B4608h */ case    8:  		/* mr R3, R14 */
		/* 821B4608h case    8:*/		regs.R3 = regs.R14;
		/* 821B4608h case    8:*/		return 0x821B460C;
		  /* 821B460Ch */ case    9:  		/* bl -82180 */
		/* 821B460Ch case    9:*/		regs.LR = 0x821B4610; return 0x821A0508;
		/* 821B460Ch case    9:*/		return 0x821B4610;
		  /* 821B4610h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4610h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4610h case   10:*/		return 0x821B4614;
		  /* 821B4614h */ case   11:  		/* bc 12, CR0_EQ, 952 */
		/* 821B4614h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B4614h case   11:*/		return 0x821B4618;
		  /* 821B4618h */ case   12:  		/* lwz R11, <#[R1 + 192]> */
		/* 821B4618h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 821B4618h case   12:*/		return 0x821B461C;
		  /* 821B461Ch */ case   13:  		/* rlwinm R10, R11, 0, 21, 27 */
		/* 821B461Ch case   13:*/		cpu::op::rlwinm<0,0,21,27>(regs,&regs.R10,regs.R11);
		/* 821B461Ch case   13:*/		return 0x821B4620;
		  /* 821B4620h */ case   14:  		/* cmplwi CR6, R10, 48 */
		/* 821B4620h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 821B4620h case   14:*/		return 0x821B4624;
		  /* 821B4624h */ case   15:  		/* bc 12, CR6_GT, 936 */
		/* 821B4624h case   15:*/		if ( regs.CR[6].gt ) { return 0x821B49CC;  }
		/* 821B4624h case   15:*/		return 0x821B4628;
		  /* 821B4628h */ case   16:  		/* rlwinm. R10, R11, 0, 13, 13 */
		/* 821B4628h case   16:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R11);
		/* 821B4628h case   16:*/		return 0x821B462C;
		  /* 821B462Ch */ case   17:  		/* bc 4, CR0_EQ, 928 */
		/* 821B462Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B462Ch case   17:*/		return 0x821B4630;
		  /* 821B4630h */ case   18:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821B4630h case   18:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821B4630h case   18:*/		return 0x821B4634;
		  /* 821B4634h */ case   19:  		/* bc 4, CR0_EQ, 920 */
		/* 821B4634h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B4634h case   19:*/		return 0x821B4638;
		  /* 821B4638h */ case   20:  		/* li R4, 816 */
		/* 821B4638h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x330);
		/* 821B4638h case   20:*/		return 0x821B463C;
		  /* 821B463Ch */ case   21:  		/* mr R3, R14 */
		/* 821B463Ch case   21:*/		regs.R3 = regs.R14;
		/* 821B463Ch case   21:*/		return 0x821B4640;
		  /* 821B4640h */ case   22:  		/* bl -103656 */
		/* 821B4640h case   22:*/		regs.LR = 0x821B4644; return 0x8219B158;
		/* 821B4640h case   22:*/		return 0x821B4644;
		  /* 821B4644h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4644h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4644h case   23:*/		return 0x821B4648;
		  /* 821B4648h */ case   24:  		/* bc 12, CR0_EQ, 900 */
		/* 821B4648h case   24:*/		if ( regs.CR[0].eq ) { return 0x821B49CC;  }
		/* 821B4648h case   24:*/		return 0x821B464C;
		  /* 821B464Ch */ case   25:  		/* mr R24, R15 */
		/* 821B464Ch case   25:*/		regs.R24 = regs.R15;
		/* 821B464Ch case   25:*/		return 0x821B4650;
		  /* 821B4650h */ case   26:  		/* mr R25, R23 */
		/* 821B4650h case   26:*/		regs.R25 = regs.R23;
		/* 821B4650h case   26:*/		return 0x821B4654;
		  /* 821B4654h */ case   27:  		/* lwz R11, <#[R20 + 8]> */
		/* 821B4654h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821B4654h case   27:*/		return 0x821B4658;
		  /* 821B4658h */ case   28:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B4658h case   28:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B4658h case   28:*/		return 0x821B465C;
		  /* 821B465Ch */ case   29:  		/* cmplw CR6, R24, R11 */
		/* 821B465Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821B465Ch case   29:*/		return 0x821B4660;
		  /* 821B4660h */ case   30:  		/* bc 4, CR6_LT, 876 */
		/* 821B4660h case   30:*/		if ( !regs.CR[6].lt ) { return 0x821B49CC;  }
		/* 821B4660h case   30:*/		return 0x821B4664;
		  /* 821B4664h */ case   31:  		/* lwz R11, <#[R25]> */
		/* 821B4664h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B4664h case   31:*/		return 0x821B4668;
		  /* 821B4668h */ case   32:  		/* lwz R27, <#[R11 + 12]> */
		/* 821B4668h case   32:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B4668h case   32:*/		return 0x821B466C;
		  /* 821B466Ch */ case   33:  		/* cmplw CR6, R27, R28 */
		/* 821B466Ch case   33:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 821B466Ch case   33:*/		return 0x821B4670;
		  /* 821B4670h */ case   34:  		/* bc 12, CR6_EQ, 288 */
		/* 821B4670h case   34:*/		if ( regs.CR[6].eq ) { return 0x821B4790;  }
		/* 821B4670h case   34:*/		return 0x821B4674;
		  /* 821B4674h */ case   35:  		/* lwz R10, <#[R27 + 8]> */
		/* 821B4674h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821B4674h case   35:*/		return 0x821B4678;
		  /* 821B4678h */ case   36:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821B4678h case   36:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821B4678h case   36:*/		return 0x821B467C;
		  /* 821B467Ch */ case   37:  		/* cmplwi CR6, R11, 1 */
		/* 821B467Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821B467Ch case   37:*/		return 0x821B4680;
		  /* 821B4680h */ case   38:  		/* bc 12, CR6_LT, 16 */
		/* 821B4680h case   38:*/		if ( regs.CR[6].lt ) { return 0x821B4690;  }
		/* 821B4680h case   38:*/		return 0x821B4684;
		  /* 821B4684h */ case   39:  		/* cmplwi CR6, R11, 31 */
		/* 821B4684h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001F);
		/* 821B4684h case   39:*/		return 0x821B4688;
		  /* 821B4688h */ case   40:  		/* li R11, 1 */
		/* 821B4688h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B4688h case   40:*/		return 0x821B468C;
		  /* 821B468Ch */ case   41:  		/* bc 4, CR6_GT, 8 */
		/* 821B468Ch case   41:*/		if ( !regs.CR[6].gt ) { return 0x821B4694;  }
		/* 821B468Ch case   41:*/		return 0x821B4690;
	}
	return 0x821B4690;
} // Block from 821B45E8h-821B4690h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821B4690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4690);
		  /* 821B4690h */ case    0:  		/* mr R11, R15 */
		/* 821B4690h case    0:*/		regs.R11 = regs.R15;
		/* 821B4690h case    0:*/		return 0x821B4694;
	}
	return 0x821B4694;
} // Block from 821B4690h-821B4694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B4694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4694);
		  /* 821B4694h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B4694h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B4694h case    0:*/		return 0x821B4698;
		  /* 821B4698h */ case    1:  		/* bc 12, CR0_EQ, 248 */
		/* 821B4698h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B4790;  }
		/* 821B4698h case    1:*/		return 0x821B469C;
		  /* 821B469Ch */ case    2:  		/* rlwinm R11, R10, 0, 10, 12 */
		/* 821B469Ch case    2:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R10);
		/* 821B469Ch case    2:*/		return 0x821B46A0;
		  /* 821B46A0h */ case    3:  		/* lis R10, 24 */
		/* 821B46A0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x18);
		/* 821B46A0h case    3:*/		return 0x821B46A4;
		  /* 821B46A4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821B46A4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B46A4h case    4:*/		return 0x821B46A8;
		  /* 821B46A8h */ case    5:  		/* bc 4, CR6_LT, 232 */
		/* 821B46A8h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821B4790;  }
		/* 821B46A8h case    5:*/		return 0x821B46AC;
		  /* 821B46ACh */ case    6:  		/* lwz R10, <#[R27 + 4]> */
		/* 821B46ACh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821B46ACh case    6:*/		return 0x821B46B0;
		  /* 821B46B0h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821B46B0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B46B0h case    7:*/		return 0x821B46B4;
		  /* 821B46B4h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 821B46B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821B46DC;  }
		/* 821B46B4h case    8:*/		return 0x821B46B8;
		  /* 821B46B8h */ case    9:  		/* lwz R11, <#[R10 + 16]> */
		/* 821B46B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821B46B8h case    9:*/		return 0x821B46BC;
		  /* 821B46BCh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821B46BCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B46BCh case   10:*/		return 0x821B46C0;
		  /* 821B46C0h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821B46C0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821B46CC;  }
		/* 821B46C0h case   11:*/		return 0x821B46C4;
		  /* 821B46C4h */ case   12:  		/* cmplw CR6, R11, R20 */
		/* 821B46C4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 821B46C4h case   12:*/		return 0x821B46C8;
		  /* 821B46C8h */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821B46C8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B46D4;  }
		/* 821B46C8h case   13:*/		return 0x821B46CC;
	}
	return 0x821B46CC;
} // Block from 821B4694h-821B46CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B46CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B46CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B46CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B46CC);
		  /* 821B46CCh */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B46CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B46CCh case    0:*/		return 0x821B46D0;
		  /* 821B46D0h */ case    1:  		/* b -32 */
		/* 821B46D0h case    1:*/		return 0x821B46B0;
		/* 821B46D0h case    1:*/		return 0x821B46D4;
	}
	return 0x821B46D4;
} // Block from 821B46CCh-821B46D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B46D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B46D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B46D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B46D4);
		  /* 821B46D4h */ case    0:  		/* li R11, 1 */
		/* 821B46D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B46D4h case    0:*/		return 0x821B46D8;
		  /* 821B46D8h */ case    1:  		/* b 8 */
		/* 821B46D8h case    1:*/		return 0x821B46E0;
		/* 821B46D8h case    1:*/		return 0x821B46DC;
	}
	return 0x821B46DC;
} // Block from 821B46D4h-821B46DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B46DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B46DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B46DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B46DC);
		  /* 821B46DCh */ case    0:  		/* mr R11, R15 */
		/* 821B46DCh case    0:*/		regs.R11 = regs.R15;
		/* 821B46DCh case    0:*/		return 0x821B46E0;
	}
	return 0x821B46E0;
} // Block from 821B46DCh-821B46E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B46E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B46E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B46E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B46E0);
		  /* 821B46E0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B46E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B46E0h case    0:*/		return 0x821B46E4;
		  /* 821B46E4h */ case    1:  		/* bc 4, CR0_EQ, 172 */
		/* 821B46E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B4790;  }
		/* 821B46E4h case    1:*/		return 0x821B46E8;
		  /* 821B46E8h */ case    2:  		/* mr R4, R28 */
		/* 821B46E8h case    2:*/		regs.R4 = regs.R28;
		/* 821B46E8h case    2:*/		return 0x821B46EC;
		  /* 821B46ECh */ case    3:  		/* mr R3, R27 */
		/* 821B46ECh case    3:*/		regs.R3 = regs.R27;
		/* 821B46ECh case    3:*/		return 0x821B46F0;
		  /* 821B46F0h */ case    4:  		/* bl 465048 */
		/* 821B46F0h case    4:*/		regs.LR = 0x821B46F4; return 0x82225F88;
		/* 821B46F0h case    4:*/		return 0x821B46F4;
		  /* 821B46F4h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B46F4h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B46F4h case    5:*/		return 0x821B46F8;
		  /* 821B46F8h */ case    6:  		/* bc 12, CR0_EQ, 152 */
		/* 821B46F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B4790;  }
		/* 821B46F8h case    6:*/		return 0x821B46FC;
		  /* 821B46FCh */ case    7:  		/* addi R10, R1, 192 */
		/* 821B46FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 821B46FCh case    7:*/		return 0x821B4700;
		  /* 821B4700h */ case    8:  		/* mr R9, R28 */
		/* 821B4700h case    8:*/		regs.R9 = regs.R28;
		/* 821B4700h case    8:*/		return 0x821B4704;
		  /* 821B4704h */ case    9:  		/* mr R8, R17 */
		/* 821B4704h case    9:*/		regs.R8 = regs.R17;
		/* 821B4704h case    9:*/		return 0x821B4708;
		  /* 821B4708h */ case   10:  		/* mr R7, R29 */
		/* 821B4708h case   10:*/		regs.R7 = regs.R29;
		/* 821B4708h case   10:*/		return 0x821B470C;
		  /* 821B470Ch */ case   11:  		/* mr R6, R28 */
		/* 821B470Ch case   11:*/		regs.R6 = regs.R28;
		/* 821B470Ch case   11:*/		return 0x821B4710;
		  /* 821B4710h */ case   12:  		/* mr R5, R30 */
		/* 821B4710h case   12:*/		regs.R5 = regs.R30;
		/* 821B4710h case   12:*/		return 0x821B4714;
		  /* 821B4714h */ case   13:  		/* mr R4, R28 */
		/* 821B4714h case   13:*/		regs.R4 = regs.R28;
		/* 821B4714h case   13:*/		return 0x821B4718;
		  /* 821B4718h */ case   14:  		/* mr R3, R14 */
		/* 821B4718h case   14:*/		regs.R3 = regs.R14;
		/* 821B4718h case   14:*/		return 0x821B471C;
		  /* 821B471Ch */ case   15:  		/* bl -72740 */
		/* 821B471Ch case   15:*/		regs.LR = 0x821B4720; return 0x821A2AF8;
		/* 821B471Ch case   15:*/		return 0x821B4720;
		  /* 821B4720h */ case   16:  		/* mr R31, R3 */
		/* 821B4720h case   16:*/		regs.R31 = regs.R3;
		/* 821B4720h case   16:*/		return 0x821B4724;
		  /* 821B4724h */ case   17:  		/* mr R3, R28 */
		/* 821B4724h case   17:*/		regs.R3 = regs.R28;
		/* 821B4724h case   17:*/		return 0x821B4728;
		  /* 821B4728h */ case   18:  		/* mr R4, R31 */
		/* 821B4728h case   18:*/		regs.R4 = regs.R31;
		/* 821B4728h case   18:*/		return 0x821B472C;
		  /* 821B472Ch */ case   19:  		/* lwz R26, <#[R31 + 12]> */
		/* 821B472Ch case   19:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B472Ch case   19:*/		return 0x821B4730;
		  /* 821B4730h */ case   20:  		/* bl -247144 */
		/* 821B4730h case   20:*/		regs.LR = 0x821B4734; return 0x821781C8;
		/* 821B4730h case   20:*/		return 0x821B4734;
		  /* 821B4734h */ case   21:  		/* li R7, 1 */
		/* 821B4734h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821B4734h case   21:*/		return 0x821B4738;
		  /* 821B4738h */ case   22:  		/* li R6, 1 */
		/* 821B4738h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B4738h case   22:*/		return 0x821B473C;
		  /* 821B473Ch */ case   23:  		/* mr R5, R28 */
		/* 821B473Ch case   23:*/		regs.R5 = regs.R28;
		/* 821B473Ch case   23:*/		return 0x821B4740;
		  /* 821B4740h */ case   24:  		/* mr R4, R27 */
		/* 821B4740h case   24:*/		regs.R4 = regs.R27;
		/* 821B4740h case   24:*/		return 0x821B4744;
		  /* 821B4744h */ case   25:  		/* mr R3, R14 */
		/* 821B4744h case   25:*/		regs.R3 = regs.R14;
		/* 821B4744h case   25:*/		return 0x821B4748;
		  /* 821B4748h */ case   26:  		/* bl 496424 */
		/* 821B4748h case   26:*/		regs.LR = 0x821B474C; return 0x8222DA70;
		/* 821B4748h case   26:*/		return 0x821B474C;
		  /* 821B474Ch */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B474Ch case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B474Ch case   27:*/		return 0x821B4750;
		  /* 821B4750h */ case   28:  		/* bc 4, CR0_EQ, 76 */
		/* 821B4750h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821B479C;  }
		/* 821B4750h case   28:*/		return 0x821B4754;
		  /* 821B4754h */ case   29:  		/* mr R5, R14 */
		/* 821B4754h case   29:*/		regs.R5 = regs.R14;
		/* 821B4754h case   29:*/		return 0x821B4758;
		  /* 821B4758h */ case   30:  		/* mr R4, R31 */
		/* 821B4758h case   30:*/		regs.R4 = regs.R31;
		/* 821B4758h case   30:*/		return 0x821B475C;
		  /* 821B475Ch */ case   31:  		/* mr R3, R28 */
		/* 821B475Ch case   31:*/		regs.R3 = regs.R28;
		/* 821B475Ch case   31:*/		return 0x821B4760;
		  /* 821B4760h */ case   32:  		/* bl -245328 */
		/* 821B4760h case   32:*/		regs.LR = 0x821B4764; return 0x82178910;
		/* 821B4760h case   32:*/		return 0x821B4764;
		  /* 821B4764h */ case   33:  		/* mr R3, R26 */
		/* 821B4764h case   33:*/		regs.R3 = regs.R26;
		/* 821B4764h case   33:*/		return 0x821B4768;
		  /* 821B4768h */ case   34:  		/* bl -327144 */
		/* 821B4768h case   34:*/		regs.LR = 0x821B476C; return 0x82164980;
		/* 821B4768h case   34:*/		return 0x821B476C;
		  /* 821B476Ch */ case   35:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B476Ch case   35:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B476Ch case   35:*/		return 0x821B4770;
		  /* 821B4770h */ case   36:  		/* mr R4, R26 */
		/* 821B4770h case   36:*/		regs.R4 = regs.R26;
		/* 821B4770h case   36:*/		return 0x821B4774;
		  /* 821B4774h */ case   37:  		/* mr R3, R14 */
		/* 821B4774h case   37:*/		regs.R3 = regs.R14;
		/* 821B4774h case   37:*/		return 0x821B4778;
		  /* 821B4778h */ case   38:  		/* bc 12, CR0_EQ, 20 */
		/* 821B4778h case   38:*/		if ( regs.CR[0].eq ) { return 0x821B478C;  }
		/* 821B4778h case   38:*/		return 0x821B477C;
		  /* 821B477Ch */ case   39:  		/* li R6, 1 */
		/* 821B477Ch case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B477Ch case   39:*/		return 0x821B4780;
		  /* 821B4780h */ case   40:  		/* li R5, 0 */
		/* 821B4780h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B4780h case   40:*/		return 0x821B4784;
		  /* 821B4784h */ case   41:  		/* bl 486468 */
		/* 821B4784h case   41:*/		regs.LR = 0x821B4788; return 0x8222B3C8;
		/* 821B4784h case   41:*/		return 0x821B4788;
		  /* 821B4788h */ case   42:  		/* b 8 */
		/* 821B4788h case   42:*/		return 0x821B4790;
		/* 821B4788h case   42:*/		return 0x821B478C;
	}
	return 0x821B478C;
} // Block from 821B46E0h-821B478Ch (43 instructions)

//////////////////////////////////////////////////////
// Block at 821B478Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B478C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B478C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B478C);
		  /* 821B478Ch */ case    0:  		/* bl -81108 */
		/* 821B478Ch case    0:*/		regs.LR = 0x821B4790; return 0x821A0AB8;
		/* 821B478Ch case    0:*/		return 0x821B4790;
	}
	return 0x821B4790;
} // Block from 821B478Ch-821B4790h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B4790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4790);
		  /* 821B4790h */ case    0:  		/* addi R24, R24, 1 */
		/* 821B4790h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821B4790h case    0:*/		return 0x821B4794;
		  /* 821B4794h */ case    1:  		/* addi R25, R25, 4 */
		/* 821B4794h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821B4794h case    1:*/		return 0x821B4798;
		  /* 821B4798h */ case    2:  		/* b -324 */
		/* 821B4798h case    2:*/		return 0x821B4654;
		/* 821B4798h case    2:*/		return 0x821B479C;
	}
	return 0x821B479C;
} // Block from 821B4790h-821B479Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B479Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B479C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B479C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B479C);
		  /* 821B479Ch */ case    0:  		/* li R7, 1 */
		/* 821B479Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821B479Ch case    0:*/		return 0x821B47A0;
		  /* 821B47A0h */ case    1:  		/* li R6, 1 */
		/* 821B47A0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B47A0h case    1:*/		return 0x821B47A4;
		  /* 821B47A4h */ case    2:  		/* mr R5, R28 */
		/* 821B47A4h case    2:*/		regs.R5 = regs.R28;
		/* 821B47A4h case    2:*/		return 0x821B47A8;
		  /* 821B47A8h */ case    3:  		/* mr R4, R27 */
		/* 821B47A8h case    3:*/		regs.R4 = regs.R27;
		/* 821B47A8h case    3:*/		return 0x821B47AC;
		  /* 821B47ACh */ case    4:  		/* mr R3, R14 */
		/* 821B47ACh case    4:*/		regs.R3 = regs.R14;
		/* 821B47ACh case    4:*/		return 0x821B47B0;
		  /* 821B47B0h */ case    5:  		/* bl 496600 */
		/* 821B47B0h case    5:*/		regs.LR = 0x821B47B4; return 0x8222DB88;
		/* 821B47B0h case    5:*/		return 0x821B47B4;
		  /* 821B47B4h */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 821B47B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B47B4h case    6:*/		return 0x821B47B8;
		  /* 821B47B8h */ case    7:  		/* lwz R10, <#[R31]> */
		/* 821B47B8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821B47B8h case    7:*/		return 0x821B47BC;
		  /* 821B47BCh */ case    8:  		/* addi R9, R11, 4 */
		/* 821B47BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821B47BCh case    8:*/		return 0x821B47C0;
		  /* 821B47C0h */ case    9:  		/* lwz R8, <#[R31 + 12]> */
		/* 821B47C0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B47C0h case    9:*/		return 0x821B47C4;
		  /* 821B47C4h */ case   10:  		/* rlwinm R11, R10, 27, 30, 31 */
		/* 821B47C4h case   10:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R10);
		/* 821B47C4h case   10:*/		return 0x821B47C8;
		  /* 821B47C8h */ case   11:  		/* rlwinm R10, R10, 25, 30, 31 */
		/* 821B47C8h case   11:*/		cpu::op::rlwinm<0,25,30,31>(regs,&regs.R10,regs.R10);
		/* 821B47C8h case   11:*/		return 0x821B47CC;
		  /* 821B47CCh */ case   12:  		/* lwz R7, <#[R9]> */
		/* 821B47CCh case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821B47CCh case   12:*/		return 0x821B47D0;
		  /* 821B47D0h */ case   13:  		/* b 12 */
		/* 821B47D0h case   13:*/		return 0x821B47DC;
		/* 821B47D0h case   13:*/		return 0x821B47D4;
		  /* 821B47D4h */ case   14:  		/* addi R9, R7, 8 */
		/* 821B47D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x8);
		/* 821B47D4h case   14:*/		return 0x821B47D8;
		  /* 821B47D8h */ case   15:  		/* lwz R7, <#[R7 + 8]> */
		/* 821B47D8h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821B47D8h case   15:*/		return 0x821B47DC;
	}
	return 0x821B47DC;
} // Block from 821B479Ch-821B47DCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B47DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B47DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B47DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B47DC);
		  /* 821B47DCh */ case    0:  		/* cmplw CR6, R7, R30 */
		/* 821B47DCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R30);
		/* 821B47DCh case    0:*/		return 0x821B47E0;
		  /* 821B47E0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B47E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B47D4;  }
		/* 821B47E0h case    1:*/		return 0x821B47E4;
		  /* 821B47E4h */ case    2:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 821B47E4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 821B47E4h case    2:*/		return 0x821B47E8;
		  /* 821B47E8h */ case    3:  		/* lwz R7, <#[R30 + 8]> */
		/* 821B47E8h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000008) );
		/* 821B47E8h case    3:*/		return 0x821B47EC;
		  /* 821B47ECh */ case    4:  		/* rlwinm R5, R11, 0, 26, 31 */
		/* 821B47ECh case    4:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R5,regs.R11);
		/* 821B47ECh case    4:*/		return 0x821B47F0;
		  /* 821B47F0h */ case    5:  		/* or R6, R6, R11 */
		/* 821B47F0h case    5:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R11);
		/* 821B47F0h case    5:*/		return 0x821B47F4;
		  /* 821B47F4h */ case    6:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821B47F4h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B47F4h case    6:*/		return 0x821B47F8;
		  /* 821B47F8h */ case    7:  		/* rlwinm R6, R6, 2, 26, 29 */
		/* 821B47F8h case    7:*/		cpu::op::rlwinm<0,2,26,29>(regs,&regs.R6,regs.R6);
		/* 821B47F8h case    7:*/		return 0x821B47FC;
		  /* 821B47FCh */ case    8:  		/* stw R7, <#[R9]> */
		/* 821B47FCh case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821B47FCh case    8:*/		return 0x821B4800;
		  /* 821B4800h */ case    9:  		/* or R9, R6, R5 */
		/* 821B4800h case    9:*/		cpu::op::or<0>(regs,&regs.R9,regs.R6,regs.R5);
		/* 821B4800h case    9:*/		return 0x821B4804;
		  /* 821B4804h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821B4804h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821B4804h case   10:*/		return 0x821B4808;
		  /* 821B4808h */ case   11:  		/* or R11, R9, R11 */
		/* 821B4808h case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821B4808h case   11:*/		return 0x821B480C;
		  /* 821B480Ch */ case   12:  		/* lwz R9, <#[R8 + 4]> */
		/* 821B480Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 821B480Ch case   12:*/		return 0x821B4810;
		  /* 821B4810h */ case   13:  		/* stw R9, <#[R30 + 8]> */
		/* 821B4810h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821B4810h case   13:*/		return 0x821B4814;
		  /* 821B4814h */ case   14:  		/* stw R30, <#[R8 + 4]> */
		/* 821B4814h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + 0x00000004) );
		/* 821B4814h case   14:*/		return 0x821B4818;
		  /* 821B4818h */ case   15:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821B4818h case   15:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821B4818h case   15:*/		return 0x821B481C;
		  /* 821B481Ch */ case   16:  		/* stw R8, <#[R30 + 12]> */
		/* 821B481Ch case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B481Ch case   16:*/		return 0x821B4820;
		  /* 821B4820h */ case   17:  		/* lwz R8, <#[R30]> */
		/* 821B4820h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 821B4820h case   17:*/		return 0x821B4824;
		  /* 821B4824h */ case   18:  		/* rlwinm R8, R8, 0, 0, 18 */
		/* 821B4824h case   18:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R8,regs.R8);
		/* 821B4824h case   18:*/		return 0x821B4828;
		  /* 821B4828h */ case   19:  		/* lwz R9, <#[R31]> */
		/* 821B4828h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821B4828h case   19:*/		return 0x821B482C;
		  /* 821B482Ch */ case   20:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821B482Ch case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821B482Ch case   20:*/		return 0x821B4830;
		  /* 821B4830h */ case   21:  		/* or R11, R11, R8 */
		/* 821B4830h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821B4830h case   21:*/		return 0x821B4834;
		  /* 821B4834h */ case   22:  		/* or R11, R11, R9 */
		/* 821B4834h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821B4834h case   22:*/		return 0x821B4838;
		  /* 821B4838h */ case   23:  		/* stw R11, <#[R30]> */
		/* 821B4838h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B4838h case   23:*/		return 0x821B483C;
		  /* 821B483Ch */ case   24:  		/* lwz R9, <#[R29 + 12]> */
		/* 821B483Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 821B483Ch case   24:*/		return 0x821B4840;
		  /* 821B4840h */ case   25:  		/* addi R9, R9, 4 */
		/* 821B4840h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821B4840h case   25:*/		return 0x821B4844;
		  /* 821B4844h */ case   26:  		/* lwz R8, <#[R9]> */
		/* 821B4844h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821B4844h case   26:*/		return 0x821B4848;
		  /* 821B4848h */ case   27:  		/* lwz R11, <#[R31 + 12]> */
		/* 821B4848h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821B4848h case   27:*/		return 0x821B484C;
		  /* 821B484Ch */ case   28:  		/* b 12 */
		/* 821B484Ch case   28:*/		return 0x821B4858;
		/* 821B484Ch case   28:*/		return 0x821B4850;
		  /* 821B4850h */ case   29:  		/* addi R9, R8, 8 */
		/* 821B4850h case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x8);
		/* 821B4850h case   29:*/		return 0x821B4854;
		  /* 821B4854h */ case   30:  		/* lwz R8, <#[R8 + 8]> */
		/* 821B4854h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821B4854h case   30:*/		return 0x821B4858;
	}
	return 0x821B4858;
} // Block from 821B47DCh-821B4858h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821B4858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4858);
		  /* 821B4858h */ case    0:  		/* cmplw CR6, R8, R29 */
		/* 821B4858h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R29);
		/* 821B4858h case    0:*/		return 0x821B485C;
		  /* 821B485Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821B485Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B4850;  }
		/* 821B485Ch case    1:*/		return 0x821B4860;
		  /* 821B4860h */ case    2:  		/* lwz R8, <#[R29 + 8]> */
		/* 821B4860h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 821B4860h case    2:*/		return 0x821B4864;
		  /* 821B4864h */ case    3:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 821B4864h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 821B4864h case    3:*/		return 0x821B4868;
		  /* 821B4868h */ case    4:  		/* rlwinm R6, R10, 0, 26, 31 */
		/* 821B4868h case    4:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R6,regs.R10);
		/* 821B4868h case    4:*/		return 0x821B486C;
		  /* 821B486Ch */ case    5:  		/* or R7, R7, R10 */
		/* 821B486Ch case    5:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 821B486Ch case    5:*/		return 0x821B4870;
		  /* 821B4870h */ case    6:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 821B4870h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821B4870h case    6:*/		return 0x821B4874;
		  /* 821B4874h */ case    7:  		/* rlwinm R7, R7, 2, 26, 29 */
		/* 821B4874h case    7:*/		cpu::op::rlwinm<0,2,26,29>(regs,&regs.R7,regs.R7);
		/* 821B4874h case    7:*/		return 0x821B4878;
		  /* 821B4878h */ case    8:  		/* stw R8, <#[R9]> */
		/* 821B4878h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821B4878h case    8:*/		return 0x821B487C;
		  /* 821B487Ch */ case    9:  		/* mr R5, R14 */
		/* 821B487Ch case    9:*/		regs.R5 = regs.R14;
		/* 821B487Ch case    9:*/		return 0x821B4880;
		  /* 821B4880h */ case   10:  		/* or R9, R7, R6 */
		/* 821B4880h case   10:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R6);
		/* 821B4880h case   10:*/		return 0x821B4884;
		  /* 821B4884h */ case   11:  		/* mr R4, R31 */
		/* 821B4884h case   11:*/		regs.R4 = regs.R31;
		/* 821B4884h case   11:*/		return 0x821B4888;
		  /* 821B4888h */ case   12:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821B4888h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821B4888h case   12:*/		return 0x821B488C;
		  /* 821B488Ch */ case   13:  		/* mr R3, R28 */
		/* 821B488Ch case   13:*/		regs.R3 = regs.R28;
		/* 821B488Ch case   13:*/		return 0x821B4890;
		  /* 821B4890h */ case   14:  		/* or R10, R9, R10 */
		/* 821B4890h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821B4890h case   14:*/		return 0x821B4894;
		  /* 821B4894h */ case   15:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821B4894h case   15:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821B4894h case   15:*/		return 0x821B4898;
		  /* 821B4898h */ case   16:  		/* lwz R9, <#[R11 + 4]> */
		/* 821B4898h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4898h case   16:*/		return 0x821B489C;
		  /* 821B489Ch */ case   17:  		/* stw R9, <#[R29 + 8]> */
		/* 821B489Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 821B489Ch case   17:*/		return 0x821B48A0;
		  /* 821B48A0h */ case   18:  		/* stw R29, <#[R11 + 4]> */
		/* 821B48A0h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821B48A0h case   18:*/		return 0x821B48A4;
		  /* 821B48A4h */ case   19:  		/* stw R11, <#[R29 + 12]> */
		/* 821B48A4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821B48A4h case   19:*/		return 0x821B48A8;
		  /* 821B48A8h */ case   20:  		/* lwz R9, <#[R31]> */
		/* 821B48A8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821B48A8h case   20:*/		return 0x821B48AC;
		  /* 821B48ACh */ case   21:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821B48ACh case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821B48ACh case   21:*/		return 0x821B48B0;
		  /* 821B48B0h */ case   22:  		/* lwz R11, <#[R29]> */
		/* 821B48B0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B48B0h case   22:*/		return 0x821B48B4;
		  /* 821B48B4h */ case   23:  		/* rlwinm R11, R11, 0, 0, 18 */
		/* 821B48B4h case   23:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R11,regs.R11);
		/* 821B48B4h case   23:*/		return 0x821B48B8;
		  /* 821B48B8h */ case   24:  		/* or R11, R10, R11 */
		/* 821B48B8h case   24:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B48B8h case   24:*/		return 0x821B48BC;
		  /* 821B48BCh */ case   25:  		/* or R11, R11, R9 */
		/* 821B48BCh case   25:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821B48BCh case   25:*/		return 0x821B48C0;
		  /* 821B48C0h */ case   26:  		/* stw R11, <#[R29]> */
		/* 821B48C0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821B48C0h case   26:*/		return 0x821B48C4;
		  /* 821B48C4h */ case   27:  		/* bl -245684 */
		/* 821B48C4h case   27:*/		regs.LR = 0x821B48C8; return 0x82178910;
		/* 821B48C4h case   27:*/		return 0x821B48C8;
		  /* 821B48C8h */ case   28:  		/* li R8, 0 */
		/* 821B48C8h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B48C8h case   28:*/		return 0x821B48CC;
		  /* 821B48CCh */ case   29:  		/* li R7, 0 */
		/* 821B48CCh case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B48CCh case   29:*/		return 0x821B48D0;
		  /* 821B48D0h */ case   30:  		/* li R6, 117 */
		/* 821B48D0h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821B48D0h case   30:*/		return 0x821B48D4;
		  /* 821B48D4h */ case   31:  		/* mr R5, R27 */
		/* 821B48D4h case   31:*/		regs.R5 = regs.R27;
		/* 821B48D4h case   31:*/		return 0x821B48D8;
		  /* 821B48D8h */ case   32:  		/* li R4, 0 */
		/* 821B48D8h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B48D8h case   32:*/		return 0x821B48DC;
		  /* 821B48DCh */ case   33:  		/* mr R3, R14 */
		/* 821B48DCh case   33:*/		regs.R3 = regs.R14;
		/* 821B48DCh case   33:*/		return 0x821B48E0;
		  /* 821B48E0h */ case   34:  		/* bl -293072 */
		/* 821B48E0h case   34:*/		regs.LR = 0x821B48E4; return 0x8216D010;
		/* 821B48E0h case   34:*/		return 0x821B48E4;
		  /* 821B48E4h */ case   35:  		/* mr R31, R3 */
		/* 821B48E4h case   35:*/		regs.R31 = regs.R3;
		/* 821B48E4h case   35:*/		return 0x821B48E8;
		  /* 821B48E8h */ case   36:  		/* mr R4, R26 */
		/* 821B48E8h case   36:*/		regs.R4 = regs.R26;
		/* 821B48E8h case   36:*/		return 0x821B48EC;
		  /* 821B48ECh */ case   37:  		/* mr R3, R14 */
		/* 821B48ECh case   37:*/		regs.R3 = regs.R14;
		/* 821B48ECh case   37:*/		return 0x821B48F0;
		  /* 821B48F0h */ case   38:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B48F0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B48F0h case   38:*/		return 0x821B48F4;
		  /* 821B48F4h */ case   39:  		/* oris R11, R11, 512 */
		/* 821B48F4h case   39:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821B48F4h case   39:*/		return 0x821B48F8;
		  /* 821B48F8h */ case   40:  		/* stw R11, <#[R31 + 8]> */
		/* 821B48F8h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B48F8h case   40:*/		return 0x821B48FC;
		  /* 821B48FCh */ case   41:  		/* bl -248060 */
		/* 821B48FCh case   41:*/		regs.LR = 0x821B4900; return 0x82178000;
		/* 821B48FCh case   41:*/		return 0x821B4900;
		  /* 821B4900h */ case   42:  		/* mr R4, R3 */
		/* 821B4900h case   42:*/		regs.R4 = regs.R3;
		/* 821B4900h case   42:*/		return 0x821B4904;
		  /* 821B4904h */ case   43:  		/* mr R3, R31 */
		/* 821B4904h case   43:*/		regs.R3 = regs.R31;
		/* 821B4904h case   43:*/		return 0x821B4908;
		  /* 821B4908h */ case   44:  		/* bl -247616 */
		/* 821B4908h case   44:*/		regs.LR = 0x821B490C; return 0x821781C8;
		/* 821B4908h case   44:*/		return 0x821B490C;
		  /* 821B490Ch */ case   45:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B490Ch case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B490Ch case   45:*/		return 0x821B4910;
		  /* 821B4910h */ case   46:  		/* mr R4, R31 */
		/* 821B4910h case   46:*/		regs.R4 = regs.R31;
		/* 821B4910h case   46:*/		return 0x821B4914;
		  /* 821B4914h */ case   47:  		/* oris R11, R11, 256 */
		/* 821B4914h case   47:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821B4914h case   47:*/		return 0x821B4918;
		  /* 821B4918h */ case   48:  		/* mr R5, R14 */
		/* 821B4918h case   48:*/		regs.R5 = regs.R14;
		/* 821B4918h case   48:*/		return 0x821B491C;
		  /* 821B491Ch */ case   49:  		/* stw R11, <#[R31 + 8]> */
		/* 821B491Ch case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B491Ch case   49:*/		return 0x821B4920;
		  /* 821B4920h */ case   50:  		/* mr R3, R28 */
		/* 821B4920h case   50:*/		regs.R3 = regs.R28;
		/* 821B4920h case   50:*/		return 0x821B4924;
		  /* 821B4924h */ case   51:  		/* bl -247444 */
		/* 821B4924h case   51:*/		regs.LR = 0x821B4928; return 0x82178290;
		/* 821B4924h case   51:*/		return 0x821B4928;
		  /* 821B4928h */ case   52:  		/* mr R5, R14 */
		/* 821B4928h case   52:*/		regs.R5 = regs.R14;
		/* 821B4928h case   52:*/		return 0x821B492C;
		  /* 821B492Ch */ case   53:  		/* mr R4, R31 */
		/* 821B492Ch case   53:*/		regs.R4 = regs.R31;
		/* 821B492Ch case   53:*/		return 0x821B4930;
		  /* 821B4930h */ case   54:  		/* mr R3, R27 */
		/* 821B4930h case   54:*/		regs.R3 = regs.R27;
		/* 821B4930h case   54:*/		return 0x821B4934;
		  /* 821B4934h */ case   55:  		/* bl -247460 */
		/* 821B4934h case   55:*/		regs.LR = 0x821B4938; return 0x82178290;
		/* 821B4934h case   55:*/		return 0x821B4938;
		  /* 821B4938h */ case   56:  		/* cmplwi CR6, R18, 0 */
		/* 821B4938h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821B4938h case   56:*/		return 0x821B493C;
		  /* 821B493Ch */ case   57:  		/* bc 4, CR6_EQ, 44 */
		/* 821B493Ch case   57:*/		if ( !regs.CR[6].eq ) { return 0x821B4968;  }
		/* 821B493Ch case   57:*/		return 0x821B4940;
		  /* 821B4940h */ case   58:  		/* li R5, 38 */
		/* 821B4940h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B4940h case   58:*/		return 0x821B4944;
		  /* 821B4944h */ case   59:  		/* li R4, 8 */
		/* 821B4944h case   59:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B4944h case   59:*/		return 0x821B4948;
		  /* 821B4948h */ case   60:  		/* mr R3, R14 */
		/* 821B4948h case   60:*/		regs.R3 = regs.R14;
		/* 821B4948h case   60:*/		return 0x821B494C;
		  /* 821B494Ch */ case   61:  		/* bl -327772 */
		/* 821B494Ch case   61:*/		regs.LR = 0x821B4950; return 0x821648F0;
		/* 821B494Ch case   61:*/		return 0x821B4950;
		  /* 821B4950h */ case   62:  		/* addi R11, R3, 4 */
		/* 821B4950h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821B4950h case   62:*/		return 0x821B4954;
		  /* 821B4954h */ case   63:  		/* ori R10, R3, 1 */
		/* 821B4954h case   63:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821B4954h case   63:*/		return 0x821B4958;
		  /* 821B4958h */ case   64:  		/* ori R11, R11, 1 */
		/* 821B4958h case   64:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B4958h case   64:*/		return 0x821B495C;
		  /* 821B495Ch */ case   65:  		/* mr R18, R3 */
		/* 821B495Ch case   65:*/		regs.R18 = regs.R3;
		/* 821B495Ch case   65:*/		return 0x821B4960;
		  /* 821B4960h */ case   66:  		/* stw R10, <#[R3 + 4]> */
		/* 821B4960h case   66:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4960h case   66:*/		return 0x821B4964;
		  /* 821B4964h */ case   67:  		/* stw R11, <#[R3]> */
		/* 821B4964h case   67:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4964h case   67:*/		return 0x821B4968;
	}
	return 0x821B4968;
} // Block from 821B4858h-821B4968h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821B4968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4968);
		  /* 821B4968h */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 821B4968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 821B4968h case    0:*/		return 0x821B496C;
		  /* 821B496Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B496Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B496Ch case    1:*/		return 0x821B4970;
		  /* 821B4970h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821B4970h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B4998;  }
		/* 821B4970h case    2:*/		return 0x821B4974;
		  /* 821B4974h */ case    3:  		/* lwz R11, <#[R18]> */
		/* 821B4974h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821B4974h case    3:*/		return 0x821B4978;
		  /* 821B4978h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4978h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4978h case    4:*/		return 0x821B497C;
		  /* 821B497Ch */ case    5:  		/* addic. R11, R11, -4 */
		/* 821B497Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B497Ch case    5:*/		return 0x821B4980;
		  /* 821B4980h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821B4980h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B4998;  }
		/* 821B4980h case    6:*/		return 0x821B4984;
		  /* 821B4984h */ case    7:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B4984h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4984h case    7:*/		return 0x821B4988;
		  /* 821B4988h */ case    8:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B4988h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B4988h case    8:*/		return 0x821B498C;
		  /* 821B498Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 821B498Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B498Ch case    9:*/		return 0x821B4990;
		  /* 821B4990h */ case   10:  		/* cmplw CR6, R10, R9 */
		/* 821B4990h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B4990h case   10:*/		return 0x821B4994;
		  /* 821B4994h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 821B4994h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821B49A8;  }
		/* 821B4994h case   11:*/		return 0x821B4998;
	}
	return 0x821B4998;
} // Block from 821B4968h-821B4998h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B4998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4998);
		  /* 821B4998h */ case    0:  		/* li R4, 1 */
		/* 821B4998h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B4998h case    0:*/		return 0x821B499C;
		  /* 821B499Ch */ case    1:  		/* mr R3, R18 */
		/* 821B499Ch case    1:*/		regs.R3 = regs.R18;
		/* 821B499Ch case    1:*/		return 0x821B49A0;
		  /* 821B49A0h */ case    2:  		/* bl -162008 */
		/* 821B49A0h case    2:*/		regs.LR = 0x821B49A4; return 0x8218D0C8;
		/* 821B49A0h case    2:*/		return 0x821B49A4;
		  /* 821B49A4h */ case    3:  		/* mr R11, R3 */
		/* 821B49A4h case    3:*/		regs.R11 = regs.R3;
		/* 821B49A4h case    3:*/		return 0x821B49A8;
	}
	return 0x821B49A8;
} // Block from 821B4998h-821B49A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B49A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B49A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B49A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B49A8);
		  /* 821B49A8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B49A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B49A8h case    0:*/		return 0x821B49AC;
		  /* 821B49ACh */ case    1:  		/* mr R4, R17 */
		/* 821B49ACh case    1:*/		regs.R4 = regs.R17;
		/* 821B49ACh case    1:*/		return 0x821B49B0;
		  /* 821B49B0h */ case    2:  		/* mr R3, R14 */
		/* 821B49B0h case    2:*/		regs.R3 = regs.R14;
		/* 821B49B0h case    2:*/		return 0x821B49B4;
		  /* 821B49B4h */ case    3:  		/* addi R9, R10, 4 */
		/* 821B49B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B49B4h case    3:*/		return 0x821B49B8;
		  /* 821B49B8h */ case    4:  		/* addi R8, R10, 1 */
		/* 821B49B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B49B8h case    4:*/		return 0x821B49BC;
		  /* 821B49BCh */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B49BCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B49BCh case    5:*/		return 0x821B49C0;
		  /* 821B49C0h */ case    6:  		/* stw R8, <#[R11 + 8]> */
		/* 821B49C0h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B49C0h case    6:*/		return 0x821B49C4;
		  /* 821B49C4h */ case    7:  		/* stwx R31, <#[R10 + R11]> */
		/* 821B49C4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B49C4h case    7:*/		return 0x821B49C8;
		  /* 821B49C8h */ case    8:  		/* bl 455936 */
		/* 821B49C8h case    8:*/		regs.LR = 0x821B49CC; return 0x82223EC8;
		/* 821B49C8h case    8:*/		return 0x821B49CC;
	}
	return 0x821B49CC;
} // Block from 821B49A8h-821B49CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B49CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B49CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B49CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B49CC);
		  /* 821B49CCh */ case    0:  		/* addi R22, R22, 1 */
		/* 821B49CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821B49CCh case    0:*/		return 0x821B49D0;
		  /* 821B49D0h */ case    1:  		/* addi R21, R21, 4 */
		/* 821B49D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 821B49D0h case    1:*/		return 0x821B49D4;
		  /* 821B49D4h */ case    2:  		/* b -1256 */
		/* 821B49D4h case    2:*/		return 0x821B44EC;
		/* 821B49D4h case    2:*/		return 0x821B49D8;
	}
	return 0x821B49D8;
} // Block from 821B49CCh-821B49D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B49D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B49D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B49D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B49D8);
		  /* 821B49D8h */ case    0:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 821B49D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 821B49D8h case    0:*/		return 0x821B49DC;
		  /* 821B49DCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B49DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B49DCh case    1:*/		return 0x821B49E0;
		  /* 821B49E0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B49E0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B49E0h case    2:*/		return 0x821B49E4;
		  /* 821B49E4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821B49E4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B49F4;  }
		/* 821B49E4h case    3:*/		return 0x821B49E8;
		  /* 821B49E8h */ case    4:  		/* mr R19, R11 */
		/* 821B49E8h case    4:*/		regs.R19 = regs.R11;
		/* 821B49E8h case    4:*/		return 0x821B49EC;
		  /* 821B49ECh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821B49ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B49ECh case    5:*/		return 0x821B49F0;
		  /* 821B49F0h */ case    6:  		/* bc 4, CR6_EQ, -1440 */
		/* 821B49F0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821B4450;  }
		/* 821B49F0h case    6:*/		return 0x821B49F4;
	}
	return 0x821B49F4;
} // Block from 821B49D8h-821B49F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B49F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B49F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B49F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B49F4);
		  /* 821B49F4h */ case    0:  		/* stw R18, <#[R1 + 100]> */
		/* 821B49F4h case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000064) );
		/* 821B49F4h case    0:*/		return 0x821B49F8;
	}
	return 0x821B49F8;
} // Block from 821B49F4h-821B49F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B49F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B49F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B49F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B49F8);
		  /* 821B49F8h */ case    0:  		/* stw R16, <#[R14 + 664]> */
		/* 821B49F8h case    0:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R14 + 0x00000298) );
		/* 821B49F8h case    0:*/		return 0x821B49FC;
		  /* 821B49FCh */ case    1:  		/* addi R11, R17, 24 */
		/* 821B49FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x18);
		/* 821B49FCh case    1:*/		return 0x821B4A00;
		  /* 821B4A00h */ case    2:  		/* lwz R31, <#[R17 + 28]> */
		/* 821B4A00h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x0000001C) );
		/* 821B4A00h case    2:*/		return 0x821B4A04;
		  /* 821B4A04h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B4A04h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B4A04h case    3:*/		return 0x821B4A08;
		  /* 821B4A08h */ case    4:  		/* bc 4, CR0_EQ, 104 */
		/* 821B4A08h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B4A70;  }
		/* 821B4A08h case    4:*/		return 0x821B4A0C;
		  /* 821B4A0Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821B4A0Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821B4A0Ch case    5:*/		return 0x821B4A10;
		  /* 821B4A10h */ case    6:  		/* bc 12, CR0_EQ, 96 */
		/* 821B4A10h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B4A70;  }
		/* 821B4A10h case    6:*/		return 0x821B4A14;
		  /* 821B4A14h */ case    7:  		/* mr R3, R31 */
		/* 821B4A14h case    7:*/		regs.R3 = regs.R31;
		/* 821B4A14h case    7:*/		return 0x821B4A18;
		  /* 821B4A18h */ case    8:  		/* bl -277608 */
		/* 821B4A18h case    8:*/		regs.LR = 0x821B4A1C; return 0x82170DB0;
		/* 821B4A18h case    8:*/		return 0x821B4A1C;
		  /* 821B4A1Ch */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4A1Ch case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4A1Ch case    9:*/		return 0x821B4A20;
		  /* 821B4A20h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821B4A20h case   10:*/		if ( regs.CR[0].eq ) { return 0x821B4A58;  }
		/* 821B4A20h case   10:*/		return 0x821B4A24;
		  /* 821B4A24h */ case   11:  		/* mr R4, R31 */
		/* 821B4A24h case   11:*/		regs.R4 = regs.R31;
		/* 821B4A24h case   11:*/		return 0x821B4A28;
		  /* 821B4A28h */ case   12:  		/* mr R3, R14 */
		/* 821B4A28h case   12:*/		regs.R3 = regs.R14;
		/* 821B4A28h case   12:*/		return 0x821B4A2C;
		  /* 821B4A2Ch */ case   13:  		/* bl -98540 */
		/* 821B4A2Ch case   13:*/		regs.LR = 0x821B4A30; return 0x8219C940;
		/* 821B4A2Ch case   13:*/		return 0x821B4A30;
		  /* 821B4A30h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4A30h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4A30h case   14:*/		return 0x821B4A34;
		  /* 821B4A34h */ case   15:  		/* bc 4, CR0_EQ, 36 */
		/* 821B4A34h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B4A58;  }
		/* 821B4A34h case   15:*/		return 0x821B4A38;
		  /* 821B4A38h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4A38h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4A38h case   16:*/		return 0x821B4A3C;
		  /* 821B4A3Ch */ case   17:  		/* lis R10, 1 */
		/* 821B4A3Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 821B4A3Ch case   17:*/		return 0x821B4A40;
		  /* 821B4A40h */ case   18:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821B4A40h case   18:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821B4A40h case   18:*/		return 0x821B4A44;
		  /* 821B4A44h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 821B4A44h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B4A44h case   19:*/		return 0x821B4A48;
		  /* 821B4A48h */ case   20:  		/* bc 4, CR6_LT, 16 */
		/* 821B4A48h case   20:*/		if ( !regs.CR[6].lt ) { return 0x821B4A58;  }
		/* 821B4A48h case   20:*/		return 0x821B4A4C;
		  /* 821B4A4Ch */ case   21:  		/* mr R4, R31 */
		/* 821B4A4Ch case   21:*/		regs.R4 = regs.R31;
		/* 821B4A4Ch case   21:*/		return 0x821B4A50;
		  /* 821B4A50h */ case   22:  		/* mr R3, R14 */
		/* 821B4A50h case   22:*/		regs.R3 = regs.R14;
		/* 821B4A50h case   22:*/		return 0x821B4A54;
		  /* 821B4A54h */ case   23:  		/* bl -81820 */
		/* 821B4A54h case   23:*/		regs.LR = 0x821B4A58; return 0x821A0AB8;
		/* 821B4A54h case   23:*/		return 0x821B4A58;
	}
	return 0x821B4A58;
} // Block from 821B49F8h-821B4A58h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B4A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4A58);
		  /* 821B4A58h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821B4A58h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821B4A58h case    0:*/		return 0x821B4A5C;
		  /* 821B4A5Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821B4A5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821B4A5Ch case    1:*/		return 0x821B4A60;
		  /* 821B4A60h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B4A60h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B4A60h case    2:*/		return 0x821B4A64;
		  /* 821B4A64h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821B4A64h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4A70;  }
		/* 821B4A64h case    3:*/		return 0x821B4A68;
		  /* 821B4A68h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B4A68h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B4A68h case    4:*/		return 0x821B4A6C;
		  /* 821B4A6Ch */ case    5:  		/* bc 4, CR6_EQ, -88 */
		/* 821B4A6Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B4A14;  }
		/* 821B4A6Ch case    5:*/		return 0x821B4A70;
	}
	return 0x821B4A70;
} // Block from 821B4A58h-821B4A70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B4A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4A70);
		  /* 821B4A70h */ case    0:  		/* li R5, 38 */
		/* 821B4A70h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821B4A70h case    0:*/		return 0x821B4A74;
		  /* 821B4A74h */ case    1:  		/* li R4, 8 */
		/* 821B4A74h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821B4A74h case    1:*/		return 0x821B4A78;
		  /* 821B4A78h */ case    2:  		/* mr R3, R14 */
		/* 821B4A78h case    2:*/		regs.R3 = regs.R14;
		/* 821B4A78h case    2:*/		return 0x821B4A7C;
		  /* 821B4A7Ch */ case    3:  		/* bl -328076 */
		/* 821B4A7Ch case    3:*/		regs.LR = 0x821B4A80; return 0x821648F0;
		/* 821B4A7Ch case    3:*/		return 0x821B4A80;
		  /* 821B4A80h */ case    4:  		/* addi R25, R3, 4 */
		/* 821B4A80h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821B4A80h case    4:*/		return 0x821B4A84;
		  /* 821B4A84h */ case    5:  		/* ori R11, R3, 1 */
		/* 821B4A84h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821B4A84h case    5:*/		return 0x821B4A88;
		  /* 821B4A88h */ case    6:  		/* ori R10, R25, 1 */
		/* 821B4A88h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 821B4A88h case    6:*/		return 0x821B4A8C;
		  /* 821B4A8Ch */ case    7:  		/* mr R26, R3 */
		/* 821B4A8Ch case    7:*/		regs.R26 = regs.R3;
		/* 821B4A8Ch case    7:*/		return 0x821B4A90;
		  /* 821B4A90h */ case    8:  		/* stw R11, <#[R3 + 4]> */
		/* 821B4A90h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4A90h case    8:*/		return 0x821B4A94;
		  /* 821B4A94h */ case    9:  		/* stw R10, <#[R3]> */
		/* 821B4A94h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4A94h case    9:*/		return 0x821B4A98;
		  /* 821B4A98h */ case   10:  		/* lwz R11, <#[R14 + 652]> */
		/* 821B4A98h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4A98h case   10:*/		return 0x821B4A9C;
		  /* 821B4A9Ch */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4A9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4A9Ch case   11:*/		return 0x821B4AA0;
		  /* 821B4AA0h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4AA0h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4AA0h case   12:*/		return 0x821B4AA4;
		  /* 821B4AA4h */ case   13:  		/* bc 4, CR0_EQ, 692 */
		/* 821B4AA4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821B4D58;  }
		/* 821B4AA4h case   13:*/		return 0x821B4AA8;
		  /* 821B4AA8h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821B4AA8h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4AA8h case   14:*/		return 0x821B4AAC;
		  /* 821B4AACh */ case   15:  		/* bc 12, CR0_EQ, 684 */
		/* 821B4AACh case   15:*/		if ( regs.CR[0].eq ) { return 0x821B4D58;  }
		/* 821B4AACh case   15:*/		return 0x821B4AB0;
		  /* 821B4AB0h */ case   16:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B4AB0h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4AB0h case   16:*/		return 0x821B4AB4;
		  /* 821B4AB4h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B4AB4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4AB4h case   17:*/		return 0x821B4AB8;
		  /* 821B4AB8h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4AB8h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4AB8h case   18:*/		return 0x821B4ABC;
		  /* 821B4ABCh */ case   19:  		/* bc 4, CR0_EQ, 288 */
		/* 821B4ABCh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821B4BDC;  }
		/* 821B4ABCh case   19:*/		return 0x821B4AC0;
		  /* 821B4AC0h */ case   20:  		/* cmplwi CR0, R11, 0 */
		/* 821B4AC0h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4AC0h case   20:*/		return 0x821B4AC4;
		  /* 821B4AC4h */ case   21:  		/* bc 12, CR0_EQ, 280 */
		/* 821B4AC4h case   21:*/		if ( regs.CR[0].eq ) { return 0x821B4BDC;  }
		/* 821B4AC4h case   21:*/		return 0x821B4AC8;
		  /* 821B4AC8h */ case   22:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B4AC8h case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B4AC8h case   22:*/		return 0x821B4ACC;
		  /* 821B4ACCh */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B4ACCh case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4ACCh case   23:*/		return 0x821B4AD0;
		  /* 821B4AD0h */ case   24:  		/* bc 12, CR0_EQ, 12 */
		/* 821B4AD0h case   24:*/		if ( regs.CR[0].eq ) { return 0x821B4ADC;  }
		/* 821B4AD0h case   24:*/		return 0x821B4AD4;
		  /* 821B4AD4h */ case   25:  		/* mr R4, R15 */
		/* 821B4AD4h case   25:*/		regs.R4 = regs.R15;
		/* 821B4AD4h case   25:*/		return 0x821B4AD8;
		  /* 821B4AD8h */ case   26:  		/* b 16 */
		/* 821B4AD8h case   26:*/		return 0x821B4AE8;
		/* 821B4AD8h case   26:*/		return 0x821B4ADC;
	}
	return 0x821B4ADC;
} // Block from 821B4A70h-821B4ADCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B4ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4ADC);
		  /* 821B4ADCh */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B4ADCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4ADCh case    0:*/		return 0x821B4AE0;
		  /* 821B4AE0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4AE0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4AE0h case    1:*/		return 0x821B4AE4;
		  /* 821B4AE4h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B4AE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B4AE4h case    2:*/		return 0x821B4AE8;
	}
	return 0x821B4AE8;
} // Block from 821B4ADCh-821B4AE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B4AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4AE8);
		  /* 821B4AE8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B4AE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4AE8h case    0:*/		return 0x821B4AEC;
		  /* 821B4AECh */ case    1:  		/* addi R10, R11, 3 */
		/* 821B4AECh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B4AECh case    1:*/		return 0x821B4AF0;
		  /* 821B4AF0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B4AF0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B4AF0h case    2:*/		return 0x821B4AF4;
		  /* 821B4AF4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B4AF4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B4AF4h case    3:*/		return 0x821B4AF8;
		  /* 821B4AF8h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B4AF8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B4AF8h case    4:*/		return 0x821B4AFC;
		  /* 821B4AFCh */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B4AFCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4AFCh case    5:*/		return 0x821B4B00;
		  /* 821B4B00h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B4B00h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B4B38;  }
		/* 821B4B00h case    6:*/		return 0x821B4B04;
		  /* 821B4B04h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B4B04h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B4B04h case    7:*/		return 0x821B4B08;
		  /* 821B4B08h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B4B08h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4B08h case    8:*/		return 0x821B4B0C;
		  /* 821B4B0Ch */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B4B0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4B0Ch case    9:*/		return 0x821B4B10;
		  /* 821B4B10h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4B10h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4B10h case   10:*/		return 0x821B4B14;
		  /* 821B4B14h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B4B14h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4B14h case   11:*/		return 0x821B4B18;
		  /* 821B4B18h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B4B18h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4B18h case   12:*/		return 0x821B4B1C;
		  /* 821B4B1Ch */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4B1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4B1Ch case   13:*/		return 0x821B4B20;
		  /* 821B4B20h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4B20h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4B20h case   14:*/		return 0x821B4B24;
		  /* 821B4B24h */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B4B24h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4B24h case   15:*/		return 0x821B4B28;
		  /* 821B4B28h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B4B28h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B4B28h case   16:*/		return 0x821B4B2C;
		  /* 821B4B2Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 821B4B2Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B4B2Ch case   17:*/		return 0x821B4B30;
		  /* 821B4B30h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B4B30h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B4B30h case   18:*/		return 0x821B4B34;
		  /* 821B4B34h */ case   19:  		/* bl -404780 */
		/* 821B4B34h case   19:*/		regs.LR = 0x821B4B38; return 0x82151E08;
		/* 821B4B34h case   19:*/		return 0x821B4B38;
	}
	return 0x821B4B38;
} // Block from 821B4AE8h-821B4B38h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B4B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4B38);
		  /* 821B4B38h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4B38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4B38h case    0:*/		return 0x821B4B3C;
		  /* 821B4B3Ch */ case    1:  		/* li R6, 0 */
		/* 821B4B3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B4B3Ch case    1:*/		return 0x821B4B40;
		  /* 821B4B40h */ case    2:  		/* mr R5, R31 */
		/* 821B4B40h case    2:*/		regs.R5 = regs.R31;
		/* 821B4B40h case    2:*/		return 0x821B4B44;
		  /* 821B4B44h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B4B44h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B4B44h case    3:*/		return 0x821B4B48;
		  /* 821B4B48h */ case    4:  		/* mr R4, R17 */
		/* 821B4B48h case    4:*/		regs.R4 = regs.R17;
		/* 821B4B48h case    4:*/		return 0x821B4B4C;
		  /* 821B4B4Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821B4B4Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4B4Ch case    5:*/		return 0x821B4B50;
		  /* 821B4B50h */ case    6:  		/* mr R3, R14 */
		/* 821B4B50h case    6:*/		regs.R3 = regs.R14;
		/* 821B4B50h case    6:*/		return 0x821B4B54;
		  /* 821B4B54h */ case    7:  		/* bl -19852 */
		/* 821B4B54h case    7:*/		regs.LR = 0x821B4B58; return 0x821AFDC8;
		/* 821B4B54h case    7:*/		return 0x821B4B58;
		  /* 821B4B58h */ case    8:  		/* or. R31, R3, R3 */
		/* 821B4B58h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821B4B58h case    8:*/		return 0x821B4B5C;
		  /* 821B4B5Ch */ case    9:  		/* bc 12, CR0_EQ, -172 */
		/* 821B4B5Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821B4AB0;  }
		/* 821B4B5Ch case    9:*/		return 0x821B4B60;
		  /* 821B4B60h */ case   10:  		/* mr R4, R31 */
		/* 821B4B60h case   10:*/		regs.R4 = regs.R31;
		/* 821B4B60h case   10:*/		return 0x821B4B64;
		  /* 821B4B64h */ case   11:  		/* mr R3, R14 */
		/* 821B4B64h case   11:*/		regs.R3 = regs.R14;
		/* 821B4B64h case   11:*/		return 0x821B4B68;
		  /* 821B4B68h */ case   12:  		/* bl -98856 */
		/* 821B4B68h case   12:*/		regs.LR = 0x821B4B6C; return 0x8219C940;
		/* 821B4B68h case   12:*/		return 0x821B4B6C;
		  /* 821B4B6Ch */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4B6Ch case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4B6Ch case   13:*/		return 0x821B4B70;
		  /* 821B4B70h */ case   14:  		/* bc 4, CR0_EQ, -192 */
		/* 821B4B70h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821B4AB0;  }
		/* 821B4B70h case   14:*/		return 0x821B4B74;
		  /* 821B4B74h */ case   15:  		/* mr R3, R31 */
		/* 821B4B74h case   15:*/		regs.R3 = regs.R31;
		/* 821B4B74h case   15:*/		return 0x821B4B78;
		  /* 821B4B78h */ case   16:  		/* bl -277960 */
		/* 821B4B78h case   16:*/		regs.LR = 0x821B4B7C; return 0x82170DB0;
		/* 821B4B78h case   16:*/		return 0x821B4B7C;
		  /* 821B4B7Ch */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4B7Ch case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4B7Ch case   17:*/		return 0x821B4B80;
		  /* 821B4B80h */ case   18:  		/* bc 12, CR0_EQ, -208 */
		/* 821B4B80h case   18:*/		if ( regs.CR[0].eq ) { return 0x821B4AB0;  }
		/* 821B4B80h case   18:*/		return 0x821B4B84;
		  /* 821B4B84h */ case   19:  		/* lwz R11, <#[R25]> */
		/* 821B4B84h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B4B84h case   19:*/		return 0x821B4B88;
		  /* 821B4B88h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B4B88h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4B88h case   20:*/		return 0x821B4B8C;
		  /* 821B4B8Ch */ case   21:  		/* bc 4, CR0_EQ, 40 */
		/* 821B4B8Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x821B4BB4;  }
		/* 821B4B8Ch case   21:*/		return 0x821B4B90;
		  /* 821B4B90h */ case   22:  		/* lwz R11, <#[R26]> */
		/* 821B4B90h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B4B90h case   22:*/		return 0x821B4B94;
		  /* 821B4B94h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4B94h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4B94h case   23:*/		return 0x821B4B98;
		  /* 821B4B98h */ case   24:  		/* addic. R3, R11, -4 */
		/* 821B4B98h case   24:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821B4B98h case   24:*/		return 0x821B4B9C;
		  /* 821B4B9Ch */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 821B4B9Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x821B4BB4;  }
		/* 821B4B9Ch case   25:*/		return 0x821B4BA0;
		  /* 821B4BA0h */ case   26:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B4BA0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B4BA0h case   26:*/		return 0x821B4BA4;
		  /* 821B4BA4h */ case   27:  		/* lwz R10, <#[R3 + 12]> */
		/* 821B4BA4h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821B4BA4h case   27:*/		return 0x821B4BA8;
		  /* 821B4BA8h */ case   28:  		/* addi R11, R11, 1 */
		/* 821B4BA8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B4BA8h case   28:*/		return 0x821B4BAC;
		  /* 821B4BACh */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 821B4BACh case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821B4BACh case   29:*/		return 0x821B4BB0;
		  /* 821B4BB0h */ case   30:  		/* bc 4, CR6_GT, 16 */
		/* 821B4BB0h case   30:*/		if ( !regs.CR[6].gt ) { return 0x821B4BC0;  }
		/* 821B4BB0h case   30:*/		return 0x821B4BB4;
	}
	return 0x821B4BB4;
} // Block from 821B4B38h-821B4BB4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821B4BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4BB4);
		  /* 821B4BB4h */ case    0:  		/* li R4, 1 */
		/* 821B4BB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B4BB4h case    0:*/		return 0x821B4BB8;
		  /* 821B4BB8h */ case    1:  		/* mr R3, R26 */
		/* 821B4BB8h case    1:*/		regs.R3 = regs.R26;
		/* 821B4BB8h case    1:*/		return 0x821B4BBC;
		  /* 821B4BBCh */ case    2:  		/* bl -162548 */
		/* 821B4BBCh case    2:*/		regs.LR = 0x821B4BC0; return 0x8218D0C8;
		/* 821B4BBCh case    2:*/		return 0x821B4BC0;
	}
	return 0x821B4BC0;
} // Block from 821B4BB4h-821B4BC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B4BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4BC0);
		  /* 821B4BC0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821B4BC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821B4BC0h case    0:*/		return 0x821B4BC4;
		  /* 821B4BC4h */ case    1:  		/* addi R10, R11, 4 */
		/* 821B4BC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821B4BC4h case    1:*/		return 0x821B4BC8;
		  /* 821B4BC8h */ case    2:  		/* addi R9, R11, 1 */
		/* 821B4BC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821B4BC8h case    2:*/		return 0x821B4BCC;
		  /* 821B4BCCh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821B4BCCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821B4BCCh case    3:*/		return 0x821B4BD0;
		  /* 821B4BD0h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821B4BD0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821B4BD0h case    4:*/		return 0x821B4BD4;
		  /* 821B4BD4h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821B4BD4h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821B4BD4h case    5:*/		return 0x821B4BD8;
		  /* 821B4BD8h */ case    6:  		/* b -296 */
		/* 821B4BD8h case    6:*/		return 0x821B4AB0;
		/* 821B4BD8h case    6:*/		return 0x821B4BDC;
	}
	return 0x821B4BDC;
} // Block from 821B4BC0h-821B4BDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B4BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4BDC);
		  /* 821B4BDCh */ case    0:  		/* lwz R10, <#[R25]> */
		/* 821B4BDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821B4BDCh case    0:*/		return 0x821B4BE0;
		  /* 821B4BE0h */ case    1:  		/* mr R11, R15 */
		/* 821B4BE0h case    1:*/		regs.R11 = regs.R15;
		/* 821B4BE0h case    1:*/		return 0x821B4BE4;
		  /* 821B4BE4h */ case    2:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821B4BE4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B4BE4h case    2:*/		return 0x821B4BE8;
		  /* 821B4BE8h */ case    3:  		/* bc 4, CR0_EQ, 368 */
		/* 821B4BE8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4D58;  }
		/* 821B4BE8h case    3:*/		return 0x821B4BEC;
		  /* 821B4BECh */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 821B4BECh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821B4BECh case    4:*/		return 0x821B4BF0;
		  /* 821B4BF0h */ case    5:  		/* bc 12, CR0_EQ, 360 */
		/* 821B4BF0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B4D58;  }
		/* 821B4BF0h case    5:*/		return 0x821B4BF4;
		  /* 821B4BF4h */ case    6:  		/* rlwinm R9, R10, 0, 0, 30 */
		/* 821B4BF4h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R10);
		/* 821B4BF4h case    6:*/		return 0x821B4BF8;
		  /* 821B4BF8h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821B4BF8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821B4BF8h case    7:*/		return 0x821B4BFC;
		  /* 821B4BFCh */ case    8:  		/* add R11, R10, R11 */
		/* 821B4BFCh case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B4BFCh case    8:*/		return 0x821B4C00;
		  /* 821B4C00h */ case    9:  		/* lwz R10, <#[R9 + 4]> */
		/* 821B4C00h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821B4C00h case    9:*/		return 0x821B4C04;
		  /* 821B4C04h */ case   10:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821B4C04h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B4C04h case   10:*/		return 0x821B4C08;
		  /* 821B4C08h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821B4C08h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B4C14;  }
		/* 821B4C08h case   11:*/		return 0x821B4C0C;
		  /* 821B4C0Ch */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 821B4C0Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B4C0Ch case   12:*/		return 0x821B4C10;
		  /* 821B4C10h */ case   13:  		/* bc 4, CR6_EQ, -28 */
		/* 821B4C10h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B4BF4;  }
		/* 821B4C10h case   13:*/		return 0x821B4C14;
	}
	return 0x821B4C14;
} // Block from 821B4BDCh-821B4C14h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B4C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4C14);
		  /* 821B4C14h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821B4C14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B4C14h case    0:*/		return 0x821B4C18;
		  /* 821B4C18h */ case    1:  		/* bc 12, CR6_EQ, 320 */
		/* 821B4C18h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B4D58;  }
		/* 821B4C18h case    1:*/		return 0x821B4C1C;
		  /* 821B4C1Ch */ case    2:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 821B4C1Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 821B4C1Ch case    2:*/		return 0x821B4C20;
		  /* 821B4C20h */ case    3:  		/* li R5, 0 */
		/* 821B4C20h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B4C20h case    3:*/		return 0x821B4C24;
		  /* 821B4C24h */ case    4:  		/* mr R4, R27 */
		/* 821B4C24h case    4:*/		regs.R4 = regs.R27;
		/* 821B4C24h case    4:*/		return 0x821B4C28;
		  /* 821B4C28h */ case    5:  		/* mr R3, R14 */
		/* 821B4C28h case    5:*/		regs.R3 = regs.R14;
		/* 821B4C28h case    5:*/		return 0x821B4C2C;
		  /* 821B4C2Ch */ case    6:  		/* bl -326644 */
		/* 821B4C2Ch case    6:*/		regs.LR = 0x821B4C30; return 0x82165038;
		/* 821B4C2Ch case    6:*/		return 0x821B4C30;
		  /* 821B4C30h */ case    7:  		/* mr R28, R3 */
		/* 821B4C30h case    7:*/		regs.R28 = regs.R3;
		/* 821B4C30h case    7:*/		return 0x821B4C34;
		  /* 821B4C34h */ case    8:  		/* mr R30, R15 */
		/* 821B4C34h case    8:*/		regs.R30 = regs.R15;
		/* 821B4C34h case    8:*/		return 0x821B4C38;
		  /* 821B4C38h */ case    9:  		/* addi R29, R3, -4 */
		/* 821B4C38h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0xFFFFFFFC);
		/* 821B4C38h case    9:*/		return 0x821B4C3C;
		  /* 821B4C3Ch */ case   10:  		/* lwz R11, <#[R25]> */
		/* 821B4C3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821B4C3Ch case   10:*/		return 0x821B4C40;
		  /* 821B4C40h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4C40h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4C40h case   11:*/		return 0x821B4C44;
		  /* 821B4C44h */ case   12:  		/* bc 4, CR0_EQ, 144 */
		/* 821B4C44h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B4CD4;  }
		/* 821B4C44h case   12:*/		return 0x821B4C48;
		  /* 821B4C48h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821B4C48h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4C48h case   13:*/		return 0x821B4C4C;
		  /* 821B4C4Ch */ case   14:  		/* bc 12, CR0_EQ, 136 */
		/* 821B4C4Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821B4CD4;  }
		/* 821B4C4Ch case   14:*/		return 0x821B4C50;
		  /* 821B4C50h */ case   15:  		/* lwz R11, <#[R26]> */
		/* 821B4C50h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B4C50h case   15:*/		return 0x821B4C54;
		  /* 821B4C54h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4C54h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4C54h case   16:*/		return 0x821B4C58;
		  /* 821B4C58h */ case   17:  		/* addi R4, R11, -4 */
		/* 821B4C58h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B4C58h case   17:*/		return 0x821B4C5C;
		  /* 821B4C5Ch */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4C5Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4C5Ch case   18:*/		return 0x821B4C60;
		  /* 821B4C60h */ case   19:  		/* addi R10, R11, 3 */
		/* 821B4C60h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B4C60h case   19:*/		return 0x821B4C64;
		  /* 821B4C64h */ case   20:  		/* addic. R11, R11, -1 */
		/* 821B4C64h case   20:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B4C64h case   20:*/		return 0x821B4C68;
		  /* 821B4C68h */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B4C68h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B4C68h case   21:*/		return 0x821B4C6C;
		  /* 821B4C6Ch */ case   22:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B4C6Ch case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B4C6Ch case   22:*/		return 0x821B4C70;
		  /* 821B4C70h */ case   23:  		/* stw R11, <#[R4 + 8]> */
		/* 821B4C70h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4C70h case   23:*/		return 0x821B4C74;
		  /* 821B4C74h */ case   24:  		/* bc 4, CR0_EQ, 60 */
		/* 821B4C74h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B4CB0;  }
		/* 821B4C74h case   24:*/		return 0x821B4C78;
		  /* 821B4C78h */ case   25:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B4C78h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B4C78h case   25:*/		return 0x821B4C7C;
		  /* 821B4C7Ch */ case   26:  		/* mr R3, R26 */
		/* 821B4C7Ch case   26:*/		regs.R3 = regs.R26;
		/* 821B4C7Ch case   26:*/		return 0x821B4C80;
		  /* 821B4C80h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B4C80h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4C80h case   27:*/		return 0x821B4C84;
		  /* 821B4C84h */ case   28:  		/* lwz R9, <#[R11]> */
		/* 821B4C84h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4C84h case   28:*/		return 0x821B4C88;
		  /* 821B4C88h */ case   29:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4C88h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4C88h case   29:*/		return 0x821B4C8C;
		  /* 821B4C8Ch */ case   30:  		/* stw R9, <#[R10]> */
		/* 821B4C8Ch case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4C8Ch case   30:*/		return 0x821B4C90;
		  /* 821B4C90h */ case   31:  		/* lwz R10, <#[R11]> */
		/* 821B4C90h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4C90h case   31:*/		return 0x821B4C94;
		  /* 821B4C94h */ case   32:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4C94h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4C94h case   32:*/		return 0x821B4C98;
		  /* 821B4C98h */ case   33:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4C98h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4C98h case   33:*/		return 0x821B4C9C;
		  /* 821B4C9Ch */ case   34:  		/* stw R11, <#[R10]> */
		/* 821B4C9Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4C9Ch case   34:*/		return 0x821B4CA0;
		  /* 821B4CA0h */ case   35:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B4CA0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B4CA0h case   35:*/		return 0x821B4CA4;
		  /* 821B4CA4h */ case   36:  		/* addi R11, R11, 4 */
		/* 821B4CA4h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B4CA4h case   36:*/		return 0x821B4CA8;
		  /* 821B4CA8h */ case   37:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B4CA8h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B4CA8h case   37:*/		return 0x821B4CAC;
		  /* 821B4CACh */ case   38:  		/* bl -405156 */
		/* 821B4CACh case   38:*/		regs.LR = 0x821B4CB0; return 0x82151E08;
		/* 821B4CACh case   38:*/		return 0x821B4CB0;
	}
	return 0x821B4CB0;
} // Block from 821B4C14h-821B4CB0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821B4CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4CB0);
		  /* 821B4CB0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4CB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4CB0h case    0:*/		return 0x821B4CB4;
		  /* 821B4CB4h */ case    1:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821B4CB4h case    1:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4CB4h case    1:*/		return 0x821B4CB8;
		  /* 821B4CB8h */ case    2:  		/* bc 4, CR0_EQ, -124 */
		/* 821B4CB8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B4C3C;  }
		/* 821B4CB8h case    2:*/		return 0x821B4CBC;
		  /* 821B4CBCh */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B4CBCh case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B4CBCh case    3:*/		return 0x821B4CC0;
		  /* 821B4CC0h */ case    4:  		/* cmplwi CR6, R11, 14720 */
		/* 821B4CC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B4CC0h case    4:*/		return 0x821B4CC4;
		  /* 821B4CC4h */ case    5:  		/* bc 12, CR6_EQ, -136 */
		/* 821B4CC4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B4C3C;  }
		/* 821B4CC4h case    5:*/		return 0x821B4CC8;
		  /* 821B4CC8h */ case    6:  		/* stwu R31, <#[R29 + 4]> */
		/* 821B4CC8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821B4CC8h case    6:*/		return 0x821B4CCC;
		  /* 821B4CCCh */ case    7:  		/* addi R30, R30, 1 */
		/* 821B4CCCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B4CCCh case    7:*/		return 0x821B4CD0;
		  /* 821B4CD0h */ case    8:  		/* b -148 */
		/* 821B4CD0h case    8:*/		return 0x821B4C3C;
		/* 821B4CD0h case    8:*/		return 0x821B4CD4;
	}
	return 0x821B4CD4;
} // Block from 821B4CB0h-821B4CD4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B4CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4CD4);
		  /* 821B4CD4h */ case    0:  		/* lis R11, -32230 */
		/* 821B4CD4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821A);
		/* 821B4CD4h case    0:*/		return 0x821B4CD8;
		  /* 821B4CD8h */ case    1:  		/* li R5, 4 */
		/* 821B4CD8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821B4CD8h case    1:*/		return 0x821B4CDC;
		  /* 821B4CDCh */ case    2:  		/* addi R6, R11, -18016 */
		/* 821B4CDCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB9A0);
		/* 821B4CDCh case    2:*/		return 0x821B4CE0;
		  /* 821B4CE0h */ case    3:  		/* mr R4, R30 */
		/* 821B4CE0h case    3:*/		regs.R4 = regs.R30;
		/* 821B4CE0h case    3:*/		return 0x821B4CE4;
		  /* 821B4CE4h */ case    4:  		/* mr R3, R28 */
		/* 821B4CE4h case    4:*/		regs.R3 = regs.R28;
		/* 821B4CE4h case    4:*/		return 0x821B4CE8;
		  /* 821B4CE8h */ case    5:  		/* bl -1191176 */
		/* 821B4CE8h case    5:*/		regs.LR = 0x821B4CEC; return 0x82091FE0;
		/* 821B4CE8h case    5:*/		return 0x821B4CEC;
		  /* 821B4CECh */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821B4CECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B4CECh case    6:*/		return 0x821B4CF0;
		  /* 821B4CF0h */ case    7:  		/* bc 12, CR6_EQ, 80 */
		/* 821B4CF0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B4D40;  }
		/* 821B4CF0h case    7:*/		return 0x821B4CF4;
		  /* 821B4CF4h */ case    8:  		/* mr R31, R28 */
		/* 821B4CF4h case    8:*/		regs.R31 = regs.R28;
		/* 821B4CF4h case    8:*/		return 0x821B4CF8;
		  /* 821B4CF8h */ case    9:  		/* lwz R4, <#[R31]> */
		/* 821B4CF8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821B4CF8h case    9:*/		return 0x821B4CFC;
		  /* 821B4CFCh */ case   10:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B4CFCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4CFCh case   10:*/		return 0x821B4D00;
		  /* 821B4D00h */ case   11:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821B4D00h case   11:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4D00h case   11:*/		return 0x821B4D04;
		  /* 821B4D04h */ case   12:  		/* bc 4, CR0_EQ, 48 */
		/* 821B4D04h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B4D34;  }
		/* 821B4D04h case   12:*/		return 0x821B4D08;
		  /* 821B4D08h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B4D08h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B4D08h case   13:*/		return 0x821B4D0C;
		  /* 821B4D0Ch */ case   14:  		/* cmplwi CR6, R11, 14720 */
		/* 821B4D0Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B4D0Ch case   14:*/		return 0x821B4D10;
		  /* 821B4D10h */ case   15:  		/* bc 12, CR6_EQ, 36 */
		/* 821B4D10h case   15:*/		if ( regs.CR[6].eq ) { return 0x821B4D34;  }
		/* 821B4D10h case   15:*/		return 0x821B4D14;
		  /* 821B4D14h */ case   16:  		/* mr R5, R17 */
		/* 821B4D14h case   16:*/		regs.R5 = regs.R17;
		/* 821B4D14h case   16:*/		return 0x821B4D18;
		  /* 821B4D18h */ case   17:  		/* mr R3, R14 */
		/* 821B4D18h case   17:*/		regs.R3 = regs.R14;
		/* 821B4D18h case   17:*/		return 0x821B4D1C;
		  /* 821B4D1Ch */ case   18:  		/* bl -17076 */
		/* 821B4D1Ch case   18:*/		regs.LR = 0x821B4D20; return 0x821B0A68;
		/* 821B4D1Ch case   18:*/		return 0x821B4D20;
		  /* 821B4D20h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4D20h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4D20h case   19:*/		return 0x821B4D24;
		  /* 821B4D24h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 821B4D24h case   20:*/		if ( regs.CR[0].eq ) { return 0x821B4D34;  }
		/* 821B4D24h case   20:*/		return 0x821B4D28;
		  /* 821B4D28h */ case   21:  		/* mr R4, R17 */
		/* 821B4D28h case   21:*/		regs.R4 = regs.R17;
		/* 821B4D28h case   21:*/		return 0x821B4D2C;
		  /* 821B4D2Ch */ case   22:  		/* mr R3, R14 */
		/* 821B4D2Ch case   22:*/		regs.R3 = regs.R14;
		/* 821B4D2Ch case   22:*/		return 0x821B4D30;
		  /* 821B4D30h */ case   23:  		/* bl 455064 */
		/* 821B4D30h case   23:*/		regs.LR = 0x821B4D34; return 0x82223EC8;
		/* 821B4D30h case   23:*/		return 0x821B4D34;
	}
	return 0x821B4D34;
} // Block from 821B4CD4h-821B4D34h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B4D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4D34);
		  /* 821B4D34h */ case    0:  		/* addic. R30, R30, -1 */
		/* 821B4D34h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821B4D34h case    0:*/		return 0x821B4D38;
		  /* 821B4D38h */ case    1:  		/* addi R31, R31, 4 */
		/* 821B4D38h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821B4D38h case    1:*/		return 0x821B4D3C;
		  /* 821B4D3Ch */ case    2:  		/* bc 4, CR0_EQ, -68 */
		/* 821B4D3Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B4CF8;  }
		/* 821B4D3Ch case    2:*/		return 0x821B4D40;
	}
	return 0x821B4D40;
} // Block from 821B4D34h-821B4D40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B4D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4D40);
		  /* 821B4D40h */ case    0:  		/* li R6, 0 */
		/* 821B4D40h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B4D40h case    0:*/		return 0x821B4D44;
		  /* 821B4D44h */ case    1:  		/* mr R5, R27 */
		/* 821B4D44h case    1:*/		regs.R5 = regs.R27;
		/* 821B4D44h case    1:*/		return 0x821B4D48;
		  /* 821B4D48h */ case    2:  		/* mr R4, R28 */
		/* 821B4D48h case    2:*/		regs.R4 = regs.R28;
		/* 821B4D48h case    2:*/		return 0x821B4D4C;
		  /* 821B4D4Ch */ case    3:  		/* mr R3, R14 */
		/* 821B4D4Ch case    3:*/		regs.R3 = regs.R14;
		/* 821B4D4Ch case    3:*/		return 0x821B4D50;
		  /* 821B4D50h */ case    4:  		/* bl -294656 */
		/* 821B4D50h case    4:*/		regs.LR = 0x821B4D54; return 0x8216CE50;
		/* 821B4D50h case    4:*/		return 0x821B4D54;
		  /* 821B4D54h */ case    5:  		/* b -700 */
		/* 821B4D54h case    5:*/		return 0x821B4A98;
		/* 821B4D54h case    5:*/		return 0x821B4D58;
	}
	return 0x821B4D58;
} // Block from 821B4D40h-821B4D58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B4D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4D58);
		  /* 821B4D58h */ case    0:  		/* li R6, 38 */
		/* 821B4D58h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x26);
		/* 821B4D58h case    0:*/		return 0x821B4D5C;
		  /* 821B4D5Ch */ case    1:  		/* li R5, 8 */
		/* 821B4D5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821B4D5Ch case    1:*/		return 0x821B4D60;
		  /* 821B4D60h */ case    2:  		/* mr R4, R26 */
		/* 821B4D60h case    2:*/		regs.R4 = regs.R26;
		/* 821B4D60h case    2:*/		return 0x821B4D64;
		  /* 821B4D64h */ case    3:  		/* mr R3, R14 */
		/* 821B4D64h case    3:*/		regs.R3 = regs.R14;
		/* 821B4D64h case    3:*/		return 0x821B4D68;
		  /* 821B4D68h */ case    4:  		/* bl -294680 */
		/* 821B4D68h case    4:*/		regs.LR = 0x821B4D6C; return 0x8216CE50;
		/* 821B4D68h case    4:*/		return 0x821B4D6C;
		  /* 821B4D6Ch */ case    5:  		/* lbz R11, <#[R1 + 81]> */
		/* 821B4D6Ch case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000051) );
		/* 821B4D6Ch case    5:*/		return 0x821B4D70;
		  /* 821B4D70h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821B4D70h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4D70h case    6:*/		return 0x821B4D74;
		  /* 821B4D74h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821B4D74h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B4D88;  }
		/* 821B4D74h case    7:*/		return 0x821B4D78;
		  /* 821B4D78h */ case    8:  		/* mr R4, R17 */
		/* 821B4D78h case    8:*/		regs.R4 = regs.R17;
		/* 821B4D78h case    8:*/		return 0x821B4D7C;
		  /* 821B4D7Ch */ case    9:  		/* mr R3, R14 */
		/* 821B4D7Ch case    9:*/		regs.R3 = regs.R14;
		/* 821B4D7Ch case    9:*/		return 0x821B4D80;
		  /* 821B4D80h */ case   10:  		/* bl -62392 */
		/* 821B4D80h case   10:*/		regs.LR = 0x821B4D84; return 0x821A59C8;
		/* 821B4D80h case   10:*/		return 0x821B4D84;
		  /* 821B4D84h */ case   11:  		/* stb R15, <#[R1 + 81]> */
		/* 821B4D84h case   11:*/		cpu::mem::store8( regs, regs.R15, (uint32)(regs.R1 + 0x00000051) );
		/* 821B4D84h case   11:*/		return 0x821B4D88;
	}
	return 0x821B4D88;
} // Block from 821B4D58h-821B4D88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821B4D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4D88);
		  /* 821B4D88h */ case    0:  		/* lbz R11, <#[R1 + 80]> */
		/* 821B4D88h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821B4D88h case    0:*/		return 0x821B4D8C;
		  /* 821B4D8Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821B4D8Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4D8Ch case    1:*/		return 0x821B4D90;
		  /* 821B4D90h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821B4D90h case    2:*/		if ( regs.CR[0].eq ) { return 0x821B4DA4;  }
		/* 821B4D90h case    2:*/		return 0x821B4D94;
		  /* 821B4D94h */ case    3:  		/* mr R4, R17 */
		/* 821B4D94h case    3:*/		regs.R4 = regs.R17;
		/* 821B4D94h case    3:*/		return 0x821B4D98;
		  /* 821B4D98h */ case    4:  		/* mr R3, R14 */
		/* 821B4D98h case    4:*/		regs.R3 = regs.R14;
		/* 821B4D98h case    4:*/		return 0x821B4D9C;
		  /* 821B4D9Ch */ case    5:  		/* bl -95564 */
		/* 821B4D9Ch case    5:*/		regs.LR = 0x821B4DA0; return 0x8219D850;
		/* 821B4D9Ch case    5:*/		return 0x821B4DA0;
		  /* 821B4DA0h */ case    6:  		/* stb R15, <#[R1 + 80]> */
		/* 821B4DA0h case    6:*/		cpu::mem::store8( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 821B4DA0h case    6:*/		return 0x821B4DA4;
	}
	return 0x821B4DA4;
} // Block from 821B4D88h-821B4DA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B4DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4DA4);
		  /* 821B4DA4h */ case    0:  		/* lwz R11, <#[R14 + 656]> */
		/* 821B4DA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000290) );
		/* 821B4DA4h case    0:*/		return 0x821B4DA8;
		  /* 821B4DA8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4DA8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4DA8h case    1:*/		return 0x821B4DAC;
		  /* 821B4DACh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4DACh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4DACh case    2:*/		return 0x821B4DB0;
		  /* 821B4DB0h */ case    3:  		/* bc 4, CR0_EQ, 588 */
		/* 821B4DB0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4FFC;  }
		/* 821B4DB0h case    3:*/		return 0x821B4DB4;
		  /* 821B4DB4h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B4DB4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4DB4h case    4:*/		return 0x821B4DB8;
		  /* 821B4DB8h */ case    5:  		/* bc 12, CR0_EQ, 580 */
		/* 821B4DB8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B4FFC;  }
		/* 821B4DB8h case    5:*/		return 0x821B4DBC;
		  /* 821B4DBCh */ case    6:  		/* lwz R11, <#[R14 + 40]> */
		/* 821B4DBCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B4DBCh case    6:*/		return 0x821B4DC0;
		  /* 821B4DC0h */ case    7:  		/* li R10, 6 */
		/* 821B4DC0h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 821B4DC0h case    7:*/		return 0x821B4DC4;
		  /* 821B4DC4h */ case    8:  		/* li R30, 10 */
		/* 821B4DC4h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0xA);
		/* 821B4DC4h case    8:*/		return 0x821B4DC8;
		  /* 821B4DC8h */ case    9:  		/* rlwinm R11, R11, 0, 7, 5 */
		/* 821B4DC8h case    9:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R11,regs.R11);
		/* 821B4DC8h case    9:*/		return 0x821B4DCC;
		  /* 821B4DCCh */ case   10:  		/* stw R10, <#[R14 + 664]> */
		/* 821B4DCCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R14 + 0x00000298) );
		/* 821B4DCCh case   10:*/		return 0x821B4DD0;
		  /* 821B4DD0h */ case   11:  		/* stw R11, <#[R14 + 40]> */
		/* 821B4DD0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821B4DD0h case   11:*/		return 0x821B4DD4;
		  /* 821B4DD4h */ case   12:  		/* addi R3, R1, 136 */
		/* 821B4DD4h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x88);
		/* 821B4DD4h case   12:*/		return 0x821B4DD8;
		  /* 821B4DD8h */ case   13:  		/* lwz R4, <#[R14 + 656]> */
		/* 821B4DD8h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000290) );
		/* 821B4DD8h case   13:*/		return 0x821B4DDC;
		  /* 821B4DDCh */ case   14:  		/* bl -85932 */
		/* 821B4DDCh case   14:*/		regs.LR = 0x821B4DE0; return 0x8219FE30;
		/* 821B4DDCh case   14:*/		return 0x821B4DE0;
		  /* 821B4DE0h */ case   15:  		/* b 136 */
		/* 821B4DE0h case   15:*/		return 0x821B4E68;
		/* 821B4DE0h case   15:*/		return 0x821B4DE4;
		  /* 821B4DE4h */ case   16:  		/* addi R3, R1, 136 */
		/* 821B4DE4h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x88);
		/* 821B4DE4h case   16:*/		return 0x821B4DE8;
		  /* 821B4DE8h */ case   17:  		/* bl -90000 */
		/* 821B4DE8h case   17:*/		regs.LR = 0x821B4DEC; return 0x8219EE58;
		/* 821B4DE8h case   17:*/		return 0x821B4DEC;
		  /* 821B4DECh */ case   18:  		/* lwz R10, <#[R3 + 4]> */
		/* 821B4DECh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4DECh case   18:*/		return 0x821B4DF0;
		  /* 821B4DF0h */ case   19:  		/* mr R11, R3 */
		/* 821B4DF0h case   19:*/		regs.R11 = regs.R3;
		/* 821B4DF0h case   19:*/		return 0x821B4DF4;
		  /* 821B4DF4h */ case   20:  		/* cmplw CR6, R30, R10 */
		/* 821B4DF4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821B4DF4h case   20:*/		return 0x821B4DF8;
		  /* 821B4DF8h */ case   21:  		/* bc 4, CR6_EQ, 112 */
		/* 821B4DF8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821B4E68;  }
		/* 821B4DF8h case   21:*/		return 0x821B4DFC;
		  /* 821B4DFCh */ case   22:  		/* lwz R10, <#[R3]> */
		/* 821B4DFCh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4DFCh case   22:*/		return 0x821B4E00;
		  /* 821B4E00h */ case   23:  		/* lwz R9, <#[R10 + 8]> */
		/* 821B4E00h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B4E00h case   23:*/		return 0x821B4E04;
		  /* 821B4E04h */ case   24:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821B4E04h case   24:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821B4E04h case   24:*/		return 0x821B4E08;
		  /* 821B4E08h */ case   25:  		/* stw R9, <#[R10 + 8]> */
		/* 821B4E08h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821B4E08h case   25:*/		return 0x821B4E0C;
		  /* 821B4E0Ch */ case   26:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B4E0Ch case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4E0Ch case   26:*/		return 0x821B4E10;
		  /* 821B4E10h */ case   27:  		/* lwz R31, <#[R11]> */
		/* 821B4E10h case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4E10h case   27:*/		return 0x821B4E14;
		  /* 821B4E14h */ case   28:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B4E14h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4E14h case   28:*/		return 0x821B4E18;
		  /* 821B4E18h */ case   29:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B4E18h case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4E18h case   29:*/		return 0x821B4E1C;
		  /* 821B4E1Ch */ case   30:  		/* bc 4, CR0_EQ, 40 */
		/* 821B4E1Ch case   30:*/		if ( !regs.CR[0].eq ) { return 0x821B4E44;  }
		/* 821B4E1Ch case   30:*/		return 0x821B4E20;
		  /* 821B4E20h */ case   31:  		/* lwz R11, <#[R3]> */
		/* 821B4E20h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4E20h case   31:*/		return 0x821B4E24;
		  /* 821B4E24h */ case   32:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4E24h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4E24h case   32:*/		return 0x821B4E28;
		  /* 821B4E28h */ case   33:  		/* addic. R11, R11, -4 */
		/* 821B4E28h case   33:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B4E28h case   33:*/		return 0x821B4E2C;
		  /* 821B4E2Ch */ case   34:  		/* bc 12, CR0_EQ, 24 */
		/* 821B4E2Ch case   34:*/		if ( regs.CR[0].eq ) { return 0x821B4E44;  }
		/* 821B4E2Ch case   34:*/		return 0x821B4E30;
		  /* 821B4E30h */ case   35:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B4E30h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4E30h case   35:*/		return 0x821B4E34;
		  /* 821B4E34h */ case   36:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B4E34h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B4E34h case   36:*/		return 0x821B4E38;
		  /* 821B4E38h */ case   37:  		/* addi R10, R10, 1 */
		/* 821B4E38h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B4E38h case   37:*/		return 0x821B4E3C;
		  /* 821B4E3Ch */ case   38:  		/* cmplw CR6, R10, R9 */
		/* 821B4E3Ch case   38:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B4E3Ch case   38:*/		return 0x821B4E40;
		  /* 821B4E40h */ case   39:  		/* bc 4, CR6_GT, 16 */
		/* 821B4E40h case   39:*/		if ( !regs.CR[6].gt ) { return 0x821B4E50;  }
		/* 821B4E40h case   39:*/		return 0x821B4E44;
	}
	return 0x821B4E44;
} // Block from 821B4DA4h-821B4E44h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821B4E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4E44);
		  /* 821B4E44h */ case    0:  		/* li R4, 1 */
		/* 821B4E44h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B4E44h case    0:*/		return 0x821B4E48;
		  /* 821B4E48h */ case    1:  		/* bl -163200 */
		/* 821B4E48h case    1:*/		regs.LR = 0x821B4E4C; return 0x8218D0C8;
		/* 821B4E48h case    1:*/		return 0x821B4E4C;
		  /* 821B4E4Ch */ case    2:  		/* mr R11, R3 */
		/* 821B4E4Ch case    2:*/		regs.R11 = regs.R3;
		/* 821B4E4Ch case    2:*/		return 0x821B4E50;
	}
	return 0x821B4E50;
} // Block from 821B4E44h-821B4E50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B4E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4E50);
		  /* 821B4E50h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B4E50h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4E50h case    0:*/		return 0x821B4E54;
		  /* 821B4E54h */ case    1:  		/* addi R9, R10, 4 */
		/* 821B4E54h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B4E54h case    1:*/		return 0x821B4E58;
		  /* 821B4E58h */ case    2:  		/* addi R8, R10, 1 */
		/* 821B4E58h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B4E58h case    2:*/		return 0x821B4E5C;
		  /* 821B4E5Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B4E5Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B4E5Ch case    3:*/		return 0x821B4E60;
		  /* 821B4E60h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821B4E60h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B4E60h case    4:*/		return 0x821B4E64;
		  /* 821B4E64h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821B4E64h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B4E64h case    5:*/		return 0x821B4E68;
	}
	return 0x821B4E68;
} // Block from 821B4E50h-821B4E68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B4E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4E68);
		  /* 821B4E68h */ case    0:  		/* addi R3, R1, 136 */
		/* 821B4E68h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x88);
		/* 821B4E68h case    0:*/		return 0x821B4E6C;
		  /* 821B4E6Ch */ case    1:  		/* bl 253220 */
		/* 821B4E6Ch case    1:*/		regs.LR = 0x821B4E70; return 0x821F2B90;
		/* 821B4E6Ch case    1:*/		return 0x821B4E70;
		  /* 821B4E70h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4E70h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4E70h case    2:*/		return 0x821B4E74;
		  /* 821B4E74h */ case    3:  		/* bc 12, CR0_EQ, -144 */
		/* 821B4E74h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B4DE4;  }
		/* 821B4E74h case    3:*/		return 0x821B4E78;
		  /* 821B4E78h */ case    4:  		/* addic. R30, R30, -1 */
		/* 821B4E78h case    4:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821B4E78h case    4:*/		return 0x821B4E7C;
		  /* 821B4E7Ch */ case    5:  		/* bc 4, CR0_LT, -168 */
		/* 821B4E7Ch case    5:*/		if ( !regs.CR[0].lt ) { return 0x821B4DD4;  }
		/* 821B4E7Ch case    5:*/		return 0x821B4E80;
		  /* 821B4E80h */ case    6:  		/* lwz R3, <#[R14 + 656]> */
		/* 821B4E80h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000290) );
		/* 821B4E80h case    6:*/		return 0x821B4E84;
		  /* 821B4E84h */ case    7:  		/* bl 248396 */
		/* 821B4E84h case    7:*/		regs.LR = 0x821B4E88; return 0x821F18D0;
		/* 821B4E84h case    7:*/		return 0x821B4E88;
		  /* 821B4E88h */ case    8:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B4E88h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4E88h case    8:*/		return 0x821B4E8C;
		  /* 821B4E8Ch */ case    9:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B4E8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B4E8Ch case    9:*/		return 0x821B4E90;
		  /* 821B4E90h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B4E90h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B4E90h case   10:*/		return 0x821B4E94;
		  /* 821B4E94h */ case   11:  		/* bc 4, CR0_EQ, 360 */
		/* 821B4E94h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821B4FFC;  }
		/* 821B4E94h case   11:*/		return 0x821B4E98;
		  /* 821B4E98h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821B4E98h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B4E98h case   12:*/		return 0x821B4E9C;
		  /* 821B4E9Ch */ case   13:  		/* bc 12, CR0_EQ, 352 */
		/* 821B4E9Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821B4FFC;  }
		/* 821B4E9Ch case   13:*/		return 0x821B4EA0;
		  /* 821B4EA0h */ case   14:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B4EA0h case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B4EA0h case   14:*/		return 0x821B4EA4;
		  /* 821B4EA4h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B4EA4h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B4EA4h case   15:*/		return 0x821B4EA8;
		  /* 821B4EA8h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 821B4EA8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B4EB4;  }
		/* 821B4EA8h case   16:*/		return 0x821B4EAC;
		  /* 821B4EACh */ case   17:  		/* mr R4, R15 */
		/* 821B4EACh case   17:*/		regs.R4 = regs.R15;
		/* 821B4EACh case   17:*/		return 0x821B4EB0;
		  /* 821B4EB0h */ case   18:  		/* b 16 */
		/* 821B4EB0h case   18:*/		return 0x821B4EC0;
		/* 821B4EB0h case   18:*/		return 0x821B4EB4;
	}
	return 0x821B4EB4;
} // Block from 821B4E68h-821B4EB4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821B4EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4EB4);
		  /* 821B4EB4h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B4EB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B4EB4h case    0:*/		return 0x821B4EB8;
		  /* 821B4EB8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B4EB8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B4EB8h case    1:*/		return 0x821B4EBC;
		  /* 821B4EBCh */ case    2:  		/* addi R4, R11, -4 */
		/* 821B4EBCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B4EBCh case    2:*/		return 0x821B4EC0;
	}
	return 0x821B4EC0;
} // Block from 821B4EB4h-821B4EC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B4EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4EC0);
		  /* 821B4EC0h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B4EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4EC0h case    0:*/		return 0x821B4EC4;
		  /* 821B4EC4h */ case    1:  		/* addi R10, R11, 3 */
		/* 821B4EC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B4EC4h case    1:*/		return 0x821B4EC8;
		  /* 821B4EC8h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B4EC8h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B4EC8h case    2:*/		return 0x821B4ECC;
		  /* 821B4ECCh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B4ECCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B4ECCh case    3:*/		return 0x821B4ED0;
		  /* 821B4ED0h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B4ED0h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B4ED0h case    4:*/		return 0x821B4ED4;
		  /* 821B4ED4h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B4ED4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B4ED4h case    5:*/		return 0x821B4ED8;
		  /* 821B4ED8h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B4ED8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B4F10;  }
		/* 821B4ED8h case    6:*/		return 0x821B4EDC;
		  /* 821B4EDCh */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B4EDCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B4EDCh case    7:*/		return 0x821B4EE0;
		  /* 821B4EE0h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B4EE0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4EE0h case    8:*/		return 0x821B4EE4;
		  /* 821B4EE4h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B4EE4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4EE4h case    9:*/		return 0x821B4EE8;
		  /* 821B4EE8h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4EE8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4EE8h case   10:*/		return 0x821B4EEC;
		  /* 821B4EECh */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B4EECh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4EECh case   11:*/		return 0x821B4EF0;
		  /* 821B4EF0h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B4EF0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B4EF0h case   12:*/		return 0x821B4EF4;
		  /* 821B4EF4h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B4EF4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B4EF4h case   13:*/		return 0x821B4EF8;
		  /* 821B4EF8h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B4EF8h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B4EF8h case   14:*/		return 0x821B4EFC;
		  /* 821B4EFCh */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B4EFCh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B4EFCh case   15:*/		return 0x821B4F00;
		  /* 821B4F00h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B4F00h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B4F00h case   16:*/		return 0x821B4F04;
		  /* 821B4F04h */ case   17:  		/* addi R11, R11, 4 */
		/* 821B4F04h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B4F04h case   17:*/		return 0x821B4F08;
		  /* 821B4F08h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B4F08h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B4F08h case   18:*/		return 0x821B4F0C;
		  /* 821B4F0Ch */ case   19:  		/* bl -405764 */
		/* 821B4F0Ch case   19:*/		regs.LR = 0x821B4F10; return 0x82151E08;
		/* 821B4F0Ch case   19:*/		return 0x821B4F10;
	}
	return 0x821B4F10;
} // Block from 821B4EC0h-821B4F10h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B4F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4F10);
		  /* 821B4F10h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B4F10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4F10h case    0:*/		return 0x821B4F14;
		  /* 821B4F14h */ case    1:  		/* li R6, 0 */
		/* 821B4F14h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B4F14h case    1:*/		return 0x821B4F18;
		  /* 821B4F18h */ case    2:  		/* mr R5, R31 */
		/* 821B4F18h case    2:*/		regs.R5 = regs.R31;
		/* 821B4F18h case    2:*/		return 0x821B4F1C;
		  /* 821B4F1Ch */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B4F1Ch case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B4F1Ch case    3:*/		return 0x821B4F20;
		  /* 821B4F20h */ case    4:  		/* mr R4, R17 */
		/* 821B4F20h case    4:*/		regs.R4 = regs.R17;
		/* 821B4F20h case    4:*/		return 0x821B4F24;
		  /* 821B4F24h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821B4F24h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4F24h case    5:*/		return 0x821B4F28;
		  /* 821B4F28h */ case    6:  		/* mr R3, R14 */
		/* 821B4F28h case    6:*/		regs.R3 = regs.R14;
		/* 821B4F28h case    6:*/		return 0x821B4F2C;
		  /* 821B4F2Ch */ case    7:  		/* bl -20836 */
		/* 821B4F2Ch case    7:*/		regs.LR = 0x821B4F30; return 0x821AFDC8;
		/* 821B4F2Ch case    7:*/		return 0x821B4F30;
		  /* 821B4F30h */ case    8:  		/* or. R31, R3, R3 */
		/* 821B4F30h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821B4F30h case    8:*/		return 0x821B4F34;
		  /* 821B4F34h */ case    9:  		/* bc 12, CR0_EQ, -172 */
		/* 821B4F34h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4F34h case    9:*/		return 0x821B4F38;
		  /* 821B4F38h */ case   10:  		/* mr R5, R31 */
		/* 821B4F38h case   10:*/		regs.R5 = regs.R31;
		/* 821B4F38h case   10:*/		return 0x821B4F3C;
		  /* 821B4F3Ch */ case   11:  		/* mr R4, R17 */
		/* 821B4F3Ch case   11:*/		regs.R4 = regs.R17;
		/* 821B4F3Ch case   11:*/		return 0x821B4F40;
		  /* 821B4F40h */ case   12:  		/* mr R3, R14 */
		/* 821B4F40h case   12:*/		regs.R3 = regs.R14;
		/* 821B4F40h case   12:*/		return 0x821B4F44;
		  /* 821B4F44h */ case   13:  		/* bl -14484 */
		/* 821B4F44h case   13:*/		regs.LR = 0x821B4F48; return 0x821B16B0;
		/* 821B4F44h case   13:*/		return 0x821B4F48;
		  /* 821B4F48h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4F48h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4F48h case   14:*/		return 0x821B4F4C;
		  /* 821B4F4Ch */ case   15:  		/* bc 4, CR0_EQ, -196 */
		/* 821B4F4Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4F4Ch case   15:*/		return 0x821B4F50;
		  /* 821B4F50h */ case   16:  		/* lwz R29, <#[R31 + 8]> */
		/* 821B4F50h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4F50h case   16:*/		return 0x821B4F54;
		  /* 821B4F54h */ case   17:  		/* rlwinm R11, R29, 0, 18, 24 */
		/* 821B4F54h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R29);
		/* 821B4F54h case   17:*/		return 0x821B4F58;
		  /* 821B4F58h */ case   18:  		/* cmplwi CR6, R11, 14720 */
		/* 821B4F58h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B4F58h case   18:*/		return 0x821B4F5C;
		  /* 821B4F5Ch */ case   19:  		/* bc 12, CR6_EQ, -212 */
		/* 821B4F5Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821B4E88;  }
		/* 821B4F5Ch case   19:*/		return 0x821B4F60;
		  /* 821B4F60h */ case   20:  		/* mr R28, R15 */
		/* 821B4F60h case   20:*/		regs.R28 = regs.R15;
		/* 821B4F60h case   20:*/		return 0x821B4F64;
		  /* 821B4F64h */ case   21:  		/* addi R30, R31, 44 */
		/* 821B4F64h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C);
		/* 821B4F64h case   21:*/		return 0x821B4F68;
		  /* 821B4F68h */ case   22:  		/* rlwinm R11, R29, 13, 29, 31 */
		/* 821B4F68h case   22:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R29);
		/* 821B4F68h case   22:*/		return 0x821B4F6C;
		  /* 821B4F6Ch */ case   23:  		/* mr R3, R14 */
		/* 821B4F6Ch case   23:*/		regs.R3 = regs.R14;
		/* 821B4F6Ch case   23:*/		return 0x821B4F70;
		  /* 821B4F70h */ case   24:  		/* cmplw CR6, R28, R11 */
		/* 821B4F70h case   24:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821B4F70h case   24:*/		return 0x821B4F74;
		  /* 821B4F74h */ case   25:  		/* bc 4, CR6_LT, 64 */
		/* 821B4F74h case   25:*/		if ( !regs.CR[6].lt ) { return 0x821B4FB4;  }
		/* 821B4F74h case   25:*/		return 0x821B4F78;
		  /* 821B4F78h */ case   26:  		/* lwz R11, <#[R30]> */
		/* 821B4F78h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B4F78h case   26:*/		return 0x821B4F7C;
		  /* 821B4F7Ch */ case   27:  		/* mr R4, R17 */
		/* 821B4F7Ch case   27:*/		regs.R4 = regs.R17;
		/* 821B4F7Ch case   27:*/		return 0x821B4F80;
		  /* 821B4F80h */ case   28:  		/* lwz R5, <#[R11 + 12]> */
		/* 821B4F80h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B4F80h case   28:*/		return 0x821B4F84;
		  /* 821B4F84h */ case   29:  		/* bl -16732 */
		/* 821B4F84h case   29:*/		regs.LR = 0x821B4F88; return 0x821B0E28;
		/* 821B4F84h case   29:*/		return 0x821B4F88;
		  /* 821B4F88h */ case   30:  		/* lwz R29, <#[R31 + 8]> */
		/* 821B4F88h case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 821B4F88h case   30:*/		return 0x821B4F8C;
		  /* 821B4F8Ch */ case   31:  		/* rlwinm R11, R29, 0, 18, 24 */
		/* 821B4F8Ch case   31:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R29);
		/* 821B4F8Ch case   31:*/		return 0x821B4F90;
		  /* 821B4F90h */ case   32:  		/* cmplwi CR6, R11, 14720 */
		/* 821B4F90h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B4F90h case   32:*/		return 0x821B4F94;
		  /* 821B4F94h */ case   33:  		/* bc 12, CR6_EQ, -268 */
		/* 821B4F94h case   33:*/		if ( regs.CR[6].eq ) { return 0x821B4E88;  }
		/* 821B4F94h case   33:*/		return 0x821B4F98;
		  /* 821B4F98h */ case   34:  		/* mr R3, R31 */
		/* 821B4F98h case   34:*/		regs.R3 = regs.R31;
		/* 821B4F98h case   34:*/		return 0x821B4F9C;
		  /* 821B4F9Ch */ case   35:  		/* bl -329244 */
		/* 821B4F9Ch case   35:*/		regs.LR = 0x821B4FA0; return 0x82164980;
		/* 821B4F9Ch case   35:*/		return 0x821B4FA0;
		  /* 821B4FA0h */ case   36:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4FA0h case   36:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4FA0h case   36:*/		return 0x821B4FA4;
		  /* 821B4FA4h */ case   37:  		/* bc 4, CR0_EQ, -284 */
		/* 821B4FA4h case   37:*/		if ( !regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4FA4h case   37:*/		return 0x821B4FA8;
		  /* 821B4FA8h */ case   38:  		/* addi R28, R28, 1 */
		/* 821B4FA8h case   38:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821B4FA8h case   38:*/		return 0x821B4FAC;
		  /* 821B4FACh */ case   39:  		/* addi R30, R30, 4 */
		/* 821B4FACh case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821B4FACh case   39:*/		return 0x821B4FB0;
		  /* 821B4FB0h */ case   40:  		/* b -72 */
		/* 821B4FB0h case   40:*/		return 0x821B4F68;
		/* 821B4FB0h case   40:*/		return 0x821B4FB4;
	}
	return 0x821B4FB4;
} // Block from 821B4F10h-821B4FB4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821B4FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4FB4);
		  /* 821B4FB4h */ case    0:  		/* mr R4, R31 */
		/* 821B4FB4h case    0:*/		regs.R4 = regs.R31;
		/* 821B4FB4h case    0:*/		return 0x821B4FB8;
		  /* 821B4FB8h */ case    1:  		/* bl -99960 */
		/* 821B4FB8h case    1:*/		regs.LR = 0x821B4FBC; return 0x8219C940;
		/* 821B4FB8h case    1:*/		return 0x821B4FBC;
		  /* 821B4FBCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4FBCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4FBCh case    2:*/		return 0x821B4FC0;
		  /* 821B4FC0h */ case    3:  		/* bc 4, CR0_EQ, -312 */
		/* 821B4FC0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4FC0h case    3:*/		return 0x821B4FC4;
		  /* 821B4FC4h */ case    4:  		/* mr R3, R31 */
		/* 821B4FC4h case    4:*/		regs.R3 = regs.R31;
		/* 821B4FC4h case    4:*/		return 0x821B4FC8;
		  /* 821B4FC8h */ case    5:  		/* bl -279064 */
		/* 821B4FC8h case    5:*/		regs.LR = 0x821B4FCC; return 0x82170DB0;
		/* 821B4FC8h case    5:*/		return 0x821B4FCC;
		  /* 821B4FCCh */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4FCCh case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4FCCh case    6:*/		return 0x821B4FD0;
		  /* 821B4FD0h */ case    7:  		/* bc 12, CR0_EQ, -328 */
		/* 821B4FD0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4FD0h case    7:*/		return 0x821B4FD4;
		  /* 821B4FD4h */ case    8:  		/* mr R5, R17 */
		/* 821B4FD4h case    8:*/		regs.R5 = regs.R17;
		/* 821B4FD4h case    8:*/		return 0x821B4FD8;
		  /* 821B4FD8h */ case    9:  		/* mr R4, R31 */
		/* 821B4FD8h case    9:*/		regs.R4 = regs.R31;
		/* 821B4FD8h case    9:*/		return 0x821B4FDC;
		  /* 821B4FDCh */ case   10:  		/* mr R3, R14 */
		/* 821B4FDCh case   10:*/		regs.R3 = regs.R14;
		/* 821B4FDCh case   10:*/		return 0x821B4FE0;
		  /* 821B4FE0h */ case   11:  		/* bl -17784 */
		/* 821B4FE0h case   11:*/		regs.LR = 0x821B4FE4; return 0x821B0A68;
		/* 821B4FE0h case   11:*/		return 0x821B4FE4;
		  /* 821B4FE4h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B4FE4h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B4FE4h case   12:*/		return 0x821B4FE8;
		  /* 821B4FE8h */ case   13:  		/* bc 12, CR0_EQ, -352 */
		/* 821B4FE8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821B4E88;  }
		/* 821B4FE8h case   13:*/		return 0x821B4FEC;
		  /* 821B4FECh */ case   14:  		/* mr R4, R17 */
		/* 821B4FECh case   14:*/		regs.R4 = regs.R17;
		/* 821B4FECh case   14:*/		return 0x821B4FF0;
		  /* 821B4FF0h */ case   15:  		/* mr R3, R14 */
		/* 821B4FF0h case   15:*/		regs.R3 = regs.R14;
		/* 821B4FF0h case   15:*/		return 0x821B4FF4;
		  /* 821B4FF4h */ case   16:  		/* bl 454356 */
		/* 821B4FF4h case   16:*/		regs.LR = 0x821B4FF8; return 0x82223EC8;
		/* 821B4FF4h case   16:*/		return 0x821B4FF8;
		  /* 821B4FF8h */ case   17:  		/* b -368 */
		/* 821B4FF8h case   17:*/		return 0x821B4E88;
		/* 821B4FF8h case   17:*/		return 0x821B4FFC;
	}
	return 0x821B4FFC;
} // Block from 821B4FB4h-821B4FFCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B4FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B4FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B4FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B4FFC);
		  /* 821B4FFCh */ case    0:  		/* lwz R31, <#[R14 + 652]> */
		/* 821B4FFCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B4FFCh case    0:*/		return 0x821B5000;
		  /* 821B5000h */ case    1:  		/* mr R4, R17 */
		/* 821B5000h case    1:*/		regs.R4 = regs.R17;
		/* 821B5000h case    1:*/		return 0x821B5004;
		  /* 821B5004h */ case    2:  		/* stw R15, <#[R14 + 652]> */
		/* 821B5004h case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5004h case    2:*/		return 0x821B5008;
		  /* 821B5008h */ case    3:  		/* mr R3, R14 */
		/* 821B5008h case    3:*/		regs.R3 = regs.R14;
		/* 821B5008h case    3:*/		return 0x821B500C;
		  /* 821B500Ch */ case    4:  		/* bl -209708 */
		/* 821B500Ch case    4:*/		regs.LR = 0x821B5010; return 0x82181CE0;
		/* 821B500Ch case    4:*/		return 0x821B5010;
		  /* 821B5010h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5010h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5010h case    5:*/		return 0x821B5014;
		  /* 821B5014h */ case    6:  		/* stw R31, <#[R14 + 652]> */
		/* 821B5014h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5014h case    6:*/		return 0x821B5018;
		  /* 821B5018h */ case    7:  		/* bc 4, CR0_EQ, -13716 */
		/* 821B5018h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821B1A84;  }
		/* 821B5018h case    7:*/		return 0x821B501C;
		  /* 821B501Ch */ case    8:  		/* lwz R18, <#[R1 + 96]> */
		/* 821B501Ch case    8:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 821B501Ch case    8:*/		return 0x821B5020;
		  /* 821B5020h */ case    9:  		/* lwz R11, <#[R18 + 20]> */
		/* 821B5020h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000014) );
		/* 821B5020h case    9:*/		return 0x821B5024;
		  /* 821B5024h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5024h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5024h case   10:*/		return 0x821B5028;
		  /* 821B5028h */ case   11:  		/* bc 12, CR0_EQ, 560 */
		/* 821B5028h case   11:*/		if ( regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B5028h case   11:*/		return 0x821B502C;
		  /* 821B502Ch */ case   12:  		/* lwz R11, <#[R18 + 28]> */
		/* 821B502Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B502Ch case   12:*/		return 0x821B5030;
		  /* 821B5030h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5030h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5030h case   13:*/		return 0x821B5034;
		  /* 821B5034h */ case   14:  		/* bc 12, CR0_EQ, 548 */
		/* 821B5034h case   14:*/		if ( regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B5034h case   14:*/		return 0x821B5038;
		  /* 821B5038h */ case   15:  		/* lwz R11, <#[R18 + 36]> */
		/* 821B5038h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000024) );
		/* 821B5038h case   15:*/		return 0x821B503C;
		  /* 821B503Ch */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B503Ch case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B503Ch case   16:*/		return 0x821B5040;
		  /* 821B5040h */ case   17:  		/* bc 12, CR0_EQ, 536 */
		/* 821B5040h case   17:*/		if ( regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B5040h case   17:*/		return 0x821B5044;
		  /* 821B5044h */ case   18:  		/* lwz R11, <#[R18 + 8]> */
		/* 821B5044h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821B5044h case   18:*/		return 0x821B5048;
		  /* 821B5048h */ case   19:  		/* addi R10, R18, 8 */
		/* 821B5048h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R18,0x8);
		/* 821B5048h case   19:*/		return 0x821B504C;
		  /* 821B504Ch */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 821B504Ch case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821B504Ch case   20:*/		return 0x821B5050;
		  /* 821B5050h */ case   21:  		/* bc 12, CR6_EQ, 520 */
		/* 821B5050h case   21:*/		if ( regs.CR[6].eq ) { return 0x821B5258;  }
		/* 821B5050h case   21:*/		return 0x821B5054;
		  /* 821B5054h */ case   22:  		/* lwz R11, <#[R18 + 48]> */
		/* 821B5054h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000030) );
		/* 821B5054h case   22:*/		return 0x821B5058;
		  /* 821B5058h */ case   23:  		/* rlwinm. R9, R11, 13, 31, 31 */
		/* 821B5058h case   23:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R9,regs.R11);
		/* 821B5058h case   23:*/		return 0x821B505C;
		  /* 821B505Ch */ case   24:  		/* bc 4, CR0_EQ, 508 */
		/* 821B505Ch case   24:*/		if ( !regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B505Ch case   24:*/		return 0x821B5060;
		  /* 821B5060h */ case   25:  		/* rlwinm. R9, R11, 12, 31, 31 */
		/* 821B5060h case   25:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R9,regs.R11);
		/* 821B5060h case   25:*/		return 0x821B5064;
		  /* 821B5064h */ case   26:  		/* bc 4, CR0_EQ, 500 */
		/* 821B5064h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B5064h case   26:*/		return 0x821B5068;
		  /* 821B5068h */ case   27:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821B5068h case   27:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5068h case   27:*/		return 0x821B506C;
		  /* 821B506Ch */ case   28:  		/* bc 4, CR0_EQ, 492 */
		/* 821B506Ch case   28:*/		if ( !regs.CR[0].eq ) { return 0x821B5258;  }
		/* 821B506Ch case   28:*/		return 0x821B5070;
		  /* 821B5070h */ case   29:  		/* lwz R11, <#[R18 + 12]> */
		/* 821B5070h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000000C) );
		/* 821B5070h case   29:*/		return 0x821B5074;
		  /* 821B5074h */ case   30:  		/* li R29, 0 */
		/* 821B5074h case   30:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821B5074h case   30:*/		return 0x821B5078;
		  /* 821B5078h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821B5078h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B5078h case   31:*/		return 0x821B507C;
		  /* 821B507Ch */ case   32:  		/* bc 12, CR6_EQ, 8 */
		/* 821B507Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x821B5084;  }
		/* 821B507Ch case   32:*/		return 0x821B5080;
		  /* 821B5080h */ case   33:  		/* lwz R29, <#[R11]> */
		/* 821B5080h case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5080h case   33:*/		return 0x821B5084;
	}
	return 0x821B5084;
} // Block from 821B4FFCh-821B5084h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821B5084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5084);
		  /* 821B5084h */ case    0:  		/* rlwinm R27, R18, 0, 0, 30 */
		/* 821B5084h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R27,regs.R18);
		/* 821B5084h case    0:*/		return 0x821B5088;
		  /* 821B5088h */ case    1:  		/* lwz R11, <#[R27 + 4]> */
		/* 821B5088h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821B5088h case    1:*/		return 0x821B508C;
		  /* 821B508Ch */ case    2:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821B508Ch case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821B508Ch case    2:*/		return 0x821B5090;
		  /* 821B5090h */ case    3:  		/* addic R9, R9, -1 */
		/* 821B5090h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B5090h case    3:*/		return 0x821B5094;
		  /* 821B5094h */ case    4:  		/* subfe R9, R9, R9 */
		/* 821B5094h case    4:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B5094h case    4:*/		return 0x821B5098;
		  /* 821B5098h */ case    5:  		/* and R11, R9, R11 */
		/* 821B5098h case    5:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821B5098h case    5:*/		return 0x821B509C;
		  /* 821B509Ch */ case    6:  		/* cmplw CR6, R29, R11 */
		/* 821B509Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B509Ch case    6:*/		return 0x821B50A0;
		  /* 821B50A0h */ case    7:  		/* bc 4, CR6_EQ, 440 */
		/* 821B50A0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821B5258;  }
		/* 821B50A0h case    7:*/		return 0x821B50A4;
		  /* 821B50A4h */ case    8:  		/* lwz R28, <#[R10]> */
		/* 821B50A4h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 821B50A4h case    8:*/		return 0x821B50A8;
		  /* 821B50A8h */ case    9:  		/* mr R26, R10 */
		/* 821B50A8h case    9:*/		regs.R26 = regs.R10;
		/* 821B50A8h case    9:*/		return 0x821B50AC;
		  /* 821B50ACh */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 821B50ACh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821B50ACh case   10:*/		return 0x821B50B0;
		  /* 821B50B0h */ case   11:  		/* bc 12, CR6_EQ, 368 */
		/* 821B50B0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821B5220;  }
		/* 821B50B0h case   11:*/		return 0x821B50B4;
		  /* 821B50B4h */ case   12:  		/* lwz R30, <#[R28 + 4]> */
		/* 821B50B4h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000004) );
		/* 821B50B4h case   12:*/		return 0x821B50B8;
		  /* 821B50B8h */ case   13:  		/* lwz R11, <#[R30 + 36]> */
		/* 821B50B8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821B50B8h case   13:*/		return 0x821B50BC;
		  /* 821B50BCh */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B50BCh case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B50BCh case   14:*/		return 0x821B50C0;
		  /* 821B50C0h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 821B50C0h case   15:*/		if ( regs.CR[0].eq ) { return 0x821B50CC;  }
		/* 821B50C0h case   15:*/		return 0x821B50C4;
		  /* 821B50C4h */ case   16:  		/* li R31, 0 */
		/* 821B50C4h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B50C4h case   16:*/		return 0x821B50C8;
		  /* 821B50C8h */ case   17:  		/* b 120 */
		/* 821B50C8h case   17:*/		return 0x821B5140;
		/* 821B50C8h case   17:*/		return 0x821B50CC;
	}
	return 0x821B50CC;
} // Block from 821B5084h-821B50CCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B50CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B50CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B50CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B50CC);
		  /* 821B50CCh */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821B50CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821B50CCh case    0:*/		return 0x821B50D0;
		  /* 821B50D0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B50D0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B50D0h case    1:*/		return 0x821B50D4;
		  /* 821B50D4h */ case    2:  		/* addic. R31, R11, -40 */
		/* 821B50D4h case    2:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821B50D4h case    2:*/		return 0x821B50D8;
		  /* 821B50D8h */ case    3:  		/* bc 12, CR0_EQ, 104 */
		/* 821B50D8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B5140;  }
		/* 821B50D8h case    3:*/		return 0x821B50DC;
		  /* 821B50DCh */ case    4:  		/* mr R3, R31 */
		/* 821B50DCh case    4:*/		regs.R3 = regs.R31;
		/* 821B50DCh case    4:*/		return 0x821B50E0;
		  /* 821B50E0h */ case    5:  		/* bl -331496 */
		/* 821B50E0h case    5:*/		regs.LR = 0x821B50E4; return 0x821641F8;
		/* 821B50E0h case    5:*/		return 0x821B50E4;
		  /* 821B50E4h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B50E4h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B50E4h case    6:*/		return 0x821B50E8;
		  /* 821B50E8h */ case    7:  		/* bc 12, CR0_EQ, 88 */
		/* 821B50E8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B5140;  }
		/* 821B50E8h case    7:*/		return 0x821B50EC;
		  /* 821B50ECh */ case    8:  		/* mr R4, R14 */
		/* 821B50ECh case    8:*/		regs.R4 = regs.R14;
		/* 821B50ECh case    8:*/		return 0x821B50F0;
		  /* 821B50F0h */ case    9:  		/* mr R3, R31 */
		/* 821B50F0h case    9:*/		regs.R3 = regs.R31;
		/* 821B50F0h case    9:*/		return 0x821B50F4;
		  /* 821B50F4h */ case   10:  		/* bl -330164 */
		/* 821B50F4h case   10:*/		regs.LR = 0x821B50F8; return 0x82164740;
		/* 821B50F4h case   10:*/		return 0x821B50F8;
		  /* 821B50F8h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 821B50F8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B50F8h case   11:*/		return 0x821B50FC;
		  /* 821B50FCh */ case   12:  		/* cmplw CR6, R11, R18 */
		/* 821B50FCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821B50FCh case   12:*/		return 0x821B5100;
		  /* 821B5100h */ case   13:  		/* bc 4, CR6_EQ, 96 */
		/* 821B5100h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821B5160;  }
		/* 821B5100h case   13:*/		return 0x821B5104;
		  /* 821B5104h */ case   14:  		/* stw R29, <#[R3]> */
		/* 821B5104h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5104h case   14:*/		return 0x821B5108;
		  /* 821B5108h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B5108h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B5108h case   15:*/		return 0x821B510C;
		  /* 821B510Ch */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B510Ch case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B510Ch case   16:*/		return 0x821B5110;
		  /* 821B5110h */ case   17:  		/* cmplwi CR6, R11, 10880 */
		/* 821B5110h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821B5110h case   17:*/		return 0x821B5114;
		  /* 821B5114h */ case   18:  		/* bc 4, CR6_EQ, 44 */
		/* 821B5114h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821B5140;  }
		/* 821B5114h case   18:*/		return 0x821B5118;
		  /* 821B5118h */ case   19:  		/* mr R4, R14 */
		/* 821B5118h case   19:*/		regs.R4 = regs.R14;
		/* 821B5118h case   19:*/		return 0x821B511C;
		  /* 821B511Ch */ case   20:  		/* mr R3, R31 */
		/* 821B511Ch case   20:*/		regs.R3 = regs.R31;
		/* 821B511Ch case   20:*/		return 0x821B5120;
		  /* 821B5120h */ case   21:  		/* bl -103392 */
		/* 821B5120h case   21:*/		regs.LR = 0x821B5124; return 0x8219BD40;
		/* 821B5120h case   21:*/		return 0x821B5124;
		  /* 821B5124h */ case   22:  		/* mr R4, R14 */
		/* 821B5124h case   22:*/		regs.R4 = regs.R14;
		/* 821B5124h case   22:*/		return 0x821B5128;
		  /* 821B5128h */ case   23:  		/* lwz R3, <#[R3]> */
		/* 821B5128h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5128h case   23:*/		return 0x821B512C;
		  /* 821B512Ch */ case   24:  		/* bl -330052 */
		/* 821B512Ch case   24:*/		regs.LR = 0x821B5130; return 0x821647E8;
		/* 821B512Ch case   24:*/		return 0x821B5130;
		  /* 821B5130h */ case   25:  		/* lwz R11, <#[R3 + 16]> */
		/* 821B5130h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821B5130h case   25:*/		return 0x821B5134;
		  /* 821B5134h */ case   26:  		/* cmplw CR6, R11, R18 */
		/* 821B5134h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821B5134h case   26:*/		return 0x821B5138;
		  /* 821B5138h */ case   27:  		/* bc 4, CR6_EQ, 8 */
		/* 821B5138h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821B5140;  }
		/* 821B5138h case   27:*/		return 0x821B513C;
		  /* 821B513Ch */ case   28:  		/* stw R29, <#[R3 + 16]> */
		/* 821B513Ch case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000010) );
		/* 821B513Ch case   28:*/		return 0x821B5140;
	}
	return 0x821B5140;
} // Block from 821B50CCh-821B5140h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821B5140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5140);
		  /* 821B5140h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821B5140h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B5140h case    0:*/		return 0x821B5144;
		  /* 821B5144h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B5144h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B5144h case    1:*/		return 0x821B5148;
		  /* 821B5148h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821B5148h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B5190;  }
		/* 821B5148h case    2:*/		return 0x821B514C;
		  /* 821B514Ch */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821B514Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B514Ch case    3:*/		return 0x821B5150;
		  /* 821B5150h */ case    4:  		/* cmplw CR6, R29, R10 */
		/* 821B5150h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 821B5150h case    4:*/		return 0x821B5154;
		  /* 821B5154h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 821B5154h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B5188;  }
		/* 821B5154h case    5:*/		return 0x821B5158;
		  /* 821B5158h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B5158h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5158h case    6:*/		return 0x821B515C;
		  /* 821B515Ch */ case    7:  		/* b -24 */
		/* 821B515Ch case    7:*/		return 0x821B5144;
		/* 821B515Ch case    7:*/		return 0x821B5160;
	}
	return 0x821B5160;
} // Block from 821B5140h-821B5160h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B5160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5160);
		  /* 821B5160h */ case    0:  		/* cmplw CR6, R11, R29 */
		/* 821B5160h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821B5160h case    0:*/		return 0x821B5164;
		  /* 821B5164h */ case    1:  		/* bc 4, CR6_EQ, -92 */
		/* 821B5164h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B5108;  }
		/* 821B5164h case    1:*/		return 0x821B5168;
		  /* 821B5168h */ case    2:  		/* mr R4, R31 */
		/* 821B5168h case    2:*/		regs.R4 = regs.R31;
		/* 821B5168h case    2:*/		return 0x821B516C;
		  /* 821B516Ch */ case    3:  		/* mr R3, R14 */
		/* 821B516Ch case    3:*/		regs.R3 = regs.R14;
		/* 821B516Ch case    3:*/		return 0x821B5170;
		  /* 821B5170h */ case    4:  		/* bl 484576 */
		/* 821B5170h case    4:*/		regs.LR = 0x821B5174; return 0x8222B650;
		/* 821B5170h case    4:*/		return 0x821B5174;
		  /* 821B5174h */ case    5:  		/* mr R5, R14 */
		/* 821B5174h case    5:*/		regs.R5 = regs.R14;
		/* 821B5174h case    5:*/		return 0x821B5178;
		  /* 821B5178h */ case    6:  		/* mr R4, R18 */
		/* 821B5178h case    6:*/		regs.R4 = regs.R18;
		/* 821B5178h case    6:*/		return 0x821B517C;
		  /* 821B517Ch */ case    7:  		/* mr R3, R30 */
		/* 821B517Ch case    7:*/		regs.R3 = regs.R30;
		/* 821B517Ch case    7:*/		return 0x821B5180;
		  /* 821B5180h */ case    8:  		/* bl 501736 */
		/* 821B5180h case    8:*/		regs.LR = 0x821B5184; return 0x8222F968;
		/* 821B5180h case    8:*/		return 0x821B5184;
		  /* 821B5184h */ case    9:  		/* b 132 */
		/* 821B5184h case    9:*/		return 0x821B5208;
		/* 821B5184h case    9:*/		return 0x821B5188;
	}
	return 0x821B5188;
} // Block from 821B5160h-821B5188h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B5188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5188);
		  /* 821B5188h */ case    0:  		/* li R11, 1 */
		/* 821B5188h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B5188h case    0:*/		return 0x821B518C;
		  /* 821B518Ch */ case    1:  		/* b 8 */
		/* 821B518Ch case    1:*/		return 0x821B5194;
		/* 821B518Ch case    1:*/		return 0x821B5190;
	}
	return 0x821B5190;
} // Block from 821B5188h-821B5190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B5190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5190);
		  /* 821B5190h */ case    0:  		/* li R11, 0 */
		/* 821B5190h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B5190h case    0:*/		return 0x821B5194;
	}
	return 0x821B5194;
} // Block from 821B5190h-821B5194h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B5194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5194);
		  /* 821B5194h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B5194h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B5194h case    0:*/		return 0x821B5198;
		  /* 821B5198h */ case    1:  		/* mr R3, R30 */
		/* 821B5198h case    1:*/		regs.R3 = regs.R30;
		/* 821B5198h case    1:*/		return 0x821B519C;
		  /* 821B519Ch */ case    2:  		/* bc 12, CR0_EQ, 96 */
		/* 821B519Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821B51FC;  }
		/* 821B519Ch case    2:*/		return 0x821B51A0;
		  /* 821B51A0h */ case    3:  		/* mr R5, R14 */
		/* 821B51A0h case    3:*/		regs.R5 = regs.R14;
		/* 821B51A0h case    3:*/		return 0x821B51A4;
		  /* 821B51A4h */ case    4:  		/* mr R4, R18 */
		/* 821B51A4h case    4:*/		regs.R4 = regs.R18;
		/* 821B51A4h case    4:*/		return 0x821B51A8;
		  /* 821B51A8h */ case    5:  		/* bl 501696 */
		/* 821B51A8h case    5:*/		regs.LR = 0x821B51AC; return 0x8222F968;
		/* 821B51A8h case    5:*/		return 0x821B51AC;
		  /* 821B51ACh */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821B51ACh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B51ACh case    6:*/		return 0x821B51B0;
		  /* 821B51B0h */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 821B51B0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B5208;  }
		/* 821B51B0h case    7:*/		return 0x821B51B4;
		  /* 821B51B4h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B51B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B51B4h case    8:*/		return 0x821B51B8;
		  /* 821B51B8h */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B51B8h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B51B8h case    9:*/		return 0x821B51BC;
		  /* 821B51BCh */ case   10:  		/* cmplwi CR6, R11, 11520 */
		/* 821B51BCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821B51BCh case   10:*/		return 0x821B51C0;
		  /* 821B51C0h */ case   11:  		/* bc 4, CR6_EQ, 72 */
		/* 821B51C0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B5208;  }
		/* 821B51C0h case   11:*/		return 0x821B51C4;
		  /* 821B51C4h */ case   12:  		/* lwz R11, <#[R30 + 12]> */
		/* 821B51C4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821B51C4h case   12:*/		return 0x821B51C8;
		  /* 821B51C8h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821B51C8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B51C8h case   13:*/		return 0x821B51CC;
		  /* 821B51CCh */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 821B51CCh case   14:*/		if ( regs.CR[6].eq ) { return 0x821B51E0;  }
		/* 821B51CCh case   14:*/		return 0x821B51D0;
		  /* 821B51D0h */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 821B51D0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821B51D0h case   15:*/		return 0x821B51D4;
		  /* 821B51D4h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821B51D4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B51D4h case   16:*/		return 0x821B51D8;
		  /* 821B51D8h */ case   17:  		/* li R11, 1 */
		/* 821B51D8h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B51D8h case   17:*/		return 0x821B51DC;
		  /* 821B51DCh */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 821B51DCh case   18:*/		if ( !regs.CR[6].eq ) { return 0x821B51E4;  }
		/* 821B51DCh case   18:*/		return 0x821B51E0;
	}
	return 0x821B51E0;
} // Block from 821B5194h-821B51E0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821B51E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B51E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B51E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B51E0);
		  /* 821B51E0h */ case    0:  		/* li R11, 0 */
		/* 821B51E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B51E0h case    0:*/		return 0x821B51E4;
	}
	return 0x821B51E4;
} // Block from 821B51E0h-821B51E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B51E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B51E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B51E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B51E4);
		  /* 821B51E4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B51E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B51E4h case    0:*/		return 0x821B51E8;
		  /* 821B51E8h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 821B51E8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B5208;  }
		/* 821B51E8h case    1:*/		return 0x821B51EC;
		  /* 821B51ECh */ case    2:  		/* mr R4, R31 */
		/* 821B51ECh case    2:*/		regs.R4 = regs.R31;
		/* 821B51ECh case    2:*/		return 0x821B51F0;
		  /* 821B51F0h */ case    3:  		/* mr R3, R14 */
		/* 821B51F0h case    3:*/		regs.R3 = regs.R14;
		/* 821B51F0h case    3:*/		return 0x821B51F4;
		  /* 821B51F4h */ case    4:  		/* bl 484444 */
		/* 821B51F4h case    4:*/		regs.LR = 0x821B51F8; return 0x8222B650;
		/* 821B51F4h case    4:*/		return 0x821B51F8;
		  /* 821B51F8h */ case    5:  		/* b 16 */
		/* 821B51F8h case    5:*/		return 0x821B5208;
		/* 821B51F8h case    5:*/		return 0x821B51FC;
	}
	return 0x821B51FC;
} // Block from 821B51E4h-821B51FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B51FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B51FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B51FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B51FC);
		  /* 821B51FCh */ case    0:  		/* mr R5, R29 */
		/* 821B51FCh case    0:*/		regs.R5 = regs.R29;
		/* 821B51FCh case    0:*/		return 0x821B5200;
		  /* 821B5200h */ case    1:  		/* mr R4, R28 */
		/* 821B5200h case    1:*/		regs.R4 = regs.R28;
		/* 821B5200h case    1:*/		return 0x821B5204;
		  /* 821B5204h */ case    2:  		/* bl 501540 */
		/* 821B5204h case    2:*/		regs.LR = 0x821B5208; return 0x8222F928;
		/* 821B5204h case    2:*/		return 0x821B5208;
	}
	return 0x821B5208;
} // Block from 821B51FCh-821B5208h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5208);
		  /* 821B5208h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821B5208h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821B5208h case    0:*/		return 0x821B520C;
		  /* 821B520Ch */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 821B520Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821B520Ch case    1:*/		return 0x821B5210;
		  /* 821B5210h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821B5210h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B5218;  }
		/* 821B5210h case    2:*/		return 0x821B5214;
		  /* 821B5214h */ case    3:  		/* addi R26, R28, 12 */
		/* 821B5214h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R28,0xC);
		/* 821B5214h case    3:*/		return 0x821B5218;
	}
	return 0x821B5218;
} // Block from 821B5208h-821B5218h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B5218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5218);
		  /* 821B5218h */ case    0:  		/* lwz R28, <#[R26]> */
		/* 821B5218h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 821B5218h case    0:*/		return 0x821B521C;
		  /* 821B521Ch */ case    1:  		/* b -368 */
		/* 821B521Ch case    1:*/		return 0x821B50AC;
		/* 821B521Ch case    1:*/		return 0x821B5220;
	}
	return 0x821B5220;
} // Block from 821B5218h-821B5220h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B5220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5220);
		  /* 821B5220h */ case    0:  		/* mr R5, R14 */
		/* 821B5220h case    0:*/		regs.R5 = regs.R14;
		/* 821B5220h case    0:*/		return 0x821B5224;
		  /* 821B5224h */ case    1:  		/* mr R4, R29 */
		/* 821B5224h case    1:*/		regs.R4 = regs.R29;
		/* 821B5224h case    1:*/		return 0x821B5228;
		  /* 821B5228h */ case    2:  		/* mr R3, R18 */
		/* 821B5228h case    2:*/		regs.R3 = regs.R18;
		/* 821B5228h case    2:*/		return 0x821B522C;
		  /* 821B522Ch */ case    3:  		/* bl 501564 */
		/* 821B522Ch case    3:*/		regs.LR = 0x821B5230; return 0x8222F968;
		/* 821B522Ch case    3:*/		return 0x821B5230;
		  /* 821B5230h */ case    4:  		/* lwz R11, <#[R27 + 4]> */
		/* 821B5230h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821B5230h case    4:*/		return 0x821B5234;
		  /* 821B5234h */ case    5:  		/* lwz R10, <#[R27]> */
		/* 821B5234h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821B5234h case    5:*/		return 0x821B5238;
		  /* 821B5238h */ case    6:  		/* mr R3, R14 */
		/* 821B5238h case    6:*/		regs.R3 = regs.R14;
		/* 821B5238h case    6:*/		return 0x821B523C;
		  /* 821B523Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B523Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B523Ch case    7:*/		return 0x821B5240;
		  /* 821B5240h */ case    8:  		/* stw R10, <#[R11]> */
		/* 821B5240h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5240h case    8:*/		return 0x821B5244;
		  /* 821B5244h */ case    9:  		/* lwz R11, <#[R27]> */
		/* 821B5244h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821B5244h case    9:*/		return 0x821B5248;
		  /* 821B5248h */ case   10:  		/* lwz R10, <#[R27 + 4]> */
		/* 821B5248h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821B5248h case   10:*/		return 0x821B524C;
		  /* 821B524Ch */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B524Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B524Ch case   11:*/		return 0x821B5250;
		  /* 821B5250h */ case   12:  		/* stw R10, <#[R11]> */
		/* 821B5250h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5250h case   12:*/		return 0x821B5254;
		  /* 821B5254h */ case   13:  		/* bl 221388 */
		/* 821B5254h case   13:*/		regs.LR = 0x821B5258; return 0x821EB320;
		/* 821B5254h case   13:*/		return 0x821B5258;
	}
	return 0x821B5258;
} // Block from 821B5220h-821B5258h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B5258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5258);
		  /* 821B5258h */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 821B5258h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821B5258h case    0:*/		return 0x821B525C;
		  /* 821B525Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821B525Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B525Ch case    1:*/		return 0x821B5260;
		  /* 821B5260h */ case    2:  		/* bc 4, CR6_EQ, 1536 */
		/* 821B5260h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B5860;  }
		/* 821B5260h case    2:*/		return 0x821B5264;
		  /* 821B5264h */ case    3:  		/* lwz R10, <#[R18 + 28]> */
		/* 821B5264h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B5264h case    3:*/		return 0x821B5268;
		  /* 821B5268h */ case    4:  		/* addi R11, R18, 24 */
		/* 821B5268h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x18);
		/* 821B5268h case    4:*/		return 0x821B526C;
		  /* 821B526Ch */ case    5:  		/* li R26, 0 */
		/* 821B526Ch case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821B526Ch case    5:*/		return 0x821B5270;
		  /* 821B5270h */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821B5270h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821B5270h case    6:*/		return 0x821B5274;
		  /* 821B5274h */ case    7:  		/* li R23, 0 */
		/* 821B5274h case    7:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821B5274h case    7:*/		return 0x821B5278;
		  /* 821B5278h */ case    8:  		/* bc 4, CR0_EQ, 1272 */
		/* 821B5278h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B5770;  }
		/* 821B5278h case    8:*/		return 0x821B527C;
		  /* 821B527Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821B527Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B527Ch case    9:*/		return 0x821B5280;
		  /* 821B5280h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5280h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5280h case   10:*/		return 0x821B5284;
		  /* 821B5284h */ case   11:  		/* addic. R29, R11, -40 */
		/* 821B5284h case   11:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 821B5284h case   11:*/		return 0x821B5288;
		  /* 821B5288h */ case   12:  		/* bc 12, CR0_EQ, 1256 */
		/* 821B5288h case   12:*/		if ( regs.CR[0].eq ) { return 0x821B5770;  }
		/* 821B5288h case   12:*/		return 0x821B528C;
		  /* 821B528Ch */ case   13:  		/* mr R3, R29 */
		/* 821B528Ch case   13:*/		regs.R3 = regs.R29;
		/* 821B528Ch case   13:*/		return 0x821B5290;
		  /* 821B5290h */ case   14:  		/* bl -330000 */
		/* 821B5290h case   14:*/		regs.LR = 0x821B5294; return 0x82164980;
		/* 821B5290h case   14:*/		return 0x821B5294;
		  /* 821B5294h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5294h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5294h case   15:*/		return 0x821B5298;
		  /* 821B5298h */ case   16:  		/* bc 12, CR0_EQ, 28 */
		/* 821B5298h case   16:*/		if ( regs.CR[0].eq ) { return 0x821B52B4;  }
		/* 821B5298h case   16:*/		return 0x821B529C;
		  /* 821B529Ch */ case   17:  		/* li R6, 1 */
		/* 821B529Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B529Ch case   17:*/		return 0x821B52A0;
		  /* 821B52A0h */ case   18:  		/* li R5, 0 */
		/* 821B52A0h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B52A0h case   18:*/		return 0x821B52A4;
		  /* 821B52A4h */ case   19:  		/* mr R4, R29 */
		/* 821B52A4h case   19:*/		regs.R4 = regs.R29;
		/* 821B52A4h case   19:*/		return 0x821B52A8;
		  /* 821B52A8h */ case   20:  		/* mr R3, R14 */
		/* 821B52A8h case   20:*/		regs.R3 = regs.R14;
		/* 821B52A8h case   20:*/		return 0x821B52AC;
		  /* 821B52ACh */ case   21:  		/* bl 483612 */
		/* 821B52ACh case   21:*/		regs.LR = 0x821B52B0; return 0x8222B3C8;
		/* 821B52ACh case   21:*/		return 0x821B52B0;
		  /* 821B52B0h */ case   22:  		/* b 540 */
		/* 821B52B0h case   22:*/		return 0x821B54CC;
		/* 821B52B0h case   22:*/		return 0x821B52B4;
	}
	return 0x821B52B4;
} // Block from 821B5258h-821B52B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821B52B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B52B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B52B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B52B4);
		  /* 821B52B4h */ case    0:  		/* lwz R31, <#[R29 + 8]> */
		/* 821B52B4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 821B52B4h case    0:*/		return 0x821B52B8;
		  /* 821B52B8h */ case    1:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821B52B8h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821B52B8h case    1:*/		return 0x821B52BC;
		  /* 821B52BCh */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821B52BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B52BCh case    2:*/		return 0x821B52C0;
		  /* 821B52C0h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821B52C0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B52D8;  }
		/* 821B52C0h case    3:*/		return 0x821B52C4;
		  /* 821B52C4h */ case    4:  		/* rlwinm. R11, R31, 6, 31, 31 */
		/* 821B52C4h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R31);
		/* 821B52C4h case    4:*/		return 0x821B52C8;
		  /* 821B52C8h */ case    5:  		/* bc 12, CR0_EQ, 516 */
		/* 821B52C8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B54CC;  }
		/* 821B52C8h case    5:*/		return 0x821B52CC;
		  /* 821B52CCh */ case    6:  		/* rlwinm R11, R31, 0, 6, 4 */
		/* 821B52CCh case    6:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R31);
		/* 821B52CCh case    6:*/		return 0x821B52D0;
		  /* 821B52D0h */ case    7:  		/* stw R11, <#[R29 + 8]> */
		/* 821B52D0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B52D0h case    7:*/		return 0x821B52D4;
		  /* 821B52D4h */ case    8:  		/* b 504 */
		/* 821B52D4h case    8:*/		return 0x821B54CC;
		/* 821B52D4h case    8:*/		return 0x821B52D8;
	}
	return 0x821B52D8;
} // Block from 821B52B4h-821B52D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B52D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B52D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B52D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B52D8);
		  /* 821B52D8h */ case    0:  		/* mr R3, R29 */
		/* 821B52D8h case    0:*/		regs.R3 = regs.R29;
		/* 821B52D8h case    0:*/		return 0x821B52DC;
		  /* 821B52DCh */ case    1:  		/* bl -279852 */
		/* 821B52DCh case    1:*/		regs.LR = 0x821B52E0; return 0x82170DB0;
		/* 821B52DCh case    1:*/		return 0x821B52E0;
		  /* 821B52E0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B52E0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B52E0h case    2:*/		return 0x821B52E4;
		  /* 821B52E4h */ case    3:  		/* bc 12, CR0_EQ, 488 */
		/* 821B52E4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B54CC;  }
		/* 821B52E4h case    3:*/		return 0x821B52E8;
		  /* 821B52E8h */ case    4:  		/* mr R4, R29 */
		/* 821B52E8h case    4:*/		regs.R4 = regs.R29;
		/* 821B52E8h case    4:*/		return 0x821B52EC;
		  /* 821B52ECh */ case    5:  		/* mr R3, R14 */
		/* 821B52ECh case    5:*/		regs.R3 = regs.R14;
		/* 821B52ECh case    5:*/		return 0x821B52F0;
		  /* 821B52F0h */ case    6:  		/* bl -100784 */
		/* 821B52F0h case    6:*/		regs.LR = 0x821B52F4; return 0x8219C940;
		/* 821B52F0h case    6:*/		return 0x821B52F4;
		  /* 821B52F4h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B52F4h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B52F4h case    7:*/		return 0x821B52F8;
		  /* 821B52F8h */ case    8:  		/* bc 4, CR0_EQ, 468 */
		/* 821B52F8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B54CC;  }
		/* 821B52F8h case    8:*/		return 0x821B52FC;
		  /* 821B52FCh */ case    9:  		/* lwz R30, <#[R29 + 4]> */
		/* 821B52FCh case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821B52FCh case    9:*/		return 0x821B5300;
		  /* 821B5300h */ case   10:  		/* rlwinm R27, R31, 6, 31, 31 */
		/* 821B5300h case   10:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R27,regs.R31);
		/* 821B5300h case   10:*/		return 0x821B5304;
		  /* 821B5304h */ case   11:  		/* li R28, 0 */
		/* 821B5304h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821B5304h case   11:*/		return 0x821B5308;
		  /* 821B5308h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 821B5308h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B5308h case   12:*/		return 0x821B530C;
		  /* 821B530Ch */ case   13:  		/* bc 12, CR6_EQ, 180 */
		/* 821B530Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821B53C0;  }
		/* 821B530Ch case   13:*/		return 0x821B5310;
		  /* 821B5310h */ case   14:  		/* lwz R10, <#[R30 + 16]> */
		/* 821B5310h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821B5310h case   14:*/		return 0x821B5314;
		  /* 821B5314h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821B5314h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821B5314h case   15:*/		return 0x821B5318;
		  /* 821B5318h */ case   16:  		/* bc 12, CR6_EQ, 156 */
		/* 821B5318h case   16:*/		if ( regs.CR[6].eq ) { return 0x821B53B4;  }
		/* 821B5318h case   16:*/		return 0x821B531C;
		  /* 821B531Ch */ case   17:  		/* lwz R11, <#[R30]> */
		/* 821B531Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B531Ch case   17:*/		return 0x821B5320;
		  /* 821B5320h */ case   18:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821B5320h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821B5320h case   18:*/		return 0x821B5324;
		  /* 821B5324h */ case   19:  		/* bc 12, CR0_EQ, 144 */
		/* 821B5324h case   19:*/		if ( regs.CR[0].eq ) { return 0x821B53B4;  }
		/* 821B5324h case   19:*/		return 0x821B5328;
		  /* 821B5328h */ case   20:  		/* lwz R31, <#[R10 + 8]> */
		/* 821B5328h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000008) );
		/* 821B5328h case   20:*/		return 0x821B532C;
		  /* 821B532Ch */ case   21:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821B532Ch case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821B532Ch case   21:*/		return 0x821B5330;
		  /* 821B5330h */ case   22:  		/* cmplwi CR6, R11, 14080 */
		/* 821B5330h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B5330h case   22:*/		return 0x821B5334;
		  /* 821B5334h */ case   23:  		/* bc 4, CR6_EQ, 96 */
		/* 821B5334h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821B5394;  }
		/* 821B5334h case   23:*/		return 0x821B5338;
		  /* 821B5338h */ case   24:  		/* rlwinm. R11, R31, 6, 31, 31 */
		/* 821B5338h case   24:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R31);
		/* 821B5338h case   24:*/		return 0x821B533C;
		  /* 821B533Ch */ case   25:  		/* mr R28, R10 */
		/* 821B533Ch case   25:*/		regs.R28 = regs.R10;
		/* 821B533Ch case   25:*/		return 0x821B5340;
		  /* 821B5340h */ case   26:  		/* bc 4, CR0_EQ, 116 */
		/* 821B5340h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B53B4;  }
		/* 821B5340h case   26:*/		return 0x821B5344;
		  /* 821B5344h */ case   27:  		/* addi R9, R1, 232 */
		/* 821B5344h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE8);
		/* 821B5344h case   27:*/		return 0x821B5348;
		  /* 821B5348h */ case   28:  		/* li R11, 0 */
		/* 821B5348h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B5348h case   28:*/		return 0x821B534C;
		  /* 821B534Ch */ case   29:  		/* rlwinm R6, R31, 13, 29, 31 */
		/* 821B534Ch case   29:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R6,regs.R31);
		/* 821B534Ch case   29:*/		return 0x821B5350;
		  /* 821B5350h */ case   30:  		/* addi R10, R10, 40 */
		/* 821B5350h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x28);
		/* 821B5350h case   30:*/		return 0x821B5354;
		  /* 821B5354h */ case   31:  		/* cmplw CR6, R11, R6 */
		/* 821B5354h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821B5354h case   31:*/		return 0x821B5358;
		  /* 821B5358h */ case   32:  		/* bc 4, CR6_LT, 20 */
		/* 821B5358h case   32:*/		if ( !regs.CR[6].lt ) { return 0x821B536C;  }
		/* 821B5358h case   32:*/		return 0x821B535C;
		  /* 821B535Ch */ case   33:  		/* lwzu R8, <#[R10 + 4]> */
		/* 821B535Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821B535Ch case   33:*/		return 0x821B5360;
		  /* 821B5360h */ case   34:  		/* addi R11, R11, 1 */
		/* 821B5360h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B5360h case   34:*/		return 0x821B5364;
		  /* 821B5364h */ case   35:  		/* stwu R8, <#[R9 + 8]> */
		/* 821B5364h case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 821B5364h case   35:*/		return 0x821B5368;
		  /* 821B5368h */ case   36:  		/* b -20 */
		/* 821B5368h case   36:*/		return 0x821B5354;
		/* 821B5368h case   36:*/		return 0x821B536C;
	}
	return 0x821B536C;
} // Block from 821B52D8h-821B536Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 821B536Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B536C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B536C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B536C);
		  /* 821B536Ch */ case    0:  		/* li R10, 0 */
		/* 821B536Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821B536Ch case    0:*/		return 0x821B5370;
		  /* 821B5370h */ case    1:  		/* li R9, 0 */
		/* 821B5370h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821B5370h case    1:*/		return 0x821B5374;
		  /* 821B5374h */ case    2:  		/* li R8, 0 */
		/* 821B5374h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821B5374h case    2:*/		return 0x821B5378;
		  /* 821B5378h */ case    3:  		/* li R7, 0 */
		/* 821B5378h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821B5378h case    3:*/		return 0x821B537C;
		  /* 821B537Ch */ case    4:  		/* addi R5, R1, 240 */
		/* 821B537Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 821B537Ch case    4:*/		return 0x821B5380;
		  /* 821B5380h */ case    5:  		/* li R4, 0 */
		/* 821B5380h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5380h case    5:*/		return 0x821B5384;
		  /* 821B5384h */ case    6:  		/* mr R3, R14 */
		/* 821B5384h case    6:*/		regs.R3 = regs.R14;
		/* 821B5384h case    6:*/		return 0x821B5388;
		  /* 821B5388h */ case    7:  		/* bl -22880 */
		/* 821B5388h case    7:*/		regs.LR = 0x821B538C; return 0x821AFA28;
		/* 821B5388h case    7:*/		return 0x821B538C;
		  /* 821B538Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821B538Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B538Ch case    8:*/		return 0x821B5390;
		  /* 821B5390h */ case    9:  		/* b 32 */
		/* 821B5390h case    9:*/		return 0x821B53B0;
		/* 821B5390h case    9:*/		return 0x821B5394;
	}
	return 0x821B5394;
} // Block from 821B536Ch-821B5394h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B5394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5394);
		  /* 821B5394h */ case    0:  		/* mr R3, R30 */
		/* 821B5394h case    0:*/		regs.R3 = regs.R30;
		/* 821B5394h case    0:*/		return 0x821B5398;
		  /* 821B5398h */ case    1:  		/* bl -332120 */
		/* 821B5398h case    1:*/		regs.LR = 0x821B539C; return 0x82164240;
		/* 821B5398h case    1:*/		return 0x821B539C;
		  /* 821B539Ch */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B539Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B539Ch case    2:*/		return 0x821B53A0;
		  /* 821B53A0h */ case    3:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821B53A0h case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821B53A0h case    3:*/		return 0x821B53A4;
		  /* 821B53A4h */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 821B53A4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821B53A4h case    4:*/		return 0x821B53A8;
		  /* 821B53A8h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821B53A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B53B4;  }
		/* 821B53A8h case    5:*/		return 0x821B53AC;
		  /* 821B53ACh */ case    6:  		/* rlwinm. R11, R31, 6, 31, 31 */
		/* 821B53ACh case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R31);
		/* 821B53ACh case    6:*/		return 0x821B53B0;
	}
	return 0x821B53B0;
} // Block from 821B5394h-821B53B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B53B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B53B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B53B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B53B0);
		  /* 821B53B0h */ case    0:  		/* bc 4, CR0_EQ, 12 */
		/* 821B53B0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821B53BC;  }
		/* 821B53B0h case    0:*/		return 0x821B53B4;
	}
	return 0x821B53B4;
} // Block from 821B53B0h-821B53B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B53B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B53B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B53B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B53B4);
		  /* 821B53B4h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821B53B4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821B53B4h case    0:*/		return 0x821B53B8;
		  /* 821B53B8h */ case    1:  		/* b -176 */
		/* 821B53B8h case    1:*/		return 0x821B5308;
		/* 821B53B8h case    1:*/		return 0x821B53BC;
	}
	return 0x821B53BC;
} // Block from 821B53B4h-821B53BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B53BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B53BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B53BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B53BC);
		  /* 821B53BCh */ case    0:  		/* li R27, 1 */
		/* 821B53BCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821B53BCh case    0:*/		return 0x821B53C0;
	}
	return 0x821B53C0;
} // Block from 821B53BCh-821B53C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B53C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B53C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B53C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B53C0);
		  /* 821B53C0h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821B53C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821B53C0h case    0:*/		return 0x821B53C4;
		  /* 821B53C4h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 821B53C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B5448;  }
		/* 821B53C4h case    1:*/		return 0x821B53C8;
		  /* 821B53C8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821B53C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821B53C8h case    2:*/		return 0x821B53CC;
		  /* 821B53CCh */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 821B53CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821B53E0;  }
		/* 821B53CCh case    3:*/		return 0x821B53D0;
		  /* 821B53D0h */ case    4:  		/* mr R3, R29 */
		/* 821B53D0h case    4:*/		regs.R3 = regs.R29;
		/* 821B53D0h case    4:*/		return 0x821B53D4;
		  /* 821B53D4h */ case    5:  		/* bl -256852 */
		/* 821B53D4h case    5:*/		regs.LR = 0x821B53D8; return 0x82176880;
		/* 821B53D4h case    5:*/		return 0x821B53D8;
		  /* 821B53D8h */ case    6:  		/* or. R28, R3, R3 */
		/* 821B53D8h case    6:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821B53D8h case    6:*/		return 0x821B53DC;
		  /* 821B53DCh */ case    7:  		/* bc 12, CR0_EQ, 108 */
		/* 821B53DCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821B5448;  }
		/* 821B53DCh case    7:*/		return 0x821B53E0;
	}
	return 0x821B53E0;
} // Block from 821B53C0h-821B53E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B53E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B53E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B53E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B53E0);
		  /* 821B53E0h */ case    0:  		/* lwz R30, <#[R29 + 4]> */
		/* 821B53E0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821B53E0h case    0:*/		return 0x821B53E4;
		  /* 821B53E4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821B53E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821B53E4h case    1:*/		return 0x821B53E8;
		  /* 821B53E8h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 821B53E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B5448;  }
		/* 821B53E8h case    2:*/		return 0x821B53EC;
		  /* 821B53ECh */ case    3:  		/* lwz R31, <#[R30 + 16]> */
		/* 821B53ECh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821B53ECh case    3:*/		return 0x821B53F0;
		  /* 821B53F0h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821B53F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B53F0h case    4:*/		return 0x821B53F4;
		  /* 821B53F4h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 821B53F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821B543C;  }
		/* 821B53F4h case    5:*/		return 0x821B53F8;
		  /* 821B53F8h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 821B53F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821B53F8h case    6:*/		return 0x821B53FC;
		  /* 821B53FCh */ case    7:  		/* rlwinm. R11, R11, 7, 29, 31 */
		/* 821B53FCh case    7:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821B53FCh case    7:*/		return 0x821B5400;
		  /* 821B5400h */ case    8:  		/* bc 12, CR0_EQ, 60 */
		/* 821B5400h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B543C;  }
		/* 821B5400h case    8:*/		return 0x821B5404;
		  /* 821B5404h */ case    9:  		/* addic. R11, R11, -1 */
		/* 821B5404h case    9:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B5404h case    9:*/		return 0x821B5408;
		  /* 821B5408h */ case   10:  		/* bc 12, CR0_EQ, 52 */
		/* 821B5408h case   10:*/		if ( regs.CR[0].eq ) { return 0x821B543C;  }
		/* 821B5408h case   10:*/		return 0x821B540C;
		  /* 821B540Ch */ case   11:  		/* mr R4, R31 */
		/* 821B540Ch case   11:*/		regs.R4 = regs.R31;
		/* 821B540Ch case   11:*/		return 0x821B5410;
		  /* 821B5410h */ case   12:  		/* mr R3, R28 */
		/* 821B5410h case   12:*/		regs.R3 = regs.R28;
		/* 821B5410h case   12:*/		return 0x821B5414;
		  /* 821B5414h */ case   13:  		/* bl 461996 */
		/* 821B5414h case   13:*/		regs.LR = 0x821B5418; return 0x822260C0;
		/* 821B5414h case   13:*/		return 0x821B5418;
		  /* 821B5418h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5418h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5418h case   14:*/		return 0x821B541C;
		  /* 821B541Ch */ case   15:  		/* bc 12, CR0_EQ, 32 */
		/* 821B541Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821B543C;  }
		/* 821B541Ch case   15:*/		return 0x821B5420;
		  /* 821B5420h */ case   16:  		/* li R6, 0 */
		/* 821B5420h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821B5420h case   16:*/		return 0x821B5424;
		  /* 821B5424h */ case   17:  		/* mr R5, R31 */
		/* 821B5424h case   17:*/		regs.R5 = regs.R31;
		/* 821B5424h case   17:*/		return 0x821B5428;
		  /* 821B5428h */ case   18:  		/* mr R4, R28 */
		/* 821B5428h case   18:*/		regs.R4 = regs.R28;
		/* 821B5428h case   18:*/		return 0x821B542C;
		  /* 821B542Ch */ case   19:  		/* mr R3, R14 */
		/* 821B542Ch case   19:*/		regs.R3 = regs.R14;
		/* 821B542Ch case   19:*/		return 0x821B5430;
		  /* 821B5430h */ case   20:  		/* bl 487480 */
		/* 821B5430h case   20:*/		regs.LR = 0x821B5434; return 0x8222C468;
		/* 821B5430h case   20:*/		return 0x821B5434;
		  /* 821B5434h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5434h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5434h case   21:*/		return 0x821B5438;
		  /* 821B5438h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821B5438h case   22:*/		if ( regs.CR[0].eq ) { return 0x821B5444;  }
		/* 821B5438h case   22:*/		return 0x821B543C;
	}
	return 0x821B543C;
} // Block from 821B53E0h-821B543Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821B543Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B543C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B543C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B543C);
		  /* 821B543Ch */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821B543Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821B543Ch case    0:*/		return 0x821B5440;
		  /* 821B5440h */ case    1:  		/* b -92 */
		/* 821B5440h case    1:*/		return 0x821B53E4;
		/* 821B5440h case    1:*/		return 0x821B5444;
	}
	return 0x821B5444;
} // Block from 821B543Ch-821B5444h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B5444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5444);
		  /* 821B5444h */ case    0:  		/* li R27, 0 */
		/* 821B5444h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821B5444h case    0:*/		return 0x821B5448;
	}
	return 0x821B5448;
} // Block from 821B5444h-821B5448h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B5448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5448);
		  /* 821B5448h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821B5448h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821B5448h case    0:*/		return 0x821B544C;
		  /* 821B544Ch */ case    1:  		/* bc 12, CR0_EQ, 128 */
		/* 821B544Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821B54CC;  }
		/* 821B544Ch case    1:*/		return 0x821B5450;
		  /* 821B5450h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821B5450h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821B5450h case    2:*/		return 0x821B5454;
		  /* 821B5454h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821B5454h case    3:*/		if ( regs.CR[6].eq ) { return 0x821B54B0;  }
		/* 821B5454h case    3:*/		return 0x821B5458;
		  /* 821B5458h */ case    4:  		/* lwz R11, <#[R28 + 8]> */
		/* 821B5458h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5458h case    4:*/		return 0x821B545C;
		  /* 821B545Ch */ case    5:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821B545Ch case    5:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821B545Ch case    5:*/		return 0x821B5460;
		  /* 821B5460h */ case    6:  		/* bc 4, CR0_EQ, 80 */
		/* 821B5460h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B54B0;  }
		/* 821B5460h case    6:*/		return 0x821B5464;
		  /* 821B5464h */ case    7:  		/* mr R4, R28 */
		/* 821B5464h case    7:*/		regs.R4 = regs.R28;
		/* 821B5464h case    7:*/		return 0x821B5468;
		  /* 821B5468h */ case    8:  		/* mr R3, R14 */
		/* 821B5468h case    8:*/		regs.R3 = regs.R14;
		/* 821B5468h case    8:*/		return 0x821B546C;
		  /* 821B546Ch */ case    9:  		/* bl -84404 */
		/* 821B546Ch case    9:*/		regs.LR = 0x821B5470; return 0x821A0AB8;
		/* 821B546Ch case    9:*/		return 0x821B5470;
		  /* 821B5470h */ case   10:  		/* li R31, 0 */
		/* 821B5470h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B5470h case   10:*/		return 0x821B5474;
		  /* 821B5474h */ case   11:  		/* addi R30, R28, 40 */
		/* 821B5474h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x28);
		/* 821B5474h case   11:*/		return 0x821B5478;
		  /* 821B5478h */ case   12:  		/* lwz R11, <#[R28 + 8]> */
		/* 821B5478h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5478h case   12:*/		return 0x821B547C;
		  /* 821B547Ch */ case   13:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B547Ch case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B547Ch case   13:*/		return 0x821B5480;
		  /* 821B5480h */ case   14:  		/* cmplw CR6, R31, R11 */
		/* 821B5480h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821B5480h case   14:*/		return 0x821B5484;
		  /* 821B5484h */ case   15:  		/* bc 4, CR6_LT, 28 */
		/* 821B5484h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821B54A0;  }
		/* 821B5484h case   15:*/		return 0x821B5488;
		  /* 821B5488h */ case   16:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821B5488h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821B5488h case   16:*/		return 0x821B548C;
		  /* 821B548Ch */ case   17:  		/* mr R3, R14 */
		/* 821B548Ch case   17:*/		regs.R3 = regs.R14;
		/* 821B548Ch case   17:*/		return 0x821B5490;
		  /* 821B5490h */ case   18:  		/* lwz R4, <#[R11 + 12]> */
		/* 821B5490h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B5490h case   18:*/		return 0x821B5494;
		  /* 821B5494h */ case   19:  		/* bl -84444 */
		/* 821B5494h case   19:*/		regs.LR = 0x821B5498; return 0x821A0AB8;
		/* 821B5494h case   19:*/		return 0x821B5498;
		  /* 821B5498h */ case   20:  		/* addi R31, R31, 1 */
		/* 821B5498h case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821B5498h case   20:*/		return 0x821B549C;
		  /* 821B549Ch */ case   21:  		/* b -36 */
		/* 821B549Ch case   21:*/		return 0x821B5478;
		/* 821B549Ch case   21:*/		return 0x821B54A0;
	}
	return 0x821B54A0;
} // Block from 821B5448h-821B54A0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B54A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B54A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B54A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B54A0);
		  /* 821B54A0h */ case    0:  		/* cmplw CR6, R28, R23 */
		/* 821B54A0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R23);
		/* 821B54A0h case    0:*/		return 0x821B54A4;
		  /* 821B54A4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821B54A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B54B0;  }
		/* 821B54A4h case    1:*/		return 0x821B54A8;
		  /* 821B54A8h */ case    2:  		/* mr R23, R28 */
		/* 821B54A8h case    2:*/		regs.R23 = regs.R28;
		/* 821B54A8h case    2:*/		return 0x821B54AC;
		  /* 821B54ACh */ case    3:  		/* b 32 */
		/* 821B54ACh case    3:*/		return 0x821B54CC;
		/* 821B54ACh case    3:*/		return 0x821B54B0;
	}
	return 0x821B54B0;
} // Block from 821B54A0h-821B54B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B54B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B54B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B54B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B54B0);
		  /* 821B54B0h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B54B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B54B0h case    0:*/		return 0x821B54B4;
		  /* 821B54B4h */ case    1:  		/* rlwinm R10, R11, 0, 15, 17 */
		/* 821B54B4h case    1:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R10,regs.R11);
		/* 821B54B4h case    1:*/		return 0x821B54B8;
		  /* 821B54B8h */ case    2:  		/* cmplwi CR6, R10, 16384 */
		/* 821B54B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00004000);
		/* 821B54B8h case    2:*/		return 0x821B54BC;
		  /* 821B54BCh */ case    3:  		/* bc 12, CR6_GT, 524 */
		/* 821B54BCh case    3:*/		if ( regs.CR[6].gt ) { return 0x821B56C8;  }
		/* 821B54BCh case    3:*/		return 0x821B54C0;
		  /* 821B54C0h */ case    4:  		/* mr R4, R29 */
		/* 821B54C0h case    4:*/		regs.R4 = regs.R29;
		/* 821B54C0h case    4:*/		return 0x821B54C4;
		  /* 821B54C4h */ case    5:  		/* mr R3, R14 */
		/* 821B54C4h case    5:*/		regs.R3 = regs.R14;
		/* 821B54C4h case    5:*/		return 0x821B54C8;
		  /* 821B54C8h */ case    6:  		/* bl -84496 */
		/* 821B54C8h case    6:*/		regs.LR = 0x821B54CC; return 0x821A0AB8;
		/* 821B54C8h case    6:*/		return 0x821B54CC;
	}
	return 0x821B54CC;
} // Block from 821B54B0h-821B54CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B54CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B54CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B54CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B54CC);
		  /* 821B54CCh */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821B54CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821B54CCh case    0:*/		return 0x821B54D0;
		  /* 821B54D0h */ case    1:  		/* bc 12, CR6_EQ, 596 */
		/* 821B54D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B5724;  }
		/* 821B54D0h case    1:*/		return 0x821B54D4;
		  /* 821B54D4h */ case    2:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821B54D4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821B54D4h case    2:*/		return 0x821B54D8;
		  /* 821B54D8h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 821B54D8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821B54D8h case    3:*/		return 0x821B54DC;
		  /* 821B54DCh */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821B54DCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821B54DCh case    4:*/		return 0x821B54E0;
		  /* 821B54E0h */ case    5:  		/* bc 12, CR0_EQ, 524 */
		/* 821B54E0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B56EC;  }
		/* 821B54E0h case    5:*/		return 0x821B54E4;
		  /* 821B54E4h */ case    6:  		/* li R11, 0 */
		/* 821B54E4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B54E4h case    6:*/		return 0x821B54E8;
		  /* 821B54E8h */ case    7:  		/* b 524 */
		/* 821B54E8h case    7:*/		return 0x821B56F4;
		/* 821B54E8h case    7:*/		return 0x821B54EC;
		  /* 821B54ECh */ case    8:  		/* mr R3, R29 */
		/* 821B54ECh case    8:*/		regs.R3 = regs.R29;
		/* 821B54ECh case    8:*/		return 0x821B54F0;
		  /* 821B54F0h */ case    9:  		/* bl -330608 */
		/* 821B54F0h case    9:*/		regs.LR = 0x821B54F4; return 0x82164980;
		/* 821B54F0h case    9:*/		return 0x821B54F4;
		  /* 821B54F4h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B54F4h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B54F4h case   10:*/		return 0x821B54F8;
		  /* 821B54F8h */ case   11:  		/* mr R4, R29 */
		/* 821B54F8h case   11:*/		regs.R4 = regs.R29;
		/* 821B54F8h case   11:*/		return 0x821B54FC;
		  /* 821B54FCh */ case   12:  		/* mr R3, R14 */
		/* 821B54FCh case   12:*/		regs.R3 = regs.R14;
		/* 821B54FCh case   12:*/		return 0x821B5500;
		  /* 821B5500h */ case   13:  		/* bc 4, CR0_EQ, 472 */
		/* 821B5500h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821B56D8;  }
		/* 821B5500h case   13:*/		return 0x821B5504;
		  /* 821B5504h */ case   14:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B5504h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B5504h case   14:*/		return 0x821B5508;
		  /* 821B5508h */ case   15:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821B5508h case   15:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821B5508h case   15:*/		return 0x821B550C;
		  /* 821B550Ch */ case   16:  		/* addi R10, R11, -1 */
		/* 821B550Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821B550Ch case   16:*/		return 0x821B5510;
		  /* 821B5510h */ case   17:  		/* andc R11, R11, R10 */
		/* 821B5510h case   17:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B5510h case   17:*/		return 0x821B5514;
		  /* 821B5514h */ case   18:  		/* cntlzw R11, R11 */
		/* 821B5514h case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821B5514h case   18:*/		return 0x821B5518;
		  /* 821B5518h */ case   19:  		/* subfic R27, R11, 31 */
		/* 821B5518h case   19:*/		cpu::op::subfic<0>(regs,&regs.R27,regs.R11,0x1F);
		/* 821B5518h case   19:*/		return 0x821B551C;
		  /* 821B551Ch */ case   20:  		/* bl 456324 */
		/* 821B551Ch case   20:*/		regs.LR = 0x821B5520; return 0x82224BA0;
		/* 821B551Ch case   20:*/		return 0x821B5520;
		  /* 821B5520h */ case   21:  		/* mr R31, R3 */
		/* 821B5520h case   21:*/		regs.R31 = regs.R3;
		/* 821B5520h case   21:*/		return 0x821B5524;
		  /* 821B5524h */ case   22:  		/* lis R12, -17537 */
		/* 821B5524h case   22:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFBB7F);
		/* 821B5524h case   22:*/		return 0x821B5528;
		  /* 821B5528h */ case   23:  		/* mr R4, R27 */
		/* 821B5528h case   23:*/		regs.R4 = regs.R27;
		/* 821B5528h case   23:*/		return 0x821B552C;
		  /* 821B552Ch */ case   24:  		/* ori R12, R12, 65535 */
		/* 821B552Ch case   24:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 821B552Ch case   24:*/		return 0x821B5530;
		  /* 821B5530h */ case   25:  		/* mr R3, R29 */
		/* 821B5530h case   25:*/		regs.R3 = regs.R29;
		/* 821B5530h case   25:*/		return 0x821B5534;
		  /* 821B5534h */ case   26:  		/* lwz R11, <#[R31 + 16]> */
		/* 821B5534h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821B5534h case   26:*/		return 0x821B5538;
		  /* 821B5538h */ case   27:  		/* lwz R10, <#[R31 + 20]> */
		/* 821B5538h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821B5538h case   27:*/		return 0x821B553C;
		  /* 821B553Ch */ case   28:  		/* lwz R9, <#[R31 + 8]> */
		/* 821B553Ch case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821B553Ch case   28:*/		return 0x821B5540;
		  /* 821B5540h */ case   29:  		/* rlwinm R11, R11, 0, 1, 31 */
		/* 821B5540h case   29:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R11,regs.R11);
		/* 821B5540h case   29:*/		return 0x821B5544;
		  /* 821B5544h */ case   30:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 821B5544h case   30:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 821B5544h case   30:*/		return 0x821B5548;
		  /* 821B5548h */ case   31:  		/* and R9, R9, R12 */
		/* 821B5548h case   31:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 821B5548h case   31:*/		return 0x821B554C;
		  /* 821B554Ch */ case   32:  		/* stw R11, <#[R31 + 16]> */
		/* 821B554Ch case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821B554Ch case   32:*/		return 0x821B5550;
		  /* 821B5550h */ case   33:  		/* stw R10, <#[R31 + 20]> */
		/* 821B5550h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821B5550h case   33:*/		return 0x821B5554;
		  /* 821B5554h */ case   34:  		/* stw R9, <#[R31 + 8]> */
		/* 821B5554h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821B5554h case   34:*/		return 0x821B5558;
		  /* 821B5558h */ case   35:  		/* bl 31504 */
		/* 821B5558h case   35:*/		regs.LR = 0x821B555C; return 0x821BD068;
		/* 821B5558h case   35:*/		return 0x821B555C;
		  /* 821B555Ch */ case   36:  		/* mr R5, R3 */
		/* 821B555Ch case   36:*/		regs.R5 = regs.R3;
		/* 821B555Ch case   36:*/		return 0x821B5560;
		  /* 821B5560h */ case   37:  		/* li R4, 0 */
		/* 821B5560h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5560h case   37:*/		return 0x821B5564;
		  /* 821B5564h */ case   38:  		/* mr R3, R31 */
		/* 821B5564h case   38:*/		regs.R3 = regs.R31;
		/* 821B5564h case   38:*/		return 0x821B5568;
		  /* 821B5568h */ case   39:  		/* bl 31648 */
		/* 821B5568h case   39:*/		regs.LR = 0x821B556C; return 0x821BD108;
		/* 821B5568h case   39:*/		return 0x821B556C;
		  /* 821B556Ch */ case   40:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821B556Ch case   40:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821B556Ch case   40:*/		return 0x821B5570;
		  /* 821B5570h */ case   41:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821B5570h case   41:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821B5570h case   41:*/		return 0x821B5574;
		  /* 821B5574h */ case   42:  		/* addi R11, R11, 36 */
		/* 821B5574h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821B5574h case   42:*/		return 0x821B5578;
		  /* 821B5578h */ case   43:  		/* addi R10, R10, 36 */
		/* 821B5578h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821B5578h case   43:*/		return 0x821B557C;
		  /* 821B557Ch */ case   44:  		/* addi R8, R11, -36 */
		/* 821B557Ch case   44:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821B557Ch case   44:*/		return 0x821B5580;
		  /* 821B5580h */ case   45:  		/* addi R7, R10, -36 */
		/* 821B5580h case   45:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821B5580h case   45:*/		return 0x821B5584;
		  /* 821B5584h */ case   46:  		/* addi R9, R10, 4 */
		/* 821B5584h case   46:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B5584h case   46:*/		return 0x821B5588;
		  /* 821B5588h */ case   47:  		/* lwz R6, <#[R11]> */
		/* 821B5588h case   47:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5588h case   47:*/		return 0x821B558C;
		  /* 821B558Ch */ case   48:  		/* li R25, 0 */
		/* 821B558Ch case   48:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821B558Ch case   48:*/		return 0x821B5590;
		  /* 821B5590h */ case   49:  		/* addi R24, R29, 44 */
		/* 821B5590h case   49:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R29,0x2C);
		/* 821B5590h case   49:*/		return 0x821B5594;
		  /* 821B5594h */ case   50:  		/* stw R6, <#[R10]> */
		/* 821B5594h case   50:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821B5594h case   50:*/		return 0x821B5598;
		  /* 821B5598h */ case   51:  		/* lwz R6, <#[R11]> */
		/* 821B5598h case   51:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5598h case   51:*/		return 0x821B559C;
		  /* 821B559Ch */ case   52:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821B559Ch case   52:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821B559Ch case   52:*/		return 0x821B55A0;
		  /* 821B55A0h */ case   53:  		/* stw R7, <#[R6]> */
		/* 821B55A0h case   53:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821B55A0h case   53:*/		return 0x821B55A4;
		  /* 821B55A4h */ case   54:  		/* stw R8, <#[R10 + 4]> */
		/* 821B55A4h case   54:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821B55A4h case   54:*/		return 0x821B55A8;
		  /* 821B55A8h */ case   55:  		/* stw R9, <#[R11]> */
		/* 821B55A8h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B55A8h case   55:*/		return 0x821B55AC;
		  /* 821B55ACh */ case   56:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B55ACh case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B55ACh case   56:*/		return 0x821B55B0;
		  /* 821B55B0h */ case   57:  		/* mr R3, R14 */
		/* 821B55B0h case   57:*/		regs.R3 = regs.R14;
		/* 821B55B0h case   57:*/		return 0x821B55B4;
		  /* 821B55B4h */ case   58:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821B55B4h case   58:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821B55B4h case   58:*/		return 0x821B55B8;
		  /* 821B55B8h */ case   59:  		/* cmplw CR6, R25, R11 */
		/* 821B55B8h case   59:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821B55B8h case   59:*/		return 0x821B55BC;
		  /* 821B55BCh */ case   60:  		/* bc 4, CR6_LT, 248 */
		/* 821B55BCh case   60:*/		if ( !regs.CR[6].lt ) { return 0x821B56B4;  }
		/* 821B55BCh case   60:*/		return 0x821B55C0;
		  /* 821B55C0h */ case   61:  		/* lwz R28, <#[R24]> */
		/* 821B55C0h case   61:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000000) );
		/* 821B55C0h case   61:*/		return 0x821B55C4;
		  /* 821B55C4h */ case   62:  		/* lwz R26, <#[R28 + 12]> */
		/* 821B55C4h case   62:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R28 + 0x0000000C) );
		/* 821B55C4h case   62:*/		return 0x821B55C8;
		  /* 821B55C8h */ case   63:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B55C8h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B55C8h case   63:*/		return 0x821B55CC;
		  /* 821B55CCh */ case   64:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B55CCh case   64:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B55CCh case   64:*/		return 0x821B55D0;
		  /* 821B55D0h */ case   65:  		/* cmplwi CR6, R11, 14080 */
		/* 821B55D0h case   65:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821B55D0h case   65:*/		return 0x821B55D4;
		  /* 821B55D4h */ case   66:  		/* bc 4, CR6_EQ, 76 */
		/* 821B55D4h case   66:*/		if ( !regs.CR[6].eq ) { return 0x821B5620;  }
		/* 821B55D4h case   66:*/		return 0x821B55D8;
		  /* 821B55D8h */ case   67:  		/* lwz R11, <#[R28]> */
		/* 821B55D8h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B55D8h case   67:*/		return 0x821B55DC;
		  /* 821B55DCh */ case   68:  		/* rlwinm R10, R27, 1, 0, 30 */
		/* 821B55DCh case   68:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R27);
		/* 821B55DCh case   68:*/		return 0x821B55E0;
		  /* 821B55E0h */ case   69:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821B55E0h case   69:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821B55E0h case   69:*/		return 0x821B55E4;
		  /* 821B55E4h */ case   70:  		/* srw R11, R11, R10 */
		/* 821B55E4h case   70:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821B55E4h case   70:*/		return 0x821B55E8;
		  /* 821B55E8h */ case   71:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821B55E8h case   71:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821B55E8h case   71:*/		return 0x821B55EC;
		  /* 821B55ECh */ case   72:  		/* addi R11, R11, 11 */
		/* 821B55ECh case   72:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821B55ECh case   72:*/		return 0x821B55F0;
		  /* 821B55F0h */ case   73:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821B55F0h case   73:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821B55F0h case   73:*/		return 0x821B55F4;
		  /* 821B55F4h */ case   74:  		/* lwzx R4, <#[R11 + R26]> */
		/* 821B55F4h case   74:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821B55F4h case   74:*/		return 0x821B55F8;
		  /* 821B55F8h */ case   75:  		/* lwz R5, <#[R4 + 12]> */
		/* 821B55F8h case   75:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B55F8h case   75:*/		return 0x821B55FC;
		  /* 821B55FCh */ case   76:  		/* bl -279820 */
		/* 821B55FCh case   76:*/		regs.LR = 0x821B5600; return 0x821710F0;
		/* 821B55FCh case   76:*/		return 0x821B5600;
		  /* 821B5600h */ case   77:  		/* lwz R11, <#[R28]> */
		/* 821B5600h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B5600h case   77:*/		return 0x821B5604;
		  /* 821B5604h */ case   78:  		/* mr R30, R3 */
		/* 821B5604h case   78:*/		regs.R30 = regs.R3;
		/* 821B5604h case   78:*/		return 0x821B5608;
		  /* 821B5608h */ case   79:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821B5608h case   79:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821B5608h case   79:*/		return 0x821B560C;
		  /* 821B560Ch */ case   80:  		/* bl -252748 */
		/* 821B560Ch case   80:*/		regs.LR = 0x821B5610; return 0x82177AC0;
		/* 821B560Ch case   80:*/		return 0x821B5610;
		  /* 821B5610h */ case   81:  		/* mr R4, R26 */
		/* 821B5610h case   81:*/		regs.R4 = regs.R26;
		/* 821B5610h case   81:*/		return 0x821B5614;
		  /* 821B5614h */ case   82:  		/* mr R3, R14 */
		/* 821B5614h case   82:*/		regs.R3 = regs.R14;
		/* 821B5614h case   82:*/		return 0x821B5618;
		  /* 821B5618h */ case   83:  		/* bl -84832 */
		/* 821B5618h case   83:*/		regs.LR = 0x821B561C; return 0x821A0AB8;
		/* 821B5618h case   83:*/		return 0x821B561C;
		  /* 821B561Ch */ case   84:  		/* b 76 */
		/* 821B561Ch case   84:*/		return 0x821B5668;
		/* 821B561Ch case   84:*/		return 0x821B5620;
	}
	return 0x821B5620;
} // Block from 821B54CCh-821B5620h (85 instructions)

//////////////////////////////////////////////////////
// Block at 821B5620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5620);
		  /* 821B5620h */ case    0:  		/* mr R5, R26 */
		/* 821B5620h case    0:*/		regs.R5 = regs.R26;
		/* 821B5620h case    0:*/		return 0x821B5624;
		  /* 821B5624h */ case    1:  		/* mr R4, R28 */
		/* 821B5624h case    1:*/		regs.R4 = regs.R28;
		/* 821B5624h case    1:*/		return 0x821B5628;
		  /* 821B5628h */ case    2:  		/* bl -279864 */
		/* 821B5628h case    2:*/		regs.LR = 0x821B562C; return 0x821710F0;
		/* 821B5628h case    2:*/		return 0x821B562C;
		  /* 821B562Ch */ case    3:  		/* lwz R8, <#[R3]> */
		/* 821B562Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821B562Ch case    3:*/		return 0x821B5630;
		  /* 821B5630h */ case    4:  		/* li R11, 1 */
		/* 821B5630h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B5630h case    4:*/		return 0x821B5634;
		  /* 821B5634h */ case    5:  		/* rlwinm R10, R27, 1, 0, 30 */
		/* 821B5634h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R27);
		/* 821B5634h case    5:*/		return 0x821B5638;
		  /* 821B5638h */ case    6:  		/* rlwimi R8, R11, 25, 4, 6 */
		/* 821B5638h case    6:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R8,regs.R11);
		/* 821B5638h case    6:*/		return 0x821B563C;
		  /* 821B563Ch */ case    7:  		/* li R9, 7296 */
		/* 821B563Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1C80);
		/* 821B563Ch case    7:*/		return 0x821B5640;
		  /* 821B5640h */ case    8:  		/* stw R8, <#[R3]> */
		/* 821B5640h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5640h case    8:*/		return 0x821B5644;
		  /* 821B5644h */ case    9:  		/* rlwinm R11, R8, 0, 27, 24 */
		/* 821B5644h case    9:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R11,regs.R8);
		/* 821B5644h case    9:*/		return 0x821B5648;
		  /* 821B5648h */ case   10:  		/* mr R30, R3 */
		/* 821B5648h case   10:*/		regs.R30 = regs.R3;
		/* 821B5648h case   10:*/		return 0x821B564C;
		  /* 821B564Ch */ case   11:  		/* rlwinm R11, R11, 0, 24, 21 */
		/* 821B564Ch case   11:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R11,regs.R11);
		/* 821B564Ch case   11:*/		return 0x821B5650;
		  /* 821B5650h */ case   12:  		/* lwz R8, <#[R28]> */
		/* 821B5650h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000000) );
		/* 821B5650h case   12:*/		return 0x821B5654;
		  /* 821B5654h */ case   13:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821B5654h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821B5654h case   13:*/		return 0x821B5658;
		  /* 821B5658h */ case   14:  		/* srw R10, R8, R10 */
		/* 821B5658h case   14:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821B5658h case   14:*/		return 0x821B565C;
		  /* 821B565Ch */ case   15:  		/* rlwimi R9, R10, 5, 25, 26 */
		/* 821B565Ch case   15:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R9,regs.R10);
		/* 821B565Ch case   15:*/		return 0x821B5660;
		  /* 821B5660h */ case   16:  		/* or R11, R9, R11 */
		/* 821B5660h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821B5660h case   16:*/		return 0x821B5664;
		  /* 821B5664h */ case   17:  		/* stw R11, <#[R3]> */
		/* 821B5664h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5664h case   17:*/		return 0x821B5668;
	}
	return 0x821B5668;
} // Block from 821B5620h-821B5668h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B5668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5668);
		  /* 821B5668h */ case    0:  		/* mr R5, R30 */
		/* 821B5668h case    0:*/		regs.R5 = regs.R30;
		/* 821B5668h case    0:*/		return 0x821B566C;
		  /* 821B566Ch */ case    1:  		/* mr R4, R25 */
		/* 821B566Ch case    1:*/		regs.R4 = regs.R25;
		/* 821B566Ch case    1:*/		return 0x821B5670;
		  /* 821B5670h */ case    2:  		/* mr R3, R31 */
		/* 821B5670h case    2:*/		regs.R3 = regs.R31;
		/* 821B5670h case    2:*/		return 0x821B5674;
		  /* 821B5674h */ case    3:  		/* bl -282564 */
		/* 821B5674h case    3:*/		regs.LR = 0x821B5678; return 0x821706B0;
		/* 821B5674h case    3:*/		return 0x821B5678;
		  /* 821B5678h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 821B5678h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B5678h case    4:*/		return 0x821B567C;
		  /* 821B567Ch */ case    5:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821B567Ch case    5:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821B567Ch case    5:*/		return 0x821B5680;
		  /* 821B5680h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 821B5680h case    6:*/		if ( regs.CR[0].eq ) { return 0x821B56A8;  }
		/* 821B5680h case    6:*/		return 0x821B5684;
		  /* 821B5684h */ case    7:  		/* mr R3, R29 */
		/* 821B5684h case    7:*/		regs.R3 = regs.R29;
		/* 821B5684h case    7:*/		return 0x821B5688;
		  /* 821B5688h */ case    8:  		/* bl -252784 */
		/* 821B5688h case    8:*/		regs.LR = 0x821B568C; return 0x82177B18;
		/* 821B5688h case    8:*/		return 0x821B568C;
		  /* 821B568Ch */ case    9:  		/* mr R4, R3 */
		/* 821B568Ch case    9:*/		regs.R4 = regs.R3;
		/* 821B568Ch case    9:*/		return 0x821B5690;
		  /* 821B5690h */ case   10:  		/* mr R3, R14 */
		/* 821B5690h case   10:*/		regs.R3 = regs.R14;
		/* 821B5690h case   10:*/		return 0x821B5694;
		  /* 821B5694h */ case   11:  		/* li R5, 0 */
		/* 821B5694h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B5694h case   11:*/		return 0x821B5698;
		  /* 821B5698h */ case   12:  		/* bl -282440 */
		/* 821B5698h case   12:*/		regs.LR = 0x821B569C; return 0x82170750;
		/* 821B5698h case   12:*/		return 0x821B569C;
		  /* 821B569Ch */ case   13:  		/* mr R4, R3 */
		/* 821B569Ch case   13:*/		regs.R4 = regs.R3;
		/* 821B569Ch case   13:*/		return 0x821B56A0;
		  /* 821B56A0h */ case   14:  		/* mr R3, R31 */
		/* 821B56A0h case   14:*/		regs.R3 = regs.R31;
		/* 821B56A0h case   14:*/		return 0x821B56A4;
		  /* 821B56A4h */ case   15:  		/* bl -251100 */
		/* 821B56A4h case   15:*/		regs.LR = 0x821B56A8; return 0x821781C8;
		/* 821B56A4h case   15:*/		return 0x821B56A8;
	}
	return 0x821B56A8;
} // Block from 821B5668h-821B56A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B56A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56A8);
		  /* 821B56A8h */ case    0:  		/* addi R25, R25, 1 */
		/* 821B56A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821B56A8h case    0:*/		return 0x821B56AC;
		  /* 821B56ACh */ case    1:  		/* addi R24, R24, 4 */
		/* 821B56ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821B56ACh case    1:*/		return 0x821B56B0;
		  /* 821B56B0h */ case    2:  		/* b -260 */
		/* 821B56B0h case    2:*/		return 0x821B55AC;
		/* 821B56B0h case    2:*/		return 0x821B56B4;
	}
	return 0x821B56B4;
} // Block from 821B56A8h-821B56B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B56B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56B4);
		  /* 821B56B4h */ case    0:  		/* mr R6, R31 */
		/* 821B56B4h case    0:*/		regs.R6 = regs.R31;
		/* 821B56B4h case    0:*/		return 0x821B56B8;
		  /* 821B56B8h */ case    1:  		/* mr R5, R27 */
		/* 821B56B8h case    1:*/		regs.R5 = regs.R27;
		/* 821B56B8h case    1:*/		return 0x821B56BC;
		  /* 821B56BCh */ case    2:  		/* mr R4, R29 */
		/* 821B56BCh case    2:*/		regs.R4 = regs.R29;
		/* 821B56BCh case    2:*/		return 0x821B56C0;
		  /* 821B56C0h */ case    3:  		/* bl -67488 */
		/* 821B56C0h case    3:*/		regs.LR = 0x821B56C4; return 0x821A4F20;
		/* 821B56C0h case    3:*/		return 0x821B56C4;
		  /* 821B56C4h */ case    4:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B56C4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B56C4h case    4:*/		return 0x821B56C8;
	}
	return 0x821B56C8;
} // Block from 821B56B4h-821B56C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B56C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56C8);
		  /* 821B56C8h */ case    0:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B56C8h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B56C8h case    0:*/		return 0x821B56CC;
		  /* 821B56CCh */ case    1:  		/* cmplwi CR6, R11, 14720 */
		/* 821B56CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B56CCh case    1:*/		return 0x821B56D0;
		  /* 821B56D0h */ case    2:  		/* bc 4, CR6_EQ, -484 */
		/* 821B56D0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B54EC;  }
		/* 821B56D0h case    2:*/		return 0x821B56D4;
		  /* 821B56D4h */ case    3:  		/* b 16 */
		/* 821B56D4h case    3:*/		return 0x821B56E4;
		/* 821B56D4h case    3:*/		return 0x821B56D8;
	}
	return 0x821B56D8;
} // Block from 821B56C8h-821B56D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B56D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56D8);
		  /* 821B56D8h */ case    0:  		/* li R6, 1 */
		/* 821B56D8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B56D8h case    0:*/		return 0x821B56DC;
		  /* 821B56DCh */ case    1:  		/* li R5, 0 */
		/* 821B56DCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B56DCh case    1:*/		return 0x821B56E0;
		  /* 821B56E0h */ case    2:  		/* bl 482536 */
		/* 821B56E0h case    2:*/		regs.LR = 0x821B56E4; return 0x8222B3C8;
		/* 821B56E0h case    2:*/		return 0x821B56E4;
	}
	return 0x821B56E4;
} // Block from 821B56D8h-821B56E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B56E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56E4);
		  /* 821B56E4h */ case    0:  		/* li R26, 1 */
		/* 821B56E4h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821B56E4h case    0:*/		return 0x821B56E8;
		  /* 821B56E8h */ case    1:  		/* b -540 */
		/* 821B56E8h case    1:*/		return 0x821B54CC;
		/* 821B56E8h case    1:*/		return 0x821B56EC;
	}
	return 0x821B56EC;
} // Block from 821B56E4h-821B56ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B56ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56EC);
		  /* 821B56ECh */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821B56ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821B56ECh case    0:*/		return 0x821B56F0;
		  /* 821B56F0h */ case    1:  		/* addi R11, R11, -40 */
		/* 821B56F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821B56F0h case    1:*/		return 0x821B56F4;
	}
	return 0x821B56F4;
} // Block from 821B56ECh-821B56F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821B56F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B56F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B56F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B56F4);
		  /* 821B56F4h */ case    0:  		/* cmplw CR6, R29, R11 */
		/* 821B56F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B56F4h case    0:*/		return 0x821B56F8;
		  /* 821B56F8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821B56F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B5714;  }
		/* 821B56F8h case    1:*/		return 0x821B56FC;
		  /* 821B56FCh */ case    2:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821B56FCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821B56FCh case    2:*/		return 0x821B5700;
		  /* 821B5700h */ case    3:  		/* mr R23, R29 */
		/* 821B5700h case    3:*/		regs.R23 = regs.R29;
		/* 821B5700h case    3:*/		return 0x821B5704;
		  /* 821B5704h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821B5704h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821B5704h case    4:*/		return 0x821B5708;
		  /* 821B5708h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B5708h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B5708h case    5:*/		return 0x821B570C;
		  /* 821B570Ch */ case    6:  		/* bc 4, CR0_EQ, 100 */
		/* 821B570Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B5770;  }
		/* 821B570Ch case    6:*/		return 0x821B5710;
		  /* 821B5710h */ case    7:  		/* b 80 */
		/* 821B5710h case    7:*/		return 0x821B5760;
		/* 821B5710h case    7:*/		return 0x821B5714;
	}
	return 0x821B5714;
} // Block from 821B56F4h-821B5714h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B5714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5714);
		  /* 821B5714h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821B5714h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821B5714h case    0:*/		return 0x821B5718;
		  /* 821B5718h */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 821B5718h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B5770;  }
		/* 821B5718h case    1:*/		return 0x821B571C;
		  /* 821B571Ch */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821B571Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821B571Ch case    2:*/		return 0x821B5720;
		  /* 821B5720h */ case    3:  		/* b 68 */
		/* 821B5720h case    3:*/		return 0x821B5764;
		/* 821B5720h case    3:*/		return 0x821B5724;
	}
	return 0x821B5724;
} // Block from 821B5714h-821B5724h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B5724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5724);
		  /* 821B5724h */ case    0:  		/* lwz R11, <#[R18 + 28]> */
		/* 821B5724h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B5724h case    0:*/		return 0x821B5728;
		  /* 821B5728h */ case    1:  		/* addi R10, R18, 24 */
		/* 821B5728h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R18,0x18);
		/* 821B5728h case    1:*/		return 0x821B572C;
		  /* 821B572Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B572Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B572Ch case    2:*/		return 0x821B5730;
		  /* 821B5730h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821B5730h case    3:*/		if ( regs.CR[0].eq ) { return 0x821B573C;  }
		/* 821B5730h case    3:*/		return 0x821B5734;
		  /* 821B5734h */ case    4:  		/* li R11, 0 */
		/* 821B5734h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B5734h case    4:*/		return 0x821B5738;
		  /* 821B5738h */ case    5:  		/* b 16 */
		/* 821B5738h case    5:*/		return 0x821B5748;
		/* 821B5738h case    5:*/		return 0x821B573C;
	}
	return 0x821B573C;
} // Block from 821B5724h-821B573Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B573Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B573C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B573C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B573C);
		  /* 821B573Ch */ case    0:  		/* lwz R11, <#[R10]> */
		/* 821B573Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B573Ch case    0:*/		return 0x821B5740;
		  /* 821B5740h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5740h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5740h case    1:*/		return 0x821B5744;
		  /* 821B5744h */ case    2:  		/* addi R11, R11, -40 */
		/* 821B5744h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821B5744h case    2:*/		return 0x821B5748;
	}
	return 0x821B5748;
} // Block from 821B573Ch-821B5748h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5748);
		  /* 821B5748h */ case    0:  		/* cmplw CR6, R29, R11 */
		/* 821B5748h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B5748h case    0:*/		return 0x821B574C;
		  /* 821B574Ch */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 821B574Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821B56FC;  }
		/* 821B574Ch case    1:*/		return 0x821B5750;
		  /* 821B5750h */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 821B5750h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821B5750h case    2:*/		return 0x821B5754;
		  /* 821B5754h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5754h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5754h case    3:*/		return 0x821B5758;
		  /* 821B5758h */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 821B5758h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B5770;  }
		/* 821B5758h case    4:*/		return 0x821B575C;
		  /* 821B575Ch */ case    5:  		/* lwz R11, <#[R10]> */
		/* 821B575Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B575Ch case    5:*/		return 0x821B5760;
	}
	return 0x821B5760;
} // Block from 821B5748h-821B5760h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B5760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5760);
		  /* 821B5760h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5760h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5760h case    0:*/		return 0x821B5764;
	}
	return 0x821B5764;
} // Block from 821B5760h-821B5764h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B5764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5764);
		  /* 821B5764h */ case    0:  		/* addi R29, R11, -40 */
		/* 821B5764h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 821B5764h case    0:*/		return 0x821B5768;
		  /* 821B5768h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821B5768h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B5768h case    1:*/		return 0x821B576C;
		  /* 821B576Ch */ case    2:  		/* bc 4, CR6_EQ, -1248 */
		/* 821B576Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821B528C;  }
		/* 821B576Ch case    2:*/		return 0x821B5770;
	}
	return 0x821B5770;
} // Block from 821B5764h-821B5770h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5770);
		  /* 821B5770h */ case    0:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B5770h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5770h case    0:*/		return 0x821B5774;
		  /* 821B5774h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B5774h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B5774h case    1:*/		return 0x821B5778;
		  /* 821B5778h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B5778h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B5778h case    2:*/		return 0x821B577C;
		  /* 821B577Ch */ case    3:  		/* bc 4, CR0_EQ, 212 */
		/* 821B577Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B5850;  }
		/* 821B577Ch case    3:*/		return 0x821B5780;
		  /* 821B5780h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B5780h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B5780h case    4:*/		return 0x821B5784;
		  /* 821B5784h */ case    5:  		/* bc 12, CR0_EQ, 204 */
		/* 821B5784h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B5850;  }
		/* 821B5784h case    5:*/		return 0x821B5788;
		  /* 821B5788h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B5788h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B5788h case    6:*/		return 0x821B578C;
		  /* 821B578Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B578Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B578Ch case    7:*/		return 0x821B5790;
		  /* 821B5790h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821B5790h case    8:*/		if ( regs.CR[0].eq ) { return 0x821B579C;  }
		/* 821B5790h case    8:*/		return 0x821B5794;
		  /* 821B5794h */ case    9:  		/* li R4, 0 */
		/* 821B5794h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5794h case    9:*/		return 0x821B5798;
		  /* 821B5798h */ case   10:  		/* b 16 */
		/* 821B5798h case   10:*/		return 0x821B57A8;
		/* 821B5798h case   10:*/		return 0x821B579C;
	}
	return 0x821B579C;
} // Block from 821B5770h-821B579Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B579Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B579C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B579C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B579C);
		  /* 821B579Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B579Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B579Ch case    0:*/		return 0x821B57A0;
		  /* 821B57A0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B57A0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B57A0h case    1:*/		return 0x821B57A4;
		  /* 821B57A4h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B57A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B57A4h case    2:*/		return 0x821B57A8;
	}
	return 0x821B57A8;
} // Block from 821B579Ch-821B57A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B57A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B57A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B57A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B57A8);
		  /* 821B57A8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B57A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B57A8h case    0:*/		return 0x821B57AC;
		  /* 821B57ACh */ case    1:  		/* addi R10, R11, 3 */
		/* 821B57ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B57ACh case    1:*/		return 0x821B57B0;
		  /* 821B57B0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B57B0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B57B0h case    2:*/		return 0x821B57B4;
		  /* 821B57B4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B57B4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B57B4h case    3:*/		return 0x821B57B8;
		  /* 821B57B8h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B57B8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B57B8h case    4:*/		return 0x821B57BC;
		  /* 821B57BCh */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B57BCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B57BCh case    5:*/		return 0x821B57C0;
		  /* 821B57C0h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B57C0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B57F8;  }
		/* 821B57C0h case    6:*/		return 0x821B57C4;
		  /* 821B57C4h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B57C4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B57C4h case    7:*/		return 0x821B57C8;
		  /* 821B57C8h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B57C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B57C8h case    8:*/		return 0x821B57CC;
		  /* 821B57CCh */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B57CCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B57CCh case    9:*/		return 0x821B57D0;
		  /* 821B57D0h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B57D0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B57D0h case   10:*/		return 0x821B57D4;
		  /* 821B57D4h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B57D4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B57D4h case   11:*/		return 0x821B57D8;
		  /* 821B57D8h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B57D8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B57D8h case   12:*/		return 0x821B57DC;
		  /* 821B57DCh */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B57DCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B57DCh case   13:*/		return 0x821B57E0;
		  /* 821B57E0h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B57E0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B57E0h case   14:*/		return 0x821B57E4;
		  /* 821B57E4h */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B57E4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B57E4h case   15:*/		return 0x821B57E8;
		  /* 821B57E8h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B57E8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B57E8h case   16:*/		return 0x821B57EC;
		  /* 821B57ECh */ case   17:  		/* addi R11, R11, 4 */
		/* 821B57ECh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B57ECh case   17:*/		return 0x821B57F0;
		  /* 821B57F0h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B57F0h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B57F0h case   18:*/		return 0x821B57F4;
		  /* 821B57F4h */ case   19:  		/* bl -408044 */
		/* 821B57F4h case   19:*/		regs.LR = 0x821B57F8; return 0x82151E08;
		/* 821B57F4h case   19:*/		return 0x821B57F8;
	}
	return 0x821B57F8;
} // Block from 821B57A8h-821B57F8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B57F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B57F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B57F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B57F8);
		  /* 821B57F8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B57F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B57F8h case    0:*/		return 0x821B57FC;
		  /* 821B57FCh */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B57FCh case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B57FCh case    1:*/		return 0x821B5800;
		  /* 821B5800h */ case    2:  		/* rlwinm R30, R11, 25, 25, 31 */
		/* 821B5800h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R30,regs.R11);
		/* 821B5800h case    2:*/		return 0x821B5804;
		  /* 821B5804h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821B5804h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B5804h case    3:*/		return 0x821B5808;
		  /* 821B5808h */ case    4:  		/* cmplwi CR6, R30, 115 */
		/* 821B5808h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000073);
		/* 821B5808h case    4:*/		return 0x821B580C;
		  /* 821B580Ch */ case    5:  		/* bc 12, CR6_EQ, -156 */
		/* 821B580Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821B5770;  }
		/* 821B580Ch case    5:*/		return 0x821B5810;
		  /* 821B5810h */ case    6:  		/* mr R3, R31 */
		/* 821B5810h case    6:*/		regs.R3 = regs.R31;
		/* 821B5810h case    6:*/		return 0x821B5814;
		  /* 821B5814h */ case    7:  		/* bl -331412 */
		/* 821B5814h case    7:*/		regs.LR = 0x821B5818; return 0x82164980;
		/* 821B5814h case    7:*/		return 0x821B5818;
		  /* 821B5818h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5818h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5818h case    8:*/		return 0x821B581C;
		  /* 821B581Ch */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 821B581Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821B5838;  }
		/* 821B581Ch case    9:*/		return 0x821B5820;
		  /* 821B5820h */ case   10:  		/* li R6, 1 */
		/* 821B5820h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B5820h case   10:*/		return 0x821B5824;
		  /* 821B5824h */ case   11:  		/* li R5, 0 */
		/* 821B5824h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821B5824h case   11:*/		return 0x821B5828;
		  /* 821B5828h */ case   12:  		/* mr R4, R31 */
		/* 821B5828h case   12:*/		regs.R4 = regs.R31;
		/* 821B5828h case   12:*/		return 0x821B582C;
		  /* 821B582Ch */ case   13:  		/* mr R3, R14 */
		/* 821B582Ch case   13:*/		regs.R3 = regs.R14;
		/* 821B582Ch case   13:*/		return 0x821B5830;
		  /* 821B5830h */ case   14:  		/* bl 482200 */
		/* 821B5830h case   14:*/		regs.LR = 0x821B5834; return 0x8222B3C8;
		/* 821B5830h case   14:*/		return 0x821B5834;
		  /* 821B5834h */ case   15:  		/* b -196 */
		/* 821B5834h case   15:*/		return 0x821B5770;
		/* 821B5834h case   15:*/		return 0x821B5838;
	}
	return 0x821B5838;
} // Block from 821B57F8h-821B5838h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B5838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5838);
		  /* 821B5838h */ case    0:  		/* cmplwi CR6, R30, 110 */
		/* 821B5838h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000006E);
		/* 821B5838h case    0:*/		return 0x821B583C;
		  /* 821B583Ch */ case    1:  		/* bc 4, CR6_EQ, -204 */
		/* 821B583Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821B5770;  }
		/* 821B583Ch case    1:*/		return 0x821B5840;
		  /* 821B5840h */ case    2:  		/* mr R4, R31 */
		/* 821B5840h case    2:*/		regs.R4 = regs.R31;
		/* 821B5840h case    2:*/		return 0x821B5844;
		  /* 821B5844h */ case    3:  		/* mr R3, R14 */
		/* 821B5844h case    3:*/		regs.R3 = regs.R14;
		/* 821B5844h case    3:*/		return 0x821B5848;
		  /* 821B5848h */ case    4:  		/* bl -81384 */
		/* 821B5848h case    4:*/		regs.LR = 0x821B584C; return 0x821A1A60;
		/* 821B5848h case    4:*/		return 0x821B584C;
		  /* 821B584Ch */ case    5:  		/* b -220 */
		/* 821B584Ch case    5:*/		return 0x821B5770;
		/* 821B584Ch case    5:*/		return 0x821B5850;
	}
	return 0x821B5850;
} // Block from 821B5838h-821B5850h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B5850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5850);
		  /* 821B5850h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821B5850h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821B5850h case    0:*/		return 0x821B5854;
		  /* 821B5854h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821B5854h case    1:*/		if ( regs.CR[0].eq ) { return 0x821B5860;  }
		/* 821B5854h case    1:*/		return 0x821B5858;
		  /* 821B5858h */ case    2:  		/* li R11, 1 */
		/* 821B5858h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B5858h case    2:*/		return 0x821B585C;
		  /* 821B585Ch */ case    3:  		/* b -15836 */
		/* 821B585Ch case    3:*/		return 0x821B1A80;
		/* 821B585Ch case    3:*/		return 0x821B5860;
	}
	return 0x821B5860;
} // Block from 821B5850h-821B5860h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B5860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5860);
		  /* 821B5860h */ case    0:  		/* addi R11, R18, 24 */
		/* 821B5860h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x18);
		/* 821B5860h case    0:*/		return 0x821B5864;
		  /* 821B5864h */ case    1:  		/* lwz R11, <#[R18 + 28]> */
		/* 821B5864h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B5864h case    1:*/		return 0x821B5868;
		  /* 821B5868h */ case    2:  		/* li R15, 0 */
		/* 821B5868h case    2:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 821B5868h case    2:*/		return 0x821B586C;
		  /* 821B586Ch */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B586Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B586Ch case    3:*/		return 0x821B5870;
		  /* 821B5870h */ case    4:  		/* bc 4, CR0_EQ, 1836 */
		/* 821B5870h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B5F9C;  }
		/* 821B5870h case    4:*/		return 0x821B5874;
		  /* 821B5874h */ case    5:  		/* mr R25, R11 */
		/* 821B5874h case    5:*/		regs.R25 = regs.R11;
		/* 821B5874h case    5:*/		return 0x821B5878;
		  /* 821B5878h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821B5878h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B5878h case    6:*/		return 0x821B587C;
		  /* 821B587Ch */ case    7:  		/* bc 12, CR0_EQ, 1824 */
		/* 821B587Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821B5F9C;  }
		/* 821B587Ch case    7:*/		return 0x821B5880;
		  /* 821B5880h */ case    8:  		/* mr R4, R25 */
		/* 821B5880h case    8:*/		regs.R4 = regs.R25;
		/* 821B5880h case    8:*/		return 0x821B5884;
		  /* 821B5884h */ case    9:  		/* mr R3, R14 */
		/* 821B5884h case    9:*/		regs.R3 = regs.R14;
		/* 821B5884h case    9:*/		return 0x821B5888;
		  /* 821B5888h */ case   10:  		/* bl -102216 */
		/* 821B5888h case   10:*/		regs.LR = 0x821B588C; return 0x8219C940;
		/* 821B5888h case   10:*/		return 0x821B588C;
		  /* 821B588Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B588Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B588Ch case   11:*/		return 0x821B5890;
		  /* 821B5890h */ case   12:  		/* bc 4, CR0_EQ, 1692 */
		/* 821B5890h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5890h case   12:*/		return 0x821B5894;
		  /* 821B5894h */ case   13:  		/* lwz R11, <#[R25 + 8]> */
		/* 821B5894h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821B5894h case   13:*/		return 0x821B5898;
		  /* 821B5898h */ case   14:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821B5898h case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821B5898h case   14:*/		return 0x821B589C;
		  /* 821B589Ch */ case   15:  		/* cmpwi CR6, R11, 13 */
		/* 821B589Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 821B589Ch case   15:*/		return 0x821B58A0;
		  /* 821B58A0h */ case   16:  		/* bc 12, CR6_EQ, 308 */
		/* 821B58A0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821B59D4;  }
		/* 821B58A0h case   16:*/		return 0x821B58A4;
		  /* 821B58A4h */ case   17:  		/* cmpwi CR6, R11, 14 */
		/* 821B58A4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821B58A4h case   17:*/		return 0x821B58A8;
		  /* 821B58A8h */ case   18:  		/* bc 12, CR6_EQ, 164 */
		/* 821B58A8h case   18:*/		if ( regs.CR[6].eq ) { return 0x821B594C;  }
		/* 821B58A8h case   18:*/		return 0x821B58AC;
		  /* 821B58ACh */ case   19:  		/* cmpwi CR6, R11, 15 */
		/* 821B58ACh case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821B58ACh case   19:*/		return 0x821B58B0;
		  /* 821B58B0h */ case   20:  		/* bc 4, CR6_EQ, 1660 */
		/* 821B58B0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821B5F2C;  }
		/* 821B58B0h case   20:*/		return 0x821B58B4;
		  /* 821B58B4h */ case   21:  		/* lwz R3, <#[R25 + 48]> */
		/* 821B58B4h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821B58B4h case   21:*/		return 0x821B58B8;
		  /* 821B58B8h */ case   22:  		/* fmr FR1, FR28 */
		/* 821B58B8h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B58B8h case   22:*/		return 0x821B58BC;
		  /* 821B58BCh */ case   23:  		/* bl -326412 */
		/* 821B58BCh case   23:*/		regs.LR = 0x821B58C0; return 0x82165DB0;
		/* 821B58BCh case   23:*/		return 0x821B58C0;
		  /* 821B58C0h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B58C0h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B58C0h case   24:*/		return 0x821B58C4;
		  /* 821B58C4h */ case   25:  		/* bc 12, CR0_EQ, 52 */
		/* 821B58C4h case   25:*/		if ( regs.CR[0].eq ) { return 0x821B58F8;  }
		/* 821B58C4h case   25:*/		return 0x821B58C8;
		  /* 821B58C8h */ case   26:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B58C8h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B58C8h case   26:*/		return 0x821B58CC;
		  /* 821B58CCh */ case   27:  		/* fmr FR1, FR30 */
		/* 821B58CCh case   27:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B58CCh case   27:*/		return 0x821B58D0;
		  /* 821B58D0h */ case   28:  		/* bl -326432 */
		/* 821B58D0h case   28:*/		regs.LR = 0x821B58D4; return 0x82165DB0;
		/* 821B58D0h case   28:*/		return 0x821B58D4;
		  /* 821B58D4h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B58D4h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B58D4h case   29:*/		return 0x821B58D8;
		  /* 821B58D8h */ case   30:  		/* bc 12, CR0_EQ, 32 */
		/* 821B58D8h case   30:*/		if ( regs.CR[0].eq ) { return 0x821B58F8;  }
		/* 821B58D8h case   30:*/		return 0x821B58DC;
		  /* 821B58DCh */ case   31:  		/* mr R5, R25 */
		/* 821B58DCh case   31:*/		regs.R5 = regs.R25;
		/* 821B58DCh case   31:*/		return 0x821B58E0;
		  /* 821B58E0h */ case   32:  		/* lwz R7, <#[R25 + 52]> */
		/* 821B58E0h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000034) );
		/* 821B58E0h case   32:*/		return 0x821B58E4;
		  /* 821B58E4h */ case   33:  		/* li R4, 0 */
		/* 821B58E4h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B58E4h case   33:*/		return 0x821B58E8;
		  /* 821B58E8h */ case   34:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B58E8h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B58E8h case   34:*/		return 0x821B58EC;
		  /* 821B58ECh */ case   35:  		/* mr R3, R14 */
		/* 821B58ECh case   35:*/		regs.R3 = regs.R14;
		/* 821B58ECh case   35:*/		return 0x821B58F0;
		  /* 821B58F0h */ case   36:  		/* bl -126160 */
		/* 821B58F0h case   36:*/		regs.LR = 0x821B58F4; return 0x82196C20;
		/* 821B58F0h case   36:*/		return 0x821B58F4;
		  /* 821B58F4h */ case   37:  		/* b 360 */
		/* 821B58F4h case   37:*/		return 0x821B5A5C;
		/* 821B58F4h case   37:*/		return 0x821B58F8;
	}
	return 0x821B58F8;
} // Block from 821B5860h-821B58F8h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821B58F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B58F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B58F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B58F8);
		  /* 821B58F8h */ case    0:  		/* lwz R3, <#[R25 + 48]> */
		/* 821B58F8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821B58F8h case    0:*/		return 0x821B58FC;
		  /* 821B58FCh */ case    1:  		/* fmr FR1, FR30 */
		/* 821B58FCh case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B58FCh case    1:*/		return 0x821B5900;
		  /* 821B5900h */ case    2:  		/* bl -326480 */
		/* 821B5900h case    2:*/		regs.LR = 0x821B5904; return 0x82165DB0;
		/* 821B5900h case    2:*/		return 0x821B5904;
		  /* 821B5904h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5904h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5904h case    3:*/		return 0x821B5908;
		  /* 821B5908h */ case    4:  		/* bc 12, CR0_EQ, 1572 */
		/* 821B5908h case    4:*/		if ( regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5908h case    4:*/		return 0x821B590C;
		  /* 821B590Ch */ case    5:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B590Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B590Ch case    5:*/		return 0x821B5910;
		  /* 821B5910h */ case    6:  		/* fmr FR1, FR28 */
		/* 821B5910h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B5910h case    6:*/		return 0x821B5914;
		  /* 821B5914h */ case    7:  		/* bl -326500 */
		/* 821B5914h case    7:*/		regs.LR = 0x821B5918; return 0x82165DB0;
		/* 821B5914h case    7:*/		return 0x821B5918;
		  /* 821B5918h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5918h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5918h case    8:*/		return 0x821B591C;
		  /* 821B591Ch */ case    9:  		/* bc 12, CR0_EQ, 1552 */
		/* 821B591Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B591Ch case    9:*/		return 0x821B5920;
		  /* 821B5920h */ case   10:  		/* mr R5, R25 */
		/* 821B5920h case   10:*/		regs.R5 = regs.R25;
		/* 821B5920h case   10:*/		return 0x821B5924;
		  /* 821B5924h */ case   11:  		/* lwz R7, <#[R25 + 48]> */
		/* 821B5924h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000030) );
		/* 821B5924h case   11:*/		return 0x821B5928;
		  /* 821B5928h */ case   12:  		/* li R4, 0 */
		/* 821B5928h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5928h case   12:*/		return 0x821B592C;
		  /* 821B592Ch */ case   13:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B592Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B592Ch case   13:*/		return 0x821B5930;
		  /* 821B5930h */ case   14:  		/* mr R3, R14 */
		/* 821B5930h case   14:*/		regs.R3 = regs.R14;
		/* 821B5930h case   14:*/		return 0x821B5934;
		  /* 821B5934h */ case   15:  		/* bl -126020 */
		/* 821B5934h case   15:*/		regs.LR = 0x821B5938; return 0x82196CF0;
		/* 821B5934h case   15:*/		return 0x821B5938;
		  /* 821B5938h */ case   16:  		/* li R4, 4 */
		/* 821B5938h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821B5938h case   16:*/		return 0x821B593C;
		  /* 821B593Ch */ case   17:  		/* mr R31, R3 */
		/* 821B593Ch case   17:*/		regs.R31 = regs.R3;
		/* 821B593Ch case   17:*/		return 0x821B5940;
		  /* 821B5940h */ case   18:  		/* lwz R3, <#[R3 + 44]> */
		/* 821B5940h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000002C) );
		/* 821B5940h case   18:*/		return 0x821B5944;
		  /* 821B5944h */ case   19:  		/* bl -253572 */
		/* 821B5944h case   19:*/		regs.LR = 0x821B5948; return 0x82177AC0;
		/* 821B5944h case   19:*/		return 0x821B5948;
		  /* 821B5948h */ case   20:  		/* b 280 */
		/* 821B5948h case   20:*/		return 0x821B5A60;
		/* 821B5948h case   20:*/		return 0x821B594C;
	}
	return 0x821B594C;
} // Block from 821B58F8h-821B594Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821B594Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B594C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B594C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B594C);
		  /* 821B594Ch */ case    0:  		/* lwz R3, <#[R25 + 48]> */
		/* 821B594Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821B594Ch case    0:*/		return 0x821B5950;
		  /* 821B5950h */ case    1:  		/* fmr FR1, FR28 */
		/* 821B5950h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B5950h case    1:*/		return 0x821B5954;
		  /* 821B5954h */ case    2:  		/* bl -326564 */
		/* 821B5954h case    2:*/		regs.LR = 0x821B5958; return 0x82165DB0;
		/* 821B5954h case    2:*/		return 0x821B5958;
		  /* 821B5958h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5958h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5958h case    3:*/		return 0x821B595C;
		  /* 821B595Ch */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 821B595Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821B5990;  }
		/* 821B595Ch case    4:*/		return 0x821B5960;
		  /* 821B5960h */ case    5:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B5960h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B5960h case    5:*/		return 0x821B5964;
		  /* 821B5964h */ case    6:  		/* fmr FR1, FR30 */
		/* 821B5964h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B5964h case    6:*/		return 0x821B5968;
		  /* 821B5968h */ case    7:  		/* bl -326584 */
		/* 821B5968h case    7:*/		regs.LR = 0x821B596C; return 0x82165DB0;
		/* 821B5968h case    7:*/		return 0x821B596C;
		  /* 821B596Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B596Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B596Ch case    8:*/		return 0x821B5970;
		  /* 821B5970h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821B5970h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B5990;  }
		/* 821B5970h case    9:*/		return 0x821B5974;
		  /* 821B5974h */ case   10:  		/* mr R5, R25 */
		/* 821B5974h case   10:*/		regs.R5 = regs.R25;
		/* 821B5974h case   10:*/		return 0x821B5978;
		  /* 821B5978h */ case   11:  		/* lwz R7, <#[R25 + 52]> */
		/* 821B5978h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000034) );
		/* 821B5978h case   11:*/		return 0x821B597C;
		  /* 821B597Ch */ case   12:  		/* li R4, 0 */
		/* 821B597Ch case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B597Ch case   12:*/		return 0x821B5980;
		  /* 821B5980h */ case   13:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B5980h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B5980h case   13:*/		return 0x821B5984;
		  /* 821B5984h */ case   14:  		/* mr R3, R14 */
		/* 821B5984h case   14:*/		regs.R3 = regs.R14;
		/* 821B5984h case   14:*/		return 0x821B5988;
		  /* 821B5988h */ case   15:  		/* bl -126104 */
		/* 821B5988h case   15:*/		regs.LR = 0x821B598C; return 0x82196CF0;
		/* 821B5988h case   15:*/		return 0x821B598C;
		  /* 821B598Ch */ case   16:  		/* b 208 */
		/* 821B598Ch case   16:*/		return 0x821B5A5C;
		/* 821B598Ch case   16:*/		return 0x821B5990;
	}
	return 0x821B5990;
} // Block from 821B594Ch-821B5990h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B5990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5990);
		  /* 821B5990h */ case    0:  		/* lwz R3, <#[R25 + 48]> */
		/* 821B5990h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821B5990h case    0:*/		return 0x821B5994;
		  /* 821B5994h */ case    1:  		/* fmr FR1, FR30 */
		/* 821B5994h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B5994h case    1:*/		return 0x821B5998;
		  /* 821B5998h */ case    2:  		/* bl -326632 */
		/* 821B5998h case    2:*/		regs.LR = 0x821B599C; return 0x82165DB0;
		/* 821B5998h case    2:*/		return 0x821B599C;
		  /* 821B599Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B599Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B599Ch case    3:*/		return 0x821B59A0;
		  /* 821B59A0h */ case    4:  		/* bc 12, CR0_EQ, 1420 */
		/* 821B59A0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B59A0h case    4:*/		return 0x821B59A4;
		  /* 821B59A4h */ case    5:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B59A4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B59A4h case    5:*/		return 0x821B59A8;
		  /* 821B59A8h */ case    6:  		/* fmr FR1, FR28 */
		/* 821B59A8h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B59A8h case    6:*/		return 0x821B59AC;
		  /* 821B59ACh */ case    7:  		/* bl -326652 */
		/* 821B59ACh case    7:*/		regs.LR = 0x821B59B0; return 0x82165DB0;
		/* 821B59ACh case    7:*/		return 0x821B59B0;
		  /* 821B59B0h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B59B0h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B59B0h case    8:*/		return 0x821B59B4;
		  /* 821B59B4h */ case    9:  		/* bc 12, CR0_EQ, 1400 */
		/* 821B59B4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B59B4h case    9:*/		return 0x821B59B8;
		  /* 821B59B8h */ case   10:  		/* mr R5, R25 */
		/* 821B59B8h case   10:*/		regs.R5 = regs.R25;
		/* 821B59B8h case   10:*/		return 0x821B59BC;
		  /* 821B59BCh */ case   11:  		/* lwz R7, <#[R25 + 48]> */
		/* 821B59BCh case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000030) );
		/* 821B59BCh case   11:*/		return 0x821B59C0;
		  /* 821B59C0h */ case   12:  		/* li R4, 0 */
		/* 821B59C0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B59C0h case   12:*/		return 0x821B59C4;
		  /* 821B59C4h */ case   13:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B59C4h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B59C4h case   13:*/		return 0x821B59C8;
		  /* 821B59C8h */ case   14:  		/* mr R3, R14 */
		/* 821B59C8h case   14:*/		regs.R3 = regs.R14;
		/* 821B59C8h case   14:*/		return 0x821B59CC;
		  /* 821B59CCh */ case   15:  		/* bl -126380 */
		/* 821B59CCh case   15:*/		regs.LR = 0x821B59D0; return 0x82196C20;
		/* 821B59CCh case   15:*/		return 0x821B59D0;
		  /* 821B59D0h */ case   16:  		/* b -152 */
		/* 821B59D0h case   16:*/		return 0x821B5938;
		/* 821B59D0h case   16:*/		return 0x821B59D4;
	}
	return 0x821B59D4;
} // Block from 821B5990h-821B59D4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B59D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B59D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B59D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B59D4);
		  /* 821B59D4h */ case    0:  		/* lwz R3, <#[R25 + 48]> */
		/* 821B59D4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821B59D4h case    0:*/		return 0x821B59D8;
		  /* 821B59D8h */ case    1:  		/* addi R30, R25, 48 */
		/* 821B59D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x30);
		/* 821B59D8h case    1:*/		return 0x821B59DC;
		  /* 821B59DCh */ case    2:  		/* fmr FR1, FR28 */
		/* 821B59DCh case    2:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B59DCh case    2:*/		return 0x821B59E0;
		  /* 821B59E0h */ case    3:  		/* bl -326704 */
		/* 821B59E0h case    3:*/		regs.LR = 0x821B59E4; return 0x82165DB0;
		/* 821B59E0h case    3:*/		return 0x821B59E4;
		  /* 821B59E4h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B59E4h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B59E4h case    4:*/		return 0x821B59E8;
		  /* 821B59E8h */ case    5:  		/* bc 12, CR0_EQ, 52 */
		/* 821B59E8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B5A1C;  }
		/* 821B59E8h case    5:*/		return 0x821B59EC;
		  /* 821B59ECh */ case    6:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B59ECh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B59ECh case    6:*/		return 0x821B59F0;
		  /* 821B59F0h */ case    7:  		/* fmr FR1, FR30 */
		/* 821B59F0h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B59F0h case    7:*/		return 0x821B59F4;
		  /* 821B59F4h */ case    8:  		/* bl -326724 */
		/* 821B59F4h case    8:*/		regs.LR = 0x821B59F8; return 0x82165DB0;
		/* 821B59F4h case    8:*/		return 0x821B59F8;
		  /* 821B59F8h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B59F8h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B59F8h case    9:*/		return 0x821B59FC;
		  /* 821B59FCh */ case   10:  		/* bc 12, CR0_EQ, 32 */
		/* 821B59FCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821B5A1C;  }
		/* 821B59FCh case   10:*/		return 0x821B5A00;
		  /* 821B5A00h */ case   11:  		/* mr R5, R25 */
		/* 821B5A00h case   11:*/		regs.R5 = regs.R25;
		/* 821B5A00h case   11:*/		return 0x821B5A04;
		  /* 821B5A04h */ case   12:  		/* lwz R7, <#[R25 + 52]> */
		/* 821B5A04h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000034) );
		/* 821B5A04h case   12:*/		return 0x821B5A08;
		  /* 821B5A08h */ case   13:  		/* li R4, 0 */
		/* 821B5A08h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5A08h case   13:*/		return 0x821B5A0C;
		  /* 821B5A0Ch */ case   14:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B5A0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B5A0Ch case   14:*/		return 0x821B5A10;
		  /* 821B5A10h */ case   15:  		/* mr R3, R14 */
		/* 821B5A10h case   15:*/		regs.R3 = regs.R14;
		/* 821B5A10h case   15:*/		return 0x821B5A14;
		  /* 821B5A14h */ case   16:  		/* bl -96700 */
		/* 821B5A14h case   16:*/		regs.LR = 0x821B5A18; return 0x8219E058;
		/* 821B5A14h case   16:*/		return 0x821B5A18;
		  /* 821B5A18h */ case   17:  		/* b 68 */
		/* 821B5A18h case   17:*/		return 0x821B5A5C;
		/* 821B5A18h case   17:*/		return 0x821B5A1C;
	}
	return 0x821B5A1C;
} // Block from 821B59D4h-821B5A1Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821B5A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5A1C);
		  /* 821B5A1Ch */ case    0:  		/* lwz R3, <#[R30]> */
		/* 821B5A1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821B5A1Ch case    0:*/		return 0x821B5A20;
		  /* 821B5A20h */ case    1:  		/* fmr FR1, FR30 */
		/* 821B5A20h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821B5A20h case    1:*/		return 0x821B5A24;
		  /* 821B5A24h */ case    2:  		/* bl -326772 */
		/* 821B5A24h case    2:*/		regs.LR = 0x821B5A28; return 0x82165DB0;
		/* 821B5A24h case    2:*/		return 0x821B5A28;
		  /* 821B5A28h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5A28h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5A28h case    3:*/		return 0x821B5A2C;
		  /* 821B5A2Ch */ case    4:  		/* bc 12, CR0_EQ, 116 */
		/* 821B5A2Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821B5AA0;  }
		/* 821B5A2Ch case    4:*/		return 0x821B5A30;
		  /* 821B5A30h */ case    5:  		/* lwz R3, <#[R25 + 52]> */
		/* 821B5A30h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821B5A30h case    5:*/		return 0x821B5A34;
		  /* 821B5A34h */ case    6:  		/* fmr FR1, FR28 */
		/* 821B5A34h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821B5A34h case    6:*/		return 0x821B5A38;
		  /* 821B5A38h */ case    7:  		/* bl -326792 */
		/* 821B5A38h case    7:*/		regs.LR = 0x821B5A3C; return 0x82165DB0;
		/* 821B5A38h case    7:*/		return 0x821B5A3C;
		  /* 821B5A3Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B5A3Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B5A3Ch case    8:*/		return 0x821B5A40;
		  /* 821B5A40h */ case    9:  		/* bc 12, CR0_EQ, 96 */
		/* 821B5A40h case    9:*/		if ( regs.CR[0].eq ) { return 0x821B5AA0;  }
		/* 821B5A40h case    9:*/		return 0x821B5A44;
		  /* 821B5A44h */ case   10:  		/* mr R5, R25 */
		/* 821B5A44h case   10:*/		regs.R5 = regs.R25;
		/* 821B5A44h case   10:*/		return 0x821B5A48;
		  /* 821B5A48h */ case   11:  		/* lwz R7, <#[R30]> */
		/* 821B5A48h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821B5A48h case   11:*/		return 0x821B5A4C;
		  /* 821B5A4Ch */ case   12:  		/* li R4, 0 */
		/* 821B5A4Ch case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5A4Ch case   12:*/		return 0x821B5A50;
		  /* 821B5A50h */ case   13:  		/* lwz R6, <#[R25 + 44]> */
		/* 821B5A50h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B5A50h case   13:*/		return 0x821B5A54;
		  /* 821B5A54h */ case   14:  		/* mr R3, R14 */
		/* 821B5A54h case   14:*/		regs.R3 = regs.R14;
		/* 821B5A54h case   14:*/		return 0x821B5A58;
		  /* 821B5A58h */ case   15:  		/* bl -96560 */
		/* 821B5A58h case   15:*/		regs.LR = 0x821B5A5C; return 0x8219E128;
		/* 821B5A58h case   15:*/		return 0x821B5A5C;
	}
	return 0x821B5A5C;
} // Block from 821B5A1Ch-821B5A5Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821B5A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5A5C);
		  /* 821B5A5Ch */ case    0:  		/* mr R31, R3 */
		/* 821B5A5Ch case    0:*/		regs.R31 = regs.R3;
		/* 821B5A5Ch case    0:*/		return 0x821B5A60;
	}
	return 0x821B5A60;
} // Block from 821B5A5Ch-821B5A60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B5A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5A60);
		  /* 821B5A60h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821B5A60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821B5A60h case    0:*/		return 0x821B5A64;
		  /* 821B5A64h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5A64h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5A64h case    1:*/		return 0x821B5A68;
		  /* 821B5A68h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821B5A68h case    2:*/		if ( regs.CR[0].eq ) { return 0x821B5A78;  }
		/* 821B5A68h case    2:*/		return 0x821B5A6C;
		  /* 821B5A6Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B5A6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B5A6Ch case    3:*/		return 0x821B5A70;
		  /* 821B5A70h */ case    4:  		/* ori R11, R11, 1 */
		/* 821B5A70h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821B5A70h case    4:*/		return 0x821B5A74;
		  /* 821B5A74h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821B5A74h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B5A74h case    5:*/		return 0x821B5A78;
	}
	return 0x821B5A78;
} // Block from 821B5A60h-821B5A78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B5A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5A78);
		  /* 821B5A78h */ case    0:  		/* li R6, 228 */
		/* 821B5A78h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821B5A78h case    0:*/		return 0x821B5A7C;
		  /* 821B5A7Ch */ case    1:  		/* lwz R7, <#[R14 + 652]> */
		/* 821B5A7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5A7Ch case    1:*/		return 0x821B5A80;
		  /* 821B5A80h */ case    2:  		/* mr R5, R31 */
		/* 821B5A80h case    2:*/		regs.R5 = regs.R31;
		/* 821B5A80h case    2:*/		return 0x821B5A84;
		  /* 821B5A84h */ case    3:  		/* mr R4, R25 */
		/* 821B5A84h case    3:*/		regs.R4 = regs.R25;
		/* 821B5A84h case    3:*/		return 0x821B5A88;
		  /* 821B5A88h */ case    4:  		/* mr R3, R14 */
		/* 821B5A88h case    4:*/		regs.R3 = regs.R14;
		/* 821B5A88h case    4:*/		return 0x821B5A8C;
		  /* 821B5A8Ch */ case    5:  		/* bl -69812 */
		/* 821B5A8Ch case    5:*/		regs.LR = 0x821B5A90; return 0x821A49D8;
		/* 821B5A8Ch case    5:*/		return 0x821B5A90;
		  /* 821B5A90h */ case    6:  		/* mr R4, R31 */
		/* 821B5A90h case    6:*/		regs.R4 = regs.R31;
		/* 821B5A90h case    6:*/		return 0x821B5A94;
		  /* 821B5A94h */ case    7:  		/* mr R3, R14 */
		/* 821B5A94h case    7:*/		regs.R3 = regs.R14;
		/* 821B5A94h case    7:*/		return 0x821B5A98;
		  /* 821B5A98h */ case    8:  		/* bl -85984 */
		/* 821B5A98h case    8:*/		regs.LR = 0x821B5A9C; return 0x821A0AB8;
		/* 821B5A98h case    8:*/		return 0x821B5A9C;
		  /* 821B5A9Ch */ case    9:  		/* b 1168 */
		/* 821B5A9Ch case    9:*/		return 0x821B5F2C;
		/* 821B5A9Ch case    9:*/		return 0x821B5AA0;
	}
	return 0x821B5AA0;
} // Block from 821B5A78h-821B5AA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821B5AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5AA0);
		  /* 821B5AA0h */ case    0:  		/* lwz R31, <#[R25 + 8]> */
		/* 821B5AA0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000008) );
		/* 821B5AA0h case    0:*/		return 0x821B5AA4;
		  /* 821B5AA4h */ case    1:  		/* rlwinm. R11, R31, 27, 31, 31 */
		/* 821B5AA4h case    1:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R31);
		/* 821B5AA4h case    1:*/		return 0x821B5AA8;
		  /* 821B5AA8h */ case    2:  		/* bc 4, CR0_EQ, 1156 */
		/* 821B5AA8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5AA8h case    2:*/		return 0x821B5AAC;
		  /* 821B5AACh */ case    3:  		/* rlwinm. R11, R31, 7, 31, 31 */
		/* 821B5AACh case    3:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R31);
		/* 821B5AACh case    3:*/		return 0x821B5AB0;
		  /* 821B5AB0h */ case    4:  		/* bc 4, CR0_EQ, 1148 */
		/* 821B5AB0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5AB0h case    4:*/		return 0x821B5AB4;
		  /* 821B5AB4h */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821B5AB4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821B5AB4h case    5:*/		return 0x821B5AB8;
		  /* 821B5AB8h */ case    6:  		/* bc 4, CR0_EQ, 1140 */
		/* 821B5AB8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5AB8h case    6:*/		return 0x821B5ABC;
		  /* 821B5ABCh */ case    7:  		/* mr R3, R25 */
		/* 821B5ABCh case    7:*/		regs.R3 = regs.R25;
		/* 821B5ABCh case    7:*/		return 0x821B5AC0;
		  /* 821B5AC0h */ case    8:  		/* bl -258624 */
		/* 821B5AC0h case    8:*/		regs.LR = 0x821B5AC4; return 0x82176880;
		/* 821B5AC0h case    8:*/		return 0x821B5AC4;
		  /* 821B5AC4h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821B5AC4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B5AC4h case    9:*/		return 0x821B5AC8;
		  /* 821B5AC8h */ case   10:  		/* bc 4, CR0_EQ, 1124 */
		/* 821B5AC8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5AC8h case   10:*/		return 0x821B5ACC;
		  /* 821B5ACCh */ case   11:  		/* rlwinm. R11, R31, 9, 31, 31 */
		/* 821B5ACCh case   11:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R31);
		/* 821B5ACCh case   11:*/		return 0x821B5AD0;
		  /* 821B5AD0h */ case   12:  		/* bc 4, CR0_EQ, 1116 */
		/* 821B5AD0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821B5F2C;  }
		/* 821B5AD0h case   12:*/		return 0x821B5AD4;
		  /* 821B5AD4h */ case   13:  		/* lwz R17, <#[R25 + 44]> */
		/* 821B5AD4h case   13:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R25 + 0x0000002C) );
		/* 821B5AD4h case   13:*/		return 0x821B5AD8;
		  /* 821B5AD8h */ case   14:  		/* lwz R16, <#[R17 + 12]> */
		/* 821B5AD8h case   14:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R17 + 0x0000000C) );
		/* 821B5AD8h case   14:*/		return 0x821B5ADC;
		  /* 821B5ADCh */ case   15:  		/* lwz R11, <#[R16 + 8]> */
		/* 821B5ADCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821B5ADCh case   15:*/		return 0x821B5AE0;
		  /* 821B5AE0h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B5AE0h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B5AE0h case   16:*/		return 0x821B5AE4;
		  /* 821B5AE4h */ case   17:  		/* cmplwi CR6, R11, 16000 */
		/* 821B5AE4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821B5AE4h case   17:*/		return 0x821B5AE8;
		  /* 821B5AE8h */ case   18:  		/* bc 4, CR6_EQ, 1092 */
		/* 821B5AE8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821B5F2C;  }
		/* 821B5AE8h case   18:*/		return 0x821B5AEC;
		  /* 821B5AECh */ case   19:  		/* li R20, 1 */
		/* 821B5AECh case   19:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 821B5AECh case   19:*/		return 0x821B5AF0;
		  /* 821B5AF0h */ case   20:  		/* mr R22, R30 */
		/* 821B5AF0h case   20:*/		regs.R22 = regs.R30;
		/* 821B5AF0h case   20:*/		return 0x821B5AF4;
		  /* 821B5AF4h */ case   21:  		/* addi R21, R25, 52 */
		/* 821B5AF4h case   21:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R25,0x34);
		/* 821B5AF4h case   21:*/		return 0x821B5AF8;
		  /* 821B5AF8h */ case   22:  		/* lwz R19, <#[R21]> */
		/* 821B5AF8h case   22:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R21 + 0x00000000) );
		/* 821B5AF8h case   22:*/		return 0x821B5AFC;
		  /* 821B5AFCh */ case   23:  		/* lwz R23, <#[R22]> */
		/* 821B5AFCh case   23:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R22 + 0x00000000) );
		/* 821B5AFCh case   23:*/		return 0x821B5B00;
		  /* 821B5B00h */ case   24:  		/* lwz R11, <#[R19]> */
		/* 821B5B00h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821B5B00h case   24:*/		return 0x821B5B04;
		  /* 821B5B04h */ case   25:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821B5B04h case   25:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821B5B04h case   25:*/		return 0x821B5B08;
		  /* 821B5B08h */ case   26:  		/* bc 4, CR0_EQ, 492 */
		/* 821B5B08h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821B5CF4;  }
		/* 821B5B08h case   26:*/		return 0x821B5B0C;
		  /* 821B5B0Ch */ case   27:  		/* lwz R26, <#[R19 + 12]> */
		/* 821B5B0Ch case   27:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R19 + 0x0000000C) );
		/* 821B5B0Ch case   27:*/		return 0x821B5B10;
		  /* 821B5B10h */ case   28:  		/* lwz R11, <#[R26 + 28]> */
		/* 821B5B10h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821B5B10h case   28:*/		return 0x821B5B14;
		  /* 821B5B14h */ case   29:  		/* cmplw CR6, R11, R18 */
		/* 821B5B14h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821B5B14h case   29:*/		return 0x821B5B18;
		  /* 821B5B18h */ case   30:  		/* bc 4, CR6_EQ, 476 */
		/* 821B5B18h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821B5CF4;  }
		/* 821B5B18h case   30:*/		return 0x821B5B1C;
		  /* 821B5B1Ch */ case   31:  		/* lwz R9, <#[R26 + 8]> */
		/* 821B5B1Ch case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5B1Ch case   31:*/		return 0x821B5B20;
		  /* 821B5B20h */ case   32:  		/* rlwinm R10, R9, 25, 25, 31 */
		/* 821B5B20h case   32:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R9);
		/* 821B5B20h case   32:*/		return 0x821B5B24;
		  /* 821B5B24h */ case   33:  		/* cmplwi CR6, R10, 125 */
		/* 821B5B24h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821B5B24h case   33:*/		return 0x821B5B28;
		  /* 821B5B28h */ case   34:  		/* bc 12, CR6_EQ, 16 */
		/* 821B5B28h case   34:*/		if ( regs.CR[6].eq ) { return 0x821B5B38;  }
		/* 821B5B28h case   34:*/		return 0x821B5B2C;
		  /* 821B5B2Ch */ case   35:  		/* cmplwi CR6, R10, 124 */
		/* 821B5B2Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821B5B2Ch case   35:*/		return 0x821B5B30;
		  /* 821B5B30h */ case   36:  		/* li R11, 0 */
		/* 821B5B30h case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B5B30h case   36:*/		return 0x821B5B34;
		  /* 821B5B34h */ case   37:  		/* bc 4, CR6_EQ, 8 */
		/* 821B5B34h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821B5B3C;  }
		/* 821B5B34h case   37:*/		return 0x821B5B38;
	}
	return 0x821B5B38;
} // Block from 821B5AA0h-821B5B38h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821B5B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5B38);
		  /* 821B5B38h */ case    0:  		/* li R11, 1 */
		/* 821B5B38h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B5B38h case    0:*/		return 0x821B5B3C;
	}
	return 0x821B5B3C;
} // Block from 821B5B38h-821B5B3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821B5B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5B3C);
		  /* 821B5B3Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821B5B3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821B5B3Ch case    0:*/		return 0x821B5B40;
		  /* 821B5B40h */ case    1:  		/* bc 4, CR0_EQ, 436 */
		/* 821B5B40h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B5CF4;  }
		/* 821B5B40h case    1:*/		return 0x821B5B44;
		  /* 821B5B44h */ case    2:  		/* cmplwi CR6, R10, 110 */
		/* 821B5B44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000006E);
		/* 821B5B44h case    2:*/		return 0x821B5B48;
		  /* 821B5B48h */ case    3:  		/* bc 12, CR6_EQ, 428 */
		/* 821B5B48h case    3:*/		if ( regs.CR[6].eq ) { return 0x821B5CF4;  }
		/* 821B5B48h case    3:*/		return 0x821B5B4C;
		  /* 821B5B4Ch */ case    4:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B5B4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5B4Ch case    4:*/		return 0x821B5B50;
		  /* 821B5B50h */ case    5:  		/* li R10, 1 */
		/* 821B5B50h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821B5B50h case    5:*/		return 0x821B5B54;
		  /* 821B5B54h */ case    6:  		/* rlwinm R8, R11, 18, 29, 31 */
		/* 821B5B54h case    6:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R8,regs.R11);
		/* 821B5B54h case    6:*/		return 0x821B5B58;
		  /* 821B5B58h */ case    7:  		/* rlwinm R7, R11, 31, 28, 31 */
		/* 821B5B58h case    7:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R7,regs.R11);
		/* 821B5B58h case    7:*/		return 0x821B5B5C;
		  /* 821B5B5Ch */ case    8:  		/* slw R11, R10, R8 */
		/* 821B5B5Ch case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R8);
		/* 821B5B5Ch case    8:*/		return 0x821B5B60;
		  /* 821B5B60h */ case    9:  		/* addi R11, R11, -1 */
		/* 821B5B60h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B5B60h case    9:*/		return 0x821B5B64;
		  /* 821B5B64h */ case   10:  		/* cmplw CR6, R7, R11 */
		/* 821B5B64h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821B5B64h case   10:*/		return 0x821B5B68;
		  /* 821B5B68h */ case   11:  		/* bc 4, CR6_EQ, 396 */
		/* 821B5B68h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821B5CF4;  }
		/* 821B5B68h case   11:*/		return 0x821B5B6C;
		  /* 821B5B6Ch */ case   12:  		/* lwz R24, <#[R23 + 12]> */
		/* 821B5B6Ch case   12:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000000C) );
		/* 821B5B6Ch case   12:*/		return 0x821B5B70;
		  /* 821B5B70h */ case   13:  		/* lwz R11, <#[R24 + 8]> */
		/* 821B5B70h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821B5B70h case   13:*/		return 0x821B5B74;
		  /* 821B5B74h */ case   14:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821B5B74h case   14:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5B74h case   14:*/		return 0x821B5B78;
		  /* 821B5B78h */ case   15:  		/* bc 12, CR0_EQ, 52 */
		/* 821B5B78h case   15:*/		if ( regs.CR[0].eq ) { return 0x821B5BAC;  }
		/* 821B5B78h case   15:*/		return 0x821B5B7C;
		  /* 821B5B7Ch */ case   16:  		/* rlwinm. R11, R9, 9, 31, 31 */
		/* 821B5B7Ch case   16:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R9);
		/* 821B5B7Ch case   16:*/		return 0x821B5B80;
		  /* 821B5B80h */ case   17:  		/* bc 4, CR0_EQ, 372 */
		/* 821B5B80h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821B5CF4;  }
		/* 821B5B80h case   17:*/		return 0x821B5B84;
		  /* 821B5B84h */ case   18:  		/* mr R4, R24 */
		/* 821B5B84h case   18:*/		regs.R4 = regs.R24;
		/* 821B5B84h case   18:*/		return 0x821B5B88;
		  /* 821B5B88h */ case   19:  		/* mr R3, R14 */
		/* 821B5B88h case   19:*/		regs.R3 = regs.R14;
		/* 821B5B88h case   19:*/		return 0x821B5B8C;
		  /* 821B5B8Ch */ case   20:  		/* bl -203700 */
		/* 821B5B8Ch case   20:*/		regs.LR = 0x821B5B90; return 0x82183FD8;
		/* 821B5B8Ch case   20:*/		return 0x821B5B90;
		  /* 821B5B90h */ case   21:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B5B90h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5B90h case   21:*/		return 0x821B5B94;
		  /* 821B5B94h */ case   22:  		/* lwz R9, <#[R3 + 192]> */
		/* 821B5B94h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x000000C0) );
		/* 821B5B94h case   22:*/		return 0x821B5B98;
		  /* 821B5B98h */ case   23:  		/* rlwinm R10, R11, 18, 29, 31 */
		/* 821B5B98h case   23:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R11);
		/* 821B5B98h case   23:*/		return 0x821B5B9C;
		  /* 821B5B9Ch */ case   24:  		/* rlwinm R11, R9, 0, 29, 31 */
		/* 821B5B9Ch case   24:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R9);
		/* 821B5B9Ch case   24:*/		return 0x821B5BA0;
		  /* 821B5BA0h */ case   25:  		/* add R11, R10, R11 */
		/* 821B5BA0h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821B5BA0h case   25:*/		return 0x821B5BA4;
		  /* 821B5BA4h */ case   26:  		/* cmplwi CR6, R11, 4 */
		/* 821B5BA4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821B5BA4h case   26:*/		return 0x821B5BA8;
		  /* 821B5BA8h */ case   27:  		/* bc 12, CR6_GT, 332 */
		/* 821B5BA8h case   27:*/		if ( regs.CR[6].gt ) { return 0x821B5CF4;  }
		/* 821B5BA8h case   27:*/		return 0x821B5BAC;
	}
	return 0x821B5BAC;
} // Block from 821B5B3Ch-821B5BACh (28 instructions)

//////////////////////////////////////////////////////
// Block at 821B5BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5BAC);
		  /* 821B5BACh */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821B5BACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821B5BACh case    0:*/		return 0x821B5BB0;
		  /* 821B5BB0h */ case    1:  		/* li R28, 0 */
		/* 821B5BB0h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821B5BB0h case    1:*/		return 0x821B5BB4;
		  /* 821B5BB4h */ case    2:  		/* li R18, 0 */
		/* 821B5BB4h case    2:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821B5BB4h case    2:*/		return 0x821B5BB8;
		  /* 821B5BB8h */ case    3:  		/* li R27, 0 */
		/* 821B5BB8h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821B5BB8h case    3:*/		return 0x821B5BBC;
		  /* 821B5BBCh */ case    4:  		/* rlwinm R29, R11, 31, 28, 31 */
		/* 821B5BBCh case    4:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R29,regs.R11);
		/* 821B5BBCh case    4:*/		return 0x821B5BC0;
		  /* 821B5BC0h */ case    5:  		/* li R30, 0 */
		/* 821B5BC0h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B5BC0h case    5:*/		return 0x821B5BC4;
		  /* 821B5BC4h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 821B5BC4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821B5BC4h case    6:*/		return 0x821B5BC8;
		  /* 821B5BC8h */ case    7:  		/* bc 12, CR6_EQ, 224 */
		/* 821B5BC8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B5CA8;  }
		/* 821B5BC8h case    7:*/		return 0x821B5BCC;
		  /* 821B5BCCh */ case    8:  		/* addi R11, R29, -1 */
		/* 821B5BCCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821B5BCCh case    8:*/		return 0x821B5BD0;
		  /* 821B5BD0h */ case    9:  		/* lwz R10, <#[R17]> */
		/* 821B5BD0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 821B5BD0h case    9:*/		return 0x821B5BD4;
		  /* 821B5BD4h */ case   10:  		/* mr R3, R16 */
		/* 821B5BD4h case   10:*/		regs.R3 = regs.R16;
		/* 821B5BD4h case   10:*/		return 0x821B5BD8;
		  /* 821B5BD8h */ case   11:  		/* andc R11, R29, R11 */
		/* 821B5BD8h case   11:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821B5BD8h case   11:*/		return 0x821B5BDC;
		  /* 821B5BDCh */ case   12:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821B5BDCh case   12:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821B5BDCh case   12:*/		return 0x821B5BE0;
		  /* 821B5BE0h */ case   13:  		/* cntlzw R11, R11 */
		/* 821B5BE0h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821B5BE0h case   13:*/		return 0x821B5BE4;
		  /* 821B5BE4h */ case   14:  		/* rlwinm R5, R10, 0, 27, 31 */
		/* 821B5BE4h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R10);
		/* 821B5BE4h case   14:*/		return 0x821B5BE8;
		  /* 821B5BE8h */ case   15:  		/* subfic R11, R11, 31 */
		/* 821B5BE8h case   15:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821B5BE8h case   15:*/		return 0x821B5BEC;
		  /* 821B5BECh */ case   16:  		/* rlwinm R31, R11, 1, 0, 30 */
		/* 821B5BECh case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R11);
		/* 821B5BECh case   16:*/		return 0x821B5BF0;
		  /* 821B5BF0h */ case   17:  		/* srw R11, R9, R31 */
		/* 821B5BF0h case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R31);
		/* 821B5BF0h case   17:*/		return 0x821B5BF4;
		  /* 821B5BF4h */ case   18:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821B5BF4h case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821B5BF4h case   18:*/		return 0x821B5BF8;
		  /* 821B5BF8h */ case   19:  		/* bl 440976 */
		/* 821B5BF8h case   19:*/		regs.LR = 0x821B5BFC; return 0x82221688;
		/* 821B5BF8h case   19:*/		return 0x821B5BFC;
		  /* 821B5BFCh */ case   20:  		/* fcmpu CR6, FR1, FR31 */
		/* 821B5BFCh case   20:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821B5BFCh case   20:*/		return 0x821B5C00;
		  /* 821B5C00h */ case   21:  		/* li R11, 1 */
		/* 821B5C00h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821B5C00h case   21:*/		return 0x821B5C04;
		  /* 821B5C04h */ case   22:  		/* bc 12, CR6_EQ, 8 */
		/* 821B5C04h case   22:*/		if ( regs.CR[6].eq ) { return 0x821B5C0C;  }
		/* 821B5C04h case   22:*/		return 0x821B5C08;
		  /* 821B5C08h */ case   23:  		/* li R11, 0 */
		/* 821B5C08h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821B5C08h case   23:*/		return 0x821B5C0C;
	}
	return 0x821B5C0C;
} // Block from 821B5BACh-821B5C0Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821B5C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5C0C);
		  /* 821B5C0Ch */ case    0:  		/* addi R10, R20, -1 */
		/* 821B5C0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0xFFFFFFFF);
		/* 821B5C0Ch case    0:*/		return 0x821B5C10;
		  /* 821B5C10h */ case    1:  		/* cntlzw R10, R10 */
		/* 821B5C10h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821B5C10h case    1:*/		return 0x821B5C14;
		  /* 821B5C14h */ case    2:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 821B5C14h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821B5C14h case    2:*/		return 0x821B5C18;
		  /* 821B5C18h */ case    3:  		/* cmpw CR6, R11, R10 */
		/* 821B5C18h case    3:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821B5C18h case    3:*/		return 0x821B5C1C;
		  /* 821B5C1Ch */ case    4:  		/* li R10, 3 */
		/* 821B5C1Ch case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821B5C1Ch case    4:*/		return 0x821B5C20;
		  /* 821B5C20h */ case    5:  		/* bc 4, CR6_EQ, 88 */
		/* 821B5C20h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821B5C78;  }
		/* 821B5C20h case    5:*/		return 0x821B5C24;
		  /* 821B5C24h */ case    6:  		/* lwz R11, <#[R23]> */
		/* 821B5C24h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B5C24h case    6:*/		return 0x821B5C28;
		  /* 821B5C28h */ case    7:  		/* slw R8, R10, R30 */
		/* 821B5C28h case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R10,regs.R30);
		/* 821B5C28h case    7:*/		return 0x821B5C2C;
		  /* 821B5C2Ch */ case    8:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821B5C2Ch case    8:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821B5C2Ch case    8:*/		return 0x821B5C30;
		  /* 821B5C30h */ case    9:  		/* lwz R9, <#[R26 + 8]> */
		/* 821B5C30h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5C30h case    9:*/		return 0x821B5C34;
		  /* 821B5C34h */ case   10:  		/* andc R8, R28, R8 */
		/* 821B5C34h case   10:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R28,regs.R8);
		/* 821B5C34h case   10:*/		return 0x821B5C38;
		  /* 821B5C38h */ case   11:  		/* srw R11, R11, R31 */
		/* 821B5C38h case   11:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821B5C38h case   11:*/		return 0x821B5C3C;
		  /* 821B5C3Ch */ case   12:  		/* rlwinm R7, R11, 0, 30, 31 */
		/* 821B5C3Ch case   12:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R11);
		/* 821B5C3Ch case   12:*/		return 0x821B5C40;
		  /* 821B5C40h */ case   13:  		/* rlwinm R11, R9, 18, 29, 31 */
		/* 821B5C40h case   13:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R9);
		/* 821B5C40h case   13:*/		return 0x821B5C44;
		  /* 821B5C44h */ case   14:  		/* slw R9, R7, R30 */
		/* 821B5C44h case   14:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R30);
		/* 821B5C44h case   14:*/		return 0x821B5C48;
		  /* 821B5C48h */ case   15:  		/* add R11, R11, R27 */
		/* 821B5C48h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821B5C48h case   15:*/		return 0x821B5C4C;
		  /* 821B5C4Ch */ case   16:  		/* or R28, R9, R8 */
		/* 821B5C4Ch case   16:*/		cpu::op::or<0>(regs,&regs.R28,regs.R9,regs.R8);
		/* 821B5C4Ch case   16:*/		return 0x821B5C50;
		  /* 821B5C50h */ case   17:  		/* cmplwi CR6, R11, 3 */
		/* 821B5C50h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821B5C50h case   17:*/		return 0x821B5C54;
		  /* 821B5C54h */ case   18:  		/* bc 12, CR6_LT, 8 */
		/* 821B5C54h case   18:*/		if ( regs.CR[6].lt ) { return 0x821B5C5C;  }
		/* 821B5C54h case   18:*/		return 0x821B5C58;
		  /* 821B5C58h */ case   19:  		/* mr R11, R10 */
		/* 821B5C58h case   19:*/		regs.R11 = regs.R10;
		/* 821B5C58h case   19:*/		return 0x821B5C5C;
	}
	return 0x821B5C5C;
} // Block from 821B5C0Ch-821B5C5Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B5C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5C5C);
		  /* 821B5C5Ch */ case    0:  		/* slw R10, R10, R31 */
		/* 821B5C5Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821B5C5Ch case    0:*/		return 0x821B5C60;
		  /* 821B5C60h */ case    1:  		/* slw R11, R11, R31 */
		/* 821B5C60h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821B5C60h case    1:*/		return 0x821B5C64;
		  /* 821B5C64h */ case    2:  		/* andc R10, R18, R10 */
		/* 821B5C64h case    2:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R18,regs.R10);
		/* 821B5C64h case    2:*/		return 0x821B5C68;
		  /* 821B5C68h */ case    3:  		/* addi R27, R27, 1 */
		/* 821B5C68h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821B5C68h case    3:*/		return 0x821B5C6C;
		  /* 821B5C6Ch */ case    4:  		/* or R18, R10, R11 */
		/* 821B5C6Ch case    4:*/		cpu::op::or<0>(regs,&regs.R18,regs.R10,regs.R11);
		/* 821B5C6Ch case    4:*/		return 0x821B5C70;
		  /* 821B5C70h */ case    5:  		/* addi R30, R30, 2 */
		/* 821B5C70h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821B5C70h case    5:*/		return 0x821B5C74;
		  /* 821B5C74h */ case    6:  		/* b 36 */
		/* 821B5C74h case    6:*/		return 0x821B5C98;
		/* 821B5C74h case    6:*/		return 0x821B5C78;
	}
	return 0x821B5C78;
} // Block from 821B5C5Ch-821B5C78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B5C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5C78);
		  /* 821B5C78h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821B5C78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821B5C78h case    0:*/		return 0x821B5C7C;
		  /* 821B5C7Ch */ case    1:  		/* slw R10, R10, R31 */
		/* 821B5C7Ch case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821B5C7Ch case    1:*/		return 0x821B5C80;
		  /* 821B5C80h */ case    2:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821B5C80h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821B5C80h case    2:*/		return 0x821B5C84;
		  /* 821B5C84h */ case    3:  		/* andc R10, R18, R10 */
		/* 821B5C84h case    3:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R18,regs.R10);
		/* 821B5C84h case    3:*/		return 0x821B5C88;
		  /* 821B5C88h */ case    4:  		/* srw R11, R11, R31 */
		/* 821B5C88h case    4:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821B5C88h case    4:*/		return 0x821B5C8C;
		  /* 821B5C8Ch */ case    5:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821B5C8Ch case    5:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821B5C8Ch case    5:*/		return 0x821B5C90;
		  /* 821B5C90h */ case    6:  		/* slw R11, R11, R31 */
		/* 821B5C90h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821B5C90h case    6:*/		return 0x821B5C94;
		  /* 821B5C94h */ case    7:  		/* or R18, R11, R10 */
		/* 821B5C94h case    7:*/		cpu::op::or<0>(regs,&regs.R18,regs.R11,regs.R10);
		/* 821B5C94h case    7:*/		return 0x821B5C98;
	}
	return 0x821B5C98;
} // Block from 821B5C78h-821B5C98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821B5C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5C98);
		  /* 821B5C98h */ case    0:  		/* addi R11, R29, -1 */
		/* 821B5C98h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821B5C98h case    0:*/		return 0x821B5C9C;
		  /* 821B5C9Ch */ case    1:  		/* andc R11, R29, R11 */
		/* 821B5C9Ch case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821B5C9Ch case    1:*/		return 0x821B5CA0;
		  /* 821B5CA0h */ case    2:  		/* subf R29, R11, R29 */
		/* 821B5CA0h case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821B5CA0h case    2:*/		return 0x821B5CA4;
		  /* 821B5CA4h */ case    3:  		/* b -224 */
		/* 821B5CA4h case    3:*/		return 0x821B5BC4;
		/* 821B5CA4h case    3:*/		return 0x821B5CA8;
	}
	return 0x821B5CA8;
} // Block from 821B5C98h-821B5CA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821B5CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5CA8);
		  /* 821B5CA8h */ case    0:  		/* lwz R30, <#[R26 + 8]> */
		/* 821B5CA8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5CA8h case    0:*/		return 0x821B5CAC;
		  /* 821B5CACh */ case    1:  		/* rlwinm R11, R30, 18, 29, 31 */
		/* 821B5CACh case    1:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R30);
		/* 821B5CACh case    1:*/		return 0x821B5CB0;
		  /* 821B5CB0h */ case    2:  		/* add R31, R11, R27 */
		/* 821B5CB0h case    2:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R27);
		/* 821B5CB0h case    2:*/		return 0x821B5CB4;
		  /* 821B5CB4h */ case    3:  		/* cmplwi CR6, R31, 4 */
		/* 821B5CB4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821B5CB4h case    3:*/		return 0x821B5CB8;
		  /* 821B5CB8h */ case    4:  		/* bc 12, CR6_GT, 60 */
		/* 821B5CB8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821B5CF4;  }
		/* 821B5CB8h case    4:*/		return 0x821B5CBC;
		  /* 821B5CBCh */ case    5:  		/* mr R3, R26 */
		/* 821B5CBCh case    5:*/		regs.R3 = regs.R26;
		/* 821B5CBCh case    5:*/		return 0x821B5CC0;
		  /* 821B5CC0h */ case    6:  		/* bl -259136 */
		/* 821B5CC0h case    6:*/		regs.LR = 0x821B5CC4; return 0x82176880;
		/* 821B5CC0h case    6:*/		return 0x821B5CC4;
		  /* 821B5CC4h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 821B5CC4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821B5CC4h case    7:*/		return 0x821B5CC8;
		  /* 821B5CC8h */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 821B5CC8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821B5CF4;  }
		/* 821B5CC8h case    8:*/		return 0x821B5CCC;
		  /* 821B5CCCh */ case    9:  		/* rlwinm. R11, R30, 9, 31, 31 */
		/* 821B5CCCh case    9:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R30);
		/* 821B5CCCh case    9:*/		return 0x821B5CD0;
		  /* 821B5CD0h */ case   10:  		/* bc 12, CR0_EQ, 64 */
		/* 821B5CD0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821B5D10;  }
		/* 821B5CD0h case   10:*/		return 0x821B5CD4;
		  /* 821B5CD4h */ case   11:  		/* mr R4, R26 */
		/* 821B5CD4h case   11:*/		regs.R4 = regs.R26;
		/* 821B5CD4h case   11:*/		return 0x821B5CD8;
		  /* 821B5CD8h */ case   12:  		/* mr R3, R14 */
		/* 821B5CD8h case   12:*/		regs.R3 = regs.R14;
		/* 821B5CD8h case   12:*/		return 0x821B5CDC;
		  /* 821B5CDCh */ case   13:  		/* bl -204036 */
		/* 821B5CDCh case   13:*/		regs.LR = 0x821B5CE0; return 0x82183FD8;
		/* 821B5CDCh case   13:*/		return 0x821B5CE0;
		  /* 821B5CE0h */ case   14:  		/* lwz R11, <#[R3 + 192]> */
		/* 821B5CE0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000C0) );
		/* 821B5CE0h case   14:*/		return 0x821B5CE4;
		  /* 821B5CE4h */ case   15:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821B5CE4h case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821B5CE4h case   15:*/		return 0x821B5CE8;
		  /* 821B5CE8h */ case   16:  		/* add R11, R11, R27 */
		/* 821B5CE8h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821B5CE8h case   16:*/		return 0x821B5CEC;
		  /* 821B5CECh */ case   17:  		/* cmplwi CR6, R11, 4 */
		/* 821B5CECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821B5CECh case   17:*/		return 0x821B5CF0;
		  /* 821B5CF0h */ case   18:  		/* bc 4, CR6_GT, 32 */
		/* 821B5CF0h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821B5D10;  }
		/* 821B5CF0h case   18:*/		return 0x821B5CF4;
	}
	return 0x821B5CF4;
} // Block from 821B5CA8h-821B5CF4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821B5CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5CF4);
		  /* 821B5CF4h */ case    0:  		/* addi R20, R20, 1 */
		/* 821B5CF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821B5CF4h case    0:*/		return 0x821B5CF8;
		  /* 821B5CF8h */ case    1:  		/* lwz R18, <#[R1 + 96]> */
		/* 821B5CF8h case    1:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 821B5CF8h case    1:*/		return 0x821B5CFC;
		  /* 821B5CFCh */ case    2:  		/* addi R22, R22, 4 */
		/* 821B5CFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821B5CFCh case    2:*/		return 0x821B5D00;
		  /* 821B5D00h */ case    3:  		/* addi R21, R21, -4 */
		/* 821B5D00h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0xFFFFFFFC);
		/* 821B5D00h case    3:*/		return 0x821B5D04;
		  /* 821B5D04h */ case    4:  		/* cmplwi CR6, R20, 2 */
		/* 821B5D04h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 821B5D04h case    4:*/		return 0x821B5D08;
		  /* 821B5D08h */ case    5:  		/* bc 4, CR6_GT, -528 */
		/* 821B5D08h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821B5AF8;  }
		/* 821B5D08h case    5:*/		return 0x821B5D0C;
		  /* 821B5D0Ch */ case    6:  		/* b 544 */
		/* 821B5D0Ch case    6:*/		return 0x821B5F2C;
		/* 821B5D0Ch case    6:*/		return 0x821B5D10;
	}
	return 0x821B5D10;
} // Block from 821B5CF4h-821B5D10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821B5D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5D10);
		  /* 821B5D10h */ case    0:  		/* mr R6, R31 */
		/* 821B5D10h case    0:*/		regs.R6 = regs.R31;
		/* 821B5D10h case    0:*/		return 0x821B5D14;
		  /* 821B5D14h */ case    1:  		/* mr R5, R25 */
		/* 821B5D14h case    1:*/		regs.R5 = regs.R25;
		/* 821B5D14h case    1:*/		return 0x821B5D18;
		  /* 821B5D18h */ case    2:  		/* li R4, 0 */
		/* 821B5D18h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5D18h case    2:*/		return 0x821B5D1C;
		  /* 821B5D1Ch */ case    3:  		/* mr R3, R14 */
		/* 821B5D1Ch case    3:*/		regs.R3 = regs.R14;
		/* 821B5D1Ch case    3:*/		return 0x821B5D20;
		  /* 821B5D20h */ case    4:  		/* bl -98176 */
		/* 821B5D20h case    4:*/		regs.LR = 0x821B5D24; return 0x8219DDA0;
		/* 821B5D20h case    4:*/		return 0x821B5D24;
		  /* 821B5D24h */ case    5:  		/* lwz R11, <#[R23]> */
		/* 821B5D24h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821B5D24h case    5:*/		return 0x821B5D28;
		  /* 821B5D28h */ case    6:  		/* mr R29, R3 */
		/* 821B5D28h case    6:*/		regs.R29 = regs.R3;
		/* 821B5D28h case    6:*/		return 0x821B5D2C;
		  /* 821B5D2Ch */ case    7:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821B5D2Ch case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821B5D2Ch case    7:*/		return 0x821B5D30;
		  /* 821B5D30h */ case    8:  		/* mr R6, R28 */
		/* 821B5D30h case    8:*/		regs.R6 = regs.R28;
		/* 821B5D30h case    8:*/		return 0x821B5D34;
		  /* 821B5D34h */ case    9:  		/* mr R5, R27 */
		/* 821B5D34h case    9:*/		regs.R5 = regs.R27;
		/* 821B5D34h case    9:*/		return 0x821B5D38;
		  /* 821B5D38h */ case   10:  		/* mr R4, R24 */
		/* 821B5D38h case   10:*/		regs.R4 = regs.R24;
		/* 821B5D38h case   10:*/		return 0x821B5D3C;
		  /* 821B5D3Ch */ case   11:  		/* mr R3, R14 */
		/* 821B5D3Ch case   11:*/		regs.R3 = regs.R14;
		/* 821B5D3Ch case   11:*/		return 0x821B5D40;
		  /* 821B5D40h */ case   12:  		/* bl -253056 */
		/* 821B5D40h case   12:*/		regs.LR = 0x821B5D44; return 0x821780C0;
		/* 821B5D40h case   12:*/		return 0x821B5D44;
		  /* 821B5D44h */ case   13:  		/* mr R7, R3 */
		/* 821B5D44h case   13:*/		regs.R7 = regs.R3;
		/* 821B5D44h case   13:*/		return 0x821B5D48;
		  /* 821B5D48h */ case   14:  		/* mr R6, R3 */
		/* 821B5D48h case   14:*/		regs.R6 = regs.R3;
		/* 821B5D48h case   14:*/		return 0x821B5D4C;
		  /* 821B5D4Ch */ case   15:  		/* mr R5, R29 */
		/* 821B5D4Ch case   15:*/		regs.R5 = regs.R29;
		/* 821B5D4Ch case   15:*/		return 0x821B5D50;
		  /* 821B5D50h */ case   16:  		/* li R4, 0 */
		/* 821B5D50h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5D50h case   16:*/		return 0x821B5D54;
		  /* 821B5D54h */ case   17:  		/* mr R3, R14 */
		/* 821B5D54h case   17:*/		regs.R3 = regs.R14;
		/* 821B5D54h case   17:*/		return 0x821B5D58;
		  /* 821B5D58h */ case   18:  		/* bl -97952 */
		/* 821B5D58h case   18:*/		regs.LR = 0x821B5D5C; return 0x8219DEB8;
		/* 821B5D58h case   18:*/		return 0x821B5D5C;
		  /* 821B5D5Ch */ case   19:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B5D5Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5D5Ch case   19:*/		return 0x821B5D60;
		  /* 821B5D60h */ case   20:  		/* mr R28, R3 */
		/* 821B5D60h case   20:*/		regs.R28 = regs.R3;
		/* 821B5D60h case   20:*/		return 0x821B5D64;
		  /* 821B5D64h */ case   21:  		/* li R30, 0 */
		/* 821B5D64h case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821B5D64h case   21:*/		return 0x821B5D68;
		  /* 821B5D68h */ case   22:  		/* rlwinm R31, R11, 31, 28, 31 */
		/* 821B5D68h case   22:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R31,regs.R11);
		/* 821B5D68h case   22:*/		return 0x821B5D6C;
		  /* 821B5D6Ch */ case   23:  		/* cmplwi CR6, R31, 0 */
		/* 821B5D6Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821B5D6Ch case   23:*/		return 0x821B5D70;
		  /* 821B5D70h */ case   24:  		/* bc 12, CR6_EQ, 76 */
		/* 821B5D70h case   24:*/		if ( regs.CR[6].eq ) { return 0x821B5DBC;  }
		/* 821B5D70h case   24:*/		return 0x821B5D74;
		  /* 821B5D74h */ case   25:  		/* addi R11, R31, -1 */
		/* 821B5D74h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821B5D74h case   25:*/		return 0x821B5D78;
		  /* 821B5D78h */ case   26:  		/* lwz R10, <#[R19]> */
		/* 821B5D78h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 821B5D78h case   26:*/		return 0x821B5D7C;
		  /* 821B5D7Ch */ case   27:  		/* mr R4, R26 */
		/* 821B5D7Ch case   27:*/		regs.R4 = regs.R26;
		/* 821B5D7Ch case   27:*/		return 0x821B5D80;
		  /* 821B5D80h */ case   28:  		/* andc R11, R31, R11 */
		/* 821B5D80h case   28:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821B5D80h case   28:*/		return 0x821B5D84;
		  /* 821B5D84h */ case   29:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 821B5D84h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 821B5D84h case   29:*/		return 0x821B5D88;
		  /* 821B5D88h */ case   30:  		/* cntlzw R11, R11 */
		/* 821B5D88h case   30:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821B5D88h case   30:*/		return 0x821B5D8C;
		  /* 821B5D8Ch */ case   31:  		/* mr R3, R14 */
		/* 821B5D8Ch case   31:*/		regs.R3 = regs.R14;
		/* 821B5D8Ch case   31:*/		return 0x821B5D90;
		  /* 821B5D90h */ case   32:  		/* subfic R5, R11, 31 */
		/* 821B5D90h case   32:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x1F);
		/* 821B5D90h case   32:*/		return 0x821B5D94;
		  /* 821B5D94h */ case   33:  		/* bl -252972 */
		/* 821B5D94h case   33:*/		regs.LR = 0x821B5D98; return 0x82178168;
		/* 821B5D94h case   33:*/		return 0x821B5D98;
		  /* 821B5D98h */ case   34:  		/* mr R5, R3 */
		/* 821B5D98h case   34:*/		regs.R5 = regs.R3;
		/* 821B5D98h case   34:*/		return 0x821B5D9C;
		  /* 821B5D9Ch */ case   35:  		/* mr R4, R30 */
		/* 821B5D9Ch case   35:*/		regs.R4 = regs.R30;
		/* 821B5D9Ch case   35:*/		return 0x821B5DA0;
		  /* 821B5DA0h */ case   36:  		/* mr R3, R29 */
		/* 821B5DA0h case   36:*/		regs.R3 = regs.R29;
		/* 821B5DA0h case   36:*/		return 0x821B5DA4;
		  /* 821B5DA4h */ case   37:  		/* bl -284404 */
		/* 821B5DA4h case   37:*/		regs.LR = 0x821B5DA8; return 0x821706B0;
		/* 821B5DA4h case   37:*/		return 0x821B5DA8;
		  /* 821B5DA8h */ case   38:  		/* addi R11, R31, -1 */
		/* 821B5DA8h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821B5DA8h case   38:*/		return 0x821B5DAC;
		  /* 821B5DACh */ case   39:  		/* addi R30, R30, 1 */
		/* 821B5DACh case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B5DACh case   39:*/		return 0x821B5DB0;
		  /* 821B5DB0h */ case   40:  		/* andc R11, R31, R11 */
		/* 821B5DB0h case   40:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821B5DB0h case   40:*/		return 0x821B5DB4;
		  /* 821B5DB4h */ case   41:  		/* subf R31, R11, R31 */
		/* 821B5DB4h case   41:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821B5DB4h case   41:*/		return 0x821B5DB8;
		  /* 821B5DB8h */ case   42:  		/* b -76 */
		/* 821B5DB8h case   42:*/		return 0x821B5D6C;
		/* 821B5DB8h case   42:*/		return 0x821B5DBC;
	}
	return 0x821B5DBC;
} // Block from 821B5D10h-821B5DBCh (43 instructions)

//////////////////////////////////////////////////////
// Block at 821B5DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5DBC);
		  /* 821B5DBCh */ case    0:  		/* li R31, 0 */
		/* 821B5DBCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821B5DBCh case    0:*/		return 0x821B5DC0;
		  /* 821B5DC0h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 821B5DC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821B5DC0h case    1:*/		return 0x821B5DC4;
		  /* 821B5DC4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821B5DC4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821B5DF8;  }
		/* 821B5DC4h case    2:*/		return 0x821B5DC8;
		  /* 821B5DC8h */ case    3:  		/* mr R5, R31 */
		/* 821B5DC8h case    3:*/		regs.R5 = regs.R31;
		/* 821B5DC8h case    3:*/		return 0x821B5DCC;
		  /* 821B5DCCh */ case    4:  		/* mr R4, R28 */
		/* 821B5DCCh case    4:*/		regs.R4 = regs.R28;
		/* 821B5DCCh case    4:*/		return 0x821B5DD0;
		  /* 821B5DD0h */ case    5:  		/* mr R3, R14 */
		/* 821B5DD0h case    5:*/		regs.R3 = regs.R14;
		/* 821B5DD0h case    5:*/		return 0x821B5DD4;
		  /* 821B5DD4h */ case    6:  		/* bl -253124 */
		/* 821B5DD4h case    6:*/		regs.LR = 0x821B5DD8; return 0x82178110;
		/* 821B5DD4h case    6:*/		return 0x821B5DD8;
		  /* 821B5DD8h */ case    7:  		/* mr R5, R3 */
		/* 821B5DD8h case    7:*/		regs.R5 = regs.R3;
		/* 821B5DD8h case    7:*/		return 0x821B5DDC;
		  /* 821B5DDCh */ case    8:  		/* mr R4, R30 */
		/* 821B5DDCh case    8:*/		regs.R4 = regs.R30;
		/* 821B5DDCh case    8:*/		return 0x821B5DE0;
		  /* 821B5DE0h */ case    9:  		/* mr R3, R29 */
		/* 821B5DE0h case    9:*/		regs.R3 = regs.R29;
		/* 821B5DE0h case    9:*/		return 0x821B5DE4;
		  /* 821B5DE4h */ case   10:  		/* bl -284468 */
		/* 821B5DE4h case   10:*/		regs.LR = 0x821B5DE8; return 0x821706B0;
		/* 821B5DE4h case   10:*/		return 0x821B5DE8;
		  /* 821B5DE8h */ case   11:  		/* addi R31, R31, 1 */
		/* 821B5DE8h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821B5DE8h case   11:*/		return 0x821B5DEC;
		  /* 821B5DECh */ case   12:  		/* addi R30, R30, 1 */
		/* 821B5DECh case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821B5DECh case   12:*/		return 0x821B5DF0;
		  /* 821B5DF0h */ case   13:  		/* cmplw CR6, R31, R27 */
		/* 821B5DF0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 821B5DF0h case   13:*/		return 0x821B5DF4;
		  /* 821B5DF4h */ case   14:  		/* bc 12, CR6_LT, -44 */
		/* 821B5DF4h case   14:*/		if ( regs.CR[6].lt ) { return 0x821B5DC8;  }
		/* 821B5DF4h case   14:*/		return 0x821B5DF8;
	}
	return 0x821B5DF8;
} // Block from 821B5DBCh-821B5DF8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821B5DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5DF8);
		  /* 821B5DF8h */ case    0:  		/* mr R3, R28 */
		/* 821B5DF8h case    0:*/		regs.R3 = regs.R28;
		/* 821B5DF8h case    0:*/		return 0x821B5DFC;
		  /* 821B5DFCh */ case    1:  		/* bl -252548 */
		/* 821B5DFCh case    1:*/		regs.LR = 0x821B5E00; return 0x82178378;
		/* 821B5DFCh case    1:*/		return 0x821B5E00;
		  /* 821B5E00h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821B5E00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5E00h case    2:*/		return 0x821B5E04;
		  /* 821B5E04h */ case    3:  		/* oris R11, R11, 256 */
		/* 821B5E04h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821B5E04h case    3:*/		return 0x821B5E08;
		  /* 821B5E08h */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 821B5E08h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5E08h case    4:*/		return 0x821B5E0C;
		  /* 821B5E0Ch */ case    5:  		/* lwz R11, <#[R26 + 8]> */
		/* 821B5E0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821B5E0Ch case    5:*/		return 0x821B5E10;
		  /* 821B5E10h */ case    6:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821B5E10h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5E10h case    6:*/		return 0x821B5E14;
		  /* 821B5E14h */ case    7:  		/* bc 12, CR0_EQ, 228 */
		/* 821B5E14h case    7:*/		if ( regs.CR[0].eq ) { return 0x821B5EF8;  }
		/* 821B5E14h case    7:*/		return 0x821B5E18;
		  /* 821B5E18h */ case    8:  		/* lwz R11, <#[R29 + 8]> */
		/* 821B5E18h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B5E18h case    8:*/		return 0x821B5E1C;
		  /* 821B5E1Ch */ case    9:  		/* mr R3, R26 */
		/* 821B5E1Ch case    9:*/		regs.R3 = regs.R26;
		/* 821B5E1Ch case    9:*/		return 0x821B5E20;
		  /* 821B5E20h */ case   10:  		/* oris R11, R11, 128 */
		/* 821B5E20h case   10:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821B5E20h case   10:*/		return 0x821B5E24;
		  /* 821B5E24h */ case   11:  		/* stw R11, <#[R29 + 8]> */
		/* 821B5E24h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821B5E24h case   11:*/		return 0x821B5E28;
		  /* 821B5E28h */ case   12:  		/* bl -206144 */
		/* 821B5E28h case   12:*/		regs.LR = 0x821B5E2C; return 0x821838E8;
		/* 821B5E28h case   12:*/		return 0x821B5E2C;
		  /* 821B5E2Ch */ case   13:  		/* sth R3, <#[R29 + 18]> */
		/* 821B5E2Ch case   13:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R29 + 0x00000012) );
		/* 821B5E2Ch case   13:*/		return 0x821B5E30;
		  /* 821B5E30h */ case   14:  		/* lwz R3, <#[R14 + 660]> */
		/* 821B5E30h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821B5E30h case   14:*/		return 0x821B5E34;
		  /* 821B5E34h */ case   15:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B5E34h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B5E34h case   15:*/		return 0x821B5E38;
		  /* 821B5E38h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5E38h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5E38h case   16:*/		return 0x821B5E3C;
		  /* 821B5E3Ch */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 821B5E3Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x821B5E64;  }
		/* 821B5E3Ch case   17:*/		return 0x821B5E40;
		  /* 821B5E40h */ case   18:  		/* lwz R11, <#[R3]> */
		/* 821B5E40h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5E40h case   18:*/		return 0x821B5E44;
		  /* 821B5E44h */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5E44h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5E44h case   19:*/		return 0x821B5E48;
		  /* 821B5E48h */ case   20:  		/* addic. R11, R11, -4 */
		/* 821B5E48h case   20:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B5E48h case   20:*/		return 0x821B5E4C;
		  /* 821B5E4Ch */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 821B5E4Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821B5E64;  }
		/* 821B5E4Ch case   21:*/		return 0x821B5E50;
		  /* 821B5E50h */ case   22:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B5E50h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5E50h case   22:*/		return 0x821B5E54;
		  /* 821B5E54h */ case   23:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B5E54h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B5E54h case   23:*/		return 0x821B5E58;
		  /* 821B5E58h */ case   24:  		/* addi R10, R10, 1 */
		/* 821B5E58h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B5E58h case   24:*/		return 0x821B5E5C;
		  /* 821B5E5Ch */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 821B5E5Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B5E5Ch case   25:*/		return 0x821B5E60;
		  /* 821B5E60h */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 821B5E60h case   26:*/		if ( !regs.CR[6].gt ) { return 0x821B5E70;  }
		/* 821B5E60h case   26:*/		return 0x821B5E64;
	}
	return 0x821B5E64;
} // Block from 821B5DF8h-821B5E64h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821B5E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5E64);
		  /* 821B5E64h */ case    0:  		/* li R4, 1 */
		/* 821B5E64h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B5E64h case    0:*/		return 0x821B5E68;
		  /* 821B5E68h */ case    1:  		/* bl -167328 */
		/* 821B5E68h case    1:*/		regs.LR = 0x821B5E6C; return 0x8218D0C8;
		/* 821B5E68h case    1:*/		return 0x821B5E6C;
		  /* 821B5E6Ch */ case    2:  		/* mr R11, R3 */
		/* 821B5E6Ch case    2:*/		regs.R11 = regs.R3;
		/* 821B5E6Ch case    2:*/		return 0x821B5E70;
	}
	return 0x821B5E70;
} // Block from 821B5E64h-821B5E70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5E70);
		  /* 821B5E70h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B5E70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5E70h case    0:*/		return 0x821B5E74;
		  /* 821B5E74h */ case    1:  		/* mr R3, R26 */
		/* 821B5E74h case    1:*/		regs.R3 = regs.R26;
		/* 821B5E74h case    1:*/		return 0x821B5E78;
		  /* 821B5E78h */ case    2:  		/* addi R9, R10, 4 */
		/* 821B5E78h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B5E78h case    2:*/		return 0x821B5E7C;
		  /* 821B5E7Ch */ case    3:  		/* addi R8, R10, 1 */
		/* 821B5E7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B5E7Ch case    3:*/		return 0x821B5E80;
		  /* 821B5E80h */ case    4:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B5E80h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B5E80h case    4:*/		return 0x821B5E84;
		  /* 821B5E84h */ case    5:  		/* stw R8, <#[R11 + 8]> */
		/* 821B5E84h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5E84h case    5:*/		return 0x821B5E88;
		  /* 821B5E88h */ case    6:  		/* stwx R29, <#[R10 + R11]> */
		/* 821B5E88h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B5E88h case    6:*/		return 0x821B5E8C;
		  /* 821B5E8Ch */ case    7:  		/* lwz R11, <#[R28 + 8]> */
		/* 821B5E8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5E8Ch case    7:*/		return 0x821B5E90;
		  /* 821B5E90h */ case    8:  		/* oris R11, R11, 128 */
		/* 821B5E90h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821B5E90h case    8:*/		return 0x821B5E94;
		  /* 821B5E94h */ case    9:  		/* stw R11, <#[R28 + 8]> */
		/* 821B5E94h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821B5E94h case    9:*/		return 0x821B5E98;
		  /* 821B5E98h */ case   10:  		/* bl -206256 */
		/* 821B5E98h case   10:*/		regs.LR = 0x821B5E9C; return 0x821838E8;
		/* 821B5E98h case   10:*/		return 0x821B5E9C;
		  /* 821B5E9Ch */ case   11:  		/* sth R3, <#[R28 + 18]> */
		/* 821B5E9Ch case   11:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R28 + 0x00000012) );
		/* 821B5E9Ch case   11:*/		return 0x821B5EA0;
		  /* 821B5EA0h */ case   12:  		/* lwz R3, <#[R14 + 660]> */
		/* 821B5EA0h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821B5EA0h case   12:*/		return 0x821B5EA4;
		  /* 821B5EA4h */ case   13:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B5EA4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B5EA4h case   13:*/		return 0x821B5EA8;
		  /* 821B5EA8h */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5EA8h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5EA8h case   14:*/		return 0x821B5EAC;
		  /* 821B5EACh */ case   15:  		/* bc 4, CR0_EQ, 40 */
		/* 821B5EACh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821B5ED4;  }
		/* 821B5EACh case   15:*/		return 0x821B5EB0;
		  /* 821B5EB0h */ case   16:  		/* lwz R11, <#[R3]> */
		/* 821B5EB0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5EB0h case   16:*/		return 0x821B5EB4;
		  /* 821B5EB4h */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5EB4h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5EB4h case   17:*/		return 0x821B5EB8;
		  /* 821B5EB8h */ case   18:  		/* addic. R11, R11, -4 */
		/* 821B5EB8h case   18:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B5EB8h case   18:*/		return 0x821B5EBC;
		  /* 821B5EBCh */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821B5EBCh case   19:*/		if ( regs.CR[0].eq ) { return 0x821B5ED4;  }
		/* 821B5EBCh case   19:*/		return 0x821B5EC0;
		  /* 821B5EC0h */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B5EC0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5EC0h case   20:*/		return 0x821B5EC4;
		  /* 821B5EC4h */ case   21:  		/* lwz R9, <#[R11 + 12]> */
		/* 821B5EC4h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B5EC4h case   21:*/		return 0x821B5EC8;
		  /* 821B5EC8h */ case   22:  		/* addi R10, R10, 1 */
		/* 821B5EC8h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821B5EC8h case   22:*/		return 0x821B5ECC;
		  /* 821B5ECCh */ case   23:  		/* cmplw CR6, R10, R9 */
		/* 821B5ECCh case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821B5ECCh case   23:*/		return 0x821B5ED0;
		  /* 821B5ED0h */ case   24:  		/* bc 4, CR6_GT, 16 */
		/* 821B5ED0h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821B5EE0;  }
		/* 821B5ED0h case   24:*/		return 0x821B5ED4;
	}
	return 0x821B5ED4;
} // Block from 821B5E70h-821B5ED4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821B5ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5ED4);
		  /* 821B5ED4h */ case    0:  		/* li R4, 1 */
		/* 821B5ED4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821B5ED4h case    0:*/		return 0x821B5ED8;
		  /* 821B5ED8h */ case    1:  		/* bl -167440 */
		/* 821B5ED8h case    1:*/		regs.LR = 0x821B5EDC; return 0x8218D0C8;
		/* 821B5ED8h case    1:*/		return 0x821B5EDC;
		  /* 821B5EDCh */ case    2:  		/* mr R11, R3 */
		/* 821B5EDCh case    2:*/		regs.R11 = regs.R3;
		/* 821B5EDCh case    2:*/		return 0x821B5EE0;
	}
	return 0x821B5EE0;
} // Block from 821B5ED4h-821B5EE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5EE0);
		  /* 821B5EE0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821B5EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5EE0h case    0:*/		return 0x821B5EE4;
		  /* 821B5EE4h */ case    1:  		/* addi R9, R10, 4 */
		/* 821B5EE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821B5EE4h case    1:*/		return 0x821B5EE8;
		  /* 821B5EE8h */ case    2:  		/* addi R8, R10, 1 */
		/* 821B5EE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821B5EE8h case    2:*/		return 0x821B5EEC;
		  /* 821B5EECh */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821B5EECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821B5EECh case    3:*/		return 0x821B5EF0;
		  /* 821B5EF0h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821B5EF0h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821B5EF0h case    4:*/		return 0x821B5EF4;
		  /* 821B5EF4h */ case    5:  		/* stwx R28, <#[R10 + R11]> */
		/* 821B5EF4h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821B5EF4h case    5:*/		return 0x821B5EF8;
	}
	return 0x821B5EF8;
} // Block from 821B5EE0h-821B5EF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821B5EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5EF8);
		  /* 821B5EF8h */ case    0:  		/* mr R6, R18 */
		/* 821B5EF8h case    0:*/		regs.R6 = regs.R18;
		/* 821B5EF8h case    0:*/		return 0x821B5EFC;
		  /* 821B5EFCh */ case    1:  		/* lwz R7, <#[R14 + 652]> */
		/* 821B5EFCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5EFCh case    1:*/		return 0x821B5F00;
		  /* 821B5F00h */ case    2:  		/* mr R5, R29 */
		/* 821B5F00h case    2:*/		regs.R5 = regs.R29;
		/* 821B5F00h case    2:*/		return 0x821B5F04;
		  /* 821B5F04h */ case    3:  		/* mr R4, R25 */
		/* 821B5F04h case    3:*/		regs.R4 = regs.R25;
		/* 821B5F04h case    3:*/		return 0x821B5F08;
		  /* 821B5F08h */ case    4:  		/* mr R3, R14 */
		/* 821B5F08h case    4:*/		regs.R3 = regs.R14;
		/* 821B5F08h case    4:*/		return 0x821B5F0C;
		  /* 821B5F0Ch */ case    5:  		/* bl -70964 */
		/* 821B5F0Ch case    5:*/		regs.LR = 0x821B5F10; return 0x821A49D8;
		/* 821B5F0Ch case    5:*/		return 0x821B5F10;
		  /* 821B5F10h */ case    6:  		/* mr R4, R28 */
		/* 821B5F10h case    6:*/		regs.R4 = regs.R28;
		/* 821B5F10h case    6:*/		return 0x821B5F14;
		  /* 821B5F14h */ case    7:  		/* mr R3, R14 */
		/* 821B5F14h case    7:*/		regs.R3 = regs.R14;
		/* 821B5F14h case    7:*/		return 0x821B5F18;
		  /* 821B5F18h */ case    8:  		/* bl -87136 */
		/* 821B5F18h case    8:*/		regs.LR = 0x821B5F1C; return 0x821A0AB8;
		/* 821B5F18h case    8:*/		return 0x821B5F1C;
		  /* 821B5F1Ch */ case    9:  		/* mr R4, R29 */
		/* 821B5F1Ch case    9:*/		regs.R4 = regs.R29;
		/* 821B5F1Ch case    9:*/		return 0x821B5F20;
		  /* 821B5F20h */ case   10:  		/* mr R3, R14 */
		/* 821B5F20h case   10:*/		regs.R3 = regs.R14;
		/* 821B5F20h case   10:*/		return 0x821B5F24;
		  /* 821B5F24h */ case   11:  		/* bl -87148 */
		/* 821B5F24h case   11:*/		regs.LR = 0x821B5F28; return 0x821A0AB8;
		/* 821B5F24h case   11:*/		return 0x821B5F28;
		  /* 821B5F28h */ case   12:  		/* lwz R18, <#[R1 + 96]> */
		/* 821B5F28h case   12:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 821B5F28h case   12:*/		return 0x821B5F2C;
	}
	return 0x821B5F2C;
} // Block from 821B5EF8h-821B5F2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821B5F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5F2C);
		  /* 821B5F2Ch */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 821B5F2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821B5F2Ch case    0:*/		return 0x821B5F30;
		  /* 821B5F30h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821B5F30h case    1:*/		if ( regs.CR[6].eq ) { return 0x821B5F64;  }
		/* 821B5F30h case    1:*/		return 0x821B5F34;
		  /* 821B5F34h */ case    2:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 821B5F34h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 821B5F34h case    2:*/		return 0x821B5F38;
		  /* 821B5F38h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B5F38h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B5F38h case    3:*/		return 0x821B5F3C;
		  /* 821B5F3Ch */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821B5F3Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B5F3Ch case    4:*/		return 0x821B5F40;
		  /* 821B5F40h */ case    5:  		/* addic R10, R10, -1 */
		/* 821B5F40h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821B5F40h case    5:*/		return 0x821B5F44;
		  /* 821B5F44h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821B5F44h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821B5F44h case    6:*/		return 0x821B5F48;
		  /* 821B5F48h */ case    7:  		/* and R10, R10, R11 */
		/* 821B5F48h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821B5F48h case    7:*/		return 0x821B5F4C;
		  /* 821B5F4Ch */ case    8:  		/* cmplw CR6, R25, R10 */
		/* 821B5F4Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 821B5F4Ch case    8:*/		return 0x821B5F50;
		  /* 821B5F50h */ case    9:  		/* bc 4, CR6_EQ, 56 */
		/* 821B5F50h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821B5F88;  }
		/* 821B5F50h case    9:*/		return 0x821B5F54;
		  /* 821B5F54h */ case   10:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821B5F54h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821B5F54h case   10:*/		return 0x821B5F58;
		  /* 821B5F58h */ case   11:  		/* mr R15, R25 */
		/* 821B5F58h case   11:*/		regs.R15 = regs.R25;
		/* 821B5F58h case   11:*/		return 0x821B5F5C;
		  /* 821B5F5Ch */ case   12:  		/* lwz R11, <#[R11 + 40]> */
		/* 821B5F5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821B5F5Ch case   12:*/		return 0x821B5F60;
		  /* 821B5F60h */ case   13:  		/* b 40 */
		/* 821B5F60h case   13:*/		return 0x821B5F88;
		/* 821B5F60h case   13:*/		return 0x821B5F64;
	}
	return 0x821B5F64;
} // Block from 821B5F2Ch-821B5F64h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821B5F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5F64);
		  /* 821B5F64h */ case    0:  		/* lwz R10, <#[R18 + 28]> */
		/* 821B5F64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000001C) );
		/* 821B5F64h case    0:*/		return 0x821B5F68;
		  /* 821B5F68h */ case    1:  		/* addi R11, R18, 24 */
		/* 821B5F68h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x18);
		/* 821B5F68h case    1:*/		return 0x821B5F6C;
		  /* 821B5F6Ch */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821B5F6Ch case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821B5F6Ch case    2:*/		return 0x821B5F70;
		  /* 821B5F70h */ case    3:  		/* addic R9, R9, -1 */
		/* 821B5F70h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821B5F70h case    3:*/		return 0x821B5F74;
		  /* 821B5F74h */ case    4:  		/* subfe R9, R9, R9 */
		/* 821B5F74h case    4:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821B5F74h case    4:*/		return 0x821B5F78;
		  /* 821B5F78h */ case    5:  		/* and R10, R9, R10 */
		/* 821B5F78h case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821B5F78h case    5:*/		return 0x821B5F7C;
		  /* 821B5F7Ch */ case    6:  		/* cmplw CR6, R25, R10 */
		/* 821B5F7Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 821B5F7Ch case    6:*/		return 0x821B5F80;
		  /* 821B5F80h */ case    7:  		/* bc 12, CR6_EQ, -44 */
		/* 821B5F80h case    7:*/		if ( regs.CR[6].eq ) { return 0x821B5F54;  }
		/* 821B5F80h case    7:*/		return 0x821B5F84;
		  /* 821B5F84h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B5F84h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B5F84h case    8:*/		return 0x821B5F88;
	}
	return 0x821B5F88;
} // Block from 821B5F64h-821B5F88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821B5F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5F88);
		  /* 821B5F88h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B5F88h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B5F88h case    0:*/		return 0x821B5F8C;
		  /* 821B5F8Ch */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821B5F8Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821B5F9C;  }
		/* 821B5F8Ch case    1:*/		return 0x821B5F90;
		  /* 821B5F90h */ case    2:  		/* mr R25, R11 */
		/* 821B5F90h case    2:*/		regs.R25 = regs.R11;
		/* 821B5F90h case    2:*/		return 0x821B5F94;
		  /* 821B5F94h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821B5F94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821B5F94h case    3:*/		return 0x821B5F98;
		  /* 821B5F98h */ case    4:  		/* bc 4, CR6_EQ, -1816 */
		/* 821B5F98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821B5880;  }
		/* 821B5F98h case    4:*/		return 0x821B5F9C;
	}
	return 0x821B5F9C;
} // Block from 821B5F88h-821B5F9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821B5F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5F9C);
		  /* 821B5F9Ch */ case    0:  		/* lwz R3, <#[R14 + 652]> */
		/* 821B5F9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B5F9Ch case    0:*/		return 0x821B5FA0;
		  /* 821B5FA0h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821B5FA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821B5FA0h case    1:*/		return 0x821B5FA4;
		  /* 821B5FA4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B5FA4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B5FA4h case    2:*/		return 0x821B5FA8;
		  /* 821B5FA8h */ case    3:  		/* bc 4, CR0_EQ, 292 */
		/* 821B5FA8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B60CC;  }
		/* 821B5FA8h case    3:*/		return 0x821B5FAC;
		  /* 821B5FACh */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821B5FACh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821B5FACh case    4:*/		return 0x821B5FB0;
		  /* 821B5FB0h */ case    5:  		/* bc 12, CR0_EQ, 284 */
		/* 821B5FB0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821B60CC;  }
		/* 821B5FB0h case    5:*/		return 0x821B5FB4;
		  /* 821B5FB4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821B5FB4h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821B5FB4h case    6:*/		return 0x821B5FB8;
		  /* 821B5FB8h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821B5FB8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821B5FB8h case    7:*/		return 0x821B5FBC;
		  /* 821B5FBCh */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821B5FBCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821B5FC8;  }
		/* 821B5FBCh case    8:*/		return 0x821B5FC0;
		  /* 821B5FC0h */ case    9:  		/* li R4, 0 */
		/* 821B5FC0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821B5FC0h case    9:*/		return 0x821B5FC4;
		  /* 821B5FC4h */ case   10:  		/* b 16 */
		/* 821B5FC4h case   10:*/		return 0x821B5FD4;
		/* 821B5FC4h case   10:*/		return 0x821B5FC8;
	}
	return 0x821B5FC8;
} // Block from 821B5F9Ch-821B5FC8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821B5FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5FC8);
		  /* 821B5FC8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821B5FC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821B5FC8h case    0:*/		return 0x821B5FCC;
		  /* 821B5FCCh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B5FCCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B5FCCh case    1:*/		return 0x821B5FD0;
		  /* 821B5FD0h */ case    2:  		/* addi R4, R11, -4 */
		/* 821B5FD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821B5FD0h case    2:*/		return 0x821B5FD4;
	}
	return 0x821B5FD4;
} // Block from 821B5FC8h-821B5FD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B5FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B5FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B5FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B5FD4);
		  /* 821B5FD4h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821B5FD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B5FD4h case    0:*/		return 0x821B5FD8;
		  /* 821B5FD8h */ case    1:  		/* addi R10, R11, 3 */
		/* 821B5FD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821B5FD8h case    1:*/		return 0x821B5FDC;
		  /* 821B5FDCh */ case    2:  		/* addic. R11, R11, -1 */
		/* 821B5FDCh case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821B5FDCh case    2:*/		return 0x821B5FE0;
		  /* 821B5FE0h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821B5FE0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821B5FE0h case    3:*/		return 0x821B5FE4;
		  /* 821B5FE4h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821B5FE4h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821B5FE4h case    4:*/		return 0x821B5FE8;
		  /* 821B5FE8h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821B5FE8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821B5FE8h case    5:*/		return 0x821B5FEC;
		  /* 821B5FECh */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821B5FECh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821B6024;  }
		/* 821B5FECh case    6:*/		return 0x821B5FF0;
		  /* 821B5FF0h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821B5FF0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821B5FF0h case    7:*/		return 0x821B5FF4;
		  /* 821B5FF4h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821B5FF4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821B5FF4h case    8:*/		return 0x821B5FF8;
		  /* 821B5FF8h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821B5FF8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821B5FF8h case    9:*/		return 0x821B5FFC;
		  /* 821B5FFCh */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B5FFCh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B5FFCh case   10:*/		return 0x821B6000;
		  /* 821B6000h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821B6000h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821B6000h case   11:*/		return 0x821B6004;
		  /* 821B6004h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821B6004h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821B6004h case   12:*/		return 0x821B6008;
		  /* 821B6008h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821B6008h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821B6008h case   13:*/		return 0x821B600C;
		  /* 821B600Ch */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821B600Ch case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821B600Ch case   14:*/		return 0x821B6010;
		  /* 821B6010h */ case   15:  		/* stw R11, <#[R10]> */
		/* 821B6010h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821B6010h case   15:*/		return 0x821B6014;
		  /* 821B6014h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821B6014h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821B6014h case   16:*/		return 0x821B6018;
		  /* 821B6018h */ case   17:  		/* addi R11, R11, 4 */
		/* 821B6018h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821B6018h case   17:*/		return 0x821B601C;
		  /* 821B601Ch */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821B601Ch case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821B601Ch case   18:*/		return 0x821B6020;
		  /* 821B6020h */ case   19:  		/* bl -410136 */
		/* 821B6020h case   19:*/		regs.LR = 0x821B6024; return 0x82151E08;
		/* 821B6020h case   19:*/		return 0x821B6024;
	}
	return 0x821B6024;
} // Block from 821B5FD4h-821B6024h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821B6024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B6024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B6024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B6024);
		  /* 821B6024h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821B6024h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B6024h case    0:*/		return 0x821B6028;
		  /* 821B6028h */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821B6028h case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821B6028h case    1:*/		return 0x821B602C;
		  /* 821B602Ch */ case    2:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821B602Ch case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821B602Ch case    2:*/		return 0x821B6030;
		  /* 821B6030h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821B6030h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821B6030h case    3:*/		return 0x821B6034;
		  /* 821B6034h */ case    4:  		/* mr R30, R11 */
		/* 821B6034h case    4:*/		regs.R30 = regs.R11;
		/* 821B6034h case    4:*/		return 0x821B6038;
		  /* 821B6038h */ case    5:  		/* cmplwi CR6, R10, 14720 */
		/* 821B6038h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821B6038h case    5:*/		return 0x821B603C;
		  /* 821B603Ch */ case    6:  		/* bc 12, CR6_EQ, -160 */
		/* 821B603Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821B5F9C;  }
		/* 821B603Ch case    6:*/		return 0x821B6040;
		  /* 821B6040h */ case    7:  		/* mr R3, R31 */
		/* 821B6040h case    7:*/		regs.R3 = regs.R31;
		/* 821B6040h case    7:*/		return 0x821B6044;
		  /* 821B6044h */ case    8:  		/* bl -333508 */
		/* 821B6044h case    8:*/		regs.LR = 0x821B6048; return 0x82164980;
		/* 821B6044h case    8:*/		return 0x821B6048;
		  /* 821B6048h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B6048h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B6048h case    9:*/		return 0x821B604C;
		  /* 821B604Ch */ case   10:  		/* bc 12, CR0_EQ, 28 */
		/* 821B604Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821B6068;  }
		/* 821B604Ch case   10:*/		return 0x821B6050;
		  /* 821B6050h */ case   11:  		/* li R6, 1 */
		/* 821B6050h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821B6050h case   11:*/		return 0x821B6054;
		  /* 821B6054h */ case   12:  		/* lwz R5, <#[R14 + 652]> */
		/* 821B6054h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x0000028C) );
		/* 821B6054h case   12:*/		return 0x821B6058;
		  /* 821B6058h */ case   13:  		/* mr R4, R31 */
		/* 821B6058h case   13:*/		regs.R4 = regs.R31;
		/* 821B6058h case   13:*/		return 0x821B605C;
		  /* 821B605Ch */ case   14:  		/* mr R3, R14 */
		/* 821B605Ch case   14:*/		regs.R3 = regs.R14;
		/* 821B605Ch case   14:*/		return 0x821B6060;
		  /* 821B6060h */ case   15:  		/* bl 480104 */
		/* 821B6060h case   15:*/		regs.LR = 0x821B6064; return 0x8222B3C8;
		/* 821B6060h case   15:*/		return 0x821B6064;
		  /* 821B6064h */ case   16:  		/* b -200 */
		/* 821B6064h case   16:*/		return 0x821B5F9C;
		/* 821B6064h case   16:*/		return 0x821B6068;
	}
	return 0x821B6068;
} // Block from 821B6024h-821B6068h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821B6068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B6068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B6068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B6068);
		  /* 821B6068h */ case    0:  		/* li R29, 0 */
		/* 821B6068h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821B6068h case    0:*/		return 0x821B606C;
		  /* 821B606Ch */ case    1:  		/* addi R28, R31, 44 */
		/* 821B606Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x2C);
		/* 821B606Ch case    1:*/		return 0x821B6070;
		  /* 821B6070h */ case    2:  		/* rlwinm R11, R30, 13, 29, 31 */
		/* 821B6070h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R30);
		/* 821B6070h case    2:*/		return 0x821B6074;
		  /* 821B6074h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821B6074h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821B6074h case    3:*/		return 0x821B6078;
		  /* 821B6078h */ case    4:  		/* bc 4, CR6_LT, -220 */
		/* 821B6078h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821B5F9C;  }
		/* 821B6078h case    4:*/		return 0x821B607C;
		  /* 821B607Ch */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821B607Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821B607Ch case    5:*/		return 0x821B6080;
		  /* 821B6080h */ case    6:  		/* lwz R5, <#[R11 + 12]> */
		/* 821B6080h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821B6080h case    6:*/		return 0x821B6084;
		  /* 821B6084h */ case    7:  		/* lwz R11, <#[R5 + 8]> */
		/* 821B6084h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821B6084h case    7:*/		return 0x821B6088;
		  /* 821B6088h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821B6088h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821B6088h case    8:*/		return 0x821B608C;
		  /* 821B608Ch */ case    9:  		/* cmplwi CR6, R11, 16000 */
		/* 821B608Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821B608Ch case    9:*/		return 0x821B6090;
		  /* 821B6090h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 821B6090h case   10:*/		if ( regs.CR[6].eq ) { return 0x821B60C0;  }
		/* 821B6090h case   10:*/		return 0x821B6094;
		  /* 821B6094h */ case   11:  		/* mr R4, R18 */
		/* 821B6094h case   11:*/		regs.R4 = regs.R18;
		/* 821B6094h case   11:*/		return 0x821B6098;
		  /* 821B6098h */ case   12:  		/* mr R3, R14 */
		/* 821B6098h case   12:*/		regs.R3 = regs.R14;
		/* 821B6098h case   12:*/		return 0x821B609C;
		  /* 821B609Ch */ case   13:  		/* bl -21108 */
		/* 821B609Ch case   13:*/		regs.LR = 0x821B60A0; return 0x821B0E28;
		/* 821B609Ch case   13:*/		return 0x821B60A0;
		  /* 821B60A0h */ case   14:  		/* lwz R30, <#[R31 + 8]> */
		/* 821B60A0h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821B60A0h case   14:*/		return 0x821B60A4;
		  /* 821B60A4h */ case   15:  		/* rlwinm R11, R30, 0, 18, 24 */
		/* 821B60A4h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R30);
		/* 821B60A4h case   15:*/		return 0x821B60A8;
		  /* 821B60A8h */ case   16:  		/* cmplwi CR6, R11, 14720 */
		/* 821B60A8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821B60A8h case   16:*/		return 0x821B60AC;
		  /* 821B60ACh */ case   17:  		/* bc 12, CR6_EQ, -272 */
		/* 821B60ACh case   17:*/		if ( regs.CR[6].eq ) { return 0x821B5F9C;  }
		/* 821B60ACh case   17:*/		return 0x821B60B0;
		  /* 821B60B0h */ case   18:  		/* mr R3, R31 */
		/* 821B60B0h case   18:*/		regs.R3 = regs.R31;
		/* 821B60B0h case   18:*/		return 0x821B60B4;
		  /* 821B60B4h */ case   19:  		/* bl -333620 */
		/* 821B60B4h case   19:*/		regs.LR = 0x821B60B8; return 0x82164980;
		/* 821B60B4h case   19:*/		return 0x821B60B8;
		  /* 821B60B8h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821B60B8h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821B60B8h case   20:*/		return 0x821B60BC;
		  /* 821B60BCh */ case   21:  		/* bc 4, CR0_EQ, -288 */
		/* 821B60BCh case   21:*/		if ( !regs.CR[0].eq ) { return 0x821B5F9C;  }
		/* 821B60BCh case   21:*/		return 0x821B60C0;
	}
	return 0x821B60C0;
} // Block from 821B6068h-821B60C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821B60C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B60C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B60C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B60C0);
		  /* 821B60C0h */ case    0:  		/* addi R29, R29, 1 */
		/* 821B60C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821B60C0h case    0:*/		return 0x821B60C4;
		  /* 821B60C4h */ case    1:  		/* addi R28, R28, 4 */
		/* 821B60C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821B60C4h case    1:*/		return 0x821B60C8;
		  /* 821B60C8h */ case    2:  		/* b -88 */
		/* 821B60C8h case    2:*/		return 0x821B6070;
		/* 821B60C8h case    2:*/		return 0x821B60CC;
	}
	return 0x821B60CC;
} // Block from 821B60C0h-821B60CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821B60CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821B60CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821B60CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821B60CC);
		  /* 821B60CCh */ case    0:  		/* rlwinm R11, R18, 0, 0, 30 */
		/* 821B60CCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R18);
		/* 821B60CCh case    0:*/		return 0x821B60D0;
		  /* 821B60D0h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 821B60D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821B60D0h case    1:*/		return 0x821B60D4;
		  /* 821B60D4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821B60D4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821B60D4h case    2:*/		return 0x821B60D8;
		  /* 821B60D8h */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 821B60D8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821B60EC;  }
		/* 821B60D8h case    3:*/		return 0x821B60DC;
		  /* 821B60DCh */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821B60DCh case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821B60DCh case    4:*/		return 0x821B60E0;
		  /* 821B60E0h */ case    5:  		/* addic. R11, R11, -4 */
		/* 821B60E0h case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821B60E0h case    5:*/		return 0x821B60E4;
		  /* 821B60E4h */ case    6:  		/* stw R11, <#[R1 + 96]> */
		/* 821B60E4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821B60E4h case    6:*/		return 0x821B60E8;
		  /* 821B60E8h */ case    7:  		/* bc 4, CR0_EQ, -18236 */
		/* 821B60E8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821B19AC;  }
		/* 821B60E8h case    7:*/		return 0x821B60EC;
	}
	return 0x821B60EC;
} // Block from 821B60CCh-821B60ECh (8 instructions)

