#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 8212035Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212035C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212035C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212035C);
		  /* 8212035Ch */ case    0:  		/* li R11, -1 */
		/* 8212035Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8212035Ch case    0:*/		return 0x82120360;
		  /* 82120360h */ case    1:  		/* stw R19, <#[R1 + 160]> */
		/* 82120360h case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x000000A0) );
		/* 82120360h case    1:*/		return 0x82120364;
		  /* 82120364h */ case    2:  		/* mr R25, R19 */
		/* 82120364h case    2:*/		regs.R25 = regs.R19;
		/* 82120364h case    2:*/		return 0x82120368;
		  /* 82120368h */ case    3:  		/* stw R11, <#[R1 + 164]> */
		/* 82120368h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 82120368h case    3:*/		return 0x8212036C;
		  /* 8212036Ch */ case    4:  		/* mr R11, R19 */
		/* 8212036Ch case    4:*/		regs.R11 = regs.R19;
		/* 8212036Ch case    4:*/		return 0x82120370;
		  /* 82120370h */ case    5:  		/* lbz R10, <#[R8]> */
		/* 82120370h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82120370h case    5:*/		return 0x82120374;
		  /* 82120374h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 82120374h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82120374h case    6:*/		return 0x82120378;
		  /* 82120378h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 82120378h case    7:*/		if ( regs.CR[0].eq ) { return 0x821203A0;  }
		/* 82120378h case    7:*/		return 0x8212037C;
		  /* 8212037Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212037Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212037Ch case    8:*/		return 0x82120380;
		  /* 82120380h */ case    9:  		/* lbzx R10, <#[R11 + R8]> */
		/* 82120380h case    9:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82120380h case    9:*/		return 0x82120384;
		  /* 82120384h */ case   10:  		/* extsb R10, R10 */
		/* 82120384h case   10:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R10);
		/* 82120384h case   10:*/		return 0x82120388;
		  /* 82120388h */ case   11:  		/* cmpwi CR6, R10, 58 */
		/* 82120388h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000003A);
		/* 82120388h case   11:*/		return 0x8212038C;
		  /* 8212038Ch */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8212038Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8212039C;  }
		/* 8212038Ch case   12:*/		return 0x82120390;
		  /* 82120390h */ case   13:  		/* cmpwi CR6, R10, 0 */
		/* 82120390h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82120390h case   13:*/		return 0x82120394;
		  /* 82120394h */ case   14:  		/* bc 4, CR6_EQ, -24 */
		/* 82120394h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8212037C;  }
		/* 82120394h case   14:*/		return 0x82120398;
	}
	return 0x82120398;
} // Block from 8212035Ch-82120398h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82120398h
// Function '?PushUsageType@CParse@D3DXShader@@IAAJPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120398);
		  /* 82120398h */ case    0:  		/* b 8 */
		/* 82120398h case    0:*/		return 0x821203A0;
		/* 82120398h case    0:*/		return 0x8212039C;
	}
	return 0x8212039C;
} // Block from 82120398h-8212039Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212039Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212039C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212039C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212039C);
		  /* 8212039Ch */ case    0:  		/* li R25, 1 */
		/* 8212039Ch case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8212039Ch case    0:*/		return 0x821203A0;
	}
	return 0x821203A0;
} // Block from 8212039Ch-821203A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821203A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821203A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821203A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821203A0);
		  /* 821203A0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821203A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821203A0h case    0:*/		return 0x821203A4;
		  /* 821203A4h */ case    1:  		/* bc 12, CR6_EQ, 700 */
		/* 821203A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120660;  }
		/* 821203A4h case    1:*/		return 0x821203A8;
		  /* 821203A8h */ case    2:  		/* lis R11, -32256 */
		/* 821203A8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821203A8h case    2:*/		return 0x821203AC;
		  /* 821203ACh */ case    3:  		/* addi R30, R11, 4485 */
		/* 821203ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1185);
		/* 821203ACh case    3:*/		return 0x821203B0;
		  /* 821203B0h */ case    4:  		/* lwz R11, <#[R1 + 164]> */
		/* 821203B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821203B0h case    4:*/		return 0x821203B4;
		  /* 821203B4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821203B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821203B4h case    5:*/		return 0x821203B8;
		  /* 821203B8h */ case    6:  		/* bc 12, CR6_EQ, 232 */
		/* 821203B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821204A0;  }
		/* 821203B8h case    6:*/		return 0x821203BC;
		  /* 821203BCh */ case    7:  		/* cmpwi CR6, R25, 0 */
		/* 821203BCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821203BCh case    7:*/		return 0x821203C0;
		  /* 821203C0h */ case    8:  		/* bc 4, CR6_EQ, 124 */
		/* 821203C0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8212043C;  }
		/* 821203C0h case    8:*/		return 0x821203C4;
		  /* 821203C4h */ case    9:  		/* mr R5, R29 */
		/* 821203C4h case    9:*/		regs.R5 = regs.R29;
		/* 821203C4h case    9:*/		return 0x821203C8;
		  /* 821203C8h */ case   10:  		/* mr R4, R21 */
		/* 821203C8h case   10:*/		regs.R4 = regs.R21;
		/* 821203C8h case   10:*/		return 0x821203CC;
		  /* 821203CCh */ case   11:  		/* mr R3, R22 */
		/* 821203CCh case   11:*/		regs.R3 = regs.R22;
		/* 821203CCh case   11:*/		return 0x821203D0;
		  /* 821203D0h */ case   12:  		/* bl -33464 */
		/* 821203D0h case   12:*/		regs.LR = 0x821203D4; return 0x82118118;
		/* 821203D0h case   12:*/		return 0x821203D4;
		  /* 821203D4h */ case   13:  		/* or. R31, R3, R3 */
		/* 821203D4h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821203D4h case   13:*/		return 0x821203D8;
		  /* 821203D8h */ case   14:  		/* bc 12, CR0_EQ, 188 */
		/* 821203D8h case   14:*/		if ( regs.CR[0].eq ) { return 0x82120494;  }
		/* 821203D8h case   14:*/		return 0x821203DC;
		  /* 821203DCh */ case   15:  		/* lwz R11, <#[R1 + 164]> */
		/* 821203DCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821203DCh case   15:*/		return 0x821203E0;
		  /* 821203E0h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821203E0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821203E0h case   16:*/		return 0x821203E4;
		  /* 821203E4h */ case   17:  		/* bc 12, CR6_EQ, 176 */
		/* 821203E4h case   17:*/		if ( regs.CR[6].eq ) { return 0x82120494;  }
		/* 821203E4h case   17:*/		return 0x821203E8;
		  /* 821203E8h */ case   18:  		/* addi R9, R1, 160 */
		/* 821203E8h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 821203E8h case   18:*/		return 0x821203EC;
		  /* 821203ECh */ case   19:  		/* addi R8, R1, 164 */
		/* 821203ECh case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA4);
		/* 821203ECh case   19:*/		return 0x821203F0;
		  /* 821203F0h */ case   20:  		/* addi R11, R1, 176 */
		/* 821203F0h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 821203F0h case   20:*/		return 0x821203F4;
		  /* 821203F4h */ case   21:  		/* stw R9, <#[R1 + 92]> */
		/* 821203F4h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 821203F4h case   21:*/		return 0x821203F8;
		  /* 821203F8h */ case   22:  		/* stw R8, <#[R1 + 84]> */
		/* 821203F8h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821203F8h case   22:*/		return 0x821203FC;
		  /* 821203FCh */ case   23:  		/* mr R10, R23 */
		/* 821203FCh case   23:*/		regs.R10 = regs.R23;
		/* 821203FCh case   23:*/		return 0x82120400;
		  /* 82120400h */ case   24:  		/* mr R9, R29 */
		/* 82120400h case   24:*/		regs.R9 = regs.R29;
		/* 82120400h case   24:*/		return 0x82120404;
		  /* 82120404h */ case   25:  		/* stw R11, <#[R1 + 100]> */
		/* 82120404h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82120404h case   25:*/		return 0x82120408;
		  /* 82120408h */ case   26:  		/* mr R8, R27 */
		/* 82120408h case   26:*/		regs.R8 = regs.R27;
		/* 82120408h case   26:*/		return 0x8212040C;
		  /* 8212040Ch */ case   27:  		/* mr R7, R28 */
		/* 8212040Ch case   27:*/		regs.R7 = regs.R28;
		/* 8212040Ch case   27:*/		return 0x82120410;
		  /* 82120410h */ case   28:  		/* mr R6, R21 */
		/* 82120410h case   28:*/		regs.R6 = regs.R21;
		/* 82120410h case   28:*/		return 0x82120414;
		  /* 82120414h */ case   29:  		/* mr R5, R26 */
		/* 82120414h case   29:*/		regs.R5 = regs.R26;
		/* 82120414h case   29:*/		return 0x82120418;
		  /* 82120418h */ case   30:  		/* mr R4, R31 */
		/* 82120418h case   30:*/		regs.R4 = regs.R31;
		/* 82120418h case   30:*/		return 0x8212041C;
		  /* 8212041Ch */ case   31:  		/* mr R3, R22 */
		/* 8212041Ch case   31:*/		regs.R3 = regs.R22;
		/* 8212041Ch case   31:*/		return 0x82120420;
		  /* 82120420h */ case   32:  		/* bl -2032 */
		/* 82120420h case   32:*/		regs.LR = 0x82120424; return 0x8211FC30;
		/* 82120420h case   32:*/		return 0x82120424;
		  /* 82120424h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 82120424h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120424h case   33:*/		return 0x82120428;
		  /* 82120428h */ case   34:  		/* bc 12, CR0_LT, 324 */
		/* 82120428h case   34:*/		if ( regs.CR[0].lt ) { return 0x8212056C;  }
		/* 82120428h case   34:*/		return 0x8212042C;
		  /* 8212042Ch */ case   35:  		/* lwz R31, <#[R31 + 12]> */
		/* 8212042Ch case   35:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212042Ch case   35:*/		return 0x82120430;
		  /* 82120430h */ case   36:  		/* cmplwi CR6, R31, 0 */
		/* 82120430h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82120430h case   36:*/		return 0x82120434;
		  /* 82120434h */ case   37:  		/* bc 4, CR6_EQ, -88 */
		/* 82120434h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821203DC;  }
		/* 82120434h case   37:*/		return 0x82120438;
		  /* 82120438h */ case   38:  		/* b 92 */
		/* 82120438h case   38:*/		return 0x82120494;
		/* 82120438h case   38:*/		return 0x8212043C;
	}
	return 0x8212043C;
} // Block from 821203A0h-8212043Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8212043Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212043C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212043C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212043C);
		  /* 8212043Ch */ case    0:  		/* lwz R4, <#[R29 + 24]> */
		/* 8212043Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000018) );
		/* 8212043Ch case    0:*/		return 0x82120440;
		  /* 82120440h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82120440h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82120440h case    1:*/		return 0x82120444;
		  /* 82120444h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 82120444h case    2:*/		if ( regs.CR[6].eq ) { return 0x82120494;  }
		/* 82120444h case    2:*/		return 0x82120448;
		  /* 82120448h */ case    3:  		/* lwz R11, <#[R29 + 32]> */
		/* 82120448h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 82120448h case    3:*/		return 0x8212044C;
		  /* 8212044Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8212044Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212044Ch case    4:*/		return 0x82120450;
	}
	return 0x82120450;
} // Block from 8212043Ch-82120450h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82120450h
// Function '?Eval@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120450);
		  /* 82120450h */ case    0:  		/* bc 4, CR6_EQ, 68 */
		/* 82120450h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82120494;  }
		/* 82120450h case    0:*/		return 0x82120454;
		  /* 82120454h */ case    1:  		/* addi R9, R1, 160 */
		/* 82120454h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 82120454h case    1:*/		return 0x82120458;
		  /* 82120458h */ case    2:  		/* addi R8, R1, 164 */
		/* 82120458h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA4);
		/* 82120458h case    2:*/		return 0x8212045C;
		  /* 8212045Ch */ case    3:  		/* addi R11, R1, 176 */
		/* 8212045Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 8212045Ch case    3:*/		return 0x82120460;
		  /* 82120460h */ case    4:  		/* stw R9, <#[R1 + 92]> */
		/* 82120460h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 82120460h case    4:*/		return 0x82120464;
		  /* 82120464h */ case    5:  		/* stw R8, <#[R1 + 84]> */
		/* 82120464h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 82120464h case    5:*/		return 0x82120468;
		  /* 82120468h */ case    6:  		/* mr R10, R30 */
		/* 82120468h case    6:*/		regs.R10 = regs.R30;
		/* 82120468h case    6:*/		return 0x8212046C;
		  /* 8212046Ch */ case    7:  		/* mr R9, R23 */
		/* 8212046Ch case    7:*/		regs.R9 = regs.R23;
		/* 8212046Ch case    7:*/		return 0x82120470;
		  /* 82120470h */ case    8:  		/* stw R11, <#[R1 + 100]> */
		/* 82120470h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82120470h case    8:*/		return 0x82120474;
		  /* 82120474h */ case    9:  		/* mr R8, R27 */
		/* 82120474h case    9:*/		regs.R8 = regs.R27;
		/* 82120474h case    9:*/		return 0x82120478;
		  /* 82120478h */ case   10:  		/* mr R7, R28 */
		/* 82120478h case   10:*/		regs.R7 = regs.R28;
		/* 82120478h case   10:*/		return 0x8212047C;
		  /* 8212047Ch */ case   11:  		/* mr R6, R21 */
		/* 8212047Ch case   11:*/		regs.R6 = regs.R21;
		/* 8212047Ch case   11:*/		return 0x82120480;
		  /* 82120480h */ case   12:  		/* mr R5, R26 */
		/* 82120480h case   12:*/		regs.R5 = regs.R26;
		/* 82120480h case   12:*/		return 0x82120484;
		  /* 82120484h */ case   13:  		/* mr R3, R22 */
		/* 82120484h case   13:*/		regs.R3 = regs.R22;
		/* 82120484h case   13:*/		return 0x82120488;
		  /* 82120488h */ case   14:  		/* bl -1600 */
		/* 82120488h case   14:*/		regs.LR = 0x8212048C; return 0x8211FE48;
		/* 82120488h case   14:*/		return 0x8212048C;
		  /* 8212048Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8212048Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212048Ch case   15:*/		return 0x82120490;
		  /* 82120490h */ case   16:  		/* bc 12, CR0_LT, 220 */
		/* 82120490h case   16:*/		if ( regs.CR[0].lt ) { return 0x8212056C;  }
		/* 82120490h case   16:*/		return 0x82120494;
	}
	return 0x82120494;
} // Block from 82120450h-82120494h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82120494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120494);
		  /* 82120494h */ case    0:  		/* lwz R29, <#[R29 + 32]> */
		/* 82120494h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000020) );
		/* 82120494h case    0:*/		return 0x82120498;
		  /* 82120498h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82120498h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82120498h case    1:*/		return 0x8212049C;
		  /* 8212049Ch */ case    2:  		/* bc 4, CR6_EQ, -236 */
		/* 8212049Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821203B0;  }
		/* 8212049Ch case    2:*/		return 0x821204A0;
	}
	return 0x821204A0;
} // Block from 82120494h-821204A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821204A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821204A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821204A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821204A0);
		  /* 821204A0h */ case    0:  		/* lwz R11, <#[R1 + 164]> */
		/* 821204A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821204A0h case    0:*/		return 0x821204A4;
		  /* 821204A4h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 821204A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 821204A4h case    1:*/		return 0x821204A8;
		  /* 821204A8h */ case    2:  		/* bc 12, CR6_EQ, 440 */
		/* 821204A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82120660;  }
		/* 821204A8h case    2:*/		return 0x821204AC;
		  /* 821204ACh */ case    3:  		/* rlwinm. R11, R23, 0, 29, 29 */
		/* 821204ACh case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R23);
		/* 821204ACh case    3:*/		return 0x821204B0;
		  /* 821204B0h */ case    4:  		/* lwz R11, <#[R1 + 176]> */
		/* 821204B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821204B0h case    4:*/		return 0x821204B4;
		  /* 821204B4h */ case    5:  		/* bc 12, CR0_EQ, 156 */
		/* 821204B4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82120550;  }
		/* 821204B4h case    5:*/		return 0x821204B8;
		  /* 821204B8h */ case    6:  		/* lwz R10, <#[R1 + 160]> */
		/* 821204B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821204B8h case    6:*/		return 0x821204BC;
		  /* 821204BCh */ case    7:  		/* li R29, 1 */
		/* 821204BCh case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821204BCh case    7:*/		return 0x821204C0;
		  /* 821204C0h */ case    8:  		/* lwz R31, <#[R11 + 24]> */
		/* 821204C0h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000018) );
		/* 821204C0h case    8:*/		return 0x821204C4;
		  /* 821204C4h */ case    9:  		/* cmplwi CR6, R10, 1 */
		/* 821204C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821204C4h case    9:*/		return 0x821204C8;
		  /* 821204C8h */ case   10:  		/* bc 4, CR6_GT, 136 */
		/* 821204C8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82120550;  }
		/* 821204C8h case   10:*/		return 0x821204CC;
		  /* 821204CCh */ case   11:  		/* addi R30, R1, 180 */
		/* 821204CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xB4);
		/* 821204CCh case   11:*/		return 0x821204D0;
		  /* 821204D0h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 821204D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821204D0h case   12:*/		return 0x821204D4;
		  /* 821204D4h */ case   13:  		/* mr R3, R22 */
		/* 821204D4h case   13:*/		regs.R3 = regs.R22;
		/* 821204D4h case   13:*/		return 0x821204D8;
		  /* 821204D8h */ case   14:  		/* lwz R4, <#[R31 + 40]> */
		/* 821204D8h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 821204D8h case   14:*/		return 0x821204DC;
		  /* 821204DCh */ case   15:  		/* lwz R9, <#[R11 + 24]> */
		/* 821204DCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 821204DCh case   15:*/		return 0x821204E0;
		  /* 821204E0h */ case   16:  		/* lwz R5, <#[R9 + 40]> */
		/* 821204E0h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000028) );
		/* 821204E0h case   16:*/		return 0x821204E4;
		  /* 821204E4h */ case   17:  		/* bl -33260 */
		/* 821204E4h case   17:*/		regs.LR = 0x821204E8; return 0x821182F8;
		/* 821204E4h case   17:*/		return 0x821204E8;
		  /* 821204E8h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 821204E8h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821204E8h case   18:*/		return 0x821204EC;
		  /* 821204ECh */ case   19:  		/* bc 12, CR0_EQ, 56 */
		/* 821204ECh case   19:*/		if ( regs.CR[0].eq ) { return 0x82120524;  }
		/* 821204ECh case   19:*/		return 0x821204F0;
		  /* 821204F0h */ case   20:  		/* li R7, 0 */
		/* 821204F0h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821204F0h case   20:*/		return 0x821204F4;
		  /* 821204F4h */ case   21:  		/* lwz R6, <#[R9 + 44]> */
		/* 821204F4h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x0000002C) );
		/* 821204F4h case   21:*/		return 0x821204F8;
		  /* 821204F8h */ case   22:  		/* mr R4, R31 */
		/* 821204F8h case   22:*/		regs.R4 = regs.R31;
		/* 821204F8h case   22:*/		return 0x821204FC;
		  /* 821204FCh */ case   23:  		/* lwz R5, <#[R31 + 36]> */
		/* 821204FCh case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000024) );
		/* 821204FCh case   23:*/		return 0x82120500;
		  /* 82120500h */ case   24:  		/* mr R3, R22 */
		/* 82120500h case   24:*/		regs.R3 = regs.R22;
		/* 82120500h case   24:*/		return 0x82120504;
		  /* 82120504h */ case   25:  		/* bl -31052 */
		/* 82120504h case   25:*/		regs.LR = 0x82120508; return 0x82118BB8;
		/* 82120504h case   25:*/		return 0x82120508;
		  /* 82120508h */ case   26:  		/* cmpwi CR6, R3, -1 */
		/* 82120508h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82120508h case   26:*/		return 0x8212050C;
		  /* 8212050Ch */ case   27:  		/* bc 12, CR6_EQ, 24 */
		/* 8212050Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x82120524;  }
		/* 8212050Ch case   27:*/		return 0x82120510;
		  /* 82120510h */ case   28:  		/* lwz R11, <#[R1 + 160]> */
		/* 82120510h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82120510h case   28:*/		return 0x82120514;
		  /* 82120514h */ case   29:  		/* addi R29, R29, 1 */
		/* 82120514h case   29:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82120514h case   29:*/		return 0x82120518;
		  /* 82120518h */ case   30:  		/* addi R30, R30, 4 */
		/* 82120518h case   30:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82120518h case   30:*/		return 0x8212051C;
		  /* 8212051Ch */ case   31:  		/* cmplw CR6, R29, R11 */
		/* 8212051Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8212051Ch case   31:*/		return 0x82120520;
		  /* 82120520h */ case   32:  		/* bc 12, CR6_LT, -80 */
		/* 82120520h case   32:*/		if ( regs.CR[6].lt ) { return 0x821204D0;  }
		/* 82120520h case   32:*/		return 0x82120524;
	}
	return 0x82120524;
} // Block from 821204A0h-82120524h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82120524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120524);
		  /* 82120524h */ case    0:  		/* lwz R11, <#[R1 + 160]> */
		/* 82120524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82120524h case    0:*/		return 0x82120528;
		  /* 82120528h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 82120528h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82120528h case    1:*/		return 0x8212052C;
		  /* 8212052Ch */ case    2:  		/* bc 4, CR6_LT, 32 */
		/* 8212052Ch case    2:*/		if ( !regs.CR[6].lt ) { return 0x8212054C;  }
		/* 8212052Ch case    2:*/		return 0x82120530;
		  /* 82120530h */ case    3:  		/* lis R11, -32253 */
		/* 82120530h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120530h case    3:*/		return 0x82120534;
		  /* 82120534h */ case    4:  		/* lwz R7, <#[R21 + 8]> */
		/* 82120534h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82120534h case    4:*/		return 0x82120538;
		  /* 82120538h */ case    5:  		/* li R5, 3067 */
		/* 82120538h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xBFB);
		/* 82120538h case    5:*/		return 0x8212053C;
		  /* 8212053Ch */ case    6:  		/* addi R6, R11, 9676 */
		/* 8212053Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x25CC);
		/* 8212053Ch case    6:*/		return 0x82120540;
		  /* 82120540h */ case    7:  		/* mr R4, R21 */
		/* 82120540h case    7:*/		regs.R4 = regs.R21;
		/* 82120540h case    7:*/		return 0x82120544;
		  /* 82120544h */ case    8:  		/* mr R3, R22 */
		/* 82120544h case    8:*/		regs.R3 = regs.R22;
		/* 82120544h case    8:*/		return 0x82120548;
		  /* 82120548h */ case    9:  		/* bl -27816 */
		/* 82120548h case    9:*/		regs.LR = 0x8212054C; return 0x821198A0;
		/* 82120548h case    9:*/		return 0x8212054C;
	}
	return 0x8212054C;
} // Block from 82120524h-8212054Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212054Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212054C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212054C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212054C);
		  /* 8212054Ch */ case    0:  		/* lwz R11, <#[R1 + 176]> */
		/* 8212054Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212054Ch case    0:*/		return 0x82120550;
	}
	return 0x82120550;
} // Block from 8212054Ch-82120550h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120550);
		  /* 82120550h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 82120550h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120550h case    0:*/		return 0x82120554;
		  /* 82120554h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 82120554h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120598;  }
		/* 82120554h case    1:*/		return 0x82120558;
		  /* 82120558h */ case    2:  		/* rlwinm. R10, R23, 0, 30, 30 */
		/* 82120558h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R23);
		/* 82120558h case    2:*/		return 0x8212055C;
		  /* 8212055Ch */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8212055Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8212057C;  }
		/* 8212055Ch case    3:*/		return 0x82120560;
		  /* 82120560h */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 82120560h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82120560h case    4:*/		return 0x82120564;
		  /* 82120564h */ case    5:  		/* stw R11, <#[R20]> */
		/* 82120564h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82120564h case    5:*/		return 0x82120568;
		  /* 82120568h */ case    6:  		/* b 48 */
		/* 82120568h case    6:*/		return 0x82120598;
		/* 82120568h case    6:*/		return 0x8212056C;
	}
	return 0x8212056C;
} // Block from 82120550h-8212056Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212056Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212056C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212056C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212056C);
		  /* 8212056Ch */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8212056Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8212056Ch case    0:*/		return 0x82120570;
		  /* 82120570h */ case    1:  		/* bc 12, CR6_EQ, 1384 */
		/* 82120570h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120AD8;  }
		/* 82120570h case    1:*/		return 0x82120574;
		  /* 82120574h */ case    2:  		/* stw R19, <#[R20]> */
		/* 82120574h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R20 + 0x00000000) );
		/* 82120574h case    2:*/		return 0x82120578;
		  /* 82120578h */ case    3:  		/* b 1376 */
		/* 82120578h case    3:*/		return 0x82120AD8;
		/* 82120578h case    3:*/		return 0x8212057C;
	}
	return 0x8212057C;
} // Block from 8212056Ch-8212057Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212057Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212057C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212057C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212057C);
		  /* 8212057Ch */ case    0:  		/* lwz R3, <#[R11 + 24]> */
		/* 8212057Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000018) );
		/* 8212057Ch case    0:*/		return 0x82120580;
		  /* 82120580h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82120580h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82120580h case    1:*/		return 0x82120584;
		  /* 82120584h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82120584h case    2:*/		if ( regs.CR[6].eq ) { return 0x82120598;  }
		/* 82120584h case    2:*/		return 0x82120588;
		  /* 82120588h */ case    3:  		/* bl -356896 */
		/* 82120588h case    3:*/		regs.LR = 0x8212058C; return 0x820C9368;
		/* 82120588h case    3:*/		return 0x8212058C;
		  /* 8212058Ch */ case    4:  		/* stw R3, <#[R20]> */
		/* 8212058Ch case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R20 + 0x00000000) );
		/* 8212058Ch case    4:*/		return 0x82120590;
		  /* 82120590h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82120590h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120590h case    5:*/		return 0x82120594;
		  /* 82120594h */ case    6:  		/* bc 12, CR0_EQ, -1036 */
		/* 82120594h case    6:*/		if ( regs.CR[0].eq ) { return 0x82120188;  }
		/* 82120594h case    6:*/		return 0x82120598;
	}
	return 0x82120598;
} // Block from 8212057Ch-82120598h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82120598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120598);
		  /* 82120598h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82120598h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82120598h case    0:*/		return 0x8212059C;
		  /* 8212059Ch */ case    1:  		/* bc 12, CR6_EQ, 188 */
		/* 8212059Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 8212059Ch case    1:*/		return 0x821205A0;
		  /* 821205A0h */ case    2:  		/* lwz R11, <#[R1 + 160]> */
		/* 821205A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 821205A0h case    2:*/		return 0x821205A4;
		  /* 821205A4h */ case    3:  		/* addi R31, R1, 168 */
		/* 821205A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xA8);
		/* 821205A4h case    3:*/		return 0x821205A8;
		  /* 821205A8h */ case    4:  		/* stw R19, <#[R1 + 168]> */
		/* 821205A8h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x000000A8) );
		/* 821205A8h case    4:*/		return 0x821205AC;
		  /* 821205ACh */ case    5:  		/* mr R29, R19 */
		/* 821205ACh case    5:*/		regs.R29 = regs.R19;
		/* 821205ACh case    5:*/		return 0x821205B0;
		  /* 821205B0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821205B0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821205B0h case    6:*/		return 0x821205B4;
		  /* 821205B4h */ case    7:  		/* bc 12, CR6_EQ, 156 */
		/* 821205B4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82120650;  }
		/* 821205B4h case    7:*/		return 0x821205B8;
		  /* 821205B8h */ case    8:  		/* lis R11, -32253 */
		/* 821205B8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821205B8h case    8:*/		return 0x821205BC;
		  /* 821205BCh */ case    9:  		/* addi R30, R1, 176 */
		/* 821205BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xB0);
		/* 821205BCh case    9:*/		return 0x821205C0;
		  /* 821205C0h */ case   10:  		/* addi R28, R11, 8868 */
		/* 821205C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x22A4);
		/* 821205C0h case   10:*/		return 0x821205C4;
		  /* 821205C4h */ case   11:  		/* li R3, 20 */
		/* 821205C4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821205C4h case   11:*/		return 0x821205C8;
		  /* 821205C8h */ case   12:  		/* bl -357280 */
		/* 821205C8h case   12:*/		regs.LR = 0x821205CC; return 0x820C9228;
		/* 821205C8h case   12:*/		return 0x821205CC;
		  /* 821205CCh */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 821205CCh case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821205CCh case   13:*/		return 0x821205D0;
		  /* 821205D0h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 821205D0h case   14:*/		if ( regs.CR[0].eq ) { return 0x821205E8;  }
		/* 821205D0h case   14:*/		return 0x821205D4;
		  /* 821205D4h */ case   15:  		/* mr R6, R28 */
		/* 821205D4h case   15:*/		regs.R6 = regs.R28;
		/* 821205D4h case   15:*/		return 0x821205D8;
		  /* 821205D8h */ case   16:  		/* li R5, 0 */
		/* 821205D8h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821205D8h case   16:*/		return 0x821205DC;
		  /* 821205DCh */ case   17:  		/* li R4, 0 */
		/* 821205DCh case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821205DCh case   17:*/		return 0x821205E0;
		  /* 821205E0h */ case   18:  		/* bl -356848 */
		/* 821205E0h case   18:*/		regs.LR = 0x821205E4; return 0x820C93F0;
		/* 821205E0h case   18:*/		return 0x821205E4;
		  /* 821205E4h */ case   19:  		/* b 8 */
		/* 821205E4h case   19:*/		return 0x821205EC;
		/* 821205E4h case   19:*/		return 0x821205E8;
	}
	return 0x821205E8;
} // Block from 82120598h-821205E8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821205E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821205E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821205E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821205E8);
		  /* 821205E8h */ case    0:  		/* mr R3, R19 */
		/* 821205E8h case    0:*/		regs.R3 = regs.R19;
		/* 821205E8h case    0:*/		return 0x821205EC;
	}
	return 0x821205EC;
} // Block from 821205E8h-821205ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821205ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821205EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821205EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821205EC);
		  /* 821205ECh */ case    0:  		/* stw R3, <#[R31]> */
		/* 821205ECh case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821205ECh case    0:*/		return 0x821205F0;
	}
	return 0x821205F0;
} // Block from 821205ECh-821205F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821205F0h
// Function '?EvalUint@CParse@D3DXShader@@IAAJPAVCNode@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821205F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821205F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821205F0);
		  /* 821205F0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821205F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821205F0h case    0:*/		return 0x821205F4;
		  /* 821205F4h */ case    1:  		/* bc 12, CR6_EQ, -1132 */
		/* 821205F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120188;  }
		/* 821205F4h case    1:*/		return 0x821205F8;
		  /* 821205F8h */ case    2:  		/* li R3, 72 */
		/* 821205F8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 821205F8h case    2:*/		return 0x821205FC;
		  /* 821205FCh */ case    3:  		/* bl -357332 */
		/* 821205FCh case    3:*/		regs.LR = 0x82120600; return 0x820C9228;
		/* 821205FCh case    3:*/		return 0x82120600;
		  /* 82120600h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82120600h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120600h case    4:*/		return 0x82120604;
		  /* 82120604h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 82120604h case    5:*/		if ( regs.CR[0].eq ) { return 0x82120620;  }
		/* 82120604h case    5:*/		return 0x82120608;
		  /* 82120608h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 82120608h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82120608h case    6:*/		return 0x8212060C;
		  /* 8212060Ch */ case    7:  		/* mr R6, R21 */
		/* 8212060Ch case    7:*/		regs.R6 = regs.R21;
		/* 8212060Ch case    7:*/		return 0x82120610;
		  /* 82120610h */ case    8:  		/* li R4, 2 */
		/* 82120610h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82120610h case    8:*/		return 0x82120614;
		  /* 82120614h */ case    9:  		/* lwz R5, <#[R11 + 40]> */
		/* 82120614h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000028) );
		/* 82120614h case    9:*/		return 0x82120618;
		  /* 82120618h */ case   10:  		/* bl -344640 */
		/* 82120618h case   10:*/		regs.LR = 0x8212061C; return 0x820CC3D8;
		/* 82120618h case   10:*/		return 0x8212061C;
		  /* 8212061Ch */ case   11:  		/* b 8 */
		/* 8212061Ch case   11:*/		return 0x82120624;
		/* 8212061Ch case   11:*/		return 0x82120620;
	}
	return 0x82120620;
} // Block from 821205F0h-82120620h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82120620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120620);
		  /* 82120620h */ case    0:  		/* mr R3, R19 */
		/* 82120620h case    0:*/		regs.R3 = regs.R19;
		/* 82120620h case    0:*/		return 0x82120624;
	}
	return 0x82120624;
} // Block from 82120620h-82120624h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120624);
		  /* 82120624h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82120624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120624h case    0:*/		return 0x82120628;
		  /* 82120628h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82120628h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82120628h case    1:*/		return 0x8212062C;
		  /* 8212062Ch */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 8212062Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8212062Ch case    2:*/		return 0x82120630;
		  /* 82120630h */ case    3:  		/* bc 12, CR6_EQ, -1192 */
		/* 82120630h case    3:*/		if ( regs.CR[6].eq ) { return 0x82120188;  }
		/* 82120630h case    3:*/		return 0x82120634;
		  /* 82120634h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82120634h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120634h case    4:*/		return 0x82120638;
		  /* 82120638h */ case    5:  		/* addi R29, R29, 1 */
		/* 82120638h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82120638h case    5:*/		return 0x8212063C;
		  /* 8212063Ch */ case    6:  		/* lwz R10, <#[R1 + 160]> */
		/* 8212063Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 8212063Ch case    6:*/		return 0x82120640;
		  /* 82120640h */ case    7:  		/* addi R30, R30, 4 */
		/* 82120640h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82120640h case    7:*/		return 0x82120644;
		  /* 82120644h */ case    8:  		/* addi R31, R11, 12 */
		/* 82120644h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xC);
		/* 82120644h case    8:*/		return 0x82120648;
		  /* 82120648h */ case    9:  		/* cmplw CR6, R29, R10 */
		/* 82120648h case    9:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 82120648h case    9:*/		return 0x8212064C;
		  /* 8212064Ch */ case   10:  		/* bc 12, CR6_LT, -136 */
		/* 8212064Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821205C4;  }
		/* 8212064Ch case   10:*/		return 0x82120650;
	}
	return 0x82120650;
} // Block from 82120624h-82120650h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82120650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120650);
		  /* 82120650h */ case    0:  		/* lwz R11, <#[R1 + 168]> */
		/* 82120650h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 82120650h case    0:*/		return 0x82120654;
		  /* 82120654h */ case    1:  		/* stw R11, <#[R24]> */
		/* 82120654h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82120654h case    1:*/		return 0x82120658;
	}
	return 0x82120658;
} // Block from 82120650h-82120658h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120658);
		  /* 82120658h */ case    0:  		/* li R3, 0 */
		/* 82120658h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120658h case    0:*/		return 0x8212065C;
		  /* 8212065Ch */ case    1:  		/* b 1148 */
		/* 8212065Ch case    1:*/		return 0x82120AD8;
		/* 8212065Ch case    1:*/		return 0x82120660;
	}
	return 0x82120660;
} // Block from 82120658h-82120660h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120660);
		  /* 82120660h */ case    0:  		/* rlwinm. R11, R23, 0, 30, 30 */
		/* 82120660h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R23);
		/* 82120660h case    0:*/		return 0x82120664;
		  /* 82120664h */ case    1:  		/* bc 4, CR0_EQ, 1100 */
		/* 82120664h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82120AB0;  }
		/* 82120664h case    1:*/		return 0x82120668;
		  /* 82120668h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 82120668h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82120668h case    2:*/		return 0x8212066C;
		  /* 8212066Ch */ case    3:  		/* bc 4, CR6_EQ, 1092 */
		/* 8212066Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82120AB0;  }
		/* 8212066Ch case    3:*/		return 0x82120670;
		  /* 82120670h */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 82120670h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82120670h case    4:*/		return 0x82120674;
		  /* 82120674h */ case    5:  		/* bc 4, CR6_EQ, 1084 */
		/* 82120674h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82120AB0;  }
		/* 82120674h case    5:*/		return 0x82120678;
		  /* 82120678h */ case    6:  		/* lis R11, -32253 */
		/* 82120678h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120678h case    6:*/		return 0x8212067C;
		  /* 8212067Ch */ case    7:  		/* lwz R3, <#[R21 + 8]> */
		/* 8212067Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 8212067Ch case    7:*/		return 0x82120680;
		  /* 82120680h */ case    8:  		/* addi R4, R11, 9668 */
		/* 82120680h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x25C4);
		/* 82120680h case    8:*/		return 0x82120684;
		  /* 82120684h */ case    9:  		/* bl -578132 */
		/* 82120684h case    9:*/		regs.LR = 0x82120688; return 0x82093430;
		/* 82120684h case    9:*/		return 0x82120688;
		  /* 82120688h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82120688h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120688h case   10:*/		return 0x8212068C;
		  /* 8212068Ch */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 8212068Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82120698;  }
		/* 8212068Ch case   11:*/		return 0x82120690;
		  /* 82120690h */ case   12:  		/* li R31, 9 */
		/* 82120690h case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x9);
		/* 82120690h case   12:*/		return 0x82120694;
		  /* 82120694h */ case   13:  		/* b 36 */
		/* 82120694h case   13:*/		return 0x821206B8;
		/* 82120694h case   13:*/		return 0x82120698;
	}
	return 0x82120698;
} // Block from 82120660h-82120698h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82120698h
// Function '?CaseCondExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120698);
		  /* 82120698h */ case    0:  		/* lis R11, -32255 */
		/* 82120698h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82120698h case    0:*/		return 0x8212069C;
		  /* 8212069Ch */ case    1:  		/* lwz R3, <#[R21 + 8]> */
		/* 8212069Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 8212069Ch case    1:*/		return 0x821206A0;
		  /* 821206A0h */ case    2:  		/* addi R31, R11, -15796 */
		/* 821206A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFC24C);
		/* 821206A0h case    2:*/		return 0x821206A4;
		  /* 821206A4h */ case    3:  		/* mr R4, R31 */
		/* 821206A4h case    3:*/		regs.R4 = regs.R31;
		/* 821206A4h case    3:*/		return 0x821206A8;
		  /* 821206A8h */ case    4:  		/* bl -578168 */
		/* 821206A8h case    4:*/		regs.LR = 0x821206AC; return 0x82093430;
		/* 821206A8h case    4:*/		return 0x821206AC;
		  /* 821206ACh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 821206ACh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821206ACh case    5:*/		return 0x821206B0;
		  /* 821206B0h */ case    6:  		/* bc 4, CR0_EQ, 48 */
		/* 821206B0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821206E0;  }
		/* 821206B0h case    6:*/		return 0x821206B4;
		  /* 821206B4h */ case    7:  		/* li R31, 12 */
		/* 821206B4h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0xC);
		/* 821206B4h case    7:*/		return 0x821206B8;
	}
	return 0x821206B8;
} // Block from 82120698h-821206B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821206B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821206B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821206B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821206B8);
		  /* 821206B8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821206B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821206B8h case    0:*/		return 0x821206BC;
		  /* 821206BCh */ case    1:  		/* bc 12, CR6_EQ, -100 */
		/* 821206BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 821206BCh case    1:*/		return 0x821206C0;
		  /* 821206C0h */ case    2:  		/* li R3, 40 */
		/* 821206C0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821206C0h case    2:*/		return 0x821206C4;
		  /* 821206C4h */ case    3:  		/* bl -357532 */
		/* 821206C4h case    3:*/		regs.LR = 0x821206C8; return 0x820C9228;
		/* 821206C4h case    3:*/		return 0x821206C8;
		  /* 821206C8h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821206C8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821206C8h case    4:*/		return 0x821206CC;
		  /* 821206CCh */ case    5:  		/* bc 12, CR0_EQ, -1364 */
		/* 821206CCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 821206CCh case    5:*/		return 0x821206D0;
		  /* 821206D0h */ case    6:  		/* li R8, 1 */
		/* 821206D0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821206D0h case    6:*/		return 0x821206D4;
		  /* 821206D4h */ case    7:  		/* mr R5, R31 */
		/* 821206D4h case    7:*/		regs.R5 = regs.R31;
		/* 821206D4h case    7:*/		return 0x821206D8;
		  /* 821206D8h */ case    8:  		/* li R4, 0 */
		/* 821206D8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821206D8h case    8:*/		return 0x821206DC;
		  /* 821206DCh */ case    9:  		/* b -1400 */
		/* 821206DCh case    9:*/		return 0x82120164;
		/* 821206DCh case    9:*/		return 0x821206E0;
	}
	return 0x821206E0;
} // Block from 821206B8h-821206E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821206E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821206E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821206E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821206E0);
		  /* 821206E0h */ case    0:  		/* lis R11, -32255 */
		/* 821206E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821206E0h case    0:*/		return 0x821206E4;
		  /* 821206E4h */ case    1:  		/* lwz R3, <#[R21 + 8]> */
		/* 821206E4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 821206E4h case    1:*/		return 0x821206E8;
		  /* 821206E8h */ case    2:  		/* addi R4, R11, 12460 */
		/* 821206E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x30AC);
		/* 821206E8h case    2:*/		return 0x821206EC;
		  /* 821206ECh */ case    3:  		/* bl -578236 */
		/* 821206ECh case    3:*/		regs.LR = 0x821206F0; return 0x82093430;
		/* 821206ECh case    3:*/		return 0x821206F0;
		  /* 821206F0h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 821206F0h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821206F0h case    4:*/		return 0x821206F4;
		  /* 821206F4h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821206F4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8212071C;  }
		/* 821206F4h case    5:*/		return 0x821206F8;
		  /* 821206F8h */ case    6:  		/* cmplwi CR6, R20, 0 */
		/* 821206F8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821206F8h case    6:*/		return 0x821206FC;
		  /* 821206FCh */ case    7:  		/* bc 12, CR6_EQ, -164 */
		/* 821206FCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 821206FCh case    7:*/		return 0x82120700;
		  /* 82120700h */ case    8:  		/* li R3, 40 */
		/* 82120700h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120700h case    8:*/		return 0x82120704;
		  /* 82120704h */ case    9:  		/* bl -357596 */
		/* 82120704h case    9:*/		regs.LR = 0x82120708; return 0x820C9228;
		/* 82120704h case    9:*/		return 0x82120708;
		  /* 82120708h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82120708h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120708h case   10:*/		return 0x8212070C;
		  /* 8212070Ch */ case   11:  		/* bc 12, CR0_EQ, -1428 */
		/* 8212070Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 8212070Ch case   11:*/		return 0x82120710;
		  /* 82120710h */ case   12:  		/* li R8, 4 */
		/* 82120710h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82120710h case   12:*/		return 0x82120714;
		  /* 82120714h */ case   13:  		/* li R5, 12 */
		/* 82120714h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82120714h case   13:*/		return 0x82120718;
		  /* 82120718h */ case   14:  		/* b -1464 */
		/* 82120718h case   14:*/		return 0x82120160;
		/* 82120718h case   14:*/		return 0x8212071C;
	}
	return 0x8212071C;
} // Block from 821206E0h-8212071Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212071Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212071C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212071C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212071C);
		  /* 8212071Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212071Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212071Ch case    0:*/		return 0x82120720;
		  /* 82120720h */ case    1:  		/* lwz R3, <#[R21 + 8]> */
		/* 82120720h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 82120720h case    1:*/		return 0x82120724;
		  /* 82120724h */ case    2:  		/* addi R4, R11, 9660 */
		/* 82120724h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x25BC);
		/* 82120724h case    2:*/		return 0x82120728;
		  /* 82120728h */ case    3:  		/* bl -578296 */
		/* 82120728h case    3:*/		regs.LR = 0x8212072C; return 0x82093430;
		/* 82120728h case    3:*/		return 0x8212072C;
		  /* 8212072Ch */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8212072Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212072Ch case    4:*/		return 0x82120730;
		  /* 82120730h */ case    5:  		/* bc 4, CR0_EQ, 44 */
		/* 82120730h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8212075C;  }
		/* 82120730h case    5:*/		return 0x82120734;
		  /* 82120734h */ case    6:  		/* cmplwi CR6, R20, 0 */
		/* 82120734h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120734h case    6:*/		return 0x82120738;
		  /* 82120738h */ case    7:  		/* bc 12, CR6_EQ, -224 */
		/* 82120738h case    7:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 82120738h case    7:*/		return 0x8212073C;
		  /* 8212073Ch */ case    8:  		/* li R3, 40 */
		/* 8212073Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212073Ch case    8:*/		return 0x82120740;
		  /* 82120740h */ case    9:  		/* bl -357656 */
		/* 82120740h case    9:*/		regs.LR = 0x82120744; return 0x820C9228;
		/* 82120740h case    9:*/		return 0x82120744;
		  /* 82120744h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82120744h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120744h case   10:*/		return 0x82120748;
		  /* 82120748h */ case   11:  		/* bc 12, CR0_EQ, -1488 */
		/* 82120748h case   11:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 82120748h case   11:*/		return 0x8212074C;
		  /* 8212074Ch */ case   12:  		/* li R8, 4 */
		/* 8212074Ch case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212074Ch case   12:*/		return 0x82120750;
		  /* 82120750h */ case   13:  		/* li R7, 4 */
		/* 82120750h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82120750h case   13:*/		return 0x82120754;
		  /* 82120754h */ case   14:  		/* li R5, 12 */
		/* 82120754h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82120754h case   14:*/		return 0x82120758;
		  /* 82120758h */ case   15:  		/* b -1356 */
		/* 82120758h case   15:*/		return 0x8212020C;
		/* 82120758h case   15:*/		return 0x8212075C;
	}
	return 0x8212075C;
} // Block from 8212071Ch-8212075Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212075Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212075C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212075C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212075C);
		  /* 8212075Ch */ case    0:  		/* lwz R11, <#[R22 + 92]> */
		/* 8212075Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000005C) );
		/* 8212075Ch case    0:*/		return 0x82120760;
		  /* 82120760h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82120760h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82120760h case    1:*/		return 0x82120764;
		  /* 82120764h */ case    2:  		/* bc 12, CR6_EQ, 172 */
		/* 82120764h case    2:*/		if ( regs.CR[6].eq ) { return 0x82120810;  }
		/* 82120764h case    2:*/		return 0x82120768;
		  /* 82120768h */ case    3:  		/* lwz R11, <#[R22]> */
		/* 82120768h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82120768h case    3:*/		return 0x8212076C;
		  /* 8212076Ch */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8212076Ch case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8212076Ch case    4:*/		return 0x82120770;
		  /* 82120770h */ case    5:  		/* bc 4, CR0_EQ, 160 */
		/* 82120770h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82120810;  }
		/* 82120770h case    5:*/		return 0x82120774;
		  /* 82120774h */ case    6:  		/* lis R11, -32255 */
		/* 82120774h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82120774h case    6:*/		return 0x82120778;
		  /* 82120778h */ case    7:  		/* lwz R3, <#[R21 + 8]> */
		/* 82120778h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 82120778h case    7:*/		return 0x8212077C;
		  /* 8212077Ch */ case    8:  		/* addi R4, R11, 12292 */
		/* 8212077Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3004);
		/* 8212077Ch case    8:*/		return 0x82120780;
		  /* 82120780h */ case    9:  		/* bl -578384 */
		/* 82120780h case    9:*/		regs.LR = 0x82120784; return 0x82093430;
		/* 82120780h case    9:*/		return 0x82120784;
		  /* 82120784h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82120784h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120784h case   10:*/		return 0x82120788;
		  /* 82120788h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 82120788h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82120794;  }
		/* 82120788h case   11:*/		return 0x8212078C;
		  /* 8212078Ch */ case   12:  		/* li R31, 42 */
		/* 8212078Ch case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x2A);
		/* 8212078Ch case   12:*/		return 0x82120790;
		  /* 82120790h */ case   13:  		/* b 88 */
		/* 82120790h case   13:*/		return 0x821207E8;
		/* 82120790h case   13:*/		return 0x82120794;
	}
	return 0x82120794;
} // Block from 8212075Ch-82120794h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82120794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120794);
		  /* 82120794h */ case    0:  		/* lis R11, -32255 */
		/* 82120794h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82120794h case    0:*/		return 0x82120798;
	}
	return 0x82120798;
} // Block from 82120794h-82120798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120798h
// Function '?FindCompatibleDecl@CParse@D3DXShader@@IAAJPAVCNode@2@W4_D3DDECL_TYPE@2@PAUD3DXTOKEN@2@00PAVCNodeScope@2@KPAI4PAPAVCNodeDecl@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120798);
		  /* 82120798h */ case    0:  		/* lwz R3, <#[R21 + 8]> */
		/* 82120798h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 82120798h case    0:*/		return 0x8212079C;
		  /* 8212079Ch */ case    1:  		/* addi R4, R11, 12276 */
		/* 8212079Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2FF4);
		/* 8212079Ch case    1:*/		return 0x821207A0;
		  /* 821207A0h */ case    2:  		/* bl -578416 */
		/* 821207A0h case    2:*/		regs.LR = 0x821207A4; return 0x82093430;
		/* 821207A0h case    2:*/		return 0x821207A4;
		  /* 821207A4h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821207A4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821207A4h case    3:*/		return 0x821207A8;
		  /* 821207A8h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 821207A8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821207B4;  }
		/* 821207A8h case    4:*/		return 0x821207AC;
		  /* 821207ACh */ case    5:  		/* li R31, 43 */
		/* 821207ACh case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x2B);
		/* 821207ACh case    5:*/		return 0x821207B0;
		  /* 821207B0h */ case    6:  		/* b 56 */
		/* 821207B0h case    6:*/		return 0x821207E8;
		/* 821207B0h case    6:*/		return 0x821207B4;
	}
	return 0x821207B4;
} // Block from 82120798h-821207B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821207B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821207B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821207B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821207B4);
		  /* 821207B4h */ case    0:  		/* lis R11, -32255 */
		/* 821207B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821207B4h case    0:*/		return 0x821207B8;
		  /* 821207B8h */ case    1:  		/* lwz R3, <#[R21 + 8]> */
		/* 821207B8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 821207B8h case    1:*/		return 0x821207BC;
		  /* 821207BCh */ case    2:  		/* addi R4, R11, 12400 */
		/* 821207BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3070);
		/* 821207BCh case    2:*/		return 0x821207C0;
		  /* 821207C0h */ case    3:  		/* bl -578448 */
		/* 821207C0h case    3:*/		regs.LR = 0x821207C4; return 0x82093430;
		/* 821207C0h case    3:*/		return 0x821207C4;
		  /* 821207C4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 821207C4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821207C4h case    4:*/		return 0x821207C8;
		  /* 821207C8h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 821207C8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821207E4;  }
		/* 821207C8h case    5:*/		return 0x821207CC;
		  /* 821207CCh */ case    6:  		/* lis R11, -32255 */
		/* 821207CCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821207CCh case    6:*/		return 0x821207D0;
		  /* 821207D0h */ case    7:  		/* lwz R3, <#[R21 + 8]> */
		/* 821207D0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000008) );
		/* 821207D0h case    7:*/		return 0x821207D4;
		  /* 821207D4h */ case    8:  		/* addi R4, R11, 12408 */
		/* 821207D4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3078);
		/* 821207D4h case    8:*/		return 0x821207D8;
		  /* 821207D8h */ case    9:  		/* bl -578472 */
		/* 821207D8h case    9:*/		regs.LR = 0x821207DC; return 0x82093430;
		/* 821207D8h case    9:*/		return 0x821207DC;
		  /* 821207DCh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 821207DCh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821207DCh case   10:*/		return 0x821207E0;
		  /* 821207E0h */ case   11:  		/* bc 4, CR0_EQ, 48 */
		/* 821207E0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82120810;  }
		/* 821207E0h case   11:*/		return 0x821207E4;
	}
	return 0x821207E4;
} // Block from 821207B4h-821207E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821207E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821207E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821207E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821207E4);
		  /* 821207E4h */ case    0:  		/* li R31, 24 */
		/* 821207E4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x18);
		/* 821207E4h case    0:*/		return 0x821207E8;
	}
	return 0x821207E8;
} // Block from 821207E4h-821207E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821207E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821207E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821207E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821207E8);
		  /* 821207E8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821207E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821207E8h case    0:*/		return 0x821207EC;
		  /* 821207ECh */ case    1:  		/* bc 12, CR6_EQ, -404 */
		/* 821207ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 821207ECh case    1:*/		return 0x821207F0;
		  /* 821207F0h */ case    2:  		/* li R3, 40 */
		/* 821207F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821207F0h case    2:*/		return 0x821207F4;
		  /* 821207F4h */ case    3:  		/* bl -357836 */
		/* 821207F4h case    3:*/		regs.LR = 0x821207F8; return 0x820C9228;
		/* 821207F4h case    3:*/		return 0x821207F8;
		  /* 821207F8h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821207F8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821207F8h case    4:*/		return 0x821207FC;
		  /* 821207FCh */ case    5:  		/* bc 12, CR0_EQ, -1668 */
		/* 821207FCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 821207FCh case    5:*/		return 0x82120800;
		  /* 82120800h */ case    6:  		/* li R8, 1 */
		/* 82120800h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82120800h case    6:*/		return 0x82120804;
		  /* 82120804h */ case    7:  		/* mr R5, R31 */
		/* 82120804h case    7:*/		regs.R5 = regs.R31;
		/* 82120804h case    7:*/		return 0x82120808;
		  /* 82120808h */ case    8:  		/* li R4, 3 */
		/* 82120808h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82120808h case    8:*/		return 0x8212080C;
		  /* 8212080Ch */ case    9:  		/* b -1704 */
		/* 8212080Ch case    9:*/		return 0x82120164;
		/* 8212080Ch case    9:*/		return 0x82120810;
	}
	return 0x82120810;
} // Block from 821207E8h-82120810h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82120810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120810);
		  /* 82120810h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 82120810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 82120810h case    0:*/		return 0x82120814;
		  /* 82120814h */ case    1:  		/* mr R10, R11 */
		/* 82120814h case    1:*/		regs.R10 = regs.R11;
		/* 82120814h case    1:*/		return 0x82120818;
		  /* 82120818h */ case    2:  		/* lbz R9, <#[R10]> */
		/* 82120818h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82120818h case    2:*/		return 0x8212081C;
		  /* 8212081Ch */ case    3:  		/* addi R10, R10, 1 */
		/* 8212081Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212081Ch case    3:*/		return 0x82120820;
		  /* 82120820h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 82120820h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82120820h case    4:*/		return 0x82120824;
		  /* 82120824h */ case    5:  		/* bc 4, CR6_EQ, -12 */
		/* 82120824h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82120818;  }
		/* 82120824h case    5:*/		return 0x82120828;
		  /* 82120828h */ case    6:  		/* subf R10, R11, R10 */
		/* 82120828h case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82120828h case    6:*/		return 0x8212082C;
		  /* 8212082Ch */ case    7:  		/* addi R10, R10, -1 */
		/* 8212082Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8212082Ch case    7:*/		return 0x82120830;
		  /* 82120830h */ case    8:  		/* rlwinm R6, R10, 0, 0, 31 */
		/* 82120830h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R10);
		/* 82120830h case    8:*/		return 0x82120834;
		  /* 82120834h */ case    9:  		/* cmplwi CR6, R6, 4 */
		/* 82120834h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000004);
		/* 82120834h case    9:*/		return 0x82120838;
		  /* 82120838h */ case   10:  		/* bc 12, CR6_LT, 76 */
		/* 82120838h case   10:*/		if ( regs.CR[6].lt ) { return 0x82120884;  }
		/* 82120838h case   10:*/		return 0x8212083C;
		  /* 8212083Ch */ case   11:  		/* lis R9, -32255 */
		/* 8212083Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8212083Ch case   11:*/		return 0x82120840;
		  /* 82120840h */ case   12:  		/* mr R10, R11 */
		/* 82120840h case   12:*/		regs.R10 = regs.R11;
		/* 82120840h case   12:*/		return 0x82120844;
		  /* 82120844h */ case   13:  		/* addi R9, R9, -15832 */
		/* 82120844h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFC228);
		/* 82120844h case   13:*/		return 0x82120848;
		  /* 82120848h */ case   14:  		/* addi R7, R11, 4 */
		/* 82120848h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 82120848h case   14:*/		return 0x8212084C;
		  /* 8212084Ch */ case   15:  		/* lbz R8, <#[R10]> */
		/* 8212084Ch case   15:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212084Ch case   15:*/		return 0x82120850;
		  /* 82120850h */ case   16:  		/* lbz R5, <#[R9]> */
		/* 82120850h case   16:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 82120850h case   16:*/		return 0x82120854;
		  /* 82120854h */ case   17:  		/* subf. R8, R5, R8 */
		/* 82120854h case   17:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82120854h case   17:*/		return 0x82120858;
		  /* 82120858h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 82120858h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8212086C;  }
		/* 82120858h case   18:*/		return 0x8212085C;
		  /* 8212085Ch */ case   19:  		/* addi R10, R10, 1 */
		/* 8212085Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212085Ch case   19:*/		return 0x82120860;
		  /* 82120860h */ case   20:  		/* addi R9, R9, 1 */
		/* 82120860h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82120860h case   20:*/		return 0x82120864;
		  /* 82120864h */ case   21:  		/* cmpw CR6, R10, R7 */
		/* 82120864h case   21:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 82120864h case   21:*/		return 0x82120868;
		  /* 82120868h */ case   22:  		/* bc 4, CR6_EQ, -28 */
		/* 82120868h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8212084C;  }
		/* 82120868h case   22:*/		return 0x8212086C;
	}
	return 0x8212086C;
} // Block from 82120810h-8212086Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212086Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212086C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212086C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212086C);
		  /* 8212086Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8212086Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8212086Ch case    0:*/		return 0x82120870;
		  /* 82120870h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82120870h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82120884;  }
		/* 82120870h case    1:*/		return 0x82120874;
		  /* 82120874h */ case    2:  		/* mr R30, R19 */
		/* 82120874h case    2:*/		regs.R30 = regs.R19;
		/* 82120874h case    2:*/		return 0x82120878;
		  /* 82120878h */ case    3:  		/* addi R31, R11, 4 */
		/* 82120878h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82120878h case    3:*/		return 0x8212087C;
		  /* 8212087Ch */ case    4:  		/* addi R11, R6, -4 */
		/* 8212087Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFC);
		/* 8212087Ch case    4:*/		return 0x82120880;
		  /* 82120880h */ case    5:  		/* b 372 */
		/* 82120880h case    5:*/		return 0x821209F4;
		/* 82120880h case    5:*/		return 0x82120884;
	}
	return 0x82120884;
} // Block from 8212086Ch-82120884h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82120884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120884);
		  /* 82120884h */ case    0:  		/* cmplwi CR6, R6, 3 */
		/* 82120884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000003);
		/* 82120884h case    0:*/		return 0x82120888;
		  /* 82120888h */ case    1:  		/* bc 12, CR6_LT, 76 */
		/* 82120888h case    1:*/		if ( regs.CR[6].lt ) { return 0x821208D4;  }
		/* 82120888h case    1:*/		return 0x8212088C;
		  /* 8212088Ch */ case    2:  		/* lis R9, -32255 */
		/* 8212088Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8212088Ch case    2:*/		return 0x82120890;
		  /* 82120890h */ case    3:  		/* mr R10, R11 */
		/* 82120890h case    3:*/		regs.R10 = regs.R11;
		/* 82120890h case    3:*/		return 0x82120894;
		  /* 82120894h */ case    4:  		/* addi R9, R9, -15780 */
		/* 82120894h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFC25C);
		/* 82120894h case    4:*/		return 0x82120898;
		  /* 82120898h */ case    5:  		/* addi R7, R11, 3 */
		/* 82120898h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3);
		/* 82120898h case    5:*/		return 0x8212089C;
		  /* 8212089Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212089Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212089Ch case    6:*/		return 0x821208A0;
		  /* 821208A0h */ case    7:  		/* lbz R5, <#[R9]> */
		/* 821208A0h case    7:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 821208A0h case    7:*/		return 0x821208A4;
		  /* 821208A4h */ case    8:  		/* subf. R8, R5, R8 */
		/* 821208A4h case    8:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 821208A4h case    8:*/		return 0x821208A8;
		  /* 821208A8h */ case    9:  		/* bc 4, CR0_EQ, 20 */
		/* 821208A8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821208BC;  }
		/* 821208A8h case    9:*/		return 0x821208AC;
		  /* 821208ACh */ case   10:  		/* addi R10, R10, 1 */
		/* 821208ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821208ACh case   10:*/		return 0x821208B0;
		  /* 821208B0h */ case   11:  		/* addi R9, R9, 1 */
		/* 821208B0h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821208B0h case   11:*/		return 0x821208B4;
		  /* 821208B4h */ case   12:  		/* cmpw CR6, R10, R7 */
		/* 821208B4h case   12:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 821208B4h case   12:*/		return 0x821208B8;
		  /* 821208B8h */ case   13:  		/* bc 4, CR6_EQ, -28 */
		/* 821208B8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8212089C;  }
		/* 821208B8h case   13:*/		return 0x821208BC;
	}
	return 0x821208BC;
} // Block from 82120884h-821208BCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821208BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821208BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821208BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821208BC);
		  /* 821208BCh */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 821208BCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 821208BCh case    0:*/		return 0x821208C0;
		  /* 821208C0h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 821208C0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821208D4;  }
		/* 821208C0h case    1:*/		return 0x821208C4;
		  /* 821208C4h */ case    2:  		/* addi R31, R11, 3 */
		/* 821208C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x3);
		/* 821208C4h case    2:*/		return 0x821208C8;
		  /* 821208C8h */ case    3:  		/* li R30, 5 */
		/* 821208C8h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x5);
		/* 821208C8h case    3:*/		return 0x821208CC;
		  /* 821208CCh */ case    4:  		/* addi R11, R6, -3 */
		/* 821208CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFD);
		/* 821208CCh case    4:*/		return 0x821208D0;
		  /* 821208D0h */ case    5:  		/* b 292 */
		/* 821208D0h case    5:*/		return 0x821209F4;
		/* 821208D0h case    5:*/		return 0x821208D4;
	}
	return 0x821208D4;
} // Block from 821208BCh-821208D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821208D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821208D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821208D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821208D4);
		  /* 821208D4h */ case    0:  		/* cmplwi CR6, R6, 4 */
		/* 821208D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000004);
		/* 821208D4h case    0:*/		return 0x821208D8;
		  /* 821208D8h */ case    1:  		/* bc 12, CR6_LT, 132 */
		/* 821208D8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8212095C;  }
		/* 821208D8h case    1:*/		return 0x821208DC;
		  /* 821208DCh */ case    2:  		/* lis R9, -32253 */
		/* 821208DCh case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821208DCh case    2:*/		return 0x821208E0;
		  /* 821208E0h */ case    3:  		/* mr R10, R11 */
		/* 821208E0h case    3:*/		regs.R10 = regs.R11;
		/* 821208E0h case    3:*/		return 0x821208E4;
		  /* 821208E4h */ case    4:  		/* addi R9, R9, 8784 */
		/* 821208E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2250);
		/* 821208E4h case    4:*/		return 0x821208E8;
		  /* 821208E8h */ case    5:  		/* addi R7, R11, 4 */
		/* 821208E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 821208E8h case    5:*/		return 0x821208EC;
		  /* 821208ECh */ case    6:  		/* lbz R8, <#[R10]> */
		/* 821208ECh case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821208ECh case    6:*/		return 0x821208F0;
		  /* 821208F0h */ case    7:  		/* lbz R5, <#[R9]> */
		/* 821208F0h case    7:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 821208F0h case    7:*/		return 0x821208F4;
		  /* 821208F4h */ case    8:  		/* subf. R8, R5, R8 */
		/* 821208F4h case    8:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 821208F4h case    8:*/		return 0x821208F8;
		  /* 821208F8h */ case    9:  		/* bc 4, CR0_EQ, 20 */
		/* 821208F8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8212090C;  }
		/* 821208F8h case    9:*/		return 0x821208FC;
		  /* 821208FCh */ case   10:  		/* addi R10, R10, 1 */
		/* 821208FCh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821208FCh case   10:*/		return 0x82120900;
		  /* 82120900h */ case   11:  		/* addi R9, R9, 1 */
		/* 82120900h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82120900h case   11:*/		return 0x82120904;
		  /* 82120904h */ case   12:  		/* cmpw CR6, R10, R7 */
		/* 82120904h case   12:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 82120904h case   12:*/		return 0x82120908;
		  /* 82120908h */ case   13:  		/* bc 4, CR6_EQ, -28 */
		/* 82120908h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821208EC;  }
		/* 82120908h case   13:*/		return 0x8212090C;
	}
	return 0x8212090C;
} // Block from 821208D4h-8212090Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212090Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212090C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212090C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212090C);
		  /* 8212090Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8212090Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8212090Ch case    0:*/		return 0x82120910;
		  /* 82120910h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82120910h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212091C;  }
		/* 82120910h case    1:*/		return 0x82120914;
		  /* 82120914h */ case    2:  		/* li R30, 9 */
		/* 82120914h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x9);
		/* 82120914h case    2:*/		return 0x82120918;
		  /* 82120918h */ case    3:  		/* b -160 */
		/* 82120918h case    3:*/		return 0x82120878;
		/* 82120918h case    3:*/		return 0x8212091C;
	}
	return 0x8212091C;
} // Block from 8212090Ch-8212091Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212091Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212091C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212091C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212091C);
		  /* 8212091Ch */ case    0:  		/* lis R9, -32253 */
		/* 8212091Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8212091Ch case    0:*/		return 0x82120920;
		  /* 82120920h */ case    1:  		/* mr R10, R11 */
		/* 82120920h case    1:*/		regs.R10 = regs.R11;
		/* 82120920h case    1:*/		return 0x82120924;
		  /* 82120924h */ case    2:  		/* addi R9, R9, 8776 */
		/* 82120924h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2248);
		/* 82120924h case    2:*/		return 0x82120928;
		  /* 82120928h */ case    3:  		/* addi R7, R11, 4 */
		/* 82120928h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 82120928h case    3:*/		return 0x8212092C;
		  /* 8212092Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212092Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212092Ch case    4:*/		return 0x82120930;
		  /* 82120930h */ case    5:  		/* lbz R5, <#[R9]> */
		/* 82120930h case    5:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 82120930h case    5:*/		return 0x82120934;
		  /* 82120934h */ case    6:  		/* subf. R8, R5, R8 */
		/* 82120934h case    6:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82120934h case    6:*/		return 0x82120938;
		  /* 82120938h */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 82120938h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8212094C;  }
		/* 82120938h case    7:*/		return 0x8212093C;
		  /* 8212093Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 8212093Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212093Ch case    8:*/		return 0x82120940;
		  /* 82120940h */ case    9:  		/* addi R9, R9, 1 */
		/* 82120940h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82120940h case    9:*/		return 0x82120944;
		  /* 82120944h */ case   10:  		/* cmpw CR6, R10, R7 */
		/* 82120944h case   10:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 82120944h case   10:*/		return 0x82120948;
		  /* 82120948h */ case   11:  		/* bc 4, CR6_EQ, -28 */
		/* 82120948h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8212092C;  }
		/* 82120948h case   11:*/		return 0x8212094C;
	}
	return 0x8212094C;
} // Block from 8212091Ch-8212094Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212094Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212094C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212094C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212094C);
		  /* 8212094Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8212094Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8212094Ch case    0:*/		return 0x82120950;
		  /* 82120950h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82120950h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212095C;  }
		/* 82120950h case    1:*/		return 0x82120954;
		  /* 82120954h */ case    2:  		/* li R30, 11 */
		/* 82120954h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0xB);
		/* 82120954h case    2:*/		return 0x82120958;
		  /* 82120958h */ case    3:  		/* b -224 */
		/* 82120958h case    3:*/		return 0x82120878;
		/* 82120958h case    3:*/		return 0x8212095C;
	}
	return 0x8212095C;
} // Block from 8212094Ch-8212095Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212095Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212095C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212095C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212095C);
		  /* 8212095Ch */ case    0:  		/* cmplwi CR6, R6, 5 */
		/* 8212095Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000005);
		/* 8212095Ch case    0:*/		return 0x82120960;
		  /* 82120960h */ case    1:  		/* bc 12, CR6_LT, 72 */
		/* 82120960h case    1:*/		if ( regs.CR[6].lt ) { return 0x821209A8;  }
		/* 82120960h case    1:*/		return 0x82120964;
		  /* 82120964h */ case    2:  		/* mr R9, R31 */
		/* 82120964h case    2:*/		regs.R9 = regs.R31;
		/* 82120964h case    2:*/		return 0x82120968;
		  /* 82120968h */ case    3:  		/* mr R10, R11 */
		/* 82120968h case    3:*/		regs.R10 = regs.R11;
		/* 82120968h case    3:*/		return 0x8212096C;
		  /* 8212096Ch */ case    4:  		/* addi R7, R11, 5 */
		/* 8212096Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x5);
		/* 8212096Ch case    4:*/		return 0x82120970;
		  /* 82120970h */ case    5:  		/* lbz R8, <#[R10]> */
		/* 82120970h case    5:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82120970h case    5:*/		return 0x82120974;
		  /* 82120974h */ case    6:  		/* lbz R5, <#[R9]> */
		/* 82120974h case    6:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 82120974h case    6:*/		return 0x82120978;
		  /* 82120978h */ case    7:  		/* subf. R8, R5, R8 */
		/* 82120978h case    7:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82120978h case    7:*/		return 0x8212097C;
		  /* 8212097Ch */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 8212097Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82120990;  }
		/* 8212097Ch case    8:*/		return 0x82120980;
		  /* 82120980h */ case    9:  		/* addi R10, R10, 1 */
		/* 82120980h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82120980h case    9:*/		return 0x82120984;
		  /* 82120984h */ case   10:  		/* addi R9, R9, 1 */
		/* 82120984h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82120984h case   10:*/		return 0x82120988;
		  /* 82120988h */ case   11:  		/* cmpw CR6, R10, R7 */
		/* 82120988h case   11:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 82120988h case   11:*/		return 0x8212098C;
		  /* 8212098Ch */ case   12:  		/* bc 4, CR6_EQ, -28 */
		/* 8212098Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82120970;  }
		/* 8212098Ch case   12:*/		return 0x82120990;
	}
	return 0x82120990;
} // Block from 8212095Ch-82120990h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82120990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120990);
		  /* 82120990h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 82120990h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 82120990h case    0:*/		return 0x82120994;
		  /* 82120994h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82120994h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821209A8;  }
		/* 82120994h case    1:*/		return 0x82120998;
		  /* 82120998h */ case    2:  		/* addi R31, R11, 5 */
		/* 82120998h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x5);
		/* 82120998h case    2:*/		return 0x8212099C;
		  /* 8212099Ch */ case    3:  		/* li R30, 12 */
		/* 8212099Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0xC);
		/* 8212099Ch case    3:*/		return 0x821209A0;
		  /* 821209A0h */ case    4:  		/* addi R11, R6, -5 */
		/* 821209A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFB);
		/* 821209A0h case    4:*/		return 0x821209A4;
		  /* 821209A4h */ case    5:  		/* b 80 */
		/* 821209A4h case    5:*/		return 0x821209F4;
		/* 821209A4h case    5:*/		return 0x821209A8;
	}
	return 0x821209A8;
} // Block from 82120990h-821209A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821209A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821209A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821209A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821209A8);
		  /* 821209A8h */ case    0:  		/* cmplwi CR6, R6, 6 */
		/* 821209A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000006);
		/* 821209A8h case    0:*/		return 0x821209AC;
		  /* 821209ACh */ case    1:  		/* bc 12, CR6_LT, 260 */
		/* 821209ACh case    1:*/		if ( regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 821209ACh case    1:*/		return 0x821209B0;
	}
	return 0x821209B0;
} // Block from 821209A8h-821209B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821209B0h
// Function '?FindDeclsNamespace@CParse@D3DXShader@@IAAJPAVCNode@2@W4_D3DDECL_TYPE@2@PAUD3DXTOKEN@2@00KPBDPAI4PAPAVCNodeDecl@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821209B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821209B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821209B0);
		  /* 821209B0h */ case    0:  		/* lis R9, -32255 */
		/* 821209B0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 821209B0h case    0:*/		return 0x821209B4;
		  /* 821209B4h */ case    1:  		/* mr R10, R11 */
		/* 821209B4h case    1:*/		regs.R10 = regs.R11;
		/* 821209B4h case    1:*/		return 0x821209B8;
		  /* 821209B8h */ case    2:  		/* addi R9, R9, -15804 */
		/* 821209B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFC244);
		/* 821209B8h case    2:*/		return 0x821209BC;
		  /* 821209BCh */ case    3:  		/* addi R7, R11, 6 */
		/* 821209BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x6);
		/* 821209BCh case    3:*/		return 0x821209C0;
		  /* 821209C0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821209C0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821209C0h case    4:*/		return 0x821209C4;
		  /* 821209C4h */ case    5:  		/* lbz R5, <#[R9]> */
		/* 821209C4h case    5:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 821209C4h case    5:*/		return 0x821209C8;
		  /* 821209C8h */ case    6:  		/* subf. R8, R5, R8 */
		/* 821209C8h case    6:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R5,regs.R8);
		/* 821209C8h case    6:*/		return 0x821209CC;
		  /* 821209CCh */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 821209CCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821209E0;  }
		/* 821209CCh case    7:*/		return 0x821209D0;
		  /* 821209D0h */ case    8:  		/* addi R10, R10, 1 */
		/* 821209D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821209D0h case    8:*/		return 0x821209D4;
		  /* 821209D4h */ case    9:  		/* addi R9, R9, 1 */
		/* 821209D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821209D4h case    9:*/		return 0x821209D8;
		  /* 821209D8h */ case   10:  		/* cmpw CR6, R10, R7 */
		/* 821209D8h case   10:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 821209D8h case   10:*/		return 0x821209DC;
		  /* 821209DCh */ case   11:  		/* bc 4, CR6_EQ, -28 */
		/* 821209DCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821209C0;  }
		/* 821209DCh case   11:*/		return 0x821209E0;
	}
	return 0x821209E0;
} // Block from 821209B0h-821209E0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821209E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821209E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821209E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821209E0);
		  /* 821209E0h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 821209E0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 821209E0h case    0:*/		return 0x821209E4;
		  /* 821209E4h */ case    1:  		/* bc 4, CR0_EQ, 204 */
		/* 821209E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82120AB0;  }
		/* 821209E4h case    1:*/		return 0x821209E8;
		  /* 821209E8h */ case    2:  		/* addi R31, R11, 6 */
		/* 821209E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6);
		/* 821209E8h case    2:*/		return 0x821209EC;
		  /* 821209ECh */ case    3:  		/* li R30, 13 */
		/* 821209ECh case    3:*/		cpu::op::li<0>(regs,&regs.R30,0xD);
		/* 821209ECh case    3:*/		return 0x821209F0;
		  /* 821209F0h */ case    4:  		/* addi R11, R6, -6 */
		/* 821209F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFA);
		/* 821209F0h case    4:*/		return 0x821209F4;
	}
	return 0x821209F4;
} // Block from 821209E0h-821209F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821209F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821209F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821209F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821209F4);
		  /* 821209F4h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821209F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821209F4h case    0:*/		return 0x821209F8;
		  /* 821209F8h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 821209F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82120A34;  }
		/* 821209F8h case    1:*/		return 0x821209FC;
		  /* 821209FCh */ case    2:  		/* lbz R11, <#[R31]> */
		/* 821209FCh case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821209FCh case    2:*/		return 0x82120A00;
		  /* 82120A00h */ case    3:  		/* extsb R11, R11 */
		/* 82120A00h case    3:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120A00h case    3:*/		return 0x82120A04;
		  /* 82120A04h */ case    4:  		/* cmpwi CR6, R11, 49 */
		/* 82120A04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 82120A04h case    4:*/		return 0x82120A08;
		  /* 82120A08h */ case    5:  		/* bc 12, CR6_LT, 168 */
		/* 82120A08h case    5:*/		if ( regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A08h case    5:*/		return 0x82120A0C;
		  /* 82120A0Ch */ case    6:  		/* cmpwi CR6, R11, 53 */
		/* 82120A0Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 82120A0Ch case    6:*/		return 0x82120A10;
		  /* 82120A10h */ case    7:  		/* bc 4, CR6_LT, 160 */
		/* 82120A10h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A10h case    7:*/		return 0x82120A14;
		  /* 82120A14h */ case    8:  		/* cmplwi CR6, R20, 0 */
		/* 82120A14h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120A14h case    8:*/		return 0x82120A18;
		  /* 82120A18h */ case    9:  		/* bc 12, CR6_EQ, -960 */
		/* 82120A18h case    9:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 82120A18h case    9:*/		return 0x82120A1C;
		  /* 82120A1Ch */ case   10:  		/* li R3, 40 */
		/* 82120A1Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120A1Ch case   10:*/		return 0x82120A20;
		  /* 82120A20h */ case   11:  		/* bl -358392 */
		/* 82120A20h case   11:*/		regs.LR = 0x82120A24; return 0x820C9228;
		/* 82120A20h case   11:*/		return 0x82120A24;
		  /* 82120A24h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82120A24h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120A24h case   12:*/		return 0x82120A28;
		  /* 82120A28h */ case   13:  		/* bc 12, CR0_EQ, -2224 */
		/* 82120A28h case   13:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 82120A28h case   13:*/		return 0x82120A2C;
		  /* 82120A2Ch */ case   14:  		/* mr R5, R30 */
		/* 82120A2Ch case   14:*/		regs.R5 = regs.R30;
		/* 82120A2Ch case   14:*/		return 0x82120A30;
		  /* 82120A30h */ case   15:  		/* b -2268 */
		/* 82120A30h case   15:*/		return 0x82120154;
		/* 82120A30h case   15:*/		return 0x82120A34;
	}
	return 0x82120A34;
} // Block from 821209F4h-82120A34h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82120A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120A34);
		  /* 82120A34h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 82120A34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82120A34h case    0:*/		return 0x82120A38;
		  /* 82120A38h */ case    1:  		/* bc 4, CR6_EQ, 120 */
		/* 82120A38h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82120AB0;  }
		/* 82120A38h case    1:*/		return 0x82120A3C;
		  /* 82120A3Ch */ case    2:  		/* lbz R11, <#[R31]> */
		/* 82120A3Ch case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120A3Ch case    2:*/		return 0x82120A40;
		  /* 82120A40h */ case    3:  		/* extsb R11, R11 */
		/* 82120A40h case    3:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120A40h case    3:*/		return 0x82120A44;
		  /* 82120A44h */ case    4:  		/* cmpwi CR6, R11, 49 */
		/* 82120A44h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 82120A44h case    4:*/		return 0x82120A48;
		  /* 82120A48h */ case    5:  		/* bc 12, CR6_LT, 104 */
		/* 82120A48h case    5:*/		if ( regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A48h case    5:*/		return 0x82120A4C;
		  /* 82120A4Ch */ case    6:  		/* cmpwi CR6, R11, 53 */
		/* 82120A4Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 82120A4Ch case    6:*/		return 0x82120A50;
		  /* 82120A50h */ case    7:  		/* bc 4, CR6_LT, 96 */
		/* 82120A50h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A50h case    7:*/		return 0x82120A54;
		  /* 82120A54h */ case    8:  		/* lbz R11, <#[R31 + 1]> */
		/* 82120A54h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		/* 82120A54h case    8:*/		return 0x82120A58;
		  /* 82120A58h */ case    9:  		/* cmplwi CR6, R11, 120 */
		/* 82120A58h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000078);
		/* 82120A58h case    9:*/		return 0x82120A5C;
		  /* 82120A5Ch */ case   10:  		/* bc 4, CR6_EQ, 84 */
		/* 82120A5Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x82120AB0;  }
		/* 82120A5Ch case   10:*/		return 0x82120A60;
		  /* 82120A60h */ case   11:  		/* lbz R11, <#[R31 + 2]> */
		/* 82120A60h case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 82120A60h case   11:*/		return 0x82120A64;
		  /* 82120A64h */ case   12:  		/* extsb R11, R11 */
		/* 82120A64h case   12:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120A64h case   12:*/		return 0x82120A68;
		  /* 82120A68h */ case   13:  		/* cmpwi CR6, R11, 49 */
		/* 82120A68h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 82120A68h case   13:*/		return 0x82120A6C;
		  /* 82120A6Ch */ case   14:  		/* bc 12, CR6_LT, 68 */
		/* 82120A6Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A6Ch case   14:*/		return 0x82120A70;
		  /* 82120A70h */ case   15:  		/* cmpwi CR6, R11, 53 */
		/* 82120A70h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 82120A70h case   15:*/		return 0x82120A74;
		  /* 82120A74h */ case   16:  		/* bc 4, CR6_LT, 60 */
		/* 82120A74h case   16:*/		if ( !regs.CR[6].lt ) { return 0x82120AB0;  }
		/* 82120A74h case   16:*/		return 0x82120A78;
		  /* 82120A78h */ case   17:  		/* cmplwi CR6, R20, 0 */
		/* 82120A78h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120A78h case   17:*/		return 0x82120A7C;
		  /* 82120A7Ch */ case   18:  		/* bc 12, CR6_EQ, -1060 */
		/* 82120A7Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 82120A7Ch case   18:*/		return 0x82120A80;
		  /* 82120A80h */ case   19:  		/* li R3, 40 */
		/* 82120A80h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120A80h case   19:*/		return 0x82120A84;
		  /* 82120A84h */ case   20:  		/* bl -358492 */
		/* 82120A84h case   20:*/		regs.LR = 0x82120A88; return 0x820C9228;
		/* 82120A84h case   20:*/		return 0x82120A88;
		  /* 82120A88h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 82120A88h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120A88h case   21:*/		return 0x82120A8C;
		  /* 82120A8Ch */ case   22:  		/* bc 12, CR0_EQ, -2324 */
		/* 82120A8Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 82120A8Ch case   22:*/		return 0x82120A90;
		  /* 82120A90h */ case   23:  		/* lbz R11, <#[R31 + 2]> */
		/* 82120A90h case   23:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 82120A90h case   23:*/		return 0x82120A94;
		  /* 82120A94h */ case   24:  		/* mr R5, R30 */
		/* 82120A94h case   24:*/		regs.R5 = regs.R30;
		/* 82120A94h case   24:*/		return 0x82120A98;
		  /* 82120A98h */ case   25:  		/* lbz R8, <#[R31]> */
		/* 82120A98h case   25:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82120A98h case   25:*/		return 0x82120A9C;
		  /* 82120A9Ch */ case   26:  		/* extsb R10, R11 */
		/* 82120A9Ch case   26:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R11);
		/* 82120A9Ch case   26:*/		return 0x82120AA0;
		  /* 82120AA0h */ case   27:  		/* extsb R11, R8 */
		/* 82120AA0h case   27:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R8);
		/* 82120AA0h case   27:*/		return 0x82120AA4;
		  /* 82120AA4h */ case   28:  		/* addi R8, R10, -48 */
		/* 82120AA4h case   28:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFD0);
		/* 82120AA4h case   28:*/		return 0x82120AA8;
		  /* 82120AA8h */ case   29:  		/* addi R7, R11, -48 */
		/* 82120AA8h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFD0);
		/* 82120AA8h case   29:*/		return 0x82120AAC;
		  /* 82120AACh */ case   30:  		/* b -2208 */
		/* 82120AACh case   30:*/		return 0x8212020C;
		/* 82120AACh case   30:*/		return 0x82120AB0;
	}
	return 0x82120AB0;
} // Block from 82120A34h-82120AB0h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82120AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120AB0);
		  /* 82120AB0h */ case    0:  		/* rlwinm. R11, R23, 0, 31, 31 */
		/* 82120AB0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R23);
		/* 82120AB0h case    0:*/		return 0x82120AB4;
		  /* 82120AB4h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 82120AB4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82120AD4;  }
		/* 82120AB4h case    1:*/		return 0x82120AB8;
		  /* 82120AB8h */ case    2:  		/* lis R11, -32253 */
		/* 82120AB8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120AB8h case    2:*/		return 0x82120ABC;
		  /* 82120ABCh */ case    3:  		/* lwz R7, <#[R21 + 8]> */
		/* 82120ABCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82120ABCh case    3:*/		return 0x82120AC0;
		  /* 82120AC0h */ case    4:  		/* li R5, 3004 */
		/* 82120AC0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xBBC);
		/* 82120AC0h case    4:*/		return 0x82120AC4;
		  /* 82120AC4h */ case    5:  		/* addi R6, R11, 9632 */
		/* 82120AC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x25A0);
		/* 82120AC4h case    5:*/		return 0x82120AC8;
	}
	return 0x82120AC8;
} // Block from 82120AB0h-82120AC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82120AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120AC8);
		  /* 82120AC8h */ case    0:  		/* mr R4, R21 */
		/* 82120AC8h case    0:*/		regs.R4 = regs.R21;
		/* 82120AC8h case    0:*/		return 0x82120ACC;
		  /* 82120ACCh */ case    1:  		/* mr R3, R22 */
		/* 82120ACCh case    1:*/		regs.R3 = regs.R22;
		/* 82120ACCh case    1:*/		return 0x82120AD0;
		  /* 82120AD0h */ case    2:  		/* bl -29232 */
		/* 82120AD0h case    2:*/		regs.LR = 0x82120AD4; return 0x821198A0;
		/* 82120AD0h case    2:*/		return 0x82120AD4;
	}
	return 0x82120AD4;
} // Block from 82120AC8h-82120AD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120AD4);
		  /* 82120AD4h */ case    0:  		/* li R3, 1 */
		/* 82120AD4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82120AD4h case    0:*/		return 0x82120AD8;
	}
	return 0x82120AD8;
} // Block from 82120AD4h-82120AD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120AD8);
		  /* 82120AD8h */ case    0:  		/* addi R1, R1, 544 */
		/* 82120AD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x220);
		/* 82120AD8h case    0:*/		return 0x82120ADC;
		  /* 82120ADCh */ case    1:  		/* b -587864 */
		/* 82120ADCh case    1:*/		return 0x82091284;
		/* 82120ADCh case    1:*/		return 0x82120AE0;
	}
	return 0x82120AE0;
} // Block from 82120AD8h-82120AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120AE0);
		  /* 82120AE0h */ case    0:  		/* mfspr R12, LR */
		/* 82120AE0h case    0:*/		regs.R12 = regs.LR;
		/* 82120AE0h case    0:*/		return 0x82120AE4;
		  /* 82120AE4h */ case    1:  		/* bl -587944 */
		/* 82120AE4h case    1:*/		regs.LR = 0x82120AE8; return 0x8209123C;
		/* 82120AE4h case    1:*/		return 0x82120AE8;
		  /* 82120AE8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 82120AE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82120AE8h case    2:*/		return 0x82120AEC;
		  /* 82120AECh */ case    3:  		/* li R11, 0 */
		/* 82120AECh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82120AECh case    3:*/		return 0x82120AF0;
		  /* 82120AF0h */ case    4:  		/* mr R23, R3 */
		/* 82120AF0h case    4:*/		regs.R23 = regs.R3;
		/* 82120AF0h case    4:*/		return 0x82120AF4;
		  /* 82120AF4h */ case    5:  		/* mr R25, R4 */
		/* 82120AF4h case    5:*/		regs.R25 = regs.R4;
		/* 82120AF4h case    5:*/		return 0x82120AF8;
		  /* 82120AF8h */ case    6:  		/* stw R11, <#[R1 + 128]> */
		/* 82120AF8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82120AF8h case    6:*/		return 0x82120AFC;
		  /* 82120AFCh */ case    7:  		/* mr R22, R5 */
		/* 82120AFCh case    7:*/		regs.R22 = regs.R5;
		/* 82120AFCh case    7:*/		return 0x82120B00;
		  /* 82120B00h */ case    8:  		/* addi R26, R1, 128 */
		/* 82120B00h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x80);
		/* 82120B00h case    8:*/		return 0x82120B04;
		  /* 82120B04h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 82120B04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82120B04h case    9:*/		return 0x82120B08;
		  /* 82120B08h */ case   10:  		/* bc 12, CR6_EQ, 524 */
		/* 82120B08h case   10:*/		if ( regs.CR[6].eq ) { return 0x82120D14;  }
		/* 82120B08h case   10:*/		return 0x82120B0C;
		  /* 82120B0Ch */ case   11:  		/* lis R11, -32253 */
		/* 82120B0Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120B0Ch case   11:*/		return 0x82120B10;
		  /* 82120B10h */ case   12:  		/* li R24, 1 */
		/* 82120B10h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82120B10h case   12:*/		return 0x82120B14;
		  /* 82120B14h */ case   13:  		/* addi R21, R11, 9944 */
		/* 82120B14h case   13:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x26D8);
		/* 82120B14h case   13:*/		return 0x82120B18;
		  /* 82120B18h */ case   14:  		/* lwz R11, <#[R22 + 8]> */
		/* 82120B18h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 82120B18h case   14:*/		return 0x82120B1C;
		  /* 82120B1Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82120B1Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82120B1Ch case   15:*/		return 0x82120B20;
		  /* 82120B20h */ case   16:  		/* bc 12, CR6_EQ, 500 */
		/* 82120B20h case   16:*/		if ( regs.CR[6].eq ) { return 0x82120D14;  }
		/* 82120B20h case   16:*/		return 0x82120B24;
		  /* 82120B24h */ case   17:  		/* li R3, 20 */
		/* 82120B24h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82120B24h case   17:*/		return 0x82120B28;
		  /* 82120B28h */ case   18:  		/* bl -358656 */
		/* 82120B28h case   18:*/		regs.LR = 0x82120B2C; return 0x820C9228;
		/* 82120B28h case   18:*/		return 0x82120B2C;
		  /* 82120B2Ch */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 82120B2Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120B2Ch case   19:*/		return 0x82120B30;
		  /* 82120B30h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 82120B30h case   20:*/		if ( regs.CR[0].eq ) { return 0x82120B48;  }
		/* 82120B30h case   20:*/		return 0x82120B34;
		  /* 82120B34h */ case   21:  		/* mr R6, R21 */
		/* 82120B34h case   21:*/		regs.R6 = regs.R21;
		/* 82120B34h case   21:*/		return 0x82120B38;
		  /* 82120B38h */ case   22:  		/* li R5, 0 */
		/* 82120B38h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82120B38h case   22:*/		return 0x82120B3C;
		  /* 82120B3Ch */ case   23:  		/* li R4, 0 */
		/* 82120B3Ch case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82120B3Ch case   23:*/		return 0x82120B40;
		  /* 82120B40h */ case   24:  		/* bl -358224 */
		/* 82120B40h case   24:*/		regs.LR = 0x82120B44; return 0x820C93F0;
		/* 82120B40h case   24:*/		return 0x82120B44;
		  /* 82120B44h */ case   25:  		/* b 8 */
		/* 82120B44h case   25:*/		return 0x82120B4C;
		/* 82120B44h case   25:*/		return 0x82120B48;
	}
	return 0x82120B48;
} // Block from 82120AE0h-82120B48h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82120B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120B48);
		  /* 82120B48h */ case    0:  		/* li R3, 0 */
		/* 82120B48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120B48h case    0:*/		return 0x82120B4C;
	}
	return 0x82120B4C;
} // Block from 82120B48h-82120B4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120B4C);
		  /* 82120B4Ch */ case    0:  		/* stw R3, <#[R26]> */
		/* 82120B4Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 82120B4Ch case    0:*/		return 0x82120B50;
		  /* 82120B50h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82120B50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82120B50h case    1:*/		return 0x82120B54;
		  /* 82120B54h */ case    2:  		/* bc 12, CR6_EQ, 448 */
		/* 82120B54h case    2:*/		if ( regs.CR[6].eq ) { return 0x82120D14;  }
		/* 82120B54h case    2:*/		return 0x82120B58;
		  /* 82120B58h */ case    3:  		/* li R3, 52 */
		/* 82120B58h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82120B58h case    3:*/		return 0x82120B5C;
		  /* 82120B5Ch */ case    4:  		/* bl -358708 */
		/* 82120B5Ch case    4:*/		regs.LR = 0x82120B60; return 0x820C9228;
		/* 82120B5Ch case    4:*/		return 0x82120B60;
		  /* 82120B60h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82120B60h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120B60h case    5:*/		return 0x82120B64;
		  /* 82120B64h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 82120B64h case    6:*/		if ( regs.CR[0].eq ) { return 0x82120B88;  }
		/* 82120B64h case    6:*/		return 0x82120B68;
		  /* 82120B68h */ case    7:  		/* li R8, 0 */
		/* 82120B68h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82120B68h case    7:*/		return 0x82120B6C;
		  /* 82120B6Ch */ case    8:  		/* li R7, 0 */
		/* 82120B6Ch case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82120B6Ch case    8:*/		return 0x82120B70;
		  /* 82120B70h */ case    9:  		/* li R6, 0 */
		/* 82120B70h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82120B70h case    9:*/		return 0x82120B74;
		  /* 82120B74h */ case   10:  		/* li R5, 0 */
		/* 82120B74h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82120B74h case   10:*/		return 0x82120B78;
		  /* 82120B78h */ case   11:  		/* li R4, 0 */
		/* 82120B78h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82120B78h case   11:*/		return 0x82120B7C;
		  /* 82120B7Ch */ case   12:  		/* bl -355524 */
		/* 82120B7Ch case   12:*/		regs.LR = 0x82120B80; return 0x820C9EB8;
		/* 82120B7Ch case   12:*/		return 0x82120B80;
		  /* 82120B80h */ case   13:  		/* mr R29, R3 */
		/* 82120B80h case   13:*/		regs.R29 = regs.R3;
		/* 82120B80h case   13:*/		return 0x82120B84;
		  /* 82120B84h */ case   14:  		/* b 8 */
		/* 82120B84h case   14:*/		return 0x82120B8C;
		/* 82120B84h case   14:*/		return 0x82120B88;
	}
	return 0x82120B88;
} // Block from 82120B4Ch-82120B88h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82120B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120B88);
		  /* 82120B88h */ case    0:  		/* li R29, 0 */
		/* 82120B88h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82120B88h case    0:*/		return 0x82120B8C;
	}
	return 0x82120B8C;
} // Block from 82120B88h-82120B8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120B8C);
		  /* 82120B8Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82120B8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82120B8Ch case    0:*/		return 0x82120B90;
		  /* 82120B90h */ case    1:  		/* bc 12, CR6_EQ, 388 */
		/* 82120B90h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120D14;  }
		/* 82120B90h case    1:*/		return 0x82120B94;
		  /* 82120B94h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 82120B94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82120B94h case    2:*/		return 0x82120B98;
		  /* 82120B98h */ case    3:  		/* mr R27, R24 */
		/* 82120B98h case    3:*/		regs.R27 = regs.R24;
		/* 82120B98h case    3:*/		return 0x82120B9C;
		  /* 82120B9Ch */ case    4:  		/* li R28, 0 */
		/* 82120B9Ch case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82120B9Ch case    4:*/		return 0x82120BA0;
		  /* 82120BA0h */ case    5:  		/* cmplwi CR6, R25, 0 */
		/* 82120BA0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82120BA0h case    5:*/		return 0x82120BA4;
		  /* 82120BA4h */ case    6:  		/* stw R29, <#[R11 + 8]> */
		/* 82120BA4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 82120BA4h case    6:*/		return 0x82120BA8;
		  /* 82120BA8h */ case    7:  		/* lwz R11, <#[R26]> */
		/* 82120BA8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82120BA8h case    7:*/		return 0x82120BAC;
		  /* 82120BACh */ case    8:  		/* addi R26, R11, 12 */
		/* 82120BACh case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xC);
		/* 82120BACh case    8:*/		return 0x82120BB0;
		  /* 82120BB0h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 82120BB0h case    9:*/		if ( regs.CR[6].eq ) { return 0x82120BC8;  }
		/* 82120BB0h case    9:*/		return 0x82120BB4;
		  /* 82120BB4h */ case   10:  		/* mr R3, R25 */
		/* 82120BB4h case   10:*/		regs.R3 = regs.R25;
		/* 82120BB4h case   10:*/		return 0x82120BB8;
		  /* 82120BB8h */ case   11:  		/* bl -358480 */
		/* 82120BB8h case   11:*/		regs.LR = 0x82120BBC; return 0x820C9368;
		/* 82120BB8h case   11:*/		return 0x82120BBC;
		  /* 82120BBCh */ case   12:  		/* stw R3, <#[R29 + 24]> */
		/* 82120BBCh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 82120BBCh case   12:*/		return 0x82120BC0;
	}
	return 0x82120BC0;
} // Block from 82120B8Ch-82120BC0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82120BC0h
// Function '?FindDecl@CParse@D3DXShader@@IAAJW4_D3DDECL_TYPE@2@PAUD3DXTOKEN@2@PAVCNode@2@2PAVCNodeScope@2@KPAPAV52@4@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120BC0);
		  /* 82120BC0h */ case    0:  		/* cmplwi CR0, R3, 0 */
		/* 82120BC0h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120BC0h case    0:*/		return 0x82120BC4;
		  /* 82120BC4h */ case    1:  		/* bc 12, CR0_EQ, 336 */
		/* 82120BC4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82120D14;  }
		/* 82120BC4h case    1:*/		return 0x82120BC8;
	}
	return 0x82120BC8;
} // Block from 82120BC0h-82120BC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120BC8);
		  /* 82120BC8h */ case    0:  		/* lwz R30, <#[R22 + 8]> */
		/* 82120BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R22 + 0x00000008) );
		/* 82120BC8h case    0:*/		return 0x82120BCC;
		  /* 82120BCCh */ case    1:  		/* b 120 */
		/* 82120BCCh case    1:*/		return 0x82120C44;
		/* 82120BCCh case    1:*/		return 0x82120BD0;
		  /* 82120BD0h */ case    2:  		/* li R3, 24 */
		/* 82120BD0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82120BD0h case    2:*/		return 0x82120BD4;
		  /* 82120BD4h */ case    3:  		/* bl -358828 */
		/* 82120BD4h case    3:*/		regs.LR = 0x82120BD8; return 0x820C9228;
		/* 82120BD4h case    3:*/		return 0x82120BD8;
		  /* 82120BD8h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82120BD8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120BD8h case    4:*/		return 0x82120BDC;
		  /* 82120BDCh */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82120BDCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82120BE8;  }
		/* 82120BDCh case    5:*/		return 0x82120BE0;
		  /* 82120BE0h */ case    6:  		/* bl -352600 */
		/* 82120BE0h case    6:*/		regs.LR = 0x82120BE4; return 0x820CAA88;
		/* 82120BE0h case    6:*/		return 0x82120BE4;
		  /* 82120BE4h */ case    7:  		/* b 8 */
		/* 82120BE4h case    7:*/		return 0x82120BEC;
		/* 82120BE4h case    7:*/		return 0x82120BE8;
	}
	return 0x82120BE8;
} // Block from 82120BC8h-82120BE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82120BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120BE8);
		  /* 82120BE8h */ case    0:  		/* li R3, 0 */
		/* 82120BE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120BE8h case    0:*/		return 0x82120BEC;
	}
	return 0x82120BEC;
} // Block from 82120BE8h-82120BECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120BEC);
		  /* 82120BECh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82120BECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82120BECh case    0:*/		return 0x82120BF0;
		  /* 82120BF0h */ case    1:  		/* bc 12, CR6_EQ, 292 */
		/* 82120BF0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120D14;  }
		/* 82120BF0h case    1:*/		return 0x82120BF4;
		  /* 82120BF4h */ case    2:  		/* lwz R11, <#[R29 + 24]> */
		/* 82120BF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82120BF4h case    2:*/		return 0x82120BF8;
		  /* 82120BF8h */ case    3:  		/* addi R31, R3, 20 */
		/* 82120BF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x14);
		/* 82120BF8h case    3:*/		return 0x82120BFC;
		  /* 82120BFCh */ case    4:  		/* stw R11, <#[R3 + 16]> */
		/* 82120BFCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 82120BFCh case    4:*/		return 0x82120C00;
		  /* 82120C00h */ case    5:  		/* stw R3, <#[R29 + 24]> */
		/* 82120C00h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 82120C00h case    5:*/		return 0x82120C04;
		  /* 82120C04h */ case    6:  		/* lwz R4, <#[R30 + 12]> */
		/* 82120C04h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 82120C04h case    6:*/		return 0x82120C08;
		  /* 82120C08h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 82120C08h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82120C08h case    7:*/		return 0x82120C0C;
		  /* 82120C0Ch */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82120C0Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82120C30;  }
		/* 82120C0Ch case    8:*/		return 0x82120C10;
		  /* 82120C10h */ case    9:  		/* mr R5, R31 */
		/* 82120C10h case    9:*/		regs.R5 = regs.R31;
		/* 82120C10h case    9:*/		return 0x82120C14;
		  /* 82120C14h */ case   10:  		/* mr R3, R23 */
		/* 82120C14h case   10:*/		regs.R3 = regs.R23;
		/* 82120C14h case   10:*/		return 0x82120C18;
		  /* 82120C18h */ case   11:  		/* bl -4496 */
		/* 82120C18h case   11:*/		regs.LR = 0x82120C1C; return 0x8211FA88;
		/* 82120C18h case   11:*/		return 0x82120C1C;
		  /* 82120C1Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82120C1Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120C1Ch case   12:*/		return 0x82120C20;
		  /* 82120C20h */ case   13:  		/* bc 4, CR0_LT, 24 */
		/* 82120C20h case   13:*/		if ( !regs.CR[0].lt ) { return 0x82120C38;  }
		/* 82120C20h case   13:*/		return 0x82120C24;
		  /* 82120C24h */ case   14:  		/* li R28, 3058 */
		/* 82120C24h case   14:*/		cpu::op::li<0>(regs,&regs.R28,0xBF2);
		/* 82120C24h case   14:*/		return 0x82120C28;
		  /* 82120C28h */ case   15:  		/* stw R24, <#[R31]> */
		/* 82120C28h case   15:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 82120C28h case   15:*/		return 0x82120C2C;
		  /* 82120C2Ch */ case   16:  		/* b 12 */
		/* 82120C2Ch case   16:*/		return 0x82120C38;
		/* 82120C2Ch case   16:*/		return 0x82120C30;
	}
	return 0x82120C30;
} // Block from 82120BECh-82120C30h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82120C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120C30);
		  /* 82120C30h */ case    0:  		/* stw R24, <#[R3 + 20]> */
		/* 82120C30h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000014) );
		/* 82120C30h case    0:*/		return 0x82120C34;
		  /* 82120C34h */ case    1:  		/* li R28, 3072 */
		/* 82120C34h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0xC00);
		/* 82120C34h case    1:*/		return 0x82120C38;
	}
	return 0x82120C38;
} // Block from 82120C30h-82120C38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120C38);
		  /* 82120C38h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82120C38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120C38h case    0:*/		return 0x82120C3C;
		  /* 82120C3Ch */ case    1:  		/* lwz R30, <#[R30 + 8]> */
		/* 82120C3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 82120C3Ch case    1:*/		return 0x82120C40;
		  /* 82120C40h */ case    2:  		/* mullw R27, R11, R27 */
		/* 82120C40h case    2:*/		cpu::op::mullw<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 82120C40h case    2:*/		return 0x82120C44;
	}
	return 0x82120C44;
} // Block from 82120C38h-82120C44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120C44);
		  /* 82120C44h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82120C44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82120C44h case    0:*/		return 0x82120C48;
		  /* 82120C48h */ case    1:  		/* cmpwi CR6, R11, 3 */
		/* 82120C48h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82120C48h case    1:*/		return 0x82120C4C;
		  /* 82120C4Ch */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 82120C4Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82120BD0;  }
		/* 82120C4Ch case    2:*/		return 0x82120C50;
		  /* 82120C50h */ case    3:  		/* mr R3, R30 */
		/* 82120C50h case    3:*/		regs.R3 = regs.R30;
		/* 82120C50h case    3:*/		return 0x82120C54;
		  /* 82120C54h */ case    4:  		/* bl -358636 */
		/* 82120C54h case    4:*/		regs.LR = 0x82120C58; return 0x820C9368;
		/* 82120C54h case    4:*/		return 0x82120C58;
		  /* 82120C58h */ case    5:  		/* stw R3, <#[R29 + 20]> */
		/* 82120C58h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000014) );
		/* 82120C58h case    5:*/		return 0x82120C5C;
		  /* 82120C5Ch */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82120C5Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120C5Ch case    6:*/		return 0x82120C60;
		  /* 82120C60h */ case    7:  		/* bc 12, CR0_EQ, 180 */
		/* 82120C60h case    7:*/		if ( regs.CR[0].eq ) { return 0x82120D14;  }
		/* 82120C60h case    7:*/		return 0x82120C64;
		  /* 82120C64h */ case    8:  		/* addi R4, R30, 16 */
		/* 82120C64h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x10);
		/* 82120C64h case    8:*/		return 0x82120C68;
		  /* 82120C68h */ case    9:  		/* cmplwi CR6, R28, 3058 */
		/* 82120C68h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000BF2);
		/* 82120C68h case    9:*/		return 0x82120C6C;
		  /* 82120C6Ch */ case   10:  		/* bc 12, CR6_EQ, 144 */
		/* 82120C6Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x82120CFC;  }
		/* 82120C6Ch case   10:*/		return 0x82120C70;
		  /* 82120C70h */ case   11:  		/* cmplwi CR6, R28, 3072 */
		/* 82120C70h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000C00);
		/* 82120C70h case   11:*/		return 0x82120C74;
		  /* 82120C74h */ case   12:  		/* bc 12, CR6_EQ, 120 */
		/* 82120C74h case   12:*/		if ( regs.CR[6].eq ) { return 0x82120CEC;  }
		/* 82120C74h case   12:*/		return 0x82120C78;
		  /* 82120C78h */ case   13:  		/* cmplwi CR6, R27, 1 */
		/* 82120C78h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000001);
		/* 82120C78h case   13:*/		return 0x82120C7C;
		  /* 82120C7Ch */ case   14:  		/* bc 12, CR6_LT, 96 */
		/* 82120C7Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x82120CDC;  }
		/* 82120C7Ch case   14:*/		return 0x82120C80;
		  /* 82120C80h */ case   15:  		/* lis R11, 1 */
		/* 82120C80h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 82120C80h case   15:*/		return 0x82120C84;
		  /* 82120C84h */ case   16:  		/* cmplw CR6, R27, R11 */
		/* 82120C84h case   16:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 82120C84h case   16:*/		return 0x82120C88;
		  /* 82120C88h */ case   17:  		/* bc 12, CR6_GT, 84 */
		/* 82120C88h case   17:*/		if ( regs.CR[6].gt ) { return 0x82120CDC;  }
		/* 82120C88h case   17:*/		return 0x82120C8C;
		  /* 82120C8Ch */ case   18:  		/* lwz R11, <#[R29 + 24]> */
		/* 82120C8Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82120C8Ch case   18:*/		return 0x82120C90;
		  /* 82120C90h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82120C90h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82120C90h case   19:*/		return 0x82120C94;
		  /* 82120C94h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 82120C94h case   20:*/		if ( regs.CR[6].eq ) { return 0x82120CAC;  }
		/* 82120C94h case   20:*/		return 0x82120C98;
		  /* 82120C98h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 82120C98h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82120C98h case   21:*/		return 0x82120C9C;
		  /* 82120C9Ch */ case   22:  		/* cmpwi CR6, R10, 1 */
		/* 82120C9Ch case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82120C9Ch case   22:*/		return 0x82120CA0;
		  /* 82120CA0h */ case   23:  		/* bc 4, CR6_EQ, 12 */
		/* 82120CA0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82120CAC;  }
		/* 82120CA0h case   23:*/		return 0x82120CA4;
		  /* 82120CA4h */ case   24:  		/* lwz R10, <#[R3 + 24]> */
		/* 82120CA4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 82120CA4h case   24:*/		return 0x82120CA8;
		  /* 82120CA8h */ case   25:  		/* stw R10, <#[R11 + 16]> */
		/* 82120CA8h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82120CA8h case   25:*/		return 0x82120CAC;
	}
	return 0x82120CAC;
} // Block from 82120C44h-82120CACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 82120CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120CAC);
		  /* 82120CACh */ case    0:  		/* li R5, 1 */
		/* 82120CACh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82120CACh case    0:*/		return 0x82120CB0;
		  /* 82120CB0h */ case    1:  		/* mr R4, R29 */
		/* 82120CB0h case    1:*/		regs.R4 = regs.R29;
		/* 82120CB0h case    1:*/		return 0x82120CB4;
		  /* 82120CB4h */ case    2:  		/* mr R3, R23 */
		/* 82120CB4h case    2:*/		regs.R3 = regs.R23;
		/* 82120CB4h case    2:*/		return 0x82120CB8;
		  /* 82120CB8h */ case    3:  		/* bl -28624 */
		/* 82120CB8h case    3:*/		regs.LR = 0x82120CBC; return 0x82119CE8;
		/* 82120CB8h case    3:*/		return 0x82120CBC;
		  /* 82120CBCh */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82120CBCh case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120CBCh case    4:*/		return 0x82120CC0;
		  /* 82120CC0h */ case    5:  		/* bc 12, CR0_LT, 84 */
		/* 82120CC0h case    5:*/		if ( regs.CR[0].lt ) { return 0x82120D14;  }
		/* 82120CC0h case    5:*/		return 0x82120CC4;
		  /* 82120CC4h */ case    6:  		/* lwz R22, <#[R22 + 12]> */
		/* 82120CC4h case    6:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + 0x0000000C) );
		/* 82120CC4h case    6:*/		return 0x82120CC8;
		  /* 82120CC8h */ case    7:  		/* cmplwi CR6, R22, 0 */
		/* 82120CC8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82120CC8h case    7:*/		return 0x82120CCC;
		  /* 82120CCCh */ case    8:  		/* bc 4, CR6_EQ, -436 */
		/* 82120CCCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x82120B18;  }
		/* 82120CCCh case    8:*/		return 0x82120CD0;
		  /* 82120CD0h */ case    9:  		/* lwz R3, <#[R1 + 128]> */
		/* 82120CD0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 82120CD0h case    9:*/		return 0x82120CD4;
		  /* 82120CD4h */ case   10:  		/* addi R1, R1, 240 */
		/* 82120CD4h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82120CD4h case   10:*/		return 0x82120CD8;
		  /* 82120CD8h */ case   11:  		/* b -588364 */
		/* 82120CD8h case   11:*/		return 0x8209128C;
		/* 82120CD8h case   11:*/		return 0x82120CDC;
	}
	return 0x82120CDC;
} // Block from 82120CACh-82120CDCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 82120CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120CDC);
		  /* 82120CDCh */ case    0:  		/* lis R11, -32253 */
		/* 82120CDCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120CDCh case    0:*/		return 0x82120CE0;
		  /* 82120CE0h */ case    1:  		/* li R5, 3059 */
		/* 82120CE0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBF3);
		/* 82120CE0h case    1:*/		return 0x82120CE4;
		  /* 82120CE4h */ case    2:  		/* addi R6, R11, 9892 */
		/* 82120CE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x26A4);
		/* 82120CE4h case    2:*/		return 0x82120CE8;
		  /* 82120CE8h */ case    3:  		/* b 32 */
		/* 82120CE8h case    3:*/		return 0x82120D08;
		/* 82120CE8h case    3:*/		return 0x82120CEC;
	}
	return 0x82120CEC;
} // Block from 82120CDCh-82120CECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82120CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120CEC);
		  /* 82120CECh */ case    0:  		/* lis R11, -32253 */
		/* 82120CECh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120CECh case    0:*/		return 0x82120CF0;
		  /* 82120CF0h */ case    1:  		/* li R5, 3072 */
		/* 82120CF0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC00);
		/* 82120CF0h case    1:*/		return 0x82120CF4;
		  /* 82120CF4h */ case    2:  		/* addi R6, R11, 9844 */
		/* 82120CF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2674);
		/* 82120CF4h case    2:*/		return 0x82120CF8;
		  /* 82120CF8h */ case    3:  		/* b 16 */
		/* 82120CF8h case    3:*/		return 0x82120D08;
		/* 82120CF8h case    3:*/		return 0x82120CFC;
	}
	return 0x82120CFC;
} // Block from 82120CECh-82120CFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82120CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120CFC);
		  /* 82120CFCh */ case    0:  		/* lis R11, -32253 */
		/* 82120CFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120CFCh case    0:*/		return 0x82120D00;
		  /* 82120D00h */ case    1:  		/* li R5, 3058 */
		/* 82120D00h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBF2);
		/* 82120D00h case    1:*/		return 0x82120D04;
		  /* 82120D04h */ case    2:  		/* addi R6, R11, 9784 */
		/* 82120D04h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2638);
		/* 82120D04h case    2:*/		return 0x82120D08;
	}
	return 0x82120D08;
} // Block from 82120CFCh-82120D08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D08);
		  /* 82120D08h */ case    0:  		/* mr R3, R23 */
		/* 82120D08h case    0:*/		regs.R3 = regs.R23;
		/* 82120D08h case    0:*/		return 0x82120D0C;
		  /* 82120D0Ch */ case    1:  		/* lwz R7, <#[R4 + 8]> */
		/* 82120D0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 82120D0Ch case    1:*/		return 0x82120D10;
		  /* 82120D10h */ case    2:  		/* bl -29808 */
		/* 82120D10h case    2:*/		regs.LR = 0x82120D14; return 0x821198A0;
		/* 82120D10h case    2:*/		return 0x82120D14;
	}
	return 0x82120D14;
} // Block from 82120D08h-82120D14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D14);
		  /* 82120D14h */ case    0:  		/* li R3, 0 */
		/* 82120D14h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120D14h case    0:*/		return 0x82120D18;
		  /* 82120D18h */ case    1:  		/* b -68 */
		/* 82120D18h case    1:*/		return 0x82120CD4;
		/* 82120D18h case    1:*/		return 0x82120D1C;
		  /* 82120D1Ch */ case    2:  		/* nop */
		/* 82120D1Ch case    2:*/		cpu::op::nop();
		/* 82120D1Ch case    2:*/		return 0x82120D20;
	}
	return 0x82120D20;
} // Block from 82120D14h-82120D20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D20);
		  /* 82120D20h */ case    0:  		/* mfspr R12, LR */
		/* 82120D20h case    0:*/		regs.R12 = regs.LR;
		/* 82120D20h case    0:*/		return 0x82120D24;
		  /* 82120D24h */ case    1:  		/* bl -588488 */
		/* 82120D24h case    1:*/		regs.LR = 0x82120D28; return 0x8209125C;
		/* 82120D24h case    1:*/		return 0x82120D28;
		  /* 82120D28h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82120D28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82120D28h case    2:*/		return 0x82120D2C;
		  /* 82120D2Ch */ case    3:  		/* mr R30, R3 */
		/* 82120D2Ch case    3:*/		regs.R30 = regs.R3;
		/* 82120D2Ch case    3:*/		return 0x82120D30;
		  /* 82120D30h */ case    4:  		/* li R3, 20 */
		/* 82120D30h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82120D30h case    4:*/		return 0x82120D34;
		  /* 82120D34h */ case    5:  		/* mr R29, R4 */
		/* 82120D34h case    5:*/		regs.R29 = regs.R4;
		/* 82120D34h case    5:*/		return 0x82120D38;
		  /* 82120D38h */ case    6:  		/* mr R31, R5 */
		/* 82120D38h case    6:*/		regs.R31 = regs.R5;
		/* 82120D38h case    6:*/		return 0x82120D3C;
		  /* 82120D3Ch */ case    7:  		/* bl -359188 */
		/* 82120D3Ch case    7:*/		regs.LR = 0x82120D40; return 0x820C9228;
		/* 82120D3Ch case    7:*/		return 0x82120D40;
		  /* 82120D40h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82120D40h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120D40h case    8:*/		return 0x82120D44;
		  /* 82120D44h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 82120D44h case    9:*/		if ( regs.CR[0].eq ) { return 0x82120D60;  }
		/* 82120D44h case    9:*/		return 0x82120D48;
		  /* 82120D48h */ case   10:  		/* li R5, 0 */
		/* 82120D48h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82120D48h case   10:*/		return 0x82120D4C;
		  /* 82120D4Ch */ case   11:  		/* lwz R6, <#[R31 + 24]> */
		/* 82120D4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 82120D4Ch case   11:*/		return 0x82120D50;
		  /* 82120D50h */ case   12:  		/* mr R4, R31 */
		/* 82120D50h case   12:*/		regs.R4 = regs.R31;
		/* 82120D50h case   12:*/		return 0x82120D54;
		  /* 82120D54h */ case   13:  		/* bl -358756 */
		/* 82120D54h case   13:*/		regs.LR = 0x82120D58; return 0x820C93F0;
		/* 82120D54h case   13:*/		return 0x82120D58;
		  /* 82120D58h */ case   14:  		/* mr R31, R3 */
		/* 82120D58h case   14:*/		regs.R31 = regs.R3;
		/* 82120D58h case   14:*/		return 0x82120D5C;
		  /* 82120D5Ch */ case   15:  		/* b 8 */
		/* 82120D5Ch case   15:*/		return 0x82120D64;
		/* 82120D5Ch case   15:*/		return 0x82120D60;
	}
	return 0x82120D60;
} // Block from 82120D20h-82120D60h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82120D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D60);
		  /* 82120D60h */ case    0:  		/* li R31, 0 */
		/* 82120D60h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82120D60h case    0:*/		return 0x82120D64;
	}
	return 0x82120D64;
} // Block from 82120D60h-82120D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D64);
		  /* 82120D64h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82120D64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82120D64h case    0:*/		return 0x82120D68;
		  /* 82120D68h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82120D68h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82120D74;  }
		/* 82120D68h case    1:*/		return 0x82120D6C;
		  /* 82120D6Ch */ case    2:  		/* li R3, 0 */
		/* 82120D6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120D6Ch case    2:*/		return 0x82120D70;
		  /* 82120D70h */ case    3:  		/* b 28 */
		/* 82120D70h case    3:*/		return 0x82120D8C;
		/* 82120D70h case    3:*/		return 0x82120D74;
	}
	return 0x82120D74;
} // Block from 82120D64h-82120D74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82120D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D74);
		  /* 82120D74h */ case    0:  		/* mr R5, R31 */
		/* 82120D74h case    0:*/		regs.R5 = regs.R31;
		/* 82120D74h case    0:*/		return 0x82120D78;
		  /* 82120D78h */ case    1:  		/* mr R4, R29 */
		/* 82120D78h case    1:*/		regs.R4 = regs.R29;
		/* 82120D78h case    1:*/		return 0x82120D7C;
		  /* 82120D7Ch */ case    2:  		/* mr R3, R30 */
		/* 82120D7Ch case    2:*/		regs.R3 = regs.R30;
		/* 82120D7Ch case    2:*/		return 0x82120D80;
		  /* 82120D80h */ case    3:  		/* bl -672 */
		/* 82120D80h case    3:*/		regs.LR = 0x82120D84; return 0x82120AE0;
		/* 82120D80h case    3:*/		return 0x82120D84;
		  /* 82120D84h */ case    4:  		/* li R11, 0 */
		/* 82120D84h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82120D84h case    4:*/		return 0x82120D88;
		  /* 82120D88h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 82120D88h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82120D88h case    5:*/		return 0x82120D8C;
	}
	return 0x82120D8C;
} // Block from 82120D74h-82120D8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82120D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D8C);
		  /* 82120D8Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82120D8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82120D8Ch case    0:*/		return 0x82120D90;
		  /* 82120D90h */ case    1:  		/* b -588516 */
		/* 82120D90h case    1:*/		return 0x820912AC;
		/* 82120D90h case    1:*/		return 0x82120D94;
		  /* 82120D94h */ case    2:  		/* nop */
		/* 82120D94h case    2:*/		cpu::op::nop();
		/* 82120D94h case    2:*/		return 0x82120D98;
	}
	return 0x82120D98;
} // Block from 82120D8Ch-82120D98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82120D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120D98);
		  /* 82120D98h */ case    0:  		/* mfspr R12, LR */
		/* 82120D98h case    0:*/		regs.R12 = regs.LR;
		/* 82120D98h case    0:*/		return 0x82120D9C;
		  /* 82120D9Ch */ case    1:  		/* bl -588608 */
		/* 82120D9Ch case    1:*/		regs.LR = 0x82120DA0; return 0x8209125C;
		/* 82120D9Ch case    1:*/		return 0x82120DA0;
		  /* 82120DA0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82120DA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82120DA0h case    2:*/		return 0x82120DA4;
		  /* 82120DA4h */ case    3:  		/* mr R29, R4 */
		/* 82120DA4h case    3:*/		regs.R29 = regs.R4;
		/* 82120DA4h case    3:*/		return 0x82120DA8;
		  /* 82120DA8h */ case    4:  		/* mr R31, R3 */
		/* 82120DA8h case    4:*/		regs.R31 = regs.R3;
		/* 82120DA8h case    4:*/		return 0x82120DAC;
		  /* 82120DACh */ case    5:  		/* mr R4, R5 */
		/* 82120DACh case    5:*/		regs.R4 = regs.R5;
		/* 82120DACh case    5:*/		return 0x82120DB0;
		  /* 82120DB0h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 82120DB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82120DB0h case    6:*/		return 0x82120DB4;
		  /* 82120DB4h */ case    7:  		/* bc 12, CR6_EQ, 144 */
		/* 82120DB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82120E44;  }
		/* 82120DB4h case    7:*/		return 0x82120DB8;
		  /* 82120DB8h */ case    8:  		/* addi R5, R1, 128 */
		/* 82120DB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82120DB8h case    8:*/		return 0x82120DBC;
		  /* 82120DBCh */ case    9:  		/* bl -4916 */
		/* 82120DBCh case    9:*/		regs.LR = 0x82120DC0; return 0x8211FA88;
		/* 82120DBCh case    9:*/		return 0x82120DC0;
		  /* 82120DC0h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82120DC0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120DC0h case   10:*/		return 0x82120DC4;
		  /* 82120DC4h */ case   11:  		/* bc 4, CR0_LT, 32 */
		/* 82120DC4h case   11:*/		if ( !regs.CR[0].lt ) { return 0x82120DE4;  }
		/* 82120DC4h case   11:*/		return 0x82120DC8;
		  /* 82120DC8h */ case   12:  		/* lis R11, -32253 */
		/* 82120DC8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120DC8h case   12:*/		return 0x82120DCC;
		  /* 82120DCCh */ case   13:  		/* li R5, 3060 */
		/* 82120DCCh case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBF4);
		/* 82120DCCh case   13:*/		return 0x82120DD0;
		  /* 82120DD0h */ case   14:  		/* addi R6, R11, 10004 */
		/* 82120DD0h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2714);
		/* 82120DD0h case   14:*/		return 0x82120DD4;
		  /* 82120DD4h */ case   15:  		/* addi R4, R31, 40 */
		/* 82120DD4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 82120DD4h case   15:*/		return 0x82120DD8;
		  /* 82120DD8h */ case   16:  		/* mr R3, R31 */
		/* 82120DD8h case   16:*/		regs.R3 = regs.R31;
		/* 82120DD8h case   16:*/		return 0x82120DDC;
		  /* 82120DDCh */ case   17:  		/* bl -30012 */
		/* 82120DDCh case   17:*/		regs.LR = 0x82120DE0; return 0x821198A0;
		/* 82120DDCh case   17:*/		return 0x82120DE0;
		  /* 82120DE0h */ case   18:  		/* b 100 */
		/* 82120DE0h case   18:*/		return 0x82120E44;
		/* 82120DE0h case   18:*/		return 0x82120DE4;
	}
	return 0x82120DE4;
} // Block from 82120D98h-82120DE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82120DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120DE4);
		  /* 82120DE4h */ case    0:  		/* lwz R30, <#[R1 + 128]> */
		/* 82120DE4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000080) );
		/* 82120DE4h case    0:*/		return 0x82120DE8;
		  /* 82120DE8h */ case    1:  		/* cmplwi CR6, R30, 1 */
		/* 82120DE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82120DE8h case    1:*/		return 0x82120DEC;
		  /* 82120DECh */ case    2:  		/* bc 12, CR6_LT, 60 */
		/* 82120DECh case    2:*/		if ( regs.CR[6].lt ) { return 0x82120E28;  }
		/* 82120DECh case    2:*/		return 0x82120DF0;
		  /* 82120DF0h */ case    3:  		/* cmplwi CR6, R30, 4 */
		/* 82120DF0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 82120DF0h case    3:*/		return 0x82120DF4;
		  /* 82120DF4h */ case    4:  		/* bc 12, CR6_GT, 52 */
		/* 82120DF4h case    4:*/		if ( regs.CR[6].gt ) { return 0x82120E28;  }
		/* 82120DF4h case    4:*/		return 0x82120DF8;
		  /* 82120DF8h */ case    5:  		/* li R3, 40 */
		/* 82120DF8h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120DF8h case    5:*/		return 0x82120DFC;
		  /* 82120DFCh */ case    6:  		/* bl -359380 */
		/* 82120DFCh case    6:*/		regs.LR = 0x82120E00; return 0x820C9228;
		/* 82120DFCh case    6:*/		return 0x82120E00;
		  /* 82120E00h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82120E00h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120E00h case    7:*/		return 0x82120E04;
		  /* 82120E04h */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 82120E04h case    8:*/		if ( regs.CR[0].eq ) { return 0x82120E44;  }
		/* 82120E04h case    8:*/		return 0x82120E08;
		  /* 82120E08h */ case    9:  		/* li R9, 0 */
		/* 82120E08h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82120E08h case    9:*/		return 0x82120E0C;
		  /* 82120E0Ch */ case   10:  		/* lwz R5, <#[R29 + 20]> */
		/* 82120E0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 82120E0Ch case   10:*/		return 0x82120E10;
		  /* 82120E10h */ case   11:  		/* mr R8, R30 */
		/* 82120E10h case   11:*/		regs.R8 = regs.R30;
		/* 82120E10h case   11:*/		return 0x82120E14;
		  /* 82120E14h */ case   12:  		/* li R7, 1 */
		/* 82120E14h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82120E14h case   12:*/		return 0x82120E18;
		  /* 82120E18h */ case   13:  		/* li R6, 0 */
		/* 82120E18h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82120E18h case   13:*/		return 0x82120E1C;
		  /* 82120E1Ch */ case   14:  		/* li R4, 1 */
		/* 82120E1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82120E1Ch case   14:*/		return 0x82120E20;
		  /* 82120E20h */ case   15:  		/* bl -352672 */
		/* 82120E20h case   15:*/		regs.LR = 0x82120E24; return 0x820CAC80;
		/* 82120E20h case   15:*/		return 0x82120E24;
		  /* 82120E24h */ case   16:  		/* b 36 */
		/* 82120E24h case   16:*/		return 0x82120E48;
		/* 82120E24h case   16:*/		return 0x82120E28;
	}
	return 0x82120E28;
} // Block from 82120DE4h-82120E28h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82120E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120E28);
		  /* 82120E28h */ case    0:  		/* lis R11, -32253 */
		/* 82120E28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120E28h case    0:*/		return 0x82120E2C;
		  /* 82120E2Ch */ case    1:  		/* li R7, 4 */
		/* 82120E2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82120E2Ch case    1:*/		return 0x82120E30;
		  /* 82120E30h */ case    2:  		/* addi R6, R11, 9960 */
		/* 82120E30h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x26E8);
		/* 82120E30h case    2:*/		return 0x82120E34;
		  /* 82120E34h */ case    3:  		/* li R5, 3052 */
		/* 82120E34h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xBEC);
		/* 82120E34h case    3:*/		return 0x82120E38;
		  /* 82120E38h */ case    4:  		/* addi R4, R31, 40 */
		/* 82120E38h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 82120E38h case    4:*/		return 0x82120E3C;
		  /* 82120E3Ch */ case    5:  		/* mr R3, R31 */
		/* 82120E3Ch case    5:*/		regs.R3 = regs.R31;
		/* 82120E3Ch case    5:*/		return 0x82120E40;
		  /* 82120E40h */ case    6:  		/* bl -30112 */
		/* 82120E40h case    6:*/		regs.LR = 0x82120E44; return 0x821198A0;
		/* 82120E40h case    6:*/		return 0x82120E44;
	}
	return 0x82120E44;
} // Block from 82120E28h-82120E44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82120E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120E44);
		  /* 82120E44h */ case    0:  		/* li R3, 0 */
		/* 82120E44h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120E44h case    0:*/		return 0x82120E48;
	}
	return 0x82120E48;
} // Block from 82120E44h-82120E48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120E48);
		  /* 82120E48h */ case    0:  		/* addi R1, R1, 176 */
		/* 82120E48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82120E48h case    0:*/		return 0x82120E4C;
		  /* 82120E4Ch */ case    1:  		/* b -588704 */
		/* 82120E4Ch case    1:*/		return 0x820912AC;
		/* 82120E4Ch case    1:*/		return 0x82120E50;
	}
	return 0x82120E50;
} // Block from 82120E48h-82120E50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120E50);
		  /* 82120E50h */ case    0:  		/* mfspr R12, LR */
		/* 82120E50h case    0:*/		regs.R12 = regs.LR;
		/* 82120E50h case    0:*/		return 0x82120E54;
		  /* 82120E54h */ case    1:  		/* bl -588796 */
		/* 82120E54h case    1:*/		regs.LR = 0x82120E58; return 0x82091258;
		/* 82120E54h case    1:*/		return 0x82120E58;
		  /* 82120E58h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82120E58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82120E58h case    2:*/		return 0x82120E5C;
		  /* 82120E5Ch */ case    3:  		/* mr R28, R4 */
		/* 82120E5Ch case    3:*/		regs.R28 = regs.R4;
		/* 82120E5Ch case    3:*/		return 0x82120E60;
		  /* 82120E60h */ case    4:  		/* mr R31, R3 */
		/* 82120E60h case    4:*/		regs.R31 = regs.R3;
		/* 82120E60h case    4:*/		return 0x82120E64;
		  /* 82120E64h */ case    5:  		/* mr R4, R5 */
		/* 82120E64h case    5:*/		regs.R4 = regs.R5;
		/* 82120E64h case    5:*/		return 0x82120E68;
		  /* 82120E68h */ case    6:  		/* mr R30, R6 */
		/* 82120E68h case    6:*/		regs.R30 = regs.R6;
		/* 82120E68h case    6:*/		return 0x82120E6C;
		  /* 82120E6Ch */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 82120E6Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82120E6Ch case    7:*/		return 0x82120E70;
		  /* 82120E70h */ case    8:  		/* bc 12, CR6_EQ, 188 */
		/* 82120E70h case    8:*/		if ( regs.CR[6].eq ) { return 0x82120F2C;  }
		/* 82120E70h case    8:*/		return 0x82120E74;
		  /* 82120E74h */ case    9:  		/* addi R5, R1, 128 */
		/* 82120E74h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82120E74h case    9:*/		return 0x82120E78;
		  /* 82120E78h */ case   10:  		/* bl -5104 */
		/* 82120E78h case   10:*/		regs.LR = 0x82120E7C; return 0x8211FA88;
		/* 82120E78h case   10:*/		return 0x82120E7C;
		  /* 82120E7Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82120E7Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120E7Ch case   11:*/		return 0x82120E80;
		  /* 82120E80h */ case   12:  		/* bc 12, CR0_LT, 148 */
		/* 82120E80h case   12:*/		if ( regs.CR[0].lt ) { return 0x82120F14;  }
		/* 82120E80h case   12:*/		return 0x82120E84;
		  /* 82120E84h */ case   13:  		/* addi R5, R1, 132 */
		/* 82120E84h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 82120E84h case   13:*/		return 0x82120E88;
		  /* 82120E88h */ case   14:  		/* mr R4, R30 */
		/* 82120E88h case   14:*/		regs.R4 = regs.R30;
		/* 82120E88h case   14:*/		return 0x82120E8C;
		  /* 82120E8Ch */ case   15:  		/* mr R3, R31 */
		/* 82120E8Ch case   15:*/		regs.R3 = regs.R31;
		/* 82120E8Ch case   15:*/		return 0x82120E90;
		  /* 82120E90h */ case   16:  		/* bl -5128 */
		/* 82120E90h case   16:*/		regs.LR = 0x82120E94; return 0x8211FA88;
		/* 82120E90h case   16:*/		return 0x82120E94;
		  /* 82120E94h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82120E94h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120E94h case   17:*/		return 0x82120E98;
		  /* 82120E98h */ case   18:  		/* bc 12, CR0_LT, 124 */
		/* 82120E98h case   18:*/		if ( regs.CR[0].lt ) { return 0x82120F14;  }
		/* 82120E98h case   18:*/		return 0x82120E9C;
		  /* 82120E9Ch */ case   19:  		/* lwz R29, <#[R1 + 128]> */
		/* 82120E9Ch case   19:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000080) );
		/* 82120E9Ch case   19:*/		return 0x82120EA0;
		  /* 82120EA0h */ case   20:  		/* cmplwi CR6, R29, 1 */
		/* 82120EA0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 82120EA0h case   20:*/		return 0x82120EA4;
		  /* 82120EA4h */ case   21:  		/* bc 12, CR6_LT, 80 */
		/* 82120EA4h case   21:*/		if ( regs.CR[6].lt ) { return 0x82120EF4;  }
		/* 82120EA4h case   21:*/		return 0x82120EA8;
		  /* 82120EA8h */ case   22:  		/* cmplwi CR6, R29, 4 */
		/* 82120EA8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82120EA8h case   22:*/		return 0x82120EAC;
		  /* 82120EACh */ case   23:  		/* bc 12, CR6_GT, 72 */
		/* 82120EACh case   23:*/		if ( regs.CR[6].gt ) { return 0x82120EF4;  }
		/* 82120EACh case   23:*/		return 0x82120EB0;
		  /* 82120EB0h */ case   24:  		/* lwz R30, <#[R1 + 132]> */
		/* 82120EB0h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000084) );
		/* 82120EB0h case   24:*/		return 0x82120EB4;
		  /* 82120EB4h */ case   25:  		/* cmplwi CR6, R30, 1 */
		/* 82120EB4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82120EB4h case   25:*/		return 0x82120EB8;
		  /* 82120EB8h */ case   26:  		/* bc 12, CR6_LT, 60 */
		/* 82120EB8h case   26:*/		if ( regs.CR[6].lt ) { return 0x82120EF4;  }
		/* 82120EB8h case   26:*/		return 0x82120EBC;
		  /* 82120EBCh */ case   27:  		/* cmplwi CR6, R30, 4 */
		/* 82120EBCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 82120EBCh case   27:*/		return 0x82120EC0;
		  /* 82120EC0h */ case   28:  		/* bc 12, CR6_GT, 52 */
		/* 82120EC0h case   28:*/		if ( regs.CR[6].gt ) { return 0x82120EF4;  }
		/* 82120EC0h case   28:*/		return 0x82120EC4;
		  /* 82120EC4h */ case   29:  		/* li R3, 40 */
		/* 82120EC4h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120EC4h case   29:*/		return 0x82120EC8;
		  /* 82120EC8h */ case   30:  		/* bl -359584 */
		/* 82120EC8h case   30:*/		regs.LR = 0x82120ECC; return 0x820C9228;
		/* 82120EC8h case   30:*/		return 0x82120ECC;
		  /* 82120ECCh */ case   31:  		/* cmplwi CR0, R3, 0 */
		/* 82120ECCh case   31:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120ECCh case   31:*/		return 0x82120ED0;
		  /* 82120ED0h */ case   32:  		/* bc 12, CR0_EQ, 92 */
		/* 82120ED0h case   32:*/		if ( regs.CR[0].eq ) { return 0x82120F2C;  }
		/* 82120ED0h case   32:*/		return 0x82120ED4;
		  /* 82120ED4h */ case   33:  		/* li R9, 0 */
		/* 82120ED4h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82120ED4h case   33:*/		return 0x82120ED8;
		  /* 82120ED8h */ case   34:  		/* lwz R5, <#[R28 + 20]> */
		/* 82120ED8h case   34:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000014) );
		/* 82120ED8h case   34:*/		return 0x82120EDC;
		  /* 82120EDCh */ case   35:  		/* mr R8, R30 */
		/* 82120EDCh case   35:*/		regs.R8 = regs.R30;
		/* 82120EDCh case   35:*/		return 0x82120EE0;
		  /* 82120EE0h */ case   36:  		/* mr R7, R29 */
		/* 82120EE0h case   36:*/		regs.R7 = regs.R29;
		/* 82120EE0h case   36:*/		return 0x82120EE4;
		  /* 82120EE4h */ case   37:  		/* li R6, 0 */
		/* 82120EE4h case   37:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82120EE4h case   37:*/		return 0x82120EE8;
		  /* 82120EE8h */ case   38:  		/* li R4, 2 */
		/* 82120EE8h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82120EE8h case   38:*/		return 0x82120EEC;
		  /* 82120EECh */ case   39:  		/* bl -352876 */
		/* 82120EECh case   39:*/		regs.LR = 0x82120EF0; return 0x820CAC80;
		/* 82120EECh case   39:*/		return 0x82120EF0;
		  /* 82120EF0h */ case   40:  		/* b 64 */
		/* 82120EF0h case   40:*/		return 0x82120F30;
		/* 82120EF0h case   40:*/		return 0x82120EF4;
	}
	return 0x82120EF4;
} // Block from 82120E50h-82120EF4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82120EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120EF4);
		  /* 82120EF4h */ case    0:  		/* lis R11, -32253 */
		/* 82120EF4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120EF4h case    0:*/		return 0x82120EF8;
		  /* 82120EF8h */ case    1:  		/* li R7, 4 */
		/* 82120EF8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82120EF8h case    1:*/		return 0x82120EFC;
		  /* 82120EFCh */ case    2:  		/* addi R6, R11, 10116 */
		/* 82120EFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2784);
		/* 82120EFCh case    2:*/		return 0x82120F00;
		  /* 82120F00h */ case    3:  		/* li R5, 3053 */
		/* 82120F00h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xBED);
		/* 82120F00h case    3:*/		return 0x82120F04;
		  /* 82120F04h */ case    4:  		/* addi R4, R31, 40 */
		/* 82120F04h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 82120F04h case    4:*/		return 0x82120F08;
		  /* 82120F08h */ case    5:  		/* mr R3, R31 */
		/* 82120F08h case    5:*/		regs.R3 = regs.R31;
		/* 82120F08h case    5:*/		return 0x82120F0C;
		  /* 82120F0Ch */ case    6:  		/* bl -30316 */
		/* 82120F0Ch case    6:*/		regs.LR = 0x82120F10; return 0x821198A0;
		/* 82120F0Ch case    6:*/		return 0x82120F10;
		  /* 82120F10h */ case    7:  		/* b 28 */
		/* 82120F10h case    7:*/		return 0x82120F2C;
		/* 82120F10h case    7:*/		return 0x82120F14;
	}
	return 0x82120F14;
} // Block from 82120EF4h-82120F14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82120F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120F14);
		  /* 82120F14h */ case    0:  		/* lis R11, -32253 */
		/* 82120F14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120F14h case    0:*/		return 0x82120F18;
		  /* 82120F18h */ case    1:  		/* li R5, 3061 */
		/* 82120F18h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBF5);
		/* 82120F18h case    1:*/		return 0x82120F1C;
		  /* 82120F1Ch */ case    2:  		/* addi R6, R11, 10060 */
		/* 82120F1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x274C);
		/* 82120F1Ch case    2:*/		return 0x82120F20;
		  /* 82120F20h */ case    3:  		/* addi R4, R31, 40 */
		/* 82120F20h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 82120F20h case    3:*/		return 0x82120F24;
		  /* 82120F24h */ case    4:  		/* mr R3, R31 */
		/* 82120F24h case    4:*/		regs.R3 = regs.R31;
		/* 82120F24h case    4:*/		return 0x82120F28;
		  /* 82120F28h */ case    5:  		/* bl -30344 */
		/* 82120F28h case    5:*/		regs.LR = 0x82120F2C; return 0x821198A0;
		/* 82120F28h case    5:*/		return 0x82120F2C;
	}
	return 0x82120F2C;
} // Block from 82120F14h-82120F2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82120F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120F2C);
		  /* 82120F2Ch */ case    0:  		/* li R3, 0 */
		/* 82120F2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120F2Ch case    0:*/		return 0x82120F30;
	}
	return 0x82120F30;
} // Block from 82120F2Ch-82120F30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120F30);
		  /* 82120F30h */ case    0:  		/* addi R1, R1, 176 */
		/* 82120F30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82120F30h case    0:*/		return 0x82120F34;
		  /* 82120F34h */ case    1:  		/* b -588940 */
		/* 82120F34h case    1:*/		return 0x820912A8;
		/* 82120F34h case    1:*/		return 0x82120F38;
	}
	return 0x82120F38;
} // Block from 82120F30h-82120F38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120F38);
		  /* 82120F38h */ case    0:  		/* mfspr R12, LR */
		/* 82120F38h case    0:*/		regs.R12 = regs.LR;
		/* 82120F38h case    0:*/		return 0x82120F3C;
		  /* 82120F3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82120F3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82120F3Ch case    1:*/		return 0x82120F40;
		  /* 82120F40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82120F40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82120F40h case    2:*/		return 0x82120F44;
		  /* 82120F44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82120F44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82120F44h case    3:*/		return 0x82120F48;
		  /* 82120F48h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 82120F48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82120F48h case    4:*/		return 0x82120F4C;
		  /* 82120F4Ch */ case    5:  		/* mr R30, R4 */
		/* 82120F4Ch case    5:*/		regs.R30 = regs.R4;
		/* 82120F4Ch case    5:*/		return 0x82120F50;
		  /* 82120F50h */ case    6:  		/* stw R4, <#[R1 + 172]> */
		/* 82120F50h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000000AC) );
		/* 82120F50h case    6:*/		return 0x82120F54;
		  /* 82120F54h */ case    7:  		/* mr R4, R5 */
		/* 82120F54h case    7:*/		regs.R4 = regs.R5;
		/* 82120F54h case    7:*/		return 0x82120F58;
		  /* 82120F58h */ case    8:  		/* addi R5, R1, 112 */
		/* 82120F58h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82120F58h case    8:*/		return 0x82120F5C;
		  /* 82120F5Ch */ case    9:  		/* mr R31, R3 */
		/* 82120F5Ch case    9:*/		regs.R31 = regs.R3;
		/* 82120F5Ch case    9:*/		return 0x82120F60;
		  /* 82120F60h */ case   10:  		/* bl -5336 */
		/* 82120F60h case   10:*/		regs.LR = 0x82120F64; return 0x8211FA88;
		/* 82120F60h case   10:*/		return 0x82120F64;
		  /* 82120F64h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82120F64h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120F64h case   11:*/		return 0x82120F68;
		  /* 82120F68h */ case   12:  		/* bc 4, CR0_LT, 36 */
		/* 82120F68h case   12:*/		if ( !regs.CR[0].lt ) { return 0x82120F8C;  }
		/* 82120F68h case   12:*/		return 0x82120F6C;
		  /* 82120F6Ch */ case   13:  		/* lis R11, -32253 */
		/* 82120F6Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120F6Ch case   13:*/		return 0x82120F70;
		  /* 82120F70h */ case   14:  		/* li R5, 3058 */
		/* 82120F70h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0xBF2);
		/* 82120F70h case   14:*/		return 0x82120F74;
		  /* 82120F74h */ case   15:  		/* addi R6, R11, 10160 */
		/* 82120F74h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x27B0);
		/* 82120F74h case   15:*/		return 0x82120F78;
		  /* 82120F78h */ case   16:  		/* li R4, 0 */
		/* 82120F78h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82120F78h case   16:*/		return 0x82120F7C;
		  /* 82120F7Ch */ case   17:  		/* mr R3, R31 */
		/* 82120F7Ch case   17:*/		regs.R3 = regs.R31;
		/* 82120F7Ch case   17:*/		return 0x82120F80;
		  /* 82120F80h */ case   18:  		/* bl -30432 */
		/* 82120F80h case   18:*/		regs.LR = 0x82120F84; return 0x821198A0;
		/* 82120F80h case   18:*/		return 0x82120F84;
		  /* 82120F84h */ case   19:  		/* li R3, 0 */
		/* 82120F84h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120F84h case   19:*/		return 0x82120F88;
		  /* 82120F88h */ case   20:  		/* b 108 */
		/* 82120F88h case   20:*/		return 0x82120FF4;
		/* 82120F88h case   20:*/		return 0x82120F8C;
	}
	return 0x82120F8C;
} // Block from 82120F38h-82120F8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82120F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120F8C);
		  /* 82120F8Ch */ case    0:  		/* li R3, 24 */
		/* 82120F8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82120F8Ch case    0:*/		return 0x82120F90;
		  /* 82120F90h */ case    1:  		/* bl -359784 */
		/* 82120F90h case    1:*/		regs.LR = 0x82120F94; return 0x820C9228;
		/* 82120F90h case    1:*/		return 0x82120F94;
		  /* 82120F94h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82120F94h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120F94h case    2:*/		return 0x82120F98;
		  /* 82120F98h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 82120F98h case    3:*/		if ( regs.CR[0].eq ) { return 0x82120FAC;  }
		/* 82120F98h case    3:*/		return 0x82120F9C;
		  /* 82120F9Ch */ case    4:  		/* li R4, 0 */
		/* 82120F9Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82120F9Ch case    4:*/		return 0x82120FA0;
		  /* 82120FA0h */ case    5:  		/* lwz R5, <#[R1 + 112]> */
		/* 82120FA0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 82120FA0h case    5:*/		return 0x82120FA4;
		  /* 82120FA4h */ case    6:  		/* bl -353516 */
		/* 82120FA4h case    6:*/		regs.LR = 0x82120FA8; return 0x820CAAB8;
		/* 82120FA4h case    6:*/		return 0x82120FA8;
		  /* 82120FA8h */ case    7:  		/* b 8 */
		/* 82120FA8h case    7:*/		return 0x82120FB0;
		/* 82120FA8h case    7:*/		return 0x82120FAC;
	}
	return 0x82120FAC;
} // Block from 82120F8Ch-82120FACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82120FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120FAC);
		  /* 82120FACh */ case    0:  		/* li R3, 0 */
		/* 82120FACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82120FACh case    0:*/		return 0x82120FB0;
	}
	return 0x82120FB0;
} // Block from 82120FACh-82120FB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120FB0);
		  /* 82120FB0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82120FB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82120FB0h case    0:*/		return 0x82120FB4;
		  /* 82120FB4h */ case    1:  		/* bc 12, CR6_EQ, -48 */
		/* 82120FB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82120F84;  }
		/* 82120FB4h case    1:*/		return 0x82120FB8;
		  /* 82120FB8h */ case    2:  		/* addi R11, R1, 172 */
		/* 82120FB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xAC);
		/* 82120FB8h case    2:*/		return 0x82120FBC;
		  /* 82120FBCh */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 82120FBCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82120FBCh case    3:*/		return 0x82120FC0;
		  /* 82120FC0h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82120FC0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82120FE4;  }
		/* 82120FC0h case    4:*/		return 0x82120FC4;
		  /* 82120FC4h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82120FC4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82120FC4h case    5:*/		return 0x82120FC8;
		  /* 82120FC8h */ case    6:  		/* lwz R9, <#[R10 + 4]> */
		/* 82120FC8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82120FC8h case    6:*/		return 0x82120FCC;
		  /* 82120FCCh */ case    7:  		/* cmpwi CR6, R9, 8 */
		/* 82120FCCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000008);
		/* 82120FCCh case    7:*/		return 0x82120FD0;
		  /* 82120FD0h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82120FD0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82120FE4;  }
		/* 82120FD0h case    8:*/		return 0x82120FD4;
		  /* 82120FD4h */ case    9:  		/* lwz R9, <#[R10 + 16]> */
		/* 82120FD4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82120FD4h case    9:*/		return 0x82120FD8;
		  /* 82120FD8h */ case   10:  		/* addi R11, R10, 16 */
		/* 82120FD8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x10);
		/* 82120FD8h case   10:*/		return 0x82120FDC;
		  /* 82120FDCh */ case   11:  		/* cmplwi CR6, R9, 0 */
		/* 82120FDCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82120FDCh case   11:*/		return 0x82120FE0;
		  /* 82120FE0h */ case   12:  		/* bc 4, CR6_EQ, -28 */
		/* 82120FE0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82120FC4;  }
		/* 82120FE0h case   12:*/		return 0x82120FE4;
	}
	return 0x82120FE4;
} // Block from 82120FB0h-82120FE4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82120FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120FE4);
		  /* 82120FE4h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82120FE4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82120FE4h case    0:*/		return 0x82120FE8;
		  /* 82120FE8h */ case    1:  		/* stw R10, <#[R3 + 16]> */
		/* 82120FE8h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82120FE8h case    1:*/		return 0x82120FEC;
		  /* 82120FECh */ case    2:  		/* stw R3, <#[R11]> */
		/* 82120FECh case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82120FECh case    2:*/		return 0x82120FF0;
		  /* 82120FF0h */ case    3:  		/* lwz R3, <#[R1 + 172]> */
		/* 82120FF0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000AC) );
		/* 82120FF0h case    3:*/		return 0x82120FF4;
	}
	return 0x82120FF4;
} // Block from 82120FE4h-82120FF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82120FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120FF4);
		  /* 82120FF4h */ case    0:  		/* addi R1, R1, 144 */
		/* 82120FF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82120FF4h case    0:*/		return 0x82120FF8;
		  /* 82120FF8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82120FF8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82120FF8h case    1:*/		return 0x82120FFC;
		  /* 82120FFCh */ case    2:  		/* mtspr LR, R12 */
		/* 82120FFCh case    2:*/		regs.LR = regs.R12;
		/* 82120FFCh case    2:*/		return 0x82121000;
		  /* 82121000h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82121000h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82121000h case    3:*/		return 0x82121004;
		  /* 82121004h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82121004h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82121004h case    4:*/		return 0x82121008;
		  /* 82121008h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82121008h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82121008h case    5:*/		return 0x8212100C;
	}
	return 0x8212100C;
} // Block from 82120FF4h-8212100Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212100Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212100C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212100C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212100C);
		  /* 8212100Ch */ case    0:  		/* nop */
		/* 8212100Ch case    0:*/		cpu::op::nop();
		/* 8212100Ch case    0:*/		return 0x82121010;
	}
	return 0x82121010;
} // Block from 8212100Ch-82121010h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121010);
		  /* 82121010h */ case    0:  		/* mfspr R12, LR */
		/* 82121010h case    0:*/		regs.R12 = regs.LR;
		/* 82121010h case    0:*/		return 0x82121014;
		  /* 82121014h */ case    1:  		/* bl -589256 */
		/* 82121014h case    1:*/		regs.LR = 0x82121018; return 0x8209124C;
		/* 82121014h case    1:*/		return 0x82121018;
		  /* 82121018h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82121018h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82121018h case    2:*/		return 0x8212101C;
		  /* 8212101Ch */ case    3:  		/* li R26, 0 */
		/* 8212101Ch case    3:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8212101Ch case    3:*/		return 0x82121020;
		  /* 82121020h */ case    4:  		/* mr R25, R3 */
		/* 82121020h case    4:*/		regs.R25 = regs.R3;
		/* 82121020h case    4:*/		return 0x82121024;
		  /* 82121024h */ case    5:  		/* mr R27, R5 */
		/* 82121024h case    5:*/		regs.R27 = regs.R5;
		/* 82121024h case    5:*/		return 0x82121028;
		  /* 82121028h */ case    6:  		/* stw R26, <#[R1 + 96]> */
		/* 82121028h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82121028h case    6:*/		return 0x8212102C;
		  /* 8212102Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8212102Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8212102Ch case    7:*/		return 0x82121030;
		  /* 82121030h */ case    8:  		/* mr R29, R26 */
		/* 82121030h case    8:*/		regs.R29 = regs.R26;
		/* 82121030h case    8:*/		return 0x82121034;
		  /* 82121034h */ case    9:  		/* bc 12, CR6_EQ, 220 */
		/* 82121034h case    9:*/		if ( regs.CR[6].eq ) { return 0x82121110;  }
		/* 82121034h case    9:*/		return 0x82121038;
		  /* 82121038h */ case   10:  		/* lwz R11, <#[R4 + 4]> */
		/* 82121038h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82121038h case   10:*/		return 0x8212103C;
		  /* 8212103Ch */ case   11:  		/* cmpwi CR6, R11, 3 */
		/* 8212103Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8212103Ch case   11:*/		return 0x82121040;
		  /* 82121040h */ case   12:  		/* bc 4, CR6_EQ, 208 */
		/* 82121040h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82121110;  }
		/* 82121040h case   12:*/		return 0x82121044;
		  /* 82121044h */ case   13:  		/* addi R28, R4, 16 */
		/* 82121044h case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R4,0x10);
		/* 82121044h case   13:*/		return 0x82121048;
		  /* 82121048h */ case   14:  		/* cmplwi CR6, R5, 0 */
		/* 82121048h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82121048h case   14:*/		return 0x8212104C;
		  /* 8212104Ch */ case   15:  		/* bc 4, CR6_EQ, 208 */
		/* 8212104Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x8212111C;  }
		/* 8212104Ch case   15:*/		return 0x82121050;
		  /* 82121050h */ case   16:  		/* lwz R11, <#[R3 + 92]> */
		/* 82121050h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000005C) );
		/* 82121050h case   16:*/		return 0x82121054;
		  /* 82121054h */ case   17:  		/* addi R10, R1, 96 */
		/* 82121054h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82121054h case   17:*/		return 0x82121058;
		  /* 82121058h */ case   18:  		/* li R7, 0 */
		/* 82121058h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121058h case   18:*/		return 0x8212105C;
		  /* 8212105Ch */ case   19:  		/* lwz R8, <#[R3 + 20]> */
		/* 8212105Ch case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 8212105Ch case   19:*/		return 0x82121060;
		  /* 82121060h */ case   20:  		/* addic R9, R11, -1 */
		/* 82121060h case   20:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82121060h case   20:*/		return 0x82121064;
		  /* 82121064h */ case   21:  		/* stw R26, <#[R1 + 84]> */
		/* 82121064h case   21:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 82121064h case   21:*/		return 0x82121068;
		  /* 82121068h */ case   22:  		/* li R6, 0 */
		/* 82121068h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121068h case   22:*/		return 0x8212106C;
		  /* 8212106Ch */ case   23:  		/* mr R5, R28 */
		/* 8212106Ch case   23:*/		regs.R5 = regs.R28;
		/* 8212106Ch case   23:*/		return 0x82121070;
		  /* 82121070h */ case   24:  		/* li R4, 1 */
		/* 82121070h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82121070h case   24:*/		return 0x82121074;
		  /* 82121074h */ case   25:  		/* subfe R9, R9, R11 */
		/* 82121074h case   25:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82121074h case   25:*/		return 0x82121078;
		  /* 82121078h */ case   26:  		/* bl -4128 */
		/* 82121078h case   26:*/		regs.LR = 0x8212107C; return 0x82120058;
		/* 82121078h case   26:*/		return 0x8212107C;
		  /* 8212107Ch */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 8212107Ch case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212107Ch case   27:*/		return 0x82121080;
		  /* 82121080h */ case   28:  		/* bc 12, CR0_EQ, 164 */
		/* 82121080h case   28:*/		if ( regs.CR[0].eq ) { return 0x82121124;  }
		/* 82121080h case   28:*/		return 0x82121084;
		  /* 82121084h */ case   29:  		/* lwz R11, <#[R25 + 92]> */
		/* 82121084h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000005C) );
		/* 82121084h case   29:*/		return 0x82121088;
		  /* 82121088h */ case   30:  		/* cmpwi CR6, R11, 0 */
		/* 82121088h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82121088h case   30:*/		return 0x8212108C;
		  /* 8212108Ch */ case   31:  		/* bc 4, CR6_EQ, 428 */
		/* 8212108Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x82121238;  }
		/* 8212108Ch case   31:*/		return 0x82121090;
		  /* 82121090h */ case   32:  		/* li R3, 88 */
		/* 82121090h case   32:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82121090h case   32:*/		return 0x82121094;
		  /* 82121094h */ case   33:  		/* bl -360044 */
		/* 82121094h case   33:*/		regs.LR = 0x82121098; return 0x820C9228;
		/* 82121094h case   33:*/		return 0x82121098;
		  /* 82121098h */ case   34:  		/* cmplwi CR0, R3, 0 */
		/* 82121098h case   34:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121098h case   34:*/		return 0x8212109C;
		  /* 8212109Ch */ case   35:  		/* bc 12, CR0_EQ, 16 */
		/* 8212109Ch case   35:*/		if ( regs.CR[0].eq ) { return 0x821210AC;  }
		/* 8212109Ch case   35:*/		return 0x821210A0;
		  /* 821210A0h */ case   36:  		/* bl -351328 */
		/* 821210A0h case   36:*/		regs.LR = 0x821210A4; return 0x820CB440;
		/* 821210A0h case   36:*/		return 0x821210A4;
		  /* 821210A4h */ case   37:  		/* mr R31, R3 */
		/* 821210A4h case   37:*/		regs.R31 = regs.R3;
		/* 821210A4h case   37:*/		return 0x821210A8;
		  /* 821210A8h */ case   38:  		/* b 8 */
		/* 821210A8h case   38:*/		return 0x821210B0;
		/* 821210A8h case   38:*/		return 0x821210AC;
	}
	return 0x821210AC;
} // Block from 82121010h-821210ACh (39 instructions)

//////////////////////////////////////////////////////
// Block at 821210ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821210AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821210AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821210AC);
		  /* 821210ACh */ case    0:  		/* mr R31, R26 */
		/* 821210ACh case    0:*/		regs.R31 = regs.R26;
		/* 821210ACh case    0:*/		return 0x821210B0;
	}
	return 0x821210B0;
} // Block from 821210ACh-821210B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821210B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821210B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821210B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821210B0);
		  /* 821210B0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821210B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821210B0h case    0:*/		return 0x821210B4;
		  /* 821210B4h */ case    1:  		/* bc 12, CR6_EQ, 92 */
		/* 821210B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121110;  }
		/* 821210B4h case    1:*/		return 0x821210B8;
		  /* 821210B8h */ case    2:  		/* li R29, 1 */
		/* 821210B8h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821210B8h case    2:*/		return 0x821210BC;
		  /* 821210BCh */ case    3:  		/* li R11, 514 */
		/* 821210BCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x202);
		/* 821210BCh case    3:*/		return 0x821210C0;
		  /* 821210C0h */ case    4:  		/* stw R29, <#[R31 + 20]> */
		/* 821210C0h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 821210C0h case    4:*/		return 0x821210C4;
		  /* 821210C4h */ case    5:  		/* li R3, 40 */
		/* 821210C4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821210C4h case    5:*/		return 0x821210C8;
		  /* 821210C8h */ case    6:  		/* stw R26, <#[R31 + 40]> */
		/* 821210C8h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000028) );
		/* 821210C8h case    6:*/		return 0x821210CC;
		  /* 821210CCh */ case    7:  		/* stw R11, <#[R31 + 44]> */
		/* 821210CCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821210CCh case    7:*/		return 0x821210D0;
		  /* 821210D0h */ case    8:  		/* bl -360104 */
		/* 821210D0h case    8:*/		regs.LR = 0x821210D4; return 0x820C9228;
		/* 821210D0h case    8:*/		return 0x821210D4;
		  /* 821210D4h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821210D4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821210D4h case    9:*/		return 0x821210D8;
		  /* 821210D8h */ case   10:  		/* bc 12, CR0_EQ, 40 */
		/* 821210D8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82121100;  }
		/* 821210D8h case   10:*/		return 0x821210DC;
		  /* 821210DCh */ case   11:  		/* lis R9, 32 */
		/* 821210DCh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x20);
		/* 821210DCh case   11:*/		return 0x821210E0;
		  /* 821210E0h */ case   12:  		/* li R8, 1 */
		/* 821210E0h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821210E0h case   12:*/		return 0x821210E4;
		  /* 821210E4h */ case   13:  		/* ori R9, R9, 512 */
		/* 821210E4h case   13:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x200);
		/* 821210E4h case   13:*/		return 0x821210E8;
		  /* 821210E8h */ case   14:  		/* li R7, 1 */
		/* 821210E8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821210E8h case   14:*/		return 0x821210EC;
		  /* 821210ECh */ case   15:  		/* li R6, 0 */
		/* 821210ECh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821210ECh case   15:*/		return 0x821210F0;
		  /* 821210F0h */ case   16:  		/* li R5, 5 */
		/* 821210F0h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 821210F0h case   16:*/		return 0x821210F4;
		  /* 821210F4h */ case   17:  		/* li R4, 0 */
		/* 821210F4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821210F4h case   17:*/		return 0x821210F8;
		  /* 821210F8h */ case   18:  		/* bl -353400 */
		/* 821210F8h case   18:*/		regs.LR = 0x821210FC; return 0x820CAC80;
		/* 821210F8h case   18:*/		return 0x821210FC;
		  /* 821210FCh */ case   19:  		/* b 8 */
		/* 821210FCh case   19:*/		return 0x82121104;
		/* 821210FCh case   19:*/		return 0x82121100;
	}
	return 0x82121100;
} // Block from 821210B0h-82121100h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82121100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121100);
		  /* 82121100h */ case    0:  		/* mr R3, R26 */
		/* 82121100h case    0:*/		regs.R3 = regs.R26;
		/* 82121100h case    0:*/		return 0x82121104;
	}
	return 0x82121104;
} // Block from 82121100h-82121104h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121104);
		  /* 82121104h */ case    0:  		/* stw R3, <#[R31 + 48]> */
		/* 82121104h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82121104h case    0:*/		return 0x82121108;
		  /* 82121108h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82121108h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121108h case    1:*/		return 0x8212110C;
		  /* 8212110Ch */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8212110Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82121128;  }
		/* 8212110Ch case    2:*/		return 0x82121110;
	}
	return 0x82121110;
} // Block from 82121104h-82121110h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121110);
		  /* 82121110h */ case    0:  		/* li R3, 0 */
		/* 82121110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121110h case    0:*/		return 0x82121114;
		  /* 82121114h */ case    1:  		/* addi R1, R1, 176 */
		/* 82121114h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82121114h case    1:*/		return 0x82121118;
		  /* 82121118h */ case    2:  		/* b -589436 */
		/* 82121118h case    2:*/		return 0x8209129C;
		/* 82121118h case    2:*/		return 0x8212111C;
	}
	return 0x8212111C;
} // Block from 82121110h-8212111Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212111Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212111C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212111C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212111C);
		  /* 8212111Ch */ case    0:  		/* mr R31, R27 */
		/* 8212111Ch case    0:*/		regs.R31 = regs.R27;
		/* 8212111Ch case    0:*/		return 0x82121120;
		  /* 82121120h */ case    1:  		/* b 8 */
		/* 82121120h case    1:*/		return 0x82121128;
		/* 82121120h case    1:*/		return 0x82121124;
	}
	return 0x82121124;
} // Block from 8212111Ch-82121124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121124);
		  /* 82121124h */ case    0:  		/* lwz R31, <#[R1 + 96]> */
		/* 82121124h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 82121124h case    0:*/		return 0x82121128;
	}
	return 0x82121128;
} // Block from 82121124h-82121128h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121128);
		  /* 82121128h */ case    0:  		/* li R3, 88 */
		/* 82121128h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82121128h case    0:*/		return 0x8212112C;
		  /* 8212112Ch */ case    1:  		/* bl -360196 */
		/* 8212112Ch case    1:*/		regs.LR = 0x82121130; return 0x820C9228;
		/* 8212112Ch case    1:*/		return 0x82121130;
		  /* 82121130h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82121130h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121130h case    2:*/		return 0x82121134;
		  /* 82121134h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 82121134h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212115C;  }
		/* 82121134h case    3:*/		return 0x82121138;
		  /* 82121138h */ case    4:  		/* mr R9, R28 */
		/* 82121138h case    4:*/		regs.R9 = regs.R28;
		/* 82121138h case    4:*/		return 0x8212113C;
		  /* 8212113Ch */ case    5:  		/* li R8, 1 */
		/* 8212113Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8212113Ch case    5:*/		return 0x82121140;
		  /* 82121140h */ case    6:  		/* li R7, 0 */
		/* 82121140h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121140h case    6:*/		return 0x82121144;
		  /* 82121144h */ case    7:  		/* li R6, 0 */
		/* 82121144h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121144h case    7:*/		return 0x82121148;
		  /* 82121148h */ case    8:  		/* li R5, 0 */
		/* 82121148h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82121148h case    8:*/		return 0x8212114C;
		  /* 8212114Ch */ case    9:  		/* li R4, 0 */
		/* 8212114Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212114Ch case    9:*/		return 0x82121150;
		  /* 82121150h */ case   10:  		/* bl -348616 */
		/* 82121150h case   10:*/		regs.LR = 0x82121154; return 0x820CBF88;
		/* 82121150h case   10:*/		return 0x82121154;
		  /* 82121154h */ case   11:  		/* mr R30, R3 */
		/* 82121154h case   11:*/		regs.R30 = regs.R3;
		/* 82121154h case   11:*/		return 0x82121158;
		  /* 82121158h */ case   12:  		/* b 8 */
		/* 82121158h case   12:*/		return 0x82121160;
		/* 82121158h case   12:*/		return 0x8212115C;
	}
	return 0x8212115C;
} // Block from 82121128h-8212115Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212115Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212115C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212115C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212115C);
		  /* 8212115Ch */ case    0:  		/* mr R30, R26 */
		/* 8212115Ch case    0:*/		regs.R30 = regs.R26;
		/* 8212115Ch case    0:*/		return 0x82121160;
	}
	return 0x82121160;
} // Block from 8212115Ch-82121160h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121160);
		  /* 82121160h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82121160h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82121160h case    0:*/		return 0x82121164;
		  /* 82121164h */ case    1:  		/* bc 12, CR6_EQ, 212 */
		/* 82121164h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121238;  }
		/* 82121164h case    1:*/		return 0x82121168;
		  /* 82121168h */ case    2:  		/* lwz R11, <#[R31 + 52]> */
		/* 82121168h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 82121168h case    2:*/		return 0x8212116C;
		  /* 8212116Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8212116Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212116Ch case    3:*/		return 0x82121170;
		  /* 82121170h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82121170h case    4:*/		if ( regs.CR[6].eq ) { return 0x82121198;  }
		/* 82121170h case    4:*/		return 0x82121174;
		  /* 82121174h */ case    5:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 82121174h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 82121174h case    5:*/		return 0x82121178;
		  /* 82121178h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82121178h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82121178h case    6:*/		return 0x8212117C;
		  /* 8212117Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212117Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212117Ch case    7:*/		return 0x82121180;
		  /* 82121180h */ case    8:  		/* mtspr CTR, R11 */
		/* 82121180h case    8:*/		regs.CTR = regs.R11;
		/* 82121180h case    8:*/		return 0x82121184;
		  /* 82121184h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82121184h case    9:*/		if ( 1 ) { regs.LR = 0x82121188; return (uint32)regs.CTR; }
		/* 82121184h case    9:*/		return 0x82121188;
		  /* 82121188h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82121188h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121188h case   10:*/		return 0x8212118C;
		  /* 8212118Ch */ case   11:  		/* stw R3, <#[R30 + 32]> */
		/* 8212118Ch case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8212118Ch case   11:*/		return 0x82121190;
		  /* 82121190h */ case   12:  		/* bc 12, CR0_EQ, 168 */
		/* 82121190h case   12:*/		if ( regs.CR[0].eq ) { return 0x82121238;  }
		/* 82121190h case   12:*/		return 0x82121194;
		  /* 82121194h */ case   13:  		/* b 76 */
		/* 82121194h case   13:*/		return 0x821211E0;
		/* 82121194h case   13:*/		return 0x82121198;
	}
	return 0x82121198;
} // Block from 82121160h-82121198h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82121198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121198);
		  /* 82121198h */ case    0:  		/* li R3, 72 */
		/* 82121198h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82121198h case    0:*/		return 0x8212119C;
		  /* 8212119Ch */ case    1:  		/* bl -360308 */
		/* 8212119Ch case    1:*/		regs.LR = 0x821211A0; return 0x820C9228;
		/* 8212119Ch case    1:*/		return 0x821211A0;
		  /* 821211A0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821211A0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821211A0h case    2:*/		return 0x821211A4;
		  /* 821211A4h */ case    3:  		/* bc 12, CR0_EQ, 44 */
		/* 821211A4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821211D0;  }
		/* 821211A4h case    3:*/		return 0x821211A8;
		  /* 821211A8h */ case    4:  		/* rlwinm R11, R29, 0, 24, 31 */
		/* 821211A8h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821211A8h case    4:*/		return 0x821211AC;
		  /* 821211ACh */ case    5:  		/* lwz R6, <#[R31 + 20]> */
		/* 821211ACh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 821211ACh case    5:*/		return 0x821211B0;
		  /* 821211B0h */ case    6:  		/* mr R7, R28 */
		/* 821211B0h case    6:*/		regs.R7 = regs.R28;
		/* 821211B0h case    6:*/		return 0x821211B4;
		  /* 821211B4h */ case    7:  		/* lwz R5, <#[R31 + 16]> */
		/* 821211B4h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 821211B4h case    7:*/		return 0x821211B8;
		  /* 821211B8h */ case    8:  		/* cntlzw R11, R11 */
		/* 821211B8h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821211B8h case    8:*/		return 0x821211BC;
		  /* 821211BCh */ case    9:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821211BCh case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821211BCh case    9:*/		return 0x821211C0;
		  /* 821211C0h */ case   10:  		/* xori R11, R11, 1 */
		/* 821211C0h case   10:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821211C0h case   10:*/		return 0x821211C4;
		  /* 821211C4h */ case   11:  		/* addi R4, R11, 6 */
		/* 821211C4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6);
		/* 821211C4h case   11:*/		return 0x821211C8;
		  /* 821211C8h */ case   12:  		/* bl -347488 */
		/* 821211C8h case   12:*/		regs.LR = 0x821211CC; return 0x820CC468;
		/* 821211C8h case   12:*/		return 0x821211CC;
		  /* 821211CCh */ case   13:  		/* b 8 */
		/* 821211CCh case   13:*/		return 0x821211D4;
		/* 821211CCh case   13:*/		return 0x821211D0;
	}
	return 0x821211D0;
} // Block from 82121198h-821211D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821211D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821211D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821211D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821211D0);
		  /* 821211D0h */ case    0:  		/* mr R3, R26 */
		/* 821211D0h case    0:*/		regs.R3 = regs.R26;
		/* 821211D0h case    0:*/		return 0x821211D4;
	}
	return 0x821211D4;
} // Block from 821211D0h-821211D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821211D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821211D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821211D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821211D4);
		  /* 821211D4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821211D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821211D4h case    0:*/		return 0x821211D8;
		  /* 821211D8h */ case    1:  		/* stw R3, <#[R30 + 32]> */
		/* 821211D8h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 821211D8h case    1:*/		return 0x821211DC;
		  /* 821211DCh */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 821211DCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82121238;  }
		/* 821211DCh case    2:*/		return 0x821211E0;
	}
	return 0x821211E0;
} // Block from 821211D4h-821211E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821211E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821211E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821211E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821211E0);
		  /* 821211E0h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 821211E0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821211E0h case    0:*/		return 0x821211E4;
		  /* 821211E4h */ case    1:  		/* bl -360060 */
		/* 821211E4h case    1:*/		regs.LR = 0x821211E8; return 0x820C9368;
		/* 821211E4h case    1:*/		return 0x821211E8;
		  /* 821211E8h */ case    2:  		/* mr R4, R3 */
		/* 821211E8h case    2:*/		regs.R4 = regs.R3;
		/* 821211E8h case    2:*/		return 0x821211EC;
		  /* 821211ECh */ case    3:  		/* stw R3, <#[R30 + 16]> */
		/* 821211ECh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821211ECh case    3:*/		return 0x821211F0;
		  /* 821211F0h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821211F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821211F0h case    4:*/		return 0x821211F4;
		  /* 821211F4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821211F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82121204;  }
		/* 821211F4h case    5:*/		return 0x821211F8;
		  /* 821211F8h */ case    6:  		/* li R5, 0 */
		/* 821211F8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821211F8h case    6:*/		return 0x821211FC;
		  /* 821211FCh */ case    7:  		/* mr R3, R25 */
		/* 821211FCh case    7:*/		regs.R3 = regs.R25;
		/* 821211FCh case    7:*/		return 0x82121200;
		  /* 82121200h */ case    8:  		/* bl -28856 */
		/* 82121200h case    8:*/		regs.LR = 0x82121204; return 0x8211A148;
		/* 82121200h case    8:*/		return 0x82121204;
	}
	return 0x82121204;
} // Block from 821211E0h-82121204h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82121204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121204);
		  /* 82121204h */ case    0:  		/* li R3, 20 */
		/* 82121204h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82121204h case    0:*/		return 0x82121208;
		  /* 82121208h */ case    1:  		/* bl -360416 */
		/* 82121208h case    1:*/		regs.LR = 0x8212120C; return 0x820C9228;
		/* 82121208h case    1:*/		return 0x8212120C;
		  /* 8212120Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8212120Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212120Ch case    2:*/		return 0x82121210;
		  /* 82121210h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82121210h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212122C;  }
		/* 82121210h case    3:*/		return 0x82121214;
		  /* 82121214h */ case    4:  		/* lis R11, -32253 */
		/* 82121214h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121214h case    4:*/		return 0x82121218;
		  /* 82121218h */ case    5:  		/* lwz R4, <#[R30 + 32]> */
		/* 82121218h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 82121218h case    5:*/		return 0x8212121C;
		  /* 8212121Ch */ case    6:  		/* li R5, 0 */
		/* 8212121Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212121Ch case    6:*/		return 0x82121220;
		  /* 82121220h */ case    7:  		/* addi R6, R11, 9184 */
		/* 82121220h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82121220h case    7:*/		return 0x82121224;
		  /* 82121224h */ case    8:  		/* bl -359988 */
		/* 82121224h case    8:*/		regs.LR = 0x82121228; return 0x820C93F0;
		/* 82121224h case    8:*/		return 0x82121228;
		  /* 82121228h */ case    9:  		/* b 8 */
		/* 82121228h case    9:*/		return 0x82121230;
		/* 82121228h case    9:*/		return 0x8212122C;
	}
	return 0x8212122C;
} // Block from 82121204h-8212122Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212122Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212122C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212122C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212122C);
		  /* 8212122Ch */ case    0:  		/* mr R3, R26 */
		/* 8212122Ch case    0:*/		regs.R3 = regs.R26;
		/* 8212122Ch case    0:*/		return 0x82121230;
	}
	return 0x82121230;
} // Block from 8212122Ch-82121230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121230);
		  /* 82121230h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82121230h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121230h case    0:*/		return 0x82121234;
		  /* 82121234h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82121234h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82121240;  }
		/* 82121234h case    1:*/		return 0x82121238;
	}
	return 0x82121238;
} // Block from 82121230h-82121238h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121238);
		  /* 82121238h */ case    0:  		/* mr R30, R26 */
		/* 82121238h case    0:*/		regs.R30 = regs.R26;
		/* 82121238h case    0:*/		return 0x8212123C;
		  /* 8212123Ch */ case    1:  		/* b 20 */
		/* 8212123Ch case    1:*/		return 0x82121250;
		/* 8212123Ch case    1:*/		return 0x82121240;
	}
	return 0x82121240;
} // Block from 82121238h-82121240h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121240);
		  /* 82121240h */ case    0:  		/* stw R3, <#[R30 + 32]> */
		/* 82121240h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82121240h case    0:*/		return 0x82121244;
		  /* 82121244h */ case    1:  		/* mr R4, R30 */
		/* 82121244h case    1:*/		regs.R4 = regs.R30;
		/* 82121244h case    1:*/		return 0x82121248;
		  /* 82121248h */ case    2:  		/* mr R3, R25 */
		/* 82121248h case    2:*/		regs.R3 = regs.R25;
		/* 82121248h case    2:*/		return 0x8212124C;
		  /* 8212124Ch */ case    3:  		/* bl -21044 */
		/* 8212124Ch case    3:*/		regs.LR = 0x82121250; return 0x8211C018;
		/* 8212124Ch case    3:*/		return 0x82121250;
	}
	return 0x82121250;
} // Block from 82121240h-82121250h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121250);
		  /* 82121250h */ case    0:  		/* mr R3, R30 */
		/* 82121250h case    0:*/		regs.R3 = regs.R30;
		/* 82121250h case    0:*/		return 0x82121254;
		  /* 82121254h */ case    1:  		/* b -320 */
		/* 82121254h case    1:*/		return 0x82121114;
		/* 82121254h case    1:*/		return 0x82121258;
	}
	return 0x82121258;
} // Block from 82121250h-82121258h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121258);
		  /* 82121258h */ case    0:  		/* mfspr R12, LR */
		/* 82121258h case    0:*/		regs.R12 = regs.LR;
		/* 82121258h case    0:*/		return 0x8212125C;
		  /* 8212125Ch */ case    1:  		/* bl -589848 */
		/* 8212125Ch case    1:*/		regs.LR = 0x82121260; return 0x82091244;
		/* 8212125Ch case    1:*/		return 0x82121260;
		  /* 82121260h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82121260h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82121260h case    2:*/		return 0x82121264;
		  /* 82121264h */ case    3:  		/* li R23, 0 */
		/* 82121264h case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82121264h case    3:*/		return 0x82121268;
		  /* 82121268h */ case    4:  		/* mr R29, R3 */
		/* 82121268h case    4:*/		regs.R29 = regs.R3;
		/* 82121268h case    4:*/		return 0x8212126C;
		  /* 8212126Ch */ case    5:  		/* mr R30, R4 */
		/* 8212126Ch case    5:*/		regs.R30 = regs.R4;
		/* 8212126Ch case    5:*/		return 0x82121270;
		  /* 82121270h */ case    6:  		/* stw R23, <#[R1 + 128]> */
		/* 82121270h case    6:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000080) );
		/* 82121270h case    6:*/		return 0x82121274;
		  /* 82121274h */ case    7:  		/* mr R27, R5 */
		/* 82121274h case    7:*/		regs.R27 = regs.R5;
		/* 82121274h case    7:*/		return 0x82121278;
		  /* 82121278h */ case    8:  		/* mr R24, R6 */
		/* 82121278h case    8:*/		regs.R24 = regs.R6;
		/* 82121278h case    8:*/		return 0x8212127C;
		  /* 8212127Ch */ case    9:  		/* mr R28, R7 */
		/* 8212127Ch case    9:*/		regs.R28 = regs.R7;
		/* 8212127Ch case    9:*/		return 0x82121280;
		  /* 82121280h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 82121280h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82121280h case   10:*/		return 0x82121284;
		  /* 82121284h */ case   11:  		/* bc 12, CR6_EQ, 56 */
		/* 82121284h case   11:*/		if ( regs.CR[6].eq ) { return 0x821212BC;  }
		/* 82121284h case   11:*/		return 0x82121288;
		  /* 82121288h */ case   12:  		/* lwz R11, <#[R4 + 4]> */
		/* 82121288h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82121288h case   12:*/		return 0x8212128C;
		  /* 8212128Ch */ case   13:  		/* cmpwi CR6, R11, 3 */
		/* 8212128Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8212128Ch case   13:*/		return 0x82121290;
		  /* 82121290h */ case   14:  		/* bc 4, CR6_EQ, 44 */
		/* 82121290h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821212BC;  }
		/* 82121290h case   14:*/		return 0x82121294;
		  /* 82121294h */ case   15:  		/* addi R5, R4, 16 */
		/* 82121294h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x10);
		/* 82121294h case   15:*/		return 0x82121298;
		  /* 82121298h */ case   16:  		/* lwz R8, <#[R3 + 20]> */
		/* 82121298h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 82121298h case   16:*/		return 0x8212129C;
		  /* 8212129Ch */ case   17:  		/* addi R10, R1, 128 */
		/* 8212129Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8212129Ch case   17:*/		return 0x821212A0;
		  /* 821212A0h */ case   18:  		/* stw R23, <#[R1 + 84]> */
		/* 821212A0h case   18:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000054) );
		/* 821212A0h case   18:*/		return 0x821212A4;
		  /* 821212A4h */ case   19:  		/* li R9, 1 */
		/* 821212A4h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821212A4h case   19:*/		return 0x821212A8;
		  /* 821212A8h */ case   20:  		/* li R7, 0 */
		/* 821212A8h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821212A8h case   20:*/		return 0x821212AC;
		  /* 821212ACh */ case   21:  		/* li R6, 0 */
		/* 821212ACh case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821212ACh case   21:*/		return 0x821212B0;
		  /* 821212B0h */ case   22:  		/* li R4, 0 */
		/* 821212B0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821212B0h case   22:*/		return 0x821212B4;
		  /* 821212B4h */ case   23:  		/* bl -4700 */
		/* 821212B4h case   23:*/		regs.LR = 0x821212B8; return 0x82120058;
		/* 821212B4h case   23:*/		return 0x821212B8;
		  /* 821212B8h */ case   24:  		/* lwz R30, <#[R1 + 128]> */
		/* 821212B8h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000080) );
		/* 821212B8h case   24:*/		return 0x821212BC;
	}
	return 0x821212BC;
} // Block from 82121258h-821212BCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821212BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821212BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821212BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821212BC);
		  /* 821212BCh */ case    0:  		/* addi R25, R29, 40 */
		/* 821212BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R29,0x28);
		/* 821212BCh case    0:*/		return 0x821212C0;
		  /* 821212C0h */ case    1:  		/* cmpwi CR6, R24, 0 */
		/* 821212C0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821212C0h case    1:*/		return 0x821212C4;
		  /* 821212C4h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 821212C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82121328;  }
		/* 821212C4h case    2:*/		return 0x821212C8;
		  /* 821212C8h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821212C8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821212C8h case    3:*/		return 0x821212CC;
		  /* 821212CCh */ case    4:  		/* bc 12, CR6_EQ, 76 */
		/* 821212CCh case    4:*/		if ( regs.CR[6].eq ) { return 0x82121318;  }
		/* 821212CCh case    4:*/		return 0x821212D0;
		  /* 821212D0h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 821212D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821212D0h case    5:*/		return 0x821212D4;
		  /* 821212D4h */ case    6:  		/* cmpwi CR6, R11, 9 */
		/* 821212D4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821212D4h case    6:*/		return 0x821212D8;
		  /* 821212D8h */ case    7:  		/* bc 4, CR6_EQ, 64 */
		/* 821212D8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82121318;  }
		/* 821212D8h case    7:*/		return 0x821212DC;
		  /* 821212DCh */ case    8:  		/* mr R4, R30 */
		/* 821212DCh case    8:*/		regs.R4 = regs.R30;
		/* 821212DCh case    8:*/		return 0x821212E0;
		  /* 821212E0h */ case    9:  		/* mr R3, R29 */
		/* 821212E0h case    9:*/		regs.R3 = regs.R29;
		/* 821212E0h case    9:*/		return 0x821212E4;
		  /* 821212E4h */ case   10:  		/* bl -28644 */
		/* 821212E4h case   10:*/		regs.LR = 0x821212E8; return 0x8211A300;
		/* 821212E4h case   10:*/		return 0x821212E8;
		  /* 821212E8h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 821212E8h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821212E8h case   11:*/		return 0x821212EC;
		  /* 821212ECh */ case   12:  		/* bc 12, CR0_EQ, 44 */
		/* 821212ECh case   12:*/		if ( regs.CR[0].eq ) { return 0x82121318;  }
		/* 821212ECh case   12:*/		return 0x821212F0;
		  /* 821212F0h */ case   13:  		/* cmplwi CR6, R27, 0 */
		/* 821212F0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821212F0h case   13:*/		return 0x821212F4;
		  /* 821212F4h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821212F4h case   14:*/		if ( regs.CR[6].eq ) { return 0x82121304;  }
		/* 821212F4h case   14:*/		return 0x821212F8;
		  /* 821212F8h */ case   15:  		/* lwz R11, <#[R27 + 4]> */
		/* 821212F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821212F8h case   15:*/		return 0x821212FC;
		  /* 821212FCh */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 821212FCh case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821212FCh case   16:*/		return 0x82121300;
		  /* 82121300h */ case   17:  		/* bc 4, CR6_EQ, 592 */
		/* 82121300h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82121550;  }
		/* 82121300h case   17:*/		return 0x82121304;
	}
	return 0x82121304;
} // Block from 821212BCh-82121304h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82121304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121304);
		  /* 82121304h */ case    0:  		/* mr R4, R30 */
		/* 82121304h case    0:*/		regs.R4 = regs.R30;
		/* 82121304h case    0:*/		return 0x82121308;
		  /* 82121308h */ case    1:  		/* mr R3, R29 */
		/* 82121308h case    1:*/		regs.R3 = regs.R29;
		/* 82121308h case    1:*/		return 0x8212130C;
		  /* 8212130Ch */ case    2:  		/* bl -28892 */
		/* 8212130Ch case    2:*/		regs.LR = 0x82121310; return 0x8211A230;
		/* 8212130Ch case    2:*/		return 0x82121310;
		  /* 82121310h */ case    3:  		/* mr R9, R3 */
		/* 82121310h case    3:*/		regs.R9 = regs.R3;
		/* 82121310h case    3:*/		return 0x82121314;
		  /* 82121314h */ case    4:  		/* b 156 */
		/* 82121314h case    4:*/		return 0x821213B0;
		/* 82121314h case    4:*/		return 0x82121318;
	}
	return 0x82121318;
} // Block from 82121304h-82121318h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82121318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121318);
		  /* 82121318h */ case    0:  		/* lis R11, -32253 */
		/* 82121318h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121318h case    0:*/		return 0x8212131C;
		  /* 8212131Ch */ case    1:  		/* li R5, 3037 */
		/* 8212131Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBDD);
		/* 8212131Ch case    1:*/		return 0x82121320;
		  /* 82121320h */ case    2:  		/* addi R6, R11, 10324 */
		/* 82121320h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2854);
		/* 82121320h case    2:*/		return 0x82121324;
		  /* 82121324h */ case    3:  		/* b 544 */
		/* 82121324h case    3:*/		return 0x82121544;
		/* 82121324h case    3:*/		return 0x82121328;
	}
	return 0x82121328;
} // Block from 82121318h-82121328h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121328);
		  /* 82121328h */ case    0:  		/* mr R31, R23 */
		/* 82121328h case    0:*/		regs.R31 = regs.R23;
		/* 82121328h case    0:*/		return 0x8212132C;
		  /* 8212132Ch */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 8212132Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8212132Ch case    1:*/		return 0x82121330;
		  /* 82121330h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82121330h case    2:*/		if ( regs.CR[6].eq ) { return 0x82121348;  }
		/* 82121330h case    2:*/		return 0x82121334;
		  /* 82121334h */ case    3:  		/* lwz R11, <#[R27 + 4]> */
		/* 82121334h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82121334h case    3:*/		return 0x82121338;
		  /* 82121338h */ case    4:  		/* cmpwi CR6, R11, 14 */
		/* 82121338h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121338h case    4:*/		return 0x8212133C;
		  /* 8212133Ch */ case    5:  		/* bc 4, CR6_EQ, 532 */
		/* 8212133Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82121550;  }
		/* 8212133Ch case    5:*/		return 0x82121340;
		  /* 82121340h */ case    6:  		/* lwz R31, <#[R27 + 16]> */
		/* 82121340h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000010) );
		/* 82121340h case    6:*/		return 0x82121344;
		  /* 82121344h */ case    7:  		/* addi R25, R27, 48 */
		/* 82121344h case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0x30);
		/* 82121344h case    7:*/		return 0x82121348;
	}
	return 0x82121348;
} // Block from 82121328h-82121348h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82121348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121348);
		  /* 82121348h */ case    0:  		/* mr R6, R28 */
		/* 82121348h case    0:*/		regs.R6 = regs.R28;
		/* 82121348h case    0:*/		return 0x8212134C;
		  /* 8212134Ch */ case    1:  		/* mr R5, R31 */
		/* 8212134Ch case    1:*/		regs.R5 = regs.R31;
		/* 8212134Ch case    1:*/		return 0x82121350;
		  /* 82121350h */ case    2:  		/* mr R4, R30 */
		/* 82121350h case    2:*/		regs.R4 = regs.R30;
		/* 82121350h case    2:*/		return 0x82121354;
		  /* 82121354h */ case    3:  		/* mr R3, R29 */
		/* 82121354h case    3:*/		regs.R3 = regs.R29;
		/* 82121354h case    3:*/		return 0x82121358;
		  /* 82121358h */ case    4:  		/* bl -16400 */
		/* 82121358h case    4:*/		regs.LR = 0x8212135C; return 0x8211D348;
		/* 82121358h case    4:*/		return 0x8212135C;
		  /* 8212135Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8212135Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212135Ch case    5:*/		return 0x82121360;
		  /* 82121360h */ case    6:  		/* mr R3, R29 */
		/* 82121360h case    6:*/		regs.R3 = regs.R29;
		/* 82121360h case    6:*/		return 0x82121364;
		  /* 82121364h */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 82121364h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82121384;  }
		/* 82121364h case    7:*/		return 0x82121368;
		  /* 82121368h */ case    8:  		/* mr R8, R28 */
		/* 82121368h case    8:*/		regs.R8 = regs.R28;
		/* 82121368h case    8:*/		return 0x8212136C;
		  /* 8212136Ch */ case    9:  		/* mr R7, R31 */
		/* 8212136Ch case    9:*/		regs.R7 = regs.R31;
		/* 8212136Ch case    9:*/		return 0x82121370;
		  /* 82121370h */ case   10:  		/* mr R6, R30 */
		/* 82121370h case   10:*/		regs.R6 = regs.R30;
		/* 82121370h case   10:*/		return 0x82121374;
		  /* 82121374h */ case   11:  		/* li R5, 0 */
		/* 82121374h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82121374h case   11:*/		return 0x82121378;
		  /* 82121378h */ case   12:  		/* mr R4, R25 */
		/* 82121378h case   12:*/		regs.R4 = regs.R25;
		/* 82121378h case   12:*/		return 0x8212137C;
		  /* 8212137Ch */ case   13:  		/* bl -15332 */
		/* 8212137Ch case   13:*/		regs.LR = 0x82121380; return 0x8211D798;
		/* 8212137Ch case   13:*/		return 0x82121380;
		  /* 82121380h */ case   14:  		/* b 464 */
		/* 82121380h case   14:*/		return 0x82121550;
		/* 82121380h case   14:*/		return 0x82121384;
	}
	return 0x82121384;
} // Block from 82121348h-82121384h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82121384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121384);
		  /* 82121384h */ case    0:  		/* mr R4, R30 */
		/* 82121384h case    0:*/		regs.R4 = regs.R30;
		/* 82121384h case    0:*/		return 0x82121388;
		  /* 82121388h */ case    1:  		/* bl -29016 */
		/* 82121388h case    1:*/		regs.LR = 0x8212138C; return 0x8211A230;
		/* 82121388h case    1:*/		return 0x8212138C;
		  /* 8212138Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8212138Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212138Ch case    2:*/		return 0x82121390;
		  /* 82121390h */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 82121390h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821213AC;  }
		/* 82121390h case    3:*/		return 0x82121394;
		  /* 82121394h */ case    4:  		/* mr R4, R31 */
		/* 82121394h case    4:*/		regs.R4 = regs.R31;
		/* 82121394h case    4:*/		return 0x82121398;
		  /* 82121398h */ case    5:  		/* mr R3, R29 */
		/* 82121398h case    5:*/		regs.R3 = regs.R29;
		/* 82121398h case    5:*/		return 0x8212139C;
		  /* 8212139Ch */ case    6:  		/* bl -29036 */
		/* 8212139Ch case    6:*/		regs.LR = 0x821213A0; return 0x8211A230;
		/* 8212139Ch case    6:*/		return 0x821213A0;
		  /* 821213A0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821213A0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821213A0h case    7:*/		return 0x821213A4;
		  /* 821213A4h */ case    8:  		/* mr R9, R23 */
		/* 821213A4h case    8:*/		regs.R9 = regs.R23;
		/* 821213A4h case    8:*/		return 0x821213A8;
		  /* 821213A8h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821213A8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821213B0;  }
		/* 821213A8h case    9:*/		return 0x821213AC;
	}
	return 0x821213AC;
} // Block from 82121384h-821213ACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821213ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821213AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821213AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821213AC);
		  /* 821213ACh */ case    0:  		/* li R9, 1 */
		/* 821213ACh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821213ACh case    0:*/		return 0x821213B0;
	}
	return 0x821213B0;
} // Block from 821213ACh-821213B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821213B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821213B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821213B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821213B0);
		  /* 821213B0h */ case    0:  		/* mr R4, R27 */
		/* 821213B0h case    0:*/		regs.R4 = regs.R27;
		/* 821213B0h case    0:*/		return 0x821213B4;
		  /* 821213B4h */ case    1:  		/* mr R3, R29 */
		/* 821213B4h case    1:*/		regs.R3 = regs.R29;
		/* 821213B4h case    1:*/		return 0x821213B8;
		  /* 821213B8h */ case    2:  		/* bl -35592 */
		/* 821213B8h case    2:*/		regs.LR = 0x821213BC; return 0x821188B0;
		/* 821213B8h case    2:*/		return 0x821213BC;
		  /* 821213BCh */ case    3:  		/* or R26, R3, R9 */
		/* 821213BCh case    3:*/		cpu::op::or<0>(regs,&regs.R26,regs.R3,regs.R9);
		/* 821213BCh case    3:*/		return 0x821213C0;
		  /* 821213C0h */ case    4:  		/* li R3, 88 */
		/* 821213C0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821213C0h case    4:*/		return 0x821213C4;
		  /* 821213C4h */ case    5:  		/* bl -360860 */
		/* 821213C4h case    5:*/		regs.LR = 0x821213C8; return 0x820C9228;
		/* 821213C4h case    5:*/		return 0x821213C8;
		  /* 821213C8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821213C8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821213C8h case    6:*/		return 0x821213CC;
		  /* 821213CCh */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821213CCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821213F4;  }
		/* 821213CCh case    7:*/		return 0x821213D0;
		  /* 821213D0h */ case    8:  		/* mr R9, R25 */
		/* 821213D0h case    8:*/		regs.R9 = regs.R25;
		/* 821213D0h case    8:*/		return 0x821213D4;
		  /* 821213D4h */ case    9:  		/* li R8, 1 */
		/* 821213D4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821213D4h case    9:*/		return 0x821213D8;
		  /* 821213D8h */ case   10:  		/* li R7, 0 */
		/* 821213D8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821213D8h case   10:*/		return 0x821213DC;
		  /* 821213DCh */ case   11:  		/* li R6, 0 */
		/* 821213DCh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821213DCh case   11:*/		return 0x821213E0;
		  /* 821213E0h */ case   12:  		/* li R5, 0 */
		/* 821213E0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821213E0h case   12:*/		return 0x821213E4;
		  /* 821213E4h */ case   13:  		/* li R4, 0 */
		/* 821213E4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821213E4h case   13:*/		return 0x821213E8;
		  /* 821213E8h */ case   14:  		/* bl -349280 */
		/* 821213E8h case   14:*/		regs.LR = 0x821213EC; return 0x820CBF88;
		/* 821213E8h case   14:*/		return 0x821213EC;
		  /* 821213ECh */ case   15:  		/* mr R28, R3 */
		/* 821213ECh case   15:*/		regs.R28 = regs.R3;
		/* 821213ECh case   15:*/		return 0x821213F0;
		  /* 821213F0h */ case   16:  		/* b 8 */
		/* 821213F0h case   16:*/		return 0x821213F8;
		/* 821213F0h case   16:*/		return 0x821213F4;
	}
	return 0x821213F4;
} // Block from 821213B0h-821213F4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821213F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821213F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821213F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821213F4);
		  /* 821213F4h */ case    0:  		/* mr R28, R23 */
		/* 821213F4h case    0:*/		regs.R28 = regs.R23;
		/* 821213F4h case    0:*/		return 0x821213F8;
	}
	return 0x821213F8;
} // Block from 821213F4h-821213F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821213F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821213F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821213F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821213F8);
		  /* 821213F8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821213F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821213F8h case    0:*/		return 0x821213FC;
		  /* 821213FCh */ case    1:  		/* bc 12, CR6_EQ, 340 */
		/* 821213FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82121550;  }
		/* 821213FCh case    1:*/		return 0x82121400;
		  /* 82121400h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82121400h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82121400h case    2:*/		return 0x82121404;
		  /* 82121404h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 82121404h case    3:*/		if ( regs.CR[6].eq ) { return 0x82121428;  }
		/* 82121404h case    3:*/		return 0x82121408;
		  /* 82121408h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 82121408h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82121408h case    4:*/		return 0x8212140C;
		  /* 8212140Ch */ case    5:  		/* mr R3, R30 */
		/* 8212140Ch case    5:*/		regs.R3 = regs.R30;
		/* 8212140Ch case    5:*/		return 0x82121410;
		  /* 82121410h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121410h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121410h case    6:*/		return 0x82121414;
		  /* 82121414h */ case    7:  		/* mtspr CTR, R11 */
		/* 82121414h case    7:*/		regs.CTR = regs.R11;
		/* 82121414h case    7:*/		return 0x82121418;
		  /* 82121418h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82121418h case    8:*/		if ( 1 ) { regs.LR = 0x8212141C; return (uint32)regs.CTR; }
		/* 82121418h case    8:*/		return 0x8212141C;
		  /* 8212141Ch */ case    9:  		/* stw R3, <#[R28 + 16]> */
		/* 8212141Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8212141Ch case    9:*/		return 0x82121420;
		  /* 82121420h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82121420h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121420h case   10:*/		return 0x82121424;
		  /* 82121424h */ case   11:  		/* bc 12, CR0_EQ, 300 */
		/* 82121424h case   11:*/		if ( regs.CR[0].eq ) { return 0x82121550;  }
		/* 82121424h case   11:*/		return 0x82121428;
	}
	return 0x82121428;
} // Block from 821213F8h-82121428h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82121428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121428);
		  /* 82121428h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82121428h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82121428h case    0:*/		return 0x8212142C;
		  /* 8212142Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8212142Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82121450;  }
		/* 8212142Ch case    1:*/		return 0x82121430;
		  /* 82121430h */ case    2:  		/* lwz R11, <#[R27]> */
		/* 82121430h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82121430h case    2:*/		return 0x82121434;
		  /* 82121434h */ case    3:  		/* mr R3, R27 */
		/* 82121434h case    3:*/		regs.R3 = regs.R27;
		/* 82121434h case    3:*/		return 0x82121438;
		  /* 82121438h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121438h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121438h case    4:*/		return 0x8212143C;
		  /* 8212143Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8212143Ch case    5:*/		regs.CTR = regs.R11;
		/* 8212143Ch case    5:*/		return 0x82121440;
		  /* 82121440h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82121440h case    6:*/		if ( 1 ) { regs.LR = 0x82121444; return (uint32)regs.CTR; }
		/* 82121440h case    6:*/		return 0x82121444;
		  /* 82121444h */ case    7:  		/* stw R3, <#[R28 + 32]> */
		/* 82121444h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000020) );
		/* 82121444h case    7:*/		return 0x82121448;
		  /* 82121448h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82121448h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121448h case    8:*/		return 0x8212144C;
		  /* 8212144Ch */ case    9:  		/* bc 12, CR0_EQ, 260 */
		/* 8212144Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82121550;  }
		/* 8212144Ch case    9:*/		return 0x82121450;
	}
	return 0x82121450;
} // Block from 82121428h-82121450h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82121450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121450);
		  /* 82121450h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 82121450h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82121450h case    0:*/		return 0x82121454;
		  /* 82121454h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 82121454h case    1:*/		if ( regs.CR[6].eq ) { return 0x821214B4;  }
		/* 82121454h case    1:*/		return 0x82121458;
		  /* 82121458h */ case    2:  		/* lwz R31, <#[R28 + 32]> */
		/* 82121458h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000020) );
		/* 82121458h case    2:*/		return 0x8212145C;
		  /* 8212145Ch */ case    3:  		/* b 80 */
		/* 8212145Ch case    3:*/		return 0x821214AC;
		/* 8212145Ch case    3:*/		return 0x82121460;
		  /* 82121460h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 82121460h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82121460h case    4:*/		return 0x82121464;
		  /* 82121464h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82121464h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82121464h case    5:*/		return 0x82121468;
		  /* 82121468h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 82121468h case    6:*/		if ( regs.CR[6].eq ) { return 0x821214A8;  }
		/* 82121468h case    6:*/		return 0x8212146C;
		  /* 8212146Ch */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 8212146Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8212146Ch case    7:*/		return 0x82121470;
		  /* 82121470h */ case    8:  		/* cmpwi CR6, R10, 14 */
		/* 82121470h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82121470h case    8:*/		return 0x82121474;
		  /* 82121474h */ case    9:  		/* bc 4, CR6_EQ, 52 */
		/* 82121474h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821214A8;  }
		/* 82121474h case    9:*/		return 0x82121478;
		  /* 82121478h */ case   10:  		/* mr R3, R29 */
		/* 82121478h case   10:*/		regs.R3 = regs.R29;
		/* 82121478h case   10:*/		return 0x8212147C;
		  /* 8212147Ch */ case   11:  		/* lwz R4, <#[R11 + 16]> */
		/* 8212147Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8212147Ch case   11:*/		return 0x82121480;
		  /* 82121480h */ case   12:  		/* bl -29056 */
		/* 82121480h case   12:*/		regs.LR = 0x82121484; return 0x8211A300;
		/* 82121480h case   12:*/		return 0x82121484;
		  /* 82121484h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82121484h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121484h case   13:*/		return 0x82121488;
		  /* 82121488h */ case   14:  		/* bc 12, CR0_EQ, 88 */
		/* 82121488h case   14:*/		if ( regs.CR[0].eq ) { return 0x821214E0;  }
		/* 82121488h case   14:*/		return 0x8212148C;
		  /* 8212148Ch */ case   15:  		/* cmpwi CR6, R26, 0 */
		/* 8212148Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8212148Ch case   15:*/		return 0x82121490;
		  /* 82121490h */ case   16:  		/* bc 4, CR6_EQ, 24 */
		/* 82121490h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821214A8;  }
		/* 82121490h case   16:*/		return 0x82121494;
		  /* 82121494h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 82121494h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82121494h case   17:*/		return 0x82121498;
		  /* 82121498h */ case   18:  		/* mr R3, R29 */
		/* 82121498h case   18:*/		regs.R3 = regs.R29;
		/* 82121498h case   18:*/		return 0x8212149C;
		  /* 8212149Ch */ case   19:  		/* lwz R4, <#[R11 + 16]> */
		/* 8212149Ch case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8212149Ch case   19:*/		return 0x821214A0;
		  /* 821214A0h */ case   20:  		/* bl -29296 */
		/* 821214A0h case   20:*/		regs.LR = 0x821214A4; return 0x8211A230;
		/* 821214A0h case   20:*/		return 0x821214A4;
		  /* 821214A4h */ case   21:  		/* mr R26, R3 */
		/* 821214A4h case   21:*/		regs.R26 = regs.R3;
		/* 821214A4h case   21:*/		return 0x821214A8;
	}
	return 0x821214A8;
} // Block from 82121450h-821214A8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821214A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821214A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821214A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821214A8);
		  /* 821214A8h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 821214A8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821214A8h case    0:*/		return 0x821214AC;
	}
	return 0x821214AC;
} // Block from 821214A8h-821214ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821214ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821214AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821214AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821214AC);
		  /* 821214ACh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821214ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821214ACh case    0:*/		return 0x821214B0;
		  /* 821214B0h */ case    1:  		/* bc 4, CR6_EQ, -80 */
		/* 821214B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82121460;  }
		/* 821214B0h case    1:*/		return 0x821214B4;
	}
	return 0x821214B4;
} // Block from 821214ACh-821214B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821214B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821214B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821214B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821214B4);
		  /* 821214B4h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821214B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821214B4h case    0:*/		return 0x821214B8;
		  /* 821214B8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821214B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821214CC;  }
		/* 821214B8h case    1:*/		return 0x821214BC;
		  /* 821214BCh */ case    2:  		/* li R5, 1 */
		/* 821214BCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821214BCh case    2:*/		return 0x821214C0;
		  /* 821214C0h */ case    3:  		/* lwz R4, <#[R28 + 16]> */
		/* 821214C0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000010) );
		/* 821214C0h case    3:*/		return 0x821214C4;
		  /* 821214C4h */ case    4:  		/* mr R3, R29 */
		/* 821214C4h case    4:*/		regs.R3 = regs.R29;
		/* 821214C4h case    4:*/		return 0x821214C8;
		  /* 821214C8h */ case    5:  		/* bl -29568 */
		/* 821214C8h case    5:*/		regs.LR = 0x821214CC; return 0x8211A148;
		/* 821214C8h case    5:*/		return 0x821214CC;
	}
	return 0x821214CC;
} // Block from 821214B4h-821214CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821214CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821214CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821214CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821214CC);
		  /* 821214CCh */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 821214CCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821214CCh case    0:*/		return 0x821214D0;
		  /* 821214D0h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 821214D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121558;  }
		/* 821214D0h case    1:*/		return 0x821214D4;
		  /* 821214D4h */ case    2:  		/* lwz R31, <#[R28 + 32]> */
		/* 821214D4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000020) );
		/* 821214D4h case    2:*/		return 0x821214D8;
		  /* 821214D8h */ case    3:  		/* mr R30, R23 */
		/* 821214D8h case    3:*/		regs.R30 = regs.R23;
		/* 821214D8h case    3:*/		return 0x821214DC;
		  /* 821214DCh */ case    4:  		/* b 64 */
		/* 821214DCh case    4:*/		return 0x8212151C;
		/* 821214DCh case    4:*/		return 0x821214E0;
	}
	return 0x821214E0;
} // Block from 821214CCh-821214E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821214E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821214E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821214E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821214E0);
		  /* 821214E0h */ case    0:  		/* lis R11, -32253 */
		/* 821214E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821214E0h case    0:*/		return 0x821214E4;
		  /* 821214E4h */ case    1:  		/* li R5, 3017 */
		/* 821214E4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBC9);
		/* 821214E4h case    1:*/		return 0x821214E8;
		  /* 821214E8h */ case    2:  		/* addi R6, R11, 10272 */
		/* 821214E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2820);
		/* 821214E8h case    2:*/		return 0x821214EC;
		  /* 821214ECh */ case    3:  		/* b 88 */
		/* 821214ECh case    3:*/		return 0x82121544;
		/* 821214ECh case    3:*/		return 0x821214F0;
		  /* 821214F0h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821214F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821214F0h case    4:*/		return 0x821214F4;
		  /* 821214F4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821214F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821214F4h case    5:*/		return 0x821214F8;
		  /* 821214F8h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 821214F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82121518;  }
		/* 821214F8h case    6:*/		return 0x821214FC;
		  /* 821214FCh */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 821214FCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821214FCh case    7:*/		return 0x82121500;
		  /* 82121500h */ case    8:  		/* cmpwi CR6, R10, 14 */
		/* 82121500h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82121500h case    8:*/		return 0x82121504;
		  /* 82121504h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 82121504h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82121518;  }
		/* 82121504h case    9:*/		return 0x82121508;
		  /* 82121508h */ case   10:  		/* mr R3, R29 */
		/* 82121508h case   10:*/		regs.R3 = regs.R29;
		/* 82121508h case   10:*/		return 0x8212150C;
		  /* 8212150Ch */ case   11:  		/* lwz R4, <#[R11 + 16]> */
		/* 8212150Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8212150Ch case   11:*/		return 0x82121510;
		  /* 82121510h */ case   12:  		/* bl -28992 */
		/* 82121510h case   12:*/		regs.LR = 0x82121514; return 0x8211A3D0;
		/* 82121510h case   12:*/		return 0x82121514;
		  /* 82121514h */ case   13:  		/* add R30, R3, R30 */
		/* 82121514h case   13:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 82121514h case   13:*/		return 0x82121518;
	}
	return 0x82121518;
} // Block from 821214E0h-82121518h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82121518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121518);
		  /* 82121518h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 82121518h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82121518h case    0:*/		return 0x8212151C;
	}
	return 0x8212151C;
} // Block from 82121518h-8212151Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212151Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212151C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212151C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212151C);
		  /* 8212151Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8212151Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8212151Ch case    0:*/		return 0x82121520;
		  /* 82121520h */ case    1:  		/* bc 4, CR6_EQ, -48 */
		/* 82121520h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821214F0;  }
		/* 82121520h case    1:*/		return 0x82121524;
		  /* 82121524h */ case    2:  		/* mr R3, R29 */
		/* 82121524h case    2:*/		regs.R3 = regs.R29;
		/* 82121524h case    2:*/		return 0x82121528;
		  /* 82121528h */ case    3:  		/* lwz R4, <#[R28 + 16]> */
		/* 82121528h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000010) );
		/* 82121528h case    3:*/		return 0x8212152C;
		  /* 8212152Ch */ case    4:  		/* bl -29020 */
		/* 8212152Ch case    4:*/		regs.LR = 0x82121530; return 0x8211A3D0;
		/* 8212152Ch case    4:*/		return 0x82121530;
		  /* 82121530h */ case    5:  		/* cmplw CR6, R30, R3 */
		/* 82121530h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 82121530h case    5:*/		return 0x82121534;
		  /* 82121534h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 82121534h case    6:*/		if ( regs.CR[6].eq ) { return 0x82121558;  }
		/* 82121534h case    6:*/		return 0x82121538;
		  /* 82121538h */ case    7:  		/* lis R11, -32253 */
		/* 82121538h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121538h case    7:*/		return 0x8212153C;
		  /* 8212153Ch */ case    8:  		/* li R5, 3014 */
		/* 8212153Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBC6);
		/* 8212153Ch case    8:*/		return 0x82121540;
		  /* 82121540h */ case    9:  		/* addi R6, R11, 10212 */
		/* 82121540h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x27E4);
		/* 82121540h case    9:*/		return 0x82121544;
	}
	return 0x82121544;
} // Block from 8212151Ch-82121544h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82121544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121544);
		  /* 82121544h */ case    0:  		/* mr R4, R25 */
		/* 82121544h case    0:*/		regs.R4 = regs.R25;
		/* 82121544h case    0:*/		return 0x82121548;
		  /* 82121548h */ case    1:  		/* mr R3, R29 */
		/* 82121548h case    1:*/		regs.R3 = regs.R29;
		/* 82121548h case    1:*/		return 0x8212154C;
		  /* 8212154Ch */ case    2:  		/* bl -31916 */
		/* 8212154Ch case    2:*/		regs.LR = 0x82121550; return 0x821198A0;
		/* 8212154Ch case    2:*/		return 0x82121550;
	}
	return 0x82121550;
} // Block from 82121544h-82121550h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121550);
		  /* 82121550h */ case    0:  		/* mr R28, R23 */
		/* 82121550h case    0:*/		regs.R28 = regs.R23;
		/* 82121550h case    0:*/		return 0x82121554;
		  /* 82121554h */ case    1:  		/* b 16 */
		/* 82121554h case    1:*/		return 0x82121564;
		/* 82121554h case    1:*/		return 0x82121558;
	}
	return 0x82121558;
} // Block from 82121550h-82121558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121558);
		  /* 82121558h */ case    0:  		/* mr R4, R28 */
		/* 82121558h case    0:*/		regs.R4 = regs.R28;
		/* 82121558h case    0:*/		return 0x8212155C;
		  /* 8212155Ch */ case    1:  		/* mr R3, R29 */
		/* 8212155Ch case    1:*/		regs.R3 = regs.R29;
		/* 8212155Ch case    1:*/		return 0x82121560;
		  /* 82121560h */ case    2:  		/* bl -21832 */
		/* 82121560h case    2:*/		regs.LR = 0x82121564; return 0x8211C018;
		/* 82121560h case    2:*/		return 0x82121564;
	}
	return 0x82121564;
} // Block from 82121558h-82121564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121564);
		  /* 82121564h */ case    0:  		/* mr R3, R28 */
		/* 82121564h case    0:*/		regs.R3 = regs.R28;
		/* 82121564h case    0:*/		return 0x82121568;
		  /* 82121568h */ case    1:  		/* addi R1, R1, 224 */
		/* 82121568h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82121568h case    1:*/		return 0x8212156C;
		  /* 8212156Ch */ case    2:  		/* b -590552 */
		/* 8212156Ch case    2:*/		return 0x82091294;
		/* 8212156Ch case    2:*/		return 0x82121570;
	}
	return 0x82121570;
} // Block from 82121564h-82121570h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121570);
		  /* 82121570h */ case    0:  		/* mfspr R12, LR */
		/* 82121570h case    0:*/		regs.R12 = regs.LR;
		/* 82121570h case    0:*/		return 0x82121574;
		  /* 82121574h */ case    1:  		/* bl -590668 */
		/* 82121574h case    1:*/		regs.LR = 0x82121578; return 0x82091228;
		/* 82121574h case    1:*/		return 0x82121578;
		  /* 82121578h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82121578h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82121578h case    2:*/		return 0x8212157C;
		  /* 8212157Ch */ case    3:  		/* mr R21, R3 */
		/* 8212157Ch case    3:*/		regs.R21 = regs.R3;
		/* 8212157Ch case    3:*/		return 0x82121580;
		  /* 82121580h */ case    4:  		/* mr R23, R4 */
		/* 82121580h case    4:*/		regs.R23 = regs.R4;
		/* 82121580h case    4:*/		return 0x82121584;
		  /* 82121584h */ case    5:  		/* mr R17, R5 */
		/* 82121584h case    5:*/		regs.R17 = regs.R5;
		/* 82121584h case    5:*/		return 0x82121588;
		  /* 82121588h */ case    6:  		/* mr R16, R6 */
		/* 82121588h case    6:*/		regs.R16 = regs.R6;
		/* 82121588h case    6:*/		return 0x8212158C;
		  /* 8212158Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8212158Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8212158Ch case    7:*/		return 0x82121590;
		  /* 82121590h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 82121590h case    8:*/		if ( regs.CR[6].eq ) { return 0x821215A8;  }
		/* 82121590h case    8:*/		return 0x82121594;
		  /* 82121594h */ case    9:  		/* lwz R11, <#[R4 + 4]> */
		/* 82121594h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82121594h case    9:*/		return 0x82121598;
		  /* 82121598h */ case   10:  		/* cmpwi CR6, R11, 14 */
		/* 82121598h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121598h case   10:*/		return 0x8212159C;
		  /* 8212159Ch */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8212159Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821215A8;  }
		/* 8212159Ch case   11:*/		return 0x821215A0;
		  /* 821215A0h */ case   12:  		/* li R3, 0 */
		/* 821215A0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821215A0h case   12:*/		return 0x821215A4;
		  /* 821215A4h */ case   13:  		/* b 1484 */
		/* 821215A4h case   13:*/		return 0x82121B70;
		/* 821215A4h case   13:*/		return 0x821215A8;
	}
	return 0x821215A8;
} // Block from 82121570h-821215A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821215A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215A8);
		  /* 821215A8h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 821215A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821215A8h case    0:*/		return 0x821215AC;
		  /* 821215ACh */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821215ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x821215BC;  }
		/* 821215ACh case    1:*/		return 0x821215B0;
		  /* 821215B0h */ case    2:  		/* lwz R11, <#[R17 + 4]> */
		/* 821215B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 821215B0h case    2:*/		return 0x821215B4;
		  /* 821215B4h */ case    3:  		/* cmpwi CR6, R11, 14 */
		/* 821215B4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821215B4h case    3:*/		return 0x821215B8;
		  /* 821215B8h */ case    4:  		/* bc 4, CR6_EQ, -24 */
		/* 821215B8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821215A0;  }
		/* 821215B8h case    4:*/		return 0x821215BC;
	}
	return 0x821215BC;
} // Block from 821215A8h-821215BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821215BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215BC);
		  /* 821215BCh */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 821215BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821215BCh case    0:*/		return 0x821215C0;
		  /* 821215C0h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821215C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821215D0;  }
		/* 821215C0h case    1:*/		return 0x821215C4;
		  /* 821215C4h */ case    2:  		/* lwz R11, <#[R16 + 4]> */
		/* 821215C4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 821215C4h case    2:*/		return 0x821215C8;
		  /* 821215C8h */ case    3:  		/* cmpwi CR6, R11, 14 */
		/* 821215C8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821215C8h case    3:*/		return 0x821215CC;
		  /* 821215CCh */ case    4:  		/* bc 4, CR6_EQ, -44 */
		/* 821215CCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821215A0;  }
		/* 821215CCh case    4:*/		return 0x821215D0;
	}
	return 0x821215D0;
} // Block from 821215BCh-821215D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821215D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215D0);
		  /* 821215D0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821215D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821215D0h case    0:*/		return 0x821215D4;
		  /* 821215D4h */ case    1:  		/* addi R22, R23, 48 */
		/* 821215D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R23,0x30);
		/* 821215D4h case    1:*/		return 0x821215D8;
		  /* 821215D8h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821215D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821215E4;  }
		/* 821215D8h case    2:*/		return 0x821215DC;
		  /* 821215DCh */ case    3:  		/* addi R22, R21, 40 */
		/* 821215DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R21,0x28);
		/* 821215DCh case    3:*/		return 0x821215E0;
		  /* 821215E0h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 821215E0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821215EC;  }
		/* 821215E0h case    4:*/		return 0x821215E4;
	}
	return 0x821215E4;
} // Block from 821215D0h-821215E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821215E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215E4);
		  /* 821215E4h */ case    0:  		/* lwz R25, <#[R23 + 16]> */
		/* 821215E4h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R23 + 0x00000010) );
		/* 821215E4h case    0:*/		return 0x821215E8;
		  /* 821215E8h */ case    1:  		/* b 8 */
		/* 821215E8h case    1:*/		return 0x821215F0;
		/* 821215E8h case    1:*/		return 0x821215EC;
	}
	return 0x821215EC;
} // Block from 821215E4h-821215ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821215ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215EC);
		  /* 821215ECh */ case    0:  		/* li R25, 0 */
		/* 821215ECh case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821215ECh case    0:*/		return 0x821215F0;
	}
	return 0x821215F0;
} // Block from 821215ECh-821215F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821215F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821215F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821215F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821215F0);
		  /* 821215F0h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 821215F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821215F0h case    0:*/		return 0x821215F4;
		  /* 821215F4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821215F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121600;  }
		/* 821215F4h case    1:*/		return 0x821215F8;
		  /* 821215F8h */ case    2:  		/* lwz R20, <#[R17 + 16]> */
		/* 821215F8h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R17 + 0x00000010) );
		/* 821215F8h case    2:*/		return 0x821215FC;
		  /* 821215FCh */ case    3:  		/* b 8 */
		/* 821215FCh case    3:*/		return 0x82121604;
		/* 821215FCh case    3:*/		return 0x82121600;
	}
	return 0x82121600;
} // Block from 821215F0h-82121600h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121600);
		  /* 82121600h */ case    0:  		/* li R20, 0 */
		/* 82121600h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82121600h case    0:*/		return 0x82121604;
	}
	return 0x82121604;
} // Block from 82121600h-82121604h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121604);
		  /* 82121604h */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 82121604h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82121604h case    0:*/		return 0x82121608;
		  /* 82121608h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82121608h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121614;  }
		/* 82121608h case    1:*/		return 0x8212160C;
		  /* 8212160Ch */ case    2:  		/* lwz R19, <#[R16 + 16]> */
		/* 8212160Ch case    2:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R16 + 0x00000010) );
		/* 8212160Ch case    2:*/		return 0x82121610;
		  /* 82121610h */ case    3:  		/* b 8 */
		/* 82121610h case    3:*/		return 0x82121618;
		/* 82121610h case    3:*/		return 0x82121614;
	}
	return 0x82121614;
} // Block from 82121604h-82121614h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121614);
		  /* 82121614h */ case    0:  		/* li R19, 0 */
		/* 82121614h case    0:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82121614h case    0:*/		return 0x82121618;
	}
	return 0x82121618;
} // Block from 82121614h-82121618h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121618);
		  /* 82121618h */ case    0:  		/* li R3, 88 */
		/* 82121618h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82121618h case    0:*/		return 0x8212161C;
		  /* 8212161Ch */ case    1:  		/* stw R20, <#[R1 + 112]> */
		/* 8212161Ch case    1:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000070) );
		/* 8212161Ch case    1:*/		return 0x82121620;
		  /* 82121620h */ case    2:  		/* stw R19, <#[R1 + 116]> */
		/* 82121620h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000074) );
		/* 82121620h case    2:*/		return 0x82121624;
		  /* 82121624h */ case    3:  		/* li R27, 0 */
		/* 82121624h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82121624h case    3:*/		return 0x82121628;
		  /* 82121628h */ case    4:  		/* bl -361472 */
		/* 82121628h case    4:*/		regs.LR = 0x8212162C; return 0x820C9228;
		/* 82121628h case    4:*/		return 0x8212162C;
		  /* 8212162Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8212162Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212162Ch case    5:*/		return 0x82121630;
		  /* 82121630h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 82121630h case    6:*/		if ( regs.CR[0].eq ) { return 0x82121658;  }
		/* 82121630h case    6:*/		return 0x82121634;
		  /* 82121634h */ case    7:  		/* mr R9, R22 */
		/* 82121634h case    7:*/		regs.R9 = regs.R22;
		/* 82121634h case    7:*/		return 0x82121638;
		  /* 82121638h */ case    8:  		/* li R8, 1 */
		/* 82121638h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82121638h case    8:*/		return 0x8212163C;
		  /* 8212163Ch */ case    9:  		/* li R7, 0 */
		/* 8212163Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212163Ch case    9:*/		return 0x82121640;
		  /* 82121640h */ case   10:  		/* li R6, 0 */
		/* 82121640h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121640h case   10:*/		return 0x82121644;
		  /* 82121644h */ case   11:  		/* li R5, 30 */
		/* 82121644h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1E);
		/* 82121644h case   11:*/		return 0x82121648;
	}
	return 0x82121648;
} // Block from 82121618h-82121648h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82121648h
// Function '?TypeDecl@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121648);
		  /* 82121648h */ case    0:  		/* li R4, 0 */
		/* 82121648h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121648h case    0:*/		return 0x8212164C;
		  /* 8212164Ch */ case    1:  		/* bl -349892 */
		/* 8212164Ch case    1:*/		regs.LR = 0x82121650; return 0x820CBF88;
		/* 8212164Ch case    1:*/		return 0x82121650;
		  /* 82121650h */ case    2:  		/* mr R18, R3 */
		/* 82121650h case    2:*/		regs.R18 = regs.R3;
		/* 82121650h case    2:*/		return 0x82121654;
		  /* 82121654h */ case    3:  		/* b 8 */
		/* 82121654h case    3:*/		return 0x8212165C;
		/* 82121654h case    3:*/		return 0x82121658;
	}
	return 0x82121658;
} // Block from 82121648h-82121658h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121658);
		  /* 82121658h */ case    0:  		/* li R18, 0 */
		/* 82121658h case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 82121658h case    0:*/		return 0x8212165C;
	}
	return 0x8212165C;
} // Block from 82121658h-8212165Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212165Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212165C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212165C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212165C);
		  /* 8212165Ch */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 8212165Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8212165Ch case    0:*/		return 0x82121660;
		  /* 82121660h */ case    1:  		/* bc 12, CR6_EQ, 648 */
		/* 82121660h case    1:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 82121660h case    1:*/		return 0x82121664;
		  /* 82121664h */ case    2:  		/* mr R4, R25 */
		/* 82121664h case    2:*/		regs.R4 = regs.R25;
		/* 82121664h case    2:*/		return 0x82121668;
		  /* 82121668h */ case    3:  		/* mr R3, R21 */
		/* 82121668h case    3:*/		regs.R3 = regs.R21;
		/* 82121668h case    3:*/		return 0x8212166C;
		  /* 8212166Ch */ case    4:  		/* bl -29548 */
		/* 8212166Ch case    4:*/		regs.LR = 0x82121670; return 0x8211A300;
		/* 8212166Ch case    4:*/		return 0x82121670;
		  /* 82121670h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82121670h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121670h case    5:*/		return 0x82121674;
		  /* 82121674h */ case    6:  		/* mr R3, R21 */
		/* 82121674h case    6:*/		regs.R3 = regs.R21;
		/* 82121674h case    6:*/		return 0x82121678;
		  /* 82121678h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 82121678h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82121688;  }
		/* 82121678h case    7:*/		return 0x8212167C;
		  /* 8212167Ch */ case    8:  		/* lis R11, -32253 */
		/* 8212167Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212167Ch case    8:*/		return 0x82121680;
		  /* 82121680h */ case    9:  		/* addi R6, R11, 10468 */
		/* 82121680h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x28E4);
		/* 82121680h case    9:*/		return 0x82121684;
		  /* 82121684h */ case   10:  		/* b 600 */
		/* 82121684h case   10:*/		return 0x821218DC;
		/* 82121684h case   10:*/		return 0x82121688;
	}
	return 0x82121688;
} // Block from 8212165Ch-82121688h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82121688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121688);
		  /* 82121688h */ case    0:  		/* addi R28, R18, 16 */
		/* 82121688h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R18,0x10);
		/* 82121688h case    0:*/		return 0x8212168C;
		  /* 8212168Ch */ case    1:  		/* addi R7, R1, 116 */
		/* 8212168Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x74);
		/* 8212168Ch case    1:*/		return 0x82121690;
		  /* 82121690h */ case    2:  		/* mr R8, R28 */
		/* 82121690h case    2:*/		regs.R8 = regs.R28;
		/* 82121690h case    2:*/		return 0x82121694;
		  /* 82121694h */ case    3:  		/* addi R6, R1, 112 */
		/* 82121694h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82121694h case    3:*/		return 0x82121698;
		  /* 82121698h */ case    4:  		/* mr R5, R19 */
		/* 82121698h case    4:*/		regs.R5 = regs.R19;
		/* 82121698h case    4:*/		return 0x8212169C;
		  /* 8212169Ch */ case    5:  		/* mr R4, R20 */
		/* 8212169Ch case    5:*/		regs.R4 = regs.R20;
		/* 8212169Ch case    5:*/		return 0x821216A0;
		  /* 821216A0h */ case    6:  		/* bl -15064 */
		/* 821216A0h case    6:*/		regs.LR = 0x821216A4; return 0x8211DBC8;
		/* 821216A0h case    6:*/		return 0x821216A4;
		  /* 821216A4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821216A4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821216A4h case    7:*/		return 0x821216A8;
		  /* 821216A8h */ case    8:  		/* bc 4, CR0_LT, 16 */
		/* 821216A8h case    8:*/		if ( !regs.CR[0].lt ) { return 0x821216B8;  }
		/* 821216A8h case    8:*/		return 0x821216AC;
		  /* 821216ACh */ case    9:  		/* lis R11, -32253 */
		/* 821216ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821216ACh case    9:*/		return 0x821216B0;
		  /* 821216B0h */ case   10:  		/* addi R6, R11, 10424 */
		/* 821216B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x28B8);
		/* 821216B0h case   10:*/		return 0x821216B4;
		  /* 821216B4h */ case   11:  		/* b 548 */
		/* 821216B4h case   11:*/		return 0x821218D8;
		/* 821216B4h case   11:*/		return 0x821216B8;
	}
	return 0x821216B8;
} // Block from 82121688h-821216B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821216B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821216B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821216B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821216B8);
		  /* 821216B8h */ case    0:  		/* lwz R3, <#[R1 + 112]> */
		/* 821216B8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 821216B8h case    0:*/		return 0x821216BC;
		  /* 821216BCh */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821216BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821216BCh case    1:*/		return 0x821216C0;
		  /* 821216C0h */ case    2:  		/* lwz R30, <#[R1 + 116]> */
		/* 821216C0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821216C0h case    2:*/		return 0x821216C4;
		  /* 821216C4h */ case    3:  		/* mr R26, R3 */
		/* 821216C4h case    3:*/		regs.R26 = regs.R3;
		/* 821216C4h case    3:*/		return 0x821216C8;
		  /* 821216C8h */ case    4:  		/* mr R24, R30 */
		/* 821216C8h case    4:*/		regs.R24 = regs.R30;
		/* 821216C8h case    4:*/		return 0x821216CC;
		  /* 821216CCh */ case    5:  		/* bc 12, CR6_EQ, 356 */
		/* 821216CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82121830;  }
		/* 821216CCh case    5:*/		return 0x821216D0;
		  /* 821216D0h */ case    6:  		/* lwz R11, <#[R25 + 4]> */
		/* 821216D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821216D0h case    6:*/		return 0x821216D4;
		  /* 821216D4h */ case    7:  		/* cmpwi CR6, R11, 9 */
		/* 821216D4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821216D4h case    7:*/		return 0x821216D8;
		  /* 821216D8h */ case    8:  		/* bc 4, CR6_EQ, 344 */
		/* 821216D8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82121830;  }
		/* 821216D8h case    8:*/		return 0x821216DC;
		  /* 821216DCh */ case    9:  		/* lwz R31, <#[R25 + 28]> */
		/* 821216DCh case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x0000001C) );
		/* 821216DCh case    9:*/		return 0x821216E0;
		  /* 821216E0h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 821216E0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821216E0h case   10:*/		return 0x821216E4;
		  /* 821216E4h */ case   11:  		/* lwz R29, <#[R25 + 32]> */
		/* 821216E4h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x00000020) );
		/* 821216E4h case   11:*/		return 0x821216E8;
		  /* 821216E8h */ case   12:  		/* bc 12, CR6_EQ, 120 */
		/* 821216E8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82121760;  }
		/* 821216E8h case   12:*/		return 0x821216EC;
		  /* 821216ECh */ case   13:  		/* lwz R11, <#[R3 + 4]> */
		/* 821216ECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821216ECh case   13:*/		return 0x821216F0;
		  /* 821216F0h */ case   14:  		/* cmpwi CR6, R11, 9 */
		/* 821216F0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821216F0h case   14:*/		return 0x821216F4;
		  /* 821216F4h */ case   15:  		/* bc 4, CR6_EQ, 108 */
		/* 821216F4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82121760;  }
		/* 821216F4h case   15:*/		return 0x821216F8;
		  /* 821216F8h */ case   16:  		/* lwz R11, <#[R3 + 28]> */
		/* 821216F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821216F8h case   16:*/		return 0x821216FC;
		  /* 821216FCh */ case   17:  		/* cmplw CR6, R11, R31 */
		/* 821216FCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821216FCh case   17:*/		return 0x82121700;
		  /* 82121700h */ case   18:  		/* bc 12, CR6_LT, 16 */
		/* 82121700h case   18:*/		if ( regs.CR[6].lt ) { return 0x82121710;  }
		/* 82121700h case   18:*/		return 0x82121704;
		  /* 82121704h */ case   19:  		/* lwz R11, <#[R3 + 32]> */
		/* 82121704h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82121704h case   19:*/		return 0x82121708;
		  /* 82121708h */ case   20:  		/* cmplw CR6, R11, R29 */
		/* 82121708h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82121708h case   20:*/		return 0x8212170C;
		  /* 8212170Ch */ case   21:  		/* bc 4, CR6_LT, 84 */
		/* 8212170Ch case   21:*/		if ( !regs.CR[6].lt ) { return 0x82121760;  }
		/* 8212170Ch case   21:*/		return 0x82121710;
	}
	return 0x82121710;
} // Block from 821216B8h-82121710h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82121710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121710);
		  /* 82121710h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82121710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82121710h case    0:*/		return 0x82121714;
		  /* 82121714h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121714h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121714h case    1:*/		return 0x82121718;
		  /* 82121718h */ case    2:  		/* mtspr CTR, R11 */
		/* 82121718h case    2:*/		regs.CTR = regs.R11;
		/* 82121718h case    2:*/		return 0x8212171C;
		  /* 8212171Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8212171Ch case    3:*/		if ( 1 ) { regs.LR = 0x82121720; return (uint32)regs.CTR; }
		/* 8212171Ch case    3:*/		return 0x82121720;
		  /* 82121720h */ case    4:  		/* lwz R11, <#[R3 + 28]> */
		/* 82121720h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 82121720h case    4:*/		return 0x82121724;
		  /* 82121724h */ case    5:  		/* mr R26, R3 */
		/* 82121724h case    5:*/		regs.R26 = regs.R3;
		/* 82121724h case    5:*/		return 0x82121728;
		  /* 82121728h */ case    6:  		/* cmplw CR6, R11, R31 */
		/* 82121728h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82121728h case    6:*/		return 0x8212172C;
		  /* 8212172Ch */ case    7:  		/* bc 4, CR6_LT, 8 */
		/* 8212172Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82121734;  }
		/* 8212172Ch case    7:*/		return 0x82121730;
		  /* 82121730h */ case    8:  		/* stw R31, <#[R3 + 28]> */
		/* 82121730h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x0000001C) );
		/* 82121730h case    8:*/		return 0x82121734;
	}
	return 0x82121734;
} // Block from 82121710h-82121734h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82121734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121734);
		  /* 82121734h */ case    0:  		/* lwz R11, <#[R26 + 32]> */
		/* 82121734h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000020) );
		/* 82121734h case    0:*/		return 0x82121738;
		  /* 82121738h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 82121738h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82121738h case    1:*/		return 0x8212173C;
		  /* 8212173Ch */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 8212173Ch case    2:*/		if ( !regs.CR[6].lt ) { return 0x82121744;  }
		/* 8212173Ch case    2:*/		return 0x82121740;
		  /* 82121740h */ case    3:  		/* stw R29, <#[R26 + 32]> */
		/* 82121740h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R26 + 0x00000020) );
		/* 82121740h case    3:*/		return 0x82121744;
	}
	return 0x82121744;
} // Block from 82121734h-82121744h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121744);
		  /* 82121744h */ case    0:  		/* li R6, 0 */
		/* 82121744h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121744h case    0:*/		return 0x82121748;
		  /* 82121748h */ case    1:  		/* mr R5, R20 */
		/* 82121748h case    1:*/		regs.R5 = regs.R20;
		/* 82121748h case    1:*/		return 0x8212174C;
		  /* 8212174Ch */ case    2:  		/* mr R4, R26 */
		/* 8212174Ch case    2:*/		regs.R4 = regs.R26;
		/* 8212174Ch case    2:*/		return 0x82121750;
		  /* 82121750h */ case    3:  		/* mr R3, R21 */
		/* 82121750h case    3:*/		regs.R3 = regs.R21;
		/* 82121750h case    3:*/		return 0x82121754;
		  /* 82121754h */ case    4:  		/* bl -17420 */
		/* 82121754h case    4:*/		regs.LR = 0x82121758; return 0x8211D348;
		/* 82121754h case    4:*/		return 0x82121758;
		  /* 82121758h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82121758h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121758h case    5:*/		return 0x8212175C;
		  /* 8212175Ch */ case    6:  		/* bc 12, CR0_EQ, 372 */
		/* 8212175Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821218D0;  }
		/* 8212175Ch case    6:*/		return 0x82121760;
	}
	return 0x82121760;
} // Block from 82121744h-82121760h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82121760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121760);
		  /* 82121760h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82121760h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82121760h case    0:*/		return 0x82121764;
		  /* 82121764h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 82121764h case    1:*/		if ( regs.CR[6].eq ) { return 0x821217E0;  }
		/* 82121764h case    1:*/		return 0x82121768;
		  /* 82121768h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 82121768h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82121768h case    2:*/		return 0x8212176C;
		  /* 8212176Ch */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 8212176Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8212176Ch case    3:*/		return 0x82121770;
		  /* 82121770h */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 82121770h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821217E0;  }
		/* 82121770h case    4:*/		return 0x82121774;
		  /* 82121774h */ case    5:  		/* lwz R11, <#[R30 + 28]> */
		/* 82121774h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 82121774h case    5:*/		return 0x82121778;
		  /* 82121778h */ case    6:  		/* cmplw CR6, R11, R31 */
		/* 82121778h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82121778h case    6:*/		return 0x8212177C;
		  /* 8212177Ch */ case    7:  		/* bc 12, CR6_LT, 16 */
		/* 8212177Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x8212178C;  }
		/* 8212177Ch case    7:*/		return 0x82121780;
		  /* 82121780h */ case    8:  		/* lwz R11, <#[R30 + 32]> */
		/* 82121780h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82121780h case    8:*/		return 0x82121784;
		  /* 82121784h */ case    9:  		/* cmplw CR6, R11, R29 */
		/* 82121784h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82121784h case    9:*/		return 0x82121788;
		  /* 82121788h */ case   10:  		/* bc 4, CR6_LT, 88 */
		/* 82121788h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821217E0;  }
		/* 82121788h case   10:*/		return 0x8212178C;
	}
	return 0x8212178C;
} // Block from 82121760h-8212178Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212178Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212178C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212178C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212178C);
		  /* 8212178Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8212178Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8212178Ch case    0:*/		return 0x82121790;
		  /* 82121790h */ case    1:  		/* mr R3, R30 */
		/* 82121790h case    1:*/		regs.R3 = regs.R30;
		/* 82121790h case    1:*/		return 0x82121794;
		  /* 82121794h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121794h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121794h case    2:*/		return 0x82121798;
		  /* 82121798h */ case    3:  		/* mtspr CTR, R11 */
		/* 82121798h case    3:*/		regs.CTR = regs.R11;
		/* 82121798h case    3:*/		return 0x8212179C;
		  /* 8212179Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8212179Ch case    4:*/		if ( 1 ) { regs.LR = 0x821217A0; return (uint32)regs.CTR; }
		/* 8212179Ch case    4:*/		return 0x821217A0;
		  /* 821217A0h */ case    5:  		/* lwz R11, <#[R3 + 28]> */
		/* 821217A0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821217A0h case    5:*/		return 0x821217A4;
		  /* 821217A4h */ case    6:  		/* mr R24, R3 */
		/* 821217A4h case    6:*/		regs.R24 = regs.R3;
		/* 821217A4h case    6:*/		return 0x821217A8;
		  /* 821217A8h */ case    7:  		/* cmplw CR6, R11, R31 */
		/* 821217A8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821217A8h case    7:*/		return 0x821217AC;
		  /* 821217ACh */ case    8:  		/* bc 4, CR6_LT, 8 */
		/* 821217ACh case    8:*/		if ( !regs.CR[6].lt ) { return 0x821217B4;  }
		/* 821217ACh case    8:*/		return 0x821217B0;
		  /* 821217B0h */ case    9:  		/* stw R31, <#[R3 + 28]> */
		/* 821217B0h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x0000001C) );
		/* 821217B0h case    9:*/		return 0x821217B4;
	}
	return 0x821217B4;
} // Block from 8212178Ch-821217B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821217B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821217B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821217B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821217B4);
		  /* 821217B4h */ case    0:  		/* lwz R11, <#[R24 + 32]> */
		/* 821217B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000020) );
		/* 821217B4h case    0:*/		return 0x821217B8;
		  /* 821217B8h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821217B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821217B8h case    1:*/		return 0x821217BC;
		  /* 821217BCh */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 821217BCh case    2:*/		if ( !regs.CR[6].lt ) { return 0x821217C4;  }
		/* 821217BCh case    2:*/		return 0x821217C0;
		  /* 821217C0h */ case    3:  		/* stw R29, <#[R24 + 32]> */
		/* 821217C0h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R24 + 0x00000020) );
		/* 821217C0h case    3:*/		return 0x821217C4;
	}
	return 0x821217C4;
} // Block from 821217B4h-821217C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821217C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821217C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821217C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821217C4);
		  /* 821217C4h */ case    0:  		/* li R6, 0 */
		/* 821217C4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821217C4h case    0:*/		return 0x821217C8;
		  /* 821217C8h */ case    1:  		/* mr R5, R19 */
		/* 821217C8h case    1:*/		regs.R5 = regs.R19;
		/* 821217C8h case    1:*/		return 0x821217CC;
		  /* 821217CCh */ case    2:  		/* mr R4, R24 */
		/* 821217CCh case    2:*/		regs.R4 = regs.R24;
		/* 821217CCh case    2:*/		return 0x821217D0;
		  /* 821217D0h */ case    3:  		/* mr R3, R21 */
		/* 821217D0h case    3:*/		regs.R3 = regs.R21;
		/* 821217D0h case    3:*/		return 0x821217D4;
		  /* 821217D4h */ case    4:  		/* bl -17548 */
		/* 821217D4h case    4:*/		regs.LR = 0x821217D8; return 0x8211D348;
		/* 821217D4h case    4:*/		return 0x821217D8;
		  /* 821217D8h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 821217D8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821217D8h case    5:*/		return 0x821217DC;
		  /* 821217DCh */ case    6:  		/* bc 12, CR0_EQ, 244 */
		/* 821217DCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821218D0;  }
		/* 821217DCh case    6:*/		return 0x821217E0;
	}
	return 0x821217E0;
} // Block from 821217C4h-821217E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821217E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821217E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821217E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821217E0);
		  /* 821217E0h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821217E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821217E0h case    0:*/		return 0x821217E4;
		  /* 821217E4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821217E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821217E4h case    1:*/		return 0x821217E8;
		  /* 821217E8h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821217E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82121830;  }
		/* 821217E8h case    2:*/		return 0x821217EC;
		  /* 821217ECh */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821217ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821217ECh case    3:*/		return 0x821217F0;
		  /* 821217F0h */ case    4:  		/* cmpwi CR6, R10, 9 */
		/* 821217F0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 821217F0h case    4:*/		return 0x821217F4;
		  /* 821217F4h */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 821217F4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82121830;  }
		/* 821217F4h case    5:*/		return 0x821217F8;
		  /* 821217F8h */ case    6:  		/* lwz R10, <#[R11 + 28]> */
		/* 821217F8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821217F8h case    6:*/		return 0x821217FC;
		  /* 821217FCh */ case    7:  		/* cmplw CR6, R10, R31 */
		/* 821217FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821217FCh case    7:*/		return 0x82121800;
		  /* 82121800h */ case    8:  		/* bc 12, CR6_LT, 24 */
		/* 82121800h case    8:*/		if ( regs.CR[6].lt ) { return 0x82121818;  }
		/* 82121800h case    8:*/		return 0x82121804;
		  /* 82121804h */ case    9:  		/* lwz R9, <#[R11 + 32]> */
		/* 82121804h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 82121804h case    9:*/		return 0x82121808;
		  /* 82121808h */ case   10:  		/* cmplw CR6, R9, R29 */
		/* 82121808h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 82121808h case   10:*/		return 0x8212180C;
		  /* 8212180Ch */ case   11:  		/* bc 4, CR6_LT, 36 */
		/* 8212180Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x82121830;  }
		/* 8212180Ch case   11:*/		return 0x82121810;
		  /* 82121810h */ case   12:  		/* cmplw CR6, R10, R31 */
		/* 82121810h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82121810h case   12:*/		return 0x82121814;
		  /* 82121814h */ case   13:  		/* bc 4, CR6_LT, 8 */
		/* 82121814h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8212181C;  }
		/* 82121814h case   13:*/		return 0x82121818;
	}
	return 0x82121818;
} // Block from 821217E0h-82121818h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82121818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121818);
		  /* 82121818h */ case    0:  		/* stw R31, <#[R11 + 28]> */
		/* 82121818h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000001C) );
		/* 82121818h case    0:*/		return 0x8212181C;
	}
	return 0x8212181C;
} // Block from 82121818h-8212181Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212181Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212181C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212181C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212181C);
		  /* 8212181Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8212181Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8212181Ch case    0:*/		return 0x82121820;
		  /* 82121820h */ case    1:  		/* lwz R10, <#[R11 + 32]> */
		/* 82121820h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82121820h case    1:*/		return 0x82121824;
		  /* 82121824h */ case    2:  		/* cmplw CR6, R10, R29 */
		/* 82121824h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82121824h case    2:*/		return 0x82121828;
		  /* 82121828h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 82121828h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82121830;  }
		/* 82121828h case    3:*/		return 0x8212182C;
		  /* 8212182Ch */ case    4:  		/* stw R29, <#[R11 + 32]> */
		/* 8212182Ch case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000020) );
		/* 8212182Ch case    4:*/		return 0x82121830;
	}
	return 0x82121830;
} // Block from 8212181Ch-82121830h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82121830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121830);
		  /* 82121830h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82121830h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82121830h case    0:*/		return 0x82121834;
		  /* 82121834h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82121834h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82121834h case    1:*/		return 0x82121838;
		  /* 82121838h */ case    2:  		/* bc 12, CR6_EQ, 184 */
		/* 82121838h case    2:*/		if ( regs.CR[6].eq ) { return 0x821218F0;  }
		/* 82121838h case    2:*/		return 0x8212183C;
		  /* 8212183Ch */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8212183Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8212183Ch case    3:*/		return 0x82121840;
		  /* 82121840h */ case    4:  		/* li R3, 40 */
		/* 82121840h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82121840h case    4:*/		return 0x82121844;
		  /* 82121844h */ case    5:  		/* cmpwi CR6, R11, 9 */
		/* 82121844h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82121844h case    5:*/		return 0x82121848;
		  /* 82121848h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 82121848h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82121868;  }
		/* 82121848h case    6:*/		return 0x8212184C;
		  /* 8212184Ch */ case    7:  		/* bl -362020 */
		/* 8212184Ch case    7:*/		regs.LR = 0x82121850; return 0x820C9228;
		/* 8212184Ch case    7:*/		return 0x82121850;
		  /* 82121850h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82121850h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121850h case    8:*/		return 0x82121854;
		  /* 82121854h */ case    9:  		/* bc 12, CR0_EQ, 84 */
		/* 82121854h case    9:*/		if ( regs.CR[0].eq ) { return 0x821218A8;  }
		/* 82121854h case    9:*/		return 0x82121858;
		  /* 82121858h */ case   10:  		/* lwz R11, <#[R28]> */
		/* 82121858h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82121858h case   10:*/		return 0x8212185C;
		  /* 8212185Ch */ case   11:  		/* lwz R8, <#[R11 + 32]> */
		/* 8212185Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000020) );
		/* 8212185Ch case   11:*/		return 0x82121860;
		  /* 82121860h */ case   12:  		/* lwz R7, <#[R11 + 28]> */
		/* 82121860h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000001C) );
		/* 82121860h case   12:*/		return 0x82121864;
		  /* 82121864h */ case   13:  		/* b 40 */
		/* 82121864h case   13:*/		return 0x8212188C;
		/* 82121864h case   13:*/		return 0x82121868;
	}
	return 0x82121868;
} // Block from 82121830h-82121868h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82121868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121868);
		  /* 82121868h */ case    0:  		/* bl -362048 */
		/* 82121868h case    0:*/		regs.LR = 0x8212186C; return 0x820C9228;
		/* 82121868h case    0:*/		return 0x8212186C;
		  /* 8212186Ch */ case    1:  		/* or. R31, R3, R3 */
		/* 8212186Ch case    1:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8212186Ch case    1:*/		return 0x82121870;
		  /* 82121870h */ case    2:  		/* bc 12, CR0_EQ, 56 */
		/* 82121870h case    2:*/		if ( regs.CR[0].eq ) { return 0x821218A8;  }
		/* 82121870h case    2:*/		return 0x82121874;
		  /* 82121874h */ case    3:  		/* mr R3, R21 */
		/* 82121874h case    3:*/		regs.R3 = regs.R21;
		/* 82121874h case    3:*/		return 0x82121878;
		  /* 82121878h */ case    4:  		/* lwz R4, <#[R28]> */
		/* 82121878h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 82121878h case    4:*/		return 0x8212187C;
		  /* 8212187Ch */ case    5:  		/* bl -29868 */
		/* 8212187Ch case    5:*/		regs.LR = 0x82121880; return 0x8211A3D0;
		/* 8212187Ch case    5:*/		return 0x82121880;
		  /* 82121880h */ case    6:  		/* mr R8, R3 */
		/* 82121880h case    6:*/		regs.R8 = regs.R3;
		/* 82121880h case    6:*/		return 0x82121884;
		  /* 82121884h */ case    7:  		/* li R7, 1 */
		/* 82121884h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82121884h case    7:*/		return 0x82121888;
	}
	return 0x82121888;
} // Block from 82121868h-82121888h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82121888h
// Function '?StructDecl@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121888);
		  /* 82121888h */ case    0:  		/* mr R3, R31 */
		/* 82121888h case    0:*/		regs.R3 = regs.R31;
		/* 82121888h case    0:*/		return 0x8212188C;
	}
	return 0x8212188C;
} // Block from 82121888h-8212188Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212188Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212188C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212188C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212188C);
		  /* 8212188Ch */ case    0:  		/* li R9, 512 */
		/* 8212188Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8212188Ch case    0:*/		return 0x82121890;
		  /* 82121890h */ case    1:  		/* li R6, 0 */
		/* 82121890h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121890h case    1:*/		return 0x82121894;
		  /* 82121894h */ case    2:  		/* li R5, 0 */
		/* 82121894h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82121894h case    2:*/		return 0x82121898;
		  /* 82121898h */ case    3:  		/* li R4, 2 */
		/* 82121898h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82121898h case    3:*/		return 0x8212189C;
		  /* 8212189Ch */ case    4:  		/* bl -355356 */
		/* 8212189Ch case    4:*/		regs.LR = 0x821218A0; return 0x820CAC80;
		/* 8212189Ch case    4:*/		return 0x821218A0;
		  /* 821218A0h */ case    5:  		/* mr R27, R3 */
		/* 821218A0h case    5:*/		regs.R27 = regs.R3;
		/* 821218A0h case    5:*/		return 0x821218A4;
		  /* 821218A4h */ case    6:  		/* b 8 */
		/* 821218A4h case    6:*/		return 0x821218AC;
		/* 821218A4h case    6:*/		return 0x821218A8;
	}
	return 0x821218A8;
} // Block from 8212188Ch-821218A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821218A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218A8);
		  /* 821218A8h */ case    0:  		/* li R27, 0 */
		/* 821218A8h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821218A8h case    0:*/		return 0x821218AC;
	}
	return 0x821218AC;
} // Block from 821218A8h-821218ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821218ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218AC);
		  /* 821218ACh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821218ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821218ACh case    0:*/		return 0x821218B0;
		  /* 821218B0h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 821218B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 821218B0h case    1:*/		return 0x821218B4;
		  /* 821218B4h */ case    2:  		/* li R6, 0 */
		/* 821218B4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821218B4h case    2:*/		return 0x821218B8;
		  /* 821218B8h */ case    3:  		/* mr R5, R25 */
		/* 821218B8h case    3:*/		regs.R5 = regs.R25;
		/* 821218B8h case    3:*/		return 0x821218BC;
		  /* 821218BCh */ case    4:  		/* mr R4, R27 */
		/* 821218BCh case    4:*/		regs.R4 = regs.R27;
		/* 821218BCh case    4:*/		return 0x821218C0;
		  /* 821218C0h */ case    5:  		/* mr R3, R21 */
		/* 821218C0h case    5:*/		regs.R3 = regs.R21;
		/* 821218C0h case    5:*/		return 0x821218C4;
		  /* 821218C4h */ case    6:  		/* bl -17788 */
		/* 821218C4h case    6:*/		regs.LR = 0x821218C8; return 0x8211D348;
		/* 821218C4h case    6:*/		return 0x821218C8;
		  /* 821218C8h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821218C8h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821218C8h case    7:*/		return 0x821218CC;
		  /* 821218CCh */ case    8:  		/* bc 4, CR0_EQ, 36 */
		/* 821218CCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821218F0;  }
		/* 821218CCh case    8:*/		return 0x821218D0;
	}
	return 0x821218D0;
} // Block from 821218ACh-821218D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821218D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218D0);
		  /* 821218D0h */ case    0:  		/* lis R11, -32253 */
		/* 821218D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821218D0h case    0:*/		return 0x821218D4;
		  /* 821218D4h */ case    1:  		/* addi R6, R11, 10376 */
		/* 821218D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2888);
		/* 821218D4h case    1:*/		return 0x821218D8;
	}
	return 0x821218D8;
} // Block from 821218D0h-821218D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821218D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218D8);
		  /* 821218D8h */ case    0:  		/* mr R3, R21 */
		/* 821218D8h case    0:*/		regs.R3 = regs.R21;
		/* 821218D8h case    0:*/		return 0x821218DC;
	}
	return 0x821218DC;
} // Block from 821218D8h-821218DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821218DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218DC);
		  /* 821218DCh */ case    0:  		/* li R5, 3020 */
		/* 821218DCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 821218DCh case    0:*/		return 0x821218E0;
		  /* 821218E0h */ case    1:  		/* mr R4, R22 */
		/* 821218E0h case    1:*/		regs.R4 = regs.R22;
		/* 821218E0h case    1:*/		return 0x821218E4;
		  /* 821218E4h */ case    2:  		/* bl -32836 */
		/* 821218E4h case    2:*/		regs.LR = 0x821218E8; return 0x821198A0;
		/* 821218E4h case    2:*/		return 0x821218E8;
	}
	return 0x821218E8;
} // Block from 821218DCh-821218E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821218E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218E8);
		  /* 821218E8h */ case    0:  		/* li R18, 0 */
		/* 821218E8h case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821218E8h case    0:*/		return 0x821218EC;
		  /* 821218ECh */ case    1:  		/* b 640 */
		/* 821218ECh case    1:*/		return 0x82121B6C;
		/* 821218ECh case    1:*/		return 0x821218F0;
	}
	return 0x821218F0;
} // Block from 821218E8h-821218F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821218F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821218F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821218F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821218F0);
		  /* 821218F0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821218F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821218F0h case    0:*/		return 0x821218F4;
		  /* 821218F4h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821218F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212191C;  }
		/* 821218F4h case    1:*/		return 0x821218F8;
		  /* 821218F8h */ case    2:  		/* li R7, 0 */
		/* 821218F8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821218F8h case    2:*/		return 0x821218FC;
		  /* 821218FCh */ case    3:  		/* li R6, 0 */
		/* 821218FCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821218FCh case    3:*/		return 0x82121900;
	}
	return 0x82121900;
} // Block from 821218F0h-82121900h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121900h
// Function '?VectorType@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121900);
		  /* 82121900h */ case    0:  		/* mr R5, R23 */
		/* 82121900h case    0:*/		regs.R5 = regs.R23;
		/* 82121900h case    0:*/		return 0x82121904;
		  /* 82121904h */ case    1:  		/* mr R4, R27 */
		/* 82121904h case    1:*/		regs.R4 = regs.R27;
		/* 82121904h case    1:*/		return 0x82121908;
		  /* 82121908h */ case    2:  		/* mr R3, R21 */
		/* 82121908h case    2:*/		regs.R3 = regs.R21;
		/* 82121908h case    2:*/		return 0x8212190C;
		  /* 8212190Ch */ case    3:  		/* bl -1716 */
		/* 8212190Ch case    3:*/		regs.LR = 0x82121910; return 0x82121258;
		/* 8212190Ch case    3:*/		return 0x82121910;
		  /* 82121910h */ case    4:  		/* stw R3, <#[R18 + 32]> */
		/* 82121910h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R18 + 0x00000020) );
		/* 82121910h case    4:*/		return 0x82121914;
		  /* 82121914h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82121914h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121914h case    5:*/		return 0x82121918;
		  /* 82121918h */ case    6:  		/* bc 12, CR0_EQ, -48 */
		/* 82121918h case    6:*/		if ( regs.CR[0].eq ) { return 0x821218E8;  }
		/* 82121918h case    6:*/		return 0x8212191C;
	}
	return 0x8212191C;
} // Block from 82121900h-8212191Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212191Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212191C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212191C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212191C);
		  /* 8212191Ch */ case    0:  		/* li R3, 88 */
		/* 8212191Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8212191Ch case    0:*/		return 0x82121920;
		  /* 82121920h */ case    1:  		/* bl -362232 */
		/* 82121920h case    1:*/		regs.LR = 0x82121924; return 0x820C9228;
		/* 82121920h case    1:*/		return 0x82121924;
		  /* 82121924h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82121924h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121924h case    2:*/		return 0x82121928;
		  /* 82121928h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 82121928h case    3:*/		if ( regs.CR[0].eq ) { return 0x82121950;  }
		/* 82121928h case    3:*/		return 0x8212192C;
		  /* 8212192Ch */ case    4:  		/* mr R9, R22 */
		/* 8212192Ch case    4:*/		regs.R9 = regs.R22;
		/* 8212192Ch case    4:*/		return 0x82121930;
		  /* 82121930h */ case    5:  		/* li R8, 1 */
		/* 82121930h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82121930h case    5:*/		return 0x82121934;
		  /* 82121934h */ case    6:  		/* li R7, 0 */
		/* 82121934h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121934h case    6:*/		return 0x82121938;
		  /* 82121938h */ case    7:  		/* li R6, 0 */
		/* 82121938h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121938h case    7:*/		return 0x8212193C;
		  /* 8212193Ch */ case    8:  		/* li R5, 0 */
		/* 8212193Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212193Ch case    8:*/		return 0x82121940;
		  /* 82121940h */ case    9:  		/* li R4, 0 */
		/* 82121940h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121940h case    9:*/		return 0x82121944;
		  /* 82121944h */ case   10:  		/* bl -350652 */
		/* 82121944h case   10:*/		regs.LR = 0x82121948; return 0x820CBF88;
		/* 82121944h case   10:*/		return 0x82121948;
		  /* 82121948h */ case   11:  		/* mr R31, R3 */
		/* 82121948h case   11:*/		regs.R31 = regs.R3;
		/* 82121948h case   11:*/		return 0x8212194C;
		  /* 8212194Ch */ case   12:  		/* b 8 */
		/* 8212194Ch case   12:*/		return 0x82121954;
		/* 8212194Ch case   12:*/		return 0x82121950;
	}
	return 0x82121950;
} // Block from 8212191Ch-82121950h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82121950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121950);
		  /* 82121950h */ case    0:  		/* li R31, 0 */
		/* 82121950h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82121950h case    0:*/		return 0x82121954;
	}
	return 0x82121954;
} // Block from 82121950h-82121954h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121954);
		  /* 82121954h */ case    0:  		/* stw R31, <#[R18 + 36]> */
		/* 82121954h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R18 + 0x00000024) );
		/* 82121954h case    0:*/		return 0x82121958;
		  /* 82121958h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82121958h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82121958h case    1:*/		return 0x8212195C;
		  /* 8212195Ch */ case    2:  		/* bc 12, CR6_EQ, -116 */
		/* 8212195Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 8212195Ch case    2:*/		return 0x82121960;
		  /* 82121960h */ case    3:  		/* li R3, 20 */
		/* 82121960h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82121960h case    3:*/		return 0x82121964;
		  /* 82121964h */ case    4:  		/* bl -362300 */
		/* 82121964h case    4:*/		regs.LR = 0x82121968; return 0x820C9228;
		/* 82121964h case    4:*/		return 0x82121968;
		  /* 82121968h */ case    5:  		/* lis R11, -32253 */
		/* 82121968h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121968h case    5:*/		return 0x8212196C;
		  /* 8212196Ch */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8212196Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212196Ch case    6:*/		return 0x82121970;
		  /* 82121970h */ case    7:  		/* addi R29, R11, 9192 */
		/* 82121970h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x23E8);
		/* 82121970h case    7:*/		return 0x82121974;
		  /* 82121974h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 82121974h case    8:*/		if ( regs.CR[0].eq ) { return 0x8212198C;  }
		/* 82121974h case    8:*/		return 0x82121978;
		  /* 82121978h */ case    9:  		/* mr R6, R29 */
		/* 82121978h case    9:*/		regs.R6 = regs.R29;
		/* 82121978h case    9:*/		return 0x8212197C;
		  /* 8212197Ch */ case   10:  		/* li R5, 0 */
		/* 8212197Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212197Ch case   10:*/		return 0x82121980;
		  /* 82121980h */ case   11:  		/* li R4, 0 */
		/* 82121980h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121980h case   11:*/		return 0x82121984;
		  /* 82121984h */ case   12:  		/* bl -361876 */
		/* 82121984h case   12:*/		regs.LR = 0x82121988; return 0x820C93F0;
		/* 82121984h case   12:*/		return 0x82121988;
		  /* 82121988h */ case   13:  		/* b 8 */
		/* 82121988h case   13:*/		return 0x82121990;
		/* 82121988h case   13:*/		return 0x8212198C;
	}
	return 0x8212198C;
} // Block from 82121954h-8212198Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212198Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212198C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212198C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212198C);
		  /* 8212198Ch */ case    0:  		/* li R3, 0 */
		/* 8212198Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212198Ch case    0:*/		return 0x82121990;
	}
	return 0x82121990;
} // Block from 8212198Ch-82121990h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121990);
		  /* 82121990h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82121990h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121990h case    0:*/		return 0x82121994;
		  /* 82121994h */ case    1:  		/* stw R3, <#[R31 + 16]> */
		/* 82121994h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82121994h case    1:*/		return 0x82121998;
		  /* 82121998h */ case    2:  		/* bc 12, CR6_EQ, -176 */
		/* 82121998h case    2:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 82121998h case    2:*/		return 0x8212199C;
		  /* 8212199Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8212199Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8212199Ch case    3:*/		return 0x821219A0;
		  /* 821219A0h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821219A0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821219C8;  }
		/* 821219A0h case    4:*/		return 0x821219A4;
		  /* 821219A4h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 821219A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821219A4h case    5:*/		return 0x821219A8;
		  /* 821219A8h */ case    6:  		/* mr R3, R26 */
		/* 821219A8h case    6:*/		regs.R3 = regs.R26;
		/* 821219A8h case    6:*/		return 0x821219AC;
		  /* 821219ACh */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 821219ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821219ACh case    7:*/		return 0x821219B0;
		  /* 821219B0h */ case    8:  		/* mtspr CTR, R11 */
		/* 821219B0h case    8:*/		regs.CTR = regs.R11;
		/* 821219B0h case    8:*/		return 0x821219B4;
		  /* 821219B4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 821219B4h case    9:*/		if ( 1 ) { regs.LR = 0x821219B8; return (uint32)regs.CTR; }
		/* 821219B4h case    9:*/		return 0x821219B8;
	}
	return 0x821219B8;
} // Block from 82121990h-821219B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821219B8h
// Function '?MatrixType@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821219B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821219B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821219B8);
		  /* 821219B8h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821219B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821219B8h case    0:*/		return 0x821219BC;
		  /* 821219BCh */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 821219BCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821219BCh case    1:*/		return 0x821219C0;
		  /* 821219C0h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 821219C0h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 821219C0h case    2:*/		return 0x821219C4;
		  /* 821219C4h */ case    3:  		/* bc 12, CR0_EQ, -220 */
		/* 821219C4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821218E8;  }
		/* 821219C4h case    3:*/		return 0x821219C8;
	}
	return 0x821219C8;
} // Block from 821219B8h-821219C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821219C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821219C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821219C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821219C8);
		  /* 821219C8h */ case    0:  		/* li R3, 20 */
		/* 821219C8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821219C8h case    0:*/		return 0x821219CC;
		  /* 821219CCh */ case    1:  		/* bl -362404 */
		/* 821219CCh case    1:*/		regs.LR = 0x821219D0; return 0x820C9228;
		/* 821219CCh case    1:*/		return 0x821219D0;
		  /* 821219D0h */ case    2:  		/* lis R11, -32253 */
		/* 821219D0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821219D0h case    2:*/		return 0x821219D4;
		  /* 821219D4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 821219D4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821219D4h case    3:*/		return 0x821219D8;
		  /* 821219D8h */ case    4:  		/* addi R30, R11, 9184 */
		/* 821219D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x23E0);
		/* 821219D8h case    4:*/		return 0x821219DC;
		  /* 821219DCh */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821219DCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821219F4;  }
		/* 821219DCh case    5:*/		return 0x821219E0;
		  /* 821219E0h */ case    6:  		/* mr R6, R30 */
		/* 821219E0h case    6:*/		regs.R6 = regs.R30;
		/* 821219E0h case    6:*/		return 0x821219E4;
		  /* 821219E4h */ case    7:  		/* li R5, 0 */
		/* 821219E4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821219E4h case    7:*/		return 0x821219E8;
		  /* 821219E8h */ case    8:  		/* li R4, 0 */
		/* 821219E8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821219E8h case    8:*/		return 0x821219EC;
		  /* 821219ECh */ case    9:  		/* bl -361980 */
		/* 821219ECh case    9:*/		regs.LR = 0x821219F0; return 0x820C93F0;
		/* 821219ECh case    9:*/		return 0x821219F0;
		  /* 821219F0h */ case   10:  		/* b 8 */
		/* 821219F0h case   10:*/		return 0x821219F8;
		/* 821219F0h case   10:*/		return 0x821219F4;
	}
	return 0x821219F4;
} // Block from 821219C8h-821219F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821219F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821219F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821219F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821219F4);
		  /* 821219F4h */ case    0:  		/* li R3, 0 */
		/* 821219F4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821219F4h case    0:*/		return 0x821219F8;
	}
	return 0x821219F8;
} // Block from 821219F4h-821219F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821219F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821219F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821219F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821219F8);
		  /* 821219F8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821219F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821219F8h case    0:*/		return 0x821219FC;
		  /* 821219FCh */ case    1:  		/* stw R3, <#[R31 + 32]> */
		/* 821219FCh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 821219FCh case    1:*/		return 0x82121A00;
		  /* 82121A00h */ case    2:  		/* bc 12, CR6_EQ, -280 */
		/* 82121A00h case    2:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 82121A00h case    2:*/		return 0x82121A04;
		  /* 82121A04h */ case    3:  		/* cmplwi CR6, R17, 0 */
		/* 82121A04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 82121A04h case    3:*/		return 0x82121A08;
		  /* 82121A08h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 82121A08h case    4:*/		if ( regs.CR[6].eq ) { return 0x82121A60;  }
		/* 82121A08h case    4:*/		return 0x82121A0C;
		  /* 82121A0Ch */ case    5:  		/* cmplw CR6, R20, R26 */
		/* 82121A0Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R26);
		/* 82121A0Ch case    5:*/		return 0x82121A10;
		  /* 82121A10h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 82121A10h case    6:*/		if ( regs.CR[6].eq ) { return 0x82121A48;  }
		/* 82121A10h case    6:*/		return 0x82121A14;
		  /* 82121A14h */ case    7:  		/* mr R5, R26 */
		/* 82121A14h case    7:*/		regs.R5 = regs.R26;
		/* 82121A14h case    7:*/		return 0x82121A18;
		  /* 82121A18h */ case    8:  		/* mr R4, R20 */
		/* 82121A18h case    8:*/		regs.R4 = regs.R20;
		/* 82121A18h case    8:*/		return 0x82121A1C;
		  /* 82121A1Ch */ case    9:  		/* mr R3, R21 */
		/* 82121A1Ch case    9:*/		regs.R3 = regs.R21;
		/* 82121A1Ch case    9:*/		return 0x82121A20;
		  /* 82121A20h */ case   10:  		/* bl -38696 */
		/* 82121A20h case   10:*/		regs.LR = 0x82121A24; return 0x821182F8;
		/* 82121A20h case   10:*/		return 0x82121A24;
		  /* 82121A24h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82121A24h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121A24h case   11:*/		return 0x82121A28;
		  /* 82121A28h */ case   12:  		/* bc 4, CR0_EQ, 32 */
		/* 82121A28h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82121A48;  }
		/* 82121A28h case   12:*/		return 0x82121A2C;
		  /* 82121A2Ch */ case   13:  		/* li R7, 0 */
		/* 82121A2Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121A2Ch case   13:*/		return 0x82121A30;
		  /* 82121A30h */ case   14:  		/* li R6, 0 */
		/* 82121A30h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121A30h case   14:*/		return 0x82121A34;
		  /* 82121A34h */ case   15:  		/* mr R5, R17 */
		/* 82121A34h case   15:*/		regs.R5 = regs.R17;
		/* 82121A34h case   15:*/		return 0x82121A38;
		  /* 82121A38h */ case   16:  		/* mr R4, R26 */
		/* 82121A38h case   16:*/		regs.R4 = regs.R26;
		/* 82121A38h case   16:*/		return 0x82121A3C;
		  /* 82121A3Ch */ case   17:  		/* mr R3, R21 */
		/* 82121A3Ch case   17:*/		regs.R3 = regs.R21;
		/* 82121A3Ch case   17:*/		return 0x82121A40;
		  /* 82121A40h */ case   18:  		/* bl -2024 */
		/* 82121A40h case   18:*/		regs.LR = 0x82121A44; return 0x82121258;
		/* 82121A40h case   18:*/		return 0x82121A44;
		  /* 82121A44h */ case   19:  		/* b 12 */
		/* 82121A44h case   19:*/		return 0x82121A50;
		/* 82121A44h case   19:*/		return 0x82121A48;
	}
	return 0x82121A48;
} // Block from 821219F8h-82121A48h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82121A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121A48);
		  /* 82121A48h */ case    0:  		/* mr R3, R17 */
		/* 82121A48h case    0:*/		regs.R3 = regs.R17;
		/* 82121A48h case    0:*/		return 0x82121A4C;
		  /* 82121A4Ch */ case    1:  		/* bl -362212 */
		/* 82121A4Ch case    1:*/		regs.LR = 0x82121A50; return 0x820C9368;
		/* 82121A4Ch case    1:*/		return 0x82121A50;
	}
	return 0x82121A50;
} // Block from 82121A48h-82121A50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121A50);
		  /* 82121A50h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 82121A50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82121A50h case    0:*/		return 0x82121A54;
		  /* 82121A54h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 82121A54h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121A54h case    1:*/		return 0x82121A58;
		  /* 82121A58h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 82121A58h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82121A58h case    2:*/		return 0x82121A5C;
		  /* 82121A5Ch */ case    3:  		/* bc 12, CR0_EQ, -372 */
		/* 82121A5Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821218E8;  }
		/* 82121A5Ch case    3:*/		return 0x82121A60;
	}
	return 0x82121A60;
} // Block from 82121A50h-82121A60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121A60);
		  /* 82121A60h */ case    0:  		/* li R3, 20 */
		/* 82121A60h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82121A60h case    0:*/		return 0x82121A64;
		  /* 82121A64h */ case    1:  		/* bl -362556 */
		/* 82121A64h case    1:*/		regs.LR = 0x82121A68; return 0x820C9228;
		/* 82121A64h case    1:*/		return 0x82121A68;
		  /* 82121A68h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82121A68h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121A68h case    2:*/		return 0x82121A6C;
		  /* 82121A6Ch */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 82121A6Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82121A84;  }
		/* 82121A6Ch case    3:*/		return 0x82121A70;
		  /* 82121A70h */ case    4:  		/* mr R6, R29 */
		/* 82121A70h case    4:*/		regs.R6 = regs.R29;
		/* 82121A70h case    4:*/		return 0x82121A74;
		  /* 82121A74h */ case    5:  		/* li R5, 0 */
		/* 82121A74h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82121A74h case    5:*/		return 0x82121A78;
		  /* 82121A78h */ case    6:  		/* li R4, 0 */
		/* 82121A78h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121A78h case    6:*/		return 0x82121A7C;
		  /* 82121A7Ch */ case    7:  		/* bl -362124 */
		/* 82121A7Ch case    7:*/		regs.LR = 0x82121A80; return 0x820C93F0;
		/* 82121A7Ch case    7:*/		return 0x82121A80;
		  /* 82121A80h */ case    8:  		/* b 8 */
		/* 82121A80h case    8:*/		return 0x82121A88;
		/* 82121A80h case    8:*/		return 0x82121A84;
	}
	return 0x82121A84;
} // Block from 82121A60h-82121A84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82121A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121A84);
		  /* 82121A84h */ case    0:  		/* li R3, 0 */
		/* 82121A84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121A84h case    0:*/		return 0x82121A88;
	}
	return 0x82121A88;
} // Block from 82121A84h-82121A88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121A88);
		  /* 82121A88h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82121A88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82121A88h case    0:*/		return 0x82121A8C;
		  /* 82121A8Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82121A8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121A8Ch case    1:*/		return 0x82121A90;
		  /* 82121A90h */ case    2:  		/* stw R3, <#[R11 + 12]> */
		/* 82121A90h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 82121A90h case    2:*/		return 0x82121A94;
		  /* 82121A94h */ case    3:  		/* bc 12, CR6_EQ, -428 */
		/* 82121A94h case    3:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 82121A94h case    3:*/		return 0x82121A98;
		  /* 82121A98h */ case    4:  		/* cmplwi CR6, R24, 0 */
		/* 82121A98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82121A98h case    4:*/		return 0x82121A9C;
		  /* 82121A9Ch */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 82121A9Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82121AC8;  }
		/* 82121A9Ch case    5:*/		return 0x82121AA0;
	}
	return 0x82121AA0;
} // Block from 82121A88h-82121AA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82121AA0h
// Function '?TypeDim@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121AA0);
		  /* 82121AA0h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 82121AA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82121AA0h case    0:*/		return 0x82121AA4;
		  /* 82121AA4h */ case    1:  		/* mr R3, R24 */
		/* 82121AA4h case    1:*/		regs.R3 = regs.R24;
		/* 82121AA4h case    1:*/		return 0x82121AA8;
		  /* 82121AA8h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121AA8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121AA8h case    2:*/		return 0x82121AAC;
		  /* 82121AACh */ case    3:  		/* mtspr CTR, R11 */
		/* 82121AACh case    3:*/		regs.CTR = regs.R11;
		/* 82121AACh case    3:*/		return 0x82121AB0;
		  /* 82121AB0h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82121AB0h case    4:*/		if ( 1 ) { regs.LR = 0x82121AB4; return (uint32)regs.CTR; }
		/* 82121AB0h case    4:*/		return 0x82121AB4;
		  /* 82121AB4h */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 82121AB4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82121AB4h case    5:*/		return 0x82121AB8;
		  /* 82121AB8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82121AB8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121AB8h case    6:*/		return 0x82121ABC;
		  /* 82121ABCh */ case    7:  		/* lwz R11, <#[R11 + 12]> */
		/* 82121ABCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82121ABCh case    7:*/		return 0x82121AC0;
		  /* 82121AC0h */ case    8:  		/* stw R3, <#[R11 + 8]> */
		/* 82121AC0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82121AC0h case    8:*/		return 0x82121AC4;
		  /* 82121AC4h */ case    9:  		/* bc 12, CR0_EQ, -476 */
		/* 82121AC4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821218E8;  }
		/* 82121AC4h case    9:*/		return 0x82121AC8;
	}
	return 0x82121AC8;
} // Block from 82121AA0h-82121AC8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82121AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121AC8);
		  /* 82121AC8h */ case    0:  		/* li R3, 20 */
		/* 82121AC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82121AC8h case    0:*/		return 0x82121ACC;
		  /* 82121ACCh */ case    1:  		/* bl -362660 */
		/* 82121ACCh case    1:*/		regs.LR = 0x82121AD0; return 0x820C9228;
		/* 82121ACCh case    1:*/		return 0x82121AD0;
		  /* 82121AD0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82121AD0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121AD0h case    2:*/		return 0x82121AD4;
		  /* 82121AD4h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 82121AD4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82121AEC;  }
		/* 82121AD4h case    3:*/		return 0x82121AD8;
		  /* 82121AD8h */ case    4:  		/* mr R6, R30 */
		/* 82121AD8h case    4:*/		regs.R6 = regs.R30;
		/* 82121AD8h case    4:*/		return 0x82121ADC;
		  /* 82121ADCh */ case    5:  		/* li R5, 0 */
		/* 82121ADCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82121ADCh case    5:*/		return 0x82121AE0;
		  /* 82121AE0h */ case    6:  		/* li R4, 0 */
		/* 82121AE0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121AE0h case    6:*/		return 0x82121AE4;
		  /* 82121AE4h */ case    7:  		/* bl -362228 */
		/* 82121AE4h case    7:*/		regs.LR = 0x82121AE8; return 0x820C93F0;
		/* 82121AE4h case    7:*/		return 0x82121AE8;
		  /* 82121AE8h */ case    8:  		/* b 8 */
		/* 82121AE8h case    8:*/		return 0x82121AF0;
		/* 82121AE8h case    8:*/		return 0x82121AEC;
	}
	return 0x82121AEC;
} // Block from 82121AC8h-82121AECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82121AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121AEC);
		  /* 82121AECh */ case    0:  		/* li R3, 0 */
		/* 82121AECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121AECh case    0:*/		return 0x82121AF0;
	}
	return 0x82121AF0;
} // Block from 82121AECh-82121AF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121AF0);
		  /* 82121AF0h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 82121AF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82121AF0h case    0:*/		return 0x82121AF4;
		  /* 82121AF4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82121AF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121AF4h case    1:*/		return 0x82121AF8;
		  /* 82121AF8h */ case    2:  		/* stw R3, <#[R11 + 12]> */
		/* 82121AF8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 82121AF8h case    2:*/		return 0x82121AFC;
		  /* 82121AFCh */ case    3:  		/* bc 12, CR6_EQ, -532 */
		/* 82121AFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821218E8;  }
		/* 82121AFCh case    3:*/		return 0x82121B00;
		  /* 82121B00h */ case    4:  		/* cmplwi CR6, R16, 0 */
		/* 82121B00h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82121B00h case    4:*/		return 0x82121B04;
		  /* 82121B04h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 82121B04h case    5:*/		if ( regs.CR[6].eq ) { return 0x82121B54;  }
		/* 82121B04h case    5:*/		return 0x82121B08;
		  /* 82121B08h */ case    6:  		/* cmplw CR6, R19, R24 */
		/* 82121B08h case    6:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R24);
		/* 82121B08h case    6:*/		return 0x82121B0C;
		  /* 82121B0Ch */ case    7:  		/* bc 12, CR6_EQ, 108 */
		/* 82121B0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82121B78;  }
		/* 82121B0Ch case    7:*/		return 0x82121B10;
		  /* 82121B10h */ case    8:  		/* mr R5, R24 */
		/* 82121B10h case    8:*/		regs.R5 = regs.R24;
		/* 82121B10h case    8:*/		return 0x82121B14;
		  /* 82121B14h */ case    9:  		/* mr R4, R19 */
		/* 82121B14h case    9:*/		regs.R4 = regs.R19;
		/* 82121B14h case    9:*/		return 0x82121B18;
		  /* 82121B18h */ case   10:  		/* mr R3, R21 */
		/* 82121B18h case   10:*/		regs.R3 = regs.R21;
		/* 82121B18h case   10:*/		return 0x82121B1C;
		  /* 82121B1Ch */ case   11:  		/* bl -38948 */
		/* 82121B1Ch case   11:*/		regs.LR = 0x82121B20; return 0x821182F8;
		/* 82121B1Ch case   11:*/		return 0x82121B20;
		  /* 82121B20h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82121B20h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121B20h case   12:*/		return 0x82121B24;
		  /* 82121B24h */ case   13:  		/* bc 4, CR0_EQ, 84 */
		/* 82121B24h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82121B78;  }
		/* 82121B24h case   13:*/		return 0x82121B28;
		  /* 82121B28h */ case   14:  		/* li R7, 0 */
		/* 82121B28h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121B28h case   14:*/		return 0x82121B2C;
		  /* 82121B2Ch */ case   15:  		/* li R6, 0 */
		/* 82121B2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121B2Ch case   15:*/		return 0x82121B30;
		  /* 82121B30h */ case   16:  		/* mr R5, R16 */
		/* 82121B30h case   16:*/		regs.R5 = regs.R16;
		/* 82121B30h case   16:*/		return 0x82121B34;
		  /* 82121B34h */ case   17:  		/* mr R4, R24 */
		/* 82121B34h case   17:*/		regs.R4 = regs.R24;
		/* 82121B34h case   17:*/		return 0x82121B38;
		  /* 82121B38h */ case   18:  		/* mr R3, R21 */
		/* 82121B38h case   18:*/		regs.R3 = regs.R21;
		/* 82121B38h case   18:*/		return 0x82121B3C;
		  /* 82121B3Ch */ case   19:  		/* bl -2276 */
		/* 82121B3Ch case   19:*/		regs.LR = 0x82121B40; return 0x82121258;
		/* 82121B3Ch case   19:*/		return 0x82121B40;
		  /* 82121B40h */ case   20:  		/* lwz R11, <#[R31 + 32]> */
		/* 82121B40h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82121B40h case   20:*/		return 0x82121B44;
		  /* 82121B44h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 82121B44h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121B44h case   21:*/		return 0x82121B48;
		  /* 82121B48h */ case   22:  		/* lwz R11, <#[R11 + 12]> */
		/* 82121B48h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82121B48h case   22:*/		return 0x82121B4C;
		  /* 82121B4Ch */ case   23:  		/* stw R3, <#[R11 + 8]> */
		/* 82121B4Ch case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82121B4Ch case   23:*/		return 0x82121B50;
		  /* 82121B50h */ case   24:  		/* bc 12, CR0_EQ, -616 */
		/* 82121B50h case   24:*/		if ( regs.CR[0].eq ) { return 0x821218E8;  }
		/* 82121B50h case   24:*/		return 0x82121B54;
	}
	return 0x82121B54;
} // Block from 82121AF0h-82121B54h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82121B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121B54);
		  /* 82121B54h */ case    0:  		/* mr R4, R31 */
		/* 82121B54h case    0:*/		regs.R4 = regs.R31;
		/* 82121B54h case    0:*/		return 0x82121B58;
		  /* 82121B58h */ case    1:  		/* mr R3, R21 */
		/* 82121B58h case    1:*/		regs.R3 = regs.R21;
		/* 82121B58h case    1:*/		return 0x82121B5C;
		  /* 82121B5Ch */ case    2:  		/* bl -23364 */
		/* 82121B5Ch case    2:*/		regs.LR = 0x82121B60; return 0x8211C018;
		/* 82121B5Ch case    2:*/		return 0x82121B60;
		  /* 82121B60h */ case    3:  		/* mr R4, R18 */
		/* 82121B60h case    3:*/		regs.R4 = regs.R18;
		/* 82121B60h case    3:*/		return 0x82121B64;
		  /* 82121B64h */ case    4:  		/* mr R3, R21 */
		/* 82121B64h case    4:*/		regs.R3 = regs.R21;
		/* 82121B64h case    4:*/		return 0x82121B68;
		  /* 82121B68h */ case    5:  		/* bl -23376 */
		/* 82121B68h case    5:*/		regs.LR = 0x82121B6C; return 0x8211C018;
		/* 82121B68h case    5:*/		return 0x82121B6C;
	}
	return 0x82121B6C;
} // Block from 82121B54h-82121B6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82121B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121B6C);
		  /* 82121B6Ch */ case    0:  		/* mr R3, R18 */
		/* 82121B6Ch case    0:*/		regs.R3 = regs.R18;
		/* 82121B6Ch case    0:*/		return 0x82121B70;
	}
	return 0x82121B70;
} // Block from 82121B6Ch-82121B70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121B70);
		  /* 82121B70h */ case    0:  		/* addi R1, R1, 256 */
		/* 82121B70h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82121B70h case    0:*/		return 0x82121B74;
		  /* 82121B74h */ case    1:  		/* b -592124 */
		/* 82121B74h case    1:*/		return 0x82091278;
		/* 82121B74h case    1:*/		return 0x82121B78;
	}
	return 0x82121B78;
} // Block from 82121B70h-82121B78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121B78h
// Function '?VariableExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121B78);
		  /* 82121B78h */ case    0:  		/* mr R3, R16 */
		/* 82121B78h case    0:*/		regs.R3 = regs.R16;
		/* 82121B78h case    0:*/		return 0x82121B7C;
		  /* 82121B7Ch */ case    1:  		/* bl -362516 */
		/* 82121B7Ch case    1:*/		regs.LR = 0x82121B80; return 0x820C9368;
		/* 82121B7Ch case    1:*/		return 0x82121B80;
		  /* 82121B80h */ case    2:  		/* b -64 */
		/* 82121B80h case    2:*/		return 0x82121B40;
		/* 82121B80h case    2:*/		return 0x82121B84;
		  /* 82121B84h */ case    3:  		/* nop */
		/* 82121B84h case    3:*/		cpu::op::nop();
		/* 82121B84h case    3:*/		return 0x82121B88;
	}
	return 0x82121B88;
} // Block from 82121B78h-82121B88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121B88);
		  /* 82121B88h */ case    0:  		/* mfspr R12, LR */
		/* 82121B88h case    0:*/		regs.R12 = regs.LR;
		/* 82121B88h case    0:*/		return 0x82121B8C;
		  /* 82121B8Ch */ case    1:  		/* bl -592192 */
		/* 82121B8Ch case    1:*/		regs.LR = 0x82121B90; return 0x8209124C;
		/* 82121B8Ch case    1:*/		return 0x82121B90;
		  /* 82121B90h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82121B90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82121B90h case    2:*/		return 0x82121B94;
		  /* 82121B94h */ case    3:  		/* mr R25, R3 */
		/* 82121B94h case    3:*/		regs.R25 = regs.R3;
		/* 82121B94h case    3:*/		return 0x82121B98;
		  /* 82121B98h */ case    4:  		/* mr R28, R4 */
		/* 82121B98h case    4:*/		regs.R28 = regs.R4;
		/* 82121B98h case    4:*/		return 0x82121B9C;
		  /* 82121B9Ch */ case    5:  		/* mr R26, R5 */
		/* 82121B9Ch case    5:*/		regs.R26 = regs.R5;
		/* 82121B9Ch case    5:*/		return 0x82121BA0;
		  /* 82121BA0h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 82121BA0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82121BA0h case    6:*/		return 0x82121BA4;
		  /* 82121BA4h */ case    7:  		/* bc 12, CR6_EQ, 672 */
		/* 82121BA4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121BA4h case    7:*/		return 0x82121BA8;
		  /* 82121BA8h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 82121BA8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82121BA8h case    8:*/		return 0x82121BAC;
		  /* 82121BACh */ case    9:  		/* cmpwi CR6, R11, 14 */
		/* 82121BACh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121BACh case    9:*/		return 0x82121BB0;
		  /* 82121BB0h */ case   10:  		/* bc 4, CR6_EQ, 660 */
		/* 82121BB0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121BB0h case   10:*/		return 0x82121BB4;
		  /* 82121BB4h */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 82121BB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82121BB4h case   11:*/		return 0x82121BB8;
		  /* 82121BB8h */ case   12:  		/* bc 12, CR6_EQ, 652 */
		/* 82121BB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121BB8h case   12:*/		return 0x82121BBC;
		  /* 82121BBCh */ case   13:  		/* lwz R11, <#[R5 + 4]> */
		/* 82121BBCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82121BBCh case   13:*/		return 0x82121BC0;
		  /* 82121BC0h */ case   14:  		/* cmpwi CR6, R11, 14 */
		/* 82121BC0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121BC0h case   14:*/		return 0x82121BC4;
		  /* 82121BC4h */ case   15:  		/* bc 4, CR6_EQ, 640 */
		/* 82121BC4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121BC4h case   15:*/		return 0x82121BC8;
		  /* 82121BC8h */ case   16:  		/* li R3, 88 */
		/* 82121BC8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82121BC8h case   16:*/		return 0x82121BCC;
		  /* 82121BCCh */ case   17:  		/* addi R27, R5, 48 */
		/* 82121BCCh case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R5,0x30);
		/* 82121BCCh case   17:*/		return 0x82121BD0;
		  /* 82121BD0h */ case   18:  		/* bl -362920 */
		/* 82121BD0h case   18:*/		regs.LR = 0x82121BD4; return 0x820C9228;
		/* 82121BD0h case   18:*/		return 0x82121BD4;
		  /* 82121BD4h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 82121BD4h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121BD4h case   19:*/		return 0x82121BD8;
		  /* 82121BD8h */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 82121BD8h case   20:*/		if ( regs.CR[0].eq ) { return 0x82121C00;  }
		/* 82121BD8h case   20:*/		return 0x82121BDC;
		  /* 82121BDCh */ case   21:  		/* mr R9, R27 */
		/* 82121BDCh case   21:*/		regs.R9 = regs.R27;
		/* 82121BDCh case   21:*/		return 0x82121BE0;
		  /* 82121BE0h */ case   22:  		/* li R8, 1 */
		/* 82121BE0h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82121BE0h case   22:*/		return 0x82121BE4;
		  /* 82121BE4h */ case   23:  		/* li R7, 0 */
		/* 82121BE4h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121BE4h case   23:*/		return 0x82121BE8;
		  /* 82121BE8h */ case   24:  		/* li R6, 0 */
		/* 82121BE8h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121BE8h case   24:*/		return 0x82121BEC;
		  /* 82121BECh */ case   25:  		/* li R5, 28 */
		/* 82121BECh case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 82121BECh case   25:*/		return 0x82121BF0;
		  /* 82121BF0h */ case   26:  		/* li R4, 0 */
		/* 82121BF0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121BF0h case   26:*/		return 0x82121BF4;
		  /* 82121BF4h */ case   27:  		/* bl -351340 */
		/* 82121BF4h case   27:*/		regs.LR = 0x82121BF8; return 0x820CBF88;
		/* 82121BF4h case   27:*/		return 0x82121BF8;
		  /* 82121BF8h */ case   28:  		/* mr R30, R3 */
		/* 82121BF8h case   28:*/		regs.R30 = regs.R3;
		/* 82121BF8h case   28:*/		return 0x82121BFC;
		  /* 82121BFCh */ case   29:  		/* b 8 */
		/* 82121BFCh case   29:*/		return 0x82121C04;
		/* 82121BFCh case   29:*/		return 0x82121C00;
	}
	return 0x82121C00;
} // Block from 82121B88h-82121C00h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82121C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121C00);
		  /* 82121C00h */ case    0:  		/* li R30, 0 */
		/* 82121C00h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82121C00h case    0:*/		return 0x82121C04;
	}
	return 0x82121C04;
} // Block from 82121C00h-82121C04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121C04);
		  /* 82121C04h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82121C04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82121C04h case    0:*/		return 0x82121C08;
		  /* 82121C08h */ case    1:  		/* bc 12, CR6_EQ, 572 */
		/* 82121C08h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121C08h case    1:*/		return 0x82121C0C;
		  /* 82121C0Ch */ case    2:  		/* lwz R31, <#[R28 + 16]> */
		/* 82121C0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000010) );
		/* 82121C0Ch case    2:*/		return 0x82121C10;
		  /* 82121C10h */ case    3:  		/* lwz R29, <#[R26 + 16]> */
		/* 82121C10h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000010) );
		/* 82121C10h case    3:*/		return 0x82121C14;
		  /* 82121C14h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82121C14h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82121C14h case    4:*/		return 0x82121C18;
		  /* 82121C18h */ case    5:  		/* bc 12, CR6_EQ, 532 */
		/* 82121C18h case    5:*/		if ( regs.CR[6].eq ) { return 0x82121E2C;  }
		/* 82121C18h case    5:*/		return 0x82121C1C;
		  /* 82121C1Ch */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 82121C1Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82121C1Ch case    6:*/		return 0x82121C20;
		  /* 82121C20h */ case    7:  		/* cmpwi CR6, R11, 8 */
		/* 82121C20h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82121C20h case    7:*/		return 0x82121C24;
		  /* 82121C24h */ case    8:  		/* bc 4, CR6_EQ, 52 */
		/* 82121C24h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82121C58;  }
		/* 82121C24h case    8:*/		return 0x82121C28;
		  /* 82121C28h */ case    9:  		/* lwz R11, <#[R31 + 16]> */
		/* 82121C28h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82121C28h case    9:*/		return 0x82121C2C;
		  /* 82121C2Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82121C2Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82121C2Ch case   10:*/		return 0x82121C30;
		  /* 82121C30h */ case   11:  		/* bc 12, CR6_EQ, 240 */
		/* 82121C30h case   11:*/		if ( regs.CR[6].eq ) { return 0x82121D20;  }
		/* 82121C30h case   11:*/		return 0x82121C34;
		  /* 82121C34h */ case   12:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 82121C34h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 82121C34h case   12:*/		return 0x82121C38;
		  /* 82121C38h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 82121C38h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82121C38h case   13:*/		return 0x82121C3C;
		  /* 82121C3Ch */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121C3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121C3Ch case   14:*/		return 0x82121C40;
		  /* 82121C40h */ case   15:  		/* mtspr CTR, R11 */
		/* 82121C40h case   15:*/		regs.CTR = regs.R11;
		/* 82121C40h case   15:*/		return 0x82121C44;
		  /* 82121C44h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82121C44h case   16:*/		if ( 1 ) { regs.LR = 0x82121C48; return (uint32)regs.CTR; }
		/* 82121C44h case   16:*/		return 0x82121C48;
		  /* 82121C48h */ case   17:  		/* stw R3, <#[R30 + 16]> */
		/* 82121C48h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82121C48h case   17:*/		return 0x82121C4C;
		  /* 82121C4Ch */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 82121C4Ch case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121C4Ch case   18:*/		return 0x82121C50;
		  /* 82121C50h */ case   19:  		/* bc 12, CR0_EQ, 500 */
		/* 82121C50h case   19:*/		if ( regs.CR[0].eq ) { return 0x82121E44;  }
		/* 82121C50h case   19:*/		return 0x82121C54;
		  /* 82121C54h */ case   20:  		/* b 204 */
		/* 82121C54h case   20:*/		return 0x82121D20;
		/* 82121C54h case   20:*/		return 0x82121C58;
	}
	return 0x82121C58;
} // Block from 82121C04h-82121C58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82121C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121C58);
		  /* 82121C58h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 82121C58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82121C58h case    0:*/		return 0x82121C5C;
		  /* 82121C5Ch */ case    1:  		/* bc 4, CR6_EQ, 464 */
		/* 82121C5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82121E2C;  }
		/* 82121C5Ch case    1:*/		return 0x82121C60;
		  /* 82121C60h */ case    2:  		/* lwz R10, <#[R31 + 16]> */
		/* 82121C60h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82121C60h case    2:*/		return 0x82121C64;
		  /* 82121C64h */ case    3:  		/* cmpwi CR6, R10, 1 */
		/* 82121C64h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82121C64h case    3:*/		return 0x82121C68;
		  /* 82121C68h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82121C68h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82121C88;  }
		/* 82121C68h case    4:*/		return 0x82121C6C;
		  /* 82121C6Ch */ case    5:  		/* li R3, 40 */
		/* 82121C6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82121C6Ch case    5:*/		return 0x82121C70;
		  /* 82121C70h */ case    6:  		/* bl -363080 */
		/* 82121C70h case    6:*/		regs.LR = 0x82121C74; return 0x820C9228;
		/* 82121C70h case    6:*/		return 0x82121C74;
		  /* 82121C74h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82121C74h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121C74h case    7:*/		return 0x82121C78;
		  /* 82121C78h */ case    8:  		/* bc 12, CR0_EQ, 152 */
		/* 82121C78h case    8:*/		if ( regs.CR[0].eq ) { return 0x82121D10;  }
		/* 82121C78h case    8:*/		return 0x82121C7C;
		  /* 82121C7Ch */ case    9:  		/* lwz R11, <#[R31 + 36]> */
		/* 82121C7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121C7Ch case    9:*/		return 0x82121C80;
		  /* 82121C80h */ case   10:  		/* rlwinm R9, R11, 0, 22, 22 */
		/* 82121C80h case   10:*/		cpu::op::rlwinm<0,0,22,22>(regs,&regs.R9,regs.R11);
		/* 82121C80h case   10:*/		return 0x82121C84;
		  /* 82121C84h */ case   11:  		/* b 112 */
		/* 82121C84h case   11:*/		return 0x82121CF4;
		/* 82121C84h case   11:*/		return 0x82121C88;
	}
	return 0x82121C88;
} // Block from 82121C58h-82121C88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82121C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121C88);
		  /* 82121C88h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 82121C88h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82121C88h case    0:*/		return 0x82121C8C;
		  /* 82121C8Ch */ case    1:  		/* bc 4, CR6_EQ, 416 */
		/* 82121C8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82121E2C;  }
		/* 82121C8Ch case    1:*/		return 0x82121C90;
		  /* 82121C90h */ case    2:  		/* lwz R10, <#[R31 + 16]> */
		/* 82121C90h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82121C90h case    2:*/		return 0x82121C94;
		  /* 82121C94h */ case    3:  		/* cmpwi CR6, R10, 2 */
		/* 82121C94h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 82121C94h case    3:*/		return 0x82121C98;
		  /* 82121C98h */ case    4:  		/* bc 4, CR6_EQ, 40 */
		/* 82121C98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82121CC0;  }
		/* 82121C98h case    4:*/		return 0x82121C9C;
		  /* 82121C9Ch */ case    5:  		/* li R3, 40 */
		/* 82121C9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82121C9Ch case    5:*/		return 0x82121CA0;
		  /* 82121CA0h */ case    6:  		/* bl -363128 */
		/* 82121CA0h case    6:*/		regs.LR = 0x82121CA4; return 0x820C9228;
		/* 82121CA0h case    6:*/		return 0x82121CA4;
		  /* 82121CA4h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82121CA4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121CA4h case    7:*/		return 0x82121CA8;
		  /* 82121CA8h */ case    8:  		/* bc 12, CR0_EQ, 104 */
		/* 82121CA8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82121D10;  }
		/* 82121CA8h case    8:*/		return 0x82121CAC;
		  /* 82121CACh */ case    9:  		/* lwz R11, <#[R31 + 36]> */
		/* 82121CACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121CACh case    9:*/		return 0x82121CB0;
		  /* 82121CB0h */ case   10:  		/* li R4, 1 */
		/* 82121CB0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82121CB0h case   10:*/		return 0x82121CB4;
		  /* 82121CB4h */ case   11:  		/* lwz R8, <#[R31 + 32]> */
		/* 82121CB4h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82121CB4h case   11:*/		return 0x82121CB8;
		  /* 82121CB8h */ case   12:  		/* rlwinm R9, R11, 0, 22, 22 */
		/* 82121CB8h case   12:*/		cpu::op::rlwinm<0,0,22,22>(regs,&regs.R9,regs.R11);
		/* 82121CB8h case   12:*/		return 0x82121CBC;
		  /* 82121CBCh */ case   13:  		/* b 64 */
		/* 82121CBCh case   13:*/		return 0x82121CFC;
		/* 82121CBCh case   13:*/		return 0x82121CC0;
	}
	return 0x82121CC0;
} // Block from 82121C88h-82121CC0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82121CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121CC0);
		  /* 82121CC0h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 82121CC0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82121CC0h case    0:*/		return 0x82121CC4;
		  /* 82121CC4h */ case    1:  		/* bc 4, CR6_EQ, 360 */
		/* 82121CC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82121E2C;  }
		/* 82121CC4h case    1:*/		return 0x82121CC8;
		  /* 82121CC8h */ case    2:  		/* lwz R11, <#[R31 + 36]> */
		/* 82121CC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121CC8h case    2:*/		return 0x82121CCC;
		  /* 82121CCCh */ case    3:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 82121CCCh case    3:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 82121CCCh case    3:*/		return 0x82121CD0;
		  /* 82121CD0h */ case    4:  		/* bc 12, CR0_EQ, 348 */
		/* 82121CD0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82121E2C;  }
		/* 82121CD0h case    4:*/		return 0x82121CD4;
		  /* 82121CD4h */ case    5:  		/* li R3, 40 */
		/* 82121CD4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82121CD4h case    5:*/		return 0x82121CD8;
		  /* 82121CD8h */ case    6:  		/* bl -363184 */
		/* 82121CD8h case    6:*/		regs.LR = 0x82121CDC; return 0x820C9228;
		/* 82121CD8h case    6:*/		return 0x82121CDC;
		  /* 82121CDCh */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82121CDCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121CDCh case    7:*/		return 0x82121CE0;
		  /* 82121CE0h */ case    8:  		/* bc 12, CR0_EQ, 48 */
		/* 82121CE0h case    8:*/		if ( regs.CR[0].eq ) { return 0x82121D10;  }
		/* 82121CE0h case    8:*/		return 0x82121CE4;
		  /* 82121CE4h */ case    9:  		/* lwz R11, <#[R31 + 36]> */
		/* 82121CE4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121CE4h case    9:*/		return 0x82121CE8;
		  /* 82121CE8h */ case   10:  		/* rlwinm R9, R11, 0, 10, 22 */
		/* 82121CE8h case   10:*/		cpu::op::rlwinm<0,0,10,22>(regs,&regs.R9,regs.R11);
		/* 82121CE8h case   10:*/		return 0x82121CEC;
		  /* 82121CECh */ case   11:  		/* rlwinm R9, R9, 0, 22, 10 */
		/* 82121CECh case   11:*/		cpu::op::rlwinm<0,0,22,10>(regs,&regs.R9,regs.R9);
		/* 82121CECh case   11:*/		return 0x82121CF0;
		  /* 82121CF0h */ case   12:  		/* rldicl R9, R9, 0, 32 */
		/* 82121CF0h case   12:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 82121CF0h case   12:*/		return 0x82121CF4;
	}
	return 0x82121CF4;
} // Block from 82121CC0h-82121CF4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82121CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121CF4);
		  /* 82121CF4h */ case    0:  		/* li R8, 1 */
		/* 82121CF4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82121CF4h case    0:*/		return 0x82121CF8;
		  /* 82121CF8h */ case    1:  		/* li R4, 0 */
		/* 82121CF8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121CF8h case    1:*/		return 0x82121CFC;
	}
	return 0x82121CFC;
} // Block from 82121CF4h-82121CFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121CFC);
		  /* 82121CFCh */ case    0:  		/* li R7, 1 */
		/* 82121CFCh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82121CFCh case    0:*/		return 0x82121D00;
		  /* 82121D00h */ case    1:  		/* lwz R5, <#[R31 + 20]> */
		/* 82121D00h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82121D00h case    1:*/		return 0x82121D04;
		  /* 82121D04h */ case    2:  		/* li R6, 0 */
		/* 82121D04h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121D04h case    2:*/		return 0x82121D08;
		  /* 82121D08h */ case    3:  		/* bl -356488 */
		/* 82121D08h case    3:*/		regs.LR = 0x82121D0C; return 0x820CAC80;
		/* 82121D08h case    3:*/		return 0x82121D0C;
		  /* 82121D0Ch */ case    4:  		/* b 8 */
		/* 82121D0Ch case    4:*/		return 0x82121D14;
		/* 82121D0Ch case    4:*/		return 0x82121D10;
	}
	return 0x82121D10;
} // Block from 82121CFCh-82121D10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82121D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121D10);
		  /* 82121D10h */ case    0:  		/* li R3, 0 */
		/* 82121D10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121D10h case    0:*/		return 0x82121D14;
	}
	return 0x82121D14;
} // Block from 82121D10h-82121D14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121D14);
		  /* 82121D14h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 82121D14h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82121D14h case    0:*/		return 0x82121D18;
		  /* 82121D18h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82121D18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82121D18h case    1:*/		return 0x82121D1C;
		  /* 82121D1Ch */ case    2:  		/* bc 12, CR6_EQ, 296 */
		/* 82121D1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121D1Ch case    2:*/		return 0x82121D20;
	}
	return 0x82121D20;
} // Block from 82121D14h-82121D20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121D20);
		  /* 82121D20h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82121D20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82121D20h case    0:*/		return 0x82121D24;
		  /* 82121D24h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82121D24h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121D40;  }
		/* 82121D24h case    1:*/		return 0x82121D28;
		  /* 82121D28h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 82121D28h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82121D28h case    2:*/		return 0x82121D2C;
		  /* 82121D2Ch */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 82121D2Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82121D2Ch case    3:*/		return 0x82121D30;
		  /* 82121D30h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 82121D30h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82121D40;  }
		/* 82121D30h case    4:*/		return 0x82121D34;
		  /* 82121D34h */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 82121D34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82121D34h case    5:*/		return 0x82121D38;
		  /* 82121D38h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82121D38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82121D38h case    6:*/		return 0x82121D3C;
		  /* 82121D3Ch */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82121D3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82121D50;  }
		/* 82121D3Ch case    7:*/		return 0x82121D40;
	}
	return 0x82121D40;
} // Block from 82121D20h-82121D40h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82121D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121D40);
		  /* 82121D40h */ case    0:  		/* lis R11, -32253 */
		/* 82121D40h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121D40h case    0:*/		return 0x82121D44;
		  /* 82121D44h */ case    1:  		/* li R5, 3051 */
		/* 82121D44h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBEB);
		/* 82121D44h case    1:*/		return 0x82121D48;
		  /* 82121D48h */ case    2:  		/* addi R6, R11, 10512 */
		/* 82121D48h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2910);
		/* 82121D48h case    2:*/		return 0x82121D4C;
		  /* 82121D4Ch */ case    3:  		/* b 236 */
		/* 82121D4Ch case    3:*/		return 0x82121E38;
		/* 82121D4Ch case    3:*/		return 0x82121D50;
	}
	return 0x82121D50;
} // Block from 82121D40h-82121D50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121D50);
		  /* 82121D50h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82121D50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82121D50h case    0:*/		return 0x82121D54;
		  /* 82121D54h */ case    1:  		/* mr R3, R28 */
		/* 82121D54h case    1:*/		regs.R3 = regs.R28;
		/* 82121D54h case    1:*/		return 0x82121D58;
		  /* 82121D58h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121D58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121D58h case    2:*/		return 0x82121D5C;
		  /* 82121D5Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 82121D5Ch case    3:*/		regs.CTR = regs.R11;
		/* 82121D5Ch case    3:*/		return 0x82121D60;
		  /* 82121D60h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82121D60h case    4:*/		if ( 1 ) { regs.LR = 0x82121D64; return (uint32)regs.CTR; }
		/* 82121D60h case    4:*/		return 0x82121D64;
		  /* 82121D64h */ case    5:  		/* stw R3, <#[R30 + 32]> */
		/* 82121D64h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82121D64h case    5:*/		return 0x82121D68;
		  /* 82121D68h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82121D68h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121D68h case    6:*/		return 0x82121D6C;
		  /* 82121D6Ch */ case    7:  		/* bc 12, CR0_EQ, 216 */
		/* 82121D6Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82121E44;  }
		/* 82121D6Ch case    7:*/		return 0x82121D70;
		  /* 82121D70h */ case    8:  		/* li R3, 40 */
		/* 82121D70h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82121D70h case    8:*/		return 0x82121D74;
		  /* 82121D74h */ case    9:  		/* bl -363340 */
		/* 82121D74h case    9:*/		regs.LR = 0x82121D78; return 0x820C9228;
		/* 82121D74h case    9:*/		return 0x82121D78;
		  /* 82121D78h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82121D78h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121D78h case   10:*/		return 0x82121D7C;
		  /* 82121D7Ch */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 82121D7Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x82121DA4;  }
		/* 82121D7Ch case   11:*/		return 0x82121D80;
		  /* 82121D80h */ case   12:  		/* li R9, 0 */
		/* 82121D80h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82121D80h case   12:*/		return 0x82121D84;
		  /* 82121D84h */ case   13:  		/* li R8, 1 */
		/* 82121D84h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82121D84h case   13:*/		return 0x82121D88;
		  /* 82121D88h */ case   14:  		/* li R7, 1 */
		/* 82121D88h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82121D88h case   14:*/		return 0x82121D8C;
		  /* 82121D8Ch */ case   15:  		/* li R6, 0 */
		/* 82121D8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121D8Ch case   15:*/		return 0x82121D90;
		  /* 82121D90h */ case   16:  		/* li R5, 6 */
		/* 82121D90h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82121D90h case   16:*/		return 0x82121D94;
		  /* 82121D94h */ case   17:  		/* li R4, 0 */
		/* 82121D94h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121D94h case   17:*/		return 0x82121D98;
		  /* 82121D98h */ case   18:  		/* bl -356632 */
		/* 82121D98h case   18:*/		regs.LR = 0x82121D9C; return 0x820CAC80;
		/* 82121D98h case   18:*/		return 0x82121D9C;
		  /* 82121D9Ch */ case   19:  		/* mr R31, R3 */
		/* 82121D9Ch case   19:*/		regs.R31 = regs.R3;
		/* 82121D9Ch case   19:*/		return 0x82121DA0;
		  /* 82121DA0h */ case   20:  		/* b 8 */
		/* 82121DA0h case   20:*/		return 0x82121DA8;
		/* 82121DA0h case   20:*/		return 0x82121DA4;
	}
	return 0x82121DA4;
} // Block from 82121D50h-82121DA4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82121DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121DA4);
		  /* 82121DA4h */ case    0:  		/* li R31, 0 */
		/* 82121DA4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82121DA4h case    0:*/		return 0x82121DA8;
	}
	return 0x82121DA8;
} // Block from 82121DA4h-82121DA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121DA8);
		  /* 82121DA8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82121DA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82121DA8h case    0:*/		return 0x82121DAC;
		  /* 82121DACh */ case    1:  		/* bc 12, CR6_EQ, 152 */
		/* 82121DACh case    1:*/		if ( regs.CR[6].eq ) { return 0x82121E44;  }
		/* 82121DACh case    1:*/		return 0x82121DB0;
		  /* 82121DB0h */ case    2:  		/* li R6, 0 */
		/* 82121DB0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121DB0h case    2:*/		return 0x82121DB4;
		  /* 82121DB4h */ case    3:  		/* mr R5, R29 */
		/* 82121DB4h case    3:*/		regs.R5 = regs.R29;
		/* 82121DB4h case    3:*/		return 0x82121DB8;
		  /* 82121DB8h */ case    4:  		/* mr R4, R31 */
		/* 82121DB8h case    4:*/		regs.R4 = regs.R31;
		/* 82121DB8h case    4:*/		return 0x82121DBC;
		  /* 82121DBCh */ case    5:  		/* mr R3, R25 */
		/* 82121DBCh case    5:*/		regs.R3 = regs.R25;
		/* 82121DBCh case    5:*/		return 0x82121DC0;
	}
	return 0x82121DC0;
} // Block from 82121DA8h-82121DC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82121DC0h
// Function '?CastExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0HH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121DC0);
		  /* 82121DC0h */ case    0:  		/* bl -19064 */
		/* 82121DC0h case    0:*/		regs.LR = 0x82121DC4; return 0x8211D348;
		/* 82121DC0h case    0:*/		return 0x82121DC4;
		  /* 82121DC4h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 82121DC4h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82121DC4h case    1:*/		return 0x82121DC8;
		  /* 82121DC8h */ case    2:  		/* mr R3, R25 */
		/* 82121DC8h case    2:*/		regs.R3 = regs.R25;
		/* 82121DC8h case    2:*/		return 0x82121DCC;
		  /* 82121DCCh */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 82121DCCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82121DEC;  }
		/* 82121DCCh case    3:*/		return 0x82121DD0;
		  /* 82121DD0h */ case    4:  		/* li R8, 0 */
		/* 82121DD0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82121DD0h case    4:*/		return 0x82121DD4;
		  /* 82121DD4h */ case    5:  		/* lwz R5, <#[R27 + 8]> */
		/* 82121DD4h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000008) );
		/* 82121DD4h case    5:*/		return 0x82121DD8;
		  /* 82121DD8h */ case    6:  		/* mr R7, R29 */
		/* 82121DD8h case    6:*/		regs.R7 = regs.R29;
		/* 82121DD8h case    6:*/		return 0x82121DDC;
		  /* 82121DDCh */ case    7:  		/* mr R6, R31 */
		/* 82121DDCh case    7:*/		regs.R6 = regs.R31;
		/* 82121DDCh case    7:*/		return 0x82121DE0;
		  /* 82121DE0h */ case    8:  		/* mr R4, R27 */
		/* 82121DE0h case    8:*/		regs.R4 = regs.R27;
		/* 82121DE0h case    8:*/		return 0x82121DE4;
		  /* 82121DE4h */ case    9:  		/* bl -17996 */
		/* 82121DE4h case    9:*/		regs.LR = 0x82121DE8; return 0x8211D798;
		/* 82121DE4h case    9:*/		return 0x82121DE8;
		  /* 82121DE8h */ case   10:  		/* b 92 */
		/* 82121DE8h case   10:*/		return 0x82121E44;
		/* 82121DE8h case   10:*/		return 0x82121DEC;
	}
	return 0x82121DEC;
} // Block from 82121DC0h-82121DECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82121DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121DEC);
		  /* 82121DECh */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 82121DECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121DECh case    0:*/		return 0x82121DF0;
		  /* 82121DF0h */ case    1:  		/* li R7, 0 */
		/* 82121DF0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121DF0h case    1:*/		return 0x82121DF4;
		  /* 82121DF4h */ case    2:  		/* li R6, 0 */
		/* 82121DF4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121DF4h case    2:*/		return 0x82121DF8;
		  /* 82121DF8h */ case    3:  		/* oris R11, R11, 64 */
		/* 82121DF8h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82121DF8h case    3:*/		return 0x82121DFC;
		  /* 82121DFCh */ case    4:  		/* mr R5, R26 */
		/* 82121DFCh case    4:*/		regs.R5 = regs.R26;
		/* 82121DFCh case    4:*/		return 0x82121E00;
		  /* 82121E00h */ case    5:  		/* stw R11, <#[R31 + 36]> */
		/* 82121E00h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82121E00h case    5:*/		return 0x82121E04;
		  /* 82121E04h */ case    6:  		/* mr R4, R31 */
		/* 82121E04h case    6:*/		regs.R4 = regs.R31;
		/* 82121E04h case    6:*/		return 0x82121E08;
		  /* 82121E08h */ case    7:  		/* bl -2992 */
		/* 82121E08h case    7:*/		regs.LR = 0x82121E0C; return 0x82121258;
		/* 82121E08h case    7:*/		return 0x82121E0C;
		  /* 82121E0Ch */ case    8:  		/* stw R3, <#[R30 + 36]> */
		/* 82121E0Ch case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 82121E0Ch case    8:*/		return 0x82121E10;
		  /* 82121E10h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82121E10h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121E10h case    9:*/		return 0x82121E14;
		  /* 82121E14h */ case   10:  		/* bc 12, CR0_EQ, 48 */
		/* 82121E14h case   10:*/		if ( regs.CR[0].eq ) { return 0x82121E44;  }
		/* 82121E14h case   10:*/		return 0x82121E18;
		  /* 82121E18h */ case   11:  		/* mr R4, R30 */
		/* 82121E18h case   11:*/		regs.R4 = regs.R30;
		/* 82121E18h case   11:*/		return 0x82121E1C;
		  /* 82121E1Ch */ case   12:  		/* mr R3, R25 */
		/* 82121E1Ch case   12:*/		regs.R3 = regs.R25;
		/* 82121E1Ch case   12:*/		return 0x82121E20;
		  /* 82121E20h */ case   13:  		/* bl -24072 */
		/* 82121E20h case   13:*/		regs.LR = 0x82121E24; return 0x8211C018;
		/* 82121E20h case   13:*/		return 0x82121E24;
		  /* 82121E24h */ case   14:  		/* mr R3, R30 */
		/* 82121E24h case   14:*/		regs.R3 = regs.R30;
		/* 82121E24h case   14:*/		return 0x82121E28;
		  /* 82121E28h */ case   15:  		/* b 32 */
		/* 82121E28h case   15:*/		return 0x82121E48;
		/* 82121E28h case   15:*/		return 0x82121E2C;
	}
	return 0x82121E2C;
} // Block from 82121DECh-82121E2Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82121E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121E2C);
		  /* 82121E2Ch */ case    0:  		/* lis R11, -32253 */
		/* 82121E2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82121E2Ch case    0:*/		return 0x82121E30;
		  /* 82121E30h */ case    1:  		/* li R5, 3021 */
		/* 82121E30h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCD);
		/* 82121E30h case    1:*/		return 0x82121E34;
		  /* 82121E34h */ case    2:  		/* addi R6, R11, 10496 */
		/* 82121E34h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2900);
		/* 82121E34h case    2:*/		return 0x82121E38;
	}
	return 0x82121E38;
} // Block from 82121E2Ch-82121E38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121E38);
		  /* 82121E38h */ case    0:  		/* mr R4, R27 */
		/* 82121E38h case    0:*/		regs.R4 = regs.R27;
		/* 82121E38h case    0:*/		return 0x82121E3C;
		  /* 82121E3Ch */ case    1:  		/* mr R3, R25 */
		/* 82121E3Ch case    1:*/		regs.R3 = regs.R25;
		/* 82121E3Ch case    1:*/		return 0x82121E40;
		  /* 82121E40h */ case    2:  		/* bl -34208 */
		/* 82121E40h case    2:*/		regs.LR = 0x82121E44; return 0x821198A0;
		/* 82121E40h case    2:*/		return 0x82121E44;
	}
	return 0x82121E44;
} // Block from 82121E38h-82121E44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82121E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121E44);
		  /* 82121E44h */ case    0:  		/* li R3, 0 */
		/* 82121E44h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121E44h case    0:*/		return 0x82121E48;
	}
	return 0x82121E48;
} // Block from 82121E44h-82121E48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121E48);
		  /* 82121E48h */ case    0:  		/* addi R1, R1, 176 */
		/* 82121E48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82121E48h case    0:*/		return 0x82121E4C;
		  /* 82121E4Ch */ case    1:  		/* b -592816 */
		/* 82121E4Ch case    1:*/		return 0x8209129C;
		/* 82121E4Ch case    1:*/		return 0x82121E50;
	}
	return 0x82121E50;
} // Block from 82121E48h-82121E50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82121E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121E50);
		  /* 82121E50h */ case    0:  		/* mfspr R12, LR */
		/* 82121E50h case    0:*/		regs.R12 = regs.LR;
		/* 82121E50h case    0:*/		return 0x82121E54;
		  /* 82121E54h */ case    1:  		/* bl -592924 */
		/* 82121E54h case    1:*/		regs.LR = 0x82121E58; return 0x82091238;
		/* 82121E54h case    1:*/		return 0x82121E58;
		  /* 82121E58h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 82121E58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82121E58h case    2:*/		return 0x82121E5C;
		  /* 82121E5Ch */ case    3:  		/* li R20, 0 */
		/* 82121E5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82121E5Ch case    3:*/		return 0x82121E60;
		  /* 82121E60h */ case    4:  		/* mr R26, R3 */
		/* 82121E60h case    4:*/		regs.R26 = regs.R3;
		/* 82121E60h case    4:*/		return 0x82121E64;
		  /* 82121E64h */ case    5:  		/* mr R31, R4 */
		/* 82121E64h case    5:*/		regs.R31 = regs.R4;
		/* 82121E64h case    5:*/		return 0x82121E68;
		  /* 82121E68h */ case    6:  		/* stw R20, <#[R1 + 128]> */
		/* 82121E68h case    6:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000080) );
		/* 82121E68h case    6:*/		return 0x82121E6C;
		  /* 82121E6Ch */ case    7:  		/* mr R29, R5 */
		/* 82121E6Ch case    7:*/		regs.R29 = regs.R5;
		/* 82121E6Ch case    7:*/		return 0x82121E70;
		  /* 82121E70h */ case    8:  		/* stw R20, <#[R1 + 132]> */
		/* 82121E70h case    8:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000084) );
		/* 82121E70h case    8:*/		return 0x82121E74;
		  /* 82121E74h */ case    9:  		/* mr R28, R6 */
		/* 82121E74h case    9:*/		regs.R28 = regs.R6;
		/* 82121E74h case    9:*/		return 0x82121E78;
		  /* 82121E78h */ case   10:  		/* mr R30, R7 */
		/* 82121E78h case   10:*/		regs.R30 = regs.R7;
		/* 82121E78h case   10:*/		return 0x82121E7C;
		  /* 82121E7Ch */ case   11:  		/* mr R25, R8 */
		/* 82121E7Ch case   11:*/		regs.R25 = regs.R8;
		/* 82121E7Ch case   11:*/		return 0x82121E80;
		  /* 82121E80h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 82121E80h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82121E80h case   12:*/		return 0x82121E84;
		  /* 82121E84h */ case   13:  		/* mr R24, R20 */
		/* 82121E84h case   13:*/		regs.R24 = regs.R20;
		/* 82121E84h case   13:*/		return 0x82121E88;
		  /* 82121E88h */ case   14:  		/* mr R21, R20 */
		/* 82121E88h case   14:*/		regs.R21 = regs.R20;
		/* 82121E88h case   14:*/		return 0x82121E8C;
		  /* 82121E8Ch */ case   15:  		/* mr R27, R20 */
		/* 82121E8Ch case   15:*/		regs.R27 = regs.R20;
		/* 82121E8Ch case   15:*/		return 0x82121E90;
		  /* 82121E90h */ case   16:  		/* mr R22, R20 */
		/* 82121E90h case   16:*/		regs.R22 = regs.R20;
		/* 82121E90h case   16:*/		return 0x82121E94;
		  /* 82121E94h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 82121E94h case   17:*/		if ( regs.CR[6].eq ) { return 0x82121EAC;  }
		/* 82121E94h case   17:*/		return 0x82121E98;
		  /* 82121E98h */ case   18:  		/* lwz R11, <#[R5 + 4]> */
		/* 82121E98h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82121E98h case   18:*/		return 0x82121E9C;
		  /* 82121E9Ch */ case   19:  		/* cmpwi CR6, R11, 14 */
		/* 82121E9Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121E9Ch case   19:*/		return 0x82121EA0;
		  /* 82121EA0h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 82121EA0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82121EAC;  }
		/* 82121EA0h case   20:*/		return 0x82121EA4;
		  /* 82121EA4h */ case   21:  		/* li R3, 0 */
		/* 82121EA4h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82121EA4h case   21:*/		return 0x82121EA8;
		  /* 82121EA8h */ case   22:  		/* b 2140 */
		/* 82121EA8h case   22:*/		return 0x82122704;
		/* 82121EA8h case   22:*/		return 0x82121EAC;
	}
	return 0x82121EAC;
} // Block from 82121E50h-82121EACh (23 instructions)

//////////////////////////////////////////////////////
// Block at 82121EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121EAC);
		  /* 82121EACh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82121EACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82121EACh case    0:*/		return 0x82121EB0;
		  /* 82121EB0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82121EB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121EC8;  }
		/* 82121EB0h case    1:*/		return 0x82121EB4;
		  /* 82121EB4h */ case    2:  		/* lwz R11, <#[R28 + 4]> */
		/* 82121EB4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82121EB4h case    2:*/		return 0x82121EB8;
		  /* 82121EB8h */ case    3:  		/* cmpwi CR6, R11, 14 */
		/* 82121EB8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82121EB8h case    3:*/		return 0x82121EBC;
		  /* 82121EBCh */ case    4:  		/* bc 4, CR6_EQ, -24 */
		/* 82121EBCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82121EA4;  }
		/* 82121EBCh case    4:*/		return 0x82121EC0;
		  /* 82121EC0h */ case    5:  		/* addi R23, R28, 48 */
		/* 82121EC0h case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R28,0x30);
		/* 82121EC0h case    5:*/		return 0x82121EC4;
		  /* 82121EC4h */ case    6:  		/* b 20 */
		/* 82121EC4h case    6:*/		return 0x82121ED8;
		/* 82121EC4h case    6:*/		return 0x82121EC8;
	}
	return 0x82121EC8;
} // Block from 82121EACh-82121EC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82121EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121EC8);
		  /* 82121EC8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82121EC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82121EC8h case    0:*/		return 0x82121ECC;
		  /* 82121ECCh */ case    1:  		/* addi R23, R29, 48 */
		/* 82121ECCh case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R29,0x30);
		/* 82121ECCh case    1:*/		return 0x82121ED0;
		  /* 82121ED0h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82121ED0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82121ED8;  }
		/* 82121ED0h case    2:*/		return 0x82121ED4;
		  /* 82121ED4h */ case    3:  		/* addi R23, R26, 40 */
		/* 82121ED4h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R26,0x28);
		/* 82121ED4h case    3:*/		return 0x82121ED8;
	}
	return 0x82121ED8;
} // Block from 82121EC8h-82121ED8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82121ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121ED8);
		  /* 82121ED8h */ case    0:  		/* li R3, 88 */
		/* 82121ED8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82121ED8h case    0:*/		return 0x82121EDC;
		  /* 82121EDCh */ case    1:  		/* bl -363700 */
		/* 82121EDCh case    1:*/		regs.LR = 0x82121EE0; return 0x820C9228;
		/* 82121EDCh case    1:*/		return 0x82121EE0;
		  /* 82121EE0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82121EE0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121EE0h case    2:*/		return 0x82121EE4;
		  /* 82121EE4h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 82121EE4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82121F0C;  }
		/* 82121EE4h case    3:*/		return 0x82121EE8;
		  /* 82121EE8h */ case    4:  		/* mr R9, R23 */
		/* 82121EE8h case    4:*/		regs.R9 = regs.R23;
		/* 82121EE8h case    4:*/		return 0x82121EEC;
		  /* 82121EECh */ case    5:  		/* mr R8, R30 */
		/* 82121EECh case    5:*/		regs.R8 = regs.R30;
		/* 82121EECh case    5:*/		return 0x82121EF0;
		  /* 82121EF0h */ case    6:  		/* li R7, 0 */
		/* 82121EF0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82121EF0h case    6:*/		return 0x82121EF4;
		  /* 82121EF4h */ case    7:  		/* li R6, 0 */
		/* 82121EF4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82121EF4h case    7:*/		return 0x82121EF8;
		  /* 82121EF8h */ case    8:  		/* mr R5, R31 */
		/* 82121EF8h case    8:*/		regs.R5 = regs.R31;
		/* 82121EF8h case    8:*/		return 0x82121EFC;
		  /* 82121EFCh */ case    9:  		/* li R4, 0 */
		/* 82121EFCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82121EFCh case    9:*/		return 0x82121F00;
		  /* 82121F00h */ case   10:  		/* bl -352120 */
		/* 82121F00h case   10:*/		regs.LR = 0x82121F04; return 0x820CBF88;
		/* 82121F00h case   10:*/		return 0x82121F04;
		  /* 82121F04h */ case   11:  		/* mr R30, R3 */
		/* 82121F04h case   11:*/		regs.R30 = regs.R3;
		/* 82121F04h case   11:*/		return 0x82121F08;
		  /* 82121F08h */ case   12:  		/* b 8 */
		/* 82121F08h case   12:*/		return 0x82121F10;
		/* 82121F08h case   12:*/		return 0x82121F0C;
	}
	return 0x82121F0C;
} // Block from 82121ED8h-82121F0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82121F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121F0C);
		  /* 82121F0Ch */ case    0:  		/* mr R30, R20 */
		/* 82121F0Ch case    0:*/		regs.R30 = regs.R20;
		/* 82121F0Ch case    0:*/		return 0x82121F10;
	}
	return 0x82121F10;
} // Block from 82121F0Ch-82121F10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82121F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121F10);
		  /* 82121F10h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82121F10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82121F10h case    0:*/		return 0x82121F14;
		  /* 82121F14h */ case    1:  		/* bc 12, CR6_EQ, -112 */
		/* 82121F14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121EA4;  }
		/* 82121F14h case    1:*/		return 0x82121F18;
		  /* 82121F18h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82121F18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82121F18h case    2:*/		return 0x82121F1C;
		  /* 82121F1Ch */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 82121F1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82121F40;  }
		/* 82121F1Ch case    3:*/		return 0x82121F20;
		  /* 82121F20h */ case    4:  		/* lwz R11, <#[R29]> */
		/* 82121F20h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82121F20h case    4:*/		return 0x82121F24;
		  /* 82121F24h */ case    5:  		/* mr R3, R29 */
		/* 82121F24h case    5:*/		regs.R3 = regs.R29;
		/* 82121F24h case    5:*/		return 0x82121F28;
		  /* 82121F28h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121F28h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121F28h case    6:*/		return 0x82121F2C;
		  /* 82121F2Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 82121F2Ch case    7:*/		regs.CTR = regs.R11;
		/* 82121F2Ch case    7:*/		return 0x82121F30;
		  /* 82121F30h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82121F30h case    8:*/		if ( 1 ) { regs.LR = 0x82121F34; return (uint32)regs.CTR; }
		/* 82121F30h case    8:*/		return 0x82121F34;
		  /* 82121F34h */ case    9:  		/* stw R3, <#[R30 + 32]> */
		/* 82121F34h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82121F34h case    9:*/		return 0x82121F38;
		  /* 82121F38h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82121F38h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121F38h case   10:*/		return 0x82121F3C;
		  /* 82121F3Ch */ case   11:  		/* bc 12, CR0_EQ, 1984 */
		/* 82121F3Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 82121F3Ch case   11:*/		return 0x82121F40;
	}
	return 0x82121F40;
} // Block from 82121F10h-82121F40h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82121F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121F40);
		  /* 82121F40h */ case    0:  		/* cmpwi CR6, R31, 35 */
		/* 82121F40h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000023);
		/* 82121F40h case    0:*/		return 0x82121F44;
		  /* 82121F44h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 82121F44h case    1:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F44h case    1:*/		return 0x82121F48;
		  /* 82121F48h */ case    2:  		/* cmpwi CR6, R31, 36 */
		/* 82121F48h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000024);
		/* 82121F48h case    2:*/		return 0x82121F4C;
		  /* 82121F4Ch */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 82121F4Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F4Ch case    3:*/		return 0x82121F50;
		  /* 82121F50h */ case    4:  		/* cmpwi CR6, R31, 37 */
		/* 82121F50h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000025);
		/* 82121F50h case    4:*/		return 0x82121F54;
		  /* 82121F54h */ case    5:  		/* bc 12, CR6_EQ, 120 */
		/* 82121F54h case    5:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F54h case    5:*/		return 0x82121F58;
		  /* 82121F58h */ case    6:  		/* cmpwi CR6, R31, 38 */
		/* 82121F58h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000026);
		/* 82121F58h case    6:*/		return 0x82121F5C;
		  /* 82121F5Ch */ case    7:  		/* bc 12, CR6_EQ, 112 */
		/* 82121F5Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F5Ch case    7:*/		return 0x82121F60;
		  /* 82121F60h */ case    8:  		/* cmpwi CR6, R31, 39 */
		/* 82121F60h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000027);
		/* 82121F60h case    8:*/		return 0x82121F64;
		  /* 82121F64h */ case    9:  		/* bc 12, CR6_EQ, 104 */
		/* 82121F64h case    9:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F64h case    9:*/		return 0x82121F68;
		  /* 82121F68h */ case   10:  		/* cmpwi CR6, R31, 45 */
		/* 82121F68h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002D);
		/* 82121F68h case   10:*/		return 0x82121F6C;
		  /* 82121F6Ch */ case   11:  		/* bc 12, CR6_EQ, 96 */
		/* 82121F6Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F6Ch case   11:*/		return 0x82121F70;
		  /* 82121F70h */ case   12:  		/* cmpwi CR6, R31, 46 */
		/* 82121F70h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002E);
		/* 82121F70h case   12:*/		return 0x82121F74;
		  /* 82121F74h */ case   13:  		/* bc 12, CR6_EQ, 88 */
		/* 82121F74h case   13:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F74h case   13:*/		return 0x82121F78;
		  /* 82121F78h */ case   14:  		/* cmpwi CR6, R31, 40 */
		/* 82121F78h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000028);
		/* 82121F78h case   14:*/		return 0x82121F7C;
		  /* 82121F7Ch */ case   15:  		/* bc 12, CR6_EQ, 80 */
		/* 82121F7Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F7Ch case   15:*/		return 0x82121F80;
		  /* 82121F80h */ case   16:  		/* cmpwi CR6, R31, 41 */
		/* 82121F80h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000029);
		/* 82121F80h case   16:*/		return 0x82121F84;
		  /* 82121F84h */ case   17:  		/* bc 12, CR6_EQ, 72 */
		/* 82121F84h case   17:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F84h case   17:*/		return 0x82121F88;
		  /* 82121F88h */ case   18:  		/* cmpwi CR6, R31, 42 */
		/* 82121F88h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002A);
		/* 82121F88h case   18:*/		return 0x82121F8C;
		  /* 82121F8Ch */ case   19:  		/* bc 12, CR6_EQ, 64 */
		/* 82121F8Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F8Ch case   19:*/		return 0x82121F90;
		  /* 82121F90h */ case   20:  		/* cmpwi CR6, R31, 43 */
		/* 82121F90h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002B);
		/* 82121F90h case   20:*/		return 0x82121F94;
		  /* 82121F94h */ case   21:  		/* bc 12, CR6_EQ, 56 */
		/* 82121F94h case   21:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F94h case   21:*/		return 0x82121F98;
		  /* 82121F98h */ case   22:  		/* cmpwi CR6, R31, 44 */
		/* 82121F98h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002C);
		/* 82121F98h case   22:*/		return 0x82121F9C;
		  /* 82121F9Ch */ case   23:  		/* bc 12, CR6_EQ, 48 */
		/* 82121F9Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x82121FCC;  }
		/* 82121F9Ch case   23:*/		return 0x82121FA0;
		  /* 82121FA0h */ case   24:  		/* cmplwi CR6, R28, 0 */
		/* 82121FA0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82121FA0h case   24:*/		return 0x82121FA4;
		  /* 82121FA4h */ case   25:  		/* bc 12, CR6_EQ, 240 */
		/* 82121FA4h case   25:*/		if ( regs.CR[6].eq ) { return 0x82122094;  }
		/* 82121FA4h case   25:*/		return 0x82121FA8;
		  /* 82121FA8h */ case   26:  		/* lwz R11, <#[R28]> */
		/* 82121FA8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82121FA8h case   26:*/		return 0x82121FAC;
		  /* 82121FACh */ case   27:  		/* mr R3, R28 */
		/* 82121FACh case   27:*/		regs.R3 = regs.R28;
		/* 82121FACh case   27:*/		return 0x82121FB0;
		  /* 82121FB0h */ case   28:  		/* lwz R11, <#[R11 + 4]> */
		/* 82121FB0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82121FB0h case   28:*/		return 0x82121FB4;
		  /* 82121FB4h */ case   29:  		/* mtspr CTR, R11 */
		/* 82121FB4h case   29:*/		regs.CTR = regs.R11;
		/* 82121FB4h case   29:*/		return 0x82121FB8;
		  /* 82121FB8h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 82121FB8h case   30:*/		if ( 1 ) { regs.LR = 0x82121FBC; return (uint32)regs.CTR; }
		/* 82121FB8h case   30:*/		return 0x82121FBC;
		  /* 82121FBCh */ case   31:  		/* stw R3, <#[R30 + 36]> */
		/* 82121FBCh case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 82121FBCh case   31:*/		return 0x82121FC0;
		  /* 82121FC0h */ case   32:  		/* cmplwi CR0, R3, 0 */
		/* 82121FC0h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82121FC0h case   32:*/		return 0x82121FC4;
		  /* 82121FC4h */ case   33:  		/* bc 4, CR0_EQ, 208 */
		/* 82121FC4h case   33:*/		if ( !regs.CR[0].eq ) { return 0x82122094;  }
		/* 82121FC4h case   33:*/		return 0x82121FC8;
		  /* 82121FC8h */ case   34:  		/* b 1844 */
		/* 82121FC8h case   34:*/		return 0x821226FC;
		/* 82121FC8h case   34:*/		return 0x82121FCC;
	}
	return 0x82121FCC;
} // Block from 82121F40h-82121FCCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 82121FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82121FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82121FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82121FCC);
		  /* 82121FCCh */ case    0:  		/* addi R11, R31, -35 */
		/* 82121FCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFDD);
		/* 82121FCCh case    0:*/		return 0x82121FD0;
		  /* 82121FD0h */ case    1:  		/* li R4, 8 */
		/* 82121FD0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82121FD0h case    1:*/		return 0x82121FD4;
		  /* 82121FD4h */ case    2:  		/* cmplwi CR6, R11, 11 */
		/* 82121FD4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000B);
		/* 82121FD4h case    2:*/		return 0x82121FD8;
		  /* 82121FD8h */ case    3:  		/* bc 12, CR6_GT, 148 */
		/* 82121FD8h case    3:*/		if ( regs.CR[6].gt ) { return 0x8212206C;  }
		/* 82121FD8h case    3:*/		return 0x82121FDC;
		  /* 82121FDCh */ case    4:  		/* lis R12, -32253 */
		/* 82121FDCh case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82121FDCh case    4:*/		return 0x82121FE0;
		  /* 82121FE0h */ case    5:  		/* addi R12, R12, 5592 */
		/* 82121FE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x15D8);
		/* 82121FE0h case    5:*/		return 0x82121FE4;
		  /* 82121FE4h */ case    6:  		/* lbzx R0, <#[R12 + R11]> */
		/* 82121FE4h case    6:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 82121FE4h case    6:*/		return 0x82121FE8;
		  /* 82121FE8h */ case    7:  		/* lis R12, -32238 */
		/* 82121FE8h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 82121FE8h case    7:*/		return 0x82121FEC;
		  /* 82121FECh */ case    8:  		/* ori R0, R0, 0 */
		/* 82121FECh case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82121FECh case    8:*/		return 0x82121FF0;
		  /* 82121FF0h */ case    9:  		/* addi R12, R12, 8196 */
		/* 82121FF0h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2004);
		/* 82121FF0h case    9:*/		return 0x82121FF4;
		  /* 82121FF4h */ case   10:  		/* ori R0, R0, 0 */
		/* 82121FF4h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82121FF4h case   10:*/		return 0x82121FF8;
		  /* 82121FF8h */ case   11:  		/* add R12, R12, R0 */
		/* 82121FF8h case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82121FF8h case   11:*/		return 0x82121FFC;
		  /* 82121FFCh */ case   12:  		/* mtspr CTR, R12 */
		/* 82121FFCh case   12:*/		regs.CTR = regs.R12;
		/* 82121FFCh case   12:*/		return 0x82122000;
		  /* 82122000h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 82122000h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82122000h case   13:*/		return 0x82122004;
		  /* 82122004h */ case   14:  		/* li R4, 8 */
		/* 82122004h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82122004h case   14:*/		return 0x82122008;
		  /* 82122008h */ case   15:  		/* b 96 */
		/* 82122008h case   15:*/		return 0x82122068;
		/* 82122008h case   15:*/		return 0x8212200C;
		  /* 8212200Ch */ case   16:  		/* li R4, 9 */
		/* 8212200Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 8212200Ch case   16:*/		return 0x82122010;
		  /* 82122010h */ case   17:  		/* b 88 */
		/* 82122010h case   17:*/		return 0x82122068;
		/* 82122010h case   17:*/		return 0x82122014;
		  /* 82122014h */ case   18:  		/* li R4, 10 */
		/* 82122014h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 82122014h case   18:*/		return 0x82122018;
		  /* 82122018h */ case   19:  		/* b 80 */
		/* 82122018h case   19:*/		return 0x82122068;
		/* 82122018h case   19:*/		return 0x8212201C;
		  /* 8212201Ch */ case   20:  		/* li R4, 11 */
		/* 8212201Ch case   20:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 8212201Ch case   20:*/		return 0x82122020;
		  /* 82122020h */ case   21:  		/* b 72 */
		/* 82122020h case   21:*/		return 0x82122068;
		/* 82122020h case   21:*/		return 0x82122024;
		  /* 82122024h */ case   22:  		/* li R4, 12 */
		/* 82122024h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82122024h case   22:*/		return 0x82122028;
		  /* 82122028h */ case   23:  		/* b 64 */
		/* 82122028h case   23:*/		return 0x82122068;
		/* 82122028h case   23:*/		return 0x8212202C;
		  /* 8212202Ch */ case   24:  		/* li R31, 1 */
		/* 8212202Ch case   24:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 8212202Ch case   24:*/		return 0x82122030;
		  /* 82122030h */ case   25:  		/* li R4, 2 */
		/* 82122030h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82122030h case   25:*/		return 0x82122034;
		  /* 82122034h */ case   26:  		/* b 56 */
		/* 82122034h case   26:*/		return 0x8212206C;
		/* 82122034h case   26:*/		return 0x82122038;
		  /* 82122038h */ case   27:  		/* li R31, 1 */
		/* 82122038h case   27:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82122038h case   27:*/		return 0x8212203C;
		  /* 8212203Ch */ case   28:  		/* li R4, 3 */
		/* 8212203Ch case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8212203Ch case   28:*/		return 0x82122040;
		  /* 82122040h */ case   29:  		/* b 44 */
		/* 82122040h case   29:*/		return 0x8212206C;
		/* 82122040h case   29:*/		return 0x82122044;
		  /* 82122044h */ case   30:  		/* li R4, 13 */
		/* 82122044h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 82122044h case   30:*/		return 0x82122048;
		  /* 82122048h */ case   31:  		/* b 32 */
		/* 82122048h case   31:*/		return 0x82122068;
		/* 82122048h case   31:*/		return 0x8212204C;
		  /* 8212204Ch */ case   32:  		/* li R4, 14 */
		/* 8212204Ch case   32:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8212204Ch case   32:*/		return 0x82122050;
		  /* 82122050h */ case   33:  		/* b 24 */
		/* 82122050h case   33:*/		return 0x82122068;
		/* 82122050h case   33:*/		return 0x82122054;
		  /* 82122054h */ case   34:  		/* li R4, 21 */
		/* 82122054h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 82122054h case   34:*/		return 0x82122058;
		  /* 82122058h */ case   35:  		/* b 16 */
		/* 82122058h case   35:*/		return 0x82122068;
		/* 82122058h case   35:*/		return 0x8212205C;
		  /* 8212205Ch */ case   36:  		/* li R4, 22 */
		/* 8212205Ch case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 8212205Ch case   36:*/		return 0x82122060;
		  /* 82122060h */ case   37:  		/* b 8 */
		/* 82122060h case   37:*/		return 0x82122068;
		/* 82122060h case   37:*/		return 0x82122064;
		  /* 82122064h */ case   38:  		/* li R4, 23 */
		/* 82122064h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82122064h case   38:*/		return 0x82122068;
	}
	return 0x82122068;
} // Block from 82121FCCh-82122068h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82122068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122068);
		  /* 82122068h */ case    0:  		/* li R31, 27 */
		/* 82122068h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1B);
		/* 82122068h case    0:*/		return 0x8212206C;
	}
	return 0x8212206C;
} // Block from 82122068h-8212206Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212206Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212206C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212206C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212206C);
		  /* 8212206Ch */ case    0:  		/* li R8, 0 */
		/* 8212206Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212206Ch case    0:*/		return 0x82122070;
		  /* 82122070h */ case    1:  		/* li R7, 0 */
		/* 82122070h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82122070h case    1:*/		return 0x82122074;
		  /* 82122074h */ case    2:  		/* mr R6, R28 */
		/* 82122074h case    2:*/		regs.R6 = regs.R28;
		/* 82122074h case    2:*/		return 0x82122078;
		  /* 82122078h */ case    3:  		/* mr R5, R29 */
		/* 82122078h case    3:*/		regs.R5 = regs.R29;
		/* 82122078h case    3:*/		return 0x8212207C;
		  /* 8212207Ch */ case    4:  		/* mr R3, R26 */
		/* 8212207Ch case    4:*/		regs.R3 = regs.R26;
		/* 8212207Ch case    4:*/		return 0x82122080;
		  /* 82122080h */ case    5:  		/* bl -560 */
		/* 82122080h case    5:*/		regs.LR = 0x82122084; return 0x82121E50;
		/* 82122080h case    5:*/		return 0x82122084;
		  /* 82122084h */ case    6:  		/* stw R3, <#[R30 + 36]> */
		/* 82122084h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 82122084h case    6:*/		return 0x82122088;
		  /* 82122088h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82122088h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122088h case    7:*/		return 0x8212208C;
		  /* 8212208Ch */ case    8:  		/* bc 12, CR0_EQ, 1648 */
		/* 8212208Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 8212208Ch case    8:*/		return 0x82122090;
		  /* 82122090h */ case    9:  		/* stw R31, <#[R30 + 28]> */
		/* 82122090h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 82122090h case    9:*/		return 0x82122094;
	}
	return 0x82122094;
} // Block from 8212206Ch-82122094h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122094);
		  /* 82122094h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 82122094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82122094h case    0:*/		return 0x82122098;
		  /* 82122098h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82122098h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82122098h case    1:*/		return 0x8212209C;
		  /* 8212209Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8212209Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821220B0;  }
		/* 8212209Ch case    2:*/		return 0x821220A0;
		  /* 821220A0h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821220A0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821220A0h case    3:*/		return 0x821220A4;
		  /* 821220A4h */ case    4:  		/* mr R24, R11 */
		/* 821220A4h case    4:*/		regs.R24 = regs.R11;
		/* 821220A4h case    4:*/		return 0x821220A8;
		  /* 821220A8h */ case    5:  		/* mr R27, R11 */
		/* 821220A8h case    5:*/		regs.R27 = regs.R11;
		/* 821220A8h case    5:*/		return 0x821220AC;
		  /* 821220ACh */ case    6:  		/* stw R11, <#[R1 + 128]> */
		/* 821220ACh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821220ACh case    6:*/		return 0x821220B0;
	}
	return 0x821220B0;
} // Block from 82122094h-821220B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821220B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821220B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821220B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821220B0);
		  /* 821220B0h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 821220B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 821220B0h case    0:*/		return 0x821220B4;
		  /* 821220B4h */ case    1:  		/* bc 12, CR6_EQ, 252 */
		/* 821220B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220B4h case    1:*/		return 0x821220B8;
		  /* 821220B8h */ case    2:  		/* cmpwi CR6, R31, 1 */
		/* 821220B8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000001);
		/* 821220B8h case    2:*/		return 0x821220BC;
		  /* 821220BCh */ case    3:  		/* bc 12, CR6_EQ, 244 */
		/* 821220BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220BCh case    3:*/		return 0x821220C0;
		  /* 821220C0h */ case    4:  		/* cmpwi CR6, R31, 26 */
		/* 821220C0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001A);
		/* 821220C0h case    4:*/		return 0x821220C4;
		  /* 821220C4h */ case    5:  		/* bc 12, CR6_EQ, 236 */
		/* 821220C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220C4h case    5:*/		return 0x821220C8;
		  /* 821220C8h */ case    6:  		/* cmpwi CR6, R31, 27 */
		/* 821220C8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001B);
		/* 821220C8h case    6:*/		return 0x821220CC;
		  /* 821220CCh */ case    7:  		/* bc 12, CR6_EQ, 228 */
		/* 821220CCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220CCh case    7:*/		return 0x821220D0;
		  /* 821220D0h */ case    8:  		/* cmpwi CR6, R31, 19 */
		/* 821220D0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000013);
		/* 821220D0h case    8:*/		return 0x821220D4;
		  /* 821220D4h */ case    9:  		/* bc 12, CR6_EQ, 220 */
		/* 821220D4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220D4h case    9:*/		return 0x821220D8;
	}
	return 0x821220D8;
} // Block from 821220B0h-821220D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821220D8h
// Function '?ConditionalExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821220D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821220D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821220D8);
		  /* 821220D8h */ case    0:  		/* cmpwi CR6, R31, 20 */
		/* 821220D8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000014);
		/* 821220D8h case    0:*/		return 0x821220DC;
		  /* 821220DCh */ case    1:  		/* bc 12, CR6_EQ, 212 */
		/* 821220DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821221B0;  }
		/* 821220DCh case    1:*/		return 0x821220E0;
		  /* 821220E0h */ case    2:  		/* cmpwi CR6, R31, 7 */
		/* 821220E0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000007);
		/* 821220E0h case    2:*/		return 0x821220E4;
		  /* 821220E4h */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 821220E4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82122118;  }
		/* 821220E4h case    3:*/		return 0x821220E8;
		  /* 821220E8h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821220E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821220E8h case    4:*/		return 0x821220EC;
		  /* 821220ECh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821220ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x82122108;  }
		/* 821220ECh case    5:*/		return 0x821220F0;
		  /* 821220F0h */ case    6:  		/* lwz R11, <#[R27 + 4]> */
		/* 821220F0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821220F0h case    6:*/		return 0x821220F4;
		  /* 821220F4h */ case    7:  		/* cmpwi CR6, R11, 9 */
		/* 821220F4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821220F4h case    7:*/		return 0x821220F8;
		  /* 821220F8h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 821220F8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82122108;  }
		/* 821220F8h case    8:*/		return 0x821220FC;
		  /* 821220FCh */ case    9:  		/* lwz R11, <#[R27 + 20]> */
		/* 821220FCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821220FCh case    9:*/		return 0x82122100;
		  /* 82122100h */ case   10:  		/* cmplwi CR6, R11, 10 */
		/* 82122100h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 82122100h case   10:*/		return 0x82122104;
		  /* 82122104h */ case   11:  		/* bc 12, CR6_LT, 312 */
		/* 82122104h case   11:*/		if ( regs.CR[6].lt ) { return 0x8212223C;  }
		/* 82122104h case   11:*/		return 0x82122108;
	}
	return 0x82122108;
} // Block from 821220D8h-82122108h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82122108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122108);
		  /* 82122108h */ case    0:  		/* lis R11, -32253 */
		/* 82122108h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122108h case    0:*/		return 0x8212210C;
		  /* 8212210Ch */ case    1:  		/* li R5, 3082 */
		/* 8212210Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC0A);
		/* 8212210Ch case    1:*/		return 0x82122110;
		  /* 82122110h */ case    2:  		/* addi R6, R11, 10788 */
		/* 82122110h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2A24);
		/* 82122110h case    2:*/		return 0x82122114;
		  /* 82122114h */ case    3:  		/* b 1500 */
		/* 82122114h case    3:*/		return 0x821226F0;
		/* 82122114h case    3:*/		return 0x82122118;
	}
	return 0x82122118;
} // Block from 82122108h-82122118h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82122118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122118);
		  /* 82122118h */ case    0:  		/* cmpwi CR6, R31, 13 */
		/* 82122118h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000D);
		/* 82122118h case    0:*/		return 0x8212211C;
		  /* 8212211Ch */ case    1:  		/* bc 12, CR6_EQ, 92 */
		/* 8212211Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82122178;  }
		/* 8212211Ch case    1:*/		return 0x82122120;
		  /* 82122120h */ case    2:  		/* cmpwi CR6, R31, 14 */
		/* 82122120h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000E);
		/* 82122120h case    2:*/		return 0x82122124;
		  /* 82122124h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 82122124h case    3:*/		if ( regs.CR[6].eq ) { return 0x82122178;  }
		/* 82122124h case    3:*/		return 0x82122128;
		  /* 82122128h */ case    4:  		/* cmpwi CR6, R31, 21 */
		/* 82122128h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000015);
		/* 82122128h case    4:*/		return 0x8212212C;
		  /* 8212212Ch */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 8212212Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82122178;  }
		/* 8212212Ch case    5:*/		return 0x82122130;
		  /* 82122130h */ case    6:  		/* cmpwi CR6, R31, 22 */
		/* 82122130h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000016);
		/* 82122130h case    6:*/		return 0x82122134;
		  /* 82122134h */ case    7:  		/* bc 12, CR6_EQ, 68 */
		/* 82122134h case    7:*/		if ( regs.CR[6].eq ) { return 0x82122178;  }
		/* 82122134h case    7:*/		return 0x82122138;
		  /* 82122138h */ case    8:  		/* cmpwi CR6, R31, 23 */
		/* 82122138h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000017);
		/* 82122138h case    8:*/		return 0x8212213C;
		  /* 8212213Ch */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 8212213Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82122178;  }
		/* 8212213Ch case    9:*/		return 0x82122140;
		  /* 82122140h */ case   10:  		/* cmplwi CR6, R27, 0 */
		/* 82122140h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122140h case   10:*/		return 0x82122144;
		  /* 82122144h */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 82122144h case   11:*/		if ( regs.CR[6].eq ) { return 0x82122168;  }
		/* 82122144h case   11:*/		return 0x82122148;
		  /* 82122148h */ case   12:  		/* lwz R11, <#[R27 + 4]> */
		/* 82122148h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82122148h case   12:*/		return 0x8212214C;
		  /* 8212214Ch */ case   13:  		/* cmpwi CR6, R11, 9 */
		/* 8212214Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8212214Ch case   13:*/		return 0x82122150;
		  /* 82122150h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 82122150h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82122168;  }
		/* 82122150h case   14:*/		return 0x82122154;
		  /* 82122154h */ case   15:  		/* mr R4, R27 */
		/* 82122154h case   15:*/		regs.R4 = regs.R27;
		/* 82122154h case   15:*/		return 0x82122158;
		  /* 82122158h */ case   16:  		/* mr R3, R26 */
		/* 82122158h case   16:*/		regs.R3 = regs.R26;
		/* 82122158h case   16:*/		return 0x8212215C;
		  /* 8212215Ch */ case   17:  		/* bl -32348 */
		/* 8212215Ch case   17:*/		regs.LR = 0x82122160; return 0x8211A300;
		/* 8212215Ch case   17:*/		return 0x82122160;
		  /* 82122160h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 82122160h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122160h case   18:*/		return 0x82122164;
		  /* 82122164h */ case   19:  		/* bc 4, CR0_EQ, 76 */
		/* 82122164h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821221B0;  }
		/* 82122164h case   19:*/		return 0x82122168;
	}
	return 0x82122168;
} // Block from 82122118h-82122168h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82122168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122168);
		  /* 82122168h */ case    0:  		/* lis R11, -32253 */
		/* 82122168h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122168h case    0:*/		return 0x8212216C;
		  /* 8212216Ch */ case    1:  		/* li R5, 3022 */
		/* 8212216Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCE);
		/* 8212216Ch case    1:*/		return 0x82122170;
		  /* 82122170h */ case    2:  		/* addi R6, R11, 10752 */
		/* 82122170h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2A00);
		/* 82122170h case    2:*/		return 0x82122174;
		  /* 82122174h */ case    3:  		/* b 1404 */
		/* 82122174h case    3:*/		return 0x821226F0;
		/* 82122174h case    3:*/		return 0x82122178;
	}
	return 0x82122178;
} // Block from 82122168h-82122178h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82122178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122178);
		  /* 82122178h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82122178h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122178h case    0:*/		return 0x8212217C;
		  /* 8212217Ch */ case    1:  		/* bc 12, CR6_EQ, -116 */
		/* 8212217Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82122108;  }
		/* 8212217Ch case    1:*/		return 0x82122180;
		  /* 82122180h */ case    2:  		/* lwz R11, <#[R27 + 4]> */
		/* 82122180h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82122180h case    2:*/		return 0x82122184;
		  /* 82122184h */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 82122184h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82122184h case    3:*/		return 0x82122188;
		  /* 82122188h */ case    4:  		/* bc 4, CR6_EQ, -128 */
		/* 82122188h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82122108;  }
		/* 82122188h case    4:*/		return 0x8212218C;
		  /* 8212218Ch */ case    5:  		/* lwz R11, <#[R27 + 20]> */
		/* 8212218Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8212218Ch case    5:*/		return 0x82122190;
		  /* 82122190h */ case    6:  		/* cmplwi CR6, R11, 10 */
		/* 82122190h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 82122190h case    6:*/		return 0x82122194;
		  /* 82122194h */ case    7:  		/* bc 4, CR6_LT, -140 */
		/* 82122194h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82122108;  }
		/* 82122194h case    7:*/		return 0x82122198;
		  /* 82122198h */ case    8:  		/* lwz R11, <#[R27]> */
		/* 82122198h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82122198h case    8:*/		return 0x8212219C;
		  /* 8212219Ch */ case    9:  		/* mr R3, R27 */
		/* 8212219Ch case    9:*/		regs.R3 = regs.R27;
		/* 8212219Ch case    9:*/		return 0x821221A0;
		  /* 821221A0h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821221A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821221A0h case   10:*/		return 0x821221A4;
		  /* 821221A4h */ case   11:  		/* mtspr CTR, R11 */
		/* 821221A4h case   11:*/		regs.CTR = regs.R11;
		/* 821221A4h case   11:*/		return 0x821221A8;
		  /* 821221A8h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 821221A8h case   12:*/		if ( 1 ) { regs.LR = 0x821221AC; return (uint32)regs.CTR; }
		/* 821221A8h case   12:*/		return 0x821221AC;
		  /* 821221ACh */ case   13:  		/* stw R3, <#[R30 + 16]> */
		/* 821221ACh case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821221ACh case   13:*/		return 0x821221B0;
	}
	return 0x821221B0;
} // Block from 82122178h-821221B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821221B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821221B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821221B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821221B0);
		  /* 821221B0h */ case    0:  		/* cmpwi CR6, R31, 2 */
		/* 821221B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000002);
		/* 821221B0h case    0:*/		return 0x821221B4;
		  /* 821221B4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821221B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821221D0;  }
		/* 821221B4h case    1:*/		return 0x821221B8;
		  /* 821221B8h */ case    2:  		/* cmpwi CR6, R31, 3 */
		/* 821221B8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000003);
		/* 821221B8h case    2:*/		return 0x821221BC;
		  /* 821221BCh */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821221BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821221D0;  }
		/* 821221BCh case    3:*/		return 0x821221C0;
		  /* 821221C0h */ case    4:  		/* cmpwi CR6, R31, 26 */
		/* 821221C0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001A);
		/* 821221C0h case    4:*/		return 0x821221C4;
		  /* 821221C4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821221C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821221D0;  }
		/* 821221C4h case    5:*/		return 0x821221C8;
		  /* 821221C8h */ case    6:  		/* cmpwi CR6, R31, 27 */
		/* 821221C8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001B);
		/* 821221C8h case    6:*/		return 0x821221CC;
		  /* 821221CCh */ case    7:  		/* bc 4, CR6_EQ, 112 */
		/* 821221CCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8212223C;  }
		/* 821221CCh case    7:*/		return 0x821221D0;
	}
	return 0x821221D0;
} // Block from 821221B0h-821221D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821221D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821221D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821221D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821221D0);
		  /* 821221D0h */ case    0:  		/* mr R4, R27 */
		/* 821221D0h case    0:*/		regs.R4 = regs.R27;
		/* 821221D0h case    0:*/		return 0x821221D4;
		  /* 821221D4h */ case    1:  		/* mr R3, R26 */
		/* 821221D4h case    1:*/		regs.R3 = regs.R26;
		/* 821221D4h case    1:*/		return 0x821221D8;
		  /* 821221D8h */ case    2:  		/* bl -32680 */
		/* 821221D8h case    2:*/		regs.LR = 0x821221DC; return 0x8211A230;
		/* 821221D8h case    2:*/		return 0x821221DC;
		  /* 821221DCh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821221DCh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821221DCh case    3:*/		return 0x821221E0;
		  /* 821221E0h */ case    4:  		/* bc 4, CR0_EQ, 1284 */
		/* 821221E0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821226E4;  }
		/* 821221E0h case    4:*/		return 0x821221E4;
		  /* 821221E4h */ case    5:  		/* mr R3, R26 */
		/* 821221E4h case    5:*/		regs.R3 = regs.R26;
		/* 821221E4h case    5:*/		return 0x821221E8;
		  /* 821221E8h */ case    6:  		/* lwz R4, <#[R30 + 32]> */
		/* 821221E8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 821221E8h case    6:*/		return 0x821221EC;
		  /* 821221ECh */ case    7:  		/* bl -39228 */
		/* 821221ECh case    7:*/		regs.LR = 0x821221F0; return 0x821188B0;
		/* 821221ECh case    7:*/		return 0x821221F0;
		  /* 821221F0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 821221F0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821221F0h case    8:*/		return 0x821221F4;
		  /* 821221F4h */ case    9:  		/* bc 4, CR0_EQ, 1264 */
		/* 821221F4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821226E4;  }
		/* 821221F4h case    9:*/		return 0x821221F8;
		  /* 821221F8h */ case   10:  		/* lwz R11, <#[R26 + 20]> */
		/* 821221F8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 821221F8h case   10:*/		return 0x821221FC;
		  /* 821221FCh */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 821221FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821221FCh case   11:*/		return 0x82122200;
		  /* 82122200h */ case   12:  		/* cmpwi CR6, R11, 3 */
		/* 82122200h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82122200h case   12:*/		return 0x82122204;
		  /* 82122204h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 82122204h case   13:*/		if ( regs.CR[6].eq ) { return 0x82122210;  }
		/* 82122204h case   13:*/		return 0x82122208;
		  /* 82122208h */ case   14:  		/* cmpwi CR6, R11, 4 */
		/* 82122208h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82122208h case   14:*/		return 0x8212220C;
		  /* 8212220Ch */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 8212220Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x8212223C;  }
		/* 8212220Ch case   15:*/		return 0x82122210;
	}
	return 0x82122210;
} // Block from 821221D0h-82122210h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82122210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122210);
		  /* 82122210h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 82122210h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82122210h case    0:*/		return 0x82122214;
		  /* 82122214h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 82122214h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212223C;  }
		/* 82122214h case    1:*/		return 0x82122218;
		  /* 82122218h */ case    2:  		/* mr R4, R27 */
		/* 82122218h case    2:*/		regs.R4 = regs.R27;
		/* 82122218h case    2:*/		return 0x8212221C;
		  /* 8212221Ch */ case    3:  		/* mr R3, R26 */
		/* 8212221Ch case    3:*/		regs.R3 = regs.R26;
		/* 8212221Ch case    3:*/		return 0x82122220;
		  /* 82122220h */ case    4:  		/* bl -32544 */
		/* 82122220h case    4:*/		regs.LR = 0x82122224; return 0x8211A300;
		/* 82122220h case    4:*/		return 0x82122224;
		  /* 82122224h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82122224h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122224h case    5:*/		return 0x82122228;
		  /* 82122228h */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 82122228h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8212223C;  }
		/* 82122228h case    6:*/		return 0x8212222C;
		  /* 8212222Ch */ case    7:  		/* lis R11, -32253 */
		/* 8212222Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212222Ch case    7:*/		return 0x82122230;
		  /* 82122230h */ case    8:  		/* li R5, 3065 */
		/* 82122230h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBF9);
		/* 82122230h case    8:*/		return 0x82122234;
		  /* 82122234h */ case    9:  		/* addi R6, R11, 10700 */
		/* 82122234h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x29CC);
		/* 82122234h case    9:*/		return 0x82122238;
		  /* 82122238h */ case   10:  		/* b 1208 */
		/* 82122238h case   10:*/		return 0x821226F0;
		/* 82122238h case   10:*/		return 0x8212223C;
	}
	return 0x8212223C;
} // Block from 82122210h-8212223Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212223Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212223C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212223C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212223C);
		  /* 8212223Ch */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 8212223Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8212223Ch case    0:*/		return 0x82122240;
		  /* 82122240h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82122240h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82122240h case    1:*/		return 0x82122244;
		  /* 82122244h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82122244h case    2:*/		if ( regs.CR[6].eq ) { return 0x82122258;  }
		/* 82122244h case    2:*/		return 0x82122248;
		  /* 82122248h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 82122248h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82122248h case    3:*/		return 0x8212224C;
		  /* 8212224Ch */ case    4:  		/* mr R21, R11 */
		/* 8212224Ch case    4:*/		regs.R21 = regs.R11;
		/* 8212224Ch case    4:*/		return 0x82122250;
		  /* 82122250h */ case    5:  		/* mr R22, R11 */
		/* 82122250h case    5:*/		regs.R22 = regs.R11;
		/* 82122250h case    5:*/		return 0x82122254;
		  /* 82122254h */ case    6:  		/* stw R11, <#[R1 + 132]> */
		/* 82122254h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82122254h case    6:*/		return 0x82122258;
	}
	return 0x82122258;
} // Block from 8212223Ch-82122258h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82122258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122258);
		  /* 82122258h */ case    0:  		/* cmpwi CR6, R31, 26 */
		/* 82122258h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001A);
		/* 82122258h case    0:*/		return 0x8212225C;
		  /* 8212225Ch */ case    1:  		/* bc 12, CR6_EQ, 1084 */
		/* 8212225Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82122698;  }
		/* 8212225Ch case    1:*/		return 0x82122260;
		  /* 82122260h */ case    2:  		/* cmpwi CR6, R31, 27 */
		/* 82122260h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001B);
		/* 82122260h case    2:*/		return 0x82122264;
		  /* 82122264h */ case    3:  		/* bc 12, CR6_EQ, 1076 */
		/* 82122264h case    3:*/		if ( regs.CR[6].eq ) { return 0x82122698;  }
		/* 82122264h case    3:*/		return 0x82122268;
		  /* 82122268h */ case    4:  		/* cmpwi CR6, R31, 13 */
		/* 82122268h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000D);
		/* 82122268h case    4:*/		return 0x8212226C;
		  /* 8212226Ch */ case    5:  		/* bc 12, CR6_EQ, 976 */
		/* 8212226Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8212263C;  }
		/* 8212226Ch case    5:*/		return 0x82122270;
		  /* 82122270h */ case    6:  		/* cmpwi CR6, R31, 14 */
		/* 82122270h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000E);
		/* 82122270h case    6:*/		return 0x82122274;
		  /* 82122274h */ case    7:  		/* bc 12, CR6_EQ, 968 */
		/* 82122274h case    7:*/		if ( regs.CR[6].eq ) { return 0x8212263C;  }
		/* 82122274h case    7:*/		return 0x82122278;
		  /* 82122278h */ case    8:  		/* cmpwi CR6, R31, 21 */
		/* 82122278h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000015);
		/* 82122278h case    8:*/		return 0x8212227C;
		  /* 8212227Ch */ case    9:  		/* bc 12, CR6_EQ, 924 */
		/* 8212227Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82122618;  }
		/* 8212227Ch case    9:*/		return 0x82122280;
		  /* 82122280h */ case   10:  		/* cmpwi CR6, R31, 22 */
		/* 82122280h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000016);
		/* 82122280h case   10:*/		return 0x82122284;
		  /* 82122284h */ case   11:  		/* bc 12, CR6_EQ, 916 */
		/* 82122284h case   11:*/		if ( regs.CR[6].eq ) { return 0x82122618;  }
		/* 82122284h case   11:*/		return 0x82122288;
		  /* 82122288h */ case   12:  		/* cmpwi CR6, R31, 23 */
		/* 82122288h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000017);
		/* 82122288h case   12:*/		return 0x8212228C;
		  /* 8212228Ch */ case   13:  		/* bc 12, CR6_EQ, 908 */
		/* 8212228Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82122618;  }
		/* 8212228Ch case   13:*/		return 0x82122290;
		  /* 82122290h */ case   14:  		/* cmpwi CR6, R31, 0 */
		/* 82122290h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82122290h case   14:*/		return 0x82122294;
		  /* 82122294h */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 82122294h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821222C4;  }
		/* 82122294h case   15:*/		return 0x82122298;
		  /* 82122298h */ case   16:  		/* cmplwi CR6, R27, 0 */
		/* 82122298h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122298h case   16:*/		return 0x8212229C;
		  /* 8212229Ch */ case   17:  		/* bc 12, CR6_EQ, 408 */
		/* 8212229Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82122434;  }
		/* 8212229Ch case   17:*/		return 0x821222A0;
		  /* 821222A0h */ case   18:  		/* lwz R11, <#[R27]> */
		/* 821222A0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821222A0h case   18:*/		return 0x821222A4;
		  /* 821222A4h */ case   19:  		/* mr R3, R27 */
		/* 821222A4h case   19:*/		regs.R3 = regs.R27;
		/* 821222A4h case   19:*/		return 0x821222A8;
		  /* 821222A8h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 821222A8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821222A8h case   20:*/		return 0x821222AC;
		  /* 821222ACh */ case   21:  		/* mtspr CTR, R11 */
		/* 821222ACh case   21:*/		regs.CTR = regs.R11;
		/* 821222ACh case   21:*/		return 0x821222B0;
		  /* 821222B0h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 821222B0h case   22:*/		if ( 1 ) { regs.LR = 0x821222B4; return (uint32)regs.CTR; }
		/* 821222B0h case   22:*/		return 0x821222B4;
		  /* 821222B4h */ case   23:  		/* stw R3, <#[R30 + 16]> */
		/* 821222B4h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821222B4h case   23:*/		return 0x821222B8;
		  /* 821222B8h */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 821222B8h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821222B8h case   24:*/		return 0x821222BC;
		  /* 821222BCh */ case   25:  		/* bc 12, CR0_EQ, 1088 */
		/* 821222BCh case   25:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 821222BCh case   25:*/		return 0x821222C0;
		  /* 821222C0h */ case   26:  		/* b 372 */
		/* 821222C0h case   26:*/		return 0x82122434;
		/* 821222C0h case   26:*/		return 0x821222C4;
	}
	return 0x821222C4;
} // Block from 82122258h-821222C4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821222C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821222C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821222C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821222C4);
		  /* 821222C4h */ case    0:  		/* cmpwi CR6, R31, 7 */
		/* 821222C4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000007);
		/* 821222C4h case    0:*/		return 0x821222C8;
		  /* 821222C8h */ case    1:  		/* bc 12, CR6_EQ, 804 */
		/* 821222C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222C8h case    1:*/		return 0x821222CC;
		  /* 821222CCh */ case    2:  		/* cmpwi CR6, R31, 5 */
		/* 821222CCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000005);
		/* 821222CCh case    2:*/		return 0x821222D0;
		  /* 821222D0h */ case    3:  		/* bc 12, CR6_EQ, 796 */
		/* 821222D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222D0h case    3:*/		return 0x821222D4;
		  /* 821222D4h */ case    4:  		/* cmpwi CR6, R31, 6 */
		/* 821222D4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000006);
		/* 821222D4h case    4:*/		return 0x821222D8;
		  /* 821222D8h */ case    5:  		/* bc 12, CR6_EQ, 788 */
		/* 821222D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222D8h case    5:*/		return 0x821222DC;
		  /* 821222DCh */ case    6:  		/* cmpwi CR6, R31, 2 */
		/* 821222DCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000002);
		/* 821222DCh case    6:*/		return 0x821222E0;
		  /* 821222E0h */ case    7:  		/* bc 12, CR6_EQ, 780 */
		/* 821222E0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222E0h case    7:*/		return 0x821222E4;
		  /* 821222E4h */ case    8:  		/* cmpwi CR6, R31, 3 */
		/* 821222E4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000003);
		/* 821222E4h case    8:*/		return 0x821222E8;
		  /* 821222E8h */ case    9:  		/* bc 12, CR6_EQ, 772 */
		/* 821222E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222E8h case    9:*/		return 0x821222EC;
		  /* 821222ECh */ case   10:  		/* cmpwi CR6, R31, 1 */
		/* 821222ECh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000001);
		/* 821222ECh case   10:*/		return 0x821222F0;
		  /* 821222F0h */ case   11:  		/* bc 12, CR6_EQ, 764 */
		/* 821222F0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821225EC;  }
		/* 821222F0h case   11:*/		return 0x821222F4;
		  /* 821222F4h */ case   12:  		/* cmpwi CR6, R31, 4 */
		/* 821222F4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000004);
		/* 821222F4h case   12:*/		return 0x821222F8;
		  /* 821222F8h */ case   13:  		/* bc 4, CR6_EQ, 144 */
		/* 821222F8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82122388;  }
		/* 821222F8h case   13:*/		return 0x821222FC;
		  /* 821222FCh */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 821222FCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821222FCh case   14:*/		return 0x82122300;
		  /* 82122300h */ case   15:  		/* bc 12, CR6_EQ, 1020 */
		/* 82122300h case   15:*/		if ( regs.CR[6].eq ) { return 0x821226FC;  }
		/* 82122300h case   15:*/		return 0x82122304;
		  /* 82122304h */ case   16:  		/* li R3, 40 */
		/* 82122304h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82122304h case   16:*/		return 0x82122308;
		  /* 82122308h */ case   17:  		/* bl -364768 */
		/* 82122308h case   17:*/		regs.LR = 0x8212230C; return 0x820C9228;
		/* 82122308h case   17:*/		return 0x8212230C;
		  /* 8212230Ch */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 8212230Ch case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212230Ch case   18:*/		return 0x82122310;
		  /* 82122310h */ case   19:  		/* bc 12, CR0_EQ, 40 */
		/* 82122310h case   19:*/		if ( regs.CR[0].eq ) { return 0x82122338;  }
		/* 82122310h case   19:*/		return 0x82122314;
		  /* 82122314h */ case   20:  		/* li R9, 512 */
		/* 82122314h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82122314h case   20:*/		return 0x82122318;
		  /* 82122318h */ case   21:  		/* lwz R8, <#[R27 + 32]> */
		/* 82122318h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000020) );
		/* 82122318h case   21:*/		return 0x8212231C;
		  /* 8212231Ch */ case   22:  		/* li R6, 0 */
		/* 8212231Ch case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212231Ch case   22:*/		return 0x82122320;
		  /* 82122320h */ case   23:  		/* lwz R7, <#[R27 + 28]> */
		/* 82122320h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x0000001C) );
		/* 82122320h case   23:*/		return 0x82122324;
		  /* 82122324h */ case   24:  		/* li R5, 0 */
		/* 82122324h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122324h case   24:*/		return 0x82122328;
		  /* 82122328h */ case   25:  		/* lwz R4, <#[R27 + 16]> */
		/* 82122328h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000010) );
		/* 82122328h case   25:*/		return 0x8212232C;
		  /* 8212232Ch */ case   26:  		/* bl -358060 */
		/* 8212232Ch case   26:*/		regs.LR = 0x82122330; return 0x820CAC80;
		/* 8212232Ch case   26:*/		return 0x82122330;
		  /* 82122330h */ case   27:  		/* mr R24, R3 */
		/* 82122330h case   27:*/		regs.R24 = regs.R3;
		/* 82122330h case   27:*/		return 0x82122334;
		  /* 82122334h */ case   28:  		/* b 8 */
		/* 82122334h case   28:*/		return 0x8212233C;
		/* 82122334h case   28:*/		return 0x82122338;
	}
	return 0x82122338;
} // Block from 821222C4h-82122338h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82122338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122338);
		  /* 82122338h */ case    0:  		/* mr R24, R20 */
		/* 82122338h case    0:*/		regs.R24 = regs.R20;
		/* 82122338h case    0:*/		return 0x8212233C;
	}
	return 0x8212233C;
} // Block from 82122338h-8212233Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212233Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212233C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212233C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212233C);
		  /* 8212233Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8212233Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212233Ch case    0:*/		return 0x82122340;
		  /* 82122340h */ case    1:  		/* bc 12, CR6_EQ, 956 */
		/* 82122340h case    1:*/		if ( regs.CR[6].eq ) { return 0x821226FC;  }
		/* 82122340h case    1:*/		return 0x82122344;
		  /* 82122344h */ case    2:  		/* li R6, 0 */
		/* 82122344h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122344h case    2:*/		return 0x82122348;
		  /* 82122348h */ case    3:  		/* mr R5, R27 */
		/* 82122348h case    3:*/		regs.R5 = regs.R27;
		/* 82122348h case    3:*/		return 0x8212234C;
		  /* 8212234Ch */ case    4:  		/* mr R4, R24 */
		/* 8212234Ch case    4:*/		regs.R4 = regs.R24;
		/* 8212234Ch case    4:*/		return 0x82122350;
		  /* 82122350h */ case    5:  		/* mr R3, R26 */
		/* 82122350h case    5:*/		regs.R3 = regs.R26;
		/* 82122350h case    5:*/		return 0x82122354;
		  /* 82122354h */ case    6:  		/* bl -20492 */
		/* 82122354h case    6:*/		regs.LR = 0x82122358; return 0x8211D348;
		/* 82122354h case    6:*/		return 0x82122358;
		  /* 82122358h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122358h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122358h case    7:*/		return 0x8212235C;
		  /* 8212235Ch */ case    8:  		/* bc 12, CR0_EQ, 32 */
		/* 8212235Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8212237C;  }
		/* 8212235Ch case    8:*/		return 0x82122360;
		  /* 82122360h */ case    9:  		/* lwz R11, <#[R24]> */
		/* 82122360h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82122360h case    9:*/		return 0x82122364;
		  /* 82122364h */ case   10:  		/* mr R3, R24 */
		/* 82122364h case   10:*/		regs.R3 = regs.R24;
		/* 82122364h case   10:*/		return 0x82122368;
		  /* 82122368h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122368h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122368h case   11:*/		return 0x8212236C;
		  /* 8212236Ch */ case   12:  		/* mtspr CTR, R11 */
		/* 8212236Ch case   12:*/		regs.CTR = regs.R11;
		/* 8212236Ch case   12:*/		return 0x82122370;
		  /* 82122370h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 82122370h case   13:*/		if ( 1 ) { regs.LR = 0x82122374; return (uint32)regs.CTR; }
		/* 82122370h case   13:*/		return 0x82122374;
		  /* 82122374h */ case   14:  		/* stw R3, <#[R30 + 16]> */
		/* 82122374h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82122374h case   14:*/		return 0x82122378;
		  /* 82122378h */ case   15:  		/* b 608 */
		/* 82122378h case   15:*/		return 0x821225D8;
		/* 82122378h case   15:*/		return 0x8212237C;
	}
	return 0x8212237C;
} // Block from 8212233Ch-8212237Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212237Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212237C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212237C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212237C);
		  /* 8212237Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212237Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212237Ch case    0:*/		return 0x82122380;
		  /* 82122380h */ case    1:  		/* addi R6, R11, 10636 */
		/* 82122380h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x298C);
		/* 82122380h case    1:*/		return 0x82122384;
		  /* 82122384h */ case    2:  		/* b 576 */
		/* 82122384h case    2:*/		return 0x821225C4;
		/* 82122384h case    2:*/		return 0x82122388;
	}
	return 0x82122388;
} // Block from 8212237Ch-82122388h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122388);
		  /* 82122388h */ case    0:  		/* cmpwi CR6, R31, 24 */
		/* 82122388h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000018);
		/* 82122388h case    0:*/		return 0x8212238C;
		  /* 8212238Ch */ case    1:  		/* bc 12, CR6_EQ, 408 */
		/* 8212238Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82122524;  }
		/* 8212238Ch case    1:*/		return 0x82122390;
		  /* 82122390h */ case    2:  		/* cmpwi CR6, R31, 25 */
		/* 82122390h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000019);
		/* 82122390h case    2:*/		return 0x82122394;
		  /* 82122394h */ case    3:  		/* bc 12, CR6_EQ, 400 */
		/* 82122394h case    3:*/		if ( regs.CR[6].eq ) { return 0x82122524;  }
		/* 82122394h case    3:*/		return 0x82122398;
		  /* 82122398h */ case    4:  		/* cmpwi CR6, R31, 15 */
		/* 82122398h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000F);
		/* 82122398h case    4:*/		return 0x8212239C;
		  /* 8212239Ch */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 8212239Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 8212239Ch case    5:*/		return 0x821223A0;
		  /* 821223A0h */ case    6:  		/* cmpwi CR6, R31, 16 */
		/* 821223A0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000010);
		/* 821223A0h case    6:*/		return 0x821223A4;
		  /* 821223A4h */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 821223A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 821223A4h case    7:*/		return 0x821223A8;
		  /* 821223A8h */ case    8:  		/* cmpwi CR6, R31, 17 */
		/* 821223A8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000011);
		/* 821223A8h case    8:*/		return 0x821223AC;
		  /* 821223ACh */ case    9:  		/* bc 12, CR6_EQ, 80 */
		/* 821223ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 821223ACh case    9:*/		return 0x821223B0;
		  /* 821223B0h */ case   10:  		/* cmpwi CR6, R31, 18 */
		/* 821223B0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000012);
		/* 821223B0h case   10:*/		return 0x821223B4;
		  /* 821223B4h */ case   11:  		/* bc 12, CR6_EQ, 72 */
		/* 821223B4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 821223B4h case   11:*/		return 0x821223B8;
		  /* 821223B8h */ case   12:  		/* cmpwi CR6, R31, 19 */
		/* 821223B8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000013);
		/* 821223B8h case   12:*/		return 0x821223BC;
		  /* 821223BCh */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 821223BCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 821223BCh case   13:*/		return 0x821223C0;
		  /* 821223C0h */ case   14:  		/* cmpwi CR6, R31, 20 */
		/* 821223C0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000014);
		/* 821223C0h case   14:*/		return 0x821223C4;
		  /* 821223C4h */ case   15:  		/* bc 12, CR6_EQ, 56 */
		/* 821223C4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821223FC;  }
		/* 821223C4h case   15:*/		return 0x821223C8;
		  /* 821223C8h */ case   16:  		/* addi R8, R30, 16 */
		/* 821223C8h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x10);
		/* 821223C8h case   16:*/		return 0x821223CC;
		  /* 821223CCh */ case   17:  		/* addi R7, R1, 132 */
		/* 821223CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x84);
		/* 821223CCh case   17:*/		return 0x821223D0;
		  /* 821223D0h */ case   18:  		/* addi R6, R1, 128 */
		/* 821223D0h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 821223D0h case   18:*/		return 0x821223D4;
		  /* 821223D4h */ case   19:  		/* mr R5, R22 */
		/* 821223D4h case   19:*/		regs.R5 = regs.R22;
		/* 821223D4h case   19:*/		return 0x821223D8;
		  /* 821223D8h */ case   20:  		/* mr R4, R27 */
		/* 821223D8h case   20:*/		regs.R4 = regs.R27;
		/* 821223D8h case   20:*/		return 0x821223DC;
		  /* 821223DCh */ case   21:  		/* mr R3, R26 */
		/* 821223DCh case   21:*/		regs.R3 = regs.R26;
		/* 821223DCh case   21:*/		return 0x821223E0;
		  /* 821223E0h */ case   22:  		/* bl -18456 */
		/* 821223E0h case   22:*/		regs.LR = 0x821223E4; return 0x8211DBC8;
		/* 821223E0h case   22:*/		return 0x821223E4;
		  /* 821223E4h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 821223E4h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821223E4h case   23:*/		return 0x821223E8;
		  /* 821223E8h */ case   24:  		/* bc 4, CR0_LT, 68 */
		/* 821223E8h case   24:*/		if ( !regs.CR[0].lt ) { return 0x8212242C;  }
		/* 821223E8h case   24:*/		return 0x821223EC;
		  /* 821223ECh */ case   25:  		/* lis R11, -32253 */
		/* 821223ECh case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821223ECh case   25:*/		return 0x821223F0;
		  /* 821223F0h */ case   26:  		/* li R5, 3020 */
		/* 821223F0h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 821223F0h case   26:*/		return 0x821223F4;
		  /* 821223F4h */ case   27:  		/* addi R6, R11, 10620 */
		/* 821223F4h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x297C);
		/* 821223F4h case   27:*/		return 0x821223F8;
		  /* 821223F8h */ case   28:  		/* b 760 */
		/* 821223F8h case   28:*/		return 0x821226F0;
		/* 821223F8h case   28:*/		return 0x821223FC;
	}
	return 0x821223FC;
} // Block from 82122388h-821223FCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821223FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821223FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821223FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821223FC);
		  /* 821223FCh */ case    0:  		/* addi R31, R30, 16 */
		/* 821223FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x10);
		/* 821223FCh case    0:*/		return 0x82122400;
		  /* 82122400h */ case    1:  		/* addi R7, R1, 132 */
		/* 82122400h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x84);
		/* 82122400h case    1:*/		return 0x82122404;
		  /* 82122404h */ case    2:  		/* mr R8, R31 */
		/* 82122404h case    2:*/		regs.R8 = regs.R31;
		/* 82122404h case    2:*/		return 0x82122408;
		  /* 82122408h */ case    3:  		/* addi R6, R1, 128 */
		/* 82122408h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 82122408h case    3:*/		return 0x8212240C;
		  /* 8212240Ch */ case    4:  		/* mr R5, R22 */
		/* 8212240Ch case    4:*/		regs.R5 = regs.R22;
		/* 8212240Ch case    4:*/		return 0x82122410;
		  /* 82122410h */ case    5:  		/* mr R4, R27 */
		/* 82122410h case    5:*/		regs.R4 = regs.R27;
		/* 82122410h case    5:*/		return 0x82122414;
		  /* 82122414h */ case    6:  		/* mr R3, R26 */
		/* 82122414h case    6:*/		regs.R3 = regs.R26;
		/* 82122414h case    6:*/		return 0x82122418;
		  /* 82122418h */ case    7:  		/* bl -18512 */
		/* 82122418h case    7:*/		regs.LR = 0x8212241C; return 0x8211DBC8;
		/* 82122418h case    7:*/		return 0x8212241C;
		  /* 8212241Ch */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8212241Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212241Ch case    8:*/		return 0x82122420;
		  /* 82122420h */ case    9:  		/* bc 12, CR0_LT, -52 */
		/* 82122420h case    9:*/		if ( regs.CR[0].lt ) { return 0x821223EC;  }
		/* 82122420h case    9:*/		return 0x82122424;
		  /* 82122424h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 82122424h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82122424h case   10:*/		return 0x82122428;
		  /* 82122428h */ case   11:  		/* stw R20, <#[R11 + 20]> */
		/* 82122428h case   11:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000014) );
		/* 82122428h case   11:*/		return 0x8212242C;
	}
	return 0x8212242C;
} // Block from 821223FCh-8212242Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212242Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212242C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212242C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212242C);
		  /* 8212242Ch */ case    0:  		/* lwz R21, <#[R1 + 132]> */
		/* 8212242Ch case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000084) );
		/* 8212242Ch case    0:*/		return 0x82122430;
		  /* 82122430h */ case    1:  		/* lwz R24, <#[R1 + 128]> */
		/* 82122430h case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000080) );
		/* 82122430h case    1:*/		return 0x82122434;
	}
	return 0x82122434;
} // Block from 8212242Ch-82122434h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122434);
		  /* 82122434h */ case    0:  		/* lwz R9, <#[R30 + 32]> */
		/* 82122434h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 82122434h case    0:*/		return 0x82122438;
		  /* 82122438h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82122438h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82122438h case    1:*/		return 0x8212243C;
		  /* 8212243Ch */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 8212243Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82122484;  }
		/* 8212243Ch case    2:*/		return 0x82122440;
		  /* 82122440h */ case    3:  		/* cmplw CR6, R27, R24 */
		/* 82122440h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 82122440h case    3:*/		return 0x82122444;
		  /* 82122444h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 82122444h case    4:*/		if ( regs.CR[6].eq ) { return 0x82122484;  }
		/* 82122444h case    4:*/		return 0x82122448;
		  /* 82122448h */ case    5:  		/* mr R5, R24 */
		/* 82122448h case    5:*/		regs.R5 = regs.R24;
		/* 82122448h case    5:*/		return 0x8212244C;
		  /* 8212244Ch */ case    6:  		/* mr R4, R27 */
		/* 8212244Ch case    6:*/		regs.R4 = regs.R27;
		/* 8212244Ch case    6:*/		return 0x82122450;
		  /* 82122450h */ case    7:  		/* mr R3, R26 */
		/* 82122450h case    7:*/		regs.R3 = regs.R26;
		/* 82122450h case    7:*/		return 0x82122454;
		  /* 82122454h */ case    8:  		/* bl -41308 */
		/* 82122454h case    8:*/		regs.LR = 0x82122458; return 0x821182F8;
		/* 82122454h case    8:*/		return 0x82122458;
		  /* 82122458h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82122458h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122458h case    9:*/		return 0x8212245C;
		  /* 8212245Ch */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 8212245Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82122484;  }
		/* 8212245Ch case   10:*/		return 0x82122460;
		  /* 82122460h */ case   11:  		/* li R7, 0 */
		/* 82122460h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82122460h case   11:*/		return 0x82122464;
		  /* 82122464h */ case   12:  		/* li R6, 0 */
		/* 82122464h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122464h case   12:*/		return 0x82122468;
		  /* 82122468h */ case   13:  		/* mr R5, R9 */
		/* 82122468h case   13:*/		regs.R5 = regs.R9;
		/* 82122468h case   13:*/		return 0x8212246C;
		  /* 8212246Ch */ case   14:  		/* mr R4, R24 */
		/* 8212246Ch case   14:*/		regs.R4 = regs.R24;
		/* 8212246Ch case   14:*/		return 0x82122470;
		  /* 82122470h */ case   15:  		/* mr R3, R26 */
		/* 82122470h case   15:*/		regs.R3 = regs.R26;
		/* 82122470h case   15:*/		return 0x82122474;
		  /* 82122474h */ case   16:  		/* bl -4636 */
		/* 82122474h case   16:*/		regs.LR = 0x82122478; return 0x82121258;
		/* 82122474h case   16:*/		return 0x82122478;
		  /* 82122478h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 82122478h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122478h case   17:*/		return 0x8212247C;
		  /* 8212247Ch */ case   18:  		/* bc 12, CR0_EQ, 640 */
		/* 8212247Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 8212247Ch case   18:*/		return 0x82122480;
		  /* 82122480h */ case   19:  		/* stw R3, <#[R30 + 32]> */
		/* 82122480h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82122480h case   19:*/		return 0x82122484;
	}
	return 0x82122484;
} // Block from 82122434h-82122484h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82122484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122484);
		  /* 82122484h */ case    0:  		/* lwz R9, <#[R30 + 36]> */
		/* 82122484h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000024) );
		/* 82122484h case    0:*/		return 0x82122488;
		  /* 82122488h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82122488h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82122488h case    1:*/		return 0x8212248C;
		  /* 8212248Ch */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 8212248Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821224D4;  }
		/* 8212248Ch case    2:*/		return 0x82122490;
		  /* 82122490h */ case    3:  		/* cmplw CR6, R22, R21 */
		/* 82122490h case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 82122490h case    3:*/		return 0x82122494;
		  /* 82122494h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 82122494h case    4:*/		if ( regs.CR[6].eq ) { return 0x821224D4;  }
		/* 82122494h case    4:*/		return 0x82122498;
		  /* 82122498h */ case    5:  		/* mr R5, R21 */
		/* 82122498h case    5:*/		regs.R5 = regs.R21;
		/* 82122498h case    5:*/		return 0x8212249C;
		  /* 8212249Ch */ case    6:  		/* mr R4, R22 */
		/* 8212249Ch case    6:*/		regs.R4 = regs.R22;
		/* 8212249Ch case    6:*/		return 0x821224A0;
		  /* 821224A0h */ case    7:  		/* mr R3, R26 */
		/* 821224A0h case    7:*/		regs.R3 = regs.R26;
		/* 821224A0h case    7:*/		return 0x821224A4;
		  /* 821224A4h */ case    8:  		/* bl -41388 */
		/* 821224A4h case    8:*/		regs.LR = 0x821224A8; return 0x821182F8;
		/* 821224A4h case    8:*/		return 0x821224A8;
		  /* 821224A8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 821224A8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821224A8h case    9:*/		return 0x821224AC;
		  /* 821224ACh */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 821224ACh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821224D4;  }
		/* 821224ACh case   10:*/		return 0x821224B0;
		  /* 821224B0h */ case   11:  		/* li R7, 0 */
		/* 821224B0h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821224B0h case   11:*/		return 0x821224B4;
		  /* 821224B4h */ case   12:  		/* li R6, 0 */
		/* 821224B4h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821224B4h case   12:*/		return 0x821224B8;
		  /* 821224B8h */ case   13:  		/* mr R5, R9 */
		/* 821224B8h case   13:*/		regs.R5 = regs.R9;
		/* 821224B8h case   13:*/		return 0x821224BC;
		  /* 821224BCh */ case   14:  		/* mr R4, R21 */
		/* 821224BCh case   14:*/		regs.R4 = regs.R21;
		/* 821224BCh case   14:*/		return 0x821224C0;
		  /* 821224C0h */ case   15:  		/* mr R3, R26 */
		/* 821224C0h case   15:*/		regs.R3 = regs.R26;
		/* 821224C0h case   15:*/		return 0x821224C4;
		  /* 821224C4h */ case   16:  		/* bl -4716 */
		/* 821224C4h case   16:*/		regs.LR = 0x821224C8; return 0x82121258;
		/* 821224C4h case   16:*/		return 0x821224C8;
		  /* 821224C8h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 821224C8h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821224C8h case   17:*/		return 0x821224CC;
		  /* 821224CCh */ case   18:  		/* bc 12, CR0_EQ, 560 */
		/* 821224CCh case   18:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 821224CCh case   18:*/		return 0x821224D0;
		  /* 821224D0h */ case   19:  		/* stw R3, <#[R30 + 36]> */
		/* 821224D0h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 821224D0h case   19:*/		return 0x821224D4;
	}
	return 0x821224D4;
} // Block from 82122484h-821224D4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821224D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821224D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821224D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821224D4);
		  /* 821224D4h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 821224D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821224D4h case    0:*/		return 0x821224D8;
		  /* 821224D8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821224D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821224D8h case    1:*/		return 0x821224DC;
		  /* 821224DCh */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821224DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821224E4;  }
		/* 821224DCh case    2:*/		return 0x821224E0;
		  /* 821224E0h */ case    3:  		/* stw R20, <#[R30 + 16]> */
		/* 821224E0h case    3:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R30 + 0x00000010) );
		/* 821224E0h case    3:*/		return 0x821224E4;
	}
	return 0x821224E4;
} // Block from 821224D4h-821224E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821224E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821224E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821224E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821224E4);
		  /* 821224E4h */ case    0:  		/* mr R4, R30 */
		/* 821224E4h case    0:*/		regs.R4 = regs.R30;
		/* 821224E4h case    0:*/		return 0x821224E8;
		  /* 821224E8h */ case    1:  		/* mr R3, R26 */
		/* 821224E8h case    1:*/		regs.R3 = regs.R26;
		/* 821224E8h case    1:*/		return 0x821224EC;
		  /* 821224ECh */ case    2:  		/* bl -25812 */
		/* 821224ECh case    2:*/		regs.LR = 0x821224F0; return 0x8211C018;
		/* 821224ECh case    2:*/		return 0x821224F0;
		  /* 821224F0h */ case    3:  		/* li R5, 1 */
		/* 821224F0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821224F0h case    3:*/		return 0x821224F4;
		  /* 821224F4h */ case    4:  		/* mr R4, R30 */
		/* 821224F4h case    4:*/		regs.R4 = regs.R30;
		/* 821224F4h case    4:*/		return 0x821224F8;
		  /* 821224F8h */ case    5:  		/* mr R3, R26 */
		/* 821224F8h case    5:*/		regs.R3 = regs.R26;
		/* 821224F8h case    5:*/		return 0x821224FC;
		  /* 821224FCh */ case    6:  		/* bl -39788 */
		/* 821224FCh case    6:*/		regs.LR = 0x82122500; return 0x82118990;
		/* 821224FCh case    6:*/		return 0x82122500;
		  /* 82122500h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122500h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122500h case    7:*/		return 0x82122504;
		  /* 82122504h */ case    8:  		/* bc 12, CR0_EQ, 508 */
		/* 82122504h case    8:*/		if ( regs.CR[0].eq ) { return 0x82122700;  }
		/* 82122504h case    8:*/		return 0x82122508;
		  /* 82122508h */ case    9:  		/* mr R4, R30 */
		/* 82122508h case    9:*/		regs.R4 = regs.R30;
		/* 82122508h case    9:*/		return 0x8212250C;
		  /* 8212250Ch */ case   10:  		/* mr R3, R26 */
		/* 8212250Ch case   10:*/		regs.R3 = regs.R26;
		/* 8212250Ch case   10:*/		return 0x82122510;
		  /* 82122510h */ case   11:  		/* bl -11304 */
		/* 82122510h case   11:*/		regs.LR = 0x82122514; return 0x8211F8E8;
		/* 82122510h case   11:*/		return 0x82122514;
		  /* 82122514h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82122514h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122514h case   12:*/		return 0x82122518;
		  /* 82122518h */ case   13:  		/* bc 12, CR0_EQ, 488 */
		/* 82122518h case   13:*/		if ( regs.CR[0].eq ) { return 0x82122700;  }
		/* 82122518h case   13:*/		return 0x8212251C;
		  /* 8212251Ch */ case   14:  		/* mr R30, R3 */
		/* 8212251Ch case   14:*/		regs.R30 = regs.R3;
		/* 8212251Ch case   14:*/		return 0x82122520;
		  /* 82122520h */ case   15:  		/* b 480 */
		/* 82122520h case   15:*/		return 0x82122700;
		/* 82122520h case   15:*/		return 0x82122524;
	}
	return 0x82122524;
} // Block from 821224E4h-82122524h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82122524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122524);
		  /* 82122524h */ case    0:  		/* li R3, 40 */
		/* 82122524h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82122524h case    0:*/		return 0x82122528;
		  /* 82122528h */ case    1:  		/* bl -365312 */
		/* 82122528h case    1:*/		regs.LR = 0x8212252C; return 0x820C9228;
		/* 82122528h case    1:*/		return 0x8212252C;
		  /* 8212252Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8212252Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212252Ch case    2:*/		return 0x82122530;
		  /* 82122530h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 82122530h case    3:*/		if ( regs.CR[0].eq ) { return 0x82122558;  }
		/* 82122530h case    3:*/		return 0x82122534;
		  /* 82122534h */ case    4:  		/* li R9, 512 */
		/* 82122534h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82122534h case    4:*/		return 0x82122538;
		  /* 82122538h */ case    5:  		/* li R8, 1 */
		/* 82122538h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82122538h case    5:*/		return 0x8212253C;
		  /* 8212253Ch */ case    6:  		/* li R7, 1 */
		/* 8212253Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8212253Ch case    6:*/		return 0x82122540;
		  /* 82122540h */ case    7:  		/* li R6, 0 */
		/* 82122540h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122540h case    7:*/		return 0x82122544;
		  /* 82122544h */ case    8:  		/* li R5, 0 */
		/* 82122544h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122544h case    8:*/		return 0x82122548;
		  /* 82122548h */ case    9:  		/* li R4, 0 */
		/* 82122548h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82122548h case    9:*/		return 0x8212254C;
		  /* 8212254Ch */ case   10:  		/* bl -358604 */
		/* 8212254Ch case   10:*/		regs.LR = 0x82122550; return 0x820CAC80;
		/* 8212254Ch case   10:*/		return 0x82122550;
		  /* 82122550h */ case   11:  		/* mr R24, R3 */
		/* 82122550h case   11:*/		regs.R24 = regs.R3;
		/* 82122550h case   11:*/		return 0x82122554;
		  /* 82122554h */ case   12:  		/* b 8 */
		/* 82122554h case   12:*/		return 0x8212255C;
		/* 82122554h case   12:*/		return 0x82122558;
	}
	return 0x82122558;
} // Block from 82122524h-82122558h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82122558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122558);
		  /* 82122558h */ case    0:  		/* mr R24, R20 */
		/* 82122558h case    0:*/		regs.R24 = regs.R20;
		/* 82122558h case    0:*/		return 0x8212255C;
	}
	return 0x8212255C;
} // Block from 82122558h-8212255Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212255Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212255C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212255C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212255C);
		  /* 8212255Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8212255Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212255Ch case    0:*/		return 0x82122560;
		  /* 82122560h */ case    1:  		/* bc 12, CR6_EQ, 412 */
		/* 82122560h case    1:*/		if ( regs.CR[6].eq ) { return 0x821226FC;  }
		/* 82122560h case    1:*/		return 0x82122564;
		  /* 82122564h */ case    2:  		/* li R6, 0 */
		/* 82122564h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122564h case    2:*/		return 0x82122568;
		  /* 82122568h */ case    3:  		/* mr R5, R27 */
		/* 82122568h case    3:*/		regs.R5 = regs.R27;
		/* 82122568h case    3:*/		return 0x8212256C;
		  /* 8212256Ch */ case    4:  		/* mr R4, R24 */
		/* 8212256Ch case    4:*/		regs.R4 = regs.R24;
		/* 8212256Ch case    4:*/		return 0x82122570;
		  /* 82122570h */ case    5:  		/* mr R3, R26 */
		/* 82122570h case    5:*/		regs.R3 = regs.R26;
		/* 82122570h case    5:*/		return 0x82122574;
		  /* 82122574h */ case    6:  		/* bl -21036 */
		/* 82122574h case    6:*/		regs.LR = 0x82122578; return 0x8211D348;
		/* 82122574h case    6:*/		return 0x82122578;
		  /* 82122578h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122578h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122578h case    7:*/		return 0x8212257C;
		  /* 8212257Ch */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 8212257Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821225BC;  }
		/* 8212257Ch case    8:*/		return 0x82122580;
		  /* 82122580h */ case    9:  		/* li R6, 0 */
		/* 82122580h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122580h case    9:*/		return 0x82122584;
		  /* 82122584h */ case   10:  		/* mr R5, R22 */
		/* 82122584h case   10:*/		regs.R5 = regs.R22;
		/* 82122584h case   10:*/		return 0x82122588;
		  /* 82122588h */ case   11:  		/* mr R4, R24 */
		/* 82122588h case   11:*/		regs.R4 = regs.R24;
		/* 82122588h case   11:*/		return 0x8212258C;
		  /* 8212258Ch */ case   12:  		/* mr R3, R26 */
		/* 8212258Ch case   12:*/		regs.R3 = regs.R26;
		/* 8212258Ch case   12:*/		return 0x82122590;
		  /* 82122590h */ case   13:  		/* bl -21064 */
		/* 82122590h case   13:*/		regs.LR = 0x82122594; return 0x8211D348;
		/* 82122590h case   13:*/		return 0x82122594;
		  /* 82122594h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82122594h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122594h case   14:*/		return 0x82122598;
		  /* 82122598h */ case   15:  		/* bc 12, CR0_EQ, 36 */
		/* 82122598h case   15:*/		if ( regs.CR[0].eq ) { return 0x821225BC;  }
		/* 82122598h case   15:*/		return 0x8212259C;
		  /* 8212259Ch */ case   16:  		/* lwz R11, <#[R24]> */
		/* 8212259Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8212259Ch case   16:*/		return 0x821225A0;
		  /* 821225A0h */ case   17:  		/* mr R3, R24 */
		/* 821225A0h case   17:*/		regs.R3 = regs.R24;
		/* 821225A0h case   17:*/		return 0x821225A4;
		  /* 821225A4h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821225A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821225A4h case   18:*/		return 0x821225A8;
		  /* 821225A8h */ case   19:  		/* mtspr CTR, R11 */
		/* 821225A8h case   19:*/		regs.CTR = regs.R11;
		/* 821225A8h case   19:*/		return 0x821225AC;
		  /* 821225ACh */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 821225ACh case   20:*/		if ( 1 ) { regs.LR = 0x821225B0; return (uint32)regs.CTR; }
		/* 821225ACh case   20:*/		return 0x821225B0;
		  /* 821225B0h */ case   21:  		/* stw R3, <#[R30 + 16]> */
		/* 821225B0h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821225B0h case   21:*/		return 0x821225B4;
		  /* 821225B4h */ case   22:  		/* mr R21, R24 */
		/* 821225B4h case   22:*/		regs.R21 = regs.R24;
		/* 821225B4h case   22:*/		return 0x821225B8;
		  /* 821225B8h */ case   23:  		/* b 32 */
		/* 821225B8h case   23:*/		return 0x821225D8;
		/* 821225B8h case   23:*/		return 0x821225BC;
	}
	return 0x821225BC;
} // Block from 8212255Ch-821225BCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821225BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821225BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821225BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821225BC);
		  /* 821225BCh */ case    0:  		/* lis R11, -32253 */
		/* 821225BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821225BCh case    0:*/		return 0x821225C0;
		  /* 821225C0h */ case    1:  		/* addi R6, R11, 10560 */
		/* 821225C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2940);
		/* 821225C0h case    1:*/		return 0x821225C4;
	}
	return 0x821225C4;
} // Block from 821225BCh-821225C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821225C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821225C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821225C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821225C4);
		  /* 821225C4h */ case    0:  		/* li R5, 3020 */
		/* 821225C4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 821225C4h case    0:*/		return 0x821225C8;
		  /* 821225C8h */ case    1:  		/* addi R4, R30, 48 */
		/* 821225C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x30);
		/* 821225C8h case    1:*/		return 0x821225CC;
		  /* 821225CCh */ case    2:  		/* mr R3, R26 */
		/* 821225CCh case    2:*/		regs.R3 = regs.R26;
		/* 821225CCh case    2:*/		return 0x821225D0;
		  /* 821225D0h */ case    3:  		/* bl -36144 */
		/* 821225D0h case    3:*/		regs.LR = 0x821225D4; return 0x821198A0;
		/* 821225D0h case    3:*/		return 0x821225D4;
		  /* 821225D4h */ case    4:  		/* stw R20, <#[R30 + 16]> */
		/* 821225D4h case    4:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R30 + 0x00000010) );
		/* 821225D4h case    4:*/		return 0x821225D8;
	}
	return 0x821225D8;
} // Block from 821225C4h-821225D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821225D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821225D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821225D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821225D8);
		  /* 821225D8h */ case    0:  		/* li R5, 1 */
		/* 821225D8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821225D8h case    0:*/		return 0x821225DC;
		  /* 821225DCh */ case    1:  		/* lwz R4, <#[R30 + 16]> */
		/* 821225DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821225DCh case    1:*/		return 0x821225E0;
		  /* 821225E0h */ case    2:  		/* mr R3, R26 */
		/* 821225E0h case    2:*/		regs.R3 = regs.R26;
		/* 821225E0h case    2:*/		return 0x821225E4;
		  /* 821225E4h */ case    3:  		/* bl -33948 */
		/* 821225E4h case    3:*/		regs.LR = 0x821225E8; return 0x8211A148;
		/* 821225E4h case    3:*/		return 0x821225E8;
		  /* 821225E8h */ case    4:  		/* b -436 */
		/* 821225E8h case    4:*/		return 0x82122434;
		/* 821225E8h case    4:*/		return 0x821225EC;
	}
	return 0x821225EC;
} // Block from 821225D8h-821225ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821225ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821225EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821225EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821225EC);
		  /* 821225ECh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821225ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821225ECh case    0:*/		return 0x821225F0;
		  /* 821225F0h */ case    1:  		/* bc 12, CR6_EQ, -24 */
		/* 821225F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821225D8;  }
		/* 821225F0h case    1:*/		return 0x821225F4;
		  /* 821225F4h */ case    2:  		/* lwz R11, <#[R27]> */
		/* 821225F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821225F4h case    2:*/		return 0x821225F8;
		  /* 821225F8h */ case    3:  		/* mr R3, R27 */
		/* 821225F8h case    3:*/		regs.R3 = regs.R27;
		/* 821225F8h case    3:*/		return 0x821225FC;
		  /* 821225FCh */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 821225FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821225FCh case    4:*/		return 0x82122600;
		  /* 82122600h */ case    5:  		/* mtspr CTR, R11 */
		/* 82122600h case    5:*/		regs.CTR = regs.R11;
		/* 82122600h case    5:*/		return 0x82122604;
		  /* 82122604h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82122604h case    6:*/		if ( 1 ) { regs.LR = 0x82122608; return (uint32)regs.CTR; }
		/* 82122604h case    6:*/		return 0x82122608;
		  /* 82122608h */ case    7:  		/* stw R3, <#[R30 + 16]> */
		/* 82122608h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82122608h case    7:*/		return 0x8212260C;
		  /* 8212260Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8212260Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212260Ch case    8:*/		return 0x82122610;
		  /* 82122610h */ case    9:  		/* bc 12, CR0_EQ, 236 */
		/* 82122610h case    9:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 82122610h case    9:*/		return 0x82122614;
		  /* 82122614h */ case   10:  		/* b -60 */
		/* 82122614h case   10:*/		return 0x821225D8;
		/* 82122614h case   10:*/		return 0x82122618;
	}
	return 0x82122618;
} // Block from 821225ECh-82122618h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82122618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122618);
		  /* 82122618h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 82122618h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82122618h case    0:*/		return 0x8212261C;
		  /* 8212261Ch */ case    1:  		/* bc 12, CR6_EQ, -596 */
		/* 8212261Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821223C8;  }
		/* 8212261Ch case    1:*/		return 0x82122620;
		  /* 82122620h */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 82122620h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 82122620h case    2:*/		return 0x82122624;
		  /* 82122624h */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 82122624h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82122624h case    3:*/		return 0x82122628;
		  /* 82122628h */ case    4:  		/* bc 4, CR6_EQ, -1312 */
		/* 82122628h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82122108;  }
		/* 82122628h case    4:*/		return 0x8212262C;
		  /* 8212262Ch */ case    5:  		/* lwz R11, <#[R22 + 20]> */
		/* 8212262Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 8212262Ch case    5:*/		return 0x82122630;
		  /* 82122630h */ case    6:  		/* cmplwi CR6, R11, 10 */
		/* 82122630h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 82122630h case    6:*/		return 0x82122634;
		  /* 82122634h */ case    7:  		/* bc 12, CR6_LT, -620 */
		/* 82122634h case    7:*/		if ( regs.CR[6].lt ) { return 0x821223C8;  }
		/* 82122634h case    7:*/		return 0x82122638;
		  /* 82122638h */ case    8:  		/* b -1328 */
		/* 82122638h case    8:*/		return 0x82122108;
		/* 82122638h case    8:*/		return 0x8212263C;
	}
	return 0x8212263C;
} // Block from 82122618h-8212263Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8212263Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212263C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212263C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212263C);
		  /* 8212263Ch */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8212263Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8212263Ch case    0:*/		return 0x82122640;
		  /* 82122640h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82122640h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212265C;  }
		/* 82122640h case    1:*/		return 0x82122644;
		  /* 82122644h */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 82122644h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 82122644h case    2:*/		return 0x82122648;
		  /* 82122648h */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 82122648h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82122648h case    3:*/		return 0x8212264C;
		  /* 8212264Ch */ case    4:  		/* bc 4, CR6_EQ, -1348 */
		/* 8212264Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82122108;  }
		/* 8212264Ch case    4:*/		return 0x82122650;
		  /* 82122650h */ case    5:  		/* lwz R11, <#[R22 + 20]> */
		/* 82122650h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 82122650h case    5:*/		return 0x82122654;
		  /* 82122654h */ case    6:  		/* cmplwi CR6, R11, 10 */
		/* 82122654h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 82122654h case    6:*/		return 0x82122658;
		  /* 82122658h */ case    7:  		/* bc 4, CR6_LT, -1360 */
		/* 82122658h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82122108;  }
		/* 82122658h case    7:*/		return 0x8212265C;
	}
	return 0x8212265C;
} // Block from 8212263Ch-8212265Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212265Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212265C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212265C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212265C);
		  /* 8212265Ch */ case    0:  		/* li R6, 0 */
		/* 8212265Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212265Ch case    0:*/		return 0x82122660;
		  /* 82122660h */ case    1:  		/* mr R5, R22 */
		/* 82122660h case    1:*/		regs.R5 = regs.R22;
		/* 82122660h case    1:*/		return 0x82122664;
		  /* 82122664h */ case    2:  		/* mr R4, R27 */
		/* 82122664h case    2:*/		regs.R4 = regs.R27;
		/* 82122664h case    2:*/		return 0x82122668;
		  /* 82122668h */ case    3:  		/* mr R3, R26 */
		/* 82122668h case    3:*/		regs.R3 = regs.R26;
		/* 82122668h case    3:*/		return 0x8212266C;
		  /* 8212266Ch */ case    4:  		/* bl -21284 */
		/* 8212266Ch case    4:*/		regs.LR = 0x82122670; return 0x8211D348;
		/* 8212266Ch case    4:*/		return 0x82122670;
		  /* 82122670h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82122670h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122670h case    5:*/		return 0x82122674;
		  /* 82122674h */ case    6:  		/* bc 4, CR0_EQ, 104 */
		/* 82122674h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821226DC;  }
		/* 82122674h case    6:*/		return 0x82122678;
		  /* 82122678h */ case    7:  		/* li R8, 0 */
		/* 82122678h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82122678h case    7:*/		return 0x8212267C;
		  /* 8212267Ch */ case    8:  		/* mr R7, R22 */
		/* 8212267Ch case    8:*/		regs.R7 = regs.R22;
		/* 8212267Ch case    8:*/		return 0x82122680;
		  /* 82122680h */ case    9:  		/* mr R6, R27 */
		/* 82122680h case    9:*/		regs.R6 = regs.R27;
		/* 82122680h case    9:*/		return 0x82122684;
		  /* 82122684h */ case   10:  		/* li R5, 0 */
		/* 82122684h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122684h case   10:*/		return 0x82122688;
		  /* 82122688h */ case   11:  		/* mr R4, R23 */
		/* 82122688h case   11:*/		regs.R4 = regs.R23;
		/* 82122688h case   11:*/		return 0x8212268C;
		  /* 8212268Ch */ case   12:  		/* mr R3, R26 */
		/* 8212268Ch case   12:*/		regs.R3 = regs.R26;
		/* 8212268Ch case   12:*/		return 0x82122690;
		  /* 82122690h */ case   13:  		/* bl -20216 */
		/* 82122690h case   13:*/		regs.LR = 0x82122694; return 0x8211D798;
		/* 82122690h case   13:*/		return 0x82122694;
		  /* 82122694h */ case   14:  		/* b 104 */
		/* 82122694h case   14:*/		return 0x821226FC;
		/* 82122694h case   14:*/		return 0x82122698;
	}
	return 0x82122698;
} // Block from 8212265Ch-82122698h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82122698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122698);
		  /* 82122698h */ case    0:  		/* li R6, 0 */
		/* 82122698h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122698h case    0:*/		return 0x8212269C;
		  /* 8212269Ch */ case    1:  		/* mr R5, R22 */
		/* 8212269Ch case    1:*/		regs.R5 = regs.R22;
		/* 8212269Ch case    1:*/		return 0x821226A0;
		  /* 821226A0h */ case    2:  		/* mr R4, R27 */
		/* 821226A0h case    2:*/		regs.R4 = regs.R27;
		/* 821226A0h case    2:*/		return 0x821226A4;
		  /* 821226A4h */ case    3:  		/* mr R3, R26 */
		/* 821226A4h case    3:*/		regs.R3 = regs.R26;
		/* 821226A4h case    3:*/		return 0x821226A8;
		  /* 821226A8h */ case    4:  		/* bl -21344 */
		/* 821226A8h case    4:*/		regs.LR = 0x821226AC; return 0x8211D348;
		/* 821226A8h case    4:*/		return 0x821226AC;
		  /* 821226ACh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 821226ACh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821226ACh case    5:*/		return 0x821226B0;
		  /* 821226B0h */ case    6:  		/* bc 12, CR0_EQ, -56 */
		/* 821226B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82122678;  }
		/* 821226B0h case    6:*/		return 0x821226B4;
		  /* 821226B4h */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 821226B4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821226B4h case    7:*/		return 0x821226B8;
		  /* 821226B8h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 821226B8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821226DC;  }
		/* 821226B8h case    8:*/		return 0x821226BC;
		  /* 821226BCh */ case    9:  		/* lwz R11, <#[R27]> */
		/* 821226BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821226BCh case    9:*/		return 0x821226C0;
		  /* 821226C0h */ case   10:  		/* mr R3, R27 */
		/* 821226C0h case   10:*/		regs.R3 = regs.R27;
		/* 821226C0h case   10:*/		return 0x821226C4;
		  /* 821226C4h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821226C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821226C4h case   11:*/		return 0x821226C8;
		  /* 821226C8h */ case   12:  		/* mtspr CTR, R11 */
		/* 821226C8h case   12:*/		regs.CTR = regs.R11;
		/* 821226C8h case   12:*/		return 0x821226CC;
		  /* 821226CCh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 821226CCh case   13:*/		if ( 1 ) { regs.LR = 0x821226D0; return (uint32)regs.CTR; }
		/* 821226CCh case   13:*/		return 0x821226D0;
		  /* 821226D0h */ case   14:  		/* stw R3, <#[R30 + 16]> */
		/* 821226D0h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821226D0h case   14:*/		return 0x821226D4;
		  /* 821226D4h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 821226D4h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821226D4h case   15:*/		return 0x821226D8;
		  /* 821226D8h */ case   16:  		/* bc 12, CR0_EQ, 36 */
		/* 821226D8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821226FC;  }
		/* 821226D8h case   16:*/		return 0x821226DC;
	}
	return 0x821226DC;
} // Block from 82122698h-821226DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821226DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821226DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821226DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821226DC);
		  /* 821226DCh */ case    0:  		/* mr R21, R27 */
		/* 821226DCh case    0:*/		regs.R21 = regs.R27;
		/* 821226DCh case    0:*/		return 0x821226E0;
		  /* 821226E0h */ case    1:  		/* b -684 */
		/* 821226E0h case    1:*/		return 0x82122434;
		/* 821226E0h case    1:*/		return 0x821226E4;
	}
	return 0x821226E4;
} // Block from 821226DCh-821226E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821226E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821226E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821226E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821226E4);
		  /* 821226E4h */ case    0:  		/* lis R11, -32253 */
		/* 821226E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821226E4h case    0:*/		return 0x821226E8;
		  /* 821226E8h */ case    1:  		/* li R5, 3025 */
		/* 821226E8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBD1);
		/* 821226E8h case    1:*/		return 0x821226EC;
		  /* 821226ECh */ case    2:  		/* addi R6, R11, 10528 */
		/* 821226ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2920);
		/* 821226ECh case    2:*/		return 0x821226F0;
	}
	return 0x821226F0;
} // Block from 821226E4h-821226F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821226F0h
// Function '?ArrayExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821226F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821226F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821226F0);
		  /* 821226F0h */ case    0:  		/* mr R4, R23 */
		/* 821226F0h case    0:*/		regs.R4 = regs.R23;
		/* 821226F0h case    0:*/		return 0x821226F4;
		  /* 821226F4h */ case    1:  		/* mr R3, R26 */
		/* 821226F4h case    1:*/		regs.R3 = regs.R26;
		/* 821226F4h case    1:*/		return 0x821226F8;
		  /* 821226F8h */ case    2:  		/* bl -36440 */
		/* 821226F8h case    2:*/		regs.LR = 0x821226FC; return 0x821198A0;
		/* 821226F8h case    2:*/		return 0x821226FC;
	}
	return 0x821226FC;
} // Block from 821226F0h-821226FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821226FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821226FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821226FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821226FC);
		  /* 821226FCh */ case    0:  		/* mr R30, R20 */
		/* 821226FCh case    0:*/		regs.R30 = regs.R20;
		/* 821226FCh case    0:*/		return 0x82122700;
	}
	return 0x82122700;
} // Block from 821226FCh-82122700h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122700);
		  /* 82122700h */ case    0:  		/* mr R3, R30 */
		/* 82122700h case    0:*/		regs.R3 = regs.R30;
		/* 82122700h case    0:*/		return 0x82122704;
	}
	return 0x82122704;
} // Block from 82122700h-82122704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122704);
		  /* 82122704h */ case    0:  		/* addi R1, R1, 240 */
		/* 82122704h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82122704h case    0:*/		return 0x82122708;
		  /* 82122708h */ case    1:  		/* b -595072 */
		/* 82122708h case    1:*/		return 0x82091288;
		/* 82122708h case    1:*/		return 0x8212270C;
		  /* 8212270Ch */ case    2:  		/* nop */
		/* 8212270Ch case    2:*/		cpu::op::nop();
		/* 8212270Ch case    2:*/		return 0x82122710;
	}
	return 0x82122710;
} // Block from 82122704h-82122710h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122710);
		  /* 82122710h */ case    0:  		/* mfspr R12, LR */
		/* 82122710h case    0:*/		regs.R12 = regs.LR;
		/* 82122710h case    0:*/		return 0x82122714;
		  /* 82122714h */ case    1:  		/* bl -595128 */
		/* 82122714h case    1:*/		regs.LR = 0x82122718; return 0x8209125C;
		/* 82122714h case    1:*/		return 0x82122718;
		  /* 82122718h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82122718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82122718h case    2:*/		return 0x8212271C;
		  /* 8212271Ch */ case    3:  		/* lwz R11, <#[R3 + 32]> */
		/* 8212271Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8212271Ch case    3:*/		return 0x82122720;
		  /* 82122720h */ case    4:  		/* mr R31, R3 */
		/* 82122720h case    4:*/		regs.R31 = regs.R3;
		/* 82122720h case    4:*/		return 0x82122724;
		  /* 82122724h */ case    5:  		/* mr R29, R4 */
		/* 82122724h case    5:*/		regs.R29 = regs.R4;
		/* 82122724h case    5:*/		return 0x82122728;
		  /* 82122728h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82122728h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82122728h case    6:*/		return 0x8212272C;
		  /* 8212272Ch */ case    7:  		/* bc 12, CR6_EQ, 308 */
		/* 8212272Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82122860;  }
		/* 8212272Ch case    7:*/		return 0x82122730;
		  /* 82122730h */ case    8:  		/* li R3, 52 */
		/* 82122730h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82122730h case    8:*/		return 0x82122734;
		  /* 82122734h */ case    9:  		/* bl -365836 */
		/* 82122734h case    9:*/		regs.LR = 0x82122738; return 0x820C9228;
		/* 82122734h case    9:*/		return 0x82122738;
		  /* 82122738h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82122738h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122738h case   10:*/		return 0x8212273C;
		  /* 8212273Ch */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 8212273Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8212274C;  }
		/* 8212273Ch case   11:*/		return 0x82122740;
		  /* 82122740h */ case   12:  		/* bl -355600 */
		/* 82122740h case   12:*/		regs.LR = 0x82122744; return 0x820CBA30;
		/* 82122740h case   12:*/		return 0x82122744;
		  /* 82122744h */ case   13:  		/* mr R30, R3 */
		/* 82122744h case   13:*/		regs.R30 = regs.R3;
		/* 82122744h case   13:*/		return 0x82122748;
		  /* 82122748h */ case   14:  		/* b 8 */
		/* 82122748h case   14:*/		return 0x82122750;
		/* 82122748h case   14:*/		return 0x8212274C;
	}
	return 0x8212274C;
} // Block from 82122710h-8212274Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212274Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212274C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212274C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212274C);
		  /* 8212274Ch */ case    0:  		/* li R30, 0 */
		/* 8212274Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8212274Ch case    0:*/		return 0x82122750;
	}
	return 0x82122750;
} // Block from 8212274Ch-82122750h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122750);
		  /* 82122750h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82122750h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82122750h case    0:*/		return 0x82122754;
		  /* 82122754h */ case    1:  		/* bc 12, CR6_EQ, 268 */
		/* 82122754h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122860;  }
		/* 82122754h case    1:*/		return 0x82122758;
		  /* 82122758h */ case    2:  		/* li R11, 1 */
		/* 82122758h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82122758h case    2:*/		return 0x8212275C;
		  /* 8212275Ch */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 8212275Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212275Ch case    3:*/		return 0x82122760;
		  /* 82122760h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 82122760h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82122760h case    4:*/		return 0x82122764;
		  /* 82122764h */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 82122764h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82122764h case    5:*/		return 0x82122768;
		  /* 82122768h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 82122768h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82122768h case    6:*/		return 0x8212276C;
		  /* 8212276Ch */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 8212276Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 8212276Ch case    7:*/		return 0x82122770;
		  /* 82122770h */ case    8:  		/* addi R11, R11, 1 */
		/* 82122770h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82122770h case    8:*/		return 0x82122774;
		  /* 82122774h */ case    9:  		/* stw R11, <#[R31 + 120]> */
		/* 82122774h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82122774h case    9:*/		return 0x82122778;
		  /* 82122778h */ case   10:  		/* lwz R11, <#[R31 + 32]> */
		/* 82122778h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82122778h case   10:*/		return 0x8212277C;
		  /* 8212277Ch */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 8212277Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212279C;  }
		/* 8212277Ch case   11:*/		return 0x82122780;
		  /* 82122780h */ case   12:  		/* lwz R10, <#[R11 + 40]> */
		/* 82122780h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 82122780h case   12:*/		return 0x82122784;
		  /* 82122784h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 82122784h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82122784h case   13:*/		return 0x82122788;
		  /* 82122788h */ case   14:  		/* bc 4, CR6_EQ, 68 */
		/* 82122788h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821227CC;  }
		/* 82122788h case   14:*/		return 0x8212278C;
		  /* 8212278Ch */ case   15:  		/* lis R10, -32253 */
		/* 8212278Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212278Ch case   15:*/		return 0x82122790;
		  /* 82122790h */ case   16:  		/* li R5, 3079 */
		/* 82122790h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0xC07);
		/* 82122790h case   16:*/		return 0x82122794;
		  /* 82122794h */ case   17:  		/* addi R6, R10, 10848 */
		/* 82122794h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x2A60);
		/* 82122794h case   17:*/		return 0x82122798;
		  /* 82122798h */ case   18:  		/* b 28 */
		/* 82122798h case   18:*/		return 0x821227B4;
		/* 82122798h case   18:*/		return 0x8212279C;
	}
	return 0x8212279C;
} // Block from 82122750h-8212279Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212279Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212279C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212279C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212279C);
		  /* 8212279Ch */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 8212279Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8212279Ch case    0:*/		return 0x821227A0;
		  /* 821227A0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821227A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821227A0h case    1:*/		return 0x821227A4;
		  /* 821227A4h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821227A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821227EC;  }
		/* 821227A4h case    2:*/		return 0x821227A8;
		  /* 821227A8h */ case    3:  		/* lis R10, -32255 */
		/* 821227A8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821227A8h case    3:*/		return 0x821227AC;
		  /* 821227ACh */ case    4:  		/* li R5, 3080 */
		/* 821227ACh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xC08);
		/* 821227ACh case    4:*/		return 0x821227B0;
		  /* 821227B0h */ case    5:  		/* addi R6, R10, 9412 */
		/* 821227B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x24C4);
		/* 821227B0h case    5:*/		return 0x821227B4;
	}
	return 0x821227B4;
} // Block from 8212279Ch-821227B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821227B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821227B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821227B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821227B4);
		  /* 821227B4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821227B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821227B4h case    0:*/		return 0x821227B8;
		  /* 821227B8h */ case    1:  		/* addi R4, R31, 40 */
		/* 821227B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 821227B8h case    1:*/		return 0x821227BC;
		  /* 821227BCh */ case    2:  		/* mr R3, R31 */
		/* 821227BCh case    2:*/		regs.R3 = regs.R31;
		/* 821227BCh case    2:*/		return 0x821227C0;
		  /* 821227C0h */ case    3:  		/* lwz R7, <#[R11 + 20]> */
		/* 821227C0h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000014) );
		/* 821227C0h case    3:*/		return 0x821227C4;
		  /* 821227C4h */ case    4:  		/* bl -36644 */
		/* 821227C4h case    4:*/		regs.LR = 0x821227C8; return 0x821198A0;
		/* 821227C4h case    4:*/		return 0x821227C8;
		  /* 821227C8h */ case    5:  		/* b 36 */
		/* 821227C8h case    5:*/		return 0x821227EC;
		/* 821227C8h case    5:*/		return 0x821227CC;
	}
	return 0x821227CC;
} // Block from 821227B4h-821227CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821227CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821227CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821227CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821227CC);
		  /* 821227CCh */ case    0:  		/* li R8, 0 */
		/* 821227CCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821227CCh case    0:*/		return 0x821227D0;
		  /* 821227D0h */ case    1:  		/* lwz R5, <#[R11 + 52]> */
		/* 821227D0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000034) );
		/* 821227D0h case    1:*/		return 0x821227D4;
		  /* 821227D4h */ case    2:  		/* li R7, 1 */
		/* 821227D4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821227D4h case    2:*/		return 0x821227D8;
		  /* 821227D8h */ case    3:  		/* mr R6, R29 */
		/* 821227D8h case    3:*/		regs.R6 = regs.R29;
		/* 821227D8h case    3:*/		return 0x821227DC;
		  /* 821227DCh */ case    4:  		/* li R4, 27 */
		/* 821227DCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 821227DCh case    4:*/		return 0x821227E0;
		  /* 821227E0h */ case    5:  		/* mr R3, R31 */
		/* 821227E0h case    5:*/		regs.R3 = regs.R31;
		/* 821227E0h case    5:*/		return 0x821227E4;
		  /* 821227E4h */ case    6:  		/* bl -2452 */
		/* 821227E4h case    6:*/		regs.LR = 0x821227E8; return 0x82121E50;
		/* 821227E4h case    6:*/		return 0x821227E8;
		  /* 821227E8h */ case    7:  		/* stw R3, <#[R30 + 20]> */
		/* 821227E8h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821227E8h case    7:*/		return 0x821227EC;
	}
	return 0x821227EC;
} // Block from 821227CCh-821227ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821227ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821227EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821227EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821227EC);
		  /* 821227ECh */ case    0:  		/* li R3, 88 */
		/* 821227ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821227ECh case    0:*/		return 0x821227F0;
		  /* 821227F0h */ case    1:  		/* bl -366024 */
		/* 821227F0h case    1:*/		regs.LR = 0x821227F4; return 0x820C9228;
		/* 821227F0h case    1:*/		return 0x821227F4;
		  /* 821227F4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821227F4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821227F4h case    2:*/		return 0x821227F8;
		  /* 821227F8h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 821227F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212281C;  }
		/* 821227F8h case    3:*/		return 0x821227FC;
		  /* 821227FCh */ case    4:  		/* addi R9, R31, 40 */
		/* 821227FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 821227FCh case    4:*/		return 0x82122800;
		  /* 82122800h */ case    5:  		/* li R8, 1 */
		/* 82122800h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82122800h case    5:*/		return 0x82122804;
		  /* 82122804h */ case    6:  		/* li R7, 0 */
		/* 82122804h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82122804h case    6:*/		return 0x82122808;
		  /* 82122808h */ case    7:  		/* li R6, 0 */
		/* 82122808h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122808h case    7:*/		return 0x8212280C;
		  /* 8212280Ch */ case    8:  		/* li R5, 0 */
		/* 8212280Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212280Ch case    8:*/		return 0x82122810;
		  /* 82122810h */ case    9:  		/* li R4, 0 */
		/* 82122810h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82122810h case    9:*/		return 0x82122814;
		  /* 82122814h */ case   10:  		/* bl -354444 */
		/* 82122814h case   10:*/		regs.LR = 0x82122818; return 0x820CBF88;
		/* 82122814h case   10:*/		return 0x82122818;
		  /* 82122818h */ case   11:  		/* b 8 */
		/* 82122818h case   11:*/		return 0x82122820;
		/* 82122818h case   11:*/		return 0x8212281C;
	}
	return 0x8212281C;
} // Block from 821227ECh-8212281Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212281Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212281C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212281C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212281C);
		  /* 8212281Ch */ case    0:  		/* li R3, 0 */
		/* 8212281Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212281Ch case    0:*/		return 0x82122820;
	}
	return 0x82122820;
} // Block from 8212281Ch-82122820h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122820);
		  /* 82122820h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82122820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82122820h case    0:*/		return 0x82122824;
		  /* 82122824h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82122824h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122860;  }
		/* 82122824h case    1:*/		return 0x82122828;
		  /* 82122828h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 82122828h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82122828h case    2:*/		return 0x8212282C;
		  /* 8212282Ch */ case    3:  		/* li R3, 20 */
		/* 8212282Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8212282Ch case    3:*/		return 0x82122830;
		  /* 82122830h */ case    4:  		/* bl -366088 */
		/* 82122830h case    4:*/		regs.LR = 0x82122834; return 0x820C9228;
		/* 82122830h case    4:*/		return 0x82122834;
		  /* 82122834h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82122834h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122834h case    5:*/		return 0x82122838;
		  /* 82122838h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82122838h case    6:*/		if ( regs.CR[0].eq ) { return 0x82122854;  }
		/* 82122838h case    6:*/		return 0x8212283C;
		  /* 8212283Ch */ case    7:  		/* lis R11, -32255 */
		/* 8212283Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8212283Ch case    7:*/		return 0x82122840;
		  /* 82122840h */ case    8:  		/* li R5, 0 */
		/* 82122840h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122840h case    8:*/		return 0x82122844;
		  /* 82122844h */ case    9:  		/* addi R6, R11, 9252 */
		/* 82122844h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82122844h case    9:*/		return 0x82122848;
		  /* 82122848h */ case   10:  		/* mr R4, R30 */
		/* 82122848h case   10:*/		regs.R4 = regs.R30;
		/* 82122848h case   10:*/		return 0x8212284C;
		  /* 8212284Ch */ case   11:  		/* bl -365660 */
		/* 8212284Ch case   11:*/		regs.LR = 0x82122850; return 0x820C93F0;
		/* 8212284Ch case   11:*/		return 0x82122850;
		  /* 82122850h */ case   12:  		/* b 8 */
		/* 82122850h case   12:*/		return 0x82122858;
		/* 82122850h case   12:*/		return 0x82122854;
	}
	return 0x82122854;
} // Block from 82122820h-82122854h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82122854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122854);
		  /* 82122854h */ case    0:  		/* li R3, 0 */
		/* 82122854h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122854h case    0:*/		return 0x82122858;
	}
	return 0x82122858;
} // Block from 82122854h-82122858h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122858);
		  /* 82122858h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82122858h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82122858h case    0:*/		return 0x8212285C;
		  /* 8212285Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8212285Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82122864;  }
		/* 8212285Ch case    1:*/		return 0x82122860;
	}
	return 0x82122860;
} // Block from 82122858h-82122860h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122860);
		  /* 82122860h */ case    0:  		/* li R3, 0 */
		/* 82122860h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122860h case    0:*/		return 0x82122864;
	}
	return 0x82122864;
} // Block from 82122860h-82122864h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122864);
		  /* 82122864h */ case    0:  		/* addi R1, R1, 160 */
		/* 82122864h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82122864h case    0:*/		return 0x82122868;
		  /* 82122868h */ case    1:  		/* b -595388 */
		/* 82122868h case    1:*/		return 0x820912AC;
		/* 82122868h case    1:*/		return 0x8212286C;
		  /* 8212286Ch */ case    2:  		/* nop */
		/* 8212286Ch case    2:*/		cpu::op::nop();
		/* 8212286Ch case    2:*/		return 0x82122870;
	}
	return 0x82122870;
} // Block from 82122864h-82122870h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122870);
		  /* 82122870h */ case    0:  		/* mfspr R12, LR */
		/* 82122870h case    0:*/		regs.R12 = regs.LR;
		/* 82122870h case    0:*/		return 0x82122874;
		  /* 82122874h */ case    1:  		/* bl -595496 */
		/* 82122874h case    1:*/		regs.LR = 0x82122878; return 0x8209124C;
		/* 82122874h case    1:*/		return 0x82122878;
		  /* 82122878h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82122878h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82122878h case    2:*/		return 0x8212287C;
		  /* 8212287Ch */ case    3:  		/* mr R31, R3 */
		/* 8212287Ch case    3:*/		regs.R31 = regs.R3;
		/* 8212287Ch case    3:*/		return 0x82122880;
		  /* 82122880h */ case    4:  		/* mr R25, R4 */
		/* 82122880h case    4:*/		regs.R25 = regs.R4;
		/* 82122880h case    4:*/		return 0x82122884;
		  /* 82122884h */ case    5:  		/* mr R29, R5 */
		/* 82122884h case    5:*/		regs.R29 = regs.R5;
		/* 82122884h case    5:*/		return 0x82122888;
		  /* 82122888h */ case    6:  		/* mr R27, R6 */
		/* 82122888h case    6:*/		regs.R27 = regs.R6;
		/* 82122888h case    6:*/		return 0x8212288C;
		  /* 8212288Ch */ case    7:  		/* mr R26, R7 */
		/* 8212288Ch case    7:*/		regs.R26 = regs.R7;
		/* 8212288Ch case    7:*/		return 0x82122890;
		  /* 82122890h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 82122890h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82122890h case    8:*/		return 0x82122894;
		  /* 82122894h */ case    9:  		/* bc 12, CR6_EQ, 572 */
		/* 82122894h case    9:*/		if ( regs.CR[6].eq ) { return 0x82122AD0;  }
		/* 82122894h case    9:*/		return 0x82122898;
		  /* 82122898h */ case   10:  		/* lwz R11, <#[R5 + 24]> */
		/* 82122898h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000018) );
		/* 82122898h case   10:*/		return 0x8212289C;
		  /* 8212289Ch */ case   11:  		/* lwz R10, <#[R5 + 20]> */
		/* 8212289Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000014) );
		/* 8212289Ch case   11:*/		return 0x821228A0;
		  /* 821228A0h */ case   12:  		/* mullw R11, R11, R10 */
		/* 821228A0h case   12:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821228A0h case   12:*/		return 0x821228A4;
		  /* 821228A4h */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 821228A4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821228A4h case   13:*/		return 0x821228A8;
		  /* 821228A8h */ case   14:  		/* bc 4, CR6_EQ, 528 */
		/* 821228A8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82122AB8;  }
		/* 821228A8h case   14:*/		return 0x821228AC;
		  /* 821228ACh */ case   15:  		/* lwz R4, <#[R5 + 16]> */
		/* 821228ACh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000010) );
		/* 821228ACh case   15:*/		return 0x821228B0;
		  /* 821228B0h */ case   16:  		/* bl -34224 */
		/* 821228B0h case   16:*/		regs.LR = 0x821228B4; return 0x8211A300;
		/* 821228B0h case   16:*/		return 0x821228B4;
		  /* 821228B4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 821228B4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821228B4h case   17:*/		return 0x821228B8;
		  /* 821228B8h */ case   18:  		/* bc 12, CR0_EQ, 512 */
		/* 821228B8h case   18:*/		if ( regs.CR[0].eq ) { return 0x82122AB8;  }
		/* 821228B8h case   18:*/		return 0x821228BC;
		  /* 821228BCh */ case   19:  		/* li R3, 40 */
		/* 821228BCh case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821228BCh case   19:*/		return 0x821228C0;
		  /* 821228C0h */ case   20:  		/* bl -366232 */
		/* 821228C0h case   20:*/		regs.LR = 0x821228C4; return 0x820C9228;
		/* 821228C0h case   20:*/		return 0x821228C4;
		  /* 821228C4h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 821228C4h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821228C4h case   21:*/		return 0x821228C8;
		  /* 821228C8h */ case   22:  		/* bc 12, CR0_EQ, 40 */
		/* 821228C8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821228F0;  }
		/* 821228C8h case   22:*/		return 0x821228CC;
		  /* 821228CCh */ case   23:  		/* li R9, 512 */
		/* 821228CCh case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 821228CCh case   23:*/		return 0x821228D0;
		  /* 821228D0h */ case   24:  		/* li R8, 1 */
		/* 821228D0h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821228D0h case   24:*/		return 0x821228D4;
		  /* 821228D4h */ case   25:  		/* li R7, 1 */
		/* 821228D4h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821228D4h case   25:*/		return 0x821228D8;
		  /* 821228D8h */ case   26:  		/* li R6, 0 */
		/* 821228D8h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821228D8h case   26:*/		return 0x821228DC;
		  /* 821228DCh */ case   27:  		/* li R5, 0 */
		/* 821228DCh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821228DCh case   27:*/		return 0x821228E0;
		  /* 821228E0h */ case   28:  		/* li R4, 2 */
		/* 821228E0h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821228E0h case   28:*/		return 0x821228E4;
		  /* 821228E4h */ case   29:  		/* bl -359524 */
		/* 821228E4h case   29:*/		regs.LR = 0x821228E8; return 0x820CAC80;
		/* 821228E4h case   29:*/		return 0x821228E8;
		  /* 821228E8h */ case   30:  		/* mr R28, R3 */
		/* 821228E8h case   30:*/		regs.R28 = regs.R3;
		/* 821228E8h case   30:*/		return 0x821228EC;
		  /* 821228ECh */ case   31:  		/* b 8 */
		/* 821228ECh case   31:*/		return 0x821228F4;
		/* 821228ECh case   31:*/		return 0x821228F0;
	}
	return 0x821228F0;
} // Block from 82122870h-821228F0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821228F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821228F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821228F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821228F0);
		  /* 821228F0h */ case    0:  		/* li R28, 0 */
		/* 821228F0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821228F0h case    0:*/		return 0x821228F4;
	}
	return 0x821228F4;
} // Block from 821228F0h-821228F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821228F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821228F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821228F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821228F4);
		  /* 821228F4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821228F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821228F4h case    0:*/		return 0x821228F8;
		  /* 821228F8h */ case    1:  		/* bc 12, CR6_EQ, 472 */
		/* 821228F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122AD0;  }
		/* 821228F8h case    1:*/		return 0x821228FC;
		  /* 821228FCh */ case    2:  		/* li R6, 0 */
		/* 821228FCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821228FCh case    2:*/		return 0x82122900;
		  /* 82122900h */ case    3:  		/* lwz R5, <#[R29 + 16]> */
		/* 82122900h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000010) );
		/* 82122900h case    3:*/		return 0x82122904;
		  /* 82122904h */ case    4:  		/* mr R4, R28 */
		/* 82122904h case    4:*/		regs.R4 = regs.R28;
		/* 82122904h case    4:*/		return 0x82122908;
		  /* 82122908h */ case    5:  		/* mr R3, R31 */
		/* 82122908h case    5:*/		regs.R3 = regs.R31;
		/* 82122908h case    5:*/		return 0x8212290C;
		  /* 8212290Ch */ case    6:  		/* bl -21956 */
		/* 8212290Ch case    6:*/		regs.LR = 0x82122910; return 0x8211D348;
		/* 8212290Ch case    6:*/		return 0x82122910;
		  /* 82122910h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122910h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122910h case    7:*/		return 0x82122914;
		  /* 82122914h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 82122914h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82122930;  }
		/* 82122914h case    8:*/		return 0x82122918;
		  /* 82122918h */ case    9:  		/* lis R11, -32253 */
		/* 82122918h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122918h case    9:*/		return 0x8212291C;
		  /* 8212291Ch */ case   10:  		/* li R5, 3020 */
		/* 8212291Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 8212291Ch case   10:*/		return 0x82122920;
		  /* 82122920h */ case   11:  		/* addi R6, R11, 10956 */
		/* 82122920h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2ACC);
		/* 82122920h case   11:*/		return 0x82122924;
		  /* 82122924h */ case   12:  		/* addi R4, R29, 48 */
		/* 82122924h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122924h case   12:*/		return 0x82122928;
		  /* 82122928h */ case   13:  		/* mr R3, R31 */
		/* 82122928h case   13:*/		regs.R3 = regs.R31;
		/* 82122928h case   13:*/		return 0x8212292C;
		  /* 8212292Ch */ case   14:  		/* bl -37004 */
		/* 8212292Ch case   14:*/		regs.LR = 0x82122930; return 0x821198A0;
		/* 8212292Ch case   14:*/		return 0x82122930;
	}
	return 0x82122930;
} // Block from 821228F4h-82122930h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82122930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122930);
		  /* 82122930h */ case    0:  		/* li R5, 1 */
		/* 82122930h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82122930h case    0:*/		return 0x82122934;
		  /* 82122934h */ case    1:  		/* mr R4, R29 */
		/* 82122934h case    1:*/		regs.R4 = regs.R29;
		/* 82122934h case    1:*/		return 0x82122938;
		  /* 82122938h */ case    2:  		/* mr R3, R31 */
		/* 82122938h case    2:*/		regs.R3 = regs.R31;
		/* 82122938h case    2:*/		return 0x8212293C;
		  /* 8212293Ch */ case    3:  		/* bl -40876 */
		/* 8212293Ch case    3:*/		regs.LR = 0x82122940; return 0x82118990;
		/* 8212293Ch case    3:*/		return 0x82122940;
		  /* 82122940h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82122940h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122940h case    4:*/		return 0x82122944;
		  /* 82122944h */ case    5:  		/* bc 12, CR0_EQ, 92 */
		/* 82122944h case    5:*/		if ( regs.CR[0].eq ) { return 0x821229A0;  }
		/* 82122944h case    5:*/		return 0x82122948;
		  /* 82122948h */ case    6:  		/* addi R5, R1, 144 */
		/* 82122948h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 82122948h case    6:*/		return 0x8212294C;
		  /* 8212294Ch */ case    7:  		/* mr R4, R29 */
		/* 8212294Ch case    7:*/		regs.R4 = regs.R29;
		/* 8212294Ch case    7:*/		return 0x82122950;
		  /* 82122950h */ case    8:  		/* mr R3, R31 */
		/* 82122950h case    8:*/		regs.R3 = regs.R31;
		/* 82122950h case    8:*/		return 0x82122954;
		  /* 82122954h */ case    9:  		/* bl -15324 */
		/* 82122954h case    9:*/		regs.LR = 0x82122958; return 0x8211ED78;
		/* 82122954h case    9:*/		return 0x82122958;
		  /* 82122958h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82122958h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122958h case   10:*/		return 0x8212295C;
		  /* 8212295Ch */ case   11:  		/* bc 12, CR0_LT, 68 */
		/* 8212295Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x821229A0;  }
		/* 8212295Ch case   11:*/		return 0x82122960;
		  /* 82122960h */ case   12:  		/* addi R6, R29, 48 */
		/* 82122960h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R29,0x30);
		/* 82122960h case   12:*/		return 0x82122964;
		  /* 82122964h */ case   13:  		/* addi R5, R1, 144 */
		/* 82122964h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 82122964h case   13:*/		return 0x82122968;
		  /* 82122968h */ case   14:  		/* addi R4, R1, 128 */
		/* 82122968h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82122968h case   14:*/		return 0x8212296C;
		  /* 8212296Ch */ case   15:  		/* mr R3, R31 */
		/* 8212296Ch case   15:*/		regs.R3 = regs.R31;
		/* 8212296Ch case   15:*/		return 0x82122970;
		  /* 82122970h */ case   16:  		/* bl -41280 */
		/* 82122970h case   16:*/		regs.LR = 0x82122974; return 0x82118830;
		/* 82122970h case   16:*/		return 0x82122974;
		  /* 82122974h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82122974h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122974h case   17:*/		return 0x82122978;
		  /* 82122978h */ case   18:  		/* bc 12, CR0_LT, 40 */
		/* 82122978h case   18:*/		if ( regs.CR[0].lt ) { return 0x821229A0;  }
		/* 82122978h case   18:*/		return 0x8212297C;
		  /* 8212297Ch */ case   19:  		/* lis R11, -32256 */
		/* 8212297Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8212297Ch case   19:*/		return 0x82122980;
		  /* 82122980h */ case   20:  		/* lfd FR13, <#[R1 + 128]> */
		/* 82122980h case   20:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000080) );
		/* 82122980h case   20:*/		return 0x82122984;
		  /* 82122984h */ case   21:  		/* mr R3, R27 */
		/* 82122984h case   21:*/		regs.R3 = regs.R27;
		/* 82122984h case   21:*/		return 0x82122988;
		  /* 82122988h */ case   22:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 82122988h case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 82122988h case   22:*/		return 0x8212298C;
		  /* 8212298Ch */ case   23:  		/* fcmpu CR6, FR13, FR0 */
		/* 8212298Ch case   23:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8212298Ch case   23:*/		return 0x82122990;
		  /* 82122990h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 82122990h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82122998;  }
		/* 82122990h case   24:*/		return 0x82122994;
		  /* 82122994h */ case   25:  		/* mr R3, R26 */
		/* 82122994h case   25:*/		regs.R3 = regs.R26;
		/* 82122994h case   25:*/		return 0x82122998;
	}
	return 0x82122998;
} // Block from 82122930h-82122998h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82122998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122998);
		  /* 82122998h */ case    0:  		/* bl -366128 */
		/* 82122998h case    0:*/		regs.LR = 0x8212299C; return 0x820C9368;
		/* 82122998h case    0:*/		return 0x8212299C;
		  /* 8212299Ch */ case    1:  		/* b 312 */
		/* 8212299Ch case    1:*/		return 0x82122AD4;
		/* 8212299Ch case    1:*/		return 0x821229A0;
	}
	return 0x821229A0;
} // Block from 82122998h-821229A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821229A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821229A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821229A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821229A0);
		  /* 821229A0h */ case    0:  		/* li R3, 52 */
		/* 821229A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821229A0h case    0:*/		return 0x821229A4;
		  /* 821229A4h */ case    1:  		/* bl -366460 */
		/* 821229A4h case    1:*/		regs.LR = 0x821229A8; return 0x820C9228;
		/* 821229A4h case    1:*/		return 0x821229A8;
		  /* 821229A8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821229A8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821229A8h case    2:*/		return 0x821229AC;
		  /* 821229ACh */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821229ACh case    3:*/		if ( regs.CR[0].eq ) { return 0x821229BC;  }
		/* 821229ACh case    3:*/		return 0x821229B0;
		  /* 821229B0h */ case    4:  		/* bl -356224 */
		/* 821229B0h case    4:*/		regs.LR = 0x821229B4; return 0x820CBA30;
		/* 821229B0h case    4:*/		return 0x821229B4;
		  /* 821229B4h */ case    5:  		/* mr R30, R3 */
		/* 821229B4h case    5:*/		regs.R30 = regs.R3;
		/* 821229B4h case    5:*/		return 0x821229B8;
	}
	return 0x821229B8;
} // Block from 821229A0h-821229B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821229B8h
// Function '?Expr@CParse@D3DXShader@@IAAPAVCNode@2@W4_D3DEXPR_OP@2@PAV32@1HH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821229B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821229B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821229B8);
		  /* 821229B8h */ case    0:  		/* b 8 */
		/* 821229B8h case    0:*/		return 0x821229C0;
		/* 821229B8h case    0:*/		return 0x821229BC;
	}
	return 0x821229BC;
} // Block from 821229B8h-821229BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821229BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821229BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821229BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821229BC);
		  /* 821229BCh */ case    0:  		/* li R30, 0 */
		/* 821229BCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821229BCh case    0:*/		return 0x821229C0;
	}
	return 0x821229C0;
} // Block from 821229BCh-821229C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821229C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821229C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821229C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821229C0);
		  /* 821229C0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821229C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821229C0h case    0:*/		return 0x821229C4;
		  /* 821229C4h */ case    1:  		/* bc 12, CR6_EQ, 268 */
		/* 821229C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122AD0;  }
		/* 821229C4h case    1:*/		return 0x821229C8;
		  /* 821229C8h */ case    2:  		/* li R11, 2 */
		/* 821229C8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821229C8h case    2:*/		return 0x821229CC;
		  /* 821229CCh */ case    3:  		/* li R7, 0 */
		/* 821229CCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821229CCh case    3:*/		return 0x821229D0;
		  /* 821229D0h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821229D0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821229D0h case    4:*/		return 0x821229D4;
		  /* 821229D4h */ case    5:  		/* li R6, 0 */
		/* 821229D4h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821229D4h case    5:*/		return 0x821229D8;
		  /* 821229D8h */ case    6:  		/* lwz R11, <#[R31 + 120]> */
		/* 821229D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821229D8h case    6:*/		return 0x821229DC;
		  /* 821229DCh */ case    7:  		/* mr R5, R29 */
		/* 821229DCh case    7:*/		regs.R5 = regs.R29;
		/* 821229DCh case    7:*/		return 0x821229E0;
		  /* 821229E0h */ case    8:  		/* stw R11, <#[R30 + 48]> */
		/* 821229E0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821229E0h case    8:*/		return 0x821229E4;
		  /* 821229E4h */ case    9:  		/* mr R4, R28 */
		/* 821229E4h case    9:*/		regs.R4 = regs.R28;
		/* 821229E4h case    9:*/		return 0x821229E8;
		  /* 821229E8h */ case   10:  		/* lwz R11, <#[R31 + 120]> */
		/* 821229E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821229E8h case   10:*/		return 0x821229EC;
		  /* 821229ECh */ case   11:  		/* addi R11, R11, 1 */
		/* 821229ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821229ECh case   11:*/		return 0x821229F0;
		  /* 821229F0h */ case   12:  		/* stw R11, <#[R31 + 120]> */
		/* 821229F0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821229F0h case   12:*/		return 0x821229F4;
		  /* 821229F4h */ case   13:  		/* mr R3, R31 */
		/* 821229F4h case   13:*/		regs.R3 = regs.R31;
		/* 821229F4h case   13:*/		return 0x821229F8;
		  /* 821229F8h */ case   14:  		/* bl -6048 */
		/* 821229F8h case   14:*/		regs.LR = 0x821229FC; return 0x82121258;
		/* 821229F8h case   14:*/		return 0x821229FC;
		  /* 821229FCh */ case   15:  		/* stw R3, <#[R30 + 24]> */
		/* 821229FCh case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 821229FCh case   15:*/		return 0x82122A00;
		  /* 82122A00h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 82122A00h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122A00h case   16:*/		return 0x82122A04;
		  /* 82122A04h */ case   17:  		/* bc 12, CR0_EQ, 204 */
		/* 82122A04h case   17:*/		if ( regs.CR[0].eq ) { return 0x82122AD0;  }
		/* 82122A04h case   17:*/		return 0x82122A08;
		  /* 82122A08h */ case   18:  		/* cmplwi CR6, R27, 0 */
		/* 82122A08h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122A08h case   18:*/		return 0x82122A0C;
		  /* 82122A0Ch */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 82122A0Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82122A30;  }
		/* 82122A0Ch case   19:*/		return 0x82122A10;
		  /* 82122A10h */ case   20:  		/* lwz R11, <#[R27]> */
		/* 82122A10h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82122A10h case   20:*/		return 0x82122A14;
		  /* 82122A14h */ case   21:  		/* mr R3, R27 */
		/* 82122A14h case   21:*/		regs.R3 = regs.R27;
		/* 82122A14h case   21:*/		return 0x82122A18;
		  /* 82122A18h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122A18h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122A18h case   22:*/		return 0x82122A1C;
		  /* 82122A1Ch */ case   23:  		/* mtspr CTR, R11 */
		/* 82122A1Ch case   23:*/		regs.CTR = regs.R11;
		/* 82122A1Ch case   23:*/		return 0x82122A20;
		  /* 82122A20h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82122A20h case   24:*/		if ( 1 ) { regs.LR = 0x82122A24; return (uint32)regs.CTR; }
		/* 82122A20h case   24:*/		return 0x82122A24;
		  /* 82122A24h */ case   25:  		/* stw R3, <#[R30 + 28]> */
		/* 82122A24h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 82122A24h case   25:*/		return 0x82122A28;
		  /* 82122A28h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 82122A28h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122A28h case   26:*/		return 0x82122A2C;
		  /* 82122A2Ch */ case   27:  		/* bc 12, CR0_EQ, 164 */
		/* 82122A2Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x82122AD0;  }
		/* 82122A2Ch case   27:*/		return 0x82122A30;
	}
	return 0x82122A30;
} // Block from 821229C0h-82122A30h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82122A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122A30);
		  /* 82122A30h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82122A30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82122A30h case    0:*/		return 0x82122A34;
		  /* 82122A34h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82122A34h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122A58;  }
		/* 82122A34h case    1:*/		return 0x82122A38;
		  /* 82122A38h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 82122A38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82122A38h case    2:*/		return 0x82122A3C;
		  /* 82122A3Ch */ case    3:  		/* mr R3, R26 */
		/* 82122A3Ch case    3:*/		regs.R3 = regs.R26;
		/* 82122A3Ch case    3:*/		return 0x82122A40;
		  /* 82122A40h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122A40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122A40h case    4:*/		return 0x82122A44;
		  /* 82122A44h */ case    5:  		/* mtspr CTR, R11 */
		/* 82122A44h case    5:*/		regs.CTR = regs.R11;
		/* 82122A44h case    5:*/		return 0x82122A48;
		  /* 82122A48h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82122A48h case    6:*/		if ( 1 ) { regs.LR = 0x82122A4C; return (uint32)regs.CTR; }
		/* 82122A48h case    6:*/		return 0x82122A4C;
		  /* 82122A4Ch */ case    7:  		/* stw R3, <#[R30 + 32]> */
		/* 82122A4Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82122A4Ch case    7:*/		return 0x82122A50;
		  /* 82122A50h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82122A50h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122A50h case    8:*/		return 0x82122A54;
		  /* 82122A54h */ case    9:  		/* bc 12, CR0_EQ, 124 */
		/* 82122A54h case    9:*/		if ( regs.CR[0].eq ) { return 0x82122AD0;  }
		/* 82122A54h case    9:*/		return 0x82122A58;
	}
	return 0x82122A58;
} // Block from 82122A30h-82122A58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122A58);
		  /* 82122A58h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82122A58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82122A58h case    0:*/		return 0x82122A5C;
		  /* 82122A5Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82122A5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82122A80;  }
		/* 82122A5Ch case    1:*/		return 0x82122A60;
		  /* 82122A60h */ case    2:  		/* lwz R11, <#[R25]> */
		/* 82122A60h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82122A60h case    2:*/		return 0x82122A64;
		  /* 82122A64h */ case    3:  		/* mr R3, R25 */
		/* 82122A64h case    3:*/		regs.R3 = regs.R25;
		/* 82122A64h case    3:*/		return 0x82122A68;
		  /* 82122A68h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122A68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122A68h case    4:*/		return 0x82122A6C;
		  /* 82122A6Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 82122A6Ch case    5:*/		regs.CTR = regs.R11;
		/* 82122A6Ch case    5:*/		return 0x82122A70;
		  /* 82122A70h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82122A70h case    6:*/		if ( 1 ) { regs.LR = 0x82122A74; return (uint32)regs.CTR; }
		/* 82122A70h case    6:*/		return 0x82122A74;
		  /* 82122A74h */ case    7:  		/* stw R3, <#[R30 + 44]> */
		/* 82122A74h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 82122A74h case    7:*/		return 0x82122A78;
		  /* 82122A78h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82122A78h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122A78h case    8:*/		return 0x82122A7C;
		  /* 82122A7Ch */ case    9:  		/* bc 12, CR0_EQ, 84 */
		/* 82122A7Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82122AD0;  }
		/* 82122A7Ch case    9:*/		return 0x82122A80;
	}
	return 0x82122A80;
} // Block from 82122A58h-82122A80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122A80);
		  /* 82122A80h */ case    0:  		/* li R3, 20 */
		/* 82122A80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82122A80h case    0:*/		return 0x82122A84;
		  /* 82122A84h */ case    1:  		/* bl -366684 */
		/* 82122A84h case    1:*/		regs.LR = 0x82122A88; return 0x820C9228;
		/* 82122A84h case    1:*/		return 0x82122A88;
		  /* 82122A88h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82122A88h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122A88h case    2:*/		return 0x82122A8C;
		  /* 82122A8Ch */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82122A8Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82122AA8;  }
		/* 82122A8Ch case    3:*/		return 0x82122A90;
		  /* 82122A90h */ case    4:  		/* lis R11, -32255 */
		/* 82122A90h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82122A90h case    4:*/		return 0x82122A94;
		  /* 82122A94h */ case    5:  		/* li R5, 0 */
		/* 82122A94h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122A94h case    5:*/		return 0x82122A98;
		  /* 82122A98h */ case    6:  		/* addi R6, R11, 9252 */
		/* 82122A98h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82122A98h case    6:*/		return 0x82122A9C;
		  /* 82122A9Ch */ case    7:  		/* mr R4, R30 */
		/* 82122A9Ch case    7:*/		regs.R4 = regs.R30;
		/* 82122A9Ch case    7:*/		return 0x82122AA0;
		  /* 82122AA0h */ case    8:  		/* bl -366256 */
		/* 82122AA0h case    8:*/		regs.LR = 0x82122AA4; return 0x820C93F0;
		/* 82122AA0h case    8:*/		return 0x82122AA4;
		  /* 82122AA4h */ case    9:  		/* b 8 */
		/* 82122AA4h case    9:*/		return 0x82122AAC;
		/* 82122AA4h case    9:*/		return 0x82122AA8;
	}
	return 0x82122AA8;
} // Block from 82122A80h-82122AA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AA8);
		  /* 82122AA8h */ case    0:  		/* li R3, 0 */
		/* 82122AA8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122AA8h case    0:*/		return 0x82122AAC;
	}
	return 0x82122AAC;
} // Block from 82122AA8h-82122AACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AAC);
		  /* 82122AACh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82122AACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82122AACh case    0:*/		return 0x82122AB0;
		  /* 82122AB0h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 82122AB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122AD0;  }
		/* 82122AB0h case    1:*/		return 0x82122AB4;
		  /* 82122AB4h */ case    2:  		/* b 32 */
		/* 82122AB4h case    2:*/		return 0x82122AD4;
		/* 82122AB4h case    2:*/		return 0x82122AB8;
	}
	return 0x82122AB8;
} // Block from 82122AACh-82122AB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AB8);
		  /* 82122AB8h */ case    0:  		/* lis R11, -32253 */
		/* 82122AB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122AB8h case    0:*/		return 0x82122ABC;
		  /* 82122ABCh */ case    1:  		/* li R5, 3019 */
		/* 82122ABCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCB);
		/* 82122ABCh case    1:*/		return 0x82122AC0;
		  /* 82122AC0h */ case    2:  		/* addi R6, R11, 10892 */
		/* 82122AC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2A8C);
		/* 82122AC0h case    2:*/		return 0x82122AC4;
		  /* 82122AC4h */ case    3:  		/* addi R4, R29, 48 */
		/* 82122AC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122AC4h case    3:*/		return 0x82122AC8;
		  /* 82122AC8h */ case    4:  		/* mr R3, R31 */
		/* 82122AC8h case    4:*/		regs.R3 = regs.R31;
		/* 82122AC8h case    4:*/		return 0x82122ACC;
		  /* 82122ACCh */ case    5:  		/* bl -37420 */
		/* 82122ACCh case    5:*/		regs.LR = 0x82122AD0; return 0x821198A0;
		/* 82122ACCh case    5:*/		return 0x82122AD0;
	}
	return 0x82122AD0;
} // Block from 82122AB8h-82122AD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82122AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AD0);
		  /* 82122AD0h */ case    0:  		/* li R3, 0 */
		/* 82122AD0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122AD0h case    0:*/		return 0x82122AD4;
	}
	return 0x82122AD4;
} // Block from 82122AD0h-82122AD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AD4);
		  /* 82122AD4h */ case    0:  		/* addi R1, R1, 224 */
		/* 82122AD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82122AD4h case    0:*/		return 0x82122AD8;
		  /* 82122AD8h */ case    1:  		/* b -596028 */
		/* 82122AD8h case    1:*/		return 0x8209129C;
		/* 82122AD8h case    1:*/		return 0x82122ADC;
		  /* 82122ADCh */ case    2:  		/* nop */
		/* 82122ADCh case    2:*/		cpu::op::nop();
		/* 82122ADCh case    2:*/		return 0x82122AE0;
	}
	return 0x82122AE0;
} // Block from 82122AD4h-82122AE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122AE0);
		  /* 82122AE0h */ case    0:  		/* mfspr R12, LR */
		/* 82122AE0h case    0:*/		regs.R12 = regs.LR;
		/* 82122AE0h case    0:*/		return 0x82122AE4;
		  /* 82122AE4h */ case    1:  		/* bl -596116 */
		/* 82122AE4h case    1:*/		regs.LR = 0x82122AE8; return 0x82091250;
		/* 82122AE4h case    1:*/		return 0x82122AE8;
		  /* 82122AE8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82122AE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82122AE8h case    2:*/		return 0x82122AEC;
		  /* 82122AECh */ case    3:  		/* lwz R11, <#[R3 + 128]> */
		/* 82122AECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82122AECh case    3:*/		return 0x82122AF0;
		  /* 82122AF0h */ case    4:  		/* li R10, 1 */
		/* 82122AF0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82122AF0h case    4:*/		return 0x82122AF4;
		  /* 82122AF4h */ case    5:  		/* mr R31, R3 */
		/* 82122AF4h case    5:*/		regs.R31 = regs.R3;
		/* 82122AF4h case    5:*/		return 0x82122AF8;
		  /* 82122AF8h */ case    6:  		/* mr R27, R4 */
		/* 82122AF8h case    6:*/		regs.R27 = regs.R4;
		/* 82122AF8h case    6:*/		return 0x82122AFC;
		  /* 82122AFCh */ case    7:  		/* mr R29, R5 */
		/* 82122AFCh case    7:*/		regs.R29 = regs.R5;
		/* 82122AFCh case    7:*/		return 0x82122B00;
		  /* 82122B00h */ case    8:  		/* mr R26, R6 */
		/* 82122B00h case    8:*/		regs.R26 = regs.R6;
		/* 82122B00h case    8:*/		return 0x82122B04;
		  /* 82122B04h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 82122B04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82122B04h case    9:*/		return 0x82122B08;
		  /* 82122B08h */ case   10:  		/* stw R10, <#[R11 + 28]> */
		/* 82122B08h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82122B08h case   10:*/		return 0x82122B0C;
		  /* 82122B0Ch */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 82122B0Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82122BC8;  }
		/* 82122B0Ch case   11:*/		return 0x82122B10;
		  /* 82122B10h */ case   12:  		/* lwz R11, <#[R5 + 24]> */
		/* 82122B10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000018) );
		/* 82122B10h case   12:*/		return 0x82122B14;
		  /* 82122B14h */ case   13:  		/* lwz R10, <#[R5 + 20]> */
		/* 82122B14h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000014) );
		/* 82122B14h case   13:*/		return 0x82122B18;
		  /* 82122B18h */ case   14:  		/* mullw R11, R11, R10 */
		/* 82122B18h case   14:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82122B18h case   14:*/		return 0x82122B1C;
		  /* 82122B1Ch */ case   15:  		/* cmplwi CR6, R11, 1 */
		/* 82122B1Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82122B1Ch case   15:*/		return 0x82122B20;
		  /* 82122B20h */ case   16:  		/* bc 4, CR6_EQ, 140 */
		/* 82122B20h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82122BAC;  }
		/* 82122B20h case   16:*/		return 0x82122B24;
		  /* 82122B24h */ case   17:  		/* lwz R4, <#[R5 + 16]> */
		/* 82122B24h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000010) );
		/* 82122B24h case   17:*/		return 0x82122B28;
		  /* 82122B28h */ case   18:  		/* bl -34856 */
		/* 82122B28h case   18:*/		regs.LR = 0x82122B2C; return 0x8211A300;
		/* 82122B28h case   18:*/		return 0x82122B2C;
		  /* 82122B2Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 82122B2Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122B2Ch case   19:*/		return 0x82122B30;
		  /* 82122B30h */ case   20:  		/* bc 12, CR0_EQ, 124 */
		/* 82122B30h case   20:*/		if ( regs.CR[0].eq ) { return 0x82122BAC;  }
		/* 82122B30h case   20:*/		return 0x82122B34;
		  /* 82122B34h */ case   21:  		/* li R3, 40 */
		/* 82122B34h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82122B34h case   21:*/		return 0x82122B38;
		  /* 82122B38h */ case   22:  		/* bl -366864 */
		/* 82122B38h case   22:*/		regs.LR = 0x82122B3C; return 0x820C9228;
		/* 82122B38h case   22:*/		return 0x82122B3C;
		  /* 82122B3Ch */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 82122B3Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122B3Ch case   23:*/		return 0x82122B40;
		  /* 82122B40h */ case   24:  		/* bc 12, CR0_EQ, 40 */
		/* 82122B40h case   24:*/		if ( regs.CR[0].eq ) { return 0x82122B68;  }
		/* 82122B40h case   24:*/		return 0x82122B44;
		  /* 82122B44h */ case   25:  		/* li R9, 512 */
		/* 82122B44h case   25:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82122B44h case   25:*/		return 0x82122B48;
		  /* 82122B48h */ case   26:  		/* li R8, 1 */
		/* 82122B48h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82122B48h case   26:*/		return 0x82122B4C;
		  /* 82122B4Ch */ case   27:  		/* li R7, 1 */
		/* 82122B4Ch case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82122B4Ch case   27:*/		return 0x82122B50;
		  /* 82122B50h */ case   28:  		/* li R6, 0 */
		/* 82122B50h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122B50h case   28:*/		return 0x82122B54;
		  /* 82122B54h */ case   29:  		/* li R5, 9 */
		/* 82122B54h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82122B54h case   29:*/		return 0x82122B58;
		  /* 82122B58h */ case   30:  		/* li R4, 2 */
		/* 82122B58h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82122B58h case   30:*/		return 0x82122B5C;
		  /* 82122B5Ch */ case   31:  		/* bl -360156 */
		/* 82122B5Ch case   31:*/		regs.LR = 0x82122B60; return 0x820CAC80;
		/* 82122B5Ch case   31:*/		return 0x82122B60;
		  /* 82122B60h */ case   32:  		/* mr R28, R3 */
		/* 82122B60h case   32:*/		regs.R28 = regs.R3;
		/* 82122B60h case   32:*/		return 0x82122B64;
		  /* 82122B64h */ case   33:  		/* b 8 */
		/* 82122B64h case   33:*/		return 0x82122B6C;
		/* 82122B64h case   33:*/		return 0x82122B68;
	}
	return 0x82122B68;
} // Block from 82122AE0h-82122B68h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82122B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122B68);
		  /* 82122B68h */ case    0:  		/* li R28, 0 */
		/* 82122B68h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82122B68h case    0:*/		return 0x82122B6C;
	}
	return 0x82122B6C;
} // Block from 82122B68h-82122B6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122B6C);
		  /* 82122B6Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82122B6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82122B6Ch case    0:*/		return 0x82122B70;
		  /* 82122B70h */ case    1:  		/* bc 12, CR6_EQ, 344 */
		/* 82122B70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122CC8;  }
		/* 82122B70h case    1:*/		return 0x82122B74;
		  /* 82122B74h */ case    2:  		/* li R6, 0 */
		/* 82122B74h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122B74h case    2:*/		return 0x82122B78;
		  /* 82122B78h */ case    3:  		/* lwz R5, <#[R29 + 16]> */
		/* 82122B78h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000010) );
		/* 82122B78h case    3:*/		return 0x82122B7C;
		  /* 82122B7Ch */ case    4:  		/* mr R4, R28 */
		/* 82122B7Ch case    4:*/		regs.R4 = regs.R28;
		/* 82122B7Ch case    4:*/		return 0x82122B80;
		  /* 82122B80h */ case    5:  		/* mr R3, R31 */
		/* 82122B80h case    5:*/		regs.R3 = regs.R31;
		/* 82122B80h case    5:*/		return 0x82122B84;
		  /* 82122B84h */ case    6:  		/* bl -22588 */
		/* 82122B84h case    6:*/		regs.LR = 0x82122B88; return 0x8211D348;
		/* 82122B84h case    6:*/		return 0x82122B88;
		  /* 82122B88h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122B88h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122B88h case    7:*/		return 0x82122B8C;
		  /* 82122B8Ch */ case    8:  		/* bc 4, CR0_EQ, 64 */
		/* 82122B8Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82122BCC;  }
		/* 82122B8Ch case    8:*/		return 0x82122B90;
		  /* 82122B90h */ case    9:  		/* lis R11, -32253 */
		/* 82122B90h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122B90h case    9:*/		return 0x82122B94;
		  /* 82122B94h */ case   10:  		/* li R5, 3020 */
		/* 82122B94h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 82122B94h case   10:*/		return 0x82122B98;
		  /* 82122B98h */ case   11:  		/* addi R6, R11, 11016 */
		/* 82122B98h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2B08);
		/* 82122B98h case   11:*/		return 0x82122B9C;
		  /* 82122B9Ch */ case   12:  		/* addi R4, R29, 48 */
		/* 82122B9Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122B9Ch case   12:*/		return 0x82122BA0;
		  /* 82122BA0h */ case   13:  		/* mr R3, R31 */
		/* 82122BA0h case   13:*/		regs.R3 = regs.R31;
		/* 82122BA0h case   13:*/		return 0x82122BA4;
		  /* 82122BA4h */ case   14:  		/* bl -37636 */
		/* 82122BA4h case   14:*/		regs.LR = 0x82122BA8; return 0x821198A0;
		/* 82122BA4h case   14:*/		return 0x82122BA8;
		  /* 82122BA8h */ case   15:  		/* b 36 */
		/* 82122BA8h case   15:*/		return 0x82122BCC;
		/* 82122BA8h case   15:*/		return 0x82122BAC;
	}
	return 0x82122BAC;
} // Block from 82122B6Ch-82122BACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 82122BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122BAC);
		  /* 82122BACh */ case    0:  		/* lis R11, -32253 */
		/* 82122BACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122BACh case    0:*/		return 0x82122BB0;
		  /* 82122BB0h */ case    1:  		/* li R5, 3019 */
		/* 82122BB0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCB);
		/* 82122BB0h case    1:*/		return 0x82122BB4;
		  /* 82122BB4h */ case    2:  		/* addi R6, R11, 10992 */
		/* 82122BB4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2AF0);
		/* 82122BB4h case    2:*/		return 0x82122BB8;
		  /* 82122BB8h */ case    3:  		/* addi R4, R29, 48 */
		/* 82122BB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122BB8h case    3:*/		return 0x82122BBC;
		  /* 82122BBCh */ case    4:  		/* mr R3, R31 */
		/* 82122BBCh case    4:*/		regs.R3 = regs.R31;
		/* 82122BBCh case    4:*/		return 0x82122BC0;
		  /* 82122BC0h */ case    5:  		/* bl -37664 */
		/* 82122BC0h case    5:*/		regs.LR = 0x82122BC4; return 0x821198A0;
		/* 82122BC0h case    5:*/		return 0x82122BC4;
		  /* 82122BC4h */ case    6:  		/* b 260 */
		/* 82122BC4h case    6:*/		return 0x82122CC8;
		/* 82122BC4h case    6:*/		return 0x82122BC8;
	}
	return 0x82122BC8;
} // Block from 82122BACh-82122BC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82122BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122BC8);
		  /* 82122BC8h */ case    0:  		/* lwz R28, <#[R1 + 112]> */
		/* 82122BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 82122BC8h case    0:*/		return 0x82122BCC;
	}
	return 0x82122BCC;
} // Block from 82122BC8h-82122BCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122BCC);
		  /* 82122BCCh */ case    0:  		/* li R3, 52 */
		/* 82122BCCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82122BCCh case    0:*/		return 0x82122BD0;
		  /* 82122BD0h */ case    1:  		/* bl -367016 */
		/* 82122BD0h case    1:*/		regs.LR = 0x82122BD4; return 0x820C9228;
		/* 82122BD0h case    1:*/		return 0x82122BD4;
		  /* 82122BD4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82122BD4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122BD4h case    2:*/		return 0x82122BD8;
		  /* 82122BD8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82122BD8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82122BE8;  }
		/* 82122BD8h case    3:*/		return 0x82122BDC;
		  /* 82122BDCh */ case    4:  		/* bl -356780 */
		/* 82122BDCh case    4:*/		regs.LR = 0x82122BE0; return 0x820CBA30;
		/* 82122BDCh case    4:*/		return 0x82122BE0;
		  /* 82122BE0h */ case    5:  		/* mr R30, R3 */
		/* 82122BE0h case    5:*/		regs.R30 = regs.R3;
		/* 82122BE0h case    5:*/		return 0x82122BE4;
		  /* 82122BE4h */ case    6:  		/* b 8 */
		/* 82122BE4h case    6:*/		return 0x82122BEC;
		/* 82122BE4h case    6:*/		return 0x82122BE8;
	}
	return 0x82122BE8;
} // Block from 82122BCCh-82122BE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82122BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122BE8);
		  /* 82122BE8h */ case    0:  		/* li R30, 0 */
		/* 82122BE8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82122BE8h case    0:*/		return 0x82122BEC;
	}
	return 0x82122BEC;
} // Block from 82122BE8h-82122BECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122BEC);
		  /* 82122BECh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82122BECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82122BECh case    0:*/		return 0x82122BF0;
		  /* 82122BF0h */ case    1:  		/* bc 12, CR6_EQ, 216 */
		/* 82122BF0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122CC8;  }
		/* 82122BF0h case    1:*/		return 0x82122BF4;
		  /* 82122BF4h */ case    2:  		/* li R11, 12 */
		/* 82122BF4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 82122BF4h case    2:*/		return 0x82122BF8;
		  /* 82122BF8h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 82122BF8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82122BF8h case    3:*/		return 0x82122BFC;
		  /* 82122BFCh */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 82122BFCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82122BFCh case    4:*/		return 0x82122C00;
		  /* 82122C00h */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 82122C00h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82122C00h case    5:*/		return 0x82122C04;
		  /* 82122C04h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 82122C04h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82122C04h case    6:*/		return 0x82122C08;
		  /* 82122C08h */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 82122C08h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82122C08h case    7:*/		return 0x82122C0C;
		  /* 82122C0Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82122C0Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82122C0Ch case    8:*/		return 0x82122C10;
		  /* 82122C10h */ case    9:  		/* stw R11, <#[R31 + 120]> */
		/* 82122C10h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82122C10h case    9:*/		return 0x82122C14;
		  /* 82122C14h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 82122C14h case   10:*/		if ( regs.CR[6].eq ) { return 0x82122C44;  }
		/* 82122C14h case   10:*/		return 0x82122C18;
		  /* 82122C18h */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 82122C18h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82122C18h case   11:*/		return 0x82122C1C;
		  /* 82122C1Ch */ case   12:  		/* bc 12, CR6_EQ, 172 */
		/* 82122C1Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82122CC8;  }
		/* 82122C1Ch case   12:*/		return 0x82122C20;
		  /* 82122C20h */ case   13:  		/* li R7, 0 */
		/* 82122C20h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82122C20h case   13:*/		return 0x82122C24;
		  /* 82122C24h */ case   14:  		/* li R6, 0 */
		/* 82122C24h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122C24h case   14:*/		return 0x82122C28;
		  /* 82122C28h */ case   15:  		/* mr R5, R29 */
		/* 82122C28h case   15:*/		regs.R5 = regs.R29;
		/* 82122C28h case   15:*/		return 0x82122C2C;
		  /* 82122C2Ch */ case   16:  		/* mr R4, R28 */
		/* 82122C2Ch case   16:*/		regs.R4 = regs.R28;
		/* 82122C2Ch case   16:*/		return 0x82122C30;
		  /* 82122C30h */ case   17:  		/* mr R3, R31 */
		/* 82122C30h case   17:*/		regs.R3 = regs.R31;
		/* 82122C30h case   17:*/		return 0x82122C34;
		  /* 82122C34h */ case   18:  		/* bl -6620 */
		/* 82122C34h case   18:*/		regs.LR = 0x82122C38; return 0x82121258;
		/* 82122C34h case   18:*/		return 0x82122C38;
		  /* 82122C38h */ case   19:  		/* stw R3, <#[R30 + 24]> */
		/* 82122C38h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82122C38h case   19:*/		return 0x82122C3C;
		  /* 82122C3Ch */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 82122C3Ch case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122C3Ch case   20:*/		return 0x82122C40;
		  /* 82122C40h */ case   21:  		/* bc 12, CR0_EQ, 136 */
		/* 82122C40h case   21:*/		if ( regs.CR[0].eq ) { return 0x82122CC8;  }
		/* 82122C40h case   21:*/		return 0x82122C44;
	}
	return 0x82122C44;
} // Block from 82122BECh-82122C44h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82122C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122C44);
		  /* 82122C44h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82122C44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122C44h case    0:*/		return 0x82122C48;
		  /* 82122C48h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82122C48h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122C6C;  }
		/* 82122C48h case    1:*/		return 0x82122C4C;
		  /* 82122C4Ch */ case    2:  		/* lwz R11, <#[R27]> */
		/* 82122C4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82122C4Ch case    2:*/		return 0x82122C50;
		  /* 82122C50h */ case    3:  		/* mr R3, R27 */
		/* 82122C50h case    3:*/		regs.R3 = regs.R27;
		/* 82122C50h case    3:*/		return 0x82122C54;
		  /* 82122C54h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122C54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122C54h case    4:*/		return 0x82122C58;
		  /* 82122C58h */ case    5:  		/* mtspr CTR, R11 */
		/* 82122C58h case    5:*/		regs.CTR = regs.R11;
		/* 82122C58h case    5:*/		return 0x82122C5C;
		  /* 82122C5Ch */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82122C5Ch case    6:*/		if ( 1 ) { regs.LR = 0x82122C60; return (uint32)regs.CTR; }
		/* 82122C5Ch case    6:*/		return 0x82122C60;
		  /* 82122C60h */ case    7:  		/* stw R3, <#[R30 + 44]> */
		/* 82122C60h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 82122C60h case    7:*/		return 0x82122C64;
		  /* 82122C64h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82122C64h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122C64h case    8:*/		return 0x82122C68;
		  /* 82122C68h */ case    9:  		/* bc 12, CR0_EQ, 96 */
		/* 82122C68h case    9:*/		if ( regs.CR[0].eq ) { return 0x82122CC8;  }
		/* 82122C68h case    9:*/		return 0x82122C6C;
	}
	return 0x82122C6C;
} // Block from 82122C44h-82122C6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122C6C);
		  /* 82122C6Ch */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82122C6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82122C6Ch case    0:*/		return 0x82122C70;
		  /* 82122C70h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82122C70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122C94;  }
		/* 82122C70h case    1:*/		return 0x82122C74;
		  /* 82122C74h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 82122C74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82122C74h case    2:*/		return 0x82122C78;
		  /* 82122C78h */ case    3:  		/* mr R3, R26 */
		/* 82122C78h case    3:*/		regs.R3 = regs.R26;
		/* 82122C78h case    3:*/		return 0x82122C7C;
		  /* 82122C7Ch */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122C7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122C7Ch case    4:*/		return 0x82122C80;
		  /* 82122C80h */ case    5:  		/* mtspr CTR, R11 */
		/* 82122C80h case    5:*/		regs.CTR = regs.R11;
		/* 82122C80h case    5:*/		return 0x82122C84;
		  /* 82122C84h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82122C84h case    6:*/		if ( 1 ) { regs.LR = 0x82122C88; return (uint32)regs.CTR; }
		/* 82122C84h case    6:*/		return 0x82122C88;
		  /* 82122C88h */ case    7:  		/* stw R3, <#[R30 + 28]> */
		/* 82122C88h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 82122C88h case    7:*/		return 0x82122C8C;
		  /* 82122C8Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82122C8Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122C8Ch case    8:*/		return 0x82122C90;
		  /* 82122C90h */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 82122C90h case    9:*/		if ( regs.CR[0].eq ) { return 0x82122CC8;  }
		/* 82122C90h case    9:*/		return 0x82122C94;
	}
	return 0x82122C94;
} // Block from 82122C6Ch-82122C94h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122C94);
		  /* 82122C94h */ case    0:  		/* li R3, 20 */
		/* 82122C94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82122C94h case    0:*/		return 0x82122C98;
		  /* 82122C98h */ case    1:  		/* bl -367216 */
		/* 82122C98h case    1:*/		regs.LR = 0x82122C9C; return 0x820C9228;
		/* 82122C98h case    1:*/		return 0x82122C9C;
		  /* 82122C9Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82122C9Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122C9Ch case    2:*/		return 0x82122CA0;
		  /* 82122CA0h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82122CA0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82122CBC;  }
		/* 82122CA0h case    3:*/		return 0x82122CA4;
		  /* 82122CA4h */ case    4:  		/* lis R11, -32255 */
		/* 82122CA4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82122CA4h case    4:*/		return 0x82122CA8;
		  /* 82122CA8h */ case    5:  		/* li R5, 0 */
		/* 82122CA8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122CA8h case    5:*/		return 0x82122CAC;
		  /* 82122CACh */ case    6:  		/* addi R6, R11, 9252 */
		/* 82122CACh case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82122CACh case    6:*/		return 0x82122CB0;
		  /* 82122CB0h */ case    7:  		/* mr R4, R30 */
		/* 82122CB0h case    7:*/		regs.R4 = regs.R30;
		/* 82122CB0h case    7:*/		return 0x82122CB4;
		  /* 82122CB4h */ case    8:  		/* bl -366788 */
		/* 82122CB4h case    8:*/		regs.LR = 0x82122CB8; return 0x820C93F0;
		/* 82122CB4h case    8:*/		return 0x82122CB8;
		  /* 82122CB8h */ case    9:  		/* b 8 */
		/* 82122CB8h case    9:*/		return 0x82122CC0;
		/* 82122CB8h case    9:*/		return 0x82122CBC;
	}
	return 0x82122CBC;
} // Block from 82122C94h-82122CBCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122CBC);
		  /* 82122CBCh */ case    0:  		/* li R3, 0 */
		/* 82122CBCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122CBCh case    0:*/		return 0x82122CC0;
	}
	return 0x82122CC0;
} // Block from 82122CBCh-82122CC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122CC0);
		  /* 82122CC0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82122CC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82122CC0h case    0:*/		return 0x82122CC4;
		  /* 82122CC4h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82122CC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82122CCC;  }
		/* 82122CC4h case    1:*/		return 0x82122CC8;
	}
	return 0x82122CC8;
} // Block from 82122CC0h-82122CC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122CC8);
		  /* 82122CC8h */ case    0:  		/* li R3, 0 */
		/* 82122CC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122CC8h case    0:*/		return 0x82122CCC;
	}
	return 0x82122CCC;
} // Block from 82122CC8h-82122CCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122CCC);
		  /* 82122CCCh */ case    0:  		/* addi R1, R1, 176 */
		/* 82122CCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82122CCCh case    0:*/		return 0x82122CD0;
		  /* 82122CD0h */ case    1:  		/* b -596528 */
		/* 82122CD0h case    1:*/		return 0x820912A0;
		/* 82122CD0h case    1:*/		return 0x82122CD4;
		  /* 82122CD4h */ case    2:  		/* nop */
		/* 82122CD4h case    2:*/		cpu::op::nop();
		/* 82122CD4h case    2:*/		return 0x82122CD8;
	}
	return 0x82122CD8;
} // Block from 82122CCCh-82122CD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82122CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122CD8);
		  /* 82122CD8h */ case    0:  		/* mfspr R12, LR */
		/* 82122CD8h case    0:*/		regs.R12 = regs.LR;
		/* 82122CD8h case    0:*/		return 0x82122CDC;
		  /* 82122CDCh */ case    1:  		/* bl -596628 */
		/* 82122CDCh case    1:*/		regs.LR = 0x82122CE0; return 0x82091248;
		/* 82122CDCh case    1:*/		return 0x82122CE0;
		  /* 82122CE0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82122CE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82122CE0h case    2:*/		return 0x82122CE4;
		  /* 82122CE4h */ case    3:  		/* mr R30, R3 */
		/* 82122CE4h case    3:*/		regs.R30 = regs.R3;
		/* 82122CE4h case    3:*/		return 0x82122CE8;
		  /* 82122CE8h */ case    4:  		/* mr R26, R4 */
		/* 82122CE8h case    4:*/		regs.R26 = regs.R4;
		/* 82122CE8h case    4:*/		return 0x82122CEC;
		  /* 82122CECh */ case    5:  		/* mr R27, R5 */
		/* 82122CECh case    5:*/		regs.R27 = regs.R5;
		/* 82122CECh case    5:*/		return 0x82122CF0;
		  /* 82122CF0h */ case    6:  		/* mr R29, R6 */
		/* 82122CF0h case    6:*/		regs.R29 = regs.R6;
		/* 82122CF0h case    6:*/		return 0x82122CF4;
		  /* 82122CF4h */ case    7:  		/* mr R25, R7 */
		/* 82122CF4h case    7:*/		regs.R25 = regs.R7;
		/* 82122CF4h case    7:*/		return 0x82122CF8;
		  /* 82122CF8h */ case    8:  		/* mr R24, R8 */
		/* 82122CF8h case    8:*/		regs.R24 = regs.R8;
		/* 82122CF8h case    8:*/		return 0x82122CFC;
		  /* 82122CFCh */ case    9:  		/* li R28, 0 */
		/* 82122CFCh case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82122CFCh case    9:*/		return 0x82122D00;
		  /* 82122D00h */ case   10:  		/* cmplwi CR6, R6, 0 */
		/* 82122D00h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82122D00h case   10:*/		return 0x82122D04;
		  /* 82122D04h */ case   11:  		/* bc 12, CR6_EQ, 156 */
		/* 82122D04h case   11:*/		if ( regs.CR[6].eq ) { return 0x82122DA0;  }
		/* 82122D04h case   11:*/		return 0x82122D08;
		  /* 82122D08h */ case   12:  		/* lwz R11, <#[R6 + 24]> */
		/* 82122D08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000018) );
		/* 82122D08h case   12:*/		return 0x82122D0C;
		  /* 82122D0Ch */ case   13:  		/* lwz R10, <#[R6 + 20]> */
		/* 82122D0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000014) );
		/* 82122D0Ch case   13:*/		return 0x82122D10;
		  /* 82122D10h */ case   14:  		/* mullw R11, R11, R10 */
		/* 82122D10h case   14:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82122D10h case   14:*/		return 0x82122D14;
		  /* 82122D14h */ case   15:  		/* cmplwi CR6, R11, 1 */
		/* 82122D14h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82122D14h case   15:*/		return 0x82122D18;
		  /* 82122D18h */ case   16:  		/* bc 4, CR6_EQ, 164 */
		/* 82122D18h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82122DBC;  }
		/* 82122D18h case   16:*/		return 0x82122D1C;
		  /* 82122D1Ch */ case   17:  		/* lwz R4, <#[R6 + 16]> */
		/* 82122D1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x00000010) );
		/* 82122D1Ch case   17:*/		return 0x82122D20;
		  /* 82122D20h */ case   18:  		/* bl -35360 */
		/* 82122D20h case   18:*/		regs.LR = 0x82122D24; return 0x8211A300;
		/* 82122D20h case   18:*/		return 0x82122D24;
		  /* 82122D24h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 82122D24h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122D24h case   19:*/		return 0x82122D28;
		  /* 82122D28h */ case   20:  		/* bc 12, CR0_EQ, 148 */
		/* 82122D28h case   20:*/		if ( regs.CR[0].eq ) { return 0x82122DBC;  }
		/* 82122D28h case   20:*/		return 0x82122D2C;
		  /* 82122D2Ch */ case   21:  		/* li R3, 40 */
		/* 82122D2Ch case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82122D2Ch case   21:*/		return 0x82122D30;
		  /* 82122D30h */ case   22:  		/* bl -367368 */
		/* 82122D30h case   22:*/		regs.LR = 0x82122D34; return 0x820C9228;
		/* 82122D30h case   22:*/		return 0x82122D34;
		  /* 82122D34h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 82122D34h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122D34h case   23:*/		return 0x82122D38;
		  /* 82122D38h */ case   24:  		/* bc 12, CR0_EQ, 40 */
		/* 82122D38h case   24:*/		if ( regs.CR[0].eq ) { return 0x82122D60;  }
		/* 82122D38h case   24:*/		return 0x82122D3C;
		  /* 82122D3Ch */ case   25:  		/* li R9, 512 */
		/* 82122D3Ch case   25:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82122D3Ch case   25:*/		return 0x82122D40;
		  /* 82122D40h */ case   26:  		/* li R8, 1 */
		/* 82122D40h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82122D40h case   26:*/		return 0x82122D44;
		  /* 82122D44h */ case   27:  		/* li R7, 1 */
		/* 82122D44h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82122D44h case   27:*/		return 0x82122D48;
		  /* 82122D48h */ case   28:  		/* li R6, 0 */
		/* 82122D48h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122D48h case   28:*/		return 0x82122D4C;
		  /* 82122D4Ch */ case   29:  		/* li R5, 0 */
		/* 82122D4Ch case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122D4Ch case   29:*/		return 0x82122D50;
		  /* 82122D50h */ case   30:  		/* li R4, 2 */
		/* 82122D50h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82122D50h case   30:*/		return 0x82122D54;
		  /* 82122D54h */ case   31:  		/* bl -360660 */
		/* 82122D54h case   31:*/		regs.LR = 0x82122D58; return 0x820CAC80;
		/* 82122D54h case   31:*/		return 0x82122D58;
		  /* 82122D58h */ case   32:  		/* mr R28, R3 */
		/* 82122D58h case   32:*/		regs.R28 = regs.R3;
		/* 82122D58h case   32:*/		return 0x82122D5C;
		  /* 82122D5Ch */ case   33:  		/* b 8 */
		/* 82122D5Ch case   33:*/		return 0x82122D64;
		/* 82122D5Ch case   33:*/		return 0x82122D60;
	}
	return 0x82122D60;
} // Block from 82122CD8h-82122D60h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82122D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122D60);
		  /* 82122D60h */ case    0:  		/* li R28, 0 */
		/* 82122D60h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82122D60h case    0:*/		return 0x82122D64;
	}
	return 0x82122D64;
} // Block from 82122D60h-82122D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122D64);
		  /* 82122D64h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82122D64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82122D64h case    0:*/		return 0x82122D68;
		  /* 82122D68h */ case    1:  		/* bc 12, CR6_EQ, 380 */
		/* 82122D68h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122EE4;  }
		/* 82122D68h case    1:*/		return 0x82122D6C;
		  /* 82122D6Ch */ case    2:  		/* li R6, 0 */
		/* 82122D6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122D6Ch case    2:*/		return 0x82122D70;
		  /* 82122D70h */ case    3:  		/* lwz R5, <#[R29 + 16]> */
		/* 82122D70h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000010) );
		/* 82122D70h case    3:*/		return 0x82122D74;
		  /* 82122D74h */ case    4:  		/* mr R4, R28 */
		/* 82122D74h case    4:*/		regs.R4 = regs.R28;
		/* 82122D74h case    4:*/		return 0x82122D78;
		  /* 82122D78h */ case    5:  		/* mr R3, R30 */
		/* 82122D78h case    5:*/		regs.R3 = regs.R30;
		/* 82122D78h case    5:*/		return 0x82122D7C;
		  /* 82122D7Ch */ case    6:  		/* bl -23092 */
		/* 82122D7Ch case    6:*/		regs.LR = 0x82122D80; return 0x8211D348;
		/* 82122D7Ch case    6:*/		return 0x82122D80;
		  /* 82122D80h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82122D80h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122D80h case    7:*/		return 0x82122D84;
		  /* 82122D84h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 82122D84h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82122DA0;  }
		/* 82122D84h case    8:*/		return 0x82122D88;
		  /* 82122D88h */ case    9:  		/* lis R11, -32253 */
		/* 82122D88h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122D88h case    9:*/		return 0x82122D8C;
		  /* 82122D8Ch */ case   10:  		/* li R5, 3020 */
		/* 82122D8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 82122D8Ch case   10:*/		return 0x82122D90;
		  /* 82122D90h */ case   11:  		/* addi R6, R11, 10956 */
		/* 82122D90h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2ACC);
		/* 82122D90h case   11:*/		return 0x82122D94;
		  /* 82122D94h */ case   12:  		/* addi R4, R29, 48 */
		/* 82122D94h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122D94h case   12:*/		return 0x82122D98;
		  /* 82122D98h */ case   13:  		/* mr R3, R30 */
		/* 82122D98h case   13:*/		regs.R3 = regs.R30;
		/* 82122D98h case   13:*/		return 0x82122D9C;
		  /* 82122D9Ch */ case   14:  		/* bl -38140 */
		/* 82122D9Ch case   14:*/		regs.LR = 0x82122DA0; return 0x821198A0;
		/* 82122D9Ch case   14:*/		return 0x82122DA0;
	}
	return 0x82122DA0;
} // Block from 82122D64h-82122DA0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82122DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122DA0);
		  /* 82122DA0h */ case    0:  		/* li R3, 52 */
		/* 82122DA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82122DA0h case    0:*/		return 0x82122DA4;
		  /* 82122DA4h */ case    1:  		/* bl -367484 */
		/* 82122DA4h case    1:*/		regs.LR = 0x82122DA8; return 0x820C9228;
		/* 82122DA4h case    1:*/		return 0x82122DA8;
		  /* 82122DA8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82122DA8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122DA8h case    2:*/		return 0x82122DAC;
		  /* 82122DACh */ case    3:  		/* bc 12, CR0_EQ, 44 */
		/* 82122DACh case    3:*/		if ( regs.CR[0].eq ) { return 0x82122DD8;  }
		/* 82122DACh case    3:*/		return 0x82122DB0;
		  /* 82122DB0h */ case    4:  		/* bl -357248 */
		/* 82122DB0h case    4:*/		regs.LR = 0x82122DB4; return 0x820CBA30;
		/* 82122DB0h case    4:*/		return 0x82122DB4;
		  /* 82122DB4h */ case    5:  		/* mr R31, R3 */
		/* 82122DB4h case    5:*/		regs.R31 = regs.R3;
		/* 82122DB4h case    5:*/		return 0x82122DB8;
		  /* 82122DB8h */ case    6:  		/* b 36 */
		/* 82122DB8h case    6:*/		return 0x82122DDC;
		/* 82122DB8h case    6:*/		return 0x82122DBC;
	}
	return 0x82122DBC;
} // Block from 82122DA0h-82122DBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82122DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122DBC);
		  /* 82122DBCh */ case    0:  		/* lis R11, -32253 */
		/* 82122DBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82122DBCh case    0:*/		return 0x82122DC0;
		  /* 82122DC0h */ case    1:  		/* li R5, 3019 */
		/* 82122DC0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCB);
		/* 82122DC0h case    1:*/		return 0x82122DC4;
		  /* 82122DC4h */ case    2:  		/* addi R6, R11, 10992 */
		/* 82122DC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2AF0);
		/* 82122DC4h case    2:*/		return 0x82122DC8;
		  /* 82122DC8h */ case    3:  		/* addi R4, R29, 48 */
		/* 82122DC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x30);
		/* 82122DC8h case    3:*/		return 0x82122DCC;
		  /* 82122DCCh */ case    4:  		/* mr R3, R30 */
		/* 82122DCCh case    4:*/		regs.R3 = regs.R30;
		/* 82122DCCh case    4:*/		return 0x82122DD0;
		  /* 82122DD0h */ case    5:  		/* bl -38192 */
		/* 82122DD0h case    5:*/		regs.LR = 0x82122DD4; return 0x821198A0;
		/* 82122DD0h case    5:*/		return 0x82122DD4;
		  /* 82122DD4h */ case    6:  		/* b 272 */
		/* 82122DD4h case    6:*/		return 0x82122EE4;
		/* 82122DD4h case    6:*/		return 0x82122DD8;
	}
	return 0x82122DD8;
} // Block from 82122DBCh-82122DD8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82122DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122DD8);
		  /* 82122DD8h */ case    0:  		/* li R31, 0 */
		/* 82122DD8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82122DD8h case    0:*/		return 0x82122DDC;
	}
	return 0x82122DDC;
} // Block from 82122DD8h-82122DDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122DDC);
		  /* 82122DDCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82122DDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82122DDCh case    0:*/		return 0x82122DE0;
		  /* 82122DE0h */ case    1:  		/* bc 12, CR6_EQ, 260 */
		/* 82122DE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122EE4;  }
		/* 82122DE0h case    1:*/		return 0x82122DE4;
		  /* 82122DE4h */ case    2:  		/* li R11, 3 */
		/* 82122DE4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82122DE4h case    2:*/		return 0x82122DE8;
		  /* 82122DE8h */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 82122DE8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82122DE8h case    3:*/		return 0x82122DEC;
		  /* 82122DECh */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 82122DECh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82122DECh case    4:*/		return 0x82122DF0;
		  /* 82122DF0h */ case    5:  		/* lwz R11, <#[R30 + 120]> */
		/* 82122DF0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82122DF0h case    5:*/		return 0x82122DF4;
		  /* 82122DF4h */ case    6:  		/* stw R11, <#[R31 + 48]> */
		/* 82122DF4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82122DF4h case    6:*/		return 0x82122DF8;
		  /* 82122DF8h */ case    7:  		/* lwz R11, <#[R30 + 120]> */
		/* 82122DF8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82122DF8h case    7:*/		return 0x82122DFC;
		  /* 82122DFCh */ case    8:  		/* addi R11, R11, 1 */
		/* 82122DFCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82122DFCh case    8:*/		return 0x82122E00;
		  /* 82122E00h */ case    9:  		/* stw R11, <#[R30 + 120]> */
		/* 82122E00h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82122E00h case    9:*/		return 0x82122E04;
		  /* 82122E04h */ case   10:  		/* bc 4, CR6_EQ, 40 */
		/* 82122E04h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82122E2C;  }
		/* 82122E04h case   10:*/		return 0x82122E08;
		  /* 82122E08h */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 82122E08h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82122E08h case   11:*/		return 0x82122E0C;
		  /* 82122E0Ch */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 82122E0Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82122E18;  }
		/* 82122E0Ch case   12:*/		return 0x82122E10;
		  /* 82122E10h */ case   13:  		/* li R11, 4 */
		/* 82122E10h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82122E10h case   13:*/		return 0x82122E14;
		  /* 82122E14h */ case   14:  		/* b 20 */
		/* 82122E14h case   14:*/		return 0x82122E28;
		/* 82122E14h case   14:*/		return 0x82122E18;
	}
	return 0x82122E18;
} // Block from 82122DDCh-82122E18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82122E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122E18);
		  /* 82122E18h */ case    0:  		/* cmplw CR6, R27, R24 */
		/* 82122E18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 82122E18h case    0:*/		return 0x82122E1C;
		  /* 82122E1Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82122E1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82122E2C;  }
		/* 82122E1Ch case    1:*/		return 0x82122E20;
		  /* 82122E20h */ case    2:  		/* li R11, 5 */
		/* 82122E20h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82122E20h case    2:*/		return 0x82122E24;
		  /* 82122E24h */ case    3:  		/* li R27, 0 */
		/* 82122E24h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82122E24h case    3:*/		return 0x82122E28;
	}
	return 0x82122E28;
} // Block from 82122E18h-82122E28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82122E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122E28);
		  /* 82122E28h */ case    0:  		/* stw R11, <#[R31 + 16]> */
		/* 82122E28h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82122E28h case    0:*/		return 0x82122E2C;
	}
	return 0x82122E2C;
} // Block from 82122E28h-82122E2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122E2C);
		  /* 82122E2Ch */ case    0:  		/* stw R27, <#[R31 + 20]> */
		/* 82122E2Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000014) );
		/* 82122E2Ch case    0:*/		return 0x82122E30;
		  /* 82122E30h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82122E30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82122E30h case    1:*/		return 0x82122E34;
		  /* 82122E34h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 82122E34h case    2:*/		if ( regs.CR[6].eq ) { return 0x82122E64;  }
		/* 82122E34h case    2:*/		return 0x82122E38;
		  /* 82122E38h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 82122E38h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82122E38h case    3:*/		return 0x82122E3C;
		  /* 82122E3Ch */ case    4:  		/* bc 12, CR6_EQ, 168 */
		/* 82122E3Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82122EE4;  }
		/* 82122E3Ch case    4:*/		return 0x82122E40;
		  /* 82122E40h */ case    5:  		/* li R7, 0 */
		/* 82122E40h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82122E40h case    5:*/		return 0x82122E44;
		  /* 82122E44h */ case    6:  		/* li R6, 0 */
		/* 82122E44h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82122E44h case    6:*/		return 0x82122E48;
		  /* 82122E48h */ case    7:  		/* mr R5, R29 */
		/* 82122E48h case    7:*/		regs.R5 = regs.R29;
		/* 82122E48h case    7:*/		return 0x82122E4C;
		  /* 82122E4Ch */ case    8:  		/* mr R4, R28 */
		/* 82122E4Ch case    8:*/		regs.R4 = regs.R28;
		/* 82122E4Ch case    8:*/		return 0x82122E50;
		  /* 82122E50h */ case    9:  		/* mr R3, R30 */
		/* 82122E50h case    9:*/		regs.R3 = regs.R30;
		/* 82122E50h case    9:*/		return 0x82122E54;
		  /* 82122E54h */ case   10:  		/* bl -7164 */
		/* 82122E54h case   10:*/		regs.LR = 0x82122E58; return 0x82121258;
		/* 82122E54h case   10:*/		return 0x82122E58;
		  /* 82122E58h */ case   11:  		/* stw R3, <#[R31 + 24]> */
		/* 82122E58h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 82122E58h case   11:*/		return 0x82122E5C;
		  /* 82122E5Ch */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82122E5Ch case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122E5Ch case   12:*/		return 0x82122E60;
		  /* 82122E60h */ case   13:  		/* bc 12, CR0_EQ, 132 */
		/* 82122E60h case   13:*/		if ( regs.CR[0].eq ) { return 0x82122EE4;  }
		/* 82122E60h case   13:*/		return 0x82122E64;
	}
	return 0x82122E64;
} // Block from 82122E2Ch-82122E64h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82122E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122E64);
		  /* 82122E64h */ case    0:  		/* stw R24, <#[R31 + 28]> */
		/* 82122E64h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000001C) );
		/* 82122E64h case    0:*/		return 0x82122E68;
		  /* 82122E68h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 82122E68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82122E68h case    1:*/		return 0x82122E6C;
		  /* 82122E6Ch */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 82122E6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82122E90;  }
		/* 82122E6Ch case    2:*/		return 0x82122E70;
		  /* 82122E70h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 82122E70h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82122E70h case    3:*/		return 0x82122E74;
		  /* 82122E74h */ case    4:  		/* mr R3, R26 */
		/* 82122E74h case    4:*/		regs.R3 = regs.R26;
		/* 82122E74h case    4:*/		return 0x82122E78;
		  /* 82122E78h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 82122E78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82122E78h case    5:*/		return 0x82122E7C;
		  /* 82122E7Ch */ case    6:  		/* mtspr CTR, R11 */
		/* 82122E7Ch case    6:*/		regs.CTR = regs.R11;
		/* 82122E7Ch case    6:*/		return 0x82122E80;
		  /* 82122E80h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82122E80h case    7:*/		if ( 1 ) { regs.LR = 0x82122E84; return (uint32)regs.CTR; }
		/* 82122E80h case    7:*/		return 0x82122E84;
		  /* 82122E84h */ case    8:  		/* stw R3, <#[R31 + 44]> */
		/* 82122E84h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82122E84h case    8:*/		return 0x82122E88;
		  /* 82122E88h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82122E88h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122E88h case    9:*/		return 0x82122E8C;
		  /* 82122E8Ch */ case   10:  		/* bc 12, CR0_EQ, 88 */
		/* 82122E8Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82122EE4;  }
		/* 82122E8Ch case   10:*/		return 0x82122E90;
	}
	return 0x82122E90;
} // Block from 82122E64h-82122E90h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82122E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122E90);
		  /* 82122E90h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82122E90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82122E90h case    0:*/		return 0x82122E94;
		  /* 82122E94h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82122E94h case    1:*/		if ( regs.CR[6].eq ) { return 0x82122EB0;  }
		/* 82122E94h case    1:*/		return 0x82122E98;
		  /* 82122E98h */ case    2:  		/* mr R4, R25 */
		/* 82122E98h case    2:*/		regs.R4 = regs.R25;
		/* 82122E98h case    2:*/		return 0x82122E9C;
		  /* 82122E9Ch */ case    3:  		/* mr R3, R30 */
		/* 82122E9Ch case    3:*/		regs.R3 = regs.R30;
		/* 82122E9Ch case    3:*/		return 0x82122EA0;
		  /* 82122EA0h */ case    4:  		/* bl -40408 */
		/* 82122EA0h case    4:*/		regs.LR = 0x82122EA4; return 0x821190C8;
		/* 82122EA0h case    4:*/		return 0x82122EA4;
		  /* 82122EA4h */ case    5:  		/* stw R3, <#[R31 + 40]> */
		/* 82122EA4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82122EA4h case    5:*/		return 0x82122EA8;
		  /* 82122EA8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82122EA8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122EA8h case    6:*/		return 0x82122EAC;
		  /* 82122EACh */ case    7:  		/* bc 12, CR0_EQ, 56 */
		/* 82122EACh case    7:*/		if ( regs.CR[0].eq ) { return 0x82122EE4;  }
		/* 82122EACh case    7:*/		return 0x82122EB0;
	}
	return 0x82122EB0;
} // Block from 82122E90h-82122EB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82122EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122EB0);
		  /* 82122EB0h */ case    0:  		/* li R3, 20 */
		/* 82122EB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82122EB0h case    0:*/		return 0x82122EB4;
		  /* 82122EB4h */ case    1:  		/* bl -367756 */
		/* 82122EB4h case    1:*/		regs.LR = 0x82122EB8; return 0x820C9228;
		/* 82122EB4h case    1:*/		return 0x82122EB8;
		  /* 82122EB8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82122EB8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82122EB8h case    2:*/		return 0x82122EBC;
		  /* 82122EBCh */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82122EBCh case    3:*/		if ( regs.CR[0].eq ) { return 0x82122ED8;  }
		/* 82122EBCh case    3:*/		return 0x82122EC0;
		  /* 82122EC0h */ case    4:  		/* lis R11, -32255 */
		/* 82122EC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82122EC0h case    4:*/		return 0x82122EC4;
		  /* 82122EC4h */ case    5:  		/* li R5, 0 */
		/* 82122EC4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82122EC4h case    5:*/		return 0x82122EC8;
		  /* 82122EC8h */ case    6:  		/* addi R6, R11, 9252 */
		/* 82122EC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82122EC8h case    6:*/		return 0x82122ECC;
		  /* 82122ECCh */ case    7:  		/* mr R4, R31 */
		/* 82122ECCh case    7:*/		regs.R4 = regs.R31;
		/* 82122ECCh case    7:*/		return 0x82122ED0;
		  /* 82122ED0h */ case    8:  		/* bl -367328 */
		/* 82122ED0h case    8:*/		regs.LR = 0x82122ED4; return 0x820C93F0;
		/* 82122ED0h case    8:*/		return 0x82122ED4;
		  /* 82122ED4h */ case    9:  		/* b 8 */
		/* 82122ED4h case    9:*/		return 0x82122EDC;
		/* 82122ED4h case    9:*/		return 0x82122ED8;
	}
	return 0x82122ED8;
} // Block from 82122EB0h-82122ED8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82122ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122ED8);
		  /* 82122ED8h */ case    0:  		/* li R3, 0 */
		/* 82122ED8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122ED8h case    0:*/		return 0x82122EDC;
	}
	return 0x82122EDC;
} // Block from 82122ED8h-82122EDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122EDC);
		  /* 82122EDCh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82122EDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82122EDCh case    0:*/		return 0x82122EE0;
		  /* 82122EE0h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82122EE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82122EE8;  }
		/* 82122EE0h case    1:*/		return 0x82122EE4;
	}
	return 0x82122EE4;
} // Block from 82122EDCh-82122EE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122EE4);
		  /* 82122EE4h */ case    0:  		/* li R3, 0 */
		/* 82122EE4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82122EE4h case    0:*/		return 0x82122EE8;
	}
	return 0x82122EE8;
} // Block from 82122EE4h-82122EE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82122EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122EE8);
		  /* 82122EE8h */ case    0:  		/* addi R1, R1, 208 */
		/* 82122EE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82122EE8h case    0:*/		return 0x82122EEC;
		  /* 82122EECh */ case    1:  		/* b -597076 */
		/* 82122EECh case    1:*/		return 0x82091298;
		/* 82122EECh case    1:*/		return 0x82122EF0;
	}
	return 0x82122EF0;
} // Block from 82122EE8h-82122EF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122EF0);
		  /* 82122EF0h */ case    0:  		/* mfspr R12, LR */
		/* 82122EF0h case    0:*/		regs.R12 = regs.LR;
		/* 82122EF0h case    0:*/		return 0x82122EF4;
		  /* 82122EF4h */ case    1:  		/* bl -597152 */
		/* 82122EF4h case    1:*/		regs.LR = 0x82122EF8; return 0x82091254;
		/* 82122EF4h case    1:*/		return 0x82122EF8;
		  /* 82122EF8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82122EF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82122EF8h case    2:*/		return 0x82122EFC;
		  /* 82122EFCh */ case    3:  		/* mr R31, R3 */
		/* 82122EFCh case    3:*/		regs.R31 = regs.R3;
		/* 82122EFCh case    3:*/		return 0x82122F00;
		  /* 82122F00h */ case    4:  		/* addi R30, R3, 40 */
		/* 82122F00h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x28);
		/* 82122F00h case    4:*/		return 0x82122F04;
		  /* 82122F04h */ case    5:  		/* mr R4, R30 */
		/* 82122F04h case    5:*/		regs.R4 = regs.R30;
		/* 82122F04h case    5:*/		return 0x82122F08;
		  /* 82122F08h */ case    6:  		/* lwz R3, <#[R31 + 4]> */
		/* 82122F08h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82122F08h case    6:*/		return 0x82122F0C;
		  /* 82122F0Ch */ case    7:  		/* bl -517732 */
		/* 82122F0Ch case    7:*/		regs.LR = 0x82122F10; return 0x820A48A8;
		/* 82122F0Ch case    7:*/		return 0x82122F10;
		  /* 82122F10h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82122F10h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82122F10h case    8:*/		return 0x82122F14;
		  /* 82122F14h */ case    9:  		/* bc 4, CR0_LT, 28 */
		/* 82122F14h case    9:*/		if ( !regs.CR[0].lt ) { return 0x82122F30;  }
		/* 82122F14h case    9:*/		return 0x82122F18;
		  /* 82122F18h */ case   10:  		/* li R11, 1 */
		/* 82122F18h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82122F18h case   10:*/		return 0x82122F1C;
		  /* 82122F1Ch */ case   11:  		/* stw R3, <#[R31 + 88]> */
		/* 82122F1Ch case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82122F1Ch case   11:*/		return 0x82122F20;
		  /* 82122F20h */ case   12:  		/* stw R11, <#[R31 + 80]> */
		/* 82122F20h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82122F20h case   12:*/		return 0x82122F24;
		  /* 82122F24h */ case   13:  		/* li R3, -1 */
		/* 82122F24h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82122F24h case   13:*/		return 0x82122F28;
		  /* 82122F28h */ case   14:  		/* addi R1, R1, 160 */
		/* 82122F28h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82122F28h case   14:*/		return 0x82122F2C;
		  /* 82122F2Ch */ case   15:  		/* b -597128 */
		/* 82122F2Ch case   15:*/		return 0x820912A4;
		/* 82122F2Ch case   15:*/		return 0x82122F30;
	}
	return 0x82122F30;
} // Block from 82122EF0h-82122F30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82122F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122F30);
		  /* 82122F30h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82122F30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82122F30h case    0:*/		return 0x82122F34;
		  /* 82122F34h */ case    1:  		/* cmplwi CR6, R11, 17 */
		/* 82122F34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 82122F34h case    1:*/		return 0x82122F38;
		  /* 82122F38h */ case    2:  		/* bc 12, CR6_GT, -52 */
		/* 82122F38h case    2:*/		if ( regs.CR[6].gt ) { return 0x82122F04;  }
		/* 82122F38h case    2:*/		return 0x82122F3C;
		  /* 82122F3Ch */ case    3:  		/* lis R12, -32253 */
		/* 82122F3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82122F3Ch case    3:*/		return 0x82122F40;
		  /* 82122F40h */ case    4:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 82122F40h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 82122F40h case    4:*/		return 0x82122F44;
		  /* 82122F44h */ case    5:  		/* addi R12, R12, 5720 */
		/* 82122F44h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1658);
		/* 82122F44h case    5:*/		return 0x82122F48;
		  /* 82122F48h */ case    6:  		/* lhzx R0, <#[R12 + R0]> */
		/* 82122F48h case    6:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 82122F48h case    6:*/		return 0x82122F4C;
		  /* 82122F4Ch */ case    7:  		/* lis R12, -32238 */
		/* 82122F4Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 82122F4Ch case    7:*/		return 0x82122F50;
		  /* 82122F50h */ case    8:  		/* addi R12, R12, 12036 */
		/* 82122F50h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2F04);
		/* 82122F50h case    8:*/		return 0x82122F54;
		  /* 82122F54h */ case    9:  		/* ori R0, R0, 0 */
		/* 82122F54h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82122F54h case    9:*/		return 0x82122F58;
		  /* 82122F58h */ case   10:  		/* add R12, R12, R0 */
		/* 82122F58h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82122F58h case   10:*/		return 0x82122F5C;
		  /* 82122F5Ch */ case   11:  		/* mtspr CTR, R12 */
		/* 82122F5Ch case   11:*/		regs.CTR = regs.R12;
		/* 82122F5Ch case   11:*/		return 0x82122F60;
		  /* 82122F60h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 82122F60h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82122F60h case   12:*/		return 0x82122F64;
		  /* 82122F64h */ case   13:  		/* li R3, 386 */
		/* 82122F64h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x182);
		/* 82122F64h case   13:*/		return 0x82122F68;
		  /* 82122F68h */ case   14:  		/* b -64 */
		/* 82122F68h case   14:*/		return 0x82122F28;
		/* 82122F68h case   14:*/		return 0x82122F6C;
		  /* 82122F6Ch */ case   15:  		/* lbz R11, <#[R31 + 49]> */
		/* 82122F6Ch case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000031) );
		/* 82122F6Ch case   15:*/		return 0x82122F70;
		  /* 82122F70h */ case   16:  		/* extsb. R10, R11 */
		/* 82122F70h case   16:*/		cpu::op::extsb<1>(regs,&regs.R10,regs.R11);
		/* 82122F70h case   16:*/		return 0x82122F74;
		  /* 82122F74h */ case   17:  		/* bc 4, CR0_EQ, 16 */
		/* 82122F74h case   17:*/		if ( !regs.CR[0].eq ) { return 0x82122F84;  }
		/* 82122F74h case   17:*/		return 0x82122F78;
		  /* 82122F78h */ case   18:  		/* lbz R11, <#[R31 + 48]> */
		/* 82122F78h case   18:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82122F78h case   18:*/		return 0x82122F7C;
		  /* 82122F7Ch */ case   19:  		/* extsb R3, R11 */
		/* 82122F7Ch case   19:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 82122F7Ch case   19:*/		return 0x82122F80;
		  /* 82122F80h */ case   20:  		/* b -88 */
		/* 82122F80h case   20:*/		return 0x82122F28;
		/* 82122F80h case   20:*/		return 0x82122F84;
	}
	return 0x82122F84;
} // Block from 82122F30h-82122F84h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82122F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122F84);
		  /* 82122F84h */ case    0:  		/* lbz R11, <#[R31 + 50]> */
		/* 82122F84h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000032) );
		/* 82122F84h case    0:*/		return 0x82122F88;
		  /* 82122F88h */ case    1:  		/* extsb. R11, R11 */
		/* 82122F88h case    1:*/		cpu::op::extsb<1>(regs,&regs.R11,regs.R11);
		/* 82122F88h case    1:*/		return 0x82122F8C;
		  /* 82122F8Ch */ case    2:  		/* bc 4, CR0_EQ, 328 */
		/* 82122F8Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821230D4;  }
		/* 82122F8Ch case    2:*/		return 0x82122F90;
		  /* 82122F90h */ case    3:  		/* cmpwi CR6, R10, 61 */
		/* 82122F90h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000003D);
		/* 82122F90h case    3:*/		return 0x82122F94;
		  /* 82122F94h */ case    4:  		/* bc 4, CR6_EQ, 204 */
		/* 82122F94h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82123060;  }
		/* 82122F94h case    4:*/		return 0x82122F98;
		  /* 82122F98h */ case    5:  		/* lbz R11, <#[R31 + 48]> */
		/* 82122F98h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82122F98h case    5:*/		return 0x82122F9C;
		  /* 82122F9Ch */ case    6:  		/* cmplwi CR6, R11, 47 */
		/* 82122F9Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002F);
		/* 82122F9Ch case    6:*/		return 0x82122FA0;
		  /* 82122FA0h */ case    7:  		/* bc 12, CR6_GT, 112 */
		/* 82122FA0h case    7:*/		if ( regs.CR[6].gt ) { return 0x82123010;  }
		/* 82122FA0h case    7:*/		return 0x82122FA4;
		  /* 82122FA4h */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 82122FA4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82123008;  }
		/* 82122FA4h case    8:*/		return 0x82122FA8;
		  /* 82122FA8h */ case    9:  		/* cmplwi CR6, R11, 33 */
		/* 82122FA8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000021);
		/* 82122FA8h case    9:*/		return 0x82122FAC;
		  /* 82122FACh */ case   10:  		/* bc 12, CR6_EQ, 84 */
		/* 82122FACh case   10:*/		if ( regs.CR[6].eq ) { return 0x82123000;  }
		/* 82122FACh case   10:*/		return 0x82122FB0;
		  /* 82122FB0h */ case   11:  		/* cmplwi CR6, R11, 37 */
		/* 82122FB0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000025);
		/* 82122FB0h case   11:*/		return 0x82122FB4;
		  /* 82122FB4h */ case   12:  		/* bc 12, CR6_EQ, 68 */
		/* 82122FB4h case   12:*/		if ( regs.CR[6].eq ) { return 0x82122FF8;  }
		/* 82122FB4h case   12:*/		return 0x82122FB8;
		  /* 82122FB8h */ case   13:  		/* cmplwi CR6, R11, 38 */
		/* 82122FB8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000026);
		/* 82122FB8h case   13:*/		return 0x82122FBC;
		  /* 82122FBCh */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 82122FBCh case   14:*/		if ( regs.CR[6].eq ) { return 0x82122FF0;  }
		/* 82122FBCh case   14:*/		return 0x82122FC0;
		  /* 82122FC0h */ case   15:  		/* cmplwi CR6, R11, 42 */
		/* 82122FC0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002A);
		/* 82122FC0h case   15:*/		return 0x82122FC4;
		  /* 82122FC4h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 82122FC4h case   16:*/		if ( regs.CR[6].eq ) { return 0x82122FE8;  }
		/* 82122FC4h case   16:*/		return 0x82122FC8;
		  /* 82122FC8h */ case   17:  		/* cmplwi CR6, R11, 43 */
		/* 82122FC8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002B);
		/* 82122FC8h case   17:*/		return 0x82122FCC;
		  /* 82122FCCh */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 82122FCCh case   18:*/		if ( regs.CR[6].eq ) { return 0x82122FE0;  }
		/* 82122FCCh case   18:*/		return 0x82122FD0;
		  /* 82122FD0h */ case   19:  		/* cmplwi CR6, R11, 45 */
		/* 82122FD0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002D);
		/* 82122FD0h case   19:*/		return 0x82122FD4;
		  /* 82122FD4h */ case   20:  		/* bc 4, CR6_EQ, -112 */
		/* 82122FD4h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 82122FD4h case   20:*/		return 0x82122FD8;
		  /* 82122FD8h */ case   21:  		/* li R3, 368 */
		/* 82122FD8h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x170);
		/* 82122FD8h case   21:*/		return 0x82122FDC;
		  /* 82122FDCh */ case   22:  		/* b -180 */
		/* 82122FDCh case   22:*/		return 0x82122F28;
		/* 82122FDCh case   22:*/		return 0x82122FE0;
	}
	return 0x82122FE0;
} // Block from 82122F84h-82122FE0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82122FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122FE0);
		  /* 82122FE0h */ case    0:  		/* li R3, 367 */
		/* 82122FE0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x16F);
		/* 82122FE0h case    0:*/		return 0x82122FE4;
		  /* 82122FE4h */ case    1:  		/* b -188 */
		/* 82122FE4h case    1:*/		return 0x82122F28;
		/* 82122FE4h case    1:*/		return 0x82122FE8;
	}
	return 0x82122FE8;
} // Block from 82122FE0h-82122FE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122FE8);
		  /* 82122FE8h */ case    0:  		/* li R3, 364 */
		/* 82122FE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x16C);
		/* 82122FE8h case    0:*/		return 0x82122FEC;
		  /* 82122FECh */ case    1:  		/* b -196 */
		/* 82122FECh case    1:*/		return 0x82122F28;
		/* 82122FECh case    1:*/		return 0x82122FF0;
	}
	return 0x82122FF0;
} // Block from 82122FE8h-82122FF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122FF0);
		  /* 82122FF0h */ case    0:  		/* li R3, 373 */
		/* 82122FF0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x175);
		/* 82122FF0h case    0:*/		return 0x82122FF4;
		  /* 82122FF4h */ case    1:  		/* b -204 */
		/* 82122FF4h case    1:*/		return 0x82122F28;
		/* 82122FF4h case    1:*/		return 0x82122FF8;
	}
	return 0x82122FF8;
} // Block from 82122FF0h-82122FF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82122FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82122FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82122FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82122FF8);
		  /* 82122FF8h */ case    0:  		/* li R3, 366 */
		/* 82122FF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x16E);
		/* 82122FF8h case    0:*/		return 0x82122FFC;
		  /* 82122FFCh */ case    1:  		/* b -212 */
		/* 82122FFCh case    1:*/		return 0x82122F28;
		/* 82122FFCh case    1:*/		return 0x82123000;
	}
	return 0x82123000;
} // Block from 82122FF8h-82123000h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123000);
		  /* 82123000h */ case    0:  		/* li R3, 361 */
		/* 82123000h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x169);
		/* 82123000h case    0:*/		return 0x82123004;
		  /* 82123004h */ case    1:  		/* b -220 */
		/* 82123004h case    1:*/		return 0x82122F28;
		/* 82123004h case    1:*/		return 0x82123008;
	}
	return 0x82123008;
} // Block from 82123000h-82123008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123008);
		  /* 82123008h */ case    0:  		/* li R3, 365 */
		/* 82123008h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x16D);
		/* 82123008h case    0:*/		return 0x8212300C;
		  /* 8212300Ch */ case    1:  		/* b -228 */
		/* 8212300Ch case    1:*/		return 0x82122F28;
		/* 8212300Ch case    1:*/		return 0x82123010;
	}
	return 0x82123010;
} // Block from 82123008h-82123010h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123010);
		  /* 82123010h */ case    0:  		/* cmplwi CR6, R11, 60 */
		/* 82123010h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003C);
		/* 82123010h case    0:*/		return 0x82123014;
		  /* 82123014h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 82123014h case    1:*/		if ( regs.CR[6].eq ) { return 0x82123058;  }
		/* 82123014h case    1:*/		return 0x82123018;
		  /* 82123018h */ case    2:  		/* cmplwi CR6, R11, 61 */
		/* 82123018h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003D);
		/* 82123018h case    2:*/		return 0x8212301C;
		  /* 8212301Ch */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 8212301Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82123050;  }
		/* 8212301Ch case    3:*/		return 0x82123020;
		  /* 82123020h */ case    4:  		/* cmplwi CR6, R11, 62 */
		/* 82123020h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003E);
		/* 82123020h case    4:*/		return 0x82123024;
		  /* 82123024h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 82123024h case    5:*/		if ( regs.CR[6].eq ) { return 0x82123048;  }
		/* 82123024h case    5:*/		return 0x82123028;
		  /* 82123028h */ case    6:  		/* cmplwi CR6, R11, 94 */
		/* 82123028h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005E);
		/* 82123028h case    6:*/		return 0x8212302C;
		  /* 8212302Ch */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8212302Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82123040;  }
		/* 8212302Ch case    7:*/		return 0x82123030;
		  /* 82123030h */ case    8:  		/* cmplwi CR6, R11, 124 */
		/* 82123030h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 82123030h case    8:*/		return 0x82123034;
		  /* 82123034h */ case    9:  		/* bc 4, CR6_EQ, -208 */
		/* 82123034h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 82123034h case    9:*/		return 0x82123038;
		  /* 82123038h */ case   10:  		/* li R3, 374 */
		/* 82123038h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x176);
		/* 82123038h case   10:*/		return 0x8212303C;
		  /* 8212303Ch */ case   11:  		/* b -276 */
		/* 8212303Ch case   11:*/		return 0x82122F28;
		/* 8212303Ch case   11:*/		return 0x82123040;
	}
	return 0x82123040;
} // Block from 82123010h-82123040h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123040);
		  /* 82123040h */ case    0:  		/* li R3, 375 */
		/* 82123040h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x177);
		/* 82123040h case    0:*/		return 0x82123044;
		  /* 82123044h */ case    1:  		/* b -284 */
		/* 82123044h case    1:*/		return 0x82122F28;
		/* 82123044h case    1:*/		return 0x82123048;
	}
	return 0x82123048;
} // Block from 82123040h-82123048h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123048);
		  /* 82123048h */ case    0:  		/* li R3, 359 */
		/* 82123048h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x167);
		/* 82123048h case    0:*/		return 0x8212304C;
		  /* 8212304Ch */ case    1:  		/* b -292 */
		/* 8212304Ch case    1:*/		return 0x82122F28;
		/* 8212304Ch case    1:*/		return 0x82123050;
	}
	return 0x82123050;
} // Block from 82123048h-82123050h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123050);
		  /* 82123050h */ case    0:  		/* li R3, 360 */
		/* 82123050h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x168);
		/* 82123050h case    0:*/		return 0x82123054;
		  /* 82123054h */ case    1:  		/* b -300 */
		/* 82123054h case    1:*/		return 0x82122F28;
		/* 82123054h case    1:*/		return 0x82123058;
	}
	return 0x82123058;
} // Block from 82123050h-82123058h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123058);
		  /* 82123058h */ case    0:  		/* li R3, 358 */
		/* 82123058h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x166);
		/* 82123058h case    0:*/		return 0x8212305C;
		  /* 8212305Ch */ case    1:  		/* b -308 */
		/* 8212305Ch case    1:*/		return 0x82122F28;
		/* 8212305Ch case    1:*/		return 0x82123060;
	}
	return 0x82123060;
} // Block from 82123058h-82123060h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82123060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123060);
		  /* 82123060h */ case    0:  		/* lbz R11, <#[R31 + 48]> */
		/* 82123060h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82123060h case    0:*/		return 0x82123064;
		  /* 82123064h */ case    1:  		/* extsb R9, R11 */
		/* 82123064h case    1:*/		cpu::op::extsb<0>(regs,&regs.R9,regs.R11);
		/* 82123064h case    1:*/		return 0x82123068;
		  /* 82123068h */ case    2:  		/* cmpw CR6, R9, R10 */
		/* 82123068h case    2:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 82123068h case    2:*/		return 0x8212306C;
		  /* 8212306Ch */ case    3:  		/* bc 4, CR6_EQ, -264 */
		/* 8212306Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 8212306Ch case    3:*/		return 0x82123070;
		  /* 82123070h */ case    4:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 82123070h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82123070h case    4:*/		return 0x82123074;
		  /* 82123074h */ case    5:  		/* cmplwi CR6, R11, 38 */
		/* 82123074h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000026);
		/* 82123074h case    5:*/		return 0x82123078;
		  /* 82123078h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 82123078h case    6:*/		if ( regs.CR[6].eq ) { return 0x821230CC;  }
		/* 82123078h case    6:*/		return 0x8212307C;
		  /* 8212307Ch */ case    7:  		/* cmplwi CR6, R11, 43 */
		/* 8212307Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002B);
		/* 8212307Ch case    7:*/		return 0x82123080;
		  /* 82123080h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 82123080h case    8:*/		if ( regs.CR[6].eq ) { return 0x821230C4;  }
		/* 82123080h case    8:*/		return 0x82123084;
		  /* 82123084h */ case    9:  		/* cmplwi CR6, R11, 45 */
		/* 82123084h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002D);
		/* 82123084h case    9:*/		return 0x82123088;
		  /* 82123088h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82123088h case   10:*/		if ( regs.CR[6].eq ) { return 0x821230BC;  }
		/* 82123088h case   10:*/		return 0x8212308C;
		  /* 8212308Ch */ case   11:  		/* cmplwi CR6, R11, 60 */
		/* 8212308Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003C);
		/* 8212308Ch case   11:*/		return 0x82123090;
		  /* 82123090h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 82123090h case   12:*/		if ( regs.CR[6].eq ) { return 0x821230B4;  }
		/* 82123090h case   12:*/		return 0x82123094;
		  /* 82123094h */ case   13:  		/* cmplwi CR6, R11, 62 */
		/* 82123094h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003E);
		/* 82123094h case   13:*/		return 0x82123098;
		  /* 82123098h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 82123098h case   14:*/		if ( regs.CR[6].eq ) { return 0x821230AC;  }
		/* 82123098h case   14:*/		return 0x8212309C;
		  /* 8212309Ch */ case   15:  		/* cmplwi CR6, R11, 124 */
		/* 8212309Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 8212309Ch case   15:*/		return 0x821230A0;
		  /* 821230A0h */ case   16:  		/* bc 4, CR6_EQ, -316 */
		/* 821230A0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 821230A0h case   16:*/		return 0x821230A4;
		  /* 821230A4h */ case   17:  		/* li R3, 363 */
		/* 821230A4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x16B);
		/* 821230A4h case   17:*/		return 0x821230A8;
		  /* 821230A8h */ case   18:  		/* b -384 */
		/* 821230A8h case   18:*/		return 0x82122F28;
		/* 821230A8h case   18:*/		return 0x821230AC;
	}
	return 0x821230AC;
} // Block from 82123060h-821230ACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821230ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230AC);
		  /* 821230ACh */ case    0:  		/* li R3, 370 */
		/* 821230ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x172);
		/* 821230ACh case    0:*/		return 0x821230B0;
		  /* 821230B0h */ case    1:  		/* b -392 */
		/* 821230B0h case    1:*/		return 0x82122F28;
		/* 821230B0h case    1:*/		return 0x821230B4;
	}
	return 0x821230B4;
} // Block from 821230ACh-821230B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821230B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230B4);
		  /* 821230B4h */ case    0:  		/* li R3, 369 */
		/* 821230B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x171);
		/* 821230B4h case    0:*/		return 0x821230B8;
		  /* 821230B8h */ case    1:  		/* b -400 */
		/* 821230B8h case    1:*/		return 0x82122F28;
		/* 821230B8h case    1:*/		return 0x821230BC;
	}
	return 0x821230BC;
} // Block from 821230B4h-821230BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821230BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230BC);
		  /* 821230BCh */ case    0:  		/* li R3, 357 */
		/* 821230BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x165);
		/* 821230BCh case    0:*/		return 0x821230C0;
		  /* 821230C0h */ case    1:  		/* b -408 */
		/* 821230C0h case    1:*/		return 0x82122F28;
		/* 821230C0h case    1:*/		return 0x821230C4;
	}
	return 0x821230C4;
} // Block from 821230BCh-821230C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821230C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230C4);
		  /* 821230C4h */ case    0:  		/* li R3, 356 */
		/* 821230C4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x164);
		/* 821230C4h case    0:*/		return 0x821230C8;
		  /* 821230C8h */ case    1:  		/* b -416 */
		/* 821230C8h case    1:*/		return 0x82122F28;
		/* 821230C8h case    1:*/		return 0x821230CC;
	}
	return 0x821230CC;
} // Block from 821230C4h-821230CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821230CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230CC);
		  /* 821230CCh */ case    0:  		/* li R3, 362 */
		/* 821230CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x16A);
		/* 821230CCh case    0:*/		return 0x821230D0;
		  /* 821230D0h */ case    1:  		/* b -424 */
		/* 821230D0h case    1:*/		return 0x82122F28;
		/* 821230D0h case    1:*/		return 0x821230D4;
	}
	return 0x821230D4;
} // Block from 821230CCh-821230D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821230D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821230D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821230D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821230D4);
		  /* 821230D4h */ case    0:  		/* lbz R9, <#[R31 + 51]> */
		/* 821230D4h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000033) );
		/* 821230D4h case    0:*/		return 0x821230D8;
		  /* 821230D8h */ case    1:  		/* cmplwi CR0, R9, 0 */
		/* 821230D8h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821230D8h case    1:*/		return 0x821230DC;
		  /* 821230DCh */ case    2:  		/* bc 4, CR0_EQ, -376 */
		/* 821230DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821230DCh case    2:*/		return 0x821230E0;
		  /* 821230E0h */ case    3:  		/* cmpwi CR6, R11, 61 */
		/* 821230E0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003D);
		/* 821230E0h case    3:*/		return 0x821230E4;
		  /* 821230E4h */ case    4:  		/* bc 4, CR6_EQ, -384 */
		/* 821230E4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 821230E4h case    4:*/		return 0x821230E8;
		  /* 821230E8h */ case    5:  		/* lbz R11, <#[R31 + 48]> */
		/* 821230E8h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821230E8h case    5:*/		return 0x821230EC;
		  /* 821230ECh */ case    6:  		/* extsb R9, R11 */
		/* 821230ECh case    6:*/		cpu::op::extsb<0>(regs,&regs.R9,regs.R11);
		/* 821230ECh case    6:*/		return 0x821230F0;
		  /* 821230F0h */ case    7:  		/* cmpw CR6, R9, R10 */
		/* 821230F0h case    7:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 821230F0h case    7:*/		return 0x821230F4;
		  /* 821230F4h */ case    8:  		/* bc 4, CR6_EQ, -400 */
		/* 821230F4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 821230F4h case    8:*/		return 0x821230F8;
		  /* 821230F8h */ case    9:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821230F8h case    9:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821230F8h case    9:*/		return 0x821230FC;
		  /* 821230FCh */ case   10:  		/* cmplwi CR6, R11, 60 */
		/* 821230FCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003C);
		/* 821230FCh case   10:*/		return 0x82123100;
		  /* 82123100h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82123100h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123114;  }
		/* 82123100h case   11:*/		return 0x82123104;
		  /* 82123104h */ case   12:  		/* cmplwi CR6, R11, 62 */
		/* 82123104h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003E);
		/* 82123104h case   12:*/		return 0x82123108;
		  /* 82123108h */ case   13:  		/* bc 4, CR6_EQ, -420 */
		/* 82123108h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82122F64;  }
		/* 82123108h case   13:*/		return 0x8212310C;
		  /* 8212310Ch */ case   14:  		/* li R3, 372 */
		/* 8212310Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x174);
		/* 8212310Ch case   14:*/		return 0x82123110;
		  /* 82123110h */ case   15:  		/* b -488 */
		/* 82123110h case   15:*/		return 0x82122F28;
		/* 82123110h case   15:*/		return 0x82123114;
	}
	return 0x82123114;
} // Block from 821230D4h-82123114h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123114);
		  /* 82123114h */ case    0:  		/* li R3, 371 */
		/* 82123114h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x173);
		/* 82123114h case    0:*/		return 0x82123118;
		  /* 82123118h */ case    1:  		/* b -496 */
		/* 82123118h case    1:*/		return 0x82122F28;
		/* 82123118h case    1:*/		return 0x8212311C;
		  /* 8212311Ch */ case    2:  		/* li R3, 376 */
		/* 8212311Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x178);
		/* 8212311Ch case    2:*/		return 0x82123120;
		  /* 82123120h */ case    3:  		/* b -504 */
		/* 82123120h case    3:*/		return 0x82122F28;
		/* 82123120h case    3:*/		return 0x82123124;
		  /* 82123124h */ case    4:  		/* li R3, 377 */
		/* 82123124h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x179);
		/* 82123124h case    4:*/		return 0x82123128;
		  /* 82123128h */ case    5:  		/* b -512 */
		/* 82123128h case    5:*/		return 0x82122F28;
		/* 82123128h case    5:*/		return 0x8212312C;
		  /* 8212312Ch */ case    6:  		/* li R3, 378 */
		/* 8212312Ch case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x17A);
		/* 8212312Ch case    6:*/		return 0x82123130;
		  /* 82123130h */ case    7:  		/* b -520 */
		/* 82123130h case    7:*/		return 0x82122F28;
		/* 82123130h case    7:*/		return 0x82123134;
		  /* 82123134h */ case    8:  		/* li R3, 379 */
		/* 82123134h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x17B);
		/* 82123134h case    8:*/		return 0x82123138;
		  /* 82123138h */ case    9:  		/* b -528 */
		/* 82123138h case    9:*/		return 0x82122F28;
		/* 82123138h case    9:*/		return 0x8212313C;
		  /* 8212313Ch */ case   10:  		/* li R3, 380 */
		/* 8212313Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x17C);
		/* 8212313Ch case   10:*/		return 0x82123140;
		  /* 82123140h */ case   11:  		/* b -536 */
		/* 82123140h case   11:*/		return 0x82122F28;
		/* 82123140h case   11:*/		return 0x82123144;
		  /* 82123144h */ case   12:  		/* li R3, 381 */
		/* 82123144h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x17D);
		/* 82123144h case   12:*/		return 0x82123148;
		  /* 82123148h */ case   13:  		/* b -544 */
		/* 82123148h case   13:*/		return 0x82122F28;
		/* 82123148h case   13:*/		return 0x8212314C;
		  /* 8212314Ch */ case   14:  		/* li R3, 382 */
		/* 8212314Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x17E);
		/* 8212314Ch case   14:*/		return 0x82123150;
		  /* 82123150h */ case   15:  		/* b -552 */
		/* 82123150h case   15:*/		return 0x82122F28;
		/* 82123150h case   15:*/		return 0x82123154;
		  /* 82123154h */ case   16:  		/* lwz R3, <#[R31 + 48]> */
		/* 82123154h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82123154h case   16:*/		return 0x82123158;
		  /* 82123158h */ case   17:  		/* lis R11, -32253 */
		/* 82123158h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82123158h case   17:*/		return 0x8212315C;
		  /* 8212315Ch */ case   18:  		/* lis R10, -32253 */
		/* 8212315Ch case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212315Ch case   18:*/		return 0x82123160;
		  /* 82123160h */ case   19:  		/* addi R28, R11, 9564 */
		/* 82123160h case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x255C);
		/* 82123160h case   19:*/		return 0x82123164;
		  /* 82123164h */ case   20:  		/* lis R9, -32253 */
		/* 82123164h case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82123164h case   20:*/		return 0x82123168;
		  /* 82123168h */ case   21:  		/* addi R29, R10, 9588 */
		/* 82123168h case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x2574);
		/* 82123168h case   21:*/		return 0x8212316C;
		  /* 8212316Ch */ case   22:  		/* lbz R11, <#[R3]> */
		/* 8212316Ch case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8212316Ch case   22:*/		return 0x82123170;
		  /* 82123170h */ case   23:  		/* addi R27, R9, 12504 */
		/* 82123170h case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x30D8);
		/* 82123170h case   23:*/		return 0x82123174;
		  /* 82123174h */ case   24:  		/* addi R11, R11, -66 */
		/* 82123174h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFBE);
		/* 82123174h case   24:*/		return 0x82123178;
		  /* 82123178h */ case   25:  		/* cmplwi CR6, R11, 53 */
		/* 82123178h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000035);
		/* 82123178h case   25:*/		return 0x8212317C;
		  /* 8212317Ch */ case   26:  		/* bc 12, CR6_GT, 1612 */
		/* 8212317Ch case   26:*/		if ( regs.CR[6].gt ) { return 0x821237C8;  }
		/* 8212317Ch case   26:*/		return 0x82123180;
		  /* 82123180h */ case   27:  		/* lis R12, -32253 */
		/* 82123180h case   27:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82123180h case   27:*/		return 0x82123184;
		  /* 82123184h */ case   28:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 82123184h case   28:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 82123184h case   28:*/		return 0x82123188;
		  /* 82123188h */ case   29:  		/* addi R12, R12, 5608 */
		/* 82123188h case   29:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x15E8);
		/* 82123188h case   29:*/		return 0x8212318C;
		  /* 8212318Ch */ case   30:  		/* lhzx R0, <#[R12 + R0]> */
		/* 8212318Ch case   30:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 8212318Ch case   30:*/		return 0x82123190;
		  /* 82123190h */ case   31:  		/* lis R12, -32238 */
		/* 82123190h case   31:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 82123190h case   31:*/		return 0x82123194;
		  /* 82123194h */ case   32:  		/* addi R12, R12, 12712 */
		/* 82123194h case   32:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x31A8);
		/* 82123194h case   32:*/		return 0x82123198;
		  /* 82123198h */ case   33:  		/* ori R0, R0, 0 */
		/* 82123198h case   33:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82123198h case   33:*/		return 0x8212319C;
		  /* 8212319Ch */ case   34:  		/* add R12, R12, R0 */
		/* 8212319Ch case   34:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8212319Ch case   34:*/		return 0x821231A0;
		  /* 821231A0h */ case   35:  		/* mtspr CTR, R12 */
		/* 821231A0h case   35:*/		regs.CTR = regs.R12;
		/* 821231A0h case   35:*/		return 0x821231A4;
		  /* 821231A4h */ case   36:  		/* bcctr 20, CR0_LT */
		/* 821231A4h case   36:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821231A4h case   36:*/		return 0x821231A8;
		  /* 821231A8h */ case   37:  		/* lis R10, -32253 */
		/* 821231A8h case   37:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821231A8h case   37:*/		return 0x821231AC;
		  /* 821231ACh */ case   38:  		/* mr R11, R3 */
		/* 821231ACh case   38:*/		regs.R11 = regs.R3;
		/* 821231ACh case   38:*/		return 0x821231B0;
		  /* 821231B0h */ case   39:  		/* addi R10, R10, 12496 */
		/* 821231B0h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30D0);
		/* 821231B0h case   39:*/		return 0x821231B4;
		  /* 821231B4h */ case   40:  		/* lbz R9, <#[R11]> */
		/* 821231B4h case   40:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821231B4h case   40:*/		return 0x821231B8;
		  /* 821231B8h */ case   41:  		/* lbz R8, <#[R10]> */
		/* 821231B8h case   41:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821231B8h case   41:*/		return 0x821231BC;
		  /* 821231BCh */ case   42:  		/* cmpwi CR0, R9, 0 */
		/* 821231BCh case   42:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821231BCh case   42:*/		return 0x821231C0;
		  /* 821231C0h */ case   43:  		/* subf R9, R8, R9 */
		/* 821231C0h case   43:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821231C0h case   43:*/		return 0x821231C4;
		  /* 821231C4h */ case   44:  		/* bc 12, CR0_EQ, 20 */
		/* 821231C4h case   44:*/		if ( regs.CR[0].eq ) { return 0x821231D8;  }
		/* 821231C4h case   44:*/		return 0x821231C8;
		  /* 821231C8h */ case   45:  		/* addi R11, R11, 1 */
		/* 821231C8h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821231C8h case   45:*/		return 0x821231CC;
		  /* 821231CCh */ case   46:  		/* addi R10, R10, 1 */
		/* 821231CCh case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821231CCh case   46:*/		return 0x821231D0;
		  /* 821231D0h */ case   47:  		/* cmpwi CR6, R9, 0 */
		/* 821231D0h case   47:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821231D0h case   47:*/		return 0x821231D4;
		  /* 821231D4h */ case   48:  		/* bc 12, CR6_EQ, -32 */
		/* 821231D4h case   48:*/		if ( regs.CR[6].eq ) { return 0x821231B4;  }
		/* 821231D4h case   48:*/		return 0x821231D8;
	}
	return 0x821231D8;
} // Block from 82123114h-821231D8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821231D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821231D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821231D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821231D8);
		  /* 821231D8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821231D8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821231D8h case    0:*/		return 0x821231DC;
		  /* 821231DCh */ case    1:  		/* bc 12, CR0_EQ, -632 */
		/* 821231DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821231DCh case    1:*/		return 0x821231E0;
		  /* 821231E0h */ case    2:  		/* lis R10, -32253 */
		/* 821231E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821231E0h case    2:*/		return 0x821231E4;
		  /* 821231E4h */ case    3:  		/* mr R11, R3 */
		/* 821231E4h case    3:*/		regs.R11 = regs.R3;
		/* 821231E4h case    3:*/		return 0x821231E8;
		  /* 821231E8h */ case    4:  		/* addi R10, R10, 12480 */
		/* 821231E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30C0);
		/* 821231E8h case    4:*/		return 0x821231EC;
		  /* 821231ECh */ case    5:  		/* lbz R9, <#[R11]> */
		/* 821231ECh case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821231ECh case    5:*/		return 0x821231F0;
		  /* 821231F0h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 821231F0h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821231F0h case    6:*/		return 0x821231F4;
		  /* 821231F4h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 821231F4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821231F4h case    7:*/		return 0x821231F8;
		  /* 821231F8h */ case    8:  		/* subf R9, R8, R9 */
		/* 821231F8h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821231F8h case    8:*/		return 0x821231FC;
		  /* 821231FCh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821231FCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82123210;  }
		/* 821231FCh case    9:*/		return 0x82123200;
		  /* 82123200h */ case   10:  		/* addi R11, R11, 1 */
		/* 82123200h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123200h case   10:*/		return 0x82123204;
		  /* 82123204h */ case   11:  		/* addi R10, R10, 1 */
		/* 82123204h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123204h case   11:*/		return 0x82123208;
		  /* 82123208h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123208h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123208h case   12:*/		return 0x8212320C;
		  /* 8212320Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212320Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821231EC;  }
		/* 8212320Ch case   13:*/		return 0x82123210;
	}
	return 0x82123210;
} // Block from 821231D8h-82123210h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123210);
		  /* 82123210h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123210h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123210h case    0:*/		return 0x82123214;
		  /* 82123214h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123214h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123220;  }
		/* 82123214h case    1:*/		return 0x82123218;
		  /* 82123218h */ case    2:  		/* li R3, 258 */
		/* 82123218h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x102);
		/* 82123218h case    2:*/		return 0x8212321C;
		  /* 8212321Ch */ case    3:  		/* b -756 */
		/* 8212321Ch case    3:*/		return 0x82122F28;
		/* 8212321Ch case    3:*/		return 0x82123220;
	}
	return 0x82123220;
} // Block from 82123210h-82123220h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123220);
		  /* 82123220h */ case    0:  		/* mr R4, R27 */
		/* 82123220h case    0:*/		regs.R4 = regs.R27;
		/* 82123220h case    0:*/		return 0x82123224;
		  /* 82123224h */ case    1:  		/* bl -589300 */
		/* 82123224h case    1:*/		regs.LR = 0x82123228; return 0x82093430;
		/* 82123224h case    1:*/		return 0x82123228;
		  /* 82123228h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82123228h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82123228h case    2:*/		return 0x8212322C;
		  /* 8212322Ch */ case    3:  		/* bc 4, CR0_EQ, 1436 */
		/* 8212322Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212322Ch case    3:*/		return 0x82123230;
		  /* 82123230h */ case    4:  		/* li R3, 257 */
		/* 82123230h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x101);
		/* 82123230h case    4:*/		return 0x82123234;
		  /* 82123234h */ case    5:  		/* b -780 */
		/* 82123234h case    5:*/		return 0x82122F28;
		/* 82123234h case    5:*/		return 0x82123238;
		  /* 82123238h */ case    6:  		/* lis R10, -32255 */
		/* 82123238h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123238h case    6:*/		return 0x8212323C;
		  /* 8212323Ch */ case    7:  		/* mr R11, R3 */
		/* 8212323Ch case    7:*/		regs.R11 = regs.R3;
		/* 8212323Ch case    7:*/		return 0x82123240;
		  /* 82123240h */ case    8:  		/* addi R10, R10, -15832 */
		/* 82123240h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC228);
		/* 82123240h case    8:*/		return 0x82123244;
		  /* 82123244h */ case    9:  		/* lbz R9, <#[R11]> */
		/* 82123244h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123244h case    9:*/		return 0x82123248;
		  /* 82123248h */ case   10:  		/* lbz R8, <#[R10]> */
		/* 82123248h case   10:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123248h case   10:*/		return 0x8212324C;
		  /* 8212324Ch */ case   11:  		/* cmpwi CR0, R9, 0 */
		/* 8212324Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212324Ch case   11:*/		return 0x82123250;
		  /* 82123250h */ case   12:  		/* subf R9, R8, R9 */
		/* 82123250h case   12:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123250h case   12:*/		return 0x82123254;
		  /* 82123254h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 82123254h case   13:*/		if ( regs.CR[0].eq ) { return 0x82123268;  }
		/* 82123254h case   13:*/		return 0x82123258;
		  /* 82123258h */ case   14:  		/* addi R11, R11, 1 */
		/* 82123258h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123258h case   14:*/		return 0x8212325C;
		  /* 8212325Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 8212325Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212325Ch case   15:*/		return 0x82123260;
		  /* 82123260h */ case   16:  		/* cmpwi CR6, R9, 0 */
		/* 82123260h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123260h case   16:*/		return 0x82123264;
		  /* 82123264h */ case   17:  		/* bc 12, CR6_EQ, -32 */
		/* 82123264h case   17:*/		if ( regs.CR[6].eq ) { return 0x82123244;  }
		/* 82123264h case   17:*/		return 0x82123268;
	}
	return 0x82123268;
} // Block from 82123220h-82123268h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82123268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123268);
		  /* 82123268h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123268h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123268h case    0:*/		return 0x8212326C;
		  /* 8212326Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8212326Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123278;  }
		/* 8212326Ch case    1:*/		return 0x82123270;
		  /* 82123270h */ case    2:  		/* li R3, 260 */
		/* 82123270h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x104);
		/* 82123270h case    2:*/		return 0x82123274;
		  /* 82123274h */ case    3:  		/* b -844 */
		/* 82123274h case    3:*/		return 0x82122F28;
		/* 82123274h case    3:*/		return 0x82123278;
	}
	return 0x82123278;
} // Block from 82123268h-82123278h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123278h
// Function '?ReturnStmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123278);
		  /* 82123278h */ case    0:  		/* lis R10, -32255 */
		/* 82123278h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123278h case    0:*/		return 0x8212327C;
		  /* 8212327Ch */ case    1:  		/* mr R11, R3 */
		/* 8212327Ch case    1:*/		regs.R11 = regs.R3;
		/* 8212327Ch case    1:*/		return 0x82123280;
		  /* 82123280h */ case    2:  		/* addi R10, R10, -8360 */
		/* 82123280h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFDF58);
		/* 82123280h case    2:*/		return 0x82123284;
		  /* 82123284h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123284h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123284h case    3:*/		return 0x82123288;
		  /* 82123288h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123288h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123288h case    4:*/		return 0x8212328C;
		  /* 8212328Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212328Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212328Ch case    5:*/		return 0x82123290;
		  /* 82123290h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123290h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123290h case    6:*/		return 0x82123294;
		  /* 82123294h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123294h case    7:*/		if ( regs.CR[0].eq ) { return 0x821232A8;  }
		/* 82123294h case    7:*/		return 0x82123298;
		  /* 82123298h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123298h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123298h case    8:*/		return 0x8212329C;
		  /* 8212329Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212329Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212329Ch case    9:*/		return 0x821232A0;
		  /* 821232A0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821232A0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821232A0h case   10:*/		return 0x821232A4;
		  /* 821232A4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821232A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123284;  }
		/* 821232A4h case   11:*/		return 0x821232A8;
	}
	return 0x821232A8;
} // Block from 82123278h-821232A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821232A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821232A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821232A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821232A8);
		  /* 821232A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821232A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821232A8h case    0:*/		return 0x821232AC;
		  /* 821232ACh */ case    1:  		/* bc 4, CR0_EQ, 1308 */
		/* 821232ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821232ACh case    1:*/		return 0x821232B0;
		  /* 821232B0h */ case    2:  		/* li R3, 261 */
		/* 821232B0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x105);
		/* 821232B0h case    2:*/		return 0x821232B4;
		  /* 821232B4h */ case    3:  		/* b -908 */
		/* 821232B4h case    3:*/		return 0x82122F28;
		/* 821232B4h case    3:*/		return 0x821232B8;
		  /* 821232B8h */ case    4:  		/* lis R10, -32253 */
		/* 821232B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821232B8h case    4:*/		return 0x821232BC;
		  /* 821232BCh */ case    5:  		/* mr R11, R3 */
		/* 821232BCh case    5:*/		regs.R11 = regs.R3;
		/* 821232BCh case    5:*/		return 0x821232C0;
		  /* 821232C0h */ case    6:  		/* addi R10, R10, 12468 */
		/* 821232C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30B4);
		/* 821232C0h case    6:*/		return 0x821232C4;
		  /* 821232C4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821232C4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821232C4h case    7:*/		return 0x821232C8;
		  /* 821232C8h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 821232C8h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821232C8h case    8:*/		return 0x821232CC;
		  /* 821232CCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821232CCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821232CCh case    9:*/		return 0x821232D0;
		  /* 821232D0h */ case   10:  		/* subf R9, R8, R9 */
		/* 821232D0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821232D0h case   10:*/		return 0x821232D4;
		  /* 821232D4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821232D4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821232E8;  }
		/* 821232D4h case   11:*/		return 0x821232D8;
		  /* 821232D8h */ case   12:  		/* addi R11, R11, 1 */
		/* 821232D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821232D8h case   12:*/		return 0x821232DC;
		  /* 821232DCh */ case   13:  		/* addi R10, R10, 1 */
		/* 821232DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821232DCh case   13:*/		return 0x821232E0;
		  /* 821232E0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 821232E0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821232E0h case   14:*/		return 0x821232E4;
		  /* 821232E4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 821232E4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821232C4;  }
		/* 821232E4h case   15:*/		return 0x821232E8;
	}
	return 0x821232E8;
} // Block from 821232A8h-821232E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821232E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821232E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821232E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821232E8);
		  /* 821232E8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821232E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821232E8h case    0:*/		return 0x821232EC;
		  /* 821232ECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821232ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821232F8;  }
		/* 821232ECh case    1:*/		return 0x821232F0;
		  /* 821232F0h */ case    2:  		/* li R3, 259 */
		/* 821232F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x103);
		/* 821232F0h case    2:*/		return 0x821232F4;
		  /* 821232F4h */ case    3:  		/* b -972 */
		/* 821232F4h case    3:*/		return 0x82122F28;
		/* 821232F4h case    3:*/		return 0x821232F8;
	}
	return 0x821232F8;
} // Block from 821232E8h-821232F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821232F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821232F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821232F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821232F8);
		  /* 821232F8h */ case    0:  		/* lis R10, -32253 */
		/* 821232F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821232F8h case    0:*/		return 0x821232FC;
		  /* 821232FCh */ case    1:  		/* mr R11, R3 */
		/* 821232FCh case    1:*/		regs.R11 = regs.R3;
		/* 821232FCh case    1:*/		return 0x82123300;
		  /* 82123300h */ case    2:  		/* addi R10, R10, 8576 */
		/* 82123300h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 82123300h case    2:*/		return 0x82123304;
		  /* 82123304h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123304h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123304h case    3:*/		return 0x82123308;
		  /* 82123308h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123308h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123308h case    4:*/		return 0x8212330C;
		  /* 8212330Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212330Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212330Ch case    5:*/		return 0x82123310;
		  /* 82123310h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123310h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123310h case    6:*/		return 0x82123314;
		  /* 82123314h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123314h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123328;  }
		/* 82123314h case    7:*/		return 0x82123318;
		  /* 82123318h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123318h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123318h case    8:*/		return 0x8212331C;
		  /* 8212331Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212331Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212331Ch case    9:*/		return 0x82123320;
		  /* 82123320h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123320h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123320h case   10:*/		return 0x82123324;
		  /* 82123324h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123324h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123304;  }
		/* 82123324h case   11:*/		return 0x82123328;
	}
	return 0x82123328;
} // Block from 821232F8h-82123328h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123328);
		  /* 82123328h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123328h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123328h case    0:*/		return 0x8212332C;
		  /* 8212332Ch */ case    1:  		/* bc 4, CR0_EQ, 1180 */
		/* 8212332Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212332Ch case    1:*/		return 0x82123330;
		  /* 82123330h */ case    2:  		/* li R3, 262 */
		/* 82123330h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x106);
		/* 82123330h case    2:*/		return 0x82123334;
		  /* 82123334h */ case    3:  		/* b -1036 */
		/* 82123334h case    3:*/		return 0x82122F28;
		/* 82123334h case    3:*/		return 0x82123338;
		  /* 82123338h */ case    4:  		/* lis R10, -32253 */
		/* 82123338h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123338h case    4:*/		return 0x8212333C;
		  /* 8212333Ch */ case    5:  		/* mr R11, R3 */
		/* 8212333Ch case    5:*/		regs.R11 = regs.R3;
		/* 8212333Ch case    5:*/		return 0x82123340;
		  /* 82123340h */ case    6:  		/* addi R10, R10, 12460 */
		/* 82123340h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30AC);
		/* 82123340h case    6:*/		return 0x82123344;
		  /* 82123344h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123344h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123344h case    7:*/		return 0x82123348;
		  /* 82123348h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123348h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123348h case    8:*/		return 0x8212334C;
		  /* 8212334Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8212334Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212334Ch case    9:*/		return 0x82123350;
		  /* 82123350h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123350h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123350h case   10:*/		return 0x82123354;
		  /* 82123354h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123354h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123368;  }
		/* 82123354h case   11:*/		return 0x82123358;
		  /* 82123358h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123358h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123358h case   12:*/		return 0x8212335C;
		  /* 8212335Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212335Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212335Ch case   13:*/		return 0x82123360;
		  /* 82123360h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123360h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123360h case   14:*/		return 0x82123364;
		  /* 82123364h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123364h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123344;  }
		/* 82123364h case   15:*/		return 0x82123368;
	}
	return 0x82123368;
} // Block from 82123328h-82123368h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123368);
		  /* 82123368h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123368h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123368h case    0:*/		return 0x8212336C;
		  /* 8212336Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8212336Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123378;  }
		/* 8212336Ch case    1:*/		return 0x82123370;
		  /* 82123370h */ case    2:  		/* li R3, 263 */
		/* 82123370h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x107);
		/* 82123370h case    2:*/		return 0x82123374;
		  /* 82123374h */ case    3:  		/* b -1100 */
		/* 82123374h case    3:*/		return 0x82122F28;
		/* 82123374h case    3:*/		return 0x82123378;
	}
	return 0x82123378;
} // Block from 82123368h-82123378h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123378);
		  /* 82123378h */ case    0:  		/* lis R10, -32253 */
		/* 82123378h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123378h case    0:*/		return 0x8212337C;
		  /* 8212337Ch */ case    1:  		/* mr R11, R3 */
		/* 8212337Ch case    1:*/		regs.R11 = regs.R3;
		/* 8212337Ch case    1:*/		return 0x82123380;
		  /* 82123380h */ case    2:  		/* addi R10, R10, 12452 */
		/* 82123380h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30A4);
		/* 82123380h case    2:*/		return 0x82123384;
		  /* 82123384h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123384h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123384h case    3:*/		return 0x82123388;
		  /* 82123388h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123388h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123388h case    4:*/		return 0x8212338C;
		  /* 8212338Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212338Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212338Ch case    5:*/		return 0x82123390;
		  /* 82123390h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123390h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123390h case    6:*/		return 0x82123394;
		  /* 82123394h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123394h case    7:*/		if ( regs.CR[0].eq ) { return 0x821233A8;  }
		/* 82123394h case    7:*/		return 0x82123398;
		  /* 82123398h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123398h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123398h case    8:*/		return 0x8212339C;
		  /* 8212339Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212339Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212339Ch case    9:*/		return 0x821233A0;
		  /* 821233A0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821233A0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821233A0h case   10:*/		return 0x821233A4;
		  /* 821233A4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821233A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123384;  }
		/* 821233A4h case   11:*/		return 0x821233A8;
	}
	return 0x821233A8;
} // Block from 82123378h-821233A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821233A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821233A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821233A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821233A8);
		  /* 821233A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821233A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821233A8h case    0:*/		return 0x821233AC;
		  /* 821233ACh */ case    1:  		/* bc 12, CR0_EQ, -1096 */
		/* 821233ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821233ACh case    1:*/		return 0x821233B0;
		  /* 821233B0h */ case    2:  		/* lis R10, -32253 */
		/* 821233B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821233B0h case    2:*/		return 0x821233B4;
		  /* 821233B4h */ case    3:  		/* mr R11, R3 */
		/* 821233B4h case    3:*/		regs.R11 = regs.R3;
		/* 821233B4h case    3:*/		return 0x821233B8;
		  /* 821233B8h */ case    4:  		/* addi R10, R10, 9608 */
		/* 821233B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2588);
		/* 821233B8h case    4:*/		return 0x821233BC;
		  /* 821233BCh */ case    5:  		/* lbz R9, <#[R11]> */
		/* 821233BCh case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821233BCh case    5:*/		return 0x821233C0;
		  /* 821233C0h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 821233C0h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821233C0h case    6:*/		return 0x821233C4;
		  /* 821233C4h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 821233C4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821233C4h case    7:*/		return 0x821233C8;
		  /* 821233C8h */ case    8:  		/* subf R9, R8, R9 */
		/* 821233C8h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821233C8h case    8:*/		return 0x821233CC;
		  /* 821233CCh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821233CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821233E0;  }
		/* 821233CCh case    9:*/		return 0x821233D0;
		  /* 821233D0h */ case   10:  		/* addi R11, R11, 1 */
		/* 821233D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821233D0h case   10:*/		return 0x821233D4;
		  /* 821233D4h */ case   11:  		/* addi R10, R10, 1 */
		/* 821233D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821233D4h case   11:*/		return 0x821233D8;
	}
	return 0x821233D8;
} // Block from 821233A8h-821233D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821233D8h
// Function '?IfStmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821233D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821233D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821233D8);
		  /* 821233D8h */ case    0:  		/* cmpwi CR6, R9, 0 */
		/* 821233D8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821233D8h case    0:*/		return 0x821233DC;
		  /* 821233DCh */ case    1:  		/* bc 12, CR6_EQ, -32 */
		/* 821233DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821233BC;  }
		/* 821233DCh case    1:*/		return 0x821233E0;
	}
	return 0x821233E0;
} // Block from 821233D8h-821233E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821233E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821233E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821233E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821233E0);
		  /* 821233E0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821233E0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821233E0h case    0:*/		return 0x821233E4;
		  /* 821233E4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821233E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821233F0;  }
		/* 821233E4h case    1:*/		return 0x821233E8;
		  /* 821233E8h */ case    2:  		/* li R3, 264 */
		/* 821233E8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x108);
		/* 821233E8h case    2:*/		return 0x821233EC;
		  /* 821233ECh */ case    3:  		/* b -1220 */
		/* 821233ECh case    3:*/		return 0x82122F28;
		/* 821233ECh case    3:*/		return 0x821233F0;
	}
	return 0x821233F0;
} // Block from 821233E0h-821233F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821233F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821233F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821233F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821233F0);
		  /* 821233F0h */ case    0:  		/* lis R10, -32255 */
		/* 821233F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821233F0h case    0:*/		return 0x821233F4;
		  /* 821233F4h */ case    1:  		/* mr R11, R3 */
		/* 821233F4h case    1:*/		regs.R11 = regs.R3;
		/* 821233F4h case    1:*/		return 0x821233F8;
		  /* 821233F8h */ case    2:  		/* addi R10, R10, -15768 */
		/* 821233F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC268);
		/* 821233F8h case    2:*/		return 0x821233FC;
		  /* 821233FCh */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821233FCh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821233FCh case    3:*/		return 0x82123400;
		  /* 82123400h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123400h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123400h case    4:*/		return 0x82123404;
		  /* 82123404h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123404h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123404h case    5:*/		return 0x82123408;
		  /* 82123408h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123408h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123408h case    6:*/		return 0x8212340C;
		  /* 8212340Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212340Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123420;  }
		/* 8212340Ch case    7:*/		return 0x82123410;
		  /* 82123410h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123410h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123410h case    8:*/		return 0x82123414;
		  /* 82123414h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123414h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123414h case    9:*/		return 0x82123418;
		  /* 82123418h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123418h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123418h case   10:*/		return 0x8212341C;
		  /* 8212341Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212341Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821233FC;  }
		/* 8212341Ch case   11:*/		return 0x82123420;
	}
	return 0x82123420;
} // Block from 821233F0h-82123420h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123420);
		  /* 82123420h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123420h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123420h case    0:*/		return 0x82123424;
		  /* 82123424h */ case    1:  		/* bc 12, CR0_EQ, -1216 */
		/* 82123424h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82123424h case    1:*/		return 0x82123428;
		  /* 82123428h */ case    2:  		/* lis R10, -32253 */
		/* 82123428h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123428h case    2:*/		return 0x8212342C;
		  /* 8212342Ch */ case    3:  		/* mr R11, R3 */
		/* 8212342Ch case    3:*/		regs.R11 = regs.R3;
		/* 8212342Ch case    3:*/		return 0x82123430;
		  /* 82123430h */ case    4:  		/* addi R10, R10, 12444 */
		/* 82123430h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x309C);
		/* 82123430h case    4:*/		return 0x82123434;
		  /* 82123434h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82123434h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123434h case    5:*/		return 0x82123438;
		  /* 82123438h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82123438h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123438h case    6:*/		return 0x8212343C;
		  /* 8212343Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 8212343Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212343Ch case    7:*/		return 0x82123440;
		  /* 82123440h */ case    8:  		/* subf R9, R8, R9 */
		/* 82123440h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123440h case    8:*/		return 0x82123444;
		  /* 82123444h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82123444h case    9:*/		if ( regs.CR[0].eq ) { return 0x82123458;  }
		/* 82123444h case    9:*/		return 0x82123448;
		  /* 82123448h */ case   10:  		/* addi R11, R11, 1 */
		/* 82123448h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123448h case   10:*/		return 0x8212344C;
		  /* 8212344Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 8212344Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212344Ch case   11:*/		return 0x82123450;
		  /* 82123450h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123450h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123450h case   12:*/		return 0x82123454;
		  /* 82123454h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82123454h case   13:*/		if ( regs.CR[6].eq ) { return 0x82123434;  }
		/* 82123454h case   13:*/		return 0x82123458;
	}
	return 0x82123458;
} // Block from 82123420h-82123458h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123458);
		  /* 82123458h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123458h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123458h case    0:*/		return 0x8212345C;
		  /* 8212345Ch */ case    1:  		/* bc 12, CR0_EQ, -1272 */
		/* 8212345Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 8212345Ch case    1:*/		return 0x82123460;
		  /* 82123460h */ case    2:  		/* lis R10, -32255 */
		/* 82123460h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123460h case    2:*/		return 0x82123464;
		  /* 82123464h */ case    3:  		/* mr R11, R3 */
		/* 82123464h case    3:*/		regs.R11 = regs.R3;
		/* 82123464h case    3:*/		return 0x82123468;
		  /* 82123468h */ case    4:  		/* addi R10, R10, 4936 */
		/* 82123468h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1348);
		/* 82123468h case    4:*/		return 0x8212346C;
		  /* 8212346Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 8212346Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212346Ch case    5:*/		return 0x82123470;
		  /* 82123470h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82123470h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123470h case    6:*/		return 0x82123474;
		  /* 82123474h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82123474h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123474h case    7:*/		return 0x82123478;
		  /* 82123478h */ case    8:  		/* subf R9, R8, R9 */
		/* 82123478h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123478h case    8:*/		return 0x8212347C;
		  /* 8212347Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8212347Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82123490;  }
		/* 8212347Ch case    9:*/		return 0x82123480;
		  /* 82123480h */ case   10:  		/* addi R11, R11, 1 */
		/* 82123480h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123480h case   10:*/		return 0x82123484;
		  /* 82123484h */ case   11:  		/* addi R10, R10, 1 */
		/* 82123484h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123484h case   11:*/		return 0x82123488;
		  /* 82123488h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123488h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123488h case   12:*/		return 0x8212348C;
		  /* 8212348Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212348Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212346C;  }
		/* 8212348Ch case   13:*/		return 0x82123490;
	}
	return 0x82123490;
} // Block from 82123458h-82123490h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123490);
		  /* 82123490h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123490h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123490h case    0:*/		return 0x82123494;
		  /* 82123494h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123494h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821234A0;  }
		/* 82123494h case    1:*/		return 0x82123498;
		  /* 82123498h */ case    2:  		/* li R3, 265 */
		/* 82123498h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x109);
		/* 82123498h case    2:*/		return 0x8212349C;
		  /* 8212349Ch */ case    3:  		/* b -1396 */
		/* 8212349Ch case    3:*/		return 0x82122F28;
		/* 8212349Ch case    3:*/		return 0x821234A0;
	}
	return 0x821234A0;
} // Block from 82123490h-821234A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821234A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821234A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821234A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821234A0);
		  /* 821234A0h */ case    0:  		/* lis R10, -32255 */
		/* 821234A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821234A0h case    0:*/		return 0x821234A4;
		  /* 821234A4h */ case    1:  		/* mr R11, R3 */
		/* 821234A4h case    1:*/		regs.R11 = regs.R3;
		/* 821234A4h case    1:*/		return 0x821234A8;
		  /* 821234A8h */ case    2:  		/* addi R10, R10, -10860 */
		/* 821234A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD594);
		/* 821234A8h case    2:*/		return 0x821234AC;
		  /* 821234ACh */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821234ACh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821234ACh case    3:*/		return 0x821234B0;
		  /* 821234B0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821234B0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821234B0h case    4:*/		return 0x821234B4;
		  /* 821234B4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821234B4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821234B4h case    5:*/		return 0x821234B8;
		  /* 821234B8h */ case    6:  		/* subf R9, R8, R9 */
		/* 821234B8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821234B8h case    6:*/		return 0x821234BC;
		  /* 821234BCh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821234BCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821234D0;  }
		/* 821234BCh case    7:*/		return 0x821234C0;
		  /* 821234C0h */ case    8:  		/* addi R11, R11, 1 */
		/* 821234C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821234C0h case    8:*/		return 0x821234C4;
		  /* 821234C4h */ case    9:  		/* addi R10, R10, 1 */
		/* 821234C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821234C4h case    9:*/		return 0x821234C8;
		  /* 821234C8h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821234C8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821234C8h case   10:*/		return 0x821234CC;
		  /* 821234CCh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821234CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821234AC;  }
		/* 821234CCh case   11:*/		return 0x821234D0;
	}
	return 0x821234D0;
} // Block from 821234A0h-821234D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821234D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821234D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821234D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821234D0);
		  /* 821234D0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821234D0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821234D0h case    0:*/		return 0x821234D4;
		  /* 821234D4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821234D4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821234E0;  }
		/* 821234D4h case    1:*/		return 0x821234D8;
		  /* 821234D8h */ case    2:  		/* li R3, 266 */
		/* 821234D8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10A);
		/* 821234D8h case    2:*/		return 0x821234DC;
		  /* 821234DCh */ case    3:  		/* b -1460 */
		/* 821234DCh case    3:*/		return 0x82122F28;
		/* 821234DCh case    3:*/		return 0x821234E0;
	}
	return 0x821234E0;
} // Block from 821234D0h-821234E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821234E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821234E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821234E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821234E0);
		  /* 821234E0h */ case    0:  		/* lis R10, -32253 */
		/* 821234E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821234E0h case    0:*/		return 0x821234E4;
		  /* 821234E4h */ case    1:  		/* mr R11, R3 */
		/* 821234E4h case    1:*/		regs.R11 = regs.R3;
		/* 821234E4h case    1:*/		return 0x821234E8;
		  /* 821234E8h */ case    2:  		/* addi R10, R10, 12436 */
		/* 821234E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3094);
		/* 821234E8h case    2:*/		return 0x821234EC;
		  /* 821234ECh */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821234ECh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821234ECh case    3:*/		return 0x821234F0;
		  /* 821234F0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821234F0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821234F0h case    4:*/		return 0x821234F4;
		  /* 821234F4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821234F4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821234F4h case    5:*/		return 0x821234F8;
		  /* 821234F8h */ case    6:  		/* subf R9, R8, R9 */
		/* 821234F8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821234F8h case    6:*/		return 0x821234FC;
		  /* 821234FCh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821234FCh case    7:*/		if ( regs.CR[0].eq ) { return 0x82123510;  }
		/* 821234FCh case    7:*/		return 0x82123500;
		  /* 82123500h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123500h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123500h case    8:*/		return 0x82123504;
		  /* 82123504h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123504h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123504h case    9:*/		return 0x82123508;
		  /* 82123508h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123508h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123508h case   10:*/		return 0x8212350C;
		  /* 8212350Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212350Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821234EC;  }
		/* 8212350Ch case   11:*/		return 0x82123510;
	}
	return 0x82123510;
} // Block from 821234E0h-82123510h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123510);
		  /* 82123510h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123510h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123510h case    0:*/		return 0x82123514;
		  /* 82123514h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123514h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123520;  }
		/* 82123514h case    1:*/		return 0x82123518;
		  /* 82123518h */ case    2:  		/* li R3, 267 */
		/* 82123518h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10B);
		/* 82123518h case    2:*/		return 0x8212351C;
		  /* 8212351Ch */ case    3:  		/* b -1524 */
		/* 8212351Ch case    3:*/		return 0x82122F28;
		/* 8212351Ch case    3:*/		return 0x82123520;
	}
	return 0x82123520;
} // Block from 82123510h-82123520h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123520);
		  /* 82123520h */ case    0:  		/* lis R10, -32253 */
		/* 82123520h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123520h case    0:*/		return 0x82123524;
		  /* 82123524h */ case    1:  		/* mr R11, R3 */
		/* 82123524h case    1:*/		regs.R11 = regs.R3;
		/* 82123524h case    1:*/		return 0x82123528;
		  /* 82123528h */ case    2:  		/* addi R10, R10, 12416 */
		/* 82123528h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3080);
		/* 82123528h case    2:*/		return 0x8212352C;
		  /* 8212352Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212352Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212352Ch case    3:*/		return 0x82123530;
		  /* 82123530h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123530h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123530h case    4:*/		return 0x82123534;
		  /* 82123534h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123534h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123534h case    5:*/		return 0x82123538;
		  /* 82123538h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123538h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123538h case    6:*/		return 0x8212353C;
		  /* 8212353Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212353Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123550;  }
		/* 8212353Ch case    7:*/		return 0x82123540;
		  /* 82123540h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123540h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123540h case    8:*/		return 0x82123544;
		  /* 82123544h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123544h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123544h case    9:*/		return 0x82123548;
		  /* 82123548h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123548h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123548h case   10:*/		return 0x8212354C;
		  /* 8212354Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212354Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212352C;  }
		/* 8212354Ch case   11:*/		return 0x82123550;
	}
	return 0x82123550;
} // Block from 82123520h-82123550h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123550);
		  /* 82123550h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123550h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123550h case    0:*/		return 0x82123554;
		  /* 82123554h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123554h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123560;  }
		/* 82123554h case    1:*/		return 0x82123558;
		  /* 82123558h */ case    2:  		/* li R3, 269 */
		/* 82123558h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10D);
		/* 82123558h case    2:*/		return 0x8212355C;
		  /* 8212355Ch */ case    3:  		/* b -1588 */
		/* 8212355Ch case    3:*/		return 0x82122F28;
		/* 8212355Ch case    3:*/		return 0x82123560;
	}
	return 0x82123560;
} // Block from 82123550h-82123560h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123560);
		  /* 82123560h */ case    0:  		/* lis R10, -32255 */
		/* 82123560h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123560h case    0:*/		return 0x82123564;
		  /* 82123564h */ case    1:  		/* mr R11, R3 */
		/* 82123564h case    1:*/		regs.R11 = regs.R3;
		/* 82123564h case    1:*/		return 0x82123568;
		  /* 82123568h */ case    2:  		/* addi R10, R10, -15840 */
		/* 82123568h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC220);
		/* 82123568h case    2:*/		return 0x8212356C;
		  /* 8212356Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212356Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212356Ch case    3:*/		return 0x82123570;
		  /* 82123570h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123570h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123570h case    4:*/		return 0x82123574;
		  /* 82123574h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123574h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123574h case    5:*/		return 0x82123578;
		  /* 82123578h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123578h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123578h case    6:*/		return 0x8212357C;
		  /* 8212357Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212357Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123590;  }
		/* 8212357Ch case    7:*/		return 0x82123580;
		  /* 82123580h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123580h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123580h case    8:*/		return 0x82123584;
		  /* 82123584h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123584h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123584h case    9:*/		return 0x82123588;
		  /* 82123588h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123588h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123588h case   10:*/		return 0x8212358C;
		  /* 8212358Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212358Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212356C;  }
		/* 8212358Ch case   11:*/		return 0x82123590;
	}
	return 0x82123590;
} // Block from 82123560h-82123590h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123590);
		  /* 82123590h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123590h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123590h case    0:*/		return 0x82123594;
		  /* 82123594h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123594h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821235A0;  }
		/* 82123594h case    1:*/		return 0x82123598;
		  /* 82123598h */ case    2:  		/* li R3, 270 */
		/* 82123598h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10E);
		/* 82123598h case    2:*/		return 0x8212359C;
		  /* 8212359Ch */ case    3:  		/* b -1652 */
		/* 8212359Ch case    3:*/		return 0x82122F28;
		/* 8212359Ch case    3:*/		return 0x821235A0;
	}
	return 0x821235A0;
} // Block from 82123590h-821235A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821235A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821235A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821235A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821235A0);
		  /* 821235A0h */ case    0:  		/* lis R10, -32253 */
		/* 821235A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821235A0h case    0:*/		return 0x821235A4;
		  /* 821235A4h */ case    1:  		/* mr R11, R3 */
		/* 821235A4h case    1:*/		regs.R11 = regs.R3;
		/* 821235A4h case    1:*/		return 0x821235A8;
		  /* 821235A8h */ case    2:  		/* addi R10, R10, 12404 */
		/* 821235A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3074);
		/* 821235A8h case    2:*/		return 0x821235AC;
		  /* 821235ACh */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821235ACh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821235ACh case    3:*/		return 0x821235B0;
		  /* 821235B0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821235B0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821235B0h case    4:*/		return 0x821235B4;
		  /* 821235B4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821235B4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821235B4h case    5:*/		return 0x821235B8;
		  /* 821235B8h */ case    6:  		/* subf R9, R8, R9 */
		/* 821235B8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821235B8h case    6:*/		return 0x821235BC;
		  /* 821235BCh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821235BCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821235D0;  }
		/* 821235BCh case    7:*/		return 0x821235C0;
		  /* 821235C0h */ case    8:  		/* addi R11, R11, 1 */
		/* 821235C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821235C0h case    8:*/		return 0x821235C4;
		  /* 821235C4h */ case    9:  		/* addi R10, R10, 1 */
		/* 821235C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821235C4h case    9:*/		return 0x821235C8;
		  /* 821235C8h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821235C8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821235C8h case   10:*/		return 0x821235CC;
		  /* 821235CCh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821235CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821235AC;  }
		/* 821235CCh case   11:*/		return 0x821235D0;
	}
	return 0x821235D0;
} // Block from 821235A0h-821235D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821235D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821235D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821235D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821235D0);
		  /* 821235D0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821235D0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821235D0h case    0:*/		return 0x821235D4;
		  /* 821235D4h */ case    1:  		/* bc 12, CR0_EQ, -1648 */
		/* 821235D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821235D4h case    1:*/		return 0x821235D8;
		  /* 821235D8h */ case    2:  		/* lis R10, -32253 */
		/* 821235D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821235D8h case    2:*/		return 0x821235DC;
		  /* 821235DCh */ case    3:  		/* mr R11, R3 */
		/* 821235DCh case    3:*/		regs.R11 = regs.R3;
		/* 821235DCh case    3:*/		return 0x821235E0;
		  /* 821235E0h */ case    4:  		/* addi R10, R10, 12392 */
		/* 821235E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3068);
		/* 821235E0h case    4:*/		return 0x821235E4;
		  /* 821235E4h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 821235E4h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821235E4h case    5:*/		return 0x821235E8;
		  /* 821235E8h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 821235E8h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821235E8h case    6:*/		return 0x821235EC;
		  /* 821235ECh */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 821235ECh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821235ECh case    7:*/		return 0x821235F0;
		  /* 821235F0h */ case    8:  		/* subf R9, R8, R9 */
		/* 821235F0h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821235F0h case    8:*/		return 0x821235F4;
		  /* 821235F4h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821235F4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82123608;  }
		/* 821235F4h case    9:*/		return 0x821235F8;
		  /* 821235F8h */ case   10:  		/* addi R11, R11, 1 */
		/* 821235F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821235F8h case   10:*/		return 0x821235FC;
		  /* 821235FCh */ case   11:  		/* addi R10, R10, 1 */
		/* 821235FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821235FCh case   11:*/		return 0x82123600;
		  /* 82123600h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123600h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123600h case   12:*/		return 0x82123604;
		  /* 82123604h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82123604h case   13:*/		if ( regs.CR[6].eq ) { return 0x821235E4;  }
		/* 82123604h case   13:*/		return 0x82123608;
	}
	return 0x82123608;
} // Block from 821235D0h-82123608h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123608);
		  /* 82123608h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123608h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123608h case    0:*/		return 0x8212360C;
		  /* 8212360Ch */ case    1:  		/* bc 4, CR0_EQ, 444 */
		/* 8212360Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212360Ch case    1:*/		return 0x82123610;
		  /* 82123610h */ case    2:  		/* li R3, 272 */
		/* 82123610h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x110);
		/* 82123610h case    2:*/		return 0x82123614;
		  /* 82123614h */ case    3:  		/* b -1772 */
		/* 82123614h case    3:*/		return 0x82122F28;
		/* 82123614h case    3:*/		return 0x82123618;
		  /* 82123618h */ case    4:  		/* lis R10, -32253 */
		/* 82123618h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123618h case    4:*/		return 0x8212361C;
		  /* 8212361Ch */ case    5:  		/* mr R11, R3 */
		/* 8212361Ch case    5:*/		regs.R11 = regs.R3;
		/* 8212361Ch case    5:*/		return 0x82123620;
		  /* 82123620h */ case    6:  		/* addi R10, R10, 12376 */
		/* 82123620h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3058);
		/* 82123620h case    6:*/		return 0x82123624;
		  /* 82123624h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123624h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123624h case    7:*/		return 0x82123628;
		  /* 82123628h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123628h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123628h case    8:*/		return 0x8212362C;
		  /* 8212362Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8212362Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212362Ch case    9:*/		return 0x82123630;
		  /* 82123630h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123630h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123630h case   10:*/		return 0x82123634;
		  /* 82123634h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123634h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123648;  }
		/* 82123634h case   11:*/		return 0x82123638;
		  /* 82123638h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123638h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123638h case   12:*/		return 0x8212363C;
		  /* 8212363Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212363Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212363Ch case   13:*/		return 0x82123640;
		  /* 82123640h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123640h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123640h case   14:*/		return 0x82123644;
		  /* 82123644h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123644h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123624;  }
		/* 82123644h case   15:*/		return 0x82123648;
	}
	return 0x82123648;
} // Block from 82123608h-82123648h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123648h
// Function '?SwitchStmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123648);
		  /* 82123648h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123648h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123648h case    0:*/		return 0x8212364C;
		  /* 8212364Ch */ case    1:  		/* bc 4, CR0_EQ, 380 */
		/* 8212364Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212364Ch case    1:*/		return 0x82123650;
		  /* 82123650h */ case    2:  		/* li R3, 268 */
		/* 82123650h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10C);
		/* 82123650h case    2:*/		return 0x82123654;
		  /* 82123654h */ case    3:  		/* b -1836 */
		/* 82123654h case    3:*/		return 0x82122F28;
		/* 82123654h case    3:*/		return 0x82123658;
		  /* 82123658h */ case    4:  		/* lis R10, -32255 */
		/* 82123658h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123658h case    4:*/		return 0x8212365C;
		  /* 8212365Ch */ case    5:  		/* mr R11, R3 */
		/* 8212365Ch case    5:*/		regs.R11 = regs.R3;
		/* 8212365Ch case    5:*/		return 0x82123660;
		  /* 82123660h */ case    6:  		/* addi R10, R10, -10800 */
		/* 82123660h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD5D0);
		/* 82123660h case    6:*/		return 0x82123664;
		  /* 82123664h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123664h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123664h case    7:*/		return 0x82123668;
		  /* 82123668h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123668h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123668h case    8:*/		return 0x8212366C;
		  /* 8212366Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8212366Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212366Ch case    9:*/		return 0x82123670;
		  /* 82123670h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123670h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123670h case   10:*/		return 0x82123674;
		  /* 82123674h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123674h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123688;  }
		/* 82123674h case   11:*/		return 0x82123678;
		  /* 82123678h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123678h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123678h case   12:*/		return 0x8212367C;
		  /* 8212367Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212367Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212367Ch case   13:*/		return 0x82123680;
		  /* 82123680h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123680h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123680h case   14:*/		return 0x82123684;
		  /* 82123684h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123684h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123664;  }
		/* 82123684h case   15:*/		return 0x82123688;
	}
	return 0x82123688;
} // Block from 82123648h-82123688h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123688);
		  /* 82123688h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123688h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123688h case    0:*/		return 0x8212368C;
		  /* 8212368Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8212368Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123698;  }
		/* 8212368Ch case    1:*/		return 0x82123690;
		  /* 82123690h */ case    2:  		/* li R3, 274 */
		/* 82123690h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x112);
		/* 82123690h case    2:*/		return 0x82123694;
		  /* 82123694h */ case    3:  		/* b -1900 */
		/* 82123694h case    3:*/		return 0x82122F28;
		/* 82123694h case    3:*/		return 0x82123698;
	}
	return 0x82123698;
} // Block from 82123688h-82123698h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123698);
		  /* 82123698h */ case    0:  		/* lis R10, -32253 */
		/* 82123698h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123698h case    0:*/		return 0x8212369C;
		  /* 8212369Ch */ case    1:  		/* mr R11, R3 */
		/* 8212369Ch case    1:*/		regs.R11 = regs.R3;
		/* 8212369Ch case    1:*/		return 0x821236A0;
		  /* 821236A0h */ case    2:  		/* addi R10, R10, 12368 */
		/* 821236A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3050);
		/* 821236A0h case    2:*/		return 0x821236A4;
		  /* 821236A4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821236A4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821236A4h case    3:*/		return 0x821236A8;
		  /* 821236A8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821236A8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821236A8h case    4:*/		return 0x821236AC;
		  /* 821236ACh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821236ACh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821236ACh case    5:*/		return 0x821236B0;
		  /* 821236B0h */ case    6:  		/* subf R9, R8, R9 */
		/* 821236B0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821236B0h case    6:*/		return 0x821236B4;
		  /* 821236B4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821236B4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821236C8;  }
		/* 821236B4h case    7:*/		return 0x821236B8;
		  /* 821236B8h */ case    8:  		/* addi R11, R11, 1 */
		/* 821236B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821236B8h case    8:*/		return 0x821236BC;
		  /* 821236BCh */ case    9:  		/* addi R10, R10, 1 */
		/* 821236BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821236BCh case    9:*/		return 0x821236C0;
		  /* 821236C0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821236C0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821236C0h case   10:*/		return 0x821236C4;
		  /* 821236C4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821236C4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821236A4;  }
		/* 821236C4h case   11:*/		return 0x821236C8;
	}
	return 0x821236C8;
} // Block from 82123698h-821236C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821236C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821236C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821236C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821236C8);
		  /* 821236C8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821236C8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821236C8h case    0:*/		return 0x821236CC;
		  /* 821236CCh */ case    1:  		/* bc 12, CR0_EQ, -1896 */
		/* 821236CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821236CCh case    1:*/		return 0x821236D0;
		  /* 821236D0h */ case    2:  		/* lis R10, -32253 */
		/* 821236D0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821236D0h case    2:*/		return 0x821236D4;
		  /* 821236D4h */ case    3:  		/* mr R11, R3 */
		/* 821236D4h case    3:*/		regs.R11 = regs.R3;
		/* 821236D4h case    3:*/		return 0x821236D8;
		  /* 821236D8h */ case    4:  		/* addi R10, R10, 12360 */
		/* 821236D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3048);
		/* 821236D8h case    4:*/		return 0x821236DC;
		  /* 821236DCh */ case    5:  		/* lbz R9, <#[R11]> */
		/* 821236DCh case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821236DCh case    5:*/		return 0x821236E0;
		  /* 821236E0h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 821236E0h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821236E0h case    6:*/		return 0x821236E4;
		  /* 821236E4h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 821236E4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821236E4h case    7:*/		return 0x821236E8;
		  /* 821236E8h */ case    8:  		/* subf R9, R8, R9 */
		/* 821236E8h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821236E8h case    8:*/		return 0x821236EC;
		  /* 821236ECh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821236ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x82123700;  }
		/* 821236ECh case    9:*/		return 0x821236F0;
		  /* 821236F0h */ case   10:  		/* addi R11, R11, 1 */
		/* 821236F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821236F0h case   10:*/		return 0x821236F4;
		  /* 821236F4h */ case   11:  		/* addi R10, R10, 1 */
		/* 821236F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821236F4h case   11:*/		return 0x821236F8;
		  /* 821236F8h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 821236F8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821236F8h case   12:*/		return 0x821236FC;
		  /* 821236FCh */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 821236FCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821236DC;  }
		/* 821236FCh case   13:*/		return 0x82123700;
	}
	return 0x82123700;
} // Block from 821236C8h-82123700h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123700);
		  /* 82123700h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123700h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123700h case    0:*/		return 0x82123704;
		  /* 82123704h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123704h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123710;  }
		/* 82123704h case    1:*/		return 0x82123708;
		  /* 82123708h */ case    2:  		/* li R3, 277 */
		/* 82123708h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x115);
		/* 82123708h case    2:*/		return 0x8212370C;
		  /* 8212370Ch */ case    3:  		/* b -2020 */
		/* 8212370Ch case    3:*/		return 0x82122F28;
		/* 8212370Ch case    3:*/		return 0x82123710;
	}
	return 0x82123710;
} // Block from 82123700h-82123710h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123710);
		  /* 82123710h */ case    0:  		/* lis R10, -32253 */
		/* 82123710h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123710h case    0:*/		return 0x82123714;
		  /* 82123714h */ case    1:  		/* mr R11, R3 */
		/* 82123714h case    1:*/		regs.R11 = regs.R3;
		/* 82123714h case    1:*/		return 0x82123718;
		  /* 82123718h */ case    2:  		/* addi R10, R10, 12356 */
		/* 82123718h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3044);
		/* 82123718h case    2:*/		return 0x8212371C;
		  /* 8212371Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212371Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212371Ch case    3:*/		return 0x82123720;
		  /* 82123720h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123720h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123720h case    4:*/		return 0x82123724;
		  /* 82123724h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123724h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123724h case    5:*/		return 0x82123728;
		  /* 82123728h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123728h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123728h case    6:*/		return 0x8212372C;
		  /* 8212372Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212372Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123740;  }
		/* 8212372Ch case    7:*/		return 0x82123730;
		  /* 82123730h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123730h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123730h case    8:*/		return 0x82123734;
		  /* 82123734h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123734h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123734h case    9:*/		return 0x82123738;
		  /* 82123738h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123738h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123738h case   10:*/		return 0x8212373C;
		  /* 8212373Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212373Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212371C;  }
		/* 8212373Ch case   11:*/		return 0x82123740;
	}
	return 0x82123740;
} // Block from 82123710h-82123740h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123740);
		  /* 82123740h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123740h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123740h case    0:*/		return 0x82123744;
		  /* 82123744h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123744h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123750;  }
		/* 82123744h case    1:*/		return 0x82123748;
		  /* 82123748h */ case    2:  		/* li R3, 279 */
		/* 82123748h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x117);
		/* 82123748h case    2:*/		return 0x8212374C;
		  /* 8212374Ch */ case    3:  		/* b -2084 */
		/* 8212374Ch case    3:*/		return 0x82122F28;
		/* 8212374Ch case    3:*/		return 0x82123750;
	}
	return 0x82123750;
} // Block from 82123740h-82123750h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123750);
		  /* 82123750h */ case    0:  		/* lis R10, -32255 */
		/* 82123750h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123750h case    0:*/		return 0x82123754;
		  /* 82123754h */ case    1:  		/* mr R11, R3 */
		/* 82123754h case    1:*/		regs.R11 = regs.R3;
		/* 82123754h case    1:*/		return 0x82123758;
		  /* 82123758h */ case    2:  		/* addi R10, R10, -15804 */
		/* 82123758h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC244);
		/* 82123758h case    2:*/		return 0x8212375C;
		  /* 8212375Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212375Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212375Ch case    3:*/		return 0x82123760;
		  /* 82123760h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123760h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123760h case    4:*/		return 0x82123764;
		  /* 82123764h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123764h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123764h case    5:*/		return 0x82123768;
		  /* 82123768h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123768h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123768h case    6:*/		return 0x8212376C;
		  /* 8212376Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212376Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123780;  }
		/* 8212376Ch case    7:*/		return 0x82123770;
		  /* 82123770h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123770h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123770h case    8:*/		return 0x82123774;
		  /* 82123774h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123774h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123774h case    9:*/		return 0x82123778;
		  /* 82123778h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123778h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123778h case   10:*/		return 0x8212377C;
		  /* 8212377Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212377Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212375C;  }
		/* 8212377Ch case   11:*/		return 0x82123780;
	}
	return 0x82123780;
} // Block from 82123750h-82123780h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123780);
		  /* 82123780h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123780h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123780h case    0:*/		return 0x82123784;
		  /* 82123784h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123784h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123790;  }
		/* 82123784h case    1:*/		return 0x82123788;
		  /* 82123788h */ case    2:  		/* li R3, 278 */
		/* 82123788h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x116);
		/* 82123788h case    2:*/		return 0x8212378C;
		  /* 8212378Ch */ case    3:  		/* b -2148 */
		/* 8212378Ch case    3:*/		return 0x82122F28;
		/* 8212378Ch case    3:*/		return 0x82123790;
	}
	return 0x82123790;
} // Block from 82123780h-82123790h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123790);
		  /* 82123790h */ case    0:  		/* lis R10, -32253 */
		/* 82123790h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123790h case    0:*/		return 0x82123794;
		  /* 82123794h */ case    1:  		/* mr R11, R3 */
		/* 82123794h case    1:*/		regs.R11 = regs.R3;
		/* 82123794h case    1:*/		return 0x82123798;
		  /* 82123798h */ case    2:  		/* addi R10, R10, 12340 */
		/* 82123798h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3034);
		/* 82123798h case    2:*/		return 0x8212379C;
		  /* 8212379Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212379Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212379Ch case    3:*/		return 0x821237A0;
		  /* 821237A0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821237A0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821237A0h case    4:*/		return 0x821237A4;
		  /* 821237A4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821237A4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821237A4h case    5:*/		return 0x821237A8;
		  /* 821237A8h */ case    6:  		/* subf R9, R8, R9 */
		/* 821237A8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821237A8h case    6:*/		return 0x821237AC;
		  /* 821237ACh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821237ACh case    7:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 821237ACh case    7:*/		return 0x821237B0;
		  /* 821237B0h */ case    8:  		/* addi R11, R11, 1 */
		/* 821237B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821237B0h case    8:*/		return 0x821237B4;
		  /* 821237B4h */ case    9:  		/* addi R10, R10, 1 */
		/* 821237B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821237B4h case    9:*/		return 0x821237B8;
		  /* 821237B8h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821237B8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821237B8h case   10:*/		return 0x821237BC;
		  /* 821237BCh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821237BCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8212379C;  }
		/* 821237BCh case   11:*/		return 0x821237C0;
	}
	return 0x821237C0;
} // Block from 82123790h-821237C0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821237C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821237C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821237C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821237C0);
		  /* 821237C0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821237C0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821237C0h case    0:*/		return 0x821237C4;
		  /* 821237C4h */ case    1:  		/* bc 12, CR0_EQ, -2144 */
		/* 821237C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821237C4h case    1:*/		return 0x821237C8;
	}
	return 0x821237C8;
} // Block from 821237C0h-821237C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821237C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821237C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821237C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821237C8);
		  /* 821237C8h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821237C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821237C8h case    0:*/		return 0x821237CC;
		  /* 821237CCh */ case    1:  		/* lbz R11, <#[R11]> */
		/* 821237CCh case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821237CCh case    1:*/		return 0x821237D0;
		  /* 821237D0h */ case    2:  		/* extsb R3, R11 */
		/* 821237D0h case    2:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 821237D0h case    2:*/		return 0x821237D4;
		  /* 821237D4h */ case    3:  		/* bl -565316 */
		/* 821237D4h case    3:*/		regs.LR = 0x821237D8; return 0x82099790;
		/* 821237D4h case    3:*/		return 0x821237D8;
		  /* 821237D8h */ case    4:  		/* cmpwi CR6, R3, 97 */
		/* 821237D8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000061);
		/* 821237D8h case    4:*/		return 0x821237DC;
		  /* 821237DCh */ case    5:  		/* bc 12, CR6_EQ, 7516 */
		/* 821237DCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82125538;  }
		/* 821237DCh case    5:*/		return 0x821237E0;
		  /* 821237E0h */ case    6:  		/* cmpwi CR6, R3, 100 */
		/* 821237E0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000064);
		/* 821237E0h case    6:*/		return 0x821237E4;
		  /* 821237E4h */ case    7:  		/* bc 12, CR6_EQ, 7452 */
		/* 821237E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82125500;  }
		/* 821237E4h case    7:*/		return 0x821237E8;
		  /* 821237E8h */ case    8:  		/* cmpwi CR6, R3, 112 */
		/* 821237E8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000070);
		/* 821237E8h case    8:*/		return 0x821237EC;
		  /* 821237ECh */ case    9:  		/* bc 12, CR6_EQ, 7400 */
		/* 821237ECh case    9:*/		if ( regs.CR[6].eq ) { return 0x821254D4;  }
		/* 821237ECh case    9:*/		return 0x821237F0;
		  /* 821237F0h */ case   10:  		/* cmpwi CR6, R3, 116 */
		/* 821237F0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000074);
		/* 821237F0h case   10:*/		return 0x821237F4;
		  /* 821237F4h */ case   11:  		/* bc 4, CR6_EQ, 7548 */
		/* 821237F4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82125570;  }
		/* 821237F4h case   11:*/		return 0x821237F8;
		  /* 821237F8h */ case   12:  		/* mr R4, R28 */
		/* 821237F8h case   12:*/		regs.R4 = regs.R28;
		/* 821237F8h case   12:*/		return 0x821237FC;
		  /* 821237FCh */ case   13:  		/* lwz R3, <#[R31 + 48]> */
		/* 821237FCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821237FCh case   13:*/		return 0x82123800;
		  /* 82123800h */ case   14:  		/* bl -590800 */
		/* 82123800h case   14:*/		regs.LR = 0x82123804; return 0x82093430;
		/* 82123800h case   14:*/		return 0x82123804;
		  /* 82123804h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82123804h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82123804h case   15:*/		return 0x82123808;
		  /* 82123808h */ case   16:  		/* bc 4, CR0_EQ, 7528 */
		/* 82123808h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82125570;  }
		/* 82123808h case   16:*/		return 0x8212380C;
		  /* 8212380Ch */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8212380Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212380Ch case   17:*/		return 0x82123810;
		  /* 82123810h */ case   18:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82123810h case   18:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82123810h case   18:*/		return 0x82123814;
		  /* 82123814h */ case   19:  		/* bc 12, CR0_EQ, 5168 */
		/* 82123814h case   19:*/		if ( regs.CR[0].eq ) { return 0x82124C44;  }
		/* 82123814h case   19:*/		return 0x82123818;
		  /* 82123818h */ case   20:  		/* lis R11, -32253 */
		/* 82123818h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82123818h case   20:*/		return 0x8212381C;
		  /* 8212381Ch */ case   21:  		/* addi R6, R11, 12276 */
		/* 8212381Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2FF4);
		/* 8212381Ch case   21:*/		return 0x82123820;
		  /* 82123820h */ case   22:  		/* b 7488 */
		/* 82123820h case   22:*/		return 0x82125560;
		/* 82123820h case   22:*/		return 0x82123824;
		  /* 82123824h */ case   23:  		/* lis R10, -32253 */
		/* 82123824h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123824h case   23:*/		return 0x82123828;
		  /* 82123828h */ case   24:  		/* mr R11, R3 */
		/* 82123828h case   24:*/		regs.R11 = regs.R3;
		/* 82123828h case   24:*/		return 0x8212382C;
		  /* 8212382Ch */ case   25:  		/* addi R10, R10, 12256 */
		/* 8212382Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FE0);
		/* 8212382Ch case   25:*/		return 0x82123830;
		  /* 82123830h */ case   26:  		/* lbz R9, <#[R11]> */
		/* 82123830h case   26:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123830h case   26:*/		return 0x82123834;
		  /* 82123834h */ case   27:  		/* lbz R8, <#[R10]> */
		/* 82123834h case   27:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123834h case   27:*/		return 0x82123838;
		  /* 82123838h */ case   28:  		/* cmpwi CR0, R9, 0 */
		/* 82123838h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123838h case   28:*/		return 0x8212383C;
		  /* 8212383Ch */ case   29:  		/* subf R9, R8, R9 */
		/* 8212383Ch case   29:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212383Ch case   29:*/		return 0x82123840;
	}
	return 0x82123840;
} // Block from 821237C8h-82123840h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82123840h
// Function '?ForStmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123840);
		  /* 82123840h */ case    0:  		/* bc 12, CR0_EQ, 20 */
		/* 82123840h case    0:*/		if ( regs.CR[0].eq ) { return 0x82123854;  }
		/* 82123840h case    0:*/		return 0x82123844;
		  /* 82123844h */ case    1:  		/* addi R11, R11, 1 */
		/* 82123844h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123844h case    1:*/		return 0x82123848;
		  /* 82123848h */ case    2:  		/* addi R10, R10, 1 */
		/* 82123848h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123848h case    2:*/		return 0x8212384C;
		  /* 8212384Ch */ case    3:  		/* cmpwi CR6, R9, 0 */
		/* 8212384Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212384Ch case    3:*/		return 0x82123850;
		  /* 82123850h */ case    4:  		/* bc 12, CR6_EQ, -32 */
		/* 82123850h case    4:*/		if ( regs.CR[6].eq ) { return 0x82123830;  }
		/* 82123850h case    4:*/		return 0x82123854;
	}
	return 0x82123854;
} // Block from 82123840h-82123854h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82123854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123854);
		  /* 82123854h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123854h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123854h case    0:*/		return 0x82123858;
		  /* 82123858h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123858h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123864;  }
		/* 82123858h case    1:*/		return 0x8212385C;
		  /* 8212385Ch */ case    2:  		/* li R3, 275 */
		/* 8212385Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x113);
		/* 8212385Ch case    2:*/		return 0x82123860;
		  /* 82123860h */ case    3:  		/* b -2360 */
		/* 82123860h case    3:*/		return 0x82122F28;
		/* 82123860h case    3:*/		return 0x82123864;
	}
	return 0x82123864;
} // Block from 82123854h-82123864h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123864);
		  /* 82123864h */ case    0:  		/* lis R10, -32253 */
		/* 82123864h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123864h case    0:*/		return 0x82123868;
		  /* 82123868h */ case    1:  		/* mr R11, R3 */
		/* 82123868h case    1:*/		regs.R11 = regs.R3;
		/* 82123868h case    1:*/		return 0x8212386C;
		  /* 8212386Ch */ case    2:  		/* addi R10, R10, 12236 */
		/* 8212386Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FCC);
		/* 8212386Ch case    2:*/		return 0x82123870;
		  /* 82123870h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123870h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123870h case    3:*/		return 0x82123874;
		  /* 82123874h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123874h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123874h case    4:*/		return 0x82123878;
		  /* 82123878h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123878h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123878h case    5:*/		return 0x8212387C;
		  /* 8212387Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 8212387Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212387Ch case    6:*/		return 0x82123880;
		  /* 82123880h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123880h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123894;  }
		/* 82123880h case    7:*/		return 0x82123884;
		  /* 82123884h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123884h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123884h case    8:*/		return 0x82123888;
		  /* 82123888h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123888h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123888h case    9:*/		return 0x8212388C;
		  /* 8212388Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212388Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212388Ch case   10:*/		return 0x82123890;
		  /* 82123890h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123890h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123870;  }
		/* 82123890h case   11:*/		return 0x82123894;
	}
	return 0x82123894;
} // Block from 82123864h-82123894h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123894);
		  /* 82123894h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123894h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123894h case    0:*/		return 0x82123898;
		  /* 82123898h */ case    1:  		/* bc 4, CR0_EQ, -208 */
		/* 82123898h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123898h case    1:*/		return 0x8212389C;
		  /* 8212389Ch */ case    2:  		/* li R3, 276 */
		/* 8212389Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x114);
		/* 8212389Ch case    2:*/		return 0x821238A0;
		  /* 821238A0h */ case    3:  		/* b -2424 */
		/* 821238A0h case    3:*/		return 0x82122F28;
		/* 821238A0h case    3:*/		return 0x821238A4;
		  /* 821238A4h */ case    4:  		/* lis R10, -32255 */
		/* 821238A4h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821238A4h case    4:*/		return 0x821238A8;
		  /* 821238A8h */ case    5:  		/* mr R11, R3 */
		/* 821238A8h case    5:*/		regs.R11 = regs.R3;
		/* 821238A8h case    5:*/		return 0x821238AC;
		  /* 821238ACh */ case    6:  		/* addi R10, R10, -10672 */
		/* 821238ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD650);
		/* 821238ACh case    6:*/		return 0x821238B0;
		  /* 821238B0h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821238B0h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821238B0h case    7:*/		return 0x821238B4;
		  /* 821238B4h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 821238B4h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821238B4h case    8:*/		return 0x821238B8;
		  /* 821238B8h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821238B8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821238B8h case    9:*/		return 0x821238BC;
		  /* 821238BCh */ case   10:  		/* subf R9, R8, R9 */
		/* 821238BCh case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821238BCh case   10:*/		return 0x821238C0;
		  /* 821238C0h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821238C0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821238D4;  }
		/* 821238C0h case   11:*/		return 0x821238C4;
		  /* 821238C4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821238C4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821238C4h case   12:*/		return 0x821238C8;
		  /* 821238C8h */ case   13:  		/* addi R10, R10, 1 */
		/* 821238C8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821238C8h case   13:*/		return 0x821238CC;
		  /* 821238CCh */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 821238CCh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821238CCh case   14:*/		return 0x821238D0;
		  /* 821238D0h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 821238D0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821238B0;  }
		/* 821238D0h case   15:*/		return 0x821238D4;
	}
	return 0x821238D4;
} // Block from 82123894h-821238D4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821238D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821238D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821238D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821238D4);
		  /* 821238D4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821238D4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821238D4h case    0:*/		return 0x821238D8;
		  /* 821238D8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821238D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821238E4;  }
		/* 821238D8h case    1:*/		return 0x821238DC;
		  /* 821238DCh */ case    2:  		/* li R3, 280 */
		/* 821238DCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x118);
		/* 821238DCh case    2:*/		return 0x821238E0;
		  /* 821238E0h */ case    3:  		/* b -2488 */
		/* 821238E0h case    3:*/		return 0x82122F28;
		/* 821238E0h case    3:*/		return 0x821238E4;
	}
	return 0x821238E4;
} // Block from 821238D4h-821238E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821238E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821238E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821238E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821238E4);
		  /* 821238E4h */ case    0:  		/* lis R10, -32253 */
		/* 821238E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821238E4h case    0:*/		return 0x821238E8;
		  /* 821238E8h */ case    1:  		/* mr R11, R3 */
		/* 821238E8h case    1:*/		regs.R11 = regs.R3;
		/* 821238E8h case    1:*/		return 0x821238EC;
		  /* 821238ECh */ case    2:  		/* addi R10, R10, 12228 */
		/* 821238ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FC4);
		/* 821238ECh case    2:*/		return 0x821238F0;
		  /* 821238F0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821238F0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821238F0h case    3:*/		return 0x821238F4;
		  /* 821238F4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821238F4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821238F4h case    4:*/		return 0x821238F8;
		  /* 821238F8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821238F8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821238F8h case    5:*/		return 0x821238FC;
		  /* 821238FCh */ case    6:  		/* subf R9, R8, R9 */
		/* 821238FCh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821238FCh case    6:*/		return 0x82123900;
		  /* 82123900h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123900h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123914;  }
		/* 82123900h case    7:*/		return 0x82123904;
		  /* 82123904h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123904h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123904h case    8:*/		return 0x82123908;
		  /* 82123908h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123908h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123908h case    9:*/		return 0x8212390C;
		  /* 8212390Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212390Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212390Ch case   10:*/		return 0x82123910;
		  /* 82123910h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123910h case   11:*/		if ( regs.CR[6].eq ) { return 0x821238F0;  }
		/* 82123910h case   11:*/		return 0x82123914;
	}
	return 0x82123914;
} // Block from 821238E4h-82123914h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123914);
		  /* 82123914h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123914h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123914h case    0:*/		return 0x82123918;
		  /* 82123918h */ case    1:  		/* bc 12, CR0_EQ, -2484 */
		/* 82123918h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82123918h case    1:*/		return 0x8212391C;
		  /* 8212391Ch */ case    2:  		/* lis R10, -32253 */
		/* 8212391Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212391Ch case    2:*/		return 0x82123920;
		  /* 82123920h */ case    3:  		/* mr R11, R3 */
		/* 82123920h case    3:*/		regs.R11 = regs.R3;
		/* 82123920h case    3:*/		return 0x82123924;
		  /* 82123924h */ case    4:  		/* addi R10, R10, 12216 */
		/* 82123924h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FB8);
		/* 82123924h case    4:*/		return 0x82123928;
		  /* 82123928h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82123928h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123928h case    5:*/		return 0x8212392C;
		  /* 8212392Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212392Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212392Ch case    6:*/		return 0x82123930;
		  /* 82123930h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82123930h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123930h case    7:*/		return 0x82123934;
		  /* 82123934h */ case    8:  		/* subf R9, R8, R9 */
		/* 82123934h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123934h case    8:*/		return 0x82123938;
		  /* 82123938h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82123938h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212394C;  }
		/* 82123938h case    9:*/		return 0x8212393C;
		  /* 8212393Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8212393Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212393Ch case   10:*/		return 0x82123940;
		  /* 82123940h */ case   11:  		/* addi R10, R10, 1 */
		/* 82123940h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123940h case   11:*/		return 0x82123944;
		  /* 82123944h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123944h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123944h case   12:*/		return 0x82123948;
		  /* 82123948h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82123948h case   13:*/		if ( regs.CR[6].eq ) { return 0x82123928;  }
		/* 82123948h case   13:*/		return 0x8212394C;
	}
	return 0x8212394C;
} // Block from 82123914h-8212394Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212394Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212394C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212394C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212394C);
		  /* 8212394Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212394Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212394Ch case    0:*/		return 0x82123950;
		  /* 82123950h */ case    1:  		/* bc 12, CR0_EQ, -2540 */
		/* 82123950h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82123950h case    1:*/		return 0x82123954;
		  /* 82123954h */ case    2:  		/* lis R10, -32253 */
		/* 82123954h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123954h case    2:*/		return 0x82123958;
		  /* 82123958h */ case    3:  		/* mr R11, R3 */
		/* 82123958h case    3:*/		regs.R11 = regs.R3;
		/* 82123958h case    3:*/		return 0x8212395C;
		  /* 8212395Ch */ case    4:  		/* addi R10, R10, 12208 */
		/* 8212395Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FB0);
		/* 8212395Ch case    4:*/		return 0x82123960;
		  /* 82123960h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82123960h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123960h case    5:*/		return 0x82123964;
		  /* 82123964h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82123964h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123964h case    6:*/		return 0x82123968;
		  /* 82123968h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82123968h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123968h case    7:*/		return 0x8212396C;
		  /* 8212396Ch */ case    8:  		/* subf R9, R8, R9 */
		/* 8212396Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212396Ch case    8:*/		return 0x82123970;
		  /* 82123970h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82123970h case    9:*/		if ( regs.CR[0].eq ) { return 0x82123984;  }
		/* 82123970h case    9:*/		return 0x82123974;
		  /* 82123974h */ case   10:  		/* addi R11, R11, 1 */
		/* 82123974h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123974h case   10:*/		return 0x82123978;
		  /* 82123978h */ case   11:  		/* addi R10, R10, 1 */
		/* 82123978h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123978h case   11:*/		return 0x8212397C;
		  /* 8212397Ch */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 8212397Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212397Ch case   12:*/		return 0x82123980;
		  /* 82123980h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82123980h case   13:*/		if ( regs.CR[6].eq ) { return 0x82123960;  }
		/* 82123980h case   13:*/		return 0x82123984;
	}
	return 0x82123984;
} // Block from 8212394Ch-82123984h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123984);
		  /* 82123984h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123984h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123984h case    0:*/		return 0x82123988;
		  /* 82123988h */ case    1:  		/* bc 4, CR0_EQ, -448 */
		/* 82123988h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123988h case    1:*/		return 0x8212398C;
		  /* 8212398Ch */ case    2:  		/* li R3, 281 */
		/* 8212398Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x119);
		/* 8212398Ch case    2:*/		return 0x82123990;
		  /* 82123990h */ case    3:  		/* b -2664 */
		/* 82123990h case    3:*/		return 0x82122F28;
		/* 82123990h case    3:*/		return 0x82123994;
		  /* 82123994h */ case    4:  		/* lis R10, -32255 */
		/* 82123994h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123994h case    4:*/		return 0x82123998;
		  /* 82123998h */ case    5:  		/* mr R11, R3 */
		/* 82123998h case    5:*/		regs.R11 = regs.R3;
		/* 82123998h case    5:*/		return 0x8212399C;
		  /* 8212399Ch */ case    6:  		/* addi R10, R10, 5216 */
		/* 8212399Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1460);
		/* 8212399Ch case    6:*/		return 0x821239A0;
		  /* 821239A0h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821239A0h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821239A0h case    7:*/		return 0x821239A4;
		  /* 821239A4h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 821239A4h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821239A4h case    8:*/		return 0x821239A8;
		  /* 821239A8h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821239A8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821239A8h case    9:*/		return 0x821239AC;
		  /* 821239ACh */ case   10:  		/* subf R9, R8, R9 */
		/* 821239ACh case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821239ACh case   10:*/		return 0x821239B0;
		  /* 821239B0h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821239B0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821239C4;  }
		/* 821239B0h case   11:*/		return 0x821239B4;
		  /* 821239B4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821239B4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821239B4h case   12:*/		return 0x821239B8;
		  /* 821239B8h */ case   13:  		/* addi R10, R10, 1 */
		/* 821239B8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821239B8h case   13:*/		return 0x821239BC;
		  /* 821239BCh */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 821239BCh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821239BCh case   14:*/		return 0x821239C0;
		  /* 821239C0h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 821239C0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821239A0;  }
		/* 821239C0h case   15:*/		return 0x821239C4;
	}
	return 0x821239C4;
} // Block from 82123984h-821239C4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821239C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821239C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821239C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821239C4);
		  /* 821239C4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821239C4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821239C4h case    0:*/		return 0x821239C8;
		  /* 821239C8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821239C8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821239D4;  }
		/* 821239C8h case    1:*/		return 0x821239CC;
		  /* 821239CCh */ case    2:  		/* li R3, 282 */
		/* 821239CCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11A);
		/* 821239CCh case    2:*/		return 0x821239D0;
		  /* 821239D0h */ case    3:  		/* b -2728 */
		/* 821239D0h case    3:*/		return 0x82122F28;
		/* 821239D0h case    3:*/		return 0x821239D4;
	}
	return 0x821239D4;
} // Block from 821239C4h-821239D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821239D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821239D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821239D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821239D4);
		  /* 821239D4h */ case    0:  		/* lis R10, -32255 */
		/* 821239D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821239D4h case    0:*/		return 0x821239D8;
		  /* 821239D8h */ case    1:  		/* mr R11, R3 */
		/* 821239D8h case    1:*/		regs.R11 = regs.R3;
		/* 821239D8h case    1:*/		return 0x821239DC;
		  /* 821239DCh */ case    2:  		/* addi R10, R10, -15796 */
		/* 821239DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC24C);
		/* 821239DCh case    2:*/		return 0x821239E0;
		  /* 821239E0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821239E0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821239E0h case    3:*/		return 0x821239E4;
		  /* 821239E4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821239E4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821239E4h case    4:*/		return 0x821239E8;
		  /* 821239E8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821239E8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821239E8h case    5:*/		return 0x821239EC;
		  /* 821239ECh */ case    6:  		/* subf R9, R8, R9 */
		/* 821239ECh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821239ECh case    6:*/		return 0x821239F0;
		  /* 821239F0h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821239F0h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123A04;  }
		/* 821239F0h case    7:*/		return 0x821239F4;
		  /* 821239F4h */ case    8:  		/* addi R11, R11, 1 */
		/* 821239F4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821239F4h case    8:*/		return 0x821239F8;
		  /* 821239F8h */ case    9:  		/* addi R10, R10, 1 */
		/* 821239F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821239F8h case    9:*/		return 0x821239FC;
		  /* 821239FCh */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821239FCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821239FCh case   10:*/		return 0x82123A00;
		  /* 82123A00h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123A00h case   11:*/		if ( regs.CR[6].eq ) { return 0x821239E0;  }
		/* 82123A00h case   11:*/		return 0x82123A04;
	}
	return 0x82123A04;
} // Block from 821239D4h-82123A04h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A04);
		  /* 82123A04h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123A04h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123A04h case    0:*/		return 0x82123A08;
		  /* 82123A08h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123A08h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123A14;  }
		/* 82123A08h case    1:*/		return 0x82123A0C;
		  /* 82123A0Ch */ case    2:  		/* li R3, 283 */
		/* 82123A0Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11B);
		/* 82123A0Ch case    2:*/		return 0x82123A10;
		  /* 82123A10h */ case    3:  		/* b -2792 */
		/* 82123A10h case    3:*/		return 0x82122F28;
		/* 82123A10h case    3:*/		return 0x82123A14;
	}
	return 0x82123A14;
} // Block from 82123A04h-82123A14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A14);
		  /* 82123A14h */ case    0:  		/* lis R10, -32255 */
		/* 82123A14h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123A14h case    0:*/		return 0x82123A18;
		  /* 82123A18h */ case    1:  		/* mr R11, R3 */
		/* 82123A18h case    1:*/		regs.R11 = regs.R3;
		/* 82123A18h case    1:*/		return 0x82123A1C;
		  /* 82123A1Ch */ case    2:  		/* addi R10, R10, -14456 */
		/* 82123A1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC788);
		/* 82123A1Ch case    2:*/		return 0x82123A20;
		  /* 82123A20h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123A20h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123A20h case    3:*/		return 0x82123A24;
		  /* 82123A24h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123A24h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123A24h case    4:*/		return 0x82123A28;
		  /* 82123A28h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123A28h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123A28h case    5:*/		return 0x82123A2C;
		  /* 82123A2Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 82123A2Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123A2Ch case    6:*/		return 0x82123A30;
		  /* 82123A30h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123A30h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123A44;  }
		/* 82123A30h case    7:*/		return 0x82123A34;
		  /* 82123A34h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123A34h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123A34h case    8:*/		return 0x82123A38;
		  /* 82123A38h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123A38h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123A38h case    9:*/		return 0x82123A3C;
		  /* 82123A3Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123A3Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123A3Ch case   10:*/		return 0x82123A40;
		  /* 82123A40h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123A40h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123A20;  }
		/* 82123A40h case   11:*/		return 0x82123A44;
	}
	return 0x82123A44;
} // Block from 82123A14h-82123A44h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A44);
		  /* 82123A44h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123A44h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123A44h case    0:*/		return 0x82123A48;
		  /* 82123A48h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123A48h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123A54;  }
		/* 82123A48h case    1:*/		return 0x82123A4C;
		  /* 82123A4Ch */ case    2:  		/* li R3, 284 */
		/* 82123A4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11C);
		/* 82123A4Ch case    2:*/		return 0x82123A50;
		  /* 82123A50h */ case    3:  		/* b -2856 */
		/* 82123A50h case    3:*/		return 0x82122F28;
		/* 82123A50h case    3:*/		return 0x82123A54;
	}
	return 0x82123A54;
} // Block from 82123A44h-82123A54h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A54);
		  /* 82123A54h */ case    0:  		/* lis R10, -32253 */
		/* 82123A54h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123A54h case    0:*/		return 0x82123A58;
	}
	return 0x82123A58;
} // Block from 82123A54h-82123A58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82123A58h
// Function '?Token@CParse@D3DXShader@@IAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A58);
		  /* 82123A58h */ case    0:  		/* mr R11, R3 */
		/* 82123A58h case    0:*/		regs.R11 = regs.R3;
		/* 82123A58h case    0:*/		return 0x82123A5C;
		  /* 82123A5Ch */ case    1:  		/* addi R10, R10, 12200 */
		/* 82123A5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FA8);
		/* 82123A5Ch case    1:*/		return 0x82123A60;
		  /* 82123A60h */ case    2:  		/* lbz R9, <#[R11]> */
		/* 82123A60h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123A60h case    2:*/		return 0x82123A64;
		  /* 82123A64h */ case    3:  		/* lbz R8, <#[R10]> */
		/* 82123A64h case    3:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123A64h case    3:*/		return 0x82123A68;
		  /* 82123A68h */ case    4:  		/* cmpwi CR0, R9, 0 */
		/* 82123A68h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123A68h case    4:*/		return 0x82123A6C;
		  /* 82123A6Ch */ case    5:  		/* subf R9, R8, R9 */
		/* 82123A6Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123A6Ch case    5:*/		return 0x82123A70;
		  /* 82123A70h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 82123A70h case    6:*/		if ( regs.CR[0].eq ) { return 0x82123A84;  }
		/* 82123A70h case    6:*/		return 0x82123A74;
		  /* 82123A74h */ case    7:  		/* addi R11, R11, 1 */
		/* 82123A74h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123A74h case    7:*/		return 0x82123A78;
		  /* 82123A78h */ case    8:  		/* addi R10, R10, 1 */
		/* 82123A78h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123A78h case    8:*/		return 0x82123A7C;
		  /* 82123A7Ch */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 82123A7Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123A7Ch case    9:*/		return 0x82123A80;
		  /* 82123A80h */ case   10:  		/* bc 12, CR6_EQ, -32 */
		/* 82123A80h case   10:*/		if ( regs.CR[6].eq ) { return 0x82123A60;  }
		/* 82123A80h case   10:*/		return 0x82123A84;
	}
	return 0x82123A84;
} // Block from 82123A58h-82123A84h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82123A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A84);
		  /* 82123A84h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123A84h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123A84h case    0:*/		return 0x82123A88;
		  /* 82123A88h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123A88h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123A94;  }
		/* 82123A88h case    1:*/		return 0x82123A8C;
		  /* 82123A8Ch */ case    2:  		/* li R3, 285 */
		/* 82123A8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11D);
		/* 82123A8Ch case    2:*/		return 0x82123A90;
		  /* 82123A90h */ case    3:  		/* b -2920 */
		/* 82123A90h case    3:*/		return 0x82122F28;
		/* 82123A90h case    3:*/		return 0x82123A94;
	}
	return 0x82123A94;
} // Block from 82123A84h-82123A94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123A94);
		  /* 82123A94h */ case    0:  		/* lis R10, -32253 */
		/* 82123A94h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123A94h case    0:*/		return 0x82123A98;
		  /* 82123A98h */ case    1:  		/* mr R11, R3 */
		/* 82123A98h case    1:*/		regs.R11 = regs.R3;
		/* 82123A98h case    1:*/		return 0x82123A9C;
		  /* 82123A9Ch */ case    2:  		/* addi R10, R10, 12192 */
		/* 82123A9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FA0);
		/* 82123A9Ch case    2:*/		return 0x82123AA0;
		  /* 82123AA0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123AA0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123AA0h case    3:*/		return 0x82123AA4;
		  /* 82123AA4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123AA4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123AA4h case    4:*/		return 0x82123AA8;
		  /* 82123AA8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123AA8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123AA8h case    5:*/		return 0x82123AAC;
		  /* 82123AACh */ case    6:  		/* subf R9, R8, R9 */
		/* 82123AACh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123AACh case    6:*/		return 0x82123AB0;
		  /* 82123AB0h */ case    7:  		/* bc 12, CR0_EQ, -752 */
		/* 82123AB0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 82123AB0h case    7:*/		return 0x82123AB4;
		  /* 82123AB4h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123AB4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123AB4h case    8:*/		return 0x82123AB8;
		  /* 82123AB8h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123AB8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123AB8h case    9:*/		return 0x82123ABC;
		  /* 82123ABCh */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123ABCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123ABCh case   10:*/		return 0x82123AC0;
		  /* 82123AC0h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123AC0h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123AA0;  }
		/* 82123AC0h case   11:*/		return 0x82123AC4;
		  /* 82123AC4h */ case   12:  		/* b -772 */
		/* 82123AC4h case   12:*/		return 0x821237C0;
		/* 82123AC4h case   12:*/		return 0x82123AC8;
		  /* 82123AC8h */ case   13:  		/* lis R10, -32253 */
		/* 82123AC8h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123AC8h case   13:*/		return 0x82123ACC;
		  /* 82123ACCh */ case   14:  		/* mr R11, R3 */
		/* 82123ACCh case   14:*/		regs.R11 = regs.R3;
		/* 82123ACCh case   14:*/		return 0x82123AD0;
		  /* 82123AD0h */ case   15:  		/* addi R10, R10, 12184 */
		/* 82123AD0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F98);
		/* 82123AD0h case   15:*/		return 0x82123AD4;
		  /* 82123AD4h */ case   16:  		/* lbz R9, <#[R11]> */
		/* 82123AD4h case   16:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123AD4h case   16:*/		return 0x82123AD8;
		  /* 82123AD8h */ case   17:  		/* lbz R8, <#[R10]> */
		/* 82123AD8h case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123AD8h case   17:*/		return 0x82123ADC;
		  /* 82123ADCh */ case   18:  		/* cmpwi CR0, R9, 0 */
		/* 82123ADCh case   18:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123ADCh case   18:*/		return 0x82123AE0;
		  /* 82123AE0h */ case   19:  		/* subf R9, R8, R9 */
		/* 82123AE0h case   19:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123AE0h case   19:*/		return 0x82123AE4;
		  /* 82123AE4h */ case   20:  		/* bc 12, CR0_EQ, -804 */
		/* 82123AE4h case   20:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 82123AE4h case   20:*/		return 0x82123AE8;
		  /* 82123AE8h */ case   21:  		/* addi R11, R11, 1 */
		/* 82123AE8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123AE8h case   21:*/		return 0x82123AEC;
		  /* 82123AECh */ case   22:  		/* addi R10, R10, 1 */
		/* 82123AECh case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123AECh case   22:*/		return 0x82123AF0;
		  /* 82123AF0h */ case   23:  		/* cmpwi CR6, R9, 0 */
		/* 82123AF0h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123AF0h case   23:*/		return 0x82123AF4;
		  /* 82123AF4h */ case   24:  		/* bc 12, CR6_EQ, -32 */
		/* 82123AF4h case   24:*/		if ( regs.CR[6].eq ) { return 0x82123AD4;  }
		/* 82123AF4h case   24:*/		return 0x82123AF8;
		  /* 82123AF8h */ case   25:  		/* b -824 */
		/* 82123AF8h case   25:*/		return 0x821237C0;
		/* 82123AF8h case   25:*/		return 0x82123AFC;
		  /* 82123AFCh */ case   26:  		/* lwz R11, <#[R31 + 92]> */
		/* 82123AFCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82123AFCh case   26:*/		return 0x82123B00;
		  /* 82123B00h */ case   27:  		/* cmpwi CR6, R11, 0 */
		/* 82123B00h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82123B00h case   27:*/		return 0x82123B04;
		  /* 82123B04h */ case   28:  		/* bc 12, CR6_EQ, -828 */
		/* 82123B04h case   28:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82123B04h case   28:*/		return 0x82123B08;
		  /* 82123B08h */ case   29:  		/* lis R10, -32253 */
		/* 82123B08h case   29:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123B08h case   29:*/		return 0x82123B0C;
		  /* 82123B0Ch */ case   30:  		/* mr R11, R3 */
		/* 82123B0Ch case   30:*/		regs.R11 = regs.R3;
		/* 82123B0Ch case   30:*/		return 0x82123B10;
		  /* 82123B10h */ case   31:  		/* addi R10, R10, 12168 */
		/* 82123B10h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F88);
		/* 82123B10h case   31:*/		return 0x82123B14;
		  /* 82123B14h */ case   32:  		/* lbz R9, <#[R11]> */
		/* 82123B14h case   32:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123B14h case   32:*/		return 0x82123B18;
		  /* 82123B18h */ case   33:  		/* lbz R8, <#[R10]> */
		/* 82123B18h case   33:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123B18h case   33:*/		return 0x82123B1C;
		  /* 82123B1Ch */ case   34:  		/* cmpwi CR0, R9, 0 */
		/* 82123B1Ch case   34:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123B1Ch case   34:*/		return 0x82123B20;
		  /* 82123B20h */ case   35:  		/* subf R9, R8, R9 */
		/* 82123B20h case   35:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123B20h case   35:*/		return 0x82123B24;
		  /* 82123B24h */ case   36:  		/* bc 12, CR0_EQ, 20 */
		/* 82123B24h case   36:*/		if ( regs.CR[0].eq ) { return 0x82123B38;  }
		/* 82123B24h case   36:*/		return 0x82123B28;
		  /* 82123B28h */ case   37:  		/* addi R11, R11, 1 */
		/* 82123B28h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123B28h case   37:*/		return 0x82123B2C;
		  /* 82123B2Ch */ case   38:  		/* addi R10, R10, 1 */
		/* 82123B2Ch case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123B2Ch case   38:*/		return 0x82123B30;
		  /* 82123B30h */ case   39:  		/* cmpwi CR6, R9, 0 */
		/* 82123B30h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123B30h case   39:*/		return 0x82123B34;
		  /* 82123B34h */ case   40:  		/* bc 12, CR6_EQ, -32 */
		/* 82123B34h case   40:*/		if ( regs.CR[6].eq ) { return 0x82123B14;  }
		/* 82123B34h case   40:*/		return 0x82123B38;
	}
	return 0x82123B38;
} // Block from 82123A94h-82123B38h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82123B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123B38);
		  /* 82123B38h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123B38h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123B38h case    0:*/		return 0x82123B3C;
		  /* 82123B3Ch */ case    1:  		/* bc 4, CR0_EQ, -884 */
		/* 82123B3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123B3Ch case    1:*/		return 0x82123B40;
		  /* 82123B40h */ case    2:  		/* li R3, 286 */
		/* 82123B40h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11E);
		/* 82123B40h case    2:*/		return 0x82123B44;
		  /* 82123B44h */ case    3:  		/* b -3100 */
		/* 82123B44h case    3:*/		return 0x82122F28;
		/* 82123B44h case    3:*/		return 0x82123B48;
		  /* 82123B48h */ case    4:  		/* lis R10, -32253 */
		/* 82123B48h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123B48h case    4:*/		return 0x82123B4C;
		  /* 82123B4Ch */ case    5:  		/* mr R11, R3 */
		/* 82123B4Ch case    5:*/		regs.R11 = regs.R3;
		/* 82123B4Ch case    5:*/		return 0x82123B50;
		  /* 82123B50h */ case    6:  		/* addi R10, R10, 8776 */
		/* 82123B50h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2248);
		/* 82123B50h case    6:*/		return 0x82123B54;
		  /* 82123B54h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123B54h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123B54h case    7:*/		return 0x82123B58;
		  /* 82123B58h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123B58h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123B58h case    8:*/		return 0x82123B5C;
		  /* 82123B5Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123B5Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123B5Ch case    9:*/		return 0x82123B60;
		  /* 82123B60h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123B60h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123B60h case   10:*/		return 0x82123B64;
		  /* 82123B64h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123B64h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123B78;  }
		/* 82123B64h case   11:*/		return 0x82123B68;
		  /* 82123B68h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123B68h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123B68h case   12:*/		return 0x82123B6C;
		  /* 82123B6Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 82123B6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123B6Ch case   13:*/		return 0x82123B70;
		  /* 82123B70h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123B70h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123B70h case   14:*/		return 0x82123B74;
		  /* 82123B74h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123B74h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123B54;  }
		/* 82123B74h case   15:*/		return 0x82123B78;
	}
	return 0x82123B78;
} // Block from 82123B38h-82123B78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123B78);
		  /* 82123B78h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123B78h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123B78h case    0:*/		return 0x82123B7C;
		  /* 82123B7Ch */ case    1:  		/* bc 4, CR0_EQ, -948 */
		/* 82123B7Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123B7Ch case    1:*/		return 0x82123B80;
		  /* 82123B80h */ case    2:  		/* li R3, 287 */
		/* 82123B80h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x11F);
		/* 82123B80h case    2:*/		return 0x82123B84;
		  /* 82123B84h */ case    3:  		/* b -3164 */
		/* 82123B84h case    3:*/		return 0x82122F28;
		/* 82123B84h case    3:*/		return 0x82123B88;
		  /* 82123B88h */ case    4:  		/* lis R10, -32255 */
		/* 82123B88h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123B88h case    4:*/		return 0x82123B8C;
		  /* 82123B8Ch */ case    5:  		/* mr R11, R3 */
		/* 82123B8Ch case    5:*/		regs.R11 = regs.R3;
		/* 82123B8Ch case    5:*/		return 0x82123B90;
		  /* 82123B90h */ case    6:  		/* addi R10, R10, -10632 */
		/* 82123B90h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD678);
		/* 82123B90h case    6:*/		return 0x82123B94;
		  /* 82123B94h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123B94h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123B94h case    7:*/		return 0x82123B98;
		  /* 82123B98h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123B98h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123B98h case    8:*/		return 0x82123B9C;
		  /* 82123B9Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123B9Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123B9Ch case    9:*/		return 0x82123BA0;
		  /* 82123BA0h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123BA0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123BA0h case   10:*/		return 0x82123BA4;
		  /* 82123BA4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123BA4h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123BB8;  }
		/* 82123BA4h case   11:*/		return 0x82123BA8;
		  /* 82123BA8h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123BA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123BA8h case   12:*/		return 0x82123BAC;
		  /* 82123BACh */ case   13:  		/* addi R10, R10, 1 */
		/* 82123BACh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123BACh case   13:*/		return 0x82123BB0;
		  /* 82123BB0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123BB0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123BB0h case   14:*/		return 0x82123BB4;
		  /* 82123BB4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123BB4h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123B94;  }
		/* 82123BB4h case   15:*/		return 0x82123BB8;
	}
	return 0x82123BB8;
} // Block from 82123B78h-82123BB8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123BB8);
		  /* 82123BB8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123BB8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123BB8h case    0:*/		return 0x82123BBC;
		  /* 82123BBCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123BBCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123BC8;  }
		/* 82123BBCh case    1:*/		return 0x82123BC0;
		  /* 82123BC0h */ case    2:  		/* li R3, 288 */
		/* 82123BC0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x120);
		/* 82123BC0h case    2:*/		return 0x82123BC4;
		  /* 82123BC4h */ case    3:  		/* b -3228 */
		/* 82123BC4h case    3:*/		return 0x82122F28;
		/* 82123BC4h case    3:*/		return 0x82123BC8;
	}
	return 0x82123BC8;
} // Block from 82123BB8h-82123BC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123BC8);
		  /* 82123BC8h */ case    0:  		/* lis R10, -32253 */
		/* 82123BC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123BC8h case    0:*/		return 0x82123BCC;
		  /* 82123BCCh */ case    1:  		/* mr R11, R3 */
		/* 82123BCCh case    1:*/		regs.R11 = regs.R3;
		/* 82123BCCh case    1:*/		return 0x82123BD0;
		  /* 82123BD0h */ case    2:  		/* addi R10, R10, 12164 */
		/* 82123BD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F84);
		/* 82123BD0h case    2:*/		return 0x82123BD4;
		  /* 82123BD4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123BD4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123BD4h case    3:*/		return 0x82123BD8;
		  /* 82123BD8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123BD8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123BD8h case    4:*/		return 0x82123BDC;
		  /* 82123BDCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123BDCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123BDCh case    5:*/		return 0x82123BE0;
		  /* 82123BE0h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123BE0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123BE0h case    6:*/		return 0x82123BE4;
		  /* 82123BE4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123BE4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123BF8;  }
		/* 82123BE4h case    7:*/		return 0x82123BE8;
		  /* 82123BE8h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123BE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123BE8h case    8:*/		return 0x82123BEC;
		  /* 82123BECh */ case    9:  		/* addi R10, R10, 1 */
		/* 82123BECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123BECh case    9:*/		return 0x82123BF0;
		  /* 82123BF0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123BF0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123BF0h case   10:*/		return 0x82123BF4;
		  /* 82123BF4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123BF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123BD4;  }
		/* 82123BF4h case   11:*/		return 0x82123BF8;
	}
	return 0x82123BF8;
} // Block from 82123BC8h-82123BF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123BF8);
		  /* 82123BF8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123BF8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123BF8h case    0:*/		return 0x82123BFC;
		  /* 82123BFCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123BFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123C08;  }
		/* 82123BFCh case    1:*/		return 0x82123C00;
		  /* 82123C00h */ case    2:  		/* li R3, 289 */
		/* 82123C00h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x121);
		/* 82123C00h case    2:*/		return 0x82123C04;
		  /* 82123C04h */ case    3:  		/* b -3292 */
		/* 82123C04h case    3:*/		return 0x82122F28;
		/* 82123C04h case    3:*/		return 0x82123C08;
	}
	return 0x82123C08;
} // Block from 82123BF8h-82123C08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123C08);
		  /* 82123C08h */ case    0:  		/* lis R10, -32253 */
		/* 82123C08h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123C08h case    0:*/		return 0x82123C0C;
		  /* 82123C0Ch */ case    1:  		/* mr R11, R3 */
		/* 82123C0Ch case    1:*/		regs.R11 = regs.R3;
		/* 82123C0Ch case    1:*/		return 0x82123C10;
		  /* 82123C10h */ case    2:  		/* addi R10, R10, 12156 */
		/* 82123C10h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F7C);
		/* 82123C10h case    2:*/		return 0x82123C14;
		  /* 82123C14h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123C14h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123C14h case    3:*/		return 0x82123C18;
		  /* 82123C18h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123C18h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123C18h case    4:*/		return 0x82123C1C;
		  /* 82123C1Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123C1Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123C1Ch case    5:*/		return 0x82123C20;
		  /* 82123C20h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123C20h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123C20h case    6:*/		return 0x82123C24;
		  /* 82123C24h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123C24h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123C38;  }
		/* 82123C24h case    7:*/		return 0x82123C28;
		  /* 82123C28h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123C28h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123C28h case    8:*/		return 0x82123C2C;
		  /* 82123C2Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82123C2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123C2Ch case    9:*/		return 0x82123C30;
		  /* 82123C30h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123C30h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123C30h case   10:*/		return 0x82123C34;
		  /* 82123C34h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123C34h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123C14;  }
		/* 82123C34h case   11:*/		return 0x82123C38;
	}
	return 0x82123C38;
} // Block from 82123C08h-82123C38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123C38);
		  /* 82123C38h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123C38h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123C38h case    0:*/		return 0x82123C3C;
		  /* 82123C3Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123C3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123C48;  }
		/* 82123C3Ch case    1:*/		return 0x82123C40;
		  /* 82123C40h */ case    2:  		/* li R3, 290 */
		/* 82123C40h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x122);
		/* 82123C40h case    2:*/		return 0x82123C44;
		  /* 82123C44h */ case    3:  		/* b -3356 */
		/* 82123C44h case    3:*/		return 0x82122F28;
		/* 82123C44h case    3:*/		return 0x82123C48;
	}
	return 0x82123C48;
} // Block from 82123C38h-82123C48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123C48);
		  /* 82123C48h */ case    0:  		/* lis R10, -32253 */
		/* 82123C48h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123C48h case    0:*/		return 0x82123C4C;
		  /* 82123C4Ch */ case    1:  		/* mr R11, R3 */
		/* 82123C4Ch case    1:*/		regs.R11 = regs.R3;
		/* 82123C4Ch case    1:*/		return 0x82123C50;
		  /* 82123C50h */ case    2:  		/* addi R10, R10, 12148 */
		/* 82123C50h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F74);
		/* 82123C50h case    2:*/		return 0x82123C54;
		  /* 82123C54h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123C54h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123C54h case    3:*/		return 0x82123C58;
		  /* 82123C58h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123C58h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123C58h case    4:*/		return 0x82123C5C;
		  /* 82123C5Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123C5Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123C5Ch case    5:*/		return 0x82123C60;
		  /* 82123C60h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123C60h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123C60h case    6:*/		return 0x82123C64;
		  /* 82123C64h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123C64h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123C78;  }
		/* 82123C64h case    7:*/		return 0x82123C68;
		  /* 82123C68h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123C68h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123C68h case    8:*/		return 0x82123C6C;
		  /* 82123C6Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82123C6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123C6Ch case    9:*/		return 0x82123C70;
		  /* 82123C70h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123C70h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123C70h case   10:*/		return 0x82123C74;
		  /* 82123C74h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123C74h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123C54;  }
		/* 82123C74h case   11:*/		return 0x82123C78;
	}
	return 0x82123C78;
} // Block from 82123C48h-82123C78h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123C78);
		  /* 82123C78h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123C78h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123C78h case    0:*/		return 0x82123C7C;
		  /* 82123C7Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123C7Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123C88;  }
		/* 82123C7Ch case    1:*/		return 0x82123C80;
		  /* 82123C80h */ case    2:  		/* li R3, 291 */
		/* 82123C80h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x123);
		/* 82123C80h case    2:*/		return 0x82123C84;
		  /* 82123C84h */ case    3:  		/* b -3420 */
		/* 82123C84h case    3:*/		return 0x82122F28;
		/* 82123C84h case    3:*/		return 0x82123C88;
	}
	return 0x82123C88;
} // Block from 82123C78h-82123C88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123C88);
		  /* 82123C88h */ case    0:  		/* lis R10, -32255 */
		/* 82123C88h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123C88h case    0:*/		return 0x82123C8C;
		  /* 82123C8Ch */ case    1:  		/* mr R11, R3 */
		/* 82123C8Ch case    1:*/		regs.R11 = regs.R3;
		/* 82123C8Ch case    1:*/		return 0x82123C90;
		  /* 82123C90h */ case    2:  		/* addi R10, R10, -15780 */
		/* 82123C90h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC25C);
		/* 82123C90h case    2:*/		return 0x82123C94;
		  /* 82123C94h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123C94h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123C94h case    3:*/		return 0x82123C98;
		  /* 82123C98h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123C98h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123C98h case    4:*/		return 0x82123C9C;
		  /* 82123C9Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123C9Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123C9Ch case    5:*/		return 0x82123CA0;
		  /* 82123CA0h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123CA0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123CA0h case    6:*/		return 0x82123CA4;
		  /* 82123CA4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123CA4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123CB8;  }
		/* 82123CA4h case    7:*/		return 0x82123CA8;
		  /* 82123CA8h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123CA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123CA8h case    8:*/		return 0x82123CAC;
		  /* 82123CACh */ case    9:  		/* addi R10, R10, 1 */
		/* 82123CACh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123CACh case    9:*/		return 0x82123CB0;
		  /* 82123CB0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123CB0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123CB0h case   10:*/		return 0x82123CB4;
		  /* 82123CB4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123CB4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123C94;  }
		/* 82123CB4h case   11:*/		return 0x82123CB8;
	}
	return 0x82123CB8;
} // Block from 82123C88h-82123CB8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123CB8);
		  /* 82123CB8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123CB8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123CB8h case    0:*/		return 0x82123CBC;
		  /* 82123CBCh */ case    1:  		/* bc 4, CR0_EQ, -1268 */
		/* 82123CBCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123CBCh case    1:*/		return 0x82123CC0;
		  /* 82123CC0h */ case    2:  		/* li R3, 292 */
		/* 82123CC0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x124);
		/* 82123CC0h case    2:*/		return 0x82123CC4;
		  /* 82123CC4h */ case    3:  		/* b -3484 */
		/* 82123CC4h case    3:*/		return 0x82122F28;
		/* 82123CC4h case    3:*/		return 0x82123CC8;
		  /* 82123CC8h */ case    4:  		/* lis R10, -32255 */
		/* 82123CC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123CC8h case    4:*/		return 0x82123CCC;
		  /* 82123CCCh */ case    5:  		/* mr R11, R3 */
		/* 82123CCCh case    5:*/		regs.R11 = regs.R3;
		/* 82123CCCh case    5:*/		return 0x82123CD0;
		  /* 82123CD0h */ case    6:  		/* addi R10, R10, -10628 */
		/* 82123CD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD67C);
		/* 82123CD0h case    6:*/		return 0x82123CD4;
		  /* 82123CD4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123CD4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123CD4h case    7:*/		return 0x82123CD8;
		  /* 82123CD8h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123CD8h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123CD8h case    8:*/		return 0x82123CDC;
		  /* 82123CDCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123CDCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123CDCh case    9:*/		return 0x82123CE0;
		  /* 82123CE0h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123CE0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123CE0h case   10:*/		return 0x82123CE4;
		  /* 82123CE4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123CE4h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123CF8;  }
		/* 82123CE4h case   11:*/		return 0x82123CE8;
		  /* 82123CE8h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123CE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123CE8h case   12:*/		return 0x82123CEC;
		  /* 82123CECh */ case   13:  		/* addi R10, R10, 1 */
		/* 82123CECh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123CECh case   13:*/		return 0x82123CF0;
		  /* 82123CF0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123CF0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123CF0h case   14:*/		return 0x82123CF4;
		  /* 82123CF4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123CF4h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123CD4;  }
		/* 82123CF4h case   15:*/		return 0x82123CF8;
	}
	return 0x82123CF8;
} // Block from 82123CB8h-82123CF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123CF8);
		  /* 82123CF8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123CF8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123CF8h case    0:*/		return 0x82123CFC;
		  /* 82123CFCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123CFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123D08;  }
		/* 82123CFCh case    1:*/		return 0x82123D00;
		  /* 82123D00h */ case    2:  		/* li R3, 293 */
		/* 82123D00h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x125);
		/* 82123D00h case    2:*/		return 0x82123D04;
		  /* 82123D04h */ case    3:  		/* b -3548 */
		/* 82123D04h case    3:*/		return 0x82122F28;
		/* 82123D04h case    3:*/		return 0x82123D08;
	}
	return 0x82123D08;
} // Block from 82123CF8h-82123D08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123D08);
		  /* 82123D08h */ case    0:  		/* lis R10, -32253 */
		/* 82123D08h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123D08h case    0:*/		return 0x82123D0C;
		  /* 82123D0Ch */ case    1:  		/* mr R11, R3 */
		/* 82123D0Ch case    1:*/		regs.R11 = regs.R3;
		/* 82123D0Ch case    1:*/		return 0x82123D10;
		  /* 82123D10h */ case    2:  		/* addi R10, R10, 12140 */
		/* 82123D10h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F6C);
		/* 82123D10h case    2:*/		return 0x82123D14;
		  /* 82123D14h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123D14h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123D14h case    3:*/		return 0x82123D18;
		  /* 82123D18h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123D18h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123D18h case    4:*/		return 0x82123D1C;
		  /* 82123D1Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123D1Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123D1Ch case    5:*/		return 0x82123D20;
		  /* 82123D20h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123D20h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123D20h case    6:*/		return 0x82123D24;
		  /* 82123D24h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123D24h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123D38;  }
		/* 82123D24h case    7:*/		return 0x82123D28;
		  /* 82123D28h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123D28h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123D28h case    8:*/		return 0x82123D2C;
		  /* 82123D2Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82123D2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123D2Ch case    9:*/		return 0x82123D30;
		  /* 82123D30h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123D30h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123D30h case   10:*/		return 0x82123D34;
		  /* 82123D34h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123D34h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123D14;  }
		/* 82123D34h case   11:*/		return 0x82123D38;
	}
	return 0x82123D38;
} // Block from 82123D08h-82123D38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123D38);
		  /* 82123D38h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123D38h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123D38h case    0:*/		return 0x82123D3C;
		  /* 82123D3Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123D3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123D48;  }
		/* 82123D3Ch case    1:*/		return 0x82123D40;
		  /* 82123D40h */ case    2:  		/* li R3, 294 */
		/* 82123D40h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x126);
		/* 82123D40h case    2:*/		return 0x82123D44;
		  /* 82123D44h */ case    3:  		/* b -3612 */
		/* 82123D44h case    3:*/		return 0x82122F28;
		/* 82123D44h case    3:*/		return 0x82123D48;
	}
	return 0x82123D48;
} // Block from 82123D38h-82123D48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123D48);
		  /* 82123D48h */ case    0:  		/* lis R10, -32255 */
		/* 82123D48h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123D48h case    0:*/		return 0x82123D4C;
		  /* 82123D4Ch */ case    1:  		/* mr R11, R3 */
		/* 82123D4Ch case    1:*/		regs.R11 = regs.R3;
		/* 82123D4Ch case    1:*/		return 0x82123D50;
		  /* 82123D50h */ case    2:  		/* addi R10, R10, -15788 */
		/* 82123D50h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC254);
		/* 82123D50h case    2:*/		return 0x82123D54;
		  /* 82123D54h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123D54h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123D54h case    3:*/		return 0x82123D58;
		  /* 82123D58h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123D58h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123D58h case    4:*/		return 0x82123D5C;
		  /* 82123D5Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123D5Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123D5Ch case    5:*/		return 0x82123D60;
		  /* 82123D60h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123D60h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123D60h case    6:*/		return 0x82123D64;
		  /* 82123D64h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123D64h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123D78;  }
		/* 82123D64h case    7:*/		return 0x82123D68;
		  /* 82123D68h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123D68h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123D68h case    8:*/		return 0x82123D6C;
		  /* 82123D6Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82123D6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123D6Ch case    9:*/		return 0x82123D70;
		  /* 82123D70h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123D70h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123D70h case   10:*/		return 0x82123D74;
		  /* 82123D74h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123D74h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123D54;  }
		/* 82123D74h case   11:*/		return 0x82123D78;
	}
	return 0x82123D78;
} // Block from 82123D48h-82123D78h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123D78);
		  /* 82123D78h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123D78h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123D78h case    0:*/		return 0x82123D7C;
		  /* 82123D7Ch */ case    1:  		/* bc 12, CR0_EQ, -3608 */
		/* 82123D7Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82123D7Ch case    1:*/		return 0x82123D80;
		  /* 82123D80h */ case    2:  		/* lwz R11, <#[R31 + 92]> */
		/* 82123D80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82123D80h case    2:*/		return 0x82123D84;
		  /* 82123D84h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 82123D84h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82123D84h case    3:*/		return 0x82123D88;
		  /* 82123D88h */ case    4:  		/* bc 12, CR6_EQ, -1472 */
		/* 82123D88h case    4:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82123D88h case    4:*/		return 0x82123D8C;
		  /* 82123D8Ch */ case    5:  		/* lis R10, -32255 */
		/* 82123D8Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123D8Ch case    5:*/		return 0x82123D90;
		  /* 82123D90h */ case    6:  		/* mr R11, R3 */
		/* 82123D90h case    6:*/		regs.R11 = regs.R3;
		/* 82123D90h case    6:*/		return 0x82123D94;
		  /* 82123D94h */ case    7:  		/* addi R10, R10, 11864 */
		/* 82123D94h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E58);
		/* 82123D94h case    7:*/		return 0x82123D98;
		  /* 82123D98h */ case    8:  		/* lbz R9, <#[R11]> */
		/* 82123D98h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123D98h case    8:*/		return 0x82123D9C;
		  /* 82123D9Ch */ case    9:  		/* lbz R8, <#[R10]> */
		/* 82123D9Ch case    9:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123D9Ch case    9:*/		return 0x82123DA0;
		  /* 82123DA0h */ case   10:  		/* cmpwi CR0, R9, 0 */
		/* 82123DA0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123DA0h case   10:*/		return 0x82123DA4;
		  /* 82123DA4h */ case   11:  		/* subf R9, R8, R9 */
		/* 82123DA4h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123DA4h case   11:*/		return 0x82123DA8;
		  /* 82123DA8h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 82123DA8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82123DBC;  }
		/* 82123DA8h case   12:*/		return 0x82123DAC;
		  /* 82123DACh */ case   13:  		/* addi R11, R11, 1 */
		/* 82123DACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123DACh case   13:*/		return 0x82123DB0;
		  /* 82123DB0h */ case   14:  		/* addi R10, R10, 1 */
		/* 82123DB0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123DB0h case   14:*/		return 0x82123DB4;
		  /* 82123DB4h */ case   15:  		/* cmpwi CR6, R9, 0 */
		/* 82123DB4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123DB4h case   15:*/		return 0x82123DB8;
		  /* 82123DB8h */ case   16:  		/* bc 12, CR6_EQ, -32 */
		/* 82123DB8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82123D98;  }
		/* 82123DB8h case   16:*/		return 0x82123DBC;
	}
	return 0x82123DBC;
} // Block from 82123D78h-82123DBCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82123DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123DBC);
		  /* 82123DBCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123DBCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123DBCh case    0:*/		return 0x82123DC0;
		  /* 82123DC0h */ case    1:  		/* bc 4, CR0_EQ, -1528 */
		/* 82123DC0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123DC0h case    1:*/		return 0x82123DC4;
		  /* 82123DC4h */ case    2:  		/* li R3, 295 */
		/* 82123DC4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x127);
		/* 82123DC4h case    2:*/		return 0x82123DC8;
		  /* 82123DC8h */ case    3:  		/* b -3744 */
		/* 82123DC8h case    3:*/		return 0x82122F28;
		/* 82123DC8h case    3:*/		return 0x82123DCC;
		  /* 82123DCCh */ case    4:  		/* lis R10, -32253 */
		/* 82123DCCh case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123DCCh case    4:*/		return 0x82123DD0;
		  /* 82123DD0h */ case    5:  		/* mr R11, R3 */
		/* 82123DD0h case    5:*/		regs.R11 = regs.R3;
		/* 82123DD0h case    5:*/		return 0x82123DD4;
		  /* 82123DD4h */ case    6:  		/* addi R10, R10, 8460 */
		/* 82123DD4h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x210C);
		/* 82123DD4h case    6:*/		return 0x82123DD8;
		  /* 82123DD8h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123DD8h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123DD8h case    7:*/		return 0x82123DDC;
		  /* 82123DDCh */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123DDCh case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123DDCh case    8:*/		return 0x82123DE0;
		  /* 82123DE0h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123DE0h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123DE0h case    9:*/		return 0x82123DE4;
		  /* 82123DE4h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123DE4h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123DE4h case   10:*/		return 0x82123DE8;
		  /* 82123DE8h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123DE8h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123DFC;  }
		/* 82123DE8h case   11:*/		return 0x82123DEC;
		  /* 82123DECh */ case   12:  		/* addi R11, R11, 1 */
		/* 82123DECh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123DECh case   12:*/		return 0x82123DF0;
		  /* 82123DF0h */ case   13:  		/* addi R10, R10, 1 */
		/* 82123DF0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123DF0h case   13:*/		return 0x82123DF4;
		  /* 82123DF4h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123DF4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123DF4h case   14:*/		return 0x82123DF8;
		  /* 82123DF8h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123DF8h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123DD8;  }
		/* 82123DF8h case   15:*/		return 0x82123DFC;
	}
	return 0x82123DFC;
} // Block from 82123DBCh-82123DFCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123DFC);
		  /* 82123DFCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123DFCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123DFCh case    0:*/		return 0x82123E00;
		  /* 82123E00h */ case    1:  		/* bc 4, CR0_EQ, -1592 */
		/* 82123E00h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123E00h case    1:*/		return 0x82123E04;
		  /* 82123E04h */ case    2:  		/* li R3, 296 */
		/* 82123E04h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x128);
		/* 82123E04h case    2:*/		return 0x82123E08;
		  /* 82123E08h */ case    3:  		/* b -3808 */
		/* 82123E08h case    3:*/		return 0x82122F28;
		/* 82123E08h case    3:*/		return 0x82123E0C;
		  /* 82123E0Ch */ case    4:  		/* lis R10, -32253 */
		/* 82123E0Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123E0Ch case    4:*/		return 0x82123E10;
		  /* 82123E10h */ case    5:  		/* mr R11, R3 */
		/* 82123E10h case    5:*/		regs.R11 = regs.R3;
		/* 82123E10h case    5:*/		return 0x82123E14;
		  /* 82123E14h */ case    6:  		/* addi R10, R10, 9660 */
		/* 82123E14h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x25BC);
		/* 82123E14h case    6:*/		return 0x82123E18;
		  /* 82123E18h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123E18h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123E18h case    7:*/		return 0x82123E1C;
		  /* 82123E1Ch */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123E1Ch case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123E1Ch case    8:*/		return 0x82123E20;
		  /* 82123E20h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123E20h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123E20h case    9:*/		return 0x82123E24;
		  /* 82123E24h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123E24h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123E24h case   10:*/		return 0x82123E28;
		  /* 82123E28h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123E28h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123E3C;  }
		/* 82123E28h case   11:*/		return 0x82123E2C;
		  /* 82123E2Ch */ case   12:  		/* addi R11, R11, 1 */
		/* 82123E2Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123E2Ch case   12:*/		return 0x82123E30;
		  /* 82123E30h */ case   13:  		/* addi R10, R10, 1 */
		/* 82123E30h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123E30h case   13:*/		return 0x82123E34;
		  /* 82123E34h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123E34h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123E34h case   14:*/		return 0x82123E38;
		  /* 82123E38h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123E38h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123E18;  }
		/* 82123E38h case   15:*/		return 0x82123E3C;
	}
	return 0x82123E3C;
} // Block from 82123DFCh-82123E3Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123E3C);
		  /* 82123E3Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123E3Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123E3Ch case    0:*/		return 0x82123E40;
		  /* 82123E40h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123E40h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123E4C;  }
		/* 82123E40h case    1:*/		return 0x82123E44;
		  /* 82123E44h */ case    2:  		/* li R3, 297 */
		/* 82123E44h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x129);
		/* 82123E44h case    2:*/		return 0x82123E48;
		  /* 82123E48h */ case    3:  		/* b -3872 */
		/* 82123E48h case    3:*/		return 0x82122F28;
		/* 82123E48h case    3:*/		return 0x82123E4C;
	}
	return 0x82123E4C;
} // Block from 82123E3Ch-82123E4Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123E4C);
		  /* 82123E4Ch */ case    0:  		/* lis R10, -32253 */
		/* 82123E4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123E4Ch case    0:*/		return 0x82123E50;
		  /* 82123E50h */ case    1:  		/* mr R11, R3 */
		/* 82123E50h case    1:*/		regs.R11 = regs.R3;
		/* 82123E50h case    1:*/		return 0x82123E54;
		  /* 82123E54h */ case    2:  		/* addi R10, R10, 12132 */
		/* 82123E54h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F64);
		/* 82123E54h case    2:*/		return 0x82123E58;
		  /* 82123E58h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123E58h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123E58h case    3:*/		return 0x82123E5C;
		  /* 82123E5Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123E5Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123E5Ch case    4:*/		return 0x82123E60;
		  /* 82123E60h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123E60h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123E60h case    5:*/		return 0x82123E64;
		  /* 82123E64h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123E64h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123E64h case    6:*/		return 0x82123E68;
		  /* 82123E68h */ case    7:  		/* bc 12, CR0_EQ, -1704 */
		/* 82123E68h case    7:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 82123E68h case    7:*/		return 0x82123E6C;
		  /* 82123E6Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82123E6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123E6Ch case    8:*/		return 0x82123E70;
		  /* 82123E70h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123E70h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123E70h case    9:*/		return 0x82123E74;
		  /* 82123E74h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123E74h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123E74h case   10:*/		return 0x82123E78;
		  /* 82123E78h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123E78h case   11:*/		if ( regs.CR[6].eq ) { return 0x82123E58;  }
		/* 82123E78h case   11:*/		return 0x82123E7C;
		  /* 82123E7Ch */ case   12:  		/* b -1724 */
		/* 82123E7Ch case   12:*/		return 0x821237C0;
		/* 82123E7Ch case   12:*/		return 0x82123E80;
		  /* 82123E80h */ case   13:  		/* lis R10, -32255 */
		/* 82123E80h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123E80h case   13:*/		return 0x82123E84;
		  /* 82123E84h */ case   14:  		/* mr R11, R3 */
		/* 82123E84h case   14:*/		regs.R11 = regs.R3;
		/* 82123E84h case   14:*/		return 0x82123E88;
		  /* 82123E88h */ case   15:  		/* addi R10, R10, 23340 */
		/* 82123E88h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x5B2C);
		/* 82123E88h case   15:*/		return 0x82123E8C;
		  /* 82123E8Ch */ case   16:  		/* lbz R9, <#[R11]> */
		/* 82123E8Ch case   16:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123E8Ch case   16:*/		return 0x82123E90;
		  /* 82123E90h */ case   17:  		/* lbz R8, <#[R10]> */
		/* 82123E90h case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123E90h case   17:*/		return 0x82123E94;
		  /* 82123E94h */ case   18:  		/* cmpwi CR0, R9, 0 */
		/* 82123E94h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123E94h case   18:*/		return 0x82123E98;
		  /* 82123E98h */ case   19:  		/* subf R9, R8, R9 */
		/* 82123E98h case   19:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123E98h case   19:*/		return 0x82123E9C;
		  /* 82123E9Ch */ case   20:  		/* bc 12, CR0_EQ, 20 */
		/* 82123E9Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x82123EB0;  }
		/* 82123E9Ch case   20:*/		return 0x82123EA0;
		  /* 82123EA0h */ case   21:  		/* addi R11, R11, 1 */
		/* 82123EA0h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123EA0h case   21:*/		return 0x82123EA4;
		  /* 82123EA4h */ case   22:  		/* addi R10, R10, 1 */
		/* 82123EA4h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123EA4h case   22:*/		return 0x82123EA8;
		  /* 82123EA8h */ case   23:  		/* cmpwi CR6, R9, 0 */
		/* 82123EA8h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123EA8h case   23:*/		return 0x82123EAC;
		  /* 82123EACh */ case   24:  		/* bc 12, CR6_EQ, -32 */
		/* 82123EACh case   24:*/		if ( regs.CR[6].eq ) { return 0x82123E8C;  }
		/* 82123EACh case   24:*/		return 0x82123EB0;
	}
	return 0x82123EB0;
} // Block from 82123E4Ch-82123EB0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82123EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123EB0);
		  /* 82123EB0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123EB0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123EB0h case    0:*/		return 0x82123EB4;
		  /* 82123EB4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123EB4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123EC0;  }
		/* 82123EB4h case    1:*/		return 0x82123EB8;
		  /* 82123EB8h */ case    2:  		/* li R3, 271 */
		/* 82123EB8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x10F);
		/* 82123EB8h case    2:*/		return 0x82123EBC;
		  /* 82123EBCh */ case    3:  		/* b -3988 */
		/* 82123EBCh case    3:*/		return 0x82122F28;
		/* 82123EBCh case    3:*/		return 0x82123EC0;
	}
	return 0x82123EC0;
} // Block from 82123EB0h-82123EC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123EC0);
		  /* 82123EC0h */ case    0:  		/* lis R10, -32253 */
		/* 82123EC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123EC0h case    0:*/		return 0x82123EC4;
		  /* 82123EC4h */ case    1:  		/* mr R11, R3 */
		/* 82123EC4h case    1:*/		regs.R11 = regs.R3;
		/* 82123EC4h case    1:*/		return 0x82123EC8;
		  /* 82123EC8h */ case    2:  		/* addi R10, R10, 9596 */
		/* 82123EC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x257C);
		/* 82123EC8h case    2:*/		return 0x82123ECC;
		  /* 82123ECCh */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123ECCh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123ECCh case    3:*/		return 0x82123ED0;
		  /* 82123ED0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123ED0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123ED0h case    4:*/		return 0x82123ED4;
		  /* 82123ED4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123ED4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123ED4h case    5:*/		return 0x82123ED8;
		  /* 82123ED8h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123ED8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123ED8h case    6:*/		return 0x82123EDC;
		  /* 82123EDCh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123EDCh case    7:*/		if ( regs.CR[0].eq ) { return 0x82123EF0;  }
		/* 82123EDCh case    7:*/		return 0x82123EE0;
		  /* 82123EE0h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123EE0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123EE0h case    8:*/		return 0x82123EE4;
		  /* 82123EE4h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123EE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123EE4h case    9:*/		return 0x82123EE8;
		  /* 82123EE8h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123EE8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123EE8h case   10:*/		return 0x82123EEC;
		  /* 82123EECh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123EECh case   11:*/		if ( regs.CR[6].eq ) { return 0x82123ECC;  }
		/* 82123EECh case   11:*/		return 0x82123EF0;
	}
	return 0x82123EF0;
} // Block from 82123EC0h-82123EF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123EF0);
		  /* 82123EF0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123EF0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123EF0h case    0:*/		return 0x82123EF4;
		  /* 82123EF4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123EF4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123F00;  }
		/* 82123EF4h case    1:*/		return 0x82123EF8;
		  /* 82123EF8h */ case    2:  		/* li R3, 298 */
		/* 82123EF8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12A);
		/* 82123EF8h case    2:*/		return 0x82123EFC;
		  /* 82123EFCh */ case    3:  		/* b -4052 */
		/* 82123EFCh case    3:*/		return 0x82122F28;
		/* 82123EFCh case    3:*/		return 0x82123F00;
	}
	return 0x82123F00;
} // Block from 82123EF0h-82123F00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123F00);
		  /* 82123F00h */ case    0:  		/* lis R10, -32253 */
		/* 82123F00h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123F00h case    0:*/		return 0x82123F04;
		  /* 82123F04h */ case    1:  		/* mr R11, R3 */
		/* 82123F04h case    1:*/		regs.R11 = regs.R3;
		/* 82123F04h case    1:*/		return 0x82123F08;
		  /* 82123F08h */ case    2:  		/* addi R10, R10, 12128 */
		/* 82123F08h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F60);
		/* 82123F08h case    2:*/		return 0x82123F0C;
		  /* 82123F0Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82123F0Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123F0Ch case    3:*/		return 0x82123F10;
		  /* 82123F10h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82123F10h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123F10h case    4:*/		return 0x82123F14;
		  /* 82123F14h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82123F14h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123F14h case    5:*/		return 0x82123F18;
		  /* 82123F18h */ case    6:  		/* subf R9, R8, R9 */
		/* 82123F18h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123F18h case    6:*/		return 0x82123F1C;
		  /* 82123F1Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82123F1Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82123F30;  }
		/* 82123F1Ch case    7:*/		return 0x82123F20;
		  /* 82123F20h */ case    8:  		/* addi R11, R11, 1 */
		/* 82123F20h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123F20h case    8:*/		return 0x82123F24;
		  /* 82123F24h */ case    9:  		/* addi R10, R10, 1 */
		/* 82123F24h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123F24h case    9:*/		return 0x82123F28;
		  /* 82123F28h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82123F28h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123F28h case   10:*/		return 0x82123F2C;
		  /* 82123F2Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82123F2Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82123F0C;  }
		/* 82123F2Ch case   11:*/		return 0x82123F30;
	}
	return 0x82123F30;
} // Block from 82123F00h-82123F30h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82123F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123F30);
		  /* 82123F30h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123F30h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123F30h case    0:*/		return 0x82123F34;
		  /* 82123F34h */ case    1:  		/* bc 12, CR0_EQ, -4048 */
		/* 82123F34h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82123F34h case    1:*/		return 0x82123F38;
		  /* 82123F38h */ case    2:  		/* lis R10, -32253 */
		/* 82123F38h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123F38h case    2:*/		return 0x82123F3C;
		  /* 82123F3Ch */ case    3:  		/* mr R11, R3 */
		/* 82123F3Ch case    3:*/		regs.R11 = regs.R3;
		/* 82123F3Ch case    3:*/		return 0x82123F40;
		  /* 82123F40h */ case    4:  		/* addi R10, R10, 12112 */
		/* 82123F40h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F50);
		/* 82123F40h case    4:*/		return 0x82123F44;
		  /* 82123F44h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82123F44h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123F44h case    5:*/		return 0x82123F48;
		  /* 82123F48h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82123F48h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123F48h case    6:*/		return 0x82123F4C;
		  /* 82123F4Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82123F4Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123F4Ch case    7:*/		return 0x82123F50;
		  /* 82123F50h */ case    8:  		/* subf R9, R8, R9 */
		/* 82123F50h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123F50h case    8:*/		return 0x82123F54;
		  /* 82123F54h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82123F54h case    9:*/		if ( regs.CR[0].eq ) { return 0x82123F68;  }
		/* 82123F54h case    9:*/		return 0x82123F58;
		  /* 82123F58h */ case   10:  		/* addi R11, R11, 1 */
		/* 82123F58h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123F58h case   10:*/		return 0x82123F5C;
		  /* 82123F5Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 82123F5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123F5Ch case   11:*/		return 0x82123F60;
		  /* 82123F60h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82123F60h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123F60h case   12:*/		return 0x82123F64;
		  /* 82123F64h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82123F64h case   13:*/		if ( regs.CR[6].eq ) { return 0x82123F44;  }
		/* 82123F64h case   13:*/		return 0x82123F68;
	}
	return 0x82123F68;
} // Block from 82123F30h-82123F68h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82123F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123F68);
		  /* 82123F68h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123F68h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123F68h case    0:*/		return 0x82123F6C;
		  /* 82123F6Ch */ case    1:  		/* bc 4, CR0_EQ, -1956 */
		/* 82123F6Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123F6Ch case    1:*/		return 0x82123F70;
		  /* 82123F70h */ case    2:  		/* li R3, 299 */
		/* 82123F70h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12B);
		/* 82123F70h case    2:*/		return 0x82123F74;
		  /* 82123F74h */ case    3:  		/* b -4172 */
		/* 82123F74h case    3:*/		return 0x82122F28;
		/* 82123F74h case    3:*/		return 0x82123F78;
		  /* 82123F78h */ case    4:  		/* lis R10, -32255 */
		/* 82123F78h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123F78h case    4:*/		return 0x82123F7C;
		  /* 82123F7Ch */ case    5:  		/* mr R11, R3 */
		/* 82123F7Ch case    5:*/		regs.R11 = regs.R3;
		/* 82123F7Ch case    5:*/		return 0x82123F80;
		  /* 82123F80h */ case    6:  		/* addi R10, R10, -15872 */
		/* 82123F80h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC200);
		/* 82123F80h case    6:*/		return 0x82123F84;
		  /* 82123F84h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123F84h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123F84h case    7:*/		return 0x82123F88;
		  /* 82123F88h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123F88h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123F88h case    8:*/		return 0x82123F8C;
		  /* 82123F8Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123F8Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123F8Ch case    9:*/		return 0x82123F90;
		  /* 82123F90h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123F90h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123F90h case   10:*/		return 0x82123F94;
		  /* 82123F94h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123F94h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123FA8;  }
		/* 82123F94h case   11:*/		return 0x82123F98;
		  /* 82123F98h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123F98h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123F98h case   12:*/		return 0x82123F9C;
		  /* 82123F9Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 82123F9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123F9Ch case   13:*/		return 0x82123FA0;
		  /* 82123FA0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123FA0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123FA0h case   14:*/		return 0x82123FA4;
		  /* 82123FA4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123FA4h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123F84;  }
		/* 82123FA4h case   15:*/		return 0x82123FA8;
	}
	return 0x82123FA8;
} // Block from 82123F68h-82123FA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123FA8);
		  /* 82123FA8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123FA8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123FA8h case    0:*/		return 0x82123FAC;
		  /* 82123FACh */ case    1:  		/* bc 4, CR0_EQ, -2020 */
		/* 82123FACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82123FACh case    1:*/		return 0x82123FB0;
		  /* 82123FB0h */ case    2:  		/* li R3, 300 */
		/* 82123FB0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12C);
		/* 82123FB0h case    2:*/		return 0x82123FB4;
		  /* 82123FB4h */ case    3:  		/* b -4236 */
		/* 82123FB4h case    3:*/		return 0x82122F28;
		/* 82123FB4h case    3:*/		return 0x82123FB8;
		  /* 82123FB8h */ case    4:  		/* lis R10, -32253 */
		/* 82123FB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82123FB8h case    4:*/		return 0x82123FBC;
		  /* 82123FBCh */ case    5:  		/* mr R11, R3 */
		/* 82123FBCh case    5:*/		regs.R11 = regs.R3;
		/* 82123FBCh case    5:*/		return 0x82123FC0;
		  /* 82123FC0h */ case    6:  		/* addi R10, R10, 12108 */
		/* 82123FC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F4C);
		/* 82123FC0h case    6:*/		return 0x82123FC4;
		  /* 82123FC4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82123FC4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82123FC4h case    7:*/		return 0x82123FC8;
		  /* 82123FC8h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82123FC8h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82123FC8h case    8:*/		return 0x82123FCC;
		  /* 82123FCCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82123FCCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123FCCh case    9:*/		return 0x82123FD0;
		  /* 82123FD0h */ case   10:  		/* subf R9, R8, R9 */
		/* 82123FD0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82123FD0h case   10:*/		return 0x82123FD4;
		  /* 82123FD4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82123FD4h case   11:*/		if ( regs.CR[0].eq ) { return 0x82123FE8;  }
		/* 82123FD4h case   11:*/		return 0x82123FD8;
		  /* 82123FD8h */ case   12:  		/* addi R11, R11, 1 */
		/* 82123FD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82123FD8h case   12:*/		return 0x82123FDC;
		  /* 82123FDCh */ case   13:  		/* addi R10, R10, 1 */
		/* 82123FDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82123FDCh case   13:*/		return 0x82123FE0;
		  /* 82123FE0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82123FE0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82123FE0h case   14:*/		return 0x82123FE4;
		  /* 82123FE4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82123FE4h case   15:*/		if ( regs.CR[6].eq ) { return 0x82123FC4;  }
		/* 82123FE4h case   15:*/		return 0x82123FE8;
	}
	return 0x82123FE8;
} // Block from 82123FA8h-82123FE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82123FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123FE8);
		  /* 82123FE8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82123FE8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82123FE8h case    0:*/		return 0x82123FEC;
		  /* 82123FECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82123FECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82123FF8;  }
		/* 82123FECh case    1:*/		return 0x82123FF0;
		  /* 82123FF0h */ case    2:  		/* li R3, 301 */
		/* 82123FF0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12D);
		/* 82123FF0h case    2:*/		return 0x82123FF4;
		  /* 82123FF4h */ case    3:  		/* b -4300 */
		/* 82123FF4h case    3:*/		return 0x82122F28;
		/* 82123FF4h case    3:*/		return 0x82123FF8;
	}
	return 0x82123FF8;
} // Block from 82123FE8h-82123FF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82123FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82123FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82123FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82123FF8);
		  /* 82123FF8h */ case    0:  		/* lis R10, -32255 */
		/* 82123FF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82123FF8h case    0:*/		return 0x82123FFC;
		  /* 82123FFCh */ case    1:  		/* mr R11, R3 */
		/* 82123FFCh case    1:*/		regs.R11 = regs.R3;
		/* 82123FFCh case    1:*/		return 0x82124000;
		  /* 82124000h */ case    2:  		/* addi R10, R10, -16512 */
		/* 82124000h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFBF80);
		/* 82124000h case    2:*/		return 0x82124004;
		  /* 82124004h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124004h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124004h case    3:*/		return 0x82124008;
		  /* 82124008h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124008h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124008h case    4:*/		return 0x8212400C;
		  /* 8212400Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212400Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212400Ch case    5:*/		return 0x82124010;
		  /* 82124010h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124010h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124010h case    6:*/		return 0x82124014;
		  /* 82124014h */ case    7:  		/* bc 12, CR0_EQ, -2132 */
		/* 82124014h case    7:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 82124014h case    7:*/		return 0x82124018;
		  /* 82124018h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124018h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124018h case    8:*/		return 0x8212401C;
		  /* 8212401Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212401Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212401Ch case    9:*/		return 0x82124020;
		  /* 82124020h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124020h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124020h case   10:*/		return 0x82124024;
		  /* 82124024h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124024h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124004;  }
		/* 82124024h case   11:*/		return 0x82124028;
		  /* 82124028h */ case   12:  		/* b -2152 */
		/* 82124028h case   12:*/		return 0x821237C0;
		/* 82124028h case   12:*/		return 0x8212402C;
		  /* 8212402Ch */ case   13:  		/* lis R10, -32253 */
		/* 8212402Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212402Ch case   13:*/		return 0x82124030;
		  /* 82124030h */ case   14:  		/* mr R11, R3 */
		/* 82124030h case   14:*/		regs.R11 = regs.R3;
		/* 82124030h case   14:*/		return 0x82124034;
		  /* 82124034h */ case   15:  		/* addi R10, R10, 12096 */
		/* 82124034h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F40);
		/* 82124034h case   15:*/		return 0x82124038;
		  /* 82124038h */ case   16:  		/* lbz R9, <#[R11]> */
		/* 82124038h case   16:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124038h case   16:*/		return 0x8212403C;
		  /* 8212403Ch */ case   17:  		/* lbz R8, <#[R10]> */
		/* 8212403Ch case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212403Ch case   17:*/		return 0x82124040;
		  /* 82124040h */ case   18:  		/* cmpwi CR0, R9, 0 */
		/* 82124040h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124040h case   18:*/		return 0x82124044;
		  /* 82124044h */ case   19:  		/* subf R9, R8, R9 */
		/* 82124044h case   19:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124044h case   19:*/		return 0x82124048;
		  /* 82124048h */ case   20:  		/* bc 12, CR0_EQ, 20 */
		/* 82124048h case   20:*/		if ( regs.CR[0].eq ) { return 0x8212405C;  }
		/* 82124048h case   20:*/		return 0x8212404C;
		  /* 8212404Ch */ case   21:  		/* addi R11, R11, 1 */
		/* 8212404Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212404Ch case   21:*/		return 0x82124050;
		  /* 82124050h */ case   22:  		/* addi R10, R10, 1 */
		/* 82124050h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124050h case   22:*/		return 0x82124054;
		  /* 82124054h */ case   23:  		/* cmpwi CR6, R9, 0 */
		/* 82124054h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124054h case   23:*/		return 0x82124058;
		  /* 82124058h */ case   24:  		/* bc 12, CR6_EQ, -32 */
		/* 82124058h case   24:*/		if ( regs.CR[6].eq ) { return 0x82124038;  }
		/* 82124058h case   24:*/		return 0x8212405C;
	}
	return 0x8212405C;
} // Block from 82123FF8h-8212405Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8212405Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212405C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212405C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212405C);
		  /* 8212405Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212405Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212405Ch case    0:*/		return 0x82124060;
		  /* 82124060h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124060h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212406C;  }
		/* 82124060h case    1:*/		return 0x82124064;
		  /* 82124064h */ case    2:  		/* li R3, 302 */
		/* 82124064h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12E);
		/* 82124064h case    2:*/		return 0x82124068;
		  /* 82124068h */ case    3:  		/* b -4416 */
		/* 82124068h case    3:*/		return 0x82122F28;
		/* 82124068h case    3:*/		return 0x8212406C;
	}
	return 0x8212406C;
} // Block from 8212405Ch-8212406Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212406Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212406C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212406C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212406C);
		  /* 8212406Ch */ case    0:  		/* mr R10, R29 */
		/* 8212406Ch case    0:*/		regs.R10 = regs.R29;
		/* 8212406Ch case    0:*/		return 0x82124070;
		  /* 82124070h */ case    1:  		/* mr R11, R3 */
		/* 82124070h case    1:*/		regs.R11 = regs.R3;
		/* 82124070h case    1:*/		return 0x82124074;
		  /* 82124074h */ case    2:  		/* lbz R9, <#[R11]> */
		/* 82124074h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124074h case    2:*/		return 0x82124078;
		  /* 82124078h */ case    3:  		/* lbz R8, <#[R10]> */
		/* 82124078h case    3:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124078h case    3:*/		return 0x8212407C;
		  /* 8212407Ch */ case    4:  		/* cmpwi CR0, R9, 0 */
		/* 8212407Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212407Ch case    4:*/		return 0x82124080;
		  /* 82124080h */ case    5:  		/* subf R9, R8, R9 */
		/* 82124080h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124080h case    5:*/		return 0x82124084;
		  /* 82124084h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 82124084h case    6:*/		if ( regs.CR[0].eq ) { return 0x82124098;  }
		/* 82124084h case    6:*/		return 0x82124088;
		  /* 82124088h */ case    7:  		/* addi R11, R11, 1 */
		/* 82124088h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124088h case    7:*/		return 0x8212408C;
		  /* 8212408Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 8212408Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212408Ch case    8:*/		return 0x82124090;
		  /* 82124090h */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 82124090h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124090h case    9:*/		return 0x82124094;
		  /* 82124094h */ case   10:  		/* bc 12, CR6_EQ, -32 */
		/* 82124094h case   10:*/		if ( regs.CR[6].eq ) { return 0x82124074;  }
		/* 82124094h case   10:*/		return 0x82124098;
	}
	return 0x82124098;
} // Block from 8212406Ch-82124098h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82124098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124098);
		  /* 82124098h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124098h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124098h case    0:*/		return 0x8212409C;
		  /* 8212409Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8212409Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821240A8;  }
		/* 8212409Ch case    1:*/		return 0x821240A0;
		  /* 821240A0h */ case    2:  		/* li R3, 303 */
		/* 821240A0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x12F);
		/* 821240A0h case    2:*/		return 0x821240A4;
		  /* 821240A4h */ case    3:  		/* b -4476 */
		/* 821240A4h case    3:*/		return 0x82122F28;
		/* 821240A4h case    3:*/		return 0x821240A8;
	}
	return 0x821240A8;
} // Block from 82124098h-821240A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821240A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821240A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821240A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821240A8);
		  /* 821240A8h */ case    0:  		/* lis R10, -32253 */
		/* 821240A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821240A8h case    0:*/		return 0x821240AC;
		  /* 821240ACh */ case    1:  		/* mr R11, R3 */
		/* 821240ACh case    1:*/		regs.R11 = regs.R3;
		/* 821240ACh case    1:*/		return 0x821240B0;
		  /* 821240B0h */ case    2:  		/* addi R10, R10, 8496 */
		/* 821240B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2130);
		/* 821240B0h case    2:*/		return 0x821240B4;
		  /* 821240B4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821240B4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821240B4h case    3:*/		return 0x821240B8;
		  /* 821240B8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821240B8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821240B8h case    4:*/		return 0x821240BC;
		  /* 821240BCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821240BCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821240BCh case    5:*/		return 0x821240C0;
		  /* 821240C0h */ case    6:  		/* subf R9, R8, R9 */
		/* 821240C0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821240C0h case    6:*/		return 0x821240C4;
		  /* 821240C4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821240C4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821240D8;  }
		/* 821240C4h case    7:*/		return 0x821240C8;
		  /* 821240C8h */ case    8:  		/* addi R11, R11, 1 */
		/* 821240C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821240C8h case    8:*/		return 0x821240CC;
		  /* 821240CCh */ case    9:  		/* addi R10, R10, 1 */
		/* 821240CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821240CCh case    9:*/		return 0x821240D0;
		  /* 821240D0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821240D0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821240D0h case   10:*/		return 0x821240D4;
		  /* 821240D4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821240D4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821240B4;  }
		/* 821240D4h case   11:*/		return 0x821240D8;
	}
	return 0x821240D8;
} // Block from 821240A8h-821240D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821240D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821240D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821240D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821240D8);
		  /* 821240D8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821240D8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821240D8h case    0:*/		return 0x821240DC;
		  /* 821240DCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821240DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821240E8;  }
		/* 821240DCh case    1:*/		return 0x821240E0;
		  /* 821240E0h */ case    2:  		/* li R3, 304 */
		/* 821240E0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x130);
		/* 821240E0h case    2:*/		return 0x821240E4;
		  /* 821240E4h */ case    3:  		/* b -4540 */
		/* 821240E4h case    3:*/		return 0x82122F28;
		/* 821240E4h case    3:*/		return 0x821240E8;
	}
	return 0x821240E8;
} // Block from 821240D8h-821240E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821240E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821240E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821240E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821240E8);
		  /* 821240E8h */ case    0:  		/* lis R10, -32253 */
		/* 821240E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821240E8h case    0:*/		return 0x821240EC;
		  /* 821240ECh */ case    1:  		/* mr R11, R3 */
		/* 821240ECh case    1:*/		regs.R11 = regs.R3;
		/* 821240ECh case    1:*/		return 0x821240F0;
		  /* 821240F0h */ case    2:  		/* addi R10, R10, 12088 */
		/* 821240F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F38);
		/* 821240F0h case    2:*/		return 0x821240F4;
		  /* 821240F4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821240F4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821240F4h case    3:*/		return 0x821240F8;
		  /* 821240F8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821240F8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821240F8h case    4:*/		return 0x821240FC;
		  /* 821240FCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821240FCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821240FCh case    5:*/		return 0x82124100;
		  /* 82124100h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124100h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124100h case    6:*/		return 0x82124104;
		  /* 82124104h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124104h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124118;  }
		/* 82124104h case    7:*/		return 0x82124108;
		  /* 82124108h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124108h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124108h case    8:*/		return 0x8212410C;
		  /* 8212410Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212410Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212410Ch case    9:*/		return 0x82124110;
		  /* 82124110h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124110h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124110h case   10:*/		return 0x82124114;
		  /* 82124114h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124114h case   11:*/		if ( regs.CR[6].eq ) { return 0x821240F4;  }
		/* 82124114h case   11:*/		return 0x82124118;
	}
	return 0x82124118;
} // Block from 821240E8h-82124118h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124118);
		  /* 82124118h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124118h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124118h case    0:*/		return 0x8212411C;
		  /* 8212411Ch */ case    1:  		/* bc 12, CR0_EQ, -4536 */
		/* 8212411Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 8212411Ch case    1:*/		return 0x82124120;
		  /* 82124120h */ case    2:  		/* lis R10, -32253 */
		/* 82124120h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124120h case    2:*/		return 0x82124124;
		  /* 82124124h */ case    3:  		/* mr R11, R3 */
		/* 82124124h case    3:*/		regs.R11 = regs.R3;
		/* 82124124h case    3:*/		return 0x82124128;
		  /* 82124128h */ case    4:  		/* addi R10, R10, 12076 */
		/* 82124128h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F2C);
		/* 82124128h case    4:*/		return 0x8212412C;
		  /* 8212412Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 8212412Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212412Ch case    5:*/		return 0x82124130;
		  /* 82124130h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124130h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124130h case    6:*/		return 0x82124134;
		  /* 82124134h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124134h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124134h case    7:*/		return 0x82124138;
		  /* 82124138h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124138h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124138h case    8:*/		return 0x8212413C;
		  /* 8212413Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8212413Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82124150;  }
		/* 8212413Ch case    9:*/		return 0x82124140;
		  /* 82124140h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124140h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124140h case   10:*/		return 0x82124144;
		  /* 82124144h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124144h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124144h case   11:*/		return 0x82124148;
		  /* 82124148h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124148h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124148h case   12:*/		return 0x8212414C;
		  /* 8212414Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212414Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212412C;  }
		/* 8212414Ch case   13:*/		return 0x82124150;
	}
	return 0x82124150;
} // Block from 82124118h-82124150h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124150);
		  /* 82124150h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124150h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124150h case    0:*/		return 0x82124154;
		  /* 82124154h */ case    1:  		/* bc 12, CR0_EQ, -4592 */
		/* 82124154h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124154h case    1:*/		return 0x82124158;
		  /* 82124158h */ case    2:  		/* lis R10, -32253 */
		/* 82124158h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124158h case    2:*/		return 0x8212415C;
		  /* 8212415Ch */ case    3:  		/* mr R11, R3 */
		/* 8212415Ch case    3:*/		regs.R11 = regs.R3;
		/* 8212415Ch case    3:*/		return 0x82124160;
		  /* 82124160h */ case    4:  		/* addi R10, R10, 12068 */
		/* 82124160h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2F24);
		/* 82124160h case    4:*/		return 0x82124164;
		  /* 82124164h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124164h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124164h case    5:*/		return 0x82124168;
		  /* 82124168h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124168h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124168h case    6:*/		return 0x8212416C;
		  /* 8212416Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 8212416Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212416Ch case    7:*/		return 0x82124170;
		  /* 82124170h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124170h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124170h case    8:*/		return 0x82124174;
		  /* 82124174h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124174h case    9:*/		if ( regs.CR[0].eq ) { return 0x82124188;  }
		/* 82124174h case    9:*/		return 0x82124178;
		  /* 82124178h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124178h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124178h case   10:*/		return 0x8212417C;
		  /* 8212417Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 8212417Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212417Ch case   11:*/		return 0x82124180;
		  /* 82124180h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124180h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124180h case   12:*/		return 0x82124184;
		  /* 82124184h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124184h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124164;  }
		/* 82124184h case   13:*/		return 0x82124188;
	}
	return 0x82124188;
} // Block from 82124150h-82124188h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124188);
		  /* 82124188h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124188h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124188h case    0:*/		return 0x8212418C;
		  /* 8212418Ch */ case    1:  		/* bc 12, CR0_EQ, -4648 */
		/* 8212418Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 8212418Ch case    1:*/		return 0x82124190;
		  /* 82124190h */ case    2:  		/* lwz R11, <#[R31 + 92]> */
		/* 82124190h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82124190h case    2:*/		return 0x82124194;
		  /* 82124194h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 82124194h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82124194h case    3:*/		return 0x82124198;
		  /* 82124198h */ case    4:  		/* bc 12, CR6_EQ, -2512 */
		/* 82124198h case    4:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82124198h case    4:*/		return 0x8212419C;
		  /* 8212419Ch */ case    5:  		/* lis R10, -32255 */
		/* 8212419Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8212419Ch case    5:*/		return 0x821241A0;
		  /* 821241A0h */ case    6:  		/* mr R11, R3 */
		/* 821241A0h case    6:*/		regs.R11 = regs.R3;
		/* 821241A0h case    6:*/		return 0x821241A4;
		  /* 821241A4h */ case    7:  		/* addi R10, R10, 11872 */
		/* 821241A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E60);
		/* 821241A4h case    7:*/		return 0x821241A8;
		  /* 821241A8h */ case    8:  		/* lbz R9, <#[R11]> */
		/* 821241A8h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821241A8h case    8:*/		return 0x821241AC;
		  /* 821241ACh */ case    9:  		/* lbz R8, <#[R10]> */
		/* 821241ACh case    9:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821241ACh case    9:*/		return 0x821241B0;
		  /* 821241B0h */ case   10:  		/* cmpwi CR0, R9, 0 */
		/* 821241B0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821241B0h case   10:*/		return 0x821241B4;
		  /* 821241B4h */ case   11:  		/* subf R9, R8, R9 */
		/* 821241B4h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821241B4h case   11:*/		return 0x821241B8;
		  /* 821241B8h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 821241B8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821241CC;  }
		/* 821241B8h case   12:*/		return 0x821241BC;
		  /* 821241BCh */ case   13:  		/* addi R11, R11, 1 */
		/* 821241BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821241BCh case   13:*/		return 0x821241C0;
		  /* 821241C0h */ case   14:  		/* addi R10, R10, 1 */
		/* 821241C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821241C0h case   14:*/		return 0x821241C4;
		  /* 821241C4h */ case   15:  		/* cmpwi CR6, R9, 0 */
		/* 821241C4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821241C4h case   15:*/		return 0x821241C8;
		  /* 821241C8h */ case   16:  		/* bc 12, CR6_EQ, -32 */
		/* 821241C8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821241A8;  }
		/* 821241C8h case   16:*/		return 0x821241CC;
	}
	return 0x821241CC;
} // Block from 82124188h-821241CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821241CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821241CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821241CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821241CC);
		  /* 821241CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821241CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821241CCh case    0:*/		return 0x821241D0;
		  /* 821241D0h */ case    1:  		/* bc 4, CR0_EQ, 24 */
		/* 821241D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821241E8;  }
		/* 821241D0h case    1:*/		return 0x821241D4;
		  /* 821241D4h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821241D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821241D4h case    2:*/		return 0x821241D8;
		  /* 821241D8h */ case    3:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 821241D8h case    3:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 821241D8h case    3:*/		return 0x821241DC;
		  /* 821241DCh */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 821241DCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821241E8;  }
		/* 821241DCh case    4:*/		return 0x821241E0;
		  /* 821241E0h */ case    5:  		/* li R3, 306 */
		/* 821241E0h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x132);
		/* 821241E0h case    5:*/		return 0x821241E4;
		  /* 821241E4h */ case    6:  		/* b -4796 */
		/* 821241E4h case    6:*/		return 0x82122F28;
		/* 821241E4h case    6:*/		return 0x821241E8;
	}
	return 0x821241E8;
} // Block from 821241CCh-821241E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821241E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821241E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821241E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821241E8);
		  /* 821241E8h */ case    0:  		/* lis R10, -32255 */
		/* 821241E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821241E8h case    0:*/		return 0x821241EC;
		  /* 821241ECh */ case    1:  		/* mr R11, R3 */
		/* 821241ECh case    1:*/		regs.R11 = regs.R3;
		/* 821241ECh case    1:*/		return 0x821241F0;
		  /* 821241F0h */ case    2:  		/* addi R10, R10, 12292 */
		/* 821241F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3004);
		/* 821241F0h case    2:*/		return 0x821241F4;
		  /* 821241F4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821241F4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821241F4h case    3:*/		return 0x821241F8;
		  /* 821241F8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821241F8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821241F8h case    4:*/		return 0x821241FC;
		  /* 821241FCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821241FCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821241FCh case    5:*/		return 0x82124200;
		  /* 82124200h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124200h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124200h case    6:*/		return 0x82124204;
		  /* 82124204h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124204h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124218;  }
		/* 82124204h case    7:*/		return 0x82124208;
		  /* 82124208h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124208h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124208h case    8:*/		return 0x8212420C;
		  /* 8212420Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212420Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212420Ch case    9:*/		return 0x82124210;
		  /* 82124210h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124210h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124210h case   10:*/		return 0x82124214;
		  /* 82124214h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124214h case   11:*/		if ( regs.CR[6].eq ) { return 0x821241F4;  }
		/* 82124214h case   11:*/		return 0x82124218;
	}
	return 0x82124218;
} // Block from 821241E8h-82124218h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124218);
		  /* 82124218h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124218h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124218h case    0:*/		return 0x8212421C;
		  /* 8212421Ch */ case    1:  		/* bc 4, CR0_EQ, -2644 */
		/* 8212421Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212421Ch case    1:*/		return 0x82124220;
		  /* 82124220h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82124220h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82124220h case    2:*/		return 0x82124224;
		  /* 82124224h */ case    3:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82124224h case    3:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82124224h case    3:*/		return 0x82124228;
		  /* 82124228h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82124228h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82124234;  }
		/* 82124228h case    4:*/		return 0x8212422C;
		  /* 8212422Ch */ case    5:  		/* li R3, 305 */
		/* 8212422Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x131);
		/* 8212422Ch case    5:*/		return 0x82124230;
		  /* 82124230h */ case    6:  		/* b -4872 */
		/* 82124230h case    6:*/		return 0x82122F28;
		/* 82124230h case    6:*/		return 0x82124234;
	}
	return 0x82124234;
} // Block from 82124218h-82124234h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82124234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124234);
		  /* 82124234h */ case    0:  		/* lis R11, -32253 */
		/* 82124234h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82124234h case    0:*/		return 0x82124238;
		  /* 82124238h */ case    1:  		/* addi R6, R11, 12000 */
		/* 82124238h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2EE0);
		/* 82124238h case    1:*/		return 0x8212423C;
		  /* 8212423Ch */ case    2:  		/* li R5, 3086 */
		/* 8212423Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 8212423Ch case    2:*/		return 0x82124240;
		  /* 82124240h */ case    3:  		/* mr R4, R30 */
		/* 82124240h case    3:*/		regs.R4 = regs.R30;
		/* 82124240h case    3:*/		return 0x82124244;
		  /* 82124244h */ case    4:  		/* mr R3, R31 */
		/* 82124244h case    4:*/		regs.R3 = regs.R31;
		/* 82124244h case    4:*/		return 0x82124248;
		  /* 82124248h */ case    5:  		/* bl -43432 */
		/* 82124248h case    5:*/		regs.LR = 0x8212424C; return 0x821198A0;
		/* 82124248h case    5:*/		return 0x8212424C;
		  /* 8212424Ch */ case    6:  		/* b -2692 */
		/* 8212424Ch case    6:*/		return 0x821237C8;
		/* 8212424Ch case    6:*/		return 0x82124250;
		  /* 82124250h */ case    7:  		/* lis R10, -32253 */
		/* 82124250h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124250h case    7:*/		return 0x82124254;
		  /* 82124254h */ case    8:  		/* mr R11, R3 */
		/* 82124254h case    8:*/		regs.R11 = regs.R3;
		/* 82124254h case    8:*/		return 0x82124258;
		  /* 82124258h */ case    9:  		/* addi R10, R10, 8472 */
		/* 82124258h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2118);
		/* 82124258h case    9:*/		return 0x8212425C;
		  /* 8212425Ch */ case   10:  		/* lbz R9, <#[R11]> */
		/* 8212425Ch case   10:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212425Ch case   10:*/		return 0x82124260;
		  /* 82124260h */ case   11:  		/* lbz R8, <#[R10]> */
		/* 82124260h case   11:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124260h case   11:*/		return 0x82124264;
		  /* 82124264h */ case   12:  		/* cmpwi CR0, R9, 0 */
		/* 82124264h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124264h case   12:*/		return 0x82124268;
		  /* 82124268h */ case   13:  		/* subf R9, R8, R9 */
		/* 82124268h case   13:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124268h case   13:*/		return 0x8212426C;
		  /* 8212426Ch */ case   14:  		/* bc 12, CR0_EQ, 20 */
		/* 8212426Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x82124280;  }
		/* 8212426Ch case   14:*/		return 0x82124270;
		  /* 82124270h */ case   15:  		/* addi R11, R11, 1 */
		/* 82124270h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124270h case   15:*/		return 0x82124274;
		  /* 82124274h */ case   16:  		/* addi R10, R10, 1 */
		/* 82124274h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124274h case   16:*/		return 0x82124278;
		  /* 82124278h */ case   17:  		/* cmpwi CR6, R9, 0 */
		/* 82124278h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124278h case   17:*/		return 0x8212427C;
		  /* 8212427Ch */ case   18:  		/* bc 12, CR6_EQ, -32 */
		/* 8212427Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8212425C;  }
		/* 8212427Ch case   18:*/		return 0x82124280;
	}
	return 0x82124280;
} // Block from 82124234h-82124280h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82124280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124280);
		  /* 82124280h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124280h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124280h case    0:*/		return 0x82124284;
		  /* 82124284h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124284h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124290;  }
		/* 82124284h case    1:*/		return 0x82124288;
		  /* 82124288h */ case    2:  		/* li R3, 307 */
		/* 82124288h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x133);
		/* 82124288h case    2:*/		return 0x8212428C;
		  /* 8212428Ch */ case    3:  		/* b -4964 */
		/* 8212428Ch case    3:*/		return 0x82122F28;
		/* 8212428Ch case    3:*/		return 0x82124290;
	}
	return 0x82124290;
} // Block from 82124280h-82124290h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124290);
		  /* 82124290h */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 82124290h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82124290h case    0:*/		return 0x82124294;
		  /* 82124294h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82124294h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82124294h case    1:*/		return 0x82124298;
		  /* 82124298h */ case    2:  		/* bc 12, CR6_EQ, -2768 */
		/* 82124298h case    2:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82124298h case    2:*/		return 0x8212429C;
		  /* 8212429Ch */ case    3:  		/* lis R10, -32256 */
		/* 8212429Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8212429Ch case    3:*/		return 0x821242A0;
		  /* 821242A0h */ case    4:  		/* mr R11, R3 */
		/* 821242A0h case    4:*/		regs.R11 = regs.R3;
		/* 821242A0h case    4:*/		return 0x821242A4;
		  /* 821242A4h */ case    5:  		/* addi R10, R10, 4460 */
		/* 821242A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x116C);
		/* 821242A4h case    5:*/		return 0x821242A8;
		  /* 821242A8h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 821242A8h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821242A8h case    6:*/		return 0x821242AC;
		  /* 821242ACh */ case    7:  		/* lbz R8, <#[R10]> */
		/* 821242ACh case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821242ACh case    7:*/		return 0x821242B0;
		  /* 821242B0h */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 821242B0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821242B0h case    8:*/		return 0x821242B4;
		  /* 821242B4h */ case    9:  		/* subf R9, R8, R9 */
		/* 821242B4h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821242B4h case    9:*/		return 0x821242B8;
		  /* 821242B8h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 821242B8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821242CC;  }
		/* 821242B8h case   10:*/		return 0x821242BC;
		  /* 821242BCh */ case   11:  		/* addi R11, R11, 1 */
		/* 821242BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821242BCh case   11:*/		return 0x821242C0;
		  /* 821242C0h */ case   12:  		/* addi R10, R10, 1 */
		/* 821242C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821242C0h case   12:*/		return 0x821242C4;
		  /* 821242C4h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 821242C4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821242C4h case   13:*/		return 0x821242C8;
		  /* 821242C8h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 821242C8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821242A8;  }
		/* 821242C8h case   14:*/		return 0x821242CC;
	}
	return 0x821242CC;
} // Block from 82124290h-821242CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821242CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821242CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821242CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821242CC);
		  /* 821242CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821242CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821242CCh case    0:*/		return 0x821242D0;
		  /* 821242D0h */ case    1:  		/* bc 4, CR0_EQ, -2824 */
		/* 821242D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821242D0h case    1:*/		return 0x821242D4;
		  /* 821242D4h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821242D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821242D4h case    2:*/		return 0x821242D8;
		  /* 821242D8h */ case    3:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 821242D8h case    3:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 821242D8h case    3:*/		return 0x821242DC;
		  /* 821242DCh */ case    4:  		/* bc 4, CR0_EQ, -2836 */
		/* 821242DCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821242DCh case    4:*/		return 0x821242E0;
		  /* 821242E0h */ case    5:  		/* b -180 */
		/* 821242E0h case    5:*/		return 0x8212422C;
		/* 821242E0h case    5:*/		return 0x821242E4;
		  /* 821242E4h */ case    6:  		/* lis R10, -32253 */
		/* 821242E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821242E4h case    6:*/		return 0x821242E8;
		  /* 821242E8h */ case    7:  		/* mr R11, R3 */
		/* 821242E8h case    7:*/		regs.R11 = regs.R3;
		/* 821242E8h case    7:*/		return 0x821242EC;
		  /* 821242ECh */ case    8:  		/* addi R10, R10, 11988 */
		/* 821242ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2ED4);
		/* 821242ECh case    8:*/		return 0x821242F0;
		  /* 821242F0h */ case    9:  		/* lbz R9, <#[R11]> */
		/* 821242F0h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821242F0h case    9:*/		return 0x821242F4;
		  /* 821242F4h */ case   10:  		/* lbz R8, <#[R10]> */
		/* 821242F4h case   10:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821242F4h case   10:*/		return 0x821242F8;
		  /* 821242F8h */ case   11:  		/* cmpwi CR0, R9, 0 */
		/* 821242F8h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821242F8h case   11:*/		return 0x821242FC;
		  /* 821242FCh */ case   12:  		/* subf R9, R8, R9 */
		/* 821242FCh case   12:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821242FCh case   12:*/		return 0x82124300;
		  /* 82124300h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 82124300h case   13:*/		if ( regs.CR[0].eq ) { return 0x82124314;  }
		/* 82124300h case   13:*/		return 0x82124304;
		  /* 82124304h */ case   14:  		/* addi R11, R11, 1 */
		/* 82124304h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124304h case   14:*/		return 0x82124308;
		  /* 82124308h */ case   15:  		/* addi R10, R10, 1 */
		/* 82124308h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124308h case   15:*/		return 0x8212430C;
		  /* 8212430Ch */ case   16:  		/* cmpwi CR6, R9, 0 */
		/* 8212430Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212430Ch case   16:*/		return 0x82124310;
		  /* 82124310h */ case   17:  		/* bc 12, CR6_EQ, -32 */
		/* 82124310h case   17:*/		if ( regs.CR[6].eq ) { return 0x821242F0;  }
		/* 82124310h case   17:*/		return 0x82124314;
	}
	return 0x82124314;
} // Block from 821242CCh-82124314h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82124314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124314);
		  /* 82124314h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124314h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124314h case    0:*/		return 0x82124318;
		  /* 82124318h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124318h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124324;  }
		/* 82124318h case    1:*/		return 0x8212431C;
		  /* 8212431Ch */ case    2:  		/* li R3, 309 */
		/* 8212431Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x135);
		/* 8212431Ch case    2:*/		return 0x82124320;
		  /* 82124320h */ case    3:  		/* b -5112 */
		/* 82124320h case    3:*/		return 0x82122F28;
		/* 82124320h case    3:*/		return 0x82124324;
	}
	return 0x82124324;
} // Block from 82124314h-82124324h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124324);
		  /* 82124324h */ case    0:  		/* lis R10, -32253 */
		/* 82124324h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124324h case    0:*/		return 0x82124328;
		  /* 82124328h */ case    1:  		/* mr R11, R3 */
		/* 82124328h case    1:*/		regs.R11 = regs.R3;
		/* 82124328h case    1:*/		return 0x8212432C;
		  /* 8212432Ch */ case    2:  		/* addi R10, R10, 11968 */
		/* 8212432Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2EC0);
		/* 8212432Ch case    2:*/		return 0x82124330;
		  /* 82124330h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124330h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124330h case    3:*/		return 0x82124334;
		  /* 82124334h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124334h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124334h case    4:*/		return 0x82124338;
		  /* 82124338h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124338h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124338h case    5:*/		return 0x8212433C;
		  /* 8212433Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 8212433Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212433Ch case    6:*/		return 0x82124340;
		  /* 82124340h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124340h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124354;  }
		/* 82124340h case    7:*/		return 0x82124344;
		  /* 82124344h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124344h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124344h case    8:*/		return 0x82124348;
		  /* 82124348h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124348h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124348h case    9:*/		return 0x8212434C;
		  /* 8212434Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212434Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212434Ch case   10:*/		return 0x82124350;
		  /* 82124350h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124350h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124330;  }
		/* 82124350h case   11:*/		return 0x82124354;
	}
	return 0x82124354;
} // Block from 82124324h-82124354h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124354);
		  /* 82124354h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124354h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124354h case    0:*/		return 0x82124358;
		  /* 82124358h */ case    1:  		/* bc 12, CR0_EQ, -5108 */
		/* 82124358h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124358h case    1:*/		return 0x8212435C;
		  /* 8212435Ch */ case    2:  		/* lis R10, -32255 */
		/* 8212435Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8212435Ch case    2:*/		return 0x82124360;
		  /* 82124360h */ case    3:  		/* mr R11, R3 */
		/* 82124360h case    3:*/		regs.R11 = regs.R3;
		/* 82124360h case    3:*/		return 0x82124364;
		  /* 82124364h */ case    4:  		/* addi R10, R10, -10844 */
		/* 82124364h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD5A4);
		/* 82124364h case    4:*/		return 0x82124368;
		  /* 82124368h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124368h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124368h case    5:*/		return 0x8212436C;
		  /* 8212436Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212436Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212436Ch case    6:*/		return 0x82124370;
		  /* 82124370h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124370h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124370h case    7:*/		return 0x82124374;
		  /* 82124374h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124374h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124374h case    8:*/		return 0x82124378;
		  /* 82124378h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124378h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212438C;  }
		/* 82124378h case    9:*/		return 0x8212437C;
		  /* 8212437Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8212437Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212437Ch case   10:*/		return 0x82124380;
		  /* 82124380h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124380h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124380h case   11:*/		return 0x82124384;
		  /* 82124384h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124384h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124384h case   12:*/		return 0x82124388;
		  /* 82124388h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124388h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124368;  }
		/* 82124388h case   13:*/		return 0x8212438C;
	}
	return 0x8212438C;
} // Block from 82124354h-8212438Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212438Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212438C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212438C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212438C);
		  /* 8212438Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212438Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212438Ch case    0:*/		return 0x82124390;
		  /* 82124390h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124390h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212439C;  }
		/* 82124390h case    1:*/		return 0x82124394;
		  /* 82124394h */ case    2:  		/* li R3, 312 */
		/* 82124394h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x138);
		/* 82124394h case    2:*/		return 0x82124398;
		  /* 82124398h */ case    3:  		/* b -5232 */
		/* 82124398h case    3:*/		return 0x82122F28;
		/* 82124398h case    3:*/		return 0x8212439C;
	}
	return 0x8212439C;
} // Block from 8212438Ch-8212439Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212439Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212439C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212439C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212439C);
		  /* 8212439Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212439Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212439Ch case    0:*/		return 0x821243A0;
		  /* 821243A0h */ case    1:  		/* mr R11, R3 */
		/* 821243A0h case    1:*/		regs.R11 = regs.R3;
		/* 821243A0h case    1:*/		return 0x821243A4;
		  /* 821243A4h */ case    2:  		/* addi R10, R10, 11960 */
		/* 821243A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2EB8);
		/* 821243A4h case    2:*/		return 0x821243A8;
		  /* 821243A8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821243A8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821243A8h case    3:*/		return 0x821243AC;
		  /* 821243ACh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821243ACh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821243ACh case    4:*/		return 0x821243B0;
		  /* 821243B0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821243B0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821243B0h case    5:*/		return 0x821243B4;
		  /* 821243B4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821243B4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821243B4h case    6:*/		return 0x821243B8;
		  /* 821243B8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821243B8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821243CC;  }
		/* 821243B8h case    7:*/		return 0x821243BC;
		  /* 821243BCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821243BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821243BCh case    8:*/		return 0x821243C0;
		  /* 821243C0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821243C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821243C0h case    9:*/		return 0x821243C4;
		  /* 821243C4h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821243C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821243C4h case   10:*/		return 0x821243C8;
		  /* 821243C8h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821243C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821243A8;  }
		/* 821243C8h case   11:*/		return 0x821243CC;
	}
	return 0x821243CC;
} // Block from 8212439Ch-821243CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821243CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821243CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821243CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821243CC);
		  /* 821243CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821243CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821243CCh case    0:*/		return 0x821243D0;
		  /* 821243D0h */ case    1:  		/* bc 4, CR0_EQ, -3080 */
		/* 821243D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821243D0h case    1:*/		return 0x821243D4;
		  /* 821243D4h */ case    2:  		/* li R3, 311 */
		/* 821243D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x137);
		/* 821243D4h case    2:*/		return 0x821243D8;
		  /* 821243D8h */ case    3:  		/* b -5296 */
		/* 821243D8h case    3:*/		return 0x82122F28;
		/* 821243D8h case    3:*/		return 0x821243DC;
		  /* 821243DCh */ case    4:  		/* lis R10, -32253 */
		/* 821243DCh case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821243DCh case    4:*/		return 0x821243E0;
		  /* 821243E0h */ case    5:  		/* mr R11, R3 */
		/* 821243E0h case    5:*/		regs.R11 = regs.R3;
		/* 821243E0h case    5:*/		return 0x821243E4;
		  /* 821243E4h */ case    6:  		/* addi R10, R10, 11944 */
		/* 821243E4h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2EA8);
		/* 821243E4h case    6:*/		return 0x821243E8;
		  /* 821243E8h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821243E8h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821243E8h case    7:*/		return 0x821243EC;
		  /* 821243ECh */ case    8:  		/* lbz R8, <#[R10]> */
		/* 821243ECh case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821243ECh case    8:*/		return 0x821243F0;
		  /* 821243F0h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821243F0h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821243F0h case    9:*/		return 0x821243F4;
		  /* 821243F4h */ case   10:  		/* subf R9, R8, R9 */
		/* 821243F4h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821243F4h case   10:*/		return 0x821243F8;
		  /* 821243F8h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821243F8h case   11:*/		if ( regs.CR[0].eq ) { return 0x8212440C;  }
		/* 821243F8h case   11:*/		return 0x821243FC;
		  /* 821243FCh */ case   12:  		/* addi R11, R11, 1 */
		/* 821243FCh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821243FCh case   12:*/		return 0x82124400;
		  /* 82124400h */ case   13:  		/* addi R10, R10, 1 */
		/* 82124400h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124400h case   13:*/		return 0x82124404;
		  /* 82124404h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82124404h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124404h case   14:*/		return 0x82124408;
		  /* 82124408h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82124408h case   15:*/		if ( regs.CR[6].eq ) { return 0x821243E8;  }
		/* 82124408h case   15:*/		return 0x8212440C;
	}
	return 0x8212440C;
} // Block from 821243CCh-8212440Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212440Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212440C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212440C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212440C);
		  /* 8212440Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212440Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212440Ch case    0:*/		return 0x82124410;
		  /* 82124410h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124410h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212441C;  }
		/* 82124410h case    1:*/		return 0x82124414;
		  /* 82124414h */ case    2:  		/* li R3, 308 */
		/* 82124414h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x134);
		/* 82124414h case    2:*/		return 0x82124418;
		  /* 82124418h */ case    3:  		/* b -5360 */
		/* 82124418h case    3:*/		return 0x82122F28;
		/* 82124418h case    3:*/		return 0x8212441C;
	}
	return 0x8212441C;
} // Block from 8212440Ch-8212441Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212441Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212441C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212441C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212441C);
		  /* 8212441Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212441Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212441Ch case    0:*/		return 0x82124420;
		  /* 82124420h */ case    1:  		/* mr R11, R3 */
		/* 82124420h case    1:*/		regs.R11 = regs.R3;
		/* 82124420h case    1:*/		return 0x82124424;
		  /* 82124424h */ case    2:  		/* addi R10, R10, 11924 */
		/* 82124424h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E94);
		/* 82124424h case    2:*/		return 0x82124428;
		  /* 82124428h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124428h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124428h case    3:*/		return 0x8212442C;
		  /* 8212442Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212442Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212442Ch case    4:*/		return 0x82124430;
		  /* 82124430h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124430h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124430h case    5:*/		return 0x82124434;
		  /* 82124434h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124434h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124434h case    6:*/		return 0x82124438;
		  /* 82124438h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124438h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212444C;  }
		/* 82124438h case    7:*/		return 0x8212443C;
		  /* 8212443Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212443Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212443Ch case    8:*/		return 0x82124440;
		  /* 82124440h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124440h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124440h case    9:*/		return 0x82124444;
		  /* 82124444h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124444h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124444h case   10:*/		return 0x82124448;
		  /* 82124448h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124448h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124428;  }
		/* 82124448h case   11:*/		return 0x8212444C;
	}
	return 0x8212444C;
} // Block from 8212441Ch-8212444Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212444Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212444C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212444C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212444C);
		  /* 8212444Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212444Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212444Ch case    0:*/		return 0x82124450;
		  /* 82124450h */ case    1:  		/* bc 4, CR0_EQ, -3208 */
		/* 82124450h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82124450h case    1:*/		return 0x82124454;
		  /* 82124454h */ case    2:  		/* li R3, 310 */
		/* 82124454h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x136);
		/* 82124454h case    2:*/		return 0x82124458;
		  /* 82124458h */ case    3:  		/* b -5424 */
		/* 82124458h case    3:*/		return 0x82122F28;
		/* 82124458h case    3:*/		return 0x8212445C;
		  /* 8212445Ch */ case    4:  		/* lis R10, -32253 */
		/* 8212445Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212445Ch case    4:*/		return 0x82124460;
		  /* 82124460h */ case    5:  		/* mr R11, R3 */
		/* 82124460h case    5:*/		regs.R11 = regs.R3;
		/* 82124460h case    5:*/		return 0x82124464;
		  /* 82124464h */ case    6:  		/* addi R10, R10, 8564 */
		/* 82124464h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2174);
		/* 82124464h case    6:*/		return 0x82124468;
		  /* 82124468h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82124468h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124468h case    7:*/		return 0x8212446C;
		  /* 8212446Ch */ case    8:  		/* lbz R8, <#[R10]> */
		/* 8212446Ch case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212446Ch case    8:*/		return 0x82124470;
		  /* 82124470h */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 82124470h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124470h case    9:*/		return 0x82124474;
		  /* 82124474h */ case   10:  		/* subf R9, R8, R9 */
		/* 82124474h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124474h case   10:*/		return 0x82124478;
		  /* 82124478h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82124478h case   11:*/		if ( regs.CR[0].eq ) { return 0x8212448C;  }
		/* 82124478h case   11:*/		return 0x8212447C;
		  /* 8212447Ch */ case   12:  		/* addi R11, R11, 1 */
		/* 8212447Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212447Ch case   12:*/		return 0x82124480;
		  /* 82124480h */ case   13:  		/* addi R10, R10, 1 */
		/* 82124480h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124480h case   13:*/		return 0x82124484;
		  /* 82124484h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82124484h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124484h case   14:*/		return 0x82124488;
		  /* 82124488h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82124488h case   15:*/		if ( regs.CR[6].eq ) { return 0x82124468;  }
		/* 82124488h case   15:*/		return 0x8212448C;
	}
	return 0x8212448C;
} // Block from 8212444Ch-8212448Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8212448Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212448C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212448C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212448C);
		  /* 8212448Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212448Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212448Ch case    0:*/		return 0x82124490;
		  /* 82124490h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124490h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212449C;  }
		/* 82124490h case    1:*/		return 0x82124494;
		  /* 82124494h */ case    2:  		/* li R3, 315 */
		/* 82124494h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13B);
		/* 82124494h case    2:*/		return 0x82124498;
		  /* 82124498h */ case    3:  		/* b -5488 */
		/* 82124498h case    3:*/		return 0x82122F28;
		/* 82124498h case    3:*/		return 0x8212449C;
	}
	return 0x8212449C;
} // Block from 8212448Ch-8212449Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212449Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212449C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212449C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212449C);
		  /* 8212449Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212449Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212449Ch case    0:*/		return 0x821244A0;
		  /* 821244A0h */ case    1:  		/* mr R11, R3 */
		/* 821244A0h case    1:*/		regs.R11 = regs.R3;
		/* 821244A0h case    1:*/		return 0x821244A4;
		  /* 821244A4h */ case    2:  		/* addi R10, R10, 8552 */
		/* 821244A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2168);
		/* 821244A4h case    2:*/		return 0x821244A8;
		  /* 821244A8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821244A8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821244A8h case    3:*/		return 0x821244AC;
		  /* 821244ACh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821244ACh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821244ACh case    4:*/		return 0x821244B0;
		  /* 821244B0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821244B0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821244B0h case    5:*/		return 0x821244B4;
		  /* 821244B4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821244B4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821244B4h case    6:*/		return 0x821244B8;
		  /* 821244B8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821244B8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821244CC;  }
		/* 821244B8h case    7:*/		return 0x821244BC;
		  /* 821244BCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821244BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821244BCh case    8:*/		return 0x821244C0;
		  /* 821244C0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821244C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821244C0h case    9:*/		return 0x821244C4;
		  /* 821244C4h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821244C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821244C4h case   10:*/		return 0x821244C8;
		  /* 821244C8h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821244C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821244A8;  }
		/* 821244C8h case   11:*/		return 0x821244CC;
	}
	return 0x821244CC;
} // Block from 8212449Ch-821244CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821244CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821244CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821244CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821244CC);
		  /* 821244CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821244CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821244CCh case    0:*/		return 0x821244D0;
		  /* 821244D0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821244D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821244DC;  }
		/* 821244D0h case    1:*/		return 0x821244D4;
		  /* 821244D4h */ case    2:  		/* li R3, 316 */
		/* 821244D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13C);
		/* 821244D4h case    2:*/		return 0x821244D8;
		  /* 821244D8h */ case    3:  		/* b -5552 */
		/* 821244D8h case    3:*/		return 0x82122F28;
		/* 821244D8h case    3:*/		return 0x821244DC;
	}
	return 0x821244DC;
} // Block from 821244CCh-821244DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821244DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821244DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821244DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821244DC);
		  /* 821244DCh */ case    0:  		/* lis R10, -32253 */
		/* 821244DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821244DCh case    0:*/		return 0x821244E0;
		  /* 821244E0h */ case    1:  		/* mr R11, R3 */
		/* 821244E0h case    1:*/		regs.R11 = regs.R3;
		/* 821244E0h case    1:*/		return 0x821244E4;
		  /* 821244E4h */ case    2:  		/* addi R10, R10, 8540 */
		/* 821244E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x215C);
		/* 821244E4h case    2:*/		return 0x821244E8;
		  /* 821244E8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821244E8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821244E8h case    3:*/		return 0x821244EC;
		  /* 821244ECh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821244ECh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821244ECh case    4:*/		return 0x821244F0;
		  /* 821244F0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821244F0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821244F0h case    5:*/		return 0x821244F4;
		  /* 821244F4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821244F4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821244F4h case    6:*/		return 0x821244F8;
		  /* 821244F8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821244F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212450C;  }
		/* 821244F8h case    7:*/		return 0x821244FC;
		  /* 821244FCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821244FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821244FCh case    8:*/		return 0x82124500;
		  /* 82124500h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124500h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124500h case    9:*/		return 0x82124504;
		  /* 82124504h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124504h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124504h case   10:*/		return 0x82124508;
		  /* 82124508h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124508h case   11:*/		if ( regs.CR[6].eq ) { return 0x821244E8;  }
		/* 82124508h case   11:*/		return 0x8212450C;
	}
	return 0x8212450C;
} // Block from 821244DCh-8212450Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212450Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212450C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212450C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212450C);
		  /* 8212450Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212450Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212450Ch case    0:*/		return 0x82124510;
		  /* 82124510h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124510h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212451C;  }
		/* 82124510h case    1:*/		return 0x82124514;
		  /* 82124514h */ case    2:  		/* li R3, 317 */
		/* 82124514h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13D);
		/* 82124514h case    2:*/		return 0x82124518;
		  /* 82124518h */ case    3:  		/* b -5616 */
		/* 82124518h case    3:*/		return 0x82122F28;
		/* 82124518h case    3:*/		return 0x8212451C;
	}
	return 0x8212451C;
} // Block from 8212450Ch-8212451Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212451Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212451C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212451C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212451C);
		  /* 8212451Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212451Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212451Ch case    0:*/		return 0x82124520;
		  /* 82124520h */ case    1:  		/* mr R11, R3 */
		/* 82124520h case    1:*/		regs.R11 = regs.R3;
		/* 82124520h case    1:*/		return 0x82124524;
		  /* 82124524h */ case    2:  		/* addi R10, R10, 8528 */
		/* 82124524h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2150);
		/* 82124524h case    2:*/		return 0x82124528;
		  /* 82124528h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124528h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124528h case    3:*/		return 0x8212452C;
		  /* 8212452Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212452Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212452Ch case    4:*/		return 0x82124530;
		  /* 82124530h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124530h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124530h case    5:*/		return 0x82124534;
		  /* 82124534h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124534h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124534h case    6:*/		return 0x82124538;
		  /* 82124538h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124538h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212454C;  }
		/* 82124538h case    7:*/		return 0x8212453C;
		  /* 8212453Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212453Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212453Ch case    8:*/		return 0x82124540;
		  /* 82124540h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124540h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124540h case    9:*/		return 0x82124544;
		  /* 82124544h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124544h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124544h case   10:*/		return 0x82124548;
		  /* 82124548h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124548h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124528;  }
		/* 82124548h case   11:*/		return 0x8212454C;
	}
	return 0x8212454C;
} // Block from 8212451Ch-8212454Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212454Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212454C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212454C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212454C);
		  /* 8212454Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212454Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212454Ch case    0:*/		return 0x82124550;
		  /* 82124550h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124550h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212455C;  }
		/* 82124550h case    1:*/		return 0x82124554;
		  /* 82124554h */ case    2:  		/* li R3, 318 */
		/* 82124554h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13E);
		/* 82124554h case    2:*/		return 0x82124558;
		  /* 82124558h */ case    3:  		/* b -5680 */
		/* 82124558h case    3:*/		return 0x82122F28;
		/* 82124558h case    3:*/		return 0x8212455C;
	}
	return 0x8212455C;
} // Block from 8212454Ch-8212455Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212455Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212455C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212455C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212455C);
		  /* 8212455Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212455Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212455Ch case    0:*/		return 0x82124560;
		  /* 82124560h */ case    1:  		/* mr R11, R3 */
		/* 82124560h case    1:*/		regs.R11 = regs.R3;
		/* 82124560h case    1:*/		return 0x82124564;
		  /* 82124564h */ case    2:  		/* addi R10, R10, 11908 */
		/* 82124564h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E84);
		/* 82124564h case    2:*/		return 0x82124568;
		  /* 82124568h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124568h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124568h case    3:*/		return 0x8212456C;
		  /* 8212456Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212456Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212456Ch case    4:*/		return 0x82124570;
		  /* 82124570h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124570h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124570h case    5:*/		return 0x82124574;
		  /* 82124574h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124574h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124574h case    6:*/		return 0x82124578;
		  /* 82124578h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124578h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212458C;  }
		/* 82124578h case    7:*/		return 0x8212457C;
		  /* 8212457Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212457Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212457Ch case    8:*/		return 0x82124580;
		  /* 82124580h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124580h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124580h case    9:*/		return 0x82124584;
		  /* 82124584h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124584h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124584h case   10:*/		return 0x82124588;
		  /* 82124588h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124588h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124568;  }
		/* 82124588h case   11:*/		return 0x8212458C;
	}
	return 0x8212458C;
} // Block from 8212455Ch-8212458Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212458Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212458C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212458C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212458C);
		  /* 8212458Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212458Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212458Ch case    0:*/		return 0x82124590;
		  /* 82124590h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124590h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212459C;  }
		/* 82124590h case    1:*/		return 0x82124594;
		  /* 82124594h */ case    2:  		/* li R3, 319 */
		/* 82124594h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13F);
		/* 82124594h case    2:*/		return 0x82124598;
		  /* 82124598h */ case    3:  		/* b -5744 */
		/* 82124598h case    3:*/		return 0x82122F28;
		/* 82124598h case    3:*/		return 0x8212459C;
	}
	return 0x8212459C;
} // Block from 8212458Ch-8212459Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212459Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212459C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212459C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212459C);
		  /* 8212459Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212459Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212459Ch case    0:*/		return 0x821245A0;
		  /* 821245A0h */ case    1:  		/* mr R11, R3 */
		/* 821245A0h case    1:*/		regs.R11 = regs.R3;
		/* 821245A0h case    1:*/		return 0x821245A4;
		  /* 821245A4h */ case    2:  		/* addi R10, R10, 11900 */
		/* 821245A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E7C);
		/* 821245A4h case    2:*/		return 0x821245A8;
		  /* 821245A8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821245A8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821245A8h case    3:*/		return 0x821245AC;
		  /* 821245ACh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821245ACh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821245ACh case    4:*/		return 0x821245B0;
		  /* 821245B0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821245B0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821245B0h case    5:*/		return 0x821245B4;
		  /* 821245B4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821245B4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821245B4h case    6:*/		return 0x821245B8;
		  /* 821245B8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821245B8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821245CC;  }
		/* 821245B8h case    7:*/		return 0x821245BC;
		  /* 821245BCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821245BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821245BCh case    8:*/		return 0x821245C0;
		  /* 821245C0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821245C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821245C0h case    9:*/		return 0x821245C4;
		  /* 821245C4h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821245C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821245C4h case   10:*/		return 0x821245C8;
		  /* 821245C8h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821245C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821245A8;  }
		/* 821245C8h case   11:*/		return 0x821245CC;
	}
	return 0x821245CC;
} // Block from 8212459Ch-821245CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821245CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821245CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821245CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821245CC);
		  /* 821245CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821245CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821245CCh case    0:*/		return 0x821245D0;
		  /* 821245D0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821245D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821245DC;  }
		/* 821245D0h case    1:*/		return 0x821245D4;
		  /* 821245D4h */ case    2:  		/* li R3, 320 */
		/* 821245D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x140);
		/* 821245D4h case    2:*/		return 0x821245D8;
		  /* 821245D8h */ case    3:  		/* b -5808 */
		/* 821245D8h case    3:*/		return 0x82122F28;
		/* 821245D8h case    3:*/		return 0x821245DC;
	}
	return 0x821245DC;
} // Block from 821245CCh-821245DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821245DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821245DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821245DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821245DC);
		  /* 821245DCh */ case    0:  		/* lis R10, -32255 */
		/* 821245DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821245DCh case    0:*/		return 0x821245E0;
		  /* 821245E0h */ case    1:  		/* mr R11, R3 */
		/* 821245E0h case    1:*/		regs.R11 = regs.R3;
		/* 821245E0h case    1:*/		return 0x821245E4;
		  /* 821245E4h */ case    2:  		/* addi R10, R10, -15776 */
		/* 821245E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC260);
		/* 821245E4h case    2:*/		return 0x821245E8;
		  /* 821245E8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821245E8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821245E8h case    3:*/		return 0x821245EC;
		  /* 821245ECh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821245ECh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821245ECh case    4:*/		return 0x821245F0;
		  /* 821245F0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821245F0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821245F0h case    5:*/		return 0x821245F4;
		  /* 821245F4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821245F4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821245F4h case    6:*/		return 0x821245F8;
		  /* 821245F8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821245F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212460C;  }
		/* 821245F8h case    7:*/		return 0x821245FC;
		  /* 821245FCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821245FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821245FCh case    8:*/		return 0x82124600;
		  /* 82124600h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124600h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124600h case    9:*/		return 0x82124604;
		  /* 82124604h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124604h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124604h case   10:*/		return 0x82124608;
		  /* 82124608h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124608h case   11:*/		if ( regs.CR[6].eq ) { return 0x821245E8;  }
		/* 82124608h case   11:*/		return 0x8212460C;
	}
	return 0x8212460C;
} // Block from 821245DCh-8212460Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212460Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212460C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212460C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212460C);
		  /* 8212460Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212460Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212460Ch case    0:*/		return 0x82124610;
		  /* 82124610h */ case    1:  		/* bc 12, CR0_EQ, -5804 */
		/* 82124610h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124610h case    1:*/		return 0x82124614;
		  /* 82124614h */ case    2:  		/* lis R10, -32253 */
		/* 82124614h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124614h case    2:*/		return 0x82124618;
		  /* 82124618h */ case    3:  		/* mr R11, R3 */
		/* 82124618h case    3:*/		regs.R11 = regs.R3;
		/* 82124618h case    3:*/		return 0x8212461C;
		  /* 8212461Ch */ case    4:  		/* addi R10, R10, 11892 */
		/* 8212461Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E74);
		/* 8212461Ch case    4:*/		return 0x82124620;
		  /* 82124620h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124620h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124620h case    5:*/		return 0x82124624;
		  /* 82124624h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124624h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124624h case    6:*/		return 0x82124628;
		  /* 82124628h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124628h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124628h case    7:*/		return 0x8212462C;
		  /* 8212462Ch */ case    8:  		/* subf R9, R8, R9 */
		/* 8212462Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212462Ch case    8:*/		return 0x82124630;
		  /* 82124630h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124630h case    9:*/		if ( regs.CR[0].eq ) { return 0x82124644;  }
		/* 82124630h case    9:*/		return 0x82124634;
		  /* 82124634h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124634h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124634h case   10:*/		return 0x82124638;
		  /* 82124638h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124638h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124638h case   11:*/		return 0x8212463C;
		  /* 8212463Ch */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 8212463Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212463Ch case   12:*/		return 0x82124640;
		  /* 82124640h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124640h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124620;  }
		/* 82124640h case   13:*/		return 0x82124644;
	}
	return 0x82124644;
} // Block from 8212460Ch-82124644h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124644);
		  /* 82124644h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124644h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124644h case    0:*/		return 0x82124648;
		  /* 82124648h */ case    1:  		/* bc 12, CR0_EQ, -5860 */
		/* 82124648h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124648h case    1:*/		return 0x8212464C;
		  /* 8212464Ch */ case    2:  		/* lis R10, -32253 */
		/* 8212464Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212464Ch case    2:*/		return 0x82124650;
		  /* 82124650h */ case    3:  		/* mr R11, R3 */
		/* 82124650h case    3:*/		regs.R11 = regs.R3;
		/* 82124650h case    3:*/		return 0x82124654;
		  /* 82124654h */ case    4:  		/* addi R10, R10, 11884 */
		/* 82124654h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E6C);
		/* 82124654h case    4:*/		return 0x82124658;
		  /* 82124658h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124658h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124658h case    5:*/		return 0x8212465C;
		  /* 8212465Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212465Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212465Ch case    6:*/		return 0x82124660;
		  /* 82124660h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124660h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124660h case    7:*/		return 0x82124664;
		  /* 82124664h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124664h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124664h case    8:*/		return 0x82124668;
		  /* 82124668h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124668h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212467C;  }
		/* 82124668h case    9:*/		return 0x8212466C;
		  /* 8212466Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8212466Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212466Ch case   10:*/		return 0x82124670;
		  /* 82124670h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124670h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124670h case   11:*/		return 0x82124674;
		  /* 82124674h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124674h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124674h case   12:*/		return 0x82124678;
		  /* 82124678h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124678h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124658;  }
		/* 82124678h case   13:*/		return 0x8212467C;
	}
	return 0x8212467C;
} // Block from 82124644h-8212467Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212467Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212467C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212467C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212467C);
		  /* 8212467Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212467Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212467Ch case    0:*/		return 0x82124680;
		  /* 82124680h */ case    1:  		/* bc 12, CR0_EQ, -5916 */
		/* 82124680h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124680h case    1:*/		return 0x82124684;
		  /* 82124684h */ case    2:  		/* lis R10, -32253 */
		/* 82124684h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124684h case    2:*/		return 0x82124688;
		  /* 82124688h */ case    3:  		/* mr R11, R3 */
		/* 82124688h case    3:*/		regs.R11 = regs.R3;
		/* 82124688h case    3:*/		return 0x8212468C;
		  /* 8212468Ch */ case    4:  		/* addi R10, R10, 11876 */
		/* 8212468Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E64);
		/* 8212468Ch case    4:*/		return 0x82124690;
		  /* 82124690h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124690h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124690h case    5:*/		return 0x82124694;
		  /* 82124694h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124694h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124694h case    6:*/		return 0x82124698;
		  /* 82124698h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124698h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124698h case    7:*/		return 0x8212469C;
		  /* 8212469Ch */ case    8:  		/* subf R9, R8, R9 */
		/* 8212469Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212469Ch case    8:*/		return 0x821246A0;
		  /* 821246A0h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821246A0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821246B4;  }
		/* 821246A0h case    9:*/		return 0x821246A4;
		  /* 821246A4h */ case   10:  		/* addi R11, R11, 1 */
		/* 821246A4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821246A4h case   10:*/		return 0x821246A8;
		  /* 821246A8h */ case   11:  		/* addi R10, R10, 1 */
		/* 821246A8h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821246A8h case   11:*/		return 0x821246AC;
		  /* 821246ACh */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 821246ACh case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821246ACh case   12:*/		return 0x821246B0;
		  /* 821246B0h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 821246B0h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124690;  }
		/* 821246B0h case   13:*/		return 0x821246B4;
	}
	return 0x821246B4;
} // Block from 8212467Ch-821246B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821246B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821246B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821246B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821246B4);
		  /* 821246B4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821246B4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821246B4h case    0:*/		return 0x821246B8;
		  /* 821246B8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821246B8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821246C4;  }
		/* 821246B8h case    1:*/		return 0x821246BC;
		  /* 821246BCh */ case    2:  		/* li R3, 321 */
		/* 821246BCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x141);
		/* 821246BCh case    2:*/		return 0x821246C0;
		  /* 821246C0h */ case    3:  		/* b -6040 */
		/* 821246C0h case    3:*/		return 0x82122F28;
		/* 821246C0h case    3:*/		return 0x821246C4;
	}
	return 0x821246C4;
} // Block from 821246B4h-821246C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821246C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821246C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821246C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821246C4);
		  /* 821246C4h */ case    0:  		/* lis R10, -32253 */
		/* 821246C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821246C4h case    0:*/		return 0x821246C8;
		  /* 821246C8h */ case    1:  		/* mr R11, R3 */
		/* 821246C8h case    1:*/		regs.R11 = regs.R3;
		/* 821246C8h case    1:*/		return 0x821246CC;
		  /* 821246CCh */ case    2:  		/* addi R10, R10, 11856 */
		/* 821246CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E50);
		/* 821246CCh case    2:*/		return 0x821246D0;
		  /* 821246D0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821246D0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821246D0h case    3:*/		return 0x821246D4;
		  /* 821246D4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821246D4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821246D4h case    4:*/		return 0x821246D8;
		  /* 821246D8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821246D8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821246D8h case    5:*/		return 0x821246DC;
		  /* 821246DCh */ case    6:  		/* subf R9, R8, R9 */
		/* 821246DCh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821246DCh case    6:*/		return 0x821246E0;
		  /* 821246E0h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821246E0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821246F4;  }
		/* 821246E0h case    7:*/		return 0x821246E4;
		  /* 821246E4h */ case    8:  		/* addi R11, R11, 1 */
		/* 821246E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821246E4h case    8:*/		return 0x821246E8;
		  /* 821246E8h */ case    9:  		/* addi R10, R10, 1 */
		/* 821246E8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821246E8h case    9:*/		return 0x821246EC;
		  /* 821246ECh */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821246ECh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821246ECh case   10:*/		return 0x821246F0;
		  /* 821246F0h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821246F0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821246D0;  }
		/* 821246F0h case   11:*/		return 0x821246F4;
	}
	return 0x821246F4;
} // Block from 821246C4h-821246F4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821246F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821246F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821246F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821246F4);
		  /* 821246F4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821246F4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821246F4h case    0:*/		return 0x821246F8;
		  /* 821246F8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821246F8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124704;  }
		/* 821246F8h case    1:*/		return 0x821246FC;
		  /* 821246FCh */ case    2:  		/* li R3, 323 */
		/* 821246FCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x143);
		/* 821246FCh case    2:*/		return 0x82124700;
		  /* 82124700h */ case    3:  		/* b -6104 */
		/* 82124700h case    3:*/		return 0x82122F28;
		/* 82124700h case    3:*/		return 0x82124704;
	}
	return 0x82124704;
} // Block from 821246F4h-82124704h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124704);
		  /* 82124704h */ case    0:  		/* lis R10, -32253 */
		/* 82124704h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124704h case    0:*/		return 0x82124708;
		  /* 82124708h */ case    1:  		/* mr R11, R3 */
		/* 82124708h case    1:*/		regs.R11 = regs.R3;
		/* 82124708h case    1:*/		return 0x8212470C;
		  /* 8212470Ch */ case    2:  		/* addi R10, R10, 11848 */
		/* 8212470Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E48);
		/* 8212470Ch case    2:*/		return 0x82124710;
		  /* 82124710h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124710h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124710h case    3:*/		return 0x82124714;
		  /* 82124714h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124714h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124714h case    4:*/		return 0x82124718;
		  /* 82124718h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124718h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124718h case    5:*/		return 0x8212471C;
		  /* 8212471Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 8212471Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212471Ch case    6:*/		return 0x82124720;
		  /* 82124720h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124720h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124734;  }
		/* 82124720h case    7:*/		return 0x82124724;
		  /* 82124724h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124724h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124724h case    8:*/		return 0x82124728;
		  /* 82124728h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124728h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124728h case    9:*/		return 0x8212472C;
		  /* 8212472Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212472Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212472Ch case   10:*/		return 0x82124730;
		  /* 82124730h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124730h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124710;  }
		/* 82124730h case   11:*/		return 0x82124734;
	}
	return 0x82124734;
} // Block from 82124704h-82124734h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124734);
		  /* 82124734h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124734h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124734h case    0:*/		return 0x82124738;
		  /* 82124738h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124738h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124744;  }
		/* 82124738h case    1:*/		return 0x8212473C;
		  /* 8212473Ch */ case    2:  		/* li R3, 324 */
		/* 8212473Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x144);
		/* 8212473Ch case    2:*/		return 0x82124740;
		  /* 82124740h */ case    3:  		/* b -6168 */
		/* 82124740h case    3:*/		return 0x82122F28;
		/* 82124740h case    3:*/		return 0x82124744;
	}
	return 0x82124744;
} // Block from 82124734h-82124744h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124744);
		  /* 82124744h */ case    0:  		/* lis R10, -32253 */
		/* 82124744h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124744h case    0:*/		return 0x82124748;
		  /* 82124748h */ case    1:  		/* mr R11, R3 */
		/* 82124748h case    1:*/		regs.R11 = regs.R3;
		/* 82124748h case    1:*/		return 0x8212474C;
		  /* 8212474Ch */ case    2:  		/* addi R10, R10, 11836 */
		/* 8212474Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E3C);
		/* 8212474Ch case    2:*/		return 0x82124750;
		  /* 82124750h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124750h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124750h case    3:*/		return 0x82124754;
		  /* 82124754h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124754h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124754h case    4:*/		return 0x82124758;
		  /* 82124758h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124758h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124758h case    5:*/		return 0x8212475C;
		  /* 8212475Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 8212475Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212475Ch case    6:*/		return 0x82124760;
		  /* 82124760h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124760h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124774;  }
		/* 82124760h case    7:*/		return 0x82124764;
		  /* 82124764h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124764h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124764h case    8:*/		return 0x82124768;
		  /* 82124768h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124768h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124768h case    9:*/		return 0x8212476C;
		  /* 8212476Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212476Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212476Ch case   10:*/		return 0x82124770;
		  /* 82124770h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124770h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124750;  }
		/* 82124770h case   11:*/		return 0x82124774;
	}
	return 0x82124774;
} // Block from 82124744h-82124774h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124774);
		  /* 82124774h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124774h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124774h case    0:*/		return 0x82124778;
		  /* 82124778h */ case    1:  		/* bc 12, CR0_EQ, -6164 */
		/* 82124778h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124778h case    1:*/		return 0x8212477C;
		  /* 8212477Ch */ case    2:  		/* lis R10, -32253 */
		/* 8212477Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212477Ch case    2:*/		return 0x82124780;
		  /* 82124780h */ case    3:  		/* mr R11, R3 */
		/* 82124780h case    3:*/		regs.R11 = regs.R3;
		/* 82124780h case    3:*/		return 0x82124784;
		  /* 82124784h */ case    4:  		/* addi R10, R10, 11828 */
		/* 82124784h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E34);
		/* 82124784h case    4:*/		return 0x82124788;
		  /* 82124788h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124788h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124788h case    5:*/		return 0x8212478C;
		  /* 8212478Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212478Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212478Ch case    6:*/		return 0x82124790;
		  /* 82124790h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124790h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124790h case    7:*/		return 0x82124794;
		  /* 82124794h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124794h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124794h case    8:*/		return 0x82124798;
		  /* 82124798h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124798h case    9:*/		if ( regs.CR[0].eq ) { return 0x821247AC;  }
		/* 82124798h case    9:*/		return 0x8212479C;
		  /* 8212479Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8212479Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212479Ch case   10:*/		return 0x821247A0;
		  /* 821247A0h */ case   11:  		/* addi R10, R10, 1 */
		/* 821247A0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821247A0h case   11:*/		return 0x821247A4;
		  /* 821247A4h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 821247A4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821247A4h case   12:*/		return 0x821247A8;
		  /* 821247A8h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 821247A8h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124788;  }
		/* 821247A8h case   13:*/		return 0x821247AC;
	}
	return 0x821247AC;
} // Block from 82124774h-821247ACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821247ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821247AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821247AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821247AC);
		  /* 821247ACh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821247ACh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821247ACh case    0:*/		return 0x821247B0;
		  /* 821247B0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821247B0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821247BC;  }
		/* 821247B0h case    1:*/		return 0x821247B4;
		  /* 821247B4h */ case    2:  		/* li R3, 325 */
		/* 821247B4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x145);
		/* 821247B4h case    2:*/		return 0x821247B8;
		  /* 821247B8h */ case    3:  		/* b -6288 */
		/* 821247B8h case    3:*/		return 0x82122F28;
		/* 821247B8h case    3:*/		return 0x821247BC;
	}
	return 0x821247BC;
} // Block from 821247ACh-821247BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821247BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821247BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821247BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821247BC);
		  /* 821247BCh */ case    0:  		/* lis R10, -32255 */
		/* 821247BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821247BCh case    0:*/		return 0x821247C0;
		  /* 821247C0h */ case    1:  		/* mr R11, R3 */
		/* 821247C0h case    1:*/		regs.R11 = regs.R3;
		/* 821247C0h case    1:*/		return 0x821247C4;
		  /* 821247C4h */ case    2:  		/* addi R10, R10, 12408 */
		/* 821247C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3078);
		/* 821247C4h case    2:*/		return 0x821247C8;
		  /* 821247C8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821247C8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821247C8h case    3:*/		return 0x821247CC;
		  /* 821247CCh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821247CCh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821247CCh case    4:*/		return 0x821247D0;
		  /* 821247D0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821247D0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821247D0h case    5:*/		return 0x821247D4;
		  /* 821247D4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821247D4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821247D4h case    6:*/		return 0x821247D8;
		  /* 821247D8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821247D8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821247EC;  }
		/* 821247D8h case    7:*/		return 0x821247DC;
		  /* 821247DCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821247DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821247DCh case    8:*/		return 0x821247E0;
		  /* 821247E0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821247E0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821247E0h case    9:*/		return 0x821247E4;
		  /* 821247E4h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821247E4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821247E4h case   10:*/		return 0x821247E8;
		  /* 821247E8h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821247E8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821247C8;  }
		/* 821247E8h case   11:*/		return 0x821247EC;
	}
	return 0x821247EC;
} // Block from 821247BCh-821247ECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821247ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821247EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821247EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821247EC);
		  /* 821247ECh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821247ECh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821247ECh case    0:*/		return 0x821247F0;
		  /* 821247F0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821247F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821247FC;  }
		/* 821247F0h case    1:*/		return 0x821247F4;
		  /* 821247F4h */ case    2:  		/* li R3, 326 */
		/* 821247F4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x146);
		/* 821247F4h case    2:*/		return 0x821247F8;
		  /* 821247F8h */ case    3:  		/* b -6352 */
		/* 821247F8h case    3:*/		return 0x82122F28;
		/* 821247F8h case    3:*/		return 0x821247FC;
	}
	return 0x821247FC;
} // Block from 821247ECh-821247FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821247FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821247FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821247FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821247FC);
		  /* 821247FCh */ case    0:  		/* lis R10, -32255 */
		/* 821247FCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821247FCh case    0:*/		return 0x82124800;
		  /* 82124800h */ case    1:  		/* mr R11, R3 */
		/* 82124800h case    1:*/		regs.R11 = regs.R3;
		/* 82124800h case    1:*/		return 0x82124804;
		  /* 82124804h */ case    2:  		/* addi R10, R10, 12416 */
		/* 82124804h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3080);
		/* 82124804h case    2:*/		return 0x82124808;
		  /* 82124808h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124808h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124808h case    3:*/		return 0x8212480C;
		  /* 8212480Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212480Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212480Ch case    4:*/		return 0x82124810;
		  /* 82124810h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124810h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124810h case    5:*/		return 0x82124814;
		  /* 82124814h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124814h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124814h case    6:*/		return 0x82124818;
		  /* 82124818h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124818h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212482C;  }
		/* 82124818h case    7:*/		return 0x8212481C;
		  /* 8212481Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212481Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212481Ch case    8:*/		return 0x82124820;
		  /* 82124820h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124820h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124820h case    9:*/		return 0x82124824;
		  /* 82124824h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124824h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124824h case   10:*/		return 0x82124828;
		  /* 82124828h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124828h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124808;  }
		/* 82124828h case   11:*/		return 0x8212482C;
	}
	return 0x8212482C;
} // Block from 821247FCh-8212482Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212482Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212482C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212482C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212482C);
		  /* 8212482Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212482Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212482Ch case    0:*/		return 0x82124830;
		  /* 82124830h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124830h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212483C;  }
		/* 82124830h case    1:*/		return 0x82124834;
		  /* 82124834h */ case    2:  		/* li R3, 327 */
		/* 82124834h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x147);
		/* 82124834h case    2:*/		return 0x82124838;
		  /* 82124838h */ case    3:  		/* b -6416 */
		/* 82124838h case    3:*/		return 0x82122F28;
		/* 82124838h case    3:*/		return 0x8212483C;
	}
	return 0x8212483C;
} // Block from 8212482Ch-8212483Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212483Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212483C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212483C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212483C);
		  /* 8212483Ch */ case    0:  		/* lis R10, -32253 */
		/* 8212483Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212483Ch case    0:*/		return 0x82124840;
		  /* 82124840h */ case    1:  		/* mr R11, R3 */
		/* 82124840h case    1:*/		regs.R11 = regs.R3;
		/* 82124840h case    1:*/		return 0x82124844;
		  /* 82124844h */ case    2:  		/* addi R10, R10, 11820 */
		/* 82124844h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E2C);
		/* 82124844h case    2:*/		return 0x82124848;
		  /* 82124848h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124848h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124848h case    3:*/		return 0x8212484C;
		  /* 8212484Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8212484Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212484Ch case    4:*/		return 0x82124850;
		  /* 82124850h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124850h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124850h case    5:*/		return 0x82124854;
		  /* 82124854h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124854h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124854h case    6:*/		return 0x82124858;
		  /* 82124858h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124858h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212486C;  }
		/* 82124858h case    7:*/		return 0x8212485C;
		  /* 8212485Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8212485Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212485Ch case    8:*/		return 0x82124860;
		  /* 82124860h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124860h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124860h case    9:*/		return 0x82124864;
		  /* 82124864h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124864h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124864h case   10:*/		return 0x82124868;
		  /* 82124868h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124868h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124848;  }
		/* 82124868h case   11:*/		return 0x8212486C;
	}
	return 0x8212486C;
} // Block from 8212483Ch-8212486Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212486Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212486C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212486C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212486C);
		  /* 8212486Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212486Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212486Ch case    0:*/		return 0x82124870;
		  /* 82124870h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124870h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212487C;  }
		/* 82124870h case    1:*/		return 0x82124874;
		  /* 82124874h */ case    2:  		/* li R3, 328 */
		/* 82124874h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x148);
		/* 82124874h case    2:*/		return 0x82124878;
		  /* 82124878h */ case    3:  		/* b -6480 */
		/* 82124878h case    3:*/		return 0x82122F28;
		/* 82124878h case    3:*/		return 0x8212487C;
	}
	return 0x8212487C;
} // Block from 8212486Ch-8212487Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212487Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212487C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212487C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212487C);
		  /* 8212487Ch */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 8212487Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 8212487Ch case    0:*/		return 0x82124880;
		  /* 82124880h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82124880h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82124880h case    1:*/		return 0x82124884;
		  /* 82124884h */ case    2:  		/* bc 12, CR6_EQ, -4284 */
		/* 82124884h case    2:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82124884h case    2:*/		return 0x82124888;
		  /* 82124888h */ case    3:  		/* lis R10, -32255 */
		/* 82124888h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82124888h case    3:*/		return 0x8212488C;
		  /* 8212488Ch */ case    4:  		/* mr R11, R3 */
		/* 8212488Ch case    4:*/		regs.R11 = regs.R3;
		/* 8212488Ch case    4:*/		return 0x82124890;
		  /* 82124890h */ case    5:  		/* addi R10, R10, 12476 */
		/* 82124890h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30BC);
		/* 82124890h case    5:*/		return 0x82124894;
		  /* 82124894h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 82124894h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124894h case    6:*/		return 0x82124898;
		  /* 82124898h */ case    7:  		/* lbz R8, <#[R10]> */
		/* 82124898h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124898h case    7:*/		return 0x8212489C;
		  /* 8212489Ch */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 8212489Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212489Ch case    8:*/		return 0x821248A0;
		  /* 821248A0h */ case    9:  		/* subf R9, R8, R9 */
		/* 821248A0h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821248A0h case    9:*/		return 0x821248A4;
		  /* 821248A4h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 821248A4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821248B8;  }
		/* 821248A4h case   10:*/		return 0x821248A8;
		  /* 821248A8h */ case   11:  		/* addi R11, R11, 1 */
		/* 821248A8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821248A8h case   11:*/		return 0x821248AC;
		  /* 821248ACh */ case   12:  		/* addi R10, R10, 1 */
		/* 821248ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821248ACh case   12:*/		return 0x821248B0;
		  /* 821248B0h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 821248B0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821248B0h case   13:*/		return 0x821248B4;
		  /* 821248B4h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 821248B4h case   14:*/		if ( regs.CR[6].eq ) { return 0x82124894;  }
		/* 821248B4h case   14:*/		return 0x821248B8;
	}
	return 0x821248B8;
} // Block from 8212487Ch-821248B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821248B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821248B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821248B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821248B8);
		  /* 821248B8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821248B8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821248B8h case    0:*/		return 0x821248BC;
		  /* 821248BCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821248BCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821248C8;  }
		/* 821248BCh case    1:*/		return 0x821248C0;
		  /* 821248C0h */ case    2:  		/* li R3, 313 */
		/* 821248C0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x139);
		/* 821248C0h case    2:*/		return 0x821248C4;
		  /* 821248C4h */ case    3:  		/* b -6556 */
		/* 821248C4h case    3:*/		return 0x82122F28;
		/* 821248C4h case    3:*/		return 0x821248C8;
	}
	return 0x821248C8;
} // Block from 821248B8h-821248C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821248C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821248C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821248C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821248C8);
		  /* 821248C8h */ case    0:  		/* lis R10, -32253 */
		/* 821248C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821248C8h case    0:*/		return 0x821248CC;
		  /* 821248CCh */ case    1:  		/* mr R11, R3 */
		/* 821248CCh case    1:*/		regs.R11 = regs.R3;
		/* 821248CCh case    1:*/		return 0x821248D0;
		  /* 821248D0h */ case    2:  		/* addi R10, R10, 8484 */
		/* 821248D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2124);
		/* 821248D0h case    2:*/		return 0x821248D4;
		  /* 821248D4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821248D4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821248D4h case    3:*/		return 0x821248D8;
		  /* 821248D8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821248D8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821248D8h case    4:*/		return 0x821248DC;
		  /* 821248DCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821248DCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821248DCh case    5:*/		return 0x821248E0;
		  /* 821248E0h */ case    6:  		/* subf R9, R8, R9 */
		/* 821248E0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821248E0h case    6:*/		return 0x821248E4;
		  /* 821248E4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821248E4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821248F8;  }
		/* 821248E4h case    7:*/		return 0x821248E8;
		  /* 821248E8h */ case    8:  		/* addi R11, R11, 1 */
		/* 821248E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821248E8h case    8:*/		return 0x821248EC;
		  /* 821248ECh */ case    9:  		/* addi R10, R10, 1 */
		/* 821248ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821248ECh case    9:*/		return 0x821248F0;
		  /* 821248F0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821248F0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821248F0h case   10:*/		return 0x821248F4;
		  /* 821248F4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821248F4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821248D4;  }
		/* 821248F4h case   11:*/		return 0x821248F8;
	}
	return 0x821248F8;
} // Block from 821248C8h-821248F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821248F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821248F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821248F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821248F8);
		  /* 821248F8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821248F8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821248F8h case    0:*/		return 0x821248FC;
		  /* 821248FCh */ case    1:  		/* bc 4, CR0_EQ, -4404 */
		/* 821248FCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821248FCh case    1:*/		return 0x82124900;
		  /* 82124900h */ case    2:  		/* li R3, 322 */
		/* 82124900h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x142);
		/* 82124900h case    2:*/		return 0x82124904;
		  /* 82124904h */ case    3:  		/* b -6620 */
		/* 82124904h case    3:*/		return 0x82122F28;
		/* 82124904h case    3:*/		return 0x82124908;
		  /* 82124908h */ case    4:  		/* lis R10, -32253 */
		/* 82124908h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124908h case    4:*/		return 0x8212490C;
		  /* 8212490Ch */ case    5:  		/* mr R11, R3 */
		/* 8212490Ch case    5:*/		regs.R11 = regs.R3;
		/* 8212490Ch case    5:*/		return 0x82124910;
		  /* 82124910h */ case    6:  		/* addi R10, R10, 11812 */
		/* 82124910h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E24);
		/* 82124910h case    6:*/		return 0x82124914;
		  /* 82124914h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82124914h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124914h case    7:*/		return 0x82124918;
		  /* 82124918h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82124918h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124918h case    8:*/		return 0x8212491C;
		  /* 8212491Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8212491Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212491Ch case    9:*/		return 0x82124920;
		  /* 82124920h */ case   10:  		/* subf R9, R8, R9 */
		/* 82124920h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124920h case   10:*/		return 0x82124924;
		  /* 82124924h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82124924h case   11:*/		if ( regs.CR[0].eq ) { return 0x82124938;  }
		/* 82124924h case   11:*/		return 0x82124928;
		  /* 82124928h */ case   12:  		/* addi R11, R11, 1 */
		/* 82124928h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124928h case   12:*/		return 0x8212492C;
		  /* 8212492Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212492Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212492Ch case   13:*/		return 0x82124930;
		  /* 82124930h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82124930h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124930h case   14:*/		return 0x82124934;
		  /* 82124934h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82124934h case   15:*/		if ( regs.CR[6].eq ) { return 0x82124914;  }
		/* 82124934h case   15:*/		return 0x82124938;
	}
	return 0x82124938;
} // Block from 821248F8h-82124938h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82124938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124938);
		  /* 82124938h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124938h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124938h case    0:*/		return 0x8212493C;
		  /* 8212493Ch */ case    1:  		/* bc 12, CR0_EQ, -328 */
		/* 8212493Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821247F4;  }
		/* 8212493Ch case    1:*/		return 0x82124940;
		  /* 82124940h */ case    2:  		/* lis R10, -32253 */
		/* 82124940h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124940h case    2:*/		return 0x82124944;
		  /* 82124944h */ case    3:  		/* mr R11, R3 */
		/* 82124944h case    3:*/		regs.R11 = regs.R3;
		/* 82124944h case    3:*/		return 0x82124948;
		  /* 82124948h */ case    4:  		/* addi R10, R10, 11796 */
		/* 82124948h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2E14);
		/* 82124948h case    4:*/		return 0x8212494C;
		  /* 8212494Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 8212494Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212494Ch case    5:*/		return 0x82124950;
		  /* 82124950h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124950h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124950h case    6:*/		return 0x82124954;
		  /* 82124954h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124954h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124954h case    7:*/		return 0x82124958;
		  /* 82124958h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124958h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124958h case    8:*/		return 0x8212495C;
		  /* 8212495Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8212495Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82124970;  }
		/* 8212495Ch case    9:*/		return 0x82124960;
		  /* 82124960h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124960h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124960h case   10:*/		return 0x82124964;
		  /* 82124964h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124964h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124964h case   11:*/		return 0x82124968;
		  /* 82124968h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124968h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124968h case   12:*/		return 0x8212496C;
		  /* 8212496Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212496Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212494C;  }
		/* 8212496Ch case   13:*/		return 0x82124970;
	}
	return 0x82124970;
} // Block from 82124938h-82124970h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124970);
		  /* 82124970h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124970h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124970h case    0:*/		return 0x82124974;
		  /* 82124974h */ case    1:  		/* bc 12, CR0_EQ, -180 */
		/* 82124974h case    1:*/		if ( regs.CR[0].eq ) { return 0x821248C0;  }
		/* 82124974h case    1:*/		return 0x82124978;
		  /* 82124978h */ case    2:  		/* lis R10, -32253 */
		/* 82124978h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124978h case    2:*/		return 0x8212497C;
		  /* 8212497Ch */ case    3:  		/* mr R11, R3 */
		/* 8212497Ch case    3:*/		regs.R11 = regs.R3;
		/* 8212497Ch case    3:*/		return 0x82124980;
		  /* 82124980h */ case    4:  		/* addi R10, R10, 11772 */
		/* 82124980h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DFC);
		/* 82124980h case    4:*/		return 0x82124984;
		  /* 82124984h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124984h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124984h case    5:*/		return 0x82124988;
		  /* 82124988h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124988h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124988h case    6:*/		return 0x8212498C;
		  /* 8212498Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 8212498Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212498Ch case    7:*/		return 0x82124990;
		  /* 82124990h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124990h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124990h case    8:*/		return 0x82124994;
		  /* 82124994h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124994h case    9:*/		if ( regs.CR[0].eq ) { return 0x821249A8;  }
		/* 82124994h case    9:*/		return 0x82124998;
		  /* 82124998h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124998h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124998h case   10:*/		return 0x8212499C;
		  /* 8212499Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 8212499Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212499Ch case   11:*/		return 0x821249A0;
		  /* 821249A0h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 821249A0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821249A0h case   12:*/		return 0x821249A4;
		  /* 821249A4h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 821249A4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124984;  }
		/* 821249A4h case   13:*/		return 0x821249A8;
	}
	return 0x821249A8;
} // Block from 82124970h-821249A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821249A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821249A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821249A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821249A8);
		  /* 821249A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821249A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821249A8h case    0:*/		return 0x821249AC;
		  /* 821249ACh */ case    1:  		/* bc 4, CR0_EQ, -4580 */
		/* 821249ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821249ACh case    1:*/		return 0x821249B0;
		  /* 821249B0h */ case    2:  		/* li R3, 314 */
		/* 821249B0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13A);
		/* 821249B0h case    2:*/		return 0x821249B4;
		  /* 821249B4h */ case    3:  		/* b -6796 */
		/* 821249B4h case    3:*/		return 0x82122F28;
		/* 821249B4h case    3:*/		return 0x821249B8;
		  /* 821249B8h */ case    4:  		/* lis R10, -32253 */
		/* 821249B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821249B8h case    4:*/		return 0x821249BC;
		  /* 821249BCh */ case    5:  		/* mr R11, R3 */
		/* 821249BCh case    5:*/		regs.R11 = regs.R3;
		/* 821249BCh case    5:*/		return 0x821249C0;
		  /* 821249C0h */ case    6:  		/* addi R10, R10, 9616 */
		/* 821249C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2590);
		/* 821249C0h case    6:*/		return 0x821249C4;
		  /* 821249C4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821249C4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821249C4h case    7:*/		return 0x821249C8;
		  /* 821249C8h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 821249C8h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821249C8h case    8:*/		return 0x821249CC;
		  /* 821249CCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821249CCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821249CCh case    9:*/		return 0x821249D0;
		  /* 821249D0h */ case   10:  		/* subf R9, R8, R9 */
		/* 821249D0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821249D0h case   10:*/		return 0x821249D4;
		  /* 821249D4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821249D4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821249E8;  }
		/* 821249D4h case   11:*/		return 0x821249D8;
		  /* 821249D8h */ case   12:  		/* addi R11, R11, 1 */
		/* 821249D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821249D8h case   12:*/		return 0x821249DC;
		  /* 821249DCh */ case   13:  		/* addi R10, R10, 1 */
		/* 821249DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821249DCh case   13:*/		return 0x821249E0;
		  /* 821249E0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 821249E0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821249E0h case   14:*/		return 0x821249E4;
		  /* 821249E4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 821249E4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821249C4;  }
		/* 821249E4h case   15:*/		return 0x821249E8;
	}
	return 0x821249E8;
} // Block from 821249A8h-821249E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821249E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821249E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821249E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821249E8);
		  /* 821249E8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821249E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821249E8h case    0:*/		return 0x821249EC;
		  /* 821249ECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821249ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821249F8;  }
		/* 821249ECh case    1:*/		return 0x821249F0;
		  /* 821249F0h */ case    2:  		/* li R3, 329 */
		/* 821249F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x149);
		/* 821249F0h case    2:*/		return 0x821249F4;
		  /* 821249F4h */ case    3:  		/* b -6860 */
		/* 821249F4h case    3:*/		return 0x82122F28;
		/* 821249F4h case    3:*/		return 0x821249F8;
	}
	return 0x821249F8;
} // Block from 821249E8h-821249F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821249F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821249F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821249F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821249F8);
		  /* 821249F8h */ case    0:  		/* lis R10, -32253 */
		/* 821249F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821249F8h case    0:*/		return 0x821249FC;
		  /* 821249FCh */ case    1:  		/* mr R11, R3 */
		/* 821249FCh case    1:*/		regs.R11 = regs.R3;
		/* 821249FCh case    1:*/		return 0x82124A00;
		  /* 82124A00h */ case    2:  		/* addi R10, R10, 11760 */
		/* 82124A00h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DF0);
		/* 82124A00h case    2:*/		return 0x82124A04;
		  /* 82124A04h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124A04h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124A04h case    3:*/		return 0x82124A08;
		  /* 82124A08h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124A08h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124A08h case    4:*/		return 0x82124A0C;
		  /* 82124A0Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124A0Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A0Ch case    5:*/		return 0x82124A10;
		  /* 82124A10h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124A10h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124A10h case    6:*/		return 0x82124A14;
		  /* 82124A14h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124A14h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124A28;  }
		/* 82124A14h case    7:*/		return 0x82124A18;
		  /* 82124A18h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124A18h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124A18h case    8:*/		return 0x82124A1C;
		  /* 82124A1Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82124A1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124A1Ch case    9:*/		return 0x82124A20;
		  /* 82124A20h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124A20h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124A20h case   10:*/		return 0x82124A24;
		  /* 82124A24h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124A24h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124A04;  }
		/* 82124A24h case   11:*/		return 0x82124A28;
	}
	return 0x82124A28;
} // Block from 821249F8h-82124A28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124A28);
		  /* 82124A28h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124A28h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A28h case    0:*/		return 0x82124A2C;
		  /* 82124A2Ch */ case    1:  		/* bc 12, CR0_EQ, -6856 */
		/* 82124A2Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124A2Ch case    1:*/		return 0x82124A30;
		  /* 82124A30h */ case    2:  		/* lis R10, -32253 */
		/* 82124A30h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124A30h case    2:*/		return 0x82124A34;
		  /* 82124A34h */ case    3:  		/* mr R11, R3 */
		/* 82124A34h case    3:*/		regs.R11 = regs.R3;
		/* 82124A34h case    3:*/		return 0x82124A38;
		  /* 82124A38h */ case    4:  		/* addi R10, R10, 11752 */
		/* 82124A38h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DE8);
		/* 82124A38h case    4:*/		return 0x82124A3C;
		  /* 82124A3Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124A3Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124A3Ch case    5:*/		return 0x82124A40;
		  /* 82124A40h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124A40h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124A40h case    6:*/		return 0x82124A44;
		  /* 82124A44h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124A44h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A44h case    7:*/		return 0x82124A48;
		  /* 82124A48h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124A48h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124A48h case    8:*/		return 0x82124A4C;
		  /* 82124A4Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124A4Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82124A60;  }
		/* 82124A4Ch case    9:*/		return 0x82124A50;
		  /* 82124A50h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124A50h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124A50h case   10:*/		return 0x82124A54;
		  /* 82124A54h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124A54h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124A54h case   11:*/		return 0x82124A58;
		  /* 82124A58h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124A58h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124A58h case   12:*/		return 0x82124A5C;
		  /* 82124A5Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124A5Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82124A3C;  }
		/* 82124A5Ch case   13:*/		return 0x82124A60;
	}
	return 0x82124A60;
} // Block from 82124A28h-82124A60h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124A60);
		  /* 82124A60h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124A60h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A60h case    0:*/		return 0x82124A64;
		  /* 82124A64h */ case    1:  		/* bc 12, CR0_EQ, -6912 */
		/* 82124A64h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124A64h case    1:*/		return 0x82124A68;
		  /* 82124A68h */ case    2:  		/* lis R10, -32253 */
		/* 82124A68h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124A68h case    2:*/		return 0x82124A6C;
		  /* 82124A6Ch */ case    3:  		/* mr R11, R3 */
		/* 82124A6Ch case    3:*/		regs.R11 = regs.R3;
		/* 82124A6Ch case    3:*/		return 0x82124A70;
		  /* 82124A70h */ case    4:  		/* addi R10, R10, 11740 */
		/* 82124A70h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DDC);
		/* 82124A70h case    4:*/		return 0x82124A74;
		  /* 82124A74h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124A74h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124A74h case    5:*/		return 0x82124A78;
		  /* 82124A78h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124A78h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124A78h case    6:*/		return 0x82124A7C;
		  /* 82124A7Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124A7Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A7Ch case    7:*/		return 0x82124A80;
		  /* 82124A80h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124A80h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124A80h case    8:*/		return 0x82124A84;
		  /* 82124A84h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124A84h case    9:*/		if ( regs.CR[0].eq ) { return 0x82124A98;  }
		/* 82124A84h case    9:*/		return 0x82124A88;
		  /* 82124A88h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124A88h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124A88h case   10:*/		return 0x82124A8C;
		  /* 82124A8Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 82124A8Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124A8Ch case   11:*/		return 0x82124A90;
		  /* 82124A90h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124A90h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124A90h case   12:*/		return 0x82124A94;
		  /* 82124A94h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124A94h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124A74;  }
		/* 82124A94h case   13:*/		return 0x82124A98;
	}
	return 0x82124A98;
} // Block from 82124A60h-82124A98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124A98);
		  /* 82124A98h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124A98h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124A98h case    0:*/		return 0x82124A9C;
		  /* 82124A9Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124A9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124AA8;  }
		/* 82124A9Ch case    1:*/		return 0x82124AA0;
		  /* 82124AA0h */ case    2:  		/* li R3, 341 */
		/* 82124AA0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x155);
		/* 82124AA0h case    2:*/		return 0x82124AA4;
		  /* 82124AA4h */ case    3:  		/* b -7036 */
		/* 82124AA4h case    3:*/		return 0x82122F28;
		/* 82124AA4h case    3:*/		return 0x82124AA8;
	}
	return 0x82124AA8;
} // Block from 82124A98h-82124AA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124AA8);
		  /* 82124AA8h */ case    0:  		/* lis R10, -32253 */
		/* 82124AA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124AA8h case    0:*/		return 0x82124AAC;
		  /* 82124AACh */ case    1:  		/* mr R11, R3 */
		/* 82124AACh case    1:*/		regs.R11 = regs.R3;
		/* 82124AACh case    1:*/		return 0x82124AB0;
		  /* 82124AB0h */ case    2:  		/* addi R10, R10, 11728 */
		/* 82124AB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DD0);
		/* 82124AB0h case    2:*/		return 0x82124AB4;
		  /* 82124AB4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124AB4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124AB4h case    3:*/		return 0x82124AB8;
		  /* 82124AB8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124AB8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124AB8h case    4:*/		return 0x82124ABC;
		  /* 82124ABCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124ABCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124ABCh case    5:*/		return 0x82124AC0;
		  /* 82124AC0h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124AC0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124AC0h case    6:*/		return 0x82124AC4;
		  /* 82124AC4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124AC4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124AD8;  }
		/* 82124AC4h case    7:*/		return 0x82124AC8;
		  /* 82124AC8h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124AC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124AC8h case    8:*/		return 0x82124ACC;
		  /* 82124ACCh */ case    9:  		/* addi R10, R10, 1 */
		/* 82124ACCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124ACCh case    9:*/		return 0x82124AD0;
		  /* 82124AD0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124AD0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124AD0h case   10:*/		return 0x82124AD4;
		  /* 82124AD4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124AD4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124AB4;  }
		/* 82124AD4h case   11:*/		return 0x82124AD8;
	}
	return 0x82124AD8;
} // Block from 82124AA8h-82124AD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124AD8);
		  /* 82124AD8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124AD8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124AD8h case    0:*/		return 0x82124ADC;
		  /* 82124ADCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124ADCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124AE8;  }
		/* 82124ADCh case    1:*/		return 0x82124AE0;
		  /* 82124AE0h */ case    2:  		/* li R3, 342 */
		/* 82124AE0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x156);
		/* 82124AE0h case    2:*/		return 0x82124AE4;
		  /* 82124AE4h */ case    3:  		/* b -7100 */
		/* 82124AE4h case    3:*/		return 0x82122F28;
		/* 82124AE4h case    3:*/		return 0x82124AE8;
	}
	return 0x82124AE8;
} // Block from 82124AD8h-82124AE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124AE8);
		  /* 82124AE8h */ case    0:  		/* lis R10, -32253 */
		/* 82124AE8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124AE8h case    0:*/		return 0x82124AEC;
		  /* 82124AECh */ case    1:  		/* mr R11, R3 */
		/* 82124AECh case    1:*/		regs.R11 = regs.R3;
		/* 82124AECh case    1:*/		return 0x82124AF0;
		  /* 82124AF0h */ case    2:  		/* addi R10, R10, 11720 */
		/* 82124AF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DC8);
		/* 82124AF0h case    2:*/		return 0x82124AF4;
		  /* 82124AF4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124AF4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124AF4h case    3:*/		return 0x82124AF8;
		  /* 82124AF8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124AF8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124AF8h case    4:*/		return 0x82124AFC;
		  /* 82124AFCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124AFCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124AFCh case    5:*/		return 0x82124B00;
		  /* 82124B00h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124B00h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124B00h case    6:*/		return 0x82124B04;
		  /* 82124B04h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124B04h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124B18;  }
		/* 82124B04h case    7:*/		return 0x82124B08;
		  /* 82124B08h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124B08h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124B08h case    8:*/		return 0x82124B0C;
		  /* 82124B0Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82124B0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124B0Ch case    9:*/		return 0x82124B10;
		  /* 82124B10h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124B10h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124B10h case   10:*/		return 0x82124B14;
		  /* 82124B14h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124B14h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124AF4;  }
		/* 82124B14h case   11:*/		return 0x82124B18;
	}
	return 0x82124B18;
} // Block from 82124AE8h-82124B18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124B18);
		  /* 82124B18h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124B18h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124B18h case    0:*/		return 0x82124B1C;
		  /* 82124B1Ch */ case    1:  		/* bc 12, CR0_EQ, -7096 */
		/* 82124B1Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124B1Ch case    1:*/		return 0x82124B20;
		  /* 82124B20h */ case    2:  		/* lis R10, -32255 */
		/* 82124B20h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82124B20h case    2:*/		return 0x82124B24;
		  /* 82124B24h */ case    3:  		/* mr R11, R3 */
		/* 82124B24h case    3:*/		regs.R11 = regs.R3;
		/* 82124B24h case    3:*/		return 0x82124B28;
		  /* 82124B28h */ case    4:  		/* addi R10, R10, 5224 */
		/* 82124B28h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1468);
		/* 82124B28h case    4:*/		return 0x82124B2C;
		  /* 82124B2Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124B2Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124B2Ch case    5:*/		return 0x82124B30;
		  /* 82124B30h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124B30h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124B30h case    6:*/		return 0x82124B34;
		  /* 82124B34h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124B34h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124B34h case    7:*/		return 0x82124B38;
		  /* 82124B38h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124B38h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124B38h case    8:*/		return 0x82124B3C;
		  /* 82124B3Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124B3Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82124B50;  }
		/* 82124B3Ch case    9:*/		return 0x82124B40;
		  /* 82124B40h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124B40h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124B40h case   10:*/		return 0x82124B44;
		  /* 82124B44h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124B44h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124B44h case   11:*/		return 0x82124B48;
		  /* 82124B48h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124B48h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124B48h case   12:*/		return 0x82124B4C;
		  /* 82124B4Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124B4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82124B2C;  }
		/* 82124B4Ch case   13:*/		return 0x82124B50;
	}
	return 0x82124B50;
} // Block from 82124B18h-82124B50h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124B50);
		  /* 82124B50h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124B50h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124B50h case    0:*/		return 0x82124B54;
		  /* 82124B54h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124B54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124B60;  }
		/* 82124B54h case    1:*/		return 0x82124B58;
		  /* 82124B58h */ case    2:  		/* li R3, 344 */
		/* 82124B58h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x158);
		/* 82124B58h case    2:*/		return 0x82124B5C;
		  /* 82124B5Ch */ case    3:  		/* b -7220 */
		/* 82124B5Ch case    3:*/		return 0x82122F28;
		/* 82124B5Ch case    3:*/		return 0x82124B60;
	}
	return 0x82124B60;
} // Block from 82124B50h-82124B60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124B60);
		  /* 82124B60h */ case    0:  		/* lis R10, -32253 */
		/* 82124B60h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124B60h case    0:*/		return 0x82124B64;
		  /* 82124B64h */ case    1:  		/* mr R11, R3 */
		/* 82124B64h case    1:*/		regs.R11 = regs.R3;
		/* 82124B64h case    1:*/		return 0x82124B68;
		  /* 82124B68h */ case    2:  		/* addi R10, R10, 11716 */
		/* 82124B68h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DC4);
		/* 82124B68h case    2:*/		return 0x82124B6C;
		  /* 82124B6Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124B6Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124B6Ch case    3:*/		return 0x82124B70;
		  /* 82124B70h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124B70h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124B70h case    4:*/		return 0x82124B74;
		  /* 82124B74h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124B74h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124B74h case    5:*/		return 0x82124B78;
		  /* 82124B78h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124B78h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124B78h case    6:*/		return 0x82124B7C;
		  /* 82124B7Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124B7Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82124B90;  }
		/* 82124B7Ch case    7:*/		return 0x82124B80;
		  /* 82124B80h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124B80h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124B80h case    8:*/		return 0x82124B84;
		  /* 82124B84h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124B84h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124B84h case    9:*/		return 0x82124B88;
		  /* 82124B88h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124B88h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124B88h case   10:*/		return 0x82124B8C;
		  /* 82124B8Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124B8Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82124B6C;  }
		/* 82124B8Ch case   11:*/		return 0x82124B90;
	}
	return 0x82124B90;
} // Block from 82124B60h-82124B90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124B90);
		  /* 82124B90h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124B90h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124B90h case    0:*/		return 0x82124B94;
		  /* 82124B94h */ case    1:  		/* bc 12, CR0_EQ, -7216 */
		/* 82124B94h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124B94h case    1:*/		return 0x82124B98;
		  /* 82124B98h */ case    2:  		/* lis R10, -32253 */
		/* 82124B98h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124B98h case    2:*/		return 0x82124B9C;
		  /* 82124B9Ch */ case    3:  		/* mr R11, R3 */
		/* 82124B9Ch case    3:*/		regs.R11 = regs.R3;
		/* 82124B9Ch case    3:*/		return 0x82124BA0;
		  /* 82124BA0h */ case    4:  		/* addi R10, R10, 11708 */
		/* 82124BA0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DBC);
		/* 82124BA0h case    4:*/		return 0x82124BA4;
		  /* 82124BA4h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124BA4h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124BA4h case    5:*/		return 0x82124BA8;
		  /* 82124BA8h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124BA8h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124BA8h case    6:*/		return 0x82124BAC;
		  /* 82124BACh */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124BACh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124BACh case    7:*/		return 0x82124BB0;
		  /* 82124BB0h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124BB0h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124BB0h case    8:*/		return 0x82124BB4;
		  /* 82124BB4h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124BB4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82124BC8;  }
		/* 82124BB4h case    9:*/		return 0x82124BB8;
		  /* 82124BB8h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124BB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124BB8h case   10:*/		return 0x82124BBC;
		  /* 82124BBCh */ case   11:  		/* addi R10, R10, 1 */
		/* 82124BBCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124BBCh case   11:*/		return 0x82124BC0;
		  /* 82124BC0h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124BC0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124BC0h case   12:*/		return 0x82124BC4;
		  /* 82124BC4h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124BC4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124BA4;  }
		/* 82124BC4h case   13:*/		return 0x82124BC8;
	}
	return 0x82124BC8;
} // Block from 82124B90h-82124BC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124BC8);
		  /* 82124BC8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124BC8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124BC8h case    0:*/		return 0x82124BCC;
		  /* 82124BCCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124BCCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124BD8;  }
		/* 82124BCCh case    1:*/		return 0x82124BD0;
		  /* 82124BD0h */ case    2:  		/* li R3, 345 */
		/* 82124BD0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x159);
		/* 82124BD0h case    2:*/		return 0x82124BD4;
		  /* 82124BD4h */ case    3:  		/* b -7340 */
		/* 82124BD4h case    3:*/		return 0x82122F28;
		/* 82124BD4h case    3:*/		return 0x82124BD8;
	}
	return 0x82124BD8;
} // Block from 82124BC8h-82124BD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124BD8);
		  /* 82124BD8h */ case    0:  		/* lis R10, -32253 */
		/* 82124BD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124BD8h case    0:*/		return 0x82124BDC;
		  /* 82124BDCh */ case    1:  		/* mr R11, R3 */
		/* 82124BDCh case    1:*/		regs.R11 = regs.R3;
		/* 82124BDCh case    1:*/		return 0x82124BE0;
		  /* 82124BE0h */ case    2:  		/* addi R10, R10, 11696 */
		/* 82124BE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DB0);
		/* 82124BE0h case    2:*/		return 0x82124BE4;
		  /* 82124BE4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124BE4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124BE4h case    3:*/		return 0x82124BE8;
		  /* 82124BE8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124BE8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124BE8h case    4:*/		return 0x82124BEC;
		  /* 82124BECh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124BECh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124BECh case    5:*/		return 0x82124BF0;
		  /* 82124BF0h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124BF0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124BF0h case    6:*/		return 0x82124BF4;
		  /* 82124BF4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124BF4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124C08;  }
		/* 82124BF4h case    7:*/		return 0x82124BF8;
		  /* 82124BF8h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124BF8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124BF8h case    8:*/		return 0x82124BFC;
		  /* 82124BFCh */ case    9:  		/* addi R10, R10, 1 */
		/* 82124BFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124BFCh case    9:*/		return 0x82124C00;
		  /* 82124C00h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124C00h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124C00h case   10:*/		return 0x82124C04;
		  /* 82124C04h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124C04h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124BE4;  }
		/* 82124C04h case   11:*/		return 0x82124C08;
	}
	return 0x82124C08;
} // Block from 82124BD8h-82124C08h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C08);
		  /* 82124C08h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124C08h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124C08h case    0:*/		return 0x82124C0C;
		  /* 82124C0Ch */ case    1:  		/* bc 12, CR0_EQ, -7336 */
		/* 82124C0Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82124C0Ch case    1:*/		return 0x82124C10;
		  /* 82124C10h */ case    2:  		/* mr R10, R28 */
		/* 82124C10h case    2:*/		regs.R10 = regs.R28;
		/* 82124C10h case    2:*/		return 0x82124C14;
		  /* 82124C14h */ case    3:  		/* mr R11, R3 */
		/* 82124C14h case    3:*/		regs.R11 = regs.R3;
		/* 82124C14h case    3:*/		return 0x82124C18;
		  /* 82124C18h */ case    4:  		/* lbz R9, <#[R11]> */
		/* 82124C18h case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124C18h case    4:*/		return 0x82124C1C;
		  /* 82124C1Ch */ case    5:  		/* lbz R8, <#[R10]> */
		/* 82124C1Ch case    5:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124C1Ch case    5:*/		return 0x82124C20;
		  /* 82124C20h */ case    6:  		/* cmpwi CR0, R9, 0 */
		/* 82124C20h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124C20h case    6:*/		return 0x82124C24;
		  /* 82124C24h */ case    7:  		/* subf R9, R8, R9 */
		/* 82124C24h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124C24h case    7:*/		return 0x82124C28;
		  /* 82124C28h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 82124C28h case    8:*/		if ( regs.CR[0].eq ) { return 0x82124C3C;  }
		/* 82124C28h case    8:*/		return 0x82124C2C;
		  /* 82124C2Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 82124C2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124C2Ch case    9:*/		return 0x82124C30;
		  /* 82124C30h */ case   10:  		/* addi R10, R10, 1 */
		/* 82124C30h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124C30h case   10:*/		return 0x82124C34;
		  /* 82124C34h */ case   11:  		/* cmpwi CR6, R9, 0 */
		/* 82124C34h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124C34h case   11:*/		return 0x82124C38;
		  /* 82124C38h */ case   12:  		/* bc 12, CR6_EQ, -32 */
		/* 82124C38h case   12:*/		if ( regs.CR[6].eq ) { return 0x82124C18;  }
		/* 82124C38h case   12:*/		return 0x82124C3C;
	}
	return 0x82124C3C;
} // Block from 82124C08h-82124C3Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82124C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C3C);
		  /* 82124C3Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124C3Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124C3Ch case    0:*/		return 0x82124C40;
		  /* 82124C40h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124C40h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124C4C;  }
		/* 82124C40h case    1:*/		return 0x82124C44;
	}
	return 0x82124C44;
} // Block from 82124C3Ch-82124C44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82124C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C44);
		  /* 82124C44h */ case    0:  		/* li R3, 330 */
		/* 82124C44h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14A);
		/* 82124C44h case    0:*/		return 0x82124C48;
		  /* 82124C48h */ case    1:  		/* b -7456 */
		/* 82124C48h case    1:*/		return 0x82122F28;
		/* 82124C48h case    1:*/		return 0x82124C4C;
	}
	return 0x82124C4C;
} // Block from 82124C44h-82124C4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82124C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C4C);
		  /* 82124C4Ch */ case    0:  		/* lis R10, -32253 */
		/* 82124C4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124C4Ch case    0:*/		return 0x82124C50;
		  /* 82124C50h */ case    1:  		/* mr R11, R3 */
		/* 82124C50h case    1:*/		regs.R11 = regs.R3;
		/* 82124C50h case    1:*/		return 0x82124C54;
		  /* 82124C54h */ case    2:  		/* addi R10, R10, 9576 */
		/* 82124C54h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2568);
		/* 82124C54h case    2:*/		return 0x82124C58;
		  /* 82124C58h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124C58h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124C58h case    3:*/		return 0x82124C5C;
		  /* 82124C5Ch */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124C5Ch case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124C5Ch case    4:*/		return 0x82124C60;
		  /* 82124C60h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124C60h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124C60h case    5:*/		return 0x82124C64;
		  /* 82124C64h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124C64h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124C64h case    6:*/		return 0x82124C68;
		  /* 82124C68h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124C68h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124C7C;  }
		/* 82124C68h case    7:*/		return 0x82124C6C;
		  /* 82124C6Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82124C6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124C6Ch case    8:*/		return 0x82124C70;
		  /* 82124C70h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124C70h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124C70h case    9:*/		return 0x82124C74;
		  /* 82124C74h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124C74h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124C74h case   10:*/		return 0x82124C78;
		  /* 82124C78h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124C78h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124C58;  }
		/* 82124C78h case   11:*/		return 0x82124C7C;
	}
	return 0x82124C7C;
} // Block from 82124C4Ch-82124C7Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C7C);
		  /* 82124C7Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124C7Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124C7Ch case    0:*/		return 0x82124C80;
		  /* 82124C80h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124C80h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124C8C;  }
		/* 82124C80h case    1:*/		return 0x82124C84;
		  /* 82124C84h */ case    2:  		/* li R3, 331 */
		/* 82124C84h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14B);
		/* 82124C84h case    2:*/		return 0x82124C88;
		  /* 82124C88h */ case    3:  		/* b -7520 */
		/* 82124C88h case    3:*/		return 0x82122F28;
		/* 82124C88h case    3:*/		return 0x82124C8C;
	}
	return 0x82124C8C;
} // Block from 82124C7Ch-82124C8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124C8C);
		  /* 82124C8Ch */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 82124C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82124C8Ch case    0:*/		return 0x82124C90;
		  /* 82124C90h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82124C90h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82124C90h case    1:*/		return 0x82124C94;
		  /* 82124C94h */ case    2:  		/* bc 12, CR6_EQ, -5324 */
		/* 82124C94h case    2:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82124C94h case    2:*/		return 0x82124C98;
		  /* 82124C98h */ case    3:  		/* lis R10, -32255 */
		/* 82124C98h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82124C98h case    3:*/		return 0x82124C9C;
		  /* 82124C9Ch */ case    4:  		/* mr R11, R3 */
		/* 82124C9Ch case    4:*/		regs.R11 = regs.R3;
		/* 82124C9Ch case    4:*/		return 0x82124CA0;
		  /* 82124CA0h */ case    5:  		/* addi R10, R10, 12400 */
		/* 82124CA0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3070);
		/* 82124CA0h case    5:*/		return 0x82124CA4;
		  /* 82124CA4h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 82124CA4h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124CA4h case    6:*/		return 0x82124CA8;
		  /* 82124CA8h */ case    7:  		/* lbz R8, <#[R10]> */
		/* 82124CA8h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124CA8h case    7:*/		return 0x82124CAC;
		  /* 82124CACh */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 82124CACh case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124CACh case    8:*/		return 0x82124CB0;
		  /* 82124CB0h */ case    9:  		/* subf R9, R8, R9 */
		/* 82124CB0h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124CB0h case    9:*/		return 0x82124CB4;
		  /* 82124CB4h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 82124CB4h case   10:*/		if ( regs.CR[0].eq ) { return 0x82124CC8;  }
		/* 82124CB4h case   10:*/		return 0x82124CB8;
		  /* 82124CB8h */ case   11:  		/* addi R11, R11, 1 */
		/* 82124CB8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124CB8h case   11:*/		return 0x82124CBC;
		  /* 82124CBCh */ case   12:  		/* addi R10, R10, 1 */
		/* 82124CBCh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124CBCh case   12:*/		return 0x82124CC0;
		  /* 82124CC0h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 82124CC0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124CC0h case   13:*/		return 0x82124CC4;
		  /* 82124CC4h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 82124CC4h case   14:*/		if ( regs.CR[6].eq ) { return 0x82124CA4;  }
		/* 82124CC4h case   14:*/		return 0x82124CC8;
	}
	return 0x82124CC8;
} // Block from 82124C8Ch-82124CC8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82124CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124CC8);
		  /* 82124CC8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124CC8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124CC8h case    0:*/		return 0x82124CCC;
		  /* 82124CCCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124CCCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124CD8;  }
		/* 82124CCCh case    1:*/		return 0x82124CD0;
		  /* 82124CD0h */ case    2:  		/* li R3, 332 */
		/* 82124CD0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14C);
		/* 82124CD0h case    2:*/		return 0x82124CD4;
		  /* 82124CD4h */ case    3:  		/* b -7596 */
		/* 82124CD4h case    3:*/		return 0x82122F28;
		/* 82124CD4h case    3:*/		return 0x82124CD8;
	}
	return 0x82124CD8;
} // Block from 82124CC8h-82124CD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124CD8);
		  /* 82124CD8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82124CD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82124CD8h case    0:*/		return 0x82124CDC;
		  /* 82124CDCh */ case    1:  		/* lis R10, -32253 */
		/* 82124CDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124CDCh case    1:*/		return 0x82124CE0;
		  /* 82124CE0h */ case    2:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82124CE0h case    2:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82124CE0h case    2:*/		return 0x82124CE4;
		  /* 82124CE4h */ case    3:  		/* mr R11, R3 */
		/* 82124CE4h case    3:*/		regs.R11 = regs.R3;
		/* 82124CE4h case    3:*/		return 0x82124CE8;
		  /* 82124CE8h */ case    4:  		/* addi R10, R10, 11684 */
		/* 82124CE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2DA4);
		/* 82124CE8h case    4:*/		return 0x82124CEC;
		  /* 82124CECh */ case    5:  		/* bc 4, CR0_EQ, 248 */
		/* 82124CECh case    5:*/		if ( !regs.CR[0].eq ) { return 0x82124DE4;  }
		/* 82124CECh case    5:*/		return 0x82124CF0;
		  /* 82124CF0h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 82124CF0h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124CF0h case    6:*/		return 0x82124CF4;
		  /* 82124CF4h */ case    7:  		/* lbz R8, <#[R10]> */
		/* 82124CF4h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124CF4h case    7:*/		return 0x82124CF8;
		  /* 82124CF8h */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 82124CF8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124CF8h case    8:*/		return 0x82124CFC;
		  /* 82124CFCh */ case    9:  		/* subf R9, R8, R9 */
		/* 82124CFCh case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124CFCh case    9:*/		return 0x82124D00;
		  /* 82124D00h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 82124D00h case   10:*/		if ( regs.CR[0].eq ) { return 0x82124D14;  }
		/* 82124D00h case   10:*/		return 0x82124D04;
		  /* 82124D04h */ case   11:  		/* addi R11, R11, 1 */
		/* 82124D04h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124D04h case   11:*/		return 0x82124D08;
		  /* 82124D08h */ case   12:  		/* addi R10, R10, 1 */
		/* 82124D08h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124D08h case   12:*/		return 0x82124D0C;
		  /* 82124D0Ch */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 82124D0Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124D0Ch case   13:*/		return 0x82124D10;
		  /* 82124D10h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 82124D10h case   14:*/		if ( regs.CR[6].eq ) { return 0x82124CF0;  }
		/* 82124D10h case   14:*/		return 0x82124D14;
	}
	return 0x82124D14;
} // Block from 82124CD8h-82124D14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82124D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124D14);
		  /* 82124D14h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124D14h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124D14h case    0:*/		return 0x82124D18;
		  /* 82124D18h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124D18h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124D24;  }
		/* 82124D18h case    1:*/		return 0x82124D1C;
		  /* 82124D1Ch */ case    2:  		/* li R3, 333 */
		/* 82124D1Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14D);
		/* 82124D1Ch case    2:*/		return 0x82124D20;
		  /* 82124D20h */ case    3:  		/* b -7672 */
		/* 82124D20h case    3:*/		return 0x82122F28;
		/* 82124D20h case    3:*/		return 0x82124D24;
	}
	return 0x82124D24;
} // Block from 82124D14h-82124D24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124D24);
		  /* 82124D24h */ case    0:  		/* lis R10, -32253 */
		/* 82124D24h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124D24h case    0:*/		return 0x82124D28;
		  /* 82124D28h */ case    1:  		/* mr R11, R3 */
		/* 82124D28h case    1:*/		regs.R11 = regs.R3;
		/* 82124D28h case    1:*/		return 0x82124D2C;
		  /* 82124D2Ch */ case    2:  		/* addi R10, R10, 11672 */
		/* 82124D2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D98);
		/* 82124D2Ch case    2:*/		return 0x82124D30;
		  /* 82124D30h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124D30h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124D30h case    3:*/		return 0x82124D34;
		  /* 82124D34h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124D34h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124D34h case    4:*/		return 0x82124D38;
		  /* 82124D38h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124D38h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124D38h case    5:*/		return 0x82124D3C;
		  /* 82124D3Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 82124D3Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124D3Ch case    6:*/		return 0x82124D40;
		  /* 82124D40h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124D40h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124D54;  }
		/* 82124D40h case    7:*/		return 0x82124D44;
		  /* 82124D44h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124D44h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124D44h case    8:*/		return 0x82124D48;
		  /* 82124D48h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124D48h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124D48h case    9:*/		return 0x82124D4C;
		  /* 82124D4Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124D4Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124D4Ch case   10:*/		return 0x82124D50;
		  /* 82124D50h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124D50h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124D30;  }
		/* 82124D50h case   11:*/		return 0x82124D54;
	}
	return 0x82124D54;
} // Block from 82124D24h-82124D54h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124D54);
		  /* 82124D54h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124D54h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124D54h case    0:*/		return 0x82124D58;
		  /* 82124D58h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124D58h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124D64;  }
		/* 82124D58h case    1:*/		return 0x82124D5C;
		  /* 82124D5Ch */ case    2:  		/* li R3, 335 */
		/* 82124D5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14F);
		/* 82124D5Ch case    2:*/		return 0x82124D60;
		  /* 82124D60h */ case    3:  		/* b -7736 */
		/* 82124D60h case    3:*/		return 0x82122F28;
		/* 82124D60h case    3:*/		return 0x82124D64;
	}
	return 0x82124D64;
} // Block from 82124D54h-82124D64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124D64);
		  /* 82124D64h */ case    0:  		/* lis R10, -32253 */
		/* 82124D64h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124D64h case    0:*/		return 0x82124D68;
		  /* 82124D68h */ case    1:  		/* mr R11, R3 */
		/* 82124D68h case    1:*/		regs.R11 = regs.R3;
		/* 82124D68h case    1:*/		return 0x82124D6C;
		  /* 82124D6Ch */ case    2:  		/* addi R10, R10, 11660 */
		/* 82124D6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D8C);
		/* 82124D6Ch case    2:*/		return 0x82124D70;
		  /* 82124D70h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124D70h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124D70h case    3:*/		return 0x82124D74;
		  /* 82124D74h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124D74h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124D74h case    4:*/		return 0x82124D78;
		  /* 82124D78h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124D78h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124D78h case    5:*/		return 0x82124D7C;
		  /* 82124D7Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 82124D7Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124D7Ch case    6:*/		return 0x82124D80;
		  /* 82124D80h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124D80h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124D94;  }
		/* 82124D80h case    7:*/		return 0x82124D84;
		  /* 82124D84h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124D84h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124D84h case    8:*/		return 0x82124D88;
		  /* 82124D88h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124D88h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124D88h case    9:*/		return 0x82124D8C;
		  /* 82124D8Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124D8Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124D8Ch case   10:*/		return 0x82124D90;
		  /* 82124D90h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124D90h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124D70;  }
		/* 82124D90h case   11:*/		return 0x82124D94;
	}
	return 0x82124D94;
} // Block from 82124D64h-82124D94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124D94);
		  /* 82124D94h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124D94h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124D94h case    0:*/		return 0x82124D98;
		  /* 82124D98h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124D98h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124DA4;  }
		/* 82124D98h case    1:*/		return 0x82124D9C;
		  /* 82124D9Ch */ case    2:  		/* li R3, 337 */
		/* 82124D9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x151);
		/* 82124D9Ch case    2:*/		return 0x82124DA0;
		  /* 82124DA0h */ case    3:  		/* b -7800 */
		/* 82124DA0h case    3:*/		return 0x82122F28;
		/* 82124DA0h case    3:*/		return 0x82124DA4;
	}
	return 0x82124DA4;
} // Block from 82124D94h-82124DA4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124DA4);
		  /* 82124DA4h */ case    0:  		/* lis R10, -32253 */
		/* 82124DA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124DA4h case    0:*/		return 0x82124DA8;
		  /* 82124DA8h */ case    1:  		/* mr R11, R3 */
		/* 82124DA8h case    1:*/		regs.R11 = regs.R3;
		/* 82124DA8h case    1:*/		return 0x82124DAC;
		  /* 82124DACh */ case    2:  		/* addi R10, R10, 11648 */
		/* 82124DACh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D80);
		/* 82124DACh case    2:*/		return 0x82124DB0;
		  /* 82124DB0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124DB0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124DB0h case    3:*/		return 0x82124DB4;
		  /* 82124DB4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124DB4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124DB4h case    4:*/		return 0x82124DB8;
		  /* 82124DB8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124DB8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124DB8h case    5:*/		return 0x82124DBC;
		  /* 82124DBCh */ case    6:  		/* subf R9, R8, R9 */
		/* 82124DBCh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124DBCh case    6:*/		return 0x82124DC0;
		  /* 82124DC0h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124DC0h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124DD4;  }
		/* 82124DC0h case    7:*/		return 0x82124DC4;
		  /* 82124DC4h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124DC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124DC4h case    8:*/		return 0x82124DC8;
		  /* 82124DC8h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124DC8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124DC8h case    9:*/		return 0x82124DCC;
		  /* 82124DCCh */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124DCCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124DCCh case   10:*/		return 0x82124DD0;
		  /* 82124DD0h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124DD0h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124DB0;  }
		/* 82124DD0h case   11:*/		return 0x82124DD4;
	}
	return 0x82124DD4;
} // Block from 82124DA4h-82124DD4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124DD4);
		  /* 82124DD4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124DD4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124DD4h case    0:*/		return 0x82124DD8;
		  /* 82124DD8h */ case    1:  		/* bc 4, CR0_EQ, -5648 */
		/* 82124DD8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82124DD8h case    1:*/		return 0x82124DDC;
		  /* 82124DDCh */ case    2:  		/* li R3, 338 */
		/* 82124DDCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x152);
		/* 82124DDCh case    2:*/		return 0x82124DE0;
		  /* 82124DE0h */ case    3:  		/* b -7864 */
		/* 82124DE0h case    3:*/		return 0x82122F28;
		/* 82124DE0h case    3:*/		return 0x82124DE4;
	}
	return 0x82124DE4;
} // Block from 82124DD4h-82124DE4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124DE4);
		  /* 82124DE4h */ case    0:  		/* lbz R9, <#[R11]> */
		/* 82124DE4h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124DE4h case    0:*/		return 0x82124DE8;
		  /* 82124DE8h */ case    1:  		/* lbz R8, <#[R10]> */
		/* 82124DE8h case    1:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124DE8h case    1:*/		return 0x82124DEC;
		  /* 82124DECh */ case    2:  		/* cmpwi CR0, R9, 0 */
		/* 82124DECh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124DECh case    2:*/		return 0x82124DF0;
		  /* 82124DF0h */ case    3:  		/* subf R9, R8, R9 */
		/* 82124DF0h case    3:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124DF0h case    3:*/		return 0x82124DF4;
		  /* 82124DF4h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 82124DF4h case    4:*/		if ( regs.CR[0].eq ) { return 0x82124E08;  }
		/* 82124DF4h case    4:*/		return 0x82124DF8;
		  /* 82124DF8h */ case    5:  		/* addi R11, R11, 1 */
		/* 82124DF8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124DF8h case    5:*/		return 0x82124DFC;
		  /* 82124DFCh */ case    6:  		/* addi R10, R10, 1 */
		/* 82124DFCh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124DFCh case    6:*/		return 0x82124E00;
		  /* 82124E00h */ case    7:  		/* cmpwi CR6, R9, 0 */
		/* 82124E00h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124E00h case    7:*/		return 0x82124E04;
		  /* 82124E04h */ case    8:  		/* bc 12, CR6_EQ, -32 */
		/* 82124E04h case    8:*/		if ( regs.CR[6].eq ) { return 0x82124DE4;  }
		/* 82124E04h case    8:*/		return 0x82124E08;
	}
	return 0x82124E08;
} // Block from 82124DE4h-82124E08h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82124E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124E08);
		  /* 82124E08h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124E08h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124E08h case    0:*/		return 0x82124E0C;
		  /* 82124E0Ch */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 82124E0Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124E28;  }
		/* 82124E0Ch case    1:*/		return 0x82124E10;
		  /* 82124E10h */ case    2:  		/* lis R11, -32253 */
		/* 82124E10h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82124E10h case    2:*/		return 0x82124E14;
		  /* 82124E14h */ case    3:  		/* li R5, 3086 */
		/* 82124E14h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 82124E14h case    3:*/		return 0x82124E18;
		  /* 82124E18h */ case    4:  		/* addi R6, R11, 11584 */
		/* 82124E18h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2D40);
		/* 82124E18h case    4:*/		return 0x82124E1C;
		  /* 82124E1Ch */ case    5:  		/* mr R4, R30 */
		/* 82124E1Ch case    5:*/		regs.R4 = regs.R30;
		/* 82124E1Ch case    5:*/		return 0x82124E20;
		  /* 82124E20h */ case    6:  		/* mr R3, R31 */
		/* 82124E20h case    6:*/		regs.R3 = regs.R31;
		/* 82124E20h case    6:*/		return 0x82124E24;
		  /* 82124E24h */ case    7:  		/* bl -46468 */
		/* 82124E24h case    7:*/		regs.LR = 0x82124E28; return 0x821198A0;
		/* 82124E24h case    7:*/		return 0x82124E28;
	}
	return 0x82124E28;
} // Block from 82124E08h-82124E28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82124E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124E28);
		  /* 82124E28h */ case    0:  		/* lis R10, -32253 */
		/* 82124E28h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124E28h case    0:*/		return 0x82124E2C;
		  /* 82124E2Ch */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 82124E2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82124E2Ch case    1:*/		return 0x82124E30;
		  /* 82124E30h */ case    2:  		/* addi R10, R10, 11672 */
		/* 82124E30h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D98);
		/* 82124E30h case    2:*/		return 0x82124E34;
		  /* 82124E34h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124E34h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124E34h case    3:*/		return 0x82124E38;
		  /* 82124E38h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124E38h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124E38h case    4:*/		return 0x82124E3C;
		  /* 82124E3Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124E3Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124E3Ch case    5:*/		return 0x82124E40;
		  /* 82124E40h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124E40h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124E40h case    6:*/		return 0x82124E44;
		  /* 82124E44h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124E44h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124E58;  }
		/* 82124E44h case    7:*/		return 0x82124E48;
		  /* 82124E48h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124E48h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124E48h case    8:*/		return 0x82124E4C;
		  /* 82124E4Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82124E4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124E4Ch case    9:*/		return 0x82124E50;
		  /* 82124E50h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124E50h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124E50h case   10:*/		return 0x82124E54;
		  /* 82124E54h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124E54h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124E34;  }
		/* 82124E54h case   11:*/		return 0x82124E58;
	}
	return 0x82124E58;
} // Block from 82124E28h-82124E58h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124E58);
		  /* 82124E58h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124E58h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124E58h case    0:*/		return 0x82124E5C;
		  /* 82124E5Ch */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 82124E5Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124E78;  }
		/* 82124E5Ch case    1:*/		return 0x82124E60;
		  /* 82124E60h */ case    2:  		/* lis R11, -32253 */
		/* 82124E60h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82124E60h case    2:*/		return 0x82124E64;
		  /* 82124E64h */ case    3:  		/* li R5, 3086 */
		/* 82124E64h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 82124E64h case    3:*/		return 0x82124E68;
		  /* 82124E68h */ case    4:  		/* addi R6, R11, 11520 */
		/* 82124E68h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2D00);
		/* 82124E68h case    4:*/		return 0x82124E6C;
		  /* 82124E6Ch */ case    5:  		/* mr R4, R30 */
		/* 82124E6Ch case    5:*/		regs.R4 = regs.R30;
		/* 82124E6Ch case    5:*/		return 0x82124E70;
		  /* 82124E70h */ case    6:  		/* mr R3, R31 */
		/* 82124E70h case    6:*/		regs.R3 = regs.R31;
		/* 82124E70h case    6:*/		return 0x82124E74;
		  /* 82124E74h */ case    7:  		/* bl -46548 */
		/* 82124E74h case    7:*/		regs.LR = 0x82124E78; return 0x821198A0;
		/* 82124E74h case    7:*/		return 0x82124E78;
	}
	return 0x82124E78;
} // Block from 82124E58h-82124E78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82124E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124E78);
		  /* 82124E78h */ case    0:  		/* lis R10, -32253 */
		/* 82124E78h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124E78h case    0:*/		return 0x82124E7C;
		  /* 82124E7Ch */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 82124E7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82124E7Ch case    1:*/		return 0x82124E80;
		  /* 82124E80h */ case    2:  		/* addi R10, R10, 11660 */
		/* 82124E80h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D8C);
		/* 82124E80h case    2:*/		return 0x82124E84;
		  /* 82124E84h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124E84h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124E84h case    3:*/		return 0x82124E88;
		  /* 82124E88h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124E88h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124E88h case    4:*/		return 0x82124E8C;
		  /* 82124E8Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124E8Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124E8Ch case    5:*/		return 0x82124E90;
		  /* 82124E90h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124E90h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124E90h case    6:*/		return 0x82124E94;
		  /* 82124E94h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124E94h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124EA8;  }
		/* 82124E94h case    7:*/		return 0x82124E98;
		  /* 82124E98h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124E98h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124E98h case    8:*/		return 0x82124E9C;
		  /* 82124E9Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 82124E9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124E9Ch case    9:*/		return 0x82124EA0;
		  /* 82124EA0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124EA0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124EA0h case   10:*/		return 0x82124EA4;
		  /* 82124EA4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124EA4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124E84;  }
		/* 82124EA4h case   11:*/		return 0x82124EA8;
	}
	return 0x82124EA8;
} // Block from 82124E78h-82124EA8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124EA8);
		  /* 82124EA8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124EA8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124EA8h case    0:*/		return 0x82124EAC;
		  /* 82124EACh */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 82124EACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124EC8;  }
		/* 82124EACh case    1:*/		return 0x82124EB0;
		  /* 82124EB0h */ case    2:  		/* lis R11, -32253 */
		/* 82124EB0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82124EB0h case    2:*/		return 0x82124EB4;
		  /* 82124EB4h */ case    3:  		/* li R5, 3086 */
		/* 82124EB4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 82124EB4h case    3:*/		return 0x82124EB8;
		  /* 82124EB8h */ case    4:  		/* addi R6, R11, 11456 */
		/* 82124EB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2CC0);
		/* 82124EB8h case    4:*/		return 0x82124EBC;
		  /* 82124EBCh */ case    5:  		/* mr R4, R30 */
		/* 82124EBCh case    5:*/		regs.R4 = regs.R30;
		/* 82124EBCh case    5:*/		return 0x82124EC0;
		  /* 82124EC0h */ case    6:  		/* mr R3, R31 */
		/* 82124EC0h case    6:*/		regs.R3 = regs.R31;
		/* 82124EC0h case    6:*/		return 0x82124EC4;
		  /* 82124EC4h */ case    7:  		/* bl -46628 */
		/* 82124EC4h case    7:*/		regs.LR = 0x82124EC8; return 0x821198A0;
		/* 82124EC4h case    7:*/		return 0x82124EC8;
	}
	return 0x82124EC8;
} // Block from 82124EA8h-82124EC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82124EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124EC8);
		  /* 82124EC8h */ case    0:  		/* lis R10, -32253 */
		/* 82124EC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124EC8h case    0:*/		return 0x82124ECC;
		  /* 82124ECCh */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 82124ECCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82124ECCh case    1:*/		return 0x82124ED0;
		  /* 82124ED0h */ case    2:  		/* addi R10, R10, 11648 */
		/* 82124ED0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D80);
		/* 82124ED0h case    2:*/		return 0x82124ED4;
		  /* 82124ED4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124ED4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124ED4h case    3:*/		return 0x82124ED8;
		  /* 82124ED8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124ED8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124ED8h case    4:*/		return 0x82124EDC;
		  /* 82124EDCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124EDCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124EDCh case    5:*/		return 0x82124EE0;
		  /* 82124EE0h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124EE0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124EE0h case    6:*/		return 0x82124EE4;
		  /* 82124EE4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124EE4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82124EF8;  }
		/* 82124EE4h case    7:*/		return 0x82124EE8;
		  /* 82124EE8h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124EE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124EE8h case    8:*/		return 0x82124EEC;
		  /* 82124EECh */ case    9:  		/* addi R10, R10, 1 */
		/* 82124EECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124EECh case    9:*/		return 0x82124EF0;
		  /* 82124EF0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124EF0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124EF0h case   10:*/		return 0x82124EF4;
		  /* 82124EF4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124EF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82124ED4;  }
		/* 82124EF4h case   11:*/		return 0x82124EF8;
	}
	return 0x82124EF8;
} // Block from 82124EC8h-82124EF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124EF8);
		  /* 82124EF8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124EF8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124EF8h case    0:*/		return 0x82124EFC;
		  /* 82124EFCh */ case    1:  		/* bc 4, CR0_EQ, -5940 */
		/* 82124EFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82124EFCh case    1:*/		return 0x82124F00;
		  /* 82124F00h */ case    2:  		/* lis R11, -32253 */
		/* 82124F00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82124F00h case    2:*/		return 0x82124F04;
		  /* 82124F04h */ case    3:  		/* addi R6, R11, 11392 */
		/* 82124F04h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2C80);
		/* 82124F04h case    3:*/		return 0x82124F08;
		  /* 82124F08h */ case    4:  		/* b -3276 */
		/* 82124F08h case    4:*/		return 0x8212423C;
		/* 82124F08h case    4:*/		return 0x82124F0C;
		  /* 82124F0Ch */ case    5:  		/* lwz R11, <#[R31 + 92]> */
		/* 82124F0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82124F0Ch case    5:*/		return 0x82124F10;
		  /* 82124F10h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82124F10h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82124F10h case    6:*/		return 0x82124F14;
		  /* 82124F14h */ case    7:  		/* bc 12, CR6_EQ, -5964 */
		/* 82124F14h case    7:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82124F14h case    7:*/		return 0x82124F18;
		  /* 82124F18h */ case    8:  		/* lis R10, -32253 */
		/* 82124F18h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124F18h case    8:*/		return 0x82124F1C;
		  /* 82124F1Ch */ case    9:  		/* mr R11, R3 */
		/* 82124F1Ch case    9:*/		regs.R11 = regs.R3;
		/* 82124F1Ch case    9:*/		return 0x82124F20;
		  /* 82124F20h */ case   10:  		/* addi R10, R10, 8684 */
		/* 82124F20h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21EC);
		/* 82124F20h case   10:*/		return 0x82124F24;
		  /* 82124F24h */ case   11:  		/* lbz R9, <#[R11]> */
		/* 82124F24h case   11:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124F24h case   11:*/		return 0x82124F28;
		  /* 82124F28h */ case   12:  		/* lbz R8, <#[R10]> */
		/* 82124F28h case   12:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124F28h case   12:*/		return 0x82124F2C;
		  /* 82124F2Ch */ case   13:  		/* cmpwi CR0, R9, 0 */
		/* 82124F2Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124F2Ch case   13:*/		return 0x82124F30;
		  /* 82124F30h */ case   14:  		/* subf R9, R8, R9 */
		/* 82124F30h case   14:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124F30h case   14:*/		return 0x82124F34;
		  /* 82124F34h */ case   15:  		/* bc 12, CR0_EQ, 20 */
		/* 82124F34h case   15:*/		if ( regs.CR[0].eq ) { return 0x82124F48;  }
		/* 82124F34h case   15:*/		return 0x82124F38;
		  /* 82124F38h */ case   16:  		/* addi R11, R11, 1 */
		/* 82124F38h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124F38h case   16:*/		return 0x82124F3C;
		  /* 82124F3Ch */ case   17:  		/* addi R10, R10, 1 */
		/* 82124F3Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124F3Ch case   17:*/		return 0x82124F40;
		  /* 82124F40h */ case   18:  		/* cmpwi CR6, R9, 0 */
		/* 82124F40h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124F40h case   18:*/		return 0x82124F44;
		  /* 82124F44h */ case   19:  		/* bc 12, CR6_EQ, -32 */
		/* 82124F44h case   19:*/		if ( regs.CR[6].eq ) { return 0x82124F24;  }
		/* 82124F44h case   19:*/		return 0x82124F48;
	}
	return 0x82124F48;
} // Block from 82124EF8h-82124F48h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82124F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124F48);
		  /* 82124F48h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124F48h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124F48h case    0:*/		return 0x82124F4C;
		  /* 82124F4Ch */ case    1:  		/* bc 12, CR0_EQ, -560 */
		/* 82124F4Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82124D1C;  }
		/* 82124F4Ch case    1:*/		return 0x82124F50;
		  /* 82124F50h */ case    2:  		/* lis R10, -32253 */
		/* 82124F50h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124F50h case    2:*/		return 0x82124F54;
		  /* 82124F54h */ case    3:  		/* mr R11, R3 */
		/* 82124F54h case    3:*/		regs.R11 = regs.R3;
		/* 82124F54h case    3:*/		return 0x82124F58;
		  /* 82124F58h */ case    4:  		/* addi R10, R10, 8632 */
		/* 82124F58h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21B8);
		/* 82124F58h case    4:*/		return 0x82124F5C;
		  /* 82124F5Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124F5Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124F5Ch case    5:*/		return 0x82124F60;
		  /* 82124F60h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124F60h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124F60h case    6:*/		return 0x82124F64;
		  /* 82124F64h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124F64h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124F64h case    7:*/		return 0x82124F68;
		  /* 82124F68h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124F68h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124F68h case    8:*/		return 0x82124F6C;
		  /* 82124F6Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124F6Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82124F80;  }
		/* 82124F6Ch case    9:*/		return 0x82124F70;
		  /* 82124F70h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124F70h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124F70h case   10:*/		return 0x82124F74;
		  /* 82124F74h */ case   11:  		/* addi R10, R10, 1 */
		/* 82124F74h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124F74h case   11:*/		return 0x82124F78;
		  /* 82124F78h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124F78h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124F78h case   12:*/		return 0x82124F7C;
		  /* 82124F7Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124F7Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82124F5C;  }
		/* 82124F7Ch case   13:*/		return 0x82124F80;
	}
	return 0x82124F80;
} // Block from 82124F48h-82124F80h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124F80);
		  /* 82124F80h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124F80h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124F80h case    0:*/		return 0x82124F84;
		  /* 82124F84h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124F84h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82124F90;  }
		/* 82124F84h case    1:*/		return 0x82124F88;
		  /* 82124F88h */ case    2:  		/* li R3, 334 */
		/* 82124F88h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14E);
		/* 82124F88h case    2:*/		return 0x82124F8C;
		  /* 82124F8Ch */ case    3:  		/* b -8292 */
		/* 82124F8Ch case    3:*/		return 0x82122F28;
		/* 82124F8Ch case    3:*/		return 0x82124F90;
	}
	return 0x82124F90;
} // Block from 82124F80h-82124F90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82124F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124F90);
		  /* 82124F90h */ case    0:  		/* lis R10, -32253 */
		/* 82124F90h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124F90h case    0:*/		return 0x82124F94;
		  /* 82124F94h */ case    1:  		/* mr R11, R3 */
		/* 82124F94h case    1:*/		regs.R11 = regs.R3;
		/* 82124F94h case    1:*/		return 0x82124F98;
		  /* 82124F98h */ case    2:  		/* addi R10, R10, 8672 */
		/* 82124F98h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21E0);
		/* 82124F98h case    2:*/		return 0x82124F9C;
		  /* 82124F9Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82124F9Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124F9Ch case    3:*/		return 0x82124FA0;
		  /* 82124FA0h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82124FA0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124FA0h case    4:*/		return 0x82124FA4;
		  /* 82124FA4h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82124FA4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124FA4h case    5:*/		return 0x82124FA8;
		  /* 82124FA8h */ case    6:  		/* subf R9, R8, R9 */
		/* 82124FA8h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124FA8h case    6:*/		return 0x82124FAC;
		  /* 82124FACh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82124FACh case    7:*/		if ( regs.CR[0].eq ) { return 0x82124FC0;  }
		/* 82124FACh case    7:*/		return 0x82124FB0;
		  /* 82124FB0h */ case    8:  		/* addi R11, R11, 1 */
		/* 82124FB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124FB0h case    8:*/		return 0x82124FB4;
		  /* 82124FB4h */ case    9:  		/* addi R10, R10, 1 */
		/* 82124FB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124FB4h case    9:*/		return 0x82124FB8;
		  /* 82124FB8h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82124FB8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124FB8h case   10:*/		return 0x82124FBC;
		  /* 82124FBCh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82124FBCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82124F9C;  }
		/* 82124FBCh case   11:*/		return 0x82124FC0;
	}
	return 0x82124FC0;
} // Block from 82124F90h-82124FC0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82124FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124FC0);
		  /* 82124FC0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124FC0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124FC0h case    0:*/		return 0x82124FC4;
		  /* 82124FC4h */ case    1:  		/* bc 12, CR0_EQ, -616 */
		/* 82124FC4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82124D5C;  }
		/* 82124FC4h case    1:*/		return 0x82124FC8;
		  /* 82124FC8h */ case    2:  		/* lis R10, -32253 */
		/* 82124FC8h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82124FC8h case    2:*/		return 0x82124FCC;
		  /* 82124FCCh */ case    3:  		/* mr R11, R3 */
		/* 82124FCCh case    3:*/		regs.R11 = regs.R3;
		/* 82124FCCh case    3:*/		return 0x82124FD0;
		  /* 82124FD0h */ case    4:  		/* addi R10, R10, 8616 */
		/* 82124FD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21A8);
		/* 82124FD0h case    4:*/		return 0x82124FD4;
		  /* 82124FD4h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82124FD4h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82124FD4h case    5:*/		return 0x82124FD8;
		  /* 82124FD8h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82124FD8h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82124FD8h case    6:*/		return 0x82124FDC;
		  /* 82124FDCh */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82124FDCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124FDCh case    7:*/		return 0x82124FE0;
		  /* 82124FE0h */ case    8:  		/* subf R9, R8, R9 */
		/* 82124FE0h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82124FE0h case    8:*/		return 0x82124FE4;
		  /* 82124FE4h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82124FE4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82124FF8;  }
		/* 82124FE4h case    9:*/		return 0x82124FE8;
		  /* 82124FE8h */ case   10:  		/* addi R11, R11, 1 */
		/* 82124FE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82124FE8h case   10:*/		return 0x82124FEC;
		  /* 82124FECh */ case   11:  		/* addi R10, R10, 1 */
		/* 82124FECh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82124FECh case   11:*/		return 0x82124FF0;
		  /* 82124FF0h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82124FF0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82124FF0h case   12:*/		return 0x82124FF4;
		  /* 82124FF4h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82124FF4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82124FD4;  }
		/* 82124FF4h case   13:*/		return 0x82124FF8;
	}
	return 0x82124FF8;
} // Block from 82124FC0h-82124FF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82124FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82124FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82124FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82124FF8);
		  /* 82124FF8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82124FF8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82124FF8h case    0:*/		return 0x82124FFC;
		  /* 82124FFCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82124FFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125008;  }
		/* 82124FFCh case    1:*/		return 0x82125000;
		  /* 82125000h */ case    2:  		/* li R3, 336 */
		/* 82125000h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x150);
		/* 82125000h case    2:*/		return 0x82125004;
		  /* 82125004h */ case    3:  		/* b -8412 */
		/* 82125004h case    3:*/		return 0x82122F28;
		/* 82125004h case    3:*/		return 0x82125008;
	}
	return 0x82125008;
} // Block from 82124FF8h-82125008h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125008);
		  /* 82125008h */ case    0:  		/* lis R10, -32253 */
		/* 82125008h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125008h case    0:*/		return 0x8212500C;
		  /* 8212500Ch */ case    1:  		/* mr R11, R3 */
		/* 8212500Ch case    1:*/		regs.R11 = regs.R3;
		/* 8212500Ch case    1:*/		return 0x82125010;
		  /* 82125010h */ case    2:  		/* addi R10, R10, 8660 */
		/* 82125010h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21D4);
		/* 82125010h case    2:*/		return 0x82125014;
		  /* 82125014h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82125014h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125014h case    3:*/		return 0x82125018;
		  /* 82125018h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125018h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125018h case    4:*/		return 0x8212501C;
		  /* 8212501Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212501Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212501Ch case    5:*/		return 0x82125020;
		  /* 82125020h */ case    6:  		/* subf R9, R8, R9 */
		/* 82125020h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125020h case    6:*/		return 0x82125024;
		  /* 82125024h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82125024h case    7:*/		if ( regs.CR[0].eq ) { return 0x82125038;  }
		/* 82125024h case    7:*/		return 0x82125028;
		  /* 82125028h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125028h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125028h case    8:*/		return 0x8212502C;
		  /* 8212502Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212502Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212502Ch case    9:*/		return 0x82125030;
		  /* 82125030h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82125030h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125030h case   10:*/		return 0x82125034;
		  /* 82125034h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82125034h case   11:*/		if ( regs.CR[6].eq ) { return 0x82125014;  }
		/* 82125034h case   11:*/		return 0x82125038;
	}
	return 0x82125038;
} // Block from 82125008h-82125038h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125038);
		  /* 82125038h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125038h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125038h case    0:*/		return 0x8212503C;
		  /* 8212503Ch */ case    1:  		/* bc 12, CR0_EQ, -672 */
		/* 8212503Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82124D9C;  }
		/* 8212503Ch case    1:*/		return 0x82125040;
		  /* 82125040h */ case    2:  		/* lis R10, -32253 */
		/* 82125040h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125040h case    2:*/		return 0x82125044;
		  /* 82125044h */ case    3:  		/* mr R11, R3 */
		/* 82125044h case    3:*/		regs.R11 = regs.R3;
		/* 82125044h case    3:*/		return 0x82125048;
		  /* 82125048h */ case    4:  		/* addi R10, R10, 8648 */
		/* 82125048h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21C8);
		/* 82125048h case    4:*/		return 0x8212504C;
		  /* 8212504Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 8212504Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212504Ch case    5:*/		return 0x82125050;
		  /* 82125050h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82125050h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125050h case    6:*/		return 0x82125054;
		  /* 82125054h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82125054h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125054h case    7:*/		return 0x82125058;
		  /* 82125058h */ case    8:  		/* subf R9, R8, R9 */
		/* 82125058h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125058h case    8:*/		return 0x8212505C;
		  /* 8212505Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8212505Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82125070;  }
		/* 8212505Ch case    9:*/		return 0x82125060;
		  /* 82125060h */ case   10:  		/* addi R11, R11, 1 */
		/* 82125060h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125060h case   10:*/		return 0x82125064;
		  /* 82125064h */ case   11:  		/* addi R10, R10, 1 */
		/* 82125064h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125064h case   11:*/		return 0x82125068;
		  /* 82125068h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82125068h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125068h case   12:*/		return 0x8212506C;
		  /* 8212506Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212506Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212504C;  }
		/* 8212506Ch case   13:*/		return 0x82125070;
	}
	return 0x82125070;
} // Block from 82125038h-82125070h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82125070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125070);
		  /* 82125070h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125070h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125070h case    0:*/		return 0x82125074;
		  /* 82125074h */ case    1:  		/* bc 12, CR0_EQ, -664 */
		/* 82125074h case    1:*/		if ( regs.CR[0].eq ) { return 0x82124DDC;  }
		/* 82125074h case    1:*/		return 0x82125078;
		  /* 82125078h */ case    2:  		/* lis R10, -32253 */
		/* 82125078h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125078h case    2:*/		return 0x8212507C;
		  /* 8212507Ch */ case    3:  		/* mr R11, R3 */
		/* 8212507Ch case    3:*/		regs.R11 = regs.R3;
		/* 8212507Ch case    3:*/		return 0x82125080;
		  /* 82125080h */ case    4:  		/* addi R10, R10, 8444 */
		/* 82125080h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x20FC);
		/* 82125080h case    4:*/		return 0x82125084;
		  /* 82125084h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82125084h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125084h case    5:*/		return 0x82125088;
		  /* 82125088h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82125088h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125088h case    6:*/		return 0x8212508C;
		  /* 8212508Ch */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 8212508Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212508Ch case    7:*/		return 0x82125090;
		  /* 82125090h */ case    8:  		/* subf R9, R8, R9 */
		/* 82125090h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125090h case    8:*/		return 0x82125094;
		  /* 82125094h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82125094h case    9:*/		if ( regs.CR[0].eq ) { return 0x821250A8;  }
		/* 82125094h case    9:*/		return 0x82125098;
		  /* 82125098h */ case   10:  		/* addi R11, R11, 1 */
		/* 82125098h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125098h case   10:*/		return 0x8212509C;
		  /* 8212509Ch */ case   11:  		/* addi R10, R10, 1 */
		/* 8212509Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212509Ch case   11:*/		return 0x821250A0;
		  /* 821250A0h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 821250A0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821250A0h case   12:*/		return 0x821250A4;
		  /* 821250A4h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 821250A4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82125084;  }
		/* 821250A4h case   13:*/		return 0x821250A8;
	}
	return 0x821250A8;
} // Block from 82125070h-821250A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821250A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821250A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821250A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821250A8);
		  /* 821250A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821250A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821250A8h case    0:*/		return 0x821250AC;
		  /* 821250ACh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821250ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821250B8;  }
		/* 821250ACh case    1:*/		return 0x821250B0;
		  /* 821250B0h */ case    2:  		/* li R3, 343 */
		/* 821250B0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x157);
		/* 821250B0h case    2:*/		return 0x821250B4;
		  /* 821250B4h */ case    3:  		/* b -8588 */
		/* 821250B4h case    3:*/		return 0x82122F28;
		/* 821250B4h case    3:*/		return 0x821250B8;
	}
	return 0x821250B8;
} // Block from 821250A8h-821250B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821250B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821250B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821250B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821250B8);
		  /* 821250B8h */ case    0:  		/* lis R10, -32253 */
		/* 821250B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821250B8h case    0:*/		return 0x821250BC;
		  /* 821250BCh */ case    1:  		/* mr R11, R3 */
		/* 821250BCh case    1:*/		regs.R11 = regs.R3;
		/* 821250BCh case    1:*/		return 0x821250C0;
		  /* 821250C0h */ case    2:  		/* addi R10, R10, 8604 */
		/* 821250C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x219C);
		/* 821250C0h case    2:*/		return 0x821250C4;
		  /* 821250C4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821250C4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821250C4h case    3:*/		return 0x821250C8;
		  /* 821250C8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821250C8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821250C8h case    4:*/		return 0x821250CC;
		  /* 821250CCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821250CCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821250CCh case    5:*/		return 0x821250D0;
		  /* 821250D0h */ case    6:  		/* subf R9, R8, R9 */
		/* 821250D0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821250D0h case    6:*/		return 0x821250D4;
		  /* 821250D4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821250D4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821250E8;  }
		/* 821250D4h case    7:*/		return 0x821250D8;
		  /* 821250D8h */ case    8:  		/* addi R11, R11, 1 */
		/* 821250D8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821250D8h case    8:*/		return 0x821250DC;
		  /* 821250DCh */ case    9:  		/* addi R10, R10, 1 */
		/* 821250DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821250DCh case    9:*/		return 0x821250E0;
		  /* 821250E0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821250E0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821250E0h case   10:*/		return 0x821250E4;
		  /* 821250E4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821250E4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821250C4;  }
		/* 821250E4h case   11:*/		return 0x821250E8;
	}
	return 0x821250E8;
} // Block from 821250B8h-821250E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821250E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821250E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821250E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821250E8);
		  /* 821250E8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821250E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821250E8h case    0:*/		return 0x821250EC;
		  /* 821250ECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821250ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821250F8;  }
		/* 821250ECh case    1:*/		return 0x821250F0;
		  /* 821250F0h */ case    2:  		/* li R3, 339 */
		/* 821250F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x153);
		/* 821250F0h case    2:*/		return 0x821250F4;
		  /* 821250F4h */ case    3:  		/* b -8652 */
		/* 821250F4h case    3:*/		return 0x82122F28;
		/* 821250F4h case    3:*/		return 0x821250F8;
	}
	return 0x821250F8;
} // Block from 821250E8h-821250F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821250F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821250F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821250F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821250F8);
		  /* 821250F8h */ case    0:  		/* lis R10, -32253 */
		/* 821250F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821250F8h case    0:*/		return 0x821250FC;
		  /* 821250FCh */ case    1:  		/* mr R11, R3 */
		/* 821250FCh case    1:*/		regs.R11 = regs.R3;
		/* 821250FCh case    1:*/		return 0x82125100;
		  /* 82125100h */ case    2:  		/* addi R10, R10, 11372 */
		/* 82125100h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C6C);
		/* 82125100h case    2:*/		return 0x82125104;
		  /* 82125104h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82125104h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125104h case    3:*/		return 0x82125108;
		  /* 82125108h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125108h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125108h case    4:*/		return 0x8212510C;
		  /* 8212510Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212510Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212510Ch case    5:*/		return 0x82125110;
		  /* 82125110h */ case    6:  		/* subf R9, R8, R9 */
		/* 82125110h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125110h case    6:*/		return 0x82125114;
		  /* 82125114h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82125114h case    7:*/		if ( regs.CR[0].eq ) { return 0x82125128;  }
		/* 82125114h case    7:*/		return 0x82125118;
		  /* 82125118h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125118h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125118h case    8:*/		return 0x8212511C;
		  /* 8212511Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212511Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212511Ch case    9:*/		return 0x82125120;
		  /* 82125120h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82125120h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125120h case   10:*/		return 0x82125124;
		  /* 82125124h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82125124h case   11:*/		if ( regs.CR[6].eq ) { return 0x82125104;  }
		/* 82125124h case   11:*/		return 0x82125128;
	}
	return 0x82125128;
} // Block from 821250F8h-82125128h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125128);
		  /* 82125128h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125128h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125128h case    0:*/		return 0x8212512C;
		  /* 8212512Ch */ case    1:  		/* bc 4, CR0_EQ, -6500 */
		/* 8212512Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212512Ch case    1:*/		return 0x82125130;
		  /* 82125130h */ case    2:  		/* li R3, 340 */
		/* 82125130h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x154);
		/* 82125130h case    2:*/		return 0x82125134;
		  /* 82125134h */ case    3:  		/* b -8716 */
		/* 82125134h case    3:*/		return 0x82122F28;
		/* 82125134h case    3:*/		return 0x82125138;
		  /* 82125138h */ case    4:  		/* lis R10, -32253 */
		/* 82125138h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125138h case    4:*/		return 0x8212513C;
		  /* 8212513Ch */ case    5:  		/* mr R11, R3 */
		/* 8212513Ch case    5:*/		regs.R11 = regs.R3;
		/* 8212513Ch case    5:*/		return 0x82125140;
		  /* 82125140h */ case    6:  		/* addi R10, R10, 8784 */
		/* 82125140h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2250);
		/* 82125140h case    6:*/		return 0x82125144;
		  /* 82125144h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82125144h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125144h case    7:*/		return 0x82125148;
		  /* 82125148h */ case    8:  		/* lbz R8, <#[R10]> */
		/* 82125148h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125148h case    8:*/		return 0x8212514C;
		  /* 8212514Ch */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8212514Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212514Ch case    9:*/		return 0x82125150;
		  /* 82125150h */ case   10:  		/* subf R9, R8, R9 */
		/* 82125150h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125150h case   10:*/		return 0x82125154;
		  /* 82125154h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82125154h case   11:*/		if ( regs.CR[0].eq ) { return 0x82125168;  }
		/* 82125154h case   11:*/		return 0x82125158;
		  /* 82125158h */ case   12:  		/* addi R11, R11, 1 */
		/* 82125158h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125158h case   12:*/		return 0x8212515C;
		  /* 8212515Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212515Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212515Ch case   13:*/		return 0x82125160;
		  /* 82125160h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 82125160h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125160h case   14:*/		return 0x82125164;
		  /* 82125164h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 82125164h case   15:*/		if ( regs.CR[6].eq ) { return 0x82125144;  }
		/* 82125164h case   15:*/		return 0x82125168;
	}
	return 0x82125168;
} // Block from 82125128h-82125168h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82125168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125168);
		  /* 82125168h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125168h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125168h case    0:*/		return 0x8212516C;
		  /* 8212516Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8212516Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125178;  }
		/* 8212516Ch case    1:*/		return 0x82125170;
		  /* 82125170h */ case    2:  		/* li R3, 348 */
		/* 82125170h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15C);
		/* 82125170h case    2:*/		return 0x82125174;
		  /* 82125174h */ case    3:  		/* b -8780 */
		/* 82125174h case    3:*/		return 0x82122F28;
		/* 82125174h case    3:*/		return 0x82125178;
	}
	return 0x82125178;
} // Block from 82125168h-82125178h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125178);
		  /* 82125178h */ case    0:  		/* lis R10, -32253 */
		/* 82125178h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125178h case    0:*/		return 0x8212517C;
		  /* 8212517Ch */ case    1:  		/* mr R11, R3 */
		/* 8212517Ch case    1:*/		regs.R11 = regs.R3;
		/* 8212517Ch case    1:*/		return 0x82125180;
		  /* 82125180h */ case    2:  		/* addi R10, R10, 11364 */
		/* 82125180h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C64);
		/* 82125180h case    2:*/		return 0x82125184;
		  /* 82125184h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82125184h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125184h case    3:*/		return 0x82125188;
		  /* 82125188h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125188h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125188h case    4:*/		return 0x8212518C;
		  /* 8212518Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8212518Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212518Ch case    5:*/		return 0x82125190;
		  /* 82125190h */ case    6:  		/* subf R9, R8, R9 */
		/* 82125190h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125190h case    6:*/		return 0x82125194;
		  /* 82125194h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82125194h case    7:*/		if ( regs.CR[0].eq ) { return 0x821251A8;  }
		/* 82125194h case    7:*/		return 0x82125198;
		  /* 82125198h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125198h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125198h case    8:*/		return 0x8212519C;
		  /* 8212519Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8212519Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212519Ch case    9:*/		return 0x821251A0;
		  /* 821251A0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821251A0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821251A0h case   10:*/		return 0x821251A4;
		  /* 821251A4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821251A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82125184;  }
		/* 821251A4h case   11:*/		return 0x821251A8;
	}
	return 0x821251A8;
} // Block from 82125178h-821251A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821251A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821251A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821251A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821251A8);
		  /* 821251A8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821251A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821251A8h case    0:*/		return 0x821251AC;
		  /* 821251ACh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821251ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821251B8;  }
		/* 821251ACh case    1:*/		return 0x821251B0;
		  /* 821251B0h */ case    2:  		/* li R3, 346 */
		/* 821251B0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15A);
		/* 821251B0h case    2:*/		return 0x821251B4;
		  /* 821251B4h */ case    3:  		/* b -8844 */
		/* 821251B4h case    3:*/		return 0x82122F28;
		/* 821251B4h case    3:*/		return 0x821251B8;
	}
	return 0x821251B8;
} // Block from 821251A8h-821251B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821251B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821251B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821251B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821251B8);
		  /* 821251B8h */ case    0:  		/* lis R10, -32253 */
		/* 821251B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821251B8h case    0:*/		return 0x821251BC;
		  /* 821251BCh */ case    1:  		/* mr R11, R3 */
		/* 821251BCh case    1:*/		regs.R11 = regs.R3;
		/* 821251BCh case    1:*/		return 0x821251C0;
		  /* 821251C0h */ case    2:  		/* addi R10, R10, 11356 */
		/* 821251C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C5C);
		/* 821251C0h case    2:*/		return 0x821251C4;
		  /* 821251C4h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821251C4h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821251C4h case    3:*/		return 0x821251C8;
		  /* 821251C8h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821251C8h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821251C8h case    4:*/		return 0x821251CC;
		  /* 821251CCh */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821251CCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821251CCh case    5:*/		return 0x821251D0;
		  /* 821251D0h */ case    6:  		/* subf R9, R8, R9 */
		/* 821251D0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821251D0h case    6:*/		return 0x821251D4;
		  /* 821251D4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821251D4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821251E8;  }
		/* 821251D4h case    7:*/		return 0x821251D8;
		  /* 821251D8h */ case    8:  		/* addi R11, R11, 1 */
		/* 821251D8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821251D8h case    8:*/		return 0x821251DC;
		  /* 821251DCh */ case    9:  		/* addi R10, R10, 1 */
		/* 821251DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821251DCh case    9:*/		return 0x821251E0;
		  /* 821251E0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821251E0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821251E0h case   10:*/		return 0x821251E4;
		  /* 821251E4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821251E4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821251C4;  }
		/* 821251E4h case   11:*/		return 0x821251E8;
	}
	return 0x821251E8;
} // Block from 821251B8h-821251E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821251E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821251E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821251E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821251E8);
		  /* 821251E8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821251E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821251E8h case    0:*/		return 0x821251EC;
		  /* 821251ECh */ case    1:  		/* bc 12, CR0_EQ, -8840 */
		/* 821251ECh case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 821251ECh case    1:*/		return 0x821251F0;
		  /* 821251F0h */ case    2:  		/* lis R10, -32253 */
		/* 821251F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821251F0h case    2:*/		return 0x821251F4;
		  /* 821251F4h */ case    3:  		/* mr R11, R3 */
		/* 821251F4h case    3:*/		regs.R11 = regs.R3;
		/* 821251F4h case    3:*/		return 0x821251F8;
		  /* 821251F8h */ case    4:  		/* addi R10, R10, 11348 */
		/* 821251F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C54);
		/* 821251F8h case    4:*/		return 0x821251FC;
		  /* 821251FCh */ case    5:  		/* lbz R9, <#[R11]> */
		/* 821251FCh case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821251FCh case    5:*/		return 0x82125200;
		  /* 82125200h */ case    6:  		/* lbz R8, <#[R10]> */
		/* 82125200h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125200h case    6:*/		return 0x82125204;
		  /* 82125204h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82125204h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125204h case    7:*/		return 0x82125208;
		  /* 82125208h */ case    8:  		/* subf R9, R8, R9 */
		/* 82125208h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125208h case    8:*/		return 0x8212520C;
		  /* 8212520Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8212520Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82125220;  }
		/* 8212520Ch case    9:*/		return 0x82125210;
		  /* 82125210h */ case   10:  		/* addi R11, R11, 1 */
		/* 82125210h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125210h case   10:*/		return 0x82125214;
		  /* 82125214h */ case   11:  		/* addi R10, R10, 1 */
		/* 82125214h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125214h case   11:*/		return 0x82125218;
		  /* 82125218h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82125218h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125218h case   12:*/		return 0x8212521C;
		  /* 8212521Ch */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 8212521Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821251FC;  }
		/* 8212521Ch case   13:*/		return 0x82125220;
	}
	return 0x82125220;
} // Block from 821251E8h-82125220h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82125220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125220);
		  /* 82125220h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125220h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125220h case    0:*/		return 0x82125224;
		  /* 82125224h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82125224h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125230;  }
		/* 82125224h case    1:*/		return 0x82125228;
		  /* 82125228h */ case    2:  		/* li R3, 349 */
		/* 82125228h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15D);
		/* 82125228h case    2:*/		return 0x8212522C;
		  /* 8212522Ch */ case    3:  		/* b -8964 */
		/* 8212522Ch case    3:*/		return 0x82122F28;
		/* 8212522Ch case    3:*/		return 0x82125230;
	}
	return 0x82125230;
} // Block from 82125220h-82125230h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125230);
		  /* 82125230h */ case    0:  		/* lis R10, -32253 */
		/* 82125230h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125230h case    0:*/		return 0x82125234;
		  /* 82125234h */ case    1:  		/* mr R11, R3 */
		/* 82125234h case    1:*/		regs.R11 = regs.R3;
		/* 82125234h case    1:*/		return 0x82125238;
		  /* 82125238h */ case    2:  		/* addi R10, R10, 11336 */
		/* 82125238h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C48);
		/* 82125238h case    2:*/		return 0x8212523C;
		  /* 8212523Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212523Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212523Ch case    3:*/		return 0x82125240;
		  /* 82125240h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125240h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125240h case    4:*/		return 0x82125244;
		  /* 82125244h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82125244h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125244h case    5:*/		return 0x82125248;
		  /* 82125248h */ case    6:  		/* subf R9, R8, R9 */
		/* 82125248h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125248h case    6:*/		return 0x8212524C;
		  /* 8212524Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8212524Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82125260;  }
		/* 8212524Ch case    7:*/		return 0x82125250;
		  /* 82125250h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125250h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125250h case    8:*/		return 0x82125254;
		  /* 82125254h */ case    9:  		/* addi R10, R10, 1 */
		/* 82125254h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125254h case    9:*/		return 0x82125258;
		  /* 82125258h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82125258h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125258h case   10:*/		return 0x8212525C;
		  /* 8212525Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212525Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212523C;  }
		/* 8212525Ch case   11:*/		return 0x82125260;
	}
	return 0x82125260;
} // Block from 82125230h-82125260h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125260);
		  /* 82125260h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125260h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125260h case    0:*/		return 0x82125264;
		  /* 82125264h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82125264h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125270;  }
		/* 82125264h case    1:*/		return 0x82125268;
		  /* 82125268h */ case    2:  		/* li R3, 347 */
		/* 82125268h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15B);
		/* 82125268h case    2:*/		return 0x8212526C;
		  /* 8212526Ch */ case    3:  		/* b -9028 */
		/* 8212526Ch case    3:*/		return 0x82122F28;
		/* 8212526Ch case    3:*/		return 0x82125270;
	}
	return 0x82125270;
} // Block from 82125260h-82125270h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125270);
		  /* 82125270h */ case    0:  		/* lis R10, -32253 */
		/* 82125270h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125270h case    0:*/		return 0x82125274;
		  /* 82125274h */ case    1:  		/* mr R11, R3 */
		/* 82125274h case    1:*/		regs.R11 = regs.R3;
		/* 82125274h case    1:*/		return 0x82125278;
		  /* 82125278h */ case    2:  		/* addi R10, R10, 11328 */
		/* 82125278h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C40);
		/* 82125278h case    2:*/		return 0x8212527C;
		  /* 8212527Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8212527Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8212527Ch case    3:*/		return 0x82125280;
		  /* 82125280h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125280h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125280h case    4:*/		return 0x82125284;
		  /* 82125284h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82125284h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125284h case    5:*/		return 0x82125288;
		  /* 82125288h */ case    6:  		/* subf R9, R8, R9 */
		/* 82125288h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125288h case    6:*/		return 0x8212528C;
		  /* 8212528Ch */ case    7:  		/* bc 12, CR0_EQ, -6860 */
		/* 8212528Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821237C0;  }
		/* 8212528Ch case    7:*/		return 0x82125290;
		  /* 82125290h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125290h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125290h case    8:*/		return 0x82125294;
		  /* 82125294h */ case    9:  		/* addi R10, R10, 1 */
		/* 82125294h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125294h case    9:*/		return 0x82125298;
		  /* 82125298h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82125298h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125298h case   10:*/		return 0x8212529C;
		  /* 8212529Ch */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8212529Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8212527C;  }
		/* 8212529Ch case   11:*/		return 0x821252A0;
		  /* 821252A0h */ case   12:  		/* b -6880 */
		/* 821252A0h case   12:*/		return 0x821237C0;
		/* 821252A0h case   12:*/		return 0x821252A4;
		  /* 821252A4h */ case   13:  		/* lis R10, -32255 */
		/* 821252A4h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821252A4h case   13:*/		return 0x821252A8;
		  /* 821252A8h */ case   14:  		/* mr R11, R3 */
		/* 821252A8h case   14:*/		regs.R11 = regs.R3;
		/* 821252A8h case   14:*/		return 0x821252AC;
		  /* 821252ACh */ case   15:  		/* addi R10, R10, 12460 */
		/* 821252ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30AC);
		/* 821252ACh case   15:*/		return 0x821252B0;
		  /* 821252B0h */ case   16:  		/* lbz R9, <#[R11]> */
		/* 821252B0h case   16:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821252B0h case   16:*/		return 0x821252B4;
		  /* 821252B4h */ case   17:  		/* lbz R8, <#[R10]> */
		/* 821252B4h case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821252B4h case   17:*/		return 0x821252B8;
		  /* 821252B8h */ case   18:  		/* cmpwi CR0, R9, 0 */
		/* 821252B8h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821252B8h case   18:*/		return 0x821252BC;
		  /* 821252BCh */ case   19:  		/* subf R9, R8, R9 */
		/* 821252BCh case   19:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821252BCh case   19:*/		return 0x821252C0;
		  /* 821252C0h */ case   20:  		/* bc 12, CR0_EQ, 20 */
		/* 821252C0h case   20:*/		if ( regs.CR[0].eq ) { return 0x821252D4;  }
		/* 821252C0h case   20:*/		return 0x821252C4;
		  /* 821252C4h */ case   21:  		/* addi R11, R11, 1 */
		/* 821252C4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821252C4h case   21:*/		return 0x821252C8;
		  /* 821252C8h */ case   22:  		/* addi R10, R10, 1 */
		/* 821252C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821252C8h case   22:*/		return 0x821252CC;
		  /* 821252CCh */ case   23:  		/* cmpwi CR6, R9, 0 */
		/* 821252CCh case   23:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821252CCh case   23:*/		return 0x821252D0;
		  /* 821252D0h */ case   24:  		/* bc 12, CR6_EQ, -32 */
		/* 821252D0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821252B0;  }
		/* 821252D0h case   24:*/		return 0x821252D4;
	}
	return 0x821252D4;
} // Block from 82125270h-821252D4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821252D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821252D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821252D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821252D4);
		  /* 821252D4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821252D4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821252D4h case    0:*/		return 0x821252D8;
		  /* 821252D8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821252D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821252E4;  }
		/* 821252D8h case    1:*/		return 0x821252DC;
		  /* 821252DCh */ case    2:  		/* li R3, 350 */
		/* 821252DCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15E);
		/* 821252DCh case    2:*/		return 0x821252E0;
		  /* 821252E0h */ case    3:  		/* b -9144 */
		/* 821252E0h case    3:*/		return 0x82122F28;
		/* 821252E0h case    3:*/		return 0x821252E4;
	}
	return 0x821252E4;
} // Block from 821252D4h-821252E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821252E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821252E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821252E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821252E4);
		  /* 821252E4h */ case    0:  		/* lis R10, -32255 */
		/* 821252E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821252E4h case    0:*/		return 0x821252E8;
		  /* 821252E8h */ case    1:  		/* mr R11, R3 */
		/* 821252E8h case    1:*/		regs.R11 = regs.R3;
		/* 821252E8h case    1:*/		return 0x821252EC;
		  /* 821252ECh */ case    2:  		/* addi R10, R10, 12244 */
		/* 821252ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FD4);
		/* 821252ECh case    2:*/		return 0x821252F0;
		  /* 821252F0h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821252F0h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821252F0h case    3:*/		return 0x821252F4;
		  /* 821252F4h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821252F4h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821252F4h case    4:*/		return 0x821252F8;
		  /* 821252F8h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821252F8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821252F8h case    5:*/		return 0x821252FC;
		  /* 821252FCh */ case    6:  		/* subf R9, R8, R9 */
		/* 821252FCh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821252FCh case    6:*/		return 0x82125300;
		  /* 82125300h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82125300h case    7:*/		if ( regs.CR[0].eq ) { return 0x82125314;  }
		/* 82125300h case    7:*/		return 0x82125304;
		  /* 82125304h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125304h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125304h case    8:*/		return 0x82125308;
		  /* 82125308h */ case    9:  		/* addi R10, R10, 1 */
		/* 82125308h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125308h case    9:*/		return 0x8212530C;
		  /* 8212530Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212530Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212530Ch case   10:*/		return 0x82125310;
		  /* 82125310h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82125310h case   11:*/		if ( regs.CR[6].eq ) { return 0x821252F0;  }
		/* 82125310h case   11:*/		return 0x82125314;
	}
	return 0x82125314;
} // Block from 821252E4h-82125314h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125314);
		  /* 82125314h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125314h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125314h case    0:*/		return 0x82125318;
		  /* 82125318h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82125318h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125324;  }
		/* 82125318h case    1:*/		return 0x8212531C;
		  /* 8212531Ch */ case    2:  		/* li R3, 351 */
		/* 8212531Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x15F);
		/* 8212531Ch case    2:*/		return 0x82125320;
		  /* 82125320h */ case    3:  		/* b -9208 */
		/* 82125320h case    3:*/		return 0x82122F28;
		/* 82125320h case    3:*/		return 0x82125324;
	}
	return 0x82125324;
} // Block from 82125314h-82125324h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125324);
		  /* 82125324h */ case    0:  		/* lis R10, -32253 */
		/* 82125324h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125324h case    0:*/		return 0x82125328;
		  /* 82125328h */ case    1:  		/* mr R11, R3 */
		/* 82125328h case    1:*/		regs.R11 = regs.R3;
		/* 82125328h case    1:*/		return 0x8212532C;
		  /* 8212532Ch */ case    2:  		/* addi R10, R10, 11320 */
		/* 8212532Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2C38);
		/* 8212532Ch case    2:*/		return 0x82125330;
		  /* 82125330h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82125330h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125330h case    3:*/		return 0x82125334;
		  /* 82125334h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82125334h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82125334h case    4:*/		return 0x82125338;
		  /* 82125338h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82125338h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125338h case    5:*/		return 0x8212533C;
		  /* 8212533Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 8212533Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8212533Ch case    6:*/		return 0x82125340;
		  /* 82125340h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82125340h case    7:*/		if ( regs.CR[0].eq ) { return 0x82125354;  }
		/* 82125340h case    7:*/		return 0x82125344;
		  /* 82125344h */ case    8:  		/* addi R11, R11, 1 */
		/* 82125344h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125344h case    8:*/		return 0x82125348;
		  /* 82125348h */ case    9:  		/* addi R10, R10, 1 */
		/* 82125348h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125348h case    9:*/		return 0x8212534C;
		  /* 8212534Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8212534Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8212534Ch case   10:*/		return 0x82125350;
		  /* 82125350h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82125350h case   11:*/		if ( regs.CR[6].eq ) { return 0x82125330;  }
		/* 82125350h case   11:*/		return 0x82125354;
	}
	return 0x82125354;
} // Block from 82125324h-82125354h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125354);
		  /* 82125354h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125354h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125354h case    0:*/		return 0x82125358;
		  /* 82125358h */ case    1:  		/* bc 12, CR0_EQ, -9204 */
		/* 82125358h case    1:*/		if ( regs.CR[0].eq ) { return 0x82122F64;  }
		/* 82125358h case    1:*/		return 0x8212535C;
		  /* 8212535Ch */ case    2:  		/* lis R10, -32255 */
		/* 8212535Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8212535Ch case    2:*/		return 0x82125360;
		  /* 82125360h */ case    3:  		/* mr R11, R3 */
		/* 82125360h case    3:*/		regs.R11 = regs.R3;
		/* 82125360h case    3:*/		return 0x82125364;
		  /* 82125364h */ case    4:  		/* addi R10, R10, -15880 */
		/* 82125364h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC1F8);
		/* 82125364h case    4:*/		return 0x82125368;
		  /* 82125368h */ case    5:  		/* lbz R9, <#[R11]> */
		/* 82125368h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125368h case    5:*/		return 0x8212536C;
		  /* 8212536Ch */ case    6:  		/* lbz R8, <#[R10]> */
		/* 8212536Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212536Ch case    6:*/		return 0x82125370;
		  /* 82125370h */ case    7:  		/* cmpwi CR0, R9, 0 */
		/* 82125370h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125370h case    7:*/		return 0x82125374;
		  /* 82125374h */ case    8:  		/* subf R9, R8, R9 */
		/* 82125374h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125374h case    8:*/		return 0x82125378;
		  /* 82125378h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82125378h case    9:*/		if ( regs.CR[0].eq ) { return 0x8212538C;  }
		/* 82125378h case    9:*/		return 0x8212537C;
		  /* 8212537Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8212537Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212537Ch case   10:*/		return 0x82125380;
		  /* 82125380h */ case   11:  		/* addi R10, R10, 1 */
		/* 82125380h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125380h case   11:*/		return 0x82125384;
		  /* 82125384h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82125384h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125384h case   12:*/		return 0x82125388;
		  /* 82125388h */ case   13:  		/* bc 12, CR6_EQ, -32 */
		/* 82125388h case   13:*/		if ( regs.CR[6].eq ) { return 0x82125368;  }
		/* 82125388h case   13:*/		return 0x8212538C;
	}
	return 0x8212538C;
} // Block from 82125354h-8212538Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212538Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212538C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212538C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212538C);
		  /* 8212538Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212538Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212538Ch case    0:*/		return 0x82125390;
		  /* 82125390h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82125390h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212539C;  }
		/* 82125390h case    1:*/		return 0x82125394;
		  /* 82125394h */ case    2:  		/* li R3, 353 */
		/* 82125394h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x161);
		/* 82125394h case    2:*/		return 0x82125398;
		  /* 82125398h */ case    3:  		/* b -9328 */
		/* 82125398h case    3:*/		return 0x82122F28;
		/* 82125398h case    3:*/		return 0x8212539C;
	}
	return 0x8212539C;
} // Block from 8212538Ch-8212539Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212539Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212539C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212539C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212539C);
		  /* 8212539Ch */ case    0:  		/* lis R10, -32255 */
		/* 8212539Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8212539Ch case    0:*/		return 0x821253A0;
		  /* 821253A0h */ case    1:  		/* mr R11, R3 */
		/* 821253A0h case    1:*/		regs.R11 = regs.R3;
		/* 821253A0h case    1:*/		return 0x821253A4;
		  /* 821253A4h */ case    2:  		/* addi R10, R10, -15852 */
		/* 821253A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC214);
		/* 821253A4h case    2:*/		return 0x821253A8;
		  /* 821253A8h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821253A8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821253A8h case    3:*/		return 0x821253AC;
		  /* 821253ACh */ case    4:  		/* lbz R8, <#[R10]> */
		/* 821253ACh case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821253ACh case    4:*/		return 0x821253B0;
		  /* 821253B0h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 821253B0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821253B0h case    5:*/		return 0x821253B4;
		  /* 821253B4h */ case    6:  		/* subf R9, R8, R9 */
		/* 821253B4h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821253B4h case    6:*/		return 0x821253B8;
		  /* 821253B8h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821253B8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821253CC;  }
		/* 821253B8h case    7:*/		return 0x821253BC;
		  /* 821253BCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821253BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821253BCh case    8:*/		return 0x821253C0;
		  /* 821253C0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821253C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821253C0h case    9:*/		return 0x821253C4;
		  /* 821253C4h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 821253C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821253C4h case   10:*/		return 0x821253C8;
		  /* 821253C8h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 821253C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821253A8;  }
		/* 821253C8h case   11:*/		return 0x821253CC;
	}
	return 0x821253CC;
} // Block from 8212539Ch-821253CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821253CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821253CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821253CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821253CC);
		  /* 821253CCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821253CCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821253CCh case    0:*/		return 0x821253D0;
		  /* 821253D0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821253D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821253DC;  }
		/* 821253D0h case    1:*/		return 0x821253D4;
		  /* 821253D4h */ case    2:  		/* li R3, 354 */
		/* 821253D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x162);
		/* 821253D4h case    2:*/		return 0x821253D8;
		  /* 821253D8h */ case    3:  		/* b -9392 */
		/* 821253D8h case    3:*/		return 0x82122F28;
		/* 821253D8h case    3:*/		return 0x821253DC;
	}
	return 0x821253DC;
} // Block from 821253CCh-821253DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821253DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821253DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821253DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821253DC);
		  /* 821253DCh */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 821253DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 821253DCh case    0:*/		return 0x821253E0;
		  /* 821253E0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821253E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821253E0h case    1:*/		return 0x821253E4;
		  /* 821253E4h */ case    2:  		/* bc 12, CR6_EQ, -7196 */
		/* 821253E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 821253E4h case    2:*/		return 0x821253E8;
		  /* 821253E8h */ case    3:  		/* lis R10, -32255 */
		/* 821253E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821253E8h case    3:*/		return 0x821253EC;
		  /* 821253ECh */ case    4:  		/* mr R11, R3 */
		/* 821253ECh case    4:*/		regs.R11 = regs.R3;
		/* 821253ECh case    4:*/		return 0x821253F0;
		  /* 821253F0h */ case    5:  		/* addi R10, R10, 12276 */
		/* 821253F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2FF4);
		/* 821253F0h case    5:*/		return 0x821253F4;
		  /* 821253F4h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 821253F4h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821253F4h case    6:*/		return 0x821253F8;
		  /* 821253F8h */ case    7:  		/* lbz R8, <#[R10]> */
		/* 821253F8h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821253F8h case    7:*/		return 0x821253FC;
		  /* 821253FCh */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 821253FCh case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821253FCh case    8:*/		return 0x82125400;
		  /* 82125400h */ case    9:  		/* subf R9, R8, R9 */
		/* 82125400h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125400h case    9:*/		return 0x82125404;
		  /* 82125404h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 82125404h case   10:*/		if ( regs.CR[0].eq ) { return 0x82125418;  }
		/* 82125404h case   10:*/		return 0x82125408;
		  /* 82125408h */ case   11:  		/* addi R11, R11, 1 */
		/* 82125408h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125408h case   11:*/		return 0x8212540C;
		  /* 8212540Ch */ case   12:  		/* addi R10, R10, 1 */
		/* 8212540Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212540Ch case   12:*/		return 0x82125410;
		  /* 82125410h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 82125410h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125410h case   13:*/		return 0x82125414;
		  /* 82125414h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 82125414h case   14:*/		if ( regs.CR[6].eq ) { return 0x821253F4;  }
		/* 82125414h case   14:*/		return 0x82125418;
	}
	return 0x82125418;
} // Block from 821253DCh-82125418h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125418);
		  /* 82125418h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82125418h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125418h case    0:*/		return 0x8212541C;
		  /* 8212541Ch */ case    1:  		/* bc 4, CR0_EQ, -7252 */
		/* 8212541Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212541Ch case    1:*/		return 0x82125420;
		  /* 82125420h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82125420h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82125420h case    2:*/		return 0x82125424;
		  /* 82125424h */ case    3:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82125424h case    3:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82125424h case    3:*/		return 0x82125428;
		  /* 82125428h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82125428h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82125434;  }
		/* 82125428h case    4:*/		return 0x8212542C;
		  /* 8212542Ch */ case    5:  		/* li R3, 352 */
		/* 8212542Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x160);
		/* 8212542Ch case    5:*/		return 0x82125430;
		  /* 82125430h */ case    6:  		/* b -9480 */
		/* 82125430h case    6:*/		return 0x82122F28;
		/* 82125430h case    6:*/		return 0x82125434;
	}
	return 0x82125434;
} // Block from 82125418h-82125434h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82125434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125434);
		  /* 82125434h */ case    0:  		/* lis R11, -32253 */
		/* 82125434h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125434h case    0:*/		return 0x82125438;
		  /* 82125438h */ case    1:  		/* addi R6, R11, 11248 */
		/* 82125438h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2BF0);
		/* 82125438h case    1:*/		return 0x8212543C;
		  /* 8212543Ch */ case    2:  		/* b -4608 */
		/* 8212543Ch case    2:*/		return 0x8212423C;
		/* 8212543Ch case    2:*/		return 0x82125440;
		  /* 82125440h */ case    3:  		/* lwz R11, <#[R31 + 92]> */
		/* 82125440h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82125440h case    3:*/		return 0x82125444;
		  /* 82125444h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82125444h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82125444h case    4:*/		return 0x82125448;
		  /* 82125448h */ case    5:  		/* bc 12, CR6_EQ, -7296 */
		/* 82125448h case    5:*/		if ( regs.CR[6].eq ) { return 0x821237C8;  }
		/* 82125448h case    5:*/		return 0x8212544C;
		  /* 8212544Ch */ case    6:  		/* lis R10, -32256 */
		/* 8212544Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8212544Ch case    6:*/		return 0x82125450;
		  /* 82125450h */ case    7:  		/* mr R11, R3 */
		/* 82125450h case    7:*/		regs.R11 = regs.R3;
		/* 82125450h case    7:*/		return 0x82125454;
		  /* 82125454h */ case    8:  		/* addi R10, R10, 4472 */
		/* 82125454h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1178);
		/* 82125454h case    8:*/		return 0x82125458;
		  /* 82125458h */ case    9:  		/* lbz R9, <#[R11]> */
		/* 82125458h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82125458h case    9:*/		return 0x8212545C;
		  /* 8212545Ch */ case   10:  		/* lbz R8, <#[R10]> */
		/* 8212545Ch case   10:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8212545Ch case   10:*/		return 0x82125460;
		  /* 82125460h */ case   11:  		/* cmpwi CR0, R9, 0 */
		/* 82125460h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82125460h case   11:*/		return 0x82125464;
		  /* 82125464h */ case   12:  		/* subf R9, R8, R9 */
		/* 82125464h case   12:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82125464h case   12:*/		return 0x82125468;
		  /* 82125468h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 82125468h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212547C;  }
		/* 82125468h case   13:*/		return 0x8212546C;
		  /* 8212546Ch */ case   14:  		/* addi R11, R11, 1 */
		/* 8212546Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212546Ch case   14:*/		return 0x82125470;
		  /* 82125470h */ case   15:  		/* addi R10, R10, 1 */
		/* 82125470h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82125470h case   15:*/		return 0x82125474;
		  /* 82125474h */ case   16:  		/* cmpwi CR6, R9, 0 */
		/* 82125474h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82125474h case   16:*/		return 0x82125478;
		  /* 82125478h */ case   17:  		/* bc 12, CR6_EQ, -32 */
		/* 82125478h case   17:*/		if ( regs.CR[6].eq ) { return 0x82125458;  }
		/* 82125478h case   17:*/		return 0x8212547C;
	}
	return 0x8212547C;
} // Block from 82125434h-8212547Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8212547Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212547C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212547C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212547C);
		  /* 8212547Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8212547Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8212547Ch case    0:*/		return 0x82125480;
		  /* 82125480h */ case    1:  		/* bc 4, CR0_EQ, -7352 */
		/* 82125480h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 82125480h case    1:*/		return 0x82125484;
		  /* 82125484h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82125484h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82125484h case    2:*/		return 0x82125488;
		  /* 82125488h */ case    3:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 82125488h case    3:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82125488h case    3:*/		return 0x8212548C;
		  /* 8212548Ch */ case    4:  		/* bc 4, CR0_EQ, -7364 */
		/* 8212548Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 8212548Ch case    4:*/		return 0x82125490;
		  /* 82125490h */ case    5:  		/* b -100 */
		/* 82125490h case    5:*/		return 0x8212542C;
		/* 82125490h case    5:*/		return 0x82125494;
		  /* 82125494h */ case    6:  		/* lis R10, -32253 */
		/* 82125494h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82125494h case    6:*/		return 0x82125498;
		  /* 82125498h */ case    7:  		/* mr R11, R3 */
		/* 82125498h case    7:*/		regs.R11 = regs.R3;
		/* 82125498h case    7:*/		return 0x8212549C;
		  /* 8212549Ch */ case    8:  		/* addi R10, R10, 11236 */
		/* 8212549Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2BE4);
		/* 8212549Ch case    8:*/		return 0x821254A0;
		  /* 821254A0h */ case    9:  		/* lbz R9, <#[R11]> */
		/* 821254A0h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821254A0h case    9:*/		return 0x821254A4;
		  /* 821254A4h */ case   10:  		/* lbz R8, <#[R10]> */
		/* 821254A4h case   10:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821254A4h case   10:*/		return 0x821254A8;
		  /* 821254A8h */ case   11:  		/* cmpwi CR0, R9, 0 */
		/* 821254A8h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821254A8h case   11:*/		return 0x821254AC;
		  /* 821254ACh */ case   12:  		/* subf R9, R8, R9 */
		/* 821254ACh case   12:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821254ACh case   12:*/		return 0x821254B0;
		  /* 821254B0h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 821254B0h case   13:*/		if ( regs.CR[0].eq ) { return 0x821254C4;  }
		/* 821254B0h case   13:*/		return 0x821254B4;
		  /* 821254B4h */ case   14:  		/* addi R11, R11, 1 */
		/* 821254B4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821254B4h case   14:*/		return 0x821254B8;
		  /* 821254B8h */ case   15:  		/* addi R10, R10, 1 */
		/* 821254B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821254B8h case   15:*/		return 0x821254BC;
		  /* 821254BCh */ case   16:  		/* cmpwi CR6, R9, 0 */
		/* 821254BCh case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821254BCh case   16:*/		return 0x821254C0;
		  /* 821254C0h */ case   17:  		/* bc 12, CR6_EQ, -32 */
		/* 821254C0h case   17:*/		if ( regs.CR[6].eq ) { return 0x821254A0;  }
		/* 821254C0h case   17:*/		return 0x821254C4;
	}
	return 0x821254C4;
} // Block from 8212547Ch-821254C4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821254C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821254C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821254C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821254C4);
		  /* 821254C4h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821254C4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821254C4h case    0:*/		return 0x821254C8;
		  /* 821254C8h */ case    1:  		/* bc 4, CR0_EQ, -7424 */
		/* 821254C8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821237C8;  }
		/* 821254C8h case    1:*/		return 0x821254CC;
		  /* 821254CCh */ case    2:  		/* li R3, 355 */
		/* 821254CCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x163);
		/* 821254CCh case    2:*/		return 0x821254D0;
		  /* 821254D0h */ case    3:  		/* b -9640 */
		/* 821254D0h case    3:*/		return 0x82122F28;
		/* 821254D0h case    3:*/		return 0x821254D4;
	}
	return 0x821254D4;
} // Block from 821254C4h-821254D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821254D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821254D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821254D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821254D4);
		  /* 821254D4h */ case    0:  		/* mr R4, R29 */
		/* 821254D4h case    0:*/		regs.R4 = regs.R29;
		/* 821254D4h case    0:*/		return 0x821254D8;
		  /* 821254D8h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 821254D8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821254D8h case    1:*/		return 0x821254DC;
		  /* 821254DCh */ case    2:  		/* bl -598188 */
		/* 821254DCh case    2:*/		regs.LR = 0x821254E0; return 0x82093430;
		/* 821254DCh case    2:*/		return 0x821254E0;
		  /* 821254E0h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821254E0h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821254E0h case    3:*/		return 0x821254E4;
		  /* 821254E4h */ case    4:  		/* bc 4, CR0_EQ, 140 */
		/* 821254E4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82125570;  }
		/* 821254E4h case    4:*/		return 0x821254E8;
		  /* 821254E8h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 821254E8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821254E8h case    5:*/		return 0x821254EC;
		  /* 821254ECh */ case    6:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821254ECh case    6:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821254ECh case    6:*/		return 0x821254F0;
		  /* 821254F0h */ case    7:  		/* bc 12, CR0_EQ, -5200 */
		/* 821254F0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821240A0;  }
		/* 821254F0h case    7:*/		return 0x821254F4;
		  /* 821254F4h */ case    8:  		/* lis R11, -32253 */
		/* 821254F4h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821254F4h case    8:*/		return 0x821254F8;
		  /* 821254F8h */ case    9:  		/* addi R6, R11, 11176 */
		/* 821254F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2BA8);
		/* 821254F8h case    9:*/		return 0x821254FC;
		  /* 821254FCh */ case   10:  		/* b 100 */
		/* 821254FCh case   10:*/		return 0x82125560;
		/* 821254FCh case   10:*/		return 0x82125500;
	}
	return 0x82125500;
} // Block from 821254D4h-82125500h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82125500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125500);
		  /* 82125500h */ case    0:  		/* lis R11, -32253 */
		/* 82125500h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125500h case    0:*/		return 0x82125504;
		  /* 82125504h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 82125504h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82125504h case    1:*/		return 0x82125508;
		  /* 82125508h */ case    2:  		/* addi R4, R11, 11168 */
		/* 82125508h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2BA0);
		/* 82125508h case    2:*/		return 0x8212550C;
		  /* 8212550Ch */ case    3:  		/* bl -598236 */
		/* 8212550Ch case    3:*/		regs.LR = 0x82125510; return 0x82093430;
		/* 8212550Ch case    3:*/		return 0x82125510;
		  /* 82125510h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82125510h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125510h case    4:*/		return 0x82125514;
		  /* 82125514h */ case    5:  		/* bc 4, CR0_EQ, 92 */
		/* 82125514h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82125570;  }
		/* 82125514h case    5:*/		return 0x82125518;
		  /* 82125518h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 82125518h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82125518h case    6:*/		return 0x8212551C;
		  /* 8212551Ch */ case    7:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8212551Ch case    7:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8212551Ch case    7:*/		return 0x82125520;
		  /* 82125520h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 82125520h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8212552C;  }
		/* 82125520h case    8:*/		return 0x82125524;
		  /* 82125524h */ case    9:  		/* li R3, 273 */
		/* 82125524h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x111);
		/* 82125524h case    9:*/		return 0x82125528;
		  /* 82125528h */ case   10:  		/* b -9728 */
		/* 82125528h case   10:*/		return 0x82122F28;
		/* 82125528h case   10:*/		return 0x8212552C;
	}
	return 0x8212552C;
} // Block from 82125500h-8212552Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8212552Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212552C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212552C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212552C);
		  /* 8212552Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212552Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212552Ch case    0:*/		return 0x82125530;
		  /* 82125530h */ case    1:  		/* addi R6, R11, 11108 */
		/* 82125530h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2B64);
		/* 82125530h case    1:*/		return 0x82125534;
		  /* 82125534h */ case    2:  		/* b 44 */
		/* 82125534h case    2:*/		return 0x82125560;
		/* 82125534h case    2:*/		return 0x82125538;
	}
	return 0x82125538;
} // Block from 8212552Ch-82125538h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82125538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125538);
		  /* 82125538h */ case    0:  		/* mr R4, R27 */
		/* 82125538h case    0:*/		regs.R4 = regs.R27;
		/* 82125538h case    0:*/		return 0x8212553C;
		  /* 8212553Ch */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8212553Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8212553Ch case    1:*/		return 0x82125540;
		  /* 82125540h */ case    2:  		/* bl -598288 */
		/* 82125540h case    2:*/		regs.LR = 0x82125544; return 0x82093430;
		/* 82125540h case    2:*/		return 0x82125544;
		  /* 82125544h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82125544h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125544h case    3:*/		return 0x82125548;
		  /* 82125548h */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 82125548h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82125570;  }
		/* 82125548h case    4:*/		return 0x8212554C;
		  /* 8212554Ch */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8212554Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212554Ch case    5:*/		return 0x82125550;
		  /* 82125550h */ case    6:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82125550h case    6:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82125550h case    6:*/		return 0x82125554;
		  /* 82125554h */ case    7:  		/* bc 12, CR0_EQ, -8996 */
		/* 82125554h case    7:*/		if ( regs.CR[0].eq ) { return 0x82123230;  }
		/* 82125554h case    7:*/		return 0x82125558;
		  /* 82125558h */ case    8:  		/* lis R11, -32253 */
		/* 82125558h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125558h case    8:*/		return 0x8212555C;
		  /* 8212555Ch */ case    9:  		/* addi R6, R11, 11052 */
		/* 8212555Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2B2C);
		/* 8212555Ch case    9:*/		return 0x82125560;
	}
	return 0x82125560;
} // Block from 82125538h-82125560h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82125560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125560);
		  /* 82125560h */ case    0:  		/* li R5, 3086 */
		/* 82125560h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 82125560h case    0:*/		return 0x82125564;
		  /* 82125564h */ case    1:  		/* mr R4, R30 */
		/* 82125564h case    1:*/		regs.R4 = regs.R30;
		/* 82125564h case    1:*/		return 0x82125568;
		  /* 82125568h */ case    2:  		/* mr R3, R31 */
		/* 82125568h case    2:*/		regs.R3 = regs.R31;
		/* 82125568h case    2:*/		return 0x8212556C;
		  /* 8212556Ch */ case    3:  		/* bl -48332 */
		/* 8212556Ch case    3:*/		regs.LR = 0x82125570; return 0x821198A0;
		/* 8212556Ch case    3:*/		return 0x82125570;
	}
	return 0x82125570;
} // Block from 82125560h-82125570h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125570);
		  /* 82125570h */ case    0:  		/* li R11, 0 */
		/* 82125570h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82125570h case    0:*/		return 0x82125574;
		  /* 82125574h */ case    1:  		/* lwz R8, <#[R31 + 20]> */
		/* 82125574h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82125574h case    1:*/		return 0x82125578;
		  /* 82125578h */ case    2:  		/* li R10, 0 */
		/* 82125578h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82125578h case    2:*/		return 0x8212557C;
		  /* 8212557Ch */ case    3:  		/* li R9, 0 */
		/* 8212557Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212557Ch case    3:*/		return 0x82125580;
		  /* 82125580h */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 82125580h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82125580h case    4:*/		return 0x82125584;
		  /* 82125584h */ case    5:  		/* li R7, 0 */
		/* 82125584h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82125584h case    5:*/		return 0x82125588;
		  /* 82125588h */ case    6:  		/* li R6, 0 */
		/* 82125588h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82125588h case    6:*/		return 0x8212558C;
		  /* 8212558Ch */ case    7:  		/* mr R5, R30 */
		/* 8212558Ch case    7:*/		regs.R5 = regs.R30;
		/* 8212558Ch case    7:*/		return 0x82125590;
		  /* 82125590h */ case    8:  		/* li R4, 0 */
		/* 82125590h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82125590h case    8:*/		return 0x82125594;
		  /* 82125594h */ case    9:  		/* mr R3, R31 */
		/* 82125594h case    9:*/		regs.R3 = regs.R31;
		/* 82125594h case    9:*/		return 0x82125598;
		  /* 82125598h */ case   10:  		/* bl -21824 */
		/* 82125598h case   10:*/		regs.LR = 0x8212559C; return 0x82120058;
		/* 82125598h case   10:*/		return 0x8212559C;
		  /* 8212559Ch */ case   11:  		/* addi R11, R3, 0 */
		/* 8212559Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x0);
		/* 8212559Ch case   11:*/		return 0x821255A0;
		  /* 821255A0h */ case   12:  		/* cntlzw R11, R11 */
		/* 821255A0h case   12:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821255A0h case   12:*/		return 0x821255A4;
		  /* 821255A4h */ case   13:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821255A4h case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821255A4h case   13:*/		return 0x821255A8;
		  /* 821255A8h */ case   14:  		/* xori R11, R11, 1 */
		/* 821255A8h case   14:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821255A8h case   14:*/		return 0x821255AC;
		  /* 821255ACh */ case   15:  		/* addi R3, R11, 384 */
		/* 821255ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x180);
		/* 821255ACh case   15:*/		return 0x821255B0;
		  /* 821255B0h */ case   16:  		/* b -9864 */
		/* 821255B0h case   16:*/		return 0x82122F28;
		/* 821255B0h case   16:*/		return 0x821255B4;
		  /* 821255B4h */ case   17:  		/* li R3, 383 */
		/* 821255B4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x17F);
		/* 821255B4h case   17:*/		return 0x821255B8;
		  /* 821255B8h */ case   18:  		/* b -9872 */
		/* 821255B8h case   18:*/		return 0x82122F28;
		/* 821255B8h case   18:*/		return 0x821255BC;
		  /* 821255BCh */ case   19:  		/* nop */
		/* 821255BCh case   19:*/		cpu::op::nop();
		/* 821255BCh case   19:*/		return 0x821255C0;
	}
	return 0x821255C0;
} // Block from 82125570h-821255C0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821255C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821255C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821255C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821255C0);
		  /* 821255C0h */ case    0:  		/* mfspr R12, LR */
		/* 821255C0h case    0:*/		regs.R12 = regs.LR;
		/* 821255C0h case    0:*/		return 0x821255C4;
		  /* 821255C4h */ case    1:  		/* bl -607140 */
		/* 821255C4h case    1:*/		regs.LR = 0x821255C8; return 0x82091220;
		/* 821255C4h case    1:*/		return 0x821255C8;
		  /* 821255C8h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 821255C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 821255C8h case    2:*/		return 0x821255CC;
		  /* 821255CCh */ case    3:  		/* mr R29, R5 */
		/* 821255CCh case    3:*/		regs.R29 = regs.R5;
		/* 821255CCh case    3:*/		return 0x821255D0;
		  /* 821255D0h */ case    4:  		/* lwz R11, <#[R3 + 24]> */
		/* 821255D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821255D0h case    4:*/		return 0x821255D4;
		  /* 821255D4h */ case    5:  		/* lis R10, -32253 */
		/* 821255D4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821255D4h case    5:*/		return 0x821255D8;
		  /* 821255D8h */ case    6:  		/* lis R5, -32253 */
		/* 821255D8h case    6:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 821255D8h case    6:*/		return 0x821255DC;
		  /* 821255DCh */ case    7:  		/* addi R18, R10, 13660 */
		/* 821255DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R10,0x355C);
		/* 821255DCh case    7:*/		return 0x821255E0;
		  /* 821255E0h */ case    8:  		/* addi R10, R5, 13644 */
		/* 821255E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0x354C);
		/* 821255E0h case    8:*/		return 0x821255E4;
		  /* 821255E4h */ case    9:  		/* mr R30, R6 */
		/* 821255E4h case    9:*/		regs.R30 = regs.R6;
		/* 821255E4h case    9:*/		return 0x821255E8;
		  /* 821255E8h */ case   10:  		/* stw R18, <#[R1 + 180]> */
		/* 821255E8h case   10:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000B4) );
		/* 821255E8h case   10:*/		return 0x821255EC;
		  /* 821255ECh */ case   11:  		/* lis R9, -32253 */
		/* 821255ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821255ECh case   11:*/		return 0x821255F0;
		  /* 821255F0h */ case   12:  		/* stw R10, <#[R1 + 188]> */
		/* 821255F0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000BC) );
		/* 821255F0h case   12:*/		return 0x821255F4;
		  /* 821255F4h */ case   13:  		/* mr R31, R3 */
		/* 821255F4h case   13:*/		regs.R31 = regs.R3;
		/* 821255F4h case   13:*/		return 0x821255F8;
		  /* 821255F8h */ case   14:  		/* mr R19, R4 */
		/* 821255F8h case   14:*/		regs.R19 = regs.R4;
		/* 821255F8h case   14:*/		return 0x821255FC;
		  /* 821255FCh */ case   15:  		/* mr R21, R7 */
		/* 821255FCh case   15:*/		regs.R21 = regs.R7;
		/* 821255FCh case   15:*/		return 0x82125600;
		  /* 82125600h */ case   16:  		/* lis R6, -32253 */
		/* 82125600h case   16:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82125600h case   16:*/		return 0x82125604;
		  /* 82125604h */ case   17:  		/* lis R4, -32253 */
		/* 82125604h case   17:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 82125604h case   17:*/		return 0x82125608;
		  /* 82125608h */ case   18:  		/* lis R3, -32253 */
		/* 82125608h case   18:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 82125608h case   18:*/		return 0x8212560C;
		  /* 8212560Ch */ case   19:  		/* lis R28, -32256 */
		/* 8212560Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8200);
		/* 8212560Ch case   19:*/		return 0x82125610;
		  /* 82125610h */ case   20:  		/* lis R27, -32253 */
		/* 82125610h case   20:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8203);
		/* 82125610h case   20:*/		return 0x82125614;
		  /* 82125614h */ case   21:  		/* lis R8, -32253 */
		/* 82125614h case   21:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82125614h case   21:*/		return 0x82125618;
		  /* 82125618h */ case   22:  		/* lis R7, -32253 */
		/* 82125618h case   22:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82125618h case   22:*/		return 0x8212561C;
		  /* 8212561Ch */ case   23:  		/* lis R26, -32253 */
		/* 8212561Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8203);
		/* 8212561Ch case   23:*/		return 0x82125620;
		  /* 82125620h */ case   24:  		/* addi R16, R9, 13624 */
		/* 82125620h case   24:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R9,0x3538);
		/* 82125620h case   24:*/		return 0x82125624;
		  /* 82125624h */ case   25:  		/* addi R28, R28, 4485 */
		/* 82125624h case   25:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1185);
		/* 82125624h case   25:*/		return 0x82125628;
		  /* 82125628h */ case   26:  		/* addi R27, R27, 13544 */
		/* 82125628h case   26:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x34E8);
		/* 82125628h case   26:*/		return 0x8212562C;
		  /* 8212562Ch */ case   27:  		/* stw R16, <#[R1 + 184]> */
		/* 8212562Ch case   27:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x000000B8) );
		/* 8212562Ch case   27:*/		return 0x82125630;
		  /* 82125630h */ case   28:  		/* addi R6, R6, 13604 */
		/* 82125630h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x3524);
		/* 82125630h case   28:*/		return 0x82125634;
		  /* 82125634h */ case   29:  		/* stw R28, <#[R1 + 200]> */
		/* 82125634h case   29:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000C8) );
		/* 82125634h case   29:*/		return 0x82125638;
		  /* 82125638h */ case   30:  		/* addi R9, R4, 13580 */
		/* 82125638h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x350C);
		/* 82125638h case   30:*/		return 0x8212563C;
		  /* 8212563Ch */ case   31:  		/* stw R28, <#[R1 + 204]> */
		/* 8212563Ch case   31:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000CC) );
		/* 8212563Ch case   31:*/		return 0x82125640;
		  /* 82125640h */ case   32:  		/* addi R5, R3, 13560 */
		/* 82125640h case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x34F8);
		/* 82125640h case   32:*/		return 0x82125644;
		  /* 82125644h */ case   33:  		/* stw R6, <#[R1 + 176]> */
		/* 82125644h case   33:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82125644h case   33:*/		return 0x82125648;
		  /* 82125648h */ case   34:  		/* addi R17, R8, 13532 */
		/* 82125648h case   34:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R8,0x34DC);
		/* 82125648h case   34:*/		return 0x8212564C;
		  /* 8212564Ch */ case   35:  		/* stw R9, <#[R1 + 192]> */
		/* 8212564Ch case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000C0) );
		/* 8212564Ch case   35:*/		return 0x82125650;
		  /* 82125650h */ case   36:  		/* addi R15, R7, 13516 */
		/* 82125650h case   36:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R7,0x34CC);
		/* 82125650h case   36:*/		return 0x82125654;
		  /* 82125654h */ case   37:  		/* stw R5, <#[R1 + 196]> */
		/* 82125654h case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000C4) );
		/* 82125654h case   37:*/		return 0x82125658;
		  /* 82125658h */ case   38:  		/* addi R10, R26, 13508 */
		/* 82125658h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x34C4);
		/* 82125658h case   38:*/		return 0x8212565C;
		  /* 8212565Ch */ case   39:  		/* stw R6, <#[R1 + 208]> */
		/* 8212565Ch case   39:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000D0) );
		/* 8212565Ch case   39:*/		return 0x82125660;
		  /* 82125660h */ case   40:  		/* stw R27, <#[R1 + 224]> */
		/* 82125660h case   40:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000E0) );
		/* 82125660h case   40:*/		return 0x82125664;
		  /* 82125664h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 82125664h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82125664h case   41:*/		return 0x82125668;
		  /* 82125668h */ case   42:  		/* stw R17, <#[R1 + 228]> */
		/* 82125668h case   42:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000E4) );
		/* 82125668h case   42:*/		return 0x8212566C;
		  /* 8212566Ch */ case   43:  		/* stw R15, <#[R1 + 232]> */
		/* 8212566Ch case   43:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x000000E8) );
		/* 8212566Ch case   43:*/		return 0x82125670;
		  /* 82125670h */ case   44:  		/* stw R27, <#[R1 + 236]> */
		/* 82125670h case   44:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000EC) );
		/* 82125670h case   44:*/		return 0x82125674;
		  /* 82125674h */ case   45:  		/* stw R27, <#[R1 + 240]> */
		/* 82125674h case   45:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000F0) );
		/* 82125674h case   45:*/		return 0x82125678;
		  /* 82125678h */ case   46:  		/* stw R10, <#[R1 + 244]> */
		/* 82125678h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000F4) );
		/* 82125678h case   46:*/		return 0x8212567C;
		  /* 8212567Ch */ case   47:  		/* stw R28, <#[R1 + 248]> */
		/* 8212567Ch case   47:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000F8) );
		/* 8212567Ch case   47:*/		return 0x82125680;
		  /* 82125680h */ case   48:  		/* stw R28, <#[R1 + 252]> */
		/* 82125680h case   48:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000FC) );
		/* 82125680h case   48:*/		return 0x82125684;
		  /* 82125684h */ case   49:  		/* stw R27, <#[R1 + 256]> */
		/* 82125684h case   49:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000100) );
		/* 82125684h case   49:*/		return 0x82125688;
		  /* 82125688h */ case   50:  		/* bc 12, CR6_EQ, 3340 */
		/* 82125688h case   50:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 82125688h case   50:*/		return 0x8212568C;
		  /* 8212568Ch */ case   51:  		/* lwz R22, <#[R11 + 8]> */
		/* 8212568Ch case   51:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000008) );
		/* 8212568Ch case   51:*/		return 0x82125690;
		  /* 82125690h */ case   52:  		/* cmplwi CR6, R22, 0 */
		/* 82125690h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82125690h case   52:*/		return 0x82125694;
		  /* 82125694h */ case   53:  		/* bc 12, CR6_EQ, 3328 */
		/* 82125694h case   53:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 82125694h case   53:*/		return 0x82125698;
		  /* 82125698h */ case   54:  		/* lwz R11, <#[R31 + 20]> */
		/* 82125698h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82125698h case   54:*/		return 0x8212569C;
		  /* 8212569Ch */ case   55:  		/* cmplwi CR6, R11, 0 */
		/* 8212569Ch case   55:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212569Ch case   55:*/		return 0x821256A0;
		  /* 821256A0h */ case   56:  		/* bc 12, CR6_EQ, 3316 */
		/* 821256A0h case   56:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 821256A0h case   56:*/		return 0x821256A4;
		  /* 821256A4h */ case   57:  		/* cmplwi CR6, R19, 0 */
		/* 821256A4h case   57:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821256A4h case   57:*/		return 0x821256A8;
		  /* 821256A8h */ case   58:  		/* bc 12, CR6_EQ, 3308 */
		/* 821256A8h case   58:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 821256A8h case   58:*/		return 0x821256AC;
		  /* 821256ACh */ case   59:  		/* li R3, 20 */
		/* 821256ACh case   59:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821256ACh case   59:*/		return 0x821256B0;
		  /* 821256B0h */ case   60:  		/* lwz R23, <#[R22 + 24]> */
		/* 821256B0h case   60:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R22 + 0x00000018) );
		/* 821256B0h case   60:*/		return 0x821256B4;
		  /* 821256B4h */ case   61:  		/* bl -377996 */
		/* 821256B4h case   61:*/		regs.LR = 0x821256B8; return 0x820C9228;
		/* 821256B4h case   61:*/		return 0x821256B8;
		  /* 821256B8h */ case   62:  		/* li R20, 0 */
		/* 821256B8h case   62:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821256B8h case   62:*/		return 0x821256BC;
		  /* 821256BCh */ case   63:  		/* cmplwi CR0, R3, 0 */
		/* 821256BCh case   63:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821256BCh case   63:*/		return 0x821256C0;
		  /* 821256C0h */ case   64:  		/* bc 12, CR0_EQ, 36 */
		/* 821256C0h case   64:*/		if ( regs.CR[0].eq ) { return 0x821256E4;  }
		/* 821256C0h case   64:*/		return 0x821256C4;
		  /* 821256C4h */ case   65:  		/* lis R11, -32253 */
		/* 821256C4h case   65:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821256C4h case   65:*/		return 0x821256C8;
		  /* 821256C8h */ case   66:  		/* li R5, 0 */
		/* 821256C8h case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821256C8h case   66:*/		return 0x821256CC;
		  /* 821256CCh */ case   67:  		/* addi R6, R11, 13492 */
		/* 821256CCh case   67:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x34B4);
		/* 821256CCh case   67:*/		return 0x821256D0;
		  /* 821256D0h */ case   68:  		/* li R4, 0 */
		/* 821256D0h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821256D0h case   68:*/		return 0x821256D4;
		  /* 821256D4h */ case   69:  		/* bl -377572 */
		/* 821256D4h case   69:*/		regs.LR = 0x821256D8; return 0x820C93F0;
		/* 821256D4h case   69:*/		return 0x821256D8;
		  /* 821256D8h */ case   70:  		/* mr R28, R3 */
		/* 821256D8h case   70:*/		regs.R28 = regs.R3;
		/* 821256D8h case   70:*/		return 0x821256DC;
		  /* 821256DCh */ case   71:  		/* stw R3, <#[R1 + 144]> */
		/* 821256DCh case   71:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 821256DCh case   71:*/		return 0x821256E0;
		  /* 821256E0h */ case   72:  		/* b 12 */
		/* 821256E0h case   72:*/		return 0x821256EC;
		/* 821256E0h case   72:*/		return 0x821256E4;
	}
	return 0x821256E4;
} // Block from 821255C0h-821256E4h (73 instructions)

//////////////////////////////////////////////////////
// Block at 821256E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821256E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821256E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821256E4);
		  /* 821256E4h */ case    0:  		/* stw R20, <#[R1 + 144]> */
		/* 821256E4h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000090) );
		/* 821256E4h case    0:*/		return 0x821256E8;
		  /* 821256E8h */ case    1:  		/* rlwinm R28, R20, 0, 0, 31 */
		/* 821256E8h case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R28,regs.R20);
		/* 821256E8h case    1:*/		return 0x821256EC;
	}
	return 0x821256EC;
} // Block from 821256E4h-821256ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821256ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821256EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821256EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821256EC);
		  /* 821256ECh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821256ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821256ECh case    0:*/		return 0x821256F0;
		  /* 821256F0h */ case    1:  		/* bc 12, CR6_EQ, 3236 */
		/* 821256F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 821256F0h case    1:*/		return 0x821256F4;
		  /* 821256F4h */ case    2:  		/* li R3, 52 */
		/* 821256F4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821256F4h case    2:*/		return 0x821256F8;
		  /* 821256F8h */ case    3:  		/* bl -378064 */
		/* 821256F8h case    3:*/		regs.LR = 0x821256FC; return 0x820C9228;
		/* 821256F8h case    3:*/		return 0x821256FC;
		  /* 821256FCh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821256FCh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821256FCh case    4:*/		return 0x82125700;
		  /* 82125700h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 82125700h case    5:*/		if ( regs.CR[0].eq ) { return 0x82125724;  }
		/* 82125700h case    5:*/		return 0x82125704;
		  /* 82125704h */ case    6:  		/* li R8, 0 */
		/* 82125704h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82125704h case    6:*/		return 0x82125708;
		  /* 82125708h */ case    7:  		/* li R7, 0 */
		/* 82125708h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82125708h case    7:*/		return 0x8212570C;
		  /* 8212570Ch */ case    8:  		/* li R6, 0 */
		/* 8212570Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212570Ch case    8:*/		return 0x82125710;
		  /* 82125710h */ case    9:  		/* li R5, 0 */
		/* 82125710h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82125710h case    9:*/		return 0x82125714;
		  /* 82125714h */ case   10:  		/* li R4, 1 */
		/* 82125714h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82125714h case   10:*/		return 0x82125718;
		  /* 82125718h */ case   11:  		/* bl -374880 */
		/* 82125718h case   11:*/		regs.LR = 0x8212571C; return 0x820C9EB8;
		/* 82125718h case   11:*/		return 0x8212571C;
		  /* 8212571Ch */ case   12:  		/* mr R14, R3 */
		/* 8212571Ch case   12:*/		regs.R14 = regs.R3;
		/* 8212571Ch case   12:*/		return 0x82125720;
		  /* 82125720h */ case   13:  		/* b 8 */
		/* 82125720h case   13:*/		return 0x82125728;
		/* 82125720h case   13:*/		return 0x82125724;
	}
	return 0x82125724;
} // Block from 821256ECh-82125724h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82125724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125724);
		  /* 82125724h */ case    0:  		/* mr R14, R20 */
		/* 82125724h case    0:*/		regs.R14 = regs.R20;
		/* 82125724h case    0:*/		return 0x82125728;
	}
	return 0x82125728;
} // Block from 82125724h-82125728h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125728);
		  /* 82125728h */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 82125728h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82125728h case    0:*/		return 0x8212572C;
		  /* 8212572Ch */ case    1:  		/* bc 12, CR6_EQ, 3176 */
		/* 8212572Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 8212572Ch case    1:*/		return 0x82125730;
		  /* 82125730h */ case    2:  		/* stw R14, <#[R28 + 8]> */
		/* 82125730h case    2:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R28 + 0x00000008) );
		/* 82125730h case    2:*/		return 0x82125734;
		  /* 82125734h */ case    3:  		/* li R3, 88 */
		/* 82125734h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82125734h case    3:*/		return 0x82125738;
		  /* 82125738h */ case    4:  		/* bl -378128 */
		/* 82125738h case    4:*/		regs.LR = 0x8212573C; return 0x820C9228;
		/* 82125738h case    4:*/		return 0x8212573C;
		  /* 8212573Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8212573Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212573Ch case    5:*/		return 0x82125740;
		  /* 82125740h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 82125740h case    6:*/		if ( regs.CR[0].eq ) { return 0x82125750;  }
		/* 82125740h case    6:*/		return 0x82125744;
		  /* 82125744h */ case    7:  		/* bl -369412 */
		/* 82125744h case    7:*/		regs.LR = 0x82125748; return 0x820CB440;
		/* 82125744h case    7:*/		return 0x82125748;
		  /* 82125748h */ case    8:  		/* mr R27, R3 */
		/* 82125748h case    8:*/		regs.R27 = regs.R3;
		/* 82125748h case    8:*/		return 0x8212574C;
		  /* 8212574Ch */ case    9:  		/* b 8 */
		/* 8212574Ch case    9:*/		return 0x82125754;
		/* 8212574Ch case    9:*/		return 0x82125750;
	}
	return 0x82125750;
} // Block from 82125728h-82125750h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82125750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125750);
		  /* 82125750h */ case    0:  		/* mr R27, R20 */
		/* 82125750h case    0:*/		regs.R27 = regs.R20;
		/* 82125750h case    0:*/		return 0x82125754;
	}
	return 0x82125754;
} // Block from 82125750h-82125754h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125754);
		  /* 82125754h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82125754h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82125754h case    0:*/		return 0x82125758;
		  /* 82125758h */ case    1:  		/* bc 12, CR6_EQ, 3132 */
		/* 82125758h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 82125758h case    1:*/		return 0x8212575C;
		  /* 8212575Ch */ case    2:  		/* stw R27, <#[R14 + 24]> */
		/* 8212575Ch case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R14 + 0x00000018) );
		/* 8212575Ch case    2:*/		return 0x82125760;
		  /* 82125760h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 82125760h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82125760h case    3:*/		return 0x82125764;
		  /* 82125764h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82125764h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212577C;  }
		/* 82125764h case    4:*/		return 0x82125768;
		  /* 82125768h */ case    5:  		/* mr R3, R30 */
		/* 82125768h case    5:*/		regs.R3 = regs.R30;
		/* 82125768h case    5:*/		return 0x8212576C;
		  /* 8212576Ch */ case    6:  		/* bl -377860 */
		/* 8212576Ch case    6:*/		regs.LR = 0x82125770; return 0x820C9368;
		/* 8212576Ch case    6:*/		return 0x82125770;
		  /* 82125770h */ case    7:  		/* stw R3, <#[R14 + 28]> */
		/* 82125770h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R14 + 0x0000001C) );
		/* 82125770h case    7:*/		return 0x82125774;
		  /* 82125774h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82125774h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125774h case    8:*/		return 0x82125778;
		  /* 82125778h */ case    9:  		/* bc 12, CR0_EQ, 3100 */
		/* 82125778h case    9:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 82125778h case    9:*/		return 0x8212577C;
	}
	return 0x8212577C;
} // Block from 82125754h-8212577Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212577Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212577C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212577C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212577C);
		  /* 8212577Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8212577Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212577Ch case    0:*/		return 0x82125780;
		  /* 82125780h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 82125780h case    1:*/		if ( regs.CR[6].eq ) { return 0x821257CC;  }
		/* 82125780h case    1:*/		return 0x82125784;
		  /* 82125784h */ case    2:  		/* mr R3, R29 */
		/* 82125784h case    2:*/		regs.R3 = regs.R29;
		/* 82125784h case    2:*/		return 0x82125788;
		  /* 82125788h */ case    3:  		/* bl -377888 */
		/* 82125788h case    3:*/		regs.LR = 0x8212578C; return 0x820C9368;
		/* 82125788h case    3:*/		return 0x8212578C;
		  /* 8212578Ch */ case    4:  		/* stw R3, <#[R27 + 64]> */
		/* 8212578Ch case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000040) );
		/* 8212578Ch case    4:*/		return 0x82125790;
		  /* 82125790h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82125790h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125790h case    5:*/		return 0x82125794;
		  /* 82125794h */ case    6:  		/* bc 12, CR0_EQ, 3072 */
		/* 82125794h case    6:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 82125794h case    6:*/		return 0x82125798;
		  /* 82125798h */ case    7:  		/* lwz R3, <#[R29 + 8]> */
		/* 82125798h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000008) );
		/* 82125798h case    7:*/		return 0x8212579C;
		  /* 8212579Ch */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8212579Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212579Ch case    8:*/		return 0x821257A0;
		  /* 821257A0h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 821257A0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821257C0;  }
		/* 821257A0h case    9:*/		return 0x821257A4;
		  /* 821257A4h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821257A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821257A4h case   10:*/		return 0x821257A8;
		  /* 821257A8h */ case   11:  		/* cmpwi CR6, R11, 3 */
		/* 821257A8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821257A8h case   11:*/		return 0x821257AC;
		  /* 821257ACh */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 821257ACh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821257C0;  }
		/* 821257ACh case   12:*/		return 0x821257B0;
		  /* 821257B0h */ case   13:  		/* bl -377928 */
		/* 821257B0h case   13:*/		regs.LR = 0x821257B4; return 0x820C9368;
		/* 821257B0h case   13:*/		return 0x821257B4;
		  /* 821257B4h */ case   14:  		/* stw R3, <#[R27 + 60]> */
		/* 821257B4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000003C) );
		/* 821257B4h case   14:*/		return 0x821257B8;
		  /* 821257B8h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 821257B8h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821257B8h case   15:*/		return 0x821257BC;
		  /* 821257BCh */ case   16:  		/* bc 12, CR0_EQ, 3032 */
		/* 821257BCh case   16:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 821257BCh case   16:*/		return 0x821257C0;
	}
	return 0x821257C0;
} // Block from 8212577Ch-821257C0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821257C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821257C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821257C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821257C0);
		  /* 821257C0h */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 821257C0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821257C0h case    0:*/		return 0x821257C4;
		  /* 821257C4h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821257C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821257C4h case    1:*/		return 0x821257C8;
		  /* 821257C8h */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 821257C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82125798;  }
		/* 821257C8h case    2:*/		return 0x821257CC;
	}
	return 0x821257CC;
} // Block from 821257C0h-821257CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821257CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821257CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821257CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821257CC);
		  /* 821257CCh */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 821257CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821257CCh case    0:*/		return 0x821257D0;
		  /* 821257D0h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821257D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821257F4;  }
		/* 821257D0h case    1:*/		return 0x821257D4;
		  /* 821257D4h */ case    2:  		/* lwz R11, <#[R21 + 4]> */
		/* 821257D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821257D4h case    2:*/		return 0x821257D8;
		  /* 821257D8h */ case    3:  		/* cmpwi CR6, R11, 14 */
		/* 821257D8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821257D8h case    3:*/		return 0x821257DC;
		  /* 821257DCh */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821257DCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821257F4;  }
		/* 821257DCh case    4:*/		return 0x821257E0;
		  /* 821257E0h */ case    5:  		/* mr R5, R21 */
		/* 821257E0h case    5:*/		regs.R5 = regs.R21;
		/* 821257E0h case    5:*/		return 0x821257E4;
		  /* 821257E4h */ case    6:  		/* mr R4, R19 */
		/* 821257E4h case    6:*/		regs.R4 = regs.R19;
		/* 821257E4h case    6:*/		return 0x821257E8;
		  /* 821257E8h */ case    7:  		/* mr R3, R31 */
		/* 821257E8h case    7:*/		regs.R3 = regs.R31;
		/* 821257E8h case    7:*/		return 0x821257EC;
		  /* 821257ECh */ case    8:  		/* bl -30092 */
		/* 821257ECh case    8:*/		regs.LR = 0x821257F0; return 0x8211E260;
		/* 821257ECh case    8:*/		return 0x821257F0;
		  /* 821257F0h */ case    9:  		/* stw R3, <#[R27 + 52]> */
		/* 821257F0h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000034) );
		/* 821257F0h case    9:*/		return 0x821257F4;
	}
	return 0x821257F4;
} // Block from 821257CCh-821257F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821257F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821257F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821257F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821257F4);
		  /* 821257F4h */ case    0:  		/* li R25, 1 */
		/* 821257F4h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821257F4h case    0:*/		return 0x821257F8;
		  /* 821257F8h */ case    1:  		/* mr R24, R20 */
		/* 821257F8h case    1:*/		regs.R24 = regs.R20;
		/* 821257F8h case    1:*/		return 0x821257FC;
		  /* 821257FCh */ case    2:  		/* mr R26, R25 */
		/* 821257FCh case    2:*/		regs.R26 = regs.R25;
		/* 821257FCh case    2:*/		return 0x82125800;
		  /* 82125800h */ case    3:  		/* mr R28, R20 */
		/* 82125800h case    3:*/		regs.R28 = regs.R20;
		/* 82125800h case    3:*/		return 0x82125804;
		  /* 82125804h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 82125804h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82125804h case    4:*/		return 0x82125808;
		  /* 82125808h */ case    5:  		/* bc 12, CR6_EQ, 160 */
		/* 82125808h case    5:*/		if ( regs.CR[6].eq ) { return 0x821258A8;  }
		/* 82125808h case    5:*/		return 0x8212580C;
		  /* 8212580Ch */ case    6:  		/* mr R3, R23 */
		/* 8212580Ch case    6:*/		regs.R3 = regs.R23;
		/* 8212580Ch case    6:*/		return 0x82125810;
		  /* 82125810h */ case    7:  		/* bl -378024 */
		/* 82125810h case    7:*/		regs.LR = 0x82125814; return 0x820C9368;
		/* 82125810h case    7:*/		return 0x82125814;
		  /* 82125814h */ case    8:  		/* stw R3, <#[R27 + 48]> */
		/* 82125814h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000030) );
		/* 82125814h case    8:*/		return 0x82125818;
		  /* 82125818h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82125818h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125818h case    9:*/		return 0x8212581C;
		  /* 8212581Ch */ case   10:  		/* bc 12, CR0_EQ, 2936 */
		/* 8212581Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 8212581Ch case   10:*/		return 0x82125820;
		  /* 82125820h */ case   11:  		/* b 136 */
		/* 82125820h case   11:*/		return 0x821258A8;
		/* 82125820h case   11:*/		return 0x82125824;
		  /* 82125824h */ case   12:  		/* li R3, 24 */
		/* 82125824h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82125824h case   12:*/		return 0x82125828;
		  /* 82125828h */ case   13:  		/* bl -378368 */
		/* 82125828h case   13:*/		regs.LR = 0x8212582C; return 0x820C9228;
		/* 82125828h case   13:*/		return 0x8212582C;
		  /* 8212582Ch */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 8212582Ch case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212582Ch case   14:*/		return 0x82125830;
		  /* 82125830h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 82125830h case   15:*/		if ( regs.CR[0].eq ) { return 0x82125840;  }
		/* 82125830h case   15:*/		return 0x82125834;
		  /* 82125834h */ case   16:  		/* bl -372140 */
		/* 82125834h case   16:*/		regs.LR = 0x82125838; return 0x820CAA88;
		/* 82125834h case   16:*/		return 0x82125838;
		  /* 82125838h */ case   17:  		/* mr R29, R3 */
		/* 82125838h case   17:*/		regs.R29 = regs.R3;
		/* 82125838h case   17:*/		return 0x8212583C;
		  /* 8212583Ch */ case   18:  		/* b 8 */
		/* 8212583Ch case   18:*/		return 0x82125844;
		/* 8212583Ch case   18:*/		return 0x82125840;
	}
	return 0x82125840;
} // Block from 821257F4h-82125840h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82125840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125840);
		  /* 82125840h */ case    0:  		/* mr R29, R20 */
		/* 82125840h case    0:*/		regs.R29 = regs.R20;
		/* 82125840h case    0:*/		return 0x82125844;
	}
	return 0x82125844;
} // Block from 82125840h-82125844h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125844);
		  /* 82125844h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82125844h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82125844h case    0:*/		return 0x82125848;
		  /* 82125848h */ case    1:  		/* bc 12, CR6_EQ, 2892 */
		/* 82125848h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126394;  }
		/* 82125848h case    1:*/		return 0x8212584C;
		  /* 8212584Ch */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 8212584Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212584Ch case    2:*/		return 0x82125850;
		  /* 82125850h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82125850h case    3:*/		if ( regs.CR[6].eq ) { return 0x82125858;  }
		/* 82125850h case    3:*/		return 0x82125854;
		  /* 82125854h */ case    4:  		/* li R28, 3073 */
		/* 82125854h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0xC01);
		/* 82125854h case    4:*/		return 0x82125858;
	}
	return 0x82125858;
} // Block from 82125844h-82125858h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82125858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125858);
		  /* 82125858h */ case    0:  		/* lwz R11, <#[R27 + 48]> */
		/* 82125858h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 82125858h case    0:*/		return 0x8212585C;
		  /* 8212585Ch */ case    1:  		/* addi R30, R29, 20 */
		/* 8212585Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x14);
		/* 8212585Ch case    1:*/		return 0x82125860;
		  /* 82125860h */ case    2:  		/* stw R11, <#[R29 + 16]> */
		/* 82125860h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82125860h case    2:*/		return 0x82125864;
		  /* 82125864h */ case    3:  		/* lwz R4, <#[R19 + 12]> */
		/* 82125864h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x0000000C) );
		/* 82125864h case    3:*/		return 0x82125868;
		  /* 82125868h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 82125868h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82125868h case    4:*/		return 0x8212586C;
		  /* 8212586Ch */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 8212586Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82125890;  }
		/* 8212586Ch case    5:*/		return 0x82125870;
		  /* 82125870h */ case    6:  		/* mr R5, R30 */
		/* 82125870h case    6:*/		regs.R5 = regs.R30;
		/* 82125870h case    6:*/		return 0x82125874;
		  /* 82125874h */ case    7:  		/* mr R3, R31 */
		/* 82125874h case    7:*/		regs.R3 = regs.R31;
		/* 82125874h case    7:*/		return 0x82125878;
		  /* 82125878h */ case    8:  		/* bl -24048 */
		/* 82125878h case    8:*/		regs.LR = 0x8212587C; return 0x8211FA88;
		/* 82125878h case    8:*/		return 0x8212587C;
		  /* 8212587Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8212587Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212587Ch case    9:*/		return 0x82125880;
		  /* 82125880h */ case   10:  		/* bc 4, CR0_LT, 24 */
		/* 82125880h case   10:*/		if ( !regs.CR[0].lt ) { return 0x82125898;  }
		/* 82125880h case   10:*/		return 0x82125884;
		  /* 82125884h */ case   11:  		/* li R28, 3058 */
		/* 82125884h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0xBF2);
		/* 82125884h case   11:*/		return 0x82125888;
		  /* 82125888h */ case   12:  		/* stw R25, <#[R30]> */
		/* 82125888h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000000) );
		/* 82125888h case   12:*/		return 0x8212588C;
		  /* 8212588Ch */ case   13:  		/* b 12 */
		/* 8212588Ch case   13:*/		return 0x82125898;
		/* 8212588Ch case   13:*/		return 0x82125890;
	}
	return 0x82125890;
} // Block from 82125858h-82125890h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82125890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125890);
		  /* 82125890h */ case    0:  		/* stw R25, <#[R29 + 20]> */
		/* 82125890h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R29 + 0x00000014) );
		/* 82125890h case    0:*/		return 0x82125894;
		  /* 82125894h */ case    1:  		/* mr R24, R30 */
		/* 82125894h case    1:*/		regs.R24 = regs.R30;
		/* 82125894h case    1:*/		return 0x82125898;
	}
	return 0x82125898;
} // Block from 82125890h-82125898h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82125898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125898);
		  /* 82125898h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82125898h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82125898h case    0:*/		return 0x8212589C;
		  /* 8212589Ch */ case    1:  		/* stw R29, <#[R27 + 48]> */
		/* 8212589Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x00000030) );
		/* 8212589Ch case    1:*/		return 0x821258A0;
		  /* 821258A0h */ case    2:  		/* mullw R26, R11, R26 */
		/* 821258A0h case    2:*/		cpu::op::mullw<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 821258A0h case    2:*/		return 0x821258A4;
		  /* 821258A4h */ case    3:  		/* lwz R19, <#[R19 + 8]> */
		/* 821258A4h case    3:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R19 + 0x00000008) );
		/* 821258A4h case    3:*/		return 0x821258A8;
	}
	return 0x821258A8;
} // Block from 82125898h-821258A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821258A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821258A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821258A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821258A8);
		  /* 821258A8h */ case    0:  		/* lwz R11, <#[R19 + 4]> */
		/* 821258A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821258A8h case    0:*/		return 0x821258AC;
		  /* 821258ACh */ case    1:  		/* cmpwi CR6, R11, 3 */
		/* 821258ACh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821258ACh case    1:*/		return 0x821258B0;
		  /* 821258B0h */ case    2:  		/* bc 4, CR6_EQ, -140 */
		/* 821258B0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82125824;  }
		/* 821258B0h case    2:*/		return 0x821258B4;
		  /* 821258B4h */ case    3:  		/* mr R3, R19 */
		/* 821258B4h case    3:*/		regs.R3 = regs.R19;
		/* 821258B4h case    3:*/		return 0x821258B8;
		  /* 821258B8h */ case    4:  		/* bl -378192 */
		/* 821258B8h case    4:*/		regs.LR = 0x821258BC; return 0x820C9368;
		/* 821258B8h case    4:*/		return 0x821258BC;
		  /* 821258BCh */ case    5:  		/* stw R3, <#[R14 + 20]> */
		/* 821258BCh case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R14 + 0x00000014) );
		/* 821258BCh case    5:*/		return 0x821258C0;
		  /* 821258C0h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821258C0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821258C0h case    6:*/		return 0x821258C4;
		  /* 821258C4h */ case    7:  		/* bc 12, CR0_EQ, 2768 */
		/* 821258C4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 821258C4h case    7:*/		return 0x821258C8;
		  /* 821258C8h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 821258C8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821258C8h case    8:*/		return 0x821258CC;
		  /* 821258CCh */ case    9:  		/* addi R29, R19, 16 */
		/* 821258CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R19,0x10);
		/* 821258CCh case    9:*/		return 0x821258D0;
		  /* 821258D0h */ case   10:  		/* cmplwi CR6, R28, 3058 */
		/* 821258D0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000BF2);
		/* 821258D0h case   10:*/		return 0x821258D4;
		  /* 821258D4h */ case   11:  		/* lwz R25, <#[R11 + 16]> */
		/* 821258D4h case   11:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000010) );
		/* 821258D4h case   11:*/		return 0x821258D8;
		  /* 821258D8h */ case   12:  		/* bc 12, CR6_EQ, 2720 */
		/* 821258D8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82126378;  }
		/* 821258D8h case   12:*/		return 0x821258DC;
		  /* 821258DCh */ case   13:  		/* cmplwi CR6, R28, 3073 */
		/* 821258DCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000C01);
		/* 821258DCh case   13:*/		return 0x821258E0;
		  /* 821258E0h */ case   14:  		/* bc 12, CR6_EQ, 2696 */
		/* 821258E0h case   14:*/		if ( regs.CR[6].eq ) { return 0x82126368;  }
		/* 821258E0h case   14:*/		return 0x821258E4;
		  /* 821258E4h */ case   15:  		/* cmplwi CR6, R24, 0 */
		/* 821258E4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821258E4h case   15:*/		return 0x821258E8;
		  /* 821258E8h */ case   16:  		/* bc 12, CR6_EQ, 228 */
		/* 821258E8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821259CC;  }
		/* 821258E8h case   16:*/		return 0x821258EC;
		  /* 821258ECh */ case   17:  		/* cmpwi CR6, R25, 9 */
		/* 821258ECh case   17:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 821258ECh case   17:*/		return 0x821258F0;
		  /* 821258F0h */ case   18:  		/* bc 12, CR6_EQ, 56 */
		/* 821258F0h case   18:*/		if ( regs.CR[6].eq ) { return 0x82125928;  }
		/* 821258F0h case   18:*/		return 0x821258F4;
		  /* 821258F4h */ case   19:  		/* cmpwi CR6, R25, 0 */
		/* 821258F4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821258F4h case   19:*/		return 0x821258F8;
		  /* 821258F8h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 821258F8h case   20:*/		if ( regs.CR[6].eq ) { return 0x82125928;  }
		/* 821258F8h case   20:*/		return 0x821258FC;
		  /* 821258FCh */ case   21:  		/* cmpwi CR6, R25, 3 */
		/* 821258FCh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 821258FCh case   21:*/		return 0x82125900;
		  /* 82125900h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 82125900h case   22:*/		if ( regs.CR[6].eq ) { return 0x82125928;  }
		/* 82125900h case   22:*/		return 0x82125904;
		  /* 82125904h */ case   23:  		/* cmpwi CR6, R25, 4 */
		/* 82125904h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 82125904h case   23:*/		return 0x82125908;
		  /* 82125908h */ case   24:  		/* bc 12, CR6_EQ, 32 */
		/* 82125908h case   24:*/		if ( regs.CR[6].eq ) { return 0x82125928;  }
		/* 82125908h case   24:*/		return 0x8212590C;
		  /* 8212590Ch */ case   25:  		/* cmpwi CR6, R25, 5 */
		/* 8212590Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000005);
		/* 8212590Ch case   25:*/		return 0x82125910;
		  /* 82125910h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 82125910h case   26:*/		if ( regs.CR[6].eq ) { return 0x82125928;  }
		/* 82125910h case   26:*/		return 0x82125914;
		  /* 82125914h */ case   27:  		/* lis R9, -32253 */
		/* 82125914h case   27:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125914h case   27:*/		return 0x82125918;
		  /* 82125918h */ case   28:  		/* addi R10, R1, 176 */
		/* 82125918h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125918h case   28:*/		return 0x8212591C;
		  /* 8212591Ch */ case   29:  		/* li R5, 3072 */
		/* 8212591Ch case   29:*/		cpu::op::li<0>(regs,&regs.R5,0xC00);
		/* 8212591Ch case   29:*/		return 0x82125920;
		  /* 82125920h */ case   30:  		/* addi R6, R9, 13444 */
		/* 82125920h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3484);
		/* 82125920h case   30:*/		return 0x82125924;
		  /* 82125924h */ case   31:  		/* b 96 */
		/* 82125924h case   31:*/		return 0x82125984;
		/* 82125924h case   31:*/		return 0x82125928;
	}
	return 0x82125928;
} // Block from 821258A8h-82125928h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82125928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125928);
		  /* 82125928h */ case    0:  		/* mr R4, R23 */
		/* 82125928h case    0:*/		regs.R4 = regs.R23;
		/* 82125928h case    0:*/		return 0x8212592C;
		  /* 8212592Ch */ case    1:  		/* mr R3, R31 */
		/* 8212592Ch case    1:*/		regs.R3 = regs.R31;
		/* 8212592Ch case    1:*/		return 0x82125930;
		  /* 82125930h */ case    2:  		/* bl -46432 */
		/* 82125930h case    2:*/		regs.LR = 0x82125934; return 0x8211A3D0;
		/* 82125930h case    2:*/		return 0x82125934;
		  /* 82125934h */ case    3:  		/* mullw. R30, R3, R26 */
		/* 82125934h case    3:*/		cpu::op::mullw<1>(regs,&regs.R30,regs.R3,regs.R26);
		/* 82125934h case    3:*/		return 0x82125938;
		  /* 82125938h */ case    4:  		/* bc 12, CR0_EQ, 140 */
		/* 82125938h case    4:*/		if ( regs.CR[0].eq ) { return 0x821259C4;  }
		/* 82125938h case    4:*/		return 0x8212593C;
		  /* 8212593Ch */ case    5:  		/* lwz R11, <#[R27 + 52]> */
		/* 8212593Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 8212593Ch case    5:*/		return 0x82125940;
		  /* 82125940h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82125940h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82125940h case    6:*/		return 0x82125944;
		  /* 82125944h */ case    7:  		/* bc 12, CR6_EQ, 112 */
		/* 82125944h case    7:*/		if ( regs.CR[6].eq ) { return 0x821259B4;  }
		/* 82125944h case    7:*/		return 0x82125948;
		  /* 82125948h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 82125948h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82125948h case    8:*/		return 0x8212594C;
		  /* 8212594Ch */ case    9:  		/* cmpwi CR6, R10, 14 */
		/* 8212594Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8212594Ch case    9:*/		return 0x82125950;
		  /* 82125950h */ case   10:  		/* bc 4, CR6_EQ, 100 */
		/* 82125950h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821259B4;  }
		/* 82125950h case   10:*/		return 0x82125954;
		  /* 82125954h */ case   11:  		/* mr R3, R31 */
		/* 82125954h case   11:*/		regs.R3 = regs.R31;
		/* 82125954h case   11:*/		return 0x82125958;
		  /* 82125958h */ case   12:  		/* lwz R4, <#[R11 + 16]> */
		/* 82125958h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 82125958h case   12:*/		return 0x8212595C;
		  /* 8212595Ch */ case   13:  		/* bl -46476 */
		/* 8212595Ch case   13:*/		regs.LR = 0x82125960; return 0x8211A3D0;
		/* 8212595Ch case   13:*/		return 0x82125960;
		  /* 82125960h */ case   14:  		/* divwu R11, R3, R30 */
		/* 82125960h case   14:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 82125960h case   14:*/		return 0x82125964;
		  /* 82125964h */ case   15:  		/* twi 6, R30, 0 */
		/* 82125964h case   15:*/		cpu::op::tw<6>(regs, 0x82125964, regs.R30, 0x00000000);
		/* 82125964h case   15:*/		return 0x82125968;
		  /* 82125968h */ case   16:  		/* mullw R11, R11, R30 */
		/* 82125968h case   16:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82125968h case   16:*/		return 0x8212596C;
		  /* 8212596Ch */ case   17:  		/* subf. R11, R11, R3 */
		/* 8212596Ch case   17:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8212596Ch case   17:*/		return 0x82125970;
		  /* 82125970h */ case   18:  		/* bc 12, CR0_EQ, 48 */
		/* 82125970h case   18:*/		if ( regs.CR[0].eq ) { return 0x821259A0;  }
		/* 82125970h case   18:*/		return 0x82125974;
		  /* 82125974h */ case   19:  		/* lis R9, -32253 */
		/* 82125974h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125974h case   19:*/		return 0x82125978;
		  /* 82125978h */ case   20:  		/* li R5, 3075 */
		/* 82125978h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0xC03);
		/* 82125978h case   20:*/		return 0x8212597C;
		  /* 8212597Ch */ case   21:  		/* addi R6, R9, 13400 */
		/* 8212597Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3458);
		/* 8212597Ch case   21:*/		return 0x82125980;
		  /* 82125980h */ case   22:  		/* addi R10, R1, 224 */
		/* 82125980h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 82125980h case   22:*/		return 0x82125984;
	}
	return 0x82125984;
} // Block from 82125928h-82125984h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82125984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125984);
		  /* 82125984h */ case    0:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125984h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125984h case    0:*/		return 0x82125988;
		  /* 82125988h */ case    1:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125988h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125988h case    1:*/		return 0x8212598C;
		  /* 8212598Ch */ case    2:  		/* mr R4, R29 */
		/* 8212598Ch case    2:*/		regs.R4 = regs.R29;
		/* 8212598Ch case    2:*/		return 0x82125990;
		  /* 82125990h */ case    3:  		/* mr R3, R31 */
		/* 82125990h case    3:*/		regs.R3 = regs.R31;
		/* 82125990h case    3:*/		return 0x82125994;
		  /* 82125994h */ case    4:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125994h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125994h case    4:*/		return 0x82125998;
		  /* 82125998h */ case    5:  		/* bl -49400 */
		/* 82125998h case    5:*/		regs.LR = 0x8212599C; return 0x821198A0;
		/* 82125998h case    5:*/		return 0x8212599C;
		  /* 8212599Ch */ case    6:  		/* b 2552 */
		/* 8212599Ch case    6:*/		return 0x82126394;
		/* 8212599Ch case    6:*/		return 0x821259A0;
	}
	return 0x821259A0;
} // Block from 82125984h-821259A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821259A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821259A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821259A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821259A0);
		  /* 821259A0h */ case    0:  		/* divwu R11, R3, R30 */
		/* 821259A0h case    0:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 821259A0h case    0:*/		return 0x821259A4;
		  /* 821259A4h */ case    1:  		/* twi 6, R30, 0 */
		/* 821259A4h case    1:*/		cpu::op::tw<6>(regs, 0x821259A4, regs.R30, 0x00000000);
		/* 821259A4h case    1:*/		return 0x821259A8;
		  /* 821259A8h */ case    2:  		/* stw R11, <#[R24]> */
		/* 821259A8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821259A8h case    2:*/		return 0x821259AC;
		  /* 821259ACh */ case    3:  		/* mullw R26, R11, R26 */
		/* 821259ACh case    3:*/		cpu::op::mullw<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 821259ACh case    3:*/		return 0x821259B0;
		  /* 821259B0h */ case    4:  		/* b 28 */
		/* 821259B0h case    4:*/		return 0x821259CC;
		/* 821259B0h case    4:*/		return 0x821259B4;
	}
	return 0x821259B4;
} // Block from 821259A0h-821259B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821259B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821259B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821259B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821259B4);
		  /* 821259B4h */ case    0:  		/* lis R9, -32253 */
		/* 821259B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821259B4h case    0:*/		return 0x821259B8;
		  /* 821259B8h */ case    1:  		/* li R5, 3074 */
		/* 821259B8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC02);
		/* 821259B8h case    1:*/		return 0x821259BC;
		  /* 821259BCh */ case    2:  		/* addi R6, R9, 13368 */
		/* 821259BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3438);
		/* 821259BCh case    2:*/		return 0x821259C0;
		  /* 821259C0h */ case    3:  		/* b -64 */
		/* 821259C0h case    3:*/		return 0x82125980;
		/* 821259C0h case    3:*/		return 0x821259C4;
	}
	return 0x821259C4;
} // Block from 821259B4h-821259C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821259C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821259C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821259C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821259C4);
		  /* 821259C4h */ case    0:  		/* mr R26, R20 */
		/* 821259C4h case    0:*/		regs.R26 = regs.R20;
		/* 821259C4h case    0:*/		return 0x821259C8;
		  /* 821259C8h */ case    1:  		/* stw R20, <#[R24]> */
		/* 821259C8h case    1:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R24 + 0x00000000) );
		/* 821259C8h case    1:*/		return 0x821259CC;
	}
	return 0x821259CC;
} // Block from 821259C4h-821259CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821259CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821259CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821259CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821259CC);
		  /* 821259CCh */ case    0:  		/* cmplwi CR6, R26, 1 */
		/* 821259CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821259CCh case    0:*/		return 0x821259D0;
		  /* 821259D0h */ case    1:  		/* bc 12, CR6_LT, 2440 */
		/* 821259D0h case    1:*/		if ( regs.CR[6].lt ) { return 0x82126358;  }
		/* 821259D0h case    1:*/		return 0x821259D4;
		  /* 821259D4h */ case    2:  		/* lis R11, 1 */
		/* 821259D4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 821259D4h case    2:*/		return 0x821259D8;
		  /* 821259D8h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 821259D8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821259D8h case    3:*/		return 0x821259DC;
		  /* 821259DCh */ case    4:  		/* bc 12, CR6_GT, 2428 */
		/* 821259DCh case    4:*/		if ( regs.CR[6].gt ) { return 0x82126358;  }
		/* 821259DCh case    4:*/		return 0x821259E0;
		  /* 821259E0h */ case    5:  		/* mr R3, R31 */
		/* 821259E0h case    5:*/		regs.R3 = regs.R31;
		/* 821259E0h case    5:*/		return 0x821259E4;
		  /* 821259E4h */ case    6:  		/* lwz R4, <#[R27 + 48]> */
		/* 821259E4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 821259E4h case    6:*/		return 0x821259E8;
		  /* 821259E8h */ case    7:  		/* bl -46616 */
		/* 821259E8h case    7:*/		regs.LR = 0x821259EC; return 0x8211A3D0;
		/* 821259E8h case    7:*/		return 0x821259EC;
		  /* 821259ECh */ case    8:  		/* stw R3, <#[R27 + 20]> */
		/* 821259ECh case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000014) );
		/* 821259ECh case    8:*/		return 0x821259F0;
		  /* 821259F0h */ case    9:  		/* lwz R11, <#[R31 + 20]> */
		/* 821259F0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821259F0h case    9:*/		return 0x821259F4;
		  /* 821259F4h */ case   10:  		/* lwz R11, <#[R11 + 16]> */
		/* 821259F4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821259F4h case   10:*/		return 0x821259F8;
		  /* 821259F8h */ case   11:  		/* stw R11, <#[R27 + 40]> */
		/* 821259F8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 821259F8h case   11:*/		return 0x821259FC;
		  /* 821259FCh */ case   12:  		/* lwz R11, <#[R31 + 20]> */
		/* 821259FCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821259FCh case   12:*/		return 0x82125A00;
		  /* 82125A00h */ case   13:  		/* lwz R11, <#[R11 + 16]> */
		/* 82125A00h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82125A00h case   13:*/		return 0x82125A04;
		  /* 82125A04h */ case   14:  		/* cmpwi CR6, R11, 1 */
		/* 82125A04h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82125A04h case   14:*/		return 0x82125A08;
		  /* 82125A08h */ case   15:  		/* bc 12, CR6_EQ, 104 */
		/* 82125A08h case   15:*/		if ( regs.CR[6].eq ) { return 0x82125A70;  }
		/* 82125A08h case   15:*/		return 0x82125A0C;
		  /* 82125A0Ch */ case   16:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A0Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A0Ch case   16:*/		return 0x82125A10;
		  /* 82125A10h */ case   17:  		/* stw R11, <#[R27 + 16]> */
		/* 82125A10h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82125A10h case   17:*/		return 0x82125A14;
		  /* 82125A14h */ case   18:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A14h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A14h case   18:*/		return 0x82125A18;
		  /* 82125A18h */ case   19:  		/* add R11, R3, R11 */
		/* 82125A18h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82125A18h case   19:*/		return 0x82125A1C;
		  /* 82125A1Ch */ case   20:  		/* stw R11, <#[R31 + 112]> */
		/* 82125A1Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A1Ch case   20:*/		return 0x82125A20;
		  /* 82125A20h */ case   21:  		/* stw R11, <#[R27 + 24]> */
		/* 82125A20h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82125A20h case   21:*/		return 0x82125A24;
		  /* 82125A24h */ case   22:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A24h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A24h case   22:*/		return 0x82125A28;
		  /* 82125A28h */ case   23:  		/* addi R11, R11, 1 */
		/* 82125A28h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125A28h case   23:*/		return 0x82125A2C;
		  /* 82125A2Ch */ case   24:  		/* stw R11, <#[R31 + 112]> */
		/* 82125A2Ch case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A2Ch case   24:*/		return 0x82125A30;
		  /* 82125A30h */ case   25:  		/* stw R11, <#[R27 + 28]> */
		/* 82125A30h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 82125A30h case   25:*/		return 0x82125A34;
		  /* 82125A34h */ case   26:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A34h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A34h case   26:*/		return 0x82125A38;
		  /* 82125A38h */ case   27:  		/* addi R11, R11, 1 */
		/* 82125A38h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125A38h case   27:*/		return 0x82125A3C;
		  /* 82125A3Ch */ case   28:  		/* stw R11, <#[R31 + 112]> */
		/* 82125A3Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A3Ch case   28:*/		return 0x82125A40;
		  /* 82125A40h */ case   29:  		/* lwz R10, <#[R22 + 16]> */
		/* 82125A40h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000010) );
		/* 82125A40h case   29:*/		return 0x82125A44;
		  /* 82125A44h */ case   30:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 82125A44h case   30:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 82125A44h case   30:*/		return 0x82125A48;
		  /* 82125A48h */ case   31:  		/* bc 12, CR0_EQ, 48 */
		/* 82125A48h case   31:*/		if ( regs.CR[0].eq ) { return 0x82125A78;  }
		/* 82125A48h case   31:*/		return 0x82125A4C;
		  /* 82125A4Ch */ case   32:  		/* stw R11, <#[R27 + 32]> */
		/* 82125A4Ch case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 82125A4Ch case   32:*/		return 0x82125A50;
		  /* 82125A50h */ case   33:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A50h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A50h case   33:*/		return 0x82125A54;
		  /* 82125A54h */ case   34:  		/* addi R11, R11, 1 */
		/* 82125A54h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125A54h case   34:*/		return 0x82125A58;
		  /* 82125A58h */ case   35:  		/* stw R11, <#[R31 + 112]> */
		/* 82125A58h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A58h case   35:*/		return 0x82125A5C;
		  /* 82125A5Ch */ case   36:  		/* stw R11, <#[R27 + 36]> */
		/* 82125A5Ch case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 82125A5Ch case   36:*/		return 0x82125A60;
		  /* 82125A60h */ case   37:  		/* lwz R11, <#[R31 + 112]> */
		/* 82125A60h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A60h case   37:*/		return 0x82125A64;
		  /* 82125A64h */ case   38:  		/* addi R11, R11, 1 */
		/* 82125A64h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82125A64h case   38:*/		return 0x82125A68;
		  /* 82125A68h */ case   39:  		/* stw R11, <#[R31 + 112]> */
		/* 82125A68h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82125A68h case   39:*/		return 0x82125A6C;
		  /* 82125A6Ch */ case   40:  		/* b 12 */
		/* 82125A6Ch case   40:*/		return 0x82125A78;
		/* 82125A6Ch case   40:*/		return 0x82125A70;
	}
	return 0x82125A70;
} // Block from 821259CCh-82125A70h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82125A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125A70);
		  /* 82125A70h */ case    0:  		/* li R11, -1 */
		/* 82125A70h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82125A70h case    0:*/		return 0x82125A74;
		  /* 82125A74h */ case    1:  		/* stw R11, <#[R27 + 16]> */
		/* 82125A74h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82125A74h case    1:*/		return 0x82125A78;
	}
	return 0x82125A78;
} // Block from 82125A70h-82125A78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82125A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125A78);
		  /* 82125A78h */ case    0:  		/* lwz R11, <#[R22 + 20]> */
		/* 82125A78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 82125A78h case    0:*/		return 0x82125A7C;
		  /* 82125A7Ch */ case    1:  		/* lwz R26, <#[R22 + 16]> */
		/* 82125A7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R22 + 0x00000010) );
		/* 82125A7Ch case    1:*/		return 0x82125A80;
		  /* 82125A80h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82125A80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82125A80h case    2:*/		return 0x82125A84;
		  /* 82125A84h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 82125A84h case    3:*/		if ( regs.CR[6].eq ) { return 0x82125AEC;  }
		/* 82125A84h case    3:*/		return 0x82125A88;
		  /* 82125A88h */ case    4:  		/* addi R5, R1, 152 */
		/* 82125A88h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x98);
		/* 82125A88h case    4:*/		return 0x82125A8C;
		  /* 82125A8Ch */ case    5:  		/* lwz R3, <#[R11 + 24]> */
		/* 82125A8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000018) );
		/* 82125A8Ch case    5:*/		return 0x82125A90;
		  /* 82125A90h */ case    6:  		/* li R4, 2 */
		/* 82125A90h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82125A90h case    6:*/		return 0x82125A94;
		  /* 82125A94h */ case    7:  		/* bl -552196 */
		/* 82125A94h case    7:*/		regs.LR = 0x82125A98; return 0x8209ED90;
		/* 82125A94h case    7:*/		return 0x82125A98;
		  /* 82125A98h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82125A98h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125A98h case    8:*/		return 0x82125A9C;
		  /* 82125A9Ch */ case    9:  		/* mr R3, R31 */
		/* 82125A9Ch case    9:*/		regs.R3 = regs.R31;
		/* 82125A9Ch case    9:*/		return 0x82125AA0;
		  /* 82125AA0h */ case   10:  		/* bc 4, CR0_LT, 40 */
		/* 82125AA0h case   10:*/		if ( !regs.CR[0].lt ) { return 0x82125AC8;  }
		/* 82125AA0h case   10:*/		return 0x82125AA4;
		  /* 82125AA4h */ case   11:  		/* lwz R11, <#[R22 + 20]> */
		/* 82125AA4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 82125AA4h case   11:*/		return 0x82125AA8;
		  /* 82125AA8h */ case   12:  		/* rlwinm R10, R25, 2, 0, 29 */
		/* 82125AA8h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R25);
		/* 82125AA8h case   12:*/		return 0x82125AAC;
		  /* 82125AACh */ case   13:  		/* addi R9, R1, 176 */
		/* 82125AACh case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xB0);
		/* 82125AACh case   13:*/		return 0x82125AB0;
		  /* 82125AB0h */ case   14:  		/* lis R8, -32253 */
		/* 82125AB0h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82125AB0h case   14:*/		return 0x82125AB4;
		  /* 82125AB4h */ case   15:  		/* li R5, 3089 */
		/* 82125AB4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0xC11);
		/* 82125AB4h case   15:*/		return 0x82125AB8;
		  /* 82125AB8h */ case   16:  		/* addi R6, R8, 13332 */
		/* 82125AB8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x3414);
		/* 82125AB8h case   16:*/		return 0x82125ABC;
		  /* 82125ABCh */ case   17:  		/* lwz R7, <#[R11 + 24]> */
		/* 82125ABCh case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82125ABCh case   17:*/		return 0x82125AC0;
		  /* 82125AC0h */ case   18:  		/* lwzx R8, <#[R10 + R9]> */
		/* 82125AC0h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82125AC0h case   18:*/		return 0x82125AC4;
		  /* 82125AC4h */ case   19:  		/* b 32 */
		/* 82125AC4h case   19:*/		return 0x82125AE4;
		/* 82125AC4h case   19:*/		return 0x82125AC8;
	}
	return 0x82125AC8;
} // Block from 82125A78h-82125AC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82125AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125AC8);
		  /* 82125AC8h */ case    0:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125AC8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125AC8h case    0:*/		return 0x82125ACC;
		  /* 82125ACCh */ case    1:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125ACCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125ACCh case    1:*/		return 0x82125AD0;
		  /* 82125AD0h */ case    2:  		/* addi R10, R1, 176 */
		/* 82125AD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125AD0h case    2:*/		return 0x82125AD4;
		  /* 82125AD4h */ case    3:  		/* lis R9, -32253 */
		/* 82125AD4h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125AD4h case    3:*/		return 0x82125AD8;
		  /* 82125AD8h */ case    4:  		/* li R5, 3039 */
		/* 82125AD8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xBDF);
		/* 82125AD8h case    4:*/		return 0x82125ADC;
		  /* 82125ADCh */ case    5:  		/* addi R6, R9, 13296 */
		/* 82125ADCh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x33F0);
		/* 82125ADCh case    5:*/		return 0x82125AE0;
		  /* 82125AE0h */ case    6:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125AE0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125AE0h case    6:*/		return 0x82125AE4;
	}
	return 0x82125AE4;
} // Block from 82125AC8h-82125AE4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82125AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125AE4);
		  /* 82125AE4h */ case    0:  		/* mr R4, R29 */
		/* 82125AE4h case    0:*/		regs.R4 = regs.R29;
		/* 82125AE4h case    0:*/		return 0x82125AE8;
		  /* 82125AE8h */ case    1:  		/* bl -49736 */
		/* 82125AE8h case    1:*/		regs.LR = 0x82125AEC; return 0x821198A0;
		/* 82125AE8h case    1:*/		return 0x82125AEC;
	}
	return 0x82125AEC;
} // Block from 82125AE4h-82125AECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82125AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125AEC);
		  /* 82125AECh */ case    0:  		/* rlwinm. R11, R26, 0, 23, 23 */
		/* 82125AECh case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R26);
		/* 82125AECh case    0:*/		return 0x82125AF0;
		  /* 82125AF0h */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 82125AF0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125B1C;  }
		/* 82125AF0h case    1:*/		return 0x82125AF4;
		  /* 82125AF4h */ case    2:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125AF4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125AF4h case    2:*/		return 0x82125AF8;
		  /* 82125AF8h */ case    3:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125AF8h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125AF8h case    3:*/		return 0x82125AFC;
		  /* 82125AFCh */ case    4:  		/* addi R10, R1, 176 */
		/* 82125AFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125AFCh case    4:*/		return 0x82125B00;
		  /* 82125B00h */ case    5:  		/* lis R9, -32253 */
		/* 82125B00h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125B00h case    5:*/		return 0x82125B04;
		  /* 82125B04h */ case    6:  		/* li R5, 3055 */
		/* 82125B04h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xBEF);
		/* 82125B04h case    6:*/		return 0x82125B08;
		  /* 82125B08h */ case    7:  		/* addi R6, R9, 13256 */
		/* 82125B08h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x33C8);
		/* 82125B08h case    7:*/		return 0x82125B0C;
		  /* 82125B0Ch */ case    8:  		/* mr R4, R29 */
		/* 82125B0Ch case    8:*/		regs.R4 = regs.R29;
		/* 82125B0Ch case    8:*/		return 0x82125B10;
		  /* 82125B10h */ case    9:  		/* mr R3, R31 */
		/* 82125B10h case    9:*/		regs.R3 = regs.R31;
		/* 82125B10h case    9:*/		return 0x82125B14;
		  /* 82125B14h */ case   10:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125B14h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125B14h case   10:*/		return 0x82125B18;
		  /* 82125B18h */ case   11:  		/* bl -49784 */
		/* 82125B18h case   11:*/		regs.LR = 0x82125B1C; return 0x821198A0;
		/* 82125B18h case   11:*/		return 0x82125B1C;
	}
	return 0x82125B1C;
} // Block from 82125AECh-82125B1Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125B1C);
		  /* 82125B1Ch */ case    0:  		/* cmpwi CR6, R25, 1 */
		/* 82125B1Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000001);
		/* 82125B1Ch case    0:*/		return 0x82125B20;
		  /* 82125B20h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82125B20h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82125B58;  }
		/* 82125B20h case    1:*/		return 0x82125B24;
		  /* 82125B24h */ case    2:  		/* mr R3, R31 */
		/* 82125B24h case    2:*/		regs.R3 = regs.R31;
		/* 82125B24h case    2:*/		return 0x82125B28;
		  /* 82125B28h */ case    3:  		/* lwz R4, <#[R27 + 48]> */
		/* 82125B28h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82125B28h case    3:*/		return 0x82125B2C;
		  /* 82125B2Ch */ case    4:  		/* bl -47356 */
		/* 82125B2Ch case    4:*/		regs.LR = 0x82125B30; return 0x8211A230;
		/* 82125B2Ch case    4:*/		return 0x82125B30;
		  /* 82125B30h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82125B30h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125B30h case    5:*/		return 0x82125B34;
		  /* 82125B34h */ case    6:  		/* bc 12, CR0_EQ, 192 */
		/* 82125B34h case    6:*/		if ( regs.CR[0].eq ) { return 0x82125BF4;  }
		/* 82125B34h case    6:*/		return 0x82125B38;
		  /* 82125B38h */ case    7:  		/* lis R11, -32253 */
		/* 82125B38h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125B38h case    7:*/		return 0x82125B3C;
		  /* 82125B3Ch */ case    8:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125B3Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125B3Ch case    8:*/		return 0x82125B40;
		  /* 82125B40h */ case    9:  		/* mr R8, R18 */
		/* 82125B40h case    9:*/		regs.R8 = regs.R18;
		/* 82125B40h case    9:*/		return 0x82125B44;
		  /* 82125B44h */ case   10:  		/* addi R6, R11, 13220 */
		/* 82125B44h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x33A4);
		/* 82125B44h case   10:*/		return 0x82125B48;
		  /* 82125B48h */ case   11:  		/* li R5, 3035 */
		/* 82125B48h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBDB);
		/* 82125B48h case   11:*/		return 0x82125B4C;
		  /* 82125B4Ch */ case   12:  		/* mr R4, R29 */
		/* 82125B4Ch case   12:*/		regs.R4 = regs.R29;
		/* 82125B4Ch case   12:*/		return 0x82125B50;
		  /* 82125B50h */ case   13:  		/* mr R3, R31 */
		/* 82125B50h case   13:*/		regs.R3 = regs.R31;
		/* 82125B50h case   13:*/		return 0x82125B54;
		  /* 82125B54h */ case   14:  		/* bl -49844 */
		/* 82125B54h case   14:*/		regs.LR = 0x82125B58; return 0x821198A0;
		/* 82125B54h case   14:*/		return 0x82125B58;
	}
	return 0x82125B58;
} // Block from 82125B1Ch-82125B58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125B58);
		  /* 82125B58h */ case    0:  		/* cmpwi CR6, R25, 2 */
		/* 82125B58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 82125B58h case    0:*/		return 0x82125B5C;
		  /* 82125B5Ch */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 82125B5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82125B98;  }
		/* 82125B5Ch case    1:*/		return 0x82125B60;
		  /* 82125B60h */ case    2:  		/* rlwinm. R11, R26, 0, 27, 27 */
		/* 82125B60h case    2:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R26);
		/* 82125B60h case    2:*/		return 0x82125B64;
		  /* 82125B64h */ case    3:  		/* bc 4, CR0_EQ, 144 */
		/* 82125B64h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82125BF4;  }
		/* 82125B64h case    3:*/		return 0x82125B68;
		  /* 82125B68h */ case    4:  		/* mr R3, R31 */
		/* 82125B68h case    4:*/		regs.R3 = regs.R31;
		/* 82125B68h case    4:*/		return 0x82125B6C;
		  /* 82125B6Ch */ case    5:  		/* lwz R4, <#[R27 + 48]> */
		/* 82125B6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82125B6Ch case    5:*/		return 0x82125B70;
		  /* 82125B70h */ case    6:  		/* bl -47424 */
		/* 82125B70h case    6:*/		regs.LR = 0x82125B74; return 0x8211A230;
		/* 82125B70h case    6:*/		return 0x82125B74;
		  /* 82125B74h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82125B74h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125B74h case    7:*/		return 0x82125B78;
		  /* 82125B78h */ case    8:  		/* bc 12, CR0_EQ, 124 */
		/* 82125B78h case    8:*/		if ( regs.CR[0].eq ) { return 0x82125BF4;  }
		/* 82125B78h case    8:*/		return 0x82125B7C;
		  /* 82125B7Ch */ case    9:  		/* lis R11, -32253 */
		/* 82125B7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125B7Ch case    9:*/		return 0x82125B80;
		  /* 82125B80h */ case   10:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125B80h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125B80h case   10:*/		return 0x82125B84;
		  /* 82125B84h */ case   11:  		/* li R5, 3046 */
		/* 82125B84h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBE6);
		/* 82125B84h case   11:*/		return 0x82125B88;
		  /* 82125B88h */ case   12:  		/* addi R6, R11, 13168 */
		/* 82125B88h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3370);
		/* 82125B88h case   12:*/		return 0x82125B8C;
		  /* 82125B8Ch */ case   13:  		/* mr R4, R29 */
		/* 82125B8Ch case   13:*/		regs.R4 = regs.R29;
		/* 82125B8Ch case   13:*/		return 0x82125B90;
		  /* 82125B90h */ case   14:  		/* mr R3, R31 */
		/* 82125B90h case   14:*/		regs.R3 = regs.R31;
		/* 82125B90h case   14:*/		return 0x82125B94;
		  /* 82125B94h */ case   15:  		/* bl -49908 */
		/* 82125B94h case   15:*/		regs.LR = 0x82125B98; return 0x821198A0;
		/* 82125B94h case   15:*/		return 0x82125B98;
	}
	return 0x82125B98;
} // Block from 82125B58h-82125B98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82125B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125B98);
		  /* 82125B98h */ case    0:  		/* cmpwi CR6, R25, 3 */
		/* 82125B98h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 82125B98h case    0:*/		return 0x82125B9C;
		  /* 82125B9Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82125B9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82125BA8;  }
		/* 82125B9Ch case    1:*/		return 0x82125BA0;
		  /* 82125BA0h */ case    2:  		/* cmpwi CR6, R25, 4 */
		/* 82125BA0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 82125BA0h case    2:*/		return 0x82125BA4;
		  /* 82125BA4h */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 82125BA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82125BE4;  }
		/* 82125BA4h case    3:*/		return 0x82125BA8;
	}
	return 0x82125BA8;
} // Block from 82125B98h-82125BA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125BA8);
		  /* 82125BA8h */ case    0:  		/* mr R3, R31 */
		/* 82125BA8h case    0:*/		regs.R3 = regs.R31;
		/* 82125BA8h case    0:*/		return 0x82125BAC;
		  /* 82125BACh */ case    1:  		/* lwz R4, <#[R27 + 48]> */
		/* 82125BACh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82125BACh case    1:*/		return 0x82125BB0;
		  /* 82125BB0h */ case    2:  		/* bl -47280 */
		/* 82125BB0h case    2:*/		regs.LR = 0x82125BB4; return 0x8211A300;
		/* 82125BB0h case    2:*/		return 0x82125BB4;
		  /* 82125BB4h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82125BB4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82125BB4h case    3:*/		return 0x82125BB8;
		  /* 82125BB8h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 82125BB8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82125BE4;  }
		/* 82125BB8h case    4:*/		return 0x82125BBC;
		  /* 82125BBCh */ case    5:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125BBCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125BBCh case    5:*/		return 0x82125BC0;
		  /* 82125BC0h */ case    6:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125BC0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125BC0h case    6:*/		return 0x82125BC4;
		  /* 82125BC4h */ case    7:  		/* addi R10, R1, 176 */
		/* 82125BC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125BC4h case    7:*/		return 0x82125BC8;
		  /* 82125BC8h */ case    8:  		/* lis R9, -32253 */
		/* 82125BC8h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125BC8h case    8:*/		return 0x82125BCC;
		  /* 82125BCCh */ case    9:  		/* li R5, 3038 */
		/* 82125BCCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xBDE);
		/* 82125BCCh case    9:*/		return 0x82125BD0;
		  /* 82125BD0h */ case   10:  		/* addi R6, R9, 13140 */
		/* 82125BD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3354);
		/* 82125BD0h case   10:*/		return 0x82125BD4;
		  /* 82125BD4h */ case   11:  		/* mr R4, R29 */
		/* 82125BD4h case   11:*/		regs.R4 = regs.R29;
		/* 82125BD4h case   11:*/		return 0x82125BD8;
		  /* 82125BD8h */ case   12:  		/* mr R3, R31 */
		/* 82125BD8h case   12:*/		regs.R3 = regs.R31;
		/* 82125BD8h case   12:*/		return 0x82125BDC;
		  /* 82125BDCh */ case   13:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125BDCh case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125BDCh case   13:*/		return 0x82125BE0;
		  /* 82125BE0h */ case   14:  		/* bl -49984 */
		/* 82125BE0h case   14:*/		regs.LR = 0x82125BE4; return 0x821198A0;
		/* 82125BE0h case   14:*/		return 0x82125BE4;
	}
	return 0x82125BE4;
} // Block from 82125BA8h-82125BE4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125BE4);
		  /* 82125BE4h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 82125BE4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82125BE4h case    0:*/		return 0x82125BE8;
		  /* 82125BE8h */ case    1:  		/* bc 12, CR6_EQ, 308 */
		/* 82125BE8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82125D1C;  }
		/* 82125BE8h case    1:*/		return 0x82125BEC;
		  /* 82125BECh */ case    2:  		/* cmpwi CR6, R25, 9 */
		/* 82125BECh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 82125BECh case    2:*/		return 0x82125BF0;
		  /* 82125BF0h */ case    3:  		/* bc 12, CR6_EQ, 300 */
		/* 82125BF0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82125D1C;  }
		/* 82125BF0h case    3:*/		return 0x82125BF4;
	}
	return 0x82125BF4;
} // Block from 82125BE4h-82125BF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125BF4);
		  /* 82125BF4h */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 82125BF4h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 82125BF4h case    0:*/		return 0x82125BF8;
		  /* 82125BF8h */ case    1:  		/* bc 12, CR0_EQ, 64 */
		/* 82125BF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125C38;  }
		/* 82125BF8h case    1:*/		return 0x82125BFC;
		  /* 82125BFCh */ case    2:  		/* cmpwi CR6, R25, 3 */
		/* 82125BFCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 82125BFCh case    2:*/		return 0x82125C00;
		  /* 82125C00h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 82125C00h case    3:*/		if ( regs.CR[6].eq ) { return 0x82125C38;  }
		/* 82125C00h case    3:*/		return 0x82125C04;
		  /* 82125C04h */ case    4:  		/* cmpwi CR6, R25, 4 */
		/* 82125C04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 82125C04h case    4:*/		return 0x82125C08;
		  /* 82125C08h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 82125C08h case    5:*/		if ( regs.CR[6].eq ) { return 0x82125C38;  }
		/* 82125C08h case    5:*/		return 0x82125C0C;
		  /* 82125C0Ch */ case    6:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125C0Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125C0Ch case    6:*/		return 0x82125C10;
		  /* 82125C10h */ case    7:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125C10h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125C10h case    7:*/		return 0x82125C14;
		  /* 82125C14h */ case    8:  		/* addi R10, R1, 176 */
		/* 82125C14h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125C14h case    8:*/		return 0x82125C18;
		  /* 82125C18h */ case    9:  		/* lis R9, -32253 */
		/* 82125C18h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125C18h case    9:*/		return 0x82125C1C;
		  /* 82125C1Ch */ case   10:  		/* li R5, 3007 */
		/* 82125C1Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBBF);
		/* 82125C1Ch case   10:*/		return 0x82125C20;
		  /* 82125C20h */ case   11:  		/* addi R6, R9, 13100 */
		/* 82125C20h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x332C);
		/* 82125C20h case   11:*/		return 0x82125C24;
		  /* 82125C24h */ case   12:  		/* mr R4, R29 */
		/* 82125C24h case   12:*/		regs.R4 = regs.R29;
		/* 82125C24h case   12:*/		return 0x82125C28;
		  /* 82125C28h */ case   13:  		/* mr R3, R31 */
		/* 82125C28h case   13:*/		regs.R3 = regs.R31;
		/* 82125C28h case   13:*/		return 0x82125C2C;
		  /* 82125C2Ch */ case   14:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125C2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125C2Ch case   14:*/		return 0x82125C30;
		  /* 82125C30h */ case   15:  		/* bl -50064 */
		/* 82125C30h case   15:*/		regs.LR = 0x82125C34; return 0x821198A0;
		/* 82125C30h case   15:*/		return 0x82125C34;
		  /* 82125C34h */ case   16:  		/* rlwinm R26, R26, 0, 31, 29 */
		/* 82125C34h case   16:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R26,regs.R26);
		/* 82125C34h case   16:*/		return 0x82125C38;
	}
	return 0x82125C38;
} // Block from 82125BF4h-82125C38h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82125C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125C38);
		  /* 82125C38h */ case    0:  		/* rlwinm. R11, R26, 0, 25, 25 */
		/* 82125C38h case    0:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R26);
		/* 82125C38h case    0:*/		return 0x82125C3C;
		  /* 82125C3Ch */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 82125C3Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82125C74;  }
		/* 82125C3Ch case    1:*/		return 0x82125C40;
		  /* 82125C40h */ case    2:  		/* cmpwi CR6, R25, 2 */
		/* 82125C40h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 82125C40h case    2:*/		return 0x82125C44;
		  /* 82125C44h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82125C44h case    3:*/		if ( regs.CR[6].eq ) { return 0x82125C74;  }
		/* 82125C44h case    3:*/		return 0x82125C48;
		  /* 82125C48h */ case    4:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125C48h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125C48h case    4:*/		return 0x82125C4C;
		  /* 82125C4Ch */ case    5:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125C4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125C4Ch case    5:*/		return 0x82125C50;
		  /* 82125C50h */ case    6:  		/* addi R10, R1, 176 */
		/* 82125C50h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125C50h case    6:*/		return 0x82125C54;
		  /* 82125C54h */ case    7:  		/* lis R9, -32253 */
		/* 82125C54h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125C54h case    7:*/		return 0x82125C58;
		  /* 82125C58h */ case    8:  		/* li R5, 3047 */
		/* 82125C58h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBE7);
		/* 82125C58h case    8:*/		return 0x82125C5C;
		  /* 82125C5Ch */ case    9:  		/* addi R6, R9, 13060 */
		/* 82125C5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3304);
		/* 82125C5Ch case    9:*/		return 0x82125C60;
		  /* 82125C60h */ case   10:  		/* mr R4, R29 */
		/* 82125C60h case   10:*/		regs.R4 = regs.R29;
		/* 82125C60h case   10:*/		return 0x82125C64;
		  /* 82125C64h */ case   11:  		/* mr R3, R31 */
		/* 82125C64h case   11:*/		regs.R3 = regs.R31;
		/* 82125C64h case   11:*/		return 0x82125C68;
		  /* 82125C68h */ case   12:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125C68h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125C68h case   12:*/		return 0x82125C6C;
		  /* 82125C6Ch */ case   13:  		/* bl -50124 */
		/* 82125C6Ch case   13:*/		regs.LR = 0x82125C70; return 0x821198A0;
		/* 82125C6Ch case   13:*/		return 0x82125C70;
		  /* 82125C70h */ case   14:  		/* rlwinm R26, R26, 0, 26, 24 */
		/* 82125C70h case   14:*/		cpu::op::rlwinm<0,0,26,24>(regs,&regs.R26,regs.R26);
		/* 82125C70h case   14:*/		return 0x82125C74;
	}
	return 0x82125C74;
} // Block from 82125C38h-82125C74h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125C74);
		  /* 82125C74h */ case    0:  		/* rlwinm. R11, R26, 0, 25, 25 */
		/* 82125C74h case    0:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R26);
		/* 82125C74h case    0:*/		return 0x82125C78;
		  /* 82125C78h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 82125C78h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125CB0;  }
		/* 82125C78h case    1:*/		return 0x82125C7C;
		  /* 82125C7Ch */ case    2:  		/* rlwinm. R11, R26, 0, 26, 26 */
		/* 82125C7Ch case    2:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R26);
		/* 82125C7Ch case    2:*/		return 0x82125C80;
		  /* 82125C80h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 82125C80h case    3:*/		if ( regs.CR[0].eq ) { return 0x82125CB0;  }
		/* 82125C80h case    3:*/		return 0x82125C84;
		  /* 82125C84h */ case    4:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125C84h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125C84h case    4:*/		return 0x82125C88;
		  /* 82125C88h */ case    5:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125C88h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125C88h case    5:*/		return 0x82125C8C;
		  /* 82125C8Ch */ case    6:  		/* addi R10, R1, 176 */
		/* 82125C8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125C8Ch case    6:*/		return 0x82125C90;
		  /* 82125C90h */ case    7:  		/* lis R9, -32253 */
		/* 82125C90h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125C90h case    7:*/		return 0x82125C94;
		  /* 82125C94h */ case    8:  		/* li R5, 3062 */
		/* 82125C94h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBF6);
		/* 82125C94h case    8:*/		return 0x82125C98;
		  /* 82125C98h */ case    9:  		/* addi R6, R9, 13016 */
		/* 82125C98h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x32D8);
		/* 82125C98h case    9:*/		return 0x82125C9C;
		  /* 82125C9Ch */ case   10:  		/* mr R4, R29 */
		/* 82125C9Ch case   10:*/		regs.R4 = regs.R29;
		/* 82125C9Ch case   10:*/		return 0x82125CA0;
		  /* 82125CA0h */ case   11:  		/* mr R3, R31 */
		/* 82125CA0h case   11:*/		regs.R3 = regs.R31;
		/* 82125CA0h case   11:*/		return 0x82125CA4;
		  /* 82125CA4h */ case   12:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125CA4h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125CA4h case   12:*/		return 0x82125CA8;
		  /* 82125CA8h */ case   13:  		/* bl -50184 */
		/* 82125CA8h case   13:*/		regs.LR = 0x82125CAC; return 0x821198A0;
		/* 82125CA8h case   13:*/		return 0x82125CAC;
		  /* 82125CACh */ case   14:  		/* rlwinm R26, R26, 0, 26, 24 */
		/* 82125CACh case   14:*/		cpu::op::rlwinm<0,0,26,24>(regs,&regs.R26,regs.R26);
		/* 82125CACh case   14:*/		return 0x82125CB0;
	}
	return 0x82125CB0;
} // Block from 82125C74h-82125CB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125CB0);
		  /* 82125CB0h */ case    0:  		/* rlwinm. R11, R26, 0, 31, 31 */
		/* 82125CB0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R26);
		/* 82125CB0h case    0:*/		return 0x82125CB4;
		  /* 82125CB4h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 82125CB4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125CE4;  }
		/* 82125CB4h case    1:*/		return 0x82125CB8;
		  /* 82125CB8h */ case    2:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125CB8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125CB8h case    2:*/		return 0x82125CBC;
		  /* 82125CBCh */ case    3:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125CBCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125CBCh case    3:*/		return 0x82125CC0;
		  /* 82125CC0h */ case    4:  		/* addi R10, R1, 176 */
		/* 82125CC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125CC0h case    4:*/		return 0x82125CC4;
		  /* 82125CC4h */ case    5:  		/* lis R9, -32253 */
		/* 82125CC4h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125CC4h case    5:*/		return 0x82125CC8;
		  /* 82125CC8h */ case    6:  		/* li R5, 3006 */
		/* 82125CC8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xBBE);
		/* 82125CC8h case    6:*/		return 0x82125CCC;
		  /* 82125CCCh */ case    7:  		/* addi R6, R9, 12976 */
		/* 82125CCCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x32B0);
		/* 82125CCCh case    7:*/		return 0x82125CD0;
		  /* 82125CD0h */ case    8:  		/* mr R4, R29 */
		/* 82125CD0h case    8:*/		regs.R4 = regs.R29;
		/* 82125CD0h case    8:*/		return 0x82125CD4;
		  /* 82125CD4h */ case    9:  		/* mr R3, R31 */
		/* 82125CD4h case    9:*/		regs.R3 = regs.R31;
		/* 82125CD4h case    9:*/		return 0x82125CD8;
		  /* 82125CD8h */ case   10:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125CD8h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125CD8h case   10:*/		return 0x82125CDC;
		  /* 82125CDCh */ case   11:  		/* bl -50236 */
		/* 82125CDCh case   11:*/		regs.LR = 0x82125CE0; return 0x821198A0;
		/* 82125CDCh case   11:*/		return 0x82125CE0;
		  /* 82125CE0h */ case   12:  		/* rlwinm R26, R26, 0, 0, 30 */
		/* 82125CE0h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R26,regs.R26);
		/* 82125CE0h case   12:*/		return 0x82125CE4;
	}
	return 0x82125CE4;
} // Block from 82125CB0h-82125CE4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82125CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125CE4);
		  /* 82125CE4h */ case    0:  		/* rlwinm. R11, R26, 0, 28, 28 */
		/* 82125CE4h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R26);
		/* 82125CE4h case    0:*/		return 0x82125CE8;
		  /* 82125CE8h */ case    1:  		/* bc 12, CR0_EQ, 184 */
		/* 82125CE8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125DA0;  }
		/* 82125CE8h case    1:*/		return 0x82125CEC;
		  /* 82125CECh */ case    2:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125CECh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125CECh case    2:*/		return 0x82125CF0;
		  /* 82125CF0h */ case    3:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125CF0h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125CF0h case    3:*/		return 0x82125CF4;
		  /* 82125CF4h */ case    4:  		/* addi R10, R1, 176 */
		/* 82125CF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125CF4h case    4:*/		return 0x82125CF8;
		  /* 82125CF8h */ case    5:  		/* lis R9, -32253 */
		/* 82125CF8h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125CF8h case    5:*/		return 0x82125CFC;
		  /* 82125CFCh */ case    6:  		/* li R5, 3054 */
		/* 82125CFCh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xBEE);
		/* 82125CFCh case    6:*/		return 0x82125D00;
		  /* 82125D00h */ case    7:  		/* addi R6, R9, 12936 */
		/* 82125D00h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3288);
		/* 82125D00h case    7:*/		return 0x82125D04;
		  /* 82125D04h */ case    8:  		/* mr R4, R29 */
		/* 82125D04h case    8:*/		regs.R4 = regs.R29;
		/* 82125D04h case    8:*/		return 0x82125D08;
		  /* 82125D08h */ case    9:  		/* mr R3, R31 */
		/* 82125D08h case    9:*/		regs.R3 = regs.R31;
		/* 82125D08h case    9:*/		return 0x82125D0C;
		  /* 82125D0Ch */ case   10:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125D0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125D0Ch case   10:*/		return 0x82125D10;
		  /* 82125D10h */ case   11:  		/* bl -50288 */
		/* 82125D10h case   11:*/		regs.LR = 0x82125D14; return 0x821198A0;
		/* 82125D10h case   11:*/		return 0x82125D14;
		  /* 82125D14h */ case   12:  		/* rlwinm R26, R26, 0, 29, 27 */
		/* 82125D14h case   12:*/		cpu::op::rlwinm<0,0,29,27>(regs,&regs.R26,regs.R26);
		/* 82125D14h case   12:*/		return 0x82125D18;
		  /* 82125D18h */ case   13:  		/* b 136 */
		/* 82125D18h case   13:*/		return 0x82125DA0;
		/* 82125D18h case   13:*/		return 0x82125D1C;
	}
	return 0x82125D1C;
} // Block from 82125CE4h-82125D1Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82125D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125D1C);
		  /* 82125D1Ch */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 82125D1Ch case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 82125D1Ch case    0:*/		return 0x82125D20;
		  /* 82125D20h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 82125D20h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125D58;  }
		/* 82125D20h case    1:*/		return 0x82125D24;
		  /* 82125D24h */ case    2:  		/* rlwinm. R11, R26, 0, 31, 31 */
		/* 82125D24h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R26);
		/* 82125D24h case    2:*/		return 0x82125D28;
		  /* 82125D28h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 82125D28h case    3:*/		if ( regs.CR[0].eq ) { return 0x82125D58;  }
		/* 82125D28h case    3:*/		return 0x82125D2C;
		  /* 82125D2Ch */ case    4:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125D2Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125D2Ch case    4:*/		return 0x82125D30;
		  /* 82125D30h */ case    5:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125D30h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125D30h case    5:*/		return 0x82125D34;
		  /* 82125D34h */ case    6:  		/* addi R10, R1, 176 */
		/* 82125D34h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125D34h case    6:*/		return 0x82125D38;
		  /* 82125D38h */ case    7:  		/* lis R9, -32253 */
		/* 82125D38h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125D38h case    7:*/		return 0x82125D3C;
		  /* 82125D3Ch */ case    8:  		/* li R5, 3007 */
		/* 82125D3Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBBF);
		/* 82125D3Ch case    8:*/		return 0x82125D40;
		  /* 82125D40h */ case    9:  		/* addi R6, R9, 12892 */
		/* 82125D40h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x325C);
		/* 82125D40h case    9:*/		return 0x82125D44;
		  /* 82125D44h */ case   10:  		/* mr R4, R29 */
		/* 82125D44h case   10:*/		regs.R4 = regs.R29;
		/* 82125D44h case   10:*/		return 0x82125D48;
		  /* 82125D48h */ case   11:  		/* mr R3, R31 */
		/* 82125D48h case   11:*/		regs.R3 = regs.R31;
		/* 82125D48h case   11:*/		return 0x82125D4C;
		  /* 82125D4Ch */ case   12:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125D4Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125D4Ch case   12:*/		return 0x82125D50;
		  /* 82125D50h */ case   13:  		/* bl -50352 */
		/* 82125D50h case   13:*/		regs.LR = 0x82125D54; return 0x821198A0;
		/* 82125D50h case   13:*/		return 0x82125D54;
		  /* 82125D54h */ case   14:  		/* rlwinm R26, R26, 0, 31, 29 */
		/* 82125D54h case   14:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R26,regs.R26);
		/* 82125D54h case   14:*/		return 0x82125D58;
	}
	return 0x82125D58;
} // Block from 82125D1Ch-82125D58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125D58);
		  /* 82125D58h */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 82125D58h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 82125D58h case    0:*/		return 0x82125D5C;
		  /* 82125D5Ch */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 82125D5Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82125D94;  }
		/* 82125D5Ch case    1:*/		return 0x82125D60;
		  /* 82125D60h */ case    2:  		/* rlwinm. R11, R26, 0, 25, 25 */
		/* 82125D60h case    2:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R26);
		/* 82125D60h case    2:*/		return 0x82125D64;
		  /* 82125D64h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 82125D64h case    3:*/		if ( regs.CR[0].eq ) { return 0x82125D94;  }
		/* 82125D64h case    3:*/		return 0x82125D68;
		  /* 82125D68h */ case    4:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125D68h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125D68h case    4:*/		return 0x82125D6C;
		  /* 82125D6Ch */ case    5:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125D6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125D6Ch case    5:*/		return 0x82125D70;
		  /* 82125D70h */ case    6:  		/* addi R10, R1, 176 */
		/* 82125D70h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125D70h case    6:*/		return 0x82125D74;
		  /* 82125D74h */ case    7:  		/* lis R9, -32253 */
		/* 82125D74h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125D74h case    7:*/		return 0x82125D78;
		  /* 82125D78h */ case    8:  		/* li R5, 3007 */
		/* 82125D78h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xBBF);
		/* 82125D78h case    8:*/		return 0x82125D7C;
		  /* 82125D7Ch */ case    9:  		/* addi R6, R9, 12844 */
		/* 82125D7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x322C);
		/* 82125D7Ch case    9:*/		return 0x82125D80;
		  /* 82125D80h */ case   10:  		/* mr R4, R29 */
		/* 82125D80h case   10:*/		regs.R4 = regs.R29;
		/* 82125D80h case   10:*/		return 0x82125D84;
		  /* 82125D84h */ case   11:  		/* mr R3, R31 */
		/* 82125D84h case   11:*/		regs.R3 = regs.R31;
		/* 82125D84h case   11:*/		return 0x82125D88;
		  /* 82125D88h */ case   12:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125D88h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125D88h case   12:*/		return 0x82125D8C;
		  /* 82125D8Ch */ case   13:  		/* bl -50412 */
		/* 82125D8Ch case   13:*/		regs.LR = 0x82125D90; return 0x821198A0;
		/* 82125D8Ch case   13:*/		return 0x82125D90;
		  /* 82125D90h */ case   14:  		/* rlwinm R26, R26, 0, 31, 29 */
		/* 82125D90h case   14:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R26,regs.R26);
		/* 82125D90h case   14:*/		return 0x82125D94;
	}
	return 0x82125D94;
} // Block from 82125D58h-82125D94h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125D94);
		  /* 82125D94h */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 82125D94h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 82125D94h case    0:*/		return 0x82125D98;
		  /* 82125D98h */ case    1:  		/* bc 4, CR0_EQ, 8 */
		/* 82125D98h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82125DA0;  }
		/* 82125D98h case    1:*/		return 0x82125D9C;
		  /* 82125D9Ch */ case    2:  		/* ori R26, R26, 65 */
		/* 82125D9Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0x41);
		/* 82125D9Ch case    2:*/		return 0x82125DA0;
	}
	return 0x82125DA0;
} // Block from 82125D94h-82125DA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82125DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125DA0);
		  /* 82125DA0h */ case    0:  		/* rlwinm. R11, R26, 0, 29, 29 */
		/* 82125DA0h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R26);
		/* 82125DA0h case    0:*/		return 0x82125DA4;
		  /* 82125DA4h */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 82125DA4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82125DEC;  }
		/* 82125DA4h case    1:*/		return 0x82125DA8;
		  /* 82125DA8h */ case    2:  		/* cmpwi CR6, R25, 3 */
		/* 82125DA8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 82125DA8h case    2:*/		return 0x82125DAC;
		  /* 82125DACh */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 82125DACh case    3:*/		if ( regs.CR[6].eq ) { return 0x82125DEC;  }
		/* 82125DACh case    3:*/		return 0x82125DB0;
		  /* 82125DB0h */ case    4:  		/* cmpwi CR6, R25, 4 */
		/* 82125DB0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 82125DB0h case    4:*/		return 0x82125DB4;
		  /* 82125DB4h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 82125DB4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82125DEC;  }
		/* 82125DB4h case    5:*/		return 0x82125DB8;
		  /* 82125DB8h */ case    6:  		/* cmpwi CR6, R25, 2 */
		/* 82125DB8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 82125DB8h case    6:*/		return 0x82125DBC;
		  /* 82125DBCh */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 82125DBCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82125DEC;  }
		/* 82125DBCh case    7:*/		return 0x82125DC0;
		  /* 82125DC0h */ case    8:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82125DC0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82125DC0h case    8:*/		return 0x82125DC4;
		  /* 82125DC4h */ case    9:  		/* lwz R7, <#[R29 + 8]> */
		/* 82125DC4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82125DC4h case    9:*/		return 0x82125DC8;
		  /* 82125DC8h */ case   10:  		/* addi R10, R1, 176 */
		/* 82125DC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82125DC8h case   10:*/		return 0x82125DCC;
		  /* 82125DCCh */ case   11:  		/* lis R9, -32253 */
		/* 82125DCCh case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82125DCCh case   11:*/		return 0x82125DD0;
		  /* 82125DD0h */ case   12:  		/* li R5, 3008 */
		/* 82125DD0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0xBC0);
		/* 82125DD0h case   12:*/		return 0x82125DD4;
		  /* 82125DD4h */ case   13:  		/* addi R6, R9, 12804 */
		/* 82125DD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3204);
		/* 82125DD4h case   13:*/		return 0x82125DD8;
		  /* 82125DD8h */ case   14:  		/* mr R4, R29 */
		/* 82125DD8h case   14:*/		regs.R4 = regs.R29;
		/* 82125DD8h case   14:*/		return 0x82125DDC;
		  /* 82125DDCh */ case   15:  		/* mr R3, R31 */
		/* 82125DDCh case   15:*/		regs.R3 = regs.R31;
		/* 82125DDCh case   15:*/		return 0x82125DE0;
		  /* 82125DE0h */ case   16:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82125DE0h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82125DE0h case   16:*/		return 0x82125DE4;
		  /* 82125DE4h */ case   17:  		/* bl -50500 */
		/* 82125DE4h case   17:*/		regs.LR = 0x82125DE8; return 0x821198A0;
		/* 82125DE4h case   17:*/		return 0x82125DE8;
		  /* 82125DE8h */ case   18:  		/* rlwinm R26, R26, 0, 30, 28 */
		/* 82125DE8h case   18:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R26,regs.R26);
		/* 82125DE8h case   18:*/		return 0x82125DEC;
	}
	return 0x82125DEC;
} // Block from 82125DA0h-82125DECh (19 instructions)

//////////////////////////////////////////////////////
// Block at 82125DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125DEC);
		  /* 82125DECh */ case    0:  		/* cmpwi CR6, R25, 5 */
		/* 82125DECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000005);
		/* 82125DECh case    0:*/		return 0x82125DF0;
		  /* 82125DF0h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82125DF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82125E08;  }
		/* 82125DF0h case    1:*/		return 0x82125DF4;
		  /* 82125DF4h */ case    2:  		/* li R5, 1 */
		/* 82125DF4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82125DF4h case    2:*/		return 0x82125DF8;
		  /* 82125DF8h */ case    3:  		/* lwz R4, <#[R27 + 48]> */
		/* 82125DF8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82125DF8h case    3:*/		return 0x82125DFC;
		  /* 82125DFCh */ case    4:  		/* mr R3, R31 */
		/* 82125DFCh case    4:*/		regs.R3 = regs.R31;
		/* 82125DFCh case    4:*/		return 0x82125E00;
		  /* 82125E00h */ case    5:  		/* bl -48312 */
		/* 82125E00h case    5:*/		regs.LR = 0x82125E04; return 0x8211A148;
		/* 82125E00h case    5:*/		return 0x82125E04;
		  /* 82125E04h */ case    6:  		/* ori R26, R26, 64 */
		/* 82125E04h case    6:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0x40);
		/* 82125E04h case    6:*/		return 0x82125E08;
	}
	return 0x82125E08;
} // Block from 82125DECh-82125E08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82125E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E08);
		  /* 82125E08h */ case    0:  		/* stw R26, <#[R27 + 44]> */
		/* 82125E08h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R27 + 0x0000002C) );
		/* 82125E08h case    0:*/		return 0x82125E0C;
		  /* 82125E0Ch */ case    1:  		/* lwz R3, <#[R22 + 28]> */
		/* 82125E0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R22 + 0x0000001C) );
		/* 82125E0Ch case    1:*/		return 0x82125E10;
		  /* 82125E10h */ case    2:  		/* bl -379560 */
		/* 82125E10h case    2:*/		regs.LR = 0x82125E14; return 0x820C9368;
		/* 82125E10h case    2:*/		return 0x82125E14;
		  /* 82125E14h */ case    3:  		/* rlwinm. R24, R26, 0, 25, 25 */
		/* 82125E14h case    3:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R24,regs.R26);
		/* 82125E14h case    3:*/		return 0x82125E18;
		  /* 82125E18h */ case    4:  		/* stw R3, <#[R27 + 72]> */
		/* 82125E18h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000048) );
		/* 82125E18h case    4:*/		return 0x82125E1C;
		  /* 82125E1Ch */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 82125E1Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82125E38;  }
		/* 82125E1Ch case    5:*/		return 0x82125E20;
		  /* 82125E20h */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 82125E20h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82125E20h case    6:*/		return 0x82125E24;
		  /* 82125E24h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82125E24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82125E24h case    7:*/		return 0x82125E28;
		  /* 82125E28h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82125E28h case    8:*/		if ( regs.CR[6].eq ) { return 0x82125E38;  }
		/* 82125E28h case    8:*/		return 0x82125E2C;
		  /* 82125E2Ch */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 82125E2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82125E2Ch case    9:*/		return 0x82125E30;
		  /* 82125E30h */ case   10:  		/* stw R11, <#[R27 + 68]> */
		/* 82125E30h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 82125E30h case   10:*/		return 0x82125E34;
		  /* 82125E34h */ case   11:  		/* b 8 */
		/* 82125E34h case   11:*/		return 0x82125E3C;
		/* 82125E34h case   11:*/		return 0x82125E38;
	}
	return 0x82125E38;
} // Block from 82125E08h-82125E38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E38);
		  /* 82125E38h */ case    0:  		/* stw R20, <#[R27 + 68]> */
		/* 82125E38h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R27 + 0x00000044) );
		/* 82125E38h case    0:*/		return 0x82125E3C;
	}
	return 0x82125E3C;
} // Block from 82125E38h-82125E3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E3C);
		  /* 82125E3Ch */ case    0:  		/* mr R23, R20 */
		/* 82125E3Ch case    0:*/		regs.R23 = regs.R20;
		/* 82125E3Ch case    0:*/		return 0x82125E40;
		  /* 82125E40h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 82125E40h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82125E40h case    1:*/		return 0x82125E44;
		  /* 82125E44h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 82125E44h case    2:*/		if ( regs.CR[6].eq ) { return 0x82125EC0;  }
		/* 82125E44h case    2:*/		return 0x82125E48;
		  /* 82125E48h */ case    3:  		/* lwz R11, <#[R21 + 4]> */
		/* 82125E48h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82125E48h case    3:*/		return 0x82125E4C;
		  /* 82125E4Ch */ case    4:  		/* cmpwi CR6, R11, 14 */
		/* 82125E4Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82125E4Ch case    4:*/		return 0x82125E50;
		  /* 82125E50h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82125E50h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82125E60;  }
		/* 82125E50h case    5:*/		return 0x82125E54;
		  /* 82125E54h */ case    6:  		/* li R7, 0 */
		/* 82125E54h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82125E54h case    6:*/		return 0x82125E58;
		  /* 82125E58h */ case    7:  		/* mr R5, R21 */
		/* 82125E58h case    7:*/		regs.R5 = regs.R21;
		/* 82125E58h case    7:*/		return 0x82125E5C;
		  /* 82125E5Ch */ case    8:  		/* b 404 */
		/* 82125E5Ch case    8:*/		return 0x82125FF0;
		/* 82125E5Ch case    8:*/		return 0x82125E60;
	}
	return 0x82125E60;
} // Block from 82125E3Ch-82125E60h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82125E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E60);
		  /* 82125E60h */ case    0:  		/* lwz R28, <#[R27 + 52]> */
		/* 82125E60h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000034) );
		/* 82125E60h case    0:*/		return 0x82125E64;
		  /* 82125E64h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82125E64h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82125E64h case    1:*/		return 0x82125E68;
		  /* 82125E68h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82125E68h case    2:*/		if ( regs.CR[6].eq ) { return 0x82125E74;  }
		/* 82125E68h case    2:*/		return 0x82125E6C;
		  /* 82125E6Ch */ case    3:  		/* lwz R30, <#[R28 + 16]> */
		/* 82125E6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000010) );
		/* 82125E6Ch case    3:*/		return 0x82125E70;
		  /* 82125E70h */ case    4:  		/* b 8 */
		/* 82125E70h case    4:*/		return 0x82125E78;
		/* 82125E70h case    4:*/		return 0x82125E74;
	}
	return 0x82125E74;
} // Block from 82125E60h-82125E74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82125E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E74);
		  /* 82125E74h */ case    0:  		/* mr R30, R20 */
		/* 82125E74h case    0:*/		regs.R30 = regs.R20;
		/* 82125E74h case    0:*/		return 0x82125E78;
	}
	return 0x82125E78;
} // Block from 82125E74h-82125E78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125E78);
		  /* 82125E78h */ case    0:  		/* mr R4, R30 */
		/* 82125E78h case    0:*/		regs.R4 = regs.R30;
		/* 82125E78h case    0:*/		return 0x82125E7C;
		  /* 82125E7Ch */ case    1:  		/* mr R3, R31 */
		/* 82125E7Ch case    1:*/		regs.R3 = regs.R31;
		/* 82125E7Ch case    1:*/		return 0x82125E80;
		  /* 82125E80h */ case    2:  		/* bl -47792 */
		/* 82125E80h case    2:*/		regs.LR = 0x82125E84; return 0x8211A3D0;
		/* 82125E80h case    2:*/		return 0x82125E84;
		  /* 82125E84h */ case    3:  		/* lwz R11, <#[R27 + 20]> */
		/* 82125E84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82125E84h case    3:*/		return 0x82125E88;
		  /* 82125E88h */ case    4:  		/* cmplw CR6, R11, R3 */
		/* 82125E88h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 82125E88h case    4:*/		return 0x82125E8C;
		  /* 82125E8Ch */ case    5:  		/* mr R3, R31 */
		/* 82125E8Ch case    5:*/		regs.R3 = regs.R31;
		/* 82125E8Ch case    5:*/		return 0x82125E90;
		  /* 82125E90h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 82125E90h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82125EA0;  }
		/* 82125E90h case    6:*/		return 0x82125E94;
		  /* 82125E94h */ case    7:  		/* li R7, 1 */
		/* 82125E94h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82125E94h case    7:*/		return 0x82125E98;
		  /* 82125E98h */ case    8:  		/* mr R5, R28 */
		/* 82125E98h case    8:*/		regs.R5 = regs.R28;
		/* 82125E98h case    8:*/		return 0x82125E9C;
		  /* 82125E9Ch */ case    9:  		/* b 344 */
		/* 82125E9Ch case    9:*/		return 0x82125FF4;
		/* 82125E9Ch case    9:*/		return 0x82125EA0;
	}
	return 0x82125EA0;
} // Block from 82125E78h-82125EA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82125EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125EA0);
		  /* 82125EA0h */ case    0:  		/* li R8, 1 */
		/* 82125EA0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82125EA0h case    0:*/		return 0x82125EA4;
		  /* 82125EA4h */ case    1:  		/* lwz R6, <#[R27 + 48]> */
		/* 82125EA4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000030) );
		/* 82125EA4h case    1:*/		return 0x82125EA8;
		  /* 82125EA8h */ case    2:  		/* mr R7, R30 */
		/* 82125EA8h case    2:*/		regs.R7 = regs.R30;
		/* 82125EA8h case    2:*/		return 0x82125EAC;
		  /* 82125EACh */ case    3:  		/* lwz R5, <#[R29 + 8]> */
		/* 82125EACh case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000008) );
		/* 82125EACh case    3:*/		return 0x82125EB0;
		  /* 82125EB0h */ case    4:  		/* mr R4, R29 */
		/* 82125EB0h case    4:*/		regs.R4 = regs.R29;
		/* 82125EB0h case    4:*/		return 0x82125EB4;
		  /* 82125EB4h */ case    5:  		/* bl -34588 */
		/* 82125EB4h case    5:*/		regs.LR = 0x82125EB8; return 0x8211D798;
		/* 82125EB4h case    5:*/		return 0x82125EB8;
		  /* 82125EB8h */ case    6:  		/* stw R20, <#[R27 + 52]> */
		/* 82125EB8h case    6:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R27 + 0x00000034) );
		/* 82125EB8h case    6:*/		return 0x82125EBC;
		  /* 82125EBCh */ case    7:  		/* b 328 */
		/* 82125EBCh case    7:*/		return 0x82126004;
		/* 82125EBCh case    7:*/		return 0x82125EC0;
	}
	return 0x82125EC0;
} // Block from 82125EA0h-82125EC0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82125EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125EC0);
		  /* 82125EC0h */ case    0:  		/* cmpwi CR6, R25, 9 */
		/* 82125EC0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 82125EC0h case    0:*/		return 0x82125EC4;
		  /* 82125EC4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82125EC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82125EE0;  }
		/* 82125EC4h case    1:*/		return 0x82125EC8;
		  /* 82125EC8h */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 82125EC8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82125EC8h case    2:*/		return 0x82125ECC;
		  /* 82125ECCh */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 82125ECCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82125EE0;  }
		/* 82125ECCh case    3:*/		return 0x82125ED0;
		  /* 82125ED0h */ case    4:  		/* cmpwi CR6, R25, 3 */
		/* 82125ED0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 82125ED0h case    4:*/		return 0x82125ED4;
		  /* 82125ED4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82125ED4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82125EE0;  }
		/* 82125ED4h case    5:*/		return 0x82125ED8;
		  /* 82125ED8h */ case    6:  		/* cmpwi CR6, R25, 4 */
		/* 82125ED8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 82125ED8h case    6:*/		return 0x82125EDC;
		  /* 82125EDCh */ case    7:  		/* bc 4, CR6_EQ, 296 */
		/* 82125EDCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82126004;  }
		/* 82125EDCh case    7:*/		return 0x82125EE0;
	}
	return 0x82125EE0;
} // Block from 82125EC0h-82125EE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82125EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125EE0);
		  /* 82125EE0h */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 82125EE0h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 82125EE0h case    0:*/		return 0x82125EE4;
		  /* 82125EE4h */ case    1:  		/* bc 12, CR0_EQ, 288 */
		/* 82125EE4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82126004;  }
		/* 82125EE4h case    1:*/		return 0x82125EE8;
		  /* 82125EE8h */ case    2:  		/* li R3, 88 */
		/* 82125EE8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82125EE8h case    2:*/		return 0x82125EEC;
		  /* 82125EECh */ case    3:  		/* bl -380100 */
		/* 82125EECh case    3:*/		regs.LR = 0x82125EF0; return 0x820C9228;
		/* 82125EECh case    3:*/		return 0x82125EF0;
		  /* 82125EF0h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82125EF0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125EF0h case    4:*/		return 0x82125EF4;
		  /* 82125EF4h */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 82125EF4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82125F1C;  }
		/* 82125EF4h case    5:*/		return 0x82125EF8;
		  /* 82125EF8h */ case    6:  		/* mr R9, R29 */
		/* 82125EF8h case    6:*/		regs.R9 = regs.R29;
		/* 82125EF8h case    6:*/		return 0x82125EFC;
		  /* 82125EFCh */ case    7:  		/* li R8, 1 */
		/* 82125EFCh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82125EFCh case    7:*/		return 0x82125F00;
		  /* 82125F00h */ case    8:  		/* li R7, 0 */
		/* 82125F00h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82125F00h case    8:*/		return 0x82125F04;
		  /* 82125F04h */ case    9:  		/* li R6, 0 */
		/* 82125F04h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82125F04h case    9:*/		return 0x82125F08;
		  /* 82125F08h */ case   10:  		/* li R5, 0 */
		/* 82125F08h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82125F08h case   10:*/		return 0x82125F0C;
		  /* 82125F0Ch */ case   11:  		/* li R4, 0 */
		/* 82125F0Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82125F0Ch case   11:*/		return 0x82125F10;
		  /* 82125F10h */ case   12:  		/* bl -368520 */
		/* 82125F10h case   12:*/		regs.LR = 0x82125F14; return 0x820CBF88;
		/* 82125F10h case   12:*/		return 0x82125F14;
		  /* 82125F14h */ case   13:  		/* mr R30, R3 */
		/* 82125F14h case   13:*/		regs.R30 = regs.R3;
		/* 82125F14h case   13:*/		return 0x82125F18;
		  /* 82125F18h */ case   14:  		/* b 8 */
		/* 82125F18h case   14:*/		return 0x82125F20;
		/* 82125F18h case   14:*/		return 0x82125F1C;
	}
	return 0x82125F1C;
} // Block from 82125EE0h-82125F1Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82125F1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F1C);
		  /* 82125F1Ch */ case    0:  		/* mr R30, R20 */
		/* 82125F1Ch case    0:*/		regs.R30 = regs.R20;
		/* 82125F1Ch case    0:*/		return 0x82125F20;
	}
	return 0x82125F20;
} // Block from 82125F1Ch-82125F20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F20);
		  /* 82125F20h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82125F20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82125F20h case    0:*/		return 0x82125F24;
		  /* 82125F24h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82125F24h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82125F30;  }
		/* 82125F24h case    1:*/		return 0x82125F28;
		  /* 82125F28h */ case    2:  		/* mr R5, R20 */
		/* 82125F28h case    2:*/		regs.R5 = regs.R20;
		/* 82125F28h case    2:*/		return 0x82125F2C;
		  /* 82125F2Ch */ case    3:  		/* b 192 */
		/* 82125F2Ch case    3:*/		return 0x82125FEC;
		/* 82125F2Ch case    3:*/		return 0x82125F30;
	}
	return 0x82125F30;
} // Block from 82125F20h-82125F30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82125F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F30);
		  /* 82125F30h */ case    0:  		/* li R3, 40 */
		/* 82125F30h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82125F30h case    0:*/		return 0x82125F34;
		  /* 82125F34h */ case    1:  		/* bl -380172 */
		/* 82125F34h case    1:*/		regs.LR = 0x82125F38; return 0x820C9228;
		/* 82125F34h case    1:*/		return 0x82125F38;
		  /* 82125F38h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82125F38h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125F38h case    2:*/		return 0x82125F3C;
		  /* 82125F3Ch */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 82125F3Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82125F60;  }
		/* 82125F3Ch case    3:*/		return 0x82125F40;
		  /* 82125F40h */ case    4:  		/* li R9, 512 */
		/* 82125F40h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82125F40h case    4:*/		return 0x82125F44;
		  /* 82125F44h */ case    5:  		/* li R8, 1 */
		/* 82125F44h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82125F44h case    5:*/		return 0x82125F48;
		  /* 82125F48h */ case    6:  		/* li R7, 1 */
		/* 82125F48h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82125F48h case    6:*/		return 0x82125F4C;
		  /* 82125F4Ch */ case    7:  		/* li R6, 0 */
		/* 82125F4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82125F4Ch case    7:*/		return 0x82125F50;
		  /* 82125F50h */ case    8:  		/* li R5, 6 */
		/* 82125F50h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82125F50h case    8:*/		return 0x82125F54;
		  /* 82125F54h */ case    9:  		/* li R4, 0 */
		/* 82125F54h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82125F54h case    9:*/		return 0x82125F58;
		  /* 82125F58h */ case   10:  		/* bl -373464 */
		/* 82125F58h case   10:*/		regs.LR = 0x82125F5C; return 0x820CAC80;
		/* 82125F58h case   10:*/		return 0x82125F5C;
		  /* 82125F5Ch */ case   11:  		/* b 8 */
		/* 82125F5Ch case   11:*/		return 0x82125F64;
		/* 82125F5Ch case   11:*/		return 0x82125F60;
	}
	return 0x82125F60;
} // Block from 82125F30h-82125F60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F60);
		  /* 82125F60h */ case    0:  		/* mr R3, R20 */
		/* 82125F60h case    0:*/		regs.R3 = regs.R20;
		/* 82125F60h case    0:*/		return 0x82125F64;
	}
	return 0x82125F64;
} // Block from 82125F60h-82125F64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F64);
		  /* 82125F64h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 82125F64h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82125F64h case    0:*/		return 0x82125F68;
		  /* 82125F68h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82125F68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82125F68h case    1:*/		return 0x82125F6C;
		  /* 82125F6Ch */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 82125F6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82125F28;  }
		/* 82125F6Ch case    2:*/		return 0x82125F70;
		  /* 82125F70h */ case    3:  		/* li R3, 72 */
		/* 82125F70h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82125F70h case    3:*/		return 0x82125F74;
		  /* 82125F74h */ case    4:  		/* bl -380236 */
		/* 82125F74h case    4:*/		regs.LR = 0x82125F78; return 0x820C9228;
		/* 82125F74h case    4:*/		return 0x82125F78;
		  /* 82125F78h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82125F78h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125F78h case    5:*/		return 0x82125F7C;
		  /* 82125F7Ch */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82125F7Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82125F94;  }
		/* 82125F7Ch case    6:*/		return 0x82125F80;
		  /* 82125F80h */ case    7:  		/* mr R6, R29 */
		/* 82125F80h case    7:*/		regs.R6 = regs.R29;
		/* 82125F80h case    7:*/		return 0x82125F84;
		  /* 82125F84h */ case    8:  		/* li R5, 0 */
		/* 82125F84h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82125F84h case    8:*/		return 0x82125F88;
		  /* 82125F88h */ case    9:  		/* li R4, 2 */
		/* 82125F88h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82125F88h case    9:*/		return 0x82125F8C;
		  /* 82125F8Ch */ case   10:  		/* bl -367540 */
		/* 82125F8Ch case   10:*/		regs.LR = 0x82125F90; return 0x820CC3D8;
		/* 82125F8Ch case   10:*/		return 0x82125F90;
		  /* 82125F90h */ case   11:  		/* b 8 */
		/* 82125F90h case   11:*/		return 0x82125F98;
		/* 82125F90h case   11:*/		return 0x82125F94;
	}
	return 0x82125F94;
} // Block from 82125F64h-82125F94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82125F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F94);
		  /* 82125F94h */ case    0:  		/* mr R3, R20 */
		/* 82125F94h case    0:*/		regs.R3 = regs.R20;
		/* 82125F94h case    0:*/		return 0x82125F98;
	}
	return 0x82125F98;
} // Block from 82125F94h-82125F98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125F98);
		  /* 82125F98h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82125F98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82125F98h case    0:*/		return 0x82125F9C;
		  /* 82125F9Ch */ case    1:  		/* stw R3, <#[R30 + 32]> */
		/* 82125F9Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82125F9Ch case    1:*/		return 0x82125FA0;
		  /* 82125FA0h */ case    2:  		/* bc 12, CR6_EQ, -120 */
		/* 82125FA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82125F28;  }
		/* 82125FA0h case    2:*/		return 0x82125FA4;
		  /* 82125FA4h */ case    3:  		/* li R3, 20 */
		/* 82125FA4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82125FA4h case    3:*/		return 0x82125FA8;
		  /* 82125FA8h */ case    4:  		/* bl -380288 */
		/* 82125FA8h case    4:*/		regs.LR = 0x82125FAC; return 0x820C9228;
		/* 82125FA8h case    4:*/		return 0x82125FAC;
		  /* 82125FACh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82125FACh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82125FACh case    5:*/		return 0x82125FB0;
		  /* 82125FB0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82125FB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82125FCC;  }
		/* 82125FB0h case    6:*/		return 0x82125FB4;
		  /* 82125FB4h */ case    7:  		/* lis R11, -32253 */
		/* 82125FB4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82125FB4h case    7:*/		return 0x82125FB8;
		  /* 82125FB8h */ case    8:  		/* lwz R4, <#[R30 + 32]> */
		/* 82125FB8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 82125FB8h case    8:*/		return 0x82125FBC;
		  /* 82125FBCh */ case    9:  		/* li R5, 0 */
		/* 82125FBCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82125FBCh case    9:*/		return 0x82125FC0;
		  /* 82125FC0h */ case   10:  		/* addi R6, R11, 9184 */
		/* 82125FC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82125FC0h case   10:*/		return 0x82125FC4;
		  /* 82125FC4h */ case   11:  		/* bl -379860 */
		/* 82125FC4h case   11:*/		regs.LR = 0x82125FC8; return 0x820C93F0;
		/* 82125FC4h case   11:*/		return 0x82125FC8;
		  /* 82125FC8h */ case   12:  		/* b 8 */
		/* 82125FC8h case   12:*/		return 0x82125FD0;
		/* 82125FC8h case   12:*/		return 0x82125FCC;
	}
	return 0x82125FCC;
} // Block from 82125F98h-82125FCCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82125FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125FCC);
		  /* 82125FCCh */ case    0:  		/* mr R3, R20 */
		/* 82125FCCh case    0:*/		regs.R3 = regs.R20;
		/* 82125FCCh case    0:*/		return 0x82125FD0;
	}
	return 0x82125FD0;
} // Block from 82125FCCh-82125FD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125FD0);
		  /* 82125FD0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82125FD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82125FD0h case    0:*/		return 0x82125FD4;
		  /* 82125FD4h */ case    1:  		/* bc 12, CR6_EQ, -172 */
		/* 82125FD4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82125F28;  }
		/* 82125FD4h case    1:*/		return 0x82125FD8;
		  /* 82125FD8h */ case    2:  		/* stw R3, <#[R30 + 32]> */
		/* 82125FD8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82125FD8h case    2:*/		return 0x82125FDC;
		  /* 82125FDCh */ case    3:  		/* mr R4, R30 */
		/* 82125FDCh case    3:*/		regs.R4 = regs.R30;
		/* 82125FDCh case    3:*/		return 0x82125FE0;
		  /* 82125FE0h */ case    4:  		/* mr R3, R31 */
		/* 82125FE0h case    4:*/		regs.R3 = regs.R31;
		/* 82125FE0h case    4:*/		return 0x82125FE4;
		  /* 82125FE4h */ case    5:  		/* bl -40908 */
		/* 82125FE4h case    5:*/		regs.LR = 0x82125FE8; return 0x8211C018;
		/* 82125FE4h case    5:*/		return 0x82125FE8;
		  /* 82125FE8h */ case    6:  		/* mr R5, R30 */
		/* 82125FE8h case    6:*/		regs.R5 = regs.R30;
		/* 82125FE8h case    6:*/		return 0x82125FEC;
	}
	return 0x82125FEC;
} // Block from 82125FD0h-82125FECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82125FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125FEC);
		  /* 82125FECh */ case    0:  		/* li R7, 1 */
		/* 82125FECh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82125FECh case    0:*/		return 0x82125FF0;
	}
	return 0x82125FF0;
} // Block from 82125FECh-82125FF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125FF0);
		  /* 82125FF0h */ case    0:  		/* mr R3, R31 */
		/* 82125FF0h case    0:*/		regs.R3 = regs.R31;
		/* 82125FF0h case    0:*/		return 0x82125FF4;
	}
	return 0x82125FF4;
} // Block from 82125FF0h-82125FF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82125FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82125FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82125FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82125FF4);
		  /* 82125FF4h */ case    0:  		/* li R6, 0 */
		/* 82125FF4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82125FF4h case    0:*/		return 0x82125FF8;
		  /* 82125FF8h */ case    1:  		/* lwz R4, <#[R27 + 48]> */
		/* 82125FF8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82125FF8h case    1:*/		return 0x82125FFC;
		  /* 82125FFCh */ case    2:  		/* bl -19876 */
		/* 82125FFCh case    2:*/		regs.LR = 0x82126000; return 0x82121258;
		/* 82125FFCh case    2:*/		return 0x82126000;
		  /* 82126000h */ case    3:  		/* stw R3, <#[R27 + 52]> */
		/* 82126000h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000034) );
		/* 82126000h case    3:*/		return 0x82126004;
	}
	return 0x82126004;
} // Block from 82125FF4h-82126004h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126004);
		  /* 82126004h */ case    0:  		/* lwz R11, <#[R27 + 52]> */
		/* 82126004h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 82126004h case    0:*/		return 0x82126008;
		  /* 82126008h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82126008h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126008h case    1:*/		return 0x8212600C;
		  /* 8212600Ch */ case    2:  		/* bc 12, CR6_EQ, 476 */
		/* 8212600Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821261E8;  }
		/* 8212600Ch case    2:*/		return 0x82126010;
		  /* 82126010h */ case    3:  		/* cmpwi CR6, R25, 1 */
		/* 82126010h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000001);
		/* 82126010h case    3:*/		return 0x82126014;
		  /* 82126014h */ case    4:  		/* bc 4, CR6_EQ, 44 */
		/* 82126014h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82126040;  }
		/* 82126014h case    4:*/		return 0x82126018;
		  /* 82126018h */ case    5:  		/* lis R11, -32253 */
		/* 82126018h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126018h case    5:*/		return 0x8212601C;
		  /* 8212601Ch */ case    6:  		/* mr R9, R17 */
		/* 8212601Ch case    6:*/		regs.R9 = regs.R17;
		/* 8212601Ch case    6:*/		return 0x82126020;
		  /* 82126020h */ case    7:  		/* mr R8, R18 */
		/* 82126020h case    7:*/		regs.R8 = regs.R18;
		/* 82126020h case    7:*/		return 0x82126024;
		  /* 82126024h */ case    8:  		/* addi R6, R11, 12776 */
		/* 82126024h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x31E8);
		/* 82126024h case    8:*/		return 0x82126028;
		  /* 82126028h */ case    9:  		/* li R5, 3009 */
		/* 82126028h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xBC1);
		/* 82126028h case    9:*/		return 0x8212602C;
		  /* 8212602Ch */ case   10:  		/* lwz R7, <#[R29 + 8]> */
		/* 8212602Ch case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 8212602Ch case   10:*/		return 0x82126030;
		  /* 82126030h */ case   11:  		/* mr R4, R29 */
		/* 82126030h case   11:*/		regs.R4 = regs.R29;
		/* 82126030h case   11:*/		return 0x82126034;
		  /* 82126034h */ case   12:  		/* mr R3, R31 */
		/* 82126034h case   12:*/		regs.R3 = regs.R31;
		/* 82126034h case   12:*/		return 0x82126038;
		  /* 82126038h */ case   13:  		/* bl -51096 */
		/* 82126038h case   13:*/		regs.LR = 0x8212603C; return 0x821198A0;
		/* 82126038h case   13:*/		return 0x8212603C;
		  /* 8212603Ch */ case   14:  		/* b 640 */
		/* 8212603Ch case   14:*/		return 0x821262BC;
		/* 8212603Ch case   14:*/		return 0x82126040;
	}
	return 0x82126040;
} // Block from 82126004h-82126040h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82126040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126040);
		  /* 82126040h */ case    0:  		/* cmpwi CR6, R25, 2 */
		/* 82126040h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 82126040h case    0:*/		return 0x82126044;
		  /* 82126044h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 82126044h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126070;  }
		/* 82126044h case    1:*/		return 0x82126048;
		  /* 82126048h */ case    2:  		/* mr R3, R31 */
		/* 82126048h case    2:*/		regs.R3 = regs.R31;
		/* 82126048h case    2:*/		return 0x8212604C;
		  /* 8212604Ch */ case    3:  		/* lwz R4, <#[R27 + 48]> */
		/* 8212604Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 8212604Ch case    3:*/		return 0x82126050;
		  /* 82126050h */ case    4:  		/* bl -48464 */
		/* 82126050h case    4:*/		regs.LR = 0x82126054; return 0x8211A300;
		/* 82126050h case    4:*/		return 0x82126054;
		  /* 82126054h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82126054h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126054h case    5:*/		return 0x82126058;
		  /* 82126058h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 82126058h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82126070;  }
		/* 82126058h case    6:*/		return 0x8212605C;
		  /* 8212605Ch */ case    7:  		/* lis R11, -32253 */
		/* 8212605Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212605Ch case    7:*/		return 0x82126060;
		  /* 82126060h */ case    8:  		/* mr R9, R15 */
		/* 82126060h case    8:*/		regs.R9 = regs.R15;
		/* 82126060h case    8:*/		return 0x82126064;
		  /* 82126064h */ case    9:  		/* mr R8, R16 */
		/* 82126064h case    9:*/		regs.R8 = regs.R16;
		/* 82126064h case    9:*/		return 0x82126068;
		  /* 82126068h */ case   10:  		/* addi R6, R11, 12728 */
		/* 82126068h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x31B8);
		/* 82126068h case   10:*/		return 0x8212606C;
		  /* 8212606Ch */ case   11:  		/* b -68 */
		/* 8212606Ch case   11:*/		return 0x82126028;
		/* 8212606Ch case   11:*/		return 0x82126070;
	}
	return 0x82126070;
} // Block from 82126040h-82126070h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82126070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126070);
		  /* 82126070h */ case    0:  		/* rlwinm. R28, R26, 0, 27, 27 */
		/* 82126070h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R28,regs.R26);
		/* 82126070h case    0:*/		return 0x82126074;
		  /* 82126074h */ case    1:  		/* bc 4, CR0_EQ, 64 */
		/* 82126074h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821260B4;  }
		/* 82126074h case    1:*/		return 0x82126078;
		  /* 82126078h */ case    2:  		/* rlwinm. R11, R26, 0, 26, 26 */
		/* 82126078h case    2:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R26);
		/* 82126078h case    2:*/		return 0x8212607C;
		  /* 8212607Ch */ case    3:  		/* bc 12, CR0_EQ, 56 */
		/* 8212607Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821260B4;  }
		/* 8212607Ch case    3:*/		return 0x82126080;
		  /* 82126080h */ case    4:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82126080h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82126080h case    4:*/		return 0x82126084;
		  /* 82126084h */ case    5:  		/* lwz R7, <#[R29 + 8]> */
		/* 82126084h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82126084h case    5:*/		return 0x82126088;
		  /* 82126088h */ case    6:  		/* addi R10, R1, 224 */
		/* 82126088h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 82126088h case    6:*/		return 0x8212608C;
		  /* 8212608Ch */ case    7:  		/* addi R8, R1, 176 */
		/* 8212608Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 8212608Ch case    7:*/		return 0x82126090;
		  /* 82126090h */ case    8:  		/* lis R9, -32253 */
		/* 82126090h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82126090h case    8:*/		return 0x82126094;
		  /* 82126094h */ case    9:  		/* li R5, 3045 */
		/* 82126094h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xBE5);
		/* 82126094h case    9:*/		return 0x82126098;
		  /* 82126098h */ case   10:  		/* addi R6, R9, 12688 */
		/* 82126098h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3190);
		/* 82126098h case   10:*/		return 0x8212609C;
		  /* 8212609Ch */ case   11:  		/* mr R4, R29 */
		/* 8212609Ch case   11:*/		regs.R4 = regs.R29;
		/* 8212609Ch case   11:*/		return 0x821260A0;
		  /* 821260A0h */ case   12:  		/* lwzx R9, <#[R11 + R10]> */
		/* 821260A0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821260A0h case   12:*/		return 0x821260A4;
		  /* 821260A4h */ case   13:  		/* mr R3, R31 */
		/* 821260A4h case   13:*/		regs.R3 = regs.R31;
		/* 821260A4h case   13:*/		return 0x821260A8;
		  /* 821260A8h */ case   14:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821260A8h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821260A8h case   14:*/		return 0x821260AC;
		  /* 821260ACh */ case   15:  		/* bl -51212 */
		/* 821260ACh case   15:*/		regs.LR = 0x821260B0; return 0x821198A0;
		/* 821260ACh case   15:*/		return 0x821260B0;
		  /* 821260B0h */ case   16:  		/* b 148 */
		/* 821260B0h case   16:*/		return 0x82126144;
		/* 821260B0h case   16:*/		return 0x821260B4;
	}
	return 0x821260B4;
} // Block from 82126070h-821260B4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821260B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821260B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821260B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821260B4);
		  /* 821260B4h */ case    0:  		/* andi. R30, R26, 80 */
		/* 821260B4h case    0:*/		cpu::op::andi<1>(regs,&regs.R30,regs.R26,0x50);
		/* 821260B4h case    0:*/		return 0x821260B8;
		  /* 821260B8h */ case    1:  		/* cmplwi CR0, R30, 0 */
		/* 821260B8h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821260B8h case    1:*/		return 0x821260BC;
		  /* 821260BCh */ case    2:  		/* bc 12, CR0_EQ, 72 */
		/* 821260BCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82126104;  }
		/* 821260BCh case    2:*/		return 0x821260C0;
		  /* 821260C0h */ case    3:  		/* li R5, 1 */
		/* 821260C0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821260C0h case    3:*/		return 0x821260C4;
		  /* 821260C4h */ case    4:  		/* lwz R4, <#[R27 + 52]> */
		/* 821260C4h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000034) );
		/* 821260C4h case    4:*/		return 0x821260C8;
		  /* 821260C8h */ case    5:  		/* mr R3, R31 */
		/* 821260C8h case    5:*/		regs.R3 = regs.R31;
		/* 821260C8h case    5:*/		return 0x821260CC;
		  /* 821260CCh */ case    6:  		/* bl -55100 */
		/* 821260CCh case    6:*/		regs.LR = 0x821260D0; return 0x82118990;
		/* 821260CCh case    6:*/		return 0x821260D0;
		  /* 821260D0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821260D0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821260D0h case    7:*/		return 0x821260D4;
		  /* 821260D4h */ case    8:  		/* bc 4, CR0_EQ, 48 */
		/* 821260D4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82126104;  }
		/* 821260D4h case    8:*/		return 0x821260D8;
		  /* 821260D8h */ case    9:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 821260D8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 821260D8h case    9:*/		return 0x821260DC;
		  /* 821260DCh */ case   10:  		/* lwz R7, <#[R29 + 8]> */
		/* 821260DCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821260DCh case   10:*/		return 0x821260E0;
		  /* 821260E0h */ case   11:  		/* addi R10, R1, 224 */
		/* 821260E0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 821260E0h case   11:*/		return 0x821260E4;
		  /* 821260E4h */ case   12:  		/* lis R9, -32253 */
		/* 821260E4h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821260E4h case   12:*/		return 0x821260E8;
		  /* 821260E8h */ case   13:  		/* li R5, 3011 */
		/* 821260E8h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBC3);
		/* 821260E8h case   13:*/		return 0x821260EC;
		  /* 821260ECh */ case   14:  		/* addi R6, R9, 12648 */
		/* 821260ECh case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3168);
		/* 821260ECh case   14:*/		return 0x821260F0;
		  /* 821260F0h */ case   15:  		/* mr R4, R29 */
		/* 821260F0h case   15:*/		regs.R4 = regs.R29;
		/* 821260F0h case   15:*/		return 0x821260F4;
		  /* 821260F4h */ case   16:  		/* mr R3, R31 */
		/* 821260F4h case   16:*/		regs.R3 = regs.R31;
		/* 821260F4h case   16:*/		return 0x821260F8;
		  /* 821260F8h */ case   17:  		/* lwzx R8, <#[R11 + R10]> */
		/* 821260F8h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821260F8h case   17:*/		return 0x821260FC;
		  /* 821260FCh */ case   18:  		/* bl -51292 */
		/* 821260FCh case   18:*/		regs.LR = 0x82126100; return 0x821198A0;
		/* 821260FCh case   18:*/		return 0x82126100;
		  /* 82126100h */ case   19:  		/* b 68 */
		/* 82126100h case   19:*/		return 0x82126144;
		/* 82126100h case   19:*/		return 0x82126104;
	}
	return 0x82126104;
} // Block from 821260B4h-82126104h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82126104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126104);
		  /* 82126104h */ case    0:  		/* lwz R11, <#[R27 + 52]> */
		/* 82126104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 82126104h case    0:*/		return 0x82126108;
		  /* 82126108h */ case    1:  		/* li R6, 0 */
		/* 82126108h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126108h case    1:*/		return 0x8212610C;
		  /* 8212610Ch */ case    2:  		/* mr R3, R31 */
		/* 8212610Ch case    2:*/		regs.R3 = regs.R31;
		/* 8212610Ch case    2:*/		return 0x82126110;
		  /* 82126110h */ case    3:  		/* lwz R4, <#[R27 + 48]> */
		/* 82126110h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82126110h case    3:*/		return 0x82126114;
		  /* 82126114h */ case    4:  		/* lwz R5, <#[R11 + 16]> */
		/* 82126114h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82126114h case    4:*/		return 0x82126118;
		  /* 82126118h */ case    5:  		/* bl -36304 */
		/* 82126118h case    5:*/		regs.LR = 0x8212611C; return 0x8211D348;
		/* 82126118h case    5:*/		return 0x8212611C;
		  /* 8212611Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8212611Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212611Ch case    6:*/		return 0x82126120;
		  /* 82126120h */ case    7:  		/* bc 4, CR0_EQ, 44 */
		/* 82126120h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8212614C;  }
		/* 82126120h case    7:*/		return 0x82126124;
		  /* 82126124h */ case    8:  		/* lwz R11, <#[R27 + 52]> */
		/* 82126124h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 82126124h case    8:*/		return 0x82126128;
	}
	return 0x82126128;
} // Block from 82126104h-82126128h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82126128h
// Function '?VariableDecl@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126128);
		  /* 82126128h */ case    0:  		/* li R8, 0 */
		/* 82126128h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82126128h case    0:*/		return 0x8212612C;
		  /* 8212612Ch */ case    1:  		/* mr R4, R29 */
		/* 8212612Ch case    1:*/		regs.R4 = regs.R29;
		/* 8212612Ch case    1:*/		return 0x82126130;
		  /* 82126130h */ case    2:  		/* lwz R6, <#[R27 + 48]> */
		/* 82126130h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000030) );
		/* 82126130h case    2:*/		return 0x82126134;
		  /* 82126134h */ case    3:  		/* mr R3, R31 */
		/* 82126134h case    3:*/		regs.R3 = regs.R31;
		/* 82126134h case    3:*/		return 0x82126138;
		  /* 82126138h */ case    4:  		/* lwz R5, <#[R29 + 8]> */
		/* 82126138h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000008) );
		/* 82126138h case    4:*/		return 0x8212613C;
		  /* 8212613Ch */ case    5:  		/* lwz R7, <#[R11 + 16]> */
		/* 8212613Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 8212613Ch case    5:*/		return 0x82126140;
		  /* 82126140h */ case    6:  		/* bl -35240 */
		/* 82126140h case    6:*/		regs.LR = 0x82126144; return 0x8211D798;
		/* 82126140h case    6:*/		return 0x82126144;
	}
	return 0x82126144;
} // Block from 82126128h-82126144h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82126144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126144);
		  /* 82126144h */ case    0:  		/* stw R20, <#[R27 + 52]> */
		/* 82126144h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R27 + 0x00000034) );
		/* 82126144h case    0:*/		return 0x82126148;
		  /* 82126148h */ case    1:  		/* b 288 */
		/* 82126148h case    1:*/		return 0x82126268;
		/* 82126148h case    1:*/		return 0x8212614C;
	}
	return 0x8212614C;
} // Block from 82126144h-8212614Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212614Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212614C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212614C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212614C);
		  /* 8212614Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8212614Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8212614Ch case    0:*/		return 0x82126150;
		  /* 82126150h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82126150h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126164;  }
		/* 82126150h case    1:*/		return 0x82126154;
		  /* 82126154h */ case    2:  		/* mr R3, R31 */
		/* 82126154h case    2:*/		regs.R3 = regs.R31;
		/* 82126154h case    2:*/		return 0x82126158;
		  /* 82126158h */ case    3:  		/* lwz R4, <#[R27 + 52]> */
		/* 82126158h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000034) );
		/* 82126158h case    3:*/		return 0x8212615C;
		  /* 8212615Ch */ case    4:  		/* bl -26740 */
		/* 8212615Ch case    4:*/		regs.LR = 0x82126160; return 0x8211F8E8;
		/* 8212615Ch case    4:*/		return 0x82126160;
		  /* 82126160h */ case    5:  		/* stw R3, <#[R27 + 56]> */
		/* 82126160h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000038) );
		/* 82126160h case    5:*/		return 0x82126164;
	}
	return 0x82126164;
} // Block from 8212614Ch-82126164h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82126164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126164);
		  /* 82126164h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82126164h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82126164h case    0:*/		return 0x82126168;
		  /* 82126168h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 82126168h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212619C;  }
		/* 82126168h case    1:*/		return 0x8212616C;
		  /* 8212616Ch */ case    2:  		/* mr R3, R31 */
		/* 8212616Ch case    2:*/		regs.R3 = regs.R31;
		/* 8212616Ch case    2:*/		return 0x82126170;
		  /* 82126170h */ case    3:  		/* lwz R4, <#[R27 + 48]> */
		/* 82126170h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82126170h case    3:*/		return 0x82126174;
		  /* 82126174h */ case    4:  		/* bl -48964 */
		/* 82126174h case    4:*/		regs.LR = 0x82126178; return 0x8211A230;
		/* 82126174h case    4:*/		return 0x82126178;
		  /* 82126178h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82126178h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126178h case    5:*/		return 0x8212617C;
		  /* 8212617Ch */ case    6:  		/* bc 12, CR0_EQ, 32 */
		/* 8212617Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8212619C;  }
		/* 8212617Ch case    6:*/		return 0x82126180;
		  /* 82126180h */ case    7:  		/* mr R3, R31 */
		/* 82126180h case    7:*/		regs.R3 = regs.R31;
		/* 82126180h case    7:*/		return 0x82126184;
		  /* 82126184h */ case    8:  		/* lwz R4, <#[R27 + 52]> */
		/* 82126184h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000034) );
		/* 82126184h case    8:*/		return 0x82126188;
		  /* 82126188h */ case    9:  		/* bl -26784 */
		/* 82126188h case    9:*/		regs.LR = 0x8212618C; return 0x8211F8E8;
		/* 82126188h case    9:*/		return 0x8212618C;
		  /* 8212618Ch */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 8212618Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212618Ch case   10:*/		return 0x82126190;
		  /* 82126190h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 82126190h case   11:*/		if ( regs.CR[0].eq ) { return 0x8212619C;  }
		/* 82126190h case   11:*/		return 0x82126194;
		  /* 82126194h */ case   12:  		/* stw R3, <#[R27 + 52]> */
		/* 82126194h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000034) );
		/* 82126194h case   12:*/		return 0x82126198;
		  /* 82126198h */ case   13:  		/* b 208 */
		/* 82126198h case   13:*/		return 0x82126268;
		/* 82126198h case   13:*/		return 0x8212619C;
	}
	return 0x8212619C;
} // Block from 82126164h-8212619Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8212619Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212619C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212619C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212619C);
		  /* 8212619Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8212619Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8212619Ch case    0:*/		return 0x821261A0;
		  /* 821261A0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821261A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821261AC;  }
		/* 821261A0h case    1:*/		return 0x821261A4;
		  /* 821261A4h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 821261A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821261A4h case    2:*/		return 0x821261A8;
		  /* 821261A8h */ case    3:  		/* bc 4, CR6_EQ, -100 */
		/* 821261A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82126144;  }
		/* 821261A8h case    3:*/		return 0x821261AC;
	}
	return 0x821261AC;
} // Block from 8212619Ch-821261ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821261ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821261AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821261AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821261AC);
		  /* 821261ACh */ case    0:  		/* lwz R30, <#[R27 + 52]> */
		/* 821261ACh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000034) );
		/* 821261ACh case    0:*/		return 0x821261B0;
		  /* 821261B0h */ case    1:  		/* mr R5, R27 */
		/* 821261B0h case    1:*/		regs.R5 = regs.R27;
		/* 821261B0h case    1:*/		return 0x821261B4;
		  /* 821261B4h */ case    2:  		/* stw R20, <#[R27 + 52]> */
		/* 821261B4h case    2:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R27 + 0x00000034) );
		/* 821261B4h case    2:*/		return 0x821261B8;
		  /* 821261B8h */ case    3:  		/* mr R4, R19 */
		/* 821261B8h case    3:*/		regs.R4 = regs.R19;
		/* 821261B8h case    3:*/		return 0x821261BC;
		  /* 821261BCh */ case    4:  		/* mr R3, R31 */
		/* 821261BCh case    4:*/		regs.R3 = regs.R31;
		/* 821261BCh case    4:*/		return 0x821261C0;
		  /* 821261C0h */ case    5:  		/* bl -20912 */
		/* 821261C0h case    5:*/		regs.LR = 0x821261C4; return 0x82121010;
		/* 821261C0h case    5:*/		return 0x821261C4;
		  /* 821261C4h */ case    6:  		/* mr R5, R3 */
		/* 821261C4h case    6:*/		regs.R5 = regs.R3;
		/* 821261C4h case    6:*/		return 0x821261C8;
		  /* 821261C8h */ case    7:  		/* li R8, 0 */
		/* 821261C8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821261C8h case    7:*/		return 0x821261CC;
		  /* 821261CCh */ case    8:  		/* li R7, 1 */
		/* 821261CCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821261CCh case    8:*/		return 0x821261D0;
		  /* 821261D0h */ case    9:  		/* mr R6, R30 */
		/* 821261D0h case    9:*/		regs.R6 = regs.R30;
		/* 821261D0h case    9:*/		return 0x821261D4;
		  /* 821261D4h */ case   10:  		/* li R4, 26 */
		/* 821261D4h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 821261D4h case   10:*/		return 0x821261D8;
		  /* 821261D8h */ case   11:  		/* mr R3, R31 */
		/* 821261D8h case   11:*/		regs.R3 = regs.R31;
		/* 821261D8h case   11:*/		return 0x821261DC;
		  /* 821261DCh */ case   12:  		/* bl -17292 */
		/* 821261DCh case   12:*/		regs.LR = 0x821261E0; return 0x82121E50;
		/* 821261DCh case   12:*/		return 0x821261E0;
		  /* 821261E0h */ case   13:  		/* mr R23, R3 */
		/* 821261E0h case   13:*/		regs.R23 = regs.R3;
		/* 821261E0h case   13:*/		return 0x821261E4;
		  /* 821261E4h */ case   14:  		/* b 132 */
		/* 821261E4h case   14:*/		return 0x82126268;
		/* 821261E4h case   14:*/		return 0x821261E8;
	}
	return 0x821261E8;
} // Block from 821261ACh-821261E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821261E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821261E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821261E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821261E8);
		  /* 821261E8h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 821261E8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821261E8h case    0:*/		return 0x821261EC;
		  /* 821261ECh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821261ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821261F8;  }
		/* 821261ECh case    1:*/		return 0x821261F0;
		  /* 821261F0h */ case    2:  		/* cmpwi CR6, R25, 9 */
		/* 821261F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 821261F0h case    2:*/		return 0x821261F4;
		  /* 821261F4h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821261F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82126214;  }
		/* 821261F4h case    3:*/		return 0x821261F8;
	}
	return 0x821261F8;
} // Block from 821261E8h-821261F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821261F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821261F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821261F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821261F8);
		  /* 821261F8h */ case    0:  		/* mr R3, R31 */
		/* 821261F8h case    0:*/		regs.R3 = regs.R31;
		/* 821261F8h case    0:*/		return 0x821261FC;
		  /* 821261FCh */ case    1:  		/* lwz R4, <#[R27 + 48]> */
		/* 821261FCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 821261FCh case    1:*/		return 0x82126200;
		  /* 82126200h */ case    2:  		/* bl -49104 */
		/* 82126200h case    2:*/		regs.LR = 0x82126204; return 0x8211A230;
		/* 82126200h case    2:*/		return 0x82126204;
		  /* 82126204h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82126204h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126204h case    3:*/		return 0x82126208;
		  /* 82126208h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82126208h case    4:*/		if ( regs.CR[0].eq ) { return 0x82126214;  }
		/* 82126208h case    4:*/		return 0x8212620C;
		  /* 8212620Ch */ case    5:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 8212620Ch case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 8212620Ch case    5:*/		return 0x82126210;
		  /* 82126210h */ case    6:  		/* bc 4, CR0_EQ, 48 */
		/* 82126210h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82126240;  }
		/* 82126210h case    6:*/		return 0x82126214;
	}
	return 0x82126214;
} // Block from 821261F8h-82126214h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82126214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126214);
		  /* 82126214h */ case    0:  		/* cmpwi CR6, R25, 3 */
		/* 82126214h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 82126214h case    0:*/		return 0x82126218;
		  /* 82126218h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82126218h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126224;  }
		/* 82126218h case    1:*/		return 0x8212621C;
		  /* 8212621Ch */ case    2:  		/* cmpwi CR6, R25, 4 */
		/* 8212621Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 8212621Ch case    2:*/		return 0x82126220;
		  /* 82126220h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 82126220h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82126238;  }
		/* 82126220h case    3:*/		return 0x82126224;
	}
	return 0x82126224;
} // Block from 82126214h-82126224h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126224);
		  /* 82126224h */ case    0:  		/* mr R3, R31 */
		/* 82126224h case    0:*/		regs.R3 = regs.R31;
		/* 82126224h case    0:*/		return 0x82126228;
		  /* 82126228h */ case    1:  		/* lwz R4, <#[R27 + 48]> */
		/* 82126228h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000030) );
		/* 82126228h case    1:*/		return 0x8212622C;
		  /* 8212622Ch */ case    2:  		/* bl -49148 */
		/* 8212622Ch case    2:*/		regs.LR = 0x82126230; return 0x8211A230;
		/* 8212622Ch case    2:*/		return 0x82126230;
		  /* 82126230h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82126230h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126230h case    3:*/		return 0x82126234;
		  /* 82126234h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82126234h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82126240;  }
		/* 82126234h case    4:*/		return 0x82126238;
	}
	return 0x82126238;
} // Block from 82126224h-82126238h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82126238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126238);
		  /* 82126238h */ case    0:  		/* cmpwi CR6, R25, 5 */
		/* 82126238h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000005);
		/* 82126238h case    0:*/		return 0x8212623C;
		  /* 8212623Ch */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8212623Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126268;  }
		/* 8212623Ch case    1:*/		return 0x82126240;
	}
	return 0x82126240;
} // Block from 82126238h-82126240h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126240);
		  /* 82126240h */ case    0:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82126240h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82126240h case    0:*/		return 0x82126244;
		  /* 82126244h */ case    1:  		/* lwz R7, <#[R29 + 8]> */
		/* 82126244h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82126244h case    1:*/		return 0x82126248;
		  /* 82126248h */ case    2:  		/* addi R10, R1, 224 */
		/* 82126248h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 82126248h case    2:*/		return 0x8212624C;
		  /* 8212624Ch */ case    3:  		/* lis R9, -32253 */
		/* 8212624Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8212624Ch case    3:*/		return 0x82126250;
		  /* 82126250h */ case    4:  		/* li R5, 3012 */
		/* 82126250h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xBC4);
		/* 82126250h case    4:*/		return 0x82126254;
		  /* 82126254h */ case    5:  		/* addi R6, R9, 12628 */
		/* 82126254h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3154);
		/* 82126254h case    5:*/		return 0x82126258;
		  /* 82126258h */ case    6:  		/* mr R4, R29 */
		/* 82126258h case    6:*/		regs.R4 = regs.R29;
		/* 82126258h case    6:*/		return 0x8212625C;
		  /* 8212625Ch */ case    7:  		/* mr R3, R31 */
		/* 8212625Ch case    7:*/		regs.R3 = regs.R31;
		/* 8212625Ch case    7:*/		return 0x82126260;
		  /* 82126260h */ case    8:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82126260h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82126260h case    8:*/		return 0x82126264;
		  /* 82126264h */ case    9:  		/* bl -51652 */
		/* 82126264h case    9:*/		regs.LR = 0x82126268; return 0x821198A0;
		/* 82126264h case    9:*/		return 0x82126268;
	}
	return 0x82126268;
} // Block from 82126240h-82126268h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82126268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126268);
		  /* 82126268h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 82126268h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82126268h case    0:*/		return 0x8212626C;
		  /* 8212626Ch */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8212626Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821262C0;  }
		/* 8212626Ch case    1:*/		return 0x82126270;
		  /* 82126270h */ case    2:  		/* cmpwi CR6, R25, 9 */
		/* 82126270h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 82126270h case    2:*/		return 0x82126274;
		  /* 82126274h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 82126274h case    3:*/		if ( regs.CR[6].eq ) { return 0x821262C0;  }
		/* 82126274h case    3:*/		return 0x82126278;
		  /* 82126278h */ case    4:  		/* cmpwi CR6, R25, 1 */
		/* 82126278h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000001);
		/* 82126278h case    4:*/		return 0x8212627C;
		  /* 8212627Ch */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 8212627Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821262C0;  }
		/* 8212627Ch case    5:*/		return 0x82126280;
		  /* 82126280h */ case    6:  		/* cmpwi CR6, R25, 2 */
		/* 82126280h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 82126280h case    6:*/		return 0x82126284;
		  /* 82126284h */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 82126284h case    7:*/		if ( regs.CR[6].eq ) { return 0x821262C0;  }
		/* 82126284h case    7:*/		return 0x82126288;
		  /* 82126288h */ case    8:  		/* lwz R11, <#[R27 + 60]> */
		/* 82126288h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 82126288h case    8:*/		return 0x8212628C;
		  /* 8212628Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8212628Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212628Ch case    9:*/		return 0x82126290;
		  /* 82126290h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 82126290h case   10:*/		if ( regs.CR[6].eq ) { return 0x821262C0;  }
		/* 82126290h case   10:*/		return 0x82126294;
		  /* 82126294h */ case   11:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82126294h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82126294h case   11:*/		return 0x82126298;
		  /* 82126298h */ case   12:  		/* lwz R7, <#[R29 + 8]> */
		/* 82126298h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82126298h case   12:*/		return 0x8212629C;
		  /* 8212629Ch */ case   13:  		/* addi R10, R1, 176 */
		/* 8212629Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8212629Ch case   13:*/		return 0x821262A0;
		  /* 821262A0h */ case   14:  		/* lis R9, -32253 */
		/* 821262A0h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821262A0h case   14:*/		return 0x821262A4;
		  /* 821262A4h */ case   15:  		/* li R5, 3043 */
		/* 821262A4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0xBE3);
		/* 821262A4h case   15:*/		return 0x821262A8;
		  /* 821262A8h */ case   16:  		/* addi R6, R9, 12596 */
		/* 821262A8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3134);
		/* 821262A8h case   16:*/		return 0x821262AC;
		  /* 821262ACh */ case   17:  		/* mr R4, R29 */
		/* 821262ACh case   17:*/		regs.R4 = regs.R29;
		/* 821262ACh case   17:*/		return 0x821262B0;
		  /* 821262B0h */ case   18:  		/* mr R3, R31 */
		/* 821262B0h case   18:*/		regs.R3 = regs.R31;
		/* 821262B0h case   18:*/		return 0x821262B4;
		  /* 821262B4h */ case   19:  		/* lwzx R8, <#[R11 + R10]> */
		/* 821262B4h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821262B4h case   19:*/		return 0x821262B8;
		  /* 821262B8h */ case   20:  		/* bl -51736 */
		/* 821262B8h case   20:*/		regs.LR = 0x821262BC; return 0x821198A0;
		/* 821262B8h case   20:*/		return 0x821262BC;
	}
	return 0x821262BC;
} // Block from 82126268h-821262BCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821262BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821262BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821262BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821262BC);
		  /* 821262BCh */ case    0:  		/* stw R20, <#[R27 + 52]> */
		/* 821262BCh case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R27 + 0x00000034) );
		/* 821262BCh case    0:*/		return 0x821262C0;
	}
	return 0x821262C0;
} // Block from 821262BCh-821262C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821262C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821262C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821262C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821262C0);
		  /* 821262C0h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821262C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821262C0h case    0:*/		return 0x821262C4;
		  /* 821262C4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821262C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821262C4h case    1:*/		return 0x821262C8;
		  /* 821262C8h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821262C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82126310;  }
		/* 821262C8h case    2:*/		return 0x821262CC;
		  /* 821262CCh */ case    3:  		/* cmpwi CR6, R25, 0 */
		/* 821262CCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821262CCh case    3:*/		return 0x821262D0;
		  /* 821262D0h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 821262D0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82126310;  }
		/* 821262D0h case    4:*/		return 0x821262D4;
		  /* 821262D4h */ case    5:  		/* cmpwi CR6, R25, 9 */
		/* 821262D4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000009);
		/* 821262D4h case    5:*/		return 0x821262D8;
		  /* 821262D8h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 821262D8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82126310;  }
		/* 821262D8h case    6:*/		return 0x821262DC;
		  /* 821262DCh */ case    7:  		/* cmpwi CR6, R25, 2 */
		/* 821262DCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821262DCh case    7:*/		return 0x821262E0;
		  /* 821262E0h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 821262E0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82126310;  }
		/* 821262E0h case    8:*/		return 0x821262E4;
		  /* 821262E4h */ case    9:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 821262E4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 821262E4h case    9:*/		return 0x821262E8;
		  /* 821262E8h */ case   10:  		/* lwz R7, <#[R29 + 8]> */
		/* 821262E8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821262E8h case   10:*/		return 0x821262EC;
		  /* 821262ECh */ case   11:  		/* addi R10, R1, 176 */
		/* 821262ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 821262ECh case   11:*/		return 0x821262F0;
		  /* 821262F0h */ case   12:  		/* lis R9, -32253 */
		/* 821262F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821262F0h case   12:*/		return 0x821262F4;
		  /* 821262F4h */ case   13:  		/* li R5, 3040 */
		/* 821262F4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBE0);
		/* 821262F4h case   13:*/		return 0x821262F8;
		  /* 821262F8h */ case   14:  		/* addi R6, R9, 12560 */
		/* 821262F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x3110);
		/* 821262F8h case   14:*/		return 0x821262FC;
		  /* 821262FCh */ case   15:  		/* mr R4, R29 */
		/* 821262FCh case   15:*/		regs.R4 = regs.R29;
		/* 821262FCh case   15:*/		return 0x82126300;
		  /* 82126300h */ case   16:  		/* mr R3, R31 */
		/* 82126300h case   16:*/		regs.R3 = regs.R31;
		/* 82126300h case   16:*/		return 0x82126304;
		  /* 82126304h */ case   17:  		/* lwzx R8, <#[R11 + R10]> */
		/* 82126304h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82126304h case   17:*/		return 0x82126308;
		  /* 82126308h */ case   18:  		/* bl -51816 */
		/* 82126308h case   18:*/		regs.LR = 0x8212630C; return 0x821198A0;
		/* 82126308h case   18:*/		return 0x8212630C;
		  /* 8212630Ch */ case   19:  		/* stw R20, <#[R14 + 28]> */
		/* 8212630Ch case   19:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R14 + 0x0000001C) );
		/* 8212630Ch case   19:*/		return 0x82126310;
	}
	return 0x82126310;
} // Block from 821262C0h-82126310h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82126310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126310);
		  /* 82126310h */ case    0:  		/* li R5, 0 */
		/* 82126310h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82126310h case    0:*/		return 0x82126314;
		  /* 82126314h */ case    1:  		/* mr R4, R14 */
		/* 82126314h case    1:*/		regs.R4 = regs.R14;
		/* 82126314h case    1:*/		return 0x82126318;
		  /* 82126318h */ case    2:  		/* mr R3, R31 */
		/* 82126318h case    2:*/		regs.R3 = regs.R31;
		/* 82126318h case    2:*/		return 0x8212631C;
		  /* 8212631Ch */ case    3:  		/* bl -50740 */
		/* 8212631Ch case    3:*/		regs.LR = 0x82126320; return 0x82119CE8;
		/* 8212631Ch case    3:*/		return 0x82126320;
		  /* 82126320h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82126320h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126320h case    4:*/		return 0x82126324;
		  /* 82126324h */ case    5:  		/* bc 12, CR0_LT, 112 */
		/* 82126324h case    5:*/		if ( regs.CR[0].lt ) { return 0x82126394;  }
		/* 82126324h case    5:*/		return 0x82126328;
		  /* 82126328h */ case    6:  		/* cmplwi CR6, R23, 0 */
		/* 82126328h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82126328h case    6:*/		return 0x8212632C;
		  /* 8212632Ch */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 8212632Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82126350;  }
		/* 8212632Ch case    7:*/		return 0x82126330;
		  /* 82126330h */ case    8:  		/* mr R4, R23 */
		/* 82126330h case    8:*/		regs.R4 = regs.R23;
		/* 82126330h case    8:*/		return 0x82126334;
		  /* 82126334h */ case    9:  		/* mr R3, R31 */
		/* 82126334h case    9:*/		regs.R3 = regs.R31;
		/* 82126334h case    9:*/		return 0x82126338;
		  /* 82126338h */ case   10:  		/* bl -53872 */
		/* 82126338h case   10:*/		regs.LR = 0x8212633C; return 0x821190C8;
		/* 82126338h case   10:*/		return 0x8212633C;
		  /* 8212633Ch */ case   11:  		/* or. R11, R3, R3 */
		/* 8212633Ch case   11:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 8212633Ch case   11:*/		return 0x82126340;
		  /* 82126340h */ case   12:  		/* lwz R3, <#[R1 + 144]> */
		/* 82126340h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 82126340h case   12:*/		return 0x82126344;
		  /* 82126344h */ case   13:  		/* stw R11, <#[R3 + 12]> */
		/* 82126344h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82126344h case   13:*/		return 0x82126348;
		  /* 82126348h */ case   14:  		/* bc 12, CR0_EQ, 76 */
		/* 82126348h case   14:*/		if ( regs.CR[0].eq ) { return 0x82126394;  }
		/* 82126348h case   14:*/		return 0x8212634C;
		  /* 8212634Ch */ case   15:  		/* b 76 */
		/* 8212634Ch case   15:*/		return 0x82126398;
		/* 8212634Ch case   15:*/		return 0x82126350;
	}
	return 0x82126350;
} // Block from 82126310h-82126350h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82126350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126350);
		  /* 82126350h */ case    0:  		/* lwz R3, <#[R1 + 144]> */
		/* 82126350h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 82126350h case    0:*/		return 0x82126354;
		  /* 82126354h */ case    1:  		/* b 68 */
		/* 82126354h case    1:*/		return 0x82126398;
		/* 82126354h case    1:*/		return 0x82126358;
	}
	return 0x82126358;
} // Block from 82126350h-82126358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126358);
		  /* 82126358h */ case    0:  		/* lis R11, -32253 */
		/* 82126358h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126358h case    0:*/		return 0x8212635C;
		  /* 8212635Ch */ case    1:  		/* li R5, 3059 */
		/* 8212635Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBF3);
		/* 8212635Ch case    1:*/		return 0x82126360;
		  /* 82126360h */ case    2:  		/* addi R6, R11, 9892 */
		/* 82126360h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x26A4);
		/* 82126360h case    2:*/		return 0x82126364;
		  /* 82126364h */ case    3:  		/* b 32 */
		/* 82126364h case    3:*/		return 0x82126384;
		/* 82126364h case    3:*/		return 0x82126368;
	}
	return 0x82126368;
} // Block from 82126358h-82126368h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126368);
		  /* 82126368h */ case    0:  		/* lis R11, -32253 */
		/* 82126368h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126368h case    0:*/		return 0x8212636C;
		  /* 8212636Ch */ case    1:  		/* li R5, 3073 */
		/* 8212636Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC01);
		/* 8212636Ch case    1:*/		return 0x82126370;
		  /* 82126370h */ case    2:  		/* addi R6, R11, 12508 */
		/* 82126370h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x30DC);
		/* 82126370h case    2:*/		return 0x82126374;
		  /* 82126374h */ case    3:  		/* b 16 */
		/* 82126374h case    3:*/		return 0x82126384;
		/* 82126374h case    3:*/		return 0x82126378;
	}
	return 0x82126378;
} // Block from 82126368h-82126378h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126378);
		  /* 82126378h */ case    0:  		/* lis R11, -32253 */
		/* 82126378h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126378h case    0:*/		return 0x8212637C;
		  /* 8212637Ch */ case    1:  		/* li R5, 3058 */
		/* 8212637Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBF2);
		/* 8212637Ch case    1:*/		return 0x82126380;
		  /* 82126380h */ case    2:  		/* addi R6, R11, 9784 */
		/* 82126380h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2638);
		/* 82126380h case    2:*/		return 0x82126384;
	}
	return 0x82126384;
} // Block from 82126378h-82126384h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126384);
		  /* 82126384h */ case    0:  		/* mr R4, R29 */
		/* 82126384h case    0:*/		regs.R4 = regs.R29;
		/* 82126384h case    0:*/		return 0x82126388;
		  /* 82126388h */ case    1:  		/* lwz R7, <#[R29 + 8]> */
		/* 82126388h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82126388h case    1:*/		return 0x8212638C;
		  /* 8212638Ch */ case    2:  		/* mr R3, R31 */
		/* 8212638Ch case    2:*/		regs.R3 = regs.R31;
		/* 8212638Ch case    2:*/		return 0x82126390;
		  /* 82126390h */ case    3:  		/* bl -51952 */
		/* 82126390h case    3:*/		regs.LR = 0x82126394; return 0x821198A0;
		/* 82126390h case    3:*/		return 0x82126394;
	}
	return 0x82126394;
} // Block from 82126384h-82126394h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126394);
		  /* 82126394h */ case    0:  		/* li R3, 0 */
		/* 82126394h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82126394h case    0:*/		return 0x82126398;
	}
	return 0x82126398;
} // Block from 82126394h-82126398h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126398);
		  /* 82126398h */ case    0:  		/* addi R1, R1, 416 */
		/* 82126398h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 82126398h case    0:*/		return 0x8212639C;
		  /* 8212639Ch */ case    1:  		/* b -610604 */
		/* 8212639Ch case    1:*/		return 0x82091270;
		/* 8212639Ch case    1:*/		return 0x821263A0;
	}
	return 0x821263A0;
} // Block from 82126398h-821263A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821263A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821263A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821263A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821263A0);
		  /* 821263A0h */ case    0:  		/* mfspr R12, LR */
		/* 821263A0h case    0:*/		regs.R12 = regs.LR;
		/* 821263A0h case    0:*/		return 0x821263A4;
		  /* 821263A4h */ case    1:  		/* bl -610680 */
		/* 821263A4h case    1:*/		regs.LR = 0x821263A8; return 0x8209122C;
		/* 821263A4h case    1:*/		return 0x821263A8;
		  /* 821263A8h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 821263A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 821263A8h case    2:*/		return 0x821263AC;
		  /* 821263ACh */ case    3:  		/* lwz R11, <#[R3 + 24]> */
		/* 821263ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821263ACh case    3:*/		return 0x821263B0;
		  /* 821263B0h */ case    4:  		/* li R18, 0 */
		/* 821263B0h case    4:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821263B0h case    4:*/		return 0x821263B4;
		  /* 821263B4h */ case    5:  		/* mr R24, R3 */
		/* 821263B4h case    5:*/		regs.R24 = regs.R3;
		/* 821263B4h case    5:*/		return 0x821263B8;
		  /* 821263B8h */ case    6:  		/* mr R26, R4 */
		/* 821263B8h case    6:*/		regs.R26 = regs.R4;
		/* 821263B8h case    6:*/		return 0x821263BC;
		  /* 821263BCh */ case    7:  		/* stw R18, <#[R1 + 128]> */
		/* 821263BCh case    7:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000080) );
		/* 821263BCh case    7:*/		return 0x821263C0;
		  /* 821263C0h */ case    8:  		/* mr R17, R5 */
		/* 821263C0h case    8:*/		regs.R17 = regs.R5;
		/* 821263C0h case    8:*/		return 0x821263C4;
		  /* 821263C4h */ case    9:  		/* mr R25, R6 */
		/* 821263C4h case    9:*/		regs.R25 = regs.R6;
		/* 821263C4h case    9:*/		return 0x821263C8;
		  /* 821263C8h */ case   10:  		/* mr R19, R7 */
		/* 821263C8h case   10:*/		regs.R19 = regs.R7;
		/* 821263C8h case   10:*/		return 0x821263CC;
		  /* 821263CCh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821263CCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821263CCh case   11:*/		return 0x821263D0;
		  /* 821263D0h */ case   12:  		/* mr R28, R18 */
		/* 821263D0h case   12:*/		regs.R28 = regs.R18;
		/* 821263D0h case   12:*/		return 0x821263D4;
		  /* 821263D4h */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 821263D4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821263DC;  }
		/* 821263D4h case   13:*/		return 0x821263D8;
		  /* 821263D8h */ case   14:  		/* lwz R28, <#[R11 + 8]> */
		/* 821263D8h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 821263D8h case   14:*/		return 0x821263DC;
	}
	return 0x821263DC;
} // Block from 821263A0h-821263DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821263DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821263DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821263DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821263DC);
		  /* 821263DCh */ case    0:  		/* addi R3, R1, 144 */
		/* 821263DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 821263DCh case    0:*/		return 0x821263E0;
		  /* 821263E0h */ case    1:  		/* bl -372640 */
		/* 821263E0h case    1:*/		regs.LR = 0x821263E4; return 0x820CB440;
		/* 821263E0h case    1:*/		return 0x821263E4;
		  /* 821263E4h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821263E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821263E4h case    2:*/		return 0x821263E8;
		  /* 821263E8h */ case    3:  		/* bc 12, CR6_EQ, 888 */
		/* 821263E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821263E8h case    3:*/		return 0x821263EC;
		  /* 821263ECh */ case    4:  		/* cmplwi CR6, R17, 0 */
		/* 821263ECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821263ECh case    4:*/		return 0x821263F0;
		  /* 821263F0h */ case    5:  		/* bc 12, CR6_EQ, 880 */
		/* 821263F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821263F0h case    5:*/		return 0x821263F4;
		  /* 821263F4h */ case    6:  		/* lwz R11, <#[R28 + 16]> */
		/* 821263F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821263F4h case    6:*/		return 0x821263F8;
		  /* 821263F8h */ case    7:  		/* addi R21, R17, 16 */
		/* 821263F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R17,0x10);
		/* 821263F8h case    7:*/		return 0x821263FC;
		  /* 821263FCh */ case    8:  		/* lwz R27, <#[R28 + 24]> */
		/* 821263FCh case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + 0x00000018) );
		/* 821263FCh case    8:*/		return 0x82126400;
		  /* 82126400h */ case    9:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82126400h case    9:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82126400h case    9:*/		return 0x82126404;
		  /* 82126404h */ case   10:  		/* bc 12, CR0_EQ, 32 */
		/* 82126404h case   10:*/		if ( regs.CR[0].eq ) { return 0x82126424;  }
		/* 82126404h case   10:*/		return 0x82126408;
		  /* 82126408h */ case   11:  		/* lis R11, -32253 */
		/* 82126408h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126408h case   11:*/		return 0x8212640C;
		  /* 8212640Ch */ case   12:  		/* lwz R7, <#[R21 + 8]> */
		/* 8212640Ch case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 8212640Ch case   12:*/		return 0x82126410;
		  /* 82126410h */ case   13:  		/* li R5, 3047 */
		/* 82126410h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBE7);
		/* 82126410h case   13:*/		return 0x82126414;
		  /* 82126414h */ case   14:  		/* addi R6, R11, 13976 */
		/* 82126414h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3698);
		/* 82126414h case   14:*/		return 0x82126418;
		  /* 82126418h */ case   15:  		/* mr R4, R21 */
		/* 82126418h case   15:*/		regs.R4 = regs.R21;
		/* 82126418h case   15:*/		return 0x8212641C;
		  /* 8212641Ch */ case   16:  		/* mr R3, R24 */
		/* 8212641Ch case   16:*/		regs.R3 = regs.R24;
		/* 8212641Ch case   16:*/		return 0x82126420;
		  /* 82126420h */ case   17:  		/* bl -52096 */
		/* 82126420h case   17:*/		regs.LR = 0x82126424; return 0x821198A0;
		/* 82126420h case   17:*/		return 0x82126424;
	}
	return 0x82126424;
} // Block from 821263DCh-82126424h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82126424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126424);
		  /* 82126424h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 82126424h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82126424h case    0:*/		return 0x82126428;
		  /* 82126428h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82126428h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82126428h case    1:*/		return 0x8212642C;
		  /* 8212642Ch */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8212642Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8212644C;  }
		/* 8212642Ch case    2:*/		return 0x82126430;
		  /* 82126430h */ case    3:  		/* lis R11, -32253 */
		/* 82126430h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126430h case    3:*/		return 0x82126434;
		  /* 82126434h */ case    4:  		/* lwz R7, <#[R21 + 8]> */
		/* 82126434h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82126434h case    4:*/		return 0x82126438;
		  /* 82126438h */ case    5:  		/* li R5, 3006 */
		/* 82126438h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xBBE);
		/* 82126438h case    5:*/		return 0x8212643C;
		  /* 8212643Ch */ case    6:  		/* addi R6, R11, 13932 */
		/* 8212643Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x366C);
		/* 8212643Ch case    6:*/		return 0x82126440;
		  /* 82126440h */ case    7:  		/* mr R4, R21 */
		/* 82126440h case    7:*/		regs.R4 = regs.R21;
		/* 82126440h case    7:*/		return 0x82126444;
		  /* 82126444h */ case    8:  		/* mr R3, R24 */
		/* 82126444h case    8:*/		regs.R3 = regs.R24;
		/* 82126444h case    8:*/		return 0x82126448;
		  /* 82126448h */ case    9:  		/* bl -52136 */
		/* 82126448h case    9:*/		regs.LR = 0x8212644C; return 0x821198A0;
		/* 82126448h case    9:*/		return 0x8212644C;
	}
	return 0x8212644C;
} // Block from 82126424h-8212644Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212644Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212644C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212644C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212644C);
		  /* 8212644Ch */ case    0:  		/* mr R4, R27 */
		/* 8212644Ch case    0:*/		regs.R4 = regs.R27;
		/* 8212644Ch case    0:*/		return 0x82126450;
		  /* 82126450h */ case    1:  		/* mr R3, R24 */
		/* 82126450h case    1:*/		regs.R3 = regs.R24;
		/* 82126450h case    1:*/		return 0x82126454;
		  /* 82126454h */ case    2:  		/* bl -49492 */
		/* 82126454h case    2:*/		regs.LR = 0x82126458; return 0x8211A300;
		/* 82126454h case    2:*/		return 0x82126458;
		  /* 82126458h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82126458h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126458h case    3:*/		return 0x8212645C;
		  /* 8212645Ch */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8212645Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8212647C;  }
		/* 8212645Ch case    4:*/		return 0x82126460;
		  /* 82126460h */ case    5:  		/* lis R11, -32253 */
		/* 82126460h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126460h case    5:*/		return 0x82126464;
		  /* 82126464h */ case    6:  		/* lwz R7, <#[R21 + 8]> */
		/* 82126464h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82126464h case    6:*/		return 0x82126468;
		  /* 82126468h */ case    7:  		/* li R5, 3038 */
		/* 82126468h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xBDE);
		/* 82126468h case    7:*/		return 0x8212646C;
		  /* 8212646Ch */ case    8:  		/* addi R6, R11, 13888 */
		/* 8212646Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3640);
		/* 8212646Ch case    8:*/		return 0x82126470;
		  /* 82126470h */ case    9:  		/* mr R4, R21 */
		/* 82126470h case    9:*/		regs.R4 = regs.R21;
		/* 82126470h case    9:*/		return 0x82126474;
		  /* 82126474h */ case   10:  		/* mr R3, R24 */
		/* 82126474h case   10:*/		regs.R3 = regs.R24;
		/* 82126474h case   10:*/		return 0x82126478;
		  /* 82126478h */ case   11:  		/* bl -52184 */
		/* 82126478h case   11:*/		regs.LR = 0x8212647C; return 0x821198A0;
		/* 82126478h case   11:*/		return 0x8212647C;
	}
	return 0x8212647C;
} // Block from 8212644Ch-8212647Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212647Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212647C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212647C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212647C);
		  /* 8212647Ch */ case    0:  		/* mr R30, R18 */
		/* 8212647Ch case    0:*/		regs.R30 = regs.R18;
		/* 8212647Ch case    0:*/		return 0x82126480;
		  /* 82126480h */ case    1:  		/* mr R31, R25 */
		/* 82126480h case    1:*/		regs.R31 = regs.R25;
		/* 82126480h case    1:*/		return 0x82126484;
		  /* 82126484h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82126484h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82126484h case    2:*/		return 0x82126488;
		  /* 82126488h */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 82126488h case    3:*/		if ( regs.CR[6].eq ) { return 0x82126508;  }
		/* 82126488h case    3:*/		return 0x8212648C;
		  /* 8212648Ch */ case    4:  		/* lis R11, -32253 */
		/* 8212648Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212648Ch case    4:*/		return 0x82126490;
		  /* 82126490h */ case    5:  		/* addi R29, R11, 13840 */
		/* 82126490h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3610);
		/* 82126490h case    5:*/		return 0x82126494;
		  /* 82126494h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 82126494h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82126494h case    6:*/		return 0x82126498;
		  /* 82126498h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82126498h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82126498h case    7:*/		return 0x8212649C;
		  /* 8212649Ch */ case    8:  		/* bc 12, CR6_EQ, 96 */
		/* 8212649Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821264FC;  }
		/* 8212649Ch case    8:*/		return 0x821264A0;
		  /* 821264A0h */ case    9:  		/* lwz R11, <#[R10 + 4]> */
		/* 821264A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821264A0h case    9:*/		return 0x821264A4;
		  /* 821264A4h */ case   10:  		/* cmpwi CR6, R11, 6 */
		/* 821264A4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821264A4h case   10:*/		return 0x821264A8;
		  /* 821264A8h */ case   11:  		/* bc 4, CR6_EQ, 84 */
		/* 821264A8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821264FC;  }
		/* 821264A8h case   11:*/		return 0x821264AC;
		  /* 821264ACh */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 821264ACh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821264ACh case   12:*/		return 0x821264B0;
		  /* 821264B0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821264B0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821264B0h case   13:*/		return 0x821264B4;
		  /* 821264B4h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 821264B4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821264D4;  }
		/* 821264B4h case   14:*/		return 0x821264B8;
		  /* 821264B8h */ case   15:  		/* lwz R9, <#[R11 + 8]> */
		/* 821264B8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821264B8h case   15:*/		return 0x821264BC;
		  /* 821264BCh */ case   16:  		/* lwz R9, <#[R9 + 4]> */
		/* 821264BCh case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821264BCh case   16:*/		return 0x821264C0;
		  /* 821264C0h */ case   17:  		/* cmpwi CR6, R9, 12 */
		/* 821264C0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000C);
		/* 821264C0h case   17:*/		return 0x821264C4;
		  /* 821264C4h */ case   18:  		/* bc 4, CR6_EQ, 16 */
		/* 821264C4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821264D4;  }
		/* 821264C4h case   18:*/		return 0x821264C8;
		  /* 821264C8h */ case   19:  		/* li R30, 1 */
		/* 821264C8h case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821264C8h case   19:*/		return 0x821264CC;
		  /* 821264CCh */ case   20:  		/* mr R31, R11 */
		/* 821264CCh case   20:*/		regs.R31 = regs.R11;
		/* 821264CCh case   20:*/		return 0x821264D0;
		  /* 821264D0h */ case   21:  		/* b 44 */
		/* 821264D0h case   21:*/		return 0x821264FC;
		/* 821264D0h case   21:*/		return 0x821264D4;
	}
	return 0x821264D4;
} // Block from 8212647Ch-821264D4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821264D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821264D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821264D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821264D4);
		  /* 821264D4h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 821264D4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821264D4h case    0:*/		return 0x821264D8;
		  /* 821264D8h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821264D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821264FC;  }
		/* 821264D8h case    1:*/		return 0x821264DC;
		  /* 821264DCh */ case    2:  		/* lwz R11, <#[R10 + 20]> */
		/* 821264DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 821264DCh case    2:*/		return 0x821264E0;
		  /* 821264E0h */ case    3:  		/* mr R6, R29 */
		/* 821264E0h case    3:*/		regs.R6 = regs.R29;
		/* 821264E0h case    3:*/		return 0x821264E4;
		  /* 821264E4h */ case    4:  		/* li R5, 3044 */
		/* 821264E4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xBE4);
		/* 821264E4h case    4:*/		return 0x821264E8;
		  /* 821264E8h */ case    5:  		/* lwz R7, <#[R21 + 8]> */
		/* 821264E8h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 821264E8h case    5:*/		return 0x821264EC;
		  /* 821264ECh */ case    6:  		/* mr R4, R21 */
		/* 821264ECh case    6:*/		regs.R4 = regs.R21;
		/* 821264ECh case    6:*/		return 0x821264F0;
		  /* 821264F0h */ case    7:  		/* mr R3, R24 */
		/* 821264F0h case    7:*/		regs.R3 = regs.R24;
		/* 821264F0h case    7:*/		return 0x821264F4;
		  /* 821264F4h */ case    8:  		/* lwz R8, <#[R11 + 24]> */
		/* 821264F4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 821264F4h case    8:*/		return 0x821264F8;
		  /* 821264F8h */ case    9:  		/* bl -52312 */
		/* 821264F8h case    9:*/		regs.LR = 0x821264FC; return 0x821198A0;
		/* 821264F8h case    9:*/		return 0x821264FC;
	}
	return 0x821264FC;
} // Block from 821264D4h-821264FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821264FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821264FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821264FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821264FC);
		  /* 821264FCh */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 821264FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821264FCh case    0:*/		return 0x82126500;
		  /* 82126500h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82126500h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82126500h case    1:*/		return 0x82126504;
		  /* 82126504h */ case    2:  		/* bc 4, CR6_EQ, -112 */
		/* 82126504h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82126494;  }
		/* 82126504h case    2:*/		return 0x82126508;
	}
	return 0x82126508;
} // Block from 821264FCh-82126508h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126508);
		  /* 82126508h */ case    0:  		/* li R3, 20 */
		/* 82126508h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82126508h case    0:*/		return 0x8212650C;
		  /* 8212650Ch */ case    1:  		/* bl -381668 */
		/* 8212650Ch case    1:*/		regs.LR = 0x82126510; return 0x820C9228;
		/* 8212650Ch case    1:*/		return 0x82126510;
		  /* 82126510h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82126510h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126510h case    2:*/		return 0x82126514;
		  /* 82126514h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82126514h case    3:*/		if ( regs.CR[0].eq ) { return 0x82126534;  }
		/* 82126514h case    3:*/		return 0x82126518;
		  /* 82126518h */ case    4:  		/* lis R11, -32255 */
		/* 82126518h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82126518h case    4:*/		return 0x8212651C;
		  /* 8212651Ch */ case    5:  		/* li R5, 0 */
		/* 8212651Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212651Ch case    5:*/		return 0x82126520;
		  /* 82126520h */ case    6:  		/* addi R6, R11, 9252 */
		/* 82126520h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82126520h case    6:*/		return 0x82126524;
		  /* 82126524h */ case    7:  		/* li R4, 0 */
		/* 82126524h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82126524h case    7:*/		return 0x82126528;
		  /* 82126528h */ case    8:  		/* bl -381240 */
		/* 82126528h case    8:*/		regs.LR = 0x8212652C; return 0x820C93F0;
		/* 82126528h case    8:*/		return 0x8212652C;
		  /* 8212652Ch */ case    9:  		/* mr R20, R3 */
		/* 8212652Ch case    9:*/		regs.R20 = regs.R3;
		/* 8212652Ch case    9:*/		return 0x82126530;
		  /* 82126530h */ case   10:  		/* b 8 */
		/* 82126530h case   10:*/		return 0x82126538;
		/* 82126530h case   10:*/		return 0x82126534;
	}
	return 0x82126534;
} // Block from 82126508h-82126534h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82126534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126534);
		  /* 82126534h */ case    0:  		/* mr R20, R18 */
		/* 82126534h case    0:*/		regs.R20 = regs.R18;
		/* 82126534h case    0:*/		return 0x82126538;
	}
	return 0x82126538;
} // Block from 82126534h-82126538h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126538);
		  /* 82126538h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 82126538h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82126538h case    0:*/		return 0x8212653C;
		  /* 8212653Ch */ case    1:  		/* bc 12, CR6_EQ, 548 */
		/* 8212653Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 8212653Ch case    1:*/		return 0x82126540;
		  /* 82126540h */ case    2:  		/* li R3, 52 */
		/* 82126540h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82126540h case    2:*/		return 0x82126544;
		  /* 82126544h */ case    3:  		/* bl -381724 */
		/* 82126544h case    3:*/		regs.LR = 0x82126548; return 0x820C9228;
		/* 82126544h case    3:*/		return 0x82126548;
		  /* 82126548h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82126548h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126548h case    4:*/		return 0x8212654C;
		  /* 8212654Ch */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8212654Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82126570;  }
		/* 8212654Ch case    5:*/		return 0x82126550;
		  /* 82126550h */ case    6:  		/* li R8, 0 */
		/* 82126550h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82126550h case    6:*/		return 0x82126554;
		  /* 82126554h */ case    7:  		/* li R7, 0 */
		/* 82126554h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82126554h case    7:*/		return 0x82126558;
		  /* 82126558h */ case    8:  		/* li R6, 0 */
		/* 82126558h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126558h case    8:*/		return 0x8212655C;
		  /* 8212655Ch */ case    9:  		/* li R5, 0 */
		/* 8212655Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212655Ch case    9:*/		return 0x82126560;
		  /* 82126560h */ case   10:  		/* li R4, 2 */
		/* 82126560h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82126560h case   10:*/		return 0x82126564;
		  /* 82126564h */ case   11:  		/* bl -378540 */
		/* 82126564h case   11:*/		regs.LR = 0x82126568; return 0x820C9EB8;
		/* 82126564h case   11:*/		return 0x82126568;
		  /* 82126568h */ case   12:  		/* mr R22, R3 */
		/* 82126568h case   12:*/		regs.R22 = regs.R3;
		/* 82126568h case   12:*/		return 0x8212656C;
		  /* 8212656Ch */ case   13:  		/* b 8 */
		/* 8212656Ch case   13:*/		return 0x82126574;
		/* 8212656Ch case   13:*/		return 0x82126570;
	}
	return 0x82126570;
} // Block from 82126538h-82126570h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82126570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126570);
		  /* 82126570h */ case    0:  		/* mr R22, R18 */
		/* 82126570h case    0:*/		regs.R22 = regs.R18;
		/* 82126570h case    0:*/		return 0x82126574;
	}
	return 0x82126574;
} // Block from 82126570h-82126574h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126574);
		  /* 82126574h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 82126574h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82126574h case    0:*/		return 0x82126578;
		  /* 82126578h */ case    1:  		/* bc 12, CR6_EQ, 488 */
		/* 82126578h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 82126578h case    1:*/		return 0x8212657C;
		  /* 8212657Ch */ case    2:  		/* stw R22, <#[R20 + 8]> */
		/* 8212657Ch case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R20 + 0x00000008) );
		/* 8212657Ch case    2:*/		return 0x82126580;
		  /* 82126580h */ case    3:  		/* mr R3, R17 */
		/* 82126580h case    3:*/		regs.R3 = regs.R17;
		/* 82126580h case    3:*/		return 0x82126584;
		  /* 82126584h */ case    4:  		/* bl -381468 */
		/* 82126584h case    4:*/		regs.LR = 0x82126588; return 0x820C9368;
		/* 82126584h case    4:*/		return 0x82126588;
		  /* 82126588h */ case    5:  		/* stw R3, <#[R22 + 20]> */
		/* 82126588h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R22 + 0x00000014) );
		/* 82126588h case    5:*/		return 0x8212658C;
		  /* 8212658Ch */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8212658Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212658Ch case    6:*/		return 0x82126590;
		  /* 82126590h */ case    7:  		/* bc 12, CR0_EQ, 464 */
		/* 82126590h case    7:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 82126590h case    7:*/		return 0x82126594;
		  /* 82126594h */ case    8:  		/* li R3, 80 */
		/* 82126594h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x50);
		/* 82126594h case    8:*/		return 0x82126598;
		  /* 82126598h */ case    9:  		/* bl -381808 */
		/* 82126598h case    9:*/		regs.LR = 0x8212659C; return 0x820C9228;
		/* 82126598h case    9:*/		return 0x8212659C;
		  /* 8212659Ch */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 8212659Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212659Ch case   10:*/		return 0x821265A0;
		  /* 821265A0h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 821265A0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821265B0;  }
		/* 821265A0h case   11:*/		return 0x821265A4;
		  /* 821265A4h */ case   12:  		/* bl -374556 */
		/* 821265A4h case   12:*/		regs.LR = 0x821265A8; return 0x820CAE88;
		/* 821265A4h case   12:*/		return 0x821265A8;
		  /* 821265A8h */ case   13:  		/* mr R31, R3 */
		/* 821265A8h case   13:*/		regs.R31 = regs.R3;
		/* 821265A8h case   13:*/		return 0x821265AC;
		  /* 821265ACh */ case   14:  		/* b 8 */
		/* 821265ACh case   14:*/		return 0x821265B4;
		/* 821265ACh case   14:*/		return 0x821265B0;
	}
	return 0x821265B0;
} // Block from 82126574h-821265B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821265B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821265B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821265B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821265B0);
		  /* 821265B0h */ case    0:  		/* mr R31, R18 */
		/* 821265B0h case    0:*/		regs.R31 = regs.R18;
		/* 821265B0h case    0:*/		return 0x821265B4;
	}
	return 0x821265B4;
} // Block from 821265B0h-821265B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821265B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821265B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821265B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821265B4);
		  /* 821265B4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821265B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821265B4h case    0:*/		return 0x821265B8;
		  /* 821265B8h */ case    1:  		/* bc 12, CR6_EQ, 424 */
		/* 821265B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821265B8h case    1:*/		return 0x821265BC;
		  /* 821265BCh */ case    2:  		/* stw R31, <#[R22 + 24]> */
		/* 821265BCh case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R22 + 0x00000018) );
		/* 821265BCh case    2:*/		return 0x821265C0;
		  /* 821265C0h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821265C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821265C0h case    3:*/		return 0x821265C4;
		  /* 821265C4h */ case    4:  		/* stw R11, <#[R31 + 32]> */
		/* 821265C4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821265C4h case    4:*/		return 0x821265C8;
		  /* 821265C8h */ case    5:  		/* lwz R3, <#[R28 + 20]> */
		/* 821265C8h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000014) );
		/* 821265C8h case    5:*/		return 0x821265CC;
		  /* 821265CCh */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821265CCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821265CCh case    6:*/		return 0x821265D0;
		  /* 821265D0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821265D0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821265E4;  }
		/* 821265D0h case    7:*/		return 0x821265D4;
		  /* 821265D4h */ case    8:  		/* bl -381548 */
		/* 821265D4h case    8:*/		regs.LR = 0x821265D8; return 0x820C9368;
		/* 821265D4h case    8:*/		return 0x821265D8;
		  /* 821265D8h */ case    9:  		/* stw R3, <#[R31 + 36]> */
		/* 821265D8h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 821265D8h case    9:*/		return 0x821265DC;
		  /* 821265DCh */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 821265DCh case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821265DCh case   10:*/		return 0x821265E0;
		  /* 821265E0h */ case   11:  		/* bc 12, CR0_EQ, 384 */
		/* 821265E0h case   11:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821265E0h case   11:*/		return 0x821265E4;
	}
	return 0x821265E4;
} // Block from 821265B4h-821265E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821265E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821265E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821265E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821265E4);
		  /* 821265E4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821265E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821265E4h case    0:*/		return 0x821265E8;
		  /* 821265E8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821265E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126600;  }
		/* 821265E8h case    1:*/		return 0x821265EC;
		  /* 821265ECh */ case    2:  		/* mr R3, R27 */
		/* 821265ECh case    2:*/		regs.R3 = regs.R27;
		/* 821265ECh case    2:*/		return 0x821265F0;
		  /* 821265F0h */ case    3:  		/* bl -381576 */
		/* 821265F0h case    3:*/		regs.LR = 0x821265F4; return 0x820C9368;
		/* 821265F0h case    3:*/		return 0x821265F4;
		  /* 821265F4h */ case    4:  		/* stw R3, <#[R31 + 40]> */
		/* 821265F4h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821265F4h case    4:*/		return 0x821265F8;
		  /* 821265F8h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821265F8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821265F8h case    5:*/		return 0x821265FC;
		  /* 821265FCh */ case    6:  		/* bc 12, CR0_EQ, 356 */
		/* 821265FCh case    6:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821265FCh case    6:*/		return 0x82126600;
	}
	return 0x82126600;
} // Block from 821265E4h-82126600h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82126600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126600);
		  /* 82126600h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82126600h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82126600h case    0:*/		return 0x82126604;
		  /* 82126604h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82126604h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212661C;  }
		/* 82126604h case    1:*/		return 0x82126608;
		  /* 82126608h */ case    2:  		/* mr R3, R26 */
		/* 82126608h case    2:*/		regs.R3 = regs.R26;
		/* 82126608h case    2:*/		return 0x8212660C;
		  /* 8212660Ch */ case    3:  		/* bl -381604 */
		/* 8212660Ch case    3:*/		regs.LR = 0x82126610; return 0x820C9368;
		/* 8212660Ch case    3:*/		return 0x82126610;
		  /* 82126610h */ case    4:  		/* stw R3, <#[R31 + 68]> */
		/* 82126610h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 82126610h case    4:*/		return 0x82126614;
		  /* 82126614h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82126614h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126614h case    5:*/		return 0x82126618;
		  /* 82126618h */ case    6:  		/* bc 12, CR0_EQ, 328 */
		/* 82126618h case    6:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 82126618h case    6:*/		return 0x8212661C;
	}
	return 0x8212661C;
} // Block from 82126600h-8212661Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212661Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212661C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212661C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212661C);
		  /* 8212661Ch */ case    0:  		/* li R5, 1 */
		/* 8212661Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212661Ch case    0:*/		return 0x82126620;
		  /* 82126620h */ case    1:  		/* lwz R4, <#[R31 + 40]> */
		/* 82126620h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 82126620h case    1:*/		return 0x82126624;
		  /* 82126624h */ case    2:  		/* mr R3, R24 */
		/* 82126624h case    2:*/		regs.R3 = regs.R24;
		/* 82126624h case    2:*/		return 0x82126628;
		  /* 82126628h */ case    3:  		/* bl -50400 */
		/* 82126628h case    3:*/		regs.LR = 0x8212662C; return 0x8211A148;
		/* 82126628h case    3:*/		return 0x8212662C;
		  /* 8212662Ch */ case    4:  		/* cmplwi CR6, R19, 0 */
		/* 8212662Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 8212662Ch case    4:*/		return 0x82126630;
		  /* 82126630h */ case    5:  		/* bc 12, CR6_EQ, 128 */
		/* 82126630h case    5:*/		if ( regs.CR[6].eq ) { return 0x821266B0;  }
		/* 82126630h case    5:*/		return 0x82126634;
		  /* 82126634h */ case    6:  		/* lwz R11, <#[R31 + 40]> */
		/* 82126634h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82126634h case    6:*/		return 0x82126638;
		  /* 82126638h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82126638h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126638h case    7:*/		return 0x8212663C;
		  /* 8212663Ch */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8212663Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x82126660;  }
		/* 8212663Ch case    8:*/		return 0x82126640;
		  /* 82126640h */ case    9:  		/* lis R11, -32253 */
		/* 82126640h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126640h case    9:*/		return 0x82126644;
		  /* 82126644h */ case   10:  		/* lwz R7, <#[R21 + 8]> */
		/* 82126644h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82126644h case   10:*/		return 0x82126648;
		  /* 82126648h */ case   11:  		/* li R5, 3076 */
		/* 82126648h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xC04);
		/* 82126648h case   11:*/		return 0x8212664C;
		  /* 8212664Ch */ case   12:  		/* addi R6, R11, 13796 */
		/* 8212664Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x35E4);
		/* 8212664Ch case   12:*/		return 0x82126650;
		  /* 82126650h */ case   13:  		/* mr R4, R21 */
		/* 82126650h case   13:*/		regs.R4 = regs.R21;
		/* 82126650h case   13:*/		return 0x82126654;
		  /* 82126654h */ case   14:  		/* mr R3, R24 */
		/* 82126654h case   14:*/		regs.R3 = regs.R24;
		/* 82126654h case   14:*/		return 0x82126658;
		  /* 82126658h */ case   15:  		/* bl -52664 */
		/* 82126658h case   15:*/		regs.LR = 0x8212665C; return 0x821198A0;
		/* 82126658h case   15:*/		return 0x8212665C;
		  /* 8212665Ch */ case   16:  		/* mr R19, R18 */
		/* 8212665Ch case   16:*/		regs.R19 = regs.R18;
		/* 8212665Ch case   16:*/		return 0x82126660;
	}
	return 0x82126660;
} // Block from 8212661Ch-82126660h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82126660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126660);
		  /* 82126660h */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 82126660h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82126660h case    0:*/		return 0x82126664;
		  /* 82126664h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 82126664h case    1:*/		if ( regs.CR[6].eq ) { return 0x821266B0;  }
		/* 82126664h case    1:*/		return 0x82126668;
		  /* 82126668h */ case    2:  		/* mr R3, R19 */
		/* 82126668h case    2:*/		regs.R3 = regs.R19;
		/* 82126668h case    2:*/		return 0x8212666C;
		  /* 8212666Ch */ case    3:  		/* bl -381700 */
		/* 8212666Ch case    3:*/		regs.LR = 0x82126670; return 0x820C9368;
		/* 8212666Ch case    3:*/		return 0x82126670;
		  /* 82126670h */ case    4:  		/* stw R3, <#[R31 + 60]> */
		/* 82126670h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 82126670h case    4:*/		return 0x82126674;
		  /* 82126674h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82126674h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126674h case    5:*/		return 0x82126678;
		  /* 82126678h */ case    6:  		/* bc 12, CR0_EQ, 232 */
		/* 82126678h case    6:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 82126678h case    6:*/		return 0x8212667C;
		  /* 8212667Ch */ case    7:  		/* lwz R3, <#[R19 + 8]> */
		/* 8212667Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000008) );
		/* 8212667Ch case    7:*/		return 0x82126680;
		  /* 82126680h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 82126680h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82126680h case    8:*/		return 0x82126684;
		  /* 82126684h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 82126684h case    9:*/		if ( regs.CR[6].eq ) { return 0x821266A4;  }
		/* 82126684h case    9:*/		return 0x82126688;
		  /* 82126688h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 82126688h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82126688h case   10:*/		return 0x8212668C;
		  /* 8212668Ch */ case   11:  		/* cmpwi CR6, R11, 3 */
		/* 8212668Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8212668Ch case   11:*/		return 0x82126690;
		  /* 82126690h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 82126690h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821266A4;  }
		/* 82126690h case   12:*/		return 0x82126694;
		  /* 82126694h */ case   13:  		/* bl -381740 */
		/* 82126694h case   13:*/		regs.LR = 0x82126698; return 0x820C9368;
		/* 82126694h case   13:*/		return 0x82126698;
		  /* 82126698h */ case   14:  		/* stw R3, <#[R31 + 56]> */
		/* 82126698h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 82126698h case   14:*/		return 0x8212669C;
		  /* 8212669Ch */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8212669Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212669Ch case   15:*/		return 0x821266A0;
		  /* 821266A0h */ case   16:  		/* bc 12, CR0_EQ, 192 */
		/* 821266A0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821266A0h case   16:*/		return 0x821266A4;
	}
	return 0x821266A4;
} // Block from 82126660h-821266A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821266A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821266A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821266A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821266A4);
		  /* 821266A4h */ case    0:  		/* lwz R19, <#[R19 + 12]> */
		/* 821266A4h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R19 + 0x0000000C) );
		/* 821266A4h case    0:*/		return 0x821266A8;
		  /* 821266A8h */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 821266A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821266A8h case    1:*/		return 0x821266AC;
		  /* 821266ACh */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 821266ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8212667C;  }
		/* 821266ACh case    2:*/		return 0x821266B0;
	}
	return 0x821266B0;
} // Block from 821266A4h-821266B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821266B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821266B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821266B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821266B0);
		  /* 821266B0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821266B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821266B0h case    0:*/		return 0x821266B4;
		  /* 821266B4h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821266B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821266D8;  }
		/* 821266B4h case    1:*/		return 0x821266B8;
		  /* 821266B8h */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821266B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821266B8h case    2:*/		return 0x821266BC;
		  /* 821266BCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821266BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821266BCh case    3:*/		return 0x821266C0;
		  /* 821266C0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821266C0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821266D8;  }
		/* 821266C0h case    4:*/		return 0x821266C4;
		  /* 821266C4h */ case    5:  		/* mr R3, R25 */
		/* 821266C4h case    5:*/		regs.R3 = regs.R25;
		/* 821266C4h case    5:*/		return 0x821266C8;
		  /* 821266C8h */ case    6:  		/* bl -381792 */
		/* 821266C8h case    6:*/		regs.LR = 0x821266CC; return 0x820C9368;
		/* 821266C8h case    6:*/		return 0x821266CC;
		  /* 821266CCh */ case    7:  		/* stw R3, <#[R31 + 44]> */
		/* 821266CCh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821266CCh case    7:*/		return 0x821266D0;
		  /* 821266D0h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821266D0h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821266D0h case    8:*/		return 0x821266D4;
		  /* 821266D4h */ case    9:  		/* bc 12, CR0_EQ, 140 */
		/* 821266D4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821266D4h case    9:*/		return 0x821266D8;
	}
	return 0x821266D8;
} // Block from 821266B0h-821266D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821266D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821266D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821266D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821266D8);
		  /* 821266D8h */ case    0:  		/* lwz R11, <#[R24 + 20]> */
		/* 821266D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821266D8h case    0:*/		return 0x821266DC;
		  /* 821266DCh */ case    1:  		/* addi R8, R1, 128 */
		/* 821266DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 821266DCh case    1:*/		return 0x821266E0;
		  /* 821266E0h */ case    2:  		/* addi R10, R1, 132 */
		/* 821266E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x84);
		/* 821266E0h case    2:*/		return 0x821266E4;
		  /* 821266E4h */ case    3:  		/* lwz R6, <#[R31 + 36]> */
		/* 821266E4h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000024) );
		/* 821266E4h case    3:*/		return 0x821266E8;
		  /* 821266E8h */ case    4:  		/* li R9, 10 */
		/* 821266E8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xA);
		/* 821266E8h case    4:*/		return 0x821266EC;
		  /* 821266ECh */ case    5:  		/* stw R8, <#[R1 + 84]> */
		/* 821266ECh case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821266ECh case    5:*/		return 0x821266F0;
		  /* 821266F0h */ case    6:  		/* mr R5, R21 */
		/* 821266F0h case    6:*/		regs.R5 = regs.R21;
		/* 821266F0h case    6:*/		return 0x821266F4;
		  /* 821266F4h */ case    7:  		/* lwz R7, <#[R31 + 44]> */
		/* 821266F4h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000002C) );
		/* 821266F4h case    7:*/		return 0x821266F8;
		  /* 821266F8h */ case    8:  		/* li R4, 2 */
		/* 821266F8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821266F8h case    8:*/		return 0x821266FC;
		  /* 821266FCh */ case    9:  		/* mr R3, R24 */
		/* 821266FCh case    9:*/		regs.R3 = regs.R24;
		/* 821266FCh case    9:*/		return 0x82126700;
		  /* 82126700h */ case   10:  		/* lwz R8, <#[R11 + 32]> */
		/* 82126700h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000020) );
		/* 82126700h case   10:*/		return 0x82126704;
		  /* 82126704h */ case   11:  		/* bl -26284 */
		/* 82126704h case   11:*/		regs.LR = 0x82126708; return 0x82120058;
		/* 82126704h case   11:*/		return 0x82126708;
		  /* 82126708h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82126708h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126708h case   12:*/		return 0x8212670C;
		  /* 8212670Ch */ case   13:  		/* bc 4, CR0_LT, 20 */
		/* 8212670Ch case   13:*/		if ( !regs.CR[0].lt ) { return 0x82126720;  }
		/* 8212670Ch case   13:*/		return 0x82126710;
		  /* 82126710h */ case   14:  		/* lis R11, -32253 */
		/* 82126710h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126710h case   14:*/		return 0x82126714;
		  /* 82126714h */ case   15:  		/* li R5, 3003 */
		/* 82126714h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0xBBB);
		/* 82126714h case   15:*/		return 0x82126718;
		  /* 82126718h */ case   16:  		/* addi R6, R11, 8196 */
		/* 82126718h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2004);
		/* 82126718h case   16:*/		return 0x8212671C;
		  /* 8212671Ch */ case   17:  		/* b 52 */
		/* 8212671Ch case   17:*/		return 0x82126750;
		/* 8212671Ch case   17:*/		return 0x82126720;
	}
	return 0x82126720;
} // Block from 821266D8h-82126720h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82126720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126720);
		  /* 82126720h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82126720h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126720h case    0:*/		return 0x82126724;
		  /* 82126724h */ case    1:  		/* lwz R23, <#[R1 + 132]> */
		/* 82126724h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000084) );
		/* 82126724h case    1:*/		return 0x82126728;
		  /* 82126728h */ case    2:  		/* lwz R4, <#[R31 + 40]> */
		/* 82126728h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 82126728h case    2:*/		return 0x8212672C;
		  /* 8212672Ch */ case    3:  		/* mr R3, R24 */
		/* 8212672Ch case    3:*/		regs.R3 = regs.R24;
		/* 8212672Ch case    3:*/		return 0x82126730;
		  /* 82126730h */ case    4:  		/* bc 4, CR6_EQ, 592 */
		/* 82126730h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82126980;  }
		/* 82126730h case    4:*/		return 0x82126734;
		  /* 82126734h */ case    5:  		/* lwz R5, <#[R23 + 40]> */
		/* 82126734h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000028) );
		/* 82126734h case    5:*/		return 0x82126738;
		  /* 82126738h */ case    6:  		/* bl -58432 */
		/* 82126738h case    6:*/		regs.LR = 0x8212673C; return 0x821182F8;
		/* 82126738h case    6:*/		return 0x8212673C;
		  /* 8212673Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8212673Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212673Ch case    7:*/		return 0x82126740;
		  /* 82126740h */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 82126740h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8212676C;  }
		/* 82126740h case    8:*/		return 0x82126744;
		  /* 82126744h */ case    9:  		/* lis R11, -32253 */
		/* 82126744h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126744h case    9:*/		return 0x82126748;
		  /* 82126748h */ case   10:  		/* li R5, 3068 */
		/* 82126748h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBFC);
		/* 82126748h case   10:*/		return 0x8212674C;
		  /* 8212674Ch */ case   11:  		/* addi R6, R11, 13744 */
		/* 8212674Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x35B0);
		/* 8212674Ch case   11:*/		return 0x82126750;
	}
	return 0x82126750;
} // Block from 82126720h-82126750h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82126750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126750);
		  /* 82126750h */ case    0:  		/* mr R4, R21 */
		/* 82126750h case    0:*/		regs.R4 = regs.R21;
		/* 82126750h case    0:*/		return 0x82126754;
		  /* 82126754h */ case    1:  		/* lwz R7, <#[R21 + 8]> */
		/* 82126754h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82126754h case    1:*/		return 0x82126758;
		  /* 82126758h */ case    2:  		/* mr R3, R24 */
		/* 82126758h case    2:*/		regs.R3 = regs.R24;
		/* 82126758h case    2:*/		return 0x8212675C;
		  /* 8212675Ch */ case    3:  		/* bl -52924 */
		/* 8212675Ch case    3:*/		regs.LR = 0x82126760; return 0x821198A0;
		/* 8212675Ch case    3:*/		return 0x82126760;
	}
	return 0x82126760;
} // Block from 82126750h-82126760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126760);
		  /* 82126760h */ case    0:  		/* li R3, 0 */
		/* 82126760h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82126760h case    0:*/		return 0x82126764;
		  /* 82126764h */ case    1:  		/* addi R1, R1, 368 */
		/* 82126764h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 82126764h case    1:*/		return 0x82126768;
		  /* 82126768h */ case    2:  		/* b -611564 */
		/* 82126768h case    2:*/		return 0x8209127C;
		/* 82126768h case    2:*/		return 0x8212676C;
	}
	return 0x8212676C;
} // Block from 82126760h-8212676Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212676Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212676C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212676C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212676C);
		  /* 8212676Ch */ case    0:  		/* lwz R11, <#[R23 + 16]> */
		/* 8212676Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 8212676Ch case    0:*/		return 0x82126770;
		  /* 82126770h */ case    1:  		/* mr R26, R18 */
		/* 82126770h case    1:*/		regs.R26 = regs.R18;
		/* 82126770h case    1:*/		return 0x82126774;
		  /* 82126774h */ case    2:  		/* lwz R10, <#[R1 + 128]> */
		/* 82126774h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 82126774h case    2:*/		return 0x82126778;
		  /* 82126778h */ case    3:  		/* mr R25, R18 */
		/* 82126778h case    3:*/		regs.R25 = regs.R18;
		/* 82126778h case    3:*/		return 0x8212677C;
		  /* 8212677Ch */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 8212677Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212677Ch case    4:*/		return 0x82126780;
		  /* 82126780h */ case    5:  		/* lwz R11, <#[R23 + 20]> */
		/* 82126780h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82126780h case    5:*/		return 0x82126784;
		  /* 82126784h */ case    6:  		/* stw R11, <#[R31 + 20]> */
		/* 82126784h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82126784h case    6:*/		return 0x82126788;
		  /* 82126788h */ case    7:  		/* lwz R11, <#[R10 + 8]> */
		/* 82126788h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82126788h case    7:*/		return 0x8212678C;
		  /* 8212678Ch */ case    8:  		/* lwz R11, <#[R11 + 24]> */
		/* 8212678Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8212678Ch case    8:*/		return 0x82126790;
		  /* 82126790h */ case    9:  		/* stw R11, <#[R22 + 40]> */
		/* 82126790h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000028) );
		/* 82126790h case    9:*/		return 0x82126794;
		  /* 82126794h */ case   10:  		/* lwz R29, <#[R23 + 44]> */
		/* 82126794h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x0000002C) );
		/* 82126794h case   10:*/		return 0x82126798;
		  /* 82126798h */ case   11:  		/* lwz R30, <#[R31 + 44]> */
		/* 82126798h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000002C) );
		/* 82126798h case   11:*/		return 0x8212679C;
		  /* 8212679Ch */ case   12:  		/* b 368 */
		/* 8212679Ch case   12:*/		return 0x8212690C;
		/* 8212679Ch case   12:*/		return 0x821267A0;
		  /* 821267A0h */ case   13:  		/* lwz R27, <#[R29 + 8]> */
		/* 821267A0h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x00000008) );
		/* 821267A0h case   13:*/		return 0x821267A4;
		  /* 821267A4h */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 821267A4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821267A4h case   14:*/		return 0x821267A8;
		  /* 821267A8h */ case   15:  		/* bc 12, CR6_EQ, 460 */
		/* 821267A8h case   15:*/		if ( regs.CR[6].eq ) { return 0x82126974;  }
		/* 821267A8h case   15:*/		return 0x821267AC;
		  /* 821267ACh */ case   16:  		/* lwz R11, <#[R27 + 4]> */
		/* 821267ACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821267ACh case   16:*/		return 0x821267B0;
		  /* 821267B0h */ case   17:  		/* cmpwi CR6, R11, 12 */
		/* 821267B0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821267B0h case   17:*/		return 0x821267B4;
		  /* 821267B4h */ case   18:  		/* bc 4, CR6_EQ, 152 */
		/* 821267B4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8212684C;  }
		/* 821267B4h case   18:*/		return 0x821267B8;
		  /* 821267B8h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821267B8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821267B8h case   19:*/		return 0x821267BC;
		  /* 821267BCh */ case   20:  		/* bc 12, CR6_EQ, 28 */
		/* 821267BCh case   20:*/		if ( regs.CR[6].eq ) { return 0x821267D8;  }
		/* 821267BCh case   20:*/		return 0x821267C0;
		  /* 821267C0h */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 821267C0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821267C0h case   21:*/		return 0x821267C4;
		  /* 821267C4h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821267C4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821267C4h case   22:*/		return 0x821267C8;
		  /* 821267C8h */ case   23:  		/* bc 12, CR6_EQ, 16 */
		/* 821267C8h case   23:*/		if ( regs.CR[6].eq ) { return 0x821267D8;  }
		/* 821267C8h case   23:*/		return 0x821267CC;
		  /* 821267CCh */ case   24:  		/* lwz R11, <#[R11 + 4]> */
		/* 821267CCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821267CCh case   24:*/		return 0x821267D0;
		  /* 821267D0h */ case   25:  		/* cmpwi CR6, R11, 12 */
		/* 821267D0h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821267D0h case   25:*/		return 0x821267D4;
		  /* 821267D4h */ case   26:  		/* bc 12, CR6_EQ, 88 */
		/* 821267D4h case   26:*/		if ( regs.CR[6].eq ) { return 0x8212682C;  }
		/* 821267D4h case   26:*/		return 0x821267D8;
	}
	return 0x821267D8;
} // Block from 8212676Ch-821267D8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821267D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821267D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821267D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821267D8);
		  /* 821267D8h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821267D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821267D8h case    0:*/		return 0x821267DC;
		  /* 821267DCh */ case    1:  		/* mr R3, R27 */
		/* 821267DCh case    1:*/		regs.R3 = regs.R27;
		/* 821267DCh case    1:*/		return 0x821267E0;
		  /* 821267E0h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821267E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821267E0h case    2:*/		return 0x821267E4;
		  /* 821267E4h */ case    3:  		/* mtspr CTR, R11 */
		/* 821267E4h case    3:*/		regs.CTR = regs.R11;
		/* 821267E4h case    3:*/		return 0x821267E8;
		  /* 821267E8h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 821267E8h case    4:*/		if ( 1 ) { regs.LR = 0x821267EC; return (uint32)regs.CTR; }
		/* 821267E8h case    4:*/		return 0x821267EC;
		  /* 821267ECh */ case    5:  		/* or. R28, R3, R3 */
		/* 821267ECh case    5:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821267ECh case    5:*/		return 0x821267F0;
		  /* 821267F0h */ case    6:  		/* bc 12, CR0_EQ, -144 */
		/* 821267F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821267F0h case    6:*/		return 0x821267F4;
		  /* 821267F4h */ case    7:  		/* li R3, 20 */
		/* 821267F4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821267F4h case    7:*/		return 0x821267F8;
		  /* 821267F8h */ case    8:  		/* bl -382416 */
		/* 821267F8h case    8:*/		regs.LR = 0x821267FC; return 0x820C9228;
		/* 821267F8h case    8:*/		return 0x821267FC;
		  /* 821267FCh */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821267FCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821267FCh case    9:*/		return 0x82126800;
		  /* 82126800h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 82126800h case   10:*/		if ( regs.CR[0].eq ) { return 0x82126818;  }
		/* 82126800h case   10:*/		return 0x82126804;
		  /* 82126804h */ case   11:  		/* mr R5, R30 */
		/* 82126804h case   11:*/		regs.R5 = regs.R30;
		/* 82126804h case   11:*/		return 0x82126808;
		  /* 82126808h */ case   12:  		/* lwz R6, <#[R29 + 16]> */
		/* 82126808h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000010) );
		/* 82126808h case   12:*/		return 0x8212680C;
		  /* 8212680Ch */ case   13:  		/* mr R4, R28 */
		/* 8212680Ch case   13:*/		regs.R4 = regs.R28;
		/* 8212680Ch case   13:*/		return 0x82126810;
		  /* 82126810h */ case   14:  		/* bl -381984 */
		/* 82126810h case   14:*/		regs.LR = 0x82126814; return 0x820C93F0;
		/* 82126810h case   14:*/		return 0x82126814;
		  /* 82126814h */ case   15:  		/* b 8 */
		/* 82126814h case   15:*/		return 0x8212681C;
		/* 82126814h case   15:*/		return 0x82126818;
	}
	return 0x82126818;
} // Block from 821267D8h-82126818h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82126818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126818);
		  /* 82126818h */ case    0:  		/* mr R3, R18 */
		/* 82126818h case    0:*/		regs.R3 = regs.R18;
		/* 82126818h case    0:*/		return 0x8212681C;
	}
	return 0x8212681C;
} // Block from 82126818h-8212681Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212681Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212681C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212681C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212681C);
		  /* 8212681Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8212681Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212681Ch case    0:*/		return 0x82126820;
		  /* 82126820h */ case    1:  		/* bc 12, CR6_EQ, -192 */
		/* 82126820h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 82126820h case    1:*/		return 0x82126824;
		  /* 82126824h */ case    2:  		/* stw R3, <#[R25 + 12]> */
		/* 82126824h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x0000000C) );
		/* 82126824h case    2:*/		return 0x82126828;
		  /* 82126828h */ case    3:  		/* mr R30, R3 */
		/* 82126828h case    3:*/		regs.R30 = regs.R3;
		/* 82126828h case    3:*/		return 0x8212682C;
	}
	return 0x8212682C;
} // Block from 8212681Ch-8212682Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8212682Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212682C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212682C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212682C);
		  /* 8212682Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8212682Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8212682Ch case    0:*/		return 0x82126830;
		  /* 82126830h */ case    1:  		/* lwz R10, <#[R27 + 20]> */
		/* 82126830h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 82126830h case    1:*/		return 0x82126834;
		  /* 82126834h */ case    2:  		/* lwz R11, <#[R11 + 20]> */
		/* 82126834h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82126834h case    2:*/		return 0x82126838;
		  /* 82126838h */ case    3:  		/* lwz R3, <#[R10 + 36]> */
		/* 82126838h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000024) );
		/* 82126838h case    3:*/		return 0x8212683C;
		  /* 8212683Ch */ case    4:  		/* lwz R4, <#[R11 + 36]> */
		/* 8212683Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000024) );
		/* 8212683Ch case    4:*/		return 0x82126840;
		  /* 82126840h */ case    5:  		/* bl -382208 */
		/* 82126840h case    5:*/		regs.LR = 0x82126844; return 0x820C9340;
		/* 82126840h case    5:*/		return 0x82126844;
		  /* 82126844h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82126844h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126844h case    6:*/		return 0x82126848;
		  /* 82126848h */ case    7:  		/* bc 12, CR0_EQ, 208 */
		/* 82126848h case    7:*/		if ( regs.CR[0].eq ) { return 0x82126918;  }
		/* 82126848h case    7:*/		return 0x8212684C;
	}
	return 0x8212684C;
} // Block from 8212682Ch-8212684Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8212684Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212684C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212684C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212684C);
		  /* 8212684Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8212684Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8212684Ch case    0:*/		return 0x82126850;
		  /* 82126850h */ case    1:  		/* bc 12, CR6_EQ, -240 */
		/* 82126850h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 82126850h case    1:*/		return 0x82126854;
		  /* 82126854h */ case    2:  		/* lwz R28, <#[R30 + 8]> */
		/* 82126854h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000008) );
		/* 82126854h case    2:*/		return 0x82126858;
		  /* 82126858h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 82126858h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82126858h case    3:*/		return 0x8212685C;
		  /* 8212685Ch */ case    4:  		/* bc 12, CR6_EQ, -252 */
		/* 8212685Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 8212685Ch case    4:*/		return 0x82126860;
		  /* 82126860h */ case    5:  		/* lwz R11, <#[R28 + 4]> */
		/* 82126860h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82126860h case    5:*/		return 0x82126864;
		  /* 82126864h */ case    6:  		/* cmpwi CR6, R11, 12 */
		/* 82126864h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82126864h case    6:*/		return 0x82126868;
		  /* 82126868h */ case    7:  		/* lwz R11, <#[R28 + 20]> */
		/* 82126868h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82126868h case    7:*/		return 0x8212686C;
		  /* 8212686Ch */ case    8:  		/* bc 4, CR6_EQ, 56 */
		/* 8212686Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821268A4;  }
		/* 8212686Ch case    8:*/		return 0x82126870;
		  /* 82126870h */ case    9:  		/* lwz R11, <#[R11 + 32]> */
		/* 82126870h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82126870h case    9:*/		return 0x82126874;
		  /* 82126874h */ case   10:  		/* lwz R10, <#[R26 + 8]> */
		/* 82126874h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 82126874h case   10:*/		return 0x82126878;
		  /* 82126878h */ case   11:  		/* lwz R11, <#[R11 + 32]> */
		/* 82126878h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82126878h case   11:*/		return 0x8212687C;
		  /* 8212687Ch */ case   12:  		/* lwz R10, <#[R10 + 24]> */
		/* 8212687Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 8212687Ch case   12:*/		return 0x82126880;
		  /* 82126880h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 82126880h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82126880h case   13:*/		return 0x82126884;
		  /* 82126884h */ case   14:  		/* lwz R10, <#[R10 + 16]> */
		/* 82126884h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82126884h case   14:*/		return 0x82126888;
		  /* 82126888h */ case   15:  		/* stw R10, <#[R11 + 24]> */
		/* 82126888h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 82126888h case   15:*/		return 0x8212688C;
		  /* 8212688Ch */ case   16:  		/* lwz R11, <#[R29 + 8]> */
		/* 8212688Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8212688Ch case   16:*/		return 0x82126890;
		  /* 82126890h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 82126890h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82126890h case   17:*/		return 0x82126894;
		  /* 82126894h */ case   18:  		/* cmpwi CR6, R11, 12 */
		/* 82126894h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82126894h case   18:*/		return 0x82126898;
		  /* 82126898h */ case   19:  		/* bc 12, CR6_EQ, 108 */
		/* 82126898h case   19:*/		if ( regs.CR[6].eq ) { return 0x82126904;  }
		/* 82126898h case   19:*/		return 0x8212689C;
		  /* 8212689Ch */ case   20:  		/* mr R29, R26 */
		/* 8212689Ch case   20:*/		regs.R29 = regs.R26;
		/* 8212689Ch case   20:*/		return 0x821268A0;
		  /* 821268A0h */ case   21:  		/* b 100 */
		/* 821268A0h case   21:*/		return 0x82126904;
		/* 821268A0h case   21:*/		return 0x821268A4;
	}
	return 0x821268A4;
} // Block from 8212684Ch-821268A4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821268A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821268A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821268A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821268A4);
		  /* 821268A4h */ case    0:  		/* mr R3, R24 */
		/* 821268A4h case    0:*/		regs.R3 = regs.R24;
		/* 821268A4h case    0:*/		return 0x821268A8;
		  /* 821268A8h */ case    1:  		/* lwz R5, <#[R24 + 20]> */
		/* 821268A8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000014) );
		/* 821268A8h case    1:*/		return 0x821268AC;
		  /* 821268ACh */ case    2:  		/* addi R4, R11, 16 */
		/* 821268ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 821268ACh case    2:*/		return 0x821268B0;
		  /* 821268B0h */ case    3:  		/* bl -59288 */
		/* 821268B0h case    3:*/		regs.LR = 0x821268B4; return 0x82118118;
		/* 821268B0h case    3:*/		return 0x821268B4;
		  /* 821268B4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821268B4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821268B4h case    4:*/		return 0x821268B8;
		  /* 821268B8h */ case    5:  		/* bc 12, CR0_EQ, -344 */
		/* 821268B8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 821268B8h case    5:*/		return 0x821268BC;
		  /* 821268BCh */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 821268BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821268BCh case    6:*/		return 0x821268C0;
		  /* 821268C0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821268C0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821268C0h case    7:*/		return 0x821268C4;
		  /* 821268C4h */ case    8:  		/* bc 12, CR6_EQ, -356 */
		/* 821268C4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821268C4h case    8:*/		return 0x821268C8;
		  /* 821268C8h */ case    9:  		/* lwz R10, <#[R29 + 8]> */
		/* 821268C8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821268C8h case    9:*/		return 0x821268CC;
		  /* 821268CCh */ case   10:  		/* mr R26, R29 */
		/* 821268CCh case   10:*/		regs.R26 = regs.R29;
		/* 821268CCh case   10:*/		return 0x821268D0;
		  /* 821268D0h */ case   11:  		/* lwz R9, <#[R28 + 24]> */
		/* 821268D0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000018) );
		/* 821268D0h case   11:*/		return 0x821268D4;
		  /* 821268D4h */ case   12:  		/* mr R25, R30 */
		/* 821268D4h case   12:*/		regs.R25 = regs.R30;
		/* 821268D4h case   12:*/		return 0x821268D8;
		  /* 821268D8h */ case   13:  		/* lwz R11, <#[R11 + 24]> */
		/* 821268D8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821268D8h case   13:*/		return 0x821268DC;
		  /* 821268DCh */ case   14:  		/* lwz R10, <#[R10 + 24]> */
		/* 821268DCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 821268DCh case   14:*/		return 0x821268E0;
		  /* 821268E0h */ case   15:  		/* lwz R8, <#[R10 + 16]> */
		/* 821268E0h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000010) );
		/* 821268E0h case   15:*/		return 0x821268E4;
		  /* 821268E4h */ case   16:  		/* stw R8, <#[R9 + 16]> */
		/* 821268E4h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000010) );
		/* 821268E4h case   16:*/		return 0x821268E8;
		  /* 821268E8h */ case   17:  		/* stw R8, <#[R11 + 16]> */
		/* 821268E8h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 821268E8h case   17:*/		return 0x821268EC;
		  /* 821268ECh */ case   18:  		/* lwz R8, <#[R10 + 24]> */
		/* 821268ECh case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000018) );
		/* 821268ECh case   18:*/		return 0x821268F0;
		  /* 821268F0h */ case   19:  		/* stw R8, <#[R9 + 24]> */
		/* 821268F0h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000018) );
		/* 821268F0h case   19:*/		return 0x821268F4;
		  /* 821268F4h */ case   20:  		/* stw R8, <#[R11 + 24]> */
		/* 821268F4h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 821268F4h case   20:*/		return 0x821268F8;
		  /* 821268F8h */ case   21:  		/* lwz R10, <#[R10 + 28]> */
		/* 821268F8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821268F8h case   21:*/		return 0x821268FC;
		  /* 821268FCh */ case   22:  		/* stw R10, <#[R9 + 28]> */
		/* 821268FCh case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x0000001C) );
		/* 821268FCh case   22:*/		return 0x82126900;
		  /* 82126900h */ case   23:  		/* stw R10, <#[R11 + 28]> */
		/* 82126900h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82126900h case   23:*/		return 0x82126904;
	}
	return 0x82126904;
} // Block from 821268A4h-82126904h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82126904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126904);
		  /* 82126904h */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 82126904h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 82126904h case    0:*/		return 0x82126908;
		  /* 82126908h */ case    1:  		/* lwz R30, <#[R30 + 12]> */
		/* 82126908h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82126908h case    1:*/		return 0x8212690C;
	}
	return 0x8212690C;
} // Block from 82126904h-8212690Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212690Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212690C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212690C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212690C);
		  /* 8212690Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8212690Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8212690Ch case    0:*/		return 0x82126910;
		  /* 82126910h */ case    1:  		/* bc 4, CR6_EQ, -368 */
		/* 82126910h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821267A0;  }
		/* 82126910h case    1:*/		return 0x82126914;
		  /* 82126914h */ case    2:  		/* b 96 */
		/* 82126914h case    2:*/		return 0x82126974;
		/* 82126914h case    2:*/		return 0x82126918;
	}
	return 0x82126918;
} // Block from 8212690Ch-82126918h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126918);
		  /* 82126918h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 82126918h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82126918h case    0:*/		return 0x8212691C;
		  /* 8212691Ch */ case    1:  		/* lis R10, -32253 */
		/* 8212691Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212691Ch case    1:*/		return 0x82126920;
		  /* 82126920h */ case    2:  		/* li R5, 3068 */
		/* 82126920h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBFC);
		/* 82126920h case    2:*/		return 0x82126924;
		  /* 82126924h */ case    3:  		/* lwz R7, <#[R21 + 8]> */
		/* 82126924h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000008) );
		/* 82126924h case    3:*/		return 0x82126928;
		  /* 82126928h */ case    4:  		/* addi R6, R10, 13680 */
		/* 82126928h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x3570);
		/* 82126928h case    4:*/		return 0x8212692C;
		  /* 8212692Ch */ case    5:  		/* mr R4, R21 */
		/* 8212692Ch case    5:*/		regs.R4 = regs.R21;
		/* 8212692Ch case    5:*/		return 0x82126930;
		  /* 82126930h */ case    6:  		/* mr R3, R24 */
		/* 82126930h case    6:*/		regs.R3 = regs.R24;
		/* 82126930h case    6:*/		return 0x82126934;
		  /* 82126934h */ case    7:  		/* lwz R11, <#[R11 + 20]> */
		/* 82126934h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82126934h case    7:*/		return 0x82126938;
		  /* 82126938h */ case    8:  		/* lwz R8, <#[R11 + 24]> */
		/* 82126938h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 82126938h case    8:*/		return 0x8212693C;
		  /* 8212693Ch */ case    9:  		/* bl -53404 */
		/* 8212693Ch case    9:*/		regs.LR = 0x82126940; return 0x821198A0;
		/* 8212693Ch case    9:*/		return 0x82126940;
		  /* 82126940h */ case   10:  		/* b -480 */
		/* 82126940h case   10:*/		return 0x82126760;
		/* 82126940h case   10:*/		return 0x82126944;
		  /* 82126944h */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 82126944h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82126944h case   11:*/		return 0x82126948;
		  /* 82126948h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82126948h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126948h case   12:*/		return 0x8212694C;
		  /* 8212694Ch */ case   13:  		/* bc 12, CR6_EQ, 80 */
		/* 8212694Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8212699C;  }
		/* 8212694Ch case   13:*/		return 0x82126950;
		  /* 82126950h */ case   14:  		/* lwz R11, <#[R11 + 20]> */
		/* 82126950h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82126950h case   14:*/		return 0x82126954;
		  /* 82126954h */ case   15:  		/* lwz R10, <#[R26 + 8]> */
		/* 82126954h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 82126954h case   15:*/		return 0x82126958;
		  /* 82126958h */ case   16:  		/* lwz R11, <#[R11 + 32]> */
		/* 82126958h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82126958h case   16:*/		return 0x8212695C;
		  /* 8212695Ch */ case   17:  		/* lwz R10, <#[R10 + 24]> */
		/* 8212695Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 8212695Ch case   17:*/		return 0x82126960;
		  /* 82126960h */ case   18:  		/* lwz R11, <#[R11 + 32]> */
		/* 82126960h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82126960h case   18:*/		return 0x82126964;
		  /* 82126964h */ case   19:  		/* lwz R10, <#[R10 + 16]> */
		/* 82126964h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82126964h case   19:*/		return 0x82126968;
		  /* 82126968h */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 82126968h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82126968h case   20:*/		return 0x8212696C;
		  /* 8212696Ch */ case   21:  		/* stw R10, <#[R11 + 24]> */
		/* 8212696Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8212696Ch case   21:*/		return 0x82126970;
		  /* 82126970h */ case   22:  		/* lwz R30, <#[R30 + 12]> */
		/* 82126970h case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82126970h case   22:*/		return 0x82126974;
	}
	return 0x82126974;
} // Block from 82126918h-82126974h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82126974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126974);
		  /* 82126974h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82126974h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82126974h case    0:*/		return 0x82126978;
		  /* 82126978h */ case    1:  		/* bc 4, CR6_EQ, -52 */
		/* 82126978h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126944;  }
		/* 82126978h case    1:*/		return 0x8212697C;
		  /* 8212697Ch */ case    2:  		/* b 32 */
		/* 8212697Ch case    2:*/		return 0x8212699C;
		/* 8212697Ch case    2:*/		return 0x82126980;
	}
	return 0x82126980;
} // Block from 82126974h-82126980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126980);
		  /* 82126980h */ case    0:  		/* lwz R11, <#[R24 + 112]> */
		/* 82126980h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000070) );
		/* 82126980h case    0:*/		return 0x82126984;
		  /* 82126984h */ case    1:  		/* stw R11, <#[R31 + 16]> */
		/* 82126984h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82126984h case    1:*/		return 0x82126988;
		  /* 82126988h */ case    2:  		/* bl -50616 */
		/* 82126988h case    2:*/		regs.LR = 0x8212698C; return 0x8211A3D0;
		/* 82126988h case    2:*/		return 0x8212698C;
		  /* 8212698Ch */ case    3:  		/* stw R3, <#[R31 + 20]> */
		/* 8212698Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8212698Ch case    3:*/		return 0x82126990;
		  /* 82126990h */ case    4:  		/* lwz R11, <#[R24 + 112]> */
		/* 82126990h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000070) );
		/* 82126990h case    4:*/		return 0x82126994;
		  /* 82126994h */ case    5:  		/* add R11, R3, R11 */
		/* 82126994h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82126994h case    5:*/		return 0x82126998;
		  /* 82126998h */ case    6:  		/* stw R11, <#[R24 + 112]> */
		/* 82126998h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000070) );
		/* 82126998h case    6:*/		return 0x8212699C;
	}
	return 0x8212699C;
} // Block from 82126980h-8212699Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212699Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212699C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212699C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212699C);
		  /* 8212699Ch */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212699Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212699Ch case    0:*/		return 0x821269A0;
		  /* 821269A0h */ case    1:  		/* li R10, 3 */
		/* 821269A0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821269A0h case    1:*/		return 0x821269A4;
		  /* 821269A4h */ case    2:  		/* stw R11, <#[R1 + 160]> */
		/* 821269A4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 821269A4h case    2:*/		return 0x821269A8;
		  /* 821269A8h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 821269A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821269A8h case    3:*/		return 0x821269AC;
		  /* 821269ACh */ case    4:  		/* stw R10, <#[R1 + 184]> */
		/* 821269ACh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 821269ACh case    4:*/		return 0x821269B0;
		  /* 821269B0h */ case    5:  		/* stw R18, <#[R1 + 188]> */
		/* 821269B0h case    5:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000BC) );
		/* 821269B0h case    5:*/		return 0x821269B4;
		  /* 821269B4h */ case    6:  		/* stw R11, <#[R1 + 164]> */
		/* 821269B4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821269B4h case    6:*/		return 0x821269B8;
		  /* 821269B8h */ case    7:  		/* lwz R3, <#[R31 + 40]> */
		/* 821269B8h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821269B8h case    7:*/		return 0x821269BC;
		  /* 821269BCh */ case    8:  		/* bl -382548 */
		/* 821269BCh case    8:*/		regs.LR = 0x821269C0; return 0x820C9368;
		/* 821269BCh case    8:*/		return 0x821269C0;
		  /* 821269C0h */ case    9:  		/* stw R3, <#[R1 + 192]> */
		/* 821269C0h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000C0) );
		/* 821269C0h case    9:*/		return 0x821269C4;
		  /* 821269C4h */ case   10:  		/* mr R3, R19 */
		/* 821269C4h case   10:*/		regs.R3 = regs.R19;
		/* 821269C4h case   10:*/		return 0x821269C8;
		  /* 821269C8h */ case   11:  		/* bl -382560 */
		/* 821269C8h case   11:*/		regs.LR = 0x821269CC; return 0x820C9368;
		/* 821269C8h case   11:*/		return 0x821269CC;
		  /* 821269CCh */ case   12:  		/* stw R3, <#[R1 + 204]> */
		/* 821269CCh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000CC) );
		/* 821269CCh case   12:*/		return 0x821269D0;
		  /* 821269D0h */ case   13:  		/* lwz R11, <#[R31 + 40]> */
		/* 821269D0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821269D0h case   13:*/		return 0x821269D4;
		  /* 821269D4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821269D4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821269D4h case   14:*/		return 0x821269D8;
		  /* 821269D8h */ case   15:  		/* lwz R4, <#[R1 + 192]> */
		/* 821269D8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C0) );
		/* 821269D8h case   15:*/		return 0x821269DC;
		  /* 821269DCh */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 821269DCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821269E8;  }
		/* 821269DCh case   16:*/		return 0x821269E0;
		  /* 821269E0h */ case   17:  		/* cmplwi CR6, R4, 0 */
		/* 821269E0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821269E0h case   17:*/		return 0x821269E4;
		  /* 821269E4h */ case   18:  		/* bc 12, CR6_EQ, -644 */
		/* 821269E4h case   18:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821269E4h case   18:*/		return 0x821269E8;
	}
	return 0x821269E8;
} // Block from 8212699Ch-821269E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821269E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821269E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821269E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821269E8);
		  /* 821269E8h */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821269E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821269E8h case    0:*/		return 0x821269EC;
		  /* 821269ECh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821269ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821269F8;  }
		/* 821269ECh case    1:*/		return 0x821269F0;
		  /* 821269F0h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 821269F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821269F0h case    2:*/		return 0x821269F4;
		  /* 821269F4h */ case    3:  		/* bc 12, CR6_EQ, -660 */
		/* 821269F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82126760;  }
		/* 821269F4h case    3:*/		return 0x821269F8;
	}
	return 0x821269F8;
} // Block from 821269E8h-821269F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821269F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821269F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821269F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821269F8);
		  /* 821269F8h */ case    0:  		/* li R5, 0 */
		/* 821269F8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821269F8h case    0:*/		return 0x821269FC;
		  /* 821269FCh */ case    1:  		/* mr R3, R24 */
		/* 821269FCh case    1:*/		regs.R3 = regs.R24;
		/* 821269FCh case    1:*/		return 0x82126A00;
		  /* 82126A00h */ case    2:  		/* bl -51384 */
		/* 82126A00h case    2:*/		regs.LR = 0x82126A04; return 0x8211A148;
		/* 82126A00h case    2:*/		return 0x82126A04;
		  /* 82126A04h */ case    3:  		/* addi R5, R1, 144 */
		/* 82126A04h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 82126A04h case    3:*/		return 0x82126A08;
		  /* 82126A08h */ case    4:  		/* mr R4, R17 */
		/* 82126A08h case    4:*/		regs.R4 = regs.R17;
		/* 82126A08h case    4:*/		return 0x82126A0C;
		  /* 82126A0Ch */ case    5:  		/* mr R3, R24 */
		/* 82126A0Ch case    5:*/		regs.R3 = regs.R24;
		/* 82126A0Ch case    5:*/		return 0x82126A10;
		  /* 82126A10h */ case    6:  		/* bl -23040 */
		/* 82126A10h case    6:*/		regs.LR = 0x82126A14; return 0x82121010;
		/* 82126A10h case    6:*/		return 0x82126A14;
		  /* 82126A14h */ case    7:  		/* stw R3, <#[R31 + 52]> */
		/* 82126A14h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 82126A14h case    7:*/		return 0x82126A18;
		  /* 82126A18h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82126A18h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126A18h case    8:*/		return 0x82126A1C;
		  /* 82126A1Ch */ case    9:  		/* bc 12, CR0_EQ, -700 */
		/* 82126A1Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82126760;  }
		/* 82126A1Ch case    9:*/		return 0x82126A20;
		  /* 82126A20h */ case   10:  		/* cmplwi CR6, R23, 0 */
		/* 82126A20h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82126A20h case   10:*/		return 0x82126A24;
		  /* 82126A24h */ case   11:  		/* bc 4, CR6_EQ, 56 */
		/* 82126A24h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82126A5C;  }
		/* 82126A24h case   11:*/		return 0x82126A28;
		  /* 82126A28h */ case   12:  		/* lwz R30, <#[R24 + 20]> */
		/* 82126A28h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000014) );
		/* 82126A28h case   12:*/		return 0x82126A2C;
		  /* 82126A2Ch */ case   13:  		/* li R5, 0 */
		/* 82126A2Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82126A2Ch case   13:*/		return 0x82126A30;
		  /* 82126A30h */ case   14:  		/* mr R4, R22 */
		/* 82126A30h case   14:*/		regs.R4 = regs.R22;
		/* 82126A30h case   14:*/		return 0x82126A34;
		  /* 82126A34h */ case   15:  		/* mr R3, R24 */
		/* 82126A34h case   15:*/		regs.R3 = regs.R24;
		/* 82126A34h case   15:*/		return 0x82126A38;
		  /* 82126A38h */ case   16:  		/* lwz R11, <#[R30 + 32]> */
		/* 82126A38h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82126A38h case   16:*/		return 0x82126A3C;
		  /* 82126A3Ch */ case   17:  		/* stw R11, <#[R24 + 20]> */
		/* 82126A3Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 82126A3Ch case   17:*/		return 0x82126A40;
		  /* 82126A40h */ case   18:  		/* bl -52568 */
		/* 82126A40h case   18:*/		regs.LR = 0x82126A44; return 0x82119CE8;
		/* 82126A40h case   18:*/		return 0x82126A44;
		  /* 82126A44h */ case   19:  		/* stw R30, <#[R24 + 20]> */
		/* 82126A44h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x00000014) );
		/* 82126A44h case   19:*/		return 0x82126A48;
		  /* 82126A48h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 82126A48h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126A48h case   20:*/		return 0x82126A4C;
		  /* 82126A4Ch */ case   21:  		/* bc 12, CR0_LT, -748 */
		/* 82126A4Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x82126760;  }
		/* 82126A4Ch case   21:*/		return 0x82126A50;
		  /* 82126A50h */ case   22:  		/* lwz R11, <#[R24 + 108]> */
		/* 82126A50h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000006C) );
		/* 82126A50h case   22:*/		return 0x82126A54;
		  /* 82126A54h */ case   23:  		/* addi R11, R11, 1 */
		/* 82126A54h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82126A54h case   23:*/		return 0x82126A58;
		  /* 82126A58h */ case   24:  		/* stw R11, <#[R24 + 108]> */
		/* 82126A58h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000006C) );
		/* 82126A58h case   24:*/		return 0x82126A5C;
	}
	return 0x82126A5C;
} // Block from 821269F8h-82126A5Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 82126A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126A5C);
		  /* 82126A5Ch */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 82126A5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 82126A5Ch case    0:*/		return 0x82126A60;
		  /* 82126A60h */ case    1:  		/* mr R3, R20 */
		/* 82126A60h case    1:*/		regs.R3 = regs.R20;
		/* 82126A60h case    1:*/		return 0x82126A64;
		  /* 82126A64h */ case    2:  		/* lwz R10, <#[R24 + 20]> */
		/* 82126A64h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000014) );
		/* 82126A64h case    2:*/		return 0x82126A68;
		  /* 82126A68h */ case    3:  		/* stw R11, <#[R10 + 20]> */
		/* 82126A68h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 82126A68h case    3:*/		return 0x82126A6C;
		  /* 82126A6Ch */ case    4:  		/* stw R31, <#[R24 + 32]> */
		/* 82126A6Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000020) );
		/* 82126A6Ch case    4:*/		return 0x82126A70;
		  /* 82126A70h */ case    5:  		/* b -780 */
		/* 82126A70h case    5:*/		return 0x82126764;
		/* 82126A70h case    5:*/		return 0x82126A74;
		  /* 82126A74h */ case    6:  		/* nop */
		/* 82126A74h case    6:*/		cpu::op::nop();
		/* 82126A74h case    6:*/		return 0x82126A78;
	}
	return 0x82126A78;
} // Block from 82126A5Ch-82126A78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82126A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126A78);
		  /* 82126A78h */ case    0:  		/* mfspr R12, LR */
		/* 82126A78h case    0:*/		regs.R12 = regs.LR;
		/* 82126A78h case    0:*/		return 0x82126A7C;
		  /* 82126A7Ch */ case    1:  		/* bl -612444 */
		/* 82126A7Ch case    1:*/		regs.LR = 0x82126A80; return 0x82091220;
		/* 82126A7Ch case    1:*/		return 0x82126A80;
		  /* 82126A80h */ case    2:  		/* stwu R1, <#[R1 - 320]> */
		/* 82126A80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 82126A80h case    2:*/		return 0x82126A84;
		  /* 82126A84h */ case    3:  		/* li R14, 0 */
		/* 82126A84h case    3:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 82126A84h case    3:*/		return 0x82126A88;
		  /* 82126A88h */ case    4:  		/* mr R26, R3 */
		/* 82126A88h case    4:*/		regs.R26 = regs.R3;
		/* 82126A88h case    4:*/		return 0x82126A8C;
		  /* 82126A8Ch */ case    5:  		/* mr R29, R4 */
		/* 82126A8Ch case    5:*/		regs.R29 = regs.R4;
		/* 82126A8Ch case    5:*/		return 0x82126A90;
		  /* 82126A90h */ case    6:  		/* stw R14, <#[R1 + 152]> */
		/* 82126A90h case    6:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000098) );
		/* 82126A90h case    6:*/		return 0x82126A94;
		  /* 82126A94h */ case    7:  		/* mr R17, R5 */
		/* 82126A94h case    7:*/		regs.R17 = regs.R5;
		/* 82126A94h case    7:*/		return 0x82126A98;
		  /* 82126A98h */ case    8:  		/* stw R14, <#[R1 + 148]> */
		/* 82126A98h case    8:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000094) );
		/* 82126A98h case    8:*/		return 0x82126A9C;
		  /* 82126A9Ch */ case    9:  		/* mr R15, R6 */
		/* 82126A9Ch case    9:*/		regs.R15 = regs.R6;
		/* 82126A9Ch case    9:*/		return 0x82126AA0;
		  /* 82126AA0h */ case   10:  		/* stw R14, <#[R1 + 144]> */
		/* 82126AA0h case   10:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000090) );
		/* 82126AA0h case   10:*/		return 0x82126AA4;
		  /* 82126AA4h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 82126AA4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82126AA4h case   11:*/		return 0x82126AA8;
		  /* 82126AA8h */ case   12:  		/* stw R14, <#[R1 + 156]> */
		/* 82126AA8h case   12:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000009C) );
		/* 82126AA8h case   12:*/		return 0x82126AAC;
		  /* 82126AACh */ case   13:  		/* mr R16, R14 */
		/* 82126AACh case   13:*/		regs.R16 = regs.R14;
		/* 82126AACh case   13:*/		return 0x82126AB0;
		  /* 82126AB0h */ case   14:  		/* stw R14, <#[R1 + 164]> */
		/* 82126AB0h case   14:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x000000A4) );
		/* 82126AB0h case   14:*/		return 0x82126AB4;
		  /* 82126AB4h */ case   15:  		/* stw R14, <#[R1 + 160]> */
		/* 82126AB4h case   15:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x000000A0) );
		/* 82126AB4h case   15:*/		return 0x82126AB8;
		  /* 82126AB8h */ case   16:  		/* bc 12, CR6_EQ, 1536 */
		/* 82126AB8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821270B8;  }
		/* 82126AB8h case   16:*/		return 0x82126ABC;
		  /* 82126ABCh */ case   17:  		/* lwz R11, <#[R4 + 4]> */
		/* 82126ABCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82126ABCh case   17:*/		return 0x82126AC0;
		  /* 82126AC0h */ case   18:  		/* cmpwi CR6, R11, 3 */
		/* 82126AC0h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82126AC0h case   18:*/		return 0x82126AC4;
		  /* 82126AC4h */ case   19:  		/* bc 4, CR6_EQ, 1524 */
		/* 82126AC4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821270B8;  }
		/* 82126AC4h case   19:*/		return 0x82126AC8;
		  /* 82126AC8h */ case   20:  		/* lwz R11, <#[R3 + 32]> */
		/* 82126AC8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82126AC8h case   20:*/		return 0x82126ACC;
		  /* 82126ACCh */ case   21:  		/* addi R18, R4, 16 */
		/* 82126ACCh case   21:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R4,0x10);
		/* 82126ACCh case   21:*/		return 0x82126AD0;
		  /* 82126AD0h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82126AD0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126AD0h case   22:*/		return 0x82126AD4;
		  /* 82126AD4h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82126AD4h case   23:*/		if ( regs.CR[6].eq ) { return 0x82126AE0;  }
		/* 82126AD4h case   23:*/		return 0x82126AD8;
		  /* 82126AD8h */ case   24:  		/* lwz R6, <#[R11 + 36]> */
		/* 82126AD8h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000024) );
		/* 82126AD8h case   24:*/		return 0x82126ADC;
		  /* 82126ADCh */ case   25:  		/* b 8 */
		/* 82126ADCh case   25:*/		return 0x82126AE4;
		/* 82126ADCh case   25:*/		return 0x82126AE0;
	}
	return 0x82126AE0;
} // Block from 82126A78h-82126AE0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82126AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126AE0);
		  /* 82126AE0h */ case    0:  		/* mr R6, R14 */
		/* 82126AE0h case    0:*/		regs.R6 = regs.R14;
		/* 82126AE0h case    0:*/		return 0x82126AE4;
	}
	return 0x82126AE4;
} // Block from 82126AE0h-82126AE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126AE4);
		  /* 82126AE4h */ case    0:  		/* li R9, 6 */
		/* 82126AE4h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 82126AE4h case    0:*/		return 0x82126AE8;
		  /* 82126AE8h */ case    1:  		/* cmpwi CR6, R15, 0 */
		/* 82126AE8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82126AE8h case    1:*/		return 0x82126AEC;
		  /* 82126AECh */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82126AECh case    2:*/		if ( regs.CR[6].eq ) { return 0x82126AF4;  }
		/* 82126AECh case    2:*/		return 0x82126AF0;
		  /* 82126AF0h */ case    3:  		/* li R9, 22 */
		/* 82126AF0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x16);
		/* 82126AF0h case    3:*/		return 0x82126AF4;
	}
	return 0x82126AF4;
} // Block from 82126AE4h-82126AF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82126AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126AF4);
		  /* 82126AF4h */ case    0:  		/* addi R11, R1, 148 */
		/* 82126AF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x94);
		/* 82126AF4h case    0:*/		return 0x82126AF8;
		  /* 82126AF8h */ case    1:  		/* lwz R8, <#[R26 + 20]> */
		/* 82126AF8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000014) );
		/* 82126AF8h case    1:*/		return 0x82126AFC;
		  /* 82126AFCh */ case    2:  		/* addi R10, R1, 152 */
		/* 82126AFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x98);
		/* 82126AFCh case    2:*/		return 0x82126B00;
		  /* 82126B00h */ case    3:  		/* mr R7, R17 */
		/* 82126B00h case    3:*/		regs.R7 = regs.R17;
		/* 82126B00h case    3:*/		return 0x82126B04;
		  /* 82126B04h */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 82126B04h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82126B04h case    4:*/		return 0x82126B08;
		  /* 82126B08h */ case    5:  		/* mr R5, R18 */
		/* 82126B08h case    5:*/		regs.R5 = regs.R18;
		/* 82126B08h case    5:*/		return 0x82126B0C;
		  /* 82126B0Ch */ case    6:  		/* li R4, 2 */
		/* 82126B0Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82126B0Ch case    6:*/		return 0x82126B10;
		  /* 82126B10h */ case    7:  		/* mr R3, R26 */
		/* 82126B10h case    7:*/		regs.R3 = regs.R26;
		/* 82126B10h case    7:*/		return 0x82126B14;
		  /* 82126B14h */ case    8:  		/* mr R31, R14 */
		/* 82126B14h case    8:*/		regs.R31 = regs.R14;
		/* 82126B14h case    8:*/		return 0x82126B18;
		  /* 82126B18h */ case    9:  		/* bl -27328 */
		/* 82126B18h case    9:*/		regs.LR = 0x82126B1C; return 0x82120058;
		/* 82126B18h case    9:*/		return 0x82126B1C;
		  /* 82126B1Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82126B1Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126B1Ch case   10:*/		return 0x82126B20;
		  /* 82126B20h */ case   11:  		/* bc 12, CR0_LT, 1408 */
		/* 82126B20h case   11:*/		if ( regs.CR[0].lt ) { return 0x821270A0;  }
		/* 82126B20h case   11:*/		return 0x82126B24;
		  /* 82126B24h */ case   12:  		/* cmpwi CR6, R3, 0 */
		/* 82126B24h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126B24h case   12:*/		return 0x82126B28;
		  /* 82126B28h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 82126B28h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82126B30;  }
		/* 82126B28h case   13:*/		return 0x82126B2C;
		  /* 82126B2Ch */ case   14:  		/* li R31, 1 */
		/* 82126B2Ch case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82126B2Ch case   14:*/		return 0x82126B30;
	}
	return 0x82126B30;
} // Block from 82126AF4h-82126B30h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82126B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126B30);
		  /* 82126B30h */ case    0:  		/* lis R11, -32254 */
		/* 82126B30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82126B30h case    0:*/		return 0x82126B34;
		  /* 82126B34h */ case    1:  		/* cmpwi CR6, R15, 0 */
		/* 82126B34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82126B34h case    1:*/		return 0x82126B38;
		  /* 82126B38h */ case    2:  		/* addi R30, R11, -12544 */
		/* 82126B38h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFCF00);
		/* 82126B38h case    2:*/		return 0x82126B3C;
		  /* 82126B3Ch */ case    3:  		/* bc 4, CR6_EQ, 72 */
		/* 82126B3Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82126B84;  }
		/* 82126B3Ch case    3:*/		return 0x82126B40;
		  /* 82126B40h */ case    4:  		/* cmpwi CR6, R31, 0 */
		/* 82126B40h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82126B40h case    4:*/		return 0x82126B44;
		  /* 82126B44h */ case    5:  		/* bc 4, CR6_EQ, 300 */
		/* 82126B44h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82126C70;  }
		/* 82126B44h case    5:*/		return 0x82126B48;
		  /* 82126B48h */ case    6:  		/* mr R4, R30 */
		/* 82126B48h case    6:*/		regs.R4 = regs.R30;
		/* 82126B48h case    6:*/		return 0x82126B4C;
		  /* 82126B4Ch */ case    7:  		/* addi R10, R1, 148 */
		/* 82126B4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x94);
		/* 82126B4Ch case    7:*/		return 0x82126B50;
		  /* 82126B50h */ case    8:  		/* addi R9, R1, 144 */
		/* 82126B50h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 82126B50h case    8:*/		return 0x82126B54;
		  /* 82126B54h */ case    9:  		/* mr R8, R17 */
		/* 82126B54h case    9:*/		regs.R8 = regs.R17;
		/* 82126B54h case    9:*/		return 0x82126B58;
		  /* 82126B58h */ case   10:  		/* mr R7, R18 */
		/* 82126B58h case   10:*/		regs.R7 = regs.R18;
		/* 82126B58h case   10:*/		return 0x82126B5C;
		  /* 82126B5Ch */ case   11:  		/* li R6, 0 */
		/* 82126B5Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126B5Ch case   11:*/		return 0x82126B60;
		  /* 82126B60h */ case   12:  		/* li R5, 101 */
		/* 82126B60h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x65);
		/* 82126B60h case   12:*/		return 0x82126B64;
		  /* 82126B64h */ case   13:  		/* mr R3, R26 */
		/* 82126B64h case   13:*/		regs.R3 = regs.R26;
		/* 82126B64h case   13:*/		return 0x82126B68;
		  /* 82126B68h */ case   14:  		/* bl -42928 */
		/* 82126B68h case   14:*/		regs.LR = 0x82126B6C; return 0x8211C3B8;
		/* 82126B68h case   14:*/		return 0x82126B6C;
		  /* 82126B6Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82126B6Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126B6Ch case   15:*/		return 0x82126B70;
		  /* 82126B70h */ case   16:  		/* bc 12, CR0_LT, 1328 */
		/* 82126B70h case   16:*/		if ( regs.CR[0].lt ) { return 0x821270A0;  }
		/* 82126B70h case   16:*/		return 0x82126B74;
		  /* 82126B74h */ case   17:  		/* lwz R16, <#[R1 + 144]> */
		/* 82126B74h case   17:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000090) );
		/* 82126B74h case   17:*/		return 0x82126B78;
		  /* 82126B78h */ case   18:  		/* cmpwi CR6, R3, 0 */
		/* 82126B78h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126B78h case   18:*/		return 0x82126B7C;
		  /* 82126B7Ch */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 82126B7Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x82126B8C;  }
		/* 82126B7Ch case   19:*/		return 0x82126B80;
		  /* 82126B80h */ case   20:  		/* li R31, 1 */
		/* 82126B80h case   20:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82126B80h case   20:*/		return 0x82126B84;
	}
	return 0x82126B84;
} // Block from 82126B30h-82126B84h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82126B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126B84);
		  /* 82126B84h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82126B84h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82126B84h case    0:*/		return 0x82126B88;
		  /* 82126B88h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 82126B88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126BCC;  }
		/* 82126B88h case    1:*/		return 0x82126B8C;
	}
	return 0x82126B8C;
} // Block from 82126B84h-82126B8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126B8C);
		  /* 82126B8Ch */ case    0:  		/* addi R11, R1, 148 */
		/* 82126B8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x94);
		/* 82126B8Ch case    0:*/		return 0x82126B90;
		  /* 82126B90h */ case    1:  		/* lwz R8, <#[R26 + 20]> */
		/* 82126B90h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000014) );
		/* 82126B90h case    1:*/		return 0x82126B94;
		  /* 82126B94h */ case    2:  		/* addi R10, R1, 152 */
		/* 82126B94h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x98);
		/* 82126B94h case    2:*/		return 0x82126B98;
		  /* 82126B98h */ case    3:  		/* li R9, 2 */
		/* 82126B98h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82126B98h case    3:*/		return 0x82126B9C;
		  /* 82126B9Ch */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 82126B9Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82126B9Ch case    4:*/		return 0x82126BA0;
		  /* 82126BA0h */ case    5:  		/* li R7, 0 */
		/* 82126BA0h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82126BA0h case    5:*/		return 0x82126BA4;
		  /* 82126BA4h */ case    6:  		/* li R6, 0 */
		/* 82126BA4h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126BA4h case    6:*/		return 0x82126BA8;
		  /* 82126BA8h */ case    7:  		/* mr R5, R18 */
		/* 82126BA8h case    7:*/		regs.R5 = regs.R18;
		/* 82126BA8h case    7:*/		return 0x82126BAC;
		  /* 82126BACh */ case    8:  		/* li R4, 2 */
		/* 82126BACh case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82126BACh case    8:*/		return 0x82126BB0;
		  /* 82126BB0h */ case    9:  		/* mr R3, R26 */
		/* 82126BB0h case    9:*/		regs.R3 = regs.R26;
		/* 82126BB0h case    9:*/		return 0x82126BB4;
		  /* 82126BB4h */ case   10:  		/* bl -27484 */
		/* 82126BB4h case   10:*/		regs.LR = 0x82126BB8; return 0x82120058;
		/* 82126BB4h case   10:*/		return 0x82126BB8;
		  /* 82126BB8h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82126BB8h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126BB8h case   11:*/		return 0x82126BBC;
		  /* 82126BBCh */ case   12:  		/* bc 12, CR0_LT, 1252 */
		/* 82126BBCh case   12:*/		if ( regs.CR[0].lt ) { return 0x821270A0;  }
		/* 82126BBCh case   12:*/		return 0x82126BC0;
		  /* 82126BC0h */ case   13:  		/* cmpwi CR6, R3, 0 */
		/* 82126BC0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126BC0h case   13:*/		return 0x82126BC4;
		  /* 82126BC4h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 82126BC4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82126BCC;  }
		/* 82126BC4h case   14:*/		return 0x82126BC8;
		  /* 82126BC8h */ case   15:  		/* li R31, 1 */
		/* 82126BC8h case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82126BC8h case   15:*/		return 0x82126BCC;
	}
	return 0x82126BCC;
} // Block from 82126B8Ch-82126BCCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 82126BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126BCC);
		  /* 82126BCCh */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82126BCCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82126BCCh case    0:*/		return 0x82126BD0;
		  /* 82126BD0h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 82126BD0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126C18;  }
		/* 82126BD0h case    1:*/		return 0x82126BD4;
		  /* 82126BD4h */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 82126BD4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82126BD4h case    2:*/		return 0x82126BD8;
		  /* 82126BD8h */ case    3:  		/* bc 4, CR6_EQ, 140 */
		/* 82126BD8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82126C64;  }
		/* 82126BD8h case    3:*/		return 0x82126BDC;
		  /* 82126BDCh */ case    4:  		/* mr R4, R30 */
		/* 82126BDCh case    4:*/		regs.R4 = regs.R30;
		/* 82126BDCh case    4:*/		return 0x82126BE0;
		  /* 82126BE0h */ case    5:  		/* addi R10, R1, 148 */
		/* 82126BE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x94);
		/* 82126BE0h case    5:*/		return 0x82126BE4;
		  /* 82126BE4h */ case    6:  		/* addi R9, R1, 144 */
		/* 82126BE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 82126BE4h case    6:*/		return 0x82126BE8;
		  /* 82126BE8h */ case    7:  		/* li R8, 0 */
		/* 82126BE8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82126BE8h case    7:*/		return 0x82126BEC;
		  /* 82126BECh */ case    8:  		/* mr R7, R18 */
		/* 82126BECh case    8:*/		regs.R7 = regs.R18;
		/* 82126BECh case    8:*/		return 0x82126BF0;
		  /* 82126BF0h */ case    9:  		/* li R6, 0 */
		/* 82126BF0h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126BF0h case    9:*/		return 0x82126BF4;
		  /* 82126BF4h */ case   10:  		/* li R5, 101 */
		/* 82126BF4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x65);
		/* 82126BF4h case   10:*/		return 0x82126BF8;
		  /* 82126BF8h */ case   11:  		/* mr R3, R26 */
		/* 82126BF8h case   11:*/		regs.R3 = regs.R26;
		/* 82126BF8h case   11:*/		return 0x82126BFC;
		  /* 82126BFCh */ case   12:  		/* bl -43076 */
		/* 82126BFCh case   12:*/		regs.LR = 0x82126C00; return 0x8211C3B8;
		/* 82126BFCh case   12:*/		return 0x82126C00;
		  /* 82126C00h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82126C00h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126C00h case   13:*/		return 0x82126C04;
		  /* 82126C04h */ case   14:  		/* bc 12, CR0_LT, 1180 */
		/* 82126C04h case   14:*/		if ( regs.CR[0].lt ) { return 0x821270A0;  }
		/* 82126C04h case   14:*/		return 0x82126C08;
		  /* 82126C08h */ case   15:  		/* cmpwi CR6, R3, 0 */
		/* 82126C08h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126C08h case   15:*/		return 0x82126C0C;
		  /* 82126C0Ch */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 82126C0Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82126C20;  }
		/* 82126C0Ch case   16:*/		return 0x82126C10;
		  /* 82126C10h */ case   17:  		/* lwz R16, <#[R1 + 144]> */
		/* 82126C10h case   17:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000090) );
		/* 82126C10h case   17:*/		return 0x82126C14;
		  /* 82126C14h */ case   18:  		/* li R31, 1 */
		/* 82126C14h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82126C14h case   18:*/		return 0x82126C18;
	}
	return 0x82126C18;
} // Block from 82126BCCh-82126C18h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82126C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126C18);
		  /* 82126C18h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82126C18h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82126C18h case    0:*/		return 0x82126C1C;
		  /* 82126C1Ch */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 82126C1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82126C64;  }
		/* 82126C1Ch case    1:*/		return 0x82126C20;
	}
	return 0x82126C20;
} // Block from 82126C18h-82126C20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126C20);
		  /* 82126C20h */ case    0:  		/* addi R6, R1, 164 */
		/* 82126C20h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA4);
		/* 82126C20h case    0:*/		return 0x82126C24;
		  /* 82126C24h */ case    1:  		/* mr R5, R17 */
		/* 82126C24h case    1:*/		regs.R5 = regs.R17;
		/* 82126C24h case    1:*/		return 0x82126C28;
		  /* 82126C28h */ case    2:  		/* mr R4, R29 */
		/* 82126C28h case    2:*/		regs.R4 = regs.R29;
		/* 82126C28h case    2:*/		return 0x82126C2C;
		  /* 82126C2Ch */ case    3:  		/* mr R3, R26 */
		/* 82126C2Ch case    3:*/		regs.R3 = regs.R26;
		/* 82126C2Ch case    3:*/		return 0x82126C30;
		  /* 82126C30h */ case    4:  		/* bl 126840 */
		/* 82126C30h case    4:*/		regs.LR = 0x82126C34; return 0x82145BA8;
		/* 82126C30h case    4:*/		return 0x82126C34;
		  /* 82126C34h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82126C34h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126C34h case    5:*/		return 0x82126C38;
		  /* 82126C38h */ case    6:  		/* bc 12, CR0_LT, 1128 */
		/* 82126C38h case    6:*/		if ( regs.CR[0].lt ) { return 0x821270A0;  }
		/* 82126C38h case    6:*/		return 0x82126C3C;
		  /* 82126C3Ch */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 82126C3Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82126C3Ch case    7:*/		return 0x82126C40;
		  /* 82126C40h */ case    8:  		/* bc 12, CR6_EQ, 1136 */
		/* 82126C40h case    8:*/		if ( regs.CR[6].eq ) { return 0x821270B0;  }
		/* 82126C40h case    8:*/		return 0x82126C44;
		  /* 82126C44h */ case    9:  		/* lis R11, -32253 */
		/* 82126C44h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126C44h case    9:*/		return 0x82126C48;
		  /* 82126C48h */ case   10:  		/* lwz R7, <#[R18 + 8]> */
		/* 82126C48h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R18 + 0x00000008) );
		/* 82126C48h case   10:*/		return 0x82126C4C;
		  /* 82126C4Ch */ case   11:  		/* li R5, 3004 */
		/* 82126C4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBBC);
		/* 82126C4Ch case   11:*/		return 0x82126C50;
		  /* 82126C50h */ case   12:  		/* addi R6, R11, 9632 */
		/* 82126C50h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x25A0);
		/* 82126C50h case   12:*/		return 0x82126C54;
		  /* 82126C54h */ case   13:  		/* mr R4, R18 */
		/* 82126C54h case   13:*/		regs.R4 = regs.R18;
		/* 82126C54h case   13:*/		return 0x82126C58;
		  /* 82126C58h */ case   14:  		/* mr R3, R26 */
		/* 82126C58h case   14:*/		regs.R3 = regs.R26;
		/* 82126C58h case   14:*/		return 0x82126C5C;
		  /* 82126C5Ch */ case   15:  		/* bl -54204 */
		/* 82126C5Ch case   15:*/		regs.LR = 0x82126C60; return 0x821198A0;
		/* 82126C5Ch case   15:*/		return 0x82126C60;
		  /* 82126C60h */ case   16:  		/* b 1088 */
		/* 82126C60h case   16:*/		return 0x821270A0;
		/* 82126C60h case   16:*/		return 0x82126C64;
	}
	return 0x82126C64;
} // Block from 82126C20h-82126C64h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82126C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126C64);
		  /* 82126C64h */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 82126C64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82126C64h case    0:*/		return 0x82126C68;
		  /* 82126C68h */ case    1:  		/* mr R19, R16 */
		/* 82126C68h case    1:*/		regs.R19 = regs.R16;
		/* 82126C68h case    1:*/		return 0x82126C6C;
		  /* 82126C6Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82126C6Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82126C74;  }
		/* 82126C6Ch case    2:*/		return 0x82126C70;
	}
	return 0x82126C70;
} // Block from 82126C64h-82126C70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126C70);
		  /* 82126C70h */ case    0:  		/* lwz R19, <#[R1 + 152]> */
		/* 82126C70h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000098) );
		/* 82126C70h case    0:*/		return 0x82126C74;
	}
	return 0x82126C74;
} // Block from 82126C70h-82126C74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126C74);
		  /* 82126C74h */ case    0:  		/* lwz R24, <#[R19 + 44]> */
		/* 82126C74h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R19 + 0x0000002C) );
		/* 82126C74h case    0:*/		return 0x82126C78;
		  /* 82126C78h */ case    1:  		/* addi R23, R1, 156 */
		/* 82126C78h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0x9C);
		/* 82126C78h case    1:*/		return 0x82126C7C;
		  /* 82126C7Ch */ case    2:  		/* addi R22, R1, 160 */
		/* 82126C7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R1,0xA0);
		/* 82126C7Ch case    2:*/		return 0x82126C80;
		  /* 82126C80h */ case    3:  		/* mr R25, R17 */
		/* 82126C80h case    3:*/		regs.R25 = regs.R17;
		/* 82126C80h case    3:*/		return 0x82126C84;
		  /* 82126C84h */ case    4:  		/* cmplwi CR6, R24, 0 */
		/* 82126C84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82126C84h case    4:*/		return 0x82126C88;
		  /* 82126C88h */ case    5:  		/* bc 12, CR6_EQ, 584 */
		/* 82126C88h case    5:*/		if ( regs.CR[6].eq ) { return 0x82126ED0;  }
		/* 82126C88h case    5:*/		return 0x82126C8C;
		  /* 82126C8Ch */ case    6:  		/* lis R11, -32253 */
		/* 82126C8Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126C8Ch case    6:*/		return 0x82126C90;
		  /* 82126C90h */ case    7:  		/* lis R10, -32253 */
		/* 82126C90h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82126C90h case    7:*/		return 0x82126C94;
		  /* 82126C94h */ case    8:  		/* addi R21, R11, 14144 */
		/* 82126C94h case    8:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x3740);
		/* 82126C94h case    8:*/		return 0x82126C98;
		  /* 82126C98h */ case    9:  		/* addi R20, R10, 14136 */
		/* 82126C98h case    9:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R10,0x3738);
		/* 82126C98h case    9:*/		return 0x82126C9C;
		  /* 82126C9Ch */ case   10:  		/* lwz R11, <#[R24 + 12]> */
		/* 82126C9Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 82126C9Ch case   10:*/		return 0x82126CA0;
		  /* 82126CA0h */ case   11:  		/* mr R10, R14 */
		/* 82126CA0h case   11:*/		regs.R10 = regs.R14;
		/* 82126CA0h case   11:*/		return 0x82126CA4;
		  /* 82126CA4h */ case   12:  		/* lwz R27, <#[R24 + 8]> */
		/* 82126CA4h case   12:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R24 + 0x00000008) );
		/* 82126CA4h case   12:*/		return 0x82126CA8;
		  /* 82126CA8h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82126CA8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126CA8h case   13:*/		return 0x82126CAC;
		  /* 82126CACh */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82126CACh case   14:*/		if ( regs.CR[6].eq ) { return 0x82126CC8;  }
		/* 82126CACh case   14:*/		return 0x82126CB0;
		  /* 82126CB0h */ case   15:  		/* lwz R9, <#[R11 + 8]> */
		/* 82126CB0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82126CB0h case   15:*/		return 0x82126CB4;
		  /* 82126CB4h */ case   16:  		/* lwz R9, <#[R9 + 4]> */
		/* 82126CB4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82126CB4h case   16:*/		return 0x82126CB8;
		  /* 82126CB8h */ case   17:  		/* cmpwi CR6, R9, 12 */
		/* 82126CB8h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000C);
		/* 82126CB8h case   17:*/		return 0x82126CBC;
		  /* 82126CBCh */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 82126CBCh case   18:*/		if ( !regs.CR[6].eq ) { return 0x82126CC8;  }
		/* 82126CBCh case   18:*/		return 0x82126CC0;
		  /* 82126CC0h */ case   19:  		/* li R10, 1 */
		/* 82126CC0h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82126CC0h case   19:*/		return 0x82126CC4;
		  /* 82126CC4h */ case   20:  		/* mr R24, R11 */
		/* 82126CC4h case   20:*/		regs.R24 = regs.R11;
		/* 82126CC4h case   20:*/		return 0x82126CC8;
	}
	return 0x82126CC8;
} // Block from 82126C74h-82126CC8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82126CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126CC8);
		  /* 82126CC8h */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82126CC8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82126CC8h case    0:*/		return 0x82126CCC;
		  /* 82126CCCh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82126CCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82126CE0;  }
		/* 82126CCCh case    1:*/		return 0x82126CD0;
		  /* 82126CD0h */ case    2:  		/* lwz R11, <#[R27 + 24]> */
		/* 82126CD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82126CD0h case    2:*/		return 0x82126CD4;
		  /* 82126CD4h */ case    3:  		/* lwz R11, <#[R11 + 44]> */
		/* 82126CD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82126CD4h case    3:*/		return 0x82126CD8;
		  /* 82126CD8h */ case    4:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82126CD8h case    4:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82126CD8h case    4:*/		return 0x82126CDC;
		  /* 82126CDCh */ case    5:  		/* bc 12, CR0_EQ, 488 */
		/* 82126CDCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82126EC4;  }
		/* 82126CDCh case    5:*/		return 0x82126CE0;
	}
	return 0x82126CE0;
} // Block from 82126CC8h-82126CE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82126CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126CE0);
		  /* 82126CE0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82126CE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82126CE0h case    0:*/		return 0x82126CE4;
		  /* 82126CE4h */ case    1:  		/* bc 12, CR6_EQ, 472 */
		/* 82126CE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126EBC;  }
		/* 82126CE4h case    1:*/		return 0x82126CE8;
		  /* 82126CE8h */ case    2:  		/* lwz R28, <#[R27 + 24]> */
		/* 82126CE8h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000018) );
		/* 82126CE8h case    2:*/		return 0x82126CEC;
		  /* 82126CECh */ case    3:  		/* lwz R11, <#[R25 + 8]> */
		/* 82126CECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82126CECh case    3:*/		return 0x82126CF0;
		  /* 82126CF0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82126CF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126CF0h case    4:*/		return 0x82126CF4;
		  /* 82126CF4h */ case    5:  		/* lwz R30, <#[R28 + 48]> */
		/* 82126CF4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000030) );
		/* 82126CF4h case    5:*/		return 0x82126CF8;
		  /* 82126CF8h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 82126CF8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82126D04;  }
		/* 82126CF8h case    6:*/		return 0x82126CFC;
		  /* 82126CFCh */ case    7:  		/* lwz R29, <#[R11 + 16]> */
		/* 82126CFCh case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 82126CFCh case    7:*/		return 0x82126D00;
		  /* 82126D00h */ case    8:  		/* b 8 */
		/* 82126D00h case    8:*/		return 0x82126D08;
		/* 82126D00h case    8:*/		return 0x82126D04;
	}
	return 0x82126D04;
} // Block from 82126CE0h-82126D04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82126D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D04);
		  /* 82126D04h */ case    0:  		/* mr R29, R14 */
		/* 82126D04h case    0:*/		regs.R29 = regs.R14;
		/* 82126D04h case    0:*/		return 0x82126D08;
	}
	return 0x82126D08;
} // Block from 82126D04h-82126D08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D08);
		  /* 82126D08h */ case    0:  		/* li R3, 20 */
		/* 82126D08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82126D08h case    0:*/		return 0x82126D0C;
		  /* 82126D0Ch */ case    1:  		/* bl -383716 */
		/* 82126D0Ch case    1:*/		regs.LR = 0x82126D10; return 0x820C9228;
		/* 82126D0Ch case    1:*/		return 0x82126D10;
		  /* 82126D10h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82126D10h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126D10h case    2:*/		return 0x82126D14;
		  /* 82126D14h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 82126D14h case    3:*/		if ( regs.CR[0].eq ) { return 0x82126D2C;  }
		/* 82126D14h case    3:*/		return 0x82126D18;
		  /* 82126D18h */ case    4:  		/* mr R6, R20 */
		/* 82126D18h case    4:*/		regs.R6 = regs.R20;
		/* 82126D18h case    4:*/		return 0x82126D1C;
		  /* 82126D1Ch */ case    5:  		/* li R5, 0 */
		/* 82126D1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82126D1Ch case    5:*/		return 0x82126D20;
		  /* 82126D20h */ case    6:  		/* li R4, 0 */
		/* 82126D20h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82126D20h case    6:*/		return 0x82126D24;
		  /* 82126D24h */ case    7:  		/* bl -383284 */
		/* 82126D24h case    7:*/		regs.LR = 0x82126D28; return 0x820C93F0;
		/* 82126D24h case    7:*/		return 0x82126D28;
		  /* 82126D28h */ case    8:  		/* b 8 */
		/* 82126D28h case    8:*/		return 0x82126D30;
		/* 82126D28h case    8:*/		return 0x82126D2C;
	}
	return 0x82126D2C;
} // Block from 82126D08h-82126D2Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82126D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D2C);
		  /* 82126D2Ch */ case    0:  		/* mr R3, R14 */
		/* 82126D2Ch case    0:*/		regs.R3 = regs.R14;
		/* 82126D2Ch case    0:*/		return 0x82126D30;
	}
	return 0x82126D30;
} // Block from 82126D2Ch-82126D30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D30);
		  /* 82126D30h */ case    0:  		/* stw R3, <#[R23]> */
		/* 82126D30h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R23 + 0x00000000) );
		/* 82126D30h case    0:*/		return 0x82126D34;
		  /* 82126D34h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82126D34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82126D34h case    1:*/		return 0x82126D38;
		  /* 82126D38h */ case    2:  		/* bc 12, CR6_EQ, 872 */
		/* 82126D38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821270A0;  }
		/* 82126D38h case    2:*/		return 0x82126D3C;
		  /* 82126D3Ch */ case    3:  		/* li R3, 20 */
		/* 82126D3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82126D3Ch case    3:*/		return 0x82126D40;
		  /* 82126D40h */ case    4:  		/* bl -383768 */
		/* 82126D40h case    4:*/		regs.LR = 0x82126D44; return 0x820C9228;
		/* 82126D40h case    4:*/		return 0x82126D44;
		  /* 82126D44h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82126D44h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126D44h case    5:*/		return 0x82126D48;
		  /* 82126D48h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82126D48h case    6:*/		if ( regs.CR[0].eq ) { return 0x82126D60;  }
		/* 82126D48h case    6:*/		return 0x82126D4C;
		  /* 82126D4Ch */ case    7:  		/* mr R6, R21 */
		/* 82126D4Ch case    7:*/		regs.R6 = regs.R21;
		/* 82126D4Ch case    7:*/		return 0x82126D50;
		  /* 82126D50h */ case    8:  		/* li R5, 0 */
		/* 82126D50h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82126D50h case    8:*/		return 0x82126D54;
		  /* 82126D54h */ case    9:  		/* li R4, 0 */
		/* 82126D54h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82126D54h case    9:*/		return 0x82126D58;
		  /* 82126D58h */ case   10:  		/* bl -383336 */
		/* 82126D58h case   10:*/		regs.LR = 0x82126D5C; return 0x820C93F0;
		/* 82126D58h case   10:*/		return 0x82126D5C;
		  /* 82126D5Ch */ case   11:  		/* b 8 */
		/* 82126D5Ch case   11:*/		return 0x82126D64;
		/* 82126D5Ch case   11:*/		return 0x82126D60;
	}
	return 0x82126D60;
} // Block from 82126D30h-82126D60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82126D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D60);
		  /* 82126D60h */ case    0:  		/* mr R3, R14 */
		/* 82126D60h case    0:*/		regs.R3 = regs.R14;
		/* 82126D60h case    0:*/		return 0x82126D64;
	}
	return 0x82126D64;
} // Block from 82126D60h-82126D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126D64);
		  /* 82126D64h */ case    0:  		/* stw R3, <#[R22]> */
		/* 82126D64h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R22 + 0x00000000) );
		/* 82126D64h case    0:*/		return 0x82126D68;
		  /* 82126D68h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82126D68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82126D68h case    1:*/		return 0x82126D6C;
		  /* 82126D6Ch */ case    2:  		/* bc 12, CR6_EQ, 820 */
		/* 82126D6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821270A0;  }
		/* 82126D6Ch case    2:*/		return 0x82126D70;
		  /* 82126D70h */ case    3:  		/* lwz R11, <#[R28 + 44]> */
		/* 82126D70h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 82126D70h case    3:*/		return 0x82126D74;
		  /* 82126D74h */ case    4:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82126D74h case    4:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82126D74h case    4:*/		return 0x82126D78;
		  /* 82126D78h */ case    5:  		/* bc 12, CR0_EQ, 148 */
		/* 82126D78h case    5:*/		if ( regs.CR[0].eq ) { return 0x82126E0C;  }
		/* 82126D78h case    5:*/		return 0x82126D7C;
		  /* 82126D7Ch */ case    6:  		/* li R6, 0 */
		/* 82126D7Ch case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126D7Ch case    6:*/		return 0x82126D80;
		  /* 82126D80h */ case    7:  		/* mr R5, R29 */
		/* 82126D80h case    7:*/		regs.R5 = regs.R29;
		/* 82126D80h case    7:*/		return 0x82126D84;
		  /* 82126D84h */ case    8:  		/* mr R4, R30 */
		/* 82126D84h case    8:*/		regs.R4 = regs.R30;
		/* 82126D84h case    8:*/		return 0x82126D88;
		  /* 82126D88h */ case    9:  		/* mr R3, R26 */
		/* 82126D88h case    9:*/		regs.R3 = regs.R26;
		/* 82126D88h case    9:*/		return 0x82126D8C;
		  /* 82126D8Ch */ case   10:  		/* bl -39492 */
		/* 82126D8Ch case   10:*/		regs.LR = 0x82126D90; return 0x8211D348;
		/* 82126D8Ch case   10:*/		return 0x82126D90;
		  /* 82126D90h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82126D90h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126D90h case   11:*/		return 0x82126D94;
		  /* 82126D94h */ case   12:  		/* mr R3, R26 */
		/* 82126D94h case   12:*/		regs.R3 = regs.R26;
		/* 82126D94h case   12:*/		return 0x82126D98;
		  /* 82126D98h */ case   13:  		/* bc 12, CR0_EQ, 392 */
		/* 82126D98h case   13:*/		if ( regs.CR[0].eq ) { return 0x82126F20;  }
		/* 82126D98h case   13:*/		return 0x82126D9C;
		  /* 82126D9Ch */ case   14:  		/* li R7, 0 */
		/* 82126D9Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82126D9Ch case   14:*/		return 0x82126DA0;
		  /* 82126DA0h */ case   15:  		/* lwz R5, <#[R25 + 8]> */
		/* 82126DA0h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x00000008) );
		/* 82126DA0h case   15:*/		return 0x82126DA4;
		  /* 82126DA4h */ case   16:  		/* li R6, 0 */
		/* 82126DA4h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126DA4h case   16:*/		return 0x82126DA8;
		  /* 82126DA8h */ case   17:  		/* mr R4, R30 */
		/* 82126DA8h case   17:*/		regs.R4 = regs.R30;
		/* 82126DA8h case   17:*/		return 0x82126DAC;
		  /* 82126DACh */ case   18:  		/* bl -23380 */
		/* 82126DACh case   18:*/		regs.LR = 0x82126DB0; return 0x82121258;
		/* 82126DACh case   18:*/		return 0x82126DB0;
		  /* 82126DB0h */ case   19:  		/* or. R31, R3, R3 */
		/* 82126DB0h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82126DB0h case   19:*/		return 0x82126DB4;
		  /* 82126DB4h */ case   20:  		/* bc 12, CR0_EQ, 748 */
		/* 82126DB4h case   20:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126DB4h case   20:*/		return 0x82126DB8;
		  /* 82126DB8h */ case   21:  		/* cmplwi CR6, R16, 0 */
		/* 82126DB8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82126DB8h case   21:*/		return 0x82126DBC;
		  /* 82126DBCh */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 82126DBCh case   22:*/		if ( regs.CR[6].eq ) { return 0x82126DCC;  }
		/* 82126DBCh case   22:*/		return 0x82126DC0;
		  /* 82126DC0h */ case   23:  		/* lwz R11, <#[R23]> */
		/* 82126DC0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82126DC0h case   23:*/		return 0x82126DC4;
		  /* 82126DC4h */ case   24:  		/* stw R31, <#[R11 + 8]> */
		/* 82126DC4h case   24:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 82126DC4h case   24:*/		return 0x82126DC8;
		  /* 82126DC8h */ case   25:  		/* b 68 */
		/* 82126DC8h case   25:*/		return 0x82126E0C;
		/* 82126DC8h case   25:*/		return 0x82126DCC;
	}
	return 0x82126DCC;
} // Block from 82126D64h-82126DCCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 82126DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126DCC);
		  /* 82126DCCh */ case    0:  		/* mr R5, R28 */
		/* 82126DCCh case    0:*/		regs.R5 = regs.R28;
		/* 82126DCCh case    0:*/		return 0x82126DD0;
		  /* 82126DD0h */ case    1:  		/* lwz R4, <#[R27 + 20]> */
		/* 82126DD0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000014) );
		/* 82126DD0h case    1:*/		return 0x82126DD4;
		  /* 82126DD4h */ case    2:  		/* mr R3, R26 */
		/* 82126DD4h case    2:*/		regs.R3 = regs.R26;
		/* 82126DD4h case    2:*/		return 0x82126DD8;
		  /* 82126DD8h */ case    3:  		/* bl -24008 */
		/* 82126DD8h case    3:*/		regs.LR = 0x82126DDC; return 0x82121010;
		/* 82126DD8h case    3:*/		return 0x82126DDC;
		  /* 82126DDCh */ case    4:  		/* or. R5, R3, R3 */
		/* 82126DDCh case    4:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 82126DDCh case    4:*/		return 0x82126DE0;
		  /* 82126DE0h */ case    5:  		/* bc 12, CR0_EQ, 704 */
		/* 82126DE0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126DE0h case    5:*/		return 0x82126DE4;
		  /* 82126DE4h */ case    6:  		/* li R8, 1 */
		/* 82126DE4h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82126DE4h case    6:*/		return 0x82126DE8;
		  /* 82126DE8h */ case    7:  		/* li R7, 1 */
		/* 82126DE8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82126DE8h case    7:*/		return 0x82126DEC;
		  /* 82126DECh */ case    8:  		/* mr R6, R31 */
		/* 82126DECh case    8:*/		regs.R6 = regs.R31;
		/* 82126DECh case    8:*/		return 0x82126DF0;
		  /* 82126DF0h */ case    9:  		/* li R4, 27 */
		/* 82126DF0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82126DF0h case    9:*/		return 0x82126DF4;
		  /* 82126DF4h */ case   10:  		/* mr R3, R26 */
		/* 82126DF4h case   10:*/		regs.R3 = regs.R26;
		/* 82126DF4h case   10:*/		return 0x82126DF8;
		  /* 82126DF8h */ case   11:  		/* bl -20392 */
		/* 82126DF8h case   11:*/		regs.LR = 0x82126DFC; return 0x82121E50;
		/* 82126DF8h case   11:*/		return 0x82126DFC;
		  /* 82126DFCh */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82126DFCh case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126DFCh case   12:*/		return 0x82126E00;
		  /* 82126E00h */ case   13:  		/* bc 12, CR0_EQ, 672 */
		/* 82126E00h case   13:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126E00h case   13:*/		return 0x82126E04;
		  /* 82126E04h */ case   14:  		/* lwz R11, <#[R23]> */
		/* 82126E04h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82126E04h case   14:*/		return 0x82126E08;
		  /* 82126E08h */ case   15:  		/* stw R3, <#[R11 + 8]> */
		/* 82126E08h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82126E08h case   15:*/		return 0x82126E0C;
	}
	return 0x82126E0C;
} // Block from 82126DCCh-82126E0Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82126E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126E0C);
		  /* 82126E0Ch */ case    0:  		/* lwz R11, <#[R28 + 44]> */
		/* 82126E0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 82126E0Ch case    0:*/		return 0x82126E10;
		  /* 82126E10h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82126E10h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82126E10h case    1:*/		return 0x82126E14;
		  /* 82126E14h */ case    2:  		/* bc 12, CR0_EQ, 144 */
		/* 82126E14h case    2:*/		if ( regs.CR[0].eq ) { return 0x82126EA4;  }
		/* 82126E14h case    2:*/		return 0x82126E18;
		  /* 82126E18h */ case    3:  		/* mr R4, R29 */
		/* 82126E18h case    3:*/		regs.R4 = regs.R29;
		/* 82126E18h case    3:*/		return 0x82126E1C;
		  /* 82126E1Ch */ case    4:  		/* mr R3, R26 */
		/* 82126E1Ch case    4:*/		regs.R3 = regs.R26;
		/* 82126E1Ch case    4:*/		return 0x82126E20;
		  /* 82126E20h */ case    5:  		/* bl -52208 */
		/* 82126E20h case    5:*/		regs.LR = 0x82126E24; return 0x8211A230;
		/* 82126E20h case    5:*/		return 0x82126E24;
		  /* 82126E24h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82126E24h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126E24h case    6:*/		return 0x82126E28;
		  /* 82126E28h */ case    7:  		/* bc 4, CR0_EQ, 260 */
		/* 82126E28h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82126F2C;  }
		/* 82126E28h case    7:*/		return 0x82126E2C;
		  /* 82126E2Ch */ case    8:  		/* li R6, 0 */
		/* 82126E2Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126E2Ch case    8:*/		return 0x82126E30;
		  /* 82126E30h */ case    9:  		/* mr R5, R30 */
		/* 82126E30h case    9:*/		regs.R5 = regs.R30;
		/* 82126E30h case    9:*/		return 0x82126E34;
		  /* 82126E34h */ case   10:  		/* mr R4, R29 */
		/* 82126E34h case   10:*/		regs.R4 = regs.R29;
		/* 82126E34h case   10:*/		return 0x82126E38;
		  /* 82126E38h */ case   11:  		/* mr R3, R26 */
		/* 82126E38h case   11:*/		regs.R3 = regs.R26;
		/* 82126E38h case   11:*/		return 0x82126E3C;
		  /* 82126E3Ch */ case   12:  		/* bl -39668 */
		/* 82126E3Ch case   12:*/		regs.LR = 0x82126E40; return 0x8211D348;
		/* 82126E3Ch case   12:*/		return 0x82126E40;
		  /* 82126E40h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82126E40h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126E40h case   13:*/		return 0x82126E44;
		  /* 82126E44h */ case   14:  		/* bc 12, CR0_EQ, 232 */
		/* 82126E44h case   14:*/		if ( regs.CR[0].eq ) { return 0x82126F2C;  }
		/* 82126E44h case   14:*/		return 0x82126E48;
		  /* 82126E48h */ case   15:  		/* mr R5, R28 */
		/* 82126E48h case   15:*/		regs.R5 = regs.R28;
		/* 82126E48h case   15:*/		return 0x82126E4C;
		  /* 82126E4Ch */ case   16:  		/* lwz R4, <#[R27 + 20]> */
		/* 82126E4Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000014) );
		/* 82126E4Ch case   16:*/		return 0x82126E50;
		  /* 82126E50h */ case   17:  		/* mr R3, R26 */
		/* 82126E50h case   17:*/		regs.R3 = regs.R26;
		/* 82126E50h case   17:*/		return 0x82126E54;
		  /* 82126E54h */ case   18:  		/* bl -24132 */
		/* 82126E54h case   18:*/		regs.LR = 0x82126E58; return 0x82121010;
		/* 82126E54h case   18:*/		return 0x82126E58;
		  /* 82126E58h */ case   19:  		/* or. R5, R3, R3 */
		/* 82126E58h case   19:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 82126E58h case   19:*/		return 0x82126E5C;
		  /* 82126E5Ch */ case   20:  		/* bc 12, CR0_EQ, 580 */
		/* 82126E5Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126E5Ch case   20:*/		return 0x82126E60;
		  /* 82126E60h */ case   21:  		/* li R7, 0 */
		/* 82126E60h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82126E60h case   21:*/		return 0x82126E64;
		  /* 82126E64h */ case   22:  		/* li R6, 0 */
		/* 82126E64h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126E64h case   22:*/		return 0x82126E68;
		  /* 82126E68h */ case   23:  		/* mr R4, R29 */
		/* 82126E68h case   23:*/		regs.R4 = regs.R29;
		/* 82126E68h case   23:*/		return 0x82126E6C;
		  /* 82126E6Ch */ case   24:  		/* mr R3, R26 */
		/* 82126E6Ch case   24:*/		regs.R3 = regs.R26;
		/* 82126E6Ch case   24:*/		return 0x82126E70;
		  /* 82126E70h */ case   25:  		/* bl -23576 */
		/* 82126E70h case   25:*/		regs.LR = 0x82126E74; return 0x82121258;
		/* 82126E70h case   25:*/		return 0x82126E74;
		  /* 82126E74h */ case   26:  		/* or. R6, R3, R3 */
		/* 82126E74h case   26:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 82126E74h case   26:*/		return 0x82126E78;
		  /* 82126E78h */ case   27:  		/* bc 12, CR0_EQ, 552 */
		/* 82126E78h case   27:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126E78h case   27:*/		return 0x82126E7C;
		  /* 82126E7Ch */ case   28:  		/* li R8, 1 */
		/* 82126E7Ch case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82126E7Ch case   28:*/		return 0x82126E80;
		  /* 82126E80h */ case   29:  		/* lwz R5, <#[R25 + 8]> */
		/* 82126E80h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x00000008) );
		/* 82126E80h case   29:*/		return 0x82126E84;
		  /* 82126E84h */ case   30:  		/* li R7, 1 */
		/* 82126E84h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82126E84h case   30:*/		return 0x82126E88;
		  /* 82126E88h */ case   31:  		/* li R4, 27 */
		/* 82126E88h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82126E88h case   31:*/		return 0x82126E8C;
		  /* 82126E8Ch */ case   32:  		/* mr R3, R26 */
		/* 82126E8Ch case   32:*/		regs.R3 = regs.R26;
		/* 82126E8Ch case   32:*/		return 0x82126E90;
		  /* 82126E90h */ case   33:  		/* bl -20544 */
		/* 82126E90h case   33:*/		regs.LR = 0x82126E94; return 0x82121E50;
		/* 82126E90h case   33:*/		return 0x82126E94;
		  /* 82126E94h */ case   34:  		/* cmplwi CR0, R3, 0 */
		/* 82126E94h case   34:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126E94h case   34:*/		return 0x82126E98;
		  /* 82126E98h */ case   35:  		/* bc 12, CR0_EQ, 520 */
		/* 82126E98h case   35:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126E98h case   35:*/		return 0x82126E9C;
		  /* 82126E9Ch */ case   36:  		/* lwz R11, <#[R22]> */
		/* 82126E9Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82126E9Ch case   36:*/		return 0x82126EA0;
		  /* 82126EA0h */ case   37:  		/* stw R3, <#[R11 + 8]> */
		/* 82126EA0h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82126EA0h case   37:*/		return 0x82126EA4;
	}
	return 0x82126EA4;
} // Block from 82126E0Ch-82126EA4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82126EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126EA4);
		  /* 82126EA4h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 82126EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82126EA4h case    0:*/		return 0x82126EA8;
		  /* 82126EA8h */ case    1:  		/* lwz R10, <#[R22]> */
		/* 82126EA8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000000) );
		/* 82126EA8h case    1:*/		return 0x82126EAC;
		  /* 82126EACh */ case    2:  		/* lwz R25, <#[R25 + 12]> */
		/* 82126EACh case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x0000000C) );
		/* 82126EACh case    2:*/		return 0x82126EB0;
		  /* 82126EB0h */ case    3:  		/* addi R23, R11, 12 */
		/* 82126EB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xC);
		/* 82126EB0h case    3:*/		return 0x82126EB4;
		  /* 82126EB4h */ case    4:  		/* addi R22, R10, 12 */
		/* 82126EB4h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0xC);
		/* 82126EB4h case    4:*/		return 0x82126EB8;
		  /* 82126EB8h */ case    5:  		/* b 12 */
		/* 82126EB8h case    5:*/		return 0x82126EC4;
		/* 82126EB8h case    5:*/		return 0x82126EBC;
	}
	return 0x82126EBC;
} // Block from 82126EA4h-82126EBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82126EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126EBC);
		  /* 82126EBCh */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 82126EBCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82126EBCh case    0:*/		return 0x82126EC0;
		  /* 82126EC0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82126EC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82126ED8;  }
		/* 82126EC0h case    1:*/		return 0x82126EC4;
	}
	return 0x82126EC4;
} // Block from 82126EBCh-82126EC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126EC4);
		  /* 82126EC4h */ case    0:  		/* lwz R24, <#[R24 + 12]> */
		/* 82126EC4h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x0000000C) );
		/* 82126EC4h case    0:*/		return 0x82126EC8;
		  /* 82126EC8h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82126EC8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82126EC8h case    1:*/		return 0x82126ECC;
		  /* 82126ECCh */ case    2:  		/* bc 4, CR6_EQ, -560 */
		/* 82126ECCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82126C9C;  }
		/* 82126ECCh case    2:*/		return 0x82126ED0;
	}
	return 0x82126ED0;
} // Block from 82126EC4h-82126ED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126ED0);
		  /* 82126ED0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82126ED0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82126ED0h case    0:*/		return 0x82126ED4;
		  /* 82126ED4h */ case    1:  		/* bc 4, CR6_EQ, 324 */
		/* 82126ED4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127018;  }
		/* 82126ED4h case    1:*/		return 0x82126ED8;
	}
	return 0x82126ED8;
} // Block from 82126ED0h-82126ED8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82126ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126ED8);
		  /* 82126ED8h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82126ED8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82126ED8h case    0:*/		return 0x82126EDC;
		  /* 82126EDCh */ case    1:  		/* bc 4, CR6_EQ, 316 */
		/* 82126EDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127018;  }
		/* 82126EDCh case    1:*/		return 0x82126EE0;
		  /* 82126EE0h */ case    2:  		/* li R3, 88 */
		/* 82126EE0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82126EE0h case    2:*/		return 0x82126EE4;
		  /* 82126EE4h */ case    3:  		/* bl -384188 */
		/* 82126EE4h case    3:*/		regs.LR = 0x82126EE8; return 0x820C9228;
		/* 82126EE4h case    3:*/		return 0x82126EE8;
		  /* 82126EE8h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82126EE8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126EE8h case    4:*/		return 0x82126EEC;
		  /* 82126EECh */ case    5:  		/* bc 12, CR0_EQ, 96 */
		/* 82126EECh case    5:*/		if ( regs.CR[0].eq ) { return 0x82126F4C;  }
		/* 82126EECh case    5:*/		return 0x82126EF0;
		  /* 82126EF0h */ case    6:  		/* cntlzw R11, R16 */
		/* 82126EF0h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R16);
		/* 82126EF0h case    6:*/		return 0x82126EF4;
		  /* 82126EF4h */ case    7:  		/* mr R9, R18 */
		/* 82126EF4h case    7:*/		regs.R9 = regs.R18;
		/* 82126EF4h case    7:*/		return 0x82126EF8;
		  /* 82126EF8h */ case    8:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82126EF8h case    8:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82126EF8h case    8:*/		return 0x82126EFC;
		  /* 82126EFCh */ case    9:  		/* li R8, 1 */
		/* 82126EFCh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82126EFCh case    9:*/		return 0x82126F00;
		  /* 82126F00h */ case   10:  		/* xori R11, R11, 1 */
		/* 82126F00h case   10:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82126F00h case   10:*/		return 0x82126F04;
		  /* 82126F04h */ case   11:  		/* li R7, 0 */
		/* 82126F04h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82126F04h case   11:*/		return 0x82126F08;
	}
	return 0x82126F08;
} // Block from 82126ED8h-82126F08h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82126F08h
// Function '?FunctionDecl@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F08);
		  /* 82126F08h */ case    0:  		/* li R6, 0 */
		/* 82126F08h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82126F08h case    0:*/		return 0x82126F0C;
		  /* 82126F0Ch */ case    1:  		/* addi R5, R11, 31 */
		/* 82126F0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1F);
		/* 82126F0Ch case    1:*/		return 0x82126F10;
		  /* 82126F10h */ case    2:  		/* li R4, 0 */
		/* 82126F10h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82126F10h case    2:*/		return 0x82126F14;
		  /* 82126F14h */ case    3:  		/* bl -372620 */
		/* 82126F14h case    3:*/		regs.LR = 0x82126F18; return 0x820CBF88;
		/* 82126F14h case    3:*/		return 0x82126F18;
		  /* 82126F18h */ case    4:  		/* mr R31, R3 */
		/* 82126F18h case    4:*/		regs.R31 = regs.R3;
		/* 82126F18h case    4:*/		return 0x82126F1C;
		  /* 82126F1Ch */ case    5:  		/* b 52 */
		/* 82126F1Ch case    5:*/		return 0x82126F50;
		/* 82126F1Ch case    5:*/		return 0x82126F20;
	}
	return 0x82126F20;
} // Block from 82126F08h-82126F20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82126F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F20);
		  /* 82126F20h */ case    0:  		/* mr R7, R29 */
		/* 82126F20h case    0:*/		regs.R7 = regs.R29;
		/* 82126F20h case    0:*/		return 0x82126F24;
		  /* 82126F24h */ case    1:  		/* mr R6, R30 */
		/* 82126F24h case    1:*/		regs.R6 = regs.R30;
		/* 82126F24h case    1:*/		return 0x82126F28;
		  /* 82126F28h */ case    2:  		/* b 16 */
		/* 82126F28h case    2:*/		return 0x82126F38;
		/* 82126F28h case    2:*/		return 0x82126F2C;
	}
	return 0x82126F2C;
} // Block from 82126F20h-82126F2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F2C);
		  /* 82126F2Ch */ case    0:  		/* mr R7, R30 */
		/* 82126F2Ch case    0:*/		regs.R7 = regs.R30;
		/* 82126F2Ch case    0:*/		return 0x82126F30;
		  /* 82126F30h */ case    1:  		/* mr R6, R29 */
		/* 82126F30h case    1:*/		regs.R6 = regs.R29;
		/* 82126F30h case    1:*/		return 0x82126F34;
		  /* 82126F34h */ case    2:  		/* mr R3, R26 */
		/* 82126F34h case    2:*/		regs.R3 = regs.R26;
		/* 82126F34h case    2:*/		return 0x82126F38;
	}
	return 0x82126F38;
} // Block from 82126F2Ch-82126F38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82126F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F38);
		  /* 82126F38h */ case    0:  		/* mr R4, R18 */
		/* 82126F38h case    0:*/		regs.R4 = regs.R18;
		/* 82126F38h case    0:*/		return 0x82126F3C;
		  /* 82126F3Ch */ case    1:  		/* lwz R5, <#[R18 + 8]> */
		/* 82126F3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R18 + 0x00000008) );
		/* 82126F3Ch case    1:*/		return 0x82126F40;
		  /* 82126F40h */ case    2:  		/* li R8, 0 */
		/* 82126F40h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82126F40h case    2:*/		return 0x82126F44;
		  /* 82126F44h */ case    3:  		/* bl -38828 */
		/* 82126F44h case    3:*/		regs.LR = 0x82126F48; return 0x8211D798;
		/* 82126F44h case    3:*/		return 0x82126F48;
		  /* 82126F48h */ case    4:  		/* b 344 */
		/* 82126F48h case    4:*/		return 0x821270A0;
		/* 82126F48h case    4:*/		return 0x82126F4C;
	}
	return 0x82126F4C;
} // Block from 82126F38h-82126F4Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82126F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F4C);
		  /* 82126F4Ch */ case    0:  		/* mr R31, R14 */
		/* 82126F4Ch case    0:*/		regs.R31 = regs.R14;
		/* 82126F4Ch case    0:*/		return 0x82126F50;
	}
	return 0x82126F50;
} // Block from 82126F4Ch-82126F50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F50);
		  /* 82126F50h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82126F50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82126F50h case    0:*/		return 0x82126F54;
		  /* 82126F54h */ case    1:  		/* bc 12, CR6_EQ, 332 */
		/* 82126F54h case    1:*/		if ( regs.CR[6].eq ) { return 0x821270A0;  }
		/* 82126F54h case    1:*/		return 0x82126F58;
		  /* 82126F58h */ case    2:  		/* lwz R11, <#[R19 + 40]> */
		/* 82126F58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 82126F58h case    2:*/		return 0x82126F5C;
		  /* 82126F5Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82126F5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82126F5Ch case    3:*/		return 0x82126F60;
		  /* 82126F60h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82126F60h case    4:*/		if ( regs.CR[6].eq ) { return 0x82126F84;  }
		/* 82126F60h case    4:*/		return 0x82126F64;
		  /* 82126F64h */ case    5:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 82126F64h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 82126F64h case    5:*/		return 0x82126F68;
		  /* 82126F68h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82126F68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82126F68h case    6:*/		return 0x82126F6C;
		  /* 82126F6Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 82126F6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82126F6Ch case    7:*/		return 0x82126F70;
		  /* 82126F70h */ case    8:  		/* mtspr CTR, R11 */
		/* 82126F70h case    8:*/		regs.CTR = regs.R11;
		/* 82126F70h case    8:*/		return 0x82126F74;
		  /* 82126F74h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82126F74h case    9:*/		if ( 1 ) { regs.LR = 0x82126F78; return (uint32)regs.CTR; }
		/* 82126F74h case    9:*/		return 0x82126F78;
		  /* 82126F78h */ case   10:  		/* stw R3, <#[R31 + 16]> */
		/* 82126F78h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82126F78h case   10:*/		return 0x82126F7C;
		  /* 82126F7Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82126F7Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126F7Ch case   11:*/		return 0x82126F80;
		  /* 82126F80h */ case   12:  		/* bc 12, CR0_EQ, 288 */
		/* 82126F80h case   12:*/		if ( regs.CR[0].eq ) { return 0x821270A0;  }
		/* 82126F80h case   12:*/		return 0x82126F84;
	}
	return 0x82126F84;
} // Block from 82126F50h-82126F84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82126F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126F84);
		  /* 82126F84h */ case    0:  		/* lwz R11, <#[R1 + 148]> */
		/* 82126F84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82126F84h case    0:*/		return 0x82126F88;
		  /* 82126F88h */ case    1:  		/* li R3, 20 */
		/* 82126F88h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82126F88h case    1:*/		return 0x82126F8C;
		  /* 82126F8Ch */ case    2:  		/* stw R11, <#[R31 + 32]> */
		/* 82126F8Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82126F8Ch case    2:*/		return 0x82126F90;
		  /* 82126F90h */ case    3:  		/* bl -384360 */
		/* 82126F90h case    3:*/		regs.LR = 0x82126F94; return 0x820C9228;
		/* 82126F90h case    3:*/		return 0x82126F94;
		  /* 82126F94h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82126F94h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82126F94h case    4:*/		return 0x82126F98;
		  /* 82126F98h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 82126F98h case    5:*/		if ( regs.CR[0].eq ) { return 0x82126FB4;  }
		/* 82126F98h case    5:*/		return 0x82126F9C;
		  /* 82126F9Ch */ case    6:  		/* lis R11, -32253 */
		/* 82126F9Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82126F9Ch case    6:*/		return 0x82126FA0;
		  /* 82126FA0h */ case    7:  		/* li R5, 0 */
		/* 82126FA0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82126FA0h case    7:*/		return 0x82126FA4;
		  /* 82126FA4h */ case    8:  		/* addi R6, R11, 14124 */
		/* 82126FA4h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x372C);
		/* 82126FA4h case    8:*/		return 0x82126FA8;
		  /* 82126FA8h */ case    9:  		/* li R4, 0 */
		/* 82126FA8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82126FA8h case    9:*/		return 0x82126FAC;
		  /* 82126FACh */ case   10:  		/* bl -383932 */
		/* 82126FACh case   10:*/		regs.LR = 0x82126FB0; return 0x820C93F0;
		/* 82126FACh case   10:*/		return 0x82126FB0;
		  /* 82126FB0h */ case   11:  		/* b 8 */
		/* 82126FB0h case   11:*/		return 0x82126FB8;
		/* 82126FB0h case   11:*/		return 0x82126FB4;
	}
	return 0x82126FB4;
} // Block from 82126F84h-82126FB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82126FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126FB4);
		  /* 82126FB4h */ case    0:  		/* mr R3, R14 */
		/* 82126FB4h case    0:*/		regs.R3 = regs.R14;
		/* 82126FB4h case    0:*/		return 0x82126FB8;
	}
	return 0x82126FB8;
} // Block from 82126FB4h-82126FB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82126FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82126FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82126FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82126FB8);
		  /* 82126FB8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82126FB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82126FB8h case    0:*/		return 0x82126FBC;
		  /* 82126FBCh */ case    1:  		/* stw R3, <#[R31 + 36]> */
		/* 82126FBCh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 82126FBCh case    1:*/		return 0x82126FC0;
		  /* 82126FC0h */ case    2:  		/* bc 12, CR6_EQ, 224 */
		/* 82126FC0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821270A0;  }
		/* 82126FC0h case    2:*/		return 0x82126FC4;
		  /* 82126FC4h */ case    3:  		/* lwz R11, <#[R1 + 156]> */
		/* 82126FC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 82126FC4h case    3:*/		return 0x82126FC8;
		  /* 82126FC8h */ case    4:  		/* mr R4, R31 */
		/* 82126FC8h case    4:*/		regs.R4 = regs.R31;
		/* 82126FC8h case    4:*/		return 0x82126FCC;
		  /* 82126FCCh */ case    5:  		/* lwz R10, <#[R1 + 160]> */
		/* 82126FCCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 82126FCCh case    5:*/		return 0x82126FD0;
		  /* 82126FD0h */ case    6:  		/* stw R11, <#[R3 + 8]> */
		/* 82126FD0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82126FD0h case    6:*/		return 0x82126FD4;
		  /* 82126FD4h */ case    7:  		/* mr R3, R26 */
		/* 82126FD4h case    7:*/		regs.R3 = regs.R26;
		/* 82126FD4h case    7:*/		return 0x82126FD8;
		  /* 82126FD8h */ case    8:  		/* lwz R11, <#[R31 + 36]> */
		/* 82126FD8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82126FD8h case    8:*/		return 0x82126FDC;
		  /* 82126FDCh */ case    9:  		/* stw R10, <#[R11 + 12]> */
		/* 82126FDCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82126FDCh case    9:*/		return 0x82126FE0;
		  /* 82126FE0h */ case   10:  		/* bl -45000 */
		/* 82126FE0h case   10:*/		regs.LR = 0x82126FE4; return 0x8211C018;
		/* 82126FE0h case   10:*/		return 0x82126FE4;
		  /* 82126FE4h */ case   11:  		/* li R5, 1 */
		/* 82126FE4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82126FE4h case   11:*/		return 0x82126FE8;
		  /* 82126FE8h */ case   12:  		/* mr R4, R31 */
		/* 82126FE8h case   12:*/		regs.R4 = regs.R31;
		/* 82126FE8h case   12:*/		return 0x82126FEC;
		  /* 82126FECh */ case   13:  		/* mr R3, R26 */
		/* 82126FECh case   13:*/		regs.R3 = regs.R26;
		/* 82126FECh case   13:*/		return 0x82126FF0;
		  /* 82126FF0h */ case   14:  		/* bl -58976 */
		/* 82126FF0h case   14:*/		regs.LR = 0x82126FF4; return 0x82118990;
		/* 82126FF0h case   14:*/		return 0x82126FF4;
		  /* 82126FF4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82126FF4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82126FF4h case   15:*/		return 0x82126FF8;
		  /* 82126FF8h */ case   16:  		/* bc 12, CR0_EQ, 172 */
		/* 82126FF8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821270A4;  }
		/* 82126FF8h case   16:*/		return 0x82126FFC;
		  /* 82126FFCh */ case   17:  		/* mr R4, R31 */
		/* 82126FFCh case   17:*/		regs.R4 = regs.R31;
		/* 82126FFCh case   17:*/		return 0x82127000;
		  /* 82127000h */ case   18:  		/* mr R3, R26 */
		/* 82127000h case   18:*/		regs.R3 = regs.R26;
		/* 82127000h case   18:*/		return 0x82127004;
		  /* 82127004h */ case   19:  		/* bl -30492 */
		/* 82127004h case   19:*/		regs.LR = 0x82127008; return 0x8211F8E8;
		/* 82127004h case   19:*/		return 0x82127008;
		  /* 82127008h */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 82127008h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127008h case   20:*/		return 0x8212700C;
		  /* 8212700Ch */ case   21:  		/* bc 12, CR0_EQ, 152 */
		/* 8212700Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821270A4;  }
		/* 8212700Ch case   21:*/		return 0x82127010;
		  /* 82127010h */ case   22:  		/* mr R31, R3 */
		/* 82127010h case   22:*/		regs.R31 = regs.R3;
		/* 82127010h case   22:*/		return 0x82127014;
		  /* 82127014h */ case   23:  		/* b 144 */
		/* 82127014h case   23:*/		return 0x821270A4;
		/* 82127014h case   23:*/		return 0x82127018;
	}
	return 0x82127018;
} // Block from 82126FB8h-82127018h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82127018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127018);
		  /* 82127018h */ case    0:  		/* mr R8, R14 */
		/* 82127018h case    0:*/		regs.R8 = regs.R14;
		/* 82127018h case    0:*/		return 0x8212701C;
		  /* 8212701Ch */ case    1:  		/* mr R11, R17 */
		/* 8212701Ch case    1:*/		regs.R11 = regs.R17;
		/* 8212701Ch case    1:*/		return 0x82127020;
		  /* 82127020h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 82127020h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 82127020h case    2:*/		return 0x82127024;
		  /* 82127024h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 82127024h case    3:*/		if ( regs.CR[6].eq ) { return 0x82127038;  }
		/* 82127024h case    3:*/		return 0x82127028;
		  /* 82127028h */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 82127028h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127028h case    4:*/		return 0x8212702C;
		  /* 8212702Ch */ case    5:  		/* addi R8, R8, 1 */
		/* 8212702Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8212702Ch case    5:*/		return 0x82127030;
		  /* 82127030h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82127030h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127030h case    6:*/		return 0x82127034;
		  /* 82127034h */ case    7:  		/* bc 4, CR6_EQ, -12 */
		/* 82127034h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82127028;  }
		/* 82127034h case    7:*/		return 0x82127038;
	}
	return 0x82127038;
} // Block from 82127018h-82127038h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82127038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127038);
		  /* 82127038h */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 82127038h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82127038h case    0:*/		return 0x8212703C;
		  /* 8212703Ch */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8212703Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127068;  }
		/* 8212703Ch case    1:*/		return 0x82127040;
		  /* 82127040h */ case    2:  		/* cmplwi CR6, R8, 1 */
		/* 82127040h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82127040h case    2:*/		return 0x82127044;
		  /* 82127044h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82127044h case    3:*/		if ( regs.CR[6].eq ) { return 0x82127054;  }
		/* 82127044h case    3:*/		return 0x82127048;
		  /* 82127048h */ case    4:  		/* lis R11, -32255 */
		/* 82127048h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82127048h case    4:*/		return 0x8212704C;
		  /* 8212704Ch */ case    5:  		/* addi R9, R11, -8796 */
		/* 8212704Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFDDA4);
		/* 8212704Ch case    5:*/		return 0x82127050;
		  /* 82127050h */ case    6:  		/* b 12 */
		/* 82127050h case    6:*/		return 0x8212705C;
		/* 82127050h case    6:*/		return 0x82127054;
	}
	return 0x82127054;
} // Block from 82127038h-82127054h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82127054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127054);
		  /* 82127054h */ case    0:  		/* lis R11, -32256 */
		/* 82127054h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82127054h case    0:*/		return 0x82127058;
		  /* 82127058h */ case    1:  		/* addi R9, R11, 4485 */
		/* 82127058h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1185);
		/* 82127058h case    1:*/		return 0x8212705C;
	}
	return 0x8212705C;
} // Block from 82127054h-8212705Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212705Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212705C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212705C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212705C);
		  /* 8212705Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212705Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212705Ch case    0:*/		return 0x82127060;
		  /* 82127060h */ case    1:  		/* addi R6, R11, 14080 */
		/* 82127060h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3700);
		/* 82127060h case    1:*/		return 0x82127064;
		  /* 82127064h */ case    2:  		/* b 40 */
		/* 82127064h case    2:*/		return 0x8212708C;
		/* 82127064h case    2:*/		return 0x82127068;
	}
	return 0x82127068;
} // Block from 8212705Ch-82127068h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127068);
		  /* 82127068h */ case    0:  		/* cmplwi CR6, R8, 1 */
		/* 82127068h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82127068h case    0:*/		return 0x8212706C;
		  /* 8212706Ch */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8212706Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8212707C;  }
		/* 8212706Ch case    1:*/		return 0x82127070;
		  /* 82127070h */ case    2:  		/* lis R11, -32255 */
		/* 82127070h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82127070h case    2:*/		return 0x82127074;
		  /* 82127074h */ case    3:  		/* addi R9, R11, -8796 */
		/* 82127074h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFDDA4);
		/* 82127074h case    3:*/		return 0x82127078;
		  /* 82127078h */ case    4:  		/* b 12 */
		/* 82127078h case    4:*/		return 0x82127084;
		/* 82127078h case    4:*/		return 0x8212707C;
	}
	return 0x8212707C;
} // Block from 82127068h-8212707Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212707Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212707C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212707C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212707C);
		  /* 8212707Ch */ case    0:  		/* lis R11, -32256 */
		/* 8212707Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8212707Ch case    0:*/		return 0x82127080;
		  /* 82127080h */ case    1:  		/* addi R9, R11, 4485 */
		/* 82127080h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1185);
		/* 82127080h case    1:*/		return 0x82127084;
	}
	return 0x82127084;
} // Block from 8212707Ch-82127084h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127084);
		  /* 82127084h */ case    0:  		/* lis R11, -32253 */
		/* 82127084h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127084h case    0:*/		return 0x82127088;
		  /* 82127088h */ case    1:  		/* addi R6, R11, 14024 */
		/* 82127088h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x36C8);
		/* 82127088h case    1:*/		return 0x8212708C;
	}
	return 0x8212708C;
} // Block from 82127084h-8212708Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8212708Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212708C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212708C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212708C);
		  /* 8212708Ch */ case    0:  		/* li R5, 3013 */
		/* 8212708Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBC5);
		/* 8212708Ch case    0:*/		return 0x82127090;
		  /* 82127090h */ case    1:  		/* lwz R7, <#[R18 + 8]> */
		/* 82127090h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R18 + 0x00000008) );
		/* 82127090h case    1:*/		return 0x82127094;
		  /* 82127094h */ case    2:  		/* mr R4, R18 */
		/* 82127094h case    2:*/		regs.R4 = regs.R18;
		/* 82127094h case    2:*/		return 0x82127098;
		  /* 82127098h */ case    3:  		/* mr R3, R26 */
		/* 82127098h case    3:*/		regs.R3 = regs.R26;
		/* 82127098h case    3:*/		return 0x8212709C;
		  /* 8212709Ch */ case    4:  		/* bl -55292 */
		/* 8212709Ch case    4:*/		regs.LR = 0x821270A0; return 0x821198A0;
		/* 8212709Ch case    4:*/		return 0x821270A0;
	}
	return 0x821270A0;
} // Block from 8212708Ch-821270A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821270A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270A0);
		  /* 821270A0h */ case    0:  		/* mr R31, R14 */
		/* 821270A0h case    0:*/		regs.R31 = regs.R14;
		/* 821270A0h case    0:*/		return 0x821270A4;
	}
	return 0x821270A4;
} // Block from 821270A0h-821270A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821270A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270A4);
		  /* 821270A4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821270A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821270A4h case    0:*/		return 0x821270A8;
		  /* 821270A8h */ case    1:  		/* mr R3, R31 */
		/* 821270A8h case    1:*/		regs.R3 = regs.R31;
		/* 821270A8h case    1:*/		return 0x821270AC;
		  /* 821270ACh */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821270ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821270BC;  }
		/* 821270ACh case    2:*/		return 0x821270B0;
	}
	return 0x821270B0;
} // Block from 821270A4h-821270B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821270B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270B0);
		  /* 821270B0h */ case    0:  		/* lwz R3, <#[R1 + 164]> */
		/* 821270B0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000A4) );
		/* 821270B0h case    0:*/		return 0x821270B4;
		  /* 821270B4h */ case    1:  		/* b 8 */
		/* 821270B4h case    1:*/		return 0x821270BC;
		/* 821270B4h case    1:*/		return 0x821270B8;
	}
	return 0x821270B8;
} // Block from 821270B0h-821270B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821270B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270B8);
		  /* 821270B8h */ case    0:  		/* li R3, 0 */
		/* 821270B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821270B8h case    0:*/		return 0x821270BC;
	}
	return 0x821270BC;
} // Block from 821270B8h-821270BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821270BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270BC);
		  /* 821270BCh */ case    0:  		/* addi R1, R1, 320 */
		/* 821270BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 821270BCh case    0:*/		return 0x821270C0;
		  /* 821270C0h */ case    1:  		/* b -613968 */
		/* 821270C0h case    1:*/		return 0x82091270;
		/* 821270C0h case    1:*/		return 0x821270C4;
		  /* 821270C4h */ case    2:  		/* nop */
		/* 821270C4h case    2:*/		cpu::op::nop();
		/* 821270C4h case    2:*/		return 0x821270C8;
	}
	return 0x821270C8;
} // Block from 821270BCh-821270C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821270C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821270C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821270C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821270C8);
		  /* 821270C8h */ case    0:  		/* mfspr R12, LR */
		/* 821270C8h case    0:*/		regs.R12 = regs.LR;
		/* 821270C8h case    0:*/		return 0x821270CC;
		  /* 821270CCh */ case    1:  		/* bl -614052 */
		/* 821270CCh case    1:*/		regs.LR = 0x821270D0; return 0x82091228;
		/* 821270CCh case    1:*/		return 0x821270D0;
		  /* 821270D0h */ case    2:  		/* stwu R1, <#[R1 - 560]> */
		/* 821270D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDD0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDD0);
		/* 821270D0h case    2:*/		return 0x821270D4;
		  /* 821270D4h */ case    3:  		/* mr R19, R3 */
		/* 821270D4h case    3:*/		regs.R19 = regs.R3;
		/* 821270D4h case    3:*/		return 0x821270D8;
		  /* 821270D8h */ case    4:  		/* mr R16, R4 */
		/* 821270D8h case    4:*/		regs.R16 = regs.R4;
		/* 821270D8h case    4:*/		return 0x821270DC;
		  /* 821270DCh */ case    5:  		/* mr R18, R6 */
		/* 821270DCh case    5:*/		regs.R18 = regs.R6;
		/* 821270DCh case    5:*/		return 0x821270E0;
		  /* 821270E0h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 821270E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821270E0h case    6:*/		return 0x821270E4;
		  /* 821270E4h */ case    7:  		/* bc 12, CR6_EQ, 1516 */
		/* 821270E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 821270E4h case    7:*/		return 0x821270E8;
		  /* 821270E8h */ case    8:  		/* lwz R11, <#[R5 + 4]> */
		/* 821270E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821270E8h case    8:*/		return 0x821270EC;
		  /* 821270ECh */ case    9:  		/* cmpwi CR6, R11, 3 */
		/* 821270ECh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821270ECh case    9:*/		return 0x821270F0;
		  /* 821270F0h */ case   10:  		/* bc 4, CR6_EQ, 1504 */
		/* 821270F0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821276D0;  }
		/* 821270F0h case   10:*/		return 0x821270F4;
		  /* 821270F4h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 821270F4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821270F4h case   11:*/		return 0x821270F8;
		  /* 821270F8h */ case   12:  		/* bc 12, CR6_EQ, 1496 */
		/* 821270F8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 821270F8h case   12:*/		return 0x821270FC;
		  /* 821270FCh */ case   13:  		/* lwz R11, <#[R4 + 4]> */
		/* 821270FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821270FCh case   13:*/		return 0x82127100;
		  /* 82127100h */ case   14:  		/* cmpwi CR6, R11, 14 */
		/* 82127100h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82127100h case   14:*/		return 0x82127104;
		  /* 82127104h */ case   15:  		/* bc 4, CR6_EQ, 1484 */
		/* 82127104h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821276D0;  }
		/* 82127104h case   15:*/		return 0x82127108;
		  /* 82127108h */ case   16:  		/* lwz R29, <#[R4 + 16]> */
		/* 82127108h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x00000010) );
		/* 82127108h case   16:*/		return 0x8212710C;
		  /* 8212710Ch */ case   17:  		/* li R17, 0 */
		/* 8212710Ch case   17:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8212710Ch case   17:*/		return 0x82127110;
		  /* 82127110h */ case   18:  		/* addi R20, R5, 16 */
		/* 82127110h case   18:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R5,0x10);
		/* 82127110h case   18:*/		return 0x82127114;
		  /* 82127114h */ case   19:  		/* stw R17, <#[R1 + 152]> */
		/* 82127114h case   19:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000098) );
		/* 82127114h case   19:*/		return 0x82127118;
		  /* 82127118h */ case   20:  		/* mr R31, R17 */
		/* 82127118h case   20:*/		regs.R31 = regs.R17;
		/* 82127118h case   20:*/		return 0x8212711C;
		  /* 8212711Ch */ case   21:  		/* stw R17, <#[R1 + 144]> */
		/* 8212711Ch case   21:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000090) );
		/* 8212711Ch case   21:*/		return 0x82127120;
		  /* 82127120h */ case   22:  		/* mr R30, R17 */
		/* 82127120h case   22:*/		regs.R30 = regs.R17;
		/* 82127120h case   22:*/		return 0x82127124;
		  /* 82127124h */ case   23:  		/* stw R17, <#[R1 + 156]> */
		/* 82127124h case   23:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x0000009C) );
		/* 82127124h case   23:*/		return 0x82127128;
		  /* 82127128h */ case   24:  		/* lwz R11, <#[R29 + 20]> */
		/* 82127128h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82127128h case   24:*/		return 0x8212712C;
		  /* 8212712Ch */ case   25:  		/* stw R17, <#[R1 + 148]> */
		/* 8212712Ch case   25:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000094) );
		/* 8212712Ch case   25:*/		return 0x82127130;
		  /* 82127130h */ case   26:  		/* cmpwi CR6, R11, 30 */
		/* 82127130h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 82127130h case   26:*/		return 0x82127134;
		  /* 82127134h */ case   27:  		/* bc 12, CR6_GT, 168 */
		/* 82127134h case   27:*/		if ( regs.CR[6].gt ) { return 0x821271DC;  }
		/* 82127134h case   27:*/		return 0x82127138;
		  /* 82127138h */ case   28:  		/* bc 12, CR6_EQ, 144 */
		/* 82127138h case   28:*/		if ( regs.CR[6].eq ) { return 0x821271C8;  }
		/* 82127138h case   28:*/		return 0x8212713C;
		  /* 8212713Ch */ case   29:  		/* cmpwi CR6, R11, 25 */
		/* 8212713Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 8212713Ch case   29:*/		return 0x82127140;
		  /* 82127140h */ case   30:  		/* bc 12, CR6_EQ, 116 */
		/* 82127140h case   30:*/		if ( regs.CR[6].eq ) { return 0x821271B4;  }
		/* 82127140h case   30:*/		return 0x82127144;
		  /* 82127144h */ case   31:  		/* cmpwi CR6, R11, 26 */
		/* 82127144h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001A);
		/* 82127144h case   31:*/		return 0x82127148;
		  /* 82127148h */ case   32:  		/* bc 12, CR6_EQ, 88 */
		/* 82127148h case   32:*/		if ( regs.CR[6].eq ) { return 0x821271A0;  }
		/* 82127148h case   32:*/		return 0x8212714C;
		  /* 8212714Ch */ case   33:  		/* cmpwi CR6, R11, 27 */
		/* 8212714Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 8212714Ch case   33:*/		return 0x82127150;
		  /* 82127150h */ case   34:  		/* bc 12, CR6_EQ, 60 */
		/* 82127150h case   34:*/		if ( regs.CR[6].eq ) { return 0x8212718C;  }
		/* 82127150h case   34:*/		return 0x82127154;
		  /* 82127154h */ case   35:  		/* cmpwi CR6, R11, 28 */
		/* 82127154h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 82127154h case   35:*/		return 0x82127158;
		  /* 82127158h */ case   36:  		/* bc 12, CR6_EQ, 32 */
		/* 82127158h case   36:*/		if ( regs.CR[6].eq ) { return 0x82127178;  }
		/* 82127158h case   36:*/		return 0x8212715C;
		  /* 8212715Ch */ case   37:  		/* cmpwi CR6, R11, 29 */
		/* 8212715Ch case   37:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8212715Ch case   37:*/		return 0x82127160;
		  /* 82127160h */ case   38:  		/* bc 4, CR6_EQ, 232 */
		/* 82127160h case   38:*/		if ( !regs.CR[6].eq ) { return 0x82127248;  }
		/* 82127160h case   38:*/		return 0x82127164;
		  /* 82127164h */ case   39:  		/* lis R11, -32254 */
		/* 82127164h case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127164h case   39:*/		return 0x82127168;
		  /* 82127168h */ case   40:  		/* li R30, 14 */
		/* 82127168h case   40:*/		cpu::op::li<0>(regs,&regs.R30,0xE);
		/* 82127168h case   40:*/		return 0x8212716C;
		  /* 8212716Ch */ case   41:  		/* addi R11, R11, 10488 */
		/* 8212716Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 8212716Ch case   41:*/		return 0x82127170;
		  /* 82127170h */ case   42:  		/* addi R31, R11, 15048 */
		/* 82127170h case   42:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x3AC8);
		/* 82127170h case   42:*/		return 0x82127174;
		  /* 82127174h */ case   43:  		/* b 212 */
		/* 82127174h case   43:*/		return 0x82127248;
		/* 82127174h case   43:*/		return 0x82127178;
	}
	return 0x82127178;
} // Block from 821270C8h-82127178h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82127178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127178);
		  /* 82127178h */ case    0:  		/* lis R11, -32254 */
		/* 82127178h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127178h case    0:*/		return 0x8212717C;
		  /* 8212717Ch */ case    1:  		/* li R30, 14 */
		/* 8212717Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0xE);
		/* 8212717Ch case    1:*/		return 0x82127180;
		  /* 82127180h */ case    2:  		/* addi R11, R11, 10488 */
		/* 82127180h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 82127180h case    2:*/		return 0x82127184;
		  /* 82127184h */ case    3:  		/* addi R31, R11, 11856 */
		/* 82127184h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x2E50);
		/* 82127184h case    3:*/		return 0x82127188;
		  /* 82127188h */ case    4:  		/* b 192 */
		/* 82127188h case    4:*/		return 0x82127248;
		/* 82127188h case    4:*/		return 0x8212718C;
	}
	return 0x8212718C;
} // Block from 82127178h-8212718Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8212718Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212718C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212718C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212718C);
		  /* 8212718Ch */ case    0:  		/* lis R11, -32254 */
		/* 8212718Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8212718Ch case    0:*/		return 0x82127190;
		  /* 82127190h */ case    1:  		/* li R30, 18 */
		/* 82127190h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x12);
		/* 82127190h case    1:*/		return 0x82127194;
		  /* 82127194h */ case    2:  		/* addi R11, R11, 10488 */
		/* 82127194h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 82127194h case    2:*/		return 0x82127198;
		  /* 82127198h */ case    3:  		/* addi R31, R11, 7752 */
		/* 82127198h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1E48);
		/* 82127198h case    3:*/		return 0x8212719C;
		  /* 8212719Ch */ case    4:  		/* b 172 */
		/* 8212719Ch case    4:*/		return 0x82127248;
		/* 8212719Ch case    4:*/		return 0x821271A0;
	}
	return 0x821271A0;
} // Block from 8212718Ch-821271A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821271A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821271A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821271A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821271A0);
		  /* 821271A0h */ case    0:  		/* lis R11, -32254 */
		/* 821271A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 821271A0h case    0:*/		return 0x821271A4;
		  /* 821271A4h */ case    1:  		/* li R30, 14 */
		/* 821271A4h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0xE);
		/* 821271A4h case    1:*/		return 0x821271A8;
		  /* 821271A8h */ case    2:  		/* addi R11, R11, 10488 */
		/* 821271A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 821271A8h case    2:*/		return 0x821271AC;
		  /* 821271ACh */ case    3:  		/* addi R31, R11, 4560 */
		/* 821271ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x11D0);
		/* 821271ACh case    3:*/		return 0x821271B0;
		  /* 821271B0h */ case    4:  		/* b 152 */
		/* 821271B0h case    4:*/		return 0x82127248;
		/* 821271B0h case    4:*/		return 0x821271B4;
	}
	return 0x821271B4;
} // Block from 821271A0h-821271B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821271B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821271B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821271B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821271B4);
		  /* 821271B4h */ case    0:  		/* lis R11, -32254 */
		/* 821271B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 821271B4h case    0:*/		return 0x821271B8;
		  /* 821271B8h */ case    1:  		/* li R30, 18 */
		/* 821271B8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x12);
		/* 821271B8h case    1:*/		return 0x821271BC;
		  /* 821271BCh */ case    2:  		/* addi R11, R11, 10488 */
		/* 821271BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 821271BCh case    2:*/		return 0x821271C0;
		  /* 821271C0h */ case    3:  		/* addi R31, R11, 456 */
		/* 821271C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1C8);
		/* 821271C0h case    3:*/		return 0x821271C4;
		  /* 821271C4h */ case    4:  		/* b 132 */
		/* 821271C4h case    4:*/		return 0x82127248;
		/* 821271C4h case    4:*/		return 0x821271C8;
	}
	return 0x821271C8;
} // Block from 821271B4h-821271C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821271C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821271C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821271C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821271C8);
		  /* 821271C8h */ case    0:  		/* lis R11, -32254 */
		/* 821271C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 821271C8h case    0:*/		return 0x821271CC;
		  /* 821271CCh */ case    1:  		/* li R30, 12 */
		/* 821271CCh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0xC);
		/* 821271CCh case    1:*/		return 0x821271D0;
		  /* 821271D0h */ case    2:  		/* addi R11, R11, 10488 */
		/* 821271D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 821271D0h case    2:*/		return 0x821271D4;
		  /* 821271D4h */ case    3:  		/* addi R31, R11, 18240 */
		/* 821271D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4740);
		/* 821271D4h case    3:*/		return 0x821271D8;
		  /* 821271D8h */ case    4:  		/* b 112 */
		/* 821271D8h case    4:*/		return 0x82127248;
		/* 821271D8h case    4:*/		return 0x821271DC;
	}
	return 0x821271DC;
} // Block from 821271C8h-821271DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821271DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821271DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821271DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821271DC);
		  /* 821271DCh */ case    0:  		/* cmpwi CR6, R11, 31 */
		/* 821271DCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 821271DCh case    0:*/		return 0x821271E0;
		  /* 821271E0h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821271E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82127238;  }
		/* 821271E0h case    1:*/		return 0x821271E4;
		  /* 821271E4h */ case    2:  		/* cmpwi CR6, R11, 32 */
		/* 821271E4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 821271E4h case    2:*/		return 0x821271E8;
		  /* 821271E8h */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 821271E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82127228;  }
		/* 821271E8h case    3:*/		return 0x821271EC;
		  /* 821271ECh */ case    4:  		/* cmpwi CR6, R11, 39 */
		/* 821271ECh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000027);
		/* 821271ECh case    4:*/		return 0x821271F0;
		  /* 821271F0h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821271F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82127214;  }
		/* 821271F0h case    5:*/		return 0x821271F4;
		  /* 821271F4h */ case    6:  		/* cmpwi CR6, R11, 50 */
		/* 821271F4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 821271F4h case    6:*/		return 0x821271F8;
		  /* 821271F8h */ case    7:  		/* bc 4, CR6_GT, 80 */
		/* 821271F8h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82127248;  }
		/* 821271F8h case    7:*/		return 0x821271FC;
		  /* 821271FCh */ case    8:  		/* cmpwi CR6, R11, 53 */
		/* 821271FCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 821271FCh case    8:*/		return 0x82127200;
		  /* 82127200h */ case    9:  		/* bc 12, CR6_GT, 72 */
		/* 82127200h case    9:*/		if ( regs.CR[6].gt ) { return 0x82127248;  }
		/* 82127200h case    9:*/		return 0x82127204;
		  /* 82127204h */ case   10:  		/* lis R11, -32254 */
		/* 82127204h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127204h case   10:*/		return 0x82127208;
		  /* 82127208h */ case   11:  		/* li R30, 2 */
		/* 82127208h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 82127208h case   11:*/		return 0x8212720C;
		  /* 8212720Ch */ case   12:  		/* addi R31, R11, 10488 */
		/* 8212720Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x28F8);
		/* 8212720Ch case   12:*/		return 0x82127210;
		  /* 82127210h */ case   13:  		/* b 56 */
		/* 82127210h case   13:*/		return 0x82127248;
		/* 82127210h case   13:*/		return 0x82127214;
	}
	return 0x82127214;
} // Block from 821271DCh-82127214h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82127214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127214);
		  /* 82127214h */ case    0:  		/* lis R11, -32254 */
		/* 82127214h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127214h case    0:*/		return 0x82127218;
		  /* 82127218h */ case    1:  		/* li R30, 1 */
		/* 82127218h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 82127218h case    1:*/		return 0x8212721C;
		  /* 8212721Ch */ case    2:  		/* addi R11, R11, 10488 */
		/* 8212721Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 8212721Ch case    2:*/		return 0x82127220;
		  /* 82127220h */ case    3:  		/* addi R31, R11, 20976 */
		/* 82127220h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x51F0);
		/* 82127220h case    3:*/		return 0x82127224;
		  /* 82127224h */ case    4:  		/* b 36 */
		/* 82127224h case    4:*/		return 0x82127248;
		/* 82127224h case    4:*/		return 0x82127228;
	}
	return 0x82127228;
} // Block from 82127214h-82127228h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82127228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127228);
		  /* 82127228h */ case    0:  		/* lis R11, -32254 */
		/* 82127228h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127228h case    0:*/		return 0x8212722C;
		  /* 8212722Ch */ case    1:  		/* addi R11, R11, 10488 */
		/* 8212722Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 8212722Ch case    1:*/		return 0x82127230;
		  /* 82127230h */ case    2:  		/* addi R31, R11, 22120 */
		/* 82127230h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x5668);
		/* 82127230h case    2:*/		return 0x82127234;
		  /* 82127234h */ case    3:  		/* b 16 */
		/* 82127234h case    3:*/		return 0x82127244;
		/* 82127234h case    3:*/		return 0x82127238;
	}
	return 0x82127238;
} // Block from 82127228h-82127238h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82127238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127238);
		  /* 82127238h */ case    0:  		/* lis R11, -32254 */
		/* 82127238h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82127238h case    0:*/		return 0x8212723C;
		  /* 8212723Ch */ case    1:  		/* addi R11, R11, 10488 */
		/* 8212723Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x28F8);
		/* 8212723Ch case    1:*/		return 0x82127240;
		  /* 82127240h */ case    2:  		/* addi R31, R11, 21208 */
		/* 82127240h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x52D8);
		/* 82127240h case    2:*/		return 0x82127244;
	}
	return 0x82127244;
} // Block from 82127238h-82127244h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127244);
		  /* 82127244h */ case    0:  		/* li R30, 4 */
		/* 82127244h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82127244h case    0:*/		return 0x82127248;
	}
	return 0x82127248;
} // Block from 82127244h-82127248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127248);
		  /* 82127248h */ case    0:  		/* mr R6, R29 */
		/* 82127248h case    0:*/		regs.R6 = regs.R29;
		/* 82127248h case    0:*/		return 0x8212724C;
		  /* 8212724Ch */ case    1:  		/* li R5, 255 */
		/* 8212724Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 8212724Ch case    1:*/		return 0x82127250;
		  /* 82127250h */ case    2:  		/* addi R4, R1, 160 */
		/* 82127250h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82127250h case    2:*/		return 0x82127254;
		  /* 82127254h */ case    3:  		/* mr R3, R19 */
		/* 82127254h case    3:*/		regs.R3 = regs.R19;
		/* 82127254h case    3:*/		return 0x82127258;
		  /* 82127258h */ case    4:  		/* bl -52640 */
		/* 82127258h case    4:*/		regs.LR = 0x8212725C; return 0x8211A4B8;
		/* 82127258h case    4:*/		return 0x8212725C;
		  /* 8212725Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 8212725Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8212725Ch case    5:*/		return 0x82127260;
		  /* 82127260h */ case    6:  		/* mr R3, R19 */
		/* 82127260h case    6:*/		regs.R3 = regs.R19;
		/* 82127260h case    6:*/		return 0x82127264;
		  /* 82127264h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82127264h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82127278;  }
		/* 82127264h case    7:*/		return 0x82127268;
		  /* 82127268h */ case    8:  		/* lis R11, -32253 */
		/* 82127268h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127268h case    8:*/		return 0x8212726C;
		  /* 8212726Ch */ case    9:  		/* li R5, 3087 */
		/* 8212726Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xC0F);
		/* 8212726Ch case    9:*/		return 0x82127270;
		  /* 82127270h */ case   10:  		/* addi R6, R11, 14312 */
		/* 82127270h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x37E8);
		/* 82127270h case   10:*/		return 0x82127274;
		  /* 82127274h */ case   11:  		/* b 140 */
		/* 82127274h case   11:*/		return 0x82127300;
		/* 82127274h case   11:*/		return 0x82127278;
	}
	return 0x82127278;
} // Block from 82127248h-82127278h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82127278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127278);
		  /* 82127278h */ case    0:  		/* addi R10, R1, 148 */
		/* 82127278h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x94);
		/* 82127278h case    0:*/		return 0x8212727C;
		  /* 8212727Ch */ case    1:  		/* lwz R6, <#[R29 + 24]> */
		/* 8212727Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000018) );
		/* 8212727Ch case    1:*/		return 0x82127280;
		  /* 82127280h */ case    2:  		/* addi R9, R1, 144 */
		/* 82127280h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 82127280h case    2:*/		return 0x82127284;
		  /* 82127284h */ case    3:  		/* mr R8, R18 */
		/* 82127284h case    3:*/		regs.R8 = regs.R18;
		/* 82127284h case    3:*/		return 0x82127288;
		  /* 82127288h */ case    4:  		/* mr R7, R20 */
		/* 82127288h case    4:*/		regs.R7 = regs.R20;
		/* 82127288h case    4:*/		return 0x8212728C;
		  /* 8212728Ch */ case    5:  		/* mr R5, R30 */
		/* 8212728Ch case    5:*/		regs.R5 = regs.R30;
		/* 8212728Ch case    5:*/		return 0x82127290;
		  /* 82127290h */ case    6:  		/* mr R4, R31 */
		/* 82127290h case    6:*/		regs.R4 = regs.R31;
		/* 82127290h case    6:*/		return 0x82127294;
		  /* 82127294h */ case    7:  		/* bl -44764 */
		/* 82127294h case    7:*/		regs.LR = 0x82127298; return 0x8211C3B8;
		/* 82127294h case    7:*/		return 0x82127298;
		  /* 82127298h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82127298h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82127298h case    8:*/		return 0x8212729C;
		  /* 8212729Ch */ case    9:  		/* bc 12, CR0_LT, 1076 */
		/* 8212729Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x821276D0;  }
		/* 8212729Ch case    9:*/		return 0x821272A0;
		  /* 821272A0h */ case   10:  		/* cmpwi CR6, R3, 0 */
		/* 821272A0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821272A0h case   10:*/		return 0x821272A4;
		  /* 821272A4h */ case   11:  		/* bc 12, CR6_EQ, 112 */
		/* 821272A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82127314;  }
		/* 821272A4h case   11:*/		return 0x821272A8;
		  /* 821272A8h */ case   12:  		/* addi R10, R1, 148 */
		/* 821272A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x94);
		/* 821272A8h case   12:*/		return 0x821272AC;
		  /* 821272ACh */ case   13:  		/* lwz R6, <#[R29 + 24]> */
		/* 821272ACh case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000018) );
		/* 821272ACh case   13:*/		return 0x821272B0;
		  /* 821272B0h */ case   14:  		/* addi R9, R1, 144 */
		/* 821272B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 821272B0h case   14:*/		return 0x821272B4;
		  /* 821272B4h */ case   15:  		/* li R8, 0 */
		/* 821272B4h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821272B4h case   15:*/		return 0x821272B8;
		  /* 821272B8h */ case   16:  		/* mr R7, R20 */
		/* 821272B8h case   16:*/		regs.R7 = regs.R20;
		/* 821272B8h case   16:*/		return 0x821272BC;
		  /* 821272BCh */ case   17:  		/* mr R5, R30 */
		/* 821272BCh case   17:*/		regs.R5 = regs.R30;
		/* 821272BCh case   17:*/		return 0x821272C0;
		  /* 821272C0h */ case   18:  		/* mr R4, R31 */
		/* 821272C0h case   18:*/		regs.R4 = regs.R31;
		/* 821272C0h case   18:*/		return 0x821272C4;
		  /* 821272C4h */ case   19:  		/* mr R3, R19 */
		/* 821272C4h case   19:*/		regs.R3 = regs.R19;
		/* 821272C4h case   19:*/		return 0x821272C8;
		  /* 821272C8h */ case   20:  		/* bl -44816 */
		/* 821272C8h case   20:*/		regs.LR = 0x821272CC; return 0x8211C3B8;
		/* 821272C8h case   20:*/		return 0x821272CC;
		  /* 821272CCh */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 821272CCh case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821272CCh case   21:*/		return 0x821272D0;
		  /* 821272D0h */ case   22:  		/* bc 12, CR0_LT, 1024 */
		/* 821272D0h case   22:*/		if ( regs.CR[0].lt ) { return 0x821276D0;  }
		/* 821272D0h case   22:*/		return 0x821272D4;
		  /* 821272D4h */ case   23:  		/* cmpwi CR6, R3, 0 */
		/* 821272D4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821272D4h case   23:*/		return 0x821272D8;
		  /* 821272D8h */ case   24:  		/* li R5, 3088 */
		/* 821272D8h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0xC10);
		/* 821272D8h case   24:*/		return 0x821272DC;
		  /* 821272DCh */ case   25:  		/* mr R3, R19 */
		/* 821272DCh case   25:*/		regs.R3 = regs.R19;
		/* 821272DCh case   25:*/		return 0x821272E0;
		  /* 821272E0h */ case   26:  		/* bc 4, CR6_EQ, 24 */
		/* 821272E0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821272F8;  }
		/* 821272E0h case   26:*/		return 0x821272E4;
		  /* 821272E4h */ case   27:  		/* lis R11, -32253 */
		/* 821272E4h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821272E4h case   27:*/		return 0x821272E8;
		  /* 821272E8h */ case   28:  		/* lwz R7, <#[R20 + 8]> */
		/* 821272E8h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R20 + 0x00000008) );
		/* 821272E8h case   28:*/		return 0x821272EC;
		  /* 821272ECh */ case   29:  		/* addi R8, R1, 160 */
		/* 821272ECh case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 821272ECh case   29:*/		return 0x821272F0;
		  /* 821272F0h */ case   30:  		/* addi R6, R11, 14256 */
		/* 821272F0h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x37B0);
		/* 821272F0h case   30:*/		return 0x821272F4;
		  /* 821272F4h */ case   31:  		/* b 20 */
		/* 821272F4h case   31:*/		return 0x82127308;
		/* 821272F4h case   31:*/		return 0x821272F8;
	}
	return 0x821272F8;
} // Block from 82127278h-821272F8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821272F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821272F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821272F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821272F8);
		  /* 821272F8h */ case    0:  		/* lis R11, -32253 */
		/* 821272F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821272F8h case    0:*/		return 0x821272FC;
		  /* 821272FCh */ case    1:  		/* addi R6, R11, 14220 */
		/* 821272FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x378C);
		/* 821272FCh case    1:*/		return 0x82127300;
	}
	return 0x82127300;
} // Block from 821272F8h-82127300h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127300);
		  /* 82127300h */ case    0:  		/* lwz R8, <#[R20 + 8]> */
		/* 82127300h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000008) );
		/* 82127300h case    0:*/		return 0x82127304;
		  /* 82127304h */ case    1:  		/* addi R7, R1, 160 */
		/* 82127304h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 82127304h case    1:*/		return 0x82127308;
	}
	return 0x82127308;
} // Block from 82127300h-82127308h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127308);
		  /* 82127308h */ case    0:  		/* mr R4, R20 */
		/* 82127308h case    0:*/		regs.R4 = regs.R20;
		/* 82127308h case    0:*/		return 0x8212730C;
		  /* 8212730Ch */ case    1:  		/* bl -55916 */
		/* 8212730Ch case    1:*/		regs.LR = 0x82127310; return 0x821198A0;
		/* 8212730Ch case    1:*/		return 0x82127310;
		  /* 82127310h */ case    2:  		/* b 960 */
		/* 82127310h case    2:*/		return 0x821276D0;
		/* 82127310h case    2:*/		return 0x82127314;
	}
	return 0x82127314;
} // Block from 82127308h-82127314h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127314);
		  /* 82127314h */ case    0:  		/* lwz R21, <#[R1 + 144]> */
		/* 82127314h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000090) );
		/* 82127314h case    0:*/		return 0x82127318;
		  /* 82127318h */ case    1:  		/* addi R25, R1, 152 */
		/* 82127318h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x98);
		/* 82127318h case    1:*/		return 0x8212731C;
		  /* 8212731Ch */ case    2:  		/* addi R24, R1, 156 */
		/* 8212731Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0x9C);
		/* 8212731Ch case    2:*/		return 0x82127320;
		  /* 82127320h */ case    3:  		/* mr R28, R18 */
		/* 82127320h case    3:*/		regs.R28 = regs.R18;
		/* 82127320h case    3:*/		return 0x82127324;
		  /* 82127324h */ case    4:  		/* lwz R26, <#[R21 + 44]> */
		/* 82127324h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R21 + 0x0000002C) );
		/* 82127324h case    4:*/		return 0x82127328;
		  /* 82127328h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 82127328h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82127328h case    5:*/		return 0x8212732C;
		  /* 8212732Ch */ case    6:  		/* bc 12, CR6_EQ, 476 */
		/* 8212732Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82127508;  }
		/* 8212732Ch case    6:*/		return 0x82127330;
		  /* 82127330h */ case    7:  		/* lis R11, -32253 */
		/* 82127330h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127330h case    7:*/		return 0x82127334;
		  /* 82127334h */ case    8:  		/* lis R10, -32253 */
		/* 82127334h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82127334h case    8:*/		return 0x82127338;
		  /* 82127338h */ case    9:  		/* addi R23, R11, 14144 */
		/* 82127338h case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x3740);
		/* 82127338h case    9:*/		return 0x8212733C;
		  /* 8212733Ch */ case   10:  		/* addi R22, R10, 14136 */
		/* 8212733Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x3738);
		/* 8212733Ch case   10:*/		return 0x82127340;
		  /* 82127340h */ case   11:  		/* lwz R11, <#[R26 + 12]> */
		/* 82127340h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 82127340h case   11:*/		return 0x82127344;
		  /* 82127344h */ case   12:  		/* mr R10, R17 */
		/* 82127344h case   12:*/		regs.R10 = regs.R17;
		/* 82127344h case   12:*/		return 0x82127348;
		  /* 82127348h */ case   13:  		/* lwz R27, <#[R26 + 8]> */
		/* 82127348h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000008) );
		/* 82127348h case   13:*/		return 0x8212734C;
		  /* 8212734Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8212734Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8212734Ch case   14:*/		return 0x82127350;
		  /* 82127350h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 82127350h case   15:*/		if ( regs.CR[6].eq ) { return 0x8212736C;  }
		/* 82127350h case   15:*/		return 0x82127354;
		  /* 82127354h */ case   16:  		/* lwz R9, <#[R11 + 8]> */
		/* 82127354h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82127354h case   16:*/		return 0x82127358;
		  /* 82127358h */ case   17:  		/* lwz R9, <#[R9 + 4]> */
		/* 82127358h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82127358h case   17:*/		return 0x8212735C;
		  /* 8212735Ch */ case   18:  		/* cmpwi CR6, R9, 12 */
		/* 8212735Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000C);
		/* 8212735Ch case   18:*/		return 0x82127360;
		  /* 82127360h */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 82127360h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8212736C;  }
		/* 82127360h case   19:*/		return 0x82127364;
		  /* 82127364h */ case   20:  		/* li R10, 1 */
		/* 82127364h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82127364h case   20:*/		return 0x82127368;
		  /* 82127368h */ case   21:  		/* mr R26, R11 */
		/* 82127368h case   21:*/		regs.R26 = regs.R11;
		/* 82127368h case   21:*/		return 0x8212736C;
	}
	return 0x8212736C;
} // Block from 82127314h-8212736Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8212736Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212736C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212736C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212736C);
		  /* 8212736Ch */ case    0:  		/* lwz R29, <#[R27 + 24]> */
		/* 8212736Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000018) );
		/* 8212736Ch case    0:*/		return 0x82127370;
		  /* 82127370h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82127370h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82127370h case    1:*/		return 0x82127374;
		  /* 82127374h */ case    2:  		/* bc 12, CR6_EQ, 384 */
		/* 82127374h case    2:*/		if ( regs.CR[6].eq ) { return 0x821274F4;  }
		/* 82127374h case    2:*/		return 0x82127378;
		  /* 82127378h */ case    3:  		/* lwz R11, <#[R28 + 8]> */
		/* 82127378h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82127378h case    3:*/		return 0x8212737C;
		  /* 8212737Ch */ case    4:  		/* lwz R30, <#[R29 + 48]> */
		/* 8212737Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000030) );
		/* 8212737Ch case    4:*/		return 0x82127380;
		  /* 82127380h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82127380h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127380h case    5:*/		return 0x82127384;
		  /* 82127384h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 82127384h case    6:*/		if ( regs.CR[6].eq ) { return 0x82127390;  }
		/* 82127384h case    6:*/		return 0x82127388;
		  /* 82127388h */ case    7:  		/* lwz R31, <#[R11 + 16]> */
		/* 82127388h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 82127388h case    7:*/		return 0x8212738C;
		  /* 8212738Ch */ case    8:  		/* b 8 */
		/* 8212738Ch case    8:*/		return 0x82127394;
		/* 8212738Ch case    8:*/		return 0x82127390;
	}
	return 0x82127390;
} // Block from 8212736Ch-82127390h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82127390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127390);
		  /* 82127390h */ case    0:  		/* mr R31, R17 */
		/* 82127390h case    0:*/		regs.R31 = regs.R17;
		/* 82127390h case    0:*/		return 0x82127394;
	}
	return 0x82127394;
} // Block from 82127390h-82127394h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127394);
		  /* 82127394h */ case    0:  		/* li R3, 20 */
		/* 82127394h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82127394h case    0:*/		return 0x82127398;
		  /* 82127398h */ case    1:  		/* bl -385392 */
		/* 82127398h case    1:*/		regs.LR = 0x8212739C; return 0x820C9228;
		/* 82127398h case    1:*/		return 0x8212739C;
		  /* 8212739Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8212739Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212739Ch case    2:*/		return 0x821273A0;
		  /* 821273A0h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821273A0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821273B8;  }
		/* 821273A0h case    3:*/		return 0x821273A4;
		  /* 821273A4h */ case    4:  		/* mr R6, R22 */
		/* 821273A4h case    4:*/		regs.R6 = regs.R22;
		/* 821273A4h case    4:*/		return 0x821273A8;
		  /* 821273A8h */ case    5:  		/* li R5, 0 */
		/* 821273A8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821273A8h case    5:*/		return 0x821273AC;
		  /* 821273ACh */ case    6:  		/* li R4, 0 */
		/* 821273ACh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821273ACh case    6:*/		return 0x821273B0;
		  /* 821273B0h */ case    7:  		/* bl -384960 */
		/* 821273B0h case    7:*/		regs.LR = 0x821273B4; return 0x820C93F0;
		/* 821273B0h case    7:*/		return 0x821273B4;
		  /* 821273B4h */ case    8:  		/* b 8 */
		/* 821273B4h case    8:*/		return 0x821273BC;
		/* 821273B4h case    8:*/		return 0x821273B8;
	}
	return 0x821273B8;
} // Block from 82127394h-821273B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821273B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821273B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821273B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821273B8);
		  /* 821273B8h */ case    0:  		/* mr R3, R17 */
		/* 821273B8h case    0:*/		regs.R3 = regs.R17;
		/* 821273B8h case    0:*/		return 0x821273BC;
	}
	return 0x821273BC;
} // Block from 821273B8h-821273BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821273BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821273BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821273BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821273BC);
		  /* 821273BCh */ case    0:  		/* stw R3, <#[R25]> */
		/* 821273BCh case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 821273BCh case    0:*/		return 0x821273C0;
		  /* 821273C0h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 821273C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821273C0h case    1:*/		return 0x821273C4;
		  /* 821273C4h */ case    2:  		/* bc 12, CR6_EQ, 780 */
		/* 821273C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 821273C4h case    2:*/		return 0x821273C8;
		  /* 821273C8h */ case    3:  		/* li R3, 20 */
		/* 821273C8h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821273C8h case    3:*/		return 0x821273CC;
		  /* 821273CCh */ case    4:  		/* bl -385444 */
		/* 821273CCh case    4:*/		regs.LR = 0x821273D0; return 0x820C9228;
		/* 821273CCh case    4:*/		return 0x821273D0;
		  /* 821273D0h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821273D0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821273D0h case    5:*/		return 0x821273D4;
		  /* 821273D4h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821273D4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821273EC;  }
		/* 821273D4h case    6:*/		return 0x821273D8;
		  /* 821273D8h */ case    7:  		/* mr R6, R23 */
		/* 821273D8h case    7:*/		regs.R6 = regs.R23;
		/* 821273D8h case    7:*/		return 0x821273DC;
		  /* 821273DCh */ case    8:  		/* li R5, 0 */
		/* 821273DCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821273DCh case    8:*/		return 0x821273E0;
		  /* 821273E0h */ case    9:  		/* li R4, 0 */
		/* 821273E0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821273E0h case    9:*/		return 0x821273E4;
		  /* 821273E4h */ case   10:  		/* bl -385012 */
		/* 821273E4h case   10:*/		regs.LR = 0x821273E8; return 0x820C93F0;
		/* 821273E4h case   10:*/		return 0x821273E8;
		  /* 821273E8h */ case   11:  		/* b 8 */
		/* 821273E8h case   11:*/		return 0x821273F0;
		/* 821273E8h case   11:*/		return 0x821273EC;
	}
	return 0x821273EC;
} // Block from 821273BCh-821273ECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821273ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821273EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821273EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821273EC);
		  /* 821273ECh */ case    0:  		/* mr R3, R17 */
		/* 821273ECh case    0:*/		regs.R3 = regs.R17;
		/* 821273ECh case    0:*/		return 0x821273F0;
	}
	return 0x821273F0;
} // Block from 821273ECh-821273F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821273F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821273F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821273F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821273F0);
		  /* 821273F0h */ case    0:  		/* stw R3, <#[R24]> */
		/* 821273F0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + 0x00000000) );
		/* 821273F0h case    0:*/		return 0x821273F4;
		  /* 821273F4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 821273F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821273F4h case    1:*/		return 0x821273F8;
		  /* 821273F8h */ case    2:  		/* bc 12, CR6_EQ, 728 */
		/* 821273F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 821273F8h case    2:*/		return 0x821273FC;
		  /* 821273FCh */ case    3:  		/* lwz R11, <#[R29 + 44]> */
		/* 821273FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 821273FCh case    3:*/		return 0x82127400;
		  /* 82127400h */ case    4:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82127400h case    4:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82127400h case    4:*/		return 0x82127404;
		  /* 82127404h */ case    5:  		/* bc 12, CR0_EQ, 64 */
		/* 82127404h case    5:*/		if ( regs.CR[0].eq ) { return 0x82127444;  }
		/* 82127404h case    5:*/		return 0x82127408;
		  /* 82127408h */ case    6:  		/* li R6, 0 */
		/* 82127408h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127408h case    6:*/		return 0x8212740C;
		  /* 8212740Ch */ case    7:  		/* mr R5, R31 */
		/* 8212740Ch case    7:*/		regs.R5 = regs.R31;
		/* 8212740Ch case    7:*/		return 0x82127410;
		  /* 82127410h */ case    8:  		/* mr R4, R30 */
		/* 82127410h case    8:*/		regs.R4 = regs.R30;
		/* 82127410h case    8:*/		return 0x82127414;
		  /* 82127414h */ case    9:  		/* mr R3, R19 */
		/* 82127414h case    9:*/		regs.R3 = regs.R19;
		/* 82127414h case    9:*/		return 0x82127418;
		  /* 82127418h */ case   10:  		/* bl -41168 */
		/* 82127418h case   10:*/		regs.LR = 0x8212741C; return 0x8211D348;
		/* 82127418h case   10:*/		return 0x8212741C;
		  /* 8212741Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 8212741Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212741Ch case   11:*/		return 0x82127420;
		  /* 82127420h */ case   12:  		/* mr R3, R19 */
		/* 82127420h case   12:*/		regs.R3 = regs.R19;
		/* 82127420h case   12:*/		return 0x82127424;
		  /* 82127424h */ case   13:  		/* bc 12, CR0_EQ, 296 */
		/* 82127424h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212754C;  }
		/* 82127424h case   13:*/		return 0x82127428;
		  /* 82127428h */ case   14:  		/* li R7, 0 */
		/* 82127428h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127428h case   14:*/		return 0x8212742C;
		  /* 8212742Ch */ case   15:  		/* lwz R5, <#[R28 + 8]> */
		/* 8212742Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 8212742Ch case   15:*/		return 0x82127430;
		  /* 82127430h */ case   16:  		/* li R6, 0 */
		/* 82127430h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127430h case   16:*/		return 0x82127434;
		  /* 82127434h */ case   17:  		/* mr R4, R30 */
		/* 82127434h case   17:*/		regs.R4 = regs.R30;
		/* 82127434h case   17:*/		return 0x82127438;
		  /* 82127438h */ case   18:  		/* bl -25056 */
		/* 82127438h case   18:*/		regs.LR = 0x8212743C; return 0x82121258;
		/* 82127438h case   18:*/		return 0x8212743C;
		  /* 8212743Ch */ case   19:  		/* lwz R11, <#[R25]> */
		/* 8212743Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8212743Ch case   19:*/		return 0x82127440;
		  /* 82127440h */ case   20:  		/* stw R3, <#[R11 + 8]> */
		/* 82127440h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82127440h case   20:*/		return 0x82127444;
	}
	return 0x82127444;
} // Block from 821273F0h-82127444h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82127444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127444);
		  /* 82127444h */ case    0:  		/* lwz R11, <#[R29 + 44]> */
		/* 82127444h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 82127444h case    0:*/		return 0x82127448;
		  /* 82127448h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82127448h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82127448h case    1:*/		return 0x8212744C;
		  /* 8212744Ch */ case    2:  		/* bc 12, CR0_EQ, 144 */
		/* 8212744Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821274DC;  }
		/* 8212744Ch case    2:*/		return 0x82127450;
		  /* 82127450h */ case    3:  		/* mr R4, R31 */
		/* 82127450h case    3:*/		regs.R4 = regs.R31;
		/* 82127450h case    3:*/		return 0x82127454;
		  /* 82127454h */ case    4:  		/* mr R3, R19 */
		/* 82127454h case    4:*/		regs.R3 = regs.R19;
		/* 82127454h case    4:*/		return 0x82127458;
		  /* 82127458h */ case    5:  		/* bl -53800 */
		/* 82127458h case    5:*/		regs.LR = 0x8212745C; return 0x8211A230;
		/* 82127458h case    5:*/		return 0x8212745C;
		  /* 8212745Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8212745Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212745Ch case    6:*/		return 0x82127460;
		  /* 82127460h */ case    7:  		/* bc 4, CR0_EQ, 248 */
		/* 82127460h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82127558;  }
		/* 82127460h case    7:*/		return 0x82127464;
		  /* 82127464h */ case    8:  		/* li R6, 0 */
		/* 82127464h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127464h case    8:*/		return 0x82127468;
		  /* 82127468h */ case    9:  		/* mr R5, R30 */
		/* 82127468h case    9:*/		regs.R5 = regs.R30;
		/* 82127468h case    9:*/		return 0x8212746C;
		  /* 8212746Ch */ case   10:  		/* mr R4, R31 */
		/* 8212746Ch case   10:*/		regs.R4 = regs.R31;
		/* 8212746Ch case   10:*/		return 0x82127470;
		  /* 82127470h */ case   11:  		/* mr R3, R19 */
		/* 82127470h case   11:*/		regs.R3 = regs.R19;
		/* 82127470h case   11:*/		return 0x82127474;
		  /* 82127474h */ case   12:  		/* bl -41260 */
		/* 82127474h case   12:*/		regs.LR = 0x82127478; return 0x8211D348;
		/* 82127474h case   12:*/		return 0x82127478;
		  /* 82127478h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82127478h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82127478h case   13:*/		return 0x8212747C;
		  /* 8212747Ch */ case   14:  		/* bc 12, CR0_EQ, 220 */
		/* 8212747Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x82127558;  }
		/* 8212747Ch case   14:*/		return 0x82127480;
		  /* 82127480h */ case   15:  		/* mr R5, R29 */
		/* 82127480h case   15:*/		regs.R5 = regs.R29;
		/* 82127480h case   15:*/		return 0x82127484;
		  /* 82127484h */ case   16:  		/* lwz R4, <#[R27 + 20]> */
		/* 82127484h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000014) );
		/* 82127484h case   16:*/		return 0x82127488;
		  /* 82127488h */ case   17:  		/* mr R3, R19 */
		/* 82127488h case   17:*/		regs.R3 = regs.R19;
		/* 82127488h case   17:*/		return 0x8212748C;
		  /* 8212748Ch */ case   18:  		/* bl -25724 */
		/* 8212748Ch case   18:*/		regs.LR = 0x82127490; return 0x82121010;
		/* 8212748Ch case   18:*/		return 0x82127490;
		  /* 82127490h */ case   19:  		/* or. R5, R3, R3 */
		/* 82127490h case   19:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 82127490h case   19:*/		return 0x82127494;
		  /* 82127494h */ case   20:  		/* bc 12, CR0_EQ, 572 */
		/* 82127494h case   20:*/		if ( regs.CR[0].eq ) { return 0x821276D0;  }
		/* 82127494h case   20:*/		return 0x82127498;
		  /* 82127498h */ case   21:  		/* li R7, 0 */
		/* 82127498h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127498h case   21:*/		return 0x8212749C;
		  /* 8212749Ch */ case   22:  		/* li R6, 0 */
		/* 8212749Ch case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212749Ch case   22:*/		return 0x821274A0;
		  /* 821274A0h */ case   23:  		/* mr R4, R31 */
		/* 821274A0h case   23:*/		regs.R4 = regs.R31;
		/* 821274A0h case   23:*/		return 0x821274A4;
		  /* 821274A4h */ case   24:  		/* mr R3, R19 */
		/* 821274A4h case   24:*/		regs.R3 = regs.R19;
		/* 821274A4h case   24:*/		return 0x821274A8;
		  /* 821274A8h */ case   25:  		/* bl -25168 */
		/* 821274A8h case   25:*/		regs.LR = 0x821274AC; return 0x82121258;
		/* 821274A8h case   25:*/		return 0x821274AC;
		  /* 821274ACh */ case   26:  		/* or. R6, R3, R3 */
		/* 821274ACh case   26:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 821274ACh case   26:*/		return 0x821274B0;
		  /* 821274B0h */ case   27:  		/* bc 12, CR0_EQ, 544 */
		/* 821274B0h case   27:*/		if ( regs.CR[0].eq ) { return 0x821276D0;  }
		/* 821274B0h case   27:*/		return 0x821274B4;
		  /* 821274B4h */ case   28:  		/* li R8, 0 */
		/* 821274B4h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821274B4h case   28:*/		return 0x821274B8;
		  /* 821274B8h */ case   29:  		/* lwz R5, <#[R28 + 8]> */
		/* 821274B8h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 821274B8h case   29:*/		return 0x821274BC;
		  /* 821274BCh */ case   30:  		/* li R7, 1 */
		/* 821274BCh case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821274BCh case   30:*/		return 0x821274C0;
		  /* 821274C0h */ case   31:  		/* li R4, 27 */
		/* 821274C0h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 821274C0h case   31:*/		return 0x821274C4;
		  /* 821274C4h */ case   32:  		/* mr R3, R19 */
		/* 821274C4h case   32:*/		regs.R3 = regs.R19;
		/* 821274C4h case   32:*/		return 0x821274C8;
		  /* 821274C8h */ case   33:  		/* bl -22136 */
		/* 821274C8h case   33:*/		regs.LR = 0x821274CC; return 0x82121E50;
		/* 821274C8h case   33:*/		return 0x821274CC;
		  /* 821274CCh */ case   34:  		/* cmplwi CR0, R3, 0 */
		/* 821274CCh case   34:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821274CCh case   34:*/		return 0x821274D0;
		  /* 821274D0h */ case   35:  		/* bc 12, CR0_EQ, 512 */
		/* 821274D0h case   35:*/		if ( regs.CR[0].eq ) { return 0x821276D0;  }
		/* 821274D0h case   35:*/		return 0x821274D4;
		  /* 821274D4h */ case   36:  		/* lwz R11, <#[R24]> */
		/* 821274D4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821274D4h case   36:*/		return 0x821274D8;
		  /* 821274D8h */ case   37:  		/* stw R3, <#[R11 + 8]> */
		/* 821274D8h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 821274D8h case   37:*/		return 0x821274DC;
	}
	return 0x821274DC;
} // Block from 82127444h-821274DCh (38 instructions)

//////////////////////////////////////////////////////
// Block at 821274DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821274DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821274DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821274DC);
		  /* 821274DCh */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821274DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821274DCh case    0:*/		return 0x821274E0;
		  /* 821274E0h */ case    1:  		/* lwz R10, <#[R24]> */
		/* 821274E0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821274E0h case    1:*/		return 0x821274E4;
		  /* 821274E4h */ case    2:  		/* lwz R28, <#[R28 + 12]> */
		/* 821274E4h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 821274E4h case    2:*/		return 0x821274E8;
		  /* 821274E8h */ case    3:  		/* addi R25, R11, 12 */
		/* 821274E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xC);
		/* 821274E8h case    3:*/		return 0x821274EC;
		  /* 821274ECh */ case    4:  		/* addi R24, R10, 12 */
		/* 821274ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xC);
		/* 821274ECh case    4:*/		return 0x821274F0;
		  /* 821274F0h */ case    5:  		/* b 12 */
		/* 821274F0h case    5:*/		return 0x821274FC;
		/* 821274F0h case    5:*/		return 0x821274F4;
	}
	return 0x821274F4;
} // Block from 821274DCh-821274F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821274F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821274F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821274F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821274F4);
		  /* 821274F4h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 821274F4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821274F4h case    0:*/		return 0x821274F8;
		  /* 821274F8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821274F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82127510;  }
		/* 821274F8h case    1:*/		return 0x821274FC;
	}
	return 0x821274FC;
} // Block from 821274F4h-821274FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821274FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821274FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821274FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821274FC);
		  /* 821274FCh */ case    0:  		/* lwz R26, <#[R26 + 12]> */
		/* 821274FCh case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x0000000C) );
		/* 821274FCh case    0:*/		return 0x82127500;
		  /* 82127500h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 82127500h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82127500h case    1:*/		return 0x82127504;
		  /* 82127504h */ case    2:  		/* bc 4, CR6_EQ, -452 */
		/* 82127504h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82127340;  }
		/* 82127504h case    2:*/		return 0x82127508;
	}
	return 0x82127508;
} // Block from 821274FCh-82127508h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127508);
		  /* 82127508h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82127508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82127508h case    0:*/		return 0x8212750C;
		  /* 8212750Ch */ case    1:  		/* bc 4, CR6_EQ, 364 */
		/* 8212750Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127678;  }
		/* 8212750Ch case    1:*/		return 0x82127510;
	}
	return 0x82127510;
} // Block from 82127508h-82127510h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127510);
		  /* 82127510h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82127510h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82127510h case    0:*/		return 0x82127514;
		  /* 82127514h */ case    1:  		/* bc 4, CR6_EQ, 356 */
		/* 82127514h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127678;  }
		/* 82127514h case    1:*/		return 0x82127518;
		  /* 82127518h */ case    2:  		/* li R3, 88 */
		/* 82127518h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82127518h case    2:*/		return 0x8212751C;
		  /* 8212751Ch */ case    3:  		/* bl -385780 */
		/* 8212751Ch case    3:*/		regs.LR = 0x82127520; return 0x820C9228;
		/* 8212751Ch case    3:*/		return 0x82127520;
		  /* 82127520h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82127520h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127520h case    4:*/		return 0x82127524;
		  /* 82127524h */ case    5:  		/* bc 12, CR0_EQ, 84 */
		/* 82127524h case    5:*/		if ( regs.CR[0].eq ) { return 0x82127578;  }
		/* 82127524h case    5:*/		return 0x82127528;
		  /* 82127528h */ case    6:  		/* mr R9, R20 */
		/* 82127528h case    6:*/		regs.R9 = regs.R20;
		/* 82127528h case    6:*/		return 0x8212752C;
		  /* 8212752Ch */ case    7:  		/* li R8, 1 */
		/* 8212752Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8212752Ch case    7:*/		return 0x82127530;
		  /* 82127530h */ case    8:  		/* li R7, 0 */
		/* 82127530h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127530h case    8:*/		return 0x82127534;
		  /* 82127534h */ case    9:  		/* li R6, 0 */
		/* 82127534h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127534h case    9:*/		return 0x82127538;
		  /* 82127538h */ case   10:  		/* li R5, 33 */
		/* 82127538h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x21);
		/* 82127538h case   10:*/		return 0x8212753C;
		  /* 8212753Ch */ case   11:  		/* li R4, 0 */
		/* 8212753Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212753Ch case   11:*/		return 0x82127540;
		  /* 82127540h */ case   12:  		/* bl -374200 */
		/* 82127540h case   12:*/		regs.LR = 0x82127544; return 0x820CBF88;
		/* 82127540h case   12:*/		return 0x82127544;
		  /* 82127544h */ case   13:  		/* mr R30, R3 */
		/* 82127544h case   13:*/		regs.R30 = regs.R3;
		/* 82127544h case   13:*/		return 0x82127548;
		  /* 82127548h */ case   14:  		/* b 52 */
		/* 82127548h case   14:*/		return 0x8212757C;
		/* 82127548h case   14:*/		return 0x8212754C;
	}
	return 0x8212754C;
} // Block from 82127510h-8212754Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212754Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212754C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212754C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212754C);
		  /* 8212754Ch */ case    0:  		/* mr R7, R31 */
		/* 8212754Ch case    0:*/		regs.R7 = regs.R31;
		/* 8212754Ch case    0:*/		return 0x82127550;
		  /* 82127550h */ case    1:  		/* mr R6, R30 */
		/* 82127550h case    1:*/		regs.R6 = regs.R30;
		/* 82127550h case    1:*/		return 0x82127554;
		  /* 82127554h */ case    2:  		/* b 16 */
		/* 82127554h case    2:*/		return 0x82127564;
		/* 82127554h case    2:*/		return 0x82127558;
	}
	return 0x82127558;
} // Block from 8212754Ch-82127558h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127558);
		  /* 82127558h */ case    0:  		/* mr R7, R30 */
		/* 82127558h case    0:*/		regs.R7 = regs.R30;
		/* 82127558h case    0:*/		return 0x8212755C;
		  /* 8212755Ch */ case    1:  		/* mr R6, R31 */
		/* 8212755Ch case    1:*/		regs.R6 = regs.R31;
		/* 8212755Ch case    1:*/		return 0x82127560;
		  /* 82127560h */ case    2:  		/* mr R3, R19 */
		/* 82127560h case    2:*/		regs.R3 = regs.R19;
		/* 82127560h case    2:*/		return 0x82127564;
	}
	return 0x82127564;
} // Block from 82127558h-82127564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127564);
		  /* 82127564h */ case    0:  		/* mr R4, R20 */
		/* 82127564h case    0:*/		regs.R4 = regs.R20;
		/* 82127564h case    0:*/		return 0x82127568;
		  /* 82127568h */ case    1:  		/* lwz R5, <#[R20 + 8]> */
		/* 82127568h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000008) );
		/* 82127568h case    1:*/		return 0x8212756C;
		  /* 8212756Ch */ case    2:  		/* li R8, 0 */
		/* 8212756Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212756Ch case    2:*/		return 0x82127570;
		  /* 82127570h */ case    3:  		/* bl -40408 */
		/* 82127570h case    3:*/		regs.LR = 0x82127574; return 0x8211D798;
		/* 82127570h case    3:*/		return 0x82127574;
		  /* 82127574h */ case    4:  		/* b 348 */
		/* 82127574h case    4:*/		return 0x821276D0;
		/* 82127574h case    4:*/		return 0x82127578;
	}
	return 0x82127578;
} // Block from 82127564h-82127578h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82127578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127578);
		  /* 82127578h */ case    0:  		/* mr R30, R17 */
		/* 82127578h case    0:*/		regs.R30 = regs.R17;
		/* 82127578h case    0:*/		return 0x8212757C;
	}
	return 0x8212757C;
} // Block from 82127578h-8212757Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212757Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212757C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212757C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212757C);
		  /* 8212757Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8212757Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8212757Ch case    0:*/		return 0x82127580;
		  /* 82127580h */ case    1:  		/* bc 12, CR6_EQ, 336 */
		/* 82127580h case    1:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 82127580h case    1:*/		return 0x82127584;
		  /* 82127584h */ case    2:  		/* lwz R11, <#[R21 + 40]> */
		/* 82127584h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000028) );
		/* 82127584h case    2:*/		return 0x82127588;
		  /* 82127588h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82127588h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127588h case    3:*/		return 0x8212758C;
		  /* 8212758Ch */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8212758Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821275B0;  }
		/* 8212758Ch case    4:*/		return 0x82127590;
		  /* 82127590h */ case    5:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 82127590h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 82127590h case    5:*/		return 0x82127594;
		  /* 82127594h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82127594h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82127594h case    6:*/		return 0x82127598;
		  /* 82127598h */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 82127598h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82127598h case    7:*/		return 0x8212759C;
		  /* 8212759Ch */ case    8:  		/* mtspr CTR, R11 */
		/* 8212759Ch case    8:*/		regs.CTR = regs.R11;
		/* 8212759Ch case    8:*/		return 0x821275A0;
		  /* 821275A0h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 821275A0h case    9:*/		if ( 1 ) { regs.LR = 0x821275A4; return (uint32)regs.CTR; }
		/* 821275A0h case    9:*/		return 0x821275A4;
		  /* 821275A4h */ case   10:  		/* stw R3, <#[R30 + 16]> */
		/* 821275A4h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821275A4h case   10:*/		return 0x821275A8;
		  /* 821275A8h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 821275A8h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821275A8h case   11:*/		return 0x821275AC;
		  /* 821275ACh */ case   12:  		/* bc 12, CR0_EQ, 292 */
		/* 821275ACh case   12:*/		if ( regs.CR[0].eq ) { return 0x821276D0;  }
		/* 821275ACh case   12:*/		return 0x821275B0;
	}
	return 0x821275B0;
} // Block from 8212757Ch-821275B0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821275B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821275B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821275B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821275B0);
		  /* 821275B0h */ case    0:  		/* lwz R11, <#[R16]> */
		/* 821275B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821275B0h case    0:*/		return 0x821275B4;
		  /* 821275B4h */ case    1:  		/* mr R3, R16 */
		/* 821275B4h case    1:*/		regs.R3 = regs.R16;
		/* 821275B4h case    1:*/		return 0x821275B8;
		  /* 821275B8h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821275B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821275B8h case    2:*/		return 0x821275BC;
		  /* 821275BCh */ case    3:  		/* mtspr CTR, R11 */
		/* 821275BCh case    3:*/		regs.CTR = regs.R11;
		/* 821275BCh case    3:*/		return 0x821275C0;
		  /* 821275C0h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 821275C0h case    4:*/		if ( 1 ) { regs.LR = 0x821275C4; return (uint32)regs.CTR; }
		/* 821275C0h case    4:*/		return 0x821275C4;
		  /* 821275C4h */ case    5:  		/* stw R3, <#[R30 + 32]> */
		/* 821275C4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 821275C4h case    5:*/		return 0x821275C8;
		  /* 821275C8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821275C8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821275C8h case    6:*/		return 0x821275CC;
		  /* 821275CCh */ case    7:  		/* bc 12, CR0_EQ, 260 */
		/* 821275CCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821276D0;  }
		/* 821275CCh case    7:*/		return 0x821275D0;
		  /* 821275D0h */ case    8:  		/* li R3, 20 */
		/* 821275D0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821275D0h case    8:*/		return 0x821275D4;
		  /* 821275D4h */ case    9:  		/* bl -385964 */
		/* 821275D4h case    9:*/		regs.LR = 0x821275D8; return 0x820C9228;
		/* 821275D4h case    9:*/		return 0x821275D8;
		  /* 821275D8h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 821275D8h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821275D8h case   10:*/		return 0x821275DC;
		  /* 821275DCh */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 821275DCh case   11:*/		if ( regs.CR[0].eq ) { return 0x821275FC;  }
		/* 821275DCh case   11:*/		return 0x821275E0;
	}
	return 0x821275E0;
} // Block from 821275B0h-821275E0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821275E0h
// Function '?FunctionExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821275E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821275E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821275E0);
		  /* 821275E0h */ case    0:  		/* lis R11, -32253 */
		/* 821275E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821275E0h case    0:*/		return 0x821275E4;
		  /* 821275E4h */ case    1:  		/* li R5, 0 */
		/* 821275E4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821275E4h case    1:*/		return 0x821275E8;
		  /* 821275E8h */ case    2:  		/* addi R6, R11, 14124 */
		/* 821275E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x372C);
		/* 821275E8h case    2:*/		return 0x821275EC;
		  /* 821275ECh */ case    3:  		/* li R4, 0 */
		/* 821275ECh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821275ECh case    3:*/		return 0x821275F0;
		  /* 821275F0h */ case    4:  		/* bl -385536 */
		/* 821275F0h case    4:*/		regs.LR = 0x821275F4; return 0x820C93F0;
		/* 821275F0h case    4:*/		return 0x821275F4;
		  /* 821275F4h */ case    5:  		/* mr R31, R3 */
		/* 821275F4h case    5:*/		regs.R31 = regs.R3;
		/* 821275F4h case    5:*/		return 0x821275F8;
		  /* 821275F8h */ case    6:  		/* b 8 */
		/* 821275F8h case    6:*/		return 0x82127600;
		/* 821275F8h case    6:*/		return 0x821275FC;
	}
	return 0x821275FC;
} // Block from 821275E0h-821275FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821275FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821275FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821275FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821275FC);
		  /* 821275FCh */ case    0:  		/* mr R31, R17 */
		/* 821275FCh case    0:*/		regs.R31 = regs.R17;
		/* 821275FCh case    0:*/		return 0x82127600;
	}
	return 0x82127600;
} // Block from 821275FCh-82127600h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127600);
		  /* 82127600h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82127600h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82127600h case    0:*/		return 0x82127604;
		  /* 82127604h */ case    1:  		/* bc 12, CR6_EQ, 204 */
		/* 82127604h case    1:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 82127604h case    1:*/		return 0x82127608;
		  /* 82127608h */ case    2:  		/* lwz R11, <#[R1 + 152]> */
		/* 82127608h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82127608h case    2:*/		return 0x8212760C;
		  /* 8212760Ch */ case    3:  		/* li R3, 20 */
		/* 8212760Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8212760Ch case    3:*/		return 0x82127610;
		  /* 82127610h */ case    4:  		/* lwz R10, <#[R1 + 156]> */
		/* 82127610h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000009C) );
		/* 82127610h case    4:*/		return 0x82127614;
		  /* 82127614h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 82127614h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82127614h case    5:*/		return 0x82127618;
		  /* 82127618h */ case    6:  		/* stw R10, <#[R31 + 12]> */
		/* 82127618h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82127618h case    6:*/		return 0x8212761C;
		  /* 8212761Ch */ case    7:  		/* bl -386036 */
		/* 8212761Ch case    7:*/		regs.LR = 0x82127620; return 0x820C9228;
		/* 8212761Ch case    7:*/		return 0x82127620;
		  /* 82127620h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82127620h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127620h case    8:*/		return 0x82127624;
		  /* 82127624h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 82127624h case    9:*/		if ( regs.CR[0].eq ) { return 0x82127644;  }
		/* 82127624h case    9:*/		return 0x82127628;
		  /* 82127628h */ case   10:  		/* lis R11, -32253 */
		/* 82127628h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127628h case   10:*/		return 0x8212762C;
		  /* 8212762Ch */ case   11:  		/* li R5, 0 */
		/* 8212762Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212762Ch case   11:*/		return 0x82127630;
		  /* 82127630h */ case   12:  		/* addi R6, R11, 14196 */
		/* 82127630h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3774);
		/* 82127630h case   12:*/		return 0x82127634;
		  /* 82127634h */ case   13:  		/* li R4, 0 */
		/* 82127634h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127634h case   13:*/		return 0x82127638;
		  /* 82127638h */ case   14:  		/* bl -385608 */
		/* 82127638h case   14:*/		regs.LR = 0x8212763C; return 0x820C93F0;
		/* 82127638h case   14:*/		return 0x8212763C;
		  /* 8212763Ch */ case   15:  		/* mr R11, R3 */
		/* 8212763Ch case   15:*/		regs.R11 = regs.R3;
		/* 8212763Ch case   15:*/		return 0x82127640;
		  /* 82127640h */ case   16:  		/* b 8 */
		/* 82127640h case   16:*/		return 0x82127648;
		/* 82127640h case   16:*/		return 0x82127644;
	}
	return 0x82127644;
} // Block from 82127600h-82127644h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82127644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127644);
		  /* 82127644h */ case    0:  		/* mr R11, R17 */
		/* 82127644h case    0:*/		regs.R11 = regs.R17;
		/* 82127644h case    0:*/		return 0x82127648;
	}
	return 0x82127648;
} // Block from 82127644h-82127648h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127648);
		  /* 82127648h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82127648h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127648h case    0:*/		return 0x8212764C;
		  /* 8212764Ch */ case    1:  		/* stw R11, <#[R30 + 36]> */
		/* 8212764Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8212764Ch case    1:*/		return 0x82127650;
		  /* 82127650h */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 82127650h case    2:*/		if ( regs.CR[6].eq ) { return 0x821276D0;  }
		/* 82127650h case    2:*/		return 0x82127654;
		  /* 82127654h */ case    3:  		/* lwz R10, <#[R1 + 148]> */
		/* 82127654h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 82127654h case    3:*/		return 0x82127658;
		  /* 82127658h */ case    4:  		/* mr R4, R30 */
		/* 82127658h case    4:*/		regs.R4 = regs.R30;
		/* 82127658h case    4:*/		return 0x8212765C;
		  /* 8212765Ch */ case    5:  		/* mr R3, R19 */
		/* 8212765Ch case    5:*/		regs.R3 = regs.R19;
		/* 8212765Ch case    5:*/		return 0x82127660;
		  /* 82127660h */ case    6:  		/* stw R10, <#[R11 + 8]> */
		/* 82127660h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82127660h case    6:*/		return 0x82127664;
		  /* 82127664h */ case    7:  		/* lwz R11, <#[R30 + 36]> */
		/* 82127664h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 82127664h case    7:*/		return 0x82127668;
		  /* 82127668h */ case    8:  		/* stw R31, <#[R11 + 12]> */
		/* 82127668h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127668h case    8:*/		return 0x8212766C;
		  /* 8212766Ch */ case    9:  		/* bl -46676 */
		/* 8212766Ch case    9:*/		regs.LR = 0x82127670; return 0x8211C018;
		/* 8212766Ch case    9:*/		return 0x82127670;
		  /* 82127670h */ case   10:  		/* mr R3, R30 */
		/* 82127670h case   10:*/		regs.R3 = regs.R30;
		/* 82127670h case   10:*/		return 0x82127674;
		  /* 82127674h */ case   11:  		/* b 96 */
		/* 82127674h case   11:*/		return 0x821276D4;
		/* 82127674h case   11:*/		return 0x82127678;
	}
	return 0x82127678;
} // Block from 82127648h-82127678h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82127678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127678);
		  /* 82127678h */ case    0:  		/* mr R8, R17 */
		/* 82127678h case    0:*/		regs.R8 = regs.R17;
		/* 82127678h case    0:*/		return 0x8212767C;
		  /* 8212767Ch */ case    1:  		/* mr R11, R18 */
		/* 8212767Ch case    1:*/		regs.R11 = regs.R18;
		/* 8212767Ch case    1:*/		return 0x82127680;
		  /* 82127680h */ case    2:  		/* cmplwi CR6, R18, 0 */
		/* 82127680h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 82127680h case    2:*/		return 0x82127684;
		  /* 82127684h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82127684h case    3:*/		if ( regs.CR[6].eq ) { return 0x821276A0;  }
		/* 82127684h case    3:*/		return 0x82127688;
		  /* 82127688h */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 82127688h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127688h case    4:*/		return 0x8212768C;
		  /* 8212768Ch */ case    5:  		/* addi R8, R8, 1 */
		/* 8212768Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8212768Ch case    5:*/		return 0x82127690;
		  /* 82127690h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82127690h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127690h case    6:*/		return 0x82127694;
		  /* 82127694h */ case    7:  		/* bc 4, CR6_EQ, -12 */
		/* 82127694h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82127688;  }
		/* 82127694h case    7:*/		return 0x82127698;
		  /* 82127698h */ case    8:  		/* cmplwi CR6, R8, 1 */
		/* 82127698h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82127698h case    8:*/		return 0x8212769C;
		  /* 8212769Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8212769Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821276AC;  }
		/* 8212769Ch case    9:*/		return 0x821276A0;
	}
	return 0x821276A0;
} // Block from 82127678h-821276A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821276A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276A0);
		  /* 821276A0h */ case    0:  		/* lis R11, -32255 */
		/* 821276A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821276A0h case    0:*/		return 0x821276A4;
		  /* 821276A4h */ case    1:  		/* addi R9, R11, -8796 */
		/* 821276A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFDDA4);
		/* 821276A4h case    1:*/		return 0x821276A8;
		  /* 821276A8h */ case    2:  		/* b 12 */
		/* 821276A8h case    2:*/		return 0x821276B4;
		/* 821276A8h case    2:*/		return 0x821276AC;
	}
	return 0x821276AC;
} // Block from 821276A0h-821276ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821276ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276AC);
		  /* 821276ACh */ case    0:  		/* lis R11, -32256 */
		/* 821276ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821276ACh case    0:*/		return 0x821276B0;
		  /* 821276B0h */ case    1:  		/* addi R9, R11, 4485 */
		/* 821276B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1185);
		/* 821276B0h case    1:*/		return 0x821276B4;
	}
	return 0x821276B4;
} // Block from 821276ACh-821276B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821276B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276B4);
		  /* 821276B4h */ case    0:  		/* lis R11, -32253 */
		/* 821276B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821276B4h case    0:*/		return 0x821276B8;
		  /* 821276B8h */ case    1:  		/* lwz R7, <#[R20 + 8]> */
		/* 821276B8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R20 + 0x00000008) );
		/* 821276B8h case    1:*/		return 0x821276BC;
		  /* 821276BCh */ case    2:  		/* li R5, 3013 */
		/* 821276BCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBC5);
		/* 821276BCh case    2:*/		return 0x821276C0;
		  /* 821276C0h */ case    3:  		/* addi R6, R11, 14152 */
		/* 821276C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3748);
		/* 821276C0h case    3:*/		return 0x821276C4;
		  /* 821276C4h */ case    4:  		/* mr R4, R20 */
		/* 821276C4h case    4:*/		regs.R4 = regs.R20;
		/* 821276C4h case    4:*/		return 0x821276C8;
		  /* 821276C8h */ case    5:  		/* mr R3, R19 */
		/* 821276C8h case    5:*/		regs.R3 = regs.R19;
		/* 821276C8h case    5:*/		return 0x821276CC;
		  /* 821276CCh */ case    6:  		/* bl -56876 */
		/* 821276CCh case    6:*/		regs.LR = 0x821276D0; return 0x821198A0;
		/* 821276CCh case    6:*/		return 0x821276D0;
	}
	return 0x821276D0;
} // Block from 821276B4h-821276D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821276D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276D0);
		  /* 821276D0h */ case    0:  		/* li R3, 0 */
		/* 821276D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821276D0h case    0:*/		return 0x821276D4;
	}
	return 0x821276D4;
} // Block from 821276D0h-821276D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821276D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276D4);
		  /* 821276D4h */ case    0:  		/* addi R1, R1, 560 */
		/* 821276D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x230);
		/* 821276D4h case    0:*/		return 0x821276D8;
		  /* 821276D8h */ case    1:  		/* b -615520 */
		/* 821276D8h case    1:*/		return 0x82091278;
		/* 821276D8h case    1:*/		return 0x821276DC;
		  /* 821276DCh */ case    2:  		/* nop */
		/* 821276DCh case    2:*/		cpu::op::nop();
		/* 821276DCh case    2:*/		return 0x821276E0;
	}
	return 0x821276E0;
} // Block from 821276D4h-821276E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821276E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821276E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821276E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821276E0);
		  /* 821276E0h */ case    0:  		/* mfspr R12, LR */
		/* 821276E0h case    0:*/		regs.R12 = regs.LR;
		/* 821276E0h case    0:*/		return 0x821276E4;
		  /* 821276E4h */ case    1:  		/* bl -615584 */
		/* 821276E4h case    1:*/		regs.LR = 0x821276E8; return 0x82091244;
		/* 821276E4h case    1:*/		return 0x821276E8;
		  /* 821276E8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821276E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821276E8h case    2:*/		return 0x821276EC;
		  /* 821276ECh */ case    3:  		/* mr R23, R3 */
		/* 821276ECh case    3:*/		regs.R23 = regs.R3;
		/* 821276ECh case    3:*/		return 0x821276F0;
		  /* 821276F0h */ case    4:  		/* mr R29, R4 */
		/* 821276F0h case    4:*/		regs.R29 = regs.R4;
		/* 821276F0h case    4:*/		return 0x821276F4;
		  /* 821276F4h */ case    5:  		/* mr R27, R5 */
		/* 821276F4h case    5:*/		regs.R27 = regs.R5;
		/* 821276F4h case    5:*/		return 0x821276F8;
		  /* 821276F8h */ case    6:  		/* mr R26, R6 */
		/* 821276F8h case    6:*/		regs.R26 = regs.R6;
		/* 821276F8h case    6:*/		return 0x821276FC;
		  /* 821276FCh */ case    7:  		/* mr R25, R7 */
		/* 821276FCh case    7:*/		regs.R25 = regs.R7;
		/* 821276FCh case    7:*/		return 0x82127700;
		  /* 82127700h */ case    8:  		/* mr R31, R8 */
		/* 82127700h case    8:*/		regs.R31 = regs.R8;
		/* 82127700h case    8:*/		return 0x82127704;
		  /* 82127704h */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 82127704h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82127704h case    9:*/		return 0x82127708;
		  /* 82127708h */ case   10:  		/* bc 12, CR6_EQ, 68 */
		/* 82127708h case   10:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127708h case   10:*/		return 0x8212770C;
		  /* 8212770Ch */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 8212770Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8212770Ch case   11:*/		return 0x82127710;
		  /* 82127710h */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 82127710h case   12:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127710h case   12:*/		return 0x82127714;
		  /* 82127714h */ case   13:  		/* lwz R3, <#[R4 + 24]> */
		/* 82127714h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000018) );
		/* 82127714h case   13:*/		return 0x82127718;
		  /* 82127718h */ case   14:  		/* addi R5, R1, 136 */
		/* 82127718h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x88);
		/* 82127718h case   14:*/		return 0x8212771C;
		  /* 8212771Ch */ case   15:  		/* li R4, 2 */
		/* 8212771Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212771Ch case   15:*/		return 0x82127720;
		  /* 82127720h */ case   16:  		/* addi R24, R29, 16 */
		/* 82127720h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R29,0x10);
		/* 82127720h case   16:*/		return 0x82127724;
		  /* 82127724h */ case   17:  		/* bl -559508 */
		/* 82127724h case   17:*/		regs.LR = 0x82127728; return 0x8209ED90;
		/* 82127724h case   17:*/		return 0x82127728;
		  /* 82127728h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 82127728h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82127728h case   18:*/		return 0x8212772C;
		  /* 8212772Ch */ case   19:  		/* bc 4, CR0_LT, 44 */
		/* 8212772Ch case   19:*/		if ( !regs.CR[0].lt ) { return 0x82127758;  }
		/* 8212772Ch case   19:*/		return 0x82127730;
		  /* 82127730h */ case   20:  		/* lis R11, -32253 */
		/* 82127730h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127730h case   20:*/		return 0x82127734;
		  /* 82127734h */ case   21:  		/* lwz R7, <#[R24 + 8]> */
		/* 82127734h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R24 + 0x00000008) );
		/* 82127734h case   21:*/		return 0x82127738;
		  /* 82127738h */ case   22:  		/* li R5, 3041 */
		/* 82127738h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0xBE1);
		/* 82127738h case   22:*/		return 0x8212773C;
		  /* 8212773Ch */ case   23:  		/* addi R6, R11, 14344 */
		/* 8212773Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3808);
		/* 8212773Ch case   23:*/		return 0x82127740;
		  /* 82127740h */ case   24:  		/* mr R4, R24 */
		/* 82127740h case   24:*/		regs.R4 = regs.R24;
		/* 82127740h case   24:*/		return 0x82127744;
		  /* 82127744h */ case   25:  		/* mr R3, R23 */
		/* 82127744h case   25:*/		regs.R3 = regs.R23;
		/* 82127744h case   25:*/		return 0x82127748;
		  /* 82127748h */ case   26:  		/* bl -57000 */
		/* 82127748h case   26:*/		regs.LR = 0x8212774C; return 0x821198A0;
		/* 82127748h case   26:*/		return 0x8212774C;
	}
	return 0x8212774C;
} // Block from 821276E0h-8212774Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8212774Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212774C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212774C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212774C);
		  /* 8212774Ch */ case    0:  		/* li R3, 0 */
		/* 8212774Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212774Ch case    0:*/		return 0x82127750;
		  /* 82127750h */ case    1:  		/* addi R1, R1, 240 */
		/* 82127750h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82127750h case    1:*/		return 0x82127754;
		  /* 82127754h */ case    2:  		/* b -615616 */
		/* 82127754h case    2:*/		return 0x82091294;
		/* 82127754h case    2:*/		return 0x82127758;
	}
	return 0x82127758;
} // Block from 8212774Ch-82127758h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127758);
		  /* 82127758h */ case    0:  		/* lwz R11, <#[R1 + 140]> */
		/* 82127758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 82127758h case    0:*/		return 0x8212775C;
		  /* 8212775Ch */ case    1:  		/* lis R10, -2 */
		/* 8212775Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFE);
		/* 8212775Ch case    1:*/		return 0x82127760;
		  /* 82127760h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82127760h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82127760h case    2:*/		return 0x82127764;
		  /* 82127764h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82127764h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82127764h case    3:*/		return 0x82127768;
		  /* 82127768h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82127768h case    4:*/		if ( regs.CR[6].eq ) { return 0x8212778C;  }
		/* 82127768h case    4:*/		return 0x8212776C;
		  /* 8212776Ch */ case    5:  		/* lis R10, -1 */
		/* 8212776Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8212776Ch case    5:*/		return 0x82127770;
		  /* 82127770h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82127770h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82127770h case    6:*/		return 0x82127774;
		  /* 82127774h */ case    7:  		/* bc 4, CR6_EQ, 44 */
		/* 82127774h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821277A0;  }
		/* 82127774h case    7:*/		return 0x82127778;
		  /* 82127778h */ case    8:  		/* subfic R11, R31, 0 */
		/* 82127778h case    8:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R31,0x0);
		/* 82127778h case    8:*/		return 0x8212777C;
		  /* 8212777Ch */ case    9:  		/* subfe R11, R11, R11 */
		/* 8212777Ch case    9:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8212777Ch case    9:*/		return 0x82127780;
		  /* 82127780h */ case   10:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82127780h case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82127780h case   10:*/		return 0x82127784;
		  /* 82127784h */ case   11:  		/* addi R28, R11, 42 */
		/* 82127784h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x2A);
		/* 82127784h case   11:*/		return 0x82127788;
		  /* 82127788h */ case   12:  		/* b 28 */
		/* 82127788h case   12:*/		return 0x821277A4;
		/* 82127788h case   12:*/		return 0x8212778C;
	}
	return 0x8212778C;
} // Block from 82127758h-8212778Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8212778Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212778C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212778C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212778C);
		  /* 8212778Ch */ case    0:  		/* subfic R11, R31, 0 */
		/* 8212778Ch case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R31,0x0);
		/* 8212778Ch case    0:*/		return 0x82127790;
		  /* 82127790h */ case    1:  		/* subfe R11, R11, R11 */
		/* 82127790h case    1:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82127790h case    1:*/		return 0x82127794;
		  /* 82127794h */ case    2:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82127794h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82127794h case    2:*/		return 0x82127798;
		  /* 82127798h */ case    3:  		/* addi R28, R11, 43 */
		/* 82127798h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x2B);
		/* 82127798h case    3:*/		return 0x8212779C;
		  /* 8212779Ch */ case    4:  		/* b 8 */
		/* 8212779Ch case    4:*/		return 0x821277A4;
		/* 8212779Ch case    4:*/		return 0x821277A0;
	}
	return 0x821277A0;
} // Block from 8212778Ch-821277A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821277A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821277A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821277A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821277A0);
		  /* 821277A0h */ case    0:  		/* lwz R28, <#[R1 + 128]> */
		/* 821277A0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 821277A0h case    0:*/		return 0x821277A4;
	}
	return 0x821277A4;
} // Block from 821277A0h-821277A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821277A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821277A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821277A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821277A4);
		  /* 821277A4h */ case    0:  		/* li R3, 88 */
		/* 821277A4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821277A4h case    0:*/		return 0x821277A8;
		  /* 821277A8h */ case    1:  		/* bl -386432 */
		/* 821277A8h case    1:*/		regs.LR = 0x821277AC; return 0x820C9228;
		/* 821277A8h case    1:*/		return 0x821277AC;
		  /* 821277ACh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821277ACh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821277ACh case    2:*/		return 0x821277B0;
		  /* 821277B0h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 821277B0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821277D8;  }
		/* 821277B0h case    3:*/		return 0x821277B4;
		  /* 821277B4h */ case    4:  		/* mr R9, R24 */
		/* 821277B4h case    4:*/		regs.R9 = regs.R24;
		/* 821277B4h case    4:*/		return 0x821277B8;
		  /* 821277B8h */ case    5:  		/* li R8, 1 */
		/* 821277B8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821277B8h case    5:*/		return 0x821277BC;
		  /* 821277BCh */ case    6:  		/* li R7, 0 */
		/* 821277BCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821277BCh case    6:*/		return 0x821277C0;
		  /* 821277C0h */ case    7:  		/* li R6, 0 */
		/* 821277C0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821277C0h case    7:*/		return 0x821277C4;
		  /* 821277C4h */ case    8:  		/* li R5, 34 */
		/* 821277C4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x22);
		/* 821277C4h case    8:*/		return 0x821277C8;
		  /* 821277C8h */ case    9:  		/* li R4, 0 */
		/* 821277C8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821277C8h case    9:*/		return 0x821277CC;
		  /* 821277CCh */ case   10:  		/* bl -374852 */
		/* 821277CCh case   10:*/		regs.LR = 0x821277D0; return 0x820CBF88;
		/* 821277CCh case   10:*/		return 0x821277D0;
		  /* 821277D0h */ case   11:  		/* mr R30, R3 */
		/* 821277D0h case   11:*/		regs.R30 = regs.R3;
		/* 821277D0h case   11:*/		return 0x821277D4;
		  /* 821277D4h */ case   12:  		/* b 8 */
		/* 821277D4h case   12:*/		return 0x821277DC;
		/* 821277D4h case   12:*/		return 0x821277D8;
	}
	return 0x821277D8;
} // Block from 821277A4h-821277D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821277D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821277D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821277D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821277D8);
		  /* 821277D8h */ case    0:  		/* li R30, 0 */
		/* 821277D8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821277D8h case    0:*/		return 0x821277DC;
	}
	return 0x821277DC;
} // Block from 821277D8h-821277DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821277DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821277DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821277DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821277DC);
		  /* 821277DCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821277DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821277DCh case    0:*/		return 0x821277E0;
		  /* 821277E0h */ case    1:  		/* bc 12, CR6_EQ, -148 */
		/* 821277E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 821277E0h case    1:*/		return 0x821277E4;
		  /* 821277E4h */ case    2:  		/* li R3, 40 */
		/* 821277E4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821277E4h case    2:*/		return 0x821277E8;
		  /* 821277E8h */ case    3:  		/* bl -386496 */
		/* 821277E8h case    3:*/		regs.LR = 0x821277EC; return 0x820C9228;
		/* 821277E8h case    3:*/		return 0x821277EC;
		  /* 821277ECh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821277ECh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821277ECh case    4:*/		return 0x821277F0;
		  /* 821277F0h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821277F0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82127814;  }
		/* 821277F0h case    5:*/		return 0x821277F4;
		  /* 821277F4h */ case    6:  		/* li R9, 512 */
		/* 821277F4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 821277F4h case    6:*/		return 0x821277F8;
		  /* 821277F8h */ case    7:  		/* li R8, 1 */
		/* 821277F8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821277F8h case    7:*/		return 0x821277FC;
		  /* 821277FCh */ case    8:  		/* li R7, 1 */
		/* 821277FCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821277FCh case    8:*/		return 0x82127800;
		  /* 82127800h */ case    9:  		/* li R6, 0 */
		/* 82127800h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127800h case    9:*/		return 0x82127804;
		  /* 82127804h */ case   10:  		/* mr R5, R28 */
		/* 82127804h case   10:*/		regs.R5 = regs.R28;
		/* 82127804h case   10:*/		return 0x82127808;
		  /* 82127808h */ case   11:  		/* li R4, 3 */
		/* 82127808h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82127808h case   11:*/		return 0x8212780C;
		  /* 8212780Ch */ case   12:  		/* bl -379788 */
		/* 8212780Ch case   12:*/		regs.LR = 0x82127810; return 0x820CAC80;
		/* 8212780Ch case   12:*/		return 0x82127810;
		  /* 82127810h */ case   13:  		/* b 8 */
		/* 82127810h case   13:*/		return 0x82127818;
		/* 82127810h case   13:*/		return 0x82127814;
	}
	return 0x82127814;
} // Block from 821277DCh-82127814h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82127814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127814);
		  /* 82127814h */ case    0:  		/* li R3, 0 */
		/* 82127814h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82127814h case    0:*/		return 0x82127818;
	}
	return 0x82127818;
} // Block from 82127814h-82127818h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127818);
		  /* 82127818h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 82127818h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82127818h case    0:*/		return 0x8212781C;
		  /* 8212781Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8212781Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212781Ch case    1:*/		return 0x82127820;
		  /* 82127820h */ case    2:  		/* bc 12, CR6_EQ, -212 */
		/* 82127820h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127820h case    2:*/		return 0x82127824;
		  /* 82127824h */ case    3:  		/* mr R3, R29 */
		/* 82127824h case    3:*/		regs.R3 = regs.R29;
		/* 82127824h case    3:*/		return 0x82127828;
		  /* 82127828h */ case    4:  		/* bl -386240 */
		/* 82127828h case    4:*/		regs.LR = 0x8212782C; return 0x820C9368;
		/* 82127828h case    4:*/		return 0x8212782C;
		  /* 8212782Ch */ case    5:  		/* stw R3, <#[R30 + 32]> */
		/* 8212782Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8212782Ch case    5:*/		return 0x82127830;
		  /* 82127830h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82127830h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127830h case    6:*/		return 0x82127834;
		  /* 82127834h */ case    7:  		/* bc 12, CR0_EQ, -232 */
		/* 82127834h case    7:*/		if ( regs.CR[0].eq ) { return 0x8212774C;  }
		/* 82127834h case    7:*/		return 0x82127838;
		  /* 82127838h */ case    8:  		/* li R6, 1 */
		/* 82127838h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82127838h case    8:*/		return 0x8212783C;
		  /* 8212783Ch */ case    9:  		/* mr R5, R26 */
		/* 8212783Ch case    9:*/		regs.R5 = regs.R26;
		/* 8212783Ch case    9:*/		return 0x82127840;
		  /* 82127840h */ case   10:  		/* mr R4, R27 */
		/* 82127840h case   10:*/		regs.R4 = regs.R27;
		/* 82127840h case   10:*/		return 0x82127844;
		  /* 82127844h */ case   11:  		/* mr R3, R23 */
		/* 82127844h case   11:*/		regs.R3 = regs.R23;
		/* 82127844h case   11:*/		return 0x82127848;
		  /* 82127848h */ case   12:  		/* bl -3536 */
		/* 82127848h case   12:*/		regs.LR = 0x8212784C; return 0x82126A78;
		/* 82127848h case   12:*/		return 0x8212784C;
		  /* 8212784Ch */ case   13:  		/* stw R3, <#[R30 + 36]> */
		/* 8212784Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 8212784Ch case   13:*/		return 0x82127850;
		  /* 82127850h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 82127850h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127850h case   14:*/		return 0x82127854;
		  /* 82127854h */ case   15:  		/* bc 12, CR0_EQ, -264 */
		/* 82127854h case   15:*/		if ( regs.CR[0].eq ) { return 0x8212774C;  }
		/* 82127854h case   15:*/		return 0x82127858;
		  /* 82127858h */ case   16:  		/* stw R25, <#[R30 + 44]> */
		/* 82127858h case   16:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x0000002C) );
		/* 82127858h case   16:*/		return 0x8212785C;
		  /* 8212785Ch */ case   17:  		/* li R3, 88 */
		/* 8212785Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8212785Ch case   17:*/		return 0x82127860;
		  /* 82127860h */ case   18:  		/* bl -386616 */
		/* 82127860h case   18:*/		regs.LR = 0x82127864; return 0x820C9228;
		/* 82127860h case   18:*/		return 0x82127864;
		  /* 82127864h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 82127864h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127864h case   19:*/		return 0x82127868;
		  /* 82127868h */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 82127868h case   20:*/		if ( regs.CR[0].eq ) { return 0x82127890;  }
		/* 82127868h case   20:*/		return 0x8212786C;
		  /* 8212786Ch */ case   21:  		/* mr R9, R24 */
		/* 8212786Ch case   21:*/		regs.R9 = regs.R24;
		/* 8212786Ch case   21:*/		return 0x82127870;
		  /* 82127870h */ case   22:  		/* li R8, 1 */
		/* 82127870h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82127870h case   22:*/		return 0x82127874;
		  /* 82127874h */ case   23:  		/* li R7, 0 */
		/* 82127874h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127874h case   23:*/		return 0x82127878;
		  /* 82127878h */ case   24:  		/* li R6, 0 */
		/* 82127878h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127878h case   24:*/		return 0x8212787C;
		  /* 8212787Ch */ case   25:  		/* li R5, 0 */
		/* 8212787Ch case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212787Ch case   25:*/		return 0x82127880;
		  /* 82127880h */ case   26:  		/* li R4, 0 */
		/* 82127880h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127880h case   26:*/		return 0x82127884;
		  /* 82127884h */ case   27:  		/* bl -375036 */
		/* 82127884h case   27:*/		regs.LR = 0x82127888; return 0x820CBF88;
		/* 82127884h case   27:*/		return 0x82127888;
		  /* 82127888h */ case   28:  		/* mr R31, R3 */
		/* 82127888h case   28:*/		regs.R31 = regs.R3;
		/* 82127888h case   28:*/		return 0x8212788C;
		  /* 8212788Ch */ case   29:  		/* b 8 */
		/* 8212788Ch case   29:*/		return 0x82127894;
		/* 8212788Ch case   29:*/		return 0x82127890;
	}
	return 0x82127890;
} // Block from 82127818h-82127890h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82127890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127890);
		  /* 82127890h */ case    0:  		/* li R31, 0 */
		/* 82127890h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82127890h case    0:*/		return 0x82127894;
	}
	return 0x82127894;
} // Block from 82127890h-82127894h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127894);
		  /* 82127894h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82127894h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82127894h case    0:*/		return 0x82127898;
		  /* 82127898h */ case    1:  		/* bc 12, CR6_EQ, -332 */
		/* 82127898h case    1:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127898h case    1:*/		return 0x8212789C;
		  /* 8212789Ch */ case    2:  		/* li R3, 40 */
		/* 8212789Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212789Ch case    2:*/		return 0x821278A0;
		  /* 821278A0h */ case    3:  		/* bl -386680 */
		/* 821278A0h case    3:*/		regs.LR = 0x821278A4; return 0x820C9228;
		/* 821278A0h case    3:*/		return 0x821278A4;
		  /* 821278A4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821278A4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821278A4h case    4:*/		return 0x821278A8;
		  /* 821278A8h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821278A8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821278CC;  }
		/* 821278A8h case    5:*/		return 0x821278AC;
		  /* 821278ACh */ case    6:  		/* li R9, 512 */
		/* 821278ACh case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 821278ACh case    6:*/		return 0x821278B0;
		  /* 821278B0h */ case    7:  		/* li R8, 1 */
		/* 821278B0h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821278B0h case    7:*/		return 0x821278B4;
		  /* 821278B4h */ case    8:  		/* li R7, 1 */
		/* 821278B4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821278B4h case    8:*/		return 0x821278B8;
		  /* 821278B8h */ case    9:  		/* li R6, 0 */
		/* 821278B8h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821278B8h case    9:*/		return 0x821278BC;
		  /* 821278BCh */ case   10:  		/* mr R5, R28 */
		/* 821278BCh case   10:*/		regs.R5 = regs.R28;
		/* 821278BCh case   10:*/		return 0x821278C0;
		  /* 821278C0h */ case   11:  		/* li R4, 3 */
		/* 821278C0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821278C0h case   11:*/		return 0x821278C4;
		  /* 821278C4h */ case   12:  		/* bl -379972 */
		/* 821278C4h case   12:*/		regs.LR = 0x821278C8; return 0x820CAC80;
		/* 821278C4h case   12:*/		return 0x821278C8;
		  /* 821278C8h */ case   13:  		/* b 8 */
		/* 821278C8h case   13:*/		return 0x821278D0;
		/* 821278C8h case   13:*/		return 0x821278CC;
	}
	return 0x821278CC;
} // Block from 82127894h-821278CCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821278CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821278CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821278CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821278CC);
		  /* 821278CCh */ case    0:  		/* li R3, 0 */
		/* 821278CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821278CCh case    0:*/		return 0x821278D0;
	}
	return 0x821278D0;
} // Block from 821278CCh-821278D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821278D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821278D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821278D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821278D0);
		  /* 821278D0h */ case    0:  		/* stw R3, <#[R31 + 16]> */
		/* 821278D0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821278D0h case    0:*/		return 0x821278D4;
		  /* 821278D4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 821278D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821278D4h case    1:*/		return 0x821278D8;
		  /* 821278D8h */ case    2:  		/* bc 12, CR6_EQ, -396 */
		/* 821278D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 821278D8h case    2:*/		return 0x821278DC;
		  /* 821278DCh */ case    3:  		/* li R3, 20 */
		/* 821278DCh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821278DCh case    3:*/		return 0x821278E0;
		  /* 821278E0h */ case    4:  		/* bl -386744 */
		/* 821278E0h case    4:*/		regs.LR = 0x821278E4; return 0x820C9228;
		/* 821278E0h case    4:*/		return 0x821278E4;
		  /* 821278E4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821278E4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821278E4h case    5:*/		return 0x821278E8;
		  /* 821278E8h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 821278E8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127904;  }
		/* 821278E8h case    6:*/		return 0x821278EC;
		  /* 821278ECh */ case    7:  		/* lis R11, -32253 */
		/* 821278ECh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821278ECh case    7:*/		return 0x821278F0;
		  /* 821278F0h */ case    8:  		/* li R5, 0 */
		/* 821278F0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821278F0h case    8:*/		return 0x821278F4;
		  /* 821278F4h */ case    9:  		/* addi R6, R11, 9184 */
		/* 821278F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 821278F4h case    9:*/		return 0x821278F8;
		  /* 821278F8h */ case   10:  		/* li R4, 0 */
		/* 821278F8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821278F8h case   10:*/		return 0x821278FC;
		  /* 821278FCh */ case   11:  		/* bl -386316 */
		/* 821278FCh case   11:*/		regs.LR = 0x82127900; return 0x820C93F0;
		/* 821278FCh case   11:*/		return 0x82127900;
		  /* 82127900h */ case   12:  		/* b 8 */
		/* 82127900h case   12:*/		return 0x82127908;
		/* 82127900h case   12:*/		return 0x82127904;
	}
	return 0x82127904;
} // Block from 821278D0h-82127904h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82127904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127904);
		  /* 82127904h */ case    0:  		/* li R3, 0 */
		/* 82127904h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82127904h case    0:*/		return 0x82127908;
	}
	return 0x82127908;
} // Block from 82127904h-82127908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127908);
		  /* 82127908h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82127908h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82127908h case    0:*/		return 0x8212790C;
		  /* 8212790Ch */ case    1:  		/* stw R3, <#[R31 + 32]> */
		/* 8212790Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8212790Ch case    1:*/		return 0x82127910;
		  /* 82127910h */ case    2:  		/* bc 12, CR6_EQ, -452 */
		/* 82127910h case    2:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127910h case    2:*/		return 0x82127914;
		  /* 82127914h */ case    3:  		/* li R3, 72 */
		/* 82127914h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82127914h case    3:*/		return 0x82127918;
		  /* 82127918h */ case    4:  		/* bl -386800 */
		/* 82127918h case    4:*/		regs.LR = 0x8212791C; return 0x820C9228;
		/* 82127918h case    4:*/		return 0x8212791C;
		  /* 8212791Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8212791Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212791Ch case    5:*/		return 0x82127920;
		  /* 82127920h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82127920h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127938;  }
		/* 82127920h case    6:*/		return 0x82127924;
		  /* 82127924h */ case    7:  		/* mr R6, R24 */
		/* 82127924h case    7:*/		regs.R6 = regs.R24;
		/* 82127924h case    7:*/		return 0x82127928;
		  /* 82127928h */ case    8:  		/* mr R5, R30 */
		/* 82127928h case    8:*/		regs.R5 = regs.R30;
		/* 82127928h case    8:*/		return 0x8212792C;
		  /* 8212792Ch */ case    9:  		/* li R4, 4 */
		/* 8212792Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8212792Ch case    9:*/		return 0x82127930;
		  /* 82127930h */ case   10:  		/* bl -374104 */
		/* 82127930h case   10:*/		regs.LR = 0x82127934; return 0x820CC3D8;
		/* 82127930h case   10:*/		return 0x82127934;
		  /* 82127934h */ case   11:  		/* b 8 */
		/* 82127934h case   11:*/		return 0x8212793C;
		/* 82127934h case   11:*/		return 0x82127938;
	}
	return 0x82127938;
} // Block from 82127908h-82127938h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82127938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127938);
		  /* 82127938h */ case    0:  		/* li R3, 0 */
		/* 82127938h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82127938h case    0:*/		return 0x8212793C;
	}
	return 0x8212793C;
} // Block from 82127938h-8212793Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212793Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212793C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212793C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212793C);
		  /* 8212793Ch */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 8212793Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8212793Ch case    0:*/		return 0x82127940;
		  /* 82127940h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82127940h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82127940h case    1:*/		return 0x82127944;
		  /* 82127944h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 82127944h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82127944h case    2:*/		return 0x82127948;
		  /* 82127948h */ case    3:  		/* bc 12, CR6_EQ, -508 */
		/* 82127948h case    3:*/		if ( regs.CR[6].eq ) { return 0x8212774C;  }
		/* 82127948h case    3:*/		return 0x8212794C;
		  /* 8212794Ch */ case    4:  		/* mr R4, R31 */
		/* 8212794Ch case    4:*/		regs.R4 = regs.R31;
		/* 8212794Ch case    4:*/		return 0x82127950;
		  /* 82127950h */ case    5:  		/* mr R3, R23 */
		/* 82127950h case    5:*/		regs.R3 = regs.R23;
		/* 82127950h case    5:*/		return 0x82127954;
		  /* 82127954h */ case    6:  		/* bl -47420 */
		/* 82127954h case    6:*/		regs.LR = 0x82127958; return 0x8211C018;
		/* 82127954h case    6:*/		return 0x82127958;
		  /* 82127958h */ case    7:  		/* mr R3, R31 */
		/* 82127958h case    7:*/		regs.R3 = regs.R31;
		/* 82127958h case    7:*/		return 0x8212795C;
		  /* 8212795Ch */ case    8:  		/* b -524 */
		/* 8212795Ch case    8:*/		return 0x82127750;
		/* 8212795Ch case    8:*/		return 0x82127960;
	}
	return 0x82127960;
} // Block from 8212793Ch-82127960h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82127960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127960);
		  /* 82127960h */ case    0:  		/* mfspr R12, LR */
		/* 82127960h case    0:*/		regs.R12 = regs.LR;
		/* 82127960h case    0:*/		return 0x82127964;
		  /* 82127964h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82127964h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82127964h case    1:*/		return 0x82127968;
		  /* 82127968h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82127968h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82127968h case    2:*/		return 0x8212796C;
		  /* 8212796Ch */ case    3:  		/* mr R9, R5 */
		/* 8212796Ch case    3:*/		regs.R9 = regs.R5;
		/* 8212796Ch case    3:*/		return 0x82127970;
		  /* 82127970h */ case    4:  		/* lwz R8, <#[R3 + 20]> */
		/* 82127970h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 82127970h case    4:*/		return 0x82127974;
		  /* 82127974h */ case    5:  		/* mr R10, R6 */
		/* 82127974h case    5:*/		regs.R10 = regs.R6;
		/* 82127974h case    5:*/		return 0x82127978;
		  /* 82127978h */ case    6:  		/* mr R5, R4 */
		/* 82127978h case    6:*/		regs.R5 = regs.R4;
		/* 82127978h case    6:*/		return 0x8212797C;
		  /* 8212797Ch */ case    7:  		/* li R11, 0 */
		/* 8212797Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8212797Ch case    7:*/		return 0x82127980;
		  /* 82127980h */ case    8:  		/* li R7, 0 */
		/* 82127980h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127980h case    8:*/		return 0x82127984;
		  /* 82127984h */ case    9:  		/* li R6, 0 */
		/* 82127984h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127984h case    9:*/		return 0x82127988;
		  /* 82127988h */ case   10:  		/* stw R11, <#[R1 + 84]> */
		/* 82127988h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82127988h case   10:*/		return 0x8212798C;
		  /* 8212798Ch */ case   11:  		/* li R4, 1 */
		/* 8212798Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212798Ch case   11:*/		return 0x82127990;
		  /* 82127990h */ case   12:  		/* bl -31032 */
		/* 82127990h case   12:*/		regs.LR = 0x82127994; return 0x82120058;
		/* 82127990h case   12:*/		return 0x82127994;
		  /* 82127994h */ case   13:  		/* addi R1, R1, 96 */
		/* 82127994h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82127994h case   13:*/		return 0x82127998;
		  /* 82127998h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 82127998h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82127998h case   14:*/		return 0x8212799C;
		  /* 8212799Ch */ case   15:  		/* mtspr LR, R12 */
		/* 8212799Ch case   15:*/		regs.LR = regs.R12;
		/* 8212799Ch case   15:*/		return 0x821279A0;
		  /* 821279A0h */ case   16:  		/* bclr 20, CR0_LT */
		/* 821279A0h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821279A0h case   16:*/		return 0x821279A4;
	}
	return 0x821279A4;
} // Block from 82127960h-821279A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821279A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821279A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821279A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821279A4);
		  /* 821279A4h */ case    0:  		/* nop */
		/* 821279A4h case    0:*/		cpu::op::nop();
		/* 821279A4h case    0:*/		return 0x821279A8;
	}
	return 0x821279A8;
} // Block from 821279A4h-821279A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821279A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821279A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821279A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821279A8);
		  /* 821279A8h */ case    0:  		/* mfspr R12, LR */
		/* 821279A8h case    0:*/		regs.R12 = regs.LR;
		/* 821279A8h case    0:*/		return 0x821279AC;
		  /* 821279ACh */ case    1:  		/* bl -616276 */
		/* 821279ACh case    1:*/		regs.LR = 0x821279B0; return 0x82091258;
		/* 821279ACh case    1:*/		return 0x821279B0;
		  /* 821279B0h */ case    2:  		/* stwu R1, <#[R1 - 320]> */
		/* 821279B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 821279B0h case    2:*/		return 0x821279B4;
		  /* 821279B4h */ case    3:  		/* li R28, 0 */
		/* 821279B4h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821279B4h case    3:*/		return 0x821279B8;
		  /* 821279B8h */ case    4:  		/* lwz R11, <#[R3 + 20]> */
		/* 821279B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821279B8h case    4:*/		return 0x821279BC;
		  /* 821279BCh */ case    5:  		/* mr R29, R3 */
		/* 821279BCh case    5:*/		regs.R29 = regs.R3;
		/* 821279BCh case    5:*/		return 0x821279C0;
		  /* 821279C0h */ case    6:  		/* mr R31, R4 */
		/* 821279C0h case    6:*/		regs.R31 = regs.R4;
		/* 821279C0h case    6:*/		return 0x821279C4;
		  /* 821279C4h */ case    7:  		/* stw R28, <#[R1 + 112]> */
		/* 821279C4h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 821279C4h case    7:*/		return 0x821279C8;
		  /* 821279C8h */ case    8:  		/* li R9, 1 */
		/* 821279C8h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821279C8h case    8:*/		return 0x821279CC;
		  /* 821279CCh */ case    9:  		/* b 36 */
		/* 821279CCh case    9:*/		return 0x821279F0;
		/* 821279CCh case    9:*/		return 0x821279D0;
		  /* 821279D0h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821279D0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821279D0h case   10:*/		return 0x821279D4;
		  /* 821279D4h */ case   11:  		/* cmpwi CR6, R10, 2 */
		/* 821279D4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 821279D4h case   11:*/		return 0x821279D8;
		  /* 821279D8h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 821279D8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821279FC;  }
		/* 821279D8h case   12:*/		return 0x821279DC;
		  /* 821279DCh */ case   13:  		/* cmpwi CR6, R10, 3 */
		/* 821279DCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821279DCh case   13:*/		return 0x821279E0;
		  /* 821279E0h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 821279E0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821279FC;  }
		/* 821279E0h case   14:*/		return 0x821279E4;
		  /* 821279E4h */ case   15:  		/* cmpwi CR6, R10, 4 */
		/* 821279E4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 821279E4h case   15:*/		return 0x821279E8;
		  /* 821279E8h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821279E8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821279FC;  }
		/* 821279E8h case   16:*/		return 0x821279EC;
		  /* 821279ECh */ case   17:  		/* lwz R11, <#[R11 + 32]> */
		/* 821279ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821279ECh case   17:*/		return 0x821279F0;
	}
	return 0x821279F0;
} // Block from 821279A8h-821279F0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821279F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821279F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821279F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821279F0);
		  /* 821279F0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821279F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821279F0h case    0:*/		return 0x821279F4;
		  /* 821279F4h */ case    1:  		/* bc 4, CR6_EQ, -36 */
		/* 821279F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821279D0;  }
		/* 821279F4h case    1:*/		return 0x821279F8;
		  /* 821279F8h */ case    2:  		/* b 8 */
		/* 821279F8h case    2:*/		return 0x82127A00;
		/* 821279F8h case    2:*/		return 0x821279FC;
	}
	return 0x821279FC;
} // Block from 821279F0h-821279FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821279FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821279FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821279FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821279FC);
		  /* 821279FCh */ case    0:  		/* mr R9, R28 */
		/* 821279FCh case    0:*/		regs.R9 = regs.R28;
		/* 821279FCh case    0:*/		return 0x82127A00;
	}
	return 0x82127A00;
} // Block from 821279FCh-82127A00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127A00);
		  /* 82127A00h */ case    0:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 82127A00h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 82127A00h case    0:*/		return 0x82127A04;
		  /* 82127A04h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 82127A04h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82127A68;  }
		/* 82127A04h case    1:*/		return 0x82127A08;
		  /* 82127A08h */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 82127A08h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82127A08h case    2:*/		return 0x82127A0C;
		  /* 82127A0Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82127A0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82127A2C;  }
		/* 82127A0Ch case    3:*/		return 0x82127A10;
		  /* 82127A10h */ case    4:  		/* lis R11, -32253 */
		/* 82127A10h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127A10h case    4:*/		return 0x82127A14;
		  /* 82127A14h */ case    5:  		/* li R5, 3064 */
		/* 82127A14h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xBF8);
		/* 82127A14h case    5:*/		return 0x82127A18;
		  /* 82127A18h */ case    6:  		/* addi R6, R11, 14428 */
		/* 82127A18h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x385C);
		/* 82127A18h case    6:*/		return 0x82127A1C;
		  /* 82127A1Ch */ case    7:  		/* addi R4, R29, 40 */
		/* 82127A1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x28);
		/* 82127A1Ch case    7:*/		return 0x82127A20;
		  /* 82127A20h */ case    8:  		/* mr R3, R29 */
		/* 82127A20h case    8:*/		regs.R3 = regs.R29;
		/* 82127A20h case    8:*/		return 0x82127A24;
		  /* 82127A24h */ case    9:  		/* bl -57732 */
		/* 82127A24h case    9:*/		regs.LR = 0x82127A28; return 0x821198A0;
		/* 82127A24h case    9:*/		return 0x82127A28;
		  /* 82127A28h */ case   10:  		/* b 336 */
		/* 82127A28h case   10:*/		return 0x82127B78;
		/* 82127A28h case   10:*/		return 0x82127A2C;
	}
	return 0x82127A2C;
} // Block from 82127A00h-82127A2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82127A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127A2C);
		  /* 82127A2Ch */ case    0:  		/* stw R28, <#[R1 + 116]> */
		/* 82127A2Ch case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 82127A2Ch case    0:*/		return 0x82127A30;
		  /* 82127A30h */ case    1:  		/* lis R12, 26 */
		/* 82127A30h case    1:*/		cpu::op::lis<0>(regs,&regs.R12,0x1A);
		/* 82127A30h case    1:*/		return 0x82127A34;
		  /* 82127A34h */ case    2:  		/* lwz R10, <#[R29]> */
		/* 82127A34h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82127A34h case    2:*/		return 0x82127A38;
		  /* 82127A38h */ case    3:  		/* lis R11, -32238 */
		/* 82127A38h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8212);
		/* 82127A38h case    3:*/		return 0x82127A3C;
		  /* 82127A3Ch */ case    4:  		/* ori R12, R12, 3 */
		/* 82127A3Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x3);
		/* 82127A3Ch case    4:*/		return 0x82127A40;
		  /* 82127A40h */ case    5:  		/* lwz R3, <#[R29 + 4]> */
		/* 82127A40h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 82127A40h case    5:*/		return 0x82127A44;
		  /* 82127A44h */ case    6:  		/* mr R6, R29 */
		/* 82127A44h case    6:*/		regs.R6 = regs.R29;
		/* 82127A44h case    6:*/		return 0x82127A48;
		  /* 82127A48h */ case    7:  		/* addi R7, R11, 31072 */
		/* 82127A48h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x7960);
		/* 82127A48h case    7:*/		return 0x82127A4C;
		  /* 82127A4Ch */ case    8:  		/* addi R5, R1, 116 */
		/* 82127A4Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 82127A4Ch case    8:*/		return 0x82127A50;
		  /* 82127A50h */ case    9:  		/* and R4, R10, R12 */
		/* 82127A50h case    9:*/		cpu::op::and<0>(regs,&regs.R4,regs.R10,regs.R12);
		/* 82127A50h case    9:*/		return 0x82127A54;
		  /* 82127A54h */ case   10:  		/* bl -324204 */
		/* 82127A54h case   10:*/		regs.LR = 0x82127A58; return 0x820D87E8;
		/* 82127A54h case   10:*/		return 0x82127A58;
		  /* 82127A58h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82127A58h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82127A58h case   11:*/		return 0x82127A5C;
		  /* 82127A5Ch */ case   12:  		/* bc 12, CR0_LT, 284 */
		/* 82127A5Ch case   12:*/		if ( regs.CR[0].lt ) { return 0x82127B78;  }
		/* 82127A5Ch case   12:*/		return 0x82127A60;
		  /* 82127A60h */ case   13:  		/* lwz R3, <#[R1 + 116]> */
		/* 82127A60h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 82127A60h case   13:*/		return 0x82127A64;
		  /* 82127A64h */ case   14:  		/* b 332 */
		/* 82127A64h case   14:*/		return 0x82127BB0;
		/* 82127A64h case   14:*/		return 0x82127A68;
	}
	return 0x82127A68;
} // Block from 82127A2Ch-82127A68h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82127A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127A68);
		  /* 82127A68h */ case    0:  		/* li R4, 0 */
		/* 82127A68h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127A68h case    0:*/		return 0x82127A6C;
		  /* 82127A6Ch */ case    1:  		/* addi R3, R1, 128 */
		/* 82127A6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82127A6Ch case    1:*/		return 0x82127A70;
		  /* 82127A70h */ case    2:  		/* bl -519616 */
		/* 82127A70h case    2:*/		regs.LR = 0x82127A74; return 0x820A8CB0;
		/* 82127A70h case    2:*/		return 0x82127A74;
		  /* 82127A74h */ case    3:  		/* cmpwi CR6, R31, 0 */
		/* 82127A74h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82127A74h case    3:*/		return 0x82127A78;
		  /* 82127A78h */ case    4:  		/* bc 4, CR6_EQ, 164 */
		/* 82127A78h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82127B1C;  }
		/* 82127A78h case    4:*/		return 0x82127A7C;
		  /* 82127A7Ch */ case    5:  		/* lis R12, 26 */
		/* 82127A7Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0x1A);
		/* 82127A7Ch case    5:*/		return 0x82127A80;
		  /* 82127A80h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 82127A80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82127A80h case    6:*/		return 0x82127A84;
		  /* 82127A84h */ case    7:  		/* li R8, 0 */
		/* 82127A84h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82127A84h case    7:*/		return 0x82127A88;
		  /* 82127A88h */ case    8:  		/* lwz R4, <#[R29 + 4]> */
		/* 82127A88h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		/* 82127A88h case    8:*/		return 0x82127A8C;
		  /* 82127A8Ch */ case    9:  		/* ori R12, R12, 3 */
		/* 82127A8Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x3);
		/* 82127A8Ch case    9:*/		return 0x82127A90;
		  /* 82127A90h */ case   10:  		/* addi R7, R1, 112 */
		/* 82127A90h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82127A90h case   10:*/		return 0x82127A94;
		  /* 82127A94h */ case   11:  		/* li R6, 0 */
		/* 82127A94h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127A94h case   11:*/		return 0x82127A98;
		  /* 82127A98h */ case   12:  		/* and R5, R11, R12 */
		/* 82127A98h case   12:*/		cpu::op::and<0>(regs,&regs.R5,regs.R11,regs.R12);
		/* 82127A98h case   12:*/		return 0x82127A9C;
		  /* 82127A9Ch */ case   13:  		/* addi R3, R1, 128 */
		/* 82127A9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82127A9Ch case   13:*/		return 0x82127AA0;
		  /* 82127AA0h */ case   14:  		/* bl -499080 */
		/* 82127AA0h case   14:*/		regs.LR = 0x82127AA4; return 0x820ADD18;
		/* 82127AA0h case   14:*/		return 0x82127AA4;
		  /* 82127AA4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82127AA4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82127AA4h case   15:*/		return 0x82127AA8;
		  /* 82127AA8h */ case   16:  		/* bc 12, CR0_LT, 200 */
		/* 82127AA8h case   16:*/		if ( regs.CR[0].lt ) { return 0x82127B70;  }
		/* 82127AA8h case   16:*/		return 0x82127AAC;
		  /* 82127AACh */ case   17:  		/* lwz R3, <#[R1 + 112]> */
		/* 82127AACh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 82127AACh case   17:*/		return 0x82127AB0;
		  /* 82127AB0h */ case   18:  		/* lwz R11, <#[R3]> */
		/* 82127AB0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82127AB0h case   18:*/		return 0x82127AB4;
		  /* 82127AB4h */ case   19:  		/* lwz R11, <#[R11 + 16]> */
		/* 82127AB4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82127AB4h case   19:*/		return 0x82127AB8;
		  /* 82127AB8h */ case   20:  		/* mtspr CTR, R11 */
		/* 82127AB8h case   20:*/		regs.CTR = regs.R11;
		/* 82127AB8h case   20:*/		return 0x82127ABC;
		  /* 82127ABCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 82127ABCh case   21:*/		if ( 1 ) { regs.LR = 0x82127AC0; return (uint32)regs.CTR; }
		/* 82127ABCh case   21:*/		return 0x82127AC0;
		  /* 82127AC0h */ case   22:  		/* li R4, 1 */
		/* 82127AC0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82127AC0h case   22:*/		return 0x82127AC4;
		  /* 82127AC4h */ case   23:  		/* mr R31, R3 */
		/* 82127AC4h case   23:*/		regs.R31 = regs.R3;
		/* 82127AC4h case   23:*/		return 0x82127AC8;
		  /* 82127AC8h */ case   24:  		/* bl -387304 */
		/* 82127AC8h case   24:*/		regs.LR = 0x82127ACC; return 0x820C91E0;
		/* 82127AC8h case   24:*/		return 0x82127ACC;
		  /* 82127ACCh */ case   25:  		/* or. R30, R3, R3 */
		/* 82127ACCh case   25:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82127ACCh case   25:*/		return 0x82127AD0;
		  /* 82127AD0h */ case   26:  		/* bc 12, CR0_EQ, 160 */
		/* 82127AD0h case   26:*/		if ( regs.CR[0].eq ) { return 0x82127B70;  }
		/* 82127AD0h case   26:*/		return 0x82127AD4;
		  /* 82127AD4h */ case   27:  		/* lwz R3, <#[R1 + 112]> */
		/* 82127AD4h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 82127AD4h case   27:*/		return 0x82127AD8;
		  /* 82127AD8h */ case   28:  		/* lwz R11, <#[R3]> */
		/* 82127AD8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82127AD8h case   28:*/		return 0x82127ADC;
		  /* 82127ADCh */ case   29:  		/* lwz R11, <#[R11 + 12]> */
		/* 82127ADCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127ADCh case   29:*/		return 0x82127AE0;
		  /* 82127AE0h */ case   30:  		/* mtspr CTR, R11 */
		/* 82127AE0h case   30:*/		regs.CTR = regs.R11;
		/* 82127AE0h case   30:*/		return 0x82127AE4;
		  /* 82127AE4h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 82127AE4h case   31:*/		if ( 1 ) { regs.LR = 0x82127AE8; return (uint32)regs.CTR; }
		/* 82127AE4h case   31:*/		return 0x82127AE8;
		  /* 82127AE8h */ case   32:  		/* mr R4, R3 */
		/* 82127AE8h case   32:*/		regs.R4 = regs.R3;
		/* 82127AE8h case   32:*/		return 0x82127AEC;
		  /* 82127AECh */ case   33:  		/* mr R3, R30 */
		/* 82127AECh case   33:*/		regs.R3 = regs.R30;
		/* 82127AECh case   33:*/		return 0x82127AF0;
		  /* 82127AF0h */ case   34:  		/* mr R5, R31 */
		/* 82127AF0h case   34:*/		regs.R5 = regs.R31;
		/* 82127AF0h case   34:*/		return 0x82127AF4;
		  /* 82127AF4h */ case   35:  		/* bl -614724 */
		/* 82127AF4h case   35:*/		regs.LR = 0x82127AF8; return 0x820919B0;
		/* 82127AF4h case   35:*/		return 0x82127AF8;
		  /* 82127AF8h */ case   36:  		/* lwz R3, <#[R1 + 112]> */
		/* 82127AF8h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 82127AF8h case   36:*/		return 0x82127AFC;
		  /* 82127AFCh */ case   37:  		/* cmplwi CR6, R3, 0 */
		/* 82127AFCh case   37:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82127AFCh case   37:*/		return 0x82127B00;
		  /* 82127B00h */ case   38:  		/* bc 12, CR6_EQ, 60 */
		/* 82127B00h case   38:*/		if ( regs.CR[6].eq ) { return 0x82127B3C;  }
		/* 82127B00h case   38:*/		return 0x82127B04;
		  /* 82127B04h */ case   39:  		/* lwz R11, <#[R3]> */
		/* 82127B04h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82127B04h case   39:*/		return 0x82127B08;
		  /* 82127B08h */ case   40:  		/* lwz R11, <#[R11 + 8]> */
		/* 82127B08h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82127B08h case   40:*/		return 0x82127B0C;
		  /* 82127B0Ch */ case   41:  		/* mtspr CTR, R11 */
		/* 82127B0Ch case   41:*/		regs.CTR = regs.R11;
		/* 82127B0Ch case   41:*/		return 0x82127B10;
		  /* 82127B10h */ case   42:  		/* bcctrl 20, CR0_LT */
		/* 82127B10h case   42:*/		if ( 1 ) { regs.LR = 0x82127B14; return (uint32)regs.CTR; }
		/* 82127B10h case   42:*/		return 0x82127B14;
		  /* 82127B14h */ case   43:  		/* stw R28, <#[R1 + 112]> */
		/* 82127B14h case   43:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 82127B14h case   43:*/		return 0x82127B18;
		  /* 82127B18h */ case   44:  		/* b 36 */
		/* 82127B18h case   44:*/		return 0x82127B3C;
		/* 82127B18h case   44:*/		return 0x82127B1C;
	}
	return 0x82127B1C;
} // Block from 82127A68h-82127B1Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 82127B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B1C);
		  /* 82127B1Ch */ case    0:  		/* lis R11, -32253 */
		/* 82127B1Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82127B1Ch case    0:*/		return 0x82127B20;
		  /* 82127B20h */ case    1:  		/* li R5, 3201 */
		/* 82127B20h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC81);
		/* 82127B20h case    1:*/		return 0x82127B24;
		  /* 82127B24h */ case    2:  		/* addi R6, R11, 14380 */
		/* 82127B24h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x382C);
		/* 82127B24h case    2:*/		return 0x82127B28;
		  /* 82127B28h */ case    3:  		/* addi R4, R29, 40 */
		/* 82127B28h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x28);
		/* 82127B28h case    3:*/		return 0x82127B2C;
		  /* 82127B2Ch */ case    4:  		/* mr R3, R29 */
		/* 82127B2Ch case    4:*/		regs.R3 = regs.R29;
		/* 82127B2Ch case    4:*/		return 0x82127B30;
		  /* 82127B30h */ case    5:  		/* bl -57872 */
		/* 82127B30h case    5:*/		regs.LR = 0x82127B34; return 0x82119920;
		/* 82127B30h case    5:*/		return 0x82127B34;
		  /* 82127B34h */ case    6:  		/* mr R31, R28 */
		/* 82127B34h case    6:*/		regs.R31 = regs.R28;
		/* 82127B34h case    6:*/		return 0x82127B38;
		  /* 82127B38h */ case    7:  		/* mr R30, R28 */
		/* 82127B38h case    7:*/		regs.R30 = regs.R28;
		/* 82127B38h case    7:*/		return 0x82127B3C;
	}
	return 0x82127B3C;
} // Block from 82127B1Ch-82127B3Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82127B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B3C);
		  /* 82127B3Ch */ case    0:  		/* li R3, 64 */
		/* 82127B3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 82127B3Ch case    0:*/		return 0x82127B40;
		  /* 82127B40h */ case    1:  		/* bl -387352 */
		/* 82127B40h case    1:*/		regs.LR = 0x82127B44; return 0x820C9228;
		/* 82127B40h case    1:*/		return 0x82127B44;
		  /* 82127B44h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82127B44h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127B44h case    2:*/		return 0x82127B48;
		  /* 82127B48h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82127B48h case    3:*/		if ( regs.CR[0].eq ) { return 0x82127B64;  }
		/* 82127B48h case    3:*/		return 0x82127B4C;
		  /* 82127B4Ch */ case    4:  		/* mr R6, R31 */
		/* 82127B4Ch case    4:*/		regs.R6 = regs.R31;
		/* 82127B4Ch case    4:*/		return 0x82127B50;
		  /* 82127B50h */ case    5:  		/* mr R5, R30 */
		/* 82127B50h case    5:*/		regs.R5 = regs.R30;
		/* 82127B50h case    5:*/		return 0x82127B54;
		  /* 82127B54h */ case    6:  		/* addi R4, R29, 40 */
		/* 82127B54h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x28);
		/* 82127B54h case    6:*/		return 0x82127B58;
		  /* 82127B58h */ case    7:  		/* bl -373600 */
		/* 82127B58h case    7:*/		regs.LR = 0x82127B5C; return 0x820CC7F8;
		/* 82127B58h case    7:*/		return 0x82127B5C;
		  /* 82127B5Ch */ case    8:  		/* mr R31, R3 */
		/* 82127B5Ch case    8:*/		regs.R31 = regs.R3;
		/* 82127B5Ch case    8:*/		return 0x82127B60;
		  /* 82127B60h */ case    9:  		/* b 8 */
		/* 82127B60h case    9:*/		return 0x82127B68;
		/* 82127B60h case    9:*/		return 0x82127B64;
	}
	return 0x82127B64;
} // Block from 82127B3Ch-82127B64h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82127B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B64);
		  /* 82127B64h */ case    0:  		/* mr R31, R28 */
		/* 82127B64h case    0:*/		regs.R31 = regs.R28;
		/* 82127B64h case    0:*/		return 0x82127B68;
	}
	return 0x82127B68;
} // Block from 82127B64h-82127B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B68);
		  /* 82127B68h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82127B68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82127B68h case    0:*/		return 0x82127B6C;
		  /* 82127B6Ch */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82127B6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82127BA4;  }
		/* 82127B6Ch case    1:*/		return 0x82127B70;
	}
	return 0x82127B70;
} // Block from 82127B68h-82127B70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B70);
		  /* 82127B70h */ case    0:  		/* addi R3, R1, 128 */
		/* 82127B70h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82127B70h case    0:*/		return 0x82127B74;
		  /* 82127B74h */ case    1:  		/* bl -508308 */
		/* 82127B74h case    1:*/		regs.LR = 0x82127B78; return 0x820AB9E0;
		/* 82127B74h case    1:*/		return 0x82127B78;
	}
	return 0x82127B78;
} // Block from 82127B70h-82127B78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B78);
		  /* 82127B78h */ case    0:  		/* lwz R3, <#[R1 + 112]> */
		/* 82127B78h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 82127B78h case    0:*/		return 0x82127B7C;
		  /* 82127B7Ch */ case    1:  		/* li R11, 1 */
		/* 82127B7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82127B7Ch case    1:*/		return 0x82127B80;
		  /* 82127B80h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82127B80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82127B80h case    2:*/		return 0x82127B84;
		  /* 82127B84h */ case    3:  		/* stw R11, <#[R29 + 80]> */
		/* 82127B84h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000050) );
		/* 82127B84h case    3:*/		return 0x82127B88;
		  /* 82127B88h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82127B88h case    4:*/		if ( regs.CR[6].eq ) { return 0x82127B9C;  }
		/* 82127B88h case    4:*/		return 0x82127B8C;
		  /* 82127B8Ch */ case    5:  		/* lwz R11, <#[R3]> */
		/* 82127B8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82127B8Ch case    5:*/		return 0x82127B90;
		  /* 82127B90h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 82127B90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82127B90h case    6:*/		return 0x82127B94;
		  /* 82127B94h */ case    7:  		/* mtspr CTR, R11 */
		/* 82127B94h case    7:*/		regs.CTR = regs.R11;
		/* 82127B94h case    7:*/		return 0x82127B98;
		  /* 82127B98h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82127B98h case    8:*/		if ( 1 ) { regs.LR = 0x82127B9C; return (uint32)regs.CTR; }
		/* 82127B98h case    8:*/		return 0x82127B9C;
	}
	return 0x82127B9C;
} // Block from 82127B78h-82127B9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82127B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127B9C);
		  /* 82127B9Ch */ case    0:  		/* li R3, 0 */
		/* 82127B9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82127B9Ch case    0:*/		return 0x82127BA0;
		  /* 82127BA0h */ case    1:  		/* b 16 */
		/* 82127BA0h case    1:*/		return 0x82127BB0;
		/* 82127BA0h case    1:*/		return 0x82127BA4;
	}
	return 0x82127BA4;
} // Block from 82127B9Ch-82127BA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127BA4);
		  /* 82127BA4h */ case    0:  		/* addi R3, R1, 128 */
		/* 82127BA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82127BA4h case    0:*/		return 0x82127BA8;
		  /* 82127BA8h */ case    1:  		/* bl -508360 */
		/* 82127BA8h case    1:*/		regs.LR = 0x82127BAC; return 0x820AB9E0;
		/* 82127BA8h case    1:*/		return 0x82127BAC;
		  /* 82127BACh */ case    2:  		/* mr R3, R31 */
		/* 82127BACh case    2:*/		regs.R3 = regs.R31;
		/* 82127BACh case    2:*/		return 0x82127BB0;
	}
	return 0x82127BB0;
} // Block from 82127BA4h-82127BB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82127BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127BB0);
		  /* 82127BB0h */ case    0:  		/* addi R1, R1, 320 */
		/* 82127BB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 82127BB0h case    0:*/		return 0x82127BB4;
		  /* 82127BB4h */ case    1:  		/* b -616716 */
		/* 82127BB4h case    1:*/		return 0x820912A8;
		/* 82127BB4h case    1:*/		return 0x82127BB8;
	}
	return 0x82127BB8;
} // Block from 82127BB0h-82127BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82127BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127BB8);
		  /* 82127BB8h */ case    0:  		/* mfspr R12, LR */
		/* 82127BB8h case    0:*/		regs.R12 = regs.LR;
		/* 82127BB8h case    0:*/		return 0x82127BBC;
		  /* 82127BBCh */ case    1:  		/* bl -616816 */
		/* 82127BBCh case    1:*/		regs.LR = 0x82127BC0; return 0x8209124C;
		/* 82127BBCh case    1:*/		return 0x82127BC0;
		  /* 82127BC0h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 82127BC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 82127BC0h case    2:*/		return 0x82127BC4;
		  /* 82127BC4h */ case    3:  		/* li R25, 0 */
		/* 82127BC4h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82127BC4h case    3:*/		return 0x82127BC8;
		  /* 82127BC8h */ case    4:  		/* mr R28, R3 */
		/* 82127BC8h case    4:*/		regs.R28 = regs.R3;
		/* 82127BC8h case    4:*/		return 0x82127BCC;
		  /* 82127BCCh */ case    5:  		/* mr R27, R4 */
		/* 82127BCCh case    5:*/		regs.R27 = regs.R4;
		/* 82127BCCh case    5:*/		return 0x82127BD0;
		  /* 82127BD0h */ case    6:  		/* stw R25, <#[R1 + 128]> */
		/* 82127BD0h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000080) );
		/* 82127BD0h case    6:*/		return 0x82127BD4;
		  /* 82127BD4h */ case    7:  		/* mr R30, R5 */
		/* 82127BD4h case    7:*/		regs.R30 = regs.R5;
		/* 82127BD4h case    7:*/		return 0x82127BD8;
		  /* 82127BD8h */ case    8:  		/* li R26, 1 */
		/* 82127BD8h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82127BD8h case    8:*/		return 0x82127BDC;
		  /* 82127BDCh */ case    9:  		/* mr R31, R25 */
		/* 82127BDCh case    9:*/		regs.R31 = regs.R25;
		/* 82127BDCh case    9:*/		return 0x82127BE0;
		  /* 82127BE0h */ case   10:  		/* cmplwi CR6, R5, 16 */
		/* 82127BE0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 82127BE0h case   10:*/		return 0x82127BE4;
		  /* 82127BE4h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82127BE4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82127BEC;  }
		/* 82127BE4h case   11:*/		return 0x82127BE8;
		  /* 82127BE8h */ case   12:  		/* stw R26, <#[R3 + 80]> */
		/* 82127BE8h case   12:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000050) );
		/* 82127BE8h case   12:*/		return 0x82127BEC;
	}
	return 0x82127BEC;
} // Block from 82127BB8h-82127BECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82127BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127BEC);
		  /* 82127BECh */ case    0:  		/* lwz R11, <#[R28 + 80]> */
		/* 82127BECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000050) );
		/* 82127BECh case    0:*/		return 0x82127BF0;
		  /* 82127BF0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82127BF0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82127BF0h case    1:*/		return 0x82127BF4;
		  /* 82127BF4h */ case    2:  		/* bc 4, CR6_EQ, 1812 */
		/* 82127BF4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82128308;  }
		/* 82127BF4h case    2:*/		return 0x82127BF8;
		  /* 82127BF8h */ case    3:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 82127BF8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 82127BF8h case    3:*/		return 0x82127BFC;
		  /* 82127BFCh */ case    4:  		/* addi R11, R1, 176 */
		/* 82127BFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 82127BFCh case    4:*/		return 0x82127C00;
		  /* 82127C00h */ case    5:  		/* subfic R9, R30, 16 */
		/* 82127C00h case    5:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R30,0x10);
		/* 82127C00h case    5:*/		return 0x82127C04;
		  /* 82127C04h */ case    6:  		/* add R29, R10, R11 */
		/* 82127C04h case    6:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82127C04h case    6:*/		return 0x82127C08;
		  /* 82127C08h */ case    7:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 82127C08h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 82127C08h case    7:*/		return 0x82127C0C;
		  /* 82127C0Ch */ case    8:  		/* li R4, 0 */
		/* 82127C0Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127C0Ch case    8:*/		return 0x82127C10;
		  /* 82127C10h */ case    9:  		/* mr R3, R29 */
		/* 82127C10h case    9:*/		regs.R3 = regs.R29;
		/* 82127C10h case    9:*/		return 0x82127C14;
		  /* 82127C14h */ case   10:  		/* bl -616660 */
		/* 82127C14h case   10:*/		regs.LR = 0x82127C18; return 0x82091340;
		/* 82127C14h case   10:*/		return 0x82127C18;
		  /* 82127C18h */ case   11:  		/* mr R10, R30 */
		/* 82127C18h case   11:*/		regs.R10 = regs.R30;
		/* 82127C18h case   11:*/		return 0x82127C1C;
		  /* 82127C1Ch */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 82127C1Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82127C1Ch case   12:*/		return 0x82127C20;
		  /* 82127C20h */ case   13:  		/* bc 12, CR6_EQ, 68 */
		/* 82127C20h case   13:*/		if ( regs.CR[6].eq ) { return 0x82127C64;  }
		/* 82127C20h case   13:*/		return 0x82127C24;
		  /* 82127C24h */ case   14:  		/* mr R9, R29 */
		/* 82127C24h case   14:*/		regs.R9 = regs.R29;
		/* 82127C24h case   14:*/		return 0x82127C28;
		  /* 82127C28h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 82127C28h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82127C28h case   15:*/		return 0x82127C2C;
		  /* 82127C2Ch */ case   16:  		/* addi R10, R10, -1 */
		/* 82127C2Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82127C2Ch case   16:*/		return 0x82127C30;
	}
	return 0x82127C30;
} // Block from 82127BECh-82127C30h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82127C30h
// Function '?MethodExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127C30);
		  /* 82127C30h */ case    0:  		/* addi R9, R9, -4 */
		/* 82127C30h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 82127C30h case    0:*/		return 0x82127C34;
		  /* 82127C34h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82127C34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127C34h case    1:*/		return 0x82127C38;
		  /* 82127C38h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 82127C38h case    2:*/		if ( regs.CR[6].eq ) { return 0x82127C94;  }
		/* 82127C38h case    2:*/		return 0x82127C3C;
		  /* 82127C3Ch */ case    3:  		/* lwz R8, <#[R11 + 8]> */
		/* 82127C3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82127C3Ch case    3:*/		return 0x82127C40;
		  /* 82127C40h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82127C40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82127C40h case    4:*/		return 0x82127C44;
		  /* 82127C44h */ case    5:  		/* stw R8, <#[R9]> */
		/* 82127C44h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82127C44h case    5:*/		return 0x82127C48;
		  /* 82127C48h */ case    6:  		/* lwz R8, <#[R11 + 12]> */
		/* 82127C48h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127C48h case    6:*/		return 0x82127C4C;
		  /* 82127C4Ch */ case    7:  		/* stw R8, <#[R28 + 8]> */
		/* 82127C4Ch case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R28 + 0x00000008) );
		/* 82127C4Ch case    7:*/		return 0x82127C50;
		  /* 82127C50h */ case    8:  		/* stw R25, <#[R11 + 8]> */
		/* 82127C50h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 82127C50h case    8:*/		return 0x82127C54;
		  /* 82127C54h */ case    9:  		/* lwz R8, <#[R28 + 12]> */
		/* 82127C54h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x0000000C) );
		/* 82127C54h case    9:*/		return 0x82127C58;
		  /* 82127C58h */ case   10:  		/* stw R8, <#[R11 + 12]> */
		/* 82127C58h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127C58h case   10:*/		return 0x82127C5C;
		  /* 82127C5Ch */ case   11:  		/* stw R11, <#[R28 + 12]> */
		/* 82127C5Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 82127C5Ch case   11:*/		return 0x82127C60;
		  /* 82127C60h */ case   12:  		/* bc 4, CR6_EQ, -56 */
		/* 82127C60h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82127C28;  }
		/* 82127C60h case   12:*/		return 0x82127C64;
	}
	return 0x82127C64;
} // Block from 82127C30h-82127C64h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82127C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127C64);
		  /* 82127C64h */ case    0:  		/* cmplwi CR6, R27, 439 */
		/* 82127C64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x000001B7);
		/* 82127C64h case    0:*/		return 0x82127C68;
		  /* 82127C68h */ case    1:  		/* bc 12, CR6_GT, 9192 */
		/* 82127C68h case    1:*/		if ( regs.CR[6].gt ) { return 0x8212A050;  }
		/* 82127C68h case    1:*/		return 0x82127C6C;
		  /* 82127C6Ch */ case    2:  		/* lis R12, -32253 */
		/* 82127C6Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82127C6Ch case    2:*/		return 0x82127C70;
		  /* 82127C70h */ case    3:  		/* rlwinm R0, R27, 1, 0, 30 */
		/* 82127C70h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R27);
		/* 82127C70h case    3:*/		return 0x82127C74;
		  /* 82127C74h */ case    4:  		/* addi R12, R12, 5760 */
		/* 82127C74h case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1680);
		/* 82127C74h case    4:*/		return 0x82127C78;
		  /* 82127C78h */ case    5:  		/* lhzx R0, <#[R12 + R0]> */
		/* 82127C78h case    5:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 82127C78h case    5:*/		return 0x82127C7C;
		  /* 82127C7Ch */ case    6:  		/* lis R12, -32238 */
		/* 82127C7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 82127C7Ch case    6:*/		return 0x82127C80;
		  /* 82127C80h */ case    7:  		/* addi R12, R12, 31892 */
		/* 82127C80h case    7:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x7C94);
		/* 82127C80h case    7:*/		return 0x82127C84;
		  /* 82127C84h */ case    8:  		/* ori R0, R0, 0 */
		/* 82127C84h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82127C84h case    8:*/		return 0x82127C88;
		  /* 82127C88h */ case    9:  		/* add R12, R12, R0 */
		/* 82127C88h case    9:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82127C88h case    9:*/		return 0x82127C8C;
		  /* 82127C8Ch */ case   10:  		/* mtspr CTR, R12 */
		/* 82127C8Ch case   10:*/		regs.CTR = regs.R12;
		/* 82127C8Ch case   10:*/		return 0x82127C90;
		  /* 82127C90h */ case   11:  		/* bcctr 20, CR0_LT */
		/* 82127C90h case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82127C90h case   11:*/		return 0x82127C94;
	}
	return 0x82127C94;
} // Block from 82127C64h-82127C94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82127C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127C94);
		  /* 82127C94h */ case    0:  		/* lis R11, -32255 */
		/* 82127C94h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82127C94h case    0:*/		return 0x82127C98;
		  /* 82127C98h */ case    1:  		/* addi R6, R11, -9956 */
		/* 82127C98h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD91C);
		/* 82127C98h case    1:*/		return 0x82127C9C;
		  /* 82127C9Ch */ case    2:  		/* li R5, 0 */
		/* 82127C9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127C9Ch case    2:*/		return 0x82127CA0;
		  /* 82127CA0h */ case    3:  		/* li R4, 0 */
		/* 82127CA0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127CA0h case    3:*/		return 0x82127CA4;
		  /* 82127CA4h */ case    4:  		/* mr R3, R28 */
		/* 82127CA4h case    4:*/		regs.R3 = regs.R28;
		/* 82127CA4h case    4:*/		return 0x82127CA8;
		  /* 82127CA8h */ case    5:  		/* bl -58128 */
		/* 82127CA8h case    5:*/		regs.LR = 0x82127CAC; return 0x82119998;
		/* 82127CA8h case    5:*/		return 0x82127CAC;
		  /* 82127CACh */ case    6:  		/* b 1628 */
		/* 82127CACh case    6:*/		return 0x82128308;
		/* 82127CACh case    6:*/		return 0x82127CB0;
		  /* 82127CB0h */ case    7:  		/* li R3, 44 */
		/* 82127CB0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x2C);
		/* 82127CB0h case    7:*/		return 0x82127CB4;
		  /* 82127CB4h */ case    8:  		/* bl -387724 */
		/* 82127CB4h case    8:*/		regs.LR = 0x82127CB8; return 0x820C9228;
		/* 82127CB4h case    8:*/		return 0x82127CB8;
		  /* 82127CB8h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82127CB8h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127CB8h case    9:*/		return 0x82127CBC;
		  /* 82127CBCh */ case   10:  		/* bc 12, CR0_EQ, 44 */
		/* 82127CBCh case   10:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82127CBCh case   10:*/		return 0x82127CC0;
		  /* 82127CC0h */ case   11:  		/* li R10, 0 */
		/* 82127CC0h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82127CC0h case   11:*/		return 0x82127CC4;
		  /* 82127CC4h */ case   12:  		/* li R9, 0 */
		/* 82127CC4h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82127CC4h case   12:*/		return 0x82127CC8;
		  /* 82127CC8h */ case   13:  		/* li R8, 0 */
		/* 82127CC8h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82127CC8h case   13:*/		return 0x82127CCC;
		  /* 82127CCCh */ case   14:  		/* li R7, 0 */
		/* 82127CCCh case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127CCCh case   14:*/		return 0x82127CD0;
		  /* 82127CD0h */ case   15:  		/* li R6, 0 */
		/* 82127CD0h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127CD0h case   15:*/		return 0x82127CD4;
		  /* 82127CD4h */ case   16:  		/* li R5, 0 */
		/* 82127CD4h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127CD4h case   16:*/		return 0x82127CD8;
		  /* 82127CD8h */ case   17:  		/* li R4, 0 */
		/* 82127CD8h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127CD8h case   17:*/		return 0x82127CDC;
		  /* 82127CDCh */ case   18:  		/* bl -385836 */
		/* 82127CDCh case   18:*/		regs.LR = 0x82127CE0; return 0x820C99B0;
		/* 82127CDCh case   18:*/		return 0x82127CE0;
		  /* 82127CE0h */ case   19:  		/* mr R31, R3 */
		/* 82127CE0h case   19:*/		regs.R31 = regs.R3;
		/* 82127CE0h case   19:*/		return 0x82127CE4;
		  /* 82127CE4h */ case   20:  		/* b 8 */
		/* 82127CE4h case   20:*/		return 0x82127CEC;
		/* 82127CE4h case   20:*/		return 0x82127CE8;
	}
	return 0x82127CE8;
} // Block from 82127C94h-82127CE8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82127CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127CE8);
		  /* 82127CE8h */ case    0:  		/* mr R31, R25 */
		/* 82127CE8h case    0:*/		regs.R31 = regs.R25;
		/* 82127CE8h case    0:*/		return 0x82127CEC;
	}
	return 0x82127CEC;
} // Block from 82127CE8h-82127CECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127CEC);
		  /* 82127CECh */ case    0:  		/* mr R4, R31 */
		/* 82127CECh case    0:*/		regs.R4 = regs.R31;
		/* 82127CECh case    0:*/		return 0x82127CF0;
		  /* 82127CF0h */ case    1:  		/* mr R3, R28 */
		/* 82127CF0h case    1:*/		regs.R3 = regs.R28;
		/* 82127CF0h case    1:*/		return 0x82127CF4;
		  /* 82127CF4h */ case    2:  		/* bl -58076 */
		/* 82127CF4h case    2:*/		regs.LR = 0x82127CF8; return 0x82119A18;
		/* 82127CF4h case    2:*/		return 0x82127CF8;
		  /* 82127CF8h */ case    3:  		/* b 1500 */
		/* 82127CF8h case    3:*/		return 0x821282D4;
		/* 82127CF8h case    3:*/		return 0x82127CFC;
		  /* 82127CFCh */ case    4:  		/* li R3, 44 */
		/* 82127CFCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x2C);
		/* 82127CFCh case    4:*/		return 0x82127D00;
		  /* 82127D00h */ case    5:  		/* bl -387800 */
		/* 82127D00h case    5:*/		regs.LR = 0x82127D04; return 0x820C9228;
		/* 82127D00h case    5:*/		return 0x82127D04;
		  /* 82127D04h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82127D04h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127D04h case    6:*/		return 0x82127D08;
		  /* 82127D08h */ case    7:  		/* bc 12, CR0_EQ, 44 */
		/* 82127D08h case    7:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82127D08h case    7:*/		return 0x82127D0C;
		  /* 82127D0Ch */ case    8:  		/* lwz R10, <#[R1 + 176]> */
		/* 82127D0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127D0Ch case    8:*/		return 0x82127D10;
		  /* 82127D10h */ case    9:  		/* lwz R9, <#[R28 + 120]> */
		/* 82127D10h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000078) );
		/* 82127D10h case    9:*/		return 0x82127D14;
		  /* 82127D14h */ case   10:  		/* lwz R8, <#[R28 + 116]> */
		/* 82127D14h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000074) );
		/* 82127D14h case   10:*/		return 0x82127D18;
		  /* 82127D18h */ case   11:  		/* lwz R7, <#[R28 + 112]> */
		/* 82127D18h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000070) );
		/* 82127D18h case   11:*/		return 0x82127D1C;
		  /* 82127D1Ch */ case   12:  		/* lwz R6, <#[R28 + 108]> */
		/* 82127D1Ch case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x0000006C) );
		/* 82127D1Ch case   12:*/		return 0x82127D20;
		  /* 82127D20h */ case   13:  		/* lwz R5, <#[R28 + 104]> */
		/* 82127D20h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000068) );
		/* 82127D20h case   13:*/		return 0x82127D24;
		  /* 82127D24h */ case   14:  		/* lwz R4, <#[R28 + 100]> */
		/* 82127D24h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000064) );
		/* 82127D24h case   14:*/		return 0x82127D28;
		  /* 82127D28h */ case   15:  		/* bl -385912 */
		/* 82127D28h case   15:*/		regs.LR = 0x82127D2C; return 0x820C99B0;
		/* 82127D28h case   15:*/		return 0x82127D2C;
		  /* 82127D2Ch */ case   16:  		/* mr R31, R3 */
		/* 82127D2Ch case   16:*/		regs.R31 = regs.R3;
		/* 82127D2Ch case   16:*/		return 0x82127D30;
		  /* 82127D30h */ case   17:  		/* b 8 */
		/* 82127D30h case   17:*/		return 0x82127D38;
		/* 82127D30h case   17:*/		return 0x82127D34;
	}
	return 0x82127D34;
} // Block from 82127CECh-82127D34h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82127D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127D34);
		  /* 82127D34h */ case    0:  		/* mr R31, R25 */
		/* 82127D34h case    0:*/		regs.R31 = regs.R25;
		/* 82127D34h case    0:*/		return 0x82127D38;
	}
	return 0x82127D38;
} // Block from 82127D34h-82127D38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127D38);
		  /* 82127D38h */ case    0:  		/* mr R3, R28 */
		/* 82127D38h case    0:*/		regs.R3 = regs.R28;
		/* 82127D38h case    0:*/		return 0x82127D3C;
		  /* 82127D3Ch */ case    1:  		/* mr R4, R31 */
		/* 82127D3Ch case    1:*/		regs.R4 = regs.R31;
		/* 82127D3Ch case    1:*/		return 0x82127D40;
		  /* 82127D40h */ case    2:  		/* bl -58152 */
		/* 82127D40h case    2:*/		regs.LR = 0x82127D44; return 0x82119A18;
		/* 82127D40h case    2:*/		return 0x82127D44;
		  /* 82127D44h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82127D44h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127D44h case    3:*/		return 0x82127D48;
		  /* 82127D48h */ case    4:  		/* bc 12, CR0_EQ, 1420 */
		/* 82127D48h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82127D48h case    4:*/		return 0x82127D4C;
		  /* 82127D4Ch */ case    5:  		/* stw R25, <#[R1 + 176]> */
		/* 82127D4Ch case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127D4Ch case    5:*/		return 0x82127D50;
		  /* 82127D50h */ case    6:  		/* b 1412 */
		/* 82127D50h case    6:*/		return 0x821282D4;
		/* 82127D50h case    6:*/		return 0x82127D54;
		  /* 82127D54h */ case    7:  		/* lwz R4, <#[R1 + 180]> */
		/* 82127D54h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127D54h case    7:*/		return 0x82127D58;
		  /* 82127D58h */ case    8:  		/* lwz R3, <#[R1 + 176]> */
		/* 82127D58h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127D58h case    8:*/		return 0x82127D5C;
		  /* 82127D5Ch */ case    9:  		/* bl -387540 */
		/* 82127D5Ch case    9:*/		regs.LR = 0x82127D60; return 0x820C9388;
		/* 82127D5Ch case    9:*/		return 0x82127D60;
		  /* 82127D60h */ case   10:  		/* mr R31, R3 */
		/* 82127D60h case   10:*/		regs.R31 = regs.R3;
		/* 82127D60h case   10:*/		return 0x82127D64;
		  /* 82127D64h */ case   11:  		/* stw R25, <#[R1 + 176]> */
		/* 82127D64h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127D64h case   11:*/		return 0x82127D68;
		  /* 82127D68h */ case   12:  		/* stw R25, <#[R1 + 180]> */
		/* 82127D68h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127D68h case   12:*/		return 0x82127D6C;
		  /* 82127D6Ch */ case   13:  		/* b 1384 */
		/* 82127D6Ch case   13:*/		return 0x821282D4;
		/* 82127D6Ch case   13:*/		return 0x82127D70;
		  /* 82127D70h */ case   14:  		/* li R6, 0 */
		/* 82127D70h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127D70h case   14:*/		return 0x82127D74;
		  /* 82127D74h */ case   15:  		/* lwz R4, <#[R1 + 176]> */
		/* 82127D74h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127D74h case   15:*/		return 0x82127D78;
		  /* 82127D78h */ case   16:  		/* li R5, 0 */
		/* 82127D78h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127D78h case   16:*/		return 0x82127D7C;
		  /* 82127D7Ch */ case   17:  		/* mr R3, R28 */
		/* 82127D7Ch case   17:*/		regs.R3 = regs.R28;
		/* 82127D7Ch case   17:*/		return 0x82127D80;
		  /* 82127D80h */ case   18:  		/* bl -56712 */
		/* 82127D80h case   18:*/		regs.LR = 0x82127D84; return 0x82119FF8;
		/* 82127D80h case   18:*/		return 0x82127D84;
		  /* 82127D84h */ case   19:  		/* mr R31, R3 */
		/* 82127D84h case   19:*/		regs.R31 = regs.R3;
		/* 82127D84h case   19:*/		return 0x82127D88;
		  /* 82127D88h */ case   20:  		/* mr R3, R28 */
		/* 82127D88h case   20:*/		regs.R3 = regs.R28;
		/* 82127D88h case   20:*/		return 0x82127D8C;
		  /* 82127D8Ch */ case   21:  		/* mr R4, R31 */
		/* 82127D8Ch case   21:*/		regs.R4 = regs.R31;
		/* 82127D8Ch case   21:*/		return 0x82127D90;
		  /* 82127D90h */ case   22:  		/* bl -58232 */
		/* 82127D90h case   22:*/		regs.LR = 0x82127D94; return 0x82119A18;
		/* 82127D90h case   22:*/		return 0x82127D94;
		  /* 82127D94h */ case   23:  		/* b -72 */
		/* 82127D94h case   23:*/		return 0x82127D4C;
		/* 82127D94h case   23:*/		return 0x82127D98;
		  /* 82127D98h */ case   24:  		/* li R6, 0 */
		/* 82127D98h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127D98h case   24:*/		return 0x82127D9C;
		  /* 82127D9Ch */ case   25:  		/* lwz R5, <#[R1 + 184]> */
		/* 82127D9Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 82127D9Ch case   25:*/		return 0x82127DA0;
		  /* 82127DA0h */ case   26:  		/* mr R3, R28 */
		/* 82127DA0h case   26:*/		regs.R3 = regs.R28;
		/* 82127DA0h case   26:*/		return 0x82127DA4;
		  /* 82127DA4h */ case   27:  		/* lwz R4, <#[R1 + 176]> */
		/* 82127DA4h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127DA4h case   27:*/		return 0x82127DA8;
		  /* 82127DA8h */ case   28:  		/* bl -56752 */
		/* 82127DA8h case   28:*/		regs.LR = 0x82127DAC; return 0x82119FF8;
		/* 82127DA8h case   28:*/		return 0x82127DAC;
		  /* 82127DACh */ case   29:  		/* mr R31, R3 */
		/* 82127DACh case   29:*/		regs.R31 = regs.R3;
		/* 82127DACh case   29:*/		return 0x82127DB0;
		  /* 82127DB0h */ case   30:  		/* mr R3, R28 */
		/* 82127DB0h case   30:*/		regs.R3 = regs.R28;
		/* 82127DB0h case   30:*/		return 0x82127DB4;
		  /* 82127DB4h */ case   31:  		/* mr R4, R31 */
		/* 82127DB4h case   31:*/		regs.R4 = regs.R31;
		/* 82127DB4h case   31:*/		return 0x82127DB8;
		  /* 82127DB8h */ case   32:  		/* bl -58272 */
		/* 82127DB8h case   32:*/		regs.LR = 0x82127DBC; return 0x82119A18;
		/* 82127DB8h case   32:*/		return 0x82127DBC;
		  /* 82127DBCh */ case   33:  		/* stw R25, <#[R1 + 176]> */
		/* 82127DBCh case   33:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127DBCh case   33:*/		return 0x82127DC0;
		  /* 82127DC0h */ case   34:  		/* stw R25, <#[R1 + 184]> */
		/* 82127DC0h case   34:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 82127DC0h case   34:*/		return 0x82127DC4;
		  /* 82127DC4h */ case   35:  		/* b 1296 */
		/* 82127DC4h case   35:*/		return 0x821282D4;
		/* 82127DC4h case   35:*/		return 0x82127DC8;
		  /* 82127DC8h */ case   36:  		/* lwz R31, <#[R1 + 176]> */
		/* 82127DC8h case   36:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127DC8h case   36:*/		return 0x82127DCC;
		  /* 82127DCCh */ case   37:  		/* stw R25, <#[R1 + 176]> */
		/* 82127DCCh case   37:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127DCCh case   37:*/		return 0x82127DD0;
		  /* 82127DD0h */ case   38:  		/* stw R31, <#[R28 + 28]> */
		/* 82127DD0h case   38:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x0000001C) );
		/* 82127DD0h case   38:*/		return 0x82127DD4;
		  /* 82127DD4h */ case   39:  		/* b 1280 */
		/* 82127DD4h case   39:*/		return 0x821282D4;
		/* 82127DD4h case   39:*/		return 0x82127DD8;
		  /* 82127DD8h */ case   40:  		/* lwz R11, <#[R28 + 28]> */
		/* 82127DD8h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 82127DD8h case   40:*/		return 0x82127DDC;
		  /* 82127DDCh */ case   41:  		/* li R4, 9 */
		/* 82127DDCh case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 82127DDCh case   41:*/		return 0x82127DE0;
		  /* 82127DE0h */ case   42:  		/* lwz R5, <#[R11 + 24]> */
		/* 82127DE0h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 82127DE0h case   42:*/		return 0x82127DE4;
		  /* 82127DE4h */ case   43:  		/* mr R3, R28 */
		/* 82127DE4h case   43:*/		regs.R3 = regs.R28;
		/* 82127DE4h case   43:*/		return 0x82127DE8;
		  /* 82127DE8h */ case   44:  		/* bl -58216 */
		/* 82127DE8h case   44:*/		regs.LR = 0x82127DEC; return 0x82119A80;
		/* 82127DE8h case   44:*/		return 0x82127DEC;
		  /* 82127DECh */ case   45:  		/* b 1256 */
		/* 82127DECh case   45:*/		return 0x821282D4;
		/* 82127DECh case   45:*/		return 0x82127DF0;
		  /* 82127DF0h */ case   46:  		/* li R8, 0 */
		/* 82127DF0h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82127DF0h case   46:*/		return 0x82127DF4;
		  /* 82127DF4h */ case   47:  		/* li R4, 7 */
		/* 82127DF4h case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 82127DF4h case   47:*/		return 0x82127DF8;
		  /* 82127DF8h */ case   48:  		/* mr R3, R28 */
		/* 82127DF8h case   48:*/		regs.R3 = regs.R28;
		/* 82127DF8h case   48:*/		return 0x82127DFC;
		  /* 82127DFCh */ case   49:  		/* lwz R6, <#[R1 + 180]> */
		/* 82127DFCh case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127DFCh case   49:*/		return 0x82127E00;
		  /* 82127E00h */ case   50:  		/* lwz R7, <#[R1 + 184]> */
		/* 82127E00h case   50:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 82127E00h case   50:*/		return 0x82127E04;
		  /* 82127E04h */ case   51:  		/* lwz R5, <#[R1 + 176]> */
		/* 82127E04h case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127E04h case   51:*/		return 0x82127E08;
		  /* 82127E08h */ case   52:  		/* bl -57144 */
		/* 82127E08h case   52:*/		regs.LR = 0x82127E0C; return 0x82119ED0;
		/* 82127E08h case   52:*/		return 0x82127E0C;
		  /* 82127E0Ch */ case   53:  		/* mr R31, R3 */
		/* 82127E0Ch case   53:*/		regs.R31 = regs.R3;
		/* 82127E0Ch case   53:*/		return 0x82127E10;
		  /* 82127E10h */ case   54:  		/* mr R3, R28 */
		/* 82127E10h case   54:*/		regs.R3 = regs.R28;
		/* 82127E10h case   54:*/		return 0x82127E14;
		  /* 82127E14h */ case   55:  		/* mr R4, R31 */
		/* 82127E14h case   55:*/		regs.R4 = regs.R31;
		/* 82127E14h case   55:*/		return 0x82127E18;
		  /* 82127E18h */ case   56:  		/* bl -58368 */
		/* 82127E18h case   56:*/		regs.LR = 0x82127E1C; return 0x82119A18;
		/* 82127E18h case   56:*/		return 0x82127E1C;
		  /* 82127E1Ch */ case   57:  		/* stw R25, <#[R1 + 188]> */
		/* 82127E1Ch case   57:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000BC) );
		/* 82127E1Ch case   57:*/		return 0x82127E20;
		  /* 82127E20h */ case   58:  		/* b 1204 */
		/* 82127E20h case   58:*/		return 0x821282D4;
		/* 82127E20h case   58:*/		return 0x82127E24;
		  /* 82127E24h */ case   59:  		/* li R4, 7 */
		/* 82127E24h case   59:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 82127E24h case   59:*/		return 0x82127E28;
		  /* 82127E28h */ case   60:  		/* lwz R8, <#[R1 + 188]> */
		/* 82127E28h case   60:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000BC) );
		/* 82127E28h case   60:*/		return 0x82127E2C;
		  /* 82127E2Ch */ case   61:  		/* mr R3, R28 */
		/* 82127E2Ch case   61:*/		regs.R3 = regs.R28;
		/* 82127E2Ch case   61:*/		return 0x82127E30;
		  /* 82127E30h */ case   62:  		/* lwz R7, <#[R1 + 184]> */
		/* 82127E30h case   62:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 82127E30h case   62:*/		return 0x82127E34;
		  /* 82127E34h */ case   63:  		/* lwz R6, <#[R1 + 180]> */
		/* 82127E34h case   63:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127E34h case   63:*/		return 0x82127E38;
		  /* 82127E38h */ case   64:  		/* lwz R5, <#[R1 + 176]> */
		/* 82127E38h case   64:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127E38h case   64:*/		return 0x82127E3C;
		  /* 82127E3Ch */ case   65:  		/* bl -57196 */
		/* 82127E3Ch case   65:*/		regs.LR = 0x82127E40; return 0x82119ED0;
		/* 82127E3Ch case   65:*/		return 0x82127E40;
		  /* 82127E40h */ case   66:  		/* mr R31, R3 */
		/* 82127E40h case   66:*/		regs.R31 = regs.R3;
		/* 82127E40h case   66:*/		return 0x82127E44;
		  /* 82127E44h */ case   67:  		/* mr R3, R28 */
		/* 82127E44h case   67:*/		regs.R3 = regs.R28;
		/* 82127E44h case   67:*/		return 0x82127E48;
		  /* 82127E48h */ case   68:  		/* mr R4, R31 */
		/* 82127E48h case   68:*/		regs.R4 = regs.R31;
		/* 82127E48h case   68:*/		return 0x82127E4C;
		  /* 82127E4Ch */ case   69:  		/* bl -58420 */
		/* 82127E4Ch case   69:*/		regs.LR = 0x82127E50; return 0x82119A18;
		/* 82127E4Ch case   69:*/		return 0x82127E50;
		  /* 82127E50h */ case   70:  		/* stw R25, <#[R1 + 192]> */
		/* 82127E50h case   70:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 82127E50h case   70:*/		return 0x82127E54;
		  /* 82127E54h */ case   71:  		/* b 1152 */
		/* 82127E54h case   71:*/		return 0x821282D4;
		/* 82127E54h case   71:*/		return 0x82127E58;
		  /* 82127E58h */ case   72:  		/* li R3, 32 */
		/* 82127E58h case   72:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82127E58h case   72:*/		return 0x82127E5C;
		  /* 82127E5Ch */ case   73:  		/* bl -388148 */
		/* 82127E5Ch case   73:*/		regs.LR = 0x82127E60; return 0x820C9228;
		/* 82127E5Ch case   73:*/		return 0x82127E60;
		  /* 82127E60h */ case   74:  		/* cmplwi CR0, R3, 0 */
		/* 82127E60h case   74:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127E60h case   74:*/		return 0x82127E64;
		  /* 82127E64h */ case   75:  		/* bc 12, CR0_EQ, 32 */
		/* 82127E64h case   75:*/		if ( regs.CR[0].eq ) { return 0x82127E84;  }
		/* 82127E64h case   75:*/		return 0x82127E68;
		  /* 82127E68h */ case   76:  		/* li R7, 0 */
		/* 82127E68h case   76:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127E68h case   76:*/		return 0x82127E6C;
		  /* 82127E6Ch */ case   77:  		/* li R6, 0 */
		/* 82127E6Ch case   77:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127E6Ch case   77:*/		return 0x82127E70;
		  /* 82127E70h */ case   78:  		/* li R5, 0 */
		/* 82127E70h case   78:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127E70h case   78:*/		return 0x82127E74;
		  /* 82127E74h */ case   79:  		/* li R4, 0 */
		/* 82127E74h case   79:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82127E74h case   79:*/		return 0x82127E78;
		  /* 82127E78h */ case   80:  		/* bl -382560 */
		/* 82127E78h case   80:*/		regs.LR = 0x82127E7C; return 0x820CA818;
		/* 82127E78h case   80:*/		return 0x82127E7C;
		  /* 82127E7Ch */ case   81:  		/* mr R31, R3 */
		/* 82127E7Ch case   81:*/		regs.R31 = regs.R3;
		/* 82127E7Ch case   81:*/		return 0x82127E80;
		  /* 82127E80h */ case   82:  		/* b 8 */
		/* 82127E80h case   82:*/		return 0x82127E88;
		/* 82127E80h case   82:*/		return 0x82127E84;
	}
	return 0x82127E84;
} // Block from 82127D38h-82127E84h (83 instructions)

//////////////////////////////////////////////////////
// Block at 82127E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127E84);
		  /* 82127E84h */ case    0:  		/* mr R31, R25 */
		/* 82127E84h case    0:*/		regs.R31 = regs.R25;
		/* 82127E84h case    0:*/		return 0x82127E88;
	}
	return 0x82127E88;
} // Block from 82127E84h-82127E88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127E88);
		  /* 82127E88h */ case    0:  		/* mr R4, R31 */
		/* 82127E88h case    0:*/		regs.R4 = regs.R31;
		/* 82127E88h case    0:*/		return 0x82127E8C;
		  /* 82127E8Ch */ case    1:  		/* mr R3, R28 */
		/* 82127E8Ch case    1:*/		regs.R3 = regs.R28;
		/* 82127E8Ch case    1:*/		return 0x82127E90;
		  /* 82127E90h */ case    2:  		/* bl -58488 */
		/* 82127E90h case    2:*/		regs.LR = 0x82127E94; return 0x82119A18;
		/* 82127E90h case    2:*/		return 0x82127E94;
		  /* 82127E94h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82127E94h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127E94h case    3:*/		return 0x82127E98;
		  /* 82127E98h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 82127E98h case    4:*/		if ( regs.CR[0].eq ) { return 0x82127EAC;  }
		/* 82127E98h case    4:*/		return 0x82127E9C;
		  /* 82127E9Ch */ case    5:  		/* lwz R11, <#[R1 + 176]> */
		/* 82127E9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127E9Ch case    5:*/		return 0x82127EA0;
		  /* 82127EA0h */ case    6:  		/* stw R11, <#[R31 + 28]> */
		/* 82127EA0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82127EA0h case    6:*/		return 0x82127EA4;
		  /* 82127EA4h */ case    7:  		/* stw R31, <#[R1 + 176]> */
		/* 82127EA4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127EA4h case    7:*/		return 0x82127EA8;
		  /* 82127EA8h */ case    8:  		/* b 8 */
		/* 82127EA8h case    8:*/		return 0x82127EB0;
		/* 82127EA8h case    8:*/		return 0x82127EAC;
	}
	return 0x82127EAC;
} // Block from 82127E88h-82127EACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82127EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127EAC);
		  /* 82127EACh */ case    0:  		/* lwz R31, <#[R1 + 176]> */
		/* 82127EACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127EACh case    0:*/		return 0x82127EB0;
	}
	return 0x82127EB0;
} // Block from 82127EACh-82127EB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82127EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82127EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82127EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82127EB0);
		  /* 82127EB0h */ case    0:  		/* lwz R4, <#[R1 + 180]> */
		/* 82127EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127EB0h case    0:*/		return 0x82127EB4;
		  /* 82127EB4h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82127EB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82127EB4h case    1:*/		return 0x82127EB8;
		  /* 82127EB8h */ case    2:  		/* bc 12, CR6_EQ, -364 */
		/* 82127EB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82127D4C;  }
		/* 82127EB8h case    2:*/		return 0x82127EBC;
		  /* 82127EBCh */ case    3:  		/* mr R5, R31 */
		/* 82127EBCh case    3:*/		regs.R5 = regs.R31;
		/* 82127EBCh case    3:*/		return 0x82127EC0;
		  /* 82127EC0h */ case    4:  		/* mr R3, R28 */
		/* 82127EC0h case    4:*/		regs.R3 = regs.R28;
		/* 82127EC0h case    4:*/		return 0x82127EC4;
		  /* 82127EC4h */ case    5:  		/* bl -44388 */
		/* 82127EC4h case    5:*/		regs.LR = 0x82127EC8; return 0x8211D160;
		/* 82127EC4h case    5:*/		return 0x82127EC8;
		  /* 82127EC8h */ case    6:  		/* b 788 */
		/* 82127EC8h case    6:*/		return 0x821281DC;
		/* 82127EC8h case    6:*/		return 0x82127ECC;
		  /* 82127ECCh */ case    7:  		/* lwz R11, <#[R28 + 16]> */
		/* 82127ECCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82127ECCh case    7:*/		return 0x82127ED0;
		  /* 82127ED0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82127ED0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82127ED0h case    8:*/		return 0x82127ED4;
		  /* 82127ED4h */ case    9:  		/* bc 12, CR6_EQ, 1024 */
		/* 82127ED4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821282D4;  }
		/* 82127ED4h case    9:*/		return 0x82127ED8;
		  /* 82127ED8h */ case   10:  		/* lwz R10, <#[R11 + 12]> */
		/* 82127ED8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127ED8h case   10:*/		return 0x82127EDC;
		  /* 82127EDCh */ case   11:  		/* stw R10, <#[R28 + 16]> */
		/* 82127EDCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 82127EDCh case   11:*/		return 0x82127EE0;
		  /* 82127EE0h */ case   12:  		/* stw R25, <#[R11 + 12]> */
		/* 82127EE0h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x0000000C) );
		/* 82127EE0h case   12:*/		return 0x82127EE4;
		  /* 82127EE4h */ case   13:  		/* b 1008 */
		/* 82127EE4h case   13:*/		return 0x821282D4;
		/* 82127EE4h case   13:*/		return 0x82127EE8;
		  /* 82127EE8h */ case   14:  		/* li R5, 0 */
		/* 82127EE8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127EE8h case   14:*/		return 0x82127EEC;
		  /* 82127EECh */ case   15:  		/* lwz R4, <#[R1 + 176]> */
		/* 82127EECh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127EECh case   15:*/		return 0x82127EF0;
		  /* 82127EF0h */ case   16:  		/* mr R3, R28 */
		/* 82127EF0h case   16:*/		regs.R3 = regs.R28;
		/* 82127EF0h case   16:*/		return 0x82127EF4;
		  /* 82127EF4h */ case   17:  		/* bl -64604 */
		/* 82127EF4h case   17:*/		regs.LR = 0x82127EF8; return 0x82118298;
		/* 82127EF4h case   17:*/		return 0x82127EF8;
		  /* 82127EF8h */ case   18:  		/* addic R10, R3, -1 */
		/* 82127EF8h case   18:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R3,0xFFFFFFFF);
		/* 82127EF8h case   18:*/		return 0x82127EFC;
		  /* 82127EFCh */ case   19:  		/* lwz R11, <#[R1 + 176]> */
		/* 82127EFCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127EFCh case   19:*/		return 0x82127F00;
		  /* 82127F00h */ case   20:  		/* mr R31, R3 */
		/* 82127F00h case   20:*/		regs.R31 = regs.R3;
		/* 82127F00h case   20:*/		return 0x82127F04;
		  /* 82127F04h */ case   21:  		/* subfe R10, R10, R10 */
		/* 82127F04h case   21:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82127F04h case   21:*/		return 0x82127F08;
		  /* 82127F08h */ case   22:  		/* and R11, R10, R11 */
		/* 82127F08h case   22:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82127F08h case   22:*/		return 0x82127F0C;
		  /* 82127F0Ch */ case   23:  		/* stw R11, <#[R1 + 176]> */
		/* 82127F0Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F0Ch case   23:*/		return 0x82127F10;
		  /* 82127F10h */ case   24:  		/* mr R4, R31 */
		/* 82127F10h case   24:*/		regs.R4 = regs.R31;
		/* 82127F10h case   24:*/		return 0x82127F14;
		  /* 82127F14h */ case   25:  		/* mr R3, R28 */
		/* 82127F14h case   25:*/		regs.R3 = regs.R28;
		/* 82127F14h case   25:*/		return 0x82127F18;
		  /* 82127F18h */ case   26:  		/* bl -56928 */
		/* 82127F18h case   26:*/		regs.LR = 0x82127F1C; return 0x8211A0B8;
		/* 82127F18h case   26:*/		return 0x82127F1C;
		  /* 82127F1Ch */ case   27:  		/* b 952 */
		/* 82127F1Ch case   27:*/		return 0x821282D4;
		/* 82127F1Ch case   27:*/		return 0x82127F20;
		  /* 82127F20h */ case   28:  		/* mr R3, R28 */
		/* 82127F20h case   28:*/		regs.R3 = regs.R28;
		/* 82127F20h case   28:*/		return 0x82127F24;
		  /* 82127F24h */ case   29:  		/* lwz R5, <#[R1 + 180]> */
		/* 82127F24h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127F24h case   29:*/		return 0x82127F28;
		  /* 82127F28h */ case   30:  		/* lwz R4, <#[R1 + 176]> */
		/* 82127F28h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F28h case   30:*/		return 0x82127F2C;
		  /* 82127F2Ch */ case   31:  		/* bl -64660 */
		/* 82127F2Ch case   31:*/		regs.LR = 0x82127F30; return 0x82118298;
		/* 82127F2Ch case   31:*/		return 0x82127F30;
		  /* 82127F30h */ case   32:  		/* or. R31, R3, R3 */
		/* 82127F30h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82127F30h case   32:*/		return 0x82127F34;
		  /* 82127F34h */ case   33:  		/* bc 12, CR0_EQ, -36 */
		/* 82127F34h case   33:*/		if ( regs.CR[0].eq ) { return 0x82127F10;  }
		/* 82127F34h case   33:*/		return 0x82127F38;
		  /* 82127F38h */ case   34:  		/* stw R25, <#[R1 + 180]> */
		/* 82127F38h case   34:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127F38h case   34:*/		return 0x82127F3C;
		  /* 82127F3Ch */ case   35:  		/* stw R25, <#[R1 + 176]> */
		/* 82127F3Ch case   35:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F3Ch case   35:*/		return 0x82127F40;
		  /* 82127F40h */ case   36:  		/* b -48 */
		/* 82127F40h case   36:*/		return 0x82127F10;
		/* 82127F40h case   36:*/		return 0x82127F44;
		  /* 82127F44h */ case   37:  		/* li R8, 0 */
		/* 82127F44h case   37:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82127F44h case   37:*/		return 0x82127F48;
		  /* 82127F48h */ case   38:  		/* lwz R7, <#[R1 + 184]> */
		/* 82127F48h case   38:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 82127F48h case   38:*/		return 0x82127F4C;
		  /* 82127F4Ch */ case   39:  		/* li R4, 8 */
		/* 82127F4Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82127F4Ch case   39:*/		return 0x82127F50;
		  /* 82127F50h */ case   40:  		/* lwz R6, <#[R1 + 180]> */
		/* 82127F50h case   40:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127F50h case   40:*/		return 0x82127F54;
		  /* 82127F54h */ case   41:  		/* mr R3, R28 */
		/* 82127F54h case   41:*/		regs.R3 = regs.R28;
		/* 82127F54h case   41:*/		return 0x82127F58;
		  /* 82127F58h */ case   42:  		/* lwz R5, <#[R1 + 176]> */
		/* 82127F58h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F58h case   42:*/		return 0x82127F5C;
		  /* 82127F5Ch */ case   43:  		/* bl -57484 */
		/* 82127F5Ch case   43:*/		regs.LR = 0x82127F60; return 0x82119ED0;
		/* 82127F5Ch case   43:*/		return 0x82127F60;
		  /* 82127F60h */ case   44:  		/* mr R31, R3 */
		/* 82127F60h case   44:*/		regs.R31 = regs.R3;
		/* 82127F60h case   44:*/		return 0x82127F64;
		  /* 82127F64h */ case   45:  		/* mr R3, R28 */
		/* 82127F64h case   45:*/		regs.R3 = regs.R28;
		/* 82127F64h case   45:*/		return 0x82127F68;
		  /* 82127F68h */ case   46:  		/* mr R4, R31 */
		/* 82127F68h case   46:*/		regs.R4 = regs.R31;
		/* 82127F68h case   46:*/		return 0x82127F6C;
		  /* 82127F6Ch */ case   47:  		/* bl -58708 */
		/* 82127F6Ch case   47:*/		regs.LR = 0x82127F70; return 0x82119A18;
		/* 82127F6Ch case   47:*/		return 0x82127F70;
		  /* 82127F70h */ case   48:  		/* b -432 */
		/* 82127F70h case   48:*/		return 0x82127DC0;
		/* 82127F70h case   48:*/		return 0x82127F74;
		  /* 82127F74h */ case   49:  		/* lwz R8, <#[R1 + 188]> */
		/* 82127F74h case   49:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000BC) );
		/* 82127F74h case   49:*/		return 0x82127F78;
		  /* 82127F78h */ case   50:  		/* li R4, 8 */
		/* 82127F78h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82127F78h case   50:*/		return 0x82127F7C;
		  /* 82127F7Ch */ case   51:  		/* b -388 */
		/* 82127F7Ch case   51:*/		return 0x82127DF8;
		/* 82127F7Ch case   51:*/		return 0x82127F80;
		  /* 82127F80h */ case   52:  		/* mr R3, R28 */
		/* 82127F80h case   52:*/		regs.R3 = regs.R28;
		/* 82127F80h case   52:*/		return 0x82127F84;
		  /* 82127F84h */ case   53:  		/* lwz R5, <#[R1 + 180]> */
		/* 82127F84h case   53:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82127F84h case   53:*/		return 0x82127F88;
		  /* 82127F88h */ case   54:  		/* lwz R4, <#[R1 + 176]> */
		/* 82127F88h case   54:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F88h case   54:*/		return 0x82127F8C;
		  /* 82127F8Ch */ case   55:  		/* bl -44588 */
		/* 82127F8Ch case   55:*/		regs.LR = 0x82127F90; return 0x8211D160;
		/* 82127F8Ch case   55:*/		return 0x82127F90;
		  /* 82127F90h */ case   56:  		/* lwz R31, <#[R1 + 176]> */
		/* 82127F90h case   56:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82127F90h case   56:*/		return 0x82127F94;
		  /* 82127F94h */ case   57:  		/* b -584 */
		/* 82127F94h case   57:*/		return 0x82127D4C;
		/* 82127F94h case   57:*/		return 0x82127F98;
		  /* 82127F98h */ case   58:  		/* li R3, 32 */
		/* 82127F98h case   58:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82127F98h case   58:*/		return 0x82127F9C;
		  /* 82127F9Ch */ case   59:  		/* bl -388468 */
		/* 82127F9Ch case   59:*/		regs.LR = 0x82127FA0; return 0x820C9228;
		/* 82127F9Ch case   59:*/		return 0x82127FA0;
		  /* 82127FA0h */ case   60:  		/* cmplwi CR0, R3, 0 */
		/* 82127FA0h case   60:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127FA0h case   60:*/		return 0x82127FA4;
		  /* 82127FA4h */ case   61:  		/* bc 12, CR0_EQ, -700 */
		/* 82127FA4h case   61:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82127FA4h case   61:*/		return 0x82127FA8;
		  /* 82127FA8h */ case   62:  		/* li R4, 2 */
		/* 82127FA8h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82127FA8h case   62:*/		return 0x82127FAC;
		  /* 82127FACh */ case   63:  		/* li R5, 0 */
		/* 82127FACh case   63:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82127FACh case   63:*/		return 0x82127FB0;
		  /* 82127FB0h */ case   64:  		/* li R6, 0 */
		/* 82127FB0h case   64:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82127FB0h case   64:*/		return 0x82127FB4;
		  /* 82127FB4h */ case   65:  		/* li R7, 0 */
		/* 82127FB4h case   65:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82127FB4h case   65:*/		return 0x82127FB8;
		  /* 82127FB8h */ case   66:  		/* bl -382880 */
		/* 82127FB8h case   66:*/		regs.LR = 0x82127FBC; return 0x820CA818;
		/* 82127FB8h case   66:*/		return 0x82127FBC;
		  /* 82127FBCh */ case   67:  		/* b -732 */
		/* 82127FBCh case   67:*/		return 0x82127CE0;
		/* 82127FBCh case   67:*/		return 0x82127FC0;
		  /* 82127FC0h */ case   68:  		/* li R3, 32 */
		/* 82127FC0h case   68:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82127FC0h case   68:*/		return 0x82127FC4;
		  /* 82127FC4h */ case   69:  		/* bl -388508 */
		/* 82127FC4h case   69:*/		regs.LR = 0x82127FC8; return 0x820C9228;
		/* 82127FC4h case   69:*/		return 0x82127FC8;
		  /* 82127FC8h */ case   70:  		/* cmplwi CR0, R3, 0 */
		/* 82127FC8h case   70:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127FC8h case   70:*/		return 0x82127FCC;
		  /* 82127FCCh */ case   71:  		/* bc 12, CR0_EQ, -740 */
		/* 82127FCCh case   71:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82127FCCh case   71:*/		return 0x82127FD0;
		  /* 82127FD0h */ case   72:  		/* li R4, 64 */
		/* 82127FD0h case   72:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 82127FD0h case   72:*/		return 0x82127FD4;
		  /* 82127FD4h */ case   73:  		/* b -40 */
		/* 82127FD4h case   73:*/		return 0x82127FAC;
		/* 82127FD4h case   73:*/		return 0x82127FD8;
		  /* 82127FD8h */ case   74:  		/* li R3, 32 */
		/* 82127FD8h case   74:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82127FD8h case   74:*/		return 0x82127FDC;
		  /* 82127FDCh */ case   75:  		/* bl -388532 */
		/* 82127FDCh case   75:*/		regs.LR = 0x82127FE0; return 0x820C9228;
		/* 82127FDCh case   75:*/		return 0x82127FE0;
		  /* 82127FE0h */ case   76:  		/* cmplwi CR0, R3, 0 */
		/* 82127FE0h case   76:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127FE0h case   76:*/		return 0x82127FE4;
		  /* 82127FE4h */ case   77:  		/* bc 12, CR0_EQ, -764 */
		/* 82127FE4h case   77:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82127FE4h case   77:*/		return 0x82127FE8;
		  /* 82127FE8h */ case   78:  		/* li R4, 1 */
		/* 82127FE8h case   78:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82127FE8h case   78:*/		return 0x82127FEC;
		  /* 82127FECh */ case   79:  		/* b -64 */
		/* 82127FECh case   79:*/		return 0x82127FAC;
		/* 82127FECh case   79:*/		return 0x82127FF0;
		  /* 82127FF0h */ case   80:  		/* li R3, 32 */
		/* 82127FF0h case   80:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82127FF0h case   80:*/		return 0x82127FF4;
		  /* 82127FF4h */ case   81:  		/* bl -388556 */
		/* 82127FF4h case   81:*/		regs.LR = 0x82127FF8; return 0x820C9228;
		/* 82127FF4h case   81:*/		return 0x82127FF8;
		  /* 82127FF8h */ case   82:  		/* cmplwi CR0, R3, 0 */
		/* 82127FF8h case   82:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82127FF8h case   82:*/		return 0x82127FFC;
		  /* 82127FFCh */ case   83:  		/* bc 12, CR0_EQ, -788 */
		/* 82127FFCh case   83:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82127FFCh case   83:*/		return 0x82128000;
		  /* 82128000h */ case   84:  		/* li R4, 4 */
		/* 82128000h case   84:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82128000h case   84:*/		return 0x82128004;
		  /* 82128004h */ case   85:  		/* b -88 */
		/* 82128004h case   85:*/		return 0x82127FAC;
		/* 82128004h case   85:*/		return 0x82128008;
		  /* 82128008h */ case   86:  		/* li R3, 32 */
		/* 82128008h case   86:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128008h case   86:*/		return 0x8212800C;
		  /* 8212800Ch */ case   87:  		/* bl -388580 */
		/* 8212800Ch case   87:*/		regs.LR = 0x82128010; return 0x820C9228;
		/* 8212800Ch case   87:*/		return 0x82128010;
		  /* 82128010h */ case   88:  		/* cmplwi CR0, R3, 0 */
		/* 82128010h case   88:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128010h case   88:*/		return 0x82128014;
		  /* 82128014h */ case   89:  		/* bc 12, CR0_EQ, -812 */
		/* 82128014h case   89:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128014h case   89:*/		return 0x82128018;
		  /* 82128018h */ case   90:  		/* li R4, 256 */
		/* 82128018h case   90:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 82128018h case   90:*/		return 0x8212801C;
		  /* 8212801Ch */ case   91:  		/* b -112 */
		/* 8212801Ch case   91:*/		return 0x82127FAC;
		/* 8212801Ch case   91:*/		return 0x82128020;
		  /* 82128020h */ case   92:  		/* li R3, 32 */
		/* 82128020h case   92:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128020h case   92:*/		return 0x82128024;
		  /* 82128024h */ case   93:  		/* bl -388604 */
		/* 82128024h case   93:*/		regs.LR = 0x82128028; return 0x820C9228;
		/* 82128024h case   93:*/		return 0x82128028;
		  /* 82128028h */ case   94:  		/* cmplwi CR0, R3, 0 */
		/* 82128028h case   94:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128028h case   94:*/		return 0x8212802C;
		  /* 8212802Ch */ case   95:  		/* bc 12, CR0_EQ, -836 */
		/* 8212802Ch case   95:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212802Ch case   95:*/		return 0x82128030;
		  /* 82128030h */ case   96:  		/* li R4, 8 */
		/* 82128030h case   96:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82128030h case   96:*/		return 0x82128034;
		  /* 82128034h */ case   97:  		/* b -136 */
		/* 82128034h case   97:*/		return 0x82127FAC;
		/* 82128034h case   97:*/		return 0x82128038;
		  /* 82128038h */ case   98:  		/* li R3, 32 */
		/* 82128038h case   98:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128038h case   98:*/		return 0x8212803C;
		  /* 8212803Ch */ case   99:  		/* bl -388628 */
		/* 8212803Ch case   99:*/		regs.LR = 0x82128040; return 0x820C9228;
		/* 8212803Ch case   99:*/		return 0x82128040;
		  /* 82128040h */ case  100:  		/* cmplwi CR0, R3, 0 */
		/* 82128040h case  100:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128040h case  100:*/		return 0x82128044;
		  /* 82128044h */ case  101:  		/* bc 12, CR0_EQ, -860 */
		/* 82128044h case  101:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128044h case  101:*/		return 0x82128048;
		  /* 82128048h */ case  102:  		/* lis R4, 2 */
		/* 82128048h case  102:*/		cpu::op::lis<0>(regs,&regs.R4,0x2);
		/* 82128048h case  102:*/		return 0x8212804C;
		  /* 8212804Ch */ case  103:  		/* b -160 */
		/* 8212804Ch case  103:*/		return 0x82127FAC;
		/* 8212804Ch case  103:*/		return 0x82128050;
		  /* 82128050h */ case  104:  		/* li R3, 32 */
		/* 82128050h case  104:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128050h case  104:*/		return 0x82128054;
		  /* 82128054h */ case  105:  		/* bl -388652 */
		/* 82128054h case  105:*/		regs.LR = 0x82128058; return 0x820C9228;
		/* 82128054h case  105:*/		return 0x82128058;
		  /* 82128058h */ case  106:  		/* cmplwi CR0, R3, 0 */
		/* 82128058h case  106:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128058h case  106:*/		return 0x8212805C;
		  /* 8212805Ch */ case  107:  		/* bc 12, CR0_EQ, -884 */
		/* 8212805Ch case  107:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212805Ch case  107:*/		return 0x82128060;
		  /* 82128060h */ case  108:  		/* lis R4, 4 */
		/* 82128060h case  108:*/		cpu::op::lis<0>(regs,&regs.R4,0x4);
		/* 82128060h case  108:*/		return 0x82128064;
		  /* 82128064h */ case  109:  		/* b -184 */
		/* 82128064h case  109:*/		return 0x82127FAC;
		/* 82128064h case  109:*/		return 0x82128068;
		  /* 82128068h */ case  110:  		/* li R3, 32 */
		/* 82128068h case  110:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128068h case  110:*/		return 0x8212806C;
		  /* 8212806Ch */ case  111:  		/* bl -388676 */
		/* 8212806Ch case  111:*/		regs.LR = 0x82128070; return 0x820C9228;
		/* 8212806Ch case  111:*/		return 0x82128070;
		  /* 82128070h */ case  112:  		/* cmplwi CR0, R3, 0 */
		/* 82128070h case  112:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128070h case  112:*/		return 0x82128074;
		  /* 82128074h */ case  113:  		/* bc 12, CR0_EQ, -908 */
		/* 82128074h case  113:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128074h case  113:*/		return 0x82128078;
		  /* 82128078h */ case  114:  		/* lis R4, 8 */
		/* 82128078h case  114:*/		cpu::op::lis<0>(regs,&regs.R4,0x8);
		/* 82128078h case  114:*/		return 0x8212807C;
		  /* 8212807Ch */ case  115:  		/* b -208 */
		/* 8212807Ch case  115:*/		return 0x82127FAC;
		/* 8212807Ch case  115:*/		return 0x82128080;
		  /* 82128080h */ case  116:  		/* li R3, 32 */
		/* 82128080h case  116:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128080h case  116:*/		return 0x82128084;
		  /* 82128084h */ case  117:  		/* bl -388700 */
		/* 82128084h case  117:*/		regs.LR = 0x82128088; return 0x820C9228;
		/* 82128084h case  117:*/		return 0x82128088;
		  /* 82128088h */ case  118:  		/* cmplwi CR0, R3, 0 */
		/* 82128088h case  118:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128088h case  118:*/		return 0x8212808C;
		  /* 8212808Ch */ case  119:  		/* bc 12, CR0_EQ, -932 */
		/* 8212808Ch case  119:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212808Ch case  119:*/		return 0x82128090;
		  /* 82128090h */ case  120:  		/* lis R4, 16 */
		/* 82128090h case  120:*/		cpu::op::lis<0>(regs,&regs.R4,0x10);
		/* 82128090h case  120:*/		return 0x82128094;
		  /* 82128094h */ case  121:  		/* b -232 */
		/* 82128094h case  121:*/		return 0x82127FAC;
		/* 82128094h case  121:*/		return 0x82128098;
		  /* 82128098h */ case  122:  		/* li R3, 32 */
		/* 82128098h case  122:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128098h case  122:*/		return 0x8212809C;
		  /* 8212809Ch */ case  123:  		/* bl -388724 */
		/* 8212809Ch case  123:*/		regs.LR = 0x821280A0; return 0x820C9228;
		/* 8212809Ch case  123:*/		return 0x821280A0;
		  /* 821280A0h */ case  124:  		/* cmplwi CR0, R3, 0 */
		/* 821280A0h case  124:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821280A0h case  124:*/		return 0x821280A4;
		  /* 821280A4h */ case  125:  		/* bc 12, CR0_EQ, -880 */
		/* 821280A4h case  125:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 821280A4h case  125:*/		return 0x821280A8;
		  /* 821280A8h */ case  126:  		/* li R7, 0 */
		/* 821280A8h case  126:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821280A8h case  126:*/		return 0x821280AC;
		  /* 821280ACh */ case  127:  		/* lwz R5, <#[R1 + 176]> */
		/* 821280ACh case  127:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 821280ACh case  127:*/		return 0x821280B0;
		  /* 821280B0h */ case  128:  		/* li R6, 0 */
		/* 821280B0h case  128:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821280B0h case  128:*/		return 0x821280B4;
		  /* 821280B4h */ case  129:  		/* li R4, 0 */
		/* 821280B4h case  129:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821280B4h case  129:*/		return 0x821280B8;
		  /* 821280B8h */ case  130:  		/* bl -383136 */
		/* 821280B8h case  130:*/		regs.LR = 0x821280BC; return 0x820CA818;
		/* 821280B8h case  130:*/		return 0x821280BC;
		  /* 821280BCh */ case  131:  		/* b -912 */
		/* 821280BCh case  131:*/		return 0x82127D2C;
		/* 821280BCh case  131:*/		return 0x821280C0;
		  /* 821280C0h */ case  132:  		/* li R3, 32 */
		/* 821280C0h case  132:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821280C0h case  132:*/		return 0x821280C4;
		  /* 821280C4h */ case  133:  		/* bl -388764 */
		/* 821280C4h case  133:*/		regs.LR = 0x821280C8; return 0x820C9228;
		/* 821280C4h case  133:*/		return 0x821280C8;
		  /* 821280C8h */ case  134:  		/* cmplwi CR0, R3, 0 */
		/* 821280C8h case  134:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821280C8h case  134:*/		return 0x821280CC;
		  /* 821280CCh */ case  135:  		/* bc 12, CR0_EQ, -996 */
		/* 821280CCh case  135:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821280CCh case  135:*/		return 0x821280D0;
		  /* 821280D0h */ case  136:  		/* li R4, 512 */
		/* 821280D0h case  136:*/		cpu::op::li<0>(regs,&regs.R4,0x200);
		/* 821280D0h case  136:*/		return 0x821280D4;
		  /* 821280D4h */ case  137:  		/* b -296 */
		/* 821280D4h case  137:*/		return 0x82127FAC;
		/* 821280D4h case  137:*/		return 0x821280D8;
		  /* 821280D8h */ case  138:  		/* li R3, 32 */
		/* 821280D8h case  138:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821280D8h case  138:*/		return 0x821280DC;
		  /* 821280DCh */ case  139:  		/* bl -388788 */
		/* 821280DCh case  139:*/		regs.LR = 0x821280E0; return 0x820C9228;
		/* 821280DCh case  139:*/		return 0x821280E0;
		  /* 821280E0h */ case  140:  		/* cmplwi CR0, R3, 0 */
		/* 821280E0h case  140:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821280E0h case  140:*/		return 0x821280E4;
		  /* 821280E4h */ case  141:  		/* bc 12, CR0_EQ, -1020 */
		/* 821280E4h case  141:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821280E4h case  141:*/		return 0x821280E8;
		  /* 821280E8h */ case  142:  		/* li R4, 1024 */
		/* 821280E8h case  142:*/		cpu::op::li<0>(regs,&regs.R4,0x400);
		/* 821280E8h case  142:*/		return 0x821280EC;
		  /* 821280ECh */ case  143:  		/* b -320 */
		/* 821280ECh case  143:*/		return 0x82127FAC;
		/* 821280ECh case  143:*/		return 0x821280F0;
		  /* 821280F0h */ case  144:  		/* li R3, 32 */
		/* 821280F0h case  144:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821280F0h case  144:*/		return 0x821280F4;
		  /* 821280F4h */ case  145:  		/* bl -388812 */
		/* 821280F4h case  145:*/		regs.LR = 0x821280F8; return 0x820C9228;
		/* 821280F4h case  145:*/		return 0x821280F8;
		  /* 821280F8h */ case  146:  		/* cmplwi CR0, R3, 0 */
		/* 821280F8h case  146:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821280F8h case  146:*/		return 0x821280FC;
		  /* 821280FCh */ case  147:  		/* bc 12, CR0_EQ, -1044 */
		/* 821280FCh case  147:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821280FCh case  147:*/		return 0x82128100;
		  /* 82128100h */ case  148:  		/* li R4, 2048 */
		/* 82128100h case  148:*/		cpu::op::li<0>(regs,&regs.R4,0x800);
		/* 82128100h case  148:*/		return 0x82128104;
		  /* 82128104h */ case  149:  		/* b -344 */
		/* 82128104h case  149:*/		return 0x82127FAC;
		/* 82128104h case  149:*/		return 0x82128108;
		  /* 82128108h */ case  150:  		/* li R3, 32 */
		/* 82128108h case  150:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128108h case  150:*/		return 0x8212810C;
		  /* 8212810Ch */ case  151:  		/* bl -388836 */
		/* 8212810Ch case  151:*/		regs.LR = 0x82128110; return 0x820C9228;
		/* 8212810Ch case  151:*/		return 0x82128110;
		  /* 82128110h */ case  152:  		/* cmplwi CR0, R3, 0 */
		/* 82128110h case  152:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128110h case  152:*/		return 0x82128114;
		  /* 82128114h */ case  153:  		/* bc 12, CR0_EQ, 32 */
		/* 82128114h case  153:*/		if ( regs.CR[0].eq ) { return 0x82128134;  }
		/* 82128114h case  153:*/		return 0x82128118;
		  /* 82128118h */ case  154:  		/* li R4, 0 */
		/* 82128118h case  154:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128118h case  154:*/		return 0x8212811C;
		  /* 8212811Ch */ case  155:  		/* li R5, 0 */
		/* 8212811Ch case  155:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212811Ch case  155:*/		return 0x82128120;
		  /* 82128120h */ case  156:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128120h case  156:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128120h case  156:*/		return 0x82128124;
		  /* 82128124h */ case  157:  		/* li R7, 0 */
		/* 82128124h case  157:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128124h case  157:*/		return 0x82128128;
		  /* 82128128h */ case  158:  		/* bl -383248 */
		/* 82128128h case  158:*/		regs.LR = 0x8212812C; return 0x820CA818;
		/* 82128128h case  158:*/		return 0x8212812C;
		  /* 8212812Ch */ case  159:  		/* mr R31, R3 */
		/* 8212812Ch case  159:*/		regs.R31 = regs.R3;
		/* 8212812Ch case  159:*/		return 0x82128130;
		  /* 82128130h */ case  160:  		/* b 8 */
		/* 82128130h case  160:*/		return 0x82128138;
		/* 82128130h case  160:*/		return 0x82128134;
	}
	return 0x82128134;
} // Block from 82127EB0h-82128134h (161 instructions)

//////////////////////////////////////////////////////
// Block at 82128134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128134);
		  /* 82128134h */ case    0:  		/* mr R31, R25 */
		/* 82128134h case    0:*/		regs.R31 = regs.R25;
		/* 82128134h case    0:*/		return 0x82128138;
	}
	return 0x82128138;
} // Block from 82128134h-82128138h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128138);
		  /* 82128138h */ case    0:  		/* mr R4, R31 */
		/* 82128138h case    0:*/		regs.R4 = regs.R31;
		/* 82128138h case    0:*/		return 0x8212813C;
		  /* 8212813Ch */ case    1:  		/* mr R3, R28 */
		/* 8212813Ch case    1:*/		regs.R3 = regs.R28;
		/* 8212813Ch case    1:*/		return 0x82128140;
		  /* 82128140h */ case    2:  		/* bl -59176 */
		/* 82128140h case    2:*/		regs.LR = 0x82128144; return 0x82119A18;
		/* 82128140h case    2:*/		return 0x82128144;
		  /* 82128144h */ case    3:  		/* addic R11, R3, -1 */
		/* 82128144h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 82128144h case    3:*/		return 0x82128148;
		  /* 82128148h */ case    4:  		/* lwz R10, <#[R1 + 176]> */
		/* 82128148h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128148h case    4:*/		return 0x8212814C;
		  /* 8212814Ch */ case    5:  		/* subfe R11, R11, R11 */
		/* 8212814Ch case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8212814Ch case    5:*/		return 0x82128150;
		  /* 82128150h */ case    6:  		/* and R11, R11, R10 */
		/* 82128150h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82128150h case    6:*/		return 0x82128154;
		  /* 82128154h */ case    7:  		/* stw R11, <#[R1 + 176]> */
		/* 82128154h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128154h case    7:*/		return 0x82128158;
		  /* 82128158h */ case    8:  		/* mr R4, R31 */
		/* 82128158h case    8:*/		regs.R4 = regs.R31;
		/* 82128158h case    8:*/		return 0x8212815C;
		  /* 8212815Ch */ case    9:  		/* mr R3, R28 */
		/* 8212815Ch case    9:*/		regs.R3 = regs.R28;
		/* 8212815Ch case    9:*/		return 0x82128160;
		  /* 82128160h */ case   10:  		/* bl -35120 */
		/* 82128160h case   10:*/		regs.LR = 0x82128164; return 0x8211F830;
		/* 82128160h case   10:*/		return 0x82128164;
		  /* 82128164h */ case   11:  		/* b 368 */
		/* 82128164h case   11:*/		return 0x821282D4;
		/* 82128164h case   11:*/		return 0x82128168;
		  /* 82128168h */ case   12:  		/* lwz R11, <#[R1 + 180]> */
		/* 82128168h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128168h case   12:*/		return 0x8212816C;
		  /* 8212816Ch */ case   13:  		/* lwz R10, <#[R1 + 176]> */
		/* 8212816Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212816Ch case   13:*/		return 0x82128170;
		  /* 82128170h */ case   14:  		/* stw R11, <#[R10 + 24]> */
		/* 82128170h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82128170h case   14:*/		return 0x82128174;
		  /* 82128174h */ case   15:  		/* lwz R31, <#[R1 + 176]> */
		/* 82128174h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128174h case   15:*/		return 0x82128178;
		  /* 82128178h */ case   16:  		/* stw R25, <#[R1 + 180]> */
		/* 82128178h case   16:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128178h case   16:*/		return 0x8212817C;
		  /* 8212817Ch */ case   17:  		/* stw R25, <#[R1 + 176]> */
		/* 8212817Ch case   17:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212817Ch case   17:*/		return 0x82128180;
		  /* 82128180h */ case   18:  		/* b -40 */
		/* 82128180h case   18:*/		return 0x82128158;
		/* 82128180h case   18:*/		return 0x82128184;
		  /* 82128184h */ case   19:  		/* lwz R11, <#[R1 + 176]> */
		/* 82128184h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128184h case   19:*/		return 0x82128188;
		  /* 82128188h */ case   20:  		/* li R7, 0 */
		/* 82128188h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128188h case   20:*/		return 0x8212818C;
		  /* 8212818Ch */ case   21:  		/* li R5, 0 */
		/* 8212818Ch case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212818Ch case   21:*/		return 0x82128190;
		  /* 82128190h */ case   22:  		/* li R4, 0 */
		/* 82128190h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128190h case   22:*/		return 0x82128194;
		  /* 82128194h */ case   23:  		/* addi R3, R1, 144 */
		/* 82128194h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 82128194h case   23:*/		return 0x82128198;
		  /* 82128198h */ case   24:  		/* lwz R11, <#[R11 + 8]> */
		/* 82128198h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82128198h case   24:*/		return 0x8212819C;
		  /* 8212819Ch */ case   25:  		/* lwz R6, <#[R11 + 24]> */
		/* 8212819Ch case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000018) );
		/* 8212819Ch case   25:*/		return 0x821281A0;
		  /* 821281A0h */ case   26:  		/* bl -383368 */
		/* 821281A0h case   26:*/		regs.LR = 0x821281A4; return 0x820CA818;
		/* 821281A0h case   26:*/		return 0x821281A4;
		  /* 821281A4h */ case   27:  		/* addi R4, R1, 144 */
		/* 821281A4h case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 821281A4h case   27:*/		return 0x821281A8;
		  /* 821281A8h */ case   28:  		/* mr R3, R28 */
		/* 821281A8h case   28:*/		regs.R3 = regs.R28;
		/* 821281A8h case   28:*/		return 0x821281AC;
		  /* 821281ACh */ case   29:  		/* bl -35196 */
		/* 821281ACh case   29:*/		regs.LR = 0x821281B0; return 0x8211F830;
		/* 821281ACh case   29:*/		return 0x821281B0;
		  /* 821281B0h */ case   30:  		/* b -544 */
		/* 821281B0h case   30:*/		return 0x82127F90;
		/* 821281B0h case   30:*/		return 0x821281B4;
		  /* 821281B4h */ case   31:  		/* lwz R11, <#[R1 + 180]> */
		/* 821281B4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 821281B4h case   31:*/		return 0x821281B8;
		  /* 821281B8h */ case   32:  		/* mr R3, R28 */
		/* 821281B8h case   32:*/		regs.R3 = regs.R28;
		/* 821281B8h case   32:*/		return 0x821281BC;
		  /* 821281BCh */ case   33:  		/* lwz R10, <#[R1 + 176]> */
		/* 821281BCh case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821281BCh case   33:*/		return 0x821281C0;
		  /* 821281C0h */ case   34:  		/* lwz R11, <#[R11 + 8]> */
		/* 821281C0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821281C0h case   34:*/		return 0x821281C4;
		  /* 821281C4h */ case   35:  		/* lwz R11, <#[R11 + 24]> */
		/* 821281C4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821281C4h case   35:*/		return 0x821281C8;
		  /* 821281C8h */ case   36:  		/* stw R11, <#[R10 + 24]> */
		/* 821281C8h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821281C8h case   36:*/		return 0x821281CC;
		  /* 821281CCh */ case   37:  		/* lwz R4, <#[R1 + 176]> */
		/* 821281CCh case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821281CCh case   37:*/		return 0x821281D0;
		  /* 821281D0h */ case   38:  		/* bl -35232 */
		/* 821281D0h case   38:*/		regs.LR = 0x821281D4; return 0x8211F830;
		/* 821281D0h case   38:*/		return 0x821281D4;
		  /* 821281D4h */ case   39:  		/* lwz R11, <#[R1 + 176]> */
		/* 821281D4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821281D4h case   39:*/		return 0x821281D8;
		  /* 821281D8h */ case   40:  		/* stw R25, <#[R11 + 24]> */
		/* 821281D8h case   40:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000018) );
		/* 821281D8h case   40:*/		return 0x821281DC;
	}
	return 0x821281DC;
} // Block from 82128138h-821281DCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 821281DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821281DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821281DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821281DC);
		  /* 821281DCh */ case    0:  		/* lwz R31, <#[R1 + 180]> */
		/* 821281DCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B4) );
		/* 821281DCh case    0:*/		return 0x821281E0;
		  /* 821281E0h */ case    1:  		/* b -1144 */
		/* 821281E0h case    1:*/		return 0x82127D68;
		/* 821281E0h case    1:*/		return 0x821281E4;
		  /* 821281E4h */ case    2:  		/* mr R3, R28 */
		/* 821281E4h case    2:*/		regs.R3 = regs.R28;
		/* 821281E4h case    2:*/		return 0x821281E8;
		  /* 821281E8h */ case    3:  		/* lwz R5, <#[R1 + 180]> */
		/* 821281E8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 821281E8h case    3:*/		return 0x821281EC;
		  /* 821281ECh */ case    4:  		/* lwz R4, <#[R1 + 176]> */
		/* 821281ECh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821281ECh case    4:*/		return 0x821281F0;
		  /* 821281F0h */ case    5:  		/* bl -30480 */
		/* 821281F0h case    5:*/		regs.LR = 0x821281F4; return 0x82120AE0;
		/* 821281F0h case    5:*/		return 0x821281F4;
		  /* 821281F4h */ case    6:  		/* b -1300 */
		/* 821281F4h case    6:*/		return 0x82127CE0;
		/* 821281F4h case    6:*/		return 0x821281F8;
		  /* 821281F8h */ case    7:  		/* lwz R11, <#[R1 + 176]> */
		/* 821281F8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821281F8h case    7:*/		return 0x821281FC;
		  /* 821281FCh */ case    8:  		/* mr R3, R28 */
		/* 821281FCh case    8:*/		regs.R3 = regs.R28;
		/* 821281FCh case    8:*/		return 0x82128200;
		  /* 82128200h */ case    9:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128200h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128200h case    9:*/		return 0x82128204;
		  /* 82128204h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 82128204h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82128204h case   10:*/		return 0x82128208;
		  /* 82128208h */ case   11:  		/* lwz R4, <#[R11 + 24]> */
		/* 82128208h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000018) );
		/* 82128208h case   11:*/		return 0x8212820C;
		  /* 8212820Ch */ case   12:  		/* bl -30508 */
		/* 8212820Ch case   12:*/		regs.LR = 0x82128210; return 0x82120AE0;
		/* 8212820Ch case   12:*/		return 0x82128210;
		  /* 82128210h */ case   13:  		/* mr R31, R3 */
		/* 82128210h case   13:*/		regs.R31 = regs.R3;
		/* 82128210h case   13:*/		return 0x82128214;
		  /* 82128214h */ case   14:  		/* mr R3, R28 */
		/* 82128214h case   14:*/		regs.R3 = regs.R28;
		/* 82128214h case   14:*/		return 0x82128218;
		  /* 82128218h */ case   15:  		/* mr R4, R31 */
		/* 82128218h case   15:*/		regs.R4 = regs.R31;
		/* 82128218h case   15:*/		return 0x8212821C;
		  /* 8212821Ch */ case   16:  		/* bl -59396 */
		/* 8212821Ch case   16:*/		regs.LR = 0x82128220; return 0x82119A18;
		/* 8212821Ch case   16:*/		return 0x82128220;
		  /* 82128220h */ case   17:  		/* mr R4, R31 */
		/* 82128220h case   17:*/		regs.R4 = regs.R31;
		/* 82128220h case   17:*/		return 0x82128224;
		  /* 82128224h */ case   18:  		/* lwz R3, <#[R1 + 176]> */
		/* 82128224h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128224h case   18:*/		return 0x82128228;
		  /* 82128228h */ case   19:  		/* bl -388768 */
		/* 82128228h case   19:*/		regs.LR = 0x8212822C; return 0x820C9388;
		/* 82128228h case   19:*/		return 0x8212822C;
		  /* 8212822Ch */ case   20:  		/* mr R31, R3 */
		/* 8212822Ch case   20:*/		regs.R31 = regs.R3;
		/* 8212822Ch case   20:*/		return 0x82128230;
		  /* 82128230h */ case   21:  		/* b -1252 */
		/* 82128230h case   21:*/		return 0x82127D4C;
		/* 82128230h case   21:*/		return 0x82128234;
		  /* 82128234h */ case   22:  		/* li R3, 20 */
		/* 82128234h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82128234h case   22:*/		return 0x82128238;
		  /* 82128238h */ case   23:  		/* bl -389136 */
		/* 82128238h case   23:*/		regs.LR = 0x8212823C; return 0x820C9228;
		/* 82128238h case   23:*/		return 0x8212823C;
		  /* 8212823Ch */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 8212823Ch case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212823Ch case   24:*/		return 0x82128240;
		  /* 82128240h */ case   25:  		/* bc 12, CR0_EQ, -1292 */
		/* 82128240h case   25:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128240h case   25:*/		return 0x82128244;
		  /* 82128244h */ case   26:  		/* lis R11, -32253 */
		/* 82128244h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128244h case   26:*/		return 0x82128248;
	}
	return 0x82128248;
} // Block from 821281DCh-82128248h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82128248h
// Function '?CompileExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00IH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128248);
		  /* 82128248h */ case    0:  		/* addi R6, R11, 15376 */
		/* 82128248h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3C10);
		/* 82128248h case    0:*/		return 0x8212824C;
		  /* 8212824Ch */ case    1:  		/* li R5, 0 */
		/* 8212824Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212824Ch case    1:*/		return 0x82128250;
		  /* 82128250h */ case    2:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128250h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128250h case    2:*/		return 0x82128254;
		  /* 82128254h */ case    3:  		/* bl -388708 */
		/* 82128254h case    3:*/		regs.LR = 0x82128258; return 0x820C93F0;
		/* 82128254h case    3:*/		return 0x82128258;
		  /* 82128258h */ case    4:  		/* b -1324 */
		/* 82128258h case    4:*/		return 0x82127D2C;
		/* 82128258h case    4:*/		return 0x8212825C;
		  /* 8212825Ch */ case    5:  		/* li R3, 20 */
		/* 8212825Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8212825Ch case    5:*/		return 0x82128260;
		  /* 82128260h */ case    6:  		/* bl -389176 */
		/* 82128260h case    6:*/		regs.LR = 0x82128264; return 0x820C9228;
		/* 82128260h case    6:*/		return 0x82128264;
		  /* 82128264h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82128264h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128264h case    7:*/		return 0x82128268;
		  /* 82128268h */ case    8:  		/* bc 12, CR0_EQ, 32 */
		/* 82128268h case    8:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82128268h case    8:*/		return 0x8212826C;
		  /* 8212826Ch */ case    9:  		/* lis R11, -32253 */
		/* 8212826Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212826Ch case    9:*/		return 0x82128270;
		  /* 82128270h */ case   10:  		/* addi R6, R11, 15376 */
		/* 82128270h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3C10);
		/* 82128270h case   10:*/		return 0x82128274;
		  /* 82128274h */ case   11:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128274h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128274h case   11:*/		return 0x82128278;
		  /* 82128278h */ case   12:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128278h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128278h case   12:*/		return 0x8212827C;
		  /* 8212827Ch */ case   13:  		/* bl -388748 */
		/* 8212827Ch case   13:*/		regs.LR = 0x82128280; return 0x820C93F0;
		/* 8212827Ch case   13:*/		return 0x82128280;
		  /* 82128280h */ case   14:  		/* mr R31, R3 */
		/* 82128280h case   14:*/		regs.R31 = regs.R3;
		/* 82128280h case   14:*/		return 0x82128284;
		  /* 82128284h */ case   15:  		/* b 8 */
		/* 82128284h case   15:*/		return 0x8212828C;
		/* 82128284h case   15:*/		return 0x82128288;
	}
	return 0x82128288;
} // Block from 82128248h-82128288h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82128288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128288);
		  /* 82128288h */ case    0:  		/* mr R31, R25 */
		/* 82128288h case    0:*/		regs.R31 = regs.R25;
		/* 82128288h case    0:*/		return 0x8212828C;
	}
	return 0x8212828C;
} // Block from 82128288h-8212828Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212828Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212828C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212828C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212828C);
		  /* 8212828Ch */ case    0:  		/* mr R3, R28 */
		/* 8212828Ch case    0:*/		regs.R3 = regs.R28;
		/* 8212828Ch case    0:*/		return 0x82128290;
		  /* 82128290h */ case    1:  		/* mr R4, R31 */
		/* 82128290h case    1:*/		regs.R4 = regs.R31;
		/* 82128290h case    1:*/		return 0x82128294;
		  /* 82128294h */ case    2:  		/* bl -59516 */
		/* 82128294h case    2:*/		regs.LR = 0x82128298; return 0x82119A18;
		/* 82128294h case    2:*/		return 0x82128298;
		  /* 82128298h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82128298h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128298h case    3:*/		return 0x8212829C;
		  /* 8212829Ch */ case    4:  		/* bc 12, CR0_EQ, 56 */
		/* 8212829Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 8212829Ch case    4:*/		return 0x821282A0;
		  /* 821282A0h */ case    5:  		/* b -1340 */
		/* 821282A0h case    5:*/		return 0x82127D64;
		/* 821282A0h case    5:*/		return 0x821282A4;
		  /* 821282A4h */ case    6:  		/* lwz R11, <#[R1 + 176]> */
		/* 821282A4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821282A4h case    6:*/		return 0x821282A8;
		  /* 821282A8h */ case    7:  		/* addi R10, R1, 128 */
		/* 821282A8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 821282A8h case    7:*/		return 0x821282AC;
		  /* 821282ACh */ case    8:  		/* li R9, 1 */
		/* 821282ACh case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821282ACh case    8:*/		return 0x821282B0;
		  /* 821282B0h */ case    9:  		/* lwz R8, <#[R28 + 20]> */
		/* 821282B0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 821282B0h case    9:*/		return 0x821282B4;
		  /* 821282B4h */ case   10:  		/* li R7, 0 */
		/* 821282B4h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821282B4h case   10:*/		return 0x821282B8;
		  /* 821282B8h */ case   11:  		/* stw R25, <#[R1 + 84]> */
		/* 821282B8h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821282B8h case   11:*/		return 0x821282BC;
		  /* 821282BCh */ case   12:  		/* li R6, 0 */
		/* 821282BCh case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821282BCh case   12:*/		return 0x821282C0;
		  /* 821282C0h */ case   13:  		/* addi R5, R11, 16 */
		/* 821282C0h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 821282C0h case   13:*/		return 0x821282C4;
		  /* 821282C4h */ case   14:  		/* li R4, 0 */
		/* 821282C4h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821282C4h case   14:*/		return 0x821282C8;
		  /* 821282C8h */ case   15:  		/* mr R3, R28 */
		/* 821282C8h case   15:*/		regs.R3 = regs.R28;
		/* 821282C8h case   15:*/		return 0x821282CC;
		  /* 821282CCh */ case   16:  		/* bl -33396 */
		/* 821282CCh case   16:*/		regs.LR = 0x821282D0; return 0x82120058;
		/* 821282CCh case   16:*/		return 0x821282D0;
		  /* 821282D0h */ case   17:  		/* lwz R31, <#[R1 + 128]> */
		/* 821282D0h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 821282D0h case   17:*/		return 0x821282D4;
	}
	return 0x821282D4;
} // Block from 8212828Ch-821282D4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821282D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821282D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821282D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821282D4);
		  /* 821282D4h */ case    0:  		/* lwz R11, <#[R28 + 84]> */
		/* 821282D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000054) );
		/* 821282D4h case    0:*/		return 0x821282D8;
		  /* 821282D8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821282D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821282D8h case    1:*/		return 0x821282DC;
		  /* 821282DCh */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 821282DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82128308;  }
		/* 821282DCh case    2:*/		return 0x821282E0;
		  /* 821282E0h */ case    3:  		/* lwz R11, <#[R28 + 12]> */
		/* 821282E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821282E0h case    3:*/		return 0x821282E4;
		  /* 821282E4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821282E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821282E4h case    4:*/		return 0x821282E8;
		  /* 821282E8h */ case    5:  		/* bc 12, CR6_EQ, 7556 */
		/* 821282E8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8212A06C;  }
		/* 821282E8h case    5:*/		return 0x821282EC;
		  /* 821282ECh */ case    6:  		/* lwz R10, <#[R11 + 12]> */
		/* 821282ECh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821282ECh case    6:*/		return 0x821282F0;
		  /* 821282F0h */ case    7:  		/* mr R3, R11 */
		/* 821282F0h case    7:*/		regs.R3 = regs.R11;
		/* 821282F0h case    7:*/		return 0x821282F4;
		  /* 821282F4h */ case    8:  		/* stw R10, <#[R28 + 12]> */
		/* 821282F4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821282F4h case    8:*/		return 0x821282F8;
		  /* 821282F8h */ case    9:  		/* stw R31, <#[R11 + 8]> */
		/* 821282F8h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 821282F8h case    9:*/		return 0x821282FC;
		  /* 821282FCh */ case   10:  		/* lwz R10, <#[R28 + 8]> */
		/* 821282FCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821282FCh case   10:*/		return 0x82128300;
		  /* 82128300h */ case   11:  		/* stw R10, <#[R11 + 12]> */
		/* 82128300h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82128300h case   11:*/		return 0x82128304;
		  /* 82128304h */ case   12:  		/* stw R3, <#[R28 + 8]> */
		/* 82128304h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000008) );
		/* 82128304h case   12:*/		return 0x82128308;
	}
	return 0x82128308;
} // Block from 821282D4h-82128308h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82128308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128308);
		  /* 82128308h */ case    0:  		/* addi R1, R1, 304 */
		/* 82128308h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 82128308h case    0:*/		return 0x8212830C;
		  /* 8212830Ch */ case    1:  		/* b -618608 */
		/* 8212830Ch case    1:*/		return 0x8209129C;
		/* 8212830Ch case    1:*/		return 0x82128310;
		  /* 82128310h */ case    2:  		/* lwz R11, <#[R1 + 176]> */
		/* 82128310h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128310h case    2:*/		return 0x82128314;
		  /* 82128314h */ case    3:  		/* addi R10, R1, 128 */
		/* 82128314h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82128314h case    3:*/		return 0x82128318;
		  /* 82128318h */ case    4:  		/* li R9, 1 */
		/* 82128318h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82128318h case    4:*/		return 0x8212831C;
		  /* 8212831Ch */ case    5:  		/* lwz R8, <#[R28 + 20]> */
		/* 8212831Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 8212831Ch case    5:*/		return 0x82128320;
		  /* 82128320h */ case    6:  		/* li R7, 0 */
		/* 82128320h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128320h case    6:*/		return 0x82128324;
		  /* 82128324h */ case    7:  		/* stw R25, <#[R1 + 84]> */
		/* 82128324h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 82128324h case    7:*/		return 0x82128328;
		  /* 82128328h */ case    8:  		/* li R6, 0 */
		/* 82128328h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128328h case    8:*/		return 0x8212832C;
		  /* 8212832Ch */ case    9:  		/* addi R5, R11, 16 */
		/* 8212832Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8212832Ch case    9:*/		return 0x82128330;
		  /* 82128330h */ case   10:  		/* li R4, 0 */
		/* 82128330h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128330h case   10:*/		return 0x82128334;
		  /* 82128334h */ case   11:  		/* mr R3, R28 */
		/* 82128334h case   11:*/		regs.R3 = regs.R28;
		/* 82128334h case   11:*/		return 0x82128338;
		  /* 82128338h */ case   12:  		/* bl -33504 */
		/* 82128338h case   12:*/		regs.LR = 0x8212833C; return 0x82120058;
		/* 82128338h case   12:*/		return 0x8212833C;
		  /* 8212833Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 8212833Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212833Ch case   13:*/		return 0x82128340;
		  /* 82128340h */ case   14:  		/* bc 4, CR0_EQ, -112 */
		/* 82128340h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821282D0;  }
		/* 82128340h case   14:*/		return 0x82128344;
		  /* 82128344h */ case   15:  		/* lwz R31, <#[R1 + 128]> */
		/* 82128344h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 82128344h case   15:*/		return 0x82128348;
		  /* 82128348h */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 82128348h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82128348h case   16:*/		return 0x8212834C;
		  /* 8212834Ch */ case   17:  		/* bc 12, CR6_EQ, -120 */
		/* 8212834Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821282D4;  }
		/* 8212834Ch case   17:*/		return 0x82128350;
		  /* 82128350h */ case   18:  		/* lwz R11, <#[R31 + 4]> */
		/* 82128350h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82128350h case   18:*/		return 0x82128354;
		  /* 82128354h */ case   19:  		/* cmpwi CR6, R11, 1 */
		/* 82128354h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82128354h case   19:*/		return 0x82128358;
		  /* 82128358h */ case   20:  		/* bc 12, CR6_EQ, -132 */
		/* 82128358h case   20:*/		if ( regs.CR[6].eq ) { return 0x821282D4;  }
		/* 82128358h case   20:*/		return 0x8212835C;
		  /* 8212835Ch */ case   21:  		/* lwz R11, <#[R1 + 176]> */
		/* 8212835Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212835Ch case   21:*/		return 0x82128360;
		  /* 82128360h */ case   22:  		/* lis R10, -32253 */
		/* 82128360h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82128360h case   22:*/		return 0x82128364;
		  /* 82128364h */ case   23:  		/* li R5, 3005 */
		/* 82128364h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0xBBD);
		/* 82128364h case   23:*/		return 0x82128368;
		  /* 82128368h */ case   24:  		/* addi R4, R11, 16 */
		/* 82128368h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 82128368h case   24:*/		return 0x8212836C;
		  /* 8212836Ch */ case   25:  		/* addi R6, R10, 15356 */
		/* 8212836Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x3BFC);
		/* 8212836Ch case   25:*/		return 0x82128370;
		  /* 82128370h */ case   26:  		/* mr R3, R28 */
		/* 82128370h case   26:*/		regs.R3 = regs.R28;
		/* 82128370h case   26:*/		return 0x82128374;
		  /* 82128374h */ case   27:  		/* lwz R7, <#[R11 + 24]> */
		/* 82128374h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82128374h case   27:*/		return 0x82128378;
		  /* 82128378h */ case   28:  		/* bl -60120 */
		/* 82128378h case   28:*/		regs.LR = 0x8212837C; return 0x821198A0;
		/* 82128378h case   28:*/		return 0x8212837C;
		  /* 8212837Ch */ case   29:  		/* b -168 */
		/* 8212837Ch case   29:*/		return 0x821282D4;
		/* 8212837Ch case   29:*/		return 0x82128380;
		  /* 82128380h */ case   30:  		/* lwz R11, <#[R1 + 176]> */
		/* 82128380h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128380h case   30:*/		return 0x82128384;
		  /* 82128384h */ case   31:  		/* addi R10, R1, 128 */
		/* 82128384h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82128384h case   31:*/		return 0x82128388;
		  /* 82128388h */ case   32:  		/* li R9, 32 */
		/* 82128388h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x20);
		/* 82128388h case   32:*/		return 0x8212838C;
		  /* 8212838Ch */ case   33:  		/* lwz R8, <#[R28 + 20]> */
		/* 8212838Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 8212838Ch case   33:*/		return 0x82128390;
		  /* 82128390h */ case   34:  		/* li R7, 0 */
		/* 82128390h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128390h case   34:*/		return 0x82128394;
		  /* 82128394h */ case   35:  		/* stw R25, <#[R1 + 84]> */
		/* 82128394h case   35:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 82128394h case   35:*/		return 0x82128398;
		  /* 82128398h */ case   36:  		/* li R6, 0 */
		/* 82128398h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128398h case   36:*/		return 0x8212839C;
		  /* 8212839Ch */ case   37:  		/* addi R5, R11, 16 */
		/* 8212839Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8212839Ch case   37:*/		return 0x821283A0;
		  /* 821283A0h */ case   38:  		/* li R4, 0 */
		/* 821283A0h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821283A0h case   38:*/		return 0x821283A4;
		  /* 821283A4h */ case   39:  		/* mr R3, R28 */
		/* 821283A4h case   39:*/		regs.R3 = regs.R28;
		/* 821283A4h case   39:*/		return 0x821283A8;
		  /* 821283A8h */ case   40:  		/* bl -33616 */
		/* 821283A8h case   40:*/		regs.LR = 0x821283AC; return 0x82120058;
		/* 821283A8h case   40:*/		return 0x821283AC;
		  /* 821283ACh */ case   41:  		/* b -220 */
		/* 821283ACh case   41:*/		return 0x821282D0;
		/* 821283ACh case   41:*/		return 0x821283B0;
		  /* 821283B0h */ case   42:  		/* lwz R11, <#[R1 + 176]> */
		/* 821283B0h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821283B0h case   42:*/		return 0x821283B4;
		  /* 821283B4h */ case   43:  		/* addi R10, R1, 128 */
		/* 821283B4h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 821283B4h case   43:*/		return 0x821283B8;
		  /* 821283B8h */ case   44:  		/* li R9, 128 */
		/* 821283B8h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x80);
		/* 821283B8h case   44:*/		return 0x821283BC;
		  /* 821283BCh */ case   45:  		/* lwz R8, <#[R28 + 20]> */
		/* 821283BCh case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 821283BCh case   45:*/		return 0x821283C0;
		  /* 821283C0h */ case   46:  		/* li R7, 0 */
		/* 821283C0h case   46:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821283C0h case   46:*/		return 0x821283C4;
		  /* 821283C4h */ case   47:  		/* stw R25, <#[R1 + 84]> */
		/* 821283C4h case   47:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821283C4h case   47:*/		return 0x821283C8;
		  /* 821283C8h */ case   48:  		/* li R6, 0 */
		/* 821283C8h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821283C8h case   48:*/		return 0x821283CC;
		  /* 821283CCh */ case   49:  		/* addi R5, R11, 16 */
		/* 821283CCh case   49:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 821283CCh case   49:*/		return 0x821283D0;
		  /* 821283D0h */ case   50:  		/* li R4, 0 */
		/* 821283D0h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821283D0h case   50:*/		return 0x821283D4;
		  /* 821283D4h */ case   51:  		/* mr R3, R28 */
		/* 821283D4h case   51:*/		regs.R3 = regs.R28;
		/* 821283D4h case   51:*/		return 0x821283D8;
		  /* 821283D8h */ case   52:  		/* bl -33664 */
		/* 821283D8h case   52:*/		regs.LR = 0x821283DC; return 0x82120058;
		/* 821283D8h case   52:*/		return 0x821283DC;
		  /* 821283DCh */ case   53:  		/* b -268 */
		/* 821283DCh case   53:*/		return 0x821282D0;
		/* 821283DCh case   53:*/		return 0x821283E0;
		  /* 821283E0h */ case   54:  		/* stw R25, <#[R1 + 84]> */
		/* 821283E0h case   54:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821283E0h case   54:*/		return 0x821283E4;
		  /* 821283E4h */ case   55:  		/* addi R10, R1, 128 */
		/* 821283E4h case   55:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 821283E4h case   55:*/		return 0x821283E8;
		  /* 821283E8h */ case   56:  		/* lwz R11, <#[R1 + 176]> */
		/* 821283E8h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821283E8h case   56:*/		return 0x821283EC;
		  /* 821283ECh */ case   57:  		/* li R9, 64 */
		/* 821283ECh case   57:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 821283ECh case   57:*/		return 0x821283F0;
		  /* 821283F0h */ case   58:  		/* li R7, 0 */
		/* 821283F0h case   58:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821283F0h case   58:*/		return 0x821283F4;
		  /* 821283F4h */ case   59:  		/* lwz R8, <#[R28 + 20]> */
		/* 821283F4h case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 821283F4h case   59:*/		return 0x821283F8;
		  /* 821283F8h */ case   60:  		/* li R6, 0 */
		/* 821283F8h case   60:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821283F8h case   60:*/		return 0x821283FC;
		  /* 821283FCh */ case   61:  		/* addi R5, R11, 16 */
		/* 821283FCh case   61:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 821283FCh case   61:*/		return 0x82128400;
		  /* 82128400h */ case   62:  		/* li R4, 0 */
		/* 82128400h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128400h case   62:*/		return 0x82128404;
		  /* 82128404h */ case   63:  		/* mr R3, R28 */
		/* 82128404h case   63:*/		regs.R3 = regs.R28;
		/* 82128404h case   63:*/		return 0x82128408;
		  /* 82128408h */ case   64:  		/* bl -33712 */
		/* 82128408h case   64:*/		regs.LR = 0x8212840C; return 0x82120058;
		/* 82128408h case   64:*/		return 0x8212840C;
		  /* 8212840Ch */ case   65:  		/* b -316 */
		/* 8212840Ch case   65:*/		return 0x821282D0;
		/* 8212840Ch case   65:*/		return 0x82128410;
		  /* 82128410h */ case   66:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128410h case   66:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128410h case   66:*/		return 0x82128414;
		  /* 82128414h */ case   67:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128414h case   67:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128414h case   67:*/		return 0x82128418;
		  /* 82128418h */ case   68:  		/* mr R3, R28 */
		/* 82128418h case   68:*/		regs.R3 = regs.R28;
		/* 82128418h case   68:*/		return 0x8212841C;
		  /* 8212841Ch */ case   69:  		/* bl -45996 */
		/* 8212841Ch case   69:*/		regs.LR = 0x82128420; return 0x8211D070;
		/* 8212841Ch case   69:*/		return 0x82128420;
		  /* 82128420h */ case   70:  		/* b -580 */
		/* 82128420h case   70:*/		return 0x821281DC;
		/* 82128420h case   70:*/		return 0x82128424;
		  /* 82128424h */ case   71:  		/* mr R3, R28 */
		/* 82128424h case   71:*/		regs.R3 = regs.R28;
		/* 82128424h case   71:*/		return 0x82128428;
		  /* 82128428h */ case   72:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128428h case   72:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128428h case   72:*/		return 0x8212842C;
		  /* 8212842Ch */ case   73:  		/* lwz R4, <#[R1 + 176]> */
		/* 8212842Ch case   73:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212842Ch case   73:*/		return 0x82128430;
		  /* 82128430h */ case   74:  		/* bl -29944 */
		/* 82128430h case   74:*/		regs.LR = 0x82128434; return 0x82120F38;
		/* 82128430h case   74:*/		return 0x82128434;
		  /* 82128434h */ case   75:  		/* b -1800 */
		/* 82128434h case   75:*/		return 0x82127D2C;
		/* 82128434h case   75:*/		return 0x82128438;
		  /* 82128438h */ case   76:  		/* li R3, 40 */
		/* 82128438h case   76:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128438h case   76:*/		return 0x8212843C;
		  /* 8212843Ch */ case   77:  		/* bl -389652 */
		/* 8212843Ch case   77:*/		regs.LR = 0x82128440; return 0x820C9228;
		/* 8212843Ch case   77:*/		return 0x82128440;
		  /* 82128440h */ case   78:  		/* cmplwi CR0, R3, 0 */
		/* 82128440h case   78:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128440h case   78:*/		return 0x82128444;
		  /* 82128444h */ case   79:  		/* bc 12, CR0_EQ, -1884 */
		/* 82128444h case   79:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128444h case   79:*/		return 0x82128448;
		  /* 82128448h */ case   80:  		/* li R5, 0 */
		/* 82128448h case   80:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128448h case   80:*/		return 0x8212844C;
		  /* 8212844Ch */ case   81:  		/* li R8, 1 */
		/* 8212844Ch case   81:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8212844Ch case   81:*/		return 0x82128450;
		  /* 82128450h */ case   82:  		/* li R4, 0 */
		/* 82128450h case   82:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128450h case   82:*/		return 0x82128454;
		  /* 82128454h */ case   83:  		/* li R7, 1 */
		/* 82128454h case   83:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128454h case   83:*/		return 0x82128458;
		  /* 82128458h */ case   84:  		/* li R6, 0 */
		/* 82128458h case   84:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128458h case   84:*/		return 0x8212845C;
		  /* 8212845Ch */ case   85:  		/* li R9, 0 */
		/* 8212845Ch case   85:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8212845Ch case   85:*/		return 0x82128460;
		  /* 82128460h */ case   86:  		/* bl -382944 */
		/* 82128460h case   86:*/		regs.LR = 0x82128464; return 0x820CAC80;
		/* 82128460h case   86:*/		return 0x82128464;
		  /* 82128464h */ case   87:  		/* b -1924 */
		/* 82128464h case   87:*/		return 0x82127CE0;
		/* 82128464h case   87:*/		return 0x82128468;
		  /* 82128468h */ case   88:  		/* li R3, 40 */
		/* 82128468h case   88:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128468h case   88:*/		return 0x8212846C;
		  /* 8212846Ch */ case   89:  		/* bl -389700 */
		/* 8212846Ch case   89:*/		regs.LR = 0x82128470; return 0x820C9228;
		/* 8212846Ch case   89:*/		return 0x82128470;
		  /* 82128470h */ case   90:  		/* cmplwi CR0, R3, 0 */
		/* 82128470h case   90:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128470h case   90:*/		return 0x82128474;
		  /* 82128474h */ case   91:  		/* bc 12, CR0_EQ, -1932 */
		/* 82128474h case   91:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128474h case   91:*/		return 0x82128478;
		  /* 82128478h */ case   92:  		/* li R5, 5 */
		/* 82128478h case   92:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82128478h case   92:*/		return 0x8212847C;
		  /* 8212847Ch */ case   93:  		/* b -48 */
		/* 8212847Ch case   93:*/		return 0x8212844C;
		/* 8212847Ch case   93:*/		return 0x82128480;
		  /* 82128480h */ case   94:  		/* li R3, 40 */
		/* 82128480h case   94:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128480h case   94:*/		return 0x82128484;
		  /* 82128484h */ case   95:  		/* bl -389724 */
		/* 82128484h case   95:*/		regs.LR = 0x82128488; return 0x820C9228;
		/* 82128484h case   95:*/		return 0x82128488;
		  /* 82128488h */ case   96:  		/* cmplwi CR0, R3, 0 */
		/* 82128488h case   96:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128488h case   96:*/		return 0x8212848C;
		  /* 8212848Ch */ case   97:  		/* bc 12, CR0_EQ, -1956 */
		/* 8212848Ch case   97:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212848Ch case   97:*/		return 0x82128490;
		  /* 82128490h */ case   98:  		/* li R5, 11 */
		/* 82128490h case   98:*/		cpu::op::li<0>(regs,&regs.R5,0xB);
		/* 82128490h case   98:*/		return 0x82128494;
		  /* 82128494h */ case   99:  		/* b -72 */
		/* 82128494h case   99:*/		return 0x8212844C;
		/* 82128494h case   99:*/		return 0x82128498;
		  /* 82128498h */ case  100:  		/* li R3, 40 */
		/* 82128498h case  100:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128498h case  100:*/		return 0x8212849C;
		  /* 8212849Ch */ case  101:  		/* bl -389748 */
		/* 8212849Ch case  101:*/		regs.LR = 0x821284A0; return 0x820C9228;
		/* 8212849Ch case  101:*/		return 0x821284A0;
		  /* 821284A0h */ case  102:  		/* cmplwi CR0, R3, 0 */
		/* 821284A0h case  102:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821284A0h case  102:*/		return 0x821284A4;
		  /* 821284A4h */ case  103:  		/* bc 12, CR0_EQ, -1980 */
		/* 821284A4h case  103:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821284A4h case  103:*/		return 0x821284A8;
		  /* 821284A8h */ case  104:  		/* li R5, 12 */
		/* 821284A8h case  104:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 821284A8h case  104:*/		return 0x821284AC;
		  /* 821284ACh */ case  105:  		/* b -96 */
		/* 821284ACh case  105:*/		return 0x8212844C;
		/* 821284ACh case  105:*/		return 0x821284B0;
		  /* 821284B0h */ case  106:  		/* li R3, 40 */
		/* 821284B0h case  106:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821284B0h case  106:*/		return 0x821284B4;
		  /* 821284B4h */ case  107:  		/* bl -389772 */
		/* 821284B4h case  107:*/		regs.LR = 0x821284B8; return 0x820C9228;
		/* 821284B4h case  107:*/		return 0x821284B8;
		  /* 821284B8h */ case  108:  		/* cmplwi CR0, R3, 0 */
		/* 821284B8h case  108:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821284B8h case  108:*/		return 0x821284BC;
		  /* 821284BCh */ case  109:  		/* bc 12, CR0_EQ, -2004 */
		/* 821284BCh case  109:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821284BCh case  109:*/		return 0x821284C0;
		  /* 821284C0h */ case  110:  		/* li R5, 13 */
		/* 821284C0h case  110:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 821284C0h case  110:*/		return 0x821284C4;
		  /* 821284C4h */ case  111:  		/* b -120 */
		/* 821284C4h case  111:*/		return 0x8212844C;
		/* 821284C4h case  111:*/		return 0x821284C8;
	}
	return 0x821284C8;
} // Block from 82128308h-821284C8h (112 instructions)

//////////////////////////////////////////////////////
// Block at 821284C8h
// Function '?Static_AsmFindDeclCallback@CParse@D3DXShader@@KAJPAXPAUD3DXTOKEN@2@KPAPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821284C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821284C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821284C8);
		  /* 821284C8h */ case    0:  		/* li R3, 40 */
		/* 821284C8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821284C8h case    0:*/		return 0x821284CC;
		  /* 821284CCh */ case    1:  		/* bl -389796 */
		/* 821284CCh case    1:*/		regs.LR = 0x821284D0; return 0x820C9228;
		/* 821284CCh case    1:*/		return 0x821284D0;
		  /* 821284D0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821284D0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821284D0h case    2:*/		return 0x821284D4;
		  /* 821284D4h */ case    3:  		/* bc 12, CR0_EQ, -2028 */
		/* 821284D4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821284D4h case    3:*/		return 0x821284D8;
		  /* 821284D8h */ case    4:  		/* li R5, 9 */
		/* 821284D8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 821284D8h case    4:*/		return 0x821284DC;
		  /* 821284DCh */ case    5:  		/* b -144 */
		/* 821284DCh case    5:*/		return 0x8212844C;
		/* 821284DCh case    5:*/		return 0x821284E0;
		  /* 821284E0h */ case    6:  		/* li R3, 40 */
		/* 821284E0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821284E0h case    6:*/		return 0x821284E4;
		  /* 821284E4h */ case    7:  		/* bl -389820 */
		/* 821284E4h case    7:*/		regs.LR = 0x821284E8; return 0x820C9228;
		/* 821284E4h case    7:*/		return 0x821284E8;
		  /* 821284E8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821284E8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821284E8h case    8:*/		return 0x821284EC;
		  /* 821284ECh */ case    9:  		/* bc 12, CR0_EQ, -2052 */
		/* 821284ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821284ECh case    9:*/		return 0x821284F0;
		  /* 821284F0h */ case   10:  		/* li R5, 16 */
		/* 821284F0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821284F0h case   10:*/		return 0x821284F4;
		  /* 821284F4h */ case   11:  		/* b -168 */
		/* 821284F4h case   11:*/		return 0x8212844C;
		/* 821284F4h case   11:*/		return 0x821284F8;
		  /* 821284F8h */ case   12:  		/* li R3, 40 */
		/* 821284F8h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821284F8h case   12:*/		return 0x821284FC;
		  /* 821284FCh */ case   13:  		/* bl -389844 */
		/* 821284FCh case   13:*/		regs.LR = 0x82128500; return 0x820C9228;
		/* 821284FCh case   13:*/		return 0x82128500;
		  /* 82128500h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 82128500h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128500h case   14:*/		return 0x82128504;
		  /* 82128504h */ case   15:  		/* bc 12, CR0_EQ, -2076 */
		/* 82128504h case   15:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128504h case   15:*/		return 0x82128508;
		  /* 82128508h */ case   16:  		/* li R5, 20 */
		/* 82128508h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 82128508h case   16:*/		return 0x8212850C;
		  /* 8212850Ch */ case   17:  		/* b -192 */
		/* 8212850Ch case   17:*/		return 0x8212844C;
		/* 8212850Ch case   17:*/		return 0x82128510;
	}
	return 0x82128510;
} // Block from 821284C8h-82128510h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82128510h
// Function '?AsmBlock@CParse@D3DXShader@@IAAPAVCNode@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128510);
		  /* 82128510h */ case    0:  		/* li R3, 40 */
		/* 82128510h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128510h case    0:*/		return 0x82128514;
		  /* 82128514h */ case    1:  		/* bl -389868 */
		/* 82128514h case    1:*/		regs.LR = 0x82128518; return 0x820C9228;
		/* 82128514h case    1:*/		return 0x82128518;
		  /* 82128518h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82128518h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128518h case    2:*/		return 0x8212851C;
		  /* 8212851Ch */ case    3:  		/* bc 12, CR0_EQ, -2100 */
		/* 8212851Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212851Ch case    3:*/		return 0x82128520;
		  /* 82128520h */ case    4:  		/* li R8, 4 */
		/* 82128520h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82128520h case    4:*/		return 0x82128524;
		  /* 82128524h */ case    5:  		/* li R5, 12 */
		/* 82128524h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128524h case    5:*/		return 0x82128528;
		  /* 82128528h */ case    6:  		/* li R4, 1 */
		/* 82128528h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128528h case    6:*/		return 0x8212852C;
		  /* 8212852Ch */ case    7:  		/* b -216 */
		/* 8212852Ch case    7:*/		return 0x82128454;
		/* 8212852Ch case    7:*/		return 0x82128530;
		  /* 82128530h */ case    8:  		/* mr R3, R28 */
		/* 82128530h case    8:*/		regs.R3 = regs.R28;
		/* 82128530h case    8:*/		return 0x82128534;
		  /* 82128534h */ case    9:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128534h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128534h case    9:*/		return 0x82128538;
		  /* 82128538h */ case   10:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128538h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128538h case   10:*/		return 0x8212853C;
		  /* 8212853Ch */ case   11:  		/* bl -30628 */
		/* 8212853Ch case   11:*/		regs.LR = 0x82128540; return 0x82120D98;
		/* 8212853Ch case   11:*/		return 0x82128540;
		  /* 82128540h */ case   12:  		/* b -2144 */
		/* 82128540h case   12:*/		return 0x82127CE0;
		/* 82128540h case   12:*/		return 0x82128544;
		  /* 82128544h */ case   13:  		/* li R3, 40 */
		/* 82128544h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128544h case   13:*/		return 0x82128548;
		  /* 82128548h */ case   14:  		/* bl -389920 */
		/* 82128548h case   14:*/		regs.LR = 0x8212854C; return 0x820C9228;
		/* 82128548h case   14:*/		return 0x8212854C;
		  /* 8212854Ch */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8212854Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212854Ch case   15:*/		return 0x82128550;
		  /* 82128550h */ case   16:  		/* bc 12, CR0_EQ, -2152 */
		/* 82128550h case   16:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128550h case   16:*/		return 0x82128554;
		  /* 82128554h */ case   17:  		/* li R8, 4 */
		/* 82128554h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82128554h case   17:*/		return 0x82128558;
		  /* 82128558h */ case   18:  		/* li R7, 4 */
		/* 82128558h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82128558h case   18:*/		return 0x8212855C;
		  /* 8212855Ch */ case   19:  		/* li R5, 12 */
		/* 8212855Ch case   19:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8212855Ch case   19:*/		return 0x82128560;
		  /* 82128560h */ case   20:  		/* li R4, 2 */
		/* 82128560h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82128560h case   20:*/		return 0x82128564;
		  /* 82128564h */ case   21:  		/* b -268 */
		/* 82128564h case   21:*/		return 0x82128458;
		/* 82128564h case   21:*/		return 0x82128568;
		  /* 82128568h */ case   22:  		/* mr R3, R28 */
		/* 82128568h case   22:*/		regs.R3 = regs.R28;
		/* 82128568h case   22:*/		return 0x8212856C;
		  /* 8212856Ch */ case   23:  		/* lwz R6, <#[R1 + 184]> */
		/* 8212856Ch case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 8212856Ch case   23:*/		return 0x82128570;
		  /* 82128570h */ case   24:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128570h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128570h case   24:*/		return 0x82128574;
		  /* 82128574h */ case   25:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128574h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128574h case   25:*/		return 0x82128578;
		  /* 82128578h */ case   26:  		/* bl -30504 */
		/* 82128578h case   26:*/		regs.LR = 0x8212857C; return 0x82120E50;
		/* 82128578h case   26:*/		return 0x8212857C;
		  /* 8212857Ch */ case   27:  		/* b -2204 */
		/* 8212857Ch case   27:*/		return 0x82127CE0;
		/* 8212857Ch case   27:*/		return 0x82128580;
		  /* 82128580h */ case   28:  		/* li R3, 40 */
		/* 82128580h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128580h case   28:*/		return 0x82128584;
		  /* 82128584h */ case   29:  		/* bl -389980 */
		/* 82128584h case   29:*/		regs.LR = 0x82128588; return 0x820C9228;
		/* 82128584h case   29:*/		return 0x82128588;
		  /* 82128588h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 82128588h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128588h case   30:*/		return 0x8212858C;
		  /* 8212858Ch */ case   31:  		/* bc 12, CR0_EQ, -2212 */
		/* 8212858Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212858Ch case   31:*/		return 0x82128590;
		  /* 82128590h */ case   32:  		/* li R5, 23 */
		/* 82128590h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x17);
		/* 82128590h case   32:*/		return 0x82128594;
		  /* 82128594h */ case   33:  		/* li R6, 0 */
		/* 82128594h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128594h case   33:*/		return 0x82128598;
		  /* 82128598h */ case   34:  		/* li R7, 1 */
		/* 82128598h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128598h case   34:*/		return 0x8212859C;
		  /* 8212859Ch */ case   35:  		/* li R8, 1 */
		/* 8212859Ch case   35:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8212859Ch case   35:*/		return 0x821285A0;
		  /* 821285A0h */ case   36:  		/* li R4, 3 */
		/* 821285A0h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821285A0h case   36:*/		return 0x821285A4;
		  /* 821285A4h */ case   37:  		/* b -328 */
		/* 821285A4h case   37:*/		return 0x8212845C;
		/* 821285A4h case   37:*/		return 0x821285A8;
		  /* 821285A8h */ case   38:  		/* lwz R11, <#[R28]> */
		/* 821285A8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821285A8h case   38:*/		return 0x821285AC;
		  /* 821285ACh */ case   39:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821285ACh case   39:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821285ACh case   39:*/		return 0x821285B0;
		  /* 821285B0h */ case   40:  		/* bc 4, CR0_EQ, 28 */
		/* 821285B0h case   40:*/		if ( !regs.CR[0].eq ) { return 0x821285CC;  }
		/* 821285B0h case   40:*/		return 0x821285B4;
		  /* 821285B4h */ case   41:  		/* li R3, 40 */
		/* 821285B4h case   41:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821285B4h case   41:*/		return 0x821285B8;
		  /* 821285B8h */ case   42:  		/* bl -390032 */
		/* 821285B8h case   42:*/		regs.LR = 0x821285BC; return 0x820C9228;
		/* 821285B8h case   42:*/		return 0x821285BC;
		  /* 821285BCh */ case   43:  		/* cmplwi CR0, R3, 0 */
		/* 821285BCh case   43:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821285BCh case   43:*/		return 0x821285C0;
		  /* 821285C0h */ case   44:  		/* bc 12, CR0_EQ, -2264 */
		/* 821285C0h case   44:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821285C0h case   44:*/		return 0x821285C4;
		  /* 821285C4h */ case   45:  		/* li R5, 24 */
		/* 821285C4h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 821285C4h case   45:*/		return 0x821285C8;
		  /* 821285C8h */ case   46:  		/* b -52 */
		/* 821285C8h case   46:*/		return 0x82128594;
		/* 821285C8h case   46:*/		return 0x821285CC;
	}
	return 0x821285CC;
} // Block from 82128510h-821285CCh (47 instructions)

//////////////////////////////////////////////////////
// Block at 821285CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821285CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821285CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821285CC);
		  /* 821285CCh */ case    0:  		/* lis R11, -32253 */
		/* 821285CCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821285CCh case    0:*/		return 0x821285D0;
		  /* 821285D0h */ case    1:  		/* addi R6, R11, 15308 */
		/* 821285D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3BCC);
		/* 821285D0h case    1:*/		return 0x821285D4;
		  /* 821285D4h */ case    2:  		/* li R5, 3086 */
		/* 821285D4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC0E);
		/* 821285D4h case    2:*/		return 0x821285D8;
		  /* 821285D8h */ case    3:  		/* addi R4, R28, 40 */
		/* 821285D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x28);
		/* 821285D8h case    3:*/		return 0x821285DC;
		  /* 821285DCh */ case    4:  		/* mr R3, R28 */
		/* 821285DCh case    4:*/		regs.R3 = regs.R28;
		/* 821285DCh case    4:*/		return 0x821285E0;
		  /* 821285E0h */ case    5:  		/* bl -60736 */
		/* 821285E0h case    5:*/		regs.LR = 0x821285E4; return 0x821198A0;
		/* 821285E0h case    5:*/		return 0x821285E4;
		  /* 821285E4h */ case    6:  		/* b -784 */
		/* 821285E4h case    6:*/		return 0x821282D4;
		/* 821285E4h case    6:*/		return 0x821285E8;
		  /* 821285E8h */ case    7:  		/* li R3, 40 */
		/* 821285E8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821285E8h case    7:*/		return 0x821285EC;
		  /* 821285ECh */ case    8:  		/* bl -390084 */
		/* 821285ECh case    8:*/		regs.LR = 0x821285F0; return 0x820C9228;
		/* 821285ECh case    8:*/		return 0x821285F0;
		  /* 821285F0h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821285F0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821285F0h case    9:*/		return 0x821285F4;
		  /* 821285F4h */ case   10:  		/* bc 12, CR0_EQ, 40 */
		/* 821285F4h case   10:*/		if ( regs.CR[0].eq ) { return 0x8212861C;  }
		/* 821285F4h case   10:*/		return 0x821285F8;
		  /* 821285F8h */ case   11:  		/* li R9, 0 */
		/* 821285F8h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821285F8h case   11:*/		return 0x821285FC;
		  /* 821285FCh */ case   12:  		/* li R8, 4 */
		/* 821285FCh case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821285FCh case   12:*/		return 0x82128600;
		  /* 82128600h */ case   13:  		/* li R7, 1 */
		/* 82128600h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128600h case   13:*/		return 0x82128604;
		  /* 82128604h */ case   14:  		/* li R6, 0 */
		/* 82128604h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128604h case   14:*/		return 0x82128608;
		  /* 82128608h */ case   15:  		/* li R5, 12 */
		/* 82128608h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128608h case   15:*/		return 0x8212860C;
		  /* 8212860Ch */ case   16:  		/* li R4, 1 */
		/* 8212860Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212860Ch case   16:*/		return 0x82128610;
		  /* 82128610h */ case   17:  		/* bl -383376 */
		/* 82128610h case   17:*/		regs.LR = 0x82128614; return 0x820CAC80;
		/* 82128610h case   17:*/		return 0x82128614;
		  /* 82128614h */ case   18:  		/* mr R31, R3 */
		/* 82128614h case   18:*/		regs.R31 = regs.R3;
		/* 82128614h case   18:*/		return 0x82128618;
		  /* 82128618h */ case   19:  		/* b 8 */
		/* 82128618h case   19:*/		return 0x82128620;
		/* 82128618h case   19:*/		return 0x8212861C;
	}
	return 0x8212861C;
} // Block from 821285CCh-8212861Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8212861Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212861C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212861C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212861C);
		  /* 8212861Ch */ case    0:  		/* mr R31, R25 */
		/* 8212861Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212861Ch case    0:*/		return 0x82128620;
	}
	return 0x82128620;
} // Block from 8212861Ch-82128620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128620);
		  /* 82128620h */ case    0:  		/* mr R4, R31 */
		/* 82128620h case    0:*/		regs.R4 = regs.R31;
		/* 82128620h case    0:*/		return 0x82128624;
		  /* 82128624h */ case    1:  		/* mr R3, R28 */
		/* 82128624h case    1:*/		regs.R3 = regs.R28;
		/* 82128624h case    1:*/		return 0x82128628;
		  /* 82128628h */ case    2:  		/* bl -60432 */
		/* 82128628h case    2:*/		regs.LR = 0x8212862C; return 0x82119A18;
		/* 82128628h case    2:*/		return 0x8212862C;
		  /* 8212862Ch */ case    3:  		/* li R3, 40 */
		/* 8212862Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212862Ch case    3:*/		return 0x82128630;
		  /* 82128630h */ case    4:  		/* bl -390152 */
		/* 82128630h case    4:*/		regs.LR = 0x82128634; return 0x820C9228;
		/* 82128630h case    4:*/		return 0x82128634;
		  /* 82128634h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128634h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128634h case    5:*/		return 0x82128638;
		  /* 82128638h */ case    6:  		/* bc 12, CR0_EQ, -2384 */
		/* 82128638h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128638h case    6:*/		return 0x8212863C;
		  /* 8212863Ch */ case    7:  		/* mr R6, R31 */
		/* 8212863Ch case    7:*/		regs.R6 = regs.R31;
		/* 8212863Ch case    7:*/		return 0x82128640;
		  /* 82128640h */ case    8:  		/* li R5, 25 */
		/* 82128640h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x19);
		/* 82128640h case    8:*/		return 0x82128644;
		  /* 82128644h */ case    9:  		/* b -172 */
		/* 82128644h case    9:*/		return 0x82128598;
		/* 82128644h case    9:*/		return 0x82128648;
		  /* 82128648h */ case   10:  		/* li R3, 40 */
		/* 82128648h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128648h case   10:*/		return 0x8212864C;
		  /* 8212864Ch */ case   11:  		/* bl -390180 */
		/* 8212864Ch case   11:*/		regs.LR = 0x82128650; return 0x820C9228;
		/* 8212864Ch case   11:*/		return 0x82128650;
		  /* 82128650h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82128650h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128650h case   12:*/		return 0x82128654;
		  /* 82128654h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 82128654h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212867C;  }
		/* 82128654h case   13:*/		return 0x82128658;
		  /* 82128658h */ case   14:  		/* li R9, 0 */
		/* 82128658h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82128658h case   14:*/		return 0x8212865C;
		  /* 8212865Ch */ case   15:  		/* li R8, 4 */
		/* 8212865Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212865Ch case   15:*/		return 0x82128660;
		  /* 82128660h */ case   16:  		/* li R7, 1 */
		/* 82128660h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128660h case   16:*/		return 0x82128664;
		  /* 82128664h */ case   17:  		/* li R6, 0 */
		/* 82128664h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128664h case   17:*/		return 0x82128668;
		  /* 82128668h */ case   18:  		/* li R5, 12 */
		/* 82128668h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128668h case   18:*/		return 0x8212866C;
		  /* 8212866Ch */ case   19:  		/* li R4, 1 */
		/* 8212866Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212866Ch case   19:*/		return 0x82128670;
		  /* 82128670h */ case   20:  		/* bl -383472 */
		/* 82128670h case   20:*/		regs.LR = 0x82128674; return 0x820CAC80;
		/* 82128670h case   20:*/		return 0x82128674;
		  /* 82128674h */ case   21:  		/* mr R31, R3 */
		/* 82128674h case   21:*/		regs.R31 = regs.R3;
		/* 82128674h case   21:*/		return 0x82128678;
		  /* 82128678h */ case   22:  		/* b 8 */
		/* 82128678h case   22:*/		return 0x82128680;
		/* 82128678h case   22:*/		return 0x8212867C;
	}
	return 0x8212867C;
} // Block from 82128620h-8212867Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212867Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212867C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212867C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212867C);
		  /* 8212867Ch */ case    0:  		/* mr R31, R25 */
		/* 8212867Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212867Ch case    0:*/		return 0x82128680;
	}
	return 0x82128680;
} // Block from 8212867Ch-82128680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128680);
		  /* 82128680h */ case    0:  		/* mr R4, R31 */
		/* 82128680h case    0:*/		regs.R4 = regs.R31;
		/* 82128680h case    0:*/		return 0x82128684;
		  /* 82128684h */ case    1:  		/* mr R3, R28 */
		/* 82128684h case    1:*/		regs.R3 = regs.R28;
		/* 82128684h case    1:*/		return 0x82128688;
		  /* 82128688h */ case    2:  		/* bl -60528 */
		/* 82128688h case    2:*/		regs.LR = 0x8212868C; return 0x82119A18;
		/* 82128688h case    2:*/		return 0x8212868C;
		  /* 8212868Ch */ case    3:  		/* li R3, 40 */
		/* 8212868Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212868Ch case    3:*/		return 0x82128690;
		  /* 82128690h */ case    4:  		/* bl -390248 */
		/* 82128690h case    4:*/		regs.LR = 0x82128694; return 0x820C9228;
		/* 82128690h case    4:*/		return 0x82128694;
		  /* 82128694h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128694h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128694h case    5:*/		return 0x82128698;
		  /* 82128698h */ case    6:  		/* bc 12, CR0_EQ, -2480 */
		/* 82128698h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128698h case    6:*/		return 0x8212869C;
		  /* 8212869Ch */ case    7:  		/* mr R6, R31 */
		/* 8212869Ch case    7:*/		regs.R6 = regs.R31;
		/* 8212869Ch case    7:*/		return 0x821286A0;
		  /* 821286A0h */ case    8:  		/* li R5, 26 */
		/* 821286A0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 821286A0h case    8:*/		return 0x821286A4;
		  /* 821286A4h */ case    9:  		/* b -268 */
		/* 821286A4h case    9:*/		return 0x82128598;
		/* 821286A4h case    9:*/		return 0x821286A8;
		  /* 821286A8h */ case   10:  		/* li R3, 40 */
		/* 821286A8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821286A8h case   10:*/		return 0x821286AC;
		  /* 821286ACh */ case   11:  		/* bl -390276 */
		/* 821286ACh case   11:*/		regs.LR = 0x821286B0; return 0x820C9228;
		/* 821286ACh case   11:*/		return 0x821286B0;
		  /* 821286B0h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 821286B0h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821286B0h case   12:*/		return 0x821286B4;
		  /* 821286B4h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 821286B4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821286DC;  }
		/* 821286B4h case   13:*/		return 0x821286B8;
		  /* 821286B8h */ case   14:  		/* li R9, 0 */
		/* 821286B8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821286B8h case   14:*/		return 0x821286BC;
		  /* 821286BCh */ case   15:  		/* li R8, 4 */
		/* 821286BCh case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821286BCh case   15:*/		return 0x821286C0;
		  /* 821286C0h */ case   16:  		/* li R7, 1 */
		/* 821286C0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821286C0h case   16:*/		return 0x821286C4;
		  /* 821286C4h */ case   17:  		/* li R6, 0 */
		/* 821286C4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821286C4h case   17:*/		return 0x821286C8;
		  /* 821286C8h */ case   18:  		/* li R5, 12 */
		/* 821286C8h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 821286C8h case   18:*/		return 0x821286CC;
		  /* 821286CCh */ case   19:  		/* li R4, 1 */
		/* 821286CCh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821286CCh case   19:*/		return 0x821286D0;
		  /* 821286D0h */ case   20:  		/* bl -383568 */
		/* 821286D0h case   20:*/		regs.LR = 0x821286D4; return 0x820CAC80;
		/* 821286D0h case   20:*/		return 0x821286D4;
		  /* 821286D4h */ case   21:  		/* mr R31, R3 */
		/* 821286D4h case   21:*/		regs.R31 = regs.R3;
		/* 821286D4h case   21:*/		return 0x821286D8;
		  /* 821286D8h */ case   22:  		/* b 8 */
		/* 821286D8h case   22:*/		return 0x821286E0;
		/* 821286D8h case   22:*/		return 0x821286DC;
	}
	return 0x821286DC;
} // Block from 82128680h-821286DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821286DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821286DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821286DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821286DC);
		  /* 821286DCh */ case    0:  		/* mr R31, R25 */
		/* 821286DCh case    0:*/		regs.R31 = regs.R25;
		/* 821286DCh case    0:*/		return 0x821286E0;
	}
	return 0x821286E0;
} // Block from 821286DCh-821286E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821286E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821286E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821286E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821286E0);
		  /* 821286E0h */ case    0:  		/* mr R4, R31 */
		/* 821286E0h case    0:*/		regs.R4 = regs.R31;
		/* 821286E0h case    0:*/		return 0x821286E4;
		  /* 821286E4h */ case    1:  		/* mr R3, R28 */
		/* 821286E4h case    1:*/		regs.R3 = regs.R28;
		/* 821286E4h case    1:*/		return 0x821286E8;
		  /* 821286E8h */ case    2:  		/* bl -60624 */
		/* 821286E8h case    2:*/		regs.LR = 0x821286EC; return 0x82119A18;
		/* 821286E8h case    2:*/		return 0x821286EC;
		  /* 821286ECh */ case    3:  		/* li R3, 40 */
		/* 821286ECh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821286ECh case    3:*/		return 0x821286F0;
		  /* 821286F0h */ case    4:  		/* bl -390344 */
		/* 821286F0h case    4:*/		regs.LR = 0x821286F4; return 0x820C9228;
		/* 821286F0h case    4:*/		return 0x821286F4;
		  /* 821286F4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821286F4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821286F4h case    5:*/		return 0x821286F8;
		  /* 821286F8h */ case    6:  		/* bc 12, CR0_EQ, -2576 */
		/* 821286F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821286F8h case    6:*/		return 0x821286FC;
		  /* 821286FCh */ case    7:  		/* mr R6, R31 */
		/* 821286FCh case    7:*/		regs.R6 = regs.R31;
		/* 821286FCh case    7:*/		return 0x82128700;
		  /* 82128700h */ case    8:  		/* li R5, 27 */
		/* 82128700h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1B);
		/* 82128700h case    8:*/		return 0x82128704;
		  /* 82128704h */ case    9:  		/* b -364 */
		/* 82128704h case    9:*/		return 0x82128598;
		/* 82128704h case    9:*/		return 0x82128708;
		  /* 82128708h */ case   10:  		/* li R3, 40 */
		/* 82128708h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128708h case   10:*/		return 0x8212870C;
		  /* 8212870Ch */ case   11:  		/* bl -390372 */
		/* 8212870Ch case   11:*/		regs.LR = 0x82128710; return 0x820C9228;
		/* 8212870Ch case   11:*/		return 0x82128710;
		  /* 82128710h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82128710h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128710h case   12:*/		return 0x82128714;
		  /* 82128714h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 82128714h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212873C;  }
		/* 82128714h case   13:*/		return 0x82128718;
		  /* 82128718h */ case   14:  		/* li R9, 0 */
		/* 82128718h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82128718h case   14:*/		return 0x8212871C;
		  /* 8212871Ch */ case   15:  		/* li R8, 4 */
		/* 8212871Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212871Ch case   15:*/		return 0x82128720;
	}
	return 0x82128720;
} // Block from 821286E0h-82128720h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82128720h
// Function '?Production@CParse@D3DXShader@@IAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128720);
		  /* 82128720h */ case    0:  		/* li R7, 1 */
		/* 82128720h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128720h case    0:*/		return 0x82128724;
		  /* 82128724h */ case    1:  		/* li R6, 0 */
		/* 82128724h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128724h case    1:*/		return 0x82128728;
		  /* 82128728h */ case    2:  		/* li R5, 12 */
		/* 82128728h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128728h case    2:*/		return 0x8212872C;
		  /* 8212872Ch */ case    3:  		/* li R4, 1 */
		/* 8212872Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212872Ch case    3:*/		return 0x82128730;
		  /* 82128730h */ case    4:  		/* bl -383664 */
		/* 82128730h case    4:*/		regs.LR = 0x82128734; return 0x820CAC80;
		/* 82128730h case    4:*/		return 0x82128734;
		  /* 82128734h */ case    5:  		/* mr R31, R3 */
		/* 82128734h case    5:*/		regs.R31 = regs.R3;
		/* 82128734h case    5:*/		return 0x82128738;
		  /* 82128738h */ case    6:  		/* b 8 */
		/* 82128738h case    6:*/		return 0x82128740;
		/* 82128738h case    6:*/		return 0x8212873C;
	}
	return 0x8212873C;
} // Block from 82128720h-8212873Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212873Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212873C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212873C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212873C);
		  /* 8212873Ch */ case    0:  		/* mr R31, R25 */
		/* 8212873Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212873Ch case    0:*/		return 0x82128740;
	}
	return 0x82128740;
} // Block from 8212873Ch-82128740h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128740);
		  /* 82128740h */ case    0:  		/* mr R4, R31 */
		/* 82128740h case    0:*/		regs.R4 = regs.R31;
		/* 82128740h case    0:*/		return 0x82128744;
		  /* 82128744h */ case    1:  		/* mr R3, R28 */
		/* 82128744h case    1:*/		regs.R3 = regs.R28;
		/* 82128744h case    1:*/		return 0x82128748;
		  /* 82128748h */ case    2:  		/* bl -60720 */
		/* 82128748h case    2:*/		regs.LR = 0x8212874C; return 0x82119A18;
		/* 82128748h case    2:*/		return 0x8212874C;
		  /* 8212874Ch */ case    3:  		/* li R3, 40 */
		/* 8212874Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212874Ch case    3:*/		return 0x82128750;
		  /* 82128750h */ case    4:  		/* bl -390440 */
		/* 82128750h case    4:*/		regs.LR = 0x82128754; return 0x820C9228;
		/* 82128750h case    4:*/		return 0x82128754;
		  /* 82128754h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128754h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128754h case    5:*/		return 0x82128758;
		  /* 82128758h */ case    6:  		/* bc 12, CR0_EQ, -2672 */
		/* 82128758h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128758h case    6:*/		return 0x8212875C;
		  /* 8212875Ch */ case    7:  		/* mr R6, R31 */
		/* 8212875Ch case    7:*/		regs.R6 = regs.R31;
		/* 8212875Ch case    7:*/		return 0x82128760;
		  /* 82128760h */ case    8:  		/* li R5, 28 */
		/* 82128760h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 82128760h case    8:*/		return 0x82128764;
		  /* 82128764h */ case    9:  		/* b -460 */
		/* 82128764h case    9:*/		return 0x82128598;
		/* 82128764h case    9:*/		return 0x82128768;
		  /* 82128768h */ case   10:  		/* li R3, 40 */
		/* 82128768h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128768h case   10:*/		return 0x8212876C;
		  /* 8212876Ch */ case   11:  		/* bl -390468 */
		/* 8212876Ch case   11:*/		regs.LR = 0x82128770; return 0x820C9228;
		/* 8212876Ch case   11:*/		return 0x82128770;
		  /* 82128770h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82128770h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128770h case   12:*/		return 0x82128774;
		  /* 82128774h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 82128774h case   13:*/		if ( regs.CR[0].eq ) { return 0x8212879C;  }
		/* 82128774h case   13:*/		return 0x82128778;
		  /* 82128778h */ case   14:  		/* li R9, 0 */
		/* 82128778h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82128778h case   14:*/		return 0x8212877C;
		  /* 8212877Ch */ case   15:  		/* li R8, 4 */
		/* 8212877Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8212877Ch case   15:*/		return 0x82128780;
		  /* 82128780h */ case   16:  		/* li R7, 1 */
		/* 82128780h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128780h case   16:*/		return 0x82128784;
		  /* 82128784h */ case   17:  		/* li R6, 0 */
		/* 82128784h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128784h case   17:*/		return 0x82128788;
		  /* 82128788h */ case   18:  		/* li R5, 12 */
		/* 82128788h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128788h case   18:*/		return 0x8212878C;
		  /* 8212878Ch */ case   19:  		/* li R4, 1 */
		/* 8212878Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212878Ch case   19:*/		return 0x82128790;
		  /* 82128790h */ case   20:  		/* bl -383760 */
		/* 82128790h case   20:*/		regs.LR = 0x82128794; return 0x820CAC80;
		/* 82128790h case   20:*/		return 0x82128794;
		  /* 82128794h */ case   21:  		/* mr R31, R3 */
		/* 82128794h case   21:*/		regs.R31 = regs.R3;
		/* 82128794h case   21:*/		return 0x82128798;
		  /* 82128798h */ case   22:  		/* b 8 */
		/* 82128798h case   22:*/		return 0x821287A0;
		/* 82128798h case   22:*/		return 0x8212879C;
	}
	return 0x8212879C;
} // Block from 82128740h-8212879Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8212879Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212879C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212879C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212879C);
		  /* 8212879Ch */ case    0:  		/* mr R31, R25 */
		/* 8212879Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212879Ch case    0:*/		return 0x821287A0;
	}
	return 0x821287A0;
} // Block from 8212879Ch-821287A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821287A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821287A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821287A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821287A0);
		  /* 821287A0h */ case    0:  		/* mr R4, R31 */
		/* 821287A0h case    0:*/		regs.R4 = regs.R31;
		/* 821287A0h case    0:*/		return 0x821287A4;
		  /* 821287A4h */ case    1:  		/* mr R3, R28 */
		/* 821287A4h case    1:*/		regs.R3 = regs.R28;
		/* 821287A4h case    1:*/		return 0x821287A8;
		  /* 821287A8h */ case    2:  		/* bl -60816 */
		/* 821287A8h case    2:*/		regs.LR = 0x821287AC; return 0x82119A18;
		/* 821287A8h case    2:*/		return 0x821287AC;
		  /* 821287ACh */ case    3:  		/* li R3, 40 */
		/* 821287ACh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821287ACh case    3:*/		return 0x821287B0;
		  /* 821287B0h */ case    4:  		/* bl -390536 */
		/* 821287B0h case    4:*/		regs.LR = 0x821287B4; return 0x820C9228;
		/* 821287B0h case    4:*/		return 0x821287B4;
		  /* 821287B4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821287B4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821287B4h case    5:*/		return 0x821287B8;
		  /* 821287B8h */ case    6:  		/* bc 12, CR0_EQ, -2768 */
		/* 821287B8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821287B8h case    6:*/		return 0x821287BC;
		  /* 821287BCh */ case    7:  		/* mr R6, R31 */
		/* 821287BCh case    7:*/		regs.R6 = regs.R31;
		/* 821287BCh case    7:*/		return 0x821287C0;
		  /* 821287C0h */ case    8:  		/* li R5, 29 */
		/* 821287C0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1D);
		/* 821287C0h case    8:*/		return 0x821287C4;
		  /* 821287C4h */ case    9:  		/* b -556 */
		/* 821287C4h case    9:*/		return 0x82128598;
		/* 821287C4h case    9:*/		return 0x821287C8;
		  /* 821287C8h */ case   10:  		/* li R3, 40 */
		/* 821287C8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821287C8h case   10:*/		return 0x821287CC;
		  /* 821287CCh */ case   11:  		/* bl -390564 */
		/* 821287CCh case   11:*/		regs.LR = 0x821287D0; return 0x820C9228;
		/* 821287CCh case   11:*/		return 0x821287D0;
		  /* 821287D0h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 821287D0h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821287D0h case   12:*/		return 0x821287D4;
		  /* 821287D4h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 821287D4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821287FC;  }
		/* 821287D4h case   13:*/		return 0x821287D8;
		  /* 821287D8h */ case   14:  		/* li R9, 0 */
		/* 821287D8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821287D8h case   14:*/		return 0x821287DC;
		  /* 821287DCh */ case   15:  		/* li R8, 4 */
		/* 821287DCh case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821287DCh case   15:*/		return 0x821287E0;
		  /* 821287E0h */ case   16:  		/* li R7, 1 */
		/* 821287E0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821287E0h case   16:*/		return 0x821287E4;
		  /* 821287E4h */ case   17:  		/* li R6, 0 */
		/* 821287E4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821287E4h case   17:*/		return 0x821287E8;
		  /* 821287E8h */ case   18:  		/* li R5, 12 */
		/* 821287E8h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 821287E8h case   18:*/		return 0x821287EC;
		  /* 821287ECh */ case   19:  		/* li R4, 1 */
		/* 821287ECh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821287ECh case   19:*/		return 0x821287F0;
		  /* 821287F0h */ case   20:  		/* bl -383856 */
		/* 821287F0h case   20:*/		regs.LR = 0x821287F4; return 0x820CAC80;
		/* 821287F0h case   20:*/		return 0x821287F4;
		  /* 821287F4h */ case   21:  		/* mr R31, R3 */
		/* 821287F4h case   21:*/		regs.R31 = regs.R3;
		/* 821287F4h case   21:*/		return 0x821287F8;
		  /* 821287F8h */ case   22:  		/* b 8 */
		/* 821287F8h case   22:*/		return 0x82128800;
		/* 821287F8h case   22:*/		return 0x821287FC;
	}
	return 0x821287FC;
} // Block from 821287A0h-821287FCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821287FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821287FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821287FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821287FC);
		  /* 821287FCh */ case    0:  		/* mr R31, R25 */
		/* 821287FCh case    0:*/		regs.R31 = regs.R25;
		/* 821287FCh case    0:*/		return 0x82128800;
	}
	return 0x82128800;
} // Block from 821287FCh-82128800h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128800);
		  /* 82128800h */ case    0:  		/* mr R4, R31 */
		/* 82128800h case    0:*/		regs.R4 = regs.R31;
		/* 82128800h case    0:*/		return 0x82128804;
		  /* 82128804h */ case    1:  		/* mr R3, R28 */
		/* 82128804h case    1:*/		regs.R3 = regs.R28;
		/* 82128804h case    1:*/		return 0x82128808;
		  /* 82128808h */ case    2:  		/* bl -60912 */
		/* 82128808h case    2:*/		regs.LR = 0x8212880C; return 0x82119A18;
		/* 82128808h case    2:*/		return 0x8212880C;
		  /* 8212880Ch */ case    3:  		/* li R3, 40 */
		/* 8212880Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212880Ch case    3:*/		return 0x82128810;
		  /* 82128810h */ case    4:  		/* bl -390632 */
		/* 82128810h case    4:*/		regs.LR = 0x82128814; return 0x820C9228;
		/* 82128810h case    4:*/		return 0x82128814;
		  /* 82128814h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128814h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128814h case    5:*/		return 0x82128818;
		  /* 82128818h */ case    6:  		/* bc 12, CR0_EQ, -2864 */
		/* 82128818h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128818h case    6:*/		return 0x8212881C;
		  /* 8212881Ch */ case    7:  		/* mr R6, R31 */
		/* 8212881Ch case    7:*/		regs.R6 = regs.R31;
		/* 8212881Ch case    7:*/		return 0x82128820;
		  /* 82128820h */ case    8:  		/* li R5, 30 */
		/* 82128820h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1E);
		/* 82128820h case    8:*/		return 0x82128824;
		  /* 82128824h */ case    9:  		/* b -652 */
		/* 82128824h case    9:*/		return 0x82128598;
		/* 82128824h case    9:*/		return 0x82128828;
		  /* 82128828h */ case   10:  		/* li R3, 40 */
		/* 82128828h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128828h case   10:*/		return 0x8212882C;
		  /* 8212882Ch */ case   11:  		/* bl -390660 */
		/* 8212882Ch case   11:*/		regs.LR = 0x82128830; return 0x820C9228;
		/* 8212882Ch case   11:*/		return 0x82128830;
		  /* 82128830h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82128830h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128830h case   12:*/		return 0x82128834;
		  /* 82128834h */ case   13:  		/* bc 12, CR0_EQ, -2892 */
		/* 82128834h case   13:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128834h case   13:*/		return 0x82128838;
		  /* 82128838h */ case   14:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128838h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128838h case   14:*/		return 0x8212883C;
		  /* 8212883Ch */ case   15:  		/* b -508 */
		/* 8212883Ch case   15:*/		return 0x82128640;
		/* 8212883Ch case   15:*/		return 0x82128840;
		  /* 82128840h */ case   16:  		/* li R3, 40 */
		/* 82128840h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128840h case   16:*/		return 0x82128844;
		  /* 82128844h */ case   17:  		/* bl -390684 */
		/* 82128844h case   17:*/		regs.LR = 0x82128848; return 0x820C9228;
		/* 82128844h case   17:*/		return 0x82128848;
		  /* 82128848h */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 82128848h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128848h case   18:*/		return 0x8212884C;
		  /* 8212884Ch */ case   19:  		/* bc 12, CR0_EQ, -2916 */
		/* 8212884Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212884Ch case   19:*/		return 0x82128850;
		  /* 82128850h */ case   20:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128850h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128850h case   20:*/		return 0x82128854;
		  /* 82128854h */ case   21:  		/* b -436 */
		/* 82128854h case   21:*/		return 0x821286A0;
		/* 82128854h case   21:*/		return 0x82128858;
		  /* 82128858h */ case   22:  		/* li R3, 40 */
		/* 82128858h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128858h case   22:*/		return 0x8212885C;
		  /* 8212885Ch */ case   23:  		/* bl -390708 */
		/* 8212885Ch case   23:*/		regs.LR = 0x82128860; return 0x820C9228;
		/* 8212885Ch case   23:*/		return 0x82128860;
		  /* 82128860h */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 82128860h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128860h case   24:*/		return 0x82128864;
		  /* 82128864h */ case   25:  		/* bc 12, CR0_EQ, -2940 */
		/* 82128864h case   25:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128864h case   25:*/		return 0x82128868;
		  /* 82128868h */ case   26:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128868h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128868h case   26:*/		return 0x8212886C;
		  /* 8212886Ch */ case   27:  		/* b -364 */
		/* 8212886Ch case   27:*/		return 0x82128700;
		/* 8212886Ch case   27:*/		return 0x82128870;
		  /* 82128870h */ case   28:  		/* li R3, 40 */
		/* 82128870h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128870h case   28:*/		return 0x82128874;
		  /* 82128874h */ case   29:  		/* bl -390732 */
		/* 82128874h case   29:*/		regs.LR = 0x82128878; return 0x820C9228;
		/* 82128874h case   29:*/		return 0x82128878;
		  /* 82128878h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 82128878h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128878h case   30:*/		return 0x8212887C;
		  /* 8212887Ch */ case   31:  		/* bc 12, CR0_EQ, -2964 */
		/* 8212887Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 8212887Ch case   31:*/		return 0x82128880;
		  /* 82128880h */ case   32:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128880h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128880h case   32:*/		return 0x82128884;
		  /* 82128884h */ case   33:  		/* b -292 */
		/* 82128884h case   33:*/		return 0x82128760;
		/* 82128884h case   33:*/		return 0x82128888;
		  /* 82128888h */ case   34:  		/* li R3, 40 */
		/* 82128888h case   34:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128888h case   34:*/		return 0x8212888C;
		  /* 8212888Ch */ case   35:  		/* bl -390756 */
		/* 8212888Ch case   35:*/		regs.LR = 0x82128890; return 0x820C9228;
		/* 8212888Ch case   35:*/		return 0x82128890;
		  /* 82128890h */ case   36:  		/* cmplwi CR0, R3, 0 */
		/* 82128890h case   36:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128890h case   36:*/		return 0x82128894;
		  /* 82128894h */ case   37:  		/* bc 12, CR0_EQ, -2988 */
		/* 82128894h case   37:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128894h case   37:*/		return 0x82128898;
		  /* 82128898h */ case   38:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128898h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128898h case   38:*/		return 0x8212889C;
		  /* 8212889Ch */ case   39:  		/* b -220 */
		/* 8212889Ch case   39:*/		return 0x821287C0;
		/* 8212889Ch case   39:*/		return 0x821288A0;
		  /* 821288A0h */ case   40:  		/* li R3, 40 */
		/* 821288A0h case   40:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821288A0h case   40:*/		return 0x821288A4;
		  /* 821288A4h */ case   41:  		/* bl -390780 */
		/* 821288A4h case   41:*/		regs.LR = 0x821288A8; return 0x820C9228;
		/* 821288A4h case   41:*/		return 0x821288A8;
		  /* 821288A8h */ case   42:  		/* cmplwi CR0, R3, 0 */
		/* 821288A8h case   42:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821288A8h case   42:*/		return 0x821288AC;
		  /* 821288ACh */ case   43:  		/* bc 12, CR0_EQ, -3012 */
		/* 821288ACh case   43:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821288ACh case   43:*/		return 0x821288B0;
		  /* 821288B0h */ case   44:  		/* lwz R6, <#[R1 + 176]> */
		/* 821288B0h case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 821288B0h case   44:*/		return 0x821288B4;
		  /* 821288B4h */ case   45:  		/* b -148 */
		/* 821288B4h case   45:*/		return 0x82128820;
		/* 821288B4h case   45:*/		return 0x821288B8;
		  /* 821288B8h */ case   46:  		/* li R3, 40 */
		/* 821288B8h case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821288B8h case   46:*/		return 0x821288BC;
		  /* 821288BCh */ case   47:  		/* bl -390804 */
		/* 821288BCh case   47:*/		regs.LR = 0x821288C0; return 0x820C9228;
		/* 821288BCh case   47:*/		return 0x821288C0;
		  /* 821288C0h */ case   48:  		/* cmplwi CR0, R3, 0 */
		/* 821288C0h case   48:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821288C0h case   48:*/		return 0x821288C4;
		  /* 821288C4h */ case   49:  		/* bc 12, CR0_EQ, -3036 */
		/* 821288C4h case   49:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821288C4h case   49:*/		return 0x821288C8;
		  /* 821288C8h */ case   50:  		/* li R5, 33 */
		/* 821288C8h case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x21);
		/* 821288C8h case   50:*/		return 0x821288CC;
		  /* 821288CCh */ case   51:  		/* b -824 */
		/* 821288CCh case   51:*/		return 0x82128594;
		/* 821288CCh case   51:*/		return 0x821288D0;
		  /* 821288D0h */ case   52:  		/* li R3, 40 */
		/* 821288D0h case   52:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821288D0h case   52:*/		return 0x821288D4;
		  /* 821288D4h */ case   53:  		/* bl -390828 */
		/* 821288D4h case   53:*/		regs.LR = 0x821288D8; return 0x820C9228;
		/* 821288D4h case   53:*/		return 0x821288D8;
		  /* 821288D8h */ case   54:  		/* cmplwi CR0, R3, 0 */
		/* 821288D8h case   54:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821288D8h case   54:*/		return 0x821288DC;
		  /* 821288DCh */ case   55:  		/* bc 12, CR0_EQ, -3060 */
		/* 821288DCh case   55:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821288DCh case   55:*/		return 0x821288E0;
		  /* 821288E0h */ case   56:  		/* li R5, 38 */
		/* 821288E0h case   56:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821288E0h case   56:*/		return 0x821288E4;
		  /* 821288E4h */ case   57:  		/* b -848 */
		/* 821288E4h case   57:*/		return 0x82128594;
		/* 821288E4h case   57:*/		return 0x821288E8;
		  /* 821288E8h */ case   58:  		/* lwz R11, <#[R28]> */
		/* 821288E8h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821288E8h case   58:*/		return 0x821288EC;
		  /* 821288ECh */ case   59:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821288ECh case   59:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821288ECh case   59:*/		return 0x821288F0;
		  /* 821288F0h */ case   60:  		/* bc 4, CR0_EQ, 28 */
		/* 821288F0h case   60:*/		if ( !regs.CR[0].eq ) { return 0x8212890C;  }
		/* 821288F0h case   60:*/		return 0x821288F4;
		  /* 821288F4h */ case   61:  		/* li R3, 40 */
		/* 821288F4h case   61:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821288F4h case   61:*/		return 0x821288F8;
		  /* 821288F8h */ case   62:  		/* bl -390864 */
		/* 821288F8h case   62:*/		regs.LR = 0x821288FC; return 0x820C9228;
		/* 821288F8h case   62:*/		return 0x821288FC;
		  /* 821288FCh */ case   63:  		/* cmplwi CR0, R3, 0 */
		/* 821288FCh case   63:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821288FCh case   63:*/		return 0x82128900;
		  /* 82128900h */ case   64:  		/* bc 12, CR0_EQ, -3096 */
		/* 82128900h case   64:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128900h case   64:*/		return 0x82128904;
		  /* 82128904h */ case   65:  		/* li R5, 34 */
		/* 82128904h case   65:*/		cpu::op::li<0>(regs,&regs.R5,0x22);
		/* 82128904h case   65:*/		return 0x82128908;
		  /* 82128908h */ case   66:  		/* b -884 */
		/* 82128908h case   66:*/		return 0x82128594;
		/* 82128908h case   66:*/		return 0x8212890C;
	}
	return 0x8212890C;
} // Block from 82128800h-8212890Ch (67 instructions)

//////////////////////////////////////////////////////
// Block at 8212890Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212890C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212890C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212890C);
		  /* 8212890Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212890Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212890Ch case    0:*/		return 0x82128910;
		  /* 82128910h */ case    1:  		/* addi R6, R11, 15224 */
		/* 82128910h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3B78);
		/* 82128910h case    1:*/		return 0x82128914;
		  /* 82128914h */ case    2:  		/* b -832 */
		/* 82128914h case    2:*/		return 0x821285D4;
		/* 82128914h case    2:*/		return 0x82128918;
		  /* 82128918h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82128918h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82128918h case    3:*/		return 0x8212891C;
		  /* 8212891Ch */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8212891Ch case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8212891Ch case    4:*/		return 0x82128920;
		  /* 82128920h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 82128920h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8212893C;  }
		/* 82128920h case    5:*/		return 0x82128924;
		  /* 82128924h */ case    6:  		/* li R3, 40 */
		/* 82128924h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128924h case    6:*/		return 0x82128928;
		  /* 82128928h */ case    7:  		/* bl -390912 */
		/* 82128928h case    7:*/		regs.LR = 0x8212892C; return 0x820C9228;
		/* 82128928h case    7:*/		return 0x8212892C;
		  /* 8212892Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8212892Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212892Ch case    8:*/		return 0x82128930;
		  /* 82128930h */ case    9:  		/* bc 12, CR0_EQ, -3144 */
		/* 82128930h case    9:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128930h case    9:*/		return 0x82128934;
		  /* 82128934h */ case   10:  		/* li R5, 35 */
		/* 82128934h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x23);
		/* 82128934h case   10:*/		return 0x82128938;
		  /* 82128938h */ case   11:  		/* b -932 */
		/* 82128938h case   11:*/		return 0x82128594;
		/* 82128938h case   11:*/		return 0x8212893C;
	}
	return 0x8212893C;
} // Block from 8212890Ch-8212893Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212893Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212893C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212893C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212893C);
		  /* 8212893Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212893Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212893Ch case    0:*/		return 0x82128940;
		  /* 82128940h */ case    1:  		/* addi R6, R11, 15136 */
		/* 82128940h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3B20);
		/* 82128940h case    1:*/		return 0x82128944;
		  /* 82128944h */ case    2:  		/* b -880 */
		/* 82128944h case    2:*/		return 0x821285D4;
		/* 82128944h case    2:*/		return 0x82128948;
		  /* 82128948h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82128948h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82128948h case    3:*/		return 0x8212894C;
		  /* 8212894Ch */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8212894Ch case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8212894Ch case    4:*/		return 0x82128950;
		  /* 82128950h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 82128950h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8212896C;  }
		/* 82128950h case    5:*/		return 0x82128954;
		  /* 82128954h */ case    6:  		/* li R3, 40 */
		/* 82128954h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128954h case    6:*/		return 0x82128958;
		  /* 82128958h */ case    7:  		/* bl -390960 */
		/* 82128958h case    7:*/		regs.LR = 0x8212895C; return 0x820C9228;
		/* 82128958h case    7:*/		return 0x8212895C;
		  /* 8212895Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8212895Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212895Ch case    8:*/		return 0x82128960;
		  /* 82128960h */ case    9:  		/* bc 12, CR0_EQ, -3192 */
		/* 82128960h case    9:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128960h case    9:*/		return 0x82128964;
		  /* 82128964h */ case   10:  		/* li R5, 36 */
		/* 82128964h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 82128964h case   10:*/		return 0x82128968;
		  /* 82128968h */ case   11:  		/* b -980 */
		/* 82128968h case   11:*/		return 0x82128594;
		/* 82128968h case   11:*/		return 0x8212896C;
	}
	return 0x8212896C;
} // Block from 8212893Ch-8212896Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212896Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212896C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212896C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212896C);
		  /* 8212896Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212896Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212896Ch case    0:*/		return 0x82128970;
		  /* 82128970h */ case    1:  		/* addi R6, R11, 15048 */
		/* 82128970h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3AC8);
		/* 82128970h case    1:*/		return 0x82128974;
		  /* 82128974h */ case    2:  		/* b -928 */
		/* 82128974h case    2:*/		return 0x821285D4;
		/* 82128974h case    2:*/		return 0x82128978;
		  /* 82128978h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82128978h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82128978h case    3:*/		return 0x8212897C;
		  /* 8212897Ch */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8212897Ch case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8212897Ch case    4:*/		return 0x82128980;
		  /* 82128980h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 82128980h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8212899C;  }
		/* 82128980h case    5:*/		return 0x82128984;
		  /* 82128984h */ case    6:  		/* li R3, 40 */
		/* 82128984h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128984h case    6:*/		return 0x82128988;
		  /* 82128988h */ case    7:  		/* bl -391008 */
		/* 82128988h case    7:*/		regs.LR = 0x8212898C; return 0x820C9228;
		/* 82128988h case    7:*/		return 0x8212898C;
		  /* 8212898Ch */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8212898Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212898Ch case    8:*/		return 0x82128990;
		  /* 82128990h */ case    9:  		/* bc 12, CR0_EQ, -3240 */
		/* 82128990h case    9:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128990h case    9:*/		return 0x82128994;
		  /* 82128994h */ case   10:  		/* li R5, 37 */
		/* 82128994h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x25);
		/* 82128994h case   10:*/		return 0x82128998;
		  /* 82128998h */ case   11:  		/* b -1028 */
		/* 82128998h case   11:*/		return 0x82128594;
		/* 82128998h case   11:*/		return 0x8212899C;
	}
	return 0x8212899C;
} // Block from 8212896Ch-8212899Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8212899Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212899C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212899C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212899C);
		  /* 8212899Ch */ case    0:  		/* lis R11, -32253 */
		/* 8212899Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212899Ch case    0:*/		return 0x821289A0;
		  /* 821289A0h */ case    1:  		/* addi R6, R11, 14960 */
		/* 821289A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A70);
		/* 821289A0h case    1:*/		return 0x821289A4;
		  /* 821289A4h */ case    2:  		/* b -976 */
		/* 821289A4h case    2:*/		return 0x821285D4;
		/* 821289A4h case    2:*/		return 0x821289A8;
		  /* 821289A8h */ case    3:  		/* li R3, 40 */
		/* 821289A8h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821289A8h case    3:*/		return 0x821289AC;
		  /* 821289ACh */ case    4:  		/* bl -391044 */
		/* 821289ACh case    4:*/		regs.LR = 0x821289B0; return 0x820C9228;
		/* 821289ACh case    4:*/		return 0x821289B0;
		  /* 821289B0h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821289B0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821289B0h case    5:*/		return 0x821289B4;
		  /* 821289B4h */ case    6:  		/* bc 12, CR0_EQ, -3276 */
		/* 821289B4h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821289B4h case    6:*/		return 0x821289B8;
		  /* 821289B8h */ case    7:  		/* li R5, 42 */
		/* 821289B8h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2A);
		/* 821289B8h case    7:*/		return 0x821289BC;
		  /* 821289BCh */ case    8:  		/* b -1064 */
		/* 821289BCh case    8:*/		return 0x82128594;
		/* 821289BCh case    8:*/		return 0x821289C0;
		  /* 821289C0h */ case    9:  		/* li R3, 40 */
		/* 821289C0h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821289C0h case    9:*/		return 0x821289C4;
		  /* 821289C4h */ case   10:  		/* bl -391068 */
		/* 821289C4h case   10:*/		regs.LR = 0x821289C8; return 0x820C9228;
		/* 821289C4h case   10:*/		return 0x821289C8;
		  /* 821289C8h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 821289C8h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821289C8h case   11:*/		return 0x821289CC;
		  /* 821289CCh */ case   12:  		/* bc 12, CR0_EQ, -3300 */
		/* 821289CCh case   12:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821289CCh case   12:*/		return 0x821289D0;
		  /* 821289D0h */ case   13:  		/* li R5, 43 */
		/* 821289D0h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x2B);
		/* 821289D0h case   13:*/		return 0x821289D4;
		  /* 821289D4h */ case   14:  		/* b -1088 */
		/* 821289D4h case   14:*/		return 0x82128594;
		/* 821289D4h case   14:*/		return 0x821289D8;
		  /* 821289D8h */ case   15:  		/* li R3, 40 */
		/* 821289D8h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821289D8h case   15:*/		return 0x821289DC;
		  /* 821289DCh */ case   16:  		/* bl -391092 */
		/* 821289DCh case   16:*/		regs.LR = 0x821289E0; return 0x820C9228;
		/* 821289DCh case   16:*/		return 0x821289E0;
		  /* 821289E0h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 821289E0h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821289E0h case   17:*/		return 0x821289E4;
		  /* 821289E4h */ case   18:  		/* bc 12, CR0_EQ, -3324 */
		/* 821289E4h case   18:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821289E4h case   18:*/		return 0x821289E8;
		  /* 821289E8h */ case   19:  		/* li R5, 44 */
		/* 821289E8h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x2C);
		/* 821289E8h case   19:*/		return 0x821289EC;
		  /* 821289ECh */ case   20:  		/* b -1112 */
		/* 821289ECh case   20:*/		return 0x82128594;
		/* 821289ECh case   20:*/		return 0x821289F0;
		  /* 821289F0h */ case   21:  		/* li R3, 40 */
		/* 821289F0h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821289F0h case   21:*/		return 0x821289F4;
		  /* 821289F4h */ case   22:  		/* bl -391116 */
		/* 821289F4h case   22:*/		regs.LR = 0x821289F8; return 0x820C9228;
		/* 821289F4h case   22:*/		return 0x821289F8;
		  /* 821289F8h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 821289F8h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821289F8h case   23:*/		return 0x821289FC;
		  /* 821289FCh */ case   24:  		/* bc 12, CR0_EQ, -3348 */
		/* 821289FCh case   24:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821289FCh case   24:*/		return 0x82128A00;
		  /* 82128A00h */ case   25:  		/* li R5, 45 */
		/* 82128A00h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x2D);
		/* 82128A00h case   25:*/		return 0x82128A04;
		  /* 82128A04h */ case   26:  		/* b -1136 */
		/* 82128A04h case   26:*/		return 0x82128594;
		/* 82128A04h case   26:*/		return 0x82128A08;
		  /* 82128A08h */ case   27:  		/* li R3, 40 */
		/* 82128A08h case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128A08h case   27:*/		return 0x82128A0C;
		  /* 82128A0Ch */ case   28:  		/* bl -391140 */
		/* 82128A0Ch case   28:*/		regs.LR = 0x82128A10; return 0x820C9228;
		/* 82128A0Ch case   28:*/		return 0x82128A10;
		  /* 82128A10h */ case   29:  		/* cmplwi CR0, R3, 0 */
		/* 82128A10h case   29:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128A10h case   29:*/		return 0x82128A14;
		  /* 82128A14h */ case   30:  		/* bc 12, CR0_EQ, -3372 */
		/* 82128A14h case   30:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128A14h case   30:*/		return 0x82128A18;
		  /* 82128A18h */ case   31:  		/* li R5, 46 */
		/* 82128A18h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x2E);
		/* 82128A18h case   31:*/		return 0x82128A1C;
		  /* 82128A1Ch */ case   32:  		/* b -1160 */
		/* 82128A1Ch case   32:*/		return 0x82128594;
		/* 82128A1Ch case   32:*/		return 0x82128A20;
		  /* 82128A20h */ case   33:  		/* lwz R11, <#[R28]> */
		/* 82128A20h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82128A20h case   33:*/		return 0x82128A24;
		  /* 82128A24h */ case   34:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82128A24h case   34:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82128A24h case   34:*/		return 0x82128A28;
		  /* 82128A28h */ case   35:  		/* bc 4, CR0_EQ, 28 */
		/* 82128A28h case   35:*/		if ( !regs.CR[0].eq ) { return 0x82128A44;  }
		/* 82128A28h case   35:*/		return 0x82128A2C;
		  /* 82128A2Ch */ case   36:  		/* li R3, 40 */
		/* 82128A2Ch case   36:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128A2Ch case   36:*/		return 0x82128A30;
		  /* 82128A30h */ case   37:  		/* bl -391176 */
		/* 82128A30h case   37:*/		regs.LR = 0x82128A34; return 0x820C9228;
		/* 82128A30h case   37:*/		return 0x82128A34;
		  /* 82128A34h */ case   38:  		/* cmplwi CR0, R3, 0 */
		/* 82128A34h case   38:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128A34h case   38:*/		return 0x82128A38;
		  /* 82128A38h */ case   39:  		/* bc 12, CR0_EQ, -3408 */
		/* 82128A38h case   39:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128A38h case   39:*/		return 0x82128A3C;
		  /* 82128A3Ch */ case   40:  		/* li R5, 47 */
		/* 82128A3Ch case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x2F);
		/* 82128A3Ch case   40:*/		return 0x82128A40;
		  /* 82128A40h */ case   41:  		/* b -1196 */
		/* 82128A40h case   41:*/		return 0x82128594;
		/* 82128A40h case   41:*/		return 0x82128A44;
	}
	return 0x82128A44;
} // Block from 8212899Ch-82128A44h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82128A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128A44);
		  /* 82128A44h */ case    0:  		/* lis R11, -32253 */
		/* 82128A44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128A44h case    0:*/		return 0x82128A48;
		  /* 82128A48h */ case    1:  		/* addi R6, R11, 14900 */
		/* 82128A48h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A34);
		/* 82128A48h case    1:*/		return 0x82128A4C;
		  /* 82128A4Ch */ case    2:  		/* b -1144 */
		/* 82128A4Ch case    2:*/		return 0x821285D4;
		/* 82128A4Ch case    2:*/		return 0x82128A50;
		  /* 82128A50h */ case    3:  		/* li R3, 40 */
		/* 82128A50h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128A50h case    3:*/		return 0x82128A54;
		  /* 82128A54h */ case    4:  		/* bl -391212 */
		/* 82128A54h case    4:*/		regs.LR = 0x82128A58; return 0x820C9228;
		/* 82128A54h case    4:*/		return 0x82128A58;
		  /* 82128A58h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128A58h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128A58h case    5:*/		return 0x82128A5C;
		  /* 82128A5Ch */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 82128A5Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82128A84;  }
		/* 82128A5Ch case    6:*/		return 0x82128A60;
		  /* 82128A60h */ case    7:  		/* li R9, 0 */
		/* 82128A60h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82128A60h case    7:*/		return 0x82128A64;
		  /* 82128A64h */ case    8:  		/* li R8, 4 */
		/* 82128A64h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82128A64h case    8:*/		return 0x82128A68;
		  /* 82128A68h */ case    9:  		/* li R7, 1 */
		/* 82128A68h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82128A68h case    9:*/		return 0x82128A6C;
		  /* 82128A6Ch */ case   10:  		/* li R6, 0 */
		/* 82128A6Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128A6Ch case   10:*/		return 0x82128A70;
		  /* 82128A70h */ case   11:  		/* li R5, 12 */
		/* 82128A70h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82128A70h case   11:*/		return 0x82128A74;
		  /* 82128A74h */ case   12:  		/* li R4, 1 */
		/* 82128A74h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128A74h case   12:*/		return 0x82128A78;
		  /* 82128A78h */ case   13:  		/* bl -384504 */
		/* 82128A78h case   13:*/		regs.LR = 0x82128A7C; return 0x820CAC80;
		/* 82128A78h case   13:*/		return 0x82128A7C;
		  /* 82128A7Ch */ case   14:  		/* mr R31, R3 */
		/* 82128A7Ch case   14:*/		regs.R31 = regs.R3;
		/* 82128A7Ch case   14:*/		return 0x82128A80;
		  /* 82128A80h */ case   15:  		/* b 8 */
		/* 82128A80h case   15:*/		return 0x82128A88;
		/* 82128A80h case   15:*/		return 0x82128A84;
	}
	return 0x82128A84;
} // Block from 82128A44h-82128A84h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82128A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128A84);
		  /* 82128A84h */ case    0:  		/* mr R31, R25 */
		/* 82128A84h case    0:*/		regs.R31 = regs.R25;
		/* 82128A84h case    0:*/		return 0x82128A88;
	}
	return 0x82128A88;
} // Block from 82128A84h-82128A88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128A88);
		  /* 82128A88h */ case    0:  		/* mr R4, R31 */
		/* 82128A88h case    0:*/		regs.R4 = regs.R31;
		/* 82128A88h case    0:*/		return 0x82128A8C;
		  /* 82128A8Ch */ case    1:  		/* mr R3, R28 */
		/* 82128A8Ch case    1:*/		regs.R3 = regs.R28;
		/* 82128A8Ch case    1:*/		return 0x82128A90;
		  /* 82128A90h */ case    2:  		/* bl -61560 */
		/* 82128A90h case    2:*/		regs.LR = 0x82128A94; return 0x82119A18;
		/* 82128A90h case    2:*/		return 0x82128A94;
		  /* 82128A94h */ case    3:  		/* li R3, 40 */
		/* 82128A94h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128A94h case    3:*/		return 0x82128A98;
		  /* 82128A98h */ case    4:  		/* bl -391280 */
		/* 82128A98h case    4:*/		regs.LR = 0x82128A9C; return 0x820C9228;
		/* 82128A98h case    4:*/		return 0x82128A9C;
		  /* 82128A9Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82128A9Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128A9Ch case    5:*/		return 0x82128AA0;
		  /* 82128AA0h */ case    6:  		/* bc 12, CR0_EQ, -3512 */
		/* 82128AA0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128AA0h case    6:*/		return 0x82128AA4;
		  /* 82128AA4h */ case    7:  		/* mr R6, R31 */
		/* 82128AA4h case    7:*/		regs.R6 = regs.R31;
		/* 82128AA4h case    7:*/		return 0x82128AA8;
		  /* 82128AA8h */ case    8:  		/* li R5, 39 */
		/* 82128AA8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x27);
		/* 82128AA8h case    8:*/		return 0x82128AAC;
		  /* 82128AACh */ case    9:  		/* b -1300 */
		/* 82128AACh case    9:*/		return 0x82128598;
		/* 82128AACh case    9:*/		return 0x82128AB0;
		  /* 82128AB0h */ case   10:  		/* li R3, 40 */
		/* 82128AB0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128AB0h case   10:*/		return 0x82128AB4;
		  /* 82128AB4h */ case   11:  		/* bl -391308 */
		/* 82128AB4h case   11:*/		regs.LR = 0x82128AB8; return 0x820C9228;
		/* 82128AB4h case   11:*/		return 0x82128AB8;
		  /* 82128AB8h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82128AB8h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128AB8h case   12:*/		return 0x82128ABC;
		  /* 82128ABCh */ case   13:  		/* bc 12, CR0_EQ, -3540 */
		/* 82128ABCh case   13:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128ABCh case   13:*/		return 0x82128AC0;
		  /* 82128AC0h */ case   14:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128AC0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128AC0h case   14:*/		return 0x82128AC4;
		  /* 82128AC4h */ case   15:  		/* b -28 */
		/* 82128AC4h case   15:*/		return 0x82128AA8;
		/* 82128AC4h case   15:*/		return 0x82128AC8;
		  /* 82128AC8h */ case   16:  		/* addi R5, R1, 128 */
		/* 82128AC8h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82128AC8h case   16:*/		return 0x82128ACC;
		  /* 82128ACCh */ case   17:  		/* lwz R4, <#[R1 + 180]> */
		/* 82128ACCh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128ACCh case   17:*/		return 0x82128AD0;
		  /* 82128AD0h */ case   18:  		/* mr R3, R28 */
		/* 82128AD0h case   18:*/		regs.R3 = regs.R28;
		/* 82128AD0h case   18:*/		return 0x82128AD4;
		  /* 82128AD4h */ case   19:  		/* stw R25, <#[R1 + 128]> */
		/* 82128AD4h case   19:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000080) );
		/* 82128AD4h case   19:*/		return 0x82128AD8;
		  /* 82128AD8h */ case   20:  		/* bl -36944 */
		/* 82128AD8h case   20:*/		regs.LR = 0x82128ADC; return 0x8211FA88;
		/* 82128AD8h case   20:*/		return 0x82128ADC;
		  /* 82128ADCh */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 82128ADCh case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82128ADCh case   21:*/		return 0x82128AE0;
		  /* 82128AE0h */ case   22:  		/* bc 4, CR0_LT, 52 */
		/* 82128AE0h case   22:*/		if ( !regs.CR[0].lt ) { return 0x82128B14;  }
		/* 82128AE0h case   22:*/		return 0x82128AE4;
		  /* 82128AE4h */ case   23:  		/* lwz R11, <#[R1 + 180]> */
		/* 82128AE4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128AE4h case   23:*/		return 0x82128AE8;
		  /* 82128AE8h */ case   24:  		/* addi R4, R11, 48 */
		/* 82128AE8h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x30);
		/* 82128AE8h case   24:*/		return 0x82128AEC;
		  /* 82128AECh */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 82128AECh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82128AECh case   25:*/		return 0x82128AF0;
		  /* 82128AF0h */ case   26:  		/* bc 4, CR6_EQ, 8 */
		/* 82128AF0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82128AF8;  }
		/* 82128AF0h case   26:*/		return 0x82128AF4;
		  /* 82128AF4h */ case   27:  		/* mr R4, R25 */
		/* 82128AF4h case   27:*/		regs.R4 = regs.R25;
		/* 82128AF4h case   27:*/		return 0x82128AF8;
	}
	return 0x82128AF8;
} // Block from 82128A88h-82128AF8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82128AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128AF8);
		  /* 82128AF8h */ case    0:  		/* lis R11, -32253 */
		/* 82128AF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128AF8h case    0:*/		return 0x82128AFC;
		  /* 82128AFCh */ case    1:  		/* li R5, 3020 */
		/* 82128AFCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 82128AFCh case    1:*/		return 0x82128B00;
		  /* 82128B00h */ case    2:  		/* addi R6, R11, 14872 */
		/* 82128B00h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A18);
		/* 82128B00h case    2:*/		return 0x82128B04;
		  /* 82128B04h */ case    3:  		/* mr R3, R28 */
		/* 82128B04h case    3:*/		regs.R3 = regs.R28;
		/* 82128B04h case    3:*/		return 0x82128B08;
		  /* 82128B08h */ case    4:  		/* bl -62056 */
		/* 82128B08h case    4:*/		regs.LR = 0x82128B0C; return 0x821198A0;
		/* 82128B08h case    4:*/		return 0x82128B0C;
		  /* 82128B0Ch */ case    5:  		/* mr R31, R25 */
		/* 82128B0Ch case    5:*/		regs.R31 = regs.R25;
		/* 82128B0Ch case    5:*/		return 0x82128B10;
		  /* 82128B10h */ case    6:  		/* b -2108 */
		/* 82128B10h case    6:*/		return 0x821282D4;
		/* 82128B10h case    6:*/		return 0x82128B14;
	}
	return 0x82128B14;
} // Block from 82128AF8h-82128B14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82128B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128B14);
		  /* 82128B14h */ case    0:  		/* li R3, 40 */
		/* 82128B14h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128B14h case    0:*/		return 0x82128B18;
		  /* 82128B18h */ case    1:  		/* bl -391408 */
		/* 82128B18h case    1:*/		regs.LR = 0x82128B1C; return 0x820C9228;
		/* 82128B18h case    1:*/		return 0x82128B1C;
		  /* 82128B1Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82128B1Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128B1Ch case    2:*/		return 0x82128B20;
		  /* 82128B20h */ case    3:  		/* bc 12, CR0_EQ, -3640 */
		/* 82128B20h case    3:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128B20h case    3:*/		return 0x82128B24;
		  /* 82128B24h */ case    4:  		/* lwz R7, <#[R1 + 128]> */
		/* 82128B24h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000080) );
		/* 82128B24h case    4:*/		return 0x82128B28;
		  /* 82128B28h */ case    5:  		/* li R5, 31 */
		/* 82128B28h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1F);
		/* 82128B28h case    5:*/		return 0x82128B2C;
		  /* 82128B2Ch */ case    6:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128B2Ch case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128B2Ch case    6:*/		return 0x82128B30;
		  /* 82128B30h */ case    7:  		/* b -1428 */
		/* 82128B30h case    7:*/		return 0x8212859C;
		/* 82128B30h case    7:*/		return 0x82128B34;
		  /* 82128B34h */ case    8:  		/* addi R5, R1, 128 */
		/* 82128B34h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82128B34h case    8:*/		return 0x82128B38;
		  /* 82128B38h */ case    9:  		/* lwz R4, <#[R1 + 180]> */
		/* 82128B38h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128B38h case    9:*/		return 0x82128B3C;
		  /* 82128B3Ch */ case   10:  		/* mr R3, R28 */
		/* 82128B3Ch case   10:*/		regs.R3 = regs.R28;
		/* 82128B3Ch case   10:*/		return 0x82128B40;
		  /* 82128B40h */ case   11:  		/* stw R25, <#[R1 + 128]> */
		/* 82128B40h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000080) );
		/* 82128B40h case   11:*/		return 0x82128B44;
		  /* 82128B44h */ case   12:  		/* bl -37052 */
		/* 82128B44h case   12:*/		regs.LR = 0x82128B48; return 0x8211FA88;
		/* 82128B44h case   12:*/		return 0x82128B48;
		  /* 82128B48h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82128B48h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82128B48h case   13:*/		return 0x82128B4C;
		  /* 82128B4Ch */ case   14:  		/* bc 12, CR0_LT, -104 */
		/* 82128B4Ch case   14:*/		if ( regs.CR[0].lt ) { return 0x82128AE4;  }
		/* 82128B4Ch case   14:*/		return 0x82128B50;
		  /* 82128B50h */ case   15:  		/* li R3, 40 */
		/* 82128B50h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128B50h case   15:*/		return 0x82128B54;
		  /* 82128B54h */ case   16:  		/* bl -391468 */
		/* 82128B54h case   16:*/		regs.LR = 0x82128B58; return 0x820C9228;
		/* 82128B54h case   16:*/		return 0x82128B58;
		  /* 82128B58h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 82128B58h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128B58h case   17:*/		return 0x82128B5C;
		  /* 82128B5Ch */ case   18:  		/* bc 12, CR0_EQ, -3700 */
		/* 82128B5Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128B5Ch case   18:*/		return 0x82128B60;
		  /* 82128B60h */ case   19:  		/* lwz R7, <#[R1 + 128]> */
		/* 82128B60h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000080) );
		/* 82128B60h case   19:*/		return 0x82128B64;
		  /* 82128B64h */ case   20:  		/* li R5, 32 */
		/* 82128B64h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 82128B64h case   20:*/		return 0x82128B68;
		  /* 82128B68h */ case   21:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128B68h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128B68h case   21:*/		return 0x82128B6C;
		  /* 82128B6Ch */ case   22:  		/* b -1488 */
		/* 82128B6Ch case   22:*/		return 0x8212859C;
		/* 82128B6Ch case   22:*/		return 0x82128B70;
		  /* 82128B70h */ case   23:  		/* li R3, 40 */
		/* 82128B70h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128B70h case   23:*/		return 0x82128B74;
		  /* 82128B74h */ case   24:  		/* bl -391500 */
		/* 82128B74h case   24:*/		regs.LR = 0x82128B78; return 0x820C9228;
		/* 82128B74h case   24:*/		return 0x82128B78;
		  /* 82128B78h */ case   25:  		/* cmplwi CR0, R3, 0 */
		/* 82128B78h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128B78h case   25:*/		return 0x82128B7C;
		  /* 82128B7Ch */ case   26:  		/* bc 12, CR0_EQ, -3732 */
		/* 82128B7Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128B7Ch case   26:*/		return 0x82128B80;
		  /* 82128B80h */ case   27:  		/* li R5, 48 */
		/* 82128B80h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 82128B80h case   27:*/		return 0x82128B84;
		  /* 82128B84h */ case   28:  		/* b -1520 */
		/* 82128B84h case   28:*/		return 0x82128594;
		/* 82128B84h case   28:*/		return 0x82128B88;
		  /* 82128B88h */ case   29:  		/* li R3, 40 */
		/* 82128B88h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128B88h case   29:*/		return 0x82128B8C;
		  /* 82128B8Ch */ case   30:  		/* bl -391524 */
		/* 82128B8Ch case   30:*/		regs.LR = 0x82128B90; return 0x820C9228;
		/* 82128B8Ch case   30:*/		return 0x82128B90;
		  /* 82128B90h */ case   31:  		/* cmplwi CR0, R3, 0 */
		/* 82128B90h case   31:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128B90h case   31:*/		return 0x82128B94;
		  /* 82128B94h */ case   32:  		/* bc 12, CR0_EQ, -3756 */
		/* 82128B94h case   32:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128B94h case   32:*/		return 0x82128B98;
		  /* 82128B98h */ case   33:  		/* li R5, 49 */
		/* 82128B98h case   33:*/		cpu::op::li<0>(regs,&regs.R5,0x31);
		/* 82128B98h case   33:*/		return 0x82128B9C;
		  /* 82128B9Ch */ case   34:  		/* b -1544 */
		/* 82128B9Ch case   34:*/		return 0x82128594;
		/* 82128B9Ch case   34:*/		return 0x82128BA0;
		  /* 82128BA0h */ case   35:  		/* li R3, 40 */
		/* 82128BA0h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128BA0h case   35:*/		return 0x82128BA4;
		  /* 82128BA4h */ case   36:  		/* bl -391548 */
		/* 82128BA4h case   36:*/		regs.LR = 0x82128BA8; return 0x820C9228;
		/* 82128BA4h case   36:*/		return 0x82128BA8;
		  /* 82128BA8h */ case   37:  		/* cmplwi CR0, R3, 0 */
		/* 82128BA8h case   37:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128BA8h case   37:*/		return 0x82128BAC;
		  /* 82128BACh */ case   38:  		/* bc 12, CR0_EQ, -3780 */
		/* 82128BACh case   38:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128BACh case   38:*/		return 0x82128BB0;
		  /* 82128BB0h */ case   39:  		/* li R5, 50 */
		/* 82128BB0h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x32);
		/* 82128BB0h case   39:*/		return 0x82128BB4;
		  /* 82128BB4h */ case   40:  		/* b -1568 */
		/* 82128BB4h case   40:*/		return 0x82128594;
		/* 82128BB4h case   40:*/		return 0x82128BB8;
		  /* 82128BB8h */ case   41:  		/* li R3, 40 */
		/* 82128BB8h case   41:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128BB8h case   41:*/		return 0x82128BBC;
		  /* 82128BBCh */ case   42:  		/* bl -391572 */
		/* 82128BBCh case   42:*/		regs.LR = 0x82128BC0; return 0x820C9228;
		/* 82128BBCh case   42:*/		return 0x82128BC0;
		  /* 82128BC0h */ case   43:  		/* cmplwi CR0, R3, 0 */
		/* 82128BC0h case   43:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128BC0h case   43:*/		return 0x82128BC4;
		  /* 82128BC4h */ case   44:  		/* bc 12, CR0_EQ, -3804 */
		/* 82128BC4h case   44:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128BC4h case   44:*/		return 0x82128BC8;
		  /* 82128BC8h */ case   45:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128BC8h case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128BC8h case   45:*/		return 0x82128BCC;
		  /* 82128BCCh */ case   46:  		/* li R5, 51 */
		/* 82128BCCh case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 82128BCCh case   46:*/		return 0x82128BD0;
		  /* 82128BD0h */ case   47:  		/* b -1592 */
		/* 82128BD0h case   47:*/		return 0x82128598;
		/* 82128BD0h case   47:*/		return 0x82128BD4;
		  /* 82128BD4h */ case   48:  		/* li R3, 40 */
		/* 82128BD4h case   48:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128BD4h case   48:*/		return 0x82128BD8;
		  /* 82128BD8h */ case   49:  		/* bl -391600 */
		/* 82128BD8h case   49:*/		regs.LR = 0x82128BDC; return 0x820C9228;
		/* 82128BD8h case   49:*/		return 0x82128BDC;
		  /* 82128BDCh */ case   50:  		/* cmplwi CR0, R3, 0 */
		/* 82128BDCh case   50:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128BDCh case   50:*/		return 0x82128BE0;
		  /* 82128BE0h */ case   51:  		/* bc 12, CR0_EQ, -3832 */
		/* 82128BE0h case   51:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128BE0h case   51:*/		return 0x82128BE4;
		  /* 82128BE4h */ case   52:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128BE4h case   52:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128BE4h case   52:*/		return 0x82128BE8;
		  /* 82128BE8h */ case   53:  		/* li R5, 52 */
		/* 82128BE8h case   53:*/		cpu::op::li<0>(regs,&regs.R5,0x34);
		/* 82128BE8h case   53:*/		return 0x82128BEC;
		  /* 82128BECh */ case   54:  		/* b -1620 */
		/* 82128BECh case   54:*/		return 0x82128598;
		/* 82128BECh case   54:*/		return 0x82128BF0;
		  /* 82128BF0h */ case   55:  		/* li R3, 40 */
		/* 82128BF0h case   55:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128BF0h case   55:*/		return 0x82128BF4;
		  /* 82128BF4h */ case   56:  		/* bl -391628 */
		/* 82128BF4h case   56:*/		regs.LR = 0x82128BF8; return 0x820C9228;
		/* 82128BF4h case   56:*/		return 0x82128BF8;
		  /* 82128BF8h */ case   57:  		/* cmplwi CR0, R3, 0 */
		/* 82128BF8h case   57:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128BF8h case   57:*/		return 0x82128BFC;
		  /* 82128BFCh */ case   58:  		/* bc 12, CR0_EQ, -3860 */
		/* 82128BFCh case   58:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128BFCh case   58:*/		return 0x82128C00;
		  /* 82128C00h */ case   59:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128C00h case   59:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128C00h case   59:*/		return 0x82128C04;
		  /* 82128C04h */ case   60:  		/* li R5, 53 */
		/* 82128C04h case   60:*/		cpu::op::li<0>(regs,&regs.R5,0x35);
		/* 82128C04h case   60:*/		return 0x82128C08;
		  /* 82128C08h */ case   61:  		/* b -1648 */
		/* 82128C08h case   61:*/		return 0x82128598;
		/* 82128C08h case   61:*/		return 0x82128C0C;
		  /* 82128C0Ch */ case   62:  		/* li R3, 40 */
		/* 82128C0Ch case   62:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128C0Ch case   62:*/		return 0x82128C10;
		  /* 82128C10h */ case   63:  		/* bl -391656 */
		/* 82128C10h case   63:*/		regs.LR = 0x82128C14; return 0x820C9228;
		/* 82128C10h case   63:*/		return 0x82128C14;
		  /* 82128C14h */ case   64:  		/* cmplwi CR0, R3, 0 */
		/* 82128C14h case   64:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128C14h case   64:*/		return 0x82128C18;
		  /* 82128C18h */ case   65:  		/* bc 12, CR0_EQ, -3888 */
		/* 82128C18h case   65:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128C18h case   65:*/		return 0x82128C1C;
		  /* 82128C1Ch */ case   66:  		/* li R5, 40 */
		/* 82128C1Ch case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 82128C1Ch case   66:*/		return 0x82128C20;
		  /* 82128C20h */ case   67:  		/* b -1676 */
		/* 82128C20h case   67:*/		return 0x82128594;
		/* 82128C20h case   67:*/		return 0x82128C24;
		  /* 82128C24h */ case   68:  		/* li R3, 40 */
		/* 82128C24h case   68:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82128C24h case   68:*/		return 0x82128C28;
		  /* 82128C28h */ case   69:  		/* bl -391680 */
		/* 82128C28h case   69:*/		regs.LR = 0x82128C2C; return 0x820C9228;
		/* 82128C28h case   69:*/		return 0x82128C2C;
		  /* 82128C2Ch */ case   70:  		/* cmplwi CR0, R3, 0 */
		/* 82128C2Ch case   70:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128C2Ch case   70:*/		return 0x82128C30;
		  /* 82128C30h */ case   71:  		/* bc 12, CR0_EQ, -3912 */
		/* 82128C30h case   71:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128C30h case   71:*/		return 0x82128C34;
		  /* 82128C34h */ case   72:  		/* li R5, 41 */
		/* 82128C34h case   72:*/		cpu::op::li<0>(regs,&regs.R5,0x29);
		/* 82128C34h case   72:*/		return 0x82128C38;
		  /* 82128C38h */ case   73:  		/* b -1700 */
		/* 82128C38h case   73:*/		return 0x82128594;
		/* 82128C38h case   73:*/		return 0x82128C3C;
		  /* 82128C3Ch */ case   74:  		/* li R4, 0 */
		/* 82128C3Ch case   74:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128C3Ch case   74:*/		return 0x82128C40;
		  /* 82128C40h */ case   75:  		/* mr R3, R28 */
		/* 82128C40h case   75:*/		regs.R3 = regs.R28;
		/* 82128C40h case   75:*/		return 0x82128C44;
		  /* 82128C44h */ case   76:  		/* lwz R5, <#[R1 + 176]> */
		/* 82128C44h case   76:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128C44h case   76:*/		return 0x82128C48;
		  /* 82128C48h */ case   77:  		/* bl -32552 */
		/* 82128C48h case   77:*/		regs.LR = 0x82128C4C; return 0x82120D20;
		/* 82128C48h case   77:*/		return 0x82128C4C;
		  /* 82128C4Ch */ case   78:  		/* b -3948 */
		/* 82128C4Ch case   78:*/		return 0x82127CE0;
		/* 82128C4Ch case   78:*/		return 0x82128C50;
		  /* 82128C50h */ case   79:  		/* lwz R4, <#[R1 + 184]> */
		/* 82128C50h case   79:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B8) );
		/* 82128C50h case   79:*/		return 0x82128C54;
		  /* 82128C54h */ case   80:  		/* b -20 */
		/* 82128C54h case   80:*/		return 0x82128C40;
		/* 82128C54h case   80:*/		return 0x82128C58;
		  /* 82128C58h */ case   81:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128C58h case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128C58h case   81:*/		return 0x82128C5C;
		  /* 82128C5Ch */ case   82:  		/* lwz R11, <#[R4 + 8]> */
		/* 82128C5Ch case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82128C5Ch case   82:*/		return 0x82128C60;
		  /* 82128C60h */ case   83:  		/* lwz R5, <#[R11 + 24]> */
		/* 82128C60h case   83:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 82128C60h case   83:*/		return 0x82128C64;
		  /* 82128C64h */ case   84:  		/* b -2124 */
		/* 82128C64h case   84:*/		return 0x82128418;
		/* 82128C64h case   84:*/		return 0x82128C68;
		  /* 82128C68h */ case   85:  		/* li R4, 1 */
		/* 82128C68h case   85:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128C68h case   85:*/		return 0x82128C6C;
		  /* 82128C6Ch */ case   86:  		/* li R5, 0 */
		/* 82128C6Ch case   86:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128C6Ch case   86:*/		return 0x82128C70;
		  /* 82128C70h */ case   87:  		/* mr R31, R25 */
		/* 82128C70h case   87:*/		regs.R31 = regs.R25;
		/* 82128C70h case   87:*/		return 0x82128C74;
		  /* 82128C74h */ case   88:  		/* b -3728 */
		/* 82128C74h case   88:*/		return 0x82127DE4;
		/* 82128C74h case   88:*/		return 0x82128C78;
		  /* 82128C78h */ case   89:  		/* lwz R31, <#[R1 + 180]> */
		/* 82128C78h case   89:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128C78h case   89:*/		return 0x82128C7C;
		  /* 82128C7Ch */ case   90:  		/* mr R30, R31 */
		/* 82128C7Ch case   90:*/		regs.R30 = regs.R31;
		/* 82128C7Ch case   90:*/		return 0x82128C80;
		  /* 82128C80h */ case   91:  		/* cmplwi CR6, R31, 0 */
		/* 82128C80h case   91:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82128C80h case   91:*/		return 0x82128C84;
		  /* 82128C84h */ case   92:  		/* bc 12, CR6_EQ, -3868 */
		/* 82128C84h case   92:*/		if ( regs.CR[6].eq ) { return 0x82127D68;  }
		/* 82128C84h case   92:*/		return 0x82128C88;
		  /* 82128C88h */ case   93:  		/* lwz R31, <#[R30 + 8]> */
		/* 82128C88h case   93:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 82128C88h case   93:*/		return 0x82128C8C;
		  /* 82128C8Ch */ case   94:  		/* lwz R11, <#[R31 + 4]> */
		/* 82128C8Ch case   94:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82128C8Ch case   94:*/		return 0x82128C90;
		  /* 82128C90h */ case   95:  		/* cmpwi CR6, R11, 6 */
		/* 82128C90h case   95:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82128C90h case   95:*/		return 0x82128C94;
		  /* 82128C94h */ case   96:  		/* bc 4, CR6_EQ, 56 */
		/* 82128C94h case   96:*/		if ( !regs.CR[6].eq ) { return 0x82128CCC;  }
		/* 82128C94h case   96:*/		return 0x82128C98;
		  /* 82128C98h */ case   97:  		/* lwz R3, <#[R1 + 176]> */
		/* 82128C98h case   97:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128C98h case   97:*/		return 0x82128C9C;
		  /* 82128C9Ch */ case   98:  		/* lwz R11, <#[R3]> */
		/* 82128C9Ch case   98:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82128C9Ch case   98:*/		return 0x82128CA0;
		  /* 82128CA0h */ case   99:  		/* lwz R11, <#[R11 + 4]> */
		/* 82128CA0h case   99:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82128CA0h case   99:*/		return 0x82128CA4;
		  /* 82128CA4h */ case  100:  		/* mtspr CTR, R11 */
		/* 82128CA4h case  100:*/		regs.CTR = regs.R11;
		/* 82128CA4h case  100:*/		return 0x82128CA8;
		  /* 82128CA8h */ case  101:  		/* bcctrl 20, CR0_LT */
		/* 82128CA8h case  101:*/		if ( 1 ) { regs.LR = 0x82128CAC; return (uint32)regs.CTR; }
		/* 82128CA8h case  101:*/		return 0x82128CAC;
		  /* 82128CACh */ case  102:  		/* lwz R11, <#[R31 + 24]> */
		/* 82128CACh case  102:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82128CACh case  102:*/		return 0x82128CB0;
		  /* 82128CB0h */ case  103:  		/* mr R10, R3 */
		/* 82128CB0h case  103:*/		regs.R10 = regs.R3;
		/* 82128CB0h case  103:*/		return 0x82128CB4;
		  /* 82128CB4h */ case  104:  		/* mr R3, R28 */
		/* 82128CB4h case  104:*/		regs.R3 = regs.R28;
		/* 82128CB4h case  104:*/		return 0x82128CB8;
		  /* 82128CB8h */ case  105:  		/* mr R4, R10 */
		/* 82128CB8h case  105:*/		regs.R4 = regs.R10;
		/* 82128CB8h case  105:*/		return 0x82128CBC;
		  /* 82128CBCh */ case  106:  		/* stw R10, <#[R11 + 72]> */
		/* 82128CBCh case  106:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 82128CBCh case  106:*/		return 0x82128CC0;
		  /* 82128CC0h */ case  107:  		/* bl -62120 */
		/* 82128CC0h case  107:*/		regs.LR = 0x82128CC4; return 0x82119A18;
		/* 82128CC0h case  107:*/		return 0x82128CC4;
		  /* 82128CC4h */ case  108:  		/* cmplwi CR0, R3, 0 */
		/* 82128CC4h case  108:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128CC4h case  108:*/		return 0x82128CC8;
		  /* 82128CC8h */ case  109:  		/* bc 12, CR0_EQ, -2796 */
		/* 82128CC8h case  109:*/		if ( regs.CR[0].eq ) { return 0x821281DC;  }
		/* 82128CC8h case  109:*/		return 0x82128CCC;
	}
	return 0x82128CCC;
} // Block from 82128B14h-82128CCCh (110 instructions)

//////////////////////////////////////////////////////
// Block at 82128CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128CCC);
		  /* 82128CCCh */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 82128CCCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82128CCCh case    0:*/		return 0x82128CD0;
		  /* 82128CD0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82128CD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82128CD0h case    1:*/		return 0x82128CD4;
		  /* 82128CD4h */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 82128CD4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82128C88;  }
		/* 82128CD4h case    2:*/		return 0x82128CD8;
		  /* 82128CD8h */ case    3:  		/* b -2812 */
		/* 82128CD8h case    3:*/		return 0x821281DC;
		/* 82128CD8h case    3:*/		return 0x82128CDC;
		  /* 82128CDCh */ case    4:  		/* lwz R3, <#[R1 + 180]> */
		/* 82128CDCh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128CDCh case    4:*/		return 0x82128CE0;
		  /* 82128CE0h */ case    5:  		/* mr R30, R3 */
		/* 82128CE0h case    5:*/		regs.R30 = regs.R3;
		/* 82128CE0h case    5:*/		return 0x82128CE4;
		  /* 82128CE4h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82128CE4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82128CE4h case    6:*/		return 0x82128CE8;
		  /* 82128CE8h */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 82128CE8h case    7:*/		if ( regs.CR[6].eq ) { return 0x82128D40;  }
		/* 82128CE8h case    7:*/		return 0x82128CEC;
		  /* 82128CECh */ case    8:  		/* lwz R31, <#[R30 + 8]> */
		/* 82128CECh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 82128CECh case    8:*/		return 0x82128CF0;
		  /* 82128CF0h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 82128CF0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82128CF0h case    9:*/		return 0x82128CF4;
		  /* 82128CF4h */ case   10:  		/* cmpwi CR6, R11, 6 */
		/* 82128CF4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82128CF4h case   10:*/		return 0x82128CF8;
		  /* 82128CF8h */ case   11:  		/* bc 4, CR6_EQ, 56 */
		/* 82128CF8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82128D30;  }
		/* 82128CF8h case   11:*/		return 0x82128CFC;
		  /* 82128CFCh */ case   12:  		/* lwz R3, <#[R1 + 176]> */
		/* 82128CFCh case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128CFCh case   12:*/		return 0x82128D00;
		  /* 82128D00h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 82128D00h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82128D00h case   13:*/		return 0x82128D04;
		  /* 82128D04h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82128D04h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82128D04h case   14:*/		return 0x82128D08;
		  /* 82128D08h */ case   15:  		/* mtspr CTR, R11 */
		/* 82128D08h case   15:*/		regs.CTR = regs.R11;
		/* 82128D08h case   15:*/		return 0x82128D0C;
		  /* 82128D0Ch */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82128D0Ch case   16:*/		if ( 1 ) { regs.LR = 0x82128D10; return (uint32)regs.CTR; }
		/* 82128D0Ch case   16:*/		return 0x82128D10;
		  /* 82128D10h */ case   17:  		/* lwz R11, <#[R31 + 24]> */
		/* 82128D10h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82128D10h case   17:*/		return 0x82128D14;
		  /* 82128D14h */ case   18:  		/* mr R10, R3 */
		/* 82128D14h case   18:*/		regs.R10 = regs.R3;
		/* 82128D14h case   18:*/		return 0x82128D18;
		  /* 82128D18h */ case   19:  		/* mr R3, R28 */
		/* 82128D18h case   19:*/		regs.R3 = regs.R28;
		/* 82128D18h case   19:*/		return 0x82128D1C;
		  /* 82128D1Ch */ case   20:  		/* mr R4, R10 */
		/* 82128D1Ch case   20:*/		regs.R4 = regs.R10;
		/* 82128D1Ch case   20:*/		return 0x82128D20;
		  /* 82128D20h */ case   21:  		/* stw R10, <#[R11 + 72]> */
		/* 82128D20h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 82128D20h case   21:*/		return 0x82128D24;
		  /* 82128D24h */ case   22:  		/* bl -62220 */
		/* 82128D24h case   22:*/		regs.LR = 0x82128D28; return 0x82119A18;
		/* 82128D24h case   22:*/		return 0x82128D28;
		  /* 82128D28h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 82128D28h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128D28h case   23:*/		return 0x82128D2C;
		  /* 82128D2Ch */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 82128D2Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x82128D3C;  }
		/* 82128D2Ch case   24:*/		return 0x82128D30;
	}
	return 0x82128D30;
} // Block from 82128CCCh-82128D30h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82128D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128D30);
		  /* 82128D30h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 82128D30h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82128D30h case    0:*/		return 0x82128D34;
		  /* 82128D34h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82128D34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82128D34h case    1:*/		return 0x82128D38;
		  /* 82128D38h */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 82128D38h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82128CEC;  }
		/* 82128D38h case    2:*/		return 0x82128D3C;
	}
	return 0x82128D3C;
} // Block from 82128D30h-82128D3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82128D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128D3C);
		  /* 82128D3Ch */ case    0:  		/* lwz R3, <#[R1 + 180]> */
		/* 82128D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128D3Ch case    0:*/		return 0x82128D40;
	}
	return 0x82128D40;
} // Block from 82128D3Ch-82128D40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128D40);
		  /* 82128D40h */ case    0:  		/* lwz R4, <#[R1 + 184]> */
		/* 82128D40h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B8) );
		/* 82128D40h case    0:*/		return 0x82128D44;
		  /* 82128D44h */ case    1:  		/* bl -391612 */
		/* 82128D44h case    1:*/		regs.LR = 0x82128D48; return 0x820C9388;
		/* 82128D44h case    1:*/		return 0x82128D48;
		  /* 82128D48h */ case    2:  		/* mr R31, R3 */
		/* 82128D48h case    2:*/		regs.R31 = regs.R3;
		/* 82128D48h case    2:*/		return 0x82128D4C;
		  /* 82128D4Ch */ case    3:  		/* stw R25, <#[R1 + 180]> */
		/* 82128D4Ch case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128D4Ch case    3:*/		return 0x82128D50;
		  /* 82128D50h */ case    4:  		/* b -3984 */
		/* 82128D50h case    4:*/		return 0x82127DC0;
		/* 82128D50h case    4:*/		return 0x82128D54;
		  /* 82128D54h */ case    5:  		/* mr R31, R25 */
		/* 82128D54h case    5:*/		regs.R31 = regs.R25;
		/* 82128D54h case    5:*/		return 0x82128D58;
		  /* 82128D58h */ case    6:  		/* mr R3, R28 */
		/* 82128D58h case    6:*/		regs.R3 = regs.R28;
		/* 82128D58h case    6:*/		return 0x82128D5C;
		  /* 82128D5Ch */ case    7:  		/* bl -61804 */
		/* 82128D5Ch case    7:*/		regs.LR = 0x82128D60; return 0x82119BF0;
		/* 82128D5Ch case    7:*/		return 0x82128D60;
		  /* 82128D60h */ case    8:  		/* b -2700 */
		/* 82128D60h case    8:*/		return 0x821282D4;
		/* 82128D60h case    8:*/		return 0x82128D64;
		  /* 82128D64h */ case    9:  		/* li R3, 20 */
		/* 82128D64h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82128D64h case    9:*/		return 0x82128D68;
		  /* 82128D68h */ case   10:  		/* bl -392000 */
		/* 82128D68h case   10:*/		regs.LR = 0x82128D6C; return 0x820C9228;
		/* 82128D68h case   10:*/		return 0x82128D6C;
		  /* 82128D6Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82128D6Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128D6Ch case   11:*/		return 0x82128D70;
		  /* 82128D70h */ case   12:  		/* bc 12, CR0_EQ, -4156 */
		/* 82128D70h case   12:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128D70h case   12:*/		return 0x82128D74;
		  /* 82128D74h */ case   13:  		/* lis R11, -32253 */
		/* 82128D74h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128D74h case   13:*/		return 0x82128D78;
		  /* 82128D78h */ case   14:  		/* addi R6, R11, 14860 */
		/* 82128D78h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A0C);
		/* 82128D78h case   14:*/		return 0x82128D7C;
		  /* 82128D7Ch */ case   15:  		/* b -2864 */
		/* 82128D7Ch case   15:*/		return 0x8212824C;
		/* 82128D7Ch case   15:*/		return 0x82128D80;
		  /* 82128D80h */ case   16:  		/* lwz R4, <#[R1 + 180]> */
		/* 82128D80h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128D80h case   16:*/		return 0x82128D84;
		  /* 82128D84h */ case   17:  		/* lwz R3, <#[R1 + 176]> */
		/* 82128D84h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128D84h case   17:*/		return 0x82128D88;
		  /* 82128D88h */ case   18:  		/* bl -391680 */
		/* 82128D88h case   18:*/		regs.LR = 0x82128D8C; return 0x820C9388;
		/* 82128D88h case   18:*/		return 0x82128D8C;
		  /* 82128D8Ch */ case   19:  		/* b -2828 */
		/* 82128D8Ch case   19:*/		return 0x82128280;
		/* 82128D8Ch case   19:*/		return 0x82128D90;
		  /* 82128D90h */ case   20:  		/* li R3, 32 */
		/* 82128D90h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128D90h case   20:*/		return 0x82128D94;
		  /* 82128D94h */ case   21:  		/* bl -392044 */
		/* 82128D94h case   21:*/		regs.LR = 0x82128D98; return 0x820C9228;
		/* 82128D94h case   21:*/		return 0x82128D98;
		  /* 82128D98h */ case   22:  		/* cmplwi CR0, R3, 0 */
		/* 82128D98h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128D98h case   22:*/		return 0x82128D9C;
		  /* 82128D9Ch */ case   23:  		/* bc 12, CR0_EQ, -4200 */
		/* 82128D9Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128D9Ch case   23:*/		return 0x82128DA0;
		  /* 82128DA0h */ case   24:  		/* li R4, 0 */
		/* 82128DA0h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128DA0h case   24:*/		return 0x82128DA4;
		  /* 82128DA4h */ case   25:  		/* li R7, 0 */
		/* 82128DA4h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128DA4h case   25:*/		return 0x82128DA8;
		  /* 82128DA8h */ case   26:  		/* li R5, 0 */
		/* 82128DA8h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128DA8h case   26:*/		return 0x82128DAC;
		  /* 82128DACh */ case   27:  		/* lwz R6, <#[R1 + 176]> */
		/* 82128DACh case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128DACh case   27:*/		return 0x82128DB0;
		  /* 82128DB0h */ case   28:  		/* bl -377872 */
		/* 82128DB0h case   28:*/		regs.LR = 0x82128DB4; return 0x820CC9A0;
		/* 82128DB0h case   28:*/		return 0x82128DB4;
		  /* 82128DB4h */ case   29:  		/* b -4232 */
		/* 82128DB4h case   29:*/		return 0x82127D2C;
		/* 82128DB4h case   29:*/		return 0x82128DB8;
		  /* 82128DB8h */ case   30:  		/* li R3, 32 */
		/* 82128DB8h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128DB8h case   30:*/		return 0x82128DBC;
		  /* 82128DBCh */ case   31:  		/* bl -392084 */
		/* 82128DBCh case   31:*/		regs.LR = 0x82128DC0; return 0x820C9228;
		/* 82128DBCh case   31:*/		return 0x82128DC0;
		  /* 82128DC0h */ case   32:  		/* cmplwi CR0, R3, 0 */
		/* 82128DC0h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128DC0h case   32:*/		return 0x82128DC4;
		  /* 82128DC4h */ case   33:  		/* bc 12, CR0_EQ, -2876 */
		/* 82128DC4h case   33:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82128DC4h case   33:*/		return 0x82128DC8;
		  /* 82128DC8h */ case   34:  		/* li R4, 0 */
		/* 82128DC8h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128DC8h case   34:*/		return 0x82128DCC;
		  /* 82128DCCh */ case   35:  		/* li R7, 0 */
		/* 82128DCCh case   35:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82128DCCh case   35:*/		return 0x82128DD0;
		  /* 82128DD0h */ case   36:  		/* lwz R6, <#[R1 + 180]> */
		/* 82128DD0h case   36:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128DD0h case   36:*/		return 0x82128DD4;
		  /* 82128DD4h */ case   37:  		/* lwz R5, <#[R1 + 176]> */
		/* 82128DD4h case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128DD4h case   37:*/		return 0x82128DD8;
		  /* 82128DD8h */ case   38:  		/* bl -377912 */
		/* 82128DD8h case   38:*/		regs.LR = 0x82128DDC; return 0x820CC9A0;
		/* 82128DD8h case   38:*/		return 0x82128DDC;
		  /* 82128DDCh */ case   39:  		/* b -2908 */
		/* 82128DDCh case   39:*/		return 0x82128280;
		/* 82128DDCh case   39:*/		return 0x82128DE0;
		  /* 82128DE0h */ case   40:  		/* li R3, 32 */
		/* 82128DE0h case   40:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128DE0h case   40:*/		return 0x82128DE4;
		  /* 82128DE4h */ case   41:  		/* bl -392124 */
		/* 82128DE4h case   41:*/		regs.LR = 0x82128DE8; return 0x820C9228;
		/* 82128DE4h case   41:*/		return 0x82128DE8;
		  /* 82128DE8h */ case   42:  		/* cmplwi CR0, R3, 0 */
		/* 82128DE8h case   42:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128DE8h case   42:*/		return 0x82128DEC;
		  /* 82128DECh */ case   43:  		/* bc 12, CR0_EQ, -4280 */
		/* 82128DECh case   43:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128DECh case   43:*/		return 0x82128DF0;
		  /* 82128DF0h */ case   44:  		/* li R4, 1 */
		/* 82128DF0h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128DF0h case   44:*/		return 0x82128DF4;
		  /* 82128DF4h */ case   45:  		/* b -80 */
		/* 82128DF4h case   45:*/		return 0x82128DA4;
		/* 82128DF4h case   45:*/		return 0x82128DF8;
		  /* 82128DF8h */ case   46:  		/* li R3, 32 */
		/* 82128DF8h case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128DF8h case   46:*/		return 0x82128DFC;
		  /* 82128DFCh */ case   47:  		/* bl -392148 */
		/* 82128DFCh case   47:*/		regs.LR = 0x82128E00; return 0x820C9228;
		/* 82128DFCh case   47:*/		return 0x82128E00;
		  /* 82128E00h */ case   48:  		/* cmplwi CR0, R3, 0 */
		/* 82128E00h case   48:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128E00h case   48:*/		return 0x82128E04;
		  /* 82128E04h */ case   49:  		/* bc 12, CR0_EQ, -2940 */
		/* 82128E04h case   49:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82128E04h case   49:*/		return 0x82128E08;
		  /* 82128E08h */ case   50:  		/* li R4, 1 */
		/* 82128E08h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128E08h case   50:*/		return 0x82128E0C;
		  /* 82128E0Ch */ case   51:  		/* b -64 */
		/* 82128E0Ch case   51:*/		return 0x82128DCC;
		/* 82128E0Ch case   51:*/		return 0x82128E10;
		  /* 82128E10h */ case   52:  		/* li R3, 32 */
		/* 82128E10h case   52:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128E10h case   52:*/		return 0x82128E14;
		  /* 82128E14h */ case   53:  		/* bl -392172 */
		/* 82128E14h case   53:*/		regs.LR = 0x82128E18; return 0x820C9228;
		/* 82128E14h case   53:*/		return 0x82128E18;
		  /* 82128E18h */ case   54:  		/* cmplwi CR0, R3, 0 */
		/* 82128E18h case   54:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128E18h case   54:*/		return 0x82128E1C;
		  /* 82128E1Ch */ case   55:  		/* bc 12, CR0_EQ, -4328 */
		/* 82128E1Ch case   55:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128E1Ch case   55:*/		return 0x82128E20;
		  /* 82128E20h */ case   56:  		/* lwz R7, <#[R1 + 180]> */
		/* 82128E20h case   56:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128E20h case   56:*/		return 0x82128E24;
		  /* 82128E24h */ case   57:  		/* li R4, 1 */
		/* 82128E24h case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128E24h case   57:*/		return 0x82128E28;
		  /* 82128E28h */ case   58:  		/* b -128 */
		/* 82128E28h case   58:*/		return 0x82128DA8;
		/* 82128E28h case   58:*/		return 0x82128E2C;
		  /* 82128E2Ch */ case   59:  		/* li R3, 32 */
		/* 82128E2Ch case   59:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82128E2Ch case   59:*/		return 0x82128E30;
		  /* 82128E30h */ case   60:  		/* bl -392200 */
		/* 82128E30h case   60:*/		regs.LR = 0x82128E34; return 0x820C9228;
		/* 82128E30h case   60:*/		return 0x82128E34;
		  /* 82128E34h */ case   61:  		/* cmplwi CR0, R3, 0 */
		/* 82128E34h case   61:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128E34h case   61:*/		return 0x82128E38;
		  /* 82128E38h */ case   62:  		/* bc 12, CR0_EQ, -2992 */
		/* 82128E38h case   62:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82128E38h case   62:*/		return 0x82128E3C;
		  /* 82128E3Ch */ case   63:  		/* lwz R7, <#[R1 + 184]> */
		/* 82128E3Ch case   63:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 82128E3Ch case   63:*/		return 0x82128E40;
		  /* 82128E40h */ case   64:  		/* li R4, 1 */
		/* 82128E40h case   64:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82128E40h case   64:*/		return 0x82128E44;
		  /* 82128E44h */ case   65:  		/* b -116 */
		/* 82128E44h case   65:*/		return 0x82128DD0;
		/* 82128E44h case   65:*/		return 0x82128E48;
		  /* 82128E48h */ case   66:  		/* li R3, 28 */
		/* 82128E48h case   66:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 82128E48h case   66:*/		return 0x82128E4C;
		  /* 82128E4Ch */ case   67:  		/* bl -392228 */
		/* 82128E4Ch case   67:*/		regs.LR = 0x82128E50; return 0x820C9228;
		/* 82128E4Ch case   67:*/		return 0x82128E50;
		  /* 82128E50h */ case   68:  		/* cmplwi CR0, R3, 0 */
		/* 82128E50h case   68:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128E50h case   68:*/		return 0x82128E54;
		  /* 82128E54h */ case   69:  		/* bc 12, CR0_EQ, -4384 */
		/* 82128E54h case   69:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128E54h case   69:*/		return 0x82128E58;
		  /* 82128E58h */ case   70:  		/* li R6, 0 */
		/* 82128E58h case   70:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82128E58h case   70:*/		return 0x82128E5C;
		  /* 82128E5Ch */ case   71:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128E5Ch case   71:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128E5Ch case   71:*/		return 0x82128E60;
		  /* 82128E60h */ case   72:  		/* li R5, 0 */
		/* 82128E60h case   72:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128E60h case   72:*/		return 0x82128E64;
		  /* 82128E64h */ case   73:  		/* bl -377420 */
		/* 82128E64h case   73:*/		regs.LR = 0x82128E68; return 0x820CCC18;
		/* 82128E64h case   73:*/		return 0x82128E68;
		  /* 82128E68h */ case   74:  		/* b -4412 */
		/* 82128E68h case   74:*/		return 0x82127D2C;
		/* 82128E68h case   74:*/		return 0x82128E6C;
		  /* 82128E6Ch */ case   75:  		/* li R3, 28 */
		/* 82128E6Ch case   75:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 82128E6Ch case   75:*/		return 0x82128E70;
		  /* 82128E70h */ case   76:  		/* bl -392264 */
		/* 82128E70h case   76:*/		regs.LR = 0x82128E74; return 0x820C9228;
		/* 82128E70h case   76:*/		return 0x82128E74;
		  /* 82128E74h */ case   77:  		/* cmplwi CR0, R3, 0 */
		/* 82128E74h case   77:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128E74h case   77:*/		return 0x82128E78;
		  /* 82128E78h */ case   78:  		/* bc 12, CR0_EQ, 28 */
		/* 82128E78h case   78:*/		if ( regs.CR[0].eq ) { return 0x82128E94;  }
		/* 82128E78h case   78:*/		return 0x82128E7C;
		  /* 82128E7Ch */ case   79:  		/* lwz R6, <#[R1 + 184]> */
		/* 82128E7Ch case   79:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82128E7Ch case   79:*/		return 0x82128E80;
		  /* 82128E80h */ case   80:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128E80h case   80:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128E80h case   80:*/		return 0x82128E84;
		  /* 82128E84h */ case   81:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128E84h case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128E84h case   81:*/		return 0x82128E88;
		  /* 82128E88h */ case   82:  		/* bl -377456 */
		/* 82128E88h case   82:*/		regs.LR = 0x82128E8C; return 0x820CCC18;
		/* 82128E88h case   82:*/		return 0x82128E8C;
		  /* 82128E8Ch */ case   83:  		/* mr R31, R3 */
		/* 82128E8Ch case   83:*/		regs.R31 = regs.R3;
		/* 82128E8Ch case   83:*/		return 0x82128E90;
		  /* 82128E90h */ case   84:  		/* b 8 */
		/* 82128E90h case   84:*/		return 0x82128E98;
		/* 82128E90h case   84:*/		return 0x82128E94;
	}
	return 0x82128E94;
} // Block from 82128D40h-82128E94h (85 instructions)

//////////////////////////////////////////////////////
// Block at 82128E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128E94);
		  /* 82128E94h */ case    0:  		/* mr R31, R25 */
		/* 82128E94h case    0:*/		regs.R31 = regs.R25;
		/* 82128E94h case    0:*/		return 0x82128E98;
	}
	return 0x82128E98;
} // Block from 82128E94h-82128E98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82128E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82128E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82128E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82128E98);
		  /* 82128E98h */ case    0:  		/* mr R4, R31 */
		/* 82128E98h case    0:*/		regs.R4 = regs.R31;
		/* 82128E98h case    0:*/		return 0x82128E9C;
		  /* 82128E9Ch */ case    1:  		/* mr R3, R28 */
		/* 82128E9Ch case    1:*/		regs.R3 = regs.R28;
		/* 82128E9Ch case    1:*/		return 0x82128EA0;
		  /* 82128EA0h */ case    2:  		/* bl -62600 */
		/* 82128EA0h case    2:*/		regs.LR = 0x82128EA4; return 0x82119A18;
		/* 82128EA0h case    2:*/		return 0x82128EA4;
		  /* 82128EA4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82128EA4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128EA4h case    3:*/		return 0x82128EA8;
		  /* 82128EA8h */ case    4:  		/* bc 12, CR0_EQ, -3028 */
		/* 82128EA8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82128EA8h case    4:*/		return 0x82128EAC;
		  /* 82128EACh */ case    5:  		/* stw R25, <#[R1 + 176]> */
		/* 82128EACh case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128EACh case    5:*/		return 0x82128EB0;
		  /* 82128EB0h */ case    6:  		/* b -356 */
		/* 82128EB0h case    6:*/		return 0x82128D4C;
		/* 82128EB0h case    6:*/		return 0x82128EB4;
		  /* 82128EB4h */ case    7:  		/* li R4, 5 */
		/* 82128EB4h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 82128EB4h case    7:*/		return 0x82128EB8;
		  /* 82128EB8h */ case    8:  		/* b -588 */
		/* 82128EB8h case    8:*/		return 0x82128C6C;
		/* 82128EB8h case    8:*/		return 0x82128EBC;
		  /* 82128EBCh */ case    9:  		/* mr R3, R28 */
		/* 82128EBCh case    9:*/		regs.R3 = regs.R28;
		/* 82128EBCh case    9:*/		return 0x82128EC0;
		  /* 82128EC0h */ case   10:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128EC0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128EC0h case   10:*/		return 0x82128EC4;
		  /* 82128EC4h */ case   11:  		/* bl -41612 */
		/* 82128EC4h case   11:*/		regs.LR = 0x82128EC8; return 0x8211EC38;
		/* 82128EC4h case   11:*/		return 0x82128EC8;
		  /* 82128EC8h */ case   12:  		/* mr R31, R3 */
		/* 82128EC8h case   12:*/		regs.R31 = regs.R3;
		/* 82128EC8h case   12:*/		return 0x82128ECC;
		  /* 82128ECCh */ case   13:  		/* mr R3, R28 */
		/* 82128ECCh case   13:*/		regs.R3 = regs.R28;
		/* 82128ECCh case   13:*/		return 0x82128ED0;
		  /* 82128ED0h */ case   14:  		/* mr R4, R31 */
		/* 82128ED0h case   14:*/		regs.R4 = regs.R31;
		/* 82128ED0h case   14:*/		return 0x82128ED4;
		  /* 82128ED4h */ case   15:  		/* bl -62652 */
		/* 82128ED4h case   15:*/		regs.LR = 0x82128ED8; return 0x82119A18;
		/* 82128ED4h case   15:*/		return 0x82128ED8;
		  /* 82128ED8h */ case   16:  		/* li R3, 20 */
		/* 82128ED8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82128ED8h case   16:*/		return 0x82128EDC;
		  /* 82128EDCh */ case   17:  		/* bl -392372 */
		/* 82128EDCh case   17:*/		regs.LR = 0x82128EE0; return 0x820C9228;
		/* 82128EDCh case   17:*/		return 0x82128EE0;
		  /* 82128EE0h */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 82128EE0h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128EE0h case   18:*/		return 0x82128EE4;
		  /* 82128EE4h */ case   19:  		/* bc 12, CR0_EQ, -4604 */
		/* 82128EE4h case   19:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82128EE4h case   19:*/		return 0x82128EE8;
		  /* 82128EE8h */ case   20:  		/* lis R11, -32253 */
		/* 82128EE8h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128EE8h case   20:*/		return 0x82128EEC;
		  /* 82128EECh */ case   21:  		/* li R5, 0 */
		/* 82128EECh case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128EECh case   21:*/		return 0x82128EF0;
		  /* 82128EF0h */ case   22:  		/* addi R6, R11, 9184 */
		/* 82128EF0h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82128EF0h case   22:*/		return 0x82128EF4;
		  /* 82128EF4h */ case   23:  		/* mr R4, R31 */
		/* 82128EF4h case   23:*/		regs.R4 = regs.R31;
		/* 82128EF4h case   23:*/		return 0x82128EF8;
		  /* 82128EF8h */ case   24:  		/* bl -391944 */
		/* 82128EF8h case   24:*/		regs.LR = 0x82128EFC; return 0x820C93F0;
		/* 82128EF8h case   24:*/		return 0x82128EFC;
		  /* 82128EFCh */ case   25:  		/* b -4636 */
		/* 82128EFCh case   25:*/		return 0x82127CE0;
		/* 82128EFCh case   25:*/		return 0x82128F00;
		  /* 82128F00h */ case   26:  		/* lwz R31, <#[R1 + 180]> */
		/* 82128F00h case   26:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128F00h case   26:*/		return 0x82128F04;
		  /* 82128F04h */ case   27:  		/* stw R25, <#[R1 + 180]> */
		/* 82128F04h case   27:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128F04h case   27:*/		return 0x82128F08;
		  /* 82128F08h */ case   28:  		/* lwz R11, <#[R28 + 24]> */
		/* 82128F08h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 82128F08h case   28:*/		return 0x82128F0C;
		  /* 82128F0Ch */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 82128F0Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82128F0Ch case   29:*/		return 0x82128F10;
		  /* 82128F10h */ case   30:  		/* bc 12, CR6_EQ, -3132 */
		/* 82128F10h case   30:*/		if ( regs.CR[6].eq ) { return 0x821282D4;  }
		/* 82128F10h case   30:*/		return 0x82128F14;
		  /* 82128F14h */ case   31:  		/* lwz R10, <#[R11 + 12]> */
		/* 82128F14h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82128F14h case   31:*/		return 0x82128F18;
		  /* 82128F18h */ case   32:  		/* stw R10, <#[R28 + 24]> */
		/* 82128F18h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 82128F18h case   32:*/		return 0x82128F1C;
		  /* 82128F1Ch */ case   33:  		/* b -4156 */
		/* 82128F1Ch case   33:*/		return 0x82127EE0;
		/* 82128F1Ch case   33:*/		return 0x82128F20;
		  /* 82128F20h */ case   34:  		/* lwz R4, <#[R1 + 180]> */
		/* 82128F20h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128F20h case   34:*/		return 0x82128F24;
		  /* 82128F24h */ case   35:  		/* lwz R3, <#[R1 + 176]> */
		/* 82128F24h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128F24h case   35:*/		return 0x82128F28;
		  /* 82128F28h */ case   36:  		/* bl -392096 */
		/* 82128F28h case   36:*/		regs.LR = 0x82128F2C; return 0x820C9388;
		/* 82128F28h case   36:*/		return 0x82128F2C;
		  /* 82128F2Ch */ case   37:  		/* mr R31, R3 */
		/* 82128F2Ch case   37:*/		regs.R31 = regs.R3;
		/* 82128F2Ch case   37:*/		return 0x82128F30;
		  /* 82128F30h */ case   38:  		/* stw R25, <#[R1 + 176]> */
		/* 82128F30h case   38:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128F30h case   38:*/		return 0x82128F34;
		  /* 82128F34h */ case   39:  		/* b -48 */
		/* 82128F34h case   39:*/		return 0x82128F04;
		/* 82128F34h case   39:*/		return 0x82128F38;
		  /* 82128F38h */ case   40:  		/* mr R3, R28 */
		/* 82128F38h case   40:*/		regs.R3 = regs.R28;
		/* 82128F38h case   40:*/		return 0x82128F3C;
		  /* 82128F3Ch */ case   41:  		/* lwz R7, <#[R1 + 188]> */
		/* 82128F3Ch case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000BC) );
		/* 82128F3Ch case   41:*/		return 0x82128F40;
		  /* 82128F40h */ case   42:  		/* lwz R6, <#[R1 + 184]> */
		/* 82128F40h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82128F40h case   42:*/		return 0x82128F44;
		  /* 82128F44h */ case   43:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128F44h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128F44h case   43:*/		return 0x82128F48;
		  /* 82128F48h */ case   44:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128F48h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128F48h case   44:*/		return 0x82128F4C;
		  /* 82128F4Ch */ case   45:  		/* bl -14732 */
		/* 82128F4Ch case   45:*/		regs.LR = 0x82128F50; return 0x821255C0;
		/* 82128F4Ch case   45:*/		return 0x82128F50;
		  /* 82128F50h */ case   46:  		/* b -4720 */
		/* 82128F50h case   46:*/		return 0x82127CE0;
		/* 82128F50h case   46:*/		return 0x82128F54;
		  /* 82128F54h */ case   47:  		/* li R3, 20 */
		/* 82128F54h case   47:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82128F54h case   47:*/		return 0x82128F58;
		  /* 82128F58h */ case   48:  		/* bl -392496 */
		/* 82128F58h case   48:*/		regs.LR = 0x82128F5C; return 0x820C9228;
		/* 82128F58h case   48:*/		return 0x82128F5C;
		  /* 82128F5Ch */ case   49:  		/* cmplwi CR0, R3, 0 */
		/* 82128F5Ch case   49:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128F5Ch case   49:*/		return 0x82128F60;
		  /* 82128F60h */ case   50:  		/* bc 12, CR0_EQ, -4652 */
		/* 82128F60h case   50:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82128F60h case   50:*/		return 0x82128F64;
		  /* 82128F64h */ case   51:  		/* lis R11, -32253 */
		/* 82128F64h case   51:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128F64h case   51:*/		return 0x82128F68;
		  /* 82128F68h */ case   52:  		/* addi R6, R11, 14848 */
		/* 82128F68h case   52:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A00);
		/* 82128F68h case   52:*/		return 0x82128F6C;
		  /* 82128F6Ch */ case   53:  		/* b -3360 */
		/* 82128F6Ch case   53:*/		return 0x8212824C;
		/* 82128F6Ch case   53:*/		return 0x82128F70;
		  /* 82128F70h */ case   54:  		/* li R3, 20 */
		/* 82128F70h case   54:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82128F70h case   54:*/		return 0x82128F74;
		  /* 82128F74h */ case   55:  		/* bl -392524 */
		/* 82128F74h case   55:*/		regs.LR = 0x82128F78; return 0x820C9228;
		/* 82128F74h case   55:*/		return 0x82128F78;
		  /* 82128F78h */ case   56:  		/* cmplwi CR0, R3, 0 */
		/* 82128F78h case   56:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82128F78h case   56:*/		return 0x82128F7C;
		  /* 82128F7Ch */ case   57:  		/* bc 12, CR0_EQ, -3316 */
		/* 82128F7Ch case   57:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82128F7Ch case   57:*/		return 0x82128F80;
		  /* 82128F80h */ case   58:  		/* lis R11, -32253 */
		/* 82128F80h case   58:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82128F80h case   58:*/		return 0x82128F84;
		  /* 82128F84h */ case   59:  		/* addi R6, R11, 14848 */
		/* 82128F84h case   59:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3A00);
		/* 82128F84h case   59:*/		return 0x82128F88;
		  /* 82128F88h */ case   60:  		/* b -3348 */
		/* 82128F88h case   60:*/		return 0x82128274;
		/* 82128F88h case   60:*/		return 0x82128F8C;
		  /* 82128F8Ch */ case   61:  		/* li R5, 0 */
		/* 82128F8Ch case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128F8Ch case   61:*/		return 0x82128F90;
		  /* 82128F90h */ case   62:  		/* li R4, 0 */
		/* 82128F90h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82128F90h case   62:*/		return 0x82128F94;
		  /* 82128F94h */ case   63:  		/* mr R3, R28 */
		/* 82128F94h case   63:*/		regs.R3 = regs.R28;
		/* 82128F94h case   63:*/		return 0x82128F98;
		  /* 82128F98h */ case   64:  		/* bl -66144 */
		/* 82128F98h case   64:*/		regs.LR = 0x82128F9C; return 0x82118D38;
		/* 82128F98h case   64:*/		return 0x82128F9C;
		  /* 82128F9Ch */ case   65:  		/* b -4796 */
		/* 82128F9Ch case   65:*/		return 0x82127CE0;
		/* 82128F9Ch case   65:*/		return 0x82128FA0;
		  /* 82128FA0h */ case   66:  		/* li R5, 0 */
		/* 82128FA0h case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82128FA0h case   66:*/		return 0x82128FA4;
		  /* 82128FA4h */ case   67:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128FA4h case   67:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128FA4h case   67:*/		return 0x82128FA8;
		  /* 82128FA8h */ case   68:  		/* mr R3, R28 */
		/* 82128FA8h case   68:*/		regs.R3 = regs.R28;
		/* 82128FA8h case   68:*/		return 0x82128FAC;
		  /* 82128FACh */ case   69:  		/* bl -66164 */
		/* 82128FACh case   69:*/		regs.LR = 0x82128FB0; return 0x82118D38;
		/* 82128FACh case   69:*/		return 0x82128FB0;
		  /* 82128FB0h */ case   70:  		/* b -4652 */
		/* 82128FB0h case   70:*/		return 0x82127D84;
		/* 82128FB0h case   70:*/		return 0x82128FB4;
		  /* 82128FB4h */ case   71:  		/* mr R3, R28 */
		/* 82128FB4h case   71:*/		regs.R3 = regs.R28;
		/* 82128FB4h case   71:*/		return 0x82128FB8;
		  /* 82128FB8h */ case   72:  		/* lwz R5, <#[R1 + 180]> */
		/* 82128FB8h case   72:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82128FB8h case   72:*/		return 0x82128FBC;
		  /* 82128FBCh */ case   73:  		/* lwz R4, <#[R1 + 176]> */
		/* 82128FBCh case   73:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128FBCh case   73:*/		return 0x82128FC0;
		  /* 82128FC0h */ case   74:  		/* bl -66184 */
		/* 82128FC0h case   74:*/		regs.LR = 0x82128FC4; return 0x82118D38;
		/* 82128FC0h case   74:*/		return 0x82128FC4;
		  /* 82128FC4h */ case   75:  		/* mr R31, R3 */
		/* 82128FC4h case   75:*/		regs.R31 = regs.R3;
		/* 82128FC4h case   75:*/		return 0x82128FC8;
		  /* 82128FC8h */ case   76:  		/* mr R3, R28 */
		/* 82128FC8h case   76:*/		regs.R3 = regs.R28;
		/* 82128FC8h case   76:*/		return 0x82128FCC;
		  /* 82128FCCh */ case   77:  		/* mr R4, R31 */
		/* 82128FCCh case   77:*/		regs.R4 = regs.R31;
		/* 82128FCCh case   77:*/		return 0x82128FD0;
		  /* 82128FD0h */ case   78:  		/* bl -62904 */
		/* 82128FD0h case   78:*/		regs.LR = 0x82128FD4; return 0x82119A18;
		/* 82128FD0h case   78:*/		return 0x82128FD4;
		  /* 82128FD4h */ case   79:  		/* b -4720 */
		/* 82128FD4h case   79:*/		return 0x82127D64;
		/* 82128FD4h case   79:*/		return 0x82128FD8;
		  /* 82128FD8h */ case   80:  		/* lwz R31, <#[R1 + 176]> */
		/* 82128FD8h case   80:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128FD8h case   80:*/		return 0x82128FDC;
		  /* 82128FDCh */ case   81:  		/* stw R25, <#[R1 + 176]> */
		/* 82128FDCh case   81:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128FDCh case   81:*/		return 0x82128FE0;
		  /* 82128FE0h */ case   82:  		/* mr R3, R28 */
		/* 82128FE0h case   82:*/		regs.R3 = regs.R28;
		/* 82128FE0h case   82:*/		return 0x82128FE4;
		  /* 82128FE4h */ case   83:  		/* bl -62452 */
		/* 82128FE4h case   83:*/		regs.LR = 0x82128FE8; return 0x82119BF0;
		/* 82128FE4h case   83:*/		return 0x82128FE8;
		  /* 82128FE8h */ case   84:  		/* stw R25, <#[R28 + 32]> */
		/* 82128FE8h case   84:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x00000020) );
		/* 82128FE8h case   84:*/		return 0x82128FEC;
		  /* 82128FECh */ case   85:  		/* b -3352 */
		/* 82128FECh case   85:*/		return 0x821282D4;
		/* 82128FECh case   85:*/		return 0x82128FF0;
		  /* 82128FF0h */ case   86:  		/* lwz R31, <#[R1 + 176]> */
		/* 82128FF0h case   86:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82128FF0h case   86:*/		return 0x82128FF4;
		  /* 82128FF4h */ case   87:  		/* cmplwi CR6, R31, 0 */
		/* 82128FF4h case   87:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82128FF4h case   87:*/		return 0x82128FF8;
		  /* 82128FF8h */ case   88:  		/* bc 12, CR6_EQ, -28 */
		/* 82128FF8h case   88:*/		if ( regs.CR[6].eq ) { return 0x82128FDC;  }
		/* 82128FF8h case   88:*/		return 0x82128FFC;
		  /* 82128FFCh */ case   89:  		/* lwz R29, <#[R31 + 8]> */
		/* 82128FFCh case   89:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 82128FFCh case   89:*/		return 0x82129000;
		  /* 82129000h */ case   90:  		/* cmplwi CR6, R29, 0 */
		/* 82129000h case   90:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82129000h case   90:*/		return 0x82129004;
		  /* 82129004h */ case   91:  		/* bc 12, CR6_EQ, -40 */
		/* 82129004h case   91:*/		if ( regs.CR[6].eq ) { return 0x82128FDC;  }
		/* 82129004h case   91:*/		return 0x82129008;
		  /* 82129008h */ case   92:  		/* lwz R11, <#[R1 + 180]> */
		/* 82129008h case   92:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129008h case   92:*/		return 0x8212900C;
		  /* 8212900Ch */ case   93:  		/* li R3, 52 */
		/* 8212900Ch case   93:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 8212900Ch case   93:*/		return 0x82129010;
		  /* 82129010h */ case   94:  		/* lwz R30, <#[R29 + 24]> */
		/* 82129010h case   94:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000018) );
		/* 82129010h case   94:*/		return 0x82129014;
		  /* 82129014h */ case   95:  		/* stw R11, <#[R29 + 28]> */
		/* 82129014h case   95:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82129014h case   95:*/		return 0x82129018;
		  /* 82129018h */ case   96:  		/* lwz R11, <#[R1 + 184]> */
		/* 82129018h case   96:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129018h case   96:*/		return 0x8212901C;
		  /* 8212901Ch */ case   97:  		/* stw R26, <#[R30 + 76]> */
		/* 8212901Ch case   97:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x0000004C) );
		/* 8212901Ch case   97:*/		return 0x82129020;
		  /* 82129020h */ case   98:  		/* stw R11, <#[R30 + 48]> */
		/* 82129020h case   98:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82129020h case   98:*/		return 0x82129024;
		  /* 82129024h */ case   99:  		/* bl -392700 */
		/* 82129024h case   99:*/		regs.LR = 0x82129028; return 0x820C9228;
		/* 82129024h case   99:*/		return 0x82129028;
		  /* 82129028h */ case  100:  		/* cmplwi CR0, R3, 0 */
		/* 82129028h case  100:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129028h case  100:*/		return 0x8212902C;
		  /* 8212902Ch */ case  101:  		/* bc 12, CR0_EQ, 16 */
		/* 8212902Ch case  101:*/		if ( regs.CR[0].eq ) { return 0x8212903C;  }
		/* 8212902Ch case  101:*/		return 0x82129030;
		  /* 82129030h */ case  102:  		/* bl -382464 */
		/* 82129030h case  102:*/		regs.LR = 0x82129034; return 0x820CBA30;
		/* 82129030h case  102:*/		return 0x82129034;
		  /* 82129034h */ case  103:  		/* mr R31, R3 */
		/* 82129034h case  103:*/		regs.R31 = regs.R3;
		/* 82129034h case  103:*/		return 0x82129038;
		  /* 82129038h */ case  104:  		/* b 8 */
		/* 82129038h case  104:*/		return 0x82129040;
		/* 82129038h case  104:*/		return 0x8212903C;
	}
	return 0x8212903C;
} // Block from 82128E98h-8212903Ch (105 instructions)

//////////////////////////////////////////////////////
// Block at 8212903Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212903C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212903C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212903C);
		  /* 8212903Ch */ case    0:  		/* mr R31, R25 */
		/* 8212903Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212903Ch case    0:*/		return 0x82129040;
	}
	return 0x82129040;
} // Block from 8212903Ch-82129040h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129040);
		  /* 82129040h */ case    0:  		/* mr R4, R31 */
		/* 82129040h case    0:*/		regs.R4 = regs.R31;
		/* 82129040h case    0:*/		return 0x82129044;
		  /* 82129044h */ case    1:  		/* mr R3, R28 */
		/* 82129044h case    1:*/		regs.R3 = regs.R28;
		/* 82129044h case    1:*/		return 0x82129048;
		  /* 82129048h */ case    2:  		/* bl -63024 */
		/* 82129048h case    2:*/		regs.LR = 0x8212904C; return 0x82119A18;
		/* 82129048h case    2:*/		return 0x8212904C;
		  /* 8212904Ch */ case    3:  		/* stw R3, <#[R30 + 64]> */
		/* 8212904Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000040) );
		/* 8212904Ch case    3:*/		return 0x82129050;
		  /* 82129050h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82129050h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82129050h case    4:*/		return 0x82129054;
		  /* 82129054h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 82129054h case    5:*/		if ( regs.CR[6].eq ) { return 0x821290B4;  }
		/* 82129054h case    5:*/		return 0x82129058;
		  /* 82129058h */ case    6:  		/* stw R26, <#[R31 + 16]> */
		/* 82129058h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 82129058h case    6:*/		return 0x8212905C;
		  /* 8212905Ch */ case    7:  		/* li R3, 88 */
		/* 8212905Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8212905Ch case    7:*/		return 0x82129060;
		  /* 82129060h */ case    8:  		/* lwz R11, <#[R28 + 120]> */
		/* 82129060h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000078) );
		/* 82129060h case    8:*/		return 0x82129064;
		  /* 82129064h */ case    9:  		/* stw R11, <#[R31 + 48]> */
		/* 82129064h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82129064h case    9:*/		return 0x82129068;
		  /* 82129068h */ case   10:  		/* lwz R11, <#[R28 + 120]> */
		/* 82129068h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000078) );
		/* 82129068h case   10:*/		return 0x8212906C;
		  /* 8212906Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 8212906Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212906Ch case   11:*/		return 0x82129070;
		  /* 82129070h */ case   12:  		/* stw R11, <#[R28 + 120]> */
		/* 82129070h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000078) );
		/* 82129070h case   12:*/		return 0x82129074;
		  /* 82129074h */ case   13:  		/* bl -392780 */
		/* 82129074h case   13:*/		regs.LR = 0x82129078; return 0x820C9228;
		/* 82129074h case   13:*/		return 0x82129078;
		  /* 82129078h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 82129078h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129078h case   14:*/		return 0x8212907C;
		  /* 8212907Ch */ case   15:  		/* bc 12, CR0_EQ, 40 */
		/* 8212907Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821290A4;  }
		/* 8212907Ch case   15:*/		return 0x82129080;
		  /* 82129080h */ case   16:  		/* addi R9, R28, 40 */
		/* 82129080h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x28);
		/* 82129080h case   16:*/		return 0x82129084;
		  /* 82129084h */ case   17:  		/* li R8, 1 */
		/* 82129084h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82129084h case   17:*/		return 0x82129088;
		  /* 82129088h */ case   18:  		/* li R7, 0 */
		/* 82129088h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129088h case   18:*/		return 0x8212908C;
		  /* 8212908Ch */ case   19:  		/* li R6, 0 */
		/* 8212908Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212908Ch case   19:*/		return 0x82129090;
		  /* 82129090h */ case   20:  		/* li R5, 0 */
		/* 82129090h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129090h case   20:*/		return 0x82129094;
		  /* 82129094h */ case   21:  		/* li R4, 0 */
		/* 82129094h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129094h case   21:*/		return 0x82129098;
		  /* 82129098h */ case   22:  		/* bl -381200 */
		/* 82129098h case   22:*/		regs.LR = 0x8212909C; return 0x820CBF88;
		/* 82129098h case   22:*/		return 0x8212909C;
		  /* 8212909Ch */ case   23:  		/* mr R4, R3 */
		/* 8212909Ch case   23:*/		regs.R4 = regs.R3;
		/* 8212909Ch case   23:*/		return 0x821290A0;
		  /* 821290A0h */ case   24:  		/* b 8 */
		/* 821290A0h case   24:*/		return 0x821290A8;
		/* 821290A0h case   24:*/		return 0x821290A4;
	}
	return 0x821290A4;
} // Block from 82129040h-821290A4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821290A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821290A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821290A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821290A4);
		  /* 821290A4h */ case    0:  		/* mr R4, R25 */
		/* 821290A4h case    0:*/		regs.R4 = regs.R25;
		/* 821290A4h case    0:*/		return 0x821290A8;
	}
	return 0x821290A8;
} // Block from 821290A4h-821290A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821290A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821290A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821290A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821290A8);
		  /* 821290A8h */ case    0:  		/* mr R3, R28 */
		/* 821290A8h case    0:*/		regs.R3 = regs.R28;
		/* 821290A8h case    0:*/		return 0x821290AC;
		  /* 821290ACh */ case    1:  		/* bl -63124 */
		/* 821290ACh case    1:*/		regs.LR = 0x821290B0; return 0x82119A18;
		/* 821290ACh case    1:*/		return 0x821290B0;
		  /* 821290B0h */ case    2:  		/* stw R3, <#[R31 + 24]> */
		/* 821290B0h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 821290B0h case    2:*/		return 0x821290B4;
	}
	return 0x821290B4;
} // Block from 821290A8h-821290B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821290B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821290B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821290B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821290B4);
		  /* 821290B4h */ case    0:  		/* stw R25, <#[R1 + 184]> */
		/* 821290B4h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 821290B4h case    0:*/		return 0x821290B8;
		  /* 821290B8h */ case    1:  		/* stw R25, <#[R1 + 180]> */
		/* 821290B8h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 821290B8h case    1:*/		return 0x821290BC;
		  /* 821290BCh */ case    2:  		/* lwz R5, <#[R28 + 20]> */
		/* 821290BCh case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000014) );
		/* 821290BCh case    2:*/		return 0x821290C0;
		  /* 821290C0h */ case    3:  		/* lwz R11, <#[R29 + 20]> */
		/* 821290C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821290C0h case    3:*/		return 0x821290C4;
		  /* 821290C4h */ case    4:  		/* addi R4, R11, 16 */
		/* 821290C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 821290C4h case    4:*/		return 0x821290C8;
		  /* 821290C8h */ case    5:  		/* b 76 */
		/* 821290C8h case    5:*/		return 0x82129114;
		/* 821290C8h case    5:*/		return 0x821290CC;
		  /* 821290CCh */ case    6:  		/* mr R3, R28 */
		/* 821290CCh case    6:*/		regs.R3 = regs.R28;
		/* 821290CCh case    6:*/		return 0x821290D0;
		  /* 821290D0h */ case    7:  		/* bl -69560 */
		/* 821290D0h case    7:*/		regs.LR = 0x821290D4; return 0x82118118;
		/* 821290D0h case    7:*/		return 0x821290D4;
		  /* 821290D4h */ case    8:  		/* or. R31, R3, R3 */
		/* 821290D4h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821290D4h case    8:*/		return 0x821290D8;
		  /* 821290D8h */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 821290D8h case    9:*/		if ( regs.CR[0].eq ) { return 0x82129110;  }
		/* 821290D8h case    9:*/		return 0x821290DC;
		  /* 821290DCh */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821290DCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821290DCh case   10:*/		return 0x821290E0;
		  /* 821290E0h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821290E0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821290E0h case   11:*/		return 0x821290E4;
		  /* 821290E4h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821290E4h case   12:*/		if ( regs.CR[6].eq ) { return 0x82129104;  }
		/* 821290E4h case   12:*/		return 0x821290E8;
		  /* 821290E8h */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 821290E8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821290E8h case   13:*/		return 0x821290EC;
		  /* 821290ECh */ case   14:  		/* cmpwi CR6, R10, 6 */
		/* 821290ECh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 821290ECh case   14:*/		return 0x821290F0;
		  /* 821290F0h */ case   15:  		/* bc 4, CR6_EQ, 20 */
		/* 821290F0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82129104;  }
		/* 821290F0h case   15:*/		return 0x821290F4;
		  /* 821290F4h */ case   16:  		/* lwz R10, <#[R11 + 40]> */
		/* 821290F4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 821290F4h case   16:*/		return 0x821290F8;
		  /* 821290F8h */ case   17:  		/* lwz R9, <#[R29 + 40]> */
		/* 821290F8h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000028) );
		/* 821290F8h case   17:*/		return 0x821290FC;
		  /* 821290FCh */ case   18:  		/* cmplw CR6, R10, R9 */
		/* 821290FCh case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821290FCh case   18:*/		return 0x82129100;
		  /* 82129100h */ case   19:  		/* bc 12, CR6_EQ, 32 */
		/* 82129100h case   19:*/		if ( regs.CR[6].eq ) { return 0x82129120;  }
		/* 82129100h case   19:*/		return 0x82129104;
	}
	return 0x82129104;
} // Block from 821290B4h-82129104h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82129104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129104);
		  /* 82129104h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 82129104h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82129104h case    0:*/		return 0x82129108;
		  /* 82129108h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82129108h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82129108h case    1:*/		return 0x8212910C;
		  /* 8212910Ch */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 8212910Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821290DC;  }
		/* 8212910Ch case    2:*/		return 0x82129110;
	}
	return 0x82129110;
} // Block from 82129104h-82129110h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82129110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129110);
		  /* 82129110h */ case    0:  		/* lwz R5, <#[R5 + 32]> */
		/* 82129110h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000020) );
		/* 82129110h case    0:*/		return 0x82129114;
	}
	return 0x82129114;
} // Block from 82129110h-82129114h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129114);
		  /* 82129114h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82129114h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82129114h case    0:*/		return 0x82129118;
		  /* 82129118h */ case    1:  		/* bc 4, CR6_EQ, -76 */
		/* 82129118h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821290CC;  }
		/* 82129118h case    1:*/		return 0x8212911C;
		  /* 8212911Ch */ case    2:  		/* b -324 */
		/* 8212911Ch case    2:*/		return 0x82128FD8;
		/* 8212911Ch case    2:*/		return 0x82129120;
	}
	return 0x82129120;
} // Block from 82129114h-82129120h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82129120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129120);
		  /* 82129120h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 82129120h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82129120h case    0:*/		return 0x82129124;
		  /* 82129124h */ case    1:  		/* lwz R11, <#[R11 + 76]> */
		/* 82129124h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 82129124h case    1:*/		return 0x82129128;
		  /* 82129128h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 82129128h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82129128h case    2:*/		return 0x8212912C;
		  /* 8212912Ch */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8212912Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82129148;  }
		/* 8212912Ch case    3:*/		return 0x82129130;
		  /* 82129130h */ case    4:  		/* lis R11, -32253 */
		/* 82129130h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129130h case    4:*/		return 0x82129134;
		  /* 82129134h */ case    5:  		/* lwz R7, <#[R4 + 8]> */
		/* 82129134h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 82129134h case    5:*/		return 0x82129138;
		  /* 82129138h */ case    6:  		/* li R5, 3069 */
		/* 82129138h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xBFD);
		/* 82129138h case    6:*/		return 0x8212913C;
		  /* 8212913Ch */ case    7:  		/* addi R6, R11, 14824 */
		/* 8212913Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x39E8);
		/* 8212913Ch case    7:*/		return 0x82129140;
		  /* 82129140h */ case    8:  		/* mr R3, R28 */
		/* 82129140h case    8:*/		regs.R3 = regs.R28;
		/* 82129140h case    8:*/		return 0x82129144;
		  /* 82129144h */ case    9:  		/* bl -63652 */
		/* 82129144h case    9:*/		regs.LR = 0x82129148; return 0x821198A0;
		/* 82129144h case    9:*/		return 0x82129148;
	}
	return 0x82129148;
} // Block from 82129120h-82129148h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82129148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129148);
		  /* 82129148h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82129148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82129148h case    0:*/		return 0x8212914C;
		  /* 8212914Ch */ case    1:  		/* lwz R11, <#[R11 + 24]> */
		/* 8212914Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8212914Ch case    1:*/		return 0x82129150;
		  /* 82129150h */ case    2:  		/* stw R26, <#[R11 + 76]> */
		/* 82129150h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x0000004C) );
		/* 82129150h case    2:*/		return 0x82129154;
		  /* 82129154h */ case    3:  		/* b -380 */
		/* 82129154h case    3:*/		return 0x82128FD8;
		/* 82129154h case    3:*/		return 0x82129158;
		  /* 82129158h */ case    4:  		/* lwz R7, <#[R1 + 188]> */
		/* 82129158h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129158h case    4:*/		return 0x8212915C;
		  /* 8212915Ch */ case    5:  		/* li R4, 0 */
		/* 8212915Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212915Ch case    5:*/		return 0x82129160;
		  /* 82129160h */ case    6:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129160h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129160h case    6:*/		return 0x82129164;
		  /* 82129164h */ case    7:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129164h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129164h case    7:*/		return 0x82129168;
		  /* 82129168h */ case    8:  		/* mr R3, R28 */
		/* 82129168h case    8:*/		regs.R3 = regs.R28;
		/* 82129168h case    8:*/		return 0x8212916C;
		  /* 8212916Ch */ case    9:  		/* bl -11724 */
		/* 8212916Ch case    9:*/		regs.LR = 0x82129170; return 0x821263A0;
		/* 8212916Ch case    9:*/		return 0x82129170;
		  /* 82129170h */ case   10:  		/* mr R31, R3 */
		/* 82129170h case   10:*/		regs.R31 = regs.R3;
		/* 82129170h case   10:*/		return 0x82129174;
		  /* 82129174h */ case   11:  		/* mr R3, R28 */
		/* 82129174h case   11:*/		regs.R3 = regs.R28;
		/* 82129174h case   11:*/		return 0x82129178;
		  /* 82129178h */ case   12:  		/* mr R4, R31 */
		/* 82129178h case   12:*/		regs.R4 = regs.R31;
		/* 82129178h case   12:*/		return 0x8212917C;
		  /* 8212917Ch */ case   13:  		/* bl -63332 */
		/* 8212917Ch case   13:*/		regs.LR = 0x82129180; return 0x82119A18;
		/* 8212917Ch case   13:*/		return 0x82129180;
		  /* 82129180h */ case   14:  		/* b -632 */
		/* 82129180h case   14:*/		return 0x82128F08;
		/* 82129180h case   14:*/		return 0x82129184;
		  /* 82129184h */ case   15:  		/* lwz R7, <#[R1 + 192]> */
		/* 82129184h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C0) );
		/* 82129184h case   15:*/		return 0x82129188;
		  /* 82129188h */ case   16:  		/* lwz R6, <#[R1 + 188]> */
		/* 82129188h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129188h case   16:*/		return 0x8212918C;
		  /* 8212918Ch */ case   17:  		/* lwz R5, <#[R1 + 184]> */
		/* 8212918Ch case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 8212918Ch case   17:*/		return 0x82129190;
		  /* 82129190h */ case   18:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129190h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129190h case   18:*/		return 0x82129194;
		  /* 82129194h */ case   19:  		/* b -44 */
		/* 82129194h case   19:*/		return 0x82129168;
		/* 82129194h case   19:*/		return 0x82129198;
		  /* 82129198h */ case   20:  		/* lwz R5, <#[R28 + 36]> */
		/* 82129198h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000024) );
		/* 82129198h case   20:*/		return 0x8212919C;
		  /* 8212919Ch */ case   21:  		/* li R4, 2 */
		/* 8212919Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212919Ch case   21:*/		return 0x821291A0;
		  /* 821291A0h */ case   22:  		/* b -1328 */
		/* 821291A0h case   22:*/		return 0x82128C70;
		/* 821291A0h case   22:*/		return 0x821291A4;
		  /* 821291A4h */ case   23:  		/* li R3, 32 */
		/* 821291A4h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821291A4h case   23:*/		return 0x821291A8;
		  /* 821291A8h */ case   24:  		/* bl -393088 */
		/* 821291A8h case   24:*/		regs.LR = 0x821291AC; return 0x820C9228;
		/* 821291A8h case   24:*/		return 0x821291AC;
		  /* 821291ACh */ case   25:  		/* cmplwi CR0, R3, 0 */
		/* 821291ACh case   25:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821291ACh case   25:*/		return 0x821291B0;
		  /* 821291B0h */ case   26:  		/* bc 12, CR0_EQ, -4220 */
		/* 821291B0h case   26:*/		if ( regs.CR[0].eq ) { return 0x82128134;  }
		/* 821291B0h case   26:*/		return 0x821291B4;
		  /* 821291B4h */ case   27:  		/* li R4, 16 */
		/* 821291B4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 821291B4h case   27:*/		return 0x821291B8;
		  /* 821291B8h */ case   28:  		/* b -4252 */
		/* 821291B8h case   28:*/		return 0x8212811C;
		/* 821291B8h case   28:*/		return 0x821291BC;
		  /* 821291BCh */ case   29:  		/* lwz R11, <#[R1 + 180]> */
		/* 821291BCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 821291BCh case   29:*/		return 0x821291C0;
		  /* 821291C0h */ case   30:  		/* lwz R10, <#[R1 + 176]> */
		/* 821291C0h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821291C0h case   30:*/		return 0x821291C4;
		  /* 821291C4h */ case   31:  		/* stw R11, <#[R10 + 24]> */
		/* 821291C4h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821291C4h case   31:*/		return 0x821291C8;
		  /* 821291C8h */ case   32:  		/* lwz R31, <#[R1 + 176]> */
		/* 821291C8h case   32:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 821291C8h case   32:*/		return 0x821291CC;
		  /* 821291CCh */ case   33:  		/* stw R25, <#[R1 + 180]> */
		/* 821291CCh case   33:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 821291CCh case   33:*/		return 0x821291D0;
		  /* 821291D0h */ case   34:  		/* stw R25, <#[R1 + 176]> */
		/* 821291D0h case   34:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821291D0h case   34:*/		return 0x821291D4;
		  /* 821291D4h */ case   35:  		/* lwz R11, <#[R31 + 16]> */
		/* 821291D4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821291D4h case   35:*/		return 0x821291D8;
		  /* 821291D8h */ case   36:  		/* rlwinm. R11, R11, 0, 25, 27 */
		/* 821291D8h case   36:*/		cpu::op::rlwinm<1,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821291D8h case   36:*/		return 0x821291DC;
		  /* 821291DCh */ case   37:  		/* bc 4, CR0_EQ, -4228 */
		/* 821291DCh case   37:*/		if ( !regs.CR[0].eq ) { return 0x82128158;  }
		/* 821291DCh case   37:*/		return 0x821291E0;
		  /* 821291E0h */ case   38:  		/* lwz R11, <#[R31 + 16]> */
		/* 821291E0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821291E0h case   38:*/		return 0x821291E4;
		  /* 821291E4h */ case   39:  		/* ori R11, R11, 16 */
		/* 821291E4h case   39:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821291E4h case   39:*/		return 0x821291E8;
		  /* 821291E8h */ case   40:  		/* stw R11, <#[R31 + 16]> */
		/* 821291E8h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821291E8h case   40:*/		return 0x821291EC;
		  /* 821291ECh */ case   41:  		/* b -4244 */
		/* 821291ECh case   41:*/		return 0x82128158;
		/* 821291ECh case   41:*/		return 0x821291F0;
		  /* 821291F0h */ case   42:  		/* li R3, 32 */
		/* 821291F0h case   42:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821291F0h case   42:*/		return 0x821291F4;
		  /* 821291F4h */ case   43:  		/* bl -393164 */
		/* 821291F4h case   43:*/		regs.LR = 0x821291F8; return 0x820C9228;
		/* 821291F4h case   43:*/		return 0x821291F8;
		  /* 821291F8h */ case   44:  		/* cmplwi CR0, R3, 0 */
		/* 821291F8h case   44:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821291F8h case   44:*/		return 0x821291FC;
		  /* 821291FCh */ case   45:  		/* bc 12, CR0_EQ, 32 */
		/* 821291FCh case   45:*/		if ( regs.CR[0].eq ) { return 0x8212921C;  }
		/* 821291FCh case   45:*/		return 0x82129200;
		  /* 82129200h */ case   46:  		/* li R7, 0 */
		/* 82129200h case   46:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129200h case   46:*/		return 0x82129204;
		  /* 82129204h */ case   47:  		/* li R6, 0 */
		/* 82129204h case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129204h case   47:*/		return 0x82129208;
		  /* 82129208h */ case   48:  		/* li R5, 0 */
		/* 82129208h case   48:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129208h case   48:*/		return 0x8212920C;
		  /* 8212920Ch */ case   49:  		/* li R4, 0 */
		/* 8212920Ch case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212920Ch case   49:*/		return 0x82129210;
		  /* 82129210h */ case   50:  		/* bl -387576 */
		/* 82129210h case   50:*/		regs.LR = 0x82129214; return 0x820CA818;
		/* 82129210h case   50:*/		return 0x82129214;
		  /* 82129214h */ case   51:  		/* mr R31, R3 */
		/* 82129214h case   51:*/		regs.R31 = regs.R3;
		/* 82129214h case   51:*/		return 0x82129218;
		  /* 82129218h */ case   52:  		/* b 8 */
		/* 82129218h case   52:*/		return 0x82129220;
		/* 82129218h case   52:*/		return 0x8212921C;
	}
	return 0x8212921C;
} // Block from 82129148h-8212921Ch (53 instructions)

//////////////////////////////////////////////////////
// Block at 8212921Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212921C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212921C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212921C);
		  /* 8212921Ch */ case    0:  		/* mr R31, R25 */
		/* 8212921Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212921Ch case    0:*/		return 0x82129220;
	}
	return 0x82129220;
} // Block from 8212921Ch-82129220h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129220);
		  /* 82129220h */ case    0:  		/* mr R4, R31 */
		/* 82129220h case    0:*/		regs.R4 = regs.R31;
		/* 82129220h case    0:*/		return 0x82129224;
		  /* 82129224h */ case    1:  		/* mr R3, R28 */
		/* 82129224h case    1:*/		regs.R3 = regs.R28;
		/* 82129224h case    1:*/		return 0x82129228;
		  /* 82129228h */ case    2:  		/* bl -63504 */
		/* 82129228h case    2:*/		regs.LR = 0x8212922C; return 0x82119A18;
		/* 82129228h case    2:*/		return 0x8212922C;
		  /* 8212922Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8212922Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212922Ch case    3:*/		return 0x82129230;
		  /* 82129230h */ case    4:  		/* bc 12, CR0_EQ, -3932 */
		/* 82129230h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129230h case    4:*/		return 0x82129234;
		  /* 82129234h */ case    5:  		/* lwz R11, <#[R1 + 176]> */
		/* 82129234h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129234h case    5:*/		return 0x82129238;
		  /* 82129238h */ case    6:  		/* stw R11, <#[R31 + 28]> */
		/* 82129238h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82129238h case    6:*/		return 0x8212923C;
		  /* 8212923Ch */ case    7:  		/* b -5360 */
		/* 8212923Ch case    7:*/		return 0x82127D4C;
		/* 8212923Ch case    7:*/		return 0x82129240;
		  /* 82129240h */ case    8:  		/* li R3, 32 */
		/* 82129240h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82129240h case    8:*/		return 0x82129244;
		  /* 82129244h */ case    9:  		/* bl -393244 */
		/* 82129244h case    9:*/		regs.LR = 0x82129248; return 0x820C9228;
		/* 82129244h case    9:*/		return 0x82129248;
		  /* 82129248h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82129248h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129248h case   10:*/		return 0x8212924C;
		  /* 8212924Ch */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 8212924Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8212926C;  }
		/* 8212924Ch case   11:*/		return 0x82129250;
		  /* 82129250h */ case   12:  		/* li R7, 0 */
		/* 82129250h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129250h case   12:*/		return 0x82129254;
		  /* 82129254h */ case   13:  		/* li R6, 0 */
		/* 82129254h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129254h case   13:*/		return 0x82129258;
		  /* 82129258h */ case   14:  		/* li R5, 0 */
		/* 82129258h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129258h case   14:*/		return 0x8212925C;
		  /* 8212925Ch */ case   15:  		/* li R4, 0 */
		/* 8212925Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212925Ch case   15:*/		return 0x82129260;
		  /* 82129260h */ case   16:  		/* bl -387656 */
		/* 82129260h case   16:*/		regs.LR = 0x82129264; return 0x820CA818;
		/* 82129260h case   16:*/		return 0x82129264;
		  /* 82129264h */ case   17:  		/* mr R31, R3 */
		/* 82129264h case   17:*/		regs.R31 = regs.R3;
		/* 82129264h case   17:*/		return 0x82129268;
		  /* 82129268h */ case   18:  		/* b 8 */
		/* 82129268h case   18:*/		return 0x82129270;
		/* 82129268h case   18:*/		return 0x8212926C;
	}
	return 0x8212926C;
} // Block from 82129220h-8212926Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8212926Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212926C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212926C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212926C);
		  /* 8212926Ch */ case    0:  		/* mr R31, R25 */
		/* 8212926Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212926Ch case    0:*/		return 0x82129270;
	}
	return 0x82129270;
} // Block from 8212926Ch-82129270h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129270);
		  /* 82129270h */ case    0:  		/* mr R4, R31 */
		/* 82129270h case    0:*/		regs.R4 = regs.R31;
		/* 82129270h case    0:*/		return 0x82129274;
		  /* 82129274h */ case    1:  		/* mr R3, R28 */
		/* 82129274h case    1:*/		regs.R3 = regs.R28;
		/* 82129274h case    1:*/		return 0x82129278;
		  /* 82129278h */ case    2:  		/* bl -63584 */
		/* 82129278h case    2:*/		regs.LR = 0x8212927C; return 0x82119A18;
		/* 82129278h case    2:*/		return 0x8212927C;
		  /* 8212927Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8212927Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212927Ch case    3:*/		return 0x82129280;
		  /* 82129280h */ case    4:  		/* bc 12, CR0_EQ, -4864 */
		/* 82129280h case    4:*/		if ( regs.CR[0].eq ) { return 0x82127F80;  }
		/* 82129280h case    4:*/		return 0x82129284;
		  /* 82129284h */ case    5:  		/* lwz R11, <#[R1 + 180]> */
		/* 82129284h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129284h case    5:*/		return 0x82129288;
		  /* 82129288h */ case    6:  		/* stw R11, <#[R31 + 28]> */
		/* 82129288h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82129288h case    6:*/		return 0x8212928C;
		  /* 8212928Ch */ case    7:  		/* stw R31, <#[R1 + 180]> */
		/* 8212928Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212928Ch case    7:*/		return 0x82129290;
		  /* 82129290h */ case    8:  		/* b -4880 */
		/* 82129290h case    8:*/		return 0x82127F80;
		/* 82129290h case    8:*/		return 0x82129294;
		  /* 82129294h */ case    9:  		/* li R3, 32 */
		/* 82129294h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82129294h case    9:*/		return 0x82129298;
		  /* 82129298h */ case   10:  		/* bl -393328 */
		/* 82129298h case   10:*/		regs.LR = 0x8212929C; return 0x820C9228;
		/* 82129298h case   10:*/		return 0x8212929C;
		  /* 8212929Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8212929Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212929Ch case   11:*/		return 0x821292A0;
		  /* 821292A0h */ case   12:  		/* bc 12, CR0_EQ, -5560 */
		/* 821292A0h case   12:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821292A0h case   12:*/		return 0x821292A4;
		  /* 821292A4h */ case   13:  		/* li R4, 16 */
		/* 821292A4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 821292A4h case   13:*/		return 0x821292A8;
		  /* 821292A8h */ case   14:  		/* b -4860 */
		/* 821292A8h case   14:*/		return 0x82127FAC;
		/* 821292A8h case   14:*/		return 0x821292AC;
		  /* 821292ACh */ case   15:  		/* li R3, 32 */
		/* 821292ACh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821292ACh case   15:*/		return 0x821292B0;
		  /* 821292B0h */ case   16:  		/* bl -393352 */
		/* 821292B0h case   16:*/		regs.LR = 0x821292B4; return 0x820C9228;
		/* 821292B0h case   16:*/		return 0x821292B4;
		  /* 821292B4h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 821292B4h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821292B4h case   17:*/		return 0x821292B8;
		  /* 821292B8h */ case   18:  		/* bc 12, CR0_EQ, -5584 */
		/* 821292B8h case   18:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821292B8h case   18:*/		return 0x821292BC;
		  /* 821292BCh */ case   19:  		/* li R4, 32 */
		/* 821292BCh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 821292BCh case   19:*/		return 0x821292C0;
		  /* 821292C0h */ case   20:  		/* b -4884 */
		/* 821292C0h case   20:*/		return 0x82127FAC;
		/* 821292C0h case   20:*/		return 0x821292C4;
		  /* 821292C4h */ case   21:  		/* li R3, 32 */
		/* 821292C4h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821292C4h case   21:*/		return 0x821292C8;
		  /* 821292C8h */ case   22:  		/* bl -393376 */
		/* 821292C8h case   22:*/		regs.LR = 0x821292CC; return 0x820C9228;
		/* 821292C8h case   22:*/		return 0x821292CC;
		  /* 821292CCh */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 821292CCh case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821292CCh case   23:*/		return 0x821292D0;
		  /* 821292D0h */ case   24:  		/* bc 12, CR0_EQ, -5608 */
		/* 821292D0h case   24:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821292D0h case   24:*/		return 0x821292D4;
		  /* 821292D4h */ case   25:  		/* li R4, 48 */
		/* 821292D4h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 821292D4h case   25:*/		return 0x821292D8;
		  /* 821292D8h */ case   26:  		/* b -4908 */
		/* 821292D8h case   26:*/		return 0x82127FAC;
		/* 821292D8h case   26:*/		return 0x821292DC;
		  /* 821292DCh */ case   27:  		/* li R3, 32 */
		/* 821292DCh case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821292DCh case   27:*/		return 0x821292E0;
		  /* 821292E0h */ case   28:  		/* bl -393400 */
		/* 821292E0h case   28:*/		regs.LR = 0x821292E4; return 0x820C9228;
		/* 821292E0h case   28:*/		return 0x821292E4;
		  /* 821292E4h */ case   29:  		/* cmplwi CR0, R3, 0 */
		/* 821292E4h case   29:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821292E4h case   29:*/		return 0x821292E8;
		  /* 821292E8h */ case   30:  		/* bc 12, CR0_EQ, -5632 */
		/* 821292E8h case   30:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821292E8h case   30:*/		return 0x821292EC;
		  /* 821292ECh */ case   31:  		/* li R4, 80 */
		/* 821292ECh case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x50);
		/* 821292ECh case   31:*/		return 0x821292F0;
		  /* 821292F0h */ case   32:  		/* b -4932 */
		/* 821292F0h case   32:*/		return 0x82127FAC;
		/* 821292F0h case   32:*/		return 0x821292F4;
		  /* 821292F4h */ case   33:  		/* li R3, 32 */
		/* 821292F4h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 821292F4h case   33:*/		return 0x821292F8;
		  /* 821292F8h */ case   34:  		/* bl -393424 */
		/* 821292F8h case   34:*/		regs.LR = 0x821292FC; return 0x820C9228;
		/* 821292F8h case   34:*/		return 0x821292FC;
		  /* 821292FCh */ case   35:  		/* cmplwi CR0, R3, 0 */
		/* 821292FCh case   35:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821292FCh case   35:*/		return 0x82129300;
		  /* 82129300h */ case   36:  		/* bc 12, CR0_EQ, -5656 */
		/* 82129300h case   36:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129300h case   36:*/		return 0x82129304;
		  /* 82129304h */ case   37:  		/* li R4, 4096 */
		/* 82129304h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x1000);
		/* 82129304h case   37:*/		return 0x82129308;
		  /* 82129308h */ case   38:  		/* b -4956 */
		/* 82129308h case   38:*/		return 0x82127FAC;
		/* 82129308h case   38:*/		return 0x8212930C;
		  /* 8212930Ch */ case   39:  		/* li R3, 32 */
		/* 8212930Ch case   39:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8212930Ch case   39:*/		return 0x82129310;
		  /* 82129310h */ case   40:  		/* bl -393448 */
		/* 82129310h case   40:*/		regs.LR = 0x82129314; return 0x820C9228;
		/* 82129310h case   40:*/		return 0x82129314;
		  /* 82129314h */ case   41:  		/* cmplwi CR0, R3, 0 */
		/* 82129314h case   41:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129314h case   41:*/		return 0x82129318;
		  /* 82129318h */ case   42:  		/* bc 12, CR0_EQ, -5680 */
		/* 82129318h case   42:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129318h case   42:*/		return 0x8212931C;
		  /* 8212931Ch */ case   43:  		/* li R4, 8192 */
		/* 8212931Ch case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x2000);
		/* 8212931Ch case   43:*/		return 0x82129320;
		  /* 82129320h */ case   44:  		/* b -4980 */
		/* 82129320h case   44:*/		return 0x82127FAC;
		/* 82129320h case   44:*/		return 0x82129324;
		  /* 82129324h */ case   45:  		/* li R3, 32 */
		/* 82129324h case   45:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82129324h case   45:*/		return 0x82129328;
		  /* 82129328h */ case   46:  		/* bl -393472 */
		/* 82129328h case   46:*/		regs.LR = 0x8212932C; return 0x820C9228;
		/* 82129328h case   46:*/		return 0x8212932C;
		  /* 8212932Ch */ case   47:  		/* cmplwi CR0, R3, 0 */
		/* 8212932Ch case   47:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212932Ch case   47:*/		return 0x82129330;
		  /* 82129330h */ case   48:  		/* bc 12, CR0_EQ, -5704 */
		/* 82129330h case   48:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129330h case   48:*/		return 0x82129334;
		  /* 82129334h */ case   49:  		/* li R4, 16384 */
		/* 82129334h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x4000);
		/* 82129334h case   49:*/		return 0x82129338;
		  /* 82129338h */ case   50:  		/* b -5004 */
		/* 82129338h case   50:*/		return 0x82127FAC;
		/* 82129338h case   50:*/		return 0x8212933C;
		  /* 8212933Ch */ case   51:  		/* li R3, 32 */
		/* 8212933Ch case   51:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8212933Ch case   51:*/		return 0x82129340;
		  /* 82129340h */ case   52:  		/* bl -393496 */
		/* 82129340h case   52:*/		regs.LR = 0x82129344; return 0x820C9228;
		/* 82129340h case   52:*/		return 0x82129344;
		  /* 82129344h */ case   53:  		/* cmplwi CR0, R3, 0 */
		/* 82129344h case   53:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129344h case   53:*/		return 0x82129348;
		  /* 82129348h */ case   54:  		/* bc 12, CR0_EQ, -5728 */
		/* 82129348h case   54:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129348h case   54:*/		return 0x8212934C;
		  /* 8212934Ch */ case   55:  		/* lis R4, 0 */
		/* 8212934Ch case   55:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 8212934Ch case   55:*/		return 0x82129350;
		  /* 82129350h */ case   56:  		/* ori R4, R4, 32768 */
		/* 82129350h case   56:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x8000);
		/* 82129350h case   56:*/		return 0x82129354;
		  /* 82129354h */ case   57:  		/* b -5032 */
		/* 82129354h case   57:*/		return 0x82127FAC;
		/* 82129354h case   57:*/		return 0x82129358;
		  /* 82129358h */ case   58:  		/* li R3, 32 */
		/* 82129358h case   58:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 82129358h case   58:*/		return 0x8212935C;
		  /* 8212935Ch */ case   59:  		/* bl -393524 */
		/* 8212935Ch case   59:*/		regs.LR = 0x82129360; return 0x820C9228;
		/* 8212935Ch case   59:*/		return 0x82129360;
		  /* 82129360h */ case   60:  		/* cmplwi CR0, R3, 0 */
		/* 82129360h case   60:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129360h case   60:*/		return 0x82129364;
		  /* 82129364h */ case   61:  		/* bc 12, CR0_EQ, -5756 */
		/* 82129364h case   61:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129364h case   61:*/		return 0x82129368;
		  /* 82129368h */ case   62:  		/* lis R4, 1 */
		/* 82129368h case   62:*/		cpu::op::lis<0>(regs,&regs.R4,0x1);
		/* 82129368h case   62:*/		return 0x8212936C;
		  /* 8212936Ch */ case   63:  		/* b -5056 */
		/* 8212936Ch case   63:*/		return 0x82127FAC;
		/* 8212936Ch case   63:*/		return 0x82129370;
		  /* 82129370h */ case   64:  		/* li R3, 20 */
		/* 82129370h case   64:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129370h case   64:*/		return 0x82129374;
		  /* 82129374h */ case   65:  		/* bl -393548 */
		/* 82129374h case   65:*/		regs.LR = 0x82129378; return 0x820C9228;
		/* 82129374h case   65:*/		return 0x82129378;
		  /* 82129378h */ case   66:  		/* cmplwi CR0, R3, 0 */
		/* 82129378h case   66:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129378h case   66:*/		return 0x8212937C;
		  /* 8212937Ch */ case   67:  		/* bc 12, CR0_EQ, 32 */
		/* 8212937Ch case   67:*/		if ( regs.CR[0].eq ) { return 0x8212939C;  }
		/* 8212937Ch case   67:*/		return 0x82129380;
		  /* 82129380h */ case   68:  		/* lis R11, -32255 */
		/* 82129380h case   68:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82129380h case   68:*/		return 0x82129384;
		  /* 82129384h */ case   69:  		/* li R5, 0 */
		/* 82129384h case   69:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129384h case   69:*/		return 0x82129388;
		  /* 82129388h */ case   70:  		/* addi R6, R11, 9252 */
		/* 82129388h case   70:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82129388h case   70:*/		return 0x8212938C;
		  /* 8212938Ch */ case   71:  		/* li R4, 0 */
		/* 8212938Ch case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212938Ch case   71:*/		return 0x82129390;
		  /* 82129390h */ case   72:  		/* bl -393120 */
		/* 82129390h case   72:*/		regs.LR = 0x82129394; return 0x820C93F0;
		/* 82129390h case   72:*/		return 0x82129394;
		  /* 82129394h */ case   73:  		/* mr R31, R3 */
		/* 82129394h case   73:*/		regs.R31 = regs.R3;
		/* 82129394h case   73:*/		return 0x82129398;
		  /* 82129398h */ case   74:  		/* b 8 */
		/* 82129398h case   74:*/		return 0x821293A0;
		/* 82129398h case   74:*/		return 0x8212939C;
	}
	return 0x8212939C;
} // Block from 82129270h-8212939Ch (75 instructions)

//////////////////////////////////////////////////////
// Block at 8212939Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212939C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212939C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212939C);
		  /* 8212939Ch */ case    0:  		/* mr R31, R25 */
		/* 8212939Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212939Ch case    0:*/		return 0x821293A0;
	}
	return 0x821293A0;
} // Block from 8212939Ch-821293A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821293A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821293A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821293A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821293A0);
		  /* 821293A0h */ case    0:  		/* mr R4, R31 */
		/* 821293A0h case    0:*/		regs.R4 = regs.R31;
		/* 821293A0h case    0:*/		return 0x821293A4;
		  /* 821293A4h */ case    1:  		/* mr R3, R28 */
		/* 821293A4h case    1:*/		regs.R3 = regs.R28;
		/* 821293A4h case    1:*/		return 0x821293A8;
		  /* 821293A8h */ case    2:  		/* bl -63888 */
		/* 821293A8h case    2:*/		regs.LR = 0x821293AC; return 0x82119A18;
		/* 821293A8h case    2:*/		return 0x821293AC;
		  /* 821293ACh */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 821293ACh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821293ACh case    3:*/		return 0x821293B0;
		  /* 821293B0h */ case    4:  		/* bc 12, CR0_EQ, 88 */
		/* 821293B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82129408;  }
		/* 821293B0h case    4:*/		return 0x821293B4;
		  /* 821293B4h */ case    5:  		/* li R3, 52 */
		/* 821293B4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821293B4h case    5:*/		return 0x821293B8;
		  /* 821293B8h */ case    6:  		/* bl -393616 */
		/* 821293B8h case    6:*/		regs.LR = 0x821293BC; return 0x820C9228;
		/* 821293B8h case    6:*/		return 0x821293BC;
		  /* 821293BCh */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 821293BCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821293BCh case    7:*/		return 0x821293C0;
		  /* 821293C0h */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 821293C0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821293E4;  }
		/* 821293C0h case    8:*/		return 0x821293C4;
		  /* 821293C4h */ case    9:  		/* li R8, 0 */
		/* 821293C4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821293C4h case    9:*/		return 0x821293C8;
		  /* 821293C8h */ case   10:  		/* lwz R7, <#[R1 + 180]> */
		/* 821293C8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 821293C8h case   10:*/		return 0x821293CC;
		  /* 821293CCh */ case   11:  		/* li R4, 3 */
		/* 821293CCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821293CCh case   11:*/		return 0x821293D0;
		  /* 821293D0h */ case   12:  		/* lwz R6, <#[R1 + 184]> */
		/* 821293D0h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 821293D0h case   12:*/		return 0x821293D4;
		  /* 821293D4h */ case   13:  		/* lwz R5, <#[R1 + 176]> */
		/* 821293D4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 821293D4h case   13:*/		return 0x821293D8;
		  /* 821293D8h */ case   14:  		/* bl -390432 */
		/* 821293D8h case   14:*/		regs.LR = 0x821293DC; return 0x820C9EB8;
		/* 821293D8h case   14:*/		return 0x821293DC;
		  /* 821293DCh */ case   15:  		/* mr R4, R3 */
		/* 821293DCh case   15:*/		regs.R4 = regs.R3;
		/* 821293DCh case   15:*/		return 0x821293E0;
		  /* 821293E0h */ case   16:  		/* b 8 */
		/* 821293E0h case   16:*/		return 0x821293E8;
		/* 821293E0h case   16:*/		return 0x821293E4;
	}
	return 0x821293E4;
} // Block from 821293A0h-821293E4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821293E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821293E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821293E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821293E4);
		  /* 821293E4h */ case    0:  		/* mr R4, R25 */
		/* 821293E4h case    0:*/		regs.R4 = regs.R25;
		/* 821293E4h case    0:*/		return 0x821293E8;
	}
	return 0x821293E8;
} // Block from 821293E4h-821293E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821293E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821293E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821293E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821293E8);
		  /* 821293E8h */ case    0:  		/* stw R4, <#[R31 + 8]> */
		/* 821293E8h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821293E8h case    0:*/		return 0x821293EC;
		  /* 821293ECh */ case    1:  		/* mr R3, R28 */
		/* 821293ECh case    1:*/		regs.R3 = regs.R28;
		/* 821293ECh case    1:*/		return 0x821293F0;
		  /* 821293F0h */ case    2:  		/* bl -63960 */
		/* 821293F0h case    2:*/		regs.LR = 0x821293F4; return 0x82119A18;
		/* 821293F0h case    2:*/		return 0x821293F4;
		  /* 821293F4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 821293F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821293F4h case    3:*/		return 0x821293F8;
		  /* 821293F8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821293F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x82129408;  }
		/* 821293F8h case    4:*/		return 0x821293FC;
		  /* 821293FCh */ case    5:  		/* stw R25, <#[R1 + 176]> */
		/* 821293FCh case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821293FCh case    5:*/		return 0x82129400;
		  /* 82129400h */ case    6:  		/* stw R25, <#[R1 + 180]> */
		/* 82129400h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129400h case    6:*/		return 0x82129404;
		  /* 82129404h */ case    7:  		/* stw R25, <#[R1 + 184]> */
		/* 82129404h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129404h case    7:*/		return 0x82129408;
	}
	return 0x82129408;
} // Block from 821293E8h-82129408h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82129408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129408);
		  /* 82129408h */ case    0:  		/* lwz R11, <#[R28 + 100]> */
		/* 82129408h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000064) );
		/* 82129408h case    0:*/		return 0x8212940C;
		  /* 8212940Ch */ case    1:  		/* addi R11, R11, 1 */
		/* 8212940Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8212940Ch case    1:*/		return 0x82129410;
		  /* 82129410h */ case    2:  		/* stw R11, <#[R28 + 100]> */
		/* 82129410h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000064) );
		/* 82129410h case    2:*/		return 0x82129414;
		  /* 82129414h */ case    3:  		/* b -4416 */
		/* 82129414h case    3:*/		return 0x821282D4;
		/* 82129414h case    3:*/		return 0x82129418;
		  /* 82129418h */ case    4:  		/* li R3, 20 */
		/* 82129418h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129418h case    4:*/		return 0x8212941C;
		  /* 8212941Ch */ case    5:  		/* bl -393716 */
		/* 8212941Ch case    5:*/		regs.LR = 0x82129420; return 0x820C9228;
		/* 8212941Ch case    5:*/		return 0x82129420;
		  /* 82129420h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82129420h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129420h case    6:*/		return 0x82129424;
		  /* 82129424h */ case    7:  		/* bc 12, CR0_EQ, 32 */
		/* 82129424h case    7:*/		if ( regs.CR[0].eq ) { return 0x82129444;  }
		/* 82129424h case    7:*/		return 0x82129428;
		  /* 82129428h */ case    8:  		/* lis R11, -32255 */
		/* 82129428h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82129428h case    8:*/		return 0x8212942C;
		  /* 8212942Ch */ case    9:  		/* li R5, 0 */
		/* 8212942Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212942Ch case    9:*/		return 0x82129430;
		  /* 82129430h */ case   10:  		/* addi R6, R11, 9252 */
		/* 82129430h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82129430h case   10:*/		return 0x82129434;
		  /* 82129434h */ case   11:  		/* li R4, 0 */
		/* 82129434h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129434h case   11:*/		return 0x82129438;
		  /* 82129438h */ case   12:  		/* bl -393288 */
		/* 82129438h case   12:*/		regs.LR = 0x8212943C; return 0x820C93F0;
		/* 82129438h case   12:*/		return 0x8212943C;
		  /* 8212943Ch */ case   13:  		/* mr R31, R3 */
		/* 8212943Ch case   13:*/		regs.R31 = regs.R3;
		/* 8212943Ch case   13:*/		return 0x82129440;
		  /* 82129440h */ case   14:  		/* b 8 */
		/* 82129440h case   14:*/		return 0x82129448;
		/* 82129440h case   14:*/		return 0x82129444;
	}
	return 0x82129444;
} // Block from 82129408h-82129444h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82129444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129444);
		  /* 82129444h */ case    0:  		/* mr R31, R25 */
		/* 82129444h case    0:*/		regs.R31 = regs.R25;
		/* 82129444h case    0:*/		return 0x82129448;
	}
	return 0x82129448;
} // Block from 82129444h-82129448h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129448);
		  /* 82129448h */ case    0:  		/* mr R4, R31 */
		/* 82129448h case    0:*/		regs.R4 = regs.R31;
		/* 82129448h case    0:*/		return 0x8212944C;
		  /* 8212944Ch */ case    1:  		/* mr R3, R28 */
		/* 8212944Ch case    1:*/		regs.R3 = regs.R28;
		/* 8212944Ch case    1:*/		return 0x82129450;
		  /* 82129450h */ case    2:  		/* bl -64056 */
		/* 82129450h case    2:*/		regs.LR = 0x82129454; return 0x82119A18;
		/* 82129450h case    2:*/		return 0x82129454;
		  /* 82129454h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82129454h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129454h case    3:*/		return 0x82129458;
		  /* 82129458h */ case    4:  		/* bc 12, CR0_EQ, 136 */
		/* 82129458h case    4:*/		if ( regs.CR[0].eq ) { return 0x821294E0;  }
		/* 82129458h case    4:*/		return 0x8212945C;
		  /* 8212945Ch */ case    5:  		/* li R3, 52 */
		/* 8212945Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 8212945Ch case    5:*/		return 0x82129460;
		  /* 82129460h */ case    6:  		/* bl -393784 */
		/* 82129460h case    6:*/		regs.LR = 0x82129464; return 0x820C9228;
		/* 82129460h case    6:*/		return 0x82129464;
		  /* 82129464h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82129464h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129464h case    7:*/		return 0x82129468;
		  /* 82129468h */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 82129468h case    8:*/		if ( regs.CR[0].eq ) { return 0x8212948C;  }
		/* 82129468h case    8:*/		return 0x8212946C;
		  /* 8212946Ch */ case    9:  		/* li R8, 0 */
		/* 8212946Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8212946Ch case    9:*/		return 0x82129470;
		  /* 82129470h */ case   10:  		/* lwz R7, <#[R1 + 180]> */
		/* 82129470h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129470h case   10:*/		return 0x82129474;
		  /* 82129474h */ case   11:  		/* li R4, 4 */
		/* 82129474h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82129474h case   11:*/		return 0x82129478;
		  /* 82129478h */ case   12:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129478h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129478h case   12:*/		return 0x8212947C;
		  /* 8212947Ch */ case   13:  		/* lwz R5, <#[R1 + 176]> */
		/* 8212947Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212947Ch case   13:*/		return 0x82129480;
		  /* 82129480h */ case   14:  		/* bl -390600 */
		/* 82129480h case   14:*/		regs.LR = 0x82129484; return 0x820C9EB8;
		/* 82129480h case   14:*/		return 0x82129484;
		  /* 82129484h */ case   15:  		/* mr R4, R3 */
		/* 82129484h case   15:*/		regs.R4 = regs.R3;
		/* 82129484h case   15:*/		return 0x82129488;
		  /* 82129488h */ case   16:  		/* b 8 */
		/* 82129488h case   16:*/		return 0x82129490;
		/* 82129488h case   16:*/		return 0x8212948C;
	}
	return 0x8212948C;
} // Block from 82129448h-8212948Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8212948Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212948C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212948C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212948C);
		  /* 8212948Ch */ case    0:  		/* mr R4, R25 */
		/* 8212948Ch case    0:*/		regs.R4 = regs.R25;
		/* 8212948Ch case    0:*/		return 0x82129490;
	}
	return 0x82129490;
} // Block from 8212948Ch-82129490h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129490);
		  /* 82129490h */ case    0:  		/* stw R4, <#[R31 + 8]> */
		/* 82129490h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 82129490h case    0:*/		return 0x82129494;
		  /* 82129494h */ case    1:  		/* mr R3, R28 */
		/* 82129494h case    1:*/		regs.R3 = regs.R28;
		/* 82129494h case    1:*/		return 0x82129498;
		  /* 82129498h */ case    2:  		/* bl -64128 */
		/* 82129498h case    2:*/		regs.LR = 0x8212949C; return 0x82119A18;
		/* 82129498h case    2:*/		return 0x8212949C;
		  /* 8212949Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8212949Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212949Ch case    3:*/		return 0x821294A0;
		  /* 821294A0h */ case    4:  		/* bc 12, CR0_EQ, 64 */
		/* 821294A0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821294E0;  }
		/* 821294A0h case    4:*/		return 0x821294A4;
		  /* 821294A4h */ case    5:  		/* stw R25, <#[R1 + 180]> */
		/* 821294A4h case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 821294A4h case    5:*/		return 0x821294A8;
		  /* 821294A8h */ case    6:  		/* stw R25, <#[R1 + 176]> */
		/* 821294A8h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821294A8h case    6:*/		return 0x821294AC;
		  /* 821294ACh */ case    7:  		/* stw R25, <#[R1 + 184]> */
		/* 821294ACh case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 821294ACh case    7:*/		return 0x821294B0;
		  /* 821294B0h */ case    8:  		/* lwz R4, <#[R31 + 8]> */
		/* 821294B0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821294B0h case    8:*/		return 0x821294B4;
		  /* 821294B4h */ case    9:  		/* lwz R11, <#[R4 + 20]> */
		/* 821294B4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821294B4h case    9:*/		return 0x821294B8;
		  /* 821294B8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821294B8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821294B8h case   10:*/		return 0x821294BC;
		  /* 821294BCh */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 821294BCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821294E0;  }
		/* 821294BCh case   11:*/		return 0x821294C0;
		  /* 821294C0h */ case   12:  		/* li R5, 0 */
		/* 821294C0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821294C0h case   12:*/		return 0x821294C4;
		  /* 821294C4h */ case   13:  		/* mr R3, R28 */
		/* 821294C4h case   13:*/		regs.R3 = regs.R28;
		/* 821294C4h case   13:*/		return 0x821294C8;
		  /* 821294C8h */ case   14:  		/* bl -63456 */
		/* 821294C8h case   14:*/		regs.LR = 0x821294CC; return 0x82119CE8;
		/* 821294C8h case   14:*/		return 0x821294CC;
		  /* 821294CCh */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 821294CCh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821294CCh case   15:*/		return 0x821294D0;
		  /* 821294D0h */ case   16:  		/* bc 4, CR0_LT, 16 */
		/* 821294D0h case   16:*/		if ( !regs.CR[0].lt ) { return 0x821294E0;  }
		/* 821294D0h case   16:*/		return 0x821294D4;
		  /* 821294D4h */ case   17:  		/* li R4, 0 */
		/* 821294D4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821294D4h case   17:*/		return 0x821294D8;
		  /* 821294D8h */ case   18:  		/* mr R3, R28 */
		/* 821294D8h case   18:*/		regs.R3 = regs.R28;
		/* 821294D8h case   18:*/		return 0x821294DC;
		  /* 821294DCh */ case   19:  		/* bl -64196 */
		/* 821294DCh case   19:*/		regs.LR = 0x821294E0; return 0x82119A18;
		/* 821294DCh case   19:*/		return 0x821294E0;
	}
	return 0x821294E0;
} // Block from 82129490h-821294E0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821294E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821294E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821294E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821294E0);
		  /* 821294E0h */ case    0:  		/* lwz R11, <#[R28 + 104]> */
		/* 821294E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000068) );
		/* 821294E0h case    0:*/		return 0x821294E4;
		  /* 821294E4h */ case    1:  		/* addi R11, R11, 1 */
		/* 821294E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821294E4h case    1:*/		return 0x821294E8;
		  /* 821294E8h */ case    2:  		/* stw R11, <#[R28 + 104]> */
		/* 821294E8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000068) );
		/* 821294E8h case    2:*/		return 0x821294EC;
		  /* 821294ECh */ case    3:  		/* b -4632 */
		/* 821294ECh case    3:*/		return 0x821282D4;
		/* 821294ECh case    3:*/		return 0x821294F0;
		  /* 821294F0h */ case    4:  		/* li R5, 0 */
		/* 821294F0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821294F0h case    4:*/		return 0x821294F4;
		  /* 821294F4h */ case    5:  		/* li R4, 6 */
		/* 821294F4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 821294F4h case    5:*/		return 0x821294F8;
		  /* 821294F8h */ case    6:  		/* mr R3, R28 */
		/* 821294F8h case    6:*/		regs.R3 = regs.R28;
		/* 821294F8h case    6:*/		return 0x821294FC;
		  /* 821294FCh */ case    7:  		/* bl -64124 */
		/* 821294FCh case    7:*/		regs.LR = 0x82129500; return 0x82119A80;
		/* 821294FCh case    7:*/		return 0x82129500;
		  /* 82129500h */ case    8:  		/* b -2548 */
		/* 82129500h case    8:*/		return 0x82128B0C;
		/* 82129500h case    8:*/		return 0x82129504;
		  /* 82129504h */ case    9:  		/* li R3, 20 */
		/* 82129504h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129504h case    9:*/		return 0x82129508;
		  /* 82129508h */ case   10:  		/* bl -393952 */
		/* 82129508h case   10:*/		regs.LR = 0x8212950C; return 0x820C9228;
		/* 82129508h case   10:*/		return 0x8212950C;
		  /* 8212950Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8212950Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212950Ch case   11:*/		return 0x82129510;
		  /* 82129510h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 82129510h case   12:*/		if ( regs.CR[0].eq ) { return 0x82129530;  }
		/* 82129510h case   12:*/		return 0x82129514;
		  /* 82129514h */ case   13:  		/* lis R11, -32253 */
		/* 82129514h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129514h case   13:*/		return 0x82129518;
		  /* 82129518h */ case   14:  		/* li R5, 0 */
		/* 82129518h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129518h case   14:*/		return 0x8212951C;
		  /* 8212951Ch */ case   15:  		/* addi R6, R11, 14816 */
		/* 8212951Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x39E0);
		/* 8212951Ch case   15:*/		return 0x82129520;
		  /* 82129520h */ case   16:  		/* li R4, 0 */
		/* 82129520h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129520h case   16:*/		return 0x82129524;
		  /* 82129524h */ case   17:  		/* bl -393524 */
		/* 82129524h case   17:*/		regs.LR = 0x82129528; return 0x820C93F0;
		/* 82129524h case   17:*/		return 0x82129528;
		  /* 82129528h */ case   18:  		/* mr R31, R3 */
		/* 82129528h case   18:*/		regs.R31 = regs.R3;
		/* 82129528h case   18:*/		return 0x8212952C;
		  /* 8212952Ch */ case   19:  		/* b 8 */
		/* 8212952Ch case   19:*/		return 0x82129534;
		/* 8212952Ch case   19:*/		return 0x82129530;
	}
	return 0x82129530;
} // Block from 821294E0h-82129530h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82129530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129530);
		  /* 82129530h */ case    0:  		/* mr R31, R25 */
		/* 82129530h case    0:*/		regs.R31 = regs.R25;
		/* 82129530h case    0:*/		return 0x82129534;
	}
	return 0x82129534;
} // Block from 82129530h-82129534h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129534);
		  /* 82129534h */ case    0:  		/* mr R4, R31 */
		/* 82129534h case    0:*/		regs.R4 = regs.R31;
		/* 82129534h case    0:*/		return 0x82129538;
		  /* 82129538h */ case    1:  		/* mr R3, R28 */
		/* 82129538h case    1:*/		regs.R3 = regs.R28;
		/* 82129538h case    1:*/		return 0x8212953C;
		  /* 8212953Ch */ case    2:  		/* bl -64292 */
		/* 8212953Ch case    2:*/		regs.LR = 0x82129540; return 0x82119A18;
		/* 8212953Ch case    2:*/		return 0x82129540;
		  /* 82129540h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82129540h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129540h case    3:*/		return 0x82129544;
		  /* 82129544h */ case    4:  		/* bc 12, CR0_EQ, -4720 */
		/* 82129544h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129544h case    4:*/		return 0x82129548;
		  /* 82129548h */ case    5:  		/* li R3, 52 */
		/* 82129548h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82129548h case    5:*/		return 0x8212954C;
		  /* 8212954Ch */ case    6:  		/* bl -394020 */
		/* 8212954Ch case    6:*/		regs.LR = 0x82129550; return 0x820C9228;
		/* 8212954Ch case    6:*/		return 0x82129550;
		  /* 82129550h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82129550h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129550h case    7:*/		return 0x82129554;
		  /* 82129554h */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 82129554h case    8:*/		if ( regs.CR[0].eq ) { return 0x82129578;  }
		/* 82129554h case    8:*/		return 0x82129558;
		  /* 82129558h */ case    9:  		/* li R8, 0 */
		/* 82129558h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82129558h case    9:*/		return 0x8212955C;
		  /* 8212955Ch */ case   10:  		/* lwz R7, <#[R1 + 180]> */
		/* 8212955Ch case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212955Ch case   10:*/		return 0x82129560;
		  /* 82129560h */ case   11:  		/* li R4, 5 */
		/* 82129560h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 82129560h case   11:*/		return 0x82129564;
		  /* 82129564h */ case   12:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129564h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129564h case   12:*/		return 0x82129568;
		  /* 82129568h */ case   13:  		/* lwz R5, <#[R1 + 176]> */
		/* 82129568h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129568h case   13:*/		return 0x8212956C;
		  /* 8212956Ch */ case   14:  		/* bl -390836 */
		/* 8212956Ch case   14:*/		regs.LR = 0x82129570; return 0x820C9EB8;
		/* 8212956Ch case   14:*/		return 0x82129570;
		  /* 82129570h */ case   15:  		/* mr R4, R3 */
		/* 82129570h case   15:*/		regs.R4 = regs.R3;
		/* 82129570h case   15:*/		return 0x82129574;
		  /* 82129574h */ case   16:  		/* b 8 */
		/* 82129574h case   16:*/		return 0x8212957C;
		/* 82129574h case   16:*/		return 0x82129578;
	}
	return 0x82129578;
} // Block from 82129534h-82129578h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82129578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129578);
		  /* 82129578h */ case    0:  		/* mr R4, R25 */
		/* 82129578h case    0:*/		regs.R4 = regs.R25;
		/* 82129578h case    0:*/		return 0x8212957C;
	}
	return 0x8212957C;
} // Block from 82129578h-8212957Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212957Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212957C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212957C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212957C);
		  /* 8212957Ch */ case    0:  		/* stw R4, <#[R31 + 8]> */
		/* 8212957Ch case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8212957Ch case    0:*/		return 0x82129580;
		  /* 82129580h */ case    1:  		/* b -1764 */
		/* 82129580h case    1:*/		return 0x82128E9C;
		/* 82129580h case    1:*/		return 0x82129584;
		  /* 82129584h */ case    2:  		/* li R5, 0 */
		/* 82129584h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129584h case    2:*/		return 0x82129588;
		  /* 82129588h */ case    3:  		/* li R4, 8 */
		/* 82129588h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82129588h case    3:*/		return 0x8212958C;
		  /* 8212958Ch */ case    4:  		/* mr R3, R28 */
		/* 8212958Ch case    4:*/		regs.R3 = regs.R28;
		/* 8212958Ch case    4:*/		return 0x82129590;
		  /* 82129590h */ case    5:  		/* bl -64272 */
		/* 82129590h case    5:*/		regs.LR = 0x82129594; return 0x82119A80;
		/* 82129590h case    5:*/		return 0x82129594;
		  /* 82129594h */ case    6:  		/* mr R31, R25 */
		/* 82129594h case    6:*/		regs.R31 = regs.R25;
		/* 82129594h case    6:*/		return 0x82129598;
		  /* 82129598h */ case    7:  		/* stw R25, <#[R28 + 92]> */
		/* 82129598h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x0000005C) );
		/* 82129598h case    7:*/		return 0x8212959C;
		  /* 8212959Ch */ case    8:  		/* b -4808 */
		/* 8212959Ch case    8:*/		return 0x821282D4;
		/* 8212959Ch case    8:*/		return 0x821295A0;
		  /* 821295A0h */ case    9:  		/* stw R26, <#[R28 + 92]> */
		/* 821295A0h case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x0000005C) );
		/* 821295A0h case    9:*/		return 0x821295A4;
		  /* 821295A4h */ case   10:  		/* mr R3, R28 */
		/* 821295A4h case   10:*/		regs.R3 = regs.R28;
		/* 821295A4h case   10:*/		return 0x821295A8;
		  /* 821295A8h */ case   11:  		/* mr R31, R25 */
		/* 821295A8h case   11:*/		regs.R31 = regs.R25;
		/* 821295A8h case   11:*/		return 0x821295AC;
		  /* 821295ACh */ case   12:  		/* bl -63932 */
		/* 821295ACh case   12:*/		regs.LR = 0x821295B0; return 0x82119BF0;
		/* 821295ACh case   12:*/		return 0x821295B0;
		  /* 821295B0h */ case   13:  		/* lwz R11, <#[R28 + 20]> */
		/* 821295B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821295B0h case   13:*/		return 0x821295B4;
		  /* 821295B4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821295B4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821295B4h case   14:*/		return 0x821295B8;
		  /* 821295B8h */ case   15:  		/* bc 12, CR6_EQ, -4836 */
		/* 821295B8h case   15:*/		if ( regs.CR[6].eq ) { return 0x821282D4;  }
		/* 821295B8h case   15:*/		return 0x821295BC;
		  /* 821295BCh */ case   16:  		/* lwz R11, <#[R11 + 16]> */
		/* 821295BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821295BCh case   16:*/		return 0x821295C0;
		  /* 821295C0h */ case   17:  		/* cmpwi CR6, R11, 8 */
		/* 821295C0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821295C0h case   17:*/		return 0x821295C4;
		  /* 821295C4h */ case   18:  		/* bc 4, CR6_EQ, -4848 */
		/* 821295C4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821282D4;  }
		/* 821295C4h case   18:*/		return 0x821295C8;
		  /* 821295C8h */ case   19:  		/* b -48 */
		/* 821295C8h case   19:*/		return 0x82129598;
		/* 821295C8h case   19:*/		return 0x821295CC;
		  /* 821295CCh */ case   20:  		/* addi R4, R1, 176 */
		/* 821295CCh case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 821295CCh case   20:*/		return 0x821295D0;
		  /* 821295D0h */ case   21:  		/* mr R3, R28 */
		/* 821295D0h case   21:*/		regs.R3 = regs.R28;
		/* 821295D0h case   21:*/		return 0x821295D4;
		  /* 821295D4h */ case   22:  		/* bl 115932 */
		/* 821295D4h case   22:*/		regs.LR = 0x821295D8; return 0x82145AB0;
		/* 821295D4h case   22:*/		return 0x821295D8;
		  /* 821295D8h */ case   23:  		/* b -6392 */
		/* 821295D8h case   23:*/		return 0x82127CE0;
		/* 821295D8h case   23:*/		return 0x821295DC;
		  /* 821295DCh */ case   24:  		/* lwz R11, <#[R28]> */
		/* 821295DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821295DCh case   24:*/		return 0x821295E0;
		  /* 821295E0h */ case   25:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821295E0h case   25:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821295E0h case   25:*/		return 0x821295E4;
		  /* 821295E4h */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 821295E4h case   26:*/		if ( regs.CR[0].eq ) { return 0x821295F4;  }
		/* 821295E4h case   26:*/		return 0x821295E8;
		  /* 821295E8h */ case   27:  		/* lis R11, -32253 */
		/* 821295E8h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821295E8h case   27:*/		return 0x821295EC;
		  /* 821295ECh */ case   28:  		/* addi R6, R11, 14756 */
		/* 821295ECh case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x39A4);
		/* 821295ECh case   28:*/		return 0x821295F0;
		  /* 821295F0h */ case   29:  		/* b -4124 */
		/* 821295F0h case   29:*/		return 0x821285D4;
		/* 821295F0h case   29:*/		return 0x821295F4;
	}
	return 0x821295F4;
} // Block from 8212957Ch-821295F4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821295F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821295F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821295F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821295F4);
		  /* 821295F4h */ case    0:  		/* li R3, 20 */
		/* 821295F4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821295F4h case    0:*/		return 0x821295F8;
		  /* 821295F8h */ case    1:  		/* bl -394192 */
		/* 821295F8h case    1:*/		regs.LR = 0x821295FC; return 0x820C9228;
		/* 821295F8h case    1:*/		return 0x821295FC;
		  /* 821295FCh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821295FCh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821295FCh case    2:*/		return 0x82129600;
		  /* 82129600h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82129600h case    3:*/		if ( regs.CR[0].eq ) { return 0x82129620;  }
		/* 82129600h case    3:*/		return 0x82129604;
		  /* 82129604h */ case    4:  		/* lis R11, -32253 */
		/* 82129604h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129604h case    4:*/		return 0x82129608;
		  /* 82129608h */ case    5:  		/* li R5, 0 */
		/* 82129608h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129608h case    5:*/		return 0x8212960C;
		  /* 8212960Ch */ case    6:  		/* addi R6, R11, 8852 */
		/* 8212960Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2294);
		/* 8212960Ch case    6:*/		return 0x82129610;
		  /* 82129610h */ case    7:  		/* li R4, 0 */
		/* 82129610h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129610h case    7:*/		return 0x82129614;
		  /* 82129614h */ case    8:  		/* bl -393764 */
		/* 82129614h case    8:*/		regs.LR = 0x82129618; return 0x820C93F0;
		/* 82129614h case    8:*/		return 0x82129618;
		  /* 82129618h */ case    9:  		/* mr R31, R3 */
		/* 82129618h case    9:*/		regs.R31 = regs.R3;
		/* 82129618h case    9:*/		return 0x8212961C;
		  /* 8212961Ch */ case   10:  		/* b 8 */
		/* 8212961Ch case   10:*/		return 0x82129624;
		/* 8212961Ch case   10:*/		return 0x82129620;
	}
	return 0x82129620;
} // Block from 821295F4h-82129620h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82129620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129620);
		  /* 82129620h */ case    0:  		/* mr R31, R25 */
		/* 82129620h case    0:*/		regs.R31 = regs.R25;
		/* 82129620h case    0:*/		return 0x82129624;
	}
	return 0x82129624;
} // Block from 82129620h-82129624h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129624);
		  /* 82129624h */ case    0:  		/* mr R4, R31 */
		/* 82129624h case    0:*/		regs.R4 = regs.R31;
		/* 82129624h case    0:*/		return 0x82129628;
		  /* 82129628h */ case    1:  		/* mr R3, R28 */
		/* 82129628h case    1:*/		regs.R3 = regs.R28;
		/* 82129628h case    1:*/		return 0x8212962C;
		  /* 8212962Ch */ case    2:  		/* bl -64532 */
		/* 8212962Ch case    2:*/		regs.LR = 0x82129630; return 0x82119A18;
		/* 8212962Ch case    2:*/		return 0x82129630;
		  /* 82129630h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82129630h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129630h case    3:*/		return 0x82129634;
		  /* 82129634h */ case    4:  		/* bc 12, CR0_EQ, -4960 */
		/* 82129634h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129634h case    4:*/		return 0x82129638;
		  /* 82129638h */ case    5:  		/* li R3, 28 */
		/* 82129638h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 82129638h case    5:*/		return 0x8212963C;
		  /* 8212963Ch */ case    6:  		/* bl -394260 */
		/* 8212963Ch case    6:*/		regs.LR = 0x82129640; return 0x820C9228;
		/* 8212963Ch case    6:*/		return 0x82129640;
		  /* 82129640h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82129640h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129640h case    7:*/		return 0x82129644;
		  /* 82129644h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82129644h case    8:*/		if ( regs.CR[0].eq ) { return 0x82129660;  }
		/* 82129644h case    8:*/		return 0x82129648;
		  /* 82129648h */ case    9:  		/* lwz R6, <#[R1 + 188]> */
		/* 82129648h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129648h case    9:*/		return 0x8212964C;
		  /* 8212964Ch */ case   10:  		/* lwz R5, <#[R1 + 180]> */
		/* 8212964Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212964Ch case   10:*/		return 0x82129650;
		  /* 82129650h */ case   11:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129650h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129650h case   11:*/		return 0x82129654;
		  /* 82129654h */ case   12:  		/* bl -380844 */
		/* 82129654h case   12:*/		regs.LR = 0x82129658; return 0x820CC6A8;
		/* 82129654h case   12:*/		return 0x82129658;
		  /* 82129658h */ case   13:  		/* mr R4, R3 */
		/* 82129658h case   13:*/		regs.R4 = regs.R3;
		/* 82129658h case   13:*/		return 0x8212965C;
		  /* 8212965Ch */ case   14:  		/* b 8 */
		/* 8212965Ch case   14:*/		return 0x82129664;
		/* 8212965Ch case   14:*/		return 0x82129660;
	}
	return 0x82129660;
} // Block from 82129624h-82129660h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82129660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129660);
		  /* 82129660h */ case    0:  		/* mr R4, R25 */
		/* 82129660h case    0:*/		regs.R4 = regs.R25;
		/* 82129660h case    0:*/		return 0x82129664;
	}
	return 0x82129664;
} // Block from 82129660h-82129664h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129664);
		  /* 82129664h */ case    0:  		/* stw R4, <#[R31 + 8]> */
		/* 82129664h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 82129664h case    0:*/		return 0x82129668;
		  /* 82129668h */ case    1:  		/* mr R3, R28 */
		/* 82129668h case    1:*/		regs.R3 = regs.R28;
		/* 82129668h case    1:*/		return 0x8212966C;
		  /* 8212966Ch */ case    2:  		/* bl -64596 */
		/* 8212966Ch case    2:*/		regs.LR = 0x82129670; return 0x82119A18;
		/* 8212966Ch case    2:*/		return 0x82129670;
		  /* 82129670h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82129670h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129670h case    3:*/		return 0x82129674;
		  /* 82129674h */ case    4:  		/* bc 12, CR0_EQ, -5024 */
		/* 82129674h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129674h case    4:*/		return 0x82129678;
		  /* 82129678h */ case    5:  		/* stw R25, <#[R1 + 176]> */
		/* 82129678h case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129678h case    5:*/		return 0x8212967C;
		  /* 8212967Ch */ case    6:  		/* stw R25, <#[R1 + 180]> */
		/* 8212967Ch case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212967Ch case    6:*/		return 0x82129680;
		  /* 82129680h */ case    7:  		/* b -6244 */
		/* 82129680h case    7:*/		return 0x82127E1C;
		/* 82129680h case    7:*/		return 0x82129684;
		  /* 82129684h */ case    8:  		/* lwz R31, <#[R1 + 176]> */
		/* 82129684h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129684h case    8:*/		return 0x82129688;
		  /* 82129688h */ case    9:  		/* stw R25, <#[R1 + 176]> */
		/* 82129688h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129688h case    9:*/		return 0x8212968C;
		  /* 8212968Ch */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 8212968Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8212968Ch case   10:*/		return 0x82129690;
		  /* 82129690h */ case   11:  		/* bc 12, CR0_EQ, -5052 */
		/* 82129690h case   11:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129690h case   11:*/		return 0x82129694;
		  /* 82129694h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 82129694h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82129694h case   12:*/		return 0x82129698;
		  /* 82129698h */ case   13:  		/* cmpwi CR6, R11, 3 */
		/* 82129698h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82129698h case   13:*/		return 0x8212969C;
		  /* 8212969Ch */ case   14:  		/* bc 4, CR6_EQ, -5064 */
		/* 8212969Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x821282D4;  }
		/* 8212969Ch case   14:*/		return 0x821296A0;
		  /* 821296A0h */ case   15:  		/* lwz R11, <#[R31 + 16]> */
		/* 821296A0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821296A0h case   15:*/		return 0x821296A4;
		  /* 821296A4h */ case   16:  		/* cmpwi CR6, R11, 3 */
		/* 821296A4h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821296A4h case   16:*/		return 0x821296A8;
		  /* 821296A8h */ case   17:  		/* bc 4, CR6_EQ, -5076 */
		/* 821296A8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821282D4;  }
		/* 821296A8h case   17:*/		return 0x821296AC;
		  /* 821296ACh */ case   18:  		/* lwz R11, <#[R31 + 24]> */
		/* 821296ACh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821296ACh case   18:*/		return 0x821296B0;
		  /* 821296B0h */ case   19:  		/* cmpwi CR6, R11, 0 */
		/* 821296B0h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821296B0h case   19:*/		return 0x821296B4;
		  /* 821296B4h */ case   20:  		/* bc 4, CR6_EQ, -5088 */
		/* 821296B4h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821282D4;  }
		/* 821296B4h case   20:*/		return 0x821296B8;
		  /* 821296B8h */ case   21:  		/* li R11, 2 */
		/* 821296B8h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821296B8h case   21:*/		return 0x821296BC;
		  /* 821296BCh */ case   22:  		/* stw R11, <#[R31 + 16]> */
		/* 821296BCh case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821296BCh case   22:*/		return 0x821296C0;
		  /* 821296C0h */ case   23:  		/* b -5100 */
		/* 821296C0h case   23:*/		return 0x821282D4;
		/* 821296C0h case   23:*/		return 0x821296C4;
		  /* 821296C4h */ case   24:  		/* li R4, 3 */
		/* 821296C4h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821296C4h case   24:*/		return 0x821296C8;
		  /* 821296C8h */ case   25:  		/* b -2652 */
		/* 821296C8h case   25:*/		return 0x82128C6C;
		/* 821296C8h case   25:*/		return 0x821296CC;
		  /* 821296CCh */ case   26:  		/* mr R3, R28 */
		/* 821296CCh case   26:*/		regs.R3 = regs.R28;
		/* 821296CCh case   26:*/		return 0x821296D0;
		  /* 821296D0h */ case   27:  		/* lwz R4, <#[R1 + 176]> */
		/* 821296D0h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821296D0h case   27:*/		return 0x821296D4;
		  /* 821296D4h */ case   28:  		/* bl -67084 */
		/* 821296D4h case   28:*/		regs.LR = 0x821296D8; return 0x821190C8;
		/* 821296D4h case   28:*/		return 0x821296D8;
		  /* 821296D8h */ case   29:  		/* mr R31, R3 */
		/* 821296D8h case   29:*/		regs.R31 = regs.R3;
		/* 821296D8h case   29:*/		return 0x821296DC;
		  /* 821296DCh */ case   30:  		/* b -5128 */
		/* 821296DCh case   30:*/		return 0x821282D4;
		/* 821296DCh case   30:*/		return 0x821296E0;
		  /* 821296E0h */ case   31:  		/* li R4, 0 */
		/* 821296E0h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821296E0h case   31:*/		return 0x821296E4;
		  /* 821296E4h */ case   32:  		/* mr R3, R28 */
		/* 821296E4h case   32:*/		regs.R3 = regs.R28;
		/* 821296E4h case   32:*/		return 0x821296E8;
		  /* 821296E8h */ case   33:  		/* bl -28632 */
		/* 821296E8h case   33:*/		regs.LR = 0x821296EC; return 0x82122710;
		/* 821296E8h case   33:*/		return 0x821296EC;
		  /* 821296ECh */ case   34:  		/* b -20 */
		/* 821296ECh case   34:*/		return 0x821296D8;
		/* 821296ECh case   34:*/		return 0x821296F0;
		  /* 821296F0h */ case   35:  		/* lwz R4, <#[R1 + 176]> */
		/* 821296F0h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821296F0h case   35:*/		return 0x821296F4;
		  /* 821296F4h */ case   36:  		/* b -16 */
		/* 821296F4h case   36:*/		return 0x821296E4;
		/* 821296F4h case   36:*/		return 0x821296F8;
		  /* 821296F8h */ case   37:  		/* lwz R8, <#[R1 + 176]> */
		/* 821296F8h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B0) );
		/* 821296F8h case   37:*/		return 0x821296FC;
		  /* 821296FCh */ case   38:  		/* li R7, 0 */
		/* 821296FCh case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821296FCh case   38:*/		return 0x82129700;
		  /* 82129700h */ case   39:  		/* li R4, 0 */
		/* 82129700h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129700h case   39:*/		return 0x82129704;
		  /* 82129704h */ case   40:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129704h case   40:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129704h case   40:*/		return 0x82129708;
		  /* 82129708h */ case   41:  		/* mr R3, R28 */
		/* 82129708h case   41:*/		regs.R3 = regs.R28;
		/* 82129708h case   41:*/		return 0x8212970C;
		  /* 8212970Ch */ case   42:  		/* mr R5, R8 */
		/* 8212970Ch case   42:*/		regs.R5 = regs.R8;
		/* 8212970Ch case   42:*/		return 0x82129710;
		  /* 82129710h */ case   43:  		/* bl -27192 */
		/* 82129710h case   43:*/		regs.LR = 0x82129714; return 0x82122CD8;
		/* 82129710h case   43:*/		return 0x82129714;
		  /* 82129714h */ case   44:  		/* b -60 */
		/* 82129714h case   44:*/		return 0x821296D8;
		/* 82129714h case   44:*/		return 0x82129718;
		  /* 82129718h */ case   45:  		/* li R3, 20 */
		/* 82129718h case   45:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129718h case   45:*/		return 0x8212971C;
		  /* 8212971Ch */ case   46:  		/* bl -394484 */
		/* 8212971Ch case   46:*/		regs.LR = 0x82129720; return 0x820C9228;
		/* 8212971Ch case   46:*/		return 0x82129720;
		  /* 82129720h */ case   47:  		/* cmplwi CR0, R3, 0 */
		/* 82129720h case   47:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129720h case   47:*/		return 0x82129724;
		  /* 82129724h */ case   48:  		/* bc 12, CR0_EQ, -6640 */
		/* 82129724h case   48:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82129724h case   48:*/		return 0x82129728;
		  /* 82129728h */ case   49:  		/* lis R11, -32255 */
		/* 82129728h case   49:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82129728h case   49:*/		return 0x8212972C;
		  /* 8212972Ch */ case   50:  		/* addi R6, R11, 9252 */
		/* 8212972Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 8212972Ch case   50:*/		return 0x82129730;
		  /* 82129730h */ case   51:  		/* b -5348 */
		/* 82129730h case   51:*/		return 0x8212824C;
		/* 82129730h case   51:*/		return 0x82129734;
		  /* 82129734h */ case   52:  		/* mr R3, R28 */
		/* 82129734h case   52:*/		regs.R3 = regs.R28;
		/* 82129734h case   52:*/		return 0x82129738;
		  /* 82129738h */ case   53:  		/* bl -66200 */
		/* 82129738h case   53:*/		regs.LR = 0x8212973C; return 0x821194A0;
		/* 82129738h case   53:*/		return 0x8212973C;
		  /* 8212973Ch */ case   54:  		/* b -100 */
		/* 8212973Ch case   54:*/		return 0x821296D8;
		/* 8212973Ch case   54:*/		return 0x82129740;
		  /* 82129740h */ case   55:  		/* mr R3, R28 */
		/* 82129740h case   55:*/		regs.R3 = regs.R28;
		/* 82129740h case   55:*/		return 0x82129744;
		  /* 82129744h */ case   56:  		/* bl -66476 */
		/* 82129744h case   56:*/		regs.LR = 0x82129748; return 0x82119398;
		/* 82129744h case   56:*/		return 0x82129748;
		  /* 82129748h */ case   57:  		/* b -112 */
		/* 82129748h case   57:*/		return 0x821296D8;
		/* 82129748h case   57:*/		return 0x8212974C;
		  /* 8212974Ch */ case   58:  		/* mr R3, R28 */
		/* 8212974Ch case   58:*/		regs.R3 = regs.R28;
		/* 8212974Ch case   58:*/		return 0x82129750;
		  /* 82129750h */ case   59:  		/* bl -67016 */
		/* 82129750h case   59:*/		regs.LR = 0x82129754; return 0x82119188;
		/* 82129750h case   59:*/		return 0x82129754;
		  /* 82129754h */ case   60:  		/* b -124 */
		/* 82129754h case   60:*/		return 0x821296D8;
		/* 82129754h case   60:*/		return 0x82129758;
		  /* 82129758h */ case   61:  		/* mr R3, R28 */
		/* 82129758h case   61:*/		regs.R3 = regs.R28;
		/* 82129758h case   61:*/		return 0x8212975C;
		  /* 8212975Ch */ case   62:  		/* bl -66764 */
		/* 8212975Ch case   62:*/		regs.LR = 0x82129760; return 0x82119290;
		/* 8212975Ch case   62:*/		return 0x82129760;
		  /* 82129760h */ case   63:  		/* b -136 */
		/* 82129760h case   63:*/		return 0x821296D8;
		/* 82129760h case   63:*/		return 0x82129764;
		  /* 82129764h */ case   64:  		/* li R7, 0 */
		/* 82129764h case   64:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129764h case   64:*/		return 0x82129768;
		  /* 82129768h */ case   65:  		/* lwz R8, <#[R1 + 180]> */
		/* 82129768h case   65:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129768h case   65:*/		return 0x8212976C;
		  /* 8212976Ch */ case   66:  		/* li R5, 0 */
		/* 8212976Ch case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212976Ch case   66:*/		return 0x82129770;
		  /* 82129770h */ case   67:  		/* lwz R6, <#[R1 + 176]> */
		/* 82129770h case   67:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129770h case   67:*/		return 0x82129774;
		  /* 82129774h */ case   68:  		/* li R4, 0 */
		/* 82129774h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129774h case   68:*/		return 0x82129778;
		  /* 82129778h */ case   69:  		/* mr R3, R28 */
		/* 82129778h case   69:*/		regs.R3 = regs.R28;
		/* 82129778h case   69:*/		return 0x8212977C;
		  /* 8212977Ch */ case   70:  		/* bl -27300 */
		/* 8212977Ch case   70:*/		regs.LR = 0x82129780; return 0x82122CD8;
		/* 8212977Ch case   70:*/		return 0x82129780;
		  /* 82129780h */ case   71:  		/* b -6688 */
		/* 82129780h case   71:*/		return 0x82127D60;
		/* 82129780h case   71:*/		return 0x82129784;
		  /* 82129784h */ case   72:  		/* lwz R8, <#[R1 + 192]> */
		/* 82129784h case   72:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C0) );
		/* 82129784h case   72:*/		return 0x82129788;
		  /* 82129788h */ case   73:  		/* li R4, 0 */
		/* 82129788h case   73:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129788h case   73:*/		return 0x8212978C;
		  /* 8212978Ch */ case   74:  		/* lwz R7, <#[R1 + 188]> */
		/* 8212978Ch case   74:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000BC) );
		/* 8212978Ch case   74:*/		return 0x82129790;
		  /* 82129790h */ case   75:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129790h case   75:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129790h case   75:*/		return 0x82129794;
		  /* 82129794h */ case   76:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129794h case   76:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129794h case   76:*/		return 0x82129798;
		  /* 82129798h */ case   77:  		/* mr R3, R28 */
		/* 82129798h case   77:*/		regs.R3 = regs.R28;
		/* 82129798h case   77:*/		return 0x8212979C;
		  /* 8212979Ch */ case   78:  		/* bl -27332 */
		/* 8212979Ch case   78:*/		regs.LR = 0x821297A0; return 0x82122CD8;
		/* 8212979Ch case   78:*/		return 0x821297A0;
		  /* 821297A0h */ case   79:  		/* stw R25, <#[R1 + 180]> */
		/* 821297A0h case   79:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 821297A0h case   79:*/		return 0x821297A4;
		  /* 821297A4h */ case   80:  		/* mr R31, R3 */
		/* 821297A4h case   80:*/		regs.R31 = regs.R3;
		/* 821297A4h case   80:*/		return 0x821297A8;
		  /* 821297A8h */ case   81:  		/* stw R25, <#[R1 + 184]> */
		/* 821297A8h case   81:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 821297A8h case   81:*/		return 0x821297AC;
		  /* 821297ACh */ case   82:  		/* stw R25, <#[R1 + 188]> */
		/* 821297ACh case   82:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000BC) );
		/* 821297ACh case   82:*/		return 0x821297B0;
		  /* 821297B0h */ case   83:  		/* stw R25, <#[R1 + 192]> */
		/* 821297B0h case   83:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 821297B0h case   83:*/		return 0x821297B4;
		  /* 821297B4h */ case   84:  		/* b -2652 */
		/* 821297B4h case   84:*/		return 0x82128D58;
		/* 821297B4h case   84:*/		return 0x821297B8;
		  /* 821297B8h */ case   85:  		/* li R3, 20 */
		/* 821297B8h case   85:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821297B8h case   85:*/		return 0x821297BC;
		  /* 821297BCh */ case   86:  		/* bl -394644 */
		/* 821297BCh case   86:*/		regs.LR = 0x821297C0; return 0x820C9228;
		/* 821297BCh case   86:*/		return 0x821297C0;
		  /* 821297C0h */ case   87:  		/* cmplwi CR0, R3, 0 */
		/* 821297C0h case   87:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821297C0h case   87:*/		return 0x821297C4;
		  /* 821297C4h */ case   88:  		/* bc 12, CR0_EQ, -5436 */
		/* 821297C4h case   88:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 821297C4h case   88:*/		return 0x821297C8;
		  /* 821297C8h */ case   89:  		/* lis R11, -32255 */
		/* 821297C8h case   89:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821297C8h case   89:*/		return 0x821297CC;
		  /* 821297CCh */ case   90:  		/* addi R6, R11, 9252 */
		/* 821297CCh case   90:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 821297CCh case   90:*/		return 0x821297D0;
		  /* 821297D0h */ case   91:  		/* b -5468 */
		/* 821297D0h case   91:*/		return 0x82128274;
		/* 821297D0h case   91:*/		return 0x821297D4;
		  /* 821297D4h */ case   92:  		/* li R7, 0 */
		/* 821297D4h case   92:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821297D4h case   92:*/		return 0x821297D8;
		  /* 821297D8h */ case   93:  		/* lwz R8, <#[R1 + 184]> */
		/* 821297D8h case   93:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B8) );
		/* 821297D8h case   93:*/		return 0x821297DC;
		  /* 821297DCh */ case   94:  		/* li R5, 0 */
		/* 821297DCh case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821297DCh case   94:*/		return 0x821297E0;
		  /* 821297E0h */ case   95:  		/* lwz R6, <#[R1 + 180]> */
		/* 821297E0h case   95:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 821297E0h case   95:*/		return 0x821297E4;
		  /* 821297E4h */ case   96:  		/* mr R3, R28 */
		/* 821297E4h case   96:*/		regs.R3 = regs.R28;
		/* 821297E4h case   96:*/		return 0x821297E8;
		  /* 821297E8h */ case   97:  		/* lwz R4, <#[R1 + 176]> */
		/* 821297E8h case   97:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821297E8h case   97:*/		return 0x821297EC;
		  /* 821297ECh */ case   98:  		/* bl -27412 */
		/* 821297ECh case   98:*/		regs.LR = 0x821297F0; return 0x82122CD8;
		/* 821297ECh case   98:*/		return 0x821297F0;
		  /* 821297F0h */ case   99:  		/* b -2728 */
		/* 821297F0h case   99:*/		return 0x82128D48;
		/* 821297F0h case   99:*/		return 0x821297F4;
		  /* 821297F4h */ case  100:  		/* lwz R8, <#[R1 + 196]> */
		/* 821297F4h case  100:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C4) );
		/* 821297F4h case  100:*/		return 0x821297F8;
		  /* 821297F8h */ case  101:  		/* lwz R7, <#[R1 + 192]> */
		/* 821297F8h case  101:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C0) );
		/* 821297F8h case  101:*/		return 0x821297FC;
		  /* 821297FCh */ case  102:  		/* lwz R6, <#[R1 + 188]> */
		/* 821297FCh case  102:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 821297FCh case  102:*/		return 0x82129800;
		  /* 82129800h */ case  103:  		/* lwz R5, <#[R1 + 184]> */
		/* 82129800h case  103:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129800h case  103:*/		return 0x82129804;
		  /* 82129804h */ case  104:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129804h case  104:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129804h case  104:*/		return 0x82129808;
		  /* 82129808h */ case  105:  		/* b -112 */
		/* 82129808h case  105:*/		return 0x82129798;
		/* 82129808h case  105:*/		return 0x8212980C;
		  /* 8212980Ch */ case  106:  		/* li R7, 0 */
		/* 8212980Ch case  106:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212980Ch case  106:*/		return 0x82129810;
		  /* 82129810h */ case  107:  		/* lwz R5, <#[R1 + 176]> */
		/* 82129810h case  107:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129810h case  107:*/		return 0x82129814;
		  /* 82129814h */ case  108:  		/* li R4, 0 */
		/* 82129814h case  108:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129814h case  108:*/		return 0x82129818;
		  /* 82129818h */ case  109:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129818h case  109:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129818h case  109:*/		return 0x8212981C;
		  /* 8212981Ch */ case  110:  		/* mr R3, R28 */
		/* 8212981Ch case  110:*/		regs.R3 = regs.R28;
		/* 8212981Ch case  110:*/		return 0x82129820;
		  /* 82129820h */ case  111:  		/* bl -28592 */
		/* 82129820h case  111:*/		regs.LR = 0x82129824; return 0x82122870;
		/* 82129820h case  111:*/		return 0x82129824;
		  /* 82129824h */ case  112:  		/* b -332 */
		/* 82129824h case  112:*/		return 0x821296D8;
		/* 82129824h case  112:*/		return 0x82129828;
		  /* 82129828h */ case  113:  		/* lwz R7, <#[R1 + 184]> */
		/* 82129828h case  113:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129828h case  113:*/		return 0x8212982C;
		  /* 8212982Ch */ case  114:  		/* b -28 */
		/* 8212982Ch case  114:*/		return 0x82129810;
		/* 8212982Ch case  114:*/		return 0x82129830;
		  /* 82129830h */ case  115:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129830h case  115:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129830h case  115:*/		return 0x82129834;
		  /* 82129834h */ case  116:  		/* li R4, 0 */
		/* 82129834h case  116:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129834h case  116:*/		return 0x82129838;
		  /* 82129838h */ case  117:  		/* lwz R5, <#[R1 + 176]> */
		/* 82129838h case  117:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129838h case  117:*/		return 0x8212983C;
		  /* 8212983Ch */ case  118:  		/* mr R3, R28 */
		/* 8212983Ch case  118:*/		regs.R3 = regs.R28;
		/* 8212983Ch case  118:*/		return 0x82129840;
		  /* 82129840h */ case  119:  		/* bl -28000 */
		/* 82129840h case  119:*/		regs.LR = 0x82129844; return 0x82122AE0;
		/* 82129840h case  119:*/		return 0x82129844;
		  /* 82129844h */ case  120:  		/* b -364 */
		/* 82129844h case  120:*/		return 0x821296D8;
		/* 82129844h case  120:*/		return 0x82129848;
		  /* 82129848h */ case  121:  		/* mr R3, R28 */
		/* 82129848h case  121:*/		regs.R3 = regs.R28;
		/* 82129848h case  121:*/		return 0x8212984C;
		  /* 8212984Ch */ case  122:  		/* lwz R8, <#[R1 + 196]> */
		/* 8212984Ch case  122:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C4) );
		/* 8212984Ch case  122:*/		return 0x82129850;
		  /* 82129850h */ case  123:  		/* lwz R7, <#[R1 + 192]> */
		/* 82129850h case  123:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C0) );
		/* 82129850h case  123:*/		return 0x82129854;
		  /* 82129854h */ case  124:  		/* lwz R6, <#[R1 + 188]> */
		/* 82129854h case  124:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129854h case  124:*/		return 0x82129858;
		  /* 82129858h */ case  125:  		/* lwz R5, <#[R1 + 184]> */
		/* 82129858h case  125:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129858h case  125:*/		return 0x8212985C;
		  /* 8212985Ch */ case  126:  		/* lwz R4, <#[R1 + 176]> */
		/* 8212985Ch case  126:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212985Ch case  126:*/		return 0x82129860;
		  /* 82129860h */ case  127:  		/* bl -27528 */
		/* 82129860h case  127:*/		regs.LR = 0x82129864; return 0x82122CD8;
		/* 82129860h case  127:*/		return 0x82129864;
		  /* 82129864h */ case  128:  		/* stw R25, <#[R1 + 184]> */
		/* 82129864h case  128:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129864h case  128:*/		return 0x82129868;
		  /* 82129868h */ case  129:  		/* mr R31, R3 */
		/* 82129868h case  129:*/		regs.R31 = regs.R3;
		/* 82129868h case  129:*/		return 0x8212986C;
		  /* 8212986Ch */ case  130:  		/* stw R25, <#[R1 + 188]> */
		/* 8212986Ch case  130:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000BC) );
		/* 8212986Ch case  130:*/		return 0x82129870;
		  /* 82129870h */ case  131:  		/* stw R25, <#[R1 + 192]> */
		/* 82129870h case  131:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 82129870h case  131:*/		return 0x82129874;
		  /* 82129874h */ case  132:  		/* stw R25, <#[R1 + 196]> */
		/* 82129874h case  132:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C4) );
		/* 82129874h case  132:*/		return 0x82129878;
		  /* 82129878h */ case  133:  		/* b -2848 */
		/* 82129878h case  133:*/		return 0x82128D58;
		/* 82129878h case  133:*/		return 0x8212987C;
		  /* 8212987Ch */ case  134:  		/* li R7, 0 */
		/* 8212987Ch case  134:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8212987Ch case  134:*/		return 0x82129880;
		  /* 82129880h */ case  135:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129880h case  135:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129880h case  135:*/		return 0x82129884;
		  /* 82129884h */ case  136:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129884h case  136:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129884h case  136:*/		return 0x82129888;
		  /* 82129888h */ case  137:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129888h case  137:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129888h case  137:*/		return 0x8212988C;
		  /* 8212988Ch */ case  138:  		/* b -112 */
		/* 8212988Ch case  138:*/		return 0x8212981C;
		/* 8212988Ch case  138:*/		return 0x82129890;
		  /* 82129890h */ case  139:  		/* lwz R7, <#[R1 + 188]> */
		/* 82129890h case  139:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129890h case  139:*/		return 0x82129894;
		  /* 82129894h */ case  140:  		/* b -20 */
		/* 82129894h case  140:*/		return 0x82129880;
		/* 82129894h case  140:*/		return 0x82129898;
		  /* 82129898h */ case  141:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129898h case  141:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129898h case  141:*/		return 0x8212989C;
		  /* 8212989Ch */ case  142:  		/* lwz R5, <#[R1 + 180]> */
		/* 8212989Ch case  142:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212989Ch case  142:*/		return 0x821298A0;
		  /* 821298A0h */ case  143:  		/* lwz R4, <#[R1 + 176]> */
		/* 821298A0h case  143:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821298A0h case  143:*/		return 0x821298A4;
		  /* 821298A4h */ case  144:  		/* b -104 */
		/* 821298A4h case  144:*/		return 0x8212983C;
		/* 821298A4h case  144:*/		return 0x821298A8;
		  /* 821298A8h */ case  145:  		/* mr R3, R28 */
		/* 821298A8h case  145:*/		regs.R3 = regs.R28;
		/* 821298A8h case  145:*/		return 0x821298AC;
		  /* 821298ACh */ case  146:  		/* lwz R4, <#[R1 + 176]> */
		/* 821298ACh case  146:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821298ACh case  146:*/		return 0x821298B0;
		  /* 821298B0h */ case  147:  		/* bl -40320 */
		/* 821298B0h case  147:*/		regs.LR = 0x821298B4; return 0x8211FB30;
		/* 821298B0h case  147:*/		return 0x821298B4;
		  /* 821298B4h */ case  148:  		/* b -476 */
		/* 821298B4h case  148:*/		return 0x821296D8;
		/* 821298B4h case  148:*/		return 0x821298B8;
		  /* 821298B8h */ case  149:  		/* li R3, 20 */
		/* 821298B8h case  149:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821298B8h case  149:*/		return 0x821298BC;
		  /* 821298BCh */ case  150:  		/* bl -394900 */
		/* 821298BCh case  150:*/		regs.LR = 0x821298C0; return 0x820C9228;
		/* 821298BCh case  150:*/		return 0x821298C0;
		  /* 821298C0h */ case  151:  		/* cmplwi CR0, R3, 0 */
		/* 821298C0h case  151:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821298C0h case  151:*/		return 0x821298C4;
		  /* 821298C4h */ case  152:  		/* bc 12, CR0_EQ, -7132 */
		/* 821298C4h case  152:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 821298C4h case  152:*/		return 0x821298C8;
		  /* 821298C8h */ case  153:  		/* li R4, 0 */
		/* 821298C8h case  153:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821298C8h case  153:*/		return 0x821298CC;
		  /* 821298CCh */ case  154:  		/* bl -389652 */
		/* 821298CCh case  154:*/		regs.LR = 0x821298D0; return 0x820CA6B8;
		/* 821298CCh case  154:*/		return 0x821298D0;
		  /* 821298D0h */ case  155:  		/* b -7152 */
		/* 821298D0h case  155:*/		return 0x82127CE0;
		/* 821298D0h case  155:*/		return 0x821298D4;
		  /* 821298D4h */ case  156:  		/* li R3, 20 */
		/* 821298D4h case  156:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821298D4h case  156:*/		return 0x821298D8;
		  /* 821298D8h */ case  157:  		/* bl -394928 */
		/* 821298D8h case  157:*/		regs.LR = 0x821298DC; return 0x820C9228;
		/* 821298D8h case  157:*/		return 0x821298DC;
		  /* 821298DCh */ case  158:  		/* cmplwi CR0, R3, 0 */
		/* 821298DCh case  158:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821298DCh case  158:*/		return 0x821298E0;
		  /* 821298E0h */ case  159:  		/* bc 12, CR0_EQ, -7084 */
		/* 821298E0h case  159:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 821298E0h case  159:*/		return 0x821298E4;
		  /* 821298E4h */ case  160:  		/* lis R11, -32253 */
		/* 821298E4h case  160:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821298E4h case  160:*/		return 0x821298E8;
		  /* 821298E8h */ case  161:  		/* addi R6, R11, 14740 */
		/* 821298E8h case  161:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3994);
		/* 821298E8h case  161:*/		return 0x821298EC;
		  /* 821298ECh */ case  162:  		/* b -5792 */
		/* 821298ECh case  162:*/		return 0x8212824C;
		/* 821298ECh case  162:*/		return 0x821298F0;
		  /* 821298F0h */ case  163:  		/* li R3, 20 */
		/* 821298F0h case  163:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821298F0h case  163:*/		return 0x821298F4;
		  /* 821298F4h */ case  164:  		/* bl -394956 */
		/* 821298F4h case  164:*/		regs.LR = 0x821298F8; return 0x820C9228;
		/* 821298F4h case  164:*/		return 0x821298F8;
		  /* 821298F8h */ case  165:  		/* cmplwi CR0, R3, 0 */
		/* 821298F8h case  165:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821298F8h case  165:*/		return 0x821298FC;
		  /* 821298FCh */ case  166:  		/* bc 12, CR0_EQ, 32 */
		/* 821298FCh case  166:*/		if ( regs.CR[0].eq ) { return 0x8212991C;  }
		/* 821298FCh case  166:*/		return 0x82129900;
		  /* 82129900h */ case  167:  		/* lis R11, -32253 */
		/* 82129900h case  167:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129900h case  167:*/		return 0x82129904;
		  /* 82129904h */ case  168:  		/* addi R6, R11, 14740 */
		/* 82129904h case  168:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3994);
		/* 82129904h case  168:*/		return 0x82129908;
		  /* 82129908h */ case  169:  		/* li R5, 0 */
		/* 82129908h case  169:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129908h case  169:*/		return 0x8212990C;
		  /* 8212990Ch */ case  170:  		/* lwz R4, <#[R1 + 180]> */
		/* 8212990Ch case  170:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212990Ch case  170:*/		return 0x82129910;
		  /* 82129910h */ case  171:  		/* bl -394528 */
		/* 82129910h case  171:*/		regs.LR = 0x82129914; return 0x820C93F0;
		/* 82129910h case  171:*/		return 0x82129914;
		  /* 82129914h */ case  172:  		/* mr R31, R3 */
		/* 82129914h case  172:*/		regs.R31 = regs.R3;
		/* 82129914h case  172:*/		return 0x82129918;
		  /* 82129918h */ case  173:  		/* b 8 */
		/* 82129918h case  173:*/		return 0x82129920;
		/* 82129918h case  173:*/		return 0x8212991C;
	}
	return 0x8212991C;
} // Block from 82129664h-8212991Ch (174 instructions)

//////////////////////////////////////////////////////
// Block at 8212991Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212991C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212991C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212991C);
		  /* 8212991Ch */ case    0:  		/* mr R31, R25 */
		/* 8212991Ch case    0:*/		regs.R31 = regs.R25;
		/* 8212991Ch case    0:*/		return 0x82129920;
	}
	return 0x82129920;
} // Block from 8212991Ch-82129920h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129920);
		  /* 82129920h */ case    0:  		/* mr R4, R31 */
		/* 82129920h case    0:*/		regs.R4 = regs.R31;
		/* 82129920h case    0:*/		return 0x82129924;
		  /* 82129924h */ case    1:  		/* mr R3, R28 */
		/* 82129924h case    1:*/		regs.R3 = regs.R28;
		/* 82129924h case    1:*/		return 0x82129928;
		  /* 82129928h */ case    2:  		/* bl -65296 */
		/* 82129928h case    2:*/		regs.LR = 0x8212992C; return 0x82119A18;
		/* 82129928h case    2:*/		return 0x8212992C;
		  /* 8212992Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8212992Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212992Ch case    3:*/		return 0x82129930;
		  /* 82129930h */ case    4:  		/* bc 12, CR0_EQ, -5724 */
		/* 82129930h case    4:*/		if ( regs.CR[0].eq ) { return 0x821282D4;  }
		/* 82129930h case    4:*/		return 0x82129934;
		  /* 82129934h */ case    5:  		/* mr R4, R31 */
		/* 82129934h case    5:*/		regs.R4 = regs.R31;
		/* 82129934h case    5:*/		return 0x82129938;
		  /* 82129938h */ case    6:  		/* b -7136 */
		/* 82129938h case    6:*/		return 0x82127D58;
		/* 82129938h case    6:*/		return 0x8212993C;
		  /* 8212993Ch */ case    7:  		/* mr R3, R28 */
		/* 8212993Ch case    7:*/		regs.R3 = regs.R28;
		/* 8212993Ch case    7:*/		return 0x82129940;
		  /* 82129940h */ case    8:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129940h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129940h case    8:*/		return 0x82129944;
		  /* 82129944h */ case    9:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129944h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129944h case    9:*/		return 0x82129948;
		  /* 82129948h */ case   10:  		/* bl -66480 */
		/* 82129948h case   10:*/		regs.LR = 0x8212994C; return 0x82119598;
		/* 82129948h case   10:*/		return 0x8212994C;
		  /* 8212994Ch */ case   11:  		/* b -628 */
		/* 8212994Ch case   11:*/		return 0x821296D8;
		/* 8212994Ch case   11:*/		return 0x82129950;
		  /* 82129950h */ case   12:  		/* li R4, 4 */
		/* 82129950h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82129950h case   12:*/		return 0x82129954;
		  /* 82129954h */ case   13:  		/* b -3304 */
		/* 82129954h case   13:*/		return 0x82128C6C;
		/* 82129954h case   13:*/		return 0x82129958;
		  /* 82129958h */ case   14:  		/* li R3, 20 */
		/* 82129958h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129958h case   14:*/		return 0x8212995C;
		  /* 8212995Ch */ case   15:  		/* bl -395060 */
		/* 8212995Ch case   15:*/		regs.LR = 0x82129960; return 0x820C9228;
		/* 8212995Ch case   15:*/		return 0x82129960;
		  /* 82129960h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 82129960h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129960h case   16:*/		return 0x82129964;
		  /* 82129964h */ case   17:  		/* bc 12, CR0_EQ, -7216 */
		/* 82129964h case   17:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82129964h case   17:*/		return 0x82129968;
		  /* 82129968h */ case   18:  		/* lis R11, -32253 */
		/* 82129968h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129968h case   18:*/		return 0x8212996C;
		  /* 8212996Ch */ case   19:  		/* addi R6, R11, 14728 */
		/* 8212996Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3988);
		/* 8212996Ch case   19:*/		return 0x82129970;
		  /* 82129970h */ case   20:  		/* b -5924 */
		/* 82129970h case   20:*/		return 0x8212824C;
		/* 82129970h case   20:*/		return 0x82129974;
		  /* 82129974h */ case   21:  		/* li R3, 20 */
		/* 82129974h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129974h case   21:*/		return 0x82129978;
		  /* 82129978h */ case   22:  		/* bl -395088 */
		/* 82129978h case   22:*/		regs.LR = 0x8212997C; return 0x820C9228;
		/* 82129978h case   22:*/		return 0x8212997C;
		  /* 8212997Ch */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 8212997Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212997Ch case   23:*/		return 0x82129980;
		  /* 82129980h */ case   24:  		/* bc 12, CR0_EQ, -5880 */
		/* 82129980h case   24:*/		if ( regs.CR[0].eq ) { return 0x82128288;  }
		/* 82129980h case   24:*/		return 0x82129984;
		  /* 82129984h */ case   25:  		/* lis R11, -32253 */
		/* 82129984h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129984h case   25:*/		return 0x82129988;
		  /* 82129988h */ case   26:  		/* addi R6, R11, 14728 */
		/* 82129988h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3988);
		/* 82129988h case   26:*/		return 0x8212998C;
		  /* 8212998Ch */ case   27:  		/* b -5912 */
		/* 8212998Ch case   27:*/		return 0x82128274;
		/* 8212998Ch case   27:*/		return 0x82129990;
		  /* 82129990h */ case   28:  		/* li R3, 88 */
		/* 82129990h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82129990h case   28:*/		return 0x82129994;
		  /* 82129994h */ case   29:  		/* addi R30, R28, 40 */
		/* 82129994h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x28);
		/* 82129994h case   29:*/		return 0x82129998;
		  /* 82129998h */ case   30:  		/* bl -395120 */
		/* 82129998h case   30:*/		regs.LR = 0x8212999C; return 0x820C9228;
		/* 82129998h case   30:*/		return 0x8212999C;
		  /* 8212999Ch */ case   31:  		/* cmplwi CR0, R3, 0 */
		/* 8212999Ch case   31:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212999Ch case   31:*/		return 0x821299A0;
		  /* 821299A0h */ case   32:  		/* bc 12, CR0_EQ, 40 */
		/* 821299A0h case   32:*/		if ( regs.CR[0].eq ) { return 0x821299C8;  }
		/* 821299A0h case   32:*/		return 0x821299A4;
		  /* 821299A4h */ case   33:  		/* mr R9, R30 */
		/* 821299A4h case   33:*/		regs.R9 = regs.R30;
		/* 821299A4h case   33:*/		return 0x821299A8;
		  /* 821299A8h */ case   34:  		/* li R8, 1 */
		/* 821299A8h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821299A8h case   34:*/		return 0x821299AC;
		  /* 821299ACh */ case   35:  		/* li R7, 0 */
		/* 821299ACh case   35:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821299ACh case   35:*/		return 0x821299B0;
		  /* 821299B0h */ case   36:  		/* li R6, 0 */
		/* 821299B0h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821299B0h case   36:*/		return 0x821299B4;
		  /* 821299B4h */ case   37:  		/* li R5, 0 */
		/* 821299B4h case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821299B4h case   37:*/		return 0x821299B8;
		  /* 821299B8h */ case   38:  		/* li R4, 0 */
		/* 821299B8h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821299B8h case   38:*/		return 0x821299BC;
		  /* 821299BCh */ case   39:  		/* bl -383540 */
		/* 821299BCh case   39:*/		regs.LR = 0x821299C0; return 0x820CBF88;
		/* 821299BCh case   39:*/		return 0x821299C0;
		  /* 821299C0h */ case   40:  		/* mr R31, R3 */
		/* 821299C0h case   40:*/		regs.R31 = regs.R3;
		/* 821299C0h case   40:*/		return 0x821299C4;
		  /* 821299C4h */ case   41:  		/* b 8 */
		/* 821299C4h case   41:*/		return 0x821299CC;
		/* 821299C4h case   41:*/		return 0x821299C8;
	}
	return 0x821299C8;
} // Block from 82129920h-821299C8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821299C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821299C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821299C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821299C8);
		  /* 821299C8h */ case    0:  		/* mr R31, R25 */
		/* 821299C8h case    0:*/		regs.R31 = regs.R25;
		/* 821299C8h case    0:*/		return 0x821299CC;
	}
	return 0x821299CC;
} // Block from 821299C8h-821299CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821299CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821299CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821299CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821299CC);
		  /* 821299CCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821299CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821299CCh case    0:*/		return 0x821299D0;
		  /* 821299D0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821299D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821299DC;  }
		/* 821299D0h case    1:*/		return 0x821299D4;
		  /* 821299D4h */ case    2:  		/* mr R4, R25 */
		/* 821299D4h case    2:*/		regs.R4 = regs.R25;
		/* 821299D4h case    2:*/		return 0x821299D8;
		  /* 821299D8h */ case    3:  		/* b 112 */
		/* 821299D8h case    3:*/		return 0x82129A48;
		/* 821299D8h case    3:*/		return 0x821299DC;
	}
	return 0x821299DC;
} // Block from 821299CCh-821299DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821299DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821299DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821299DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821299DC);
		  /* 821299DCh */ case    0:  		/* li R3, 40 */
		/* 821299DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821299DCh case    0:*/		return 0x821299E0;
		  /* 821299E0h */ case    1:  		/* bl -395192 */
		/* 821299E0h case    1:*/		regs.LR = 0x821299E4; return 0x820C9228;
		/* 821299E0h case    1:*/		return 0x821299E4;
		  /* 821299E4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821299E4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821299E4h case    2:*/		return 0x821299E8;
		  /* 821299E8h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 821299E8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82129A0C;  }
		/* 821299E8h case    3:*/		return 0x821299EC;
		  /* 821299ECh */ case    4:  		/* li R9, 512 */
		/* 821299ECh case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 821299ECh case    4:*/		return 0x821299F0;
		  /* 821299F0h */ case    5:  		/* li R8, 1 */
		/* 821299F0h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821299F0h case    5:*/		return 0x821299F4;
		  /* 821299F4h */ case    6:  		/* li R7, 1 */
		/* 821299F4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821299F4h case    6:*/		return 0x821299F8;
		  /* 821299F8h */ case    7:  		/* li R6, 0 */
		/* 821299F8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821299F8h case    7:*/		return 0x821299FC;
		  /* 821299FCh */ case    8:  		/* li R5, 0 */
		/* 821299FCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821299FCh case    8:*/		return 0x82129A00;
		  /* 82129A00h */ case    9:  		/* li R4, 0 */
		/* 82129A00h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129A00h case    9:*/		return 0x82129A04;
		  /* 82129A04h */ case   10:  		/* bl -388484 */
		/* 82129A04h case   10:*/		regs.LR = 0x82129A08; return 0x820CAC80;
		/* 82129A04h case   10:*/		return 0x82129A08;
		  /* 82129A08h */ case   11:  		/* b 8 */
		/* 82129A08h case   11:*/		return 0x82129A10;
		/* 82129A08h case   11:*/		return 0x82129A0C;
	}
	return 0x82129A0C;
} // Block from 821299DCh-82129A0Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82129A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129A0C);
		  /* 82129A0Ch */ case    0:  		/* mr R3, R25 */
		/* 82129A0Ch case    0:*/		regs.R3 = regs.R25;
		/* 82129A0Ch case    0:*/		return 0x82129A10;
	}
	return 0x82129A10;
} // Block from 82129A0Ch-82129A10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129A10);
		  /* 82129A10h */ case    0:  		/* stw R3, <#[R31 + 16]> */
		/* 82129A10h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82129A10h case    0:*/		return 0x82129A14;
		  /* 82129A14h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82129A14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82129A14h case    1:*/		return 0x82129A18;
		  /* 82129A18h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 82129A18h case    2:*/		if ( regs.CR[6].eq ) { return 0x821299D4;  }
		/* 82129A18h case    2:*/		return 0x82129A1C;
		  /* 82129A1Ch */ case    3:  		/* li R3, 72 */
		/* 82129A1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82129A1Ch case    3:*/		return 0x82129A20;
		  /* 82129A20h */ case    4:  		/* bl -395256 */
		/* 82129A20h case    4:*/		regs.LR = 0x82129A24; return 0x820C9228;
		/* 82129A20h case    4:*/		return 0x82129A24;
		  /* 82129A24h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82129A24h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129A24h case    5:*/		return 0x82129A28;
		  /* 82129A28h */ case    6:  		/* bc 12, CR0_EQ, 208 */
		/* 82129A28h case    6:*/		if ( regs.CR[0].eq ) { return 0x82129AF8;  }
		/* 82129A28h case    6:*/		return 0x82129A2C;
		  /* 82129A2Ch */ case    7:  		/* li R5, 1 */
		/* 82129A2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82129A2Ch case    7:*/		return 0x82129A30;
		  /* 82129A30h */ case    8:  		/* b 184 */
		/* 82129A30h case    8:*/		return 0x82129AE8;
		/* 82129A30h case    8:*/		return 0x82129A34;
		  /* 82129A34h */ case    9:  		/* stw R3, <#[R31 + 32]> */
		/* 82129A34h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 82129A34h case    9:*/		return 0x82129A38;
		  /* 82129A38h */ case   10:  		/* mr R4, R31 */
		/* 82129A38h case   10:*/		regs.R4 = regs.R31;
		/* 82129A38h case   10:*/		return 0x82129A3C;
		  /* 82129A3Ch */ case   11:  		/* mr R3, R28 */
		/* 82129A3Ch case   11:*/		regs.R3 = regs.R28;
		/* 82129A3Ch case   11:*/		return 0x82129A40;
		  /* 82129A40h */ case   12:  		/* bl -55848 */
		/* 82129A40h case   12:*/		regs.LR = 0x82129A44; return 0x8211C018;
		/* 82129A40h case   12:*/		return 0x82129A44;
		  /* 82129A44h */ case   13:  		/* mr R4, R31 */
		/* 82129A44h case   13:*/		regs.R4 = regs.R31;
		/* 82129A44h case   13:*/		return 0x82129A48;
	}
	return 0x82129A48;
} // Block from 82129A10h-82129A48h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82129A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129A48);
		  /* 82129A48h */ case    0:  		/* mr R31, R4 */
		/* 82129A48h case    0:*/		regs.R31 = regs.R4;
		/* 82129A48h case    0:*/		return 0x82129A4C;
		  /* 82129A4Ch */ case    1:  		/* b -7516 */
		/* 82129A4Ch case    1:*/		return 0x82127CF0;
		/* 82129A4Ch case    1:*/		return 0x82129A50;
		  /* 82129A50h */ case    2:  		/* li R3, 88 */
		/* 82129A50h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82129A50h case    2:*/		return 0x82129A54;
		  /* 82129A54h */ case    3:  		/* addi R30, R28, 40 */
		/* 82129A54h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x28);
		/* 82129A54h case    3:*/		return 0x82129A58;
		  /* 82129A58h */ case    4:  		/* bl -395312 */
		/* 82129A58h case    4:*/		regs.LR = 0x82129A5C; return 0x820C9228;
		/* 82129A58h case    4:*/		return 0x82129A5C;
		  /* 82129A5Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82129A5Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129A5Ch case    5:*/		return 0x82129A60;
		  /* 82129A60h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 82129A60h case    6:*/		if ( regs.CR[0].eq ) { return 0x82129A88;  }
		/* 82129A60h case    6:*/		return 0x82129A64;
		  /* 82129A64h */ case    7:  		/* mr R9, R30 */
		/* 82129A64h case    7:*/		regs.R9 = regs.R30;
		/* 82129A64h case    7:*/		return 0x82129A68;
		  /* 82129A68h */ case    8:  		/* li R8, 1 */
		/* 82129A68h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82129A68h case    8:*/		return 0x82129A6C;
		  /* 82129A6Ch */ case    9:  		/* li R7, 0 */
		/* 82129A6Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129A6Ch case    9:*/		return 0x82129A70;
		  /* 82129A70h */ case   10:  		/* li R6, 0 */
		/* 82129A70h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129A70h case   10:*/		return 0x82129A74;
		  /* 82129A74h */ case   11:  		/* li R5, 0 */
		/* 82129A74h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129A74h case   11:*/		return 0x82129A78;
		  /* 82129A78h */ case   12:  		/* li R4, 0 */
		/* 82129A78h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129A78h case   12:*/		return 0x82129A7C;
		  /* 82129A7Ch */ case   13:  		/* bl -383732 */
		/* 82129A7Ch case   13:*/		regs.LR = 0x82129A80; return 0x820CBF88;
		/* 82129A7Ch case   13:*/		return 0x82129A80;
		  /* 82129A80h */ case   14:  		/* mr R31, R3 */
		/* 82129A80h case   14:*/		regs.R31 = regs.R3;
		/* 82129A80h case   14:*/		return 0x82129A84;
		  /* 82129A84h */ case   15:  		/* b 8 */
		/* 82129A84h case   15:*/		return 0x82129A8C;
		/* 82129A84h case   15:*/		return 0x82129A88;
	}
	return 0x82129A88;
} // Block from 82129A48h-82129A88h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82129A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129A88);
		  /* 82129A88h */ case    0:  		/* mr R31, R25 */
		/* 82129A88h case    0:*/		regs.R31 = regs.R25;
		/* 82129A88h case    0:*/		return 0x82129A8C;
	}
	return 0x82129A8C;
} // Block from 82129A88h-82129A8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129A8C);
		  /* 82129A8Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82129A8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82129A8Ch case    0:*/		return 0x82129A90;
		  /* 82129A90h */ case    1:  		/* bc 12, CR6_EQ, -188 */
		/* 82129A90h case    1:*/		if ( regs.CR[6].eq ) { return 0x821299D4;  }
		/* 82129A90h case    1:*/		return 0x82129A94;
		  /* 82129A94h */ case    2:  		/* li R3, 40 */
		/* 82129A94h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82129A94h case    2:*/		return 0x82129A98;
		  /* 82129A98h */ case    3:  		/* bl -395376 */
		/* 82129A98h case    3:*/		regs.LR = 0x82129A9C; return 0x820C9228;
		/* 82129A98h case    3:*/		return 0x82129A9C;
		  /* 82129A9Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82129A9Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129A9Ch case    4:*/		return 0x82129AA0;
		  /* 82129AA0h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 82129AA0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82129AC4;  }
		/* 82129AA0h case    5:*/		return 0x82129AA4;
		  /* 82129AA4h */ case    6:  		/* li R9, 512 */
		/* 82129AA4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82129AA4h case    6:*/		return 0x82129AA8;
		  /* 82129AA8h */ case    7:  		/* li R8, 1 */
		/* 82129AA8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82129AA8h case    7:*/		return 0x82129AAC;
		  /* 82129AACh */ case    8:  		/* li R7, 1 */
		/* 82129AACh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82129AACh case    8:*/		return 0x82129AB0;
		  /* 82129AB0h */ case    9:  		/* li R6, 0 */
		/* 82129AB0h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129AB0h case    9:*/		return 0x82129AB4;
		  /* 82129AB4h */ case   10:  		/* li R5, 0 */
		/* 82129AB4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129AB4h case   10:*/		return 0x82129AB8;
		  /* 82129AB8h */ case   11:  		/* li R4, 0 */
		/* 82129AB8h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129AB8h case   11:*/		return 0x82129ABC;
		  /* 82129ABCh */ case   12:  		/* bl -388668 */
		/* 82129ABCh case   12:*/		regs.LR = 0x82129AC0; return 0x820CAC80;
		/* 82129ABCh case   12:*/		return 0x82129AC0;
		  /* 82129AC0h */ case   13:  		/* b 8 */
		/* 82129AC0h case   13:*/		return 0x82129AC8;
		/* 82129AC0h case   13:*/		return 0x82129AC4;
	}
	return 0x82129AC4;
} // Block from 82129A8Ch-82129AC4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82129AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129AC4);
		  /* 82129AC4h */ case    0:  		/* mr R3, R25 */
		/* 82129AC4h case    0:*/		regs.R3 = regs.R25;
		/* 82129AC4h case    0:*/		return 0x82129AC8;
	}
	return 0x82129AC8;
} // Block from 82129AC4h-82129AC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129AC8);
		  /* 82129AC8h */ case    0:  		/* stw R3, <#[R31 + 16]> */
		/* 82129AC8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82129AC8h case    0:*/		return 0x82129ACC;
		  /* 82129ACCh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82129ACCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82129ACCh case    1:*/		return 0x82129AD0;
		  /* 82129AD0h */ case    2:  		/* bc 12, CR6_EQ, -252 */
		/* 82129AD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821299D4;  }
		/* 82129AD0h case    2:*/		return 0x82129AD4;
		  /* 82129AD4h */ case    3:  		/* li R3, 72 */
		/* 82129AD4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82129AD4h case    3:*/		return 0x82129AD8;
		  /* 82129AD8h */ case    4:  		/* bl -395440 */
		/* 82129AD8h case    4:*/		regs.LR = 0x82129ADC; return 0x820C9228;
		/* 82129AD8h case    4:*/		return 0x82129ADC;
		  /* 82129ADCh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82129ADCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129ADCh case    5:*/		return 0x82129AE0;
		  /* 82129AE0h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82129AE0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82129AF8;  }
		/* 82129AE0h case    6:*/		return 0x82129AE4;
		  /* 82129AE4h */ case    7:  		/* li R5, 0 */
		/* 82129AE4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129AE4h case    7:*/		return 0x82129AE8;
	}
	return 0x82129AE8;
} // Block from 82129AC8h-82129AE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82129AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129AE8);
		  /* 82129AE8h */ case    0:  		/* mr R6, R30 */
		/* 82129AE8h case    0:*/		regs.R6 = regs.R30;
		/* 82129AE8h case    0:*/		return 0x82129AEC;
		  /* 82129AECh */ case    1:  		/* li R4, 0 */
		/* 82129AECh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82129AECh case    1:*/		return 0x82129AF0;
		  /* 82129AF0h */ case    2:  		/* bl -382744 */
		/* 82129AF0h case    2:*/		regs.LR = 0x82129AF4; return 0x820CC3D8;
		/* 82129AF0h case    2:*/		return 0x82129AF4;
		  /* 82129AF4h */ case    3:  		/* b 8 */
		/* 82129AF4h case    3:*/		return 0x82129AFC;
		/* 82129AF4h case    3:*/		return 0x82129AF8;
	}
	return 0x82129AF8;
} // Block from 82129AE8h-82129AF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82129AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129AF8);
		  /* 82129AF8h */ case    0:  		/* mr R3, R25 */
		/* 82129AF8h case    0:*/		regs.R3 = regs.R25;
		/* 82129AF8h case    0:*/		return 0x82129AFC;
	}
	return 0x82129AFC;
} // Block from 82129AF8h-82129AFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129AFC);
		  /* 82129AFCh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82129AFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82129AFCh case    0:*/		return 0x82129B00;
		  /* 82129B00h */ case    1:  		/* stw R3, <#[R31 + 32]> */
		/* 82129B00h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 82129B00h case    1:*/		return 0x82129B04;
		  /* 82129B04h */ case    2:  		/* bc 12, CR6_EQ, -304 */
		/* 82129B04h case    2:*/		if ( regs.CR[6].eq ) { return 0x821299D4;  }
		/* 82129B04h case    2:*/		return 0x82129B08;
		  /* 82129B08h */ case    3:  		/* li R3, 20 */
		/* 82129B08h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129B08h case    3:*/		return 0x82129B0C;
		  /* 82129B0Ch */ case    4:  		/* bl -395492 */
		/* 82129B0Ch case    4:*/		regs.LR = 0x82129B10; return 0x820C9228;
		/* 82129B0Ch case    4:*/		return 0x82129B10;
		  /* 82129B10h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82129B10h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129B10h case    5:*/		return 0x82129B14;
		  /* 82129B14h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82129B14h case    6:*/		if ( regs.CR[0].eq ) { return 0x82129B30;  }
		/* 82129B14h case    6:*/		return 0x82129B18;
		  /* 82129B18h */ case    7:  		/* lis R11, -32253 */
		/* 82129B18h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129B18h case    7:*/		return 0x82129B1C;
		  /* 82129B1Ch */ case    8:  		/* lwz R4, <#[R31 + 32]> */
		/* 82129B1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 82129B1Ch case    8:*/		return 0x82129B20;
		  /* 82129B20h */ case    9:  		/* li R5, 0 */
		/* 82129B20h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129B20h case    9:*/		return 0x82129B24;
		  /* 82129B24h */ case   10:  		/* addi R6, R11, 9184 */
		/* 82129B24h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82129B24h case   10:*/		return 0x82129B28;
		  /* 82129B28h */ case   11:  		/* bl -395064 */
		/* 82129B28h case   11:*/		regs.LR = 0x82129B2C; return 0x820C93F0;
		/* 82129B28h case   11:*/		return 0x82129B2C;
		  /* 82129B2Ch */ case   12:  		/* b 8 */
		/* 82129B2Ch case   12:*/		return 0x82129B34;
		/* 82129B2Ch case   12:*/		return 0x82129B30;
	}
	return 0x82129B30;
} // Block from 82129AFCh-82129B30h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82129B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129B30);
		  /* 82129B30h */ case    0:  		/* mr R3, R25 */
		/* 82129B30h case    0:*/		regs.R3 = regs.R25;
		/* 82129B30h case    0:*/		return 0x82129B34;
	}
	return 0x82129B34;
} // Block from 82129B30h-82129B34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82129B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129B34);
		  /* 82129B34h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82129B34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82129B34h case    0:*/		return 0x82129B38;
		  /* 82129B38h */ case    1:  		/* bc 4, CR6_EQ, -260 */
		/* 82129B38h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82129A34;  }
		/* 82129B38h case    1:*/		return 0x82129B3C;
		  /* 82129B3Ch */ case    2:  		/* b -360 */
		/* 82129B3Ch case    2:*/		return 0x821299D4;
		/* 82129B3Ch case    2:*/		return 0x82129B40;
		  /* 82129B40h */ case    3:  		/* mr R3, R28 */
		/* 82129B40h case    3:*/		regs.R3 = regs.R28;
		/* 82129B40h case    3:*/		return 0x82129B44;
		  /* 82129B44h */ case    4:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129B44h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129B44h case    4:*/		return 0x82129B48;
		  /* 82129B48h */ case    5:  		/* bl -48168 */
		/* 82129B48h case    5:*/		regs.LR = 0x82129B4C; return 0x8211DF20;
		/* 82129B48h case    5:*/		return 0x82129B4C;
		  /* 82129B4Ch */ case    6:  		/* b -7788 */
		/* 82129B4Ch case    6:*/		return 0x82127CE0;
		/* 82129B4Ch case    6:*/		return 0x82129B50;
		  /* 82129B50h */ case    7:  		/* mr R3, R28 */
		/* 82129B50h case    7:*/		regs.R3 = regs.R28;
		/* 82129B50h case    7:*/		return 0x82129B54;
		  /* 82129B54h */ case    8:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129B54h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129B54h case    8:*/		return 0x82129B58;
		  /* 82129B58h */ case    9:  		/* bl -47984 */
		/* 82129B58h case    9:*/		regs.LR = 0x82129B5C; return 0x8211DFE8;
		/* 82129B58h case    9:*/		return 0x82129B5C;
		  /* 82129B5Ch */ case   10:  		/* b -7804 */
		/* 82129B5Ch case   10:*/		return 0x82127CE0;
		/* 82129B5Ch case   10:*/		return 0x82129B60;
		  /* 82129B60h */ case   11:  		/* li R5, 0 */
		/* 82129B60h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82129B60h case   11:*/		return 0x82129B64;
		  /* 82129B64h */ case   12:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129B64h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129B64h case   12:*/		return 0x82129B68;
		  /* 82129B68h */ case   13:  		/* mr R3, R28 */
		/* 82129B68h case   13:*/		regs.R3 = regs.R28;
		/* 82129B68h case   13:*/		return 0x82129B6C;
		  /* 82129B6Ch */ case   14:  		/* bl -35676 */
		/* 82129B6Ch case   14:*/		regs.LR = 0x82129B70; return 0x82121010;
		/* 82129B6Ch case   14:*/		return 0x82129B70;
		  /* 82129B70h */ case   15:  		/* b -7824 */
		/* 82129B70h case   15:*/		return 0x82127CE0;
		/* 82129B70h case   15:*/		return 0x82129B74;
		  /* 82129B74h */ case   16:  		/* addi R4, R28, 40 */
		/* 82129B74h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x28);
		/* 82129B74h case   16:*/		return 0x82129B78;
		  /* 82129B78h */ case   17:  		/* mr R3, R28 */
		/* 82129B78h case   17:*/		regs.R3 = regs.R28;
		/* 82129B78h case   17:*/		return 0x82129B7C;
		  /* 82129B7Ch */ case   18:  		/* bl -47684 */
		/* 82129B7Ch case   18:*/		regs.LR = 0x82129B80; return 0x8211E138;
		/* 82129B7Ch case   18:*/		return 0x82129B80;
		  /* 82129B80h */ case   19:  		/* b -7840 */
		/* 82129B80h case   19:*/		return 0x82127CE0;
		/* 82129B80h case   19:*/		return 0x82129B84;
		  /* 82129B84h */ case   20:  		/* li R6, 1 */
		/* 82129B84h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82129B84h case   20:*/		return 0x82129B88;
		  /* 82129B88h */ case   21:  		/* li R7, 1 */
		/* 82129B88h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82129B88h case   21:*/		return 0x82129B8C;
		  /* 82129B8Ch */ case   22:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129B8Ch case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129B8Ch case   22:*/		return 0x82129B90;
		  /* 82129B90h */ case   23:  		/* mr R3, R28 */
		/* 82129B90h case   23:*/		regs.R3 = regs.R28;
		/* 82129B90h case   23:*/		return 0x82129B94;
		  /* 82129B94h */ case   24:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129B94h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129B94h case   24:*/		return 0x82129B98;
		  /* 82129B98h */ case   25:  		/* bl -35136 */
		/* 82129B98h case   25:*/		regs.LR = 0x82129B9C; return 0x82121258;
		/* 82129B98h case   25:*/		return 0x82129B9C;
		  /* 82129B9Ch */ case   26:  		/* b -7868 */
		/* 82129B9Ch case   26:*/		return 0x82127CE0;
		/* 82129B9Ch case   26:*/		return 0x82129BA0;
		  /* 82129BA0h */ case   27:  		/* li R6, 0 */
		/* 82129BA0h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129BA0h case   27:*/		return 0x82129BA4;
		  /* 82129BA4h */ case   28:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129BA4h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129BA4h case   28:*/		return 0x82129BA8;
		  /* 82129BA8h */ case   29:  		/* mr R3, R28 */
		/* 82129BA8h case   29:*/		regs.R3 = regs.R28;
		/* 82129BA8h case   29:*/		return 0x82129BAC;
		  /* 82129BACh */ case   30:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129BACh case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129BACh case   30:*/		return 0x82129BB0;
		  /* 82129BB0h */ case   31:  		/* bl -12600 */
		/* 82129BB0h case   31:*/		regs.LR = 0x82129BB4; return 0x82126A78;
		/* 82129BB0h case   31:*/		return 0x82129BB4;
		  /* 82129BB4h */ case   32:  		/* b -7892 */
		/* 82129BB4h case   32:*/		return 0x82127CE0;
		/* 82129BB4h case   32:*/		return 0x82129BB8;
		  /* 82129BB8h */ case   33:  		/* mr R3, R28 */
		/* 82129BB8h case   33:*/		regs.R3 = regs.R28;
		/* 82129BB8h case   33:*/		return 0x82129BBC;
		  /* 82129BBCh */ case   34:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129BBCh case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129BBCh case   34:*/		return 0x82129BC0;
		  /* 82129BC0h */ case   35:  		/* bl -61872 */
		/* 82129BC0h case   35:*/		regs.LR = 0x82129BC4; return 0x8211AA10;
		/* 82129BC0h case   35:*/		return 0x82129BC4;
		  /* 82129BC4h */ case   36:  		/* or. R31, R3, R3 */
		/* 82129BC4h case   36:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82129BC4h case   36:*/		return 0x82129BC8;
		  /* 82129BC8h */ case   37:  		/* b -7808 */
		/* 82129BC8h case   37:*/		return 0x82127D48;
		/* 82129BC8h case   37:*/		return 0x82129BCC;
		  /* 82129BCCh */ case   38:  		/* addi R5, R1, 128 */
		/* 82129BCCh case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82129BCCh case   38:*/		return 0x82129BD0;
		  /* 82129BD0h */ case   39:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129BD0h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129BD0h case   39:*/		return 0x82129BD4;
		  /* 82129BD4h */ case   40:  		/* mr R3, R28 */
		/* 82129BD4h case   40:*/		regs.R3 = regs.R28;
		/* 82129BD4h case   40:*/		return 0x82129BD8;
		  /* 82129BD8h */ case   41:  		/* bl 114104 */
		/* 82129BD8h case   41:*/		regs.LR = 0x82129BDC; return 0x82145990;
		/* 82129BD8h case   41:*/		return 0x82129BDC;
		  /* 82129BDCh */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 82129BDCh case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82129BDCh case   42:*/		return 0x82129BE0;
		  /* 82129BE0h */ case   43:  		/* bc 12, CR0_LT, -6412 */
		/* 82129BE0h case   43:*/		if ( regs.CR[0].lt ) { return 0x821282D4;  }
		/* 82129BE0h case   43:*/		return 0x82129BE4;
		  /* 82129BE4h */ case   44:  		/* li R3, 72 */
		/* 82129BE4h case   44:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82129BE4h case   44:*/		return 0x82129BE8;
		  /* 82129BE8h */ case   45:  		/* bl -395712 */
		/* 82129BE8h case   45:*/		regs.LR = 0x82129BEC; return 0x820C9228;
		/* 82129BE8h case   45:*/		return 0x82129BEC;
		  /* 82129BECh */ case   46:  		/* cmplwi CR0, R3, 0 */
		/* 82129BECh case   46:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129BECh case   46:*/		return 0x82129BF0;
		  /* 82129BF0h */ case   47:  		/* bc 12, CR0_EQ, -7944 */
		/* 82129BF0h case   47:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129BF0h case   47:*/		return 0x82129BF4;
		  /* 82129BF4h */ case   48:  		/* lwz R11, <#[R1 + 176]> */
		/* 82129BF4h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129BF4h case   48:*/		return 0x82129BF8;
		  /* 82129BF8h */ case   49:  		/* li R4, 2 */
		/* 82129BF8h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82129BF8h case   49:*/		return 0x82129BFC;
		  /* 82129BFCh */ case   50:  		/* lwz R5, <#[R1 + 128]> */
		/* 82129BFCh case   50:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 82129BFCh case   50:*/		return 0x82129C00;
		  /* 82129C00h */ case   51:  		/* addi R6, R11, 16 */
		/* 82129C00h case   51:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10);
		/* 82129C00h case   51:*/		return 0x82129C04;
		  /* 82129C04h */ case   52:  		/* bl -383020 */
		/* 82129C04h case   52:*/		regs.LR = 0x82129C08; return 0x820CC3D8;
		/* 82129C04h case   52:*/		return 0x82129C08;
		  /* 82129C08h */ case   53:  		/* b -7976 */
		/* 82129C08h case   53:*/		return 0x82127CE0;
		/* 82129C08h case   53:*/		return 0x82129C0C;
		  /* 82129C0Ch */ case   54:  		/* addi R5, R1, 128 */
		/* 82129C0Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82129C0Ch case   54:*/		return 0x82129C10;
		  /* 82129C10h */ case   55:  		/* lwz R4, <#[R1 + 180]> */
		/* 82129C10h case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129C10h case   55:*/		return 0x82129C14;
		  /* 82129C14h */ case   56:  		/* mr R3, R28 */
		/* 82129C14h case   56:*/		regs.R3 = regs.R28;
		/* 82129C14h case   56:*/		return 0x82129C18;
		  /* 82129C18h */ case   57:  		/* bl 114040 */
		/* 82129C18h case   57:*/		regs.LR = 0x82129C1C; return 0x82145990;
		/* 82129C18h case   57:*/		return 0x82129C1C;
		  /* 82129C1Ch */ case   58:  		/* cmpwi CR0, R3, 0 */
		/* 82129C1Ch case   58:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82129C1Ch case   58:*/		return 0x82129C20;
		  /* 82129C20h */ case   59:  		/* bc 12, CR0_LT, -6476 */
		/* 82129C20h case   59:*/		if ( regs.CR[0].lt ) { return 0x821282D4;  }
		/* 82129C20h case   59:*/		return 0x82129C24;
		  /* 82129C24h */ case   60:  		/* lwz R11, <#[R1 + 176]> */
		/* 82129C24h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129C24h case   60:*/		return 0x82129C28;
		  /* 82129C28h */ case   61:  		/* lwz R10, <#[R1 + 128]> */
		/* 82129C28h case   61:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 82129C28h case   61:*/		return 0x82129C2C;
		  /* 82129C2Ch */ case   62:  		/* lwz R9, <#[R11 + 24]> */
		/* 82129C2Ch case   62:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 82129C2Ch case   62:*/		return 0x82129C30;
		  /* 82129C30h */ case   63:  		/* or R10, R10, R9 */
		/* 82129C30h case   63:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82129C30h case   63:*/		return 0x82129C34;
		  /* 82129C34h */ case   64:  		/* stw R10, <#[R11 + 24]> */
		/* 82129C34h case   64:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 82129C34h case   64:*/		return 0x82129C38;
		  /* 82129C38h */ case   65:  		/* lwz R31, <#[R1 + 176]> */
		/* 82129C38h case   65:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129C38h case   65:*/		return 0x82129C3C;
		  /* 82129C3Ch */ case   66:  		/* b -6504 */
		/* 82129C3Ch case   66:*/		return 0x821282D4;
		/* 82129C3Ch case   66:*/		return 0x82129C40;
		  /* 82129C40h */ case   67:  		/* lwz R4, <#[R1 + 180]> */
		/* 82129C40h case   67:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129C40h case   67:*/		return 0x82129C44;
		  /* 82129C44h */ case   68:  		/* mr R3, R28 */
		/* 82129C44h case   68:*/		regs.R3 = regs.R28;
		/* 82129C44h case   68:*/		return 0x82129C48;
		  /* 82129C48h */ case   69:  		/* bl -45840 */
		/* 82129C48h case   69:*/		regs.LR = 0x82129C4C; return 0x8211E938;
		/* 82129C48h case   69:*/		return 0x82129C4C;
		  /* 82129C4Ch */ case   70:  		/* b -1396 */
		/* 82129C4Ch case   70:*/		return 0x821296D8;
		/* 82129C4Ch case   70:*/		return 0x82129C50;
		  /* 82129C50h */ case   71:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129C50h case   71:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129C50h case   71:*/		return 0x82129C54;
		  /* 82129C54h */ case   72:  		/* b -16 */
		/* 82129C54h case   72:*/		return 0x82129C44;
		/* 82129C54h case   72:*/		return 0x82129C58;
		  /* 82129C58h */ case   73:  		/* lwz R11, <#[R28]> */
		/* 82129C58h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82129C58h case   73:*/		return 0x82129C5C;
		  /* 82129C5Ch */ case   74:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82129C5Ch case   74:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82129C5Ch case   74:*/		return 0x82129C60;
		  /* 82129C60h */ case   75:  		/* bc 12, CR0_EQ, 16 */
		/* 82129C60h case   75:*/		if ( regs.CR[0].eq ) { return 0x82129C70;  }
		/* 82129C60h case   75:*/		return 0x82129C64;
		  /* 82129C64h */ case   76:  		/* lis R11, -32253 */
		/* 82129C64h case   76:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129C64h case   76:*/		return 0x82129C68;
		  /* 82129C68h */ case   77:  		/* addi R6, R11, 14672 */
		/* 82129C68h case   77:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3950);
		/* 82129C68h case   77:*/		return 0x82129C6C;
		  /* 82129C6Ch */ case   78:  		/* b -5784 */
		/* 82129C6Ch case   78:*/		return 0x821285D4;
		/* 82129C6Ch case   78:*/		return 0x82129C70;
	}
	return 0x82129C70;
} // Block from 82129B34h-82129C70h (79 instructions)

//////////////////////////////////////////////////////
// Block at 82129C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129C70);
		  /* 82129C70h */ case    0:  		/* li R8, 0 */
		/* 82129C70h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82129C70h case    0:*/		return 0x82129C74;
		  /* 82129C74h */ case    1:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129C74h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129C74h case    1:*/		return 0x82129C78;
		  /* 82129C78h */ case    2:  		/* li R7, 0 */
		/* 82129C78h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129C78h case    2:*/		return 0x82129C7C;
		  /* 82129C7Ch */ case    3:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129C7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129C7Ch case    3:*/		return 0x82129C80;
		  /* 82129C80h */ case    4:  		/* mr R3, R28 */
		/* 82129C80h case    4:*/		regs.R3 = regs.R28;
		/* 82129C80h case    4:*/		return 0x82129C84;
		  /* 82129C84h */ case    5:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129C84h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129C84h case    5:*/		return 0x82129C88;
		  /* 82129C88h */ case    6:  		/* bl -9640 */
		/* 82129C88h case    6:*/		regs.LR = 0x82129C8C; return 0x821276E0;
		/* 82129C88h case    6:*/		return 0x82129C8C;
		  /* 82129C8Ch */ case    7:  		/* b -1460 */
		/* 82129C8Ch case    7:*/		return 0x821296D8;
		/* 82129C8Ch case    7:*/		return 0x82129C90;
		  /* 82129C90h */ case    8:  		/* lwz R11, <#[R1 + 180]> */
		/* 82129C90h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129C90h case    8:*/		return 0x82129C94;
		  /* 82129C94h */ case    9:  		/* li R8, 0 */
		/* 82129C94h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82129C94h case    9:*/		return 0x82129C98;
		  /* 82129C98h */ case   10:  		/* lwz R6, <#[R1 + 188]> */
		/* 82129C98h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 82129C98h case   10:*/		return 0x82129C9C;
		  /* 82129C9Ch */ case   11:  		/* lwz R5, <#[R1 + 184]> */
		/* 82129C9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129C9Ch case   11:*/		return 0x82129CA0;
		  /* 82129CA0h */ case   12:  		/* lwz R7, <#[R11 + 24]> */
		/* 82129CA0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82129CA0h case   12:*/		return 0x82129CA4;
		  /* 82129CA4h */ case   13:  		/* b -36 */
		/* 82129CA4h case   13:*/		return 0x82129C80;
		/* 82129CA4h case   13:*/		return 0x82129CA8;
		  /* 82129CA8h */ case   14:  		/* lwz R11, <#[R28]> */
		/* 82129CA8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82129CA8h case   14:*/		return 0x82129CAC;
		  /* 82129CACh */ case   15:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82129CACh case   15:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82129CACh case   15:*/		return 0x82129CB0;
		  /* 82129CB0h */ case   16:  		/* bc 4, CR0_EQ, 20 */
		/* 82129CB0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82129CC4;  }
		/* 82129CB0h case   16:*/		return 0x82129CB4;
		  /* 82129CB4h */ case   17:  		/* mr R3, R28 */
		/* 82129CB4h case   17:*/		regs.R3 = regs.R28;
		/* 82129CB4h case   17:*/		return 0x82129CB8;
		  /* 82129CB8h */ case   18:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129CB8h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129CB8h case   18:*/		return 0x82129CBC;
		  /* 82129CBCh */ case   19:  		/* bl -45508 */
		/* 82129CBCh case   19:*/		regs.LR = 0x82129CC0; return 0x8211EAF8;
		/* 82129CBCh case   19:*/		return 0x82129CC0;
		  /* 82129CC0h */ case   20:  		/* b -8160 */
		/* 82129CC0h case   20:*/		return 0x82127CE0;
		/* 82129CC0h case   20:*/		return 0x82129CC4;
	}
	return 0x82129CC4;
} // Block from 82129C70h-82129CC4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82129CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129CC4);
		  /* 82129CC4h */ case    0:  		/* lis R11, -32253 */
		/* 82129CC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129CC4h case    0:*/		return 0x82129CC8;
		  /* 82129CC8h */ case    1:  		/* addi R6, R11, 14608 */
		/* 82129CC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3910);
		/* 82129CC8h case    1:*/		return 0x82129CCC;
		  /* 82129CCCh */ case    2:  		/* b -5880 */
		/* 82129CCCh case    2:*/		return 0x821285D4;
		/* 82129CCCh case    2:*/		return 0x82129CD0;
		  /* 82129CD0h */ case    3:  		/* li R8, 1 */
		/* 82129CD0h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82129CD0h case    3:*/		return 0x82129CD4;
		  /* 82129CD4h */ case    4:  		/* b -96 */
		/* 82129CD4h case    4:*/		return 0x82129C74;
		/* 82129CD4h case    4:*/		return 0x82129CD8;
		  /* 82129CD8h */ case    5:  		/* mr R3, R28 */
		/* 82129CD8h case    5:*/		regs.R3 = regs.R28;
		/* 82129CD8h case    5:*/		return 0x82129CDC;
		  /* 82129CDCh */ case    6:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129CDCh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129CDCh case    6:*/		return 0x82129CE0;
		  /* 82129CE0h */ case    7:  		/* bl -45224 */
		/* 82129CE0h case    7:*/		regs.LR = 0x82129CE4; return 0x8211EC38;
		/* 82129CE0h case    7:*/		return 0x82129CE4;
		  /* 82129CE4h */ case    8:  		/* b -8196 */
		/* 82129CE4h case    8:*/		return 0x82127CE0;
		/* 82129CE4h case    8:*/		return 0x82129CE8;
		  /* 82129CE8h */ case    9:  		/* mr R3, R28 */
		/* 82129CE8h case    9:*/		regs.R3 = regs.R28;
		/* 82129CE8h case    9:*/		return 0x82129CEC;
		  /* 82129CECh */ case   10:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129CECh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129CECh case   10:*/		return 0x82129CF0;
		  /* 82129CF0h */ case   11:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129CF0h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129CF0h case   11:*/		return 0x82129CF4;
		  /* 82129CF4h */ case   12:  		/* bl -33132 */
		/* 82129CF4h case   12:*/		regs.LR = 0x82129CF8; return 0x82121B88;
		/* 82129CF4h case   12:*/		return 0x82129CF8;
		  /* 82129CF8h */ case   13:  		/* b -8216 */
		/* 82129CF8h case   13:*/		return 0x82127CE0;
		/* 82129CF8h case   13:*/		return 0x82129CFC;
		  /* 82129CFCh */ case   14:  		/* mr R3, R28 */
		/* 82129CFCh case   14:*/		regs.R3 = regs.R28;
		/* 82129CFCh case   14:*/		return 0x82129D00;
		  /* 82129D00h */ case   15:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129D00h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129D00h case   15:*/		return 0x82129D04;
		  /* 82129D04h */ case   16:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129D04h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129D04h case   16:*/		return 0x82129D08;
		  /* 82129D08h */ case   17:  		/* bl -47448 */
		/* 82129D08h case   17:*/		regs.LR = 0x82129D0C; return 0x8211E3B0;
		/* 82129D08h case   17:*/		return 0x82129D0C;
		  /* 82129D0Ch */ case   18:  		/* b -8236 */
		/* 82129D0Ch case   18:*/		return 0x82127CE0;
		/* 82129D0Ch case   18:*/		return 0x82129D10;
		  /* 82129D10h */ case   19:  		/* li R4, 45 */
		/* 82129D10h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 82129D10h case   19:*/		return 0x82129D14;
		  /* 82129D14h */ case   20:  		/* li R6, 0 */
		/* 82129D14h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129D14h case   20:*/		return 0x82129D18;
		  /* 82129D18h */ case   21:  		/* lwz R5, <#[R1 + 176]> */
		/* 82129D18h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129D18h case   21:*/		return 0x82129D1C;
		  /* 82129D1Ch */ case   22:  		/* li R7, 1 */
		/* 82129D1Ch case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82129D1Ch case   22:*/		return 0x82129D20;
		  /* 82129D20h */ case   23:  		/* li R8, 0 */
		/* 82129D20h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82129D20h case   23:*/		return 0x82129D24;
		  /* 82129D24h */ case   24:  		/* mr R3, R28 */
		/* 82129D24h case   24:*/		regs.R3 = regs.R28;
		/* 82129D24h case   24:*/		return 0x82129D28;
		  /* 82129D28h */ case   25:  		/* bl -32472 */
		/* 82129D28h case   25:*/		regs.LR = 0x82129D2C; return 0x82121E50;
		/* 82129D28h case   25:*/		return 0x82129D2C;
		  /* 82129D2Ch */ case   26:  		/* b -8268 */
		/* 82129D2Ch case   26:*/		return 0x82127CE0;
		/* 82129D2Ch case   26:*/		return 0x82129D30;
		  /* 82129D30h */ case   27:  		/* li R4, 46 */
		/* 82129D30h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 82129D30h case   27:*/		return 0x82129D34;
		  /* 82129D34h */ case   28:  		/* b -32 */
		/* 82129D34h case   28:*/		return 0x82129D14;
		/* 82129D34h case   28:*/		return 0x82129D38;
		  /* 82129D38h */ case   29:  		/* mr R3, R28 */
		/* 82129D38h case   29:*/		regs.R3 = regs.R28;
		/* 82129D38h case   29:*/		return 0x82129D3C;
		  /* 82129D3Ch */ case   30:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129D3Ch case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129D3Ch case   30:*/		return 0x82129D40;
		  /* 82129D40h */ case   31:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129D40h case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129D40h case   31:*/		return 0x82129D44;
		  /* 82129D44h */ case   32:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129D44h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129D44h case   32:*/		return 0x82129D48;
		  /* 82129D48h */ case   33:  		/* bl -11392 */
		/* 82129D48h case   33:*/		regs.LR = 0x82129D4C; return 0x821270C8;
		/* 82129D48h case   33:*/		return 0x82129D4C;
		  /* 82129D4Ch */ case   34:  		/* b -8300 */
		/* 82129D4Ch case   34:*/		return 0x82127CE0;
		/* 82129D4Ch case   34:*/		return 0x82129D50;
		  /* 82129D50h */ case   35:  		/* li R4, 2 */
		/* 82129D50h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82129D50h case   35:*/		return 0x82129D54;
		  /* 82129D54h */ case   36:  		/* b -64 */
		/* 82129D54h case   36:*/		return 0x82129D14;
		/* 82129D54h case   36:*/		return 0x82129D58;
		  /* 82129D58h */ case   37:  		/* li R4, 3 */
		/* 82129D58h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82129D58h case   37:*/		return 0x82129D5C;
		  /* 82129D5Ch */ case   38:  		/* b -72 */
		/* 82129D5Ch case   38:*/		return 0x82129D14;
		/* 82129D5Ch case   38:*/		return 0x82129D60;
		  /* 82129D60h */ case   39:  		/* li R4, 4 */
		/* 82129D60h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82129D60h case   39:*/		return 0x82129D64;
		  /* 82129D64h */ case   40:  		/* b -80 */
		/* 82129D64h case   40:*/		return 0x82129D14;
		/* 82129D64h case   40:*/		return 0x82129D68;
		  /* 82129D68h */ case   41:  		/* li R4, 5 */
		/* 82129D68h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 82129D68h case   41:*/		return 0x82129D6C;
		  /* 82129D6Ch */ case   42:  		/* b -88 */
		/* 82129D6Ch case   42:*/		return 0x82129D14;
		/* 82129D6Ch case   42:*/		return 0x82129D70;
		  /* 82129D70h */ case   43:  		/* li R4, 6 */
		/* 82129D70h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 82129D70h case   43:*/		return 0x82129D74;
		  /* 82129D74h */ case   44:  		/* b -96 */
		/* 82129D74h case   44:*/		return 0x82129D14;
		/* 82129D74h case   44:*/		return 0x82129D78;
		  /* 82129D78h */ case   45:  		/* li R4, 7 */
		/* 82129D78h case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 82129D78h case   45:*/		return 0x82129D7C;
		  /* 82129D7Ch */ case   46:  		/* b -104 */
		/* 82129D7Ch case   46:*/		return 0x82129D14;
		/* 82129D7Ch case   46:*/		return 0x82129D80;
		  /* 82129D80h */ case   47:  		/* li R6, 0 */
		/* 82129D80h case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82129D80h case   47:*/		return 0x82129D84;
		  /* 82129D84h */ case   48:  		/* b -508 */
		/* 82129D84h case   48:*/		return 0x82129B88;
		/* 82129D84h case   48:*/		return 0x82129D88;
		  /* 82129D88h */ case   49:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129D88h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129D88h case   49:*/		return 0x82129D8C;
		  /* 82129D8Ch */ case   50:  		/* li R4, 8 */
		/* 82129D8Ch case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82129D8Ch case   50:*/		return 0x82129D90;
		  /* 82129D90h */ case   51:  		/* b -120 */
		/* 82129D90h case   51:*/		return 0x82129D18;
		/* 82129D90h case   51:*/		return 0x82129D94;
		  /* 82129D94h */ case   52:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129D94h case   52:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129D94h case   52:*/		return 0x82129D98;
		  /* 82129D98h */ case   53:  		/* li R4, 9 */
		/* 82129D98h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 82129D98h case   53:*/		return 0x82129D9C;
		  /* 82129D9Ch */ case   54:  		/* b -132 */
		/* 82129D9Ch case   54:*/		return 0x82129D18;
		/* 82129D9Ch case   54:*/		return 0x82129DA0;
		  /* 82129DA0h */ case   55:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DA0h case   55:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DA0h case   55:*/		return 0x82129DA4;
		  /* 82129DA4h */ case   56:  		/* li R4, 10 */
		/* 82129DA4h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 82129DA4h case   56:*/		return 0x82129DA8;
		  /* 82129DA8h */ case   57:  		/* b -144 */
		/* 82129DA8h case   57:*/		return 0x82129D18;
		/* 82129DA8h case   57:*/		return 0x82129DAC;
		  /* 82129DACh */ case   58:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DACh case   58:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DACh case   58:*/		return 0x82129DB0;
		  /* 82129DB0h */ case   59:  		/* li R4, 11 */
		/* 82129DB0h case   59:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 82129DB0h case   59:*/		return 0x82129DB4;
		  /* 82129DB4h */ case   60:  		/* b -156 */
		/* 82129DB4h case   60:*/		return 0x82129D18;
		/* 82129DB4h case   60:*/		return 0x82129DB8;
		  /* 82129DB8h */ case   61:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DB8h case   61:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DB8h case   61:*/		return 0x82129DBC;
		  /* 82129DBCh */ case   62:  		/* li R4, 12 */
		/* 82129DBCh case   62:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 82129DBCh case   62:*/		return 0x82129DC0;
		  /* 82129DC0h */ case   63:  		/* b -168 */
		/* 82129DC0h case   63:*/		return 0x82129D18;
		/* 82129DC0h case   63:*/		return 0x82129DC4;
		  /* 82129DC4h */ case   64:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DC4h case   64:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DC4h case   64:*/		return 0x82129DC8;
		  /* 82129DC8h */ case   65:  		/* li R4, 13 */
		/* 82129DC8h case   65:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 82129DC8h case   65:*/		return 0x82129DCC;
		  /* 82129DCCh */ case   66:  		/* b -180 */
		/* 82129DCCh case   66:*/		return 0x82129D18;
		/* 82129DCCh case   66:*/		return 0x82129DD0;
		  /* 82129DD0h */ case   67:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DD0h case   67:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DD0h case   67:*/		return 0x82129DD4;
		  /* 82129DD4h */ case   68:  		/* li R4, 14 */
		/* 82129DD4h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 82129DD4h case   68:*/		return 0x82129DD8;
		  /* 82129DD8h */ case   69:  		/* b -192 */
		/* 82129DD8h case   69:*/		return 0x82129D18;
		/* 82129DD8h case   69:*/		return 0x82129DDC;
		  /* 82129DDCh */ case   70:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DDCh case   70:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DDCh case   70:*/		return 0x82129DE0;
		  /* 82129DE0h */ case   71:  		/* li R4, 15 */
		/* 82129DE0h case   71:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 82129DE0h case   71:*/		return 0x82129DE4;
		  /* 82129DE4h */ case   72:  		/* b -204 */
		/* 82129DE4h case   72:*/		return 0x82129D18;
		/* 82129DE4h case   72:*/		return 0x82129DE8;
		  /* 82129DE8h */ case   73:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DE8h case   73:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DE8h case   73:*/		return 0x82129DEC;
		  /* 82129DECh */ case   74:  		/* li R4, 16 */
		/* 82129DECh case   74:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82129DECh case   74:*/		return 0x82129DF0;
		  /* 82129DF0h */ case   75:  		/* b -216 */
		/* 82129DF0h case   75:*/		return 0x82129D18;
		/* 82129DF0h case   75:*/		return 0x82129DF4;
		  /* 82129DF4h */ case   76:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129DF4h case   76:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129DF4h case   76:*/		return 0x82129DF8;
		  /* 82129DF8h */ case   77:  		/* li R4, 17 */
		/* 82129DF8h case   77:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 82129DF8h case   77:*/		return 0x82129DFC;
		  /* 82129DFCh */ case   78:  		/* b -228 */
		/* 82129DFCh case   78:*/		return 0x82129D18;
		/* 82129DFCh case   78:*/		return 0x82129E00;
		  /* 82129E00h */ case   79:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E00h case   79:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E00h case   79:*/		return 0x82129E04;
		  /* 82129E04h */ case   80:  		/* li R4, 18 */
		/* 82129E04h case   80:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 82129E04h case   80:*/		return 0x82129E08;
		  /* 82129E08h */ case   81:  		/* b -240 */
		/* 82129E08h case   81:*/		return 0x82129D18;
		/* 82129E08h case   81:*/		return 0x82129E0C;
		  /* 82129E0Ch */ case   82:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E0Ch case   82:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E0Ch case   82:*/		return 0x82129E10;
		  /* 82129E10h */ case   83:  		/* li R4, 19 */
		/* 82129E10h case   83:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 82129E10h case   83:*/		return 0x82129E14;
		  /* 82129E14h */ case   84:  		/* b -252 */
		/* 82129E14h case   84:*/		return 0x82129D18;
		/* 82129E14h case   84:*/		return 0x82129E18;
		  /* 82129E18h */ case   85:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E18h case   85:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E18h case   85:*/		return 0x82129E1C;
		  /* 82129E1Ch */ case   86:  		/* li R4, 20 */
		/* 82129E1Ch case   86:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82129E1Ch case   86:*/		return 0x82129E20;
		  /* 82129E20h */ case   87:  		/* b -264 */
		/* 82129E20h case   87:*/		return 0x82129D18;
		/* 82129E20h case   87:*/		return 0x82129E24;
		  /* 82129E24h */ case   88:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E24h case   88:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E24h case   88:*/		return 0x82129E28;
		  /* 82129E28h */ case   89:  		/* li R4, 21 */
		/* 82129E28h case   89:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 82129E28h case   89:*/		return 0x82129E2C;
		  /* 82129E2Ch */ case   90:  		/* b -276 */
		/* 82129E2Ch case   90:*/		return 0x82129D18;
		/* 82129E2Ch case   90:*/		return 0x82129E30;
		  /* 82129E30h */ case   91:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E30h case   91:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E30h case   91:*/		return 0x82129E34;
		  /* 82129E34h */ case   92:  		/* li R4, 22 */
		/* 82129E34h case   92:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 82129E34h case   92:*/		return 0x82129E38;
		  /* 82129E38h */ case   93:  		/* b -288 */
		/* 82129E38h case   93:*/		return 0x82129D18;
		/* 82129E38h case   93:*/		return 0x82129E3C;
		  /* 82129E3Ch */ case   94:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E3Ch case   94:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E3Ch case   94:*/		return 0x82129E40;
		  /* 82129E40h */ case   95:  		/* li R4, 23 */
		/* 82129E40h case   95:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82129E40h case   95:*/		return 0x82129E44;
		  /* 82129E44h */ case   96:  		/* b -300 */
		/* 82129E44h case   96:*/		return 0x82129D18;
		/* 82129E44h case   96:*/		return 0x82129E48;
		  /* 82129E48h */ case   97:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E48h case   97:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E48h case   97:*/		return 0x82129E4C;
		  /* 82129E4Ch */ case   98:  		/* li R4, 24 */
		/* 82129E4Ch case   98:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 82129E4Ch case   98:*/		return 0x82129E50;
		  /* 82129E50h */ case   99:  		/* b -312 */
		/* 82129E50h case   99:*/		return 0x82129D18;
		/* 82129E50h case   99:*/		return 0x82129E54;
		  /* 82129E54h */ case  100:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E54h case  100:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E54h case  100:*/		return 0x82129E58;
		  /* 82129E58h */ case  101:  		/* li R4, 25 */
		/* 82129E58h case  101:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 82129E58h case  101:*/		return 0x82129E5C;
		  /* 82129E5Ch */ case  102:  		/* b -324 */
		/* 82129E5Ch case  102:*/		return 0x82129D18;
		/* 82129E5Ch case  102:*/		return 0x82129E60;
		  /* 82129E60h */ case  103:  		/* mr R3, R28 */
		/* 82129E60h case  103:*/		regs.R3 = regs.R28;
		/* 82129E60h case  103:*/		return 0x82129E64;
		  /* 82129E64h */ case  104:  		/* lwz R6, <#[R1 + 184]> */
		/* 82129E64h case  104:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 82129E64h case  104:*/		return 0x82129E68;
		  /* 82129E68h */ case  105:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129E68h case  105:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E68h case  105:*/		return 0x82129E6C;
		  /* 82129E6Ch */ case  106:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129E6Ch case  106:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129E6Ch case  106:*/		return 0x82129E70;
		  /* 82129E70h */ case  107:  		/* bl -35072 */
		/* 82129E70h case  107:*/		regs.LR = 0x82129E74; return 0x82121570;
		/* 82129E70h case  107:*/		return 0x82129E74;
		  /* 82129E74h */ case  108:  		/* b -8596 */
		/* 82129E74h case  108:*/		return 0x82127CE0;
		/* 82129E74h case  108:*/		return 0x82129E78;
		  /* 82129E78h */ case  109:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E78h case  109:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E78h case  109:*/		return 0x82129E7C;
		  /* 82129E7Ch */ case  110:  		/* li R4, 27 */
		/* 82129E7Ch case  110:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82129E7Ch case  110:*/		return 0x82129E80;
		  /* 82129E80h */ case  111:  		/* b -360 */
		/* 82129E80h case  111:*/		return 0x82129D18;
		/* 82129E80h case  111:*/		return 0x82129E84;
		  /* 82129E84h */ case  112:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E84h case  112:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E84h case  112:*/		return 0x82129E88;
		  /* 82129E88h */ case  113:  		/* li R4, 35 */
		/* 82129E88h case  113:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 82129E88h case  113:*/		return 0x82129E8C;
		  /* 82129E8Ch */ case  114:  		/* b -372 */
		/* 82129E8Ch case  114:*/		return 0x82129D18;
		/* 82129E8Ch case  114:*/		return 0x82129E90;
		  /* 82129E90h */ case  115:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E90h case  115:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E90h case  115:*/		return 0x82129E94;
		  /* 82129E94h */ case  116:  		/* li R4, 36 */
		/* 82129E94h case  116:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 82129E94h case  116:*/		return 0x82129E98;
		  /* 82129E98h */ case  117:  		/* b -384 */
		/* 82129E98h case  117:*/		return 0x82129D18;
		/* 82129E98h case  117:*/		return 0x82129E9C;
		  /* 82129E9Ch */ case  118:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129E9Ch case  118:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129E9Ch case  118:*/		return 0x82129EA0;
		  /* 82129EA0h */ case  119:  		/* li R4, 37 */
		/* 82129EA0h case  119:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 82129EA0h case  119:*/		return 0x82129EA4;
		  /* 82129EA4h */ case  120:  		/* b -396 */
		/* 82129EA4h case  120:*/		return 0x82129D18;
		/* 82129EA4h case  120:*/		return 0x82129EA8;
		  /* 82129EA8h */ case  121:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129EA8h case  121:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129EA8h case  121:*/		return 0x82129EAC;
		  /* 82129EACh */ case  122:  		/* li R4, 38 */
		/* 82129EACh case  122:*/		cpu::op::li<0>(regs,&regs.R4,0x26);
		/* 82129EACh case  122:*/		return 0x82129EB0;
		  /* 82129EB0h */ case  123:  		/* b -408 */
		/* 82129EB0h case  123:*/		return 0x82129D18;
		/* 82129EB0h case  123:*/		return 0x82129EB4;
		  /* 82129EB4h */ case  124:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129EB4h case  124:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129EB4h case  124:*/		return 0x82129EB8;
		  /* 82129EB8h */ case  125:  		/* li R4, 39 */
		/* 82129EB8h case  125:*/		cpu::op::li<0>(regs,&regs.R4,0x27);
		/* 82129EB8h case  125:*/		return 0x82129EBC;
		  /* 82129EBCh */ case  126:  		/* b -420 */
		/* 82129EBCh case  126:*/		return 0x82129D18;
		/* 82129EBCh case  126:*/		return 0x82129EC0;
		  /* 82129EC0h */ case  127:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129EC0h case  127:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129EC0h case  127:*/		return 0x82129EC4;
		  /* 82129EC4h */ case  128:  		/* li R4, 40 */
		/* 82129EC4h case  128:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 82129EC4h case  128:*/		return 0x82129EC8;
		  /* 82129EC8h */ case  129:  		/* b -432 */
		/* 82129EC8h case  129:*/		return 0x82129D18;
		/* 82129EC8h case  129:*/		return 0x82129ECC;
		  /* 82129ECCh */ case  130:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129ECCh case  130:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129ECCh case  130:*/		return 0x82129ED0;
		  /* 82129ED0h */ case  131:  		/* li R4, 41 */
		/* 82129ED0h case  131:*/		cpu::op::li<0>(regs,&regs.R4,0x29);
		/* 82129ED0h case  131:*/		return 0x82129ED4;
		  /* 82129ED4h */ case  132:  		/* b -444 */
		/* 82129ED4h case  132:*/		return 0x82129D18;
		/* 82129ED4h case  132:*/		return 0x82129ED8;
		  /* 82129ED8h */ case  133:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129ED8h case  133:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129ED8h case  133:*/		return 0x82129EDC;
		  /* 82129EDCh */ case  134:  		/* li R4, 42 */
		/* 82129EDCh case  134:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 82129EDCh case  134:*/		return 0x82129EE0;
		  /* 82129EE0h */ case  135:  		/* b -456 */
		/* 82129EE0h case  135:*/		return 0x82129D18;
		/* 82129EE0h case  135:*/		return 0x82129EE4;
		  /* 82129EE4h */ case  136:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129EE4h case  136:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129EE4h case  136:*/		return 0x82129EE8;
		  /* 82129EE8h */ case  137:  		/* li R4, 43 */
		/* 82129EE8h case  137:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 82129EE8h case  137:*/		return 0x82129EEC;
		  /* 82129EECh */ case  138:  		/* b -468 */
		/* 82129EECh case  138:*/		return 0x82129D18;
		/* 82129EECh case  138:*/		return 0x82129EF0;
		  /* 82129EF0h */ case  139:  		/* lwz R6, <#[R1 + 180]> */
		/* 82129EF0h case  139:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129EF0h case  139:*/		return 0x82129EF4;
		  /* 82129EF4h */ case  140:  		/* li R4, 44 */
		/* 82129EF4h case  140:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82129EF4h case  140:*/		return 0x82129EF8;
		  /* 82129EF8h */ case  141:  		/* b -480 */
		/* 82129EF8h case  141:*/		return 0x82129D18;
		/* 82129EF8h case  141:*/		return 0x82129EFC;
		  /* 82129EFCh */ case  142:  		/* li R3, 20 */
		/* 82129EFCh case  142:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129EFCh case  142:*/		return 0x82129F00;
		  /* 82129F00h */ case  143:  		/* bl -396504 */
		/* 82129F00h case  143:*/		regs.LR = 0x82129F04; return 0x820C9228;
		/* 82129F00h case  143:*/		return 0x82129F04;
		  /* 82129F04h */ case  144:  		/* cmplwi CR0, R3, 0 */
		/* 82129F04h case  144:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129F04h case  144:*/		return 0x82129F08;
		  /* 82129F08h */ case  145:  		/* bc 12, CR0_EQ, -8660 */
		/* 82129F08h case  145:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82129F08h case  145:*/		return 0x82129F0C;
		  /* 82129F0Ch */ case  146:  		/* lis R11, -32253 */
		/* 82129F0Ch case  146:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129F0Ch case  146:*/		return 0x82129F10;
		  /* 82129F10h */ case  147:  		/* addi R6, R11, 14592 */
		/* 82129F10h case  147:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3900);
		/* 82129F10h case  147:*/		return 0x82129F14;
		  /* 82129F14h */ case  148:  		/* b -7368 */
		/* 82129F14h case  148:*/		return 0x8212824C;
		/* 82129F14h case  148:*/		return 0x82129F18;
		  /* 82129F18h */ case  149:  		/* li R3, 20 */
		/* 82129F18h case  149:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129F18h case  149:*/		return 0x82129F1C;
		  /* 82129F1Ch */ case  150:  		/* bl -396532 */
		/* 82129F1Ch case  150:*/		regs.LR = 0x82129F20; return 0x820C9228;
		/* 82129F1Ch case  150:*/		return 0x82129F20;
		  /* 82129F20h */ case  151:  		/* cmplwi CR0, R3, 0 */
		/* 82129F20h case  151:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129F20h case  151:*/		return 0x82129F24;
		  /* 82129F24h */ case  152:  		/* bc 12, CR0_EQ, -1544 */
		/* 82129F24h case  152:*/		if ( regs.CR[0].eq ) { return 0x8212991C;  }
		/* 82129F24h case  152:*/		return 0x82129F28;
		  /* 82129F28h */ case  153:  		/* lis R11, -32253 */
		/* 82129F28h case  153:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129F28h case  153:*/		return 0x82129F2C;
		  /* 82129F2Ch */ case  154:  		/* addi R6, R11, 14592 */
		/* 82129F2Ch case  154:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3900);
		/* 82129F2Ch case  154:*/		return 0x82129F30;
		  /* 82129F30h */ case  155:  		/* b -1576 */
		/* 82129F30h case  155:*/		return 0x82129908;
		/* 82129F30h case  155:*/		return 0x82129F34;
		  /* 82129F34h */ case  156:  		/* li R3, 20 */
		/* 82129F34h case  156:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82129F34h case  156:*/		return 0x82129F38;
		  /* 82129F38h */ case  157:  		/* bl -396560 */
		/* 82129F38h case  157:*/		regs.LR = 0x82129F3C; return 0x820C9228;
		/* 82129F38h case  157:*/		return 0x82129F3C;
		  /* 82129F3Ch */ case  158:  		/* cmplwi CR0, R3, 0 */
		/* 82129F3Ch case  158:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129F3Ch case  158:*/		return 0x82129F40;
		  /* 82129F40h */ case  159:  		/* bc 12, CR0_EQ, -8716 */
		/* 82129F40h case  159:*/		if ( regs.CR[0].eq ) { return 0x82127D34;  }
		/* 82129F40h case  159:*/		return 0x82129F44;
		  /* 82129F44h */ case  160:  		/* lis R11, -32253 */
		/* 82129F44h case  160:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82129F44h case  160:*/		return 0x82129F48;
		  /* 82129F48h */ case  161:  		/* addi R6, R11, 9184 */
		/* 82129F48h case  161:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82129F48h case  161:*/		return 0x82129F4C;
		  /* 82129F4Ch */ case  162:  		/* b -7424 */
		/* 82129F4Ch case  162:*/		return 0x8212824C;
		/* 82129F4Ch case  162:*/		return 0x82129F50;
		  /* 82129F50h */ case  163:  		/* lwz R11, <#[R28 + 20]> */
		/* 82129F50h case  163:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82129F50h case  163:*/		return 0x82129F54;
		  /* 82129F54h */ case  164:  		/* cmplwi CR6, R11, 0 */
		/* 82129F54h case  164:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82129F54h case  164:*/		return 0x82129F58;
		  /* 82129F58h */ case  165:  		/* bc 12, CR6_EQ, 56 */
		/* 82129F58h case  165:*/		if ( regs.CR[6].eq ) { return 0x82129F90;  }
		/* 82129F58h case  165:*/		return 0x82129F5C;
		  /* 82129F5Ch */ case  166:  		/* lwz R11, <#[R11 + 16]> */
		/* 82129F5Ch case  166:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82129F5Ch case  166:*/		return 0x82129F60;
		  /* 82129F60h */ case  167:  		/* cmpwi CR6, R11, 8 */
		/* 82129F60h case  167:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82129F60h case  167:*/		return 0x82129F64;
		  /* 82129F64h */ case  168:  		/* bc 4, CR6_EQ, 44 */
		/* 82129F64h case  168:*/		if ( !regs.CR[6].eq ) { return 0x82129F90;  }
		/* 82129F64h case  168:*/		return 0x82129F68;
		  /* 82129F68h */ case  169:  		/* lwz R11, <#[R1 + 180]> */
		/* 82129F68h case  169:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129F68h case  169:*/		return 0x82129F6C;
		  /* 82129F6Ch */ case  170:  		/* cmplwi CR6, R11, 0 */
		/* 82129F6Ch case  170:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82129F6Ch case  170:*/		return 0x82129F70;
		  /* 82129F70h */ case  171:  		/* bc 4, CR6_EQ, 8 */
		/* 82129F70h case  171:*/		if ( !regs.CR[6].eq ) { return 0x82129F78;  }
		/* 82129F70h case  171:*/		return 0x82129F74;
		  /* 82129F74h */ case  172:  		/* lwz R11, <#[R1 + 176]> */
		/* 82129F74h case  172:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129F74h case  172:*/		return 0x82129F78;
	}
	return 0x82129F78;
} // Block from 82129CC4h-82129F78h (173 instructions)

//////////////////////////////////////////////////////
// Block at 82129F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129F78);
		  /* 82129F78h */ case    0:  		/* lis R10, -32253 */
		/* 82129F78h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82129F78h case    0:*/		return 0x82129F7C;
		  /* 82129F7Ch */ case    1:  		/* li R5, 3081 */
		/* 82129F7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xC09);
		/* 82129F7Ch case    1:*/		return 0x82129F80;
		  /* 82129F80h */ case    2:  		/* addi R6, R10, 14520 */
		/* 82129F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x38B8);
		/* 82129F80h case    2:*/		return 0x82129F84;
		  /* 82129F84h */ case    3:  		/* addi R4, R11, 48 */
		/* 82129F84h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x30);
		/* 82129F84h case    3:*/		return 0x82129F88;
		  /* 82129F88h */ case    4:  		/* mr R3, R28 */
		/* 82129F88h case    4:*/		regs.R3 = regs.R28;
		/* 82129F88h case    4:*/		return 0x82129F8C;
		  /* 82129F8Ch */ case    5:  		/* bl -67180 */
		/* 82129F8Ch case    5:*/		regs.LR = 0x82129F90; return 0x82119920;
		/* 82129F8Ch case    5:*/		return 0x82129F90;
	}
	return 0x82129F90;
} // Block from 82129F78h-82129F90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82129F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82129F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82129F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82129F90);
		  /* 82129F90h */ case    0:  		/* lwz R6, <#[R1 + 176]> */
		/* 82129F90h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129F90h case    0:*/		return 0x82129F94;
		  /* 82129F94h */ case    1:  		/* li R7, 0 */
		/* 82129F94h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82129F94h case    1:*/		return 0x82129F98;
		  /* 82129F98h */ case    2:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129F98h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129F98h case    2:*/		return 0x82129F9C;
		  /* 82129F9Ch */ case    3:  		/* li R4, 1 */
		/* 82129F9Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82129F9Ch case    3:*/		return 0x82129FA0;
		  /* 82129FA0h */ case    4:  		/* b -640 */
		/* 82129FA0h case    4:*/		return 0x82129D20;
		/* 82129FA0h case    4:*/		return 0x82129FA4;
		  /* 82129FA4h */ case    5:  		/* lwz R31, <#[R1 + 176]> */
		/* 82129FA4h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129FA4h case    5:*/		return 0x82129FA8;
		  /* 82129FA8h */ case    6:  		/* stw R25, <#[R1 + 176]> */
		/* 82129FA8h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129FA8h case    6:*/		return 0x82129FAC;
		  /* 82129FACh */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 82129FACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82129FACh case    7:*/		return 0x82129FB0;
		  /* 82129FB0h */ case    8:  		/* neg R11, R11 */
		/* 82129FB0h case    8:*/		cpu::op::neg<0>(regs,&regs.R11,regs.R11);
		/* 82129FB0h case    8:*/		return 0x82129FB4;
		  /* 82129FB4h */ case    9:  		/* stw R11, <#[R31 + 24]> */
		/* 82129FB4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82129FB4h case    9:*/		return 0x82129FB8;
		  /* 82129FB8h */ case   10:  		/* b -7396 */
		/* 82129FB8h case   10:*/		return 0x821282D4;
		/* 82129FB8h case   10:*/		return 0x82129FBC;
		  /* 82129FBCh */ case   11:  		/* lwz R31, <#[R1 + 176]> */
		/* 82129FBCh case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129FBCh case   11:*/		return 0x82129FC0;
		  /* 82129FC0h */ case   12:  		/* stw R25, <#[R1 + 176]> */
		/* 82129FC0h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129FC0h case   12:*/		return 0x82129FC4;
		  /* 82129FC4h */ case   13:  		/* lfd FR0, <#[R31 + 24]> */
		/* 82129FC4h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000018) );
		/* 82129FC4h case   13:*/		return 0x82129FC8;
		  /* 82129FC8h */ case   14:  		/* fneg FR0, FR0 */
		/* 82129FC8h case   14:*/		cpu::op::fneg<0>(regs,&regs.FR0,regs.FR0);
		/* 82129FC8h case   14:*/		return 0x82129FCC;
		  /* 82129FCCh */ case   15:  		/* stfd FR0, <#[R31 + 24]> */
		/* 82129FCCh case   15:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000018) );
		/* 82129FCCh case   15:*/		return 0x82129FD0;
		  /* 82129FD0h */ case   16:  		/* b -7420 */
		/* 82129FD0h case   16:*/		return 0x821282D4;
		/* 82129FD0h case   16:*/		return 0x82129FD4;
		  /* 82129FD4h */ case   17:  		/* mr R3, R28 */
		/* 82129FD4h case   17:*/		regs.R3 = regs.R28;
		/* 82129FD4h case   17:*/		return 0x82129FD8;
		  /* 82129FD8h */ case   18:  		/* lwz R5, <#[R1 + 180]> */
		/* 82129FD8h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 82129FD8h case   18:*/		return 0x82129FDC;
		  /* 82129FDCh */ case   19:  		/* lwz R4, <#[R1 + 176]> */
		/* 82129FDCh case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 82129FDCh case   19:*/		return 0x82129FE0;
		  /* 82129FE0h */ case   20:  		/* bl -57152 */
		/* 82129FE0h case   20:*/		regs.LR = 0x82129FE4; return 0x8211C0A0;
		/* 82129FE0h case   20:*/		return 0x82129FE4;
		  /* 82129FE4h */ case   21:  		/* b -2316 */
		/* 82129FE4h case   21:*/		return 0x821296D8;
		/* 82129FE4h case   21:*/		return 0x82129FE8;
		  /* 82129FE8h */ case   22:  		/* li R3, 56 */
		/* 82129FE8h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 82129FE8h case   22:*/		return 0x82129FEC;
		  /* 82129FECh */ case   23:  		/* bl -396740 */
		/* 82129FECh case   23:*/		regs.LR = 0x82129FF0; return 0x820C9228;
		/* 82129FECh case   23:*/		return 0x82129FF0;
		  /* 82129FF0h */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 82129FF0h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82129FF0h case   24:*/		return 0x82129FF4;
		  /* 82129FF4h */ case   25:  		/* bc 12, CR0_EQ, -8972 */
		/* 82129FF4h case   25:*/		if ( regs.CR[0].eq ) { return 0x82127CE8;  }
		/* 82129FF4h case   25:*/		return 0x82129FF8;
		  /* 82129FF8h */ case   26:  		/* addi R4, R28, 40 */
		/* 82129FF8h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x28);
		/* 82129FF8h case   26:*/		return 0x82129FFC;
		  /* 82129FFCh */ case   27:  		/* bl -395180 */
		/* 82129FFCh case   27:*/		regs.LR = 0x8212A000; return 0x820C9850;
		/* 82129FFCh case   27:*/		return 0x8212A000;
		  /* 8212A000h */ case   28:  		/* b -8992 */
		/* 8212A000h case   28:*/		return 0x82127CE0;
		/* 8212A000h case   28:*/		return 0x8212A004;
		  /* 8212A004h */ case   29:  		/* lwz R31, <#[R1 + 176]> */
		/* 8212A004h case   29:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212A004h case   29:*/		return 0x8212A008;
		  /* 8212A008h */ case   30:  		/* lwz R11, <#[R31 + 24]> */
		/* 8212A008h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8212A008h case   30:*/		return 0x8212A00C;
		  /* 8212A00Ch */ case   31:  		/* stw R25, <#[R1 + 176]> */
		/* 8212A00Ch case   31:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212A00Ch case   31:*/		return 0x8212A010;
		  /* 8212A010h */ case   32:  		/* stw R11, <#[R28 + 36]> */
		/* 8212A010h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8212A010h case   32:*/		return 0x8212A014;
		  /* 8212A014h */ case   33:  		/* b -7488 */
		/* 8212A014h case   33:*/		return 0x821282D4;
		/* 8212A014h case   33:*/		return 0x8212A018;
		  /* 8212A018h */ case   34:  		/* mr R3, R28 */
		/* 8212A018h case   34:*/		regs.R3 = regs.R28;
		/* 8212A018h case   34:*/		return 0x8212A01C;
		  /* 8212A01Ch */ case   35:  		/* lwz R5, <#[R1 + 180]> */
		/* 8212A01Ch case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B4) );
		/* 8212A01Ch case   35:*/		return 0x8212A020;
		  /* 8212A020h */ case   36:  		/* lwz R4, <#[R1 + 176]> */
		/* 8212A020h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 8212A020h case   36:*/		return 0x8212A024;
		  /* 8212A024h */ case   37:  		/* bl -56892 */
		/* 8212A024h case   37:*/		regs.LR = 0x8212A028; return 0x8211C1E8;
		/* 8212A024h case   37:*/		return 0x8212A028;
		  /* 8212A028h */ case   38:  		/* b -2384 */
		/* 8212A028h case   38:*/		return 0x821296D8;
		/* 8212A028h case   38:*/		return 0x8212A02C;
		  /* 8212A02Ch */ case   39:  		/* mr R3, R28 */
		/* 8212A02Ch case   39:*/		regs.R3 = regs.R28;
		/* 8212A02Ch case   39:*/		return 0x8212A030;
		  /* 8212A030h */ case   40:  		/* bl -70848 */
		/* 8212A030h case   40:*/		regs.LR = 0x8212A034; return 0x82118B70;
		/* 8212A030h case   40:*/		return 0x8212A034;
		  /* 8212A034h */ case   41:  		/* b -2396 */
		/* 8212A034h case   41:*/		return 0x821296D8;
		/* 8212A034h case   41:*/		return 0x8212A038;
		  /* 8212A038h */ case   42:  		/* li R4, 0 */
		/* 8212A038h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212A038h case   42:*/		return 0x8212A03C;
		  /* 8212A03Ch */ case   43:  		/* mr R3, R28 */
		/* 8212A03Ch case   43:*/		regs.R3 = regs.R28;
		/* 8212A03Ch case   43:*/		return 0x8212A040;
		  /* 8212A040h */ case   44:  		/* bl -9880 */
		/* 8212A040h case   44:*/		regs.LR = 0x8212A044; return 0x821279A8;
		/* 8212A040h case   44:*/		return 0x8212A044;
		  /* 8212A044h */ case   45:  		/* b -2412 */
		/* 8212A044h case   45:*/		return 0x821296D8;
		/* 8212A044h case   45:*/		return 0x8212A048;
		  /* 8212A048h */ case   46:  		/* li R4, 1 */
		/* 8212A048h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212A048h case   46:*/		return 0x8212A04C;
		  /* 8212A04Ch */ case   47:  		/* b -16 */
		/* 8212A04Ch case   47:*/		return 0x8212A03C;
		/* 8212A04Ch case   47:*/		return 0x8212A050;
	}
	return 0x8212A050;
} // Block from 82129F90h-8212A050h (48 instructions)

//////////////////////////////////////////////////////
// Block at 8212A050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A050);
		  /* 8212A050h */ case    0:  		/* lis R11, -32253 */
		/* 8212A050h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212A050h case    0:*/		return 0x8212A054;
		  /* 8212A054h */ case    1:  		/* li R5, 0 */
		/* 8212A054h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8212A054h case    1:*/		return 0x8212A058;
		  /* 8212A058h */ case    2:  		/* addi R6, R11, 14476 */
		/* 8212A058h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x388C);
		/* 8212A058h case    2:*/		return 0x8212A05C;
		  /* 8212A05Ch */ case    3:  		/* li R4, 0 */
		/* 8212A05Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212A05Ch case    3:*/		return 0x8212A060;
		  /* 8212A060h */ case    4:  		/* mr R3, R28 */
		/* 8212A060h case    4:*/		regs.R3 = regs.R28;
		/* 8212A060h case    4:*/		return 0x8212A064;
		  /* 8212A064h */ case    5:  		/* bl -67276 */
		/* 8212A064h case    5:*/		regs.LR = 0x8212A068; return 0x82119998;
		/* 8212A064h case    5:*/		return 0x8212A068;
		  /* 8212A068h */ case    6:  		/* b -7572 */
		/* 8212A068h case    6:*/		return 0x821282D4;
		/* 8212A068h case    6:*/		return 0x8212A06C;
	}
	return 0x8212A06C;
} // Block from 8212A050h-8212A06Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8212A06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A06C);
		  /* 8212A06Ch */ case    0:  		/* li R3, 20 */
		/* 8212A06Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8212A06Ch case    0:*/		return 0x8212A070;
		  /* 8212A070h */ case    1:  		/* bl -396872 */
		/* 8212A070h case    1:*/		regs.LR = 0x8212A074; return 0x820C9228;
		/* 8212A070h case    1:*/		return 0x8212A074;
		  /* 8212A074h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8212A074h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8212A074h case    2:*/		return 0x8212A078;
		  /* 8212A078h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8212A078h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212A094;  }
		/* 8212A078h case    3:*/		return 0x8212A07C;
		  /* 8212A07Ch */ case    4:  		/* lis R11, -32255 */
		/* 8212A07Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8212A07Ch case    4:*/		return 0x8212A080;
		  /* 8212A080h */ case    5:  		/* lwz R5, <#[R28 + 8]> */
		/* 8212A080h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 8212A080h case    5:*/		return 0x8212A084;
		  /* 8212A084h */ case    6:  		/* mr R4, R31 */
		/* 8212A084h case    6:*/		regs.R4 = regs.R31;
		/* 8212A084h case    6:*/		return 0x8212A088;
		  /* 8212A088h */ case    7:  		/* addi R6, R11, -10008 */
		/* 8212A088h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD8E8);
		/* 8212A088h case    7:*/		return 0x8212A08C;
		  /* 8212A08Ch */ case    8:  		/* bl -396444 */
		/* 8212A08Ch case    8:*/		regs.LR = 0x8212A090; return 0x820C93F0;
		/* 8212A08Ch case    8:*/		return 0x8212A090;
		  /* 8212A090h */ case    9:  		/* b 8 */
		/* 8212A090h case    9:*/		return 0x8212A098;
		/* 8212A090h case    9:*/		return 0x8212A094;
	}
	return 0x8212A094;
} // Block from 8212A06Ch-8212A094h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8212A094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A094);
		  /* 8212A094h */ case    0:  		/* mr R3, R25 */
		/* 8212A094h case    0:*/		regs.R3 = regs.R25;
		/* 8212A094h case    0:*/		return 0x8212A098;
	}
	return 0x8212A098;
} // Block from 8212A094h-8212A098h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212A098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A098);
		  /* 8212A098h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8212A098h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212A098h case    0:*/		return 0x8212A09C;
		  /* 8212A09Ch */ case    1:  		/* bc 4, CR6_EQ, -7576 */
		/* 8212A09Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82128304;  }
		/* 8212A09Ch case    1:*/		return 0x8212A0A0;
		  /* 8212A0A0h */ case    2:  		/* lis R11, -32255 */
		/* 8212A0A0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8212A0A0h case    2:*/		return 0x8212A0A4;
		  /* 8212A0A4h */ case    3:  		/* addi R6, R11, -10040 */
		/* 8212A0A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD8C8);
		/* 8212A0A4h case    3:*/		return 0x8212A0A8;
		  /* 8212A0A8h */ case    4:  		/* b -9228 */
		/* 8212A0A8h case    4:*/		return 0x82127C9C;
		/* 8212A0A8h case    4:*/		return 0x8212A0AC;
		  /* 8212A0ACh */ case    5:  		/* nop */
		/* 8212A0ACh case    5:*/		cpu::op::nop();
		/* 8212A0ACh case    5:*/		return 0x8212A0B0;
	}
	return 0x8212A0B0;
} // Block from 8212A098h-8212A0B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8212A0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A0B0);
		  /* 8212A0B0h */ case    0:  		/* mfspr R12, LR */
		/* 8212A0B0h case    0:*/		regs.R12 = regs.LR;
		/* 8212A0B0h case    0:*/		return 0x8212A0B4;
		  /* 8212A0B4h */ case    1:  		/* bl -626292 */
		/* 8212A0B4h case    1:*/		regs.LR = 0x8212A0B8; return 0x82091240;
		/* 8212A0B4h case    1:*/		return 0x8212A0B8;
		  /* 8212A0B8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8212A0B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8212A0B8h case    2:*/		return 0x8212A0BC;
		  /* 8212A0BCh */ case    3:  		/* addi R11, R3, 1032 */
		/* 8212A0BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x408);
		/* 8212A0BCh case    3:*/		return 0x8212A0C0;
		  /* 8212A0C0h */ case    4:  		/* li R24, 0 */
		/* 8212A0C0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8212A0C0h case    4:*/		return 0x8212A0C4;
		  /* 8212A0C4h */ case    5:  		/* stw R11, <#[R3 + 20]> */
		/* 8212A0C4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8212A0C4h case    5:*/		return 0x8212A0C8;
		  /* 8212A0C8h */ case    6:  		/* li R25, -1 */
		/* 8212A0C8h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0xFFFFFFFF);
		/* 8212A0C8h case    6:*/		return 0x8212A0CC;
		  /* 8212A0CCh */ case    7:  		/* addi R22, R3, 32 */
		/* 8212A0CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R3,0x20);
		/* 8212A0CCh case    7:*/		return 0x8212A0D0;
		  /* 8212A0D0h */ case    8:  		/* stw R24, <#[R3 + 4]> */
		/* 8212A0D0h case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		/* 8212A0D0h case    8:*/		return 0x8212A0D4;
		  /* 8212A0D4h */ case    9:  		/* lis R11, -32253 */
		/* 8212A0D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8212A0D4h case    9:*/		return 0x8212A0D8;
		  /* 8212A0D8h */ case   10:  		/* stw R24, <#[R3 + 8]> */
		/* 8212A0D8h case   10:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000008) );
		/* 8212A0D8h case   10:*/		return 0x8212A0DC;
		  /* 8212A0DCh */ case   11:  		/* lis R10, -32253 */
		/* 8212A0DCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8212A0DCh case   11:*/		return 0x8212A0E0;
		  /* 8212A0E0h */ case   12:  		/* stw R25, <#[R3 + 12]> */
		/* 8212A0E0h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x0000000C) );
		/* 8212A0E0h case   12:*/		return 0x8212A0E4;
		  /* 8212A0E4h */ case   13:  		/* lis R9, -32255 */
		/* 8212A0E4h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8212A0E4h case   13:*/		return 0x8212A0E8;
		  /* 8212A0E8h */ case   14:  		/* stw R22, <#[R3 + 16]> */
		/* 8212A0E8h case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000010) );
		/* 8212A0E8h case   14:*/		return 0x8212A0EC;
		  /* 8212A0ECh */ case   15:  		/* mr R31, R3 */
		/* 8212A0ECh case   15:*/		regs.R31 = regs.R3;
		/* 8212A0ECh case   15:*/		return 0x8212A0F0;
		  /* 8212A0F0h */ case   16:  		/* sth R24, <#[R3 + 32]> */
		/* 8212A0F0h case   16:*/		cpu::mem::store16( regs, regs.R24, (uint32)(regs.R3 + 0x00000020) );
		/* 8212A0F0h case   16:*/		return 0x8212A0F4;
		  /* 8212A0F4h */ case   17:  		/* mr R30, R24 */
		/* 8212A0F4h case   17:*/		regs.R30 = regs.R24;
		/* 8212A0F4h case   17:*/		return 0x8212A0F8;
		  /* 8212A0F8h */ case   18:  		/* addi R26, R11, -9920 */
		/* 8212A0F8h case   18:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFD940);
		/* 8212A0F8h case   18:*/		return 0x8212A0FC;
		  /* 8212A0FCh */ case   19:  		/* addi R27, R10, -28720 */
		/* 8212A0FCh case   19:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFF8FD0);
		/* 8212A0FCh case   19:*/		return 0x8212A100;
		  /* 8212A100h */ case   20:  		/* addi R23, R9, -10392 */
		/* 8212A100h case   20:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0xFFFFD768);
		/* 8212A100h case   20:*/		return 0x8212A104;
		  /* 8212A104h */ case   21:  		/* addi R11, R26, -20384 */
		/* 8212A104h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFB060);
		/* 8212A104h case   21:*/		return 0x8212A108;
		  /* 8212A108h */ case   22:  		/* rlwinm R29, R30, 1, 0, 30 */
		/* 8212A108h case   22:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R29,regs.R30);
		/* 8212A108h case   22:*/		return 0x8212A10C;
		  /* 8212A10Ch */ case   23:  		/* lhax R11, <#[R29 + R11]> */
		/* 8212A10Ch case   23:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8212A10Ch case   23:*/		return 0x8212A110;
		  /* 8212A110h */ case   24:  		/* cmpwi CR0, R11, 0 */
		/* 8212A110h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8212A110h case   24:*/		return 0x8212A114;
		  /* 8212A114h */ case   25:  		/* bc 4, CR0_EQ, 236 */
		/* 8212A114h case   25:*/		if ( !regs.CR[0].eq ) { return 0x8212A200;  }
		/* 8212A114h case   25:*/		return 0x8212A118;
		  /* 8212A118h */ case   26:  		/* lwz R11, <#[R31 + 12]> */
		/* 8212A118h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A118h case   26:*/		return 0x8212A11C;
		  /* 8212A11Ch */ case   27:  		/* cmpwi CR6, R11, 0 */
		/* 8212A11Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212A11Ch case   27:*/		return 0x8212A120;
		  /* 8212A120h */ case   28:  		/* bc 4, CR6_LT, 28 */
		/* 8212A120h case   28:*/		if ( !regs.CR[6].lt ) { return 0x8212A13C;  }
		/* 8212A120h case   28:*/		return 0x8212A124;
		  /* 8212A124h */ case   29:  		/* lwz R3, <#[R31 + 3032]> */
		/* 8212A124h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 8212A124h case   29:*/		return 0x8212A128;
		  /* 8212A128h */ case   30:  		/* bl -29240 */
		/* 8212A128h case   30:*/		regs.LR = 0x8212A12C; return 0x82122EF0;
		/* 8212A128h case   30:*/		return 0x8212A12C;
		  /* 8212A12Ch */ case   31:  		/* stw R3, <#[R31 + 12]> */
		/* 8212A12Ch case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A12Ch case   31:*/		return 0x8212A130;
		  /* 8212A130h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 8212A130h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8212A130h case   32:*/		return 0x8212A134;
		  /* 8212A134h */ case   33:  		/* bc 4, CR0_LT, 8 */
		/* 8212A134h case   33:*/		if ( !regs.CR[0].lt ) { return 0x8212A13C;  }
		/* 8212A134h case   33:*/		return 0x8212A138;
		  /* 8212A138h */ case   34:  		/* stw R24, <#[R31 + 12]> */
		/* 8212A138h case   34:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A138h case   34:*/		return 0x8212A13C;
	}
	return 0x8212A13C;
} // Block from 8212A0B0h-8212A13Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 8212A13Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A13C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A13C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A13C);
		  /* 8212A13Ch */ case    0:  		/* addi R11, R26, -18512 */
		/* 8212A13Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFB7B0);
		/* 8212A13Ch case    0:*/		return 0x8212A140;
		  /* 8212A140h */ case    1:  		/* lhax R11, <#[R29 + R11]> */
		/* 8212A140h case    1:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8212A140h case    1:*/		return 0x8212A144;
		  /* 8212A144h */ case    2:  		/* cmpwi CR0, R11, 0 */
		/* 8212A144h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8212A144h case    2:*/		return 0x8212A148;
		  /* 8212A148h */ case    3:  		/* bc 12, CR0_EQ, 124 */
		/* 8212A148h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212A1C4;  }
		/* 8212A148h case    3:*/		return 0x8212A14C;
		  /* 8212A14Ch */ case    4:  		/* lwz R9, <#[R31 + 12]> */
		/* 8212A14Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A14Ch case    4:*/		return 0x8212A150;
		  /* 8212A150h */ case    5:  		/* add. R11, R9, R11 */
		/* 8212A150h case    5:*/		cpu::op::add<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8212A150h case    5:*/		return 0x8212A154;
		  /* 8212A154h */ case    6:  		/* bc 12, CR0_LT, 112 */
		/* 8212A154h case    6:*/		if ( regs.CR[0].lt ) { return 0x8212A1C4;  }
		/* 8212A154h case    6:*/		return 0x8212A158;
		  /* 8212A158h */ case    7:  		/* cmpwi CR6, R11, 7525 */
		/* 8212A158h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00001D65);
		/* 8212A158h case    7:*/		return 0x8212A15C;
		  /* 8212A15Ch */ case    8:  		/* bc 12, CR6_GT, 104 */
		/* 8212A15Ch case    8:*/		if ( regs.CR[6].gt ) { return 0x8212A1C4;  }
		/* 8212A15Ch case    8:*/		return 0x8212A160;
		  /* 8212A160h */ case    9:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 8212A160h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 8212A160h case    9:*/		return 0x8212A164;
		  /* 8212A164h */ case   10:  		/* lhax R11, <#[R10 + R26]> */
		/* 8212A164h case   10:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 8212A164h case   10:*/		return 0x8212A168;
		  /* 8212A168h */ case   11:  		/* cmpw CR6, R11, R9 */
		/* 8212A168h case   11:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 8212A168h case   11:*/		return 0x8212A16C;
		  /* 8212A16Ch */ case   12:  		/* bc 4, CR6_EQ, 88 */
		/* 8212A16Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212A1C4;  }
		/* 8212A16Ch case   12:*/		return 0x8212A170;
		  /* 8212A170h */ case   13:  		/* lwz R11, <#[R31 + 16]> */
		/* 8212A170h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212A170h case   13:*/		return 0x8212A174;
		  /* 8212A174h */ case   14:  		/* addi R9, R31, 1030 */
		/* 8212A174h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x406);
		/* 8212A174h case   14:*/		return 0x8212A178;
		  /* 8212A178h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 8212A178h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8212A178h case   15:*/		return 0x8212A17C;
		  /* 8212A17Ch */ case   16:  		/* bc 4, CR6_LT, 5328 */
		/* 8212A17Ch case   16:*/		if ( !regs.CR[6].lt ) { return 0x8212B64C;  }
		/* 8212A17Ch case   16:*/		return 0x8212A180;
		  /* 8212A180h */ case   17:  		/* addi R9, R27, 3744 */
		/* 8212A180h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xEA0);
		/* 8212A180h case   17:*/		return 0x8212A184;
		  /* 8212A184h */ case   18:  		/* addi R11, R11, 2 */
		/* 8212A184h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8212A184h case   18:*/		return 0x8212A188;
		  /* 8212A188h */ case   19:  		/* lhax R30, <#[R10 + R9]> */
		/* 8212A188h case   19:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8212A188h case   19:*/		return 0x8212A18C;
		  /* 8212A18Ch */ case   20:  		/* stw R11, <#[R31 + 16]> */
		/* 8212A18Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8212A18Ch case   20:*/		return 0x8212A190;
		  /* 8212A190h */ case   21:  		/* sth R30, <#[R11]> */
		/* 8212A190h case   21:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8212A190h case   21:*/		return 0x8212A194;
		  /* 8212A194h */ case   22:  		/* lwz R10, <#[R31 + 28]> */
		/* 8212A194h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8212A194h case   22:*/		return 0x8212A198;
		  /* 8212A198h */ case   23:  		/* lwz R11, <#[R31 + 20]> */
		/* 8212A198h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212A198h case   23:*/		return 0x8212A19C;
		  /* 8212A19Ch */ case   24:  		/* addi R11, R11, 4 */
		/* 8212A19Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8212A19Ch case   24:*/		return 0x8212A1A0;
		  /* 8212A1A0h */ case   25:  		/* stw R11, <#[R31 + 20]> */
		/* 8212A1A0h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8212A1A0h case   25:*/		return 0x8212A1A4;
		  /* 8212A1A4h */ case   26:  		/* stw R10, <#[R11]> */
		/* 8212A1A4h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8212A1A4h case   26:*/		return 0x8212A1A8;
		  /* 8212A1A8h */ case   27:  		/* lwz R11, <#[R31 + 8]> */
		/* 8212A1A8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212A1A8h case   27:*/		return 0x8212A1AC;
		  /* 8212A1ACh */ case   28:  		/* cmpwi CR6, R11, 0 */
		/* 8212A1ACh case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8212A1ACh case   28:*/		return 0x8212A1B0;
		  /* 8212A1B0h */ case   29:  		/* stw R25, <#[R31 + 12]> */
		/* 8212A1B0h case   29:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A1B0h case   29:*/		return 0x8212A1B4;
		  /* 8212A1B4h */ case   30:  		/* bc 4, CR6_GT, -176 */
		/* 8212A1B4h case   30:*/		if ( !regs.CR[6].gt ) { return 0x8212A104;  }
		/* 8212A1B4h case   30:*/		return 0x8212A1B8;
		  /* 8212A1B8h */ case   31:  		/* addi R11, R11, -1 */
		/* 8212A1B8h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8212A1B8h case   31:*/		return 0x8212A1BC;
		  /* 8212A1BCh */ case   32:  		/* stw R11, <#[R31 + 8]> */
		/* 8212A1BCh case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8212A1BCh case   32:*/		return 0x8212A1C0;
		  /* 8212A1C0h */ case   33:  		/* b -188 */
		/* 8212A1C0h case   33:*/		return 0x8212A104;
		/* 8212A1C0h case   33:*/		return 0x8212A1C4;
	}
	return 0x8212A1C4;
} // Block from 8212A13Ch-8212A1C4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8212A1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A1C4);
		  /* 8212A1C4h */ case    0:  		/* addi R11, R27, 1872 */
		/* 8212A1C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x750);
		/* 8212A1C4h case    0:*/		return 0x8212A1C8;
		  /* 8212A1C8h */ case    1:  		/* lhax R11, <#[R29 + R11]> */
		/* 8212A1C8h case    1:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8212A1C8h case    1:*/		return 0x8212A1CC;
		  /* 8212A1CCh */ case    2:  		/* cmpwi CR0, R11, 0 */
		/* 8212A1CCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8212A1CCh case    2:*/		return 0x8212A1D0;
		  /* 8212A1D0h */ case    3:  		/* bc 12, CR0_EQ, 5036 */
		/* 8212A1D0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8212B57C;  }
		/* 8212A1D0h case    3:*/		return 0x8212A1D4;
		  /* 8212A1D4h */ case    4:  		/* lwz R10, <#[R31 + 12]> */
		/* 8212A1D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8212A1D4h case    4:*/		return 0x8212A1D8;
		  /* 8212A1D8h */ case    5:  		/* add. R11, R10, R11 */
		/* 8212A1D8h case    5:*/		cpu::op::add<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8212A1D8h case    5:*/		return 0x8212A1DC;
		  /* 8212A1DCh */ case    6:  		/* bc 12, CR0_LT, 5024 */
		/* 8212A1DCh case    6:*/		if ( regs.CR[0].lt ) { return 0x8212B57C;  }
		/* 8212A1DCh case    6:*/		return 0x8212A1E0;
		  /* 8212A1E0h */ case    7:  		/* cmpwi CR6, R11, 7525 */
		/* 8212A1E0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00001D65);
		/* 8212A1E0h case    7:*/		return 0x8212A1E4;
		  /* 8212A1E4h */ case    8:  		/* bc 12, CR6_GT, 5016 */
		/* 8212A1E4h case    8:*/		if ( regs.CR[6].gt ) { return 0x8212B57C;  }
		/* 8212A1E4h case    8:*/		return 0x8212A1E8;
		  /* 8212A1E8h */ case    9:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8212A1E8h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8212A1E8h case    9:*/		return 0x8212A1EC;
		  /* 8212A1ECh */ case   10:  		/* lhax R9, <#[R11 + R26]> */
		/* 8212A1ECh case   10:*/		cpu::mem::load16a( regs, &regs.R9, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8212A1ECh case   10:*/		return 0x8212A1F0;
		  /* 8212A1F0h */ case   11:  		/* cmpw CR6, R9, R10 */
		/* 8212A1F0h case   11:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 8212A1F0h case   11:*/		return 0x8212A1F4;
		  /* 8212A1F4h */ case   12:  		/* bc 4, CR6_EQ, 5000 */
		/* 8212A1F4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8212B57C;  }
		/* 8212A1F4h case   12:*/		return 0x8212A1F8;
		  /* 8212A1F8h */ case   13:  		/* addi R10, R27, 3744 */
		/* 8212A1F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xEA0);
		/* 8212A1F8h case   13:*/		return 0x8212A1FC;
		  /* 8212A1FCh */ case   14:  		/* lhax R11, <#[R11 + R10]> */
		/* 8212A1FCh case   14:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8212A1FCh case   14:*/		return 0x8212A200;
	}
	return 0x8212A200;
} // Block from 8212A1C4h-8212A200h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8212A200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212A200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212A200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212A200);
		  /* 8212A200h */ case    0:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 8212A200h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 8212A200h case    0:*/		return 0x8212A204;
		  /* 8212A204h */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 8212A204h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8212A204h case    1:*/		return 0x8212A208;
		  /* 8212A208h */ case    2:  		/* addi R9, R27, -2440 */
		/* 8212A208h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xFFFFF678);
		/* 8212A208h case    2:*/		return 0x8212A20C;
		  /* 8212A20Ch */ case    3:  		/* addi R11, R11, -1 */
		/* 8212A20Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8212A20Ch case    3:*/		return 0x8212A210;
		  /* 8212A210h */ case    4:  		/* cmplwi CR6, R11, 425 */
		/* 8212A210h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000001A9);
		/* 8212A210h case    4:*/		return 0x8212A214;
		  /* 8212A214h */ case    5:  		/* lhax R29, <#[R30 + R9]> */
		/* 8212A214h case    5:*/		cpu::mem::load16a( regs, &regs.R29, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 8212A214h case    5:*/		return 0x8212A218;
		  /* 8212A218h */ case    6:  		/* rlwinm R28, R29, 2, 0, 29 */
		/* 8212A218h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R29);
		/* 8212A218h case    6:*/		return 0x8212A21C;
		  /* 8212A21Ch */ case    7:  		/* subf R10, R28, R10 */
		/* 8212A21Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 8212A21Ch case    7:*/		return 0x8212A220;
		  /* 8212A220h */ case    8:  		/* lwz R10, <#[R10 + 4]> */
		/* 8212A220h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8212A220h case    8:*/		return 0x8212A224;
		  /* 8212A224h */ case    9:  		/* stw R10, <#[R31 + 24]> */
		/* 8212A224h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8212A224h case    9:*/		return 0x8212A228;
		  /* 8212A228h */ case   10:  		/* bc 12, CR6_GT, 4672 */
		/* 8212A228h case   10:*/		if ( regs.CR[6].gt ) { return 0x8212B468;  }
		/* 8212A228h case   10:*/		return 0x8212A22C;
		  /* 8212A22Ch */ case   11:  		/* lis R12, -32253 */
		/* 8212A22Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8212A22Ch case   11:*/		return 0x8212A230;
		  /* 8212A230h */ case   12:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 8212A230h case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 8212A230h case   12:*/		return 0x8212A234;
		  /* 8212A234h */ case   13:  		/* addi R12, R12, 6640 */
		/* 8212A234h case   13:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x19F0);
		/* 8212A234h case   13:*/		return 0x8212A238;
		  /* 8212A238h */ case   14:  		/* lhzx R0, <#[R12 + R0]> */
		/* 8212A238h case   14:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 8212A238h case   14:*/		return 0x8212A23C;
		  /* 8212A23Ch */ case   15:  		/* lis R12, -32237 */
		/* 8212A23Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8213);
		/* 8212A23Ch case   15:*/		return 0x8212A240;
		  /* 8212A240h */ case   16:  		/* addi R12, R12, -23980 */
		/* 8212A240h case   16:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA254);
		/* 8212A240h case   16:*/		return 0x8212A244;
		  /* 8212A244h */ case   17:  		/* ori R0, R0, 0 */
		/* 8212A244h case   17:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8212A244h case   17:*/		return 0x8212A248;
		  /* 8212A248h */ case   18:  		/* add R12, R12, R0 */
		/* 8212A248h case   18:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8212A248h case   18:*/		return 0x8212A24C;
		  /* 8212A24Ch */ case   19:  		/* mtspr CTR, R12 */
		/* 8212A24Ch case   19:*/		regs.CTR = regs.R12;
		/* 8212A24Ch case   19:*/		return 0x8212A250;
		  /* 8212A250h */ case   20:  		/* bcctr 20, CR0_LT */
		/* 8212A250h case   20:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8212A250h case   20:*/		return 0x8212A254;
		  /* 8212A254h */ case   21:  		/* li R4, 0 */
		/* 8212A254h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8212A254h case   21:*/		return 0x8212A258;
		  /* 8212A258h */ case   22:  		/* b 4612 */
		/* 8212A258h case   22:*/		return 0x8212B45C;
		/* 8212A258h case   22:*/		return 0x8212A25C;
		  /* 8212A25Ch */ case   23:  		/* li R5, 1 */
		/* 8212A25Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A25Ch case   23:*/		return 0x8212A260;
		  /* 8212A260h */ case   24:  		/* li R4, 1 */
		/* 8212A260h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8212A260h case   24:*/		return 0x8212A264;
		  /* 8212A264h */ case   25:  		/* b 4604 */
		/* 8212A264h case   25:*/		return 0x8212B460;
		/* 8212A264h case   25:*/		return 0x8212A268;
		  /* 8212A268h */ case   26:  		/* li R5, 1 */
		/* 8212A268h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A268h case   26:*/		return 0x8212A26C;
		  /* 8212A26Ch */ case   27:  		/* li R4, 2 */
		/* 8212A26Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212A26Ch case   27:*/		return 0x8212A270;
		  /* 8212A270h */ case   28:  		/* b 4592 */
		/* 8212A270h case   28:*/		return 0x8212B460;
		/* 8212A270h case   28:*/		return 0x8212A274;
		  /* 8212A274h */ case   29:  		/* li R5, 2 */
		/* 8212A274h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A274h case   29:*/		return 0x8212A278;
		  /* 8212A278h */ case   30:  		/* li R4, 3 */
		/* 8212A278h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8212A278h case   30:*/		return 0x8212A27C;
		  /* 8212A27Ch */ case   31:  		/* b 4580 */
		/* 8212A27Ch case   31:*/		return 0x8212B460;
		/* 8212A27Ch case   31:*/		return 0x8212A280;
		  /* 8212A280h */ case   32:  		/* li R4, 4 */
		/* 8212A280h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8212A280h case   32:*/		return 0x8212A284;
		  /* 8212A284h */ case   33:  		/* b 4568 */
		/* 8212A284h case   33:*/		return 0x8212B45C;
		/* 8212A284h case   33:*/		return 0x8212A288;
		  /* 8212A288h */ case   34:  		/* li R5, 1 */
		/* 8212A288h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A288h case   34:*/		return 0x8212A28C;
		  /* 8212A28Ch */ case   35:  		/* li R4, 5 */
		/* 8212A28Ch case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8212A28Ch case   35:*/		return 0x8212A290;
		  /* 8212A290h */ case   36:  		/* b 4560 */
		/* 8212A290h case   36:*/		return 0x8212B460;
		/* 8212A290h case   36:*/		return 0x8212A294;
		  /* 8212A294h */ case   37:  		/* li R5, 1 */
		/* 8212A294h case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A294h case   37:*/		return 0x8212A298;
		  /* 8212A298h */ case   38:  		/* li R4, 6 */
		/* 8212A298h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 8212A298h case   38:*/		return 0x8212A29C;
		  /* 8212A29Ch */ case   39:  		/* b 4548 */
		/* 8212A29Ch case   39:*/		return 0x8212B460;
		/* 8212A29Ch case   39:*/		return 0x8212A2A0;
		  /* 8212A2A0h */ case   40:  		/* li R5, 1 */
		/* 8212A2A0h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2A0h case   40:*/		return 0x8212A2A4;
		  /* 8212A2A4h */ case   41:  		/* li R4, 7 */
		/* 8212A2A4h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 8212A2A4h case   41:*/		return 0x8212A2A8;
		  /* 8212A2A8h */ case   42:  		/* b 4536 */
		/* 8212A2A8h case   42:*/		return 0x8212B460;
		/* 8212A2A8h case   42:*/		return 0x8212A2AC;
		  /* 8212A2ACh */ case   43:  		/* li R5, 1 */
		/* 8212A2ACh case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2ACh case   43:*/		return 0x8212A2B0;
		  /* 8212A2B0h */ case   44:  		/* li R4, 8 */
		/* 8212A2B0h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8212A2B0h case   44:*/		return 0x8212A2B4;
		  /* 8212A2B4h */ case   45:  		/* b 4524 */
		/* 8212A2B4h case   45:*/		return 0x8212B460;
		/* 8212A2B4h case   45:*/		return 0x8212A2B8;
		  /* 8212A2B8h */ case   46:  		/* li R5, 1 */
		/* 8212A2B8h case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2B8h case   46:*/		return 0x8212A2BC;
		  /* 8212A2BCh */ case   47:  		/* li R4, 12 */
		/* 8212A2BCh case   47:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8212A2BCh case   47:*/		return 0x8212A2C0;
		  /* 8212A2C0h */ case   48:  		/* b 4512 */
		/* 8212A2C0h case   48:*/		return 0x8212B460;
		/* 8212A2C0h case   48:*/		return 0x8212A2C4;
		  /* 8212A2C4h */ case   49:  		/* li R5, 1 */
		/* 8212A2C4h case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2C4h case   49:*/		return 0x8212A2C8;
		  /* 8212A2C8h */ case   50:  		/* li R4, 9 */
		/* 8212A2C8h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 8212A2C8h case   50:*/		return 0x8212A2CC;
		  /* 8212A2CCh */ case   51:  		/* b 4500 */
		/* 8212A2CCh case   51:*/		return 0x8212B460;
		/* 8212A2CCh case   51:*/		return 0x8212A2D0;
		  /* 8212A2D0h */ case   52:  		/* li R5, 1 */
		/* 8212A2D0h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2D0h case   52:*/		return 0x8212A2D4;
		  /* 8212A2D4h */ case   53:  		/* li R4, 10 */
		/* 8212A2D4h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 8212A2D4h case   53:*/		return 0x8212A2D8;
		  /* 8212A2D8h */ case   54:  		/* b 4488 */
		/* 8212A2D8h case   54:*/		return 0x8212B460;
		/* 8212A2D8h case   54:*/		return 0x8212A2DC;
		  /* 8212A2DCh */ case   55:  		/* li R5, 1 */
		/* 8212A2DCh case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2DCh case   55:*/		return 0x8212A2E0;
		  /* 8212A2E0h */ case   56:  		/* li R4, 11 */
		/* 8212A2E0h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 8212A2E0h case   56:*/		return 0x8212A2E4;
		  /* 8212A2E4h */ case   57:  		/* b 4476 */
		/* 8212A2E4h case   57:*/		return 0x8212B460;
		/* 8212A2E4h case   57:*/		return 0x8212A2E8;
		  /* 8212A2E8h */ case   58:  		/* li R5, 1 */
		/* 8212A2E8h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A2E8h case   58:*/		return 0x8212A2EC;
		  /* 8212A2ECh */ case   59:  		/* li R4, 13 */
		/* 8212A2ECh case   59:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8212A2ECh case   59:*/		return 0x8212A2F0;
		  /* 8212A2F0h */ case   60:  		/* b 4464 */
		/* 8212A2F0h case   60:*/		return 0x8212B460;
		/* 8212A2F0h case   60:*/		return 0x8212A2F4;
		  /* 8212A2F4h */ case   61:  		/* li R5, 3 */
		/* 8212A2F4h case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A2F4h case   61:*/		return 0x8212A2F8;
		  /* 8212A2F8h */ case   62:  		/* li R4, 14 */
		/* 8212A2F8h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8212A2F8h case   62:*/		return 0x8212A2FC;
		  /* 8212A2FCh */ case   63:  		/* b 4452 */
		/* 8212A2FCh case   63:*/		return 0x8212B460;
		/* 8212A2FCh case   63:*/		return 0x8212A300;
		  /* 8212A300h */ case   64:  		/* li R5, 4 */
		/* 8212A300h case   64:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212A300h case   64:*/		return 0x8212A304;
		  /* 8212A304h */ case   65:  		/* li R4, 15 */
		/* 8212A304h case   65:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 8212A304h case   65:*/		return 0x8212A308;
		  /* 8212A308h */ case   66:  		/* b 4440 */
		/* 8212A308h case   66:*/		return 0x8212B460;
		/* 8212A308h case   66:*/		return 0x8212A30C;
		  /* 8212A30Ch */ case   67:  		/* li R5, 1 */
		/* 8212A30Ch case   67:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A30Ch case   67:*/		return 0x8212A310;
		  /* 8212A310h */ case   68:  		/* li R4, 18 */
		/* 8212A310h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 8212A310h case   68:*/		return 0x8212A314;
		  /* 8212A314h */ case   69:  		/* b 4428 */
		/* 8212A314h case   69:*/		return 0x8212B460;
		/* 8212A314h case   69:*/		return 0x8212A318;
		  /* 8212A318h */ case   70:  		/* li R4, 16 */
		/* 8212A318h case   70:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8212A318h case   70:*/		return 0x8212A31C;
		  /* 8212A31Ch */ case   71:  		/* b 4416 */
		/* 8212A31Ch case   71:*/		return 0x8212B45C;
		/* 8212A31Ch case   71:*/		return 0x8212A320;
		  /* 8212A320h */ case   72:  		/* li R4, 17 */
		/* 8212A320h case   72:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 8212A320h case   72:*/		return 0x8212A324;
		  /* 8212A324h */ case   73:  		/* b 4408 */
		/* 8212A324h case   73:*/		return 0x8212B45C;
		/* 8212A324h case   73:*/		return 0x8212A328;
		  /* 8212A328h */ case   74:  		/* li R5, 4 */
		/* 8212A328h case   74:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212A328h case   74:*/		return 0x8212A32C;
		  /* 8212A32Ch */ case   75:  		/* li R4, 19 */
		/* 8212A32Ch case   75:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 8212A32Ch case   75:*/		return 0x8212A330;
		  /* 8212A330h */ case   76:  		/* b 4400 */
		/* 8212A330h case   76:*/		return 0x8212B460;
		/* 8212A330h case   76:*/		return 0x8212A334;
		  /* 8212A334h */ case   77:  		/* li R5, 5 */
		/* 8212A334h case   77:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212A334h case   77:*/		return 0x8212A338;
		  /* 8212A338h */ case   78:  		/* li R4, 20 */
		/* 8212A338h case   78:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8212A338h case   78:*/		return 0x8212A33C;
		  /* 8212A33Ch */ case   79:  		/* b 4388 */
		/* 8212A33Ch case   79:*/		return 0x8212B460;
		/* 8212A33Ch case   79:*/		return 0x8212A340;
		  /* 8212A340h */ case   80:  		/* li R5, 1 */
		/* 8212A340h case   80:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A340h case   80:*/		return 0x8212A344;
		  /* 8212A344h */ case   81:  		/* li R4, 21 */
		/* 8212A344h case   81:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 8212A344h case   81:*/		return 0x8212A348;
		  /* 8212A348h */ case   82:  		/* b 4376 */
		/* 8212A348h case   82:*/		return 0x8212B460;
		/* 8212A348h case   82:*/		return 0x8212A34C;
		  /* 8212A34Ch */ case   83:  		/* li R5, 2 */
		/* 8212A34Ch case   83:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A34Ch case   83:*/		return 0x8212A350;
		  /* 8212A350h */ case   84:  		/* li R4, 22 */
		/* 8212A350h case   84:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 8212A350h case   84:*/		return 0x8212A354;
		  /* 8212A354h */ case   85:  		/* b 4364 */
		/* 8212A354h case   85:*/		return 0x8212B460;
		/* 8212A354h case   85:*/		return 0x8212A358;
		  /* 8212A358h */ case   86:  		/* li R5, 1 */
		/* 8212A358h case   86:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A358h case   86:*/		return 0x8212A35C;
		  /* 8212A35Ch */ case   87:  		/* li R4, 25 */
		/* 8212A35Ch case   87:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 8212A35Ch case   87:*/		return 0x8212A360;
		  /* 8212A360h */ case   88:  		/* b 4352 */
		/* 8212A360h case   88:*/		return 0x8212B460;
		/* 8212A360h case   88:*/		return 0x8212A364;
		  /* 8212A364h */ case   89:  		/* li R5, 2 */
		/* 8212A364h case   89:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A364h case   89:*/		return 0x8212A368;
		  /* 8212A368h */ case   90:  		/* li R4, 26 */
		/* 8212A368h case   90:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 8212A368h case   90:*/		return 0x8212A36C;
		  /* 8212A36Ch */ case   91:  		/* b 4340 */
		/* 8212A36Ch case   91:*/		return 0x8212B460;
		/* 8212A36Ch case   91:*/		return 0x8212A370;
		  /* 8212A370h */ case   92:  		/* li R4, 24 */
		/* 8212A370h case   92:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8212A370h case   92:*/		return 0x8212A374;
		  /* 8212A374h */ case   93:  		/* b 4328 */
		/* 8212A374h case   93:*/		return 0x8212B45C;
		/* 8212A374h case   93:*/		return 0x8212A378;
		  /* 8212A378h */ case   94:  		/* li R5, 4 */
		/* 8212A378h case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212A378h case   94:*/		return 0x8212A37C;
		  /* 8212A37Ch */ case   95:  		/* li R4, 27 */
		/* 8212A37Ch case   95:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 8212A37Ch case   95:*/		return 0x8212A380;
		  /* 8212A380h */ case   96:  		/* b 4320 */
		/* 8212A380h case   96:*/		return 0x8212B460;
		/* 8212A380h case   96:*/		return 0x8212A384;
		  /* 8212A384h */ case   97:  		/* li R5, 5 */
		/* 8212A384h case   97:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212A384h case   97:*/		return 0x8212A388;
		  /* 8212A388h */ case   98:  		/* li R4, 28 */
		/* 8212A388h case   98:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8212A388h case   98:*/		return 0x8212A38C;
		  /* 8212A38Ch */ case   99:  		/* b 4308 */
		/* 8212A38Ch case   99:*/		return 0x8212B460;
		/* 8212A38Ch case   99:*/		return 0x8212A390;
		  /* 8212A390h */ case  100:  		/* li R5, 1 */
		/* 8212A390h case  100:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A390h case  100:*/		return 0x8212A394;
		  /* 8212A394h */ case  101:  		/* li R4, 31 */
		/* 8212A394h case  101:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 8212A394h case  101:*/		return 0x8212A398;
		  /* 8212A398h */ case  102:  		/* b 4296 */
		/* 8212A398h case  102:*/		return 0x8212B460;
		/* 8212A398h case  102:*/		return 0x8212A39C;
		  /* 8212A39Ch */ case  103:  		/* li R5, 2 */
		/* 8212A39Ch case  103:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A39Ch case  103:*/		return 0x8212A3A0;
		  /* 8212A3A0h */ case  104:  		/* li R4, 32 */
		/* 8212A3A0h case  104:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8212A3A0h case  104:*/		return 0x8212A3A4;
		  /* 8212A3A4h */ case  105:  		/* b 4284 */
		/* 8212A3A4h case  105:*/		return 0x8212B460;
		/* 8212A3A4h case  105:*/		return 0x8212A3A8;
		  /* 8212A3A8h */ case  106:  		/* li R4, 30 */
		/* 8212A3A8h case  106:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 8212A3A8h case  106:*/		return 0x8212A3AC;
		  /* 8212A3ACh */ case  107:  		/* b 4272 */
		/* 8212A3ACh case  107:*/		return 0x8212B45C;
		/* 8212A3ACh case  107:*/		return 0x8212A3B0;
		  /* 8212A3B0h */ case  108:  		/* li R4, 35 */
		/* 8212A3B0h case  108:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8212A3B0h case  108:*/		return 0x8212A3B4;
		  /* 8212A3B4h */ case  109:  		/* b 4264 */
		/* 8212A3B4h case  109:*/		return 0x8212B45C;
		/* 8212A3B4h case  109:*/		return 0x8212A3B8;
		  /* 8212A3B8h */ case  110:  		/* li R5, 1 */
		/* 8212A3B8h case  110:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A3B8h case  110:*/		return 0x8212A3BC;
		  /* 8212A3BCh */ case  111:  		/* li R4, 36 */
		/* 8212A3BCh case  111:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 8212A3BCh case  111:*/		return 0x8212A3C0;
		  /* 8212A3C0h */ case  112:  		/* b 4256 */
		/* 8212A3C0h case  112:*/		return 0x8212B460;
		/* 8212A3C0h case  112:*/		return 0x8212A3C4;
		  /* 8212A3C4h */ case  113:  		/* li R5, 1 */
		/* 8212A3C4h case  113:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A3C4h case  113:*/		return 0x8212A3C8;
		  /* 8212A3C8h */ case  114:  		/* li R4, 33 */
		/* 8212A3C8h case  114:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 8212A3C8h case  114:*/		return 0x8212A3CC;
		  /* 8212A3CCh */ case  115:  		/* b 4244 */
		/* 8212A3CCh case  115:*/		return 0x8212B460;
		/* 8212A3CCh case  115:*/		return 0x8212A3D0;
		  /* 8212A3D0h */ case  116:  		/* li R5, 2 */
		/* 8212A3D0h case  116:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A3D0h case  116:*/		return 0x8212A3D4;
		  /* 8212A3D4h */ case  117:  		/* li R4, 34 */
		/* 8212A3D4h case  117:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 8212A3D4h case  117:*/		return 0x8212A3D8;
		  /* 8212A3D8h */ case  118:  		/* b 4232 */
		/* 8212A3D8h case  118:*/		return 0x8212B460;
		/* 8212A3D8h case  118:*/		return 0x8212A3DC;
		  /* 8212A3DCh */ case  119:  		/* li R4, 37 */
		/* 8212A3DCh case  119:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 8212A3DCh case  119:*/		return 0x8212A3E0;
		  /* 8212A3E0h */ case  120:  		/* b 4220 */
		/* 8212A3E0h case  120:*/		return 0x8212B45C;
		/* 8212A3E0h case  120:*/		return 0x8212A3E4;
		  /* 8212A3E4h */ case  121:  		/* li R4, 38 */
		/* 8212A3E4h case  121:*/		cpu::op::li<0>(regs,&regs.R4,0x26);
		/* 8212A3E4h case  121:*/		return 0x8212A3E8;
		  /* 8212A3E8h */ case  122:  		/* b 4212 */
		/* 8212A3E8h case  122:*/		return 0x8212B45C;
		/* 8212A3E8h case  122:*/		return 0x8212A3EC;
		  /* 8212A3ECh */ case  123:  		/* li R4, 39 */
		/* 8212A3ECh case  123:*/		cpu::op::li<0>(regs,&regs.R4,0x27);
		/* 8212A3ECh case  123:*/		return 0x8212A3F0;
		  /* 8212A3F0h */ case  124:  		/* b 4204 */
		/* 8212A3F0h case  124:*/		return 0x8212B45C;
		/* 8212A3F0h case  124:*/		return 0x8212A3F4;
		  /* 8212A3F4h */ case  125:  		/* li R4, 40 */
		/* 8212A3F4h case  125:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8212A3F4h case  125:*/		return 0x8212A3F8;
		  /* 8212A3F8h */ case  126:  		/* b 4196 */
		/* 8212A3F8h case  126:*/		return 0x8212B45C;
		/* 8212A3F8h case  126:*/		return 0x8212A3FC;
		  /* 8212A3FCh */ case  127:  		/* li R4, 41 */
		/* 8212A3FCh case  127:*/		cpu::op::li<0>(regs,&regs.R4,0x29);
		/* 8212A3FCh case  127:*/		return 0x8212A400;
		  /* 8212A400h */ case  128:  		/* b 4188 */
		/* 8212A400h case  128:*/		return 0x8212B45C;
		/* 8212A400h case  128:*/		return 0x8212A404;
		  /* 8212A404h */ case  129:  		/* li R4, 42 */
		/* 8212A404h case  129:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 8212A404h case  129:*/		return 0x8212A408;
		  /* 8212A408h */ case  130:  		/* b 4180 */
		/* 8212A408h case  130:*/		return 0x8212B45C;
		/* 8212A408h case  130:*/		return 0x8212A40C;
		  /* 8212A40Ch */ case  131:  		/* li R4, 43 */
		/* 8212A40Ch case  131:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 8212A40Ch case  131:*/		return 0x8212A410;
		  /* 8212A410h */ case  132:  		/* b 4172 */
		/* 8212A410h case  132:*/		return 0x8212B45C;
		/* 8212A410h case  132:*/		return 0x8212A414;
		  /* 8212A414h */ case  133:  		/* li R4, 44 */
		/* 8212A414h case  133:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8212A414h case  133:*/		return 0x8212A418;
		  /* 8212A418h */ case  134:  		/* b 4164 */
		/* 8212A418h case  134:*/		return 0x8212B45C;
		/* 8212A418h case  134:*/		return 0x8212A41C;
		  /* 8212A41Ch */ case  135:  		/* li R4, 45 */
		/* 8212A41Ch case  135:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8212A41Ch case  135:*/		return 0x8212A420;
		  /* 8212A420h */ case  136:  		/* b 4156 */
		/* 8212A420h case  136:*/		return 0x8212B45C;
		/* 8212A420h case  136:*/		return 0x8212A424;
		  /* 8212A424h */ case  137:  		/* li R4, 46 */
		/* 8212A424h case  137:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 8212A424h case  137:*/		return 0x8212A428;
		  /* 8212A428h */ case  138:  		/* b 4148 */
		/* 8212A428h case  138:*/		return 0x8212B45C;
		/* 8212A428h case  138:*/		return 0x8212A42C;
		  /* 8212A42Ch */ case  139:  		/* li R5, 1 */
		/* 8212A42Ch case  139:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A42Ch case  139:*/		return 0x8212A430;
		  /* 8212A430h */ case  140:  		/* li R4, 47 */
		/* 8212A430h case  140:*/		cpu::op::li<0>(regs,&regs.R4,0x2F);
		/* 8212A430h case  140:*/		return 0x8212A434;
		  /* 8212A434h */ case  141:  		/* b 4140 */
		/* 8212A434h case  141:*/		return 0x8212B460;
		/* 8212A434h case  141:*/		return 0x8212A438;
		  /* 8212A438h */ case  142:  		/* li R5, 1 */
		/* 8212A438h case  142:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A438h case  142:*/		return 0x8212A43C;
		  /* 8212A43Ch */ case  143:  		/* li R4, 48 */
		/* 8212A43Ch case  143:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 8212A43Ch case  143:*/		return 0x8212A440;
		  /* 8212A440h */ case  144:  		/* b 4128 */
		/* 8212A440h case  144:*/		return 0x8212B460;
		/* 8212A440h case  144:*/		return 0x8212A444;
		  /* 8212A444h */ case  145:  		/* li R5, 1 */
		/* 8212A444h case  145:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A444h case  145:*/		return 0x8212A448;
		  /* 8212A448h */ case  146:  		/* li R4, 52 */
		/* 8212A448h case  146:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 8212A448h case  146:*/		return 0x8212A44C;
		  /* 8212A44Ch */ case  147:  		/* b 4116 */
		/* 8212A44Ch case  147:*/		return 0x8212B460;
		/* 8212A44Ch case  147:*/		return 0x8212A450;
		  /* 8212A450h */ case  148:  		/* li R5, 2 */
		/* 8212A450h case  148:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A450h case  148:*/		return 0x8212A454;
		  /* 8212A454h */ case  149:  		/* li R4, 53 */
		/* 8212A454h case  149:*/		cpu::op::li<0>(regs,&regs.R4,0x35);
		/* 8212A454h case  149:*/		return 0x8212A458;
		  /* 8212A458h */ case  150:  		/* b 4104 */
		/* 8212A458h case  150:*/		return 0x8212B460;
		/* 8212A458h case  150:*/		return 0x8212A45C;
		  /* 8212A45Ch */ case  151:  		/* li R4, 54 */
		/* 8212A45Ch case  151:*/		cpu::op::li<0>(regs,&regs.R4,0x36);
		/* 8212A45Ch case  151:*/		return 0x8212A460;
		  /* 8212A460h */ case  152:  		/* b 4092 */
		/* 8212A460h case  152:*/		return 0x8212B45C;
		/* 8212A460h case  152:*/		return 0x8212A464;
		  /* 8212A464h */ case  153:  		/* li R4, 55 */
		/* 8212A464h case  153:*/		cpu::op::li<0>(regs,&regs.R4,0x37);
		/* 8212A464h case  153:*/		return 0x8212A468;
		  /* 8212A468h */ case  154:  		/* b 4084 */
		/* 8212A468h case  154:*/		return 0x8212B45C;
		/* 8212A468h case  154:*/		return 0x8212A46C;
		  /* 8212A46Ch */ case  155:  		/* li R4, 56 */
		/* 8212A46Ch case  155:*/		cpu::op::li<0>(regs,&regs.R4,0x38);
		/* 8212A46Ch case  155:*/		return 0x8212A470;
		  /* 8212A470h */ case  156:  		/* b 4076 */
		/* 8212A470h case  156:*/		return 0x8212B45C;
		/* 8212A470h case  156:*/		return 0x8212A474;
		  /* 8212A474h */ case  157:  		/* li R5, 1 */
		/* 8212A474h case  157:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A474h case  157:*/		return 0x8212A478;
		  /* 8212A478h */ case  158:  		/* li R4, 57 */
		/* 8212A478h case  158:*/		cpu::op::li<0>(regs,&regs.R4,0x39);
		/* 8212A478h case  158:*/		return 0x8212A47C;
		  /* 8212A47Ch */ case  159:  		/* b 4068 */
		/* 8212A47Ch case  159:*/		return 0x8212B460;
		/* 8212A47Ch case  159:*/		return 0x8212A480;
		  /* 8212A480h */ case  160:  		/* li R5, 2 */
		/* 8212A480h case  160:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A480h case  160:*/		return 0x8212A484;
		  /* 8212A484h */ case  161:  		/* li R4, 58 */
		/* 8212A484h case  161:*/		cpu::op::li<0>(regs,&regs.R4,0x3A);
		/* 8212A484h case  161:*/		return 0x8212A488;
		  /* 8212A488h */ case  162:  		/* b 4056 */
		/* 8212A488h case  162:*/		return 0x8212B460;
		/* 8212A488h case  162:*/		return 0x8212A48C;
		  /* 8212A48Ch */ case  163:  		/* li R5, 1 */
		/* 8212A48Ch case  163:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A48Ch case  163:*/		return 0x8212A490;
		  /* 8212A490h */ case  164:  		/* li R4, 61 */
		/* 8212A490h case  164:*/		cpu::op::li<0>(regs,&regs.R4,0x3D);
		/* 8212A490h case  164:*/		return 0x8212A494;
		  /* 8212A494h */ case  165:  		/* b 4044 */
		/* 8212A494h case  165:*/		return 0x8212B460;
		/* 8212A494h case  165:*/		return 0x8212A498;
		  /* 8212A498h */ case  166:  		/* li R5, 2 */
		/* 8212A498h case  166:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A498h case  166:*/		return 0x8212A49C;
		  /* 8212A49Ch */ case  167:  		/* li R4, 62 */
		/* 8212A49Ch case  167:*/		cpu::op::li<0>(regs,&regs.R4,0x3E);
		/* 8212A49Ch case  167:*/		return 0x8212A4A0;
		  /* 8212A4A0h */ case  168:  		/* b 4032 */
		/* 8212A4A0h case  168:*/		return 0x8212B460;
		/* 8212A4A0h case  168:*/		return 0x8212A4A4;
		  /* 8212A4A4h */ case  169:  		/* li R5, 2 */
		/* 8212A4A4h case  169:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A4A4h case  169:*/		return 0x8212A4A8;
		  /* 8212A4A8h */ case  170:  		/* li R4, 63 */
		/* 8212A4A8h case  170:*/		cpu::op::li<0>(regs,&regs.R4,0x3F);
		/* 8212A4A8h case  170:*/		return 0x8212A4AC;
		  /* 8212A4ACh */ case  171:  		/* b 4020 */
		/* 8212A4ACh case  171:*/		return 0x8212B460;
		/* 8212A4ACh case  171:*/		return 0x8212A4B0;
		  /* 8212A4B0h */ case  172:  		/* li R5, 2 */
		/* 8212A4B0h case  172:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A4B0h case  172:*/		return 0x8212A4B4;
		  /* 8212A4B4h */ case  173:  		/* li R4, 64 */
		/* 8212A4B4h case  173:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 8212A4B4h case  173:*/		return 0x8212A4B8;
		  /* 8212A4B8h */ case  174:  		/* b 4008 */
		/* 8212A4B8h case  174:*/		return 0x8212B460;
		/* 8212A4B8h case  174:*/		return 0x8212A4BC;
		  /* 8212A4BCh */ case  175:  		/* li R5, 1 */
		/* 8212A4BCh case  175:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A4BCh case  175:*/		return 0x8212A4C0;
		  /* 8212A4C0h */ case  176:  		/* li R4, 65 */
		/* 8212A4C0h case  176:*/		cpu::op::li<0>(regs,&regs.R4,0x41);
		/* 8212A4C0h case  176:*/		return 0x8212A4C4;
		  /* 8212A4C4h */ case  177:  		/* b 3996 */
		/* 8212A4C4h case  177:*/		return 0x8212B460;
		/* 8212A4C4h case  177:*/		return 0x8212A4C8;
		  /* 8212A4C8h */ case  178:  		/* li R5, 1 */
		/* 8212A4C8h case  178:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A4C8h case  178:*/		return 0x8212A4CC;
		  /* 8212A4CCh */ case  179:  		/* li R4, 66 */
		/* 8212A4CCh case  179:*/		cpu::op::li<0>(regs,&regs.R4,0x42);
		/* 8212A4CCh case  179:*/		return 0x8212A4D0;
		  /* 8212A4D0h */ case  180:  		/* b 3984 */
		/* 8212A4D0h case  180:*/		return 0x8212B460;
		/* 8212A4D0h case  180:*/		return 0x8212A4D4;
		  /* 8212A4D4h */ case  181:  		/* li R5, 2 */
		/* 8212A4D4h case  181:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A4D4h case  181:*/		return 0x8212A4D8;
		  /* 8212A4D8h */ case  182:  		/* li R4, 67 */
		/* 8212A4D8h case  182:*/		cpu::op::li<0>(regs,&regs.R4,0x43);
		/* 8212A4D8h case  182:*/		return 0x8212A4DC;
		  /* 8212A4DCh */ case  183:  		/* b 3972 */
		/* 8212A4DCh case  183:*/		return 0x8212B460;
		/* 8212A4DCh case  183:*/		return 0x8212A4E0;
		  /* 8212A4E0h */ case  184:  		/* li R5, 1 */
		/* 8212A4E0h case  184:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A4E0h case  184:*/		return 0x8212A4E4;
		  /* 8212A4E4h */ case  185:  		/* li R4, 68 */
		/* 8212A4E4h case  185:*/		cpu::op::li<0>(regs,&regs.R4,0x44);
		/* 8212A4E4h case  185:*/		return 0x8212A4E8;
		  /* 8212A4E8h */ case  186:  		/* b 3960 */
		/* 8212A4E8h case  186:*/		return 0x8212B460;
		/* 8212A4E8h case  186:*/		return 0x8212A4EC;
		  /* 8212A4ECh */ case  187:  		/* li R5, 1 */
		/* 8212A4ECh case  187:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A4ECh case  187:*/		return 0x8212A4F0;
		  /* 8212A4F0h */ case  188:  		/* li R4, 69 */
		/* 8212A4F0h case  188:*/		cpu::op::li<0>(regs,&regs.R4,0x45);
		/* 8212A4F0h case  188:*/		return 0x8212A4F4;
		  /* 8212A4F4h */ case  189:  		/* b 3948 */
		/* 8212A4F4h case  189:*/		return 0x8212B460;
		/* 8212A4F4h case  189:*/		return 0x8212A4F8;
		  /* 8212A4F8h */ case  190:  		/* li R5, 1 */
		/* 8212A4F8h case  190:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A4F8h case  190:*/		return 0x8212A4FC;
		  /* 8212A4FCh */ case  191:  		/* li R4, 70 */
		/* 8212A4FCh case  191:*/		cpu::op::li<0>(regs,&regs.R4,0x46);
		/* 8212A4FCh case  191:*/		return 0x8212A500;
		  /* 8212A500h */ case  192:  		/* b 3936 */
		/* 8212A500h case  192:*/		return 0x8212B460;
		/* 8212A500h case  192:*/		return 0x8212A504;
		  /* 8212A504h */ case  193:  		/* li R5, 1 */
		/* 8212A504h case  193:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A504h case  193:*/		return 0x8212A508;
		  /* 8212A508h */ case  194:  		/* li R4, 71 */
		/* 8212A508h case  194:*/		cpu::op::li<0>(regs,&regs.R4,0x47);
		/* 8212A508h case  194:*/		return 0x8212A50C;
		  /* 8212A50Ch */ case  195:  		/* b 3924 */
		/* 8212A50Ch case  195:*/		return 0x8212B460;
		/* 8212A50Ch case  195:*/		return 0x8212A510;
		  /* 8212A510h */ case  196:  		/* li R5, 1 */
		/* 8212A510h case  196:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A510h case  196:*/		return 0x8212A514;
		  /* 8212A514h */ case  197:  		/* li R4, 72 */
		/* 8212A514h case  197:*/		cpu::op::li<0>(regs,&regs.R4,0x48);
		/* 8212A514h case  197:*/		return 0x8212A518;
		  /* 8212A518h */ case  198:  		/* b 3912 */
		/* 8212A518h case  198:*/		return 0x8212B460;
		/* 8212A518h case  198:*/		return 0x8212A51C;
		  /* 8212A51Ch */ case  199:  		/* li R5, 1 */
		/* 8212A51Ch case  199:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A51Ch case  199:*/		return 0x8212A520;
		  /* 8212A520h */ case  200:  		/* li R4, 73 */
		/* 8212A520h case  200:*/		cpu::op::li<0>(regs,&regs.R4,0x49);
		/* 8212A520h case  200:*/		return 0x8212A524;
		  /* 8212A524h */ case  201:  		/* b 3900 */
		/* 8212A524h case  201:*/		return 0x8212B460;
		/* 8212A524h case  201:*/		return 0x8212A528;
		  /* 8212A528h */ case  202:  		/* li R5, 1 */
		/* 8212A528h case  202:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A528h case  202:*/		return 0x8212A52C;
		  /* 8212A52Ch */ case  203:  		/* li R4, 74 */
		/* 8212A52Ch case  203:*/		cpu::op::li<0>(regs,&regs.R4,0x4A);
		/* 8212A52Ch case  203:*/		return 0x8212A530;
		  /* 8212A530h */ case  204:  		/* b 3888 */
		/* 8212A530h case  204:*/		return 0x8212B460;
		/* 8212A530h case  204:*/		return 0x8212A534;
		  /* 8212A534h */ case  205:  		/* li R5, 1 */
		/* 8212A534h case  205:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A534h case  205:*/		return 0x8212A538;
		  /* 8212A538h */ case  206:  		/* li R4, 75 */
		/* 8212A538h case  206:*/		cpu::op::li<0>(regs,&regs.R4,0x4B);
		/* 8212A538h case  206:*/		return 0x8212A53C;
		  /* 8212A53Ch */ case  207:  		/* b 3876 */
		/* 8212A53Ch case  207:*/		return 0x8212B460;
		/* 8212A53Ch case  207:*/		return 0x8212A540;
		  /* 8212A540h */ case  208:  		/* li R5, 2 */
		/* 8212A540h case  208:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A540h case  208:*/		return 0x8212A544;
		  /* 8212A544h */ case  209:  		/* li R4, 76 */
		/* 8212A544h case  209:*/		cpu::op::li<0>(regs,&regs.R4,0x4C);
		/* 8212A544h case  209:*/		return 0x8212A548;
		  /* 8212A548h */ case  210:  		/* b 3864 */
		/* 8212A548h case  210:*/		return 0x8212B460;
		/* 8212A548h case  210:*/		return 0x8212A54C;
		  /* 8212A54Ch */ case  211:  		/* li R5, 1 */
		/* 8212A54Ch case  211:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A54Ch case  211:*/		return 0x8212A550;
		  /* 8212A550h */ case  212:  		/* li R4, 77 */
		/* 8212A550h case  212:*/		cpu::op::li<0>(regs,&regs.R4,0x4D);
		/* 8212A550h case  212:*/		return 0x8212A554;
		  /* 8212A554h */ case  213:  		/* b 3852 */
		/* 8212A554h case  213:*/		return 0x8212B460;
		/* 8212A554h case  213:*/		return 0x8212A558;
		  /* 8212A558h */ case  214:  		/* li R5, 2 */
		/* 8212A558h case  214:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A558h case  214:*/		return 0x8212A55C;
		  /* 8212A55Ch */ case  215:  		/* li R4, 78 */
		/* 8212A55Ch case  215:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 8212A55Ch case  215:*/		return 0x8212A560;
		  /* 8212A560h */ case  216:  		/* b 3840 */
		/* 8212A560h case  216:*/		return 0x8212B460;
		/* 8212A560h case  216:*/		return 0x8212A564;
		  /* 8212A564h */ case  217:  		/* li R4, 79 */
		/* 8212A564h case  217:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 8212A564h case  217:*/		return 0x8212A568;
		  /* 8212A568h */ case  218:  		/* b 3828 */
		/* 8212A568h case  218:*/		return 0x8212B45C;
		/* 8212A568h case  218:*/		return 0x8212A56C;
		  /* 8212A56Ch */ case  219:  		/* li R5, 1 */
		/* 8212A56Ch case  219:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A56Ch case  219:*/		return 0x8212A570;
		  /* 8212A570h */ case  220:  		/* li R4, 80 */
		/* 8212A570h case  220:*/		cpu::op::li<0>(regs,&regs.R4,0x50);
		/* 8212A570h case  220:*/		return 0x8212A574;
		  /* 8212A574h */ case  221:  		/* b 3820 */
		/* 8212A574h case  221:*/		return 0x8212B460;
		/* 8212A574h case  221:*/		return 0x8212A578;
		  /* 8212A578h */ case  222:  		/* li R5, 1 */
		/* 8212A578h case  222:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A578h case  222:*/		return 0x8212A57C;
		  /* 8212A57Ch */ case  223:  		/* li R4, 81 */
		/* 8212A57Ch case  223:*/		cpu::op::li<0>(regs,&regs.R4,0x51);
		/* 8212A57Ch case  223:*/		return 0x8212A580;
		  /* 8212A580h */ case  224:  		/* b 3808 */
		/* 8212A580h case  224:*/		return 0x8212B460;
		/* 8212A580h case  224:*/		return 0x8212A584;
		  /* 8212A584h */ case  225:  		/* li R5, 1 */
		/* 8212A584h case  225:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A584h case  225:*/		return 0x8212A588;
		  /* 8212A588h */ case  226:  		/* li R4, 82 */
		/* 8212A588h case  226:*/		cpu::op::li<0>(regs,&regs.R4,0x52);
		/* 8212A588h case  226:*/		return 0x8212A58C;
		  /* 8212A58Ch */ case  227:  		/* b 3796 */
		/* 8212A58Ch case  227:*/		return 0x8212B460;
		/* 8212A58Ch case  227:*/		return 0x8212A590;
		  /* 8212A590h */ case  228:  		/* li R5, 1 */
		/* 8212A590h case  228:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A590h case  228:*/		return 0x8212A594;
		  /* 8212A594h */ case  229:  		/* li R4, 83 */
		/* 8212A594h case  229:*/		cpu::op::li<0>(regs,&regs.R4,0x53);
		/* 8212A594h case  229:*/		return 0x8212A598;
		  /* 8212A598h */ case  230:  		/* b 3784 */
		/* 8212A598h case  230:*/		return 0x8212B460;
		/* 8212A598h case  230:*/		return 0x8212A59C;
		  /* 8212A59Ch */ case  231:  		/* li R4, 84 */
		/* 8212A59Ch case  231:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 8212A59Ch case  231:*/		return 0x8212A5A0;
		  /* 8212A5A0h */ case  232:  		/* b 3772 */
		/* 8212A5A0h case  232:*/		return 0x8212B45C;
		/* 8212A5A0h case  232:*/		return 0x8212A5A4;
		  /* 8212A5A4h */ case  233:  		/* li R4, 85 */
		/* 8212A5A4h case  233:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 8212A5A4h case  233:*/		return 0x8212A5A8;
		  /* 8212A5A8h */ case  234:  		/* b 3764 */
		/* 8212A5A8h case  234:*/		return 0x8212B45C;
		/* 8212A5A8h case  234:*/		return 0x8212A5AC;
		  /* 8212A5ACh */ case  235:  		/* li R4, 86 */
		/* 8212A5ACh case  235:*/		cpu::op::li<0>(regs,&regs.R4,0x56);
		/* 8212A5ACh case  235:*/		return 0x8212A5B0;
		  /* 8212A5B0h */ case  236:  		/* b 3756 */
		/* 8212A5B0h case  236:*/		return 0x8212B45C;
		/* 8212A5B0h case  236:*/		return 0x8212A5B4;
		  /* 8212A5B4h */ case  237:  		/* li R4, 87 */
		/* 8212A5B4h case  237:*/		cpu::op::li<0>(regs,&regs.R4,0x57);
		/* 8212A5B4h case  237:*/		return 0x8212A5B8;
		  /* 8212A5B8h */ case  238:  		/* b 3748 */
		/* 8212A5B8h case  238:*/		return 0x8212B45C;
		/* 8212A5B8h case  238:*/		return 0x8212A5BC;
		  /* 8212A5BCh */ case  239:  		/* li R4, 88 */
		/* 8212A5BCh case  239:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 8212A5BCh case  239:*/		return 0x8212A5C0;
		  /* 8212A5C0h */ case  240:  		/* b 3740 */
		/* 8212A5C0h case  240:*/		return 0x8212B45C;
		/* 8212A5C0h case  240:*/		return 0x8212A5C4;
		  /* 8212A5C4h */ case  241:  		/* li R4, 89 */
		/* 8212A5C4h case  241:*/		cpu::op::li<0>(regs,&regs.R4,0x59);
		/* 8212A5C4h case  241:*/		return 0x8212A5C8;
		  /* 8212A5C8h */ case  242:  		/* b 3732 */
		/* 8212A5C8h case  242:*/		return 0x8212B45C;
		/* 8212A5C8h case  242:*/		return 0x8212A5CC;
		  /* 8212A5CCh */ case  243:  		/* li R4, 90 */
		/* 8212A5CCh case  243:*/		cpu::op::li<0>(regs,&regs.R4,0x5A);
		/* 8212A5CCh case  243:*/		return 0x8212A5D0;
		  /* 8212A5D0h */ case  244:  		/* b 3724 */
		/* 8212A5D0h case  244:*/		return 0x8212B45C;
		/* 8212A5D0h case  244:*/		return 0x8212A5D4;
		  /* 8212A5D4h */ case  245:  		/* li R4, 91 */
		/* 8212A5D4h case  245:*/		cpu::op::li<0>(regs,&regs.R4,0x5B);
		/* 8212A5D4h case  245:*/		return 0x8212A5D8;
		  /* 8212A5D8h */ case  246:  		/* b 3716 */
		/* 8212A5D8h case  246:*/		return 0x8212B45C;
		/* 8212A5D8h case  246:*/		return 0x8212A5DC;
		  /* 8212A5DCh */ case  247:  		/* li R4, 92 */
		/* 8212A5DCh case  247:*/		cpu::op::li<0>(regs,&regs.R4,0x5C);
		/* 8212A5DCh case  247:*/		return 0x8212A5E0;
		  /* 8212A5E0h */ case  248:  		/* b 3708 */
		/* 8212A5E0h case  248:*/		return 0x8212B45C;
		/* 8212A5E0h case  248:*/		return 0x8212A5E4;
		  /* 8212A5E4h */ case  249:  		/* li R4, 93 */
		/* 8212A5E4h case  249:*/		cpu::op::li<0>(regs,&regs.R4,0x5D);
		/* 8212A5E4h case  249:*/		return 0x8212A5E8;
		  /* 8212A5E8h */ case  250:  		/* b 3700 */
		/* 8212A5E8h case  250:*/		return 0x8212B45C;
		/* 8212A5E8h case  250:*/		return 0x8212A5EC;
		  /* 8212A5ECh */ case  251:  		/* li R5, 2 */
		/* 8212A5ECh case  251:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A5ECh case  251:*/		return 0x8212A5F0;
		  /* 8212A5F0h */ case  252:  		/* li R4, 94 */
		/* 8212A5F0h case  252:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 8212A5F0h case  252:*/		return 0x8212A5F4;
		  /* 8212A5F4h */ case  253:  		/* b 3692 */
		/* 8212A5F4h case  253:*/		return 0x8212B460;
		/* 8212A5F4h case  253:*/		return 0x8212A5F8;
		  /* 8212A5F8h */ case  254:  		/* li R4, 95 */
		/* 8212A5F8h case  254:*/		cpu::op::li<0>(regs,&regs.R4,0x5F);
		/* 8212A5F8h case  254:*/		return 0x8212A5FC;
		  /* 8212A5FCh */ case  255:  		/* b 3680 */
		/* 8212A5FCh case  255:*/		return 0x8212B45C;
		/* 8212A5FCh case  255:*/		return 0x8212A600;
		  /* 8212A600h */ case  256:  		/* li R5, 3 */
		/* 8212A600h case  256:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A600h case  256:*/		return 0x8212A604;
		  /* 8212A604h */ case  257:  		/* li R4, 96 */
		/* 8212A604h case  257:*/		cpu::op::li<0>(regs,&regs.R4,0x60);
		/* 8212A604h case  257:*/		return 0x8212A608;
		  /* 8212A608h */ case  258:  		/* b 3672 */
		/* 8212A608h case  258:*/		return 0x8212B460;
		/* 8212A608h case  258:*/		return 0x8212A60C;
		  /* 8212A60Ch */ case  259:  		/* li R4, 97 */
		/* 8212A60Ch case  259:*/		cpu::op::li<0>(regs,&regs.R4,0x61);
		/* 8212A60Ch case  259:*/		return 0x8212A610;
		  /* 8212A610h */ case  260:  		/* b 3660 */
		/* 8212A610h case  260:*/		return 0x8212B45C;
		/* 8212A610h case  260:*/		return 0x8212A614;
		  /* 8212A614h */ case  261:  		/* li R4, 98 */
		/* 8212A614h case  261:*/		cpu::op::li<0>(regs,&regs.R4,0x62);
		/* 8212A614h case  261:*/		return 0x8212A618;
		  /* 8212A618h */ case  262:  		/* b 3652 */
		/* 8212A618h case  262:*/		return 0x8212B45C;
		/* 8212A618h case  262:*/		return 0x8212A61C;
		  /* 8212A61Ch */ case  263:  		/* li R4, 99 */
		/* 8212A61Ch case  263:*/		cpu::op::li<0>(regs,&regs.R4,0x63);
		/* 8212A61Ch case  263:*/		return 0x8212A620;
		  /* 8212A620h */ case  264:  		/* b 3644 */
		/* 8212A620h case  264:*/		return 0x8212B45C;
		/* 8212A620h case  264:*/		return 0x8212A624;
		  /* 8212A624h */ case  265:  		/* li R4, 100 */
		/* 8212A624h case  265:*/		cpu::op::li<0>(regs,&regs.R4,0x64);
		/* 8212A624h case  265:*/		return 0x8212A628;
		  /* 8212A628h */ case  266:  		/* b 3636 */
		/* 8212A628h case  266:*/		return 0x8212B45C;
		/* 8212A628h case  266:*/		return 0x8212A62C;
		  /* 8212A62Ch */ case  267:  		/* li R4, 101 */
		/* 8212A62Ch case  267:*/		cpu::op::li<0>(regs,&regs.R4,0x65);
		/* 8212A62Ch case  267:*/		return 0x8212A630;
		  /* 8212A630h */ case  268:  		/* b 3628 */
		/* 8212A630h case  268:*/		return 0x8212B45C;
		/* 8212A630h case  268:*/		return 0x8212A634;
		  /* 8212A634h */ case  269:  		/* li R4, 102 */
		/* 8212A634h case  269:*/		cpu::op::li<0>(regs,&regs.R4,0x66);
		/* 8212A634h case  269:*/		return 0x8212A638;
		  /* 8212A638h */ case  270:  		/* b 3620 */
		/* 8212A638h case  270:*/		return 0x8212B45C;
		/* 8212A638h case  270:*/		return 0x8212A63C;
		  /* 8212A63Ch */ case  271:  		/* li R4, 103 */
		/* 8212A63Ch case  271:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 8212A63Ch case  271:*/		return 0x8212A640;
		  /* 8212A640h */ case  272:  		/* b 3612 */
		/* 8212A640h case  272:*/		return 0x8212B45C;
		/* 8212A640h case  272:*/		return 0x8212A644;
		  /* 8212A644h */ case  273:  		/* li R4, 104 */
		/* 8212A644h case  273:*/		cpu::op::li<0>(regs,&regs.R4,0x68);
		/* 8212A644h case  273:*/		return 0x8212A648;
		  /* 8212A648h */ case  274:  		/* b 3604 */
		/* 8212A648h case  274:*/		return 0x8212B45C;
		/* 8212A648h case  274:*/		return 0x8212A64C;
		  /* 8212A64Ch */ case  275:  		/* li R5, 1 */
		/* 8212A64Ch case  275:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A64Ch case  275:*/		return 0x8212A650;
		  /* 8212A650h */ case  276:  		/* li R4, 105 */
		/* 8212A650h case  276:*/		cpu::op::li<0>(regs,&regs.R4,0x69);
		/* 8212A650h case  276:*/		return 0x8212A654;
		  /* 8212A654h */ case  277:  		/* b 3596 */
		/* 8212A654h case  277:*/		return 0x8212B460;
		/* 8212A654h case  277:*/		return 0x8212A658;
		  /* 8212A658h */ case  278:  		/* li R5, 1 */
		/* 8212A658h case  278:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A658h case  278:*/		return 0x8212A65C;
		  /* 8212A65Ch */ case  279:  		/* li R4, 106 */
		/* 8212A65Ch case  279:*/		cpu::op::li<0>(regs,&regs.R4,0x6A);
		/* 8212A65Ch case  279:*/		return 0x8212A660;
		  /* 8212A660h */ case  280:  		/* b 3584 */
		/* 8212A660h case  280:*/		return 0x8212B460;
		/* 8212A660h case  280:*/		return 0x8212A664;
		  /* 8212A664h */ case  281:  		/* li R5, 1 */
		/* 8212A664h case  281:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A664h case  281:*/		return 0x8212A668;
		  /* 8212A668h */ case  282:  		/* li R4, 107 */
		/* 8212A668h case  282:*/		cpu::op::li<0>(regs,&regs.R4,0x6B);
		/* 8212A668h case  282:*/		return 0x8212A66C;
		  /* 8212A66Ch */ case  283:  		/* b 3572 */
		/* 8212A66Ch case  283:*/		return 0x8212B460;
		/* 8212A66Ch case  283:*/		return 0x8212A670;
		  /* 8212A670h */ case  284:  		/* li R5, 1 */
		/* 8212A670h case  284:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A670h case  284:*/		return 0x8212A674;
		  /* 8212A674h */ case  285:  		/* li R4, 108 */
		/* 8212A674h case  285:*/		cpu::op::li<0>(regs,&regs.R4,0x6C);
		/* 8212A674h case  285:*/		return 0x8212A678;
		  /* 8212A678h */ case  286:  		/* b 3560 */
		/* 8212A678h case  286:*/		return 0x8212B460;
		/* 8212A678h case  286:*/		return 0x8212A67C;
		  /* 8212A67Ch */ case  287:  		/* li R5, 1 */
		/* 8212A67Ch case  287:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A67Ch case  287:*/		return 0x8212A680;
		  /* 8212A680h */ case  288:  		/* li R4, 109 */
		/* 8212A680h case  288:*/		cpu::op::li<0>(regs,&regs.R4,0x6D);
		/* 8212A680h case  288:*/		return 0x8212A684;
		  /* 8212A684h */ case  289:  		/* b 3548 */
		/* 8212A684h case  289:*/		return 0x8212B460;
		/* 8212A684h case  289:*/		return 0x8212A688;
		  /* 8212A688h */ case  290:  		/* li R5, 1 */
		/* 8212A688h case  290:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A688h case  290:*/		return 0x8212A68C;
		  /* 8212A68Ch */ case  291:  		/* li R4, 110 */
		/* 8212A68Ch case  291:*/		cpu::op::li<0>(regs,&regs.R4,0x6E);
		/* 8212A68Ch case  291:*/		return 0x8212A690;
		  /* 8212A690h */ case  292:  		/* b 3536 */
		/* 8212A690h case  292:*/		return 0x8212B460;
		/* 8212A690h case  292:*/		return 0x8212A694;
		  /* 8212A694h */ case  293:  		/* li R4, 123 */
		/* 8212A694h case  293:*/		cpu::op::li<0>(regs,&regs.R4,0x7B);
		/* 8212A694h case  293:*/		return 0x8212A698;
		  /* 8212A698h */ case  294:  		/* b 3524 */
		/* 8212A698h case  294:*/		return 0x8212B45C;
		/* 8212A698h case  294:*/		return 0x8212A69C;
		  /* 8212A69Ch */ case  295:  		/* li R4, 124 */
		/* 8212A69Ch case  295:*/		cpu::op::li<0>(regs,&regs.R4,0x7C);
		/* 8212A69Ch case  295:*/		return 0x8212A6A0;
		  /* 8212A6A0h */ case  296:  		/* b 3516 */
		/* 8212A6A0h case  296:*/		return 0x8212B45C;
		/* 8212A6A0h case  296:*/		return 0x8212A6A4;
		  /* 8212A6A4h */ case  297:  		/* li R4, 111 */
		/* 8212A6A4h case  297:*/		cpu::op::li<0>(regs,&regs.R4,0x6F);
		/* 8212A6A4h case  297:*/		return 0x8212A6A8;
		  /* 8212A6A8h */ case  298:  		/* b 3508 */
		/* 8212A6A8h case  298:*/		return 0x8212B45C;
		/* 8212A6A8h case  298:*/		return 0x8212A6AC;
		  /* 8212A6ACh */ case  299:  		/* li R4, 112 */
		/* 8212A6ACh case  299:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 8212A6ACh case  299:*/		return 0x8212A6B0;
		  /* 8212A6B0h */ case  300:  		/* b 3500 */
		/* 8212A6B0h case  300:*/		return 0x8212B45C;
		/* 8212A6B0h case  300:*/		return 0x8212A6B4;
		  /* 8212A6B4h */ case  301:  		/* li R4, 113 */
		/* 8212A6B4h case  301:*/		cpu::op::li<0>(regs,&regs.R4,0x71);
		/* 8212A6B4h case  301:*/		return 0x8212A6B8;
		  /* 8212A6B8h */ case  302:  		/* b 3492 */
		/* 8212A6B8h case  302:*/		return 0x8212B45C;
		/* 8212A6B8h case  302:*/		return 0x8212A6BC;
		  /* 8212A6BCh */ case  303:  		/* li R4, 114 */
		/* 8212A6BCh case  303:*/		cpu::op::li<0>(regs,&regs.R4,0x72);
		/* 8212A6BCh case  303:*/		return 0x8212A6C0;
		  /* 8212A6C0h */ case  304:  		/* b 3484 */
		/* 8212A6C0h case  304:*/		return 0x8212B45C;
		/* 8212A6C0h case  304:*/		return 0x8212A6C4;
		  /* 8212A6C4h */ case  305:  		/* li R4, 115 */
		/* 8212A6C4h case  305:*/		cpu::op::li<0>(regs,&regs.R4,0x73);
		/* 8212A6C4h case  305:*/		return 0x8212A6C8;
		  /* 8212A6C8h */ case  306:  		/* b 3476 */
		/* 8212A6C8h case  306:*/		return 0x8212B45C;
		/* 8212A6C8h case  306:*/		return 0x8212A6CC;
		  /* 8212A6CCh */ case  307:  		/* li R4, 116 */
		/* 8212A6CCh case  307:*/		cpu::op::li<0>(regs,&regs.R4,0x74);
		/* 8212A6CCh case  307:*/		return 0x8212A6D0;
		  /* 8212A6D0h */ case  308:  		/* b 3468 */
		/* 8212A6D0h case  308:*/		return 0x8212B45C;
		/* 8212A6D0h case  308:*/		return 0x8212A6D4;
		  /* 8212A6D4h */ case  309:  		/* li R4, 129 */
		/* 8212A6D4h case  309:*/		cpu::op::li<0>(regs,&regs.R4,0x81);
		/* 8212A6D4h case  309:*/		return 0x8212A6D8;
		  /* 8212A6D8h */ case  310:  		/* b 3460 */
		/* 8212A6D8h case  310:*/		return 0x8212B45C;
		/* 8212A6D8h case  310:*/		return 0x8212A6DC;
		  /* 8212A6DCh */ case  311:  		/* li R4, 117 */
		/* 8212A6DCh case  311:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 8212A6DCh case  311:*/		return 0x8212A6E0;
		  /* 8212A6E0h */ case  312:  		/* b 3452 */
		/* 8212A6E0h case  312:*/		return 0x8212B45C;
		/* 8212A6E0h case  312:*/		return 0x8212A6E4;
		  /* 8212A6E4h */ case  313:  		/* li R4, 118 */
		/* 8212A6E4h case  313:*/		cpu::op::li<0>(regs,&regs.R4,0x76);
		/* 8212A6E4h case  313:*/		return 0x8212A6E8;
		  /* 8212A6E8h */ case  314:  		/* b 3444 */
		/* 8212A6E8h case  314:*/		return 0x8212B45C;
		/* 8212A6E8h case  314:*/		return 0x8212A6EC;
		  /* 8212A6ECh */ case  315:  		/* li R4, 125 */
		/* 8212A6ECh case  315:*/		cpu::op::li<0>(regs,&regs.R4,0x7D);
		/* 8212A6ECh case  315:*/		return 0x8212A6F0;
		  /* 8212A6F0h */ case  316:  		/* b 3436 */
		/* 8212A6F0h case  316:*/		return 0x8212B45C;
		/* 8212A6F0h case  316:*/		return 0x8212A6F4;
		  /* 8212A6F4h */ case  317:  		/* li R4, 119 */
		/* 8212A6F4h case  317:*/		cpu::op::li<0>(regs,&regs.R4,0x77);
		/* 8212A6F4h case  317:*/		return 0x8212A6F8;
		  /* 8212A6F8h */ case  318:  		/* b 3428 */
		/* 8212A6F8h case  318:*/		return 0x8212B45C;
		/* 8212A6F8h case  318:*/		return 0x8212A6FC;
		  /* 8212A6FCh */ case  319:  		/* li R5, 1 */
		/* 8212A6FCh case  319:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A6FCh case  319:*/		return 0x8212A700;
		  /* 8212A700h */ case  320:  		/* li R4, 120 */
		/* 8212A700h case  320:*/		cpu::op::li<0>(regs,&regs.R4,0x78);
		/* 8212A700h case  320:*/		return 0x8212A704;
		  /* 8212A704h */ case  321:  		/* b 3420 */
		/* 8212A704h case  321:*/		return 0x8212B460;
		/* 8212A704h case  321:*/		return 0x8212A708;
		  /* 8212A708h */ case  322:  		/* li R4, 126 */
		/* 8212A708h case  322:*/		cpu::op::li<0>(regs,&regs.R4,0x7E);
		/* 8212A708h case  322:*/		return 0x8212A70C;
		  /* 8212A70Ch */ case  323:  		/* b 3408 */
		/* 8212A70Ch case  323:*/		return 0x8212B45C;
		/* 8212A70Ch case  323:*/		return 0x8212A710;
		  /* 8212A710h */ case  324:  		/* li R4, 127 */
		/* 8212A710h case  324:*/		cpu::op::li<0>(regs,&regs.R4,0x7F);
		/* 8212A710h case  324:*/		return 0x8212A714;
		  /* 8212A714h */ case  325:  		/* b 3400 */
		/* 8212A714h case  325:*/		return 0x8212B45C;
		/* 8212A714h case  325:*/		return 0x8212A718;
		  /* 8212A718h */ case  326:  		/* li R4, 128 */
		/* 8212A718h case  326:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 8212A718h case  326:*/		return 0x8212A71C;
		  /* 8212A71Ch */ case  327:  		/* b 3392 */
		/* 8212A71Ch case  327:*/		return 0x8212B45C;
		/* 8212A71Ch case  327:*/		return 0x8212A720;
		  /* 8212A720h */ case  328:  		/* li R5, 1 */
		/* 8212A720h case  328:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A720h case  328:*/		return 0x8212A724;
		  /* 8212A724h */ case  329:  		/* li R4, 130 */
		/* 8212A724h case  329:*/		cpu::op::li<0>(regs,&regs.R4,0x82);
		/* 8212A724h case  329:*/		return 0x8212A728;
		  /* 8212A728h */ case  330:  		/* b 3384 */
		/* 8212A728h case  330:*/		return 0x8212B460;
		/* 8212A728h case  330:*/		return 0x8212A72C;
		  /* 8212A72Ch */ case  331:  		/* li R5, 1 */
		/* 8212A72Ch case  331:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A72Ch case  331:*/		return 0x8212A730;
		  /* 8212A730h */ case  332:  		/* li R4, 131 */
		/* 8212A730h case  332:*/		cpu::op::li<0>(regs,&regs.R4,0x83);
		/* 8212A730h case  332:*/		return 0x8212A734;
		  /* 8212A734h */ case  333:  		/* b 3372 */
		/* 8212A734h case  333:*/		return 0x8212B460;
		/* 8212A734h case  333:*/		return 0x8212A738;
		  /* 8212A738h */ case  334:  		/* li R5, 1 */
		/* 8212A738h case  334:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A738h case  334:*/		return 0x8212A73C;
		  /* 8212A73Ch */ case  335:  		/* li R4, 132 */
		/* 8212A73Ch case  335:*/		cpu::op::li<0>(regs,&regs.R4,0x84);
		/* 8212A73Ch case  335:*/		return 0x8212A740;
		  /* 8212A740h */ case  336:  		/* b 3360 */
		/* 8212A740h case  336:*/		return 0x8212B460;
		/* 8212A740h case  336:*/		return 0x8212A744;
		  /* 8212A744h */ case  337:  		/* li R5, 2 */
		/* 8212A744h case  337:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A744h case  337:*/		return 0x8212A748;
		  /* 8212A748h */ case  338:  		/* li R4, 121 */
		/* 8212A748h case  338:*/		cpu::op::li<0>(regs,&regs.R4,0x79);
		/* 8212A748h case  338:*/		return 0x8212A74C;
		  /* 8212A74Ch */ case  339:  		/* b 3348 */
		/* 8212A74Ch case  339:*/		return 0x8212B460;
		/* 8212A74Ch case  339:*/		return 0x8212A750;
		  /* 8212A750h */ case  340:  		/* li R5, 2 */
		/* 8212A750h case  340:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A750h case  340:*/		return 0x8212A754;
		  /* 8212A754h */ case  341:  		/* li R4, 122 */
		/* 8212A754h case  341:*/		cpu::op::li<0>(regs,&regs.R4,0x7A);
		/* 8212A754h case  341:*/		return 0x8212A758;
		  /* 8212A758h */ case  342:  		/* b 3336 */
		/* 8212A758h case  342:*/		return 0x8212B460;
		/* 8212A758h case  342:*/		return 0x8212A75C;
		  /* 8212A75Ch */ case  343:  		/* li R4, 134 */
		/* 8212A75Ch case  343:*/		cpu::op::li<0>(regs,&regs.R4,0x86);
		/* 8212A75Ch case  343:*/		return 0x8212A760;
		  /* 8212A760h */ case  344:  		/* b 3324 */
		/* 8212A760h case  344:*/		return 0x8212B45C;
		/* 8212A760h case  344:*/		return 0x8212A764;
		  /* 8212A764h */ case  345:  		/* li R4, 133 */
		/* 8212A764h case  345:*/		cpu::op::li<0>(regs,&regs.R4,0x85);
		/* 8212A764h case  345:*/		return 0x8212A768;
		  /* 8212A768h */ case  346:  		/* b 3316 */
		/* 8212A768h case  346:*/		return 0x8212B45C;
		/* 8212A768h case  346:*/		return 0x8212A76C;
		  /* 8212A76Ch */ case  347:  		/* li R5, 2 */
		/* 8212A76Ch case  347:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A76Ch case  347:*/		return 0x8212A770;
		  /* 8212A770h */ case  348:  		/* li R4, 138 */
		/* 8212A770h case  348:*/		cpu::op::li<0>(regs,&regs.R4,0x8A);
		/* 8212A770h case  348:*/		return 0x8212A774;
		  /* 8212A774h */ case  349:  		/* b 3308 */
		/* 8212A774h case  349:*/		return 0x8212B460;
		/* 8212A774h case  349:*/		return 0x8212A778;
		  /* 8212A778h */ case  350:  		/* li R5, 3 */
		/* 8212A778h case  350:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A778h case  350:*/		return 0x8212A77C;
		  /* 8212A77Ch */ case  351:  		/* li R4, 139 */
		/* 8212A77Ch case  351:*/		cpu::op::li<0>(regs,&regs.R4,0x8B);
		/* 8212A77Ch case  351:*/		return 0x8212A780;
		  /* 8212A780h */ case  352:  		/* b 3296 */
		/* 8212A780h case  352:*/		return 0x8212B460;
		/* 8212A780h case  352:*/		return 0x8212A784;
		  /* 8212A784h */ case  353:  		/* li R5, 3 */
		/* 8212A784h case  353:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A784h case  353:*/		return 0x8212A788;
		  /* 8212A788h */ case  354:  		/* li R4, 140 */
		/* 8212A788h case  354:*/		cpu::op::li<0>(regs,&regs.R4,0x8C);
		/* 8212A788h case  354:*/		return 0x8212A78C;
		  /* 8212A78Ch */ case  355:  		/* b 3284 */
		/* 8212A78Ch case  355:*/		return 0x8212B460;
		/* 8212A78Ch case  355:*/		return 0x8212A790;
		  /* 8212A790h */ case  356:  		/* li R5, 4 */
		/* 8212A790h case  356:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212A790h case  356:*/		return 0x8212A794;
		  /* 8212A794h */ case  357:  		/* li R4, 141 */
		/* 8212A794h case  357:*/		cpu::op::li<0>(regs,&regs.R4,0x8D);
		/* 8212A794h case  357:*/		return 0x8212A798;
		  /* 8212A798h */ case  358:  		/* b 3272 */
		/* 8212A798h case  358:*/		return 0x8212B460;
		/* 8212A798h case  358:*/		return 0x8212A79C;
		  /* 8212A79Ch */ case  359:  		/* li R5, 1 */
		/* 8212A79Ch case  359:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A79Ch case  359:*/		return 0x8212A7A0;
		  /* 8212A7A0h */ case  360:  		/* li R4, 142 */
		/* 8212A7A0h case  360:*/		cpu::op::li<0>(regs,&regs.R4,0x8E);
		/* 8212A7A0h case  360:*/		return 0x8212A7A4;
		  /* 8212A7A4h */ case  361:  		/* b 3260 */
		/* 8212A7A4h case  361:*/		return 0x8212B460;
		/* 8212A7A4h case  361:*/		return 0x8212A7A8;
		  /* 8212A7A8h */ case  362:  		/* li R5, 2 */
		/* 8212A7A8h case  362:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A7A8h case  362:*/		return 0x8212A7AC;
		  /* 8212A7ACh */ case  363:  		/* li R4, 143 */
		/* 8212A7ACh case  363:*/		cpu::op::li<0>(regs,&regs.R4,0x8F);
		/* 8212A7ACh case  363:*/		return 0x8212A7B0;
		  /* 8212A7B0h */ case  364:  		/* b 3248 */
		/* 8212A7B0h case  364:*/		return 0x8212B460;
		/* 8212A7B0h case  364:*/		return 0x8212A7B4;
		  /* 8212A7B4h */ case  365:  		/* li R4, 144 */
		/* 8212A7B4h case  365:*/		cpu::op::li<0>(regs,&regs.R4,0x90);
		/* 8212A7B4h case  365:*/		return 0x8212A7B8;
		  /* 8212A7B8h */ case  366:  		/* b 3236 */
		/* 8212A7B8h case  366:*/		return 0x8212B45C;
		/* 8212A7B8h case  366:*/		return 0x8212A7BC;
		  /* 8212A7BCh */ case  367:  		/* li R5, 1 */
		/* 8212A7BCh case  367:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A7BCh case  367:*/		return 0x8212A7C0;
		  /* 8212A7C0h */ case  368:  		/* li R4, 145 */
		/* 8212A7C0h case  368:*/		cpu::op::li<0>(regs,&regs.R4,0x91);
		/* 8212A7C0h case  368:*/		return 0x8212A7C4;
		  /* 8212A7C4h */ case  369:  		/* b 3228 */
		/* 8212A7C4h case  369:*/		return 0x8212B460;
		/* 8212A7C4h case  369:*/		return 0x8212A7C8;
		  /* 8212A7C8h */ case  370:  		/* li R5, 2 */
		/* 8212A7C8h case  370:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A7C8h case  370:*/		return 0x8212A7CC;
		  /* 8212A7CCh */ case  371:  		/* li R4, 146 */
		/* 8212A7CCh case  371:*/		cpu::op::li<0>(regs,&regs.R4,0x92);
		/* 8212A7CCh case  371:*/		return 0x8212A7D0;
		  /* 8212A7D0h */ case  372:  		/* b 3216 */
		/* 8212A7D0h case  372:*/		return 0x8212B460;
		/* 8212A7D0h case  372:*/		return 0x8212A7D4;
		  /* 8212A7D4h */ case  373:  		/* li R5, 2 */
		/* 8212A7D4h case  373:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A7D4h case  373:*/		return 0x8212A7D8;
		  /* 8212A7D8h */ case  374:  		/* li R4, 147 */
		/* 8212A7D8h case  374:*/		cpu::op::li<0>(regs,&regs.R4,0x93);
		/* 8212A7D8h case  374:*/		return 0x8212A7DC;
		  /* 8212A7DCh */ case  375:  		/* b 3204 */
		/* 8212A7DCh case  375:*/		return 0x8212B460;
		/* 8212A7DCh case  375:*/		return 0x8212A7E0;
		  /* 8212A7E0h */ case  376:  		/* li R5, 3 */
		/* 8212A7E0h case  376:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A7E0h case  376:*/		return 0x8212A7E4;
		  /* 8212A7E4h */ case  377:  		/* li R4, 148 */
		/* 8212A7E4h case  377:*/		cpu::op::li<0>(regs,&regs.R4,0x94);
		/* 8212A7E4h case  377:*/		return 0x8212A7E8;
		  /* 8212A7E8h */ case  378:  		/* b 3192 */
		/* 8212A7E8h case  378:*/		return 0x8212B460;
		/* 8212A7E8h case  378:*/		return 0x8212A7EC;
		  /* 8212A7ECh */ case  379:  		/* li R4, 149 */
		/* 8212A7ECh case  379:*/		cpu::op::li<0>(regs,&regs.R4,0x95);
		/* 8212A7ECh case  379:*/		return 0x8212A7F0;
		  /* 8212A7F0h */ case  380:  		/* b 3180 */
		/* 8212A7F0h case  380:*/		return 0x8212B45C;
		/* 8212A7F0h case  380:*/		return 0x8212A7F4;
		  /* 8212A7F4h */ case  381:  		/* li R5, 1 */
		/* 8212A7F4h case  381:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A7F4h case  381:*/		return 0x8212A7F8;
		  /* 8212A7F8h */ case  382:  		/* li R4, 150 */
		/* 8212A7F8h case  382:*/		cpu::op::li<0>(regs,&regs.R4,0x96);
		/* 8212A7F8h case  382:*/		return 0x8212A7FC;
		  /* 8212A7FCh */ case  383:  		/* b 3172 */
		/* 8212A7FCh case  383:*/		return 0x8212B460;
		/* 8212A7FCh case  383:*/		return 0x8212A800;
		  /* 8212A800h */ case  384:  		/* li R5, 1 */
		/* 8212A800h case  384:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A800h case  384:*/		return 0x8212A804;
		  /* 8212A804h */ case  385:  		/* li R4, 151 */
		/* 8212A804h case  385:*/		cpu::op::li<0>(regs,&regs.R4,0x97);
		/* 8212A804h case  385:*/		return 0x8212A808;
		  /* 8212A808h */ case  386:  		/* b 3160 */
		/* 8212A808h case  386:*/		return 0x8212B460;
		/* 8212A808h case  386:*/		return 0x8212A80C;
		  /* 8212A80Ch */ case  387:  		/* li R5, 1 */
		/* 8212A80Ch case  387:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A80Ch case  387:*/		return 0x8212A810;
		  /* 8212A810h */ case  388:  		/* li R4, 152 */
		/* 8212A810h case  388:*/		cpu::op::li<0>(regs,&regs.R4,0x98);
		/* 8212A810h case  388:*/		return 0x8212A814;
		  /* 8212A814h */ case  389:  		/* b 3148 */
		/* 8212A814h case  389:*/		return 0x8212B460;
		/* 8212A814h case  389:*/		return 0x8212A818;
		  /* 8212A818h */ case  390:  		/* li R5, 1 */
		/* 8212A818h case  390:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A818h case  390:*/		return 0x8212A81C;
		  /* 8212A81Ch */ case  391:  		/* li R4, 153 */
		/* 8212A81Ch case  391:*/		cpu::op::li<0>(regs,&regs.R4,0x99);
		/* 8212A81Ch case  391:*/		return 0x8212A820;
		  /* 8212A820h */ case  392:  		/* b 3136 */
		/* 8212A820h case  392:*/		return 0x8212B460;
		/* 8212A820h case  392:*/		return 0x8212A824;
		  /* 8212A824h */ case  393:  		/* li R5, 1 */
		/* 8212A824h case  393:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A824h case  393:*/		return 0x8212A828;
		  /* 8212A828h */ case  394:  		/* li R4, 154 */
		/* 8212A828h case  394:*/		cpu::op::li<0>(regs,&regs.R4,0x9A);
		/* 8212A828h case  394:*/		return 0x8212A82C;
		  /* 8212A82Ch */ case  395:  		/* b 3124 */
		/* 8212A82Ch case  395:*/		return 0x8212B460;
		/* 8212A82Ch case  395:*/		return 0x8212A830;
		  /* 8212A830h */ case  396:  		/* li R5, 2 */
		/* 8212A830h case  396:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A830h case  396:*/		return 0x8212A834;
		  /* 8212A834h */ case  397:  		/* li R4, 155 */
		/* 8212A834h case  397:*/		cpu::op::li<0>(regs,&regs.R4,0x9B);
		/* 8212A834h case  397:*/		return 0x8212A838;
		  /* 8212A838h */ case  398:  		/* b 3112 */
		/* 8212A838h case  398:*/		return 0x8212B460;
		/* 8212A838h case  398:*/		return 0x8212A83C;
		  /* 8212A83Ch */ case  399:  		/* li R4, 156 */
		/* 8212A83Ch case  399:*/		cpu::op::li<0>(regs,&regs.R4,0x9C);
		/* 8212A83Ch case  399:*/		return 0x8212A840;
		  /* 8212A840h */ case  400:  		/* b 3100 */
		/* 8212A840h case  400:*/		return 0x8212B45C;
		/* 8212A840h case  400:*/		return 0x8212A844;
		  /* 8212A844h */ case  401:  		/* li R5, 1 */
		/* 8212A844h case  401:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A844h case  401:*/		return 0x8212A848;
		  /* 8212A848h */ case  402:  		/* li R4, 157 */
		/* 8212A848h case  402:*/		cpu::op::li<0>(regs,&regs.R4,0x9D);
		/* 8212A848h case  402:*/		return 0x8212A84C;
		  /* 8212A84Ch */ case  403:  		/* b 3092 */
		/* 8212A84Ch case  403:*/		return 0x8212B460;
		/* 8212A84Ch case  403:*/		return 0x8212A850;
		  /* 8212A850h */ case  404:  		/* li R5, 1 */
		/* 8212A850h case  404:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A850h case  404:*/		return 0x8212A854;
		  /* 8212A854h */ case  405:  		/* li R4, 158 */
		/* 8212A854h case  405:*/		cpu::op::li<0>(regs,&regs.R4,0x9E);
		/* 8212A854h case  405:*/		return 0x8212A858;
		  /* 8212A858h */ case  406:  		/* b 3080 */
		/* 8212A858h case  406:*/		return 0x8212B460;
		/* 8212A858h case  406:*/		return 0x8212A85C;
		  /* 8212A85Ch */ case  407:  		/* li R5, 2 */
		/* 8212A85Ch case  407:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A85Ch case  407:*/		return 0x8212A860;
		  /* 8212A860h */ case  408:  		/* li R4, 159 */
		/* 8212A860h case  408:*/		cpu::op::li<0>(regs,&regs.R4,0x9F);
		/* 8212A860h case  408:*/		return 0x8212A864;
		  /* 8212A864h */ case  409:  		/* b 3068 */
		/* 8212A864h case  409:*/		return 0x8212B460;
		/* 8212A864h case  409:*/		return 0x8212A868;
		  /* 8212A868h */ case  410:  		/* li R5, 1 */
		/* 8212A868h case  410:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A868h case  410:*/		return 0x8212A86C;
		  /* 8212A86Ch */ case  411:  		/* li R4, 160 */
		/* 8212A86Ch case  411:*/		cpu::op::li<0>(regs,&regs.R4,0xA0);
		/* 8212A86Ch case  411:*/		return 0x8212A870;
		  /* 8212A870h */ case  412:  		/* b 3056 */
		/* 8212A870h case  412:*/		return 0x8212B460;
		/* 8212A870h case  412:*/		return 0x8212A874;
		  /* 8212A874h */ case  413:  		/* li R5, 2 */
		/* 8212A874h case  413:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A874h case  413:*/		return 0x8212A878;
		  /* 8212A878h */ case  414:  		/* li R4, 161 */
		/* 8212A878h case  414:*/		cpu::op::li<0>(regs,&regs.R4,0xA1);
		/* 8212A878h case  414:*/		return 0x8212A87C;
		  /* 8212A87Ch */ case  415:  		/* b 3044 */
		/* 8212A87Ch case  415:*/		return 0x8212B460;
		/* 8212A87Ch case  415:*/		return 0x8212A880;
		  /* 8212A880h */ case  416:  		/* li R5, 2 */
		/* 8212A880h case  416:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A880h case  416:*/		return 0x8212A884;
		  /* 8212A884h */ case  417:  		/* li R4, 162 */
		/* 8212A884h case  417:*/		cpu::op::li<0>(regs,&regs.R4,0xA2);
		/* 8212A884h case  417:*/		return 0x8212A888;
		  /* 8212A888h */ case  418:  		/* b 3032 */
		/* 8212A888h case  418:*/		return 0x8212B460;
		/* 8212A888h case  418:*/		return 0x8212A88C;
		  /* 8212A88Ch */ case  419:  		/* li R5, 3 */
		/* 8212A88Ch case  419:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A88Ch case  419:*/		return 0x8212A890;
		  /* 8212A890h */ case  420:  		/* li R4, 163 */
		/* 8212A890h case  420:*/		cpu::op::li<0>(regs,&regs.R4,0xA3);
		/* 8212A890h case  420:*/		return 0x8212A894;
		  /* 8212A894h */ case  421:  		/* b 3020 */
		/* 8212A894h case  421:*/		return 0x8212B460;
		/* 8212A894h case  421:*/		return 0x8212A898;
		  /* 8212A898h */ case  422:  		/* li R5, 1 */
		/* 8212A898h case  422:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A898h case  422:*/		return 0x8212A89C;
		  /* 8212A89Ch */ case  423:  		/* li R4, 164 */
		/* 8212A89Ch case  423:*/		cpu::op::li<0>(regs,&regs.R4,0xA4);
		/* 8212A89Ch case  423:*/		return 0x8212A8A0;
		  /* 8212A8A0h */ case  424:  		/* b 3008 */
		/* 8212A8A0h case  424:*/		return 0x8212B460;
		/* 8212A8A0h case  424:*/		return 0x8212A8A4;
		  /* 8212A8A4h */ case  425:  		/* li R5, 3 */
		/* 8212A8A4h case  425:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A8A4h case  425:*/		return 0x8212A8A8;
		  /* 8212A8A8h */ case  426:  		/* li R4, 165 */
		/* 8212A8A8h case  426:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 8212A8A8h case  426:*/		return 0x8212A8AC;
		  /* 8212A8ACh */ case  427:  		/* b 2996 */
		/* 8212A8ACh case  427:*/		return 0x8212B460;
		/* 8212A8ACh case  427:*/		return 0x8212A8B0;
		  /* 8212A8B0h */ case  428:  		/* li R5, 2 */
		/* 8212A8B0h case  428:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A8B0h case  428:*/		return 0x8212A8B4;
		  /* 8212A8B4h */ case  429:  		/* li R4, 166 */
		/* 8212A8B4h case  429:*/		cpu::op::li<0>(regs,&regs.R4,0xA6);
		/* 8212A8B4h case  429:*/		return 0x8212A8B8;
		  /* 8212A8B8h */ case  430:  		/* b 2984 */
		/* 8212A8B8h case  430:*/		return 0x8212B460;
		/* 8212A8B8h case  430:*/		return 0x8212A8BC;
		  /* 8212A8BCh */ case  431:  		/* li R5, 3 */
		/* 8212A8BCh case  431:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212A8BCh case  431:*/		return 0x8212A8C0;
		  /* 8212A8C0h */ case  432:  		/* li R4, 167 */
		/* 8212A8C0h case  432:*/		cpu::op::li<0>(regs,&regs.R4,0xA7);
		/* 8212A8C0h case  432:*/		return 0x8212A8C4;
		  /* 8212A8C4h */ case  433:  		/* b 2972 */
		/* 8212A8C4h case  433:*/		return 0x8212B460;
		/* 8212A8C4h case  433:*/		return 0x8212A8C8;
		  /* 8212A8C8h */ case  434:  		/* li R4, 168 */
		/* 8212A8C8h case  434:*/		cpu::op::li<0>(regs,&regs.R4,0xA8);
		/* 8212A8C8h case  434:*/		return 0x8212A8CC;
		  /* 8212A8CCh */ case  435:  		/* b 2960 */
		/* 8212A8CCh case  435:*/		return 0x8212B45C;
		/* 8212A8CCh case  435:*/		return 0x8212A8D0;
		  /* 8212A8D0h */ case  436:  		/* li R5, 1 */
		/* 8212A8D0h case  436:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A8D0h case  436:*/		return 0x8212A8D4;
		  /* 8212A8D4h */ case  437:  		/* li R4, 169 */
		/* 8212A8D4h case  437:*/		cpu::op::li<0>(regs,&regs.R4,0xA9);
		/* 8212A8D4h case  437:*/		return 0x8212A8D8;
		  /* 8212A8D8h */ case  438:  		/* b 2952 */
		/* 8212A8D8h case  438:*/		return 0x8212B460;
		/* 8212A8D8h case  438:*/		return 0x8212A8DC;
		  /* 8212A8DCh */ case  439:  		/* li R4, 170 */
		/* 8212A8DCh case  439:*/		cpu::op::li<0>(regs,&regs.R4,0xAA);
		/* 8212A8DCh case  439:*/		return 0x8212A8E0;
		  /* 8212A8E0h */ case  440:  		/* b 2940 */
		/* 8212A8E0h case  440:*/		return 0x8212B45C;
		/* 8212A8E0h case  440:*/		return 0x8212A8E4;
		  /* 8212A8E4h */ case  441:  		/* li R5, 1 */
		/* 8212A8E4h case  441:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A8E4h case  441:*/		return 0x8212A8E8;
		  /* 8212A8E8h */ case  442:  		/* li R4, 171 */
		/* 8212A8E8h case  442:*/		cpu::op::li<0>(regs,&regs.R4,0xAB);
		/* 8212A8E8h case  442:*/		return 0x8212A8EC;
		  /* 8212A8ECh */ case  443:  		/* b 2932 */
		/* 8212A8ECh case  443:*/		return 0x8212B460;
		/* 8212A8ECh case  443:*/		return 0x8212A8F0;
		  /* 8212A8F0h */ case  444:  		/* li R5, 2 */
		/* 8212A8F0h case  444:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A8F0h case  444:*/		return 0x8212A8F4;
		  /* 8212A8F4h */ case  445:  		/* li R4, 172 */
		/* 8212A8F4h case  445:*/		cpu::op::li<0>(regs,&regs.R4,0xAC);
		/* 8212A8F4h case  445:*/		return 0x8212A8F8;
		  /* 8212A8F8h */ case  446:  		/* b 2920 */
		/* 8212A8F8h case  446:*/		return 0x8212B460;
		/* 8212A8F8h case  446:*/		return 0x8212A8FC;
		  /* 8212A8FCh */ case  447:  		/* li R4, 173 */
		/* 8212A8FCh case  447:*/		cpu::op::li<0>(regs,&regs.R4,0xAD);
		/* 8212A8FCh case  447:*/		return 0x8212A900;
		  /* 8212A900h */ case  448:  		/* b 2908 */
		/* 8212A900h case  448:*/		return 0x8212B45C;
		/* 8212A900h case  448:*/		return 0x8212A904;
		  /* 8212A904h */ case  449:  		/* li R5, 1 */
		/* 8212A904h case  449:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A904h case  449:*/		return 0x8212A908;
		  /* 8212A908h */ case  450:  		/* li R4, 174 */
		/* 8212A908h case  450:*/		cpu::op::li<0>(regs,&regs.R4,0xAE);
		/* 8212A908h case  450:*/		return 0x8212A90C;
		  /* 8212A90Ch */ case  451:  		/* b 2900 */
		/* 8212A90Ch case  451:*/		return 0x8212B460;
		/* 8212A90Ch case  451:*/		return 0x8212A910;
		  /* 8212A910h */ case  452:  		/* li R5, 1 */
		/* 8212A910h case  452:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A910h case  452:*/		return 0x8212A914;
		  /* 8212A914h */ case  453:  		/* li R4, 175 */
		/* 8212A914h case  453:*/		cpu::op::li<0>(regs,&regs.R4,0xAF);
		/* 8212A914h case  453:*/		return 0x8212A918;
		  /* 8212A918h */ case  454:  		/* b 2888 */
		/* 8212A918h case  454:*/		return 0x8212B460;
		/* 8212A918h case  454:*/		return 0x8212A91C;
		  /* 8212A91Ch */ case  455:  		/* li R5, 2 */
		/* 8212A91Ch case  455:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A91Ch case  455:*/		return 0x8212A920;
		  /* 8212A920h */ case  456:  		/* li R4, 176 */
		/* 8212A920h case  456:*/		cpu::op::li<0>(regs,&regs.R4,0xB0);
		/* 8212A920h case  456:*/		return 0x8212A924;
		  /* 8212A924h */ case  457:  		/* b 2876 */
		/* 8212A924h case  457:*/		return 0x8212B460;
		/* 8212A924h case  457:*/		return 0x8212A928;
		  /* 8212A928h */ case  458:  		/* li R5, 1 */
		/* 8212A928h case  458:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A928h case  458:*/		return 0x8212A92C;
		  /* 8212A92Ch */ case  459:  		/* li R4, 177 */
		/* 8212A92Ch case  459:*/		cpu::op::li<0>(regs,&regs.R4,0xB1);
		/* 8212A92Ch case  459:*/		return 0x8212A930;
		  /* 8212A930h */ case  460:  		/* b 2864 */
		/* 8212A930h case  460:*/		return 0x8212B460;
		/* 8212A930h case  460:*/		return 0x8212A934;
		  /* 8212A934h */ case  461:  		/* li R5, 1 */
		/* 8212A934h case  461:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A934h case  461:*/		return 0x8212A938;
		  /* 8212A938h */ case  462:  		/* li R4, 178 */
		/* 8212A938h case  462:*/		cpu::op::li<0>(regs,&regs.R4,0xB2);
		/* 8212A938h case  462:*/		return 0x8212A93C;
		  /* 8212A93Ch */ case  463:  		/* b 2852 */
		/* 8212A93Ch case  463:*/		return 0x8212B460;
		/* 8212A93Ch case  463:*/		return 0x8212A940;
		  /* 8212A940h */ case  464:  		/* li R5, 1 */
		/* 8212A940h case  464:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A940h case  464:*/		return 0x8212A944;
		  /* 8212A944h */ case  465:  		/* li R4, 179 */
		/* 8212A944h case  465:*/		cpu::op::li<0>(regs,&regs.R4,0xB3);
		/* 8212A944h case  465:*/		return 0x8212A948;
		  /* 8212A948h */ case  466:  		/* b 2840 */
		/* 8212A948h case  466:*/		return 0x8212B460;
		/* 8212A948h case  466:*/		return 0x8212A94C;
		  /* 8212A94Ch */ case  467:  		/* li R5, 1 */
		/* 8212A94Ch case  467:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A94Ch case  467:*/		return 0x8212A950;
		  /* 8212A950h */ case  468:  		/* li R4, 180 */
		/* 8212A950h case  468:*/		cpu::op::li<0>(regs,&regs.R4,0xB4);
		/* 8212A950h case  468:*/		return 0x8212A954;
		  /* 8212A954h */ case  469:  		/* b 2828 */
		/* 8212A954h case  469:*/		return 0x8212B460;
		/* 8212A954h case  469:*/		return 0x8212A958;
		  /* 8212A958h */ case  470:  		/* li R5, 1 */
		/* 8212A958h case  470:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A958h case  470:*/		return 0x8212A95C;
		  /* 8212A95Ch */ case  471:  		/* li R4, 181 */
		/* 8212A95Ch case  471:*/		cpu::op::li<0>(regs,&regs.R4,0xB5);
		/* 8212A95Ch case  471:*/		return 0x8212A960;
		  /* 8212A960h */ case  472:  		/* b 2816 */
		/* 8212A960h case  472:*/		return 0x8212B460;
		/* 8212A960h case  472:*/		return 0x8212A964;
		  /* 8212A964h */ case  473:  		/* li R4, 182 */
		/* 8212A964h case  473:*/		cpu::op::li<0>(regs,&regs.R4,0xB6);
		/* 8212A964h case  473:*/		return 0x8212A968;
		  /* 8212A968h */ case  474:  		/* b 2804 */
		/* 8212A968h case  474:*/		return 0x8212B45C;
		/* 8212A968h case  474:*/		return 0x8212A96C;
		  /* 8212A96Ch */ case  475:  		/* li R5, 1 */
		/* 8212A96Ch case  475:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A96Ch case  475:*/		return 0x8212A970;
		  /* 8212A970h */ case  476:  		/* li R4, 183 */
		/* 8212A970h case  476:*/		cpu::op::li<0>(regs,&regs.R4,0xB7);
		/* 8212A970h case  476:*/		return 0x8212A974;
		  /* 8212A974h */ case  477:  		/* b 2796 */
		/* 8212A974h case  477:*/		return 0x8212B460;
		/* 8212A974h case  477:*/		return 0x8212A978;
		  /* 8212A978h */ case  478:  		/* li R5, 2 */
		/* 8212A978h case  478:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A978h case  478:*/		return 0x8212A97C;
		  /* 8212A97Ch */ case  479:  		/* li R4, 184 */
		/* 8212A97Ch case  479:*/		cpu::op::li<0>(regs,&regs.R4,0xB8);
		/* 8212A97Ch case  479:*/		return 0x8212A980;
		  /* 8212A980h */ case  480:  		/* b 2784 */
		/* 8212A980h case  480:*/		return 0x8212B460;
		/* 8212A980h case  480:*/		return 0x8212A984;
		  /* 8212A984h */ case  481:  		/* li R5, 2 */
		/* 8212A984h case  481:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A984h case  481:*/		return 0x8212A988;
		  /* 8212A988h */ case  482:  		/* li R4, 185 */
		/* 8212A988h case  482:*/		cpu::op::li<0>(regs,&regs.R4,0xB9);
		/* 8212A988h case  482:*/		return 0x8212A98C;
		  /* 8212A98Ch */ case  483:  		/* b 2772 */
		/* 8212A98Ch case  483:*/		return 0x8212B460;
		/* 8212A98Ch case  483:*/		return 0x8212A990;
		  /* 8212A990h */ case  484:  		/* li R5, 1 */
		/* 8212A990h case  484:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A990h case  484:*/		return 0x8212A994;
		  /* 8212A994h */ case  485:  		/* li R4, 186 */
		/* 8212A994h case  485:*/		cpu::op::li<0>(regs,&regs.R4,0xBA);
		/* 8212A994h case  485:*/		return 0x8212A998;
		  /* 8212A998h */ case  486:  		/* b 2760 */
		/* 8212A998h case  486:*/		return 0x8212B460;
		/* 8212A998h case  486:*/		return 0x8212A99C;
		  /* 8212A99Ch */ case  487:  		/* li R5, 2 */
		/* 8212A99Ch case  487:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A99Ch case  487:*/		return 0x8212A9A0;
		  /* 8212A9A0h */ case  488:  		/* li R4, 187 */
		/* 8212A9A0h case  488:*/		cpu::op::li<0>(regs,&regs.R4,0xBB);
		/* 8212A9A0h case  488:*/		return 0x8212A9A4;
		  /* 8212A9A4h */ case  489:  		/* b 2748 */
		/* 8212A9A4h case  489:*/		return 0x8212B460;
		/* 8212A9A4h case  489:*/		return 0x8212A9A8;
		  /* 8212A9A8h */ case  490:  		/* li R5, 4 */
		/* 8212A9A8h case  490:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212A9A8h case  490:*/		return 0x8212A9AC;
		  /* 8212A9ACh */ case  491:  		/* li R4, 188 */
		/* 8212A9ACh case  491:*/		cpu::op::li<0>(regs,&regs.R4,0xBC);
		/* 8212A9ACh case  491:*/		return 0x8212A9B0;
		  /* 8212A9B0h */ case  492:  		/* b 2736 */
		/* 8212A9B0h case  492:*/		return 0x8212B460;
		/* 8212A9B0h case  492:*/		return 0x8212A9B4;
		  /* 8212A9B4h */ case  493:  		/* li R5, 1 */
		/* 8212A9B4h case  493:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A9B4h case  493:*/		return 0x8212A9B8;
		  /* 8212A9B8h */ case  494:  		/* li R4, 189 */
		/* 8212A9B8h case  494:*/		cpu::op::li<0>(regs,&regs.R4,0xBD);
		/* 8212A9B8h case  494:*/		return 0x8212A9BC;
		  /* 8212A9BCh */ case  495:  		/* b 2724 */
		/* 8212A9BCh case  495:*/		return 0x8212B460;
		/* 8212A9BCh case  495:*/		return 0x8212A9C0;
		  /* 8212A9C0h */ case  496:  		/* li R5, 1 */
		/* 8212A9C0h case  496:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A9C0h case  496:*/		return 0x8212A9C4;
		  /* 8212A9C4h */ case  497:  		/* li R4, 190 */
		/* 8212A9C4h case  497:*/		cpu::op::li<0>(regs,&regs.R4,0xBE);
		/* 8212A9C4h case  497:*/		return 0x8212A9C8;
		  /* 8212A9C8h */ case  498:  		/* b 2712 */
		/* 8212A9C8h case  498:*/		return 0x8212B460;
		/* 8212A9C8h case  498:*/		return 0x8212A9CC;
		  /* 8212A9CCh */ case  499:  		/* li R5, 2 */
		/* 8212A9CCh case  499:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A9CCh case  499:*/		return 0x8212A9D0;
		  /* 8212A9D0h */ case  500:  		/* li R4, 191 */
		/* 8212A9D0h case  500:*/		cpu::op::li<0>(regs,&regs.R4,0xBF);
		/* 8212A9D0h case  500:*/		return 0x8212A9D4;
		  /* 8212A9D4h */ case  501:  		/* b 2700 */
		/* 8212A9D4h case  501:*/		return 0x8212B460;
		/* 8212A9D4h case  501:*/		return 0x8212A9D8;
		  /* 8212A9D8h */ case  502:  		/* li R5, 1 */
		/* 8212A9D8h case  502:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A9D8h case  502:*/		return 0x8212A9DC;
		  /* 8212A9DCh */ case  503:  		/* li R4, 192 */
		/* 8212A9DCh case  503:*/		cpu::op::li<0>(regs,&regs.R4,0xC0);
		/* 8212A9DCh case  503:*/		return 0x8212A9E0;
		  /* 8212A9E0h */ case  504:  		/* b 2688 */
		/* 8212A9E0h case  504:*/		return 0x8212B460;
		/* 8212A9E0h case  504:*/		return 0x8212A9E4;
		  /* 8212A9E4h */ case  505:  		/* li R5, 2 */
		/* 8212A9E4h case  505:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212A9E4h case  505:*/		return 0x8212A9E8;
		  /* 8212A9E8h */ case  506:  		/* li R4, 193 */
		/* 8212A9E8h case  506:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 8212A9E8h case  506:*/		return 0x8212A9EC;
		  /* 8212A9ECh */ case  507:  		/* b 2676 */
		/* 8212A9ECh case  507:*/		return 0x8212B460;
		/* 8212A9ECh case  507:*/		return 0x8212A9F0;
		  /* 8212A9F0h */ case  508:  		/* li R4, 194 */
		/* 8212A9F0h case  508:*/		cpu::op::li<0>(regs,&regs.R4,0xC2);
		/* 8212A9F0h case  508:*/		return 0x8212A9F4;
		  /* 8212A9F4h */ case  509:  		/* b 2664 */
		/* 8212A9F4h case  509:*/		return 0x8212B45C;
		/* 8212A9F4h case  509:*/		return 0x8212A9F8;
		  /* 8212A9F8h */ case  510:  		/* li R5, 1 */
		/* 8212A9F8h case  510:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212A9F8h case  510:*/		return 0x8212A9FC;
		  /* 8212A9FCh */ case  511:  		/* li R4, 195 */
		/* 8212A9FCh case  511:*/		cpu::op::li<0>(regs,&regs.R4,0xC3);
		/* 8212A9FCh case  511:*/		return 0x8212AA00;
		  /* 8212AA00h */ case  512:  		/* b 2656 */
		/* 8212AA00h case  512:*/		return 0x8212B460;
		/* 8212AA00h case  512:*/		return 0x8212AA04;
		  /* 8212AA04h */ case  513:  		/* li R5, 2 */
		/* 8212AA04h case  513:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AA04h case  513:*/		return 0x8212AA08;
		  /* 8212AA08h */ case  514:  		/* li R4, 196 */
		/* 8212AA08h case  514:*/		cpu::op::li<0>(regs,&regs.R4,0xC4);
		/* 8212AA08h case  514:*/		return 0x8212AA0C;
		  /* 8212AA0Ch */ case  515:  		/* b 2644 */
		/* 8212AA0Ch case  515:*/		return 0x8212B460;
		/* 8212AA0Ch case  515:*/		return 0x8212AA10;
		  /* 8212AA10h */ case  516:  		/* li R5, 1 */
		/* 8212AA10h case  516:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AA10h case  516:*/		return 0x8212AA14;
		  /* 8212AA14h */ case  517:  		/* li R4, 197 */
		/* 8212AA14h case  517:*/		cpu::op::li<0>(regs,&regs.R4,0xC5);
		/* 8212AA14h case  517:*/		return 0x8212AA18;
		  /* 8212AA18h */ case  518:  		/* b 2632 */
		/* 8212AA18h case  518:*/		return 0x8212B460;
		/* 8212AA18h case  518:*/		return 0x8212AA1C;
		  /* 8212AA1Ch */ case  519:  		/* li R5, 3 */
		/* 8212AA1Ch case  519:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AA1Ch case  519:*/		return 0x8212AA20;
		  /* 8212AA20h */ case  520:  		/* li R4, 198 */
		/* 8212AA20h case  520:*/		cpu::op::li<0>(regs,&regs.R4,0xC6);
		/* 8212AA20h case  520:*/		return 0x8212AA24;
		  /* 8212AA24h */ case  521:  		/* b 2620 */
		/* 8212AA24h case  521:*/		return 0x8212B460;
		/* 8212AA24h case  521:*/		return 0x8212AA28;
		  /* 8212AA28h */ case  522:  		/* li R5, 4 */
		/* 8212AA28h case  522:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212AA28h case  522:*/		return 0x8212AA2C;
		  /* 8212AA2Ch */ case  523:  		/* li R4, 199 */
		/* 8212AA2Ch case  523:*/		cpu::op::li<0>(regs,&regs.R4,0xC7);
		/* 8212AA2Ch case  523:*/		return 0x8212AA30;
		  /* 8212AA30h */ case  524:  		/* b 2608 */
		/* 8212AA30h case  524:*/		return 0x8212B460;
		/* 8212AA30h case  524:*/		return 0x8212AA34;
		  /* 8212AA34h */ case  525:  		/* li R5, 5 */
		/* 8212AA34h case  525:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212AA34h case  525:*/		return 0x8212AA38;
		  /* 8212AA38h */ case  526:  		/* li R4, 200 */
		/* 8212AA38h case  526:*/		cpu::op::li<0>(regs,&regs.R4,0xC8);
		/* 8212AA38h case  526:*/		return 0x8212AA3C;
		  /* 8212AA3Ch */ case  527:  		/* b 2596 */
		/* 8212AA3Ch case  527:*/		return 0x8212B460;
		/* 8212AA3Ch case  527:*/		return 0x8212AA40;
		  /* 8212AA40h */ case  528:  		/* li R5, 2 */
		/* 8212AA40h case  528:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AA40h case  528:*/		return 0x8212AA44;
		  /* 8212AA44h */ case  529:  		/* li R4, 201 */
		/* 8212AA44h case  529:*/		cpu::op::li<0>(regs,&regs.R4,0xC9);
		/* 8212AA44h case  529:*/		return 0x8212AA48;
		  /* 8212AA48h */ case  530:  		/* b 2584 */
		/* 8212AA48h case  530:*/		return 0x8212B460;
		/* 8212AA48h case  530:*/		return 0x8212AA4C;
		  /* 8212AA4Ch */ case  531:  		/* li R5, 2 */
		/* 8212AA4Ch case  531:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AA4Ch case  531:*/		return 0x8212AA50;
		  /* 8212AA50h */ case  532:  		/* li R4, 202 */
		/* 8212AA50h case  532:*/		cpu::op::li<0>(regs,&regs.R4,0xCA);
		/* 8212AA50h case  532:*/		return 0x8212AA54;
		  /* 8212AA54h */ case  533:  		/* b 2572 */
		/* 8212AA54h case  533:*/		return 0x8212B460;
		/* 8212AA54h case  533:*/		return 0x8212AA58;
		  /* 8212AA58h */ case  534:  		/* li R5, 3 */
		/* 8212AA58h case  534:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AA58h case  534:*/		return 0x8212AA5C;
		  /* 8212AA5Ch */ case  535:  		/* li R4, 203 */
		/* 8212AA5Ch case  535:*/		cpu::op::li<0>(regs,&regs.R4,0xCB);
		/* 8212AA5Ch case  535:*/		return 0x8212AA60;
		  /* 8212AA60h */ case  536:  		/* b 2560 */
		/* 8212AA60h case  536:*/		return 0x8212B460;
		/* 8212AA60h case  536:*/		return 0x8212AA64;
		  /* 8212AA64h */ case  537:  		/* li R4, 204 */
		/* 8212AA64h case  537:*/		cpu::op::li<0>(regs,&regs.R4,0xCC);
		/* 8212AA64h case  537:*/		return 0x8212AA68;
		  /* 8212AA68h */ case  538:  		/* b 2548 */
		/* 8212AA68h case  538:*/		return 0x8212B45C;
		/* 8212AA68h case  538:*/		return 0x8212AA6C;
		  /* 8212AA6Ch */ case  539:  		/* li R4, 205 */
		/* 8212AA6Ch case  539:*/		cpu::op::li<0>(regs,&regs.R4,0xCD);
		/* 8212AA6Ch case  539:*/		return 0x8212AA70;
		  /* 8212AA70h */ case  540:  		/* b 2540 */
		/* 8212AA70h case  540:*/		return 0x8212B45C;
		/* 8212AA70h case  540:*/		return 0x8212AA74;
		  /* 8212AA74h */ case  541:  		/* li R5, 1 */
		/* 8212AA74h case  541:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AA74h case  541:*/		return 0x8212AA78;
		  /* 8212AA78h */ case  542:  		/* li R4, 206 */
		/* 8212AA78h case  542:*/		cpu::op::li<0>(regs,&regs.R4,0xCE);
		/* 8212AA78h case  542:*/		return 0x8212AA7C;
		  /* 8212AA7Ch */ case  543:  		/* b 2532 */
		/* 8212AA7Ch case  543:*/		return 0x8212B460;
		/* 8212AA7Ch case  543:*/		return 0x8212AA80;
		  /* 8212AA80h */ case  544:  		/* li R5, 2 */
		/* 8212AA80h case  544:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AA80h case  544:*/		return 0x8212AA84;
		  /* 8212AA84h */ case  545:  		/* li R4, 207 */
		/* 8212AA84h case  545:*/		cpu::op::li<0>(regs,&regs.R4,0xCF);
		/* 8212AA84h case  545:*/		return 0x8212AA88;
		  /* 8212AA88h */ case  546:  		/* b 2520 */
		/* 8212AA88h case  546:*/		return 0x8212B460;
		/* 8212AA88h case  546:*/		return 0x8212AA8C;
		  /* 8212AA8Ch */ case  547:  		/* li R5, 2 */
		/* 8212AA8Ch case  547:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AA8Ch case  547:*/		return 0x8212AA90;
		  /* 8212AA90h */ case  548:  		/* li R4, 208 */
		/* 8212AA90h case  548:*/		cpu::op::li<0>(regs,&regs.R4,0xD0);
		/* 8212AA90h case  548:*/		return 0x8212AA94;
		  /* 8212AA94h */ case  549:  		/* b 2508 */
		/* 8212AA94h case  549:*/		return 0x8212B460;
		/* 8212AA94h case  549:*/		return 0x8212AA98;
		  /* 8212AA98h */ case  550:  		/* li R5, 1 */
		/* 8212AA98h case  550:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AA98h case  550:*/		return 0x8212AA9C;
		  /* 8212AA9Ch */ case  551:  		/* li R4, 209 */
		/* 8212AA9Ch case  551:*/		cpu::op::li<0>(regs,&regs.R4,0xD1);
		/* 8212AA9Ch case  551:*/		return 0x8212AAA0;
		  /* 8212AAA0h */ case  552:  		/* b 2496 */
		/* 8212AAA0h case  552:*/		return 0x8212B460;
		/* 8212AAA0h case  552:*/		return 0x8212AAA4;
		  /* 8212AAA4h */ case  553:  		/* li R5, 2 */
		/* 8212AAA4h case  553:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AAA4h case  553:*/		return 0x8212AAA8;
		  /* 8212AAA8h */ case  554:  		/* li R4, 210 */
		/* 8212AAA8h case  554:*/		cpu::op::li<0>(regs,&regs.R4,0xD2);
		/* 8212AAA8h case  554:*/		return 0x8212AAAC;
		  /* 8212AAACh */ case  555:  		/* b 2484 */
		/* 8212AAACh case  555:*/		return 0x8212B460;
		/* 8212AAACh case  555:*/		return 0x8212AAB0;
		  /* 8212AAB0h */ case  556:  		/* li R5, 1 */
		/* 8212AAB0h case  556:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AAB0h case  556:*/		return 0x8212AAB4;
		  /* 8212AAB4h */ case  557:  		/* li R4, 213 */
		/* 8212AAB4h case  557:*/		cpu::op::li<0>(regs,&regs.R4,0xD5);
		/* 8212AAB4h case  557:*/		return 0x8212AAB8;
		  /* 8212AAB8h */ case  558:  		/* b 2472 */
		/* 8212AAB8h case  558:*/		return 0x8212B460;
		/* 8212AAB8h case  558:*/		return 0x8212AABC;
		  /* 8212AABCh */ case  559:  		/* li R5, 2 */
		/* 8212AABCh case  559:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AABCh case  559:*/		return 0x8212AAC0;
		  /* 8212AAC0h */ case  560:  		/* li R4, 214 */
		/* 8212AAC0h case  560:*/		cpu::op::li<0>(regs,&regs.R4,0xD6);
		/* 8212AAC0h case  560:*/		return 0x8212AAC4;
		  /* 8212AAC4h */ case  561:  		/* b 2460 */
		/* 8212AAC4h case  561:*/		return 0x8212B460;
		/* 8212AAC4h case  561:*/		return 0x8212AAC8;
		  /* 8212AAC8h */ case  562:  		/* li R5, 1 */
		/* 8212AAC8h case  562:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AAC8h case  562:*/		return 0x8212AACC;
		  /* 8212AACCh */ case  563:  		/* li R4, 215 */
		/* 8212AACCh case  563:*/		cpu::op::li<0>(regs,&regs.R4,0xD7);
		/* 8212AACCh case  563:*/		return 0x8212AAD0;
		  /* 8212AAD0h */ case  564:  		/* b 2448 */
		/* 8212AAD0h case  564:*/		return 0x8212B460;
		/* 8212AAD0h case  564:*/		return 0x8212AAD4;
		  /* 8212AAD4h */ case  565:  		/* li R5, 2 */
		/* 8212AAD4h case  565:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AAD4h case  565:*/		return 0x8212AAD8;
		  /* 8212AAD8h */ case  566:  		/* li R4, 216 */
		/* 8212AAD8h case  566:*/		cpu::op::li<0>(regs,&regs.R4,0xD8);
		/* 8212AAD8h case  566:*/		return 0x8212AADC;
		  /* 8212AADCh */ case  567:  		/* b 2436 */
		/* 8212AADCh case  567:*/		return 0x8212B460;
		/* 8212AADCh case  567:*/		return 0x8212AAE0;
		  /* 8212AAE0h */ case  568:  		/* li R4, 217 */
		/* 8212AAE0h case  568:*/		cpu::op::li<0>(regs,&regs.R4,0xD9);
		/* 8212AAE0h case  568:*/		return 0x8212AAE4;
		  /* 8212AAE4h */ case  569:  		/* b 2424 */
		/* 8212AAE4h case  569:*/		return 0x8212B45C;
		/* 8212AAE4h case  569:*/		return 0x8212AAE8;
		  /* 8212AAE8h */ case  570:  		/* li R4, 218 */
		/* 8212AAE8h case  570:*/		cpu::op::li<0>(regs,&regs.R4,0xDA);
		/* 8212AAE8h case  570:*/		return 0x8212AAEC;
		  /* 8212AAECh */ case  571:  		/* b 2416 */
		/* 8212AAECh case  571:*/		return 0x8212B45C;
		/* 8212AAECh case  571:*/		return 0x8212AAF0;
		  /* 8212AAF0h */ case  572:  		/* li R4, 219 */
		/* 8212AAF0h case  572:*/		cpu::op::li<0>(regs,&regs.R4,0xDB);
		/* 8212AAF0h case  572:*/		return 0x8212AAF4;
		  /* 8212AAF4h */ case  573:  		/* b 2408 */
		/* 8212AAF4h case  573:*/		return 0x8212B45C;
		/* 8212AAF4h case  573:*/		return 0x8212AAF8;
		  /* 8212AAF8h */ case  574:  		/* li R4, 220 */
		/* 8212AAF8h case  574:*/		cpu::op::li<0>(regs,&regs.R4,0xDC);
		/* 8212AAF8h case  574:*/		return 0x8212AAFC;
		  /* 8212AAFCh */ case  575:  		/* b 2400 */
		/* 8212AAFCh case  575:*/		return 0x8212B45C;
		/* 8212AAFCh case  575:*/		return 0x8212AB00;
		  /* 8212AB00h */ case  576:  		/* li R4, 221 */
		/* 8212AB00h case  576:*/		cpu::op::li<0>(regs,&regs.R4,0xDD);
		/* 8212AB00h case  576:*/		return 0x8212AB04;
		  /* 8212AB04h */ case  577:  		/* b 2392 */
		/* 8212AB04h case  577:*/		return 0x8212B45C;
		/* 8212AB04h case  577:*/		return 0x8212AB08;
		  /* 8212AB08h */ case  578:  		/* li R4, 222 */
		/* 8212AB08h case  578:*/		cpu::op::li<0>(regs,&regs.R4,0xDE);
		/* 8212AB08h case  578:*/		return 0x8212AB0C;
		  /* 8212AB0Ch */ case  579:  		/* b 2384 */
		/* 8212AB0Ch case  579:*/		return 0x8212B45C;
		/* 8212AB0Ch case  579:*/		return 0x8212AB10;
		  /* 8212AB10h */ case  580:  		/* li R4, 223 */
		/* 8212AB10h case  580:*/		cpu::op::li<0>(regs,&regs.R4,0xDF);
		/* 8212AB10h case  580:*/		return 0x8212AB14;
		  /* 8212AB14h */ case  581:  		/* b 2376 */
		/* 8212AB14h case  581:*/		return 0x8212B45C;
		/* 8212AB14h case  581:*/		return 0x8212AB18;
		  /* 8212AB18h */ case  582:  		/* li R4, 224 */
		/* 8212AB18h case  582:*/		cpu::op::li<0>(regs,&regs.R4,0xE0);
		/* 8212AB18h case  582:*/		return 0x8212AB1C;
		  /* 8212AB1Ch */ case  583:  		/* b 2368 */
		/* 8212AB1Ch case  583:*/		return 0x8212B45C;
		/* 8212AB1Ch case  583:*/		return 0x8212AB20;
		  /* 8212AB20h */ case  584:  		/* li R4, 225 */
		/* 8212AB20h case  584:*/		cpu::op::li<0>(regs,&regs.R4,0xE1);
		/* 8212AB20h case  584:*/		return 0x8212AB24;
		  /* 8212AB24h */ case  585:  		/* b 2360 */
		/* 8212AB24h case  585:*/		return 0x8212B45C;
		/* 8212AB24h case  585:*/		return 0x8212AB28;
		  /* 8212AB28h */ case  586:  		/* li R4, 226 */
		/* 8212AB28h case  586:*/		cpu::op::li<0>(regs,&regs.R4,0xE2);
		/* 8212AB28h case  586:*/		return 0x8212AB2C;
		  /* 8212AB2Ch */ case  587:  		/* b 2352 */
		/* 8212AB2Ch case  587:*/		return 0x8212B45C;
		/* 8212AB2Ch case  587:*/		return 0x8212AB30;
		  /* 8212AB30h */ case  588:  		/* li R4, 227 */
		/* 8212AB30h case  588:*/		cpu::op::li<0>(regs,&regs.R4,0xE3);
		/* 8212AB30h case  588:*/		return 0x8212AB34;
		  /* 8212AB34h */ case  589:  		/* b 2344 */
		/* 8212AB34h case  589:*/		return 0x8212B45C;
		/* 8212AB34h case  589:*/		return 0x8212AB38;
		  /* 8212AB38h */ case  590:  		/* li R4, 228 */
		/* 8212AB38h case  590:*/		cpu::op::li<0>(regs,&regs.R4,0xE4);
		/* 8212AB38h case  590:*/		return 0x8212AB3C;
		  /* 8212AB3Ch */ case  591:  		/* b 2336 */
		/* 8212AB3Ch case  591:*/		return 0x8212B45C;
		/* 8212AB3Ch case  591:*/		return 0x8212AB40;
		  /* 8212AB40h */ case  592:  		/* li R4, 229 */
		/* 8212AB40h case  592:*/		cpu::op::li<0>(regs,&regs.R4,0xE5);
		/* 8212AB40h case  592:*/		return 0x8212AB44;
		  /* 8212AB44h */ case  593:  		/* b 2328 */
		/* 8212AB44h case  593:*/		return 0x8212B45C;
		/* 8212AB44h case  593:*/		return 0x8212AB48;
		  /* 8212AB48h */ case  594:  		/* li R5, 1 */
		/* 8212AB48h case  594:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AB48h case  594:*/		return 0x8212AB4C;
		  /* 8212AB4Ch */ case  595:  		/* li R4, 230 */
		/* 8212AB4Ch case  595:*/		cpu::op::li<0>(regs,&regs.R4,0xE6);
		/* 8212AB4Ch case  595:*/		return 0x8212AB50;
		  /* 8212AB50h */ case  596:  		/* b 2320 */
		/* 8212AB50h case  596:*/		return 0x8212B460;
		/* 8212AB50h case  596:*/		return 0x8212AB54;
		  /* 8212AB54h */ case  597:  		/* li R5, 3 */
		/* 8212AB54h case  597:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AB54h case  597:*/		return 0x8212AB58;
		  /* 8212AB58h */ case  598:  		/* li R4, 231 */
		/* 8212AB58h case  598:*/		cpu::op::li<0>(regs,&regs.R4,0xE7);
		/* 8212AB58h case  598:*/		return 0x8212AB5C;
		  /* 8212AB5Ch */ case  599:  		/* b 2308 */
		/* 8212AB5Ch case  599:*/		return 0x8212B460;
		/* 8212AB5Ch case  599:*/		return 0x8212AB60;
		  /* 8212AB60h */ case  600:  		/* li R5, 3 */
		/* 8212AB60h case  600:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AB60h case  600:*/		return 0x8212AB64;
		  /* 8212AB64h */ case  601:  		/* li R4, 232 */
		/* 8212AB64h case  601:*/		cpu::op::li<0>(regs,&regs.R4,0xE8);
		/* 8212AB64h case  601:*/		return 0x8212AB68;
		  /* 8212AB68h */ case  602:  		/* b 2296 */
		/* 8212AB68h case  602:*/		return 0x8212B460;
		/* 8212AB68h case  602:*/		return 0x8212AB6C;
		  /* 8212AB6Ch */ case  603:  		/* li R5, 2 */
		/* 8212AB6Ch case  603:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AB6Ch case  603:*/		return 0x8212AB70;
		  /* 8212AB70h */ case  604:  		/* li R4, 233 */
		/* 8212AB70h case  604:*/		cpu::op::li<0>(regs,&regs.R4,0xE9);
		/* 8212AB70h case  604:*/		return 0x8212AB74;
		  /* 8212AB74h */ case  605:  		/* b 2284 */
		/* 8212AB74h case  605:*/		return 0x8212B460;
		/* 8212AB74h case  605:*/		return 0x8212AB78;
		  /* 8212AB78h */ case  606:  		/* li R5, 3 */
		/* 8212AB78h case  606:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AB78h case  606:*/		return 0x8212AB7C;
		  /* 8212AB7Ch */ case  607:  		/* li R4, 234 */
		/* 8212AB7Ch case  607:*/		cpu::op::li<0>(regs,&regs.R4,0xEA);
		/* 8212AB7Ch case  607:*/		return 0x8212AB80;
		  /* 8212AB80h */ case  608:  		/* b 2272 */
		/* 8212AB80h case  608:*/		return 0x8212B460;
		/* 8212AB80h case  608:*/		return 0x8212AB84;
		  /* 8212AB84h */ case  609:  		/* li R4, 235 */
		/* 8212AB84h case  609:*/		cpu::op::li<0>(regs,&regs.R4,0xEB);
		/* 8212AB84h case  609:*/		return 0x8212AB88;
		  /* 8212AB88h */ case  610:  		/* b 2260 */
		/* 8212AB88h case  610:*/		return 0x8212B45C;
		/* 8212AB88h case  610:*/		return 0x8212AB8C;
		  /* 8212AB8Ch */ case  611:  		/* li R4, 236 */
		/* 8212AB8Ch case  611:*/		cpu::op::li<0>(regs,&regs.R4,0xEC);
		/* 8212AB8Ch case  611:*/		return 0x8212AB90;
		  /* 8212AB90h */ case  612:  		/* b 2252 */
		/* 8212AB90h case  612:*/		return 0x8212B45C;
		/* 8212AB90h case  612:*/		return 0x8212AB94;
		  /* 8212AB94h */ case  613:  		/* li R5, 1 */
		/* 8212AB94h case  613:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AB94h case  613:*/		return 0x8212AB98;
		  /* 8212AB98h */ case  614:  		/* li R4, 237 */
		/* 8212AB98h case  614:*/		cpu::op::li<0>(regs,&regs.R4,0xED);
		/* 8212AB98h case  614:*/		return 0x8212AB9C;
		  /* 8212AB9Ch */ case  615:  		/* b 2244 */
		/* 8212AB9Ch case  615:*/		return 0x8212B460;
		/* 8212AB9Ch case  615:*/		return 0x8212ABA0;
		  /* 8212ABA0h */ case  616:  		/* li R5, 2 */
		/* 8212ABA0h case  616:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ABA0h case  616:*/		return 0x8212ABA4;
		  /* 8212ABA4h */ case  617:  		/* li R4, 238 */
		/* 8212ABA4h case  617:*/		cpu::op::li<0>(regs,&regs.R4,0xEE);
		/* 8212ABA4h case  617:*/		return 0x8212ABA8;
		  /* 8212ABA8h */ case  618:  		/* b 2232 */
		/* 8212ABA8h case  618:*/		return 0x8212B460;
		/* 8212ABA8h case  618:*/		return 0x8212ABAC;
		  /* 8212ABACh */ case  619:  		/* li R5, 3 */
		/* 8212ABACh case  619:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212ABACh case  619:*/		return 0x8212ABB0;
		  /* 8212ABB0h */ case  620:  		/* li R4, 239 */
		/* 8212ABB0h case  620:*/		cpu::op::li<0>(regs,&regs.R4,0xEF);
		/* 8212ABB0h case  620:*/		return 0x8212ABB4;
		  /* 8212ABB4h */ case  621:  		/* b 2220 */
		/* 8212ABB4h case  621:*/		return 0x8212B460;
		/* 8212ABB4h case  621:*/		return 0x8212ABB8;
		  /* 8212ABB8h */ case  622:  		/* li R5, 2 */
		/* 8212ABB8h case  622:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ABB8h case  622:*/		return 0x8212ABBC;
		  /* 8212ABBCh */ case  623:  		/* li R4, 240 */
		/* 8212ABBCh case  623:*/		cpu::op::li<0>(regs,&regs.R4,0xF0);
		/* 8212ABBCh case  623:*/		return 0x8212ABC0;
		  /* 8212ABC0h */ case  624:  		/* b 2208 */
		/* 8212ABC0h case  624:*/		return 0x8212B460;
		/* 8212ABC0h case  624:*/		return 0x8212ABC4;
		  /* 8212ABC4h */ case  625:  		/* li R5, 3 */
		/* 8212ABC4h case  625:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212ABC4h case  625:*/		return 0x8212ABC8;
		  /* 8212ABC8h */ case  626:  		/* li R4, 241 */
		/* 8212ABC8h case  626:*/		cpu::op::li<0>(regs,&regs.R4,0xF1);
		/* 8212ABC8h case  626:*/		return 0x8212ABCC;
		  /* 8212ABCCh */ case  627:  		/* b 2196 */
		/* 8212ABCCh case  627:*/		return 0x8212B460;
		/* 8212ABCCh case  627:*/		return 0x8212ABD0;
		  /* 8212ABD0h */ case  628:  		/* li R4, 242 */
		/* 8212ABD0h case  628:*/		cpu::op::li<0>(regs,&regs.R4,0xF2);
		/* 8212ABD0h case  628:*/		return 0x8212ABD4;
		  /* 8212ABD4h */ case  629:  		/* b 2184 */
		/* 8212ABD4h case  629:*/		return 0x8212B45C;
		/* 8212ABD4h case  629:*/		return 0x8212ABD8;
		  /* 8212ABD8h */ case  630:  		/* li R4, 243 */
		/* 8212ABD8h case  630:*/		cpu::op::li<0>(regs,&regs.R4,0xF3);
		/* 8212ABD8h case  630:*/		return 0x8212ABDC;
		  /* 8212ABDCh */ case  631:  		/* b 2176 */
		/* 8212ABDCh case  631:*/		return 0x8212B45C;
		/* 8212ABDCh case  631:*/		return 0x8212ABE0;
		  /* 8212ABE0h */ case  632:  		/* li R5, 1 */
		/* 8212ABE0h case  632:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ABE0h case  632:*/		return 0x8212ABE4;
		  /* 8212ABE4h */ case  633:  		/* li R4, 244 */
		/* 8212ABE4h case  633:*/		cpu::op::li<0>(regs,&regs.R4,0xF4);
		/* 8212ABE4h case  633:*/		return 0x8212ABE8;
		  /* 8212ABE8h */ case  634:  		/* b 2168 */
		/* 8212ABE8h case  634:*/		return 0x8212B460;
		/* 8212ABE8h case  634:*/		return 0x8212ABEC;
		  /* 8212ABECh */ case  635:  		/* li R5, 2 */
		/* 8212ABECh case  635:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ABECh case  635:*/		return 0x8212ABF0;
		  /* 8212ABF0h */ case  636:  		/* li R4, 245 */
		/* 8212ABF0h case  636:*/		cpu::op::li<0>(regs,&regs.R4,0xF5);
		/* 8212ABF0h case  636:*/		return 0x8212ABF4;
		  /* 8212ABF4h */ case  637:  		/* b 2156 */
		/* 8212ABF4h case  637:*/		return 0x8212B460;
		/* 8212ABF4h case  637:*/		return 0x8212ABF8;
		  /* 8212ABF8h */ case  638:  		/* li R5, 5 */
		/* 8212ABF8h case  638:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212ABF8h case  638:*/		return 0x8212ABFC;
		  /* 8212ABFCh */ case  639:  		/* li R4, 246 */
		/* 8212ABFCh case  639:*/		cpu::op::li<0>(regs,&regs.R4,0xF6);
		/* 8212ABFCh case  639:*/		return 0x8212AC00;
		  /* 8212AC00h */ case  640:  		/* b 2144 */
		/* 8212AC00h case  640:*/		return 0x8212B460;
		/* 8212AC00h case  640:*/		return 0x8212AC04;
		  /* 8212AC04h */ case  641:  		/* li R5, 3 */
		/* 8212AC04h case  641:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AC04h case  641:*/		return 0x8212AC08;
		  /* 8212AC08h */ case  642:  		/* li R4, 248 */
		/* 8212AC08h case  642:*/		cpu::op::li<0>(regs,&regs.R4,0xF8);
		/* 8212AC08h case  642:*/		return 0x8212AC0C;
		  /* 8212AC0Ch */ case  643:  		/* b 2132 */
		/* 8212AC0Ch case  643:*/		return 0x8212B460;
		/* 8212AC0Ch case  643:*/		return 0x8212AC10;
		  /* 8212AC10h */ case  644:  		/* li R4, 250 */
		/* 8212AC10h case  644:*/		cpu::op::li<0>(regs,&regs.R4,0xFA);
		/* 8212AC10h case  644:*/		return 0x8212AC14;
		  /* 8212AC14h */ case  645:  		/* b 2120 */
		/* 8212AC14h case  645:*/		return 0x8212B45C;
		/* 8212AC14h case  645:*/		return 0x8212AC18;
	}
	return 0x8212AC18;
} // Block from 8212A200h-8212AC18h (646 instructions)

//////////////////////////////////////////////////////
// Block at 8212AC18h
// Function '?d3dxshader_parse@CParseYaccStruct@D3DXShader@@QAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212AC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212AC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212AC18);
		  /* 8212AC18h */ case    0:  		/* li R5, 1 */
		/* 8212AC18h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC18h case    0:*/		return 0x8212AC1C;
		  /* 8212AC1Ch */ case    1:  		/* li R4, 251 */
		/* 8212AC1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xFB);
		/* 8212AC1Ch case    1:*/		return 0x8212AC20;
		  /* 8212AC20h */ case    2:  		/* b 2112 */
		/* 8212AC20h case    2:*/		return 0x8212B460;
		/* 8212AC20h case    2:*/		return 0x8212AC24;
		  /* 8212AC24h */ case    3:  		/* li R4, 252 */
		/* 8212AC24h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xFC);
		/* 8212AC24h case    3:*/		return 0x8212AC28;
		  /* 8212AC28h */ case    4:  		/* b 2100 */
		/* 8212AC28h case    4:*/		return 0x8212B45C;
		/* 8212AC28h case    4:*/		return 0x8212AC2C;
		  /* 8212AC2Ch */ case    5:  		/* li R4, 253 */
		/* 8212AC2Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xFD);
		/* 8212AC2Ch case    5:*/		return 0x8212AC30;
		  /* 8212AC30h */ case    6:  		/* b 2092 */
		/* 8212AC30h case    6:*/		return 0x8212B45C;
		/* 8212AC30h case    6:*/		return 0x8212AC34;
		  /* 8212AC34h */ case    7:  		/* li R5, 1 */
		/* 8212AC34h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC34h case    7:*/		return 0x8212AC38;
		  /* 8212AC38h */ case    8:  		/* li R4, 409 */
		/* 8212AC38h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x199);
		/* 8212AC38h case    8:*/		return 0x8212AC3C;
		  /* 8212AC3Ch */ case    9:  		/* b 2084 */
		/* 8212AC3Ch case    9:*/		return 0x8212B460;
		/* 8212AC3Ch case    9:*/		return 0x8212AC40;
		  /* 8212AC40h */ case   10:  		/* li R5, 1 */
		/* 8212AC40h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC40h case   10:*/		return 0x8212AC44;
		  /* 8212AC44h */ case   11:  		/* li R4, 410 */
		/* 8212AC44h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x19A);
		/* 8212AC44h case   11:*/		return 0x8212AC48;
		  /* 8212AC48h */ case   12:  		/* b 2072 */
		/* 8212AC48h case   12:*/		return 0x8212B460;
		/* 8212AC48h case   12:*/		return 0x8212AC4C;
		  /* 8212AC4Ch */ case   13:  		/* li R5, 1 */
		/* 8212AC4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC4Ch case   13:*/		return 0x8212AC50;
		  /* 8212AC50h */ case   14:  		/* li R4, 411 */
		/* 8212AC50h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x19B);
		/* 8212AC50h case   14:*/		return 0x8212AC54;
		  /* 8212AC54h */ case   15:  		/* b 2060 */
		/* 8212AC54h case   15:*/		return 0x8212B460;
		/* 8212AC54h case   15:*/		return 0x8212AC58;
		  /* 8212AC58h */ case   16:  		/* li R5, 1 */
		/* 8212AC58h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC58h case   16:*/		return 0x8212AC5C;
		  /* 8212AC5Ch */ case   17:  		/* li R4, 412 */
		/* 8212AC5Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x19C);
		/* 8212AC5Ch case   17:*/		return 0x8212AC60;
		  /* 8212AC60h */ case   18:  		/* b 2048 */
		/* 8212AC60h case   18:*/		return 0x8212B460;
		/* 8212AC60h case   18:*/		return 0x8212AC64;
		  /* 8212AC64h */ case   19:  		/* li R5, 1 */
		/* 8212AC64h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC64h case   19:*/		return 0x8212AC68;
		  /* 8212AC68h */ case   20:  		/* li R4, 413 */
		/* 8212AC68h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x19D);
		/* 8212AC68h case   20:*/		return 0x8212AC6C;
		  /* 8212AC6Ch */ case   21:  		/* b 2036 */
		/* 8212AC6Ch case   21:*/		return 0x8212B460;
		/* 8212AC6Ch case   21:*/		return 0x8212AC70;
		  /* 8212AC70h */ case   22:  		/* li R5, 2 */
		/* 8212AC70h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AC70h case   22:*/		return 0x8212AC74;
		  /* 8212AC74h */ case   23:  		/* li R4, 414 */
		/* 8212AC74h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x19E);
		/* 8212AC74h case   23:*/		return 0x8212AC78;
		  /* 8212AC78h */ case   24:  		/* b 2024 */
		/* 8212AC78h case   24:*/		return 0x8212B460;
		/* 8212AC78h case   24:*/		return 0x8212AC7C;
		  /* 8212AC7Ch */ case   25:  		/* li R5, 1 */
		/* 8212AC7Ch case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AC7Ch case   25:*/		return 0x8212AC80;
		  /* 8212AC80h */ case   26:  		/* li R4, 415 */
		/* 8212AC80h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x19F);
		/* 8212AC80h case   26:*/		return 0x8212AC84;
		  /* 8212AC84h */ case   27:  		/* b 2012 */
		/* 8212AC84h case   27:*/		return 0x8212B460;
		/* 8212AC84h case   27:*/		return 0x8212AC88;
		  /* 8212AC88h */ case   28:  		/* li R4, 416 */
		/* 8212AC88h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x1A0);
		/* 8212AC88h case   28:*/		return 0x8212AC8C;
		  /* 8212AC8Ch */ case   29:  		/* b 2000 */
		/* 8212AC8Ch case   29:*/		return 0x8212B45C;
		/* 8212AC8Ch case   29:*/		return 0x8212AC90;
		  /* 8212AC90h */ case   30:  		/* li R4, 417 */
		/* 8212AC90h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x1A1);
		/* 8212AC90h case   30:*/		return 0x8212AC94;
		  /* 8212AC94h */ case   31:  		/* b 1992 */
		/* 8212AC94h case   31:*/		return 0x8212B45C;
		/* 8212AC94h case   31:*/		return 0x8212AC98;
		  /* 8212AC98h */ case   32:  		/* li R4, 418 */
		/* 8212AC98h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x1A2);
		/* 8212AC98h case   32:*/		return 0x8212AC9C;
		  /* 8212AC9Ch */ case   33:  		/* b 1984 */
		/* 8212AC9Ch case   33:*/		return 0x8212B45C;
		/* 8212AC9Ch case   33:*/		return 0x8212ACA0;
		  /* 8212ACA0h */ case   34:  		/* li R4, 419 */
		/* 8212ACA0h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x1A3);
		/* 8212ACA0h case   34:*/		return 0x8212ACA4;
		  /* 8212ACA4h */ case   35:  		/* b 1976 */
		/* 8212ACA4h case   35:*/		return 0x8212B45C;
		/* 8212ACA4h case   35:*/		return 0x8212ACA8;
		  /* 8212ACA8h */ case   36:  		/* li R5, 1 */
		/* 8212ACA8h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACA8h case   36:*/		return 0x8212ACAC;
		  /* 8212ACACh */ case   37:  		/* li R4, 306 */
		/* 8212ACACh case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x132);
		/* 8212ACACh case   37:*/		return 0x8212ACB0;
		  /* 8212ACB0h */ case   38:  		/* b 1968 */
		/* 8212ACB0h case   38:*/		return 0x8212B460;
		/* 8212ACB0h case   38:*/		return 0x8212ACB4;
		  /* 8212ACB4h */ case   39:  		/* li R5, 2 */
		/* 8212ACB4h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ACB4h case   39:*/		return 0x8212ACB8;
		  /* 8212ACB8h */ case   40:  		/* li R4, 307 */
		/* 8212ACB8h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x133);
		/* 8212ACB8h case   40:*/		return 0x8212ACBC;
		  /* 8212ACBCh */ case   41:  		/* b 1956 */
		/* 8212ACBCh case   41:*/		return 0x8212B460;
		/* 8212ACBCh case   41:*/		return 0x8212ACC0;
		  /* 8212ACC0h */ case   42:  		/* li R5, 1 */
		/* 8212ACC0h case   42:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACC0h case   42:*/		return 0x8212ACC4;
		  /* 8212ACC4h */ case   43:  		/* li R4, 308 */
		/* 8212ACC4h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x134);
		/* 8212ACC4h case   43:*/		return 0x8212ACC8;
		  /* 8212ACC8h */ case   44:  		/* b 1944 */
		/* 8212ACC8h case   44:*/		return 0x8212B460;
		/* 8212ACC8h case   44:*/		return 0x8212ACCC;
		  /* 8212ACCCh */ case   45:  		/* li R5, 1 */
		/* 8212ACCCh case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACCCh case   45:*/		return 0x8212ACD0;
		  /* 8212ACD0h */ case   46:  		/* li R4, 309 */
		/* 8212ACD0h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x135);
		/* 8212ACD0h case   46:*/		return 0x8212ACD4;
		  /* 8212ACD4h */ case   47:  		/* b 1932 */
		/* 8212ACD4h case   47:*/		return 0x8212B460;
		/* 8212ACD4h case   47:*/		return 0x8212ACD8;
		  /* 8212ACD8h */ case   48:  		/* li R5, 1 */
		/* 8212ACD8h case   48:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACD8h case   48:*/		return 0x8212ACDC;
		  /* 8212ACDCh */ case   49:  		/* li R4, 310 */
		/* 8212ACDCh case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x136);
		/* 8212ACDCh case   49:*/		return 0x8212ACE0;
		  /* 8212ACE0h */ case   50:  		/* b 1920 */
		/* 8212ACE0h case   50:*/		return 0x8212B460;
		/* 8212ACE0h case   50:*/		return 0x8212ACE4;
		  /* 8212ACE4h */ case   51:  		/* li R5, 1 */
		/* 8212ACE4h case   51:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACE4h case   51:*/		return 0x8212ACE8;
		  /* 8212ACE8h */ case   52:  		/* li R4, 311 */
		/* 8212ACE8h case   52:*/		cpu::op::li<0>(regs,&regs.R4,0x137);
		/* 8212ACE8h case   52:*/		return 0x8212ACEC;
		  /* 8212ACECh */ case   53:  		/* b 1908 */
		/* 8212ACECh case   53:*/		return 0x8212B460;
		/* 8212ACECh case   53:*/		return 0x8212ACF0;
		  /* 8212ACF0h */ case   54:  		/* li R5, 1 */
		/* 8212ACF0h case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ACF0h case   54:*/		return 0x8212ACF4;
		  /* 8212ACF4h */ case   55:  		/* li R4, 312 */
		/* 8212ACF4h case   55:*/		cpu::op::li<0>(regs,&regs.R4,0x138);
		/* 8212ACF4h case   55:*/		return 0x8212ACF8;
		  /* 8212ACF8h */ case   56:  		/* b 1896 */
		/* 8212ACF8h case   56:*/		return 0x8212B460;
		/* 8212ACF8h case   56:*/		return 0x8212ACFC;
		  /* 8212ACFCh */ case   57:  		/* li R5, 2 */
		/* 8212ACFCh case   57:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ACFCh case   57:*/		return 0x8212AD00;
		  /* 8212AD00h */ case   58:  		/* li R4, 254 */
		/* 8212AD00h case   58:*/		cpu::op::li<0>(regs,&regs.R4,0xFE);
		/* 8212AD00h case   58:*/		return 0x8212AD04;
		  /* 8212AD04h */ case   59:  		/* b 1884 */
		/* 8212AD04h case   59:*/		return 0x8212B460;
		/* 8212AD04h case   59:*/		return 0x8212AD08;
		  /* 8212AD08h */ case   60:  		/* li R5, 3 */
		/* 8212AD08h case   60:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AD08h case   60:*/		return 0x8212AD0C;
		  /* 8212AD0Ch */ case   61:  		/* li R4, 255 */
		/* 8212AD0Ch case   61:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8212AD0Ch case   61:*/		return 0x8212AD10;
		  /* 8212AD10h */ case   62:  		/* b 1872 */
		/* 8212AD10h case   62:*/		return 0x8212B460;
		/* 8212AD10h case   62:*/		return 0x8212AD14;
		  /* 8212AD14h */ case   63:  		/* li R4, 256 */
		/* 8212AD14h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8212AD14h case   63:*/		return 0x8212AD18;
		  /* 8212AD18h */ case   64:  		/* b 1860 */
		/* 8212AD18h case   64:*/		return 0x8212B45C;
		/* 8212AD18h case   64:*/		return 0x8212AD1C;
		  /* 8212AD1Ch */ case   65:  		/* li R4, 257 */
		/* 8212AD1Ch case   65:*/		cpu::op::li<0>(regs,&regs.R4,0x101);
		/* 8212AD1Ch case   65:*/		return 0x8212AD20;
		  /* 8212AD20h */ case   66:  		/* b 1852 */
		/* 8212AD20h case   66:*/		return 0x8212B45C;
		/* 8212AD20h case   66:*/		return 0x8212AD24;
		  /* 8212AD24h */ case   67:  		/* li R5, 1 */
		/* 8212AD24h case   67:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD24h case   67:*/		return 0x8212AD28;
		  /* 8212AD28h */ case   68:  		/* li R4, 258 */
		/* 8212AD28h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x102);
		/* 8212AD28h case   68:*/		return 0x8212AD2C;
		  /* 8212AD2Ch */ case   69:  		/* b 1844 */
		/* 8212AD2Ch case   69:*/		return 0x8212B460;
		/* 8212AD2Ch case   69:*/		return 0x8212AD30;
		  /* 8212AD30h */ case   70:  		/* li R5, 2 */
		/* 8212AD30h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AD30h case   70:*/		return 0x8212AD34;
		  /* 8212AD34h */ case   71:  		/* li R4, 259 */
		/* 8212AD34h case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x103);
		/* 8212AD34h case   71:*/		return 0x8212AD38;
		  /* 8212AD38h */ case   72:  		/* b 1832 */
		/* 8212AD38h case   72:*/		return 0x8212B460;
		/* 8212AD38h case   72:*/		return 0x8212AD3C;
		  /* 8212AD3Ch */ case   73:  		/* li R4, 260 */
		/* 8212AD3Ch case   73:*/		cpu::op::li<0>(regs,&regs.R4,0x104);
		/* 8212AD3Ch case   73:*/		return 0x8212AD40;
		  /* 8212AD40h */ case   74:  		/* b 1820 */
		/* 8212AD40h case   74:*/		return 0x8212B45C;
		/* 8212AD40h case   74:*/		return 0x8212AD44;
		  /* 8212AD44h */ case   75:  		/* li R5, 1 */
		/* 8212AD44h case   75:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD44h case   75:*/		return 0x8212AD48;
		  /* 8212AD48h */ case   76:  		/* li R4, 261 */
		/* 8212AD48h case   76:*/		cpu::op::li<0>(regs,&regs.R4,0x105);
		/* 8212AD48h case   76:*/		return 0x8212AD4C;
		  /* 8212AD4Ch */ case   77:  		/* b 1812 */
		/* 8212AD4Ch case   77:*/		return 0x8212B460;
		/* 8212AD4Ch case   77:*/		return 0x8212AD50;
		  /* 8212AD50h */ case   78:  		/* li R4, 262 */
		/* 8212AD50h case   78:*/		cpu::op::li<0>(regs,&regs.R4,0x106);
		/* 8212AD50h case   78:*/		return 0x8212AD54;
		  /* 8212AD54h */ case   79:  		/* b 1800 */
		/* 8212AD54h case   79:*/		return 0x8212B45C;
		/* 8212AD54h case   79:*/		return 0x8212AD58;
		  /* 8212AD58h */ case   80:  		/* li R5, 1 */
		/* 8212AD58h case   80:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD58h case   80:*/		return 0x8212AD5C;
		  /* 8212AD5Ch */ case   81:  		/* li R4, 263 */
		/* 8212AD5Ch case   81:*/		cpu::op::li<0>(regs,&regs.R4,0x107);
		/* 8212AD5Ch case   81:*/		return 0x8212AD60;
		  /* 8212AD60h */ case   82:  		/* b 1792 */
		/* 8212AD60h case   82:*/		return 0x8212B460;
		/* 8212AD60h case   82:*/		return 0x8212AD64;
		  /* 8212AD64h */ case   83:  		/* li R5, 2 */
		/* 8212AD64h case   83:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AD64h case   83:*/		return 0x8212AD68;
		  /* 8212AD68h */ case   84:  		/* li R4, 264 */
		/* 8212AD68h case   84:*/		cpu::op::li<0>(regs,&regs.R4,0x108);
		/* 8212AD68h case   84:*/		return 0x8212AD6C;
		  /* 8212AD6Ch */ case   85:  		/* b 1780 */
		/* 8212AD6Ch case   85:*/		return 0x8212B460;
		/* 8212AD6Ch case   85:*/		return 0x8212AD70;
		  /* 8212AD70h */ case   86:  		/* li R5, 1 */
		/* 8212AD70h case   86:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD70h case   86:*/		return 0x8212AD74;
		  /* 8212AD74h */ case   87:  		/* li R4, 265 */
		/* 8212AD74h case   87:*/		cpu::op::li<0>(regs,&regs.R4,0x109);
		/* 8212AD74h case   87:*/		return 0x8212AD78;
		  /* 8212AD78h */ case   88:  		/* b 1768 */
		/* 8212AD78h case   88:*/		return 0x8212B460;
		/* 8212AD78h case   88:*/		return 0x8212AD7C;
		  /* 8212AD7Ch */ case   89:  		/* li R4, 266 */
		/* 8212AD7Ch case   89:*/		cpu::op::li<0>(regs,&regs.R4,0x10A);
		/* 8212AD7Ch case   89:*/		return 0x8212AD80;
		  /* 8212AD80h */ case   90:  		/* b 1756 */
		/* 8212AD80h case   90:*/		return 0x8212B45C;
		/* 8212AD80h case   90:*/		return 0x8212AD84;
		  /* 8212AD84h */ case   91:  		/* li R5, 1 */
		/* 8212AD84h case   91:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD84h case   91:*/		return 0x8212AD88;
		  /* 8212AD88h */ case   92:  		/* li R4, 267 */
		/* 8212AD88h case   92:*/		cpu::op::li<0>(regs,&regs.R4,0x10B);
		/* 8212AD88h case   92:*/		return 0x8212AD8C;
		  /* 8212AD8Ch */ case   93:  		/* b 1748 */
		/* 8212AD8Ch case   93:*/		return 0x8212B460;
		/* 8212AD8Ch case   93:*/		return 0x8212AD90;
		  /* 8212AD90h */ case   94:  		/* li R5, 1 */
		/* 8212AD90h case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD90h case   94:*/		return 0x8212AD94;
		  /* 8212AD94h */ case   95:  		/* li R4, 268 */
		/* 8212AD94h case   95:*/		cpu::op::li<0>(regs,&regs.R4,0x10C);
		/* 8212AD94h case   95:*/		return 0x8212AD98;
		  /* 8212AD98h */ case   96:  		/* b 1736 */
		/* 8212AD98h case   96:*/		return 0x8212B460;
		/* 8212AD98h case   96:*/		return 0x8212AD9C;
		  /* 8212AD9Ch */ case   97:  		/* li R5, 1 */
		/* 8212AD9Ch case   97:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AD9Ch case   97:*/		return 0x8212ADA0;
		  /* 8212ADA0h */ case   98:  		/* li R4, 269 */
		/* 8212ADA0h case   98:*/		cpu::op::li<0>(regs,&regs.R4,0x10D);
		/* 8212ADA0h case   98:*/		return 0x8212ADA4;
		  /* 8212ADA4h */ case   99:  		/* b 1724 */
		/* 8212ADA4h case   99:*/		return 0x8212B460;
		/* 8212ADA4h case   99:*/		return 0x8212ADA8;
		  /* 8212ADA8h */ case  100:  		/* li R4, 270 */
		/* 8212ADA8h case  100:*/		cpu::op::li<0>(regs,&regs.R4,0x10E);
		/* 8212ADA8h case  100:*/		return 0x8212ADAC;
		  /* 8212ADACh */ case  101:  		/* b 1712 */
		/* 8212ADACh case  101:*/		return 0x8212B45C;
		/* 8212ADACh case  101:*/		return 0x8212ADB0;
		  /* 8212ADB0h */ case  102:  		/* li R4, 271 */
		/* 8212ADB0h case  102:*/		cpu::op::li<0>(regs,&regs.R4,0x10F);
		/* 8212ADB0h case  102:*/		return 0x8212ADB4;
		  /* 8212ADB4h */ case  103:  		/* b 1704 */
		/* 8212ADB4h case  103:*/		return 0x8212B45C;
		/* 8212ADB4h case  103:*/		return 0x8212ADB8;
		  /* 8212ADB8h */ case  104:  		/* li R4, 272 */
		/* 8212ADB8h case  104:*/		cpu::op::li<0>(regs,&regs.R4,0x110);
		/* 8212ADB8h case  104:*/		return 0x8212ADBC;
		  /* 8212ADBCh */ case  105:  		/* b 1696 */
		/* 8212ADBCh case  105:*/		return 0x8212B45C;
		/* 8212ADBCh case  105:*/		return 0x8212ADC0;
		  /* 8212ADC0h */ case  106:  		/* li R5, 1 */
		/* 8212ADC0h case  106:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212ADC0h case  106:*/		return 0x8212ADC4;
		  /* 8212ADC4h */ case  107:  		/* li R4, 273 */
		/* 8212ADC4h case  107:*/		cpu::op::li<0>(regs,&regs.R4,0x111);
		/* 8212ADC4h case  107:*/		return 0x8212ADC8;
		  /* 8212ADC8h */ case  108:  		/* b 1688 */
		/* 8212ADC8h case  108:*/		return 0x8212B460;
		/* 8212ADC8h case  108:*/		return 0x8212ADCC;
		  /* 8212ADCCh */ case  109:  		/* li R5, 2 */
		/* 8212ADCCh case  109:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ADCCh case  109:*/		return 0x8212ADD0;
		  /* 8212ADD0h */ case  110:  		/* li R4, 274 */
		/* 8212ADD0h case  110:*/		cpu::op::li<0>(regs,&regs.R4,0x112);
		/* 8212ADD0h case  110:*/		return 0x8212ADD4;
		  /* 8212ADD4h */ case  111:  		/* b 1676 */
		/* 8212ADD4h case  111:*/		return 0x8212B460;
		/* 8212ADD4h case  111:*/		return 0x8212ADD8;
		  /* 8212ADD8h */ case  112:  		/* li R5, 5 */
		/* 8212ADD8h case  112:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212ADD8h case  112:*/		return 0x8212ADDC;
		  /* 8212ADDCh */ case  113:  		/* li R4, 275 */
		/* 8212ADDCh case  113:*/		cpu::op::li<0>(regs,&regs.R4,0x113);
		/* 8212ADDCh case  113:*/		return 0x8212ADE0;
		  /* 8212ADE0h */ case  114:  		/* b 1664 */
		/* 8212ADE0h case  114:*/		return 0x8212B460;
		/* 8212ADE0h case  114:*/		return 0x8212ADE4;
		  /* 8212ADE4h */ case  115:  		/* li R5, 2 */
		/* 8212ADE4h case  115:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212ADE4h case  115:*/		return 0x8212ADE8;
		  /* 8212ADE8h */ case  116:  		/* li R4, 276 */
		/* 8212ADE8h case  116:*/		cpu::op::li<0>(regs,&regs.R4,0x114);
		/* 8212ADE8h case  116:*/		return 0x8212ADEC;
		  /* 8212ADECh */ case  117:  		/* b 1652 */
		/* 8212ADECh case  117:*/		return 0x8212B460;
		/* 8212ADECh case  117:*/		return 0x8212ADF0;
		  /* 8212ADF0h */ case  118:  		/* li R5, 4 */
		/* 8212ADF0h case  118:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212ADF0h case  118:*/		return 0x8212ADF4;
		  /* 8212ADF4h */ case  119:  		/* li R4, 277 */
		/* 8212ADF4h case  119:*/		cpu::op::li<0>(regs,&regs.R4,0x115);
		/* 8212ADF4h case  119:*/		return 0x8212ADF8;
		  /* 8212ADF8h */ case  120:  		/* b 1640 */
		/* 8212ADF8h case  120:*/		return 0x8212B460;
		/* 8212ADF8h case  120:*/		return 0x8212ADFC;
		  /* 8212ADFCh */ case  121:  		/* li R5, 6 */
		/* 8212ADFCh case  121:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8212ADFCh case  121:*/		return 0x8212AE00;
		  /* 8212AE00h */ case  122:  		/* li R4, 278 */
		/* 8212AE00h case  122:*/		cpu::op::li<0>(regs,&regs.R4,0x116);
		/* 8212AE00h case  122:*/		return 0x8212AE04;
		  /* 8212AE04h */ case  123:  		/* b 1628 */
		/* 8212AE04h case  123:*/		return 0x8212B460;
		/* 8212AE04h case  123:*/		return 0x8212AE08;
		  /* 8212AE08h */ case  124:  		/* li R5, 1 */
		/* 8212AE08h case  124:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AE08h case  124:*/		return 0x8212AE0C;
		  /* 8212AE0Ch */ case  125:  		/* li R4, 279 */
		/* 8212AE0Ch case  125:*/		cpu::op::li<0>(regs,&regs.R4,0x117);
		/* 8212AE0Ch case  125:*/		return 0x8212AE10;
		  /* 8212AE10h */ case  126:  		/* b 1616 */
		/* 8212AE10h case  126:*/		return 0x8212B460;
		/* 8212AE10h case  126:*/		return 0x8212AE14;
		  /* 8212AE14h */ case  127:  		/* li R5, 2 */
		/* 8212AE14h case  127:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AE14h case  127:*/		return 0x8212AE18;
		  /* 8212AE18h */ case  128:  		/* li R4, 280 */
		/* 8212AE18h case  128:*/		cpu::op::li<0>(regs,&regs.R4,0x118);
		/* 8212AE18h case  128:*/		return 0x8212AE1C;
		  /* 8212AE1Ch */ case  129:  		/* b 1604 */
		/* 8212AE1Ch case  129:*/		return 0x8212B460;
		/* 8212AE1Ch case  129:*/		return 0x8212AE20;
		  /* 8212AE20h */ case  130:  		/* li R5, 5 */
		/* 8212AE20h case  130:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8212AE20h case  130:*/		return 0x8212AE24;
		  /* 8212AE24h */ case  131:  		/* li R4, 281 */
		/* 8212AE24h case  131:*/		cpu::op::li<0>(regs,&regs.R4,0x119);
		/* 8212AE24h case  131:*/		return 0x8212AE28;
		  /* 8212AE28h */ case  132:  		/* b 1592 */
		/* 8212AE28h case  132:*/		return 0x8212B460;
		/* 8212AE28h case  132:*/		return 0x8212AE2C;
		  /* 8212AE2Ch */ case  133:  		/* li R5, 2 */
		/* 8212AE2Ch case  133:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AE2Ch case  133:*/		return 0x8212AE30;
		  /* 8212AE30h */ case  134:  		/* li R4, 282 */
		/* 8212AE30h case  134:*/		cpu::op::li<0>(regs,&regs.R4,0x11A);
		/* 8212AE30h case  134:*/		return 0x8212AE34;
		  /* 8212AE34h */ case  135:  		/* b 1580 */
		/* 8212AE34h case  135:*/		return 0x8212B460;
		/* 8212AE34h case  135:*/		return 0x8212AE38;
		  /* 8212AE38h */ case  136:  		/* li R5, 3 */
		/* 8212AE38h case  136:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AE38h case  136:*/		return 0x8212AE3C;
		  /* 8212AE3Ch */ case  137:  		/* li R4, 283 */
		/* 8212AE3Ch case  137:*/		cpu::op::li<0>(regs,&regs.R4,0x11B);
		/* 8212AE3Ch case  137:*/		return 0x8212AE40;
		  /* 8212AE40h */ case  138:  		/* b 1568 */
		/* 8212AE40h case  138:*/		return 0x8212B460;
		/* 8212AE40h case  138:*/		return 0x8212AE44;
		  /* 8212AE44h */ case  139:  		/* li R5, 2 */
		/* 8212AE44h case  139:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AE44h case  139:*/		return 0x8212AE48;
		  /* 8212AE48h */ case  140:  		/* li R4, 284 */
		/* 8212AE48h case  140:*/		cpu::op::li<0>(regs,&regs.R4,0x11C);
		/* 8212AE48h case  140:*/		return 0x8212AE4C;
		  /* 8212AE4Ch */ case  141:  		/* b 1556 */
		/* 8212AE4Ch case  141:*/		return 0x8212B460;
		/* 8212AE4Ch case  141:*/		return 0x8212AE50;
		  /* 8212AE50h */ case  142:  		/* li R5, 2 */
		/* 8212AE50h case  142:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AE50h case  142:*/		return 0x8212AE54;
		  /* 8212AE54h */ case  143:  		/* li R4, 285 */
		/* 8212AE54h case  143:*/		cpu::op::li<0>(regs,&regs.R4,0x11D);
		/* 8212AE54h case  143:*/		return 0x8212AE58;
		  /* 8212AE58h */ case  144:  		/* b 1544 */
		/* 8212AE58h case  144:*/		return 0x8212B460;
		/* 8212AE58h case  144:*/		return 0x8212AE5C;
		  /* 8212AE5Ch */ case  145:  		/* li R5, 3 */
		/* 8212AE5Ch case  145:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AE5Ch case  145:*/		return 0x8212AE60;
		  /* 8212AE60h */ case  146:  		/* li R4, 286 */
		/* 8212AE60h case  146:*/		cpu::op::li<0>(regs,&regs.R4,0x11E);
		/* 8212AE60h case  146:*/		return 0x8212AE64;
		  /* 8212AE64h */ case  147:  		/* b 1532 */
		/* 8212AE64h case  147:*/		return 0x8212B460;
		/* 8212AE64h case  147:*/		return 0x8212AE68;
		  /* 8212AE68h */ case  148:  		/* li R5, 6 */
		/* 8212AE68h case  148:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8212AE68h case  148:*/		return 0x8212AE6C;
		  /* 8212AE6Ch */ case  149:  		/* li R4, 287 */
		/* 8212AE6Ch case  149:*/		cpu::op::li<0>(regs,&regs.R4,0x11F);
		/* 8212AE6Ch case  149:*/		return 0x8212AE70;
		  /* 8212AE70h */ case  150:  		/* b 1520 */
		/* 8212AE70h case  150:*/		return 0x8212B460;
		/* 8212AE70h case  150:*/		return 0x8212AE74;
		  /* 8212AE74h */ case  151:  		/* li R5, 3 */
		/* 8212AE74h case  151:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AE74h case  151:*/		return 0x8212AE78;
		  /* 8212AE78h */ case  152:  		/* li R4, 288 */
		/* 8212AE78h case  152:*/		cpu::op::li<0>(regs,&regs.R4,0x120);
		/* 8212AE78h case  152:*/		return 0x8212AE7C;
		  /* 8212AE7Ch */ case  153:  		/* b 1508 */
		/* 8212AE7Ch case  153:*/		return 0x8212B460;
		/* 8212AE7Ch case  153:*/		return 0x8212AE80;
		  /* 8212AE80h */ case  154:  		/* li R5, 4 */
		/* 8212AE80h case  154:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212AE80h case  154:*/		return 0x8212AE84;
		  /* 8212AE84h */ case  155:  		/* li R4, 289 */
		/* 8212AE84h case  155:*/		cpu::op::li<0>(regs,&regs.R4,0x121);
		/* 8212AE84h case  155:*/		return 0x8212AE88;
		  /* 8212AE88h */ case  156:  		/* b 1496 */
		/* 8212AE88h case  156:*/		return 0x8212B460;
		/* 8212AE88h case  156:*/		return 0x8212AE8C;
		  /* 8212AE8Ch */ case  157:  		/* li R5, 3 */
		/* 8212AE8Ch case  157:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212AE8Ch case  157:*/		return 0x8212AE90;
		  /* 8212AE90h */ case  158:  		/* li R4, 290 */
		/* 8212AE90h case  158:*/		cpu::op::li<0>(regs,&regs.R4,0x122);
		/* 8212AE90h case  158:*/		return 0x8212AE94;
		  /* 8212AE94h */ case  159:  		/* b 1484 */
		/* 8212AE94h case  159:*/		return 0x8212B460;
		/* 8212AE94h case  159:*/		return 0x8212AE98;
		  /* 8212AE98h */ case  160:  		/* li R5, 1 */
		/* 8212AE98h case  160:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AE98h case  160:*/		return 0x8212AE9C;
		  /* 8212AE9Ch */ case  161:  		/* li R4, 291 */
		/* 8212AE9Ch case  161:*/		cpu::op::li<0>(regs,&regs.R4,0x123);
		/* 8212AE9Ch case  161:*/		return 0x8212AEA0;
		  /* 8212AEA0h */ case  162:  		/* b 1472 */
		/* 8212AEA0h case  162:*/		return 0x8212B460;
		/* 8212AEA0h case  162:*/		return 0x8212AEA4;
		  /* 8212AEA4h */ case  163:  		/* li R4, 292 */
		/* 8212AEA4h case  163:*/		cpu::op::li<0>(regs,&regs.R4,0x124);
		/* 8212AEA4h case  163:*/		return 0x8212AEA8;
		  /* 8212AEA8h */ case  164:  		/* b 1460 */
		/* 8212AEA8h case  164:*/		return 0x8212B45C;
		/* 8212AEA8h case  164:*/		return 0x8212AEAC;
		  /* 8212AEACh */ case  165:  		/* li R5, 1 */
		/* 8212AEACh case  165:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AEACh case  165:*/		return 0x8212AEB0;
		  /* 8212AEB0h */ case  166:  		/* li R4, 293 */
		/* 8212AEB0h case  166:*/		cpu::op::li<0>(regs,&regs.R4,0x125);
		/* 8212AEB0h case  166:*/		return 0x8212AEB4;
		  /* 8212AEB4h */ case  167:  		/* b 1452 */
		/* 8212AEB4h case  167:*/		return 0x8212B460;
		/* 8212AEB4h case  167:*/		return 0x8212AEB8;
		  /* 8212AEB8h */ case  168:  		/* li R5, 2 */
		/* 8212AEB8h case  168:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AEB8h case  168:*/		return 0x8212AEBC;
		  /* 8212AEBCh */ case  169:  		/* li R4, 294 */
		/* 8212AEBCh case  169:*/		cpu::op::li<0>(regs,&regs.R4,0x126);
		/* 8212AEBCh case  169:*/		return 0x8212AEC0;
		  /* 8212AEC0h */ case  170:  		/* b 1440 */
		/* 8212AEC0h case  170:*/		return 0x8212B460;
		/* 8212AEC0h case  170:*/		return 0x8212AEC4;
		  /* 8212AEC4h */ case  171:  		/* li R5, 2 */
		/* 8212AEC4h case  171:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AEC4h case  171:*/		return 0x8212AEC8;
		  /* 8212AEC8h */ case  172:  		/* li R4, 295 */
		/* 8212AEC8h case  172:*/		cpu::op::li<0>(regs,&regs.R4,0x127);
		/* 8212AEC8h case  172:*/		return 0x8212AECC;
		  /* 8212AECCh */ case  173:  		/* b 1428 */
		/* 8212AECCh case  173:*/		return 0x8212B460;
		/* 8212AECCh case  173:*/		return 0x8212AED0;
		  /* 8212AED0h */ case  174:  		/* li R5, 1 */
		/* 8212AED0h case  174:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AED0h case  174:*/		return 0x8212AED4;
		  /* 8212AED4h */ case  175:  		/* li R4, 296 */
		/* 8212AED4h case  175:*/		cpu::op::li<0>(regs,&regs.R4,0x128);
		/* 8212AED4h case  175:*/		return 0x8212AED8;
		  /* 8212AED8h */ case  176:  		/* b 1416 */
		/* 8212AED8h case  176:*/		return 0x8212B460;
		/* 8212AED8h case  176:*/		return 0x8212AEDC;
		  /* 8212AEDCh */ case  177:  		/* li R5, 2 */
		/* 8212AEDCh case  177:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AEDCh case  177:*/		return 0x8212AEE0;
		  /* 8212AEE0h */ case  178:  		/* li R4, 297 */
		/* 8212AEE0h case  178:*/		cpu::op::li<0>(regs,&regs.R4,0x129);
		/* 8212AEE0h case  178:*/		return 0x8212AEE4;
		  /* 8212AEE4h */ case  179:  		/* b 1404 */
		/* 8212AEE4h case  179:*/		return 0x8212B460;
		/* 8212AEE4h case  179:*/		return 0x8212AEE8;
		  /* 8212AEE8h */ case  180:  		/* li R4, 298 */
		/* 8212AEE8h case  180:*/		cpu::op::li<0>(regs,&regs.R4,0x12A);
		/* 8212AEE8h case  180:*/		return 0x8212AEEC;
		  /* 8212AEECh */ case  181:  		/* b 1392 */
		/* 8212AEECh case  181:*/		return 0x8212B45C;
		/* 8212AEECh case  181:*/		return 0x8212AEF0;
		  /* 8212AEF0h */ case  182:  		/* li R4, 299 */
		/* 8212AEF0h case  182:*/		cpu::op::li<0>(regs,&regs.R4,0x12B);
		/* 8212AEF0h case  182:*/		return 0x8212AEF4;
		  /* 8212AEF4h */ case  183:  		/* b 1384 */
		/* 8212AEF4h case  183:*/		return 0x8212B45C;
		/* 8212AEF4h case  183:*/		return 0x8212AEF8;
		  /* 8212AEF8h */ case  184:  		/* li R5, 1 */
		/* 8212AEF8h case  184:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AEF8h case  184:*/		return 0x8212AEFC;
		  /* 8212AEFCh */ case  185:  		/* li R4, 300 */
		/* 8212AEFCh case  185:*/		cpu::op::li<0>(regs,&regs.R4,0x12C);
		/* 8212AEFCh case  185:*/		return 0x8212AF00;
		  /* 8212AF00h */ case  186:  		/* b 1376 */
		/* 8212AF00h case  186:*/		return 0x8212B460;
		/* 8212AF00h case  186:*/		return 0x8212AF04;
		  /* 8212AF04h */ case  187:  		/* li R5, 1 */
		/* 8212AF04h case  187:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF04h case  187:*/		return 0x8212AF08;
		  /* 8212AF08h */ case  188:  		/* li R4, 301 */
		/* 8212AF08h case  188:*/		cpu::op::li<0>(regs,&regs.R4,0x12D);
		/* 8212AF08h case  188:*/		return 0x8212AF0C;
		  /* 8212AF0Ch */ case  189:  		/* b 1364 */
		/* 8212AF0Ch case  189:*/		return 0x8212B460;
		/* 8212AF0Ch case  189:*/		return 0x8212AF10;
		  /* 8212AF10h */ case  190:  		/* li R4, 302 */
		/* 8212AF10h case  190:*/		cpu::op::li<0>(regs,&regs.R4,0x12E);
		/* 8212AF10h case  190:*/		return 0x8212AF14;
		  /* 8212AF14h */ case  191:  		/* b 1352 */
		/* 8212AF14h case  191:*/		return 0x8212B45C;
		/* 8212AF14h case  191:*/		return 0x8212AF18;
		  /* 8212AF18h */ case  192:  		/* li R5, 1 */
		/* 8212AF18h case  192:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF18h case  192:*/		return 0x8212AF1C;
		  /* 8212AF1Ch */ case  193:  		/* li R4, 303 */
		/* 8212AF1Ch case  193:*/		cpu::op::li<0>(regs,&regs.R4,0x12F);
		/* 8212AF1Ch case  193:*/		return 0x8212AF20;
		  /* 8212AF20h */ case  194:  		/* b 1344 */
		/* 8212AF20h case  194:*/		return 0x8212B460;
		/* 8212AF20h case  194:*/		return 0x8212AF24;
		  /* 8212AF24h */ case  195:  		/* li R4, 304 */
		/* 8212AF24h case  195:*/		cpu::op::li<0>(regs,&regs.R4,0x130);
		/* 8212AF24h case  195:*/		return 0x8212AF28;
		  /* 8212AF28h */ case  196:  		/* b 1332 */
		/* 8212AF28h case  196:*/		return 0x8212B45C;
		/* 8212AF28h case  196:*/		return 0x8212AF2C;
		  /* 8212AF2Ch */ case  197:  		/* li R5, 1 */
		/* 8212AF2Ch case  197:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF2Ch case  197:*/		return 0x8212AF30;
		  /* 8212AF30h */ case  198:  		/* li R4, 305 */
		/* 8212AF30h case  198:*/		cpu::op::li<0>(regs,&regs.R4,0x131);
		/* 8212AF30h case  198:*/		return 0x8212AF34;
		  /* 8212AF34h */ case  199:  		/* b 1324 */
		/* 8212AF34h case  199:*/		return 0x8212B460;
		/* 8212AF34h case  199:*/		return 0x8212AF38;
		  /* 8212AF38h */ case  200:  		/* li R4, 313 */
		/* 8212AF38h case  200:*/		cpu::op::li<0>(regs,&regs.R4,0x139);
		/* 8212AF38h case  200:*/		return 0x8212AF3C;
		  /* 8212AF3Ch */ case  201:  		/* b 1312 */
		/* 8212AF3Ch case  201:*/		return 0x8212B45C;
		/* 8212AF3Ch case  201:*/		return 0x8212AF40;
		  /* 8212AF40h */ case  202:  		/* li R4, 314 */
		/* 8212AF40h case  202:*/		cpu::op::li<0>(regs,&regs.R4,0x13A);
		/* 8212AF40h case  202:*/		return 0x8212AF44;
		  /* 8212AF44h */ case  203:  		/* b 1304 */
		/* 8212AF44h case  203:*/		return 0x8212B45C;
		/* 8212AF44h case  203:*/		return 0x8212AF48;
		  /* 8212AF48h */ case  204:  		/* li R5, 1 */
		/* 8212AF48h case  204:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF48h case  204:*/		return 0x8212AF4C;
		  /* 8212AF4Ch */ case  205:  		/* li R4, 315 */
		/* 8212AF4Ch case  205:*/		cpu::op::li<0>(regs,&regs.R4,0x13B);
		/* 8212AF4Ch case  205:*/		return 0x8212AF50;
		  /* 8212AF50h */ case  206:  		/* b 1296 */
		/* 8212AF50h case  206:*/		return 0x8212B460;
		/* 8212AF50h case  206:*/		return 0x8212AF54;
		  /* 8212AF54h */ case  207:  		/* li R5, 1 */
		/* 8212AF54h case  207:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF54h case  207:*/		return 0x8212AF58;
		  /* 8212AF58h */ case  208:  		/* li R4, 316 */
		/* 8212AF58h case  208:*/		cpu::op::li<0>(regs,&regs.R4,0x13C);
		/* 8212AF58h case  208:*/		return 0x8212AF5C;
		  /* 8212AF5Ch */ case  209:  		/* b 1284 */
		/* 8212AF5Ch case  209:*/		return 0x8212B460;
		/* 8212AF5Ch case  209:*/		return 0x8212AF60;
		  /* 8212AF60h */ case  210:  		/* li R5, 1 */
		/* 8212AF60h case  210:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF60h case  210:*/		return 0x8212AF64;
		  /* 8212AF64h */ case  211:  		/* li R4, 317 */
		/* 8212AF64h case  211:*/		cpu::op::li<0>(regs,&regs.R4,0x13D);
		/* 8212AF64h case  211:*/		return 0x8212AF68;
		  /* 8212AF68h */ case  212:  		/* b 1272 */
		/* 8212AF68h case  212:*/		return 0x8212B460;
		/* 8212AF68h case  212:*/		return 0x8212AF6C;
		  /* 8212AF6Ch */ case  213:  		/* li R5, 1 */
		/* 8212AF6Ch case  213:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF6Ch case  213:*/		return 0x8212AF70;
		  /* 8212AF70h */ case  214:  		/* li R4, 318 */
		/* 8212AF70h case  214:*/		cpu::op::li<0>(regs,&regs.R4,0x13E);
		/* 8212AF70h case  214:*/		return 0x8212AF74;
		  /* 8212AF74h */ case  215:  		/* b 1260 */
		/* 8212AF74h case  215:*/		return 0x8212B460;
		/* 8212AF74h case  215:*/		return 0x8212AF78;
		  /* 8212AF78h */ case  216:  		/* li R4, 319 */
		/* 8212AF78h case  216:*/		cpu::op::li<0>(regs,&regs.R4,0x13F);
		/* 8212AF78h case  216:*/		return 0x8212AF7C;
		  /* 8212AF7Ch */ case  217:  		/* b 1248 */
		/* 8212AF7Ch case  217:*/		return 0x8212B45C;
		/* 8212AF7Ch case  217:*/		return 0x8212AF80;
		  /* 8212AF80h */ case  218:  		/* li R5, 1 */
		/* 8212AF80h case  218:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AF80h case  218:*/		return 0x8212AF84;
		  /* 8212AF84h */ case  219:  		/* li R4, 320 */
		/* 8212AF84h case  219:*/		cpu::op::li<0>(regs,&regs.R4,0x140);
		/* 8212AF84h case  219:*/		return 0x8212AF88;
		  /* 8212AF88h */ case  220:  		/* b 1240 */
		/* 8212AF88h case  220:*/		return 0x8212B460;
		/* 8212AF88h case  220:*/		return 0x8212AF8C;
		  /* 8212AF8Ch */ case  221:  		/* li R5, 2 */
		/* 8212AF8Ch case  221:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AF8Ch case  221:*/		return 0x8212AF90;
		  /* 8212AF90h */ case  222:  		/* li R4, 321 */
		/* 8212AF90h case  222:*/		cpu::op::li<0>(regs,&regs.R4,0x141);
		/* 8212AF90h case  222:*/		return 0x8212AF94;
		  /* 8212AF94h */ case  223:  		/* b 1228 */
		/* 8212AF94h case  223:*/		return 0x8212B460;
		/* 8212AF94h case  223:*/		return 0x8212AF98;
		  /* 8212AF98h */ case  224:  		/* li R5, 2 */
		/* 8212AF98h case  224:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AF98h case  224:*/		return 0x8212AF9C;
		  /* 8212AF9Ch */ case  225:  		/* li R4, 322 */
		/* 8212AF9Ch case  225:*/		cpu::op::li<0>(regs,&regs.R4,0x142);
		/* 8212AF9Ch case  225:*/		return 0x8212AFA0;
		  /* 8212AFA0h */ case  226:  		/* b 1216 */
		/* 8212AFA0h case  226:*/		return 0x8212B460;
		/* 8212AFA0h case  226:*/		return 0x8212AFA4;
		  /* 8212AFA4h */ case  227:  		/* li R5, 2 */
		/* 8212AFA4h case  227:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AFA4h case  227:*/		return 0x8212AFA8;
		  /* 8212AFA8h */ case  228:  		/* li R4, 323 */
		/* 8212AFA8h case  228:*/		cpu::op::li<0>(regs,&regs.R4,0x143);
		/* 8212AFA8h case  228:*/		return 0x8212AFAC;
		  /* 8212AFACh */ case  229:  		/* b 1204 */
		/* 8212AFACh case  229:*/		return 0x8212B460;
		/* 8212AFACh case  229:*/		return 0x8212AFB0;
		  /* 8212AFB0h */ case  230:  		/* li R5, 1 */
		/* 8212AFB0h case  230:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AFB0h case  230:*/		return 0x8212AFB4;
		  /* 8212AFB4h */ case  231:  		/* li R4, 324 */
		/* 8212AFB4h case  231:*/		cpu::op::li<0>(regs,&regs.R4,0x144);
		/* 8212AFB4h case  231:*/		return 0x8212AFB8;
		  /* 8212AFB8h */ case  232:  		/* b 1192 */
		/* 8212AFB8h case  232:*/		return 0x8212B460;
		/* 8212AFB8h case  232:*/		return 0x8212AFBC;
		  /* 8212AFBCh */ case  233:  		/* li R5, 1 */
		/* 8212AFBCh case  233:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AFBCh case  233:*/		return 0x8212AFC0;
		  /* 8212AFC0h */ case  234:  		/* li R4, 325 */
		/* 8212AFC0h case  234:*/		cpu::op::li<0>(regs,&regs.R4,0x145);
		/* 8212AFC0h case  234:*/		return 0x8212AFC4;
		  /* 8212AFC4h */ case  235:  		/* b 1180 */
		/* 8212AFC4h case  235:*/		return 0x8212B460;
		/* 8212AFC4h case  235:*/		return 0x8212AFC8;
		  /* 8212AFC8h */ case  236:  		/* li R5, 2 */
		/* 8212AFC8h case  236:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AFC8h case  236:*/		return 0x8212AFCC;
		  /* 8212AFCCh */ case  237:  		/* li R4, 326 */
		/* 8212AFCCh case  237:*/		cpu::op::li<0>(regs,&regs.R4,0x146);
		/* 8212AFCCh case  237:*/		return 0x8212AFD0;
		  /* 8212AFD0h */ case  238:  		/* b 1168 */
		/* 8212AFD0h case  238:*/		return 0x8212B460;
		/* 8212AFD0h case  238:*/		return 0x8212AFD4;
		  /* 8212AFD4h */ case  239:  		/* li R5, 1 */
		/* 8212AFD4h case  239:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AFD4h case  239:*/		return 0x8212AFD8;
		  /* 8212AFD8h */ case  240:  		/* li R4, 327 */
		/* 8212AFD8h case  240:*/		cpu::op::li<0>(regs,&regs.R4,0x147);
		/* 8212AFD8h case  240:*/		return 0x8212AFDC;
		  /* 8212AFDCh */ case  241:  		/* b 1156 */
		/* 8212AFDCh case  241:*/		return 0x8212B460;
		/* 8212AFDCh case  241:*/		return 0x8212AFE0;
		  /* 8212AFE0h */ case  242:  		/* li R5, 1 */
		/* 8212AFE0h case  242:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AFE0h case  242:*/		return 0x8212AFE4;
		  /* 8212AFE4h */ case  243:  		/* li R4, 328 */
		/* 8212AFE4h case  243:*/		cpu::op::li<0>(regs,&regs.R4,0x148);
		/* 8212AFE4h case  243:*/		return 0x8212AFE8;
		  /* 8212AFE8h */ case  244:  		/* b 1144 */
		/* 8212AFE8h case  244:*/		return 0x8212B460;
		/* 8212AFE8h case  244:*/		return 0x8212AFEC;
		  /* 8212AFECh */ case  245:  		/* li R5, 2 */
		/* 8212AFECh case  245:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212AFECh case  245:*/		return 0x8212AFF0;
		  /* 8212AFF0h */ case  246:  		/* li R4, 329 */
		/* 8212AFF0h case  246:*/		cpu::op::li<0>(regs,&regs.R4,0x149);
		/* 8212AFF0h case  246:*/		return 0x8212AFF4;
		  /* 8212AFF4h */ case  247:  		/* b 1132 */
		/* 8212AFF4h case  247:*/		return 0x8212B460;
		/* 8212AFF4h case  247:*/		return 0x8212AFF8;
		  /* 8212AFF8h */ case  248:  		/* li R5, 1 */
		/* 8212AFF8h case  248:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212AFF8h case  248:*/		return 0x8212AFFC;
		  /* 8212AFFCh */ case  249:  		/* li R4, 330 */
		/* 8212AFFCh case  249:*/		cpu::op::li<0>(regs,&regs.R4,0x14A);
		/* 8212AFFCh case  249:*/		return 0x8212B000;
		  /* 8212B000h */ case  250:  		/* b 1120 */
		/* 8212B000h case  250:*/		return 0x8212B460;
		/* 8212B000h case  250:*/		return 0x8212B004;
		  /* 8212B004h */ case  251:  		/* li R5, 1 */
		/* 8212B004h case  251:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B004h case  251:*/		return 0x8212B008;
		  /* 8212B008h */ case  252:  		/* li R4, 331 */
		/* 8212B008h case  252:*/		cpu::op::li<0>(regs,&regs.R4,0x14B);
		/* 8212B008h case  252:*/		return 0x8212B00C;
		  /* 8212B00Ch */ case  253:  		/* b 1108 */
		/* 8212B00Ch case  253:*/		return 0x8212B460;
		/* 8212B00Ch case  253:*/		return 0x8212B010;
		  /* 8212B010h */ case  254:  		/* li R5, 3 */
		/* 8212B010h case  254:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212B010h case  254:*/		return 0x8212B014;
		  /* 8212B014h */ case  255:  		/* li R4, 332 */
		/* 8212B014h case  255:*/		cpu::op::li<0>(regs,&regs.R4,0x14C);
		/* 8212B014h case  255:*/		return 0x8212B018;
		  /* 8212B018h */ case  256:  		/* b 1096 */
		/* 8212B018h case  256:*/		return 0x8212B460;
		/* 8212B018h case  256:*/		return 0x8212B01C;
		  /* 8212B01Ch */ case  257:  		/* li R5, 3 */
		/* 8212B01Ch case  257:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212B01Ch case  257:*/		return 0x8212B020;
		  /* 8212B020h */ case  258:  		/* li R4, 333 */
		/* 8212B020h case  258:*/		cpu::op::li<0>(regs,&regs.R4,0x14D);
		/* 8212B020h case  258:*/		return 0x8212B024;
		  /* 8212B024h */ case  259:  		/* b 1084 */
		/* 8212B024h case  259:*/		return 0x8212B460;
		/* 8212B024h case  259:*/		return 0x8212B028;
		  /* 8212B028h */ case  260:  		/* li R5, 4 */
		/* 8212B028h case  260:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8212B028h case  260:*/		return 0x8212B02C;
		  /* 8212B02Ch */ case  261:  		/* li R4, 334 */
		/* 8212B02Ch case  261:*/		cpu::op::li<0>(regs,&regs.R4,0x14E);
		/* 8212B02Ch case  261:*/		return 0x8212B030;
		  /* 8212B030h */ case  262:  		/* b 1072 */
		/* 8212B030h case  262:*/		return 0x8212B460;
		/* 8212B030h case  262:*/		return 0x8212B034;
		  /* 8212B034h */ case  263:  		/* li R5, 1 */
		/* 8212B034h case  263:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B034h case  263:*/		return 0x8212B038;
		  /* 8212B038h */ case  264:  		/* li R4, 335 */
		/* 8212B038h case  264:*/		cpu::op::li<0>(regs,&regs.R4,0x14F);
		/* 8212B038h case  264:*/		return 0x8212B03C;
		  /* 8212B03Ch */ case  265:  		/* b 1060 */
		/* 8212B03Ch case  265:*/		return 0x8212B460;
		/* 8212B03Ch case  265:*/		return 0x8212B040;
		  /* 8212B040h */ case  266:  		/* li R5, 3 */
		/* 8212B040h case  266:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212B040h case  266:*/		return 0x8212B044;
		  /* 8212B044h */ case  267:  		/* li R4, 336 */
		/* 8212B044h case  267:*/		cpu::op::li<0>(regs,&regs.R4,0x150);
		/* 8212B044h case  267:*/		return 0x8212B048;
		  /* 8212B048h */ case  268:  		/* b 1048 */
		/* 8212B048h case  268:*/		return 0x8212B460;
		/* 8212B048h case  268:*/		return 0x8212B04C;
		  /* 8212B04Ch */ case  269:  		/* li R5, 1 */
		/* 8212B04Ch case  269:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B04Ch case  269:*/		return 0x8212B050;
		  /* 8212B050h */ case  270:  		/* li R4, 337 */
		/* 8212B050h case  270:*/		cpu::op::li<0>(regs,&regs.R4,0x151);
		/* 8212B050h case  270:*/		return 0x8212B054;
		  /* 8212B054h */ case  271:  		/* b 1036 */
		/* 8212B054h case  271:*/		return 0x8212B460;
		/* 8212B054h case  271:*/		return 0x8212B058;
		  /* 8212B058h */ case  272:  		/* li R5, 1 */
		/* 8212B058h case  272:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B058h case  272:*/		return 0x8212B05C;
		  /* 8212B05Ch */ case  273:  		/* li R4, 338 */
		/* 8212B05Ch case  273:*/		cpu::op::li<0>(regs,&regs.R4,0x152);
		/* 8212B05Ch case  273:*/		return 0x8212B060;
		  /* 8212B060h */ case  274:  		/* b 1024 */
		/* 8212B060h case  274:*/		return 0x8212B460;
		/* 8212B060h case  274:*/		return 0x8212B064;
		  /* 8212B064h */ case  275:  		/* li R5, 1 */
		/* 8212B064h case  275:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B064h case  275:*/		return 0x8212B068;
		  /* 8212B068h */ case  276:  		/* li R4, 339 */
		/* 8212B068h case  276:*/		cpu::op::li<0>(regs,&regs.R4,0x153);
		/* 8212B068h case  276:*/		return 0x8212B06C;
		  /* 8212B06Ch */ case  277:  		/* b 1012 */
		/* 8212B06Ch case  277:*/		return 0x8212B460;
		/* 8212B06Ch case  277:*/		return 0x8212B070;
		  /* 8212B070h */ case  278:  		/* li R5, 1 */
		/* 8212B070h case  278:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B070h case  278:*/		return 0x8212B074;
		  /* 8212B074h */ case  279:  		/* li R4, 340 */
		/* 8212B074h case  279:*/		cpu::op::li<0>(regs,&regs.R4,0x154);
		/* 8212B074h case  279:*/		return 0x8212B078;
		  /* 8212B078h */ case  280:  		/* b 1000 */
		/* 8212B078h case  280:*/		return 0x8212B460;
		/* 8212B078h case  280:*/		return 0x8212B07C;
		  /* 8212B07Ch */ case  281:  		/* li R5, 2 */
		/* 8212B07Ch case  281:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B07Ch case  281:*/		return 0x8212B080;
		  /* 8212B080h */ case  282:  		/* li R4, 341 */
		/* 8212B080h case  282:*/		cpu::op::li<0>(regs,&regs.R4,0x155);
		/* 8212B080h case  282:*/		return 0x8212B084;
		  /* 8212B084h */ case  283:  		/* b 988 */
		/* 8212B084h case  283:*/		return 0x8212B460;
		/* 8212B084h case  283:*/		return 0x8212B088;
		  /* 8212B088h */ case  284:  		/* li R5, 2 */
		/* 8212B088h case  284:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B088h case  284:*/		return 0x8212B08C;
		  /* 8212B08Ch */ case  285:  		/* li R4, 342 */
		/* 8212B08Ch case  285:*/		cpu::op::li<0>(regs,&regs.R4,0x156);
		/* 8212B08Ch case  285:*/		return 0x8212B090;
		  /* 8212B090h */ case  286:  		/* b 976 */
		/* 8212B090h case  286:*/		return 0x8212B460;
		/* 8212B090h case  286:*/		return 0x8212B094;
		  /* 8212B094h */ case  287:  		/* li R5, 1 */
		/* 8212B094h case  287:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B094h case  287:*/		return 0x8212B098;
		  /* 8212B098h */ case  288:  		/* li R4, 343 */
		/* 8212B098h case  288:*/		cpu::op::li<0>(regs,&regs.R4,0x157);
		/* 8212B098h case  288:*/		return 0x8212B09C;
		  /* 8212B09Ch */ case  289:  		/* b 964 */
		/* 8212B09Ch case  289:*/		return 0x8212B460;
		/* 8212B09Ch case  289:*/		return 0x8212B0A0;
		  /* 8212B0A0h */ case  290:  		/* li R5, 1 */
		/* 8212B0A0h case  290:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0A0h case  290:*/		return 0x8212B0A4;
		  /* 8212B0A4h */ case  291:  		/* li R4, 344 */
		/* 8212B0A4h case  291:*/		cpu::op::li<0>(regs,&regs.R4,0x158);
		/* 8212B0A4h case  291:*/		return 0x8212B0A8;
		  /* 8212B0A8h */ case  292:  		/* b 952 */
		/* 8212B0A8h case  292:*/		return 0x8212B460;
		/* 8212B0A8h case  292:*/		return 0x8212B0AC;
		  /* 8212B0ACh */ case  293:  		/* li R5, 3 */
		/* 8212B0ACh case  293:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212B0ACh case  293:*/		return 0x8212B0B0;
		  /* 8212B0B0h */ case  294:  		/* li R4, 345 */
		/* 8212B0B0h case  294:*/		cpu::op::li<0>(regs,&regs.R4,0x159);
		/* 8212B0B0h case  294:*/		return 0x8212B0B4;
		  /* 8212B0B4h */ case  295:  		/* b 940 */
		/* 8212B0B4h case  295:*/		return 0x8212B460;
		/* 8212B0B4h case  295:*/		return 0x8212B0B8;
		  /* 8212B0B8h */ case  296:  		/* li R5, 1 */
		/* 8212B0B8h case  296:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0B8h case  296:*/		return 0x8212B0BC;
		  /* 8212B0BCh */ case  297:  		/* li R4, 346 */
		/* 8212B0BCh case  297:*/		cpu::op::li<0>(regs,&regs.R4,0x15A);
		/* 8212B0BCh case  297:*/		return 0x8212B0C0;
		  /* 8212B0C0h */ case  298:  		/* b 928 */
		/* 8212B0C0h case  298:*/		return 0x8212B460;
		/* 8212B0C0h case  298:*/		return 0x8212B0C4;
		  /* 8212B0C4h */ case  299:  		/* li R5, 1 */
		/* 8212B0C4h case  299:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0C4h case  299:*/		return 0x8212B0C8;
		  /* 8212B0C8h */ case  300:  		/* li R4, 347 */
		/* 8212B0C8h case  300:*/		cpu::op::li<0>(regs,&regs.R4,0x15B);
		/* 8212B0C8h case  300:*/		return 0x8212B0CC;
		  /* 8212B0CCh */ case  301:  		/* b 916 */
		/* 8212B0CCh case  301:*/		return 0x8212B460;
		/* 8212B0CCh case  301:*/		return 0x8212B0D0;
		  /* 8212B0D0h */ case  302:  		/* li R5, 1 */
		/* 8212B0D0h case  302:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0D0h case  302:*/		return 0x8212B0D4;
		  /* 8212B0D4h */ case  303:  		/* li R4, 348 */
		/* 8212B0D4h case  303:*/		cpu::op::li<0>(regs,&regs.R4,0x15C);
		/* 8212B0D4h case  303:*/		return 0x8212B0D8;
		  /* 8212B0D8h */ case  304:  		/* b 904 */
		/* 8212B0D8h case  304:*/		return 0x8212B460;
		/* 8212B0D8h case  304:*/		return 0x8212B0DC;
		  /* 8212B0DCh */ case  305:  		/* li R5, 1 */
		/* 8212B0DCh case  305:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0DCh case  305:*/		return 0x8212B0E0;
		  /* 8212B0E0h */ case  306:  		/* li R4, 349 */
		/* 8212B0E0h case  306:*/		cpu::op::li<0>(regs,&regs.R4,0x15D);
		/* 8212B0E0h case  306:*/		return 0x8212B0E4;
		  /* 8212B0E4h */ case  307:  		/* b 892 */
		/* 8212B0E4h case  307:*/		return 0x8212B460;
		/* 8212B0E4h case  307:*/		return 0x8212B0E8;
		  /* 8212B0E8h */ case  308:  		/* li R5, 1 */
		/* 8212B0E8h case  308:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0E8h case  308:*/		return 0x8212B0EC;
		  /* 8212B0ECh */ case  309:  		/* li R4, 350 */
		/* 8212B0ECh case  309:*/		cpu::op::li<0>(regs,&regs.R4,0x15E);
		/* 8212B0ECh case  309:*/		return 0x8212B0F0;
		  /* 8212B0F0h */ case  310:  		/* b 880 */
		/* 8212B0F0h case  310:*/		return 0x8212B460;
		/* 8212B0F0h case  310:*/		return 0x8212B0F4;
		  /* 8212B0F4h */ case  311:  		/* li R5, 1 */
		/* 8212B0F4h case  311:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B0F4h case  311:*/		return 0x8212B0F8;
		  /* 8212B0F8h */ case  312:  		/* li R4, 351 */
		/* 8212B0F8h case  312:*/		cpu::op::li<0>(regs,&regs.R4,0x15F);
		/* 8212B0F8h case  312:*/		return 0x8212B0FC;
		  /* 8212B0FCh */ case  313:  		/* b 868 */
		/* 8212B0FCh case  313:*/		return 0x8212B460;
		/* 8212B0FCh case  313:*/		return 0x8212B100;
		  /* 8212B100h */ case  314:  		/* li R5, 1 */
		/* 8212B100h case  314:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B100h case  314:*/		return 0x8212B104;
		  /* 8212B104h */ case  315:  		/* li R4, 352 */
		/* 8212B104h case  315:*/		cpu::op::li<0>(regs,&regs.R4,0x160);
		/* 8212B104h case  315:*/		return 0x8212B108;
		  /* 8212B108h */ case  316:  		/* b 856 */
		/* 8212B108h case  316:*/		return 0x8212B460;
		/* 8212B108h case  316:*/		return 0x8212B10C;
		  /* 8212B10Ch */ case  317:  		/* li R5, 1 */
		/* 8212B10Ch case  317:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B10Ch case  317:*/		return 0x8212B110;
		  /* 8212B110h */ case  318:  		/* li R4, 353 */
		/* 8212B110h case  318:*/		cpu::op::li<0>(regs,&regs.R4,0x161);
		/* 8212B110h case  318:*/		return 0x8212B114;
		  /* 8212B114h */ case  319:  		/* b 844 */
		/* 8212B114h case  319:*/		return 0x8212B460;
		/* 8212B114h case  319:*/		return 0x8212B118;
		  /* 8212B118h */ case  320:  		/* li R5, 2 */
		/* 8212B118h case  320:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B118h case  320:*/		return 0x8212B11C;
		  /* 8212B11Ch */ case  321:  		/* li R4, 354 */
		/* 8212B11Ch case  321:*/		cpu::op::li<0>(regs,&regs.R4,0x162);
		/* 8212B11Ch case  321:*/		return 0x8212B120;
		  /* 8212B120h */ case  322:  		/* b 832 */
		/* 8212B120h case  322:*/		return 0x8212B460;
		/* 8212B120h case  322:*/		return 0x8212B124;
		  /* 8212B124h */ case  323:  		/* li R5, 1 */
		/* 8212B124h case  323:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B124h case  323:*/		return 0x8212B128;
		  /* 8212B128h */ case  324:  		/* li R4, 355 */
		/* 8212B128h case  324:*/		cpu::op::li<0>(regs,&regs.R4,0x163);
		/* 8212B128h case  324:*/		return 0x8212B12C;
		  /* 8212B12Ch */ case  325:  		/* b 820 */
		/* 8212B12Ch case  325:*/		return 0x8212B460;
		/* 8212B12Ch case  325:*/		return 0x8212B130;
		  /* 8212B130h */ case  326:  		/* li R5, 2 */
		/* 8212B130h case  326:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B130h case  326:*/		return 0x8212B134;
		  /* 8212B134h */ case  327:  		/* li R4, 356 */
		/* 8212B134h case  327:*/		cpu::op::li<0>(regs,&regs.R4,0x164);
		/* 8212B134h case  327:*/		return 0x8212B138;
		  /* 8212B138h */ case  328:  		/* b 808 */
		/* 8212B138h case  328:*/		return 0x8212B460;
		/* 8212B138h case  328:*/		return 0x8212B13C;
		  /* 8212B13Ch */ case  329:  		/* li R5, 2 */
		/* 8212B13Ch case  329:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B13Ch case  329:*/		return 0x8212B140;
		  /* 8212B140h */ case  330:  		/* li R4, 357 */
		/* 8212B140h case  330:*/		cpu::op::li<0>(regs,&regs.R4,0x165);
		/* 8212B140h case  330:*/		return 0x8212B144;
		  /* 8212B144h */ case  331:  		/* b 796 */
		/* 8212B144h case  331:*/		return 0x8212B460;
		/* 8212B144h case  331:*/		return 0x8212B148;
		  /* 8212B148h */ case  332:  		/* li R5, 2 */
		/* 8212B148h case  332:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B148h case  332:*/		return 0x8212B14C;
		  /* 8212B14Ch */ case  333:  		/* li R4, 358 */
		/* 8212B14Ch case  333:*/		cpu::op::li<0>(regs,&regs.R4,0x166);
		/* 8212B14Ch case  333:*/		return 0x8212B150;
		  /* 8212B150h */ case  334:  		/* b 784 */
		/* 8212B150h case  334:*/		return 0x8212B460;
		/* 8212B150h case  334:*/		return 0x8212B154;
		  /* 8212B154h */ case  335:  		/* li R5, 1 */
		/* 8212B154h case  335:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B154h case  335:*/		return 0x8212B158;
		  /* 8212B158h */ case  336:  		/* li R4, 359 */
		/* 8212B158h case  336:*/		cpu::op::li<0>(regs,&regs.R4,0x167);
		/* 8212B158h case  336:*/		return 0x8212B15C;
		  /* 8212B15Ch */ case  337:  		/* b 772 */
		/* 8212B15Ch case  337:*/		return 0x8212B460;
		/* 8212B15Ch case  337:*/		return 0x8212B160;
		  /* 8212B160h */ case  338:  		/* li R5, 2 */
		/* 8212B160h case  338:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B160h case  338:*/		return 0x8212B164;
		  /* 8212B164h */ case  339:  		/* li R4, 360 */
		/* 8212B164h case  339:*/		cpu::op::li<0>(regs,&regs.R4,0x168);
		/* 8212B164h case  339:*/		return 0x8212B168;
		  /* 8212B168h */ case  340:  		/* b 760 */
		/* 8212B168h case  340:*/		return 0x8212B460;
		/* 8212B168h case  340:*/		return 0x8212B16C;
		  /* 8212B16Ch */ case  341:  		/* li R5, 2 */
		/* 8212B16Ch case  341:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B16Ch case  341:*/		return 0x8212B170;
		  /* 8212B170h */ case  342:  		/* li R4, 361 */
		/* 8212B170h case  342:*/		cpu::op::li<0>(regs,&regs.R4,0x169);
		/* 8212B170h case  342:*/		return 0x8212B174;
		  /* 8212B174h */ case  343:  		/* b 748 */
		/* 8212B174h case  343:*/		return 0x8212B460;
		/* 8212B174h case  343:*/		return 0x8212B178;
		  /* 8212B178h */ case  344:  		/* li R5, 1 */
		/* 8212B178h case  344:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B178h case  344:*/		return 0x8212B17C;
		  /* 8212B17Ch */ case  345:  		/* li R4, 362 */
		/* 8212B17Ch case  345:*/		cpu::op::li<0>(regs,&regs.R4,0x16A);
		/* 8212B17Ch case  345:*/		return 0x8212B180;
		  /* 8212B180h */ case  346:  		/* b 736 */
		/* 8212B180h case  346:*/		return 0x8212B460;
		/* 8212B180h case  346:*/		return 0x8212B184;
		  /* 8212B184h */ case  347:  		/* li R5, 2 */
		/* 8212B184h case  347:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B184h case  347:*/		return 0x8212B188;
		  /* 8212B188h */ case  348:  		/* li R4, 363 */
		/* 8212B188h case  348:*/		cpu::op::li<0>(regs,&regs.R4,0x16B);
		/* 8212B188h case  348:*/		return 0x8212B18C;
		  /* 8212B18Ch */ case  349:  		/* b 724 */
		/* 8212B18Ch case  349:*/		return 0x8212B460;
		/* 8212B18Ch case  349:*/		return 0x8212B190;
		  /* 8212B190h */ case  350:  		/* li R5, 2 */
		/* 8212B190h case  350:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B190h case  350:*/		return 0x8212B194;
		  /* 8212B194h */ case  351:  		/* li R4, 364 */
		/* 8212B194h case  351:*/		cpu::op::li<0>(regs,&regs.R4,0x16C);
		/* 8212B194h case  351:*/		return 0x8212B198;
		  /* 8212B198h */ case  352:  		/* b 712 */
		/* 8212B198h case  352:*/		return 0x8212B460;
		/* 8212B198h case  352:*/		return 0x8212B19C;
		  /* 8212B19Ch */ case  353:  		/* li R5, 1 */
		/* 8212B19Ch case  353:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B19Ch case  353:*/		return 0x8212B1A0;
		  /* 8212B1A0h */ case  354:  		/* li R4, 365 */
		/* 8212B1A0h case  354:*/		cpu::op::li<0>(regs,&regs.R4,0x16D);
		/* 8212B1A0h case  354:*/		return 0x8212B1A4;
		  /* 8212B1A4h */ case  355:  		/* b 700 */
		/* 8212B1A4h case  355:*/		return 0x8212B460;
		/* 8212B1A4h case  355:*/		return 0x8212B1A8;
		  /* 8212B1A8h */ case  356:  		/* li R5, 2 */
		/* 8212B1A8h case  356:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1A8h case  356:*/		return 0x8212B1AC;
		  /* 8212B1ACh */ case  357:  		/* li R4, 366 */
		/* 8212B1ACh case  357:*/		cpu::op::li<0>(regs,&regs.R4,0x16E);
		/* 8212B1ACh case  357:*/		return 0x8212B1B0;
		  /* 8212B1B0h */ case  358:  		/* b 688 */
		/* 8212B1B0h case  358:*/		return 0x8212B460;
		/* 8212B1B0h case  358:*/		return 0x8212B1B4;
		  /* 8212B1B4h */ case  359:  		/* li R5, 2 */
		/* 8212B1B4h case  359:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1B4h case  359:*/		return 0x8212B1B8;
		  /* 8212B1B8h */ case  360:  		/* li R4, 367 */
		/* 8212B1B8h case  360:*/		cpu::op::li<0>(regs,&regs.R4,0x16F);
		/* 8212B1B8h case  360:*/		return 0x8212B1BC;
		  /* 8212B1BCh */ case  361:  		/* b 676 */
		/* 8212B1BCh case  361:*/		return 0x8212B460;
		/* 8212B1BCh case  361:*/		return 0x8212B1C0;
		  /* 8212B1C0h */ case  362:  		/* li R5, 2 */
		/* 8212B1C0h case  362:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1C0h case  362:*/		return 0x8212B1C4;
		  /* 8212B1C4h */ case  363:  		/* li R4, 368 */
		/* 8212B1C4h case  363:*/		cpu::op::li<0>(regs,&regs.R4,0x170);
		/* 8212B1C4h case  363:*/		return 0x8212B1C8;
		  /* 8212B1C8h */ case  364:  		/* b 664 */
		/* 8212B1C8h case  364:*/		return 0x8212B460;
		/* 8212B1C8h case  364:*/		return 0x8212B1CC;
		  /* 8212B1CCh */ case  365:  		/* li R5, 2 */
		/* 8212B1CCh case  365:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1CCh case  365:*/		return 0x8212B1D0;
		  /* 8212B1D0h */ case  366:  		/* li R4, 369 */
		/* 8212B1D0h case  366:*/		cpu::op::li<0>(regs,&regs.R4,0x171);
		/* 8212B1D0h case  366:*/		return 0x8212B1D4;
		  /* 8212B1D4h */ case  367:  		/* b 652 */
		/* 8212B1D4h case  367:*/		return 0x8212B460;
		/* 8212B1D4h case  367:*/		return 0x8212B1D8;
		  /* 8212B1D8h */ case  368:  		/* li R5, 1 */
		/* 8212B1D8h case  368:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B1D8h case  368:*/		return 0x8212B1DC;
		  /* 8212B1DCh */ case  369:  		/* li R4, 370 */
		/* 8212B1DCh case  369:*/		cpu::op::li<0>(regs,&regs.R4,0x172);
		/* 8212B1DCh case  369:*/		return 0x8212B1E0;
		  /* 8212B1E0h */ case  370:  		/* b 640 */
		/* 8212B1E0h case  370:*/		return 0x8212B460;
		/* 8212B1E0h case  370:*/		return 0x8212B1E4;
		  /* 8212B1E4h */ case  371:  		/* li R5, 2 */
		/* 8212B1E4h case  371:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1E4h case  371:*/		return 0x8212B1E8;
		  /* 8212B1E8h */ case  372:  		/* li R4, 371 */
		/* 8212B1E8h case  372:*/		cpu::op::li<0>(regs,&regs.R4,0x173);
		/* 8212B1E8h case  372:*/		return 0x8212B1EC;
		  /* 8212B1ECh */ case  373:  		/* b 628 */
		/* 8212B1ECh case  373:*/		return 0x8212B460;
		/* 8212B1ECh case  373:*/		return 0x8212B1F0;
		  /* 8212B1F0h */ case  374:  		/* li R5, 2 */
		/* 8212B1F0h case  374:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B1F0h case  374:*/		return 0x8212B1F4;
		  /* 8212B1F4h */ case  375:  		/* li R4, 372 */
		/* 8212B1F4h case  375:*/		cpu::op::li<0>(regs,&regs.R4,0x174);
		/* 8212B1F4h case  375:*/		return 0x8212B1F8;
		  /* 8212B1F8h */ case  376:  		/* b 616 */
		/* 8212B1F8h case  376:*/		return 0x8212B460;
		/* 8212B1F8h case  376:*/		return 0x8212B1FC;
		  /* 8212B1FCh */ case  377:  		/* li R5, 1 */
		/* 8212B1FCh case  377:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B1FCh case  377:*/		return 0x8212B200;
		  /* 8212B200h */ case  378:  		/* li R4, 373 */
		/* 8212B200h case  378:*/		cpu::op::li<0>(regs,&regs.R4,0x175);
		/* 8212B200h case  378:*/		return 0x8212B204;
		  /* 8212B204h */ case  379:  		/* b 604 */
		/* 8212B204h case  379:*/		return 0x8212B460;
		/* 8212B204h case  379:*/		return 0x8212B208;
		  /* 8212B208h */ case  380:  		/* li R5, 2 */
		/* 8212B208h case  380:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B208h case  380:*/		return 0x8212B20C;
		  /* 8212B20Ch */ case  381:  		/* li R4, 374 */
		/* 8212B20Ch case  381:*/		cpu::op::li<0>(regs,&regs.R4,0x176);
		/* 8212B20Ch case  381:*/		return 0x8212B210;
		  /* 8212B210h */ case  382:  		/* b 592 */
		/* 8212B210h case  382:*/		return 0x8212B460;
		/* 8212B210h case  382:*/		return 0x8212B214;
		  /* 8212B214h */ case  383:  		/* li R5, 1 */
		/* 8212B214h case  383:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B214h case  383:*/		return 0x8212B218;
		  /* 8212B218h */ case  384:  		/* li R4, 375 */
		/* 8212B218h case  384:*/		cpu::op::li<0>(regs,&regs.R4,0x177);
		/* 8212B218h case  384:*/		return 0x8212B21C;
		  /* 8212B21Ch */ case  385:  		/* b 580 */
		/* 8212B21Ch case  385:*/		return 0x8212B460;
		/* 8212B21Ch case  385:*/		return 0x8212B220;
		  /* 8212B220h */ case  386:  		/* li R5, 2 */
		/* 8212B220h case  386:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B220h case  386:*/		return 0x8212B224;
		  /* 8212B224h */ case  387:  		/* li R4, 376 */
		/* 8212B224h case  387:*/		cpu::op::li<0>(regs,&regs.R4,0x178);
		/* 8212B224h case  387:*/		return 0x8212B228;
		  /* 8212B228h */ case  388:  		/* b 568 */
		/* 8212B228h case  388:*/		return 0x8212B460;
		/* 8212B228h case  388:*/		return 0x8212B22C;
		  /* 8212B22Ch */ case  389:  		/* li R5, 1 */
		/* 8212B22Ch case  389:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B22Ch case  389:*/		return 0x8212B230;
		  /* 8212B230h */ case  390:  		/* li R4, 377 */
		/* 8212B230h case  390:*/		cpu::op::li<0>(regs,&regs.R4,0x179);
		/* 8212B230h case  390:*/		return 0x8212B234;
		  /* 8212B234h */ case  391:  		/* b 556 */
		/* 8212B234h case  391:*/		return 0x8212B460;
		/* 8212B234h case  391:*/		return 0x8212B238;
		  /* 8212B238h */ case  392:  		/* li R5, 2 */
		/* 8212B238h case  392:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B238h case  392:*/		return 0x8212B23C;
		  /* 8212B23Ch */ case  393:  		/* li R4, 378 */
		/* 8212B23Ch case  393:*/		cpu::op::li<0>(regs,&regs.R4,0x17A);
		/* 8212B23Ch case  393:*/		return 0x8212B240;
		  /* 8212B240h */ case  394:  		/* b 544 */
		/* 8212B240h case  394:*/		return 0x8212B460;
		/* 8212B240h case  394:*/		return 0x8212B244;
		  /* 8212B244h */ case  395:  		/* li R5, 1 */
		/* 8212B244h case  395:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B244h case  395:*/		return 0x8212B248;
		  /* 8212B248h */ case  396:  		/* li R4, 379 */
		/* 8212B248h case  396:*/		cpu::op::li<0>(regs,&regs.R4,0x17B);
		/* 8212B248h case  396:*/		return 0x8212B24C;
		  /* 8212B24Ch */ case  397:  		/* b 532 */
		/* 8212B24Ch case  397:*/		return 0x8212B460;
		/* 8212B24Ch case  397:*/		return 0x8212B250;
		  /* 8212B250h */ case  398:  		/* li R5, 2 */
		/* 8212B250h case  398:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B250h case  398:*/		return 0x8212B254;
		  /* 8212B254h */ case  399:  		/* li R4, 380 */
		/* 8212B254h case  399:*/		cpu::op::li<0>(regs,&regs.R4,0x17C);
		/* 8212B254h case  399:*/		return 0x8212B258;
		  /* 8212B258h */ case  400:  		/* b 520 */
		/* 8212B258h case  400:*/		return 0x8212B460;
		/* 8212B258h case  400:*/		return 0x8212B25C;
		  /* 8212B25Ch */ case  401:  		/* li R5, 1 */
		/* 8212B25Ch case  401:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B25Ch case  401:*/		return 0x8212B260;
		  /* 8212B260h */ case  402:  		/* li R4, 381 */
		/* 8212B260h case  402:*/		cpu::op::li<0>(regs,&regs.R4,0x17D);
		/* 8212B260h case  402:*/		return 0x8212B264;
		  /* 8212B264h */ case  403:  		/* b 508 */
		/* 8212B264h case  403:*/		return 0x8212B460;
		/* 8212B264h case  403:*/		return 0x8212B268;
		  /* 8212B268h */ case  404:  		/* li R5, 2 */
		/* 8212B268h case  404:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B268h case  404:*/		return 0x8212B26C;
		  /* 8212B26Ch */ case  405:  		/* li R4, 382 */
		/* 8212B26Ch case  405:*/		cpu::op::li<0>(regs,&regs.R4,0x17E);
		/* 8212B26Ch case  405:*/		return 0x8212B270;
		  /* 8212B270h */ case  406:  		/* b 496 */
		/* 8212B270h case  406:*/		return 0x8212B460;
		/* 8212B270h case  406:*/		return 0x8212B274;
		  /* 8212B274h */ case  407:  		/* li R5, 1 */
		/* 8212B274h case  407:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B274h case  407:*/		return 0x8212B278;
		  /* 8212B278h */ case  408:  		/* li R4, 395 */
		/* 8212B278h case  408:*/		cpu::op::li<0>(regs,&regs.R4,0x18B);
		/* 8212B278h case  408:*/		return 0x8212B27C;
		  /* 8212B27Ch */ case  409:  		/* b 484 */
		/* 8212B27Ch case  409:*/		return 0x8212B460;
		/* 8212B27Ch case  409:*/		return 0x8212B280;
		  /* 8212B280h */ case  410:  		/* li R5, 3 */
		/* 8212B280h case  410:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8212B280h case  410:*/		return 0x8212B284;
		  /* 8212B284h */ case  411:  		/* li R4, 396 */
		/* 8212B284h case  411:*/		cpu::op::li<0>(regs,&regs.R4,0x18C);
		/* 8212B284h case  411:*/		return 0x8212B288;
		  /* 8212B288h */ case  412:  		/* b 472 */
		/* 8212B288h case  412:*/		return 0x8212B460;
		/* 8212B288h case  412:*/		return 0x8212B28C;
		  /* 8212B28Ch */ case  413:  		/* li R5, 1 */
		/* 8212B28Ch case  413:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B28Ch case  413:*/		return 0x8212B290;
		  /* 8212B290h */ case  414:  		/* li R4, 383 */
		/* 8212B290h case  414:*/		cpu::op::li<0>(regs,&regs.R4,0x17F);
		/* 8212B290h case  414:*/		return 0x8212B294;
		  /* 8212B294h */ case  415:  		/* b 460 */
		/* 8212B294h case  415:*/		return 0x8212B460;
		/* 8212B294h case  415:*/		return 0x8212B298;
		  /* 8212B298h */ case  416:  		/* li R5, 2 */
		/* 8212B298h case  416:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B298h case  416:*/		return 0x8212B29C;
		  /* 8212B29Ch */ case  417:  		/* li R4, 384 */
		/* 8212B29Ch case  417:*/		cpu::op::li<0>(regs,&regs.R4,0x180);
		/* 8212B29Ch case  417:*/		return 0x8212B2A0;
		  /* 8212B2A0h */ case  418:  		/* b 448 */
		/* 8212B2A0h case  418:*/		return 0x8212B460;
		/* 8212B2A0h case  418:*/		return 0x8212B2A4;
		  /* 8212B2A4h */ case  419:  		/* li R5, 2 */
		/* 8212B2A4h case  419:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2A4h case  419:*/		return 0x8212B2A8;
		  /* 8212B2A8h */ case  420:  		/* li R4, 385 */
		/* 8212B2A8h case  420:*/		cpu::op::li<0>(regs,&regs.R4,0x181);
		/* 8212B2A8h case  420:*/		return 0x8212B2AC;
		  /* 8212B2ACh */ case  421:  		/* b 436 */
		/* 8212B2ACh case  421:*/		return 0x8212B460;
		/* 8212B2ACh case  421:*/		return 0x8212B2B0;
		  /* 8212B2B0h */ case  422:  		/* li R5, 2 */
		/* 8212B2B0h case  422:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2B0h case  422:*/		return 0x8212B2B4;
		  /* 8212B2B4h */ case  423:  		/* li R4, 386 */
		/* 8212B2B4h case  423:*/		cpu::op::li<0>(regs,&regs.R4,0x182);
		/* 8212B2B4h case  423:*/		return 0x8212B2B8;
		  /* 8212B2B8h */ case  424:  		/* b 424 */
		/* 8212B2B8h case  424:*/		return 0x8212B460;
		/* 8212B2B8h case  424:*/		return 0x8212B2BC;
		  /* 8212B2BCh */ case  425:  		/* li R5, 2 */
		/* 8212B2BCh case  425:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2BCh case  425:*/		return 0x8212B2C0;
		  /* 8212B2C0h */ case  426:  		/* li R4, 387 */
		/* 8212B2C0h case  426:*/		cpu::op::li<0>(regs,&regs.R4,0x183);
		/* 8212B2C0h case  426:*/		return 0x8212B2C4;
		  /* 8212B2C4h */ case  427:  		/* b 412 */
		/* 8212B2C4h case  427:*/		return 0x8212B460;
		/* 8212B2C4h case  427:*/		return 0x8212B2C8;
		  /* 8212B2C8h */ case  428:  		/* li R5, 2 */
		/* 8212B2C8h case  428:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2C8h case  428:*/		return 0x8212B2CC;
		  /* 8212B2CCh */ case  429:  		/* li R4, 388 */
		/* 8212B2CCh case  429:*/		cpu::op::li<0>(regs,&regs.R4,0x184);
		/* 8212B2CCh case  429:*/		return 0x8212B2D0;
		  /* 8212B2D0h */ case  430:  		/* b 400 */
		/* 8212B2D0h case  430:*/		return 0x8212B460;
		/* 8212B2D0h case  430:*/		return 0x8212B2D4;
		  /* 8212B2D4h */ case  431:  		/* li R5, 2 */
		/* 8212B2D4h case  431:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2D4h case  431:*/		return 0x8212B2D8;
		  /* 8212B2D8h */ case  432:  		/* li R4, 389 */
		/* 8212B2D8h case  432:*/		cpu::op::li<0>(regs,&regs.R4,0x185);
		/* 8212B2D8h case  432:*/		return 0x8212B2DC;
		  /* 8212B2DCh */ case  433:  		/* b 388 */
		/* 8212B2DCh case  433:*/		return 0x8212B460;
		/* 8212B2DCh case  433:*/		return 0x8212B2E0;
		  /* 8212B2E0h */ case  434:  		/* li R5, 2 */
		/* 8212B2E0h case  434:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2E0h case  434:*/		return 0x8212B2E4;
		  /* 8212B2E4h */ case  435:  		/* li R4, 390 */
		/* 8212B2E4h case  435:*/		cpu::op::li<0>(regs,&regs.R4,0x186);
		/* 8212B2E4h case  435:*/		return 0x8212B2E8;
		  /* 8212B2E8h */ case  436:  		/* b 376 */
		/* 8212B2E8h case  436:*/		return 0x8212B460;
		/* 8212B2E8h case  436:*/		return 0x8212B2EC;
		  /* 8212B2ECh */ case  437:  		/* li R5, 2 */
		/* 8212B2ECh case  437:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2ECh case  437:*/		return 0x8212B2F0;
		  /* 8212B2F0h */ case  438:  		/* li R4, 391 */
		/* 8212B2F0h case  438:*/		cpu::op::li<0>(regs,&regs.R4,0x187);
		/* 8212B2F0h case  438:*/		return 0x8212B2F4;
		  /* 8212B2F4h */ case  439:  		/* b 364 */
		/* 8212B2F4h case  439:*/		return 0x8212B460;
		/* 8212B2F4h case  439:*/		return 0x8212B2F8;
		  /* 8212B2F8h */ case  440:  		/* li R5, 2 */
		/* 8212B2F8h case  440:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B2F8h case  440:*/		return 0x8212B2FC;
		  /* 8212B2FCh */ case  441:  		/* li R4, 392 */
		/* 8212B2FCh case  441:*/		cpu::op::li<0>(regs,&regs.R4,0x188);
		/* 8212B2FCh case  441:*/		return 0x8212B300;
		  /* 8212B300h */ case  442:  		/* b 352 */
		/* 8212B300h case  442:*/		return 0x8212B460;
		/* 8212B300h case  442:*/		return 0x8212B304;
		  /* 8212B304h */ case  443:  		/* li R5, 2 */
		/* 8212B304h case  443:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B304h case  443:*/		return 0x8212B308;
		  /* 8212B308h */ case  444:  		/* li R4, 393 */
		/* 8212B308h case  444:*/		cpu::op::li<0>(regs,&regs.R4,0x189);
		/* 8212B308h case  444:*/		return 0x8212B30C;
		  /* 8212B30Ch */ case  445:  		/* b 340 */
		/* 8212B30Ch case  445:*/		return 0x8212B460;
		/* 8212B30Ch case  445:*/		return 0x8212B310;
		  /* 8212B310h */ case  446:  		/* li R5, 2 */
		/* 8212B310h case  446:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B310h case  446:*/		return 0x8212B314;
		  /* 8212B314h */ case  447:  		/* li R4, 394 */
		/* 8212B314h case  447:*/		cpu::op::li<0>(regs,&regs.R4,0x18A);
		/* 8212B314h case  447:*/		return 0x8212B318;
		  /* 8212B318h */ case  448:  		/* b 328 */
		/* 8212B318h case  448:*/		return 0x8212B460;
		/* 8212B318h case  448:*/		return 0x8212B31C;
		  /* 8212B31Ch */ case  449:  		/* li R5, 1 */
		/* 8212B31Ch case  449:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B31Ch case  449:*/		return 0x8212B320;
		  /* 8212B320h */ case  450:  		/* li R4, 397 */
		/* 8212B320h case  450:*/		cpu::op::li<0>(regs,&regs.R4,0x18D);
		/* 8212B320h case  450:*/		return 0x8212B324;
		  /* 8212B324h */ case  451:  		/* b 316 */
		/* 8212B324h case  451:*/		return 0x8212B460;
		/* 8212B324h case  451:*/		return 0x8212B328;
		  /* 8212B328h */ case  452:  		/* li R5, 2 */
		/* 8212B328h case  452:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B328h case  452:*/		return 0x8212B32C;
		  /* 8212B32Ch */ case  453:  		/* li R4, 398 */
		/* 8212B32Ch case  453:*/		cpu::op::li<0>(regs,&regs.R4,0x18E);
		/* 8212B32Ch case  453:*/		return 0x8212B330;
		  /* 8212B330h */ case  454:  		/* b 304 */
		/* 8212B330h case  454:*/		return 0x8212B460;
		/* 8212B330h case  454:*/		return 0x8212B334;
		  /* 8212B334h */ case  455:  		/* li R4, 399 */
		/* 8212B334h case  455:*/		cpu::op::li<0>(regs,&regs.R4,0x18F);
		/* 8212B334h case  455:*/		return 0x8212B338;
		  /* 8212B338h */ case  456:  		/* b 292 */
		/* 8212B338h case  456:*/		return 0x8212B45C;
		/* 8212B338h case  456:*/		return 0x8212B33C;
		  /* 8212B33Ch */ case  457:  		/* li R5, 1 */
		/* 8212B33Ch case  457:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B33Ch case  457:*/		return 0x8212B340;
		  /* 8212B340h */ case  458:  		/* li R4, 400 */
		/* 8212B340h case  458:*/		cpu::op::li<0>(regs,&regs.R4,0x190);
		/* 8212B340h case  458:*/		return 0x8212B344;
		  /* 8212B344h */ case  459:  		/* b 284 */
		/* 8212B344h case  459:*/		return 0x8212B460;
		/* 8212B344h case  459:*/		return 0x8212B348;
		  /* 8212B348h */ case  460:  		/* li R5, 1 */
		/* 8212B348h case  460:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B348h case  460:*/		return 0x8212B34C;
		  /* 8212B34Ch */ case  461:  		/* li R4, 401 */
		/* 8212B34Ch case  461:*/		cpu::op::li<0>(regs,&regs.R4,0x191);
		/* 8212B34Ch case  461:*/		return 0x8212B350;
		  /* 8212B350h */ case  462:  		/* b 272 */
		/* 8212B350h case  462:*/		return 0x8212B460;
		/* 8212B350h case  462:*/		return 0x8212B354;
		  /* 8212B354h */ case  463:  		/* li R5, 1 */
		/* 8212B354h case  463:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B354h case  463:*/		return 0x8212B358;
		  /* 8212B358h */ case  464:  		/* li R4, 402 */
		/* 8212B358h case  464:*/		cpu::op::li<0>(regs,&regs.R4,0x192);
		/* 8212B358h case  464:*/		return 0x8212B35C;
		  /* 8212B35Ch */ case  465:  		/* b 260 */
		/* 8212B35Ch case  465:*/		return 0x8212B460;
		/* 8212B35Ch case  465:*/		return 0x8212B360;
		  /* 8212B360h */ case  466:  		/* li R5, 1 */
		/* 8212B360h case  466:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B360h case  466:*/		return 0x8212B364;
		  /* 8212B364h */ case  467:  		/* li R4, 403 */
		/* 8212B364h case  467:*/		cpu::op::li<0>(regs,&regs.R4,0x193);
		/* 8212B364h case  467:*/		return 0x8212B368;
		  /* 8212B368h */ case  468:  		/* b 248 */
		/* 8212B368h case  468:*/		return 0x8212B460;
		/* 8212B368h case  468:*/		return 0x8212B36C;
		  /* 8212B36Ch */ case  469:  		/* li R5, 1 */
		/* 8212B36Ch case  469:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B36Ch case  469:*/		return 0x8212B370;
		  /* 8212B370h */ case  470:  		/* li R4, 404 */
		/* 8212B370h case  470:*/		cpu::op::li<0>(regs,&regs.R4,0x194);
		/* 8212B370h case  470:*/		return 0x8212B374;
		  /* 8212B374h */ case  471:  		/* b 236 */
		/* 8212B374h case  471:*/		return 0x8212B460;
		/* 8212B374h case  471:*/		return 0x8212B378;
		  /* 8212B378h */ case  472:  		/* li R5, 2 */
		/* 8212B378h case  472:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B378h case  472:*/		return 0x8212B37C;
		  /* 8212B37Ch */ case  473:  		/* li R4, 405 */
		/* 8212B37Ch case  473:*/		cpu::op::li<0>(regs,&regs.R4,0x195);
		/* 8212B37Ch case  473:*/		return 0x8212B380;
		  /* 8212B380h */ case  474:  		/* b 224 */
		/* 8212B380h case  474:*/		return 0x8212B460;
		/* 8212B380h case  474:*/		return 0x8212B384;
		  /* 8212B384h */ case  475:  		/* li R5, 1 */
		/* 8212B384h case  475:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B384h case  475:*/		return 0x8212B388;
		  /* 8212B388h */ case  476:  		/* li R4, 406 */
		/* 8212B388h case  476:*/		cpu::op::li<0>(regs,&regs.R4,0x196);
		/* 8212B388h case  476:*/		return 0x8212B38C;
		  /* 8212B38Ch */ case  477:  		/* b 212 */
		/* 8212B38Ch case  477:*/		return 0x8212B460;
		/* 8212B38Ch case  477:*/		return 0x8212B390;
		  /* 8212B390h */ case  478:  		/* li R5, 1 */
		/* 8212B390h case  478:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B390h case  478:*/		return 0x8212B394;
		  /* 8212B394h */ case  479:  		/* li R4, 407 */
		/* 8212B394h case  479:*/		cpu::op::li<0>(regs,&regs.R4,0x197);
		/* 8212B394h case  479:*/		return 0x8212B398;
		  /* 8212B398h */ case  480:  		/* b 200 */
		/* 8212B398h case  480:*/		return 0x8212B460;
		/* 8212B398h case  480:*/		return 0x8212B39C;
		  /* 8212B39Ch */ case  481:  		/* li R5, 2 */
		/* 8212B39Ch case  481:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B39Ch case  481:*/		return 0x8212B3A0;
		  /* 8212B3A0h */ case  482:  		/* li R4, 408 */
		/* 8212B3A0h case  482:*/		cpu::op::li<0>(regs,&regs.R4,0x198);
		/* 8212B3A0h case  482:*/		return 0x8212B3A4;
		  /* 8212B3A4h */ case  483:  		/* b 188 */
		/* 8212B3A4h case  483:*/		return 0x8212B460;
		/* 8212B3A4h case  483:*/		return 0x8212B3A8;
		  /* 8212B3A8h */ case  484:  		/* li R5, 1 */
		/* 8212B3A8h case  484:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B3A8h case  484:*/		return 0x8212B3AC;
		  /* 8212B3ACh */ case  485:  		/* li R4, 420 */
		/* 8212B3ACh case  485:*/		cpu::op::li<0>(regs,&regs.R4,0x1A4);
		/* 8212B3ACh case  485:*/		return 0x8212B3B0;
		  /* 8212B3B0h */ case  486:  		/* b 176 */
		/* 8212B3B0h case  486:*/		return 0x8212B460;
		/* 8212B3B0h case  486:*/		return 0x8212B3B4;
		  /* 8212B3B4h */ case  487:  		/* li R5, 1 */
		/* 8212B3B4h case  487:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B3B4h case  487:*/		return 0x8212B3B8;
		  /* 8212B3B8h */ case  488:  		/* li R4, 421 */
		/* 8212B3B8h case  488:*/		cpu::op::li<0>(regs,&regs.R4,0x1A5);
		/* 8212B3B8h case  488:*/		return 0x8212B3BC;
		  /* 8212B3BCh */ case  489:  		/* b 164 */
		/* 8212B3BCh case  489:*/		return 0x8212B460;
		/* 8212B3BCh case  489:*/		return 0x8212B3C0;
		  /* 8212B3C0h */ case  490:  		/* li R4, 422 */
		/* 8212B3C0h case  490:*/		cpu::op::li<0>(regs,&regs.R4,0x1A6);
		/* 8212B3C0h case  490:*/		return 0x8212B3C4;
		  /* 8212B3C4h */ case  491:  		/* b 152 */
		/* 8212B3C4h case  491:*/		return 0x8212B45C;
		/* 8212B3C4h case  491:*/		return 0x8212B3C8;
		  /* 8212B3C8h */ case  492:  		/* li R5, 1 */
		/* 8212B3C8h case  492:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B3C8h case  492:*/		return 0x8212B3CC;
		  /* 8212B3CCh */ case  493:  		/* li R4, 423 */
		/* 8212B3CCh case  493:*/		cpu::op::li<0>(regs,&regs.R4,0x1A7);
		/* 8212B3CCh case  493:*/		return 0x8212B3D0;
		  /* 8212B3D0h */ case  494:  		/* b 144 */
		/* 8212B3D0h case  494:*/		return 0x8212B460;
		/* 8212B3D0h case  494:*/		return 0x8212B3D4;
		  /* 8212B3D4h */ case  495:  		/* li R5, 1 */
		/* 8212B3D4h case  495:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B3D4h case  495:*/		return 0x8212B3D8;
		  /* 8212B3D8h */ case  496:  		/* li R4, 424 */
		/* 8212B3D8h case  496:*/		cpu::op::li<0>(regs,&regs.R4,0x1A8);
		/* 8212B3D8h case  496:*/		return 0x8212B3DC;
		  /* 8212B3DCh */ case  497:  		/* b 132 */
		/* 8212B3DCh case  497:*/		return 0x8212B460;
		/* 8212B3DCh case  497:*/		return 0x8212B3E0;
		  /* 8212B3E0h */ case  498:  		/* li R4, 425 */
		/* 8212B3E0h case  498:*/		cpu::op::li<0>(regs,&regs.R4,0x1A9);
		/* 8212B3E0h case  498:*/		return 0x8212B3E4;
		  /* 8212B3E4h */ case  499:  		/* b 120 */
		/* 8212B3E4h case  499:*/		return 0x8212B45C;
		/* 8212B3E4h case  499:*/		return 0x8212B3E8;
		  /* 8212B3E8h */ case  500:  		/* li R4, 426 */
		/* 8212B3E8h case  500:*/		cpu::op::li<0>(regs,&regs.R4,0x1AA);
		/* 8212B3E8h case  500:*/		return 0x8212B3EC;
		  /* 8212B3ECh */ case  501:  		/* b 112 */
		/* 8212B3ECh case  501:*/		return 0x8212B45C;
		/* 8212B3ECh case  501:*/		return 0x8212B3F0;
		  /* 8212B3F0h */ case  502:  		/* li R4, 427 */
		/* 8212B3F0h case  502:*/		cpu::op::li<0>(regs,&regs.R4,0x1AB);
		/* 8212B3F0h case  502:*/		return 0x8212B3F4;
		  /* 8212B3F4h */ case  503:  		/* b 104 */
		/* 8212B3F4h case  503:*/		return 0x8212B45C;
		/* 8212B3F4h case  503:*/		return 0x8212B3F8;
		  /* 8212B3F8h */ case  504:  		/* li R4, 428 */
		/* 8212B3F8h case  504:*/		cpu::op::li<0>(regs,&regs.R4,0x1AC);
		/* 8212B3F8h case  504:*/		return 0x8212B3FC;
		  /* 8212B3FCh */ case  505:  		/* b 96 */
		/* 8212B3FCh case  505:*/		return 0x8212B45C;
		/* 8212B3FCh case  505:*/		return 0x8212B400;
		  /* 8212B400h */ case  506:  		/* li R4, 429 */
		/* 8212B400h case  506:*/		cpu::op::li<0>(regs,&regs.R4,0x1AD);
		/* 8212B400h case  506:*/		return 0x8212B404;
		  /* 8212B404h */ case  507:  		/* b 88 */
		/* 8212B404h case  507:*/		return 0x8212B45C;
		/* 8212B404h case  507:*/		return 0x8212B408;
		  /* 8212B408h */ case  508:  		/* li R4, 430 */
		/* 8212B408h case  508:*/		cpu::op::li<0>(regs,&regs.R4,0x1AE);
		/* 8212B408h case  508:*/		return 0x8212B40C;
		  /* 8212B40Ch */ case  509:  		/* b 80 */
		/* 8212B40Ch case  509:*/		return 0x8212B45C;
		/* 8212B40Ch case  509:*/		return 0x8212B410;
		  /* 8212B410h */ case  510:  		/* li R4, 431 */
		/* 8212B410h case  510:*/		cpu::op::li<0>(regs,&regs.R4,0x1AF);
		/* 8212B410h case  510:*/		return 0x8212B414;
		  /* 8212B414h */ case  511:  		/* b 72 */
		/* 8212B414h case  511:*/		return 0x8212B45C;
		/* 8212B414h case  511:*/		return 0x8212B418;
		  /* 8212B418h */ case  512:  		/* li R5, 1 */
		/* 8212B418h case  512:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8212B418h case  512:*/		return 0x8212B41C;
		  /* 8212B41Ch */ case  513:  		/* li R4, 432 */
		/* 8212B41Ch case  513:*/		cpu::op::li<0>(regs,&regs.R4,0x1B0);
		/* 8212B41Ch case  513:*/		return 0x8212B420;
		  /* 8212B420h */ case  514:  		/* b 64 */
		/* 8212B420h case  514:*/		return 0x8212B460;
		/* 8212B420h case  514:*/		return 0x8212B424;
		  /* 8212B424h */ case  515:  		/* li R5, 2 */
		/* 8212B424h case  515:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8212B424h case  515:*/		return 0x8212B428;
		  /* 8212B428h */ case  516:  		/* li R4, 433 */
		/* 8212B428h case  516:*/		cpu::op::li<0>(regs,&regs.R4,0x1B1);
		/* 8212B428h case  516:*/		return 0x8212B42C;
		  /* 8212B42Ch */ case  517:  		/* b 52 */
		/* 8212B42Ch case  517:*/		return 0x8212B460;
		/* 8212B42Ch case  517:*/		return 0x8212B430;
		  /* 8212B430h */ case  518:  		/* li R4, 434 */
		/* 8212B430h case  518:*/		cpu::op::li<0>(regs,&regs.R4,0x1B2);
		/* 8212B430h case  518:*/		return 0x8212B434;
		  /* 8212B434h */ case  519:  		/* b 40 */
		/* 8212B434h case  519:*/		return 0x8212B45C;
		/* 8212B434h case  519:*/		return 0x8212B438;
		  /* 8212B438h */ case  520:  		/* li R4, 435 */
		/* 8212B438h case  520:*/		cpu::op::li<0>(regs,&regs.R4,0x1B3);
		/* 8212B438h case  520:*/		return 0x8212B43C;
		  /* 8212B43Ch */ case  521:  		/* b 32 */
		/* 8212B43Ch case  521:*/		return 0x8212B45C;
		/* 8212B43Ch case  521:*/		return 0x8212B440;
		  /* 8212B440h */ case  522:  		/* li R4, 436 */
		/* 8212B440h case  522:*/		cpu::op::li<0>(regs,&regs.R4,0x1B4);
		/* 8212B440h case  522:*/		return 0x8212B444;
		  /* 8212B444h */ case  523:  		/* b 24 */
		/* 8212B444h case  523:*/		return 0x8212B45C;
		/* 8212B444h case  523:*/		return 0x8212B448;
		  /* 8212B448h */ case  524:  		/* li R4, 437 */
		/* 8212B448h case  524:*/		cpu::op::li<0>(regs,&regs.R4,0x1B5);
		/* 8212B448h case  524:*/		return 0x8212B44C;
		  /* 8212B44Ch */ case  525:  		/* b 16 */
		/* 8212B44Ch case  525:*/		return 0x8212B45C;
		/* 8212B44Ch case  525:*/		return 0x8212B450;
		  /* 8212B450h */ case  526:  		/* li R4, 438 */
		/* 8212B450h case  526:*/		cpu::op::li<0>(regs,&regs.R4,0x1B6);
		/* 8212B450h case  526:*/		return 0x8212B454;
		  /* 8212B454h */ case  527:  		/* b 8 */
		/* 8212B454h case  527:*/		return 0x8212B45C;
		/* 8212B454h case  527:*/		return 0x8212B458;
		  /* 8212B458h */ case  528:  		/* li R4, 439 */
		/* 8212B458h case  528:*/		cpu::op::li<0>(regs,&regs.R4,0x1B7);
		/* 8212B458h case  528:*/		return 0x8212B45C;
	}
	return 0x8212B45C;
} // Block from 8212AC18h-8212B45Ch (529 instructions)

