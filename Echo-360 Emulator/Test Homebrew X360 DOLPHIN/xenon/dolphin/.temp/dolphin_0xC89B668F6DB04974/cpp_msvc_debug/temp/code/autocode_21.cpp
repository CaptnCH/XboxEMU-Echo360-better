#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82135F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135F58);
		  /* 82135F58h */ case    0:  		/* cmplw CR6, R6, R5 */
		/* 82135F58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 82135F58h case    0:*/		return 0x82135F5C;
		  /* 82135F5Ch */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82135F5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82135F70;  }
		/* 82135F5Ch case    1:*/		return 0x82135F60;
	}
	return 0x82135F60;
} // Block from 82135F58h-82135F60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82135F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135F60);
		  /* 82135F60h */ case    0:  		/* addi R30, R30, 1 */
		/* 82135F60h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82135F60h case    0:*/		return 0x82135F64;
		  /* 82135F64h */ case    1:  		/* addi R29, R29, 4 */
		/* 82135F64h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82135F64h case    1:*/		return 0x82135F68;
		  /* 82135F68h */ case    2:  		/* cmplw CR6, R30, R28 */
		/* 82135F68h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82135F68h case    2:*/		return 0x82135F6C;
		  /* 82135F6Ch */ case    3:  		/* bc 12, CR6_LT, -140 */
		/* 82135F6Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82135EE0;  }
		/* 82135F6Ch case    3:*/		return 0x82135F70;
	}
	return 0x82135F70;
} // Block from 82135F60h-82135F70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135F70);
		  /* 82135F70h */ case    0:  		/* cmplw CR6, R30, R28 */
		/* 82135F70h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82135F70h case    0:*/		return 0x82135F74;
		  /* 82135F74h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82135F74h case    1:*/		if ( regs.CR[6].eq ) { return 0x82135F7C;  }
		/* 82135F74h case    1:*/		return 0x82135F78;
		  /* 82135F78h */ case    2:  		/* addi R23, R23, 1 */
		/* 82135F78h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82135F78h case    2:*/		return 0x82135F7C;
	}
	return 0x82135F7C;
} // Block from 82135F70h-82135F7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135F7C);
		  /* 82135F7Ch */ case    0:  		/* addic. R26, R26, -1 */
		/* 82135F7Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 82135F7Ch case    0:*/		return 0x82135F80;
		  /* 82135F80h */ case    1:  		/* addi R31, R31, 4 */
		/* 82135F80h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82135F80h case    1:*/		return 0x82135F84;
		  /* 82135F84h */ case    2:  		/* bc 4, CR0_EQ, -180 */
		/* 82135F84h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82135ED0;  }
		/* 82135F84h case    2:*/		return 0x82135F88;
	}
	return 0x82135F88;
} // Block from 82135F7Ch-82135F88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135F88);
		  /* 82135F88h */ case    0:  		/* addic. R24, R24, -1 */
		/* 82135F88h case    0:*/		cpu::op::addic<1>(regs,&regs.R24,regs.R24,0xFFFFFFFF);
		/* 82135F88h case    0:*/		return 0x82135F8C;
		  /* 82135F8Ch */ case    1:  		/* addi R25, R25, 4 */
		/* 82135F8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82135F8Ch case    1:*/		return 0x82135F90;
		  /* 82135F90h */ case    2:  		/* bc 4, CR0_EQ, -228 */
		/* 82135F90h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82135EAC;  }
		/* 82135F90h case    2:*/		return 0x82135F94;
		  /* 82135F94h */ case    3:  		/* cmplw CR6, R23, R22 */
		/* 82135F94h case    3:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 82135F94h case    3:*/		return 0x82135F98;
		  /* 82135F98h */ case    4:  		/* li R3, 1 */
		/* 82135F98h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82135F98h case    4:*/		return 0x82135F9C;
		  /* 82135F9Ch */ case    5:  		/* bc 12, CR6_GT, 8 */
		/* 82135F9Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x82135FA4;  }
		/* 82135F9Ch case    5:*/		return 0x82135FA0;
	}
	return 0x82135FA0;
} // Block from 82135F88h-82135FA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82135FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135FA0);
		  /* 82135FA0h */ case    0:  		/* li R3, 0 */
		/* 82135FA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82135FA0h case    0:*/		return 0x82135FA4;
	}
	return 0x82135FA4;
} // Block from 82135FA0h-82135FA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82135FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135FA4);
		  /* 82135FA4h */ case    0:  		/* addi R1, R1, 176 */
		/* 82135FA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82135FA4h case    0:*/		return 0x82135FA8;
		  /* 82135FA8h */ case    1:  		/* b -675096 */
		/* 82135FA8h case    1:*/		return 0x82091290;
		/* 82135FA8h case    1:*/		return 0x82135FAC;
		  /* 82135FACh */ case    2:  		/* nop */
		/* 82135FACh case    2:*/		cpu::op::nop();
		/* 82135FACh case    2:*/		return 0x82135FB0;
	}
	return 0x82135FB0;
} // Block from 82135FA4h-82135FB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82135FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135FB0);
		  /* 82135FB0h */ case    0:  		/* mfspr R12, LR */
		/* 82135FB0h case    0:*/		regs.R12 = regs.LR;
		/* 82135FB0h case    0:*/		return 0x82135FB4;
		  /* 82135FB4h */ case    1:  		/* bl -675164 */
		/* 82135FB4h case    1:*/		regs.LR = 0x82135FB8; return 0x82091258;
		/* 82135FB4h case    1:*/		return 0x82135FB8;
		  /* 82135FB8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82135FB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82135FB8h case    2:*/		return 0x82135FBC;
		  /* 82135FBCh */ case    3:  		/* lwz R11, <#[R4 + 40]> */
		/* 82135FBCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000028) );
		/* 82135FBCh case    3:*/		return 0x82135FC0;
		  /* 82135FC0h */ case    4:  		/* mr R28, R3 */
		/* 82135FC0h case    4:*/		regs.R28 = regs.R3;
		/* 82135FC0h case    4:*/		return 0x82135FC4;
		  /* 82135FC4h */ case    5:  		/* mr R30, R4 */
		/* 82135FC4h case    5:*/		regs.R30 = regs.R4;
		/* 82135FC4h case    5:*/		return 0x82135FC8;
	}
	return 0x82135FC8;
} // Block from 82135FB0h-82135FC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82135FC8h
// Function '?AddPhaseLinkage@CPSLegacyProgram@D3DXShader@@IAAJPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135FC8);
		  /* 82135FC8h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 82135FC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82135FC8h case    0:*/		return 0x82135FCC;
		  /* 82135FCCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82135FCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82135FD8;  }
		/* 82135FCCh case    1:*/		return 0x82135FD0;
		  /* 82135FD0h */ case    2:  		/* li R3, 1 */
		/* 82135FD0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82135FD0h case    2:*/		return 0x82135FD4;
		  /* 82135FD4h */ case    3:  		/* b 84 */
		/* 82135FD4h case    3:*/		return 0x82136028;
		/* 82135FD4h case    3:*/		return 0x82135FD8;
	}
	return 0x82135FD8;
} // Block from 82135FC8h-82135FD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82135FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82135FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82135FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82135FD8);
		  /* 82135FD8h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 82135FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82135FD8h case    0:*/		return 0x82135FDC;
		  /* 82135FDCh */ case    1:  		/* li R29, 0 */
		/* 82135FDCh case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82135FDCh case    1:*/		return 0x82135FE0;
		  /* 82135FE0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82135FE0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82135FE0h case    2:*/		return 0x82135FE4;
		  /* 82135FE4h */ case    3:  		/* bc 4, CR6_GT, 64 */
		/* 82135FE4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82136024;  }
		/* 82135FE4h case    3:*/		return 0x82135FE8;
		  /* 82135FE8h */ case    4:  		/* li R31, 0 */
		/* 82135FE8h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82135FE8h case    4:*/		return 0x82135FEC;
		  /* 82135FECh */ case    5:  		/* lwz R11, <#[R30 + 24]> */
		/* 82135FECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82135FECh case    5:*/		return 0x82135FF0;
		  /* 82135FF0h */ case    6:  		/* mr R3, R28 */
		/* 82135FF0h case    6:*/		regs.R3 = regs.R28;
		/* 82135FF0h case    6:*/		return 0x82135FF4;
		  /* 82135FF4h */ case    7:  		/* lwz R10, <#[R28 + 24]> */
		/* 82135FF4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 82135FF4h case    7:*/		return 0x82135FF8;
		  /* 82135FF8h */ case    8:  		/* lwzx R11, <#[R31 + R11]> */
		/* 82135FF8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82135FF8h case    8:*/		return 0x82135FFC;
		  /* 82135FFCh */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82135FFCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82135FFCh case    9:*/		return 0x82136000;
		  /* 82136000h */ case   10:  		/* lwzx R4, <#[R11 + R10]> */
		/* 82136000h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82136000h case   10:*/		return 0x82136004;
		  /* 82136004h */ case   11:  		/* bl -84 */
		/* 82136004h case   11:*/		regs.LR = 0x82136008; return 0x82135FB0;
		/* 82136004h case   11:*/		return 0x82136008;
		  /* 82136008h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82136008h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82136008h case   12:*/		return 0x8213600C;
		  /* 8213600Ch */ case   13:  		/* bc 4, CR0_EQ, -60 */
		/* 8213600Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x82135FD0;  }
		/* 8213600Ch case   13:*/		return 0x82136010;
		  /* 82136010h */ case   14:  		/* lwz R11, <#[R30 + 20]> */
		/* 82136010h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82136010h case   14:*/		return 0x82136014;
		  /* 82136014h */ case   15:  		/* addi R29, R29, 1 */
		/* 82136014h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82136014h case   15:*/		return 0x82136018;
		  /* 82136018h */ case   16:  		/* addi R31, R31, 4 */
		/* 82136018h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82136018h case   16:*/		return 0x8213601C;
		  /* 8213601Ch */ case   17:  		/* cmplw CR6, R29, R11 */
		/* 8213601Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213601Ch case   17:*/		return 0x82136020;
		  /* 82136020h */ case   18:  		/* bc 12, CR6_LT, -52 */
		/* 82136020h case   18:*/		if ( regs.CR[6].lt ) { return 0x82135FEC;  }
		/* 82136020h case   18:*/		return 0x82136024;
	}
	return 0x82136024;
} // Block from 82135FD8h-82136024h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82136024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136024);
		  /* 82136024h */ case    0:  		/* li R3, 0 */
		/* 82136024h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136024h case    0:*/		return 0x82136028;
	}
	return 0x82136028;
} // Block from 82136024h-82136028h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82136028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136028);
		  /* 82136028h */ case    0:  		/* addi R1, R1, 128 */
		/* 82136028h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82136028h case    0:*/		return 0x8213602C;
		  /* 8213602Ch */ case    1:  		/* b -675204 */
		/* 8213602Ch case    1:*/		return 0x820912A8;
		/* 8213602Ch case    1:*/		return 0x82136030;
	}
	return 0x82136030;
} // Block from 82136028h-82136030h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136030);
		  /* 82136030h */ case    0:  		/* mfspr R12, LR */
		/* 82136030h case    0:*/		regs.R12 = regs.LR;
		/* 82136030h case    0:*/		return 0x82136034;
		  /* 82136034h */ case    1:  		/* bl -675300 */
		/* 82136034h case    1:*/		regs.LR = 0x82136038; return 0x82091250;
		/* 82136034h case    1:*/		return 0x82136038;
		  /* 82136038h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82136038h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82136038h case    2:*/		return 0x8213603C;
		  /* 8213603Ch */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 8213603Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213603Ch case    3:*/		return 0x82136040;
		  /* 82136040h */ case    4:  		/* bc 12, CR6_EQ, 288 */
		/* 82136040h case    4:*/		if ( regs.CR[6].eq ) { return 0x82136160;  }
		/* 82136040h case    4:*/		return 0x82136044;
		  /* 82136044h */ case    5:  		/* li R27, 0 */
		/* 82136044h case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82136044h case    5:*/		return 0x82136048;
		  /* 82136048h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 82136048h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82136048h case    6:*/		return 0x8213604C;
		  /* 8213604Ch */ case    7:  		/* bc 12, CR6_EQ, 276 */
		/* 8213604Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82136160;  }
		/* 8213604Ch case    7:*/		return 0x82136050;
		  /* 82136050h */ case    8:  		/* lwz R30, <#[R4]> */
		/* 82136050h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000000) );
		/* 82136050h case    8:*/		return 0x82136054;
		  /* 82136054h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 82136054h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82136054h case    9:*/		return 0x82136058;
		  /* 82136058h */ case   10:  		/* bc 12, CR6_EQ, 248 */
		/* 82136058h case   10:*/		if ( regs.CR[6].eq ) { return 0x82136150;  }
		/* 82136058h case   10:*/		return 0x8213605C;
		  /* 8213605Ch */ case   11:  		/* lwz R11, <#[R30]> */
		/* 8213605Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213605Ch case   11:*/		return 0x82136060;
		  /* 82136060h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82136060h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136060h case   12:*/		return 0x82136064;
		  /* 82136064h */ case   13:  		/* bc 12, CR6_EQ, 236 */
		/* 82136064h case   13:*/		if ( regs.CR[6].eq ) { return 0x82136150;  }
		/* 82136064h case   13:*/		return 0x82136068;
		  /* 82136068h */ case   14:  		/* lwz R28, <#[R30 + 12]> */
		/* 82136068h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x0000000C) );
		/* 82136068h case   14:*/		return 0x8213606C;
		  /* 8213606Ch */ case   15:  		/* li R31, 0 */
		/* 8213606Ch case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8213606Ch case   15:*/		return 0x82136070;
		  /* 82136070h */ case   16:  		/* cmplwi CR6, R28, 0 */
		/* 82136070h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82136070h case   16:*/		return 0x82136074;
		  /* 82136074h */ case   17:  		/* bc 12, CR6_EQ, 220 */
		/* 82136074h case   17:*/		if ( regs.CR[6].eq ) { return 0x82136150;  }
		/* 82136074h case   17:*/		return 0x82136078;
		  /* 82136078h */ case   18:  		/* lwz R29, <#[R7]> */
		/* 82136078h case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + 0x00000000) );
		/* 82136078h case   18:*/		return 0x8213607C;
		  /* 8213607Ch */ case   19:  		/* li R10, 0 */
		/* 8213607Ch case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8213607Ch case   19:*/		return 0x82136080;
		  /* 82136080h */ case   20:  		/* li R9, 0 */
		/* 82136080h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82136080h case   20:*/		return 0x82136084;
		  /* 82136084h */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 82136084h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82136084h case   21:*/		return 0x82136088;
		  /* 82136088h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 82136088h case   22:*/		if ( regs.CR[6].eq ) { return 0x821360B8;  }
		/* 82136088h case   22:*/		return 0x8213608C;
		  /* 8213608Ch */ case   23:  		/* lwz R8, <#[R30 + 16]> */
		/* 8213608Ch case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 8213608Ch case   23:*/		return 0x82136090;
		  /* 82136090h */ case   24:  		/* mr R11, R6 */
		/* 82136090h case   24:*/		regs.R11 = regs.R6;
		/* 82136090h case   24:*/		return 0x82136094;
		  /* 82136094h */ case   25:  		/* lwzx R8, <#[R8 + R10]> */
		/* 82136094h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82136094h case   25:*/		return 0x82136098;
		  /* 82136098h */ case   26:  		/* lwz R26, <#[R11]> */
		/* 82136098h case   26:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 82136098h case   26:*/		return 0x8213609C;
		  /* 8213609Ch */ case   27:  		/* cmplw CR6, R8, R26 */
		/* 8213609Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R26);
		/* 8213609Ch case   27:*/		return 0x821360A0;
		  /* 821360A0h */ case   28:  		/* bc 12, CR6_EQ, 44 */
		/* 821360A0h case   28:*/		if ( regs.CR[6].eq ) { return 0x821360CC;  }
		/* 821360A0h case   28:*/		return 0x821360A4;
		  /* 821360A4h */ case   29:  		/* lwz R26, <#[R7]> */
		/* 821360A4h case   29:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R7 + 0x00000000) );
		/* 821360A4h case   29:*/		return 0x821360A8;
		  /* 821360A8h */ case   30:  		/* addi R9, R9, 1 */
		/* 821360A8h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821360A8h case   30:*/		return 0x821360AC;
		  /* 821360ACh */ case   31:  		/* addi R11, R11, 4 */
		/* 821360ACh case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821360ACh case   31:*/		return 0x821360B0;
		  /* 821360B0h */ case   32:  		/* cmplw CR6, R9, R26 */
		/* 821360B0h case   32:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821360B0h case   32:*/		return 0x821360B4;
		  /* 821360B4h */ case   33:  		/* bc 12, CR6_LT, -28 */
		/* 821360B4h case   33:*/		if ( regs.CR[6].lt ) { return 0x82136098;  }
		/* 821360B4h case   33:*/		return 0x821360B8;
	}
	return 0x821360B8;
} // Block from 82136030h-821360B8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821360B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821360B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821360B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821360B8);
		  /* 821360B8h */ case    0:  		/* addi R31, R31, 1 */
		/* 821360B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821360B8h case    0:*/		return 0x821360BC;
		  /* 821360BCh */ case    1:  		/* addi R10, R10, 4 */
		/* 821360BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821360BCh case    1:*/		return 0x821360C0;
		  /* 821360C0h */ case    2:  		/* cmplw CR6, R31, R28 */
		/* 821360C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 821360C0h case    2:*/		return 0x821360C4;
		  /* 821360C4h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 821360C4h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136080;  }
		/* 821360C4h case    3:*/		return 0x821360C8;
		  /* 821360C8h */ case    4:  		/* b 136 */
		/* 821360C8h case    4:*/		return 0x82136150;
		/* 821360C8h case    4:*/		return 0x821360CC;
	}
	return 0x821360CC;
} // Block from 821360B8h-821360CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821360CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821360CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821360CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821360CC);
		  /* 821360CCh */ case    0:  		/* li R29, 0 */
		/* 821360CCh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821360CCh case    0:*/		return 0x821360D0;
		  /* 821360D0h */ case    1:  		/* li R9, 0 */
		/* 821360D0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821360D0h case    1:*/		return 0x821360D4;
		  /* 821360D4h */ case    2:  		/* lwz R8, <#[R7]> */
		/* 821360D4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821360D4h case    2:*/		return 0x821360D8;
		  /* 821360D8h */ case    3:  		/* li R10, 0 */
		/* 821360D8h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821360D8h case    3:*/		return 0x821360DC;
		  /* 821360DCh */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821360DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821360DCh case    4:*/		return 0x821360E0;
		  /* 821360E0h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 821360E0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82136110;  }
		/* 821360E0h case    5:*/		return 0x821360E4;
		  /* 821360E4h */ case    6:  		/* lwz R31, <#[R30 + 16]> */
		/* 821360E4h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821360E4h case    6:*/		return 0x821360E8;
		  /* 821360E8h */ case    7:  		/* mr R11, R6 */
		/* 821360E8h case    7:*/		regs.R11 = regs.R6;
		/* 821360E8h case    7:*/		return 0x821360EC;
		  /* 821360ECh */ case    8:  		/* lwzx R31, <#[R31 + R9]> */
		/* 821360ECh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 821360ECh case    8:*/		return 0x821360F0;
		  /* 821360F0h */ case    9:  		/* lwz R28, <#[R11]> */
		/* 821360F0h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821360F0h case    9:*/		return 0x821360F4;
		  /* 821360F4h */ case   10:  		/* cmplw CR6, R28, R31 */
		/* 821360F4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R31);
		/* 821360F4h case   10:*/		return 0x821360F8;
		  /* 821360F8h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821360F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x82136110;  }
		/* 821360F8h case   11:*/		return 0x821360FC;
		  /* 821360FCh */ case   12:  		/* lwz R28, <#[R7]> */
		/* 821360FCh case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 821360FCh case   12:*/		return 0x82136100;
		  /* 82136100h */ case   13:  		/* addi R10, R10, 1 */
		/* 82136100h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82136100h case   13:*/		return 0x82136104;
		  /* 82136104h */ case   14:  		/* addi R11, R11, 4 */
		/* 82136104h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82136104h case   14:*/		return 0x82136108;
		  /* 82136108h */ case   15:  		/* cmplw CR6, R10, R28 */
		/* 82136108h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 82136108h case   15:*/		return 0x8213610C;
		  /* 8213610Ch */ case   16:  		/* bc 12, CR6_LT, -28 */
		/* 8213610Ch case   16:*/		if ( regs.CR[6].lt ) { return 0x821360F0;  }
		/* 8213610Ch case   16:*/		return 0x82136110;
	}
	return 0x82136110;
} // Block from 821360CCh-82136110h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82136110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136110);
		  /* 82136110h */ case    0:  		/* cmplw CR6, R10, R8 */
		/* 82136110h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82136110h case    0:*/		return 0x82136114;
		  /* 82136114h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 82136114h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213613C;  }
		/* 82136114h case    1:*/		return 0x82136118;
		  /* 82136118h */ case    2:  		/* cmplwi CR6, R10, 32 */
		/* 82136118h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000020);
		/* 82136118h case    2:*/		return 0x8213611C;
		  /* 8213611Ch */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 8213611Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8213616C;  }
		/* 8213611Ch case    3:*/		return 0x82136120;
		  /* 82136120h */ case    4:  		/* lwz R11, <#[R30 + 16]> */
		/* 82136120h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82136120h case    4:*/		return 0x82136124;
		  /* 82136124h */ case    5:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82136124h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82136124h case    5:*/		return 0x82136128;
		  /* 82136128h */ case    6:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82136128h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82136128h case    6:*/		return 0x8213612C;
		  /* 8213612Ch */ case    7:  		/* stwx R11, <#[R10 + R6]> */
		/* 8213612Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8213612Ch case    7:*/		return 0x82136130;
		  /* 82136130h */ case    8:  		/* lwz R11, <#[R7]> */
		/* 82136130h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82136130h case    8:*/		return 0x82136134;
		  /* 82136134h */ case    9:  		/* addi R11, R11, 1 */
		/* 82136134h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82136134h case    9:*/		return 0x82136138;
		  /* 82136138h */ case   10:  		/* stw R11, <#[R7]> */
		/* 82136138h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82136138h case   10:*/		return 0x8213613C;
	}
	return 0x8213613C;
} // Block from 82136110h-8213613Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213613Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213613C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213613C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213613C);
		  /* 8213613Ch */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 8213613Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213613Ch case    0:*/		return 0x82136140;
		  /* 82136140h */ case    1:  		/* addi R29, R29, 1 */
		/* 82136140h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82136140h case    1:*/		return 0x82136144;
		  /* 82136144h */ case    2:  		/* addi R9, R9, 4 */
		/* 82136144h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82136144h case    2:*/		return 0x82136148;
		  /* 82136148h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82136148h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82136148h case    3:*/		return 0x8213614C;
		  /* 8213614Ch */ case    4:  		/* bc 12, CR6_LT, -120 */
		/* 8213614Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821360D4;  }
		/* 8213614Ch case    4:*/		return 0x82136150;
	}
	return 0x82136150;
} // Block from 8213613Ch-82136150h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136150);
		  /* 82136150h */ case    0:  		/* addi R27, R27, 1 */
		/* 82136150h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82136150h case    0:*/		return 0x82136154;
		  /* 82136154h */ case    1:  		/* addi R4, R4, 4 */
		/* 82136154h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82136154h case    1:*/		return 0x82136158;
		  /* 82136158h */ case    2:  		/* cmplw CR6, R27, R5 */
		/* 82136158h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R5);
		/* 82136158h case    2:*/		return 0x8213615C;
		  /* 8213615Ch */ case    3:  		/* bc 12, CR6_LT, -268 */
		/* 8213615Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82136050;  }
		/* 8213615Ch case    3:*/		return 0x82136160;
	}
	return 0x82136160;
} // Block from 82136150h-82136160h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136160);
		  /* 82136160h */ case    0:  		/* li R3, 0 */
		/* 82136160h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136160h case    0:*/		return 0x82136164;
		  /* 82136164h */ case    1:  		/* addi R1, R1, 144 */
		/* 82136164h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82136164h case    1:*/		return 0x82136168;
		  /* 82136168h */ case    2:  		/* b -675528 */
		/* 82136168h case    2:*/		return 0x820912A0;
		/* 82136168h case    2:*/		return 0x8213616C;
	}
	return 0x8213616C;
} // Block from 82136160h-8213616Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213616Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213616C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213616C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213616C);
		  /* 8213616Ch */ case    0:  		/* lis R11, -32253 */
		/* 8213616Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213616Ch case    0:*/		return 0x82136170;
		  /* 82136170h */ case    1:  		/* li R5, 4803 */
		/* 82136170h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12C3);
		/* 82136170h case    1:*/		return 0x82136174;
		  /* 82136174h */ case    2:  		/* addi R6, R11, 21508 */
		/* 82136174h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5404);
		/* 82136174h case    2:*/		return 0x82136178;
		  /* 82136178h */ case    3:  		/* li R4, 0 */
		/* 82136178h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136178h case    3:*/		return 0x8213617C;
		  /* 8213617Ch */ case    4:  		/* bl -162380 */
		/* 8213617Ch case    4:*/		regs.LR = 0x82136180; return 0x8210E730;
		/* 8213617Ch case    4:*/		return 0x82136180;
		  /* 82136180h */ case    5:  		/* lis R3, -32768 */
		/* 82136180h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82136180h case    5:*/		return 0x82136184;
		  /* 82136184h */ case    6:  		/* ori R3, R3, 16389 */
		/* 82136184h case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82136184h case    6:*/		return 0x82136188;
		  /* 82136188h */ case    7:  		/* b -36 */
		/* 82136188h case    7:*/		return 0x82136164;
		/* 82136188h case    7:*/		return 0x8213618C;
		  /* 8213618Ch */ case    8:  		/* nop */
		/* 8213618Ch case    8:*/		cpu::op::nop();
		/* 8213618Ch case    8:*/		return 0x82136190;
	}
	return 0x82136190;
} // Block from 8213616Ch-82136190h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82136190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136190);
		  /* 82136190h */ case    0:  		/* mfspr R12, LR */
		/* 82136190h case    0:*/		regs.R12 = regs.LR;
		/* 82136190h case    0:*/		return 0x82136194;
		  /* 82136194h */ case    1:  		/* bl -675684 */
		/* 82136194h case    1:*/		regs.LR = 0x82136198; return 0x82091230;
		/* 82136194h case    1:*/		return 0x82136198;
		  /* 82136198h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82136198h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82136198h case    2:*/		return 0x8213619C;
		  /* 8213619Ch */ case    3:  		/* mr R20, R5 */
		/* 8213619Ch case    3:*/		regs.R20 = regs.R5;
		/* 8213619Ch case    3:*/		return 0x821361A0;
		  /* 821361A0h */ case    4:  		/* cmplw CR6, R5, R6 */
		/* 821361A0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 821361A0h case    4:*/		return 0x821361A4;
		  /* 821361A4h */ case    5:  		/* bc 4, CR6_LT, 372 */
		/* 821361A4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82136318;  }
		/* 821361A4h case    5:*/		return 0x821361A8;
		  /* 821361A8h */ case    6:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 821361A8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 821361A8h case    6:*/		return 0x821361AC;
		  /* 821361ACh */ case    7:  		/* add R19, R11, R4 */
		/* 821361ACh case    7:*/		cpu::op::add<0>(regs,&regs.R19,regs.R11,regs.R4);
		/* 821361ACh case    7:*/		return 0x821361B0;
		  /* 821361B0h */ case    8:  		/* lwz R24, <#[R19]> */
		/* 821361B0h case    8:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R19 + 0x00000000) );
		/* 821361B0h case    8:*/		return 0x821361B4;
		  /* 821361B4h */ case    9:  		/* cmplwi CR6, R24, 0 */
		/* 821361B4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821361B4h case    9:*/		return 0x821361B8;
		  /* 821361B8h */ case   10:  		/* bc 12, CR6_EQ, 336 */
		/* 821361B8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82136308;  }
		/* 821361B8h case   10:*/		return 0x821361BC;
		  /* 821361BCh */ case   11:  		/* lwz R11, <#[R24]> */
		/* 821361BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821361BCh case   11:*/		return 0x821361C0;
		  /* 821361C0h */ case   12:  		/* rlwinm R25, R11, 0, 12, 31 */
		/* 821361C0h case   12:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R25,regs.R11);
		/* 821361C0h case   12:*/		return 0x821361C4;
		  /* 821361C4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821361C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821361C4h case   13:*/		return 0x821361C8;
		  /* 821361C8h */ case   14:  		/* bc 12, CR6_EQ, 320 */
		/* 821361C8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82136308;  }
		/* 821361C8h case   14:*/		return 0x821361CC;
		  /* 821361CCh */ case   15:  		/* lwz R11, <#[R24 + 4]> */
		/* 821361CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821361CCh case   15:*/		return 0x821361D0;
		  /* 821361D0h */ case   16:  		/* li R23, 0 */
		/* 821361D0h case   16:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821361D0h case   16:*/		return 0x821361D4;
		  /* 821361D4h */ case   17:  		/* twi 6, R25, 0 */
		/* 821361D4h case   17:*/		cpu::op::tw<6>(regs, 0x821361D4, regs.R25, 0x00000000);
		/* 821361D4h case   17:*/		return 0x821361D8;
		  /* 821361D8h */ case   18:  		/* divwu. R22, R11, R25 */
		/* 821361D8h case   18:*/		cpu::op::divwu<1>(regs,&regs.R22,regs.R11,regs.R25);
		/* 821361D8h case   18:*/		return 0x821361DC;
		  /* 821361DCh */ case   19:  		/* bc 12, CR0_EQ, 300 */
		/* 821361DCh case   19:*/		if ( regs.CR[0].eq ) { return 0x82136308;  }
		/* 821361DCh case   19:*/		return 0x821361E0;
		  /* 821361E0h */ case   20:  		/* li R26, 0 */
		/* 821361E0h case   20:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821361E0h case   20:*/		return 0x821361E4;
		  /* 821361E4h */ case   21:  		/* rlwinm R21, R25, 2, 0, 29 */
		/* 821361E4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R21,regs.R25);
		/* 821361E4h case   21:*/		return 0x821361E8;
		  /* 821361E8h */ case   22:  		/* li R27, 0 */
		/* 821361E8h case   22:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821361E8h case   22:*/		return 0x821361EC;
		  /* 821361ECh */ case   23:  		/* cmplwi CR6, R25, 0 */
		/* 821361ECh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821361ECh case   23:*/		return 0x821361F0;
		  /* 821361F0h */ case   24:  		/* bc 12, CR6_EQ, 264 */
		/* 821361F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821362F8;  }
		/* 821361F0h case   24:*/		return 0x821361F4;
		  /* 821361F4h */ case   25:  		/* lwz R11, <#[R24 + 8]> */
		/* 821361F4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821361F4h case   25:*/		return 0x821361F8;
		  /* 821361F8h */ case   26:  		/* mr R28, R25 */
		/* 821361F8h case   26:*/		regs.R28 = regs.R25;
		/* 821361F8h case   26:*/		return 0x821361FC;
		  /* 821361FCh */ case   27:  		/* lwz R29, <#[R3 + 20]> */
		/* 821361FCh case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000014) );
		/* 821361FCh case   27:*/		return 0x82136200;
		  /* 82136200h */ case   28:  		/* add R5, R11, R26 */
		/* 82136200h case   28:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R26);
		/* 82136200h case   28:*/		return 0x82136204;
		  /* 82136204h */ case   29:  		/* lwz R4, <#[R5]> */
		/* 82136204h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000000) );
		/* 82136204h case   29:*/		return 0x82136208;
		  /* 82136208h */ case   30:  		/* cmplwi CR6, R8, 0 */
		/* 82136208h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136208h case   30:*/		return 0x8213620C;
		  /* 8213620Ch */ case   31:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 8213620Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 8213620Ch case   31:*/		return 0x82136210;
		  /* 82136210h */ case   32:  		/* lwzx R30, <#[R11 + R29]> */
		/* 82136210h case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82136210h case   32:*/		return 0x82136214;
		  /* 82136214h */ case   33:  		/* bc 12, CR6_EQ, 60 */
		/* 82136214h case   33:*/		if ( regs.CR[6].eq ) { return 0x82136250;  }
		/* 82136214h case   33:*/		return 0x82136218;
		  /* 82136218h */ case   34:  		/* mr R31, R7 */
		/* 82136218h case   34:*/		regs.R31 = regs.R7;
		/* 82136218h case   34:*/		return 0x8213621C;
		  /* 8213621Ch */ case   35:  		/* mtspr CTR, R8 */
		/* 8213621Ch case   35:*/		regs.CTR = regs.R8;
		/* 8213621Ch case   35:*/		return 0x82136220;
		  /* 82136220h */ case   36:  		/* lwz R11, <#[R31]> */
		/* 82136220h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82136220h case   36:*/		return 0x82136224;
		  /* 82136224h */ case   37:  		/* cmplw CR6, R4, R11 */
		/* 82136224h case   37:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82136224h case   37:*/		return 0x82136228;
		  /* 82136228h */ case   38:  		/* bc 12, CR6_EQ, 16 */
		/* 82136228h case   38:*/		if ( regs.CR[6].eq ) { return 0x82136238;  }
		/* 82136228h case   38:*/		return 0x8213622C;
		  /* 8213622Ch */ case   39:  		/* lwz R18, <#[R30 + 56]> */
		/* 8213622Ch case   39:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R30 + 0x00000038) );
		/* 8213622Ch case   39:*/		return 0x82136230;
		  /* 82136230h */ case   40:  		/* cmplw CR6, R18, R11 */
		/* 82136230h case   40:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 82136230h case   40:*/		return 0x82136234;
		  /* 82136234h */ case   41:  		/* bc 4, CR6_EQ, 20 */
		/* 82136234h case   41:*/		if ( !regs.CR[6].eq ) { return 0x82136248;  }
		/* 82136234h case   41:*/		return 0x82136238;
	}
	return 0x82136238;
} // Block from 82136190h-82136238h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82136238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136238);
		  /* 82136238h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82136238h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82136238h case    0:*/		return 0x8213623C;
		  /* 8213623Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8213623Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213623Ch case    1:*/		return 0x82136240;
		  /* 82136240h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82136240h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82136248;  }
		/* 82136240h case    2:*/		return 0x82136244;
		  /* 82136244h */ case    3:  		/* li R27, 1 */
		/* 82136244h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82136244h case    3:*/		return 0x82136248;
	}
	return 0x82136248;
} // Block from 82136238h-82136248h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136248);
		  /* 82136248h */ case    0:  		/* addi R31, R31, 4 */
		/* 82136248h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82136248h case    0:*/		return 0x8213624C;
		  /* 8213624Ch */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 8213624Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82136220;  }
		/* 8213624Ch case    1:*/		return 0x82136250;
	}
	return 0x82136250;
} // Block from 82136248h-82136250h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136250);
		  /* 82136250h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82136250h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82136250h case    0:*/		return 0x82136254;
		  /* 82136254h */ case    1:  		/* addi R5, R5, 4 */
		/* 82136254h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 82136254h case    1:*/		return 0x82136258;
		  /* 82136258h */ case    2:  		/* bc 4, CR0_EQ, -84 */
		/* 82136258h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82136204;  }
		/* 82136258h case    2:*/		return 0x8213625C;
		  /* 8213625Ch */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 8213625Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8213625Ch case    3:*/		return 0x82136260;
		  /* 82136260h */ case    4:  		/* bc 12, CR6_EQ, 152 */
		/* 82136260h case    4:*/		if ( regs.CR[6].eq ) { return 0x821362F8;  }
		/* 82136260h case    4:*/		return 0x82136264;
		  /* 82136264h */ case    5:  		/* li R29, 0 */
		/* 82136264h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82136264h case    5:*/		return 0x82136268;
		  /* 82136268h */ case    6:  		/* mr R30, R26 */
		/* 82136268h case    6:*/		regs.R30 = regs.R26;
		/* 82136268h case    6:*/		return 0x8213626C;
		  /* 8213626Ch */ case    7:  		/* lwz R11, <#[R24 + 8]> */
		/* 8213626Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8213626Ch case    7:*/		return 0x82136270;
		  /* 82136270h */ case    8:  		/* lwz R5, <#[R3 + 20]> */
		/* 82136270h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000014) );
		/* 82136270h case    8:*/		return 0x82136274;
		  /* 82136274h */ case    9:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82136274h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82136274h case    9:*/		return 0x82136278;
		  /* 82136278h */ case   10:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82136278h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82136278h case   10:*/		return 0x8213627C;
		  /* 8213627Ch */ case   11:  		/* lwzx R5, <#[R4 + R5]> */
		/* 8213627Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 8213627Ch case   11:*/		return 0x82136280;
		  /* 82136280h */ case   12:  		/* lwz R5, <#[R5 + 56]> */
		/* 82136280h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000038) );
		/* 82136280h case   12:*/		return 0x82136284;
		  /* 82136284h */ case   13:  		/* cmpwi CR6, R5, -1 */
		/* 82136284h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 82136284h case   13:*/		return 0x82136288;
		  /* 82136288h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 82136288h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82136290;  }
		/* 82136288h case   14:*/		return 0x8213628C;
		  /* 8213628Ch */ case   15:  		/* mr R5, R11 */
		/* 8213628Ch case   15:*/		regs.R5 = regs.R11;
		/* 8213628Ch case   15:*/		return 0x82136290;
	}
	return 0x82136290;
} // Block from 82136250h-82136290h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82136290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136290);
		  /* 82136290h */ case    0:  		/* lwz R31, <#[R10]> */
		/* 82136290h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000000) );
		/* 82136290h case    0:*/		return 0x82136294;
		  /* 82136294h */ case    1:  		/* li R11, 0 */
		/* 82136294h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82136294h case    1:*/		return 0x82136298;
		  /* 82136298h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 82136298h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82136298h case    2:*/		return 0x8213629C;
		  /* 8213629Ch */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 8213629Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821362C4;  }
		/* 8213629Ch case    3:*/		return 0x821362A0;
		  /* 821362A0h */ case    4:  		/* mr R4, R9 */
		/* 821362A0h case    4:*/		regs.R4 = regs.R9;
		/* 821362A0h case    4:*/		return 0x821362A4;
		  /* 821362A4h */ case    5:  		/* lwz R28, <#[R4]> */
		/* 821362A4h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000000) );
		/* 821362A4h case    5:*/		return 0x821362A8;
		  /* 821362A8h */ case    6:  		/* cmplw CR6, R28, R5 */
		/* 821362A8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R5);
		/* 821362A8h case    6:*/		return 0x821362AC;
		  /* 821362ACh */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 821362ACh case    7:*/		if ( regs.CR[6].eq ) { return 0x821362C4;  }
		/* 821362ACh case    7:*/		return 0x821362B0;
		  /* 821362B0h */ case    8:  		/* lwz R28, <#[R10]> */
		/* 821362B0h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 821362B0h case    8:*/		return 0x821362B4;
		  /* 821362B4h */ case    9:  		/* addi R11, R11, 1 */
		/* 821362B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821362B4h case    9:*/		return 0x821362B8;
		  /* 821362B8h */ case   10:  		/* addi R4, R4, 4 */
		/* 821362B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 821362B8h case   10:*/		return 0x821362BC;
		  /* 821362BCh */ case   11:  		/* cmplw CR6, R11, R28 */
		/* 821362BCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821362BCh case   11:*/		return 0x821362C0;
		  /* 821362C0h */ case   12:  		/* bc 12, CR6_LT, -28 */
		/* 821362C0h case   12:*/		if ( regs.CR[6].lt ) { return 0x821362A4;  }
		/* 821362C0h case   12:*/		return 0x821362C4;
	}
	return 0x821362C4;
} // Block from 82136290h-821362C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821362C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821362C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821362C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821362C4);
		  /* 821362C4h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821362C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821362C4h case    0:*/		return 0x821362C8;
		  /* 821362C8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821362C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821362E8;  }
		/* 821362C8h case    1:*/		return 0x821362CC;
		  /* 821362CCh */ case    2:  		/* cmplwi CR6, R11, 32 */
		/* 821362CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821362CCh case    2:*/		return 0x821362D0;
		  /* 821362D0h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 821362D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82136324;  }
		/* 821362D0h case    3:*/		return 0x821362D4;
		  /* 821362D4h */ case    4:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 821362D4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 821362D4h case    4:*/		return 0x821362D8;
		  /* 821362D8h */ case    5:  		/* stwx R5, <#[R11 + R9]> */
		/* 821362D8h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821362D8h case    5:*/		return 0x821362DC;
		  /* 821362DCh */ case    6:  		/* lwz R11, <#[R10]> */
		/* 821362DCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821362DCh case    6:*/		return 0x821362E0;
		  /* 821362E0h */ case    7:  		/* addi R11, R11, 1 */
		/* 821362E0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821362E0h case    7:*/		return 0x821362E4;
		  /* 821362E4h */ case    8:  		/* stw R11, <#[R10]> */
		/* 821362E4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821362E4h case    8:*/		return 0x821362E8;
	}
	return 0x821362E8;
} // Block from 821362C4h-821362E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821362E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821362E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821362E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821362E8);
		  /* 821362E8h */ case    0:  		/* addi R29, R29, 1 */
		/* 821362E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821362E8h case    0:*/		return 0x821362EC;
		  /* 821362ECh */ case    1:  		/* addi R30, R30, 4 */
		/* 821362ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821362ECh case    1:*/		return 0x821362F0;
		  /* 821362F0h */ case    2:  		/* cmplw CR6, R29, R25 */
		/* 821362F0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 821362F0h case    2:*/		return 0x821362F4;
		  /* 821362F4h */ case    3:  		/* bc 12, CR6_LT, -136 */
		/* 821362F4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213626C;  }
		/* 821362F4h case    3:*/		return 0x821362F8;
	}
	return 0x821362F8;
} // Block from 821362E8h-821362F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821362F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821362F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821362F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821362F8);
		  /* 821362F8h */ case    0:  		/* addi R23, R23, 1 */
		/* 821362F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821362F8h case    0:*/		return 0x821362FC;
		  /* 821362FCh */ case    1:  		/* add R26, R21, R26 */
		/* 821362FCh case    1:*/		cpu::op::add<0>(regs,&regs.R26,regs.R21,regs.R26);
		/* 821362FCh case    1:*/		return 0x82136300;
		  /* 82136300h */ case    2:  		/* cmplw CR6, R23, R22 */
		/* 82136300h case    2:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 82136300h case    2:*/		return 0x82136304;
		  /* 82136304h */ case    3:  		/* bc 12, CR6_LT, -284 */
		/* 82136304h case    3:*/		if ( regs.CR[6].lt ) { return 0x821361E8;  }
		/* 82136304h case    3:*/		return 0x82136308;
	}
	return 0x82136308;
} // Block from 821362F8h-82136308h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136308);
		  /* 82136308h */ case    0:  		/* addi R20, R20, 1 */
		/* 82136308h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82136308h case    0:*/		return 0x8213630C;
		  /* 8213630Ch */ case    1:  		/* addi R19, R19, 4 */
		/* 8213630Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 8213630Ch case    1:*/		return 0x82136310;
		  /* 82136310h */ case    2:  		/* cmplw CR6, R20, R6 */
		/* 82136310h case    2:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R6);
		/* 82136310h case    2:*/		return 0x82136314;
		  /* 82136314h */ case    3:  		/* bc 12, CR6_LT, -356 */
		/* 82136314h case    3:*/		if ( regs.CR[6].lt ) { return 0x821361B0;  }
		/* 82136314h case    3:*/		return 0x82136318;
	}
	return 0x82136318;
} // Block from 82136308h-82136318h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136318);
		  /* 82136318h */ case    0:  		/* li R3, 0 */
		/* 82136318h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136318h case    0:*/		return 0x8213631C;
		  /* 8213631Ch */ case    1:  		/* addi R1, R1, 208 */
		/* 8213631Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8213631Ch case    1:*/		return 0x82136320;
		  /* 82136320h */ case    2:  		/* b -676000 */
		/* 82136320h case    2:*/		return 0x82091280;
		/* 82136320h case    2:*/		return 0x82136324;
	}
	return 0x82136324;
} // Block from 82136318h-82136324h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136324);
		  /* 82136324h */ case    0:  		/* lis R11, -32253 */
		/* 82136324h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82136324h case    0:*/		return 0x82136328;
		  /* 82136328h */ case    1:  		/* li R5, 4803 */
		/* 82136328h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12C3);
		/* 82136328h case    1:*/		return 0x8213632C;
		  /* 8213632Ch */ case    2:  		/* addi R6, R11, 21508 */
		/* 8213632Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5404);
		/* 8213632Ch case    2:*/		return 0x82136330;
		  /* 82136330h */ case    3:  		/* li R4, 0 */
		/* 82136330h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136330h case    3:*/		return 0x82136334;
		  /* 82136334h */ case    4:  		/* bl -162820 */
		/* 82136334h case    4:*/		regs.LR = 0x82136338; return 0x8210E730;
		/* 82136334h case    4:*/		return 0x82136338;
		  /* 82136338h */ case    5:  		/* lis R3, -32768 */
		/* 82136338h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82136338h case    5:*/		return 0x8213633C;
		  /* 8213633Ch */ case    6:  		/* ori R3, R3, 16389 */
		/* 8213633Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213633Ch case    6:*/		return 0x82136340;
		  /* 82136340h */ case    7:  		/* b -36 */
		/* 82136340h case    7:*/		return 0x8213631C;
		/* 82136340h case    7:*/		return 0x82136344;
		  /* 82136344h */ case    8:  		/* nop */
		/* 82136344h case    8:*/		cpu::op::nop();
		/* 82136344h case    8:*/		return 0x82136348;
		  /* 82136348h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 82136348h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82136348h case    9:*/		return 0x8213634C;
		  /* 8213634Ch */ case   10:  		/* li R8, 0 */
		/* 8213634Ch case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8213634Ch case   10:*/		return 0x82136350;
		  /* 82136350h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82136350h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136350h case   11:*/		return 0x82136354;
		  /* 82136354h */ case   12:  		/* bc 4, CR6_GT, 84 */
		/* 82136354h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821363A8;  }
		/* 82136354h case   12:*/		return 0x82136358;
		  /* 82136358h */ case   13:  		/* li R9, 0 */
		/* 82136358h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82136358h case   13:*/		return 0x8213635C;
		  /* 8213635Ch */ case   14:  		/* lwz R11, <#[R3 + 20]> */
		/* 8213635Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8213635Ch case   14:*/		return 0x82136360;
		  /* 82136360h */ case   15:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82136360h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82136360h case   15:*/		return 0x82136364;
		  /* 82136364h */ case   16:  		/* lwz R10, <#[R11 + 56]> */
		/* 82136364h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 82136364h case   16:*/		return 0x82136368;
		  /* 82136368h */ case   17:  		/* cmpwi CR6, R10, -1 */
		/* 82136368h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82136368h case   17:*/		return 0x8213636C;
		  /* 8213636Ch */ case   18:  		/* bc 12, CR6_EQ, 40 */
		/* 8213636Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x82136394;  }
		/* 8213636Ch case   18:*/		return 0x82136370;
		  /* 82136370h */ case   19:  		/* lwz R7, <#[R3 + 20]> */
		/* 82136370h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 82136370h case   19:*/		return 0x82136374;
		  /* 82136374h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136374h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136374h case   20:*/		return 0x82136378;
		  /* 82136378h */ case   21:  		/* lwzx R7, <#[R7 + R10]> */
		/* 82136378h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82136378h case   21:*/		return 0x8213637C;
		  /* 8213637Ch */ case   22:  		/* lwz R7, <#[R7 + 12]> */
		/* 8213637Ch case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 8213637Ch case   22:*/		return 0x82136380;
		  /* 82136380h */ case   23:  		/* stw R7, <#[R11 + 12]> */
		/* 82136380h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 82136380h case   23:*/		return 0x82136384;
		  /* 82136384h */ case   24:  		/* lwz R7, <#[R3 + 20]> */
		/* 82136384h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 82136384h case   24:*/		return 0x82136388;
		  /* 82136388h */ case   25:  		/* lwzx R10, <#[R7 + R10]> */
		/* 82136388h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82136388h case   25:*/		return 0x8213638C;
		  /* 8213638Ch */ case   26:  		/* lwz R10, <#[R10 + 16]> */
		/* 8213638Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8213638Ch case   26:*/		return 0x82136390;
		  /* 82136390h */ case   27:  		/* stw R10, <#[R11 + 16]> */
		/* 82136390h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82136390h case   27:*/		return 0x82136394;
	}
	return 0x82136394;
} // Block from 82136324h-82136394h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82136394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136394);
		  /* 82136394h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 82136394h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82136394h case    0:*/		return 0x82136398;
		  /* 82136398h */ case    1:  		/* addi R8, R8, 1 */
		/* 82136398h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82136398h case    1:*/		return 0x8213639C;
		  /* 8213639Ch */ case    2:  		/* addi R9, R9, 4 */
		/* 8213639Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8213639Ch case    2:*/		return 0x821363A0;
		  /* 821363A0h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 821363A0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821363A0h case    3:*/		return 0x821363A4;
		  /* 821363A4h */ case    4:  		/* bc 12, CR6_LT, -72 */
		/* 821363A4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213635C;  }
		/* 821363A4h case    4:*/		return 0x821363A8;
	}
	return 0x821363A8;
} // Block from 82136394h-821363A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821363A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821363A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821363A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821363A8);
		  /* 821363A8h */ case    0:  		/* li R3, 0 */
		/* 821363A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821363A8h case    0:*/		return 0x821363AC;
		  /* 821363ACh */ case    1:  		/* bclr 20, CR0_LT */
		/* 821363ACh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821363ACh case    1:*/		return 0x821363B0;
	}
	return 0x821363B0;
} // Block from 821363A8h-821363B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821363B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821363B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821363B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821363B0);
		  /* 821363B0h */ case    0:  		/* mfspr R12, LR */
		/* 821363B0h case    0:*/		regs.R12 = regs.LR;
		/* 821363B0h case    0:*/		return 0x821363B4;
		  /* 821363B4h */ case    1:  		/* bl -676240 */
		/* 821363B4h case    1:*/		regs.LR = 0x821363B8; return 0x82091224;
		/* 821363B4h case    1:*/		return 0x821363B8;
		  /* 821363B8h */ case    2:  		/* lwz R16, <#[R1 + 84]> */
		/* 821363B8h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000054) );
		/* 821363B8h case    2:*/		return 0x821363BC;
		  /* 821363BCh */ case    3:  		/* li R23, 0 */
		/* 821363BCh case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821363BCh case    3:*/		return 0x821363C0;
		  /* 821363C0h */ case    4:  		/* cmplw CR6, R5, R6 */
		/* 821363C0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 821363C0h case    4:*/		return 0x821363C4;
		  /* 821363C4h */ case    5:  		/* stw R23, <#[R10]> */
		/* 821363C4h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 821363C4h case    5:*/		return 0x821363C8;
		  /* 821363C8h */ case    6:  		/* mr R20, R23 */
		/* 821363C8h case    6:*/		regs.R20 = regs.R23;
		/* 821363C8h case    6:*/		return 0x821363CC;
		  /* 821363CCh */ case    7:  		/* stw R23, <#[R16]> */
		/* 821363CCh case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R16 + 0x00000000) );
		/* 821363CCh case    7:*/		return 0x821363D0;
		  /* 821363D0h */ case    8:  		/* bc 4, CR6_LT, 388 */
		/* 821363D0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82136554;  }
		/* 821363D0h case    8:*/		return 0x821363D4;
		  /* 821363D4h */ case    9:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 821363D4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 821363D4h case    9:*/		return 0x821363D8;
		  /* 821363D8h */ case   10:  		/* subf R18, R5, R6 */
		/* 821363D8h case   10:*/		cpu::op::subf<0>(regs,&regs.R18,regs.R5,regs.R6);
		/* 821363D8h case   10:*/		return 0x821363DC;
		  /* 821363DCh */ case   11:  		/* add R19, R11, R4 */
		/* 821363DCh case   11:*/		cpu::op::add<0>(regs,&regs.R19,regs.R11,regs.R4);
		/* 821363DCh case   11:*/		return 0x821363E0;
		  /* 821363E0h */ case   12:  		/* li R17, 1 */
		/* 821363E0h case   12:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821363E0h case   12:*/		return 0x821363E4;
		  /* 821363E4h */ case   13:  		/* lwz R4, <#[R19]> */
		/* 821363E4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x00000000) );
		/* 821363E4h case   13:*/		return 0x821363E8;
		  /* 821363E8h */ case   14:  		/* cmplwi CR6, R4, 0 */
		/* 821363E8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821363E8h case   14:*/		return 0x821363EC;
		  /* 821363ECh */ case   15:  		/* bc 12, CR6_EQ, 348 */
		/* 821363ECh case   15:*/		if ( regs.CR[6].eq ) { return 0x82136548;  }
		/* 821363ECh case   15:*/		return 0x821363F0;
		  /* 821363F0h */ case   16:  		/* lwz R11, <#[R4]> */
		/* 821363F0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821363F0h case   16:*/		return 0x821363F4;
		  /* 821363F4h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821363F4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821363F4h case   17:*/		return 0x821363F8;
		  /* 821363F8h */ case   18:  		/* bc 12, CR6_EQ, 336 */
		/* 821363F8h case   18:*/		if ( regs.CR[6].eq ) { return 0x82136548;  }
		/* 821363F8h case   18:*/		return 0x821363FC;
		  /* 821363FCh */ case   19:  		/* lwz R6, <#[R4 + 4]> */
		/* 821363FCh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000004) );
		/* 821363FCh case   19:*/		return 0x82136400;
		  /* 82136400h */ case   20:  		/* rlwinm R30, R11, 0, 12, 31 */
		/* 82136400h case   20:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R11);
		/* 82136400h case   20:*/		return 0x82136404;
		  /* 82136404h */ case   21:  		/* mr R24, R23 */
		/* 82136404h case   21:*/		regs.R24 = regs.R23;
		/* 82136404h case   21:*/		return 0x82136408;
		  /* 82136408h */ case   22:  		/* divwu R22, R6, R30 */
		/* 82136408h case   22:*/		cpu::op::divwu<0>(regs,&regs.R22,regs.R6,regs.R30);
		/* 82136408h case   22:*/		return 0x8213640C;
		  /* 8213640Ch */ case   23:  		/* twi 6, R30, 0 */
		/* 8213640Ch case   23:*/		cpu::op::tw<6>(regs, 0x8213640C, regs.R30, 0x00000000);
		/* 8213640Ch case   23:*/		return 0x82136410;
		  /* 82136410h */ case   24:  		/* cmplwi CR6, R8, 0 */
		/* 82136410h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136410h case   24:*/		return 0x82136414;
		  /* 82136414h */ case   25:  		/* bc 12, CR6_EQ, 308 */
		/* 82136414h case   25:*/		if ( regs.CR[6].eq ) { return 0x82136548;  }
		/* 82136414h case   25:*/		return 0x82136418;
		  /* 82136418h */ case   26:  		/* mr R26, R7 */
		/* 82136418h case   26:*/		regs.R26 = regs.R7;
		/* 82136418h case   26:*/		return 0x8213641C;
		  /* 8213641Ch */ case   27:  		/* mr R21, R8 */
		/* 8213641Ch case   27:*/		regs.R21 = regs.R8;
		/* 8213641Ch case   27:*/		return 0x82136420;
		  /* 82136420h */ case   28:  		/* cmplwi CR6, R22, 0 */
		/* 82136420h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82136420h case   28:*/		return 0x82136424;
		  /* 82136424h */ case   29:  		/* bc 12, CR6_EQ, 280 */
		/* 82136424h case   29:*/		if ( regs.CR[6].eq ) { return 0x8213653C;  }
		/* 82136424h case   29:*/		return 0x82136428;
		  /* 82136428h */ case   30:  		/* mr R28, R23 */
		/* 82136428h case   30:*/		regs.R28 = regs.R23;
		/* 82136428h case   30:*/		return 0x8213642C;
		  /* 8213642Ch */ case   31:  		/* rlwinm R25, R30, 2, 0, 29 */
		/* 8213642Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R30);
		/* 8213642Ch case   31:*/		return 0x82136430;
		  /* 82136430h */ case   32:  		/* mr R27, R22 */
		/* 82136430h case   32:*/		regs.R27 = regs.R22;
		/* 82136430h case   32:*/		return 0x82136434;
		  /* 82136434h */ case   33:  		/* mr R29, R23 */
		/* 82136434h case   33:*/		regs.R29 = regs.R23;
		/* 82136434h case   33:*/		return 0x82136438;
		  /* 82136438h */ case   34:  		/* cmplwi CR6, R30, 0 */
		/* 82136438h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82136438h case   34:*/		return 0x8213643C;
		  /* 8213643Ch */ case   35:  		/* bc 12, CR6_EQ, 224 */
		/* 8213643Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x8213651C;  }
		/* 8213643Ch case   35:*/		return 0x82136440;
		  /* 82136440h */ case   36:  		/* mtspr CTR, R30 */
		/* 82136440h case   36:*/		regs.CTR = regs.R30;
		/* 82136440h case   36:*/		return 0x82136444;
		  /* 82136444h */ case   37:  		/* mr R31, R28 */
		/* 82136444h case   37:*/		regs.R31 = regs.R28;
		/* 82136444h case   37:*/		return 0x82136448;
		  /* 82136448h */ case   38:  		/* lwz R6, <#[R4 + 8]> */
		/* 82136448h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000008) );
		/* 82136448h case   38:*/		return 0x8213644C;
		  /* 8213644Ch */ case   39:  		/* lwz R5, <#[R3 + 20]> */
		/* 8213644Ch case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000014) );
		/* 8213644Ch case   39:*/		return 0x82136450;
		  /* 82136450h */ case   40:  		/* lwz R11, <#[R26]> */
		/* 82136450h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82136450h case   40:*/		return 0x82136454;
		  /* 82136454h */ case   41:  		/* lwzx R6, <#[R6 + R31]> */
		/* 82136454h case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R31 + 0x00000000) );
		/* 82136454h case   41:*/		return 0x82136458;
		  /* 82136458h */ case   42:  		/* rlwinm R15, R6, 2, 0, 29 */
		/* 82136458h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R15,regs.R6);
		/* 82136458h case   42:*/		return 0x8213645C;
		  /* 8213645Ch */ case   43:  		/* lwzx R15, <#[R15 + R5]> */
		/* 8213645Ch case   43:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R15 + regs.R5 + 0x00000000) );
		/* 8213645Ch case   43:*/		return 0x82136460;
		  /* 82136460h */ case   44:  		/* lwz R15, <#[R15 + 56]> */
		/* 82136460h case   44:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R15 + 0x00000038) );
		/* 82136460h case   44:*/		return 0x82136464;
		  /* 82136464h */ case   45:  		/* cmplw CR6, R15, R11 */
		/* 82136464h case   45:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R11);
		/* 82136464h case   45:*/		return 0x82136468;
		  /* 82136468h */ case   46:  		/* bc 12, CR6_EQ, 12 */
		/* 82136468h case   46:*/		if ( regs.CR[6].eq ) { return 0x82136474;  }
		/* 82136468h case   46:*/		return 0x8213646C;
		  /* 8213646Ch */ case   47:  		/* cmplw CR6, R6, R11 */
		/* 8213646Ch case   47:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8213646Ch case   47:*/		return 0x82136470;
		  /* 82136470h */ case   48:  		/* bc 4, CR6_EQ, 164 */
		/* 82136470h case   48:*/		if ( !regs.CR[6].eq ) { return 0x82136514;  }
		/* 82136470h case   48:*/		return 0x82136474;
	}
	return 0x82136474;
} // Block from 821363B0h-82136474h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82136474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136474);
		  /* 82136474h */ case    0:  		/* addi R24, R24, 1 */
		/* 82136474h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82136474h case    0:*/		return 0x82136478;
		  /* 82136478h */ case    1:  		/* addi R29, R29, 1 */
		/* 82136478h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82136478h case    1:*/		return 0x8213647C;
		  /* 8213647Ch */ case    2:  		/* cmplw CR6, R24, R20 */
		/* 8213647Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R20);
		/* 8213647Ch case    2:*/		return 0x82136480;
		  /* 82136480h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 82136480h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82136488;  }
		/* 82136480h case    3:*/		return 0x82136484;
		  /* 82136484h */ case    4:  		/* mr R20, R24 */
		/* 82136484h case    4:*/		regs.R20 = regs.R24;
		/* 82136484h case    4:*/		return 0x82136488;
	}
	return 0x82136488;
} // Block from 82136474h-82136488h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136488);
		  /* 82136488h */ case    0:  		/* lwz R11, <#[R4 + 12]> */
		/* 82136488h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82136488h case    0:*/		return 0x8213648C;
		  /* 8213648Ch */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8213648Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213648Ch case    1:*/		return 0x82136490;
		  /* 82136490h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 82136490h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821364B4;  }
		/* 82136490h case    2:*/		return 0x82136494;
		  /* 82136494h */ case    3:  		/* lwz R11, <#[R4 + 16]> */
		/* 82136494h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82136494h case    3:*/		return 0x82136498;
		  /* 82136498h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 82136498h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82136498h case    4:*/		return 0x8213649C;
		  /* 8213649Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213649Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213649Ch case    5:*/		return 0x821364A0;
		  /* 821364A0h */ case    6:  		/* lwzx R11, <#[R11 + R5]> */
		/* 821364A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 821364A0h case    6:*/		return 0x821364A4;
		  /* 821364A4h */ case    7:  		/* lwz R11, <#[R11 + 16]> */
		/* 821364A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821364A4h case    7:*/		return 0x821364A8;
		  /* 821364A8h */ case    8:  		/* cmplwi CR6, R11, 3 */
		/* 821364A8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821364A8h case    8:*/		return 0x821364AC;
		  /* 821364ACh */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821364ACh case    9:*/		if ( !regs.CR[6].eq ) { return 0x821364B4;  }
		/* 821364ACh case    9:*/		return 0x821364B0;
		  /* 821364B0h */ case   10:  		/* stw R17, <#[R10]> */
		/* 821364B0h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x00000000) );
		/* 821364B0h case   10:*/		return 0x821364B4;
	}
	return 0x821364B4;
} // Block from 82136488h-821364B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821364B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821364B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821364B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821364B4);
		  /* 821364B4h */ case    0:  		/* lwz R11, <#[R4]> */
		/* 821364B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821364B4h case    0:*/		return 0x821364B8;
		  /* 821364B8h */ case    1:  		/* lis R6, 20480 */
		/* 821364B8h case    1:*/		cpu::op::lis<0>(regs,&regs.R6,0x5000);
		/* 821364B8h case    1:*/		return 0x821364BC;
		  /* 821364BCh */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 821364BCh case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821364BCh case    2:*/		return 0x821364C0;
		  /* 821364C0h */ case    3:  		/* cmplw CR6, R11, R6 */
		/* 821364C0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821364C0h case    3:*/		return 0x821364C4;
		  /* 821364C4h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 821364C4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82136514;  }
		/* 821364C4h case    4:*/		return 0x821364C8;
		  /* 821364C8h */ case    5:  		/* lwz R11, <#[R4 + 12]> */
		/* 821364C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821364C8h case    5:*/		return 0x821364CC;
		  /* 821364CCh */ case    6:  		/* mr R6, R23 */
		/* 821364CCh case    6:*/		regs.R6 = regs.R23;
		/* 821364CCh case    6:*/		return 0x821364D0;
		  /* 821364D0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821364D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821364D0h case    7:*/		return 0x821364D4;
		  /* 821364D4h */ case    8:  		/* bc 4, CR6_GT, 64 */
		/* 821364D4h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82136514;  }
		/* 821364D4h case    8:*/		return 0x821364D8;
		  /* 821364D8h */ case    9:  		/* mr R11, R23 */
		/* 821364D8h case    9:*/		regs.R11 = regs.R23;
		/* 821364D8h case    9:*/		return 0x821364DC;
		  /* 821364DCh */ case   10:  		/* lwz R5, <#[R4 + 16]> */
		/* 821364DCh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x00000010) );
		/* 821364DCh case   10:*/		return 0x821364E0;
		  /* 821364E0h */ case   11:  		/* lwz R15, <#[R3 + 20]> */
		/* 821364E0h case   11:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R3 + 0x00000014) );
		/* 821364E0h case   11:*/		return 0x821364E4;
		  /* 821364E4h */ case   12:  		/* lwzx R5, <#[R5 + R11]> */
		/* 821364E4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821364E4h case   12:*/		return 0x821364E8;
		  /* 821364E8h */ case   13:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 821364E8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 821364E8h case   13:*/		return 0x821364EC;
		  /* 821364ECh */ case   14:  		/* lwzx R5, <#[R5 + R15]> */
		/* 821364ECh case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R15 + 0x00000000) );
		/* 821364ECh case   14:*/		return 0x821364F0;
		  /* 821364F0h */ case   15:  		/* lwz R5, <#[R5 + 16]> */
		/* 821364F0h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000010) );
		/* 821364F0h case   15:*/		return 0x821364F4;
		  /* 821364F4h */ case   16:  		/* cmplwi CR6, R5, 3 */
		/* 821364F4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 821364F4h case   16:*/		return 0x821364F8;
		  /* 821364F8h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 821364F8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82136500;  }
		/* 821364F8h case   17:*/		return 0x821364FC;
		  /* 821364FCh */ case   18:  		/* stw R17, <#[R10]> */
		/* 821364FCh case   18:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R10 + 0x00000000) );
		/* 821364FCh case   18:*/		return 0x82136500;
	}
	return 0x82136500;
} // Block from 821364B4h-82136500h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82136500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136500);
		  /* 82136500h */ case    0:  		/* lwz R5, <#[R4 + 12]> */
		/* 82136500h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 82136500h case    0:*/		return 0x82136504;
		  /* 82136504h */ case    1:  		/* addi R6, R6, 1 */
		/* 82136504h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82136504h case    1:*/		return 0x82136508;
		  /* 82136508h */ case    2:  		/* addi R11, R11, 4 */
		/* 82136508h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82136508h case    2:*/		return 0x8213650C;
		  /* 8213650Ch */ case    3:  		/* cmplw CR6, R6, R5 */
		/* 8213650Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 8213650Ch case    3:*/		return 0x82136510;
		  /* 82136510h */ case    4:  		/* bc 12, CR6_LT, -52 */
		/* 82136510h case    4:*/		if ( regs.CR[6].lt ) { return 0x821364DC;  }
		/* 82136510h case    4:*/		return 0x82136514;
	}
	return 0x82136514;
} // Block from 82136500h-82136514h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136514);
		  /* 82136514h */ case    0:  		/* addi R31, R31, 4 */
		/* 82136514h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82136514h case    0:*/		return 0x82136518;
		  /* 82136518h */ case    1:  		/* bc 16, CR0_LT, -208 */
		/* 82136518h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82136448;  }
		/* 82136518h case    1:*/		return 0x8213651C;
	}
	return 0x8213651C;
} // Block from 82136514h-8213651Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213651Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213651C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213651C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213651C);
		  /* 8213651Ch */ case    0:  		/* cmplw CR6, R29, R30 */
		/* 8213651Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 8213651Ch case    0:*/		return 0x82136520;
		  /* 82136520h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82136520h case    1:*/		if ( regs.CR[6].eq ) { return 0x82136530;  }
		/* 82136520h case    1:*/		return 0x82136524;
		  /* 82136524h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 82136524h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82136524h case    2:*/		return 0x82136528;
		  /* 82136528h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82136528h case    3:*/		if ( regs.CR[6].eq ) { return 0x82136530;  }
		/* 82136528h case    3:*/		return 0x8213652C;
		  /* 8213652Ch */ case    4:  		/* stw R17, <#[R16]> */
		/* 8213652Ch case    4:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R16 + 0x00000000) );
		/* 8213652Ch case    4:*/		return 0x82136530;
	}
	return 0x82136530;
} // Block from 8213651Ch-82136530h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136530);
		  /* 82136530h */ case    0:  		/* addic. R27, R27, -1 */
		/* 82136530h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 82136530h case    0:*/		return 0x82136534;
		  /* 82136534h */ case    1:  		/* add R28, R25, R28 */
		/* 82136534h case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R25,regs.R28);
		/* 82136534h case    1:*/		return 0x82136538;
		  /* 82136538h */ case    2:  		/* bc 4, CR0_EQ, -260 */
		/* 82136538h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82136434;  }
		/* 82136538h case    2:*/		return 0x8213653C;
	}
	return 0x8213653C;
} // Block from 82136530h-8213653Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213653Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213653C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213653C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213653C);
		  /* 8213653Ch */ case    0:  		/* addic. R21, R21, -1 */
		/* 8213653Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 8213653Ch case    0:*/		return 0x82136540;
		  /* 82136540h */ case    1:  		/* addi R26, R26, 4 */
		/* 82136540h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82136540h case    1:*/		return 0x82136544;
		  /* 82136544h */ case    2:  		/* bc 4, CR0_EQ, -292 */
		/* 82136544h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82136420;  }
		/* 82136544h case    2:*/		return 0x82136548;
	}
	return 0x82136548;
} // Block from 8213653Ch-82136548h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136548);
		  /* 82136548h */ case    0:  		/* addic. R18, R18, -1 */
		/* 82136548h case    0:*/		cpu::op::addic<1>(regs,&regs.R18,regs.R18,0xFFFFFFFF);
		/* 82136548h case    0:*/		return 0x8213654C;
		  /* 8213654Ch */ case    1:  		/* addi R19, R19, 4 */
		/* 8213654Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 8213654Ch case    1:*/		return 0x82136550;
		  /* 82136550h */ case    2:  		/* bc 4, CR0_EQ, -364 */
		/* 82136550h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821363E4;  }
		/* 82136550h case    2:*/		return 0x82136554;
	}
	return 0x82136554;
} // Block from 82136548h-82136554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136554);
		  /* 82136554h */ case    0:  		/* stw R20, <#[R9]> */
		/* 82136554h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R9 + 0x00000000) );
		/* 82136554h case    0:*/		return 0x82136558;
		  /* 82136558h */ case    1:  		/* li R3, 0 */
		/* 82136558h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136558h case    1:*/		return 0x8213655C;
		  /* 8213655Ch */ case    2:  		/* b -676584 */
		/* 8213655Ch case    2:*/		return 0x82091274;
		/* 8213655Ch case    2:*/		return 0x82136560;
	}
	return 0x82136560;
} // Block from 82136554h-82136560h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136560);
		  /* 82136560h */ case    0:  		/* mfspr R12, LR */
		/* 82136560h case    0:*/		regs.R12 = regs.LR;
		/* 82136560h case    0:*/		return 0x82136564;
		  /* 82136564h */ case    1:  		/* bl -676676 */
		/* 82136564h case    1:*/		regs.LR = 0x82136568; return 0x82091220;
		/* 82136564h case    1:*/		return 0x82136568;
		  /* 82136568h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 82136568h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82136568h case    2:*/		return 0x8213656C;
		  /* 8213656Ch */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8213656Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8213656Ch case    3:*/		return 0x82136570;
		  /* 82136570h */ case    4:  		/* stwu R1, <#[R1 - 592]> */
		/* 82136570h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDB0);
		/* 82136570h case    4:*/		return 0x82136574;
		  /* 82136574h */ case    5:  		/* lwz R31, <#[R3 + 8]> */
		/* 82136574h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000008) );
		/* 82136574h case    5:*/		return 0x82136578;
		  /* 82136578h */ case    6:  		/* mr R27, R3 */
		/* 82136578h case    6:*/		regs.R27 = regs.R3;
		/* 82136578h case    6:*/		return 0x8213657C;
		  /* 8213657Ch */ case    7:  		/* li R5, 128 */
		/* 8213657Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 8213657Ch case    7:*/		return 0x82136580;
		  /* 82136580h */ case    8:  		/* li R4, 0 */
		/* 82136580h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136580h case    8:*/		return 0x82136584;
		  /* 82136584h */ case    9:  		/* addi R3, R1, 288 */
		/* 82136584h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 82136584h case    9:*/		return 0x82136588;
		  /* 82136588h */ case   10:  		/* stw R31, <#[R1 + 80]> */
		/* 82136588h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82136588h case   10:*/		return 0x8213658C;
		  /* 8213658Ch */ case   11:  		/* bl -676428 */
		/* 8213658Ch case   11:*/		regs.LR = 0x82136590; return 0x82091340;
		/* 8213658Ch case   11:*/		return 0x82136590;
		  /* 82136590h */ case   12:  		/* li R5, 128 */
		/* 82136590h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 82136590h case   12:*/		return 0x82136594;
		  /* 82136594h */ case   13:  		/* li R4, 0 */
		/* 82136594h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136594h case   13:*/		return 0x82136598;
		  /* 82136598h */ case   14:  		/* addi R3, R1, 160 */
		/* 82136598h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82136598h case   14:*/		return 0x8213659C;
		  /* 8213659Ch */ case   15:  		/* bl -676444 */
		/* 8213659Ch case   15:*/		regs.LR = 0x821365A0; return 0x82091340;
		/* 8213659Ch case   15:*/		return 0x821365A0;
		  /* 821365A0h */ case   16:  		/* addi R11, R1, 128 */
		/* 821365A0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821365A0h case   16:*/		return 0x821365A4;
		  /* 821365A4h */ case   17:  		/* li R22, 0 */
		/* 821365A4h case   17:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821365A4h case   17:*/		return 0x821365A8;
		  /* 821365A8h */ case   18:  		/* lis R10, -32255 */
		/* 821365A8h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821365A8h case   18:*/		return 0x821365AC;
		  /* 821365ACh */ case   19:  		/* li R7, 4 */
		/* 821365ACh case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 821365ACh case   19:*/		return 0x821365B0;
		  /* 821365B0h */ case   20:  		/* addi R4, R10, -8736 */
		/* 821365B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFDDE0);
		/* 821365B0h case   20:*/		return 0x821365B4;
		  /* 821365B4h */ case   21:  		/* std R22, <#[R11]> */
		/* 821365B4h case   21:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 821365B4h case   21:*/		return 0x821365B8;
		  /* 821365B8h */ case   22:  		/* li R6, 8 */
		/* 821365B8h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 821365B8h case   22:*/		return 0x821365BC;
		  /* 821365BCh */ case   23:  		/* std R22, <#[R11 + 8]> */
		/* 821365BCh case   23:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000008) );
		/* 821365BCh case   23:*/		return 0x821365C0;
		  /* 821365C0h */ case   24:  		/* li R5, 785 */
		/* 821365C0h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x311);
		/* 821365C0h case   24:*/		return 0x821365C4;
		  /* 821365C4h */ case   25:  		/* std R22, <#[R11 + 16]> */
		/* 821365C4h case   25:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000010) );
		/* 821365C4h case   25:*/		return 0x821365C8;
		  /* 821365C8h */ case   26:  		/* mr R3, R27 */
		/* 821365C8h case   26:*/		regs.R3 = regs.R27;
		/* 821365C8h case   26:*/		return 0x821365CC;
		  /* 821365CCh */ case   27:  		/* std R22, <#[R11 + 24]> */
		/* 821365CCh case   27:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000018) );
		/* 821365CCh case   27:*/		return 0x821365D0;
		  /* 821365D0h */ case   28:  		/* bl -234568 */
		/* 821365D0h case   28:*/		regs.LR = 0x821365D4; return 0x820FD188;
		/* 821365D0h case   28:*/		return 0x821365D4;
		  /* 821365D4h */ case   29:  		/* stw R3, <#[R1 + 84]> */
		/* 821365D4h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 821365D4h case   29:*/		return 0x821365D8;
		  /* 821365D8h */ case   30:  		/* li R16, 1 */
		/* 821365D8h case   30:*/		cpu::op::li<0>(regs,&regs.R16,0x1);
		/* 821365D8h case   30:*/		return 0x821365DC;
		  /* 821365DCh */ case   31:  		/* mr R8, R22 */
		/* 821365DCh case   31:*/		regs.R8 = regs.R22;
		/* 821365DCh case   31:*/		return 0x821365E0;
		  /* 821365E0h */ case   32:  		/* cmplwi CR6, R31, 0 */
		/* 821365E0h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821365E0h case   32:*/		return 0x821365E4;
		  /* 821365E4h */ case   33:  		/* bc 12, CR6_EQ, 148 */
		/* 821365E4h case   33:*/		if ( regs.CR[6].eq ) { return 0x82136678;  }
		/* 821365E4h case   33:*/		return 0x821365E8;
		  /* 821365E8h */ case   34:  		/* lwz R7, <#[R27 + 20]> */
		/* 821365E8h case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 821365E8h case   34:*/		return 0x821365EC;
		  /* 821365ECh */ case   35:  		/* mr R9, R22 */
		/* 821365ECh case   35:*/		regs.R9 = regs.R22;
		/* 821365ECh case   35:*/		return 0x821365F0;
		  /* 821365F0h */ case   36:  		/* lwzx R11, <#[R7 + R9]> */
		/* 821365F0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 821365F0h case   36:*/		return 0x821365F4;
		  /* 821365F4h */ case   37:  		/* lwz R10, <#[R11]> */
		/* 821365F4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821365F4h case   37:*/		return 0x821365F8;
		  /* 821365F8h */ case   38:  		/* rlwinm. R10, R10, 0, 3, 3 */
		/* 821365F8h case   38:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R10);
		/* 821365F8h case   38:*/		return 0x821365FC;
		  /* 821365FCh */ case   39:  		/* bc 4, CR0_EQ, 108 */
		/* 821365FCh case   39:*/		if ( !regs.CR[0].eq ) { return 0x82136668;  }
		/* 821365FCh case   39:*/		return 0x82136600;
		  /* 82136600h */ case   40:  		/* lwz R10, <#[R11 + 4]> */
		/* 82136600h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82136600h case   40:*/		return 0x82136604;
		  /* 82136604h */ case   41:  		/* lwz R6, <#[R27 + 16]> */
		/* 82136604h case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000010) );
		/* 82136604h case   41:*/		return 0x82136608;
		  /* 82136608h */ case   42:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136608h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136608h case   42:*/		return 0x8213660C;
		  /* 8213660Ch */ case   43:  		/* lwzx R10, <#[R10 + R6]> */
		/* 8213660Ch case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8213660Ch case   43:*/		return 0x82136610;
		  /* 82136610h */ case   44:  		/* lwz R10, <#[R10 + 4]> */
		/* 82136610h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82136610h case   44:*/		return 0x82136614;
		  /* 82136614h */ case   45:  		/* rlwinm. R6, R10, 0, 22, 22 */
		/* 82136614h case   45:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R6,regs.R10);
		/* 82136614h case   45:*/		return 0x82136618;
		  /* 82136618h */ case   46:  		/* bc 12, CR0_EQ, 80 */
		/* 82136618h case   46:*/		if ( regs.CR[0].eq ) { return 0x82136668;  }
		/* 82136618h case   46:*/		return 0x8213661C;
		  /* 8213661Ch */ case   47:  		/* rlwinm. R10, R10, 0, 23, 24 */
		/* 8213661Ch case   47:*/		cpu::op::rlwinm<1,0,23,24>(regs,&regs.R10,regs.R10);
		/* 8213661Ch case   47:*/		return 0x82136620;
		  /* 82136620h */ case   48:  		/* bc 4, CR0_EQ, 72 */
		/* 82136620h case   48:*/		if ( !regs.CR[0].eq ) { return 0x82136668;  }
		/* 82136620h case   48:*/		return 0x82136624;
		  /* 82136624h */ case   49:  		/* lwz R10, <#[R27 + 56]> */
		/* 82136624h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000038) );
		/* 82136624h case   49:*/		return 0x82136628;
		  /* 82136628h */ case   50:  		/* lwz R6, <#[R11 + 12]> */
		/* 82136628h case   50:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 82136628h case   50:*/		return 0x8213662C;
		  /* 8213662Ch */ case   51:  		/* cmplw CR6, R6, R10 */
		/* 8213662Ch case   51:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 8213662Ch case   51:*/		return 0x82136630;
		  /* 82136630h */ case   52:  		/* bc 12, CR6_GT, 148 */
		/* 82136630h case   52:*/		if ( regs.CR[6].gt ) { return 0x821366C4;  }
		/* 82136630h case   52:*/		return 0x82136634;
		  /* 82136634h */ case   53:  		/* rlwinm R11, R6, 0, 0, 31 */
		/* 82136634h case   53:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R6);
		/* 82136634h case   53:*/		return 0x82136638;
		  /* 82136638h */ case   54:  		/* addi R10, R1, 160 */
		/* 82136638h case   54:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82136638h case   54:*/		return 0x8213663C;
		  /* 8213663Ch */ case   55:  		/* rlwinm R5, R11, 4, 0, 27 */
		/* 8213663Ch case   55:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R5,regs.R11);
		/* 8213663Ch case   55:*/		return 0x82136640;
		  /* 82136640h */ case   56:  		/* addi R6, R1, 164 */
		/* 82136640h case   56:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA4);
		/* 82136640h case   56:*/		return 0x82136644;
		  /* 82136644h */ case   57:  		/* addi R4, R1, 168 */
		/* 82136644h case   57:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA8);
		/* 82136644h case   57:*/		return 0x82136648;
		  /* 82136648h */ case   58:  		/* addi R3, R1, 172 */
		/* 82136648h case   58:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAC);
		/* 82136648h case   58:*/		return 0x8213664C;
		  /* 8213664Ch */ case   59:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213664Ch case   59:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213664Ch case   59:*/		return 0x82136650;
		  /* 82136650h */ case   60:  		/* addi R30, R1, 128 */
		/* 82136650h case   60:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x80);
		/* 82136650h case   60:*/		return 0x82136654;
		  /* 82136654h */ case   61:  		/* stwx R16, <#[R5 + R10]> */
		/* 82136654h case   61:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82136654h case   61:*/		return 0x82136658;
		  /* 82136658h */ case   62:  		/* stwx R16, <#[R5 + R6]> */
		/* 82136658h case   62:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 82136658h case   62:*/		return 0x8213665C;
		  /* 8213665Ch */ case   63:  		/* stwx R16, <#[R5 + R4]> */
		/* 8213665Ch case   63:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 8213665Ch case   63:*/		return 0x82136660;
		  /* 82136660h */ case   64:  		/* stwx R16, <#[R5 + R3]> */
		/* 82136660h case   64:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R5 + regs.R3 + 0x00000000) );
		/* 82136660h case   64:*/		return 0x82136664;
		  /* 82136664h */ case   65:  		/* stwx R16, <#[R11 + R30]> */
		/* 82136664h case   65:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82136664h case   65:*/		return 0x82136668;
	}
	return 0x82136668;
} // Block from 82136560h-82136668h (66 instructions)

//////////////////////////////////////////////////////
// Block at 82136668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136668);
		  /* 82136668h */ case    0:  		/* addi R8, R8, 1 */
		/* 82136668h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82136668h case    0:*/		return 0x8213666C;
		  /* 8213666Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 8213666Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8213666Ch case    1:*/		return 0x82136670;
		  /* 82136670h */ case    2:  		/* cmplw CR6, R8, R31 */
		/* 82136670h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 82136670h case    2:*/		return 0x82136674;
		  /* 82136674h */ case    3:  		/* bc 12, CR6_LT, -132 */
		/* 82136674h case    3:*/		if ( regs.CR[6].lt ) { return 0x821365F0;  }
		/* 82136674h case    3:*/		return 0x82136678;
	}
	return 0x82136678;
} // Block from 82136668h-82136678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136678);
		  /* 82136678h */ case    0:  		/* lwz R7, <#[R27 + 552]> */
		/* 82136678h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000228) );
		/* 82136678h case    0:*/		return 0x8213667C;
		  /* 8213667Ch */ case    1:  		/* mr R17, R22 */
		/* 8213667Ch case    1:*/		regs.R17 = regs.R22;
		/* 8213667Ch case    1:*/		return 0x82136680;
		  /* 82136680h */ case    2:  		/* lwz R11, <#[R27 + 548]> */
		/* 82136680h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000224) );
		/* 82136680h case    2:*/		return 0x82136684;
		  /* 82136684h */ case    3:  		/* add. R10, R11, R7 */
		/* 82136684h case    3:*/		cpu::op::add<1>(regs,&regs.R10,regs.R11,regs.R7);
		/* 82136684h case    3:*/		return 0x82136688;
		  /* 82136688h */ case    4:  		/* bc 12, CR0_EQ, 1332 */
		/* 82136688h case    4:*/		if ( regs.CR[0].eq ) { return 0x82136BBC;  }
		/* 82136688h case    4:*/		return 0x8213668C;
		  /* 8213668Ch */ case    5:  		/* lis R9, -32256 */
		/* 8213668Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8213668Ch case    5:*/		return 0x82136690;
		  /* 82136690h */ case    6:  		/* lis R8, -32256 */
		/* 82136690h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82136690h case    6:*/		return 0x82136694;
		  /* 82136694h */ case    7:  		/* lis R10, -32253 */
		/* 82136694h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82136694h case    7:*/		return 0x82136698;
		  /* 82136698h */ case    8:  		/* mr R14, R22 */
		/* 82136698h case    8:*/		regs.R14 = regs.R22;
		/* 82136698h case    8:*/		return 0x8213669C;
		  /* 8213669Ch */ case    9:  		/* addi R10, R10, 21648 */
		/* 8213669Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x5490);
		/* 8213669Ch case    9:*/		return 0x821366A0;
		  /* 821366A0h */ case   10:  		/* lfs FR30, <#[R9 + 8792]> */
		/* 821366A0h case   10:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R9 + 0x00002258) );
		/* 821366A0h case   10:*/		return 0x821366A4;
		  /* 821366A4h */ case   11:  		/* lis R15, 20480 */
		/* 821366A4h case   11:*/		cpu::op::lis<0>(regs,&regs.R15,0x5000);
		/* 821366A4h case   11:*/		return 0x821366A8;
		  /* 821366A8h */ case   12:  		/* lfs FR31, <#[R8 + 1792]> */
		/* 821366A8h case   12:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R8 + 0x00000700) );
		/* 821366A8h case   12:*/		return 0x821366AC;
		  /* 821366ACh */ case   13:  		/* stw R10, <#[R1 + 88]> */
		/* 821366ACh case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821366ACh case   13:*/		return 0x821366B0;
		  /* 821366B0h */ case   14:  		/* cmplw CR6, R17, R11 */
		/* 821366B0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 821366B0h case   14:*/		return 0x821366B4;
		  /* 821366B4h */ case   15:  		/* bc 4, CR6_LT, 52 */
		/* 821366B4h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821366E8;  }
		/* 821366B4h case   15:*/		return 0x821366B8;
		  /* 821366B8h */ case   16:  		/* lwz R10, <#[R27 + 560]> */
		/* 821366B8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000230) );
		/* 821366B8h case   16:*/		return 0x821366BC;
		  /* 821366BCh */ case   17:  		/* lwzx R26, <#[R10 + R14]> */
		/* 821366BCh case   17:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R14 + 0x00000000) );
		/* 821366BCh case   17:*/		return 0x821366C0;
		  /* 821366C0h */ case   18:  		/* b 56 */
		/* 821366C0h case   18:*/		return 0x821366F8;
		/* 821366C0h case   18:*/		return 0x821366C4;
	}
	return 0x821366C4;
} // Block from 82136678h-821366C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821366C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821366C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821366C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821366C4);
		  /* 821366C4h */ case    0:  		/* lis R11, -32253 */
		/* 821366C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821366C4h case    0:*/		return 0x821366C8;
		  /* 821366C8h */ case    1:  		/* addi R6, R11, 21612 */
		/* 821366C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x546C);
		/* 821366C8h case    1:*/		return 0x821366CC;
		  /* 821366CCh */ case    2:  		/* li R5, 4507 */
		/* 821366CCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x119B);
		/* 821366CCh case    2:*/		return 0x821366D0;
		  /* 821366D0h */ case    3:  		/* li R4, 0 */
		/* 821366D0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821366D0h case    3:*/		return 0x821366D4;
		  /* 821366D4h */ case    4:  		/* mr R3, R27 */
		/* 821366D4h case    4:*/		regs.R3 = regs.R27;
		/* 821366D4h case    4:*/		return 0x821366D8;
		  /* 821366D8h */ case    5:  		/* bl -163752 */
		/* 821366D8h case    5:*/		regs.LR = 0x821366DC; return 0x8210E730;
		/* 821366D8h case    5:*/		return 0x821366DC;
		  /* 821366DCh */ case    6:  		/* lis R3, -32768 */
		/* 821366DCh case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 821366DCh case    6:*/		return 0x821366E0;
		  /* 821366E0h */ case    7:  		/* ori R3, R3, 16389 */
		/* 821366E0h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 821366E0h case    7:*/		return 0x821366E4;
		  /* 821366E4h */ case    8:  		/* b 1312 */
		/* 821366E4h case    8:*/		return 0x82136C04;
		/* 821366E4h case    8:*/		return 0x821366E8;
	}
	return 0x821366E8;
} // Block from 821366C4h-821366E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821366E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821366E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821366E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821366E8);
		  /* 821366E8h */ case    0:  		/* subf R10, R11, R17 */
		/* 821366E8h case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R17);
		/* 821366E8h case    0:*/		return 0x821366EC;
		  /* 821366ECh */ case    1:  		/* lwz R9, <#[R27 + 564]> */
		/* 821366ECh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000234) );
		/* 821366ECh case    1:*/		return 0x821366F0;
		  /* 821366F0h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821366F0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821366F0h case    2:*/		return 0x821366F4;
		  /* 821366F4h */ case    3:  		/* lwzx R26, <#[R10 + R9]> */
		/* 821366F4h case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821366F4h case    3:*/		return 0x821366F8;
	}
	return 0x821366F8;
} // Block from 821366E8h-821366F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821366F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821366F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821366F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821366F8);
		  /* 821366F8h */ case    0:  		/* mr R18, R22 */
		/* 821366F8h case    0:*/		regs.R18 = regs.R22;
		/* 821366F8h case    0:*/		return 0x821366FC;
		  /* 821366FCh */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 821366FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821366FCh case    1:*/		return 0x82136700;
		  /* 82136700h */ case    2:  		/* bc 12, CR6_EQ, 1184 */
		/* 82136700h case    2:*/		if ( regs.CR[6].eq ) { return 0x82136BA0;  }
		/* 82136700h case    2:*/		return 0x82136704;
		  /* 82136704h */ case    3:  		/* lwz R9, <#[R26 + 12]> */
		/* 82136704h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000000C) );
		/* 82136704h case    3:*/		return 0x82136708;
		  /* 82136708h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 82136708h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82136708h case    4:*/		return 0x8213670C;
		  /* 8213670Ch */ case    5:  		/* bc 12, CR6_EQ, 1172 */
		/* 8213670Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82136BA0;  }
		/* 8213670Ch case    5:*/		return 0x82136710;
		  /* 82136710h */ case    6:  		/* lwz R10, <#[R26 + 16]> */
		/* 82136710h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000010) );
		/* 82136710h case    6:*/		return 0x82136714;
		  /* 82136714h */ case    7:  		/* lwz R10, <#[R10]> */
		/* 82136714h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82136714h case    7:*/		return 0x82136718;
		  /* 82136718h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 82136718h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82136718h case    8:*/		return 0x8213671C;
		  /* 8213671Ch */ case    9:  		/* bc 12, CR6_EQ, 1156 */
		/* 8213671Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82136BA0;  }
		/* 8213671Ch case    9:*/		return 0x82136720;
		  /* 82136720h */ case   10:  		/* lwz R5, <#[R26]> */
		/* 82136720h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x00000000) );
		/* 82136720h case   10:*/		return 0x82136724;
		  /* 82136724h */ case   11:  		/* rlwinm. R8, R5, 0, 0, 11 */
		/* 82136724h case   11:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R8,regs.R5);
		/* 82136724h case   11:*/		return 0x82136728;
		  /* 82136728h */ case   12:  		/* bc 12, CR0_EQ, 1144 */
		/* 82136728h case   12:*/		if ( regs.CR[0].eq ) { return 0x82136BA0;  }
		/* 82136728h case   12:*/		return 0x8213672C;
		  /* 8213672Ch */ case   13:  		/* lwz R6, <#[R27 + 20]> */
		/* 8213672Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000014) );
		/* 8213672Ch case   13:*/		return 0x82136730;
		  /* 82136730h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136730h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136730h case   14:*/		return 0x82136734;
		  /* 82136734h */ case   15:  		/* lwzx R10, <#[R10 + R6]> */
		/* 82136734h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82136734h case   15:*/		return 0x82136738;
		  /* 82136738h */ case   16:  		/* lwz R10, <#[R10 + 16]> */
		/* 82136738h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82136738h case   16:*/		return 0x8213673C;
		  /* 8213673Ch */ case   17:  		/* cmplwi CR6, R10, 3 */
		/* 8213673Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213673Ch case   17:*/		return 0x82136740;
		  /* 82136740h */ case   18:  		/* bc 12, CR6_EQ, 176 */
		/* 82136740h case   18:*/		if ( regs.CR[6].eq ) { return 0x821367F0;  }
		/* 82136740h case   18:*/		return 0x82136744;
		  /* 82136744h */ case   19:  		/* cmplwi CR6, R9, 4 */
		/* 82136744h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82136744h case   19:*/		return 0x82136748;
		  /* 82136748h */ case   20:  		/* bc 12, CR6_EQ, 168 */
		/* 82136748h case   20:*/		if ( regs.CR[6].eq ) { return 0x821367F0;  }
		/* 82136748h case   20:*/		return 0x8213674C;
		  /* 8213674Ch */ case   21:  		/* cmplw CR6, R17, R11 */
		/* 8213674Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 8213674Ch case   21:*/		return 0x82136750;
		  /* 82136750h */ case   22:  		/* bc 12, CR6_LT, 160 */
		/* 82136750h case   22:*/		if ( regs.CR[6].lt ) { return 0x821367F0;  }
		/* 82136750h case   22:*/		return 0x82136754;
		  /* 82136754h */ case   23:  		/* subf R10, R11, R17 */
		/* 82136754h case   23:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R17);
		/* 82136754h case   23:*/		return 0x82136758;
		  /* 82136758h */ case   24:  		/* mr R9, R16 */
		/* 82136758h case   24:*/		regs.R9 = regs.R16;
		/* 82136758h case   24:*/		return 0x8213675C;
		  /* 8213675Ch */ case   25:  		/* addi R10, R10, 1 */
		/* 8213675Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213675Ch case   25:*/		return 0x82136760;
		  /* 82136760h */ case   26:  		/* cmplw CR6, R10, R7 */
		/* 82136760h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82136760h case   26:*/		return 0x82136764;
		  /* 82136764h */ case   27:  		/* bc 4, CR6_LT, 68 */
		/* 82136764h case   27:*/		if ( !regs.CR[6].lt ) { return 0x821367A8;  }
		/* 82136764h case   27:*/		return 0x82136768;
		  /* 82136768h */ case   28:  		/* subf R10, R11, R17 */
		/* 82136768h case   28:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R17);
		/* 82136768h case   28:*/		return 0x8213676C;
		  /* 8213676Ch */ case   29:  		/* lwz R8, <#[R27 + 564]> */
		/* 8213676Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000234) );
		/* 8213676Ch case   29:*/		return 0x82136770;
		  /* 82136770h */ case   30:  		/* addi R10, R10, 1 */
		/* 82136770h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82136770h case   30:*/		return 0x82136774;
		  /* 82136774h */ case   31:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136774h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136774h case   31:*/		return 0x82136778;
		  /* 82136778h */ case   32:  		/* lwzx R4, <#[R10 + R8]> */
		/* 82136778h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82136778h case   32:*/		return 0x8213677C;
		  /* 8213677Ch */ case   33:  		/* cmplwi CR6, R4, 0 */
		/* 8213677Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213677Ch case   33:*/		return 0x82136780;
		  /* 82136780h */ case   34:  		/* bc 12, CR6_EQ, 20 */
		/* 82136780h case   34:*/		if ( regs.CR[6].eq ) { return 0x82136794;  }
		/* 82136780h case   34:*/		return 0x82136784;
		  /* 82136784h */ case   35:  		/* rlwinm R10, R4, 0, 0, 31 */
		/* 82136784h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R4);
		/* 82136784h case   35:*/		return 0x82136788;
		  /* 82136788h */ case   36:  		/* lwz R10, <#[R10]> */
		/* 82136788h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82136788h case   36:*/		return 0x8213678C;
		  /* 8213678Ch */ case   37:  		/* rlwinm. R10, R10, 0, 0, 11 */
		/* 8213678Ch case   37:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213678Ch case   37:*/		return 0x82136790;
		  /* 82136790h */ case   38:  		/* bc 4, CR0_EQ, 24 */
		/* 82136790h case   38:*/		if ( !regs.CR[0].eq ) { return 0x821367A8;  }
		/* 82136790h case   38:*/		return 0x82136794;
	}
	return 0x82136794;
} // Block from 821366F8h-82136794h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82136794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136794);
		  /* 82136794h */ case    0:  		/* addi R9, R9, 1 */
		/* 82136794h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82136794h case    0:*/		return 0x82136798;
		  /* 82136798h */ case    1:  		/* subf R10, R11, R9 */
		/* 82136798h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R9);
		/* 82136798h case    1:*/		return 0x8213679C;
		  /* 8213679Ch */ case    2:  		/* add R10, R10, R17 */
		/* 8213679Ch case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R17);
		/* 8213679Ch case    2:*/		return 0x821367A0;
		  /* 821367A0h */ case    3:  		/* cmplw CR6, R10, R7 */
		/* 821367A0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821367A0h case    3:*/		return 0x821367A4;
		  /* 821367A4h */ case    4:  		/* bc 12, CR6_LT, -48 */
		/* 821367A4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82136774;  }
		/* 821367A4h case    4:*/		return 0x821367A8;
	}
	return 0x821367A8;
} // Block from 82136794h-821367A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821367A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821367A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821367A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821367A8);
		  /* 821367A8h */ case    0:  		/* subf R11, R11, R9 */
		/* 821367A8h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821367A8h case    0:*/		return 0x821367AC;
		  /* 821367ACh */ case    1:  		/* add R11, R11, R17 */
		/* 821367ACh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R17);
		/* 821367ACh case    1:*/		return 0x821367B0;
		  /* 821367B0h */ case    2:  		/* cmplw CR6, R11, R7 */
		/* 821367B0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821367B0h case    2:*/		return 0x821367B4;
		  /* 821367B4h */ case    3:  		/* bc 4, CR6_LT, 60 */
		/* 821367B4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821367F0;  }
		/* 821367B4h case    3:*/		return 0x821367B8;
		  /* 821367B8h */ case    4:  		/* lwz R10, <#[R27 + 564]> */
		/* 821367B8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000234) );
		/* 821367B8h case    4:*/		return 0x821367BC;
		  /* 821367BCh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821367BCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821367BCh case    5:*/		return 0x821367C0;
		  /* 821367C0h */ case    6:  		/* lwzx R18, <#[R11 + R10]> */
		/* 821367C0h case    6:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821367C0h case    6:*/		return 0x821367C4;
		  /* 821367C4h */ case    7:  		/* lwz R11, <#[R18 + 12]> */
		/* 821367C4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000000C) );
		/* 821367C4h case    7:*/		return 0x821367C8;
		  /* 821367C8h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 821367C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821367C8h case    8:*/		return 0x821367CC;
		  /* 821367CCh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 821367CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x821367EC;  }
		/* 821367CCh case    9:*/		return 0x821367D0;
		  /* 821367D0h */ case   10:  		/* lwz R11, <#[R18 + 16]> */
		/* 821367D0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000010) );
		/* 821367D0h case   10:*/		return 0x821367D4;
		  /* 821367D4h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821367D4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821367D4h case   11:*/		return 0x821367D8;
		  /* 821367D8h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821367D8h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821367D8h case   12:*/		return 0x821367DC;
		  /* 821367DCh */ case   13:  		/* lwzx R11, <#[R11 + R6]> */
		/* 821367DCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 821367DCh case   13:*/		return 0x821367E0;
		  /* 821367E0h */ case   14:  		/* lwz R11, <#[R11 + 16]> */
		/* 821367E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821367E0h case   14:*/		return 0x821367E4;
		  /* 821367E4h */ case   15:  		/* cmplwi CR6, R11, 3 */
		/* 821367E4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821367E4h case   15:*/		return 0x821367E8;
		  /* 821367E8h */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 821367E8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821367F0;  }
		/* 821367E8h case   16:*/		return 0x821367EC;
	}
	return 0x821367EC;
} // Block from 821367A8h-821367ECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821367ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821367EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821367EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821367EC);
		  /* 821367ECh */ case    0:  		/* mr R18, R22 */
		/* 821367ECh case    0:*/		regs.R18 = regs.R22;
		/* 821367ECh case    0:*/		return 0x821367F0;
	}
	return 0x821367F0;
} // Block from 821367ECh-821367F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821367F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821367F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821367F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821367F0);
		  /* 821367F0h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821367F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821367F0h case    0:*/		return 0x821367F4;
		  /* 821367F4h */ case    1:  		/* rlwinm R25, R5, 0, 12, 31 */
		/* 821367F4h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R25,regs.R5);
		/* 821367F4h case    1:*/		return 0x821367F8;
		  /* 821367F8h */ case    2:  		/* mr R21, R22 */
		/* 821367F8h case    2:*/		regs.R21 = regs.R22;
		/* 821367F8h case    2:*/		return 0x821367FC;
		  /* 821367FCh */ case    3:  		/* divwu. R20, R11, R25 */
		/* 821367FCh case    3:*/		cpu::op::divwu<1>(regs,&regs.R20,regs.R11,regs.R25);
		/* 821367FCh case    3:*/		return 0x82136800;
		  /* 82136800h */ case    4:  		/* twi 6, R25, 0 */
		/* 82136800h case    4:*/		cpu::op::tw<6>(regs, 0x82136800, regs.R25, 0x00000000);
		/* 82136800h case    4:*/		return 0x82136804;
		  /* 82136804h */ case    5:  		/* bc 12, CR0_EQ, 924 */
		/* 82136804h case    5:*/		if ( regs.CR[0].eq ) { return 0x82136BA0;  }
		/* 82136804h case    5:*/		return 0x82136808;
		  /* 82136808h */ case    6:  		/* mr R24, R22 */
		/* 82136808h case    6:*/		regs.R24 = regs.R22;
		/* 82136808h case    6:*/		return 0x8213680C;
		  /* 8213680Ch */ case    7:  		/* mr R23, R22 */
		/* 8213680Ch case    7:*/		regs.R23 = regs.R22;
		/* 8213680Ch case    7:*/		return 0x82136810;
		  /* 82136810h */ case    8:  		/* rlwinm R19, R25, 2, 0, 29 */
		/* 82136810h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R19,regs.R25);
		/* 82136810h case    8:*/		return 0x82136814;
		  /* 82136814h */ case    9:  		/* lwz R8, <#[R26 + 8]> */
		/* 82136814h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000008) );
		/* 82136814h case    9:*/		return 0x82136818;
		  /* 82136818h */ case   10:  		/* addi R10, R1, 96 */
		/* 82136818h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82136818h case   10:*/		return 0x8213681C;
		  /* 8213681Ch */ case   11:  		/* lwz R7, <#[R27 + 20]> */
		/* 8213681Ch case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 8213681Ch case   11:*/		return 0x82136820;
		  /* 82136820h */ case   12:  		/* lwz R4, <#[R27 + 16]> */
		/* 82136820h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000010) );
		/* 82136820h case   12:*/		return 0x82136824;
		  /* 82136824h */ case   13:  		/* lwzx R11, <#[R23 + R8]> */
		/* 82136824h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R8 + 0x00000000) );
		/* 82136824h case   13:*/		return 0x82136828;
		  /* 82136828h */ case   14:  		/* std R22, <#[R10]> */
		/* 82136828h case   14:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000000) );
		/* 82136828h case   14:*/		return 0x8213682C;
		  /* 8213682Ch */ case   15:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 8213682Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 8213682Ch case   15:*/		return 0x82136830;
		  /* 82136830h */ case   16:  		/* std R22, <#[R10 + 8]> */
		/* 82136830h case   16:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 82136830h case   16:*/		return 0x82136834;
		  /* 82136834h */ case   17:  		/* lwzx R10, <#[R9 + R7]> */
		/* 82136834h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82136834h case   17:*/		return 0x82136838;
		  /* 82136838h */ case   18:  		/* lwz R10, <#[R10 + 4]> */
		/* 82136838h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82136838h case   18:*/		return 0x8213683C;
		  /* 8213683Ch */ case   19:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213683Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213683Ch case   19:*/		return 0x82136840;
		  /* 82136840h */ case   20:  		/* lwzx R10, <#[R10 + R4]> */
		/* 82136840h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82136840h case   20:*/		return 0x82136844;
		  /* 82136844h */ case   21:  		/* lwz R10, <#[R10 + 4]> */
		/* 82136844h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82136844h case   21:*/		return 0x82136848;
		  /* 82136848h */ case   22:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 82136848h case   22:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 82136848h case   22:*/		return 0x8213684C;
		  /* 8213684Ch */ case   23:  		/* bc 12, CR0_EQ, 828 */
		/* 8213684Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x82136B88;  }
		/* 8213684Ch case   23:*/		return 0x82136850;
		  /* 82136850h */ case   24:  		/* lwz R10, <#[R1 + 80]> */
		/* 82136850h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82136850h case   24:*/		return 0x82136854;
		  /* 82136854h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 82136854h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82136854h case   25:*/		return 0x82136858;
		  /* 82136858h */ case   26:  		/* bc 4, CR6_LT, 816 */
		/* 82136858h case   26:*/		if ( !regs.CR[6].lt ) { return 0x82136B88;  }
		/* 82136858h case   26:*/		return 0x8213685C;
		  /* 8213685Ch */ case   27:  		/* mr R10, R22 */
		/* 8213685Ch case   27:*/		regs.R10 = regs.R22;
		/* 8213685Ch case   27:*/		return 0x82136860;
		  /* 82136860h */ case   28:  		/* cmplwi CR6, R25, 0 */
		/* 82136860h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82136860h case   28:*/		return 0x82136864;
		  /* 82136864h */ case   29:  		/* bc 12, CR6_EQ, 116 */
		/* 82136864h case   29:*/		if ( regs.CR[6].eq ) { return 0x821368D8;  }
		/* 82136864h case   29:*/		return 0x82136868;
		  /* 82136868h */ case   30:  		/* lwz R9, <#[R26]> */
		/* 82136868h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 82136868h case   30:*/		return 0x8213686C;
		  /* 8213686Ch */ case   31:  		/* mr R11, R22 */
		/* 8213686Ch case   31:*/		regs.R11 = regs.R22;
		/* 8213686Ch case   31:*/		return 0x82136870;
		  /* 82136870h */ case   32:  		/* mtspr CTR, R25 */
		/* 82136870h case   32:*/		regs.CTR = regs.R25;
		/* 82136870h case   32:*/		return 0x82136874;
		  /* 82136874h */ case   33:  		/* rlwinm R6, R9, 0, 0, 11 */
		/* 82136874h case   33:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R9);
		/* 82136874h case   33:*/		return 0x82136878;
		  /* 82136878h */ case   34:  		/* cmplw CR6, R6, R15 */
		/* 82136878h case   34:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R15);
		/* 82136878h case   34:*/		return 0x8213687C;
		  /* 8213687Ch */ case   35:  		/* bc 4, CR6_EQ, 12 */
		/* 8213687Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x82136888;  }
		/* 8213687Ch case   35:*/		return 0x82136880;
		  /* 82136880h */ case   36:  		/* mr R9, R10 */
		/* 82136880h case   36:*/		regs.R9 = regs.R10;
		/* 82136880h case   36:*/		return 0x82136884;
		  /* 82136884h */ case   37:  		/* b 24 */
		/* 82136884h case   37:*/		return 0x8213689C;
		/* 82136884h case   37:*/		return 0x82136888;
	}
	return 0x82136888;
} // Block from 821367F0h-82136888h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82136888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136888);
		  /* 82136888h */ case    0:  		/* lwz R9, <#[R26 + 16]> */
		/* 82136888h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000010) );
		/* 82136888h case    0:*/		return 0x8213688C;
		  /* 8213688Ch */ case    1:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8213688Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213688Ch case    1:*/		return 0x82136890;
		  /* 82136890h */ case    2:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82136890h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82136890h case    2:*/		return 0x82136894;
		  /* 82136894h */ case    3:  		/* lwzx R9, <#[R9 + R7]> */
		/* 82136894h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82136894h case    3:*/		return 0x82136898;
		  /* 82136898h */ case    4:  		/* lwz R9, <#[R9 + 16]> */
		/* 82136898h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82136898h case    4:*/		return 0x8213689C;
	}
	return 0x8213689C;
} // Block from 82136888h-8213689Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213689Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213689C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213689C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213689C);
		  /* 8213689Ch */ case    0:  		/* add R5, R24, R10 */
		/* 8213689Ch case    0:*/		cpu::op::add<0>(regs,&regs.R5,regs.R24,regs.R10);
		/* 8213689Ch case    0:*/		return 0x821368A0;
		  /* 821368A0h */ case    1:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821368A0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821368A0h case    1:*/		return 0x821368A4;
		  /* 821368A4h */ case    2:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 821368A4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 821368A4h case    2:*/		return 0x821368A8;
		  /* 821368A8h */ case    3:  		/* addi R3, R1, 112 */
		/* 821368A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821368A8h case    3:*/		return 0x821368AC;
		  /* 821368ACh */ case    4:  		/* addi R31, R1, 96 */
		/* 821368ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x60);
		/* 821368ACh case    4:*/		return 0x821368B0;
		  /* 821368B0h */ case    5:  		/* addi R10, R10, 1 */
		/* 821368B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821368B0h case    5:*/		return 0x821368B4;
		  /* 821368B4h */ case    6:  		/* addi R11, R11, 4 */
		/* 821368B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821368B4h case    6:*/		return 0x821368B8;
		  /* 821368B8h */ case    7:  		/* lwzx R5, <#[R5 + R8]> */
		/* 821368B8h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R8 + 0x00000000) );
		/* 821368B8h case    7:*/		return 0x821368BC;
		  /* 821368BCh */ case    8:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 821368BCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 821368BCh case    8:*/		return 0x821368C0;
		  /* 821368C0h */ case    9:  		/* stwx R16, <#[R9 + R31]> */
		/* 821368C0h case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 821368C0h case    9:*/		return 0x821368C4;
		  /* 821368C4h */ case   10:  		/* lwzx R5, <#[R5 + R7]> */
		/* 821368C4h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 821368C4h case   10:*/		return 0x821368C8;
		  /* 821368C8h */ case   11:  		/* lfd FR0, <#[R5 + 32]> */
		/* 821368C8h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000020) );
		/* 821368C8h case   11:*/		return 0x821368CC;
		  /* 821368CCh */ case   12:  		/* frsp FR0, FR0 */
		/* 821368CCh case   12:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 821368CCh case   12:*/		return 0x821368D0;
		  /* 821368D0h */ case   13:  		/* stfsx FR0, <#[R9 + R3]> */
		/* 821368D0h case   13:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 821368D0h case   13:*/		return 0x821368D4;
		  /* 821368D4h */ case   14:  		/* bc 16, CR0_LT, -92 */
		/* 821368D4h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82136878;  }
		/* 821368D4h case   14:*/		return 0x821368D8;
	}
	return 0x821368D8;
} // Block from 8213689Ch-821368D8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821368D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821368D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821368D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821368D8);
		  /* 821368D8h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 821368D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821368D8h case    0:*/		return 0x821368DC;
		  /* 821368DCh */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 821368DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82136948;  }
		/* 821368DCh case    1:*/		return 0x821368E0;
		  /* 821368E0h */ case    2:  		/* lwz R5, <#[R18 + 4]> */
		/* 821368E0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R18 + 0x00000004) );
		/* 821368E0h case    2:*/		return 0x821368E4;
		  /* 821368E4h */ case    3:  		/* mr R6, R22 */
		/* 821368E4h case    3:*/		regs.R6 = regs.R22;
		/* 821368E4h case    3:*/		return 0x821368E8;
		  /* 821368E8h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 821368E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821368E8h case    4:*/		return 0x821368EC;
		  /* 821368ECh */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 821368ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x82136948;  }
		/* 821368ECh case    5:*/		return 0x821368F0;
		  /* 821368F0h */ case    6:  		/* lwz R8, <#[R18 + 8]> */
		/* 821368F0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x00000008) );
		/* 821368F0h case    6:*/		return 0x821368F4;
		  /* 821368F4h */ case    7:  		/* mr R10, R22 */
		/* 821368F4h case    7:*/		regs.R10 = regs.R22;
		/* 821368F4h case    7:*/		return 0x821368F8;
		  /* 821368F8h */ case    8:  		/* lwzx R11, <#[R10 + R8]> */
		/* 821368F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821368F8h case    8:*/		return 0x821368FC;
		  /* 821368FCh */ case    9:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 821368FCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821368FCh case    9:*/		return 0x82136900;
		  /* 82136900h */ case   10:  		/* lwzx R9, <#[R9 + R7]> */
		/* 82136900h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82136900h case   10:*/		return 0x82136904;
		  /* 82136904h */ case   11:  		/* lwz R3, <#[R9 + 4]> */
		/* 82136904h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x00000004) );
		/* 82136904h case   11:*/		return 0x82136908;
		  /* 82136908h */ case   12:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82136908h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82136908h case   12:*/		return 0x8213690C;
		  /* 8213690Ch */ case   13:  		/* lwzx R3, <#[R3 + R4]> */
		/* 8213690Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R4 + 0x00000000) );
		/* 8213690Ch case   13:*/		return 0x82136910;
		  /* 82136910h */ case   14:  		/* lwz R3, <#[R3 + 4]> */
		/* 82136910h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82136910h case   14:*/		return 0x82136914;
		  /* 82136914h */ case   15:  		/* rlwinm. R3, R3, 0, 23, 23 */
		/* 82136914h case   15:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R3,regs.R3);
		/* 82136914h case   15:*/		return 0x82136918;
		  /* 82136918h */ case   16:  		/* bc 12, CR0_EQ, 32 */
		/* 82136918h case   16:*/		if ( regs.CR[0].eq ) { return 0x82136938;  }
		/* 82136918h case   16:*/		return 0x8213691C;
		  /* 8213691Ch */ case   17:  		/* lwz R3, <#[R1 + 80]> */
		/* 8213691Ch case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8213691Ch case   17:*/		return 0x82136920;
		  /* 82136920h */ case   18:  		/* cmplw CR6, R11, R3 */
		/* 82136920h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 82136920h case   18:*/		return 0x82136924;
		  /* 82136924h */ case   19:  		/* bc 4, CR6_LT, 20 */
		/* 82136924h case   19:*/		if ( !regs.CR[6].lt ) { return 0x82136938;  }
		/* 82136924h case   19:*/		return 0x82136928;
		  /* 82136928h */ case   20:  		/* lfd FR0, <#[R9 + 32]> */
		/* 82136928h case   20:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000020) );
		/* 82136928h case   20:*/		return 0x8213692C;
		  /* 8213692Ch */ case   21:  		/* stw R16, <#[R1 + 108]> */
		/* 8213692Ch case   21:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000006C) );
		/* 8213692Ch case   21:*/		return 0x82136930;
		  /* 82136930h */ case   22:  		/* frsp FR0, FR0 */
		/* 82136930h case   22:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 82136930h case   22:*/		return 0x82136934;
		  /* 82136934h */ case   23:  		/* stfs FR0, <#[R1 + 124]> */
		/* 82136934h case   23:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000007C) );
		/* 82136934h case   23:*/		return 0x82136938;
	}
	return 0x82136938;
} // Block from 821368D8h-82136938h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82136938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136938);
		  /* 82136938h */ case    0:  		/* addi R6, R6, 1 */
		/* 82136938h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82136938h case    0:*/		return 0x8213693C;
		  /* 8213693Ch */ case    1:  		/* addi R10, R10, 4 */
		/* 8213693Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213693Ch case    1:*/		return 0x82136940;
		  /* 82136940h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 82136940h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 82136940h case    2:*/		return 0x82136944;
		  /* 82136944h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 82136944h case    3:*/		if ( regs.CR[6].lt ) { return 0x821368F8;  }
		/* 82136944h case    3:*/		return 0x82136948;
	}
	return 0x82136948;
} // Block from 82136938h-82136948h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136948);
		  /* 82136948h */ case    0:  		/* mr R28, R22 */
		/* 82136948h case    0:*/		regs.R28 = regs.R22;
		/* 82136948h case    0:*/		return 0x8213694C;
		  /* 8213694Ch */ case    1:  		/* mr R7, R22 */
		/* 8213694Ch case    1:*/		regs.R7 = regs.R22;
		/* 8213694Ch case    1:*/		return 0x82136950;
		  /* 82136950h */ case    2:  		/* addi R11, R1, 128 */
		/* 82136950h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82136950h case    2:*/		return 0x82136954;
		  /* 82136954h */ case    3:  		/* lwzx R11, <#[R7 + R11]> */
		/* 82136954h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82136954h case    3:*/		return 0x82136958;
		  /* 82136958h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82136958h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82136958h case    4:*/		return 0x8213695C;
		  /* 8213695Ch */ case    5:  		/* bc 4, CR6_EQ, 112 */
		/* 8213695Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821369CC;  }
		/* 8213695Ch case    5:*/		return 0x82136960;
		  /* 82136960h */ case    6:  		/* li R10, 4 */
		/* 82136960h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82136960h case    6:*/		return 0x82136964;
		  /* 82136964h */ case    7:  		/* mr R8, R16 */
		/* 82136964h case    7:*/		regs.R8 = regs.R16;
		/* 82136964h case    7:*/		return 0x82136968;
		  /* 82136968h */ case    8:  		/* mr R9, R22 */
		/* 82136968h case    8:*/		regs.R9 = regs.R22;
		/* 82136968h case    8:*/		return 0x8213696C;
		  /* 8213696Ch */ case    9:  		/* mr R11, R22 */
		/* 8213696Ch case    9:*/		regs.R11 = regs.R22;
		/* 8213696Ch case    9:*/		return 0x82136970;
		  /* 82136970h */ case   10:  		/* mtspr CTR, R10 */
		/* 82136970h case   10:*/		regs.CTR = regs.R10;
		/* 82136970h case   10:*/		return 0x82136974;
		  /* 82136974h */ case   11:  		/* addi R10, R1, 96 */
		/* 82136974h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82136974h case   11:*/		return 0x82136978;
		  /* 82136978h */ case   12:  		/* lwzx R10, <#[R11 + R10]> */
		/* 82136978h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82136978h case   12:*/		return 0x8213697C;
		  /* 8213697Ch */ case   13:  		/* cmpwi CR6, R10, 0 */
		/* 8213697Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8213697Ch case   13:*/		return 0x82136980;
		  /* 82136980h */ case   14:  		/* bc 12, CR6_EQ, 56 */
		/* 82136980h case   14:*/		if ( regs.CR[6].eq ) { return 0x821369B8;  }
		/* 82136980h case   14:*/		return 0x82136984;
		  /* 82136984h */ case   15:  		/* add R10, R7, R9 */
		/* 82136984h case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R9);
		/* 82136984h case   15:*/		return 0x82136988;
		  /* 82136988h */ case   16:  		/* addi R6, R1, 112 */
		/* 82136988h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82136988h case   16:*/		return 0x8213698C;
		  /* 8213698Ch */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213698Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213698Ch case   17:*/		return 0x82136990;
		  /* 82136990h */ case   18:  		/* addi R5, R1, 288 */
		/* 82136990h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82136990h case   18:*/		return 0x82136994;
		  /* 82136994h */ case   19:  		/* lfsx FR0, <#[R11 + R6]> */
		/* 82136994h case   19:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82136994h case   19:*/		return 0x82136998;
		  /* 82136998h */ case   20:  		/* lfsx FR13, <#[R10 + R5]> */
		/* 82136998h case   20:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 82136998h case   20:*/		return 0x8213699C;
		  /* 8213699Ch */ case   21:  		/* fcmpu CR6, FR0, FR13 */
		/* 8213699Ch case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8213699Ch case   21:*/		return 0x821369A0;
		  /* 821369A0h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 821369A0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821369B8;  }
		/* 821369A0h case   22:*/		return 0x821369A4;
		  /* 821369A4h */ case   23:  		/* addi R6, R1, 160 */
		/* 821369A4h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821369A4h case   23:*/		return 0x821369A8;
	}
	return 0x821369A8;
} // Block from 82136948h-821369A8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821369A8h
// Function '?ViolatesPhaseLinkage@CPSLegacyProgram@D3DXShader@@IAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821369A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821369A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821369A8);
		  /* 821369A8h */ case    0:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821369A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821369A8h case    0:*/		return 0x821369AC;
		  /* 821369ACh */ case    1:  		/* addic R10, R10, -1 */
		/* 821369ACh case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821369ACh case    1:*/		return 0x821369B0;
		  /* 821369B0h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821369B0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821369B0h case    2:*/		return 0x821369B4;
		  /* 821369B4h */ case    3:  		/* and R8, R10, R8 */
		/* 821369B4h case    3:*/		cpu::op::and<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821369B4h case    3:*/		return 0x821369B8;
	}
	return 0x821369B8;
} // Block from 821369A8h-821369B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821369B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821369B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821369B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821369B8);
		  /* 821369B8h */ case    0:  		/* addi R9, R9, 1 */
		/* 821369B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821369B8h case    0:*/		return 0x821369BC;
		  /* 821369BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 821369BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821369BCh case    1:*/		return 0x821369C0;
		  /* 821369C0h */ case    2:  		/* bc 16, CR0_LT, -76 */
		/* 821369C0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82136974;  }
		/* 821369C0h case    2:*/		return 0x821369C4;
		  /* 821369C4h */ case    3:  		/* cmpwi CR6, R8, 0 */
		/* 821369C4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 821369C4h case    3:*/		return 0x821369C8;
		  /* 821369C8h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 821369C8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821369DC;  }
		/* 821369C8h case    4:*/		return 0x821369CC;
	}
	return 0x821369CC;
} // Block from 821369B8h-821369CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821369CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821369CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821369CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821369CC);
		  /* 821369CCh */ case    0:  		/* addi R7, R7, 4 */
		/* 821369CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821369CCh case    0:*/		return 0x821369D0;
		  /* 821369D0h */ case    1:  		/* addi R28, R28, 1 */
		/* 821369D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821369D0h case    1:*/		return 0x821369D4;
		  /* 821369D4h */ case    2:  		/* cmplwi CR6, R7, 32 */
		/* 821369D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000020);
		/* 821369D4h case    2:*/		return 0x821369D8;
		  /* 821369D8h */ case    3:  		/* bc 12, CR6_LT, -136 */
		/* 821369D8h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136950;  }
		/* 821369D8h case    3:*/		return 0x821369DC;
	}
	return 0x821369DC;
} // Block from 821369CCh-821369DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821369DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821369DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821369DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821369DC);
		  /* 821369DCh */ case    0:  		/* cmplwi CR6, R28, 8 */
		/* 821369DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000008);
		/* 821369DCh case    0:*/		return 0x821369E0;
		  /* 821369E0h */ case    1:  		/* bc 12, CR6_EQ, 564 */
		/* 821369E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82136C14;  }
		/* 821369E0h case    1:*/		return 0x821369E4;
		  /* 821369E4h */ case    2:  		/* li R9, 4 */
		/* 821369E4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 821369E4h case    2:*/		return 0x821369E8;
		  /* 821369E8h */ case    3:  		/* mr R8, R22 */
		/* 821369E8h case    3:*/		regs.R8 = regs.R22;
		/* 821369E8h case    3:*/		return 0x821369EC;
		  /* 821369ECh */ case    4:  		/* mr R10, R22 */
		/* 821369ECh case    4:*/		regs.R10 = regs.R22;
		/* 821369ECh case    4:*/		return 0x821369F0;
		  /* 821369F0h */ case    5:  		/* mr R11, R22 */
		/* 821369F0h case    5:*/		regs.R11 = regs.R22;
		/* 821369F0h case    5:*/		return 0x821369F4;
		  /* 821369F4h */ case    6:  		/* mtspr CTR, R9 */
		/* 821369F4h case    6:*/		regs.CTR = regs.R9;
		/* 821369F4h case    6:*/		return 0x821369F8;
		  /* 821369F8h */ case    7:  		/* addi R9, R1, 96 */
		/* 821369F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 821369F8h case    7:*/		return 0x821369FC;
		  /* 821369FCh */ case    8:  		/* lwzx R9, <#[R11 + R9]> */
		/* 821369FCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821369FCh case    8:*/		return 0x82136A00;
		  /* 82136A00h */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 82136A00h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82136A00h case    9:*/		return 0x82136A04;
		  /* 82136A04h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 82136A04h case   10:*/		if ( regs.CR[6].eq ) { return 0x82136A40;  }
		/* 82136A04h case   10:*/		return 0x82136A08;
		  /* 82136A08h */ case   11:  		/* rlwinm R9, R28, 2, 0, 29 */
		/* 82136A08h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R28);
		/* 82136A08h case   11:*/		return 0x82136A0C;
		  /* 82136A0Ch */ case   12:  		/* addi R7, R1, 112 */
		/* 82136A0Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82136A0Ch case   12:*/		return 0x82136A10;
		  /* 82136A10h */ case   13:  		/* add R9, R9, R10 */
		/* 82136A10h case   13:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82136A10h case   13:*/		return 0x82136A14;
		  /* 82136A14h */ case   14:  		/* addi R6, R1, 160 */
		/* 82136A14h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 82136A14h case   14:*/		return 0x82136A18;
		  /* 82136A18h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82136A18h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82136A18h case   15:*/		return 0x82136A1C;
		  /* 82136A1Ch */ case   16:  		/* addi R5, R1, 288 */
		/* 82136A1Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 82136A1Ch case   16:*/		return 0x82136A20;
		  /* 82136A20h */ case   17:  		/* lfsx FR0, <#[R11 + R7]> */
		/* 82136A20h case   17:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82136A20h case   17:*/		return 0x82136A24;
		  /* 82136A24h */ case   18:  		/* fcmpu CR6, FR0, FR31 */
		/* 82136A24h case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 82136A24h case   18:*/		return 0x82136A28;
		  /* 82136A28h */ case   19:  		/* stwx R16, <#[R9 + R6]> */
		/* 82136A28h case   19:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 82136A28h case   19:*/		return 0x82136A2C;
		  /* 82136A2Ch */ case   20:  		/* stfsx FR0, <#[R9 + R5]> */
		/* 82136A2Ch case   20:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 82136A2Ch case   20:*/		return 0x82136A30;
		  /* 82136A30h */ case   21:  		/* bc 12, CR6_GT, 12 */
		/* 82136A30h case   21:*/		if ( regs.CR[6].gt ) { return 0x82136A3C;  }
		/* 82136A30h case   21:*/		return 0x82136A34;
		  /* 82136A34h */ case   22:  		/* fcmpu CR6, FR0, FR30 */
		/* 82136A34h case   22:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 82136A34h case   22:*/		return 0x82136A38;
		  /* 82136A38h */ case   23:  		/* bc 4, CR6_LT, 8 */
		/* 82136A38h case   23:*/		if ( !regs.CR[6].lt ) { return 0x82136A40;  }
		/* 82136A38h case   23:*/		return 0x82136A3C;
	}
	return 0x82136A3C;
} // Block from 821369DCh-82136A3Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 82136A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136A3C);
		  /* 82136A3Ch */ case    0:  		/* mr R8, R16 */
		/* 82136A3Ch case    0:*/		regs.R8 = regs.R16;
		/* 82136A3Ch case    0:*/		return 0x82136A40;
	}
	return 0x82136A40;
} // Block from 82136A3Ch-82136A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82136A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136A40);
		  /* 82136A40h */ case    0:  		/* addi R10, R10, 1 */
		/* 82136A40h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82136A40h case    0:*/		return 0x82136A44;
		  /* 82136A44h */ case    1:  		/* addi R11, R11, 4 */
		/* 82136A44h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82136A44h case    1:*/		return 0x82136A48;
		  /* 82136A48h */ case    2:  		/* bc 16, CR0_LT, -80 */
		/* 82136A48h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821369F8;  }
		/* 82136A48h case    2:*/		return 0x82136A4C;
		  /* 82136A4Ch */ case    3:  		/* cmpwi CR6, R8, 0 */
		/* 82136A4Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82136A4Ch case    3:*/		return 0x82136A50;
		  /* 82136A50h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82136A50h case    4:*/		if ( regs.CR[6].eq ) { return 0x82136A68;  }
		/* 82136A50h case    4:*/		return 0x82136A54;
		  /* 82136A54h */ case    5:  		/* li R5, 4704 */
		/* 82136A54h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1260);
		/* 82136A54h case    5:*/		return 0x82136A58;
		  /* 82136A58h */ case    6:  		/* lwz R6, <#[R1 + 88]> */
		/* 82136A58h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 82136A58h case    6:*/		return 0x82136A5C;
		  /* 82136A5Ch */ case    7:  		/* mr R3, R27 */
		/* 82136A5Ch case    7:*/		regs.R3 = regs.R27;
		/* 82136A5Ch case    7:*/		return 0x82136A60;
		  /* 82136A60h */ case    8:  		/* lwz R4, <#[R26 + 60]> */
		/* 82136A60h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000003C) );
		/* 82136A60h case    8:*/		return 0x82136A64;
		  /* 82136A64h */ case    9:  		/* bl -164468 */
		/* 82136A64h case    9:*/		regs.LR = 0x82136A68; return 0x8210E7F0;
		/* 82136A64h case    9:*/		return 0x82136A68;
	}
	return 0x82136A68;
} // Block from 82136A40h-82136A68h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82136A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136A68);
		  /* 82136A68h */ case    0:  		/* mr R31, R22 */
		/* 82136A68h case    0:*/		regs.R31 = regs.R22;
		/* 82136A68h case    0:*/		return 0x82136A6C;
		  /* 82136A6Ch */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 82136A6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82136A6Ch case    1:*/		return 0x82136A70;
		  /* 82136A70h */ case    2:  		/* bc 12, CR6_EQ, 140 */
		/* 82136A70h case    2:*/		if ( regs.CR[6].eq ) { return 0x82136AFC;  }
		/* 82136A70h case    2:*/		return 0x82136A74;
		  /* 82136A74h */ case    3:  		/* mr R30, R22 */
		/* 82136A74h case    3:*/		regs.R30 = regs.R22;
		/* 82136A74h case    3:*/		return 0x82136A78;
		  /* 82136A78h */ case    4:  		/* add R10, R24, R31 */
		/* 82136A78h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R24,regs.R31);
		/* 82136A78h case    4:*/		return 0x82136A7C;
		  /* 82136A7Ch */ case    5:  		/* lwz R9, <#[R26 + 8]> */
		/* 82136A7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000008) );
		/* 82136A7Ch case    5:*/		return 0x82136A80;
		  /* 82136A80h */ case    6:  		/* lwz R11, <#[R27 + 20]> */
		/* 82136A80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82136A80h case    6:*/		return 0x82136A84;
		  /* 82136A84h */ case    7:  		/* mr R5, R28 */
		/* 82136A84h case    7:*/		regs.R5 = regs.R28;
		/* 82136A84h case    7:*/		return 0x82136A88;
		  /* 82136A88h */ case    8:  		/* rlwinm R29, R10, 2, 0, 29 */
		/* 82136A88h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R10);
		/* 82136A88h case    8:*/		return 0x82136A8C;
		  /* 82136A8Ch */ case    9:  		/* lwz R10, <#[R26]> */
		/* 82136A8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82136A8Ch case    9:*/		return 0x82136A90;
		  /* 82136A90h */ case   10:  		/* lwz R4, <#[R1 + 84]> */
		/* 82136A90h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82136A90h case   10:*/		return 0x82136A94;
		  /* 82136A94h */ case   11:  		/* mr R3, R27 */
		/* 82136A94h case   11:*/		regs.R3 = regs.R27;
		/* 82136A94h case   11:*/		return 0x82136A98;
		  /* 82136A98h */ case   12:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 82136A98h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 82136A98h case   12:*/		return 0x82136A9C;
		  /* 82136A9Ch */ case   13:  		/* cmplw CR6, R10, R15 */
		/* 82136A9Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R15);
		/* 82136A9Ch case   13:*/		return 0x82136AA0;
		  /* 82136AA0h */ case   14:  		/* lwzx R10, <#[R29 + R9]> */
		/* 82136AA0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 82136AA0h case   14:*/		return 0x82136AA4;
		  /* 82136AA4h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136AA4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136AA4h case   15:*/		return 0x82136AA8;
		  /* 82136AA8h */ case   16:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82136AA8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82136AA8h case   16:*/		return 0x82136AAC;
		  /* 82136AACh */ case   17:  		/* lfd FR1, <#[R10 + 32]> */
		/* 82136AACh case   17:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00000020) );
		/* 82136AACh case   17:*/		return 0x82136AB0;
		  /* 82136AB0h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 82136AB0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82136ABC;  }
		/* 82136AB0h case   18:*/		return 0x82136AB4;
		  /* 82136AB4h */ case   19:  		/* mr R6, R31 */
		/* 82136AB4h case   19:*/		regs.R6 = regs.R31;
		/* 82136AB4h case   19:*/		return 0x82136AB8;
		  /* 82136AB8h */ case   20:  		/* b 24 */
		/* 82136AB8h case   20:*/		return 0x82136AD0;
		/* 82136AB8h case   20:*/		return 0x82136ABC;
	}
	return 0x82136ABC;
} // Block from 82136A68h-82136ABCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 82136ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136ABC);
		  /* 82136ABCh */ case    0:  		/* lwz R9, <#[R26 + 16]> */
		/* 82136ABCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000010) );
		/* 82136ABCh case    0:*/		return 0x82136AC0;
		  /* 82136AC0h */ case    1:  		/* lwzx R10, <#[R30 + R9]> */
		/* 82136AC0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82136AC0h case    1:*/		return 0x82136AC4;
		  /* 82136AC4h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136AC4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136AC4h case    2:*/		return 0x82136AC8;
		  /* 82136AC8h */ case    3:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82136AC8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82136AC8h case    3:*/		return 0x82136ACC;
		  /* 82136ACCh */ case    4:  		/* lwz R6, <#[R11 + 16]> */
		/* 82136ACCh case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 82136ACCh case    4:*/		return 0x82136AD0;
	}
	return 0x82136AD0;
} // Block from 82136ABCh-82136AD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136AD0);
		  /* 82136AD0h */ case    0:  		/* bl -235688 */
		/* 82136AD0h case    0:*/		regs.LR = 0x82136AD4; return 0x820FD228;
		/* 82136AD0h case    0:*/		return 0x82136AD4;
		  /* 82136AD4h */ case    1:  		/* lwz R11, <#[R27 + 20]> */
		/* 82136AD4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82136AD4h case    1:*/		return 0x82136AD8;
		  /* 82136AD8h */ case    2:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82136AD8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82136AD8h case    2:*/		return 0x82136ADC;
		  /* 82136ADCh */ case    3:  		/* addi R31, R31, 1 */
		/* 82136ADCh case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82136ADCh case    3:*/		return 0x82136AE0;
		  /* 82136AE0h */ case    4:  		/* addi R30, R30, 4 */
		/* 82136AE0h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82136AE0h case    4:*/		return 0x82136AE4;
		  /* 82136AE4h */ case    5:  		/* cmplw CR6, R31, R25 */
		/* 82136AE4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 82136AE4h case    5:*/		return 0x82136AE8;
		  /* 82136AE8h */ case    6:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82136AE8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82136AE8h case    6:*/		return 0x82136AEC;
		  /* 82136AECh */ case    7:  		/* stw R22, <#[R11 + 60]> */
		/* 82136AECh case    7:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x0000003C) );
		/* 82136AECh case    7:*/		return 0x82136AF0;
		  /* 82136AF0h */ case    8:  		/* lwz R11, <#[R26 + 8]> */
		/* 82136AF0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82136AF0h case    8:*/		return 0x82136AF4;
		  /* 82136AF4h */ case    9:  		/* stwx R3, <#[R29 + R11]> */
		/* 82136AF4h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82136AF4h case    9:*/		return 0x82136AF8;
		  /* 82136AF8h */ case   10:  		/* bc 12, CR6_LT, -128 */
		/* 82136AF8h case   10:*/		if ( regs.CR[6].lt ) { return 0x82136A78;  }
		/* 82136AF8h case   10:*/		return 0x82136AFC;
	}
	return 0x82136AFC;
} // Block from 82136AD0h-82136AFCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82136AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136AFC);
		  /* 82136AFCh */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 82136AFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 82136AFCh case    0:*/		return 0x82136B00;
		  /* 82136B00h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 82136B00h case    1:*/		if ( regs.CR[6].eq ) { return 0x82136B88;  }
		/* 82136B00h case    1:*/		return 0x82136B04;
		  /* 82136B04h */ case    2:  		/* lwz R11, <#[R18 + 4]> */
		/* 82136B04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 82136B04h case    2:*/		return 0x82136B08;
		  /* 82136B08h */ case    3:  		/* mr R30, R22 */
		/* 82136B08h case    3:*/		regs.R30 = regs.R22;
		/* 82136B08h case    3:*/		return 0x82136B0C;
		  /* 82136B0Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82136B0Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136B0Ch case    4:*/		return 0x82136B10;
		  /* 82136B10h */ case    5:  		/* bc 4, CR6_GT, 120 */
		/* 82136B10h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82136B88;  }
		/* 82136B10h case    5:*/		return 0x82136B14;
		  /* 82136B14h */ case    6:  		/* mr R31, R22 */
		/* 82136B14h case    6:*/		regs.R31 = regs.R22;
		/* 82136B14h case    6:*/		return 0x82136B18;
	}
	return 0x82136B18;
} // Block from 82136AFCh-82136B18h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82136B18h
// Function '?IsDependentOnPhase2@CPSLegacyProgram@D3DXShader@@IAAHPAVCInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136B18);
		  /* 82136B18h */ case    0:  		/* lwz R11, <#[R18 + 8]> */
		/* 82136B18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 82136B18h case    0:*/		return 0x82136B1C;
		  /* 82136B1Ch */ case    1:  		/* lwz R9, <#[R27 + 20]> */
		/* 82136B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 82136B1Ch case    1:*/		return 0x82136B20;
		  /* 82136B20h */ case    2:  		/* lwz R8, <#[R27 + 16]> */
		/* 82136B20h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000010) );
		/* 82136B20h case    2:*/		return 0x82136B24;
		  /* 82136B24h */ case    3:  		/* lwzx R10, <#[R31 + R11]> */
		/* 82136B24h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82136B24h case    3:*/		return 0x82136B28;
		  /* 82136B28h */ case    4:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82136B28h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82136B28h case    4:*/		return 0x82136B2C;
		  /* 82136B2Ch */ case    5:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82136B2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82136B2Ch case    5:*/		return 0x82136B30;
		  /* 82136B30h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 82136B30h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82136B30h case    6:*/		return 0x82136B34;
		  /* 82136B34h */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82136B34h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82136B34h case    7:*/		return 0x82136B38;
		  /* 82136B38h */ case    8:  		/* lwzx R9, <#[R9 + R8]> */
		/* 82136B38h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82136B38h case    8:*/		return 0x82136B3C;
		  /* 82136B3Ch */ case    9:  		/* lwz R9, <#[R9 + 4]> */
		/* 82136B3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82136B3Ch case    9:*/		return 0x82136B40;
		  /* 82136B40h */ case   10:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 82136B40h case   10:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 82136B40h case   10:*/		return 0x82136B44;
		  /* 82136B44h */ case   11:  		/* bc 12, CR0_EQ, 48 */
		/* 82136B44h case   11:*/		if ( regs.CR[0].eq ) { return 0x82136B74;  }
		/* 82136B44h case   11:*/		return 0x82136B48;
		  /* 82136B48h */ case   12:  		/* lwz R9, <#[R1 + 80]> */
		/* 82136B48h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82136B48h case   12:*/		return 0x82136B4C;
		  /* 82136B4Ch */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 82136B4Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82136B4Ch case   13:*/		return 0x82136B50;
		  /* 82136B50h */ case   14:  		/* bc 4, CR6_LT, 36 */
		/* 82136B50h case   14:*/		if ( !regs.CR[6].lt ) { return 0x82136B74;  }
		/* 82136B50h case   14:*/		return 0x82136B54;
		  /* 82136B54h */ case   15:  		/* li R6, 3 */
		/* 82136B54h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82136B54h case   15:*/		return 0x82136B58;
		  /* 82136B58h */ case   16:  		/* lfd FR1, <#[R11 + 32]> */
		/* 82136B58h case   16:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000020) );
		/* 82136B58h case   16:*/		return 0x82136B5C;
		  /* 82136B5Ch */ case   17:  		/* mr R5, R28 */
		/* 82136B5Ch case   17:*/		regs.R5 = regs.R28;
		/* 82136B5Ch case   17:*/		return 0x82136B60;
		  /* 82136B60h */ case   18:  		/* lwz R4, <#[R1 + 84]> */
		/* 82136B60h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82136B60h case   18:*/		return 0x82136B64;
		  /* 82136B64h */ case   19:  		/* mr R3, R27 */
		/* 82136B64h case   19:*/		regs.R3 = regs.R27;
		/* 82136B64h case   19:*/		return 0x82136B68;
		  /* 82136B68h */ case   20:  		/* bl -235840 */
		/* 82136B68h case   20:*/		regs.LR = 0x82136B6C; return 0x820FD228;
		/* 82136B68h case   20:*/		return 0x82136B6C;
		  /* 82136B6Ch */ case   21:  		/* lwz R11, <#[R18 + 8]> */
		/* 82136B6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 82136B6Ch case   21:*/		return 0x82136B70;
		  /* 82136B70h */ case   22:  		/* stwx R3, <#[R31 + R11]> */
		/* 82136B70h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82136B70h case   22:*/		return 0x82136B74;
	}
	return 0x82136B74;
} // Block from 82136B18h-82136B74h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82136B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136B74);
		  /* 82136B74h */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 82136B74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 82136B74h case    0:*/		return 0x82136B78;
		  /* 82136B78h */ case    1:  		/* addi R30, R30, 1 */
		/* 82136B78h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82136B78h case    1:*/		return 0x82136B7C;
		  /* 82136B7Ch */ case    2:  		/* addi R31, R31, 4 */
		/* 82136B7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82136B7Ch case    2:*/		return 0x82136B80;
		  /* 82136B80h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82136B80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82136B80h case    3:*/		return 0x82136B84;
		  /* 82136B84h */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 82136B84h case    4:*/		if ( regs.CR[6].lt ) { return 0x82136B18;  }
		/* 82136B84h case    4:*/		return 0x82136B88;
	}
	return 0x82136B88;
} // Block from 82136B74h-82136B88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136B88);
		  /* 82136B88h */ case    0:  		/* addi R21, R21, 1 */
		/* 82136B88h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 82136B88h case    0:*/		return 0x82136B8C;
		  /* 82136B8Ch */ case    1:  		/* add R24, R24, R25 */
		/* 82136B8Ch case    1:*/		cpu::op::add<0>(regs,&regs.R24,regs.R24,regs.R25);
		/* 82136B8Ch case    1:*/		return 0x82136B90;
		  /* 82136B90h */ case    2:  		/* add R23, R19, R23 */
		/* 82136B90h case    2:*/		cpu::op::add<0>(regs,&regs.R23,regs.R19,regs.R23);
		/* 82136B90h case    2:*/		return 0x82136B94;
		  /* 82136B94h */ case    3:  		/* cmplw CR6, R21, R20 */
		/* 82136B94h case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R20);
		/* 82136B94h case    3:*/		return 0x82136B98;
	}
	return 0x82136B98;
} // Block from 82136B88h-82136B98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136B98h
// Function '?FindConsumerWriters@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IPAI1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136B98);
		  /* 82136B98h */ case    0:  		/* bc 12, CR6_LT, -900 */
		/* 82136B98h case    0:*/		if ( regs.CR[6].lt ) { return 0x82136814;  }
		/* 82136B98h case    0:*/		return 0x82136B9C;
		  /* 82136B9Ch */ case    1:  		/* lwz R31, <#[R1 + 80]> */
		/* 82136B9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82136B9Ch case    1:*/		return 0x82136BA0;
	}
	return 0x82136BA0;
} // Block from 82136B98h-82136BA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136BA0);
		  /* 82136BA0h */ case    0:  		/* lwz R7, <#[R27 + 552]> */
		/* 82136BA0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000228) );
		/* 82136BA0h case    0:*/		return 0x82136BA4;
		  /* 82136BA4h */ case    1:  		/* addi R17, R17, 1 */
		/* 82136BA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 82136BA4h case    1:*/		return 0x82136BA8;
		  /* 82136BA8h */ case    2:  		/* lwz R11, <#[R27 + 548]> */
		/* 82136BA8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000224) );
		/* 82136BA8h case    2:*/		return 0x82136BAC;
		  /* 82136BACh */ case    3:  		/* addi R14, R14, 4 */
		/* 82136BACh case    3:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x4);
		/* 82136BACh case    3:*/		return 0x82136BB0;
		  /* 82136BB0h */ case    4:  		/* add R10, R11, R7 */
		/* 82136BB0h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R7);
		/* 82136BB0h case    4:*/		return 0x82136BB4;
		  /* 82136BB4h */ case    5:  		/* cmplw CR6, R17, R10 */
		/* 82136BB4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R10);
		/* 82136BB4h case    5:*/		return 0x82136BB8;
		  /* 82136BB8h */ case    6:  		/* bc 12, CR6_LT, -1288 */
		/* 82136BB8h case    6:*/		if ( regs.CR[6].lt ) { return 0x821366B0;  }
		/* 82136BB8h case    6:*/		return 0x82136BBC;
	}
	return 0x82136BBC;
} // Block from 82136BA0h-82136BBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82136BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136BBC);
		  /* 82136BBCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82136BBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82136BBCh case    0:*/		return 0x82136BC0;
		  /* 82136BC0h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 82136BC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82136C00;  }
		/* 82136BC0h case    1:*/		return 0x82136BC4;
		  /* 82136BC4h */ case    2:  		/* mtspr CTR, R31 */
		/* 82136BC4h case    2:*/		regs.CTR = regs.R31;
		/* 82136BC4h case    2:*/		return 0x82136BC8;
		  /* 82136BC8h */ case    3:  		/* mr R10, R22 */
		/* 82136BC8h case    3:*/		regs.R10 = regs.R22;
		/* 82136BC8h case    3:*/		return 0x82136BCC;
		  /* 82136BCCh */ case    4:  		/* lwz R11, <#[R27 + 20]> */
		/* 82136BCCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82136BCCh case    4:*/		return 0x82136BD0;
		  /* 82136BD0h */ case    5:  		/* lwz R9, <#[R27 + 16]> */
		/* 82136BD0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 82136BD0h case    5:*/		return 0x82136BD4;
		  /* 82136BD4h */ case    6:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82136BD4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82136BD4h case    6:*/		return 0x82136BD8;
		  /* 82136BD8h */ case    7:  		/* lwz R8, <#[R11 + 4]> */
		/* 82136BD8h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82136BD8h case    7:*/		return 0x82136BDC;
		  /* 82136BDCh */ case    8:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82136BDCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82136BDCh case    8:*/		return 0x82136BE0;
		  /* 82136BE0h */ case    9:  		/* lwzx R9, <#[R8 + R9]> */
		/* 82136BE0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82136BE0h case    9:*/		return 0x82136BE4;
		  /* 82136BE4h */ case   10:  		/* lwz R9, <#[R9 + 4]> */
		/* 82136BE4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82136BE4h case   10:*/		return 0x82136BE8;
		  /* 82136BE8h */ case   11:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 82136BE8h case   11:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 82136BE8h case   11:*/		return 0x82136BEC;
		  /* 82136BECh */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 82136BECh case   12:*/		if ( regs.CR[0].eq ) { return 0x82136BF8;  }
		/* 82136BECh case   12:*/		return 0x82136BF0;
		  /* 82136BF0h */ case   13:  		/* lwz R9, <#[R27 + 116]> */
		/* 82136BF0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000074) );
		/* 82136BF0h case   13:*/		return 0x82136BF4;
		  /* 82136BF4h */ case   14:  		/* stw R9, <#[R11 + 4]> */
		/* 82136BF4h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82136BF4h case   14:*/		return 0x82136BF8;
	}
	return 0x82136BF8;
} // Block from 82136BBCh-82136BF8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82136BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136BF8);
		  /* 82136BF8h */ case    0:  		/* addi R10, R10, 4 */
		/* 82136BF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82136BF8h case    0:*/		return 0x82136BFC;
		  /* 82136BFCh */ case    1:  		/* bc 16, CR0_LT, -48 */
		/* 82136BFCh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82136BCC;  }
		/* 82136BFCh case    1:*/		return 0x82136C00;
	}
	return 0x82136C00;
} // Block from 82136BF8h-82136C00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136C00);
		  /* 82136C00h */ case    0:  		/* li R3, 0 */
		/* 82136C00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136C00h case    0:*/		return 0x82136C04;
	}
	return 0x82136C04;
} // Block from 82136C00h-82136C04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82136C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136C04);
		  /* 82136C04h */ case    0:  		/* addi R1, R1, 592 */
		/* 82136C04h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x250);
		/* 82136C04h case    0:*/		return 0x82136C08;
		  /* 82136C08h */ case    1:  		/* lfd FR30, <#[R1 - 168]> */
		/* 82136C08h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82136C08h case    1:*/		return 0x82136C0C;
		  /* 82136C0Ch */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82136C0Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82136C0Ch case    2:*/		return 0x82136C10;
		  /* 82136C10h */ case    3:  		/* b -678304 */
		/* 82136C10h case    3:*/		return 0x82091270;
		/* 82136C10h case    3:*/		return 0x82136C14;
	}
	return 0x82136C14;
} // Block from 82136C04h-82136C14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136C14);
		  /* 82136C14h */ case    0:  		/* lis R11, -32253 */
		/* 82136C14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82136C14h case    0:*/		return 0x82136C18;
		  /* 82136C18h */ case    1:  		/* addi R6, R11, 21552 */
		/* 82136C18h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5430);
		/* 82136C18h case    1:*/		return 0x82136C1C;
		  /* 82136C1Ch */ case    2:  		/* b -1360 */
		/* 82136C1Ch case    2:*/		return 0x821366CC;
		/* 82136C1Ch case    2:*/		return 0x82136C20;
	}
	return 0x82136C20;
} // Block from 82136C14h-82136C20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136C20);
		  /* 82136C20h */ case    0:  		/* mfspr R12, LR */
		/* 82136C20h case    0:*/		regs.R12 = regs.LR;
		/* 82136C20h case    0:*/		return 0x82136C24;
		  /* 82136C24h */ case    1:  		/* bl -678376 */
		/* 82136C24h case    1:*/		regs.LR = 0x82136C28; return 0x8209123C;
		/* 82136C24h case    1:*/		return 0x82136C28;
		  /* 82136C28h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82136C28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82136C28h case    2:*/		return 0x82136C2C;
		  /* 82136C2Ch */ case    3:  		/* li R23, 0 */
		/* 82136C2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82136C2Ch case    3:*/		return 0x82136C30;
		  /* 82136C30h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 82136C30h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82136C30h case    4:*/		return 0x82136C34;
		  /* 82136C34h */ case    5:  		/* bc 12, CR6_EQ, 488 */
		/* 82136C34h case    5:*/		if ( regs.CR[6].eq ) { return 0x82136E1C;  }
		/* 82136C34h case    5:*/		return 0x82136C38;
		  /* 82136C38h */ case    6:  		/* mr R22, R5 */
		/* 82136C38h case    6:*/		regs.R22 = regs.R5;
		/* 82136C38h case    6:*/		return 0x82136C3C;
		  /* 82136C3Ch */ case    7:  		/* lis R21, 29200 */
		/* 82136C3Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R21,0x7210);
		/* 82136C3Ch case    7:*/		return 0x82136C40;
		  /* 82136C40h */ case    8:  		/* lwz R24, <#[R22]> */
		/* 82136C40h case    8:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R22 + 0x00000000) );
		/* 82136C40h case    8:*/		return 0x82136C44;
		  /* 82136C44h */ case    9:  		/* cmplwi CR6, R24, 0 */
		/* 82136C44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82136C44h case    9:*/		return 0x82136C48;
		  /* 82136C48h */ case   10:  		/* bc 12, CR6_EQ, 452 */
		/* 82136C48h case   10:*/		if ( regs.CR[6].eq ) { return 0x82136E0C;  }
		/* 82136C48h case   10:*/		return 0x82136C4C;
		  /* 82136C4Ch */ case   11:  		/* lwz R10, <#[R24]> */
		/* 82136C4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 82136C4Ch case   11:*/		return 0x82136C50;
		  /* 82136C50h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82136C50h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82136C50h case   12:*/		return 0x82136C54;
		  /* 82136C54h */ case   13:  		/* bc 12, CR6_EQ, 440 */
		/* 82136C54h case   13:*/		if ( regs.CR[6].eq ) { return 0x82136E0C;  }
		/* 82136C54h case   13:*/		return 0x82136C58;
		  /* 82136C58h */ case   14:  		/* rlwinm R11, R10, 0, 0, 11 */
		/* 82136C58h case   14:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R10);
		/* 82136C58h case   14:*/		return 0x82136C5C;
		  /* 82136C5Ch */ case   15:  		/* lis R9, 24576 */
		/* 82136C5Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0x6000);
		/* 82136C5Ch case   15:*/		return 0x82136C60;
		  /* 82136C60h */ case   16:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 82136C60h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82136C60h case   16:*/		return 0x82136C64;
		  /* 82136C64h */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 82136C64h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136C64h case   17:*/		return 0x82136C68;
		  /* 82136C68h */ case   18:  		/* bc 12, CR6_EQ, 240 */
		/* 82136C68h case   18:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136C68h case   18:*/		return 0x82136C6C;
		  /* 82136C6Ch */ case   19:  		/* lis R9, 24656 */
		/* 82136C6Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0x6050);
		/* 82136C6Ch case   19:*/		return 0x82136C70;
		  /* 82136C70h */ case   20:  		/* cmplw CR6, R11, R9 */
		/* 82136C70h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136C70h case   20:*/		return 0x82136C74;
		  /* 82136C74h */ case   21:  		/* bc 12, CR6_EQ, 228 */
		/* 82136C74h case   21:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136C74h case   21:*/		return 0x82136C78;
		  /* 82136C78h */ case   22:  		/* lis R9, 24736 */
		/* 82136C78h case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0x60A0);
		/* 82136C78h case   22:*/		return 0x82136C7C;
		  /* 82136C7Ch */ case   23:  		/* cmplw CR6, R11, R9 */
		/* 82136C7Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136C7Ch case   23:*/		return 0x82136C80;
		  /* 82136C80h */ case   24:  		/* bc 12, CR6_EQ, 216 */
		/* 82136C80h case   24:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136C80h case   24:*/		return 0x82136C84;
		  /* 82136C84h */ case   25:  		/* lis R9, 24816 */
		/* 82136C84h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0x60F0);
		/* 82136C84h case   25:*/		return 0x82136C88;
		  /* 82136C88h */ case   26:  		/* cmplw CR6, R11, R9 */
		/* 82136C88h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136C88h case   26:*/		return 0x82136C8C;
		  /* 82136C8Ch */ case   27:  		/* bc 12, CR6_EQ, 204 */
		/* 82136C8Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136C8Ch case   27:*/		return 0x82136C90;
		  /* 82136C90h */ case   28:  		/* lis R9, 29408 */
		/* 82136C90h case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0x72E0);
		/* 82136C90h case   28:*/		return 0x82136C94;
		  /* 82136C94h */ case   29:  		/* cmplw CR6, R11, R9 */
		/* 82136C94h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136C94h case   29:*/		return 0x82136C98;
		  /* 82136C98h */ case   30:  		/* bc 12, CR6_EQ, 192 */
		/* 82136C98h case   30:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136C98h case   30:*/		return 0x82136C9C;
		  /* 82136C9Ch */ case   31:  		/* lis R9, 24688 */
		/* 82136C9Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R9,0x6070);
		/* 82136C9Ch case   31:*/		return 0x82136CA0;
		  /* 82136CA0h */ case   32:  		/* cmplw CR6, R11, R9 */
		/* 82136CA0h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136CA0h case   32:*/		return 0x82136CA4;
		  /* 82136CA4h */ case   33:  		/* bc 12, CR6_EQ, 180 */
		/* 82136CA4h case   33:*/		if ( regs.CR[6].eq ) { return 0x82136D58;  }
		/* 82136CA4h case   33:*/		return 0x82136CA8;
		  /* 82136CA8h */ case   34:  		/* cmplw CR6, R11, R21 */
		/* 82136CA8h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 82136CA8h case   34:*/		return 0x82136CAC;
		  /* 82136CACh */ case   35:  		/* bc 12, CR6_EQ, 180 */
		/* 82136CACh case   35:*/		if ( regs.CR[6].eq ) { return 0x82136D60;  }
		/* 82136CACh case   35:*/		return 0x82136CB0;
		  /* 82136CB0h */ case   36:  		/* li R27, 0 */
		/* 82136CB0h case   36:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82136CB0h case   36:*/		return 0x82136CB4;
		  /* 82136CB4h */ case   37:  		/* cmplwi CR6, R8, 0 */
		/* 82136CB4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136CB4h case   37:*/		return 0x82136CB8;
		  /* 82136CB8h */ case   38:  		/* bc 12, CR6_EQ, 340 */
		/* 82136CB8h case   38:*/		if ( regs.CR[6].eq ) { return 0x82136E0C;  }
		/* 82136CB8h case   38:*/		return 0x82136CBC;
		  /* 82136CBCh */ case   39:  		/* lwz R28, <#[R24 + 4]> */
		/* 82136CBCh case   39:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000004) );
		/* 82136CBCh case   39:*/		return 0x82136CC0;
		  /* 82136CC0h */ case   40:  		/* mr R30, R7 */
		/* 82136CC0h case   40:*/		regs.R30 = regs.R7;
		/* 82136CC0h case   40:*/		return 0x82136CC4;
		  /* 82136CC4h */ case   41:  		/* li R29, 0 */
		/* 82136CC4h case   41:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82136CC4h case   41:*/		return 0x82136CC8;
		  /* 82136CC8h */ case   42:  		/* cmplwi CR6, R28, 0 */
		/* 82136CC8h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82136CC8h case   42:*/		return 0x82136CCC;
		  /* 82136CCCh */ case   43:  		/* bc 12, CR6_EQ, 120 */
		/* 82136CCCh case   43:*/		if ( regs.CR[6].eq ) { return 0x82136D44;  }
		/* 82136CCCh case   43:*/		return 0x82136CD0;
		  /* 82136CD0h */ case   44:  		/* lwz R31, <#[R24 + 8]> */
		/* 82136CD0h case   44:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000008) );
		/* 82136CD0h case   44:*/		return 0x82136CD4;
		  /* 82136CD4h */ case   45:  		/* li R10, 0 */
		/* 82136CD4h case   45:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82136CD4h case   45:*/		return 0x82136CD8;
		  /* 82136CD8h */ case   46:  		/* lwz R9, <#[R30]> */
		/* 82136CD8h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82136CD8h case   46:*/		return 0x82136CDC;
		  /* 82136CDCh */ case   47:  		/* lwzx R11, <#[R10 + R31]> */
		/* 82136CDCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82136CDCh case   47:*/		return 0x82136CE0;
		  /* 82136CE0h */ case   48:  		/* cmplw CR6, R11, R9 */
		/* 82136CE0h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136CE0h case   48:*/		return 0x82136CE4;
		  /* 82136CE4h */ case   49:  		/* bc 12, CR6_EQ, 28 */
		/* 82136CE4h case   49:*/		if ( regs.CR[6].eq ) { return 0x82136D00;  }
		/* 82136CE4h case   49:*/		return 0x82136CE8;
		  /* 82136CE8h */ case   50:  		/* lwz R26, <#[R3 + 20]> */
		/* 82136CE8h case   50:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000014) );
		/* 82136CE8h case   50:*/		return 0x82136CEC;
		  /* 82136CECh */ case   51:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82136CECh case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82136CECh case   51:*/		return 0x82136CF0;
		  /* 82136CF0h */ case   52:  		/* lwzx R11, <#[R11 + R26]> */
		/* 82136CF0h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82136CF0h case   52:*/		return 0x82136CF4;
		  /* 82136CF4h */ case   53:  		/* lwz R11, <#[R11 + 56]> */
		/* 82136CF4h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 82136CF4h case   53:*/		return 0x82136CF8;
	}
	return 0x82136CF8;
} // Block from 82136C20h-82136CF8h (54 instructions)

//////////////////////////////////////////////////////
// Block at 82136CF8h
// Function '?FindConsumers@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IIPAII1AAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136CF8);
		  /* 82136CF8h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 82136CF8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82136CF8h case    0:*/		return 0x82136CFC;
		  /* 82136CFCh */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82136CFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82136D34;  }
		/* 82136CFCh case    1:*/		return 0x82136D00;
	}
	return 0x82136D00;
} // Block from 82136CF8h-82136D00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D00);
		  /* 82136D00h */ case    0:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 82136D00h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 82136D00h case    0:*/		return 0x82136D04;
		  /* 82136D04h */ case    1:  		/* lwzx R11, <#[R11 + R5]> */
		/* 82136D04h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82136D04h case    1:*/		return 0x82136D08;
		  /* 82136D08h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82136D08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136D08h case    2:*/		return 0x82136D0C;
		  /* 82136D0Ch */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 82136D0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82136D34;  }
		/* 82136D0Ch case    3:*/		return 0x82136D10;
		  /* 82136D10h */ case    4:  		/* cmplw CR6, R4, R23 */
		/* 82136D10h case    4:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R23);
		/* 82136D10h case    4:*/		return 0x82136D14;
		  /* 82136D14h */ case    5:  		/* bc 4, CR6_LT, 32 */
		/* 82136D14h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82136D34;  }
		/* 82136D14h case    5:*/		return 0x82136D18;
		  /* 82136D18h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 82136D18h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82136D18h case    6:*/		return 0x82136D1C;
		  /* 82136D1Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82136D1Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136D1Ch case    7:*/		return 0x82136D20;
		  /* 82136D20h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 82136D20h case    8:*/		if ( regs.CR[6].eq ) { return 0x82136D34;  }
		/* 82136D20h case    8:*/		return 0x82136D24;
		  /* 82136D24h */ case    9:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82136D24h case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82136D24h case    9:*/		return 0x82136D28;
		  /* 82136D28h */ case   10:  		/* lis R26, 4352 */
		/* 82136D28h case   10:*/		cpu::op::lis<0>(regs,&regs.R26,0x1100);
		/* 82136D28h case   10:*/		return 0x82136D2C;
		  /* 82136D2Ch */ case   11:  		/* cmplw CR6, R11, R26 */
		/* 82136D2Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 82136D2Ch case   11:*/		return 0x82136D30;
		  /* 82136D30h */ case   12:  		/* bc 4, CR6_EQ, 248 */
		/* 82136D30h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82136E28;  }
		/* 82136D30h case   12:*/		return 0x82136D34;
	}
	return 0x82136D34;
} // Block from 82136D00h-82136D34h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82136D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D34);
		  /* 82136D34h */ case    0:  		/* addi R29, R29, 1 */
		/* 82136D34h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82136D34h case    0:*/		return 0x82136D38;
		  /* 82136D38h */ case    1:  		/* addi R10, R10, 4 */
		/* 82136D38h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82136D38h case    1:*/		return 0x82136D3C;
		  /* 82136D3Ch */ case    2:  		/* cmplw CR6, R29, R28 */
		/* 82136D3Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82136D3Ch case    2:*/		return 0x82136D40;
		  /* 82136D40h */ case    3:  		/* bc 12, CR6_LT, -100 */
		/* 82136D40h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136CDC;  }
		/* 82136D40h case    3:*/		return 0x82136D44;
	}
	return 0x82136D44;
} // Block from 82136D34h-82136D44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D44);
		  /* 82136D44h */ case    0:  		/* addi R27, R27, 1 */
		/* 82136D44h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82136D44h case    0:*/		return 0x82136D48;
		  /* 82136D48h */ case    1:  		/* addi R30, R30, 4 */
		/* 82136D48h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82136D48h case    1:*/		return 0x82136D4C;
		  /* 82136D4Ch */ case    2:  		/* cmplw CR6, R27, R8 */
		/* 82136D4Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R8);
		/* 82136D4Ch case    2:*/		return 0x82136D50;
		  /* 82136D50h */ case    3:  		/* bc 12, CR6_LT, -140 */
		/* 82136D50h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136CC4;  }
		/* 82136D50h case    3:*/		return 0x82136D54;
		  /* 82136D54h */ case    4:  		/* b 184 */
		/* 82136D54h case    4:*/		return 0x82136E0C;
		/* 82136D54h case    4:*/		return 0x82136D58;
	}
	return 0x82136D58;
} // Block from 82136D44h-82136D58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D58);
		  /* 82136D58h */ case    0:  		/* cmplw CR6, R11, R21 */
		/* 82136D58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 82136D58h case    0:*/		return 0x82136D5C;
		  /* 82136D5Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82136D5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82136D68;  }
		/* 82136D5Ch case    1:*/		return 0x82136D60;
	}
	return 0x82136D60;
} // Block from 82136D58h-82136D60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D60);
		  /* 82136D60h */ case    0:  		/* li R27, 0 */
		/* 82136D60h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82136D60h case    0:*/		return 0x82136D64;
		  /* 82136D64h */ case    1:  		/* b 8 */
		/* 82136D64h case    1:*/		return 0x82136D6C;
		/* 82136D64h case    1:*/		return 0x82136D68;
	}
	return 0x82136D68;
} // Block from 82136D60h-82136D68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D68);
		  /* 82136D68h */ case    0:  		/* mr R27, R10 */
		/* 82136D68h case    0:*/		regs.R27 = regs.R10;
		/* 82136D68h case    0:*/		return 0x82136D6C;
	}
	return 0x82136D6C;
} // Block from 82136D68h-82136D6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82136D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136D6C);
		  /* 82136D6Ch */ case    0:  		/* li R25, 0 */
		/* 82136D6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82136D6Ch case    0:*/		return 0x82136D70;
		  /* 82136D70h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82136D70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136D70h case    1:*/		return 0x82136D74;
		  /* 82136D74h */ case    2:  		/* bc 12, CR6_EQ, 152 */
		/* 82136D74h case    2:*/		if ( regs.CR[6].eq ) { return 0x82136E0C;  }
		/* 82136D74h case    2:*/		return 0x82136D78;
		  /* 82136D78h */ case    3:  		/* lwz R26, <#[R24 + 4]> */
		/* 82136D78h case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R24 + 0x00000004) );
		/* 82136D78h case    3:*/		return 0x82136D7C;
		  /* 82136D7Ch */ case    4:  		/* mr R29, R7 */
		/* 82136D7Ch case    4:*/		regs.R29 = regs.R7;
		/* 82136D7Ch case    4:*/		return 0x82136D80;
		  /* 82136D80h */ case    5:  		/* mr R28, R27 */
		/* 82136D80h case    5:*/		regs.R28 = regs.R27;
		/* 82136D80h case    5:*/		return 0x82136D84;
		  /* 82136D84h */ case    6:  		/* cmplw CR6, R27, R26 */
		/* 82136D84h case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 82136D84h case    6:*/		return 0x82136D88;
		  /* 82136D88h */ case    7:  		/* bc 4, CR6_LT, 116 */
		/* 82136D88h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82136DFC;  }
		/* 82136D88h case    7:*/		return 0x82136D8C;
		  /* 82136D8Ch */ case    8:  		/* lwz R31, <#[R29]> */
		/* 82136D8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 82136D8Ch case    8:*/		return 0x82136D90;
		  /* 82136D90h */ case    9:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 82136D90h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 82136D90h case    9:*/		return 0x82136D94;
		  /* 82136D94h */ case   10:  		/* lwz R30, <#[R24 + 8]> */
		/* 82136D94h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000008) );
		/* 82136D94h case   10:*/		return 0x82136D98;
		  /* 82136D98h */ case   11:  		/* lwzx R9, <#[R10 + R30]> */
		/* 82136D98h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82136D98h case   11:*/		return 0x82136D9C;
		  /* 82136D9Ch */ case   12:  		/* cmplw CR6, R9, R31 */
		/* 82136D9Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 82136D9Ch case   12:*/		return 0x82136DA0;
		  /* 82136DA0h */ case   13:  		/* bc 4, CR6_EQ, 40 */
		/* 82136DA0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82136DC8;  }
		/* 82136DA0h case   13:*/		return 0x82136DA4;
		  /* 82136DA4h */ case   14:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 82136DA4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 82136DA4h case   14:*/		return 0x82136DA8;
		  /* 82136DA8h */ case   15:  		/* lwzx R11, <#[R11 + R5]> */
		/* 82136DA8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 82136DA8h case   15:*/		return 0x82136DAC;
		  /* 82136DACh */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82136DACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136DACh case   16:*/		return 0x82136DB0;
		  /* 82136DB0h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 82136DB0h case   17:*/		if ( regs.CR[6].eq ) { return 0x82136DC8;  }
		/* 82136DB0h case   17:*/		return 0x82136DB4;
		  /* 82136DB4h */ case   18:  		/* cmplw CR6, R4, R23 */
		/* 82136DB4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R23);
		/* 82136DB4h case   18:*/		return 0x82136DB8;
		  /* 82136DB8h */ case   19:  		/* bc 4, CR6_LT, 16 */
		/* 82136DB8h case   19:*/		if ( !regs.CR[6].lt ) { return 0x82136DC8;  }
		/* 82136DB8h case   19:*/		return 0x82136DBC;
		  /* 82136DBCh */ case   20:  		/* lwz R11, <#[R11]> */
		/* 82136DBCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82136DBCh case   20:*/		return 0x82136DC0;
		  /* 82136DC0h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82136DC0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136DC0h case   21:*/		return 0x82136DC4;
		  /* 82136DC4h */ case   22:  		/* bc 4, CR6_EQ, 100 */
		/* 82136DC4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82136E28;  }
		/* 82136DC4h case   22:*/		return 0x82136DC8;
	}
	return 0x82136DC8;
} // Block from 82136D6Ch-82136DC8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82136DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136DC8);
		  /* 82136DC8h */ case    0:  		/* lwz R11, <#[R3 + 20]> */
		/* 82136DC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82136DC8h case    0:*/		return 0x82136DCC;
		  /* 82136DCCh */ case    1:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82136DCCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82136DCCh case    1:*/		return 0x82136DD0;
		  /* 82136DD0h */ case    2:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82136DD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82136DD0h case    2:*/		return 0x82136DD4;
		  /* 82136DD4h */ case    3:  		/* lwz R9, <#[R11 + 60]> */
		/* 82136DD4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 82136DD4h case    3:*/		return 0x82136DD8;
		  /* 82136DD8h */ case    4:  		/* rlwinm. R9, R9, 0, 11, 15 */
		/* 82136DD8h case    4:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R9,regs.R9);
		/* 82136DD8h case    4:*/		return 0x82136DDC;
		  /* 82136DDCh */ case    5:  		/* bc 4, CR0_EQ, 84 */
		/* 82136DDCh case    5:*/		if ( !regs.CR[0].eq ) { return 0x82136E30;  }
		/* 82136DDCh case    5:*/		return 0x82136DE0;
		  /* 82136DE0h */ case    6:  		/* lwz R11, <#[R11 + 56]> */
		/* 82136DE0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 82136DE0h case    6:*/		return 0x82136DE4;
		  /* 82136DE4h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 82136DE4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82136DE4h case    7:*/		return 0x82136DE8;
		  /* 82136DE8h */ case    8:  		/* bc 4, CR6_EQ, 72 */
		/* 82136DE8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82136E30;  }
		/* 82136DE8h case    8:*/		return 0x82136DEC;
		  /* 82136DECh */ case    9:  		/* addi R28, R28, 1 */
		/* 82136DECh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82136DECh case    9:*/		return 0x82136DF0;
		  /* 82136DF0h */ case   10:  		/* addi R10, R10, 4 */
		/* 82136DF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82136DF0h case   10:*/		return 0x82136DF4;
		  /* 82136DF4h */ case   11:  		/* cmplw CR6, R28, R26 */
		/* 82136DF4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 82136DF4h case   11:*/		return 0x82136DF8;
		  /* 82136DF8h */ case   12:  		/* bc 12, CR6_LT, -96 */
		/* 82136DF8h case   12:*/		if ( regs.CR[6].lt ) { return 0x82136D98;  }
		/* 82136DF8h case   12:*/		return 0x82136DFC;
	}
	return 0x82136DFC;
} // Block from 82136DC8h-82136DFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82136DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136DFC);
		  /* 82136DFCh */ case    0:  		/* addi R25, R25, 1 */
		/* 82136DFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82136DFCh case    0:*/		return 0x82136E00;
		  /* 82136E00h */ case    1:  		/* addi R29, R29, 4 */
		/* 82136E00h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82136E00h case    1:*/		return 0x82136E04;
		  /* 82136E04h */ case    2:  		/* cmplw CR6, R25, R8 */
		/* 82136E04h case    2:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R8);
		/* 82136E04h case    2:*/		return 0x82136E08;
		  /* 82136E08h */ case    3:  		/* bc 12, CR6_LT, -136 */
		/* 82136E08h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136D80;  }
		/* 82136E08h case    3:*/		return 0x82136E0C;
	}
	return 0x82136E0C;
} // Block from 82136DFCh-82136E0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136E0C);
		  /* 82136E0Ch */ case    0:  		/* addi R23, R23, 1 */
		/* 82136E0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82136E0Ch case    0:*/		return 0x82136E10;
		  /* 82136E10h */ case    1:  		/* addi R22, R22, 4 */
		/* 82136E10h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 82136E10h case    1:*/		return 0x82136E14;
		  /* 82136E14h */ case    2:  		/* cmplw CR6, R23, R6 */
		/* 82136E14h case    2:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R6);
		/* 82136E14h case    2:*/		return 0x82136E18;
		  /* 82136E18h */ case    3:  		/* bc 12, CR6_LT, -472 */
		/* 82136E18h case    3:*/		if ( regs.CR[6].lt ) { return 0x82136C40;  }
		/* 82136E18h case    3:*/		return 0x82136E1C;
	}
	return 0x82136E1C;
} // Block from 82136E0Ch-82136E1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82136E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136E1C);
		  /* 82136E1Ch */ case    0:  		/* li R3, 0 */
		/* 82136E1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136E1Ch case    0:*/		return 0x82136E20;
		  /* 82136E20h */ case    1:  		/* addi R1, R1, 176 */
		/* 82136E20h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82136E20h case    1:*/		return 0x82136E24;
		  /* 82136E24h */ case    2:  		/* b -678808 */
		/* 82136E24h case    2:*/		return 0x8209128C;
		/* 82136E24h case    2:*/		return 0x82136E28;
	}
	return 0x82136E28;
} // Block from 82136E1Ch-82136E28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82136E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136E28);
		  /* 82136E28h */ case    0:  		/* li R3, 1 */
		/* 82136E28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82136E28h case    0:*/		return 0x82136E2C;
		  /* 82136E2Ch */ case    1:  		/* b -12 */
		/* 82136E2Ch case    1:*/		return 0x82136E20;
		/* 82136E2Ch case    1:*/		return 0x82136E30;
	}
	return 0x82136E30;
} // Block from 82136E28h-82136E30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136E30);
		  /* 82136E30h */ case    0:  		/* lis R11, -32253 */
		/* 82136E30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82136E30h case    0:*/		return 0x82136E34;
		  /* 82136E34h */ case    1:  		/* li R5, 4806 */
		/* 82136E34h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12C6);
		/* 82136E34h case    1:*/		return 0x82136E38;
		  /* 82136E38h */ case    2:  		/* addi R6, R11, 21728 */
		/* 82136E38h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x54E0);
		/* 82136E38h case    2:*/		return 0x82136E3C;
		  /* 82136E3Ch */ case    3:  		/* li R4, 0 */
		/* 82136E3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136E3Ch case    3:*/		return 0x82136E40;
		  /* 82136E40h */ case    4:  		/* bl -165648 */
		/* 82136E40h case    4:*/		regs.LR = 0x82136E44; return 0x8210E730;
		/* 82136E40h case    4:*/		return 0x82136E44;
		  /* 82136E44h */ case    5:  		/* lis R3, -32768 */
		/* 82136E44h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82136E44h case    5:*/		return 0x82136E48;
		  /* 82136E48h */ case    6:  		/* ori R3, R3, 16389 */
		/* 82136E48h case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82136E48h case    6:*/		return 0x82136E4C;
		  /* 82136E4Ch */ case    7:  		/* b -44 */
		/* 82136E4Ch case    7:*/		return 0x82136E20;
		/* 82136E4Ch case    7:*/		return 0x82136E50;
	}
	return 0x82136E50;
} // Block from 82136E30h-82136E50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82136E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136E50);
		  /* 82136E50h */ case    0:  		/* mfspr R12, LR */
		/* 82136E50h case    0:*/		regs.R12 = regs.LR;
		/* 82136E50h case    0:*/		return 0x82136E54;
		  /* 82136E54h */ case    1:  		/* bl -678964 */
		/* 82136E54h case    1:*/		regs.LR = 0x82136E58; return 0x82091220;
		/* 82136E54h case    1:*/		return 0x82136E58;
		  /* 82136E58h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82136E58h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82136E58h case    2:*/		return 0x82136E5C;
		  /* 82136E5Ch */ case    3:  		/* stwu R1, <#[R1 - 240]> */
		/* 82136E5Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82136E5Ch case    3:*/		return 0x82136E60;
		  /* 82136E60h */ case    4:  		/* mr R18, R3 */
		/* 82136E60h case    4:*/		regs.R18 = regs.R3;
		/* 82136E60h case    4:*/		return 0x82136E64;
		  /* 82136E64h */ case    5:  		/* mr R15, R4 */
		/* 82136E64h case    5:*/		regs.R15 = regs.R4;
		/* 82136E64h case    5:*/		return 0x82136E68;
		  /* 82136E68h */ case    6:  		/* mr R14, R6 */
		/* 82136E68h case    6:*/		regs.R14 = regs.R6;
		/* 82136E68h case    6:*/		return 0x82136E6C;
		  /* 82136E6Ch */ case    7:  		/* li R29, 0 */
		/* 82136E6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82136E6Ch case    7:*/		return 0x82136E70;
		  /* 82136E70h */ case    8:  		/* li R16, 0 */
		/* 82136E70h case    8:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 82136E70h case    8:*/		return 0x82136E74;
		  /* 82136E74h */ case    9:  		/* li R7, 0 */
		/* 82136E74h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82136E74h case    9:*/		return 0x82136E78;
		  /* 82136E78h */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 82136E78h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82136E78h case   10:*/		return 0x82136E7C;
		  /* 82136E7Ch */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 82136E7Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82136F38;  }
		/* 82136E7Ch case   11:*/		return 0x82136E80;
		  /* 82136E80h */ case   12:  		/* lwz R11, <#[R4]> */
		/* 82136E80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82136E80h case   12:*/		return 0x82136E84;
		  /* 82136E84h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82136E84h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82136E84h case   13:*/		return 0x82136E88;
		  /* 82136E88h */ case   14:  		/* bc 12, CR6_EQ, 152 */
		/* 82136E88h case   14:*/		if ( regs.CR[6].eq ) { return 0x82136F20;  }
		/* 82136E88h case   14:*/		return 0x82136E8C;
		  /* 82136E8Ch */ case   15:  		/* lwz R10, <#[R11]> */
		/* 82136E8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82136E8Ch case   15:*/		return 0x82136E90;
		  /* 82136E90h */ case   16:  		/* rlwinm. R9, R10, 0, 0, 11 */
		/* 82136E90h case   16:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R9,regs.R10);
		/* 82136E90h case   16:*/		return 0x82136E94;
		  /* 82136E94h */ case   17:  		/* bc 12, CR0_EQ, 140 */
		/* 82136E94h case   17:*/		if ( regs.CR[0].eq ) { return 0x82136F20;  }
		/* 82136E94h case   17:*/		return 0x82136E98;
		  /* 82136E98h */ case   18:  		/* rlwinm. R10, R10, 0, 12, 31 */
		/* 82136E98h case   18:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82136E98h case   18:*/		return 0x82136E9C;
		  /* 82136E9Ch */ case   19:  		/* bc 12, CR0_EQ, 132 */
		/* 82136E9Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x82136F20;  }
		/* 82136E9Ch case   19:*/		return 0x82136EA0;
		  /* 82136EA0h */ case   20:  		/* lwz R8, <#[R11 + 12]> */
		/* 82136EA0h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82136EA0h case   20:*/		return 0x82136EA4;
		  /* 82136EA4h */ case   21:  		/* cmplwi CR6, R8, 0 */
		/* 82136EA4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136EA4h case   21:*/		return 0x82136EA8;
		  /* 82136EA8h */ case   22:  		/* bc 12, CR6_EQ, 120 */
		/* 82136EA8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82136F20;  }
		/* 82136EA8h case   22:*/		return 0x82136EAC;
		  /* 82136EACh */ case   23:  		/* lwz R10, <#[R11 + 16]> */
		/* 82136EACh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82136EACh case   23:*/		return 0x82136EB0;
	}
	return 0x82136EB0;
} // Block from 82136E50h-82136EB0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82136EB0h
// Function '?FixUpOrigins@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136EB0);
		  /* 82136EB0h */ case    0:  		/* lwz R6, <#[R18 + 20]> */
		/* 82136EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R18 + 0x00000014) );
		/* 82136EB0h case    0:*/		return 0x82136EB4;
		  /* 82136EB4h */ case    1:  		/* lwz R10, <#[R10]> */
		/* 82136EB4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82136EB4h case    1:*/		return 0x82136EB8;
		  /* 82136EB8h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82136EB8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82136EB8h case    2:*/		return 0x82136EBC;
		  /* 82136EBCh */ case    3:  		/* lwzx R10, <#[R10 + R6]> */
		/* 82136EBCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82136EBCh case    3:*/		return 0x82136EC0;
		  /* 82136EC0h */ case    4:  		/* lwz R9, <#[R10 + 12]> */
		/* 82136EC0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 82136EC0h case    4:*/		return 0x82136EC4;
		  /* 82136EC4h */ case    5:  		/* cmplw CR6, R9, R14 */
		/* 82136EC4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R14);
		/* 82136EC4h case    5:*/		return 0x82136EC8;
		  /* 82136EC8h */ case    6:  		/* bc 4, CR6_EQ, 88 */
		/* 82136EC8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82136F20;  }
		/* 82136EC8h case    6:*/		return 0x82136ECC;
		  /* 82136ECCh */ case    7:  		/* lwz R10, <#[R10 + 4]> */
		/* 82136ECCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82136ECCh case    7:*/		return 0x82136ED0;
		  /* 82136ED0h */ case    8:  		/* lwz R9, <#[R18 + 136]> */
		/* 82136ED0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x00000088) );
		/* 82136ED0h case    8:*/		return 0x82136ED4;
		  /* 82136ED4h */ case    9:  		/* cmplw CR6, R10, R9 */
		/* 82136ED4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82136ED4h case    9:*/		return 0x82136ED8;
		  /* 82136ED8h */ case   10:  		/* bc 4, CR6_EQ, 72 */
		/* 82136ED8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82136F20;  }
		/* 82136ED8h case   10:*/		return 0x82136EDC;
		  /* 82136EDCh */ case   11:  		/* mr R29, R11 */
		/* 82136EDCh case   11:*/		regs.R29 = regs.R11;
		/* 82136EDCh case   11:*/		return 0x82136EE0;
		  /* 82136EE0h */ case   12:  		/* mr R16, R7 */
		/* 82136EE0h case   12:*/		regs.R16 = regs.R7;
		/* 82136EE0h case   12:*/		return 0x82136EE4;
		  /* 82136EE4h */ case   13:  		/* li R10, 0 */
		/* 82136EE4h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82136EE4h case   13:*/		return 0x82136EE8;
		  /* 82136EE8h */ case   14:  		/* cmplwi CR6, R8, 0 */
		/* 82136EE8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82136EE8h case   14:*/		return 0x82136EEC;
		  /* 82136EECh */ case   15:  		/* bc 12, CR6_EQ, 52 */
		/* 82136EECh case   15:*/		if ( regs.CR[6].eq ) { return 0x82136F20;  }
		/* 82136EECh case   15:*/		return 0x82136EF0;
		  /* 82136EF0h */ case   16:  		/* li R9, 0 */
		/* 82136EF0h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82136EF0h case   16:*/		return 0x82136EF4;
		  /* 82136EF4h */ case   17:  		/* lwz R3, <#[R11 + 16]> */
		/* 82136EF4h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 82136EF4h case   17:*/		return 0x82136EF8;
		  /* 82136EF8h */ case   18:  		/* lwzx R3, <#[R9 + R3]> */
		/* 82136EF8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82136EF8h case   18:*/		return 0x82136EFC;
		  /* 82136EFCh */ case   19:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82136EFCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82136EFCh case   19:*/		return 0x82136F00;
		  /* 82136F00h */ case   20:  		/* lwzx R3, <#[R3 + R6]> */
		/* 82136F00h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R6 + 0x00000000) );
		/* 82136F00h case   20:*/		return 0x82136F04;
		  /* 82136F04h */ case   21:  		/* lwz R3, <#[R3 + 16]> */
		/* 82136F04h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 82136F04h case   21:*/		return 0x82136F08;
		  /* 82136F08h */ case   22:  		/* cmplwi CR6, R3, 2 */
		/* 82136F08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82136F08h case   22:*/		return 0x82136F0C;
		  /* 82136F0Ch */ case   23:  		/* bc 12, CR6_EQ, 80 */
		/* 82136F0Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x82136F5C;  }
		/* 82136F0Ch case   23:*/		return 0x82136F10;
		  /* 82136F10h */ case   24:  		/* addi R10, R10, 1 */
		/* 82136F10h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82136F10h case   24:*/		return 0x82136F14;
		  /* 82136F14h */ case   25:  		/* addi R9, R9, 4 */
		/* 82136F14h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82136F14h case   25:*/		return 0x82136F18;
	}
	return 0x82136F18;
} // Block from 82136EB0h-82136F18h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82136F18h
// Function '?AnalizeArgUse@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IIPAIIAAIAAH3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F18);
		  /* 82136F18h */ case    0:  		/* cmplw CR6, R10, R8 */
		/* 82136F18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82136F18h case    0:*/		return 0x82136F1C;
		  /* 82136F1Ch */ case    1:  		/* bc 12, CR6_LT, -40 */
		/* 82136F1Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82136EF4;  }
		/* 82136F1Ch case    1:*/		return 0x82136F20;
	}
	return 0x82136F20;
} // Block from 82136F18h-82136F20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F20);
		  /* 82136F20h */ case    0:  		/* addi R7, R7, 1 */
		/* 82136F20h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82136F20h case    0:*/		return 0x82136F24;
		  /* 82136F24h */ case    1:  		/* addi R4, R4, 4 */
		/* 82136F24h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82136F24h case    1:*/		return 0x82136F28;
		  /* 82136F28h */ case    2:  		/* cmplw CR6, R7, R5 */
		/* 82136F28h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 82136F28h case    2:*/		return 0x82136F2C;
		  /* 82136F2Ch */ case    3:  		/* bc 12, CR6_LT, -172 */
		/* 82136F2Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82136E80;  }
		/* 82136F2Ch case    3:*/		return 0x82136F30;
		  /* 82136F30h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82136F30h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82136F30h case    4:*/		return 0x82136F34;
		  /* 82136F34h */ case    5:  		/* bc 4, CR6_EQ, 48 */
		/* 82136F34h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82136F64;  }
		/* 82136F34h case    5:*/		return 0x82136F38;
	}
	return 0x82136F38;
} // Block from 82136F20h-82136F38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82136F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F38);
		  /* 82136F38h */ case    0:  		/* lis R11, -32253 */
		/* 82136F38h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82136F38h case    0:*/		return 0x82136F3C;
		  /* 82136F3Ch */ case    1:  		/* li R5, 4823 */
		/* 82136F3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12D7);
		/* 82136F3Ch case    1:*/		return 0x82136F40;
		  /* 82136F40h */ case    2:  		/* addi R6, R11, 21812 */
		/* 82136F40h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5534);
		/* 82136F40h case    2:*/		return 0x82136F44;
		  /* 82136F44h */ case    3:  		/* li R4, 0 */
		/* 82136F44h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82136F44h case    3:*/		return 0x82136F48;
		  /* 82136F48h */ case    4:  		/* mr R3, R18 */
		/* 82136F48h case    4:*/		regs.R3 = regs.R18;
		/* 82136F48h case    4:*/		return 0x82136F4C;
		  /* 82136F4Ch */ case    5:  		/* bl -165916 */
		/* 82136F4Ch case    5:*/		regs.LR = 0x82136F50; return 0x8210E730;
		/* 82136F4Ch case    5:*/		return 0x82136F50;
		  /* 82136F50h */ case    6:  		/* lis R3, -32768 */
		/* 82136F50h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82136F50h case    6:*/		return 0x82136F54;
		  /* 82136F54h */ case    7:  		/* ori R3, R3, 16389 */
		/* 82136F54h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82136F54h case    7:*/		return 0x82136F58;
		  /* 82136F58h */ case    8:  		/* b 832 */
		/* 82136F58h case    8:*/		return 0x82137298;
		/* 82136F58h case    8:*/		return 0x82136F5C;
	}
	return 0x82136F5C;
} // Block from 82136F38h-82136F5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82136F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F5C);
		  /* 82136F5Ch */ case    0:  		/* li R3, 0 */
		/* 82136F5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82136F5Ch case    0:*/		return 0x82136F60;
		  /* 82136F60h */ case    1:  		/* b 824 */
		/* 82136F60h case    1:*/		return 0x82137298;
		/* 82136F60h case    1:*/		return 0x82136F64;
	}
	return 0x82136F64;
} // Block from 82136F5Ch-82136F64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82136F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F64);
		  /* 82136F64h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82136F64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82136F64h case    0:*/		return 0x82136F68;
		  /* 82136F68h */ case    1:  		/* lis R10, 20480 */
		/* 82136F68h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82136F68h case    1:*/		return 0x82136F6C;
		  /* 82136F6Ch */ case    2:  		/* li R3, 116 */
		/* 82136F6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82136F6Ch case    2:*/		return 0x82136F70;
		  /* 82136F70h */ case    3:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 82136F70h case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 82136F70h case    3:*/		return 0x82136F74;
		  /* 82136F74h */ case    4:  		/* rlwinm R23, R11, 0, 12, 31 */
		/* 82136F74h case    4:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R23,regs.R11);
		/* 82136F74h case    4:*/		return 0x82136F78;
		  /* 82136F78h */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 82136F78h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82136F78h case    5:*/		return 0x82136F7C;
		  /* 82136F7Ch */ case    6:  		/* bc 4, CR6_EQ, 216 */
		/* 82136F7Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82137054;  }
		/* 82136F7Ch case    6:*/		return 0x82136F80;
		  /* 82136F80h */ case    7:  		/* bl -240104 */
		/* 82136F80h case    7:*/		regs.LR = 0x82136F84; return 0x820FC598;
		/* 82136F80h case    7:*/		return 0x82136F84;
		  /* 82136F84h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82136F84h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82136F84h case    8:*/		return 0x82136F88;
		  /* 82136F88h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 82136F88h case    9:*/		if ( regs.CR[0].eq ) { return 0x82136F98;  }
		/* 82136F88h case    9:*/		return 0x82136F8C;
		  /* 82136F8Ch */ case   10:  		/* bl -241900 */
		/* 82136F8Ch case   10:*/		regs.LR = 0x82136F90; return 0x820FBEA0;
		/* 82136F8Ch case   10:*/		return 0x82136F90;
		  /* 82136F90h */ case   11:  		/* mr R31, R3 */
		/* 82136F90h case   11:*/		regs.R31 = regs.R3;
		/* 82136F90h case   11:*/		return 0x82136F94;
		  /* 82136F94h */ case   12:  		/* b 8 */
		/* 82136F94h case   12:*/		return 0x82136F9C;
		/* 82136F94h case   12:*/		return 0x82136F98;
	}
	return 0x82136F98;
} // Block from 82136F64h-82136F98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82136F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F98);
		  /* 82136F98h */ case    0:  		/* li R31, 0 */
		/* 82136F98h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82136F98h case    0:*/		return 0x82136F9C;
	}
	return 0x82136F9C;
} // Block from 82136F98h-82136F9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82136F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136F9C);
		  /* 82136F9Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82136F9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82136F9Ch case    0:*/		return 0x82136FA0;
		  /* 82136FA0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82136FA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82136FB0;  }
		/* 82136FA0h case    1:*/		return 0x82136FA4;
		  /* 82136FA4h */ case    2:  		/* lis R30, -32761 */
		/* 82136FA4h case    2:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 82136FA4h case    2:*/		return 0x82136FA8;
		  /* 82136FA8h */ case    3:  		/* ori R30, R30, 14 */
		/* 82136FA8h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 82136FA8h case    3:*/		return 0x82136FAC;
		  /* 82136FACh */ case    4:  		/* b 744 */
		/* 82136FACh case    4:*/		return 0x82137294;
		/* 82136FACh case    4:*/		return 0x82136FB0;
	}
	return 0x82136FB0;
} // Block from 82136F9Ch-82136FB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82136FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82136FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82136FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82136FB0);
		  /* 82136FB0h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 82136FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82136FB0h case    0:*/		return 0x82136FB4;
		  /* 82136FB4h */ case    1:  		/* li R7, 0 */
		/* 82136FB4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82136FB4h case    1:*/		return 0x82136FB8;
		  /* 82136FB8h */ case    2:  		/* mr R3, R31 */
		/* 82136FB8h case    2:*/		regs.R3 = regs.R31;
		/* 82136FB8h case    2:*/		return 0x82136FBC;
		  /* 82136FBCh */ case    3:  		/* lwz R5, <#[R29 + 4]> */
		/* 82136FBCh case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 82136FBCh case    3:*/		return 0x82136FC0;
		  /* 82136FC0h */ case    4:  		/* addi R6, R11, 1 */
		/* 82136FC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 82136FC0h case    4:*/		return 0x82136FC4;
		  /* 82136FC4h */ case    5:  		/* lwz R4, <#[R29]> */
		/* 82136FC4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82136FC4h case    5:*/		return 0x82136FC8;
		  /* 82136FC8h */ case    6:  		/* bl -240024 */
		/* 82136FC8h case    6:*/		regs.LR = 0x82136FCC; return 0x820FC630;
		/* 82136FC8h case    6:*/		return 0x82136FCC;
		  /* 82136FCCh */ case    7:  		/* or. R30, R3, R3 */
		/* 82136FCCh case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82136FCCh case    7:*/		return 0x82136FD0;
		  /* 82136FD0h */ case    8:  		/* bc 12, CR0_LT, 684 */
		/* 82136FD0h case    8:*/		if ( regs.CR[0].lt ) { return 0x8213727C;  }
		/* 82136FD0h case    8:*/		return 0x82136FD4;
		  /* 82136FD4h */ case    9:  		/* rlwinm R28, R16, 2, 0, 29 */
		/* 82136FD4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R16);
		/* 82136FD4h case    9:*/		return 0x82136FD8;
		  /* 82136FD8h */ case   10:  		/* mr R3, R31 */
		/* 82136FD8h case   10:*/		regs.R3 = regs.R31;
		/* 82136FD8h case   10:*/		return 0x82136FDC;
		  /* 82136FDCh */ case   11:  		/* lwzx R4, <#[R28 + R15]> */
		/* 82136FDCh case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + regs.R15 + 0x00000000) );
		/* 82136FDCh case   11:*/		return 0x82136FE0;
		  /* 82136FE0h */ case   12:  		/* bl -241904 */
		/* 82136FE0h case   12:*/		regs.LR = 0x82136FE4; return 0x820FBEF0;
		/* 82136FE0h case   12:*/		return 0x82136FE4;
		  /* 82136FE4h */ case   13:  		/* or. R30, R3, R3 */
		/* 82136FE4h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82136FE4h case   13:*/		return 0x82136FE8;
		  /* 82136FE8h */ case   14:  		/* bc 12, CR0_LT, 660 */
		/* 82136FE8h case   14:*/		if ( regs.CR[0].lt ) { return 0x8213727C;  }
		/* 82136FE8h case   14:*/		return 0x82136FEC;
		  /* 82136FECh */ case   15:  		/* lis R11, -32256 */
		/* 82136FECh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82136FECh case   15:*/		return 0x82136FF0;
		  /* 82136FF0h */ case   16:  		/* lwz R4, <#[R18 + 136]> */
		/* 82136FF0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R18 + 0x00000088) );
		/* 82136FF0h case   16:*/		return 0x82136FF4;
		  /* 82136FF4h */ case   17:  		/* li R6, 2 */
		/* 82136FF4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82136FF4h case   17:*/		return 0x82136FF8;
		  /* 82136FF8h */ case   18:  		/* mr R5, R14 */
		/* 82136FF8h case   18:*/		regs.R5 = regs.R14;
		/* 82136FF8h case   18:*/		return 0x82136FFC;
		  /* 82136FFCh */ case   19:  		/* mr R3, R18 */
		/* 82136FFCh case   19:*/		regs.R3 = regs.R18;
		/* 82136FFCh case   19:*/		return 0x82137000;
		  /* 82137000h */ case   20:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 82137000h case   20:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 82137000h case   20:*/		return 0x82137004;
		  /* 82137004h */ case   21:  		/* bl -237020 */
		/* 82137004h case   21:*/		regs.LR = 0x82137008; return 0x820FD228;
		/* 82137004h case   21:*/		return 0x82137008;
		  /* 82137008h */ case   22:  		/* mr R30, R3 */
		/* 82137008h case   22:*/		regs.R30 = regs.R3;
		/* 82137008h case   22:*/		return 0x8213700C;
		  /* 8213700Ch */ case   23:  		/* cmpwi CR6, R3, -1 */
		/* 8213700Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213700Ch case   23:*/		return 0x82137010;
		  /* 82137010h */ case   24:  		/* bc 12, CR6_EQ, 660 */
		/* 82137010h case   24:*/		if ( regs.CR[6].eq ) { return 0x821372A4;  }
		/* 82137010h case   24:*/		return 0x82137014;
		  /* 82137014h */ case   25:  		/* lwz R11, <#[R31 + 4]> */
		/* 82137014h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82137014h case   25:*/		return 0x82137018;
		  /* 82137018h */ case   26:  		/* lwz R4, <#[R29 + 8]> */
		/* 82137018h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 82137018h case   26:*/		return 0x8213701C;
		  /* 8213701Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8213701Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8213701Ch case   27:*/		return 0x82137020;
		  /* 82137020h */ case   28:  		/* lwz R3, <#[R31 + 8]> */
		/* 82137020h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82137020h case   28:*/		return 0x82137024;
		  /* 82137024h */ case   29:  		/* bl -677492 */
		/* 82137024h case   29:*/		regs.LR = 0x82137028; return 0x820919B0;
		/* 82137024h case   29:*/		return 0x82137028;
		  /* 82137028h */ case   30:  		/* lwz R11, <#[R29 + 12]> */
		/* 82137028h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82137028h case   30:*/		return 0x8213702C;
		  /* 8213702Ch */ case   31:  		/* lwz R4, <#[R29 + 16]> */
		/* 8213702Ch case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 8213702Ch case   31:*/		return 0x82137030;
		  /* 82137030h */ case   32:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82137030h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82137030h case   32:*/		return 0x82137034;
		  /* 82137034h */ case   33:  		/* lwz R3, <#[R31 + 16]> */
		/* 82137034h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82137034h case   33:*/		return 0x82137038;
		  /* 82137038h */ case   34:  		/* bl -677512 */
		/* 82137038h case   34:*/		regs.LR = 0x8213703C; return 0x820919B0;
		/* 82137038h case   34:*/		return 0x8213703C;
		  /* 8213703Ch */ case   35:  		/* lwz R11, <#[R29 + 12]> */
		/* 8213703Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8213703Ch case   35:*/		return 0x82137040;
		  /* 82137040h */ case   36:  		/* lwz R10, <#[R31 + 16]> */
		/* 82137040h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82137040h case   36:*/		return 0x82137044;
		  /* 82137044h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137044h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137044h case   37:*/		return 0x82137048;
		  /* 82137048h */ case   38:  		/* stwx R30, <#[R11 + R10]> */
		/* 82137048h case   38:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137048h case   38:*/		return 0x8213704C;
		  /* 8213704Ch */ case   39:  		/* lwzx R3, <#[R28 + R15]> */
		/* 8213704Ch case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + regs.R15 + 0x00000000) );
		/* 8213704Ch case   39:*/		return 0x82137050;
		  /* 82137050h */ case   40:  		/* b 524 */
		/* 82137050h case   40:*/		return 0x8213725C;
		/* 82137050h case   40:*/		return 0x82137054;
	}
	return 0x82137054;
} // Block from 82136FB0h-82137054h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82137054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137054);
		  /* 82137054h */ case    0:  		/* bl -240316 */
		/* 82137054h case    0:*/		regs.LR = 0x82137058; return 0x820FC598;
		/* 82137054h case    0:*/		return 0x82137058;
		  /* 82137058h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 82137058h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82137058h case    1:*/		return 0x8213705C;
		  /* 8213705Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8213705Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8213706C;  }
		/* 8213705Ch case    2:*/		return 0x82137060;
		  /* 82137060h */ case    3:  		/* bl -242112 */
		/* 82137060h case    3:*/		regs.LR = 0x82137064; return 0x820FBEA0;
		/* 82137060h case    3:*/		return 0x82137064;
		  /* 82137064h */ case    4:  		/* mr R31, R3 */
		/* 82137064h case    4:*/		regs.R31 = regs.R3;
		/* 82137064h case    4:*/		return 0x82137068;
		  /* 82137068h */ case    5:  		/* b 8 */
		/* 82137068h case    5:*/		return 0x82137070;
		/* 82137068h case    5:*/		return 0x8213706C;
	}
	return 0x8213706C;
} // Block from 82137054h-8213706Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213706Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213706C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213706C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213706C);
		  /* 8213706Ch */ case    0:  		/* li R31, 0 */
		/* 8213706Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8213706Ch case    0:*/		return 0x82137070;
	}
	return 0x82137070;
} // Block from 8213706Ch-82137070h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82137070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137070);
		  /* 82137070h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82137070h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82137070h case    0:*/		return 0x82137074;
		  /* 82137074h */ case    1:  		/* bc 12, CR6_EQ, -208 */
		/* 82137074h case    1:*/		if ( regs.CR[6].eq ) { return 0x82136FA4;  }
		/* 82137074h case    1:*/		return 0x82137078;
		  /* 82137078h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 82137078h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82137078h case    2:*/		return 0x8213707C;
		  /* 8213707Ch */ case    3:  		/* addi R4, R23, 1 */
		/* 8213707Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R23,0x1);
		/* 8213707Ch case    3:*/		return 0x82137080;
		  /* 82137080h */ case    4:  		/* lwz R9, <#[R29]> */
		/* 82137080h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82137080h case    4:*/		return 0x82137084;
		  /* 82137084h */ case    5:  		/* li R7, 0 */
		/* 82137084h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82137084h case    5:*/		return 0x82137088;
		  /* 82137088h */ case    6:  		/* lwz R10, <#[R29 + 12]> */
		/* 82137088h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 82137088h case    6:*/		return 0x8213708C;
		  /* 8213708Ch */ case    7:  		/* divwu R19, R11, R23 */
		/* 8213708Ch case    7:*/		cpu::op::divwu<0>(regs,&regs.R19,regs.R11,regs.R23);
		/* 8213708Ch case    7:*/		return 0x82137090;
		  /* 82137090h */ case    8:  		/* rlwimi R4, R9, 0, 0, 11 */
		/* 82137090h case    8:*/		cpu::op::rlwimi<0,0,0,11>(regs,&regs.R4,regs.R9);
		/* 82137090h case    8:*/		return 0x82137094;
		  /* 82137094h */ case    9:  		/* add R5, R11, R19 */
		/* 82137094h case    9:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R19);
		/* 82137094h case    9:*/		return 0x82137098;
		  /* 82137098h */ case   10:  		/* addi R6, R10, 1 */
		/* 82137098h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1);
		/* 82137098h case   10:*/		return 0x8213709C;
		  /* 8213709Ch */ case   11:  		/* mr R3, R31 */
		/* 8213709Ch case   11:*/		regs.R3 = regs.R31;
		/* 8213709Ch case   11:*/		return 0x821370A0;
		  /* 821370A0h */ case   12:  		/* twi 6, R23, 0 */
		/* 821370A0h case   12:*/		cpu::op::tw<6>(regs, 0x821370A0, regs.R23, 0x00000000);
		/* 821370A0h case   12:*/		return 0x821370A4;
		  /* 821370A4h */ case   13:  		/* bl -240244 */
		/* 821370A4h case   13:*/		regs.LR = 0x821370A8; return 0x820FC630;
		/* 821370A4h case   13:*/		return 0x821370A8;
		  /* 821370A8h */ case   14:  		/* or. R30, R3, R3 */
		/* 821370A8h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821370A8h case   14:*/		return 0x821370AC;
		  /* 821370ACh */ case   15:  		/* bc 12, CR0_LT, 464 */
		/* 821370ACh case   15:*/		if ( regs.CR[0].lt ) { return 0x8213727C;  }
		/* 821370ACh case   15:*/		return 0x821370B0;
		  /* 821370B0h */ case   16:  		/* rlwinm R17, R16, 2, 0, 29 */
		/* 821370B0h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R17,regs.R16);
		/* 821370B0h case   16:*/		return 0x821370B4;
		  /* 821370B4h */ case   17:  		/* mr R3, R31 */
		/* 821370B4h case   17:*/		regs.R3 = regs.R31;
		/* 821370B4h case   17:*/		return 0x821370B8;
		  /* 821370B8h */ case   18:  		/* lwzx R4, <#[R17 + R15]> */
		/* 821370B8h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R17 + regs.R15 + 0x00000000) );
		/* 821370B8h case   18:*/		return 0x821370BC;
		  /* 821370BCh */ case   19:  		/* bl -242124 */
		/* 821370BCh case   19:*/		regs.LR = 0x821370C0; return 0x820FBEF0;
		/* 821370BCh case   19:*/		return 0x821370C0;
		  /* 821370C0h */ case   20:  		/* or. R30, R3, R3 */
		/* 821370C0h case   20:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821370C0h case   20:*/		return 0x821370C4;
		  /* 821370C4h */ case   21:  		/* bc 12, CR0_LT, 440 */
		/* 821370C4h case   21:*/		if ( regs.CR[0].lt ) { return 0x8213727C;  }
		/* 821370C4h case   21:*/		return 0x821370C8;
	}
	return 0x821370C8;
} // Block from 82137070h-821370C8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821370C8h
// Function '?RemapConstants@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821370C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821370C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821370C8);
		  /* 821370C8h */ case    0:  		/* li R20, 0 */
		/* 821370C8h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821370C8h case    0:*/		return 0x821370CC;
		  /* 821370CCh */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 821370CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821370CCh case    1:*/		return 0x821370D0;
		  /* 821370D0h */ case    2:  		/* bc 12, CR6_EQ, 392 */
		/* 821370D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82137258;  }
		/* 821370D0h case    2:*/		return 0x821370D4;
		  /* 821370D4h */ case    3:  		/* lis R11, -32256 */
		/* 821370D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821370D4h case    3:*/		return 0x821370D8;
		  /* 821370D8h */ case    4:  		/* rlwinm R25, R23, 2, 0, 29 */
		/* 821370D8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R23);
		/* 821370D8h case    4:*/		return 0x821370DC;
		  /* 821370DCh */ case    5:  		/* li R22, 0 */
		/* 821370DCh case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821370DCh case    5:*/		return 0x821370E0;
		  /* 821370E0h */ case    6:  		/* addi R21, R25, 4 */
		/* 821370E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R25,0x4);
		/* 821370E0h case    6:*/		return 0x821370E4;
		  /* 821370E4h */ case    7:  		/* li R26, 0 */
		/* 821370E4h case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821370E4h case    7:*/		return 0x821370E8;
		  /* 821370E8h */ case    8:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 821370E8h case    8:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 821370E8h case    8:*/		return 0x821370EC;
		  /* 821370ECh */ case    9:  		/* li R28, 0 */
		/* 821370ECh case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821370ECh case    9:*/		return 0x821370F0;
		  /* 821370F0h */ case   10:  		/* mr R24, R25 */
		/* 821370F0h case   10:*/		regs.R24 = regs.R25;
		/* 821370F0h case   10:*/		return 0x821370F4;
		  /* 821370F4h */ case   11:  		/* li R30, 1 */
		/* 821370F4h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821370F4h case   11:*/		return 0x821370F8;
		  /* 821370F8h */ case   12:  		/* li R8, 1 */
		/* 821370F8h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821370F8h case   12:*/		return 0x821370FC;
		  /* 821370FCh */ case   13:  		/* cmplwi CR6, R23, 1 */
		/* 821370FCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000001);
		/* 821370FCh case   13:*/		return 0x82137100;
		  /* 82137100h */ case   14:  		/* bc 4, CR6_GT, 84 */
		/* 82137100h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82137154;  }
		/* 82137100h case   14:*/		return 0x82137104;
		  /* 82137104h */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 82137104h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82137104h case   15:*/		return 0x82137108;
		  /* 82137108h */ case   16:  		/* addi R9, R23, -1 */
		/* 82137108h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R23,0xFFFFFFFF);
		/* 82137108h case   16:*/		return 0x8213710C;
		  /* 8213710Ch */ case   17:  		/* lwz R10, <#[R18 + 20]> */
		/* 8213710Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000014) );
		/* 8213710Ch case   17:*/		return 0x82137110;
		  /* 82137110h */ case   18:  		/* lwzx R7, <#[R11 + R28]> */
		/* 82137110h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82137110h case   18:*/		return 0x82137114;
		  /* 82137114h */ case   19:  		/* mtspr CTR, R9 */
		/* 82137114h case   19:*/		regs.CTR = regs.R9;
		/* 82137114h case   19:*/		return 0x82137118;
		  /* 82137118h */ case   20:  		/* rlwinm R9, R7, 2, 0, 29 */
		/* 82137118h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 82137118h case   20:*/		return 0x8213711C;
		  /* 8213711Ch */ case   21:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8213711Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213711Ch case   21:*/		return 0x82137120;
		  /* 82137120h */ case   22:  		/* lwz R9, <#[R9 + 16]> */
		/* 82137120h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82137120h case   22:*/		return 0x82137124;
		  /* 82137124h */ case   23:  		/* add R7, R22, R8 */
		/* 82137124h case   23:*/		cpu::op::add<0>(regs,&regs.R7,regs.R22,regs.R8);
		/* 82137124h case   23:*/		return 0x82137128;
		  /* 82137128h */ case   24:  		/* addi R8, R8, 1 */
		/* 82137128h case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82137128h case   24:*/		return 0x8213712C;
		  /* 8213712Ch */ case   25:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8213712Ch case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8213712Ch case   25:*/		return 0x82137130;
		  /* 82137130h */ case   26:  		/* lwzx R7, <#[R7 + R11]> */
		/* 82137130h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82137130h case   26:*/		return 0x82137134;
		  /* 82137134h */ case   27:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82137134h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82137134h case   27:*/		return 0x82137138;
		  /* 82137138h */ case   28:  		/* lwzx R7, <#[R7 + R10]> */
		/* 82137138h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82137138h case   28:*/		return 0x8213713C;
		  /* 8213713Ch */ case   29:  		/* lwz R7, <#[R7 + 16]> */
		/* 8213713Ch case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 8213713Ch case   29:*/		return 0x82137140;
		  /* 82137140h */ case   30:  		/* subf R7, R7, R9 */
		/* 82137140h case   30:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 82137140h case   30:*/		return 0x82137144;
		  /* 82137144h */ case   31:  		/* addic R7, R7, -1 */
		/* 82137144h case   31:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 82137144h case   31:*/		return 0x82137148;
		  /* 82137148h */ case   32:  		/* subfe R7, R7, R7 */
		/* 82137148h case   32:*/		cpu::op::subfe<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 82137148h case   32:*/		return 0x8213714C;
		  /* 8213714Ch */ case   33:  		/* and R30, R7, R30 */
		/* 8213714Ch case   33:*/		cpu::op::and<0>(regs,&regs.R30,regs.R7,regs.R30);
		/* 8213714Ch case   33:*/		return 0x82137150;
		  /* 82137150h */ case   34:  		/* bc 16, CR0_LT, -44 */
		/* 82137150h case   34:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82137124;  }
		/* 82137150h case   34:*/		return 0x82137154;
	}
	return 0x82137154;
} // Block from 821370C8h-82137154h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82137154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137154);
		  /* 82137154h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82137154h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82137154h case    0:*/		return 0x82137158;
		  /* 82137158h */ case    1:  		/* mr R5, R25 */
		/* 82137158h case    1:*/		regs.R5 = regs.R25;
		/* 82137158h case    1:*/		return 0x8213715C;
		  /* 8213715Ch */ case    2:  		/* add R3, R26, R11 */
		/* 8213715Ch case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R26,regs.R11);
		/* 8213715Ch case    2:*/		return 0x82137160;
		  /* 82137160h */ case    3:  		/* lwz R11, <#[R29 + 8]> */
		/* 82137160h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82137160h case    3:*/		return 0x82137164;
		  /* 82137164h */ case    4:  		/* add R4, R11, R28 */
		/* 82137164h case    4:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R28);
		/* 82137164h case    4:*/		return 0x82137168;
		  /* 82137168h */ case    5:  		/* bl -677816 */
		/* 82137168h case    5:*/		regs.LR = 0x8213716C; return 0x820919B0;
		/* 82137168h case    5:*/		return 0x8213716C;
		  /* 8213716Ch */ case    6:  		/* cmpwi CR6, R30, 0 */
		/* 8213716Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213716Ch case    6:*/		return 0x82137170;
		  /* 82137170h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82137170h case    7:*/		if ( regs.CR[6].eq ) { return 0x82137188;  }
		/* 82137170h case    7:*/		return 0x82137174;
		  /* 82137174h */ case    8:  		/* lwz R11, <#[R29 + 8]> */
		/* 82137174h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82137174h case    8:*/		return 0x82137178;
		  /* 82137178h */ case    9:  		/* lwz R10, <#[R31 + 8]> */
		/* 82137178h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82137178h case    9:*/		return 0x8213717C;
		  /* 8213717Ch */ case   10:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213717Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213717Ch case   10:*/		return 0x82137180;
		  /* 82137180h */ case   11:  		/* stwx R11, <#[R24 + R10]> */
		/* 82137180h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + regs.R10 + 0x00000000) );
		/* 82137180h case   11:*/		return 0x82137184;
		  /* 82137184h */ case   12:  		/* b 112 */
		/* 82137184h case   12:*/		return 0x821371F4;
		/* 82137184h case   12:*/		return 0x82137188;
	}
	return 0x82137188;
} // Block from 82137154h-82137188h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82137188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137188);
		  /* 82137188h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82137188h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82137188h case    0:*/		return 0x8213718C;
		  /* 8213718Ch */ case    1:  		/* li R6, 2 */
		/* 8213718Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8213718Ch case    1:*/		return 0x82137190;
		  /* 82137190h */ case    2:  		/* lwz R10, <#[R18 + 20]> */
		/* 82137190h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000014) );
		/* 82137190h case    2:*/		return 0x82137194;
		  /* 82137194h */ case    3:  		/* mr R3, R18 */
		/* 82137194h case    3:*/		regs.R3 = regs.R18;
		/* 82137194h case    3:*/		return 0x82137198;
		  /* 82137198h */ case    4:  		/* fmr FR1, FR31 */
		/* 82137198h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82137198h case    4:*/		return 0x8213719C;
		  /* 8213719Ch */ case    5:  		/* lwzx R11, <#[R26 + R11]> */
		/* 8213719Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R11 + 0x00000000) );
		/* 8213719Ch case    5:*/		return 0x821371A0;
		  /* 821371A0h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821371A0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821371A0h case    6:*/		return 0x821371A4;
		  /* 821371A4h */ case    7:  		/* lwzx R30, <#[R11 + R10]> */
		/* 821371A4h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821371A4h case    7:*/		return 0x821371A8;
		  /* 821371A8h */ case    8:  		/* lwz R27, <#[R30 + 12]> */
		/* 821371A8h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x0000000C) );
		/* 821371A8h case    8:*/		return 0x821371AC;
		  /* 821371ACh */ case    9:  		/* lwz R4, <#[R30 + 4]> */
		/* 821371ACh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821371ACh case    9:*/		return 0x821371B0;
		  /* 821371B0h */ case   10:  		/* mr R5, R27 */
		/* 821371B0h case   10:*/		regs.R5 = regs.R27;
		/* 821371B0h case   10:*/		return 0x821371B4;
		  /* 821371B4h */ case   11:  		/* bl -237452 */
		/* 821371B4h case   11:*/		regs.LR = 0x821371B8; return 0x820FD228;
		/* 821371B4h case   11:*/		return 0x821371B8;
		  /* 821371B8h */ case   12:  		/* cmpwi CR6, R3, -1 */
		/* 821371B8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821371B8h case   12:*/		return 0x821371BC;
		  /* 821371BCh */ case   13:  		/* bc 12, CR6_EQ, 232 */
		/* 821371BCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821372A4;  }
		/* 821371BCh case   13:*/		return 0x821371C0;
		  /* 821371C0h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 821371C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821371C0h case   14:*/		return 0x821371C4;
		  /* 821371C4h */ case   15:  		/* stwx R3, <#[R24 + R11]> */
		/* 821371C4h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + regs.R11 + 0x00000000) );
		/* 821371C4h case   15:*/		return 0x821371C8;
		  /* 821371C8h */ case   16:  		/* lwz R11, <#[R30 + 4]> */
		/* 821371C8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821371C8h case   16:*/		return 0x821371CC;
		  /* 821371CCh */ case   17:  		/* lwz R10, <#[R18 + 136]> */
		/* 821371CCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000088) );
		/* 821371CCh case   17:*/		return 0x821371D0;
		  /* 821371D0h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 821371D0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821371D0h case   18:*/		return 0x821371D4;
		  /* 821371D4h */ case   19:  		/* bc 4, CR6_EQ, 32 */
		/* 821371D4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821371F4;  }
		/* 821371D4h case   19:*/		return 0x821371D8;
		  /* 821371D8h */ case   20:  		/* mr R6, R27 */
		/* 821371D8h case   20:*/		regs.R6 = regs.R27;
		/* 821371D8h case   20:*/		return 0x821371DC;
		  /* 821371DCh */ case   21:  		/* mr R5, R16 */
		/* 821371DCh case   21:*/		regs.R5 = regs.R16;
		/* 821371DCh case   21:*/		return 0x821371E0;
		  /* 821371E0h */ case   22:  		/* mr R4, R15 */
		/* 821371E0h case   22:*/		regs.R4 = regs.R15;
		/* 821371E0h case   22:*/		return 0x821371E4;
		  /* 821371E4h */ case   23:  		/* mr R3, R18 */
		/* 821371E4h case   23:*/		regs.R3 = regs.R18;
		/* 821371E4h case   23:*/		return 0x821371E8;
		  /* 821371E8h */ case   24:  		/* bl -920 */
		/* 821371E8h case   24:*/		regs.LR = 0x821371EC; return 0x82136E50;
		/* 821371E8h case   24:*/		return 0x821371EC;
		  /* 821371ECh */ case   25:  		/* or. R30, R3, R3 */
		/* 821371ECh case   25:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821371ECh case   25:*/		return 0x821371F0;
		  /* 821371F0h */ case   26:  		/* bc 12, CR0_LT, 140 */
		/* 821371F0h case   26:*/		if ( regs.CR[0].lt ) { return 0x8213727C;  }
		/* 821371F0h case   26:*/		return 0x821371F4;
	}
	return 0x821371F4;
} // Block from 82137188h-821371F4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821371F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821371F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821371F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821371F4);
		  /* 821371F4h */ case    0:  		/* li R6, 2 */
		/* 821371F4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821371F4h case    0:*/		return 0x821371F8;
		  /* 821371F8h */ case    1:  		/* lwz R4, <#[R18 + 136]> */
		/* 821371F8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R18 + 0x00000088) );
		/* 821371F8h case    1:*/		return 0x821371FC;
		  /* 821371FCh */ case    2:  		/* mr R5, R14 */
		/* 821371FCh case    2:*/		regs.R5 = regs.R14;
		/* 821371FCh case    2:*/		return 0x82137200;
		  /* 82137200h */ case    3:  		/* fmr FR1, FR31 */
		/* 82137200h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82137200h case    3:*/		return 0x82137204;
		  /* 82137204h */ case    4:  		/* mr R3, R18 */
		/* 82137204h case    4:*/		regs.R3 = regs.R18;
		/* 82137204h case    4:*/		return 0x82137208;
		  /* 82137208h */ case    5:  		/* bl -237536 */
		/* 82137208h case    5:*/		regs.LR = 0x8213720C; return 0x820FD228;
		/* 82137208h case    5:*/		return 0x8213720C;
		  /* 8213720Ch */ case    6:  		/* mr R30, R3 */
		/* 8213720Ch case    6:*/		regs.R30 = regs.R3;
		/* 8213720Ch case    6:*/		return 0x82137210;
		  /* 82137210h */ case    7:  		/* cmpwi CR6, R3, -1 */
		/* 82137210h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82137210h case    7:*/		return 0x82137214;
		  /* 82137214h */ case    8:  		/* bc 12, CR6_EQ, 144 */
		/* 82137214h case    8:*/		if ( regs.CR[6].eq ) { return 0x821372A4;  }
		/* 82137214h case    8:*/		return 0x82137218;
		  /* 82137218h */ case    9:  		/* lwz R11, <#[R29 + 12]> */
		/* 82137218h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82137218h case    9:*/		return 0x8213721C;
		  /* 8213721Ch */ case   10:  		/* lwz R4, <#[R29 + 16]> */
		/* 8213721Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 8213721Ch case   10:*/		return 0x82137220;
		  /* 82137220h */ case   11:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82137220h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82137220h case   11:*/		return 0x82137224;
		  /* 82137224h */ case   12:  		/* lwz R3, <#[R31 + 16]> */
		/* 82137224h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82137224h case   12:*/		return 0x82137228;
		  /* 82137228h */ case   13:  		/* bl -678008 */
		/* 82137228h case   13:*/		regs.LR = 0x8213722C; return 0x820919B0;
		/* 82137228h case   13:*/		return 0x8213722C;
		  /* 8213722Ch */ case   14:  		/* lwz R11, <#[R29 + 12]> */
		/* 8213722Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8213722Ch case   14:*/		return 0x82137230;
		  /* 82137230h */ case   15:  		/* lwz R10, <#[R31 + 16]> */
		/* 82137230h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82137230h case   15:*/		return 0x82137234;
		  /* 82137234h */ case   16:  		/* addi R20, R20, 1 */
		/* 82137234h case   16:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82137234h case   16:*/		return 0x82137238;
		  /* 82137238h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137238h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137238h case   17:*/		return 0x8213723C;
		  /* 8213723Ch */ case   18:  		/* add R22, R22, R23 */
		/* 8213723Ch case   18:*/		cpu::op::add<0>(regs,&regs.R22,regs.R22,regs.R23);
		/* 8213723Ch case   18:*/		return 0x82137240;
		  /* 82137240h */ case   19:  		/* add R28, R25, R28 */
		/* 82137240h case   19:*/		cpu::op::add<0>(regs,&regs.R28,regs.R25,regs.R28);
		/* 82137240h case   19:*/		return 0x82137244;
		  /* 82137244h */ case   20:  		/* add R26, R21, R26 */
		/* 82137244h case   20:*/		cpu::op::add<0>(regs,&regs.R26,regs.R21,regs.R26);
		/* 82137244h case   20:*/		return 0x82137248;
		  /* 82137248h */ case   21:  		/* add R24, R21, R24 */
		/* 82137248h case   21:*/		cpu::op::add<0>(regs,&regs.R24,regs.R21,regs.R24);
		/* 82137248h case   21:*/		return 0x8213724C;
		  /* 8213724Ch */ case   22:  		/* cmplw CR6, R20, R19 */
		/* 8213724Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R19);
		/* 8213724Ch case   22:*/		return 0x82137250;
		  /* 82137250h */ case   23:  		/* stwx R30, <#[R11 + R10]> */
		/* 82137250h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137250h case   23:*/		return 0x82137254;
		  /* 82137254h */ case   24:  		/* bc 12, CR6_LT, -352 */
		/* 82137254h case   24:*/		if ( regs.CR[6].lt ) { return 0x821370F4;  }
		/* 82137254h case   24:*/		return 0x82137258;
	}
	return 0x82137258;
} // Block from 821371F4h-82137258h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82137258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137258);
		  /* 82137258h */ case    0:  		/* lwzx R3, <#[R17 + R15]> */
		/* 82137258h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R17 + regs.R15 + 0x00000000) );
		/* 82137258h case    0:*/		return 0x8213725C;
	}
	return 0x8213725C;
} // Block from 82137258h-8213725Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213725Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213725C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213725C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213725C);
		  /* 8213725Ch */ case    0:  		/* mr R4, R31 */
		/* 8213725Ch case    0:*/		regs.R4 = regs.R31;
		/* 8213725Ch case    0:*/		return 0x82137260;
		  /* 82137260h */ case    1:  		/* bl -239888 */
		/* 82137260h case    1:*/		regs.LR = 0x82137264; return 0x820FC950;
		/* 82137260h case    1:*/		return 0x82137264;
		  /* 82137264h */ case    2:  		/* mr R3, R31 */
		/* 82137264h case    2:*/		regs.R3 = regs.R31;
		/* 82137264h case    2:*/		return 0x82137268;
		  /* 82137268h */ case    3:  		/* bl 942424 */
		/* 82137268h case    3:*/		regs.LR = 0x8213726C; return 0x8221D3C0;
		/* 82137268h case    3:*/		return 0x8213726C;
		  /* 8213726Ch */ case    4:  		/* mr R3, R31 */
		/* 8213726Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213726Ch case    4:*/		return 0x82137270;
		  /* 82137270h */ case    5:  		/* bl -240768 */
		/* 82137270h case    5:*/		regs.LR = 0x82137274; return 0x820FC5F0;
		/* 82137270h case    5:*/		return 0x82137274;
		  /* 82137274h */ case    6:  		/* li R31, 0 */
		/* 82137274h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82137274h case    6:*/		return 0x82137278;
		  /* 82137278h */ case    7:  		/* li R30, 0 */
		/* 82137278h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82137278h case    7:*/		return 0x8213727C;
	}
	return 0x8213727C;
} // Block from 8213725Ch-8213727Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213727Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213727C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213727C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213727C);
		  /* 8213727Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8213727Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213727Ch case    0:*/		return 0x82137280;
		  /* 82137280h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82137280h case    1:*/		if ( regs.CR[6].eq ) { return 0x82137294;  }
		/* 82137280h case    1:*/		return 0x82137284;
		  /* 82137284h */ case    2:  		/* mr R3, R31 */
		/* 82137284h case    2:*/		regs.R3 = regs.R31;
		/* 82137284h case    2:*/		return 0x82137288;
		  /* 82137288h */ case    3:  		/* bl 942392 */
		/* 82137288h case    3:*/		regs.LR = 0x8213728C; return 0x8221D3C0;
		/* 82137288h case    3:*/		return 0x8213728C;
		  /* 8213728Ch */ case    4:  		/* mr R3, R31 */
		/* 8213728Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213728Ch case    4:*/		return 0x82137290;
		  /* 82137290h */ case    5:  		/* bl -240800 */
		/* 82137290h case    5:*/		regs.LR = 0x82137294; return 0x820FC5F0;
		/* 82137290h case    5:*/		return 0x82137294;
	}
	return 0x82137294;
} // Block from 8213727Ch-82137294h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82137294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137294);
		  /* 82137294h */ case    0:  		/* mr R3, R30 */
		/* 82137294h case    0:*/		regs.R3 = regs.R30;
		/* 82137294h case    0:*/		return 0x82137298;
	}
	return 0x82137298;
} // Block from 82137294h-82137298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82137298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137298);
		  /* 82137298h */ case    0:  		/* addi R1, R1, 240 */
		/* 82137298h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82137298h case    0:*/		return 0x8213729C;
		  /* 8213729Ch */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8213729Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8213729Ch case    1:*/		return 0x821372A0;
		  /* 821372A0h */ case    2:  		/* b -679984 */
		/* 821372A0h case    2:*/		return 0x82091270;
		/* 821372A0h case    2:*/		return 0x821372A4;
	}
	return 0x821372A4;
} // Block from 82137298h-821372A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821372A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821372A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821372A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821372A4);
		  /* 821372A4h */ case    0:  		/* lis R30, -32761 */
		/* 821372A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 821372A4h case    0:*/		return 0x821372A8;
		  /* 821372A8h */ case    1:  		/* ori R30, R30, 14 */
		/* 821372A8h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 821372A8h case    1:*/		return 0x821372AC;
		  /* 821372ACh */ case    2:  		/* b -48 */
		/* 821372ACh case    2:*/		return 0x8213727C;
		/* 821372ACh case    2:*/		return 0x821372B0;
	}
	return 0x821372B0;
} // Block from 821372A4h-821372B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821372B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821372B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821372B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821372B0);
		  /* 821372B0h */ case    0:  		/* mfspr R12, LR */
		/* 821372B0h case    0:*/		regs.R12 = regs.LR;
		/* 821372B0h case    0:*/		return 0x821372B4;
		  /* 821372B4h */ case    1:  		/* bl -680024 */
		/* 821372B4h case    1:*/		regs.LR = 0x821372B8; return 0x8209125C;
		/* 821372B4h case    1:*/		return 0x821372B8;
		  /* 821372B8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821372B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821372B8h case    2:*/		return 0x821372BC;
		  /* 821372BCh */ case    3:  		/* lwz R11, <#[R3 + 76]> */
		/* 821372BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 821372BCh case    3:*/		return 0x821372C0;
		  /* 821372C0h */ case    4:  		/* mr R31, R3 */
		/* 821372C0h case    4:*/		regs.R31 = regs.R3;
		/* 821372C0h case    4:*/		return 0x821372C4;
		  /* 821372C4h */ case    5:  		/* li R29, 0 */
		/* 821372C4h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821372C4h case    5:*/		return 0x821372C8;
		  /* 821372C8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821372C8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821372C8h case    6:*/		return 0x821372CC;
		  /* 821372CCh */ case    7:  		/* bc 4, CR6_GT, 172 */
		/* 821372CCh case    7:*/		if ( !regs.CR[6].gt ) { return 0x82137378;  }
		/* 821372CCh case    7:*/		return 0x821372D0;
		  /* 821372D0h */ case    8:  		/* li R30, 0 */
		/* 821372D0h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821372D0h case    8:*/		return 0x821372D4;
		  /* 821372D4h */ case    9:  		/* lwz R11, <#[R31 + 564]> */
		/* 821372D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821372D4h case    9:*/		return 0x821372D8;
		  /* 821372D8h */ case   10:  		/* lwzx R10, <#[R30 + R11]> */
		/* 821372D8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821372D8h case   10:*/		return 0x821372DC;
		  /* 821372DCh */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821372DCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821372DCh case   11:*/		return 0x821372E0;
		  /* 821372E0h */ case   12:  		/* bc 12, CR6_EQ, 132 */
		/* 821372E0h case   12:*/		if ( regs.CR[6].eq ) { return 0x82137364;  }
		/* 821372E0h case   12:*/		return 0x821372E4;
		  /* 821372E4h */ case   13:  		/* rlwinm R10, R11, 0, 0, 31 */
		/* 821372E4h case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R11);
		/* 821372E4h case   13:*/		return 0x821372E8;
		  /* 821372E8h */ case   14:  		/* lis R9, 24656 */
		/* 821372E8h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0x6050);
		/* 821372E8h case   14:*/		return 0x821372EC;
		  /* 821372ECh */ case   15:  		/* lwzx R10, <#[R30 + R10]> */
		/* 821372ECh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 821372ECh case   15:*/		return 0x821372F0;
		  /* 821372F0h */ case   16:  		/* lwz R10, <#[R10]> */
		/* 821372F0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821372F0h case   16:*/		return 0x821372F4;
		  /* 821372F4h */ case   17:  		/* rlwinm R8, R10, 0, 0, 11 */
		/* 821372F4h case   17:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R8,regs.R10);
		/* 821372F4h case   17:*/		return 0x821372F8;
		  /* 821372F8h */ case   18:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 821372F8h case   18:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 821372F8h case   18:*/		return 0x821372FC;
		  /* 821372FCh */ case   19:  		/* cmplw CR6, R8, R9 */
		/* 821372FCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821372FCh case   19:*/		return 0x82137300;
		  /* 82137300h */ case   20:  		/* bc 12, CR6_EQ, 28 */
		/* 82137300h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213731C;  }
		/* 82137300h case   20:*/		return 0x82137304;
		  /* 82137304h */ case   21:  		/* lwzx R9, <#[R30 + R11]> */
		/* 82137304h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82137304h case   21:*/		return 0x82137308;
		  /* 82137308h */ case   22:  		/* lis R8, 24576 */
		/* 82137308h case   22:*/		cpu::op::lis<0>(regs,&regs.R8,0x6000);
		/* 82137308h case   22:*/		return 0x8213730C;
		  /* 8213730Ch */ case   23:  		/* lwz R9, <#[R9]> */
		/* 8213730Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8213730Ch case   23:*/		return 0x82137310;
		  /* 82137310h */ case   24:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 82137310h case   24:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 82137310h case   24:*/		return 0x82137314;
		  /* 82137314h */ case   25:  		/* cmplw CR6, R9, R8 */
		/* 82137314h case   25:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82137314h case   25:*/		return 0x82137318;
		  /* 82137318h */ case   26:  		/* bc 4, CR6_EQ, 76 */
		/* 82137318h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82137364;  }
		/* 82137318h case   26:*/		return 0x8213731C;
	}
	return 0x8213731C;
} // Block from 821372B0h-8213731Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213731Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213731C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213731C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213731C);
		  /* 8213731Ch */ case    0:  		/* lwzx R11, <#[R30 + R11]> */
		/* 8213731Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213731Ch case    0:*/		return 0x82137320;
		  /* 82137320h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82137320h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82137320h case    1:*/		return 0x82137324;
		  /* 82137324h */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 82137324h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82137324h case    2:*/		return 0x82137328;
		  /* 82137328h */ case    3:  		/* lwz R8, <#[R31 + 136]> */
		/* 82137328h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000088) );
		/* 82137328h case    3:*/		return 0x8213732C;
		  /* 8213732Ch */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8213732Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8213732Ch case    4:*/		return 0x82137330;
		  /* 82137330h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82137330h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137330h case    5:*/		return 0x82137334;
		  /* 82137334h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137334h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137334h case    6:*/		return 0x82137338;
		  /* 82137338h */ case    7:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82137338h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82137338h case    7:*/		return 0x8213733C;
		  /* 8213733Ch */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 8213733Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213733Ch case    8:*/		return 0x82137340;
		  /* 82137340h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 82137340h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82137340h case    9:*/		return 0x82137344;
		  /* 82137344h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 82137344h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82137364;  }
		/* 82137344h case   10:*/		return 0x82137348;
		  /* 82137348h */ case   11:  		/* mr R3, R31 */
		/* 82137348h case   11:*/		regs.R3 = regs.R31;
		/* 82137348h case   11:*/		return 0x8213734C;
		  /* 8213734Ch */ case   12:  		/* lwz R6, <#[R11 + 12]> */
		/* 8213734Ch case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213734Ch case   12:*/		return 0x82137350;
		  /* 82137350h */ case   13:  		/* lwz R5, <#[R31 + 548]> */
		/* 82137350h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000224) );
		/* 82137350h case   13:*/		return 0x82137354;
		  /* 82137354h */ case   14:  		/* lwz R4, <#[R31 + 560]> */
		/* 82137354h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82137354h case   14:*/		return 0x82137358;
		  /* 82137358h */ case   15:  		/* bl -1288 */
		/* 82137358h case   15:*/		regs.LR = 0x8213735C; return 0x82136E50;
		/* 82137358h case   15:*/		return 0x8213735C;
		  /* 8213735Ch */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213735Ch case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213735Ch case   16:*/		return 0x82137360;
		  /* 82137360h */ case   17:  		/* bc 12, CR0_LT, 28 */
		/* 82137360h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213737C;  }
		/* 82137360h case   17:*/		return 0x82137364;
	}
	return 0x82137364;
} // Block from 8213731Ch-82137364h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82137364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137364);
		  /* 82137364h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 82137364h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82137364h case    0:*/		return 0x82137368;
		  /* 82137368h */ case    1:  		/* addi R29, R29, 1 */
		/* 82137368h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82137368h case    1:*/		return 0x8213736C;
		  /* 8213736Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 8213736Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213736Ch case    2:*/		return 0x82137370;
		  /* 82137370h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 82137370h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82137370h case    3:*/		return 0x82137374;
		  /* 82137374h */ case    4:  		/* bc 12, CR6_LT, -160 */
		/* 82137374h case    4:*/		if ( regs.CR[6].lt ) { return 0x821372D4;  }
		/* 82137374h case    4:*/		return 0x82137378;
	}
	return 0x82137378;
} // Block from 82137364h-82137378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82137378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137378);
		  /* 82137378h */ case    0:  		/* li R3, 0 */
		/* 82137378h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82137378h case    0:*/		return 0x8213737C;
	}
	return 0x8213737C;
} // Block from 82137378h-8213737Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213737Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213737C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213737C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213737C);
		  /* 8213737Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8213737Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8213737Ch case    0:*/		return 0x82137380;
		  /* 82137380h */ case    1:  		/* b -680148 */
		/* 82137380h case    1:*/		return 0x820912AC;
		/* 82137380h case    1:*/		return 0x82137384;
		  /* 82137384h */ case    2:  		/* nop */
		/* 82137384h case    2:*/		cpu::op::nop();
		/* 82137384h case    2:*/		return 0x82137388;
	}
	return 0x82137388;
} // Block from 8213737Ch-82137388h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137388);
		  /* 82137388h */ case    0:  		/* mfspr R12, LR */
		/* 82137388h case    0:*/		regs.R12 = regs.LR;
		/* 82137388h case    0:*/		return 0x8213738C;
		  /* 8213738Ch */ case    1:  		/* bl -680300 */
		/* 8213738Ch case    1:*/		regs.LR = 0x82137390; return 0x82091220;
		/* 8213738Ch case    1:*/		return 0x82137390;
		  /* 82137390h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82137390h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82137390h case    2:*/		return 0x82137394;
		  /* 82137394h */ case    3:  		/* stwu R1, <#[R1 - 768]> */
		/* 82137394h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD00);
		/* 82137394h case    3:*/		return 0x82137398;
		  /* 82137398h */ case    4:  		/* mr R31, R3 */
		/* 82137398h case    4:*/		regs.R31 = regs.R3;
		/* 82137398h case    4:*/		return 0x8213739C;
		  /* 8213739Ch */ case    5:  		/* stw R4, <#[R1 + 796]> */
		/* 8213739Ch case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000031C) );
		/* 8213739Ch case    5:*/		return 0x821373A0;
		  /* 821373A0h */ case    6:  		/* mr R15, R4 */
		/* 821373A0h case    6:*/		regs.R15 = regs.R4;
		/* 821373A0h case    6:*/		return 0x821373A4;
		  /* 821373A4h */ case    7:  		/* stw R5, <#[R1 + 804]> */
		/* 821373A4h case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000324) );
		/* 821373A4h case    7:*/		return 0x821373A8;
		  /* 821373A8h */ case    8:  		/* mr R16, R5 */
		/* 821373A8h case    8:*/		regs.R16 = regs.R5;
		/* 821373A8h case    8:*/		return 0x821373AC;
		  /* 821373ACh */ case    9:  		/* li R20, 0 */
		/* 821373ACh case    9:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821373ACh case    9:*/		return 0x821373B0;
		  /* 821373B0h */ case   10:  		/* li R5, 96 */
		/* 821373B0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x60);
		/* 821373B0h case   10:*/		return 0x821373B4;
		  /* 821373B4h */ case   11:  		/* li R4, 0 */
		/* 821373B4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821373B4h case   11:*/		return 0x821373B8;
		  /* 821373B8h */ case   12:  		/* stw R20, <#[R1 + 104]> */
		/* 821373B8h case   12:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000068) );
		/* 821373B8h case   12:*/		return 0x821373BC;
		  /* 821373BCh */ case   13:  		/* addi R3, R1, 480 */
		/* 821373BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1E0);
		/* 821373BCh case   13:*/		return 0x821373C0;
		  /* 821373C0h */ case   14:  		/* mr R19, R20 */
		/* 821373C0h case   14:*/		regs.R19 = regs.R20;
		/* 821373C0h case   14:*/		return 0x821373C4;
		  /* 821373C4h */ case   15:  		/* bl -680068 */
		/* 821373C4h case   15:*/		regs.LR = 0x821373C8; return 0x82091340;
		/* 821373C4h case   15:*/		return 0x821373C8;
		  /* 821373C8h */ case   16:  		/* addi R11, R1, 160 */
		/* 821373C8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 821373C8h case   16:*/		return 0x821373CC;
		  /* 821373CCh */ case   17:  		/* li R5, 96 */
		/* 821373CCh case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x60);
		/* 821373CCh case   17:*/		return 0x821373D0;
		  /* 821373D0h */ case   18:  		/* li R4, 0 */
		/* 821373D0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821373D0h case   18:*/		return 0x821373D4;
		  /* 821373D4h */ case   19:  		/* addi R3, R1, 192 */
		/* 821373D4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 821373D4h case   19:*/		return 0x821373D8;
		  /* 821373D8h */ case   20:  		/* std R20, <#[R11]> */
		/* 821373D8h case   20:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 821373D8h case   20:*/		return 0x821373DC;
		  /* 821373DCh */ case   21:  		/* std R20, <#[R11 + 8]> */
		/* 821373DCh case   21:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000008) );
		/* 821373DCh case   21:*/		return 0x821373E0;
		  /* 821373E0h */ case   22:  		/* std R20, <#[R11 + 16]> */
		/* 821373E0h case   22:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000010) );
		/* 821373E0h case   22:*/		return 0x821373E4;
		  /* 821373E4h */ case   23:  		/* bl -680100 */
		/* 821373E4h case   23:*/		regs.LR = 0x821373E8; return 0x82091340;
		/* 821373E4h case   23:*/		return 0x821373E8;
		  /* 821373E8h */ case   24:  		/* addi R10, R1, 128 */
		/* 821373E8h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 821373E8h case   24:*/		return 0x821373EC;
		  /* 821373ECh */ case   25:  		/* addi R8, R1, 416 */
		/* 821373ECh case   25:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1A0);
		/* 821373ECh case   25:*/		return 0x821373F0;
		  /* 821373F0h */ case   26:  		/* lwz R9, <#[R31 + 8]> */
		/* 821373F0h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821373F0h case   26:*/		return 0x821373F4;
		  /* 821373F4h */ case   27:  		/* addi R7, R1, 448 */
		/* 821373F4h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C0);
		/* 821373F4h case   27:*/		return 0x821373F8;
		  /* 821373F8h */ case   28:  		/* li R17, -1 */
		/* 821373F8h case   28:*/		cpu::op::li<0>(regs,&regs.R17,0xFFFFFFFF);
		/* 821373F8h case   28:*/		return 0x821373FC;
		  /* 821373FCh */ case   29:  		/* mr R11, R20 */
		/* 821373FCh case   29:*/		regs.R11 = regs.R20;
		/* 821373FCh case   29:*/		return 0x82137400;
		  /* 82137400h */ case   30:  		/* std R20, <#[R10]> */
		/* 82137400h case   30:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000000) );
		/* 82137400h case   30:*/		return 0x82137404;
		  /* 82137404h */ case   31:  		/* cmplwi CR6, R9, 0 */
		/* 82137404h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82137404h case   31:*/		return 0x82137408;
		  /* 82137408h */ case   32:  		/* std R20, <#[R8]> */
		/* 82137408h case   32:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R8 + 0x00000000) );
		/* 82137408h case   32:*/		return 0x8213740C;
		  /* 8213740Ch */ case   33:  		/* std R20, <#[R7]> */
		/* 8213740Ch case   33:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R7 + 0x00000000) );
		/* 8213740Ch case   33:*/		return 0x82137410;
		  /* 82137410h */ case   34:  		/* std R20, <#[R10 + 8]> */
		/* 82137410h case   34:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000008) );
		/* 82137410h case   34:*/		return 0x82137414;
		  /* 82137414h */ case   35:  		/* std R20, <#[R8 + 8]> */
		/* 82137414h case   35:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R8 + 0x00000008) );
		/* 82137414h case   35:*/		return 0x82137418;
		  /* 82137418h */ case   36:  		/* std R20, <#[R7 + 8]> */
		/* 82137418h case   36:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R7 + 0x00000008) );
		/* 82137418h case   36:*/		return 0x8213741C;
		  /* 8213741Ch */ case   37:  		/* std R20, <#[R10 + 16]> */
		/* 8213741Ch case   37:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R10 + 0x00000010) );
		/* 8213741Ch case   37:*/		return 0x82137420;
		  /* 82137420h */ case   38:  		/* std R20, <#[R8 + 16]> */
		/* 82137420h case   38:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R8 + 0x00000010) );
		/* 82137420h case   38:*/		return 0x82137424;
		  /* 82137424h */ case   39:  		/* std R20, <#[R7 + 16]> */
		/* 82137424h case   39:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R7 + 0x00000010) );
		/* 82137424h case   39:*/		return 0x82137428;
		  /* 82137428h */ case   40:  		/* bc 4, CR6_GT, 56 */
		/* 82137428h case   40:*/		if ( !regs.CR[6].gt ) { return 0x82137460;  }
		/* 82137428h case   40:*/		return 0x8213742C;
		  /* 8213742Ch */ case   41:  		/* mr R10, R20 */
		/* 8213742Ch case   41:*/		regs.R10 = regs.R20;
		/* 8213742Ch case   41:*/		return 0x82137430;
		  /* 82137430h */ case   42:  		/* lwz R9, <#[R31 + 20]> */
		/* 82137430h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82137430h case   42:*/		return 0x82137434;
		  /* 82137434h */ case   43:  		/* lwz R8, <#[R31 + 136]> */
		/* 82137434h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000088) );
		/* 82137434h case   43:*/		return 0x82137438;
		  /* 82137438h */ case   44:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82137438h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82137438h case   44:*/		return 0x8213743C;
		  /* 8213743Ch */ case   45:  		/* lwz R7, <#[R9 + 4]> */
		/* 8213743Ch case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		/* 8213743Ch case   45:*/		return 0x82137440;
		  /* 82137440h */ case   46:  		/* cmplw CR6, R7, R8 */
		/* 82137440h case   46:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 82137440h case   46:*/		return 0x82137444;
		  /* 82137444h */ case   47:  		/* bc 4, CR6_EQ, 8 */
		/* 82137444h case   47:*/		if ( !regs.CR[6].eq ) { return 0x8213744C;  }
		/* 82137444h case   47:*/		return 0x82137448;
		  /* 82137448h */ case   48:  		/* stw R17, <#[R9 + 12]> */
		/* 82137448h case   48:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R9 + 0x0000000C) );
		/* 82137448h case   48:*/		return 0x8213744C;
	}
	return 0x8213744C;
} // Block from 82137388h-8213744Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 8213744Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213744C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213744C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213744C);
		  /* 8213744Ch */ case    0:  		/* lwz R9, <#[R31 + 8]> */
		/* 8213744Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8213744Ch case    0:*/		return 0x82137450;
		  /* 82137450h */ case    1:  		/* addi R11, R11, 1 */
		/* 82137450h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82137450h case    1:*/		return 0x82137454;
		  /* 82137454h */ case    2:  		/* addi R10, R10, 4 */
		/* 82137454h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82137454h case    2:*/		return 0x82137458;
		  /* 82137458h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 82137458h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82137458h case    3:*/		return 0x8213745C;
		  /* 8213745Ch */ case    4:  		/* bc 12, CR6_LT, -44 */
		/* 8213745Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82137430;  }
		/* 8213745Ch case    4:*/		return 0x82137460;
	}
	return 0x82137460;
} // Block from 8213744Ch-82137460h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82137460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137460);
		  /* 82137460h */ case    0:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137460h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137460h case    0:*/		return 0x82137464;
		  /* 82137464h */ case    1:  		/* li R18, 1 */
		/* 82137464h case    1:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 82137464h case    1:*/		return 0x82137468;
		  /* 82137468h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82137468h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82137468h case    2:*/		return 0x8213746C;
		  /* 8213746Ch */ case    3:  		/* bc 12, CR6_EQ, 1480 */
		/* 8213746Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82137A34;  }
		/* 8213746Ch case    3:*/		return 0x82137470;
		  /* 82137470h */ case    4:  		/* lwz R6, <#[R31 + 548]> */
		/* 82137470h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 82137470h case    4:*/		return 0x82137474;
		  /* 82137474h */ case    5:  		/* mr R21, R20 */
		/* 82137474h case    5:*/		regs.R21 = regs.R20;
		/* 82137474h case    5:*/		return 0x82137478;
		  /* 82137478h */ case    6:  		/* cmplwi CR6, R6, 0 */
		/* 82137478h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82137478h case    6:*/		return 0x8213747C;
		  /* 8213747Ch */ case    7:  		/* bc 12, CR6_EQ, 1464 */
		/* 8213747Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82137A34;  }
		/* 8213747Ch case    7:*/		return 0x82137480;
		  /* 82137480h */ case    8:  		/* mr R23, R20 */
		/* 82137480h case    8:*/		regs.R23 = regs.R20;
		/* 82137480h case    8:*/		return 0x82137484;
		  /* 82137484h */ case    9:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137484h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137484h case    9:*/		return 0x82137488;
		  /* 82137488h */ case   10:  		/* lwzx R10, <#[R11 + R23]> */
		/* 82137488h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82137488h case   10:*/		return 0x8213748C;
		  /* 8213748Ch */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8213748Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213748Ch case   11:*/		return 0x82137490;
		  /* 82137490h */ case   12:  		/* bc 12, CR6_EQ, 1424 */
		/* 82137490h case   12:*/		if ( regs.CR[6].eq ) { return 0x82137A20;  }
		/* 82137490h case   12:*/		return 0x82137494;
		  /* 82137494h */ case   13:  		/* rlwinm R4, R10, 0, 0, 31 */
		/* 82137494h case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R10);
		/* 82137494h case   13:*/		return 0x82137498;
		  /* 82137498h */ case   14:  		/* lwz R11, <#[R4]> */
		/* 82137498h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82137498h case   14:*/		return 0x8213749C;
		  /* 8213749Ch */ case   15:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 8213749Ch case   15:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213749Ch case   15:*/		return 0x821374A0;
		  /* 821374A0h */ case   16:  		/* bc 12, CR0_EQ, 1408 */
		/* 821374A0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82137A20;  }
		/* 821374A0h case   16:*/		return 0x821374A4;
		  /* 821374A4h */ case   17:  		/* lis R10, 4352 */
		/* 821374A4h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 821374A4h case   17:*/		return 0x821374A8;
		  /* 821374A8h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 821374A8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374A8h case   18:*/		return 0x821374AC;
		  /* 821374ACh */ case   19:  		/* bc 12, CR6_EQ, 1396 */
		/* 821374ACh case   19:*/		if ( regs.CR[6].eq ) { return 0x82137A20;  }
		/* 821374ACh case   19:*/		return 0x821374B0;
		  /* 821374B0h */ case   20:  		/* lis R10, 24576 */
		/* 821374B0h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 821374B0h case   20:*/		return 0x821374B4;
		  /* 821374B4h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 821374B4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374B4h case   21:*/		return 0x821374B8;
		  /* 821374B8h */ case   22:  		/* bc 12, CR6_EQ, 868 */
		/* 821374B8h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374B8h case   22:*/		return 0x821374BC;
		  /* 821374BCh */ case   23:  		/* lis R10, 24656 */
		/* 821374BCh case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 821374BCh case   23:*/		return 0x821374C0;
		  /* 821374C0h */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 821374C0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374C0h case   24:*/		return 0x821374C4;
		  /* 821374C4h */ case   25:  		/* bc 12, CR6_EQ, 856 */
		/* 821374C4h case   25:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374C4h case   25:*/		return 0x821374C8;
		  /* 821374C8h */ case   26:  		/* lis R10, 24736 */
		/* 821374C8h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 821374C8h case   26:*/		return 0x821374CC;
		  /* 821374CCh */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 821374CCh case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374CCh case   27:*/		return 0x821374D0;
		  /* 821374D0h */ case   28:  		/* bc 12, CR6_EQ, 844 */
		/* 821374D0h case   28:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374D0h case   28:*/		return 0x821374D4;
		  /* 821374D4h */ case   29:  		/* lis R10, 29408 */
		/* 821374D4h case   29:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 821374D4h case   29:*/		return 0x821374D8;
		  /* 821374D8h */ case   30:  		/* cmplw CR6, R11, R10 */
		/* 821374D8h case   30:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374D8h case   30:*/		return 0x821374DC;
		  /* 821374DCh */ case   31:  		/* bc 12, CR6_EQ, 832 */
		/* 821374DCh case   31:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374DCh case   31:*/		return 0x821374E0;
		  /* 821374E0h */ case   32:  		/* lis R10, 24688 */
		/* 821374E0h case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 821374E0h case   32:*/		return 0x821374E4;
		  /* 821374E4h */ case   33:  		/* cmplw CR6, R11, R10 */
		/* 821374E4h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374E4h case   33:*/		return 0x821374E8;
		  /* 821374E8h */ case   34:  		/* bc 12, CR6_EQ, 820 */
		/* 821374E8h case   34:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374E8h case   34:*/		return 0x821374EC;
		  /* 821374ECh */ case   35:  		/* lis R10, 24816 */
		/* 821374ECh case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 821374ECh case   35:*/		return 0x821374F0;
		  /* 821374F0h */ case   36:  		/* cmplw CR6, R11, R10 */
		/* 821374F0h case   36:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374F0h case   36:*/		return 0x821374F4;
		  /* 821374F4h */ case   37:  		/* bc 12, CR6_EQ, 808 */
		/* 821374F4h case   37:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 821374F4h case   37:*/		return 0x821374F8;
		  /* 821374F8h */ case   38:  		/* lis R10, 29200 */
		/* 821374F8h case   38:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 821374F8h case   38:*/		return 0x821374FC;
		  /* 821374FCh */ case   39:  		/* cmplw CR6, R11, R10 */
		/* 821374FCh case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821374FCh case   39:*/		return 0x82137500;
		  /* 82137500h */ case   40:  		/* bc 12, CR6_EQ, 796 */
		/* 82137500h case   40:*/		if ( regs.CR[6].eq ) { return 0x8213781C;  }
		/* 82137500h case   40:*/		return 0x82137504;
		  /* 82137504h */ case   41:  		/* lwz R9, <#[R4 + 12]> */
		/* 82137504h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000000C) );
		/* 82137504h case   41:*/		return 0x82137508;
		  /* 82137508h */ case   42:  		/* mr R5, R20 */
		/* 82137508h case   42:*/		regs.R5 = regs.R20;
		/* 82137508h case   42:*/		return 0x8213750C;
		  /* 8213750Ch */ case   43:  		/* mr R7, R20 */
		/* 8213750Ch case   43:*/		regs.R7 = regs.R20;
		/* 8213750Ch case   43:*/		return 0x82137510;
		  /* 82137510h */ case   44:  		/* mr R10, R20 */
		/* 82137510h case   44:*/		regs.R10 = regs.R20;
		/* 82137510h case   44:*/		return 0x82137514;
		  /* 82137514h */ case   45:  		/* cmplwi CR6, R9, 0 */
		/* 82137514h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82137514h case   45:*/		return 0x82137518;
		  /* 82137518h */ case   46:  		/* bc 12, CR6_EQ, 92 */
		/* 82137518h case   46:*/		if ( regs.CR[6].eq ) { return 0x82137574;  }
		/* 82137518h case   46:*/		return 0x8213751C;
		  /* 8213751Ch */ case   47:  		/* lwz R8, <#[R31 + 20]> */
		/* 8213751Ch case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8213751Ch case   47:*/		return 0x82137520;
		  /* 82137520h */ case   48:  		/* mr R11, R20 */
		/* 82137520h case   48:*/		regs.R11 = regs.R20;
		/* 82137520h case   48:*/		return 0x82137524;
		  /* 82137524h */ case   49:  		/* lwz R3, <#[R4 + 16]> */
		/* 82137524h case   49:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000010) );
		/* 82137524h case   49:*/		return 0x82137528;
		  /* 82137528h */ case   50:  		/* lwzx R3, <#[R3 + R11]> */
		/* 82137528h case   50:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82137528h case   50:*/		return 0x8213752C;
		  /* 8213752Ch */ case   51:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 8213752Ch case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 8213752Ch case   51:*/		return 0x82137530;
		  /* 82137530h */ case   52:  		/* lwzx R3, <#[R3 + R8]> */
		/* 82137530h case   52:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 82137530h case   52:*/		return 0x82137534;
		  /* 82137534h */ case   53:  		/* lwz R3, <#[R3 + 12]> */
		/* 82137534h case   53:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 82137534h case   53:*/		return 0x82137538;
		  /* 82137538h */ case   54:  		/* cmpwi CR6, R3, -1 */
		/* 82137538h case   54:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82137538h case   54:*/		return 0x8213753C;
		  /* 8213753Ch */ case   55:  		/* bc 4, CR6_EQ, 12 */
		/* 8213753Ch case   55:*/		if ( !regs.CR[6].eq ) { return 0x82137548;  }
		/* 8213753Ch case   55:*/		return 0x82137540;
		  /* 82137540h */ case   56:  		/* mr R5, R18 */
		/* 82137540h case   56:*/		regs.R5 = regs.R18;
		/* 82137540h case   56:*/		return 0x82137544;
		  /* 82137544h */ case   57:  		/* b 8 */
		/* 82137544h case   57:*/		return 0x8213754C;
		/* 82137544h case   57:*/		return 0x82137548;
	}
	return 0x82137548;
} // Block from 82137460h-82137548h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82137548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137548);
		  /* 82137548h */ case    0:  		/* mr R7, R18 */
		/* 82137548h case    0:*/		regs.R7 = regs.R18;
		/* 82137548h case    0:*/		return 0x8213754C;
	}
	return 0x8213754C;
} // Block from 82137548h-8213754Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213754Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213754C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213754C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213754C);
		  /* 8213754Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 8213754Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213754Ch case    0:*/		return 0x82137550;
		  /* 82137550h */ case    1:  		/* addi R11, R11, 4 */
		/* 82137550h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82137550h case    1:*/		return 0x82137554;
		  /* 82137554h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 82137554h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82137554h case    2:*/		return 0x82137558;
		  /* 82137558h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 82137558h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137524;  }
		/* 82137558h case    3:*/		return 0x8213755C;
		  /* 8213755Ch */ case    4:  		/* cmpwi CR6, R7, 0 */
		/* 8213755Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8213755Ch case    4:*/		return 0x82137560;
		  /* 82137560h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82137560h case    5:*/		if ( regs.CR[6].eq ) { return 0x82137574;  }
		/* 82137560h case    5:*/		return 0x82137564;
		  /* 82137564h */ case    6:  		/* cmpwi CR6, R5, 0 */
		/* 82137564h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82137564h case    6:*/		return 0x82137568;
		  /* 82137568h */ case    7:  		/* bc 12, CR6_EQ, 1208 */
		/* 82137568h case    7:*/		if ( regs.CR[6].eq ) { return 0x82137A20;  }
		/* 82137568h case    7:*/		return 0x8213756C;
		  /* 8213756Ch */ case    8:  		/* li R5, 4808 */
		/* 8213756Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x12C8);
		/* 8213756Ch case    8:*/		return 0x82137570;
		  /* 82137570h */ case    9:  		/* b 1896 */
		/* 82137570h case    9:*/		return 0x82137CD8;
		/* 82137570h case    9:*/		return 0x82137574;
	}
	return 0x82137574;
} // Block from 8213754Ch-82137574h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82137574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137574);
		  /* 82137574h */ case    0:  		/* stw R20, <#[R1 + 96]> */
		/* 82137574h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 82137574h case    0:*/		return 0x82137578;
		  /* 82137578h */ case    1:  		/* addi R22, R21, 1 */
		/* 82137578h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R21,0x1);
		/* 82137578h case    1:*/		return 0x8213757C;
		  /* 8213757Ch */ case    2:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213757Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213757Ch case    2:*/		return 0x82137580;
		  /* 82137580h */ case    3:  		/* addi R10, R1, 96 */
		/* 82137580h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82137580h case    3:*/		return 0x82137584;
		  /* 82137584h */ case    4:  		/* addi R9, R1, 288 */
		/* 82137584h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x120);
		/* 82137584h case    4:*/		return 0x82137588;
		  /* 82137588h */ case    5:  		/* mr R5, R22 */
		/* 82137588h case    5:*/		regs.R5 = regs.R22;
		/* 82137588h case    5:*/		return 0x8213758C;
		  /* 8213758Ch */ case    6:  		/* mr R3, R31 */
		/* 8213758Ch case    6:*/		regs.R3 = regs.R31;
		/* 8213758Ch case    6:*/		return 0x82137590;
		  /* 82137590h */ case    7:  		/* lwzx R11, <#[R23 + R4]> */
		/* 82137590h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R4 + 0x00000000) );
		/* 82137590h case    7:*/		return 0x82137594;
		  /* 82137594h */ case    8:  		/* lwz R8, <#[R11 + 12]> */
		/* 82137594h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137594h case    8:*/		return 0x82137598;
		  /* 82137598h */ case    9:  		/* lwz R7, <#[R11 + 16]> */
		/* 82137598h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82137598h case    9:*/		return 0x8213759C;
		  /* 8213759Ch */ case   10:  		/* bl -5132 */
		/* 8213759Ch case   10:*/		regs.LR = 0x821375A0; return 0x82136190;
		/* 8213759Ch case   10:*/		return 0x821375A0;
		  /* 821375A0h */ case   11:  		/* lwz R11, <#[R31 + 560]> */
		/* 821375A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 821375A0h case   11:*/		return 0x821375A4;
		  /* 821375A4h */ case   12:  		/* addi R10, R1, 96 */
		/* 821375A4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821375A4h case   12:*/		return 0x821375A8;
		  /* 821375A8h */ case   13:  		/* lwz R6, <#[R31 + 552]> */
		/* 821375A8h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 821375A8h case   13:*/		return 0x821375AC;
		  /* 821375ACh */ case   14:  		/* addi R9, R1, 288 */
		/* 821375ACh case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x120);
		/* 821375ACh case   14:*/		return 0x821375B0;
		  /* 821375B0h */ case   15:  		/* lwz R4, <#[R31 + 564]> */
		/* 821375B0h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821375B0h case   15:*/		return 0x821375B4;
		  /* 821375B4h */ case   16:  		/* li R5, 0 */
		/* 821375B4h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821375B4h case   16:*/		return 0x821375B8;
		  /* 821375B8h */ case   17:  		/* mr R3, R31 */
		/* 821375B8h case   17:*/		regs.R3 = regs.R31;
		/* 821375B8h case   17:*/		return 0x821375BC;
		  /* 821375BCh */ case   18:  		/* lwzx R11, <#[R11 + R23]> */
		/* 821375BCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821375BCh case   18:*/		return 0x821375C0;
		  /* 821375C0h */ case   19:  		/* lwz R8, <#[R11 + 12]> */
		/* 821375C0h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821375C0h case   19:*/		return 0x821375C4;
		  /* 821375C4h */ case   20:  		/* lwz R7, <#[R11 + 16]> */
		/* 821375C4h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 821375C4h case   20:*/		return 0x821375C8;
		  /* 821375C8h */ case   21:  		/* bl -5176 */
		/* 821375C8h case   21:*/		regs.LR = 0x821375CC; return 0x82136190;
		/* 821375C8h case   21:*/		return 0x821375CC;
		  /* 821375CCh */ case   22:  		/* lwz R28, <#[R1 + 96]> */
		/* 821375CCh case   22:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 821375CCh case   22:*/		return 0x821375D0;
		  /* 821375D0h */ case   23:  		/* addi R7, R1, 96 */
		/* 821375D0h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821375D0h case   23:*/		return 0x821375D4;
		  /* 821375D4h */ case   24:  		/* lwz R5, <#[R31 + 548]> */
		/* 821375D4h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000224) );
		/* 821375D4h case   24:*/		return 0x821375D8;
		  /* 821375D8h */ case   25:  		/* addi R6, R1, 288 */
		/* 821375D8h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 821375D8h case   25:*/		return 0x821375DC;
		  /* 821375DCh */ case   26:  		/* lwz R4, <#[R31 + 560]> */
		/* 821375DCh case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 821375DCh case   26:*/		return 0x821375E0;
		  /* 821375E0h */ case   27:  		/* mr R3, R31 */
		/* 821375E0h case   27:*/		regs.R3 = regs.R31;
		/* 821375E0h case   27:*/		return 0x821375E4;
		  /* 821375E4h */ case   28:  		/* mr R30, R28 */
		/* 821375E4h case   28:*/		regs.R30 = regs.R28;
		/* 821375E4h case   28:*/		return 0x821375E8;
		  /* 821375E8h */ case   29:  		/* bl -5560 */
		/* 821375E8h case   29:*/		regs.LR = 0x821375EC; return 0x82136030;
		/* 821375E8h case   29:*/		return 0x821375EC;
		  /* 821375ECh */ case   30:  		/* addi R7, R1, 96 */
		/* 821375ECh case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821375ECh case   30:*/		return 0x821375F0;
		  /* 821375F0h */ case   31:  		/* addi R6, R1, 288 */
		/* 821375F0h case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 821375F0h case   31:*/		return 0x821375F4;
		  /* 821375F4h */ case   32:  		/* lwz R5, <#[R31 + 552]> */
		/* 821375F4h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000228) );
		/* 821375F4h case   32:*/		return 0x821375F8;
		  /* 821375F8h */ case   33:  		/* mr R3, R31 */
		/* 821375F8h case   33:*/		regs.R3 = regs.R31;
		/* 821375F8h case   33:*/		return 0x821375FC;
		  /* 821375FCh */ case   34:  		/* lwz R4, <#[R31 + 564]> */
		/* 821375FCh case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821375FCh case   34:*/		return 0x82137600;
		  /* 82137600h */ case   35:  		/* bl -5584 */
		/* 82137600h case   35:*/		regs.LR = 0x82137604; return 0x82136030;
		/* 82137600h case   35:*/		return 0x82137604;
		  /* 82137604h */ case   36:  		/* lwz R28, <#[R1 + 96]> */
		/* 82137604h case   36:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 82137604h case   36:*/		return 0x82137608;
		  /* 82137608h */ case   37:  		/* cmplw CR6, R30, R28 */
		/* 82137608h case   37:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82137608h case   37:*/		return 0x8213760C;
		  /* 8213760Ch */ case   38:  		/* bc 4, CR6_EQ, -60 */
		/* 8213760Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x821375D0;  }
		/* 8213760Ch case   38:*/		return 0x82137610;
		  /* 82137610h */ case   39:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137610h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137610h case   39:*/		return 0x82137614;
		  /* 82137614h */ case   40:  		/* mr R27, R20 */
		/* 82137614h case   40:*/		regs.R27 = regs.R20;
		/* 82137614h case   40:*/		return 0x82137618;
		  /* 82137618h */ case   41:  		/* mr R29, R20 */
		/* 82137618h case   41:*/		regs.R29 = regs.R20;
		/* 82137618h case   41:*/		return 0x8213761C;
		  /* 8213761Ch */ case   42:  		/* lwzx R11, <#[R11 + R23]> */
		/* 8213761Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 8213761Ch case   42:*/		return 0x82137620;
		  /* 82137620h */ case   43:  		/* lwz R10, <#[R11 + 12]> */
		/* 82137620h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137620h case   43:*/		return 0x82137624;
		  /* 82137624h */ case   44:  		/* cmplwi CR6, R10, 1 */
		/* 82137624h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82137624h case   44:*/		return 0x82137628;
		  /* 82137628h */ case   45:  		/* bc 4, CR6_EQ, 44 */
		/* 82137628h case   45:*/		if ( !regs.CR[6].eq ) { return 0x82137654;  }
		/* 82137628h case   45:*/		return 0x8213762C;
		  /* 8213762Ch */ case   46:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213762Ch case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213762Ch case   46:*/		return 0x82137630;
		  /* 82137630h */ case   47:  		/* lwz R10, <#[R31 + 20]> */
		/* 82137630h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82137630h case   47:*/		return 0x82137634;
		  /* 82137634h */ case   48:  		/* lwz R11, <#[R11]> */
		/* 82137634h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82137634h case   48:*/		return 0x82137638;
		  /* 82137638h */ case   49:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137638h case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137638h case   49:*/		return 0x8213763C;
		  /* 8213763Ch */ case   50:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213763Ch case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213763Ch case   50:*/		return 0x82137640;
		  /* 82137640h */ case   51:  		/* lwz R11, <#[R10 + 16]> */
		/* 82137640h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82137640h case   51:*/		return 0x82137644;
		  /* 82137644h */ case   52:  		/* addi R11, R11, -4 */
		/* 82137644h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82137644h case   52:*/		return 0x82137648;
		  /* 82137648h */ case   53:  		/* addic R11, R11, -1 */
		/* 82137648h case   53:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82137648h case   53:*/		return 0x8213764C;
		  /* 8213764Ch */ case   54:  		/* subfe R11, R11, R11 */
		/* 8213764Ch case   54:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8213764Ch case   54:*/		return 0x82137650;
		  /* 82137650h */ case   55:  		/* and R29, R11, R10 */
		/* 82137650h case   55:*/		cpu::op::and<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 82137650h case   55:*/		return 0x82137654;
	}
	return 0x82137654;
} // Block from 82137574h-82137654h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82137654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137654);
		  /* 82137654h */ case    0:  		/* mr R25, R20 */
		/* 82137654h case    0:*/		regs.R25 = regs.R20;
		/* 82137654h case    0:*/		return 0x82137658;
		  /* 82137658h */ case    1:  		/* mr R30, R20 */
		/* 82137658h case    1:*/		regs.R30 = regs.R20;
		/* 82137658h case    1:*/		return 0x8213765C;
		  /* 8213765Ch */ case    2:  		/* lwz R11, <#[R31 + 560]> */
		/* 8213765Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 8213765Ch case    2:*/		return 0x82137660;
		  /* 82137660h */ case    3:  		/* mr R4, R25 */
		/* 82137660h case    3:*/		regs.R4 = regs.R25;
		/* 82137660h case    3:*/		return 0x82137664;
		  /* 82137664h */ case    4:  		/* mr R3, R31 */
		/* 82137664h case    4:*/		regs.R3 = regs.R31;
		/* 82137664h case    4:*/		return 0x82137668;
		  /* 82137668h */ case    5:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137668h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137668h case    5:*/		return 0x8213766C;
		  /* 8213766Ch */ case    6:  		/* lwz R5, <#[R31 + 564]> */
		/* 8213766Ch case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000234) );
		/* 8213766Ch case    6:*/		return 0x82137670;
		  /* 82137670h */ case    7:  		/* lwzx R11, <#[R11 + R23]> */
		/* 82137670h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82137670h case    7:*/		return 0x82137674;
		  /* 82137674h */ case    8:  		/* lwz R8, <#[R11 + 12]> */
		/* 82137674h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137674h case    8:*/		return 0x82137678;
		  /* 82137678h */ case    9:  		/* lwz R7, <#[R11 + 16]> */
		/* 82137678h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82137678h case    9:*/		return 0x8213767C;
		  /* 8213767Ch */ case   10:  		/* bl -2652 */
		/* 8213767Ch case   10:*/		regs.LR = 0x82137680; return 0x82136C20;
		/* 8213767Ch case   10:*/		return 0x82137680;
		  /* 82137680h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82137680h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82137680h case   11:*/		return 0x82137684;
		  /* 82137684h */ case   12:  		/* bc 12, CR0_LT, 4088 */
		/* 82137684h case   12:*/		if ( regs.CR[0].lt ) { return 0x8213867C;  }
		/* 82137684h case   12:*/		return 0x82137688;
		  /* 82137688h */ case   13:  		/* cmpwi CR6, R3, 1 */
		/* 82137688h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82137688h case   13:*/		return 0x8213768C;
		  /* 8213768Ch */ case   14:  		/* bc 12, CR6_EQ, 88 */
		/* 8213768Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821376E4;  }
		/* 8213768Ch case   14:*/		return 0x82137690;
		  /* 82137690h */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 82137690h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82137690h case   15:*/		return 0x82137694;
		  /* 82137694h */ case   16:  		/* bc 12, CR6_EQ, 64 */
		/* 82137694h case   16:*/		if ( regs.CR[6].eq ) { return 0x821376D4;  }
		/* 82137694h case   16:*/		return 0x82137698;
		  /* 82137698h */ case   17:  		/* mr R11, R20 */
		/* 82137698h case   17:*/		regs.R11 = regs.R20;
		/* 82137698h case   17:*/		return 0x8213769C;
		  /* 8213769Ch */ case   18:  		/* add R10, R11, R30 */
		/* 8213769Ch case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8213769Ch case   18:*/		return 0x821376A0;
		  /* 821376A0h */ case   19:  		/* addi R9, R1, 480 */
		/* 821376A0h case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x1E0);
		/* 821376A0h case   19:*/		return 0x821376A4;
		  /* 821376A4h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821376A4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821376A4h case   20:*/		return 0x821376A8;
		  /* 821376A8h */ case   21:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821376A8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821376A8h case   21:*/		return 0x821376AC;
		  /* 821376ACh */ case   22:  		/* cmplw CR6, R10, R21 */
		/* 821376ACh case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821376ACh case   22:*/		return 0x821376B0;
		  /* 821376B0h */ case   23:  		/* bc 4, CR6_GT, 20 */
		/* 821376B0h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821376C4;  }
		/* 821376B0h case   23:*/		return 0x821376B4;
		  /* 821376B4h */ case   24:  		/* addi R11, R11, 1 */
		/* 821376B4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821376B4h case   24:*/		return 0x821376B8;
		  /* 821376B8h */ case   25:  		/* cmplwi CR6, R11, 3 */
		/* 821376B8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821376B8h case   25:*/		return 0x821376BC;
		  /* 821376BCh */ case   26:  		/* bc 12, CR6_LT, -32 */
		/* 821376BCh case   26:*/		if ( regs.CR[6].lt ) { return 0x8213769C;  }
		/* 821376BCh case   26:*/		return 0x821376C0;
		  /* 821376C0h */ case   27:  		/* b 8 */
		/* 821376C0h case   27:*/		return 0x821376C8;
		/* 821376C0h case   27:*/		return 0x821376C4;
	}
	return 0x821376C4;
} // Block from 82137654h-821376C4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821376C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821376C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821376C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821376C4);
		  /* 821376C4h */ case    0:  		/* mr R27, R11 */
		/* 821376C4h case    0:*/		regs.R27 = regs.R11;
		/* 821376C4h case    0:*/		return 0x821376C8;
	}
	return 0x821376C8;
} // Block from 821376C4h-821376C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821376C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821376C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821376C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821376C8);
		  /* 821376C8h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 821376C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821376C8h case    0:*/		return 0x821376CC;
		  /* 821376CCh */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 821376CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821376F4;  }
		/* 821376CCh case    1:*/		return 0x821376D0;
		  /* 821376D0h */ case    2:  		/* b 20 */
		/* 821376D0h case    2:*/		return 0x821376E4;
		/* 821376D0h case    2:*/		return 0x821376D4;
	}
	return 0x821376D4;
} // Block from 821376C8h-821376D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821376D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821376D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821376D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821376D4);
		  /* 821376D4h */ case    0:  		/* addi R11, R1, 160 */
		/* 821376D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 821376D4h case    0:*/		return 0x821376D8;
		  /* 821376D8h */ case    1:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821376D8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821376D8h case    1:*/		return 0x821376DC;
		  /* 821376DCh */ case    2:  		/* cmplw CR6, R11, R21 */
		/* 821376DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821376DCh case    2:*/		return 0x821376E0;
		  /* 821376E0h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821376E0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82137700;  }
		/* 821376E0h case    3:*/		return 0x821376E4;
	}
	return 0x821376E4;
} // Block from 821376D4h-821376E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821376E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821376E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821376E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821376E4);
		  /* 821376E4h */ case    0:  		/* addi R30, R30, 4 */
		/* 821376E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821376E4h case    0:*/		return 0x821376E8;
		  /* 821376E8h */ case    1:  		/* addi R25, R25, 1 */
		/* 821376E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821376E8h case    1:*/		return 0x821376EC;
		  /* 821376ECh */ case    2:  		/* cmplwi CR6, R30, 24 */
		/* 821376ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000018);
		/* 821376ECh case    2:*/		return 0x821376F0;
		  /* 821376F0h */ case    3:  		/* bc 12, CR6_LT, -148 */
		/* 821376F0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213765C;  }
		/* 821376F0h case    3:*/		return 0x821376F4;
	}
	return 0x821376F4;
} // Block from 821376E4h-821376F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821376F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821376F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821376F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821376F4);
		  /* 821376F4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821376F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821376F4h case    0:*/		return 0x821376F8;
		  /* 821376F8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821376F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82137700;  }
		/* 821376F8h case    1:*/		return 0x821376FC;
		  /* 821376FCh */ case    2:  		/* stw R27, <#[R29 + 16]> */
		/* 821376FCh case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000010) );
		/* 821376FCh case    2:*/		return 0x82137700;
	}
	return 0x82137700;
} // Block from 821376F4h-82137700h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137700);
		  /* 82137700h */ case    0:  		/* cmplwi CR6, R25, 6 */
		/* 82137700h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000006);
		/* 82137700h case    0:*/		return 0x82137704;
		  /* 82137704h */ case    1:  		/* bc 12, CR6_EQ, 1408 */
		/* 82137704h case    1:*/		if ( regs.CR[6].eq ) { return 0x82137C84;  }
		/* 82137704h case    1:*/		return 0x82137708;
		  /* 82137708h */ case    2:  		/* mr R24, R20 */
		/* 82137708h case    2:*/		regs.R24 = regs.R20;
		/* 82137708h case    2:*/		return 0x8213770C;
		  /* 8213770Ch */ case    3:  		/* mr R26, R20 */
		/* 8213770Ch case    3:*/		regs.R26 = regs.R20;
		/* 8213770Ch case    3:*/		return 0x82137710;
		  /* 82137710h */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 82137710h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82137710h case    4:*/		return 0x82137714;
		  /* 82137714h */ case    5:  		/* bc 12, CR6_EQ, 232 */
		/* 82137714h case    5:*/		if ( regs.CR[6].eq ) { return 0x821377FC;  }
		/* 82137714h case    5:*/		return 0x82137718;
		  /* 82137718h */ case    6:  		/* mr R19, R25 */
		/* 82137718h case    6:*/		regs.R19 = regs.R25;
		/* 82137718h case    6:*/		return 0x8213771C;
		  /* 8213771Ch */ case    7:  		/* stw R25, <#[R1 + 104]> */
		/* 8213771Ch case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000068) );
		/* 8213771Ch case    7:*/		return 0x82137720;
		  /* 82137720h */ case    8:  		/* rlwinm R27, R25, 2, 0, 29 */
		/* 82137720h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R25);
		/* 82137720h case    8:*/		return 0x82137724;
		  /* 82137724h */ case    9:  		/* addi R30, R1, 288 */
		/* 82137724h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x120);
		/* 82137724h case    9:*/		return 0x82137728;
		  /* 82137728h */ case   10:  		/* lwz R14, <#[R30]> */
		/* 82137728h case   10:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R30 + 0x00000000) );
		/* 82137728h case   10:*/		return 0x8213772C;
		  /* 8213772Ch */ case   11:  		/* addi R9, R1, 100 */
		/* 8213772Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 8213772Ch case   11:*/		return 0x82137730;
		  /* 82137730h */ case   12:  		/* lwz R11, <#[R31 + 20]> */
		/* 82137730h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82137730h case   12:*/		return 0x82137734;
		  /* 82137734h */ case   13:  		/* mr R5, R22 */
		/* 82137734h case   13:*/		regs.R5 = regs.R22;
		/* 82137734h case   13:*/		return 0x82137738;
		  /* 82137738h */ case   14:  		/* rlwinm R10, R14, 2, 0, 29 */
		/* 82137738h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R14);
		/* 82137738h case   14:*/		return 0x8213773C;
		  /* 8213773Ch */ case   15:  		/* mr R7, R14 */
		/* 8213773Ch case   15:*/		regs.R7 = regs.R14;
		/* 8213773Ch case   15:*/		return 0x82137740;
		  /* 82137740h */ case   16:  		/* mr R3, R31 */
		/* 82137740h case   16:*/		regs.R3 = regs.R31;
		/* 82137740h case   16:*/		return 0x82137744;
		  /* 82137744h */ case   17:  		/* lwzx R8, <#[R10 + R11]> */
		/* 82137744h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82137744h case   17:*/		return 0x82137748;
		  /* 82137748h */ case   18:  		/* stw R25, <#[R8 + 12]> */
		/* 82137748h case   18:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R8 + 0x0000000C) );
		/* 82137748h case   18:*/		return 0x8213774C;
		  /* 8213774Ch */ case   19:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213774Ch case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213774Ch case   19:*/		return 0x82137750;
		  /* 82137750h */ case   20:  		/* lwz R4, <#[R31 + 560]> */
		/* 82137750h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82137750h case   20:*/		return 0x82137754;
		  /* 82137754h */ case   21:  		/* bl -13716 */
		/* 82137754h case   21:*/		regs.LR = 0x82137758; return 0x821341C0;
		/* 82137754h case   21:*/		return 0x82137758;
		  /* 82137758h */ case   22:  		/* mr R29, R3 */
		/* 82137758h case   22:*/		regs.R29 = regs.R3;
		/* 82137758h case   22:*/		return 0x8213775C;
		  /* 8213775Ch */ case   23:  		/* addi R9, R1, 100 */
		/* 8213775Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 8213775Ch case   23:*/		return 0x82137760;
		  /* 82137760h */ case   24:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137760h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137760h case   24:*/		return 0x82137764;
		  /* 82137764h */ case   25:  		/* li R5, 0 */
		/* 82137764h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82137764h case   25:*/		return 0x82137768;
		  /* 82137768h */ case   26:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137768h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137768h case   26:*/		return 0x8213776C;
		  /* 8213776Ch */ case   27:  		/* mr R3, R31 */
		/* 8213776Ch case   27:*/		regs.R3 = regs.R31;
		/* 8213776Ch case   27:*/		return 0x82137770;
		  /* 82137770h */ case   28:  		/* bl -13744 */
		/* 82137770h case   28:*/		regs.LR = 0x82137774; return 0x821341C0;
		/* 82137770h case   28:*/		return 0x82137774;
		  /* 82137774h */ case   29:  		/* cmplw CR6, R3, R26 */
		/* 82137774h case   29:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 82137774h case   29:*/		return 0x82137778;
		  /* 82137778h */ case   30:  		/* bc 4, CR6_GT, 8 */
		/* 82137778h case   30:*/		if ( !regs.CR[6].gt ) { return 0x82137780;  }
		/* 82137778h case   30:*/		return 0x8213777C;
		  /* 8213777Ch */ case   31:  		/* mr R26, R3 */
		/* 8213777Ch case   31:*/		regs.R26 = regs.R3;
		/* 8213777Ch case   31:*/		return 0x82137780;
	}
	return 0x82137780;
} // Block from 82137700h-82137780h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82137780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137780);
		  /* 82137780h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 82137780h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82137780h case    0:*/		return 0x82137784;
		  /* 82137784h */ case    1:  		/* cmplw CR6, R3, R11 */
		/* 82137784h case    1:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82137784h case    1:*/		return 0x82137788;
	}
	return 0x82137788;
} // Block from 82137780h-82137788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82137788h
// Function '?NoTexClobber@CPSLegacyProgram@D3DXShader@@IAAJIPAPAVCInstruction@2@IPAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137788);
		  /* 82137788h */ case    0:  		/* bc 12, CR6_LT, 24 */
		/* 82137788h case    0:*/		if ( regs.CR[6].lt ) { return 0x821377A0;  }
		/* 82137788h case    0:*/		return 0x8213778C;
		  /* 8213778Ch */ case    1:  		/* lwz R11, <#[R8 + 16]> */
		/* 8213778Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 8213778Ch case    1:*/		return 0x82137790;
		  /* 82137790h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82137790h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82137790h case    2:*/		return 0x82137794;
		  /* 82137794h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82137794h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821377A0;  }
		/* 82137794h case    3:*/		return 0x82137798;
		  /* 82137798h */ case    4:  		/* addi R11, R1, 416 */
		/* 82137798h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x1A0);
		/* 82137798h case    4:*/		return 0x8213779C;
		  /* 8213779Ch */ case    5:  		/* stwx R18, <#[R27 + R11]> */
		/* 8213779Ch case    5:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 8213779Ch case    5:*/		return 0x821377A0;
	}
	return 0x821377A0;
} // Block from 82137788h-821377A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821377A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377A0);
		  /* 821377A0h */ case    0:  		/* lwz R11, <#[R1 + 100]> */
		/* 821377A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821377A0h case    0:*/		return 0x821377A4;
		  /* 821377A4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821377A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821377A4h case    1:*/		return 0x821377A8;
		  /* 821377A8h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821377A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821377B4;  }
		/* 821377A8h case    2:*/		return 0x821377AC;
		  /* 821377ACh */ case    3:  		/* addi R10, R1, 448 */
		/* 821377ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1C0);
		/* 821377ACh case    3:*/		return 0x821377B0;
		  /* 821377B0h */ case    4:  		/* stwx R18, <#[R27 + R10]> */
		/* 821377B0h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R27 + regs.R10 + 0x00000000) );
		/* 821377B0h case    4:*/		return 0x821377B4;
	}
	return 0x821377B4;
} // Block from 821377A0h-821377B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821377B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377B4);
		  /* 821377B4h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821377B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821377B4h case    0:*/		return 0x821377B8;
		  /* 821377B8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821377B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821377C4;  }
		/* 821377B8h case    1:*/		return 0x821377BC;
		  /* 821377BCh */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 821377BCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821377BCh case    2:*/		return 0x821377C0;
		  /* 821377C0h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821377C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821377C8;  }
		/* 821377C0h case    3:*/		return 0x821377C4;
	}
	return 0x821377C4;
} // Block from 821377B4h-821377C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821377C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377C4);
		  /* 821377C4h */ case    0:  		/* mr R29, R17 */
		/* 821377C4h case    0:*/		regs.R29 = regs.R17;
		/* 821377C4h case    0:*/		return 0x821377C8;
	}
	return 0x821377C8;
} // Block from 821377C4h-821377C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821377C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377C8);
		  /* 821377C8h */ case    0:  		/* cmplw CR6, R29, R24 */
		/* 821377C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 821377C8h case    0:*/		return 0x821377CC;
		  /* 821377CCh */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 821377CCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x821377D4;  }
		/* 821377CCh case    1:*/		return 0x821377D0;
		  /* 821377D0h */ case    2:  		/* mr R24, R29 */
		/* 821377D0h case    2:*/		regs.R24 = regs.R29;
		/* 821377D0h case    2:*/		return 0x821377D4;
	}
	return 0x821377D4;
} // Block from 821377C8h-821377D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821377D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377D4);
		  /* 821377D4h */ case    0:  		/* lwz R11, <#[R8 + 16]> */
		/* 821377D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 821377D4h case    0:*/		return 0x821377D8;
		  /* 821377D8h */ case    1:  		/* addi R10, R1, 480 */
		/* 821377D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1E0);
		/* 821377D8h case    1:*/		return 0x821377DC;
		  /* 821377DCh */ case    2:  		/* addi R9, R1, 192 */
		/* 821377DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xC0);
		/* 821377DCh case    2:*/		return 0x821377E0;
		  /* 821377E0h */ case    3:  		/* add R11, R11, R27 */
		/* 821377E0h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821377E0h case    3:*/		return 0x821377E4;
		  /* 821377E4h */ case    4:  		/* addic. R28, R28, -1 */
		/* 821377E4h case    4:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821377E4h case    4:*/		return 0x821377E8;
		  /* 821377E8h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821377E8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821377E8h case    5:*/		return 0x821377EC;
		  /* 821377ECh */ case    6:  		/* addi R30, R30, 4 */
		/* 821377ECh case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821377ECh case    6:*/		return 0x821377F0;
		  /* 821377F0h */ case    7:  		/* stwx R29, <#[R11 + R10]> */
		/* 821377F0h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821377F0h case    7:*/		return 0x821377F4;
		  /* 821377F4h */ case    8:  		/* stwx R3, <#[R11 + R9]> */
		/* 821377F4h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821377F4h case    8:*/		return 0x821377F8;
		  /* 821377F8h */ case    9:  		/* bc 4, CR0_EQ, -208 */
		/* 821377F8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82137728;  }
		/* 821377F8h case    9:*/		return 0x821377FC;
	}
	return 0x821377FC;
} // Block from 821377D4h-821377FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821377FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821377FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821377FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821377FC);
		  /* 821377FCh */ case    0:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 821377FCh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 821377FCh case    0:*/		return 0x82137800;
		  /* 82137800h */ case    1:  		/* addi R10, R1, 160 */
		/* 82137800h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82137800h case    1:*/		return 0x82137804;
		  /* 82137804h */ case    2:  		/* addi R9, R1, 128 */
		/* 82137804h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82137804h case    2:*/		return 0x82137808;
		  /* 82137808h */ case    3:  		/* mr R3, R31 */
		/* 82137808h case    3:*/		regs.R3 = regs.R31;
		/* 82137808h case    3:*/		return 0x8213780C;
		  /* 8213780Ch */ case    4:  		/* stwx R24, <#[R11 + R10]> */
		/* 8213780Ch case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213780Ch case    4:*/		return 0x82137810;
		  /* 82137810h */ case    5:  		/* stwx R26, <#[R11 + R9]> */
		/* 82137810h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82137810h case    5:*/		return 0x82137814;
		  /* 82137814h */ case    6:  		/* bl -5324 */
		/* 82137814h case    6:*/		regs.LR = 0x82137818; return 0x82136348;
		/* 82137814h case    6:*/		return 0x82137818;
		  /* 82137818h */ case    7:  		/* b 520 */
		/* 82137818h case    7:*/		return 0x82137A20;
		/* 82137818h case    7:*/		return 0x8213781C;
	}
	return 0x8213781C;
} // Block from 821377FCh-8213781Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213781Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213781C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213781C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213781C);
		  /* 8213781Ch */ case    0:  		/* stw R20, <#[R1 + 96]> */
		/* 8213781Ch case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 8213781Ch case    0:*/		return 0x82137820;
		  /* 82137820h */ case    1:  		/* addi R10, R1, 96 */
		/* 82137820h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82137820h case    1:*/		return 0x82137824;
		  /* 82137824h */ case    2:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137824h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137824h case    2:*/		return 0x82137828;
		  /* 82137828h */ case    3:  		/* addi R9, R1, 288 */
		/* 82137828h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x120);
		/* 82137828h case    3:*/		return 0x8213782C;
		  /* 8213782Ch */ case    4:  		/* li R5, 0 */
		/* 8213782Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213782Ch case    4:*/		return 0x82137830;
		  /* 82137830h */ case    5:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137830h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137830h case    5:*/		return 0x82137834;
		  /* 82137834h */ case    6:  		/* mr R3, R31 */
		/* 82137834h case    6:*/		regs.R3 = regs.R31;
		/* 82137834h case    6:*/		return 0x82137838;
		  /* 82137838h */ case    7:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137838h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137838h case    7:*/		return 0x8213783C;
		  /* 8213783Ch */ case    8:  		/* mr R26, R20 */
		/* 8213783Ch case    8:*/		regs.R26 = regs.R20;
		/* 8213783Ch case    8:*/		return 0x82137840;
		  /* 82137840h */ case    9:  		/* mr R25, R20 */
		/* 82137840h case    9:*/		regs.R25 = regs.R20;
		/* 82137840h case    9:*/		return 0x82137844;
		  /* 82137844h */ case   10:  		/* lwzx R11, <#[R11 + R23]> */
		/* 82137844h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82137844h case   10:*/		return 0x82137848;
		  /* 82137848h */ case   11:  		/* lwz R8, <#[R11 + 12]> */
		/* 82137848h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137848h case   11:*/		return 0x8213784C;
		  /* 8213784Ch */ case   12:  		/* lwz R7, <#[R11 + 16]> */
		/* 8213784Ch case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 8213784Ch case   12:*/		return 0x82137850;
		  /* 82137850h */ case   13:  		/* bl -5824 */
		/* 82137850h case   13:*/		regs.LR = 0x82137854; return 0x82136190;
		/* 82137850h case   13:*/		return 0x82137854;
		  /* 82137854h */ case   14:  		/* lwz R24, <#[R1 + 96]> */
		/* 82137854h case   14:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000060) );
		/* 82137854h case   14:*/		return 0x82137858;
		  /* 82137858h */ case   15:  		/* addi R7, R1, 96 */
		/* 82137858h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82137858h case   15:*/		return 0x8213785C;
		  /* 8213785Ch */ case   16:  		/* lwz R5, <#[R31 + 548]> */
		/* 8213785Ch case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000224) );
		/* 8213785Ch case   16:*/		return 0x82137860;
		  /* 82137860h */ case   17:  		/* addi R6, R1, 288 */
		/* 82137860h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 82137860h case   17:*/		return 0x82137864;
		  /* 82137864h */ case   18:  		/* lwz R4, <#[R31 + 560]> */
		/* 82137864h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82137864h case   18:*/		return 0x82137868;
		  /* 82137868h */ case   19:  		/* mr R3, R31 */
		/* 82137868h case   19:*/		regs.R3 = regs.R31;
		/* 82137868h case   19:*/		return 0x8213786C;
		  /* 8213786Ch */ case   20:  		/* mr R30, R24 */
		/* 8213786Ch case   20:*/		regs.R30 = regs.R24;
		/* 8213786Ch case   20:*/		return 0x82137870;
		  /* 82137870h */ case   21:  		/* bl -6208 */
		/* 82137870h case   21:*/		regs.LR = 0x82137874; return 0x82136030;
		/* 82137870h case   21:*/		return 0x82137874;
		  /* 82137874h */ case   22:  		/* addi R7, R1, 96 */
		/* 82137874h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82137874h case   22:*/		return 0x82137878;
		  /* 82137878h */ case   23:  		/* addi R6, R1, 288 */
		/* 82137878h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 82137878h case   23:*/		return 0x8213787C;
		  /* 8213787Ch */ case   24:  		/* lwz R5, <#[R31 + 552]> */
		/* 8213787Ch case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000228) );
		/* 8213787Ch case   24:*/		return 0x82137880;
		  /* 82137880h */ case   25:  		/* mr R3, R31 */
		/* 82137880h case   25:*/		regs.R3 = regs.R31;
		/* 82137880h case   25:*/		return 0x82137884;
		  /* 82137884h */ case   26:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137884h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137884h case   26:*/		return 0x82137888;
		  /* 82137888h */ case   27:  		/* bl -6232 */
		/* 82137888h case   27:*/		regs.LR = 0x8213788C; return 0x82136030;
		/* 82137888h case   27:*/		return 0x8213788C;
		  /* 8213788Ch */ case   28:  		/* lwz R24, <#[R1 + 96]> */
		/* 8213788Ch case   28:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000060) );
		/* 8213788Ch case   28:*/		return 0x82137890;
		  /* 82137890h */ case   29:  		/* cmplw CR6, R30, R24 */
		/* 82137890h case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 82137890h case   29:*/		return 0x82137894;
		  /* 82137894h */ case   30:  		/* bc 4, CR6_EQ, -60 */
		/* 82137894h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82137858;  }
		/* 82137894h case   30:*/		return 0x82137898;
		  /* 82137898h */ case   31:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137898h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137898h case   31:*/		return 0x8213789C;
		  /* 8213789Ch */ case   32:  		/* mr R28, R20 */
		/* 8213789Ch case   32:*/		regs.R28 = regs.R20;
		/* 8213789Ch case   32:*/		return 0x821378A0;
		  /* 821378A0h */ case   33:  		/* lwzx R11, <#[R11 + R23]> */
		/* 821378A0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821378A0h case   33:*/		return 0x821378A4;
		  /* 821378A4h */ case   34:  		/* lwz R11, <#[R11 + 12]> */
		/* 821378A4h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821378A4h case   34:*/		return 0x821378A8;
		  /* 821378A8h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 821378A8h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821378A8h case   35:*/		return 0x821378AC;
		  /* 821378ACh */ case   36:  		/* bc 4, CR6_GT, 228 */
		/* 821378ACh case   36:*/		if ( !regs.CR[6].gt ) { return 0x82137990;  }
		/* 821378ACh case   36:*/		return 0x821378B0;
		  /* 821378B0h */ case   37:  		/* mr R19, R21 */
		/* 821378B0h case   37:*/		regs.R19 = regs.R21;
		/* 821378B0h case   37:*/		return 0x821378B4;
		  /* 821378B4h */ case   38:  		/* stw R21, <#[R1 + 104]> */
		/* 821378B4h case   38:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 821378B4h case   38:*/		return 0x821378B8;
		  /* 821378B8h */ case   39:  		/* addi R27, R21, 1 */
		/* 821378B8h case   39:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R21,0x1);
		/* 821378B8h case   39:*/		return 0x821378BC;
		  /* 821378BCh */ case   40:  		/* mr R30, R20 */
		/* 821378BCh case   40:*/		regs.R30 = regs.R20;
		/* 821378BCh case   40:*/		return 0x821378C0;
		  /* 821378C0h */ case   41:  		/* lwz R11, <#[R31 + 560]> */
		/* 821378C0h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 821378C0h case   41:*/		return 0x821378C4;
		  /* 821378C4h */ case   42:  		/* addi R9, R1, 100 */
		/* 821378C4h case   42:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 821378C4h case   42:*/		return 0x821378C8;
		  /* 821378C8h */ case   43:  		/* lwz R10, <#[R31 + 20]> */
		/* 821378C8h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821378C8h case   43:*/		return 0x821378CC;
		  /* 821378CCh */ case   44:  		/* mr R5, R27 */
		/* 821378CCh case   44:*/		regs.R5 = regs.R27;
		/* 821378CCh case   44:*/		return 0x821378D0;
		  /* 821378D0h */ case   45:  		/* mr R3, R31 */
		/* 821378D0h case   45:*/		regs.R3 = regs.R31;
		/* 821378D0h case   45:*/		return 0x821378D4;
		  /* 821378D4h */ case   46:  		/* lwzx R11, <#[R11 + R23]> */
		/* 821378D4h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821378D4h case   46:*/		return 0x821378D8;
		  /* 821378D8h */ case   47:  		/* lwz R11, <#[R11 + 16]> */
		/* 821378D8h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821378D8h case   47:*/		return 0x821378DC;
		  /* 821378DCh */ case   48:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821378DCh case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821378DCh case   48:*/		return 0x821378E0;
		  /* 821378E0h */ case   49:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821378E0h case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821378E0h case   49:*/		return 0x821378E4;
		  /* 821378E4h */ case   50:  		/* lwzx R8, <#[R11 + R10]> */
		/* 821378E4h case   50:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821378E4h case   50:*/		return 0x821378E8;
		  /* 821378E8h */ case   51:  		/* stw R21, <#[R8 + 12]> */
		/* 821378E8h case   51:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R8 + 0x0000000C) );
		/* 821378E8h case   51:*/		return 0x821378EC;
		  /* 821378ECh */ case   52:  		/* lwz R4, <#[R31 + 560]> */
		/* 821378ECh case   52:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 821378ECh case   52:*/		return 0x821378F0;
		  /* 821378F0h */ case   53:  		/* lwzx R11, <#[R23 + R4]> */
		/* 821378F0h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R4 + 0x00000000) );
		/* 821378F0h case   53:*/		return 0x821378F4;
		  /* 821378F4h */ case   54:  		/* lwz R11, <#[R11 + 16]> */
		/* 821378F4h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821378F4h case   54:*/		return 0x821378F8;
		  /* 821378F8h */ case   55:  		/* lwz R6, <#[R31 + 548]> */
		/* 821378F8h case   55:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 821378F8h case   55:*/		return 0x821378FC;
		  /* 821378FCh */ case   56:  		/* lwzx R7, <#[R11 + R30]> */
		/* 821378FCh case   56:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821378FCh case   56:*/		return 0x82137900;
		  /* 82137900h */ case   57:  		/* bl -14144 */
		/* 82137900h case   57:*/		regs.LR = 0x82137904; return 0x821341C0;
		/* 82137900h case   57:*/		return 0x82137904;
		  /* 82137904h */ case   58:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137904h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137904h case   58:*/		return 0x82137908;
		  /* 82137908h */ case   59:  		/* lwzx R11, <#[R11 + R23]> */
		/* 82137908h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82137908h case   59:*/		return 0x8213790C;
		  /* 8213790Ch */ case   60:  		/* mr R29, R3 */
		/* 8213790Ch case   60:*/		regs.R29 = regs.R3;
		/* 8213790Ch case   60:*/		return 0x82137910;
		  /* 82137910h */ case   61:  		/* addi R9, R1, 100 */
		/* 82137910h case   61:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 82137910h case   61:*/		return 0x82137914;
		  /* 82137914h */ case   62:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137914h case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137914h case   62:*/		return 0x82137918;
		  /* 82137918h */ case   63:  		/* li R5, 0 */
		/* 82137918h case   63:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82137918h case   63:*/		return 0x8213791C;
		  /* 8213791Ch */ case   64:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213791Ch case   64:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213791Ch case   64:*/		return 0x82137920;
		  /* 82137920h */ case   65:  		/* mr R3, R31 */
		/* 82137920h case   65:*/		regs.R3 = regs.R31;
		/* 82137920h case   65:*/		return 0x82137924;
		  /* 82137924h */ case   66:  		/* lwz R11, <#[R11 + 16]> */
		/* 82137924h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82137924h case   66:*/		return 0x82137928;
		  /* 82137928h */ case   67:  		/* lwzx R7, <#[R11 + R30]> */
		/* 82137928h case   67:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82137928h case   67:*/		return 0x8213792C;
		  /* 8213792Ch */ case   68:  		/* bl -14188 */
		/* 8213792Ch case   68:*/		regs.LR = 0x82137930; return 0x821341C0;
		/* 8213792Ch case   68:*/		return 0x82137930;
		  /* 82137930h */ case   69:  		/* cmplw CR6, R3, R26 */
		/* 82137930h case   69:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 82137930h case   69:*/		return 0x82137934;
		  /* 82137934h */ case   70:  		/* bc 4, CR6_GT, 8 */
		/* 82137934h case   70:*/		if ( !regs.CR[6].gt ) { return 0x8213793C;  }
		/* 82137934h case   70:*/		return 0x82137938;
		  /* 82137938h */ case   71:  		/* mr R26, R3 */
		/* 82137938h case   71:*/		regs.R26 = regs.R3;
		/* 82137938h case   71:*/		return 0x8213793C;
	}
	return 0x8213793C;
} // Block from 8213781Ch-8213793Ch (72 instructions)

//////////////////////////////////////////////////////
// Block at 8213793Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213793C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213793C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213793C);
		  /* 8213793Ch */ case    0:  		/* lwz R11, <#[R1 + 100]> */
		/* 8213793Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8213793Ch case    0:*/		return 0x82137940;
		  /* 82137940h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82137940h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82137940h case    1:*/		return 0x82137944;
		  /* 82137944h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82137944h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213794C;  }
		/* 82137944h case    2:*/		return 0x82137948;
		  /* 82137948h */ case    3:  		/* mr R29, R17 */
		/* 82137948h case    3:*/		regs.R29 = regs.R17;
		/* 82137948h case    3:*/		return 0x8213794C;
	}
	return 0x8213794C;
} // Block from 8213793Ch-8213794Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213794Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213794C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213794C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213794C);
		  /* 8213794Ch */ case    0:  		/* cmplw CR6, R29, R25 */
		/* 8213794Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8213794Ch case    0:*/		return 0x82137950;
		  /* 82137950h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 82137950h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82137958;  }
		/* 82137950h case    1:*/		return 0x82137954;
		  /* 82137954h */ case    2:  		/* mr R25, R29 */
		/* 82137954h case    2:*/		regs.R25 = regs.R29;
		/* 82137954h case    2:*/		return 0x82137958;
	}
	return 0x82137958;
} // Block from 8213794Ch-82137958h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137958);
		  /* 82137958h */ case    0:  		/* lwz R10, <#[R31 + 560]> */
		/* 82137958h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 82137958h case    0:*/		return 0x8213795C;
		  /* 8213795Ch */ case    1:  		/* addi R9, R1, 480 */
		/* 8213795Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x1E0);
		/* 8213795Ch case    1:*/		return 0x82137960;
		  /* 82137960h */ case    2:  		/* lwz R11, <#[R8 + 16]> */
		/* 82137960h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 82137960h case    2:*/		return 0x82137964;
		  /* 82137964h */ case    3:  		/* addi R8, R1, 192 */
		/* 82137964h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82137964h case    3:*/		return 0x82137968;
		  /* 82137968h */ case    4:  		/* addi R28, R28, 1 */
		/* 82137968h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82137968h case    4:*/		return 0x8213796C;
		  /* 8213796Ch */ case    5:  		/* add R11, R11, R23 */
		/* 8213796Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 8213796Ch case    5:*/		return 0x82137970;
		  /* 82137970h */ case    6:  		/* addi R30, R30, 4 */
		/* 82137970h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82137970h case    6:*/		return 0x82137974;
		  /* 82137974h */ case    7:  		/* lwzx R10, <#[R10 + R23]> */
		/* 82137974h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 82137974h case    7:*/		return 0x82137978;
		  /* 82137978h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137978h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137978h case    8:*/		return 0x8213797C;
		  /* 8213797Ch */ case    9:  		/* lwz R10, <#[R10 + 12]> */
		/* 8213797Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8213797Ch case    9:*/		return 0x82137980;
		  /* 82137980h */ case   10:  		/* stwx R29, <#[R11 + R9]> */
		/* 82137980h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82137980h case   10:*/		return 0x82137984;
		  /* 82137984h */ case   11:  		/* stwx R3, <#[R11 + R8]> */
		/* 82137984h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82137984h case   11:*/		return 0x82137988;
		  /* 82137988h */ case   12:  		/* cmplw CR6, R28, R10 */
		/* 82137988h case   12:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82137988h case   12:*/		return 0x8213798C;
		  /* 8213798Ch */ case   13:  		/* bc 12, CR6_LT, -204 */
		/* 8213798Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x821378C0;  }
		/* 8213798Ch case   13:*/		return 0x82137990;
	}
	return 0x82137990;
} // Block from 82137958h-82137990h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82137990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137990);
		  /* 82137990h */ case    0:  		/* rlwinm R11, R19, 2, 0, 29 */
		/* 82137990h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R19);
		/* 82137990h case    0:*/		return 0x82137994;
		  /* 82137994h */ case    1:  		/* addi R10, R1, 160 */
		/* 82137994h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82137994h case    1:*/		return 0x82137998;
		  /* 82137998h */ case    2:  		/* addi R9, R1, 128 */
		/* 82137998h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82137998h case    2:*/		return 0x8213799C;
		  /* 8213799Ch */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 8213799Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8213799Ch case    3:*/		return 0x821379A0;
		  /* 821379A0h */ case    4:  		/* stwx R25, <#[R11 + R10]> */
		/* 821379A0h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821379A0h case    4:*/		return 0x821379A4;
		  /* 821379A4h */ case    5:  		/* stwx R26, <#[R11 + R9]> */
		/* 821379A4h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821379A4h case    5:*/		return 0x821379A8;
		  /* 821379A8h */ case    6:  		/* bc 12, CR6_EQ, 108 */
		/* 821379A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82137A14;  }
		/* 821379A8h case    6:*/		return 0x821379AC;
		  /* 821379ACh */ case    7:  		/* mr R19, R21 */
		/* 821379ACh case    7:*/		regs.R19 = regs.R21;
		/* 821379ACh case    7:*/		return 0x821379B0;
		  /* 821379B0h */ case    8:  		/* stw R21, <#[R1 + 104]> */
		/* 821379B0h case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 821379B0h case    8:*/		return 0x821379B4;
		  /* 821379B4h */ case    9:  		/* addi R30, R1, 288 */
		/* 821379B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x120);
		/* 821379B4h case    9:*/		return 0x821379B8;
	}
	return 0x821379B8;
} // Block from 82137990h-821379B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821379B8h
// Function '?UpPropZ@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821379B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821379B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821379B8);
		  /* 821379B8h */ case    0:  		/* mr R29, R24 */
		/* 821379B8h case    0:*/		regs.R29 = regs.R24;
		/* 821379B8h case    0:*/		return 0x821379BC;
		  /* 821379BCh */ case    1:  		/* lwz R7, <#[R30]> */
		/* 821379BCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821379BCh case    1:*/		return 0x821379C0;
		  /* 821379C0h */ case    2:  		/* addi R9, R1, 100 */
		/* 821379C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 821379C0h case    2:*/		return 0x821379C4;
		  /* 821379C4h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 821379C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821379C4h case    3:*/		return 0x821379C8;
		  /* 821379C8h */ case    4:  		/* li R5, 0 */
		/* 821379C8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821379C8h case    4:*/		return 0x821379CC;
		  /* 821379CCh */ case    5:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 821379CCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 821379CCh case    5:*/		return 0x821379D0;
		  /* 821379D0h */ case    6:  		/* mr R3, R31 */
		/* 821379D0h case    6:*/		regs.R3 = regs.R31;
		/* 821379D0h case    6:*/		return 0x821379D4;
		  /* 821379D4h */ case    7:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821379D4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821379D4h case    7:*/		return 0x821379D8;
		  /* 821379D8h */ case    8:  		/* stw R21, <#[R8 + 12]> */
		/* 821379D8h case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R8 + 0x0000000C) );
		/* 821379D8h case    8:*/		return 0x821379DC;
		  /* 821379DCh */ case    9:  		/* lwz R6, <#[R31 + 552]> */
		/* 821379DCh case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 821379DCh case    9:*/		return 0x821379E0;
		  /* 821379E0h */ case   10:  		/* lwz R4, <#[R31 + 564]> */
		/* 821379E0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821379E0h case   10:*/		return 0x821379E4;
		  /* 821379E4h */ case   11:  		/* bl -14372 */
		/* 821379E4h case   11:*/		regs.LR = 0x821379E8; return 0x821341C0;
		/* 821379E4h case   11:*/		return 0x821379E8;
		  /* 821379E8h */ case   12:  		/* cmplw CR6, R3, R26 */
		/* 821379E8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 821379E8h case   12:*/		return 0x821379EC;
		  /* 821379ECh */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821379ECh case   13:*/		if ( !regs.CR[6].gt ) { return 0x821379F4;  }
		/* 821379ECh case   13:*/		return 0x821379F0;
		  /* 821379F0h */ case   14:  		/* mr R26, R3 */
		/* 821379F0h case   14:*/		regs.R26 = regs.R3;
		/* 821379F0h case   14:*/		return 0x821379F4;
	}
	return 0x821379F4;
} // Block from 821379B8h-821379F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821379F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821379F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821379F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821379F4);
		  /* 821379F4h */ case    0:  		/* lwz R11, <#[R8 + 16]> */
		/* 821379F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 821379F4h case    0:*/		return 0x821379F8;
		  /* 821379F8h */ case    1:  		/* addi R10, R1, 192 */
		/* 821379F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 821379F8h case    1:*/		return 0x821379FC;
		  /* 821379FCh */ case    2:  		/* addic. R29, R29, -1 */
		/* 821379FCh case    2:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821379FCh case    2:*/		return 0x82137A00;
		  /* 82137A00h */ case    3:  		/* add R11, R11, R23 */
		/* 82137A00h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82137A00h case    3:*/		return 0x82137A04;
		  /* 82137A04h */ case    4:  		/* addi R30, R30, 4 */
		/* 82137A04h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82137A04h case    4:*/		return 0x82137A08;
		  /* 82137A08h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137A08h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137A08h case    5:*/		return 0x82137A0C;
		  /* 82137A0Ch */ case    6:  		/* stwx R3, <#[R11 + R10]> */
		/* 82137A0Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137A0Ch case    6:*/		return 0x82137A10;
		  /* 82137A10h */ case    7:  		/* bc 4, CR0_EQ, -84 */
		/* 82137A10h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821379BC;  }
		/* 82137A10h case    7:*/		return 0x82137A14;
	}
	return 0x82137A14;
} // Block from 821379F4h-82137A14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82137A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137A14);
		  /* 82137A14h */ case    0:  		/* rlwinm R11, R19, 2, 0, 29 */
		/* 82137A14h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R19);
		/* 82137A14h case    0:*/		return 0x82137A18;
		  /* 82137A18h */ case    1:  		/* addi R10, R1, 128 */
		/* 82137A18h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82137A18h case    1:*/		return 0x82137A1C;
		  /* 82137A1Ch */ case    2:  		/* stwx R26, <#[R11 + R10]> */
		/* 82137A1Ch case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137A1Ch case    2:*/		return 0x82137A20;
	}
	return 0x82137A20;
} // Block from 82137A14h-82137A20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137A20);
		  /* 82137A20h */ case    0:  		/* lwz R6, <#[R31 + 548]> */
		/* 82137A20h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 82137A20h case    0:*/		return 0x82137A24;
		  /* 82137A24h */ case    1:  		/* addi R21, R21, 1 */
		/* 82137A24h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 82137A24h case    1:*/		return 0x82137A28;
		  /* 82137A28h */ case    2:  		/* addi R23, R23, 4 */
		/* 82137A28h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 82137A28h case    2:*/		return 0x82137A2C;
		  /* 82137A2Ch */ case    3:  		/* cmplw CR6, R21, R6 */
		/* 82137A2Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R6);
		/* 82137A2Ch case    3:*/		return 0x82137A30;
		  /* 82137A30h */ case    4:  		/* bc 12, CR6_LT, -1452 */
		/* 82137A30h case    4:*/		if ( regs.CR[6].lt ) { return 0x82137484;  }
		/* 82137A30h case    4:*/		return 0x82137A34;
	}
	return 0x82137A34;
} // Block from 82137A20h-82137A34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82137A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137A34);
		  /* 82137A34h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137A34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137A34h case    0:*/		return 0x82137A38;
		  /* 82137A38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82137A38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82137A38h case    1:*/		return 0x82137A3C;
		  /* 82137A3Ch */ case    2:  		/* bc 12, CR6_EQ, 3084 */
		/* 82137A3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82138648;  }
		/* 82137A3Ch case    2:*/		return 0x82137A40;
		  /* 82137A40h */ case    3:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137A40h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137A40h case    3:*/		return 0x82137A44;
		  /* 82137A44h */ case    4:  		/* mr R14, R20 */
		/* 82137A44h case    4:*/		regs.R14 = regs.R20;
		/* 82137A44h case    4:*/		return 0x82137A48;
		  /* 82137A48h */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 82137A48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82137A48h case    5:*/		return 0x82137A4C;
		  /* 82137A4Ch */ case    6:  		/* bc 12, CR6_EQ, 3068 */
		/* 82137A4Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82138648;  }
		/* 82137A4Ch case    6:*/		return 0x82137A50;
		  /* 82137A50h */ case    7:  		/* lis R11, -32256 */
		/* 82137A50h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82137A50h case    7:*/		return 0x82137A54;
		  /* 82137A54h */ case    8:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82137A54h case    8:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82137A54h case    8:*/		return 0x82137A58;
		  /* 82137A58h */ case    9:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137A58h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137A58h case    9:*/		return 0x82137A5C;
		  /* 82137A5Ch */ case   10:  		/* rlwinm R15, R14, 2, 0, 29 */
		/* 82137A5Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R15,regs.R14);
		/* 82137A5Ch case   10:*/		return 0x82137A60;
		  /* 82137A60h */ case   11:  		/* lwzx R10, <#[R11 + R15]> */
		/* 82137A60h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82137A60h case   11:*/		return 0x82137A64;
		  /* 82137A64h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82137A64h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82137A64h case   12:*/		return 0x82137A68;
		  /* 82137A68h */ case   13:  		/* bc 12, CR6_EQ, 3020 */
		/* 82137A68h case   13:*/		if ( regs.CR[6].eq ) { return 0x82138634;  }
		/* 82137A68h case   13:*/		return 0x82137A6C;
		  /* 82137A6Ch */ case   14:  		/* rlwinm R23, R10, 0, 0, 31 */
		/* 82137A6Ch case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R23,regs.R10);
		/* 82137A6Ch case   14:*/		return 0x82137A70;
		  /* 82137A70h */ case   15:  		/* lwz R11, <#[R23]> */
		/* 82137A70h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82137A70h case   15:*/		return 0x82137A74;
		  /* 82137A74h */ case   16:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 82137A74h case   16:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82137A74h case   16:*/		return 0x82137A78;
		  /* 82137A78h */ case   17:  		/* bc 12, CR0_EQ, 3004 */
		/* 82137A78h case   17:*/		if ( regs.CR[0].eq ) { return 0x82138634;  }
		/* 82137A78h case   17:*/		return 0x82137A7C;
		  /* 82137A7Ch */ case   18:  		/* lis R10, 4352 */
		/* 82137A7Ch case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 82137A7Ch case   18:*/		return 0x82137A80;
		  /* 82137A80h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 82137A80h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137A80h case   19:*/		return 0x82137A84;
		  /* 82137A84h */ case   20:  		/* bc 12, CR6_EQ, 2992 */
		/* 82137A84h case   20:*/		if ( regs.CR[6].eq ) { return 0x82138634;  }
		/* 82137A84h case   20:*/		return 0x82137A88;
		  /* 82137A88h */ case   21:  		/* lis R10, 24576 */
		/* 82137A88h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 82137A88h case   21:*/		return 0x82137A8C;
		  /* 82137A8Ch */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 82137A8Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137A8Ch case   22:*/		return 0x82137A90;
		  /* 82137A90h */ case   23:  		/* bc 12, CR6_EQ, 2544 */
		/* 82137A90h case   23:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137A90h case   23:*/		return 0x82137A94;
		  /* 82137A94h */ case   24:  		/* lis R10, 24656 */
		/* 82137A94h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 82137A94h case   24:*/		return 0x82137A98;
		  /* 82137A98h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 82137A98h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137A98h case   25:*/		return 0x82137A9C;
		  /* 82137A9Ch */ case   26:  		/* bc 12, CR6_EQ, 2532 */
		/* 82137A9Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137A9Ch case   26:*/		return 0x82137AA0;
		  /* 82137AA0h */ case   27:  		/* lis R10, 24736 */
		/* 82137AA0h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 82137AA0h case   27:*/		return 0x82137AA4;
		  /* 82137AA4h */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 82137AA4h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AA4h case   28:*/		return 0x82137AA8;
		  /* 82137AA8h */ case   29:  		/* bc 12, CR6_EQ, 2520 */
		/* 82137AA8h case   29:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AA8h case   29:*/		return 0x82137AAC;
		  /* 82137AACh */ case   30:  		/* lis R10, 24816 */
		/* 82137AACh case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 82137AACh case   30:*/		return 0x82137AB0;
		  /* 82137AB0h */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 82137AB0h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AB0h case   31:*/		return 0x82137AB4;
		  /* 82137AB4h */ case   32:  		/* bc 12, CR6_EQ, 2508 */
		/* 82137AB4h case   32:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AB4h case   32:*/		return 0x82137AB8;
		  /* 82137AB8h */ case   33:  		/* lis R10, 29408 */
		/* 82137AB8h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 82137AB8h case   33:*/		return 0x82137ABC;
		  /* 82137ABCh */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 82137ABCh case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137ABCh case   34:*/		return 0x82137AC0;
		  /* 82137AC0h */ case   35:  		/* bc 12, CR6_EQ, 2496 */
		/* 82137AC0h case   35:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AC0h case   35:*/		return 0x82137AC4;
		  /* 82137AC4h */ case   36:  		/* lis R10, 24688 */
		/* 82137AC4h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 82137AC4h case   36:*/		return 0x82137AC8;
		  /* 82137AC8h */ case   37:  		/* cmplw CR6, R11, R10 */
		/* 82137AC8h case   37:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AC8h case   37:*/		return 0x82137ACC;
		  /* 82137ACCh */ case   38:  		/* bc 12, CR6_EQ, 2484 */
		/* 82137ACCh case   38:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137ACCh case   38:*/		return 0x82137AD0;
		  /* 82137AD0h */ case   39:  		/* lis R10, 29232 */
		/* 82137AD0h case   39:*/		cpu::op::lis<0>(regs,&regs.R10,0x7230);
		/* 82137AD0h case   39:*/		return 0x82137AD4;
		  /* 82137AD4h */ case   40:  		/* cmplw CR6, R11, R10 */
		/* 82137AD4h case   40:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AD4h case   40:*/		return 0x82137AD8;
		  /* 82137AD8h */ case   41:  		/* bc 12, CR6_EQ, 2472 */
		/* 82137AD8h case   41:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AD8h case   41:*/		return 0x82137ADC;
		  /* 82137ADCh */ case   42:  		/* lis R10, 29264 */
		/* 82137ADCh case   42:*/		cpu::op::lis<0>(regs,&regs.R10,0x7250);
		/* 82137ADCh case   42:*/		return 0x82137AE0;
		  /* 82137AE0h */ case   43:  		/* cmplw CR6, R11, R10 */
		/* 82137AE0h case   43:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AE0h case   43:*/		return 0x82137AE4;
		  /* 82137AE4h */ case   44:  		/* bc 12, CR6_EQ, 2460 */
		/* 82137AE4h case   44:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AE4h case   44:*/		return 0x82137AE8;
		  /* 82137AE8h */ case   45:  		/* lis R10, 29200 */
		/* 82137AE8h case   45:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 82137AE8h case   45:*/		return 0x82137AEC;
		  /* 82137AECh */ case   46:  		/* cmplw CR6, R11, R10 */
		/* 82137AECh case   46:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AECh case   46:*/		return 0x82137AF0;
		  /* 82137AF0h */ case   47:  		/* bc 12, CR6_EQ, 2448 */
		/* 82137AF0h case   47:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AF0h case   47:*/		return 0x82137AF4;
		  /* 82137AF4h */ case   48:  		/* lis R10, 29280 */
		/* 82137AF4h case   48:*/		cpu::op::lis<0>(regs,&regs.R10,0x7260);
		/* 82137AF4h case   48:*/		return 0x82137AF8;
		  /* 82137AF8h */ case   49:  		/* cmplw CR6, R11, R10 */
		/* 82137AF8h case   49:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137AF8h case   49:*/		return 0x82137AFC;
		  /* 82137AFCh */ case   50:  		/* bc 12, CR6_EQ, 2436 */
		/* 82137AFCh case   50:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137AFCh case   50:*/		return 0x82137B00;
		  /* 82137B00h */ case   51:  		/* lis R10, 29296 */
		/* 82137B00h case   51:*/		cpu::op::lis<0>(regs,&regs.R10,0x7270);
		/* 82137B00h case   51:*/		return 0x82137B04;
		  /* 82137B04h */ case   52:  		/* cmplw CR6, R11, R10 */
		/* 82137B04h case   52:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B04h case   52:*/		return 0x82137B08;
		  /* 82137B08h */ case   53:  		/* bc 12, CR6_EQ, 2424 */
		/* 82137B08h case   53:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137B08h case   53:*/		return 0x82137B0C;
		  /* 82137B0Ch */ case   54:  		/* lis R10, 29312 */
		/* 82137B0Ch case   54:*/		cpu::op::lis<0>(regs,&regs.R10,0x7280);
		/* 82137B0Ch case   54:*/		return 0x82137B10;
		  /* 82137B10h */ case   55:  		/* cmplw CR6, R11, R10 */
		/* 82137B10h case   55:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B10h case   55:*/		return 0x82137B14;
		  /* 82137B14h */ case   56:  		/* bc 12, CR6_EQ, 2412 */
		/* 82137B14h case   56:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137B14h case   56:*/		return 0x82137B18;
		  /* 82137B18h */ case   57:  		/* lis R10, 29344 */
		/* 82137B18h case   57:*/		cpu::op::lis<0>(regs,&regs.R10,0x72A0);
		/* 82137B18h case   57:*/		return 0x82137B1C;
		  /* 82137B1Ch */ case   58:  		/* cmplw CR6, R11, R10 */
		/* 82137B1Ch case   58:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B1Ch case   58:*/		return 0x82137B20;
		  /* 82137B20h */ case   59:  		/* bc 12, CR6_EQ, 2400 */
		/* 82137B20h case   59:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137B20h case   59:*/		return 0x82137B24;
		  /* 82137B24h */ case   60:  		/* lis R10, 29328 */
		/* 82137B24h case   60:*/		cpu::op::lis<0>(regs,&regs.R10,0x7290);
		/* 82137B24h case   60:*/		return 0x82137B28;
		  /* 82137B28h */ case   61:  		/* cmplw CR6, R11, R10 */
		/* 82137B28h case   61:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B28h case   61:*/		return 0x82137B2C;
		  /* 82137B2Ch */ case   62:  		/* bc 12, CR6_EQ, 2388 */
		/* 82137B2Ch case   62:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137B2Ch case   62:*/		return 0x82137B30;
		  /* 82137B30h */ case   63:  		/* lis R10, 29360 */
		/* 82137B30h case   63:*/		cpu::op::lis<0>(regs,&regs.R10,0x72B0);
		/* 82137B30h case   63:*/		return 0x82137B34;
		  /* 82137B34h */ case   64:  		/* cmplw CR6, R11, R10 */
		/* 82137B34h case   64:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B34h case   64:*/		return 0x82137B38;
		  /* 82137B38h */ case   65:  		/* bc 12, CR6_EQ, 2376 */
		/* 82137B38h case   65:*/		if ( regs.CR[6].eq ) { return 0x82138480;  }
		/* 82137B38h case   65:*/		return 0x82137B3C;
		  /* 82137B3Ch */ case   66:  		/* lis R10, 29216 */
		/* 82137B3Ch case   66:*/		cpu::op::lis<0>(regs,&regs.R10,0x7220);
		/* 82137B3Ch case   66:*/		return 0x82137B40;
		  /* 82137B40h */ case   67:  		/* cmplw CR6, R11, R10 */
		/* 82137B40h case   67:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B40h case   67:*/		return 0x82137B44;
		  /* 82137B44h */ case   68:  		/* bc 12, CR6_EQ, 2800 */
		/* 82137B44h case   68:*/		if ( regs.CR[6].eq ) { return 0x82138634;  }
		/* 82137B44h case   68:*/		return 0x82137B48;
		  /* 82137B48h */ case   69:  		/* lis R10, 29248 */
		/* 82137B48h case   69:*/		cpu::op::lis<0>(regs,&regs.R10,0x7240);
		/* 82137B48h case   69:*/		return 0x82137B4C;
		  /* 82137B4Ch */ case   70:  		/* cmplw CR6, R11, R10 */
		/* 82137B4Ch case   70:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137B4Ch case   70:*/		return 0x82137B50;
		  /* 82137B50h */ case   71:  		/* bc 12, CR6_EQ, 2788 */
		/* 82137B50h case   71:*/		if ( regs.CR[6].eq ) { return 0x82138634;  }
		/* 82137B50h case   71:*/		return 0x82137B54;
		  /* 82137B54h */ case   72:  		/* lhz R11, <#[R31 + 202]> */
		/* 82137B54h case   72:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 82137B54h case   72:*/		return 0x82137B58;
		  /* 82137B58h */ case   73:  		/* cmplwi CR6, R11, 257 */
		/* 82137B58h case   73:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000101);
		/* 82137B58h case   73:*/		return 0x82137B5C;
		  /* 82137B5Ch */ case   74:  		/* bc 4, CR6_EQ, 228 */
		/* 82137B5Ch case   74:*/		if ( !regs.CR[6].eq ) { return 0x82137C40;  }
		/* 82137B5Ch case   74:*/		return 0x82137B60;
		  /* 82137B60h */ case   75:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137B60h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137B60h case   75:*/		return 0x82137B64;
		  /* 82137B64h */ case   76:  		/* mr R27, R20 */
		/* 82137B64h case   76:*/		regs.R27 = regs.R20;
		/* 82137B64h case   76:*/		return 0x82137B68;
		  /* 82137B68h */ case   77:  		/* mr R9, R20 */
		/* 82137B68h case   77:*/		regs.R9 = regs.R20;
		/* 82137B68h case   77:*/		return 0x82137B6C;
		  /* 82137B6Ch */ case   78:  		/* lwzx R11, <#[R11 + R15]> */
		/* 82137B6Ch case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82137B6Ch case   78:*/		return 0x82137B70;
		  /* 82137B70h */ case   79:  		/* lwz R10, <#[R11]> */
		/* 82137B70h case   79:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82137B70h case   79:*/		return 0x82137B74;
		  /* 82137B74h */ case   80:  		/* lwz R8, <#[R11 + 4]> */
		/* 82137B74h case   80:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82137B74h case   80:*/		return 0x82137B78;
		  /* 82137B78h */ case   81:  		/* rlwinm R11, R10, 0, 12, 31 */
		/* 82137B78h case   81:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 82137B78h case   81:*/		return 0x82137B7C;
		  /* 82137B7Ch */ case   82:  		/* divwu. R28, R8, R11 */
		/* 82137B7Ch case   82:*/		cpu::op::divwu<1>(regs,&regs.R28,regs.R8,regs.R11);
		/* 82137B7Ch case   82:*/		return 0x82137B80;
		  /* 82137B80h */ case   83:  		/* twi 6, R11, 0 */
		/* 82137B80h case   83:*/		cpu::op::tw<6>(regs, 0x82137B80, regs.R11, 0x00000000);
		/* 82137B80h case   83:*/		return 0x82137B84;
		  /* 82137B84h */ case   84:  		/* bc 12, CR0_EQ, 188 */
		/* 82137B84h case   84:*/		if ( regs.CR[0].eq ) { return 0x82137C40;  }
		/* 82137B84h case   84:*/		return 0x82137B88;
		  /* 82137B88h */ case   85:  		/* lwz R30, <#[R23 + 8]> */
		/* 82137B88h case   85:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000008) );
		/* 82137B88h case   85:*/		return 0x82137B8C;
		  /* 82137B8Ch */ case   86:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 82137B8Ch case   86:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 82137B8Ch case   86:*/		return 0x82137B90;
		  /* 82137B90h */ case   87:  		/* lwz R3, <#[R31 + 20]> */
		/* 82137B90h case   87:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82137B90h case   87:*/		return 0x82137B94;
		  /* 82137B94h */ case   88:  		/* mr R4, R30 */
		/* 82137B94h case   88:*/		regs.R4 = regs.R30;
		/* 82137B94h case   88:*/		return 0x82137B98;
		  /* 82137B98h */ case   89:  		/* lwz R11, <#[R4]> */
		/* 82137B98h case   89:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82137B98h case   89:*/		return 0x82137B9C;
		  /* 82137B9Ch */ case   90:  		/* mr R8, R20 */
		/* 82137B9Ch case   90:*/		regs.R8 = regs.R20;
		/* 82137B9Ch case   90:*/		return 0x82137BA0;
		  /* 82137BA0h */ case   91:  		/* cmplwi CR6, R9, 0 */
		/* 82137BA0h case   91:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82137BA0h case   91:*/		return 0x82137BA4;
		  /* 82137BA4h */ case   92:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137BA4h case   92:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137BA4h case   92:*/		return 0x82137BA8;
		  /* 82137BA8h */ case   93:  		/* lwzx R7, <#[R11 + R3]> */
		/* 82137BA8h case   93:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82137BA8h case   93:*/		return 0x82137BAC;
		  /* 82137BACh */ case   94:  		/* bc 12, CR6_EQ, 84 */
		/* 82137BACh case   94:*/		if ( regs.CR[6].eq ) { return 0x82137C00;  }
		/* 82137BACh case   94:*/		return 0x82137BB0;
		  /* 82137BB0h */ case   95:  		/* lwz R5, <#[R7 + 4]> */
		/* 82137BB0h case   95:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000004) );
		/* 82137BB0h case   95:*/		return 0x82137BB4;
		  /* 82137BB4h */ case   96:  		/* mr R10, R20 */
		/* 82137BB4h case   96:*/		regs.R10 = regs.R20;
		/* 82137BB4h case   96:*/		return 0x82137BB8;
		  /* 82137BB8h */ case   97:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82137BB8h case   97:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82137BB8h case   97:*/		return 0x82137BBC;
		  /* 82137BBCh */ case   98:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137BBCh case   98:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137BBCh case   98:*/		return 0x82137BC0;
		  /* 82137BC0h */ case   99:  		/* lwzx R11, <#[R11 + R3]> */
		/* 82137BC0h case   99:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82137BC0h case   99:*/		return 0x82137BC4;
		  /* 82137BC4h */ case  100:  		/* lwz R26, <#[R11 + 4]> */
		/* 82137BC4h case  100:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000004) );
		/* 82137BC4h case  100:*/		return 0x82137BC8;
		  /* 82137BC8h */ case  101:  		/* cmplw CR6, R5, R26 */
		/* 82137BC8h case  101:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R26);
		/* 82137BC8h case  101:*/		return 0x82137BCC;
		  /* 82137BCCh */ case  102:  		/* bc 4, CR6_EQ, 36 */
		/* 82137BCCh case  102:*/		if ( !regs.CR[6].eq ) { return 0x82137BF0;  }
		/* 82137BCCh case  102:*/		return 0x82137BD0;
		  /* 82137BD0h */ case  103:  		/* lwz R26, <#[R7 + 8]> */
		/* 82137BD0h case  103:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R7 + 0x00000008) );
		/* 82137BD0h case  103:*/		return 0x82137BD4;
		  /* 82137BD4h */ case  104:  		/* lwz R25, <#[R11 + 8]> */
		/* 82137BD4h case  104:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 82137BD4h case  104:*/		return 0x82137BD8;
		  /* 82137BD8h */ case  105:  		/* cmplw CR6, R26, R25 */
		/* 82137BD8h case  105:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 82137BD8h case  105:*/		return 0x82137BDC;
		  /* 82137BDCh */ case  106:  		/* bc 4, CR6_EQ, 20 */
		/* 82137BDCh case  106:*/		if ( !regs.CR[6].eq ) { return 0x82137BF0;  }
		/* 82137BDCh case  106:*/		return 0x82137BE0;
		  /* 82137BE0h */ case  107:  		/* lwz R26, <#[R7 + 12]> */
		/* 82137BE0h case  107:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R7 + 0x0000000C) );
		/* 82137BE0h case  107:*/		return 0x82137BE4;
		  /* 82137BE4h */ case  108:  		/* lwz R11, <#[R11 + 12]> */
		/* 82137BE4h case  108:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137BE4h case  108:*/		return 0x82137BE8;
		  /* 82137BE8h */ case  109:  		/* cmplw CR6, R26, R11 */
		/* 82137BE8h case  109:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82137BE8h case  109:*/		return 0x82137BEC;
		  /* 82137BECh */ case  110:  		/* bc 12, CR6_EQ, 20 */
		/* 82137BECh case  110:*/		if ( regs.CR[6].eq ) { return 0x82137C00;  }
		/* 82137BECh case  110:*/		return 0x82137BF0;
	}
	return 0x82137BF0;
} // Block from 82137A34h-82137BF0h (111 instructions)

//////////////////////////////////////////////////////
// Block at 82137BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137BF0);
		  /* 82137BF0h */ case    0:  		/* addi R8, R8, 1 */
		/* 82137BF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82137BF0h case    0:*/		return 0x82137BF4;
		  /* 82137BF4h */ case    1:  		/* add R10, R29, R10 */
		/* 82137BF4h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 82137BF4h case    1:*/		return 0x82137BF8;
		  /* 82137BF8h */ case    2:  		/* cmplw CR6, R8, R9 */
		/* 82137BF8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82137BF8h case    2:*/		return 0x82137BFC;
		  /* 82137BFCh */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 82137BFCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82137BB8;  }
		/* 82137BFCh case    3:*/		return 0x82137C00;
	}
	return 0x82137C00;
} // Block from 82137BF0h-82137C00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82137C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137C00);
		  /* 82137C00h */ case    0:  		/* cmplw CR6, R9, R8 */
		/* 82137C00h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82137C00h case    0:*/		return 0x82137C04;
		  /* 82137C04h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 82137C04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82137C28;  }
		/* 82137C04h case    1:*/		return 0x82137C08;
		  /* 82137C08h */ case    2:  		/* lwz R11, <#[R7 + 4]> */
		/* 82137C08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 82137C08h case    2:*/		return 0x82137C0C;
		  /* 82137C0Ch */ case    3:  		/* lwz R10, <#[R31 + 136]> */
		/* 82137C0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000088) );
		/* 82137C0Ch case    3:*/		return 0x82137C10;
		  /* 82137C10h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82137C10h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137C10h case    4:*/		return 0x82137C14;
		  /* 82137C14h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 82137C14h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82137C28;  }
		/* 82137C14h case    5:*/		return 0x82137C18;
		  /* 82137C18h */ case    6:  		/* lwz R11, <#[R7 + 12]> */
		/* 82137C18h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000C) );
		/* 82137C18h case    6:*/		return 0x82137C1C;
		  /* 82137C1Ch */ case    7:  		/* cmplwi CR6, R11, 2 */
		/* 82137C1Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82137C1Ch case    7:*/		return 0x82137C20;
		  /* 82137C20h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 82137C20h case    8:*/		if ( regs.CR[6].lt ) { return 0x82137C28;  }
		/* 82137C20h case    8:*/		return 0x82137C24;
		  /* 82137C24h */ case    9:  		/* addi R27, R27, 1 */
		/* 82137C24h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82137C24h case    9:*/		return 0x82137C28;
	}
	return 0x82137C28;
} // Block from 82137C00h-82137C28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82137C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137C28);
		  /* 82137C28h */ case    0:  		/* addi R9, R9, 1 */
		/* 82137C28h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82137C28h case    0:*/		return 0x82137C2C;
		  /* 82137C2Ch */ case    1:  		/* add R4, R4, R29 */
		/* 82137C2Ch case    1:*/		cpu::op::add<0>(regs,&regs.R4,regs.R4,regs.R29);
		/* 82137C2Ch case    1:*/		return 0x82137C30;
		  /* 82137C30h */ case    2:  		/* cmplw CR6, R9, R28 */
		/* 82137C30h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 82137C30h case    2:*/		return 0x82137C34;
		  /* 82137C34h */ case    3:  		/* bc 12, CR6_LT, -156 */
		/* 82137C34h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137B98;  }
		/* 82137C34h case    3:*/		return 0x82137C38;
		  /* 82137C38h */ case    4:  		/* cmplwi CR6, R27, 2 */
		/* 82137C38h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000002);
		/* 82137C38h case    4:*/		return 0x82137C3C;
		  /* 82137C3Ch */ case    5:  		/* bc 12, CR6_GT, 2636 */
		/* 82137C3Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x82138688;  }
		/* 82137C3Ch case    5:*/		return 0x82137C40;
	}
	return 0x82137C40;
} // Block from 82137C28h-82137C40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82137C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137C40);
		  /* 82137C40h */ case    0:  		/* lwz R9, <#[R23 + 12]> */
		/* 82137C40h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x0000000C) );
		/* 82137C40h case    0:*/		return 0x82137C44;
		  /* 82137C44h */ case    1:  		/* mr R5, R20 */
		/* 82137C44h case    1:*/		regs.R5 = regs.R20;
		/* 82137C44h case    1:*/		return 0x82137C48;
		  /* 82137C48h */ case    2:  		/* mr R7, R20 */
		/* 82137C48h case    2:*/		regs.R7 = regs.R20;
		/* 82137C48h case    2:*/		return 0x82137C4C;
		  /* 82137C4Ch */ case    3:  		/* mr R10, R20 */
		/* 82137C4Ch case    3:*/		regs.R10 = regs.R20;
		/* 82137C4Ch case    3:*/		return 0x82137C50;
		  /* 82137C50h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 82137C50h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82137C50h case    4:*/		return 0x82137C54;
		  /* 82137C54h */ case    5:  		/* bc 12, CR6_EQ, 164 */
		/* 82137C54h case    5:*/		if ( regs.CR[6].eq ) { return 0x82137CF8;  }
		/* 82137C54h case    5:*/		return 0x82137C58;
		  /* 82137C58h */ case    6:  		/* lwz R8, <#[R31 + 20]> */
		/* 82137C58h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82137C58h case    6:*/		return 0x82137C5C;
		  /* 82137C5Ch */ case    7:  		/* mr R11, R20 */
		/* 82137C5Ch case    7:*/		regs.R11 = regs.R20;
		/* 82137C5Ch case    7:*/		return 0x82137C60;
		  /* 82137C60h */ case    8:  		/* lwz R4, <#[R23 + 16]> */
		/* 82137C60h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000010) );
		/* 82137C60h case    8:*/		return 0x82137C64;
		  /* 82137C64h */ case    9:  		/* lwzx R4, <#[R4 + R11]> */
		/* 82137C64h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 82137C64h case    9:*/		return 0x82137C68;
		  /* 82137C68h */ case   10:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 82137C68h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 82137C68h case   10:*/		return 0x82137C6C;
		  /* 82137C6Ch */ case   11:  		/* lwzx R4, <#[R4 + R8]> */
		/* 82137C6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R8 + 0x00000000) );
		/* 82137C6Ch case   11:*/		return 0x82137C70;
		  /* 82137C70h */ case   12:  		/* lwz R4, <#[R4 + 12]> */
		/* 82137C70h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000000C) );
		/* 82137C70h case   12:*/		return 0x82137C74;
		  /* 82137C74h */ case   13:  		/* cmpwi CR6, R4, -1 */
		/* 82137C74h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82137C74h case   13:*/		return 0x82137C78;
		  /* 82137C78h */ case   14:  		/* bc 4, CR6_EQ, 56 */
		/* 82137C78h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82137CB0;  }
		/* 82137C78h case   14:*/		return 0x82137C7C;
		  /* 82137C7Ch */ case   15:  		/* li R5, 1 */
		/* 82137C7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82137C7Ch case   15:*/		return 0x82137C80;
		  /* 82137C80h */ case   16:  		/* b 52 */
		/* 82137C80h case   16:*/		return 0x82137CB4;
		/* 82137C80h case   16:*/		return 0x82137C84;
	}
	return 0x82137C84;
} // Block from 82137C40h-82137C84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82137C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137C84);
		  /* 82137C84h */ case    0:  		/* cmpwi CR6, R15, 0 */
		/* 82137C84h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82137C84h case    0:*/		return 0x82137C88;
		  /* 82137C88h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 82137C88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 82137C88h case    1:*/		return 0x82137C8C;
		  /* 82137C8Ch */ case    2:  		/* cmpwi CR6, R16, 0 */
		/* 82137C8Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R16,0x00000000);
		/* 82137C8Ch case    2:*/		return 0x82137C90;
		  /* 82137C90h */ case    3:  		/* bc 4, CR6_EQ, 92 */
		/* 82137C90h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 82137C90h case    3:*/		return 0x82137C94;
		  /* 82137C94h */ case    4:  		/* lwz R11, <#[R31 + 560]> */
		/* 82137C94h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82137C94h case    4:*/		return 0x82137C98;
		  /* 82137C98h */ case    5:  		/* lis R10, -32253 */
		/* 82137C98h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82137C98h case    5:*/		return 0x82137C9C;
		  /* 82137C9Ch */ case    6:  		/* li R5, 4521 */
		/* 82137C9Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x11A9);
		/* 82137C9Ch case    6:*/		return 0x82137CA0;
		  /* 82137CA0h */ case    7:  		/* addi R6, R10, 21764 */
		/* 82137CA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5504);
		/* 82137CA0h case    7:*/		return 0x82137CA4;
		  /* 82137CA4h */ case    8:  		/* lwzx R11, <#[R11 + R23]> */
		/* 82137CA4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82137CA4h case    8:*/		return 0x82137CA8;
		  /* 82137CA8h */ case    9:  		/* lwz R4, <#[R11 + 60]> */
		/* 82137CA8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82137CA8h case    9:*/		return 0x82137CAC;
		  /* 82137CACh */ case   10:  		/* b 56 */
		/* 82137CACh case   10:*/		return 0x82137CE4;
		/* 82137CACh case   10:*/		return 0x82137CB0;
	}
	return 0x82137CB0;
} // Block from 82137C84h-82137CB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82137CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CB0);
		  /* 82137CB0h */ case    0:  		/* li R7, 1 */
		/* 82137CB0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82137CB0h case    0:*/		return 0x82137CB4;
	}
	return 0x82137CB4;
} // Block from 82137CB0h-82137CB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82137CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CB4);
		  /* 82137CB4h */ case    0:  		/* addi R10, R10, 1 */
		/* 82137CB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82137CB4h case    0:*/		return 0x82137CB8;
		  /* 82137CB8h */ case    1:  		/* addi R11, R11, 4 */
		/* 82137CB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82137CB8h case    1:*/		return 0x82137CBC;
		  /* 82137CBCh */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 82137CBCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82137CBCh case    2:*/		return 0x82137CC0;
		  /* 82137CC0h */ case    3:  		/* bc 12, CR6_LT, -96 */
		/* 82137CC0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137C60;  }
		/* 82137CC0h case    3:*/		return 0x82137CC4;
		  /* 82137CC4h */ case    4:  		/* cmpwi CR6, R7, 0 */
		/* 82137CC4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 82137CC4h case    4:*/		return 0x82137CC8;
		  /* 82137CC8h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 82137CC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82137CF8;  }
		/* 82137CC8h case    5:*/		return 0x82137CCC;
		  /* 82137CCCh */ case    6:  		/* cmpwi CR6, R5, 0 */
		/* 82137CCCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82137CCCh case    6:*/		return 0x82137CD0;
		  /* 82137CD0h */ case    7:  		/* bc 12, CR6_EQ, 2404 */
		/* 82137CD0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82138634;  }
		/* 82137CD0h case    7:*/		return 0x82137CD4;
		  /* 82137CD4h */ case    8:  		/* li R5, 4809 */
		/* 82137CD4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x12C9);
		/* 82137CD4h case    8:*/		return 0x82137CD8;
	}
	return 0x82137CD8;
} // Block from 82137CB4h-82137CD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82137CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CD8);
		  /* 82137CD8h */ case    0:  		/* lis R11, -32253 */
		/* 82137CD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82137CD8h case    0:*/		return 0x82137CDC;
		  /* 82137CDCh */ case    1:  		/* li R4, 0 */
		/* 82137CDCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82137CDCh case    1:*/		return 0x82137CE0;
		  /* 82137CE0h */ case    2:  		/* addi R6, R11, 21852 */
		/* 82137CE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x555C);
		/* 82137CE0h case    2:*/		return 0x82137CE4;
	}
	return 0x82137CE4;
} // Block from 82137CD8h-82137CE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CE4);
		  /* 82137CE4h */ case    0:  		/* mr R3, R31 */
		/* 82137CE4h case    0:*/		regs.R3 = regs.R31;
		/* 82137CE4h case    0:*/		return 0x82137CE8;
		  /* 82137CE8h */ case    1:  		/* bl -169400 */
		/* 82137CE8h case    1:*/		regs.LR = 0x82137CEC; return 0x8210E730;
		/* 82137CE8h case    1:*/		return 0x82137CEC;
	}
	return 0x82137CEC;
} // Block from 82137CE4h-82137CECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82137CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CEC);
		  /* 82137CECh */ case    0:  		/* lis R3, -32768 */
		/* 82137CECh case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82137CECh case    0:*/		return 0x82137CF0;
		  /* 82137CF0h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82137CF0h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82137CF0h case    1:*/		return 0x82137CF4;
		  /* 82137CF4h */ case    2:  		/* b 2440 */
		/* 82137CF4h case    2:*/		return 0x8213867C;
		/* 82137CF4h case    2:*/		return 0x82137CF8;
	}
	return 0x82137CF8;
} // Block from 82137CECh-82137CF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82137CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137CF8);
		  /* 82137CF8h */ case    0:  		/* stw R20, <#[R1 + 96]> */
		/* 82137CF8h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 82137CF8h case    0:*/		return 0x82137CFC;
		  /* 82137CFCh */ case    1:  		/* addi R17, R14, 1 */
		/* 82137CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R14,0x1);
		/* 82137CFCh case    1:*/		return 0x82137D00;
		  /* 82137D00h */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137D00h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137D00h case    2:*/		return 0x82137D04;
		  /* 82137D04h */ case    3:  		/* addi R10, R1, 96 */
		/* 82137D04h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82137D04h case    3:*/		return 0x82137D08;
		  /* 82137D08h */ case    4:  		/* addi R9, R1, 480 */
		/* 82137D08h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x1E0);
		/* 82137D08h case    4:*/		return 0x82137D0C;
		  /* 82137D0Ch */ case    5:  		/* mr R5, R17 */
		/* 82137D0Ch case    5:*/		regs.R5 = regs.R17;
		/* 82137D0Ch case    5:*/		return 0x82137D10;
		  /* 82137D10h */ case    6:  		/* mr R3, R31 */
		/* 82137D10h case    6:*/		regs.R3 = regs.R31;
		/* 82137D10h case    6:*/		return 0x82137D14;
		  /* 82137D14h */ case    7:  		/* lwzx R11, <#[R4 + R15]> */
		/* 82137D14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R15 + 0x00000000) );
		/* 82137D14h case    7:*/		return 0x82137D18;
		  /* 82137D18h */ case    8:  		/* lwz R8, <#[R11 + 12]> */
		/* 82137D18h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137D18h case    8:*/		return 0x82137D1C;
		  /* 82137D1Ch */ case    9:  		/* lwz R7, <#[R11 + 16]> */
		/* 82137D1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82137D1Ch case    9:*/		return 0x82137D20;
		  /* 82137D20h */ case   10:  		/* bl -7056 */
		/* 82137D20h case   10:*/		regs.LR = 0x82137D24; return 0x82136190;
		/* 82137D20h case   10:*/		return 0x82137D24;
		  /* 82137D24h */ case   11:  		/* lwz R16, <#[R1 + 96]> */
		/* 82137D24h case   11:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000060) );
		/* 82137D24h case   11:*/		return 0x82137D28;
		  /* 82137D28h */ case   12:  		/* addi R7, R1, 96 */
		/* 82137D28h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82137D28h case   12:*/		return 0x82137D2C;
		  /* 82137D2Ch */ case   13:  		/* lwz R5, <#[R31 + 548]> */
		/* 82137D2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000224) );
		/* 82137D2Ch case   13:*/		return 0x82137D30;
		  /* 82137D30h */ case   14:  		/* addi R6, R1, 480 */
		/* 82137D30h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1E0);
		/* 82137D30h case   14:*/		return 0x82137D34;
		  /* 82137D34h */ case   15:  		/* lwz R4, <#[R31 + 560]> */
		/* 82137D34h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82137D34h case   15:*/		return 0x82137D38;
		  /* 82137D38h */ case   16:  		/* mr R3, R31 */
		/* 82137D38h case   16:*/		regs.R3 = regs.R31;
		/* 82137D38h case   16:*/		return 0x82137D3C;
		  /* 82137D3Ch */ case   17:  		/* mr R30, R16 */
		/* 82137D3Ch case   17:*/		regs.R30 = regs.R16;
		/* 82137D3Ch case   17:*/		return 0x82137D40;
		  /* 82137D40h */ case   18:  		/* bl -7440 */
		/* 82137D40h case   18:*/		regs.LR = 0x82137D44; return 0x82136030;
		/* 82137D40h case   18:*/		return 0x82137D44;
		  /* 82137D44h */ case   19:  		/* addi R7, R1, 96 */
		/* 82137D44h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82137D44h case   19:*/		return 0x82137D48;
		  /* 82137D48h */ case   20:  		/* addi R6, R1, 480 */
		/* 82137D48h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1E0);
		/* 82137D48h case   20:*/		return 0x82137D4C;
		  /* 82137D4Ch */ case   21:  		/* lwz R5, <#[R31 + 552]> */
		/* 82137D4Ch case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000228) );
		/* 82137D4Ch case   21:*/		return 0x82137D50;
		  /* 82137D50h */ case   22:  		/* mr R3, R31 */
		/* 82137D50h case   22:*/		regs.R3 = regs.R31;
		/* 82137D50h case   22:*/		return 0x82137D54;
		  /* 82137D54h */ case   23:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137D54h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137D54h case   23:*/		return 0x82137D58;
		  /* 82137D58h */ case   24:  		/* bl -7464 */
		/* 82137D58h case   24:*/		regs.LR = 0x82137D5C; return 0x82136030;
		/* 82137D58h case   24:*/		return 0x82137D5C;
		  /* 82137D5Ch */ case   25:  		/* lwz R16, <#[R1 + 96]> */
		/* 82137D5Ch case   25:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000060) );
		/* 82137D5Ch case   25:*/		return 0x82137D60;
		  /* 82137D60h */ case   26:  		/* cmplw CR6, R30, R16 */
		/* 82137D60h case   26:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R16);
		/* 82137D60h case   26:*/		return 0x82137D64;
		  /* 82137D64h */ case   27:  		/* bc 4, CR6_EQ, -60 */
		/* 82137D64h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82137D28;  }
		/* 82137D64h case   27:*/		return 0x82137D68;
		  /* 82137D68h */ case   28:  		/* lhz R26, <#[R31 + 202]> */
		/* 82137D68h case   28:*/		cpu::mem::load16z( regs, &regs.R26, (uint32)(regs.R31 + 0x000000CA) );
		/* 82137D68h case   28:*/		return 0x82137D6C;
		  /* 82137D6Ch */ case   29:  		/* li R28, -1 */
		/* 82137D6Ch case   29:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 82137D6Ch case   29:*/		return 0x82137D70;
		  /* 82137D70h */ case   30:  		/* mr R27, R28 */
		/* 82137D70h case   30:*/		regs.R27 = regs.R28;
		/* 82137D70h case   30:*/		return 0x82137D74;
		  /* 82137D74h */ case   31:  		/* cmplwi CR6, R26, 258 */
		/* 82137D74h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000102);
		/* 82137D74h case   31:*/		return 0x82137D78;
		  /* 82137D78h */ case   32:  		/* bc 12, CR6_EQ, 12 */
		/* 82137D78h case   32:*/		if ( regs.CR[6].eq ) { return 0x82137D84;  }
		/* 82137D78h case   32:*/		return 0x82137D7C;
		  /* 82137D7Ch */ case   33:  		/* cmplwi CR6, R26, 259 */
		/* 82137D7Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000103);
		/* 82137D7Ch case   33:*/		return 0x82137D80;
		  /* 82137D80h */ case   34:  		/* bc 4, CR6_EQ, 100 */
		/* 82137D80h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82137DE4;  }
		/* 82137D80h case   34:*/		return 0x82137D84;
	}
	return 0x82137D84;
} // Block from 82137CF8h-82137D84h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82137D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137D84);
		  /* 82137D84h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137D84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137D84h case    0:*/		return 0x82137D88;
		  /* 82137D88h */ case    1:  		/* lis R10, 20480 */
		/* 82137D88h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82137D88h case    1:*/		return 0x82137D8C;
		  /* 82137D8Ch */ case    2:  		/* ori R10, R10, 4 */
		/* 82137D8Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82137D8Ch case    2:*/		return 0x82137D90;
		  /* 82137D90h */ case    3:  		/* lwzx R11, <#[R11 + R15]> */
		/* 82137D90h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82137D90h case    3:*/		return 0x82137D94;
		  /* 82137D94h */ case    4:  		/* lwz R9, <#[R11]> */
		/* 82137D94h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82137D94h case    4:*/		return 0x82137D98;
		  /* 82137D98h */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 82137D98h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82137D98h case    5:*/		return 0x82137D9C;
		  /* 82137D9Ch */ case    6:  		/* bc 4, CR6_EQ, 72 */
		/* 82137D9Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82137DE4;  }
		/* 82137D9Ch case    6:*/		return 0x82137DA0;
		  /* 82137DA0h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 82137DA0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82137DA0h case    7:*/		return 0x82137DA4;
		  /* 82137DA4h */ case    8:  		/* lwz R10, <#[R31 + 20]> */
		/* 82137DA4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82137DA4h case    8:*/		return 0x82137DA8;
		  /* 82137DA8h */ case    9:  		/* lwz R9, <#[R31 + 136]> */
		/* 82137DA8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000088) );
		/* 82137DA8h case    9:*/		return 0x82137DAC;
		  /* 82137DACh */ case   10:  		/* lwz R8, <#[R11]> */
		/* 82137DACh case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82137DACh case   10:*/		return 0x82137DB0;
		  /* 82137DB0h */ case   11:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82137DB0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82137DB0h case   11:*/		return 0x82137DB4;
		  /* 82137DB4h */ case   12:  		/* lwzx R8, <#[R8 + R10]> */
		/* 82137DB4h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82137DB4h case   12:*/		return 0x82137DB8;
		  /* 82137DB8h */ case   13:  		/* lwz R7, <#[R8 + 4]> */
		/* 82137DB8h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000004) );
		/* 82137DB8h case   13:*/		return 0x82137DBC;
		  /* 82137DBCh */ case   14:  		/* cmplw CR6, R7, R9 */
		/* 82137DBCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 82137DBCh case   14:*/		return 0x82137DC0;
		  /* 82137DC0h */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 82137DC0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82137DC8;  }
		/* 82137DC0h case   15:*/		return 0x82137DC4;
		  /* 82137DC4h */ case   16:  		/* lwz R27, <#[R8 + 12]> */
		/* 82137DC4h case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R8 + 0x0000000C) );
		/* 82137DC4h case   16:*/		return 0x82137DC8;
	}
	return 0x82137DC8;
} // Block from 82137D84h-82137DC8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82137DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137DC8);
		  /* 82137DC8h */ case    0:  		/* lwz R11, <#[R11 + 16]> */
		/* 82137DC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82137DC8h case    0:*/		return 0x82137DCC;
		  /* 82137DCCh */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137DCCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137DCCh case    1:*/		return 0x82137DD0;
		  /* 82137DD0h */ case    2:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82137DD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137DD0h case    2:*/		return 0x82137DD4;
		  /* 82137DD4h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82137DD4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82137DD4h case    3:*/		return 0x82137DD8;
		  /* 82137DD8h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 82137DD8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82137DD8h case    4:*/		return 0x82137DDC;
		  /* 82137DDCh */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82137DDCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82137DE4;  }
		/* 82137DDCh case    5:*/		return 0x82137DE0;
		  /* 82137DE0h */ case    6:  		/* lwz R28, <#[R11 + 12]> */
		/* 82137DE0h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 82137DE0h case    6:*/		return 0x82137DE4;
	}
	return 0x82137DE4;
} // Block from 82137DC8h-82137DE4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82137DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137DE4);
		  /* 82137DE4h */ case    0:  		/* mr R29, R20 */
		/* 82137DE4h case    0:*/		regs.R29 = regs.R20;
		/* 82137DE4h case    0:*/		return 0x82137DE8;
		  /* 82137DE8h */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 82137DE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82137DE8h case    1:*/		return 0x82137DEC;
		  /* 82137DECh */ case    2:  		/* bc 12, CR6_EQ, 184 */
		/* 82137DECh case    2:*/		if ( regs.CR[6].eq ) { return 0x82137EA4;  }
		/* 82137DECh case    2:*/		return 0x82137DF0;
		  /* 82137DF0h */ case    3:  		/* lwz R3, <#[R31 + 552]> */
		/* 82137DF0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000228) );
		/* 82137DF0h case    3:*/		return 0x82137DF4;
		  /* 82137DF4h */ case    4:  		/* addi R5, R1, 480 */
		/* 82137DF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E0);
		/* 82137DF4h case    4:*/		return 0x82137DF8;
		  /* 82137DF8h */ case    5:  		/* mr R30, R16 */
		/* 82137DF8h case    5:*/		regs.R30 = regs.R16;
		/* 82137DF8h case    5:*/		return 0x82137DFC;
		  /* 82137DFCh */ case    6:  		/* cmplw CR6, R17, R3 */
		/* 82137DFCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R3);
		/* 82137DFCh case    6:*/		return 0x82137E00;
		  /* 82137E00h */ case    7:  		/* bc 4, CR6_LT, 144 */
		/* 82137E00h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82137E90;  }
		/* 82137E00h case    7:*/		return 0x82137E04;
		  /* 82137E04h */ case    8:  		/* subf R9, R17, R3 */
		/* 82137E04h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R17,regs.R3);
		/* 82137E04h case    8:*/		return 0x82137E08;
		  /* 82137E08h */ case    9:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137E08h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137E08h case    9:*/		return 0x82137E0C;
		  /* 82137E0Ch */ case   10:  		/* rlwinm R10, R17, 2, 0, 29 */
		/* 82137E0Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R17);
		/* 82137E0Ch case   10:*/		return 0x82137E10;
		  /* 82137E10h */ case   11:  		/* add R4, R10, R11 */
		/* 82137E10h case   11:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82137E10h case   11:*/		return 0x82137E14;
		  /* 82137E14h */ case   12:  		/* mtspr CTR, R9 */
		/* 82137E14h case   12:*/		regs.CTR = regs.R9;
		/* 82137E14h case   12:*/		return 0x82137E18;
	}
	return 0x82137E18;
} // Block from 82137DE4h-82137E18h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82137E18h
// Function '?InitZs@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137E18);
		  /* 82137E18h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82137E18h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82137E18h case    0:*/		return 0x82137E1C;
		  /* 82137E1Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82137E1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82137E1Ch case    1:*/		return 0x82137E20;
		  /* 82137E20h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 82137E20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82137E88;  }
		/* 82137E20h case    2:*/		return 0x82137E24;
		  /* 82137E24h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 82137E24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82137E24h case    3:*/		return 0x82137E28;
		  /* 82137E28h */ case    4:  		/* lis R9, 28912 */
		/* 82137E28h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0x70F0);
		/* 82137E28h case    4:*/		return 0x82137E2C;
		  /* 82137E2Ch */ case    5:  		/* rlwinm R8, R11, 0, 0, 11 */
		/* 82137E2Ch case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R8,regs.R11);
		/* 82137E2Ch case    5:*/		return 0x82137E30;
		  /* 82137E30h */ case    6:  		/* cmplw CR6, R8, R9 */
		/* 82137E30h case    6:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82137E30h case    6:*/		return 0x82137E34;
		  /* 82137E34h */ case    7:  		/* bc 4, CR6_EQ, 84 */
		/* 82137E34h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82137E88;  }
		/* 82137E34h case    7:*/		return 0x82137E38;
		  /* 82137E38h */ case    8:  		/* rlwinm. R6, R11, 0, 12, 31 */
		/* 82137E38h case    8:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R6,regs.R11);
		/* 82137E38h case    8:*/		return 0x82137E3C;
		  /* 82137E3Ch */ case    9:  		/* mr R7, R20 */
		/* 82137E3Ch case    9:*/		regs.R7 = regs.R20;
		/* 82137E3Ch case    9:*/		return 0x82137E40;
		  /* 82137E40h */ case   10:  		/* bc 12, CR0_EQ, 72 */
		/* 82137E40h case   10:*/		if ( regs.CR[0].eq ) { return 0x82137E88;  }
		/* 82137E40h case   10:*/		return 0x82137E44;
		  /* 82137E44h */ case   11:  		/* lwz R8, <#[R10 + 8]> */
		/* 82137E44h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82137E44h case   11:*/		return 0x82137E48;
		  /* 82137E48h */ case   12:  		/* mr R11, R20 */
		/* 82137E48h case   12:*/		regs.R11 = regs.R20;
		/* 82137E48h case   12:*/		return 0x82137E4C;
		  /* 82137E4Ch */ case   13:  		/* lwz R9, <#[R5]> */
		/* 82137E4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 82137E4Ch case   13:*/		return 0x82137E50;
		  /* 82137E50h */ case   14:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82137E50h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82137E50h case   14:*/		return 0x82137E54;
		  /* 82137E54h */ case   15:  		/* cmplw CR6, R10, R9 */
		/* 82137E54h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82137E54h case   15:*/		return 0x82137E58;
		  /* 82137E58h */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 82137E58h case   16:*/		if ( regs.CR[6].eq ) { return 0x82137E74;  }
		/* 82137E58h case   16:*/		return 0x82137E5C;
		  /* 82137E5Ch */ case   17:  		/* lwz R25, <#[R31 + 20]> */
		/* 82137E5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 82137E5Ch case   17:*/		return 0x82137E60;
		  /* 82137E60h */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82137E60h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82137E60h case   18:*/		return 0x82137E64;
		  /* 82137E64h */ case   19:  		/* lwzx R10, <#[R10 + R25]> */
		/* 82137E64h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R25 + 0x00000000) );
		/* 82137E64h case   19:*/		return 0x82137E68;
		  /* 82137E68h */ case   20:  		/* lwz R10, <#[R10 + 56]> */
		/* 82137E68h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 82137E68h case   20:*/		return 0x82137E6C;
		  /* 82137E6Ch */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 82137E6Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82137E6Ch case   21:*/		return 0x82137E70;
		  /* 82137E70h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 82137E70h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82137E78;  }
		/* 82137E70h case   22:*/		return 0x82137E74;
	}
	return 0x82137E74;
} // Block from 82137E18h-82137E74h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82137E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137E74);
		  /* 82137E74h */ case    0:  		/* li R29, 1 */
		/* 82137E74h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82137E74h case    0:*/		return 0x82137E78;
	}
	return 0x82137E78;
} // Block from 82137E74h-82137E78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82137E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137E78);
		  /* 82137E78h */ case    0:  		/* addi R7, R7, 1 */
		/* 82137E78h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82137E78h case    0:*/		return 0x82137E7C;
		  /* 82137E7Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 82137E7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82137E7Ch case    1:*/		return 0x82137E80;
		  /* 82137E80h */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 82137E80h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82137E80h case    2:*/		return 0x82137E84;
		  /* 82137E84h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 82137E84h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137E50;  }
		/* 82137E84h case    3:*/		return 0x82137E88;
	}
	return 0x82137E88;
} // Block from 82137E78h-82137E88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82137E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137E88);
		  /* 82137E88h */ case    0:  		/* addi R4, R4, 4 */
		/* 82137E88h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82137E88h case    0:*/		return 0x82137E8C;
		  /* 82137E8Ch */ case    1:  		/* bc 16, CR0_LT, -116 */
		/* 82137E8Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82137E18;  }
		/* 82137E8Ch case    1:*/		return 0x82137E90;
	}
	return 0x82137E90;
} // Block from 82137E88h-82137E90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82137E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137E90);
		  /* 82137E90h */ case    0:  		/* addic. R30, R30, -1 */
		/* 82137E90h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82137E90h case    0:*/		return 0x82137E94;
		  /* 82137E94h */ case    1:  		/* addi R5, R5, 4 */
		/* 82137E94h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 82137E94h case    1:*/		return 0x82137E98;
		  /* 82137E98h */ case    2:  		/* bc 4, CR0_EQ, -156 */
		/* 82137E98h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82137DFC;  }
		/* 82137E98h case    2:*/		return 0x82137E9C;
		  /* 82137E9Ch */ case    3:  		/* cmpwi CR6, R29, 0 */
		/* 82137E9Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82137E9Ch case    3:*/		return 0x82137EA0;
		  /* 82137EA0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 82137EA0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82137EB4;  }
		/* 82137EA0h case    4:*/		return 0x82137EA4;
	}
	return 0x82137EA4;
} // Block from 82137E90h-82137EA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82137EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137EA4);
		  /* 82137EA4h */ case    0:  		/* lwz R11, <#[R31 + 1104]> */
		/* 82137EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000450) );
		/* 82137EA4h case    0:*/		return 0x82137EA8;
		  /* 82137EA8h */ case    1:  		/* li R8, 1 */
		/* 82137EA8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82137EA8h case    1:*/		return 0x82137EAC;
		  /* 82137EACh */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 82137EACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82137EACh case    2:*/		return 0x82137EB0;
		  /* 82137EB0h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82137EB0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82137EB8;  }
		/* 82137EB0h case    3:*/		return 0x82137EB4;
	}
	return 0x82137EB4;
} // Block from 82137EA4h-82137EB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82137EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137EB4);
		  /* 82137EB4h */ case    0:  		/* mr R8, R20 */
		/* 82137EB4h case    0:*/		regs.R8 = regs.R20;
		/* 82137EB4h case    0:*/		return 0x82137EB8;
	}
	return 0x82137EB8;
} // Block from 82137EB4h-82137EB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82137EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137EB8);
		  /* 82137EB8h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 82137EB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82137EB8h case    0:*/		return 0x82137EBC;
		  /* 82137EBCh */ case    1:  		/* lwzx R7, <#[R11 + R15]> */
		/* 82137EBCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82137EBCh case    1:*/		return 0x82137EC0;
		  /* 82137EC0h */ case    2:  		/* lwz R9, <#[R7]> */
		/* 82137EC0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 82137EC0h case    2:*/		return 0x82137EC4;
		  /* 82137EC4h */ case    3:  		/* rlwinm R11, R9, 0, 12, 31 */
		/* 82137EC4h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R9);
		/* 82137EC4h case    3:*/		return 0x82137EC8;
		  /* 82137EC8h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82137EC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82137EC8h case    4:*/		return 0x82137ECC;
		  /* 82137ECCh */ case    5:  		/* bc 4, CR6_EQ, 128 */
		/* 82137ECCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82137F4C;  }
		/* 82137ECCh case    5:*/		return 0x82137ED0;
		  /* 82137ED0h */ case    6:  		/* rlwinm R11, R9, 0, 0, 11 */
		/* 82137ED0h case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R9);
		/* 82137ED0h case    6:*/		return 0x82137ED4;
		  /* 82137ED4h */ case    7:  		/* lis R10, 20480 */
		/* 82137ED4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82137ED4h case    7:*/		return 0x82137ED8;
		  /* 82137ED8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82137ED8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137ED8h case    8:*/		return 0x82137EDC;
		  /* 82137EDCh */ case    9:  		/* bc 12, CR6_EQ, 112 */
		/* 82137EDCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82137F4C;  }
		/* 82137EDCh case    9:*/		return 0x82137EE0;
		  /* 82137EE0h */ case   10:  		/* cmplwi CR6, R16, 1 */
		/* 82137EE0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000001);
		/* 82137EE0h case   10:*/		return 0x82137EE4;
		  /* 82137EE4h */ case   11:  		/* bc 4, CR6_EQ, 104 */
		/* 82137EE4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82137F4C;  }
		/* 82137EE4h case   11:*/		return 0x82137EE8;
		  /* 82137EE8h */ case   12:  		/* lwz R11, <#[R1 + 480]> */
		/* 82137EE8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001E0) );
		/* 82137EE8h case   12:*/		return 0x82137EEC;
		  /* 82137EECh */ case   13:  		/* lwz R10, <#[R31 + 20]> */
		/* 82137EECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82137EECh case   13:*/		return 0x82137EF0;
	}
	return 0x82137EF0;
} // Block from 82137EB8h-82137EF0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82137EF0h
// Function '?AllocateRegisters@CPSLegacyProgram@D3DXShader@@IAAJHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137EF0);
		  /* 82137EF0h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82137EF0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82137EF0h case    0:*/		return 0x82137EF4;
		  /* 82137EF4h */ case    1:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82137EF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82137EF4h case    1:*/		return 0x82137EF8;
		  /* 82137EF8h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 82137EF8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82137EF8h case    2:*/		return 0x82137EFC;
		  /* 82137EFCh */ case    3:  		/* cmplwi CR6, R11, 3 */
		/* 82137EFCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82137EFCh case    3:*/		return 0x82137F00;
		  /* 82137F00h */ case    4:  		/* bc 4, CR6_EQ, 76 */
		/* 82137F00h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82137F4C;  }
		/* 82137F00h case    4:*/		return 0x82137F04;
		  /* 82137F04h */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 82137F04h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82137F04h case    5:*/		return 0x82137F08;
		  /* 82137F08h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 82137F08h case    6:*/		if ( regs.CR[6].eq ) { return 0x82137F4C;  }
		/* 82137F08h case    6:*/		return 0x82137F0C;
		  /* 82137F0Ch */ case    7:  		/* li R18, 1 */
		/* 82137F0Ch case    7:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 82137F0Ch case    7:*/		return 0x82137F10;
		  /* 82137F10h */ case    8:  		/* addi R10, R1, 220 */
		/* 82137F10h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xDC);
		/* 82137F10h case    8:*/		return 0x82137F14;
		  /* 82137F14h */ case    9:  		/* addi R11, R1, 132 */
		/* 82137F14h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 82137F14h case    9:*/		return 0x82137F18;
		  /* 82137F18h */ case   10:  		/* lwz R6, <#[R11]> */
		/* 82137F18h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82137F18h case   10:*/		return 0x82137F1C;
		  /* 82137F1Ch */ case   11:  		/* cmplw CR6, R6, R14 */
		/* 82137F1Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R14);
		/* 82137F1Ch case   11:*/		return 0x82137F20;
		  /* 82137F20h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 82137F20h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82137F30;  }
		/* 82137F20h case   12:*/		return 0x82137F24;
		  /* 82137F24h */ case   13:  		/* lwz R6, <#[R10]> */
		/* 82137F24h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82137F24h case   13:*/		return 0x82137F28;
		  /* 82137F28h */ case   14:  		/* cmplw CR6, R6, R14 */
		/* 82137F28h case   14:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R14);
		/* 82137F28h case   14:*/		return 0x82137F2C;
		  /* 82137F2Ch */ case   15:  		/* bc 4, CR6_GT, 24 */
		/* 82137F2Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x82137F44;  }
		/* 82137F2Ch case   15:*/		return 0x82137F30;
	}
	return 0x82137F30;
} // Block from 82137EF0h-82137F30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82137F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137F30);
		  /* 82137F30h */ case    0:  		/* addi R18, R18, 1 */
		/* 82137F30h case    0:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 82137F30h case    0:*/		return 0x82137F34;
		  /* 82137F34h */ case    1:  		/* addi R11, R11, 4 */
		/* 82137F34h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82137F34h case    1:*/		return 0x82137F38;
		  /* 82137F38h */ case    2:  		/* addi R10, R10, 16 */
		/* 82137F38h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82137F38h case    2:*/		return 0x82137F3C;
		  /* 82137F3Ch */ case    3:  		/* cmplwi CR6, R18, 6 */
		/* 82137F3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000006);
		/* 82137F3Ch case    3:*/		return 0x82137F40;
		  /* 82137F40h */ case    4:  		/* bc 12, CR6_LT, -40 */
		/* 82137F40h case    4:*/		if ( regs.CR[6].lt ) { return 0x82137F18;  }
		/* 82137F40h case    4:*/		return 0x82137F44;
	}
	return 0x82137F44;
} // Block from 82137F30h-82137F44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82137F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137F44);
		  /* 82137F44h */ case    0:  		/* cmplwi CR6, R18, 6 */
		/* 82137F44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000006);
		/* 82137F44h case    0:*/		return 0x82137F48;
		  /* 82137F48h */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 82137F48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82137F94;  }
		/* 82137F48h case    1:*/		return 0x82137F4C;
	}
	return 0x82137F4C;
} // Block from 82137F44h-82137F4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82137F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137F4C);
		  /* 82137F4Ch */ case    0:  		/* addic R11, R8, -1 */
		/* 82137F4Ch case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 82137F4Ch case    0:*/		return 0x82137F50;
		  /* 82137F50h */ case    1:  		/* subfe R18, R11, R8 */
		/* 82137F50h case    1:*/		cpu::op::subfe<0>(regs,&regs.R18,regs.R11,regs.R8);
		/* 82137F50h case    1:*/		return 0x82137F54;
		  /* 82137F54h */ case    2:  		/* cmplwi CR6, R18, 6 */
		/* 82137F54h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000006);
		/* 82137F54h case    2:*/		return 0x82137F58;
		  /* 82137F58h */ case    3:  		/* bc 4, CR6_LT, 60 */
		/* 82137F58h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82137F94;  }
		/* 82137F58h case    3:*/		return 0x82137F5C;
		  /* 82137F5Ch */ case    4:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 82137F5Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 82137F5Ch case    4:*/		return 0x82137F60;
		  /* 82137F60h */ case    5:  		/* addi R11, R1, 128 */
		/* 82137F60h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82137F60h case    5:*/		return 0x82137F64;
		  /* 82137F64h */ case    6:  		/* add R11, R10, R11 */
		/* 82137F64h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82137F64h case    6:*/		return 0x82137F68;
		  /* 82137F68h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 82137F68h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82137F68h case    7:*/		return 0x82137F6C;
		  /* 82137F6Ch */ case    8:  		/* cmplw CR6, R10, R14 */
		/* 82137F6Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R14);
		/* 82137F6Ch case    8:*/		return 0x82137F70;
		  /* 82137F70h */ case    9:  		/* bc 12, CR6_GT, 20 */
		/* 82137F70h case    9:*/		if ( regs.CR[6].gt ) { return 0x82137F84;  }
		/* 82137F70h case    9:*/		return 0x82137F74;
		  /* 82137F74h */ case   10:  		/* cmplw CR6, R18, R27 */
		/* 82137F74h case   10:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R27);
		/* 82137F74h case   10:*/		return 0x82137F78;
		  /* 82137F78h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 82137F78h case   11:*/		if ( regs.CR[6].eq ) { return 0x82137F84;  }
		/* 82137F78h case   11:*/		return 0x82137F7C;
		  /* 82137F7Ch */ case   12:  		/* cmplw CR6, R18, R28 */
		/* 82137F7Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R28);
		/* 82137F7Ch case   12:*/		return 0x82137F80;
		  /* 82137F80h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 82137F80h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82137F94;  }
		/* 82137F80h case   13:*/		return 0x82137F84;
	}
	return 0x82137F84;
} // Block from 82137F4Ch-82137F84h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82137F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137F84);
		  /* 82137F84h */ case    0:  		/* addi R18, R18, 1 */
		/* 82137F84h case    0:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 82137F84h case    0:*/		return 0x82137F88;
		  /* 82137F88h */ case    1:  		/* addi R11, R11, 4 */
		/* 82137F88h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82137F88h case    1:*/		return 0x82137F8C;
		  /* 82137F8Ch */ case    2:  		/* cmplwi CR6, R18, 6 */
		/* 82137F8Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000006);
		/* 82137F8Ch case    2:*/		return 0x82137F90;
		  /* 82137F90h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 82137F90h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137F68;  }
		/* 82137F90h case    3:*/		return 0x82137F94;
	}
	return 0x82137F94;
} // Block from 82137F84h-82137F94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82137F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137F94);
		  /* 82137F94h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 82137F94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 82137F94h case    0:*/		return 0x82137F98;
		  /* 82137F98h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82137F98h case    1:*/		if ( regs.CR[6].eq ) { return 0x82137FB0;  }
		/* 82137F98h case    1:*/		return 0x82137F9C;
		  /* 82137F9Ch */ case    2:  		/* cmpwi CR6, R8, 0 */
		/* 82137F9Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82137F9Ch case    2:*/		return 0x82137FA0;
		  /* 82137FA0h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82137FA0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82137FB0;  }
		/* 82137FA0h case    3:*/		return 0x82137FA4;
		  /* 82137FA4h */ case    4:  		/* lwz R11, <#[R31 + 1104]> */
		/* 82137FA4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000450) );
		/* 82137FA4h case    4:*/		return 0x82137FA8;
		  /* 82137FA8h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82137FA8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82137FA8h case    5:*/		return 0x82137FAC;
		  /* 82137FACh */ case    6:  		/* bc 4, CR6_EQ, 1800 */
		/* 82137FACh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821386B4;  }
		/* 82137FACh case    6:*/		return 0x82137FB0;
	}
	return 0x82137FB0;
} // Block from 82137F94h-82137FB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82137FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82137FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82137FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82137FB0);
		  /* 82137FB0h */ case    0:  		/* cmplwi CR6, R18, 6 */
		/* 82137FB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000006);
		/* 82137FB0h case    0:*/		return 0x82137FB4;
		  /* 82137FB4h */ case    1:  		/* bc 12, CR6_EQ, 1824 */
		/* 82137FB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821386D4;  }
		/* 82137FB4h case    1:*/		return 0x82137FB8;
		  /* 82137FB8h */ case    2:  		/* rlwinm R11, R9, 0, 0, 11 */
		/* 82137FB8h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R9);
		/* 82137FB8h case    2:*/		return 0x82137FBC;
		  /* 82137FBCh */ case    3:  		/* lis R10, 20480 */
		/* 82137FBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82137FBCh case    3:*/		return 0x82137FC0;
		  /* 82137FC0h */ case    4:  		/* mr R30, R20 */
		/* 82137FC0h case    4:*/		regs.R30 = regs.R20;
		/* 82137FC0h case    4:*/		return 0x82137FC4;
		  /* 82137FC4h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82137FC4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82137FC4h case    5:*/		return 0x82137FC8;
		  /* 82137FC8h */ case    6:  		/* bc 4, CR6_EQ, 1044 */
		/* 82137FC8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821383DC;  }
		/* 82137FC8h case    6:*/		return 0x82137FCC;
		  /* 82137FCCh */ case    7:  		/* cmplwi CR6, R26, 260 */
		/* 82137FCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000104);
		/* 82137FCCh case    7:*/		return 0x82137FD0;
		  /* 82137FD0h */ case    8:  		/* bc 4, CR6_LT, 1036 */
		/* 82137FD0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821383DC;  }
		/* 82137FD0h case    8:*/		return 0x82137FD4;
		  /* 82137FD4h */ case    9:  		/* lwz R11, <#[R7 + 12]> */
		/* 82137FD4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000C) );
		/* 82137FD4h case    9:*/		return 0x82137FD8;
		  /* 82137FD8h */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 82137FD8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82137FD8h case   10:*/		return 0x82137FDC;
		  /* 82137FDCh */ case   11:  		/* bc 4, CR6_EQ, 1024 */
		/* 82137FDCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821383DC;  }
		/* 82137FDCh case   11:*/		return 0x82137FE0;
		  /* 82137FE0h */ case   12:  		/* addi R11, R1, 96 */
		/* 82137FE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82137FE0h case   12:*/		return 0x82137FE4;
		  /* 82137FE4h */ case   13:  		/* lwz R4, <#[R31 + 564]> */
		/* 82137FE4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82137FE4h case   13:*/		return 0x82137FE8;
		  /* 82137FE8h */ case   14:  		/* addi R10, R1, 112 */
		/* 82137FE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82137FE8h case   14:*/		return 0x82137FEC;
		  /* 82137FECh */ case   15:  		/* lwz R6, <#[R31 + 552]> */
		/* 82137FECh case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82137FECh case   15:*/		return 0x82137FF0;
		  /* 82137FF0h */ case   16:  		/* stw R11, <#[R1 + 84]> */
		/* 82137FF0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82137FF0h case   16:*/		return 0x82137FF4;
		  /* 82137FF4h */ case   17:  		/* addi R9, R1, 108 */
		/* 82137FF4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 82137FF4h case   17:*/		return 0x82137FF8;
		  /* 82137FF8h */ case   18:  		/* mr R5, R17 */
		/* 82137FF8h case   18:*/		regs.R5 = regs.R17;
		/* 82137FF8h case   18:*/		return 0x82137FFC;
		  /* 82137FFCh */ case   19:  		/* mr R3, R31 */
		/* 82137FFCh case   19:*/		regs.R3 = regs.R31;
		/* 82137FFCh case   19:*/		return 0x82138000;
		  /* 82138000h */ case   20:  		/* lwzx R11, <#[R4 + R15]> */
		/* 82138000h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R15 + 0x00000000) );
		/* 82138000h case   20:*/		return 0x82138004;
		  /* 82138004h */ case   21:  		/* lwz R8, <#[R11 + 12]> */
		/* 82138004h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82138004h case   21:*/		return 0x82138008;
		  /* 82138008h */ case   22:  		/* lwz R7, <#[R11 + 16]> */
		/* 82138008h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82138008h case   22:*/		return 0x8213800C;
		  /* 8213800Ch */ case   23:  		/* bl -7260 */
		/* 8213800Ch case   23:*/		regs.LR = 0x82138010; return 0x821363B0;
		/* 8213800Ch case   23:*/		return 0x82138010;
		  /* 82138010h */ case   24:  		/* lwz R11, <#[R1 + 112]> */
		/* 82138010h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 82138010h case   24:*/		return 0x82138014;
		  /* 82138014h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 82138014h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82138014h case   25:*/		return 0x82138018;
		  /* 82138018h */ case   26:  		/* bc 12, CR6_EQ, 16 */
		/* 82138018h case   26:*/		if ( regs.CR[6].eq ) { return 0x82138028;  }
		/* 82138018h case   26:*/		return 0x8213801C;
		  /* 8213801Ch */ case   27:  		/* li R19, 4 */
		/* 8213801Ch case   27:*/		cpu::op::li<0>(regs,&regs.R19,0x4);
		/* 8213801Ch case   27:*/		return 0x82138020;
		  /* 82138020h */ case   28:  		/* stw R19, <#[R1 + 108]> */
		/* 82138020h case   28:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138020h case   28:*/		return 0x82138024;
		  /* 82138024h */ case   29:  		/* b 8 */
		/* 82138024h case   29:*/		return 0x8213802C;
		/* 82138024h case   29:*/		return 0x82138028;
	}
	return 0x82138028;
} // Block from 82137FB0h-82138028h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82138028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138028);
		  /* 82138028h */ case    0:  		/* lwz R19, <#[R1 + 108]> */
		/* 82138028h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138028h case    0:*/		return 0x8213802C;
	}
	return 0x8213802C;
} // Block from 82138028h-8213802Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213802Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213802C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213802C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213802C);
		  /* 8213802Ch */ case    0:  		/* cmplwi CR6, R19, 4 */
		/* 8213802Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000004);
		/* 8213802Ch case    0:*/		return 0x82138030;
		  /* 82138030h */ case    1:  		/* bc 4, CR6_LT, 16 */
		/* 82138030h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82138040;  }
		/* 82138030h case    1:*/		return 0x82138034;
		  /* 82138034h */ case    2:  		/* li R19, 3 */
		/* 82138034h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0x3);
		/* 82138034h case    2:*/		return 0x82138038;
		  /* 82138038h */ case    3:  		/* stw R19, <#[R1 + 108]> */
		/* 82138038h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138038h case    3:*/		return 0x8213803C;
		  /* 8213803Ch */ case    4:  		/* cmplwi CR6, R19, 4 */
		/* 8213803Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000004);
		/* 8213803Ch case    4:*/		return 0x82138040;
	}
	return 0x82138040;
} // Block from 8213802Ch-82138040h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82138040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138040);
		  /* 82138040h */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 82138040h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8213804C;  }
		/* 82138040h case    0:*/		return 0x82138044;
		  /* 82138044h */ case    1:  		/* li R19, 4 */
		/* 82138044h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x4);
		/* 82138044h case    1:*/		return 0x82138048;
		  /* 82138048h */ case    2:  		/* stw R19, <#[R1 + 108]> */
		/* 82138048h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138048h case    2:*/		return 0x8213804C;
	}
	return 0x8213804C;
} // Block from 82138040h-8213804Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213804Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213804C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213804C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213804C);
		  /* 8213804Ch */ case    0:  		/* li R3, 116 */
		/* 8213804Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213804Ch case    0:*/		return 0x82138050;
		  /* 82138050h */ case    1:  		/* bl -244408 */
		/* 82138050h case    1:*/		regs.LR = 0x82138054; return 0x820FC598;
		/* 82138050h case    1:*/		return 0x82138054;
		  /* 82138054h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82138054h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82138054h case    2:*/		return 0x82138058;
		  /* 82138058h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82138058h case    3:*/		if ( regs.CR[0].eq ) { return 0x82138068;  }
		/* 82138058h case    3:*/		return 0x8213805C;
		  /* 8213805Ch */ case    4:  		/* bl -246204 */
		/* 8213805Ch case    4:*/		regs.LR = 0x82138060; return 0x820FBEA0;
		/* 8213805Ch case    4:*/		return 0x82138060;
		  /* 82138060h */ case    5:  		/* mr R27, R3 */
		/* 82138060h case    5:*/		regs.R27 = regs.R3;
		/* 82138060h case    5:*/		return 0x82138064;
		  /* 82138064h */ case    6:  		/* b 8 */
		/* 82138064h case    6:*/		return 0x8213806C;
		/* 82138064h case    6:*/		return 0x82138068;
	}
	return 0x82138068;
} // Block from 8213804Ch-82138068h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82138068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138068);
		  /* 82138068h */ case    0:  		/* mr R27, R20 */
		/* 82138068h case    0:*/		regs.R27 = regs.R20;
		/* 82138068h case    0:*/		return 0x8213806C;
	}
	return 0x8213806C;
} // Block from 82138068h-8213806Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213806Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213806C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213806C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213806C);
		  /* 8213806Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8213806Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8213806Ch case    0:*/		return 0x82138070;
		  /* 82138070h */ case    1:  		/* bc 12, CR6_EQ, 1668 */
		/* 82138070h case    1:*/		if ( regs.CR[6].eq ) { return 0x821386F4;  }
		/* 82138070h case    1:*/		return 0x82138074;
		  /* 82138074h */ case    2:  		/* lwz R11, <#[R31 + 564]> */
		/* 82138074h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82138074h case    2:*/		return 0x82138078;
		  /* 82138078h */ case    3:  		/* li R7, 0 */
		/* 82138078h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82138078h case    3:*/		return 0x8213807C;
		  /* 8213807Ch */ case    4:  		/* mr R6, R19 */
		/* 8213807Ch case    4:*/		regs.R6 = regs.R19;
		/* 8213807Ch case    4:*/		return 0x82138080;
		  /* 82138080h */ case    5:  		/* mr R3, R27 */
		/* 82138080h case    5:*/		regs.R3 = regs.R27;
		/* 82138080h case    5:*/		return 0x82138084;
		  /* 82138084h */ case    6:  		/* lwzx R11, <#[R11 + R15]> */
		/* 82138084h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82138084h case    6:*/		return 0x82138088;
		  /* 82138088h */ case    7:  		/* lwz R5, <#[R11 + 4]> */
		/* 82138088h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82138088h case    7:*/		return 0x8213808C;
		  /* 8213808Ch */ case    8:  		/* lwz R4, <#[R11]> */
		/* 8213808Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8213808Ch case    8:*/		return 0x82138090;
		  /* 82138090h */ case    9:  		/* bl -244320 */
		/* 82138090h case    9:*/		regs.LR = 0x82138094; return 0x820FC630;
		/* 82138090h case    9:*/		return 0x82138094;
		  /* 82138094h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82138094h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82138094h case   10:*/		return 0x82138098;
		  /* 82138098h */ case   11:  		/* bc 12, CR0_LT, 1508 */
		/* 82138098h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213867C;  }
		/* 82138098h case   11:*/		return 0x8213809C;
		  /* 8213809Ch */ case   12:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213809Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213809Ch case   12:*/		return 0x821380A0;
		  /* 821380A0h */ case   13:  		/* mr R3, R27 */
		/* 821380A0h case   13:*/		regs.R3 = regs.R27;
		/* 821380A0h case   13:*/		return 0x821380A4;
		  /* 821380A4h */ case   14:  		/* lwzx R4, <#[R11 + R15]> */
		/* 821380A4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821380A4h case   14:*/		return 0x821380A8;
		  /* 821380A8h */ case   15:  		/* bl -246200 */
		/* 821380A8h case   15:*/		regs.LR = 0x821380AC; return 0x820FBEF0;
		/* 821380A8h case   15:*/		return 0x821380AC;
		  /* 821380ACh */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 821380ACh case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821380ACh case   16:*/		return 0x821380B0;
		  /* 821380B0h */ case   17:  		/* bc 12, CR0_LT, 1484 */
		/* 821380B0h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213867C;  }
		/* 821380B0h case   17:*/		return 0x821380B4;
		  /* 821380B4h */ case   18:  		/* lwz R11, <#[R31 + 564]> */
		/* 821380B4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821380B4h case   18:*/		return 0x821380B8;
		  /* 821380B8h */ case   19:  		/* lwz R10, <#[R27 + 4]> */
		/* 821380B8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821380B8h case   19:*/		return 0x821380BC;
		  /* 821380BCh */ case   20:  		/* lwz R3, <#[R27 + 8]> */
		/* 821380BCh case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000008) );
		/* 821380BCh case   20:*/		return 0x821380C0;
		  /* 821380C0h */ case   21:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 821380C0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 821380C0h case   21:*/		return 0x821380C4;
		  /* 821380C4h */ case   22:  		/* lwzx R11, <#[R11 + R15]> */
		/* 821380C4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821380C4h case   22:*/		return 0x821380C8;
		  /* 821380C8h */ case   23:  		/* lwz R4, <#[R11 + 8]> */
		/* 821380C8h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821380C8h case   23:*/		return 0x821380CC;
		  /* 821380CCh */ case   24:  		/* bl -681756 */
		/* 821380CCh case   24:*/		regs.LR = 0x821380D0; return 0x820919B0;
		/* 821380CCh case   24:*/		return 0x821380D0;
		  /* 821380D0h */ case   25:  		/* lwz R11, <#[R31 + 564]> */
		/* 821380D0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821380D0h case   25:*/		return 0x821380D4;
		  /* 821380D4h */ case   26:  		/* addi R3, R1, 160 */
		/* 821380D4h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 821380D4h case   26:*/		return 0x821380D8;
		  /* 821380D8h */ case   27:  		/* lwzx R11, <#[R11 + R15]> */
		/* 821380D8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821380D8h case   27:*/		return 0x821380DC;
		  /* 821380DCh */ case   28:  		/* lwz R21, <#[R11 + 12]> */
		/* 821380DCh case   28:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + 0x0000000C) );
		/* 821380DCh case   28:*/		return 0x821380E0;
		  /* 821380E0h */ case   29:  		/* lwz R4, <#[R11 + 16]> */
		/* 821380E0h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821380E0h case   29:*/		return 0x821380E4;
		  /* 821380E4h */ case   30:  		/* rlwinm R5, R21, 2, 0, 29 */
		/* 821380E4h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R21);
		/* 821380E4h case   30:*/		return 0x821380E8;
		  /* 821380E8h */ case   31:  		/* bl -681784 */
		/* 821380E8h case   31:*/		regs.LR = 0x821380EC; return 0x820919B0;
		/* 821380E8h case   31:*/		return 0x821380EC;
		  /* 821380ECh */ case   32:  		/* lwz R11, <#[R31 + 564]> */
		/* 821380ECh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821380ECh case   32:*/		return 0x821380F0;
		  /* 821380F0h */ case   33:  		/* mr R4, R27 */
		/* 821380F0h case   33:*/		regs.R4 = regs.R27;
		/* 821380F0h case   33:*/		return 0x821380F4;
		  /* 821380F4h */ case   34:  		/* mr R3, R31 */
		/* 821380F4h case   34:*/		regs.R3 = regs.R31;
		/* 821380F4h case   34:*/		return 0x821380F8;
		  /* 821380F8h */ case   35:  		/* stwx R27, <#[R11 + R15]> */
		/* 821380F8h case   35:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821380F8h case   35:*/		return 0x821380FC;
		  /* 821380FCh */ case   36:  		/* bl -241732 */
		/* 821380FCh case   36:*/		regs.LR = 0x82138100; return 0x820FD0B8;
		/* 821380FCh case   36:*/		return 0x82138100;
		  /* 82138100h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 82138100h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82138100h case   37:*/		return 0x82138104;
		  /* 82138104h */ case   38:  		/* bc 12, CR0_LT, 1400 */
		/* 82138104h case   38:*/		if ( regs.CR[0].lt ) { return 0x8213867C;  }
		/* 82138104h case   38:*/		return 0x82138108;
		  /* 82138108h */ case   39:  		/* li R26, 0 */
		/* 82138108h case   39:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82138108h case   39:*/		return 0x8213810C;
		  /* 8213810Ch */ case   40:  		/* li R20, 0 */
		/* 8213810Ch case   40:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8213810Ch case   40:*/		return 0x82138110;
		  /* 82138110h */ case   41:  		/* cmplwi CR6, R21, 0 */
		/* 82138110h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82138110h case   41:*/		return 0x82138114;
		  /* 82138114h */ case   42:  		/* bc 12, CR6_EQ, 588 */
		/* 82138114h case   42:*/		if ( regs.CR[6].eq ) { return 0x82138360;  }
		/* 82138114h case   42:*/		return 0x82138118;
		  /* 82138118h */ case   43:  		/* addi R22, R1, 160 */
		/* 82138118h case   43:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R1,0xA0);
		/* 82138118h case   43:*/		return 0x8213811C;
		  /* 8213811Ch */ case   44:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213811Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213811Ch case   44:*/		return 0x82138120;
		  /* 82138120h */ case   45:  		/* li R25, 0 */
		/* 82138120h case   45:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82138120h case   45:*/		return 0x82138124;
		  /* 82138124h */ case   46:  		/* lwz R23, <#[R22]> */
		/* 82138124h case   46:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R22 + 0x00000000) );
		/* 82138124h case   46:*/		return 0x82138128;
		  /* 82138128h */ case   47:  		/* cmplwi CR6, R11, 0 */
		/* 82138128h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82138128h case   47:*/		return 0x8213812C;
		  /* 8213812Ch */ case   48:  		/* bc 4, CR6_GT, 548 */
		/* 8213812Ch case   48:*/		if ( !regs.CR[6].gt ) { return 0x82138350;  }
		/* 8213812Ch case   48:*/		return 0x82138130;
		  /* 82138130h */ case   49:  		/* li R24, 0 */
		/* 82138130h case   49:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82138130h case   49:*/		return 0x82138134;
		  /* 82138134h */ case   50:  		/* lwz R11, <#[R31 + 20]> */
		/* 82138134h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82138134h case   50:*/		return 0x82138138;
		  /* 82138138h */ case   51:  		/* cmplw CR6, R25, R23 */
		/* 82138138h case   51:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R23);
		/* 82138138h case   51:*/		return 0x8213813C;
		  /* 8213813Ch */ case   52:  		/* lwzx R28, <#[R24 + R11]> */
		/* 8213813Ch case   52:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + regs.R11 + 0x00000000) );
		/* 8213813Ch case   52:*/		return 0x82138140;
		  /* 82138140h */ case   53:  		/* bc 12, CR6_EQ, 16 */
		/* 82138140h case   53:*/		if ( regs.CR[6].eq ) { return 0x82138150;  }
		/* 82138140h case   53:*/		return 0x82138144;
		  /* 82138144h */ case   54:  		/* lwz R11, <#[R28 + 56]> */
		/* 82138144h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000038) );
		/* 82138144h case   54:*/		return 0x82138148;
		  /* 82138148h */ case   55:  		/* cmplw CR6, R11, R23 */
		/* 82138148h case   55:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 82138148h case   55:*/		return 0x8213814C;
		  /* 8213814Ch */ case   56:  		/* bc 4, CR6_EQ, 496 */
		/* 8213814Ch case   56:*/		if ( !regs.CR[6].eq ) { return 0x8213833C;  }
		/* 8213814Ch case   56:*/		return 0x82138150;
	}
	return 0x82138150;
} // Block from 8213806Ch-82138150h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82138150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138150);
		  /* 82138150h */ case    0:  		/* li R29, 0 */
		/* 82138150h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82138150h case    0:*/		return 0x82138154;
		  /* 82138154h */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 82138154h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82138154h case    1:*/		return 0x82138158;
		  /* 82138158h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 82138158h case    2:*/		if ( regs.CR[6].eq ) { return 0x821381D4;  }
		/* 82138158h case    2:*/		return 0x8213815C;
		  /* 8213815Ch */ case    3:  		/* li R30, 0 */
		/* 8213815Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213815Ch case    3:*/		return 0x82138160;
		  /* 82138160h */ case    4:  		/* mr R6, R29 */
		/* 82138160h case    4:*/		regs.R6 = regs.R29;
		/* 82138160h case    4:*/		return 0x82138164;
		  /* 82138164h */ case    5:  		/* lwz R4, <#[R31 + 136]> */
		/* 82138164h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 82138164h case    5:*/		return 0x82138168;
		  /* 82138168h */ case    6:  		/* mr R5, R18 */
		/* 82138168h case    6:*/		regs.R5 = regs.R18;
		/* 82138168h case    6:*/		return 0x8213816C;
		  /* 8213816Ch */ case    7:  		/* fmr FR1, FR31 */
		/* 8213816Ch case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213816Ch case    7:*/		return 0x82138170;
		  /* 82138170h */ case    8:  		/* mr R3, R31 */
		/* 82138170h case    8:*/		regs.R3 = regs.R31;
		/* 82138170h case    8:*/		return 0x82138174;
		  /* 82138174h */ case    9:  		/* bl -241484 */
		/* 82138174h case    9:*/		regs.LR = 0x82138178; return 0x820FD228;
		/* 82138174h case    9:*/		return 0x82138178;
		  /* 82138178h */ case   10:  		/* lwz R11, <#[R27 + 16]> */
		/* 82138178h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82138178h case   10:*/		return 0x8213817C;
		  /* 8213817Ch */ case   11:  		/* stwx R3, <#[R30 + R11]> */
		/* 8213817Ch case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213817Ch case   11:*/		return 0x82138180;
		  /* 82138180h */ case   12:  		/* lwz R11, <#[R27 + 16]> */
		/* 82138180h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82138180h case   12:*/		return 0x82138184;
		  /* 82138184h */ case   13:  		/* lwzx R11, <#[R30 + R11]> */
		/* 82138184h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82138184h case   13:*/		return 0x82138188;
		  /* 82138188h */ case   14:  		/* cmpwi CR6, R11, -1 */
		/* 82138188h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82138188h case   14:*/		return 0x8213818C;
		  /* 8213818Ch */ case   15:  		/* bc 12, CR6_EQ, 1384 */
		/* 8213818Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821386F4;  }
		/* 8213818Ch case   15:*/		return 0x82138190;
		  /* 82138190h */ case   16:  		/* lwz R11, <#[R27 + 16]> */
		/* 82138190h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82138190h case   16:*/		return 0x82138194;
		  /* 82138194h */ case   17:  		/* addi R29, R29, 1 */
		/* 82138194h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82138194h case   17:*/		return 0x82138198;
		  /* 82138198h */ case   18:  		/* lwz R10, <#[R31 + 20]> */
		/* 82138198h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82138198h case   18:*/		return 0x8213819C;
		  /* 8213819Ch */ case   19:  		/* lwz R9, <#[R28 + 72]> */
		/* 8213819Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000048) );
		/* 8213819Ch case   19:*/		return 0x821381A0;
		  /* 821381A0h */ case   20:  		/* cmplw CR6, R29, R19 */
		/* 821381A0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R19);
		/* 821381A0h case   20:*/		return 0x821381A4;
		  /* 821381A4h */ case   21:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821381A4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821381A4h case   21:*/		return 0x821381A8;
		  /* 821381A8h */ case   22:  		/* addi R30, R30, 4 */
		/* 821381A8h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821381A8h case   22:*/		return 0x821381AC;
		  /* 821381ACh */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821381ACh case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821381ACh case   23:*/		return 0x821381B0;
		  /* 821381B0h */ case   24:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821381B0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821381B0h case   24:*/		return 0x821381B4;
		  /* 821381B4h */ case   25:  		/* stw R9, <#[R11 + 72]> */
		/* 821381B4h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000048) );
		/* 821381B4h case   25:*/		return 0x821381B8;
		  /* 821381B8h */ case   26:  		/* lwz R10, <#[R28 + 84]> */
		/* 821381B8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000054) );
		/* 821381B8h case   26:*/		return 0x821381BC;
		  /* 821381BCh */ case   27:  		/* stw R10, <#[R11 + 84]> */
		/* 821381BCh case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 821381BCh case   27:*/		return 0x821381C0;
		  /* 821381C0h */ case   28:  		/* lwz R10, <#[R28 + 88]> */
		/* 821381C0h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000058) );
		/* 821381C0h case   28:*/		return 0x821381C4;
		  /* 821381C4h */ case   29:  		/* stw R10, <#[R11 + 88]> */
		/* 821381C4h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000058) );
		/* 821381C4h case   29:*/		return 0x821381C8;
		  /* 821381C8h */ case   30:  		/* lwz R10, <#[R28 + 60]> */
		/* 821381C8h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000003C) );
		/* 821381C8h case   30:*/		return 0x821381CC;
		  /* 821381CCh */ case   31:  		/* stw R10, <#[R11 + 60]> */
		/* 821381CCh case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821381CCh case   31:*/		return 0x821381D0;
		  /* 821381D0h */ case   32:  		/* bc 12, CR6_LT, -112 */
		/* 821381D0h case   32:*/		if ( regs.CR[6].lt ) { return 0x82138160;  }
		/* 821381D0h case   32:*/		return 0x821381D4;
	}
	return 0x821381D4;
} // Block from 82138150h-821381D4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821381D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821381D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821381D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821381D4);
		  /* 821381D4h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 821381D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 821381D4h case    0:*/		return 0x821381D8;
		  /* 821381D8h */ case    1:  		/* mr R6, R17 */
		/* 821381D8h case    1:*/		regs.R6 = regs.R17;
		/* 821381D8h case    1:*/		return 0x821381DC;
		  /* 821381DCh */ case    2:  		/* cmplw CR6, R17, R11 */
		/* 821381DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 821381DCh case    2:*/		return 0x821381E0;
		  /* 821381E0h */ case    3:  		/* bc 4, CR6_LT, 344 */
		/* 821381E0h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82138338;  }
		/* 821381E0h case    3:*/		return 0x821381E4;
		  /* 821381E4h */ case    4:  		/* rlwinm R29, R17, 2, 0, 29 */
		/* 821381E4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R17);
		/* 821381E4h case    4:*/		return 0x821381E8;
		  /* 821381E8h */ case    5:  		/* lwz R11, <#[R31 + 564]> */
		/* 821381E8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821381E8h case    5:*/		return 0x821381EC;
		  /* 821381ECh */ case    6:  		/* lwzx R4, <#[R29 + R11]> */
		/* 821381ECh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 821381ECh case    6:*/		return 0x821381F0;
		  /* 821381F0h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 821381F0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821381F0h case    7:*/		return 0x821381F4;
		  /* 821381F4h */ case    8:  		/* bc 12, CR6_EQ, 304 */
		/* 821381F4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82138324;  }
		/* 821381F4h case    8:*/		return 0x821381F8;
		  /* 821381F8h */ case    9:  		/* lwz R11, <#[R4]> */
		/* 821381F8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821381F8h case    9:*/		return 0x821381FC;
		  /* 821381FCh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821381FCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821381FCh case   10:*/		return 0x82138200;
		  /* 82138200h */ case   11:  		/* bc 12, CR6_EQ, 292 */
		/* 82138200h case   11:*/		if ( regs.CR[6].eq ) { return 0x82138324;  }
		/* 82138200h case   11:*/		return 0x82138204;
		  /* 82138204h */ case   12:  		/* lwz R10, <#[R4 + 4]> */
		/* 82138204h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82138204h case   12:*/		return 0x82138208;
		  /* 82138208h */ case   13:  		/* rlwinm R5, R11, 0, 12, 31 */
		/* 82138208h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R5,regs.R11);
		/* 82138208h case   13:*/		return 0x8213820C;
		  /* 8213820Ch */ case   14:  		/* divwu. R11, R10, R5 */
		/* 8213820Ch case   14:*/		cpu::op::divwu<1>(regs,&regs.R11,regs.R10,regs.R5);
		/* 8213820Ch case   14:*/		return 0x82138210;
		  /* 82138210h */ case   15:  		/* twi 6, R5, 0 */
		/* 82138210h case   15:*/		cpu::op::tw<6>(regs, 0x82138210, regs.R5, 0x00000000);
		/* 82138210h case   15:*/		return 0x82138214;
		  /* 82138214h */ case   16:  		/* bc 12, CR0_EQ, 272 */
		/* 82138214h case   16:*/		if ( regs.CR[0].eq ) { return 0x82138324;  }
		/* 82138214h case   16:*/		return 0x82138218;
		  /* 82138218h */ case   17:  		/* li R7, 0 */
		/* 82138218h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82138218h case   17:*/		return 0x8213821C;
		  /* 8213821Ch */ case   18:  		/* li R3, 0 */
		/* 8213821Ch case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213821Ch case   18:*/		return 0x82138220;
		  /* 82138220h */ case   19:  		/* mr R30, R11 */
		/* 82138220h case   19:*/		regs.R30 = regs.R11;
		/* 82138220h case   19:*/		return 0x82138224;
		  /* 82138224h */ case   20:  		/* cmplwi CR6, R5, 3 */
		/* 82138224h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 82138224h case   20:*/		return 0x82138228;
		  /* 82138228h */ case   21:  		/* bc 12, CR6_LT, 88 */
		/* 82138228h case   21:*/		if ( regs.CR[6].lt ) { return 0x82138280;  }
		/* 82138228h case   21:*/		return 0x8213822C;
		  /* 8213822Ch */ case   22:  		/* li R8, 0 */
		/* 8213822Ch case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8213822Ch case   22:*/		return 0x82138230;
		  /* 82138230h */ case   23:  		/* cmplwi CR6, R5, 0 */
		/* 82138230h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82138230h case   23:*/		return 0x82138234;
		  /* 82138234h */ case   24:  		/* bc 12, CR6_EQ, 224 */
		/* 82138234h case   24:*/		if ( regs.CR[6].eq ) { return 0x82138314;  }
		/* 82138234h case   24:*/		return 0x82138238;
		  /* 82138238h */ case   25:  		/* mtspr CTR, R5 */
		/* 82138238h case   25:*/		regs.CTR = regs.R5;
		/* 82138238h case   25:*/		return 0x8213823C;
		  /* 8213823Ch */ case   26:  		/* li R9, 0 */
		/* 8213823Ch case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8213823Ch case   26:*/		return 0x82138240;
		  /* 82138240h */ case   27:  		/* add R10, R7, R8 */
		/* 82138240h case   27:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R8);
		/* 82138240h case   27:*/		return 0x82138244;
		  /* 82138244h */ case   28:  		/* lwz R11, <#[R4 + 8]> */
		/* 82138244h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82138244h case   28:*/		return 0x82138248;
		  /* 82138248h */ case   29:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82138248h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82138248h case   29:*/		return 0x8213824C;
		  /* 8213824Ch */ case   30:  		/* lwzx R28, <#[R10 + R11]> */
		/* 8213824Ch case   30:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213824Ch case   30:*/		return 0x82138250;
		  /* 82138250h */ case   31:  		/* cmplw CR6, R28, R25 */
		/* 82138250h case   31:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 82138250h case   31:*/		return 0x82138254;
		  /* 82138254h */ case   32:  		/* bc 4, CR6_EQ, 28 */
		/* 82138254h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82138270;  }
		/* 82138254h case   32:*/		return 0x82138258;
		  /* 82138258h */ case   33:  		/* lwz R28, <#[R27 + 16]> */
		/* 82138258h case   33:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000010) );
		/* 82138258h case   33:*/		return 0x8213825C;
		  /* 8213825Ch */ case   34:  		/* cmplw CR6, R6, R26 */
		/* 8213825Ch case   34:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R26);
		/* 8213825Ch case   34:*/		return 0x82138260;
		  /* 82138260h */ case   35:  		/* lwzx R28, <#[R28 + R9]> */
		/* 82138260h case   35:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R9 + 0x00000000) );
		/* 82138260h case   35:*/		return 0x82138264;
		  /* 82138264h */ case   36:  		/* stwx R28, <#[R10 + R11]> */
		/* 82138264h case   36:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138264h case   36:*/		return 0x82138268;
		  /* 82138268h */ case   37:  		/* bc 4, CR6_GT, 8 */
		/* 82138268h case   37:*/		if ( !regs.CR[6].gt ) { return 0x82138270;  }
		/* 82138268h case   37:*/		return 0x8213826C;
		  /* 8213826Ch */ case   38:  		/* mr R26, R6 */
		/* 8213826Ch case   38:*/		regs.R26 = regs.R6;
		/* 8213826Ch case   38:*/		return 0x82138270;
	}
	return 0x82138270;
} // Block from 821381D4h-82138270h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82138270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138270);
		  /* 82138270h */ case    0:  		/* addi R8, R8, 1 */
		/* 82138270h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82138270h case    0:*/		return 0x82138274;
		  /* 82138274h */ case    1:  		/* addi R9, R9, 4 */
		/* 82138274h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82138274h case    1:*/		return 0x82138278;
		  /* 82138278h */ case    2:  		/* bc 16, CR0_LT, -56 */
		/* 82138278h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82138240;  }
		/* 82138278h case    2:*/		return 0x8213827C;
		  /* 8213827Ch */ case    3:  		/* b 152 */
		/* 8213827Ch case    3:*/		return 0x82138314;
		/* 8213827Ch case    3:*/		return 0x82138280;
	}
	return 0x82138280;
} // Block from 82138270h-82138280h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138280);
		  /* 82138280h */ case    0:  		/* cmplwi CR6, R5, 1 */
		/* 82138280h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 82138280h case    0:*/		return 0x82138284;
		  /* 82138284h */ case    1:  		/* bc 4, CR6_EQ, 64 */
		/* 82138284h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821382C4;  }
		/* 82138284h case    1:*/		return 0x82138288;
		  /* 82138288h */ case    2:  		/* lwz R11, <#[R4 + 8]> */
		/* 82138288h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82138288h case    2:*/		return 0x8213828C;
		  /* 8213828Ch */ case    3:  		/* lwzx R10, <#[R11 + R3]> */
		/* 8213828Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8213828Ch case    3:*/		return 0x82138290;
		  /* 82138290h */ case    4:  		/* cmplw CR6, R10, R25 */
		/* 82138290h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 82138290h case    4:*/		return 0x82138294;
		  /* 82138294h */ case    5:  		/* bc 4, CR6_EQ, 128 */
		/* 82138294h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82138314;  }
		/* 82138294h case    5:*/		return 0x82138298;
		  /* 82138298h */ case    6:  		/* lwz R10, <#[R27 + 16]> */
		/* 82138298h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 82138298h case    6:*/		return 0x8213829C;
		  /* 8213829Ch */ case    7:  		/* cmplwi CR6, R19, 4 */
		/* 8213829Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000004);
		/* 8213829Ch case    7:*/		return 0x821382A0;
		  /* 821382A0h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821382A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821382AC;  }
		/* 821382A0h case    8:*/		return 0x821382A4;
		  /* 821382A4h */ case    9:  		/* lwz R10, <#[R10 + 12]> */
		/* 821382A4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821382A4h case    9:*/		return 0x821382A8;
		  /* 821382A8h */ case   10:  		/* b 8 */
		/* 821382A8h case   10:*/		return 0x821382B0;
		/* 821382A8h case   10:*/		return 0x821382AC;
	}
	return 0x821382AC;
} // Block from 82138280h-821382ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821382ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821382AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821382AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821382AC);
		  /* 821382ACh */ case    0:  		/* lwz R10, <#[R10]> */
		/* 821382ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821382ACh case    0:*/		return 0x821382B0;
	}
	return 0x821382B0;
} // Block from 821382ACh-821382B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821382B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821382B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821382B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821382B0);
		  /* 821382B0h */ case    0:  		/* stwx R10, <#[R11 + R3]> */
		/* 821382B0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821382B0h case    0:*/		return 0x821382B4;
		  /* 821382B4h */ case    1:  		/* cmplw CR6, R6, R26 */
		/* 821382B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R26);
		/* 821382B4h case    1:*/		return 0x821382B8;
		  /* 821382B8h */ case    2:  		/* bc 4, CR6_GT, 92 */
		/* 821382B8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82138314;  }
		/* 821382B8h case    2:*/		return 0x821382BC;
		  /* 821382BCh */ case    3:  		/* mr R26, R6 */
		/* 821382BCh case    3:*/		regs.R26 = regs.R6;
		/* 821382BCh case    3:*/		return 0x821382C0;
		  /* 821382C0h */ case    4:  		/* b 84 */
		/* 821382C0h case    4:*/		return 0x82138314;
		/* 821382C0h case    4:*/		return 0x821382C4;
	}
	return 0x821382C4;
} // Block from 821382B0h-821382C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821382C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821382C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821382C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821382C4);
		  /* 821382C4h */ case    0:  		/* li R8, 0 */
		/* 821382C4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821382C4h case    0:*/		return 0x821382C8;
		  /* 821382C8h */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 821382C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821382C8h case    1:*/		return 0x821382CC;
		  /* 821382CCh */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821382CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82138314;  }
		/* 821382CCh case    2:*/		return 0x821382D0;
		  /* 821382D0h */ case    3:  		/* mtspr CTR, R5 */
		/* 821382D0h case    3:*/		regs.CTR = regs.R5;
		/* 821382D0h case    3:*/		return 0x821382D4;
		  /* 821382D4h */ case    4:  		/* li R9, 0 */
		/* 821382D4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821382D4h case    4:*/		return 0x821382D8;
		  /* 821382D8h */ case    5:  		/* add R10, R7, R8 */
		/* 821382D8h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R8);
		/* 821382D8h case    5:*/		return 0x821382DC;
		  /* 821382DCh */ case    6:  		/* lwz R11, <#[R4 + 8]> */
		/* 821382DCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821382DCh case    6:*/		return 0x821382E0;
		  /* 821382E0h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821382E0h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821382E0h case    7:*/		return 0x821382E4;
		  /* 821382E4h */ case    8:  		/* lwzx R28, <#[R10 + R11]> */
		/* 821382E4h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821382E4h case    8:*/		return 0x821382E8;
		  /* 821382E8h */ case    9:  		/* cmplw CR6, R28, R25 */
		/* 821382E8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 821382E8h case    9:*/		return 0x821382EC;
		  /* 821382ECh */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 821382ECh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82138308;  }
		/* 821382ECh case   10:*/		return 0x821382F0;
		  /* 821382F0h */ case   11:  		/* lwz R28, <#[R27 + 16]> */
		/* 821382F0h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000010) );
		/* 821382F0h case   11:*/		return 0x821382F4;
		  /* 821382F4h */ case   12:  		/* cmplw CR6, R6, R26 */
		/* 821382F4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R26);
		/* 821382F4h case   12:*/		return 0x821382F8;
		  /* 821382F8h */ case   13:  		/* lwzx R28, <#[R28 + R9]> */
		/* 821382F8h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R9 + 0x00000000) );
		/* 821382F8h case   13:*/		return 0x821382FC;
		  /* 821382FCh */ case   14:  		/* stwx R28, <#[R10 + R11]> */
		/* 821382FCh case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821382FCh case   14:*/		return 0x82138300;
		  /* 82138300h */ case   15:  		/* bc 4, CR6_GT, 8 */
		/* 82138300h case   15:*/		if ( !regs.CR[6].gt ) { return 0x82138308;  }
		/* 82138300h case   15:*/		return 0x82138304;
		  /* 82138304h */ case   16:  		/* mr R26, R6 */
		/* 82138304h case   16:*/		regs.R26 = regs.R6;
		/* 82138304h case   16:*/		return 0x82138308;
	}
	return 0x82138308;
} // Block from 821382C4h-82138308h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82138308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138308);
		  /* 82138308h */ case    0:  		/* addi R8, R8, 1 */
		/* 82138308h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82138308h case    0:*/		return 0x8213830C;
		  /* 8213830Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 8213830Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8213830Ch case    1:*/		return 0x82138310;
		  /* 82138310h */ case    2:  		/* bc 16, CR0_LT, -56 */
		/* 82138310h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821382D8;  }
		/* 82138310h case    2:*/		return 0x82138314;
	}
	return 0x82138314;
} // Block from 82138308h-82138314h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138314);
		  /* 82138314h */ case    0:  		/* addic. R30, R30, -1 */
		/* 82138314h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82138314h case    0:*/		return 0x82138318;
		  /* 82138318h */ case    1:  		/* addi R3, R3, 4 */
		/* 82138318h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82138318h case    1:*/		return 0x8213831C;
		  /* 8213831Ch */ case    2:  		/* add R7, R7, R5 */
		/* 8213831Ch case    2:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8213831Ch case    2:*/		return 0x82138320;
		  /* 82138320h */ case    3:  		/* bc 4, CR0_EQ, -252 */
		/* 82138320h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82138224;  }
		/* 82138320h case    3:*/		return 0x82138324;
	}
	return 0x82138324;
} // Block from 82138314h-82138324h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138324);
		  /* 82138324h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 82138324h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 82138324h case    0:*/		return 0x82138328;
		  /* 82138328h */ case    1:  		/* addi R6, R6, 1 */
		/* 82138328h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82138328h case    1:*/		return 0x8213832C;
		  /* 8213832Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 8213832Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213832Ch case    2:*/		return 0x82138330;
		  /* 82138330h */ case    3:  		/* cmplw CR6, R6, R11 */
		/* 82138330h case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 82138330h case    3:*/		return 0x82138334;
		  /* 82138334h */ case    4:  		/* bc 12, CR6_LT, -332 */
		/* 82138334h case    4:*/		if ( regs.CR[6].lt ) { return 0x821381E8;  }
		/* 82138334h case    4:*/		return 0x82138338;
	}
	return 0x82138338;
} // Block from 82138324h-82138338h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82138338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138338);
		  /* 82138338h */ case    0:  		/* li R30, 1 */
		/* 82138338h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 82138338h case    0:*/		return 0x8213833C;
	}
	return 0x8213833C;
} // Block from 82138338h-8213833Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213833Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213833C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213833C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213833C);
		  /* 8213833Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213833Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213833Ch case    0:*/		return 0x82138340;
		  /* 82138340h */ case    1:  		/* addi R25, R25, 1 */
		/* 82138340h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82138340h case    1:*/		return 0x82138344;
		  /* 82138344h */ case    2:  		/* addi R24, R24, 4 */
		/* 82138344h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82138344h case    2:*/		return 0x82138348;
		  /* 82138348h */ case    3:  		/* cmplw CR6, R25, R11 */
		/* 82138348h case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82138348h case    3:*/		return 0x8213834C;
		  /* 8213834Ch */ case    4:  		/* bc 12, CR6_LT, -536 */
		/* 8213834Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82138134;  }
		/* 8213834Ch case    4:*/		return 0x82138350;
	}
	return 0x82138350;
} // Block from 8213833Ch-82138350h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82138350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138350);
		  /* 82138350h */ case    0:  		/* addi R20, R20, 1 */
		/* 82138350h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82138350h case    0:*/		return 0x82138354;
		  /* 82138354h */ case    1:  		/* addi R22, R22, 4 */
		/* 82138354h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 82138354h case    1:*/		return 0x82138358;
		  /* 82138358h */ case    2:  		/* cmplw CR6, R20, R21 */
		/* 82138358h case    2:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R21);
		/* 82138358h case    2:*/		return 0x8213835C;
		  /* 8213835Ch */ case    3:  		/* bc 12, CR6_LT, -576 */
		/* 8213835Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8213811C;  }
		/* 8213835Ch case    3:*/		return 0x82138360;
	}
	return 0x82138360;
} // Block from 82138350h-82138360h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138360);
		  /* 82138360h */ case    0:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 82138360h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 82138360h case    0:*/		return 0x82138364;
		  /* 82138364h */ case    1:  		/* addi R11, R1, 128 */
		/* 82138364h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82138364h case    1:*/		return 0x82138368;
		  /* 82138368h */ case    2:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82138368h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138368h case    2:*/		return 0x8213836C;
		  /* 8213836Ch */ case    3:  		/* cmplw CR6, R9, R26 */
		/* 8213836Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 8213836Ch case    3:*/		return 0x82138370;
		  /* 82138370h */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 82138370h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82138378;  }
		/* 82138370h case    4:*/		return 0x82138374;
		  /* 82138374h */ case    5:  		/* stwx R26, <#[R10 + R11]> */
		/* 82138374h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138374h case    5:*/		return 0x82138378;
	}
	return 0x82138378;
} // Block from 82138360h-82138378h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138378);
		  /* 82138378h */ case    0:  		/* rlwinm R11, R18, 4, 0, 27 */
		/* 82138378h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R18);
		/* 82138378h case    0:*/		return 0x8213837C;
		  /* 8213837Ch */ case    1:  		/* addi R10, R1, 192 */
		/* 8213837Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 8213837Ch case    1:*/		return 0x82138380;
		  /* 82138380h */ case    2:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82138380h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82138380h case    2:*/		return 0x82138384;
		  /* 82138384h */ case    3:  		/* cmplw CR6, R9, R26 */
		/* 82138384h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 82138384h case    3:*/		return 0x82138388;
		  /* 82138388h */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 82138388h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82138390;  }
		/* 82138388h case    4:*/		return 0x8213838C;
		  /* 8213838Ch */ case    5:  		/* stwx R26, <#[R11 + R10]> */
		/* 8213838Ch case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213838Ch case    5:*/		return 0x82138390;
	}
	return 0x82138390;
} // Block from 82138378h-82138390h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138390);
		  /* 82138390h */ case    0:  		/* addi R10, R1, 196 */
		/* 82138390h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC4);
		/* 82138390h case    0:*/		return 0x82138394;
		  /* 82138394h */ case    1:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82138394h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82138394h case    1:*/		return 0x82138398;
		  /* 82138398h */ case    2:  		/* cmplw CR6, R9, R26 */
		/* 82138398h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 82138398h case    2:*/		return 0x8213839C;
		  /* 8213839Ch */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 8213839Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x821383A4;  }
		/* 8213839Ch case    3:*/		return 0x821383A0;
		  /* 821383A0h */ case    4:  		/* stwx R26, <#[R11 + R10]> */
		/* 821383A0h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821383A0h case    4:*/		return 0x821383A4;
	}
	return 0x821383A4;
} // Block from 82138390h-821383A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821383A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821383A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821383A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821383A4);
		  /* 821383A4h */ case    0:  		/* addi R10, R1, 200 */
		/* 821383A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC8);
		/* 821383A4h case    0:*/		return 0x821383A8;
		  /* 821383A8h */ case    1:  		/* lwzx R9, <#[R11 + R10]> */
		/* 821383A8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821383A8h case    1:*/		return 0x821383AC;
		  /* 821383ACh */ case    2:  		/* cmplw CR6, R9, R26 */
		/* 821383ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821383ACh case    2:*/		return 0x821383B0;
		  /* 821383B0h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 821383B0h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821383B8;  }
		/* 821383B0h case    3:*/		return 0x821383B4;
		  /* 821383B4h */ case    4:  		/* stwx R26, <#[R11 + R10]> */
		/* 821383B4h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821383B4h case    4:*/		return 0x821383B8;
	}
	return 0x821383B8;
} // Block from 821383A4h-821383B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821383B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821383B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821383B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821383B8);
		  /* 821383B8h */ case    0:  		/* addi R10, R1, 204 */
		/* 821383B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xCC);
		/* 821383B8h case    0:*/		return 0x821383BC;
		  /* 821383BCh */ case    1:  		/* lwzx R9, <#[R11 + R10]> */
		/* 821383BCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821383BCh case    1:*/		return 0x821383C0;
		  /* 821383C0h */ case    2:  		/* cmplw CR6, R9, R26 */
		/* 821383C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821383C0h case    2:*/		return 0x821383C4;
		  /* 821383C4h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 821383C4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821383CC;  }
		/* 821383C4h case    3:*/		return 0x821383C8;
		  /* 821383C8h */ case    4:  		/* stwx R26, <#[R11 + R10]> */
		/* 821383C8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821383C8h case    4:*/		return 0x821383CC;
	}
	return 0x821383CC;
} // Block from 821383B8h-821383CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821383CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821383CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821383CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821383CC);
		  /* 821383CCh */ case    0:  		/* lwz R19, <#[R1 + 104]> */
		/* 821383CCh case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000068) );
		/* 821383CCh case    0:*/		return 0x821383D0;
		  /* 821383D0h */ case    1:  		/* cmpwi CR6, R30, 0 */
		/* 821383D0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821383D0h case    1:*/		return 0x821383D4;
		  /* 821383D4h */ case    2:  		/* li R20, 0 */
		/* 821383D4h case    2:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821383D4h case    2:*/		return 0x821383D8;
		  /* 821383D8h */ case    3:  		/* bc 4, CR6_EQ, 604 */
		/* 821383D8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82138634;  }
		/* 821383D8h case    3:*/		return 0x821383DC;
	}
	return 0x821383DC;
} // Block from 821383CCh-821383DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821383DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821383DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821383DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821383DC);
		  /* 821383DCh */ case    0:  		/* mr R28, R20 */
		/* 821383DCh case    0:*/		regs.R28 = regs.R20;
		/* 821383DCh case    0:*/		return 0x821383E0;
		  /* 821383E0h */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 821383E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821383E0h case    1:*/		return 0x821383E4;
		  /* 821383E4h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 821383E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821383F8;  }
		/* 821383E4h case    2:*/		return 0x821383E8;
		  /* 821383E8h */ case    3:  		/* lwz R11, <#[R31 + 564]> */
		/* 821383E8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821383E8h case    3:*/		return 0x821383EC;
		  /* 821383ECh */ case    4:  		/* lwzx R11, <#[R11 + R15]> */
		/* 821383ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821383ECh case    4:*/		return 0x821383F0;
		  /* 821383F0h */ case    5:  		/* stw R20, <#[R11]> */
		/* 821383F0h case    5:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 821383F0h case    5:*/		return 0x821383F4;
		  /* 821383F4h */ case    6:  		/* b 576 */
		/* 821383F4h case    6:*/		return 0x82138634;
		/* 821383F4h case    6:*/		return 0x821383F8;
	}
	return 0x821383F8;
} // Block from 821383DCh-821383F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821383F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821383F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821383F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821383F8);
		  /* 821383F8h */ case    0:  		/* rlwinm R27, R18, 2, 0, 29 */
		/* 821383F8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R18);
		/* 821383F8h case    0:*/		return 0x821383FC;
		  /* 821383FCh */ case    1:  		/* addi R30, R1, 480 */
		/* 821383FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x1E0);
		/* 821383FCh case    1:*/		return 0x82138400;
		  /* 82138400h */ case    2:  		/* mr R29, R16 */
		/* 82138400h case    2:*/		regs.R29 = regs.R16;
		/* 82138400h case    2:*/		return 0x82138404;
		  /* 82138404h */ case    3:  		/* lwz R7, <#[R30]> */
		/* 82138404h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82138404h case    3:*/		return 0x82138408;
		  /* 82138408h */ case    4:  		/* addi R9, R1, 100 */
		/* 82138408h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 82138408h case    4:*/		return 0x8213840C;
		  /* 8213840Ch */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213840Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213840Ch case    5:*/		return 0x82138410;
		  /* 82138410h */ case    6:  		/* mr R5, R17 */
		/* 82138410h case    6:*/		regs.R5 = regs.R17;
		/* 82138410h case    6:*/		return 0x82138414;
		  /* 82138414h */ case    7:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 82138414h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 82138414h case    7:*/		return 0x82138418;
		  /* 82138418h */ case    8:  		/* mr R3, R31 */
		/* 82138418h case    8:*/		regs.R3 = regs.R31;
		/* 82138418h case    8:*/		return 0x8213841C;
		  /* 8213841Ch */ case    9:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8213841Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213841Ch case    9:*/		return 0x82138420;
		  /* 82138420h */ case   10:  		/* stw R18, <#[R8 + 12]> */
		/* 82138420h case   10:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R8 + 0x0000000C) );
		/* 82138420h case   10:*/		return 0x82138424;
		  /* 82138424h */ case   11:  		/* lwz R4, <#[R31 + 564]> */
		/* 82138424h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82138424h case   11:*/		return 0x82138428;
		  /* 82138428h */ case   12:  		/* lwz R6, <#[R31 + 552]> */
		/* 82138428h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82138428h case   12:*/		return 0x8213842C;
		  /* 8213842Ch */ case   13:  		/* bl -17004 */
		/* 8213842Ch case   13:*/		regs.LR = 0x82138430; return 0x821341C0;
		/* 8213842Ch case   13:*/		return 0x82138430;
		  /* 82138430h */ case   14:  		/* cmplw CR6, R3, R28 */
		/* 82138430h case   14:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 82138430h case   14:*/		return 0x82138434;
		  /* 82138434h */ case   15:  		/* bc 4, CR6_GT, 8 */
		/* 82138434h case   15:*/		if ( !regs.CR[6].gt ) { return 0x8213843C;  }
		/* 82138434h case   15:*/		return 0x82138438;
		  /* 82138438h */ case   16:  		/* mr R28, R3 */
		/* 82138438h case   16:*/		regs.R28 = regs.R3;
		/* 82138438h case   16:*/		return 0x8213843C;
	}
	return 0x8213843C;
} // Block from 821383F8h-8213843Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213843Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213843C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213843C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213843C);
		  /* 8213843Ch */ case    0:  		/* lwz R11, <#[R8 + 16]> */
		/* 8213843Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 8213843Ch case    0:*/		return 0x82138440;
		  /* 82138440h */ case    1:  		/* addi R10, R1, 192 */
		/* 82138440h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 82138440h case    1:*/		return 0x82138444;
		  /* 82138444h */ case    2:  		/* addic. R29, R29, -1 */
		/* 82138444h case    2:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82138444h case    2:*/		return 0x82138448;
		  /* 82138448h */ case    3:  		/* add R11, R11, R27 */
		/* 82138448h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82138448h case    3:*/		return 0x8213844C;
		  /* 8213844Ch */ case    4:  		/* addi R30, R30, 4 */
		/* 8213844Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213844Ch case    4:*/		return 0x82138450;
		  /* 82138450h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82138450h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82138450h case    5:*/		return 0x82138454;
		  /* 82138454h */ case    6:  		/* stwx R3, <#[R11 + R10]> */
		/* 82138454h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82138454h case    6:*/		return 0x82138458;
		  /* 82138458h */ case    7:  		/* bc 4, CR0_EQ, -84 */
		/* 82138458h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82138404;  }
		/* 82138458h case    7:*/		return 0x8213845C;
		  /* 8213845Ch */ case    8:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 8213845Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 8213845Ch case    8:*/		return 0x82138460;
		  /* 82138460h */ case    9:  		/* addi R11, R1, 128 */
		/* 82138460h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82138460h case    9:*/		return 0x82138464;
		  /* 82138464h */ case   10:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82138464h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138464h case   10:*/		return 0x82138468;
		  /* 82138468h */ case   11:  		/* cmplw CR6, R9, R28 */
		/* 82138468h case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 82138468h case   11:*/		return 0x8213846C;
		  /* 8213846Ch */ case   12:  		/* bc 4, CR6_LT, 8 */
		/* 8213846Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x82138474;  }
		/* 8213846Ch case   12:*/		return 0x82138470;
		  /* 82138470h */ case   13:  		/* stwx R28, <#[R10 + R11]> */
		/* 82138470h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138470h case   13:*/		return 0x82138474;
	}
	return 0x82138474;
} // Block from 8213843Ch-82138474h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82138474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138474);
		  /* 82138474h */ case    0:  		/* mr R3, R31 */
		/* 82138474h case    0:*/		regs.R3 = regs.R31;
		/* 82138474h case    0:*/		return 0x82138478;
		  /* 82138478h */ case    1:  		/* bl -8496 */
		/* 82138478h case    1:*/		regs.LR = 0x8213847C; return 0x82136348;
		/* 82138478h case    1:*/		return 0x8213847C;
		  /* 8213847Ch */ case    2:  		/* b 440 */
		/* 8213847Ch case    2:*/		return 0x82138634;
		/* 8213847Ch case    2:*/		return 0x82138480;
	}
	return 0x82138480;
} // Block from 82138474h-82138480h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138480);
		  /* 82138480h */ case    0:  		/* lwz R11, <#[R23 + 12]> */
		/* 82138480h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82138480h case    0:*/		return 0x82138484;
		  /* 82138484h */ case    1:  		/* mr R26, R20 */
		/* 82138484h case    1:*/		regs.R26 = regs.R20;
		/* 82138484h case    1:*/		return 0x82138488;
		  /* 82138488h */ case    2:  		/* mr R24, R20 */
		/* 82138488h case    2:*/		regs.R24 = regs.R20;
		/* 82138488h case    2:*/		return 0x8213848C;
		  /* 8213848Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213848Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213848Ch case    3:*/		return 0x82138490;
		  /* 82138490h */ case    4:  		/* bc 4, CR6_GT, 396 */
		/* 82138490h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213861C;  }
		/* 82138490h case    4:*/		return 0x82138494;
		  /* 82138494h */ case    5:  		/* addi R27, R14, 1 */
		/* 82138494h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R14,0x1);
		/* 82138494h case    5:*/		return 0x82138498;
		  /* 82138498h */ case    6:  		/* mr R25, R20 */
		/* 82138498h case    6:*/		regs.R25 = regs.R20;
		/* 82138498h case    6:*/		return 0x8213849C;
		  /* 8213849Ch */ case    7:  		/* lwz R11, <#[R23 + 16]> */
		/* 8213849Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 8213849Ch case    7:*/		return 0x821384A0;
		  /* 821384A0h */ case    8:  		/* lwz R10, <#[R31 + 20]> */
		/* 821384A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821384A0h case    8:*/		return 0x821384A4;
		  /* 821384A4h */ case    9:  		/* lhz R9, <#[R31 + 202]> */
		/* 821384A4h case    9:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000CA) );
		/* 821384A4h case    9:*/		return 0x821384A8;
		  /* 821384A8h */ case   10:  		/* cmplwi CR6, R9, 260 */
		/* 821384A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000104);
		/* 821384A8h case   10:*/		return 0x821384AC;
		  /* 821384ACh */ case   11:  		/* lwzx R11, <#[R11 + R25]> */
		/* 821384ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821384ACh case   11:*/		return 0x821384B0;
		  /* 821384B0h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821384B0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821384B0h case   12:*/		return 0x821384B4;
		  /* 821384B4h */ case   13:  		/* lwzx R8, <#[R11 + R10]> */
		/* 821384B4h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821384B4h case   13:*/		return 0x821384B8;
		  /* 821384B8h */ case   14:  		/* bc 4, CR6_EQ, 16 */
		/* 821384B8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821384C8;  }
		/* 821384B8h case   14:*/		return 0x821384BC;
		  /* 821384BCh */ case   15:  		/* mr R19, R14 */
		/* 821384BCh case   15:*/		regs.R19 = regs.R14;
		/* 821384BCh case   15:*/		return 0x821384C0;
		  /* 821384C0h */ case   16:  		/* stw R14, <#[R8 + 12]> */
		/* 821384C0h case   16:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R8 + 0x0000000C) );
		/* 821384C0h case   16:*/		return 0x821384C4;
		  /* 821384C4h */ case   17:  		/* b 16 */
		/* 821384C4h case   17:*/		return 0x821384D4;
		/* 821384C4h case   17:*/		return 0x821384C8;
	}
	return 0x821384C8;
} // Block from 82138480h-821384C8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821384C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821384C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821384C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821384C8);
		  /* 821384C8h */ case    0:  		/* addi R11, R14, 2 */
		/* 821384C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0x2);
		/* 821384C8h case    0:*/		return 0x821384CC;
		  /* 821384CCh */ case    1:  		/* stw R11, <#[R8 + 12]> */
		/* 821384CCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 821384CCh case    1:*/		return 0x821384D0;
		  /* 821384D0h */ case    2:  		/* mr R19, R11 */
		/* 821384D0h case    2:*/		regs.R19 = regs.R11;
		/* 821384D0h case    2:*/		return 0x821384D4;
	}
	return 0x821384D4;
} // Block from 821384C8h-821384D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821384D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821384D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821384D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821384D4);
		  /* 821384D4h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821384D4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821384D4h case    0:*/		return 0x821384D8;
		  /* 821384D8h */ case    1:  		/* addi R9, R1, 100 */
		/* 821384D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 821384D8h case    1:*/		return 0x821384DC;
		  /* 821384DCh */ case    2:  		/* mr R5, R27 */
		/* 821384DCh case    2:*/		regs.R5 = regs.R27;
		/* 821384DCh case    2:*/		return 0x821384E0;
		  /* 821384E0h */ case    3:  		/* lwz R6, <#[R31 + 552]> */
		/* 821384E0h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 821384E0h case    3:*/		return 0x821384E4;
		  /* 821384E4h */ case    4:  		/* mr R3, R31 */
		/* 821384E4h case    4:*/		regs.R3 = regs.R31;
		/* 821384E4h case    4:*/		return 0x821384E8;
		  /* 821384E8h */ case    5:  		/* stw R19, <#[R1 + 104]> */
		/* 821384E8h case    5:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000068) );
		/* 821384E8h case    5:*/		return 0x821384EC;
		  /* 821384ECh */ case    6:  		/* lwzx R11, <#[R4 + R15]> */
		/* 821384ECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R15 + 0x00000000) );
		/* 821384ECh case    6:*/		return 0x821384F0;
		  /* 821384F0h */ case    7:  		/* lwz R11, <#[R11 + 16]> */
		/* 821384F0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821384F0h case    7:*/		return 0x821384F4;
		  /* 821384F4h */ case    8:  		/* lwzx R7, <#[R11 + R25]> */
		/* 821384F4h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821384F4h case    8:*/		return 0x821384F8;
		  /* 821384F8h */ case    9:  		/* bl -17208 */
		/* 821384F8h case    9:*/		regs.LR = 0x821384FC; return 0x821341C0;
		/* 821384F8h case    9:*/		return 0x821384FC;
		  /* 821384FCh */ case   10:  		/* mr R11, R3 */
		/* 821384FCh case   10:*/		regs.R11 = regs.R3;
		/* 821384FCh case   10:*/		return 0x82138500;
		  /* 82138500h */ case   11:  		/* cmplw CR6, R3, R26 */
		/* 82138500h case   11:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 82138500h case   11:*/		return 0x82138504;
		  /* 82138504h */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 82138504h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8213850C;  }
		/* 82138504h case   12:*/		return 0x82138508;
		  /* 82138508h */ case   13:  		/* mr R26, R3 */
		/* 82138508h case   13:*/		regs.R26 = regs.R3;
		/* 82138508h case   13:*/		return 0x8213850C;
	}
	return 0x8213850C;
} // Block from 821384D4h-8213850Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213850Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213850C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213850C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213850C);
		  /* 8213850Ch */ case    0:  		/* stw R20, <#[R1 + 96]> */
		/* 8213850Ch case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 8213850Ch case    0:*/		return 0x82138510;
		  /* 82138510h */ case    1:  		/* rlwinm R28, R19, 2, 0, 29 */
		/* 82138510h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R19);
		/* 82138510h case    1:*/		return 0x82138514;
		  /* 82138514h */ case    2:  		/* lwz R10, <#[R8 + 16]> */
		/* 82138514h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 82138514h case    2:*/		return 0x82138518;
		  /* 82138518h */ case    3:  		/* addi R8, R1, 192 */
		/* 82138518h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82138518h case    3:*/		return 0x8213851C;
		  /* 8213851Ch */ case    4:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213851Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213851Ch case    4:*/		return 0x82138520;
		  /* 82138520h */ case    5:  		/* addi R9, R1, 288 */
		/* 82138520h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x120);
		/* 82138520h case    5:*/		return 0x82138524;
		  /* 82138524h */ case    6:  		/* add R7, R10, R28 */
		/* 82138524h case    6:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R28);
		/* 82138524h case    6:*/		return 0x82138528;
		  /* 82138528h */ case    7:  		/* lwz R6, <#[R31 + 552]> */
		/* 82138528h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82138528h case    7:*/		return 0x8213852C;
		  /* 8213852Ch */ case    8:  		/* addi R10, R1, 96 */
		/* 8213852Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213852Ch case    8:*/		return 0x82138530;
		  /* 82138530h */ case    9:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82138530h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82138530h case    9:*/		return 0x82138534;
		  /* 82138534h */ case   10:  		/* mr R5, R27 */
		/* 82138534h case   10:*/		regs.R5 = regs.R27;
		/* 82138534h case   10:*/		return 0x82138538;
		  /* 82138538h */ case   11:  		/* lwzx R30, <#[R4 + R15]> */
		/* 82138538h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + regs.R15 + 0x00000000) );
		/* 82138538h case   11:*/		return 0x8213853C;
		  /* 8213853Ch */ case   12:  		/* mr R3, R31 */
		/* 8213853Ch case   12:*/		regs.R3 = regs.R31;
		/* 8213853Ch case   12:*/		return 0x82138540;
		  /* 82138540h */ case   13:  		/* stwx R11, <#[R7 + R8]> */
		/* 82138540h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82138540h case   13:*/		return 0x82138544;
		  /* 82138544h */ case   14:  		/* lwz R8, <#[R30 + 12]> */
		/* 82138544h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000000C) );
		/* 82138544h case   14:*/		return 0x82138548;
		  /* 82138548h */ case   15:  		/* lwz R7, <#[R30 + 16]> */
		/* 82138548h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000010) );
		/* 82138548h case   15:*/		return 0x8213854C;
		  /* 8213854Ch */ case   16:  		/* bl -9148 */
		/* 8213854Ch case   16:*/		regs.LR = 0x82138550; return 0x82136190;
		/* 8213854Ch case   16:*/		return 0x82138550;
		  /* 82138550h */ case   17:  		/* lwz R29, <#[R1 + 96]> */
		/* 82138550h case   17:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82138550h case   17:*/		return 0x82138554;
		  /* 82138554h */ case   18:  		/* addi R7, R1, 96 */
		/* 82138554h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82138554h case   18:*/		return 0x82138558;
		  /* 82138558h */ case   19:  		/* lwz R5, <#[R31 + 548]> */
		/* 82138558h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000224) );
		/* 82138558h case   19:*/		return 0x8213855C;
		  /* 8213855Ch */ case   20:  		/* addi R6, R1, 288 */
		/* 8213855Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 8213855Ch case   20:*/		return 0x82138560;
		  /* 82138560h */ case   21:  		/* lwz R4, <#[R31 + 560]> */
		/* 82138560h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 82138560h case   21:*/		return 0x82138564;
		  /* 82138564h */ case   22:  		/* mr R3, R31 */
		/* 82138564h case   22:*/		regs.R3 = regs.R31;
		/* 82138564h case   22:*/		return 0x82138568;
		  /* 82138568h */ case   23:  		/* mr R30, R29 */
		/* 82138568h case   23:*/		regs.R30 = regs.R29;
		/* 82138568h case   23:*/		return 0x8213856C;
		  /* 8213856Ch */ case   24:  		/* bl -9532 */
		/* 8213856Ch case   24:*/		regs.LR = 0x82138570; return 0x82136030;
		/* 8213856Ch case   24:*/		return 0x82138570;
		  /* 82138570h */ case   25:  		/* addi R7, R1, 96 */
		/* 82138570h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82138570h case   25:*/		return 0x82138574;
		  /* 82138574h */ case   26:  		/* addi R6, R1, 288 */
		/* 82138574h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 82138574h case   26:*/		return 0x82138578;
		  /* 82138578h */ case   27:  		/* lwz R5, <#[R31 + 552]> */
		/* 82138578h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000228) );
		/* 82138578h case   27:*/		return 0x8213857C;
		  /* 8213857Ch */ case   28:  		/* mr R3, R31 */
		/* 8213857Ch case   28:*/		regs.R3 = regs.R31;
		/* 8213857Ch case   28:*/		return 0x82138580;
		  /* 82138580h */ case   29:  		/* lwz R4, <#[R31 + 564]> */
		/* 82138580h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82138580h case   29:*/		return 0x82138584;
		  /* 82138584h */ case   30:  		/* bl -9556 */
		/* 82138584h case   30:*/		regs.LR = 0x82138588; return 0x82136030;
		/* 82138584h case   30:*/		return 0x82138588;
		  /* 82138588h */ case   31:  		/* lwz R29, <#[R1 + 96]> */
		/* 82138588h case   31:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82138588h case   31:*/		return 0x8213858C;
		  /* 8213858Ch */ case   32:  		/* cmplw CR6, R30, R29 */
		/* 8213858Ch case   32:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8213858Ch case   32:*/		return 0x82138590;
		  /* 82138590h */ case   33:  		/* bc 4, CR6_EQ, -60 */
		/* 82138590h case   33:*/		if ( !regs.CR[6].eq ) { return 0x82138554;  }
		/* 82138590h case   33:*/		return 0x82138594;
		  /* 82138594h */ case   34:  		/* cmplwi CR6, R29, 0 */
		/* 82138594h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82138594h case   34:*/		return 0x82138598;
		  /* 82138598h */ case   35:  		/* bc 12, CR6_EQ, 96 */
		/* 82138598h case   35:*/		if ( regs.CR[6].eq ) { return 0x821385F8;  }
		/* 82138598h case   35:*/		return 0x8213859C;
		  /* 8213859Ch */ case   36:  		/* addi R30, R1, 288 */
		/* 8213859Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x120);
		/* 8213859Ch case   36:*/		return 0x821385A0;
		  /* 821385A0h */ case   37:  		/* lwz R7, <#[R30]> */
		/* 821385A0h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821385A0h case   37:*/		return 0x821385A4;
		  /* 821385A4h */ case   38:  		/* addi R9, R1, 100 */
		/* 821385A4h case   38:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 821385A4h case   38:*/		return 0x821385A8;
		  /* 821385A8h */ case   39:  		/* lwz R11, <#[R31 + 20]> */
		/* 821385A8h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821385A8h case   39:*/		return 0x821385AC;
		  /* 821385ACh */ case   40:  		/* mr R5, R27 */
		/* 821385ACh case   40:*/		regs.R5 = regs.R27;
		/* 821385ACh case   40:*/		return 0x821385B0;
		  /* 821385B0h */ case   41:  		/* rlwinm R10, R7, 2, 0, 29 */
		/* 821385B0h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 821385B0h case   41:*/		return 0x821385B4;
		  /* 821385B4h */ case   42:  		/* mr R3, R31 */
		/* 821385B4h case   42:*/		regs.R3 = regs.R31;
		/* 821385B4h case   42:*/		return 0x821385B8;
		  /* 821385B8h */ case   43:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821385B8h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821385B8h case   43:*/		return 0x821385BC;
		  /* 821385BCh */ case   44:  		/* stw R19, <#[R8 + 12]> */
		/* 821385BCh case   44:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R8 + 0x0000000C) );
		/* 821385BCh case   44:*/		return 0x821385C0;
		  /* 821385C0h */ case   45:  		/* lwz R4, <#[R31 + 564]> */
		/* 821385C0h case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821385C0h case   45:*/		return 0x821385C4;
		  /* 821385C4h */ case   46:  		/* lwz R6, <#[R31 + 552]> */
		/* 821385C4h case   46:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 821385C4h case   46:*/		return 0x821385C8;
		  /* 821385C8h */ case   47:  		/* bl -17416 */
		/* 821385C8h case   47:*/		regs.LR = 0x821385CC; return 0x821341C0;
		/* 821385C8h case   47:*/		return 0x821385CC;
		  /* 821385CCh */ case   48:  		/* cmplw CR6, R3, R26 */
		/* 821385CCh case   48:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 821385CCh case   48:*/		return 0x821385D0;
		  /* 821385D0h */ case   49:  		/* bc 4, CR6_GT, 8 */
		/* 821385D0h case   49:*/		if ( !regs.CR[6].gt ) { return 0x821385D8;  }
		/* 821385D0h case   49:*/		return 0x821385D4;
		  /* 821385D4h */ case   50:  		/* mr R26, R3 */
		/* 821385D4h case   50:*/		regs.R26 = regs.R3;
		/* 821385D4h case   50:*/		return 0x821385D8;
	}
	return 0x821385D8;
} // Block from 8213850Ch-821385D8h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821385D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821385D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821385D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821385D8);
		  /* 821385D8h */ case    0:  		/* lwz R11, <#[R8 + 16]> */
		/* 821385D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 821385D8h case    0:*/		return 0x821385DC;
		  /* 821385DCh */ case    1:  		/* addi R10, R1, 192 */
		/* 821385DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 821385DCh case    1:*/		return 0x821385E0;
		  /* 821385E0h */ case    2:  		/* addic. R29, R29, -1 */
		/* 821385E0h case    2:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821385E0h case    2:*/		return 0x821385E4;
		  /* 821385E4h */ case    3:  		/* add R11, R11, R28 */
		/* 821385E4h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821385E4h case    3:*/		return 0x821385E8;
		  /* 821385E8h */ case    4:  		/* addi R30, R30, 4 */
		/* 821385E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821385E8h case    4:*/		return 0x821385EC;
		  /* 821385ECh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821385ECh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821385ECh case    5:*/		return 0x821385F0;
		  /* 821385F0h */ case    6:  		/* stwx R3, <#[R11 + R10]> */
		/* 821385F0h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821385F0h case    6:*/		return 0x821385F4;
		  /* 821385F4h */ case    7:  		/* bc 4, CR0_EQ, -84 */
		/* 821385F4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821385A0;  }
		/* 821385F4h case    7:*/		return 0x821385F8;
	}
	return 0x821385F8;
} // Block from 821385D8h-821385F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821385F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821385F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821385F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821385F8);
		  /* 821385F8h */ case    0:  		/* mr R3, R31 */
		/* 821385F8h case    0:*/		regs.R3 = regs.R31;
		/* 821385F8h case    0:*/		return 0x821385FC;
		  /* 821385FCh */ case    1:  		/* bl -8884 */
		/* 821385FCh case    1:*/		regs.LR = 0x82138600; return 0x82136348;
		/* 821385FCh case    1:*/		return 0x82138600;
		  /* 82138600h */ case    2:  		/* lwz R11, <#[R31 + 564]> */
		/* 82138600h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 82138600h case    2:*/		return 0x82138604;
		  /* 82138604h */ case    3:  		/* addi R24, R24, 1 */
		/* 82138604h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82138604h case    3:*/		return 0x82138608;
		  /* 82138608h */ case    4:  		/* addi R25, R25, 4 */
		/* 82138608h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82138608h case    4:*/		return 0x8213860C;
		  /* 8213860Ch */ case    5:  		/* lwzx R23, <#[R11 + R15]> */
		/* 8213860Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 8213860Ch case    5:*/		return 0x82138610;
		  /* 82138610h */ case    6:  		/* lwz R11, <#[R23 + 12]> */
		/* 82138610h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82138610h case    6:*/		return 0x82138614;
		  /* 82138614h */ case    7:  		/* cmplw CR6, R24, R11 */
		/* 82138614h case    7:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82138614h case    7:*/		return 0x82138618;
		  /* 82138618h */ case    8:  		/* bc 12, CR6_LT, -380 */
		/* 82138618h case    8:*/		if ( regs.CR[6].lt ) { return 0x8213849C;  }
		/* 82138618h case    8:*/		return 0x8213861C;
	}
	return 0x8213861C;
} // Block from 821385F8h-8213861Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213861Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213861C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213861C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213861C);
		  /* 8213861Ch */ case    0:  		/* rlwinm R10, R19, 2, 0, 29 */
		/* 8213861Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R19);
		/* 8213861Ch case    0:*/		return 0x82138620;
		  /* 82138620h */ case    1:  		/* addi R11, R1, 128 */
		/* 82138620h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82138620h case    1:*/		return 0x82138624;
		  /* 82138624h */ case    2:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82138624h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138624h case    2:*/		return 0x82138628;
		  /* 82138628h */ case    3:  		/* cmplw CR6, R9, R26 */
		/* 82138628h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 82138628h case    3:*/		return 0x8213862C;
		  /* 8213862Ch */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 8213862Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x82138634;  }
		/* 8213862Ch case    4:*/		return 0x82138630;
		  /* 82138630h */ case    5:  		/* stwx R26, <#[R10 + R11]> */
		/* 82138630h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138630h case    5:*/		return 0x82138634;
	}
	return 0x82138634;
} // Block from 8213861Ch-82138634h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138634);
		  /* 82138634h */ case    0:  		/* lwz R6, <#[R31 + 552]> */
		/* 82138634h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 82138634h case    0:*/		return 0x82138638;
		  /* 82138638h */ case    1:  		/* addi R14, R14, 1 */
		/* 82138638h case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 82138638h case    1:*/		return 0x8213863C;
		  /* 8213863Ch */ case    2:  		/* cmplw CR6, R14, R6 */
		/* 8213863Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R6);
		/* 8213863Ch case    2:*/		return 0x82138640;
		  /* 82138640h */ case    3:  		/* bc 12, CR6_LT, -3048 */
		/* 82138640h case    3:*/		if ( regs.CR[6].lt ) { return 0x82137A58;  }
		/* 82138640h case    3:*/		return 0x82138644;
		  /* 82138644h */ case    4:  		/* lwz R15, <#[R1 + 796]> */
		/* 82138644h case    4:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000031C) );
		/* 82138644h case    4:*/		return 0x82138648;
	}
	return 0x82138648;
} // Block from 82138634h-82138648h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82138648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138648);
		  /* 82138648h */ case    0:  		/* lwz R11, <#[R31 + 560]> */
		/* 82138648h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 82138648h case    0:*/		return 0x8213864C;
		  /* 8213864Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213864Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213864Ch case    1:*/		return 0x82138650;
		  /* 82138650h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 82138650h case    2:*/		if ( regs.CR[6].eq ) { return 0x82138678;  }
		/* 82138650h case    2:*/		return 0x82138654;
		  /* 82138654h */ case    3:  		/* lhz R11, <#[R31 + 202]> */
		/* 82138654h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 82138654h case    3:*/		return 0x82138658;
		  /* 82138658h */ case    4:  		/* cmplwi CR6, R11, 260 */
		/* 82138658h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 82138658h case    4:*/		return 0x8213865C;
		  /* 8213865Ch */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 8213865Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82138678;  }
		/* 8213865Ch case    5:*/		return 0x82138660;
		  /* 82138660h */ case    6:  		/* cmpwi CR6, R15, 0 */
		/* 82138660h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 82138660h case    6:*/		return 0x82138664;
		  /* 82138664h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82138664h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82138678;  }
		/* 82138664h case    7:*/		return 0x82138668;
		  /* 82138668h */ case    8:  		/* mr R3, R31 */
		/* 82138668h case    8:*/		regs.R3 = regs.R31;
		/* 82138668h case    8:*/		return 0x8213866C;
		  /* 8213866Ch */ case    9:  		/* bl -5052 */
		/* 8213866Ch case    9:*/		regs.LR = 0x82138670; return 0x821372B0;
		/* 8213866Ch case    9:*/		return 0x82138670;
		  /* 82138670h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82138670h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82138670h case   10:*/		return 0x82138674;
		  /* 82138674h */ case   11:  		/* bc 12, CR0_LT, 8 */
		/* 82138674h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213867C;  }
		/* 82138674h case   11:*/		return 0x82138678;
	}
	return 0x82138678;
} // Block from 82138648h-82138678h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82138678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138678);
		  /* 82138678h */ case    0:  		/* mr R3, R20 */
		/* 82138678h case    0:*/		regs.R3 = regs.R20;
		/* 82138678h case    0:*/		return 0x8213867C;
	}
	return 0x8213867C;
} // Block from 82138678h-8213867Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213867Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213867C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213867C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213867C);
		  /* 8213867Ch */ case    0:  		/* addi R1, R1, 768 */
		/* 8213867Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x300);
		/* 8213867Ch case    0:*/		return 0x82138680;
		  /* 82138680h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82138680h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82138680h case    1:*/		return 0x82138684;
		  /* 82138684h */ case    2:  		/* b -685076 */
		/* 82138684h case    2:*/		return 0x82091270;
		/* 82138684h case    2:*/		return 0x82138688;
	}
	return 0x82138688;
} // Block from 8213867Ch-82138688h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138688);
		  /* 82138688h */ case    0:  		/* lwz R11, <#[R1 + 796]> */
		/* 82138688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000031C) );
		/* 82138688h case    0:*/		return 0x8213868C;
		  /* 8213868Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8213868Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213868Ch case    1:*/		return 0x82138690;
		  /* 82138690h */ case    2:  		/* bc 4, CR6_EQ, -2468 */
		/* 82138690h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 82138690h case    2:*/		return 0x82138694;
		  /* 82138694h */ case    3:  		/* lwz R11, <#[R1 + 804]> */
		/* 82138694h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000324) );
		/* 82138694h case    3:*/		return 0x82138698;
		  /* 82138698h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82138698h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82138698h case    4:*/		return 0x8213869C;
		  /* 8213869Ch */ case    5:  		/* bc 4, CR6_EQ, -2480 */
		/* 8213869Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 8213869Ch case    5:*/		return 0x821386A0;
		  /* 821386A0h */ case    6:  		/* lwz R4, <#[R23 + 60]> */
		/* 821386A0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x0000003C) );
		/* 821386A0h case    6:*/		return 0x821386A4;
		  /* 821386A4h */ case    7:  		/* lis R11, -32253 */
		/* 821386A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821386A4h case    7:*/		return 0x821386A8;
		  /* 821386A8h */ case    8:  		/* li R5, 4521 */
		/* 821386A8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x11A9);
		/* 821386A8h case    8:*/		return 0x821386AC;
		  /* 821386ACh */ case    9:  		/* addi R6, R11, 21764 */
		/* 821386ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5504);
		/* 821386ACh case    9:*/		return 0x821386B0;
		  /* 821386B0h */ case   10:  		/* b -2508 */
		/* 821386B0h case   10:*/		return 0x82137CE4;
		/* 821386B0h case   10:*/		return 0x821386B4;
	}
	return 0x821386B4;
} // Block from 82138688h-821386B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821386B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821386B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821386B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821386B4);
		  /* 821386B4h */ case    0:  		/* lwz R11, <#[R1 + 796]> */
		/* 821386B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000031C) );
		/* 821386B4h case    0:*/		return 0x821386B8;
		  /* 821386B8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821386B8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821386B8h case    1:*/		return 0x821386BC;
		  /* 821386BCh */ case    2:  		/* bc 4, CR6_EQ, -2512 */
		/* 821386BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 821386BCh case    2:*/		return 0x821386C0;
		  /* 821386C0h */ case    3:  		/* lwz R11, <#[R1 + 804]> */
		/* 821386C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000324) );
		/* 821386C0h case    3:*/		return 0x821386C4;
		  /* 821386C4h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821386C4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821386C4h case    4:*/		return 0x821386C8;
		  /* 821386C8h */ case    5:  		/* bc 4, CR6_EQ, -2524 */
		/* 821386C8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 821386C8h case    5:*/		return 0x821386CC;
		  /* 821386CCh */ case    6:  		/* lwz R4, <#[R7 + 60]> */
		/* 821386CCh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + 0x0000003C) );
		/* 821386CCh case    6:*/		return 0x821386D0;
		  /* 821386D0h */ case    7:  		/* b -44 */
		/* 821386D0h case    7:*/		return 0x821386A4;
		/* 821386D0h case    7:*/		return 0x821386D4;
	}
	return 0x821386D4;
} // Block from 821386B4h-821386D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821386D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821386D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821386D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821386D4);
		  /* 821386D4h */ case    0:  		/* cmplwi CR6, R26, 260 */
		/* 821386D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000104);
		/* 821386D4h case    0:*/		return 0x821386D8;
		  /* 821386D8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821386D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821386CC;  }
		/* 821386D8h case    1:*/		return 0x821386DC;
		  /* 821386DCh */ case    2:  		/* lwz R11, <#[R1 + 804]> */
		/* 821386DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000324) );
		/* 821386DCh case    2:*/		return 0x821386E0;
		  /* 821386E0h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821386E0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821386E0h case    3:*/		return 0x821386E4;
		  /* 821386E4h */ case    4:  		/* bc 12, CR6_EQ, -24 */
		/* 821386E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821386CC;  }
		/* 821386E4h case    4:*/		return 0x821386E8;
		  /* 821386E8h */ case    5:  		/* cmplwi CR6, R26, 260 */
		/* 821386E8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000104);
		/* 821386E8h case    5:*/		return 0x821386EC;
		  /* 821386ECh */ case    6:  		/* bc 12, CR6_EQ, -2560 */
		/* 821386ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82137CEC;  }
		/* 821386ECh case    6:*/		return 0x821386F0;
		  /* 821386F0h */ case    7:  		/* b -36 */
		/* 821386F0h case    7:*/		return 0x821386CC;
		/* 821386F0h case    7:*/		return 0x821386F4;
	}
	return 0x821386F4;
} // Block from 821386D4h-821386F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821386F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821386F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821386F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821386F4);
		  /* 821386F4h */ case    0:  		/* lis R3, -32761 */
		/* 821386F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 821386F4h case    0:*/		return 0x821386F8;
		  /* 821386F8h */ case    1:  		/* ori R3, R3, 14 */
		/* 821386F8h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 821386F8h case    1:*/		return 0x821386FC;
		  /* 821386FCh */ case    2:  		/* b -128 */
		/* 821386FCh case    2:*/		return 0x8213867C;
		/* 821386FCh case    2:*/		return 0x82138700;
	}
	return 0x82138700;
} // Block from 821386F4h-82138700h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138700);
		  /* 82138700h */ case    0:  		/* mfspr R12, LR */
		/* 82138700h case    0:*/		regs.R12 = regs.LR;
		/* 82138700h case    0:*/		return 0x82138704;
		  /* 82138704h */ case    1:  		/* bl -685252 */
		/* 82138704h case    1:*/		regs.LR = 0x82138708; return 0x82091240;
		/* 82138704h case    1:*/		return 0x82138708;
		  /* 82138708h */ case    2:  		/* li R24, 0 */
		/* 82138708h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82138708h case    2:*/		return 0x8213870C;
		  /* 8213870Ch */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 8213870Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213870Ch case    3:*/		return 0x82138710;
		  /* 82138710h */ case    4:  		/* bc 12, CR6_EQ, 288 */
		/* 82138710h case    4:*/		if ( regs.CR[6].eq ) { return 0x82138830;  }
		/* 82138710h case    4:*/		return 0x82138714;
		  /* 82138714h */ case    5:  		/* mr R23, R4 */
		/* 82138714h case    5:*/		regs.R23 = regs.R4;
		/* 82138714h case    5:*/		return 0x82138718;
		  /* 82138718h */ case    6:  		/* lwz R26, <#[R23]> */
		/* 82138718h case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R23 + 0x00000000) );
		/* 82138718h case    6:*/		return 0x8213871C;
		  /* 8213871Ch */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 8213871Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8213871Ch case    7:*/		return 0x82138720;
		  /* 82138720h */ case    8:  		/* bc 12, CR6_EQ, 256 */
		/* 82138720h case    8:*/		if ( regs.CR[6].eq ) { return 0x82138820;  }
		/* 82138720h case    8:*/		return 0x82138724;
		  /* 82138724h */ case    9:  		/* lwz R30, <#[R26 + 12]> */
		/* 82138724h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x0000000C) );
		/* 82138724h case    9:*/		return 0x82138728;
		  /* 82138728h */ case   10:  		/* cmplw CR6, R30, R7 */
		/* 82138728h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R7);
		/* 82138728h case   10:*/		return 0x8213872C;
		  /* 8213872Ch */ case   11:  		/* bc 12, CR6_LT, 244 */
		/* 8213872Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x82138820;  }
		/* 8213872Ch case   11:*/		return 0x82138730;
		  /* 82138730h */ case   12:  		/* li R25, 1 */
		/* 82138730h case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82138730h case   12:*/		return 0x82138734;
		  /* 82138734h */ case   13:  		/* cmplwi CR6, R7, 0 */
		/* 82138734h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82138734h case   13:*/		return 0x82138738;
		  /* 82138738h */ case   14:  		/* bc 12, CR6_EQ, 256 */
		/* 82138738h case   14:*/		if ( regs.CR[6].eq ) { return 0x82138838;  }
		/* 82138738h case   14:*/		return 0x8213873C;
		  /* 8213873Ch */ case   15:  		/* lwz R28, <#[R3 + 20]> */
		/* 8213873Ch case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000014) );
		/* 8213873Ch case   15:*/		return 0x82138740;
		  /* 82138740h */ case   16:  		/* mr R27, R6 */
		/* 82138740h case   16:*/		regs.R27 = regs.R6;
		/* 82138740h case   16:*/		return 0x82138744;
		  /* 82138744h */ case   17:  		/* mtspr CTR, R7 */
		/* 82138744h case   17:*/		regs.CTR = regs.R7;
		/* 82138744h case   17:*/		return 0x82138748;
		  /* 82138748h */ case   18:  		/* lwz R31, <#[R27]> */
		/* 82138748h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 82138748h case   18:*/		return 0x8213874C;
		  /* 8213874Ch */ case   19:  		/* cmpwi CR6, R8, 0 */
		/* 8213874Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8213874Ch case   19:*/		return 0x82138750;
		  /* 82138750h */ case   20:  		/* li R9, 0 */
		/* 82138750h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82138750h case   20:*/		return 0x82138754;
		  /* 82138754h */ case   21:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 82138754h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 82138754h case   21:*/		return 0x82138758;
		  /* 82138758h */ case   22:  		/* lwzx R29, <#[R11 + R28]> */
		/* 82138758h case   22:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82138758h case   22:*/		return 0x8213875C;
		  /* 8213875Ch */ case   23:  		/* bc 12, CR6_EQ, 76 */
		/* 8213875Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821387A8;  }
		/* 8213875Ch case   23:*/		return 0x82138760;
		  /* 82138760h */ case   24:  		/* cmplwi CR6, R30, 0 */
		/* 82138760h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82138760h case   24:*/		return 0x82138764;
		  /* 82138764h */ case   25:  		/* bc 12, CR6_EQ, 52 */
		/* 82138764h case   25:*/		if ( regs.CR[6].eq ) { return 0x82138798;  }
		/* 82138764h case   25:*/		return 0x82138768;
		  /* 82138768h */ case   26:  		/* li R11, 0 */
		/* 82138768h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82138768h case   26:*/		return 0x8213876C;
		  /* 8213876Ch */ case   27:  		/* lwz R10, <#[R26 + 16]> */
		/* 8213876Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000010) );
		/* 8213876Ch case   27:*/		return 0x82138770;
		  /* 82138770h */ case   28:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82138770h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138770h case   28:*/		return 0x82138774;
		  /* 82138774h */ case   29:  		/* cmplw CR6, R10, R31 */
		/* 82138774h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82138774h case   29:*/		return 0x82138778;
		  /* 82138778h */ case   30:  		/* bc 12, CR6_EQ, 32 */
		/* 82138778h case   30:*/		if ( regs.CR[6].eq ) { return 0x82138798;  }
		/* 82138778h case   30:*/		return 0x8213877C;
		  /* 8213877Ch */ case   31:  		/* lwz R22, <#[R29 + 56]> */
		/* 8213877Ch case   31:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R29 + 0x00000038) );
		/* 8213877Ch case   31:*/		return 0x82138780;
		  /* 82138780h */ case   32:  		/* cmplw CR6, R10, R22 */
		/* 82138780h case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 82138780h case   32:*/		return 0x82138784;
		  /* 82138784h */ case   33:  		/* bc 12, CR6_EQ, 20 */
		/* 82138784h case   33:*/		if ( regs.CR[6].eq ) { return 0x82138798;  }
		/* 82138784h case   33:*/		return 0x82138788;
		  /* 82138788h */ case   34:  		/* addi R9, R9, 1 */
		/* 82138788h case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82138788h case   34:*/		return 0x8213878C;
		  /* 8213878Ch */ case   35:  		/* addi R11, R11, 4 */
		/* 8213878Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213878Ch case   35:*/		return 0x82138790;
		  /* 82138790h */ case   36:  		/* cmplw CR6, R9, R30 */
		/* 82138790h case   36:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 82138790h case   36:*/		return 0x82138794;
		  /* 82138794h */ case   37:  		/* bc 12, CR6_LT, -40 */
		/* 82138794h case   37:*/		if ( regs.CR[6].lt ) { return 0x8213876C;  }
		/* 82138794h case   37:*/		return 0x82138798;
	}
	return 0x82138798;
} // Block from 82138700h-82138798h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82138798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138798);
		  /* 82138798h */ case    0:  		/* cmplw CR6, R9, R30 */
		/* 82138798h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 82138798h case    0:*/		return 0x8213879C;
		  /* 8213879Ch */ case    1:  		/* bc 4, CR6_EQ, 116 */
		/* 8213879Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82138810;  }
		/* 8213879Ch case    1:*/		return 0x821387A0;
		  /* 821387A0h */ case    2:  		/* li R25, 0 */
		/* 821387A0h case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821387A0h case    2:*/		return 0x821387A4;
		  /* 821387A4h */ case    3:  		/* b 108 */
		/* 821387A4h case    3:*/		return 0x82138810;
		/* 821387A4h case    3:*/		return 0x821387A8;
	}
	return 0x821387A8;
} // Block from 82138798h-821387A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821387A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821387A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821387A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821387A8);
		  /* 821387A8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821387A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821387A8h case    0:*/		return 0x821387AC;
		  /* 821387ACh */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821387ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x82138800;  }
		/* 821387ACh case    1:*/		return 0x821387B0;
		  /* 821387B0h */ case    2:  		/* li R10, 0 */
		/* 821387B0h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821387B0h case    2:*/		return 0x821387B4;
		  /* 821387B4h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 821387B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 821387B4h case    3:*/		return 0x821387B8;
		  /* 821387B8h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821387B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821387B8h case    4:*/		return 0x821387BC;
		  /* 821387BCh */ case    5:  		/* cmplw CR6, R11, R31 */
		/* 821387BCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821387BCh case    5:*/		return 0x821387C0;
		  /* 821387C0h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 821387C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821387D0;  }
		/* 821387C0h case    6:*/		return 0x821387C4;
		  /* 821387C4h */ case    7:  		/* lwz R22, <#[R29 + 60]> */
		/* 821387C4h case    7:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R29 + 0x0000003C) );
		/* 821387C4h case    7:*/		return 0x821387C8;
		  /* 821387C8h */ case    8:  		/* cmplwi CR6, R22, 0 */
		/* 821387C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821387C8h case    8:*/		return 0x821387CC;
		  /* 821387CCh */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 821387CCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82138800;  }
		/* 821387CCh case    9:*/		return 0x821387D0;
	}
	return 0x821387D0;
} // Block from 821387A8h-821387D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821387D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821387D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821387D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821387D0);
		  /* 821387D0h */ case    0:  		/* lwz R22, <#[R29 + 56]> */
		/* 821387D0h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R29 + 0x00000038) );
		/* 821387D0h case    0:*/		return 0x821387D4;
		  /* 821387D4h */ case    1:  		/* cmplw CR6, R11, R22 */
		/* 821387D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821387D4h case    1:*/		return 0x821387D8;
		  /* 821387D8h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 821387D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821387F0;  }
		/* 821387D8h case    2:*/		return 0x821387DC;
		  /* 821387DCh */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821387DCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821387DCh case    3:*/		return 0x821387E0;
		  /* 821387E0h */ case    4:  		/* lwzx R11, <#[R11 + R28]> */
		/* 821387E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821387E0h case    4:*/		return 0x821387E4;
		  /* 821387E4h */ case    5:  		/* lwz R11, <#[R11 + 60]> */
		/* 821387E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 821387E4h case    5:*/		return 0x821387E8;
		  /* 821387E8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821387E8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821387E8h case    6:*/		return 0x821387EC;
		  /* 821387ECh */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821387ECh case    7:*/		if ( regs.CR[6].eq ) { return 0x82138800;  }
		/* 821387ECh case    7:*/		return 0x821387F0;
	}
	return 0x821387F0;
} // Block from 821387D0h-821387F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821387F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821387F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821387F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821387F0);
		  /* 821387F0h */ case    0:  		/* addi R9, R9, 1 */
		/* 821387F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821387F0h case    0:*/		return 0x821387F4;
		  /* 821387F4h */ case    1:  		/* addi R10, R10, 4 */
		/* 821387F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821387F4h case    1:*/		return 0x821387F8;
		  /* 821387F8h */ case    2:  		/* cmplw CR6, R9, R30 */
		/* 821387F8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 821387F8h case    2:*/		return 0x821387FC;
		  /* 821387FCh */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 821387FCh case    3:*/		if ( regs.CR[6].lt ) { return 0x821387B4;  }
		/* 821387FCh case    3:*/		return 0x82138800;
	}
	return 0x82138800;
} // Block from 821387F0h-82138800h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138800);
		  /* 82138800h */ case    0:  		/* subf R11, R9, R30 */
		/* 82138800h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R30);
		/* 82138800h case    0:*/		return 0x82138804;
		  /* 82138804h */ case    1:  		/* subfic R11, R11, 0 */
		/* 82138804h case    1:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82138804h case    1:*/		return 0x82138808;
		  /* 82138808h */ case    2:  		/* subfe R11, R11, R11 */
		/* 82138808h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82138808h case    2:*/		return 0x8213880C;
		  /* 8213880Ch */ case    3:  		/* and R25, R11, R25 */
		/* 8213880Ch case    3:*/		cpu::op::and<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 8213880Ch case    3:*/		return 0x82138810;
	}
	return 0x82138810;
} // Block from 82138800h-82138810h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138810);
		  /* 82138810h */ case    0:  		/* addi R27, R27, 4 */
		/* 82138810h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82138810h case    0:*/		return 0x82138814;
		  /* 82138814h */ case    1:  		/* bc 16, CR0_LT, -204 */
		/* 82138814h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82138748;  }
		/* 82138814h case    1:*/		return 0x82138818;
		  /* 82138818h */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 82138818h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82138818h case    2:*/		return 0x8213881C;
		  /* 8213881Ch */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 8213881Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82138838;  }
		/* 8213881Ch case    3:*/		return 0x82138820;
	}
	return 0x82138820;
} // Block from 82138810h-82138820h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138820);
		  /* 82138820h */ case    0:  		/* addi R24, R24, 1 */
		/* 82138820h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82138820h case    0:*/		return 0x82138824;
		  /* 82138824h */ case    1:  		/* addi R23, R23, 4 */
		/* 82138824h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 82138824h case    1:*/		return 0x82138828;
		  /* 82138828h */ case    2:  		/* cmplw CR6, R24, R5 */
		/* 82138828h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R5);
		/* 82138828h case    2:*/		return 0x8213882C;
		  /* 8213882Ch */ case    3:  		/* bc 12, CR6_LT, -276 */
		/* 8213882Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82138718;  }
		/* 8213882Ch case    3:*/		return 0x82138830;
	}
	return 0x82138830;
} // Block from 82138820h-82138830h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138830);
		  /* 82138830h */ case    0:  		/* li R3, 0 */
		/* 82138830h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82138830h case    0:*/		return 0x82138834;
		  /* 82138834h */ case    1:  		/* b -685476 */
		/* 82138834h case    1:*/		return 0x82091290;
		/* 82138834h case    1:*/		return 0x82138838;
	}
	return 0x82138838;
} // Block from 82138830h-82138838h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82138838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138838);
		  /* 82138838h */ case    0:  		/* rlwinm R11, R24, 2, 0, 29 */
		/* 82138838h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R24);
		/* 82138838h case    0:*/		return 0x8213883C;
		  /* 8213883Ch */ case    1:  		/* lwzx R3, <#[R11 + R4]> */
		/* 8213883Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8213883Ch case    1:*/		return 0x82138840;
		  /* 82138840h */ case    2:  		/* b -12 */
		/* 82138840h case    2:*/		return 0x82138834;
		/* 82138840h case    2:*/		return 0x82138844;
		  /* 82138844h */ case    3:  		/* nop */
		/* 82138844h case    3:*/		cpu::op::nop();
		/* 82138844h case    3:*/		return 0x82138848;
	}
	return 0x82138848;
} // Block from 82138838h-82138848h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138848);
		  /* 82138848h */ case    0:  		/* mfspr R12, LR */
		/* 82138848h case    0:*/		regs.R12 = regs.LR;
		/* 82138848h case    0:*/		return 0x8213884C;
		  /* 8213884Ch */ case    1:  		/* bl -685588 */
		/* 8213884Ch case    1:*/		regs.LR = 0x82138850; return 0x82091238;
		/* 8213884Ch case    1:*/		return 0x82138850;
		  /* 82138850h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82138850h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82138850h case    2:*/		return 0x82138854;
		  /* 82138854h */ case    3:  		/* mr R22, R8 */
		/* 82138854h case    3:*/		regs.R22 = regs.R8;
		/* 82138854h case    3:*/		return 0x82138858;
		  /* 82138858h */ case    4:  		/* lwz R11, <#[R6]> */
		/* 82138858h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82138858h case    4:*/		return 0x8213885C;
		  /* 8213885Ch */ case    5:  		/* mr R20, R7 */
		/* 8213885Ch case    5:*/		regs.R20 = regs.R7;
		/* 8213885Ch case    5:*/		return 0x82138860;
		  /* 82138860h */ case    6:  		/* li R29, 0 */
		/* 82138860h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82138860h case    6:*/		return 0x82138864;
		  /* 82138864h */ case    7:  		/* mr R25, R3 */
		/* 82138864h case    7:*/		regs.R25 = regs.R3;
		/* 82138864h case    7:*/		return 0x82138868;
		  /* 82138868h */ case    8:  		/* stw R29, <#[R9]> */
		/* 82138868h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + 0x00000000) );
		/* 82138868h case    8:*/		return 0x8213886C;
		  /* 8213886Ch */ case    9:  		/* mr R27, R6 */
		/* 8213886Ch case    9:*/		regs.R27 = regs.R6;
		/* 8213886Ch case    9:*/		return 0x82138870;
		  /* 82138870h */ case   10:  		/* stw R29, <#[R22]> */
		/* 82138870h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R22 + 0x00000000) );
		/* 82138870h case   10:*/		return 0x82138874;
		  /* 82138874h */ case   11:  		/* mr R21, R9 */
		/* 82138874h case   11:*/		regs.R21 = regs.R9;
		/* 82138874h case   11:*/		return 0x82138878;
		  /* 82138878h */ case   12:  		/* mr R8, R10 */
		/* 82138878h case   12:*/		regs.R8 = regs.R10;
		/* 82138878h case   12:*/		return 0x8213887C;
		  /* 8213887Ch */ case   13:  		/* stw R29, <#[R20]> */
		/* 8213887Ch case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 8213887Ch case   13:*/		return 0x82138880;
		  /* 82138880h */ case   14:  		/* rlwinm. R7, R11, 0, 12, 31 */
		/* 82138880h case   14:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R7,regs.R11);
		/* 82138880h case   14:*/		return 0x82138884;
		  /* 82138884h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 82138884h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82138894;  }
		/* 82138884h case   15:*/		return 0x82138888;
		  /* 82138888h */ case   16:  		/* lis R3, -32768 */
		/* 82138888h case   16:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82138888h case   16:*/		return 0x8213888C;
		  /* 8213888Ch */ case   17:  		/* ori R3, R3, 16389 */
		/* 8213888Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213888Ch case   17:*/		return 0x82138890;
		  /* 82138890h */ case   18:  		/* b 368 */
		/* 82138890h case   18:*/		return 0x82138A00;
		/* 82138890h case   18:*/		return 0x82138894;
	}
	return 0x82138894;
} // Block from 82138848h-82138894h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82138894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138894);
		  /* 82138894h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82138894h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82138894h case    0:*/		return 0x82138898;
		  /* 82138898h */ case    1:  		/* twi 6, R7, 0 */
		/* 82138898h case    1:*/		cpu::op::tw<6>(regs, 0x82138898, regs.R7, 0x00000000);
		/* 82138898h case    1:*/		return 0x8213889C;
		  /* 8213889Ch */ case    2:  		/* lwz R10, <#[R1 + 276]> */
		/* 8213889Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 8213889Ch case    2:*/		return 0x821388A0;
		  /* 821388A0h */ case    3:  		/* divwu R23, R11, R7 */
		/* 821388A0h case    3:*/		cpu::op::divwu<0>(regs,&regs.R23,regs.R11,regs.R7);
		/* 821388A0h case    3:*/		return 0x821388A4;
		  /* 821388A4h */ case    4:  		/* cmpwi CR6, R10, 0 */
		/* 821388A4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821388A4h case    4:*/		return 0x821388A8;
		  /* 821388A8h */ case    5:  		/* bc 4, CR6_EQ, 100 */
		/* 821388A8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213890C;  }
		/* 821388A8h case    5:*/		return 0x821388AC;
		  /* 821388ACh */ case    6:  		/* mr R3, R29 */
		/* 821388ACh case    6:*/		regs.R3 = regs.R29;
		/* 821388ACh case    6:*/		return 0x821388B0;
		  /* 821388B0h */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 821388B0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821388B0h case    7:*/		return 0x821388B4;
		  /* 821388B4h */ case    8:  		/* bc 12, CR6_EQ, 88 */
		/* 821388B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213890C;  }
		/* 821388B4h case    8:*/		return 0x821388B8;
		  /* 821388B8h */ case    9:  		/* mr R6, R29 */
		/* 821388B8h case    9:*/		regs.R6 = regs.R29;
		/* 821388B8h case    9:*/		return 0x821388BC;
		  /* 821388BCh */ case   10:  		/* mr R11, R29 */
		/* 821388BCh case   10:*/		regs.R11 = regs.R29;
		/* 821388BCh case   10:*/		return 0x821388C0;
		  /* 821388C0h */ case   11:  		/* cmplwi CR6, R7, 0 */
		/* 821388C0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821388C0h case   11:*/		return 0x821388C4;
		  /* 821388C4h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 821388C4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821388FC;  }
		/* 821388C4h case   12:*/		return 0x821388C8;
		  /* 821388C8h */ case   13:  		/* lwz R10, <#[R27 + 8]> */
		/* 821388C8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821388C8h case   13:*/		return 0x821388CC;
		  /* 821388CCh */ case   14:  		/* lwz R9, <#[R25 + 20]> */
		/* 821388CCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000014) );
		/* 821388CCh case   14:*/		return 0x821388D0;
		  /* 821388D0h */ case   15:  		/* add R31, R6, R11 */
		/* 821388D0h case   15:*/		cpu::op::add<0>(regs,&regs.R31,regs.R6,regs.R11);
		/* 821388D0h case   15:*/		return 0x821388D4;
		  /* 821388D4h */ case   16:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 821388D4h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 821388D4h case   16:*/		return 0x821388D8;
		  /* 821388D8h */ case   17:  		/* lwzx R31, <#[R31 + R10]> */
		/* 821388D8h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 821388D8h case   17:*/		return 0x821388DC;
		  /* 821388DCh */ case   18:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 821388DCh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 821388DCh case   18:*/		return 0x821388E0;
		  /* 821388E0h */ case   19:  		/* lwzx R31, <#[R31 + R9]> */
		/* 821388E0h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 821388E0h case   19:*/		return 0x821388E4;
		  /* 821388E4h */ case   20:  		/* lwz R31, <#[R31 + 16]> */
		/* 821388E4h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 821388E4h case   20:*/		return 0x821388E8;
		  /* 821388E8h */ case   21:  		/* cmplw CR6, R31, R11 */
		/* 821388E8h case   21:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821388E8h case   21:*/		return 0x821388EC;
		  /* 821388ECh */ case   22:  		/* bc 4, CR6_EQ, 200 */
		/* 821388ECh case   22:*/		if ( !regs.CR[6].eq ) { return 0x821389B4;  }
		/* 821388ECh case   22:*/		return 0x821388F0;
		  /* 821388F0h */ case   23:  		/* addi R11, R11, 1 */
		/* 821388F0h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821388F0h case   23:*/		return 0x821388F4;
		  /* 821388F4h */ case   24:  		/* cmplw CR6, R11, R7 */
		/* 821388F4h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821388F4h case   24:*/		return 0x821388F8;
		  /* 821388F8h */ case   25:  		/* bc 12, CR6_LT, -40 */
		/* 821388F8h case   25:*/		if ( regs.CR[6].lt ) { return 0x821388D0;  }
		/* 821388F8h case   25:*/		return 0x821388FC;
	}
	return 0x821388FC;
} // Block from 82138894h-821388FCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 821388FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821388FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821388FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821388FC);
		  /* 821388FCh */ case    0:  		/* addi R3, R3, 1 */
		/* 821388FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 821388FCh case    0:*/		return 0x82138900;
		  /* 82138900h */ case    1:  		/* add R6, R6, R7 */
		/* 82138900h case    1:*/		cpu::op::add<0>(regs,&regs.R6,regs.R6,regs.R7);
		/* 82138900h case    1:*/		return 0x82138904;
		  /* 82138904h */ case    2:  		/* cmplw CR6, R3, R23 */
		/* 82138904h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R23);
		/* 82138904h case    2:*/		return 0x82138908;
		  /* 82138908h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 82138908h case    3:*/		if ( regs.CR[6].lt ) { return 0x821388BC;  }
		/* 82138908h case    3:*/		return 0x8213890C;
	}
	return 0x8213890C;
} // Block from 821388FCh-8213890Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213890Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213890C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213890C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213890C);
		  /* 8213890Ch */ case    0:  		/* mr R24, R29 */
		/* 8213890Ch case    0:*/		regs.R24 = regs.R29;
		/* 8213890Ch case    0:*/		return 0x82138910;
		  /* 82138910h */ case    1:  		/* mr R28, R29 */
		/* 82138910h case    1:*/		regs.R28 = regs.R29;
		/* 82138910h case    1:*/		return 0x82138914;
		  /* 82138914h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 82138914h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82138914h case    2:*/		return 0x82138918;
		  /* 82138918h */ case    3:  		/* bc 12, CR6_EQ, 228 */
		/* 82138918h case    3:*/		if ( regs.CR[6].eq ) { return 0x821389FC;  }
		/* 82138918h case    3:*/		return 0x8213891C;
		  /* 8213891Ch */ case    4:  		/* mr R30, R29 */
		/* 8213891Ch case    4:*/		regs.R30 = regs.R29;
		/* 8213891Ch case    4:*/		return 0x82138920;
		  /* 82138920h */ case    5:  		/* mr R31, R29 */
		/* 82138920h case    5:*/		regs.R31 = regs.R29;
		/* 82138920h case    5:*/		return 0x82138924;
		  /* 82138924h */ case    6:  		/* rlwinm R26, R7, 2, 0, 29 */
		/* 82138924h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R7);
		/* 82138924h case    6:*/		return 0x82138928;
		  /* 82138928h */ case    7:  		/* lwz R11, <#[R27 + 8]> */
		/* 82138928h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82138928h case    7:*/		return 0x8213892C;
		  /* 8213892Ch */ case    8:  		/* mr R3, R25 */
		/* 8213892Ch case    8:*/		regs.R3 = regs.R25;
		/* 8213892Ch case    8:*/		return 0x82138930;
		  /* 82138930h */ case    9:  		/* add R6, R31, R11 */
		/* 82138930h case    9:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R11);
		/* 82138930h case    9:*/		return 0x82138934;
		  /* 82138934h */ case   10:  		/* bl -564 */
		/* 82138934h case   10:*/		regs.LR = 0x82138938; return 0x82138700;
		/* 82138934h case   10:*/		return 0x82138938;
		  /* 82138938h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82138938h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82138938h case   11:*/		return 0x8213893C;
		  /* 8213893Ch */ case   12:  		/* bc 12, CR0_EQ, 172 */
		/* 8213893Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821389E8;  }
		/* 8213893Ch case   12:*/		return 0x82138940;
		  /* 82138940h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 82138940h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82138940h case   13:*/		return 0x82138944;
		  /* 82138944h */ case   14:  		/* cmpwi CR6, R8, 0 */
		/* 82138944h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82138944h case   14:*/		return 0x82138948;
		  /* 82138948h */ case   15:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82138948h case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82138948h case   15:*/		return 0x8213894C;
		  /* 8213894Ch */ case   16:  		/* bc 12, CR6_EQ, 112 */
		/* 8213894Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821389BC;  }
		/* 8213894Ch case   16:*/		return 0x82138950;
		  /* 82138950h */ case   17:  		/* lis R10, 24576 */
		/* 82138950h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 82138950h case   17:*/		return 0x82138954;
		  /* 82138954h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 82138954h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138954h case   18:*/		return 0x82138958;
		  /* 82138958h */ case   19:  		/* bc 12, CR6_EQ, 40 */
		/* 82138958h case   19:*/		if ( regs.CR[6].eq ) { return 0x82138980;  }
		/* 82138958h case   19:*/		return 0x8213895C;
		  /* 8213895Ch */ case   20:  		/* lis R10, 24656 */
		/* 8213895Ch case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 8213895Ch case   20:*/		return 0x82138960;
		  /* 82138960h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 82138960h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138960h case   21:*/		return 0x82138964;
		  /* 82138964h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 82138964h case   22:*/		if ( regs.CR[6].eq ) { return 0x82138980;  }
		/* 82138964h case   22:*/		return 0x82138968;
		  /* 82138968h */ case   23:  		/* lis R10, 24736 */
		/* 82138968h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 82138968h case   23:*/		return 0x8213896C;
		  /* 8213896Ch */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 8213896Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213896Ch case   24:*/		return 0x82138970;
		  /* 82138970h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 82138970h case   25:*/		if ( regs.CR[6].eq ) { return 0x82138980;  }
		/* 82138970h case   25:*/		return 0x82138974;
		  /* 82138974h */ case   26:  		/* lis R10, 24816 */
		/* 82138974h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 82138974h case   26:*/		return 0x82138978;
		  /* 82138978h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 82138978h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138978h case   27:*/		return 0x8213897C;
		  /* 8213897Ch */ case   28:  		/* bc 4, CR6_EQ, 108 */
		/* 8213897Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x821389E8;  }
		/* 8213897Ch case   28:*/		return 0x82138980;
	}
	return 0x82138980;
} // Block from 8213890Ch-82138980h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82138980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138980);
		  /* 82138980h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 82138980h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82138980h case    0:*/		return 0x82138984;
		  /* 82138984h */ case    1:  		/* bc 4, CR6_EQ, 132 */
		/* 82138984h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82138A08;  }
		/* 82138984h case    1:*/		return 0x82138988;
		  /* 82138988h */ case    2:  		/* stw R3, <#[R21]> */
		/* 82138988h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + 0x00000000) );
		/* 82138988h case    2:*/		return 0x8213898C;
		  /* 8213898Ch */ case    3:  		/* li R24, 1 */
		/* 8213898Ch case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8213898Ch case    3:*/		return 0x82138990;
		  /* 82138990h */ case    4:  		/* stw R30, <#[R22]> */
		/* 82138990h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R22 + 0x00000000) );
		/* 82138990h case    4:*/		return 0x82138994;
		  /* 82138994h */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 82138994h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82138994h case    5:*/		return 0x82138998;
		  /* 82138998h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 82138998h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821389C4;  }
		/* 82138998h case    6:*/		return 0x8213899C;
		  /* 8213899Ch */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 8213899Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8213899Ch case    7:*/		return 0x821389A0;
		  /* 821389A0h */ case    8:  		/* lwz R10, <#[R25 + 20]> */
		/* 821389A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821389A0h case    8:*/		return 0x821389A4;
		  /* 821389A4h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821389A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821389A4h case    9:*/		return 0x821389A8;
		  /* 821389A8h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821389A8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821389A8h case   10:*/		return 0x821389AC;
		  /* 821389ACh */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821389ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821389ACh case   11:*/		return 0x821389B0;
		  /* 821389B0h */ case   12:  		/* b 48 */
		/* 821389B0h case   12:*/		return 0x821389E0;
		/* 821389B0h case   12:*/		return 0x821389B4;
	}
	return 0x821389B4;
} // Block from 82138980h-821389B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821389B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389B4);
		  /* 821389B4h */ case    0:  		/* li R3, 1 */
		/* 821389B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821389B4h case    0:*/		return 0x821389B8;
		  /* 821389B8h */ case    1:  		/* b 72 */
		/* 821389B8h case    1:*/		return 0x82138A00;
		/* 821389B8h case    1:*/		return 0x821389BC;
	}
	return 0x821389BC;
} // Block from 821389B4h-821389BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821389BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389BC);
		  /* 821389BCh */ case    0:  		/* lis R10, 29200 */
		/* 821389BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 821389BCh case    0:*/		return 0x821389C0;
		  /* 821389C0h */ case    1:  		/* b -72 */
		/* 821389C0h case    1:*/		return 0x82138978;
		/* 821389C0h case    1:*/		return 0x821389C4;
	}
	return 0x821389C4;
} // Block from 821389BCh-821389C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821389C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389C4);
		  /* 821389C4h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821389C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821389C4h case    0:*/		return 0x821389C8;
		  /* 821389C8h */ case    1:  		/* lwz R10, <#[R3 + 8]> */
		/* 821389C8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821389C8h case    1:*/		return 0x821389CC;
		  /* 821389CCh */ case    2:  		/* rlwinm R11, R11, 2, 10, 29 */
		/* 821389CCh case    2:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R11,regs.R11);
		/* 821389CCh case    2:*/		return 0x821389D0;
		  /* 821389D0h */ case    3:  		/* lwz R9, <#[R25 + 20]> */
		/* 821389D0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000014) );
		/* 821389D0h case    3:*/		return 0x821389D4;
		  /* 821389D4h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821389D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821389D4h case    4:*/		return 0x821389D8;
		  /* 821389D8h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821389D8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821389D8h case    5:*/		return 0x821389DC;
		  /* 821389DCh */ case    6:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821389DCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821389DCh case    6:*/		return 0x821389E0;
	}
	return 0x821389E0;
} // Block from 821389C4h-821389E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821389E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389E0);
		  /* 821389E0h */ case    0:  		/* lbz R11, <#[R11 + 110]> */
		/* 821389E0h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006E) );
		/* 821389E0h case    0:*/		return 0x821389E4;
		  /* 821389E4h */ case    1:  		/* stw R11, <#[R20]> */
		/* 821389E4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821389E4h case    1:*/		return 0x821389E8;
	}
	return 0x821389E8;
} // Block from 821389E0h-821389E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821389E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389E8);
		  /* 821389E8h */ case    0:  		/* addi R28, R28, 1 */
		/* 821389E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821389E8h case    0:*/		return 0x821389EC;
		  /* 821389ECh */ case    1:  		/* add R30, R30, R7 */
		/* 821389ECh case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R30,regs.R7);
		/* 821389ECh case    1:*/		return 0x821389F0;
		  /* 821389F0h */ case    2:  		/* add R31, R26, R31 */
		/* 821389F0h case    2:*/		cpu::op::add<0>(regs,&regs.R31,regs.R26,regs.R31);
		/* 821389F0h case    2:*/		return 0x821389F4;
		  /* 821389F4h */ case    3:  		/* cmplw CR6, R28, R23 */
		/* 821389F4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R23);
		/* 821389F4h case    3:*/		return 0x821389F8;
		  /* 821389F8h */ case    4:  		/* bc 12, CR6_LT, -208 */
		/* 821389F8h case    4:*/		if ( regs.CR[6].lt ) { return 0x82138928;  }
		/* 821389F8h case    4:*/		return 0x821389FC;
	}
	return 0x821389FC;
} // Block from 821389E8h-821389FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821389FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821389FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821389FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821389FC);
		  /* 821389FCh */ case    0:  		/* li R3, 0 */
		/* 821389FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821389FCh case    0:*/		return 0x82138A00;
	}
	return 0x82138A00;
} // Block from 821389FCh-82138A00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82138A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138A00);
		  /* 82138A00h */ case    0:  		/* addi R1, R1, 192 */
		/* 82138A00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82138A00h case    0:*/		return 0x82138A04;
		  /* 82138A04h */ case    1:  		/* b -685948 */
		/* 82138A04h case    1:*/		return 0x82091288;
		/* 82138A04h case    1:*/		return 0x82138A08;
	}
	return 0x82138A08;
} // Block from 82138A00h-82138A08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82138A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138A08);
		  /* 82138A08h */ case    0:  		/* stw R29, <#[R22]> */
		/* 82138A08h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R22 + 0x00000000) );
		/* 82138A08h case    0:*/		return 0x82138A0C;
		  /* 82138A0Ch */ case    1:  		/* li R3, 1 */
		/* 82138A0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82138A0Ch case    1:*/		return 0x82138A10;
		  /* 82138A10h */ case    2:  		/* stw R29, <#[R20]> */
		/* 82138A10h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 82138A10h case    2:*/		return 0x82138A14;
		  /* 82138A14h */ case    3:  		/* stw R29, <#[R21]> */
		/* 82138A14h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R21 + 0x00000000) );
		/* 82138A14h case    3:*/		return 0x82138A18;
		  /* 82138A18h */ case    4:  		/* b -24 */
		/* 82138A18h case    4:*/		return 0x82138A00;
		/* 82138A18h case    4:*/		return 0x82138A1C;
		  /* 82138A1Ch */ case    5:  		/* nop */
		/* 82138A1Ch case    5:*/		cpu::op::nop();
		/* 82138A1Ch case    5:*/		return 0x82138A20;
	}
	return 0x82138A20;
} // Block from 82138A08h-82138A20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138A20);
		  /* 82138A20h */ case    0:  		/* mfspr R12, LR */
		/* 82138A20h case    0:*/		regs.R12 = regs.LR;
		/* 82138A20h case    0:*/		return 0x82138A24;
		  /* 82138A24h */ case    1:  		/* bl -686084 */
		/* 82138A24h case    1:*/		regs.LR = 0x82138A28; return 0x82091220;
		/* 82138A24h case    1:*/		return 0x82138A28;
		  /* 82138A28h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82138A28h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82138A28h case    2:*/		return 0x82138A2C;
		  /* 82138A2Ch */ case    3:  		/* stwu R1, <#[R1 - 304]> */
		/* 82138A2Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 82138A2Ch case    3:*/		return 0x82138A30;
		  /* 82138A30h */ case    4:  		/* li R16, 0 */
		/* 82138A30h case    4:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 82138A30h case    4:*/		return 0x82138A34;
		  /* 82138A34h */ case    5:  		/* stw R4, <#[R1 + 332]> */
		/* 82138A34h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000014C) );
		/* 82138A34h case    5:*/		return 0x82138A38;
		  /* 82138A38h */ case    6:  		/* mr R27, R3 */
		/* 82138A38h case    6:*/		regs.R27 = regs.R3;
		/* 82138A38h case    6:*/		return 0x82138A3C;
		  /* 82138A3Ch */ case    7:  		/* stw R5, <#[R1 + 340]> */
		/* 82138A3Ch case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000154) );
		/* 82138A3Ch case    7:*/		return 0x82138A40;
		  /* 82138A40h */ case    8:  		/* mr R14, R4 */
		/* 82138A40h case    8:*/		regs.R14 = regs.R4;
		/* 82138A40h case    8:*/		return 0x82138A44;
		  /* 82138A44h */ case    9:  		/* stw R16, <#[R1 + 108]> */
		/* 82138A44h case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138A44h case    9:*/		return 0x82138A48;
		  /* 82138A48h */ case   10:  		/* mr R24, R5 */
		/* 82138A48h case   10:*/		regs.R24 = regs.R5;
		/* 82138A48h case   10:*/		return 0x82138A4C;
		  /* 82138A4Ch */ case   11:  		/* mr R18, R6 */
		/* 82138A4Ch case   11:*/		regs.R18 = regs.R6;
		/* 82138A4Ch case   11:*/		return 0x82138A50;
		  /* 82138A50h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 82138A50h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82138A50h case   12:*/		return 0x82138A54;
		  /* 82138A54h */ case   13:  		/* mr R21, R16 */
		/* 82138A54h case   13:*/		regs.R21 = regs.R16;
		/* 82138A54h case   13:*/		return 0x82138A58;
		  /* 82138A58h */ case   14:  		/* mr R15, R16 */
		/* 82138A58h case   14:*/		regs.R15 = regs.R16;
		/* 82138A58h case   14:*/		return 0x82138A5C;
		  /* 82138A5Ch */ case   15:  		/* bc 12, CR6_EQ, 1304 */
		/* 82138A5Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82138F74;  }
		/* 82138A5Ch case   15:*/		return 0x82138A60;
		  /* 82138A60h */ case   16:  		/* lis R11, -32256 */
		/* 82138A60h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82138A60h case   16:*/		return 0x82138A64;
		  /* 82138A64h */ case   17:  		/* mr R19, R4 */
		/* 82138A64h case   17:*/		regs.R19 = regs.R4;
		/* 82138A64h case   17:*/		return 0x82138A68;
		  /* 82138A68h */ case   18:  		/* li R17, 1 */
		/* 82138A68h case   18:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 82138A68h case   18:*/		return 0x82138A6C;
		  /* 82138A6Ch */ case   19:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82138A6Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82138A6Ch case   19:*/		return 0x82138A70;
		  /* 82138A70h */ case   20:  		/* lwz R31, <#[R19]> */
		/* 82138A70h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R19 + 0x00000000) );
		/* 82138A70h case   20:*/		return 0x82138A74;
		  /* 82138A74h */ case   21:  		/* mr R28, R16 */
		/* 82138A74h case   21:*/		regs.R28 = regs.R16;
		/* 82138A74h case   21:*/		return 0x82138A78;
		  /* 82138A78h */ case   22:  		/* mr R26, R16 */
		/* 82138A78h case   22:*/		regs.R26 = regs.R16;
		/* 82138A78h case   22:*/		return 0x82138A7C;
		  /* 82138A7Ch */ case   23:  		/* cmplwi CR6, R31, 0 */
		/* 82138A7Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82138A7Ch case   23:*/		return 0x82138A80;
		  /* 82138A80h */ case   24:  		/* bc 12, CR6_EQ, 1248 */
		/* 82138A80h case   24:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138A80h case   24:*/		return 0x82138A84;
		  /* 82138A84h */ case   25:  		/* lwz R29, <#[R31]> */
		/* 82138A84h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82138A84h case   25:*/		return 0x82138A88;
		  /* 82138A88h */ case   26:  		/* li R10, 1 */
		/* 82138A88h case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82138A88h case   26:*/		return 0x82138A8C;
		  /* 82138A8Ch */ case   27:  		/* addi R9, R1, 96 */
		/* 82138A8Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82138A8Ch case   27:*/		return 0x82138A90;
		  /* 82138A90h */ case   28:  		/* stw R17, <#[R1 + 84]> */
		/* 82138A90h case   28:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 82138A90h case   28:*/		return 0x82138A94;
		  /* 82138A94h */ case   29:  		/* addi R8, R1, 104 */
		/* 82138A94h case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 82138A94h case   29:*/		return 0x82138A98;
		  /* 82138A98h */ case   30:  		/* addi R7, R1, 100 */
		/* 82138A98h case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x64);
		/* 82138A98h case   30:*/		return 0x82138A9C;
		  /* 82138A9Ch */ case   31:  		/* mr R6, R31 */
		/* 82138A9Ch case   31:*/		regs.R6 = regs.R31;
		/* 82138A9Ch case   31:*/		return 0x82138AA0;
		  /* 82138AA0h */ case   32:  		/* li R5, 4 */
		/* 82138AA0h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82138AA0h case   32:*/		return 0x82138AA4;
		  /* 82138AA4h */ case   33:  		/* mr R4, R18 */
		/* 82138AA4h case   33:*/		regs.R4 = regs.R18;
		/* 82138AA4h case   33:*/		return 0x82138AA8;
		  /* 82138AA8h */ case   34:  		/* mr R3, R27 */
		/* 82138AA8h case   34:*/		regs.R3 = regs.R27;
		/* 82138AA8h case   34:*/		return 0x82138AAC;
		  /* 82138AACh */ case   35:  		/* rlwinm R20, R29, 0, 12, 31 */
		/* 82138AACh case   35:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R20,regs.R29);
		/* 82138AACh case   35:*/		return 0x82138AB0;
		  /* 82138AB0h */ case   36:  		/* bl -616 */
		/* 82138AB0h case   36:*/		regs.LR = 0x82138AB4; return 0x82138848;
		/* 82138AB0h case   36:*/		return 0x82138AB4;
		  /* 82138AB4h */ case   37:  		/* lwz R25, <#[R1 + 96]> */
		/* 82138AB4h case   37:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000060) );
		/* 82138AB4h case   37:*/		return 0x82138AB8;
		  /* 82138AB8h */ case   38:  		/* cmplwi CR6, R25, 0 */
		/* 82138AB8h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82138AB8h case   38:*/		return 0x82138ABC;
		  /* 82138ABCh */ case   39:  		/* bc 4, CR6_EQ, 188 */
		/* 82138ABCh case   39:*/		if ( !regs.CR[6].eq ) { return 0x82138B78;  }
		/* 82138ABCh case   39:*/		return 0x82138AC0;
		  /* 82138AC0h */ case   40:  		/* cmplwi CR6, R20, 2 */
		/* 82138AC0h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 82138AC0h case   40:*/		return 0x82138AC4;
		  /* 82138AC4h */ case   41:  		/* bc 4, CR6_EQ, 1180 */
		/* 82138AC4h case   41:*/		if ( !regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138AC4h case   41:*/		return 0x82138AC8;
		  /* 82138AC8h */ case   42:  		/* lwz R11, <#[R31 + 8]> */
		/* 82138AC8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82138AC8h case   42:*/		return 0x82138ACC;
		  /* 82138ACCh */ case   43:  		/* li R8, 0 */
		/* 82138ACCh case   43:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82138ACCh case   43:*/		return 0x82138AD0;
		  /* 82138AD0h */ case   44:  		/* lwz R30, <#[R27 + 548]> */
		/* 82138AD0h case   44:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000224) );
		/* 82138AD0h case   44:*/		return 0x82138AD4;
		  /* 82138AD4h */ case   45:  		/* li R7, 1 */
		/* 82138AD4h case   45:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82138AD4h case   45:*/		return 0x82138AD8;
		  /* 82138AD8h */ case   46:  		/* lwz R26, <#[R27 + 560]> */
		/* 82138AD8h case   46:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x00000230) );
		/* 82138AD8h case   46:*/		return 0x82138ADC;
		  /* 82138ADCh */ case   47:  		/* addi R6, R11, 8 */
		/* 82138ADCh case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x8);
		/* 82138ADCh case   47:*/		return 0x82138AE0;
		  /* 82138AE0h */ case   48:  		/* mr R5, R30 */
		/* 82138AE0h case   48:*/		regs.R5 = regs.R30;
		/* 82138AE0h case   48:*/		return 0x82138AE4;
		  /* 82138AE4h */ case   49:  		/* mr R4, R26 */
		/* 82138AE4h case   49:*/		regs.R4 = regs.R26;
		/* 82138AE4h case   49:*/		return 0x82138AE8;
		  /* 82138AE8h */ case   50:  		/* mr R3, R27 */
		/* 82138AE8h case   50:*/		regs.R3 = regs.R27;
		/* 82138AE8h case   50:*/		return 0x82138AEC;
		  /* 82138AECh */ case   51:  		/* bl -1004 */
		/* 82138AECh case   51:*/		regs.LR = 0x82138AF0; return 0x82138700;
		/* 82138AECh case   51:*/		return 0x82138AF0;
		  /* 82138AF0h */ case   52:  		/* mr R28, R3 */
		/* 82138AF0h case   52:*/		regs.R28 = regs.R3;
		/* 82138AF0h case   52:*/		return 0x82138AF4;
		  /* 82138AF4h */ case   53:  		/* addi R6, R6, 4 */
		/* 82138AF4h case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82138AF4h case   53:*/		return 0x82138AF8;
		  /* 82138AF8h */ case   54:  		/* mr R3, R27 */
		/* 82138AF8h case   54:*/		regs.R3 = regs.R27;
		/* 82138AF8h case   54:*/		return 0x82138AFC;
		  /* 82138AFCh */ case   55:  		/* bl -1020 */
		/* 82138AFCh case   55:*/		regs.LR = 0x82138B00; return 0x82138700;
		/* 82138AFCh case   55:*/		return 0x82138B00;
		  /* 82138B00h */ case   56:  		/* mr R26, R3 */
		/* 82138B00h case   56:*/		regs.R26 = regs.R3;
		/* 82138B00h case   56:*/		return 0x82138B04;
		  /* 82138B04h */ case   57:  		/* cmplwi CR6, R28, 0 */
		/* 82138B04h case   57:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82138B04h case   57:*/		return 0x82138B08;
		  /* 82138B08h */ case   58:  		/* bc 12, CR6_EQ, 1112 */
		/* 82138B08h case   58:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B08h case   58:*/		return 0x82138B0C;
		  /* 82138B0Ch */ case   59:  		/* cmplwi CR6, R3, 0 */
		/* 82138B0Ch case   59:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82138B0Ch case   59:*/		return 0x82138B10;
		  /* 82138B10h */ case   60:  		/* bc 12, CR6_EQ, 1104 */
		/* 82138B10h case   60:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B10h case   60:*/		return 0x82138B14;
		  /* 82138B14h */ case   61:  		/* li R10, 1 */
		/* 82138B14h case   61:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82138B14h case   61:*/		return 0x82138B18;
		  /* 82138B18h */ case   62:  		/* stw R17, <#[R1 + 84]> */
		/* 82138B18h case   62:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 82138B18h case   62:*/		return 0x82138B1C;
		  /* 82138B1Ch */ case   63:  		/* addi R9, R1, 112 */
		/* 82138B1Ch case   63:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82138B1Ch case   63:*/		return 0x82138B20;
		  /* 82138B20h */ case   64:  		/* addi R8, R1, 104 */
		/* 82138B20h case   64:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 82138B20h case   64:*/		return 0x82138B24;
		  /* 82138B24h */ case   65:  		/* addi R7, R1, 100 */
		/* 82138B24h case   65:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x64);
		/* 82138B24h case   65:*/		return 0x82138B28;
		  /* 82138B28h */ case   66:  		/* mr R6, R28 */
		/* 82138B28h case   66:*/		regs.R6 = regs.R28;
		/* 82138B28h case   66:*/		return 0x82138B2C;
		  /* 82138B2Ch */ case   67:  		/* li R5, 4 */
		/* 82138B2Ch case   67:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82138B2Ch case   67:*/		return 0x82138B30;
		  /* 82138B30h */ case   68:  		/* mr R4, R18 */
		/* 82138B30h case   68:*/		regs.R4 = regs.R18;
		/* 82138B30h case   68:*/		return 0x82138B34;
		  /* 82138B34h */ case   69:  		/* mr R3, R27 */
		/* 82138B34h case   69:*/		regs.R3 = regs.R27;
		/* 82138B34h case   69:*/		return 0x82138B38;
		  /* 82138B38h */ case   70:  		/* bl -752 */
		/* 82138B38h case   70:*/		regs.LR = 0x82138B3C; return 0x82138848;
		/* 82138B38h case   70:*/		return 0x82138B3C;
		  /* 82138B3Ch */ case   71:  		/* lwz R30, <#[R1 + 112]> */
		/* 82138B3Ch case   71:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 82138B3Ch case   71:*/		return 0x82138B40;
		  /* 82138B40h */ case   72:  		/* cmplwi CR6, R30, 0 */
		/* 82138B40h case   72:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82138B40h case   72:*/		return 0x82138B44;
		  /* 82138B44h */ case   73:  		/* bc 12, CR6_EQ, 1052 */
		/* 82138B44h case   73:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B44h case   73:*/		return 0x82138B48;
		  /* 82138B48h */ case   74:  		/* li R10, 1 */
		/* 82138B48h case   74:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82138B48h case   74:*/		return 0x82138B4C;
		  /* 82138B4Ch */ case   75:  		/* stw R17, <#[R1 + 84]> */
		/* 82138B4Ch case   75:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 82138B4Ch case   75:*/		return 0x82138B50;
		  /* 82138B50h */ case   76:  		/* addi R9, R1, 96 */
		/* 82138B50h case   76:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82138B50h case   76:*/		return 0x82138B54;
		  /* 82138B54h */ case   77:  		/* addi R8, R1, 104 */
		/* 82138B54h case   77:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 82138B54h case   77:*/		return 0x82138B58;
		  /* 82138B58h */ case   78:  		/* addi R7, R1, 100 */
		/* 82138B58h case   78:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x64);
		/* 82138B58h case   78:*/		return 0x82138B5C;
		  /* 82138B5Ch */ case   79:  		/* mr R6, R26 */
		/* 82138B5Ch case   79:*/		regs.R6 = regs.R26;
		/* 82138B5Ch case   79:*/		return 0x82138B60;
		  /* 82138B60h */ case   80:  		/* mr R3, R27 */
		/* 82138B60h case   80:*/		regs.R3 = regs.R27;
		/* 82138B60h case   80:*/		return 0x82138B64;
		  /* 82138B64h */ case   81:  		/* bl -796 */
		/* 82138B64h case   81:*/		regs.LR = 0x82138B68; return 0x82138848;
		/* 82138B64h case   81:*/		return 0x82138B68;
		  /* 82138B68h */ case   82:  		/* lwz R25, <#[R1 + 96]> */
		/* 82138B68h case   82:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000060) );
		/* 82138B68h case   82:*/		return 0x82138B6C;
		  /* 82138B6Ch */ case   83:  		/* cmplw CR6, R30, R25 */
		/* 82138B6Ch case   83:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 82138B6Ch case   83:*/		return 0x82138B70;
		  /* 82138B70h */ case   84:  		/* bc 4, CR6_EQ, 1008 */
		/* 82138B70h case   84:*/		if ( !regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B70h case   84:*/		return 0x82138B74;
		  /* 82138B74h */ case   85:  		/* b 12 */
		/* 82138B74h case   85:*/		return 0x82138B80;
		/* 82138B74h case   85:*/		return 0x82138B78;
	}
	return 0x82138B78;
} // Block from 82138A20h-82138B78h (86 instructions)

//////////////////////////////////////////////////////
// Block at 82138B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138B78);
		  /* 82138B78h */ case    0:  		/* cmplwi CR6, R20, 2 */
		/* 82138B78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 82138B78h case    0:*/		return 0x82138B7C;
		  /* 82138B7Ch */ case    1:  		/* bc 12, CR6_EQ, 996 */
		/* 82138B7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B7Ch case    1:*/		return 0x82138B80;
	}
	return 0x82138B80;
} // Block from 82138B78h-82138B80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82138B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138B80);
		  /* 82138B80h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82138B80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82138B80h case    0:*/		return 0x82138B84;
		  /* 82138B84h */ case    1:  		/* bc 12, CR6_EQ, 988 */
		/* 82138B84h case    1:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138B84h case    1:*/		return 0x82138B88;
		  /* 82138B88h */ case    2:  		/* mr R21, R16 */
		/* 82138B88h case    2:*/		regs.R21 = regs.R16;
		/* 82138B88h case    2:*/		return 0x82138B8C;
		  /* 82138B8Ch */ case    3:  		/* cmplwi CR6, R20, 3 */
		/* 82138B8Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000003);
		/* 82138B8Ch case    3:*/		return 0x82138B90;
		  /* 82138B90h */ case    4:  		/* bc 4, CR6_EQ, 204 */
		/* 82138B90h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82138C5C;  }
		/* 82138B90h case    4:*/		return 0x82138B94;
		  /* 82138B94h */ case    5:  		/* rlwinm R11, R29, 0, 0, 11 */
		/* 82138B94h case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R29);
		/* 82138B94h case    5:*/		return 0x82138B98;
		  /* 82138B98h */ case    6:  		/* lis R10, 24816 */
		/* 82138B98h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 82138B98h case    6:*/		return 0x82138B9C;
		  /* 82138B9Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 82138B9Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138B9Ch case    7:*/		return 0x82138BA0;
		  /* 82138BA0h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82138BA0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82138BB0;  }
		/* 82138BA0h case    8:*/		return 0x82138BA4;
		  /* 82138BA4h */ case    9:  		/* lis R10, 24736 */
		/* 82138BA4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 82138BA4h case    9:*/		return 0x82138BA8;
		  /* 82138BA8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82138BA8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138BA8h case   10:*/		return 0x82138BAC;
		  /* 82138BACh */ case   11:  		/* bc 4, CR6_EQ, 948 */
		/* 82138BACh case   11:*/		if ( !regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138BACh case   11:*/		return 0x82138BB0;
	}
	return 0x82138BB0;
} // Block from 82138B80h-82138BB0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82138BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138BB0);
		  /* 82138BB0h */ case    0:  		/* lwz R7, <#[R31 + 8]> */
		/* 82138BB0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 82138BB0h case    0:*/		return 0x82138BB4;
		  /* 82138BB4h */ case    1:  		/* mr R10, R17 */
		/* 82138BB4h case    1:*/		regs.R10 = regs.R17;
		/* 82138BB4h case    1:*/		return 0x82138BB8;
		  /* 82138BB8h */ case    2:  		/* lwz R6, <#[R27 + 20]> */
		/* 82138BB8h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000014) );
		/* 82138BB8h case    2:*/		return 0x82138BBC;
		  /* 82138BBCh */ case    3:  		/* mr R9, R16 */
		/* 82138BBCh case    3:*/		regs.R9 = regs.R16;
		/* 82138BBCh case    3:*/		return 0x82138BC0;
		  /* 82138BC0h */ case    4:  		/* li R11, 12 */
		/* 82138BC0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 82138BC0h case    4:*/		return 0x82138BC4;
		  /* 82138BC4h */ case    5:  		/* lwzx R8, <#[R11 + R7]> */
		/* 82138BC4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82138BC4h case    5:*/		return 0x82138BC8;
		  /* 82138BC8h */ case    6:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82138BC8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82138BC8h case    6:*/		return 0x82138BCC;
		  /* 82138BCCh */ case    7:  		/* lwzx R8, <#[R8 + R6]> */
		/* 82138BCCh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R6 + 0x00000000) );
		/* 82138BCCh case    7:*/		return 0x82138BD0;
		  /* 82138BD0h */ case    8:  		/* lwz R5, <#[R8 + 16]> */
		/* 82138BD0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000010) );
		/* 82138BD0h case    8:*/		return 0x82138BD4;
		  /* 82138BD4h */ case    9:  		/* lwz R8, <#[R8 + 60]> */
		/* 82138BD4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000003C) );
		/* 82138BD4h case    9:*/		return 0x82138BD8;
		  /* 82138BD8h */ case   10:  		/* subf R5, R5, R9 */
		/* 82138BD8h case   10:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 82138BD8h case   10:*/		return 0x82138BDC;
		  /* 82138BDCh */ case   11:  		/* cmplwi CR6, R8, 0 */
		/* 82138BDCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82138BDCh case   11:*/		return 0x82138BE0;
		  /* 82138BE0h */ case   12:  		/* addic R5, R5, -1 */
		/* 82138BE0h case   12:*/		cpu::op::addic<0>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 82138BE0h case   12:*/		return 0x82138BE4;
		  /* 82138BE4h */ case   13:  		/* subfe R5, R5, R5 */
		/* 82138BE4h case   13:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R5,regs.R5);
		/* 82138BE4h case   13:*/		return 0x82138BE8;
		  /* 82138BE8h */ case   14:  		/* and R10, R5, R10 */
		/* 82138BE8h case   14:*/		cpu::op::and<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 82138BE8h case   14:*/		return 0x82138BEC;
		  /* 82138BECh */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 82138BECh case   15:*/		if ( regs.CR[6].eq ) { return 0x82138BFC;  }
		/* 82138BECh case   15:*/		return 0x82138BF0;
		  /* 82138BF0h */ case   16:  		/* lis R5, 6 */
		/* 82138BF0h case   16:*/		cpu::op::lis<0>(regs,&regs.R5,0x6);
		/* 82138BF0h case   16:*/		return 0x82138BF4;
		  /* 82138BF4h */ case   17:  		/* cmplw CR6, R8, R5 */
		/* 82138BF4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R5);
		/* 82138BF4h case   17:*/		return 0x82138BF8;
		  /* 82138BF8h */ case   18:  		/* bc 4, CR6_EQ, 936 */
		/* 82138BF8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82138FA0;  }
		/* 82138BF8h case   18:*/		return 0x82138BFC;
	}
	return 0x82138BFC;
} // Block from 82138BB0h-82138BFCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 82138BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138BFC);
		  /* 82138BFCh */ case    0:  		/* addi R11, R11, 4 */
		/* 82138BFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82138BFCh case    0:*/		return 0x82138C00;
		  /* 82138C00h */ case    1:  		/* addi R9, R9, 1 */
		/* 82138C00h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82138C00h case    1:*/		return 0x82138C04;
		  /* 82138C04h */ case    2:  		/* cmplwi CR6, R11, 24 */
		/* 82138C04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 82138C04h case    2:*/		return 0x82138C08;
		  /* 82138C08h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 82138C08h case    3:*/		if ( regs.CR[6].lt ) { return 0x82138BC4;  }
		/* 82138C08h case    3:*/		return 0x82138C0C;
		  /* 82138C0Ch */ case    4:  		/* cmpwi CR6, R10, 0 */
		/* 82138C0Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82138C0Ch case    4:*/		return 0x82138C10;
		  /* 82138C10h */ case    5:  		/* bc 12, CR6_EQ, 848 */
		/* 82138C10h case    5:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138C10h case    5:*/		return 0x82138C14;
		  /* 82138C14h */ case    6:  		/* lwz R11, <#[R27 + 200]> */
		/* 82138C14h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C8) );
		/* 82138C14h case    6:*/		return 0x82138C18;
		  /* 82138C18h */ case    7:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 82138C18h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 82138C18h case    7:*/		return 0x82138C1C;
		  /* 82138C1Ch */ case    8:  		/* cmplwi CR6, R10, 258 */
		/* 82138C1Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000102);
		/* 82138C1Ch case    8:*/		return 0x82138C20;
		  /* 82138C20h */ case    9:  		/* bc 12, CR6_LT, 940 */
		/* 82138C20h case    9:*/		if ( regs.CR[6].lt ) { return 0x82138FCC;  }
		/* 82138C20h case    9:*/		return 0x82138C24;
		  /* 82138C24h */ case   10:  		/* li R3, 116 */
		/* 82138C24h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82138C24h case   10:*/		return 0x82138C28;
		  /* 82138C28h */ case   11:  		/* bl -247440 */
		/* 82138C28h case   11:*/		regs.LR = 0x82138C2C; return 0x820FC598;
		/* 82138C28h case   11:*/		return 0x82138C2C;
		  /* 82138C2Ch */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82138C2Ch case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82138C2Ch case   12:*/		return 0x82138C30;
		  /* 82138C30h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82138C30h case   13:*/		if ( regs.CR[0].eq ) { return 0x82138C40;  }
		/* 82138C30h case   13:*/		return 0x82138C34;
		  /* 82138C34h */ case   14:  		/* bl -249236 */
		/* 82138C34h case   14:*/		regs.LR = 0x82138C38; return 0x820FBEA0;
		/* 82138C34h case   14:*/		return 0x82138C38;
		  /* 82138C38h */ case   15:  		/* mr R21, R3 */
		/* 82138C38h case   15:*/		regs.R21 = regs.R3;
		/* 82138C38h case   15:*/		return 0x82138C3C;
		  /* 82138C3Ch */ case   16:  		/* b 8 */
		/* 82138C3Ch case   16:*/		return 0x82138C44;
		/* 82138C3Ch case   16:*/		return 0x82138C40;
	}
	return 0x82138C40;
} // Block from 82138BFCh-82138C40h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82138C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138C40);
		  /* 82138C40h */ case    0:  		/* mr R21, R16 */
		/* 82138C40h case    0:*/		regs.R21 = regs.R16;
		/* 82138C40h case    0:*/		return 0x82138C44;
	}
	return 0x82138C44;
} // Block from 82138C40h-82138C44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82138C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138C44);
		  /* 82138C44h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82138C44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82138C44h case    0:*/		return 0x82138C48;
		  /* 82138C48h */ case    1:  		/* bc 12, CR6_EQ, 952 */
		/* 82138C48h case    1:*/		if ( regs.CR[6].eq ) { return 0x82139000;  }
		/* 82138C48h case    1:*/		return 0x82138C4C;
		  /* 82138C4Ch */ case    2:  		/* lis R4, 29280 */
		/* 82138C4Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x7260);
		/* 82138C4Ch case    2:*/		return 0x82138C50;
		  /* 82138C50h */ case    3:  		/* li R5, 6 */
		/* 82138C50h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82138C50h case    3:*/		return 0x82138C54;
		  /* 82138C54h */ case    4:  		/* ori R4, R4, 3 */
		/* 82138C54h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 82138C54h case    4:*/		return 0x82138C58;
		  /* 82138C58h */ case    5:  		/* b 260 */
		/* 82138C58h case    5:*/		return 0x82138D5C;
		/* 82138C58h case    5:*/		return 0x82138C5C;
	}
	return 0x82138C5C;
} // Block from 82138C44h-82138C5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138C5C);
		  /* 82138C5Ch */ case    0:  		/* cmplwi CR6, R20, 2 */
		/* 82138C5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 82138C5Ch case    0:*/		return 0x82138C60;
		  /* 82138C60h */ case    1:  		/* bc 4, CR6_EQ, 768 */
		/* 82138C60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138C60h case    1:*/		return 0x82138C64;
		  /* 82138C64h */ case    2:  		/* rlwinm R11, R29, 0, 0, 11 */
		/* 82138C64h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R29);
		/* 82138C64h case    2:*/		return 0x82138C68;
		  /* 82138C68h */ case    3:  		/* lis R10, 24656 */
		/* 82138C68h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 82138C68h case    3:*/		return 0x82138C6C;
		  /* 82138C6Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82138C6Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82138C6Ch case    4:*/		return 0x82138C70;
		  /* 82138C70h */ case    5:  		/* bc 4, CR6_EQ, 752 */
		/* 82138C70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138C70h case    5:*/		return 0x82138C74;
		  /* 82138C74h */ case    6:  		/* li R10, 2 */
		/* 82138C74h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82138C74h case    6:*/		return 0x82138C78;
		  /* 82138C78h */ case    7:  		/* stw R16, <#[R1 + 124]> */
		/* 82138C78h case    7:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000007C) );
		/* 82138C78h case    7:*/		return 0x82138C7C;
		  /* 82138C7Ch */ case    8:  		/* li R11, 3 */
		/* 82138C7Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82138C7Ch case    8:*/		return 0x82138C80;
		  /* 82138C80h */ case    9:  		/* stw R17, <#[R1 + 128]> */
		/* 82138C80h case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000080) );
		/* 82138C80h case    9:*/		return 0x82138C84;
		  /* 82138C84h */ case   10:  		/* stw R10, <#[R1 + 132]> */
		/* 82138C84h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 82138C84h case   10:*/		return 0x82138C88;
		  /* 82138C88h */ case   11:  		/* mr R9, R17 */
		/* 82138C88h case   11:*/		regs.R9 = regs.R17;
		/* 82138C88h case   11:*/		return 0x82138C8C;
		  /* 82138C8Ch */ case   12:  		/* stw R11, <#[R1 + 120]> */
		/* 82138C8Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 82138C8Ch case   12:*/		return 0x82138C90;
		  /* 82138C90h */ case   13:  		/* mr R31, R17 */
		/* 82138C90h case   13:*/		regs.R31 = regs.R17;
		/* 82138C90h case   13:*/		return 0x82138C94;
		  /* 82138C94h */ case   14:  		/* mr R10, R16 */
		/* 82138C94h case   14:*/		regs.R10 = regs.R16;
		/* 82138C94h case   14:*/		return 0x82138C98;
		  /* 82138C98h */ case   15:  		/* lwz R8, <#[R27 + 20]> */
		/* 82138C98h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000014) );
		/* 82138C98h case   15:*/		return 0x82138C9C;
		  /* 82138C9Ch */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82138C9Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82138C9Ch case   16:*/		return 0x82138CA0;
		  /* 82138CA0h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 82138CA0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82138CAC;  }
		/* 82138CA0h case   17:*/		return 0x82138CA4;
		  /* 82138CA4h */ case   18:  		/* lwz R11, <#[R28 + 8]> */
		/* 82138CA4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82138CA4h case   18:*/		return 0x82138CA8;
		  /* 82138CA8h */ case   19:  		/* b 8 */
		/* 82138CA8h case   19:*/		return 0x82138CB0;
		/* 82138CA8h case   19:*/		return 0x82138CAC;
	}
	return 0x82138CAC;
} // Block from 82138C5Ch-82138CACh (20 instructions)

//////////////////////////////////////////////////////
// Block at 82138CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138CAC);
		  /* 82138CACh */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 82138CACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82138CACh case    0:*/		return 0x82138CB0;
	}
	return 0x82138CB0;
} // Block from 82138CACh-82138CB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82138CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138CB0);
		  /* 82138CB0h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82138CB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82138CB0h case    0:*/		return 0x82138CB4;
		  /* 82138CB4h */ case    1:  		/* addi R6, R1, 120 */
		/* 82138CB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 82138CB4h case    1:*/		return 0x82138CB8;
		  /* 82138CB8h */ case    2:  		/* addi R5, R1, 128 */
		/* 82138CB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82138CB8h case    2:*/		return 0x82138CBC;
		  /* 82138CBCh */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82138CBCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82138CBCh case    3:*/		return 0x82138CC0;
		  /* 82138CC0h */ case    4:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82138CC0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82138CC0h case    4:*/		return 0x82138CC4;
		  /* 82138CC4h */ case    5:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 82138CC4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 82138CC4h case    5:*/		return 0x82138CC8;
		  /* 82138CC8h */ case    6:  		/* lwz R7, <#[R11 + 16]> */
		/* 82138CC8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 82138CC8h case    6:*/		return 0x82138CCC;
		  /* 82138CCCh */ case    7:  		/* lwz R11, <#[R11 + 60]> */
		/* 82138CCCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82138CCCh case    7:*/		return 0x82138CD0;
		  /* 82138CD0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82138CD0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82138CD0h case    8:*/		return 0x82138CD4;
		  /* 82138CD4h */ case    9:  		/* lwzx R11, <#[R8 + R6]> */
		/* 82138CD4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R6 + 0x00000000) );
		/* 82138CD4h case    9:*/		return 0x82138CD8;
		  /* 82138CD8h */ case   10:  		/* lwzx R8, <#[R8 + R5]> */
		/* 82138CD8h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R5 + 0x00000000) );
		/* 82138CD8h case   10:*/		return 0x82138CDC;
		  /* 82138CDCh */ case   11:  		/* subf R11, R7, R11 */
		/* 82138CDCh case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82138CDCh case   11:*/		return 0x82138CE0;
		  /* 82138CE0h */ case   12:  		/* subf R8, R7, R8 */
		/* 82138CE0h case   12:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 82138CE0h case   12:*/		return 0x82138CE4;
		  /* 82138CE4h */ case   13:  		/* addic R11, R11, -1 */
		/* 82138CE4h case   13:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82138CE4h case   13:*/		return 0x82138CE8;
		  /* 82138CE8h */ case   14:  		/* subfe R11, R11, R11 */
		/* 82138CE8h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82138CE8h case   14:*/		return 0x82138CEC;
		  /* 82138CECh */ case   15:  		/* addic R8, R8, -1 */
		/* 82138CECh case   15:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 82138CECh case   15:*/		return 0x82138CF0;
		  /* 82138CF0h */ case   16:  		/* and R9, R11, R9 */
		/* 82138CF0h case   16:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82138CF0h case   16:*/		return 0x82138CF4;
		  /* 82138CF4h */ case   17:  		/* subfe R11, R8, R8 */
		/* 82138CF4h case   17:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 82138CF4h case   17:*/		return 0x82138CF8;
		  /* 82138CF8h */ case   18:  		/* and R31, R11, R31 */
		/* 82138CF8h case   18:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82138CF8h case   18:*/		return 0x82138CFC;
		  /* 82138CFCh */ case   19:  		/* bc 4, CR6_EQ, 760 */
		/* 82138CFCh case   19:*/		if ( !regs.CR[6].eq ) { return 0x82138FF4;  }
		/* 82138CFCh case   19:*/		return 0x82138D00;
		  /* 82138D00h */ case   20:  		/* addi R10, R10, 1 */
		/* 82138D00h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82138D00h case   20:*/		return 0x82138D04;
		  /* 82138D04h */ case   21:  		/* cmplwi CR6, R10, 2 */
		/* 82138D04h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 82138D04h case   21:*/		return 0x82138D08;
		  /* 82138D08h */ case   22:  		/* bc 12, CR6_LT, -112 */
		/* 82138D08h case   22:*/		if ( regs.CR[6].lt ) { return 0x82138C98;  }
		/* 82138D08h case   22:*/		return 0x82138D0C;
		  /* 82138D0Ch */ case   23:  		/* cmpwi CR6, R9, 0 */
		/* 82138D0Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82138D0Ch case   23:*/		return 0x82138D10;
		  /* 82138D10h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 82138D10h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82138D1C;  }
		/* 82138D10h case   24:*/		return 0x82138D14;
		  /* 82138D14h */ case   25:  		/* cmpwi CR6, R31, 0 */
		/* 82138D14h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82138D14h case   25:*/		return 0x82138D18;
		  /* 82138D18h */ case   26:  		/* bc 12, CR6_EQ, 584 */
		/* 82138D18h case   26:*/		if ( regs.CR[6].eq ) { return 0x82138F60;  }
		/* 82138D18h case   26:*/		return 0x82138D1C;
	}
	return 0x82138D1C;
} // Block from 82138CB0h-82138D1Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 82138D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138D1C);
		  /* 82138D1Ch */ case    0:  		/* li R3, 116 */
		/* 82138D1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82138D1Ch case    0:*/		return 0x82138D20;
		  /* 82138D20h */ case    1:  		/* bl -247688 */
		/* 82138D20h case    1:*/		regs.LR = 0x82138D24; return 0x820FC598;
		/* 82138D20h case    1:*/		return 0x82138D24;
		  /* 82138D24h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82138D24h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82138D24h case    2:*/		return 0x82138D28;
		  /* 82138D28h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82138D28h case    3:*/		if ( regs.CR[0].eq ) { return 0x82138D38;  }
		/* 82138D28h case    3:*/		return 0x82138D2C;
		  /* 82138D2Ch */ case    4:  		/* bl -249484 */
		/* 82138D2Ch case    4:*/		regs.LR = 0x82138D30; return 0x820FBEA0;
		/* 82138D2Ch case    4:*/		return 0x82138D30;
		  /* 82138D30h */ case    5:  		/* mr R21, R3 */
		/* 82138D30h case    5:*/		regs.R21 = regs.R3;
		/* 82138D30h case    5:*/		return 0x82138D34;
		  /* 82138D34h */ case    6:  		/* b 8 */
		/* 82138D34h case    6:*/		return 0x82138D3C;
		/* 82138D34h case    6:*/		return 0x82138D38;
	}
	return 0x82138D38;
} // Block from 82138D1Ch-82138D38h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82138D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138D38);
		  /* 82138D38h */ case    0:  		/* mr R21, R16 */
		/* 82138D38h case    0:*/		regs.R21 = regs.R16;
		/* 82138D38h case    0:*/		return 0x82138D3C;
	}
	return 0x82138D3C;
} // Block from 82138D38h-82138D3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82138D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138D3C);
		  /* 82138D3Ch */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82138D3Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82138D3Ch case    0:*/		return 0x82138D40;
		  /* 82138D40h */ case    1:  		/* bc 12, CR6_EQ, 704 */
		/* 82138D40h case    1:*/		if ( regs.CR[6].eq ) { return 0x82139000;  }
		/* 82138D40h case    1:*/		return 0x82138D44;
		  /* 82138D44h */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 82138D44h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82138D44h case    2:*/		return 0x82138D48;
		  /* 82138D48h */ case    3:  		/* lis R4, 29312 */
		/* 82138D48h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x7280);
		/* 82138D48h case    3:*/		return 0x82138D4C;
		  /* 82138D4Ch */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 82138D4Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82138D54;  }
		/* 82138D4Ch case    4:*/		return 0x82138D50;
		  /* 82138D50h */ case    5:  		/* lis R4, 29296 */
		/* 82138D50h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x7270);
		/* 82138D50h case    5:*/		return 0x82138D54;
	}
	return 0x82138D54;
} // Block from 82138D3Ch-82138D54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138D54);
		  /* 82138D54h */ case    0:  		/* ori R4, R4, 2 */
		/* 82138D54h case    0:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 82138D54h case    0:*/		return 0x82138D58;
		  /* 82138D58h */ case    1:  		/* li R5, 4 */
		/* 82138D58h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82138D58h case    1:*/		return 0x82138D5C;
	}
	return 0x82138D5C;
} // Block from 82138D54h-82138D5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82138D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138D5C);
		  /* 82138D5Ch */ case    0:  		/* li R7, 0 */
		/* 82138D5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82138D5Ch case    0:*/		return 0x82138D60;
		  /* 82138D60h */ case    1:  		/* li R6, 4 */
		/* 82138D60h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82138D60h case    1:*/		return 0x82138D64;
		  /* 82138D64h */ case    2:  		/* mr R3, R21 */
		/* 82138D64h case    2:*/		regs.R3 = regs.R21;
		/* 82138D64h case    2:*/		return 0x82138D68;
		  /* 82138D68h */ case    3:  		/* bl -247608 */
		/* 82138D68h case    3:*/		regs.LR = 0x82138D6C; return 0x820FC630;
		/* 82138D68h case    3:*/		return 0x82138D6C;
		  /* 82138D6Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 82138D6Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82138D6Ch case    4:*/		return 0x82138D70;
		  /* 82138D70h */ case    5:  		/* bc 12, CR0_LT, 520 */
		/* 82138D70h case    5:*/		if ( regs.CR[0].lt ) { return 0x82138F78;  }
		/* 82138D70h case    5:*/		return 0x82138D74;
		  /* 82138D74h */ case    6:  		/* li R10, 4 */
		/* 82138D74h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82138D74h case    6:*/		return 0x82138D78;
		  /* 82138D78h */ case    7:  		/* mr R11, R16 */
		/* 82138D78h case    7:*/		regs.R11 = regs.R16;
		/* 82138D78h case    7:*/		return 0x82138D7C;
		  /* 82138D7Ch */ case    8:  		/* mtspr CTR, R10 */
		/* 82138D7Ch case    8:*/		regs.CTR = regs.R10;
		/* 82138D7Ch case    8:*/		return 0x82138D80;
		  /* 82138D80h */ case    9:  		/* lwz R10, <#[R19]> */
		/* 82138D80h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 82138D80h case    9:*/		return 0x82138D84;
		  /* 82138D84h */ case   10:  		/* lwz R9, <#[R21 + 16]> */
		/* 82138D84h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000010) );
		/* 82138D84h case   10:*/		return 0x82138D88;
		  /* 82138D88h */ case   11:  		/* lwz R10, <#[R10 + 16]> */
		/* 82138D88h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82138D88h case   11:*/		return 0x82138D8C;
		  /* 82138D8Ch */ case   12:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82138D8Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138D8Ch case   12:*/		return 0x82138D90;
		  /* 82138D90h */ case   13:  		/* stwx R10, <#[R9 + R11]> */
		/* 82138D90h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82138D90h case   13:*/		return 0x82138D94;
		  /* 82138D94h */ case   14:  		/* addi R11, R11, 4 */
		/* 82138D94h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82138D94h case   14:*/		return 0x82138D98;
		  /* 82138D98h */ case   15:  		/* bc 16, CR0_LT, -24 */
		/* 82138D98h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82138D80;  }
		/* 82138D98h case   15:*/		return 0x82138D9C;
		  /* 82138D9Ch */ case   16:  		/* lwz R11, <#[R19]> */
		/* 82138D9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82138D9Ch case   16:*/		return 0x82138DA0;
		  /* 82138DA0h */ case   17:  		/* lwz R8, <#[R25 + 8]> */
		/* 82138DA0h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000008) );
		/* 82138DA0h case   17:*/		return 0x82138DA4;
		  /* 82138DA4h */ case   18:  		/* lwz R10, <#[R27 + 20]> */
		/* 82138DA4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 82138DA4h case   18:*/		return 0x82138DA8;
		  /* 82138DA8h */ case   19:  		/* lwz R9, <#[R27 + 16]> */
		/* 82138DA8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 82138DA8h case   19:*/		return 0x82138DAC;
		  /* 82138DACh */ case   20:  		/* lwz R22, <#[R1 + 100]> */
		/* 82138DACh case   20:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 82138DACh case   20:*/		return 0x82138DB0;
		  /* 82138DB0h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 82138DB0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82138DB0h case   21:*/		return 0x82138DB4;
		  /* 82138DB4h */ case   22:  		/* lwz R8, <#[R8 + 12]> */
		/* 82138DB4h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 82138DB4h case   22:*/		return 0x82138DB8;
		  /* 82138DB8h */ case   23:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82138DB8h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82138DB8h case   23:*/		return 0x82138DBC;
		  /* 82138DBCh */ case   24:  		/* lwz R11, <#[R11]> */
		/* 82138DBCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82138DBCh case   24:*/		return 0x82138DC0;
		  /* 82138DC0h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82138DC0h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82138DC0h case   25:*/		return 0x82138DC4;
		  /* 82138DC4h */ case   26:  		/* lwzx R23, <#[R8 + R10]> */
		/* 82138DC4h case   26:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82138DC4h case   26:*/		return 0x82138DC8;
		  /* 82138DC8h */ case   27:  		/* lwzx R10, <#[R11 + R10]> */
		/* 82138DC8h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82138DC8h case   27:*/		return 0x82138DCC;
		  /* 82138DCCh */ case   28:  		/* lwz R11, <#[R10 + 4]> */
		/* 82138DCCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82138DCCh case   28:*/		return 0x82138DD0;
		  /* 82138DD0h */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82138DD0h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82138DD0h case   29:*/		return 0x82138DD4;
		  /* 82138DD4h */ case   30:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82138DD4h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82138DD4h case   30:*/		return 0x82138DD8;
		  /* 82138DD8h */ case   31:  		/* lwz R11, <#[R11 + 4]> */
		/* 82138DD8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82138DD8h case   31:*/		return 0x82138DDC;
		  /* 82138DDCh */ case   32:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82138DDCh case   32:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82138DDCh case   32:*/		return 0x82138DE0;
		  /* 82138DE0h */ case   33:  		/* bc 12, CR0_EQ, 44 */
		/* 82138DE0h case   33:*/		if ( regs.CR[0].eq ) { return 0x82138E0C;  }
		/* 82138DE0h case   33:*/		return 0x82138DE4;
		  /* 82138DE4h */ case   34:  		/* lwz R24, <#[R10 + 12]> */
		/* 82138DE4h case   34:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R10 + 0x0000000C) );
		/* 82138DE4h case   34:*/		return 0x82138DE8;
		  /* 82138DE8h */ case   35:  		/* cmplwi CR6, R24, 3 */
		/* 82138DE8h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 82138DE8h case   35:*/		return 0x82138DEC;
		  /* 82138DECh */ case   36:  		/* bc 12, CR6_GT, 20 */
		/* 82138DECh case   36:*/		if ( regs.CR[6].gt ) { return 0x82138E00;  }
		/* 82138DECh case   36:*/		return 0x82138DF0;
		  /* 82138DF0h */ case   37:  		/* rlwinm R11, R24, 2, 0, 29 */
		/* 82138DF0h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R24);
		/* 82138DF0h case   37:*/		return 0x82138DF4;
		  /* 82138DF4h */ case   38:  		/* lwzx R11, <#[R11 + R18]> */
		/* 82138DF4h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 82138DF4h case   38:*/		return 0x82138DF8;
		  /* 82138DF8h */ case   39:  		/* cmplwi CR6, R11, 0 */
		/* 82138DF8h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82138DF8h case   39:*/		return 0x82138DFC;
		  /* 82138DFCh */ case   40:  		/* bc 12, CR6_EQ, 76 */
		/* 82138DFCh case   40:*/		if ( regs.CR[6].eq ) { return 0x82138E48;  }
		/* 82138DFCh case   40:*/		return 0x82138E00;
	}
	return 0x82138E00;
} // Block from 82138D5Ch-82138E00h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82138E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138E00);
		  /* 82138E00h */ case    0:  		/* lis R31, -32768 */
		/* 82138E00h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 82138E00h case    0:*/		return 0x82138E04;
		  /* 82138E04h */ case    1:  		/* ori R31, R31, 16389 */
		/* 82138E04h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 82138E04h case    1:*/		return 0x82138E08;
		  /* 82138E08h */ case    2:  		/* b 368 */
		/* 82138E08h case    2:*/		return 0x82138F78;
		/* 82138E08h case    2:*/		return 0x82138E0C;
	}
	return 0x82138E0C;
} // Block from 82138E00h-82138E0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138E0C);
		  /* 82138E0Ch */ case    0:  		/* mr R24, R22 */
		/* 82138E0Ch case    0:*/		regs.R24 = regs.R22;
		/* 82138E0Ch case    0:*/		return 0x82138E10;
		  /* 82138E10h */ case    1:  		/* cmplwi CR6, R22, 4 */
		/* 82138E10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000004);
		/* 82138E10h case    1:*/		return 0x82138E14;
		  /* 82138E14h */ case    2:  		/* bc 4, CR6_LT, 40 */
		/* 82138E14h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82138E3C;  }
		/* 82138E14h case    2:*/		return 0x82138E18;
		  /* 82138E18h */ case    3:  		/* rlwinm R11, R22, 2, 0, 29 */
		/* 82138E18h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R22);
		/* 82138E18h case    3:*/		return 0x82138E1C;
		  /* 82138E1Ch */ case    4:  		/* add R11, R11, R18 */
		/* 82138E1Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 82138E1Ch case    4:*/		return 0x82138E20;
		  /* 82138E20h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 82138E20h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82138E20h case    5:*/		return 0x82138E24;
		  /* 82138E24h */ case    6:  		/* cmplwi CR6, R9, 0 */
		/* 82138E24h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82138E24h case    6:*/		return 0x82138E28;
		  /* 82138E28h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82138E28h case    7:*/		if ( regs.CR[6].eq ) { return 0x82138E3C;  }
		/* 82138E28h case    7:*/		return 0x82138E2C;
		  /* 82138E2Ch */ case    8:  		/* addi R24, R24, 1 */
		/* 82138E2Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82138E2Ch case    8:*/		return 0x82138E30;
		  /* 82138E30h */ case    9:  		/* addi R11, R11, 4 */
		/* 82138E30h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82138E30h case    9:*/		return 0x82138E34;
		  /* 82138E34h */ case   10:  		/* cmplwi CR6, R24, 4 */
		/* 82138E34h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 82138E34h case   10:*/		return 0x82138E38;
		  /* 82138E38h */ case   11:  		/* bc 12, CR6_LT, -24 */
		/* 82138E38h case   11:*/		if ( regs.CR[6].lt ) { return 0x82138E20;  }
		/* 82138E38h case   11:*/		return 0x82138E3C;
	}
	return 0x82138E3C;
} // Block from 82138E0Ch-82138E3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82138E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138E3C);
		  /* 82138E3Ch */ case    0:  		/* cmplwi CR6, R24, 4 */
		/* 82138E3Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 82138E3Ch case    0:*/		return 0x82138E40;
		  /* 82138E40h */ case    1:  		/* bc 12, CR6_EQ, -64 */
		/* 82138E40h case    1:*/		if ( regs.CR[6].eq ) { return 0x82138E00;  }
		/* 82138E40h case    1:*/		return 0x82138E44;
		  /* 82138E44h */ case    2:  		/* stw R24, <#[R10 + 12]> */
		/* 82138E44h case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x0000000C) );
		/* 82138E44h case    2:*/		return 0x82138E48;
	}
	return 0x82138E48;
} // Block from 82138E3Ch-82138E48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82138E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138E48);
		  /* 82138E48h */ case    0:  		/* li R6, 0 */
		/* 82138E48h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82138E48h case    0:*/		return 0x82138E4C;
		  /* 82138E4Ch */ case    1:  		/* lwz R4, <#[R27 + 128]> */
		/* 82138E4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000080) );
		/* 82138E4Ch case    1:*/		return 0x82138E50;
		  /* 82138E50h */ case    2:  		/* mr R5, R24 */
		/* 82138E50h case    2:*/		regs.R5 = regs.R24;
		/* 82138E50h case    2:*/		return 0x82138E54;
		  /* 82138E54h */ case    3:  		/* fmr FR1, FR31 */
		/* 82138E54h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82138E54h case    3:*/		return 0x82138E58;
		  /* 82138E58h */ case    4:  		/* mr R3, R27 */
		/* 82138E58h case    4:*/		regs.R3 = regs.R27;
		/* 82138E58h case    4:*/		return 0x82138E5C;
		  /* 82138E5Ch */ case    5:  		/* bl -244788 */
		/* 82138E5Ch case    5:*/		regs.LR = 0x82138E60; return 0x820FD228;
		/* 82138E5Ch case    5:*/		return 0x82138E60;
		  /* 82138E60h */ case    6:  		/* mr R25, R3 */
		/* 82138E60h case    6:*/		regs.R25 = regs.R3;
		/* 82138E60h case    6:*/		return 0x82138E64;
		  /* 82138E64h */ case    7:  		/* cmpwi CR6, R3, -1 */
		/* 82138E64h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82138E64h case    7:*/		return 0x82138E68;
		  /* 82138E68h */ case    8:  		/* bc 12, CR6_EQ, 408 */
		/* 82138E68h case    8:*/		if ( regs.CR[6].eq ) { return 0x82139000;  }
		/* 82138E68h case    8:*/		return 0x82138E6C;
		  /* 82138E6Ch */ case    9:  		/* lwz R11, <#[R27 + 20]> */
		/* 82138E6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82138E6Ch case    9:*/		return 0x82138E70;
		  /* 82138E70h */ case   10:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82138E70h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82138E70h case   10:*/		return 0x82138E74;
		  /* 82138E74h */ case   11:  		/* mr R4, R23 */
		/* 82138E74h case   11:*/		regs.R4 = regs.R23;
		/* 82138E74h case   11:*/		return 0x82138E78;
		  /* 82138E78h */ case   12:  		/* lwzx R30, <#[R10 + R11]> */
		/* 82138E78h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82138E78h case   12:*/		return 0x82138E7C;
		  /* 82138E7Ch */ case   13:  		/* mr R3, R30 */
		/* 82138E7Ch case   13:*/		regs.R3 = regs.R30;
		/* 82138E7Ch case   13:*/		return 0x82138E80;
		  /* 82138E80h */ case   14:  		/* bl -246488 */
		/* 82138E80h case   14:*/		regs.LR = 0x82138E84; return 0x820FCBA8;
		/* 82138E80h case   14:*/		return 0x82138E84;
		  /* 82138E84h */ case   15:  		/* li R11, 3 */
		/* 82138E84h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82138E84h case   15:*/		return 0x82138E88;
		  /* 82138E88h */ case   16:  		/* stw R24, <#[R30 + 12]> */
		/* 82138E88h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x0000000C) );
		/* 82138E88h case   16:*/		return 0x82138E8C;
		  /* 82138E8Ch */ case   17:  		/* mr R31, R16 */
		/* 82138E8Ch case   17:*/		regs.R31 = regs.R16;
		/* 82138E8Ch case   17:*/		return 0x82138E90;
		  /* 82138E90h */ case   18:  		/* rlwimi R11, R24, 8, 0, 23 */
		/* 82138E90h case   18:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R11,regs.R24);
		/* 82138E90h case   18:*/		return 0x82138E94;
		  /* 82138E94h */ case   19:  		/* cmplwi CR6, R20, 0 */
		/* 82138E94h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82138E94h case   19:*/		return 0x82138E98;
		  /* 82138E98h */ case   20:  		/* stw R11, <#[R30 + 108]> */
		/* 82138E98h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 82138E98h case   20:*/		return 0x82138E9C;
		  /* 82138E9Ch */ case   21:  		/* bc 12, CR6_EQ, 156 */
		/* 82138E9Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x82138F38;  }
		/* 82138E9Ch case   21:*/		return 0x82138EA0;
		  /* 82138EA0h */ case   22:  		/* rlwinm R26, R20, 2, 0, 29 */
		/* 82138EA0h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R20);
		/* 82138EA0h case   22:*/		return 0x82138EA4;
		  /* 82138EA4h */ case   23:  		/* mr R30, R16 */
		/* 82138EA4h case   23:*/		regs.R30 = regs.R16;
		/* 82138EA4h case   23:*/		return 0x82138EA8;
		  /* 82138EA8h */ case   24:  		/* mr R29, R26 */
		/* 82138EA8h case   24:*/		regs.R29 = regs.R26;
		/* 82138EA8h case   24:*/		return 0x82138EAC;
		  /* 82138EACh */ case   25:  		/* mr R6, R31 */
		/* 82138EACh case   25:*/		regs.R6 = regs.R31;
		/* 82138EACh case   25:*/		return 0x82138EB0;
		  /* 82138EB0h */ case   26:  		/* lwz R4, <#[R27 + 128]> */
		/* 82138EB0h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000080) );
		/* 82138EB0h case   26:*/		return 0x82138EB4;
		  /* 82138EB4h */ case   27:  		/* mr R5, R22 */
		/* 82138EB4h case   27:*/		regs.R5 = regs.R22;
		/* 82138EB4h case   27:*/		return 0x82138EB8;
		  /* 82138EB8h */ case   28:  		/* fmr FR1, FR31 */
		/* 82138EB8h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82138EB8h case   28:*/		return 0x82138EBC;
		  /* 82138EBCh */ case   29:  		/* mr R3, R27 */
		/* 82138EBCh case   29:*/		regs.R3 = regs.R27;
		/* 82138EBCh case   29:*/		return 0x82138EC0;
		  /* 82138EC0h */ case   30:  		/* bl -244888 */
		/* 82138EC0h case   30:*/		regs.LR = 0x82138EC4; return 0x820FD228;
		/* 82138EC0h case   30:*/		return 0x82138EC4;
		  /* 82138EC4h */ case   31:  		/* mr R28, R3 */
		/* 82138EC4h case   31:*/		regs.R28 = regs.R3;
		/* 82138EC4h case   31:*/		return 0x82138EC8;
		  /* 82138EC8h */ case   32:  		/* cmpwi CR6, R3, -1 */
		/* 82138EC8h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82138EC8h case   32:*/		return 0x82138ECC;
		  /* 82138ECCh */ case   33:  		/* bc 12, CR6_EQ, 308 */
		/* 82138ECCh case   33:*/		if ( regs.CR[6].eq ) { return 0x82139000;  }
		/* 82138ECCh case   33:*/		return 0x82138ED0;
		  /* 82138ED0h */ case   34:  		/* lwz R11, <#[R19]> */
		/* 82138ED0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82138ED0h case   34:*/		return 0x82138ED4;
		  /* 82138ED4h */ case   35:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82138ED4h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82138ED4h case   35:*/		return 0x82138ED8;
		  /* 82138ED8h */ case   36:  		/* lwz R9, <#[R27 + 20]> */
		/* 82138ED8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 82138ED8h case   36:*/		return 0x82138EDC;
		  /* 82138EDCh */ case   37:  		/* mr R4, R23 */
		/* 82138EDCh case   37:*/		regs.R4 = regs.R23;
		/* 82138EDCh case   37:*/		return 0x82138EE0;
		  /* 82138EE0h */ case   38:  		/* lwz R11, <#[R11 + 8]> */
		/* 82138EE0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82138EE0h case   38:*/		return 0x82138EE4;
		  /* 82138EE4h */ case   39:  		/* lwzx R15, <#[R10 + R9]> */
		/* 82138EE4h case   39:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82138EE4h case   39:*/		return 0x82138EE8;
		  /* 82138EE8h */ case   40:  		/* mr R3, R15 */
		/* 82138EE8h case   40:*/		regs.R3 = regs.R15;
		/* 82138EE8h case   40:*/		return 0x82138EEC;
		  /* 82138EECh */ case   41:  		/* lwzx R11, <#[R11 + R26]> */
		/* 82138EECh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82138EECh case   41:*/		return 0x82138EF0;
		  /* 82138EF0h */ case   42:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82138EF0h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82138EF0h case   42:*/		return 0x82138EF4;
		  /* 82138EF4h */ case   43:  		/* lwzx R14, <#[R11 + R9]> */
		/* 82138EF4h case   43:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82138EF4h case   43:*/		return 0x82138EF8;
		  /* 82138EF8h */ case   44:  		/* bl -246608 */
		/* 82138EF8h case   44:*/		regs.LR = 0x82138EFC; return 0x820FCBA8;
		/* 82138EF8h case   44:*/		return 0x82138EFC;
		  /* 82138EFCh */ case   45:  		/* stw R31, <#[R15 + 16]> */
		/* 82138EFCh case   45:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R15 + 0x00000010) );
		/* 82138EFCh case   45:*/		return 0x82138F00;
		  /* 82138F00h */ case   46:  		/* addi R31, R31, 1 */
		/* 82138F00h case   46:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82138F00h case   46:*/		return 0x82138F04;
		  /* 82138F04h */ case   47:  		/* stw R22, <#[R15 + 12]> */
		/* 82138F04h case   47:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R15 + 0x0000000C) );
		/* 82138F04h case   47:*/		return 0x82138F08;
		  /* 82138F08h */ case   48:  		/* lwz R11, <#[R14 + 60]> */
		/* 82138F08h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000003C) );
		/* 82138F08h case   48:*/		return 0x82138F0C;
		  /* 82138F0Ch */ case   49:  		/* cmplw CR6, R31, R20 */
		/* 82138F0Ch case   49:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R20);
		/* 82138F0Ch case   49:*/		return 0x82138F10;
		  /* 82138F10h */ case   50:  		/* stw R11, <#[R15 + 60]> */
		/* 82138F10h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000003C) );
		/* 82138F10h case   50:*/		return 0x82138F14;
		  /* 82138F14h */ case   51:  		/* lwz R11, <#[R21 + 8]> */
		/* 82138F14h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 82138F14h case   51:*/		return 0x82138F18;
		  /* 82138F18h */ case   52:  		/* stwx R25, <#[R11 + R30]> */
		/* 82138F18h case   52:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82138F18h case   52:*/		return 0x82138F1C;
		  /* 82138F1Ch */ case   53:  		/* addi R30, R30, 4 */
		/* 82138F1Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82138F1Ch case   53:*/		return 0x82138F20;
		  /* 82138F20h */ case   54:  		/* lwz R11, <#[R21 + 8]> */
		/* 82138F20h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 82138F20h case   54:*/		return 0x82138F24;
		  /* 82138F24h */ case   55:  		/* stwx R28, <#[R11 + R29]> */
		/* 82138F24h case   55:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82138F24h case   55:*/		return 0x82138F28;
		  /* 82138F28h */ case   56:  		/* addi R29, R29, 4 */
		/* 82138F28h case   56:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82138F28h case   56:*/		return 0x82138F2C;
		  /* 82138F2Ch */ case   57:  		/* bc 12, CR6_LT, -128 */
		/* 82138F2Ch case   57:*/		if ( regs.CR[6].lt ) { return 0x82138EAC;  }
		/* 82138F2Ch case   57:*/		return 0x82138F30;
		  /* 82138F30h */ case   58:  		/* lwz R14, <#[R1 + 332]> */
		/* 82138F30h case   58:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x0000014C) );
		/* 82138F30h case   58:*/		return 0x82138F34;
		  /* 82138F34h */ case   59:  		/* lwz R15, <#[R1 + 108]> */
		/* 82138F34h case   59:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138F34h case   59:*/		return 0x82138F38;
	}
	return 0x82138F38;
} // Block from 82138E48h-82138F38h (60 instructions)

//////////////////////////////////////////////////////
// Block at 82138F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138F38);
		  /* 82138F38h */ case    0:  		/* rlwinm R11, R24, 2, 0, 29 */
		/* 82138F38h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R24);
		/* 82138F38h case    0:*/		return 0x82138F3C;
		  /* 82138F3Ch */ case    1:  		/* mr R4, R21 */
		/* 82138F3Ch case    1:*/		regs.R4 = regs.R21;
		/* 82138F3Ch case    1:*/		return 0x82138F40;
		  /* 82138F40h */ case    2:  		/* mr R3, R27 */
		/* 82138F40h case    2:*/		regs.R3 = regs.R27;
		/* 82138F40h case    2:*/		return 0x82138F44;
		  /* 82138F44h */ case    3:  		/* stwx R21, <#[R11 + R18]> */
		/* 82138F44h case    3:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 82138F44h case    3:*/		return 0x82138F48;
		  /* 82138F48h */ case    4:  		/* bl -245392 */
		/* 82138F48h case    4:*/		regs.LR = 0x82138F4C; return 0x820FD0B8;
		/* 82138F48h case    4:*/		return 0x82138F4C;
		  /* 82138F4Ch */ case    5:  		/* or. R31, R3, R3 */
		/* 82138F4Ch case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82138F4Ch case    5:*/		return 0x82138F50;
		  /* 82138F50h */ case    6:  		/* bc 12, CR0_LT, 40 */
		/* 82138F50h case    6:*/		if ( regs.CR[0].lt ) { return 0x82138F78;  }
		/* 82138F50h case    6:*/		return 0x82138F54;
		  /* 82138F54h */ case    7:  		/* lwz R24, <#[R1 + 340]> */
		/* 82138F54h case    7:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000154) );
		/* 82138F54h case    7:*/		return 0x82138F58;
		  /* 82138F58h */ case    8:  		/* mr R21, R16 */
		/* 82138F58h case    8:*/		regs.R21 = regs.R16;
		/* 82138F58h case    8:*/		return 0x82138F5C;
		  /* 82138F5Ch */ case    9:  		/* stw R16, <#[R19]> */
		/* 82138F5Ch case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R19 + 0x00000000) );
		/* 82138F5Ch case    9:*/		return 0x82138F60;
	}
	return 0x82138F60;
} // Block from 82138F38h-82138F60h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82138F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138F60);
		  /* 82138F60h */ case    0:  		/* addi R15, R15, 1 */
		/* 82138F60h case    0:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0x1);
		/* 82138F60h case    0:*/		return 0x82138F64;
		  /* 82138F64h */ case    1:  		/* addi R19, R19, 4 */
		/* 82138F64h case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 82138F64h case    1:*/		return 0x82138F68;
		  /* 82138F68h */ case    2:  		/* stw R15, <#[R1 + 108]> */
		/* 82138F68h case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x0000006C) );
		/* 82138F68h case    2:*/		return 0x82138F6C;
		  /* 82138F6Ch */ case    3:  		/* cmplw CR6, R15, R24 */
		/* 82138F6Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R24);
		/* 82138F6Ch case    3:*/		return 0x82138F70;
		  /* 82138F70h */ case    4:  		/* bc 12, CR6_LT, -1280 */
		/* 82138F70h case    4:*/		if ( regs.CR[6].lt ) { return 0x82138A70;  }
		/* 82138F70h case    4:*/		return 0x82138F74;
	}
	return 0x82138F74;
} // Block from 82138F60h-82138F74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82138F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138F74);
		  /* 82138F74h */ case    0:  		/* mr R31, R16 */
		/* 82138F74h case    0:*/		regs.R31 = regs.R16;
		/* 82138F74h case    0:*/		return 0x82138F78;
	}
	return 0x82138F78;
} // Block from 82138F74h-82138F78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82138F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138F78);
		  /* 82138F78h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82138F78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82138F78h case    0:*/		return 0x82138F7C;
		  /* 82138F7Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82138F7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82138F90;  }
		/* 82138F7Ch case    1:*/		return 0x82138F80;
		  /* 82138F80h */ case    2:  		/* mr R3, R21 */
		/* 82138F80h case    2:*/		regs.R3 = regs.R21;
		/* 82138F80h case    2:*/		return 0x82138F84;
		  /* 82138F84h */ case    3:  		/* bl 934972 */
		/* 82138F84h case    3:*/		regs.LR = 0x82138F88; return 0x8221D3C0;
		/* 82138F84h case    3:*/		return 0x82138F88;
		  /* 82138F88h */ case    4:  		/* mr R3, R21 */
		/* 82138F88h case    4:*/		regs.R3 = regs.R21;
		/* 82138F88h case    4:*/		return 0x82138F8C;
		  /* 82138F8Ch */ case    5:  		/* bl -248220 */
		/* 82138F8Ch case    5:*/		regs.LR = 0x82138F90; return 0x820FC5F0;
		/* 82138F8Ch case    5:*/		return 0x82138F90;
	}
	return 0x82138F90;
} // Block from 82138F78h-82138F90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82138F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138F90);
		  /* 82138F90h */ case    0:  		/* mr R3, R31 */
		/* 82138F90h case    0:*/		regs.R3 = regs.R31;
		/* 82138F90h case    0:*/		return 0x82138F94;
		  /* 82138F94h */ case    1:  		/* addi R1, R1, 304 */
		/* 82138F94h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 82138F94h case    1:*/		return 0x82138F98;
		  /* 82138F98h */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82138F98h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82138F98h case    2:*/		return 0x82138F9C;
		  /* 82138F9Ch */ case    3:  		/* b -687404 */
		/* 82138F9Ch case    3:*/		return 0x82091270;
		/* 82138F9Ch case    3:*/		return 0x82138FA0;
	}
	return 0x82138FA0;
} // Block from 82138F90h-82138FA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82138FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138FA0);
		  /* 82138FA0h */ case    0:  		/* lis R10, -32253 */
		/* 82138FA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82138FA0h case    0:*/		return 0x82138FA4;
		  /* 82138FA4h */ case    1:  		/* addi R6, R10, 22072 */
		/* 82138FA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5638);
		/* 82138FA4h case    1:*/		return 0x82138FA8;
		  /* 82138FA8h */ case    2:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 82138FA8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 82138FA8h case    2:*/		return 0x82138FAC;
		  /* 82138FACh */ case    3:  		/* li R5, 4535 */
		/* 82138FACh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x11B7);
		/* 82138FACh case    3:*/		return 0x82138FB0;
		  /* 82138FB0h */ case    4:  		/* mr R3, R27 */
		/* 82138FB0h case    4:*/		regs.R3 = regs.R27;
		/* 82138FB0h case    4:*/		return 0x82138FB4;
		  /* 82138FB4h */ case    5:  		/* lwzx R11, <#[R11 + R14]> */
		/* 82138FB4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 82138FB4h case    5:*/		return 0x82138FB8;
		  /* 82138FB8h */ case    6:  		/* lwz R4, <#[R11 + 60]> */
		/* 82138FB8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82138FB8h case    6:*/		return 0x82138FBC;
		  /* 82138FBCh */ case    7:  		/* bl -174220 */
		/* 82138FBCh case    7:*/		regs.LR = 0x82138FC0; return 0x8210E730;
		/* 82138FBCh case    7:*/		return 0x82138FC0;
		  /* 82138FC0h */ case    8:  		/* lis R31, -32768 */
		/* 82138FC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 82138FC0h case    8:*/		return 0x82138FC4;
		  /* 82138FC4h */ case    9:  		/* ori R31, R31, 16389 */
		/* 82138FC4h case    9:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 82138FC4h case    9:*/		return 0x82138FC8;
		  /* 82138FC8h */ case   10:  		/* b -56 */
		/* 82138FC8h case   10:*/		return 0x82138F90;
		/* 82138FC8h case   10:*/		return 0x82138FCC;
	}
	return 0x82138FCC;
} // Block from 82138FA0h-82138FCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82138FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138FCC);
		  /* 82138FCCh */ case    0:  		/* rlwinm R10, R15, 2, 0, 29 */
		/* 82138FCCh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R15);
		/* 82138FCCh case    0:*/		return 0x82138FD0;
		  /* 82138FD0h */ case    1:  		/* rlwinm R7, R11, 0, 24, 31 */
		/* 82138FD0h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R11);
		/* 82138FD0h case    1:*/		return 0x82138FD4;
		  /* 82138FD4h */ case    2:  		/* lis R9, -32253 */
		/* 82138FD4h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82138FD4h case    2:*/		return 0x82138FD8;
		  /* 82138FD8h */ case    3:  		/* li R5, 4536 */
		/* 82138FD8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x11B8);
		/* 82138FD8h case    3:*/		return 0x82138FDC;
		  /* 82138FDCh */ case    4:  		/* addi R6, R9, 21984 */
		/* 82138FDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x55E0);
		/* 82138FDCh case    4:*/		return 0x82138FE0;
		  /* 82138FE0h */ case    5:  		/* lwzx R11, <#[R10 + R14]> */
		/* 82138FE0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R14 + 0x00000000) );
		/* 82138FE0h case    5:*/		return 0x82138FE4;
		  /* 82138FE4h */ case    6:  		/* mr R3, R27 */
		/* 82138FE4h case    6:*/		regs.R3 = regs.R27;
		/* 82138FE4h case    6:*/		return 0x82138FE8;
		  /* 82138FE8h */ case    7:  		/* lwz R4, <#[R11 + 60]> */
		/* 82138FE8h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82138FE8h case    7:*/		return 0x82138FEC;
		  /* 82138FECh */ case    8:  		/* bl -174268 */
		/* 82138FECh case    8:*/		regs.LR = 0x82138FF0; return 0x8210E730;
		/* 82138FECh case    8:*/		return 0x82138FF0;
		  /* 82138FF0h */ case    9:  		/* b -48 */
		/* 82138FF0h case    9:*/		return 0x82138FC0;
		/* 82138FF0h case    9:*/		return 0x82138FF4;
	}
	return 0x82138FF4;
} // Block from 82138FCCh-82138FF4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82138FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82138FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82138FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82138FF4);
		  /* 82138FF4h */ case    0:  		/* lis R10, -32253 */
		/* 82138FF4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82138FF4h case    0:*/		return 0x82138FF8;
		  /* 82138FF8h */ case    1:  		/* addi R6, R10, 21896 */
		/* 82138FF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5588);
		/* 82138FF8h case    1:*/		return 0x82138FFC;
		  /* 82138FFCh */ case    2:  		/* b -84 */
		/* 82138FFCh case    2:*/		return 0x82138FA8;
		/* 82138FFCh case    2:*/		return 0x82139000;
	}
	return 0x82139000;
} // Block from 82138FF4h-82139000h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82139000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139000);
		  /* 82139000h */ case    0:  		/* lis R31, -32761 */
		/* 82139000h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82139000h case    0:*/		return 0x82139004;
		  /* 82139004h */ case    1:  		/* ori R31, R31, 14 */
		/* 82139004h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82139004h case    1:*/		return 0x82139008;
		  /* 82139008h */ case    2:  		/* b -144 */
		/* 82139008h case    2:*/		return 0x82138F78;
		/* 82139008h case    2:*/		return 0x8213900C;
		  /* 8213900Ch */ case    3:  		/* nop */
		/* 8213900Ch case    3:*/		cpu::op::nop();
		/* 8213900Ch case    3:*/		return 0x82139010;
	}
	return 0x82139010;
} // Block from 82139000h-82139010h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82139010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139010);
		  /* 82139010h */ case    0:  		/* mfspr R12, LR */
		/* 82139010h case    0:*/		regs.R12 = regs.LR;
		/* 82139010h case    0:*/		return 0x82139014;
		  /* 82139014h */ case    1:  		/* bl -687604 */
		/* 82139014h case    1:*/		regs.LR = 0x82139018; return 0x82091220;
		/* 82139014h case    1:*/		return 0x82139018;
		  /* 82139018h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82139018h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82139018h case    2:*/		return 0x8213901C;
		  /* 8213901Ch */ case    3:  		/* stwu R1, <#[R1 - 384]> */
		/* 8213901Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 8213901Ch case    3:*/		return 0x82139020;
		  /* 82139020h */ case    4:  		/* addi R11, R1, 120 */
		/* 82139020h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 82139020h case    4:*/		return 0x82139024;
		  /* 82139024h */ case    5:  		/* stw R4, <#[R1 + 412]> */
		/* 82139024h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000019C) );
		/* 82139024h case    5:*/		return 0x82139028;
		  /* 82139028h */ case    6:  		/* li R20, 0 */
		/* 82139028h case    6:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82139028h case    6:*/		return 0x8213902C;
		  /* 8213902Ch */ case    7:  		/* stw R5, <#[R1 + 420]> */
		/* 8213902Ch case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000001A4) );
		/* 8213902Ch case    7:*/		return 0x82139030;
		  /* 82139030h */ case    8:  		/* mr R25, R3 */
		/* 82139030h case    8:*/		regs.R25 = regs.R3;
		/* 82139030h case    8:*/		return 0x82139034;
		  /* 82139034h */ case    9:  		/* mr R15, R6 */
		/* 82139034h case    9:*/		regs.R15 = regs.R6;
		/* 82139034h case    9:*/		return 0x82139038;
		  /* 82139038h */ case   10:  		/* stw R20, <#[R1 + 96]> */
		/* 82139038h case   10:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 82139038h case   10:*/		return 0x8213903C;
		  /* 8213903Ch */ case   11:  		/* mr R19, R7 */
		/* 8213903Ch case   11:*/		regs.R19 = regs.R7;
		/* 8213903Ch case   11:*/		return 0x82139040;
		  /* 82139040h */ case   12:  		/* std R20, <#[R11]> */
		/* 82139040h case   12:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 82139040h case   12:*/		return 0x82139044;
		  /* 82139044h */ case   13:  		/* cmplwi CR6, R5, 0 */
		/* 82139044h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82139044h case   13:*/		return 0x82139048;
		  /* 82139048h */ case   14:  		/* stw R20, <#[R11 + 8]> */
		/* 82139048h case   14:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000008) );
		/* 82139048h case   14:*/		return 0x8213904C;
		  /* 8213904Ch */ case   15:  		/* mr R17, R20 */
		/* 8213904Ch case   15:*/		regs.R17 = regs.R20;
		/* 8213904Ch case   15:*/		return 0x82139050;
		  /* 82139050h */ case   16:  		/* mr R14, R20 */
		/* 82139050h case   16:*/		regs.R14 = regs.R20;
		/* 82139050h case   16:*/		return 0x82139054;
		  /* 82139054h */ case   17:  		/* bc 12, CR6_EQ, 1672 */
		/* 82139054h case   17:*/		if ( regs.CR[6].eq ) { return 0x821396DC;  }
		/* 82139054h case   17:*/		return 0x82139058;
		  /* 82139058h */ case   18:  		/* lis R11, -32256 */
		/* 82139058h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82139058h case   18:*/		return 0x8213905C;
		  /* 8213905Ch */ case   19:  		/* lis R10, 29392 */
		/* 8213905Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x72D0);
		/* 8213905Ch case   19:*/		return 0x82139060;
		  /* 82139060h */ case   20:  		/* mr R18, R4 */
		/* 82139060h case   20:*/		regs.R18 = regs.R4;
		/* 82139060h case   20:*/		return 0x82139064;
		  /* 82139064h */ case   21:  		/* ori R16, R10, 3 */
		/* 82139064h case   21:*/		cpu::op::ori<0>(regs,&regs.R16,regs.R10,0x3);
		/* 82139064h case   21:*/		return 0x82139068;
		  /* 82139068h */ case   22:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82139068h case   22:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82139068h case   22:*/		return 0x8213906C;
		  /* 8213906Ch */ case   23:  		/* lwz R11, <#[R18]> */
		/* 8213906Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 8213906Ch case   23:*/		return 0x82139070;
		  /* 82139070h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 82139070h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82139070h case   24:*/		return 0x82139074;
		  /* 82139074h */ case   25:  		/* bc 12, CR6_EQ, 1620 */
		/* 82139074h case   25:*/		if ( regs.CR[6].eq ) { return 0x821396C8;  }
		/* 82139074h case   25:*/		return 0x82139078;
		  /* 82139078h */ case   26:  		/* lwz R9, <#[R11]> */
		/* 82139078h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82139078h case   26:*/		return 0x8213907C;
		  /* 8213907Ch */ case   27:  		/* lis R8, 24576 */
		/* 8213907Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R8,0x6000);
		/* 8213907Ch case   27:*/		return 0x82139080;
		  /* 82139080h */ case   28:  		/* rlwinm R7, R9, 0, 0, 11 */
		/* 82139080h case   28:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R7,regs.R9);
		/* 82139080h case   28:*/		return 0x82139084;
		  /* 82139084h */ case   29:  		/* rlwinm R10, R9, 0, 12, 31 */
		/* 82139084h case   29:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R9);
		/* 82139084h case   29:*/		return 0x82139088;
		  /* 82139088h */ case   30:  		/* cmplw CR6, R7, R8 */
		/* 82139088h case   30:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 82139088h case   30:*/		return 0x8213908C;
		  /* 8213908Ch */ case   31:  		/* mr R9, R10 */
		/* 8213908Ch case   31:*/		regs.R9 = regs.R10;
		/* 8213908Ch case   31:*/		return 0x82139090;
		  /* 82139090h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 82139090h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82139098;  }
		/* 82139090h case   32:*/		return 0x82139094;
		  /* 82139094h */ case   33:  		/* li R10, 1 */
		/* 82139094h case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82139094h case   33:*/		return 0x82139098;
	}
	return 0x82139098;
} // Block from 82139010h-82139098h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82139098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139098);
		  /* 82139098h */ case    0:  		/* cmplw CR6, R10, R19 */
		/* 82139098h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 82139098h case    0:*/		return 0x8213909C;
		  /* 8213909Ch */ case    1:  		/* bc 4, CR6_EQ, 1580 */
		/* 8213909Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821396C8;  }
		/* 8213909Ch case    1:*/		return 0x821390A0;
		  /* 821390A0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821390A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821390A0h case    2:*/		return 0x821390A4;
		  /* 821390A4h */ case    3:  		/* lis R8, 4352 */
		/* 821390A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0x1100);
		/* 821390A4h case    3:*/		return 0x821390A8;
		  /* 821390A8h */ case    4:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 821390A8h case    4:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 821390A8h case    4:*/		return 0x821390AC;
		  /* 821390ACh */ case    5:  		/* cmplw CR6, R10, R8 */
		/* 821390ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821390ACh case    5:*/		return 0x821390B0;
		  /* 821390B0h */ case    6:  		/* bc 12, CR6_EQ, 1560 */
		/* 821390B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821396C8;  }
		/* 821390B0h case    6:*/		return 0x821390B4;
		  /* 821390B4h */ case    7:  		/* mr R21, R20 */
		/* 821390B4h case    7:*/		regs.R21 = regs.R20;
		/* 821390B4h case    7:*/		return 0x821390B8;
		  /* 821390B8h */ case    8:  		/* cmplwi CR6, R19, 0 */
		/* 821390B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821390B8h case    8:*/		return 0x821390BC;
		  /* 821390BCh */ case    9:  		/* bc 12, CR6_EQ, 260 */
		/* 821390BCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821391C0;  }
		/* 821390BCh case    9:*/		return 0x821390C0;
		  /* 821390C0h */ case   10:  		/* lwz R23, <#[R11 + 8]> */
		/* 821390C0h case   10:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000008) );
		/* 821390C0h case   10:*/		return 0x821390C4;
		  /* 821390C4h */ case   11:  		/* rlwinm R24, R9, 2, 0, 29 */
		/* 821390C4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R9);
		/* 821390C4h case   11:*/		return 0x821390C8;
		  /* 821390C8h */ case   12:  		/* lwz R27, <#[R25 + 548]> */
		/* 821390C8h case   12:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000224) );
		/* 821390C8h case   12:*/		return 0x821390CC;
		  /* 821390CCh */ case   13:  		/* mr R31, R20 */
		/* 821390CCh case   13:*/		regs.R31 = regs.R20;
		/* 821390CCh case   13:*/		return 0x821390D0;
		  /* 821390D0h */ case   14:  		/* lwz R26, <#[R25 + 560]> */
		/* 821390D0h case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000230) );
		/* 821390D0h case   14:*/		return 0x821390D4;
		  /* 821390D4h */ case   15:  		/* mr R22, R19 */
		/* 821390D4h case   15:*/		regs.R22 = regs.R19;
		/* 821390D4h case   15:*/		return 0x821390D8;
		  /* 821390D8h */ case   16:  		/* li R8, 0 */
		/* 821390D8h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821390D8h case   16:*/		return 0x821390DC;
		  /* 821390DCh */ case   17:  		/* li R7, 1 */
		/* 821390DCh case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821390DCh case   17:*/		return 0x821390E0;
		  /* 821390E0h */ case   18:  		/* add R6, R24, R23 */
		/* 821390E0h case   18:*/		cpu::op::add<0>(regs,&regs.R6,regs.R24,regs.R23);
		/* 821390E0h case   18:*/		return 0x821390E4;
		  /* 821390E4h */ case   19:  		/* mr R5, R27 */
		/* 821390E4h case   19:*/		regs.R5 = regs.R27;
		/* 821390E4h case   19:*/		return 0x821390E8;
		  /* 821390E8h */ case   20:  		/* mr R4, R26 */
		/* 821390E8h case   20:*/		regs.R4 = regs.R26;
		/* 821390E8h case   20:*/		return 0x821390EC;
		  /* 821390ECh */ case   21:  		/* mr R3, R25 */
		/* 821390ECh case   21:*/		regs.R3 = regs.R25;
		/* 821390ECh case   21:*/		return 0x821390F0;
		  /* 821390F0h */ case   22:  		/* bl -2544 */
		/* 821390F0h case   22:*/		regs.LR = 0x821390F4; return 0x82138700;
		/* 821390F0h case   22:*/		return 0x821390F4;
		  /* 821390F4h */ case   23:  		/* addi R11, R1, 152 */
		/* 821390F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x98);
		/* 821390F4h case   23:*/		return 0x821390F8;
		  /* 821390F8h */ case   24:  		/* or. R30, R3, R3 */
		/* 821390F8h case   24:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821390F8h case   24:*/		return 0x821390FC;
		  /* 821390FCh */ case   25:  		/* stwx R30, <#[R31 + R11]> */
		/* 821390FCh case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821390FCh case   25:*/		return 0x82139100;
		  /* 82139100h */ case   26:  		/* bc 12, CR0_EQ, 164 */
		/* 82139100h case   26:*/		if ( regs.CR[0].eq ) { return 0x821391A4;  }
		/* 82139100h case   26:*/		return 0x82139104;
		  /* 82139104h */ case   27:  		/* lis R11, 20480 */
		/* 82139104h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0x5000);
		/* 82139104h case   27:*/		return 0x82139108;
		  /* 82139108h */ case   28:  		/* lwz R10, <#[R30]> */
		/* 82139108h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82139108h case   28:*/		return 0x8213910C;
		  /* 8213910Ch */ case   29:  		/* ori R11, R11, 3 */
		/* 8213910Ch case   29:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8213910Ch case   29:*/		return 0x82139110;
		  /* 82139110h */ case   30:  		/* cmplw CR6, R10, R11 */
		/* 82139110h case   30:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82139110h case   30:*/		return 0x82139114;
		  /* 82139114h */ case   31:  		/* bc 4, CR6_EQ, 144 */
		/* 82139114h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821391A4;  }
		/* 82139114h case   31:*/		return 0x82139118;
		  /* 82139118h */ case   32:  		/* addi R11, R1, 200 */
		/* 82139118h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC8);
		/* 82139118h case   32:*/		return 0x8213911C;
		  /* 8213911Ch */ case   33:  		/* stw R20, <#[R1 + 84]> */
		/* 8213911Ch case   33:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000054) );
		/* 8213911Ch case   33:*/		return 0x82139120;
		  /* 82139120h */ case   34:  		/* addi R8, R1, 168 */
		/* 82139120h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA8);
		/* 82139120h case   34:*/		return 0x82139124;
		  /* 82139124h */ case   35:  		/* add R29, R31, R11 */
		/* 82139124h case   35:*/		cpu::op::add<0>(regs,&regs.R29,regs.R31,regs.R11);
		/* 82139124h case   35:*/		return 0x82139128;
		  /* 82139128h */ case   36:  		/* addi R11, R1, 104 */
		/* 82139128h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 82139128h case   36:*/		return 0x8213912C;
		  /* 8213912Ch */ case   37:  		/* li R10, 0 */
		/* 8213912Ch case   37:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8213912Ch case   37:*/		return 0x82139130;
		  /* 82139130h */ case   38:  		/* mr R9, R29 */
		/* 82139130h case   38:*/		regs.R9 = regs.R29;
		/* 82139130h case   38:*/		return 0x82139134;
		  /* 82139134h */ case   39:  		/* add R8, R31, R8 */
		/* 82139134h case   39:*/		cpu::op::add<0>(regs,&regs.R8,regs.R31,regs.R8);
		/* 82139134h case   39:*/		return 0x82139138;
		  /* 82139138h */ case   40:  		/* add R7, R31, R11 */
		/* 82139138h case   40:*/		cpu::op::add<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 82139138h case   40:*/		return 0x8213913C;
		  /* 8213913Ch */ case   41:  		/* mr R6, R30 */
		/* 8213913Ch case   41:*/		regs.R6 = regs.R30;
		/* 8213913Ch case   41:*/		return 0x82139140;
		  /* 82139140h */ case   42:  		/* mr R3, R25 */
		/* 82139140h case   42:*/		regs.R3 = regs.R25;
		/* 82139140h case   42:*/		return 0x82139144;
		  /* 82139144h */ case   43:  		/* bl -2300 */
		/* 82139144h case   43:*/		regs.LR = 0x82139148; return 0x82138848;
		/* 82139144h case   43:*/		return 0x82139148;
		  /* 82139148h */ case   44:  		/* addi R11, R1, 136 */
		/* 82139148h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 82139148h case   44:*/		return 0x8213914C;
		  /* 8213914Ch */ case   45:  		/* addi R8, R1, 184 */
		/* 8213914Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB8);
		/* 8213914Ch case   45:*/		return 0x82139150;
		  /* 82139150h */ case   46:  		/* stw R20, <#[R1 + 84]> */
		/* 82139150h case   46:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000054) );
		/* 82139150h case   46:*/		return 0x82139154;
		  /* 82139154h */ case   47:  		/* add R28, R31, R11 */
		/* 82139154h case   47:*/		cpu::op::add<0>(regs,&regs.R28,regs.R31,regs.R11);
		/* 82139154h case   47:*/		return 0x82139158;
		  /* 82139158h */ case   48:  		/* li R10, 1 */
		/* 82139158h case   48:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82139158h case   48:*/		return 0x8213915C;
		  /* 8213915Ch */ case   49:  		/* addi R9, R1, 96 */
		/* 8213915Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8213915Ch case   49:*/		return 0x82139160;
		  /* 82139160h */ case   50:  		/* add R8, R31, R8 */
		/* 82139160h case   50:*/		cpu::op::add<0>(regs,&regs.R8,regs.R31,regs.R8);
		/* 82139160h case   50:*/		return 0x82139164;
		  /* 82139164h */ case   51:  		/* mr R7, R28 */
		/* 82139164h case   51:*/		regs.R7 = regs.R28;
		/* 82139164h case   51:*/		return 0x82139168;
		  /* 82139168h */ case   52:  		/* mr R6, R30 */
		/* 82139168h case   52:*/		regs.R6 = regs.R30;
		/* 82139168h case   52:*/		return 0x8213916C;
		  /* 8213916Ch */ case   53:  		/* li R5, 4 */
		/* 8213916Ch case   53:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8213916Ch case   53:*/		return 0x82139170;
		  /* 82139170h */ case   54:  		/* mr R4, R15 */
		/* 82139170h case   54:*/		regs.R4 = regs.R15;
		/* 82139170h case   54:*/		return 0x82139174;
		  /* 82139174h */ case   55:  		/* mr R3, R25 */
		/* 82139174h case   55:*/		regs.R3 = regs.R25;
		/* 82139174h case   55:*/		return 0x82139178;
		  /* 82139178h */ case   56:  		/* bl -2352 */
		/* 82139178h case   56:*/		regs.LR = 0x8213917C; return 0x82138848;
		/* 82139178h case   56:*/		return 0x8213917C;
		  /* 8213917Ch */ case   57:  		/* lwz R11, <#[R29]> */
		/* 8213917Ch case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8213917Ch case   57:*/		return 0x82139180;
		  /* 82139180h */ case   58:  		/* cmplwi CR6, R11, 0 */
		/* 82139180h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82139180h case   58:*/		return 0x82139184;
		  /* 82139184h */ case   59:  		/* lwz R17, <#[R1 + 96]> */
		/* 82139184h case   59:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000060) );
		/* 82139184h case   59:*/		return 0x82139188;
		  /* 82139188h */ case   60:  		/* bc 12, CR6_EQ, 28 */
		/* 82139188h case   60:*/		if ( regs.CR[6].eq ) { return 0x821391A4;  }
		/* 82139188h case   60:*/		return 0x8213918C;
		  /* 8213918Ch */ case   61:  		/* lwz R11, <#[R28]> */
		/* 8213918Ch case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213918Ch case   61:*/		return 0x82139190;
		  /* 82139190h */ case   62:  		/* lwz R10, <#[R1 + 136]> */
		/* 82139190h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 82139190h case   62:*/		return 0x82139194;
		  /* 82139194h */ case   63:  		/* cmplw CR6, R11, R10 */
		/* 82139194h case   63:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82139194h case   63:*/		return 0x82139198;
		  /* 82139198h */ case   64:  		/* bc 4, CR6_EQ, 12 */
		/* 82139198h case   64:*/		if ( !regs.CR[6].eq ) { return 0x821391A4;  }
		/* 82139198h case   64:*/		return 0x8213919C;
		  /* 8213919Ch */ case   65:  		/* cmplwi CR6, R17, 0 */
		/* 8213919Ch case   65:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8213919Ch case   65:*/		return 0x821391A0;
		  /* 821391A0h */ case   66:  		/* bc 4, CR6_EQ, 8 */
		/* 821391A0h case   66:*/		if ( !regs.CR[6].eq ) { return 0x821391A8;  }
		/* 821391A0h case   66:*/		return 0x821391A4;
	}
	return 0x821391A4;
} // Block from 82139098h-821391A4h (67 instructions)

//////////////////////////////////////////////////////
// Block at 821391A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821391A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821391A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821391A4);
		  /* 821391A4h */ case    0:  		/* li R21, 1 */
		/* 821391A4h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821391A4h case    0:*/		return 0x821391A8;
	}
	return 0x821391A8;
} // Block from 821391A4h-821391A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821391A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821391A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821391A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821391A8);
		  /* 821391A8h */ case    0:  		/* addic. R22, R22, -1 */
		/* 821391A8h case    0:*/		cpu::op::addic<1>(regs,&regs.R22,regs.R22,0xFFFFFFFF);
		/* 821391A8h case    0:*/		return 0x821391AC;
		  /* 821391ACh */ case    1:  		/* addi R24, R24, 4 */
		/* 821391ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821391ACh case    1:*/		return 0x821391B0;
		  /* 821391B0h */ case    2:  		/* addi R31, R31, 4 */
		/* 821391B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821391B0h case    2:*/		return 0x821391B4;
		  /* 821391B4h */ case    3:  		/* bc 4, CR0_EQ, -220 */
		/* 821391B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821390D8;  }
		/* 821391B4h case    3:*/		return 0x821391B8;
		  /* 821391B8h */ case    4:  		/* cmpwi CR6, R21, 0 */
		/* 821391B8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 821391B8h case    4:*/		return 0x821391BC;
		  /* 821391BCh */ case    5:  		/* bc 4, CR6_EQ, 1292 */
		/* 821391BCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821396C8;  }
		/* 821391BCh case    5:*/		return 0x821391C0;
	}
	return 0x821391C0;
} // Block from 821391A8h-821391C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821391C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821391C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821391C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821391C0);
		  /* 821391C0h */ case    0:  		/* mr R24, R20 */
		/* 821391C0h case    0:*/		regs.R24 = regs.R20;
		/* 821391C0h case    0:*/		return 0x821391C4;
		  /* 821391C4h */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 821391C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821391C4h case    1:*/		return 0x821391C8;
		  /* 821391C8h */ case    2:  		/* bc 12, CR6_EQ, 604 */
		/* 821391C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82139424;  }
		/* 821391C8h case    2:*/		return 0x821391CC;
		  /* 821391CCh */ case    3:  		/* li R26, -4 */
		/* 821391CCh case    3:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFC);
		/* 821391CCh case    3:*/		return 0x821391D0;
		  /* 821391D0h */ case    4:  		/* lwz R29, <#[R25 + 76]> */
		/* 821391D0h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x0000004C) );
		/* 821391D0h case    4:*/		return 0x821391D4;
		  /* 821391D4h */ case    5:  		/* lwz R27, <#[R25 + 552]> */
		/* 821391D4h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000228) );
		/* 821391D4h case    5:*/		return 0x821391D8;
		  /* 821391D8h */ case    6:  		/* cmplw CR6, R29, R27 */
		/* 821391D8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821391D8h case    6:*/		return 0x821391DC;
		  /* 821391DCh */ case    7:  		/* bc 4, CR6_LT, 208 */
		/* 821391DCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x821392AC;  }
		/* 821391DCh case    7:*/		return 0x821391E0;
		  /* 821391E0h */ case    8:  		/* lwz R10, <#[R25 + 564]> */
		/* 821391E0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000234) );
		/* 821391E0h case    8:*/		return 0x821391E4;
		  /* 821391E4h */ case    9:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 821391E4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 821391E4h case    9:*/		return 0x821391E8;
		  /* 821391E8h */ case   10:  		/* add R28, R10, R11 */
		/* 821391E8h case   10:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821391E8h case   10:*/		return 0x821391EC;
		  /* 821391ECh */ case   11:  		/* lwz R3, <#[R28]> */
		/* 821391ECh case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 821391ECh case   11:*/		return 0x821391F0;
		  /* 821391F0h */ case   12:  		/* cmplwi CR6, R3, 0 */
		/* 821391F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821391F0h case   12:*/		return 0x821391F4;
		  /* 821391F4h */ case   13:  		/* bc 12, CR6_EQ, 168 */
		/* 821391F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213929C;  }
		/* 821391F4h case   13:*/		return 0x821391F8;
		  /* 821391F8h */ case   14:  		/* lwz R5, <#[R18]> */
		/* 821391F8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R18 + 0x00000000) );
		/* 821391F8h case   14:*/		return 0x821391FC;
		  /* 821391FCh */ case   15:  		/* cmplwi CR6, R5, 0 */
		/* 821391FCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821391FCh case   15:*/		return 0x82139200;
		  /* 82139200h */ case   16:  		/* bc 12, CR6_EQ, 156 */
		/* 82139200h case   16:*/		if ( regs.CR[6].eq ) { return 0x8213929C;  }
		/* 82139200h case   16:*/		return 0x82139204;
		  /* 82139204h */ case   17:  		/* lwz R11, <#[R3]> */
		/* 82139204h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82139204h case   17:*/		return 0x82139208;
		  /* 82139208h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82139208h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82139208h case   18:*/		return 0x8213920C;
		  /* 8213920Ch */ case   19:  		/* bc 12, CR6_EQ, 144 */
		/* 8213920Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8213929C;  }
		/* 8213920Ch case   19:*/		return 0x82139210;
		  /* 82139210h */ case   20:  		/* lwz R10, <#[R5]> */
		/* 82139210h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82139210h case   20:*/		return 0x82139214;
		  /* 82139214h */ case   21:  		/* lwz R30, <#[R5 + 4]> */
		/* 82139214h case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R5 + 0x00000004) );
		/* 82139214h case   21:*/		return 0x82139218;
		  /* 82139218h */ case   22:  		/* rlwinm R11, R10, 0, 12, 31 */
		/* 82139218h case   22:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 82139218h case   22:*/		return 0x8213921C;
		  /* 8213921Ch */ case   23:  		/* cmplw CR6, R10, R16 */
		/* 8213921Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 8213921Ch case   23:*/		return 0x82139220;
		  /* 82139220h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 82139220h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82139228;  }
		/* 82139220h case   24:*/		return 0x82139224;
		  /* 82139224h */ case   25:  		/* li R30, 6 */
		/* 82139224h case   25:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 82139224h case   25:*/		return 0x82139228;
	}
	return 0x82139228;
} // Block from 821391C0h-82139228h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82139228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139228);
		  /* 82139228h */ case    0:  		/* mr R31, R11 */
		/* 82139228h case    0:*/		regs.R31 = regs.R11;
		/* 82139228h case    0:*/		return 0x8213922C;
		  /* 8213922Ch */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 8213922Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8213922Ch case    1:*/		return 0x82139230;
		  /* 82139230h */ case    2:  		/* bc 4, CR6_LT, 108 */
		/* 82139230h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213929C;  }
		/* 82139230h case    2:*/		return 0x82139234;
		  /* 82139234h */ case    3:  		/* lwz R4, <#[R3 + 4]> */
		/* 82139234h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 82139234h case    3:*/		return 0x82139238;
		  /* 82139238h */ case    4:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 82139238h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 82139238h case    4:*/		return 0x8213923C;
		  /* 8213923Ch */ case    5:  		/* mr R6, R20 */
		/* 8213923Ch case    5:*/		regs.R6 = regs.R20;
		/* 8213923Ch case    5:*/		return 0x82139240;
		  /* 82139240h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 82139240h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82139240h case    6:*/		return 0x82139244;
		  /* 82139244h */ case    7:  		/* bc 12, CR6_EQ, 72 */
		/* 82139244h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213928C;  }
		/* 82139244h case    7:*/		return 0x82139248;
		  /* 82139248h */ case    8:  		/* lwz R10, <#[R5 + 8]> */
		/* 82139248h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 82139248h case    8:*/		return 0x8213924C;
		  /* 8213924Ch */ case    9:  		/* mr R11, R20 */
		/* 8213924Ch case    9:*/		regs.R11 = regs.R20;
		/* 8213924Ch case    9:*/		return 0x82139250;
		  /* 82139250h */ case   10:  		/* lwz R8, <#[R3 + 8]> */
		/* 82139250h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 82139250h case   10:*/		return 0x82139254;
		  /* 82139254h */ case   11:  		/* lwzx R9, <#[R10 + R7]> */
		/* 82139254h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82139254h case   11:*/		return 0x82139258;
		  /* 82139258h */ case   12:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82139258h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82139258h case   12:*/		return 0x8213925C;
		  /* 8213925Ch */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 8213925Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213925Ch case   13:*/		return 0x82139260;
		  /* 82139260h */ case   14:  		/* bc 12, CR6_EQ, 1216 */
		/* 82139260h case   14:*/		if ( regs.CR[6].eq ) { return 0x82139720;  }
		/* 82139260h case   14:*/		return 0x82139264;
		  /* 82139264h */ case   15:  		/* lwz R23, <#[R25 + 20]> */
		/* 82139264h case   15:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R25 + 0x00000014) );
		/* 82139264h case   15:*/		return 0x82139268;
	}
	return 0x82139268;
} // Block from 82139228h-82139268h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82139268h
// Function '?InstSearch@CPSLegacyProgram@D3DXShader@@IAAPAVCInstruction@2@PAPAV32@IPAIIH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139268);
		  /* 82139268h */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139268h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139268h case    0:*/		return 0x8213926C;
		  /* 8213926Ch */ case    1:  		/* lwzx R10, <#[R10 + R23]> */
		/* 8213926Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 8213926Ch case    1:*/		return 0x82139270;
		  /* 82139270h */ case    2:  		/* lwz R10, <#[R10 + 56]> */
		/* 82139270h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 82139270h case    2:*/		return 0x82139274;
		  /* 82139274h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 82139274h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82139274h case    3:*/		return 0x82139278;
		  /* 82139278h */ case    4:  		/* bc 12, CR6_EQ, 1192 */
		/* 82139278h case    4:*/		if ( regs.CR[6].eq ) { return 0x82139720;  }
		/* 82139278h case    4:*/		return 0x8213927C;
		  /* 8213927Ch */ case    5:  		/* addi R6, R6, 1 */
		/* 8213927Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213927Ch case    5:*/		return 0x82139280;
		  /* 82139280h */ case    6:  		/* addi R11, R11, 4 */
		/* 82139280h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82139280h case    6:*/		return 0x82139284;
		  /* 82139284h */ case    7:  		/* cmplw CR6, R6, R4 */
		/* 82139284h case    7:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R4);
		/* 82139284h case    7:*/		return 0x82139288;
		  /* 82139288h */ case    8:  		/* bc 12, CR6_LT, -48 */
		/* 82139288h case    8:*/		if ( regs.CR[6].lt ) { return 0x82139258;  }
		/* 82139288h case    8:*/		return 0x8213928C;
	}
	return 0x8213928C;
} // Block from 82139268h-8213928Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213928Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213928C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213928C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213928C);
		  /* 8213928Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 8213928Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8213928Ch case    0:*/		return 0x82139290;
		  /* 82139290h */ case    1:  		/* addi R7, R7, 4 */
		/* 82139290h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82139290h case    1:*/		return 0x82139294;
		  /* 82139294h */ case    2:  		/* cmplw CR6, R31, R30 */
		/* 82139294h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82139294h case    2:*/		return 0x82139298;
		  /* 82139298h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 82139298h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213923C;  }
		/* 82139298h case    3:*/		return 0x8213929C;
	}
	return 0x8213929C;
} // Block from 8213928Ch-8213929Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213929Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213929C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213929C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213929C);
		  /* 8213929Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 8213929Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213929Ch case    0:*/		return 0x821392A0;
		  /* 821392A0h */ case    1:  		/* addi R28, R28, 4 */
		/* 821392A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821392A0h case    1:*/		return 0x821392A4;
		  /* 821392A4h */ case    2:  		/* cmplw CR6, R29, R27 */
		/* 821392A4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821392A4h case    2:*/		return 0x821392A8;
		  /* 821392A8h */ case    3:  		/* bc 12, CR6_LT, -188 */
		/* 821392A8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821391EC;  }
		/* 821392A8h case    3:*/		return 0x821392AC;
	}
	return 0x821392AC;
} // Block from 8213929Ch-821392ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821392ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821392AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821392AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821392AC);
		  /* 821392ACh */ case    0:  		/* cmplwi CR6, R24, 1 */
		/* 821392ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 821392ACh case    0:*/		return 0x821392B0;
		  /* 821392B0h */ case    1:  		/* bc 12, CR6_LT, 44 */
		/* 821392B0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821392DC;  }
		/* 821392B0h case    1:*/		return 0x821392B4;
		  /* 821392B4h */ case    2:  		/* addi R11, R1, 104 */
		/* 821392B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 821392B4h case    2:*/		return 0x821392B8;
		  /* 821392B8h */ case    3:  		/* lwz R9, <#[R1 + 136]> */
		/* 821392B8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 821392B8h case    3:*/		return 0x821392BC;
		  /* 821392BCh */ case    4:  		/* add R11, R26, R11 */
		/* 821392BCh case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821392BCh case    4:*/		return 0x821392C0;
		  /* 821392C0h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821392C0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821392C0h case    5:*/		return 0x821392C4;
		  /* 821392C4h */ case    6:  		/* cmplw CR6, R10, R9 */
		/* 821392C4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821392C4h case    6:*/		return 0x821392C8;
		  /* 821392C8h */ case    7:  		/* bc 4, CR6_GT, 1132 */
		/* 821392C8h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82139734;  }
		/* 821392C8h case    7:*/		return 0x821392CC;
		  /* 821392CCh */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821392CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821392CCh case    8:*/		return 0x821392D0;
		  /* 821392D0h */ case    9:  		/* addi R10, R10, 1 */
		/* 821392D0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821392D0h case    9:*/		return 0x821392D4;
		  /* 821392D4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821392D4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821392D4h case   10:*/		return 0x821392D8;
		  /* 821392D8h */ case   11:  		/* bc 4, CR6_EQ, 1116 */
		/* 821392D8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82139734;  }
		/* 821392D8h case   11:*/		return 0x821392DC;
	}
	return 0x821392DC;
} // Block from 821392ACh-821392DCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821392DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821392DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821392DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821392DC);
		  /* 821392DCh */ case    0:  		/* addi R10, R1, 156 */
		/* 821392DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 821392DCh case    0:*/		return 0x821392E0;
		  /* 821392E0h */ case    1:  		/* lwz R11, <#[R25 + 20]> */
		/* 821392E0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 821392E0h case    1:*/		return 0x821392E4;
		  /* 821392E4h */ case    2:  		/* addi R9, R1, 172 */
		/* 821392E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xAC);
		/* 821392E4h case    2:*/		return 0x821392E8;
		  /* 821392E8h */ case    3:  		/* lwzx R10, <#[R26 + R10]> */
		/* 821392E8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + regs.R10 + 0x00000000) );
		/* 821392E8h case    3:*/		return 0x821392EC;
		  /* 821392ECh */ case    4:  		/* lwzx R9, <#[R26 + R9]> */
		/* 821392ECh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + regs.R9 + 0x00000000) );
		/* 821392ECh case    4:*/		return 0x821392F0;
		  /* 821392F0h */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821392F0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821392F0h case    5:*/		return 0x821392F4;
		  /* 821392F4h */ case    6:  		/* lwz R10, <#[R10 + 8]> */
		/* 821392F4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821392F4h case    6:*/		return 0x821392F8;
		  /* 821392F8h */ case    7:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821392F8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821392F8h case    7:*/		return 0x821392FC;
		  /* 821392FCh */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821392FCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821392FCh case    8:*/		return 0x82139300;
		  /* 82139300h */ case    9:  		/* lwzx R9, <#[R9 + R11]> */
		/* 82139300h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82139300h case    9:*/		return 0x82139304;
		  /* 82139304h */ case   10:  		/* lwz R9, <#[R9 + 60]> */
		/* 82139304h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 82139304h case   10:*/		return 0x82139308;
		  /* 82139308h */ case   11:  		/* cmplwi CR6, R9, 0 */
		/* 82139308h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82139308h case   11:*/		return 0x8213930C;
		  /* 8213930Ch */ case   12:  		/* bc 4, CR6_EQ, 1092 */
		/* 8213930Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82139750;  }
		/* 8213930Ch case   12:*/		return 0x82139310;
		  /* 82139310h */ case   13:  		/* addi R9, R1, 188 */
		/* 82139310h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xBC);
		/* 82139310h case   13:*/		return 0x82139314;
		  /* 82139314h */ case   14:  		/* lwzx R9, <#[R26 + R9]> */
		/* 82139314h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + regs.R9 + 0x00000000) );
		/* 82139314h case   14:*/		return 0x82139318;
		  /* 82139318h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82139318h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82139318h case   15:*/		return 0x8213931C;
		  /* 8213931Ch */ case   16:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8213931Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213931Ch case   16:*/		return 0x82139320;
		  /* 82139320h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139320h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139320h case   17:*/		return 0x82139324;
		  /* 82139324h */ case   18:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82139324h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82139324h case   18:*/		return 0x82139328;
		  /* 82139328h */ case   19:  		/* lwz R11, <#[R11 + 60]> */
		/* 82139328h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82139328h case   19:*/		return 0x8213932C;
		  /* 8213932Ch */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 8213932Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213932Ch case   20:*/		return 0x82139330;
		  /* 82139330h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 82139330h case   21:*/		if ( regs.CR[6].eq ) { return 0x82139340;  }
		/* 82139330h case   21:*/		return 0x82139334;
		  /* 82139334h */ case   22:  		/* lis R10, 6 */
		/* 82139334h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x6);
		/* 82139334h case   22:*/		return 0x82139338;
		  /* 82139338h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 82139338h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82139338h case   23:*/		return 0x8213933C;
		  /* 8213933Ch */ case   24:  		/* bc 4, CR6_EQ, 1060 */
		/* 8213933Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x82139760;  }
		/* 8213933Ch case   24:*/		return 0x82139340;
	}
	return 0x82139340;
} // Block from 821392DCh-82139340h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82139340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139340);
		  /* 82139340h */ case    0:  		/* li R3, 116 */
		/* 82139340h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82139340h case    0:*/		return 0x82139344;
		  /* 82139344h */ case    1:  		/* bl -249260 */
		/* 82139344h case    1:*/		regs.LR = 0x82139348; return 0x820FC598;
		/* 82139344h case    1:*/		return 0x82139348;
		  /* 82139348h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82139348h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82139348h case    2:*/		return 0x8213934C;
		  /* 8213934Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8213934Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82139358;  }
		/* 8213934Ch case    3:*/		return 0x82139350;
		  /* 82139350h */ case    4:  		/* bl -251056 */
		/* 82139350h case    4:*/		regs.LR = 0x82139354; return 0x820FBEA0;
		/* 82139350h case    4:*/		return 0x82139354;
		  /* 82139354h */ case    5:  		/* b 8 */
		/* 82139354h case    5:*/		return 0x8213935C;
		/* 82139354h case    5:*/		return 0x82139358;
	}
	return 0x82139358;
} // Block from 82139340h-82139358h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82139358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139358);
		  /* 82139358h */ case    0:  		/* mr R3, R20 */
		/* 82139358h case    0:*/		regs.R3 = regs.R20;
		/* 82139358h case    0:*/		return 0x8213935C;
	}
	return 0x8213935C;
} // Block from 82139358h-8213935Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213935Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213935C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213935C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213935C);
		  /* 8213935Ch */ case    0:  		/* addi R11, R1, 124 */
		/* 8213935Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x7C);
		/* 8213935Ch case    0:*/		return 0x82139360;
		  /* 82139360h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82139360h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82139360h case    1:*/		return 0x82139364;
		  /* 82139364h */ case    2:  		/* stwx R3, <#[R26 + R11]> */
		/* 82139364h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + regs.R11 + 0x00000000) );
		/* 82139364h case    2:*/		return 0x82139368;
		  /* 82139368h */ case    3:  		/* bc 12, CR6_EQ, 1032 */
		/* 82139368h case    3:*/		if ( regs.CR[6].eq ) { return 0x82139770;  }
		/* 82139368h case    3:*/		return 0x8213936C;
		  /* 8213936Ch */ case    4:  		/* addi R11, R19, -1 */
		/* 8213936Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0xFFFFFFFF);
		/* 8213936Ch case    4:*/		return 0x82139370;
		  /* 82139370h */ case    5:  		/* cmplw CR6, R24, R11 */
		/* 82139370h case    5:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82139370h case    5:*/		return 0x82139374;
		  /* 82139374h */ case    6:  		/* bc 4, CR6_EQ, 116 */
		/* 82139374h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821393E8;  }
		/* 82139374h case    6:*/		return 0x82139378;
		  /* 82139378h */ case    7:  		/* lwz R11, <#[R18]> */
		/* 82139378h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 82139378h case    7:*/		return 0x8213937C;
		  /* 8213937Ch */ case    8:  		/* lwz R11, <#[R11]> */
		/* 8213937Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213937Ch case    8:*/		return 0x82139380;
		  /* 82139380h */ case    9:  		/* cmplw CR6, R11, R16 */
		/* 82139380h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 82139380h case    9:*/		return 0x82139384;
		  /* 82139384h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 82139384h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821393A0;  }
		/* 82139384h case   10:*/		return 0x82139388;
		  /* 82139388h */ case   11:  		/* cmplwi CR6, R19, 3 */
		/* 82139388h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 82139388h case   11:*/		return 0x8213938C;
		  /* 8213938Ch */ case   12:  		/* bc 4, CR6_EQ, 1008 */
		/* 8213938Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213977C;  }
		/* 8213938Ch case   12:*/		return 0x82139390;
		  /* 82139390h */ case   13:  		/* lis R4, 29344 */
		/* 82139390h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x72A0);
		/* 82139390h case   13:*/		return 0x82139394;
		  /* 82139394h */ case   14:  		/* li R6, 4 */
		/* 82139394h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82139394h case   14:*/		return 0x82139398;
		  /* 82139398h */ case   15:  		/* li R5, 9 */
		/* 82139398h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82139398h case   15:*/		return 0x8213939C;
		  /* 8213939Ch */ case   16:  		/* b 100 */
		/* 8213939Ch case   16:*/		return 0x82139400;
		/* 8213939Ch case   16:*/		return 0x821393A0;
	}
	return 0x821393A0;
} // Block from 8213935Ch-821393A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821393A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393A0);
		  /* 821393A0h */ case    0:  		/* lis R10, 29376 */
		/* 821393A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x72C0);
		/* 821393A0h case    0:*/		return 0x821393A4;
		  /* 821393A4h */ case    1:  		/* ori R10, R10, 3 */
		/* 821393A4h case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 821393A4h case    1:*/		return 0x821393A8;
		  /* 821393A8h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 821393A8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821393A8h case    2:*/		return 0x821393AC;
		  /* 821393ACh */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821393ACh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821393C4;  }
		/* 821393ACh case    3:*/		return 0x821393B0;
	}
	return 0x821393B0;
} // Block from 821393A0h-821393B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821393B0h
// Function '?FindTex@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IPAV32@PAI20HH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393B0);
		  /* 821393B0h */ case    0:  		/* cmplwi CR6, R19, 3 */
		/* 821393B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 821393B0h case    0:*/		return 0x821393B4;
		  /* 821393B4h */ case    1:  		/* bc 4, CR6_EQ, 968 */
		/* 821393B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213977C;  }
		/* 821393B4h case    1:*/		return 0x821393B8;
		  /* 821393B8h */ case    2:  		/* lis R4, 29328 */
		/* 821393B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x7290);
		/* 821393B8h case    2:*/		return 0x821393BC;
		  /* 821393BCh */ case    3:  		/* li R6, 4 */
		/* 821393BCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821393BCh case    3:*/		return 0x821393C0;
		  /* 821393C0h */ case    4:  		/* b 60 */
		/* 821393C0h case    4:*/		return 0x821393FC;
		/* 821393C0h case    4:*/		return 0x821393C4;
	}
	return 0x821393C4;
} // Block from 821393B0h-821393C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821393C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393C4);
		  /* 821393C4h */ case    0:  		/* cmplwi CR6, R19, 1 */
		/* 821393C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 821393C4h case    0:*/		return 0x821393C8;
		  /* 821393C8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821393C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821393D4;  }
		/* 821393C8h case    1:*/		return 0x821393CC;
		  /* 821393CCh */ case    2:  		/* lis R4, 29360 */
		/* 821393CCh case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x72B0);
		/* 821393CCh case    2:*/		return 0x821393D0;
		  /* 821393D0h */ case    3:  		/* b -20 */
		/* 821393D0h case    3:*/		return 0x821393BC;
		/* 821393D0h case    3:*/		return 0x821393D4;
	}
	return 0x821393D4;
} // Block from 821393C4h-821393D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821393D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393D4);
		  /* 821393D4h */ case    0:  		/* cmplwi CR6, R19, 3 */
		/* 821393D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 821393D4h case    0:*/		return 0x821393D8;
		  /* 821393D8h */ case    1:  		/* lis R4, 29264 */
		/* 821393D8h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x7250);
		/* 821393D8h case    1:*/		return 0x821393DC;
		  /* 821393DCh */ case    2:  		/* bc 12, CR6_EQ, -32 */
		/* 821393DCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821393BC;  }
		/* 821393DCh case    2:*/		return 0x821393E0;
		  /* 821393E0h */ case    3:  		/* lis R4, 29232 */
		/* 821393E0h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x7230);
		/* 821393E0h case    3:*/		return 0x821393E4;
		  /* 821393E4h */ case    4:  		/* b -40 */
		/* 821393E4h case    4:*/		return 0x821393BC;
		/* 821393E4h case    4:*/		return 0x821393E8;
	}
	return 0x821393E8;
} // Block from 821393D4h-821393E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821393E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393E8);
		  /* 821393E8h */ case    0:  		/* cmplwi CR6, R19, 3 */
		/* 821393E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 821393E8h case    0:*/		return 0x821393EC;
		  /* 821393ECh */ case    1:  		/* lis R4, 29248 */
		/* 821393ECh case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x7240);
		/* 821393ECh case    1:*/		return 0x821393F0;
		  /* 821393F0h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821393F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821393F8;  }
		/* 821393F0h case    2:*/		return 0x821393F4;
		  /* 821393F4h */ case    3:  		/* lis R4, 29216 */
		/* 821393F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x7220);
		/* 821393F4h case    3:*/		return 0x821393F8;
	}
	return 0x821393F8;
} // Block from 821393E8h-821393F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821393F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393F8);
		  /* 821393F8h */ case    0:  		/* li R6, 0 */
		/* 821393F8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821393F8h case    0:*/		return 0x821393FC;
	}
	return 0x821393FC;
} // Block from 821393F8h-821393FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821393FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821393FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821393FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821393FC);
		  /* 821393FCh */ case    0:  		/* li R5, 6 */
		/* 821393FCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821393FCh case    0:*/		return 0x82139400;
	}
	return 0x82139400;
} // Block from 821393FCh-82139400h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82139400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139400);
		  /* 82139400h */ case    0:  		/* ori R4, R4, 3 */
		/* 82139400h case    0:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 82139400h case    0:*/		return 0x82139404;
		  /* 82139404h */ case    1:  		/* li R7, 0 */
		/* 82139404h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82139404h case    1:*/		return 0x82139408;
		  /* 82139408h */ case    2:  		/* bl -249304 */
		/* 82139408h case    2:*/		regs.LR = 0x8213940C; return 0x820FC630;
		/* 82139408h case    2:*/		return 0x8213940C;
		  /* 8213940Ch */ case    3:  		/* or. R31, R3, R3 */
		/* 8213940Ch case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8213940Ch case    3:*/		return 0x82139410;
		  /* 82139410h */ case    4:  		/* bc 12, CR0_LT, 720 */
		/* 82139410h case    4:*/		if ( regs.CR[0].lt ) { return 0x821396E0;  }
		/* 82139410h case    4:*/		return 0x82139414;
		  /* 82139414h */ case    5:  		/* addi R24, R24, 1 */
		/* 82139414h case    5:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82139414h case    5:*/		return 0x82139418;
		  /* 82139418h */ case    6:  		/* addi R26, R26, 4 */
		/* 82139418h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82139418h case    6:*/		return 0x8213941C;
		  /* 8213941Ch */ case    7:  		/* cmplw CR6, R24, R19 */
		/* 8213941Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R19);
		/* 8213941Ch case    7:*/		return 0x82139420;
		  /* 82139420h */ case    8:  		/* bc 12, CR6_LT, -592 */
		/* 82139420h case    8:*/		if ( regs.CR[6].lt ) { return 0x821391D0;  }
		/* 82139420h case    8:*/		return 0x82139424;
	}
	return 0x82139424;
} // Block from 82139400h-82139424h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82139424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139424);
		  /* 82139424h */ case    0:  		/* mr R26, R20 */
		/* 82139424h case    0:*/		regs.R26 = regs.R20;
		/* 82139424h case    0:*/		return 0x82139428;
		  /* 82139428h */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 82139428h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82139428h case    1:*/		return 0x8213942C;
		  /* 8213942Ch */ case    2:  		/* bc 12, CR6_EQ, 340 */
		/* 8213942Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82139580;  }
		/* 8213942Ch case    2:*/		return 0x82139430;
		  /* 82139430h */ case    3:  		/* mr R27, R20 */
		/* 82139430h case    3:*/		regs.R27 = regs.R20;
		/* 82139430h case    3:*/		return 0x82139434;
		  /* 82139434h */ case    4:  		/* rlwinm R29, R26, 2, 0, 29 */
		/* 82139434h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R26);
		/* 82139434h case    4:*/		return 0x82139438;
		  /* 82139438h */ case    5:  		/* li R30, 12 */
		/* 82139438h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0xC);
		/* 82139438h case    5:*/		return 0x8213943C;
		  /* 8213943Ch */ case    6:  		/* addi R11, R1, 152 */
		/* 8213943Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x98);
		/* 8213943Ch case    6:*/		return 0x82139440;
		  /* 82139440h */ case    7:  		/* fmr FR1, FR31 */
		/* 82139440h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82139440h case    7:*/		return 0x82139444;
		  /* 82139444h */ case    8:  		/* addi R10, R1, 168 */
		/* 82139444h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA8);
		/* 82139444h case    8:*/		return 0x82139448;
		  /* 82139448h */ case    9:  		/* addi R9, R1, 120 */
		/* 82139448h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x78);
		/* 82139448h case    9:*/		return 0x8213944C;
		  /* 8213944Ch */ case   10:  		/* addi R8, R1, 184 */
		/* 8213944Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB8);
		/* 8213944Ch case   10:*/		return 0x82139450;
		  /* 82139450h */ case   11:  		/* addi R28, R30, -12 */
		/* 82139450h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0xFFFFFFF4);
		/* 82139450h case   11:*/		return 0x82139454;
		  /* 82139454h */ case   12:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82139454h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82139454h case   12:*/		return 0x82139458;
		  /* 82139458h */ case   13:  		/* li R6, 0 */
		/* 82139458h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139458h case   13:*/		return 0x8213945C;
		  /* 8213945Ch */ case   14:  		/* lwzx R10, <#[R29 + R10]> */
		/* 8213945Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 8213945Ch case   14:*/		return 0x82139460;
		  /* 82139460h */ case   15:  		/* li R5, 0 */
		/* 82139460h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82139460h case   15:*/		return 0x82139464;
		  /* 82139464h */ case   16:  		/* lwzx R31, <#[R29 + R9]> */
		/* 82139464h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 82139464h case   16:*/		return 0x82139468;
		  /* 82139468h */ case   17:  		/* mr R3, R25 */
		/* 82139468h case   17:*/		regs.R3 = regs.R25;
		/* 82139468h case   17:*/		return 0x8213946C;
		  /* 8213946Ch */ case   18:  		/* add R9, R10, R27 */
		/* 8213946Ch case   18:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R27);
		/* 8213946Ch case   18:*/		return 0x82139470;
		  /* 82139470h */ case   19:  		/* lwzx R10, <#[R29 + R8]> */
		/* 82139470h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R8 + 0x00000000) );
		/* 82139470h case   19:*/		return 0x82139474;
		  /* 82139474h */ case   20:  		/* lwz R8, <#[R11 + 8]> */
		/* 82139474h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82139474h case   20:*/		return 0x82139478;
		  /* 82139478h */ case   21:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82139478h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82139478h case   21:*/		return 0x8213947C;
		  /* 8213947Ch */ case   22:  		/* add R10, R10, R27 */
		/* 8213947Ch case   22:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 8213947Ch case   22:*/		return 0x82139480;
		  /* 82139480h */ case   23:  		/* lwz R7, <#[R31 + 8]> */
		/* 82139480h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 82139480h case   23:*/		return 0x82139484;
		  /* 82139484h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139484h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139484h case   24:*/		return 0x82139488;
		  /* 82139488h */ case   25:  		/* lwzx R9, <#[R9 + R8]> */
		/* 82139488h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82139488h case   25:*/		return 0x8213948C;
		  /* 8213948Ch */ case   26:  		/* stwx R9, <#[R7 + R28]> */
		/* 8213948Ch case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + regs.R28 + 0x00000000) );
		/* 8213948Ch case   26:*/		return 0x82139490;
		  /* 82139490h */ case   27:  		/* lwz R11, <#[R11 + 8]> */
		/* 82139490h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82139490h case   27:*/		return 0x82139494;
		  /* 82139494h */ case   28:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82139494h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82139494h case   28:*/		return 0x82139498;
		  /* 82139498h */ case   29:  		/* lwz R9, <#[R31 + 8]> */
		/* 82139498h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82139498h case   29:*/		return 0x8213949C;
		  /* 8213949Ch */ case   30:  		/* stwx R11, <#[R9 + R30]> */
		/* 8213949Ch case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 8213949Ch case   30:*/		return 0x821394A0;
		  /* 821394A0h */ case   31:  		/* lwz R11, <#[R31 + 8]> */
		/* 821394A0h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821394A0h case   31:*/		return 0x821394A4;
		  /* 821394A4h */ case   32:  		/* lwz R10, <#[R25 + 20]> */
		/* 821394A4h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821394A4h case   32:*/		return 0x821394A8;
		  /* 821394A8h */ case   33:  		/* lwz R4, <#[R25 + 128]> */
		/* 821394A8h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000080) );
		/* 821394A8h case   33:*/		return 0x821394AC;
		  /* 821394ACh */ case   34:  		/* lwzx R9, <#[R11 + R30]> */
		/* 821394ACh case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821394ACh case   34:*/		return 0x821394B0;
		  /* 821394B0h */ case   35:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821394B0h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821394B0h case   35:*/		return 0x821394B4;
		  /* 821394B4h */ case   36:  		/* lwzx R11, <#[R11 + R28]> */
		/* 821394B4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821394B4h case   36:*/		return 0x821394B8;
		  /* 821394B8h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821394B8h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821394B8h case   37:*/		return 0x821394BC;
		  /* 821394BCh */ case   38:  		/* lwzx R24, <#[R11 + R10]> */
		/* 821394BCh case   38:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821394BCh case   38:*/		return 0x821394C0;
		  /* 821394C0h */ case   39:  		/* lwzx R23, <#[R9 + R10]> */
		/* 821394C0h case   39:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821394C0h case   39:*/		return 0x821394C4;
		  /* 821394C4h */ case   40:  		/* bl -246428 */
		/* 821394C4h case   40:*/		regs.LR = 0x821394C8; return 0x820FD228;
		/* 821394C4h case   40:*/		return 0x821394C8;
		  /* 821394C8h */ case   41:  		/* mr R9, R3 */
		/* 821394C8h case   41:*/		regs.R9 = regs.R3;
		/* 821394C8h case   41:*/		return 0x821394CC;
		  /* 821394CCh */ case   42:  		/* lwz R10, <#[R25 + 20]> */
		/* 821394CCh case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821394CCh case   42:*/		return 0x821394D0;
		  /* 821394D0h */ case   43:  		/* lwz R8, <#[R31 + 8]> */
		/* 821394D0h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821394D0h case   43:*/		return 0x821394D4;
		  /* 821394D4h */ case   44:  		/* mr R3, R24 */
		/* 821394D4h case   44:*/		regs.R3 = regs.R24;
		/* 821394D4h case   44:*/		return 0x821394D8;
		  /* 821394D8h */ case   45:  		/* rlwinm R7, R9, 2, 0, 29 */
		/* 821394D8h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821394D8h case   45:*/		return 0x821394DC;
		  /* 821394DCh */ case   46:  		/* addi R11, R1, 200 */
		/* 821394DCh case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC8);
		/* 821394DCh case   46:*/		return 0x821394E0;
		  /* 821394E0h */ case   47:  		/* lwzx R24, <#[R7 + R10]> */
		/* 821394E0h case   47:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 821394E0h case   47:*/		return 0x821394E4;
		  /* 821394E4h */ case   48:  		/* stwx R9, <#[R8 + R30]> */
		/* 821394E4h case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 821394E4h case   48:*/		return 0x821394E8;
		  /* 821394E8h */ case   49:  		/* lwz R10, <#[R25 + 20]> */
		/* 821394E8h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821394E8h case   49:*/		return 0x821394EC;
		  /* 821394ECh */ case   50:  		/* lwzx R11, <#[R29 + R11]> */
		/* 821394ECh case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 821394ECh case   50:*/		return 0x821394F0;
		  /* 821394F0h */ case   51:  		/* lwz R11, <#[R11 + 8]> */
		/* 821394F0h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821394F0h case   51:*/		return 0x821394F4;
		  /* 821394F4h */ case   52:  		/* lwzx R11, <#[R11 + R28]> */
		/* 821394F4h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821394F4h case   52:*/		return 0x821394F8;
		  /* 821394F8h */ case   53:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821394F8h case   53:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821394F8h case   53:*/		return 0x821394FC;
		  /* 821394FCh */ case   54:  		/* lwzx R4, <#[R11 + R10]> */
		/* 821394FCh case   54:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821394FCh case   54:*/		return 0x82139500;
		  /* 82139500h */ case   55:  		/* bl -248152 */
		/* 82139500h case   55:*/		regs.LR = 0x82139504; return 0x820FCBA8;
		/* 82139500h case   55:*/		return 0x82139504;
		  /* 82139504h */ case   56:  		/* lwz R11, <#[R17]> */
		/* 82139504h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 82139504h case   56:*/		return 0x82139508;
		  /* 82139508h */ case   57:  		/* mr R3, R24 */
		/* 82139508h case   57:*/		regs.R3 = regs.R24;
		/* 82139508h case   57:*/		return 0x8213950C;
		  /* 8213950Ch */ case   58:  		/* lwz R10, <#[R17 + 8]> */
		/* 8213950Ch case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 8213950Ch case   58:*/		return 0x82139510;
		  /* 82139510h */ case   59:  		/* rlwinm R11, R11, 2, 10, 29 */
		/* 82139510h case   59:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R11,regs.R11);
		/* 82139510h case   59:*/		return 0x82139514;
		  /* 82139514h */ case   60:  		/* lwz R9, <#[R25 + 20]> */
		/* 82139514h case   60:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000014) );
		/* 82139514h case   60:*/		return 0x82139518;
		  /* 82139518h */ case   61:  		/* lwz R28, <#[R23 + 60]> */
		/* 82139518h case   61:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R23 + 0x0000003C) );
		/* 82139518h case   61:*/		return 0x8213951C;
		  /* 8213951Ch */ case   62:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213951Ch case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213951Ch case   62:*/		return 0x82139520;
		  /* 82139520h */ case   63:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139520h case   63:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139520h case   63:*/		return 0x82139524;
		  /* 82139524h */ case   64:  		/* lwzx R4, <#[R11 + R9]> */
		/* 82139524h case   64:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82139524h case   64:*/		return 0x82139528;
		  /* 82139528h */ case   65:  		/* bl -248192 */
		/* 82139528h case   65:*/		regs.LR = 0x8213952C; return 0x820FCBA8;
		/* 82139528h case   65:*/		return 0x8213952C;
		  /* 8213952Ch */ case   66:  		/* stw R27, <#[R24 + 16]> */
		/* 8213952Ch case   66:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R24 + 0x00000010) );
		/* 8213952Ch case   66:*/		return 0x82139530;
		  /* 82139530h */ case   67:  		/* stw R28, <#[R24 + 60]> */
		/* 82139530h case   67:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R24 + 0x0000003C) );
		/* 82139530h case   67:*/		return 0x82139534;
		  /* 82139534h */ case   68:  		/* lwz R11, <#[R18]> */
		/* 82139534h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 82139534h case   68:*/		return 0x82139538;
		  /* 82139538h */ case   69:  		/* lwz R10, <#[R11]> */
		/* 82139538h case   69:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82139538h case   69:*/		return 0x8213953C;
		  /* 8213953Ch */ case   70:  		/* cmplw CR6, R10, R16 */
		/* 8213953Ch case   70:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 8213953Ch case   70:*/		return 0x82139540;
		  /* 82139540h */ case   71:  		/* bc 4, CR6_EQ, 36 */
		/* 82139540h case   71:*/		if ( !regs.CR[6].eq ) { return 0x82139564;  }
		/* 82139540h case   71:*/		return 0x82139544;
		  /* 82139544h */ case   72:  		/* addi R10, R19, -1 */
		/* 82139544h case   72:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R19,0xFFFFFFFF);
		/* 82139544h case   72:*/		return 0x82139548;
		  /* 82139548h */ case   73:  		/* cmplw CR6, R26, R10 */
		/* 82139548h case   73:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 82139548h case   73:*/		return 0x8213954C;
		  /* 8213954Ch */ case   74:  		/* bc 4, CR6_EQ, 24 */
		/* 8213954Ch case   74:*/		if ( !regs.CR[6].eq ) { return 0x82139564;  }
		/* 8213954Ch case   74:*/		return 0x82139550;
		  /* 82139550h */ case   75:  		/* lwz R10, <#[R11 + 8]> */
		/* 82139550h case   75:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82139550h case   75:*/		return 0x82139554;
		  /* 82139554h */ case   76:  		/* addi R11, R30, 12 */
		/* 82139554h case   76:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xC);
		/* 82139554h case   76:*/		return 0x82139558;
		  /* 82139558h */ case   77:  		/* lwz R9, <#[R31 + 8]> */
		/* 82139558h case   77:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82139558h case   77:*/		return 0x8213955C;
		  /* 8213955Ch */ case   78:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8213955Ch case   78:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213955Ch case   78:*/		return 0x82139560;
		  /* 82139560h */ case   79:  		/* stwx R10, <#[R9 + R11]> */
		/* 82139560h case   79:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82139560h case   79:*/		return 0x82139564;
	}
	return 0x82139564;
} // Block from 82139424h-82139564h (80 instructions)

//////////////////////////////////////////////////////
// Block at 82139564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139564);
		  /* 82139564h */ case    0:  		/* addi R30, R30, 4 */
		/* 82139564h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82139564h case    0:*/		return 0x82139568;
		  /* 82139568h */ case    1:  		/* addi R27, R27, 1 */
		/* 82139568h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82139568h case    1:*/		return 0x8213956C;
		  /* 8213956Ch */ case    2:  		/* cmplwi CR6, R30, 24 */
		/* 8213956Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000018);
		/* 8213956Ch case    2:*/		return 0x82139570;
		  /* 82139570h */ case    3:  		/* bc 12, CR6_LT, -308 */
		/* 82139570h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213943C;  }
		/* 82139570h case    3:*/		return 0x82139574;
		  /* 82139574h */ case    4:  		/* addi R26, R26, 1 */
		/* 82139574h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82139574h case    4:*/		return 0x82139578;
		  /* 82139578h */ case    5:  		/* cmplw CR6, R26, R19 */
		/* 82139578h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R19);
		/* 82139578h case    5:*/		return 0x8213957C;
		  /* 8213957Ch */ case    6:  		/* bc 12, CR6_LT, -332 */
		/* 8213957Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x82139430;  }
		/* 8213957Ch case    6:*/		return 0x82139580;
	}
	return 0x82139580;
} // Block from 82139564h-82139580h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82139580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139580);
		  /* 82139580h */ case    0:  		/* addi R11, R1, 120 */
		/* 82139580h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 82139580h case    0:*/		return 0x82139584;
		  /* 82139584h */ case    1:  		/* rlwinm R8, R19, 2, 0, 29 */
		/* 82139584h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R19);
		/* 82139584h case    1:*/		return 0x82139588;
	}
	return 0x82139588;
} // Block from 82139580h-82139588h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139588h
// Function '?MatchDep@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@I0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139588);
		  /* 82139588h */ case    0:  		/* li R10, 4 */
		/* 82139588h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82139588h case    0:*/		return 0x8213958C;
		  /* 8213958Ch */ case    1:  		/* add R9, R8, R11 */
		/* 8213958Ch case    1:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R11);
		/* 8213958Ch case    1:*/		return 0x82139590;
		  /* 82139590h */ case    2:  		/* mr R11, R20 */
		/* 82139590h case    2:*/		regs.R11 = regs.R20;
		/* 82139590h case    2:*/		return 0x82139594;
		  /* 82139594h */ case    3:  		/* mtspr CTR, R10 */
		/* 82139594h case    3:*/		regs.CTR = regs.R10;
		/* 82139594h case    3:*/		return 0x82139598;
		  /* 82139598h */ case    4:  		/* lwz R10, <#[R9 - 4]> */
		/* 82139598h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 82139598h case    4:*/		return 0x8213959C;
		  /* 8213959Ch */ case    5:  		/* lwz R9, <#[R18]> */
		/* 8213959Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x00000000) );
		/* 8213959Ch case    5:*/		return 0x821395A0;
		  /* 821395A0h */ case    6:  		/* lwz R7, <#[R10 + 16]> */
		/* 821395A0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000010) );
		/* 821395A0h case    6:*/		return 0x821395A4;
		  /* 821395A4h */ case    7:  		/* lwz R9, <#[R9 + 16]> */
		/* 821395A4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 821395A4h case    7:*/		return 0x821395A8;
		  /* 821395A8h */ case    8:  		/* lwzx R9, <#[R9 + R11]> */
		/* 821395A8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821395A8h case    8:*/		return 0x821395AC;
		  /* 821395ACh */ case    9:  		/* stwx R9, <#[R7 + R11]> */
		/* 821395ACh case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821395ACh case    9:*/		return 0x821395B0;
		  /* 821395B0h */ case   10:  		/* addi R11, R11, 4 */
		/* 821395B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821395B0h case   10:*/		return 0x821395B4;
		  /* 821395B4h */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 821395B4h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213959C;  }
		/* 821395B4h case   11:*/		return 0x821395B8;
		  /* 821395B8h */ case   12:  		/* mr R11, R20 */
		/* 821395B8h case   12:*/		regs.R11 = regs.R20;
		/* 821395B8h case   12:*/		return 0x821395BC;
		  /* 821395BCh */ case   13:  		/* cmplwi CR6, R19, 0 */
		/* 821395BCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821395BCh case   13:*/		return 0x821395C0;
		  /* 821395C0h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 821395C0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821395EC;  }
		/* 821395C0h case   14:*/		return 0x821395C4;
		  /* 821395C4h */ case   15:  		/* addi R10, R1, 104 */
		/* 821395C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 821395C4h case   15:*/		return 0x821395C8;
		  /* 821395C8h */ case   16:  		/* lwz R9, <#[R10]> */
		/* 821395C8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821395C8h case   16:*/		return 0x821395CC;
		  /* 821395CCh */ case   17:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821395CCh case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821395CCh case   17:*/		return 0x821395D0;
		  /* 821395D0h */ case   18:  		/* lwzx R9, <#[R9 + R15]> */
		/* 821395D0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R15 + 0x00000000) );
		/* 821395D0h case   18:*/		return 0x821395D4;
		  /* 821395D4h */ case   19:  		/* cmplwi CR6, R9, 0 */
		/* 821395D4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821395D4h case   19:*/		return 0x821395D8;
		  /* 821395D8h */ case   20:  		/* bc 4, CR6_EQ, 468 */
		/* 821395D8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821397AC;  }
		/* 821395D8h case   20:*/		return 0x821395DC;
		  /* 821395DCh */ case   21:  		/* addi R11, R11, 1 */
		/* 821395DCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821395DCh case   21:*/		return 0x821395E0;
		  /* 821395E0h */ case   22:  		/* addi R10, R10, 4 */
		/* 821395E0h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821395E0h case   22:*/		return 0x821395E4;
		  /* 821395E4h */ case   23:  		/* cmplw CR6, R11, R19 */
		/* 821395E4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821395E4h case   23:*/		return 0x821395E8;
		  /* 821395E8h */ case   24:  		/* bc 12, CR6_LT, -32 */
		/* 821395E8h case   24:*/		if ( regs.CR[6].lt ) { return 0x821395C8;  }
		/* 821395E8h case   24:*/		return 0x821395EC;
	}
	return 0x821395EC;
} // Block from 82139588h-821395ECh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821395ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821395EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821395EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821395EC);
		  /* 821395ECh */ case    0:  		/* lwz R11, <#[R18]> */
		/* 821395ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821395ECh case    0:*/		return 0x821395F0;
		  /* 821395F0h */ case    1:  		/* lwz R10, <#[R25 + 20]> */
		/* 821395F0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821395F0h case    1:*/		return 0x821395F4;
		  /* 821395F4h */ case    2:  		/* lwz R9, <#[R25 + 16]> */
		/* 821395F4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000010) );
		/* 821395F4h case    2:*/		return 0x821395F8;
		  /* 821395F8h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821395F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821395F8h case    3:*/		return 0x821395FC;
		  /* 821395FCh */ case    4:  		/* lwz R11, <#[R11]> */
		/* 821395FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821395FCh case    4:*/		return 0x82139600;
		  /* 82139600h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139600h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139600h case    5:*/		return 0x82139604;
		  /* 82139604h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139604h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139604h case    6:*/		return 0x82139608;
		  /* 82139608h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82139608h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82139608h case    7:*/		return 0x8213960C;
		  /* 8213960Ch */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213960Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213960Ch case    8:*/		return 0x82139610;
		  /* 82139610h */ case    9:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82139610h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82139610h case    9:*/		return 0x82139614;
		  /* 82139614h */ case   10:  		/* lwz R9, <#[R10 + 4]> */
		/* 82139614h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82139614h case   10:*/		return 0x82139618;
		  /* 82139618h */ case   11:  		/* rlwinm. R10, R9, 0, 24, 24 */
		/* 82139618h case   11:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R9);
		/* 82139618h case   11:*/		return 0x8213961C;
		  /* 8213961Ch */ case   12:  		/* bc 12, CR0_EQ, 360 */
		/* 8213961Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x82139784;  }
		/* 8213961Ch case   12:*/		return 0x82139620;
		  /* 82139620h */ case   13:  		/* andi. R10, R9, 2112 */
		/* 82139620h case   13:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R9,0x840);
		/* 82139620h case   13:*/		return 0x82139624;
		  /* 82139624h */ case   14:  		/* cmplwi CR0, R10, 0 */
		/* 82139624h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82139624h case   14:*/		return 0x82139628;
		  /* 82139628h */ case   15:  		/* addi R10, R1, 104 */
		/* 82139628h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 82139628h case   15:*/		return 0x8213962C;
		  /* 8213962Ch */ case   16:  		/* add R10, R8, R10 */
		/* 8213962Ch case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8213962Ch case   16:*/		return 0x82139630;
		  /* 82139630h */ case   17:  		/* bc 12, CR0_EQ, 64 */
		/* 82139630h case   17:*/		if ( regs.CR[0].eq ) { return 0x82139670;  }
		/* 82139630h case   17:*/		return 0x82139634;
		  /* 82139634h */ case   18:  		/* lwz R11, <#[R11 + 12]> */
		/* 82139634h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82139634h case   18:*/		return 0x82139638;
		  /* 82139638h */ case   19:  		/* lwz R7, <#[R10 - 4]> */
		/* 82139638h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 82139638h case   19:*/		return 0x8213963C;
		  /* 8213963Ch */ case   20:  		/* cmplw CR6, R7, R11 */
		/* 8213963Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8213963Ch case   20:*/		return 0x82139640;
		  /* 82139640h */ case   21:  		/* bc 12, CR6_EQ, 56 */
		/* 82139640h case   21:*/		if ( regs.CR[6].eq ) { return 0x82139678;  }
		/* 82139640h case   21:*/		return 0x82139644;
		  /* 82139644h */ case   22:  		/* rlwinm. R11, R9, 0, 20, 20 */
		/* 82139644h case   22:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R9);
		/* 82139644h case   22:*/		return 0x82139648;
		  /* 82139648h */ case   23:  		/* lwz R11, <#[R1 + 412]> */
		/* 82139648h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019C) );
		/* 82139648h case   23:*/		return 0x8213964C;
		  /* 8213964Ch */ case   24:  		/* rlwinm R10, R14, 2, 0, 29 */
		/* 8213964Ch case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R14);
		/* 8213964Ch case   24:*/		return 0x82139650;
		  /* 82139650h */ case   25:  		/* li R5, 4515 */
		/* 82139650h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x11A3);
		/* 82139650h case   25:*/		return 0x82139654;
		  /* 82139654h */ case   26:  		/* mr R3, R25 */
		/* 82139654h case   26:*/		regs.R3 = regs.R25;
		/* 82139654h case   26:*/		return 0x82139658;
		  /* 82139658h */ case   27:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82139658h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82139658h case   27:*/		return 0x8213965C;
		  /* 8213965Ch */ case   28:  		/* lwz R4, <#[R11 + 60]> */
		/* 8213965Ch case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213965Ch case   28:*/		return 0x82139660;
		  /* 82139660h */ case   29:  		/* bc 12, CR0_EQ, 320 */
		/* 82139660h case   29:*/		if ( regs.CR[0].eq ) { return 0x821397A0;  }
		/* 82139660h case   29:*/		return 0x82139664;
		  /* 82139664h */ case   30:  		/* lis R9, -32253 */
		/* 82139664h case   30:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82139664h case   30:*/		return 0x82139668;
		  /* 82139668h */ case   31:  		/* addi R6, R9, 22656 */
		/* 82139668h case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x5880);
		/* 82139668h case   31:*/		return 0x8213966C;
		  /* 8213966Ch */ case   32:  		/* b 316 */
		/* 8213966Ch case   32:*/		return 0x821397A8;
		/* 8213966Ch case   32:*/		return 0x82139670;
	}
	return 0x82139670;
} // Block from 821395ECh-82139670h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82139670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139670);
		  /* 82139670h */ case    0:  		/* lwz R10, <#[R10 - 4]> */
		/* 82139670h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 82139670h case    0:*/		return 0x82139674;
		  /* 82139674h */ case    1:  		/* stw R10, <#[R11 + 12]> */
		/* 82139674h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82139674h case    1:*/		return 0x82139678;
	}
	return 0x82139678;
} // Block from 82139670h-82139678h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139678);
		  /* 82139678h */ case    0:  		/* mr R28, R20 */
		/* 82139678h case    0:*/		regs.R28 = regs.R20;
		/* 82139678h case    0:*/		return 0x8213967C;
		  /* 8213967Ch */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 8213967Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 8213967Ch case    1:*/		return 0x82139680;
		  /* 82139680h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82139680h case    2:*/		if ( regs.CR[6].eq ) { return 0x821396C8;  }
		/* 82139680h case    2:*/		return 0x82139684;
		  /* 82139684h */ case    3:  		/* mr R30, R20 */
		/* 82139684h case    3:*/		regs.R30 = regs.R20;
		/* 82139684h case    3:*/		return 0x82139688;
		  /* 82139688h */ case    4:  		/* addi R11, R1, 104 */
		/* 82139688h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 82139688h case    4:*/		return 0x8213968C;
		  /* 8213968Ch */ case    5:  		/* addi R29, R1, 120 */
		/* 8213968Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x78);
		/* 8213968Ch case    5:*/		return 0x82139690;
		  /* 82139690h */ case    6:  		/* mr R3, R25 */
		/* 82139690h case    6:*/		regs.R3 = regs.R25;
		/* 82139690h case    6:*/		return 0x82139694;
		  /* 82139694h */ case    7:  		/* lwzx R11, <#[R30 + R11]> */
		/* 82139694h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82139694h case    7:*/		return 0x82139698;
		  /* 82139698h */ case    8:  		/* lwzx R4, <#[R30 + R29]> */
		/* 82139698h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 82139698h case    8:*/		return 0x8213969C;
		  /* 8213969Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213969Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213969Ch case    9:*/		return 0x821396A0;
		  /* 821396A0h */ case   10:  		/* stwx R4, <#[R11 + R15]> */
		/* 821396A0h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821396A0h case   10:*/		return 0x821396A4;
		  /* 821396A4h */ case   11:  		/* bl -247276 */
		/* 821396A4h case   11:*/		regs.LR = 0x821396A8; return 0x820FD0B8;
		/* 821396A4h case   11:*/		return 0x821396A8;
		  /* 821396A8h */ case   12:  		/* or. R31, R3, R3 */
		/* 821396A8h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821396A8h case   12:*/		return 0x821396AC;
		  /* 821396ACh */ case   13:  		/* bc 12, CR0_LT, 52 */
		/* 821396ACh case   13:*/		if ( regs.CR[0].lt ) { return 0x821396E0;  }
		/* 821396ACh case   13:*/		return 0x821396B0;
		  /* 821396B0h */ case   14:  		/* addi R28, R28, 1 */
		/* 821396B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821396B0h case   14:*/		return 0x821396B4;
		  /* 821396B4h */ case   15:  		/* stwx R20, <#[R30 + R29]> */
		/* 821396B4h case   15:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 821396B4h case   15:*/		return 0x821396B8;
		  /* 821396B8h */ case   16:  		/* stw R20, <#[R18]> */
		/* 821396B8h case   16:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R18 + 0x00000000) );
		/* 821396B8h case   16:*/		return 0x821396BC;
		  /* 821396BCh */ case   17:  		/* addi R30, R30, 4 */
		/* 821396BCh case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821396BCh case   17:*/		return 0x821396C0;
		  /* 821396C0h */ case   18:  		/* cmplw CR6, R28, R19 */
		/* 821396C0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R19);
		/* 821396C0h case   18:*/		return 0x821396C4;
		  /* 821396C4h */ case   19:  		/* bc 12, CR6_LT, -60 */
		/* 821396C4h case   19:*/		if ( regs.CR[6].lt ) { return 0x82139688;  }
		/* 821396C4h case   19:*/		return 0x821396C8;
	}
	return 0x821396C8;
} // Block from 82139678h-821396C8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821396C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821396C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821396C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821396C8);
		  /* 821396C8h */ case    0:  		/* lwz R11, <#[R1 + 420]> */
		/* 821396C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001A4) );
		/* 821396C8h case    0:*/		return 0x821396CC;
		  /* 821396CCh */ case    1:  		/* addi R14, R14, 1 */
		/* 821396CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 821396CCh case    1:*/		return 0x821396D0;
		  /* 821396D0h */ case    2:  		/* addi R18, R18, 4 */
		/* 821396D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 821396D0h case    2:*/		return 0x821396D4;
		  /* 821396D4h */ case    3:  		/* cmplw CR6, R14, R11 */
		/* 821396D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R11);
		/* 821396D4h case    3:*/		return 0x821396D8;
		  /* 821396D8h */ case    4:  		/* bc 12, CR6_LT, -1644 */
		/* 821396D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213906C;  }
		/* 821396D8h case    4:*/		return 0x821396DC;
	}
	return 0x821396DC;
} // Block from 821396C8h-821396DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821396DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821396DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821396DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821396DC);
		  /* 821396DCh */ case    0:  		/* mr R31, R20 */
		/* 821396DCh case    0:*/		regs.R31 = regs.R20;
		/* 821396DCh case    0:*/		return 0x821396E0;
	}
	return 0x821396E0;
} // Block from 821396DCh-821396E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821396E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821396E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821396E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821396E0);
		  /* 821396E0h */ case    0:  		/* addi R30, R1, 120 */
		/* 821396E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x78);
		/* 821396E0h case    0:*/		return 0x821396E4;
		  /* 821396E4h */ case    1:  		/* li R28, 3 */
		/* 821396E4h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 821396E4h case    1:*/		return 0x821396E8;
		  /* 821396E8h */ case    2:  		/* lwz R29, <#[R30]> */
		/* 821396E8h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 821396E8h case    2:*/		return 0x821396EC;
		  /* 821396ECh */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821396ECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821396ECh case    3:*/		return 0x821396F0;
		  /* 821396F0h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 821396F0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82139704;  }
		/* 821396F0h case    4:*/		return 0x821396F4;
		  /* 821396F4h */ case    5:  		/* mr R3, R29 */
		/* 821396F4h case    5:*/		regs.R3 = regs.R29;
		/* 821396F4h case    5:*/		return 0x821396F8;
		  /* 821396F8h */ case    6:  		/* bl 933064 */
		/* 821396F8h case    6:*/		regs.LR = 0x821396FC; return 0x8221D3C0;
		/* 821396F8h case    6:*/		return 0x821396FC;
		  /* 821396FCh */ case    7:  		/* mr R3, R29 */
		/* 821396FCh case    7:*/		regs.R3 = regs.R29;
		/* 821396FCh case    7:*/		return 0x82139700;
		  /* 82139700h */ case    8:  		/* bl -250128 */
		/* 82139700h case    8:*/		regs.LR = 0x82139704; return 0x820FC5F0;
		/* 82139700h case    8:*/		return 0x82139704;
	}
	return 0x82139704;
} // Block from 821396E0h-82139704h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82139704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139704);
		  /* 82139704h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82139704h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82139704h case    0:*/		return 0x82139708;
		  /* 82139708h */ case    1:  		/* addi R30, R30, 4 */
		/* 82139708h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82139708h case    1:*/		return 0x8213970C;
		  /* 8213970Ch */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 8213970Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821396E8;  }
		/* 8213970Ch case    2:*/		return 0x82139710;
		  /* 82139710h */ case    3:  		/* mr R3, R31 */
		/* 82139710h case    3:*/		regs.R3 = regs.R31;
		/* 82139710h case    3:*/		return 0x82139714;
		  /* 82139714h */ case    4:  		/* addi R1, R1, 384 */
		/* 82139714h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82139714h case    4:*/		return 0x82139718;
		  /* 82139718h */ case    5:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82139718h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82139718h case    5:*/		return 0x8213971C;
		  /* 8213971Ch */ case    6:  		/* b -689324 */
		/* 8213971Ch case    6:*/		return 0x82091270;
		/* 8213971Ch case    6:*/		return 0x82139720;
	}
	return 0x82139720;
} // Block from 82139704h-82139720h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82139720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139720);
		  /* 82139720h */ case    0:  		/* lis R11, -32253 */
		/* 82139720h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82139720h case    0:*/		return 0x82139724;
		  /* 82139724h */ case    1:  		/* lwz R4, <#[R3 + 60]> */
		/* 82139724h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000003C) );
		/* 82139724h case    1:*/		return 0x82139728;
		  /* 82139728h */ case    2:  		/* li R5, 4524 */
		/* 82139728h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11AC);
		/* 82139728h case    2:*/		return 0x8213972C;
		  /* 8213972Ch */ case    3:  		/* addi R6, R11, 22584 */
		/* 8213972Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5838);
		/* 8213972Ch case    3:*/		return 0x82139730;
		  /* 82139730h */ case    4:  		/* b 100 */
		/* 82139730h case    4:*/		return 0x82139794;
		/* 82139730h case    4:*/		return 0x82139734;
	}
	return 0x82139734;
} // Block from 82139720h-82139734h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82139734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139734);
		  /* 82139734h */ case    0:  		/* lis R11, -32253 */
		/* 82139734h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82139734h case    0:*/		return 0x82139738;
		  /* 82139738h */ case    1:  		/* lbz R7, <#[R25 + 203]> */
		/* 82139738h case    1:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R25 + 0x000000CB) );
		/* 82139738h case    1:*/		return 0x8213973C;
		  /* 8213973Ch */ case    2:  		/* li R5, 4525 */
		/* 8213973Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11AD);
		/* 8213973Ch case    2:*/		return 0x82139740;
		  /* 82139740h */ case    3:  		/* addi R6, R11, 22440 */
		/* 82139740h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x57A8);
		/* 82139740h case    3:*/		return 0x82139744;
		  /* 82139744h */ case    4:  		/* li R4, 0 */
		/* 82139744h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82139744h case    4:*/		return 0x82139748;
		  /* 82139748h */ case    5:  		/* mr R3, R25 */
		/* 82139748h case    5:*/		regs.R3 = regs.R25;
		/* 82139748h case    5:*/		return 0x8213974C;
		  /* 8213974Ch */ case    6:  		/* b 92 */
		/* 8213974Ch case    6:*/		return 0x821397A8;
		/* 8213974Ch case    6:*/		return 0x82139750;
	}
	return 0x82139750;
} // Block from 82139734h-82139750h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82139750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139750);
		  /* 82139750h */ case    0:  		/* lis R11, -32253 */
		/* 82139750h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82139750h case    0:*/		return 0x82139754;
		  /* 82139754h */ case    1:  		/* li R5, 4526 */
		/* 82139754h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11AE);
		/* 82139754h case    1:*/		return 0x82139758;
		  /* 82139758h */ case    2:  		/* addi R6, R11, 22352 */
		/* 82139758h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5750);
		/* 82139758h case    2:*/		return 0x8213975C;
		  /* 8213975Ch */ case    3:  		/* b 52 */
		/* 8213975Ch case    3:*/		return 0x82139790;
		/* 8213975Ch case    3:*/		return 0x82139760;
	}
	return 0x82139760;
} // Block from 82139750h-82139760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82139760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139760);
		  /* 82139760h */ case    0:  		/* lis R11, -32253 */
		/* 82139760h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82139760h case    0:*/		return 0x82139764;
		  /* 82139764h */ case    1:  		/* li R5, 4527 */
		/* 82139764h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11AF);
		/* 82139764h case    1:*/		return 0x82139768;
		  /* 82139768h */ case    2:  		/* addi R6, R11, 22272 */
		/* 82139768h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5700);
		/* 82139768h case    2:*/		return 0x8213976C;
		  /* 8213976Ch */ case    3:  		/* b 36 */
		/* 8213976Ch case    3:*/		return 0x82139790;
		/* 8213976Ch case    3:*/		return 0x82139770;
	}
	return 0x82139770;
} // Block from 82139760h-82139770h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82139770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139770);
		  /* 82139770h */ case    0:  		/* lis R31, -32761 */
		/* 82139770h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 82139770h case    0:*/		return 0x82139774;
		  /* 82139774h */ case    1:  		/* ori R31, R31, 14 */
		/* 82139774h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 82139774h case    1:*/		return 0x82139778;
		  /* 82139778h */ case    2:  		/* b -152 */
		/* 82139778h case    2:*/		return 0x821396E0;
		/* 82139778h case    2:*/		return 0x8213977C;
	}
	return 0x8213977C;
} // Block from 82139770h-8213977Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213977Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213977C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213977C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213977C);
		  /* 8213977Ch */ case    0:  		/* li R31, 1 */
		/* 8213977Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 8213977Ch case    0:*/		return 0x82139780;
		  /* 82139780h */ case    1:  		/* b -160 */
		/* 82139780h case    1:*/		return 0x821396E0;
		/* 82139780h case    1:*/		return 0x82139784;
	}
	return 0x82139784;
} // Block from 8213977Ch-82139784h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139784);
		  /* 82139784h */ case    0:  		/* lis R11, -32253 */
		/* 82139784h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82139784h case    0:*/		return 0x82139788;
		  /* 82139788h */ case    1:  		/* li R5, 4812 */
		/* 82139788h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12CC);
		/* 82139788h case    1:*/		return 0x8213978C;
		  /* 8213978Ch */ case    2:  		/* addi R6, R11, 22228 */
		/* 8213978Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x56D4);
		/* 8213978Ch case    2:*/		return 0x82139790;
	}
	return 0x82139790;
} // Block from 82139784h-82139790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82139790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139790);
		  /* 82139790h */ case    0:  		/* li R4, 0 */
		/* 82139790h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82139790h case    0:*/		return 0x82139794;
	}
	return 0x82139794;
} // Block from 82139790h-82139794h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82139794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139794);
		  /* 82139794h */ case    0:  		/* mr R3, R25 */
		/* 82139794h case    0:*/		regs.R3 = regs.R25;
		/* 82139794h case    0:*/		return 0x82139798;
		  /* 82139798h */ case    1:  		/* bl -176232 */
		/* 82139798h case    1:*/		regs.LR = 0x8213979C; return 0x8210E730;
		/* 82139798h case    1:*/		return 0x8213979C;
		  /* 8213979Ch */ case    2:  		/* b 16 */
		/* 8213979Ch case    2:*/		return 0x821397AC;
		/* 8213979Ch case    2:*/		return 0x821397A0;
	}
	return 0x821397A0;
} // Block from 82139794h-821397A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821397A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821397A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821397A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821397A0);
		  /* 821397A0h */ case    0:  		/* lis R9, -32253 */
		/* 821397A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821397A0h case    0:*/		return 0x821397A4;
		  /* 821397A4h */ case    1:  		/* addi R6, R9, 22160 */
		/* 821397A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x5690);
		/* 821397A4h case    1:*/		return 0x821397A8;
	}
	return 0x821397A8;
} // Block from 821397A0h-821397A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821397A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821397A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821397A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821397A8);
		  /* 821397A8h */ case    0:  		/* bl -176248 */
		/* 821397A8h case    0:*/		regs.LR = 0x821397AC; return 0x8210E730;
		/* 821397A8h case    0:*/		return 0x821397AC;
	}
	return 0x821397AC;
} // Block from 821397A8h-821397ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821397ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821397AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821397AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821397AC);
		  /* 821397ACh */ case    0:  		/* lis R31, -32768 */
		/* 821397ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 821397ACh case    0:*/		return 0x821397B0;
		  /* 821397B0h */ case    1:  		/* ori R31, R31, 16389 */
		/* 821397B0h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 821397B0h case    1:*/		return 0x821397B4;
		  /* 821397B4h */ case    2:  		/* b -212 */
		/* 821397B4h case    2:*/		return 0x821396E0;
		/* 821397B4h case    2:*/		return 0x821397B8;
	}
	return 0x821397B8;
} // Block from 821397ACh-821397B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821397B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821397B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821397B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821397B8);
		  /* 821397B8h */ case    0:  		/* mfspr R12, LR */
		/* 821397B8h case    0:*/		regs.R12 = regs.LR;
		/* 821397B8h case    0:*/		return 0x821397BC;
		  /* 821397BCh */ case    1:  		/* bl -689540 */
		/* 821397BCh case    1:*/		regs.LR = 0x821397C0; return 0x82091238;
		/* 821397BCh case    1:*/		return 0x821397C0;
		  /* 821397C0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821397C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821397C0h case    2:*/		return 0x821397C4;
		  /* 821397C4h */ case    3:  		/* addi R11, R1, 80 */
		/* 821397C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821397C4h case    3:*/		return 0x821397C8;
		  /* 821397C8h */ case    4:  		/* mr R31, R3 */
		/* 821397C8h case    4:*/		regs.R31 = regs.R3;
		/* 821397C8h case    4:*/		return 0x821397CC;
		  /* 821397CCh */ case    5:  		/* li R28, 0 */
		/* 821397CCh case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821397CCh case    5:*/		return 0x821397D0;
		  /* 821397D0h */ case    6:  		/* li R5, 32 */
		/* 821397D0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 821397D0h case    6:*/		return 0x821397D4;
		  /* 821397D4h */ case    7:  		/* stw R28, <#[R3 + 540]> */
		/* 821397D4h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x0000021C) );
		/* 821397D4h case    7:*/		return 0x821397D8;
		  /* 821397D8h */ case    8:  		/* li R4, 0 */
		/* 821397D8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821397D8h case    8:*/		return 0x821397DC;
		  /* 821397DCh */ case    9:  		/* std R28, <#[R11]> */
		/* 821397DCh case    9:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821397DCh case    9:*/		return 0x821397E0;
		  /* 821397E0h */ case   10:  		/* addi R3, R3, 508 */
		/* 821397E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1FC);
		/* 821397E0h case   10:*/		return 0x821397E4;
		  /* 821397E4h */ case   11:  		/* stw R28, <#[R31 + 544]> */
		/* 821397E4h case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000220) );
		/* 821397E4h case   11:*/		return 0x821397E8;
		  /* 821397E8h */ case   12:  		/* std R28, <#[R11 + 8]> */
		/* 821397E8h case   12:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 821397E8h case   12:*/		return 0x821397EC;
		  /* 821397ECh */ case   13:  		/* mr R27, R28 */
		/* 821397ECh case   13:*/		regs.R27 = regs.R28;
		/* 821397ECh case   13:*/		return 0x821397F0;
		  /* 821397F0h */ case   14:  		/* mr R25, R28 */
		/* 821397F0h case   14:*/		regs.R25 = regs.R28;
		/* 821397F0h case   14:*/		return 0x821397F4;
		  /* 821397F4h */ case   15:  		/* mr R26, R28 */
		/* 821397F4h case   15:*/		regs.R26 = regs.R28;
		/* 821397F4h case   15:*/		return 0x821397F8;
		  /* 821397F8h */ case   16:  		/* mr R20, R28 */
		/* 821397F8h case   16:*/		regs.R20 = regs.R28;
		/* 821397F8h case   16:*/		return 0x821397FC;
		  /* 821397FCh */ case   17:  		/* bl -689340 */
		/* 821397FCh case   17:*/		regs.LR = 0x82139800; return 0x82091340;
		/* 821397FCh case   17:*/		return 0x82139800;
		  /* 82139800h */ case   18:  		/* lwz R11, <#[R31 + 8]> */
		/* 82139800h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82139800h case   18:*/		return 0x82139804;
		  /* 82139804h */ case   19:  		/* mr R21, R28 */
		/* 82139804h case   19:*/		regs.R21 = regs.R28;
		/* 82139804h case   19:*/		return 0x82139808;
		  /* 82139808h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 82139808h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82139808h case   20:*/		return 0x8213980C;
		  /* 8213980Ch */ case   21:  		/* bc 4, CR6_GT, 352 */
		/* 8213980Ch case   21:*/		if ( !regs.CR[6].gt ) { return 0x8213996C;  }
		/* 8213980Ch case   21:*/		return 0x82139810;
		  /* 82139810h */ case   22:  		/* lis R11, -32254 */
		/* 82139810h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82139810h case   22:*/		return 0x82139814;
		  /* 82139814h */ case   23:  		/* lis R10, -32253 */
		/* 82139814h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82139814h case   23:*/		return 0x82139818;
		  /* 82139818h */ case   24:  		/* mr R22, R28 */
		/* 82139818h case   24:*/		regs.R22 = regs.R28;
		/* 82139818h case   24:*/		return 0x8213981C;
		  /* 8213981Ch */ case   25:  		/* addi R24, R11, -14656 */
		/* 8213981Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFC6C0);
		/* 8213981Ch case   25:*/		return 0x82139820;
		  /* 82139820h */ case   26:  		/* addi R23, R10, 22732 */
		/* 82139820h case   26:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x58CC);
		/* 82139820h case   26:*/		return 0x82139824;
		  /* 82139824h */ case   27:  		/* lwz R11, <#[R31 + 20]> */
		/* 82139824h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82139824h case   27:*/		return 0x82139828;
		  /* 82139828h */ case   28:  		/* lwz R10, <#[R31 + 16]> */
		/* 82139828h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82139828h case   28:*/		return 0x8213982C;
		  /* 8213982Ch */ case   29:  		/* lwzx R30, <#[R11 + R22]> */
		/* 8213982Ch case   29:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8213982Ch case   29:*/		return 0x82139830;
		  /* 82139830h */ case   30:  		/* lwz R11, <#[R30 + 4]> */
		/* 82139830h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82139830h case   30:*/		return 0x82139834;
		  /* 82139834h */ case   31:  		/* lwz R9, <#[R30 + 8]> */
		/* 82139834h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 82139834h case   31:*/		return 0x82139838;
		  /* 82139838h */ case   32:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139838h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139838h case   32:*/		return 0x8213983C;
		  /* 8213983Ch */ case   33:  		/* cmpwi CR6, R9, -1 */
		/* 8213983Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8213983Ch case   33:*/		return 0x82139840;
		  /* 82139840h */ case   34:  		/* lwzx R29, <#[R11 + R10]> */
		/* 82139840h case   34:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139840h case   34:*/		return 0x82139844;
		  /* 82139844h */ case   35:  		/* bc 12, CR6_EQ, 40 */
		/* 82139844h case   35:*/		if ( regs.CR[6].eq ) { return 0x8213986C;  }
		/* 82139844h case   35:*/		return 0x82139848;
		  /* 82139848h */ case   36:  		/* cmpwi CR6, R25, 0 */
		/* 82139848h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82139848h case   36:*/		return 0x8213984C;
		  /* 8213984Ch */ case   37:  		/* bc 4, CR6_EQ, 32 */
		/* 8213984Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x8213986C;  }
		/* 8213984Ch case   37:*/		return 0x82139850;
		  /* 82139850h */ case   38:  		/* mr R6, R23 */
		/* 82139850h case   38:*/		regs.R6 = regs.R23;
		/* 82139850h case   38:*/		return 0x82139854;
		  /* 82139854h */ case   39:  		/* lwz R4, <#[R30 + 96]> */
		/* 82139854h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000060) );
		/* 82139854h case   39:*/		return 0x82139858;
		  /* 82139858h */ case   40:  		/* li R5, 4511 */
		/* 82139858h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x119F);
		/* 82139858h case   40:*/		return 0x8213985C;
		  /* 8213985Ch */ case   41:  		/* mr R3, R31 */
		/* 8213985Ch case   41:*/		regs.R3 = regs.R31;
		/* 8213985Ch case   41:*/		return 0x82139860;
		  /* 82139860h */ case   42:  		/* bl -176432 */
		/* 82139860h case   42:*/		regs.LR = 0x82139864; return 0x8210E730;
		/* 82139860h case   42:*/		return 0x82139864;
		  /* 82139864h */ case   43:  		/* li R25, 1 */
		/* 82139864h case   43:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82139864h case   43:*/		return 0x82139868;
		  /* 82139868h */ case   44:  		/* li R27, 1 */
		/* 82139868h case   44:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82139868h case   44:*/		return 0x8213986C;
	}
	return 0x8213986C;
} // Block from 821397B8h-8213986Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 8213986Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213986C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213986C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213986C);
		  /* 8213986Ch */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 8213986Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8213986Ch case    0:*/		return 0x82139870;
		  /* 82139870h */ case    1:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 82139870h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 82139870h case    1:*/		return 0x82139874;
		  /* 82139874h */ case    2:  		/* bc 12, CR0_EQ, 132 */
		/* 82139874h case    2:*/		if ( regs.CR[0].eq ) { return 0x821398F8;  }
		/* 82139874h case    2:*/		return 0x82139878;
		  /* 82139878h */ case    3:  		/* lbz R10, <#[R30 + 110]> */
		/* 82139878h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006E) );
		/* 82139878h case    3:*/		return 0x8213987C;
		  /* 8213987Ch */ case    4:  		/* cmplwi CR6, R10, 3 */
		/* 8213987Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213987Ch case    4:*/		return 0x82139880;
		  /* 82139880h */ case    5:  		/* bc 12, CR6_GT, 236 */
		/* 82139880h case    5:*/		if ( regs.CR[6].gt ) { return 0x8213996C;  }
		/* 82139880h case    5:*/		return 0x82139884;
		  /* 82139884h */ case    6:  		/* lbz R11, <#[R30 + 111]> */
		/* 82139884h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006F) );
		/* 82139884h case    6:*/		return 0x82139888;
		  /* 82139888h */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 82139888h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82139888h case    7:*/		return 0x8213988C;
		  /* 8213988Ch */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 8213988Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821398D4;  }
		/* 8213988Ch case    8:*/		return 0x82139890;
		  /* 82139890h */ case    9:  		/* cmplwi CR6, R11, 2 */
		/* 82139890h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82139890h case    9:*/		return 0x82139894;
		  /* 82139894h */ case   10:  		/* bc 4, CR6_EQ, 196 */
		/* 82139894h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82139958;  }
		/* 82139894h case   10:*/		return 0x82139898;
		  /* 82139898h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82139898h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82139898h case   11:*/		return 0x8213989C;
		  /* 8213989Ch */ case   12:  		/* bc 4, CR6_EQ, 188 */
		/* 8213989Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82139958;  }
		/* 8213989Ch case   12:*/		return 0x821398A0;
		  /* 821398A0h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821398A0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821398A0h case   13:*/		return 0x821398A4;
		  /* 821398A4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821398A4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821398A4h case   14:*/		return 0x821398A8;
		  /* 821398A8h */ case   15:  		/* bc 12, CR6_EQ, 176 */
		/* 821398A8h case   15:*/		if ( regs.CR[6].eq ) { return 0x82139958;  }
		/* 821398A8h case   15:*/		return 0x821398AC;
		  /* 821398ACh */ case   16:  		/* cmpwi CR6, R26, 0 */
		/* 821398ACh case   16:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821398ACh case   16:*/		return 0x821398B0;
		  /* 821398B0h */ case   17:  		/* bc 4, CR6_EQ, 168 */
		/* 821398B0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82139958;  }
		/* 821398B0h case   17:*/		return 0x821398B4;
		  /* 821398B4h */ case   18:  		/* mr R6, R24 */
		/* 821398B4h case   18:*/		regs.R6 = regs.R24;
		/* 821398B4h case   18:*/		return 0x821398B8;
		  /* 821398B8h */ case   19:  		/* lwz R4, <#[R30 + 96]> */
		/* 821398B8h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000060) );
		/* 821398B8h case   19:*/		return 0x821398BC;
		  /* 821398BCh */ case   20:  		/* li R5, 4528 */
		/* 821398BCh case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x11B0);
		/* 821398BCh case   20:*/		return 0x821398C0;
		  /* 821398C0h */ case   21:  		/* mr R3, R31 */
		/* 821398C0h case   21:*/		regs.R3 = regs.R31;
		/* 821398C0h case   21:*/		return 0x821398C4;
		  /* 821398C4h */ case   22:  		/* bl -176532 */
		/* 821398C4h case   22:*/		regs.LR = 0x821398C8; return 0x8210E730;
		/* 821398C4h case   22:*/		return 0x821398C8;
		  /* 821398C8h */ case   23:  		/* li R26, 1 */
		/* 821398C8h case   23:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821398C8h case   23:*/		return 0x821398CC;
		  /* 821398CCh */ case   24:  		/* li R27, 1 */
		/* 821398CCh case   24:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821398CCh case   24:*/		return 0x821398D0;
		  /* 821398D0h */ case   25:  		/* b 136 */
		/* 821398D0h case   25:*/		return 0x82139958;
		/* 821398D0h case   25:*/		return 0x821398D4;
	}
	return 0x821398D4;
} // Block from 8213986Ch-821398D4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821398D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821398D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821398D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821398D4);
		  /* 821398D4h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821398D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821398D4h case    0:*/		return 0x821398D8;
		  /* 821398D8h */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 821398D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82139958;  }
		/* 821398D8h case    1:*/		return 0x821398DC;
		  /* 821398DCh */ case    2:  		/* lwz R11, <#[R30 + 16]> */
		/* 821398DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821398DCh case    2:*/		return 0x821398E0;
		  /* 821398E0h */ case    3:  		/* addi R10, R1, 80 */
		/* 821398E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821398E0h case    3:*/		return 0x821398E4;
		  /* 821398E4h */ case    4:  		/* li R9, 1 */
		/* 821398E4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821398E4h case    4:*/		return 0x821398E8;
		  /* 821398E8h */ case    5:  		/* lwz R20, <#[R30 + 96]> */
		/* 821398E8h case    5:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R30 + 0x00000060) );
		/* 821398E8h case    5:*/		return 0x821398EC;
		  /* 821398ECh */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821398ECh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821398ECh case    6:*/		return 0x821398F0;
		  /* 821398F0h */ case    7:  		/* stwx R9, <#[R11 + R10]> */
		/* 821398F0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821398F0h case    7:*/		return 0x821398F4;
		  /* 821398F4h */ case    8:  		/* b 100 */
		/* 821398F4h case    8:*/		return 0x82139958;
		/* 821398F4h case    8:*/		return 0x821398F8;
	}
	return 0x821398F8;
} // Block from 821398D4h-821398F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821398F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821398F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821398F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821398F8);
		  /* 821398F8h */ case    0:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 821398F8h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 821398F8h case    0:*/		return 0x821398FC;
		  /* 821398FCh */ case    1:  		/* bc 12, CR0_EQ, 92 */
		/* 821398FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82139958;  }
		/* 821398FCh case    1:*/		return 0x82139900;
		  /* 82139900h */ case    2:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 82139900h case    2:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 82139900h case    2:*/		return 0x82139904;
		  /* 82139904h */ case    3:  		/* bc 4, CR0_EQ, 84 */
		/* 82139904h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82139958;  }
		/* 82139904h case    3:*/		return 0x82139908;
		  /* 82139908h */ case    4:  		/* lbz R10, <#[R30 + 111]> */
		/* 82139908h case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006F) );
		/* 82139908h case    4:*/		return 0x8213990C;
		  /* 8213990Ch */ case    5:  		/* lbz R11, <#[R30 + 110]> */
		/* 8213990Ch case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006E) );
		/* 8213990Ch case    5:*/		return 0x82139910;
		  /* 82139910h */ case    6:  		/* cmplwi CR6, R10, 1 */
		/* 82139910h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82139910h case    6:*/		return 0x82139914;
		  /* 82139914h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 82139914h case    7:*/		if ( regs.CR[6].eq ) { return 0x82139930;  }
		/* 82139914h case    7:*/		return 0x82139918;
		  /* 82139918h */ case    8:  		/* cmplwi CR6, R10, 3 */
		/* 82139918h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82139918h case    8:*/		return 0x8213991C;
		  /* 8213991Ch */ case    9:  		/* bc 4, CR6_EQ, 60 */
		/* 8213991Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82139958;  }
		/* 8213991Ch case    9:*/		return 0x82139920;
		  /* 82139920h */ case   10:  		/* cmplwi CR6, R11, 8 */
		/* 82139920h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 82139920h case   10:*/		return 0x82139924;
		  /* 82139924h */ case   11:  		/* bc 4, CR6_LT, 52 */
		/* 82139924h case   11:*/		if ( !regs.CR[6].lt ) { return 0x82139958;  }
		/* 82139924h case   11:*/		return 0x82139928;
		  /* 82139928h */ case   12:  		/* addi R10, R11, 127 */
		/* 82139928h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x7F);
		/* 82139928h case   12:*/		return 0x8213992C;
		  /* 8213992Ch */ case   13:  		/* b 16 */
		/* 8213992Ch case   13:*/		return 0x8213993C;
		/* 8213992Ch case   13:*/		return 0x82139930;
	}
	return 0x82139930;
} // Block from 821398F8h-82139930h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82139930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139930);
		  /* 82139930h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 82139930h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82139930h case    0:*/		return 0x82139934;
		  /* 82139934h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 82139934h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82139958;  }
		/* 82139934h case    1:*/		return 0x82139938;
		  /* 82139938h */ case    2:  		/* addi R10, R11, 135 */
		/* 82139938h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x87);
		/* 82139938h case    2:*/		return 0x8213993C;
	}
	return 0x8213993C;
} // Block from 82139930h-8213993Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213993Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213993C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213993C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213993C);
		  /* 8213993Ch */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213993Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213993Ch case    0:*/		return 0x82139940;
		  /* 82139940h */ case    1:  		/* lwz R11, <#[R30 + 16]> */
		/* 82139940h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82139940h case    1:*/		return 0x82139944;
		  /* 82139944h */ case    2:  		/* addi R11, R11, 1 */
		/* 82139944h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82139944h case    2:*/		return 0x82139948;
		  /* 82139948h */ case    3:  		/* lwzx R9, <#[R10 + R31]> */
		/* 82139948h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82139948h case    3:*/		return 0x8213994C;
		  /* 8213994Ch */ case    4:  		/* cmplw CR6, R9, R11 */
		/* 8213994Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8213994Ch case    4:*/		return 0x82139950;
		  /* 82139950h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82139950h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82139958;  }
		/* 82139950h case    5:*/		return 0x82139954;
		  /* 82139954h */ case    6:  		/* stwx R11, <#[R10 + R31]> */
		/* 82139954h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82139954h case    6:*/		return 0x82139958;
	}
	return 0x82139958;
} // Block from 8213993Ch-82139958h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82139958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139958);
		  /* 82139958h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82139958h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82139958h case    0:*/		return 0x8213995C;
		  /* 8213995Ch */ case    1:  		/* addi R21, R21, 1 */
		/* 8213995Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8213995Ch case    1:*/		return 0x82139960;
		  /* 82139960h */ case    2:  		/* addi R22, R22, 4 */
		/* 82139960h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 82139960h case    2:*/		return 0x82139964;
		  /* 82139964h */ case    3:  		/* cmplw CR6, R21, R11 */
		/* 82139964h case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 82139964h case    3:*/		return 0x82139968;
		  /* 82139968h */ case    4:  		/* bc 12, CR6_LT, -324 */
		/* 82139968h case    4:*/		if ( regs.CR[6].lt ) { return 0x82139824;  }
		/* 82139968h case    4:*/		return 0x8213996C;
	}
	return 0x8213996C;
} // Block from 82139958h-8213996Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213996Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213996C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213996C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213996C);
		  /* 8213996Ch */ case    0:  		/* li R9, 4 */
		/* 8213996Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8213996Ch case    0:*/		return 0x82139970;
		  /* 82139970h */ case    1:  		/* addi R10, R1, 76 */
		/* 82139970h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4C);
		/* 82139970h case    1:*/		return 0x82139974;
		  /* 82139974h */ case    2:  		/* mr R11, R28 */
		/* 82139974h case    2:*/		regs.R11 = regs.R28;
		/* 82139974h case    2:*/		return 0x82139978;
		  /* 82139978h */ case    3:  		/* mtspr CTR, R9 */
		/* 82139978h case    3:*/		regs.CTR = regs.R9;
		/* 82139978h case    3:*/		return 0x8213997C;
		  /* 8213997Ch */ case    4:  		/* lwzu R9, <#[R10 + 4]> */
		/* 8213997Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8213997Ch case    4:*/		return 0x82139980;
		  /* 82139980h */ case    5:  		/* addic R8, R9, -1 */
		/* 82139980h case    5:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R9,0xFFFFFFFF);
		/* 82139980h case    5:*/		return 0x82139984;
		  /* 82139984h */ case    6:  		/* subfe R9, R8, R9 */
		/* 82139984h case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82139984h case    6:*/		return 0x82139988;
		  /* 82139988h */ case    7:  		/* add R11, R9, R11 */
		/* 82139988h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82139988h case    7:*/		return 0x8213998C;
		  /* 8213998Ch */ case    8:  		/* bc 16, CR0_LT, -16 */
		/* 8213998Ch case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213997C;  }
		/* 8213998Ch case    8:*/		return 0x82139990;
		  /* 82139990h */ case    9:  		/* cmplwi CR6, R11, 4 */
		/* 82139990h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82139990h case    9:*/		return 0x82139994;
		  /* 82139994h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 82139994h case   10:*/		if ( regs.CR[6].eq ) { return 0x821399B4;  }
		/* 82139994h case   10:*/		return 0x82139998;
		  /* 82139998h */ case   11:  		/* lis R11, -32254 */
		/* 82139998h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82139998h case   11:*/		return 0x8213999C;
		  /* 8213999Ch */ case   12:  		/* li R5, 4530 */
		/* 8213999Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x11B2);
		/* 8213999Ch case   12:*/		return 0x821399A0;
		  /* 821399A0h */ case   13:  		/* addi R6, R11, -14760 */
		/* 821399A0h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC658);
		/* 821399A0h case   13:*/		return 0x821399A4;
		  /* 821399A4h */ case   14:  		/* mr R4, R20 */
		/* 821399A4h case   14:*/		regs.R4 = regs.R20;
		/* 821399A4h case   14:*/		return 0x821399A8;
		  /* 821399A8h */ case   15:  		/* mr R3, R31 */
		/* 821399A8h case   15:*/		regs.R3 = regs.R31;
		/* 821399A8h case   15:*/		return 0x821399AC;
		  /* 821399ACh */ case   16:  		/* bl -176764 */
		/* 821399ACh case   16:*/		regs.LR = 0x821399B0; return 0x8210E730;
		/* 821399ACh case   16:*/		return 0x821399B0;
		  /* 821399B0h */ case   17:  		/* li R27, 1 */
		/* 821399B0h case   17:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821399B0h case   17:*/		return 0x821399B4;
	}
	return 0x821399B4;
} // Block from 8213996Ch-821399B4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821399B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821399B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821399B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821399B4);
		  /* 821399B4h */ case    0:  		/* subfic R11, R27, 0 */
		/* 821399B4h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R27,0x0);
		/* 821399B4h case    0:*/		return 0x821399B8;
		  /* 821399B8h */ case    1:  		/* lis R10, -32768 */
		/* 821399B8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 821399B8h case    1:*/		return 0x821399BC;
		  /* 821399BCh */ case    2:  		/* subfe R11, R11, R11 */
		/* 821399BCh case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821399BCh case    2:*/		return 0x821399C0;
		  /* 821399C0h */ case    3:  		/* ori R10, R10, 16389 */
		/* 821399C0h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 821399C0h case    3:*/		return 0x821399C4;
		  /* 821399C4h */ case    4:  		/* and R3, R11, R10 */
		/* 821399C4h case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 821399C4h case    4:*/		return 0x821399C8;
		  /* 821399C8h */ case    5:  		/* addi R1, R1, 208 */
		/* 821399C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821399C8h case    5:*/		return 0x821399CC;
		  /* 821399CCh */ case    6:  		/* b -689988 */
		/* 821399CCh case    6:*/		return 0x82091288;
		/* 821399CCh case    6:*/		return 0x821399D0;
	}
	return 0x821399D0;
} // Block from 821399B4h-821399D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821399D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821399D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821399D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821399D0);
		  /* 821399D0h */ case    0:  		/* mfspr R12, LR */
		/* 821399D0h case    0:*/		regs.R12 = regs.LR;
		/* 821399D0h case    0:*/		return 0x821399D4;
		  /* 821399D4h */ case    1:  		/* bl -690060 */
		/* 821399D4h case    1:*/		regs.LR = 0x821399D8; return 0x82091248;
		/* 821399D4h case    1:*/		return 0x821399D8;
		  /* 821399D8h */ case    2:  		/* stfd FR31, <#[R1 - 80]> */
		/* 821399D8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB0) );
		/* 821399D8h case    2:*/		return 0x821399DC;
		  /* 821399DCh */ case    3:  		/* stwu R1, <#[R1 - 240]> */
		/* 821399DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821399DCh case    3:*/		return 0x821399E0;
		  /* 821399E0h */ case    4:  		/* lwz R8, <#[R3 + 260]> */
		/* 821399E0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000104) );
		/* 821399E0h case    4:*/		return 0x821399E4;
		  /* 821399E4h */ case    5:  		/* li R10, 4 */
		/* 821399E4h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821399E4h case    5:*/		return 0x821399E8;
		  /* 821399E8h */ case    6:  		/* li R30, 0 */
		/* 821399E8h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821399E8h case    6:*/		return 0x821399EC;
		  /* 821399ECh */ case    7:  		/* mr R31, R3 */
		/* 821399ECh case    7:*/		regs.R31 = regs.R3;
		/* 821399ECh case    7:*/		return 0x821399F0;
		  /* 821399F0h */ case    8:  		/* mr R9, R8 */
		/* 821399F0h case    8:*/		regs.R9 = regs.R8;
		/* 821399F0h case    8:*/		return 0x821399F4;
		  /* 821399F4h */ case    9:  		/* mr R11, R30 */
		/* 821399F4h case    9:*/		regs.R11 = regs.R30;
		/* 821399F4h case    9:*/		return 0x821399F8;
		  /* 821399F8h */ case   10:  		/* lwz R26, <#[R8 + 16]> */
		/* 821399F8h case   10:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R8 + 0x00000010) );
		/* 821399F8h case   10:*/		return 0x821399FC;
		  /* 821399FCh */ case   11:  		/* mtspr CTR, R10 */
		/* 821399FCh case   11:*/		regs.CTR = regs.R10;
		/* 821399FCh case   11:*/		return 0x82139A00;
		  /* 82139A00h */ case   12:  		/* lwz R27, <#[R8 + 12]> */
		/* 82139A00h case   12:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R8 + 0x0000000C) );
		/* 82139A00h case   12:*/		return 0x82139A04;
		  /* 82139A04h */ case   13:  		/* lwz R10, <#[R9 + 8]> */
		/* 82139A04h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 82139A04h case   13:*/		return 0x82139A08;
		  /* 82139A08h */ case   14:  		/* addi R8, R1, 144 */
		/* 82139A08h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 82139A08h case   14:*/		return 0x82139A0C;
		  /* 82139A0Ch */ case   15:  		/* addi R7, R1, 128 */
		/* 82139A0Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 82139A0Ch case   15:*/		return 0x82139A10;
		  /* 82139A10h */ case   16:  		/* lwz R10, <#[R10 + 12]> */
		/* 82139A10h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82139A10h case   16:*/		return 0x82139A14;
		  /* 82139A14h */ case   17:  		/* stwx R10, <#[R11 + R8]> */
		/* 82139A14h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82139A14h case   17:*/		return 0x82139A18;
		  /* 82139A18h */ case   18:  		/* lwz R10, <#[R9 + 8]> */
		/* 82139A18h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 82139A18h case   18:*/		return 0x82139A1C;
		  /* 82139A1Ch */ case   19:  		/* lwz R10, <#[R10 + 28]> */
		/* 82139A1Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 82139A1Ch case   19:*/		return 0x82139A20;
		  /* 82139A20h */ case   20:  		/* stwx R10, <#[R11 + R7]> */
		/* 82139A20h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82139A20h case   20:*/		return 0x82139A24;
		  /* 82139A24h */ case   21:  		/* addi R11, R11, 4 */
		/* 82139A24h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82139A24h case   21:*/		return 0x82139A28;
		  /* 82139A28h */ case   22:  		/* bc 16, CR0_LT, -36 */
		/* 82139A28h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82139A04;  }
		/* 82139A28h case   22:*/		return 0x82139A2C;
		  /* 82139A2Ch */ case   23:  		/* lwz R11, <#[R26]> */
		/* 82139A2Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82139A2Ch case   23:*/		return 0x82139A30;
		  /* 82139A30h */ case   24:  		/* lwz R10, <#[R31 + 20]> */
		/* 82139A30h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82139A30h case   24:*/		return 0x82139A34;
		  /* 82139A34h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139A34h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139A34h case   25:*/		return 0x82139A38;
		  /* 82139A38h */ case   26:  		/* lwz R9, <#[R31 + 132]> */
		/* 82139A38h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000084) );
		/* 82139A38h case   26:*/		return 0x82139A3C;
		  /* 82139A3Ch */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139A3Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139A3Ch case   27:*/		return 0x82139A40;
		  /* 82139A40h */ case   28:  		/* lwz R10, <#[R11 + 4]> */
		/* 82139A40h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82139A40h case   28:*/		return 0x82139A44;
		  /* 82139A44h */ case   29:  		/* cmplw CR6, R10, R9 */
		/* 82139A44h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82139A44h case   29:*/		return 0x82139A48;
		  /* 82139A48h */ case   30:  		/* bc 4, CR6_EQ, 116 */
		/* 82139A48h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82139ABC;  }
		/* 82139A48h case   30:*/		return 0x82139A4C;
		  /* 82139A4Ch */ case   31:  		/* lwz R11, <#[R11 + 108]> */
		/* 82139A4Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 82139A4Ch case   31:*/		return 0x82139A50;
		  /* 82139A50h */ case   32:  		/* cmplwi CR6, R11, 1 */
		/* 82139A50h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82139A50h case   32:*/		return 0x82139A54;
		  /* 82139A54h */ case   33:  		/* bc 12, CR6_EQ, 44 */
		/* 82139A54h case   33:*/		if ( regs.CR[6].eq ) { return 0x82139A80;  }
		/* 82139A54h case   33:*/		return 0x82139A58;
		  /* 82139A58h */ case   34:  		/* lwz R11, <#[R31 + 260]> */
		/* 82139A58h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82139A58h case   34:*/		return 0x82139A5C;
		  /* 82139A5Ch */ case   35:  		/* lis R10, -32253 */
		/* 82139A5Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82139A5Ch case   35:*/		return 0x82139A60;
		  /* 82139A60h */ case   36:  		/* li R5, 4813 */
		/* 82139A60h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x12CD);
		/* 82139A60h case   36:*/		return 0x82139A64;
		  /* 82139A64h */ case   37:  		/* addi R6, R10, 22776 */
		/* 82139A64h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x58F8);
		/* 82139A64h case   37:*/		return 0x82139A68;
		  /* 82139A68h */ case   38:  		/* mr R3, R31 */
		/* 82139A68h case   38:*/		regs.R3 = regs.R31;
		/* 82139A68h case   38:*/		return 0x82139A6C;
		  /* 82139A6Ch */ case   39:  		/* lwz R4, <#[R11 + 60]> */
		/* 82139A6Ch case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82139A6Ch case   39:*/		return 0x82139A70;
		  /* 82139A70h */ case   40:  		/* bl -176960 */
		/* 82139A70h case   40:*/		regs.LR = 0x82139A74; return 0x8210E730;
		/* 82139A70h case   40:*/		return 0x82139A74;
		  /* 82139A74h */ case   41:  		/* lis R3, -32768 */
		/* 82139A74h case   41:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82139A74h case   41:*/		return 0x82139A78;
		  /* 82139A78h */ case   42:  		/* ori R3, R3, 16389 */
		/* 82139A78h case   42:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82139A78h case   42:*/		return 0x82139A7C;
		  /* 82139A7Ch */ case   43:  		/* b 292 */
		/* 82139A7Ch case   43:*/		return 0x82139BA0;
		/* 82139A7Ch case   43:*/		return 0x82139A80;
	}
	return 0x82139A80;
} // Block from 821399D0h-82139A80h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82139A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139A80);
		  /* 82139A80h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82139A80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82139A80h case    0:*/		return 0x82139A84;
		  /* 82139A84h */ case    1:  		/* bc 12, CR6_EQ, 168 */
		/* 82139A84h case    1:*/		if ( regs.CR[6].eq ) { return 0x82139B2C;  }
		/* 82139A84h case    1:*/		return 0x82139A88;
		  /* 82139A88h */ case    2:  		/* mtspr CTR, R27 */
		/* 82139A88h case    2:*/		regs.CTR = regs.R27;
		/* 82139A88h case    2:*/		return 0x82139A8C;
		  /* 82139A8Ch */ case    3:  		/* lwz R11, <#[R26]> */
		/* 82139A8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82139A8Ch case    3:*/		return 0x82139A90;
		  /* 82139A90h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 82139A90h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82139A90h case    4:*/		return 0x82139A94;
		  /* 82139A94h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139A94h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139A94h case    5:*/		return 0x82139A98;
		  /* 82139A98h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139A98h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139A98h case    6:*/		return 0x82139A9C;
		  /* 82139A9Ch */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 82139A9Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 82139A9Ch case    7:*/		return 0x82139AA0;
		  /* 82139AA0h */ case    8:  		/* lwz R9, <#[R31 + 136]> */
		/* 82139AA0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000088) );
		/* 82139AA0h case    8:*/		return 0x82139AA4;
		  /* 82139AA4h */ case    9:  		/* lwz R10, <#[R26]> */
		/* 82139AA4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82139AA4h case    9:*/		return 0x82139AA8;
		  /* 82139AA8h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139AA8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139AA8h case   10:*/		return 0x82139AAC;
		  /* 82139AACh */ case   11:  		/* lwz R11, <#[R31 + 20]> */
		/* 82139AACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82139AACh case   11:*/		return 0x82139AB0;
		  /* 82139AB0h */ case   12:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82139AB0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82139AB0h case   12:*/		return 0x82139AB4;
		  /* 82139AB4h */ case   13:  		/* stw R9, <#[R11 + 4]> */
		/* 82139AB4h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82139AB4h case   13:*/		return 0x82139AB8;
		  /* 82139AB8h */ case   14:  		/* bc 16, CR0_LT, -44 */
		/* 82139AB8h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82139A8C;  }
		/* 82139AB8h case   14:*/		return 0x82139ABC;
	}
	return 0x82139ABC;
} // Block from 82139A80h-82139ABCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82139ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139ABC);
		  /* 82139ABCh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82139ABCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82139ABCh case    0:*/		return 0x82139AC0;
		  /* 82139AC0h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 82139AC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82139B2C;  }
		/* 82139AC0h case    1:*/		return 0x82139AC4;
		  /* 82139AC4h */ case    2:  		/* addi R11, R1, 112 */
		/* 82139AC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82139AC4h case    2:*/		return 0x82139AC8;
		  /* 82139AC8h */ case    3:  		/* mr R29, R26 */
		/* 82139AC8h case    3:*/		regs.R29 = regs.R26;
		/* 82139AC8h case    3:*/		return 0x82139ACC;
		  /* 82139ACCh */ case    4:  		/* subf R25, R26, R11 */
		/* 82139ACCh case    4:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R26,regs.R11);
		/* 82139ACCh case    4:*/		return 0x82139AD0;
		  /* 82139AD0h */ case    5:  		/* lis R11, -32256 */
		/* 82139AD0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82139AD0h case    5:*/		return 0x82139AD4;
		  /* 82139AD4h */ case    6:  		/* mr R28, R27 */
		/* 82139AD4h case    6:*/		regs.R28 = regs.R27;
		/* 82139AD4h case    6:*/		return 0x82139AD8;
		  /* 82139AD8h */ case    7:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 82139AD8h case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 82139AD8h case    7:*/		return 0x82139ADC;
		  /* 82139ADCh */ case    8:  		/* li R6, 0 */
		/* 82139ADCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139ADCh case    8:*/		return 0x82139AE0;
		  /* 82139AE0h */ case    9:  		/* fmr FR1, FR31 */
		/* 82139AE0h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82139AE0h case    9:*/		return 0x82139AE4;
		  /* 82139AE4h */ case   10:  		/* li R5, 0 */
		/* 82139AE4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82139AE4h case   10:*/		return 0x82139AE8;
		  /* 82139AE8h */ case   11:  		/* li R4, 0 */
		/* 82139AE8h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82139AE8h case   11:*/		return 0x82139AEC;
		  /* 82139AECh */ case   12:  		/* mr R3, R31 */
		/* 82139AECh case   12:*/		regs.R3 = regs.R31;
		/* 82139AECh case   12:*/		return 0x82139AF0;
		  /* 82139AF0h */ case   13:  		/* bl -248008 */
		/* 82139AF0h case   13:*/		regs.LR = 0x82139AF4; return 0x820FD228;
		/* 82139AF0h case   13:*/		return 0x82139AF4;
		  /* 82139AF4h */ case   14:  		/* stwx R3, <#[R25 + R29]> */
		/* 82139AF4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + regs.R29 + 0x00000000) );
		/* 82139AF4h case   14:*/		return 0x82139AF8;
		  /* 82139AF8h */ case   15:  		/* lwz R11, <#[R31 + 20]> */
		/* 82139AF8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82139AF8h case   15:*/		return 0x82139AFC;
		  /* 82139AFCh */ case   16:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82139AFCh case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82139AFCh case   16:*/		return 0x82139B00;
		  /* 82139B00h */ case   17:  		/* lwz R9, <#[R29]> */
		/* 82139B00h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82139B00h case   17:*/		return 0x82139B04;
		  /* 82139B04h */ case   18:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82139B04h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82139B04h case   18:*/		return 0x82139B08;
		  /* 82139B08h */ case   19:  		/* lwzx R24, <#[R10 + R11]> */
		/* 82139B08h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82139B08h case   19:*/		return 0x82139B0C;
		  /* 82139B0Ch */ case   20:  		/* li R5, 128 */
		/* 82139B0Ch case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 82139B0Ch case   20:*/		return 0x82139B10;
		  /* 82139B10h */ case   21:  		/* mr R3, R24 */
		/* 82139B10h case   21:*/		regs.R3 = regs.R24;
		/* 82139B10h case   21:*/		return 0x82139B14;
		  /* 82139B14h */ case   22:  		/* lwzx R4, <#[R9 + R11]> */
		/* 82139B14h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82139B14h case   22:*/		return 0x82139B18;
		  /* 82139B18h */ case   23:  		/* bl -688488 */
		/* 82139B18h case   23:*/		regs.LR = 0x82139B1C; return 0x820919B0;
		/* 82139B18h case   23:*/		return 0x82139B1C;
		  /* 82139B1Ch */ case   24:  		/* addic. R28, R28, -1 */
		/* 82139B1Ch case   24:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82139B1Ch case   24:*/		return 0x82139B20;
		  /* 82139B20h */ case   25:  		/* stw R30, <#[R24 + 60]> */
		/* 82139B20h case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x0000003C) );
		/* 82139B20h case   25:*/		return 0x82139B24;
		  /* 82139B24h */ case   26:  		/* addi R29, R29, 4 */
		/* 82139B24h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82139B24h case   26:*/		return 0x82139B28;
		  /* 82139B28h */ case   27:  		/* bc 4, CR0_EQ, -76 */
		/* 82139B28h case   27:*/		if ( !regs.CR[0].eq ) { return 0x82139ADC;  }
		/* 82139B28h case   27:*/		return 0x82139B2C;
	}
	return 0x82139B2C;
} // Block from 82139ABCh-82139B2Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 82139B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139B2C);
		  /* 82139B2Ch */ case    0:  		/* stw R30, <#[R1 + 108]> */
		/* 82139B2Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82139B2Ch case    0:*/		return 0x82139B30;
		  /* 82139B30h */ case    1:  		/* li R10, 2 */
		/* 82139B30h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82139B30h case    1:*/		return 0x82139B34;
		  /* 82139B34h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82139B34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82139B34h case    2:*/		return 0x82139B38;
		  /* 82139B38h */ case    3:  		/* li R9, 0 */
		/* 82139B38h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82139B38h case    3:*/		return 0x82139B3C;
		  /* 82139B3Ch */ case    4:  		/* mr R6, R27 */
		/* 82139B3Ch case    4:*/		regs.R6 = regs.R27;
		/* 82139B3Ch case    4:*/		return 0x82139B40;
		  /* 82139B40h */ case    5:  		/* stw R30, <#[R1 + 92]> */
		/* 82139B40h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82139B40h case    5:*/		return 0x82139B44;
		  /* 82139B44h */ case    6:  		/* addi R5, R1, 112 */
		/* 82139B44h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82139B44h case    6:*/		return 0x82139B48;
		  /* 82139B48h */ case    7:  		/* stw R30, <#[R1 + 84]> */
		/* 82139B48h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82139B48h case    7:*/		return 0x82139B4C;
		  /* 82139B4Ch */ case    8:  		/* li R4, 8 */
		/* 82139B4Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82139B4Ch case    8:*/		return 0x82139B50;
		  /* 82139B50h */ case    9:  		/* stw R30, <#[R1 + 100]> */
		/* 82139B50h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82139B50h case    9:*/		return 0x82139B54;
		  /* 82139B54h */ case   10:  		/* mr R3, R31 */
		/* 82139B54h case   10:*/		regs.R3 = regs.R31;
		/* 82139B54h case   10:*/		return 0x82139B58;
		  /* 82139B58h */ case   11:  		/* lwz R7, <#[R11 + 8]> */
		/* 82139B58h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82139B58h case   11:*/		return 0x82139B5C;
		  /* 82139B5Ch */ case   12:  		/* addi R8, R7, 16 */
		/* 82139B5Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x10);
		/* 82139B5Ch case   12:*/		return 0x82139B60;
		  /* 82139B60h */ case   13:  		/* bl -276480 */
		/* 82139B60h case   13:*/		regs.LR = 0x82139B64; return 0x820F6360;
		/* 82139B60h case   13:*/		return 0x82139B64;
		  /* 82139B64h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82139B64h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139B64h case   14:*/		return 0x82139B68;
		  /* 82139B68h */ case   15:  		/* bc 12, CR0_LT, 56 */
		/* 82139B68h case   15:*/		if ( regs.CR[0].lt ) { return 0x82139BA0;  }
		/* 82139B68h case   15:*/		return 0x82139B6C;
		  /* 82139B6Ch */ case   16:  		/* stw R30, <#[R1 + 108]> */
		/* 82139B6Ch case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82139B6Ch case   16:*/		return 0x82139B70;
		  /* 82139B70h */ case   17:  		/* mr R10, R27 */
		/* 82139B70h case   17:*/		regs.R10 = regs.R27;
		/* 82139B70h case   17:*/		return 0x82139B74;
		  /* 82139B74h */ case   18:  		/* stw R30, <#[R1 + 100]> */
		/* 82139B74h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82139B74h case   18:*/		return 0x82139B78;
	}
	return 0x82139B78;
} // Block from 82139B2Ch-82139B78h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82139B78h
// Function '?Match3xM@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@I0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139B78);
		  /* 82139B78h */ case    0:  		/* addi R9, R1, 112 */
		/* 82139B78h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82139B78h case    0:*/		return 0x82139B7C;
		  /* 82139B7Ch */ case    1:  		/* addi R8, R1, 128 */
		/* 82139B7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 82139B7Ch case    1:*/		return 0x82139B80;
		  /* 82139B80h */ case    2:  		/* stw R30, <#[R1 + 84]> */
		/* 82139B80h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82139B80h case    2:*/		return 0x82139B84;
		  /* 82139B84h */ case    3:  		/* addi R7, R1, 144 */
		/* 82139B84h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x90);
		/* 82139B84h case    3:*/		return 0x82139B88;
		  /* 82139B88h */ case    4:  		/* stw R30, <#[R1 + 92]> */
		/* 82139B88h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82139B88h case    4:*/		return 0x82139B8C;
		  /* 82139B8Ch */ case    5:  		/* mr R6, R27 */
		/* 82139B8Ch case    5:*/		regs.R6 = regs.R27;
		/* 82139B8Ch case    5:*/		return 0x82139B90;
		  /* 82139B90h */ case    6:  		/* mr R5, R26 */
		/* 82139B90h case    6:*/		regs.R5 = regs.R26;
		/* 82139B90h case    6:*/		return 0x82139B94;
		  /* 82139B94h */ case    7:  		/* li R4, 4 */
		/* 82139B94h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82139B94h case    7:*/		return 0x82139B98;
		  /* 82139B98h */ case    8:  		/* mr R3, R31 */
		/* 82139B98h case    8:*/		regs.R3 = regs.R31;
		/* 82139B98h case    8:*/		return 0x82139B9C;
		  /* 82139B9Ch */ case    9:  		/* bl -276540 */
		/* 82139B9Ch case    9:*/		regs.LR = 0x82139BA0; return 0x820F6360;
		/* 82139B9Ch case    9:*/		return 0x82139BA0;
	}
	return 0x82139BA0;
} // Block from 82139B78h-82139BA0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82139BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139BA0);
		  /* 82139BA0h */ case    0:  		/* addi R1, R1, 240 */
		/* 82139BA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82139BA0h case    0:*/		return 0x82139BA4;
		  /* 82139BA4h */ case    1:  		/* lfd FR31, <#[R1 - 80]> */
		/* 82139BA4h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB0) );
		/* 82139BA4h case    1:*/		return 0x82139BA8;
		  /* 82139BA8h */ case    2:  		/* b -690448 */
		/* 82139BA8h case    2:*/		return 0x82091298;
		/* 82139BA8h case    2:*/		return 0x82139BAC;
		  /* 82139BACh */ case    3:  		/* nop */
		/* 82139BACh case    3:*/		cpu::op::nop();
		/* 82139BACh case    3:*/		return 0x82139BB0;
	}
	return 0x82139BB0;
} // Block from 82139BA0h-82139BB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82139BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139BB0);
		  /* 82139BB0h */ case    0:  		/* mfspr R12, LR */
		/* 82139BB0h case    0:*/		regs.R12 = regs.LR;
		/* 82139BB0h case    0:*/		return 0x82139BB4;
		  /* 82139BB4h */ case    1:  		/* bl -690528 */
		/* 82139BB4h case    1:*/		regs.LR = 0x82139BB8; return 0x82091254;
		/* 82139BB4h case    1:*/		return 0x82139BB8;
		  /* 82139BB8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82139BB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82139BB8h case    2:*/		return 0x82139BBC;
		  /* 82139BBCh */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 82139BBCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82139BBCh case    3:*/		return 0x82139BC0;
		  /* 82139BC0h */ case    4:  		/* mr R31, R3 */
		/* 82139BC0h case    4:*/		regs.R31 = regs.R3;
		/* 82139BC0h case    4:*/		return 0x82139BC4;
		  /* 82139BC4h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82139BC4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82139BC4h case    5:*/		return 0x82139BC8;
		  /* 82139BC8h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 82139BC8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82139BC8h case    6:*/		return 0x82139BCC;
		  /* 82139BCCh */ case    7:  		/* rlwinm R29, R10, 0, 12, 31 */
		/* 82139BCCh case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R10);
		/* 82139BCCh case    7:*/		return 0x82139BD0;
		  /* 82139BD0h */ case    8:  		/* lwz R30, <#[R11 + 8]> */
		/* 82139BD0h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 82139BD0h case    8:*/		return 0x82139BD4;
		  /* 82139BD4h */ case    9:  		/* cmplw CR6, R29, R9 */
		/* 82139BD4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 82139BD4h case    9:*/		return 0x82139BD8;
		  /* 82139BD8h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82139BD8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82139BE4;  }
		/* 82139BD8h case   10:*/		return 0x82139BDC;
		  /* 82139BDCh */ case   11:  		/* li R28, 0 */
		/* 82139BDCh case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82139BDCh case   11:*/		return 0x82139BE0;
		  /* 82139BE0h */ case   12:  		/* b 12 */
		/* 82139BE0h case   12:*/		return 0x82139BEC;
		/* 82139BE0h case   12:*/		return 0x82139BE4;
	}
	return 0x82139BE4;
} // Block from 82139BB0h-82139BE4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82139BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139BE4);
		  /* 82139BE4h */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82139BE4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82139BE4h case    0:*/		return 0x82139BE8;
		  /* 82139BE8h */ case    1:  		/* add R28, R11, R30 */
		/* 82139BE8h case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R30);
		/* 82139BE8h case    1:*/		return 0x82139BEC;
	}
	return 0x82139BEC;
} // Block from 82139BE4h-82139BECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139BEC);
		  /* 82139BECh */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 82139BECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82139BECh case    0:*/		return 0x82139BF0;
		  /* 82139BF0h */ case    1:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 82139BF0h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 82139BF0h case    1:*/		return 0x82139BF4;
		  /* 82139BF4h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82139BF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82139BF4h case    2:*/		return 0x82139BF8;
		  /* 82139BF8h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82139BF8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82139BF8h case    3:*/		return 0x82139BFC;
		  /* 82139BFCh */ case    4:  		/* bc 12, CR6_GT, 12 */
		/* 82139BFCh case    4:*/		if ( regs.CR[6].gt ) { return 0x82139C08;  }
		/* 82139BFCh case    4:*/		return 0x82139C00;
		  /* 82139C00h */ case    5:  		/* li R27, 0 */
		/* 82139C00h case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82139C00h case    5:*/		return 0x82139C04;
		  /* 82139C04h */ case    6:  		/* b 12 */
		/* 82139C04h case    6:*/		return 0x82139C10;
		/* 82139C04h case    6:*/		return 0x82139C08;
	}
	return 0x82139C08;
} // Block from 82139BECh-82139C08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82139C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139C08);
		  /* 82139C08h */ case    0:  		/* rlwinm R11, R29, 3, 0, 28 */
		/* 82139C08h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R29);
		/* 82139C08h case    0:*/		return 0x82139C0C;
		  /* 82139C0Ch */ case    1:  		/* add R27, R11, R30 */
		/* 82139C0Ch case    1:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R30);
		/* 82139C0Ch case    1:*/		return 0x82139C10;
	}
	return 0x82139C10;
} // Block from 82139C08h-82139C10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139C10);
		  /* 82139C10h */ case    0:  		/* mr R3, R31 */
		/* 82139C10h case    0:*/		regs.R3 = regs.R31;
		/* 82139C10h case    0:*/		return 0x82139C14;
		  /* 82139C14h */ case    1:  		/* bl -277284 */
		/* 82139C14h case    1:*/		regs.LR = 0x82139C18; return 0x820F60F0;
		/* 82139C14h case    1:*/		return 0x82139C18;
		  /* 82139C18h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82139C18h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139C18h case    2:*/		return 0x82139C1C;
		  /* 82139C1Ch */ case    3:  		/* bc 12, CR0_LT, 408 */
		/* 82139C1Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139C1Ch case    3:*/		return 0x82139C20;
		  /* 82139C20h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 82139C20h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82139C20h case    4:*/		return 0x82139C24;
		  /* 82139C24h */ case    5:  		/* li R6, 0 */
		/* 82139C24h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139C24h case    5:*/		return 0x82139C28;
		  /* 82139C28h */ case    6:  		/* lwz R10, <#[R31 + 20]> */
		/* 82139C28h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82139C28h case    6:*/		return 0x82139C2C;
		  /* 82139C2Ch */ case    7:  		/* lis R5, 15 */
		/* 82139C2Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 82139C2Ch case    7:*/		return 0x82139C30;
		  /* 82139C30h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139C30h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139C30h case    8:*/		return 0x82139C34;
		  /* 82139C34h */ case    9:  		/* lwz R9, <#[R31]> */
		/* 82139C34h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82139C34h case    9:*/		return 0x82139C38;
		  /* 82139C38h */ case   10:  		/* mr R3, R31 */
		/* 82139C38h case   10:*/		regs.R3 = regs.R31;
		/* 82139C38h case   10:*/		return 0x82139C3C;
		  /* 82139C3Ch */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139C3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139C3Ch case   11:*/		return 0x82139C40;
		  /* 82139C40h */ case   12:  		/* lwz R10, <#[R9 + 312]> */
		/* 82139C40h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000138) );
		/* 82139C40h case   12:*/		return 0x82139C44;
		  /* 82139C44h */ case   13:  		/* lbz R11, <#[R11 + 110]> */
		/* 82139C44h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006E) );
		/* 82139C44h case   13:*/		return 0x82139C48;
		  /* 82139C48h */ case   14:  		/* mtspr CTR, R10 */
		/* 82139C48h case   14:*/		regs.CTR = regs.R10;
		/* 82139C48h case   14:*/		return 0x82139C4C;
		  /* 82139C4Ch */ case   15:  		/* oris R4, R11, 45056 */
		/* 82139C4Ch case   15:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0xB000);
		/* 82139C4Ch case   15:*/		return 0x82139C50;
		  /* 82139C50h */ case   16:  		/* stw R4, <#[R1 + 84]> */
		/* 82139C50h case   16:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82139C50h case   16:*/		return 0x82139C54;
		  /* 82139C54h */ case   17:  		/* stw R11, <#[R1 + 80]> */
		/* 82139C54h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82139C54h case   17:*/		return 0x82139C58;
		  /* 82139C58h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82139C58h case   18:*/		if ( 1 ) { regs.LR = 0x82139C5C; return (uint32)regs.CTR; }
		/* 82139C58h case   18:*/		return 0x82139C5C;
		  /* 82139C5Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 82139C5Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139C5Ch case   19:*/		return 0x82139C60;
		  /* 82139C60h */ case   20:  		/* bc 12, CR0_LT, 340 */
		/* 82139C60h case   20:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139C60h case   20:*/		return 0x82139C64;
		  /* 82139C64h */ case   21:  		/* cmplwi CR6, R28, 0 */
		/* 82139C64h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82139C64h case   21:*/		return 0x82139C68;
		  /* 82139C68h */ case   22:  		/* bc 12, CR6_EQ, 140 */
		/* 82139C68h case   22:*/		if ( regs.CR[6].eq ) { return 0x82139CF4;  }
		/* 82139C68h case   22:*/		return 0x82139C6C;
		  /* 82139C6Ch */ case   23:  		/* lwz R11, <#[R31]> */
		/* 82139C6Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139C6Ch case   23:*/		return 0x82139C70;
		  /* 82139C70h */ case   24:  		/* addi R6, R1, 80 */
		/* 82139C70h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82139C70h case   24:*/		return 0x82139C74;
		  /* 82139C74h */ case   25:  		/* lwz R10, <#[R28]> */
		/* 82139C74h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82139C74h case   25:*/		return 0x82139C78;
		  /* 82139C78h */ case   26:  		/* addi R5, R1, 84 */
		/* 82139C78h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82139C78h case   26:*/		return 0x82139C7C;
		  /* 82139C7Ch */ case   27:  		/* lwz R9, <#[R31 + 20]> */
		/* 82139C7Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82139C7Ch case   27:*/		return 0x82139C80;
		  /* 82139C80h */ case   28:  		/* mr R3, R31 */
		/* 82139C80h case   28:*/		regs.R3 = regs.R31;
		/* 82139C80h case   28:*/		return 0x82139C84;
		  /* 82139C84h */ case   29:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139C84h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139C84h case   29:*/		return 0x82139C88;
		  /* 82139C88h */ case   30:  		/* lwz R11, <#[R11 + 328]> */
		/* 82139C88h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 82139C88h case   30:*/		return 0x82139C8C;
		  /* 82139C8Ch */ case   31:  		/* lwzx R4, <#[R10 + R9]> */
		/* 82139C8Ch case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82139C8Ch case   31:*/		return 0x82139C90;
		  /* 82139C90h */ case   32:  		/* mtspr CTR, R11 */
		/* 82139C90h case   32:*/		regs.CTR = regs.R11;
		/* 82139C90h case   32:*/		return 0x82139C94;
		  /* 82139C94h */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 82139C94h case   33:*/		if ( 1 ) { regs.LR = 0x82139C98; return (uint32)regs.CTR; }
		/* 82139C94h case   33:*/		return 0x82139C98;
		  /* 82139C98h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 82139C98h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139C98h case   34:*/		return 0x82139C9C;
		  /* 82139C9Ch */ case   35:  		/* bc 12, CR0_LT, 280 */
		/* 82139C9Ch case   35:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139C9Ch case   35:*/		return 0x82139CA0;
		  /* 82139CA0h */ case   36:  		/* lwz R11, <#[R31]> */
		/* 82139CA0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139CA0h case   36:*/		return 0x82139CA4;
		  /* 82139CA4h */ case   37:  		/* addi R7, R1, 88 */
		/* 82139CA4h case   37:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 82139CA4h case   37:*/		return 0x82139CA8;
		  /* 82139CA8h */ case   38:  		/* lis R6, 15 */
		/* 82139CA8h case   38:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 82139CA8h case   38:*/		return 0x82139CAC;
		  /* 82139CACh */ case   39:  		/* mr R5, R29 */
		/* 82139CACh case   39:*/		regs.R5 = regs.R29;
		/* 82139CACh case   39:*/		return 0x82139CB0;
		  /* 82139CB0h */ case   40:  		/* mr R4, R28 */
		/* 82139CB0h case   40:*/		regs.R4 = regs.R28;
		/* 82139CB0h case   40:*/		return 0x82139CB4;
		  /* 82139CB4h */ case   41:  		/* mr R3, R31 */
		/* 82139CB4h case   41:*/		regs.R3 = regs.R31;
		/* 82139CB4h case   41:*/		return 0x82139CB8;
		  /* 82139CB8h */ case   42:  		/* lwz R11, <#[R11 + 332]> */
		/* 82139CB8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 82139CB8h case   42:*/		return 0x82139CBC;
		  /* 82139CBCh */ case   43:  		/* mtspr CTR, R11 */
		/* 82139CBCh case   43:*/		regs.CTR = regs.R11;
		/* 82139CBCh case   43:*/		return 0x82139CC0;
		  /* 82139CC0h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 82139CC0h case   44:*/		if ( 1 ) { regs.LR = 0x82139CC4; return (uint32)regs.CTR; }
		/* 82139CC0h case   44:*/		return 0x82139CC4;
		  /* 82139CC4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 82139CC4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139CC4h case   45:*/		return 0x82139CC8;
		  /* 82139CC8h */ case   46:  		/* bc 12, CR0_LT, 236 */
		/* 82139CC8h case   46:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139CC8h case   46:*/		return 0x82139CCC;
		  /* 82139CCCh */ case   47:  		/* lwz R11, <#[R31]> */
		/* 82139CCCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139CCCh case   47:*/		return 0x82139CD0;
		  /* 82139CD0h */ case   48:  		/* mr R3, R31 */
		/* 82139CD0h case   48:*/		regs.R3 = regs.R31;
		/* 82139CD0h case   48:*/		return 0x82139CD4;
		  /* 82139CD4h */ case   49:  		/* lwz R6, <#[R1 + 80]> */
		/* 82139CD4h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82139CD4h case   49:*/		return 0x82139CD8;
		  /* 82139CD8h */ case   50:  		/* lwz R5, <#[R1 + 88]> */
		/* 82139CD8h case   50:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 82139CD8h case   50:*/		return 0x82139CDC;
		  /* 82139CDCh */ case   51:  		/* lwz R4, <#[R1 + 84]> */
		/* 82139CDCh case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82139CDCh case   51:*/		return 0x82139CE0;
		  /* 82139CE0h */ case   52:  		/* lwz R11, <#[R11 + 316]> */
		/* 82139CE0h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 82139CE0h case   52:*/		return 0x82139CE4;
		  /* 82139CE4h */ case   53:  		/* mtspr CTR, R11 */
		/* 82139CE4h case   53:*/		regs.CTR = regs.R11;
		/* 82139CE4h case   53:*/		return 0x82139CE8;
		  /* 82139CE8h */ case   54:  		/* bcctrl 20, CR0_LT */
		/* 82139CE8h case   54:*/		if ( 1 ) { regs.LR = 0x82139CEC; return (uint32)regs.CTR; }
		/* 82139CE8h case   54:*/		return 0x82139CEC;
		  /* 82139CECh */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 82139CECh case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139CECh case   55:*/		return 0x82139CF0;
		  /* 82139CF0h */ case   56:  		/* bc 12, CR0_LT, 196 */
		/* 82139CF0h case   56:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139CF0h case   56:*/		return 0x82139CF4;
	}
	return 0x82139CF4;
} // Block from 82139C10h-82139CF4h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82139CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139CF4);
		  /* 82139CF4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82139CF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82139CF4h case    0:*/		return 0x82139CF8;
		  /* 82139CF8h */ case    1:  		/* bc 12, CR6_EQ, 140 */
		/* 82139CF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82139D84;  }
		/* 82139CF8h case    1:*/		return 0x82139CFC;
		  /* 82139CFCh */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82139CFCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139CFCh case    2:*/		return 0x82139D00;
		  /* 82139D00h */ case    3:  		/* addi R6, R1, 80 */
		/* 82139D00h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82139D00h case    3:*/		return 0x82139D04;
		  /* 82139D04h */ case    4:  		/* lwz R10, <#[R27]> */
		/* 82139D04h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82139D04h case    4:*/		return 0x82139D08;
		  /* 82139D08h */ case    5:  		/* addi R5, R1, 84 */
		/* 82139D08h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82139D08h case    5:*/		return 0x82139D0C;
		  /* 82139D0Ch */ case    6:  		/* lwz R9, <#[R31 + 20]> */
		/* 82139D0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82139D0Ch case    6:*/		return 0x82139D10;
		  /* 82139D10h */ case    7:  		/* mr R3, R31 */
		/* 82139D10h case    7:*/		regs.R3 = regs.R31;
		/* 82139D10h case    7:*/		return 0x82139D14;
		  /* 82139D14h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82139D14h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82139D14h case    8:*/		return 0x82139D18;
		  /* 82139D18h */ case    9:  		/* lwz R11, <#[R11 + 328]> */
		/* 82139D18h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 82139D18h case    9:*/		return 0x82139D1C;
		  /* 82139D1Ch */ case   10:  		/* lwzx R4, <#[R10 + R9]> */
		/* 82139D1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82139D1Ch case   10:*/		return 0x82139D20;
		  /* 82139D20h */ case   11:  		/* mtspr CTR, R11 */
		/* 82139D20h case   11:*/		regs.CTR = regs.R11;
		/* 82139D20h case   11:*/		return 0x82139D24;
		  /* 82139D24h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82139D24h case   12:*/		if ( 1 ) { regs.LR = 0x82139D28; return (uint32)regs.CTR; }
		/* 82139D24h case   12:*/		return 0x82139D28;
		  /* 82139D28h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82139D28h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139D28h case   13:*/		return 0x82139D2C;
		  /* 82139D2Ch */ case   14:  		/* bc 12, CR0_LT, 136 */
		/* 82139D2Ch case   14:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139D2Ch case   14:*/		return 0x82139D30;
		  /* 82139D30h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 82139D30h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139D30h case   15:*/		return 0x82139D34;
		  /* 82139D34h */ case   16:  		/* addi R7, R1, 88 */
		/* 82139D34h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 82139D34h case   16:*/		return 0x82139D38;
		  /* 82139D38h */ case   17:  		/* lis R6, 15 */
		/* 82139D38h case   17:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 82139D38h case   17:*/		return 0x82139D3C;
		  /* 82139D3Ch */ case   18:  		/* mr R5, R29 */
		/* 82139D3Ch case   18:*/		regs.R5 = regs.R29;
		/* 82139D3Ch case   18:*/		return 0x82139D40;
		  /* 82139D40h */ case   19:  		/* mr R4, R27 */
		/* 82139D40h case   19:*/		regs.R4 = regs.R27;
		/* 82139D40h case   19:*/		return 0x82139D44;
		  /* 82139D44h */ case   20:  		/* mr R3, R31 */
		/* 82139D44h case   20:*/		regs.R3 = regs.R31;
		/* 82139D44h case   20:*/		return 0x82139D48;
		  /* 82139D48h */ case   21:  		/* lwz R11, <#[R11 + 332]> */
		/* 82139D48h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 82139D48h case   21:*/		return 0x82139D4C;
		  /* 82139D4Ch */ case   22:  		/* mtspr CTR, R11 */
		/* 82139D4Ch case   22:*/		regs.CTR = regs.R11;
		/* 82139D4Ch case   22:*/		return 0x82139D50;
		  /* 82139D50h */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 82139D50h case   23:*/		if ( 1 ) { regs.LR = 0x82139D54; return (uint32)regs.CTR; }
		/* 82139D50h case   23:*/		return 0x82139D54;
		  /* 82139D54h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 82139D54h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139D54h case   24:*/		return 0x82139D58;
		  /* 82139D58h */ case   25:  		/* bc 12, CR0_LT, 92 */
		/* 82139D58h case   25:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139D58h case   25:*/		return 0x82139D5C;
		  /* 82139D5Ch */ case   26:  		/* lwz R11, <#[R31]> */
		/* 82139D5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139D5Ch case   26:*/		return 0x82139D60;
		  /* 82139D60h */ case   27:  		/* mr R3, R31 */
		/* 82139D60h case   27:*/		regs.R3 = regs.R31;
		/* 82139D60h case   27:*/		return 0x82139D64;
		  /* 82139D64h */ case   28:  		/* lwz R6, <#[R1 + 80]> */
		/* 82139D64h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82139D64h case   28:*/		return 0x82139D68;
		  /* 82139D68h */ case   29:  		/* lwz R5, <#[R1 + 88]> */
		/* 82139D68h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 82139D68h case   29:*/		return 0x82139D6C;
		  /* 82139D6Ch */ case   30:  		/* lwz R4, <#[R1 + 84]> */
		/* 82139D6Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82139D6Ch case   30:*/		return 0x82139D70;
		  /* 82139D70h */ case   31:  		/* lwz R11, <#[R11 + 316]> */
		/* 82139D70h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 82139D70h case   31:*/		return 0x82139D74;
		  /* 82139D74h */ case   32:  		/* mtspr CTR, R11 */
		/* 82139D74h case   32:*/		regs.CTR = regs.R11;
		/* 82139D74h case   32:*/		return 0x82139D78;
		  /* 82139D78h */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 82139D78h case   33:*/		if ( 1 ) { regs.LR = 0x82139D7C; return (uint32)regs.CTR; }
		/* 82139D78h case   33:*/		return 0x82139D7C;
		  /* 82139D7Ch */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 82139D7Ch case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139D7Ch case   34:*/		return 0x82139D80;
		  /* 82139D80h */ case   35:  		/* bc 12, CR0_LT, 52 */
		/* 82139D80h case   35:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139D80h case   35:*/		return 0x82139D84;
	}
	return 0x82139D84;
} // Block from 82139CF4h-82139D84h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82139D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139D84);
		  /* 82139D84h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82139D84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139D84h case    0:*/		return 0x82139D88;
		  /* 82139D88h */ case    1:  		/* mr R3, R31 */
		/* 82139D88h case    1:*/		regs.R3 = regs.R31;
		/* 82139D88h case    1:*/		return 0x82139D8C;
		  /* 82139D8Ch */ case    2:  		/* lwz R11, <#[R11 + 308]> */
		/* 82139D8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 82139D8Ch case    2:*/		return 0x82139D90;
		  /* 82139D90h */ case    3:  		/* mtspr CTR, R11 */
		/* 82139D90h case    3:*/		regs.CTR = regs.R11;
		/* 82139D90h case    3:*/		return 0x82139D94;
		  /* 82139D94h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82139D94h case    4:*/		if ( 1 ) { regs.LR = 0x82139D98; return (uint32)regs.CTR; }
		/* 82139D94h case    4:*/		return 0x82139D98;
		  /* 82139D98h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82139D98h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139D98h case    5:*/		return 0x82139D9C;
		  /* 82139D9Ch */ case    6:  		/* bc 12, CR0_LT, 24 */
		/* 82139D9Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139D9Ch case    6:*/		return 0x82139DA0;
		  /* 82139DA0h */ case    7:  		/* mr R3, R31 */
		/* 82139DA0h case    7:*/		regs.R3 = regs.R31;
		/* 82139DA0h case    7:*/		return 0x82139DA4;
		  /* 82139DA4h */ case    8:  		/* bl -312476 */
		/* 82139DA4h case    8:*/		regs.LR = 0x82139DA8; return 0x820ED908;
		/* 82139DA4h case    8:*/		return 0x82139DA8;
		  /* 82139DA8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82139DA8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139DA8h case    9:*/		return 0x82139DAC;
		  /* 82139DACh */ case   10:  		/* bc 12, CR0_LT, 8 */
		/* 82139DACh case   10:*/		if ( regs.CR[0].lt ) { return 0x82139DB4;  }
		/* 82139DACh case   10:*/		return 0x82139DB0;
		  /* 82139DB0h */ case   11:  		/* li R3, 0 */
		/* 82139DB0h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82139DB0h case   11:*/		return 0x82139DB4;
	}
	return 0x82139DB4;
} // Block from 82139D84h-82139DB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82139DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139DB4);
		  /* 82139DB4h */ case    0:  		/* addi R1, R1, 144 */
		/* 82139DB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82139DB4h case    0:*/		return 0x82139DB8;
		  /* 82139DB8h */ case    1:  		/* b -690964 */
		/* 82139DB8h case    1:*/		return 0x820912A4;
		/* 82139DB8h case    1:*/		return 0x82139DBC;
		  /* 82139DBCh */ case    2:  		/* nop */
		/* 82139DBCh case    2:*/		cpu::op::nop();
		/* 82139DBCh case    2:*/		return 0x82139DC0;
	}
	return 0x82139DC0;
} // Block from 82139DB4h-82139DC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82139DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139DC0);
		  /* 82139DC0h */ case    0:  		/* mfspr R12, LR */
		/* 82139DC0h case    0:*/		regs.R12 = regs.LR;
		/* 82139DC0h case    0:*/		return 0x82139DC4;
		  /* 82139DC4h */ case    1:  		/* bl -691048 */
		/* 82139DC4h case    1:*/		regs.LR = 0x82139DC8; return 0x8209125C;
		/* 82139DC4h case    1:*/		return 0x82139DC8;
		  /* 82139DC8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82139DC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82139DC8h case    2:*/		return 0x82139DCC;
		  /* 82139DCCh */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 82139DCCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82139DCCh case    3:*/		return 0x82139DD0;
		  /* 82139DD0h */ case    4:  		/* li R4, 66 */
		/* 82139DD0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x42);
		/* 82139DD0h case    4:*/		return 0x82139DD4;
		  /* 82139DD4h */ case    5:  		/* mr R31, R3 */
		/* 82139DD4h case    5:*/		regs.R31 = regs.R3;
		/* 82139DD4h case    5:*/		return 0x82139DD8;
		  /* 82139DD8h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 82139DD8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82139DD8h case    6:*/		return 0x82139DDC;
		  /* 82139DDCh */ case    7:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 82139DDCh case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 82139DDCh case    7:*/		return 0x82139DE0;
		  /* 82139DE0h */ case    8:  		/* bl -277744 */
		/* 82139DE0h case    8:*/		regs.LR = 0x82139DE4; return 0x820F60F0;
		/* 82139DE0h case    8:*/		return 0x82139DE4;
		  /* 82139DE4h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82139DE4h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139DE4h case    9:*/		return 0x82139DE8;
		  /* 82139DE8h */ case   10:  		/* bc 12, CR0_LT, 312 */
		/* 82139DE8h case   10:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139DE8h case   10:*/		return 0x82139DEC;
		  /* 82139DECh */ case   11:  		/* lwz R11, <#[R31 + 260]> */
		/* 82139DECh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82139DECh case   11:*/		return 0x82139DF0;
		  /* 82139DF0h */ case   12:  		/* li R7, 0 */
		/* 82139DF0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82139DF0h case   12:*/		return 0x82139DF4;
		  /* 82139DF4h */ case   13:  		/* lwz R10, <#[R31]> */
		/* 82139DF4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82139DF4h case   13:*/		return 0x82139DF8;
		  /* 82139DF8h */ case   14:  		/* li R6, 0 */
		/* 82139DF8h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139DF8h case   14:*/		return 0x82139DFC;
		  /* 82139DFCh */ case   15:  		/* lwz R9, <#[R31 + 20]> */
		/* 82139DFCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82139DFCh case   15:*/		return 0x82139E00;
		  /* 82139E00h */ case   16:  		/* addi R5, R1, 80 */
		/* 82139E00h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82139E00h case   16:*/		return 0x82139E04;
		  /* 82139E04h */ case   17:  		/* mr R3, R31 */
		/* 82139E04h case   17:*/		regs.R3 = regs.R31;
		/* 82139E04h case   17:*/		return 0x82139E08;
		  /* 82139E08h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 82139E08h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82139E08h case   18:*/		return 0x82139E0C;
		  /* 82139E0Ch */ case   19:  		/* lwz R10, <#[R10 + 320]> */
		/* 82139E0Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 82139E0Ch case   19:*/		return 0x82139E10;
		  /* 82139E10h */ case   20:  		/* lwz R11, <#[R11]> */
		/* 82139E10h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82139E10h case   20:*/		return 0x82139E14;
		  /* 82139E14h */ case   21:  		/* mtspr CTR, R10 */
		/* 82139E14h case   21:*/		regs.CTR = regs.R10;
		/* 82139E14h case   21:*/		return 0x82139E18;
		  /* 82139E18h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139E18h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139E18h case   22:*/		return 0x82139E1C;
		  /* 82139E1Ch */ case   23:  		/* lwzx R4, <#[R11 + R9]> */
		/* 82139E1Ch case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82139E1Ch case   23:*/		return 0x82139E20;
		  /* 82139E20h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82139E20h case   24:*/		if ( 1 ) { regs.LR = 0x82139E24; return (uint32)regs.CTR; }
		/* 82139E20h case   24:*/		return 0x82139E24;
		  /* 82139E24h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 82139E24h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139E24h case   25:*/		return 0x82139E28;
		  /* 82139E28h */ case   26:  		/* bc 12, CR0_LT, 248 */
		/* 82139E28h case   26:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139E28h case   26:*/		return 0x82139E2C;
		  /* 82139E2Ch */ case   27:  		/* lwz R11, <#[R31]> */
		/* 82139E2Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139E2Ch case   27:*/		return 0x82139E30;
		  /* 82139E30h */ case   28:  		/* li R6, 0 */
		/* 82139E30h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139E30h case   28:*/		return 0x82139E34;
		  /* 82139E34h */ case   29:  		/* lis R5, 15 */
		/* 82139E34h case   29:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 82139E34h case   29:*/		return 0x82139E38;
		  /* 82139E38h */ case   30:  		/* lwz R4, <#[R1 + 80]> */
		/* 82139E38h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82139E38h case   30:*/		return 0x82139E3C;
		  /* 82139E3Ch */ case   31:  		/* mr R3, R31 */
		/* 82139E3Ch case   31:*/		regs.R3 = regs.R31;
		/* 82139E3Ch case   31:*/		return 0x82139E40;
		  /* 82139E40h */ case   32:  		/* lwz R11, <#[R11 + 312]> */
		/* 82139E40h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 82139E40h case   32:*/		return 0x82139E44;
		  /* 82139E44h */ case   33:  		/* mtspr CTR, R11 */
		/* 82139E44h case   33:*/		regs.CTR = regs.R11;
		/* 82139E44h case   33:*/		return 0x82139E48;
		  /* 82139E48h */ case   34:  		/* bcctrl 20, CR0_LT */
		/* 82139E48h case   34:*/		if ( 1 ) { regs.LR = 0x82139E4C; return (uint32)regs.CTR; }
		/* 82139E48h case   34:*/		return 0x82139E4C;
		  /* 82139E4Ch */ case   35:  		/* cmpwi CR0, R3, 0 */
		/* 82139E4Ch case   35:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139E4Ch case   35:*/		return 0x82139E50;
		  /* 82139E50h */ case   36:  		/* bc 12, CR0_LT, 208 */
		/* 82139E50h case   36:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139E50h case   36:*/		return 0x82139E54;
		  /* 82139E54h */ case   37:  		/* lwz R10, <#[R31 + 260]> */
		/* 82139E54h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 82139E54h case   37:*/		return 0x82139E58;
		  /* 82139E58h */ case   38:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82139E58h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82139E58h case   38:*/		return 0x82139E5C;
		  /* 82139E5Ch */ case   39:  		/* lwz R9, <#[R31]> */
		/* 82139E5Ch case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82139E5Ch case   39:*/		return 0x82139E60;
		  /* 82139E60h */ case   40:  		/* addi R6, R1, 88 */
		/* 82139E60h case   40:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82139E60h case   40:*/		return 0x82139E64;
		  /* 82139E64h */ case   41:  		/* lwz R8, <#[R31 + 20]> */
		/* 82139E64h case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82139E64h case   41:*/		return 0x82139E68;
		  /* 82139E68h */ case   42:  		/* addi R5, R1, 80 */
		/* 82139E68h case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82139E68h case   42:*/		return 0x82139E6C;
		  /* 82139E6Ch */ case   43:  		/* mr R3, R31 */
		/* 82139E6Ch case   43:*/		regs.R3 = regs.R31;
		/* 82139E6Ch case   43:*/		return 0x82139E70;
		  /* 82139E70h */ case   44:  		/* lwz R10, <#[R10 + 8]> */
		/* 82139E70h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82139E70h case   44:*/		return 0x82139E74;
		  /* 82139E74h */ case   45:  		/* lwz R9, <#[R9 + 328]> */
		/* 82139E74h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000148) );
		/* 82139E74h case   45:*/		return 0x82139E78;
		  /* 82139E78h */ case   46:  		/* add R30, R11, R10 */
		/* 82139E78h case   46:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 82139E78h case   46:*/		return 0x82139E7C;
		  /* 82139E7Ch */ case   47:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139E7Ch case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139E7Ch case   47:*/		return 0x82139E80;
		  /* 82139E80h */ case   48:  		/* mtspr CTR, R9 */
		/* 82139E80h case   48:*/		regs.CTR = regs.R9;
		/* 82139E80h case   48:*/		return 0x82139E84;
		  /* 82139E84h */ case   49:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139E84h case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139E84h case   49:*/		return 0x82139E88;
		  /* 82139E88h */ case   50:  		/* lwzx R4, <#[R11 + R8]> */
		/* 82139E88h case   50:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82139E88h case   50:*/		return 0x82139E8C;
		  /* 82139E8Ch */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 82139E8Ch case   51:*/		if ( 1 ) { regs.LR = 0x82139E90; return (uint32)regs.CTR; }
		/* 82139E8Ch case   51:*/		return 0x82139E90;
		  /* 82139E90h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 82139E90h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139E90h case   52:*/		return 0x82139E94;
		  /* 82139E94h */ case   53:  		/* bc 12, CR0_LT, 140 */
		/* 82139E94h case   53:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139E94h case   53:*/		return 0x82139E98;
		  /* 82139E98h */ case   54:  		/* lwz R11, <#[R31]> */
		/* 82139E98h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139E98h case   54:*/		return 0x82139E9C;
		  /* 82139E9Ch */ case   55:  		/* addi R7, R1, 84 */
		/* 82139E9Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 82139E9Ch case   55:*/		return 0x82139EA0;
		  /* 82139EA0h */ case   56:  		/* lis R6, 15 */
		/* 82139EA0h case   56:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 82139EA0h case   56:*/		return 0x82139EA4;
		  /* 82139EA4h */ case   57:  		/* mr R5, R29 */
		/* 82139EA4h case   57:*/		regs.R5 = regs.R29;
		/* 82139EA4h case   57:*/		return 0x82139EA8;
		  /* 82139EA8h */ case   58:  		/* mr R4, R30 */
		/* 82139EA8h case   58:*/		regs.R4 = regs.R30;
		/* 82139EA8h case   58:*/		return 0x82139EAC;
		  /* 82139EACh */ case   59:  		/* mr R3, R31 */
		/* 82139EACh case   59:*/		regs.R3 = regs.R31;
		/* 82139EACh case   59:*/		return 0x82139EB0;
		  /* 82139EB0h */ case   60:  		/* lwz R11, <#[R11 + 332]> */
		/* 82139EB0h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 82139EB0h case   60:*/		return 0x82139EB4;
		  /* 82139EB4h */ case   61:  		/* mtspr CTR, R11 */
		/* 82139EB4h case   61:*/		regs.CTR = regs.R11;
		/* 82139EB4h case   61:*/		return 0x82139EB8;
		  /* 82139EB8h */ case   62:  		/* bcctrl 20, CR0_LT */
		/* 82139EB8h case   62:*/		if ( 1 ) { regs.LR = 0x82139EBC; return (uint32)regs.CTR; }
		/* 82139EB8h case   62:*/		return 0x82139EBC;
		  /* 82139EBCh */ case   63:  		/* cmpwi CR0, R3, 0 */
		/* 82139EBCh case   63:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139EBCh case   63:*/		return 0x82139EC0;
		  /* 82139EC0h */ case   64:  		/* bc 12, CR0_LT, 96 */
		/* 82139EC0h case   64:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139EC0h case   64:*/		return 0x82139EC4;
		  /* 82139EC4h */ case   65:  		/* lwz R11, <#[R31]> */
		/* 82139EC4h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139EC4h case   65:*/		return 0x82139EC8;
		  /* 82139EC8h */ case   66:  		/* mr R3, R31 */
		/* 82139EC8h case   66:*/		regs.R3 = regs.R31;
		/* 82139EC8h case   66:*/		return 0x82139ECC;
		  /* 82139ECCh */ case   67:  		/* lwz R10, <#[R1 + 84]> */
		/* 82139ECCh case   67:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82139ECCh case   67:*/		return 0x82139ED0;
		  /* 82139ED0h */ case   68:  		/* lwz R6, <#[R1 + 88]> */
		/* 82139ED0h case   68:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 82139ED0h case   68:*/		return 0x82139ED4;
		  /* 82139ED4h */ case   69:  		/* oris R5, R10, 2304 */
		/* 82139ED4h case   69:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R10,0x900);
		/* 82139ED4h case   69:*/		return 0x82139ED8;
		  /* 82139ED8h */ case   70:  		/* lwz R4, <#[R1 + 80]> */
		/* 82139ED8h case   70:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82139ED8h case   70:*/		return 0x82139EDC;
		  /* 82139EDCh */ case   71:  		/* lwz R11, <#[R11 + 316]> */
		/* 82139EDCh case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 82139EDCh case   71:*/		return 0x82139EE0;
		  /* 82139EE0h */ case   72:  		/* mtspr CTR, R11 */
		/* 82139EE0h case   72:*/		regs.CTR = regs.R11;
		/* 82139EE0h case   72:*/		return 0x82139EE4;
		  /* 82139EE4h */ case   73:  		/* bcctrl 20, CR0_LT */
		/* 82139EE4h case   73:*/		if ( 1 ) { regs.LR = 0x82139EE8; return (uint32)regs.CTR; }
		/* 82139EE4h case   73:*/		return 0x82139EE8;
		  /* 82139EE8h */ case   74:  		/* cmpwi CR0, R3, 0 */
		/* 82139EE8h case   74:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139EE8h case   74:*/		return 0x82139EEC;
		  /* 82139EECh */ case   75:  		/* bc 12, CR0_LT, 52 */
		/* 82139EECh case   75:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139EECh case   75:*/		return 0x82139EF0;
		  /* 82139EF0h */ case   76:  		/* lwz R11, <#[R31]> */
		/* 82139EF0h case   76:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139EF0h case   76:*/		return 0x82139EF4;
		  /* 82139EF4h */ case   77:  		/* mr R3, R31 */
		/* 82139EF4h case   77:*/		regs.R3 = regs.R31;
		/* 82139EF4h case   77:*/		return 0x82139EF8;
		  /* 82139EF8h */ case   78:  		/* lwz R11, <#[R11 + 308]> */
		/* 82139EF8h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 82139EF8h case   78:*/		return 0x82139EFC;
		  /* 82139EFCh */ case   79:  		/* mtspr CTR, R11 */
		/* 82139EFCh case   79:*/		regs.CTR = regs.R11;
		/* 82139EFCh case   79:*/		return 0x82139F00;
		  /* 82139F00h */ case   80:  		/* bcctrl 20, CR0_LT */
		/* 82139F00h case   80:*/		if ( 1 ) { regs.LR = 0x82139F04; return (uint32)regs.CTR; }
		/* 82139F00h case   80:*/		return 0x82139F04;
		  /* 82139F04h */ case   81:  		/* cmpwi CR0, R3, 0 */
		/* 82139F04h case   81:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139F04h case   81:*/		return 0x82139F08;
		  /* 82139F08h */ case   82:  		/* bc 12, CR0_LT, 24 */
		/* 82139F08h case   82:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139F08h case   82:*/		return 0x82139F0C;
		  /* 82139F0Ch */ case   83:  		/* mr R3, R31 */
		/* 82139F0Ch case   83:*/		regs.R3 = regs.R31;
		/* 82139F0Ch case   83:*/		return 0x82139F10;
		  /* 82139F10h */ case   84:  		/* bl -312840 */
		/* 82139F10h case   84:*/		regs.LR = 0x82139F14; return 0x820ED908;
		/* 82139F10h case   84:*/		return 0x82139F14;
		  /* 82139F14h */ case   85:  		/* cmpwi CR0, R3, 0 */
		/* 82139F14h case   85:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139F14h case   85:*/		return 0x82139F18;
		  /* 82139F18h */ case   86:  		/* bc 12, CR0_LT, 8 */
		/* 82139F18h case   86:*/		if ( regs.CR[0].lt ) { return 0x82139F20;  }
		/* 82139F18h case   86:*/		return 0x82139F1C;
		  /* 82139F1Ch */ case   87:  		/* li R3, 0 */
		/* 82139F1Ch case   87:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82139F1Ch case   87:*/		return 0x82139F20;
	}
	return 0x82139F20;
} // Block from 82139DC0h-82139F20h (88 instructions)

//////////////////////////////////////////////////////
// Block at 82139F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139F20);
		  /* 82139F20h */ case    0:  		/* addi R1, R1, 128 */
		/* 82139F20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82139F20h case    0:*/		return 0x82139F24;
		  /* 82139F24h */ case    1:  		/* b -691320 */
		/* 82139F24h case    1:*/		return 0x820912AC;
		/* 82139F24h case    1:*/		return 0x82139F28;
	}
	return 0x82139F28;
} // Block from 82139F20h-82139F28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82139F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82139F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82139F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82139F28);
		  /* 82139F28h */ case    0:  		/* mfspr R12, LR */
		/* 82139F28h case    0:*/		regs.R12 = regs.LR;
		/* 82139F28h case    0:*/		return 0x82139F2C;
		  /* 82139F2Ch */ case    1:  		/* bl -691408 */
		/* 82139F2Ch case    1:*/		regs.LR = 0x82139F30; return 0x8209125C;
		/* 82139F2Ch case    1:*/		return 0x82139F30;
		  /* 82139F30h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82139F30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82139F30h case    2:*/		return 0x82139F34;
		  /* 82139F34h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 82139F34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82139F34h case    3:*/		return 0x82139F38;
		  /* 82139F38h */ case    4:  		/* li R4, 66 */
		/* 82139F38h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x42);
		/* 82139F38h case    4:*/		return 0x82139F3C;
		  /* 82139F3Ch */ case    5:  		/* mr R31, R3 */
		/* 82139F3Ch case    5:*/		regs.R31 = regs.R3;
		/* 82139F3Ch case    5:*/		return 0x82139F40;
		  /* 82139F40h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 82139F40h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82139F40h case    6:*/		return 0x82139F44;
		  /* 82139F44h */ case    7:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 82139F44h case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 82139F44h case    7:*/		return 0x82139F48;
		  /* 82139F48h */ case    8:  		/* bl -278104 */
		/* 82139F48h case    8:*/		regs.LR = 0x82139F4C; return 0x820F60F0;
		/* 82139F48h case    8:*/		return 0x82139F4C;
		  /* 82139F4Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82139F4Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139F4Ch case    9:*/		return 0x82139F50;
		  /* 82139F50h */ case   10:  		/* bc 12, CR0_LT, 308 */
		/* 82139F50h case   10:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 82139F50h case   10:*/		return 0x82139F54;
		  /* 82139F54h */ case   11:  		/* lwz R11, <#[R31 + 260]> */
		/* 82139F54h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82139F54h case   11:*/		return 0x82139F58;
		  /* 82139F58h */ case   12:  		/* li R7, 0 */
		/* 82139F58h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82139F58h case   12:*/		return 0x82139F5C;
		  /* 82139F5Ch */ case   13:  		/* lwz R10, <#[R31]> */
		/* 82139F5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82139F5Ch case   13:*/		return 0x82139F60;
		  /* 82139F60h */ case   14:  		/* li R6, 0 */
		/* 82139F60h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139F60h case   14:*/		return 0x82139F64;
		  /* 82139F64h */ case   15:  		/* lwz R9, <#[R31 + 20]> */
		/* 82139F64h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82139F64h case   15:*/		return 0x82139F68;
		  /* 82139F68h */ case   16:  		/* addi R5, R1, 80 */
		/* 82139F68h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82139F68h case   16:*/		return 0x82139F6C;
		  /* 82139F6Ch */ case   17:  		/* mr R3, R31 */
		/* 82139F6Ch case   17:*/		regs.R3 = regs.R31;
		/* 82139F6Ch case   17:*/		return 0x82139F70;
		  /* 82139F70h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 82139F70h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82139F70h case   18:*/		return 0x82139F74;
		  /* 82139F74h */ case   19:  		/* lwz R10, <#[R10 + 320]> */
		/* 82139F74h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 82139F74h case   19:*/		return 0x82139F78;
		  /* 82139F78h */ case   20:  		/* lwz R11, <#[R11]> */
		/* 82139F78h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82139F78h case   20:*/		return 0x82139F7C;
		  /* 82139F7Ch */ case   21:  		/* mtspr CTR, R10 */
		/* 82139F7Ch case   21:*/		regs.CTR = regs.R10;
		/* 82139F7Ch case   21:*/		return 0x82139F80;
		  /* 82139F80h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139F80h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139F80h case   22:*/		return 0x82139F84;
		  /* 82139F84h */ case   23:  		/* lwzx R4, <#[R11 + R9]> */
		/* 82139F84h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82139F84h case   23:*/		return 0x82139F88;
		  /* 82139F88h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82139F88h case   24:*/		if ( 1 ) { regs.LR = 0x82139F8C; return (uint32)regs.CTR; }
		/* 82139F88h case   24:*/		return 0x82139F8C;
		  /* 82139F8Ch */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 82139F8Ch case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139F8Ch case   25:*/		return 0x82139F90;
		  /* 82139F90h */ case   26:  		/* bc 12, CR0_LT, 244 */
		/* 82139F90h case   26:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 82139F90h case   26:*/		return 0x82139F94;
		  /* 82139F94h */ case   27:  		/* lwz R11, <#[R31]> */
		/* 82139F94h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82139F94h case   27:*/		return 0x82139F98;
		  /* 82139F98h */ case   28:  		/* li R6, 0 */
		/* 82139F98h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82139F98h case   28:*/		return 0x82139F9C;
		  /* 82139F9Ch */ case   29:  		/* lis R5, 15 */
		/* 82139F9Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 82139F9Ch case   29:*/		return 0x82139FA0;
		  /* 82139FA0h */ case   30:  		/* lwz R4, <#[R1 + 80]> */
		/* 82139FA0h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82139FA0h case   30:*/		return 0x82139FA4;
		  /* 82139FA4h */ case   31:  		/* mr R3, R31 */
		/* 82139FA4h case   31:*/		regs.R3 = regs.R31;
		/* 82139FA4h case   31:*/		return 0x82139FA8;
		  /* 82139FA8h */ case   32:  		/* lwz R11, <#[R11 + 312]> */
		/* 82139FA8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 82139FA8h case   32:*/		return 0x82139FAC;
		  /* 82139FACh */ case   33:  		/* mtspr CTR, R11 */
		/* 82139FACh case   33:*/		regs.CTR = regs.R11;
		/* 82139FACh case   33:*/		return 0x82139FB0;
		  /* 82139FB0h */ case   34:  		/* bcctrl 20, CR0_LT */
		/* 82139FB0h case   34:*/		if ( 1 ) { regs.LR = 0x82139FB4; return (uint32)regs.CTR; }
		/* 82139FB0h case   34:*/		return 0x82139FB4;
		  /* 82139FB4h */ case   35:  		/* cmpwi CR0, R3, 0 */
		/* 82139FB4h case   35:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139FB4h case   35:*/		return 0x82139FB8;
		  /* 82139FB8h */ case   36:  		/* bc 12, CR0_LT, 204 */
		/* 82139FB8h case   36:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 82139FB8h case   36:*/		return 0x82139FBC;
		  /* 82139FBCh */ case   37:  		/* lwz R10, <#[R31 + 260]> */
		/* 82139FBCh case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 82139FBCh case   37:*/		return 0x82139FC0;
		  /* 82139FC0h */ case   38:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82139FC0h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82139FC0h case   38:*/		return 0x82139FC4;
		  /* 82139FC4h */ case   39:  		/* lwz R9, <#[R31]> */
		/* 82139FC4h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82139FC4h case   39:*/		return 0x82139FC8;
		  /* 82139FC8h */ case   40:  		/* addi R6, R1, 84 */
		/* 82139FC8h case   40:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 82139FC8h case   40:*/		return 0x82139FCC;
		  /* 82139FCCh */ case   41:  		/* lwz R8, <#[R31 + 20]> */
		/* 82139FCCh case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82139FCCh case   41:*/		return 0x82139FD0;
		  /* 82139FD0h */ case   42:  		/* addi R5, R1, 80 */
		/* 82139FD0h case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82139FD0h case   42:*/		return 0x82139FD4;
		  /* 82139FD4h */ case   43:  		/* mr R3, R31 */
		/* 82139FD4h case   43:*/		regs.R3 = regs.R31;
		/* 82139FD4h case   43:*/		return 0x82139FD8;
		  /* 82139FD8h */ case   44:  		/* lwz R10, <#[R10 + 8]> */
		/* 82139FD8h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82139FD8h case   44:*/		return 0x82139FDC;
		  /* 82139FDCh */ case   45:  		/* lwz R9, <#[R9 + 328]> */
		/* 82139FDCh case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000148) );
		/* 82139FDCh case   45:*/		return 0x82139FE0;
		  /* 82139FE0h */ case   46:  		/* add R30, R11, R10 */
		/* 82139FE0h case   46:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 82139FE0h case   46:*/		return 0x82139FE4;
		  /* 82139FE4h */ case   47:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82139FE4h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82139FE4h case   47:*/		return 0x82139FE8;
		  /* 82139FE8h */ case   48:  		/* mtspr CTR, R9 */
		/* 82139FE8h case   48:*/		regs.CTR = regs.R9;
		/* 82139FE8h case   48:*/		return 0x82139FEC;
		  /* 82139FECh */ case   49:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82139FECh case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82139FECh case   49:*/		return 0x82139FF0;
		  /* 82139FF0h */ case   50:  		/* lwzx R4, <#[R11 + R8]> */
		/* 82139FF0h case   50:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82139FF0h case   50:*/		return 0x82139FF4;
		  /* 82139FF4h */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 82139FF4h case   51:*/		if ( 1 ) { regs.LR = 0x82139FF8; return (uint32)regs.CTR; }
		/* 82139FF4h case   51:*/		return 0x82139FF8;
		  /* 82139FF8h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 82139FF8h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82139FF8h case   52:*/		return 0x82139FFC;
		  /* 82139FFCh */ case   53:  		/* bc 12, CR0_LT, 136 */
		/* 82139FFCh case   53:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 82139FFCh case   53:*/		return 0x8213A000;
		  /* 8213A000h */ case   54:  		/* lwz R11, <#[R31]> */
		/* 8213A000h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A000h case   54:*/		return 0x8213A004;
		  /* 8213A004h */ case   55:  		/* addi R7, R1, 88 */
		/* 8213A004h case   55:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8213A004h case   55:*/		return 0x8213A008;
		  /* 8213A008h */ case   56:  		/* lis R6, 15 */
		/* 8213A008h case   56:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 8213A008h case   56:*/		return 0x8213A00C;
		  /* 8213A00Ch */ case   57:  		/* mr R5, R29 */
		/* 8213A00Ch case   57:*/		regs.R5 = regs.R29;
		/* 8213A00Ch case   57:*/		return 0x8213A010;
		  /* 8213A010h */ case   58:  		/* mr R4, R30 */
		/* 8213A010h case   58:*/		regs.R4 = regs.R30;
		/* 8213A010h case   58:*/		return 0x8213A014;
		  /* 8213A014h */ case   59:  		/* mr R3, R31 */
		/* 8213A014h case   59:*/		regs.R3 = regs.R31;
		/* 8213A014h case   59:*/		return 0x8213A018;
		  /* 8213A018h */ case   60:  		/* lwz R11, <#[R11 + 332]> */
		/* 8213A018h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 8213A018h case   60:*/		return 0x8213A01C;
		  /* 8213A01Ch */ case   61:  		/* mtspr CTR, R11 */
		/* 8213A01Ch case   61:*/		regs.CTR = regs.R11;
		/* 8213A01Ch case   61:*/		return 0x8213A020;
		  /* 8213A020h */ case   62:  		/* bcctrl 20, CR0_LT */
		/* 8213A020h case   62:*/		if ( 1 ) { regs.LR = 0x8213A024; return (uint32)regs.CTR; }
		/* 8213A020h case   62:*/		return 0x8213A024;
		  /* 8213A024h */ case   63:  		/* cmpwi CR0, R3, 0 */
		/* 8213A024h case   63:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A024h case   63:*/		return 0x8213A028;
		  /* 8213A028h */ case   64:  		/* bc 12, CR0_LT, 92 */
		/* 8213A028h case   64:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 8213A028h case   64:*/		return 0x8213A02C;
		  /* 8213A02Ch */ case   65:  		/* lwz R11, <#[R31]> */
		/* 8213A02Ch case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A02Ch case   65:*/		return 0x8213A030;
		  /* 8213A030h */ case   66:  		/* lis R5, 2804 */
		/* 8213A030h case   66:*/		cpu::op::lis<0>(regs,&regs.R5,0xAF4);
		/* 8213A030h case   66:*/		return 0x8213A034;
		  /* 8213A034h */ case   67:  		/* mr R3, R31 */
		/* 8213A034h case   67:*/		regs.R3 = regs.R31;
		/* 8213A034h case   67:*/		return 0x8213A038;
		  /* 8213A038h */ case   68:  		/* lwz R6, <#[R1 + 84]> */
		/* 8213A038h case   68:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8213A038h case   68:*/		return 0x8213A03C;
		  /* 8213A03Ch */ case   69:  		/* lwz R4, <#[R1 + 80]> */
		/* 8213A03Ch case   69:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A03Ch case   69:*/		return 0x8213A040;
		  /* 8213A040h */ case   70:  		/* lwz R11, <#[R11 + 316]> */
		/* 8213A040h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 8213A040h case   70:*/		return 0x8213A044;
		  /* 8213A044h */ case   71:  		/* mtspr CTR, R11 */
		/* 8213A044h case   71:*/		regs.CTR = regs.R11;
		/* 8213A044h case   71:*/		return 0x8213A048;
		  /* 8213A048h */ case   72:  		/* bcctrl 20, CR0_LT */
		/* 8213A048h case   72:*/		if ( 1 ) { regs.LR = 0x8213A04C; return (uint32)regs.CTR; }
		/* 8213A048h case   72:*/		return 0x8213A04C;
		  /* 8213A04Ch */ case   73:  		/* cmpwi CR0, R3, 0 */
		/* 8213A04Ch case   73:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A04Ch case   73:*/		return 0x8213A050;
		  /* 8213A050h */ case   74:  		/* bc 12, CR0_LT, 52 */
		/* 8213A050h case   74:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 8213A050h case   74:*/		return 0x8213A054;
		  /* 8213A054h */ case   75:  		/* lwz R11, <#[R31]> */
		/* 8213A054h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A054h case   75:*/		return 0x8213A058;
		  /* 8213A058h */ case   76:  		/* mr R3, R31 */
		/* 8213A058h case   76:*/		regs.R3 = regs.R31;
		/* 8213A058h case   76:*/		return 0x8213A05C;
		  /* 8213A05Ch */ case   77:  		/* lwz R11, <#[R11 + 308]> */
		/* 8213A05Ch case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 8213A05Ch case   77:*/		return 0x8213A060;
		  /* 8213A060h */ case   78:  		/* mtspr CTR, R11 */
		/* 8213A060h case   78:*/		regs.CTR = regs.R11;
		/* 8213A060h case   78:*/		return 0x8213A064;
		  /* 8213A064h */ case   79:  		/* bcctrl 20, CR0_LT */
		/* 8213A064h case   79:*/		if ( 1 ) { regs.LR = 0x8213A068; return (uint32)regs.CTR; }
		/* 8213A064h case   79:*/		return 0x8213A068;
		  /* 8213A068h */ case   80:  		/* cmpwi CR0, R3, 0 */
		/* 8213A068h case   80:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A068h case   80:*/		return 0x8213A06C;
		  /* 8213A06Ch */ case   81:  		/* bc 12, CR0_LT, 24 */
		/* 8213A06Ch case   81:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 8213A06Ch case   81:*/		return 0x8213A070;
		  /* 8213A070h */ case   82:  		/* mr R3, R31 */
		/* 8213A070h case   82:*/		regs.R3 = regs.R31;
		/* 8213A070h case   82:*/		return 0x8213A074;
		  /* 8213A074h */ case   83:  		/* bl -313196 */
		/* 8213A074h case   83:*/		regs.LR = 0x8213A078; return 0x820ED908;
		/* 8213A074h case   83:*/		return 0x8213A078;
		  /* 8213A078h */ case   84:  		/* cmpwi CR0, R3, 0 */
		/* 8213A078h case   84:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A078h case   84:*/		return 0x8213A07C;
		  /* 8213A07Ch */ case   85:  		/* bc 12, CR0_LT, 8 */
		/* 8213A07Ch case   85:*/		if ( regs.CR[0].lt ) { return 0x8213A084;  }
		/* 8213A07Ch case   85:*/		return 0x8213A080;
		  /* 8213A080h */ case   86:  		/* li R3, 0 */
		/* 8213A080h case   86:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A080h case   86:*/		return 0x8213A084;
	}
	return 0x8213A084;
} // Block from 82139F28h-8213A084h (87 instructions)

//////////////////////////////////////////////////////
// Block at 8213A084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A084);
		  /* 8213A084h */ case    0:  		/* addi R1, R1, 128 */
		/* 8213A084h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213A084h case    0:*/		return 0x8213A088;
		  /* 8213A088h */ case    1:  		/* b -691676 */
		/* 8213A088h case    1:*/		return 0x820912AC;
		/* 8213A088h case    1:*/		return 0x8213A08C;
		  /* 8213A08Ch */ case    2:  		/* nop */
		/* 8213A08Ch case    2:*/		cpu::op::nop();
		/* 8213A08Ch case    2:*/		return 0x8213A090;
	}
	return 0x8213A090;
} // Block from 8213A084h-8213A090h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A090);
		  /* 8213A090h */ case    0:  		/* mfspr R12, LR */
		/* 8213A090h case    0:*/		regs.R12 = regs.LR;
		/* 8213A090h case    0:*/		return 0x8213A094;
		  /* 8213A094h */ case    1:  		/* bl -691768 */
		/* 8213A094h case    1:*/		regs.LR = 0x8213A098; return 0x8209125C;
		/* 8213A094h case    1:*/		return 0x8213A098;
		  /* 8213A098h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213A098h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213A098h case    2:*/		return 0x8213A09C;
		  /* 8213A09Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 8213A09Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8213A09Ch case    3:*/		return 0x8213A0A0;
		  /* 8213A0A0h */ case    4:  		/* mr R31, R3 */
		/* 8213A0A0h case    4:*/		regs.R31 = regs.R3;
		/* 8213A0A0h case    4:*/		return 0x8213A0A4;
		  /* 8213A0A4h */ case    5:  		/* lhz R10, <#[R3 + 202]> */
		/* 8213A0A4h case    5:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213A0A4h case    5:*/		return 0x8213A0A8;
		  /* 8213A0A8h */ case    6:  		/* li R4, 66 */
		/* 8213A0A8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x42);
		/* 8213A0A8h case    6:*/		return 0x8213A0AC;
		  /* 8213A0ACh */ case    7:  		/* cmplwi CR6, R10, 260 */
		/* 8213A0ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000104);
		/* 8213A0ACh case    7:*/		return 0x8213A0B0;
		  /* 8213A0B0h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 8213A0B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A0B0h case    8:*/		return 0x8213A0B4;
		  /* 8213A0B4h */ case    9:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 8213A0B4h case    9:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 8213A0B4h case    9:*/		return 0x8213A0B8;
		  /* 8213A0B8h */ case   10:  		/* bc 4, CR6_EQ, 328 */
		/* 8213A0B8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213A200;  }
		/* 8213A0B8h case   10:*/		return 0x8213A0BC;
		  /* 8213A0BCh */ case   11:  		/* bl -278476 */
		/* 8213A0BCh case   11:*/		regs.LR = 0x8213A0C0; return 0x820F60F0;
		/* 8213A0BCh case   11:*/		return 0x8213A0C0;
		  /* 8213A0C0h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8213A0C0h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A0C0h case   12:*/		return 0x8213A0C4;
		  /* 8213A0C4h */ case   13:  		/* bc 12, CR0_LT, 308 */
		/* 8213A0C4h case   13:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A0C4h case   13:*/		return 0x8213A0C8;
		  /* 8213A0C8h */ case   14:  		/* lwz R11, <#[R31 + 260]> */
		/* 8213A0C8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A0C8h case   14:*/		return 0x8213A0CC;
		  /* 8213A0CCh */ case   15:  		/* li R7, 0 */
		/* 8213A0CCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213A0CCh case   15:*/		return 0x8213A0D0;
		  /* 8213A0D0h */ case   16:  		/* lwz R10, <#[R31]> */
		/* 8213A0D0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A0D0h case   16:*/		return 0x8213A0D4;
		  /* 8213A0D4h */ case   17:  		/* li R6, 0 */
		/* 8213A0D4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A0D4h case   17:*/		return 0x8213A0D8;
		  /* 8213A0D8h */ case   18:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213A0D8h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213A0D8h case   18:*/		return 0x8213A0DC;
		  /* 8213A0DCh */ case   19:  		/* addi R5, R1, 80 */
		/* 8213A0DCh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A0DCh case   19:*/		return 0x8213A0E0;
		  /* 8213A0E0h */ case   20:  		/* mr R3, R31 */
		/* 8213A0E0h case   20:*/		regs.R3 = regs.R31;
		/* 8213A0E0h case   20:*/		return 0x8213A0E4;
		  /* 8213A0E4h */ case   21:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213A0E4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213A0E4h case   21:*/		return 0x8213A0E8;
		  /* 8213A0E8h */ case   22:  		/* lwz R10, <#[R10 + 320]> */
		/* 8213A0E8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 8213A0E8h case   22:*/		return 0x8213A0EC;
		  /* 8213A0ECh */ case   23:  		/* lwz R11, <#[R11]> */
		/* 8213A0ECh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A0ECh case   23:*/		return 0x8213A0F0;
		  /* 8213A0F0h */ case   24:  		/* mtspr CTR, R10 */
		/* 8213A0F0h case   24:*/		regs.CTR = regs.R10;
		/* 8213A0F0h case   24:*/		return 0x8213A0F4;
		  /* 8213A0F4h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213A0F4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213A0F4h case   25:*/		return 0x8213A0F8;
		  /* 8213A0F8h */ case   26:  		/* lwzx R4, <#[R11 + R9]> */
		/* 8213A0F8h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213A0F8h case   26:*/		return 0x8213A0FC;
		  /* 8213A0FCh */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 8213A0FCh case   27:*/		if ( 1 ) { regs.LR = 0x8213A100; return (uint32)regs.CTR; }
		/* 8213A0FCh case   27:*/		return 0x8213A100;
		  /* 8213A100h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 8213A100h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A100h case   28:*/		return 0x8213A104;
		  /* 8213A104h */ case   29:  		/* bc 12, CR0_LT, 244 */
		/* 8213A104h case   29:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A104h case   29:*/		return 0x8213A108;
		  /* 8213A108h */ case   30:  		/* lwz R11, <#[R31]> */
		/* 8213A108h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A108h case   30:*/		return 0x8213A10C;
		  /* 8213A10Ch */ case   31:  		/* li R6, 0 */
		/* 8213A10Ch case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A10Ch case   31:*/		return 0x8213A110;
		  /* 8213A110h */ case   32:  		/* lis R5, 15 */
		/* 8213A110h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 8213A110h case   32:*/		return 0x8213A114;
		  /* 8213A114h */ case   33:  		/* lwz R4, <#[R1 + 80]> */
		/* 8213A114h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A114h case   33:*/		return 0x8213A118;
		  /* 8213A118h */ case   34:  		/* mr R3, R31 */
		/* 8213A118h case   34:*/		regs.R3 = regs.R31;
		/* 8213A118h case   34:*/		return 0x8213A11C;
		  /* 8213A11Ch */ case   35:  		/* lwz R11, <#[R11 + 312]> */
		/* 8213A11Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 8213A11Ch case   35:*/		return 0x8213A120;
		  /* 8213A120h */ case   36:  		/* mtspr CTR, R11 */
		/* 8213A120h case   36:*/		regs.CTR = regs.R11;
		/* 8213A120h case   36:*/		return 0x8213A124;
		  /* 8213A124h */ case   37:  		/* bcctrl 20, CR0_LT */
		/* 8213A124h case   37:*/		if ( 1 ) { regs.LR = 0x8213A128; return (uint32)regs.CTR; }
		/* 8213A124h case   37:*/		return 0x8213A128;
		  /* 8213A128h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 8213A128h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A128h case   38:*/		return 0x8213A12C;
		  /* 8213A12Ch */ case   39:  		/* bc 12, CR0_LT, 204 */
		/* 8213A12Ch case   39:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A12Ch case   39:*/		return 0x8213A130;
		  /* 8213A130h */ case   40:  		/* lwz R10, <#[R31 + 260]> */
		/* 8213A130h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A130h case   40:*/		return 0x8213A134;
		  /* 8213A134h */ case   41:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8213A134h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8213A134h case   41:*/		return 0x8213A138;
		  /* 8213A138h */ case   42:  		/* lwz R9, <#[R31]> */
		/* 8213A138h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A138h case   42:*/		return 0x8213A13C;
		  /* 8213A13Ch */ case   43:  		/* addi R6, R1, 84 */
		/* 8213A13Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8213A13Ch case   43:*/		return 0x8213A140;
		  /* 8213A140h */ case   44:  		/* lwz R8, <#[R31 + 20]> */
		/* 8213A140h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8213A140h case   44:*/		return 0x8213A144;
		  /* 8213A144h */ case   45:  		/* addi R5, R1, 80 */
		/* 8213A144h case   45:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A144h case   45:*/		return 0x8213A148;
		  /* 8213A148h */ case   46:  		/* mr R3, R31 */
		/* 8213A148h case   46:*/		regs.R3 = regs.R31;
		/* 8213A148h case   46:*/		return 0x8213A14C;
		  /* 8213A14Ch */ case   47:  		/* lwz R10, <#[R10 + 8]> */
		/* 8213A14Ch case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8213A14Ch case   47:*/		return 0x8213A150;
		  /* 8213A150h */ case   48:  		/* lwz R9, <#[R9 + 328]> */
		/* 8213A150h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000148) );
		/* 8213A150h case   48:*/		return 0x8213A154;
		  /* 8213A154h */ case   49:  		/* add R30, R11, R10 */
		/* 8213A154h case   49:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8213A154h case   49:*/		return 0x8213A158;
		  /* 8213A158h */ case   50:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213A158h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213A158h case   50:*/		return 0x8213A15C;
		  /* 8213A15Ch */ case   51:  		/* mtspr CTR, R9 */
		/* 8213A15Ch case   51:*/		regs.CTR = regs.R9;
		/* 8213A15Ch case   51:*/		return 0x8213A160;
		  /* 8213A160h */ case   52:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213A160h case   52:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213A160h case   52:*/		return 0x8213A164;
		  /* 8213A164h */ case   53:  		/* lwzx R4, <#[R11 + R8]> */
		/* 8213A164h case   53:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213A164h case   53:*/		return 0x8213A168;
		  /* 8213A168h */ case   54:  		/* bcctrl 20, CR0_LT */
		/* 8213A168h case   54:*/		if ( 1 ) { regs.LR = 0x8213A16C; return (uint32)regs.CTR; }
		/* 8213A168h case   54:*/		return 0x8213A16C;
		  /* 8213A16Ch */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 8213A16Ch case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A16Ch case   55:*/		return 0x8213A170;
		  /* 8213A170h */ case   56:  		/* bc 12, CR0_LT, 136 */
		/* 8213A170h case   56:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A170h case   56:*/		return 0x8213A174;
		  /* 8213A174h */ case   57:  		/* lwz R11, <#[R31]> */
		/* 8213A174h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A174h case   57:*/		return 0x8213A178;
		  /* 8213A178h */ case   58:  		/* addi R7, R1, 88 */
		/* 8213A178h case   58:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8213A178h case   58:*/		return 0x8213A17C;
		  /* 8213A17Ch */ case   59:  		/* lis R6, 15 */
		/* 8213A17Ch case   59:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 8213A17Ch case   59:*/		return 0x8213A180;
		  /* 8213A180h */ case   60:  		/* mr R5, R29 */
		/* 8213A180h case   60:*/		regs.R5 = regs.R29;
		/* 8213A180h case   60:*/		return 0x8213A184;
		  /* 8213A184h */ case   61:  		/* mr R4, R30 */
		/* 8213A184h case   61:*/		regs.R4 = regs.R30;
		/* 8213A184h case   61:*/		return 0x8213A188;
		  /* 8213A188h */ case   62:  		/* mr R3, R31 */
		/* 8213A188h case   62:*/		regs.R3 = regs.R31;
		/* 8213A188h case   62:*/		return 0x8213A18C;
		  /* 8213A18Ch */ case   63:  		/* lwz R11, <#[R11 + 332]> */
		/* 8213A18Ch case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 8213A18Ch case   63:*/		return 0x8213A190;
		  /* 8213A190h */ case   64:  		/* mtspr CTR, R11 */
		/* 8213A190h case   64:*/		regs.CTR = regs.R11;
		/* 8213A190h case   64:*/		return 0x8213A194;
		  /* 8213A194h */ case   65:  		/* bcctrl 20, CR0_LT */
		/* 8213A194h case   65:*/		if ( 1 ) { regs.LR = 0x8213A198; return (uint32)regs.CTR; }
		/* 8213A194h case   65:*/		return 0x8213A198;
		  /* 8213A198h */ case   66:  		/* cmpwi CR0, R3, 0 */
		/* 8213A198h case   66:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A198h case   66:*/		return 0x8213A19C;
		  /* 8213A19Ch */ case   67:  		/* bc 12, CR0_LT, 92 */
		/* 8213A19Ch case   67:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A19Ch case   67:*/		return 0x8213A1A0;
		  /* 8213A1A0h */ case   68:  		/* lwz R11, <#[R31]> */
		/* 8213A1A0h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A1A0h case   68:*/		return 0x8213A1A4;
		  /* 8213A1A4h */ case   69:  		/* lwz R6, <#[R1 + 84]> */
		/* 8213A1A4h case   69:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8213A1A4h case   69:*/		return 0x8213A1A8;
		  /* 8213A1A8h */ case   70:  		/* lwz R5, <#[R1 + 88]> */
		/* 8213A1A8h case   70:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 8213A1A8h case   70:*/		return 0x8213A1AC;
		  /* 8213A1ACh */ case   71:  		/* lwz R11, <#[R11 + 316]> */
		/* 8213A1ACh case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 8213A1ACh case   71:*/		return 0x8213A1B0;
		  /* 8213A1B0h */ case   72:  		/* mr R3, R31 */
		/* 8213A1B0h case   72:*/		regs.R3 = regs.R31;
		/* 8213A1B0h case   72:*/		return 0x8213A1B4;
		  /* 8213A1B4h */ case   73:  		/* lwz R4, <#[R1 + 80]> */
		/* 8213A1B4h case   73:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A1B4h case   73:*/		return 0x8213A1B8;
		  /* 8213A1B8h */ case   74:  		/* mtspr CTR, R11 */
		/* 8213A1B8h case   74:*/		regs.CTR = regs.R11;
		/* 8213A1B8h case   74:*/		return 0x8213A1BC;
		  /* 8213A1BCh */ case   75:  		/* bcctrl 20, CR0_LT */
		/* 8213A1BCh case   75:*/		if ( 1 ) { regs.LR = 0x8213A1C0; return (uint32)regs.CTR; }
		/* 8213A1BCh case   75:*/		return 0x8213A1C0;
		  /* 8213A1C0h */ case   76:  		/* cmpwi CR0, R3, 0 */
		/* 8213A1C0h case   76:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A1C0h case   76:*/		return 0x8213A1C4;
		  /* 8213A1C4h */ case   77:  		/* bc 12, CR0_LT, 52 */
		/* 8213A1C4h case   77:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A1C4h case   77:*/		return 0x8213A1C8;
		  /* 8213A1C8h */ case   78:  		/* lwz R11, <#[R31]> */
		/* 8213A1C8h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A1C8h case   78:*/		return 0x8213A1CC;
		  /* 8213A1CCh */ case   79:  		/* mr R3, R31 */
		/* 8213A1CCh case   79:*/		regs.R3 = regs.R31;
		/* 8213A1CCh case   79:*/		return 0x8213A1D0;
		  /* 8213A1D0h */ case   80:  		/* lwz R11, <#[R11 + 308]> */
		/* 8213A1D0h case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 8213A1D0h case   80:*/		return 0x8213A1D4;
		  /* 8213A1D4h */ case   81:  		/* mtspr CTR, R11 */
		/* 8213A1D4h case   81:*/		regs.CTR = regs.R11;
		/* 8213A1D4h case   81:*/		return 0x8213A1D8;
		  /* 8213A1D8h */ case   82:  		/* bcctrl 20, CR0_LT */
		/* 8213A1D8h case   82:*/		if ( 1 ) { regs.LR = 0x8213A1DC; return (uint32)regs.CTR; }
		/* 8213A1D8h case   82:*/		return 0x8213A1DC;
		  /* 8213A1DCh */ case   83:  		/* cmpwi CR0, R3, 0 */
		/* 8213A1DCh case   83:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A1DCh case   83:*/		return 0x8213A1E0;
		  /* 8213A1E0h */ case   84:  		/* bc 12, CR0_LT, 24 */
		/* 8213A1E0h case   84:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A1E0h case   84:*/		return 0x8213A1E4;
		  /* 8213A1E4h */ case   85:  		/* mr R3, R31 */
		/* 8213A1E4h case   85:*/		regs.R3 = regs.R31;
		/* 8213A1E4h case   85:*/		return 0x8213A1E8;
		  /* 8213A1E8h */ case   86:  		/* bl -313568 */
		/* 8213A1E8h case   86:*/		regs.LR = 0x8213A1EC; return 0x820ED908;
		/* 8213A1E8h case   86:*/		return 0x8213A1EC;
		  /* 8213A1ECh */ case   87:  		/* cmpwi CR0, R3, 0 */
		/* 8213A1ECh case   87:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A1ECh case   87:*/		return 0x8213A1F0;
		  /* 8213A1F0h */ case   88:  		/* bc 12, CR0_LT, 8 */
		/* 8213A1F0h case   88:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A1F0h case   88:*/		return 0x8213A1F4;
		  /* 8213A1F4h */ case   89:  		/* li R3, 0 */
		/* 8213A1F4h case   89:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A1F4h case   89:*/		return 0x8213A1F8;
	}
	return 0x8213A1F8;
} // Block from 8213A090h-8213A1F8h (90 instructions)

//////////////////////////////////////////////////////
// Block at 8213A1F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A1F8);
		  /* 8213A1F8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8213A1F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213A1F8h case    0:*/		return 0x8213A1FC;
		  /* 8213A1FCh */ case    1:  		/* b -692048 */
		/* 8213A1FCh case    1:*/		return 0x820912AC;
		/* 8213A1FCh case    1:*/		return 0x8213A200;
	}
	return 0x8213A200;
} // Block from 8213A1F8h-8213A200h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A200);
		  /* 8213A200h */ case    0:  		/* bl -278800 */
		/* 8213A200h case    0:*/		regs.LR = 0x8213A204; return 0x820F60F0;
		/* 8213A200h case    0:*/		return 0x8213A204;
		  /* 8213A204h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 8213A204h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A204h case    1:*/		return 0x8213A208;
		  /* 8213A208h */ case    2:  		/* bc 12, CR0_LT, -16 */
		/* 8213A208h case    2:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A208h case    2:*/		return 0x8213A20C;
		  /* 8213A20Ch */ case    3:  		/* lwz R11, <#[R31 + 260]> */
		/* 8213A20Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A20Ch case    3:*/		return 0x8213A210;
		  /* 8213A210h */ case    4:  		/* li R7, 0 */
		/* 8213A210h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213A210h case    4:*/		return 0x8213A214;
		  /* 8213A214h */ case    5:  		/* lwz R10, <#[R31]> */
		/* 8213A214h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A214h case    5:*/		return 0x8213A218;
		  /* 8213A218h */ case    6:  		/* li R6, 0 */
		/* 8213A218h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A218h case    6:*/		return 0x8213A21C;
		  /* 8213A21Ch */ case    7:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213A21Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213A21Ch case    7:*/		return 0x8213A220;
		  /* 8213A220h */ case    8:  		/* addi R5, R1, 80 */
		/* 8213A220h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A220h case    8:*/		return 0x8213A224;
		  /* 8213A224h */ case    9:  		/* mr R3, R31 */
		/* 8213A224h case    9:*/		regs.R3 = regs.R31;
		/* 8213A224h case    9:*/		return 0x8213A228;
		  /* 8213A228h */ case   10:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213A228h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213A228h case   10:*/		return 0x8213A22C;
		  /* 8213A22Ch */ case   11:  		/* lwz R10, <#[R10 + 320]> */
		/* 8213A22Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 8213A22Ch case   11:*/		return 0x8213A230;
		  /* 8213A230h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8213A230h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A230h case   12:*/		return 0x8213A234;
		  /* 8213A234h */ case   13:  		/* mtspr CTR, R10 */
		/* 8213A234h case   13:*/		regs.CTR = regs.R10;
		/* 8213A234h case   13:*/		return 0x8213A238;
		  /* 8213A238h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213A238h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213A238h case   14:*/		return 0x8213A23C;
		  /* 8213A23Ch */ case   15:  		/* lwzx R4, <#[R11 + R9]> */
		/* 8213A23Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213A23Ch case   15:*/		return 0x8213A240;
		  /* 8213A240h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8213A240h case   16:*/		if ( 1 ) { regs.LR = 0x8213A244; return (uint32)regs.CTR; }
		/* 8213A240h case   16:*/		return 0x8213A244;
		  /* 8213A244h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213A244h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A244h case   17:*/		return 0x8213A248;
		  /* 8213A248h */ case   18:  		/* bc 12, CR0_LT, -80 */
		/* 8213A248h case   18:*/		if ( regs.CR[0].lt ) { return 0x8213A1F8;  }
		/* 8213A248h case   18:*/		return 0x8213A24C;
		  /* 8213A24Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 8213A24Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A24Ch case   19:*/		return 0x8213A250;
		  /* 8213A250h */ case   20:  		/* li R6, 0 */
		/* 8213A250h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A250h case   20:*/		return 0x8213A254;
		  /* 8213A254h */ case   21:  		/* lis R5, 15 */
		/* 8213A254h case   21:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 8213A254h case   21:*/		return 0x8213A258;
		  /* 8213A258h */ case   22:  		/* lwz R11, <#[R11 + 312]> */
		/* 8213A258h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 8213A258h case   22:*/		return 0x8213A25C;
		  /* 8213A25Ch */ case   23:  		/* b -172 */
		/* 8213A25Ch case   23:*/		return 0x8213A1B0;
		/* 8213A25Ch case   23:*/		return 0x8213A260;
	}
	return 0x8213A260;
} // Block from 8213A200h-8213A260h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213A260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A260);
		  /* 8213A260h */ case    0:  		/* mfspr R12, LR */
		/* 8213A260h case    0:*/		regs.R12 = regs.LR;
		/* 8213A260h case    0:*/		return 0x8213A264;
		  /* 8213A264h */ case    1:  		/* bl -692232 */
		/* 8213A264h case    1:*/		regs.LR = 0x8213A268; return 0x8209125C;
		/* 8213A264h case    1:*/		return 0x8213A268;
		  /* 8213A268h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8213A268h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8213A268h case    2:*/		return 0x8213A26C;
		  /* 8213A26Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 8213A26Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8213A26Ch case    3:*/		return 0x8213A270;
		  /* 8213A270h */ case    4:  		/* mr R31, R3 */
		/* 8213A270h case    4:*/		regs.R31 = regs.R3;
		/* 8213A270h case    4:*/		return 0x8213A274;
		  /* 8213A274h */ case    5:  		/* lhz R9, <#[R3 + 202]> */
		/* 8213A274h case    5:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213A274h case    5:*/		return 0x8213A278;
		  /* 8213A278h */ case    6:  		/* li R4, 64 */
		/* 8213A278h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 8213A278h case    6:*/		return 0x8213A27C;
		  /* 8213A27Ch */ case    7:  		/* lwz R10, <#[R3 + 20]> */
		/* 8213A27Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8213A27Ch case    7:*/		return 0x8213A280;
		  /* 8213A280h */ case    8:  		/* cmplwi CR6, R9, 260 */
		/* 8213A280h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000104);
		/* 8213A280h case    8:*/		return 0x8213A284;
		  /* 8213A284h */ case    9:  		/* lwz R9, <#[R11 + 16]> */
		/* 8213A284h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8213A284h case    9:*/		return 0x8213A288;
		  /* 8213A288h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 8213A288h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A288h case   10:*/		return 0x8213A28C;
		  /* 8213A28Ch */ case   11:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 8213A28Ch case   11:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 8213A28Ch case   11:*/		return 0x8213A290;
		  /* 8213A290h */ case   12:  		/* lwz R11, <#[R9]> */
		/* 8213A290h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8213A290h case   12:*/		return 0x8213A294;
		  /* 8213A294h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213A294h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213A294h case   13:*/		return 0x8213A298;
		  /* 8213A298h */ case   14:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8213A298h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213A298h case   14:*/		return 0x8213A29C;
		  /* 8213A29Ch */ case   15:  		/* bc 4, CR6_EQ, 348 */
		/* 8213A29Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x8213A3F8;  }
		/* 8213A29Ch case   15:*/		return 0x8213A2A0;
		  /* 8213A2A0h */ case   16:  		/* bl -278960 */
		/* 8213A2A0h case   16:*/		regs.LR = 0x8213A2A4; return 0x820F60F0;
		/* 8213A2A0h case   16:*/		return 0x8213A2A4;
		  /* 8213A2A4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213A2A4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A2A4h case   17:*/		return 0x8213A2A8;
		  /* 8213A2A8h */ case   18:  		/* bc 12, CR0_LT, 328 */
		/* 8213A2A8h case   18:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A2A8h case   18:*/		return 0x8213A2AC;
		  /* 8213A2ACh */ case   19:  		/* lwz R11, <#[R31]> */
		/* 8213A2ACh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A2ACh case   19:*/		return 0x8213A2B0;
		  /* 8213A2B0h */ case   20:  		/* addi R7, R1, 84 */
		/* 8213A2B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213A2B0h case   20:*/		return 0x8213A2B4;
		  /* 8213A2B4h */ case   21:  		/* li R6, 0 */
		/* 8213A2B4h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A2B4h case   21:*/		return 0x8213A2B8;
		  /* 8213A2B8h */ case   22:  		/* addi R5, R1, 80 */
		/* 8213A2B8h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A2B8h case   22:*/		return 0x8213A2BC;
		  /* 8213A2BCh */ case   23:  		/* mr R4, R30 */
		/* 8213A2BCh case   23:*/		regs.R4 = regs.R30;
		/* 8213A2BCh case   23:*/		return 0x8213A2C0;
		  /* 8213A2C0h */ case   24:  		/* mr R3, R31 */
		/* 8213A2C0h case   24:*/		regs.R3 = regs.R31;
		/* 8213A2C0h case   24:*/		return 0x8213A2C4;
		  /* 8213A2C4h */ case   25:  		/* lwz R11, <#[R11 + 320]> */
		/* 8213A2C4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000140) );
		/* 8213A2C4h case   25:*/		return 0x8213A2C8;
		  /* 8213A2C8h */ case   26:  		/* mtspr CTR, R11 */
		/* 8213A2C8h case   26:*/		regs.CTR = regs.R11;
		/* 8213A2C8h case   26:*/		return 0x8213A2CC;
		  /* 8213A2CCh */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 8213A2CCh case   27:*/		if ( 1 ) { regs.LR = 0x8213A2D0; return (uint32)regs.CTR; }
		/* 8213A2CCh case   27:*/		return 0x8213A2D0;
		  /* 8213A2D0h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 8213A2D0h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A2D0h case   28:*/		return 0x8213A2D4;
		  /* 8213A2D4h */ case   29:  		/* bc 12, CR0_LT, 284 */
		/* 8213A2D4h case   29:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A2D4h case   29:*/		return 0x8213A2D8;
		  /* 8213A2D8h */ case   30:  		/* lwz R11, <#[R31]> */
		/* 8213A2D8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A2D8h case   30:*/		return 0x8213A2DC;
		  /* 8213A2DCh */ case   31:  		/* addi R6, R1, 88 */
		/* 8213A2DCh case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 8213A2DCh case   31:*/		return 0x8213A2E0;
		  /* 8213A2E0h */ case   32:  		/* lwz R10, <#[R31 + 260]> */
		/* 8213A2E0h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A2E0h case   32:*/		return 0x8213A2E4;
		  /* 8213A2E4h */ case   33:  		/* mr R5, R29 */
		/* 8213A2E4h case   33:*/		regs.R5 = regs.R29;
		/* 8213A2E4h case   33:*/		return 0x8213A2E8;
		  /* 8213A2E8h */ case   34:  		/* mr R3, R31 */
		/* 8213A2E8h case   34:*/		regs.R3 = regs.R31;
		/* 8213A2E8h case   34:*/		return 0x8213A2EC;
		  /* 8213A2ECh */ case   35:  		/* lwz R7, <#[R1 + 84]> */
		/* 8213A2ECh case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 8213A2ECh case   35:*/		return 0x8213A2F0;
		  /* 8213A2F0h */ case   36:  		/* lwz R11, <#[R11 + 324]> */
		/* 8213A2F0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 8213A2F0h case   36:*/		return 0x8213A2F4;
		  /* 8213A2F4h */ case   37:  		/* lwz R4, <#[R10 + 16]> */
		/* 8213A2F4h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 8213A2F4h case   37:*/		return 0x8213A2F8;
		  /* 8213A2F8h */ case   38:  		/* mtspr CTR, R11 */
		/* 8213A2F8h case   38:*/		regs.CTR = regs.R11;
		/* 8213A2F8h case   38:*/		return 0x8213A2FC;
		  /* 8213A2FCh */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 8213A2FCh case   39:*/		if ( 1 ) { regs.LR = 0x8213A300; return (uint32)regs.CTR; }
		/* 8213A2FCh case   39:*/		return 0x8213A300;
		  /* 8213A300h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 8213A300h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A300h case   40:*/		return 0x8213A304;
		  /* 8213A304h */ case   41:  		/* bc 12, CR0_LT, 236 */
		/* 8213A304h case   41:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A304h case   41:*/		return 0x8213A308;
		  /* 8213A308h */ case   42:  		/* lwz R11, <#[R31]> */
		/* 8213A308h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A308h case   42:*/		return 0x8213A30C;
		  /* 8213A30Ch */ case   43:  		/* li R6, 0 */
		/* 8213A30Ch case   43:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A30Ch case   43:*/		return 0x8213A310;
		  /* 8213A310h */ case   44:  		/* lis R5, 7 */
		/* 8213A310h case   44:*/		cpu::op::lis<0>(regs,&regs.R5,0x7);
		/* 8213A310h case   44:*/		return 0x8213A314;
		  /* 8213A314h */ case   45:  		/* lwz R4, <#[R1 + 80]> */
		/* 8213A314h case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A314h case   45:*/		return 0x8213A318;
		  /* 8213A318h */ case   46:  		/* mr R3, R31 */
		/* 8213A318h case   46:*/		regs.R3 = regs.R31;
		/* 8213A318h case   46:*/		return 0x8213A31C;
		  /* 8213A31Ch */ case   47:  		/* lwz R11, <#[R11 + 312]> */
		/* 8213A31Ch case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 8213A31Ch case   47:*/		return 0x8213A320;
	}
	return 0x8213A320;
} // Block from 8213A260h-8213A320h (48 instructions)

//////////////////////////////////////////////////////
// Block at 8213A320h
// Function '?ValidateOutput@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A320);
		  /* 8213A320h */ case    0:  		/* mtspr CTR, R11 */
		/* 8213A320h case    0:*/		regs.CTR = regs.R11;
		/* 8213A320h case    0:*/		return 0x8213A324;
		  /* 8213A324h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8213A324h case    1:*/		if ( 1 ) { regs.LR = 0x8213A328; return (uint32)regs.CTR; }
		/* 8213A324h case    1:*/		return 0x8213A328;
		  /* 8213A328h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213A328h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A328h case    2:*/		return 0x8213A32C;
		  /* 8213A32Ch */ case    3:  		/* bc 12, CR0_LT, 196 */
		/* 8213A32Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A32Ch case    3:*/		return 0x8213A330;
		  /* 8213A330h */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 8213A330h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A330h case    4:*/		return 0x8213A334;
		  /* 8213A334h */ case    5:  		/* addi R6, R1, 92 */
		/* 8213A334h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C);
		/* 8213A334h case    5:*/		return 0x8213A338;
		  /* 8213A338h */ case    6:  		/* lwz R10, <#[R31]> */
		/* 8213A338h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A338h case    6:*/		return 0x8213A33C;
		  /* 8213A33Ch */ case    7:  		/* addi R5, R1, 80 */
		/* 8213A33Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A33Ch case    7:*/		return 0x8213A340;
		  /* 8213A340h */ case    8:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213A340h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213A340h case    8:*/		return 0x8213A344;
		  /* 8213A344h */ case    9:  		/* mr R3, R31 */
		/* 8213A344h case    9:*/		regs.R3 = regs.R31;
		/* 8213A344h case    9:*/		return 0x8213A348;
		  /* 8213A348h */ case   10:  		/* lwz R30, <#[R11 + 8]> */
		/* 8213A348h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8213A348h case   10:*/		return 0x8213A34C;
		  /* 8213A34Ch */ case   11:  		/* lwz R11, <#[R10 + 328]> */
		/* 8213A34Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000148) );
		/* 8213A34Ch case   11:*/		return 0x8213A350;
		  /* 8213A350h */ case   12:  		/* lwz R10, <#[R30]> */
		/* 8213A350h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8213A350h case   12:*/		return 0x8213A354;
		  /* 8213A354h */ case   13:  		/* mtspr CTR, R11 */
		/* 8213A354h case   13:*/		regs.CTR = regs.R11;
		/* 8213A354h case   13:*/		return 0x8213A358;
		  /* 8213A358h */ case   14:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8213A358h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8213A358h case   14:*/		return 0x8213A35C;
		  /* 8213A35Ch */ case   15:  		/* lwzx R4, <#[R11 + R9]> */
		/* 8213A35Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213A35Ch case   15:*/		return 0x8213A360;
		  /* 8213A360h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8213A360h case   16:*/		if ( 1 ) { regs.LR = 0x8213A364; return (uint32)regs.CTR; }
		/* 8213A360h case   16:*/		return 0x8213A364;
		  /* 8213A364h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213A364h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A364h case   17:*/		return 0x8213A368;
		  /* 8213A368h */ case   18:  		/* bc 12, CR0_LT, 136 */
		/* 8213A368h case   18:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A368h case   18:*/		return 0x8213A36C;
		  /* 8213A36Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 8213A36Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A36Ch case   19:*/		return 0x8213A370;
		  /* 8213A370h */ case   20:  		/* addi R7, R1, 96 */
		/* 8213A370h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8213A370h case   20:*/		return 0x8213A374;
		  /* 8213A374h */ case   21:  		/* mr R5, R29 */
		/* 8213A374h case   21:*/		regs.R5 = regs.R29;
		/* 8213A374h case   21:*/		return 0x8213A378;
		  /* 8213A378h */ case   22:  		/* lwz R6, <#[R1 + 88]> */
		/* 8213A378h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 8213A378h case   22:*/		return 0x8213A37C;
		  /* 8213A37Ch */ case   23:  		/* mr R4, R30 */
		/* 8213A37Ch case   23:*/		regs.R4 = regs.R30;
		/* 8213A37Ch case   23:*/		return 0x8213A380;
		  /* 8213A380h */ case   24:  		/* mr R3, R31 */
		/* 8213A380h case   24:*/		regs.R3 = regs.R31;
		/* 8213A380h case   24:*/		return 0x8213A384;
		  /* 8213A384h */ case   25:  		/* lwz R11, <#[R11 + 332]> */
		/* 8213A384h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 8213A384h case   25:*/		return 0x8213A388;
		  /* 8213A388h */ case   26:  		/* mtspr CTR, R11 */
		/* 8213A388h case   26:*/		regs.CTR = regs.R11;
		/* 8213A388h case   26:*/		return 0x8213A38C;
		  /* 8213A38Ch */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 8213A38Ch case   27:*/		if ( 1 ) { regs.LR = 0x8213A390; return (uint32)regs.CTR; }
		/* 8213A38Ch case   27:*/		return 0x8213A390;
		  /* 8213A390h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 8213A390h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A390h case   28:*/		return 0x8213A394;
		  /* 8213A394h */ case   29:  		/* bc 12, CR0_LT, 92 */
		/* 8213A394h case   29:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A394h case   29:*/		return 0x8213A398;
		  /* 8213A398h */ case   30:  		/* lwz R11, <#[R31]> */
		/* 8213A398h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A398h case   30:*/		return 0x8213A39C;
		  /* 8213A39Ch */ case   31:  		/* lis R5, 228 */
		/* 8213A39Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R5,0xE4);
		/* 8213A39Ch case   31:*/		return 0x8213A3A0;
		  /* 8213A3A0h */ case   32:  		/* lwz R6, <#[R1 + 92]> */
		/* 8213A3A0h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 8213A3A0h case   32:*/		return 0x8213A3A4;
		  /* 8213A3A4h */ case   33:  		/* lwz R11, <#[R11 + 316]> */
		/* 8213A3A4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 8213A3A4h case   33:*/		return 0x8213A3A8;
		  /* 8213A3A8h */ case   34:  		/* mr R3, R31 */
		/* 8213A3A8h case   34:*/		regs.R3 = regs.R31;
		/* 8213A3A8h case   34:*/		return 0x8213A3AC;
		  /* 8213A3ACh */ case   35:  		/* lwz R4, <#[R1 + 80]> */
		/* 8213A3ACh case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A3ACh case   35:*/		return 0x8213A3B0;
		  /* 8213A3B0h */ case   36:  		/* mtspr CTR, R11 */
		/* 8213A3B0h case   36:*/		regs.CTR = regs.R11;
		/* 8213A3B0h case   36:*/		return 0x8213A3B4;
		  /* 8213A3B4h */ case   37:  		/* bcctrl 20, CR0_LT */
		/* 8213A3B4h case   37:*/		if ( 1 ) { regs.LR = 0x8213A3B8; return (uint32)regs.CTR; }
		/* 8213A3B4h case   37:*/		return 0x8213A3B8;
		  /* 8213A3B8h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 8213A3B8h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A3B8h case   38:*/		return 0x8213A3BC;
		  /* 8213A3BCh */ case   39:  		/* bc 12, CR0_LT, 52 */
		/* 8213A3BCh case   39:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A3BCh case   39:*/		return 0x8213A3C0;
		  /* 8213A3C0h */ case   40:  		/* lwz R11, <#[R31]> */
		/* 8213A3C0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A3C0h case   40:*/		return 0x8213A3C4;
		  /* 8213A3C4h */ case   41:  		/* mr R3, R31 */
		/* 8213A3C4h case   41:*/		regs.R3 = regs.R31;
		/* 8213A3C4h case   41:*/		return 0x8213A3C8;
		  /* 8213A3C8h */ case   42:  		/* lwz R11, <#[R11 + 308]> */
		/* 8213A3C8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 8213A3C8h case   42:*/		return 0x8213A3CC;
		  /* 8213A3CCh */ case   43:  		/* mtspr CTR, R11 */
		/* 8213A3CCh case   43:*/		regs.CTR = regs.R11;
		/* 8213A3CCh case   43:*/		return 0x8213A3D0;
		  /* 8213A3D0h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 8213A3D0h case   44:*/		if ( 1 ) { regs.LR = 0x8213A3D4; return (uint32)regs.CTR; }
		/* 8213A3D0h case   44:*/		return 0x8213A3D4;
		  /* 8213A3D4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 8213A3D4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A3D4h case   45:*/		return 0x8213A3D8;
		  /* 8213A3D8h */ case   46:  		/* bc 12, CR0_LT, 24 */
		/* 8213A3D8h case   46:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A3D8h case   46:*/		return 0x8213A3DC;
		  /* 8213A3DCh */ case   47:  		/* mr R3, R31 */
		/* 8213A3DCh case   47:*/		regs.R3 = regs.R31;
		/* 8213A3DCh case   47:*/		return 0x8213A3E0;
		  /* 8213A3E0h */ case   48:  		/* bl -314072 */
		/* 8213A3E0h case   48:*/		regs.LR = 0x8213A3E4; return 0x820ED908;
		/* 8213A3E0h case   48:*/		return 0x8213A3E4;
		  /* 8213A3E4h */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 8213A3E4h case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A3E4h case   49:*/		return 0x8213A3E8;
		  /* 8213A3E8h */ case   50:  		/* bc 12, CR0_LT, 8 */
		/* 8213A3E8h case   50:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A3E8h case   50:*/		return 0x8213A3EC;
		  /* 8213A3ECh */ case   51:  		/* li R3, 0 */
		/* 8213A3ECh case   51:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A3ECh case   51:*/		return 0x8213A3F0;
	}
	return 0x8213A3F0;
} // Block from 8213A320h-8213A3F0h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8213A3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A3F0);
		  /* 8213A3F0h */ case    0:  		/* addi R1, R1, 144 */
		/* 8213A3F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8213A3F0h case    0:*/		return 0x8213A3F4;
		  /* 8213A3F4h */ case    1:  		/* b -692552 */
		/* 8213A3F4h case    1:*/		return 0x820912AC;
		/* 8213A3F4h case    1:*/		return 0x8213A3F8;
	}
	return 0x8213A3F8;
} // Block from 8213A3F0h-8213A3F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A3F8);
		  /* 8213A3F8h */ case    0:  		/* bl -279304 */
		/* 8213A3F8h case    0:*/		regs.LR = 0x8213A3FC; return 0x820F60F0;
		/* 8213A3F8h case    0:*/		return 0x8213A3FC;
		  /* 8213A3FCh */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 8213A3FCh case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A3FCh case    1:*/		return 0x8213A400;
		  /* 8213A400h */ case    2:  		/* bc 12, CR0_LT, -16 */
		/* 8213A400h case    2:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A400h case    2:*/		return 0x8213A404;
		  /* 8213A404h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8213A404h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A404h case    3:*/		return 0x8213A408;
		  /* 8213A408h */ case    4:  		/* addi R7, R1, 84 */
		/* 8213A408h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213A408h case    4:*/		return 0x8213A40C;
		  /* 8213A40Ch */ case    5:  		/* li R6, 0 */
		/* 8213A40Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A40Ch case    5:*/		return 0x8213A410;
		  /* 8213A410h */ case    6:  		/* addi R5, R1, 80 */
		/* 8213A410h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8213A410h case    6:*/		return 0x8213A414;
		  /* 8213A414h */ case    7:  		/* mr R4, R30 */
		/* 8213A414h case    7:*/		regs.R4 = regs.R30;
		/* 8213A414h case    7:*/		return 0x8213A418;
		  /* 8213A418h */ case    8:  		/* mr R3, R31 */
		/* 8213A418h case    8:*/		regs.R3 = regs.R31;
		/* 8213A418h case    8:*/		return 0x8213A41C;
		  /* 8213A41Ch */ case    9:  		/* lwz R11, <#[R11 + 320]> */
		/* 8213A41Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000140) );
		/* 8213A41Ch case    9:*/		return 0x8213A420;
		  /* 8213A420h */ case   10:  		/* mtspr CTR, R11 */
		/* 8213A420h case   10:*/		regs.CTR = regs.R11;
		/* 8213A420h case   10:*/		return 0x8213A424;
		  /* 8213A424h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8213A424h case   11:*/		if ( 1 ) { regs.LR = 0x8213A428; return (uint32)regs.CTR; }
		/* 8213A424h case   11:*/		return 0x8213A428;
		  /* 8213A428h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8213A428h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A428h case   12:*/		return 0x8213A42C;
		  /* 8213A42Ch */ case   13:  		/* bc 12, CR0_LT, -60 */
		/* 8213A42Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A42Ch case   13:*/		return 0x8213A430;
		  /* 8213A430h */ case   14:  		/* lwz R11, <#[R31]> */
		/* 8213A430h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A430h case   14:*/		return 0x8213A434;
		  /* 8213A434h */ case   15:  		/* addi R6, R1, 88 */
		/* 8213A434h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 8213A434h case   15:*/		return 0x8213A438;
		  /* 8213A438h */ case   16:  		/* lwz R10, <#[R31 + 260]> */
		/* 8213A438h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213A438h case   16:*/		return 0x8213A43C;
		  /* 8213A43Ch */ case   17:  		/* mr R5, R29 */
		/* 8213A43Ch case   17:*/		regs.R5 = regs.R29;
		/* 8213A43Ch case   17:*/		return 0x8213A440;
		  /* 8213A440h */ case   18:  		/* mr R3, R31 */
		/* 8213A440h case   18:*/		regs.R3 = regs.R31;
		/* 8213A440h case   18:*/		return 0x8213A444;
		  /* 8213A444h */ case   19:  		/* lwz R7, <#[R1 + 84]> */
		/* 8213A444h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 8213A444h case   19:*/		return 0x8213A448;
		  /* 8213A448h */ case   20:  		/* lwz R11, <#[R11 + 324]> */
		/* 8213A448h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 8213A448h case   20:*/		return 0x8213A44C;
		  /* 8213A44Ch */ case   21:  		/* lwz R4, <#[R10 + 16]> */
		/* 8213A44Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 8213A44Ch case   21:*/		return 0x8213A450;
		  /* 8213A450h */ case   22:  		/* mtspr CTR, R11 */
		/* 8213A450h case   22:*/		regs.CTR = regs.R11;
		/* 8213A450h case   22:*/		return 0x8213A454;
		  /* 8213A454h */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 8213A454h case   23:*/		if ( 1 ) { regs.LR = 0x8213A458; return (uint32)regs.CTR; }
		/* 8213A454h case   23:*/		return 0x8213A458;
		  /* 8213A458h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8213A458h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A458h case   24:*/		return 0x8213A45C;
		  /* 8213A45Ch */ case   25:  		/* bc 12, CR0_LT, -108 */
		/* 8213A45Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x8213A3F0;  }
		/* 8213A45Ch case   25:*/		return 0x8213A460;
		  /* 8213A460h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 8213A460h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A460h case   26:*/		return 0x8213A464;
		  /* 8213A464h */ case   27:  		/* li R6, 0 */
		/* 8213A464h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213A464h case   27:*/		return 0x8213A468;
		  /* 8213A468h */ case   28:  		/* lis R5, 15 */
		/* 8213A468h case   28:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 8213A468h case   28:*/		return 0x8213A46C;
		  /* 8213A46Ch */ case   29:  		/* lwz R11, <#[R11 + 312]> */
		/* 8213A46Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 8213A46Ch case   29:*/		return 0x8213A470;
		  /* 8213A470h */ case   30:  		/* b -200 */
		/* 8213A470h case   30:*/		return 0x8213A3A8;
		/* 8213A470h case   30:*/		return 0x8213A474;
		  /* 8213A474h */ case   31:  		/* nop */
		/* 8213A474h case   31:*/		cpu::op::nop();
		/* 8213A474h case   31:*/		return 0x8213A478;
	}
	return 0x8213A478;
} // Block from 8213A3F8h-8213A478h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8213A478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A478);
		  /* 8213A478h */ case    0:  		/* lwz R11, <#[R3 + 260]> */
		/* 8213A478h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8213A478h case    0:*/		return 0x8213A47C;
		  /* 8213A47Ch */ case    1:  		/* oris R3, R4, 16384 */
		/* 8213A47Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R4,0x4000);
		/* 8213A47Ch case    1:*/		return 0x8213A480;
		  /* 8213A480h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 8213A480h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8213A480h case    2:*/		return 0x8213A484;
		  /* 8213A484h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 8213A484h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213A484h case    3:*/		return 0x8213A488;
		  /* 8213A488h */ case    4:  		/* bclr 12, CR6_EQ */
		/* 8213A488h case    4:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8213A488h case    4:*/		return 0x8213A48C;
	}
	return 0x8213A48C;
} // Block from 8213A478h-8213A48Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213A48Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A48C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A48C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A48C);
		  /* 8213A48Ch */ case    0:  		/* mr R3, R4 */
		/* 8213A48Ch case    0:*/		regs.R3 = regs.R4;
		/* 8213A48Ch case    0:*/		return 0x8213A490;
		  /* 8213A490h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8213A490h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A490h case    1:*/		return 0x8213A494;
	}
	return 0x8213A494;
} // Block from 8213A48Ch-8213A494h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A494);
		  /* 8213A494h */ case    0:  		/* nop */
		/* 8213A494h case    0:*/		cpu::op::nop();
		/* 8213A494h case    0:*/		return 0x8213A498;
	}
	return 0x8213A498;
} // Block from 8213A494h-8213A498h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A498);
		  /* 8213A498h */ case    0:  		/* mfspr R12, LR */
		/* 8213A498h case    0:*/		regs.R12 = regs.LR;
		/* 8213A498h case    0:*/		return 0x8213A49C;
		  /* 8213A49Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213A49Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213A49Ch case    1:*/		return 0x8213A4A0;
		  /* 8213A4A0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8213A4A0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213A4A0h case    2:*/		return 0x8213A4A4;
		  /* 8213A4A4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8213A4A4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8213A4A4h case    3:*/		return 0x8213A4A8;
		  /* 8213A4A8h */ case    4:  		/* lwz R4, <#[R3 + 200]> */
		/* 8213A4A8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x000000C8) );
		/* 8213A4A8h case    4:*/		return 0x8213A4AC;
		  /* 8213A4ACh */ case    5:  		/* mr R31, R3 */
		/* 8213A4ACh case    5:*/		regs.R31 = regs.R3;
		/* 8213A4ACh case    5:*/		return 0x8213A4B0;
		  /* 8213A4B0h */ case    6:  		/* bl -291136 */
		/* 8213A4B0h case    6:*/		regs.LR = 0x8213A4B4; return 0x820F3370;
		/* 8213A4B0h case    6:*/		return 0x8213A4B4;
		  /* 8213A4B4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8213A4B4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A4B4h case    7:*/		return 0x8213A4B8;
		  /* 8213A4B8h */ case    8:  		/* bc 12, CR0_LT, 20 */
		/* 8213A4B8h case    8:*/		if ( regs.CR[0].lt ) { return 0x8213A4CC;  }
		/* 8213A4B8h case    8:*/		return 0x8213A4BC;
		  /* 8213A4BCh */ case    9:  		/* mr R3, R31 */
		/* 8213A4BCh case    9:*/		regs.R3 = regs.R31;
		/* 8213A4BCh case    9:*/		return 0x8213A4C0;
		  /* 8213A4C0h */ case   10:  		/* bl -314296 */
		/* 8213A4C0h case   10:*/		regs.LR = 0x8213A4C4; return 0x820ED908;
		/* 8213A4C0h case   10:*/		return 0x8213A4C4;
		  /* 8213A4C4h */ case   11:  		/* srawi R11, R3, 31 */
		/* 8213A4C4h case   11:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 8213A4C4h case   11:*/		return 0x8213A4C8;
		  /* 8213A4C8h */ case   12:  		/* and R3, R11, R3 */
		/* 8213A4C8h case   12:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 8213A4C8h case   12:*/		return 0x8213A4CC;
	}
	return 0x8213A4CC;
} // Block from 8213A498h-8213A4CCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213A4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A4CC);
		  /* 8213A4CCh */ case    0:  		/* addi R1, R1, 96 */
		/* 8213A4CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8213A4CCh case    0:*/		return 0x8213A4D0;
		  /* 8213A4D0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213A4D0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213A4D0h case    1:*/		return 0x8213A4D4;
		  /* 8213A4D4h */ case    2:  		/* mtspr LR, R12 */
		/* 8213A4D4h case    2:*/		regs.LR = regs.R12;
		/* 8213A4D4h case    2:*/		return 0x8213A4D8;
		  /* 8213A4D8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8213A4D8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213A4D8h case    3:*/		return 0x8213A4DC;
		  /* 8213A4DCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 8213A4DCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A4DCh case    4:*/		return 0x8213A4E0;
	}
	return 0x8213A4E0;
} // Block from 8213A4CCh-8213A4E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213A4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A4E0);
		  /* 8213A4E0h */ case    0:  		/* lbz R10, <#[R4 + 111]> */
		/* 8213A4E0h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000006F) );
		/* 8213A4E0h case    0:*/		return 0x8213A4E4;
		  /* 8213A4E4h */ case    1:  		/* lbz R11, <#[R4 + 110]> */
		/* 8213A4E4h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000006E) );
		/* 8213A4E4h case    1:*/		return 0x8213A4E8;
		  /* 8213A4E8h */ case    2:  		/* cmplwi CR6, R10, 1 */
		/* 8213A4E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8213A4E8h case    2:*/		return 0x8213A4EC;
		  /* 8213A4ECh */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 8213A4ECh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213A508;  }
		/* 8213A4ECh case    3:*/		return 0x8213A4F0;
		  /* 8213A4F0h */ case    4:  		/* lwz R10, <#[R3 + 40]> */
		/* 8213A4F0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 8213A4F0h case    4:*/		return 0x8213A4F4;
		  /* 8213A4F4h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 8213A4F4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A4F4h case    5:*/		return 0x8213A4F8;
		  /* 8213A4F8h */ case    6:  		/* bc 12, CR6_LT, 56 */
		/* 8213A4F8h case    6:*/		if ( regs.CR[6].lt ) { return 0x8213A530;  }
		/* 8213A4F8h case    6:*/		return 0x8213A4FC;
		  /* 8213A4FCh */ case    7:  		/* lis R3, -32768 */
		/* 8213A4FCh case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213A4FCh case    7:*/		return 0x8213A500;
		  /* 8213A500h */ case    8:  		/* ori R3, R3, 16389 */
		/* 8213A500h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213A500h case    8:*/		return 0x8213A504;
		  /* 8213A504h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8213A504h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A504h case    9:*/		return 0x8213A508;
	}
	return 0x8213A508;
} // Block from 8213A4E0h-8213A508h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213A508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A508);
		  /* 8213A508h */ case    0:  		/* cmplwi CR6, R10, 3 */
		/* 8213A508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213A508h case    0:*/		return 0x8213A50C;
		  /* 8213A50Ch */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8213A50Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A524;  }
		/* 8213A50Ch case    1:*/		return 0x8213A510;
		  /* 8213A510h */ case    2:  		/* lwz R10, <#[R3 + 60]> */
		/* 8213A510h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 8213A510h case    2:*/		return 0x8213A514;
		  /* 8213A514h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8213A514h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A514h case    3:*/		return 0x8213A518;
		  /* 8213A518h */ case    4:  		/* bc 4, CR6_LT, -28 */
		/* 8213A518h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213A4FC;  }
		/* 8213A518h case    4:*/		return 0x8213A51C;
		  /* 8213A51Ch */ case    5:  		/* addi R11, R11, 2 */
		/* 8213A51Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8213A51Ch case    5:*/		return 0x8213A520;
		  /* 8213A520h */ case    6:  		/* b 16 */
		/* 8213A520h case    6:*/		return 0x8213A530;
		/* 8213A520h case    6:*/		return 0x8213A524;
	}
	return 0x8213A524;
} // Block from 8213A508h-8213A524h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213A524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A524);
		  /* 8213A524h */ case    0:  		/* cmplwi CR6, R10, 5 */
		/* 8213A524h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 8213A524h case    0:*/		return 0x8213A528;
		  /* 8213A528h */ case    1:  		/* bc 4, CR6_EQ, -44 */
		/* 8213A528h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A4FC;  }
		/* 8213A528h case    1:*/		return 0x8213A52C;
		  /* 8213A52Ch */ case    2:  		/* li R11, 12 */
		/* 8213A52Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 8213A52Ch case    2:*/		return 0x8213A530;
	}
	return 0x8213A530;
} // Block from 8213A524h-8213A530h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A530);
		  /* 8213A530h */ case    0:  		/* stw R11, <#[R5]> */
		/* 8213A530h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8213A530h case    0:*/		return 0x8213A534;
		  /* 8213A534h */ case    1:  		/* li R3, 0 */
		/* 8213A534h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A534h case    1:*/		return 0x8213A538;
	}
	return 0x8213A538;
} // Block from 8213A530h-8213A538h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A538h
// Function '?EmitDP4@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A538);
		  /* 8213A538h */ case    0:  		/* bclr 20, CR0_LT */
		/* 8213A538h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A538h case    0:*/		return 0x8213A53C;
	}
	return 0x8213A53C;
} // Block from 8213A538h-8213A53Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A53C);
		  /* 8213A53Ch */ case    0:  		/* nop */
		/* 8213A53Ch case    0:*/		cpu::op::nop();
		/* 8213A53Ch case    0:*/		return 0x8213A540;
	}
	return 0x8213A540;
} // Block from 8213A53Ch-8213A540h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A540);
		  /* 8213A540h */ case    0:  		/* lbz R11, <#[R4 + 110]> */
		/* 8213A540h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000006E) );
		/* 8213A540h case    0:*/		return 0x8213A544;
		  /* 8213A544h */ case    1:  		/* lbz R10, <#[R4 + 111]> */
		/* 8213A544h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000006F) );
		/* 8213A544h case    1:*/		return 0x8213A548;
		  /* 8213A548h */ case    2:  		/* cmplwi CR6, R10, 1 */
		/* 8213A548h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8213A548h case    2:*/		return 0x8213A54C;
		  /* 8213A54Ch */ case    3:  		/* stw R11, <#[R5]> */
		/* 8213A54Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8213A54Ch case    3:*/		return 0x8213A550;
		  /* 8213A550h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8213A550h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213A568;  }
		/* 8213A550h case    4:*/		return 0x8213A554;
		  /* 8213A554h */ case    5:  		/* lwz R10, <#[R3 + 40]> */
		/* 8213A554h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 8213A554h case    5:*/		return 0x8213A558;
		  /* 8213A558h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8213A558h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A558h case    6:*/		return 0x8213A55C;
		  /* 8213A55Ch */ case    7:  		/* bc 4, CR6_LT, 48 */
		/* 8213A55Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x8213A58C;  }
		/* 8213A55Ch case    7:*/		return 0x8213A560;
		  /* 8213A560h */ case    8:  		/* li R11, 1 */
		/* 8213A560h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213A560h case    8:*/		return 0x8213A564;
		  /* 8213A564h */ case    9:  		/* b 28 */
		/* 8213A564h case    9:*/		return 0x8213A580;
		/* 8213A564h case    9:*/		return 0x8213A568;
	}
	return 0x8213A568;
} // Block from 8213A540h-8213A568h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213A568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A568);
		  /* 8213A568h */ case    0:  		/* cmplwi CR6, R10, 3 */
		/* 8213A568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213A568h case    0:*/		return 0x8213A56C;
		  /* 8213A56Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8213A56Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A58C;  }
		/* 8213A56Ch case    1:*/		return 0x8213A570;
		  /* 8213A570h */ case    2:  		/* lwz R10, <#[R3 + 60]> */
		/* 8213A570h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 8213A570h case    2:*/		return 0x8213A574;
		  /* 8213A574h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8213A574h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A574h case    3:*/		return 0x8213A578;
		  /* 8213A578h */ case    4:  		/* bc 4, CR6_LT, 20 */
		/* 8213A578h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213A58C;  }
		/* 8213A578h case    4:*/		return 0x8213A57C;
		  /* 8213A57Ch */ case    5:  		/* li R11, 3 */
		/* 8213A57Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8213A57Ch case    5:*/		return 0x8213A580;
	}
	return 0x8213A580;
} // Block from 8213A568h-8213A580h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213A580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A580);
		  /* 8213A580h */ case    0:  		/* stw R11, <#[R6]> */
		/* 8213A580h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8213A580h case    0:*/		return 0x8213A584;
		  /* 8213A584h */ case    1:  		/* li R3, 0 */
		/* 8213A584h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A584h case    1:*/		return 0x8213A588;
		  /* 8213A588h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8213A588h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A588h case    2:*/		return 0x8213A58C;
	}
	return 0x8213A58C;
} // Block from 8213A580h-8213A58Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A58C);
		  /* 8213A58Ch */ case    0:  		/* lis R3, -32768 */
		/* 8213A58Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213A58Ch case    0:*/		return 0x8213A590;
		  /* 8213A590h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8213A590h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213A590h case    1:*/		return 0x8213A594;
		  /* 8213A594h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8213A594h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A594h case    2:*/		return 0x8213A598;
	}
	return 0x8213A598;
} // Block from 8213A58Ch-8213A598h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A598);
		  /* 8213A598h */ case    0:  		/* lbz R11, <#[R4 + 110]> */
		/* 8213A598h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000006E) );
		/* 8213A598h case    0:*/		return 0x8213A59C;
		  /* 8213A59Ch */ case    1:  		/* lbz R10, <#[R4 + 111]> */
		/* 8213A59Ch case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000006F) );
		/* 8213A59Ch case    1:*/		return 0x8213A5A0;
		  /* 8213A5A0h */ case    2:  		/* cmplwi CR6, R10, 1 */
		/* 8213A5A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8213A5A0h case    2:*/		return 0x8213A5A4;
		  /* 8213A5A4h */ case    3:  		/* stw R11, <#[R5]> */
		/* 8213A5A4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8213A5A4h case    3:*/		return 0x8213A5A8;
		  /* 8213A5A8h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8213A5A8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213A5C8;  }
		/* 8213A5A8h case    4:*/		return 0x8213A5AC;
		  /* 8213A5ACh */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 8213A5ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213A5ACh case    5:*/		return 0x8213A5B0;
		  /* 8213A5B0h */ case    6:  		/* bc 4, CR6_LT, 72 */
		/* 8213A5B0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8213A5F8;  }
		/* 8213A5B0h case    6:*/		return 0x8213A5B4;
		  /* 8213A5B4h */ case    7:  		/* li R11, 0 */
		/* 8213A5B4h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213A5B4h case    7:*/		return 0x8213A5B8;
		  /* 8213A5B8h */ case    8:  		/* cmplwi CR6, R7, 0 */
		/* 8213A5B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213A5B8h case    8:*/		return 0x8213A5BC;
		  /* 8213A5BCh */ case    9:  		/* stw R11, <#[R6]> */
		/* 8213A5BCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8213A5BCh case    9:*/		return 0x8213A5C0;
		  /* 8213A5C0h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 8213A5C0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213A5F0;  }
		/* 8213A5C0h case   10:*/		return 0x8213A5C4;
		  /* 8213A5C4h */ case   11:  		/* b 40 */
		/* 8213A5C4h case   11:*/		return 0x8213A5EC;
		/* 8213A5C4h case   11:*/		return 0x8213A5C8;
	}
	return 0x8213A5C8;
} // Block from 8213A598h-8213A5C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213A5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A5C8);
		  /* 8213A5C8h */ case    0:  		/* cmplwi CR6, R10, 2 */
		/* 8213A5C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 8213A5C8h case    0:*/		return 0x8213A5CC;
		  /* 8213A5CCh */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8213A5CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A5F8;  }
		/* 8213A5CCh case    1:*/		return 0x8213A5D0;
		  /* 8213A5D0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213A5D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213A5D0h case    2:*/		return 0x8213A5D4;
		  /* 8213A5D4h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 8213A5D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213A5F8;  }
		/* 8213A5D4h case    3:*/		return 0x8213A5D8;
		  /* 8213A5D8h */ case    4:  		/* li R11, 9 */
		/* 8213A5D8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8213A5D8h case    4:*/		return 0x8213A5DC;
		  /* 8213A5DCh */ case    5:  		/* cmplwi CR6, R7, 0 */
		/* 8213A5DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213A5DCh case    5:*/		return 0x8213A5E0;
		  /* 8213A5E0h */ case    6:  		/* stw R11, <#[R6]> */
		/* 8213A5E0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8213A5E0h case    6:*/		return 0x8213A5E4;
		  /* 8213A5E4h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8213A5E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213A5F0;  }
		/* 8213A5E4h case    7:*/		return 0x8213A5E8;
		  /* 8213A5E8h */ case    8:  		/* li R11, 1 */
		/* 8213A5E8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213A5E8h case    8:*/		return 0x8213A5EC;
	}
	return 0x8213A5EC;
} // Block from 8213A5C8h-8213A5ECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213A5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A5EC);
		  /* 8213A5ECh */ case    0:  		/* stw R11, <#[R7]> */
		/* 8213A5ECh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8213A5ECh case    0:*/		return 0x8213A5F0;
	}
	return 0x8213A5F0;
} // Block from 8213A5ECh-8213A5F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A5F0);
		  /* 8213A5F0h */ case    0:  		/* li R3, 0 */
		/* 8213A5F0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A5F0h case    0:*/		return 0x8213A5F4;
		  /* 8213A5F4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8213A5F4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A5F4h case    1:*/		return 0x8213A5F8;
	}
	return 0x8213A5F8;
} // Block from 8213A5F0h-8213A5F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A5F8);
		  /* 8213A5F8h */ case    0:  		/* lis R3, -32768 */
		/* 8213A5F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213A5F8h case    0:*/		return 0x8213A5FC;
		  /* 8213A5FCh */ case    1:  		/* ori R3, R3, 16389 */
		/* 8213A5FCh case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213A5FCh case    1:*/		return 0x8213A600;
		  /* 8213A600h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8213A600h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213A600h case    2:*/		return 0x8213A604;
	}
	return 0x8213A604;
} // Block from 8213A5F8h-8213A604h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A604);
		  /* 8213A604h */ case    0:  		/* nop */
		/* 8213A604h case    0:*/		cpu::op::nop();
		/* 8213A604h case    0:*/		return 0x8213A608;
	}
	return 0x8213A608;
} // Block from 8213A604h-8213A608h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A608);
		  /* 8213A608h */ case    0:  		/* mfspr R12, LR */
		/* 8213A608h case    0:*/		regs.R12 = regs.LR;
		/* 8213A608h case    0:*/		return 0x8213A60C;
		  /* 8213A60Ch */ case    1:  		/* bl -693212 */
		/* 8213A60Ch case    1:*/		regs.LR = 0x8213A610; return 0x82091230;
		/* 8213A60Ch case    1:*/		return 0x8213A610;
		  /* 8213A610h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8213A610h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8213A610h case    2:*/		return 0x8213A614;
		  /* 8213A614h */ case    3:  		/* mr R24, R3 */
		/* 8213A614h case    3:*/		regs.R24 = regs.R3;
		/* 8213A614h case    3:*/		return 0x8213A618;
		  /* 8213A618h */ case    4:  		/* mr R19, R4 */
		/* 8213A618h case    4:*/		regs.R19 = regs.R4;
		/* 8213A618h case    4:*/		return 0x8213A61C;
		  /* 8213A61Ch */ case    5:  		/* mr R20, R6 */
		/* 8213A61Ch case    5:*/		regs.R20 = regs.R6;
		/* 8213A61Ch case    5:*/		return 0x8213A620;
		  /* 8213A620h */ case    6:  		/* mr R23, R7 */
		/* 8213A620h case    6:*/		regs.R23 = regs.R7;
		/* 8213A620h case    6:*/		return 0x8213A624;
		  /* 8213A624h */ case    7:  		/* li R25, 0 */
		/* 8213A624h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8213A624h case    7:*/		return 0x8213A628;
		  /* 8213A628h */ case    8:  		/* cmplwi CR6, R7, 0 */
		/* 8213A628h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213A628h case    8:*/		return 0x8213A62C;
		  /* 8213A62Ch */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8213A62Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8213A634;  }
		/* 8213A62Ch case    9:*/		return 0x8213A630;
		  /* 8213A630h */ case   10:  		/* stw R25, <#[R7]> */
		/* 8213A630h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R7 + 0x00000000) );
		/* 8213A630h case   10:*/		return 0x8213A634;
	}
	return 0x8213A634;
} // Block from 8213A608h-8213A634h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213A634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A634);
		  /* 8213A634h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8213A634h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8213A634h case    0:*/		return 0x8213A638;
		  /* 8213A638h */ case    1:  		/* bc 12, CR6_EQ, 824 */
		/* 8213A638h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213A970;  }
		/* 8213A638h case    1:*/		return 0x8213A63C;
		  /* 8213A63Ch */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 8213A63Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213A63Ch case    2:*/		return 0x8213A640;
		  /* 8213A640h */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 8213A640h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213A674;  }
		/* 8213A640h case    3:*/		return 0x8213A644;
		  /* 8213A644h */ case    4:  		/* cmplw CR6, R5, R20 */
		/* 8213A644h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R20);
		/* 8213A644h case    4:*/		return 0x8213A648;
		  /* 8213A648h */ case    5:  		/* bc 4, CR6_LT, 44 */
		/* 8213A648h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8213A674;  }
		/* 8213A648h case    5:*/		return 0x8213A64C;
		  /* 8213A64Ch */ case    6:  		/* subf R10, R5, R20 */
		/* 8213A64Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R5,regs.R20);
		/* 8213A64Ch case    6:*/		return 0x8213A650;
		  /* 8213A650h */ case    7:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 8213A650h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 8213A650h case    7:*/		return 0x8213A654;
		  /* 8213A654h */ case    8:  		/* add R11, R11, R19 */
		/* 8213A654h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 8213A654h case    8:*/		return 0x8213A658;
		  /* 8213A658h */ case    9:  		/* mtspr CTR, R10 */
		/* 8213A658h case    9:*/		regs.CTR = regs.R10;
		/* 8213A658h case    9:*/		return 0x8213A65C;
		  /* 8213A65Ch */ case   10:  		/* lwz R10, <#[R11]> */
		/* 8213A65Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A65Ch case   10:*/		return 0x8213A660;
		  /* 8213A660h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8213A660h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213A660h case   11:*/		return 0x8213A664;
		  /* 8213A664h */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 8213A664h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213A66C;  }
		/* 8213A664h case   12:*/		return 0x8213A668;
		  /* 8213A668h */ case   13:  		/* stw R25, <#[R10 + 36]> */
		/* 8213A668h case   13:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R10 + 0x00000024) );
		/* 8213A668h case   13:*/		return 0x8213A66C;
	}
	return 0x8213A66C;
} // Block from 8213A634h-8213A66Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213A66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A66C);
		  /* 8213A66Ch */ case    0:  		/* addi R11, R11, 4 */
		/* 8213A66Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213A66Ch case    0:*/		return 0x8213A670;
		  /* 8213A670h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 8213A670h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213A65C;  }
		/* 8213A670h case    1:*/		return 0x8213A674;
	}
	return 0x8213A674;
} // Block from 8213A66Ch-8213A674h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A674);
		  /* 8213A674h */ case    0:  		/* addi R21, R20, -1 */
		/* 8213A674h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R20,0xFFFFFFFF);
		/* 8213A674h case    0:*/		return 0x8213A678;
		  /* 8213A678h */ case    1:  		/* mr R28, R5 */
		/* 8213A678h case    1:*/		regs.R28 = regs.R5;
		/* 8213A678h case    1:*/		return 0x8213A67C;
		  /* 8213A67Ch */ case    2:  		/* cmplw CR6, R5, R21 */
		/* 8213A67Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R21);
		/* 8213A67Ch case    2:*/		return 0x8213A680;
		  /* 8213A680h */ case    3:  		/* bc 4, CR6_LT, 724 */
		/* 8213A680h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8213A954;  }
		/* 8213A680h case    3:*/		return 0x8213A684;
		  /* 8213A684h */ case    4:  		/* li R22, 1 */
		/* 8213A684h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8213A684h case    4:*/		return 0x8213A688;
		  /* 8213A688h */ case    5:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 8213A688h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 8213A688h case    5:*/		return 0x8213A68C;
		  /* 8213A68Ch */ case    6:  		/* add R11, R11, R19 */
		/* 8213A68Ch case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 8213A68Ch case    6:*/		return 0x8213A690;
		  /* 8213A690h */ case    7:  		/* lwz R30, <#[R11]> */
		/* 8213A690h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A690h case    7:*/		return 0x8213A694;
		  /* 8213A694h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 8213A694h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213A694h case    8:*/		return 0x8213A698;
		  /* 8213A698h */ case    9:  		/* bc 12, CR6_EQ, 688 */
		/* 8213A698h case    9:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A698h case    9:*/		return 0x8213A69C;
		  /* 8213A69Ch */ case   10:  		/* mr R31, R25 */
		/* 8213A69Ch case   10:*/		regs.R31 = regs.R25;
		/* 8213A69Ch case   10:*/		return 0x8213A6A0;
		  /* 8213A6A0h */ case   11:  		/* cmplwi CR6, R23, 0 */
		/* 8213A6A0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213A6A0h case   11:*/		return 0x8213A6A4;
		  /* 8213A6A4h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8213A6A4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213A6B4;  }
		/* 8213A6A4h case   12:*/		return 0x8213A6A8;
		  /* 8213A6A8h */ case   13:  		/* lwz R10, <#[R23]> */
		/* 8213A6A8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 8213A6A8h case   13:*/		return 0x8213A6AC;
		  /* 8213A6ACh */ case   14:  		/* addi R10, R10, 1 */
		/* 8213A6ACh case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213A6ACh case   14:*/		return 0x8213A6B0;
		  /* 8213A6B0h */ case   15:  		/* stw R10, <#[R23]> */
		/* 8213A6B0h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 8213A6B0h case   15:*/		return 0x8213A6B4;
	}
	return 0x8213A6B4;
} // Block from 8213A674h-8213A6B4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213A6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A6B4);
		  /* 8213A6B4h */ case    0:  		/* cmplw CR6, R28, R21 */
		/* 8213A6B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R21);
		/* 8213A6B4h case    0:*/		return 0x8213A6B8;
		  /* 8213A6B8h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 8213A6B8h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213A6CC;  }
		/* 8213A6B8h case    1:*/		return 0x8213A6BC;
		  /* 8213A6BCh */ case    2:  		/* lwzu R31, <#[R11 + 4]> */
		/* 8213A6BCh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8213A6BCh case    2:*/		return 0x8213A6C0;
		  /* 8213A6C0h */ case    3:  		/* addi R28, R28, 1 */
		/* 8213A6C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213A6C0h case    3:*/		return 0x8213A6C4;
		  /* 8213A6C4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8213A6C4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213A6C4h case    4:*/		return 0x8213A6C8;
		  /* 8213A6C8h */ case    5:  		/* bc 12, CR6_EQ, -20 */
		/* 8213A6C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213A6B4;  }
		/* 8213A6C8h case    5:*/		return 0x8213A6CC;
	}
	return 0x8213A6CC;
} // Block from 8213A6B4h-8213A6CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213A6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A6CC);
		  /* 8213A6CCh */ case    0:  		/* addi R28, R28, -1 */
		/* 8213A6CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8213A6CCh case    0:*/		return 0x8213A6D0;
		  /* 8213A6D0h */ case    1:  		/* mr R26, R25 */
		/* 8213A6D0h case    1:*/		regs.R26 = regs.R25;
		/* 8213A6D0h case    1:*/		return 0x8213A6D4;
		  /* 8213A6D4h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8213A6D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213A6D4h case    2:*/		return 0x8213A6D8;
		  /* 8213A6D8h */ case    3:  		/* bc 12, CR6_EQ, 624 */
		/* 8213A6D8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A6D8h case    3:*/		return 0x8213A6DC;
		  /* 8213A6DCh */ case    4:  		/* mr R27, R25 */
		/* 8213A6DCh case    4:*/		regs.R27 = regs.R25;
		/* 8213A6DCh case    4:*/		return 0x8213A6E0;
		  /* 8213A6E0h */ case    5:  		/* cmplwi CR6, R23, 0 */
		/* 8213A6E0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213A6E0h case    5:*/		return 0x8213A6E4;
		  /* 8213A6E4h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8213A6E4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8213A6F0;  }
		/* 8213A6E4h case    6:*/		return 0x8213A6E8;
		  /* 8213A6E8h */ case    7:  		/* stw R25, <#[R30 + 36]> */
		/* 8213A6E8h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000024) );
		/* 8213A6E8h case    7:*/		return 0x8213A6EC;
		  /* 8213A6ECh */ case    8:  		/* stw R25, <#[R31 + 36]> */
		/* 8213A6ECh case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000024) );
		/* 8213A6ECh case    8:*/		return 0x8213A6F0;
	}
	return 0x8213A6F0;
} // Block from 8213A6CCh-8213A6F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213A6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A6F0);
		  /* 8213A6F0h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8213A6F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213A6F0h case    0:*/		return 0x8213A6F4;
		  /* 8213A6F4h */ case    1:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 8213A6F4h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 8213A6F4h case    1:*/		return 0x8213A6F8;
		  /* 8213A6F8h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8213A6F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213A6F8h case    2:*/		return 0x8213A6FC;
		  /* 8213A6FCh */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 8213A6FCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213A724;  }
		/* 8213A6FCh case    3:*/		return 0x8213A700;
		  /* 8213A700h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 8213A700h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A700h case    4:*/		return 0x8213A704;
		  /* 8213A704h */ case    5:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 8213A704h case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 8213A704h case    5:*/		return 0x8213A708;
		  /* 8213A708h */ case    6:  		/* cmplwi CR6, R10, 4 */
		/* 8213A708h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8213A708h case    6:*/		return 0x8213A70C;
		  /* 8213A70Ch */ case    7:  		/* bc 4, CR6_LT, 24 */
		/* 8213A70Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x8213A724;  }
		/* 8213A70Ch case    7:*/		return 0x8213A710;
		  /* 8213A710h */ case    8:  		/* mr R11, R30 */
		/* 8213A710h case    8:*/		regs.R11 = regs.R30;
		/* 8213A710h case    8:*/		return 0x8213A714;
		  /* 8213A714h */ case    9:  		/* mr R30, R31 */
		/* 8213A714h case    9:*/		regs.R30 = regs.R31;
		/* 8213A714h case    9:*/		return 0x8213A718;
	}
	return 0x8213A718;
} // Block from 8213A6F0h-8213A718h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213A718h
// Function '?EmitSpecialTex@CPSLegacyProgram@D3DXShader@@IAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A718);
		  /* 8213A718h */ case    0:  		/* mr R31, R11 */
		/* 8213A718h case    0:*/		regs.R31 = regs.R11;
		/* 8213A718h case    0:*/		return 0x8213A71C;
		  /* 8213A71Ch */ case    1:  		/* mr R27, R22 */
		/* 8213A71Ch case    1:*/		regs.R27 = regs.R22;
		/* 8213A71Ch case    1:*/		return 0x8213A720;
		  /* 8213A720h */ case    2:  		/* b 28 */
		/* 8213A720h case    2:*/		return 0x8213A73C;
		/* 8213A720h case    2:*/		return 0x8213A724;
	}
	return 0x8213A724;
} // Block from 8213A718h-8213A724h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A724);
		  /* 8213A724h */ case    0:  		/* cmplwi CR6, R11, 4 */
		/* 8213A724h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8213A724h case    0:*/		return 0x8213A728;
		  /* 8213A728h */ case    1:  		/* bc 12, CR6_EQ, 544 */
		/* 8213A728h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A728h case    1:*/		return 0x8213A72C;
		  /* 8213A72Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8213A72Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213A72Ch case    2:*/		return 0x8213A730;
		  /* 8213A730h */ case    3:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 8213A730h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 8213A730h case    3:*/		return 0x8213A734;
		  /* 8213A734h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 8213A734h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213A734h case    4:*/		return 0x8213A738;
		  /* 8213A738h */ case    5:  		/* bc 4, CR6_EQ, 528 */
		/* 8213A738h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A738h case    5:*/		return 0x8213A73C;
	}
	return 0x8213A73C;
} // Block from 8213A724h-8213A73Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213A73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A73C);
		  /* 8213A73Ch */ case    0:  		/* lhz R11, <#[R24 + 202]> */
		/* 8213A73Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x000000CA) );
		/* 8213A73Ch case    0:*/		return 0x8213A740;
		  /* 8213A740h */ case    1:  		/* cmplwi CR6, R11, 260 */
		/* 8213A740h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213A740h case    1:*/		return 0x8213A744;
		  /* 8213A744h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 8213A744h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213A76C;  }
		/* 8213A744h case    2:*/		return 0x8213A748;
		  /* 8213A748h */ case    3:  		/* lwz R11, <#[R24]> */
		/* 8213A748h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8213A748h case    3:*/		return 0x8213A74C;
		  /* 8213A74Ch */ case    4:  		/* mr R5, R31 */
		/* 8213A74Ch case    4:*/		regs.R5 = regs.R31;
		/* 8213A74Ch case    4:*/		return 0x8213A750;
		  /* 8213A750h */ case    5:  		/* mr R4, R30 */
		/* 8213A750h case    5:*/		regs.R4 = regs.R30;
		/* 8213A750h case    5:*/		return 0x8213A754;
		  /* 8213A754h */ case    6:  		/* mr R3, R24 */
		/* 8213A754h case    6:*/		regs.R3 = regs.R24;
		/* 8213A754h case    6:*/		return 0x8213A758;
		  /* 8213A758h */ case    7:  		/* lwz R11, <#[R11 + 376]> */
		/* 8213A758h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000178) );
		/* 8213A758h case    7:*/		return 0x8213A75C;
		  /* 8213A75Ch */ case    8:  		/* mtspr CTR, R11 */
		/* 8213A75Ch case    8:*/		regs.CTR = regs.R11;
		/* 8213A75Ch case    8:*/		return 0x8213A760;
		  /* 8213A760h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8213A760h case    9:*/		if ( 1 ) { regs.LR = 0x8213A764; return (uint32)regs.CTR; }
		/* 8213A760h case    9:*/		return 0x8213A764;
		  /* 8213A764h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8213A764h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213A764h case   10:*/		return 0x8213A768;
		  /* 8213A768h */ case   11:  		/* bc 4, CR0_EQ, 480 */
		/* 8213A768h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8213A948;  }
		/* 8213A768h case   11:*/		return 0x8213A76C;
	}
	return 0x8213A76C;
} // Block from 8213A73Ch-8213A76Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213A76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A76C);
		  /* 8213A76Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8213A76Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213A76Ch case    0:*/		return 0x8213A770;
		  /* 8213A770h */ case    1:  		/* lis R10, 29200 */
		/* 8213A770h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 8213A770h case    1:*/		return 0x8213A774;
		  /* 8213A774h */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213A774h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213A774h case    2:*/		return 0x8213A778;
		  /* 8213A778h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8213A778h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A778h case    3:*/		return 0x8213A77C;
		  /* 8213A77Ch */ case    4:  		/* bc 12, CR6_EQ, 460 */
		/* 8213A77Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A77Ch case    4:*/		return 0x8213A780;
		  /* 8213A780h */ case    5:  		/* lis R10, 29184 */
		/* 8213A780h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x7200);
		/* 8213A780h case    5:*/		return 0x8213A784;
		  /* 8213A784h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8213A784h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A784h case    6:*/		return 0x8213A788;
		  /* 8213A788h */ case    7:  		/* bc 12, CR6_EQ, 448 */
		/* 8213A788h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A788h case    7:*/		return 0x8213A78C;
		  /* 8213A78Ch */ case    8:  		/* lis R10, 29408 */
		/* 8213A78Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 8213A78Ch case    8:*/		return 0x8213A790;
		  /* 8213A790h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8213A790h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A790h case    9:*/		return 0x8213A794;
		  /* 8213A794h */ case   10:  		/* bc 12, CR6_EQ, 436 */
		/* 8213A794h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A794h case   10:*/		return 0x8213A798;
		  /* 8213A798h */ case   11:  		/* lis R10, 24688 */
		/* 8213A798h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 8213A798h case   11:*/		return 0x8213A79C;
		  /* 8213A79Ch */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 8213A79Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A79Ch case   12:*/		return 0x8213A7A0;
		  /* 8213A7A0h */ case   13:  		/* bc 12, CR6_EQ, 424 */
		/* 8213A7A0h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7A0h case   13:*/		return 0x8213A7A4;
		  /* 8213A7A4h */ case   14:  		/* lis R10, 24656 */
		/* 8213A7A4h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 8213A7A4h case   14:*/		return 0x8213A7A8;
		  /* 8213A7A8h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8213A7A8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A7A8h case   15:*/		return 0x8213A7AC;
		  /* 8213A7ACh */ case   16:  		/* bc 12, CR6_EQ, 412 */
		/* 8213A7ACh case   16:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7ACh case   16:*/		return 0x8213A7B0;
		  /* 8213A7B0h */ case   17:  		/* lis R10, 24736 */
		/* 8213A7B0h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8213A7B0h case   17:*/		return 0x8213A7B4;
		  /* 8213A7B4h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 8213A7B4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A7B4h case   18:*/		return 0x8213A7B8;
		  /* 8213A7B8h */ case   19:  		/* bc 12, CR6_EQ, 400 */
		/* 8213A7B8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7B8h case   19:*/		return 0x8213A7BC;
		  /* 8213A7BCh */ case   20:  		/* lis R10, 24576 */
		/* 8213A7BCh case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 8213A7BCh case   20:*/		return 0x8213A7C0;
		  /* 8213A7C0h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8213A7C0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A7C0h case   21:*/		return 0x8213A7C4;
		  /* 8213A7C4h */ case   22:  		/* bc 12, CR6_EQ, 388 */
		/* 8213A7C4h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7C4h case   22:*/		return 0x8213A7C8;
		  /* 8213A7C8h */ case   23:  		/* lis R10, 24816 */
		/* 8213A7C8h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8213A7C8h case   23:*/		return 0x8213A7CC;
		  /* 8213A7CCh */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 8213A7CCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A7CCh case   24:*/		return 0x8213A7D0;
		  /* 8213A7D0h */ case   25:  		/* bc 12, CR6_EQ, 376 */
		/* 8213A7D0h case   25:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7D0h case   25:*/		return 0x8213A7D4;
		  /* 8213A7D4h */ case   26:  		/* lis R10, 4352 */
		/* 8213A7D4h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 8213A7D4h case   26:*/		return 0x8213A7D8;
		  /* 8213A7D8h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 8213A7D8h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213A7D8h case   27:*/		return 0x8213A7DC;
		  /* 8213A7DCh */ case   28:  		/* bc 12, CR6_EQ, 364 */
		/* 8213A7DCh case   28:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7DCh case   28:*/		return 0x8213A7E0;
		  /* 8213A7E0h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 8213A7E0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213A7E0h case   29:*/		return 0x8213A7E4;
		  /* 8213A7E4h */ case   30:  		/* bc 12, CR6_EQ, 356 */
		/* 8213A7E4h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A7E4h case   30:*/		return 0x8213A7E8;
		  /* 8213A7E8h */ case   31:  		/* lwz R11, <#[R30 + 12]> */
		/* 8213A7E8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213A7E8h case   31:*/		return 0x8213A7EC;
		  /* 8213A7ECh */ case   32:  		/* mr R29, R25 */
		/* 8213A7ECh case   32:*/		regs.R29 = regs.R25;
		/* 8213A7ECh case   32:*/		return 0x8213A7F0;
		  /* 8213A7F0h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 8213A7F0h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213A7F0h case   33:*/		return 0x8213A7F4;
		  /* 8213A7F4h */ case   34:  		/* bc 4, CR6_GT, 136 */
		/* 8213A7F4h case   34:*/		if ( !regs.CR[6].gt ) { return 0x8213A87C;  }
		/* 8213A7F4h case   34:*/		return 0x8213A7F8;
		  /* 8213A7F8h */ case   35:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8213A7F8h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8213A7F8h case   35:*/		return 0x8213A7FC;
		  /* 8213A7FCh */ case   36:  		/* lwz R5, <#[R24 + 20]> */
		/* 8213A7FCh case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000014) );
		/* 8213A7FCh case   36:*/		return 0x8213A800;
		  /* 8213A800h */ case   37:  		/* lwz R4, <#[R30 + 16]> */
		/* 8213A800h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 8213A800h case   37:*/		return 0x8213A804;
		  /* 8213A804h */ case   38:  		/* lwz R3, <#[R31 + 4]> */
		/* 8213A804h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8213A804h case   38:*/		return 0x8213A808;
		  /* 8213A808h */ case   39:  		/* mtspr CTR, R11 */
		/* 8213A808h case   39:*/		regs.CTR = regs.R11;
		/* 8213A808h case   39:*/		return 0x8213A80C;
		  /* 8213A80Ch */ case   40:  		/* lwz R6, <#[R4]> */
		/* 8213A80Ch case   40:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000000) );
		/* 8213A80Ch case   40:*/		return 0x8213A810;
		  /* 8213A810h */ case   41:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 8213A810h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 8213A810h case   41:*/		return 0x8213A814;
		  /* 8213A814h */ case   42:  		/* lwzx R11, <#[R11 + R5]> */
		/* 8213A814h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 8213A814h case   42:*/		return 0x8213A818;
		  /* 8213A818h */ case   43:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213A818h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213A818h case   43:*/		return 0x8213A81C;
		  /* 8213A81Ch */ case   44:  		/* cmplwi CR6, R11, 3 */
		/* 8213A81Ch case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8213A81Ch case   44:*/		return 0x8213A820;
		  /* 8213A820h */ case   45:  		/* bc 4, CR6_EQ, 8 */
		/* 8213A820h case   45:*/		if ( !regs.CR[6].eq ) { return 0x8213A828;  }
		/* 8213A820h case   45:*/		return 0x8213A824;
		  /* 8213A824h */ case   46:  		/* mr R26, R22 */
		/* 8213A824h case   46:*/		regs.R26 = regs.R22;
		/* 8213A824h case   46:*/		return 0x8213A828;
	}
	return 0x8213A828;
} // Block from 8213A76Ch-8213A828h (47 instructions)

//////////////////////////////////////////////////////
// Block at 8213A828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A828);
		  /* 8213A828h */ case    0:  		/* mr R7, R25 */
		/* 8213A828h case    0:*/		regs.R7 = regs.R25;
		/* 8213A828h case    0:*/		return 0x8213A82C;
		  /* 8213A82Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8213A82Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213A82Ch case    1:*/		return 0x8213A830;
		  /* 8213A830h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 8213A830h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213A874;  }
		/* 8213A830h case    2:*/		return 0x8213A834;
		  /* 8213A834h */ case    3:  		/* lwz R9, <#[R31 + 8]> */
		/* 8213A834h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8213A834h case    3:*/		return 0x8213A838;
		  /* 8213A838h */ case    4:  		/* mr R11, R25 */
		/* 8213A838h case    4:*/		regs.R11 = regs.R25;
		/* 8213A838h case    4:*/		return 0x8213A83C;
		  /* 8213A83Ch */ case    5:  		/* lwz R8, <#[R31 + 4]> */
		/* 8213A83Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8213A83Ch case    5:*/		return 0x8213A840;
		  /* 8213A840h */ case    6:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8213A840h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213A840h case    6:*/		return 0x8213A844;
		  /* 8213A844h */ case    7:  		/* rlwinm R18, R10, 2, 0, 29 */
		/* 8213A844h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R18,regs.R10);
		/* 8213A844h case    7:*/		return 0x8213A848;
		  /* 8213A848h */ case    8:  		/* lwzx R18, <#[R18 + R5]> */
		/* 8213A848h case    8:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R18 + regs.R5 + 0x00000000) );
		/* 8213A848h case    8:*/		return 0x8213A84C;
		  /* 8213A84Ch */ case    9:  		/* lwz R18, <#[R18 + 56]> */
		/* 8213A84Ch case    9:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R18 + 0x00000038) );
		/* 8213A84Ch case    9:*/		return 0x8213A850;
		  /* 8213A850h */ case   10:  		/* cmplw CR6, R18, R6 */
		/* 8213A850h case   10:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R6);
		/* 8213A850h case   10:*/		return 0x8213A854;
		  /* 8213A854h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8213A854h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213A860;  }
		/* 8213A854h case   11:*/		return 0x8213A858;
		  /* 8213A858h */ case   12:  		/* cmplw CR6, R10, R6 */
		/* 8213A858h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213A858h case   12:*/		return 0x8213A85C;
		  /* 8213A85Ch */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 8213A85Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8213A864;  }
		/* 8213A85Ch case   13:*/		return 0x8213A860;
	}
	return 0x8213A860;
} // Block from 8213A828h-8213A860h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213A860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A860);
		  /* 8213A860h */ case    0:  		/* mr R29, R22 */
		/* 8213A860h case    0:*/		regs.R29 = regs.R22;
		/* 8213A860h case    0:*/		return 0x8213A864;
	}
	return 0x8213A864;
} // Block from 8213A860h-8213A864h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A864);
		  /* 8213A864h */ case    0:  		/* addi R7, R7, 1 */
		/* 8213A864h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8213A864h case    0:*/		return 0x8213A868;
		  /* 8213A868h */ case    1:  		/* addi R11, R11, 4 */
		/* 8213A868h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213A868h case    1:*/		return 0x8213A86C;
		  /* 8213A86Ch */ case    2:  		/* cmplw CR6, R7, R8 */
		/* 8213A86Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 8213A86Ch case    2:*/		return 0x8213A870;
		  /* 8213A870h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 8213A870h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213A840;  }
		/* 8213A870h case    3:*/		return 0x8213A874;
	}
	return 0x8213A874;
} // Block from 8213A864h-8213A874h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213A874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A874);
		  /* 8213A874h */ case    0:  		/* addi R4, R4, 4 */
		/* 8213A874h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 8213A874h case    0:*/		return 0x8213A878;
		  /* 8213A878h */ case    1:  		/* bc 16, CR0_LT, -108 */
		/* 8213A878h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213A80C;  }
		/* 8213A878h case    1:*/		return 0x8213A87C;
	}
	return 0x8213A87C;
} // Block from 8213A874h-8213A87Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A87C);
		  /* 8213A87Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213A87Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213A87Ch case    0:*/		return 0x8213A880;
		  /* 8213A880h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213A880h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213A880h case    1:*/		return 0x8213A884;
		  /* 8213A884h */ case    2:  		/* bc 4, CR6_GT, 116 */
		/* 8213A884h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8213A8F8;  }
		/* 8213A884h case    2:*/		return 0x8213A888;
		  /* 8213A888h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8213A888h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8213A888h case    3:*/		return 0x8213A88C;
		  /* 8213A88Ch */ case    4:  		/* lwz R3, <#[R30 + 4]> */
		/* 8213A88Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8213A88Ch case    4:*/		return 0x8213A890;
		  /* 8213A890h */ case    5:  		/* mr R5, R25 */
		/* 8213A890h case    5:*/		regs.R5 = regs.R25;
		/* 8213A890h case    5:*/		return 0x8213A894;
		  /* 8213A894h */ case    6:  		/* mtspr CTR, R11 */
		/* 8213A894h case    6:*/		regs.CTR = regs.R11;
		/* 8213A894h case    6:*/		return 0x8213A898;
		  /* 8213A898h */ case    7:  		/* mr R4, R25 */
		/* 8213A898h case    7:*/		regs.R4 = regs.R25;
		/* 8213A898h case    7:*/		return 0x8213A89C;
		  /* 8213A89Ch */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8213A89Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213A89Ch case    8:*/		return 0x8213A8A0;
		  /* 8213A8A0h */ case    9:  		/* bc 12, CR6_EQ, 80 */
		/* 8213A8A0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8213A8F0;  }
		/* 8213A8A0h case    9:*/		return 0x8213A8A4;
		  /* 8213A8A4h */ case   10:  		/* lwz R10, <#[R31 + 16]> */
		/* 8213A8A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8213A8A4h case   10:*/		return 0x8213A8A8;
		  /* 8213A8A8h */ case   11:  		/* mr R11, R25 */
		/* 8213A8A8h case   11:*/		regs.R11 = regs.R25;
		/* 8213A8A8h case   11:*/		return 0x8213A8AC;
		  /* 8213A8ACh */ case   12:  		/* lwz R8, <#[R24 + 20]> */
		/* 8213A8ACh case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R24 + 0x00000014) );
		/* 8213A8ACh case   12:*/		return 0x8213A8B0;
		  /* 8213A8B0h */ case   13:  		/* lwz R7, <#[R30 + 8]> */
		/* 8213A8B0h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000008) );
		/* 8213A8B0h case   13:*/		return 0x8213A8B4;
		  /* 8213A8B4h */ case   14:  		/* lwz R6, <#[R30 + 4]> */
		/* 8213A8B4h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 8213A8B4h case   14:*/		return 0x8213A8B8;
		  /* 8213A8B8h */ case   15:  		/* lwzx R9, <#[R10 + R5]> */
		/* 8213A8B8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 8213A8B8h case   15:*/		return 0x8213A8BC;
		  /* 8213A8BCh */ case   16:  		/* lwzx R10, <#[R11 + R7]> */
		/* 8213A8BCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8213A8BCh case   16:*/		return 0x8213A8C0;
		  /* 8213A8C0h */ case   17:  		/* rlwinm R18, R10, 2, 0, 29 */
		/* 8213A8C0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R18,regs.R10);
		/* 8213A8C0h case   17:*/		return 0x8213A8C4;
		  /* 8213A8C4h */ case   18:  		/* lwzx R18, <#[R18 + R8]> */
		/* 8213A8C4h case   18:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R18 + regs.R8 + 0x00000000) );
		/* 8213A8C4h case   18:*/		return 0x8213A8C8;
		  /* 8213A8C8h */ case   19:  		/* lwz R18, <#[R18 + 56]> */
		/* 8213A8C8h case   19:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R18 + 0x00000038) );
		/* 8213A8C8h case   19:*/		return 0x8213A8CC;
		  /* 8213A8CCh */ case   20:  		/* cmplw CR6, R18, R9 */
		/* 8213A8CCh case   20:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R9);
		/* 8213A8CCh case   20:*/		return 0x8213A8D0;
		  /* 8213A8D0h */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 8213A8D0h case   21:*/		if ( regs.CR[6].eq ) { return 0x8213A8DC;  }
		/* 8213A8D0h case   21:*/		return 0x8213A8D4;
		  /* 8213A8D4h */ case   22:  		/* cmplw CR6, R10, R9 */
		/* 8213A8D4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213A8D4h case   22:*/		return 0x8213A8D8;
		  /* 8213A8D8h */ case   23:  		/* bc 4, CR6_EQ, 8 */
		/* 8213A8D8h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8213A8E0;  }
		/* 8213A8D8h case   23:*/		return 0x8213A8DC;
	}
	return 0x8213A8DC;
} // Block from 8213A87Ch-8213A8DCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213A8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A8DC);
		  /* 8213A8DCh */ case    0:  		/* mr R29, R22 */
		/* 8213A8DCh case    0:*/		regs.R29 = regs.R22;
		/* 8213A8DCh case    0:*/		return 0x8213A8E0;
	}
	return 0x8213A8E0;
} // Block from 8213A8DCh-8213A8E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A8E0);
		  /* 8213A8E0h */ case    0:  		/* addi R4, R4, 1 */
		/* 8213A8E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8213A8E0h case    0:*/		return 0x8213A8E4;
		  /* 8213A8E4h */ case    1:  		/* addi R11, R11, 4 */
		/* 8213A8E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213A8E4h case    1:*/		return 0x8213A8E8;
		  /* 8213A8E8h */ case    2:  		/* cmplw CR6, R4, R6 */
		/* 8213A8E8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R6);
		/* 8213A8E8h case    2:*/		return 0x8213A8EC;
		  /* 8213A8ECh */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 8213A8ECh case    3:*/		if ( regs.CR[6].lt ) { return 0x8213A8BC;  }
		/* 8213A8ECh case    3:*/		return 0x8213A8F0;
	}
	return 0x8213A8F0;
} // Block from 8213A8E0h-8213A8F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213A8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A8F0);
		  /* 8213A8F0h */ case    0:  		/* addi R5, R5, 4 */
		/* 8213A8F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 8213A8F0h case    0:*/		return 0x8213A8F4;
		  /* 8213A8F4h */ case    1:  		/* bc 16, CR0_LT, -92 */
		/* 8213A8F4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213A898;  }
		/* 8213A8F4h case    1:*/		return 0x8213A8F8;
	}
	return 0x8213A8F8;
} // Block from 8213A8F0h-8213A8F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213A8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A8F8);
		  /* 8213A8F8h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 8213A8F8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8213A8F8h case    0:*/		return 0x8213A8FC;
		  /* 8213A8FCh */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 8213A8FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A8FCh case    1:*/		return 0x8213A900;
		  /* 8213A900h */ case    2:  		/* cmpwi CR6, R26, 0 */
		/* 8213A900h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8213A900h case    2:*/		return 0x8213A904;
		  /* 8213A904h */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 8213A904h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A904h case    3:*/		return 0x8213A908;
		  /* 8213A908h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 8213A908h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8213A908h case    4:*/		return 0x8213A90C;
		  /* 8213A90Ch */ case    5:  		/* lwz R10, <#[R24 + 20]> */
		/* 8213A90Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000014) );
		/* 8213A90Ch case    5:*/		return 0x8213A910;
		  /* 8213A910h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 8213A910h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213A910h case    6:*/		return 0x8213A914;
		  /* 8213A914h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213A914h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213A914h case    7:*/		return 0x8213A918;
		  /* 8213A918h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213A918h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213A918h case    8:*/		return 0x8213A91C;
		  /* 8213A91Ch */ case    9:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213A91Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213A91Ch case    9:*/		return 0x8213A920;
		  /* 8213A920h */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 8213A920h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8213A920h case   10:*/		return 0x8213A924;
		  /* 8213A924h */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 8213A924h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8213A948;  }
		/* 8213A924h case   11:*/		return 0x8213A928;
	}
	return 0x8213A928;
} // Block from 8213A8F8h-8213A928h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213A928h
// Function '?EmitTEXLDPR@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A928);
		  /* 8213A928h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8213A928h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213A928h case    0:*/		return 0x8213A92C;
		  /* 8213A92Ch */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8213A92Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213A944;  }
		/* 8213A92Ch case    1:*/		return 0x8213A930;
		  /* 8213A930h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 8213A930h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8213A930h case    2:*/		return 0x8213A934;
		  /* 8213A934h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8213A934h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213A940;  }
		/* 8213A934h case    3:*/		return 0x8213A938;
		  /* 8213A938h */ case    4:  		/* stw R22, <#[R30 + 36]> */
		/* 8213A938h case    4:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000024) );
		/* 8213A938h case    4:*/		return 0x8213A93C;
		  /* 8213A93Ch */ case    5:  		/* b 8 */
		/* 8213A93Ch case    5:*/		return 0x8213A944;
		/* 8213A93Ch case    5:*/		return 0x8213A940;
	}
	return 0x8213A940;
} // Block from 8213A928h-8213A940h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213A940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A940);
		  /* 8213A940h */ case    0:  		/* stw R22, <#[R31 + 36]> */
		/* 8213A940h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000024) );
		/* 8213A940h case    0:*/		return 0x8213A944;
	}
	return 0x8213A944;
} // Block from 8213A940h-8213A944h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A944);
		  /* 8213A944h */ case    0:  		/* addi R28, R28, 1 */
		/* 8213A944h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213A944h case    0:*/		return 0x8213A948;
	}
	return 0x8213A948;
} // Block from 8213A944h-8213A948h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213A948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A948);
		  /* 8213A948h */ case    0:  		/* addi R28, R28, 1 */
		/* 8213A948h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213A948h case    0:*/		return 0x8213A94C;
		  /* 8213A94Ch */ case    1:  		/* cmplw CR6, R28, R21 */
		/* 8213A94Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R21);
		/* 8213A94Ch case    1:*/		return 0x8213A950;
		  /* 8213A950h */ case    2:  		/* bc 12, CR6_LT, -712 */
		/* 8213A950h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213A688;  }
		/* 8213A950h case    2:*/		return 0x8213A954;
	}
	return 0x8213A954;
} // Block from 8213A948h-8213A954h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213A954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A954);
		  /* 8213A954h */ case    0:  		/* cmplw CR6, R28, R20 */
		/* 8213A954h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R20);
		/* 8213A954h case    0:*/		return 0x8213A958;
		  /* 8213A958h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8213A958h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213A970;  }
		/* 8213A958h case    1:*/		return 0x8213A95C;
		  /* 8213A95Ch */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 8213A95Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213A95Ch case    2:*/		return 0x8213A960;
		  /* 8213A960h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8213A960h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213A970;  }
		/* 8213A960h case    3:*/		return 0x8213A964;
		  /* 8213A964h */ case    4:  		/* lwz R11, <#[R23]> */
		/* 8213A964h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8213A964h case    4:*/		return 0x8213A968;
		  /* 8213A968h */ case    5:  		/* addi R11, R11, 1 */
		/* 8213A968h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213A968h case    5:*/		return 0x8213A96C;
		  /* 8213A96Ch */ case    6:  		/* stw R11, <#[R23]> */
		/* 8213A96Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8213A96Ch case    6:*/		return 0x8213A970;
	}
	return 0x8213A970;
} // Block from 8213A954h-8213A970h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213A970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A970);
		  /* 8213A970h */ case    0:  		/* li R3, 0 */
		/* 8213A970h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213A970h case    0:*/		return 0x8213A974;
		  /* 8213A974h */ case    1:  		/* addi R1, R1, 208 */
		/* 8213A974h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8213A974h case    1:*/		return 0x8213A978;
		  /* 8213A978h */ case    2:  		/* b -694008 */
		/* 8213A978h case    2:*/		return 0x82091280;
		/* 8213A978h case    2:*/		return 0x8213A97C;
		  /* 8213A97Ch */ case    3:  		/* nop */
		/* 8213A97Ch case    3:*/		cpu::op::nop();
		/* 8213A97Ch case    3:*/		return 0x8213A980;
	}
	return 0x8213A980;
} // Block from 8213A970h-8213A980h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213A980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A980);
		  /* 8213A980h */ case    0:  		/* mfspr R12, LR */
		/* 8213A980h case    0:*/		regs.R12 = regs.LR;
		/* 8213A980h case    0:*/		return 0x8213A984;
		  /* 8213A984h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213A984h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213A984h case    1:*/		return 0x8213A988;
		  /* 8213A988h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213A988h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213A988h case    2:*/		return 0x8213A98C;
		  /* 8213A98Ch */ case    3:  		/* rlwinm. R10, R6, 0, 15, 15 */
		/* 8213A98Ch case    3:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R6);
		/* 8213A98Ch case    3:*/		return 0x8213A990;
		  /* 8213A990h */ case    4:  		/* li R11, 0 */
		/* 8213A990h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213A990h case    4:*/		return 0x8213A994;
		  /* 8213A994h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 8213A994h case    5:*/		if ( regs.CR[0].eq ) { return 0x8213A9A4;  }
		/* 8213A994h case    5:*/		return 0x8213A998;
		  /* 8213A998h */ case    6:  		/* li R10, 0 */
		/* 8213A998h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8213A998h case    6:*/		return 0x8213A99C;
		  /* 8213A99Ch */ case    7:  		/* li R11, 1 */
		/* 8213A99Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213A99Ch case    7:*/		return 0x8213A9A0;
		  /* 8213A9A0h */ case    8:  		/* stw R10, <#[R1 + 80]> */
		/* 8213A9A0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8213A9A0h case    8:*/		return 0x8213A9A4;
	}
	return 0x8213A9A4;
} // Block from 8213A980h-8213A9A4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213A9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A9A4);
		  /* 8213A9A4h */ case    0:  		/* rlwinm. R10, R6, 0, 14, 14 */
		/* 8213A9A4h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R10,regs.R6);
		/* 8213A9A4h case    0:*/		return 0x8213A9A8;
		  /* 8213A9A8h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8213A9A8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8213A9C0;  }
		/* 8213A9A8h case    1:*/		return 0x8213A9AC;
		  /* 8213A9ACh */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213A9ACh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213A9ACh case    2:*/		return 0x8213A9B0;
		  /* 8213A9B0h */ case    3:  		/* addi R9, R1, 80 */
		/* 8213A9B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213A9B0h case    3:*/		return 0x8213A9B4;
		  /* 8213A9B4h */ case    4:  		/* li R8, 1 */
		/* 8213A9B4h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8213A9B4h case    4:*/		return 0x8213A9B8;
		  /* 8213A9B8h */ case    5:  		/* addi R11, R11, 1 */
		/* 8213A9B8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213A9B8h case    5:*/		return 0x8213A9BC;
		  /* 8213A9BCh */ case    6:  		/* stwx R8, <#[R10 + R9]> */
		/* 8213A9BCh case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213A9BCh case    6:*/		return 0x8213A9C0;
	}
	return 0x8213A9C0;
} // Block from 8213A9A4h-8213A9C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213A9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A9C0);
		  /* 8213A9C0h */ case    0:  		/* rlwinm. R10, R6, 0, 13, 13 */
		/* 8213A9C0h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R6);
		/* 8213A9C0h case    0:*/		return 0x8213A9C4;
		  /* 8213A9C4h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8213A9C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8213A9DC;  }
		/* 8213A9C4h case    1:*/		return 0x8213A9C8;
		  /* 8213A9C8h */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213A9C8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213A9C8h case    2:*/		return 0x8213A9CC;
		  /* 8213A9CCh */ case    3:  		/* addi R9, R1, 80 */
		/* 8213A9CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213A9CCh case    3:*/		return 0x8213A9D0;
		  /* 8213A9D0h */ case    4:  		/* li R8, 2 */
		/* 8213A9D0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 8213A9D0h case    4:*/		return 0x8213A9D4;
		  /* 8213A9D4h */ case    5:  		/* addi R11, R11, 1 */
		/* 8213A9D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213A9D4h case    5:*/		return 0x8213A9D8;
		  /* 8213A9D8h */ case    6:  		/* stwx R8, <#[R10 + R9]> */
		/* 8213A9D8h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213A9D8h case    6:*/		return 0x8213A9DC;
	}
	return 0x8213A9DC;
} // Block from 8213A9C0h-8213A9DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213A9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A9DC);
		  /* 8213A9DCh */ case    0:  		/* rlwinm. R10, R6, 0, 12, 12 */
		/* 8213A9DCh case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R6);
		/* 8213A9DCh case    0:*/		return 0x8213A9E0;
		  /* 8213A9E0h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8213A9E0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8213A9F8;  }
		/* 8213A9E0h case    1:*/		return 0x8213A9E4;
		  /* 8213A9E4h */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213A9E4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213A9E4h case    2:*/		return 0x8213A9E8;
		  /* 8213A9E8h */ case    3:  		/* addi R9, R1, 80 */
		/* 8213A9E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213A9E8h case    3:*/		return 0x8213A9EC;
		  /* 8213A9ECh */ case    4:  		/* li R8, 3 */
		/* 8213A9ECh case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8213A9ECh case    4:*/		return 0x8213A9F0;
		  /* 8213A9F0h */ case    5:  		/* addi R11, R11, 1 */
		/* 8213A9F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213A9F0h case    5:*/		return 0x8213A9F4;
		  /* 8213A9F4h */ case    6:  		/* stwx R8, <#[R10 + R9]> */
		/* 8213A9F4h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213A9F4h case    6:*/		return 0x8213A9F8;
	}
	return 0x8213A9F8;
} // Block from 8213A9DCh-8213A9F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213A9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213A9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213A9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213A9F8);
		  /* 8213A9F8h */ case    0:  		/* cmplw CR6, R5, R11 */
		/* 8213A9F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8213A9F8h case    0:*/		return 0x8213A9FC;
		  /* 8213A9FCh */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8213A9FCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x8213AA04;  }
		/* 8213A9FCh case    1:*/		return 0x8213AA00;
		  /* 8213AA00h */ case    2:  		/* mr R5, R11 */
		/* 8213AA00h case    2:*/		regs.R5 = regs.R11;
		/* 8213AA00h case    2:*/		return 0x8213AA04;
	}
	return 0x8213AA04;
} // Block from 8213A9F8h-8213AA04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213AA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AA04);
		  /* 8213AA04h */ case    0:  		/* addi R10, R1, 96 */
		/* 8213AA04h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213AA04h case    0:*/		return 0x8213AA08;
		  /* 8213AA08h */ case    1:  		/* li R11, -1 */
		/* 8213AA08h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8213AA08h case    1:*/		return 0x8213AA0C;
		  /* 8213AA0Ch */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 8213AA0Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213AA0Ch case    2:*/		return 0x8213AA10;
		  /* 8213AA10h */ case    3:  		/* std R11, <#[R10]> */
		/* 8213AA10h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213AA10h case    3:*/		return 0x8213AA14;
		  /* 8213AA14h */ case    4:  		/* std R11, <#[R10 + 8]> */
		/* 8213AA14h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8213AA14h case    4:*/		return 0x8213AA18;
		  /* 8213AA18h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 8213AA18h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213AA58;  }
		/* 8213AA18h case    5:*/		return 0x8213AA1C;
		  /* 8213AA1Ch */ case    6:  		/* addi R9, R1, 80 */
		/* 8213AA1Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213AA1Ch case    6:*/		return 0x8213AA20;
		  /* 8213AA20h */ case    7:  		/* lwz R10, <#[R3 + 20]> */
		/* 8213AA20h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8213AA20h case    7:*/		return 0x8213AA24;
		  /* 8213AA24h */ case    8:  		/* addi R11, R1, 80 */
		/* 8213AA24h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213AA24h case    8:*/		return 0x8213AA28;
		  /* 8213AA28h */ case    9:  		/* mtspr CTR, R5 */
		/* 8213AA28h case    9:*/		regs.CTR = regs.R5;
		/* 8213AA28h case    9:*/		return 0x8213AA2C;
		  /* 8213AA2Ch */ case   10:  		/* subf R9, R9, R4 */
		/* 8213AA2Ch case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 8213AA2Ch case   10:*/		return 0x8213AA30;
		  /* 8213AA30h */ case   11:  		/* lwzx R8, <#[R9 + R11]> */
		/* 8213AA30h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213AA30h case   11:*/		return 0x8213AA34;
		  /* 8213AA34h */ case   12:  		/* addi R5, R1, 96 */
		/* 8213AA34h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8213AA34h case   12:*/		return 0x8213AA38;
		  /* 8213AA38h */ case   13:  		/* lwz R4, <#[R11]> */
		/* 8213AA38h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8213AA38h case   13:*/		return 0x8213AA3C;
		  /* 8213AA3Ch */ case   14:  		/* addi R11, R11, 4 */
		/* 8213AA3Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213AA3Ch case   14:*/		return 0x8213AA40;
		  /* 8213AA40h */ case   15:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213AA40h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213AA40h case   15:*/		return 0x8213AA44;
		  /* 8213AA44h */ case   16:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 8213AA44h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 8213AA44h case   16:*/		return 0x8213AA48;
		  /* 8213AA48h */ case   17:  		/* lwzx R8, <#[R8 + R10]> */
		/* 8213AA48h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8213AA48h case   17:*/		return 0x8213AA4C;
		  /* 8213AA4Ch */ case   18:  		/* lwz R8, <#[R8 + 16]> */
		/* 8213AA4Ch case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 8213AA4Ch case   18:*/		return 0x8213AA50;
		  /* 8213AA50h */ case   19:  		/* stwx R8, <#[R4 + R5]> */
		/* 8213AA50h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 8213AA50h case   19:*/		return 0x8213AA54;
		  /* 8213AA54h */ case   20:  		/* bc 16, CR0_LT, -36 */
		/* 8213AA54h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213AA30;  }
		/* 8213AA54h case   20:*/		return 0x8213AA58;
	}
	return 0x8213AA58;
} // Block from 8213AA04h-8213AA58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213AA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AA58);
		  /* 8213AA58h */ case    0:  		/* lhz R11, <#[R3 + 202]> */
		/* 8213AA58h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213AA58h case    0:*/		return 0x8213AA5C;
		  /* 8213AA5Ch */ case    1:  		/* cmplwi CR6, R11, 260 */
		/* 8213AA5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213AA5Ch case    1:*/		return 0x8213AA60;
		  /* 8213AA60h */ case    2:  		/* bc 4, CR6_EQ, 144 */
		/* 8213AA60h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213AAF0;  }
		/* 8213AA60h case    2:*/		return 0x8213AA64;
		  /* 8213AA64h */ case    3:  		/* lis R11, -32217 */
		/* 8213AA64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8213AA64h case    3:*/		return 0x8213AA68;
		  /* 8213AA68h */ case    4:  		/* li R5, 0 */
		/* 8213AA68h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213AA68h case    4:*/		return 0x8213AA6C;
		  /* 8213AA6Ch */ case    5:  		/* li R8, 0 */
		/* 8213AA6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8213AA6Ch case    5:*/		return 0x8213AA70;
		  /* 8213AA70h */ case    6:  		/* addi R6, R11, 15824 */
		/* 8213AA70h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3DD0);
		/* 8213AA70h case    6:*/		return 0x8213AA74;
		  /* 8213AA74h */ case    7:  		/* li R11, 0 */
		/* 8213AA74h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213AA74h case    7:*/		return 0x8213AA78;
		  /* 8213AA78h */ case    8:  		/* addi R9, R1, 96 */
		/* 8213AA78h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8213AA78h case    8:*/		return 0x8213AA7C;
		  /* 8213AA7Ch */ case    9:  		/* lwz R10, <#[R9]> */
		/* 8213AA7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8213AA7Ch case    9:*/		return 0x8213AA80;
		  /* 8213AA80h */ case   10:  		/* cmpwi CR6, R10, -1 */
		/* 8213AA80h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213AA80h case   10:*/		return 0x8213AA84;
		  /* 8213AA84h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 8213AA84h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213AA9C;  }
		/* 8213AA84h case   11:*/		return 0x8213AA88;
		  /* 8213AA88h */ case   12:  		/* add R4, R8, R11 */
		/* 8213AA88h case   12:*/		cpu::op::add<0>(regs,&regs.R4,regs.R8,regs.R11);
		/* 8213AA88h case   12:*/		return 0x8213AA8C;
		  /* 8213AA8Ch */ case   13:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 8213AA8Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 8213AA8Ch case   13:*/		return 0x8213AA90;
	}
	return 0x8213AA90;
} // Block from 8213AA58h-8213AA90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213AA90h
// Function '?EmitTEXLDPT@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AA90);
		  /* 8213AA90h */ case    0:  		/* lwzx R4, <#[R4 + R6]> */
		/* 8213AA90h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R6 + 0x00000000) );
		/* 8213AA90h case    0:*/		return 0x8213AA94;
		  /* 8213AA94h */ case    1:  		/* cmplw CR6, R10, R4 */
		/* 8213AA94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 8213AA94h case    1:*/		return 0x8213AA98;
		  /* 8213AA98h */ case    2:  		/* bc 4, CR6_EQ, 68 */
		/* 8213AA98h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213AADC;  }
		/* 8213AA98h case    2:*/		return 0x8213AA9C;
	}
	return 0x8213AA9C;
} // Block from 8213AA90h-8213AA9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213AA9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AA9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AA9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AA9C);
		  /* 8213AA9Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 8213AA9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213AA9Ch case    0:*/		return 0x8213AAA0;
		  /* 8213AAA0h */ case    1:  		/* addi R9, R9, 4 */
		/* 8213AAA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8213AAA0h case    1:*/		return 0x8213AAA4;
		  /* 8213AAA4h */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 8213AAA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8213AAA4h case    2:*/		return 0x8213AAA8;
		  /* 8213AAA8h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8213AAA8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213AA7C;  }
		/* 8213AAA8h case    3:*/		return 0x8213AAAC;
		  /* 8213AAACh */ case    4:  		/* rlwinm R11, R5, 4, 0, 27 */
		/* 8213AAACh case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R5);
		/* 8213AAACh case    4:*/		return 0x8213AAB0;
		  /* 8213AAB0h */ case    5:  		/* add. R11, R11, R6 */
		/* 8213AAB0h case    5:*/		cpu::op::add<1>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8213AAB0h case    5:*/		return 0x8213AAB4;
		  /* 8213AAB4h */ case    6:  		/* bc 4, CR0_EQ, 248 */
		/* 8213AAB4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8213ABAC;  }
		/* 8213AAB4h case    6:*/		return 0x8213AAB8;
		  /* 8213AAB8h */ case    7:  		/* lwz R11, <#[R3 + 260]> */
		/* 8213AAB8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 8213AAB8h case    7:*/		return 0x8213AABC;
		  /* 8213AABCh */ case    8:  		/* lis R10, -32253 */
		/* 8213AABCh case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8213AABCh case    8:*/		return 0x8213AAC0;
		  /* 8213AAC0h */ case    9:  		/* li R5, 4533 */
		/* 8213AAC0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x11B5);
		/* 8213AAC0h case    9:*/		return 0x8213AAC4;
		  /* 8213AAC4h */ case   10:  		/* addi R6, R10, 22820 */
		/* 8213AAC4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5924);
		/* 8213AAC4h case   10:*/		return 0x8213AAC8;
		  /* 8213AAC8h */ case   11:  		/* lwz R4, <#[R11 + 60]> */
		/* 8213AAC8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213AAC8h case   11:*/		return 0x8213AACC;
		  /* 8213AACCh */ case   12:  		/* bl -181148 */
		/* 8213AACCh case   12:*/		regs.LR = 0x8213AAD0; return 0x8210E730;
		/* 8213AACCh case   12:*/		return 0x8213AAD0;
		  /* 8213AAD0h */ case   13:  		/* lis R3, -32768 */
		/* 8213AAD0h case   13:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213AAD0h case   13:*/		return 0x8213AAD4;
		  /* 8213AAD4h */ case   14:  		/* ori R3, R3, 16389 */
		/* 8213AAD4h case   14:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213AAD4h case   14:*/		return 0x8213AAD8;
		  /* 8213AAD8h */ case   15:  		/* b 260 */
		/* 8213AAD8h case   15:*/		return 0x8213ABDC;
		/* 8213AAD8h case   15:*/		return 0x8213AADC;
	}
	return 0x8213AADC;
} // Block from 8213AA9Ch-8213AADCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213AADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AADC);
		  /* 8213AADCh */ case    0:  		/* addi R8, R8, 4 */
		/* 8213AADCh case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213AADCh case    0:*/		return 0x8213AAE0;
		  /* 8213AAE0h */ case    1:  		/* addi R5, R5, 1 */
		/* 8213AAE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213AAE0h case    1:*/		return 0x8213AAE4;
		  /* 8213AAE4h */ case    2:  		/* cmplwi CR6, R8, 20 */
		/* 8213AAE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000014);
		/* 8213AAE4h case    2:*/		return 0x8213AAE8;
		  /* 8213AAE8h */ case    3:  		/* bc 12, CR6_LT, -116 */
		/* 8213AAE8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213AA74;  }
		/* 8213AAE8h case    3:*/		return 0x8213AAEC;
		  /* 8213AAECh */ case    4:  		/* b -52 */
		/* 8213AAECh case    4:*/		return 0x8213AAB8;
		/* 8213AAECh case    4:*/		return 0x8213AAF0;
	}
	return 0x8213AAF0;
} // Block from 8213AADCh-8213AAF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AAF0);
		  /* 8213AAF0h */ case    0:  		/* lis R10, -32217 */
		/* 8213AAF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8213AAF0h case    0:*/		return 0x8213AAF4;
		  /* 8213AAF4h */ case    1:  		/* li R11, 0 */
		/* 8213AAF4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213AAF4h case    1:*/		return 0x8213AAF8;
		  /* 8213AAF8h */ case    2:  		/* addi R9, R10, 15824 */
		/* 8213AAF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x3DD0);
		/* 8213AAF8h case    2:*/		return 0x8213AAFC;
		  /* 8213AAFCh */ case    3:  		/* addi R10, R1, 96 */
		/* 8213AAFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213AAFCh case    3:*/		return 0x8213AB00;
		  /* 8213AB00h */ case    4:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213AB00h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213AB00h case    4:*/		return 0x8213AB04;
		  /* 8213AB04h */ case    5:  		/* cmpwi CR6, R10, -1 */
		/* 8213AB04h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213AB04h case    5:*/		return 0x8213AB08;
		  /* 8213AB08h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8213AB08h case    6:*/		if ( regs.CR[6].eq ) { return 0x8213AB1C;  }
		/* 8213AB08h case    6:*/		return 0x8213AB0C;
		  /* 8213AB0Ch */ case    7:  		/* addi R8, R9, 48 */
		/* 8213AB0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x30);
		/* 8213AB0Ch case    7:*/		return 0x8213AB10;
		  /* 8213AB10h */ case    8:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213AB10h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213AB10h case    8:*/		return 0x8213AB14;
		  /* 8213AB14h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 8213AB14h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213AB14h case    9:*/		return 0x8213AB18;
		  /* 8213AB18h */ case   10:  		/* bc 4, CR6_EQ, 24 */
		/* 8213AB18h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213AB30;  }
		/* 8213AB18h case   10:*/		return 0x8213AB1C;
	}
	return 0x8213AB1C;
} // Block from 8213AAF0h-8213AB1Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213AB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AB1C);
		  /* 8213AB1Ch */ case    0:  		/* addi R11, R11, 4 */
		/* 8213AB1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213AB1Ch case    0:*/		return 0x8213AB20;
		  /* 8213AB20h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8213AB20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8213AB20h case    1:*/		return 0x8213AB24;
		  /* 8213AB24h */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8213AB24h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213AAFC;  }
		/* 8213AB24h case    2:*/		return 0x8213AB28;
		  /* 8213AB28h */ case    3:  		/* addi R11, R9, 48 */
		/* 8213AB28h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x30);
		/* 8213AB28h case    3:*/		return 0x8213AB2C;
		  /* 8213AB2Ch */ case    4:  		/* b 128 */
		/* 8213AB2Ch case    4:*/		return 0x8213ABAC;
		/* 8213AB2Ch case    4:*/		return 0x8213AB30;
	}
	return 0x8213AB30;
} // Block from 8213AB1Ch-8213AB30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AB30);
		  /* 8213AB30h */ case    0:  		/* li R11, 0 */
		/* 8213AB30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213AB30h case    0:*/		return 0x8213AB34;
		  /* 8213AB34h */ case    1:  		/* addi R10, R1, 96 */
		/* 8213AB34h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213AB34h case    1:*/		return 0x8213AB38;
		  /* 8213AB38h */ case    2:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213AB38h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213AB38h case    2:*/		return 0x8213AB3C;
		  /* 8213AB3Ch */ case    3:  		/* cmpwi CR6, R10, -1 */
		/* 8213AB3Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213AB3Ch case    3:*/		return 0x8213AB40;
		  /* 8213AB40h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8213AB40h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213AB54;  }
		/* 8213AB40h case    4:*/		return 0x8213AB44;
		  /* 8213AB44h */ case    5:  		/* addi R8, R9, 64 */
		/* 8213AB44h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x40);
		/* 8213AB44h case    5:*/		return 0x8213AB48;
		  /* 8213AB48h */ case    6:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213AB48h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213AB48h case    6:*/		return 0x8213AB4C;
		  /* 8213AB4Ch */ case    7:  		/* cmplw CR6, R10, R8 */
		/* 8213AB4Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213AB4Ch case    7:*/		return 0x8213AB50;
		  /* 8213AB50h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8213AB50h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213AB64;  }
		/* 8213AB50h case    8:*/		return 0x8213AB54;
	}
	return 0x8213AB54;
} // Block from 8213AB30h-8213AB54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213AB54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AB54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AB54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AB54);
		  /* 8213AB54h */ case    0:  		/* addi R11, R11, 4 */
		/* 8213AB54h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213AB54h case    0:*/		return 0x8213AB58;
		  /* 8213AB58h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8213AB58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8213AB58h case    1:*/		return 0x8213AB5C;
		  /* 8213AB5Ch */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8213AB5Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8213AB34;  }
		/* 8213AB5Ch case    2:*/		return 0x8213AB60;
		  /* 8213AB60h */ case    3:  		/* b 72 */
		/* 8213AB60h case    3:*/		return 0x8213ABA8;
		/* 8213AB60h case    3:*/		return 0x8213AB64;
	}
	return 0x8213AB64;
} // Block from 8213AB54h-8213AB64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213AB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AB64);
		  /* 8213AB64h */ case    0:  		/* li R11, 0 */
		/* 8213AB64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213AB64h case    0:*/		return 0x8213AB68;
		  /* 8213AB68h */ case    1:  		/* addi R10, R1, 96 */
		/* 8213AB68h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213AB68h case    1:*/		return 0x8213AB6C;
		  /* 8213AB6Ch */ case    2:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213AB6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213AB6Ch case    2:*/		return 0x8213AB70;
		  /* 8213AB70h */ case    3:  		/* cmpwi CR6, R10, -1 */
		/* 8213AB70h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213AB70h case    3:*/		return 0x8213AB74;
		  /* 8213AB74h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8213AB74h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213AB88;  }
		/* 8213AB74h case    4:*/		return 0x8213AB78;
		  /* 8213AB78h */ case    5:  		/* addi R8, R9, 32 */
		/* 8213AB78h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x20);
		/* 8213AB78h case    5:*/		return 0x8213AB7C;
		  /* 8213AB7Ch */ case    6:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213AB7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213AB7Ch case    6:*/		return 0x8213AB80;
		  /* 8213AB80h */ case    7:  		/* cmplw CR6, R10, R8 */
		/* 8213AB80h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213AB80h case    7:*/		return 0x8213AB84;
		  /* 8213AB84h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8213AB84h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213ABA8;  }
		/* 8213AB84h case    8:*/		return 0x8213AB88;
	}
	return 0x8213AB88;
} // Block from 8213AB64h-8213AB88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213AB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AB88);
		  /* 8213AB88h */ case    0:  		/* addi R11, R11, 4 */
		/* 8213AB88h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213AB88h case    0:*/		return 0x8213AB8C;
		  /* 8213AB8Ch */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8213AB8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8213AB8Ch case    1:*/		return 0x8213AB90;
		  /* 8213AB90h */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8213AB90h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213AB68;  }
		/* 8213AB90h case    2:*/		return 0x8213AB94;
		  /* 8213AB94h */ case    3:  		/* rlwinm R11, R6, 0, 12, 15 */
		/* 8213AB94h case    3:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R6);
		/* 8213AB94h case    3:*/		return 0x8213AB98;
		  /* 8213AB98h */ case    4:  		/* lis R10, 8 */
		/* 8213AB98h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 8213AB98h case    4:*/		return 0x8213AB9C;
		  /* 8213AB9Ch */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 8213AB9Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213AB9Ch case    5:*/		return 0x8213ABA0;
		  /* 8213ABA0h */ case    6:  		/* addi R11, R9, 32 */
		/* 8213ABA0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x20);
		/* 8213ABA0h case    6:*/		return 0x8213ABA4;
		  /* 8213ABA4h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 8213ABA4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213ABAC;  }
		/* 8213ABA4h case    7:*/		return 0x8213ABA8;
	}
	return 0x8213ABA8;
} // Block from 8213AB88h-8213ABA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABA8);
		  /* 8213ABA8h */ case    0:  		/* addi R11, R9, 64 */
		/* 8213ABA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x40);
		/* 8213ABA8h case    0:*/		return 0x8213ABAC;
	}
	return 0x8213ABAC;
} // Block from 8213ABA8h-8213ABACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABAC);
		  /* 8213ABACh */ case    0:  		/* li R8, 4 */
		/* 8213ABACh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8213ABACh case    0:*/		return 0x8213ABB0;
		  /* 8213ABB0h */ case    1:  		/* li R9, 0 */
		/* 8213ABB0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8213ABB0h case    1:*/		return 0x8213ABB4;
		  /* 8213ABB4h */ case    2:  		/* li R10, 16 */
		/* 8213ABB4h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8213ABB4h case    2:*/		return 0x8213ABB8;
		  /* 8213ABB8h */ case    3:  		/* addi R11, R11, -4 */
		/* 8213ABB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8213ABB8h case    3:*/		return 0x8213ABBC;
		  /* 8213ABBCh */ case    4:  		/* mtspr CTR, R8 */
		/* 8213ABBCh case    4:*/		regs.CTR = regs.R8;
		/* 8213ABBCh case    4:*/		return 0x8213ABC0;
		  /* 8213ABC0h */ case    5:  		/* lwzu R8, <#[R11 + 4]> */
		/* 8213ABC0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8213ABC0h case    5:*/		return 0x8213ABC4;
		  /* 8213ABC4h */ case    6:  		/* slw R8, R8, R10 */
		/* 8213ABC4h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 8213ABC4h case    6:*/		return 0x8213ABC8;
		  /* 8213ABC8h */ case    7:  		/* or R9, R8, R9 */
		/* 8213ABC8h case    7:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8213ABC8h case    7:*/		return 0x8213ABCC;
		  /* 8213ABCCh */ case    8:  		/* addi R10, R10, 2 */
		/* 8213ABCCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8213ABCCh case    8:*/		return 0x8213ABD0;
		  /* 8213ABD0h */ case    9:  		/* bc 16, CR0_LT, -16 */
		/* 8213ABD0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213ABC0;  }
		/* 8213ABD0h case    9:*/		return 0x8213ABD4;
		  /* 8213ABD4h */ case   10:  		/* stw R9, <#[R7]> */
		/* 8213ABD4h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 8213ABD4h case   10:*/		return 0x8213ABD8;
		  /* 8213ABD8h */ case   11:  		/* li R3, 0 */
		/* 8213ABD8h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213ABD8h case   11:*/		return 0x8213ABDC;
	}
	return 0x8213ABDC;
} // Block from 8213ABACh-8213ABDCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABDC);
		  /* 8213ABDCh */ case    0:  		/* addi R1, R1, 128 */
		/* 8213ABDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213ABDCh case    0:*/		return 0x8213ABE0;
		  /* 8213ABE0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213ABE0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213ABE0h case    1:*/		return 0x8213ABE4;
		  /* 8213ABE4h */ case    2:  		/* mtspr LR, R12 */
		/* 8213ABE4h case    2:*/		regs.LR = regs.R12;
		/* 8213ABE4h case    2:*/		return 0x8213ABE8;
		  /* 8213ABE8h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8213ABE8h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213ABE8h case    3:*/		return 0x8213ABEC;
	}
	return 0x8213ABEC;
} // Block from 8213ABDCh-8213ABECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABEC);
		  /* 8213ABECh */ case    0:  		/* nop */
		/* 8213ABECh case    0:*/		cpu::op::nop();
		/* 8213ABECh case    0:*/		return 0x8213ABF0;
	}
	return 0x8213ABF0;
} // Block from 8213ABECh-8213ABF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABF0);
		  /* 8213ABF0h */ case    0:  		/* mfspr R12, LR */
		/* 8213ABF0h case    0:*/		regs.R12 = regs.LR;
		/* 8213ABF0h case    0:*/		return 0x8213ABF4;
		  /* 8213ABF4h */ case    1:  		/* bl -694684 */
		/* 8213ABF4h case    1:*/		regs.LR = 0x8213ABF8; return 0x82091258;
		/* 8213ABF4h case    1:*/		return 0x8213ABF8;
	}
	return 0x8213ABF8;
} // Block from 8213ABF0h-8213ABF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213ABF8h
// Function '?EmitTEXLDD@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ABF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ABF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ABF8);
		  /* 8213ABF8h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213ABF8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213ABF8h case    0:*/		return 0x8213ABFC;
		  /* 8213ABFCh */ case    1:  		/* mr R31, R3 */
		/* 8213ABFCh case    1:*/		regs.R31 = regs.R3;
		/* 8213ABFCh case    1:*/		return 0x8213AC00;
		  /* 8213AC00h */ case    2:  		/* lwz R3, <#[R3 + 560]> */
		/* 8213AC00h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000230) );
		/* 8213AC00h case    2:*/		return 0x8213AC04;
		  /* 8213AC04h */ case    3:  		/* lis R11, -32253 */
		/* 8213AC04h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213AC04h case    3:*/		return 0x8213AC08;
		  /* 8213AC08h */ case    4:  		/* lis R4, 9345 */
		/* 8213AC08h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AC08h case    4:*/		return 0x8213AC0C;
		  /* 8213AC0Ch */ case    5:  		/* addi R11, R11, 19544 */
		/* 8213AC0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4C58);
		/* 8213AC0Ch case    5:*/		return 0x8213AC10;
		  /* 8213AC10h */ case    6:  		/* stw R11, <#[R31]> */
		/* 8213AC10h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213AC10h case    6:*/		return 0x8213AC14;
		  /* 8213AC14h */ case    7:  		/* bl -731356 */
		/* 8213AC14h case    7:*/		regs.LR = 0x8213AC18; return 0x82088338;
		/* 8213AC14h case    7:*/		return 0x8213AC18;
		  /* 8213AC18h */ case    8:  		/* lis R4, 9345 */
		/* 8213AC18h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AC18h case    8:*/		return 0x8213AC1C;
		  /* 8213AC1Ch */ case    9:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213AC1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213AC1Ch case    9:*/		return 0x8213AC20;
		  /* 8213AC20h */ case   10:  		/* bl -731368 */
		/* 8213AC20h case   10:*/		regs.LR = 0x8213AC24; return 0x82088338;
		/* 8213AC20h case   10:*/		return 0x8213AC24;
		  /* 8213AC24h */ case   11:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213AC24h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213AC24h case   11:*/		return 0x8213AC28;
		  /* 8213AC28h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8213AC28h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AC28h case   12:*/		return 0x8213AC2C;
		  /* 8213AC2Ch */ case   13:  		/* bc 12, CR6_EQ, 76 */
		/* 8213AC2Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8213AC78;  }
		/* 8213AC2Ch case   13:*/		return 0x8213AC30;
		  /* 8213AC30h */ case   14:  		/* lwz R11, <#[R31 + 708]> */
		/* 8213AC30h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C4) );
		/* 8213AC30h case   14:*/		return 0x8213AC34;
		  /* 8213AC34h */ case   15:  		/* li R28, 0 */
		/* 8213AC34h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213AC34h case   15:*/		return 0x8213AC38;
		  /* 8213AC38h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8213AC38h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AC38h case   16:*/		return 0x8213AC3C;
		  /* 8213AC3Ch */ case   17:  		/* bc 4, CR6_GT, 60 */
		/* 8213AC3Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x8213AC78;  }
		/* 8213AC3Ch case   17:*/		return 0x8213AC40;
		  /* 8213AC40h */ case   18:  		/* li R30, 0 */
		/* 8213AC40h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213AC40h case   18:*/		return 0x8213AC44;
		  /* 8213AC44h */ case   19:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213AC44h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213AC44h case   19:*/		return 0x8213AC48;
		  /* 8213AC48h */ case   20:  		/* lwzx R29, <#[R11 + R30]> */
		/* 8213AC48h case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213AC48h case   20:*/		return 0x8213AC4C;
		  /* 8213AC4Ch */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 8213AC4Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8213AC4Ch case   21:*/		return 0x8213AC50;
		  /* 8213AC50h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 8213AC50h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213AC64;  }
		/* 8213AC50h case   22:*/		return 0x8213AC54;
		  /* 8213AC54h */ case   23:  		/* mr R3, R29 */
		/* 8213AC54h case   23:*/		regs.R3 = regs.R29;
		/* 8213AC54h case   23:*/		return 0x8213AC58;
		  /* 8213AC58h */ case   24:  		/* bl 927592 */
		/* 8213AC58h case   24:*/		regs.LR = 0x8213AC5C; return 0x8221D3C0;
		/* 8213AC58h case   24:*/		return 0x8213AC5C;
		  /* 8213AC5Ch */ case   25:  		/* mr R3, R29 */
		/* 8213AC5Ch case   25:*/		regs.R3 = regs.R29;
		/* 8213AC5Ch case   25:*/		return 0x8213AC60;
		  /* 8213AC60h */ case   26:  		/* bl -255600 */
		/* 8213AC60h case   26:*/		regs.LR = 0x8213AC64; return 0x820FC5F0;
		/* 8213AC60h case   26:*/		return 0x8213AC64;
	}
	return 0x8213AC64;
} // Block from 8213ABF8h-8213AC64h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213AC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AC64);
		  /* 8213AC64h */ case    0:  		/* lwz R11, <#[R31 + 708]> */
		/* 8213AC64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C4) );
		/* 8213AC64h case    0:*/		return 0x8213AC68;
		  /* 8213AC68h */ case    1:  		/* addi R28, R28, 1 */
		/* 8213AC68h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213AC68h case    1:*/		return 0x8213AC6C;
		  /* 8213AC6Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 8213AC6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213AC6Ch case    2:*/		return 0x8213AC70;
		  /* 8213AC70h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 8213AC70h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213AC70h case    3:*/		return 0x8213AC74;
		  /* 8213AC74h */ case    4:  		/* bc 12, CR6_LT, -48 */
		/* 8213AC74h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213AC44;  }
		/* 8213AC74h case    4:*/		return 0x8213AC78;
	}
	return 0x8213AC78;
} // Block from 8213AC64h-8213AC78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AC78);
		  /* 8213AC78h */ case    0:  		/* lwz R11, <#[R31 + 700]> */
		/* 8213AC78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213AC78h case    0:*/		return 0x8213AC7C;
		  /* 8213AC7Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213AC7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AC7Ch case    1:*/		return 0x8213AC80;
		  /* 8213AC80h */ case    2:  		/* bc 12, CR6_EQ, 76 */
		/* 8213AC80h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213ACCC;  }
		/* 8213AC80h case    2:*/		return 0x8213AC84;
		  /* 8213AC84h */ case    3:  		/* lwz R11, <#[R31 + 704]> */
		/* 8213AC84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C0) );
		/* 8213AC84h case    3:*/		return 0x8213AC88;
		  /* 8213AC88h */ case    4:  		/* li R28, 0 */
		/* 8213AC88h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213AC88h case    4:*/		return 0x8213AC8C;
		  /* 8213AC8Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8213AC8Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AC8Ch case    5:*/		return 0x8213AC90;
		  /* 8213AC90h */ case    6:  		/* bc 4, CR6_GT, 60 */
		/* 8213AC90h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213ACCC;  }
		/* 8213AC90h case    6:*/		return 0x8213AC94;
		  /* 8213AC94h */ case    7:  		/* li R30, 0 */
		/* 8213AC94h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213AC94h case    7:*/		return 0x8213AC98;
		  /* 8213AC98h */ case    8:  		/* lwz R11, <#[R31 + 700]> */
		/* 8213AC98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213AC98h case    8:*/		return 0x8213AC9C;
		  /* 8213AC9Ch */ case    9:  		/* lwzx R29, <#[R30 + R11]> */
		/* 8213AC9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213AC9Ch case    9:*/		return 0x8213ACA0;
		  /* 8213ACA0h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 8213ACA0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8213ACA0h case   10:*/		return 0x8213ACA4;
		  /* 8213ACA4h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 8213ACA4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213ACB8;  }
		/* 8213ACA4h case   11:*/		return 0x8213ACA8;
		  /* 8213ACA8h */ case   12:  		/* mr R3, R29 */
		/* 8213ACA8h case   12:*/		regs.R3 = regs.R29;
		/* 8213ACA8h case   12:*/		return 0x8213ACAC;
		  /* 8213ACACh */ case   13:  		/* bl 927508 */
		/* 8213ACACh case   13:*/		regs.LR = 0x8213ACB0; return 0x8221D3C0;
		/* 8213ACACh case   13:*/		return 0x8213ACB0;
		  /* 8213ACB0h */ case   14:  		/* mr R3, R29 */
		/* 8213ACB0h case   14:*/		regs.R3 = regs.R29;
		/* 8213ACB0h case   14:*/		return 0x8213ACB4;
		  /* 8213ACB4h */ case   15:  		/* bl -253748 */
		/* 8213ACB4h case   15:*/		regs.LR = 0x8213ACB8; return 0x820FCD80;
		/* 8213ACB4h case   15:*/		return 0x8213ACB8;
	}
	return 0x8213ACB8;
} // Block from 8213AC78h-8213ACB8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213ACB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ACB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ACB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ACB8);
		  /* 8213ACB8h */ case    0:  		/* lwz R11, <#[R31 + 704]> */
		/* 8213ACB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002C0) );
		/* 8213ACB8h case    0:*/		return 0x8213ACBC;
		  /* 8213ACBCh */ case    1:  		/* addi R28, R28, 1 */
		/* 8213ACBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213ACBCh case    1:*/		return 0x8213ACC0;
		  /* 8213ACC0h */ case    2:  		/* addi R30, R30, 4 */
		/* 8213ACC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213ACC0h case    2:*/		return 0x8213ACC4;
		  /* 8213ACC4h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 8213ACC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213ACC4h case    3:*/		return 0x8213ACC8;
		  /* 8213ACC8h */ case    4:  		/* bc 12, CR6_LT, -48 */
		/* 8213ACC8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213AC98;  }
		/* 8213ACC8h case    4:*/		return 0x8213ACCC;
	}
	return 0x8213ACCC;
} // Block from 8213ACB8h-8213ACCCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213ACCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ACCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ACCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ACCC);
		  /* 8213ACCCh */ case    0:  		/* addi R30, R31, 708 */
		/* 8213ACCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C4);
		/* 8213ACCCh case    0:*/		return 0x8213ACD0;
		  /* 8213ACD0h */ case    1:  		/* li R29, 16 */
		/* 8213ACD0h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x10);
		/* 8213ACD0h case    1:*/		return 0x8213ACD4;
		  /* 8213ACD4h */ case    2:  		/* lwz R28, <#[R30 + 4]> */
		/* 8213ACD4h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 8213ACD4h case    2:*/		return 0x8213ACD8;
		  /* 8213ACD8h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 8213ACD8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8213ACD8h case    3:*/		return 0x8213ACDC;
		  /* 8213ACDCh */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8213ACDCh case    4:*/		if ( regs.CR[6].eq ) { return 0x8213ACF0;  }
		/* 8213ACDCh case    4:*/		return 0x8213ACE0;
		  /* 8213ACE0h */ case    5:  		/* mr R3, R28 */
		/* 8213ACE0h case    5:*/		regs.R3 = regs.R28;
		/* 8213ACE0h case    5:*/		return 0x8213ACE4;
		  /* 8213ACE4h */ case    6:  		/* bl 927452 */
		/* 8213ACE4h case    6:*/		regs.LR = 0x8213ACE8; return 0x8221D3C0;
		/* 8213ACE4h case    6:*/		return 0x8213ACE8;
		  /* 8213ACE8h */ case    7:  		/* mr R3, R28 */
		/* 8213ACE8h case    7:*/		regs.R3 = regs.R28;
		/* 8213ACE8h case    7:*/		return 0x8213ACEC;
		  /* 8213ACECh */ case    8:  		/* bl -255740 */
		/* 8213ACECh case    8:*/		regs.LR = 0x8213ACF0; return 0x820FC5F0;
		/* 8213ACECh case    8:*/		return 0x8213ACF0;
	}
	return 0x8213ACF0;
} // Block from 8213ACCCh-8213ACF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213ACF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ACF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ACF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ACF0);
		  /* 8213ACF0h */ case    0:  		/* li R11, 0 */
		/* 8213ACF0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213ACF0h case    0:*/		return 0x8213ACF4;
		  /* 8213ACF4h */ case    1:  		/* addic. R29, R29, -1 */
		/* 8213ACF4h case    1:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8213ACF4h case    1:*/		return 0x8213ACF8;
		  /* 8213ACF8h */ case    2:  		/* stwu R11, <#[R30 + 4]> */
		/* 8213ACF8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8213ACF8h case    2:*/		return 0x8213ACFC;
		  /* 8213ACFCh */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 8213ACFCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8213ACD4;  }
		/* 8213ACFCh case    3:*/		return 0x8213AD00;
		  /* 8213AD00h */ case    4:  		/* lis R4, 9345 */
		/* 8213AD00h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AD00h case    4:*/		return 0x8213AD04;
		  /* 8213AD04h */ case    5:  		/* lwz R3, <#[R31 + 696]> */
		/* 8213AD04h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213AD04h case    5:*/		return 0x8213AD08;
		  /* 8213AD08h */ case    6:  		/* bl -731600 */
		/* 8213AD08h case    6:*/		regs.LR = 0x8213AD0C; return 0x82088338;
		/* 8213AD08h case    6:*/		return 0x8213AD0C;
		  /* 8213AD0Ch */ case    7:  		/* lis R4, 9345 */
		/* 8213AD0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AD0Ch case    7:*/		return 0x8213AD10;
		  /* 8213AD10h */ case    8:  		/* lwz R3, <#[R31 + 700]> */
		/* 8213AD10h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213AD10h case    8:*/		return 0x8213AD14;
		  /* 8213AD14h */ case    9:  		/* bl -731612 */
		/* 8213AD14h case    9:*/		regs.LR = 0x8213AD18; return 0x82088338;
		/* 8213AD14h case    9:*/		return 0x8213AD18;
		  /* 8213AD18h */ case   10:  		/* mr R3, R31 */
		/* 8213AD18h case   10:*/		regs.R3 = regs.R31;
		/* 8213AD18h case   10:*/		return 0x8213AD1C;
		  /* 8213AD1Ch */ case   11:  		/* bl -315420 */
		/* 8213AD1Ch case   11:*/		regs.LR = 0x8213AD20; return 0x820EDD00;
		/* 8213AD1Ch case   11:*/		return 0x8213AD20;
		  /* 8213AD20h */ case   12:  		/* addi R1, R1, 128 */
		/* 8213AD20h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213AD20h case   12:*/		return 0x8213AD24;
		  /* 8213AD24h */ case   13:  		/* b -694908 */
		/* 8213AD24h case   13:*/		return 0x820912A8;
		/* 8213AD24h case   13:*/		return 0x8213AD28;
	}
	return 0x8213AD28;
} // Block from 8213ACF0h-8213AD28h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213AD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AD28);
		  /* 8213AD28h */ case    0:  		/* mfspr R12, LR */
		/* 8213AD28h case    0:*/		regs.R12 = regs.LR;
		/* 8213AD28h case    0:*/		return 0x8213AD2C;
		  /* 8213AD2Ch */ case    1:  		/* bl -694992 */
		/* 8213AD2Ch case    1:*/		regs.LR = 0x8213AD30; return 0x8209125C;
		/* 8213AD2Ch case    1:*/		return 0x8213AD30;
		  /* 8213AD30h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8213AD30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8213AD30h case    2:*/		return 0x8213AD34;
		  /* 8213AD34h */ case    3:  		/* mr R31, R3 */
		/* 8213AD34h case    3:*/		regs.R31 = regs.R3;
		/* 8213AD34h case    3:*/		return 0x8213AD38;
		  /* 8213AD38h */ case    4:  		/* mr R29, R4 */
		/* 8213AD38h case    4:*/		regs.R29 = regs.R4;
		/* 8213AD38h case    4:*/		return 0x8213AD3C;
		  /* 8213AD3Ch */ case    5:  		/* addi R3, R3, 508 */
		/* 8213AD3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1FC);
		/* 8213AD3Ch case    5:*/		return 0x8213AD40;
		  /* 8213AD40h */ case    6:  		/* li R5, 32 */
		/* 8213AD40h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8213AD40h case    6:*/		return 0x8213AD44;
		  /* 8213AD44h */ case    7:  		/* li R4, 0 */
		/* 8213AD44h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213AD44h case    7:*/		return 0x8213AD48;
		  /* 8213AD48h */ case    8:  		/* bl -694792 */
		/* 8213AD48h case    8:*/		regs.LR = 0x8213AD4C; return 0x82091340;
		/* 8213AD48h case    8:*/		return 0x8213AD4C;
		  /* 8213AD4Ch */ case    9:  		/* li R30, 0 */
		/* 8213AD4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213AD4Ch case    9:*/		return 0x8213AD50;
		  /* 8213AD50h */ case   10:  		/* lis R4, 9345 */
		/* 8213AD50h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AD50h case   10:*/		return 0x8213AD54;
		  /* 8213AD54h */ case   11:  		/* stw R30, <#[R31 + 540]> */
		/* 8213AD54h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000021C) );
		/* 8213AD54h case   11:*/		return 0x8213AD58;
		  /* 8213AD58h */ case   12:  		/* stw R30, <#[R31 + 544]> */
		/* 8213AD58h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000220) );
		/* 8213AD58h case   12:*/		return 0x8213AD5C;
		  /* 8213AD5Ch */ case   13:  		/* stw R30, <#[R31 + 548]> */
		/* 8213AD5Ch case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000224) );
		/* 8213AD5Ch case   13:*/		return 0x8213AD60;
		  /* 8213AD60h */ case   14:  		/* stw R30, <#[R31 + 552]> */
		/* 8213AD60h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000228) );
		/* 8213AD60h case   14:*/		return 0x8213AD64;
		  /* 8213AD64h */ case   15:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213AD64h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213AD64h case   15:*/		return 0x8213AD68;
		  /* 8213AD68h */ case   16:  		/* bl -731696 */
		/* 8213AD68h case   16:*/		regs.LR = 0x8213AD6C; return 0x82088338;
		/* 8213AD68h case   16:*/		return 0x8213AD6C;
		  /* 8213AD6Ch */ case   17:  		/* lis R4, 9345 */
		/* 8213AD6Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213AD6Ch case   17:*/		return 0x8213AD70;
		  /* 8213AD70h */ case   18:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213AD70h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213AD70h case   18:*/		return 0x8213AD74;
		  /* 8213AD74h */ case   19:  		/* bl -731708 */
		/* 8213AD74h case   19:*/		regs.LR = 0x8213AD78; return 0x82088338;
		/* 8213AD74h case   19:*/		return 0x8213AD78;
		  /* 8213AD78h */ case   20:  		/* stw R30, <#[R31 + 560]> */
		/* 8213AD78h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000230) );
		/* 8213AD78h case   20:*/		return 0x8213AD7C;
		  /* 8213AD7Ch */ case   21:  		/* mr R4, R29 */
		/* 8213AD7Ch case   21:*/		regs.R4 = regs.R29;
		/* 8213AD7Ch case   21:*/		return 0x8213AD80;
		  /* 8213AD80h */ case   22:  		/* stw R30, <#[R31 + 564]> */
		/* 8213AD80h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 8213AD80h case   22:*/		return 0x8213AD84;
		  /* 8213AD84h */ case   23:  		/* mr R3, R31 */
		/* 8213AD84h case   23:*/		regs.R3 = regs.R31;
		/* 8213AD84h case   23:*/		return 0x8213AD88;
		  /* 8213AD88h */ case   24:  		/* bl -287072 */
		/* 8213AD88h case   24:*/		regs.LR = 0x8213AD8C; return 0x820F4C28;
		/* 8213AD88h case   24:*/		return 0x8213AD8C;
		  /* 8213AD8Ch */ case   25:  		/* addi R1, R1, 112 */
		/* 8213AD8Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8213AD8Ch case   25:*/		return 0x8213AD90;
		  /* 8213AD90h */ case   26:  		/* b -695012 */
		/* 8213AD90h case   26:*/		return 0x820912AC;
		/* 8213AD90h case   26:*/		return 0x8213AD94;
		  /* 8213AD94h */ case   27:  		/* nop */
		/* 8213AD94h case   27:*/		cpu::op::nop();
		/* 8213AD94h case   27:*/		return 0x8213AD98;
	}
	return 0x8213AD98;
} // Block from 8213AD28h-8213AD98h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213AD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AD98);
		  /* 8213AD98h */ case    0:  		/* mfspr R12, LR */
		/* 8213AD98h case    0:*/		regs.R12 = regs.LR;
		/* 8213AD98h case    0:*/		return 0x8213AD9C;
		  /* 8213AD9Ch */ case    1:  		/* bl -695108 */
		/* 8213AD9Ch case    1:*/		regs.LR = 0x8213ADA0; return 0x82091258;
		/* 8213AD9Ch case    1:*/		return 0x8213ADA0;
		  /* 8213ADA0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213ADA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213ADA0h case    2:*/		return 0x8213ADA4;
		  /* 8213ADA4h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8213ADA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213ADA4h case    3:*/		return 0x8213ADA8;
		  /* 8213ADA8h */ case    4:  		/* mr R31, R3 */
		/* 8213ADA8h case    4:*/		regs.R31 = regs.R3;
		/* 8213ADA8h case    4:*/		return 0x8213ADAC;
		  /* 8213ADACh */ case    5:  		/* lis R28, 4352 */
		/* 8213ADACh case    5:*/		cpu::op::lis<0>(regs,&regs.R28,0x1100);
		/* 8213ADACh case    5:*/		return 0x8213ADB0;
		  /* 8213ADB0h */ case    6:  		/* li R30, 0 */
		/* 8213ADB0h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213ADB0h case    6:*/		return 0x8213ADB4;
		  /* 8213ADB4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213ADB4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213ADB4h case    7:*/		return 0x8213ADB8;
		  /* 8213ADB8h */ case    8:  		/* bc 4, CR6_GT, 76 */
		/* 8213ADB8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213AE04;  }
		/* 8213ADB8h case    8:*/		return 0x8213ADBC;
		  /* 8213ADBCh */ case    9:  		/* li R29, 0 */
		/* 8213ADBCh case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213ADBCh case    9:*/		return 0x8213ADC0;
		  /* 8213ADC0h */ case   10:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213ADC0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213ADC0h case   10:*/		return 0x8213ADC4;
		  /* 8213ADC4h */ case   11:  		/* stw R30, <#[R31 + 256]> */
		/* 8213ADC4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213ADC4h case   11:*/		return 0x8213ADC8;
	}
	return 0x8213ADC8;
} // Block from 8213AD98h-8213ADC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213ADC8h
// Function '?EmitTEXCRD@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ADC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ADC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ADC8);
		  /* 8213ADC8h */ case    0:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213ADC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213ADC8h case    0:*/		return 0x8213ADCC;
		  /* 8213ADCCh */ case    1:  		/* stw R11, <#[R31 + 260]> */
		/* 8213ADCCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213ADCCh case    1:*/		return 0x8213ADD0;
		  /* 8213ADD0h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 8213ADD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213ADD0h case    2:*/		return 0x8213ADD4;
		  /* 8213ADD4h */ case    3:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213ADD4h case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213ADD4h case    3:*/		return 0x8213ADD8;
		  /* 8213ADD8h */ case    4:  		/* cmplw CR6, R11, R28 */
		/* 8213ADD8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213ADD8h case    4:*/		return 0x8213ADDC;
		  /* 8213ADDCh */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8213ADDCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213ADF0;  }
		/* 8213ADDCh case    5:*/		return 0x8213ADE0;
		  /* 8213ADE0h */ case    6:  		/* mr R3, R31 */
		/* 8213ADE0h case    6:*/		regs.R3 = regs.R31;
		/* 8213ADE0h case    6:*/		return 0x8213ADE4;
		  /* 8213ADE4h */ case    7:  		/* bl -45468 */
		/* 8213ADE4h case    7:*/		regs.LR = 0x8213ADE8; return 0x8212FC48;
		/* 8213ADE4h case    7:*/		return 0x8213ADE8;
		  /* 8213ADE8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8213ADE8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213ADE8h case    8:*/		return 0x8213ADEC;
		  /* 8213ADECh */ case    9:  		/* bc 12, CR0_LT, 204 */
		/* 8213ADECh case    9:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213ADECh case    9:*/		return 0x8213ADF0;
	}
	return 0x8213ADF0;
} // Block from 8213ADC8h-8213ADF0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213ADF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ADF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ADF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ADF0);
		  /* 8213ADF0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213ADF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213ADF0h case    0:*/		return 0x8213ADF4;
		  /* 8213ADF4h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213ADF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213ADF4h case    1:*/		return 0x8213ADF8;
		  /* 8213ADF8h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213ADF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213ADF8h case    2:*/		return 0x8213ADFC;
		  /* 8213ADFCh */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213ADFCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213ADFCh case    3:*/		return 0x8213AE00;
		  /* 8213AE00h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213AE00h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213ADC0;  }
		/* 8213AE00h case    4:*/		return 0x8213AE04;
	}
	return 0x8213AE04;
} // Block from 8213ADF0h-8213AE04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AE04);
		  /* 8213AE04h */ case    0:  		/* mr R3, R31 */
		/* 8213AE04h case    0:*/		regs.R3 = regs.R31;
		/* 8213AE04h case    0:*/		return 0x8213AE08;
		  /* 8213AE08h */ case    1:  		/* bl -353832 */
		/* 8213AE08h case    1:*/		regs.LR = 0x8213AE0C; return 0x820E47E0;
		/* 8213AE08h case    1:*/		return 0x8213AE0C;
		  /* 8213AE0Ch */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213AE0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213AE0Ch case    2:*/		return 0x8213AE10;
		  /* 8213AE10h */ case    3:  		/* li R30, 0 */
		/* 8213AE10h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213AE10h case    3:*/		return 0x8213AE14;
		  /* 8213AE14h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213AE14h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AE14h case    4:*/		return 0x8213AE18;
		  /* 8213AE18h */ case    5:  		/* bc 4, CR6_GT, 76 */
		/* 8213AE18h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213AE64;  }
		/* 8213AE18h case    5:*/		return 0x8213AE1C;
		  /* 8213AE1Ch */ case    6:  		/* li R29, 0 */
		/* 8213AE1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213AE1Ch case    6:*/		return 0x8213AE20;
		  /* 8213AE20h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213AE20h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213AE20h case    7:*/		return 0x8213AE24;
		  /* 8213AE24h */ case    8:  		/* stw R30, <#[R31 + 256]> */
		/* 8213AE24h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213AE24h case    8:*/		return 0x8213AE28;
		  /* 8213AE28h */ case    9:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213AE28h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213AE28h case    9:*/		return 0x8213AE2C;
		  /* 8213AE2Ch */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213AE2Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213AE2Ch case   10:*/		return 0x8213AE30;
		  /* 8213AE30h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213AE30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213AE30h case   11:*/		return 0x8213AE34;
		  /* 8213AE34h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213AE34h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213AE34h case   12:*/		return 0x8213AE38;
		  /* 8213AE38h */ case   13:  		/* cmplw CR6, R11, R28 */
		/* 8213AE38h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213AE38h case   13:*/		return 0x8213AE3C;
		  /* 8213AE3Ch */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 8213AE3Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213AE50;  }
		/* 8213AE3Ch case   14:*/		return 0x8213AE40;
		  /* 8213AE40h */ case   15:  		/* mr R3, R31 */
		/* 8213AE40h case   15:*/		regs.R3 = regs.R31;
		/* 8213AE40h case   15:*/		return 0x8213AE44;
		  /* 8213AE44h */ case   16:  		/* bl -44804 */
		/* 8213AE44h case   16:*/		regs.LR = 0x8213AE48; return 0x8212FF40;
		/* 8213AE44h case   16:*/		return 0x8213AE48;
		  /* 8213AE48h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213AE48h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213AE48h case   17:*/		return 0x8213AE4C;
		  /* 8213AE4Ch */ case   18:  		/* bc 12, CR0_LT, 108 */
		/* 8213AE4Ch case   18:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213AE4Ch case   18:*/		return 0x8213AE50;
	}
	return 0x8213AE50;
} // Block from 8213AE04h-8213AE50h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213AE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AE50);
		  /* 8213AE50h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213AE50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213AE50h case    0:*/		return 0x8213AE54;
		  /* 8213AE54h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213AE54h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213AE54h case    1:*/		return 0x8213AE58;
		  /* 8213AE58h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213AE58h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213AE58h case    2:*/		return 0x8213AE5C;
		  /* 8213AE5Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213AE5Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213AE5Ch case    3:*/		return 0x8213AE60;
		  /* 8213AE60h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213AE60h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213AE20;  }
		/* 8213AE60h case    4:*/		return 0x8213AE64;
	}
	return 0x8213AE64;
} // Block from 8213AE50h-8213AE64h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AE64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AE64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AE64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AE64);
		  /* 8213AE64h */ case    0:  		/* mr R3, R31 */
		/* 8213AE64h case    0:*/		regs.R3 = regs.R31;
		/* 8213AE64h case    0:*/		return 0x8213AE68;
		  /* 8213AE68h */ case    1:  		/* bl -353928 */
		/* 8213AE68h case    1:*/		regs.LR = 0x8213AE6C; return 0x820E47E0;
		/* 8213AE68h case    1:*/		return 0x8213AE6C;
		  /* 8213AE6Ch */ case    2:  		/* mr R3, R31 */
		/* 8213AE6Ch case    2:*/		regs.R3 = regs.R31;
		/* 8213AE6Ch case    2:*/		return 0x8213AE70;
		  /* 8213AE70h */ case    3:  		/* bl -212488 */
		/* 8213AE70h case    3:*/		regs.LR = 0x8213AE74; return 0x82107068;
		/* 8213AE70h case    3:*/		return 0x8213AE74;
		  /* 8213AE74h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213AE74h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213AE74h case    4:*/		return 0x8213AE78;
		  /* 8213AE78h */ case    5:  		/* bc 12, CR0_LT, 64 */
		/* 8213AE78h case    5:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213AE78h case    5:*/		return 0x8213AE7C;
		  /* 8213AE7Ch */ case    6:  		/* mr R3, R31 */
		/* 8213AE7Ch case    6:*/		regs.R3 = regs.R31;
		/* 8213AE7Ch case    6:*/		return 0x8213AE80;
		  /* 8213AE80h */ case    7:  		/* bl -210712 */
		/* 8213AE80h case    7:*/		regs.LR = 0x8213AE84; return 0x82107768;
		/* 8213AE80h case    7:*/		return 0x8213AE84;
		  /* 8213AE84h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8213AE84h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213AE84h case    8:*/		return 0x8213AE88;
		  /* 8213AE88h */ case    9:  		/* bc 12, CR0_LT, 48 */
		/* 8213AE88h case    9:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213AE88h case    9:*/		return 0x8213AE8C;
		  /* 8213AE8Ch */ case   10:  		/* mr R3, R31 */
		/* 8213AE8Ch case   10:*/		regs.R3 = regs.R31;
		/* 8213AE8Ch case   10:*/		return 0x8213AE90;
		  /* 8213AE90h */ case   11:  		/* bl -234032 */
		/* 8213AE90h case   11:*/		regs.LR = 0x8213AE94; return 0x82101C60;
		/* 8213AE90h case   11:*/		return 0x8213AE94;
		  /* 8213AE94h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8213AE94h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213AE94h case   12:*/		return 0x8213AE98;
		  /* 8213AE98h */ case   13:  		/* bc 12, CR0_LT, 32 */
		/* 8213AE98h case   13:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213AE98h case   13:*/		return 0x8213AE9C;
		  /* 8213AE9Ch */ case   14:  		/* mr R3, R31 */
		/* 8213AE9Ch case   14:*/		regs.R3 = regs.R31;
		/* 8213AE9Ch case   14:*/		return 0x8213AEA0;
		  /* 8213AEA0h */ case   15:  		/* bl -199920 */
		/* 8213AEA0h case   15:*/		regs.LR = 0x8213AEA4; return 0x8210A1B0;
		/* 8213AEA0h case   15:*/		return 0x8213AEA4;
		  /* 8213AEA4h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213AEA4h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213AEA4h case   16:*/		return 0x8213AEA8;
		  /* 8213AEA8h */ case   17:  		/* bc 12, CR0_LT, 16 */
		/* 8213AEA8h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213AEB8;  }
		/* 8213AEA8h case   17:*/		return 0x8213AEAC;
		  /* 8213AEACh */ case   18:  		/* mr R3, R31 */
		/* 8213AEACh case   18:*/		regs.R3 = regs.R31;
		/* 8213AEACh case   18:*/		return 0x8213AEB0;
		  /* 8213AEB0h */ case   19:  		/* bl -354000 */
		/* 8213AEB0h case   19:*/		regs.LR = 0x8213AEB4; return 0x820E47E0;
		/* 8213AEB0h case   19:*/		return 0x8213AEB4;
		  /* 8213AEB4h */ case   20:  		/* li R3, 0 */
		/* 8213AEB4h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213AEB4h case   20:*/		return 0x8213AEB8;
	}
	return 0x8213AEB8;
} // Block from 8213AE64h-8213AEB8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213AEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AEB8);
		  /* 8213AEB8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8213AEB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213AEB8h case    0:*/		return 0x8213AEBC;
		  /* 8213AEBCh */ case    1:  		/* b -695316 */
		/* 8213AEBCh case    1:*/		return 0x820912A8;
		/* 8213AEBCh case    1:*/		return 0x8213AEC0;
	}
	return 0x8213AEC0;
} // Block from 8213AEB8h-8213AEC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213AEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AEC0);
		  /* 8213AEC0h */ case    0:  		/* mfspr R12, LR */
		/* 8213AEC0h case    0:*/		regs.R12 = regs.LR;
		/* 8213AEC0h case    0:*/		return 0x8213AEC4;
		  /* 8213AEC4h */ case    1:  		/* bl -695460 */
		/* 8213AEC4h case    1:*/		regs.LR = 0x8213AEC8; return 0x82091220;
		/* 8213AEC4h case    1:*/		return 0x8213AEC8;
		  /* 8213AEC8h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8213AEC8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8213AEC8h case    2:*/		return 0x8213AECC;
		  /* 8213AECCh */ case    3:  		/* stwu R1, <#[R1 - 496]> */
		/* 8213AECCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE10);
		/* 8213AECCh case    3:*/		return 0x8213AED0;
		  /* 8213AED0h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 8213AED0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8213AED0h case    4:*/		return 0x8213AED4;
		  /* 8213AED4h */ case    5:  		/* li R14, 0 */
		/* 8213AED4h case    5:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 8213AED4h case    5:*/		return 0x8213AED8;
		  /* 8213AED8h */ case    6:  		/* mr R31, R3 */
		/* 8213AED8h case    6:*/		regs.R31 = regs.R3;
		/* 8213AED8h case    6:*/		return 0x8213AEDC;
		  /* 8213AEDCh */ case    7:  		/* mr R17, R14 */
		/* 8213AEDCh case    7:*/		regs.R17 = regs.R14;
		/* 8213AEDCh case    7:*/		return 0x8213AEE0;
		  /* 8213AEE0h */ case    8:  		/* stw R14, <#[R1 + 96]> */
		/* 8213AEE0h case    8:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000060) );
		/* 8213AEE0h case    8:*/		return 0x8213AEE4;
		  /* 8213AEE4h */ case    9:  		/* mr R9, R14 */
		/* 8213AEE4h case    9:*/		regs.R9 = regs.R14;
		/* 8213AEE4h case    9:*/		return 0x8213AEE8;
		  /* 8213AEE8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8213AEE8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AEE8h case   10:*/		return 0x8213AEEC;
		  /* 8213AEECh */ case   11:  		/* bc 4, CR6_GT, 64 */
		/* 8213AEECh case   11:*/		if ( !regs.CR[6].gt ) { return 0x8213AF2C;  }
		/* 8213AEECh case   11:*/		return 0x8213AEF0;
		  /* 8213AEF0h */ case   12:  		/* mr R10, R14 */
		/* 8213AEF0h case   12:*/		regs.R10 = regs.R14;
		/* 8213AEF0h case   12:*/		return 0x8213AEF4;
		  /* 8213AEF4h */ case   13:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213AEF4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213AEF4h case   13:*/		return 0x8213AEF8;
		  /* 8213AEF8h */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213AEF8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213AEF8h case   14:*/		return 0x8213AEFC;
		  /* 8213AEFCh */ case   15:  		/* lwz R8, <#[R11 + 4]> */
		/* 8213AEFCh case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8213AEFCh case   15:*/		return 0x8213AF00;
		  /* 8213AF00h */ case   16:  		/* stw R14, <#[R11 + 48]> */
		/* 8213AF00h case   16:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R11 + 0x00000030) );
		/* 8213AF00h case   16:*/		return 0x8213AF04;
		  /* 8213AF04h */ case   17:  		/* lwz R7, <#[R31 + 136]> */
		/* 8213AF04h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000088) );
		/* 8213AF04h case   17:*/		return 0x8213AF08;
		  /* 8213AF08h */ case   18:  		/* cmplw CR6, R8, R7 */
		/* 8213AF08h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8213AF08h case   18:*/		return 0x8213AF0C;
		  /* 8213AF0Ch */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 8213AF0Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x8213AF18;  }
		/* 8213AF0Ch case   19:*/		return 0x8213AF10;
		  /* 8213AF10h */ case   20:  		/* li R8, -1 */
		/* 8213AF10h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 8213AF10h case   20:*/		return 0x8213AF14;
		  /* 8213AF14h */ case   21:  		/* stw R8, <#[R11 + 12]> */
		/* 8213AF14h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213AF14h case   21:*/		return 0x8213AF18;
	}
	return 0x8213AF18;
} // Block from 8213AEC0h-8213AF18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213AF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AF18);
		  /* 8213AF18h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213AF18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213AF18h case    0:*/		return 0x8213AF1C;
		  /* 8213AF1Ch */ case    1:  		/* addi R9, R9, 1 */
		/* 8213AF1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213AF1Ch case    1:*/		return 0x8213AF20;
		  /* 8213AF20h */ case    2:  		/* addi R10, R10, 4 */
		/* 8213AF20h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213AF20h case    2:*/		return 0x8213AF24;
		  /* 8213AF24h */ case    3:  		/* cmplw CR6, R9, R11 */
		/* 8213AF24h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8213AF24h case    3:*/		return 0x8213AF28;
		  /* 8213AF28h */ case    4:  		/* bc 12, CR6_LT, -52 */
		/* 8213AF28h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213AEF4;  }
		/* 8213AF28h case    4:*/		return 0x8213AF2C;
	}
	return 0x8213AF2C;
} // Block from 8213AF18h-8213AF2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AF2C);
		  /* 8213AF2Ch */ case    0:  		/* lwz R8, <#[R31 + 76]> */
		/* 8213AF2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213AF2Ch case    0:*/		return 0x8213AF30;
		  /* 8213AF30h */ case    1:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213AF30h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213AF30h case    1:*/		return 0x8213AF34;
		  /* 8213AF34h */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 8213AF34h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8213AF34h case    2:*/		return 0x8213AF38;
		  /* 8213AF38h */ case    3:  		/* bc 4, CR6_LT, 120 */
		/* 8213AF38h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8213AFB0;  }
		/* 8213AF38h case    3:*/		return 0x8213AF3C;
		  /* 8213AF3Ch */ case    4:  		/* rlwinm R7, R8, 2, 0, 29 */
		/* 8213AF3Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 8213AF3Ch case    4:*/		return 0x8213AF40;
		  /* 8213AF40h */ case    5:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213AF40h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213AF40h case    5:*/		return 0x8213AF44;
		  /* 8213AF44h */ case    6:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8213AF44h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8213AF44h case    6:*/		return 0x8213AF48;
		  /* 8213AF48h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213AF48h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AF48h case    7:*/		return 0x8213AF4C;
		  /* 8213AF4Ch */ case    8:  		/* bc 12, CR6_EQ, 80 */
		/* 8213AF4Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8213AF9C;  }
		/* 8213AF4Ch case    8:*/		return 0x8213AF50;
		  /* 8213AF50h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 8213AF50h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213AF50h case    9:*/		return 0x8213AF54;
		  /* 8213AF54h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8213AF54h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213AF54h case   10:*/		return 0x8213AF58;
		  /* 8213AF58h */ case   11:  		/* bc 12, CR6_EQ, 68 */
		/* 8213AF58h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213AF9C;  }
		/* 8213AF58h case   11:*/		return 0x8213AF5C;
		  /* 8213AF5Ch */ case   12:  		/* lwz R10, <#[R11 + 12]> */
		/* 8213AF5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213AF5Ch case   12:*/		return 0x8213AF60;
		  /* 8213AF60h */ case   13:  		/* mr R9, R14 */
		/* 8213AF60h case   13:*/		regs.R9 = regs.R14;
		/* 8213AF60h case   13:*/		return 0x8213AF64;
		  /* 8213AF64h */ case   14:  		/* cmplwi CR6, R10, 0 */
		/* 8213AF64h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213AF64h case   14:*/		return 0x8213AF68;
		  /* 8213AF68h */ case   15:  		/* bc 4, CR6_GT, 52 */
		/* 8213AF68h case   15:*/		if ( !regs.CR[6].gt ) { return 0x8213AF9C;  }
		/* 8213AF68h case   15:*/		return 0x8213AF6C;
		  /* 8213AF6Ch */ case   16:  		/* mr R10, R14 */
		/* 8213AF6Ch case   16:*/		regs.R10 = regs.R14;
		/* 8213AF6Ch case   16:*/		return 0x8213AF70;
		  /* 8213AF70h */ case   17:  		/* lwz R6, <#[R11 + 16]> */
		/* 8213AF70h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 8213AF70h case   17:*/		return 0x8213AF74;
		  /* 8213AF74h */ case   18:  		/* addi R9, R9, 1 */
		/* 8213AF74h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213AF74h case   18:*/		return 0x8213AF78;
		  /* 8213AF78h */ case   19:  		/* lwz R5, <#[R31 + 20]> */
		/* 8213AF78h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 8213AF78h case   19:*/		return 0x8213AF7C;
		  /* 8213AF7Ch */ case   20:  		/* lwzx R6, <#[R10 + R6]> */
		/* 8213AF7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8213AF7Ch case   20:*/		return 0x8213AF80;
		  /* 8213AF80h */ case   21:  		/* addi R10, R10, 4 */
		/* 8213AF80h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213AF80h case   21:*/		return 0x8213AF84;
		  /* 8213AF84h */ case   22:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213AF84h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213AF84h case   22:*/		return 0x8213AF88;
		  /* 8213AF88h */ case   23:  		/* lwzx R6, <#[R6 + R5]> */
		/* 8213AF88h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 8213AF88h case   23:*/		return 0x8213AF8C;
		  /* 8213AF8Ch */ case   24:  		/* stw R8, <#[R6 + 72]> */
		/* 8213AF8Ch case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000048) );
		/* 8213AF8Ch case   24:*/		return 0x8213AF90;
		  /* 8213AF90h */ case   25:  		/* lwz R6, <#[R11 + 12]> */
		/* 8213AF90h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213AF90h case   25:*/		return 0x8213AF94;
		  /* 8213AF94h */ case   26:  		/* cmplw CR6, R9, R6 */
		/* 8213AF94h case   26:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8213AF94h case   26:*/		return 0x8213AF98;
		  /* 8213AF98h */ case   27:  		/* bc 12, CR6_LT, -40 */
		/* 8213AF98h case   27:*/		if ( regs.CR[6].lt ) { return 0x8213AF70;  }
		/* 8213AF98h case   27:*/		return 0x8213AF9C;
	}
	return 0x8213AF9C;
} // Block from 8213AF2Ch-8213AF9Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213AF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AF9C);
		  /* 8213AF9Ch */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213AF9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213AF9Ch case    0:*/		return 0x8213AFA0;
		  /* 8213AFA0h */ case    1:  		/* addi R8, R8, 1 */
		/* 8213AFA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213AFA0h case    1:*/		return 0x8213AFA4;
		  /* 8213AFA4h */ case    2:  		/* addi R7, R7, 4 */
		/* 8213AFA4h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213AFA4h case    2:*/		return 0x8213AFA8;
		  /* 8213AFA8h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 8213AFA8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8213AFA8h case    3:*/		return 0x8213AFAC;
		  /* 8213AFACh */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 8213AFACh case    4:*/		if ( regs.CR[6].lt ) { return 0x8213AF40;  }
		/* 8213AFACh case    4:*/		return 0x8213AFB0;
	}
	return 0x8213AFB0;
} // Block from 8213AF9Ch-8213AFB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213AFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AFB0);
		  /* 8213AFB0h */ case    0:  		/* lwz R21, <#[R31 + 552]> */
		/* 8213AFB0h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R31 + 0x00000228) );
		/* 8213AFB0h case    0:*/		return 0x8213AFB4;
		  /* 8213AFB4h */ case    1:  		/* lwz R22, <#[R31 + 76]> */
		/* 8213AFB4h case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213AFB4h case    1:*/		return 0x8213AFB8;
		  /* 8213AFB8h */ case    2:  		/* cmplw CR6, R22, R21 */
		/* 8213AFB8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 8213AFB8h case    2:*/		return 0x8213AFBC;
		  /* 8213AFBCh */ case    3:  		/* stw R21, <#[R1 + 108]> */
		/* 8213AFBCh case    3:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000006C) );
		/* 8213AFBCh case    3:*/		return 0x8213AFC0;
		  /* 8213AFC0h */ case    4:  		/* stw R22, <#[R1 + 100]> */
		/* 8213AFC0h case    4:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 8213AFC0h case    4:*/		return 0x8213AFC4;
		  /* 8213AFC4h */ case    5:  		/* bc 4, CR6_LT, 2456 */
		/* 8213AFC4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8213B95C;  }
		/* 8213AFC4h case    5:*/		return 0x8213AFC8;
		  /* 8213AFC8h */ case    6:  		/* lis R11, -32256 */
		/* 8213AFC8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213AFC8h case    6:*/		return 0x8213AFCC;
		  /* 8213AFCCh */ case    7:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8213AFCCh case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8213AFCCh case    7:*/		return 0x8213AFD0;
		  /* 8213AFD0h */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213AFD0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213AFD0h case    8:*/		return 0x8213AFD4;
		  /* 8213AFD4h */ case    9:  		/* rlwinm R10, R22, 2, 0, 29 */
		/* 8213AFD4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R22);
		/* 8213AFD4h case    9:*/		return 0x8213AFD8;
		  /* 8213AFD8h */ case   10:  		/* lwzx R19, <#[R10 + R11]> */
		/* 8213AFD8h case   10:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213AFD8h case   10:*/		return 0x8213AFDC;
		  /* 8213AFDCh */ case   11:  		/* cmplwi CR6, R19, 0 */
		/* 8213AFDCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 8213AFDCh case   11:*/		return 0x8213AFE0;
	}
	return 0x8213AFE0;
} // Block from 8213AFB0h-8213AFE0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213AFE0h
// Function '?CoIssue@CPSLegacyProgram@D3DXShader@@MAAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213AFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213AFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213AFE0);
		  /* 8213AFE0h */ case    0:  		/* bc 12, CR6_EQ, 2412 */
		/* 8213AFE0h case    0:*/		if ( regs.CR[6].eq ) { return 0x8213B94C;  }
		/* 8213AFE0h case    0:*/		return 0x8213AFE4;
		  /* 8213AFE4h */ case    1:  		/* lwz R11, <#[R19]> */
		/* 8213AFE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8213AFE4h case    1:*/		return 0x8213AFE8;
		  /* 8213AFE8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213AFE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213AFE8h case    2:*/		return 0x8213AFEC;
		  /* 8213AFECh */ case    3:  		/* bc 12, CR6_EQ, 2400 */
		/* 8213AFECh case    3:*/		if ( regs.CR[6].eq ) { return 0x8213B94C;  }
		/* 8213AFECh case    3:*/		return 0x8213AFF0;
		  /* 8213AFF0h */ case    4:  		/* li R3, 116 */
		/* 8213AFF0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213AFF0h case    4:*/		return 0x8213AFF4;
		  /* 8213AFF4h */ case    5:  		/* bl -256604 */
		/* 8213AFF4h case    5:*/		regs.LR = 0x8213AFF8; return 0x820FC598;
		/* 8213AFF4h case    5:*/		return 0x8213AFF8;
		  /* 8213AFF8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8213AFF8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213AFF8h case    6:*/		return 0x8213AFFC;
		  /* 8213AFFCh */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8213AFFCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8213B008;  }
		/* 8213AFFCh case    7:*/		return 0x8213B000;
	}
	return 0x8213B000;
} // Block from 8213AFE0h-8213B000h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213B000h
// Function '?IsEntry@IRInst@XGRAPHICS@@UBA?B_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B000);
		  /* 8213B000h */ case    0:  		/* bl -258400 */
		/* 8213B000h case    0:*/		regs.LR = 0x8213B004; return 0x820FBEA0;
		/* 8213B000h case    0:*/		return 0x8213B004;
		  /* 8213B004h */ case    1:  		/* b 8 */
		/* 8213B004h case    1:*/		return 0x8213B00C;
		/* 8213B004h case    1:*/		return 0x8213B008;
	}
	return 0x8213B008;
} // Block from 8213B000h-8213B008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213B008h
// Function '?EmitVersion@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B008);
		  /* 8213B008h */ case    0:  		/* mr R3, R14 */
		/* 8213B008h case    0:*/		regs.R3 = regs.R14;
		/* 8213B008h case    0:*/		return 0x8213B00C;
	}
	return 0x8213B00C;
} // Block from 8213B008h-8213B00Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B00C);
		  /* 8213B00Ch */ case    0:  		/* stw R3, <#[R1 + 96]> */
		/* 8213B00Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B00Ch case    0:*/		return 0x8213B010;
		  /* 8213B010h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8213B010h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213B010h case    1:*/		return 0x8213B014;
		  /* 8213B014h */ case    2:  		/* bc 12, CR6_EQ, 476 */
		/* 8213B014h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B014h case    2:*/		return 0x8213B018;
		  /* 8213B018h */ case    3:  		/* mr R4, R19 */
		/* 8213B018h case    3:*/		regs.R4 = regs.R19;
		/* 8213B018h case    3:*/		return 0x8213B01C;
		  /* 8213B01Ch */ case    4:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 8213B01Ch case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 8213B01Ch case    4:*/		return 0x8213B020;
		  /* 8213B020h */ case    5:  		/* bl -255696 */
		/* 8213B020h case    5:*/		regs.LR = 0x8213B024; return 0x820FC950;
		/* 8213B020h case    5:*/		return 0x8213B024;
		  /* 8213B024h */ case    6:  		/* or. R21, R3, R3 */
		/* 8213B024h case    6:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8213B024h case    6:*/		return 0x8213B028;
		  /* 8213B028h */ case    7:  		/* bc 12, CR0_LT, 2428 */
		/* 8213B028h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213B9A4;  }
		/* 8213B028h case    7:*/		return 0x8213B02C;
		  /* 8213B02Ch */ case    8:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B02Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B02Ch case    8:*/		return 0x8213B030;
		  /* 8213B030h */ case    9:  		/* cmplwi CR6, R11, 512 */
		/* 8213B030h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213B030h case    9:*/		return 0x8213B034;
		  /* 8213B034h */ case   10:  		/* bc 4, CR6_LT, 444 */
		/* 8213B034h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8213B1F0;  }
		/* 8213B034h case   10:*/		return 0x8213B038;
		  /* 8213B038h */ case   11:  		/* lwz R11, <#[R19]> */
		/* 8213B038h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8213B038h case   11:*/		return 0x8213B03C;
		  /* 8213B03Ch */ case   12:  		/* lis R10, 20480 */
		/* 8213B03Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 8213B03Ch case   12:*/		return 0x8213B040;
		  /* 8213B040h */ case   13:  		/* mr R16, R14 */
		/* 8213B040h case   13:*/		regs.R16 = regs.R14;
		/* 8213B040h case   13:*/		return 0x8213B044;
		  /* 8213B044h */ case   14:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213B044h case   14:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213B044h case   14:*/		return 0x8213B048;
		  /* 8213B048h */ case   15:  		/* mr R15, R14 */
		/* 8213B048h case   15:*/		regs.R15 = regs.R14;
		/* 8213B048h case   15:*/		return 0x8213B04C;
		  /* 8213B04Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8213B04Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213B04Ch case   16:*/		return 0x8213B050;
	}
	return 0x8213B050;
} // Block from 8213B00Ch-8213B050h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213B050h
// Function '?EmitDCL@CPSLegacyProgram@D3DXShader@@MAAJPAVCArgument@2@PAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B050);
		  /* 8213B050h */ case    0:  		/* bc 4, CR6_EQ, 428 */
		/* 8213B050h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8213B1FC;  }
		/* 8213B050h case    0:*/		return 0x8213B054;
		  /* 8213B054h */ case    1:  		/* lwz R10, <#[R19 + 12]> */
		/* 8213B054h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000000C) );
		/* 8213B054h case    1:*/		return 0x8213B058;
		  /* 8213B058h */ case    2:  		/* cmplwi CR6, R10, 1 */
		/* 8213B058h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8213B058h case    2:*/		return 0x8213B05C;
		  /* 8213B05Ch */ case    3:  		/* bc 4, CR6_EQ, 416 */
		/* 8213B05Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213B1FC;  }
		/* 8213B05Ch case    3:*/		return 0x8213B060;
		  /* 8213B060h */ case    4:  		/* lwz R7, <#[R19 + 16]> */
		/* 8213B060h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R19 + 0x00000010) );
		/* 8213B060h case    4:*/		return 0x8213B064;
		  /* 8213B064h */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B064h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B064h case    5:*/		return 0x8213B068;
		  /* 8213B068h */ case    6:  		/* lwz R9, <#[R7]> */
		/* 8213B068h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 8213B068h case    6:*/		return 0x8213B06C;
		  /* 8213B06Ch */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213B06Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213B06Ch case    7:*/		return 0x8213B070;
		  /* 8213B070h */ case    8:  		/* lwzx R30, <#[R9 + R10]> */
		/* 8213B070h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213B070h case    8:*/		return 0x8213B074;
		  /* 8213B074h */ case    9:  		/* lwz R10, <#[R30 + 16]> */
		/* 8213B074h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B074h case    9:*/		return 0x8213B078;
		  /* 8213B078h */ case   10:  		/* cmplwi CR6, R10, 3 */
		/* 8213B078h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213B078h case   10:*/		return 0x8213B07C;
		  /* 8213B07Ch */ case   11:  		/* bc 4, CR6_EQ, 384 */
		/* 8213B07Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8213B1FC;  }
		/* 8213B07Ch case   11:*/		return 0x8213B080;
		  /* 8213B080h */ case   12:  		/* addi R11, R1, 112 */
		/* 8213B080h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8213B080h case   12:*/		return 0x8213B084;
		  /* 8213B084h */ case   13:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213B084h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B084h case   13:*/		return 0x8213B088;
		  /* 8213B088h */ case   14:  		/* addi R10, R1, 104 */
		/* 8213B088h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 8213B088h case   14:*/		return 0x8213B08C;
		  /* 8213B08Ch */ case   15:  		/* lwz R6, <#[R1 + 108]> */
		/* 8213B08Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000006C) );
		/* 8213B08Ch case   15:*/		return 0x8213B090;
		  /* 8213B090h */ case   16:  		/* stw R11, <#[R1 + 84]> */
		/* 8213B090h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8213B090h case   16:*/		return 0x8213B094;
		  /* 8213B094h */ case   17:  		/* addi R9, R1, 160 */
		/* 8213B094h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 8213B094h case   17:*/		return 0x8213B098;
		  /* 8213B098h */ case   18:  		/* li R8, 1 */
		/* 8213B098h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8213B098h case   18:*/		return 0x8213B09C;
		  /* 8213B09Ch */ case   19:  		/* lwz R5, <#[R1 + 100]> */
		/* 8213B09Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 8213B09Ch case   19:*/		return 0x8213B0A0;
		  /* 8213B0A0h */ case   20:  		/* mr R3, R31 */
		/* 8213B0A0h case   20:*/		regs.R3 = regs.R31;
		/* 8213B0A0h case   20:*/		return 0x8213B0A4;
		  /* 8213B0A4h */ case   21:  		/* bl -19700 */
		/* 8213B0A4h case   21:*/		regs.LR = 0x8213B0A8; return 0x821363B0;
		/* 8213B0A4h case   21:*/		return 0x8213B0A8;
		  /* 8213B0A8h */ case   22:  		/* lwz R11, <#[R1 + 112]> */
		/* 8213B0A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8213B0A8h case   22:*/		return 0x8213B0AC;
		  /* 8213B0ACh */ case   23:  		/* mr R3, R31 */
		/* 8213B0ACh case   23:*/		regs.R3 = regs.R31;
		/* 8213B0ACh case   23:*/		return 0x8213B0B0;
	}
	return 0x8213B0B0;
} // Block from 8213B050h-8213B0B0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213B0B0h
// Function '?FindInput@CPSLegacyProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B0B0);
		  /* 8213B0B0h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 8213B0B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213B0B0h case    0:*/		return 0x8213B0B4;
		  /* 8213B0B4h */ case    1:  		/* bc 12, CR6_EQ, 448 */
		/* 8213B0B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213B274;  }
		/* 8213B0B4h case    1:*/		return 0x8213B0B8;
		  /* 8213B0B8h */ case    2:  		/* li R6, 3 */
		/* 8213B0B8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8213B0B8h case    2:*/		return 0x8213B0BC;
		  /* 8213B0BCh */ case    3:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213B0BCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B0BCh case    3:*/		return 0x8213B0C0;
		  /* 8213B0C0h */ case    4:  		/* li R5, 0 */
		/* 8213B0C0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213B0C0h case    4:*/		return 0x8213B0C4;
		  /* 8213B0C4h */ case    5:  		/* fmr FR1, FR31 */
		/* 8213B0C4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213B0C4h case    5:*/		return 0x8213B0C8;
		  /* 8213B0C8h */ case    6:  		/* bl -253600 */
		/* 8213B0C8h case    6:*/		regs.LR = 0x8213B0CC; return 0x820FD228;
		/* 8213B0C8h case    6:*/		return 0x8213B0CC;
		  /* 8213B0CCh */ case    7:  		/* mr R29, R3 */
		/* 8213B0CCh case    7:*/		regs.R29 = regs.R3;
		/* 8213B0CCh case    7:*/		return 0x8213B0D0;
		  /* 8213B0D0h */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 8213B0D0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213B0D0h case    8:*/		return 0x8213B0D4;
		  /* 8213B0D4h */ case    9:  		/* bc 12, CR6_EQ, 284 */
		/* 8213B0D4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B0D4h case    9:*/		return 0x8213B0D8;
		  /* 8213B0D8h */ case   10:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B0D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B0D8h case   10:*/		return 0x8213B0DC;
		  /* 8213B0DCh */ case   11:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213B0DCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213B0DCh case   11:*/		return 0x8213B0E0;
		  /* 8213B0E0h */ case   12:  		/* mr R4, R30 */
		/* 8213B0E0h case   12:*/		regs.R4 = regs.R30;
		/* 8213B0E0h case   12:*/		return 0x8213B0E4;
		  /* 8213B0E4h */ case   13:  		/* lwzx R30, <#[R10 + R11]> */
		/* 8213B0E4h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B0E4h case   13:*/		return 0x8213B0E8;
		  /* 8213B0E8h */ case   14:  		/* mr R3, R30 */
		/* 8213B0E8h case   14:*/		regs.R3 = regs.R30;
		/* 8213B0E8h case   14:*/		return 0x8213B0EC;
		  /* 8213B0ECh */ case   15:  		/* bl -255300 */
		/* 8213B0ECh case   15:*/		regs.LR = 0x8213B0F0; return 0x820FCBA8;
		/* 8213B0ECh case   15:*/		return 0x8213B0F0;
		  /* 8213B0F0h */ case   16:  		/* lwz R10, <#[R31 + 136]> */
		/* 8213B0F0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B0F0h case   16:*/		return 0x8213B0F4;
		  /* 8213B0F4h */ case   17:  		/* li R11, 3 */
		/* 8213B0F4h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8213B0F4h case   17:*/		return 0x8213B0F8;
		  /* 8213B0F8h */ case   18:  		/* stw R14, <#[R30 + 60]> */
		/* 8213B0F8h case   18:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B0F8h case   18:*/		return 0x8213B0FC;
		  /* 8213B0FCh */ case   19:  		/* li R3, 116 */
		/* 8213B0FCh case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213B0FCh case   19:*/		return 0x8213B100;
		  /* 8213B100h */ case   20:  		/* stw R11, <#[R30 + 16]> */
		/* 8213B100h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B100h case   20:*/		return 0x8213B104;
		  /* 8213B104h */ case   21:  		/* stw R10, <#[R30 + 4]> */
		/* 8213B104h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8213B104h case   21:*/		return 0x8213B108;
	}
	return 0x8213B108;
} // Block from 8213B0B0h-8213B108h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213B108h
// Function '?FindOutput@CPSLegacyProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1PAH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B108);
		  /* 8213B108h */ case    0:  		/* bl -256880 */
		/* 8213B108h case    0:*/		regs.LR = 0x8213B10C; return 0x820FC598;
		/* 8213B108h case    0:*/		return 0x8213B10C;
		  /* 8213B10Ch */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 8213B10Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213B10Ch case    1:*/		return 0x8213B110;
		  /* 8213B110h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8213B110h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213B120;  }
		/* 8213B110h case    2:*/		return 0x8213B114;
		  /* 8213B114h */ case    3:  		/* bl -258676 */
		/* 8213B114h case    3:*/		regs.LR = 0x8213B118; return 0x820FBEA0;
		/* 8213B114h case    3:*/		return 0x8213B118;
		  /* 8213B118h */ case    4:  		/* mr R30, R3 */
		/* 8213B118h case    4:*/		regs.R30 = regs.R3;
		/* 8213B118h case    4:*/		return 0x8213B11C;
		  /* 8213B11Ch */ case    5:  		/* b 8 */
		/* 8213B11Ch case    5:*/		return 0x8213B124;
		/* 8213B11Ch case    5:*/		return 0x8213B120;
	}
	return 0x8213B120;
} // Block from 8213B108h-8213B120h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213B120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B120);
		  /* 8213B120h */ case    0:  		/* mr R30, R14 */
		/* 8213B120h case    0:*/		regs.R30 = regs.R14;
		/* 8213B120h case    0:*/		return 0x8213B124;
	}
	return 0x8213B124;
} // Block from 8213B120h-8213B124h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B124);
		  /* 8213B124h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8213B124h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213B124h case    0:*/		return 0x8213B128;
		  /* 8213B128h */ case    1:  		/* bc 12, CR6_EQ, 200 */
		/* 8213B128h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B128h case    1:*/		return 0x8213B12C;
		  /* 8213B12Ch */ case    2:  		/* lis R4, 4096 */
		/* 8213B12Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8213B12Ch case    2:*/		return 0x8213B130;
		  /* 8213B130h */ case    3:  		/* li R7, 0 */
		/* 8213B130h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213B130h case    3:*/		return 0x8213B134;
		  /* 8213B134h */ case    4:  		/* li R6, 1 */
		/* 8213B134h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8213B134h case    4:*/		return 0x8213B138;
		  /* 8213B138h */ case    5:  		/* li R5, 1 */
		/* 8213B138h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8213B138h case    5:*/		return 0x8213B13C;
		  /* 8213B13Ch */ case    6:  		/* ori R4, R4, 1 */
		/* 8213B13Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8213B13Ch case    6:*/		return 0x8213B140;
		  /* 8213B140h */ case    7:  		/* mr R3, R30 */
		/* 8213B140h case    7:*/		regs.R3 = regs.R30;
		/* 8213B140h case    7:*/		return 0x8213B144;
		  /* 8213B144h */ case    8:  		/* bl -256788 */
		/* 8213B144h case    8:*/		regs.LR = 0x8213B148; return 0x820FC630;
		/* 8213B144h case    8:*/		return 0x8213B148;
		  /* 8213B148h */ case    9:  		/* or. R21, R3, R3 */
		/* 8213B148h case    9:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8213B148h case    9:*/		return 0x8213B14C;
		  /* 8213B14Ch */ case   10:  		/* bc 12, CR0_LT, 2256 */
		/* 8213B14Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x8213BA1C;  }
		/* 8213B14Ch case   10:*/		return 0x8213B150;
		  /* 8213B150h */ case   11:  		/* mr R4, R19 */
		/* 8213B150h case   11:*/		regs.R4 = regs.R19;
		/* 8213B150h case   11:*/		return 0x8213B154;
		  /* 8213B154h */ case   12:  		/* mr R3, R30 */
		/* 8213B154h case   12:*/		regs.R3 = regs.R30;
		/* 8213B154h case   12:*/		return 0x8213B158;
		  /* 8213B158h */ case   13:  		/* bl -258664 */
		/* 8213B158h case   13:*/		regs.LR = 0x8213B15C; return 0x820FBEF0;
		/* 8213B158h case   13:*/		return 0x8213B15C;
		  /* 8213B15Ch */ case   14:  		/* or. R21, R3, R3 */
		/* 8213B15Ch case   14:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8213B15Ch case   14:*/		return 0x8213B160;
		  /* 8213B160h */ case   15:  		/* bc 12, CR0_LT, 2236 */
		/* 8213B160h case   15:*/		if ( regs.CR[0].lt ) { return 0x8213BA1C;  }
		/* 8213B160h case   15:*/		return 0x8213B164;
		  /* 8213B164h */ case   16:  		/* lwz R11, <#[R19 + 16]> */
		/* 8213B164h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000010) );
		/* 8213B164h case   16:*/		return 0x8213B168;
		  /* 8213B168h */ case   17:  		/* mr R3, R31 */
		/* 8213B168h case   17:*/		regs.R3 = regs.R31;
		/* 8213B168h case   17:*/		return 0x8213B16C;
		  /* 8213B16Ch */ case   18:  		/* lwz R10, <#[R30 + 16]> */
		/* 8213B16Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B16Ch case   18:*/		return 0x8213B170;
		  /* 8213B170h */ case   19:  		/* lwz R4, <#[R1 + 96]> */
		/* 8213B170h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B170h case   19:*/		return 0x8213B174;
		  /* 8213B174h */ case   20:  		/* mr R18, R4 */
		/* 8213B174h case   20:*/		regs.R18 = regs.R4;
		/* 8213B174h case   20:*/		return 0x8213B178;
	}
	return 0x8213B178;
} // Block from 8213B124h-8213B178h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213B178h
// Function '?MarkCoIssues@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@IIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B178);
		  /* 8213B178h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8213B178h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213B178h case    0:*/		return 0x8213B17C;
		  /* 8213B17Ch */ case    1:  		/* stw R11, <#[R10]> */
		/* 8213B17Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213B17Ch case    1:*/		return 0x8213B180;
		  /* 8213B180h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8213B180h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8213B180h case    2:*/		return 0x8213B184;
		  /* 8213B184h */ case    3:  		/* stw R29, <#[R11]> */
		/* 8213B184h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213B184h case    3:*/		return 0x8213B188;
		  /* 8213B188h */ case    4:  		/* lwz R11, <#[R4 + 16]> */
		/* 8213B188h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8213B188h case    4:*/		return 0x8213B18C;
		  /* 8213B18Ch */ case    5:  		/* stw R29, <#[R11]> */
		/* 8213B18Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213B18Ch case    5:*/		return 0x8213B190;
		  /* 8213B190h */ case    6:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213B190h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B190h case    6:*/		return 0x8213B194;
		  /* 8213B194h */ case    7:  		/* lwz R10, <#[R31 + 552]> */
		/* 8213B194h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B194h case    7:*/		return 0x8213B198;
		  /* 8213B198h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213B198h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213B198h case    8:*/		return 0x8213B19C;
		  /* 8213B19Ch */ case    9:  		/* stwx R4, <#[R10 + R11]> */
		/* 8213B19Ch case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B19Ch case    9:*/		return 0x8213B1A0;
		  /* 8213B1A0h */ case   10:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B1A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B1A0h case   10:*/		return 0x8213B1A4;
		  /* 8213B1A4h */ case   11:  		/* addi R11, R11, 1 */
		/* 8213B1A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213B1A4h case   11:*/		return 0x8213B1A8;
		  /* 8213B1A8h */ case   12:  		/* stw R11, <#[R31 + 552]> */
		/* 8213B1A8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B1A8h case   12:*/		return 0x8213B1AC;
		  /* 8213B1ACh */ case   13:  		/* bl -254196 */
		/* 8213B1ACh case   13:*/		regs.LR = 0x8213B1B0; return 0x820FD0B8;
		/* 8213B1ACh case   13:*/		return 0x8213B1B0;
		  /* 8213B1B0h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8213B1B0h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B1B0h case   14:*/		return 0x8213B1B4;
		  /* 8213B1B4h */ case   15:  		/* bc 12, CR0_LT, 60 */
		/* 8213B1B4h case   15:*/		if ( regs.CR[0].lt ) { return 0x8213B1F0;  }
		/* 8213B1B4h case   15:*/		return 0x8213B1B8;
		  /* 8213B1B8h */ case   16:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B1B8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B1B8h case   16:*/		return 0x8213B1BC;
		  /* 8213B1BCh */ case   17:  		/* cmplwi CR6, R11, 512 */
		/* 8213B1BCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213B1BCh case   17:*/		return 0x8213B1C0;
		  /* 8213B1C0h */ case   18:  		/* bc 4, CR6_LT, 48 */
		/* 8213B1C0h case   18:*/		if ( !regs.CR[6].lt ) { return 0x8213B1F0;  }
		/* 8213B1C0h case   18:*/		return 0x8213B1C4;
		  /* 8213B1C4h */ case   19:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B1C4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B1C4h case   19:*/		return 0x8213B1C8;
		  /* 8213B1C8h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B1C8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B1C8h case   20:*/		return 0x8213B1CC;
		  /* 8213B1CCh */ case   21:  		/* mr R4, R30 */
		/* 8213B1CCh case   21:*/		regs.R4 = regs.R30;
		/* 8213B1CCh case   21:*/		return 0x8213B1D0;
		  /* 8213B1D0h */ case   22:  		/* mr R3, R31 */
		/* 8213B1D0h case   22:*/		regs.R3 = regs.R31;
		/* 8213B1D0h case   22:*/		return 0x8213B1D4;
		  /* 8213B1D4h */ case   23:  		/* stwx R30, <#[R11 + R10]> */
		/* 8213B1D4h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B1D4h case   23:*/		return 0x8213B1D8;
		  /* 8213B1D8h */ case   24:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B1D8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B1D8h case   24:*/		return 0x8213B1DC;
		  /* 8213B1DCh */ case   25:  		/* addi R11, R11, 1 */
		/* 8213B1DCh case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213B1DCh case   25:*/		return 0x8213B1E0;
		  /* 8213B1E0h */ case   26:  		/* stw R11, <#[R31 + 552]> */
		/* 8213B1E0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B1E0h case   26:*/		return 0x8213B1E4;
		  /* 8213B1E4h */ case   27:  		/* bl -254252 */
		/* 8213B1E4h case   27:*/		regs.LR = 0x8213B1E8; return 0x820FD0B8;
		/* 8213B1E4h case   27:*/		return 0x8213B1E8;
		  /* 8213B1E8h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 8213B1E8h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B1E8h case   28:*/		return 0x8213B1EC;
		  /* 8213B1ECh */ case   29:  		/* bc 4, CR0_LT, 212 */
		/* 8213B1ECh case   29:*/		if ( !regs.CR[0].lt ) { return 0x8213B2C0;  }
		/* 8213B1ECh case   29:*/		return 0x8213B1F0;
	}
	return 0x8213B1F0;
} // Block from 8213B178h-8213B1F0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8213B1F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B1F0);
		  /* 8213B1F0h */ case    0:  		/* lis R21, -32761 */
		/* 8213B1F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8007);
		/* 8213B1F0h case    0:*/		return 0x8213B1F4;
		  /* 8213B1F4h */ case    1:  		/* ori R21, R21, 14 */
		/* 8213B1F4h case    1:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0xE);
		/* 8213B1F4h case    1:*/		return 0x8213B1F8;
		  /* 8213B1F8h */ case    2:  		/* b 1940 */
		/* 8213B1F8h case    2:*/		return 0x8213B98C;
		/* 8213B1F8h case    2:*/		return 0x8213B1FC;
	}
	return 0x8213B1FC;
} // Block from 8213B1F0h-8213B1FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213B1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B1FC);
		  /* 8213B1FCh */ case    0:  		/* lis R10, 4096 */
		/* 8213B1FCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8213B1FCh case    0:*/		return 0x8213B200;
		  /* 8213B200h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8213B200h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213B200h case    1:*/		return 0x8213B204;
		  /* 8213B204h */ case    2:  		/* bc 4, CR6_EQ, 108 */
		/* 8213B204h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213B270;  }
		/* 8213B204h case    2:*/		return 0x8213B208;
		  /* 8213B208h */ case    3:  		/* mr R4, R19 */
		/* 8213B208h case    3:*/		regs.R4 = regs.R19;
		/* 8213B208h case    3:*/		return 0x8213B20C;
		  /* 8213B20Ch */ case    4:  		/* mr R3, R31 */
		/* 8213B20Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213B20Ch case    4:*/		return 0x8213B210;
		  /* 8213B210h */ case    5:  		/* bl -42472 */
		/* 8213B210h case    5:*/		regs.LR = 0x8213B214; return 0x82130C28;
		/* 8213B210h case    5:*/		return 0x8213B214;
		  /* 8213B214h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8213B214h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B214h case    6:*/		return 0x8213B218;
		  /* 8213B218h */ case    7:  		/* bc 12, CR0_EQ, 88 */
		/* 8213B218h case    7:*/		if ( regs.CR[0].eq ) { return 0x8213B270;  }
		/* 8213B218h case    7:*/		return 0x8213B21C;
		  /* 8213B21Ch */ case    8:  		/* lwz R7, <#[R19 + 12]> */
		/* 8213B21Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R19 + 0x0000000C) );
		/* 8213B21Ch case    8:*/		return 0x8213B220;
		  /* 8213B220h */ case    9:  		/* li R16, 1 */
		/* 8213B220h case    9:*/		cpu::op::li<0>(regs,&regs.R16,0x1);
		/* 8213B220h case    9:*/		return 0x8213B224;
		  /* 8213B224h */ case   10:  		/* mr R10, R14 */
		/* 8213B224h case   10:*/		regs.R10 = regs.R14;
		/* 8213B224h case   10:*/		return 0x8213B228;
		  /* 8213B228h */ case   11:  		/* cmplwi CR6, R7, 0 */
		/* 8213B228h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213B228h case   11:*/		return 0x8213B22C;
		  /* 8213B22Ch */ case   12:  		/* bc 12, CR6_EQ, 124 */
		/* 8213B22Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8213B2A8;  }
		/* 8213B22Ch case   12:*/		return 0x8213B230;
		  /* 8213B230h */ case   13:  		/* lwz R9, <#[R19 + 16]> */
		/* 8213B230h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x00000010) );
		/* 8213B230h case   13:*/		return 0x8213B234;
		  /* 8213B234h */ case   14:  		/* mr R11, R14 */
		/* 8213B234h case   14:*/		regs.R11 = regs.R14;
		/* 8213B234h case   14:*/		return 0x8213B238;
		  /* 8213B238h */ case   15:  		/* lwz R8, <#[R31 + 20]> */
		/* 8213B238h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B238h case   15:*/		return 0x8213B23C;
		  /* 8213B23Ch */ case   16:  		/* lwzx R6, <#[R9 + R11]> */
		/* 8213B23Ch case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213B23Ch case   16:*/		return 0x8213B240;
		  /* 8213B240h */ case   17:  		/* addi R10, R10, 1 */
		/* 8213B240h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213B240h case   17:*/		return 0x8213B244;
		  /* 8213B244h */ case   18:  		/* addi R11, R11, 4 */
		/* 8213B244h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B244h case   18:*/		return 0x8213B248;
		  /* 8213B248h */ case   19:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213B248h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213B248h case   19:*/		return 0x8213B24C;
		  /* 8213B24Ch */ case   20:  		/* cmplw CR6, R10, R7 */
		/* 8213B24Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8213B24Ch case   20:*/		return 0x8213B250;
		  /* 8213B250h */ case   21:  		/* lwzx R6, <#[R6 + R8]> */
		/* 8213B250h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 8213B250h case   21:*/		return 0x8213B254;
		  /* 8213B254h */ case   22:  		/* lwz R6, <#[R6 + 60]> */
		/* 8213B254h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x0000003C) );
		/* 8213B254h case   22:*/		return 0x8213B258;
		  /* 8213B258h */ case   23:  		/* addic R6, R6, -1 */
		/* 8213B258h case   23:*/		cpu::op::addic<0>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 8213B258h case   23:*/		return 0x8213B25C;
		  /* 8213B25Ch */ case   24:  		/* subfe R6, R6, R6 */
		/* 8213B25Ch case   24:*/		cpu::op::subfe<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 8213B25Ch case   24:*/		return 0x8213B260;
		  /* 8213B260h */ case   25:  		/* and R16, R6, R16 */
		/* 8213B260h case   25:*/		cpu::op::and<0>(regs,&regs.R16,regs.R6,regs.R16);
		/* 8213B260h case   25:*/		return 0x8213B264;
		  /* 8213B264h */ case   26:  		/* bc 12, CR6_LT, -40 */
		/* 8213B264h case   26:*/		if ( regs.CR[6].lt ) { return 0x8213B23C;  }
		/* 8213B264h case   26:*/		return 0x8213B268;
		  /* 8213B268h */ case   27:  		/* cmpwi CR6, R16, 0 */
		/* 8213B268h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R16,0x00000000);
		/* 8213B268h case   27:*/		return 0x8213B26C;
		  /* 8213B26Ch */ case   28:  		/* bc 4, CR6_EQ, 60 */
		/* 8213B26Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x8213B2A8;  }
		/* 8213B26Ch case   28:*/		return 0x8213B270;
	}
	return 0x8213B270;
} // Block from 8213B1FCh-8213B270h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8213B270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B270);
		  /* 8213B270h */ case    0:  		/* mr R3, R31 */
		/* 8213B270h case    0:*/		regs.R3 = regs.R31;
		/* 8213B270h case    0:*/		return 0x8213B274;
	}
	return 0x8213B274;
} // Block from 8213B270h-8213B274h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B274);
		  /* 8213B274h */ case    0:  		/* lwz R4, <#[R1 + 96]> */
		/* 8213B274h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B274h case    0:*/		return 0x8213B278;
		  /* 8213B278h */ case    1:  		/* bl -254400 */
		/* 8213B278h case    1:*/		regs.LR = 0x8213B27C; return 0x820FD0B8;
		/* 8213B278h case    1:*/		return 0x8213B27C;
		  /* 8213B27Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213B27Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B27Ch case    2:*/		return 0x8213B280;
		  /* 8213B280h */ case    3:  		/* bc 12, CR0_LT, -144 */
		/* 8213B280h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213B1F0;  }
		/* 8213B280h case    3:*/		return 0x8213B284;
		  /* 8213B284h */ case    4:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B284h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B284h case    4:*/		return 0x8213B288;
		  /* 8213B288h */ case    5:  		/* lwz R18, <#[R1 + 96]> */
		/* 8213B288h case    5:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B288h case    5:*/		return 0x8213B28C;
		  /* 8213B28Ch */ case    6:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B28Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B28Ch case    6:*/		return 0x8213B290;
		  /* 8213B290h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B290h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B290h case    7:*/		return 0x8213B294;
		  /* 8213B294h */ case    8:  		/* stwx R18, <#[R11 + R10]> */
		/* 8213B294h case    8:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B294h case    8:*/		return 0x8213B298;
		  /* 8213B298h */ case    9:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B298h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B298h case    9:*/		return 0x8213B29C;
		  /* 8213B29Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8213B29Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213B29Ch case   10:*/		return 0x8213B2A0;
		  /* 8213B2A0h */ case   11:  		/* stw R11, <#[R31 + 552]> */
		/* 8213B2A0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B2A0h case   11:*/		return 0x8213B2A4;
		  /* 8213B2A4h */ case   12:  		/* b 28 */
		/* 8213B2A4h case   12:*/		return 0x8213B2C0;
		/* 8213B2A4h case   12:*/		return 0x8213B2A8;
	}
	return 0x8213B2A8;
} // Block from 8213B274h-8213B2A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213B2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B2A8);
		  /* 8213B2A8h */ case    0:  		/* lwz R30, <#[R1 + 96]> */
		/* 8213B2A8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B2A8h case    0:*/		return 0x8213B2AC;
		  /* 8213B2ACh */ case    1:  		/* mr R3, R30 */
		/* 8213B2ACh case    1:*/		regs.R3 = regs.R30;
		/* 8213B2ACh case    1:*/		return 0x8213B2B0;
		  /* 8213B2B0h */ case    2:  		/* bl 925968 */
		/* 8213B2B0h case    2:*/		regs.LR = 0x8213B2B4; return 0x8221D3C0;
		/* 8213B2B0h case    2:*/		return 0x8213B2B4;
		  /* 8213B2B4h */ case    3:  		/* mr R3, R30 */
		/* 8213B2B4h case    3:*/		regs.R3 = regs.R30;
		/* 8213B2B4h case    3:*/		return 0x8213B2B8;
		  /* 8213B2B8h */ case    4:  		/* bl -257224 */
		/* 8213B2B8h case    4:*/		regs.LR = 0x8213B2BC; return 0x820FC5F0;
		/* 8213B2B8h case    4:*/		return 0x8213B2BC;
		  /* 8213B2BCh */ case    5:  		/* mr R18, R14 */
		/* 8213B2BCh case    5:*/		regs.R18 = regs.R14;
		/* 8213B2BCh case    5:*/		return 0x8213B2C0;
	}
	return 0x8213B2C0;
} // Block from 8213B2A8h-8213B2C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213B2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B2C0);
		  /* 8213B2C0h */ case    0:  		/* mr R4, R19 */
		/* 8213B2C0h case    0:*/		regs.R4 = regs.R19;
		/* 8213B2C0h case    0:*/		return 0x8213B2C4;
		  /* 8213B2C4h */ case    1:  		/* stw R14, <#[R1 + 96]> */
		/* 8213B2C4h case    1:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B2C4h case    1:*/		return 0x8213B2C8;
		  /* 8213B2C8h */ case    2:  		/* mr R3, R31 */
		/* 8213B2C8h case    2:*/		regs.R3 = regs.R31;
		/* 8213B2C8h case    2:*/		return 0x8213B2CC;
		  /* 8213B2CCh */ case    3:  		/* bl -42660 */
		/* 8213B2CCh case    3:*/		regs.LR = 0x8213B2D0; return 0x82130C28;
		/* 8213B2CCh case    3:*/		return 0x8213B2D0;
		  /* 8213B2D0h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213B2D0h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B2D0h case    4:*/		return 0x8213B2D4;
		  /* 8213B2D4h */ case    5:  		/* bc 12, CR0_EQ, 1568 */
		/* 8213B2D4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8213B8F4;  }
		/* 8213B2D4h case    5:*/		return 0x8213B2D8;
		  /* 8213B2D8h */ case    6:  		/* addi R11, R1, 128 */
		/* 8213B2D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213B2D8h case    6:*/		return 0x8213B2DC;
		  /* 8213B2DCh */ case    7:  		/* lwz R8, <#[R19 + 12]> */
		/* 8213B2DCh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R19 + 0x0000000C) );
		/* 8213B2DCh case    7:*/		return 0x8213B2E0;
		  /* 8213B2E0h */ case    8:  		/* li R29, -1 */
		/* 8213B2E0h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 8213B2E0h case    8:*/		return 0x8213B2E4;
		  /* 8213B2E4h */ case    9:  		/* mr R30, R14 */
		/* 8213B2E4h case    9:*/		regs.R30 = regs.R14;
		/* 8213B2E4h case    9:*/		return 0x8213B2E8;
		  /* 8213B2E8h */ case   10:  		/* mr R5, R14 */
		/* 8213B2E8h case   10:*/		regs.R5 = regs.R14;
		/* 8213B2E8h case   10:*/		return 0x8213B2EC;
		  /* 8213B2ECh */ case   11:  		/* cmplwi CR6, R8, 0 */
		/* 8213B2ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8213B2ECh case   11:*/		return 0x8213B2F0;
		  /* 8213B2F0h */ case   12:  		/* std R29, <#[R11]> */
		/* 8213B2F0h case   12:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213B2F0h case   12:*/		return 0x8213B2F4;
		  /* 8213B2F4h */ case   13:  		/* std R29, <#[R11 + 8]> */
		/* 8213B2F4h case   13:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8213B2F4h case   13:*/		return 0x8213B2F8;
		  /* 8213B2F8h */ case   14:  		/* bc 12, CR6_EQ, 92 */
		/* 8213B2F8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213B354;  }
		/* 8213B2F8h case   14:*/		return 0x8213B2FC;
		  /* 8213B2FCh */ case   15:  		/* lwz R7, <#[R31 + 20]> */
		/* 8213B2FCh case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B2FCh case   15:*/		return 0x8213B300;
		  /* 8213B300h */ case   16:  		/* mr R11, R14 */
		/* 8213B300h case   16:*/		regs.R11 = regs.R14;
		/* 8213B300h case   16:*/		return 0x8213B304;
		  /* 8213B304h */ case   17:  		/* lwz R6, <#[R19 + 16]> */
		/* 8213B304h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R19 + 0x00000010) );
		/* 8213B304h case   17:*/		return 0x8213B308;
		  /* 8213B308h */ case   18:  		/* lwzx R10, <#[R6 + R11]> */
		/* 8213B308h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8213B308h case   18:*/		return 0x8213B30C;
		  /* 8213B30Ch */ case   19:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 8213B30Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 8213B30Ch case   19:*/		return 0x8213B310;
		  /* 8213B310h */ case   20:  		/* lwzx R9, <#[R9 + R7]> */
		/* 8213B310h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8213B310h case   20:*/		return 0x8213B314;
		  /* 8213B314h */ case   21:  		/* lwz R4, <#[R9 + 48]> */
		/* 8213B314h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000030) );
		/* 8213B314h case   21:*/		return 0x8213B318;
		  /* 8213B318h */ case   22:  		/* cmplwi CR6, R4, 0 */
		/* 8213B318h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213B318h case   22:*/		return 0x8213B31C;
		  /* 8213B31Ch */ case   23:  		/* bc 12, CR6_EQ, 40 */
		/* 8213B31Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8213B344;  }
		/* 8213B31Ch case   23:*/		return 0x8213B320;
		  /* 8213B320h */ case   24:  		/* lwz R4, <#[R19 + 8]> */
		/* 8213B320h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x00000008) );
		/* 8213B320h case   24:*/		return 0x8213B324;
		  /* 8213B324h */ case   25:  		/* addi R3, R1, 128 */
		/* 8213B324h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8213B324h case   25:*/		return 0x8213B328;
		  /* 8213B328h */ case   26:  		/* lwz R9, <#[R9 + 16]> */
		/* 8213B328h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8213B328h case   26:*/		return 0x8213B32C;
		  /* 8213B32Ch */ case   27:  		/* addi R28, R1, 192 */
		/* 8213B32Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xC0);
		/* 8213B32Ch case   27:*/		return 0x8213B330;
		  /* 8213B330h */ case   28:  		/* li R30, 1 */
		/* 8213B330h case   28:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8213B330h case   28:*/		return 0x8213B334;
		  /* 8213B334h */ case   29:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213B334h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213B334h case   29:*/		return 0x8213B338;
		  /* 8213B338h */ case   30:  		/* lwzx R4, <#[R4 + R11]> */
		/* 8213B338h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8213B338h case   30:*/		return 0x8213B33C;
		  /* 8213B33Ch */ case   31:  		/* stwx R10, <#[R9 + R3]> */
		/* 8213B33Ch case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8213B33Ch case   31:*/		return 0x8213B340;
		  /* 8213B340h */ case   32:  		/* stwx R4, <#[R9 + R28]> */
		/* 8213B340h case   32:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R9 + regs.R28 + 0x00000000) );
		/* 8213B340h case   32:*/		return 0x8213B344;
	}
	return 0x8213B344;
} // Block from 8213B2C0h-8213B344h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8213B344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B344);
		  /* 8213B344h */ case    0:  		/* addi R5, R5, 1 */
		/* 8213B344h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213B344h case    0:*/		return 0x8213B348;
		  /* 8213B348h */ case    1:  		/* addi R11, R11, 4 */
		/* 8213B348h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B348h case    1:*/		return 0x8213B34C;
		  /* 8213B34Ch */ case    2:  		/* cmplw CR6, R5, R8 */
		/* 8213B34Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 8213B34Ch case    2:*/		return 0x8213B350;
		  /* 8213B350h */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 8213B350h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213B308;  }
		/* 8213B350h case    3:*/		return 0x8213B354;
	}
	return 0x8213B354;
} // Block from 8213B344h-8213B354h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B354);
		  /* 8213B354h */ case    0:  		/* stw R14, <#[R1 + 104]> */
		/* 8213B354h case    0:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000068) );
		/* 8213B354h case    0:*/		return 0x8213B358;
		  /* 8213B358h */ case    1:  		/* addi R10, R1, 104 */
		/* 8213B358h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 8213B358h case    1:*/		return 0x8213B35C;
		  /* 8213B35Ch */ case    2:  		/* lwz R21, <#[R1 + 108]> */
		/* 8213B35Ch case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x0000006C) );
		/* 8213B35Ch case    2:*/		return 0x8213B360;
		  /* 8213B360h */ case    3:  		/* addi R9, R1, 208 */
		/* 8213B360h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 8213B360h case    3:*/		return 0x8213B364;
		  /* 8213B364h */ case    4:  		/* lwz R22, <#[R1 + 100]> */
		/* 8213B364h case    4:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 8213B364h case    4:*/		return 0x8213B368;
		  /* 8213B368h */ case    5:  		/* mr R3, R31 */
		/* 8213B368h case    5:*/		regs.R3 = regs.R31;
		/* 8213B368h case    5:*/		return 0x8213B36C;
		  /* 8213B36Ch */ case    6:  		/* mr R6, R21 */
		/* 8213B36Ch case    6:*/		regs.R6 = regs.R21;
		/* 8213B36Ch case    6:*/		return 0x8213B370;
		  /* 8213B370h */ case    7:  		/* lwz R7, <#[R19 + 16]> */
		/* 8213B370h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R19 + 0x00000010) );
		/* 8213B370h case    7:*/		return 0x8213B374;
		  /* 8213B374h */ case    8:  		/* mr R5, R22 */
		/* 8213B374h case    8:*/		regs.R5 = regs.R22;
		/* 8213B374h case    8:*/		return 0x8213B378;
		  /* 8213B378h */ case    9:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213B378h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B378h case    9:*/		return 0x8213B37C;
		  /* 8213B37Ch */ case   10:  		/* bl -20972 */
		/* 8213B37Ch case   10:*/		regs.LR = 0x8213B380; return 0x82136190;
		/* 8213B37Ch case   10:*/		return 0x8213B380;
		  /* 8213B380h */ case   11:  		/* cmpwi CR6, R30, 0 */
		/* 8213B380h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213B380h case   11:*/		return 0x8213B384;
		  /* 8213B384h */ case   12:  		/* bc 12, CR6_EQ, 1612 */
		/* 8213B384h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213B9D0;  }
		/* 8213B384h case   12:*/		return 0x8213B388;
		  /* 8213B388h */ case   13:  		/* addi R11, R1, 144 */
		/* 8213B388h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8213B388h case   13:*/		return 0x8213B38C;
		  /* 8213B38Ch */ case   14:  		/* lwz R23, <#[R1 + 104]> */
		/* 8213B38Ch case   14:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000068) );
		/* 8213B38Ch case   14:*/		return 0x8213B390;
		  /* 8213B390h */ case   15:  		/* mr R24, R14 */
		/* 8213B390h case   15:*/		regs.R24 = regs.R14;
		/* 8213B390h case   15:*/		return 0x8213B394;
		  /* 8213B394h */ case   16:  		/* cmplwi CR6, R23, 0 */
		/* 8213B394h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213B394h case   16:*/		return 0x8213B398;
		  /* 8213B398h */ case   17:  		/* std R29, <#[R11]> */
		/* 8213B398h case   17:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213B398h case   17:*/		return 0x8213B39C;
		  /* 8213B39Ch */ case   18:  		/* std R29, <#[R11 + 8]> */
		/* 8213B39Ch case   18:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8213B39Ch case   18:*/		return 0x8213B3A0;
		  /* 8213B3A0h */ case   19:  		/* bc 12, CR6_EQ, 304 */
		/* 8213B3A0h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213B4D0;  }
		/* 8213B3A0h case   19:*/		return 0x8213B3A4;
		  /* 8213B3A4h */ case   20:  		/* lwz R25, <#[R31 + 20]> */
		/* 8213B3A4h case   20:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B3A4h case   20:*/		return 0x8213B3A8;
		  /* 8213B3A8h */ case   21:  		/* addi R26, R1, 208 */
		/* 8213B3A8h case   21:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xD0);
		/* 8213B3A8h case   21:*/		return 0x8213B3AC;
		  /* 8213B3ACh */ case   22:  		/* lwz R11, <#[R26]> */
		/* 8213B3ACh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8213B3ACh case   22:*/		return 0x8213B3B0;
		  /* 8213B3B0h */ case   23:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213B3B0h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213B3B0h case   23:*/		return 0x8213B3B4;
		  /* 8213B3B4h */ case   24:  		/* mr R27, R11 */
		/* 8213B3B4h case   24:*/		regs.R27 = regs.R11;
		/* 8213B3B4h case   24:*/		return 0x8213B3B8;
		  /* 8213B3B8h */ case   25:  		/* lwzx R29, <#[R10 + R25]> */
		/* 8213B3B8h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R25 + 0x00000000) );
		/* 8213B3B8h case   25:*/		return 0x8213B3BC;
		  /* 8213B3BCh */ case   26:  		/* lwz R11, <#[R29 + 56]> */
		/* 8213B3BCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 8213B3BCh case   26:*/		return 0x8213B3C0;
		  /* 8213B3C0h */ case   27:  		/* cmpwi CR6, R11, -1 */
		/* 8213B3C0h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B3C0h case   27:*/		return 0x8213B3C4;
		  /* 8213B3C4h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 8213B3C4h case   28:*/		if ( regs.CR[6].eq ) { return 0x8213B3D8;  }
		/* 8213B3C4h case   28:*/		return 0x8213B3C8;
		  /* 8213B3C8h */ case   29:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8213B3C8h case   29:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8213B3C8h case   29:*/		return 0x8213B3CC;
		  /* 8213B3CCh */ case   30:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213B3CCh case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213B3CCh case   30:*/		return 0x8213B3D0;
		  /* 8213B3D0h */ case   31:  		/* mr R27, R11 */
		/* 8213B3D0h case   31:*/		regs.R27 = regs.R11;
		/* 8213B3D0h case   31:*/		return 0x8213B3D4;
		  /* 8213B3D4h */ case   32:  		/* lwzx R29, <#[R10 + R25]> */
		/* 8213B3D4h case   32:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R25 + 0x00000000) );
		/* 8213B3D4h case   32:*/		return 0x8213B3D8;
	}
	return 0x8213B3D8;
} // Block from 8213B354h-8213B3D8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8213B3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B3D8);
		  /* 8213B3D8h */ case    0:  		/* lwz R11, <#[R29 + 72]> */
		/* 8213B3D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000048) );
		/* 8213B3D8h case    0:*/		return 0x8213B3DC;
		  /* 8213B3DCh */ case    1:  		/* cmplw CR6, R11, R21 */
		/* 8213B3DCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8213B3DCh case    1:*/		return 0x8213B3E0;
		  /* 8213B3E0h */ case    2:  		/* bc 4, CR6_LT, 12 */
		/* 8213B3E0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213B3EC;  }
		/* 8213B3E0h case    2:*/		return 0x8213B3E4;
		  /* 8213B3E4h */ case    3:  		/* cmplw CR6, R11, R22 */
		/* 8213B3E4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8213B3E4h case    3:*/		return 0x8213B3E8;
		  /* 8213B3E8h */ case    4:  		/* bc 4, CR6_LT, 216 */
		/* 8213B3E8h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213B4C0;  }
		/* 8213B3E8h case    4:*/		return 0x8213B3EC;
	}
	return 0x8213B3EC;
} // Block from 8213B3D8h-8213B3ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213B3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B3EC);
		  /* 8213B3ECh */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 8213B3ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B3ECh case    0:*/		return 0x8213B3F0;
		  /* 8213B3F0h */ case    1:  		/* bc 12, CR6_EQ, 208 */
		/* 8213B3F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213B4C0;  }
		/* 8213B3F0h case    1:*/		return 0x8213B3F4;
		  /* 8213B3F4h */ case    2:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B3F4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B3F4h case    2:*/		return 0x8213B3F8;
		  /* 8213B3F8h */ case    3:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 8213B3F8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 8213B3F8h case    3:*/		return 0x8213B3FC;
		  /* 8213B3FCh */ case    4:  		/* mr R3, R31 */
		/* 8213B3FCh case    4:*/		regs.R3 = regs.R31;
		/* 8213B3FCh case    4:*/		return 0x8213B400;
		  /* 8213B400h */ case    5:  		/* lwzx R30, <#[R28 + R10]> */
		/* 8213B400h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 8213B400h case    5:*/		return 0x8213B404;
		  /* 8213B404h */ case    6:  		/* mr R4, R30 */
		/* 8213B404h case    6:*/		regs.R4 = regs.R30;
		/* 8213B404h case    6:*/		return 0x8213B408;
		  /* 8213B408h */ case    7:  		/* bl -42976 */
		/* 8213B408h case    7:*/		regs.LR = 0x8213B40C; return 0x82130C28;
		/* 8213B408h case    7:*/		return 0x8213B40C;
		  /* 8213B40Ch */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8213B40Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B40Ch case    8:*/		return 0x8213B410;
		  /* 8213B410h */ case    9:  		/* bc 12, CR0_EQ, 176 */
		/* 8213B410h case    9:*/		if ( regs.CR[0].eq ) { return 0x8213B4C0;  }
		/* 8213B410h case    9:*/		return 0x8213B414;
		  /* 8213B414h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 8213B414h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213B414h case   10:*/		return 0x8213B418;
		  /* 8213B418h */ case   11:  		/* lis R10, 4096 */
		/* 8213B418h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8213B418h case   11:*/		return 0x8213B41C;
		  /* 8213B41Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213B41Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213B41Ch case   12:*/		return 0x8213B420;
		  /* 8213B420h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8213B420h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213B420h case   13:*/		return 0x8213B424;
		  /* 8213B424h */ case   14:  		/* bc 4, CR6_EQ, 116 */
		/* 8213B424h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213B498;  }
		/* 8213B424h case   14:*/		return 0x8213B428;
		  /* 8213B428h */ case   15:  		/* lwz R11, <#[R29 + 56]> */
		/* 8213B428h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 8213B428h case   15:*/		return 0x8213B42C;
		  /* 8213B42Ch */ case   16:  		/* cmpwi CR6, R11, -1 */
		/* 8213B42Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B42Ch case   16:*/		return 0x8213B430;
		  /* 8213B430h */ case   17:  		/* bc 4, CR6_EQ, 104 */
		/* 8213B430h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213B498;  }
		/* 8213B430h case   17:*/		return 0x8213B434;
		  /* 8213B434h */ case   18:  		/* lwz R10, <#[R30 + 12]> */
		/* 8213B434h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213B434h case   18:*/		return 0x8213B438;
		  /* 8213B438h */ case   19:  		/* mr R11, R14 */
		/* 8213B438h case   19:*/		regs.R11 = regs.R14;
		/* 8213B438h case   19:*/		return 0x8213B43C;
		  /* 8213B43Ch */ case   20:  		/* cmplwi CR6, R10, 0 */
		/* 8213B43Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213B43Ch case   20:*/		return 0x8213B440;
		  /* 8213B440h */ case   21:  		/* bc 4, CR6_GT, 88 */
		/* 8213B440h case   21:*/		if ( !regs.CR[6].gt ) { return 0x8213B498;  }
		/* 8213B440h case   21:*/		return 0x8213B444;
		  /* 8213B444h */ case   22:  		/* mr R10, R14 */
		/* 8213B444h case   22:*/		regs.R10 = regs.R14;
		/* 8213B444h case   22:*/		return 0x8213B448;
		  /* 8213B448h */ case   23:  		/* lwz R9, <#[R30 + 16]> */
		/* 8213B448h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B448h case   23:*/		return 0x8213B44C;
		  /* 8213B44Ch */ case   24:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8213B44Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213B44Ch case   24:*/		return 0x8213B450;
		  /* 8213B450h */ case   25:  		/* cmplw CR6, R27, R9 */
		/* 8213B450h case   25:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R9);
		/* 8213B450h case   25:*/		return 0x8213B454;
		  /* 8213B454h */ case   26:  		/* bc 12, CR6_EQ, 36 */
		/* 8213B454h case   26:*/		if ( regs.CR[6].eq ) { return 0x8213B478;  }
		/* 8213B454h case   26:*/		return 0x8213B458;
		  /* 8213B458h */ case   27:  		/* lwz R9, <#[R31 + 564]> */
		/* 8213B458h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B458h case   27:*/		return 0x8213B45C;
		  /* 8213B45Ch */ case   28:  		/* addi R11, R11, 1 */
		/* 8213B45Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213B45Ch case   28:*/		return 0x8213B460;
		  /* 8213B460h */ case   29:  		/* addi R10, R10, 4 */
		/* 8213B460h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213B460h case   29:*/		return 0x8213B464;
		  /* 8213B464h */ case   30:  		/* lwzx R9, <#[R28 + R9]> */
		/* 8213B464h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R9 + 0x00000000) );
		/* 8213B464h case   30:*/		return 0x8213B468;
		  /* 8213B468h */ case   31:  		/* lwz R9, <#[R9 + 12]> */
		/* 8213B468h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 8213B468h case   31:*/		return 0x8213B46C;
		  /* 8213B46Ch */ case   32:  		/* cmplw CR6, R11, R9 */
		/* 8213B46Ch case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213B46Ch case   32:*/		return 0x8213B470;
		  /* 8213B470h */ case   33:  		/* bc 12, CR6_LT, -40 */
		/* 8213B470h case   33:*/		if ( regs.CR[6].lt ) { return 0x8213B448;  }
		/* 8213B470h case   33:*/		return 0x8213B474;
		  /* 8213B474h */ case   34:  		/* b 36 */
		/* 8213B474h case   34:*/		return 0x8213B498;
		/* 8213B474h case   34:*/		return 0x8213B478;
	}
	return 0x8213B478;
} // Block from 8213B3ECh-8213B478h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8213B478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B478);
		  /* 8213B478h */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 8213B478h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8213B478h case    0:*/		return 0x8213B47C;
		  /* 8213B47Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B47Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B47Ch case    1:*/		return 0x8213B480;
		  /* 8213B480h */ case    2:  		/* lwz R9, <#[R29 + 16]> */
		/* 8213B480h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 8213B480h case    2:*/		return 0x8213B484;
		  /* 8213B484h */ case    3:  		/* addi R8, R1, 176 */
		/* 8213B484h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 8213B484h case    3:*/		return 0x8213B488;
		  /* 8213B488h */ case    4:  		/* li R15, 1 */
		/* 8213B488h case    4:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 8213B488h case    4:*/		return 0x8213B48C;
		  /* 8213B48Ch */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213B48Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213B48Ch case    5:*/		return 0x8213B490;
		  /* 8213B490h */ case    6:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B490h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B490h case    6:*/		return 0x8213B494;
		  /* 8213B494h */ case    7:  		/* stwx R11, <#[R9 + R8]> */
		/* 8213B494h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8213B494h case    7:*/		return 0x8213B498;
	}
	return 0x8213B498;
} // Block from 8213B478h-8213B498h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213B498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B498);
		  /* 8213B498h */ case    0:  		/* lwz R10, <#[R29 + 16]> */
		/* 8213B498h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 8213B498h case    0:*/		return 0x8213B49C;
		  /* 8213B49Ch */ case    1:  		/* addi R11, R1, 144 */
		/* 8213B49Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8213B49Ch case    1:*/		return 0x8213B4A0;
		  /* 8213B4A0h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213B4A0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213B4A0h case    2:*/		return 0x8213B4A4;
		  /* 8213B4A4h */ case    3:  		/* lwzx R9, <#[R10 + R11]> */
		/* 8213B4A4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B4A4h case    3:*/		return 0x8213B4A8;
		  /* 8213B4A8h */ case    4:  		/* cmpwi CR6, R9, -1 */
		/* 8213B4A8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8213B4A8h case    4:*/		return 0x8213B4AC;
		  /* 8213B4ACh */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8213B4ACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213B4B8;  }
		/* 8213B4ACh case    5:*/		return 0x8213B4B0;
		  /* 8213B4B0h */ case    6:  		/* stwx R27, <#[R10 + R11]> */
		/* 8213B4B0h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B4B0h case    6:*/		return 0x8213B4B4;
		  /* 8213B4B4h */ case    7:  		/* b 12 */
		/* 8213B4B4h case    7:*/		return 0x8213B4C0;
		/* 8213B4B4h case    7:*/		return 0x8213B4B8;
	}
	return 0x8213B4B8;
} // Block from 8213B498h-8213B4B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213B4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B4B8);
		  /* 8213B4B8h */ case    0:  		/* cmplw CR6, R9, R27 */
		/* 8213B4B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R27);
		/* 8213B4B8h case    0:*/		return 0x8213B4BC;
		  /* 8213B4BCh */ case    1:  		/* bc 4, CR6_EQ, 1392 */
		/* 8213B4BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213BA2C;  }
		/* 8213B4BCh case    1:*/		return 0x8213B4C0;
	}
	return 0x8213B4C0;
} // Block from 8213B4B8h-8213B4C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213B4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B4C0);
		  /* 8213B4C0h */ case    0:  		/* addi R24, R24, 1 */
		/* 8213B4C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8213B4C0h case    0:*/		return 0x8213B4C4;
		  /* 8213B4C4h */ case    1:  		/* addi R26, R26, 4 */
		/* 8213B4C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8213B4C4h case    1:*/		return 0x8213B4C8;
		  /* 8213B4C8h */ case    2:  		/* cmplw CR6, R24, R23 */
		/* 8213B4C8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R23);
		/* 8213B4C8h case    2:*/		return 0x8213B4CC;
		  /* 8213B4CCh */ case    3:  		/* bc 12, CR6_LT, -288 */
		/* 8213B4CCh case    3:*/		if ( regs.CR[6].lt ) { return 0x8213B3AC;  }
		/* 8213B4CCh case    3:*/		return 0x8213B4D0;
	}
	return 0x8213B4D0;
} // Block from 8213B4C0h-8213B4D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B4D0);
		  /* 8213B4D0h */ case    0:  		/* mr R20, R14 */
		/* 8213B4D0h case    0:*/		regs.R20 = regs.R14;
		/* 8213B4D0h case    0:*/		return 0x8213B4D4;
		  /* 8213B4D4h */ case    1:  		/* mr R11, R14 */
		/* 8213B4D4h case    1:*/		regs.R11 = regs.R14;
		/* 8213B4D4h case    1:*/		return 0x8213B4D8;
		  /* 8213B4D8h */ case    2:  		/* addi R10, R1, 144 */
		/* 8213B4D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8213B4D8h case    2:*/		return 0x8213B4DC;
		  /* 8213B4DCh */ case    3:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213B4DCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B4DCh case    3:*/		return 0x8213B4E0;
		  /* 8213B4E0h */ case    4:  		/* cmpwi CR6, R10, -1 */
		/* 8213B4E0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213B4E0h case    4:*/		return 0x8213B4E4;
		  /* 8213B4E4h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8213B4E4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213B500;  }
		/* 8213B4E4h case    5:*/		return 0x8213B4E8;
		  /* 8213B4E8h */ case    6:  		/* addi R9, R1, 128 */
		/* 8213B4E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 8213B4E8h case    6:*/		return 0x8213B4EC;
		  /* 8213B4ECh */ case    7:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8213B4ECh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213B4ECh case    7:*/		return 0x8213B4F0;
	}
	return 0x8213B4F0;
} // Block from 8213B4D0h-8213B4F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213B4F0h
// Function '?SrcSwizzle@CPSLegacyProgram@D3DXShader@@MAAJPAIIKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B4F0);
		  /* 8213B4F0h */ case    0:  		/* cmpwi CR6, R9, -1 */
		/* 8213B4F0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8213B4F0h case    0:*/		return 0x8213B4F4;
		  /* 8213B4F4h */ case    1:  		/* bc 4, CR6_EQ, 1336 */
		/* 8213B4F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213BA2C;  }
		/* 8213B4F4h case    1:*/		return 0x8213B4F8;
		  /* 8213B4F8h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 8213B4F8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213B4F8h case    2:*/		return 0x8213B4FC;
		  /* 8213B4FCh */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 8213B4FCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213B510;  }
		/* 8213B4FCh case    3:*/		return 0x8213B500;
	}
	return 0x8213B500;
} // Block from 8213B4F0h-8213B500h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B500);
		  /* 8213B500h */ case    0:  		/* addi R10, R1, 128 */
		/* 8213B500h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8213B500h case    0:*/		return 0x8213B504;
		  /* 8213B504h */ case    1:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213B504h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B504h case    1:*/		return 0x8213B508;
		  /* 8213B508h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 8213B508h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213B508h case    2:*/		return 0x8213B50C;
		  /* 8213B50Ch */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8213B50Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8213B514;  }
		/* 8213B50Ch case    3:*/		return 0x8213B510;
	}
	return 0x8213B510;
} // Block from 8213B500h-8213B510h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B510);
		  /* 8213B510h */ case    0:  		/* addi R20, R20, 1 */
		/* 8213B510h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 8213B510h case    0:*/		return 0x8213B514;
	}
	return 0x8213B514;
} // Block from 8213B510h-8213B514h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B514);
		  /* 8213B514h */ case    0:  		/* addi R11, R11, 4 */
		/* 8213B514h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B514h case    0:*/		return 0x8213B518;
		  /* 8213B518h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8213B518h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8213B518h case    1:*/		return 0x8213B51C;
		  /* 8213B51Ch */ case    2:  		/* bc 12, CR6_LT, -68 */
		/* 8213B51Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8213B4D8;  }
		/* 8213B51Ch case    2:*/		return 0x8213B520;
		  /* 8213B520h */ case    3:  		/* li R3, 116 */
		/* 8213B520h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213B520h case    3:*/		return 0x8213B524;
		  /* 8213B524h */ case    4:  		/* bl -257932 */
		/* 8213B524h case    4:*/		regs.LR = 0x8213B528; return 0x820FC598;
		/* 8213B524h case    4:*/		return 0x8213B528;
		  /* 8213B528h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8213B528h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213B528h case    5:*/		return 0x8213B52C;
		  /* 8213B52Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 8213B52Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8213B53C;  }
		/* 8213B52Ch case    6:*/		return 0x8213B530;
		  /* 8213B530h */ case    7:  		/* bl -259728 */
		/* 8213B530h case    7:*/		regs.LR = 0x8213B534; return 0x820FBEA0;
		/* 8213B530h case    7:*/		return 0x8213B534;
		  /* 8213B534h */ case    8:  		/* mr R17, R3 */
		/* 8213B534h case    8:*/		regs.R17 = regs.R3;
		/* 8213B534h case    8:*/		return 0x8213B538;
		  /* 8213B538h */ case    9:  		/* b 8 */
		/* 8213B538h case    9:*/		return 0x8213B540;
		/* 8213B538h case    9:*/		return 0x8213B53C;
	}
	return 0x8213B53C;
} // Block from 8213B514h-8213B53Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213B53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B53C);
		  /* 8213B53Ch */ case    0:  		/* mr R17, R14 */
		/* 8213B53Ch case    0:*/		regs.R17 = regs.R14;
		/* 8213B53Ch case    0:*/		return 0x8213B540;
	}
	return 0x8213B540;
} // Block from 8213B53Ch-8213B540h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B540);
		  /* 8213B540h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8213B540h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8213B540h case    0:*/		return 0x8213B544;
		  /* 8213B544h */ case    1:  		/* bc 12, CR6_EQ, 1296 */
		/* 8213B544h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213BA54;  }
		/* 8213B544h case    1:*/		return 0x8213B548;
		  /* 8213B548h */ case    2:  		/* li R11, 1793 */
		/* 8213B548h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x701);
		/* 8213B548h case    2:*/		return 0x8213B54C;
		  /* 8213B54Ch */ case    3:  		/* mr R4, R20 */
		/* 8213B54Ch case    3:*/		regs.R4 = regs.R20;
		/* 8213B54Ch case    3:*/		return 0x8213B550;
		  /* 8213B550h */ case    4:  		/* li R7, 0 */
		/* 8213B550h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213B550h case    4:*/		return 0x8213B554;
		  /* 8213B554h */ case    5:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 8213B554h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 8213B554h case    5:*/		return 0x8213B558;
		  /* 8213B558h */ case    6:  		/* mr R6, R20 */
		/* 8213B558h case    6:*/		regs.R6 = regs.R20;
		/* 8213B558h case    6:*/		return 0x8213B55C;
		  /* 8213B55Ch */ case    7:  		/* mulli R5, R20, 3 */
		/* 8213B55Ch case    7:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R20,0x3);
		/* 8213B55Ch case    7:*/		return 0x8213B560;
		  /* 8213B560h */ case    8:  		/* mr R3, R17 */
		/* 8213B560h case    8:*/		regs.R3 = regs.R17;
		/* 8213B560h case    8:*/		return 0x8213B564;
		  /* 8213B564h */ case    9:  		/* bl -257844 */
		/* 8213B564h case    9:*/		regs.LR = 0x8213B568; return 0x820FC630;
		/* 8213B564h case    9:*/		return 0x8213B568;
		  /* 8213B568h */ case   10:  		/* or. R21, R3, R3 */
		/* 8213B568h case   10:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8213B568h case   10:*/		return 0x8213B56C;
		  /* 8213B56Ch */ case   11:  		/* bc 12, CR0_LT, 1056 */
		/* 8213B56Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x8213B98C;  }
		/* 8213B56Ch case   11:*/		return 0x8213B570;
		  /* 8213B570h */ case   12:  		/* mr R4, R19 */
		/* 8213B570h case   12:*/		regs.R4 = regs.R19;
		/* 8213B570h case   12:*/		return 0x8213B574;
		  /* 8213B574h */ case   13:  		/* mr R3, R17 */
		/* 8213B574h case   13:*/		regs.R3 = regs.R17;
		/* 8213B574h case   13:*/		return 0x8213B578;
		  /* 8213B578h */ case   14:  		/* bl -259720 */
		/* 8213B578h case   14:*/		regs.LR = 0x8213B57C; return 0x820FBEF0;
		/* 8213B578h case   14:*/		return 0x8213B57C;
		  /* 8213B57Ch */ case   15:  		/* or. R21, R3, R3 */
		/* 8213B57Ch case   15:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8213B57Ch case   15:*/		return 0x8213B580;
		  /* 8213B580h */ case   16:  		/* bc 12, CR0_LT, 1036 */
		/* 8213B580h case   16:*/		if ( regs.CR[0].lt ) { return 0x8213B98C;  }
		/* 8213B580h case   16:*/		return 0x8213B584;
		  /* 8213B584h */ case   17:  		/* rlwinm R28, R20, 2, 0, 29 */
		/* 8213B584h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R20);
		/* 8213B584h case   17:*/		return 0x8213B588;
		  /* 8213B588h */ case   18:  		/* mr R26, R14 */
		/* 8213B588h case   18:*/		regs.R26 = regs.R14;
		/* 8213B588h case   18:*/		return 0x8213B58C;
		  /* 8213B58Ch */ case   19:  		/* mr R22, R14 */
		/* 8213B58Ch case   19:*/		regs.R22 = regs.R14;
		/* 8213B58Ch case   19:*/		return 0x8213B590;
		  /* 8213B590h */ case   20:  		/* mr R24, R14 */
		/* 8213B590h case   20:*/		regs.R24 = regs.R14;
		/* 8213B590h case   20:*/		return 0x8213B594;
		  /* 8213B594h */ case   21:  		/* mr R27, R14 */
		/* 8213B594h case   21:*/		regs.R27 = regs.R14;
		/* 8213B594h case   21:*/		return 0x8213B598;
		  /* 8213B598h */ case   22:  		/* mr R25, R28 */
		/* 8213B598h case   22:*/		regs.R25 = regs.R28;
		/* 8213B598h case   22:*/		return 0x8213B59C;
		  /* 8213B59Ch */ case   23:  		/* mr R23, R14 */
		/* 8213B59Ch case   23:*/		regs.R23 = regs.R14;
		/* 8213B59Ch case   23:*/		return 0x8213B5A0;
		  /* 8213B5A0h */ case   24:  		/* addi R11, R1, 128 */
		/* 8213B5A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213B5A0h case   24:*/		return 0x8213B5A4;
		  /* 8213B5A4h */ case   25:  		/* lwzx R29, <#[R23 + R11]> */
		/* 8213B5A4h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + regs.R11 + 0x00000000) );
		/* 8213B5A4h case   25:*/		return 0x8213B5A8;
		  /* 8213B5A8h */ case   26:  		/* cmpwi CR6, R29, -1 */
		/* 8213B5A8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 8213B5A8h case   26:*/		return 0x8213B5AC;
		  /* 8213B5ACh */ case   27:  		/* bc 12, CR6_EQ, 208 */
		/* 8213B5ACh case   27:*/		if ( regs.CR[6].eq ) { return 0x8213B67C;  }
		/* 8213B5ACh case   27:*/		return 0x8213B5B0;
		  /* 8213B5B0h */ case   28:  		/* lwz R11, <#[R17 + 16]> */
		/* 8213B5B0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000010) );
		/* 8213B5B0h case   28:*/		return 0x8213B5B4;
		  /* 8213B5B4h */ case   29:  		/* cmpwi CR6, R16, 0 */
		/* 8213B5B4h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R16,0x00000000);
		/* 8213B5B4h case   29:*/		return 0x8213B5B8;
		  /* 8213B5B8h */ case   30:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 8213B5B8h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 8213B5B8h case   30:*/		return 0x8213B5BC;
		  /* 8213B5BCh */ case   31:  		/* stwx R29, <#[R11 + R27]> */
		/* 8213B5BCh case   31:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213B5BCh case   31:*/		return 0x8213B5C0;
		  /* 8213B5C0h */ case   32:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B5C0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B5C0h case   32:*/		return 0x8213B5C4;
		  /* 8213B5C4h */ case   33:  		/* bc 4, CR6_EQ, 136 */
		/* 8213B5C4h case   33:*/		if ( !regs.CR[6].eq ) { return 0x8213B64C;  }
		/* 8213B5C4h case   33:*/		return 0x8213B5C8;
		  /* 8213B5C8h */ case   34:  		/* lwzx R30, <#[R10 + R11]> */
		/* 8213B5C8h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B5C8h case   34:*/		return 0x8213B5CC;
		  /* 8213B5CCh */ case   35:  		/* li R5, 0 */
		/* 8213B5CCh case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213B5CCh case   35:*/		return 0x8213B5D0;
		  /* 8213B5D0h */ case   36:  		/* mr R3, R31 */
		/* 8213B5D0h case   36:*/		regs.R3 = regs.R31;
		/* 8213B5D0h case   36:*/		return 0x8213B5D4;
		  /* 8213B5D4h */ case   37:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213B5D4h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B5D4h case   37:*/		return 0x8213B5D8;
		  /* 8213B5D8h */ case   38:  		/* fmr FR1, FR31 */
		/* 8213B5D8h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213B5D8h case   38:*/		return 0x8213B5DC;
		  /* 8213B5DCh */ case   39:  		/* lwz R6, <#[R30 + 16]> */
		/* 8213B5DCh case   39:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B5DCh case   39:*/		return 0x8213B5E0;
		  /* 8213B5E0h */ case   40:  		/* bl -254904 */
		/* 8213B5E0h case   40:*/		regs.LR = 0x8213B5E4; return 0x820FD228;
		/* 8213B5E0h case   40:*/		return 0x8213B5E4;
		  /* 8213B5E4h */ case   41:  		/* cmpwi CR6, R3, -1 */
		/* 8213B5E4h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213B5E4h case   41:*/		return 0x8213B5E8;
		  /* 8213B5E8h */ case   42:  		/* bc 12, CR6_EQ, -1016 */
		/* 8213B5E8h case   42:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B5E8h case   42:*/		return 0x8213B5EC;
		  /* 8213B5ECh */ case   43:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B5ECh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B5ECh case   43:*/		return 0x8213B5F0;
		  /* 8213B5F0h */ case   44:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213B5F0h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213B5F0h case   44:*/		return 0x8213B5F4;
		  /* 8213B5F4h */ case   45:  		/* lwz R8, <#[R30 + 60]> */
		/* 8213B5F4h case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B5F4h case   45:*/		return 0x8213B5F8;
		  /* 8213B5F8h */ case   46:  		/* mr R9, R14 */
		/* 8213B5F8h case   46:*/		regs.R9 = regs.R14;
		/* 8213B5F8h case   46:*/		return 0x8213B5FC;
		  /* 8213B5FCh */ case   47:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B5FCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B5FCh case   47:*/		return 0x8213B600;
		  /* 8213B600h */ case   48:  		/* stw R8, <#[R11 + 60]> */
		/* 8213B600h case   48:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213B600h case   48:*/		return 0x8213B604;
		  /* 8213B604h */ case   49:  		/* stw R14, <#[R30 + 60]> */
		/* 8213B604h case   49:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B604h case   49:*/		return 0x8213B608;
		  /* 8213B608h */ case   50:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B608h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B608h case   50:*/		return 0x8213B60C;
		  /* 8213B60Ch */ case   51:  		/* stw R11, <#[R30 + 72]> */
		/* 8213B60Ch case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000048) );
		/* 8213B60Ch case   51:*/		return 0x8213B610;
		  /* 8213B610h */ case   52:  		/* lwz R11, <#[R18 + 12]> */
		/* 8213B610h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000000C) );
		/* 8213B610h case   52:*/		return 0x8213B614;
		  /* 8213B614h */ case   53:  		/* cmplwi CR6, R11, 0 */
		/* 8213B614h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213B614h case   53:*/		return 0x8213B618;
		  /* 8213B618h */ case   54:  		/* bc 4, CR6_GT, 72 */
		/* 8213B618h case   54:*/		if ( !regs.CR[6].gt ) { return 0x8213B660;  }
		/* 8213B618h case   54:*/		return 0x8213B61C;
		  /* 8213B61Ch */ case   55:  		/* mr R11, R14 */
		/* 8213B61Ch case   55:*/		regs.R11 = regs.R14;
		/* 8213B61Ch case   55:*/		return 0x8213B620;
		  /* 8213B620h */ case   56:  		/* lwz R10, <#[R18 + 16]> */
		/* 8213B620h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000010) );
		/* 8213B620h case   56:*/		return 0x8213B624;
		  /* 8213B624h */ case   57:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8213B624h case   57:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B624h case   57:*/		return 0x8213B628;
		  /* 8213B628h */ case   58:  		/* cmplw CR6, R8, R29 */
		/* 8213B628h case   58:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R29);
		/* 8213B628h case   58:*/		return 0x8213B62C;
		  /* 8213B62Ch */ case   59:  		/* bc 4, CR6_EQ, 8 */
		/* 8213B62Ch case   59:*/		if ( !regs.CR[6].eq ) { return 0x8213B634;  }
		/* 8213B62Ch case   59:*/		return 0x8213B630;
		  /* 8213B630h */ case   60:  		/* stwx R3, <#[R10 + R11]> */
		/* 8213B630h case   60:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B630h case   60:*/		return 0x8213B634;
	}
	return 0x8213B634;
} // Block from 8213B540h-8213B634h (61 instructions)

//////////////////////////////////////////////////////
// Block at 8213B634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B634);
		  /* 8213B634h */ case    0:  		/* lwz R10, <#[R18 + 12]> */
		/* 8213B634h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000000C) );
		/* 8213B634h case    0:*/		return 0x8213B638;
		  /* 8213B638h */ case    1:  		/* addi R9, R9, 1 */
		/* 8213B638h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213B638h case    1:*/		return 0x8213B63C;
		  /* 8213B63Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 8213B63Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B63Ch case    2:*/		return 0x8213B640;
		  /* 8213B640h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 8213B640h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8213B640h case    3:*/		return 0x8213B644;
		  /* 8213B644h */ case    4:  		/* bc 12, CR6_LT, -36 */
		/* 8213B644h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213B620;  }
		/* 8213B644h case    4:*/		return 0x8213B648;
		  /* 8213B648h */ case    5:  		/* b 24 */
		/* 8213B648h case    5:*/		return 0x8213B660;
		/* 8213B648h case    5:*/		return 0x8213B64C;
	}
	return 0x8213B64C;
} // Block from 8213B634h-8213B64Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213B64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B64C);
		  /* 8213B64Ch */ case    0:  		/* lwz R9, <#[R31 + 552]> */
		/* 8213B64Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B64Ch case    0:*/		return 0x8213B650;
		  /* 8213B650h */ case    1:  		/* addi R8, R1, 192 */
		/* 8213B650h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 8213B650h case    1:*/		return 0x8213B654;
		  /* 8213B654h */ case    2:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B654h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B654h case    2:*/		return 0x8213B658;
		  /* 8213B658h */ case    3:  		/* lwzx R3, <#[R23 + R8]> */
		/* 8213B658h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + regs.R8 + 0x00000000) );
		/* 8213B658h case    3:*/		return 0x8213B65C;
		  /* 8213B65Ch */ case    4:  		/* stw R9, <#[R11 + 72]> */
		/* 8213B65Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000048) );
		/* 8213B65Ch case    4:*/		return 0x8213B660;
	}
	return 0x8213B660;
} // Block from 8213B64Ch-8213B660h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213B660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B660);
		  /* 8213B660h */ case    0:  		/* lwz R11, <#[R17 + 8]> */
		/* 8213B660h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B660h case    0:*/		return 0x8213B664;
		  /* 8213B664h */ case    1:  		/* mr R22, R3 */
		/* 8213B664h case    1:*/		regs.R22 = regs.R3;
		/* 8213B664h case    1:*/		return 0x8213B668;
		  /* 8213B668h */ case    2:  		/* stwx R3, <#[R11 + R25]> */
		/* 8213B668h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8213B668h case    2:*/		return 0x8213B66C;
		  /* 8213B66Ch */ case    3:  		/* lwz R11, <#[R17 + 8]> */
		/* 8213B66Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B66Ch case    3:*/		return 0x8213B670;
		  /* 8213B670h */ case    4:  		/* lwz R10, <#[R31 + 1096]> */
		/* 8213B670h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000448) );
		/* 8213B670h case    4:*/		return 0x8213B674;
		  /* 8213B674h */ case    5:  		/* stwx R10, <#[R11 + R27]> */
		/* 8213B674h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213B674h case    5:*/		return 0x8213B678;
		  /* 8213B678h */ case    6:  		/* b 268 */
		/* 8213B678h case    6:*/		return 0x8213B784;
		/* 8213B678h case    6:*/		return 0x8213B67C;
	}
	return 0x8213B67C;
} // Block from 8213B660h-8213B67Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213B67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B67C);
		  /* 8213B67Ch */ case    0:  		/* addi R11, R1, 144 */
		/* 8213B67Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8213B67Ch case    0:*/		return 0x8213B680;
		  /* 8213B680h */ case    1:  		/* lwzx R29, <#[R23 + R11]> */
		/* 8213B680h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + regs.R11 + 0x00000000) );
		/* 8213B680h case    1:*/		return 0x8213B684;
		  /* 8213B684h */ case    2:  		/* cmpwi CR6, R29, -1 */
		/* 8213B684h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 8213B684h case    2:*/		return 0x8213B688;
		  /* 8213B688h */ case    3:  		/* bc 12, CR6_EQ, 264 */
		/* 8213B688h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213B790;  }
		/* 8213B688h case    3:*/		return 0x8213B68C;
		  /* 8213B68Ch */ case    4:  		/* lwz R11, <#[R17 + 16]> */
		/* 8213B68Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000010) );
		/* 8213B68Ch case    4:*/		return 0x8213B690;
		  /* 8213B690h */ case    5:  		/* cmpwi CR6, R15, 0 */
		/* 8213B690h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R15,0x00000000);
		/* 8213B690h case    5:*/		return 0x8213B694;
		  /* 8213B694h */ case    6:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 8213B694h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 8213B694h case    6:*/		return 0x8213B698;
		  /* 8213B698h */ case    7:  		/* stwx R29, <#[R11 + R27]> */
		/* 8213B698h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213B698h case    7:*/		return 0x8213B69C;
		  /* 8213B69Ch */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B69Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B69Ch case    8:*/		return 0x8213B6A0;
		  /* 8213B6A0h */ case    9:  		/* bc 4, CR6_EQ, 172 */
		/* 8213B6A0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8213B74C;  }
		/* 8213B6A0h case    9:*/		return 0x8213B6A4;
		  /* 8213B6A4h */ case   10:  		/* lwzx R30, <#[R10 + R11]> */
		/* 8213B6A4h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B6A4h case   10:*/		return 0x8213B6A8;
		  /* 8213B6A8h */ case   11:  		/* li R5, 0 */
		/* 8213B6A8h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213B6A8h case   11:*/		return 0x8213B6AC;
		  /* 8213B6ACh */ case   12:  		/* mr R3, R31 */
		/* 8213B6ACh case   12:*/		regs.R3 = regs.R31;
		/* 8213B6ACh case   12:*/		return 0x8213B6B0;
		  /* 8213B6B0h */ case   13:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213B6B0h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B6B0h case   13:*/		return 0x8213B6B4;
		  /* 8213B6B4h */ case   14:  		/* fmr FR1, FR31 */
		/* 8213B6B4h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213B6B4h case   14:*/		return 0x8213B6B8;
		  /* 8213B6B8h */ case   15:  		/* lwz R6, <#[R30 + 16]> */
		/* 8213B6B8h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B6B8h case   15:*/		return 0x8213B6BC;
		  /* 8213B6BCh */ case   16:  		/* bl -255124 */
		/* 8213B6BCh case   16:*/		regs.LR = 0x8213B6C0; return 0x820FD228;
		/* 8213B6BCh case   16:*/		return 0x8213B6C0;
		  /* 8213B6C0h */ case   17:  		/* cmpwi CR6, R3, -1 */
		/* 8213B6C0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213B6C0h case   17:*/		return 0x8213B6C4;
		  /* 8213B6C4h */ case   18:  		/* bc 12, CR6_EQ, -1236 */
		/* 8213B6C4h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B6C4h case   18:*/		return 0x8213B6C8;
		  /* 8213B6C8h */ case   19:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B6C8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B6C8h case   19:*/		return 0x8213B6CC;
		  /* 8213B6CCh */ case   20:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213B6CCh case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213B6CCh case   20:*/		return 0x8213B6D0;
		  /* 8213B6D0h */ case   21:  		/* lwz R9, <#[R30 + 60]> */
		/* 8213B6D0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B6D0h case   21:*/		return 0x8213B6D4;
		  /* 8213B6D4h */ case   22:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B6D4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B6D4h case   22:*/		return 0x8213B6D8;
		  /* 8213B6D8h */ case   23:  		/* stw R9, <#[R11 + 60]> */
		/* 8213B6D8h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213B6D8h case   23:*/		return 0x8213B6DC;
		  /* 8213B6DCh */ case   24:  		/* lwz R11, <#[R30 + 72]> */
		/* 8213B6DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000048) );
		/* 8213B6DCh case   24:*/		return 0x8213B6E0;
		  /* 8213B6E0h */ case   25:  		/* cmpwi CR6, R11, -1 */
		/* 8213B6E0h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B6E0h case   25:*/		return 0x8213B6E4;
		  /* 8213B6E4h */ case   26:  		/* stw R14, <#[R30 + 60]> */
		/* 8213B6E4h case   26:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B6E4h case   26:*/		return 0x8213B6E8;
		  /* 8213B6E8h */ case   27:  		/* bc 12, CR6_EQ, 888 */
		/* 8213B6E8h case   27:*/		if ( regs.CR[6].eq ) { return 0x8213BA60;  }
		/* 8213B6E8h case   27:*/		return 0x8213B6EC;
		  /* 8213B6ECh */ case   28:  		/* lwz R10, <#[R31 + 552]> */
		/* 8213B6ECh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B6ECh case   28:*/		return 0x8213B6F0;
		  /* 8213B6F0h */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 8213B6F0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213B6F0h case   29:*/		return 0x8213B6F4;
		  /* 8213B6F4h */ case   30:  		/* bc 12, CR6_EQ, 876 */
		/* 8213B6F4h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213BA60;  }
		/* 8213B6F4h case   30:*/		return 0x8213B6F8;
		  /* 8213B6F8h */ case   31:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B6F8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B6F8h case   31:*/		return 0x8213B6FC;
		  /* 8213B6FCh */ case   32:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B6FCh case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B6FCh case   32:*/		return 0x8213B700;
		  /* 8213B700h */ case   33:  		/* mr R8, R14 */
		/* 8213B700h case   33:*/		regs.R8 = regs.R14;
		/* 8213B700h case   33:*/		return 0x8213B704;
		  /* 8213B704h */ case   34:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213B704h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B704h case   34:*/		return 0x8213B708;
		  /* 8213B708h */ case   35:  		/* lwz R11, <#[R10 + 12]> */
		/* 8213B708h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8213B708h case   35:*/		return 0x8213B70C;
		  /* 8213B70Ch */ case   36:  		/* cmplwi CR6, R11, 0 */
		/* 8213B70Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213B70Ch case   36:*/		return 0x8213B710;
		  /* 8213B710h */ case   37:  		/* bc 4, CR6_GT, 48 */
		/* 8213B710h case   37:*/		if ( !regs.CR[6].gt ) { return 0x8213B740;  }
		/* 8213B710h case   37:*/		return 0x8213B714;
		  /* 8213B714h */ case   38:  		/* mr R11, R14 */
		/* 8213B714h case   38:*/		regs.R11 = regs.R14;
		/* 8213B714h case   38:*/		return 0x8213B718;
		  /* 8213B718h */ case   39:  		/* lwz R9, <#[R10 + 16]> */
		/* 8213B718h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 8213B718h case   39:*/		return 0x8213B71C;
		  /* 8213B71Ch */ case   40:  		/* lwzx R7, <#[R11 + R9]> */
		/* 8213B71Ch case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213B71Ch case   40:*/		return 0x8213B720;
		  /* 8213B720h */ case   41:  		/* cmplw CR6, R7, R29 */
		/* 8213B720h case   41:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 8213B720h case   41:*/		return 0x8213B724;
		  /* 8213B724h */ case   42:  		/* bc 4, CR6_EQ, 8 */
		/* 8213B724h case   42:*/		if ( !regs.CR[6].eq ) { return 0x8213B72C;  }
		/* 8213B724h case   42:*/		return 0x8213B728;
		  /* 8213B728h */ case   43:  		/* stwx R3, <#[R11 + R9]> */
		/* 8213B728h case   43:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213B728h case   43:*/		return 0x8213B72C;
	}
	return 0x8213B72C;
} // Block from 8213B67Ch-8213B72Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8213B72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B72C);
		  /* 8213B72Ch */ case    0:  		/* lwz R9, <#[R10 + 12]> */
		/* 8213B72Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 8213B72Ch case    0:*/		return 0x8213B730;
		  /* 8213B730h */ case    1:  		/* addi R8, R8, 1 */
		/* 8213B730h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213B730h case    1:*/		return 0x8213B734;
		  /* 8213B734h */ case    2:  		/* addi R11, R11, 4 */
		/* 8213B734h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B734h case    2:*/		return 0x8213B738;
		  /* 8213B738h */ case    3:  		/* cmplw CR6, R8, R9 */
		/* 8213B738h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8213B738h case    3:*/		return 0x8213B73C;
		  /* 8213B73Ch */ case    4:  		/* bc 12, CR6_LT, -36 */
		/* 8213B73Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8213B718;  }
		/* 8213B73Ch case    4:*/		return 0x8213B740;
	}
	return 0x8213B740;
} // Block from 8213B72Ch-8213B740h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213B740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B740);
		  /* 8213B740h */ case    0:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B740h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B740h case    0:*/		return 0x8213B744;
		  /* 8213B744h */ case    1:  		/* stw R11, <#[R30 + 72]> */
		/* 8213B744h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000048) );
		/* 8213B744h case    1:*/		return 0x8213B748;
		  /* 8213B748h */ case    2:  		/* b 24 */
		/* 8213B748h case    2:*/		return 0x8213B760;
		/* 8213B748h case    2:*/		return 0x8213B74C;
	}
	return 0x8213B74C;
} // Block from 8213B740h-8213B74Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213B74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B74C);
		  /* 8213B74Ch */ case    0:  		/* lwz R9, <#[R31 + 552]> */
		/* 8213B74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B74Ch case    0:*/		return 0x8213B750;
		  /* 8213B750h */ case    1:  		/* addi R8, R1, 176 */
		/* 8213B750h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 8213B750h case    1:*/		return 0x8213B754;
		  /* 8213B754h */ case    2:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B754h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B754h case    2:*/		return 0x8213B758;
		  /* 8213B758h */ case    3:  		/* lwzx R3, <#[R23 + R8]> */
		/* 8213B758h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + regs.R8 + 0x00000000) );
		/* 8213B758h case    3:*/		return 0x8213B75C;
		  /* 8213B75Ch */ case    4:  		/* stw R9, <#[R11 + 72]> */
		/* 8213B75Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000048) );
		/* 8213B75Ch case    4:*/		return 0x8213B760;
	}
	return 0x8213B760;
} // Block from 8213B74Ch-8213B760h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213B760h
// Function '??1CPSLegacyProgram@D3DXShader@@UAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B760);
		  /* 8213B760h */ case    0:  		/* lwz R10, <#[R31 + 1092]> */
		/* 8213B760h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000444) );
		/* 8213B760h case    0:*/		return 0x8213B764;
		  /* 8213B764h */ case    1:  		/* rlwinm R11, R20, 1, 0, 30 */
		/* 8213B764h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R20);
		/* 8213B764h case    1:*/		return 0x8213B768;
		  /* 8213B768h */ case    2:  		/* lwz R9, <#[R17 + 8]> */
		/* 8213B768h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B768h case    2:*/		return 0x8213B76C;
		  /* 8213B76Ch */ case    3:  		/* mr R24, R3 */
		/* 8213B76Ch case    3:*/		regs.R24 = regs.R3;
		/* 8213B76Ch case    3:*/		return 0x8213B770;
		  /* 8213B770h */ case    4:  		/* add R11, R11, R26 */
		/* 8213B770h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 8213B770h case    4:*/		return 0x8213B774;
		  /* 8213B774h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B774h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B774h case    5:*/		return 0x8213B778;
		  /* 8213B778h */ case    6:  		/* stwx R10, <#[R9 + R27]> */
		/* 8213B778h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R27 + 0x00000000) );
		/* 8213B778h case    6:*/		return 0x8213B77C;
		  /* 8213B77Ch */ case    7:  		/* lwz R10, <#[R17 + 8]> */
		/* 8213B77Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B77Ch case    7:*/		return 0x8213B780;
		  /* 8213B780h */ case    8:  		/* stwx R3, <#[R11 + R10]> */
		/* 8213B780h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B780h case    8:*/		return 0x8213B784;
	}
	return 0x8213B784;
} // Block from 8213B760h-8213B784h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213B784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B784);
		  /* 8213B784h */ case    0:  		/* addi R27, R27, 4 */
		/* 8213B784h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8213B784h case    0:*/		return 0x8213B788;
		  /* 8213B788h */ case    1:  		/* addi R25, R25, 4 */
		/* 8213B788h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 8213B788h case    1:*/		return 0x8213B78C;
		  /* 8213B78Ch */ case    2:  		/* addi R26, R26, 1 */
		/* 8213B78Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8213B78Ch case    2:*/		return 0x8213B790;
	}
	return 0x8213B790;
} // Block from 8213B784h-8213B790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213B790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B790);
		  /* 8213B790h */ case    0:  		/* addi R23, R23, 4 */
		/* 8213B790h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 8213B790h case    0:*/		return 0x8213B794;
		  /* 8213B794h */ case    1:  		/* cmplwi CR6, R23, 16 */
		/* 8213B794h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000010);
		/* 8213B794h case    1:*/		return 0x8213B798;
		  /* 8213B798h */ case    2:  		/* bc 12, CR6_LT, -504 */
		/* 8213B798h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213B5A0;  }
		/* 8213B798h case    2:*/		return 0x8213B79C;
		  /* 8213B79Ch */ case    3:  		/* mr R29, R14 */
		/* 8213B79Ch case    3:*/		regs.R29 = regs.R14;
		/* 8213B79Ch case    3:*/		return 0x8213B7A0;
		  /* 8213B7A0h */ case    4:  		/* mr R27, R14 */
		/* 8213B7A0h case    4:*/		regs.R27 = regs.R14;
		/* 8213B7A0h case    4:*/		return 0x8213B7A4;
		  /* 8213B7A4h */ case    5:  		/* addi R11, R1, 128 */
		/* 8213B7A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213B7A4h case    5:*/		return 0x8213B7A8;
		  /* 8213B7A8h */ case    6:  		/* lwzx R11, <#[R27 + R11]> */
		/* 8213B7A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 8213B7A8h case    6:*/		return 0x8213B7AC;
		  /* 8213B7ACh */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8213B7ACh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B7ACh case    7:*/		return 0x8213B7B0;
		  /* 8213B7B0h */ case    8:  		/* bc 12, CR6_EQ, 124 */
		/* 8213B7B0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213B82C;  }
		/* 8213B7B0h case    8:*/		return 0x8213B7B4;
		  /* 8213B7B4h */ case    9:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B7B4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B7B4h case    9:*/		return 0x8213B7B8;
		  /* 8213B7B8h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B7B8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B7B8h case   10:*/		return 0x8213B7BC;
		  /* 8213B7BCh */ case   11:  		/* li R5, 0 */
		/* 8213B7BCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213B7BCh case   11:*/		return 0x8213B7C0;
		  /* 8213B7C0h */ case   12:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213B7C0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B7C0h case   12:*/		return 0x8213B7C4;
		  /* 8213B7C4h */ case   13:  		/* mr R3, R31 */
		/* 8213B7C4h case   13:*/		regs.R3 = regs.R31;
		/* 8213B7C4h case   13:*/		return 0x8213B7C8;
		  /* 8213B7C8h */ case   14:  		/* fmr FR1, FR31 */
		/* 8213B7C8h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213B7C8h case   14:*/		return 0x8213B7CC;
		  /* 8213B7CCh */ case   15:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8213B7CCh case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B7CCh case   15:*/		return 0x8213B7D0;
		  /* 8213B7D0h */ case   16:  		/* lwz R6, <#[R30 + 16]> */
		/* 8213B7D0h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B7D0h case   16:*/		return 0x8213B7D4;
		  /* 8213B7D4h */ case   17:  		/* bl -255404 */
		/* 8213B7D4h case   17:*/		regs.LR = 0x8213B7D8; return 0x820FD228;
		/* 8213B7D4h case   17:*/		return 0x8213B7D8;
		  /* 8213B7D8h */ case   18:  		/* cmpwi CR6, R3, -1 */
		/* 8213B7D8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213B7D8h case   18:*/		return 0x8213B7DC;
		  /* 8213B7DCh */ case   19:  		/* bc 12, CR6_EQ, -1516 */
		/* 8213B7DCh case   19:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B7DCh case   19:*/		return 0x8213B7E0;
		  /* 8213B7E0h */ case   20:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B7E0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B7E0h case   20:*/		return 0x8213B7E4;
		  /* 8213B7E4h */ case   21:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213B7E4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213B7E4h case   21:*/		return 0x8213B7E8;
		  /* 8213B7E8h */ case   22:  		/* cmpwi CR6, R24, -1 */
		/* 8213B7E8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R24,0xFFFFFFFF);
		/* 8213B7E8h case   22:*/		return 0x8213B7EC;
		  /* 8213B7ECh */ case   23:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B7ECh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B7ECh case   23:*/		return 0x8213B7F0;
		  /* 8213B7F0h */ case   24:  		/* stw R24, <#[R11 + 56]> */
		/* 8213B7F0h case   24:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000038) );
		/* 8213B7F0h case   24:*/		return 0x8213B7F4;
		  /* 8213B7F4h */ case   25:  		/* lwz R10, <#[R30 + 60]> */
		/* 8213B7F4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B7F4h case   25:*/		return 0x8213B7F8;
		  /* 8213B7F8h */ case   26:  		/* stw R10, <#[R11 + 60]> */
		/* 8213B7F8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213B7F8h case   26:*/		return 0x8213B7FC;
		  /* 8213B7FCh */ case   27:  		/* bc 12, CR6_EQ, 24 */
		/* 8213B7FCh case   27:*/		if ( regs.CR[6].eq ) { return 0x8213B814;  }
		/* 8213B7FCh case   27:*/		return 0x8213B800;
		  /* 8213B800h */ case   28:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B800h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B800h case   28:*/		return 0x8213B804;
		  /* 8213B804h */ case   29:  		/* rlwinm R9, R24, 2, 0, 29 */
		/* 8213B804h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R24);
		/* 8213B804h case   29:*/		return 0x8213B808;
		  /* 8213B808h */ case   30:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8213B808h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213B808h case   30:*/		return 0x8213B80C;
		  /* 8213B80Ch */ case   31:  		/* lwz R10, <#[R10 + 4]> */
		/* 8213B80Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8213B80Ch case   31:*/		return 0x8213B810;
		  /* 8213B810h */ case   32:  		/* stw R10, <#[R11 + 4]> */
		/* 8213B810h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213B810h case   32:*/		return 0x8213B814;
	}
	return 0x8213B814;
} // Block from 8213B790h-8213B814h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8213B814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B814);
		  /* 8213B814h */ case    0:  		/* rlwinm R11, R20, 1, 0, 30 */
		/* 8213B814h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R20);
		/* 8213B814h case    0:*/		return 0x8213B818;
		  /* 8213B818h */ case    1:  		/* lwz R10, <#[R17 + 8]> */
		/* 8213B818h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B818h case    1:*/		return 0x8213B81C;
		  /* 8213B81Ch */ case    2:  		/* add R11, R11, R29 */
		/* 8213B81Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8213B81Ch case    2:*/		return 0x8213B820;
		  /* 8213B820h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B820h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B820h case    3:*/		return 0x8213B824;
		  /* 8213B824h */ case    4:  		/* stwx R3, <#[R11 + R10]> */
		/* 8213B824h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B824h case    4:*/		return 0x8213B828;
		  /* 8213B828h */ case    5:  		/* b 124 */
		/* 8213B828h case    5:*/		return 0x8213B8A4;
		/* 8213B828h case    5:*/		return 0x8213B82C;
	}
	return 0x8213B82C;
} // Block from 8213B814h-8213B82Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213B82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B82C);
		  /* 8213B82Ch */ case    0:  		/* addi R11, R1, 144 */
		/* 8213B82Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8213B82Ch case    0:*/		return 0x8213B830;
		  /* 8213B830h */ case    1:  		/* lwzx R11, <#[R27 + R11]> */
		/* 8213B830h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 8213B830h case    1:*/		return 0x8213B834;
		  /* 8213B834h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 8213B834h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213B834h case    2:*/		return 0x8213B838;
		  /* 8213B838h */ case    3:  		/* bc 12, CR6_EQ, 116 */
		/* 8213B838h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213B8AC;  }
		/* 8213B838h case    3:*/		return 0x8213B83C;
		  /* 8213B83Ch */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B83Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B83Ch case    4:*/		return 0x8213B840;
		  /* 8213B840h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B840h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B840h case    5:*/		return 0x8213B844;
		  /* 8213B844h */ case    6:  		/* li R5, 0 */
		/* 8213B844h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213B844h case    6:*/		return 0x8213B848;
		  /* 8213B848h */ case    7:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213B848h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213B848h case    7:*/		return 0x8213B84C;
		  /* 8213B84Ch */ case    8:  		/* mr R3, R31 */
		/* 8213B84Ch case    8:*/		regs.R3 = regs.R31;
		/* 8213B84Ch case    8:*/		return 0x8213B850;
		  /* 8213B850h */ case    9:  		/* fmr FR1, FR31 */
		/* 8213B850h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213B850h case    9:*/		return 0x8213B854;
		  /* 8213B854h */ case   10:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8213B854h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B854h case   10:*/		return 0x8213B858;
		  /* 8213B858h */ case   11:  		/* lwz R6, <#[R30 + 16]> */
		/* 8213B858h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 8213B858h case   11:*/		return 0x8213B85C;
		  /* 8213B85Ch */ case   12:  		/* bl -255540 */
		/* 8213B85Ch case   12:*/		regs.LR = 0x8213B860; return 0x820FD228;
		/* 8213B85Ch case   12:*/		return 0x8213B860;
		  /* 8213B860h */ case   13:  		/* cmpwi CR6, R3, -1 */
		/* 8213B860h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213B860h case   13:*/		return 0x8213B864;
		  /* 8213B864h */ case   14:  		/* bc 12, CR6_EQ, -1652 */
		/* 8213B864h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213B1F0;  }
		/* 8213B864h case   14:*/		return 0x8213B868;
		  /* 8213B868h */ case   15:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213B868h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B868h case   15:*/		return 0x8213B86C;
		  /* 8213B86Ch */ case   16:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213B86Ch case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213B86Ch case   16:*/		return 0x8213B870;
		  /* 8213B870h */ case   17:  		/* cmpwi CR6, R22, -1 */
		/* 8213B870h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R22,0xFFFFFFFF);
		/* 8213B870h case   17:*/		return 0x8213B874;
		  /* 8213B874h */ case   18:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213B874h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213B874h case   18:*/		return 0x8213B878;
		  /* 8213B878h */ case   19:  		/* stw R22, <#[R11 + 56]> */
		/* 8213B878h case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000038) );
		/* 8213B878h case   19:*/		return 0x8213B87C;
		  /* 8213B87Ch */ case   20:  		/* lwz R10, <#[R30 + 60]> */
		/* 8213B87Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000003C) );
		/* 8213B87Ch case   20:*/		return 0x8213B880;
		  /* 8213B880h */ case   21:  		/* stw R10, <#[R11 + 60]> */
		/* 8213B880h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213B880h case   21:*/		return 0x8213B884;
		  /* 8213B884h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 8213B884h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213B89C;  }
		/* 8213B884h case   22:*/		return 0x8213B888;
		  /* 8213B888h */ case   23:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B888h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B888h case   23:*/		return 0x8213B88C;
		  /* 8213B88Ch */ case   24:  		/* rlwinm R9, R22, 2, 0, 29 */
		/* 8213B88Ch case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R22);
		/* 8213B88Ch case   24:*/		return 0x8213B890;
		  /* 8213B890h */ case   25:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8213B890h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213B890h case   25:*/		return 0x8213B894;
		  /* 8213B894h */ case   26:  		/* lwz R10, <#[R10 + 4]> */
		/* 8213B894h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8213B894h case   26:*/		return 0x8213B898;
	}
	return 0x8213B898;
} // Block from 8213B82Ch-8213B898h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213B898h
// Function '?GenerateCode@CPSLegacyProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B898);
		  /* 8213B898h */ case    0:  		/* stw R10, <#[R11 + 4]> */
		/* 8213B898h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213B898h case    0:*/		return 0x8213B89C;
	}
	return 0x8213B89C;
} // Block from 8213B898h-8213B89Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B89C);
		  /* 8213B89Ch */ case    0:  		/* lwz R11, <#[R17 + 8]> */
		/* 8213B89Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 8213B89Ch case    0:*/		return 0x8213B8A0;
		  /* 8213B8A0h */ case    1:  		/* stwx R3, <#[R11 + R28]> */
		/* 8213B8A0h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213B8A0h case    1:*/		return 0x8213B8A4;
	}
	return 0x8213B8A4;
} // Block from 8213B89Ch-8213B8A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213B8A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B8A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B8A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B8A4);
		  /* 8213B8A4h */ case    0:  		/* addi R28, R28, 4 */
		/* 8213B8A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213B8A4h case    0:*/		return 0x8213B8A8;
		  /* 8213B8A8h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213B8A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213B8A8h case    1:*/		return 0x8213B8AC;
	}
	return 0x8213B8AC;
} // Block from 8213B8A4h-8213B8ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213B8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B8AC);
		  /* 8213B8ACh */ case    0:  		/* addi R27, R27, 4 */
		/* 8213B8ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8213B8ACh case    0:*/		return 0x8213B8B0;
		  /* 8213B8B0h */ case    1:  		/* cmplwi CR6, R27, 16 */
		/* 8213B8B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000010);
		/* 8213B8B0h case    1:*/		return 0x8213B8B4;
		  /* 8213B8B4h */ case    2:  		/* bc 12, CR6_LT, -272 */
		/* 8213B8B4h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213B7A4;  }
		/* 8213B8B4h case    2:*/		return 0x8213B8B8;
		  /* 8213B8B8h */ case    3:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B8B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B8B8h case    3:*/		return 0x8213B8BC;
		  /* 8213B8BCh */ case    4:  		/* cmplwi CR6, R11, 512 */
		/* 8213B8BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213B8BCh case    4:*/		return 0x8213B8C0;
		  /* 8213B8C0h */ case    5:  		/* bc 4, CR6_LT, -1744 */
		/* 8213B8C0h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8213B1F0;  }
		/* 8213B8C0h case    5:*/		return 0x8213B8C4;
		  /* 8213B8C4h */ case    6:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B8C4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B8C4h case    6:*/		return 0x8213B8C8;
		  /* 8213B8C8h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B8C8h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B8C8h case    7:*/		return 0x8213B8CC;
		  /* 8213B8CCh */ case    8:  		/* mr R4, R17 */
		/* 8213B8CCh case    8:*/		regs.R4 = regs.R17;
		/* 8213B8CCh case    8:*/		return 0x8213B8D0;
		  /* 8213B8D0h */ case    9:  		/* mr R3, R31 */
		/* 8213B8D0h case    9:*/		regs.R3 = regs.R31;
		/* 8213B8D0h case    9:*/		return 0x8213B8D4;
		  /* 8213B8D4h */ case   10:  		/* stwx R17, <#[R11 + R10]> */
		/* 8213B8D4h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B8D4h case   10:*/		return 0x8213B8D8;
		  /* 8213B8D8h */ case   11:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213B8D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B8D8h case   11:*/		return 0x8213B8DC;
		  /* 8213B8DCh */ case   12:  		/* addi R11, R11, 1 */
		/* 8213B8DCh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213B8DCh case   12:*/		return 0x8213B8E0;
		  /* 8213B8E0h */ case   13:  		/* stw R11, <#[R31 + 552]> */
		/* 8213B8E0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B8E0h case   13:*/		return 0x8213B8E4;
		  /* 8213B8E4h */ case   14:  		/* bl -256044 */
		/* 8213B8E4h case   14:*/		regs.LR = 0x8213B8E8; return 0x820FD0B8;
		/* 8213B8E4h case   14:*/		return 0x8213B8E8;
		  /* 8213B8E8h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8213B8E8h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213B8E8h case   15:*/		return 0x8213B8EC;
		  /* 8213B8ECh */ case   16:  		/* bc 12, CR0_LT, -1788 */
		/* 8213B8ECh case   16:*/		if ( regs.CR[0].lt ) { return 0x8213B1F0;  }
		/* 8213B8ECh case   16:*/		return 0x8213B8F0;
		  /* 8213B8F0h */ case   17:  		/* mr R17, R14 */
		/* 8213B8F0h case   17:*/		regs.R17 = regs.R14;
		/* 8213B8F0h case   17:*/		return 0x8213B8F4;
	}
	return 0x8213B8F4;
} // Block from 8213B8ACh-8213B8F4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213B8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B8F4);
		  /* 8213B8F4h */ case    0:  		/* lwz R21, <#[R1 + 108]> */
		/* 8213B8F4h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x0000006C) );
		/* 8213B8F4h case    0:*/		return 0x8213B8F8;
		  /* 8213B8F8h */ case    1:  		/* lwz R22, <#[R1 + 100]> */
		/* 8213B8F8h case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 8213B8F8h case    1:*/		return 0x8213B8FC;
		  /* 8213B8FCh */ case    2:  		/* cmplwi CR6, R18, 0 */
		/* 8213B8FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8213B8FCh case    2:*/		return 0x8213B900;
		  /* 8213B900h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 8213B900h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213B94C;  }
		/* 8213B900h case    3:*/		return 0x8213B904;
		  /* 8213B904h */ case    4:  		/* lwz R11, <#[R18 + 12]> */
		/* 8213B904h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000000C) );
		/* 8213B904h case    4:*/		return 0x8213B908;
	}
	return 0x8213B908;
} // Block from 8213B8F4h-8213B908h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213B908h
// Function '?Translate@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B908);
		  /* 8213B908h */ case    0:  		/* mr R10, R14 */
		/* 8213B908h case    0:*/		regs.R10 = regs.R14;
		/* 8213B908h case    0:*/		return 0x8213B90C;
		  /* 8213B90Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213B90Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213B90Ch case    1:*/		return 0x8213B910;
		  /* 8213B910h */ case    2:  		/* bc 4, CR6_GT, 60 */
		/* 8213B910h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8213B94C;  }
		/* 8213B910h case    2:*/		return 0x8213B914;
		  /* 8213B914h */ case    3:  		/* mr R11, R14 */
		/* 8213B914h case    3:*/		regs.R11 = regs.R14;
		/* 8213B914h case    3:*/		return 0x8213B918;
		  /* 8213B918h */ case    4:  		/* lwz R8, <#[R18 + 16]> */
		/* 8213B918h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x00000010) );
		/* 8213B918h case    4:*/		return 0x8213B91C;
		  /* 8213B91Ch */ case    5:  		/* addi R10, R10, 1 */
		/* 8213B91Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213B91Ch case    5:*/		return 0x8213B920;
		  /* 8213B920h */ case    6:  		/* lwz R7, <#[R31 + 20]> */
		/* 8213B920h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B920h case    6:*/		return 0x8213B924;
		  /* 8213B924h */ case    7:  		/* lwz R9, <#[R31 + 552]> */
		/* 8213B924h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000228) );
		/* 8213B924h case    7:*/		return 0x8213B928;
		  /* 8213B928h */ case    8:  		/* addi R9, R9, -1 */
		/* 8213B928h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8213B928h case    8:*/		return 0x8213B92C;
		  /* 8213B92Ch */ case    9:  		/* lwzx R8, <#[R8 + R11]> */
		/* 8213B92Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8213B92Ch case    9:*/		return 0x8213B930;
		  /* 8213B930h */ case   10:  		/* addi R11, R11, 4 */
		/* 8213B930h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B930h case   10:*/		return 0x8213B934;
		  /* 8213B934h */ case   11:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213B934h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213B934h case   11:*/		return 0x8213B938;
		  /* 8213B938h */ case   12:  		/* lwzx R8, <#[R8 + R7]> */
		/* 8213B938h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8213B938h case   12:*/		return 0x8213B93C;
		  /* 8213B93Ch */ case   13:  		/* stw R9, <#[R8 + 72]> */
		/* 8213B93Ch case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000048) );
		/* 8213B93Ch case   13:*/		return 0x8213B940;
		  /* 8213B940h */ case   14:  		/* lwz R9, <#[R18 + 12]> */
		/* 8213B940h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x0000000C) );
		/* 8213B940h case   14:*/		return 0x8213B944;
		  /* 8213B944h */ case   15:  		/* cmplw CR6, R10, R9 */
		/* 8213B944h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213B944h case   15:*/		return 0x8213B948;
		  /* 8213B948h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 8213B948h case   16:*/		if ( regs.CR[6].lt ) { return 0x8213B918;  }
		/* 8213B948h case   16:*/		return 0x8213B94C;
	}
	return 0x8213B94C;
} // Block from 8213B908h-8213B94Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213B94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B94C);
		  /* 8213B94Ch */ case    0:  		/* addi R22, R22, 1 */
		/* 8213B94Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8213B94Ch case    0:*/		return 0x8213B950;
		  /* 8213B950h */ case    1:  		/* stw R22, <#[R1 + 100]> */
		/* 8213B950h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 8213B950h case    1:*/		return 0x8213B954;
		  /* 8213B954h */ case    2:  		/* cmplw CR6, R22, R21 */
		/* 8213B954h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 8213B954h case    2:*/		return 0x8213B958;
		  /* 8213B958h */ case    3:  		/* bc 12, CR6_LT, -2440 */
		/* 8213B958h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213AFD0;  }
		/* 8213B958h case    3:*/		return 0x8213B95C;
	}
	return 0x8213B95C;
} // Block from 8213B94Ch-8213B95Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B95C);
		  /* 8213B95Ch */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 8213B95Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213B95Ch case    0:*/		return 0x8213B960;
		  /* 8213B960h */ case    1:  		/* cmplw CR6, R11, R21 */
		/* 8213B960h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8213B960h case    1:*/		return 0x8213B964;
		  /* 8213B964h */ case    2:  		/* bc 4, CR6_LT, 36 */
		/* 8213B964h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213B988;  }
		/* 8213B964h case    2:*/		return 0x8213B968;
		  /* 8213B968h */ case    3:  		/* subf R10, R11, R21 */
		/* 8213B968h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 8213B968h case    3:*/		return 0x8213B96C;
		  /* 8213B96Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B96Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B96Ch case    4:*/		return 0x8213B970;
		  /* 8213B970h */ case    5:  		/* mtspr CTR, R10 */
		/* 8213B970h case    5:*/		regs.CTR = regs.R10;
		/* 8213B970h case    5:*/		return 0x8213B974;
		  /* 8213B974h */ case    6:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213B974h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213B974h case    6:*/		return 0x8213B978;
		  /* 8213B978h */ case    7:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8213B978h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B978h case    7:*/		return 0x8213B97C;
		  /* 8213B97Ch */ case    8:  		/* addi R11, R11, 4 */
		/* 8213B97Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213B97Ch case    8:*/		return 0x8213B980;
		  /* 8213B980h */ case    9:  		/* stw R14, <#[R10]> */
		/* 8213B980h case    9:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R10 + 0x00000000) );
		/* 8213B980h case    9:*/		return 0x8213B984;
		  /* 8213B984h */ case   10:  		/* bc 16, CR0_LT, -16 */
		/* 8213B984h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213B974;  }
		/* 8213B984h case   10:*/		return 0x8213B988;
	}
	return 0x8213B988;
} // Block from 8213B95Ch-8213B988h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213B988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B988);
		  /* 8213B988h */ case    0:  		/* mr R21, R14 */
		/* 8213B988h case    0:*/		regs.R21 = regs.R14;
		/* 8213B988h case    0:*/		return 0x8213B98C;
	}
	return 0x8213B98C;
} // Block from 8213B988h-8213B98Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213B98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B98C);
		  /* 8213B98Ch */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8213B98Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8213B98Ch case    0:*/		return 0x8213B990;
		  /* 8213B990h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8213B990h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213B9A4;  }
		/* 8213B990h case    1:*/		return 0x8213B994;
		  /* 8213B994h */ case    2:  		/* mr R3, R17 */
		/* 8213B994h case    2:*/		regs.R3 = regs.R17;
		/* 8213B994h case    2:*/		return 0x8213B998;
		  /* 8213B998h */ case    3:  		/* bl 924200 */
		/* 8213B998h case    3:*/		regs.LR = 0x8213B99C; return 0x8221D3C0;
		/* 8213B998h case    3:*/		return 0x8213B99C;
		  /* 8213B99Ch */ case    4:  		/* mr R3, R17 */
		/* 8213B99Ch case    4:*/		regs.R3 = regs.R17;
		/* 8213B99Ch case    4:*/		return 0x8213B9A0;
		  /* 8213B9A0h */ case    5:  		/* bl -258992 */
		/* 8213B9A0h case    5:*/		regs.LR = 0x8213B9A4; return 0x820FC5F0;
		/* 8213B9A0h case    5:*/		return 0x8213B9A4;
	}
	return 0x8213B9A4;
} // Block from 8213B98Ch-8213B9A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213B9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B9A4);
		  /* 8213B9A4h */ case    0:  		/* lwz R31, <#[R1 + 96]> */
		/* 8213B9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8213B9A4h case    0:*/		return 0x8213B9A8;
		  /* 8213B9A8h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8213B9A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213B9A8h case    1:*/		return 0x8213B9AC;
		  /* 8213B9ACh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8213B9ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8213B9C0;  }
		/* 8213B9ACh case    2:*/		return 0x8213B9B0;
		  /* 8213B9B0h */ case    3:  		/* mr R3, R31 */
		/* 8213B9B0h case    3:*/		regs.R3 = regs.R31;
		/* 8213B9B0h case    3:*/		return 0x8213B9B4;
		  /* 8213B9B4h */ case    4:  		/* bl 924172 */
		/* 8213B9B4h case    4:*/		regs.LR = 0x8213B9B8; return 0x8221D3C0;
		/* 8213B9B4h case    4:*/		return 0x8213B9B8;
		  /* 8213B9B8h */ case    5:  		/* mr R3, R31 */
		/* 8213B9B8h case    5:*/		regs.R3 = regs.R31;
		/* 8213B9B8h case    5:*/		return 0x8213B9BC;
		  /* 8213B9BCh */ case    6:  		/* bl -259020 */
		/* 8213B9BCh case    6:*/		regs.LR = 0x8213B9C0; return 0x820FC5F0;
		/* 8213B9BCh case    6:*/		return 0x8213B9C0;
	}
	return 0x8213B9C0;
} // Block from 8213B9A4h-8213B9C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213B9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B9C0);
		  /* 8213B9C0h */ case    0:  		/* mr R3, R21 */
		/* 8213B9C0h case    0:*/		regs.R3 = regs.R21;
		/* 8213B9C0h case    0:*/		return 0x8213B9C4;
		  /* 8213B9C4h */ case    1:  		/* addi R1, R1, 496 */
		/* 8213B9C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1F0);
		/* 8213B9C4h case    1:*/		return 0x8213B9C8;
		  /* 8213B9C8h */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8213B9C8h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8213B9C8h case    2:*/		return 0x8213B9CC;
		  /* 8213B9CCh */ case    3:  		/* b -698204 */
		/* 8213B9CCh case    3:*/		return 0x82091270;
		/* 8213B9CCh case    3:*/		return 0x8213B9D0;
	}
	return 0x8213B9D0;
} // Block from 8213B9C0h-8213B9D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213B9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213B9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213B9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213B9D0);
		  /* 8213B9D0h */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 8213B9D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8213B9D0h case    0:*/		return 0x8213B9D4;
		  /* 8213B9D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213B9D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213B9D4h case    1:*/		return 0x8213B9D8;
		  /* 8213B9D8h */ case    2:  		/* bc 12, CR6_EQ, -220 */
		/* 8213B9D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213B8FC;  }
		/* 8213B9D8h case    2:*/		return 0x8213B9DC;
		  /* 8213B9DCh */ case    3:  		/* mtspr CTR, R11 */
		/* 8213B9DCh case    3:*/		regs.CTR = regs.R11;
		/* 8213B9DCh case    3:*/		return 0x8213B9E0;
		  /* 8213B9E0h */ case    4:  		/* addi R8, R1, 208 */
		/* 8213B9E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD0);
		/* 8213B9E0h case    4:*/		return 0x8213B9E4;
		  /* 8213B9E4h */ case    5:  		/* lwz R11, <#[R8]> */
		/* 8213B9E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8213B9E4h case    5:*/		return 0x8213B9E8;
		  /* 8213B9E8h */ case    6:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213B9E8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213B9E8h case    6:*/		return 0x8213B9EC;
		  /* 8213B9ECh */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213B9ECh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213B9ECh case    7:*/		return 0x8213B9F0;
		  /* 8213B9F0h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213B9F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213B9F0h case    8:*/		return 0x8213B9F4;
		  /* 8213B9F4h */ case    9:  		/* lwz R9, <#[R11 + 56]> */
		/* 8213B9F4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000038) );
		/* 8213B9F4h case    9:*/		return 0x8213B9F8;
		  /* 8213B9F8h */ case   10:  		/* cmpwi CR6, R9, -1 */
		/* 8213B9F8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8213B9F8h case   10:*/		return 0x8213B9FC;
		  /* 8213B9FCh */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8213B9FCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8213BA08;  }
		/* 8213B9FCh case   11:*/		return 0x8213BA00;
		  /* 8213BA00h */ case   12:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 8213BA00h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 8213BA00h case   12:*/		return 0x8213BA04;
		  /* 8213BA04h */ case   13:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213BA04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213BA04h case   13:*/		return 0x8213BA08;
	}
	return 0x8213BA08;
} // Block from 8213B9D0h-8213BA08h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA08);
		  /* 8213BA08h */ case    0:  		/* li R10, 1 */
		/* 8213BA08h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8213BA08h case    0:*/		return 0x8213BA0C;
		  /* 8213BA0Ch */ case    1:  		/* addi R8, R8, 4 */
		/* 8213BA0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213BA0Ch case    1:*/		return 0x8213BA10;
		  /* 8213BA10h */ case    2:  		/* stw R10, <#[R11 + 48]> */
		/* 8213BA10h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8213BA10h case    2:*/		return 0x8213BA14;
		  /* 8213BA14h */ case    3:  		/* bc 16, CR0_LT, -48 */
		/* 8213BA14h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213B9E4;  }
		/* 8213BA14h case    3:*/		return 0x8213BA18;
		  /* 8213BA18h */ case    4:  		/* b -284 */
		/* 8213BA18h case    4:*/		return 0x8213B8FC;
		/* 8213BA18h case    4:*/		return 0x8213BA1C;
	}
	return 0x8213BA1C;
} // Block from 8213BA08h-8213BA1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA1C);
		  /* 8213BA1Ch */ case    0:  		/* mr R3, R30 */
		/* 8213BA1Ch case    0:*/		regs.R3 = regs.R30;
		/* 8213BA1Ch case    0:*/		return 0x8213BA20;
		  /* 8213BA20h */ case    1:  		/* bl 924064 */
		/* 8213BA20h case    1:*/		regs.LR = 0x8213BA24; return 0x8221D3C0;
		/* 8213BA20h case    1:*/		return 0x8213BA24;
		  /* 8213BA24h */ case    2:  		/* mr R3, R30 */
		/* 8213BA24h case    2:*/		regs.R3 = regs.R30;
		/* 8213BA24h case    2:*/		return 0x8213BA28;
		  /* 8213BA28h */ case    3:  		/* b -136 */
		/* 8213BA28h case    3:*/		return 0x8213B9A0;
		/* 8213BA28h case    3:*/		return 0x8213BA2C;
	}
	return 0x8213BA2C;
} // Block from 8213BA1Ch-8213BA2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA2C);
		  /* 8213BA2Ch */ case    0:  		/* lis R11, -32253 */
		/* 8213BA2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213BA2Ch case    0:*/		return 0x8213BA30;
	}
	return 0x8213BA30;
} // Block from 8213BA2Ch-8213BA30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA30h
// Function '?EmmulateWriteMasksX@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA30);
		  /* 8213BA30h */ case    0:  		/* lbz R7, <#[R31 + 203]> */
		/* 8213BA30h case    0:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000CB) );
		/* 8213BA30h case    0:*/		return 0x8213BA34;
		  /* 8213BA34h */ case    1:  		/* li R5, 4537 */
		/* 8213BA34h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11B9);
		/* 8213BA34h case    1:*/		return 0x8213BA38;
		  /* 8213BA38h */ case    2:  		/* lwz R4, <#[R19 + 60]> */
		/* 8213BA38h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x0000003C) );
		/* 8213BA38h case    2:*/		return 0x8213BA3C;
		  /* 8213BA3Ch */ case    3:  		/* addi R6, R11, 22892 */
		/* 8213BA3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x596C);
		/* 8213BA3Ch case    3:*/		return 0x8213BA40;
		  /* 8213BA40h */ case    4:  		/* mr R3, R31 */
		/* 8213BA40h case    4:*/		regs.R3 = regs.R31;
		/* 8213BA40h case    4:*/		return 0x8213BA44;
		  /* 8213BA44h */ case    5:  		/* bl -185108 */
		/* 8213BA44h case    5:*/		regs.LR = 0x8213BA48; return 0x8210E730;
		/* 8213BA44h case    5:*/		return 0x8213BA48;
		  /* 8213BA48h */ case    6:  		/* lis R21, -32768 */
		/* 8213BA48h case    6:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8000);
		/* 8213BA48h case    6:*/		return 0x8213BA4C;
		  /* 8213BA4Ch */ case    7:  		/* ori R21, R21, 16389 */
		/* 8213BA4Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x4005);
		/* 8213BA4Ch case    7:*/		return 0x8213BA50;
		  /* 8213BA50h */ case    8:  		/* b -144 */
		/* 8213BA50h case    8:*/		return 0x8213B9C0;
		/* 8213BA50h case    8:*/		return 0x8213BA54;
	}
	return 0x8213BA54;
} // Block from 8213BA30h-8213BA54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA54);
		  /* 8213BA54h */ case    0:  		/* lis R21, -32761 */
		/* 8213BA54h case    0:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8007);
		/* 8213BA54h case    0:*/		return 0x8213BA58;
		  /* 8213BA58h */ case    1:  		/* ori R21, R21, 14 */
		/* 8213BA58h case    1:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0xE);
		/* 8213BA58h case    1:*/		return 0x8213BA5C;
		  /* 8213BA5Ch */ case    2:  		/* b -156 */
		/* 8213BA5Ch case    2:*/		return 0x8213B9C0;
		/* 8213BA5Ch case    2:*/		return 0x8213BA60;
	}
	return 0x8213BA60;
} // Block from 8213BA54h-8213BA60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA60);
		  /* 8213BA60h */ case    0:  		/* lis R11, -32253 */
		/* 8213BA60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213BA60h case    0:*/		return 0x8213BA64;
		  /* 8213BA64h */ case    1:  		/* lwz R4, <#[R19 + 60]> */
		/* 8213BA64h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x0000003C) );
		/* 8213BA64h case    1:*/		return 0x8213BA68;
		  /* 8213BA68h */ case    2:  		/* li R5, 4810 */
		/* 8213BA68h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x12CA);
		/* 8213BA68h case    2:*/		return 0x8213BA6C;
		  /* 8213BA6Ch */ case    3:  		/* addi R6, R11, 22852 */
		/* 8213BA6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5944);
		/* 8213BA6Ch case    3:*/		return 0x8213BA70;
		  /* 8213BA70h */ case    4:  		/* mr R3, R31 */
		/* 8213BA70h case    4:*/		regs.R3 = regs.R31;
		/* 8213BA70h case    4:*/		return 0x8213BA74;
		  /* 8213BA74h */ case    5:  		/* bl -185156 */
		/* 8213BA74h case    5:*/		regs.LR = 0x8213BA78; return 0x8210E730;
		/* 8213BA74h case    5:*/		return 0x8213BA78;
		  /* 8213BA78h */ case    6:  		/* b -236 */
		/* 8213BA78h case    6:*/		return 0x8213B98C;
		/* 8213BA78h case    6:*/		return 0x8213BA7C;
		  /* 8213BA7Ch */ case    7:  		/* nop */
		/* 8213BA7Ch case    7:*/		cpu::op::nop();
		/* 8213BA7Ch case    7:*/		return 0x8213BA80;
	}
	return 0x8213BA80;
} // Block from 8213BA60h-8213BA80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213BA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BA80);
		  /* 8213BA80h */ case    0:  		/* mfspr R12, LR */
		/* 8213BA80h case    0:*/		regs.R12 = regs.LR;
		/* 8213BA80h case    0:*/		return 0x8213BA84;
		  /* 8213BA84h */ case    1:  		/* bl -698460 */
		/* 8213BA84h case    1:*/		regs.LR = 0x8213BA88; return 0x82091228;
		/* 8213BA84h case    1:*/		return 0x8213BA88;
		  /* 8213BA88h */ case    2:  		/* stfd FR30, <#[R1 - 152]> */
		/* 8213BA88h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 8213BA88h case    2:*/		return 0x8213BA8C;
		  /* 8213BA8Ch */ case    3:  		/* stfd FR31, <#[R1 - 144]> */
		/* 8213BA8Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 8213BA8Ch case    3:*/		return 0x8213BA90;
		  /* 8213BA90h */ case    4:  		/* stwu R1, <#[R1 - 336]> */
		/* 8213BA90h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 8213BA90h case    4:*/		return 0x8213BA94;
		  /* 8213BA94h */ case    5:  		/* lwz R8, <#[R3 + 260]> */
		/* 8213BA94h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000104) );
		/* 8213BA94h case    5:*/		return 0x8213BA98;
		  /* 8213BA98h */ case    6:  		/* lis R7, -32256 */
		/* 8213BA98h case    6:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8213BA98h case    6:*/		return 0x8213BA9C;
		  /* 8213BA9Ch */ case    7:  		/* lwz R6, <#[R3 + 20]> */
		/* 8213BA9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000014) );
		/* 8213BA9Ch case    7:*/		return 0x8213BAA0;
		  /* 8213BAA0h */ case    8:  		/* mr R30, R3 */
		/* 8213BAA0h case    8:*/		regs.R30 = regs.R3;
		/* 8213BAA0h case    8:*/		return 0x8213BAA4;
		  /* 8213BAA4h */ case    9:  		/* lwz R10, <#[R3 + 16]> */
		/* 8213BAA4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8213BAA4h case    9:*/		return 0x8213BAA8;
		  /* 8213BAA8h */ case   10:  		/* li R20, 0 */
		/* 8213BAA8h case   10:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8213BAA8h case   10:*/		return 0x8213BAAC;
		  /* 8213BAACh */ case   11:  		/* lis R3, 8272 */
		/* 8213BAACh case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0x2050);
		/* 8213BAACh case   11:*/		return 0x8213BAB0;
		  /* 8213BAB0h */ case   12:  		/* mr R21, R20 */
		/* 8213BAB0h case   12:*/		regs.R21 = regs.R20;
		/* 8213BAB0h case   12:*/		return 0x8213BAB4;
		  /* 8213BAB4h */ case   13:  		/* lwz R11, <#[R8 + 8]> */
		/* 8213BAB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 8213BAB4h case   13:*/		return 0x8213BAB8;
		  /* 8213BAB8h */ case   14:  		/* lfs FR13, <#[R7 + 2752]> */
		/* 8213BAB8h case   14:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00000AC0) );
		/* 8213BAB8h case   14:*/		return 0x8213BABC;
		  /* 8213BABCh */ case   15:  		/* lwz R8, <#[R8]> */
		/* 8213BABCh case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8213BABCh case   15:*/		return 0x8213BAC0;
		  /* 8213BAC0h */ case   16:  		/* mr R5, R20 */
		/* 8213BAC0h case   16:*/		regs.R5 = regs.R20;
		/* 8213BAC0h case   16:*/		return 0x8213BAC4;
		  /* 8213BAC4h */ case   17:  		/* lwz R9, <#[R30 + 136]> */
		/* 8213BAC4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000088) );
		/* 8213BAC4h case   17:*/		return 0x8213BAC8;
		  /* 8213BAC8h */ case   18:  		/* mr R28, R20 */
		/* 8213BAC8h case   18:*/		regs.R28 = regs.R20;
		/* 8213BAC8h case   18:*/		return 0x8213BACC;
		  /* 8213BACCh */ case   19:  		/* rlwinm R23, R8, 0, 12, 31 */
		/* 8213BACCh case   19:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R23,regs.R8);
		/* 8213BACCh case   19:*/		return 0x8213BAD0;
		  /* 8213BAD0h */ case   20:  		/* lwz R7, <#[R11]> */
		/* 8213BAD0h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8213BAD0h case   20:*/		return 0x8213BAD4;
		  /* 8213BAD4h */ case   21:  		/* rlwinm R8, R23, 2, 0, 29 */
		/* 8213BAD4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R23);
		/* 8213BAD4h case   21:*/		return 0x8213BAD8;
		  /* 8213BAD8h */ case   22:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8213BAD8h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8213BAD8h case   22:*/		return 0x8213BADC;
		  /* 8213BADCh */ case   23:  		/* add R8, R8, R11 */
		/* 8213BADCh case   23:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8213BADCh case   23:*/		return 0x8213BAE0;
		  /* 8213BAE0h */ case   24:  		/* lwzx R7, <#[R7 + R6]> */
		/* 8213BAE0h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 8213BAE0h case   24:*/		return 0x8213BAE4;
		  /* 8213BAE4h */ case   25:  		/* lwz R4, <#[R8]> */
		/* 8213BAE4h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + 0x00000000) );
		/* 8213BAE4h case   25:*/		return 0x8213BAE8;
		  /* 8213BAE8h */ case   26:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 8213BAE8h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 8213BAE8h case   26:*/		return 0x8213BAEC;
		  /* 8213BAECh */ case   27:  		/* lwz R31, <#[R7 + 4]> */
		/* 8213BAECh case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R7 + 0x00000004) );
		/* 8213BAECh case   27:*/		return 0x8213BAF0;
		  /* 8213BAF0h */ case   28:  		/* rlwinm R29, R31, 2, 0, 29 */
		/* 8213BAF0h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R31);
		/* 8213BAF0h case   28:*/		return 0x8213BAF4;
		  /* 8213BAF4h */ case   29:  		/* lwzx R4, <#[R4 + R6]> */
		/* 8213BAF4h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R6 + 0x00000000) );
		/* 8213BAF4h case   29:*/		return 0x8213BAF8;
		  /* 8213BAF8h */ case   30:  		/* cmplw CR6, R31, R9 */
		/* 8213BAF8h case   30:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 8213BAF8h case   30:*/		return 0x8213BAFC;
		  /* 8213BAFCh */ case   31:  		/* lwzx R6, <#[R29 + R10]> */
		/* 8213BAFCh case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 8213BAFCh case   31:*/		return 0x8213BB00;
		  /* 8213BB00h */ case   32:  		/* bc 4, CR6_EQ, 144 */
		/* 8213BB00h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8213BB90;  }
		/* 8213BB00h case   32:*/		return 0x8213BB04;
		  /* 8213BB04h */ case   33:  		/* lwz R31, <#[R4 + 4]> */
		/* 8213BB04h case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 8213BB04h case   33:*/		return 0x8213BB08;
		  /* 8213BB08h */ case   34:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 8213BB08h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 8213BB08h case   34:*/		return 0x8213BB0C;
		  /* 8213BB0Ch */ case   35:  		/* lwzx R10, <#[R31 + R10]> */
		/* 8213BB0Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 8213BB0Ch case   35:*/		return 0x8213BB10;
		  /* 8213BB10h */ case   36:  		/* lwz R10, <#[R10 + 4]> */
		/* 8213BB10h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8213BB10h case   36:*/		return 0x8213BB14;
		  /* 8213BB14h */ case   37:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 8213BB14h case   37:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 8213BB14h case   37:*/		return 0x8213BB18;
		  /* 8213BB18h */ case   38:  		/* bc 12, CR0_EQ, 120 */
		/* 8213BB18h case   38:*/		if ( regs.CR[0].eq ) { return 0x8213BB90;  }
		/* 8213BB18h case   38:*/		return 0x8213BB1C;
		  /* 8213BB1Ch */ case   39:  		/* lwz R10, <#[R30 + 260]> */
		/* 8213BB1Ch case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 8213BB1Ch case   39:*/		return 0x8213BB20;
		  /* 8213BB20h */ case   40:  		/* lwz R10, <#[R10]> */
		/* 8213BB20h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8213BB20h case   40:*/		return 0x8213BB24;
		  /* 8213BB24h */ case   41:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213BB24h case   41:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213BB24h case   41:*/		return 0x8213BB28;
		  /* 8213BB28h */ case   42:  		/* cmplw CR6, R10, R3 */
		/* 8213BB28h case   42:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 8213BB28h case   42:*/		return 0x8213BB2C;
		  /* 8213BB2Ch */ case   43:  		/* bc 4, CR6_EQ, 100 */
		/* 8213BB2Ch case   43:*/		if ( !regs.CR[6].eq ) { return 0x8213BB90;  }
		/* 8213BB2Ch case   43:*/		return 0x8213BB30;
		  /* 8213BB30h */ case   44:  		/* mr R24, R11 */
		/* 8213BB30h case   44:*/		regs.R24 = regs.R11;
		/* 8213BB30h case   44:*/		return 0x8213BB34;
		  /* 8213BB34h */ case   45:  		/* mr R5, R8 */
		/* 8213BB34h case   45:*/		regs.R5 = regs.R8;
		/* 8213BB34h case   45:*/		return 0x8213BB38;
		  /* 8213BB38h */ case   46:  		/* lwz R11, <#[R5]> */
		/* 8213BB38h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8213BB38h case   46:*/		return 0x8213BB3C;
		  /* 8213BB3Ch */ case   47:  		/* lwz R10, <#[R30 + 20]> */
		/* 8213BB3Ch case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 8213BB3Ch case   47:*/		return 0x8213BB40;
		  /* 8213BB40h */ case   48:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213BB40h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213BB40h case   48:*/		return 0x8213BB44;
		  /* 8213BB44h */ case   49:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213BB44h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213BB44h case   49:*/		return 0x8213BB48;
		  /* 8213BB48h */ case   50:  		/* lfd FR0, <#[R11 + 32]> */
		/* 8213BB48h case   50:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 8213BB48h case   50:*/		return 0x8213BB4C;
		  /* 8213BB4Ch */ case   51:  		/* frsp FR31, FR0 */
		/* 8213BB4Ch case   51:*/		cpu::op::frsp<0>(regs,&regs.FR31,regs.FR0);
		/* 8213BB4Ch case   51:*/		return 0x8213BB50;
		  /* 8213BB50h */ case   52:  		/* mr R29, R20 */
		/* 8213BB50h case   52:*/		regs.R29 = regs.R20;
		/* 8213BB50h case   52:*/		return 0x8213BB54;
		  /* 8213BB54h */ case   53:  		/* cmplwi CR6, R23, 0 */
		/* 8213BB54h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213BB54h case   53:*/		return 0x8213BB58;
		  /* 8213BB58h */ case   54:  		/* bc 12, CR6_EQ, 444 */
		/* 8213BB58h case   54:*/		if ( regs.CR[6].eq ) { return 0x8213BD14;  }
		/* 8213BB58h case   54:*/		return 0x8213BB5C;
		  /* 8213BB5Ch */ case   55:  		/* addi R11, R1, 80 */
		/* 8213BB5Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213BB5Ch case   55:*/		return 0x8213BB60;
		  /* 8213BB60h */ case   56:  		/* lwz R6, <#[R30 + 20]> */
		/* 8213BB60h case   56:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000014) );
		/* 8213BB60h case   56:*/		return 0x8213BB64;
		  /* 8213BB64h */ case   57:  		/* lwz R31, <#[R30 + 256]> */
		/* 8213BB64h case   57:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000100) );
		/* 8213BB64h case   57:*/		return 0x8213BB68;
		  /* 8213BB68h */ case   58:  		/* mr R7, R5 */
		/* 8213BB68h case   58:*/		regs.R7 = regs.R5;
		/* 8213BB68h case   58:*/		return 0x8213BB6C;
		  /* 8213BB6Ch */ case   59:  		/* addi R3, R11, -4 */
		/* 8213BB6Ch case   59:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8213BB6Ch case   59:*/		return 0x8213BB70;
		  /* 8213BB70h */ case   60:  		/* subf R4, R5, R24 */
		/* 8213BB70h case   60:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R5,regs.R24);
		/* 8213BB70h case   60:*/		return 0x8213BB74;
		  /* 8213BB74h */ case   61:  		/* lwzx R11, <#[R4 + R7]> */
		/* 8213BB74h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 8213BB74h case   61:*/		return 0x8213BB78;
		  /* 8213BB78h */ case   62:  		/* cmpwi CR6, R28, 0 */
		/* 8213BB78h case   62:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8213BB78h case   62:*/		return 0x8213BB7C;
		  /* 8213BB7Ch */ case   63:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213BB7Ch case   63:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213BB7Ch case   63:*/		return 0x8213BB80;
		  /* 8213BB80h */ case   64:  		/* lwzx R8, <#[R11 + R6]> */
		/* 8213BB80h case   64:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8213BB80h case   64:*/		return 0x8213BB84;
		  /* 8213BB84h */ case   65:  		/* bc 12, CR6_EQ, 244 */
		/* 8213BB84h case   65:*/		if ( regs.CR[6].eq ) { return 0x8213BC78;  }
		/* 8213BB84h case   65:*/		return 0x8213BB88;
		  /* 8213BB88h */ case   66:  		/* mr R5, R20 */
		/* 8213BB88h case   66:*/		regs.R5 = regs.R20;
		/* 8213BB88h case   66:*/		return 0x8213BB8C;
		  /* 8213BB8Ch */ case   67:  		/* b 248 */
		/* 8213BB8Ch case   67:*/		return 0x8213BC84;
		/* 8213BB8Ch case   67:*/		return 0x8213BB90;
	}
	return 0x8213BB90;
} // Block from 8213BA80h-8213BB90h (68 instructions)

//////////////////////////////////////////////////////
// Block at 8213BB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BB90);
		  /* 8213BB90h */ case    0:  		/* lwz R10, <#[R4 + 4]> */
		/* 8213BB90h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 8213BB90h case    0:*/		return 0x8213BB94;
		  /* 8213BB94h */ case    1:  		/* cmplw CR6, R10, R9 */
		/* 8213BB94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213BB94h case    1:*/		return 0x8213BB98;
		  /* 8213BB98h */ case    2:  		/* bc 4, CR6_EQ, 48 */
		/* 8213BB98h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213BBC8;  }
		/* 8213BB98h case    2:*/		return 0x8213BB9C;
		  /* 8213BB9Ch */ case    3:  		/* lwz R6, <#[R6 + 4]> */
		/* 8213BB9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 8213BB9Ch case    3:*/		return 0x8213BBA0;
		  /* 8213BBA0h */ case    4:  		/* rlwinm. R6, R6, 0, 23, 23 */
		/* 8213BBA0h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R6,regs.R6);
		/* 8213BBA0h case    4:*/		return 0x8213BBA4;
		  /* 8213BBA4h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8213BBA4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8213BBC8;  }
		/* 8213BBA4h case    5:*/		return 0x8213BBA8;
		  /* 8213BBA8h */ case    6:  		/* lwz R6, <#[R30 + 260]> */
		/* 8213BBA8h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000104) );
		/* 8213BBA8h case    6:*/		return 0x8213BBAC;
		  /* 8213BBACh */ case    7:  		/* lwz R6, <#[R6]> */
		/* 8213BBACh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000000) );
		/* 8213BBACh case    7:*/		return 0x8213BBB0;
		  /* 8213BBB0h */ case    8:  		/* rlwinm R6, R6, 0, 0, 11 */
		/* 8213BBB0h case    8:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R6);
		/* 8213BBB0h case    8:*/		return 0x8213BBB4;
		  /* 8213BBB4h */ case    9:  		/* cmplw CR6, R6, R3 */
		/* 8213BBB4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R3);
		/* 8213BBB4h case    9:*/		return 0x8213BBB8;
		  /* 8213BBB8h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 8213BBB8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213BBC8;  }
		/* 8213BBB8h case   10:*/		return 0x8213BBBC;
		  /* 8213BBBCh */ case   11:  		/* mr R24, R8 */
		/* 8213BBBCh case   11:*/		regs.R24 = regs.R8;
		/* 8213BBBCh case   11:*/		return 0x8213BBC0;
		  /* 8213BBC0h */ case   12:  		/* mr R5, R11 */
		/* 8213BBC0h case   12:*/		regs.R5 = regs.R11;
		/* 8213BBC0h case   12:*/		return 0x8213BBC4;
		  /* 8213BBC4h */ case   13:  		/* b -140 */
		/* 8213BBC4h case   13:*/		return 0x8213BB38;
		/* 8213BBC4h case   13:*/		return 0x8213BBC8;
	}
	return 0x8213BBC8;
} // Block from 8213BB90h-8213BBC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213BBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BBC8);
		  /* 8213BBC8h */ case    0:  		/* lwz R6, <#[R7 + 4]> */
		/* 8213BBC8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000004) );
		/* 8213BBC8h case    0:*/		return 0x8213BBCC;
		  /* 8213BBCCh */ case    1:  		/* cmplw CR6, R6, R9 */
		/* 8213BBCCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 8213BBCCh case    1:*/		return 0x8213BBD0;
		  /* 8213BBD0h */ case    2:  		/* bc 4, CR6_EQ, 1424 */
		/* 8213BBD0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BBD0h case    2:*/		return 0x8213BBD4;
		  /* 8213BBD4h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 8213BBD4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213BBD4h case    3:*/		return 0x8213BBD8;
		  /* 8213BBD8h */ case    4:  		/* bc 4, CR6_EQ, 1416 */
		/* 8213BBD8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BBD8h case    4:*/		return 0x8213BBDC;
		  /* 8213BBDCh */ case    5:  		/* lwz R10, <#[R30 + 260]> */
		/* 8213BBDCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 8213BBDCh case    5:*/		return 0x8213BBE0;
		  /* 8213BBE0h */ case    6:  		/* lis R9, 8256 */
		/* 8213BBE0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x2040);
		/* 8213BBE0h case    6:*/		return 0x8213BBE4;
		  /* 8213BBE4h */ case    7:  		/* lwz R10, <#[R10]> */
		/* 8213BBE4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8213BBE4h case    7:*/		return 0x8213BBE8;
		  /* 8213BBE8h */ case    8:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213BBE8h case    8:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213BBE8h case    8:*/		return 0x8213BBEC;
		  /* 8213BBECh */ case    9:  		/* cmplw CR6, R10, R9 */
		/* 8213BBECh case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213BBECh case    9:*/		return 0x8213BBF0;
		  /* 8213BBF0h */ case   10:  		/* bc 4, CR6_EQ, 1392 */
		/* 8213BBF0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BBF0h case   10:*/		return 0x8213BBF4;
		  /* 8213BBF4h */ case   11:  		/* li R28, 1 */
		/* 8213BBF4h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8213BBF4h case   11:*/		return 0x8213BBF8;
		  /* 8213BBF8h */ case   12:  		/* cmplwi CR6, R23, 0 */
		/* 8213BBF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213BBF8h case   12:*/		return 0x8213BBFC;
		  /* 8213BBFCh */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 8213BBFCh case   13:*/		if ( regs.CR[6].eq ) { return 0x8213BC2C;  }
		/* 8213BBFCh case   13:*/		return 0x8213BC00;
		  /* 8213BC00h */ case   14:  		/* mr R10, R11 */
		/* 8213BC00h case   14:*/		regs.R10 = regs.R11;
		/* 8213BC00h case   14:*/		return 0x8213BC04;
		  /* 8213BC04h */ case   15:  		/* mtspr CTR, R23 */
		/* 8213BC04h case   15:*/		regs.CTR = regs.R23;
		/* 8213BC04h case   15:*/		return 0x8213BC08;
		  /* 8213BC08h */ case   16:  		/* subf R9, R11, R8 */
		/* 8213BC08h case   16:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R8);
		/* 8213BC08h case   16:*/		return 0x8213BC0C;
		  /* 8213BC0Ch */ case   17:  		/* lwz R8, <#[R10]> */
		/* 8213BC0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8213BC0Ch case   17:*/		return 0x8213BC10;
		  /* 8213BC10h */ case   18:  		/* lwzx R6, <#[R9 + R10]> */
		/* 8213BC10h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213BC10h case   18:*/		return 0x8213BC14;
		  /* 8213BC14h */ case   19:  		/* addi R10, R10, 4 */
		/* 8213BC14h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213BC14h case   19:*/		return 0x8213BC18;
		  /* 8213BC18h */ case   20:  		/* subf R8, R8, R6 */
		/* 8213BC18h case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 8213BC18h case   20:*/		return 0x8213BC1C;
		  /* 8213BC1Ch */ case   21:  		/* addic R8, R8, -1 */
		/* 8213BC1Ch case   21:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8213BC1Ch case   21:*/		return 0x8213BC20;
		  /* 8213BC20h */ case   22:  		/* subfe R8, R8, R8 */
		/* 8213BC20h case   22:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 8213BC20h case   22:*/		return 0x8213BC24;
		  /* 8213BC24h */ case   23:  		/* and R28, R8, R28 */
		/* 8213BC24h case   23:*/		cpu::op::and<0>(regs,&regs.R28,regs.R8,regs.R28);
		/* 8213BC24h case   23:*/		return 0x8213BC28;
		  /* 8213BC28h */ case   24:  		/* bc 16, CR0_LT, -28 */
		/* 8213BC28h case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213BC0C;  }
		/* 8213BC28h case   24:*/		return 0x8213BC2C;
	}
	return 0x8213BC2C;
} // Block from 8213BBC8h-8213BC2Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8213BC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BC2C);
		  /* 8213BC2Ch */ case    0:  		/* lwz R10, <#[R7 + 60]> */
		/* 8213BC2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x0000003C) );
		/* 8213BC2Ch case    0:*/		return 0x8213BC30;
		  /* 8213BC30h */ case    1:  		/* lwz R9, <#[R4 + 60]> */
		/* 8213BC30h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000003C) );
		/* 8213BC30h case    1:*/		return 0x8213BC34;
		  /* 8213BC34h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 8213BC34h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213BC34h case    2:*/		return 0x8213BC38;
		  /* 8213BC38h */ case    3:  		/* bc 4, CR6_EQ, 1320 */
		/* 8213BC38h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BC38h case    3:*/		return 0x8213BC3C;
		  /* 8213BC3Ch */ case    4:  		/* lis R9, 8 */
		/* 8213BC3Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0x8);
		/* 8213BC3Ch case    4:*/		return 0x8213BC40;
		  /* 8213BC40h */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 8213BC40h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213BC40h case    5:*/		return 0x8213BC44;
		  /* 8213BC44h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 8213BC44h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8213BC54;  }
		/* 8213BC44h case    6:*/		return 0x8213BC48;
		  /* 8213BC48h */ case    7:  		/* lis R10, -32256 */
		/* 8213BC48h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8213BC48h case    7:*/		return 0x8213BC4C;
		  /* 8213BC4Ch */ case    8:  		/* lfs FR0, <#[R10 + 8792]> */
		/* 8213BC4Ch case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00002258) );
		/* 8213BC4Ch case    8:*/		return 0x8213BC50;
		  /* 8213BC50h */ case    9:  		/* b 20 */
		/* 8213BC50h case    9:*/		return 0x8213BC64;
		/* 8213BC50h case    9:*/		return 0x8213BC54;
	}
	return 0x8213BC54;
} // Block from 8213BC2Ch-8213BC54h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BC54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BC54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BC54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BC54);
		  /* 8213BC54h */ case    0:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 8213BC54h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 8213BC54h case    0:*/		return 0x8213BC58;
		  /* 8213BC58h */ case    1:  		/* bc 4, CR0_EQ, 1288 */
		/* 8213BC58h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8213C160;  }
		/* 8213BC58h case    1:*/		return 0x8213BC5C;
		  /* 8213BC5Ch */ case    2:  		/* lis R10, -32256 */
		/* 8213BC5Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8213BC5Ch case    2:*/		return 0x8213BC60;
		  /* 8213BC60h */ case    3:  		/* lfs FR0, <#[R10 + 1792]> */
		/* 8213BC60h case    3:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000700) );
		/* 8213BC60h case    3:*/		return 0x8213BC64;
	}
	return 0x8213BC64;
} // Block from 8213BC54h-8213BC64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213BC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BC64);
		  /* 8213BC64h */ case    0:  		/* mr R24, R11 */
		/* 8213BC64h case    0:*/		regs.R24 = regs.R11;
		/* 8213BC64h case    0:*/		return 0x8213BC68;
		  /* 8213BC68h */ case    1:  		/* cmpwi CR6, R28, 0 */
		/* 8213BC68h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8213BC68h case    1:*/		return 0x8213BC6C;
		  /* 8213BC6Ch */ case    2:  		/* bc 12, CR6_EQ, 1268 */
		/* 8213BC6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BC6Ch case    2:*/		return 0x8213BC70;
		  /* 8213BC70h */ case    3:  		/* fmuls FR31, FR0, FR13 */
		/* 8213BC70h case    3:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR0,regs.FR13);
		/* 8213BC70h case    3:*/		return 0x8213BC74;
		  /* 8213BC74h */ case    4:  		/* b -292 */
		/* 8213BC74h case    4:*/		return 0x8213BB50;
		/* 8213BC74h case    4:*/		return 0x8213BC78;
	}
	return 0x8213BC78;
} // Block from 8213BC64h-8213BC78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213BC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BC78);
		  /* 8213BC78h */ case    0:  		/* lwz R11, <#[R7]> */
		/* 8213BC78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8213BC78h case    0:*/		return 0x8213BC7C;
		  /* 8213BC7Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213BC7Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213BC7Ch case    1:*/		return 0x8213BC80;
		  /* 8213BC80h */ case    2:  		/* lwzx R5, <#[R11 + R6]> */
		/* 8213BC80h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8213BC80h case    2:*/		return 0x8213BC84;
	}
	return 0x8213BC84;
} // Block from 8213BC78h-8213BC84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213BC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BC84);
		  /* 8213BC84h */ case    0:  		/* lwz R11, <#[R8 + 88]> */
		/* 8213BC84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000058) );
		/* 8213BC84h case    0:*/		return 0x8213BC88;
		  /* 8213BC88h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8213BC88h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8213BC88h case    1:*/		return 0x8213BC8C;
		  /* 8213BC8Ch */ case    2:  		/* bc 4, CR6_EQ, 1236 */
		/* 8213BC8Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BC8Ch case    2:*/		return 0x8213BC90;
		  /* 8213BC90h */ case    3:  		/* lwz R11, <#[R8 + 84]> */
		/* 8213BC90h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000054) );
		/* 8213BC90h case    3:*/		return 0x8213BC94;
		  /* 8213BC94h */ case    4:  		/* cmplw CR6, R11, R31 */
		/* 8213BC94h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8213BC94h case    4:*/		return 0x8213BC98;
		  /* 8213BC98h */ case    5:  		/* bc 4, CR6_EQ, 1224 */
		/* 8213BC98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BC98h case    5:*/		return 0x8213BC9C;
		  /* 8213BC9Ch */ case    6:  		/* lwz R11, <#[R8 + 60]> */
		/* 8213BC9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000003C) );
		/* 8213BC9Ch case    6:*/		return 0x8213BCA0;
		  /* 8213BCA0h */ case    7:  		/* rlwinm. R11, R11, 0, 11, 22 */
		/* 8213BCA0h case    7:*/		cpu::op::rlwinm<1,0,11,22>(regs,&regs.R11,regs.R11);
		/* 8213BCA0h case    7:*/		return 0x8213BCA4;
		  /* 8213BCA4h */ case    8:  		/* bc 4, CR0_EQ, 1212 */
		/* 8213BCA4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8213C160;  }
		/* 8213BCA4h case    8:*/		return 0x8213BCA8;
		  /* 8213BCA8h */ case    9:  		/* mr R10, R20 */
		/* 8213BCA8h case    9:*/		regs.R10 = regs.R20;
		/* 8213BCA8h case    9:*/		return 0x8213BCAC;
		  /* 8213BCACh */ case   10:  		/* cmplwi CR6, R21, 0 */
		/* 8213BCACh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8213BCACh case   10:*/		return 0x8213BCB0;
		  /* 8213BCB0h */ case   11:  		/* bc 12, CR6_EQ, 40 */
		/* 8213BCB0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213BCD8;  }
		/* 8213BCB0h case   11:*/		return 0x8213BCB4;
		  /* 8213BCB4h */ case   12:  		/* lwz R9, <#[R8 + 72]> */
		/* 8213BCB4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000048) );
		/* 8213BCB4h case   12:*/		return 0x8213BCB8;
		  /* 8213BCB8h */ case   13:  		/* addi R11, R1, 80 */
		/* 8213BCB8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213BCB8h case   13:*/		return 0x8213BCBC;
		  /* 8213BCBCh */ case   14:  		/* lwz R27, <#[R11]> */
		/* 8213BCBCh case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8213BCBCh case   14:*/		return 0x8213BCC0;
		  /* 8213BCC0h */ case   15:  		/* cmplw CR6, R9, R27 */
		/* 8213BCC0h case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R27);
		/* 8213BCC0h case   15:*/		return 0x8213BCC4;
		  /* 8213BCC4h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 8213BCC4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8213BCD8;  }
		/* 8213BCC4h case   16:*/		return 0x8213BCC8;
		  /* 8213BCC8h */ case   17:  		/* addi R10, R10, 1 */
		/* 8213BCC8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213BCC8h case   17:*/		return 0x8213BCCC;
		  /* 8213BCCCh */ case   18:  		/* addi R11, R11, 4 */
		/* 8213BCCCh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213BCCCh case   18:*/		return 0x8213BCD0;
		  /* 8213BCD0h */ case   19:  		/* cmplw CR6, R10, R21 */
		/* 8213BCD0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8213BCD0h case   19:*/		return 0x8213BCD4;
		  /* 8213BCD4h */ case   20:  		/* bc 12, CR6_LT, -24 */
		/* 8213BCD4h case   20:*/		if ( regs.CR[6].lt ) { return 0x8213BCBC;  }
		/* 8213BCD4h case   20:*/		return 0x8213BCD8;
	}
	return 0x8213BCD8;
} // Block from 8213BC84h-8213BCD8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213BCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BCD8);
		  /* 8213BCD8h */ case    0:  		/* cmplw CR6, R10, R21 */
		/* 8213BCD8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8213BCD8h case    0:*/		return 0x8213BCDC;
		  /* 8213BCDCh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8213BCDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213BCEC;  }
		/* 8213BCDCh case    1:*/		return 0x8213BCE0;
		  /* 8213BCE0h */ case    2:  		/* lwz R11, <#[R8 + 72]> */
		/* 8213BCE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000048) );
		/* 8213BCE0h case    2:*/		return 0x8213BCE4;
		  /* 8213BCE4h */ case    3:  		/* addi R21, R21, 1 */
		/* 8213BCE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8213BCE4h case    3:*/		return 0x8213BCE8;
		  /* 8213BCE8h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 8213BCE8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8213BCE8h case    4:*/		return 0x8213BCEC;
	}
	return 0x8213BCEC;
} // Block from 8213BCD8h-8213BCECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213BCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BCEC);
		  /* 8213BCECh */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 8213BCECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8213BCECh case    0:*/		return 0x8213BCF0;
		  /* 8213BCF0h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8213BCF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213BD04;  }
		/* 8213BCF0h case    1:*/		return 0x8213BCF4;
		  /* 8213BCF4h */ case    2:  		/* lfd FR0, <#[R5 + 32]> */
		/* 8213BCF4h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000020) );
		/* 8213BCF4h case    2:*/		return 0x8213BCF8;
		  /* 8213BCF8h */ case    3:  		/* frsp FR0, FR0 */
		/* 8213BCF8h case    3:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8213BCF8h case    3:*/		return 0x8213BCFC;
		  /* 8213BCFCh */ case    4:  		/* fcmpu CR6, FR31, FR0 */
		/* 8213BCFCh case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 8213BCFCh case    4:*/		return 0x8213BD00;
		  /* 8213BD00h */ case    5:  		/* bc 4, CR6_EQ, 1120 */
		/* 8213BD00h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BD00h case    5:*/		return 0x8213BD04;
	}
	return 0x8213BD04;
} // Block from 8213BCECh-8213BD04h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213BD04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BD04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BD04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BD04);
		  /* 8213BD04h */ case    0:  		/* addi R29, R29, 1 */
		/* 8213BD04h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213BD04h case    0:*/		return 0x8213BD08;
		  /* 8213BD08h */ case    1:  		/* addi R7, R7, 4 */
		/* 8213BD08h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213BD08h case    1:*/		return 0x8213BD0C;
		  /* 8213BD0Ch */ case    2:  		/* cmplw CR6, R29, R23 */
		/* 8213BD0Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R23);
		/* 8213BD0Ch case    2:*/		return 0x8213BD10;
		  /* 8213BD10h */ case    3:  		/* bc 12, CR6_LT, -412 */
		/* 8213BD10h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213BB74;  }
		/* 8213BD10h case    3:*/		return 0x8213BD14;
	}
	return 0x8213BD14;
} // Block from 8213BD04h-8213BD14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213BD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BD14);
		  /* 8213BD14h */ case    0:  		/* fabs FR0, FR31 */
		/* 8213BD14h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR31);
		/* 8213BD14h case    0:*/		return 0x8213BD18;
		  /* 8213BD18h */ case    1:  		/* fabs FR0, FR0 */
		/* 8213BD18h case    1:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR0);
		/* 8213BD18h case    1:*/		return 0x8213BD1C;
		  /* 8213BD1Ch */ case    2:  		/* fcmpu CR6, FR0, FR13 */
		/* 8213BD1Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8213BD1Ch case    2:*/		return 0x8213BD20;
		  /* 8213BD20h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 8213BD20h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213BD38;  }
		/* 8213BD20h case    3:*/		return 0x8213BD24;
		  /* 8213BD24h */ case    4:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BD24h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BD24h case    4:*/		return 0x8213BD28;
		  /* 8213BD28h */ case    5:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 8213BD28h case    5:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 8213BD28h case    5:*/		return 0x8213BD2C;
		  /* 8213BD2Ch */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BD2Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8213BD38;  }
		/* 8213BD2Ch case    6:*/		return 0x8213BD30;
		  /* 8213BD30h */ case    7:  		/* li R22, 1024 */
		/* 8213BD30h case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x400);
		/* 8213BD30h case    7:*/		return 0x8213BD34;
		  /* 8213BD34h */ case    8:  		/* b 204 */
		/* 8213BD34h case    8:*/		return 0x8213BE00;
		/* 8213BD34h case    8:*/		return 0x8213BD38;
	}
	return 0x8213BD38;
} // Block from 8213BD14h-8213BD38h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213BD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BD38);
		  /* 8213BD38h */ case    0:  		/* fabs FR13, FR31 */
		/* 8213BD38h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 8213BD38h case    0:*/		return 0x8213BD3C;
		  /* 8213BD3Ch */ case    1:  		/* lis R11, -32256 */
		/* 8213BD3Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BD3Ch case    1:*/		return 0x8213BD40;
		  /* 8213BD40h */ case    2:  		/* lfs FR0, <#[R11 + 8444]> */
		/* 8213BD40h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000020FC) );
		/* 8213BD40h case    2:*/		return 0x8213BD44;
		  /* 8213BD44h */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8213BD44h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8213BD44h case    3:*/		return 0x8213BD48;
		  /* 8213BD48h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8213BD48h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213BD60;  }
		/* 8213BD48h case    4:*/		return 0x8213BD4C;
		  /* 8213BD4Ch */ case    5:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BD4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BD4Ch case    5:*/		return 0x8213BD50;
		  /* 8213BD50h */ case    6:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 8213BD50h case    6:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 8213BD50h case    6:*/		return 0x8213BD54;
		  /* 8213BD54h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BD54h case    7:*/		if ( regs.CR[0].eq ) { return 0x8213BD60;  }
		/* 8213BD54h case    7:*/		return 0x8213BD58;
		  /* 8213BD58h */ case    8:  		/* li R22, 2048 */
		/* 8213BD58h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x800);
		/* 8213BD58h case    8:*/		return 0x8213BD5C;
		  /* 8213BD5Ch */ case    9:  		/* b 164 */
		/* 8213BD5Ch case    9:*/		return 0x8213BE00;
		/* 8213BD5Ch case    9:*/		return 0x8213BD60;
	}
	return 0x8213BD60;
} // Block from 8213BD38h-8213BD60h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BD60);
		  /* 8213BD60h */ case    0:  		/* fabs FR13, FR31 */
		/* 8213BD60h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 8213BD60h case    0:*/		return 0x8213BD64;
		  /* 8213BD64h */ case    1:  		/* lis R11, -32256 */
		/* 8213BD64h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BD64h case    1:*/		return 0x8213BD68;
		  /* 8213BD68h */ case    2:  		/* lfs FR0, <#[R11 + 2964]> */
		/* 8213BD68h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000B94) );
		/* 8213BD68h case    2:*/		return 0x8213BD6C;
		  /* 8213BD6Ch */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8213BD6Ch case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8213BD6Ch case    3:*/		return 0x8213BD70;
		  /* 8213BD70h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8213BD70h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213BD88;  }
		/* 8213BD70h case    4:*/		return 0x8213BD74;
		  /* 8213BD74h */ case    5:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BD74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BD74h case    5:*/		return 0x8213BD78;
		  /* 8213BD78h */ case    6:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 8213BD78h case    6:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 8213BD78h case    6:*/		return 0x8213BD7C;
		  /* 8213BD7Ch */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BD7Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8213BD88;  }
		/* 8213BD7Ch case    7:*/		return 0x8213BD80;
		  /* 8213BD80h */ case    8:  		/* li R22, 4096 */
		/* 8213BD80h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x1000);
		/* 8213BD80h case    8:*/		return 0x8213BD84;
		  /* 8213BD84h */ case    9:  		/* b 124 */
		/* 8213BD84h case    9:*/		return 0x8213BE00;
		/* 8213BD84h case    9:*/		return 0x8213BD88;
	}
	return 0x8213BD88;
} // Block from 8213BD60h-8213BD88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BD88);
		  /* 8213BD88h */ case    0:  		/* fabs FR13, FR31 */
		/* 8213BD88h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 8213BD88h case    0:*/		return 0x8213BD8C;
		  /* 8213BD8Ch */ case    1:  		/* lis R11, -32256 */
		/* 8213BD8Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BD8Ch case    1:*/		return 0x8213BD90;
		  /* 8213BD90h */ case    2:  		/* lfs FR0, <#[R11 + 1820]> */
		/* 8213BD90h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000071C) );
		/* 8213BD90h case    2:*/		return 0x8213BD94;
		  /* 8213BD94h */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8213BD94h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8213BD94h case    3:*/		return 0x8213BD98;
		  /* 8213BD98h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8213BD98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213BDB0;  }
		/* 8213BD98h case    4:*/		return 0x8213BD9C;
		  /* 8213BD9Ch */ case    5:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BD9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BD9Ch case    5:*/		return 0x8213BDA0;
		  /* 8213BDA0h */ case    6:  		/* rlwinm. R11, R11, 0, 14, 14 */
		/* 8213BDA0h case    6:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R11,regs.R11);
		/* 8213BDA0h case    6:*/		return 0x8213BDA4;
		  /* 8213BDA4h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BDA4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8213BDB0;  }
		/* 8213BDA4h case    7:*/		return 0x8213BDA8;
		  /* 8213BDA8h */ case    8:  		/* li R22, 8192 */
		/* 8213BDA8h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x2000);
		/* 8213BDA8h case    8:*/		return 0x8213BDAC;
		  /* 8213BDACh */ case    9:  		/* b 84 */
		/* 8213BDACh case    9:*/		return 0x8213BE00;
		/* 8213BDACh case    9:*/		return 0x8213BDB0;
	}
	return 0x8213BDB0;
} // Block from 8213BD88h-8213BDB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BDB0);
		  /* 8213BDB0h */ case    0:  		/* fabs FR13, FR31 */
		/* 8213BDB0h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 8213BDB0h case    0:*/		return 0x8213BDB4;
		  /* 8213BDB4h */ case    1:  		/* lis R11, -32256 */
		/* 8213BDB4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BDB4h case    1:*/		return 0x8213BDB8;
		  /* 8213BDB8h */ case    2:  		/* lfs FR0, <#[R11 + 8432]> */
		/* 8213BDB8h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000020F0) );
		/* 8213BDB8h case    2:*/		return 0x8213BDBC;
		  /* 8213BDBCh */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8213BDBCh case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8213BDBCh case    3:*/		return 0x8213BDC0;
		  /* 8213BDC0h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8213BDC0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213BDD8;  }
		/* 8213BDC0h case    4:*/		return 0x8213BDC4;
		  /* 8213BDC4h */ case    5:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BDC4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BDC4h case    5:*/		return 0x8213BDC8;
		  /* 8213BDC8h */ case    6:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 8213BDC8h case    6:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 8213BDC8h case    6:*/		return 0x8213BDCC;
		  /* 8213BDCCh */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BDCCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8213BDD8;  }
		/* 8213BDCCh case    7:*/		return 0x8213BDD0;
		  /* 8213BDD0h */ case    8:  		/* li R22, 16384 */
		/* 8213BDD0h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x4000);
		/* 8213BDD0h case    8:*/		return 0x8213BDD4;
		  /* 8213BDD4h */ case    9:  		/* b 44 */
		/* 8213BDD4h case    9:*/		return 0x8213BE00;
		/* 8213BDD4h case    9:*/		return 0x8213BDD8;
	}
	return 0x8213BDD8;
} // Block from 8213BDB0h-8213BDD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BDD8);
		  /* 8213BDD8h */ case    0:  		/* fabs FR13, FR31 */
		/* 8213BDD8h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 8213BDD8h case    0:*/		return 0x8213BDDC;
		  /* 8213BDDCh */ case    1:  		/* lis R11, -32256 */
		/* 8213BDDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BDDCh case    1:*/		return 0x8213BDE0;
		  /* 8213BDE0h */ case    2:  		/* lfs FR0, <#[R11 + 2660]> */
		/* 8213BDE0h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000A64) );
		/* 8213BDE0h case    2:*/		return 0x8213BDE4;
		  /* 8213BDE4h */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8213BDE4h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8213BDE4h case    3:*/		return 0x8213BDE8;
		  /* 8213BDE8h */ case    4:  		/* bc 4, CR6_EQ, 888 */
		/* 8213BDE8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BDE8h case    4:*/		return 0x8213BDEC;
		  /* 8213BDECh */ case    5:  		/* lwz R11, <#[R30 + 108]> */
		/* 8213BDECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213BDECh case    5:*/		return 0x8213BDF0;
		  /* 8213BDF0h */ case    6:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 8213BDF0h case    6:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 8213BDF0h case    6:*/		return 0x8213BDF4;
		  /* 8213BDF4h */ case    7:  		/* bc 12, CR0_EQ, 876 */
		/* 8213BDF4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8213C160;  }
		/* 8213BDF4h case    7:*/		return 0x8213BDF8;
		  /* 8213BDF8h */ case    8:  		/* lis R22, 0 */
		/* 8213BDF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R22,0x0);
		/* 8213BDF8h case    8:*/		return 0x8213BDFC;
		  /* 8213BDFCh */ case    9:  		/* ori R22, R22, 32768 */
		/* 8213BDFCh case    9:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R22,0x8000);
		/* 8213BDFCh case    9:*/		return 0x8213BE00;
	}
	return 0x8213BE00;
} // Block from 8213BDD8h-8213BE00h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213BE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BE00);
		  /* 8213BE00h */ case    0:  		/* lis R11, -32256 */
		/* 8213BE00h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213BE00h case    0:*/		return 0x8213BE04;
		  /* 8213BE04h */ case    1:  		/* lfs FR30, <#[R11 + 1816]> */
		/* 8213BE04h case    1:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000718) );
		/* 8213BE04h case    1:*/		return 0x8213BE08;
		  /* 8213BE08h */ case    2:  		/* fcmpu CR6, FR31, FR30 */
		/* 8213BE08h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8213BE08h case    2:*/		return 0x8213BE0C;
		  /* 8213BE0Ch */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 8213BE0Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x8213BE14;  }
		/* 8213BE0Ch case    3:*/		return 0x8213BE10;
		  /* 8213BE10h */ case    4:  		/* oris R22, R22, 8 */
		/* 8213BE10h case    4:*/		cpu::op::oris<0>(regs,&regs.R22,regs.R22,0x8);
		/* 8213BE10h case    4:*/		return 0x8213BE14;
	}
	return 0x8213BE14;
} // Block from 8213BE00h-8213BE14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213BE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BE14);
		  /* 8213BE14h */ case    0:  		/* addi R11, R1, 96 */
		/* 8213BE14h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8213BE14h case    0:*/		return 0x8213BE18;
		  /* 8213BE18h */ case    1:  		/* mr R26, R20 */
		/* 8213BE18h case    1:*/		regs.R26 = regs.R20;
		/* 8213BE18h case    1:*/		return 0x8213BE1C;
		  /* 8213BE1Ch */ case    2:  		/* cmplwi CR6, R21, 0 */
		/* 8213BE1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8213BE1Ch case    2:*/		return 0x8213BE20;
		  /* 8213BE20h */ case    3:  		/* std R20, <#[R11]> */
		/* 8213BE20h case    3:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 8213BE20h case    3:*/		return 0x8213BE24;
		  /* 8213BE24h */ case    4:  		/* std R20, <#[R11 + 8]> */
		/* 8213BE24h case    4:*/		cpu::mem::store64( regs, regs.R20, (uint32)(regs.R11 + 0x00000008) );
		/* 8213BE24h case    4:*/		return 0x8213BE28;
		  /* 8213BE28h */ case    5:  		/* bc 12, CR6_EQ, 284 */
		/* 8213BE28h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213BF44;  }
		/* 8213BE28h case    5:*/		return 0x8213BE2C;
		  /* 8213BE2Ch */ case    6:  		/* lwz R25, <#[R30 + 24]> */
		/* 8213BE2Ch case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R30 + 0x00000018) );
		/* 8213BE2Ch case    6:*/		return 0x8213BE30;
		  /* 8213BE30h */ case    7:  		/* mr R4, R20 */
		/* 8213BE30h case    7:*/		regs.R4 = regs.R20;
		/* 8213BE30h case    7:*/		return 0x8213BE34;
		  /* 8213BE34h */ case    8:  		/* addi R7, R1, 112 */
		/* 8213BE34h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8213BE34h case    8:*/		return 0x8213BE38;
		  /* 8213BE38h */ case    9:  		/* li R28, -1 */
		/* 8213BE38h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 8213BE38h case    9:*/		return 0x8213BE3C;
		  /* 8213BE3Ch */ case   10:  		/* addi R11, R1, 80 */
		/* 8213BE3Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213BE3Ch case   10:*/		return 0x8213BE40;
		  /* 8213BE40h */ case   11:  		/* lis R10, 24576 */
		/* 8213BE40h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 8213BE40h case   11:*/		return 0x8213BE44;
		  /* 8213BE44h */ case   12:  		/* lwzx R11, <#[R4 + R11]> */
		/* 8213BE44h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8213BE44h case   12:*/		return 0x8213BE48;
		  /* 8213BE48h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213BE48h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213BE48h case   13:*/		return 0x8213BE4C;
		  /* 8213BE4Ch */ case   14:  		/* lwzx R3, <#[R11 + R25]> */
		/* 8213BE4Ch case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8213BE4Ch case   14:*/		return 0x8213BE50;
		  /* 8213BE50h */ case   15:  		/* lwz R11, <#[R3]> */
		/* 8213BE50h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8213BE50h case   15:*/		return 0x8213BE54;
		  /* 8213BE54h */ case   16:  		/* rlwinm R9, R11, 0, 0, 3 */
		/* 8213BE54h case   16:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R9,regs.R11);
		/* 8213BE54h case   16:*/		return 0x8213BE58;
		  /* 8213BE58h */ case   17:  		/* cmplw CR6, R9, R10 */
		/* 8213BE58h case   17:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8213BE58h case   17:*/		return 0x8213BE5C;
		  /* 8213BE5Ch */ case   18:  		/* bc 12, CR6_EQ, 772 */
		/* 8213BE5Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BE5Ch case   18:*/		return 0x8213BE60;
		  /* 8213BE60h */ case   19:  		/* rlwinm R11, R11, 0, 0, 7 */
		/* 8213BE60h case   19:*/		cpu::op::rlwinm<0,0,0,7>(regs,&regs.R11,regs.R11);
		/* 8213BE60h case   19:*/		return 0x8213BE64;
		  /* 8213BE64h */ case   20:  		/* lis R10, 29184 */
		/* 8213BE64h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x7200);
		/* 8213BE64h case   20:*/		return 0x8213BE68;
		  /* 8213BE68h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8213BE68h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213BE68h case   21:*/		return 0x8213BE6C;
		  /* 8213BE6Ch */ case   22:  		/* bc 12, CR6_EQ, 756 */
		/* 8213BE6Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BE6Ch case   22:*/		return 0x8213BE70;
		  /* 8213BE70h */ case   23:  		/* stw R28, <#[R7]> */
		/* 8213BE70h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 8213BE70h case   23:*/		return 0x8213BE74;
		  /* 8213BE74h */ case   24:  		/* mr R27, R20 */
		/* 8213BE74h case   24:*/		regs.R27 = regs.R20;
		/* 8213BE74h case   24:*/		return 0x8213BE78;
		  /* 8213BE78h */ case   25:  		/* stw R28, <#[R7 + 4]> */
		/* 8213BE78h case   25:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000004) );
		/* 8213BE78h case   25:*/		return 0x8213BE7C;
		  /* 8213BE7Ch */ case   26:  		/* mr R10, R20 */
		/* 8213BE7Ch case   26:*/		regs.R10 = regs.R20;
		/* 8213BE7Ch case   26:*/		return 0x8213BE80;
		  /* 8213BE80h */ case   27:  		/* stw R28, <#[R7 + 8]> */
		/* 8213BE80h case   27:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000008) );
		/* 8213BE80h case   27:*/		return 0x8213BE84;
		  /* 8213BE84h */ case   28:  		/* cmplwi CR6, R23, 0 */
		/* 8213BE84h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213BE84h case   28:*/		return 0x8213BE88;
		  /* 8213BE88h */ case   29:  		/* stw R28, <#[R7 + 12]> */
		/* 8213BE88h case   29:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x0000000C) );
		/* 8213BE88h case   29:*/		return 0x8213BE8C;
		  /* 8213BE8Ch */ case   30:  		/* lwz R29, <#[R3 + 12]> */
		/* 8213BE8Ch case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213BE8Ch case   30:*/		return 0x8213BE90;
		  /* 8213BE90h */ case   31:  		/* bc 12, CR6_EQ, 152 */
		/* 8213BE90h case   31:*/		if ( regs.CR[6].eq ) { return 0x8213BF28;  }
		/* 8213BE90h case   31:*/		return 0x8213BE94;
		  /* 8213BE94h */ case   32:  		/* mr R6, R20 */
		/* 8213BE94h case   32:*/		regs.R6 = regs.R20;
		/* 8213BE94h case   32:*/		return 0x8213BE98;
		  /* 8213BE98h */ case   33:  		/* cmplwi CR6, R29, 0 */
		/* 8213BE98h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8213BE98h case   33:*/		return 0x8213BE9C;
		  /* 8213BE9Ch */ case   34:  		/* bc 12, CR6_EQ, 128 */
		/* 8213BE9Ch case   34:*/		if ( regs.CR[6].eq ) { return 0x8213BF1C;  }
		/* 8213BE9Ch case   34:*/		return 0x8213BEA0;
		  /* 8213BEA0h */ case   35:  		/* lwz R31, <#[R3 + 16]> */
		/* 8213BEA0h case   35:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000010) );
		/* 8213BEA0h case   35:*/		return 0x8213BEA4;
		  /* 8213BEA4h */ case   36:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 8213BEA4h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 8213BEA4h case   36:*/		return 0x8213BEA8;
		  /* 8213BEA8h */ case   37:  		/* mr R5, R20 */
		/* 8213BEA8h case   37:*/		regs.R5 = regs.R20;
		/* 8213BEA8h case   37:*/		return 0x8213BEAC;
		  /* 8213BEACh */ case   38:  		/* lwzx R11, <#[R5 + R31]> */
		/* 8213BEACh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R31 + 0x00000000) );
		/* 8213BEACh case   38:*/		return 0x8213BEB0;
		  /* 8213BEB0h */ case   39:  		/* lwzx R9, <#[R8 + R24]> */
		/* 8213BEB0h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R24 + 0x00000000) );
		/* 8213BEB0h case   39:*/		return 0x8213BEB4;
		  /* 8213BEB4h */ case   40:  		/* cmplw CR6, R11, R9 */
		/* 8213BEB4h case   40:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213BEB4h case   40:*/		return 0x8213BEB8;
		  /* 8213BEB8h */ case   41:  		/* bc 4, CR6_EQ, 84 */
		/* 8213BEB8h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8213BF0C;  }
		/* 8213BEB8h case   41:*/		return 0x8213BEBC;
		  /* 8213BEBCh */ case   42:  		/* lwz R9, <#[R30 + 260]> */
		/* 8213BEBCh case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 8213BEBCh case   42:*/		return 0x8213BEC0;
		  /* 8213BEC0h */ case   43:  		/* addi R11, R1, 96 */
		/* 8213BEC0h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8213BEC0h case   43:*/		return 0x8213BEC4;
		  /* 8213BEC4h */ case   44:  		/* add R18, R4, R6 */
		/* 8213BEC4h case   44:*/		cpu::op::add<0>(regs,&regs.R18,regs.R4,regs.R6);
		/* 8213BEC4h case   44:*/		return 0x8213BEC8;
		  /* 8213BEC8h */ case   45:  		/* lwz R19, <#[R30 + 20]> */
		/* 8213BEC8h case   45:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R30 + 0x00000014) );
		/* 8213BEC8h case   45:*/		return 0x8213BECC;
		  /* 8213BECCh */ case   46:  		/* addi R17, R1, 112 */
		/* 8213BECCh case   46:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R1,0x70);
		/* 8213BECCh case   46:*/		return 0x8213BED0;
		  /* 8213BED0h */ case   47:  		/* rlwinm R18, R18, 2, 0, 29 */
		/* 8213BED0h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R18,regs.R18);
		/* 8213BED0h case   47:*/		return 0x8213BED4;
		  /* 8213BED4h */ case   48:  		/* lwz R16, <#[R9 + 16]> */
		/* 8213BED4h case   48:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R9 + 0x00000010) );
		/* 8213BED4h case   48:*/		return 0x8213BED8;
		  /* 8213BED8h */ case   49:  		/* lwzx R9, <#[R4 + R11]> */
		/* 8213BED8h case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8213BED8h case   49:*/		return 0x8213BEDC;
		  /* 8213BEDCh */ case   50:  		/* addi R9, R9, 1 */
		/* 8213BEDCh case   50:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213BEDCh case   50:*/		return 0x8213BEE0;
		  /* 8213BEE0h */ case   51:  		/* stwx R10, <#[R18 + R17]> */
		/* 8213BEE0h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R18 + regs.R17 + 0x00000000) );
		/* 8213BEE0h case   51:*/		return 0x8213BEE4;
		  /* 8213BEE4h */ case   52:  		/* lwzx R18, <#[R16 + R8]> */
		/* 8213BEE4h case   52:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R16 + regs.R8 + 0x00000000) );
		/* 8213BEE4h case   52:*/		return 0x8213BEE8;
		  /* 8213BEE8h */ case   53:  		/* stwx R9, <#[R4 + R11]> */
		/* 8213BEE8h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8213BEE8h case   53:*/		return 0x8213BEEC;
		  /* 8213BEECh */ case   54:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8213BEECh case   54:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8213BEECh case   54:*/		return 0x8213BEF0;
		  /* 8213BEF0h */ case   55:  		/* lwzx R11, <#[R11 + R19]> */
		/* 8213BEF0h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 8213BEF0h case   55:*/		return 0x8213BEF4;
		  /* 8213BEF4h */ case   56:  		/* lwz R11, <#[R11 + 60]> */
		/* 8213BEF4h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213BEF4h case   56:*/		return 0x8213BEF8;
		  /* 8213BEF8h */ case   57:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8213BEF8h case   57:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8213BEF8h case   57:*/		return 0x8213BEFC;
		  /* 8213BEFCh */ case   58:  		/* bc 12, CR0_EQ, 12 */
		/* 8213BEFCh case   58:*/		if ( regs.CR[0].eq ) { return 0x8213BF08;  }
		/* 8213BEFCh case   58:*/		return 0x8213BF00;
		  /* 8213BF00h */ case   59:  		/* fcmpu CR6, FR31, FR30 */
		/* 8213BF00h case   59:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8213BF00h case   59:*/		return 0x8213BF04;
		  /* 8213BF04h */ case   60:  		/* bc 12, CR6_LT, 604 */
		/* 8213BF04h case   60:*/		if ( regs.CR[6].lt ) { return 0x8213C160;  }
		/* 8213BF04h case   60:*/		return 0x8213BF08;
	}
	return 0x8213BF08;
} // Block from 8213BE14h-8213BF08h (61 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF08);
		  /* 8213BF08h */ case    0:  		/* addi R27, R27, 1 */
		/* 8213BF08h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8213BF08h case    0:*/		return 0x8213BF0C;
	}
	return 0x8213BF0C;
} // Block from 8213BF08h-8213BF0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF0C);
		  /* 8213BF0Ch */ case    0:  		/* addi R6, R6, 1 */
		/* 8213BF0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213BF0Ch case    0:*/		return 0x8213BF10;
		  /* 8213BF10h */ case    1:  		/* addi R5, R5, 4 */
		/* 8213BF10h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 8213BF10h case    1:*/		return 0x8213BF14;
		  /* 8213BF14h */ case    2:  		/* cmplw CR6, R6, R29 */
		/* 8213BF14h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 8213BF14h case    2:*/		return 0x8213BF18;
		  /* 8213BF18h */ case    3:  		/* bc 12, CR6_LT, -108 */
		/* 8213BF18h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213BEAC;  }
		/* 8213BF18h case    3:*/		return 0x8213BF1C;
	}
	return 0x8213BF1C;
} // Block from 8213BF0Ch-8213BF1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF1C);
		  /* 8213BF1Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 8213BF1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213BF1Ch case    0:*/		return 0x8213BF20;
		  /* 8213BF20h */ case    1:  		/* cmplw CR6, R10, R23 */
		/* 8213BF20h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R23);
		/* 8213BF20h case    1:*/		return 0x8213BF24;
		  /* 8213BF24h */ case    2:  		/* bc 12, CR6_LT, -144 */
		/* 8213BF24h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213BE94;  }
		/* 8213BF24h case    2:*/		return 0x8213BF28;
	}
	return 0x8213BF28;
} // Block from 8213BF1Ch-8213BF28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF28);
		  /* 8213BF28h */ case    0:  		/* cmplw CR6, R27, R29 */
		/* 8213BF28h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R29);
		/* 8213BF28h case    0:*/		return 0x8213BF2C;
		  /* 8213BF2Ch */ case    1:  		/* bc 4, CR6_EQ, 564 */
		/* 8213BF2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213C160;  }
		/* 8213BF2Ch case    1:*/		return 0x8213BF30;
		  /* 8213BF30h */ case    2:  		/* addi R26, R26, 1 */
		/* 8213BF30h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8213BF30h case    2:*/		return 0x8213BF34;
		  /* 8213BF34h */ case    3:  		/* addi R7, R7, 16 */
		/* 8213BF34h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x10);
		/* 8213BF34h case    3:*/		return 0x8213BF38;
		  /* 8213BF38h */ case    4:  		/* addi R4, R4, 4 */
		/* 8213BF38h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 8213BF38h case    4:*/		return 0x8213BF3C;
		  /* 8213BF3Ch */ case    5:  		/* cmplw CR6, R26, R21 */
		/* 8213BF3Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R21);
		/* 8213BF3Ch case    5:*/		return 0x8213BF40;
		  /* 8213BF40h */ case    6:  		/* bc 12, CR6_LT, -260 */
		/* 8213BF40h case    6:*/		if ( regs.CR[6].lt ) { return 0x8213BE3C;  }
		/* 8213BF40h case    6:*/		return 0x8213BF44;
	}
	return 0x8213BF44;
} // Block from 8213BF28h-8213BF44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF44);
		  /* 8213BF44h */ case    0:  		/* mr R24, R20 */
		/* 8213BF44h case    0:*/		regs.R24 = regs.R20;
		/* 8213BF44h case    0:*/		return 0x8213BF48;
		  /* 8213BF48h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 8213BF48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8213BF48h case    1:*/		return 0x8213BF4C;
		  /* 8213BF4Ch */ case    2:  		/* bc 12, CR6_EQ, 480 */
		/* 8213BF4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213C12C;  }
		/* 8213BF4Ch case    2:*/		return 0x8213BF50;
		  /* 8213BF50h */ case    3:  		/* mr R26, R20 */
		/* 8213BF50h case    3:*/		regs.R26 = regs.R20;
		/* 8213BF50h case    3:*/		return 0x8213BF54;
		  /* 8213BF54h */ case    4:  		/* addi R11, R1, 80 */
		/* 8213BF54h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213BF54h case    4:*/		return 0x8213BF58;
		  /* 8213BF58h */ case    5:  		/* lwz R10, <#[R30 + 24]> */
		/* 8213BF58h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 8213BF58h case    5:*/		return 0x8213BF5C;
		  /* 8213BF5Ch */ case    6:  		/* addi R9, R1, 96 */
		/* 8213BF5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8213BF5Ch case    6:*/		return 0x8213BF60;
		  /* 8213BF60h */ case    7:  		/* lwzx R11, <#[R26 + R11]> */
		/* 8213BF60h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R11 + 0x00000000) );
		/* 8213BF60h case    7:*/		return 0x8213BF64;
		  /* 8213BF64h */ case    8:  		/* lwzx R25, <#[R26 + R9]> */
		/* 8213BF64h case    8:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R26 + regs.R9 + 0x00000000) );
		/* 8213BF64h case    8:*/		return 0x8213BF68;
		  /* 8213BF68h */ case    9:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 8213BF68h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 8213BF68h case    9:*/		return 0x8213BF6C;
		  /* 8213BF6Ch */ case   10:  		/* lwzx R29, <#[R10 + R27]> */
		/* 8213BF6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 8213BF6Ch case   10:*/		return 0x8213BF70;
		  /* 8213BF70h */ case   11:  		/* lwz R11, <#[R29 + 12]> */
		/* 8213BF70h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8213BF70h case   11:*/		return 0x8213BF74;
		  /* 8213BF74h */ case   12:  		/* cmplw CR6, R25, R11 */
		/* 8213BF74h case   12:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 8213BF74h case   12:*/		return 0x8213BF78;
		  /* 8213BF78h */ case   13:  		/* bc 12, CR6_EQ, 144 */
		/* 8213BF78h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213C008;  }
		/* 8213BF78h case   13:*/		return 0x8213BF7C;
		  /* 8213BF7Ch */ case   14:  		/* li R3, 116 */
		/* 8213BF7Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213BF7Ch case   14:*/		return 0x8213BF80;
		  /* 8213BF80h */ case   15:  		/* bl -260584 */
		/* 8213BF80h case   15:*/		regs.LR = 0x8213BF84; return 0x820FC598;
		/* 8213BF80h case   15:*/		return 0x8213BF84;
		  /* 8213BF84h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 8213BF84h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213BF84h case   16:*/		return 0x8213BF88;
		  /* 8213BF88h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 8213BF88h case   17:*/		if ( regs.CR[0].eq ) { return 0x8213BF98;  }
		/* 8213BF88h case   17:*/		return 0x8213BF8C;
		  /* 8213BF8Ch */ case   18:  		/* bl -262380 */
		/* 8213BF8Ch case   18:*/		regs.LR = 0x8213BF90; return 0x820FBEA0;
		/* 8213BF8Ch case   18:*/		return 0x8213BF90;
		  /* 8213BF90h */ case   19:  		/* mr R31, R3 */
		/* 8213BF90h case   19:*/		regs.R31 = regs.R3;
		/* 8213BF90h case   19:*/		return 0x8213BF94;
		  /* 8213BF94h */ case   20:  		/* b 8 */
		/* 8213BF94h case   20:*/		return 0x8213BF9C;
		/* 8213BF94h case   20:*/		return 0x8213BF98;
	}
	return 0x8213BF98;
} // Block from 8213BF44h-8213BF98h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF98);
		  /* 8213BF98h */ case    0:  		/* mr R31, R20 */
		/* 8213BF98h case    0:*/		regs.R31 = regs.R20;
		/* 8213BF98h case    0:*/		return 0x8213BF9C;
	}
	return 0x8213BF9C;
} // Block from 8213BF98h-8213BF9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213BF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213BF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213BF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213BF9C);
		  /* 8213BF9Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8213BF9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213BF9Ch case    0:*/		return 0x8213BFA0;
		  /* 8213BFA0h */ case    1:  		/* bc 12, CR6_EQ, 412 */
		/* 8213BFA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213C13C;  }
		/* 8213BFA0h case    1:*/		return 0x8213BFA4;
		  /* 8213BFA4h */ case    2:  		/* li R7, 0 */
		/* 8213BFA4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213BFA4h case    2:*/		return 0x8213BFA8;
		  /* 8213BFA8h */ case    3:  		/* lwz R4, <#[R29]> */
		/* 8213BFA8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 8213BFA8h case    3:*/		return 0x8213BFAC;
		  /* 8213BFACh */ case    4:  		/* mr R6, R25 */
		/* 8213BFACh case    4:*/		regs.R6 = regs.R25;
		/* 8213BFACh case    4:*/		return 0x8213BFB0;
		  /* 8213BFB0h */ case    5:  		/* lwz R5, <#[R29 + 4]> */
		/* 8213BFB0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 8213BFB0h case    5:*/		return 0x8213BFB4;
		  /* 8213BFB4h */ case    6:  		/* mr R3, R31 */
		/* 8213BFB4h case    6:*/		regs.R3 = regs.R31;
		/* 8213BFB4h case    6:*/		return 0x8213BFB8;
		  /* 8213BFB8h */ case    7:  		/* bl -260488 */
		/* 8213BFB8h case    7:*/		regs.LR = 0x8213BFBC; return 0x820FC630;
		/* 8213BFB8h case    7:*/		return 0x8213BFBC;
		  /* 8213BFBCh */ case    8:  		/* or. R28, R3, R3 */
		/* 8213BFBCh case    8:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8213BFBCh case    8:*/		return 0x8213BFC0;
		  /* 8213BFC0h */ case    9:  		/* mr R3, R31 */
		/* 8213BFC0h case    9:*/		regs.R3 = regs.R31;
		/* 8213BFC0h case    9:*/		return 0x8213BFC4;
		  /* 8213BFC4h */ case   10:  		/* bc 12, CR0_LT, 392 */
		/* 8213BFC4h case   10:*/		if ( regs.CR[0].lt ) { return 0x8213C14C;  }
		/* 8213BFC4h case   10:*/		return 0x8213BFC8;
		  /* 8213BFC8h */ case   11:  		/* mr R4, R29 */
		/* 8213BFC8h case   11:*/		regs.R4 = regs.R29;
		/* 8213BFC8h case   11:*/		return 0x8213BFCC;
		  /* 8213BFCCh */ case   12:  		/* bl -262364 */
		/* 8213BFCCh case   12:*/		regs.LR = 0x8213BFD0; return 0x820FBEF0;
		/* 8213BFCCh case   12:*/		return 0x8213BFD0;
		  /* 8213BFD0h */ case   13:  		/* or. R28, R3, R3 */
		/* 8213BFD0h case   13:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8213BFD0h case   13:*/		return 0x8213BFD4;
		  /* 8213BFD4h */ case   14:  		/* bc 12, CR0_LT, 372 */
		/* 8213BFD4h case   14:*/		if ( regs.CR[0].lt ) { return 0x8213C148;  }
		/* 8213BFD4h case   14:*/		return 0x8213BFD8;
		  /* 8213BFD8h */ case   15:  		/* lwz R11, <#[R29 + 4]> */
		/* 8213BFD8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8213BFD8h case   15:*/		return 0x8213BFDC;
		  /* 8213BFDCh */ case   16:  		/* lwz R4, <#[R29 + 8]> */
		/* 8213BFDCh case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 8213BFDCh case   16:*/		return 0x8213BFE0;
		  /* 8213BFE0h */ case   17:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8213BFE0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8213BFE0h case   17:*/		return 0x8213BFE4;
		  /* 8213BFE4h */ case   18:  		/* lwz R3, <#[R31 + 8]> */
		/* 8213BFE4h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8213BFE4h case   18:*/		return 0x8213BFE8;
		  /* 8213BFE8h */ case   19:  		/* bl -697912 */
		/* 8213BFE8h case   19:*/		regs.LR = 0x8213BFEC; return 0x820919B0;
		/* 8213BFE8h case   19:*/		return 0x8213BFEC;
		  /* 8213BFECh */ case   20:  		/* mr R3, R29 */
		/* 8213BFECh case   20:*/		regs.R3 = regs.R29;
		/* 8213BFECh case   20:*/		return 0x8213BFF0;
		  /* 8213BFF0h */ case   21:  		/* bl 922576 */
		/* 8213BFF0h case   21:*/		regs.LR = 0x8213BFF4; return 0x8221D3C0;
		/* 8213BFF0h case   21:*/		return 0x8213BFF4;
		  /* 8213BFF4h */ case   22:  		/* mr R3, R29 */
		/* 8213BFF4h case   22:*/		regs.R3 = regs.R29;
		/* 8213BFF4h case   22:*/		return 0x8213BFF8;
		  /* 8213BFF8h */ case   23:  		/* bl -260616 */
		/* 8213BFF8h case   23:*/		regs.LR = 0x8213BFFC; return 0x820FC5F0;
		/* 8213BFF8h case   23:*/		return 0x8213BFFC;
		  /* 8213BFFCh */ case   24:  		/* lwz R11, <#[R30 + 24]> */
		/* 8213BFFCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8213BFFCh case   24:*/		return 0x8213C000;
		  /* 8213C000h */ case   25:  		/* mr R29, R31 */
		/* 8213C000h case   25:*/		regs.R29 = regs.R31;
		/* 8213C000h case   25:*/		return 0x8213C004;
		  /* 8213C004h */ case   26:  		/* stwx R31, <#[R11 + R27]> */
		/* 8213C004h case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213C004h case   26:*/		return 0x8213C008;
	}
	return 0x8213C008;
} // Block from 8213BF9Ch-8213C008h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213C008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C008);
		  /* 8213C008h */ case    0:  		/* mr R5, R20 */
		/* 8213C008h case    0:*/		regs.R5 = regs.R20;
		/* 8213C008h case    0:*/		return 0x8213C00C;
		  /* 8213C00Ch */ case    1:  		/* cmplwi CR0, R25, 0 */
		/* 8213C00Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R25,0x00000000);
		/* 8213C00Ch case    1:*/		return 0x8213C010;
		  /* 8213C010h */ case    2:  		/* bc 12, CR0_EQ, 268 */
		/* 8213C010h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213C11C;  }
		/* 8213C010h case    2:*/		return 0x8213C014;
		  /* 8213C014h */ case    3:  		/* mr R6, R20 */
		/* 8213C014h case    3:*/		regs.R6 = regs.R20;
		/* 8213C014h case    3:*/		return 0x8213C018;
		  /* 8213C018h */ case    4:  		/* mr R11, R5 */
		/* 8213C018h case    4:*/		regs.R11 = regs.R5;
		/* 8213C018h case    4:*/		return 0x8213C01C;
		  /* 8213C01Ch */ case    5:  		/* cmplwi CR6, R5, 4 */
		/* 8213C01Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000004);
		/* 8213C01Ch case    5:*/		return 0x8213C020;
		  /* 8213C020h */ case    6:  		/* bc 4, CR6_LT, 40 */
		/* 8213C020h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8213C048;  }
		/* 8213C020h case    6:*/		return 0x8213C024;
		  /* 8213C024h */ case    7:  		/* add R10, R26, R11 */
		/* 8213C024h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R26,regs.R11);
		/* 8213C024h case    7:*/		return 0x8213C028;
		  /* 8213C028h */ case    8:  		/* addi R9, R1, 112 */
		/* 8213C028h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8213C028h case    8:*/		return 0x8213C02C;
		  /* 8213C02Ch */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213C02Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213C02Ch case    9:*/		return 0x8213C030;
		  /* 8213C030h */ case   10:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8213C030h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213C030h case   10:*/		return 0x8213C034;
		  /* 8213C034h */ case   11:  		/* cmpwi CR6, R10, -1 */
		/* 8213C034h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213C034h case   11:*/		return 0x8213C038;
		  /* 8213C038h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 8213C038h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213C048;  }
		/* 8213C038h case   12:*/		return 0x8213C03C;
		  /* 8213C03Ch */ case   13:  		/* addi R11, R11, 1 */
		/* 8213C03Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213C03Ch case   13:*/		return 0x8213C040;
		  /* 8213C040h */ case   14:  		/* cmplwi CR6, R11, 4 */
		/* 8213C040h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8213C040h case   14:*/		return 0x8213C044;
		  /* 8213C044h */ case   15:  		/* bc 12, CR6_LT, -32 */
		/* 8213C044h case   15:*/		if ( regs.CR[6].lt ) { return 0x8213C024;  }
		/* 8213C044h case   15:*/		return 0x8213C048;
	}
	return 0x8213C048;
} // Block from 8213C008h-8213C048h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213C048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C048);
		  /* 8213C048h */ case    0:  		/* add R11, R26, R11 */
		/* 8213C048h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 8213C048h case    0:*/		return 0x8213C04C;
		  /* 8213C04Ch */ case    1:  		/* lwz R10, <#[R30 + 260]> */
		/* 8213C04Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 8213C04Ch case    1:*/		return 0x8213C050;
		  /* 8213C050h */ case    2:  		/* addi R9, R1, 112 */
		/* 8213C050h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8213C050h case    2:*/		return 0x8213C054;
		  /* 8213C054h */ case    3:  		/* lwz R7, <#[R29 + 16]> */
		/* 8213C054h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000010) );
		/* 8213C054h case    3:*/		return 0x8213C058;
		  /* 8213C058h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C058h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C058h case    4:*/		return 0x8213C05C;
		  /* 8213C05Ch */ case    5:  		/* mr R8, R20 */
		/* 8213C05Ch case    5:*/		regs.R8 = regs.R20;
		/* 8213C05Ch case    5:*/		return 0x8213C060;
		  /* 8213C060h */ case    6:  		/* lwz R4, <#[R10 + 16]> */
		/* 8213C060h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 8213C060h case    6:*/		return 0x8213C064;
		  /* 8213C064h */ case    7:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213C064h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C064h case    7:*/		return 0x8213C068;
		  /* 8213C068h */ case    8:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8213C068h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8213C068h case    8:*/		return 0x8213C06C;
		  /* 8213C06Ch */ case    9:  		/* lwzx R11, <#[R4 + R10]> */
		/* 8213C06Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 8213C06Ch case    9:*/		return 0x8213C070;
		  /* 8213C070h */ case   10:  		/* stwx R11, <#[R6 + R7]> */
		/* 8213C070h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 8213C070h case   10:*/		return 0x8213C074;
		  /* 8213C074h */ case   11:  		/* lwz R11, <#[R30 + 260]> */
		/* 8213C074h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8213C074h case   11:*/		return 0x8213C078;
		  /* 8213C078h */ case   12:  		/* lwz R9, <#[R30 + 20]> */
		/* 8213C078h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 8213C078h case   12:*/		return 0x8213C07C;
		  /* 8213C07Ch */ case   13:  		/* lwz R11, <#[R11 + 16]> */
		/* 8213C07Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8213C07Ch case   13:*/		return 0x8213C080;
		  /* 8213C080h */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213C080h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213C080h case   14:*/		return 0x8213C084;
		  /* 8213C084h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C084h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C084h case   15:*/		return 0x8213C088;
		  /* 8213C088h */ case   16:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213C088h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C088h case   16:*/		return 0x8213C08C;
		  /* 8213C08Ch */ case   17:  		/* lwz R9, <#[R11 + 60]> */
		/* 8213C08Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C08Ch case   17:*/		return 0x8213C090;
		  /* 8213C090h */ case   18:  		/* or R9, R9, R22 */
		/* 8213C090h case   18:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R22);
		/* 8213C090h case   18:*/		return 0x8213C094;
		  /* 8213C094h */ case   19:  		/* stw R9, <#[R11 + 60]> */
		/* 8213C094h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C094h case   19:*/		return 0x8213C098;
		  /* 8213C098h */ case   20:  		/* lwz R11, <#[R30 + 8]> */
		/* 8213C098h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8213C098h case   20:*/		return 0x8213C09C;
		  /* 8213C09Ch */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 8213C09Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C09Ch case   21:*/		return 0x8213C0A0;
		  /* 8213C0A0h */ case   22:  		/* bc 4, CR6_GT, 108 */
		/* 8213C0A0h case   22:*/		if ( !regs.CR[6].gt ) { return 0x8213C10C;  }
		/* 8213C0A0h case   22:*/		return 0x8213C0A4;
		  /* 8213C0A4h */ case   23:  		/* mr R7, R20 */
		/* 8213C0A4h case   23:*/		regs.R7 = regs.R20;
		/* 8213C0A4h case   23:*/		return 0x8213C0A8;
		  /* 8213C0A8h */ case   24:  		/* lwz R11, <#[R30 + 20]> */
		/* 8213C0A8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8213C0A8h case   24:*/		return 0x8213C0AC;
		  /* 8213C0ACh */ case   25:  		/* lwz R9, <#[R30 + 260]> */
		/* 8213C0ACh case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 8213C0ACh case   25:*/		return 0x8213C0B0;
		  /* 8213C0B0h */ case   26:  		/* lwzx R11, <#[R7 + R11]> */
		/* 8213C0B0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 8213C0B0h case   26:*/		return 0x8213C0B4;
		  /* 8213C0B4h */ case   27:  		/* lwz R9, <#[R9 + 16]> */
		/* 8213C0B4h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8213C0B4h case   27:*/		return 0x8213C0B8;
		  /* 8213C0B8h */ case   28:  		/* lwz R4, <#[R11 + 56]> */
		/* 8213C0B8h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000038) );
		/* 8213C0B8h case   28:*/		return 0x8213C0BC;
		  /* 8213C0BCh */ case   29:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8213C0BCh case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213C0BCh case   29:*/		return 0x8213C0C0;
		  /* 8213C0C0h */ case   30:  		/* cmplw CR6, R4, R9 */
		/* 8213C0C0h case   30:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8213C0C0h case   30:*/		return 0x8213C0C4;
		  /* 8213C0C4h */ case   31:  		/* bc 4, CR6_EQ, 52 */
		/* 8213C0C4h case   31:*/		if ( !regs.CR[6].eq ) { return 0x8213C0F8;  }
		/* 8213C0C4h case   31:*/		return 0x8213C0C8;
		  /* 8213C0C8h */ case   32:  		/* lwz R9, <#[R11 + 60]> */
		/* 8213C0C8h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C0C8h case   32:*/		return 0x8213C0CC;
		  /* 8213C0CCh */ case   33:  		/* rlwinm R4, R22, 0, 13, 11 */
		/* 8213C0CCh case   33:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R4,regs.R22);
		/* 8213C0CCh case   33:*/		return 0x8213C0D0;
		  /* 8213C0D0h */ case   34:  		/* fcmpu CR6, FR31, FR30 */
		/* 8213C0D0h case   34:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 8213C0D0h case   34:*/		return 0x8213C0D4;
		  /* 8213C0D4h */ case   35:  		/* or R9, R4, R9 */
		/* 8213C0D4h case   35:*/		cpu::op::or<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 8213C0D4h case   35:*/		return 0x8213C0D8;
		  /* 8213C0D8h */ case   36:  		/* stw R9, <#[R11 + 60]> */
		/* 8213C0D8h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C0D8h case   36:*/		return 0x8213C0DC;
		  /* 8213C0DCh */ case   37:  		/* bc 4, CR6_LT, 28 */
		/* 8213C0DCh case   37:*/		if ( !regs.CR[6].lt ) { return 0x8213C0F8;  }
		/* 8213C0DCh case   37:*/		return 0x8213C0E0;
		  /* 8213C0E0h */ case   38:  		/* rlwinm. R4, R9, 0, 12, 12 */
		/* 8213C0E0h case   38:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R4,regs.R9);
		/* 8213C0E0h case   38:*/		return 0x8213C0E4;
		  /* 8213C0E4h */ case   39:  		/* bc 12, CR0_EQ, 12 */
		/* 8213C0E4h case   39:*/		if ( regs.CR[0].eq ) { return 0x8213C0F0;  }
		/* 8213C0E4h case   39:*/		return 0x8213C0E8;
		  /* 8213C0E8h */ case   40:  		/* rlwinm R9, R9, 0, 13, 11 */
		/* 8213C0E8h case   40:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R9,regs.R9);
		/* 8213C0E8h case   40:*/		return 0x8213C0EC;
		  /* 8213C0ECh */ case   41:  		/* b 8 */
		/* 8213C0ECh case   41:*/		return 0x8213C0F4;
		/* 8213C0ECh case   41:*/		return 0x8213C0F0;
	}
	return 0x8213C0F0;
} // Block from 8213C048h-8213C0F0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8213C0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C0F0);
		  /* 8213C0F0h */ case    0:  		/* oris R9, R9, 8 */
		/* 8213C0F0h case    0:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8);
		/* 8213C0F0h case    0:*/		return 0x8213C0F4;
	}
	return 0x8213C0F4;
} // Block from 8213C0F0h-8213C0F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C0F4);
		  /* 8213C0F4h */ case    0:  		/* stw R9, <#[R11 + 60]> */
		/* 8213C0F4h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C0F4h case    0:*/		return 0x8213C0F8;
	}
	return 0x8213C0F8;
} // Block from 8213C0F4h-8213C0F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C0F8);
		  /* 8213C0F8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8213C0F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8213C0F8h case    0:*/		return 0x8213C0FC;
		  /* 8213C0FCh */ case    1:  		/* addi R8, R8, 1 */
		/* 8213C0FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213C0FCh case    1:*/		return 0x8213C100;
		  /* 8213C100h */ case    2:  		/* addi R7, R7, 4 */
		/* 8213C100h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213C100h case    2:*/		return 0x8213C104;
		  /* 8213C104h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 8213C104h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8213C104h case    3:*/		return 0x8213C108;
		  /* 8213C108h */ case    4:  		/* bc 12, CR6_LT, -96 */
		/* 8213C108h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213C0A8;  }
		/* 8213C108h case    4:*/		return 0x8213C10C;
	}
	return 0x8213C10C;
} // Block from 8213C0F8h-8213C10Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C10C);
		  /* 8213C10Ch */ case    0:  		/* addi R5, R5, 1 */
		/* 8213C10Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213C10Ch case    0:*/		return 0x8213C110;
		  /* 8213C110h */ case    1:  		/* addi R6, R6, 4 */
		/* 8213C110h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 8213C110h case    1:*/		return 0x8213C114;
		  /* 8213C114h */ case    2:  		/* cmplw CR6, R5, R25 */
		/* 8213C114h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R25);
		/* 8213C114h case    2:*/		return 0x8213C118;
		  /* 8213C118h */ case    3:  		/* bc 12, CR6_LT, -256 */
		/* 8213C118h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213C018;  }
		/* 8213C118h case    3:*/		return 0x8213C11C;
	}
	return 0x8213C11C;
} // Block from 8213C10Ch-8213C11Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213C11Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C11C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C11C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C11C);
		  /* 8213C11Ch */ case    0:  		/* addi R24, R24, 1 */
		/* 8213C11Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8213C11Ch case    0:*/		return 0x8213C120;
		  /* 8213C120h */ case    1:  		/* addi R26, R26, 4 */
		/* 8213C120h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8213C120h case    1:*/		return 0x8213C124;
		  /* 8213C124h */ case    2:  		/* cmplw CR6, R24, R21 */
		/* 8213C124h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R21);
		/* 8213C124h case    2:*/		return 0x8213C128;
		  /* 8213C128h */ case    3:  		/* bc 12, CR6_LT, -468 */
		/* 8213C128h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213BF54;  }
		/* 8213C128h case    3:*/		return 0x8213C12C;
	}
	return 0x8213C12C;
} // Block from 8213C11Ch-8213C12Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213C12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C12C);
		  /* 8213C12Ch */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 8213C12Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8213C12Ch case    0:*/		return 0x8213C130;
		  /* 8213C130h */ case    1:  		/* li R3, 0 */
		/* 8213C130h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213C130h case    1:*/		return 0x8213C134;
		  /* 8213C134h */ case    2:  		/* stw R20, <#[R11]> */
		/* 8213C134h case    2:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 8213C134h case    2:*/		return 0x8213C138;
		  /* 8213C138h */ case    3:  		/* b 44 */
		/* 8213C138h case    3:*/		return 0x8213C164;
		/* 8213C138h case    3:*/		return 0x8213C13C;
	}
	return 0x8213C13C;
} // Block from 8213C12Ch-8213C13Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213C13Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C13C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C13C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C13C);
		  /* 8213C13Ch */ case    0:  		/* lis R3, -32761 */
		/* 8213C13Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213C13Ch case    0:*/		return 0x8213C140;
		  /* 8213C140h */ case    1:  		/* ori R3, R3, 14 */
		/* 8213C140h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213C140h case    1:*/		return 0x8213C144;
		  /* 8213C144h */ case    2:  		/* b 32 */
		/* 8213C144h case    2:*/		return 0x8213C164;
		/* 8213C144h case    2:*/		return 0x8213C148;
	}
	return 0x8213C148;
} // Block from 8213C13Ch-8213C148h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213C148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C148);
		  /* 8213C148h */ case    0:  		/* mr R3, R31 */
		/* 8213C148h case    0:*/		regs.R3 = regs.R31;
		/* 8213C148h case    0:*/		return 0x8213C14C;
	}
	return 0x8213C14C;
} // Block from 8213C148h-8213C14Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C14C);
		  /* 8213C14Ch */ case    0:  		/* bl 922228 */
		/* 8213C14Ch case    0:*/		regs.LR = 0x8213C150; return 0x8221D3C0;
		/* 8213C14Ch case    0:*/		return 0x8213C150;
		  /* 8213C150h */ case    1:  		/* mr R3, R31 */
		/* 8213C150h case    1:*/		regs.R3 = regs.R31;
		/* 8213C150h case    1:*/		return 0x8213C154;
		  /* 8213C154h */ case    2:  		/* bl -260964 */
		/* 8213C154h case    2:*/		regs.LR = 0x8213C158; return 0x820FC5F0;
		/* 8213C154h case    2:*/		return 0x8213C158;
		  /* 8213C158h */ case    3:  		/* mr R3, R28 */
		/* 8213C158h case    3:*/		regs.R3 = regs.R28;
		/* 8213C158h case    3:*/		return 0x8213C15C;
		  /* 8213C15Ch */ case    4:  		/* b 8 */
		/* 8213C15Ch case    4:*/		return 0x8213C164;
		/* 8213C15Ch case    4:*/		return 0x8213C160;
	}
	return 0x8213C160;
} // Block from 8213C14Ch-8213C160h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C160);
		  /* 8213C160h */ case    0:  		/* li R3, 1 */
		/* 8213C160h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213C160h case    0:*/		return 0x8213C164;
	}
	return 0x8213C164;
} // Block from 8213C160h-8213C164h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C164);
		  /* 8213C164h */ case    0:  		/* addi R1, R1, 336 */
		/* 8213C164h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 8213C164h case    0:*/		return 0x8213C168;
		  /* 8213C168h */ case    1:  		/* lfd FR30, <#[R1 - 152]> */
		/* 8213C168h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 8213C168h case    1:*/		return 0x8213C16C;
		  /* 8213C16Ch */ case    2:  		/* lfd FR31, <#[R1 - 144]> */
		/* 8213C16Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 8213C16Ch case    2:*/		return 0x8213C170;
		  /* 8213C170h */ case    3:  		/* b -700152 */
		/* 8213C170h case    3:*/		return 0x82091278;
		/* 8213C170h case    3:*/		return 0x8213C174;
		  /* 8213C174h */ case    4:  		/* nop */
		/* 8213C174h case    4:*/		cpu::op::nop();
		/* 8213C174h case    4:*/		return 0x8213C178;
	}
	return 0x8213C178;
} // Block from 8213C164h-8213C178h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C178);
		  /* 8213C178h */ case    0:  		/* mfspr R12, LR */
		/* 8213C178h case    0:*/		regs.R12 = regs.LR;
		/* 8213C178h case    0:*/		return 0x8213C17C;
		  /* 8213C17Ch */ case    1:  		/* bl -700252 */
		/* 8213C17Ch case    1:*/		regs.LR = 0x8213C180; return 0x82091220;
		/* 8213C17Ch case    1:*/		return 0x8213C180;
		  /* 8213C180h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 8213C180h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 8213C180h case    2:*/		return 0x8213C184;
		  /* 8213C184h */ case    3:  		/* addi R11, R1, 128 */
		/* 8213C184h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213C184h case    3:*/		return 0x8213C188;
		  /* 8213C188h */ case    4:  		/* addi R10, R1, 160 */
		/* 8213C188h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 8213C188h case    4:*/		return 0x8213C18C;
		  /* 8213C18Ch */ case    5:  		/* addi R9, R1, 96 */
		/* 8213C18Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8213C18Ch case    5:*/		return 0x8213C190;
		  /* 8213C190h */ case    6:  		/* li R29, 0 */
		/* 8213C190h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213C190h case    6:*/		return 0x8213C194;
		  /* 8213C194h */ case    7:  		/* mr R31, R3 */
		/* 8213C194h case    7:*/		regs.R31 = regs.R3;
		/* 8213C194h case    7:*/		return 0x8213C198;
		  /* 8213C198h */ case    8:  		/* std R29, <#[R11]> */
		/* 8213C198h case    8:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213C198h case    8:*/		return 0x8213C19C;
		  /* 8213C19Ch */ case    9:  		/* li R21, 1 */
		/* 8213C19Ch case    9:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 8213C19Ch case    9:*/		return 0x8213C1A0;
		  /* 8213C1A0h */ case   10:  		/* std R29, <#[R10]> */
		/* 8213C1A0h case   10:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R10 + 0x00000000) );
		/* 8213C1A0h case   10:*/		return 0x8213C1A4;
		  /* 8213C1A4h */ case   11:  		/* li R5, 24 */
		/* 8213C1A4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8213C1A4h case   11:*/		return 0x8213C1A8;
		  /* 8213C1A8h */ case   12:  		/* std R29, <#[R9]> */
		/* 8213C1A8h case   12:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R9 + 0x00000000) );
		/* 8213C1A8h case   12:*/		return 0x8213C1AC;
		  /* 8213C1ACh */ case   13:  		/* li R4, 255 */
		/* 8213C1ACh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8213C1ACh case   13:*/		return 0x8213C1B0;
		  /* 8213C1B0h */ case   14:  		/* std R29, <#[R11 + 8]> */
		/* 8213C1B0h case   14:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8213C1B0h case   14:*/		return 0x8213C1B4;
		  /* 8213C1B4h */ case   15:  		/* addi R3, R3, 1040 */
		/* 8213C1B4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x410);
		/* 8213C1B4h case   15:*/		return 0x8213C1B8;
		  /* 8213C1B8h */ case   16:  		/* std R29, <#[R10 + 8]> */
		/* 8213C1B8h case   16:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 8213C1B8h case   16:*/		return 0x8213C1BC;
		  /* 8213C1BCh */ case   17:  		/* mr R14, R29 */
		/* 8213C1BCh case   17:*/		regs.R14 = regs.R29;
		/* 8213C1BCh case   17:*/		return 0x8213C1C0;
		  /* 8213C1C0h */ case   18:  		/* std R29, <#[R9 + 8]> */
		/* 8213C1C0h case   18:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R9 + 0x00000008) );
		/* 8213C1C0h case   18:*/		return 0x8213C1C4;
		  /* 8213C1C4h */ case   19:  		/* mr R23, R21 */
		/* 8213C1C4h case   19:*/		regs.R23 = regs.R21;
		/* 8213C1C4h case   19:*/		return 0x8213C1C8;
		  /* 8213C1C8h */ case   20:  		/* std R29, <#[R11 + 16]> */
		/* 8213C1C8h case   20:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 8213C1C8h case   20:*/		return 0x8213C1CC;
		  /* 8213C1CCh */ case   21:  		/* std R29, <#[R10 + 16]> */
		/* 8213C1CCh case   21:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R10 + 0x00000010) );
		/* 8213C1CCh case   21:*/		return 0x8213C1D0;
		  /* 8213C1D0h */ case   22:  		/* std R29, <#[R9 + 16]> */
		/* 8213C1D0h case   22:*/		cpu::mem::store64( regs, regs.R29, (uint32)(regs.R9 + 0x00000010) );
		/* 8213C1D0h case   22:*/		return 0x8213C1D4;
		  /* 8213C1D4h */ case   23:  		/* mr R17, R29 */
		/* 8213C1D4h case   23:*/		regs.R17 = regs.R29;
		/* 8213C1D4h case   23:*/		return 0x8213C1D8;
		  /* 8213C1D8h */ case   24:  		/* stw R29, <#[R1 + 80]> */
		/* 8213C1D8h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C1D8h case   24:*/		return 0x8213C1DC;
		  /* 8213C1DCh */ case   25:  		/* bl -700060 */
		/* 8213C1DCh case   25:*/		regs.LR = 0x8213C1E0; return 0x82091340;
		/* 8213C1DCh case   25:*/		return 0x8213C1E0;
		  /* 8213C1E0h */ case   26:  		/* li R5, 24 */
		/* 8213C1E0h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8213C1E0h case   26:*/		return 0x8213C1E4;
		  /* 8213C1E4h */ case   27:  		/* li R4, 255 */
		/* 8213C1E4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8213C1E4h case   27:*/		return 0x8213C1E8;
		  /* 8213C1E8h */ case   28:  		/* addi R3, R31, 1064 */
		/* 8213C1E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x428);
		/* 8213C1E8h case   28:*/		return 0x8213C1EC;
		  /* 8213C1ECh */ case   29:  		/* bl -700076 */
		/* 8213C1ECh case   29:*/		regs.LR = 0x8213C1F0; return 0x82091340;
		/* 8213C1ECh case   29:*/		return 0x8213C1F0;
		  /* 8213C1F0h */ case   30:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C1F0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C1F0h case   30:*/		return 0x8213C1F4;
		  /* 8213C1F4h */ case   31:  		/* mr R20, R29 */
		/* 8213C1F4h case   31:*/		regs.R20 = regs.R29;
		/* 8213C1F4h case   31:*/		return 0x8213C1F8;
		  /* 8213C1F8h */ case   32:  		/* lis R18, 24576 */
		/* 8213C1F8h case   32:*/		cpu::op::lis<0>(regs,&regs.R18,0x6000);
		/* 8213C1F8h case   32:*/		return 0x8213C1FC;
		  /* 8213C1FCh */ case   33:  		/* mr R24, R29 */
		/* 8213C1FCh case   33:*/		regs.R24 = regs.R29;
		/* 8213C1FCh case   33:*/		return 0x8213C200;
		  /* 8213C200h */ case   34:  		/* lis R19, 4352 */
		/* 8213C200h case   34:*/		cpu::op::lis<0>(regs,&regs.R19,0x1100);
		/* 8213C200h case   34:*/		return 0x8213C204;
		  /* 8213C204h */ case   35:  		/* lis R15, 29376 */
		/* 8213C204h case   35:*/		cpu::op::lis<0>(regs,&regs.R15,0x72C0);
		/* 8213C204h case   35:*/		return 0x8213C208;
		  /* 8213C208h */ case   36:  		/* lis R16, 29392 */
		/* 8213C208h case   36:*/		cpu::op::lis<0>(regs,&regs.R16,0x72D0);
		/* 8213C208h case   36:*/		return 0x8213C20C;
		  /* 8213C20Ch */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 8213C20Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C20Ch case   37:*/		return 0x8213C210;
		  /* 8213C210h */ case   38:  		/* bc 4, CR6_GT, 572 */
		/* 8213C210h case   38:*/		if ( !regs.CR[6].gt ) { return 0x8213C44C;  }
		/* 8213C210h case   38:*/		return 0x8213C214;
		  /* 8213C214h */ case   39:  		/* mr R22, R29 */
		/* 8213C214h case   39:*/		regs.R22 = regs.R29;
		/* 8213C214h case   39:*/		return 0x8213C218;
		  /* 8213C218h */ case   40:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213C218h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C218h case   40:*/		return 0x8213C21C;
		  /* 8213C21Ch */ case   41:  		/* lwzx R10, <#[R11 + R22]> */
		/* 8213C21Ch case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8213C21Ch case   41:*/		return 0x8213C220;
		  /* 8213C220h */ case   42:  		/* lwz R9, <#[R10]> */
		/* 8213C220h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8213C220h case   42:*/		return 0x8213C224;
		  /* 8213C224h */ case   43:  		/* stw R29, <#[R10 + 36]> */
		/* 8213C224h case   43:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000024) );
		/* 8213C224h case   43:*/		return 0x8213C228;
		  /* 8213C228h */ case   44:  		/* rlwinm R11, R9, 0, 0, 11 */
		/* 8213C228h case   44:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R9);
		/* 8213C228h case   44:*/		return 0x8213C22C;
		  /* 8213C22Ch */ case   45:  		/* cmplw CR6, R11, R18 */
		/* 8213C22Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8213C22Ch case   45:*/		return 0x8213C230;
		  /* 8213C230h */ case   46:  		/* bc 12, CR6_EQ, 352 */
		/* 8213C230h case   46:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C230h case   46:*/		return 0x8213C234;
		  /* 8213C234h */ case   47:  		/* lis R8, 24656 */
		/* 8213C234h case   47:*/		cpu::op::lis<0>(regs,&regs.R8,0x6050);
		/* 8213C234h case   47:*/		return 0x8213C238;
		  /* 8213C238h */ case   48:  		/* cmplw CR6, R11, R8 */
		/* 8213C238h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213C238h case   48:*/		return 0x8213C23C;
		  /* 8213C23Ch */ case   49:  		/* bc 12, CR6_EQ, 340 */
		/* 8213C23Ch case   49:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C23Ch case   49:*/		return 0x8213C240;
		  /* 8213C240h */ case   50:  		/* lis R8, 24736 */
		/* 8213C240h case   50:*/		cpu::op::lis<0>(regs,&regs.R8,0x60A0);
		/* 8213C240h case   50:*/		return 0x8213C244;
		  /* 8213C244h */ case   51:  		/* cmplw CR6, R11, R8 */
		/* 8213C244h case   51:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213C244h case   51:*/		return 0x8213C248;
		  /* 8213C248h */ case   52:  		/* bc 12, CR6_EQ, 328 */
		/* 8213C248h case   52:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C248h case   52:*/		return 0x8213C24C;
		  /* 8213C24Ch */ case   53:  		/* lis R8, 24816 */
		/* 8213C24Ch case   53:*/		cpu::op::lis<0>(regs,&regs.R8,0x60F0);
		/* 8213C24Ch case   53:*/		return 0x8213C250;
		  /* 8213C250h */ case   54:  		/* cmplw CR6, R11, R8 */
		/* 8213C250h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213C250h case   54:*/		return 0x8213C254;
		  /* 8213C254h */ case   55:  		/* bc 12, CR6_EQ, 316 */
		/* 8213C254h case   55:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C254h case   55:*/		return 0x8213C258;
		  /* 8213C258h */ case   56:  		/* lis R8, 29408 */
		/* 8213C258h case   56:*/		cpu::op::lis<0>(regs,&regs.R8,0x72E0);
		/* 8213C258h case   56:*/		return 0x8213C25C;
		  /* 8213C25Ch */ case   57:  		/* cmplw CR6, R11, R8 */
		/* 8213C25Ch case   57:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213C25Ch case   57:*/		return 0x8213C260;
		  /* 8213C260h */ case   58:  		/* bc 12, CR6_EQ, 304 */
		/* 8213C260h case   58:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C260h case   58:*/		return 0x8213C264;
		  /* 8213C264h */ case   59:  		/* lis R8, 24688 */
		/* 8213C264h case   59:*/		cpu::op::lis<0>(regs,&regs.R8,0x6070);
		/* 8213C264h case   59:*/		return 0x8213C268;
		  /* 8213C268h */ case   60:  		/* cmplw CR6, R11, R8 */
		/* 8213C268h case   60:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213C268h case   60:*/		return 0x8213C26C;
		  /* 8213C26Ch */ case   61:  		/* bc 12, CR6_EQ, 292 */
		/* 8213C26Ch case   61:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C26Ch case   61:*/		return 0x8213C270;
		  /* 8213C270h */ case   62:  		/* cmplw CR6, R11, R19 */
		/* 8213C270h case   62:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8213C270h case   62:*/		return 0x8213C274;
		  /* 8213C274h */ case   63:  		/* bc 12, CR6_EQ, 292 */
		/* 8213C274h case   63:*/		if ( regs.CR[6].eq ) { return 0x8213C398;  }
		/* 8213C274h case   63:*/		return 0x8213C278;
		  /* 8213C278h */ case   64:  		/* cmplw CR6, R11, R15 */
		/* 8213C278h case   64:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8213C278h case   64:*/		return 0x8213C27C;
		  /* 8213C27Ch */ case   65:  		/* bc 12, CR6_EQ, 276 */
		/* 8213C27Ch case   65:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C27Ch case   65:*/		return 0x8213C280;
		  /* 8213C280h */ case   66:  		/* cmplw CR6, R11, R16 */
		/* 8213C280h case   66:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 8213C280h case   66:*/		return 0x8213C284;
		  /* 8213C284h */ case   67:  		/* bc 12, CR6_EQ, 268 */
		/* 8213C284h case   67:*/		if ( regs.CR[6].eq ) { return 0x8213C390;  }
		/* 8213C284h case   67:*/		return 0x8213C288;
		  /* 8213C288h */ case   68:  		/* rlwinm. R28, R9, 0, 12, 31 */
		/* 8213C288h case   68:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R28,regs.R9);
		/* 8213C288h case   68:*/		return 0x8213C28C;
		  /* 8213C28Ch */ case   69:  		/* bc 12, CR0_EQ, 412 */
		/* 8213C28Ch case   69:*/		if ( regs.CR[0].eq ) { return 0x8213C428;  }
		/* 8213C28Ch case   69:*/		return 0x8213C290;
		  /* 8213C290h */ case   70:  		/* cmplwi CR6, R9, 0 */
		/* 8213C290h case   70:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213C290h case   70:*/		return 0x8213C294;
		  /* 8213C294h */ case   71:  		/* bc 12, CR6_EQ, 404 */
		/* 8213C294h case   71:*/		if ( regs.CR[6].eq ) { return 0x8213C428;  }
		/* 8213C294h case   71:*/		return 0x8213C298;
		  /* 8213C298h */ case   72:  		/* lwz R11, <#[R10 + 4]> */
		/* 8213C298h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8213C298h case   72:*/		return 0x8213C29C;
		  /* 8213C29Ch */ case   73:  		/* mr R5, R29 */
		/* 8213C29Ch case   73:*/		regs.R5 = regs.R29;
		/* 8213C29Ch case   73:*/		return 0x8213C2A0;
		  /* 8213C2A0h */ case   74:  		/* cmplwi CR6, R11, 0 */
		/* 8213C2A0h case   74:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C2A0h case   74:*/		return 0x8213C2A4;
		  /* 8213C2A4h */ case   75:  		/* bc 4, CR6_GT, 228 */
		/* 8213C2A4h case   75:*/		if ( !regs.CR[6].gt ) { return 0x8213C388;  }
		/* 8213C2A4h case   75:*/		return 0x8213C2A8;
		  /* 8213C2A8h */ case   76:  		/* lwz R27, <#[R31 + 128]> */
		/* 8213C2A8h case   76:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000080) );
		/* 8213C2A8h case   76:*/		return 0x8213C2AC;
		  /* 8213C2ACh */ case   77:  		/* mr R4, R29 */
		/* 8213C2ACh case   77:*/		regs.R4 = regs.R29;
		/* 8213C2ACh case   77:*/		return 0x8213C2B0;
		  /* 8213C2B0h */ case   78:  		/* lwz R3, <#[R10 + 8]> */
		/* 8213C2B0h case   78:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 8213C2B0h case   78:*/		return 0x8213C2B4;
		  /* 8213C2B4h */ case   79:  		/* rlwinm R26, R28, 2, 0, 29 */
		/* 8213C2B4h case   79:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R28);
		/* 8213C2B4h case   79:*/		return 0x8213C2B8;
		  /* 8213C2B8h */ case   80:  		/* lwz R30, <#[R31 + 20]> */
		/* 8213C2B8h case   80:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C2B8h case   80:*/		return 0x8213C2BC;
		  /* 8213C2BCh */ case   81:  		/* rlwinm R25, R11, 0, 0, 31 */
		/* 8213C2BCh case   81:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R25,regs.R11);
		/* 8213C2BCh case   81:*/		return 0x8213C2C0;
		  /* 8213C2C0h */ case   82:  		/* lwzx R11, <#[R3 + R4]> */
		/* 8213C2C0h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R4 + 0x00000000) );
		/* 8213C2C0h case   82:*/		return 0x8213C2C4;
		  /* 8213C2C4h */ case   83:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C2C4h case   83:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C2C4h case   83:*/		return 0x8213C2C8;
		  /* 8213C2C8h */ case   84:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8213C2C8h case   84:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213C2C8h case   84:*/		return 0x8213C2CC;
		  /* 8213C2CCh */ case   85:  		/* lwz R10, <#[R11 + 4]> */
		/* 8213C2CCh case   85:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213C2CCh case   85:*/		return 0x8213C2D0;
		  /* 8213C2D0h */ case   86:  		/* cmplw CR6, R10, R27 */
		/* 8213C2D0h case   86:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8213C2D0h case   86:*/		return 0x8213C2D4;
		  /* 8213C2D4h */ case   87:  		/* bc 4, CR6_EQ, 164 */
		/* 8213C2D4h case   87:*/		if ( !regs.CR[6].eq ) { return 0x8213C378;  }
		/* 8213C2D4h case   87:*/		return 0x8213C2D8;
		  /* 8213C2D8h */ case   88:  		/* lbz R10, <#[R11 + 111]> */
		/* 8213C2D8h case   88:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006F) );
		/* 8213C2D8h case   88:*/		return 0x8213C2DC;
		  /* 8213C2DCh */ case   89:  		/* lbz R11, <#[R11 + 110]> */
		/* 8213C2DCh case   89:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006E) );
		/* 8213C2DCh case   89:*/		return 0x8213C2E0;
		  /* 8213C2E0h */ case   90:  		/* cmplwi CR6, R10, 3 */
		/* 8213C2E0h case   90:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213C2E0h case   90:*/		return 0x8213C2E4;
		  /* 8213C2E4h */ case   91:  		/* bc 4, CR6_EQ, 148 */
		/* 8213C2E4h case   91:*/		if ( !regs.CR[6].eq ) { return 0x8213C378;  }
		/* 8213C2E4h case   91:*/		return 0x8213C2E8;
		  /* 8213C2E8h */ case   92:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C2E8h case   92:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C2E8h case   92:*/		return 0x8213C2EC;
		  /* 8213C2ECh */ case   93:  		/* addi R10, R1, 128 */
		/* 8213C2ECh case   93:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8213C2ECh case   93:*/		return 0x8213C2F0;
		  /* 8213C2F0h */ case   94:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8213C2F0h case   94:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213C2F0h case   94:*/		return 0x8213C2F4;
		  /* 8213C2F4h */ case   95:  		/* cmpwi CR6, R9, 0 */
		/* 8213C2F4h case   95:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8213C2F4h case   95:*/		return 0x8213C2F8;
		  /* 8213C2F8h */ case   96:  		/* bc 12, CR6_EQ, 36 */
		/* 8213C2F8h case   96:*/		if ( regs.CR[6].eq ) { return 0x8213C31C;  }
		/* 8213C2F8h case   96:*/		return 0x8213C2FC;
		  /* 8213C2FCh */ case   97:  		/* lhz R9, <#[R31 + 202]> */
		/* 8213C2FCh case   97:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213C2FCh case   97:*/		return 0x8213C300;
		  /* 8213C300h */ case   98:  		/* cmplwi CR6, R9, 260 */
		/* 8213C300h case   98:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000104);
		/* 8213C300h case   98:*/		return 0x8213C304;
		  /* 8213C304h */ case   99:  		/* bc 12, CR6_EQ, 24 */
		/* 8213C304h case   99:*/		if ( regs.CR[6].eq ) { return 0x8213C31C;  }
		/* 8213C304h case   99:*/		return 0x8213C308;
		  /* 8213C308h */ case  100:  		/* addi R9, R1, 96 */
		/* 8213C308h case  100:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8213C308h case  100:*/		return 0x8213C30C;
		  /* 8213C30Ch */ case  101:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8213C30Ch case  101:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C30Ch case  101:*/		return 0x8213C310;
		  /* 8213C310h */ case  102:  		/* subfic R9, R9, 0 */
		/* 8213C310h case  102:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 8213C310h case  102:*/		return 0x8213C314;
		  /* 8213C314h */ case  103:  		/* subfe R9, R9, R9 */
		/* 8213C314h case  103:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8213C314h case  103:*/		return 0x8213C318;
		  /* 8213C318h */ case  104:  		/* and R23, R9, R23 */
		/* 8213C318h case  104:*/		cpu::op::and<0>(regs,&regs.R23,regs.R9,regs.R23);
		/* 8213C318h case  104:*/		return 0x8213C31C;
	}
	return 0x8213C31C;
} // Block from 8213C178h-8213C31Ch (105 instructions)

//////////////////////////////////////////////////////
// Block at 8213C31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C31C);
		  /* 8213C31Ch */ case    0:  		/* addi R9, R1, 160 */
		/* 8213C31Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 8213C31Ch case    0:*/		return 0x8213C320;
		  /* 8213C320h */ case    1:  		/* stwx R21, <#[R11 + R10]> */
		/* 8213C320h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213C320h case    1:*/		return 0x8213C324;
		  /* 8213C324h */ case    2:  		/* add R7, R5, R28 */
		/* 8213C324h case    2:*/		cpu::op::add<0>(regs,&regs.R7,regs.R5,regs.R28);
		/* 8213C324h case    2:*/		return 0x8213C328;
		  /* 8213C328h */ case    3:  		/* mr R6, R5 */
		/* 8213C328h case    3:*/		regs.R6 = regs.R5;
		/* 8213C328h case    3:*/		return 0x8213C32C;
		  /* 8213C32Ch */ case    4:  		/* cmplw CR6, R5, R7 */
		/* 8213C32Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R7);
		/* 8213C32Ch case    4:*/		return 0x8213C330;
		  /* 8213C330h */ case    5:  		/* stwx R21, <#[R11 + R9]> */
		/* 8213C330h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C330h case    5:*/		return 0x8213C334;
		  /* 8213C334h */ case    6:  		/* bc 4, CR6_LT, 68 */
		/* 8213C334h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8213C378;  }
		/* 8213C334h case    6:*/		return 0x8213C338;
		  /* 8213C338h */ case    7:  		/* addi R8, R1, 96 */
		/* 8213C338h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8213C338h case    7:*/		return 0x8213C33C;
		  /* 8213C33Ch */ case    8:  		/* mr R9, R4 */
		/* 8213C33Ch case    8:*/		regs.R9 = regs.R4;
		/* 8213C33Ch case    8:*/		return 0x8213C340;
		  /* 8213C340h */ case    9:  		/* lwzx R10, <#[R3 + R9]> */
		/* 8213C340h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R9 + 0x00000000) );
		/* 8213C340h case    9:*/		return 0x8213C344;
		  /* 8213C344h */ case   10:  		/* lwzx R14, <#[R11 + R8]> */
		/* 8213C344h case   10:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213C344h case   10:*/		return 0x8213C348;
		  /* 8213C348h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213C348h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213C348h case   11:*/		return 0x8213C34C;
		  /* 8213C34Ch */ case   12:  		/* lwzx R10, <#[R10 + R30]> */
		/* 8213C34Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8213C34Ch case   12:*/		return 0x8213C350;
		  /* 8213C350h */ case   13:  		/* lwz R10, <#[R10 + 16]> */
		/* 8213C350h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8213C350h case   13:*/		return 0x8213C354;
		  /* 8213C354h */ case   14:  		/* addi R10, R10, 1 */
		/* 8213C354h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213C354h case   14:*/		return 0x8213C358;
		  /* 8213C358h */ case   15:  		/* cmplw CR6, R10, R14 */
		/* 8213C358h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R14);
		/* 8213C358h case   15:*/		return 0x8213C35C;
		  /* 8213C35Ch */ case   16:  		/* bc 4, CR6_GT, 8 */
		/* 8213C35Ch case   16:*/		if ( !regs.CR[6].gt ) { return 0x8213C364;  }
		/* 8213C35Ch case   16:*/		return 0x8213C360;
		  /* 8213C360h */ case   17:  		/* stwx R10, <#[R11 + R8]> */
		/* 8213C360h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213C360h case   17:*/		return 0x8213C364;
	}
	return 0x8213C364;
} // Block from 8213C31Ch-8213C364h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213C364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C364);
		  /* 8213C364h */ case    0:  		/* addi R6, R6, 1 */
		/* 8213C364h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213C364h case    0:*/		return 0x8213C368;
		  /* 8213C368h */ case    1:  		/* addi R9, R9, 4 */
		/* 8213C368h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8213C368h case    1:*/		return 0x8213C36C;
		  /* 8213C36Ch */ case    2:  		/* cmplw CR6, R6, R7 */
		/* 8213C36Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 8213C36Ch case    2:*/		return 0x8213C370;
		  /* 8213C370h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 8213C370h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213C340;  }
		/* 8213C370h case    3:*/		return 0x8213C374;
		  /* 8213C374h */ case    4:  		/* lwz R14, <#[R1 + 80]> */
		/* 8213C374h case    4:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C374h case    4:*/		return 0x8213C378;
	}
	return 0x8213C378;
} // Block from 8213C364h-8213C378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C378);
		  /* 8213C378h */ case    0:  		/* add R5, R5, R28 */
		/* 8213C378h case    0:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R28);
		/* 8213C378h case    0:*/		return 0x8213C37C;
		  /* 8213C37Ch */ case    1:  		/* add R4, R26, R4 */
		/* 8213C37Ch case    1:*/		cpu::op::add<0>(regs,&regs.R4,regs.R26,regs.R4);
		/* 8213C37Ch case    1:*/		return 0x8213C380;
		  /* 8213C380h */ case    2:  		/* cmplw CR6, R5, R25 */
		/* 8213C380h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R25);
		/* 8213C380h case    2:*/		return 0x8213C384;
		  /* 8213C384h */ case    3:  		/* bc 12, CR6_LT, -196 */
		/* 8213C384h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213C2C0;  }
		/* 8213C384h case    3:*/		return 0x8213C388;
	}
	return 0x8213C388;
} // Block from 8213C378h-8213C388h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213C388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C388);
		  /* 8213C388h */ case    0:  		/* addi R20, R20, 1 */
		/* 8213C388h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 8213C388h case    0:*/		return 0x8213C38C;
		  /* 8213C38Ch */ case    1:  		/* b 156 */
		/* 8213C38Ch case    1:*/		return 0x8213C428;
		/* 8213C38Ch case    1:*/		return 0x8213C390;
	}
	return 0x8213C390;
} // Block from 8213C388h-8213C390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213C390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C390);
		  /* 8213C390h */ case    0:  		/* cmplw CR6, R11, R19 */
		/* 8213C390h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8213C390h case    0:*/		return 0x8213C394;
		  /* 8213C394h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8213C394h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213C3B0;  }
		/* 8213C394h case    1:*/		return 0x8213C398;
	}
	return 0x8213C398;
} // Block from 8213C390h-8213C398h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213C398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C398);
		  /* 8213C398h */ case    0:  		/* lwz R11, <#[R10 + 8]> */
		/* 8213C398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8213C398h case    0:*/		return 0x8213C39C;
		  /* 8213C39Ch */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213C39Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C39Ch case    1:*/		return 0x8213C3A0;
		  /* 8213C3A0h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 8213C3A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213C3A0h case    2:*/		return 0x8213C3A4;
		  /* 8213C3A4h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C3A4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C3A4h case    3:*/		return 0x8213C3A8;
		  /* 8213C3A8h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213C3A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213C3A8h case    4:*/		return 0x8213C3AC;
		  /* 8213C3ACh */ case    5:  		/* b 28 */
		/* 8213C3ACh case    5:*/		return 0x8213C3C8;
		/* 8213C3ACh case    5:*/		return 0x8213C3B0;
	}
	return 0x8213C3B0;
} // Block from 8213C398h-8213C3B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213C3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C3B0);
		  /* 8213C3B0h */ case    0:  		/* lwz R11, <#[R10 + 8]> */
		/* 8213C3B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8213C3B0h case    0:*/		return 0x8213C3B4;
		  /* 8213C3B4h */ case    1:  		/* rlwinm R10, R9, 2, 10, 29 */
		/* 8213C3B4h case    1:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R10,regs.R9);
		/* 8213C3B4h case    1:*/		return 0x8213C3B8;
		  /* 8213C3B8h */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213C3B8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C3B8h case    2:*/		return 0x8213C3BC;
		  /* 8213C3BCh */ case    3:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213C3BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213C3BCh case    3:*/		return 0x8213C3C0;
		  /* 8213C3C0h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213C3C0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213C3C0h case    4:*/		return 0x8213C3C4;
		  /* 8213C3C4h */ case    5:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213C3C4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C3C4h case    5:*/		return 0x8213C3C8;
	}
	return 0x8213C3C8;
} // Block from 8213C3B0h-8213C3C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213C3C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C3C8);
		  /* 8213C3C8h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 8213C3C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213C3C8h case    0:*/		return 0x8213C3CC;
		  /* 8213C3CCh */ case    1:  		/* lwz R9, <#[R31 + 128]> */
		/* 8213C3CCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000080) );
		/* 8213C3CCh case    1:*/		return 0x8213C3D0;
		  /* 8213C3D0h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 8213C3D0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213C3D0h case    2:*/		return 0x8213C3D4;
		  /* 8213C3D4h */ case    3:  		/* bc 4, CR6_EQ, 80 */
		/* 8213C3D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213C424;  }
		/* 8213C3D4h case    3:*/		return 0x8213C3D8;
		  /* 8213C3D8h */ case    4:  		/* lwz R10, <#[R11 + 60]> */
		/* 8213C3D8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213C3D8h case    4:*/		return 0x8213C3DC;
		  /* 8213C3DCh */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 8213C3DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213C3DCh case    5:*/		return 0x8213C3E0;
		  /* 8213C3E0h */ case    6:  		/* bc 4, CR6_EQ, 68 */
		/* 8213C3E0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8213C424;  }
		/* 8213C3E0h case    6:*/		return 0x8213C3E4;
		  /* 8213C3E4h */ case    7:  		/* lbz R9, <#[R11 + 111]> */
		/* 8213C3E4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000006F) );
		/* 8213C3E4h case    7:*/		return 0x8213C3E8;
		  /* 8213C3E8h */ case    8:  		/* lbz R10, <#[R11 + 110]> */
		/* 8213C3E8h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006E) );
		/* 8213C3E8h case    8:*/		return 0x8213C3EC;
		  /* 8213C3ECh */ case    9:  		/* cmplwi CR6, R9, 3 */
		/* 8213C3ECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 8213C3ECh case    9:*/		return 0x8213C3F0;
		  /* 8213C3F0h */ case   10:  		/* bc 4, CR6_EQ, 196 */
		/* 8213C3F0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213C4B4;  }
		/* 8213C3F0h case   10:*/		return 0x8213C3F4;
		  /* 8213C3F4h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213C3F4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213C3F4h case   11:*/		return 0x8213C3F8;
		  /* 8213C3F8h */ case   12:  		/* addi R11, R1, 128 */
		/* 8213C3F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8213C3F8h case   12:*/		return 0x8213C3FC;
		  /* 8213C3FCh */ case   13:  		/* lwzx R9, <#[R10 + R11]> */
		/* 8213C3FCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213C3FCh case   13:*/		return 0x8213C400;
		  /* 8213C400h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 8213C400h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8213C400h case   14:*/		return 0x8213C404;
		  /* 8213C404h */ case   15:  		/* bc 12, CR6_EQ, 24 */
		/* 8213C404h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213C41C;  }
		/* 8213C404h case   15:*/		return 0x8213C408;
		  /* 8213C408h */ case   16:  		/* lhz R9, <#[R31 + 202]> */
		/* 8213C408h case   16:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213C408h case   16:*/		return 0x8213C40C;
		  /* 8213C40Ch */ case   17:  		/* addi R9, R9, -260 */
		/* 8213C40Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFEFC);
		/* 8213C40Ch case   17:*/		return 0x8213C410;
		  /* 8213C410h */ case   18:  		/* addic R9, R9, -1 */
		/* 8213C410h case   18:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8213C410h case   18:*/		return 0x8213C414;
		  /* 8213C414h */ case   19:  		/* subfe R9, R9, R9 */
		/* 8213C414h case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8213C414h case   19:*/		return 0x8213C418;
		  /* 8213C418h */ case   20:  		/* and R23, R9, R23 */
		/* 8213C418h case   20:*/		cpu::op::and<0>(regs,&regs.R23,regs.R9,regs.R23);
		/* 8213C418h case   20:*/		return 0x8213C41C;
	}
	return 0x8213C41C;
} // Block from 8213C3C8h-8213C41Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213C41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C41C);
		  /* 8213C41Ch */ case    0:  		/* stwx R21, <#[R10 + R11]> */
		/* 8213C41Ch case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213C41Ch case    0:*/		return 0x8213C420;
		  /* 8213C420h */ case    1:  		/* b 8 */
		/* 8213C420h case    1:*/		return 0x8213C428;
		/* 8213C420h case    1:*/		return 0x8213C424;
	}
	return 0x8213C424;
} // Block from 8213C41Ch-8213C424h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213C424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C424);
		  /* 8213C424h */ case    0:  		/* mr R23, R29 */
		/* 8213C424h case    0:*/		regs.R23 = regs.R29;
		/* 8213C424h case    0:*/		return 0x8213C428;
	}
	return 0x8213C428;
} // Block from 8213C424h-8213C428h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C428);
		  /* 8213C428h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C428h case    0:*/		return 0x8213C42C;
		  /* 8213C42Ch */ case    1:  		/* addi R24, R24, 1 */
		/* 8213C42Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8213C42Ch case    1:*/		return 0x8213C430;
		  /* 8213C430h */ case    2:  		/* addi R22, R22, 4 */
		/* 8213C430h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 8213C430h case    2:*/		return 0x8213C434;
		  /* 8213C434h */ case    3:  		/* cmplw CR6, R24, R11 */
		/* 8213C434h case    3:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 8213C434h case    3:*/		return 0x8213C438;
		  /* 8213C438h */ case    4:  		/* bc 12, CR6_LT, -544 */
		/* 8213C438h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213C218;  }
		/* 8213C438h case    4:*/		return 0x8213C43C;
		  /* 8213C43Ch */ case    5:  		/* subfic R11, R20, 16 */
		/* 8213C43Ch case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R20,0x10);
		/* 8213C43Ch case    5:*/		return 0x8213C440;
		  /* 8213C440h */ case    6:  		/* addze R10, R20 */
		/* 8213C440h case    6:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R20);
		/* 8213C440h case    6:*/		return 0x8213C444;
		  /* 8213C444h */ case    7:  		/* subf R11, R10, R20 */
		/* 8213C444h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R20);
		/* 8213C444h case    7:*/		return 0x8213C448;
		  /* 8213C448h */ case    8:  		/* and R23, R11, R23 */
		/* 8213C448h case    8:*/		cpu::op::and<0>(regs,&regs.R23,regs.R11,regs.R23);
		/* 8213C448h case    8:*/		return 0x8213C44C;
	}
	return 0x8213C44C;
} // Block from 8213C428h-8213C44Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213C44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C44C);
		  /* 8213C44Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213C44Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C44Ch case    0:*/		return 0x8213C450;
		  /* 8213C450h */ case    1:  		/* mr R10, R29 */
		/* 8213C450h case    1:*/		regs.R10 = regs.R29;
		/* 8213C450h case    1:*/		return 0x8213C454;
		  /* 8213C454h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213C454h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C454h case    2:*/		return 0x8213C458;
		  /* 8213C458h */ case    3:  		/* bc 4, CR6_GT, 40 */
		/* 8213C458h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213C480;  }
		/* 8213C458h case    3:*/		return 0x8213C45C;
		  /* 8213C45Ch */ case    4:  		/* mr R11, R29 */
		/* 8213C45Ch case    4:*/		regs.R11 = regs.R29;
		/* 8213C45Ch case    4:*/		return 0x8213C460;
		  /* 8213C460h */ case    5:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213C460h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C460h case    5:*/		return 0x8213C464;
		  /* 8213C464h */ case    6:  		/* addi R10, R10, 1 */
		/* 8213C464h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213C464h case    6:*/		return 0x8213C468;
		  /* 8213C468h */ case    7:  		/* lwzx R9, <#[R9 + R11]> */
		/* 8213C468h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213C468h case    7:*/		return 0x8213C46C;
		  /* 8213C46Ch */ case    8:  		/* addi R11, R11, 4 */
		/* 8213C46Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213C46Ch case    8:*/		return 0x8213C470;
		  /* 8213C470h */ case    9:  		/* stw R29, <#[R9 + 64]> */
		/* 8213C470h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + 0x00000040) );
		/* 8213C470h case    9:*/		return 0x8213C474;
		  /* 8213C474h */ case   10:  		/* lwz R9, <#[R31 + 8]> */
		/* 8213C474h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C474h case   10:*/		return 0x8213C478;
		  /* 8213C478h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 8213C478h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213C478h case   11:*/		return 0x8213C47C;
		  /* 8213C47Ch */ case   12:  		/* bc 12, CR6_LT, -28 */
		/* 8213C47Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x8213C460;  }
		/* 8213C47Ch case   12:*/		return 0x8213C480;
	}
	return 0x8213C480;
} // Block from 8213C44Ch-8213C480h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213C480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C480);
		  /* 8213C480h */ case    0:  		/* lwz R24, <#[R31 + 12]> */
		/* 8213C480h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C480h case    0:*/		return 0x8213C484;
		  /* 8213C484h */ case    1:  		/* cmpwi CR6, R23, 0 */
		/* 8213C484h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 8213C484h case    1:*/		return 0x8213C488;
		  /* 8213C488h */ case    2:  		/* lis R4, 9345 */
		/* 8213C488h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C488h case    2:*/		return 0x8213C48C;
		  /* 8213C48Ch */ case    3:  		/* li R3, 2048 */
		/* 8213C48Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213C48Ch case    3:*/		return 0x8213C490;
		  /* 8213C490h */ case    4:  		/* bc 12, CR6_EQ, 128 */
		/* 8213C490h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213C510;  }
		/* 8213C490h case    4:*/		return 0x8213C494;
		  /* 8213C494h */ case    5:  		/* stw R29, <#[R31 + 560]> */
		/* 8213C494h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000230) );
		/* 8213C494h case    5:*/		return 0x8213C498;
		  /* 8213C498h */ case    6:  		/* bl -737944 */
		/* 8213C498h case    6:*/		regs.LR = 0x8213C49C; return 0x82088200;
		/* 8213C498h case    6:*/		return 0x8213C49C;
		  /* 8213C49Ch */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8213C49Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213C49Ch case    7:*/		return 0x8213C4A0;
		  /* 8213C4A0h */ case    8:  		/* stw R3, <#[R31 + 564]> */
		/* 8213C4A0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C4A0h case    8:*/		return 0x8213C4A4;
		  /* 8213C4A4h */ case    9:  		/* bc 4, CR0_EQ, 52 */
		/* 8213C4A4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8213C4D8;  }
		/* 8213C4A4h case    9:*/		return 0x8213C4A8;
		  /* 8213C4A8h */ case   10:  		/* lis R3, -32761 */
		/* 8213C4A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213C4A8h case   10:*/		return 0x8213C4AC;
		  /* 8213C4ACh */ case   11:  		/* ori R3, R3, 14 */
		/* 8213C4ACh case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213C4ACh case   11:*/		return 0x8213C4B0;
		  /* 8213C4B0h */ case   12:  		/* b 908 */
		/* 8213C4B0h case   12:*/		return 0x8213C83C;
		/* 8213C4B0h case   12:*/		return 0x8213C4B4;
	}
	return 0x8213C4B4;
} // Block from 8213C480h-8213C4B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213C4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C4B4);
		  /* 8213C4B4h */ case    0:  		/* lis R10, -32253 */
		/* 8213C4B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8213C4B4h case    0:*/		return 0x8213C4B8;
		  /* 8213C4B8h */ case    1:  		/* lwz R4, <#[R11 + 96]> */
		/* 8213C4B8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000060) );
		/* 8213C4B8h case    1:*/		return 0x8213C4BC;
		  /* 8213C4BCh */ case    2:  		/* li R5, 4513 */
		/* 8213C4BCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A1);
		/* 8213C4BCh case    2:*/		return 0x8213C4C0;
		  /* 8213C4C0h */ case    3:  		/* addi R6, R10, 23032 */
		/* 8213C4C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x59F8);
		/* 8213C4C0h case    3:*/		return 0x8213C4C4;
		  /* 8213C4C4h */ case    4:  		/* mr R3, R31 */
		/* 8213C4C4h case    4:*/		regs.R3 = regs.R31;
		/* 8213C4C4h case    4:*/		return 0x8213C4C8;
		  /* 8213C4C8h */ case    5:  		/* bl -187800 */
		/* 8213C4C8h case    5:*/		regs.LR = 0x8213C4CC; return 0x8210E730;
		/* 8213C4C8h case    5:*/		return 0x8213C4CC;
		  /* 8213C4CCh */ case    6:  		/* lis R3, -32768 */
		/* 8213C4CCh case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213C4CCh case    6:*/		return 0x8213C4D0;
		  /* 8213C4D0h */ case    7:  		/* ori R3, R3, 16389 */
		/* 8213C4D0h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213C4D0h case    7:*/		return 0x8213C4D4;
		  /* 8213C4D4h */ case    8:  		/* b 872 */
		/* 8213C4D4h case    8:*/		return 0x8213C83C;
		/* 8213C4D4h case    8:*/		return 0x8213C4D8;
	}
	return 0x8213C4D8;
} // Block from 8213C4B4h-8213C4D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213C4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C4D8);
		  /* 8213C4D8h */ case    0:  		/* li R5, 2048 */
		/* 8213C4D8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213C4D8h case    0:*/		return 0x8213C4DC;
		  /* 8213C4DCh */ case    1:  		/* li R4, 0 */
		/* 8213C4DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C4DCh case    1:*/		return 0x8213C4E0;
		  /* 8213C4E0h */ case    2:  		/* bl -700832 */
		/* 8213C4E0h case    2:*/		regs.LR = 0x8213C4E4; return 0x82091340;
		/* 8213C4E0h case    2:*/		return 0x8213C4E4;
		  /* 8213C4E4h */ case    3:  		/* li R9, 0 */
		/* 8213C4E4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8213C4E4h case    3:*/		return 0x8213C4E8;
		  /* 8213C4E8h */ case    4:  		/* li R8, 0 */
		/* 8213C4E8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8213C4E8h case    4:*/		return 0x8213C4EC;
		  /* 8213C4ECh */ case    5:  		/* lwz R6, <#[R31 + 24]> */
		/* 8213C4ECh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C4ECh case    5:*/		return 0x8213C4F0;
		  /* 8213C4F0h */ case    6:  		/* mr R7, R24 */
		/* 8213C4F0h case    6:*/		regs.R7 = regs.R24;
		/* 8213C4F0h case    6:*/		return 0x8213C4F4;
		  /* 8213C4F4h */ case    7:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213C4F4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C4F4h case    7:*/		return 0x8213C4F8;
		  /* 8213C4F8h */ case    8:  		/* addi R5, R31, 552 */
		/* 8213C4F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x228);
		/* 8213C4F8h case    8:*/		return 0x8213C4FC;
		  /* 8213C4FCh */ case    9:  		/* mr R3, R31 */
		/* 8213C4FCh case    9:*/		regs.R3 = regs.R31;
		/* 8213C4FCh case    9:*/		return 0x8213C500;
		  /* 8213C500h */ case   10:  		/* bl -36104 */
		/* 8213C500h case   10:*/		regs.LR = 0x8213C504; return 0x821337F8;
		/* 8213C500h case   10:*/		return 0x8213C504;
		  /* 8213C504h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 8213C504h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213C504h case   11:*/		return 0x8213C508;
		  /* 8213C508h */ case   12:  		/* bc 4, CR0_LT, 704 */
		/* 8213C508h case   12:*/		if ( !regs.CR[0].lt ) { return 0x8213C7C8;  }
		/* 8213C508h case   12:*/		return 0x8213C50C;
		  /* 8213C50Ch */ case   13:  		/* b 816 */
		/* 8213C50Ch case   13:*/		return 0x8213C83C;
		/* 8213C50Ch case   13:*/		return 0x8213C510;
	}
	return 0x8213C510;
} // Block from 8213C4D8h-8213C510h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213C510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C510);
		  /* 8213C510h */ case    0:  		/* bl -738064 */
		/* 8213C510h case    0:*/		regs.LR = 0x8213C514; return 0x82088200;
		/* 8213C510h case    0:*/		return 0x8213C514;
		  /* 8213C514h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 8213C514h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213C514h case    1:*/		return 0x8213C518;
		  /* 8213C518h */ case    2:  		/* stw R3, <#[R31 + 560]> */
		/* 8213C518h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213C518h case    2:*/		return 0x8213C51C;
		  /* 8213C51Ch */ case    3:  		/* bc 12, CR0_EQ, -116 */
		/* 8213C51Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8213C4A8;  }
		/* 8213C51Ch case    3:*/		return 0x8213C520;
		  /* 8213C520h */ case    4:  		/* lis R4, 9345 */
		/* 8213C520h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C520h case    4:*/		return 0x8213C524;
		  /* 8213C524h */ case    5:  		/* li R3, 2048 */
		/* 8213C524h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213C524h case    5:*/		return 0x8213C528;
		  /* 8213C528h */ case    6:  		/* bl -738088 */
		/* 8213C528h case    6:*/		regs.LR = 0x8213C52C; return 0x82088200;
		/* 8213C528h case    6:*/		return 0x8213C52C;
		  /* 8213C52Ch */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8213C52Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213C52Ch case    7:*/		return 0x8213C530;
		  /* 8213C530h */ case    8:  		/* stw R3, <#[R31 + 564]> */
		/* 8213C530h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C530h case    8:*/		return 0x8213C534;
		  /* 8213C534h */ case    9:  		/* bc 12, CR0_EQ, -140 */
		/* 8213C534h case    9:*/		if ( regs.CR[0].eq ) { return 0x8213C4A8;  }
		/* 8213C534h case    9:*/		return 0x8213C538;
		  /* 8213C538h */ case   10:  		/* lis R4, 9345 */
		/* 8213C538h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C538h case   10:*/		return 0x8213C53C;
		  /* 8213C53Ch */ case   11:  		/* li R3, 2048 */
		/* 8213C53Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213C53Ch case   11:*/		return 0x8213C540;
		  /* 8213C540h */ case   12:  		/* bl -738112 */
		/* 8213C540h case   12:*/		regs.LR = 0x8213C544; return 0x82088200;
		/* 8213C540h case   12:*/		return 0x8213C544;
		  /* 8213C544h */ case   13:  		/* or. R14, R3, R3 */
		/* 8213C544h case   13:*/		cpu::op::or<1>(regs,&regs.R14,regs.R3,regs.R3);
		/* 8213C544h case   13:*/		return 0x8213C548;
		  /* 8213C548h */ case   14:  		/* bc 12, CR0_EQ, -160 */
		/* 8213C548h case   14:*/		if ( regs.CR[0].eq ) { return 0x8213C4A8;  }
		/* 8213C548h case   14:*/		return 0x8213C54C;
		  /* 8213C54Ch */ case   15:  		/* lis R4, 9345 */
		/* 8213C54Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C54Ch case   15:*/		return 0x8213C550;
		  /* 8213C550h */ case   16:  		/* li R3, 2048 */
		/* 8213C550h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213C550h case   16:*/		return 0x8213C554;
		  /* 8213C554h */ case   17:  		/* bl -738132 */
		/* 8213C554h case   17:*/		regs.LR = 0x8213C558; return 0x82088200;
		/* 8213C554h case   17:*/		return 0x8213C558;
		  /* 8213C558h */ case   18:  		/* li R5, 2048 */
		/* 8213C558h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213C558h case   18:*/		return 0x8213C55C;
		  /* 8213C55Ch */ case   19:  		/* li R4, 0 */
		/* 8213C55Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C55Ch case   19:*/		return 0x8213C560;
		  /* 8213C560h */ case   20:  		/* mr R17, R3 */
		/* 8213C560h case   20:*/		regs.R17 = regs.R3;
		/* 8213C560h case   20:*/		return 0x8213C564;
		  /* 8213C564h */ case   21:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213C564h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213C564h case   21:*/		return 0x8213C568;
		  /* 8213C568h */ case   22:  		/* bl -700968 */
		/* 8213C568h case   22:*/		regs.LR = 0x8213C56C; return 0x82091340;
		/* 8213C568h case   22:*/		return 0x8213C56C;
		  /* 8213C56Ch */ case   23:  		/* li R5, 2048 */
		/* 8213C56Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213C56Ch case   23:*/		return 0x8213C570;
		  /* 8213C570h */ case   24:  		/* li R4, 0 */
		/* 8213C570h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C570h case   24:*/		return 0x8213C574;
		  /* 8213C574h */ case   25:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213C574h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C574h case   25:*/		return 0x8213C578;
		  /* 8213C578h */ case   26:  		/* bl -700984 */
		/* 8213C578h case   26:*/		regs.LR = 0x8213C57C; return 0x82091340;
		/* 8213C578h case   26:*/		return 0x8213C57C;
		  /* 8213C57Ch */ case   27:  		/* li R5, 2048 */
		/* 8213C57Ch case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213C57Ch case   27:*/		return 0x8213C580;
		  /* 8213C580h */ case   28:  		/* li R4, 0 */
		/* 8213C580h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C580h case   28:*/		return 0x8213C584;
		  /* 8213C584h */ case   29:  		/* mr R3, R14 */
		/* 8213C584h case   29:*/		regs.R3 = regs.R14;
		/* 8213C584h case   29:*/		return 0x8213C588;
		  /* 8213C588h */ case   30:  		/* bl -701000 */
		/* 8213C588h case   30:*/		regs.LR = 0x8213C58C; return 0x82091340;
		/* 8213C588h case   30:*/		return 0x8213C58C;
		  /* 8213C58Ch */ case   31:  		/* li R5, 2048 */
		/* 8213C58Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213C58Ch case   31:*/		return 0x8213C590;
		  /* 8213C590h */ case   32:  		/* li R4, 0 */
		/* 8213C590h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C590h case   32:*/		return 0x8213C594;
		  /* 8213C594h */ case   33:  		/* mr R3, R17 */
		/* 8213C594h case   33:*/		regs.R3 = regs.R17;
		/* 8213C594h case   33:*/		return 0x8213C598;
		  /* 8213C598h */ case   34:  		/* bl -701016 */
		/* 8213C598h case   34:*/		regs.LR = 0x8213C59C; return 0x82091340;
		/* 8213C598h case   34:*/		return 0x8213C59C;
		  /* 8213C59Ch */ case   35:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C59Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C59Ch case   35:*/		return 0x8213C5A0;
		  /* 8213C5A0h */ case   36:  		/* addi R25, R31, 548 */
		/* 8213C5A0h case   36:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x224);
		/* 8213C5A0h case   36:*/		return 0x8213C5A4;
		  /* 8213C5A4h */ case   37:  		/* stw R29, <#[R1 + 80]> */
		/* 8213C5A4h case   37:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C5A4h case   37:*/		return 0x8213C5A8;
		  /* 8213C5A8h */ case   38:  		/* addi R26, R31, 552 */
		/* 8213C5A8h case   38:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x228);
		/* 8213C5A8h case   38:*/		return 0x8213C5AC;
		  /* 8213C5ACh */ case   39:  		/* stw R29, <#[R31 + 548]> */
		/* 8213C5ACh case   39:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000224) );
		/* 8213C5ACh case   39:*/		return 0x8213C5B0;
		  /* 8213C5B0h */ case   40:  		/* mr R27, R29 */
		/* 8213C5B0h case   40:*/		regs.R27 = regs.R29;
		/* 8213C5B0h case   40:*/		return 0x8213C5B4;
		  /* 8213C5B4h */ case   41:  		/* stw R29, <#[R31 + 552]> */
		/* 8213C5B4h case   41:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000228) );
		/* 8213C5B4h case   41:*/		return 0x8213C5B8;
		  /* 8213C5B8h */ case   42:  		/* cmplwi CR6, R11, 0 */
		/* 8213C5B8h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C5B8h case   42:*/		return 0x8213C5BC;
		  /* 8213C5BCh */ case   43:  		/* bc 4, CR6_GT, 348 */
		/* 8213C5BCh case   43:*/		if ( !regs.CR[6].gt ) { return 0x8213C718;  }
		/* 8213C5BCh case   43:*/		return 0x8213C5C0;
		  /* 8213C5C0h */ case   44:  		/* mr R28, R29 */
		/* 8213C5C0h case   44:*/		regs.R28 = regs.R29;
		/* 8213C5C0h case   44:*/		return 0x8213C5C4;
		  /* 8213C5C4h */ case   45:  		/* cmplwi CR6, R28, 2048 */
		/* 8213C5C4h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000800);
		/* 8213C5C4h case   45:*/		return 0x8213C5C8;
		  /* 8213C5C8h */ case   46:  		/* bc 4, CR6_LT, 636 */
		/* 8213C5C8h case   46:*/		if ( !regs.CR[6].lt ) { return 0x8213C844;  }
		/* 8213C5C8h case   46:*/		return 0x8213C5CC;
		  /* 8213C5CCh */ case   47:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213C5CCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C5CCh case   47:*/		return 0x8213C5D0;
		  /* 8213C5D0h */ case   48:  		/* lwzx R8, <#[R11 + R28]> */
		/* 8213C5D0h case   48:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213C5D0h case   48:*/		return 0x8213C5D4;
		  /* 8213C5D4h */ case   49:  		/* lwz R9, <#[R8]> */
		/* 8213C5D4h case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8213C5D4h case   49:*/		return 0x8213C5D8;
		  /* 8213C5D8h */ case   50:  		/* rlwinm R11, R9, 0, 0, 11 */
		/* 8213C5D8h case   50:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R9);
		/* 8213C5D8h case   50:*/		return 0x8213C5DC;
		  /* 8213C5DCh */ case   51:  		/* cmplw CR6, R11, R18 */
		/* 8213C5DCh case   51:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8213C5DCh case   51:*/		return 0x8213C5E0;
		  /* 8213C5E0h */ case   52:  		/* bc 12, CR6_EQ, 88 */
		/* 8213C5E0h case   52:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C5E0h case   52:*/		return 0x8213C5E4;
		  /* 8213C5E4h */ case   53:  		/* lis R10, 24656 */
		/* 8213C5E4h case   53:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 8213C5E4h case   53:*/		return 0x8213C5E8;
		  /* 8213C5E8h */ case   54:  		/* cmplw CR6, R11, R10 */
		/* 8213C5E8h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213C5E8h case   54:*/		return 0x8213C5EC;
		  /* 8213C5ECh */ case   55:  		/* bc 12, CR6_EQ, 76 */
		/* 8213C5ECh case   55:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C5ECh case   55:*/		return 0x8213C5F0;
	}
	return 0x8213C5F0;
} // Block from 8213C510h-8213C5F0h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8213C5F0h
// Function '?MatchOutputModifier@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C5F0);
		  /* 8213C5F0h */ case    0:  		/* lis R10, 24736 */
		/* 8213C5F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8213C5F0h case    0:*/		return 0x8213C5F4;
		  /* 8213C5F4h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8213C5F4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213C5F4h case    1:*/		return 0x8213C5F8;
		  /* 8213C5F8h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 8213C5F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C5F8h case    2:*/		return 0x8213C5FC;
		  /* 8213C5FCh */ case    3:  		/* lis R10, 29408 */
		/* 8213C5FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 8213C5FCh case    3:*/		return 0x8213C600;
		  /* 8213C600h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8213C600h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213C600h case    4:*/		return 0x8213C604;
		  /* 8213C604h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 8213C604h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C604h case    5:*/		return 0x8213C608;
		  /* 8213C608h */ case    6:  		/* lis R10, 24688 */
		/* 8213C608h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 8213C608h case    6:*/		return 0x8213C60C;
		  /* 8213C60Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8213C60Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213C60Ch case    7:*/		return 0x8213C610;
		  /* 8213C610h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8213C610h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C610h case    8:*/		return 0x8213C614;
		  /* 8213C614h */ case    9:  		/* lis R10, 24816 */
		/* 8213C614h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8213C614h case    9:*/		return 0x8213C618;
		  /* 8213C618h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8213C618h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213C618h case   10:*/		return 0x8213C61C;
		  /* 8213C61Ch */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 8213C61Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C61Ch case   11:*/		return 0x8213C620;
		  /* 8213C620h */ case   12:  		/* cmplw CR6, R11, R19 */
		/* 8213C620h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8213C620h case   12:*/		return 0x8213C624;
		  /* 8213C624h */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 8213C624h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C624h case   13:*/		return 0x8213C628;
		  /* 8213C628h */ case   14:  		/* cmplw CR6, R11, R16 */
		/* 8213C628h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 8213C628h case   14:*/		return 0x8213C62C;
		  /* 8213C62Ch */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 8213C62Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8213C638;  }
		/* 8213C62Ch case   15:*/		return 0x8213C630;
		  /* 8213C630h */ case   16:  		/* cmplw CR6, R11, R15 */
		/* 8213C630h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 8213C630h case   16:*/		return 0x8213C634;
		  /* 8213C634h */ case   17:  		/* bc 4, CR6_EQ, 208 */
		/* 8213C634h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213C704;  }
		/* 8213C634h case   17:*/		return 0x8213C638;
	}
	return 0x8213C638;
} // Block from 8213C5F0h-8213C638h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213C638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C638);
		  /* 8213C638h */ case    0:  		/* subf R11, R11, R19 */
		/* 8213C638h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 8213C638h case    0:*/		return 0x8213C63C;
		  /* 8213C63Ch */ case    1:  		/* lwz R10, <#[R8 + 8]> */
		/* 8213C63Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 8213C63Ch case    1:*/		return 0x8213C640;
		  /* 8213C640h */ case    2:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 8213C640h case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 8213C640h case    2:*/		return 0x8213C644;
		  /* 8213C644h */ case    3:  		/* lwz R7, <#[R31 + 20]> */
		/* 8213C644h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C644h case    3:*/		return 0x8213C648;
		  /* 8213C648h */ case    4:  		/* subfic R11, R11, 0 */
		/* 8213C648h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8213C648h case    4:*/		return 0x8213C64C;
		  /* 8213C64Ch */ case    5:  		/* lwz R6, <#[R31 + 136]> */
		/* 8213C64Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000088) );
		/* 8213C64Ch case    5:*/		return 0x8213C650;
		  /* 8213C650h */ case    6:  		/* subfe R11, R11, R11 */
		/* 8213C650h case    6:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8213C650h case    6:*/		return 0x8213C654;
		  /* 8213C654h */ case    7:  		/* and R11, R11, R9 */
		/* 8213C654h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8213C654h case    7:*/		return 0x8213C658;
		  /* 8213C658h */ case    8:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 8213C658h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 8213C658h case    8:*/		return 0x8213C65C;
		  /* 8213C65Ch */ case    9:  		/* add R4, R9, R10 */
		/* 8213C65Ch case    9:*/		cpu::op::add<0>(regs,&regs.R4,regs.R9,regs.R10);
		/* 8213C65Ch case    9:*/		return 0x8213C660;
		  /* 8213C660h */ case   10:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8213C660h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213C660h case   10:*/		return 0x8213C664;
		  /* 8213C664h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213C664h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213C664h case   11:*/		return 0x8213C668;
		  /* 8213C668h */ case   12:  		/* lwzx R10, <#[R10 + R7]> */
		/* 8213C668h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 8213C668h case   12:*/		return 0x8213C66C;
		  /* 8213C66Ch */ case   13:  		/* lwz R9, <#[R10 + 4]> */
		/* 8213C66Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8213C66Ch case   13:*/		return 0x8213C670;
		  /* 8213C670h */ case   14:  		/* cmplw CR6, R9, R6 */
		/* 8213C670h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 8213C670h case   14:*/		return 0x8213C674;
		  /* 8213C674h */ case   15:  		/* bc 12, CR6_EQ, 112 */
		/* 8213C674h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213C6E4;  }
		/* 8213C674h case   15:*/		return 0x8213C678;
		  /* 8213C678h */ case   16:  		/* lwz R7, <#[R10 + 60]> */
		/* 8213C678h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000003C) );
		/* 8213C678h case   16:*/		return 0x8213C67C;
		  /* 8213C67Ch */ case   17:  		/* cmplwi CR6, R7, 0 */
		/* 8213C67Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213C67Ch case   17:*/		return 0x8213C680;
		  /* 8213C680h */ case   18:  		/* bc 4, CR6_EQ, 100 */
		/* 8213C680h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8213C6E4;  }
		/* 8213C680h case   18:*/		return 0x8213C684;
		  /* 8213C684h */ case   19:  		/* lwz R11, <#[R31 + 128]> */
		/* 8213C684h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8213C684h case   19:*/		return 0x8213C688;
		  /* 8213C688h */ case   20:  		/* cmplw CR6, R9, R11 */
		/* 8213C688h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8213C688h case   20:*/		return 0x8213C68C;
		  /* 8213C68Ch */ case   21:  		/* bc 4, CR6_EQ, 120 */
		/* 8213C68Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x8213C704;  }
		/* 8213C68Ch case   21:*/		return 0x8213C690;
		  /* 8213C690h */ case   22:  		/* lbz R11, <#[R10 + 111]> */
		/* 8213C690h case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000006F) );
		/* 8213C690h case   22:*/		return 0x8213C694;
		  /* 8213C694h */ case   23:  		/* cmplwi CR6, R11, 3 */
		/* 8213C694h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8213C694h case   23:*/		return 0x8213C698;
		  /* 8213C698h */ case   24:  		/* bc 4, CR6_EQ, 448 */
		/* 8213C698h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8213C858;  }
		/* 8213C698h case   24:*/		return 0x8213C69C;
		  /* 8213C69Ch */ case   25:  		/* lbz R11, <#[R10 + 110]> */
		/* 8213C69Ch case   25:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000006E) );
		/* 8213C69Ch case   25:*/		return 0x8213C6A0;
		  /* 8213C6A0h */ case   26:  		/* addi R10, R1, 160 */
		/* 8213C6A0h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 8213C6A0h case   26:*/		return 0x8213C6A4;
		  /* 8213C6A4h */ case   27:  		/* rlwinm R11, R11, 2, 0, 31 */
		/* 8213C6A4h case   27:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R11,regs.R11);
		/* 8213C6A4h case   27:*/		return 0x8213C6A8;
		  /* 8213C6A8h */ case   28:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213C6A8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213C6A8h case   28:*/		return 0x8213C6AC;
		  /* 8213C6ACh */ case   29:  		/* cmpwi CR6, R11, 0 */
		/* 8213C6ACh case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213C6ACh case   29:*/		return 0x8213C6B0;
		  /* 8213C6B0h */ case   30:  		/* bc 12, CR6_EQ, 84 */
		/* 8213C6B0h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213C704;  }
		/* 8213C6B0h case   30:*/		return 0x8213C6B4;
		  /* 8213C6B4h */ case   31:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213C6B4h case   31:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213C6B4h case   31:*/		return 0x8213C6B8;
		  /* 8213C6B8h */ case   32:  		/* cmplwi CR6, R11, 260 */
		/* 8213C6B8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213C6B8h case   32:*/		return 0x8213C6BC;
		  /* 8213C6BCh */ case   33:  		/* bc 12, CR6_EQ, 72 */
		/* 8213C6BCh case   33:*/		if ( regs.CR[6].eq ) { return 0x8213C704;  }
		/* 8213C6BCh case   33:*/		return 0x8213C6C0;
		  /* 8213C6C0h */ case   34:  		/* lis R11, -32253 */
		/* 8213C6C0h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213C6C0h case   34:*/		return 0x8213C6C4;
		  /* 8213C6C4h */ case   35:  		/* li R5, 4520 */
		/* 8213C6C4h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x11A8);
		/* 8213C6C4h case   35:*/		return 0x8213C6C8;
		  /* 8213C6C8h */ case   36:  		/* addi R6, R11, 22952 */
		/* 8213C6C8h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x59A8);
		/* 8213C6C8h case   36:*/		return 0x8213C6CC;
		  /* 8213C6CCh */ case   37:  		/* li R4, 0 */
		/* 8213C6CCh case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C6CCh case   37:*/		return 0x8213C6D0;
		  /* 8213C6D0h */ case   38:  		/* mr R3, R31 */
		/* 8213C6D0h case   38:*/		regs.R3 = regs.R31;
		/* 8213C6D0h case   38:*/		return 0x8213C6D4;
		  /* 8213C6D4h */ case   39:  		/* bl -188324 */
		/* 8213C6D4h case   39:*/		regs.LR = 0x8213C6D8; return 0x8210E730;
		/* 8213C6D4h case   39:*/		return 0x8213C6D8;
		  /* 8213C6D8h */ case   40:  		/* lis R30, -32768 */
		/* 8213C6D8h case   40:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8213C6D8h case   40:*/		return 0x8213C6DC;
		  /* 8213C6DCh */ case   41:  		/* ori R30, R30, 16389 */
		/* 8213C6DCh case   41:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8213C6DCh case   41:*/		return 0x8213C6E0;
		  /* 8213C6E0h */ case   42:  		/* b 304 */
		/* 8213C6E0h case   42:*/		return 0x8213C810;
		/* 8213C6E0h case   42:*/		return 0x8213C6E4;
	}
	return 0x8213C6E4;
} // Block from 8213C638h-8213C6E4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8213C6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C6E4);
		  /* 8213C6E4h */ case    0:  		/* lwz R10, <#[R8 + 4]> */
		/* 8213C6E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 8213C6E4h case    0:*/		return 0x8213C6E8;
		  /* 8213C6E8h */ case    1:  		/* addi R7, R1, 80 */
		/* 8213C6E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8213C6E8h case    1:*/		return 0x8213C6EC;
		  /* 8213C6ECh */ case    2:  		/* mr R6, R14 */
		/* 8213C6ECh case    2:*/		regs.R6 = regs.R14;
		/* 8213C6ECh case    2:*/		return 0x8213C6F0;
		  /* 8213C6F0h */ case    3:  		/* subf R5, R11, R10 */
		/* 8213C6F0h case    3:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 8213C6F0h case    3:*/		return 0x8213C6F4;
		  /* 8213C6F4h */ case    4:  		/* mr R3, R31 */
		/* 8213C6F4h case    4:*/		regs.R3 = regs.R31;
		/* 8213C6F4h case    4:*/		return 0x8213C6F8;
		  /* 8213C6F8h */ case    5:  		/* bl -37264 */
		/* 8213C6F8h case    5:*/		regs.LR = 0x8213C6FC; return 0x82133568;
		/* 8213C6F8h case    5:*/		return 0x8213C6FC;
		  /* 8213C6FCh */ case    6:  		/* or. R30, R3, R3 */
		/* 8213C6FCh case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213C6FCh case    6:*/		return 0x8213C700;
		  /* 8213C700h */ case    7:  		/* bc 12, CR0_LT, 272 */
		/* 8213C700h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213C810;  }
		/* 8213C700h case    7:*/		return 0x8213C704;
	}
	return 0x8213C704;
} // Block from 8213C6E4h-8213C704h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213C704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C704);
		  /* 8213C704h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C704h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C704h case    0:*/		return 0x8213C708;
		  /* 8213C708h */ case    1:  		/* addi R27, R27, 1 */
		/* 8213C708h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8213C708h case    1:*/		return 0x8213C70C;
		  /* 8213C70Ch */ case    2:  		/* addi R28, R28, 4 */
		/* 8213C70Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213C70Ch case    2:*/		return 0x8213C710;
		  /* 8213C710h */ case    3:  		/* cmplw CR6, R27, R11 */
		/* 8213C710h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8213C710h case    3:*/		return 0x8213C714;
		  /* 8213C714h */ case    4:  		/* bc 12, CR6_LT, -336 */
		/* 8213C714h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213C5C4;  }
		/* 8213C714h case    4:*/		return 0x8213C718;
	}
	return 0x8213C718;
} // Block from 8213C704h-8213C718h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C718);
		  /* 8213C718h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8213C718h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C718h case    0:*/		return 0x8213C71C;
		  /* 8213C71Ch */ case    1:  		/* mr R10, R29 */
		/* 8213C71Ch case    1:*/		regs.R10 = regs.R29;
		/* 8213C71Ch case    1:*/		return 0x8213C720;
		  /* 8213C720h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213C720h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C720h case    2:*/		return 0x8213C724;
		  /* 8213C724h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 8213C724h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213C750;  }
		/* 8213C724h case    3:*/		return 0x8213C728;
		  /* 8213C728h */ case    4:  		/* mr R11, R14 */
		/* 8213C728h case    4:*/		regs.R11 = regs.R14;
		/* 8213C728h case    4:*/		return 0x8213C72C;
		  /* 8213C72Ch */ case    5:  		/* subf R9, R14, R17 */
		/* 8213C72Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R14,regs.R17);
		/* 8213C72Ch case    5:*/		return 0x8213C730;
		  /* 8213C730h */ case    6:  		/* lwz R8, <#[R11]> */
		/* 8213C730h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8213C730h case    6:*/		return 0x8213C734;
		  /* 8213C734h */ case    7:  		/* addi R10, R10, 1 */
		/* 8213C734h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213C734h case    7:*/		return 0x8213C738;
		  /* 8213C738h */ case    8:  		/* stwx R8, <#[R9 + R11]> */
		/* 8213C738h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213C738h case    8:*/		return 0x8213C73C;
		  /* 8213C73Ch */ case    9:  		/* stw R29, <#[R11]> */
		/* 8213C73Ch case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8213C73Ch case    9:*/		return 0x8213C740;
		  /* 8213C740h */ case   10:  		/* addi R11, R11, 4 */
		/* 8213C740h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213C740h case   10:*/		return 0x8213C744;
		  /* 8213C744h */ case   11:  		/* lwz R8, <#[R1 + 80]> */
		/* 8213C744h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C744h case   11:*/		return 0x8213C748;
		  /* 8213C748h */ case   12:  		/* cmplw CR6, R10, R8 */
		/* 8213C748h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213C748h case   12:*/		return 0x8213C74C;
		  /* 8213C74Ch */ case   13:  		/* bc 12, CR6_LT, -28 */
		/* 8213C74Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x8213C730;  }
		/* 8213C74Ch case   13:*/		return 0x8213C750;
	}
	return 0x8213C750;
} // Block from 8213C718h-8213C750h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213C750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C750);
		  /* 8213C750h */ case    0:  		/* li R9, 0 */
		/* 8213C750h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8213C750h case    0:*/		return 0x8213C754;
		  /* 8213C754h */ case    1:  		/* lwz R6, <#[R31 + 24]> */
		/* 8213C754h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C754h case    1:*/		return 0x8213C758;
		  /* 8213C758h */ case    2:  		/* li R8, 0 */
		/* 8213C758h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8213C758h case    2:*/		return 0x8213C75C;
		  /* 8213C75Ch */ case    3:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213C75Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C75Ch case    3:*/		return 0x8213C760;
		  /* 8213C760h */ case    4:  		/* mr R7, R24 */
		/* 8213C760h case    4:*/		regs.R7 = regs.R24;
		/* 8213C760h case    4:*/		return 0x8213C764;
		  /* 8213C764h */ case    5:  		/* mr R5, R26 */
		/* 8213C764h case    5:*/		regs.R5 = regs.R26;
		/* 8213C764h case    5:*/		return 0x8213C768;
		  /* 8213C768h */ case    6:  		/* mr R3, R31 */
		/* 8213C768h case    6:*/		regs.R3 = regs.R31;
		/* 8213C768h case    6:*/		return 0x8213C76C;
		  /* 8213C76Ch */ case    7:  		/* bl -36724 */
		/* 8213C76Ch case    7:*/		regs.LR = 0x8213C770; return 0x821337F8;
		/* 8213C76Ch case    7:*/		return 0x8213C770;
		  /* 8213C770h */ case    8:  		/* or. R30, R3, R3 */
		/* 8213C770h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213C770h case    8:*/		return 0x8213C774;
		  /* 8213C774h */ case    9:  		/* bc 12, CR0_LT, 156 */
		/* 8213C774h case    9:*/		if ( regs.CR[0].lt ) { return 0x8213C810;  }
		/* 8213C774h case    9:*/		return 0x8213C778;
		  /* 8213C778h */ case   10:  		/* lwz R7, <#[R1 + 80]> */
		/* 8213C778h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C778h case   10:*/		return 0x8213C77C;
		  /* 8213C77Ch */ case   11:  		/* mr R11, R29 */
		/* 8213C77Ch case   11:*/		regs.R11 = regs.R29;
		/* 8213C77Ch case   11:*/		return 0x8213C780;
		  /* 8213C780h */ case   12:  		/* cmplwi CR6, R7, 0 */
		/* 8213C780h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213C780h case   12:*/		return 0x8213C784;
		  /* 8213C784h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 8213C784h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213C7A4;  }
		/* 8213C784h case   13:*/		return 0x8213C788;
		  /* 8213C788h */ case   14:  		/* addi R10, R17, -4 */
		/* 8213C788h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R17,0xFFFFFFFC);
		/* 8213C788h case   14:*/		return 0x8213C78C;
		  /* 8213C78Ch */ case   15:  		/* lwzu R9, <#[R10 + 4]> */
		/* 8213C78Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8213C78Ch case   15:*/		return 0x8213C790;
		  /* 8213C790h */ case   16:  		/* addi R11, R11, 1 */
		/* 8213C790h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213C790h case   16:*/		return 0x8213C794;
		  /* 8213C794h */ case   17:  		/* stw R29, <#[R9 + 36]> */
		/* 8213C794h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + 0x00000024) );
		/* 8213C794h case   17:*/		return 0x8213C798;
		  /* 8213C798h */ case   18:  		/* lwz R7, <#[R1 + 80]> */
		/* 8213C798h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8213C798h case   18:*/		return 0x8213C79C;
		  /* 8213C79Ch */ case   19:  		/* cmplw CR6, R11, R7 */
		/* 8213C79Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8213C79Ch case   19:*/		return 0x8213C7A0;
		  /* 8213C7A0h */ case   20:  		/* bc 12, CR6_LT, -20 */
		/* 8213C7A0h case   20:*/		if ( regs.CR[6].lt ) { return 0x8213C78C;  }
		/* 8213C7A0h case   20:*/		return 0x8213C7A4;
	}
	return 0x8213C7A4;
} // Block from 8213C750h-8213C7A4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213C7A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C7A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C7A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C7A4);
		  /* 8213C7A4h */ case    0:  		/* mr R6, R17 */
		/* 8213C7A4h case    0:*/		regs.R6 = regs.R17;
		/* 8213C7A4h case    0:*/		return 0x8213C7A8;
		  /* 8213C7A8h */ case    1:  		/* lwz R9, <#[R31 + 76]> */
		/* 8213C7A8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213C7A8h case    1:*/		return 0x8213C7AC;
		  /* 8213C7ACh */ case    2:  		/* mr R5, R25 */
		/* 8213C7ACh case    2:*/		regs.R5 = regs.R25;
		/* 8213C7ACh case    2:*/		return 0x8213C7B0;
		  /* 8213C7B0h */ case    3:  		/* lwz R8, <#[R31 + 564]> */
		/* 8213C7B0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000234) );
		/* 8213C7B0h case    3:*/		return 0x8213C7B4;
		  /* 8213C7B4h */ case    4:  		/* mr R3, R31 */
		/* 8213C7B4h case    4:*/		regs.R3 = regs.R31;
		/* 8213C7B4h case    4:*/		return 0x8213C7B8;
		  /* 8213C7B8h */ case    5:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213C7B8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213C7B8h case    5:*/		return 0x8213C7BC;
		  /* 8213C7BCh */ case    6:  		/* bl -36804 */
		/* 8213C7BCh case    6:*/		regs.LR = 0x8213C7C0; return 0x821337F8;
		/* 8213C7BCh case    6:*/		return 0x8213C7C0;
		  /* 8213C7C0h */ case    7:  		/* or. R30, R3, R3 */
		/* 8213C7C0h case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213C7C0h case    7:*/		return 0x8213C7C4;
		  /* 8213C7C4h */ case    8:  		/* bc 12, CR0_LT, 76 */
		/* 8213C7C4h case    8:*/		if ( regs.CR[0].lt ) { return 0x8213C810;  }
		/* 8213C7C4h case    8:*/		return 0x8213C7C8;
	}
	return 0x8213C7C8;
} // Block from 8213C7A4h-8213C7C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213C7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C7C8);
		  /* 8213C7C8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213C7C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C7C8h case    0:*/		return 0x8213C7CC;
		  /* 8213C7CCh */ case    1:  		/* mr R9, R29 */
		/* 8213C7CCh case    1:*/		regs.R9 = regs.R29;
		/* 8213C7CCh case    1:*/		return 0x8213C7D0;
		  /* 8213C7D0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213C7D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C7D0h case    2:*/		return 0x8213C7D4;
		  /* 8213C7D4h */ case    3:  		/* bc 4, CR6_GT, 56 */
		/* 8213C7D4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213C80C;  }
		/* 8213C7D4h case    3:*/		return 0x8213C7D8;
		  /* 8213C7D8h */ case    4:  		/* mr R11, R29 */
		/* 8213C7D8h case    4:*/		regs.R11 = regs.R29;
		/* 8213C7D8h case    4:*/		return 0x8213C7DC;
		  /* 8213C7DCh */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213C7DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C7DCh case    5:*/		return 0x8213C7E0;
		  /* 8213C7E0h */ case    6:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8213C7E0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213C7E0h case    6:*/		return 0x8213C7E4;
		  /* 8213C7E4h */ case    7:  		/* lwz R8, <#[R10 + 64]> */
		/* 8213C7E4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000040) );
		/* 8213C7E4h case    7:*/		return 0x8213C7E8;
		  /* 8213C7E8h */ case    8:  		/* cmplwi CR6, R8, 1 */
		/* 8213C7E8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 8213C7E8h case    8:*/		return 0x8213C7EC;
		  /* 8213C7ECh */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 8213C7ECh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8213C7F8;  }
		/* 8213C7ECh case    9:*/		return 0x8213C7F0;
		  /* 8213C7F0h */ case   10:  		/* lwz R8, <#[R31 + 116]> */
		/* 8213C7F0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000074) );
		/* 8213C7F0h case   10:*/		return 0x8213C7F4;
		  /* 8213C7F4h */ case   11:  		/* stw R8, <#[R10 + 4]> */
		/* 8213C7F4h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 8213C7F4h case   11:*/		return 0x8213C7F8;
	}
	return 0x8213C7F8;
} // Block from 8213C7C8h-8213C7F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213C7F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C7F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C7F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C7F8);
		  /* 8213C7F8h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8213C7F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C7F8h case    0:*/		return 0x8213C7FC;
		  /* 8213C7FCh */ case    1:  		/* addi R9, R9, 1 */
		/* 8213C7FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213C7FCh case    1:*/		return 0x8213C800;
		  /* 8213C800h */ case    2:  		/* addi R11, R11, 4 */
		/* 8213C800h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213C800h case    2:*/		return 0x8213C804;
		  /* 8213C804h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 8213C804h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8213C804h case    3:*/		return 0x8213C808;
		  /* 8213C808h */ case    4:  		/* bc 12, CR6_LT, -44 */
		/* 8213C808h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213C7DC;  }
		/* 8213C808h case    4:*/		return 0x8213C80C;
	}
	return 0x8213C80C;
} // Block from 8213C7F8h-8213C80Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C80C);
		  /* 8213C80Ch */ case    0:  		/* mr R30, R29 */
		/* 8213C80Ch case    0:*/		regs.R30 = regs.R29;
		/* 8213C80Ch case    0:*/		return 0x8213C810;
	}
	return 0x8213C810;
} // Block from 8213C80Ch-8213C810h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C810);
		  /* 8213C810h */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 8213C810h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 8213C810h case    0:*/		return 0x8213C814;
		  /* 8213C814h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8213C814h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213C824;  }
		/* 8213C814h case    1:*/		return 0x8213C818;
		  /* 8213C818h */ case    2:  		/* lis R4, 9345 */
		/* 8213C818h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C818h case    2:*/		return 0x8213C81C;
		  /* 8213C81Ch */ case    3:  		/* mr R3, R14 */
		/* 8213C81Ch case    3:*/		regs.R3 = regs.R14;
		/* 8213C81Ch case    3:*/		return 0x8213C820;
		  /* 8213C820h */ case    4:  		/* bl -738536 */
		/* 8213C820h case    4:*/		regs.LR = 0x8213C824; return 0x82088338;
		/* 8213C820h case    4:*/		return 0x8213C824;
	}
	return 0x8213C824;
} // Block from 8213C810h-8213C824h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C824);
		  /* 8213C824h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8213C824h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8213C824h case    0:*/		return 0x8213C828;
		  /* 8213C828h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8213C828h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213C838;  }
		/* 8213C828h case    1:*/		return 0x8213C82C;
		  /* 8213C82Ch */ case    2:  		/* lis R4, 9345 */
		/* 8213C82Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C82Ch case    2:*/		return 0x8213C830;
		  /* 8213C830h */ case    3:  		/* mr R3, R17 */
		/* 8213C830h case    3:*/		regs.R3 = regs.R17;
		/* 8213C830h case    3:*/		return 0x8213C834;
		  /* 8213C834h */ case    4:  		/* bl -738556 */
		/* 8213C834h case    4:*/		regs.LR = 0x8213C838; return 0x82088338;
		/* 8213C834h case    4:*/		return 0x8213C838;
	}
	return 0x8213C838;
} // Block from 8213C824h-8213C838h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C838);
		  /* 8213C838h */ case    0:  		/* mr R3, R30 */
		/* 8213C838h case    0:*/		regs.R3 = regs.R30;
		/* 8213C838h case    0:*/		return 0x8213C83C;
	}
	return 0x8213C83C;
} // Block from 8213C838h-8213C83Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C83C);
		  /* 8213C83Ch */ case    0:  		/* addi R1, R1, 336 */
		/* 8213C83Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 8213C83Ch case    0:*/		return 0x8213C840;
		  /* 8213C840h */ case    1:  		/* b -701904 */
		/* 8213C840h case    1:*/		return 0x82091270;
		/* 8213C840h case    1:*/		return 0x8213C844;
	}
	return 0x8213C844;
} // Block from 8213C83Ch-8213C844h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213C844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C844);
		  /* 8213C844h */ case    0:  		/* lis R11, -32253 */
		/* 8213C844h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213C844h case    0:*/		return 0x8213C848;
		  /* 8213C848h */ case    1:  		/* li R5, 4514 */
		/* 8213C848h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A2);
		/* 8213C848h case    1:*/		return 0x8213C84C;
		  /* 8213C84Ch */ case    2:  		/* addi R6, R11, 21000 */
		/* 8213C84Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5208);
		/* 8213C84Ch case    2:*/		return 0x8213C850;
		  /* 8213C850h */ case    3:  		/* li R4, 0 */
		/* 8213C850h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213C850h case    3:*/		return 0x8213C854;
		  /* 8213C854h */ case    4:  		/* b -912 */
		/* 8213C854h case    4:*/		return 0x8213C4C4;
		/* 8213C854h case    4:*/		return 0x8213C858;
	}
	return 0x8213C858;
} // Block from 8213C844h-8213C858h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C858);
		  /* 8213C858h */ case    0:  		/* lis R11, -32253 */
		/* 8213C858h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213C858h case    0:*/		return 0x8213C85C;
		  /* 8213C85Ch */ case    1:  		/* li R5, 4513 */
		/* 8213C85Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11A1);
		/* 8213C85Ch case    1:*/		return 0x8213C860;
		  /* 8213C860h */ case    2:  		/* addi R6, R11, 20496 */
		/* 8213C860h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5010);
		/* 8213C860h case    2:*/		return 0x8213C864;
		  /* 8213C864h */ case    3:  		/* b -408 */
		/* 8213C864h case    3:*/		return 0x8213C6CC;
		/* 8213C864h case    3:*/		return 0x8213C868;
	}
	return 0x8213C868;
} // Block from 8213C858h-8213C868h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213C868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C868);
		  /* 8213C868h */ case    0:  		/* mfspr R12, LR */
		/* 8213C868h case    0:*/		regs.R12 = regs.LR;
		/* 8213C868h case    0:*/		return 0x8213C86C;
		  /* 8213C86Ch */ case    1:  		/* bl -701972 */
		/* 8213C86Ch case    1:*/		regs.LR = 0x8213C870; return 0x82091258;
		/* 8213C86Ch case    1:*/		return 0x8213C870;
		  /* 8213C870h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213C870h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213C870h case    2:*/		return 0x8213C874;
		  /* 8213C874h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8213C874h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213C874h case    3:*/		return 0x8213C878;
		  /* 8213C878h */ case    4:  		/* mr R31, R3 */
		/* 8213C878h case    4:*/		regs.R31 = regs.R3;
		/* 8213C878h case    4:*/		return 0x8213C87C;
		  /* 8213C87Ch */ case    5:  		/* lis R4, 9345 */
		/* 8213C87Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C87Ch case    5:*/		return 0x8213C880;
		  /* 8213C880h */ case    6:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 8213C880h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 8213C880h case    6:*/		return 0x8213C884;
		  /* 8213C884h */ case    7:  		/* li R29, 0 */
		/* 8213C884h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213C884h case    7:*/		return 0x8213C888;
		  /* 8213C888h */ case    8:  		/* bl -738952 */
		/* 8213C888h case    8:*/		regs.LR = 0x8213C88C; return 0x82088200;
		/* 8213C888h case    8:*/		return 0x8213C88C;
		  /* 8213C88Ch */ case    9:  		/* stw R3, <#[R31 + 696]> */
		/* 8213C88Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213C88Ch case    9:*/		return 0x8213C890;
		  /* 8213C890h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213C890h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C890h case   10:*/		return 0x8213C894;
		  /* 8213C894h */ case   11:  		/* lis R4, 9345 */
		/* 8213C894h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213C894h case   11:*/		return 0x8213C898;
		  /* 8213C898h */ case   12:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 8213C898h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 8213C898h case   12:*/		return 0x8213C89C;
		  /* 8213C89Ch */ case   13:  		/* bl -738972 */
		/* 8213C89Ch case   13:*/		regs.LR = 0x8213C8A0; return 0x82088200;
		/* 8213C89Ch case   13:*/		return 0x8213C8A0;
		  /* 8213C8A0h */ case   14:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213C8A0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213C8A0h case   14:*/		return 0x8213C8A4;
		  /* 8213C8A4h */ case   15:  		/* stw R3, <#[R31 + 700]> */
		/* 8213C8A4h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213C8A4h case   15:*/		return 0x8213C8A8;
		  /* 8213C8A8h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8213C8A8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C8A8h case   16:*/		return 0x8213C8AC;
		  /* 8213C8ACh */ case   17:  		/* bc 12, CR6_EQ, 264 */
		/* 8213C8ACh case   17:*/		if ( regs.CR[6].eq ) { return 0x8213C9B4;  }
		/* 8213C8ACh case   17:*/		return 0x8213C8B0;
		  /* 8213C8B0h */ case   18:  		/* cmplwi CR6, R3, 0 */
		/* 8213C8B0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213C8B0h case   18:*/		return 0x8213C8B4;
		  /* 8213C8B4h */ case   19:  		/* bc 12, CR6_EQ, 256 */
		/* 8213C8B4h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213C9B4;  }
		/* 8213C8B4h case   19:*/		return 0x8213C8B8;
		  /* 8213C8B8h */ case   20:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C8B8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C8B8h case   20:*/		return 0x8213C8BC;
		  /* 8213C8BCh */ case   21:  		/* li R28, 0 */
		/* 8213C8BCh case   21:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213C8BCh case   21:*/		return 0x8213C8C0;
		  /* 8213C8C0h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 8213C8C0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C8C0h case   22:*/		return 0x8213C8C4;
		  /* 8213C8C4h */ case   23:  		/* bc 4, CR6_GT, 104 */
		/* 8213C8C4h case   23:*/		if ( !regs.CR[6].gt ) { return 0x8213C92C;  }
		/* 8213C8C4h case   23:*/		return 0x8213C8C8;
		  /* 8213C8C8h */ case   24:  		/* li R30, 0 */
		/* 8213C8C8h case   24:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213C8C8h case   24:*/		return 0x8213C8CC;
		  /* 8213C8CCh */ case   25:  		/* li R3, 116 */
		/* 8213C8CCh case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213C8CCh case   25:*/		return 0x8213C8D0;
		  /* 8213C8D0h */ case   26:  		/* bl -262968 */
		/* 8213C8D0h case   26:*/		regs.LR = 0x8213C8D4; return 0x820FC598;
		/* 8213C8D0h case   26:*/		return 0x8213C8D4;
		  /* 8213C8D4h */ case   27:  		/* cmplwi CR0, R3, 0 */
		/* 8213C8D4h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213C8D4h case   27:*/		return 0x8213C8D8;
		  /* 8213C8D8h */ case   28:  		/* bc 12, CR0_EQ, 12 */
		/* 8213C8D8h case   28:*/		if ( regs.CR[0].eq ) { return 0x8213C8E4;  }
		/* 8213C8D8h case   28:*/		return 0x8213C8DC;
		  /* 8213C8DCh */ case   29:  		/* bl -264764 */
		/* 8213C8DCh case   29:*/		regs.LR = 0x8213C8E0; return 0x820FBEA0;
		/* 8213C8DCh case   29:*/		return 0x8213C8E0;
		  /* 8213C8E0h */ case   30:  		/* b 8 */
		/* 8213C8E0h case   30:*/		return 0x8213C8E8;
		/* 8213C8E0h case   30:*/		return 0x8213C8E4;
	}
	return 0x8213C8E4;
} // Block from 8213C868h-8213C8E4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8213C8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C8E4);
		  /* 8213C8E4h */ case    0:  		/* li R3, 0 */
		/* 8213C8E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213C8E4h case    0:*/		return 0x8213C8E8;
	}
	return 0x8213C8E8;
} // Block from 8213C8E4h-8213C8E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C8E8);
		  /* 8213C8E8h */ case    0:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213C8E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213C8E8h case    0:*/		return 0x8213C8EC;
		  /* 8213C8ECh */ case    1:  		/* stwx R3, <#[R30 + R11]> */
		/* 8213C8ECh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213C8ECh case    1:*/		return 0x8213C8F0;
		  /* 8213C8F0h */ case    2:  		/* lwz R11, <#[R31 + 696]> */
		/* 8213C8F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002B8) );
		/* 8213C8F0h case    2:*/		return 0x8213C8F4;
		  /* 8213C8F4h */ case    3:  		/* lwzx R10, <#[R30 + R11]> */
		/* 8213C8F4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213C8F4h case    3:*/		return 0x8213C8F8;
		  /* 8213C8F8h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8213C8F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213C8F8h case    4:*/		return 0x8213C8FC;
		  /* 8213C8FCh */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 8213C8FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8213C9B4;  }
		/* 8213C8FCh case    5:*/		return 0x8213C900;
		  /* 8213C900h */ case    6:  		/* lwz R10, <#[R31 + 24]> */
		/* 8213C900h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C900h case    6:*/		return 0x8213C904;
		  /* 8213C904h */ case    7:  		/* lwzx R3, <#[R30 + R11]> */
		/* 8213C904h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213C904h case    7:*/		return 0x8213C908;
		  /* 8213C908h */ case    8:  		/* lwzx R4, <#[R10 + R30]> */
		/* 8213C908h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8213C908h case    8:*/		return 0x8213C90C;
		  /* 8213C90Ch */ case    9:  		/* bl -262076 */
		/* 8213C90Ch case    9:*/		regs.LR = 0x8213C910; return 0x820FC950;
		/* 8213C90Ch case    9:*/		return 0x8213C910;
		  /* 8213C910h */ case   10:  		/* or. R29, R3, R3 */
		/* 8213C910h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8213C910h case   10:*/		return 0x8213C914;
		  /* 8213C914h */ case   11:  		/* bc 12, CR0_LT, 168 */
		/* 8213C914h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213C9BC;  }
		/* 8213C914h case   11:*/		return 0x8213C918;
		  /* 8213C918h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C918h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C918h case   12:*/		return 0x8213C91C;
		  /* 8213C91Ch */ case   13:  		/* addi R28, R28, 1 */
		/* 8213C91Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213C91Ch case   13:*/		return 0x8213C920;
		  /* 8213C920h */ case   14:  		/* addi R30, R30, 4 */
		/* 8213C920h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213C920h case   14:*/		return 0x8213C924;
		  /* 8213C924h */ case   15:  		/* cmplw CR6, R28, R11 */
		/* 8213C924h case   15:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213C924h case   15:*/		return 0x8213C928;
		  /* 8213C928h */ case   16:  		/* bc 12, CR6_LT, -92 */
		/* 8213C928h case   16:*/		if ( regs.CR[6].lt ) { return 0x8213C8CC;  }
		/* 8213C928h case   16:*/		return 0x8213C92C;
	}
	return 0x8213C92C;
} // Block from 8213C8E8h-8213C92Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213C92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C92C);
		  /* 8213C92Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213C92Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C92Ch case    0:*/		return 0x8213C930;
		  /* 8213C930h */ case    1:  		/* li R28, 0 */
		/* 8213C930h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213C930h case    1:*/		return 0x8213C934;
		  /* 8213C934h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213C934h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C934h case    2:*/		return 0x8213C938;
		  /* 8213C938h */ case    3:  		/* bc 4, CR6_GT, 104 */
		/* 8213C938h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213C9A0;  }
		/* 8213C938h case    3:*/		return 0x8213C93C;
		  /* 8213C93Ch */ case    4:  		/* li R30, 0 */
		/* 8213C93Ch case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213C93Ch case    4:*/		return 0x8213C940;
		  /* 8213C940h */ case    5:  		/* li R3, 128 */
		/* 8213C940h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x80);
		/* 8213C940h case    5:*/		return 0x8213C944;
		  /* 8213C944h */ case    6:  		/* bl -261148 */
		/* 8213C944h case    6:*/		regs.LR = 0x8213C948; return 0x820FCD28;
		/* 8213C944h case    6:*/		return 0x8213C948;
		  /* 8213C948h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8213C948h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213C948h case    7:*/		return 0x8213C94C;
		  /* 8213C94Ch */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 8213C94Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8213C958;  }
		/* 8213C94Ch case    8:*/		return 0x8213C950;
		  /* 8213C950h */ case    9:  		/* bl 920176 */
		/* 8213C950h case    9:*/		regs.LR = 0x8213C954; return 0x8221D3C0;
		/* 8213C950h case    9:*/		return 0x8213C954;
		  /* 8213C954h */ case   10:  		/* b 8 */
		/* 8213C954h case   10:*/		return 0x8213C95C;
		/* 8213C954h case   10:*/		return 0x8213C958;
	}
	return 0x8213C958;
} // Block from 8213C92Ch-8213C958h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213C958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C958);
		  /* 8213C958h */ case    0:  		/* li R3, 0 */
		/* 8213C958h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213C958h case    0:*/		return 0x8213C95C;
	}
	return 0x8213C95C;
} // Block from 8213C958h-8213C95Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213C95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C95C);
		  /* 8213C95Ch */ case    0:  		/* lwz R11, <#[R31 + 700]> */
		/* 8213C95Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213C95Ch case    0:*/		return 0x8213C960;
		  /* 8213C960h */ case    1:  		/* stwx R3, <#[R11 + R30]> */
		/* 8213C960h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213C960h case    1:*/		return 0x8213C964;
		  /* 8213C964h */ case    2:  		/* lwz R11, <#[R31 + 700]> */
		/* 8213C964h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000002BC) );
		/* 8213C964h case    2:*/		return 0x8213C968;
		  /* 8213C968h */ case    3:  		/* lwzx R10, <#[R11 + R30]> */
		/* 8213C968h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213C968h case    3:*/		return 0x8213C96C;
		  /* 8213C96Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8213C96Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213C96Ch case    4:*/		return 0x8213C970;
		  /* 8213C970h */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 8213C970h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213C9B4;  }
		/* 8213C970h case    5:*/		return 0x8213C974;
		  /* 8213C974h */ case    6:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213C974h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213C974h case    6:*/		return 0x8213C978;
		  /* 8213C978h */ case    7:  		/* lwzx R3, <#[R11 + R30]> */
		/* 8213C978h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8213C978h case    7:*/		return 0x8213C97C;
		  /* 8213C97Ch */ case    8:  		/* lwzx R4, <#[R10 + R30]> */
		/* 8213C97Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8213C97Ch case    8:*/		return 0x8213C980;
		  /* 8213C980h */ case    9:  		/* bl -261592 */
		/* 8213C980h case    9:*/		regs.LR = 0x8213C984; return 0x820FCBA8;
		/* 8213C980h case    9:*/		return 0x8213C984;
		  /* 8213C984h */ case   10:  		/* or. R29, R3, R3 */
		/* 8213C984h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8213C984h case   10:*/		return 0x8213C988;
		  /* 8213C988h */ case   11:  		/* bc 12, CR0_LT, 52 */
		/* 8213C988h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213C9BC;  }
		/* 8213C988h case   11:*/		return 0x8213C98C;
		  /* 8213C98Ch */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213C98Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C98Ch case   12:*/		return 0x8213C990;
		  /* 8213C990h */ case   13:  		/* addi R28, R28, 1 */
		/* 8213C990h case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213C990h case   13:*/		return 0x8213C994;
		  /* 8213C994h */ case   14:  		/* addi R30, R30, 4 */
		/* 8213C994h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213C994h case   14:*/		return 0x8213C998;
		  /* 8213C998h */ case   15:  		/* cmplw CR6, R28, R11 */
		/* 8213C998h case   15:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213C998h case   15:*/		return 0x8213C99C;
		  /* 8213C99Ch */ case   16:  		/* bc 12, CR6_LT, -92 */
		/* 8213C99Ch case   16:*/		if ( regs.CR[6].lt ) { return 0x8213C940;  }
		/* 8213C99Ch case   16:*/		return 0x8213C9A0;
	}
	return 0x8213C9A0;
} // Block from 8213C95Ch-8213C9A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213C9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C9A0);
		  /* 8213C9A0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213C9A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213C9A0h case    0:*/		return 0x8213C9A4;
		  /* 8213C9A4h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 8213C9A4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8213C9A4h case    1:*/		return 0x8213C9A8;
		  /* 8213C9A8h */ case    2:  		/* stw R11, <#[R31 + 708]> */
		/* 8213C9A8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000002C4) );
		/* 8213C9A8h case    2:*/		return 0x8213C9AC;
		  /* 8213C9ACh */ case    3:  		/* stw R10, <#[R31 + 704]> */
		/* 8213C9ACh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000002C0) );
		/* 8213C9ACh case    3:*/		return 0x8213C9B0;
		  /* 8213C9B0h */ case    4:  		/* b 12 */
		/* 8213C9B0h case    4:*/		return 0x8213C9BC;
		/* 8213C9B0h case    4:*/		return 0x8213C9B4;
	}
	return 0x8213C9B4;
} // Block from 8213C9A0h-8213C9B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213C9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C9B4);
		  /* 8213C9B4h */ case    0:  		/* lis R29, -32761 */
		/* 8213C9B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 8213C9B4h case    0:*/		return 0x8213C9B8;
		  /* 8213C9B8h */ case    1:  		/* ori R29, R29, 14 */
		/* 8213C9B8h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 8213C9B8h case    1:*/		return 0x8213C9BC;
	}
	return 0x8213C9BC;
} // Block from 8213C9B4h-8213C9BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213C9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C9BC);
		  /* 8213C9BCh */ case    0:  		/* mr R3, R29 */
		/* 8213C9BCh case    0:*/		regs.R3 = regs.R29;
		/* 8213C9BCh case    0:*/		return 0x8213C9C0;
		  /* 8213C9C0h */ case    1:  		/* addi R1, R1, 128 */
		/* 8213C9C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213C9C0h case    1:*/		return 0x8213C9C4;
		  /* 8213C9C4h */ case    2:  		/* b -702236 */
		/* 8213C9C4h case    2:*/		return 0x820912A8;
		/* 8213C9C4h case    2:*/		return 0x8213C9C8;
	}
	return 0x8213C9C8;
} // Block from 8213C9BCh-8213C9C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213C9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213C9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213C9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213C9C8);
		  /* 8213C9C8h */ case    0:  		/* mfspr R12, LR */
		/* 8213C9C8h case    0:*/		regs.R12 = regs.LR;
		/* 8213C9C8h case    0:*/		return 0x8213C9CC;
		  /* 8213C9CCh */ case    1:  		/* bl -702352 */
		/* 8213C9CCh case    1:*/		regs.LR = 0x8213C9D0; return 0x8209123C;
		/* 8213C9CCh case    1:*/		return 0x8213C9D0;
		  /* 8213C9D0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8213C9D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8213C9D0h case    2:*/		return 0x8213C9D4;
		  /* 8213C9D4h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8213C9D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213C9D4h case    3:*/		return 0x8213C9D8;
		  /* 8213C9D8h */ case    4:  		/* li R26, 0 */
		/* 8213C9D8h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8213C9D8h case    4:*/		return 0x8213C9DC;
		  /* 8213C9DCh */ case    5:  		/* mr R31, R3 */
		/* 8213C9DCh case    5:*/		regs.R31 = regs.R3;
		/* 8213C9DCh case    5:*/		return 0x8213C9E0;
		  /* 8213C9E0h */ case    6:  		/* mr R10, R26 */
		/* 8213C9E0h case    6:*/		regs.R10 = regs.R26;
		/* 8213C9E0h case    6:*/		return 0x8213C9E4;
		  /* 8213C9E4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213C9E4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213C9E4h case    7:*/		return 0x8213C9E8;
		  /* 8213C9E8h */ case    8:  		/* bc 4, CR6_GT, 40 */
		/* 8213C9E8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213CA10;  }
		/* 8213C9E8h case    8:*/		return 0x8213C9EC;
		  /* 8213C9ECh */ case    9:  		/* mr R11, R26 */
		/* 8213C9ECh case    9:*/		regs.R11 = regs.R26;
		/* 8213C9ECh case    9:*/		return 0x8213C9F0;
		  /* 8213C9F0h */ case   10:  		/* lwz R9, <#[R31 + 24]> */
		/* 8213C9F0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8213C9F0h case   10:*/		return 0x8213C9F4;
		  /* 8213C9F4h */ case   11:  		/* addi R10, R10, 1 */
		/* 8213C9F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213C9F4h case   11:*/		return 0x8213C9F8;
		  /* 8213C9F8h */ case   12:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8213C9F8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213C9F8h case   12:*/		return 0x8213C9FC;
		  /* 8213C9FCh */ case   13:  		/* addi R11, R11, 4 */
		/* 8213C9FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213C9FCh case   13:*/		return 0x8213CA00;
		  /* 8213CA00h */ case   14:  		/* stw R26, <#[R9 + 40]> */
		/* 8213CA00h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R9 + 0x00000028) );
		/* 8213CA00h case   14:*/		return 0x8213CA04;
		  /* 8213CA04h */ case   15:  		/* lwz R9, <#[R31 + 12]> */
		/* 8213CA04h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CA04h case   15:*/		return 0x8213CA08;
		  /* 8213CA08h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 8213CA08h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213CA08h case   16:*/		return 0x8213CA0C;
		  /* 8213CA0Ch */ case   17:  		/* bc 12, CR6_LT, -28 */
		/* 8213CA0Ch case   17:*/		if ( regs.CR[6].lt ) { return 0x8213C9F0;  }
		/* 8213CA0Ch case   17:*/		return 0x8213CA10;
	}
	return 0x8213CA10;
} // Block from 8213C9C8h-8213CA10h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213CA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CA10);
		  /* 8213CA10h */ case    0:  		/* mr R30, R26 */
		/* 8213CA10h case    0:*/		regs.R30 = regs.R26;
		/* 8213CA10h case    0:*/		return 0x8213CA14;
		  /* 8213CA14h */ case    1:  		/* li R23, 1 */
		/* 8213CA14h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8213CA14h case    1:*/		return 0x8213CA18;
		  /* 8213CA18h */ case    2:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213CA18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213CA18h case    2:*/		return 0x8213CA1C;
		  /* 8213CA1Ch */ case    3:  		/* lwzx R10, <#[R30 + R11]> */
		/* 8213CA1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213CA1Ch case    3:*/		return 0x8213CA20;
		  /* 8213CA20h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8213CA20h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213CA20h case    4:*/		return 0x8213CA24;
		  /* 8213CA24h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8213CA24h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213CA54;  }
		/* 8213CA24h case    5:*/		return 0x8213CA28;
		  /* 8213CA28h */ case    6:  		/* li R6, 1 */
		/* 8213CA28h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8213CA28h case    6:*/		return 0x8213CA2C;
		  /* 8213CA2Ch */ case    7:  		/* lwz R4, <#[R31 + 24]> */
		/* 8213CA2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CA2Ch case    7:*/		return 0x8213CA30;
		  /* 8213CA30h */ case    8:  		/* rlwinm R5, R10, 0, 0, 31 */
		/* 8213CA30h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R10);
		/* 8213CA30h case    8:*/		return 0x8213CA34;
		  /* 8213CA34h */ case    9:  		/* mr R3, R31 */
		/* 8213CA34h case    9:*/		regs.R3 = regs.R31;
		/* 8213CA34h case    9:*/		return 0x8213CA38;
		  /* 8213CA38h */ case   10:  		/* bl -361592 */
		/* 8213CA38h case   10:*/		regs.LR = 0x8213CA3C; return 0x820E45C0;
		/* 8213CA38h case   10:*/		return 0x8213CA3C;
		  /* 8213CA3Ch */ case   11:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213CA3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213CA3Ch case   11:*/		return 0x8213CA40;
		  /* 8213CA40h */ case   12:  		/* li R6, 2 */
		/* 8213CA40h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8213CA40h case   12:*/		return 0x8213CA44;
		  /* 8213CA44h */ case   13:  		/* lwz R4, <#[R31 + 24]> */
		/* 8213CA44h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CA44h case   13:*/		return 0x8213CA48;
		  /* 8213CA48h */ case   14:  		/* mr R3, R31 */
		/* 8213CA48h case   14:*/		regs.R3 = regs.R31;
		/* 8213CA48h case   14:*/		return 0x8213CA4C;
		  /* 8213CA4Ch */ case   15:  		/* lwzx R5, <#[R30 + R11]> */
		/* 8213CA4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213CA4Ch case   15:*/		return 0x8213CA50;
		  /* 8213CA50h */ case   16:  		/* bl -361488 */
		/* 8213CA50h case   16:*/		regs.LR = 0x8213CA54; return 0x820E4640;
		/* 8213CA50h case   16:*/		return 0x8213CA54;
	}
	return 0x8213CA54;
} // Block from 8213CA10h-8213CA54h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213CA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CA54);
		  /* 8213CA54h */ case    0:  		/* lwz R11, <#[R31 + 560]> */
		/* 8213CA54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CA54h case    0:*/		return 0x8213CA58;
		  /* 8213CA58h */ case    1:  		/* lwzx R10, <#[R30 + R11]> */
		/* 8213CA58h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8213CA58h case    1:*/		return 0x8213CA5C;
		  /* 8213CA5Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8213CA5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213CA5Ch case    2:*/		return 0x8213CA60;
		  /* 8213CA60h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8213CA60h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213CA6C;  }
		/* 8213CA60h case    3:*/		return 0x8213CA64;
		  /* 8213CA64h */ case    4:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8213CA64h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8213CA64h case    4:*/		return 0x8213CA68;
		  /* 8213CA68h */ case    5:  		/* stw R23, <#[R11 + 40]> */
		/* 8213CA68h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000028) );
		/* 8213CA68h case    5:*/		return 0x8213CA6C;
	}
	return 0x8213CA6C;
} // Block from 8213CA54h-8213CA6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213CA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CA6C);
		  /* 8213CA6Ch */ case    0:  		/* addi R30, R30, 4 */
		/* 8213CA6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213CA6Ch case    0:*/		return 0x8213CA70;
		  /* 8213CA70h */ case    1:  		/* cmplwi CR6, R30, 24 */
		/* 8213CA70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000018);
		/* 8213CA70h case    1:*/		return 0x8213CA74;
		  /* 8213CA74h */ case    2:  		/* bc 12, CR6_LT, -92 */
		/* 8213CA74h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213CA18;  }
		/* 8213CA74h case    2:*/		return 0x8213CA78;
		  /* 8213CA78h */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CA78h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CA78h case    3:*/		return 0x8213CA7C;
		  /* 8213CA7Ch */ case    4:  		/* mr R7, R26 */
		/* 8213CA7Ch case    4:*/		regs.R7 = regs.R26;
		/* 8213CA7Ch case    4:*/		return 0x8213CA80;
		  /* 8213CA80h */ case    5:  		/* lis R22, 29200 */
		/* 8213CA80h case    5:*/		cpu::op::lis<0>(regs,&regs.R22,0x7210);
		/* 8213CA80h case    5:*/		return 0x8213CA84;
		  /* 8213CA84h */ case    6:  		/* lis R21, 4352 */
		/* 8213CA84h case    6:*/		cpu::op::lis<0>(regs,&regs.R21,0x1100);
		/* 8213CA84h case    6:*/		return 0x8213CA88;
		  /* 8213CA88h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213CA88h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CA88h case    7:*/		return 0x8213CA8C;
		  /* 8213CA8Ch */ case    8:  		/* bc 4, CR6_GT, 124 */
		/* 8213CA8Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213CB08;  }
		/* 8213CA8Ch case    8:*/		return 0x8213CA90;
		  /* 8213CA90h */ case    9:  		/* mr R8, R26 */
		/* 8213CA90h case    9:*/		regs.R8 = regs.R26;
		/* 8213CA90h case    9:*/		return 0x8213CA94;
		  /* 8213CA94h */ case   10:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213CA94h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CA94h case   10:*/		return 0x8213CA98;
		  /* 8213CA98h */ case   11:  		/* lwzx R9, <#[R8 + R11]> */
		/* 8213CA98h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8213CA98h case   11:*/		return 0x8213CA9C;
		  /* 8213CA9Ch */ case   12:  		/* lwz R11, <#[R9]> */
		/* 8213CA9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8213CA9Ch case   12:*/		return 0x8213CAA0;
		  /* 8213CAA0h */ case   13:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8213CAA0h case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213CAA0h case   13:*/		return 0x8213CAA4;
		  /* 8213CAA4h */ case   14:  		/* mr R3, R10 */
		/* 8213CAA4h case   14:*/		regs.R3 = regs.R10;
		/* 8213CAA4h case   14:*/		return 0x8213CAA8;
		  /* 8213CAA8h */ case   15:  		/* bl -54088 */
		/* 8213CAA8h case   15:*/		regs.LR = 0x8213CAAC; return 0x8212F760;
		/* 8213CAA8h case   15:*/		return 0x8213CAAC;
		  /* 8213CAACh */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213CAACh case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CAACh case   16:*/		return 0x8213CAB0;
		  /* 8213CAB0h */ case   17:  		/* bc 4, CR0_EQ, 68 */
		/* 8213CAB0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8213CAF4;  }
		/* 8213CAB0h case   17:*/		return 0x8213CAB4;
		  /* 8213CAB4h */ case   18:  		/* cmplw CR6, R10, R22 */
		/* 8213CAB4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 8213CAB4h case   18:*/		return 0x8213CAB8;
		  /* 8213CAB8h */ case   19:  		/* bc 12, CR6_EQ, 60 */
		/* 8213CAB8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213CAF4;  }
		/* 8213CAB8h case   19:*/		return 0x8213CABC;
		  /* 8213CABCh */ case   20:  		/* cmplw CR6, R10, R21 */
		/* 8213CABCh case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8213CABCh case   20:*/		return 0x8213CAC0;
		  /* 8213CAC0h */ case   21:  		/* bc 12, CR6_EQ, 52 */
		/* 8213CAC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x8213CAF4;  }
		/* 8213CAC0h case   21:*/		return 0x8213CAC4;
		  /* 8213CAC4h */ case   22:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213CAC4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CAC4h case   22:*/		return 0x8213CAC8;
		  /* 8213CAC8h */ case   23:  		/* cmplwi CR6, R11, 512 */
		/* 8213CAC8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213CAC8h case   23:*/		return 0x8213CACC;
		  /* 8213CACCh */ case   24:  		/* bc 4, CR6_LT, 756 */
		/* 8213CACCh case   24:*/		if ( !regs.CR[6].lt ) { return 0x8213CDC0;  }
		/* 8213CACCh case   24:*/		return 0x8213CAD0;
		  /* 8213CAD0h */ case   25:  		/* lwz R10, <#[R9 + 40]> */
		/* 8213CAD0h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000028) );
		/* 8213CAD0h case   25:*/		return 0x8213CAD4;
		  /* 8213CAD4h */ case   26:  		/* cmplwi CR6, R10, 1 */
		/* 8213CAD4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8213CAD4h case   26:*/		return 0x8213CAD8;
		  /* 8213CAD8h */ case   27:  		/* bc 4, CR6_EQ, 28 */
		/* 8213CAD8h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8213CAF4;  }
		/* 8213CAD8h case   27:*/		return 0x8213CADC;
		  /* 8213CADCh */ case   28:  		/* lwz R10, <#[R31 + 560]> */
		/* 8213CADCh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CADCh case   28:*/		return 0x8213CAE0;
		  /* 8213CAE0h */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213CAE0h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213CAE0h case   29:*/		return 0x8213CAE4;
		  /* 8213CAE4h */ case   30:  		/* stwx R9, <#[R11 + R10]> */
		/* 8213CAE4h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213CAE4h case   30:*/		return 0x8213CAE8;
		  /* 8213CAE8h */ case   31:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213CAE8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CAE8h case   31:*/		return 0x8213CAEC;
		  /* 8213CAECh */ case   32:  		/* addi R11, R11, 1 */
		/* 8213CAECh case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213CAECh case   32:*/		return 0x8213CAF0;
		  /* 8213CAF0h */ case   33:  		/* stw R11, <#[R31 + 548]> */
		/* 8213CAF0h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CAF0h case   33:*/		return 0x8213CAF4;
	}
	return 0x8213CAF4;
} // Block from 8213CA6Ch-8213CAF4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8213CAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CAF4);
		  /* 8213CAF4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CAF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CAF4h case    0:*/		return 0x8213CAF8;
		  /* 8213CAF8h */ case    1:  		/* addi R7, R7, 1 */
		/* 8213CAF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8213CAF8h case    1:*/		return 0x8213CAFC;
		  /* 8213CAFCh */ case    2:  		/* addi R8, R8, 4 */
		/* 8213CAFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213CAFCh case    2:*/		return 0x8213CB00;
		  /* 8213CB00h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 8213CB00h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8213CB00h case    3:*/		return 0x8213CB04;
		  /* 8213CB04h */ case    4:  		/* bc 12, CR6_LT, -112 */
		/* 8213CB04h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CA94;  }
		/* 8213CB04h case    4:*/		return 0x8213CB08;
	}
	return 0x8213CB08;
} // Block from 8213CAF4h-8213CB08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213CB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CB08);
		  /* 8213CB08h */ case    0:  		/* lwz R8, <#[R31 + 560]> */
		/* 8213CB08h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CB08h case    0:*/		return 0x8213CB0C;
		  /* 8213CB0Ch */ case    1:  		/* mr R24, R23 */
		/* 8213CB0Ch case    1:*/		regs.R24 = regs.R23;
		/* 8213CB0Ch case    1:*/		return 0x8213CB10;
		  /* 8213CB10h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 8213CB10h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8213CB10h case    2:*/		return 0x8213CB14;
		  /* 8213CB14h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8213CB14h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213CB50;  }
		/* 8213CB14h case    3:*/		return 0x8213CB18;
		  /* 8213CB18h */ case    4:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213CB18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CB18h case    4:*/		return 0x8213CB1C;
		  /* 8213CB1Ch */ case    5:  		/* mr R10, R26 */
		/* 8213CB1Ch case    5:*/		regs.R10 = regs.R26;
		/* 8213CB1Ch case    5:*/		return 0x8213CB20;
		  /* 8213CB20h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8213CB20h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CB20h case    6:*/		return 0x8213CB24;
		  /* 8213CB24h */ case    7:  		/* bc 4, CR6_GT, 44 */
		/* 8213CB24h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8213CB50;  }
		/* 8213CB24h case    7:*/		return 0x8213CB28;
		  /* 8213CB28h */ case    8:  		/* rlwinm R9, R11, 0, 0, 31 */
		/* 8213CB28h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R11);
		/* 8213CB28h case    8:*/		return 0x8213CB2C;
		  /* 8213CB2Ch */ case    9:  		/* mr R11, R26 */
		/* 8213CB2Ch case    9:*/		regs.R11 = regs.R26;
		/* 8213CB2Ch case    9:*/		return 0x8213CB30;
		  /* 8213CB30h */ case   10:  		/* lwzx R7, <#[R11 + R8]> */
		/* 8213CB30h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213CB30h case   10:*/		return 0x8213CB34;
		  /* 8213CB34h */ case   11:  		/* addi R10, R10, 1 */
		/* 8213CB34h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213CB34h case   11:*/		return 0x8213CB38;
		  /* 8213CB38h */ case   12:  		/* addi R11, R11, 4 */
		/* 8213CB38h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213CB38h case   12:*/		return 0x8213CB3C;
		  /* 8213CB3Ch */ case   13:  		/* addic R7, R7, -1 */
		/* 8213CB3Ch case   13:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 8213CB3Ch case   13:*/		return 0x8213CB40;
		  /* 8213CB40h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 8213CB40h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213CB40h case   14:*/		return 0x8213CB44;
		  /* 8213CB44h */ case   15:  		/* subfe R7, R7, R7 */
		/* 8213CB44h case   15:*/		cpu::op::subfe<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 8213CB44h case   15:*/		return 0x8213CB48;
		  /* 8213CB48h */ case   16:  		/* and R24, R7, R24 */
		/* 8213CB48h case   16:*/		cpu::op::and<0>(regs,&regs.R24,regs.R7,regs.R24);
		/* 8213CB48h case   16:*/		return 0x8213CB4C;
		  /* 8213CB4Ch */ case   17:  		/* bc 12, CR6_LT, -28 */
		/* 8213CB4Ch case   17:*/		if ( regs.CR[6].lt ) { return 0x8213CB30;  }
		/* 8213CB4Ch case   17:*/		return 0x8213CB50;
	}
	return 0x8213CB50;
} // Block from 8213CB08h-8213CB50h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213CB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CB50);
		  /* 8213CB50h */ case    0:  		/* lis R11, -32215 */
		/* 8213CB50h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8213CB50h case    0:*/		return 0x8213CB54;
		  /* 8213CB54h */ case    1:  		/* mr R25, R26 */
		/* 8213CB54h case    1:*/		regs.R25 = regs.R26;
		/* 8213CB54h case    1:*/		return 0x8213CB58;
		  /* 8213CB58h */ case    2:  		/* addi R27, R11, -30096 */
		/* 8213CB58h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8A70);
		/* 8213CB58h case    2:*/		return 0x8213CB5C;
		  /* 8213CB5Ch */ case    3:  		/* stw R26, <#[R1 + 80]> */
		/* 8213CB5Ch case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 8213CB5Ch case    3:*/		return 0x8213CB60;
		  /* 8213CB60h */ case    4:  		/* addi R4, R1, 80 */
		/* 8213CB60h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8213CB60h case    4:*/		return 0x8213CB64;
		  /* 8213CB64h */ case    5:  		/* mr R3, R31 */
		/* 8213CB64h case    5:*/		regs.R3 = regs.R31;
		/* 8213CB64h case    5:*/		return 0x8213CB68;
		  /* 8213CB68h */ case    6:  		/* bl -30472 */
		/* 8213CB68h case    6:*/		regs.LR = 0x8213CB6C; return 0x82135460;
		/* 8213CB68h case    6:*/		return 0x8213CB6C;
		  /* 8213CB6Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8213CB6Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CB6Ch case    7:*/		return 0x8213CB70;
		  /* 8213CB70h */ case    8:  		/* bc 12, CR0_LT, 1016 */
		/* 8213CB70h case    8:*/		if ( regs.CR[0].lt ) { return 0x8213CF68;  }
		/* 8213CB70h case    8:*/		return 0x8213CB74;
		  /* 8213CB74h */ case    9:  		/* addi R7, R1, 84 */
		/* 8213CB74h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213CB74h case    9:*/		return 0x8213CB78;
		  /* 8213CB78h */ case   10:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213CB78h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CB78h case   10:*/		return 0x8213CB7C;
		  /* 8213CB7Ch */ case   11:  		/* li R5, 6 */
		/* 8213CB7Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213CB7Ch case   11:*/		return 0x8213CB80;
		  /* 8213CB80h */ case   12:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213CB80h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CB80h case   12:*/		return 0x8213CB84;
		  /* 8213CB84h */ case   13:  		/* mr R3, R31 */
		/* 8213CB84h case   13:*/		regs.R3 = regs.R31;
		/* 8213CB84h case   13:*/		return 0x8213CB88;
		  /* 8213CB88h */ case   14:  		/* bl -9600 */
		/* 8213CB88h case   14:*/		regs.LR = 0x8213CB8C; return 0x8213A608;
		/* 8213CB88h case   14:*/		return 0x8213CB8C;
		  /* 8213CB8Ch */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CB8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CB8Ch case   15:*/		return 0x8213CB90;
		  /* 8213CB90h */ case   16:  		/* mr R6, R26 */
		/* 8213CB90h case   16:*/		regs.R6 = regs.R26;
		/* 8213CB90h case   16:*/		return 0x8213CB94;
		  /* 8213CB94h */ case   17:  		/* mr R5, R26 */
		/* 8213CB94h case   17:*/		regs.R5 = regs.R26;
		/* 8213CB94h case   17:*/		return 0x8213CB98;
		  /* 8213CB98h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8213CB98h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CB98h case   18:*/		return 0x8213CB9C;
		  /* 8213CB9Ch */ case   19:  		/* bc 4, CR6_GT, 124 */
		/* 8213CB9Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x8213CC18;  }
		/* 8213CB9Ch case   19:*/		return 0x8213CBA0;
		  /* 8213CBA0h */ case   20:  		/* mr R8, R26 */
		/* 8213CBA0h case   20:*/		regs.R8 = regs.R26;
		/* 8213CBA0h case   20:*/		return 0x8213CBA4;
		  /* 8213CBA4h */ case   21:  		/* addi R7, R27, -4 */
		/* 8213CBA4h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R27,0xFFFFFFFC);
		/* 8213CBA4h case   21:*/		return 0x8213CBA8;
		  /* 8213CBA8h */ case   22:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213CBA8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CBA8h case   22:*/		return 0x8213CBAC;
		  /* 8213CBACh */ case   23:  		/* lwzx R10, <#[R8 + R11]> */
		/* 8213CBACh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8213CBACh case   23:*/		return 0x8213CBB0;
		  /* 8213CBB0h */ case   24:  		/* cmplwi CR6, R10, 0 */
		/* 8213CBB0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213CBB0h case   24:*/		return 0x8213CBB4;
		  /* 8213CBB4h */ case   25:  		/* bc 12, CR6_EQ, 80 */
		/* 8213CBB4h case   25:*/		if ( regs.CR[6].eq ) { return 0x8213CC04;  }
		/* 8213CBB4h case   25:*/		return 0x8213CBB8;
		  /* 8213CBB8h */ case   26:  		/* lwz R9, <#[R10]> */
		/* 8213CBB8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8213CBB8h case   26:*/		return 0x8213CBBC;
		  /* 8213CBBCh */ case   27:  		/* lwz R11, <#[R10 + 40]> */
		/* 8213CBBCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 8213CBBCh case   27:*/		return 0x8213CBC0;
		  /* 8213CBC0h */ case   28:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 8213CBC0h case   28:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8213CBC0h case   28:*/		return 0x8213CBC4;
		  /* 8213CBC4h */ case   29:  		/* cmplwi CR6, R11, 2 */
		/* 8213CBC4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8213CBC4h case   29:*/		return 0x8213CBC8;
		  /* 8213CBC8h */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 8213CBC8h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213CBD4;  }
		/* 8213CBC8h case   30:*/		return 0x8213CBCC;
		  /* 8213CBCCh */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 8213CBCCh case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CBCCh case   31:*/		return 0x8213CBD0;
		  /* 8213CBD0h */ case   32:  		/* bc 4, CR6_EQ, 44 */
		/* 8213CBD0h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8213CBFC;  }
		/* 8213CBD0h case   32:*/		return 0x8213CBD4;
	}
	return 0x8213CBD4;
} // Block from 8213CB50h-8213CBD4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8213CBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CBD4);
		  /* 8213CBD4h */ case    0:  		/* mr R3, R9 */
		/* 8213CBD4h case    0:*/		regs.R3 = regs.R9;
		/* 8213CBD4h case    0:*/		return 0x8213CBD8;
		  /* 8213CBD8h */ case    1:  		/* bl -54392 */
		/* 8213CBD8h case    1:*/		regs.LR = 0x8213CBDC; return 0x8212F760;
		/* 8213CBD8h case    1:*/		return 0x8213CBDC;
		  /* 8213CBDCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213CBDCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CBDCh case    2:*/		return 0x8213CBE0;
		  /* 8213CBE0h */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 8213CBE0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8213CBFC;  }
		/* 8213CBE0h case    3:*/		return 0x8213CBE4;
		  /* 8213CBE4h */ case    4:  		/* cmplw CR6, R9, R21 */
		/* 8213CBE4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R21);
		/* 8213CBE4h case    4:*/		return 0x8213CBE8;
		  /* 8213CBE8h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8213CBE8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213CBFC;  }
		/* 8213CBE8h case    5:*/		return 0x8213CBEC;
		  /* 8213CBECh */ case    6:  		/* cmplw CR6, R9, R22 */
		/* 8213CBECh case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 8213CBECh case    6:*/		return 0x8213CBF0;
		  /* 8213CBF0h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8213CBF0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213CBFC;  }
		/* 8213CBF0h case    7:*/		return 0x8213CBF4;
		  /* 8213CBF4h */ case    8:  		/* stwu R10, <#[R7 + 4]> */
		/* 8213CBF4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		regs.R7 = (uint32)(regs.R7 + 0x00000004);
		/* 8213CBF4h case    8:*/		return 0x8213CBF8;
		  /* 8213CBF8h */ case    9:  		/* addi R6, R6, 1 */
		/* 8213CBF8h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213CBF8h case    9:*/		return 0x8213CBFC;
	}
	return 0x8213CBFC;
} // Block from 8213CBD4h-8213CBFCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213CBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CBFC);
		  /* 8213CBFCh */ case    0:  		/* cmplwi CR6, R6, 512 */
		/* 8213CBFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000200);
		/* 8213CBFCh case    0:*/		return 0x8213CC00;
		  /* 8213CC00h */ case    1:  		/* bc 4, CR6_LT, 880 */
		/* 8213CC00h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213CF70;  }
		/* 8213CC00h case    1:*/		return 0x8213CC04;
	}
	return 0x8213CC04;
} // Block from 8213CBFCh-8213CC04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213CC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CC04);
		  /* 8213CC04h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CC04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CC04h case    0:*/		return 0x8213CC08;
		  /* 8213CC08h */ case    1:  		/* addi R5, R5, 1 */
		/* 8213CC08h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213CC08h case    1:*/		return 0x8213CC0C;
		  /* 8213CC0Ch */ case    2:  		/* addi R8, R8, 4 */
		/* 8213CC0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213CC0Ch case    2:*/		return 0x8213CC10;
		  /* 8213CC10h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 8213CC10h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8213CC10h case    3:*/		return 0x8213CC14;
		  /* 8213CC14h */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 8213CC14h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CBA8;  }
		/* 8213CC14h case    4:*/		return 0x8213CC18;
	}
	return 0x8213CC18;
} // Block from 8213CC04h-8213CC18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213CC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CC18);
		  /* 8213CC18h */ case    0:  		/* addi R7, R1, 88 */
		/* 8213CC18h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8213CC18h case    0:*/		return 0x8213CC1C;
		  /* 8213CC1Ch */ case    1:  		/* li R5, 0 */
		/* 8213CC1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213CC1Ch case    1:*/		return 0x8213CC20;
		  /* 8213CC20h */ case    2:  		/* mr R4, R27 */
		/* 8213CC20h case    2:*/		regs.R4 = regs.R27;
		/* 8213CC20h case    2:*/		return 0x8213CC24;
		  /* 8213CC24h */ case    3:  		/* mr R3, R31 */
		/* 8213CC24h case    3:*/		regs.R3 = regs.R31;
		/* 8213CC24h case    3:*/		return 0x8213CC28;
		  /* 8213CC28h */ case    4:  		/* bl -9760 */
		/* 8213CC28h case    4:*/		regs.LR = 0x8213CC2C; return 0x8213A608;
		/* 8213CC28h case    4:*/		return 0x8213CC2C;
		  /* 8213CC2Ch */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8213CC2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8213CC2Ch case    5:*/		return 0x8213CC30;
		  /* 8213CC30h */ case    6:  		/* lwz R10, <#[R1 + 88]> */
		/* 8213CC30h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8213CC30h case    6:*/		return 0x8213CC34;
		  /* 8213CC34h */ case    7:  		/* add R11, R10, R11 */
		/* 8213CC34h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8213CC34h case    7:*/		return 0x8213CC38;
		  /* 8213CC38h */ case    8:  		/* cmplwi CR6, R11, 8 */
		/* 8213CC38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 8213CC38h case    8:*/		return 0x8213CC3C;
		  /* 8213CC3Ch */ case    9:  		/* bc 4, CR6_LT, 32 */
		/* 8213CC3Ch case    9:*/		if ( !regs.CR[6].lt ) { return 0x8213CC5C;  }
		/* 8213CC3Ch case    9:*/		return 0x8213CC40;
		  /* 8213CC40h */ case   10:  		/* lwz R11, <#[R1 + 84]> */
		/* 8213CC40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8213CC40h case   10:*/		return 0x8213CC44;
		  /* 8213CC44h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 8213CC44h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213CC44h case   11:*/		return 0x8213CC48;
		  /* 8213CC48h */ case   12:  		/* bc 4, CR6_GT, 628 */
		/* 8213CC48h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8213CEBC;  }
		/* 8213CC48h case   12:*/		return 0x8213CC4C;
		  /* 8213CC4Ch */ case   13:  		/* cmplwi CR6, R25, 0 */
		/* 8213CC4Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8213CC4Ch case   13:*/		return 0x8213CC50;
		  /* 8213CC50h */ case   14:  		/* bc 4, CR6_EQ, 620 */
		/* 8213CC50h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213CEBC;  }
		/* 8213CC50h case   14:*/		return 0x8213CC54;
		  /* 8213CC54h */ case   15:  		/* cmpwi CR6, R24, 0 */
		/* 8213CC54h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8213CC54h case   15:*/		return 0x8213CC58;
		  /* 8213CC58h */ case   16:  		/* bc 4, CR6_EQ, 612 */
		/* 8213CC58h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8213CEBC;  }
		/* 8213CC58h case   16:*/		return 0x8213CC5C;
	}
	return 0x8213CC5C;
} // Block from 8213CC18h-8213CC5Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213CC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CC5C);
		  /* 8213CC5Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CC5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CC5Ch case    0:*/		return 0x8213CC60;
		  /* 8213CC60h */ case    1:  		/* mr R28, R26 */
		/* 8213CC60h case    1:*/		regs.R28 = regs.R26;
		/* 8213CC60h case    1:*/		return 0x8213CC64;
		  /* 8213CC64h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213CC64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CC64h case    2:*/		return 0x8213CC68;
		  /* 8213CC68h */ case    3:  		/* bc 4, CR6_GT, 392 */
		/* 8213CC68h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213CDF0;  }
		/* 8213CC68h case    3:*/		return 0x8213CC6C;
		  /* 8213CC6Ch */ case    4:  		/* mr R29, R26 */
		/* 8213CC6Ch case    4:*/		regs.R29 = regs.R26;
		/* 8213CC6Ch case    4:*/		return 0x8213CC70;
		  /* 8213CC70h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213CC70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CC70h case    5:*/		return 0x8213CC74;
		  /* 8213CC74h */ case    6:  		/* lwzx R30, <#[R29 + R11]> */
		/* 8213CC74h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8213CC74h case    6:*/		return 0x8213CC78;
		  /* 8213CC78h */ case    7:  		/* lwz R11, <#[R30 + 40]> */
		/* 8213CC78h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8213CC78h case    7:*/		return 0x8213CC7C;
		  /* 8213CC7Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8213CC7Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CC7Ch case    8:*/		return 0x8213CC80;
		  /* 8213CC80h */ case    9:  		/* bc 4, CR6_EQ, 296 */
		/* 8213CC80h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8213CDA8;  }
		/* 8213CC80h case    9:*/		return 0x8213CC84;
		  /* 8213CC84h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 8213CC84h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213CC84h case   10:*/		return 0x8213CC88;
		  /* 8213CC88h */ case   11:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 8213CC88h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213CC88h case   11:*/		return 0x8213CC8C;
		  /* 8213CC8Ch */ case   12:  		/* mr R3, R10 */
		/* 8213CC8Ch case   12:*/		regs.R3 = regs.R10;
		/* 8213CC8Ch case   12:*/		return 0x8213CC90;
		  /* 8213CC90h */ case   13:  		/* bl -54576 */
		/* 8213CC90h case   13:*/		regs.LR = 0x8213CC94; return 0x8212F760;
		/* 8213CC90h case   13:*/		return 0x8213CC94;
		  /* 8213CC94h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8213CC94h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CC94h case   14:*/		return 0x8213CC98;
		  /* 8213CC98h */ case   15:  		/* bc 4, CR0_EQ, 272 */
		/* 8213CC98h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8213CDA8;  }
		/* 8213CC98h case   15:*/		return 0x8213CC9C;
		  /* 8213CC9Ch */ case   16:  		/* cmplw CR6, R10, R22 */
		/* 8213CC9Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 8213CC9Ch case   16:*/		return 0x8213CCA0;
		  /* 8213CCA0h */ case   17:  		/* bc 12, CR6_EQ, 264 */
		/* 8213CCA0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8213CDA8;  }
		/* 8213CCA0h case   17:*/		return 0x8213CCA4;
		  /* 8213CCA4h */ case   18:  		/* lwz R7, <#[R30 + 4]> */
		/* 8213CCA4h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 8213CCA4h case   18:*/		return 0x8213CCA8;
		  /* 8213CCA8h */ case   19:  		/* mr R10, R26 */
		/* 8213CCA8h case   19:*/		regs.R10 = regs.R26;
		/* 8213CCA8h case   19:*/		return 0x8213CCAC;
		  /* 8213CCACh */ case   20:  		/* cmplwi CR6, R7, 0 */
		/* 8213CCACh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213CCACh case   20:*/		return 0x8213CCB0;
		  /* 8213CCB0h */ case   21:  		/* bc 12, CR6_EQ, 60 */
		/* 8213CCB0h case   21:*/		if ( regs.CR[6].eq ) { return 0x8213CCEC;  }
		/* 8213CCB0h case   21:*/		return 0x8213CCB4;
		  /* 8213CCB4h */ case   22:  		/* lwz R9, <#[R30 + 8]> */
		/* 8213CCB4h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8213CCB4h case   22:*/		return 0x8213CCB8;
		  /* 8213CCB8h */ case   23:  		/* mr R11, R26 */
		/* 8213CCB8h case   23:*/		regs.R11 = regs.R26;
		/* 8213CCB8h case   23:*/		return 0x8213CCBC;
		  /* 8213CCBCh */ case   24:  		/* lwz R8, <#[R31 + 20]> */
		/* 8213CCBCh case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8213CCBCh case   24:*/		return 0x8213CCC0;
		  /* 8213CCC0h */ case   25:  		/* lwzx R6, <#[R9 + R11]> */
		/* 8213CCC0h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213CCC0h case   25:*/		return 0x8213CCC4;
		  /* 8213CCC4h */ case   26:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213CCC4h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213CCC4h case   26:*/		return 0x8213CCC8;
		  /* 8213CCC8h */ case   27:  		/* lwzx R6, <#[R6 + R8]> */
		/* 8213CCC8h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 8213CCC8h case   27:*/		return 0x8213CCCC;
		  /* 8213CCCCh */ case   28:  		/* lbz R6, <#[R6 + 111]> */
		/* 8213CCCCh case   28:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R6 + 0x0000006F) );
		/* 8213CCCCh case   28:*/		return 0x8213CCD0;
		  /* 8213CCD0h */ case   29:  		/* cmplwi CR6, R6, 1 */
		/* 8213CCD0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 8213CCD0h case   29:*/		return 0x8213CCD4;
		  /* 8213CCD4h */ case   30:  		/* bc 12, CR6_EQ, 24 */
		/* 8213CCD4h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213CCEC;  }
		/* 8213CCD4h case   30:*/		return 0x8213CCD8;
		  /* 8213CCD8h */ case   31:  		/* lwz R6, <#[R30 + 4]> */
		/* 8213CCD8h case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 8213CCD8h case   31:*/		return 0x8213CCDC;
		  /* 8213CCDCh */ case   32:  		/* addi R10, R10, 1 */
		/* 8213CCDCh case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213CCDCh case   32:*/		return 0x8213CCE0;
		  /* 8213CCE0h */ case   33:  		/* addi R11, R11, 4 */
		/* 8213CCE0h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213CCE0h case   33:*/		return 0x8213CCE4;
		  /* 8213CCE4h */ case   34:  		/* cmplw CR6, R10, R6 */
		/* 8213CCE4h case   34:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213CCE4h case   34:*/		return 0x8213CCE8;
	}
	return 0x8213CCE8;
} // Block from 8213CC5Ch-8213CCE8h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8213CCE8h
// Function '?GroupTexLoads@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CCE8);
		  /* 8213CCE8h */ case    0:  		/* bc 12, CR6_LT, -40 */
		/* 8213CCE8h case    0:*/		if ( regs.CR[6].lt ) { return 0x8213CCC0;  }
		/* 8213CCE8h case    0:*/		return 0x8213CCEC;
	}
	return 0x8213CCEC;
} // Block from 8213CCE8h-8213CCECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213CCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CCEC);
		  /* 8213CCECh */ case    0:  		/* cmplw CR6, R10, R7 */
		/* 8213CCECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8213CCECh case    0:*/		return 0x8213CCF0;
		  /* 8213CCF0h */ case    1:  		/* bc 4, CR6_EQ, 184 */
		/* 8213CCF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213CDA8;  }
		/* 8213CCF0h case    1:*/		return 0x8213CCF4;
		  /* 8213CCF4h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 8213CCF4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8213CCF4h case    2:*/		return 0x8213CCF8;
		  /* 8213CCF8h */ case    3:  		/* bc 4, CR6_EQ, 84 */
		/* 8213CCF8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213CD4C;  }
		/* 8213CCF8h case    3:*/		return 0x8213CCFC;
		  /* 8213CCFCh */ case    4:  		/* lwz R7, <#[R30 + 12]> */
		/* 8213CCFCh case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213CCFCh case    4:*/		return 0x8213CD00;
		  /* 8213CD00h */ case    5:  		/* mr R10, R26 */
		/* 8213CD00h case    5:*/		regs.R10 = regs.R26;
		/* 8213CD00h case    5:*/		return 0x8213CD04;
		  /* 8213CD04h */ case    6:  		/* cmplwi CR6, R7, 0 */
		/* 8213CD04h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213CD04h case    6:*/		return 0x8213CD08;
		  /* 8213CD08h */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 8213CD08h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213CD44;  }
		/* 8213CD08h case    7:*/		return 0x8213CD0C;
		  /* 8213CD0Ch */ case    8:  		/* lwz R9, <#[R30 + 16]> */
		/* 8213CD0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 8213CD0Ch case    8:*/		return 0x8213CD10;
		  /* 8213CD10h */ case    9:  		/* mr R11, R26 */
		/* 8213CD10h case    9:*/		regs.R11 = regs.R26;
		/* 8213CD10h case    9:*/		return 0x8213CD14;
		  /* 8213CD14h */ case   10:  		/* lwz R8, <#[R31 + 20]> */
		/* 8213CD14h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 8213CD14h case   10:*/		return 0x8213CD18;
		  /* 8213CD18h */ case   11:  		/* lwzx R6, <#[R9 + R11]> */
		/* 8213CD18h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213CD18h case   11:*/		return 0x8213CD1C;
		  /* 8213CD1Ch */ case   12:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213CD1Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213CD1Ch case   12:*/		return 0x8213CD20;
		  /* 8213CD20h */ case   13:  		/* lwzx R6, <#[R6 + R8]> */
		/* 8213CD20h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 8213CD20h case   13:*/		return 0x8213CD24;
		  /* 8213CD24h */ case   14:  		/* lwz R6, <#[R6 + 16]> */
		/* 8213CD24h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000010) );
		/* 8213CD24h case   14:*/		return 0x8213CD28;
		  /* 8213CD28h */ case   15:  		/* cmplwi CR6, R6, 3 */
		/* 8213CD28h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000003);
		/* 8213CD28h case   15:*/		return 0x8213CD2C;
		  /* 8213CD2Ch */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 8213CD2Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x8213CD44;  }
		/* 8213CD2Ch case   16:*/		return 0x8213CD30;
		  /* 8213CD30h */ case   17:  		/* lwz R6, <#[R30 + 12]> */
		/* 8213CD30h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213CD30h case   17:*/		return 0x8213CD34;
		  /* 8213CD34h */ case   18:  		/* addi R10, R10, 1 */
		/* 8213CD34h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213CD34h case   18:*/		return 0x8213CD38;
		  /* 8213CD38h */ case   19:  		/* addi R11, R11, 4 */
		/* 8213CD38h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213CD38h case   19:*/		return 0x8213CD3C;
		  /* 8213CD3Ch */ case   20:  		/* cmplw CR6, R10, R6 */
		/* 8213CD3Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213CD3Ch case   20:*/		return 0x8213CD40;
		  /* 8213CD40h */ case   21:  		/* bc 12, CR6_LT, -40 */
		/* 8213CD40h case   21:*/		if ( regs.CR[6].lt ) { return 0x8213CD18;  }
		/* 8213CD40h case   21:*/		return 0x8213CD44;
	}
	return 0x8213CD44;
} // Block from 8213CCECh-8213CD44h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213CD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CD44);
		  /* 8213CD44h */ case    0:  		/* cmplw CR6, R10, R7 */
		/* 8213CD44h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8213CD44h case    0:*/		return 0x8213CD48;
		  /* 8213CD48h */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 8213CD48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213CDA8;  }
		/* 8213CD48h case    1:*/		return 0x8213CD4C;
	}
	return 0x8213CD4C;
} // Block from 8213CD44h-8213CD4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213CD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CD4C);
		  /* 8213CD4Ch */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8213CD4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8213CD4Ch case    0:*/		return 0x8213CD50;
		  /* 8213CD50h */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213CD50h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213CD50h case    1:*/		return 0x8213CD54;
		  /* 8213CD54h */ case    2:  		/* lwz R9, <#[R31 + 16]> */
		/* 8213CD54h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8213CD54h case    2:*/		return 0x8213CD58;
		  /* 8213CD58h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8213CD58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213CD58h case    3:*/		return 0x8213CD5C;
		  /* 8213CD5Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213CD5Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213CD5Ch case    4:*/		return 0x8213CD60;
		  /* 8213CD60h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213CD60h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213CD60h case    5:*/		return 0x8213CD64;
		  /* 8213CD64h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213CD64h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213CD64h case    6:*/		return 0x8213CD68;
		  /* 8213CD68h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213CD68h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213CD68h case    7:*/		return 0x8213CD6C;
		  /* 8213CD6Ch */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213CD6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213CD6Ch case    8:*/		return 0x8213CD70;
		  /* 8213CD70h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213CD70h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213CD70h case    9:*/		return 0x8213CD74;
		  /* 8213CD74h */ case   10:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8213CD74h case   10:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8213CD74h case   10:*/		return 0x8213CD78;
		  /* 8213CD78h */ case   11:  		/* bc 4, CR0_EQ, 48 */
		/* 8213CD78h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8213CDA8;  }
		/* 8213CD78h case   11:*/		return 0x8213CD7C;
		  /* 8213CD7Ch */ case   12:  		/* stw R23, <#[R30 + 40]> */
		/* 8213CD7Ch case   12:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x00000028) );
		/* 8213CD7Ch case   12:*/		return 0x8213CD80;
		  /* 8213CD80h */ case   13:  		/* mr R3, R31 */
		/* 8213CD80h case   13:*/		regs.R3 = regs.R31;
		/* 8213CD80h case   13:*/		return 0x8213CD84;
		  /* 8213CD84h */ case   14:  		/* bl -28484 */
		/* 8213CD84h case   14:*/		regs.LR = 0x8213CD88; return 0x82135E40;
		/* 8213CD84h case   14:*/		return 0x8213CD88;
		  /* 8213CD88h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8213CD88h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CD88h case   15:*/		return 0x8213CD8C;
		  /* 8213CD8Ch */ case   16:  		/* bc 4, CR0_EQ, 24 */
		/* 8213CD8Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x8213CDA4;  }
		/* 8213CD8Ch case   16:*/		return 0x8213CD90;
		  /* 8213CD90h */ case   17:  		/* mr R4, R30 */
		/* 8213CD90h case   17:*/		regs.R4 = regs.R30;
		/* 8213CD90h case   17:*/		return 0x8213CD94;
		  /* 8213CD94h */ case   18:  		/* mr R3, R31 */
		/* 8213CD94h case   18:*/		regs.R3 = regs.R31;
		/* 8213CD94h case   18:*/		return 0x8213CD98;
		  /* 8213CD98h */ case   19:  		/* bl -28136 */
		/* 8213CD98h case   19:*/		regs.LR = 0x8213CD9C; return 0x82135FB0;
		/* 8213CD98h case   19:*/		return 0x8213CD9C;
		  /* 8213CD9Ch */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 8213CD9Ch case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CD9Ch case   20:*/		return 0x8213CDA0;
		  /* 8213CDA0h */ case   21:  		/* bc 12, CR0_EQ, 44 */
		/* 8213CDA0h case   21:*/		if ( regs.CR[0].eq ) { return 0x8213CDCC;  }
		/* 8213CDA0h case   21:*/		return 0x8213CDA4;
	}
	return 0x8213CDA4;
} // Block from 8213CD4Ch-8213CDA4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213CDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CDA4);
		  /* 8213CDA4h */ case    0:  		/* stw R26, <#[R30 + 40]> */
		/* 8213CDA4h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000028) );
		/* 8213CDA4h case    0:*/		return 0x8213CDA8;
	}
	return 0x8213CDA8;
} // Block from 8213CDA4h-8213CDA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213CDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CDA8);
		  /* 8213CDA8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CDA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CDA8h case    0:*/		return 0x8213CDAC;
		  /* 8213CDACh */ case    1:  		/* addi R28, R28, 1 */
		/* 8213CDACh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213CDACh case    1:*/		return 0x8213CDB0;
		  /* 8213CDB0h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213CDB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213CDB0h case    2:*/		return 0x8213CDB4;
		  /* 8213CDB4h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 8213CDB4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213CDB4h case    3:*/		return 0x8213CDB8;
		  /* 8213CDB8h */ case    4:  		/* bc 12, CR6_LT, -328 */
		/* 8213CDB8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CC70;  }
		/* 8213CDB8h case    4:*/		return 0x8213CDBC;
		  /* 8213CDBCh */ case    5:  		/* b 52 */
		/* 8213CDBCh case    5:*/		return 0x8213CDF0;
		/* 8213CDBCh case    5:*/		return 0x8213CDC0;
	}
	return 0x8213CDC0;
} // Block from 8213CDA8h-8213CDC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213CDC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CDC0);
		  /* 8213CDC0h */ case    0:  		/* lis R3, -32768 */
		/* 8213CDC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213CDC0h case    0:*/		return 0x8213CDC4;
		  /* 8213CDC4h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8213CDC4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213CDC4h case    1:*/		return 0x8213CDC8;
		  /* 8213CDC8h */ case    2:  		/* b 416 */
		/* 8213CDC8h case    2:*/		return 0x8213CF68;
		/* 8213CDC8h case    2:*/		return 0x8213CDCC;
	}
	return 0x8213CDCC;
} // Block from 8213CDC0h-8213CDCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213CDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CDCC);
		  /* 8213CDCCh */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213CDCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CDCCh case    0:*/		return 0x8213CDD0;
		  /* 8213CDD0h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8213CDD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213CDD0h case    1:*/		return 0x8213CDD4;
		  /* 8213CDD4h */ case    2:  		/* bc 4, CR6_LT, 412 */
		/* 8213CDD4h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213CF70;  }
		/* 8213CDD4h case    2:*/		return 0x8213CDD8;
		  /* 8213CDD8h */ case    3:  		/* lwz R10, <#[R31 + 560]> */
		/* 8213CDD8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CDD8h case    3:*/		return 0x8213CDDC;
		  /* 8213CDDCh */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213CDDCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213CDDCh case    4:*/		return 0x8213CDE0;
		  /* 8213CDE0h */ case    5:  		/* stwx R30, <#[R11 + R10]> */
		/* 8213CDE0h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213CDE0h case    5:*/		return 0x8213CDE4;
		  /* 8213CDE4h */ case    6:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213CDE4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CDE4h case    6:*/		return 0x8213CDE8;
		  /* 8213CDE8h */ case    7:  		/* addi R11, R11, 1 */
		/* 8213CDE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213CDE8h case    7:*/		return 0x8213CDEC;
		  /* 8213CDECh */ case    8:  		/* stw R11, <#[R31 + 548]> */
		/* 8213CDECh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CDECh case    8:*/		return 0x8213CDF0;
	}
	return 0x8213CDF0;
} // Block from 8213CDCCh-8213CDF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213CDF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CDF0);
		  /* 8213CDF0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CDF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CDF0h case    0:*/		return 0x8213CDF4;
		  /* 8213CDF4h */ case    1:  		/* cmplw CR6, R28, R11 */
		/* 8213CDF4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213CDF4h case    1:*/		return 0x8213CDF8;
		  /* 8213CDF8h */ case    2:  		/* bc 12, CR6_EQ, 196 */
		/* 8213CDF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213CEBC;  }
		/* 8213CDF8h case    2:*/		return 0x8213CDFC;
		  /* 8213CDFCh */ case    3:  		/* stw R26, <#[R1 + 80]> */
		/* 8213CDFCh case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 8213CDFCh case    3:*/		return 0x8213CE00;
		  /* 8213CE00h */ case    4:  		/* addi R4, R1, 80 */
		/* 8213CE00h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8213CE00h case    4:*/		return 0x8213CE04;
		  /* 8213CE04h */ case    5:  		/* mr R3, R31 */
		/* 8213CE04h case    5:*/		regs.R3 = regs.R31;
		/* 8213CE04h case    5:*/		return 0x8213CE08;
		  /* 8213CE08h */ case    6:  		/* bl -31144 */
		/* 8213CE08h case    6:*/		regs.LR = 0x8213CE0C; return 0x82135460;
		/* 8213CE08h case    6:*/		return 0x8213CE0C;
		  /* 8213CE0Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8213CE0Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CE0Ch case    7:*/		return 0x8213CE10;
		  /* 8213CE10h */ case    8:  		/* bc 12, CR0_LT, 344 */
		/* 8213CE10h case    8:*/		if ( regs.CR[0].lt ) { return 0x8213CF68;  }
		/* 8213CE10h case    8:*/		return 0x8213CE14;
		  /* 8213CE14h */ case    9:  		/* addi R7, R1, 84 */
		/* 8213CE14h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213CE14h case    9:*/		return 0x8213CE18;
		  /* 8213CE18h */ case   10:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213CE18h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213CE18h case   10:*/		return 0x8213CE1C;
		  /* 8213CE1Ch */ case   11:  		/* li R5, 6 */
		/* 8213CE1Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213CE1Ch case   11:*/		return 0x8213CE20;
		  /* 8213CE20h */ case   12:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213CE20h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213CE20h case   12:*/		return 0x8213CE24;
		  /* 8213CE24h */ case   13:  		/* mr R3, R31 */
		/* 8213CE24h case   13:*/		regs.R3 = regs.R31;
		/* 8213CE24h case   13:*/		return 0x8213CE28;
		  /* 8213CE28h */ case   14:  		/* bl -10272 */
		/* 8213CE28h case   14:*/		regs.LR = 0x8213CE2C; return 0x8213A608;
		/* 8213CE28h case   14:*/		return 0x8213CE2C;
		  /* 8213CE2Ch */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CE2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CE2Ch case   15:*/		return 0x8213CE30;
		  /* 8213CE30h */ case   16:  		/* mr R6, R26 */
		/* 8213CE30h case   16:*/		regs.R6 = regs.R26;
		/* 8213CE30h case   16:*/		return 0x8213CE34;
		  /* 8213CE34h */ case   17:  		/* mr R5, R26 */
		/* 8213CE34h case   17:*/		regs.R5 = regs.R26;
		/* 8213CE34h case   17:*/		return 0x8213CE38;
		  /* 8213CE38h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8213CE38h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CE38h case   18:*/		return 0x8213CE3C;
		  /* 8213CE3Ch */ case   19:  		/* bc 4, CR6_GT, -548 */
		/* 8213CE3Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x8213CC18;  }
		/* 8213CE3Ch case   19:*/		return 0x8213CE40;
		  /* 8213CE40h */ case   20:  		/* mr R8, R26 */
		/* 8213CE40h case   20:*/		regs.R8 = regs.R26;
		/* 8213CE40h case   20:*/		return 0x8213CE44;
		  /* 8213CE44h */ case   21:  		/* addi R7, R27, -4 */
		/* 8213CE44h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R27,0xFFFFFFFC);
		/* 8213CE44h case   21:*/		return 0x8213CE48;
		  /* 8213CE48h */ case   22:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213CE48h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CE48h case   22:*/		return 0x8213CE4C;
		  /* 8213CE4Ch */ case   23:  		/* lwzx R10, <#[R8 + R11]> */
		/* 8213CE4Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8213CE4Ch case   23:*/		return 0x8213CE50;
		  /* 8213CE50h */ case   24:  		/* cmplwi CR6, R10, 0 */
		/* 8213CE50h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213CE50h case   24:*/		return 0x8213CE54;
		  /* 8213CE54h */ case   25:  		/* bc 12, CR6_EQ, 80 */
		/* 8213CE54h case   25:*/		if ( regs.CR[6].eq ) { return 0x8213CEA4;  }
		/* 8213CE54h case   25:*/		return 0x8213CE58;
		  /* 8213CE58h */ case   26:  		/* lwz R9, <#[R10]> */
		/* 8213CE58h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8213CE58h case   26:*/		return 0x8213CE5C;
		  /* 8213CE5Ch */ case   27:  		/* lwz R11, <#[R10 + 40]> */
		/* 8213CE5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 8213CE5Ch case   27:*/		return 0x8213CE60;
		  /* 8213CE60h */ case   28:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 8213CE60h case   28:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8213CE60h case   28:*/		return 0x8213CE64;
		  /* 8213CE64h */ case   29:  		/* cmplwi CR6, R11, 2 */
		/* 8213CE64h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8213CE64h case   29:*/		return 0x8213CE68;
		  /* 8213CE68h */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 8213CE68h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213CE74;  }
		/* 8213CE68h case   30:*/		return 0x8213CE6C;
		  /* 8213CE6Ch */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 8213CE6Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CE6Ch case   31:*/		return 0x8213CE70;
		  /* 8213CE70h */ case   32:  		/* bc 4, CR6_EQ, 44 */
		/* 8213CE70h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8213CE9C;  }
		/* 8213CE70h case   32:*/		return 0x8213CE74;
	}
	return 0x8213CE74;
} // Block from 8213CDF0h-8213CE74h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8213CE74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CE74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CE74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CE74);
		  /* 8213CE74h */ case    0:  		/* mr R3, R9 */
		/* 8213CE74h case    0:*/		regs.R3 = regs.R9;
		/* 8213CE74h case    0:*/		return 0x8213CE78;
		  /* 8213CE78h */ case    1:  		/* bl -55064 */
		/* 8213CE78h case    1:*/		regs.LR = 0x8213CE7C; return 0x8212F760;
		/* 8213CE78h case    1:*/		return 0x8213CE7C;
		  /* 8213CE7Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213CE7Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CE7Ch case    2:*/		return 0x8213CE80;
		  /* 8213CE80h */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 8213CE80h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8213CE9C;  }
		/* 8213CE80h case    3:*/		return 0x8213CE84;
		  /* 8213CE84h */ case    4:  		/* cmplw CR6, R9, R21 */
		/* 8213CE84h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R21);
		/* 8213CE84h case    4:*/		return 0x8213CE88;
		  /* 8213CE88h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8213CE88h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213CE9C;  }
		/* 8213CE88h case    5:*/		return 0x8213CE8C;
		  /* 8213CE8Ch */ case    6:  		/* cmplw CR6, R9, R22 */
		/* 8213CE8Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 8213CE8Ch case    6:*/		return 0x8213CE90;
		  /* 8213CE90h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8213CE90h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213CE9C;  }
		/* 8213CE90h case    7:*/		return 0x8213CE94;
		  /* 8213CE94h */ case    8:  		/* stwu R10, <#[R7 + 4]> */
		/* 8213CE94h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		regs.R7 = (uint32)(regs.R7 + 0x00000004);
		/* 8213CE94h case    8:*/		return 0x8213CE98;
		  /* 8213CE98h */ case    9:  		/* addi R6, R6, 1 */
		/* 8213CE98h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213CE98h case    9:*/		return 0x8213CE9C;
	}
	return 0x8213CE9C;
} // Block from 8213CE74h-8213CE9Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213CE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CE9C);
		  /* 8213CE9Ch */ case    0:  		/* cmplwi CR6, R6, 512 */
		/* 8213CE9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000200);
		/* 8213CE9Ch case    0:*/		return 0x8213CEA0;
		  /* 8213CEA0h */ case    1:  		/* bc 4, CR6_LT, 208 */
		/* 8213CEA0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213CF70;  }
		/* 8213CEA0h case    1:*/		return 0x8213CEA4;
	}
	return 0x8213CEA4;
} // Block from 8213CE9Ch-8213CEA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213CEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CEA4);
		  /* 8213CEA4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CEA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CEA4h case    0:*/		return 0x8213CEA8;
		  /* 8213CEA8h */ case    1:  		/* addi R5, R5, 1 */
		/* 8213CEA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213CEA8h case    1:*/		return 0x8213CEAC;
		  /* 8213CEACh */ case    2:  		/* addi R8, R8, 4 */
		/* 8213CEACh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213CEACh case    2:*/		return 0x8213CEB0;
		  /* 8213CEB0h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 8213CEB0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8213CEB0h case    3:*/		return 0x8213CEB4;
		  /* 8213CEB4h */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 8213CEB4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CE48;  }
		/* 8213CEB4h case    4:*/		return 0x8213CEB8;
		  /* 8213CEB8h */ case    5:  		/* b -672 */
		/* 8213CEB8h case    5:*/		return 0x8213CC18;
		/* 8213CEB8h case    5:*/		return 0x8213CEBC;
	}
	return 0x8213CEBC;
} // Block from 8213CEA4h-8213CEBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213CEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CEBC);
		  /* 8213CEBCh */ case    0:  		/* addi R25, R25, 1 */
		/* 8213CEBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8213CEBCh case    0:*/		return 0x8213CEC0;
		  /* 8213CEC0h */ case    1:  		/* cmplwi CR6, R25, 2 */
		/* 8213CEC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000002);
		/* 8213CEC0h case    1:*/		return 0x8213CEC4;
		  /* 8213CEC4h */ case    2:  		/* bc 12, CR6_LT, -872 */
		/* 8213CEC4h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213CB5C;  }
		/* 8213CEC4h case    2:*/		return 0x8213CEC8;
		  /* 8213CEC8h */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CEC8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CEC8h case    3:*/		return 0x8213CECC;
		  /* 8213CECCh */ case    4:  		/* mr R6, R26 */
		/* 8213CECCh case    4:*/		regs.R6 = regs.R26;
		/* 8213CECCh case    4:*/		return 0x8213CED0;
		  /* 8213CED0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8213CED0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CED0h case    5:*/		return 0x8213CED4;
		  /* 8213CED4h */ case    6:  		/* bc 4, CR6_GT, 144 */
		/* 8213CED4h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213CF64;  }
		/* 8213CED4h case    6:*/		return 0x8213CED8;
		  /* 8213CED8h */ case    7:  		/* mr R7, R26 */
		/* 8213CED8h case    7:*/		regs.R7 = regs.R26;
		/* 8213CED8h case    7:*/		return 0x8213CEDC;
		  /* 8213CEDCh */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213CEDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213CEDCh case    8:*/		return 0x8213CEE0;
		  /* 8213CEE0h */ case    9:  		/* lwzx R10, <#[R7 + R11]> */
		/* 8213CEE0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 8213CEE0h case    9:*/		return 0x8213CEE4;
		  /* 8213CEE4h */ case   10:  		/* lwz R11, <#[R10 + 40]> */
		/* 8213CEE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 8213CEE4h case   10:*/		return 0x8213CEE8;
		  /* 8213CEE8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8213CEE8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213CEE8h case   11:*/		return 0x8213CEEC;
		  /* 8213CEECh */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 8213CEECh case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213CEF8;  }
		/* 8213CEECh case   12:*/		return 0x8213CEF0;
		  /* 8213CEF0h */ case   13:  		/* li R11, 2 */
		/* 8213CEF0h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8213CEF0h case   13:*/		return 0x8213CEF4;
		  /* 8213CEF4h */ case   14:  		/* stw R11, <#[R10 + 40]> */
		/* 8213CEF4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 8213CEF4h case   14:*/		return 0x8213CEF8;
	}
	return 0x8213CEF8;
} // Block from 8213CEBCh-8213CEF8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8213CEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CEF8);
		  /* 8213CEF8h */ case    0:  		/* lwz R8, <#[R31 + 552]> */
		/* 8213CEF8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000228) );
		/* 8213CEF8h case    0:*/		return 0x8213CEFC;
		  /* 8213CEFCh */ case    1:  		/* cmplwi CR6, R8, 512 */
		/* 8213CEFCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000200);
		/* 8213CEFCh case    1:*/		return 0x8213CF00;
		  /* 8213CF00h */ case    2:  		/* bc 4, CR6_LT, -320 */
		/* 8213CF00h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213CDC0;  }
		/* 8213CF00h case    2:*/		return 0x8213CF04;
		  /* 8213CF04h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 8213CF04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213CF04h case    3:*/		return 0x8213CF08;
		  /* 8213CF08h */ case    4:  		/* lwz R5, <#[R10 + 40]> */
		/* 8213CF08h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000028) );
		/* 8213CF08h case    4:*/		return 0x8213CF0C;
		  /* 8213CF0Ch */ case    5:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 8213CF0Ch case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 8213CF0Ch case    5:*/		return 0x8213CF10;
		  /* 8213CF10h */ case    6:  		/* cmplwi CR6, R5, 2 */
		/* 8213CF10h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000002);
		/* 8213CF10h case    6:*/		return 0x8213CF14;
		  /* 8213CF14h */ case    7:  		/* bc 4, CR6_EQ, 60 */
		/* 8213CF14h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213CF50;  }
		/* 8213CF14h case    7:*/		return 0x8213CF18;
		  /* 8213CF18h */ case    8:  		/* mr R3, R9 */
		/* 8213CF18h case    8:*/		regs.R3 = regs.R9;
		/* 8213CF18h case    8:*/		return 0x8213CF1C;
		  /* 8213CF1Ch */ case    9:  		/* bl -55228 */
		/* 8213CF1Ch case    9:*/		regs.LR = 0x8213CF20; return 0x8212F760;
		/* 8213CF1Ch case    9:*/		return 0x8213CF20;
		  /* 8213CF20h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8213CF20h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213CF20h case   10:*/		return 0x8213CF24;
		  /* 8213CF24h */ case   11:  		/* bc 4, CR0_EQ, 44 */
		/* 8213CF24h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8213CF50;  }
		/* 8213CF24h case   11:*/		return 0x8213CF28;
		  /* 8213CF28h */ case   12:  		/* cmplw CR6, R9, R21 */
		/* 8213CF28h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R21);
		/* 8213CF28h case   12:*/		return 0x8213CF2C;
		  /* 8213CF2Ch */ case   13:  		/* bc 12, CR6_EQ, 36 */
		/* 8213CF2Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8213CF50;  }
		/* 8213CF2Ch case   13:*/		return 0x8213CF30;
		  /* 8213CF30h */ case   14:  		/* cmplw CR6, R9, R22 */
		/* 8213CF30h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 8213CF30h case   14:*/		return 0x8213CF34;
		  /* 8213CF34h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 8213CF34h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213CF50;  }
		/* 8213CF34h case   15:*/		return 0x8213CF38;
		  /* 8213CF38h */ case   16:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213CF38h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213CF38h case   16:*/		return 0x8213CF3C;
		  /* 8213CF3Ch */ case   17:  		/* rlwinm R9, R8, 2, 0, 29 */
		/* 8213CF3Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 8213CF3Ch case   17:*/		return 0x8213CF40;
		  /* 8213CF40h */ case   18:  		/* stwx R10, <#[R9 + R11]> */
		/* 8213CF40h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213CF40h case   18:*/		return 0x8213CF44;
		  /* 8213CF44h */ case   19:  		/* lwz R11, <#[R31 + 552]> */
		/* 8213CF44h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213CF44h case   19:*/		return 0x8213CF48;
		  /* 8213CF48h */ case   20:  		/* addi R11, R11, 1 */
		/* 8213CF48h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213CF48h case   20:*/		return 0x8213CF4C;
		  /* 8213CF4Ch */ case   21:  		/* stw R11, <#[R31 + 552]> */
		/* 8213CF4Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000228) );
		/* 8213CF4Ch case   21:*/		return 0x8213CF50;
	}
	return 0x8213CF50;
} // Block from 8213CEF8h-8213CF50h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8213CF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CF50);
		  /* 8213CF50h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213CF50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213CF50h case    0:*/		return 0x8213CF54;
		  /* 8213CF54h */ case    1:  		/* addi R6, R6, 1 */
		/* 8213CF54h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213CF54h case    1:*/		return 0x8213CF58;
		  /* 8213CF58h */ case    2:  		/* addi R7, R7, 4 */
		/* 8213CF58h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8213CF58h case    2:*/		return 0x8213CF5C;
		  /* 8213CF5Ch */ case    3:  		/* cmplw CR6, R6, R11 */
		/* 8213CF5Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8213CF5Ch case    3:*/		return 0x8213CF60;
		  /* 8213CF60h */ case    4:  		/* bc 12, CR6_LT, -132 */
		/* 8213CF60h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CEDC;  }
		/* 8213CF60h case    4:*/		return 0x8213CF64;
	}
	return 0x8213CF64;
} // Block from 8213CF50h-8213CF64h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213CF64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CF64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CF64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CF64);
		  /* 8213CF64h */ case    0:  		/* li R3, 0 */
		/* 8213CF64h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213CF64h case    0:*/		return 0x8213CF68;
	}
	return 0x8213CF68;
} // Block from 8213CF64h-8213CF68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213CF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CF68);
		  /* 8213CF68h */ case    0:  		/* addi R1, R1, 192 */
		/* 8213CF68h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8213CF68h case    0:*/		return 0x8213CF6C;
		  /* 8213CF6Ch */ case    1:  		/* b -703712 */
		/* 8213CF6Ch case    1:*/		return 0x8209128C;
		/* 8213CF6Ch case    1:*/		return 0x8213CF70;
	}
	return 0x8213CF70;
} // Block from 8213CF68h-8213CF70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213CF70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CF70);
		  /* 8213CF70h */ case    0:  		/* lis R3, -32761 */
		/* 8213CF70h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213CF70h case    0:*/		return 0x8213CF74;
		  /* 8213CF74h */ case    1:  		/* ori R3, R3, 14 */
		/* 8213CF74h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213CF74h case    1:*/		return 0x8213CF78;
		  /* 8213CF78h */ case    2:  		/* b -16 */
		/* 8213CF78h case    2:*/		return 0x8213CF68;
		/* 8213CF78h case    2:*/		return 0x8213CF7C;
		  /* 8213CF7Ch */ case    3:  		/* nop */
		/* 8213CF7Ch case    3:*/		cpu::op::nop();
		/* 8213CF7Ch case    3:*/		return 0x8213CF80;
	}
	return 0x8213CF80;
} // Block from 8213CF70h-8213CF80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213CF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CF80);
		  /* 8213CF80h */ case    0:  		/* mfspr R12, LR */
		/* 8213CF80h case    0:*/		regs.R12 = regs.LR;
		/* 8213CF80h case    0:*/		return 0x8213CF84;
		  /* 8213CF84h */ case    1:  		/* bl -703804 */
		/* 8213CF84h case    1:*/		regs.LR = 0x8213CF88; return 0x82091248;
		/* 8213CF84h case    1:*/		return 0x8213CF88;
		  /* 8213CF88h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8213CF88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8213CF88h case    2:*/		return 0x8213CF8C;
		  /* 8213CF8Ch */ case    3:  		/* lwz R11, <#[R3 + 76]> */
		/* 8213CF8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8213CF8Ch case    3:*/		return 0x8213CF90;
		  /* 8213CF90h */ case    4:  		/* li R25, 0 */
		/* 8213CF90h case    4:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8213CF90h case    4:*/		return 0x8213CF94;
		  /* 8213CF94h */ case    5:  		/* mr R31, R3 */
		/* 8213CF94h case    5:*/		regs.R31 = regs.R3;
		/* 8213CF94h case    5:*/		return 0x8213CF98;
		  /* 8213CF98h */ case    6:  		/* mr R24, R25 */
		/* 8213CF98h case    6:*/		regs.R24 = regs.R25;
		/* 8213CF98h case    6:*/		return 0x8213CF9C;
		  /* 8213CF9Ch */ case    7:  		/* cmplwi CR6, R11, 4 */
		/* 8213CF9Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8213CF9Ch case    7:*/		return 0x8213CFA0;
		  /* 8213CFA0h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8213CFA0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213CFB0;  }
		/* 8213CFA0h case    8:*/		return 0x8213CFA4;
		  /* 8213CFA4h */ case    9:  		/* lis R3, -32768 */
		/* 8213CFA4h case    9:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213CFA4h case    9:*/		return 0x8213CFA8;
		  /* 8213CFA8h */ case   10:  		/* ori R3, R3, 16389 */
		/* 8213CFA8h case   10:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213CFA8h case   10:*/		return 0x8213CFAC;
		  /* 8213CFACh */ case   11:  		/* b 740 */
		/* 8213CFACh case   11:*/		return 0x8213D290;
		/* 8213CFACh case   11:*/		return 0x8213CFB0;
	}
	return 0x8213CFB0;
} // Block from 8213CF80h-8213CFB0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213CFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213CFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213CFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213CFB0);
		  /* 8213CFB0h */ case    0:  		/* addi R9, R1, 80 */
		/* 8213CFB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213CFB0h case    0:*/		return 0x8213CFB4;
		  /* 8213CFB4h */ case    1:  		/* addi R8, R1, 96 */
		/* 8213CFB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8213CFB4h case    1:*/		return 0x8213CFB8;
		  /* 8213CFB8h */ case    2:  		/* addi R10, R1, 96 */
		/* 8213CFB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8213CFB8h case    2:*/		return 0x8213CFBC;
		  /* 8213CFBCh */ case    3:  		/* mr R29, R25 */
		/* 8213CFBCh case    3:*/		regs.R29 = regs.R25;
		/* 8213CFBCh case    3:*/		return 0x8213CFC0;
		  /* 8213CFC0h */ case    4:  		/* mr R5, R25 */
		/* 8213CFC0h case    4:*/		regs.R5 = regs.R25;
		/* 8213CFC0h case    4:*/		return 0x8213CFC4;
		  /* 8213CFC4h */ case    5:  		/* std R25, <#[R9]> */
		/* 8213CFC4h case    5:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000000) );
		/* 8213CFC4h case    5:*/		return 0x8213CFC8;
		  /* 8213CFC8h */ case    6:  		/* mr R11, R25 */
		/* 8213CFC8h case    6:*/		regs.R11 = regs.R25;
		/* 8213CFC8h case    6:*/		return 0x8213CFCC;
		  /* 8213CFCCh */ case    7:  		/* std R25, <#[R8]> */
		/* 8213CFCCh case    7:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000000) );
		/* 8213CFCCh case    7:*/		return 0x8213CFD0;
		  /* 8213CFD0h */ case    8:  		/* addi R6, R10, -4 */
		/* 8213CFD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFFC);
		/* 8213CFD0h case    8:*/		return 0x8213CFD4;
		  /* 8213CFD4h */ case    9:  		/* std R25, <#[R9 + 8]> */
		/* 8213CFD4h case    9:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000008) );
		/* 8213CFD4h case    9:*/		return 0x8213CFD8;
		  /* 8213CFD8h */ case   10:  		/* std R25, <#[R8 + 8]> */
		/* 8213CFD8h case   10:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000008) );
		/* 8213CFD8h case   10:*/		return 0x8213CFDC;
		  /* 8213CFDCh */ case   11:  		/* lis R4, 29200 */
		/* 8213CFDCh case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x7210);
		/* 8213CFDCh case   11:*/		return 0x8213CFE0;
		  /* 8213CFE0h */ case   12:  		/* lwz R10, <#[R31 + 564]> */
		/* 8213CFE0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 8213CFE0h case   12:*/		return 0x8213CFE4;
		  /* 8213CFE4h */ case   13:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8213CFE4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213CFE4h case   13:*/		return 0x8213CFE8;
		  /* 8213CFE8h */ case   14:  		/* cmplwi CR6, R9, 0 */
		/* 8213CFE8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213CFE8h case   14:*/		return 0x8213CFEC;
		  /* 8213CFECh */ case   15:  		/* bc 12, CR6_EQ, 140 */
		/* 8213CFECh case   15:*/		if ( regs.CR[6].eq ) { return 0x8213D078;  }
		/* 8213CFECh case   15:*/		return 0x8213CFF0;
		  /* 8213CFF0h */ case   16:  		/* rlwinm R7, R9, 0, 0, 31 */
		/* 8213CFF0h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R9);
		/* 8213CFF0h case   16:*/		return 0x8213CFF4;
		  /* 8213CFF4h */ case   17:  		/* lwz R9, <#[R7]> */
		/* 8213CFF4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 8213CFF4h case   17:*/		return 0x8213CFF8;
		  /* 8213CFF8h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 8213CFF8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213CFF8h case   18:*/		return 0x8213CFFC;
		  /* 8213CFFCh */ case   19:  		/* bc 12, CR6_EQ, 124 */
		/* 8213CFFCh case   19:*/		if ( regs.CR[6].eq ) { return 0x8213D078;  }
		/* 8213CFFCh case   19:*/		return 0x8213D000;
		  /* 8213D000h */ case   20:  		/* lwzx R8, <#[R11 + R10]> */
		/* 8213D000h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D000h case   20:*/		return 0x8213D004;
		  /* 8213D004h */ case   21:  		/* lwz R8, <#[R8]> */
		/* 8213D004h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8213D004h case   21:*/		return 0x8213D008;
		  /* 8213D008h */ case   22:  		/* rlwinm R3, R8, 0, 0, 11 */
		/* 8213D008h case   22:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R8);
		/* 8213D008h case   22:*/		return 0x8213D00C;
		  /* 8213D00Ch */ case   23:  		/* cmplw CR6, R3, R4 */
		/* 8213D00Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 8213D00Ch case   23:*/		return 0x8213D010;
		  /* 8213D010h */ case   24:  		/* bc 12, CR6_EQ, 88 */
		/* 8213D010h case   24:*/		if ( regs.CR[6].eq ) { return 0x8213D068;  }
		/* 8213D010h case   24:*/		return 0x8213D014;
		  /* 8213D014h */ case   25:  		/* rlwinm R3, R9, 0, 0, 11 */
		/* 8213D014h case   25:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R9);
		/* 8213D014h case   25:*/		return 0x8213D018;
		  /* 8213D018h */ case   26:  		/* lis R30, 4352 */
		/* 8213D018h case   26:*/		cpu::op::lis<0>(regs,&regs.R30,0x1100);
		/* 8213D018h case   26:*/		return 0x8213D01C;
		  /* 8213D01Ch */ case   27:  		/* mr R9, R25 */
		/* 8213D01Ch case   27:*/		regs.R9 = regs.R25;
		/* 8213D01Ch case   27:*/		return 0x8213D020;
		  /* 8213D020h */ case   28:  		/* cmplw CR6, R3, R30 */
		/* 8213D020h case   28:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 8213D020h case   28:*/		return 0x8213D024;
		  /* 8213D024h */ case   29:  		/* bc 12, CR6_EQ, 8 */
		/* 8213D024h case   29:*/		if ( regs.CR[6].eq ) { return 0x8213D02C;  }
		/* 8213D024h case   29:*/		return 0x8213D028;
		  /* 8213D028h */ case   30:  		/* rlwinm R9, R8, 0, 12, 31 */
		/* 8213D028h case   30:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R8);
		/* 8213D028h case   30:*/		return 0x8213D02C;
	}
	return 0x8213D02C;
} // Block from 8213CFB0h-8213D02Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8213D02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D02C);
		  /* 8213D02Ch */ case    0:  		/* lwz R8, <#[R7 + 8]> */
		/* 8213D02Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000008) );
		/* 8213D02Ch case    0:*/		return 0x8213D030;
		  /* 8213D030h */ case    1:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213D030h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213D030h case    1:*/		return 0x8213D034;
		  /* 8213D034h */ case    2:  		/* lwz R7, <#[R31 + 20]> */
		/* 8213D034h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 8213D034h case    2:*/		return 0x8213D038;
		  /* 8213D038h */ case    3:  		/* lwz R3, <#[R31 + 136]> */
		/* 8213D038h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000088) );
		/* 8213D038h case    3:*/		return 0x8213D03C;
		  /* 8213D03Ch */ case    4:  		/* lwzx R9, <#[R8 + R9]> */
		/* 8213D03Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 8213D03Ch case    4:*/		return 0x8213D040;
		  /* 8213D040h */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213D040h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213D040h case    5:*/		return 0x8213D044;
		  /* 8213D044h */ case    6:  		/* lwzx R9, <#[R9 + R7]> */
		/* 8213D044h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8213D044h case    6:*/		return 0x8213D048;
		  /* 8213D048h */ case    7:  		/* lwz R9, <#[R9 + 4]> */
		/* 8213D048h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8213D048h case    7:*/		return 0x8213D04C;
		  /* 8213D04Ch */ case    8:  		/* cmplw CR6, R9, R3 */
		/* 8213D04Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R3);
		/* 8213D04Ch case    8:*/		return 0x8213D050;
		  /* 8213D050h */ case    9:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8213D050h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D050h case    9:*/		return 0x8213D054;
		  /* 8213D054h */ case   10:  		/* stwx R25, <#[R11 + R10]> */
		/* 8213D054h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D054h case   10:*/		return 0x8213D058;
		  /* 8213D058h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 8213D058h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8213D070;  }
		/* 8213D058h case   11:*/		return 0x8213D05C;
		  /* 8213D05Ch */ case   12:  		/* addi R29, R29, 1 */
		/* 8213D05Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213D05Ch case   12:*/		return 0x8213D060;
		  /* 8213D060h */ case   13:  		/* stwu R9, <#[R6 + 4]> */
		/* 8213D060h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 8213D060h case   13:*/		return 0x8213D064;
		  /* 8213D064h */ case   14:  		/* b 20 */
		/* 8213D064h case   14:*/		return 0x8213D078;
		/* 8213D064h case   14:*/		return 0x8213D068;
	}
	return 0x8213D068;
} // Block from 8213D02Ch-8213D068h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8213D068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D068);
		  /* 8213D068h */ case    0:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8213D068h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D068h case    0:*/		return 0x8213D06C;
		  /* 8213D06Ch */ case    1:  		/* stwx R25, <#[R11 + R10]> */
		/* 8213D06Ch case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D06Ch case    1:*/		return 0x8213D070;
	}
	return 0x8213D070;
} // Block from 8213D068h-8213D070h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D070);
		  /* 8213D070h */ case    0:  		/* addi R8, R1, 80 */
		/* 8213D070h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8213D070h case    0:*/		return 0x8213D074;
		  /* 8213D074h */ case    1:  		/* stwx R9, <#[R11 + R8]> */
		/* 8213D074h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213D074h case    1:*/		return 0x8213D078;
	}
	return 0x8213D078;
} // Block from 8213D070h-8213D078h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D078);
		  /* 8213D078h */ case    0:  		/* lwz R10, <#[R31 + 76]> */
		/* 8213D078h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D078h case    0:*/		return 0x8213D07C;
		  /* 8213D07Ch */ case    1:  		/* addi R5, R5, 1 */
		/* 8213D07Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213D07Ch case    1:*/		return 0x8213D080;
		  /* 8213D080h */ case    2:  		/* addi R11, R11, 4 */
		/* 8213D080h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213D080h case    2:*/		return 0x8213D084;
		  /* 8213D084h */ case    3:  		/* cmplw CR6, R5, R10 */
		/* 8213D084h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 8213D084h case    3:*/		return 0x8213D088;
		  /* 8213D088h */ case    4:  		/* bc 12, CR6_LT, -168 */
		/* 8213D088h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213CFE0;  }
		/* 8213D088h case    4:*/		return 0x8213D08C;
		  /* 8213D08Ch */ case    5:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8213D08Ch case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8213D08Ch case    5:*/		return 0x8213D090;
		  /* 8213D090h */ case    6:  		/* mr R8, R25 */
		/* 8213D090h case    6:*/		regs.R8 = regs.R25;
		/* 8213D090h case    6:*/		return 0x8213D094;
		  /* 8213D094h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213D094h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D094h case    7:*/		return 0x8213D098;
		  /* 8213D098h */ case    8:  		/* bc 4, CR6_GT, 100 */
		/* 8213D098h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213D0FC;  }
		/* 8213D098h case    8:*/		return 0x8213D09C;
		  /* 8213D09Ch */ case    9:  		/* mr R11, R25 */
		/* 8213D09Ch case    9:*/		regs.R11 = regs.R25;
		/* 8213D09Ch case    9:*/		return 0x8213D0A0;
		  /* 8213D0A0h */ case   10:  		/* lwz R10, <#[R31 + 560]> */
		/* 8213D0A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 8213D0A0h case   10:*/		return 0x8213D0A4;
		  /* 8213D0A4h */ case   11:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8213D0A4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D0A4h case   11:*/		return 0x8213D0A8;
		  /* 8213D0A8h */ case   12:  		/* cmplwi CR6, R9, 0 */
		/* 8213D0A8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213D0A8h case   12:*/		return 0x8213D0AC;
		  /* 8213D0ACh */ case   13:  		/* bc 12, CR6_EQ, 60 */
		/* 8213D0ACh case   13:*/		if ( regs.CR[6].eq ) { return 0x8213D0E8;  }
		/* 8213D0ACh case   13:*/		return 0x8213D0B0;
		  /* 8213D0B0h */ case   14:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8213D0B0h case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8213D0B0h case   14:*/		return 0x8213D0B4;
		  /* 8213D0B4h */ case   15:  		/* lwz R9, <#[R9]> */
		/* 8213D0B4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8213D0B4h case   15:*/		return 0x8213D0B8;
		  /* 8213D0B8h */ case   16:  		/* cmplwi CR6, R9, 0 */
		/* 8213D0B8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8213D0B8h case   16:*/		return 0x8213D0BC;
		  /* 8213D0BCh */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 8213D0BCh case   17:*/		if ( regs.CR[6].eq ) { return 0x8213D0E8;  }
		/* 8213D0BCh case   17:*/		return 0x8213D0C0;
		  /* 8213D0C0h */ case   18:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 8213D0C0h case   18:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8213D0C0h case   18:*/		return 0x8213D0C4;
		  /* 8213D0C4h */ case   19:  		/* cmplw CR6, R9, R4 */
		/* 8213D0C4h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 8213D0C4h case   19:*/		return 0x8213D0C8;
		  /* 8213D0C8h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 8213D0C8h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213D0E8;  }
		/* 8213D0C8h case   20:*/		return 0x8213D0CC;
		  /* 8213D0CCh */ case   21:  		/* addi R9, R1, 80 */
		/* 8213D0CCh case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213D0CCh case   21:*/		return 0x8213D0D0;
		  /* 8213D0D0h */ case   22:  		/* lwzx R7, <#[R11 + R9]> */
		/* 8213D0D0h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D0D0h case   22:*/		return 0x8213D0D4;
		  /* 8213D0D4h */ case   23:  		/* cmplwi CR6, R7, 0 */
		/* 8213D0D4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8213D0D4h case   23:*/		return 0x8213D0D8;
		  /* 8213D0D8h */ case   24:  		/* bc 4, CR6_EQ, 448 */
		/* 8213D0D8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8213D298;  }
		/* 8213D0D8h case   24:*/		return 0x8213D0DC;
		  /* 8213D0DCh */ case   25:  		/* lwzx R7, <#[R11 + R10]> */
		/* 8213D0DCh case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D0DCh case   25:*/		return 0x8213D0E0;
		  /* 8213D0E0h */ case   26:  		/* stwx R25, <#[R11 + R10]> */
		/* 8213D0E0h case   26:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213D0E0h case   26:*/		return 0x8213D0E4;
		  /* 8213D0E4h */ case   27:  		/* stwx R7, <#[R11 + R9]> */
		/* 8213D0E4h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D0E4h case   27:*/		return 0x8213D0E8;
	}
	return 0x8213D0E8;
} // Block from 8213D078h-8213D0E8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213D0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D0E8);
		  /* 8213D0E8h */ case    0:  		/* lwz R10, <#[R31 + 76]> */
		/* 8213D0E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D0E8h case    0:*/		return 0x8213D0EC;
		  /* 8213D0ECh */ case    1:  		/* addi R8, R8, 1 */
		/* 8213D0ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213D0ECh case    1:*/		return 0x8213D0F0;
		  /* 8213D0F0h */ case    2:  		/* addi R11, R11, 4 */
		/* 8213D0F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213D0F0h case    2:*/		return 0x8213D0F4;
		  /* 8213D0F4h */ case    3:  		/* cmplw CR6, R8, R10 */
		/* 8213D0F4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 8213D0F4h case    3:*/		return 0x8213D0F8;
		  /* 8213D0F8h */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 8213D0F8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213D0A0;  }
		/* 8213D0F8h case    4:*/		return 0x8213D0FC;
	}
	return 0x8213D0FC;
} // Block from 8213D0E8h-8213D0FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213D0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D0FC);
		  /* 8213D0FCh */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213D0FCh case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213D0FCh case    0:*/		return 0x8213D100;
		  /* 8213D100h */ case    1:  		/* cmplwi CR6, R11, 257 */
		/* 8213D100h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000101);
		/* 8213D100h case    1:*/		return 0x8213D104;
		  /* 8213D104h */ case    2:  		/* bc 4, CR6_GT, 36 */
		/* 8213D104h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8213D128;  }
		/* 8213D104h case    2:*/		return 0x8213D108;
		  /* 8213D108h */ case    3:  		/* li R7, 1 */
		/* 8213D108h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8213D108h case    3:*/		return 0x8213D10C;
		  /* 8213D10Ch */ case    4:  		/* addi R6, R1, 80 */
		/* 8213D10Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8213D10Ch case    4:*/		return 0x8213D110;
		  /* 8213D110h */ case    5:  		/* mr R5, R29 */
		/* 8213D110h case    5:*/		regs.R5 = regs.R29;
		/* 8213D110h case    5:*/		return 0x8213D114;
		  /* 8213D114h */ case    6:  		/* addi R4, R1, 96 */
		/* 8213D114h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8213D114h case    6:*/		return 0x8213D118;
		  /* 8213D118h */ case    7:  		/* mr R3, R31 */
		/* 8213D118h case    7:*/		regs.R3 = regs.R31;
		/* 8213D118h case    7:*/		return 0x8213D11C;
		  /* 8213D11Ch */ case    8:  		/* bl -16652 */
		/* 8213D11Ch case    8:*/		regs.LR = 0x8213D120; return 0x82139010;
		/* 8213D11Ch case    8:*/		return 0x8213D120;
		  /* 8213D120h */ case    9:  		/* or. R30, R3, R3 */
		/* 8213D120h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213D120h case    9:*/		return 0x8213D124;
		  /* 8213D124h */ case   10:  		/* bc 12, CR0_LT, 292 */
		/* 8213D124h case   10:*/		if ( regs.CR[0].lt ) { return 0x8213D248;  }
		/* 8213D124h case   10:*/		return 0x8213D128;
	}
	return 0x8213D128;
} // Block from 8213D0FCh-8213D128h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213D128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D128);
		  /* 8213D128h */ case    0:  		/* li R7, 2 */
		/* 8213D128h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8213D128h case    0:*/		return 0x8213D12C;
		  /* 8213D12Ch */ case    1:  		/* addi R6, R1, 80 */
		/* 8213D12Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8213D12Ch case    1:*/		return 0x8213D130;
		  /* 8213D130h */ case    2:  		/* mr R5, R29 */
		/* 8213D130h case    2:*/		regs.R5 = regs.R29;
		/* 8213D130h case    2:*/		return 0x8213D134;
		  /* 8213D134h */ case    3:  		/* addi R4, R1, 96 */
		/* 8213D134h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8213D134h case    3:*/		return 0x8213D138;
		  /* 8213D138h */ case    4:  		/* mr R3, R31 */
		/* 8213D138h case    4:*/		regs.R3 = regs.R31;
		/* 8213D138h case    4:*/		return 0x8213D13C;
		  /* 8213D13Ch */ case    5:  		/* bl -16684 */
		/* 8213D13Ch case    5:*/		regs.LR = 0x8213D140; return 0x82139010;
		/* 8213D13Ch case    5:*/		return 0x8213D140;
		  /* 8213D140h */ case    6:  		/* or. R30, R3, R3 */
		/* 8213D140h case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213D140h case    6:*/		return 0x8213D144;
		  /* 8213D144h */ case    7:  		/* bc 12, CR0_LT, 260 */
		/* 8213D144h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213D248;  }
		/* 8213D144h case    7:*/		return 0x8213D148;
		  /* 8213D148h */ case    8:  		/* li R7, 3 */
		/* 8213D148h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8213D148h case    8:*/		return 0x8213D14C;
		  /* 8213D14Ch */ case    9:  		/* addi R6, R1, 80 */
		/* 8213D14Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8213D14Ch case    9:*/		return 0x8213D150;
		  /* 8213D150h */ case   10:  		/* mr R5, R29 */
		/* 8213D150h case   10:*/		regs.R5 = regs.R29;
		/* 8213D150h case   10:*/		return 0x8213D154;
		  /* 8213D154h */ case   11:  		/* addi R4, R1, 96 */
		/* 8213D154h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8213D154h case   11:*/		return 0x8213D158;
		  /* 8213D158h */ case   12:  		/* mr R3, R31 */
		/* 8213D158h case   12:*/		regs.R3 = regs.R31;
		/* 8213D158h case   12:*/		return 0x8213D15C;
		  /* 8213D15Ch */ case   13:  		/* bl -16716 */
		/* 8213D15Ch case   13:*/		regs.LR = 0x8213D160; return 0x82139010;
		/* 8213D15Ch case   13:*/		return 0x8213D160;
		  /* 8213D160h */ case   14:  		/* or. R30, R3, R3 */
		/* 8213D160h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213D160h case   14:*/		return 0x8213D164;
		  /* 8213D164h */ case   15:  		/* bc 12, CR0_LT, 228 */
		/* 8213D164h case   15:*/		if ( regs.CR[0].lt ) { return 0x8213D248;  }
		/* 8213D164h case   15:*/		return 0x8213D168;
		  /* 8213D168h */ case   16:  		/* addi R6, R1, 80 */
		/* 8213D168h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8213D168h case   16:*/		return 0x8213D16C;
		  /* 8213D16Ch */ case   17:  		/* mr R5, R29 */
		/* 8213D16Ch case   17:*/		regs.R5 = regs.R29;
		/* 8213D16Ch case   17:*/		return 0x8213D170;
		  /* 8213D170h */ case   18:  		/* addi R4, R1, 96 */
		/* 8213D170h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8213D170h case   18:*/		return 0x8213D174;
		  /* 8213D174h */ case   19:  		/* mr R3, R31 */
		/* 8213D174h case   19:*/		regs.R3 = regs.R31;
		/* 8213D174h case   19:*/		return 0x8213D178;
		  /* 8213D178h */ case   20:  		/* bl -18264 */
		/* 8213D178h case   20:*/		regs.LR = 0x8213D17C; return 0x82138A20;
		/* 8213D178h case   20:*/		return 0x8213D17C;
		  /* 8213D17Ch */ case   21:  		/* or. R30, R3, R3 */
		/* 8213D17Ch case   21:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213D17Ch case   21:*/		return 0x8213D180;
		  /* 8213D180h */ case   22:  		/* bc 12, CR0_LT, 200 */
		/* 8213D180h case   22:*/		if ( regs.CR[0].lt ) { return 0x8213D248;  }
		/* 8213D180h case   22:*/		return 0x8213D184;
		  /* 8213D184h */ case   23:  		/* lwz R11, <#[R31 + 76]> */
		/* 8213D184h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D184h case   23:*/		return 0x8213D188;
		  /* 8213D188h */ case   24:  		/* lis R10, -32768 */
		/* 8213D188h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8213D188h case   24:*/		return 0x8213D18C;
		  /* 8213D18Ch */ case   25:  		/* mr R28, R25 */
		/* 8213D18Ch case   25:*/		regs.R28 = regs.R25;
		/* 8213D18Ch case   25:*/		return 0x8213D190;
		  /* 8213D190h */ case   26:  		/* ori R27, R10, 16389 */
		/* 8213D190h case   26:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R10,0x4005);
		/* 8213D190h case   26:*/		return 0x8213D194;
		  /* 8213D194h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 8213D194h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D194h case   27:*/		return 0x8213D198;
		  /* 8213D198h */ case   28:  		/* bc 4, CR6_GT, 80 */
		/* 8213D198h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8213D1E8;  }
		/* 8213D198h case   28:*/		return 0x8213D19C;
		  /* 8213D19Ch */ case   29:  		/* lis R11, -32253 */
		/* 8213D19Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213D19Ch case   29:*/		return 0x8213D1A0;
		  /* 8213D1A0h */ case   30:  		/* addi R26, R1, 96 */
		/* 8213D1A0h case   30:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x60);
		/* 8213D1A0h case   30:*/		return 0x8213D1A4;
		  /* 8213D1A4h */ case   31:  		/* addi R29, R11, 23232 */
		/* 8213D1A4h case   31:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x5AC0);
		/* 8213D1A4h case   31:*/		return 0x8213D1A8;
		  /* 8213D1A8h */ case   32:  		/* lwz R11, <#[R26]> */
		/* 8213D1A8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8213D1A8h case   32:*/		return 0x8213D1AC;
		  /* 8213D1ACh */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 8213D1ACh case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D1ACh case   33:*/		return 0x8213D1B0;
		  /* 8213D1B0h */ case   34:  		/* bc 12, CR6_EQ, 36 */
		/* 8213D1B0h case   34:*/		if ( regs.CR[6].eq ) { return 0x8213D1D4;  }
		/* 8213D1B0h case   34:*/		return 0x8213D1B4;
		  /* 8213D1B4h */ case   35:  		/* mr R6, R29 */
		/* 8213D1B4h case   35:*/		regs.R6 = regs.R29;
		/* 8213D1B4h case   35:*/		return 0x8213D1B8;
		  /* 8213D1B8h */ case   36:  		/* lbz R7, <#[R31 + 203]> */
		/* 8213D1B8h case   36:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000CB) );
		/* 8213D1B8h case   36:*/		return 0x8213D1BC;
		  /* 8213D1BCh */ case   37:  		/* li R5, 4523 */
		/* 8213D1BCh case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x11AB);
		/* 8213D1BCh case   37:*/		return 0x8213D1C0;
		  /* 8213D1C0h */ case   38:  		/* lwz R4, <#[R11 + 60]> */
		/* 8213D1C0h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213D1C0h case   38:*/		return 0x8213D1C4;
		  /* 8213D1C4h */ case   39:  		/* mr R3, R31 */
		/* 8213D1C4h case   39:*/		regs.R3 = regs.R31;
		/* 8213D1C4h case   39:*/		return 0x8213D1C8;
		  /* 8213D1C8h */ case   40:  		/* mr R30, R27 */
		/* 8213D1C8h case   40:*/		regs.R30 = regs.R27;
		/* 8213D1C8h case   40:*/		return 0x8213D1CC;
		  /* 8213D1CCh */ case   41:  		/* bl -191132 */
		/* 8213D1CCh case   41:*/		regs.LR = 0x8213D1D0; return 0x8210E730;
		/* 8213D1CCh case   41:*/		return 0x8213D1D0;
		  /* 8213D1D0h */ case   42:  		/* li R24, 1 */
		/* 8213D1D0h case   42:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8213D1D0h case   42:*/		return 0x8213D1D4;
	}
	return 0x8213D1D4;
} // Block from 8213D128h-8213D1D4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8213D1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D1D4);
		  /* 8213D1D4h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 8213D1D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D1D4h case    0:*/		return 0x8213D1D8;
		  /* 8213D1D8h */ case    1:  		/* addi R28, R28, 1 */
		/* 8213D1D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8213D1D8h case    1:*/		return 0x8213D1DC;
		  /* 8213D1DCh */ case    2:  		/* addi R26, R26, 4 */
		/* 8213D1DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8213D1DCh case    2:*/		return 0x8213D1E0;
		  /* 8213D1E0h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 8213D1E0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8213D1E0h case    3:*/		return 0x8213D1E4;
		  /* 8213D1E4h */ case    4:  		/* bc 12, CR6_LT, -60 */
		/* 8213D1E4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213D1A8;  }
		/* 8213D1E4h case    4:*/		return 0x8213D1E8;
	}
	return 0x8213D1E8;
} // Block from 8213D1D4h-8213D1E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213D1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D1E8);
		  /* 8213D1E8h */ case    0:  		/* cmpw CR6, R30, R27 */
		/* 8213D1E8h case    0:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R27);
		/* 8213D1E8h case    0:*/		return 0x8213D1EC;
		  /* 8213D1ECh */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8213D1ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8213D240;  }
		/* 8213D1ECh case    1:*/		return 0x8213D1F0;
		  /* 8213D1F0h */ case    2:  		/* lwz R11, <#[R31 + 76]> */
		/* 8213D1F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D1F0h case    2:*/		return 0x8213D1F4;
		  /* 8213D1F4h */ case    3:  		/* mr R10, R25 */
		/* 8213D1F4h case    3:*/		regs.R10 = regs.R25;
		/* 8213D1F4h case    3:*/		return 0x8213D1F8;
		  /* 8213D1F8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213D1F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D1F8h case    4:*/		return 0x8213D1FC;
		  /* 8213D1FCh */ case    5:  		/* bc 4, CR6_GT, 44 */
		/* 8213D1FCh case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213D228;  }
		/* 8213D1FCh case    5:*/		return 0x8213D200;
		  /* 8213D200h */ case    6:  		/* mr R11, R25 */
		/* 8213D200h case    6:*/		regs.R11 = regs.R25;
		/* 8213D200h case    6:*/		return 0x8213D204;
		  /* 8213D204h */ case    7:  		/* addi R9, R1, 80 */
		/* 8213D204h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213D204h case    7:*/		return 0x8213D208;
		  /* 8213D208h */ case    8:  		/* lwz R8, <#[R31 + 564]> */
		/* 8213D208h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000234) );
		/* 8213D208h case    8:*/		return 0x8213D20C;
		  /* 8213D20Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8213D20Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213D20Ch case    9:*/		return 0x8213D210;
		  /* 8213D210h */ case   10:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8213D210h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D210h case   10:*/		return 0x8213D214;
		  /* 8213D214h */ case   11:  		/* stwx R9, <#[R11 + R8]> */
		/* 8213D214h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213D214h case   11:*/		return 0x8213D218;
		  /* 8213D218h */ case   12:  		/* addi R11, R11, 4 */
		/* 8213D218h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213D218h case   12:*/		return 0x8213D21C;
		  /* 8213D21Ch */ case   13:  		/* lwz R9, <#[R31 + 76]> */
		/* 8213D21Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D21Ch case   13:*/		return 0x8213D220;
		  /* 8213D220h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 8213D220h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213D220h case   14:*/		return 0x8213D224;
		  /* 8213D224h */ case   15:  		/* bc 12, CR6_LT, -32 */
		/* 8213D224h case   15:*/		if ( regs.CR[6].lt ) { return 0x8213D204;  }
		/* 8213D224h case   15:*/		return 0x8213D228;
	}
	return 0x8213D228;
} // Block from 8213D1E8h-8213D228h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213D228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D228);
		  /* 8213D228h */ case    0:  		/* lis R4, 9345 */
		/* 8213D228h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213D228h case    0:*/		return 0x8213D22C;
		  /* 8213D22Ch */ case    1:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213D22Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213D22Ch case    1:*/		return 0x8213D230;
		  /* 8213D230h */ case    2:  		/* bl -741112 */
		/* 8213D230h case    2:*/		regs.LR = 0x8213D234; return 0x82088338;
		/* 8213D230h case    2:*/		return 0x8213D234;
		  /* 8213D234h */ case    3:  		/* stw R25, <#[R31 + 560]> */
		/* 8213D234h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000230) );
		/* 8213D234h case    3:*/		return 0x8213D238;
		  /* 8213D238h */ case    4:  		/* mr R30, R25 */
		/* 8213D238h case    4:*/		regs.R30 = regs.R25;
		/* 8213D238h case    4:*/		return 0x8213D23C;
		  /* 8213D23Ch */ case    5:  		/* stw R25, <#[R31 + 548]> */
		/* 8213D23Ch case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000224) );
		/* 8213D23Ch case    5:*/		return 0x8213D240;
	}
	return 0x8213D240;
} // Block from 8213D228h-8213D240h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213D240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D240);
		  /* 8213D240h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8213D240h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213D240h case    0:*/		return 0x8213D244;
		  /* 8213D244h */ case    1:  		/* bc 4, CR6_LT, 72 */
		/* 8213D244h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213D28C;  }
		/* 8213D244h case    1:*/		return 0x8213D248;
	}
	return 0x8213D248;
} // Block from 8213D240h-8213D248h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D248);
		  /* 8213D248h */ case    0:  		/* lwz R10, <#[R31 + 76]> */
		/* 8213D248h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8213D248h case    0:*/		return 0x8213D24C;
		  /* 8213D24Ch */ case    1:  		/* mr R11, R25 */
		/* 8213D24Ch case    1:*/		regs.R11 = regs.R25;
		/* 8213D24Ch case    1:*/		return 0x8213D250;
		  /* 8213D250h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8213D250h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213D250h case    2:*/		return 0x8213D254;
		  /* 8213D254h */ case    3:  		/* bc 4, CR6_GT, 20 */
		/* 8213D254h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213D268;  }
		/* 8213D254h case    3:*/		return 0x8213D258;
		  /* 8213D258h */ case    4:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8213D258h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8213D258h case    4:*/		return 0x8213D25C;
		  /* 8213D25Ch */ case    5:  		/* addi R11, R11, 1 */
		/* 8213D25Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213D25Ch case    5:*/		return 0x8213D260;
		  /* 8213D260h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8213D260h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D260h case    6:*/		return 0x8213D264;
		  /* 8213D264h */ case    7:  		/* bc 12, CR6_LT, -8 */
		/* 8213D264h case    7:*/		if ( regs.CR[6].lt ) { return 0x8213D25C;  }
		/* 8213D264h case    7:*/		return 0x8213D268;
	}
	return 0x8213D268;
} // Block from 8213D248h-8213D268h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213D268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D268);
		  /* 8213D268h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 8213D268h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8213D268h case    0:*/		return 0x8213D26C;
		  /* 8213D26Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8213D26Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213D28C;  }
		/* 8213D26Ch case    1:*/		return 0x8213D270;
		  /* 8213D270h */ case    2:  		/* lis R11, -32253 */
		/* 8213D270h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213D270h case    2:*/		return 0x8213D274;
		  /* 8213D274h */ case    3:  		/* lbz R7, <#[R31 + 203]> */
		/* 8213D274h case    3:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000CB) );
		/* 8213D274h case    3:*/		return 0x8213D278;
		  /* 8213D278h */ case    4:  		/* li R5, 4523 */
		/* 8213D278h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x11AB);
		/* 8213D278h case    4:*/		return 0x8213D27C;
		  /* 8213D27Ch */ case    5:  		/* addi R6, R11, 23104 */
		/* 8213D27Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5A40);
		/* 8213D27Ch case    5:*/		return 0x8213D280;
		  /* 8213D280h */ case    6:  		/* li R4, 0 */
		/* 8213D280h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213D280h case    6:*/		return 0x8213D284;
		  /* 8213D284h */ case    7:  		/* mr R3, R31 */
		/* 8213D284h case    7:*/		regs.R3 = regs.R31;
		/* 8213D284h case    7:*/		return 0x8213D288;
		  /* 8213D288h */ case    8:  		/* bl -191320 */
		/* 8213D288h case    8:*/		regs.LR = 0x8213D28C; return 0x8210E730;
		/* 8213D288h case    8:*/		return 0x8213D28C;
	}
	return 0x8213D28C;
} // Block from 8213D268h-8213D28Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213D28Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D28C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D28C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D28C);
		  /* 8213D28Ch */ case    0:  		/* mr R3, R30 */
		/* 8213D28Ch case    0:*/		regs.R3 = regs.R30;
		/* 8213D28Ch case    0:*/		return 0x8213D290;
	}
	return 0x8213D290;
} // Block from 8213D28Ch-8213D290h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213D290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D290);
		  /* 8213D290h */ case    0:  		/* addi R1, R1, 192 */
		/* 8213D290h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8213D290h case    0:*/		return 0x8213D294;
		  /* 8213D294h */ case    1:  		/* b -704508 */
		/* 8213D294h case    1:*/		return 0x82091298;
		/* 8213D294h case    1:*/		return 0x8213D298;
	}
	return 0x8213D298;
} // Block from 8213D290h-8213D298h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D298);
		  /* 8213D298h */ case    0:  		/* lis R30, -32768 */
		/* 8213D298h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8213D298h case    0:*/		return 0x8213D29C;
		  /* 8213D29Ch */ case    1:  		/* ori R30, R30, 16389 */
		/* 8213D29Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8213D29Ch case    1:*/		return 0x8213D2A0;
		  /* 8213D2A0h */ case    2:  		/* b -88 */
		/* 8213D2A0h case    2:*/		return 0x8213D248;
		/* 8213D2A0h case    2:*/		return 0x8213D2A4;
		  /* 8213D2A4h */ case    3:  		/* nop */
		/* 8213D2A4h case    3:*/		cpu::op::nop();
		/* 8213D2A4h case    3:*/		return 0x8213D2A8;
	}
	return 0x8213D2A8;
} // Block from 8213D298h-8213D2A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D2A8);
		  /* 8213D2A8h */ case    0:  		/* mfspr R12, LR */
		/* 8213D2A8h case    0:*/		regs.R12 = regs.LR;
		/* 8213D2A8h case    0:*/		return 0x8213D2AC;
		  /* 8213D2ACh */ case    1:  		/* bl -704612 */
		/* 8213D2ACh case    1:*/		regs.LR = 0x8213D2B0; return 0x82091248;
		/* 8213D2ACh case    1:*/		return 0x8213D2B0;
		  /* 8213D2B0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8213D2B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8213D2B0h case    2:*/		return 0x8213D2B4;
		  /* 8213D2B4h */ case    3:  		/* mr R31, R3 */
		/* 8213D2B4h case    3:*/		regs.R31 = regs.R3;
		/* 8213D2B4h case    3:*/		return 0x8213D2B8;
		  /* 8213D2B8h */ case    4:  		/* mr R26, R5 */
		/* 8213D2B8h case    4:*/		regs.R26 = regs.R5;
		/* 8213D2B8h case    4:*/		return 0x8213D2BC;
		  /* 8213D2BCh */ case    5:  		/* li R30, 0 */
		/* 8213D2BCh case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213D2BCh case    5:*/		return 0x8213D2C0;
		  /* 8213D2C0h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 8213D2C0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213D2C0h case    6:*/		return 0x8213D2C4;
		  /* 8213D2C4h */ case    7:  		/* bc 12, CR6_EQ, 1040 */
		/* 8213D2C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213D6D4;  }
		/* 8213D2C4h case    7:*/		return 0x8213D2C8;
		  /* 8213D2C8h */ case    8:  		/* lis R11, -32768 */
		/* 8213D2C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8213D2C8h case    8:*/		return 0x8213D2CC;
		  /* 8213D2CCh */ case    9:  		/* mr R29, R4 */
		/* 8213D2CCh case    9:*/		regs.R29 = regs.R4;
		/* 8213D2CCh case    9:*/		return 0x8213D2D0;
		  /* 8213D2D0h */ case   10:  		/* lis R27, 28720 */
		/* 8213D2D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R27,0x7030);
		/* 8213D2D0h case   10:*/		return 0x8213D2D4;
		  /* 8213D2D4h */ case   11:  		/* lis R24, 20480 */
		/* 8213D2D4h case   11:*/		cpu::op::lis<0>(regs,&regs.R24,0x5000);
		/* 8213D2D4h case   11:*/		return 0x8213D2D8;
		  /* 8213D2D8h */ case   12:  		/* ori R28, R11, 16385 */
		/* 8213D2D8h case   12:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R11,0x4001);
		/* 8213D2D8h case   12:*/		return 0x8213D2DC;
		  /* 8213D2DCh */ case   13:  		/* lis R25, 29280 */
		/* 8213D2DCh case   13:*/		cpu::op::lis<0>(regs,&regs.R25,0x7260);
		/* 8213D2DCh case   13:*/		return 0x8213D2E0;
		  /* 8213D2E0h */ case   14:  		/* stw R30, <#[R31 + 256]> */
		/* 8213D2E0h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213D2E0h case   14:*/		return 0x8213D2E4;
		  /* 8213D2E4h */ case   15:  		/* lwz R11, <#[R29]> */
		/* 8213D2E4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8213D2E4h case   15:*/		return 0x8213D2E8;
		  /* 8213D2E8h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 8213D2E8h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8213D2E8h case   16:*/		return 0x8213D2EC;
		  /* 8213D2ECh */ case   17:  		/* stw R11, <#[R31 + 260]> */
		/* 8213D2ECh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213D2ECh case   17:*/		return 0x8213D2F0;
		  /* 8213D2F0h */ case   18:  		/* bc 12, CR0_EQ, 980 */
		/* 8213D2F0h case   18:*/		if ( regs.CR[0].eq ) { return 0x8213D6C4;  }
		/* 8213D2F0h case   18:*/		return 0x8213D2F4;
		  /* 8213D2F4h */ case   19:  		/* lwz R11, <#[R11 + 60]> */
		/* 8213D2F4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213D2F4h case   19:*/		return 0x8213D2F8;
		  /* 8213D2F8h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 8213D2F8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D2F8h case   20:*/		return 0x8213D2FC;
		  /* 8213D2FCh */ case   21:  		/* bc 12, CR6_EQ, 24 */
		/* 8213D2FCh case   21:*/		if ( regs.CR[6].eq ) { return 0x8213D314;  }
		/* 8213D2FCh case   21:*/		return 0x8213D300;
		  /* 8213D300h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 8213D300h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213D300h case   22:*/		return 0x8213D304;
		  /* 8213D304h */ case   23:  		/* cmpwi CR6, R10, 14 */
		/* 8213D304h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8213D304h case   23:*/		return 0x8213D308;
		  /* 8213D308h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 8213D308h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8213D314;  }
		/* 8213D308h case   24:*/		return 0x8213D30C;
		  /* 8213D30Ch */ case   25:  		/* addi R11, R11, 48 */
		/* 8213D30Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30);
		/* 8213D30Ch case   25:*/		return 0x8213D310;
		  /* 8213D310h */ case   26:  		/* stw R11, <#[R31 + 264]> */
		/* 8213D310h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000108) );
		/* 8213D310h case   26:*/		return 0x8213D314;
	}
	return 0x8213D314;
} // Block from 8213D2A8h-8213D314h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213D314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D314);
		  /* 8213D314h */ case    0:  		/* lwz R10, <#[R31 + 260]> */
		/* 8213D314h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213D314h case    0:*/		return 0x8213D318;
		  /* 8213D318h */ case    1:  		/* lwz R8, <#[R10]> */
		/* 8213D318h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8213D318h case    1:*/		return 0x8213D31C;
		  /* 8213D31Ch */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 8213D31Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8213D31Ch case    2:*/		return 0x8213D320;
		  /* 8213D320h */ case    3:  		/* bc 12, CR6_EQ, 932 */
		/* 8213D320h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213D6C4;  }
		/* 8213D320h case    3:*/		return 0x8213D324;
		  /* 8213D324h */ case    4:  		/* lwz R11, <#[R10 + 8]> */
		/* 8213D324h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8213D324h case    4:*/		return 0x8213D328;
		  /* 8213D328h */ case    5:  		/* lwz R9, <#[R31 + 20]> */
		/* 8213D328h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8213D328h case    5:*/		return 0x8213D32C;
		  /* 8213D32Ch */ case    6:  		/* lwz R11, <#[R11]> */
		/* 8213D32Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213D32Ch case    6:*/		return 0x8213D330;
		  /* 8213D330h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213D330h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213D330h case    7:*/		return 0x8213D334;
		  /* 8213D334h */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213D334h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D334h case    8:*/		return 0x8213D338;
		  /* 8213D338h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 8213D338h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8213D338h case    9:*/		return 0x8213D33C;
		  /* 8213D33Ch */ case   10:  		/* cmpwi CR6, R11, -1 */
		/* 8213D33Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213D33Ch case   10:*/		return 0x8213D340;
		  /* 8213D340h */ case   11:  		/* bc 4, CR6_EQ, 928 */
		/* 8213D340h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8213D6E0;  }
		/* 8213D340h case   11:*/		return 0x8213D344;
		  /* 8213D344h */ case   12:  		/* rlwinm R11, R8, 0, 0, 11 */
		/* 8213D344h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R8);
		/* 8213D344h case   12:*/		return 0x8213D348;
		  /* 8213D348h */ case   13:  		/* cmplw CR6, R11, R27 */
		/* 8213D348h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213D348h case   13:*/		return 0x8213D34C;
		  /* 8213D34Ch */ case   14:  		/* bc 12, CR6_GT, 584 */
		/* 8213D34Ch case   14:*/		if ( regs.CR[6].gt ) { return 0x8213D594;  }
		/* 8213D34Ch case   14:*/		return 0x8213D350;
		  /* 8213D350h */ case   15:  		/* bc 12, CR6_EQ, 568 */
		/* 8213D350h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213D588;  }
		/* 8213D350h case   15:*/		return 0x8213D354;
		  /* 8213D354h */ case   16:  		/* cmplw CR6, R11, R24 */
		/* 8213D354h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8213D354h case   16:*/		return 0x8213D358;
		  /* 8213D358h */ case   17:  		/* bc 12, CR6_GT, 452 */
		/* 8213D358h case   17:*/		if ( regs.CR[6].gt ) { return 0x8213D51C;  }
		/* 8213D358h case   17:*/		return 0x8213D35C;
		  /* 8213D35Ch */ case   18:  		/* bc 12, CR6_EQ, 188 */
		/* 8213D35Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8213D418;  }
		/* 8213D35Ch case   18:*/		return 0x8213D360;
		  /* 8213D360h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8213D360h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213D360h case   19:*/		return 0x8213D364;
		  /* 8213D364h */ case   20:  		/* bc 12, CR6_EQ, 864 */
		/* 8213D364h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213D6C4;  }
		/* 8213D364h case   20:*/		return 0x8213D368;
		  /* 8213D368h */ case   21:  		/* lis R10, 4096 */
		/* 8213D368h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8213D368h case   21:*/		return 0x8213D36C;
		  /* 8213D36Ch */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8213D36Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D36Ch case   22:*/		return 0x8213D370;
		  /* 8213D370h */ case   23:  		/* bc 12, CR6_EQ, 144 */
		/* 8213D370h case   23:*/		if ( regs.CR[6].eq ) { return 0x8213D400;  }
		/* 8213D370h case   23:*/		return 0x8213D374;
		  /* 8213D374h */ case   24:  		/* lis R10, 4112 */
		/* 8213D374h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 8213D374h case   24:*/		return 0x8213D378;
		  /* 8213D378h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 8213D378h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D378h case   25:*/		return 0x8213D37C;
		  /* 8213D37Ch */ case   26:  		/* bc 12, CR6_EQ, 120 */
		/* 8213D37Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x8213D3F4;  }
		/* 8213D37Ch case   26:*/		return 0x8213D380;
		  /* 8213D380h */ case   27:  		/* lis R10, 4352 */
		/* 8213D380h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 8213D380h case   27:*/		return 0x8213D384;
		  /* 8213D384h */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 8213D384h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D384h case   28:*/		return 0x8213D388;
		  /* 8213D388h */ case   29:  		/* bc 12, CR6_EQ, 96 */
		/* 8213D388h case   29:*/		if ( regs.CR[6].eq ) { return 0x8213D3E8;  }
		/* 8213D388h case   29:*/		return 0x8213D38C;
		  /* 8213D38Ch */ case   30:  		/* lis R10, 8256 */
		/* 8213D38Ch case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 8213D38Ch case   30:*/		return 0x8213D390;
		  /* 8213D390h */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 8213D390h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D390h case   31:*/		return 0x8213D394;
		  /* 8213D394h */ case   32:  		/* bc 12, CR6_EQ, 72 */
		/* 8213D394h case   32:*/		if ( regs.CR[6].eq ) { return 0x8213D3DC;  }
		/* 8213D394h case   32:*/		return 0x8213D398;
		  /* 8213D398h */ case   33:  		/* lis R10, 8272 */
		/* 8213D398h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x2050);
		/* 8213D398h case   33:*/		return 0x8213D39C;
		  /* 8213D39Ch */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 8213D39Ch case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D39Ch case   34:*/		return 0x8213D3A0;
		  /* 8213D3A0h */ case   35:  		/* bc 12, CR6_EQ, 48 */
		/* 8213D3A0h case   35:*/		if ( regs.CR[6].eq ) { return 0x8213D3D0;  }
		/* 8213D3A0h case   35:*/		return 0x8213D3A4;
		  /* 8213D3A4h */ case   36:  		/* lis R10, 12288 */
		/* 8213D3A4h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 8213D3A4h case   36:*/		return 0x8213D3A8;
		  /* 8213D3A8h */ case   37:  		/* cmplw CR6, R11, R10 */
		/* 8213D3A8h case   37:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D3A8h case   37:*/		return 0x8213D3AC;
		  /* 8213D3ACh */ case   38:  		/* bc 4, CR6_EQ, 856 */
		/* 8213D3ACh case   38:*/		if ( !regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D3ACh case   38:*/		return 0x8213D3B0;
		  /* 8213D3B0h */ case   39:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213D3B0h case   39:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213D3B0h case   39:*/		return 0x8213D3B4;
		  /* 8213D3B4h */ case   40:  		/* cmplwi CR6, R11, 260 */
		/* 8213D3B4h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213D3B4h case   40:*/		return 0x8213D3B8;
		  /* 8213D3B8h */ case   41:  		/* bc 4, CR6_EQ, 16 */
		/* 8213D3B8h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8213D3C8;  }
		/* 8213D3B8h case   41:*/		return 0x8213D3BC;
		  /* 8213D3BCh */ case   42:  		/* lwz R11, <#[R31]> */
		/* 8213D3BCh case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D3BCh case   42:*/		return 0x8213D3C0;
		  /* 8213D3C0h */ case   43:  		/* lwz R11, <#[R11 + 188]> */
		/* 8213D3C0h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000BC) );
		/* 8213D3C0h case   43:*/		return 0x8213D3C4;
		  /* 8213D3C4h */ case   44:  		/* b 68 */
		/* 8213D3C4h case   44:*/		return 0x8213D408;
		/* 8213D3C4h case   44:*/		return 0x8213D3C8;
	}
	return 0x8213D3C8;
} // Block from 8213D314h-8213D3C8h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3C8);
		  /* 8213D3C8h */ case    0:  		/* mr R3, R28 */
		/* 8213D3C8h case    0:*/		regs.R3 = regs.R28;
		/* 8213D3C8h case    0:*/		return 0x8213D3CC;
		  /* 8213D3CCh */ case    1:  		/* b 744 */
		/* 8213D3CCh case    1:*/		return 0x8213D6B4;
		/* 8213D3CCh case    1:*/		return 0x8213D3D0;
	}
	return 0x8213D3D0;
} // Block from 8213D3C8h-8213D3D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3D0);
		  /* 8213D3D0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D3D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D3D0h case    0:*/		return 0x8213D3D4;
		  /* 8213D3D4h */ case    1:  		/* lwz R11, <#[R11 + 176]> */
		/* 8213D3D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B0) );
		/* 8213D3D4h case    1:*/		return 0x8213D3D8;
	}
	return 0x8213D3D8;
} // Block from 8213D3D0h-8213D3D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3D8h
// Function '?Save@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3D8);
		  /* 8213D3D8h */ case    0:  		/* b 48 */
		/* 8213D3D8h case    0:*/		return 0x8213D408;
		/* 8213D3D8h case    0:*/		return 0x8213D3DC;
	}
	return 0x8213D3DC;
} // Block from 8213D3D8h-8213D3DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3DC);
		  /* 8213D3DCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D3DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D3DCh case    0:*/		return 0x8213D3E0;
		  /* 8213D3E0h */ case    1:  		/* lwz R11, <#[R11 + 172]> */
		/* 8213D3E0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000AC) );
		/* 8213D3E0h case    1:*/		return 0x8213D3E4;
		  /* 8213D3E4h */ case    2:  		/* b 36 */
		/* 8213D3E4h case    2:*/		return 0x8213D408;
		/* 8213D3E4h case    2:*/		return 0x8213D3E8;
	}
	return 0x8213D3E8;
} // Block from 8213D3DCh-8213D3E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3E8);
		  /* 8213D3E8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D3E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D3E8h case    0:*/		return 0x8213D3EC;
		  /* 8213D3ECh */ case    1:  		/* lwz R11, <#[R11 + 220]> */
		/* 8213D3ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000DC) );
		/* 8213D3ECh case    1:*/		return 0x8213D3F0;
		  /* 8213D3F0h */ case    2:  		/* b 24 */
		/* 8213D3F0h case    2:*/		return 0x8213D408;
		/* 8213D3F0h case    2:*/		return 0x8213D3F4;
	}
	return 0x8213D3F4;
} // Block from 8213D3E8h-8213D3F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D3F4);
		  /* 8213D3F4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D3F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D3F4h case    0:*/		return 0x8213D3F8;
		  /* 8213D3F8h */ case    1:  		/* lwz R11, <#[R11 + 128]> */
		/* 8213D3F8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000080) );
		/* 8213D3F8h case    1:*/		return 0x8213D3FC;
		  /* 8213D3FCh */ case    2:  		/* b 12 */
		/* 8213D3FCh case    2:*/		return 0x8213D408;
		/* 8213D3FCh case    2:*/		return 0x8213D400;
	}
	return 0x8213D400;
} // Block from 8213D3F4h-8213D400h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D400);
		  /* 8213D400h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D400h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D400h case    0:*/		return 0x8213D404;
		  /* 8213D404h */ case    1:  		/* lwz R11, <#[R11 + 124]> */
		/* 8213D404h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000007C) );
		/* 8213D404h case    1:*/		return 0x8213D408;
	}
	return 0x8213D408;
} // Block from 8213D400h-8213D408h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D408);
		  /* 8213D408h */ case    0:  		/* mr R3, R31 */
		/* 8213D408h case    0:*/		regs.R3 = regs.R31;
		/* 8213D408h case    0:*/		return 0x8213D40C;
		  /* 8213D40Ch */ case    1:  		/* mtspr CTR, R11 */
		/* 8213D40Ch case    1:*/		regs.CTR = regs.R11;
		/* 8213D40Ch case    1:*/		return 0x8213D410;
		  /* 8213D410h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 8213D410h case    2:*/		if ( 1 ) { regs.LR = 0x8213D414; return (uint32)regs.CTR; }
		/* 8213D410h case    2:*/		return 0x8213D414;
		  /* 8213D414h */ case    3:  		/* b 672 */
		/* 8213D414h case    3:*/		return 0x8213D6B4;
		/* 8213D414h case    3:*/		return 0x8213D418;
	}
	return 0x8213D418;
} // Block from 8213D408h-8213D418h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D418);
		  /* 8213D418h */ case    0:  		/* rlwinm R8, R8, 0, 12, 31 */
		/* 8213D418h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R8,regs.R8);
		/* 8213D418h case    0:*/		return 0x8213D41C;
		  /* 8213D41Ch */ case    1:  		/* cmplwi CR6, R8, 2 */
		/* 8213D41Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 8213D41Ch case    1:*/		return 0x8213D420;
		  /* 8213D420h */ case    2:  		/* bc 12, CR6_EQ, 740 */
		/* 8213D420h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D420h case    2:*/		return 0x8213D424;
		  /* 8213D424h */ case    3:  		/* cmplwi CR6, R8, 4 */
		/* 8213D424h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 8213D424h case    3:*/		return 0x8213D428;
		  /* 8213D428h */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 8213D428h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213D444;  }
		/* 8213D428h case    4:*/		return 0x8213D42C;
		  /* 8213D42Ch */ case    5:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213D42Ch case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213D42Ch case    5:*/		return 0x8213D430;
		  /* 8213D430h */ case    6:  		/* cmplwi CR6, R11, 257 */
		/* 8213D430h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000101);
		/* 8213D430h case    6:*/		return 0x8213D434;
		  /* 8213D434h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8213D434h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213D444;  }
		/* 8213D434h case    7:*/		return 0x8213D438;
		  /* 8213D438h */ case    8:  		/* mr R3, R31 */
		/* 8213D438h case    8:*/		regs.R3 = regs.R31;
		/* 8213D438h case    8:*/		return 0x8213D43C;
		  /* 8213D43Ch */ case    9:  		/* bl -14956 */
		/* 8213D43Ch case    9:*/		regs.LR = 0x8213D440; return 0x821399D0;
		/* 8213D43Ch case    9:*/		return 0x8213D440;
		  /* 8213D440h */ case   10:  		/* b 628 */
		/* 8213D440h case   10:*/		return 0x8213D6B4;
		/* 8213D440h case   10:*/		return 0x8213D444;
	}
	return 0x8213D444;
} // Block from 8213D418h-8213D444h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213D444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D444);
		  /* 8213D444h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213D444h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213D444h case    0:*/		return 0x8213D448;
		  /* 8213D448h */ case    1:  		/* cmplwi CR6, R11, 258 */
		/* 8213D448h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000102);
		/* 8213D448h case    1:*/		return 0x8213D44C;
		  /* 8213D44Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8213D44Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213D458;  }
		/* 8213D44Ch case    2:*/		return 0x8213D450;
		  /* 8213D450h */ case    3:  		/* cmplwi CR6, R11, 259 */
		/* 8213D450h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000103);
		/* 8213D450h case    3:*/		return 0x8213D454;
		  /* 8213D454h */ case    4:  		/* bc 4, CR6_EQ, 136 */
		/* 8213D454h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213D4DC;  }
		/* 8213D454h case    4:*/		return 0x8213D458;
	}
	return 0x8213D458;
} // Block from 8213D444h-8213D458h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213D458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D458);
		  /* 8213D458h */ case    0:  		/* cmplwi CR6, R8, 4 */
		/* 8213D458h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 8213D458h case    0:*/		return 0x8213D45C;
		  /* 8213D45Ch */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 8213D45Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213D4DC;  }
		/* 8213D45Ch case    1:*/		return 0x8213D460;
		  /* 8213D460h */ case    2:  		/* lwz R11, <#[R10 + 16]> */
		/* 8213D460h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8213D460h case    2:*/		return 0x8213D464;
		  /* 8213D464h */ case    3:  		/* lwz R10, <#[R10 + 8]> */
		/* 8213D464h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8213D464h case    3:*/		return 0x8213D468;
		  /* 8213D468h */ case    4:  		/* lwz R7, <#[R31 + 132]> */
		/* 8213D468h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000084) );
		/* 8213D468h case    4:*/		return 0x8213D46C;
		  /* 8213D46Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8213D46Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213D46Ch case    5:*/		return 0x8213D470;
		  /* 8213D470h */ case    6:  		/* lwz R8, <#[R10]> */
		/* 8213D470h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8213D470h case    6:*/		return 0x8213D474;
		  /* 8213D474h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213D474h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213D474h case    7:*/		return 0x8213D478;
		  /* 8213D478h */ case    8:  		/* lwz R10, <#[R10 + 16]> */
		/* 8213D478h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 8213D478h case    8:*/		return 0x8213D47C;
		  /* 8213D47Ch */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213D47Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213D47Ch case    9:*/		return 0x8213D480;
		  /* 8213D480h */ case   10:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 8213D480h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 8213D480h case   10:*/		return 0x8213D484;
		  /* 8213D484h */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213D484h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D484h case   11:*/		return 0x8213D488;
		  /* 8213D488h */ case   12:  		/* lwzx R10, <#[R8 + R9]> */
		/* 8213D488h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 8213D488h case   12:*/		return 0x8213D48C;
		  /* 8213D48Ch */ case   13:  		/* lwzx R8, <#[R6 + R9]> */
		/* 8213D48Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 8213D48Ch case   13:*/		return 0x8213D490;
		  /* 8213D490h */ case   14:  		/* lwz R9, <#[R11 + 4]> */
		/* 8213D490h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8213D490h case   14:*/		return 0x8213D494;
		  /* 8213D494h */ case   15:  		/* cmplw CR6, R9, R7 */
		/* 8213D494h case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8213D494h case   15:*/		return 0x8213D498;
		  /* 8213D498h */ case   16:  		/* lwz R7, <#[R10 + 4]> */
		/* 8213D498h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8213D498h case   16:*/		return 0x8213D49C;
		  /* 8213D49Ch */ case   17:  		/* bc 4, CR6_EQ, 76 */
		/* 8213D49Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213D4E8;  }
		/* 8213D49Ch case   17:*/		return 0x8213D4A0;
		  /* 8213D4A0h */ case   18:  		/* lwz R9, <#[R31 + 136]> */
		/* 8213D4A0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000088) );
		/* 8213D4A0h case   18:*/		return 0x8213D4A4;
		  /* 8213D4A4h */ case   19:  		/* lbz R11, <#[R11 + 111]> */
		/* 8213D4A4h case   19:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006F) );
		/* 8213D4A4h case   19:*/		return 0x8213D4A8;
		  /* 8213D4A8h */ case   20:  		/* cmplw CR6, R7, R9 */
		/* 8213D4A8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 8213D4A8h case   20:*/		return 0x8213D4AC;
		  /* 8213D4ACh */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 8213D4ACh case   21:*/		if ( !regs.CR[6].eq ) { return 0x8213D4BC;  }
		/* 8213D4ACh case   21:*/		return 0x8213D4B0;
		  /* 8213D4B0h */ case   22:  		/* lwz R10, <#[R10 + 12]> */
		/* 8213D4B0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8213D4B0h case   22:*/		return 0x8213D4B4;
		  /* 8213D4B4h */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 8213D4B4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213D4B4h case   23:*/		return 0x8213D4B8;
		  /* 8213D4B8h */ case   24:  		/* bc 12, CR6_EQ, 28 */
		/* 8213D4B8h case   24:*/		if ( regs.CR[6].eq ) { return 0x8213D4D4;  }
		/* 8213D4B8h case   24:*/		return 0x8213D4BC;
	}
	return 0x8213D4BC;
} // Block from 8213D458h-8213D4BCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8213D4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D4BC);
		  /* 8213D4BCh */ case    0:  		/* lwz R10, <#[R8 + 4]> */
		/* 8213D4BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 8213D4BCh case    0:*/		return 0x8213D4C0;
		  /* 8213D4C0h */ case    1:  		/* cmplw CR6, R10, R9 */
		/* 8213D4C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213D4C0h case    1:*/		return 0x8213D4C4;
		  /* 8213D4C4h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 8213D4C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213D4DC;  }
		/* 8213D4C4h case    2:*/		return 0x8213D4C8;
		  /* 8213D4C8h */ case    3:  		/* lwz R10, <#[R8 + 12]> */
		/* 8213D4C8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 8213D4C8h case    3:*/		return 0x8213D4CC;
		  /* 8213D4CCh */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8213D4CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213D4CCh case    4:*/		return 0x8213D4D0;
		  /* 8213D4D0h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8213D4D0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213D4DC;  }
		/* 8213D4D0h case    5:*/		return 0x8213D4D4;
	}
	return 0x8213D4D4;
} // Block from 8213D4BCh-8213D4D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213D4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D4D4);
		  /* 8213D4D4h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 8213D4D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213D4D4h case    0:*/		return 0x8213D4D8;
		  /* 8213D4D8h */ case    1:  		/* bc 12, CR6_EQ, -160 */
		/* 8213D4D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213D438;  }
		/* 8213D4D8h case    1:*/		return 0x8213D4DC;
	}
	return 0x8213D4DC;
} // Block from 8213D4D4h-8213D4DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D4DC);
		  /* 8213D4DCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D4DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D4DCh case    0:*/		return 0x8213D4E0;
		  /* 8213D4E0h */ case    1:  		/* lwz R11, <#[R11 + 180]> */
		/* 8213D4E0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B4) );
		/* 8213D4E0h case    1:*/		return 0x8213D4E4;
		  /* 8213D4E4h */ case    2:  		/* b -220 */
		/* 8213D4E4h case    2:*/		return 0x8213D408;
		/* 8213D4E4h case    2:*/		return 0x8213D4E8;
	}
	return 0x8213D4E8;
} // Block from 8213D4DCh-8213D4E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D4E8);
		  /* 8213D4E8h */ case    0:  		/* cmplw CR6, R7, R9 */
		/* 8213D4E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 8213D4E8h case    0:*/		return 0x8213D4EC;
		  /* 8213D4ECh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8213D4ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213D500;  }
		/* 8213D4ECh case    1:*/		return 0x8213D4F0;
		  /* 8213D4F0h */ case    2:  		/* lwz R10, <#[R10 + 12]> */
		/* 8213D4F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8213D4F0h case    2:*/		return 0x8213D4F4;
		  /* 8213D4F4h */ case    3:  		/* lwz R7, <#[R11 + 12]> */
		/* 8213D4F4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213D4F4h case    3:*/		return 0x8213D4F8;
		  /* 8213D4F8h */ case    4:  		/* cmplw CR6, R10, R7 */
		/* 8213D4F8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8213D4F8h case    4:*/		return 0x8213D4FC;
		  /* 8213D4FCh */ case    5:  		/* bc 12, CR6_EQ, -196 */
		/* 8213D4FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8213D438;  }
		/* 8213D4FCh case    5:*/		return 0x8213D500;
	}
	return 0x8213D500;
} // Block from 8213D4E8h-8213D500h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213D500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D500);
		  /* 8213D500h */ case    0:  		/* lwz R10, <#[R8 + 4]> */
		/* 8213D500h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 8213D500h case    0:*/		return 0x8213D504;
		  /* 8213D504h */ case    1:  		/* cmplw CR6, R10, R9 */
		/* 8213D504h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213D504h case    1:*/		return 0x8213D508;
		  /* 8213D508h */ case    2:  		/* bc 4, CR6_EQ, -44 */
		/* 8213D508h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213D4DC;  }
		/* 8213D508h case    2:*/		return 0x8213D50C;
		  /* 8213D50Ch */ case    3:  		/* lwz R10, <#[R8 + 12]> */
		/* 8213D50Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 8213D50Ch case    3:*/		return 0x8213D510;
		  /* 8213D510h */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 8213D510h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213D510h case    4:*/		return 0x8213D514;
		  /* 8213D514h */ case    5:  		/* cmplw CR6, R10, R11 */
		/* 8213D514h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213D514h case    5:*/		return 0x8213D518;
		  /* 8213D518h */ case    6:  		/* b -64 */
		/* 8213D518h case    6:*/		return 0x8213D4D8;
		/* 8213D518h case    6:*/		return 0x8213D51C;
	}
	return 0x8213D51C;
} // Block from 8213D500h-8213D51Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213D51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D51C);
		  /* 8213D51Ch */ case    0:  		/* lis R10, 24576 */
		/* 8213D51Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 8213D51Ch case    0:*/		return 0x8213D520;
		  /* 8213D520h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8213D520h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D520h case    1:*/		return 0x8213D524;
		  /* 8213D524h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8213D524h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213D57C;  }
		/* 8213D524h case    2:*/		return 0x8213D528;
		  /* 8213D528h */ case    3:  		/* lis R10, 24656 */
		/* 8213D528h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 8213D528h case    3:*/		return 0x8213D52C;
		  /* 8213D52Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8213D52Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D52Ch case    4:*/		return 0x8213D530;
		  /* 8213D530h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 8213D530h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213D57C;  }
		/* 8213D530h case    5:*/		return 0x8213D534;
		  /* 8213D534h */ case    6:  		/* lis R10, 24688 */
		/* 8213D534h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 8213D534h case    6:*/		return 0x8213D538;
	}
	return 0x8213D538;
} // Block from 8213D51Ch-8213D538h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213D538h
// Function '?GreedyPullUp@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D538);
		  /* 8213D538h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 8213D538h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D538h case    0:*/		return 0x8213D53C;
		  /* 8213D53Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8213D53Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8213D570;  }
		/* 8213D53Ch case    1:*/		return 0x8213D540;
		  /* 8213D540h */ case    2:  		/* lis R10, 24736 */
		/* 8213D540h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8213D540h case    2:*/		return 0x8213D544;
		  /* 8213D544h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8213D544h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D544h case    3:*/		return 0x8213D548;
		  /* 8213D548h */ case    4:  		/* bc 12, CR6_EQ, 52 */
		/* 8213D548h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213D57C;  }
		/* 8213D548h case    4:*/		return 0x8213D54C;
		  /* 8213D54Ch */ case    5:  		/* lis R10, 24816 */
		/* 8213D54Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8213D54Ch case    5:*/		return 0x8213D550;
		  /* 8213D550h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8213D550h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D550h case    6:*/		return 0x8213D554;
		  /* 8213D554h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8213D554h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213D57C;  }
		/* 8213D554h case    7:*/		return 0x8213D558;
		  /* 8213D558h */ case    8:  		/* lis R10, 28688 */
		/* 8213D558h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x7010);
		/* 8213D558h case    8:*/		return 0x8213D55C;
		  /* 8213D55Ch */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8213D55Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D55Ch case    9:*/		return 0x8213D560;
		  /* 8213D560h */ case   10:  		/* bc 4, CR6_EQ, 420 */
		/* 8213D560h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D560h case   10:*/		return 0x8213D564;
		  /* 8213D564h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 8213D564h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D564h case   11:*/		return 0x8213D568;
		  /* 8213D568h */ case   12:  		/* lwz R11, <#[R11 + 200]> */
		/* 8213D568h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C8) );
		/* 8213D568h case   12:*/		return 0x8213D56C;
		  /* 8213D56Ch */ case   13:  		/* b -356 */
		/* 8213D56Ch case   13:*/		return 0x8213D408;
		/* 8213D56Ch case   13:*/		return 0x8213D570;
	}
	return 0x8213D570;
} // Block from 8213D538h-8213D570h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213D570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D570);
		  /* 8213D570h */ case    0:  		/* mr R3, R31 */
		/* 8213D570h case    0:*/		regs.R3 = regs.R31;
		/* 8213D570h case    0:*/		return 0x8213D574;
		  /* 8213D574h */ case    1:  		/* bl -13900 */
		/* 8213D574h case    1:*/		regs.LR = 0x8213D578; return 0x82139F28;
		/* 8213D574h case    1:*/		return 0x8213D578;
		  /* 8213D578h */ case    2:  		/* b 316 */
		/* 8213D578h case    2:*/		return 0x8213D6B4;
		/* 8213D578h case    2:*/		return 0x8213D57C;
	}
	return 0x8213D57C;
} // Block from 8213D570h-8213D57Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D57C);
		  /* 8213D57Ch */ case    0:  		/* mr R3, R31 */
		/* 8213D57Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213D57Ch case    0:*/		return 0x8213D580;
		  /* 8213D580h */ case    1:  		/* bl -13552 */
		/* 8213D580h case    1:*/		regs.LR = 0x8213D584; return 0x8213A090;
		/* 8213D580h case    1:*/		return 0x8213D584;
		  /* 8213D584h */ case    2:  		/* b 304 */
		/* 8213D584h case    2:*/		return 0x8213D6B4;
		/* 8213D584h case    2:*/		return 0x8213D588;
	}
	return 0x8213D588;
} // Block from 8213D57Ch-8213D588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D588);
		  /* 8213D588h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D588h case    0:*/		return 0x8213D58C;
		  /* 8213D58Ch */ case    1:  		/* lwz R11, <#[R11 + 208]> */
		/* 8213D58Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D0) );
		/* 8213D58Ch case    1:*/		return 0x8213D590;
		  /* 8213D590h */ case    2:  		/* b -392 */
		/* 8213D590h case    2:*/		return 0x8213D408;
		/* 8213D590h case    2:*/		return 0x8213D594;
	}
	return 0x8213D594;
} // Block from 8213D588h-8213D594h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D594);
		  /* 8213D594h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 8213D594h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8213D594h case    0:*/		return 0x8213D598;
		  /* 8213D598h */ case    1:  		/* bc 12, CR6_GT, 156 */
		/* 8213D598h case    1:*/		if ( regs.CR[6].gt ) { return 0x8213D634;  }
		/* 8213D598h case    1:*/		return 0x8213D59C;
		  /* 8213D59Ch */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 8213D59Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213D62C;  }
		/* 8213D59Ch case    2:*/		return 0x8213D5A0;
		  /* 8213D5A0h */ case    3:  		/* lis R10, 28736 */
		/* 8213D5A0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7040);
		/* 8213D5A0h case    3:*/		return 0x8213D5A4;
		  /* 8213D5A4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8213D5A4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5A4h case    4:*/		return 0x8213D5A8;
		  /* 8213D5A8h */ case    5:  		/* bc 12, CR6_EQ, -32 */
		/* 8213D5A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213D588;  }
		/* 8213D5A8h case    5:*/		return 0x8213D5AC;
		  /* 8213D5ACh */ case    6:  		/* lis R10, 28912 */
		/* 8213D5ACh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x70F0);
		/* 8213D5ACh case    6:*/		return 0x8213D5B0;
		  /* 8213D5B0h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8213D5B0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5B0h case    7:*/		return 0x8213D5B4;
		  /* 8213D5B4h */ case    8:  		/* bc 12, CR6_EQ, 108 */
		/* 8213D5B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213D620;  }
		/* 8213D5B4h case    8:*/		return 0x8213D5B8;
		  /* 8213D5B8h */ case    9:  		/* lis R10, 29200 */
		/* 8213D5B8h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7210);
		/* 8213D5B8h case    9:*/		return 0x8213D5BC;
		  /* 8213D5BCh */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8213D5BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5BCh case   10:*/		return 0x8213D5C0;
		  /* 8213D5C0h */ case   11:  		/* bc 12, CR6_EQ, 84 */
		/* 8213D5C0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213D614;  }
		/* 8213D5C0h case   11:*/		return 0x8213D5C4;
		  /* 8213D5C4h */ case   12:  		/* lis R10, 29216 */
		/* 8213D5C4h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x7220);
		/* 8213D5C4h case   12:*/		return 0x8213D5C8;
		  /* 8213D5C8h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8213D5C8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5C8h case   13:*/		return 0x8213D5CC;
		  /* 8213D5CCh */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 8213D5CCh case   14:*/		if ( regs.CR[6].eq ) { return 0x8213D60C;  }
		/* 8213D5CCh case   14:*/		return 0x8213D5D0;
		  /* 8213D5D0h */ case   15:  		/* lis R10, 29232 */
		/* 8213D5D0h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7230);
		/* 8213D5D0h case   15:*/		return 0x8213D5D4;
		  /* 8213D5D4h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8213D5D4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5D4h case   16:*/		return 0x8213D5D8;
		  /* 8213D5D8h */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 8213D5D8h case   17:*/		if ( regs.CR[6].eq ) { return 0x8213D604;  }
		/* 8213D5D8h case   17:*/		return 0x8213D5DC;
		  /* 8213D5DCh */ case   18:  		/* lis R10, 29248 */
		/* 8213D5DCh case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x7240);
		/* 8213D5DCh case   18:*/		return 0x8213D5E0;
		  /* 8213D5E0h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8213D5E0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5E0h case   19:*/		return 0x8213D5E4;
		  /* 8213D5E4h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 8213D5E4h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213D5FC;  }
		/* 8213D5E4h case   20:*/		return 0x8213D5E8;
		  /* 8213D5E8h */ case   21:  		/* lis R10, 29264 */
		/* 8213D5E8h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x7250);
		/* 8213D5E8h case   21:*/		return 0x8213D5EC;
		  /* 8213D5ECh */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8213D5ECh case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D5ECh case   22:*/		return 0x8213D5F0;
		  /* 8213D5F0h */ case   23:  		/* bc 4, CR6_EQ, 276 */
		/* 8213D5F0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D5F0h case   23:*/		return 0x8213D5F4;
		  /* 8213D5F4h */ case   24:  		/* li R4, 74 */
		/* 8213D5F4h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x4A);
		/* 8213D5F4h case   24:*/		return 0x8213D5F8;
		  /* 8213D5F8h */ case   25:  		/* b 180 */
		/* 8213D5F8h case   25:*/		return 0x8213D6AC;
		/* 8213D5F8h case   25:*/		return 0x8213D5FC;
	}
	return 0x8213D5FC;
} // Block from 8213D594h-8213D5FCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8213D5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D5FC);
		  /* 8213D5FCh */ case    0:  		/* li R4, 73 */
		/* 8213D5FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x49);
		/* 8213D5FCh case    0:*/		return 0x8213D600;
		  /* 8213D600h */ case    1:  		/* b 172 */
		/* 8213D600h case    1:*/		return 0x8213D6AC;
		/* 8213D600h case    1:*/		return 0x8213D604;
	}
	return 0x8213D604;
} // Block from 8213D5FCh-8213D604h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D604);
		  /* 8213D604h */ case    0:  		/* li R4, 72 */
		/* 8213D604h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x48);
		/* 8213D604h case    0:*/		return 0x8213D608;
		  /* 8213D608h */ case    1:  		/* b 164 */
		/* 8213D608h case    1:*/		return 0x8213D6AC;
		/* 8213D608h case    1:*/		return 0x8213D60C;
	}
	return 0x8213D60C;
} // Block from 8213D604h-8213D60Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D60Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D60C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D60C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D60C);
		  /* 8213D60Ch */ case    0:  		/* li R4, 71 */
		/* 8213D60Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x47);
		/* 8213D60Ch case    0:*/		return 0x8213D610;
		  /* 8213D610h */ case    1:  		/* b 156 */
		/* 8213D610h case    1:*/		return 0x8213D6AC;
		/* 8213D610h case    1:*/		return 0x8213D614;
	}
	return 0x8213D614;
} // Block from 8213D60Ch-8213D614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D614);
		  /* 8213D614h */ case    0:  		/* mr R3, R31 */
		/* 8213D614h case    0:*/		regs.R3 = regs.R31;
		/* 8213D614h case    0:*/		return 0x8213D618;
		  /* 8213D618h */ case    1:  		/* bl -13240 */
		/* 8213D618h case    1:*/		regs.LR = 0x8213D61C; return 0x8213A260;
		/* 8213D618h case    1:*/		return 0x8213D61C;
		  /* 8213D61Ch */ case    2:  		/* b 152 */
		/* 8213D61Ch case    2:*/		return 0x8213D6B4;
		/* 8213D61Ch case    2:*/		return 0x8213D620;
	}
	return 0x8213D620;
} // Block from 8213D614h-8213D620h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D620);
		  /* 8213D620h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8213D620h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213D620h case    0:*/		return 0x8213D624;
		  /* 8213D624h */ case    1:  		/* lwz R11, <#[R11 + 192]> */
		/* 8213D624h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C0) );
		/* 8213D624h case    1:*/		return 0x8213D628;
		  /* 8213D628h */ case    2:  		/* b -544 */
		/* 8213D628h case    2:*/		return 0x8213D408;
		/* 8213D628h case    2:*/		return 0x8213D62C;
	}
	return 0x8213D62C;
} // Block from 8213D620h-8213D62Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D62C);
		  /* 8213D62Ch */ case    0:  		/* li R4, 82 */
		/* 8213D62Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x52);
		/* 8213D62Ch case    0:*/		return 0x8213D630;
		  /* 8213D630h */ case    1:  		/* b 124 */
		/* 8213D630h case    1:*/		return 0x8213D6AC;
		/* 8213D630h case    1:*/		return 0x8213D634;
	}
	return 0x8213D634;
} // Block from 8213D62Ch-8213D634h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D634);
		  /* 8213D634h */ case    0:  		/* lis R10, 29296 */
		/* 8213D634h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7270);
		/* 8213D634h case    0:*/		return 0x8213D638;
		  /* 8213D638h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8213D638h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D638h case    1:*/		return 0x8213D63C;
		  /* 8213D63Ch */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 8213D63Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213D6A8;  }
		/* 8213D63Ch case    2:*/		return 0x8213D640;
		  /* 8213D640h */ case    3:  		/* lis R10, 29312 */
		/* 8213D640h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7280);
		/* 8213D640h case    3:*/		return 0x8213D644;
		  /* 8213D644h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8213D644h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D644h case    4:*/		return 0x8213D648;
		  /* 8213D648h */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 8213D648h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213D6A0;  }
		/* 8213D648h case    5:*/		return 0x8213D64C;
		  /* 8213D64Ch */ case    6:  		/* lis R10, 29328 */
		/* 8213D64Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7290);
		/* 8213D64Ch case    6:*/		return 0x8213D650;
		  /* 8213D650h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8213D650h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D650h case    7:*/		return 0x8213D654;
		  /* 8213D654h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 8213D654h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213D698;  }
		/* 8213D654h case    8:*/		return 0x8213D658;
		  /* 8213D658h */ case    9:  		/* lis R10, 29344 */
		/* 8213D658h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x72A0);
		/* 8213D658h case    9:*/		return 0x8213D65C;
		  /* 8213D65Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8213D65Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D65Ch case   10:*/		return 0x8213D660;
		  /* 8213D660h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 8213D660h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213D690;  }
		/* 8213D660h case   11:*/		return 0x8213D664;
		  /* 8213D664h */ case   12:  		/* lis R10, 29360 */
		/* 8213D664h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x72B0);
		/* 8213D664h case   12:*/		return 0x8213D668;
		  /* 8213D668h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8213D668h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D668h case   13:*/		return 0x8213D66C;
		  /* 8213D66Ch */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 8213D66Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8213D688;  }
		/* 8213D66Ch case   14:*/		return 0x8213D670;
		  /* 8213D670h */ case   15:  		/* lis R10, 29408 */
		/* 8213D670h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x72E0);
		/* 8213D670h case   15:*/		return 0x8213D674;
		  /* 8213D674h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8213D674h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213D674h case   16:*/		return 0x8213D678;
		  /* 8213D678h */ case   17:  		/* bc 4, CR6_EQ, 140 */
		/* 8213D678h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D678h case   17:*/		return 0x8213D67C;
		  /* 8213D67Ch */ case   18:  		/* mr R3, R31 */
		/* 8213D67Ch case   18:*/		regs.R3 = regs.R31;
		/* 8213D67Ch case   18:*/		return 0x8213D680;
		  /* 8213D680h */ case   19:  		/* bl -14528 */
		/* 8213D680h case   19:*/		regs.LR = 0x8213D684; return 0x82139DC0;
		/* 8213D680h case   19:*/		return 0x8213D684;
		  /* 8213D684h */ case   20:  		/* b 48 */
		/* 8213D684h case   20:*/		return 0x8213D6B4;
		/* 8213D684h case   20:*/		return 0x8213D688;
	}
	return 0x8213D688;
} // Block from 8213D634h-8213D688h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8213D688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D688);
		  /* 8213D688h */ case    0:  		/* li R4, 83 */
		/* 8213D688h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x53);
		/* 8213D688h case    0:*/		return 0x8213D68C;
		  /* 8213D68Ch */ case    1:  		/* b 32 */
		/* 8213D68Ch case    1:*/		return 0x8213D6AC;
		/* 8213D68Ch case    1:*/		return 0x8213D690;
	}
	return 0x8213D690;
} // Block from 8213D688h-8213D690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D690);
		  /* 8213D690h */ case    0:  		/* li R4, 76 */
		/* 8213D690h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4C);
		/* 8213D690h case    0:*/		return 0x8213D694;
		  /* 8213D694h */ case    1:  		/* b 24 */
		/* 8213D694h case    1:*/		return 0x8213D6AC;
		/* 8213D694h case    1:*/		return 0x8213D698;
	}
	return 0x8213D698;
} // Block from 8213D690h-8213D698h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D698);
		  /* 8213D698h */ case    0:  		/* li R4, 77 */
		/* 8213D698h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4D);
		/* 8213D698h case    0:*/		return 0x8213D69C;
		  /* 8213D69Ch */ case    1:  		/* b 16 */
		/* 8213D69Ch case    1:*/		return 0x8213D6AC;
		/* 8213D69Ch case    1:*/		return 0x8213D6A0;
	}
	return 0x8213D6A0;
} // Block from 8213D698h-8213D6A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6A0);
		  /* 8213D6A0h */ case    0:  		/* li R4, 70 */
		/* 8213D6A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x46);
		/* 8213D6A0h case    0:*/		return 0x8213D6A4;
		  /* 8213D6A4h */ case    1:  		/* b 8 */
		/* 8213D6A4h case    1:*/		return 0x8213D6AC;
		/* 8213D6A4h case    1:*/		return 0x8213D6A8;
	}
	return 0x8213D6A8;
} // Block from 8213D6A0h-8213D6A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6A8);
		  /* 8213D6A8h */ case    0:  		/* li R4, 69 */
		/* 8213D6A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x45);
		/* 8213D6A8h case    0:*/		return 0x8213D6AC;
	}
	return 0x8213D6AC;
} // Block from 8213D6A8h-8213D6ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6AC);
		  /* 8213D6ACh */ case    0:  		/* mr R3, R31 */
		/* 8213D6ACh case    0:*/		regs.R3 = regs.R31;
		/* 8213D6ACh case    0:*/		return 0x8213D6B0;
		  /* 8213D6B0h */ case    1:  		/* bl -15104 */
		/* 8213D6B0h case    1:*/		regs.LR = 0x8213D6B4; return 0x82139BB0;
		/* 8213D6B0h case    1:*/		return 0x8213D6B4;
	}
	return 0x8213D6B4;
} // Block from 8213D6ACh-8213D6B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6B4);
		  /* 8213D6B4h */ case    0:  		/* cmpw CR6, R3, R28 */
		/* 8213D6B4h case    0:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R28);
		/* 8213D6B4h case    0:*/		return 0x8213D6B8;
		  /* 8213D6B8h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 8213D6B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213D704;  }
		/* 8213D6B8h case    1:*/		return 0x8213D6BC;
		  /* 8213D6BCh */ case    2:  		/* cmpwi CR6, R3, 0 */
		/* 8213D6BCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213D6BCh case    2:*/		return 0x8213D6C0;
		  /* 8213D6C0h */ case    3:  		/* bc 12, CR6_LT, 24 */
		/* 8213D6C0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213D6D8;  }
		/* 8213D6C0h case    3:*/		return 0x8213D6C4;
	}
	return 0x8213D6C4;
} // Block from 8213D6B4h-8213D6C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6C4);
		  /* 8213D6C4h */ case    0:  		/* addi R30, R30, 1 */
		/* 8213D6C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213D6C4h case    0:*/		return 0x8213D6C8;
		  /* 8213D6C8h */ case    1:  		/* addi R29, R29, 4 */
		/* 8213D6C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213D6C8h case    1:*/		return 0x8213D6CC;
		  /* 8213D6CCh */ case    2:  		/* cmplw CR6, R30, R26 */
		/* 8213D6CCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8213D6CCh case    2:*/		return 0x8213D6D0;
		  /* 8213D6D0h */ case    3:  		/* bc 12, CR6_LT, -1008 */
		/* 8213D6D0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213D2E0;  }
		/* 8213D6D0h case    3:*/		return 0x8213D6D4;
	}
	return 0x8213D6D4;
} // Block from 8213D6C4h-8213D6D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6D4);
		  /* 8213D6D4h */ case    0:  		/* li R3, 0 */
		/* 8213D6D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213D6D4h case    0:*/		return 0x8213D6D8;
	}
	return 0x8213D6D8;
} // Block from 8213D6D4h-8213D6D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6D8);
		  /* 8213D6D8h */ case    0:  		/* addi R1, R1, 160 */
		/* 8213D6D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8213D6D8h case    0:*/		return 0x8213D6DC;
		  /* 8213D6DCh */ case    1:  		/* b -705604 */
		/* 8213D6DCh case    1:*/		return 0x82091298;
		/* 8213D6DCh case    1:*/		return 0x8213D6E0;
	}
	return 0x8213D6E0;
} // Block from 8213D6D8h-8213D6E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213D6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D6E0);
		  /* 8213D6E0h */ case    0:  		/* lis R11, -32253 */
		/* 8213D6E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213D6E0h case    0:*/		return 0x8213D6E4;
		  /* 8213D6E4h */ case    1:  		/* lwz R4, <#[R10 + 60]> */
		/* 8213D6E4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 8213D6E4h case    1:*/		return 0x8213D6E8;
		  /* 8213D6E8h */ case    2:  		/* li R5, 4511 */
		/* 8213D6E8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x119F);
		/* 8213D6E8h case    2:*/		return 0x8213D6EC;
		  /* 8213D6ECh */ case    3:  		/* addi R6, R11, 15980 */
		/* 8213D6ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3E6C);
		/* 8213D6ECh case    3:*/		return 0x8213D6F0;
		  /* 8213D6F0h */ case    4:  		/* mr R3, R31 */
		/* 8213D6F0h case    4:*/		regs.R3 = regs.R31;
		/* 8213D6F0h case    4:*/		return 0x8213D6F4;
		  /* 8213D6F4h */ case    5:  		/* bl -192452 */
		/* 8213D6F4h case    5:*/		regs.LR = 0x8213D6F8; return 0x8210E730;
		/* 8213D6F4h case    5:*/		return 0x8213D6F8;
		  /* 8213D6F8h */ case    6:  		/* lis R3, -32768 */
		/* 8213D6F8h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213D6F8h case    6:*/		return 0x8213D6FC;
		  /* 8213D6FCh */ case    7:  		/* ori R3, R3, 16389 */
		/* 8213D6FCh case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213D6FCh case    7:*/		return 0x8213D700;
		  /* 8213D700h */ case    8:  		/* b -40 */
		/* 8213D700h case    8:*/		return 0x8213D6D8;
		/* 8213D700h case    8:*/		return 0x8213D704;
	}
	return 0x8213D704;
} // Block from 8213D6E0h-8213D704h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213D704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D704);
		  /* 8213D704h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 8213D704h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213D704h case    0:*/		return 0x8213D708;
		  /* 8213D708h */ case    1:  		/* lis R10, -32254 */
		/* 8213D708h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8213D708h case    1:*/		return 0x8213D70C;
		  /* 8213D70Ch */ case    2:  		/* li R5, 4532 */
		/* 8213D70Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 8213D70Ch case    2:*/		return 0x8213D710;
		  /* 8213D710h */ case    3:  		/* addi R6, R10, -31928 */
		/* 8213D710h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8348);
		/* 8213D710h case    3:*/		return 0x8213D714;
		  /* 8213D714h */ case    4:  		/* mr R3, R31 */
		/* 8213D714h case    4:*/		regs.R3 = regs.R31;
		/* 8213D714h case    4:*/		return 0x8213D718;
		  /* 8213D718h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 8213D718h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213D718h case    5:*/		return 0x8213D71C;
		  /* 8213D71Ch */ case    6:  		/* bl -192492 */
		/* 8213D71Ch case    6:*/		regs.LR = 0x8213D720; return 0x8210E730;
		/* 8213D71Ch case    6:*/		return 0x8213D720;
		  /* 8213D720h */ case    7:  		/* mr R3, R28 */
		/* 8213D720h case    7:*/		regs.R3 = regs.R28;
		/* 8213D720h case    7:*/		return 0x8213D724;
		  /* 8213D724h */ case    8:  		/* b -76 */
		/* 8213D724h case    8:*/		return 0x8213D6D8;
		/* 8213D724h case    8:*/		return 0x8213D728;
	}
	return 0x8213D728;
} // Block from 8213D704h-8213D728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213D728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D728);
		  /* 8213D728h */ case    0:  		/* mfspr R12, LR */
		/* 8213D728h case    0:*/		regs.R12 = regs.LR;
		/* 8213D728h case    0:*/		return 0x8213D72C;
		  /* 8213D72Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213D72Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213D72Ch case    1:*/		return 0x8213D730;
		  /* 8213D730h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8213D730h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213D730h case    2:*/		return 0x8213D734;
		  /* 8213D734h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8213D734h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8213D734h case    3:*/		return 0x8213D738;
		  /* 8213D738h */ case    4:  		/* lwz R4, <#[R3 + 560]> */
		/* 8213D738h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000230) );
		/* 8213D738h case    4:*/		return 0x8213D73C;
		  /* 8213D73Ch */ case    5:  		/* mr R31, R3 */
		/* 8213D73Ch case    5:*/		regs.R31 = regs.R3;
		/* 8213D73Ch case    5:*/		return 0x8213D740;
		  /* 8213D740h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8213D740h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213D740h case    6:*/		return 0x8213D744;
		  /* 8213D744h */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 8213D744h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213D79C;  }
		/* 8213D744h case    7:*/		return 0x8213D748;
		  /* 8213D748h */ case    8:  		/* lwz R5, <#[R3 + 548]> */
		/* 8213D748h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000224) );
		/* 8213D748h case    8:*/		return 0x8213D74C;
		  /* 8213D74Ch */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 8213D74Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213D74Ch case    9:*/		return 0x8213D750;
		  /* 8213D750h */ case   10:  		/* bc 12, CR6_EQ, 76 */
		/* 8213D750h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213D79C;  }
		/* 8213D750h case   10:*/		return 0x8213D754;
		  /* 8213D754h */ case   11:  		/* lhz R11, <#[R3 + 202]> */
		/* 8213D754h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213D754h case   11:*/		return 0x8213D758;
		  /* 8213D758h */ case   12:  		/* cmplwi CR6, R11, 260 */
		/* 8213D758h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213D758h case   12:*/		return 0x8213D75C;
		  /* 8213D75Ch */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8213D75Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8213D76C;  }
		/* 8213D75Ch case   13:*/		return 0x8213D760;
		  /* 8213D760h */ case   14:  		/* lis R3, -32768 */
		/* 8213D760h case   14:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213D760h case   14:*/		return 0x8213D764;
		  /* 8213D764h */ case   15:  		/* ori R3, R3, 16389 */
		/* 8213D764h case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213D764h case   15:*/		return 0x8213D768;
		  /* 8213D768h */ case   16:  		/* b 68 */
		/* 8213D768h case   16:*/		return 0x8213D7AC;
		/* 8213D768h case   16:*/		return 0x8213D76C;
	}
	return 0x8213D76C;
} // Block from 8213D728h-8213D76Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213D76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D76C);
		  /* 8213D76Ch */ case    0:  		/* mr R3, R31 */
		/* 8213D76Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213D76Ch case    0:*/		return 0x8213D770;
		  /* 8213D770h */ case    1:  		/* bl -1224 */
		/* 8213D770h case    1:*/		regs.LR = 0x8213D774; return 0x8213D2A8;
		/* 8213D770h case    1:*/		return 0x8213D774;
		  /* 8213D774h */ case    2:  		/* lis R4, 0 */
		/* 8213D774h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 8213D774h case    2:*/		return 0x8213D778;
		  /* 8213D778h */ case    3:  		/* mr R3, R31 */
		/* 8213D778h case    3:*/		regs.R3 = regs.R31;
		/* 8213D778h case    3:*/		return 0x8213D77C;
		  /* 8213D77Ch */ case    4:  		/* ori R4, R4, 65533 */
		/* 8213D77Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0xFFFD);
		/* 8213D77Ch case    4:*/		return 0x8213D780;
		  /* 8213D780h */ case    5:  		/* bl -292496 */
		/* 8213D780h case    5:*/		regs.LR = 0x8213D784; return 0x820F60F0;
		/* 8213D780h case    5:*/		return 0x8213D784;
		  /* 8213D784h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8213D784h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213D784h case    6:*/		return 0x8213D788;
		  /* 8213D788h */ case    7:  		/* bc 12, CR0_LT, 36 */
		/* 8213D788h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213D7AC;  }
		/* 8213D788h case    7:*/		return 0x8213D78C;
		  /* 8213D78Ch */ case    8:  		/* mr R3, R31 */
		/* 8213D78Ch case    8:*/		regs.R3 = regs.R31;
		/* 8213D78Ch case    8:*/		return 0x8213D790;
		  /* 8213D790h */ case    9:  		/* bl -327304 */
		/* 8213D790h case    9:*/		regs.LR = 0x8213D794; return 0x820ED908;
		/* 8213D790h case    9:*/		return 0x8213D794;
		  /* 8213D794h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8213D794h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213D794h case   10:*/		return 0x8213D798;
		  /* 8213D798h */ case   11:  		/* bc 12, CR0_LT, 20 */
		/* 8213D798h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213D7AC;  }
		/* 8213D798h case   11:*/		return 0x8213D79C;
	}
	return 0x8213D79C;
} // Block from 8213D76Ch-8213D79Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213D79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D79C);
		  /* 8213D79Ch */ case    0:  		/* mr R3, R31 */
		/* 8213D79Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213D79Ch case    0:*/		return 0x8213D7A0;
		  /* 8213D7A0h */ case    1:  		/* lwz R5, <#[R31 + 552]> */
		/* 8213D7A0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000228) );
		/* 8213D7A0h case    1:*/		return 0x8213D7A4;
		  /* 8213D7A4h */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213D7A4h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213D7A4h case    2:*/		return 0x8213D7A8;
		  /* 8213D7A8h */ case    3:  		/* bl -1280 */
		/* 8213D7A8h case    3:*/		regs.LR = 0x8213D7AC; return 0x8213D2A8;
		/* 8213D7A8h case    3:*/		return 0x8213D7AC;
	}
	return 0x8213D7AC;
} // Block from 8213D79Ch-8213D7ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D7AC);
		  /* 8213D7ACh */ case    0:  		/* addi R1, R1, 96 */
		/* 8213D7ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8213D7ACh case    0:*/		return 0x8213D7B0;
		  /* 8213D7B0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213D7B0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213D7B0h case    1:*/		return 0x8213D7B4;
		  /* 8213D7B4h */ case    2:  		/* mtspr LR, R12 */
		/* 8213D7B4h case    2:*/		regs.LR = regs.R12;
		/* 8213D7B4h case    2:*/		return 0x8213D7B8;
		  /* 8213D7B8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8213D7B8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213D7B8h case    3:*/		return 0x8213D7BC;
		  /* 8213D7BCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 8213D7BCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213D7BCh case    4:*/		return 0x8213D7C0;
	}
	return 0x8213D7C0;
} // Block from 8213D7ACh-8213D7C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213D7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D7C0);
		  /* 8213D7C0h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 8213D7C0h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213D7C0h case    0:*/		return 0x8213D7C4;
		  /* 8213D7C4h */ case    1:  		/* lwz R31, <#[R4 + 4]> */
		/* 8213D7C4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 8213D7C4h case    1:*/		return 0x8213D7C8;
		  /* 8213D7C8h */ case    2:  		/* li R6, 0 */
		/* 8213D7C8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213D7C8h case    2:*/		return 0x8213D7CC;
		  /* 8213D7CCh */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8213D7CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213D7CCh case    3:*/		return 0x8213D7D0;
		  /* 8213D7D0h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 8213D7D0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213D830;  }
		/* 8213D7D0h case    4:*/		return 0x8213D7D4;
		  /* 8213D7D4h */ case    5:  		/* lwz R9, <#[R4 + 8]> */
		/* 8213D7D4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 8213D7D4h case    5:*/		return 0x8213D7D8;
		  /* 8213D7D8h */ case    6:  		/* li R11, 0 */
		/* 8213D7D8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213D7D8h case    6:*/		return 0x8213D7DC;
		  /* 8213D7DCh */ case    7:  		/* lwz R8, <#[R3 + 20]> */
		/* 8213D7DCh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000014) );
		/* 8213D7DCh case    7:*/		return 0x8213D7E0;
		  /* 8213D7E0h */ case    8:  		/* lwz R7, <#[R3 + 136]> */
		/* 8213D7E0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000088) );
		/* 8213D7E0h case    8:*/		return 0x8213D7E4;
		  /* 8213D7E4h */ case    9:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8213D7E4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213D7E4h case    9:*/		return 0x8213D7E8;
		  /* 8213D7E8h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213D7E8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213D7E8h case   10:*/		return 0x8213D7EC;
		  /* 8213D7ECh */ case   11:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8213D7ECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8213D7ECh case   11:*/		return 0x8213D7F0;
		  /* 8213D7F0h */ case   12:  		/* lwz R4, <#[R10 + 4]> */
		/* 8213D7F0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 8213D7F0h case   12:*/		return 0x8213D7F4;
		  /* 8213D7F4h */ case   13:  		/* cmplw CR6, R7, R4 */
		/* 8213D7F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 8213D7F4h case   13:*/		return 0x8213D7F8;
		  /* 8213D7F8h */ case   14:  		/* bc 4, CR6_EQ, 40 */
		/* 8213D7F8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213D820;  }
		/* 8213D7F8h case   14:*/		return 0x8213D7FC;
		  /* 8213D7FCh */ case   15:  		/* lwz R10, <#[R10 + 80]> */
		/* 8213D7FCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 8213D7FCh case   15:*/		return 0x8213D800;
		  /* 8213D800h */ case   16:  		/* cmplw CR6, R10, R5 */
		/* 8213D800h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 8213D800h case   16:*/		return 0x8213D804;
		  /* 8213D804h */ case   17:  		/* bc 4, CR6_LT, 28 */
		/* 8213D804h case   17:*/		if ( !regs.CR[6].lt ) { return 0x8213D820;  }
		/* 8213D804h case   17:*/		return 0x8213D808;
		  /* 8213D808h */ case   18:  		/* lwz R4, <#[R3 + 24]> */
		/* 8213D808h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000018) );
		/* 8213D808h case   18:*/		return 0x8213D80C;
		  /* 8213D80Ch */ case   19:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213D80Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213D80Ch case   19:*/		return 0x8213D810;
		  /* 8213D810h */ case   20:  		/* lwzx R10, <#[R10 + R4]> */
		/* 8213D810h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8213D810h case   20:*/		return 0x8213D814;
		  /* 8213D814h */ case   21:  		/* lwz R10, <#[R10]> */
		/* 8213D814h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8213D814h case   21:*/		return 0x8213D818;
		  /* 8213D818h */ case   22:  		/* rlwinm. R10, R10, 0, 0, 11 */
		/* 8213D818h case   22:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213D818h case   22:*/		return 0x8213D81C;
		  /* 8213D81Ch */ case   23:  		/* bc 4, CR0_EQ, 32 */
		/* 8213D81Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x8213D83C;  }
		/* 8213D81Ch case   23:*/		return 0x8213D820;
	}
	return 0x8213D820;
} // Block from 8213D7C0h-8213D820h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213D820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D820);
		  /* 8213D820h */ case    0:  		/* addi R6, R6, 1 */
		/* 8213D820h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8213D820h case    0:*/		return 0x8213D824;
		  /* 8213D824h */ case    1:  		/* addi R11, R11, 4 */
		/* 8213D824h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213D824h case    1:*/		return 0x8213D828;
		  /* 8213D828h */ case    2:  		/* cmplw CR6, R6, R31 */
		/* 8213D828h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R31);
		/* 8213D828h case    2:*/		return 0x8213D82C;
		  /* 8213D82Ch */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 8213D82Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8213D7E4;  }
		/* 8213D82Ch case    3:*/		return 0x8213D830;
	}
	return 0x8213D830;
} // Block from 8213D820h-8213D830h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D830);
		  /* 8213D830h */ case    0:  		/* li R3, 0 */
		/* 8213D830h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213D830h case    0:*/		return 0x8213D834;
		  /* 8213D834h */ case    1:  		/* ld R31, <#[R1 - 8]> */
		/* 8213D834h case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213D834h case    1:*/		return 0x8213D838;
		  /* 8213D838h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8213D838h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213D838h case    2:*/		return 0x8213D83C;
	}
	return 0x8213D83C;
} // Block from 8213D830h-8213D83Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D83C);
		  /* 8213D83Ch */ case    0:  		/* li R3, 1 */
		/* 8213D83Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213D83Ch case    0:*/		return 0x8213D840;
		  /* 8213D840h */ case    1:  		/* b -12 */
		/* 8213D840h case    1:*/		return 0x8213D834;
		/* 8213D840h case    1:*/		return 0x8213D844;
		  /* 8213D844h */ case    2:  		/* nop */
		/* 8213D844h case    2:*/		cpu::op::nop();
		/* 8213D844h case    2:*/		return 0x8213D848;
	}
	return 0x8213D848;
} // Block from 8213D83Ch-8213D848h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213D848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D848);
		  /* 8213D848h */ case    0:  		/* mfspr R12, LR */
		/* 8213D848h case    0:*/		regs.R12 = regs.LR;
		/* 8213D848h case    0:*/		return 0x8213D84C;
		  /* 8213D84Ch */ case    1:  		/* bl -706068 */
		/* 8213D84Ch case    1:*/		regs.LR = 0x8213D850; return 0x82091238;
		/* 8213D84Ch case    1:*/		return 0x8213D850;
		  /* 8213D850h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8213D850h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213D850h case    2:*/		return 0x8213D854;
		  /* 8213D854h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8213D854h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213D860;  }
		/* 8213D854h case    3:*/		return 0x8213D858;
		  /* 8213D858h */ case    4:  		/* li R3, 1 */
		/* 8213D858h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213D858h case    4:*/		return 0x8213D85C;
		  /* 8213D85Ch */ case    5:  		/* b 688 */
		/* 8213D85Ch case    5:*/		return 0x8213DB0C;
		/* 8213D85Ch case    5:*/		return 0x8213D860;
	}
	return 0x8213D860;
} // Block from 8213D848h-8213D860h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213D860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D860);
		  /* 8213D860h */ case    0:  		/* lwz R11, <#[R4]> */
		/* 8213D860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8213D860h case    0:*/		return 0x8213D864;
		  /* 8213D864h */ case    1:  		/* rlwinm. R10, R11, 0, 0, 11 */
		/* 8213D864h case    1:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213D864h case    1:*/		return 0x8213D868;
		  /* 8213D868h */ case    2:  		/* bc 12, CR0_EQ, 672 */
		/* 8213D868h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213DB08;  }
		/* 8213D868h case    2:*/		return 0x8213D86C;
		  /* 8213D86Ch */ case    3:  		/* lis R9, 8304 */
		/* 8213D86Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x2070);
		/* 8213D86Ch case    3:*/		return 0x8213D870;
		  /* 8213D870h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 8213D870h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213D870h case    4:*/		return 0x8213D874;
		  /* 8213D874h */ case    5:  		/* bc 12, CR6_EQ, 660 */
		/* 8213D874h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213DB08;  }
		/* 8213D874h case    5:*/		return 0x8213D878;
		  /* 8213D878h */ case    6:  		/* lwz R9, <#[R4 + 4]> */
		/* 8213D878h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 8213D878h case    6:*/		return 0x8213D87C;
		  /* 8213D87Ch */ case    7:  		/* rlwinm R10, R11, 0, 12, 31 */
		/* 8213D87Ch case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R11);
		/* 8213D87Ch case    7:*/		return 0x8213D880;
		  /* 8213D880h */ case    8:  		/* divwu R22, R9, R10 */
		/* 8213D880h case    8:*/		cpu::op::divwu<0>(regs,&regs.R22,regs.R9,regs.R10);
		/* 8213D880h case    8:*/		return 0x8213D884;
		  /* 8213D884h */ case    9:  		/* twi 6, R10, 0 */
		/* 8213D884h case    9:*/		cpu::op::tw<6>(regs, 0x8213D884, regs.R10, 0x00000000);
		/* 8213D884h case    9:*/		return 0x8213D888;
		  /* 8213D888h */ case   10:  		/* cmplwi CR6, R22, 1 */
		/* 8213D888h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000001);
		/* 8213D888h case   10:*/		return 0x8213D88C;
		  /* 8213D88Ch */ case   11:  		/* bc 4, CR6_GT, 636 */
		/* 8213D88Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x8213DB08;  }
		/* 8213D88Ch case   11:*/		return 0x8213D890;
		  /* 8213D890h */ case   12:  		/* lwz R11, <#[R3 + 128]> */
		/* 8213D890h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8213D890h case   12:*/		return 0x8213D894;
		  /* 8213D894h */ case   13:  		/* addi R9, R1, -256 */
		/* 8213D894h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF00);
		/* 8213D894h case   13:*/		return 0x8213D898;
		  /* 8213D898h */ case   14:  		/* lwz R8, <#[R3 + 136]> */
		/* 8213D898h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000088) );
		/* 8213D898h case   14:*/		return 0x8213D89C;
		  /* 8213D89Ch */ case   15:  		/* addi R30, R1, -256 */
		/* 8213D89Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xFFFFFF00);
		/* 8213D89Ch case   15:*/		return 0x8213D8A0;
		  /* 8213D8A0h */ case   16:  		/* lwz R6, <#[R3 + 124]> */
		/* 8213D8A0h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x0000007C) );
		/* 8213D8A0h case   16:*/		return 0x8213D8A4;
		  /* 8213D8A4h */ case   17:  		/* rlwinm R31, R11, 2, 0, 29 */
		/* 8213D8A4h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R11);
		/* 8213D8A4h case   17:*/		return 0x8213D8A8;
		  /* 8213D8A8h */ case   18:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213D8A8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213D8A8h case   18:*/		return 0x8213D8AC;
		  /* 8213D8ACh */ case   19:  		/* lwz R11, <#[R3 + 148]> */
		/* 8213D8ACh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000094) );
		/* 8213D8ACh case   19:*/		return 0x8213D8B0;
		  /* 8213D8B0h */ case   20:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213D8B0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213D8B0h case   20:*/		return 0x8213D8B4;
		  /* 8213D8B4h */ case   21:  		/* addi R28, R1, -256 */
		/* 8213D8B4h case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xFFFFFF00);
		/* 8213D8B4h case   21:*/		return 0x8213D8B8;
		  /* 8213D8B8h */ case   22:  		/* li R24, 0 */
		/* 8213D8B8h case   22:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8213D8B8h case   22:*/		return 0x8213D8BC;
		  /* 8213D8BCh */ case   23:  		/* addi R7, R1, -176 */
		/* 8213D8BCh case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xFFFFFF50);
		/* 8213D8BCh case   23:*/		return 0x8213D8C0;
		  /* 8213D8C0h */ case   24:  		/* stwx R24, <#[R31 + R9]> */
		/* 8213D8C0h case   24:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 8213D8C0h case   24:*/		return 0x8213D8C4;
		  /* 8213D8C4h */ case   25:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 8213D8C4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 8213D8C4h case   25:*/		return 0x8213D8C8;
		  /* 8213D8C8h */ case   26:  		/* addi R29, R1, -176 */
		/* 8213D8C8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0xFFFFFF50);
		/* 8213D8C8h case   26:*/		return 0x8213D8CC;
		  /* 8213D8CCh */ case   27:  		/* stwx R24, <#[R8 + R30]> */
		/* 8213D8CCh case   27:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 8213D8CCh case   27:*/		return 0x8213D8D0;
		  /* 8213D8D0h */ case   28:  		/* li R11, 2 */
		/* 8213D8D0h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8213D8D0h case   28:*/		return 0x8213D8D4;
		  /* 8213D8D4h */ case   29:  		/* stwx R24, <#[R6 + R28]> */
		/* 8213D8D4h case   29:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R6 + regs.R28 + 0x00000000) );
		/* 8213D8D4h case   29:*/		return 0x8213D8D8;
		  /* 8213D8D8h */ case   30:  		/* addi R26, R1, -176 */
		/* 8213D8D8h case   30:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xFFFFFF50);
		/* 8213D8D8h case   30:*/		return 0x8213D8DC;
		  /* 8213D8DCh */ case   31:  		/* addi R9, R1, -256 */
		/* 8213D8DCh case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF00);
		/* 8213D8DCh case   31:*/		return 0x8213D8E0;
		  /* 8213D8E0h */ case   32:  		/* stwx R11, <#[R31 + R7]> */
		/* 8213D8E0h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R7 + 0x00000000) );
		/* 8213D8E0h case   32:*/		return 0x8213D8E4;
		  /* 8213D8E4h */ case   33:  		/* addi R30, R1, -176 */
		/* 8213D8E4h case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xFFFFFF50);
		/* 8213D8E4h case   33:*/		return 0x8213D8E8;
		  /* 8213D8E8h */ case   34:  		/* li R28, 3 */
		/* 8213D8E8h case   34:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 8213D8E8h case   34:*/		return 0x8213D8EC;
		  /* 8213D8ECh */ case   35:  		/* li R7, 1 */
		/* 8213D8ECh case   35:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8213D8ECh case   35:*/		return 0x8213D8F0;
		  /* 8213D8F0h */ case   36:  		/* stwx R28, <#[R8 + R29]> */
		/* 8213D8F0h case   36:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 8213D8F0h case   36:*/		return 0x8213D8F4;
		  /* 8213D8F4h */ case   37:  		/* mr R21, R24 */
		/* 8213D8F4h case   37:*/		regs.R21 = regs.R24;
		/* 8213D8F4h case   37:*/		return 0x8213D8F8;
		  /* 8213D8F8h */ case   38:  		/* stwx R11, <#[R6 + R26]> */
		/* 8213D8F8h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R26 + 0x00000000) );
		/* 8213D8F8h case   38:*/		return 0x8213D8FC;
		  /* 8213D8FCh */ case   39:  		/* mr R29, R24 */
		/* 8213D8FCh case   39:*/		regs.R29 = regs.R24;
		/* 8213D8FCh case   39:*/		return 0x8213D900;
		  /* 8213D900h */ case   40:  		/* stwx R24, <#[R27 + R9]> */
		/* 8213D900h case   40:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R27 + regs.R9 + 0x00000000) );
		/* 8213D900h case   40:*/		return 0x8213D904;
		  /* 8213D904h */ case   41:  		/* cmplwi CR6, R22, 0 */
		/* 8213D904h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8213D904h case   41:*/		return 0x8213D908;
		  /* 8213D908h */ case   42:  		/* stwx R7, <#[R27 + R30]> */
		/* 8213D908h case   42:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R27 + regs.R30 + 0x00000000) );
		/* 8213D908h case   42:*/		return 0x8213D90C;
		  /* 8213D90Ch */ case   43:  		/* bc 12, CR6_EQ, 508 */
		/* 8213D90Ch case   43:*/		if ( regs.CR[6].eq ) { return 0x8213DB08;  }
		/* 8213D90Ch case   43:*/		return 0x8213D910;
		  /* 8213D910h */ case   44:  		/* lwz R26, <#[R4 + 8]> */
		/* 8213D910h case   44:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R4 + 0x00000008) );
		/* 8213D910h case   44:*/		return 0x8213D914;
		  /* 8213D914h */ case   45:  		/* rlwinm R23, R10, 2, 0, 29 */
		/* 8213D914h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R10);
		/* 8213D914h case   45:*/		return 0x8213D918;
		  /* 8213D918h */ case   46:  		/* lwz R27, <#[R3 + 20]> */
		/* 8213D918h case   46:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000014) );
		/* 8213D918h case   46:*/		return 0x8213D91C;
		  /* 8213D91Ch */ case   47:  		/* lwz R25, <#[R3 + 16]> */
		/* 8213D91Ch case   47:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x00000010) );
		/* 8213D91Ch case   47:*/		return 0x8213D920;
		  /* 8213D920h */ case   48:  		/* mr R28, R26 */
		/* 8213D920h case   48:*/		regs.R28 = regs.R26;
		/* 8213D920h case   48:*/		return 0x8213D924;
		  /* 8213D924h */ case   49:  		/* lwz R11, <#[R28]> */
		/* 8213D924h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213D924h case   49:*/		return 0x8213D928;
		  /* 8213D928h */ case   50:  		/* mr R8, R24 */
		/* 8213D928h case   50:*/		regs.R8 = regs.R24;
		/* 8213D928h case   50:*/		return 0x8213D92C;
		  /* 8213D92Ch */ case   51:  		/* cmplwi CR6, R29, 0 */
		/* 8213D92Ch case   51:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8213D92Ch case   51:*/		return 0x8213D930;
		  /* 8213D930h */ case   52:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213D930h case   52:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213D930h case   52:*/		return 0x8213D934;
		  /* 8213D934h */ case   53:  		/* lwzx R31, <#[R11 + R27]> */
		/* 8213D934h case   53:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213D934h case   53:*/		return 0x8213D938;
		  /* 8213D938h */ case   54:  		/* lwz R4, <#[R31 + 4]> */
		/* 8213D938h case   54:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8213D938h case   54:*/		return 0x8213D93C;
		  /* 8213D93Ch */ case   55:  		/* rlwinm R6, R4, 2, 0, 29 */
		/* 8213D93Ch case   55:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R4);
		/* 8213D93Ch case   55:*/		return 0x8213D940;
		  /* 8213D940h */ case   56:  		/* lwzx R30, <#[R25 + R6]> */
		/* 8213D940h case   56:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + regs.R6 + 0x00000000) );
		/* 8213D940h case   56:*/		return 0x8213D944;
		  /* 8213D944h */ case   57:  		/* bc 12, CR6_EQ, 136 */
		/* 8213D944h case   57:*/		if ( regs.CR[6].eq ) { return 0x8213D9CC;  }
		/* 8213D944h case   57:*/		return 0x8213D948;
		  /* 8213D948h */ case   58:  		/* mr R7, R24 */
		/* 8213D948h case   58:*/		regs.R7 = regs.R24;
		/* 8213D948h case   58:*/		return 0x8213D94C;
		  /* 8213D94Ch */ case   59:  		/* lwzx R11, <#[R7 + R26]> */
		/* 8213D94Ch case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R26 + 0x00000000) );
		/* 8213D94Ch case   59:*/		return 0x8213D950;
		  /* 8213D950h */ case   60:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213D950h case   60:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213D950h case   60:*/		return 0x8213D954;
		  /* 8213D954h */ case   61:  		/* lwzx R11, <#[R11 + R27]> */
		/* 8213D954h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8213D954h case   61:*/		return 0x8213D958;
		  /* 8213D958h */ case   62:  		/* lwz R9, <#[R11 + 4]> */
		/* 8213D958h case   62:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8213D958h case   62:*/		return 0x8213D95C;
		  /* 8213D95Ch */ case   63:  		/* cmplw CR6, R4, R9 */
		/* 8213D95Ch case   63:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8213D95Ch case   63:*/		return 0x8213D960;
		  /* 8213D960h */ case   64:  		/* bc 4, CR6_EQ, 92 */
		/* 8213D960h case   64:*/		if ( !regs.CR[6].eq ) { return 0x8213D9BC;  }
		/* 8213D960h case   64:*/		return 0x8213D964;
		  /* 8213D964h */ case   65:  		/* lwz R10, <#[R31 + 8]> */
		/* 8213D964h case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8213D964h case   65:*/		return 0x8213D968;
		  /* 8213D968h */ case   66:  		/* lwz R20, <#[R11 + 8]> */
		/* 8213D968h case   66:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + 0x00000008) );
		/* 8213D968h case   66:*/		return 0x8213D96C;
		  /* 8213D96Ch */ case   67:  		/* cmplw CR6, R10, R20 */
		/* 8213D96Ch case   67:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 8213D96Ch case   67:*/		return 0x8213D970;
		  /* 8213D970h */ case   68:  		/* bc 4, CR6_EQ, 76 */
		/* 8213D970h case   68:*/		if ( !regs.CR[6].eq ) { return 0x8213D9BC;  }
		/* 8213D970h case   68:*/		return 0x8213D974;
		  /* 8213D974h */ case   69:  		/* lwz R10, <#[R31 + 12]> */
		/* 8213D974h case   69:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213D974h case   69:*/		return 0x8213D978;
		  /* 8213D978h */ case   70:  		/* lwz R20, <#[R11 + 12]> */
		/* 8213D978h case   70:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213D978h case   70:*/		return 0x8213D97C;
		  /* 8213D97Ch */ case   71:  		/* cmplw CR6, R10, R20 */
		/* 8213D97Ch case   71:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 8213D97Ch case   71:*/		return 0x8213D980;
		  /* 8213D980h */ case   72:  		/* bc 4, CR6_EQ, 60 */
		/* 8213D980h case   72:*/		if ( !regs.CR[6].eq ) { return 0x8213D9BC;  }
		/* 8213D980h case   72:*/		return 0x8213D984;
		  /* 8213D984h */ case   73:  		/* lwz R10, <#[R3 + 16]> */
		/* 8213D984h case   73:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8213D984h case   73:*/		return 0x8213D988;
		  /* 8213D988h */ case   74:  		/* lwzx R20, <#[R10 + R6]> */
		/* 8213D988h case   74:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8213D988h case   74:*/		return 0x8213D98C;
		  /* 8213D98Ch */ case   75:  		/* lwz R20, <#[R20 + 4]> */
		/* 8213D98Ch case   75:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R20 + 0x00000004) );
		/* 8213D98Ch case   75:*/		return 0x8213D990;
		  /* 8213D990h */ case   76:  		/* rlwinm. R20, R20, 0, 23, 23 */
		/* 8213D990h case   76:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R20,regs.R20);
		/* 8213D990h case   76:*/		return 0x8213D994;
		  /* 8213D994h */ case   77:  		/* bc 12, CR0_EQ, 56 */
		/* 8213D994h case   77:*/		if ( regs.CR[0].eq ) { return 0x8213D9CC;  }
		/* 8213D994h case   77:*/		return 0x8213D998;
		  /* 8213D998h */ case   78:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213D998h case   78:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213D998h case   78:*/		return 0x8213D99C;
		  /* 8213D99Ch */ case   79:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8213D99Ch case   79:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213D99Ch case   79:*/		return 0x8213D9A0;
		  /* 8213D9A0h */ case   80:  		/* lwz R10, <#[R10 + 4]> */
		/* 8213D9A0h case   80:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8213D9A0h case   80:*/		return 0x8213D9A4;
		  /* 8213D9A4h */ case   81:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 8213D9A4h case   81:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 8213D9A4h case   81:*/		return 0x8213D9A8;
		  /* 8213D9A8h */ case   82:  		/* bc 12, CR0_EQ, 36 */
		/* 8213D9A8h case   82:*/		if ( regs.CR[0].eq ) { return 0x8213D9CC;  }
		/* 8213D9A8h case   82:*/		return 0x8213D9AC;
		  /* 8213D9ACh */ case   83:  		/* lfd FR0, <#[R31 + 32]> */
		/* 8213D9ACh case   83:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000020) );
		/* 8213D9ACh case   83:*/		return 0x8213D9B0;
		  /* 8213D9B0h */ case   84:  		/* lfd FR13, <#[R11 + 32]> */
		/* 8213D9B0h case   84:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 8213D9B0h case   84:*/		return 0x8213D9B4;
		  /* 8213D9B4h */ case   85:  		/* fcmpu CR6, FR0, FR13 */
		/* 8213D9B4h case   85:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8213D9B4h case   85:*/		return 0x8213D9B8;
		  /* 8213D9B8h */ case   86:  		/* bc 12, CR6_EQ, 20 */
		/* 8213D9B8h case   86:*/		if ( regs.CR[6].eq ) { return 0x8213D9CC;  }
		/* 8213D9B8h case   86:*/		return 0x8213D9BC;
	}
	return 0x8213D9BC;
} // Block from 8213D860h-8213D9BCh (87 instructions)

//////////////////////////////////////////////////////
// Block at 8213D9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D9BC);
		  /* 8213D9BCh */ case    0:  		/* addi R8, R8, 1 */
		/* 8213D9BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213D9BCh case    0:*/		return 0x8213D9C0;
		  /* 8213D9C0h */ case    1:  		/* add R7, R23, R7 */
		/* 8213D9C0h case    1:*/		cpu::op::add<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 8213D9C0h case    1:*/		return 0x8213D9C4;
		  /* 8213D9C4h */ case    2:  		/* cmplw CR6, R8, R29 */
		/* 8213D9C4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R29);
		/* 8213D9C4h case    2:*/		return 0x8213D9C8;
		  /* 8213D9C8h */ case    3:  		/* bc 12, CR6_LT, -124 */
		/* 8213D9C8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213D94C;  }
		/* 8213D9C8h case    3:*/		return 0x8213D9CC;
	}
	return 0x8213D9CC;
} // Block from 8213D9BCh-8213D9CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213D9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213D9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213D9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213D9CC);
		  /* 8213D9CCh */ case    0:  		/* cmplw CR6, R8, R29 */
		/* 8213D9CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R29);
		/* 8213D9CCh case    0:*/		return 0x8213D9D0;
		  /* 8213D9D0h */ case    1:  		/* bc 4, CR6_EQ, 296 */
		/* 8213D9D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213DAF8;  }
		/* 8213D9D0h case    1:*/		return 0x8213D9D4;
		  /* 8213D9D4h */ case    2:  		/* lwz R11, <#[R3 + 128]> */
		/* 8213D9D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8213D9D4h case    2:*/		return 0x8213D9D8;
		  /* 8213D9D8h */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 8213D9D8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8213D9D8h case    3:*/		return 0x8213D9DC;
		  /* 8213D9DCh */ case    4:  		/* bc 4, CR6_EQ, 56 */
		/* 8213D9DCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213DA14;  }
		/* 8213D9DCh case    4:*/		return 0x8213D9E0;
		  /* 8213D9E0h */ case    5:  		/* lbz R10, <#[R31 + 111]> */
		/* 8213D9E0h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006F) );
		/* 8213D9E0h case    5:*/		return 0x8213D9E4;
		  /* 8213D9E4h */ case    6:  		/* cmplwi CR6, R10, 3 */
		/* 8213D9E4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8213D9E4h case    6:*/		return 0x8213D9E8;
		  /* 8213D9E8h */ case    7:  		/* bc 4, CR6_EQ, 92 */
		/* 8213D9E8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213DA44;  }
		/* 8213D9E8h case    7:*/		return 0x8213D9EC;
		  /* 8213D9ECh */ case    8:  		/* lhz R11, <#[R3 + 202]> */
		/* 8213D9ECh case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213D9ECh case    8:*/		return 0x8213D9F0;
		  /* 8213D9F0h */ case    9:  		/* cmplwi CR6, R11, 257 */
		/* 8213D9F0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000101);
		/* 8213D9F0h case    9:*/		return 0x8213D9F4;
		  /* 8213D9F4h */ case   10:  		/* bc 4, CR6_EQ, 24 */
		/* 8213D9F4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213DA0C;  }
		/* 8213D9F4h case   10:*/		return 0x8213D9F8;
		  /* 8213D9F8h */ case   11:  		/* addi R21, R21, 1 */
		/* 8213D9F8h case   11:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8213D9F8h case   11:*/		return 0x8213D9FC;
		  /* 8213D9FCh */ case   12:  		/* cmplwi CR6, R21, 2 */
		/* 8213D9FCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000002);
		/* 8213D9FCh case   12:*/		return 0x8213DA00;
		  /* 8213DA00h */ case   13:  		/* bc 4, CR6_GT, 12 */
		/* 8213DA00h case   13:*/		if ( !regs.CR[6].gt ) { return 0x8213DA0C;  }
		/* 8213DA00h case   13:*/		return 0x8213DA04;
		  /* 8213DA04h */ case   14:  		/* cmplwi CR6, R5, 0 */
		/* 8213DA04h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213DA04h case   14:*/		return 0x8213DA08;
		  /* 8213DA08h */ case   15:  		/* bc 12, CR6_EQ, -432 */
		/* 8213DA08h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213D858;  }
		/* 8213DA08h case   15:*/		return 0x8213DA0C;
	}
	return 0x8213DA0C;
} // Block from 8213D9CCh-8213DA0Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213DA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DA0C);
		  /* 8213DA0Ch */ case    0:  		/* lwz R11, <#[R3 + 136]> */
		/* 8213DA0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000088) );
		/* 8213DA0Ch case    0:*/		return 0x8213DA10;
		  /* 8213DA10h */ case    1:  		/* b 52 */
		/* 8213DA10h case    1:*/		return 0x8213DA44;
		/* 8213DA10h case    1:*/		return 0x8213DA14;
	}
	return 0x8213DA14;
} // Block from 8213DA0Ch-8213DA14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213DA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DA14);
		  /* 8213DA14h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8213DA14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8213DA14h case    0:*/		return 0x8213DA18;
		  /* 8213DA18h */ case    1:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 8213DA18h case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 8213DA18h case    1:*/		return 0x8213DA1C;
		  /* 8213DA1Ch */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8213DA1Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8213DA30;  }
		/* 8213DA1Ch case    2:*/		return 0x8213DA20;
		  /* 8213DA20h */ case    3:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 8213DA20h case    3:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 8213DA20h case    3:*/		return 0x8213DA24;
		  /* 8213DA24h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 8213DA24h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8213DA30;  }
		/* 8213DA24h case    4:*/		return 0x8213DA28;
		  /* 8213DA28h */ case    5:  		/* lwz R11, <#[R3 + 124]> */
		/* 8213DA28h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000007C) );
		/* 8213DA28h case    5:*/		return 0x8213DA2C;
		  /* 8213DA2Ch */ case    6:  		/* b 24 */
		/* 8213DA2Ch case    6:*/		return 0x8213DA44;
		/* 8213DA2Ch case    6:*/		return 0x8213DA30;
	}
	return 0x8213DA30;
} // Block from 8213DA14h-8213DA30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213DA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DA30);
		  /* 8213DA30h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 8213DA30h case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 8213DA30h case    0:*/		return 0x8213DA34;
		  /* 8213DA34h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8213DA34h case    1:*/		if ( regs.CR[0].eq ) { return 0x8213DA40;  }
		/* 8213DA34h case    1:*/		return 0x8213DA38;
		  /* 8213DA38h */ case    2:  		/* lwz R11, <#[R3 + 148]> */
		/* 8213DA38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000094) );
		/* 8213DA38h case    2:*/		return 0x8213DA3C;
		  /* 8213DA3Ch */ case    3:  		/* b 8 */
		/* 8213DA3Ch case    3:*/		return 0x8213DA44;
		/* 8213DA3Ch case    3:*/		return 0x8213DA40;
	}
	return 0x8213DA40;
} // Block from 8213DA30h-8213DA40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213DA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DA40);
		  /* 8213DA40h */ case    0:  		/* mr R11, R4 */
		/* 8213DA40h case    0:*/		regs.R11 = regs.R4;
		/* 8213DA40h case    0:*/		return 0x8213DA44;
	}
	return 0x8213DA44;
} // Block from 8213DA40h-8213DA44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DA44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DA44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DA44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DA44);
		  /* 8213DA44h */ case    0:  		/* lwz R10, <#[R31 + 72]> */
		/* 8213DA44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000048) );
		/* 8213DA44h case    0:*/		return 0x8213DA48;
		  /* 8213DA48h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 8213DA48h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8213DA48h case    1:*/		return 0x8213DA4C;
		  /* 8213DA4Ch */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 8213DA4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213DACC;  }
		/* 8213DA4Ch case    2:*/		return 0x8213DA50;
		  /* 8213DA50h */ case    3:  		/* lwz R9, <#[R3 + 136]> */
		/* 8213DA50h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000088) );
		/* 8213DA50h case    3:*/		return 0x8213DA54;
		  /* 8213DA54h */ case    4:  		/* cmplw CR6, R4, R9 */
		/* 8213DA54h case    4:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8213DA54h case    4:*/		return 0x8213DA58;
		  /* 8213DA58h */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 8213DA58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213DACC;  }
		/* 8213DA58h case    5:*/		return 0x8213DA5C;
		  /* 8213DA5Ch */ case    6:  		/* lhz R8, <#[R3 + 202]> */
		/* 8213DA5Ch case    6:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213DA5Ch case    6:*/		return 0x8213DA60;
		  /* 8213DA60h */ case    7:  		/* cmplwi CR6, R8, 257 */
		/* 8213DA60h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000101);
		/* 8213DA60h case    7:*/		return 0x8213DA64;
		  /* 8213DA64h */ case    8:  		/* bc 4, CR6_EQ, 104 */
		/* 8213DA64h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213DACC;  }
		/* 8213DA64h case    8:*/		return 0x8213DA68;
		  /* 8213DA68h */ case    9:  		/* lwz R11, <#[R3 + 24]> */
		/* 8213DA68h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8213DA68h case    9:*/		return 0x8213DA6C;
		  /* 8213DA6Ch */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8213DA6Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8213DA6Ch case   10:*/		return 0x8213DA70;
		  /* 8213DA70h */ case   11:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213DA70h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213DA70h case   11:*/		return 0x8213DA74;
		  /* 8213DA74h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8213DA74h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213DA74h case   12:*/		return 0x8213DA78;
		  /* 8213DA78h */ case   13:  		/* bc 12, CR6_EQ, 80 */
		/* 8213DA78h case   13:*/		if ( regs.CR[6].eq ) { return 0x8213DAC8;  }
		/* 8213DA78h case   13:*/		return 0x8213DA7C;
		  /* 8213DA7Ch */ case   14:  		/* lwz R11, <#[R11]> */
		/* 8213DA7Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213DA7Ch case   14:*/		return 0x8213DA80;
		  /* 8213DA80h */ case   15:  		/* lis R10, 24816 */
		/* 8213DA80h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x60F0);
		/* 8213DA80h case   15:*/		return 0x8213DA84;
		  /* 8213DA84h */ case   16:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213DA84h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213DA84h case   16:*/		return 0x8213DA88;
		  /* 8213DA88h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 8213DA88h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213DA88h case   17:*/		return 0x8213DA8C;
		  /* 8213DA8Ch */ case   18:  		/* bc 12, CR6_EQ, 40 */
		/* 8213DA8Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8213DAB4;  }
		/* 8213DA8Ch case   18:*/		return 0x8213DA90;
		  /* 8213DA90h */ case   19:  		/* lis R10, 24656 */
		/* 8213DA90h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 8213DA90h case   19:*/		return 0x8213DA94;
		  /* 8213DA94h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8213DA94h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213DA94h case   20:*/		return 0x8213DA98;
		  /* 8213DA98h */ case   21:  		/* bc 12, CR6_EQ, 28 */
		/* 8213DA98h case   21:*/		if ( regs.CR[6].eq ) { return 0x8213DAB4;  }
		/* 8213DA98h case   21:*/		return 0x8213DA9C;
		  /* 8213DA9Ch */ case   22:  		/* lis R10, 24736 */
		/* 8213DA9Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0x60A0);
		/* 8213DA9Ch case   22:*/		return 0x8213DAA0;
		  /* 8213DAA0h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8213DAA0h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213DAA0h case   23:*/		return 0x8213DAA4;
		  /* 8213DAA4h */ case   24:  		/* bc 12, CR6_EQ, 16 */
		/* 8213DAA4h case   24:*/		if ( regs.CR[6].eq ) { return 0x8213DAB4;  }
		/* 8213DAA4h case   24:*/		return 0x8213DAA8;
		  /* 8213DAA8h */ case   25:  		/* lis R10, 24576 */
		/* 8213DAA8h case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 8213DAA8h case   25:*/		return 0x8213DAAC;
		  /* 8213DAACh */ case   26:  		/* cmplw CR6, R11, R10 */
		/* 8213DAACh case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213DAACh case   26:*/		return 0x8213DAB0;
		  /* 8213DAB0h */ case   27:  		/* bc 4, CR6_EQ, 24 */
		/* 8213DAB0h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8213DAC8;  }
		/* 8213DAB0h case   27:*/		return 0x8213DAB4;
	}
	return 0x8213DAB4;
} // Block from 8213DA44h-8213DAB4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213DAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DAB4);
		  /* 8213DAB4h */ case    0:  		/* addi R21, R21, 1 */
		/* 8213DAB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 8213DAB4h case    0:*/		return 0x8213DAB8;
		  /* 8213DAB8h */ case    1:  		/* cmplwi CR6, R21, 2 */
		/* 8213DAB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000002);
		/* 8213DAB8h case    1:*/		return 0x8213DABC;
		  /* 8213DABCh */ case    2:  		/* bc 4, CR6_GT, 12 */
		/* 8213DABCh case    2:*/		if ( !regs.CR[6].gt ) { return 0x8213DAC8;  }
		/* 8213DABCh case    2:*/		return 0x8213DAC0;
		  /* 8213DAC0h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 8213DAC0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213DAC0h case    3:*/		return 0x8213DAC4;
		  /* 8213DAC4h */ case    4:  		/* bc 12, CR6_EQ, -620 */
		/* 8213DAC4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8213D858;  }
		/* 8213DAC4h case    4:*/		return 0x8213DAC8;
	}
	return 0x8213DAC8;
} // Block from 8213DAB4h-8213DAC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213DAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DAC8);
		  /* 8213DAC8h */ case    0:  		/* mr R11, R9 */
		/* 8213DAC8h case    0:*/		regs.R11 = regs.R9;
		/* 8213DAC8h case    0:*/		return 0x8213DACC;
	}
	return 0x8213DACC;
} // Block from 8213DAC8h-8213DACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DACC);
		  /* 8213DACCh */ case    0:  		/* cmplwi CR6, R11, 18 */
		/* 8213DACCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 8213DACCh case    0:*/		return 0x8213DAD0;
		  /* 8213DAD0h */ case    1:  		/* bc 4, CR6_LT, 40 */
		/* 8213DAD0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213DAF8;  }
		/* 8213DAD0h case    1:*/		return 0x8213DAD4;
		  /* 8213DAD4h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213DAD4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213DAD4h case    2:*/		return 0x8213DAD8;
		  /* 8213DAD8h */ case    3:  		/* addi R9, R1, -256 */
		/* 8213DAD8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF00);
		/* 8213DAD8h case    3:*/		return 0x8213DADC;
		  /* 8213DADCh */ case    4:  		/* addi R8, R1, -176 */
		/* 8213DADCh case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFF50);
		/* 8213DADCh case    4:*/		return 0x8213DAE0;
		  /* 8213DAE0h */ case    5:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8213DAE0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213DAE0h case    5:*/		return 0x8213DAE4;
		  /* 8213DAE4h */ case    6:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213DAE4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213DAE4h case    6:*/		return 0x8213DAE8;
		  /* 8213DAE8h */ case    7:  		/* addi R10, R10, 1 */
		/* 8213DAE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213DAE8h case    7:*/		return 0x8213DAEC;
		  /* 8213DAECh */ case    8:  		/* stwx R10, <#[R11 + R9]> */
		/* 8213DAECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213DAECh case    8:*/		return 0x8213DAF0;
	}
	return 0x8213DAF0;
} // Block from 8213DACCh-8213DAF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213DAF0h
// Function '?MatchPhase1@CPSLegacyProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DAF0);
		  /* 8213DAF0h */ case    0:  		/* cmplw CR6, R10, R8 */
		/* 8213DAF0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213DAF0h case    0:*/		return 0x8213DAF4;
		  /* 8213DAF4h */ case    1:  		/* bc 12, CR6_GT, 28 */
		/* 8213DAF4h case    1:*/		if ( regs.CR[6].gt ) { return 0x8213DB10;  }
		/* 8213DAF4h case    1:*/		return 0x8213DAF8;
	}
	return 0x8213DAF8;
} // Block from 8213DAF0h-8213DAF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213DAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DAF8);
		  /* 8213DAF8h */ case    0:  		/* addi R29, R29, 1 */
		/* 8213DAF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213DAF8h case    0:*/		return 0x8213DAFC;
		  /* 8213DAFCh */ case    1:  		/* add R28, R28, R23 */
		/* 8213DAFCh case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R28,regs.R23);
		/* 8213DAFCh case    1:*/		return 0x8213DB00;
		  /* 8213DB00h */ case    2:  		/* cmplw CR6, R29, R22 */
		/* 8213DB00h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R22);
		/* 8213DB00h case    2:*/		return 0x8213DB04;
		  /* 8213DB04h */ case    3:  		/* bc 12, CR6_LT, -480 */
		/* 8213DB04h case    3:*/		if ( regs.CR[6].lt ) { return 0x8213D924;  }
		/* 8213DB04h case    3:*/		return 0x8213DB08;
	}
	return 0x8213DB08;
} // Block from 8213DAF8h-8213DB08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213DB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DB08);
		  /* 8213DB08h */ case    0:  		/* li R3, 0 */
		/* 8213DB08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213DB08h case    0:*/		return 0x8213DB0C;
	}
	return 0x8213DB0C;
} // Block from 8213DB08h-8213DB0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DB0C);
		  /* 8213DB0Ch */ case    0:  		/* b -706692 */
		/* 8213DB0Ch case    0:*/		return 0x82091288;
		/* 8213DB0Ch case    0:*/		return 0x8213DB10;
	}
	return 0x8213DB10;
} // Block from 8213DB0Ch-8213DB10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DB10);
		  /* 8213DB10h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 8213DB10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8213DB10h case    0:*/		return 0x8213DB14;
		  /* 8213DB14h */ case    1:  		/* bc 12, CR6_EQ, -700 */
		/* 8213DB14h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213D858;  }
		/* 8213DB14h case    1:*/		return 0x8213DB18;
		  /* 8213DB18h */ case    2:  		/* stw R29, <#[R5]> */
		/* 8213DB18h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R5 + 0x00000000) );
		/* 8213DB18h case    2:*/		return 0x8213DB1C;
		  /* 8213DB1Ch */ case    3:  		/* b -708 */
		/* 8213DB1Ch case    3:*/		return 0x8213D858;
		/* 8213DB1Ch case    3:*/		return 0x8213DB20;
	}
	return 0x8213DB20;
} // Block from 8213DB10h-8213DB20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213DB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DB20);
		  /* 8213DB20h */ case    0:  		/* mfspr R12, LR */
		/* 8213DB20h case    0:*/		regs.R12 = regs.LR;
		/* 8213DB20h case    0:*/		return 0x8213DB24;
		  /* 8213DB24h */ case    1:  		/* bl -706812 */
		/* 8213DB24h case    1:*/		regs.LR = 0x8213DB28; return 0x82091228;
		/* 8213DB24h case    1:*/		return 0x8213DB28;
		  /* 8213DB28h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8213DB28h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8213DB28h case    2:*/		return 0x8213DB2C;
		  /* 8213DB2Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8213DB2Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213DB38;  }
		/* 8213DB2Ch case    3:*/		return 0x8213DB30;
		  /* 8213DB30h */ case    4:  		/* li R3, 1 */
		/* 8213DB30h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213DB30h case    4:*/		return 0x8213DB34;
		  /* 8213DB34h */ case    5:  		/* b 560 */
		/* 8213DB34h case    5:*/		return 0x8213DD64;
		/* 8213DB34h case    5:*/		return 0x8213DB38;
	}
	return 0x8213DB38;
} // Block from 8213DB20h-8213DB38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213DB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DB38);
		  /* 8213DB38h */ case    0:  		/* lwz R11, <#[R4]> */
		/* 8213DB38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8213DB38h case    0:*/		return 0x8213DB3C;
		  /* 8213DB3Ch */ case    1:  		/* rlwinm. R10, R11, 0, 0, 11 */
		/* 8213DB3Ch case    1:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R11);
		/* 8213DB3Ch case    1:*/		return 0x8213DB40;
		  /* 8213DB40h */ case    2:  		/* bc 12, CR0_EQ, 544 */
		/* 8213DB40h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213DD60;  }
		/* 8213DB40h case    2:*/		return 0x8213DB44;
		  /* 8213DB44h */ case    3:  		/* lwz R8, <#[R3 + 128]> */
		/* 8213DB44h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000080) );
		/* 8213DB44h case    3:*/		return 0x8213DB48;
		  /* 8213DB48h */ case    4:  		/* addi R7, R1, -288 */
		/* 8213DB48h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xFFFFFEE0);
		/* 8213DB48h case    4:*/		return 0x8213DB4C;
		  /* 8213DB4Ch */ case    5:  		/* lwz R9, <#[R5]> */
		/* 8213DB4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 8213DB4Ch case    5:*/		return 0x8213DB50;
		  /* 8213DB50h */ case    6:  		/* rlwinm R10, R11, 0, 12, 31 */
		/* 8213DB50h case    6:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R11);
		/* 8213DB50h case    6:*/		return 0x8213DB54;
		  /* 8213DB54h */ case    7:  		/* lwz R6, <#[R3 + 136]> */
		/* 8213DB54h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000088) );
		/* 8213DB54h case    7:*/		return 0x8213DB58;
		  /* 8213DB58h */ case    8:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213DB58h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213DB58h case    8:*/		return 0x8213DB5C;
		  /* 8213DB5Ch */ case    9:  		/* li R28, 0 */
		/* 8213DB5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8213DB5Ch case    9:*/		return 0x8213DB60;
		  /* 8213DB60h */ case   10:  		/* lwz R31, <#[R4 + 4]> */
		/* 8213DB60h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 8213DB60h case   10:*/		return 0x8213DB64;
		  /* 8213DB64h */ case   11:  		/* rlwinm R11, R9, 0, 12, 31 */
		/* 8213DB64h case   11:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R9);
		/* 8213DB64h case   11:*/		return 0x8213DB68;
		  /* 8213DB68h */ case   12:  		/* lwz R9, <#[R3 + 124]> */
		/* 8213DB68h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000007C) );
		/* 8213DB68h case   12:*/		return 0x8213DB6C;
		  /* 8213DB6Ch */ case   13:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213DB6Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213DB6Ch case   13:*/		return 0x8213DB70;
		  /* 8213DB70h */ case   14:  		/* lwz R30, <#[R5 + 4]> */
		/* 8213DB70h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R5 + 0x00000004) );
		/* 8213DB70h case   14:*/		return 0x8213DB74;
		  /* 8213DB74h */ case   15:  		/* addi R26, R1, -288 */
		/* 8213DB74h case   15:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xFFFFFEE0);
		/* 8213DB74h case   15:*/		return 0x8213DB78;
		  /* 8213DB78h */ case   16:  		/* addi R29, R1, -208 */
		/* 8213DB78h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0xFFFFFF30);
		/* 8213DB78h case   16:*/		return 0x8213DB7C;
		  /* 8213DB7Ch */ case   17:  		/* stwx R28, <#[R8 + R7]> */
		/* 8213DB7Ch case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8213DB7Ch case   17:*/		return 0x8213DB80;
		  /* 8213DB80h */ case   18:  		/* addi R24, R1, -208 */
		/* 8213DB80h case   18:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0xFFFFFF30);
		/* 8213DB80h case   18:*/		return 0x8213DB84;
		  /* 8213DB84h */ case   19:  		/* rlwinm R25, R9, 2, 0, 29 */
		/* 8213DB84h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R9);
		/* 8213DB84h case   19:*/		return 0x8213DB88;
		  /* 8213DB88h */ case   20:  		/* divwu R27, R31, R10 */
		/* 8213DB88h case   20:*/		cpu::op::divwu<0>(regs,&regs.R27,regs.R31,regs.R10);
		/* 8213DB88h case   20:*/		return 0x8213DB8C;
		  /* 8213DB8Ch */ case   21:  		/* addi R23, R1, -288 */
		/* 8213DB8Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0xFFFFFEE0);
		/* 8213DB8Ch case   21:*/		return 0x8213DB90;
		  /* 8213DB90h */ case   22:  		/* stwx R28, <#[R6 + R26]> */
		/* 8213DB90h case   22:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + regs.R26 + 0x00000000) );
		/* 8213DB90h case   22:*/		return 0x8213DB94;
		  /* 8213DB94h */ case   23:  		/* addi R7, R1, -208 */
		/* 8213DB94h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xFFFFFF30);
		/* 8213DB94h case   23:*/		return 0x8213DB98;
		  /* 8213DB98h */ case   24:  		/* divwu R9, R30, R11 */
		/* 8213DB98h case   24:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R30,regs.R11);
		/* 8213DB98h case   24:*/		return 0x8213DB9C;
		  /* 8213DB9Ch */ case   25:  		/* li R31, 2 */
		/* 8213DB9Ch case   25:*/		cpu::op::li<0>(regs,&regs.R31,0x2);
		/* 8213DB9Ch case   25:*/		return 0x8213DBA0;
		  /* 8213DBA0h */ case   26:  		/* li R30, 5 */
		/* 8213DBA0h case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x5);
		/* 8213DBA0h case   26:*/		return 0x8213DBA4;
		  /* 8213DBA4h */ case   27:  		/* li R26, 3 */
		/* 8213DBA4h case   27:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 8213DBA4h case   27:*/		return 0x8213DBA8;
		  /* 8213DBA8h */ case   28:  		/* stwx R31, <#[R8 + R29]> */
		/* 8213DBA8h case   28:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 8213DBA8h case   28:*/		return 0x8213DBAC;
		  /* 8213DBACh */ case   29:  		/* stwx R30, <#[R6 + R24]> */
		/* 8213DBACh case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R6 + regs.R24 + 0x00000000) );
		/* 8213DBACh case   29:*/		return 0x8213DBB0;
		  /* 8213DBB0h */ case   30:  		/* twi 6, R10, 0 */
		/* 8213DBB0h case   30:*/		cpu::op::tw<6>(regs, 0x8213DBB0, regs.R10, 0x00000000);
		/* 8213DBB0h case   30:*/		return 0x8213DBB4;
		  /* 8213DBB4h */ case   31:  		/* twi 6, R11, 0 */
		/* 8213DBB4h case   31:*/		cpu::op::tw<6>(regs, 0x8213DBB4, regs.R11, 0x00000000);
		/* 8213DBB4h case   31:*/		return 0x8213DBB8;
		  /* 8213DBB8h */ case   32:  		/* stwx R28, <#[R25 + R23]> */
		/* 8213DBB8h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R25 + regs.R23 + 0x00000000) );
		/* 8213DBB8h case   32:*/		return 0x8213DBBC;
		  /* 8213DBBCh */ case   33:  		/* add. R21, R9, R27 */
		/* 8213DBBCh case   33:*/		cpu::op::add<1>(regs,&regs.R21,regs.R9,regs.R27);
		/* 8213DBBCh case   33:*/		return 0x8213DBC0;
		  /* 8213DBC0h */ case   34:  		/* stwx R26, <#[R25 + R7]> */
		/* 8213DBC0h case   34:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + regs.R7 + 0x00000000) );
		/* 8213DBC0h case   34:*/		return 0x8213DBC4;
		  /* 8213DBC4h */ case   35:  		/* mr R19, R28 */
		/* 8213DBC4h case   35:*/		regs.R19 = regs.R28;
		/* 8213DBC4h case   35:*/		return 0x8213DBC8;
		  /* 8213DBC8h */ case   36:  		/* mr R18, R28 */
		/* 8213DBC8h case   36:*/		regs.R18 = regs.R28;
		/* 8213DBC8h case   36:*/		return 0x8213DBCC;
		  /* 8213DBCCh */ case   37:  		/* mr R30, R28 */
		/* 8213DBCCh case   37:*/		regs.R30 = regs.R28;
		/* 8213DBCCh case   37:*/		return 0x8213DBD0;
		  /* 8213DBD0h */ case   38:  		/* bc 12, CR0_EQ, 400 */
		/* 8213DBD0h case   38:*/		if ( regs.CR[0].eq ) { return 0x8213DD60;  }
		/* 8213DBD0h case   38:*/		return 0x8213DBD4;
		  /* 8213DBD4h */ case   39:  		/* mullw R9, R11, R27 */
		/* 8213DBD4h case   39:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R11,regs.R27);
		/* 8213DBD4h case   39:*/		return 0x8213DBD8;
		  /* 8213DBD8h */ case   40:  		/* lwz R20, <#[R3 + 16]> */
		/* 8213DBD8h case   40:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R3 + 0x00000010) );
		/* 8213DBD8h case   40:*/		return 0x8213DBDC;
		  /* 8213DBDCh */ case   41:  		/* neg R9, R9 */
		/* 8213DBDCh case   41:*/		cpu::op::neg<0>(regs,&regs.R9,regs.R9);
		/* 8213DBDCh case   41:*/		return 0x8213DBE0;
		  /* 8213DBE0h */ case   42:  		/* rlwinm R24, R10, 2, 0, 29 */
		/* 8213DBE0h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R10);
		/* 8213DBE0h case   42:*/		return 0x8213DBE4;
		  /* 8213DBE4h */ case   43:  		/* rlwinm R22, R9, 2, 0, 29 */
		/* 8213DBE4h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R22,regs.R9);
		/* 8213DBE4h case   43:*/		return 0x8213DBE8;
		  /* 8213DBE8h */ case   44:  		/* rlwinm R23, R11, 2, 0, 29 */
		/* 8213DBE8h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R11);
		/* 8213DBE8h case   44:*/		return 0x8213DBEC;
		  /* 8213DBECh */ case   45:  		/* mr R25, R28 */
		/* 8213DBECh case   45:*/		regs.R25 = regs.R28;
		/* 8213DBECh case   45:*/		return 0x8213DBF0;
		  /* 8213DBF0h */ case   46:  		/* mr R26, R22 */
		/* 8213DBF0h case   46:*/		regs.R26 = regs.R22;
		/* 8213DBF0h case   46:*/		return 0x8213DBF4;
		  /* 8213DBF4h */ case   47:  		/* lwz R7, <#[R3 + 20]> */
		/* 8213DBF4h case   47:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 8213DBF4h case   47:*/		return 0x8213DBF8;
		  /* 8213DBF8h */ case   48:  		/* cmplw CR6, R30, R27 */
		/* 8213DBF8h case   48:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 8213DBF8h case   48:*/		return 0x8213DBFC;
		  /* 8213DBFCh */ case   49:  		/* bc 4, CR6_LT, 16 */
		/* 8213DBFCh case   49:*/		if ( !regs.CR[6].lt ) { return 0x8213DC0C;  }
		/* 8213DBFCh case   49:*/		return 0x8213DC00;
		  /* 8213DC00h */ case   50:  		/* lwz R11, <#[R4 + 8]> */
		/* 8213DC00h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8213DC00h case   50:*/		return 0x8213DC04;
		  /* 8213DC04h */ case   51:  		/* lwzx R11, <#[R11 + R25]> */
		/* 8213DC04h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8213DC04h case   51:*/		return 0x8213DC08;
		  /* 8213DC08h */ case   52:  		/* b 12 */
		/* 8213DC08h case   52:*/		return 0x8213DC14;
		/* 8213DC08h case   52:*/		return 0x8213DC0C;
	}
	return 0x8213DC0C;
} // Block from 8213DB38h-8213DC0Ch (53 instructions)

//////////////////////////////////////////////////////
// Block at 8213DC0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DC0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DC0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DC0C);
		  /* 8213DC0Ch */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 8213DC0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8213DC0Ch case    0:*/		return 0x8213DC10;
		  /* 8213DC10h */ case    1:  		/* lwzx R11, <#[R11 + R26]> */
		/* 8213DC10h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8213DC10h case    1:*/		return 0x8213DC14;
	}
	return 0x8213DC14;
} // Block from 8213DC0Ch-8213DC14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213DC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DC14);
		  /* 8213DC14h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213DC14h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213DC14h case    0:*/		return 0x8213DC18;
		  /* 8213DC18h */ case    1:  		/* mr R10, R28 */
		/* 8213DC18h case    1:*/		regs.R10 = regs.R28;
		/* 8213DC18h case    1:*/		return 0x8213DC1C;
		  /* 8213DC1Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 8213DC1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213DC1Ch case    2:*/		return 0x8213DC20;
		  /* 8213DC20h */ case    3:  		/* lwzx R31, <#[R11 + R7]> */
		/* 8213DC20h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8213DC20h case    3:*/		return 0x8213DC24;
		  /* 8213DC24h */ case    4:  		/* lwz R6, <#[R31 + 4]> */
		/* 8213DC24h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 8213DC24h case    4:*/		return 0x8213DC28;
		  /* 8213DC28h */ case    5:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 8213DC28h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 8213DC28h case    5:*/		return 0x8213DC2C;
		  /* 8213DC2Ch */ case    6:  		/* lwzx R29, <#[R11 + R20]> */
		/* 8213DC2Ch case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 8213DC2Ch case    6:*/		return 0x8213DC30;
		  /* 8213DC30h */ case    7:  		/* bc 12, CR6_EQ, 112 */
		/* 8213DC30h case    7:*/		if ( regs.CR[6].eq ) { return 0x8213DCA0;  }
		/* 8213DC30h case    7:*/		return 0x8213DC34;
		  /* 8213DC34h */ case    8:  		/* mr R8, R28 */
		/* 8213DC34h case    8:*/		regs.R8 = regs.R28;
		/* 8213DC34h case    8:*/		return 0x8213DC38;
		  /* 8213DC38h */ case    9:  		/* mr R9, R22 */
		/* 8213DC38h case    9:*/		regs.R9 = regs.R22;
		/* 8213DC38h case    9:*/		return 0x8213DC3C;
		  /* 8213DC3Ch */ case   10:  		/* cmplw CR6, R10, R27 */
		/* 8213DC3Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8213DC3Ch case   10:*/		return 0x8213DC40;
		  /* 8213DC40h */ case   11:  		/* bc 4, CR6_LT, 16 */
		/* 8213DC40h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8213DC50;  }
		/* 8213DC40h case   11:*/		return 0x8213DC44;
		  /* 8213DC44h */ case   12:  		/* lwz R11, <#[R4 + 8]> */
		/* 8213DC44h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8213DC44h case   12:*/		return 0x8213DC48;
		  /* 8213DC48h */ case   13:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8213DC48h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213DC48h case   13:*/		return 0x8213DC4C;
		  /* 8213DC4Ch */ case   14:  		/* b 12 */
		/* 8213DC4Ch case   14:*/		return 0x8213DC58;
		/* 8213DC4Ch case   14:*/		return 0x8213DC50;
	}
	return 0x8213DC50;
} // Block from 8213DC14h-8213DC50h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8213DC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DC50);
		  /* 8213DC50h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 8213DC50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8213DC50h case    0:*/		return 0x8213DC54;
		  /* 8213DC54h */ case    1:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8213DC54h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213DC54h case    1:*/		return 0x8213DC58;
	}
	return 0x8213DC58;
} // Block from 8213DC50h-8213DC58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213DC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DC58);
		  /* 8213DC58h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213DC58h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213DC58h case    0:*/		return 0x8213DC5C;
		  /* 8213DC5Ch */ case    1:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8213DC5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8213DC5Ch case    1:*/		return 0x8213DC60;
		  /* 8213DC60h */ case    2:  		/* lwz R17, <#[R11 + 4]> */
		/* 8213DC60h case    2:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R11 + 0x00000004) );
		/* 8213DC60h case    2:*/		return 0x8213DC64;
		  /* 8213DC64h */ case    3:  		/* cmplw CR6, R6, R17 */
		/* 8213DC64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R17);
		/* 8213DC64h case    3:*/		return 0x8213DC68;
		  /* 8213DC68h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 8213DC68h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213DC8C;  }
		/* 8213DC68h case    4:*/		return 0x8213DC6C;
		  /* 8213DC6Ch */ case    5:  		/* lwz R17, <#[R31 + 8]> */
		/* 8213DC6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R31 + 0x00000008) );
		/* 8213DC6Ch case    5:*/		return 0x8213DC70;
		  /* 8213DC70h */ case    6:  		/* lwz R16, <#[R11 + 8]> */
		/* 8213DC70h case    6:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R11 + 0x00000008) );
		/* 8213DC70h case    6:*/		return 0x8213DC74;
		  /* 8213DC74h */ case    7:  		/* cmplw CR6, R17, R16 */
		/* 8213DC74h case    7:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R16);
		/* 8213DC74h case    7:*/		return 0x8213DC78;
		  /* 8213DC78h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8213DC78h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213DC8C;  }
		/* 8213DC78h case    8:*/		return 0x8213DC7C;
		  /* 8213DC7Ch */ case    9:  		/* lwz R17, <#[R31 + 12]> */
		/* 8213DC7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DC7Ch case    9:*/		return 0x8213DC80;
		  /* 8213DC80h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 8213DC80h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213DC80h case   10:*/		return 0x8213DC84;
		  /* 8213DC84h */ case   11:  		/* cmplw CR6, R17, R11 */
		/* 8213DC84h case   11:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 8213DC84h case   11:*/		return 0x8213DC88;
		  /* 8213DC88h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 8213DC88h case   12:*/		if ( regs.CR[6].eq ) { return 0x8213DCA0;  }
		/* 8213DC88h case   12:*/		return 0x8213DC8C;
	}
	return 0x8213DC8C;
} // Block from 8213DC58h-8213DC8Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213DC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DC8C);
		  /* 8213DC8Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 8213DC8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213DC8Ch case    0:*/		return 0x8213DC90;
		  /* 8213DC90h */ case    1:  		/* add R9, R23, R9 */
		/* 8213DC90h case    1:*/		cpu::op::add<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 8213DC90h case    1:*/		return 0x8213DC94;
		  /* 8213DC94h */ case    2:  		/* add R8, R24, R8 */
		/* 8213DC94h case    2:*/		cpu::op::add<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 8213DC94h case    2:*/		return 0x8213DC98;
		  /* 8213DC98h */ case    3:  		/* cmplw CR6, R10, R30 */
		/* 8213DC98h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8213DC98h case    3:*/		return 0x8213DC9C;
		  /* 8213DC9Ch */ case    4:  		/* bc 12, CR6_LT, -96 */
		/* 8213DC9Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8213DC3C;  }
		/* 8213DC9Ch case    4:*/		return 0x8213DCA0;
	}
	return 0x8213DCA0;
} // Block from 8213DC8Ch-8213DCA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213DCA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DCA0);
		  /* 8213DCA0h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 8213DCA0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8213DCA0h case    0:*/		return 0x8213DCA4;
		  /* 8213DCA4h */ case    1:  		/* bc 4, CR6_EQ, 168 */
		/* 8213DCA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213DD4C;  }
		/* 8213DCA4h case    1:*/		return 0x8213DCA8;
		  /* 8213DCA8h */ case    2:  		/* lwz R10, <#[R3 + 136]> */
		/* 8213DCA8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000088) );
		/* 8213DCA8h case    2:*/		return 0x8213DCAC;
		  /* 8213DCACh */ case    3:  		/* cmplw CR6, R6, R10 */
		/* 8213DCACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 8213DCACh case    3:*/		return 0x8213DCB0;
		  /* 8213DCB0h */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 8213DCB0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213DCCC;  }
		/* 8213DCB0h case    4:*/		return 0x8213DCB4;
		  /* 8213DCB4h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213DCB4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DCB4h case    5:*/		return 0x8213DCB8;
		  /* 8213DCB8h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 8213DCB8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8213DCB8h case    6:*/		return 0x8213DCBC;
		  /* 8213DCBCh */ case    7:  		/* bc 4, CR6_GT, 16 */
		/* 8213DCBCh case    7:*/		if ( !regs.CR[6].gt ) { return 0x8213DCCC;  }
		/* 8213DCBCh case    7:*/		return 0x8213DCC0;
		  /* 8213DCC0h */ case    8:  		/* addi R19, R19, 1 */
		/* 8213DCC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 8213DCC0h case    8:*/		return 0x8213DCC4;
		  /* 8213DCC4h */ case    9:  		/* cmplwi CR6, R19, 3 */
		/* 8213DCC4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 8213DCC4h case    9:*/		return 0x8213DCC8;
		  /* 8213DCC8h */ case   10:  		/* bc 12, CR6_GT, -408 */
		/* 8213DCC8h case   10:*/		if ( regs.CR[6].gt ) { return 0x8213DB30;  }
		/* 8213DCC8h case   10:*/		return 0x8213DCCC;
	}
	return 0x8213DCCC;
} // Block from 8213DCA0h-8213DCCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213DCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DCCC);
		  /* 8213DCCCh */ case    0:  		/* lwz R11, <#[R3 + 128]> */
		/* 8213DCCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8213DCCCh case    0:*/		return 0x8213DCD0;
		  /* 8213DCD0h */ case    1:  		/* cmplw CR6, R6, R11 */
		/* 8213DCD0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8213DCD0h case    1:*/		return 0x8213DCD4;
		  /* 8213DCD4h */ case    2:  		/* bc 4, CR6_EQ, 48 */
		/* 8213DCD4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213DD04;  }
		/* 8213DCD4h case    2:*/		return 0x8213DCD8;
		  /* 8213DCD8h */ case    3:  		/* lbz R9, <#[R31 + 111]> */
		/* 8213DCD8h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000006F) );
		/* 8213DCD8h case    3:*/		return 0x8213DCDC;
		  /* 8213DCDCh */ case    4:  		/* cmplwi CR6, R9, 3 */
		/* 8213DCDCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 8213DCDCh case    4:*/		return 0x8213DCE0;
		  /* 8213DCE0h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 8213DCE0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213DD28;  }
		/* 8213DCE0h case    5:*/		return 0x8213DCE4;
		  /* 8213DCE4h */ case    6:  		/* lhz R11, <#[R3 + 202]> */
		/* 8213DCE4h case    6:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213DCE4h case    6:*/		return 0x8213DCE8;
		  /* 8213DCE8h */ case    7:  		/* cmplwi CR6, R11, 257 */
		/* 8213DCE8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000101);
		/* 8213DCE8h case    7:*/		return 0x8213DCEC;
		  /* 8213DCECh */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 8213DCECh case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213DCFC;  }
		/* 8213DCECh case    8:*/		return 0x8213DCF0;
		  /* 8213DCF0h */ case    9:  		/* addi R19, R19, 1 */
		/* 8213DCF0h case    9:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 8213DCF0h case    9:*/		return 0x8213DCF4;
		  /* 8213DCF4h */ case   10:  		/* cmplwi CR6, R19, 3 */
		/* 8213DCF4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000003);
		/* 8213DCF4h case   10:*/		return 0x8213DCF8;
		  /* 8213DCF8h */ case   11:  		/* bc 12, CR6_GT, -456 */
		/* 8213DCF8h case   11:*/		if ( regs.CR[6].gt ) { return 0x8213DB30;  }
		/* 8213DCF8h case   11:*/		return 0x8213DCFC;
	}
	return 0x8213DCFC;
} // Block from 8213DCCCh-8213DCFCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213DCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DCFC);
		  /* 8213DCFCh */ case    0:  		/* mr R11, R10 */
		/* 8213DCFCh case    0:*/		regs.R11 = regs.R10;
		/* 8213DCFCh case    0:*/		return 0x8213DD00;
		  /* 8213DD00h */ case    1:  		/* b 40 */
		/* 8213DD00h case    1:*/		return 0x8213DD28;
		/* 8213DD00h case    1:*/		return 0x8213DD04;
	}
	return 0x8213DD04;
} // Block from 8213DCFCh-8213DD04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD04);
		  /* 8213DD04h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 8213DD04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8213DD04h case    0:*/		return 0x8213DD08;
		  /* 8213DD08h */ case    1:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 8213DD08h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 8213DD08h case    1:*/		return 0x8213DD0C;
		  /* 8213DD0Ch */ case    2:  		/* bc 4, CR0_EQ, 84 */
		/* 8213DD0Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8213DD60;  }
		/* 8213DD0Ch case    2:*/		return 0x8213DD10;
		  /* 8213DD10h */ case    3:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8213DD10h case    3:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8213DD10h case    3:*/		return 0x8213DD14;
		  /* 8213DD14h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 8213DD14h case    4:*/		if ( regs.CR[0].eq ) { return 0x8213DD24;  }
		/* 8213DD14h case    4:*/		return 0x8213DD18;
		  /* 8213DD18h */ case    5:  		/* addi R18, R18, 1 */
		/* 8213DD18h case    5:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 8213DD18h case    5:*/		return 0x8213DD1C;
		  /* 8213DD1Ch */ case    6:  		/* cmplwi CR6, R18, 3 */
		/* 8213DD1Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000003);
		/* 8213DD1Ch case    6:*/		return 0x8213DD20;
		  /* 8213DD20h */ case    7:  		/* b 40 */
		/* 8213DD20h case    7:*/		return 0x8213DD48;
		/* 8213DD20h case    7:*/		return 0x8213DD24;
	}
	return 0x8213DD24;
} // Block from 8213DD04h-8213DD24h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD24);
		  /* 8213DD24h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8213DD24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8213DD24h case    0:*/		return 0x8213DD28;
	}
	return 0x8213DD28;
} // Block from 8213DD24h-8213DD28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD28);
		  /* 8213DD28h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213DD28h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213DD28h case    0:*/		return 0x8213DD2C;
		  /* 8213DD2Ch */ case    1:  		/* addi R9, R1, -288 */
		/* 8213DD2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFEE0);
		/* 8213DD2Ch case    1:*/		return 0x8213DD30;
		  /* 8213DD30h */ case    2:  		/* addi R8, R1, -208 */
		/* 8213DD30h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFF30);
		/* 8213DD30h case    2:*/		return 0x8213DD34;
		  /* 8213DD34h */ case    3:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8213DD34h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213DD34h case    3:*/		return 0x8213DD38;
		  /* 8213DD38h */ case    4:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8213DD38h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213DD38h case    4:*/		return 0x8213DD3C;
		  /* 8213DD3Ch */ case    5:  		/* addi R10, R10, 1 */
		/* 8213DD3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213DD3Ch case    5:*/		return 0x8213DD40;
		  /* 8213DD40h */ case    6:  		/* cmplw CR6, R10, R8 */
		/* 8213DD40h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8213DD40h case    6:*/		return 0x8213DD44;
		  /* 8213DD44h */ case    7:  		/* stwx R10, <#[R11 + R9]> */
		/* 8213DD44h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8213DD44h case    7:*/		return 0x8213DD48;
	}
	return 0x8213DD48;
} // Block from 8213DD28h-8213DD48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD48);
		  /* 8213DD48h */ case    0:  		/* bc 12, CR6_GT, -536 */
		/* 8213DD48h case    0:*/		if ( regs.CR[6].gt ) { return 0x8213DB30;  }
		/* 8213DD48h case    0:*/		return 0x8213DD4C;
	}
	return 0x8213DD4C;
} // Block from 8213DD48h-8213DD4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD4C);
		  /* 8213DD4Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 8213DD4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213DD4Ch case    0:*/		return 0x8213DD50;
		  /* 8213DD50h */ case    1:  		/* add R26, R26, R23 */
		/* 8213DD50h case    1:*/		cpu::op::add<0>(regs,&regs.R26,regs.R26,regs.R23);
		/* 8213DD50h case    1:*/		return 0x8213DD54;
		  /* 8213DD54h */ case    2:  		/* add R25, R24, R25 */
		/* 8213DD54h case    2:*/		cpu::op::add<0>(regs,&regs.R25,regs.R24,regs.R25);
		/* 8213DD54h case    2:*/		return 0x8213DD58;
		  /* 8213DD58h */ case    3:  		/* cmplw CR6, R30, R21 */
		/* 8213DD58h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R21);
		/* 8213DD58h case    3:*/		return 0x8213DD5C;
		  /* 8213DD5Ch */ case    4:  		/* bc 12, CR6_LT, -360 */
		/* 8213DD5Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8213DBF4;  }
		/* 8213DD5Ch case    4:*/		return 0x8213DD60;
	}
	return 0x8213DD60;
} // Block from 8213DD4Ch-8213DD60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD60);
		  /* 8213DD60h */ case    0:  		/* li R3, 0 */
		/* 8213DD60h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213DD60h case    0:*/		return 0x8213DD64;
	}
	return 0x8213DD64;
} // Block from 8213DD60h-8213DD64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD64);
		  /* 8213DD64h */ case    0:  		/* b -707308 */
		/* 8213DD64h case    0:*/		return 0x82091278;
		/* 8213DD64h case    0:*/		return 0x8213DD68;
	}
	return 0x8213DD68;
} // Block from 8213DD64h-8213DD68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD68);
		  /* 8213DD68h */ case    0:  		/* mfspr R12, LR */
		/* 8213DD68h case    0:*/		regs.R12 = regs.LR;
		/* 8213DD68h case    0:*/		return 0x8213DD6C;
		  /* 8213DD6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213DD6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213DD6Ch case    1:*/		return 0x8213DD70;
		  /* 8213DD70h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8213DD70h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8213DD70h case    2:*/		return 0x8213DD74;
		  /* 8213DD74h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8213DD74h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213DD74h case    3:*/		return 0x8213DD78;
		  /* 8213DD78h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8213DD78h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8213DD78h case    4:*/		return 0x8213DD7C;
		  /* 8213DD7Ch */ case    5:  		/* mr R31, R3 */
		/* 8213DD7Ch case    5:*/		regs.R31 = regs.R3;
		/* 8213DD7Ch case    5:*/		return 0x8213DD80;
		  /* 8213DD80h */ case    6:  		/* mr R30, R4 */
		/* 8213DD80h case    6:*/		regs.R30 = regs.R4;
		/* 8213DD80h case    6:*/		return 0x8213DD84;
		  /* 8213DD84h */ case    7:  		/* bl -12692 */
		/* 8213DD84h case    7:*/		regs.LR = 0x8213DD88; return 0x8213ABF0;
		/* 8213DD84h case    7:*/		return 0x8213DD88;
		  /* 8213DD88h */ case    8:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8213DD88h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8213DD88h case    8:*/		return 0x8213DD8C;
		  /* 8213DD8Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8213DD8Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8213DD9C;  }
		/* 8213DD8Ch case    9:*/		return 0x8213DD90;
		  /* 8213DD90h */ case   10:  		/* lis R4, 9345 */
		/* 8213DD90h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213DD90h case   10:*/		return 0x8213DD94;
		  /* 8213DD94h */ case   11:  		/* mr R3, R31 */
		/* 8213DD94h case   11:*/		regs.R3 = regs.R31;
		/* 8213DD94h case   11:*/		return 0x8213DD98;
		  /* 8213DD98h */ case   12:  		/* bl -744032 */
		/* 8213DD98h case   12:*/		regs.LR = 0x8213DD9C; return 0x82088338;
		/* 8213DD98h case   12:*/		return 0x8213DD9C;
	}
	return 0x8213DD9C;
} // Block from 8213DD68h-8213DD9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213DD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DD9C);
		  /* 8213DD9Ch */ case    0:  		/* mr R3, R31 */
		/* 8213DD9Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213DD9Ch case    0:*/		return 0x8213DDA0;
		  /* 8213DDA0h */ case    1:  		/* addi R1, R1, 112 */
		/* 8213DDA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8213DDA0h case    1:*/		return 0x8213DDA4;
		  /* 8213DDA4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213DDA4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213DDA4h case    2:*/		return 0x8213DDA8;
		  /* 8213DDA8h */ case    3:  		/* mtspr LR, R12 */
		/* 8213DDA8h case    3:*/		regs.LR = regs.R12;
		/* 8213DDA8h case    3:*/		return 0x8213DDAC;
		  /* 8213DDACh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8213DDACh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8213DDACh case    4:*/		return 0x8213DDB0;
		  /* 8213DDB0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8213DDB0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213DDB0h case    5:*/		return 0x8213DDB4;
		  /* 8213DDB4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8213DDB4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213DDB4h case    6:*/		return 0x8213DDB8;
	}
	return 0x8213DDB8;
} // Block from 8213DD9Ch-8213DDB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213DDB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DDB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DDB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DDB8);
		  /* 8213DDB8h */ case    0:  		/* mfspr R12, LR */
		/* 8213DDB8h case    0:*/		regs.R12 = regs.LR;
		/* 8213DDB8h case    0:*/		return 0x8213DDBC;
		  /* 8213DDBCh */ case    1:  		/* bl -707456 */
		/* 8213DDBCh case    1:*/		regs.LR = 0x8213DDC0; return 0x8209123C;
		/* 8213DDBCh case    1:*/		return 0x8213DDC0;
		  /* 8213DDC0h */ case    2:  		/* stfd FR31, <#[R1 - 104]> */
		/* 8213DDC0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8213DDC0h case    2:*/		return 0x8213DDC4;
		  /* 8213DDC4h */ case    3:  		/* stwu R1, <#[R1 - 192]> */
		/* 8213DDC4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8213DDC4h case    3:*/		return 0x8213DDC8;
		  /* 8213DDC8h */ case    4:  		/* lis R11, -32255 */
		/* 8213DDC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213DDC8h case    4:*/		return 0x8213DDCC;
		  /* 8213DDCCh */ case    5:  		/* li R7, 4 */
		/* 8213DDCCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 8213DDCCh case    5:*/		return 0x8213DDD0;
		  /* 8213DDD0h */ case    6:  		/* addi R4, R11, -8736 */
		/* 8213DDD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDDE0);
		/* 8213DDD0h case    6:*/		return 0x8213DDD4;
		  /* 8213DDD4h */ case    7:  		/* li R6, 1 */
		/* 8213DDD4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8213DDD4h case    7:*/		return 0x8213DDD8;
		  /* 8213DDD8h */ case    8:  		/* li R5, 785 */
		/* 8213DDD8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x311);
		/* 8213DDD8h case    8:*/		return 0x8213DDDC;
		  /* 8213DDDCh */ case    9:  		/* mr R31, R3 */
		/* 8213DDDCh case    9:*/		regs.R31 = regs.R3;
		/* 8213DDDCh case    9:*/		return 0x8213DDE0;
		  /* 8213DDE0h */ case   10:  		/* bl -265304 */
		/* 8213DDE0h case   10:*/		regs.LR = 0x8213DDE4; return 0x820FD188;
		/* 8213DDE0h case   10:*/		return 0x8213DDE4;
		  /* 8213DDE4h */ case   11:  		/* lis R11, -32256 */
		/* 8213DDE4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213DDE4h case   11:*/		return 0x8213DDE8;
		  /* 8213DDE8h */ case   12:  		/* mr R30, R3 */
		/* 8213DDE8h case   12:*/		regs.R30 = regs.R3;
		/* 8213DDE8h case   12:*/		return 0x8213DDEC;
		  /* 8213DDECh */ case   13:  		/* mr R4, R3 */
		/* 8213DDECh case   13:*/		regs.R4 = regs.R3;
		/* 8213DDECh case   13:*/		return 0x8213DDF0;
		  /* 8213DDF0h */ case   14:  		/* li R6, 0 */
		/* 8213DDF0h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213DDF0h case   14:*/		return 0x8213DDF4;
		  /* 8213DDF4h */ case   15:  		/* li R5, 0 */
		/* 8213DDF4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213DDF4h case   15:*/		return 0x8213DDF8;
		  /* 8213DDF8h */ case   16:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8213DDF8h case   16:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8213DDF8h case   16:*/		return 0x8213DDFC;
		  /* 8213DDFCh */ case   17:  		/* mr R3, R31 */
		/* 8213DDFCh case   17:*/		regs.R3 = regs.R31;
		/* 8213DDFCh case   17:*/		return 0x8213DE00;
		  /* 8213DE00h */ case   18:  		/* fmr FR1, FR31 */
		/* 8213DE00h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213DE00h case   18:*/		return 0x8213DE04;
		  /* 8213DE04h */ case   19:  		/* bl -265180 */
		/* 8213DE04h case   19:*/		regs.LR = 0x8213DE08; return 0x820FD228;
		/* 8213DE04h case   19:*/		return 0x8213DE08;
		  /* 8213DE08h */ case   20:  		/* stw R3, <#[R31 + 1092]> */
		/* 8213DE08h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000444) );
		/* 8213DE08h case   20:*/		return 0x8213DE0C;
		  /* 8213DE0Ch */ case   21:  		/* lis R11, -32256 */
		/* 8213DE0Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213DE0Ch case   21:*/		return 0x8213DE10;
		  /* 8213DE10h */ case   22:  		/* li R6, 1 */
		/* 8213DE10h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8213DE10h case   22:*/		return 0x8213DE14;
		  /* 8213DE14h */ case   23:  		/* li R5, 0 */
		/* 8213DE14h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213DE14h case   23:*/		return 0x8213DE18;
	}
	return 0x8213DE18;
} // Block from 8213DDB8h-8213DE18h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213DE18h
// Function '?EmitPhase@CPSLegacyProgram@D3DXShader@@IAAJPAPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DE18);
		  /* 8213DE18h */ case    0:  		/* mr R4, R30 */
		/* 8213DE18h case    0:*/		regs.R4 = regs.R30;
		/* 8213DE18h case    0:*/		return 0x8213DE1C;
		  /* 8213DE1Ch */ case    1:  		/* mr R3, R31 */
		/* 8213DE1Ch case    1:*/		regs.R3 = regs.R31;
		/* 8213DE1Ch case    1:*/		return 0x8213DE20;
		  /* 8213DE20h */ case    2:  		/* lfd FR1, <#[R11 + 1848]> */
		/* 8213DE20h case    2:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000738) );
		/* 8213DE20h case    2:*/		return 0x8213DE24;
		  /* 8213DE24h */ case    3:  		/* bl -265212 */
		/* 8213DE24h case    3:*/		regs.LR = 0x8213DE28; return 0x820FD228;
		/* 8213DE24h case    3:*/		return 0x8213DE28;
		  /* 8213DE28h */ case    4:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213DE28h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213DE28h case    4:*/		return 0x8213DE2C;
		  /* 8213DE2Ch */ case    5:  		/* li R21, 0 */
		/* 8213DE2Ch case    5:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8213DE2Ch case    5:*/		return 0x8213DE30;
		  /* 8213DE30h */ case    6:  		/* stw R3, <#[R31 + 1096]> */
		/* 8213DE30h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000448) );
		/* 8213DE30h case    6:*/		return 0x8213DE34;
		  /* 8213DE34h */ case    7:  		/* lis R25, 24688 */
		/* 8213DE34h case    7:*/		cpu::op::lis<0>(regs,&regs.R25,0x6070);
		/* 8213DE34h case    7:*/		return 0x8213DE38;
		  /* 8213DE38h */ case    8:  		/* stw R21, <#[R31 + 1104]> */
		/* 8213DE38h case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000450) );
		/* 8213DE38h case    8:*/		return 0x8213DE3C;
		  /* 8213DE3Ch */ case    9:  		/* cmplwi CR6, R11, 260 */
		/* 8213DE3Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213DE3Ch case    9:*/		return 0x8213DE40;
		  /* 8213DE40h */ case   10:  		/* bc 4, CR6_EQ, 108 */
		/* 8213DE40h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213DEAC;  }
		/* 8213DE40h case   10:*/		return 0x8213DE44;
		  /* 8213DE44h */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213DE44h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DE44h case   11:*/		return 0x8213DE48;
		  /* 8213DE48h */ case   12:  		/* mr R29, R21 */
		/* 8213DE48h case   12:*/		regs.R29 = regs.R21;
		/* 8213DE48h case   12:*/		return 0x8213DE4C;
		  /* 8213DE4Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8213DE4Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213DE4Ch case   13:*/		return 0x8213DE50;
		  /* 8213DE50h */ case   14:  		/* bc 4, CR6_GT, 76 */
		/* 8213DE50h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8213DE9C;  }
		/* 8213DE50h case   14:*/		return 0x8213DE54;
		  /* 8213DE54h */ case   15:  		/* mr R28, R21 */
		/* 8213DE54h case   15:*/		regs.R28 = regs.R21;
		/* 8213DE54h case   15:*/		return 0x8213DE58;
		  /* 8213DE58h */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213DE58h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213DE58h case   16:*/		return 0x8213DE5C;
		  /* 8213DE5Ch */ case   17:  		/* stw R29, <#[R31 + 256]> */
		/* 8213DE5Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213DE5Ch case   17:*/		return 0x8213DE60;
		  /* 8213DE60h */ case   18:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213DE60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213DE60h case   18:*/		return 0x8213DE64;
		  /* 8213DE64h */ case   19:  		/* stw R11, <#[R31 + 260]> */
		/* 8213DE64h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213DE64h case   19:*/		return 0x8213DE68;
		  /* 8213DE68h */ case   20:  		/* lwz R11, <#[R11]> */
		/* 8213DE68h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213DE68h case   20:*/		return 0x8213DE6C;
		  /* 8213DE6Ch */ case   21:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213DE6Ch case   21:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213DE6Ch case   21:*/		return 0x8213DE70;
		  /* 8213DE70h */ case   22:  		/* cmplw CR6, R11, R25 */
		/* 8213DE70h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8213DE70h case   22:*/		return 0x8213DE74;
		  /* 8213DE74h */ case   23:  		/* bc 4, CR6_EQ, 20 */
		/* 8213DE74h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8213DE88;  }
		/* 8213DE74h case   23:*/		return 0x8213DE78;
		  /* 8213DE78h */ case   24:  		/* mr R3, R31 */
		/* 8213DE78h case   24:*/		regs.R3 = regs.R31;
		/* 8213DE78h case   24:*/		return 0x8213DE7C;
		  /* 8213DE7Ch */ case   25:  		/* bl -58420 */
		/* 8213DE7Ch case   25:*/		regs.LR = 0x8213DE80; return 0x8212FA48;
		/* 8213DE7Ch case   25:*/		return 0x8213DE80;
		  /* 8213DE80h */ case   26:  		/* or. R30, R3, R3 */
		/* 8213DE80h case   26:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213DE80h case   26:*/		return 0x8213DE84;
		  /* 8213DE84h */ case   27:  		/* bc 12, CR0_LT, 3304 */
		/* 8213DE84h case   27:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213DE84h case   27:*/		return 0x8213DE88;
	}
	return 0x8213DE88;
} // Block from 8213DE18h-8213DE88h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213DE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DE88);
		  /* 8213DE88h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213DE88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DE88h case    0:*/		return 0x8213DE8C;
		  /* 8213DE8Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8213DE8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213DE8Ch case    1:*/		return 0x8213DE90;
		  /* 8213DE90h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213DE90h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213DE90h case    2:*/		return 0x8213DE94;
		  /* 8213DE94h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213DE94h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213DE94h case    3:*/		return 0x8213DE98;
		  /* 8213DE98h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213DE98h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213DE58;  }
		/* 8213DE98h case    4:*/		return 0x8213DE9C;
	}
	return 0x8213DE9C;
} // Block from 8213DE88h-8213DE9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213DE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DE9C);
		  /* 8213DE9Ch */ case    0:  		/* mr R3, R31 */
		/* 8213DE9Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213DE9Ch case    0:*/		return 0x8213DEA0;
		  /* 8213DEA0h */ case    1:  		/* bl -366272 */
		/* 8213DEA0h case    1:*/		regs.LR = 0x8213DEA4; return 0x820E47E0;
		/* 8213DEA0h case    1:*/		return 0x8213DEA4;
		  /* 8213DEA4h */ case    2:  		/* mr R3, R31 */
		/* 8213DEA4h case    2:*/		regs.R3 = regs.R31;
		/* 8213DEA4h case    2:*/		return 0x8213DEA8;
		  /* 8213DEA8h */ case    3:  		/* bl -224832 */
		/* 8213DEA8h case    3:*/		regs.LR = 0x8213DEAC; return 0x82107068;
		/* 8213DEA8h case    3:*/		return 0x8213DEAC;
	}
	return 0x8213DEAC;
} // Block from 8213DE9Ch-8213DEACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213DEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DEAC);
		  /* 8213DEACh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213DEACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DEACh case    0:*/		return 0x8213DEB0;
		  /* 8213DEB0h */ case    1:  		/* mr R30, R21 */
		/* 8213DEB0h case    1:*/		regs.R30 = regs.R21;
		/* 8213DEB0h case    1:*/		return 0x8213DEB4;
		  /* 8213DEB4h */ case    2:  		/* mr R26, R21 */
		/* 8213DEB4h case    2:*/		regs.R26 = regs.R21;
		/* 8213DEB4h case    2:*/		return 0x8213DEB8;
		  /* 8213DEB8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213DEB8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213DEB8h case    3:*/		return 0x8213DEBC;
		  /* 8213DEBCh */ case    4:  		/* bc 4, CR6_GT, 328 */
		/* 8213DEBCh case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213E004;  }
		/* 8213DEBCh case    4:*/		return 0x8213DEC0;
		  /* 8213DEC0h */ case    5:  		/* lis R11, -32254 */
		/* 8213DEC0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8213DEC0h case    5:*/		return 0x8213DEC4;
		  /* 8213DEC4h */ case    6:  		/* lis R10, -32253 */
		/* 8213DEC4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8213DEC4h case    6:*/		return 0x8213DEC8;
		  /* 8213DEC8h */ case    7:  		/* mr R28, R21 */
		/* 8213DEC8h case    7:*/		regs.R28 = regs.R21;
		/* 8213DEC8h case    7:*/		return 0x8213DECC;
		  /* 8213DECCh */ case    8:  		/* addi R27, R11, -31928 */
		/* 8213DECCh case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8348);
		/* 8213DECCh case    8:*/		return 0x8213DED0;
		  /* 8213DED0h */ case    9:  		/* addi R29, R10, 23456 */
		/* 8213DED0h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x5BA0);
		/* 8213DED0h case    9:*/		return 0x8213DED4;
		  /* 8213DED4h */ case   10:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213DED4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213DED4h case   10:*/		return 0x8213DED8;
		  /* 8213DED8h */ case   11:  		/* mr R5, R21 */
		/* 8213DED8h case   11:*/		regs.R5 = regs.R21;
		/* 8213DED8h case   11:*/		return 0x8213DEDC;
		  /* 8213DEDCh */ case   12:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213DEDCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213DEDCh case   12:*/		return 0x8213DEE0;
		  /* 8213DEE0h */ case   13:  		/* stw R11, <#[R31 + 260]> */
		/* 8213DEE0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213DEE0h case   13:*/		return 0x8213DEE4;
		  /* 8213DEE4h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 8213DEE4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8213DEE4h case   14:*/		return 0x8213DEE8;
		  /* 8213DEE8h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 8213DEE8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213DEE8h case   15:*/		return 0x8213DEEC;
		  /* 8213DEECh */ case   16:  		/* bc 4, CR6_GT, 168 */
		/* 8213DEECh case   16:*/		if ( !regs.CR[6].gt ) { return 0x8213DF94;  }
		/* 8213DEECh case   16:*/		return 0x8213DEF0;
		  /* 8213DEF0h */ case   17:  		/* lwz R7, <#[R31 + 20]> */
		/* 8213DEF0h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 8213DEF0h case   17:*/		return 0x8213DEF4;
		  /* 8213DEF4h */ case   18:  		/* mr R10, R21 */
		/* 8213DEF4h case   18:*/		regs.R10 = regs.R21;
		/* 8213DEF4h case   18:*/		return 0x8213DEF8;
		  /* 8213DEF8h */ case   19:  		/* lwz R6, <#[R31 + 16]> */
		/* 8213DEF8h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 8213DEF8h case   19:*/		return 0x8213DEFC;
		  /* 8213DEFCh */ case   20:  		/* lwz R9, <#[R11 + 8]> */
		/* 8213DEFCh case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8213DEFCh case   20:*/		return 0x8213DF00;
		  /* 8213DF00h */ case   21:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8213DF00h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213DF00h case   21:*/		return 0x8213DF04;
		  /* 8213DF04h */ case   22:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8213DF04h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8213DF04h case   22:*/		return 0x8213DF08;
		  /* 8213DF08h */ case   23:  		/* lwzx R9, <#[R9 + R7]> */
		/* 8213DF08h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8213DF08h case   23:*/		return 0x8213DF0C;
		  /* 8213DF0Ch */ case   24:  		/* lwz R8, <#[R9 + 4]> */
		/* 8213DF0Ch case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 8213DF0Ch case   24:*/		return 0x8213DF10;
		  /* 8213DF10h */ case   25:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8213DF10h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8213DF10h case   25:*/		return 0x8213DF14;
		  /* 8213DF14h */ case   26:  		/* lwzx R8, <#[R8 + R6]> */
		/* 8213DF14h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R6 + 0x00000000) );
		/* 8213DF14h case   26:*/		return 0x8213DF18;
		  /* 8213DF18h */ case   27:  		/* lwz R8, <#[R8 + 4]> */
		/* 8213DF18h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 8213DF18h case   27:*/		return 0x8213DF1C;
		  /* 8213DF1Ch */ case   28:  		/* rlwinm. R4, R8, 0, 27, 27 */
		/* 8213DF1Ch case   28:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R4,regs.R8);
		/* 8213DF1Ch case   28:*/		return 0x8213DF20;
		  /* 8213DF20h */ case   29:  		/* bc 12, CR0_EQ, 60 */
		/* 8213DF20h case   29:*/		if ( regs.CR[0].eq ) { return 0x8213DF5C;  }
		/* 8213DF20h case   29:*/		return 0x8213DF24;
		  /* 8213DF24h */ case   30:  		/* rlwinm. R8, R8, 0, 22, 22 */
		/* 8213DF24h case   30:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R8,regs.R8);
		/* 8213DF24h case   30:*/		return 0x8213DF28;
		  /* 8213DF28h */ case   31:  		/* bc 4, CR0_EQ, 52 */
		/* 8213DF28h case   31:*/		if ( !regs.CR[0].eq ) { return 0x8213DF5C;  }
		/* 8213DF28h case   31:*/		return 0x8213DF2C;
		  /* 8213DF2Ch */ case   32:  		/* lwz R8, <#[R9 + 16]> */
		/* 8213DF2Ch case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000010) );
		/* 8213DF2Ch case   32:*/		return 0x8213DF30;
		  /* 8213DF30h */ case   33:  		/* cmplwi CR6, R8, 3 */
		/* 8213DF30h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000003);
		/* 8213DF30h case   33:*/		return 0x8213DF34;
		  /* 8213DF34h */ case   34:  		/* bc 4, CR6_EQ, 40 */
		/* 8213DF34h case   34:*/		if ( !regs.CR[6].eq ) { return 0x8213DF5C;  }
		/* 8213DF34h case   34:*/		return 0x8213DF38;
		  /* 8213DF38h */ case   35:  		/* lbz R9, <#[R9 + 111]> */
		/* 8213DF38h case   35:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000006F) );
		/* 8213DF38h case   35:*/		return 0x8213DF3C;
		  /* 8213DF3Ch */ case   36:  		/* cmplwi CR6, R9, 3 */
		/* 8213DF3Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 8213DF3Ch case   36:*/		return 0x8213DF40;
		  /* 8213DF40h */ case   37:  		/* bc 4, CR6_EQ, 28 */
		/* 8213DF40h case   37:*/		if ( !regs.CR[6].eq ) { return 0x8213DF5C;  }
		/* 8213DF40h case   37:*/		return 0x8213DF44;
		  /* 8213DF44h */ case   38:  		/* lwz R9, <#[R11]> */
		/* 8213DF44h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8213DF44h case   38:*/		return 0x8213DF48;
		  /* 8213DF48h */ case   39:  		/* rlwinm R9, R9, 0, 0, 11 */
		/* 8213DF48h case   39:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R9);
		/* 8213DF48h case   39:*/		return 0x8213DF4C;
		  /* 8213DF4Ch */ case   40:  		/* cmplw CR6, R9, R25 */
		/* 8213DF4Ch case   40:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R25);
		/* 8213DF4Ch case   40:*/		return 0x8213DF50;
		  /* 8213DF50h */ case   41:  		/* bc 4, CR6_EQ, 40 */
		/* 8213DF50h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8213DF78;  }
		/* 8213DF50h case   41:*/		return 0x8213DF54;
		  /* 8213DF54h */ case   42:  		/* cmplwi CR6, R10, 28 */
		/* 8213DF54h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001C);
		/* 8213DF54h case   42:*/		return 0x8213DF58;
		  /* 8213DF58h */ case   43:  		/* bc 4, CR6_EQ, 32 */
		/* 8213DF58h case   43:*/		if ( !regs.CR[6].eq ) { return 0x8213DF78;  }
		/* 8213DF58h case   43:*/		return 0x8213DF5C;
	}
	return 0x8213DF5C;
} // Block from 8213DEACh-8213DF5Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8213DF5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DF5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DF5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DF5C);
		  /* 8213DF5Ch */ case    0:  		/* lwz R9, <#[R31 + 260]> */
		/* 8213DF5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 8213DF5Ch case    0:*/		return 0x8213DF60;
		  /* 8213DF60h */ case    1:  		/* addi R5, R5, 1 */
		/* 8213DF60h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8213DF60h case    1:*/		return 0x8213DF64;
		  /* 8213DF64h */ case    2:  		/* addi R10, R10, 4 */
		/* 8213DF64h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213DF64h case    2:*/		return 0x8213DF68;
		  /* 8213DF68h */ case    3:  		/* lwz R9, <#[R9 + 4]> */
		/* 8213DF68h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8213DF68h case    3:*/		return 0x8213DF6C;
		  /* 8213DF6Ch */ case    4:  		/* cmplw CR6, R5, R9 */
		/* 8213DF6Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 8213DF6Ch case    4:*/		return 0x8213DF70;
		  /* 8213DF70h */ case    5:  		/* bc 12, CR6_LT, -116 */
		/* 8213DF70h case    5:*/		if ( regs.CR[6].lt ) { return 0x8213DEFC;  }
		/* 8213DF70h case    5:*/		return 0x8213DF74;
		  /* 8213DF74h */ case    6:  		/* b 32 */
		/* 8213DF74h case    6:*/		return 0x8213DF94;
		/* 8213DF74h case    6:*/		return 0x8213DF78;
	}
	return 0x8213DF78;
} // Block from 8213DF5Ch-8213DF78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213DF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DF78);
		  /* 8213DF78h */ case    0:  		/* mr R6, R29 */
		/* 8213DF78h case    0:*/		regs.R6 = regs.R29;
		/* 8213DF78h case    0:*/		return 0x8213DF7C;
		  /* 8213DF7Ch */ case    1:  		/* lbz R7, <#[R31 + 203]> */
		/* 8213DF7Ch case    1:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000CB) );
		/* 8213DF7Ch case    1:*/		return 0x8213DF80;
		  /* 8213DF80h */ case    2:  		/* li R5, 4512 */
		/* 8213DF80h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11A0);
		/* 8213DF80h case    2:*/		return 0x8213DF84;
		  /* 8213DF84h */ case    3:  		/* lwz R4, <#[R11 + 60]> */
		/* 8213DF84h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213DF84h case    3:*/		return 0x8213DF88;
		  /* 8213DF88h */ case    4:  		/* mr R3, R31 */
		/* 8213DF88h case    4:*/		regs.R3 = regs.R31;
		/* 8213DF88h case    4:*/		return 0x8213DF8C;
		  /* 8213DF8Ch */ case    5:  		/* li R30, 1 */
		/* 8213DF8Ch case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8213DF8Ch case    5:*/		return 0x8213DF90;
		  /* 8213DF90h */ case    6:  		/* bl -194656 */
		/* 8213DF90h case    6:*/		regs.LR = 0x8213DF94; return 0x8210E730;
		/* 8213DF90h case    6:*/		return 0x8213DF94;
	}
	return 0x8213DF94;
} // Block from 8213DF78h-8213DF94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213DF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DF94);
		  /* 8213DF94h */ case    0:  		/* lwz R10, <#[R31 + 260]> */
		/* 8213DF94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213DF94h case    0:*/		return 0x8213DF98;
		  /* 8213DF98h */ case    1:  		/* lis R9, 24672 */
		/* 8213DF98h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x6060);
		/* 8213DF98h case    1:*/		return 0x8213DF9C;
		  /* 8213DF9Ch */ case    2:  		/* lwz R11, <#[R10]> */
		/* 8213DF9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213DF9Ch case    2:*/		return 0x8213DFA0;
		  /* 8213DFA0h */ case    3:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213DFA0h case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213DFA0h case    3:*/		return 0x8213DFA4;
		  /* 8213DFA4h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 8213DFA4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213DFA4h case    4:*/		return 0x8213DFA8;
		  /* 8213DFA8h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 8213DFA8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213DFD0;  }
		/* 8213DFA8h case    5:*/		return 0x8213DFAC;
		  /* 8213DFACh */ case    6:  		/* lis R9, 24752 */
		/* 8213DFACh case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x60B0);
		/* 8213DFACh case    6:*/		return 0x8213DFB0;
		  /* 8213DFB0h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 8213DFB0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213DFB0h case    7:*/		return 0x8213DFB4;
		  /* 8213DFB4h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8213DFB4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213DFD0;  }
		/* 8213DFB4h case    8:*/		return 0x8213DFB8;
		  /* 8213DFB8h */ case    9:  		/* lis R9, 24592 */
		/* 8213DFB8h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0x6010);
		/* 8213DFB8h case    9:*/		return 0x8213DFBC;
		  /* 8213DFBCh */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 8213DFBCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213DFBCh case   10:*/		return 0x8213DFC0;
		  /* 8213DFC0h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 8213DFC0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8213DFD0;  }
		/* 8213DFC0h case   11:*/		return 0x8213DFC4;
		  /* 8213DFC4h */ case   12:  		/* lis R9, 24832 */
		/* 8213DFC4h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x6100);
		/* 8213DFC4h case   12:*/		return 0x8213DFC8;
		  /* 8213DFC8h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 8213DFC8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8213DFC8h case   13:*/		return 0x8213DFCC;
		  /* 8213DFCCh */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 8213DFCCh case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213DFE8;  }
		/* 8213DFCCh case   14:*/		return 0x8213DFD0;
	}
	return 0x8213DFD0;
} // Block from 8213DF94h-8213DFD0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8213DFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DFD0);
		  /* 8213DFD0h */ case    0:  		/* mr R6, R27 */
		/* 8213DFD0h case    0:*/		regs.R6 = regs.R27;
		/* 8213DFD0h case    0:*/		return 0x8213DFD4;
		  /* 8213DFD4h */ case    1:  		/* lwz R4, <#[R10 + 60]> */
		/* 8213DFD4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 8213DFD4h case    1:*/		return 0x8213DFD8;
		  /* 8213DFD8h */ case    2:  		/* li R5, 4532 */
		/* 8213DFD8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 8213DFD8h case    2:*/		return 0x8213DFDC;
		  /* 8213DFDCh */ case    3:  		/* mr R3, R31 */
		/* 8213DFDCh case    3:*/		regs.R3 = regs.R31;
		/* 8213DFDCh case    3:*/		return 0x8213DFE0;
		  /* 8213DFE0h */ case    4:  		/* bl -194736 */
		/* 8213DFE0h case    4:*/		regs.LR = 0x8213DFE4; return 0x8210E730;
		/* 8213DFE0h case    4:*/		return 0x8213DFE4;
		  /* 8213DFE4h */ case    5:  		/* li R30, 1 */
		/* 8213DFE4h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8213DFE4h case    5:*/		return 0x8213DFE8;
	}
	return 0x8213DFE8;
} // Block from 8213DFD0h-8213DFE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213DFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213DFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213DFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213DFE8);
		  /* 8213DFE8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213DFE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213DFE8h case    0:*/		return 0x8213DFEC;
		  /* 8213DFECh */ case    1:  		/* addi R26, R26, 1 */
		/* 8213DFECh case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8213DFECh case    1:*/		return 0x8213DFF0;
		  /* 8213DFF0h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213DFF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213DFF0h case    2:*/		return 0x8213DFF4;
		  /* 8213DFF4h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 8213DFF4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 8213DFF4h case    3:*/		return 0x8213DFF8;
		  /* 8213DFF8h */ case    4:  		/* bc 12, CR6_LT, -292 */
		/* 8213DFF8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213DED4;  }
		/* 8213DFF8h case    4:*/		return 0x8213DFFC;
		  /* 8213DFFCh */ case    5:  		/* cmpwi CR6, R30, 0 */
		/* 8213DFFCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213DFFCh case    5:*/		return 0x8213E000;
		  /* 8213E000h */ case    6:  		/* bc 4, CR6_EQ, 2584 */
		/* 8213E000h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8213EA18;  }
		/* 8213E000h case    6:*/		return 0x8213E004;
	}
	return 0x8213E004;
} // Block from 8213DFE8h-8213E004h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213E004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E004);
		  /* 8213E004h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8213E004h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8213E004h case    0:*/		return 0x8213E008;
		  /* 8213E008h */ case    1:  		/* li R25, -1 */
		/* 8213E008h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0xFFFFFFFF);
		/* 8213E008h case    1:*/		return 0x8213E00C;
		  /* 8213E00Ch */ case    2:  		/* li R7, 20 */
		/* 8213E00Ch case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x14);
		/* 8213E00Ch case    2:*/		return 0x8213E010;
		  /* 8213E010h */ case    3:  		/* mr R9, R21 */
		/* 8213E010h case    3:*/		regs.R9 = regs.R21;
		/* 8213E010h case    3:*/		return 0x8213E014;
		  /* 8213E014h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213E014h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E014h case    4:*/		return 0x8213E018;
		  /* 8213E018h */ case    5:  		/* bc 4, CR6_GT, 116 */
		/* 8213E018h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213E08C;  }
		/* 8213E018h case    5:*/		return 0x8213E01C;
		  /* 8213E01Ch */ case    6:  		/* mr R11, R21 */
		/* 8213E01Ch case    6:*/		regs.R11 = regs.R21;
		/* 8213E01Ch case    6:*/		return 0x8213E020;
		  /* 8213E020h */ case    7:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213E020h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213E020h case    7:*/		return 0x8213E024;
		  /* 8213E024h */ case    8:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8213E024h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213E024h case    8:*/		return 0x8213E028;
		  /* 8213E028h */ case    9:  		/* stw R25, <#[R10 + 56]> */
		/* 8213E028h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R10 + 0x00000038) );
		/* 8213E028h case    9:*/		return 0x8213E02C;
		  /* 8213E02Ch */ case   10:  		/* lwz R8, <#[R31 + 128]> */
		/* 8213E02Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000080) );
		/* 8213E02Ch case   10:*/		return 0x8213E030;
		  /* 8213E030h */ case   11:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213E030h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213E030h case   11:*/		return 0x8213E034;
		  /* 8213E034h */ case   12:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8213E034h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213E034h case   12:*/		return 0x8213E038;
		  /* 8213E038h */ case   13:  		/* lwz R6, <#[R10 + 4]> */
		/* 8213E038h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8213E038h case   13:*/		return 0x8213E03C;
		  /* 8213E03Ch */ case   14:  		/* cmplw CR6, R6, R8 */
		/* 8213E03Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R8);
		/* 8213E03Ch case   14:*/		return 0x8213E040;
		  /* 8213E040h */ case   15:  		/* bc 4, CR6_EQ, 56 */
		/* 8213E040h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8213E078;  }
		/* 8213E040h case   15:*/		return 0x8213E044;
		  /* 8213E044h */ case   16:  		/* lbz R8, <#[R10 + 111]> */
		/* 8213E044h case   16:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000006F) );
		/* 8213E044h case   16:*/		return 0x8213E048;
		  /* 8213E048h */ case   17:  		/* cmplwi CR6, R8, 1 */
		/* 8213E048h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 8213E048h case   17:*/		return 0x8213E04C;
		  /* 8213E04Ch */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 8213E04Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x8213E054;  }
		/* 8213E04Ch case   18:*/		return 0x8213E050;
		  /* 8213E050h */ case   19:  		/* stw R7, <#[R10]> */
		/* 8213E050h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8213E050h case   19:*/		return 0x8213E054;
	}
	return 0x8213E054;
} // Block from 8213E004h-8213E054h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213E054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E054);
		  /* 8213E054h */ case    0:  		/* lhz R10, <#[R31 + 202]> */
		/* 8213E054h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213E054h case    0:*/		return 0x8213E058;
		  /* 8213E058h */ case    1:  		/* cmplwi CR6, R10, 260 */
		/* 8213E058h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000104);
		/* 8213E058h case    1:*/		return 0x8213E05C;
		  /* 8213E05Ch */ case    2:  		/* bc 4, CR6_LT, 28 */
		/* 8213E05Ch case    2:*/		if ( !regs.CR[6].lt ) { return 0x8213E078;  }
		/* 8213E05Ch case    2:*/		return 0x8213E060;
		  /* 8213E060h */ case    3:  		/* lwz R10, <#[R31 + 20]> */
		/* 8213E060h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8213E060h case    3:*/		return 0x8213E064;
		  /* 8213E064h */ case    4:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8213E064h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213E064h case    4:*/		return 0x8213E068;
		  /* 8213E068h */ case    5:  		/* lbz R8, <#[R10 + 111]> */
		/* 8213E068h case    5:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000006F) );
		/* 8213E068h case    5:*/		return 0x8213E06C;
		  /* 8213E06Ch */ case    6:  		/* cmplwi CR6, R8, 3 */
		/* 8213E06Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000003);
		/* 8213E06Ch case    6:*/		return 0x8213E070;
		  /* 8213E070h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8213E070h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213E078;  }
		/* 8213E070h case    7:*/		return 0x8213E074;
		  /* 8213E074h */ case    8:  		/* stw R7, <#[R10]> */
		/* 8213E074h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8213E074h case    8:*/		return 0x8213E078;
	}
	return 0x8213E078;
} // Block from 8213E054h-8213E078h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213E078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E078);
		  /* 8213E078h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8213E078h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8213E078h case    0:*/		return 0x8213E07C;
		  /* 8213E07Ch */ case    1:  		/* addi R9, R9, 1 */
		/* 8213E07Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213E07Ch case    1:*/		return 0x8213E080;
		  /* 8213E080h */ case    2:  		/* addi R11, R11, 4 */
		/* 8213E080h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213E080h case    2:*/		return 0x8213E084;
		  /* 8213E084h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 8213E084h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8213E084h case    3:*/		return 0x8213E088;
		  /* 8213E088h */ case    4:  		/* bc 12, CR6_LT, -104 */
		/* 8213E088h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E020;  }
		/* 8213E088h case    4:*/		return 0x8213E08C;
	}
	return 0x8213E08C;
} // Block from 8213E078h-8213E08Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E08Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E08C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E08C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E08C);
		  /* 8213E08Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E08Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E08Ch case    0:*/		return 0x8213E090;
		  /* 8213E090h */ case    1:  		/* mr R9, R21 */
		/* 8213E090h case    1:*/		regs.R9 = regs.R21;
		/* 8213E090h case    1:*/		return 0x8213E094;
		  /* 8213E094h */ case    2:  		/* lis R22, 24816 */
		/* 8213E094h case    2:*/		cpu::op::lis<0>(regs,&regs.R22,0x60F0);
		/* 8213E094h case    2:*/		return 0x8213E098;
		  /* 8213E098h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213E098h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E098h case    3:*/		return 0x8213E09C;
		  /* 8213E09Ch */ case    4:  		/* bc 4, CR6_GT, 176 */
		/* 8213E09Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213E14C;  }
		/* 8213E09Ch case    4:*/		return 0x8213E0A0;
		  /* 8213E0A0h */ case    5:  		/* mr R8, R21 */
		/* 8213E0A0h case    5:*/		regs.R8 = regs.R21;
		/* 8213E0A0h case    5:*/		return 0x8213E0A4;
		  /* 8213E0A4h */ case    6:  		/* stw R9, <#[R31 + 256]> */
		/* 8213E0A4h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E0A4h case    6:*/		return 0x8213E0A8;
		  /* 8213E0A8h */ case    7:  		/* lis R6, 24576 */
		/* 8213E0A8h case    7:*/		cpu::op::lis<0>(regs,&regs.R6,0x6000);
		/* 8213E0A8h case    7:*/		return 0x8213E0AC;
		  /* 8213E0ACh */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E0ACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E0ACh case    8:*/		return 0x8213E0B0;
		  /* 8213E0B0h */ case    9:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8213E0B0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8213E0B0h case    9:*/		return 0x8213E0B4;
		  /* 8213E0B4h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E0B4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E0B4h case   10:*/		return 0x8213E0B8;
		  /* 8213E0B8h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 8213E0B8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E0B8h case   11:*/		return 0x8213E0BC;
		  /* 8213E0BCh */ case   12:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213E0BCh case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213E0BCh case   12:*/		return 0x8213E0C0;
		  /* 8213E0C0h */ case   13:  		/* cmplw CR6, R10, R6 */
		/* 8213E0C0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213E0C0h case   13:*/		return 0x8213E0C4;
		  /* 8213E0C4h */ case   14:  		/* bc 12, CR6_EQ, 36 */
		/* 8213E0C4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213E0E8;  }
		/* 8213E0C4h case   14:*/		return 0x8213E0C8;
		  /* 8213E0C8h */ case   15:  		/* lis R6, 24656 */
		/* 8213E0C8h case   15:*/		cpu::op::lis<0>(regs,&regs.R6,0x6050);
		/* 8213E0C8h case   15:*/		return 0x8213E0CC;
		  /* 8213E0CCh */ case   16:  		/* cmplw CR6, R10, R6 */
		/* 8213E0CCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213E0CCh case   16:*/		return 0x8213E0D0;
		  /* 8213E0D0h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 8213E0D0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8213E0E8;  }
		/* 8213E0D0h case   17:*/		return 0x8213E0D4;
		  /* 8213E0D4h */ case   18:  		/* lis R6, 24736 */
		/* 8213E0D4h case   18:*/		cpu::op::lis<0>(regs,&regs.R6,0x60A0);
		/* 8213E0D4h case   18:*/		return 0x8213E0D8;
		  /* 8213E0D8h */ case   19:  		/* cmplw CR6, R10, R6 */
		/* 8213E0D8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213E0D8h case   19:*/		return 0x8213E0DC;
		  /* 8213E0DCh */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 8213E0DCh case   20:*/		if ( regs.CR[6].eq ) { return 0x8213E0E8;  }
		/* 8213E0DCh case   20:*/		return 0x8213E0E0;
		  /* 8213E0E0h */ case   21:  		/* cmplw CR6, R10, R22 */
		/* 8213E0E0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 8213E0E0h case   21:*/		return 0x8213E0E4;
		  /* 8213E0E4h */ case   22:  		/* bc 4, CR6_EQ, 76 */
		/* 8213E0E4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8213E130;  }
		/* 8213E0E4h case   22:*/		return 0x8213E0E8;
	}
	return 0x8213E0E8;
} // Block from 8213E08Ch-8213E0E8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8213E0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E0E8);
		  /* 8213E0E8h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 8213E0E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213E0E8h case    0:*/		return 0x8213E0EC;
		  /* 8213E0ECh */ case    1:  		/* mr R10, R21 */
		/* 8213E0ECh case    1:*/		regs.R10 = regs.R21;
		/* 8213E0ECh case    1:*/		return 0x8213E0F0;
		  /* 8213E0F0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213E0F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E0F0h case    2:*/		return 0x8213E0F4;
		  /* 8213E0F4h */ case    3:  		/* bc 4, CR6_GT, 60 */
		/* 8213E0F4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213E130;  }
		/* 8213E0F4h case    3:*/		return 0x8213E0F8;
		  /* 8213E0F8h */ case    4:  		/* mr R11, R21 */
		/* 8213E0F8h case    4:*/		regs.R11 = regs.R21;
		/* 8213E0F8h case    4:*/		return 0x8213E0FC;
		  /* 8213E0FCh */ case    5:  		/* lwz R6, <#[R31 + 260]> */
		/* 8213E0FCh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E0FCh case    5:*/		return 0x8213E100;
		  /* 8213E100h */ case    6:  		/* addi R10, R10, 1 */
		/* 8213E100h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213E100h case    6:*/		return 0x8213E104;
		  /* 8213E104h */ case    7:  		/* lwz R5, <#[R31 + 20]> */
		/* 8213E104h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 8213E104h case    7:*/		return 0x8213E108;
		  /* 8213E108h */ case    8:  		/* lwz R6, <#[R6 + 16]> */
		/* 8213E108h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000010) );
		/* 8213E108h case    8:*/		return 0x8213E10C;
		  /* 8213E10Ch */ case    9:  		/* lwzx R6, <#[R6 + R11]> */
		/* 8213E10Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8213E10Ch case    9:*/		return 0x8213E110;
		  /* 8213E110h */ case   10:  		/* addi R11, R11, 4 */
		/* 8213E110h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213E110h case   10:*/		return 0x8213E114;
		  /* 8213E114h */ case   11:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8213E114h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8213E114h case   11:*/		return 0x8213E118;
		  /* 8213E118h */ case   12:  		/* lwzx R6, <#[R6 + R5]> */
		/* 8213E118h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 8213E118h case   12:*/		return 0x8213E11C;
		  /* 8213E11Ch */ case   13:  		/* stw R7, <#[R6]> */
		/* 8213E11Ch case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 8213E11Ch case   13:*/		return 0x8213E120;
		  /* 8213E120h */ case   14:  		/* lwz R6, <#[R31 + 260]> */
		/* 8213E120h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E120h case   14:*/		return 0x8213E124;
		  /* 8213E124h */ case   15:  		/* lwz R6, <#[R6 + 12]> */
		/* 8213E124h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x0000000C) );
		/* 8213E124h case   15:*/		return 0x8213E128;
		  /* 8213E128h */ case   16:  		/* cmplw CR6, R10, R6 */
		/* 8213E128h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8213E128h case   16:*/		return 0x8213E12C;
		  /* 8213E12Ch */ case   17:  		/* bc 12, CR6_LT, -48 */
		/* 8213E12Ch case   17:*/		if ( regs.CR[6].lt ) { return 0x8213E0FC;  }
		/* 8213E12Ch case   17:*/		return 0x8213E130;
	}
	return 0x8213E130;
} // Block from 8213E0E8h-8213E130h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213E130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E130);
		  /* 8213E130h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 8213E130h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E130h case    0:*/		return 0x8213E134;
		  /* 8213E134h */ case    1:  		/* addi R9, R9, 1 */
		/* 8213E134h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213E134h case    1:*/		return 0x8213E138;
		  /* 8213E138h */ case    2:  		/* addi R8, R8, 4 */
		/* 8213E138h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8213E138h case    2:*/		return 0x8213E13C;
		  /* 8213E13Ch */ case    3:  		/* stw R21, <#[R11 + 36]> */
		/* 8213E13Ch case    3:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000024) );
		/* 8213E13Ch case    3:*/		return 0x8213E140;
		  /* 8213E140h */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E140h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E140h case    4:*/		return 0x8213E144;
		  /* 8213E144h */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 8213E144h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8213E144h case    5:*/		return 0x8213E148;
		  /* 8213E148h */ case    6:  		/* bc 12, CR6_LT, -164 */
		/* 8213E148h case    6:*/		if ( regs.CR[6].lt ) { return 0x8213E0A4;  }
		/* 8213E148h case    6:*/		return 0x8213E14C;
	}
	return 0x8213E14C;
} // Block from 8213E130h-8213E14Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213E14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E14C);
		  /* 8213E14Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E14Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E14Ch case    0:*/		return 0x8213E150;
		  /* 8213E150h */ case    1:  		/* mr R29, R21 */
		/* 8213E150h case    1:*/		regs.R29 = regs.R21;
		/* 8213E150h case    1:*/		return 0x8213E154;
		  /* 8213E154h */ case    2:  		/* lis R27, 12288 */
		/* 8213E154h case    2:*/		cpu::op::lis<0>(regs,&regs.R27,0x3000);
		/* 8213E154h case    2:*/		return 0x8213E158;
		  /* 8213E158h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213E158h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E158h case    3:*/		return 0x8213E15C;
		  /* 8213E15Ch */ case    4:  		/* bc 4, CR6_GT, 104 */
		/* 8213E15Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213E1C4;  }
		/* 8213E15Ch case    4:*/		return 0x8213E160;
		  /* 8213E160h */ case    5:  		/* mr R28, R21 */
		/* 8213E160h case    5:*/		regs.R28 = regs.R21;
		/* 8213E160h case    5:*/		return 0x8213E164;
		  /* 8213E164h */ case    6:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E164h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E164h case    6:*/		return 0x8213E168;
		  /* 8213E168h */ case    7:  		/* lis R10, 8192 */
		/* 8213E168h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 8213E168h case    7:*/		return 0x8213E16C;
		  /* 8213E16Ch */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E16Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E16Ch case    8:*/		return 0x8213E170;
		  /* 8213E170h */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E170h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E170h case    9:*/		return 0x8213E174;
		  /* 8213E174h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E174h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E174h case   10:*/		return 0x8213E178;
		  /* 8213E178h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E178h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E178h case   11:*/		return 0x8213E17C;
		  /* 8213E17Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E17Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E17Ch case   12:*/		return 0x8213E180;
		  /* 8213E180h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8213E180h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E180h case   13:*/		return 0x8213E184;
		  /* 8213E184h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 8213E184h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213E19C;  }
		/* 8213E184h case   14:*/		return 0x8213E188;
		  /* 8213E188h */ case   15:  		/* lis R10, 8208 */
		/* 8213E188h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x2010);
		/* 8213E188h case   15:*/		return 0x8213E18C;
		  /* 8213E18Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8213E18Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E18Ch case   16:*/		return 0x8213E190;
		  /* 8213E190h */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 8213E190h case   17:*/		if ( regs.CR[6].eq ) { return 0x8213E19C;  }
		/* 8213E190h case   17:*/		return 0x8213E194;
		  /* 8213E194h */ case   18:  		/* cmplw CR6, R11, R27 */
		/* 8213E194h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213E194h case   18:*/		return 0x8213E198;
		  /* 8213E198h */ case   19:  		/* bc 4, CR6_EQ, 24 */
		/* 8213E198h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8213E1B0;  }
		/* 8213E198h case   19:*/		return 0x8213E19C;
	}
	return 0x8213E19C;
} // Block from 8213E14Ch-8213E19Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213E19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E19C);
		  /* 8213E19Ch */ case    0:  		/* mr R3, R31 */
		/* 8213E19Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213E19Ch case    0:*/		return 0x8213E1A0;
		  /* 8213E1A0h */ case    1:  		/* bl -323144 */
		/* 8213E1A0h case    1:*/		regs.LR = 0x8213E1A4; return 0x820EF358;
		/* 8213E1A0h case    1:*/		return 0x8213E1A4;
		  /* 8213E1A4h */ case    2:  		/* mr R30, R3 */
		/* 8213E1A4h case    2:*/		regs.R30 = regs.R3;
		/* 8213E1A4h case    2:*/		return 0x8213E1A8;
		  /* 8213E1A8h */ case    3:  		/* cmpwi CR6, R3, 0 */
		/* 8213E1A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213E1A8h case    3:*/		return 0x8213E1AC;
		  /* 8213E1ACh */ case    4:  		/* bc 12, CR6_LT, 2496 */
		/* 8213E1ACh case    4:*/		if ( regs.CR[6].lt ) { return 0x8213EB6C;  }
		/* 8213E1ACh case    4:*/		return 0x8213E1B0;
	}
	return 0x8213E1B0;
} // Block from 8213E19Ch-8213E1B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E1B0);
		  /* 8213E1B0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E1B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E1B0h case    0:*/		return 0x8213E1B4;
		  /* 8213E1B4h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E1B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E1B4h case    1:*/		return 0x8213E1B8;
		  /* 8213E1B8h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E1B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E1B8h case    2:*/		return 0x8213E1BC;
		  /* 8213E1BCh */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E1BCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E1BCh case    3:*/		return 0x8213E1C0;
		  /* 8213E1C0h */ case    4:  		/* bc 12, CR6_LT, -92 */
		/* 8213E1C0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E164;  }
		/* 8213E1C0h case    4:*/		return 0x8213E1C4;
	}
	return 0x8213E1C4;
} // Block from 8213E1B0h-8213E1C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E1C4);
		  /* 8213E1C4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E1C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E1C4h case    0:*/		return 0x8213E1C8;
		  /* 8213E1C8h */ case    1:  		/* mr R29, R21 */
		/* 8213E1C8h case    1:*/		regs.R29 = regs.R21;
		/* 8213E1C8h case    1:*/		return 0x8213E1CC;
		  /* 8213E1CCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213E1CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E1CCh case    2:*/		return 0x8213E1D0;
		  /* 8213E1D0h */ case    3:  		/* bc 4, CR6_GT, 76 */
		/* 8213E1D0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213E21C;  }
		/* 8213E1D0h case    3:*/		return 0x8213E1D4;
		  /* 8213E1D4h */ case    4:  		/* mr R28, R21 */
		/* 8213E1D4h case    4:*/		regs.R28 = regs.R21;
		/* 8213E1D4h case    4:*/		return 0x8213E1D8;
		  /* 8213E1D8h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E1D8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E1D8h case    5:*/		return 0x8213E1DC;
		  /* 8213E1DCh */ case    6:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E1DCh case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E1DCh case    6:*/		return 0x8213E1E0;
		  /* 8213E1E0h */ case    7:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E1E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E1E0h case    7:*/		return 0x8213E1E4;
		  /* 8213E1E4h */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E1E4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E1E4h case    8:*/		return 0x8213E1E8;
		  /* 8213E1E8h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8213E1E8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E1E8h case    9:*/		return 0x8213E1EC;
		  /* 8213E1ECh */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E1ECh case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E1ECh case   10:*/		return 0x8213E1F0;
		  /* 8213E1F0h */ case   11:  		/* cmplw CR6, R11, R27 */
		/* 8213E1F0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213E1F0h case   11:*/		return 0x8213E1F4;
		  /* 8213E1F4h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 8213E1F4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213E208;  }
		/* 8213E1F4h case   12:*/		return 0x8213E1F8;
		  /* 8213E1F8h */ case   13:  		/* mr R3, R31 */
		/* 8213E1F8h case   13:*/		regs.R3 = regs.R31;
		/* 8213E1F8h case   13:*/		return 0x8213E1FC;
		  /* 8213E1FCh */ case   14:  		/* bl -47420 */
		/* 8213E1FCh case   14:*/		regs.LR = 0x8213E200; return 0x821328C0;
		/* 8213E1FCh case   14:*/		return 0x8213E200;
		  /* 8213E200h */ case   15:  		/* or. R30, R3, R3 */
		/* 8213E200h case   15:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E200h case   15:*/		return 0x8213E204;
		  /* 8213E204h */ case   16:  		/* bc 12, CR0_LT, 2408 */
		/* 8213E204h case   16:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E204h case   16:*/		return 0x8213E208;
	}
	return 0x8213E208;
} // Block from 8213E1C4h-8213E208h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213E208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E208);
		  /* 8213E208h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E208h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E208h case    0:*/		return 0x8213E20C;
		  /* 8213E20Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E20Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E20Ch case    1:*/		return 0x8213E210;
		  /* 8213E210h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E210h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E210h case    2:*/		return 0x8213E214;
		  /* 8213E214h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E214h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E214h case    3:*/		return 0x8213E218;
		  /* 8213E218h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213E218h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E1D8;  }
		/* 8213E218h case    4:*/		return 0x8213E21C;
	}
	return 0x8213E21C;
} // Block from 8213E208h-8213E21Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E21C);
		  /* 8213E21Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E21Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E21Ch case    0:*/		return 0x8213E220;
		  /* 8213E220h */ case    1:  		/* mr R29, R21 */
		/* 8213E220h case    1:*/		regs.R29 = regs.R21;
		/* 8213E220h case    1:*/		return 0x8213E224;
		  /* 8213E224h */ case    2:  		/* lis R27, 4112 */
		/* 8213E224h case    2:*/		cpu::op::lis<0>(regs,&regs.R27,0x1010);
		/* 8213E224h case    2:*/		return 0x8213E228;
		  /* 8213E228h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213E228h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E228h case    3:*/		return 0x8213E22C;
		  /* 8213E22Ch */ case    4:  		/* bc 4, CR6_GT, 104 */
		/* 8213E22Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213E294;  }
		/* 8213E22Ch case    4:*/		return 0x8213E230;
		  /* 8213E230h */ case    5:  		/* mr R28, R21 */
		/* 8213E230h case    5:*/		regs.R28 = regs.R21;
		/* 8213E230h case    5:*/		return 0x8213E234;
		  /* 8213E234h */ case    6:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E234h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E234h case    6:*/		return 0x8213E238;
		  /* 8213E238h */ case    7:  		/* lis R10, 4096 */
		/* 8213E238h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 8213E238h case    7:*/		return 0x8213E23C;
		  /* 8213E23Ch */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E23Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E23Ch case    8:*/		return 0x8213E240;
		  /* 8213E240h */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E240h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E240h case    9:*/		return 0x8213E244;
		  /* 8213E244h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E244h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E244h case   10:*/		return 0x8213E248;
		  /* 8213E248h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E248h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E248h case   11:*/		return 0x8213E24C;
		  /* 8213E24Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E24Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E24Ch case   12:*/		return 0x8213E250;
		  /* 8213E250h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8213E250h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E250h case   13:*/		return 0x8213E254;
		  /* 8213E254h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 8213E254h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213E26C;  }
		/* 8213E254h case   14:*/		return 0x8213E258;
		  /* 8213E258h */ case   15:  		/* cmplw CR6, R11, R27 */
		/* 8213E258h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213E258h case   15:*/		return 0x8213E25C;
		  /* 8213E25Ch */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 8213E25Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x8213E280;  }
		/* 8213E25Ch case   16:*/		return 0x8213E260;
		  /* 8213E260h */ case   17:  		/* mr R3, R31 */
		/* 8213E260h case   17:*/		regs.R3 = regs.R31;
		/* 8213E260h case   17:*/		return 0x8213E264;
		  /* 8213E264h */ case   18:  		/* bl -57604 */
		/* 8213E264h case   18:*/		regs.LR = 0x8213E268; return 0x82130160;
		/* 8213E264h case   18:*/		return 0x8213E268;
		  /* 8213E268h */ case   19:  		/* b 12 */
		/* 8213E268h case   19:*/		return 0x8213E274;
		/* 8213E268h case   19:*/		return 0x8213E26C;
	}
	return 0x8213E26C;
} // Block from 8213E21Ch-8213E26Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213E26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E26C);
		  /* 8213E26Ch */ case    0:  		/* mr R3, R31 */
		/* 8213E26Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213E26Ch case    0:*/		return 0x8213E270;
		  /* 8213E270h */ case    1:  		/* bl -57976 */
		/* 8213E270h case    1:*/		regs.LR = 0x8213E274; return 0x8212FFF8;
		/* 8213E270h case    1:*/		return 0x8213E274;
	}
	return 0x8213E274;
} // Block from 8213E26Ch-8213E274h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213E274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E274);
		  /* 8213E274h */ case    0:  		/* mr R30, R3 */
		/* 8213E274h case    0:*/		regs.R30 = regs.R3;
		/* 8213E274h case    0:*/		return 0x8213E278;
		  /* 8213E278h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 8213E278h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213E278h case    1:*/		return 0x8213E27C;
		  /* 8213E27Ch */ case    2:  		/* bc 12, CR6_LT, 2288 */
		/* 8213E27Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8213EB6C;  }
		/* 8213E27Ch case    2:*/		return 0x8213E280;
	}
	return 0x8213E280;
} // Block from 8213E274h-8213E280h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E280);
		  /* 8213E280h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E280h case    0:*/		return 0x8213E284;
		  /* 8213E284h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E284h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E284h case    1:*/		return 0x8213E288;
		  /* 8213E288h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E288h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E288h case    2:*/		return 0x8213E28C;
		  /* 8213E28Ch */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E28Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E28Ch case    3:*/		return 0x8213E290;
		  /* 8213E290h */ case    4:  		/* bc 12, CR6_LT, -92 */
		/* 8213E290h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E234;  }
		/* 8213E290h case    4:*/		return 0x8213E294;
	}
	return 0x8213E294;
} // Block from 8213E280h-8213E294h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E294);
		  /* 8213E294h */ case    0:  		/* mr R3, R31 */
		/* 8213E294h case    0:*/		regs.R3 = regs.R31;
		/* 8213E294h case    0:*/		return 0x8213E298;
	}
	return 0x8213E298;
} // Block from 8213E294h-8213E298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213E298h
// Function '?EmitInstructions@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E298);
		  /* 8213E298h */ case    0:  		/* bl -367288 */
		/* 8213E298h case    0:*/		regs.LR = 0x8213E29C; return 0x820E47E0;
		/* 8213E298h case    0:*/		return 0x8213E29C;
		  /* 8213E29Ch */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E29Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E29Ch case    1:*/		return 0x8213E2A0;
		  /* 8213E2A0h */ case    2:  		/* mr R29, R21 */
		/* 8213E2A0h case    2:*/		regs.R29 = regs.R21;
		/* 8213E2A0h case    2:*/		return 0x8213E2A4;
		  /* 8213E2A4h */ case    3:  		/* lis R26, 8256 */
		/* 8213E2A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R26,0x2040);
		/* 8213E2A4h case    3:*/		return 0x8213E2A8;
		  /* 8213E2A8h */ case    4:  		/* lis R23, 8272 */
		/* 8213E2A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R23,0x2050);
		/* 8213E2A8h case    4:*/		return 0x8213E2AC;
		  /* 8213E2ACh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8213E2ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E2ACh case    5:*/		return 0x8213E2B0;
		  /* 8213E2B0h */ case    6:  		/* bc 4, CR6_GT, 184 */
		/* 8213E2B0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8213E368;  }
		/* 8213E2B0h case    6:*/		return 0x8213E2B4;
		  /* 8213E2B4h */ case    7:  		/* mr R28, R21 */
		/* 8213E2B4h case    7:*/		regs.R28 = regs.R21;
		/* 8213E2B4h case    7:*/		return 0x8213E2B8;
		  /* 8213E2B8h */ case    8:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E2B8h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E2B8h case    8:*/		return 0x8213E2BC;
		  /* 8213E2BCh */ case    9:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E2BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E2BCh case    9:*/		return 0x8213E2C0;
		  /* 8213E2C0h */ case   10:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E2C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E2C0h case   10:*/		return 0x8213E2C4;
		  /* 8213E2C4h */ case   11:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E2C4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E2C4h case   11:*/		return 0x8213E2C8;
		  /* 8213E2C8h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8213E2C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E2C8h case   12:*/		return 0x8213E2CC;
		  /* 8213E2CCh */ case   13:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E2CCh case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E2CCh case   13:*/		return 0x8213E2D0;
		  /* 8213E2D0h */ case   14:  		/* cmplw CR6, R11, R27 */
		/* 8213E2D0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213E2D0h case   14:*/		return 0x8213E2D4;
		  /* 8213E2D4h */ case   15:  		/* bc 12, CR6_EQ, 96 */
		/* 8213E2D4h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213E334;  }
		/* 8213E2D4h case   15:*/		return 0x8213E2D8;
		  /* 8213E2D8h */ case   16:  		/* cmplw CR6, R11, R26 */
		/* 8213E2D8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8213E2D8h case   16:*/		return 0x8213E2DC;
		  /* 8213E2DCh */ case   17:  		/* bc 12, CR6_EQ, 48 */
		/* 8213E2DCh case   17:*/		if ( regs.CR[6].eq ) { return 0x8213E30C;  }
		/* 8213E2DCh case   17:*/		return 0x8213E2E0;
		  /* 8213E2E0h */ case   18:  		/* cmplw CR6, R11, R23 */
		/* 8213E2E0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213E2E0h case   18:*/		return 0x8213E2E4;
		  /* 8213E2E4h */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 8213E2E4h case   19:*/		if ( regs.CR[6].eq ) { return 0x8213E300;  }
		/* 8213E2E4h case   19:*/		return 0x8213E2E8;
		  /* 8213E2E8h */ case   20:  		/* lis R10, 20480 */
		/* 8213E2E8h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 8213E2E8h case   20:*/		return 0x8213E2EC;
		  /* 8213E2ECh */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8213E2ECh case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E2ECh case   21:*/		return 0x8213E2F0;
		  /* 8213E2F0h */ case   22:  		/* bc 4, CR6_EQ, 100 */
		/* 8213E2F0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8213E354;  }
		/* 8213E2F0h case   22:*/		return 0x8213E2F4;
		  /* 8213E2F4h */ case   23:  		/* mr R3, R31 */
		/* 8213E2F4h case   23:*/		regs.R3 = regs.R31;
		/* 8213E2F4h case   23:*/		return 0x8213E2F8;
		  /* 8213E2F8h */ case   24:  		/* bl -360216 */
		/* 8213E2F8h case   24:*/		regs.LR = 0x8213E2FC; return 0x820E63E0;
		/* 8213E2F8h case   24:*/		return 0x8213E2FC;
		  /* 8213E2FCh */ case   25:  		/* b 76 */
		/* 8213E2FCh case   25:*/		return 0x8213E348;
		/* 8213E2FCh case   25:*/		return 0x8213E300;
	}
	return 0x8213E300;
} // Block from 8213E298h-8213E300h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8213E300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E300);
		  /* 8213E300h */ case    0:  		/* mr R3, R31 */
		/* 8213E300h case    0:*/		regs.R3 = regs.R31;
		/* 8213E300h case    0:*/		return 0x8213E304;
		  /* 8213E304h */ case    1:  		/* bl -308772 */
		/* 8213E304h case    1:*/		regs.LR = 0x8213E308; return 0x820F2CE0;
		/* 8213E304h case    1:*/		return 0x8213E308;
		  /* 8213E308h */ case    2:  		/* b 56 */
		/* 8213E308h case    2:*/		return 0x8213E340;
		/* 8213E308h case    2:*/		return 0x8213E30C;
	}
	return 0x8213E30C;
} // Block from 8213E300h-8213E30Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E30C);
		  /* 8213E30Ch */ case    0:  		/* mr R3, R31 */
		/* 8213E30Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213E30Ch case    0:*/		return 0x8213E310;
		  /* 8213E310h */ case    1:  		/* bl -307656 */
		/* 8213E310h case    1:*/		regs.LR = 0x8213E314; return 0x820F3148;
		/* 8213E310h case    1:*/		return 0x8213E314;
		  /* 8213E314h */ case    2:  		/* mr R3, R31 */
		/* 8213E314h case    2:*/		regs.R3 = regs.R31;
		/* 8213E314h case    2:*/		return 0x8213E318;
		  /* 8213E318h */ case    3:  		/* bl -309736 */
		/* 8213E318h case    3:*/		regs.LR = 0x8213E31C; return 0x820F2930;
		/* 8213E318h case    3:*/		return 0x8213E31C;
		  /* 8213E31Ch */ case    4:  		/* li R4, 0 */
		/* 8213E31Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E31Ch case    4:*/		return 0x8213E320;
		  /* 8213E320h */ case    5:  		/* mr R3, R31 */
		/* 8213E320h case    5:*/		regs.R3 = regs.R31;
		/* 8213E320h case    5:*/		return 0x8213E324;
		  /* 8213E324h */ case    6:  		/* bl -308388 */
		/* 8213E324h case    6:*/		regs.LR = 0x8213E328; return 0x820F2E80;
		/* 8213E324h case    6:*/		return 0x8213E328;
		  /* 8213E328h */ case    7:  		/* mr R3, R31 */
		/* 8213E328h case    7:*/		regs.R3 = regs.R31;
		/* 8213E328h case    7:*/		return 0x8213E32C;
		  /* 8213E32Ch */ case    8:  		/* bl -308812 */
		/* 8213E32Ch case    8:*/		regs.LR = 0x8213E330; return 0x820F2CE0;
		/* 8213E32Ch case    8:*/		return 0x8213E330;
	}
	return 0x8213E330;
} // Block from 8213E30Ch-8213E330h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213E330h
// Function '?ViolatesWriteLim@CVSProgram@D3DXShader@@MAAHPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E330);
		  /* 8213E330h */ case    0:  		/* b 24 */
		/* 8213E330h case    0:*/		return 0x8213E348;
		/* 8213E330h case    0:*/		return 0x8213E334;
	}
	return 0x8213E334;
} // Block from 8213E330h-8213E334h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213E334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E334);
		  /* 8213E334h */ case    0:  		/* li R4, 0 */
		/* 8213E334h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E334h case    0:*/		return 0x8213E338;
		  /* 8213E338h */ case    1:  		/* mr R3, R31 */
		/* 8213E338h case    1:*/		regs.R3 = regs.R31;
		/* 8213E338h case    1:*/		return 0x8213E33C;
		  /* 8213E33Ch */ case    2:  		/* bl -310068 */
		/* 8213E33Ch case    2:*/		regs.LR = 0x8213E340; return 0x820F2808;
		/* 8213E33Ch case    2:*/		return 0x8213E340;
	}
	return 0x8213E340;
} // Block from 8213E334h-8213E340h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E340);
		  /* 8213E340h */ case    0:  		/* mr R3, R31 */
		/* 8213E340h case    0:*/		regs.R3 = regs.R31;
		/* 8213E340h case    0:*/		return 0x8213E344;
		  /* 8213E344h */ case    1:  		/* bl -307932 */
		/* 8213E344h case    1:*/		regs.LR = 0x8213E348; return 0x820F3068;
		/* 8213E344h case    1:*/		return 0x8213E348;
	}
	return 0x8213E348;
} // Block from 8213E340h-8213E348h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213E348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E348);
		  /* 8213E348h */ case    0:  		/* mr R30, R3 */
		/* 8213E348h case    0:*/		regs.R30 = regs.R3;
		/* 8213E348h case    0:*/		return 0x8213E34C;
		  /* 8213E34Ch */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 8213E34Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213E34Ch case    1:*/		return 0x8213E350;
		  /* 8213E350h */ case    2:  		/* bc 12, CR6_LT, 2076 */
		/* 8213E350h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213EB6C;  }
		/* 8213E350h case    2:*/		return 0x8213E354;
	}
	return 0x8213E354;
} // Block from 8213E348h-8213E354h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E354);
		  /* 8213E354h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E354h case    0:*/		return 0x8213E358;
		  /* 8213E358h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E358h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E358h case    1:*/		return 0x8213E35C;
		  /* 8213E35Ch */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E35Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E35Ch case    2:*/		return 0x8213E360;
		  /* 8213E360h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E360h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E360h case    3:*/		return 0x8213E364;
		  /* 8213E364h */ case    4:  		/* bc 12, CR6_LT, -172 */
		/* 8213E364h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E2B8;  }
		/* 8213E364h case    4:*/		return 0x8213E368;
	}
	return 0x8213E368;
} // Block from 8213E354h-8213E368h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E368);
		  /* 8213E368h */ case    0:  		/* mr R3, R31 */
		/* 8213E368h case    0:*/		regs.R3 = regs.R31;
		/* 8213E368h case    0:*/		return 0x8213E36C;
		  /* 8213E36Ch */ case    1:  		/* bl -367500 */
		/* 8213E36Ch case    1:*/		regs.LR = 0x8213E370; return 0x820E47E0;
		/* 8213E36Ch case    1:*/		return 0x8213E370;
		  /* 8213E370h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E370h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E370h case    2:*/		return 0x8213E374;
		  /* 8213E374h */ case    3:  		/* mr R29, R21 */
		/* 8213E374h case    3:*/		regs.R29 = regs.R21;
		/* 8213E374h case    3:*/		return 0x8213E378;
		  /* 8213E378h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213E378h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E378h case    4:*/		return 0x8213E37C;
		  /* 8213E37Ch */ case    5:  		/* bc 4, CR6_GT, 88 */
		/* 8213E37Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213E3D4;  }
		/* 8213E37Ch case    5:*/		return 0x8213E380;
		  /* 8213E380h */ case    6:  		/* mr R28, R21 */
		/* 8213E380h case    6:*/		regs.R28 = regs.R21;
		/* 8213E380h case    6:*/		return 0x8213E384;
		  /* 8213E384h */ case    7:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E384h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E384h case    7:*/		return 0x8213E388;
		  /* 8213E388h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E388h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E388h case    8:*/		return 0x8213E38C;
		  /* 8213E38Ch */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E38Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E38Ch case    9:*/		return 0x8213E390;
		  /* 8213E390h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E390h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E390h case   10:*/		return 0x8213E394;
		  /* 8213E394h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E394h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E394h case   11:*/		return 0x8213E398;
		  /* 8213E398h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E398h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E398h case   12:*/		return 0x8213E39C;
		  /* 8213E39Ch */ case   13:  		/* cmplw CR6, R11, R26 */
		/* 8213E39Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8213E39Ch case   13:*/		return 0x8213E3A0;
		  /* 8213E3A0h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 8213E3A0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213E3AC;  }
		/* 8213E3A0h case   14:*/		return 0x8213E3A4;
		  /* 8213E3A4h */ case   15:  		/* cmplw CR6, R11, R23 */
		/* 8213E3A4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213E3A4h case   15:*/		return 0x8213E3A8;
		  /* 8213E3A8h */ case   16:  		/* bc 4, CR6_EQ, 24 */
		/* 8213E3A8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8213E3C0;  }
		/* 8213E3A8h case   16:*/		return 0x8213E3AC;
	}
	return 0x8213E3AC;
} // Block from 8213E368h-8213E3ACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213E3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E3AC);
		  /* 8213E3ACh */ case    0:  		/* mr R3, R31 */
		/* 8213E3ACh case    0:*/		regs.R3 = regs.R31;
		/* 8213E3ACh case    0:*/		return 0x8213E3B0;
		  /* 8213E3B0h */ case    1:  		/* bl -10544 */
		/* 8213E3B0h case    1:*/		regs.LR = 0x8213E3B4; return 0x8213BA80;
		/* 8213E3B0h case    1:*/		return 0x8213E3B4;
		  /* 8213E3B4h */ case    2:  		/* mr R30, R3 */
		/* 8213E3B4h case    2:*/		regs.R30 = regs.R3;
		/* 8213E3B4h case    2:*/		return 0x8213E3B8;
	}
	return 0x8213E3B8;
} // Block from 8213E3ACh-8213E3B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E3B8h
// Function '?ViolatesPortConstraints@CPSLegacyProgram@D3DXShader@@MAAHPAVCInstruction@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E3B8);
		  /* 8213E3B8h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213E3B8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213E3B8h case    0:*/		return 0x8213E3BC;
		  /* 8213E3BCh */ case    1:  		/* bc 12, CR6_LT, 1968 */
		/* 8213E3BCh case    1:*/		if ( regs.CR[6].lt ) { return 0x8213EB6C;  }
		/* 8213E3BCh case    1:*/		return 0x8213E3C0;
	}
	return 0x8213E3C0;
} // Block from 8213E3B8h-8213E3C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213E3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E3C0);
		  /* 8213E3C0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E3C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E3C0h case    0:*/		return 0x8213E3C4;
		  /* 8213E3C4h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E3C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E3C4h case    1:*/		return 0x8213E3C8;
		  /* 8213E3C8h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E3C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E3C8h case    2:*/		return 0x8213E3CC;
		  /* 8213E3CCh */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E3CCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E3CCh case    3:*/		return 0x8213E3D0;
		  /* 8213E3D0h */ case    4:  		/* bc 12, CR6_LT, -76 */
		/* 8213E3D0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E384;  }
		/* 8213E3D0h case    4:*/		return 0x8213E3D4;
	}
	return 0x8213E3D4;
} // Block from 8213E3C0h-8213E3D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E3D4);
		  /* 8213E3D4h */ case    0:  		/* mr R3, R31 */
		/* 8213E3D4h case    0:*/		regs.R3 = regs.R31;
		/* 8213E3D4h case    0:*/		return 0x8213E3D8;
		  /* 8213E3D8h */ case    1:  		/* bl -367608 */
		/* 8213E3D8h case    1:*/		regs.LR = 0x8213E3DC; return 0x820E47E0;
		/* 8213E3D8h case    1:*/		return 0x8213E3DC;
		  /* 8213E3DCh */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E3DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E3DCh case    2:*/		return 0x8213E3E0;
		  /* 8213E3E0h */ case    3:  		/* mr R29, R21 */
		/* 8213E3E0h case    3:*/		regs.R29 = regs.R21;
		/* 8213E3E0h case    3:*/		return 0x8213E3E4;
		  /* 8213E3E4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213E3E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E3E4h case    4:*/		return 0x8213E3E8;
		  /* 8213E3E8h */ case    5:  		/* bc 4, CR6_GT, 100 */
		/* 8213E3E8h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213E44C;  }
		/* 8213E3E8h case    5:*/		return 0x8213E3EC;
		  /* 8213E3ECh */ case    6:  		/* mr R28, R21 */
		/* 8213E3ECh case    6:*/		regs.R28 = regs.R21;
		/* 8213E3ECh case    6:*/		return 0x8213E3F0;
		  /* 8213E3F0h */ case    7:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E3F0h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E3F0h case    7:*/		return 0x8213E3F4;
		  /* 8213E3F4h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E3F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E3F4h case    8:*/		return 0x8213E3F8;
		  /* 8213E3F8h */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E3F8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E3F8h case    9:*/		return 0x8213E3FC;
		  /* 8213E3FCh */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E3FCh case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E3FCh case   10:*/		return 0x8213E400;
		  /* 8213E400h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E400h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E400h case   11:*/		return 0x8213E404;
		  /* 8213E404h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E404h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E404h case   12:*/		return 0x8213E408;
		  /* 8213E408h */ case   13:  		/* cmplw CR6, R11, R22 */
		/* 8213E408h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8213E408h case   13:*/		return 0x8213E40C;
		  /* 8213E40Ch */ case   14:  		/* bc 4, CR6_EQ, 44 */
		/* 8213E40Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213E438;  }
		/* 8213E40Ch case   14:*/		return 0x8213E410;
		  /* 8213E410h */ case   15:  		/* li R4, 1 */
		/* 8213E410h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8213E410h case   15:*/		return 0x8213E414;
		  /* 8213E414h */ case   16:  		/* mr R3, R31 */
		/* 8213E414h case   16:*/		regs.R3 = regs.R31;
		/* 8213E414h case   16:*/		return 0x8213E418;
		  /* 8213E418h */ case   17:  		/* bl -50008 */
		/* 8213E418h case   17:*/		regs.LR = 0x8213E41C; return 0x821320C0;
		/* 8213E418h case   17:*/		return 0x8213E41C;
		  /* 8213E41Ch */ case   18:  		/* or. R30, R3, R3 */
		/* 8213E41Ch case   18:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E41Ch case   18:*/		return 0x8213E420;
		  /* 8213E420h */ case   19:  		/* bc 12, CR0_LT, 1868 */
		/* 8213E420h case   19:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E420h case   19:*/		return 0x8213E424;
		  /* 8213E424h */ case   20:  		/* li R4, 0 */
		/* 8213E424h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E424h case   20:*/		return 0x8213E428;
		  /* 8213E428h */ case   21:  		/* mr R3, R31 */
		/* 8213E428h case   21:*/		regs.R3 = regs.R31;
		/* 8213E428h case   21:*/		return 0x8213E42C;
		  /* 8213E42Ch */ case   22:  		/* bl -50028 */
		/* 8213E42Ch case   22:*/		regs.LR = 0x8213E430; return 0x821320C0;
		/* 8213E42Ch case   22:*/		return 0x8213E430;
		  /* 8213E430h */ case   23:  		/* or. R30, R3, R3 */
		/* 8213E430h case   23:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E430h case   23:*/		return 0x8213E434;
		  /* 8213E434h */ case   24:  		/* bc 12, CR0_LT, 1848 */
		/* 8213E434h case   24:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E434h case   24:*/		return 0x8213E438;
	}
	return 0x8213E438;
} // Block from 8213E3D4h-8213E438h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8213E438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E438);
		  /* 8213E438h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E438h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E438h case    0:*/		return 0x8213E43C;
		  /* 8213E43Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E43Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E43Ch case    1:*/		return 0x8213E440;
		  /* 8213E440h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E440h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E440h case    2:*/		return 0x8213E444;
		  /* 8213E444h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E444h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E444h case    3:*/		return 0x8213E448;
		  /* 8213E448h */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 8213E448h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E3F0;  }
		/* 8213E448h case    4:*/		return 0x8213E44C;
	}
	return 0x8213E44C;
} // Block from 8213E438h-8213E44Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E44C);
		  /* 8213E44Ch */ case    0:  		/* mr R3, R31 */
		/* 8213E44Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213E44Ch case    0:*/		return 0x8213E450;
		  /* 8213E450h */ case    1:  		/* bl -367728 */
		/* 8213E450h case    1:*/		regs.LR = 0x8213E454; return 0x820E47E0;
		/* 8213E450h case    1:*/		return 0x8213E454;
		  /* 8213E454h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E454h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E454h case    2:*/		return 0x8213E458;
		  /* 8213E458h */ case    3:  		/* mr R29, R21 */
		/* 8213E458h case    3:*/		regs.R29 = regs.R21;
		/* 8213E458h case    3:*/		return 0x8213E45C;
		  /* 8213E45Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213E45Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E45Ch case    4:*/		return 0x8213E460;
		  /* 8213E460h */ case    5:  		/* bc 4, CR6_GT, 76 */
		/* 8213E460h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213E4AC;  }
		/* 8213E460h case    5:*/		return 0x8213E464;
		  /* 8213E464h */ case    6:  		/* mr R28, R21 */
		/* 8213E464h case    6:*/		regs.R28 = regs.R21;
		/* 8213E464h case    6:*/		return 0x8213E468;
		  /* 8213E468h */ case    7:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E468h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E468h case    7:*/		return 0x8213E46C;
		  /* 8213E46Ch */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E46Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E46Ch case    8:*/		return 0x8213E470;
		  /* 8213E470h */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E470h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E470h case    9:*/		return 0x8213E474;
		  /* 8213E474h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E474h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E474h case   10:*/		return 0x8213E478;
		  /* 8213E478h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E478h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E478h case   11:*/		return 0x8213E47C;
		  /* 8213E47Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E47Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E47Ch case   12:*/		return 0x8213E480;
		  /* 8213E480h */ case   13:  		/* cmplw CR6, R11, R26 */
		/* 8213E480h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8213E480h case   13:*/		return 0x8213E484;
		  /* 8213E484h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 8213E484h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213E498;  }
		/* 8213E484h case   14:*/		return 0x8213E488;
		  /* 8213E488h */ case   15:  		/* mr R3, R31 */
		/* 8213E488h case   15:*/		regs.R3 = regs.R31;
		/* 8213E488h case   15:*/		return 0x8213E48C;
		  /* 8213E48Ch */ case   16:  		/* bl -47068 */
		/* 8213E48Ch case   16:*/		regs.LR = 0x8213E490; return 0x82132CB0;
		/* 8213E48Ch case   16:*/		return 0x8213E490;
		  /* 8213E490h */ case   17:  		/* or. R30, R3, R3 */
		/* 8213E490h case   17:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E490h case   17:*/		return 0x8213E494;
		  /* 8213E494h */ case   18:  		/* bc 12, CR0_LT, 1752 */
		/* 8213E494h case   18:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E494h case   18:*/		return 0x8213E498;
	}
	return 0x8213E498;
} // Block from 8213E44Ch-8213E498h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213E498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E498);
		  /* 8213E498h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E498h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E498h case    0:*/		return 0x8213E49C;
		  /* 8213E49Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E49Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E49Ch case    1:*/		return 0x8213E4A0;
		  /* 8213E4A0h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E4A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E4A0h case    2:*/		return 0x8213E4A4;
		  /* 8213E4A4h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E4A4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E4A4h case    3:*/		return 0x8213E4A8;
		  /* 8213E4A8h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213E4A8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E468;  }
		/* 8213E4A8h case    4:*/		return 0x8213E4AC;
	}
	return 0x8213E4AC;
} // Block from 8213E498h-8213E4ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E4AC);
		  /* 8213E4ACh */ case    0:  		/* mr R3, R31 */
		/* 8213E4ACh case    0:*/		regs.R3 = regs.R31;
		/* 8213E4ACh case    0:*/		return 0x8213E4B0;
		  /* 8213E4B0h */ case    1:  		/* bl -367824 */
		/* 8213E4B0h case    1:*/		regs.LR = 0x8213E4B4; return 0x820E47E0;
		/* 8213E4B0h case    1:*/		return 0x8213E4B4;
		  /* 8213E4B4h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E4B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E4B4h case    2:*/		return 0x8213E4B8;
		  /* 8213E4B8h */ case    3:  		/* mr R29, R21 */
		/* 8213E4B8h case    3:*/		regs.R29 = regs.R21;
		/* 8213E4B8h case    3:*/		return 0x8213E4BC;
		  /* 8213E4BCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213E4BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213E4BCh case    4:*/		return 0x8213E4C0;
		  /* 8213E4C0h */ case    5:  		/* bc 4, CR6_GT, 116 */
		/* 8213E4C0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213E534;  }
		/* 8213E4C0h case    5:*/		return 0x8213E4C4;
		  /* 8213E4C4h */ case    6:  		/* mr R28, R21 */
		/* 8213E4C4h case    6:*/		regs.R28 = regs.R21;
		/* 8213E4C4h case    6:*/		return 0x8213E4C8;
		  /* 8213E4C8h */ case    7:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E4C8h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E4C8h case    7:*/		return 0x8213E4CC;
		  /* 8213E4CCh */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E4CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E4CCh case    8:*/		return 0x8213E4D0;
		  /* 8213E4D0h */ case    9:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E4D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E4D0h case    9:*/		return 0x8213E4D4;
		  /* 8213E4D4h */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E4D4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E4D4h case   10:*/		return 0x8213E4D8;
		  /* 8213E4D8h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213E4D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213E4D8h case   11:*/		return 0x8213E4DC;
		  /* 8213E4DCh */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213E4DCh case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213E4DCh case   12:*/		return 0x8213E4E0;
		  /* 8213E4E0h */ case   13:  		/* cmplw CR6, R11, R23 */
		/* 8213E4E0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213E4E0h case   13:*/		return 0x8213E4E4;
		  /* 8213E4E4h */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 8213E4E4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213E50C;  }
		/* 8213E4E4h case   14:*/		return 0x8213E4E8;
		  /* 8213E4E8h */ case   15:  		/* lis R10, 28720 */
		/* 8213E4E8h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7030);
		/* 8213E4E8h case   15:*/		return 0x8213E4EC;
		  /* 8213E4ECh */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8213E4ECh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E4ECh case   16:*/		return 0x8213E4F0;
		  /* 8213E4F0h */ case   17:  		/* bc 4, CR6_EQ, 48 */
		/* 8213E4F0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213E520;  }
		/* 8213E4F0h case   17:*/		return 0x8213E4F4;
		  /* 8213E4F4h */ case   18:  		/* mr R3, R31 */
		/* 8213E4F4h case   18:*/		regs.R3 = regs.R31;
		/* 8213E4F4h case   18:*/		return 0x8213E4F8;
		  /* 8213E4F8h */ case   19:  		/* bl -318760 */
		/* 8213E4F8h case   19:*/		regs.LR = 0x8213E4FC; return 0x820F07D0;
		/* 8213E4F8h case   19:*/		return 0x8213E4FC;
		  /* 8213E4FCh */ case   20:  		/* li R4, 0 */
		/* 8213E4FCh case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E4FCh case   20:*/		return 0x8213E500;
		  /* 8213E500h */ case   21:  		/* mr R3, R31 */
		/* 8213E500h case   21:*/		regs.R3 = regs.R31;
		/* 8213E500h case   21:*/		return 0x8213E504;
		  /* 8213E504h */ case   22:  		/* bl -343948 */
		/* 8213E504h case   22:*/		regs.LR = 0x8213E508; return 0x820EA578;
		/* 8213E504h case   22:*/		return 0x8213E508;
		  /* 8213E508h */ case   23:  		/* b 12 */
		/* 8213E508h case   23:*/		return 0x8213E514;
		/* 8213E508h case   23:*/		return 0x8213E50C;
	}
	return 0x8213E50C;
} // Block from 8213E4ACh-8213E50Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213E50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E50C);
		  /* 8213E50Ch */ case    0:  		/* mr R3, R31 */
		/* 8213E50Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213E50Ch case    0:*/		return 0x8213E510;
		  /* 8213E510h */ case    1:  		/* bl -349328 */
		/* 8213E510h case    1:*/		regs.LR = 0x8213E514; return 0x820E9080;
		/* 8213E510h case    1:*/		return 0x8213E514;
	}
	return 0x8213E514;
} // Block from 8213E50Ch-8213E514h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213E514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E514);
		  /* 8213E514h */ case    0:  		/* mr R30, R3 */
		/* 8213E514h case    0:*/		regs.R30 = regs.R3;
		/* 8213E514h case    0:*/		return 0x8213E518;
		  /* 8213E518h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 8213E518h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213E518h case    1:*/		return 0x8213E51C;
		  /* 8213E51Ch */ case    2:  		/* bc 12, CR6_LT, 1616 */
		/* 8213E51Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8213EB6C;  }
		/* 8213E51Ch case    2:*/		return 0x8213E520;
	}
	return 0x8213E520;
} // Block from 8213E514h-8213E520h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E520);
		  /* 8213E520h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213E520h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E520h case    0:*/		return 0x8213E524;
		  /* 8213E524h */ case    1:  		/* addi R29, R29, 1 */
		/* 8213E524h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E524h case    1:*/		return 0x8213E528;
		  /* 8213E528h */ case    2:  		/* addi R28, R28, 4 */
		/* 8213E528h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E528h case    2:*/		return 0x8213E52C;
		  /* 8213E52Ch */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8213E52Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8213E52Ch case    3:*/		return 0x8213E530;
		  /* 8213E530h */ case    4:  		/* bc 12, CR6_LT, -104 */
		/* 8213E530h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213E4C8;  }
		/* 8213E530h case    4:*/		return 0x8213E534;
	}
	return 0x8213E534;
} // Block from 8213E520h-8213E534h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E534);
		  /* 8213E534h */ case    0:  		/* lwz R27, <#[R31 + 12]> */
		/* 8213E534h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E534h case    0:*/		return 0x8213E538;
		  /* 8213E538h */ case    1:  		/* mr R29, R21 */
		/* 8213E538h case    1:*/		regs.R29 = regs.R21;
		/* 8213E538h case    1:*/		return 0x8213E53C;
		  /* 8213E53Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8213E53Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8213E53Ch case    2:*/		return 0x8213E540;
		  /* 8213E540h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 8213E540h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213E578;  }
		/* 8213E540h case    3:*/		return 0x8213E544;
		  /* 8213E544h */ case    4:  		/* mr R28, R21 */
		/* 8213E544h case    4:*/		regs.R28 = regs.R21;
		/* 8213E544h case    4:*/		return 0x8213E548;
		  /* 8213E548h */ case    5:  		/* stw R29, <#[R31 + 256]> */
		/* 8213E548h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000100) );
		/* 8213E548h case    5:*/		return 0x8213E54C;
		  /* 8213E54Ch */ case    6:  		/* mr R3, R31 */
		/* 8213E54Ch case    6:*/		regs.R3 = regs.R31;
		/* 8213E54Ch case    6:*/		return 0x8213E550;
		  /* 8213E550h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213E550h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213E550h case    7:*/		return 0x8213E554;
		  /* 8213E554h */ case    8:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8213E554h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8213E554h case    8:*/		return 0x8213E558;
		  /* 8213E558h */ case    9:  		/* stw R11, <#[R31 + 260]> */
		/* 8213E558h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213E558h case    9:*/		return 0x8213E55C;
		  /* 8213E55Ch */ case   10:  		/* bl -52148 */
		/* 8213E55Ch case   10:*/		regs.LR = 0x8213E560; return 0x821319A8;
		/* 8213E55Ch case   10:*/		return 0x8213E560;
		  /* 8213E560h */ case   11:  		/* or. R30, R3, R3 */
		/* 8213E560h case   11:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E560h case   11:*/		return 0x8213E564;
		  /* 8213E564h */ case   12:  		/* bc 12, CR0_LT, 1544 */
		/* 8213E564h case   12:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E564h case   12:*/		return 0x8213E568;
		  /* 8213E568h */ case   13:  		/* addi R29, R29, 1 */
		/* 8213E568h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E568h case   13:*/		return 0x8213E56C;
		  /* 8213E56Ch */ case   14:  		/* addi R28, R28, 4 */
		/* 8213E56Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8213E56Ch case   14:*/		return 0x8213E570;
		  /* 8213E570h */ case   15:  		/* cmplw CR6, R29, R27 */
		/* 8213E570h case   15:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 8213E570h case   15:*/		return 0x8213E574;
		  /* 8213E574h */ case   16:  		/* bc 12, CR6_LT, -44 */
		/* 8213E574h case   16:*/		if ( regs.CR[6].lt ) { return 0x8213E548;  }
		/* 8213E574h case   16:*/		return 0x8213E578;
	}
	return 0x8213E578;
} // Block from 8213E534h-8213E578h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213E578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E578);
		  /* 8213E578h */ case    0:  		/* mr R3, R31 */
		/* 8213E578h case    0:*/		regs.R3 = regs.R31;
		/* 8213E578h case    0:*/		return 0x8213E57C;
		  /* 8213E57Ch */ case    1:  		/* bl -368028 */
		/* 8213E57Ch case    1:*/		regs.LR = 0x8213E580; return 0x820E47E0;
		/* 8213E57Ch case    1:*/		return 0x8213E580;
		  /* 8213E580h */ case    2:  		/* mr R3, R31 */
		/* 8213E580h case    2:*/		regs.R3 = regs.R31;
		/* 8213E580h case    2:*/		return 0x8213E584;
		  /* 8213E584h */ case    3:  		/* bl -317260 */
		/* 8213E584h case    3:*/		regs.LR = 0x8213E588; return 0x820F0E38;
		/* 8213E584h case    3:*/		return 0x8213E588;
		  /* 8213E588h */ case    4:  		/* or. R30, R3, R3 */
		/* 8213E588h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E588h case    4:*/		return 0x8213E58C;
		  /* 8213E58Ch */ case    5:  		/* bc 12, CR0_LT, 1504 */
		/* 8213E58Ch case    5:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E58Ch case    5:*/		return 0x8213E590;
		  /* 8213E590h */ case    6:  		/* mr R3, R31 */
		/* 8213E590h case    6:*/		regs.R3 = regs.R31;
		/* 8213E590h case    6:*/		return 0x8213E594;
		  /* 8213E594h */ case    7:  		/* bl -49052 */
		/* 8213E594h case    7:*/		regs.LR = 0x8213E598; return 0x821325F8;
		/* 8213E594h case    7:*/		return 0x8213E598;
		  /* 8213E598h */ case    8:  		/* or. R30, R3, R3 */
		/* 8213E598h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E598h case    8:*/		return 0x8213E59C;
		  /* 8213E59Ch */ case    9:  		/* bc 12, CR0_LT, 1488 */
		/* 8213E59Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E59Ch case    9:*/		return 0x8213E5A0;
		  /* 8213E5A0h */ case   10:  		/* mr R3, R31 */
		/* 8213E5A0h case   10:*/		regs.R3 = regs.R31;
		/* 8213E5A0h case   10:*/		return 0x8213E5A4;
		  /* 8213E5A4h */ case   11:  		/* bl -56452 */
		/* 8213E5A4h case   11:*/		regs.LR = 0x8213E5A8; return 0x82130920;
		/* 8213E5A4h case   11:*/		return 0x8213E5A8;
		  /* 8213E5A8h */ case   12:  		/* or. R30, R3, R3 */
		/* 8213E5A8h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E5A8h case   12:*/		return 0x8213E5AC;
		  /* 8213E5ACh */ case   13:  		/* bc 12, CR0_LT, 1472 */
		/* 8213E5ACh case   13:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E5ACh case   13:*/		return 0x8213E5B0;
		  /* 8213E5B0h */ case   14:  		/* lwz R11, <#[R31 + 200]> */
		/* 8213E5B0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C8) );
		/* 8213E5B0h case   14:*/		return 0x8213E5B4;
		  /* 8213E5B4h */ case   15:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 8213E5B4h case   15:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 8213E5B4h case   15:*/		return 0x8213E5B8;
		  /* 8213E5B8h */ case   16:  		/* cmplwi CR6, R10, 260 */
		/* 8213E5B8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000104);
		/* 8213E5B8h case   16:*/		return 0x8213E5BC;
		  /* 8213E5BCh */ case   17:  		/* bc 4, CR6_EQ, 1076 */
		/* 8213E5BCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x8213E9F0;  }
		/* 8213E5BCh case   17:*/		return 0x8213E5C0;
		  /* 8213E5C0h */ case   18:  		/* lis R4, 9345 */
		/* 8213E5C0h case   18:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213E5C0h case   18:*/		return 0x8213E5C4;
		  /* 8213E5C4h */ case   19:  		/* li R3, 2048 */
		/* 8213E5C4h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213E5C4h case   19:*/		return 0x8213E5C8;
		  /* 8213E5C8h */ case   20:  		/* bl -746440 */
		/* 8213E5C8h case   20:*/		regs.LR = 0x8213E5CC; return 0x82088200;
		/* 8213E5C8h case   20:*/		return 0x8213E5CC;
		  /* 8213E5CCh */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 8213E5CCh case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213E5CCh case   21:*/		return 0x8213E5D0;
		  /* 8213E5D0h */ case   22:  		/* stw R3, <#[R31 + 560]> */
		/* 8213E5D0h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E5D0h case   22:*/		return 0x8213E5D4;
		  /* 8213E5D4h */ case   23:  		/* bc 4, CR0_EQ, 16 */
		/* 8213E5D4h case   23:*/		if ( !regs.CR[0].eq ) { return 0x8213E5E4;  }
		/* 8213E5D4h case   23:*/		return 0x8213E5D8;
		  /* 8213E5D8h */ case   24:  		/* lis R3, -32761 */
		/* 8213E5D8h case   24:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213E5D8h case   24:*/		return 0x8213E5DC;
		  /* 8213E5DCh */ case   25:  		/* ori R3, R3, 14 */
		/* 8213E5DCh case   25:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213E5DCh case   25:*/		return 0x8213E5E0;
		  /* 8213E5E0h */ case   26:  		/* b 1424 */
		/* 8213E5E0h case   26:*/		return 0x8213EB70;
		/* 8213E5E0h case   26:*/		return 0x8213E5E4;
	}
	return 0x8213E5E4;
} // Block from 8213E578h-8213E5E4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8213E5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E5E4);
		  /* 8213E5E4h */ case    0:  		/* lis R4, 9345 */
		/* 8213E5E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8213E5E4h case    0:*/		return 0x8213E5E8;
		  /* 8213E5E8h */ case    1:  		/* li R3, 2048 */
		/* 8213E5E8h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x800);
		/* 8213E5E8h case    1:*/		return 0x8213E5EC;
		  /* 8213E5ECh */ case    2:  		/* bl -746476 */
		/* 8213E5ECh case    2:*/		regs.LR = 0x8213E5F0; return 0x82088200;
		/* 8213E5ECh case    2:*/		return 0x8213E5F0;
		  /* 8213E5F0h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8213E5F0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213E5F0h case    3:*/		return 0x8213E5F4;
		  /* 8213E5F4h */ case    4:  		/* stw R3, <#[R31 + 564]> */
		/* 8213E5F4h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E5F4h case    4:*/		return 0x8213E5F8;
		  /* 8213E5F8h */ case    5:  		/* bc 12, CR0_EQ, -32 */
		/* 8213E5F8h case    5:*/		if ( regs.CR[0].eq ) { return 0x8213E5D8;  }
		/* 8213E5F8h case    5:*/		return 0x8213E5FC;
		  /* 8213E5FCh */ case    6:  		/* li R5, 2048 */
		/* 8213E5FCh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E5FCh case    6:*/		return 0x8213E600;
		  /* 8213E600h */ case    7:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213E600h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E600h case    7:*/		return 0x8213E604;
		  /* 8213E604h */ case    8:  		/* li R4, 0 */
		/* 8213E604h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E604h case    8:*/		return 0x8213E608;
		  /* 8213E608h */ case    9:  		/* stw R21, <#[R31 + 552]> */
		/* 8213E608h case    9:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000228) );
		/* 8213E608h case    9:*/		return 0x8213E60C;
		  /* 8213E60Ch */ case   10:  		/* stw R21, <#[R31 + 548]> */
		/* 8213E60Ch case   10:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E60Ch case   10:*/		return 0x8213E610;
		  /* 8213E610h */ case   11:  		/* bl -709328 */
		/* 8213E610h case   11:*/		regs.LR = 0x8213E614; return 0x82091340;
		/* 8213E610h case   11:*/		return 0x8213E614;
		  /* 8213E614h */ case   12:  		/* li R5, 2048 */
		/* 8213E614h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E614h case   12:*/		return 0x8213E618;
		  /* 8213E618h */ case   13:  		/* li R4, 0 */
		/* 8213E618h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E618h case   13:*/		return 0x8213E61C;
		  /* 8213E61Ch */ case   14:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213E61Ch case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E61Ch case   14:*/		return 0x8213E620;
		  /* 8213E620h */ case   15:  		/* bl -709344 */
		/* 8213E620h case   15:*/		regs.LR = 0x8213E624; return 0x82091340;
		/* 8213E620h case   15:*/		return 0x8213E624;
		  /* 8213E624h */ case   16:  		/* mr R3, R31 */
		/* 8213E624h case   16:*/		regs.R3 = regs.R31;
		/* 8213E624h case   16:*/		return 0x8213E628;
		  /* 8213E628h */ case   17:  		/* bl -41696 */
		/* 8213E628h case   17:*/		regs.LR = 0x8213E62C; return 0x82134348;
		/* 8213E628h case   17:*/		return 0x8213E62C;
		  /* 8213E62Ch */ case   18:  		/* or. R30, R3, R3 */
		/* 8213E62Ch case   18:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E62Ch case   18:*/		return 0x8213E630;
		  /* 8213E630h */ case   19:  		/* bc 12, CR0_LT, 1340 */
		/* 8213E630h case   19:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E630h case   19:*/		return 0x8213E634;
		  /* 8213E634h */ case   20:  		/* mr R3, R31 */
		/* 8213E634h case   20:*/		regs.R3 = regs.R31;
		/* 8213E634h case   20:*/		return 0x8213E638;
		  /* 8213E638h */ case   21:  		/* bl -40064 */
		/* 8213E638h case   21:*/		regs.LR = 0x8213E63C; return 0x821349B8;
		/* 8213E638h case   21:*/		return 0x8213E63C;
		  /* 8213E63Ch */ case   22:  		/* or. R30, R3, R3 */
		/* 8213E63Ch case   22:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E63Ch case   22:*/		return 0x8213E640;
		  /* 8213E640h */ case   23:  		/* bc 12, CR0_LT, 1324 */
		/* 8213E640h case   23:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E640h case   23:*/		return 0x8213E644;
		  /* 8213E644h */ case   24:  		/* mr R3, R31 */
		/* 8213E644h case   24:*/		regs.R3 = regs.R31;
		/* 8213E644h case   24:*/		return 0x8213E648;
		  /* 8213E648h */ case   25:  		/* bl -39488 */
		/* 8213E648h case   25:*/		regs.LR = 0x8213E64C; return 0x82134C08;
		/* 8213E648h case   25:*/		return 0x8213E64C;
		  /* 8213E64Ch */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 8213E64Ch case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213E64Ch case   26:*/		return 0x8213E650;
		  /* 8213E650h */ case   27:  		/* bc 4, CR0_EQ, 968 */
		/* 8213E650h case   27:*/		if ( !regs.CR[0].eq ) { return 0x8213EA18;  }
		/* 8213E650h case   27:*/		return 0x8213E654;
		  /* 8213E654h */ case   28:  		/* mr R3, R31 */
		/* 8213E654h case   28:*/		regs.R3 = regs.R31;
		/* 8213E654h case   28:*/		return 0x8213E658;
		  /* 8213E658h */ case   29:  		/* bl -39872 */
		/* 8213E658h case   29:*/		regs.LR = 0x8213E65C; return 0x82134A98;
		/* 8213E658h case   29:*/		return 0x8213E65C;
		  /* 8213E65Ch */ case   30:  		/* mr R23, R3 */
		/* 8213E65Ch case   30:*/		regs.R23 = regs.R3;
		/* 8213E65Ch case   30:*/		return 0x8213E660;
		  /* 8213E660h */ case   31:  		/* cmpwi CR6, R3, -1 */
		/* 8213E660h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213E660h case   31:*/		return 0x8213E664;
		  /* 8213E664h */ case   32:  		/* mr R3, R31 */
		/* 8213E664h case   32:*/		regs.R3 = regs.R31;
		/* 8213E664h case   32:*/		return 0x8213E668;
		  /* 8213E668h */ case   33:  		/* bc 4, CR6_EQ, 16 */
		/* 8213E668h case   33:*/		if ( !regs.CR[6].eq ) { return 0x8213E678;  }
		/* 8213E668h case   33:*/		return 0x8213E66C;
		  /* 8213E66Ch */ case   34:  		/* lis R11, -32253 */
		/* 8213E66Ch case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213E66Ch case   34:*/		return 0x8213E670;
		  /* 8213E670h */ case   35:  		/* addi R6, R11, 23392 */
		/* 8213E670h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5B60);
		/* 8213E670h case   35:*/		return 0x8213E674;
		  /* 8213E674h */ case   36:  		/* b 716 */
		/* 8213E674h case   36:*/		return 0x8213E940;
		/* 8213E674h case   36:*/		return 0x8213E678;
	}
	return 0x8213E678;
} // Block from 8213E5E4h-8213E678h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8213E678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E678);
		  /* 8213E678h */ case    0:  		/* bl -7696 */
		/* 8213E678h case    0:*/		regs.LR = 0x8213E67C; return 0x8213C868;
		/* 8213E678h case    0:*/		return 0x8213E67C;
		  /* 8213E67Ch */ case    1:  		/* mr R29, R21 */
		/* 8213E67Ch case    1:*/		regs.R29 = regs.R21;
		/* 8213E67Ch case    1:*/		return 0x8213E680;
		  /* 8213E680h */ case    2:  		/* addi R30, R31, 776 */
		/* 8213E680h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x308);
		/* 8213E680h case    2:*/		return 0x8213E684;
		  /* 8213E684h */ case    3:  		/* li R6, 0 */
		/* 8213E684h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213E684h case    3:*/		return 0x8213E688;
		  /* 8213E688h */ case    4:  		/* lwz R4, <#[R31 + 136]> */
		/* 8213E688h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 8213E688h case    4:*/		return 0x8213E68C;
		  /* 8213E68Ch */ case    5:  		/* li R5, 0 */
		/* 8213E68Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213E68Ch case    5:*/		return 0x8213E690;
	}
	return 0x8213E690;
} // Block from 8213E678h-8213E690h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213E690h
// Function '?ViolatesPortConstraintsCoIssue@CPSLegacyProgram@D3DXShader@@MAAHPAVCInstruction@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E690);
		  /* 8213E690h */ case    0:  		/* fmr FR1, FR31 */
		/* 8213E690h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8213E690h case    0:*/		return 0x8213E694;
		  /* 8213E694h */ case    1:  		/* mr R3, R31 */
		/* 8213E694h case    1:*/		regs.R3 = regs.R31;
		/* 8213E694h case    1:*/		return 0x8213E698;
		  /* 8213E698h */ case    2:  		/* bl -267376 */
		/* 8213E698h case    2:*/		regs.LR = 0x8213E69C; return 0x820FD228;
		/* 8213E698h case    2:*/		return 0x8213E69C;
		  /* 8213E69Ch */ case    3:  		/* stw R3, <#[R30]> */
		/* 8213E69Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8213E69Ch case    3:*/		return 0x8213E6A0;
		  /* 8213E6A0h */ case    4:  		/* cmpwi CR6, R3, -1 */
		/* 8213E6A0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8213E6A0h case    4:*/		return 0x8213E6A4;
		  /* 8213E6A4h */ case    5:  		/* bc 12, CR6_EQ, 692 */
		/* 8213E6A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213E958;  }
		/* 8213E6A4h case    5:*/		return 0x8213E6A8;
		  /* 8213E6A8h */ case    6:  		/* lwz R11, <#[R31 + 20]> */
		/* 8213E6A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8213E6A8h case    6:*/		return 0x8213E6AC;
		  /* 8213E6ACh */ case    7:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8213E6ACh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8213E6ACh case    7:*/		return 0x8213E6B0;
		  /* 8213E6B0h */ case    8:  		/* addi R29, R29, 1 */
		/* 8213E6B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8213E6B0h case    8:*/		return 0x8213E6B4;
		  /* 8213E6B4h */ case    9:  		/* addi R30, R30, 4 */
		/* 8213E6B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8213E6B4h case    9:*/		return 0x8213E6B8;
		  /* 8213E6B8h */ case   10:  		/* cmplwi CR6, R29, 64 */
		/* 8213E6B8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000040);
		/* 8213E6B8h case   10:*/		return 0x8213E6BC;
		  /* 8213E6BCh */ case   11:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8213E6BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8213E6BCh case   11:*/		return 0x8213E6C0;
		  /* 8213E6C0h */ case   12:  		/* stw R21, <#[R11 + 60]> */
		/* 8213E6C0h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000003C) );
		/* 8213E6C0h case   12:*/		return 0x8213E6C4;
		  /* 8213E6C4h */ case   13:  		/* bc 12, CR6_LT, -64 */
		/* 8213E6C4h case   13:*/		if ( regs.CR[6].lt ) { return 0x8213E684;  }
		/* 8213E6C4h case   13:*/		return 0x8213E6C8;
		  /* 8213E6C8h */ case   14:  		/* addi R27, R31, 712 */
		/* 8213E6C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x2C8);
		/* 8213E6C8h case   14:*/		return 0x8213E6CC;
		  /* 8213E6CCh */ case   15:  		/* li R5, 64 */
		/* 8213E6CCh case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 8213E6CCh case   15:*/		return 0x8213E6D0;
		  /* 8213E6D0h */ case   16:  		/* li R4, 0 */
		/* 8213E6D0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E6D0h case   16:*/		return 0x8213E6D4;
		  /* 8213E6D4h */ case   17:  		/* mr R3, R27 */
		/* 8213E6D4h case   17:*/		regs.R3 = regs.R27;
		/* 8213E6D4h case   17:*/		return 0x8213E6D8;
		  /* 8213E6D8h */ case   18:  		/* bl -709528 */
		/* 8213E6D8h case   18:*/		regs.LR = 0x8213E6DC; return 0x82091340;
		/* 8213E6D8h case   18:*/		return 0x8213E6DC;
		  /* 8213E6DCh */ case   19:  		/* mr R24, R25 */
		/* 8213E6DCh case   19:*/		regs.R24 = regs.R25;
		/* 8213E6DCh case   19:*/		return 0x8213E6E0;
		  /* 8213E6E0h */ case   20:  		/* mr R26, R21 */
		/* 8213E6E0h case   20:*/		regs.R26 = regs.R21;
		/* 8213E6E0h case   20:*/		return 0x8213E6E4;
		  /* 8213E6E4h */ case   21:  		/* cmplwi CR6, R23, 0 */
		/* 8213E6E4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8213E6E4h case   21:*/		return 0x8213E6E8;
		  /* 8213E6E8h */ case   22:  		/* bc 12, CR6_EQ, 492 */
		/* 8213E6E8h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213E8D4;  }
		/* 8213E6E8h case   22:*/		return 0x8213E6EC;
		  /* 8213E6ECh */ case   23:  		/* li R5, 2048 */
		/* 8213E6ECh case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E6ECh case   23:*/		return 0x8213E6F0;
		  /* 8213E6F0h */ case   24:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213E6F0h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E6F0h case   24:*/		return 0x8213E6F4;
		  /* 8213E6F4h */ case   25:  		/* li R4, 0 */
		/* 8213E6F4h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E6F4h case   25:*/		return 0x8213E6F8;
		  /* 8213E6F8h */ case   26:  		/* bl -709560 */
		/* 8213E6F8h case   26:*/		regs.LR = 0x8213E6FC; return 0x82091340;
		/* 8213E6F8h case   26:*/		return 0x8213E6FC;
		  /* 8213E6FCh */ case   27:  		/* li R5, 2048 */
		/* 8213E6FCh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E6FCh case   27:*/		return 0x8213E700;
		  /* 8213E700h */ case   28:  		/* li R4, 0 */
		/* 8213E700h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E700h case   28:*/		return 0x8213E704;
		  /* 8213E704h */ case   29:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213E704h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E704h case   29:*/		return 0x8213E708;
		  /* 8213E708h */ case   30:  		/* bl -709576 */
		/* 8213E708h case   30:*/		regs.LR = 0x8213E70C; return 0x82091340;
		/* 8213E708h case   30:*/		return 0x8213E70C;
		  /* 8213E70Ch */ case   31:  		/* stw R21, <#[R31 + 548]> */
		/* 8213E70Ch case   31:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E70Ch case   31:*/		return 0x8213E710;
		  /* 8213E710h */ case   32:  		/* stw R21, <#[R31 + 552]> */
		/* 8213E710h case   32:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000228) );
		/* 8213E710h case   32:*/		return 0x8213E714;
		  /* 8213E714h */ case   33:  		/* li R5, 1 */
		/* 8213E714h case   33:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8213E714h case   33:*/		return 0x8213E718;
		  /* 8213E718h */ case   34:  		/* mr R4, R26 */
		/* 8213E718h case   34:*/		regs.R4 = regs.R26;
		/* 8213E718h case   34:*/		return 0x8213E71C;
		  /* 8213E71Ch */ case   35:  		/* mr R3, R31 */
		/* 8213E71Ch case   35:*/		regs.R3 = regs.R31;
		/* 8213E71Ch case   35:*/		return 0x8213E720;
		  /* 8213E720h */ case   36:  		/* bl -38776 */
		/* 8213E720h case   36:*/		regs.LR = 0x8213E724; return 0x82134FA8;
		/* 8213E720h case   36:*/		return 0x8213E724;
		  /* 8213E724h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 8213E724h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213E724h case   37:*/		return 0x8213E728;
		  /* 8213E728h */ case   38:  		/* bc 12, CR0_EQ, 416 */
		/* 8213E728h case   38:*/		if ( regs.CR[0].eq ) { return 0x8213E8C8;  }
		/* 8213E728h case   38:*/		return 0x8213E72C;
		  /* 8213E72Ch */ case   39:  		/* stw R21, <#[R31 + 1036]> */
		/* 8213E72Ch case   39:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x0000040C) );
		/* 8213E72Ch case   39:*/		return 0x8213E730;
		  /* 8213E730h */ case   40:  		/* mr R3, R31 */
		/* 8213E730h case   40:*/		regs.R3 = regs.R31;
		/* 8213E730h case   40:*/		return 0x8213E734;
		  /* 8213E734h */ case   41:  		/* stw R21, <#[R31 + 1032]> */
		/* 8213E734h case   41:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000408) );
		/* 8213E734h case   41:*/		return 0x8213E738;
		  /* 8213E738h */ case   42:  		/* bl -42176 */
		/* 8213E738h case   42:*/		regs.LR = 0x8213E73C; return 0x82134278;
		/* 8213E738h case   42:*/		return 0x8213E73C;
		  /* 8213E73Ch */ case   43:  		/* addi R7, R1, 80 */
		/* 8213E73Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8213E73Ch case   43:*/		return 0x8213E740;
		  /* 8213E740h */ case   44:  		/* li R5, 6 */
		/* 8213E740h case   44:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213E740h case   44:*/		return 0x8213E744;
		  /* 8213E744h */ case   45:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213E744h case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E744h case   45:*/		return 0x8213E748;
		  /* 8213E748h */ case   46:  		/* mr R3, R31 */
		/* 8213E748h case   46:*/		regs.R3 = regs.R31;
		/* 8213E748h case   46:*/		return 0x8213E74C;
		  /* 8213E74Ch */ case   47:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213E74Ch case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E74Ch case   47:*/		return 0x8213E750;
		  /* 8213E750h */ case   48:  		/* bl -16712 */
		/* 8213E750h case   48:*/		regs.LR = 0x8213E754; return 0x8213A608;
		/* 8213E750h case   48:*/		return 0x8213E754;
		  /* 8213E754h */ case   49:  		/* addi R7, R1, 84 */
		/* 8213E754h case   49:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213E754h case   49:*/		return 0x8213E758;
		  /* 8213E758h */ case   50:  		/* li R5, 6 */
		/* 8213E758h case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213E758h case   50:*/		return 0x8213E75C;
		  /* 8213E75Ch */ case   51:  		/* lwz R6, <#[R31 + 552]> */
		/* 8213E75Ch case   51:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 8213E75Ch case   51:*/		return 0x8213E760;
		  /* 8213E760h */ case   52:  		/* mr R3, R31 */
		/* 8213E760h case   52:*/		regs.R3 = regs.R31;
		/* 8213E760h case   52:*/		return 0x8213E764;
		  /* 8213E764h */ case   53:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213E764h case   53:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E764h case   53:*/		return 0x8213E768;
		  /* 8213E768h */ case   54:  		/* bl -16736 */
		/* 8213E768h case   54:*/		regs.LR = 0x8213E76C; return 0x8213A608;
		/* 8213E768h case   54:*/		return 0x8213E76C;
		  /* 8213E76Ch */ case   55:  		/* addi R30, R27, -4 */
		/* 8213E76Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0xFFFFFFFC);
		/* 8213E76Ch case   55:*/		return 0x8213E770;
		  /* 8213E770h */ case   56:  		/* li R29, 16 */
		/* 8213E770h case   56:*/		cpu::op::li<0>(regs,&regs.R29,0x10);
		/* 8213E770h case   56:*/		return 0x8213E774;
		  /* 8213E774h */ case   57:  		/* lwz R28, <#[R30 + 4]> */
		/* 8213E774h case   57:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 8213E774h case   57:*/		return 0x8213E778;
		  /* 8213E778h */ case   58:  		/* cmplwi CR6, R28, 0 */
		/* 8213E778h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8213E778h case   58:*/		return 0x8213E77C;
		  /* 8213E77Ch */ case   59:  		/* bc 12, CR6_EQ, 20 */
		/* 8213E77Ch case   59:*/		if ( regs.CR[6].eq ) { return 0x8213E790;  }
		/* 8213E77Ch case   59:*/		return 0x8213E780;
		  /* 8213E780h */ case   60:  		/* mr R3, R28 */
		/* 8213E780h case   60:*/		regs.R3 = regs.R28;
		/* 8213E780h case   60:*/		return 0x8213E784;
		  /* 8213E784h */ case   61:  		/* bl 912444 */
		/* 8213E784h case   61:*/		regs.LR = 0x8213E788; return 0x8221D3C0;
		/* 8213E784h case   61:*/		return 0x8213E788;
		  /* 8213E788h */ case   62:  		/* mr R3, R28 */
		/* 8213E788h case   62:*/		regs.R3 = regs.R28;
		/* 8213E788h case   62:*/		return 0x8213E78C;
		  /* 8213E78Ch */ case   63:  		/* bl -270748 */
		/* 8213E78Ch case   63:*/		regs.LR = 0x8213E790; return 0x820FC5F0;
		/* 8213E78Ch case   63:*/		return 0x8213E790;
	}
	return 0x8213E790;
} // Block from 8213E690h-8213E790h (64 instructions)

//////////////////////////////////////////////////////
// Block at 8213E790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E790);
		  /* 8213E790h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8213E790h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8213E790h case    0:*/		return 0x8213E794;
		  /* 8213E794h */ case    1:  		/* stwu R21, <#[R30 + 4]> */
		/* 8213E794h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8213E794h case    1:*/		return 0x8213E798;
		  /* 8213E798h */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 8213E798h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8213E774;  }
		/* 8213E798h case    2:*/		return 0x8213E79C;
		  /* 8213E79Ch */ case    3:  		/* mr R3, R31 */
		/* 8213E79Ch case    3:*/		regs.R3 = regs.R31;
		/* 8213E79Ch case    3:*/		return 0x8213E7A0;
		  /* 8213E7A0h */ case    4:  		/* bl -7640 */
		/* 8213E7A0h case    4:*/		regs.LR = 0x8213E7A4; return 0x8213C9C8;
		/* 8213E7A0h case    4:*/		return 0x8213E7A4;
		  /* 8213E7A4h */ case    5:  		/* or. R30, R3, R3 */
		/* 8213E7A4h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E7A4h case    5:*/		return 0x8213E7A8;
		  /* 8213E7A8h */ case    6:  		/* bc 12, CR0_LT, 964 */
		/* 8213E7A8h case    6:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E7A8h case    6:*/		return 0x8213E7AC;
		  /* 8213E7ACh */ case    7:  		/* cmpwi CR6, R30, 1 */
		/* 8213E7ACh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8213E7ACh case    7:*/		return 0x8213E7B0;
		  /* 8213E7B0h */ case    8:  		/* bc 12, CR6_EQ, 280 */
		/* 8213E7B0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8213E8C8;  }
		/* 8213E7B0h case    8:*/		return 0x8213E7B4;
		  /* 8213E7B4h */ case    9:  		/* li R4, 0 */
		/* 8213E7B4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E7B4h case    9:*/		return 0x8213E7B8;
		  /* 8213E7B8h */ case   10:  		/* mr R3, R31 */
		/* 8213E7B8h case   10:*/		regs.R3 = regs.R31;
		/* 8213E7B8h case   10:*/		return 0x8213E7BC;
		  /* 8213E7BCh */ case   11:  		/* bl -37724 */
		/* 8213E7BCh case   11:*/		regs.LR = 0x8213E7C0; return 0x82135460;
		/* 8213E7BCh case   11:*/		return 0x8213E7C0;
		  /* 8213E7C0h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8213E7C0h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213E7C0h case   12:*/		return 0x8213E7C4;
		  /* 8213E7C4h */ case   13:  		/* bc 12, CR0_LT, 260 */
		/* 8213E7C4h case   13:*/		if ( regs.CR[0].lt ) { return 0x8213E8C8;  }
		/* 8213E7C4h case   13:*/		return 0x8213E7C8;
		  /* 8213E7C8h */ case   14:  		/* li R5, 1 */
		/* 8213E7C8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8213E7C8h case   14:*/		return 0x8213E7CC;
		  /* 8213E7CCh */ case   15:  		/* li R4, 1 */
		/* 8213E7CCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8213E7CCh case   15:*/		return 0x8213E7D0;
		  /* 8213E7D0h */ case   16:  		/* mr R3, R31 */
		/* 8213E7D0h case   16:*/		regs.R3 = regs.R31;
		/* 8213E7D0h case   16:*/		return 0x8213E7D4;
		  /* 8213E7D4h */ case   17:  		/* bl -29772 */
		/* 8213E7D4h case   17:*/		regs.LR = 0x8213E7D8; return 0x82137388;
		/* 8213E7D4h case   17:*/		return 0x8213E7D8;
		  /* 8213E7D8h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 8213E7D8h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213E7D8h case   18:*/		return 0x8213E7DC;
		  /* 8213E7DCh */ case   19:  		/* bc 12, CR0_LT, 236 */
		/* 8213E7DCh case   19:*/		if ( regs.CR[0].lt ) { return 0x8213E8C8;  }
		/* 8213E7DCh case   19:*/		return 0x8213E7E0;
		  /* 8213E7E0h */ case   20:  		/* addi R7, R1, 80 */
		/* 8213E7E0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8213E7E0h case   20:*/		return 0x8213E7E4;
		  /* 8213E7E4h */ case   21:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213E7E4h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E7E4h case   21:*/		return 0x8213E7E8;
		  /* 8213E7E8h */ case   22:  		/* li R5, 6 */
		/* 8213E7E8h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213E7E8h case   22:*/		return 0x8213E7EC;
		  /* 8213E7ECh */ case   23:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213E7ECh case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E7ECh case   23:*/		return 0x8213E7F0;
		  /* 8213E7F0h */ case   24:  		/* mr R3, R31 */
		/* 8213E7F0h case   24:*/		regs.R3 = regs.R31;
		/* 8213E7F0h case   24:*/		return 0x8213E7F4;
		  /* 8213E7F4h */ case   25:  		/* bl -16876 */
		/* 8213E7F4h case   25:*/		regs.LR = 0x8213E7F8; return 0x8213A608;
		/* 8213E7F4h case   25:*/		return 0x8213E7F8;
		  /* 8213E7F8h */ case   26:  		/* addi R7, R1, 84 */
		/* 8213E7F8h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8213E7F8h case   26:*/		return 0x8213E7FC;
		  /* 8213E7FCh */ case   27:  		/* li R5, 6 */
		/* 8213E7FCh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8213E7FCh case   27:*/		return 0x8213E800;
		  /* 8213E800h */ case   28:  		/* lwz R6, <#[R31 + 552]> */
		/* 8213E800h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 8213E800h case   28:*/		return 0x8213E804;
		  /* 8213E804h */ case   29:  		/* mr R3, R31 */
		/* 8213E804h case   29:*/		regs.R3 = regs.R31;
		/* 8213E804h case   29:*/		return 0x8213E808;
		  /* 8213E808h */ case   30:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213E808h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E808h case   30:*/		return 0x8213E80C;
		  /* 8213E80Ch */ case   31:  		/* bl -16900 */
		/* 8213E80Ch case   31:*/		regs.LR = 0x8213E810; return 0x8213A608;
		/* 8213E80Ch case   31:*/		return 0x8213E810;
		  /* 8213E810h */ case   32:  		/* li R11, 6 */
		/* 8213E810h case   32:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8213E810h case   32:*/		return 0x8213E814;
		  /* 8213E814h */ case   33:  		/* lwz R9, <#[R31 + 564]> */
		/* 8213E814h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E814h case   33:*/		return 0x8213E818;
		  /* 8213E818h */ case   34:  		/* mr R8, R21 */
		/* 8213E818h case   34:*/		regs.R8 = regs.R21;
		/* 8213E818h case   34:*/		return 0x8213E81C;
		  /* 8213E81Ch */ case   35:  		/* mr R7, R21 */
		/* 8213E81Ch case   35:*/		regs.R7 = regs.R21;
		/* 8213E81Ch case   35:*/		return 0x8213E820;
		  /* 8213E820h */ case   36:  		/* mr R10, R21 */
		/* 8213E820h case   36:*/		regs.R10 = regs.R21;
		/* 8213E820h case   36:*/		return 0x8213E824;
		  /* 8213E824h */ case   37:  		/* mtspr CTR, R11 */
		/* 8213E824h case   37:*/		regs.CTR = regs.R11;
		/* 8213E824h case   37:*/		return 0x8213E828;
		  /* 8213E828h */ case   38:  		/* lwz R11, <#[R31 + 560]> */
		/* 8213E828h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E828h case   38:*/		return 0x8213E82C;
		  /* 8213E82Ch */ case   39:  		/* lwzx R6, <#[R11 + R10]> */
		/* 8213E82Ch case   39:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213E82Ch case   39:*/		return 0x8213E830;
		  /* 8213E830h */ case   40:  		/* cmplwi CR6, R6, 0 */
		/* 8213E830h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8213E830h case   40:*/		return 0x8213E834;
		  /* 8213E834h */ case   41:  		/* bc 12, CR6_EQ, 8 */
		/* 8213E834h case   41:*/		if ( regs.CR[6].eq ) { return 0x8213E83C;  }
		/* 8213E834h case   41:*/		return 0x8213E838;
		  /* 8213E838h */ case   42:  		/* addi R8, R8, 1 */
		/* 8213E838h case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8213E838h case   42:*/		return 0x8213E83C;
	}
	return 0x8213E83C;
} // Block from 8213E790h-8213E83Ch (43 instructions)

//////////////////////////////////////////////////////
// Block at 8213E83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E83C);
		  /* 8213E83Ch */ case    0:  		/* lwzx R6, <#[R9 + R10]> */
		/* 8213E83Ch case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8213E83Ch case    0:*/		return 0x8213E840;
		  /* 8213E840h */ case    1:  		/* cmplwi CR6, R6, 0 */
		/* 8213E840h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8213E840h case    1:*/		return 0x8213E844;
		  /* 8213E844h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8213E844h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213E84C;  }
		/* 8213E844h case    2:*/		return 0x8213E848;
		  /* 8213E848h */ case    3:  		/* addi R7, R7, 1 */
		/* 8213E848h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8213E848h case    3:*/		return 0x8213E84C;
	}
	return 0x8213E84C;
} // Block from 8213E83Ch-8213E84Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213E84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E84C);
		  /* 8213E84Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 8213E84Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213E84Ch case    0:*/		return 0x8213E850;
		  /* 8213E850h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 8213E850h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213E82C;  }
		/* 8213E850h case    1:*/		return 0x8213E854;
		  /* 8213E854h */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 8213E854h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8213E854h case    2:*/		return 0x8213E858;
		  /* 8213E858h */ case    3:  		/* rlwinm R10, R8, 1, 0, 30 */
		/* 8213E858h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R8);
		/* 8213E858h case    3:*/		return 0x8213E85C;
		  /* 8213E85Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8213E85Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213E85Ch case    4:*/		return 0x8213E860;
		  /* 8213E860h */ case    5:  		/* mr R9, R11 */
		/* 8213E860h case    5:*/		regs.R9 = regs.R11;
		/* 8213E860h case    5:*/		return 0x8213E864;
		  /* 8213E864h */ case    6:  		/* bc 12, CR6_GT, 8 */
		/* 8213E864h case    6:*/		if ( regs.CR[6].gt ) { return 0x8213E86C;  }
		/* 8213E864h case    6:*/		return 0x8213E868;
		  /* 8213E868h */ case    7:  		/* mr R9, R10 */
		/* 8213E868h case    7:*/		regs.R9 = regs.R10;
		/* 8213E868h case    7:*/		return 0x8213E86C;
	}
	return 0x8213E86C;
} // Block from 8213E84Ch-8213E86Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213E86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E86C);
		  /* 8213E86Ch */ case    0:  		/* rlwinm R10, R7, 1, 0, 30 */
		/* 8213E86Ch case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R7);
		/* 8213E86Ch case    0:*/		return 0x8213E870;
		  /* 8213E870h */ case    1:  		/* lwz R7, <#[R1 + 84]> */
		/* 8213E870h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 8213E870h case    1:*/		return 0x8213E874;
		  /* 8213E874h */ case    2:  		/* cmplw CR6, R7, R10 */
		/* 8213E874h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 8213E874h case    2:*/		return 0x8213E878;
		  /* 8213E878h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 8213E878h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213E880;  }
		/* 8213E878h case    3:*/		return 0x8213E87C;
		  /* 8213E87Ch */ case    4:  		/* mr R10, R7 */
		/* 8213E87Ch case    4:*/		regs.R10 = regs.R7;
		/* 8213E87Ch case    4:*/		return 0x8213E880;
	}
	return 0x8213E880;
} // Block from 8213E86Ch-8213E880h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213E880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E880);
		  /* 8213E880h */ case    0:  		/* add R8, R8, R11 */
		/* 8213E880h case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8213E880h case    0:*/		return 0x8213E884;
		  /* 8213E884h */ case    1:  		/* cmplwi CR6, R11, 8 */
		/* 8213E884h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 8213E884h case    1:*/		return 0x8213E888;
		  /* 8213E888h */ case    2:  		/* subfic R8, R8, 0 */
		/* 8213E888h case    2:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x0);
		/* 8213E888h case    2:*/		return 0x8213E88C;
		  /* 8213E88Ch */ case    3:  		/* li R6, 10 */
		/* 8213E88Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8213E88Ch case    3:*/		return 0x8213E890;
		  /* 8213E890h */ case    4:  		/* subfe R11, R8, R8 */
		/* 8213E890h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 8213E890h case    4:*/		return 0x8213E894;
		  /* 8213E894h */ case    5:  		/* and R11, R11, R6 */
		/* 8213E894h case    5:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8213E894h case    5:*/		return 0x8213E898;
		  /* 8213E898h */ case    6:  		/* add R11, R11, R10 */
		/* 8213E898h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8213E898h case    6:*/		return 0x8213E89C;
		  /* 8213E89Ch */ case    7:  		/* add R11, R11, R9 */
		/* 8213E89Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8213E89Ch case    7:*/		return 0x8213E8A0;
		  /* 8213E8A0h */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 8213E8A0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213E8A8;  }
		/* 8213E8A0h case    8:*/		return 0x8213E8A4;
		  /* 8213E8A4h */ case    9:  		/* addi R11, R11, 20 */
		/* 8213E8A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x14);
		/* 8213E8A4h case    9:*/		return 0x8213E8A8;
	}
	return 0x8213E8A8;
} // Block from 8213E880h-8213E8A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8A8);
		  /* 8213E8A8h */ case    0:  		/* cmplwi CR6, R7, 8 */
		/* 8213E8A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000008);
		/* 8213E8A8h case    0:*/		return 0x8213E8AC;
		  /* 8213E8ACh */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8213E8ACh case    1:*/		if ( !regs.CR[6].gt ) { return 0x8213E8B4;  }
		/* 8213E8ACh case    1:*/		return 0x8213E8B0;
		  /* 8213E8B0h */ case    2:  		/* addi R11, R11, 20 */
		/* 8213E8B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x14);
		/* 8213E8B0h case    2:*/		return 0x8213E8B4;
	}
	return 0x8213E8B4;
} // Block from 8213E8A8h-8213E8B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8B4);
		  /* 8213E8B4h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 8213E8B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8213E8B4h case    0:*/		return 0x8213E8B8;
		  /* 8213E8B8h */ case    1:  		/* bc 4, CR6_LT, 12 */
		/* 8213E8B8h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8213E8C4;  }
		/* 8213E8B8h case    1:*/		return 0x8213E8BC;
		  /* 8213E8BCh */ case    2:  		/* mr R24, R26 */
		/* 8213E8BCh case    2:*/		regs.R24 = regs.R26;
		/* 8213E8BCh case    2:*/		return 0x8213E8C0;
		  /* 8213E8C0h */ case    3:  		/* mr R25, R11 */
		/* 8213E8C0h case    3:*/		regs.R25 = regs.R11;
		/* 8213E8C0h case    3:*/		return 0x8213E8C4;
	}
	return 0x8213E8C4;
} // Block from 8213E8B4h-8213E8C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8C4);
		  /* 8213E8C4h */ case    0:  		/* stw R21, <#[R31 + 1032]> */
		/* 8213E8C4h case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000408) );
		/* 8213E8C4h case    0:*/		return 0x8213E8C8;
	}
	return 0x8213E8C8;
} // Block from 8213E8C4h-8213E8C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8C8);
		  /* 8213E8C8h */ case    0:  		/* addi R26, R26, 1 */
		/* 8213E8C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8213E8C8h case    0:*/		return 0x8213E8CC;
		  /* 8213E8CCh */ case    1:  		/* cmplw CR6, R26, R23 */
		/* 8213E8CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R23);
		/* 8213E8CCh case    1:*/		return 0x8213E8D0;
		  /* 8213E8D0h */ case    2:  		/* bc 12, CR6_LT, -484 */
		/* 8213E8D0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213E6EC;  }
		/* 8213E8D0h case    2:*/		return 0x8213E8D4;
	}
	return 0x8213E8D4;
} // Block from 8213E8C8h-8213E8D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8D4);
		  /* 8213E8D4h */ case    0:  		/* li R5, 2048 */
		/* 8213E8D4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E8D4h case    0:*/		return 0x8213E8D8;
	}
	return 0x8213E8D8;
} // Block from 8213E8D4h-8213E8D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213E8D8h
// Function '??_GCPSLegacyProgram@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E8D8);
		  /* 8213E8D8h */ case    0:  		/* lwz R3, <#[R31 + 560]> */
		/* 8213E8D8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E8D8h case    0:*/		return 0x8213E8DC;
		  /* 8213E8DCh */ case    1:  		/* li R4, 0 */
		/* 8213E8DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E8DCh case    1:*/		return 0x8213E8E0;
		  /* 8213E8E0h */ case    2:  		/* bl -710048 */
		/* 8213E8E0h case    2:*/		regs.LR = 0x8213E8E4; return 0x82091340;
		/* 8213E8E0h case    2:*/		return 0x8213E8E4;
		  /* 8213E8E4h */ case    3:  		/* li R5, 2048 */
		/* 8213E8E4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 8213E8E4h case    3:*/		return 0x8213E8E8;
		  /* 8213E8E8h */ case    4:  		/* li R4, 0 */
		/* 8213E8E8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E8E8h case    4:*/		return 0x8213E8EC;
		  /* 8213E8ECh */ case    5:  		/* lwz R3, <#[R31 + 564]> */
		/* 8213E8ECh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 8213E8ECh case    5:*/		return 0x8213E8F0;
		  /* 8213E8F0h */ case    6:  		/* bl -710064 */
		/* 8213E8F0h case    6:*/		regs.LR = 0x8213E8F4; return 0x82091340;
		/* 8213E8F0h case    6:*/		return 0x8213E8F4;
		  /* 8213E8F4h */ case    7:  		/* stw R21, <#[R31 + 548]> */
		/* 8213E8F4h case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E8F4h case    7:*/		return 0x8213E8F8;
		  /* 8213E8F8h */ case    8:  		/* addi R30, R27, -4 */
		/* 8213E8F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0xFFFFFFFC);
		/* 8213E8F8h case    8:*/		return 0x8213E8FC;
		  /* 8213E8FCh */ case    9:  		/* stw R21, <#[R31 + 552]> */
		/* 8213E8FCh case    9:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000228) );
		/* 8213E8FCh case    9:*/		return 0x8213E900;
		  /* 8213E900h */ case   10:  		/* li R29, 12 */
		/* 8213E900h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0xC);
		/* 8213E900h case   10:*/		return 0x8213E904;
		  /* 8213E904h */ case   11:  		/* lwz R28, <#[R30 + 4]> */
		/* 8213E904h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 8213E904h case   11:*/		return 0x8213E908;
		  /* 8213E908h */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 8213E908h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8213E908h case   12:*/		return 0x8213E90C;
		  /* 8213E90Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 8213E90Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8213E920;  }
		/* 8213E90Ch case   13:*/		return 0x8213E910;
		  /* 8213E910h */ case   14:  		/* mr R3, R28 */
		/* 8213E910h case   14:*/		regs.R3 = regs.R28;
		/* 8213E910h case   14:*/		return 0x8213E914;
		  /* 8213E914h */ case   15:  		/* bl 912044 */
		/* 8213E914h case   15:*/		regs.LR = 0x8213E918; return 0x8221D3C0;
		/* 8213E914h case   15:*/		return 0x8213E918;
		  /* 8213E918h */ case   16:  		/* mr R3, R28 */
		/* 8213E918h case   16:*/		regs.R3 = regs.R28;
		/* 8213E918h case   16:*/		return 0x8213E91C;
		  /* 8213E91Ch */ case   17:  		/* bl -271148 */
		/* 8213E91Ch case   17:*/		regs.LR = 0x8213E920; return 0x820FC5F0;
		/* 8213E91Ch case   17:*/		return 0x8213E920;
	}
	return 0x8213E920;
} // Block from 8213E8D8h-8213E920h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213E920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E920);
		  /* 8213E920h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8213E920h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8213E920h case    0:*/		return 0x8213E924;
		  /* 8213E924h */ case    1:  		/* stwu R21, <#[R30 + 4]> */
		/* 8213E924h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8213E924h case    1:*/		return 0x8213E928;
	}
	return 0x8213E928;
} // Block from 8213E920h-8213E928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213E928h
// Function '?PatternMatch@CPSLegacyProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E928);
		  /* 8213E928h */ case    0:  		/* bc 4, CR0_EQ, -36 */
		/* 8213E928h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8213E904;  }
		/* 8213E928h case    0:*/		return 0x8213E92C;
		  /* 8213E92Ch */ case    1:  		/* cmpwi CR6, R24, -1 */
		/* 8213E92Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0xFFFFFFFF);
		/* 8213E92Ch case    1:*/		return 0x8213E930;
		  /* 8213E930h */ case    2:  		/* mr R3, R31 */
		/* 8213E930h case    2:*/		regs.R3 = regs.R31;
		/* 8213E930h case    2:*/		return 0x8213E934;
		  /* 8213E934h */ case    3:  		/* bc 4, CR6_EQ, 48 */
		/* 8213E934h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213E964;  }
		/* 8213E934h case    3:*/		return 0x8213E938;
		  /* 8213E938h */ case    4:  		/* lis R11, -32253 */
		/* 8213E938h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213E938h case    4:*/		return 0x8213E93C;
		  /* 8213E93Ch */ case    5:  		/* addi R6, R11, 23348 */
		/* 8213E93Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5B34);
		/* 8213E93Ch case    5:*/		return 0x8213E940;
	}
	return 0x8213E940;
} // Block from 8213E928h-8213E940h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213E940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E940);
		  /* 8213E940h */ case    0:  		/* lis R30, -32768 */
		/* 8213E940h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8213E940h case    0:*/		return 0x8213E944;
		  /* 8213E944h */ case    1:  		/* li R5, 4500 */
		/* 8213E944h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 8213E944h case    1:*/		return 0x8213E948;
		  /* 8213E948h */ case    2:  		/* li R4, 0 */
		/* 8213E948h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E948h case    2:*/		return 0x8213E94C;
		  /* 8213E94Ch */ case    3:  		/* ori R30, R30, 16389 */
		/* 8213E94Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8213E94Ch case    3:*/		return 0x8213E950;
		  /* 8213E950h */ case    4:  		/* bl -197152 */
		/* 8213E950h case    4:*/		regs.LR = 0x8213E954; return 0x8210E730;
		/* 8213E950h case    4:*/		return 0x8213E954;
		  /* 8213E954h */ case    5:  		/* b 536 */
		/* 8213E954h case    5:*/		return 0x8213EB6C;
		/* 8213E954h case    5:*/		return 0x8213E958;
	}
	return 0x8213E958;
} // Block from 8213E940h-8213E958h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213E958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E958);
		  /* 8213E958h */ case    0:  		/* lis R30, -32761 */
		/* 8213E958h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 8213E958h case    0:*/		return 0x8213E95C;
		  /* 8213E95Ch */ case    1:  		/* ori R30, R30, 14 */
		/* 8213E95Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 8213E95Ch case    1:*/		return 0x8213E960;
		  /* 8213E960h */ case    2:  		/* b 524 */
		/* 8213E960h case    2:*/		return 0x8213EB6C;
		/* 8213E960h case    2:*/		return 0x8213E964;
	}
	return 0x8213E964;
} // Block from 8213E958h-8213E964h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213E964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E964);
		  /* 8213E964h */ case    0:  		/* li R5, 0 */
		/* 8213E964h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213E964h case    0:*/		return 0x8213E968;
		  /* 8213E968h */ case    1:  		/* mr R4, R24 */
		/* 8213E968h case    1:*/		regs.R4 = regs.R24;
		/* 8213E968h case    1:*/		return 0x8213E96C;
		  /* 8213E96Ch */ case    2:  		/* bl -39364 */
		/* 8213E96Ch case    2:*/		regs.LR = 0x8213E970; return 0x82134FA8;
		/* 8213E96Ch case    2:*/		return 0x8213E970;
		  /* 8213E970h */ case    3:  		/* mr R3, R31 */
		/* 8213E970h case    3:*/		regs.R3 = regs.R31;
		/* 8213E970h case    3:*/		return 0x8213E974;
		  /* 8213E974h */ case    4:  		/* bl -42748 */
		/* 8213E974h case    4:*/		regs.LR = 0x8213E978; return 0x82134278;
		/* 8213E974h case    4:*/		return 0x8213E978;
		  /* 8213E978h */ case    5:  		/* mr R3, R31 */
		/* 8213E978h case    5:*/		regs.R3 = regs.R31;
		/* 8213E978h case    5:*/		return 0x8213E97C;
		  /* 8213E97Ch */ case    6:  		/* bl -8116 */
		/* 8213E97Ch case    6:*/		regs.LR = 0x8213E980; return 0x8213C9C8;
		/* 8213E97Ch case    6:*/		return 0x8213E980;
		  /* 8213E980h */ case    7:  		/* li R4, 0 */
		/* 8213E980h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E980h case    7:*/		return 0x8213E984;
		  /* 8213E984h */ case    8:  		/* mr R3, R31 */
		/* 8213E984h case    8:*/		regs.R3 = regs.R31;
		/* 8213E984h case    8:*/		return 0x8213E988;
		  /* 8213E988h */ case    9:  		/* bl -38184 */
		/* 8213E988h case    9:*/		regs.LR = 0x8213E98C; return 0x82135460;
		/* 8213E988h case    9:*/		return 0x8213E98C;
		  /* 8213E98Ch */ case   10:  		/* or. R30, R3, R3 */
		/* 8213E98Ch case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E98Ch case   10:*/		return 0x8213E990;
		  /* 8213E990h */ case   11:  		/* bc 12, CR0_LT, 476 */
		/* 8213E990h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E990h case   11:*/		return 0x8213E994;
		  /* 8213E994h */ case   12:  		/* li R5, 0 */
		/* 8213E994h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213E994h case   12:*/		return 0x8213E998;
		  /* 8213E998h */ case   13:  		/* li R4, 0 */
		/* 8213E998h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213E998h case   13:*/		return 0x8213E99C;
		  /* 8213E99Ch */ case   14:  		/* mr R3, R31 */
		/* 8213E99Ch case   14:*/		regs.R3 = regs.R31;
		/* 8213E99Ch case   14:*/		return 0x8213E9A0;
		  /* 8213E9A0h */ case   15:  		/* bl -30232 */
		/* 8213E9A0h case   15:*/		regs.LR = 0x8213E9A4; return 0x82137388;
		/* 8213E9A0h case   15:*/		return 0x8213E9A4;
		  /* 8213E9A4h */ case   16:  		/* or. R30, R3, R3 */
		/* 8213E9A4h case   16:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213E9A4h case   16:*/		return 0x8213E9A8;
		  /* 8213E9A8h */ case   17:  		/* bc 12, CR0_LT, 452 */
		/* 8213E9A8h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213E9A8h case   17:*/		return 0x8213E9AC;
		  /* 8213E9ACh */ case   18:  		/* lwz R9, <#[R31 + 560]> */
		/* 8213E9ACh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000230) );
		/* 8213E9ACh case   18:*/		return 0x8213E9B0;
		  /* 8213E9B0h */ case   19:  		/* mr R10, R21 */
		/* 8213E9B0h case   19:*/		regs.R10 = regs.R21;
		/* 8213E9B0h case   19:*/		return 0x8213E9B4;
		  /* 8213E9B4h */ case   20:  		/* mr R11, R21 */
		/* 8213E9B4h case   20:*/		regs.R11 = regs.R21;
		/* 8213E9B4h case   20:*/		return 0x8213E9B8;
		  /* 8213E9B8h */ case   21:  		/* lwzx R8, <#[R9 + R11]> */
		/* 8213E9B8h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213E9B8h case   21:*/		return 0x8213E9BC;
		  /* 8213E9BCh */ case   22:  		/* cmplwi CR6, R8, 0 */
		/* 8213E9BCh case   22:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8213E9BCh case   22:*/		return 0x8213E9C0;
		  /* 8213E9C0h */ case   23:  		/* bc 4, CR6_EQ, 20 */
		/* 8213E9C0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8213E9D4;  }
		/* 8213E9C0h case   23:*/		return 0x8213E9C4;
		  /* 8213E9C4h */ case   24:  		/* addi R11, R11, 4 */
		/* 8213E9C4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8213E9C4h case   24:*/		return 0x8213E9C8;
		  /* 8213E9C8h */ case   25:  		/* addi R10, R10, 1 */
		/* 8213E9C8h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8213E9C8h case   25:*/		return 0x8213E9CC;
		  /* 8213E9CCh */ case   26:  		/* cmplwi CR6, R11, 24 */
		/* 8213E9CCh case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8213E9CCh case   26:*/		return 0x8213E9D0;
		  /* 8213E9D0h */ case   27:  		/* bc 12, CR6_LT, -24 */
		/* 8213E9D0h case   27:*/		if ( regs.CR[6].lt ) { return 0x8213E9B8;  }
		/* 8213E9D0h case   27:*/		return 0x8213E9D4;
	}
	return 0x8213E9D4;
} // Block from 8213E964h-8213E9D4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8213E9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E9D4);
		  /* 8213E9D4h */ case    0:  		/* lwz R11, <#[R31 + 548]> */
		/* 8213E9D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E9D4h case    0:*/		return 0x8213E9D8;
		  /* 8213E9D8h */ case    1:  		/* cmplwi CR6, R11, 6 */
		/* 8213E9D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 8213E9D8h case    1:*/		return 0x8213E9DC;
		  /* 8213E9DCh */ case    2:  		/* bc 4, CR6_EQ, 252 */
		/* 8213E9DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213EAD8;  }
		/* 8213E9DCh case    2:*/		return 0x8213E9E0;
		  /* 8213E9E0h */ case    3:  		/* cmplwi CR6, R10, 6 */
		/* 8213E9E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 8213E9E0h case    3:*/		return 0x8213E9E4;
		  /* 8213E9E4h */ case    4:  		/* bc 4, CR6_EQ, 244 */
		/* 8213E9E4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213EAD8;  }
		/* 8213E9E4h case    4:*/		return 0x8213E9E8;
		  /* 8213E9E8h */ case    5:  		/* stw R21, <#[R31 + 548]> */
		/* 8213E9E8h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000224) );
		/* 8213E9E8h case    5:*/		return 0x8213E9EC;
		  /* 8213E9ECh */ case    6:  		/* b 236 */
		/* 8213E9ECh case    6:*/		return 0x8213EAD8;
		/* 8213E9ECh case    6:*/		return 0x8213E9F0;
	}
	return 0x8213E9F0;
} // Block from 8213E9D4h-8213E9F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213E9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213E9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213E9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213E9F0);
		  /* 8213E9F0h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 8213E9F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213E9F0h case    0:*/		return 0x8213E9F4;
		  /* 8213E9F4h */ case    1:  		/* mr R3, R31 */
		/* 8213E9F4h case    1:*/		regs.R3 = regs.R31;
		/* 8213E9F4h case    1:*/		return 0x8213E9F8;
		  /* 8213E9F8h */ case    2:  		/* cmplwi CR6, R10, 128 */
		/* 8213E9F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 8213E9F8h case    2:*/		return 0x8213E9FC;
		  /* 8213E9FCh */ case    3:  		/* bc 4, CR6_GT, 40 */
		/* 8213E9FCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213EA24;  }
		/* 8213E9FCh case    3:*/		return 0x8213EA00;
		  /* 8213EA00h */ case    4:  		/* lis R10, -32253 */
		/* 8213EA00h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8213EA00h case    4:*/		return 0x8213EA04;
		  /* 8213EA04h */ case    5:  		/* rlwinm R7, R11, 0, 24, 31 */
		/* 8213EA04h case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R11);
		/* 8213EA04h case    5:*/		return 0x8213EA08;
		  /* 8213EA08h */ case    6:  		/* addi R6, R10, 23284 */
		/* 8213EA08h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5AF4);
		/* 8213EA08h case    6:*/		return 0x8213EA0C;
		  /* 8213EA0Ch */ case    7:  		/* li R5, 4500 */
		/* 8213EA0Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 8213EA0Ch case    7:*/		return 0x8213EA10;
		  /* 8213EA10h */ case    8:  		/* li R4, 0 */
		/* 8213EA10h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213EA10h case    8:*/		return 0x8213EA14;
		  /* 8213EA14h */ case    9:  		/* bl -197348 */
		/* 8213EA14h case    9:*/		regs.LR = 0x8213EA18; return 0x8210E730;
		/* 8213EA14h case    9:*/		return 0x8213EA18;
	}
	return 0x8213EA18;
} // Block from 8213E9F0h-8213EA18h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213EA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EA18);
		  /* 8213EA18h */ case    0:  		/* lis R30, -32768 */
		/* 8213EA18h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8213EA18h case    0:*/		return 0x8213EA1C;
		  /* 8213EA1Ch */ case    1:  		/* ori R30, R30, 16389 */
		/* 8213EA1Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8213EA1Ch case    1:*/		return 0x8213EA20;
		  /* 8213EA20h */ case    2:  		/* b 332 */
		/* 8213EA20h case    2:*/		return 0x8213EB6C;
		/* 8213EA20h case    2:*/		return 0x8213EA24;
	}
	return 0x8213EA24;
} // Block from 8213EA18h-8213EA24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213EA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EA24);
		  /* 8213EA24h */ case    0:  		/* bl -10412 */
		/* 8213EA24h case    0:*/		regs.LR = 0x8213EA28; return 0x8213C178;
		/* 8213EA24h case    0:*/		return 0x8213EA28;
		  /* 8213EA28h */ case    1:  		/* or. R30, R3, R3 */
		/* 8213EA28h case    1:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EA28h case    1:*/		return 0x8213EA2C;
		  /* 8213EA2Ch */ case    2:  		/* bc 12, CR0_LT, 320 */
		/* 8213EA2Ch case    2:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EA2Ch case    2:*/		return 0x8213EA30;
		  /* 8213EA30h */ case    3:  		/* lwz R11, <#[R31 + 560]> */
		/* 8213EA30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 8213EA30h case    3:*/		return 0x8213EA34;
		  /* 8213EA34h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213EA34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EA34h case    4:*/		return 0x8213EA38;
		  /* 8213EA38h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8213EA38h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213EA4C;  }
		/* 8213EA38h case    5:*/		return 0x8213EA3C;
		  /* 8213EA3Ch */ case    6:  		/* mr R3, R31 */
		/* 8213EA3Ch case    6:*/		regs.R3 = regs.R31;
		/* 8213EA3Ch case    6:*/		return 0x8213EA40;
		  /* 8213EA40h */ case    7:  		/* bl -58200 */
		/* 8213EA40h case    7:*/		regs.LR = 0x8213EA44; return 0x821306E8;
		/* 8213EA40h case    7:*/		return 0x8213EA44;
		  /* 8213EA44h */ case    8:  		/* or. R30, R3, R3 */
		/* 8213EA44h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EA44h case    8:*/		return 0x8213EA48;
		  /* 8213EA48h */ case    9:  		/* bc 12, CR0_LT, 292 */
		/* 8213EA48h case    9:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EA48h case    9:*/		return 0x8213EA4C;
	}
	return 0x8213EA4C;
} // Block from 8213EA24h-8213EA4Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213EA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EA4C);
		  /* 8213EA4Ch */ case    0:  		/* lwz R11, <#[R31 + 560]> */
		/* 8213EA4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 8213EA4Ch case    0:*/		return 0x8213EA50;
		  /* 8213EA50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213EA50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EA50h case    1:*/		return 0x8213EA54;
		  /* 8213EA54h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8213EA54h case    2:*/		if ( regs.CR[6].eq ) { return 0x8213EA74;  }
		/* 8213EA54h case    2:*/		return 0x8213EA58;
		  /* 8213EA58h */ case    3:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213EA58h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213EA58h case    3:*/		return 0x8213EA5C;
		  /* 8213EA5Ch */ case    4:  		/* cmplwi CR6, R11, 260 */
		/* 8213EA5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213EA5Ch case    4:*/		return 0x8213EA60;
		  /* 8213EA60h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8213EA60h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213EA74;  }
		/* 8213EA60h case    5:*/		return 0x8213EA64;
		  /* 8213EA64h */ case    6:  		/* mr R3, R31 */
		/* 8213EA64h case    6:*/		regs.R3 = regs.R31;
		/* 8213EA64h case    6:*/		return 0x8213EA68;
		  /* 8213EA68h */ case    7:  		/* bl -6888 */
		/* 8213EA68h case    7:*/		regs.LR = 0x8213EA6C; return 0x8213CF80;
		/* 8213EA68h case    7:*/		return 0x8213EA6C;
		  /* 8213EA6Ch */ case    8:  		/* or. R30, R3, R3 */
		/* 8213EA6Ch case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EA6Ch case    8:*/		return 0x8213EA70;
		  /* 8213EA70h */ case    9:  		/* bc 12, CR0_LT, 252 */
		/* 8213EA70h case    9:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EA70h case    9:*/		return 0x8213EA74;
	}
	return 0x8213EA74;
} // Block from 8213EA4Ch-8213EA74h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213EA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EA74);
		  /* 8213EA74h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213EA74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213EA74h case    0:*/		return 0x8213EA78;
		  /* 8213EA78h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8213EA78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EA78h case    1:*/		return 0x8213EA7C;
		  /* 8213EA7Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 8213EA7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8213EABC;  }
		/* 8213EA7Ch case    2:*/		return 0x8213EA80;
		  /* 8213EA80h */ case    3:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213EA80h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213EA80h case    3:*/		return 0x8213EA84;
		  /* 8213EA84h */ case    4:  		/* cmplwi CR6, R11, 260 */
		/* 8213EA84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213EA84h case    4:*/		return 0x8213EA88;
		  /* 8213EA88h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 8213EA88h case    5:*/		if ( regs.CR[6].eq ) { return 0x8213EABC;  }
		/* 8213EA88h case    5:*/		return 0x8213EA8C;
		  /* 8213EA8Ch */ case    6:  		/* mr R3, R31 */
		/* 8213EA8Ch case    6:*/		regs.R3 = regs.R31;
		/* 8213EA8Ch case    6:*/		return 0x8213EA90;
		  /* 8213EA90h */ case    7:  		/* bl -56736 */
		/* 8213EA90h case    7:*/		regs.LR = 0x8213EA94; return 0x82130CF0;
		/* 8213EA90h case    7:*/		return 0x8213EA94;
		  /* 8213EA94h */ case    8:  		/* or. R30, R3, R3 */
		/* 8213EA94h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EA94h case    8:*/		return 0x8213EA98;
		  /* 8213EA98h */ case    9:  		/* bc 12, CR0_LT, 212 */
		/* 8213EA98h case    9:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EA98h case    9:*/		return 0x8213EA9C;
		  /* 8213EA9Ch */ case   10:  		/* mr R3, R31 */
		/* 8213EA9Ch case   10:*/		regs.R3 = regs.R31;
		/* 8213EA9Ch case   10:*/		return 0x8213EAA0;
		  /* 8213EAA0h */ case   11:  		/* bl -15328 */
		/* 8213EAA0h case   11:*/		regs.LR = 0x8213EAA4; return 0x8213AEC0;
		/* 8213EAA0h case   11:*/		return 0x8213EAA4;
		  /* 8213EAA4h */ case   12:  		/* or. R30, R3, R3 */
		/* 8213EAA4h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EAA4h case   12:*/		return 0x8213EAA8;
		  /* 8213EAA8h */ case   13:  		/* bc 12, CR0_LT, 196 */
		/* 8213EAA8h case   13:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EAA8h case   13:*/		return 0x8213EAAC;
		  /* 8213EAACh */ case   14:  		/* mr R3, R31 */
		/* 8213EAACh case   14:*/		regs.R3 = regs.R31;
		/* 8213EAACh case   14:*/		return 0x8213EAB0;
		  /* 8213EAB0h */ case   15:  		/* bl -55232 */
		/* 8213EAB0h case   15:*/		regs.LR = 0x8213EAB4; return 0x821312F0;
		/* 8213EAB0h case   15:*/		return 0x8213EAB4;
		  /* 8213EAB4h */ case   16:  		/* or. R30, R3, R3 */
		/* 8213EAB4h case   16:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EAB4h case   16:*/		return 0x8213EAB8;
		  /* 8213EAB8h */ case   17:  		/* bc 12, CR0_LT, 180 */
		/* 8213EAB8h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EAB8h case   17:*/		return 0x8213EABC;
	}
	return 0x8213EABC;
} // Block from 8213EA74h-8213EABCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213EABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EABC);
		  /* 8213EABCh */ case    0:  		/* stw R21, <#[R31 + 220]> */
		/* 8213EABCh case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x000000DC) );
		/* 8213EABCh case    0:*/		return 0x8213EAC0;
		  /* 8213EAC0h */ case    1:  		/* li R5, 0 */
		/* 8213EAC0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213EAC0h case    1:*/		return 0x8213EAC4;
		  /* 8213EAC4h */ case    2:  		/* li R4, 0 */
		/* 8213EAC4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213EAC4h case    2:*/		return 0x8213EAC8;
		  /* 8213EAC8h */ case    3:  		/* mr R3, R31 */
		/* 8213EAC8h case    3:*/		regs.R3 = regs.R31;
		/* 8213EAC8h case    3:*/		return 0x8213EACC;
		  /* 8213EACCh */ case    4:  		/* bl -30532 */
		/* 8213EACCh case    4:*/		regs.LR = 0x8213EAD0; return 0x82137388;
		/* 8213EACCh case    4:*/		return 0x8213EAD0;
		  /* 8213EAD0h */ case    5:  		/* or. R30, R3, R3 */
		/* 8213EAD0h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EAD0h case    5:*/		return 0x8213EAD4;
		  /* 8213EAD4h */ case    6:  		/* bc 12, CR0_LT, 152 */
		/* 8213EAD4h case    6:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EAD4h case    6:*/		return 0x8213EAD8;
	}
	return 0x8213EAD8;
} // Block from 8213EABCh-8213EAD8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213EAD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EAD8);
		  /* 8213EAD8h */ case    0:  		/* li R11, 1 */
		/* 8213EAD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213EAD8h case    0:*/		return 0x8213EADC;
		  /* 8213EADCh */ case    1:  		/* mr R3, R31 */
		/* 8213EADCh case    1:*/		regs.R3 = regs.R31;
		/* 8213EADCh case    1:*/		return 0x8213EAE0;
		  /* 8213EAE0h */ case    2:  		/* stw R11, <#[R31 + 220]> */
		/* 8213EAE0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000DC) );
		/* 8213EAE0h case    2:*/		return 0x8213EAE4;
		  /* 8213EAE4h */ case    3:  		/* bl -34180 */
		/* 8213EAE4h case    3:*/		regs.LR = 0x8213EAE8; return 0x82136560;
		/* 8213EAE4h case    3:*/		return 0x8213EAE8;
		  /* 8213EAE8h */ case    4:  		/* or. R30, R3, R3 */
		/* 8213EAE8h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EAE8h case    4:*/		return 0x8213EAEC;
		  /* 8213EAECh */ case    5:  		/* bc 12, CR0_LT, 128 */
		/* 8213EAECh case    5:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EAECh case    5:*/		return 0x8213EAF0;
		  /* 8213EAF0h */ case    6:  		/* li R7, 0 */
		/* 8213EAF0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213EAF0h case    6:*/		return 0x8213EAF4;
		  /* 8213EAF4h */ case    7:  		/* lwz R6, <#[R31 + 548]> */
		/* 8213EAF4h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000224) );
		/* 8213EAF4h case    7:*/		return 0x8213EAF8;
		  /* 8213EAF8h */ case    8:  		/* li R5, 0 */
		/* 8213EAF8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213EAF8h case    8:*/		return 0x8213EAFC;
		  /* 8213EAFCh */ case    9:  		/* lwz R4, <#[R31 + 560]> */
		/* 8213EAFCh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000230) );
		/* 8213EAFCh case    9:*/		return 0x8213EB00;
		  /* 8213EB00h */ case   10:  		/* mr R3, R31 */
		/* 8213EB00h case   10:*/		regs.R3 = regs.R31;
		/* 8213EB00h case   10:*/		return 0x8213EB04;
		  /* 8213EB04h */ case   11:  		/* bl -17660 */
		/* 8213EB04h case   11:*/		regs.LR = 0x8213EB08; return 0x8213A608;
		/* 8213EB04h case   11:*/		return 0x8213EB08;
		  /* 8213EB08h */ case   12:  		/* or. R30, R3, R3 */
		/* 8213EB08h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EB08h case   12:*/		return 0x8213EB0C;
		  /* 8213EB0Ch */ case   13:  		/* bc 12, CR0_LT, 96 */
		/* 8213EB0Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EB0Ch case   13:*/		return 0x8213EB10;
		  /* 8213EB10h */ case   14:  		/* li R7, 0 */
		/* 8213EB10h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8213EB10h case   14:*/		return 0x8213EB14;
		  /* 8213EB14h */ case   15:  		/* lwz R6, <#[R31 + 552]> */
		/* 8213EB14h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000228) );
		/* 8213EB14h case   15:*/		return 0x8213EB18;
		  /* 8213EB18h */ case   16:  		/* li R5, 0 */
		/* 8213EB18h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213EB18h case   16:*/		return 0x8213EB1C;
		  /* 8213EB1Ch */ case   17:  		/* lwz R4, <#[R31 + 564]> */
		/* 8213EB1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 8213EB1Ch case   17:*/		return 0x8213EB20;
		  /* 8213EB20h */ case   18:  		/* mr R3, R31 */
		/* 8213EB20h case   18:*/		regs.R3 = regs.R31;
		/* 8213EB20h case   18:*/		return 0x8213EB24;
		  /* 8213EB24h */ case   19:  		/* bl -17692 */
		/* 8213EB24h case   19:*/		regs.LR = 0x8213EB28; return 0x8213A608;
		/* 8213EB24h case   19:*/		return 0x8213EB28;
		  /* 8213EB28h */ case   20:  		/* or. R30, R3, R3 */
		/* 8213EB28h case   20:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EB28h case   20:*/		return 0x8213EB2C;
		  /* 8213EB2Ch */ case   21:  		/* bc 12, CR0_LT, 64 */
		/* 8213EB2Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EB2Ch case   21:*/		return 0x8213EB30;
		  /* 8213EB30h */ case   22:  		/* mr R3, R31 */
		/* 8213EB30h case   22:*/		regs.R3 = regs.R31;
		/* 8213EB30h case   22:*/		return 0x8213EB34;
		  /* 8213EB34h */ case   23:  		/* bl -59260 */
		/* 8213EB34h case   23:*/		regs.LR = 0x8213EB38; return 0x821303B8;
		/* 8213EB34h case   23:*/		return 0x8213EB38;
		  /* 8213EB38h */ case   24:  		/* or. R30, R3, R3 */
		/* 8213EB38h case   24:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EB38h case   24:*/		return 0x8213EB3C;
		  /* 8213EB3Ch */ case   25:  		/* bc 12, CR0_LT, 48 */
		/* 8213EB3Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EB3Ch case   25:*/		return 0x8213EB40;
		  /* 8213EB40h */ case   26:  		/* lwz R11, <#[R31 + 564]> */
		/* 8213EB40h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 8213EB40h case   26:*/		return 0x8213EB44;
		  /* 8213EB44h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 8213EB44h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EB44h case   27:*/		return 0x8213EB48;
		  /* 8213EB48h */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 8213EB48h case   28:*/		if ( regs.CR[6].eq ) { return 0x8213EB68;  }
		/* 8213EB48h case   28:*/		return 0x8213EB4C;
		  /* 8213EB4Ch */ case   29:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213EB4Ch case   29:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213EB4Ch case   29:*/		return 0x8213EB50;
		  /* 8213EB50h */ case   30:  		/* cmplwi CR6, R11, 260 */
		/* 8213EB50h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213EB50h case   30:*/		return 0x8213EB54;
		  /* 8213EB54h */ case   31:  		/* bc 12, CR6_EQ, 20 */
		/* 8213EB54h case   31:*/		if ( regs.CR[6].eq ) { return 0x8213EB68;  }
		/* 8213EB54h case   31:*/		return 0x8213EB58;
		  /* 8213EB58h */ case   32:  		/* mr R3, R31 */
		/* 8213EB58h case   32:*/		regs.R3 = regs.R31;
		/* 8213EB58h case   32:*/		return 0x8213EB5C;
		  /* 8213EB5Ch */ case   33:  		/* bl -61996 */
		/* 8213EB5Ch case   33:*/		regs.LR = 0x8213EB60; return 0x8212F930;
		/* 8213EB5Ch case   33:*/		return 0x8213EB60;
		  /* 8213EB60h */ case   34:  		/* or. R30, R3, R3 */
		/* 8213EB60h case   34:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213EB60h case   34:*/		return 0x8213EB64;
		  /* 8213EB64h */ case   35:  		/* bc 12, CR0_LT, 8 */
		/* 8213EB64h case   35:*/		if ( regs.CR[0].lt ) { return 0x8213EB6C;  }
		/* 8213EB64h case   35:*/		return 0x8213EB68;
	}
	return 0x8213EB68;
} // Block from 8213EAD8h-8213EB68h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8213EB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EB68);
		  /* 8213EB68h */ case    0:  		/* mr R30, R21 */
		/* 8213EB68h case    0:*/		regs.R30 = regs.R21;
		/* 8213EB68h case    0:*/		return 0x8213EB6C;
	}
	return 0x8213EB6C;
} // Block from 8213EB68h-8213EB6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213EB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EB6C);
		  /* 8213EB6Ch */ case    0:  		/* mr R3, R30 */
		/* 8213EB6Ch case    0:*/		regs.R3 = regs.R30;
		/* 8213EB6Ch case    0:*/		return 0x8213EB70;
	}
	return 0x8213EB70;
} // Block from 8213EB6Ch-8213EB70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213EB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EB70);
		  /* 8213EB70h */ case    0:  		/* addi R1, R1, 192 */
		/* 8213EB70h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8213EB70h case    0:*/		return 0x8213EB74;
		  /* 8213EB74h */ case    1:  		/* lfd FR31, <#[R1 - 104]> */
		/* 8213EB74h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8213EB74h case    1:*/		return 0x8213EB78;
		  /* 8213EB78h */ case    2:  		/* b -710892 */
		/* 8213EB78h case    2:*/		return 0x8209128C;
		/* 8213EB78h case    2:*/		return 0x8213EB7C;
		  /* 8213EB7Ch */ case    3:  		/* nop */
		/* 8213EB7Ch case    3:*/		cpu::op::nop();
		/* 8213EB7Ch case    3:*/		return 0x8213EB80;
	}
	return 0x8213EB80;
} // Block from 8213EB70h-8213EB80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213EB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EB80);
		  /* 8213EB80h */ case    0:  		/* mfspr R12, LR */
		/* 8213EB80h case    0:*/		regs.R12 = regs.LR;
		/* 8213EB80h case    0:*/		return 0x8213EB84;
		  /* 8213EB84h */ case    1:  		/* bl -710988 */
		/* 8213EB84h case    1:*/		regs.LR = 0x8213EB88; return 0x82091238;
		/* 8213EB84h case    1:*/		return 0x8213EB88;
		  /* 8213EB88h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8213EB88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8213EB88h case    2:*/		return 0x8213EB8C;
		  /* 8213EB8Ch */ case    3:  		/* lwz R11, <#[R4 + 104]> */
		/* 8213EB8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000068) );
		/* 8213EB8Ch case    3:*/		return 0x8213EB90;
		  /* 8213EB90h */ case    4:  		/* li R20, 0 */
		/* 8213EB90h case    4:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8213EB90h case    4:*/		return 0x8213EB94;
		  /* 8213EB94h */ case    5:  		/* addi R9, R1, 80 */
		/* 8213EB94h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8213EB94h case    5:*/		return 0x8213EB98;
		  /* 8213EB98h */ case    6:  		/* mr R27, R3 */
		/* 8213EB98h case    6:*/		regs.R27 = regs.R3;
		/* 8213EB98h case    6:*/		return 0x8213EB9C;
		  /* 8213EB9Ch */ case    7:  		/* mr R26, R4 */
		/* 8213EB9Ch case    7:*/		regs.R26 = regs.R4;
		/* 8213EB9Ch case    7:*/		return 0x8213EBA0;
		  /* 8213EBA0h */ case    8:  		/* mr R21, R5 */
		/* 8213EBA0h case    8:*/		regs.R21 = regs.R5;
		/* 8213EBA0h case    8:*/		return 0x8213EBA4;
		  /* 8213EBA4h */ case    9:  		/* lwz R23, <#[R11 + 24]> */
		/* 8213EBA4h case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000018) );
		/* 8213EBA4h case    9:*/		return 0x8213EBA8;
		  /* 8213EBA8h */ case   10:  		/* mr R30, R20 */
		/* 8213EBA8h case   10:*/		regs.R30 = regs.R20;
		/* 8213EBA8h case   10:*/		return 0x8213EBAC;
		  /* 8213EBACh */ case   11:  		/* mr R24, R20 */
		/* 8213EBACh case   11:*/		regs.R24 = regs.R20;
		/* 8213EBACh case   11:*/		return 0x8213EBB0;
		  /* 8213EBB0h */ case   12:  		/* mr R28, R20 */
		/* 8213EBB0h case   12:*/		regs.R28 = regs.R20;
		/* 8213EBB0h case   12:*/		return 0x8213EBB4;
		  /* 8213EBB4h */ case   13:  		/* li R10, 32 */
		/* 8213EBB4h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 8213EBB4h case   13:*/		return 0x8213EBB8;
		  /* 8213EBB8h */ case   14:  		/* addi R11, R1, 80 */
		/* 8213EBB8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213EBB8h case   14:*/		return 0x8213EBBC;
		  /* 8213EBBCh */ case   15:  		/* subf R9, R9, R23 */
		/* 8213EBBCh case   15:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R23);
		/* 8213EBBCh case   15:*/		return 0x8213EBC0;
		  /* 8213EBC0h */ case   16:  		/* lbzx R8, <#[R9 + R11]> */
		/* 8213EBC0h case   16:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213EBC0h case   16:*/		return 0x8213EBC4;
		  /* 8213EBC4h */ case   17:  		/* cmplwi CR0, R8, 0 */
		/* 8213EBC4h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 8213EBC4h case   17:*/		return 0x8213EBC8;
		  /* 8213EBC8h */ case   18:  		/* bc 12, CR0_EQ, 20 */
		/* 8213EBC8h case   18:*/		if ( regs.CR[0].eq ) { return 0x8213EBDC;  }
		/* 8213EBC8h case   18:*/		return 0x8213EBCC;
		  /* 8213EBCCh */ case   19:  		/* stb R8, <#[R11]> */
		/* 8213EBCCh case   19:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8213EBCCh case   19:*/		return 0x8213EBD0;
		  /* 8213EBD0h */ case   20:  		/* addic. R10, R10, -1 */
		/* 8213EBD0h case   20:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8213EBD0h case   20:*/		return 0x8213EBD4;
		  /* 8213EBD4h */ case   21:  		/* addi R11, R11, 1 */
		/* 8213EBD4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8213EBD4h case   21:*/		return 0x8213EBD8;
		  /* 8213EBD8h */ case   22:  		/* bc 4, CR0_EQ, -24 */
		/* 8213EBD8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8213EBC0;  }
		/* 8213EBD8h case   22:*/		return 0x8213EBDC;
	}
	return 0x8213EBDC;
} // Block from 8213EB80h-8213EBDCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8213EBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EBDC);
		  /* 8213EBDCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8213EBDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213EBDCh case    0:*/		return 0x8213EBE0;
		  /* 8213EBE0h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8213EBE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213EBE8;  }
		/* 8213EBE0h case    1:*/		return 0x8213EBE4;
		  /* 8213EBE4h */ case    2:  		/* addi R11, R11, -1 */
		/* 8213EBE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8213EBE4h case    2:*/		return 0x8213EBE8;
	}
	return 0x8213EBE8;
} // Block from 8213EBDCh-8213EBE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213EBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EBE8);
		  /* 8213EBE8h */ case    0:  		/* stb R20, <#[R11]> */
		/* 8213EBE8h case    0:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 8213EBE8h case    0:*/		return 0x8213EBEC;
		  /* 8213EBECh */ case    1:  		/* addi R31, R1, 80 */
		/* 8213EBECh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x50);
		/* 8213EBECh case    1:*/		return 0x8213EBF0;
		  /* 8213EBF0h */ case    2:  		/* lbz R11, <#[R1 + 80]> */
		/* 8213EBF0h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8213EBF0h case    2:*/		return 0x8213EBF4;
		  /* 8213EBF4h */ case    3:  		/* b 28 */
		/* 8213EBF4h case    3:*/		return 0x8213EC10;
		/* 8213EBF4h case    3:*/		return 0x8213EBF8;
		  /* 8213EBF8h */ case    4:  		/* lbz R11, <#[R31]> */
		/* 8213EBF8h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EBF8h case    4:*/		return 0x8213EBFC;
		  /* 8213EBFCh */ case    5:  		/* extsb R3, R11 */
		/* 8213EBFCh case    5:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 8213EBFCh case    5:*/		return 0x8213EC00;
		  /* 8213EC00h */ case    6:  		/* bl -677136 */
		/* 8213EC00h case    6:*/		regs.LR = 0x8213EC04; return 0x820996F0;
		/* 8213EC00h case    6:*/		return 0x8213EC04;
		  /* 8213EC04h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8213EC04h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EC04h case    7:*/		return 0x8213EC08;
		  /* 8213EC08h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 8213EC08h case    8:*/		if ( regs.CR[0].eq ) { return 0x8213EC18;  }
		/* 8213EC08h case    8:*/		return 0x8213EC0C;
		  /* 8213EC0Ch */ case    9:  		/* lbzu R11, <#[R31 + 1]> */
		/* 8213EC0Ch case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 8213EC0Ch case    9:*/		return 0x8213EC10;
	}
	return 0x8213EC10;
} // Block from 8213EBE8h-8213EC10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC10);
		  /* 8213EC10h */ case    0:  		/* cmplwi CR0, R11, 0 */
		/* 8213EC10h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8213EC10h case    0:*/		return 0x8213EC14;
		  /* 8213EC14h */ case    1:  		/* bc 4, CR0_EQ, -28 */
		/* 8213EC14h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8213EBF8;  }
		/* 8213EC14h case    1:*/		return 0x8213EC18;
	}
	return 0x8213EC18;
} // Block from 8213EC10h-8213EC18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC18);
		  /* 8213EC18h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8213EC18h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EC18h case    0:*/		return 0x8213EC1C;
		  /* 8213EC1Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8213EC1Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8213EC1Ch case    1:*/		return 0x8213EC20;
		  /* 8213EC20h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8213EC20h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213EC34;  }
		/* 8213EC20h case    2:*/		return 0x8213EC24;
		  /* 8213EC24h */ case    3:  		/* mr R3, R31 */
		/* 8213EC24h case    3:*/		regs.R3 = regs.R31;
		/* 8213EC24h case    3:*/		return 0x8213EC28;
		  /* 8213EC28h */ case    4:  		/* bl -704704 */
		/* 8213EC28h case    4:*/		regs.LR = 0x8213EC2C; return 0x82092B68;
		/* 8213EC28h case    4:*/		return 0x8213EC2C;
		  /* 8213EC2Ch */ case    5:  		/* mr R29, R3 */
		/* 8213EC2Ch case    5:*/		regs.R29 = regs.R3;
		/* 8213EC2Ch case    5:*/		return 0x8213EC30;
		  /* 8213EC30h */ case    6:  		/* b 8 */
		/* 8213EC30h case    6:*/		return 0x8213EC38;
		/* 8213EC30h case    6:*/		return 0x8213EC34;
	}
	return 0x8213EC34;
} // Block from 8213EC18h-8213EC34h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC34);
		  /* 8213EC34h */ case    0:  		/* mr R29, R20 */
		/* 8213EC34h case    0:*/		regs.R29 = regs.R20;
		/* 8213EC34h case    0:*/		return 0x8213EC38;
	}
	return 0x8213EC38;
} // Block from 8213EC34h-8213EC38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC38);
		  /* 8213EC38h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8213EC38h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EC38h case    0:*/		return 0x8213EC3C;
		  /* 8213EC3Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8213EC3Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8213EC3Ch case    1:*/		return 0x8213EC40;
		  /* 8213EC40h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8213EC40h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213EC4C;  }
		/* 8213EC40h case    2:*/		return 0x8213EC44;
		  /* 8213EC44h */ case    3:  		/* stb R20, <#[R31]> */
		/* 8213EC44h case    3:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EC44h case    3:*/		return 0x8213EC48;
		  /* 8213EC48h */ case    4:  		/* addi R31, R31, 1 */
		/* 8213EC48h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8213EC48h case    4:*/		return 0x8213EC4C;
	}
	return 0x8213EC4C;
} // Block from 8213EC38h-8213EC4Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC4C);
		  /* 8213EC4Ch */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8213EC4Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EC4Ch case    0:*/		return 0x8213EC50;
		  /* 8213EC50h */ case    1:  		/* b 20 */
		/* 8213EC50h case    1:*/		return 0x8213EC64;
		/* 8213EC50h case    1:*/		return 0x8213EC54;
		  /* 8213EC54h */ case    2:  		/* bl -677188 */
		/* 8213EC54h case    2:*/		regs.LR = 0x8213EC58; return 0x82099710;
		/* 8213EC54h case    2:*/		return 0x8213EC58;
		  /* 8213EC58h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8213EC58h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EC58h case    3:*/		return 0x8213EC5C;
		  /* 8213EC5Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 8213EC5Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8213EC6C;  }
		/* 8213EC5Ch case    4:*/		return 0x8213EC60;
		  /* 8213EC60h */ case    5:  		/* lbzu R11, <#[R31 + 1]> */
		/* 8213EC60h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 8213EC60h case    5:*/		return 0x8213EC64;
	}
	return 0x8213EC64;
} // Block from 8213EC4Ch-8213EC64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC64);
		  /* 8213EC64h */ case    0:  		/* extsb. R3, R11 */
		/* 8213EC64h case    0:*/		cpu::op::extsb<1>(regs,&regs.R3,regs.R11);
		/* 8213EC64h case    0:*/		return 0x8213EC68;
		  /* 8213EC68h */ case    1:  		/* bc 4, CR0_EQ, -20 */
		/* 8213EC68h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8213EC54;  }
		/* 8213EC68h case    1:*/		return 0x8213EC6C;
	}
	return 0x8213EC6C;
} // Block from 8213EC64h-8213EC6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC6C);
		  /* 8213EC6Ch */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8213EC6Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213EC6Ch case    0:*/		return 0x8213EC70;
		  /* 8213EC70h */ case    1:  		/* li R22, -1 */
		/* 8213EC70h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 8213EC70h case    1:*/		return 0x8213EC74;
		  /* 8213EC74h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 8213EC74h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8213EC74h case    2:*/		return 0x8213EC78;
		  /* 8213EC78h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8213EC78h case    3:*/		if ( regs.CR[0].eq ) { return 0x8213EC84;  }
		/* 8213EC78h case    3:*/		return 0x8213EC7C;
		  /* 8213EC7Ch */ case    4:  		/* mr R31, R22 */
		/* 8213EC7Ch case    4:*/		regs.R31 = regs.R22;
		/* 8213EC7Ch case    4:*/		return 0x8213EC80;
		  /* 8213EC80h */ case    5:  		/* b 16 */
		/* 8213EC80h case    5:*/		return 0x8213EC90;
		/* 8213EC80h case    5:*/		return 0x8213EC84;
	}
	return 0x8213EC84;
} // Block from 8213EC6Ch-8213EC84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC84);
		  /* 8213EC84h */ case    0:  		/* lwz R11, <#[R26 + 112]> */
		/* 8213EC84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000070) );
		/* 8213EC84h case    0:*/		return 0x8213EC88;
		  /* 8213EC88h */ case    1:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 8213EC88h case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 8213EC88h case    1:*/		return 0x8213EC8C;
		  /* 8213EC8Ch */ case    2:  		/* add R31, R11, R29 */
		/* 8213EC8Ch case    2:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R29);
		/* 8213EC8Ch case    2:*/		return 0x8213EC90;
	}
	return 0x8213EC90;
} // Block from 8213EC84h-8213EC90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213EC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EC90);
		  /* 8213EC90h */ case    0:  		/* lwz R11, <#[R26 + 108]> */
		/* 8213EC90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 8213EC90h case    0:*/		return 0x8213EC94;
		  /* 8213EC94h */ case    1:  		/* li R29, 1 */
		/* 8213EC94h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8213EC94h case    1:*/		return 0x8213EC98;
		  /* 8213EC98h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 8213EC98h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213EC98h case    2:*/		return 0x8213EC9C;
		  /* 8213EC9Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8213EC9Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8213ECD8;  }
		/* 8213EC9Ch case    3:*/		return 0x8213ECA0;
		  /* 8213ECA0h */ case    4:  		/* rlwinm R28, R11, 0, 24, 31 */
		/* 8213ECA0h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R11);
		/* 8213ECA0h case    4:*/		return 0x8213ECA4;
		  /* 8213ECA4h */ case    5:  		/* lbz R31, <#[R26 + 110]> */
		/* 8213ECA4h case    5:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R26 + 0x0000006E) );
		/* 8213ECA4h case    5:*/		return 0x8213ECA8;
		  /* 8213ECA8h */ case    6:  		/* cmplwi CR6, R28, 4 */
		/* 8213ECA8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 8213ECA8h case    6:*/		return 0x8213ECAC;
		  /* 8213ECACh */ case    7:  		/* bc 4, CR6_EQ, 816 */
		/* 8213ECACh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213EFDC;  }
		/* 8213ECACh case    7:*/		return 0x8213ECB0;
		  /* 8213ECB0h */ case    8:  		/* lwz R11, <#[R27 + 1100]> */
		/* 8213ECB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000044C) );
		/* 8213ECB0h case    8:*/		return 0x8213ECB4;
		  /* 8213ECB4h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 8213ECB4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213ECB4h case    9:*/		return 0x8213ECB8;
		  /* 8213ECB8h */ case   10:  		/* bc 4, CR6_EQ, 1064 */
		/* 8213ECB8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213ECB8h case   10:*/		return 0x8213ECBC;
		  /* 8213ECBCh */ case   11:  		/* cmpwi CR6, R21, 0 */
		/* 8213ECBCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213ECBCh case   11:*/		return 0x8213ECC0;
		  /* 8213ECC0h */ case   12:  		/* bc 4, CR6_EQ, 1056 */
		/* 8213ECC0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213ECC0h case   12:*/		return 0x8213ECC4;
		  /* 8213ECC4h */ case   13:  		/* lis R11, -32253 */
		/* 8213ECC4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213ECC4h case   13:*/		return 0x8213ECC8;
		  /* 8213ECC8h */ case   14:  		/* mr R8, R31 */
		/* 8213ECC8h case   14:*/		regs.R8 = regs.R31;
		/* 8213ECC8h case   14:*/		return 0x8213ECCC;
		  /* 8213ECCCh */ case   15:  		/* addi R6, R11, 23816 */
		/* 8213ECCCh case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5D08);
		/* 8213ECCCh case   15:*/		return 0x8213ECD0;
		  /* 8213ECD0h */ case   16:  		/* addi R7, R1, 80 */
		/* 8213ECD0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8213ECD0h case   16:*/		return 0x8213ECD4;
		  /* 8213ECD4h */ case   17:  		/* b 544 */
		/* 8213ECD4h case   17:*/		return 0x8213EEF4;
		/* 8213ECD4h case   17:*/		return 0x8213ECD8;
	}
	return 0x8213ECD8;
} // Block from 8213EC90h-8213ECD8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213ECD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ECD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ECD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ECD8);
		  /* 8213ECD8h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 8213ECD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8213ECD8h case    0:*/		return 0x8213ECDC;
		  /* 8213ECDCh */ case    1:  		/* mr R4, R26 */
		/* 8213ECDCh case    1:*/		regs.R4 = regs.R26;
		/* 8213ECDCh case    1:*/		return 0x8213ECE0;
		  /* 8213ECE0h */ case    2:  		/* lwz R10, <#[R27 + 16]> */
		/* 8213ECE0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 8213ECE0h case    2:*/		return 0x8213ECE4;
		  /* 8213ECE4h */ case    3:  		/* mr R3, R27 */
		/* 8213ECE4h case    3:*/		regs.R3 = regs.R27;
		/* 8213ECE4h case    3:*/		return 0x8213ECE8;
		  /* 8213ECE8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213ECE8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213ECE8h case    4:*/		return 0x8213ECEC;
		  /* 8213ECECh */ case    5:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8213ECECh case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213ECECh case    5:*/		return 0x8213ECF0;
		  /* 8213ECF0h */ case    6:  		/* bl -270072 */
		/* 8213ECF0h case    6:*/		regs.LR = 0x8213ECF4; return 0x820FCDF8;
		/* 8213ECF0h case    6:*/		return 0x8213ECF4;
		  /* 8213ECF4h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 8213ECF4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8213ECF4h case    7:*/		return 0x8213ECF8;
		  /* 8213ECF8h */ case    8:  		/* mr R25, R3 */
		/* 8213ECF8h case    8:*/		regs.R25 = regs.R3;
		/* 8213ECF8h case    8:*/		return 0x8213ECFC;
		  /* 8213ECFCh */ case    9:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 8213ECFCh case    9:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 8213ECFCh case    9:*/		return 0x8213ED00;
		  /* 8213ED00h */ case   10:  		/* bc 12, CR0_EQ, 528 */
		/* 8213ED00h case   10:*/		if ( regs.CR[0].eq ) { return 0x8213EF10;  }
		/* 8213ED00h case   10:*/		return 0x8213ED04;
		  /* 8213ED04h */ case   11:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 8213ED04h case   11:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 8213ED04h case   11:*/		return 0x8213ED08;
		  /* 8213ED08h */ case   12:  		/* bc 4, CR0_EQ, 520 */
		/* 8213ED08h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8213EF10;  }
		/* 8213ED08h case   12:*/		return 0x8213ED0C;
		  /* 8213ED0Ch */ case   13:  		/* lis R11, -32255 */
		/* 8213ED0Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213ED0Ch case   13:*/		return 0x8213ED10;
		  /* 8213ED10h */ case   14:  		/* addi R3, R1, 80 */
		/* 8213ED10h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213ED10h case   14:*/		return 0x8213ED14;
		  /* 8213ED14h */ case   15:  		/* addi R4, R11, 5080 */
		/* 8213ED14h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x13D8);
		/* 8213ED14h case   15:*/		return 0x8213ED18;
		  /* 8213ED18h */ case   16:  		/* bl -702696 */
		/* 8213ED18h case   16:*/		regs.LR = 0x8213ED1C; return 0x82093430;
		/* 8213ED18h case   16:*/		return 0x8213ED1C;
		  /* 8213ED1Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8213ED1Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213ED1Ch case   17:*/		return 0x8213ED20;
		  /* 8213ED20h */ case   18:  		/* bc 4, CR0_EQ, 32 */
		/* 8213ED20h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8213ED40;  }
		/* 8213ED20h case   18:*/		return 0x8213ED24;
		  /* 8213ED24h */ case   19:  		/* mr R28, R29 */
		/* 8213ED24h case   19:*/		regs.R28 = regs.R29;
		/* 8213ED24h case   19:*/		return 0x8213ED28;
		  /* 8213ED28h */ case   20:  		/* cmpwi CR6, R21, 0 */
		/* 8213ED28h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213ED28h case   20:*/		return 0x8213ED2C;
		  /* 8213ED2Ch */ case   21:  		/* li R11, 2 */
		/* 8213ED2Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8213ED2Ch case   21:*/		return 0x8213ED30;
		  /* 8213ED30h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 8213ED30h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8213ED38;  }
		/* 8213ED30h case   22:*/		return 0x8213ED34;
		  /* 8213ED34h */ case   23:  		/* lwz R11, <#[R27 + 40]> */
		/* 8213ED34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 8213ED34h case   23:*/		return 0x8213ED38;
	}
	return 0x8213ED38;
} // Block from 8213ECD8h-8213ED38h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213ED38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ED38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ED38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ED38);
		  /* 8213ED38h */ case    0:  		/* subfc R11, R11, R31 */
		/* 8213ED38h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8213ED38h case    0:*/		return 0x8213ED3C;
		  /* 8213ED3Ch */ case    1:  		/* b 132 */
		/* 8213ED3Ch case    1:*/		return 0x8213EDC0;
		/* 8213ED3Ch case    1:*/		return 0x8213ED40;
	}
	return 0x8213ED40;
} // Block from 8213ED38h-8213ED40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213ED40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ED40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ED40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ED40);
		  /* 8213ED40h */ case    0:  		/* lis R11, -32255 */
		/* 8213ED40h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213ED40h case    0:*/		return 0x8213ED44;
		  /* 8213ED44h */ case    1:  		/* addi R3, R1, 80 */
		/* 8213ED44h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213ED44h case    1:*/		return 0x8213ED48;
		  /* 8213ED48h */ case    2:  		/* addi R4, R11, -8388 */
		/* 8213ED48h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDF3C);
		/* 8213ED48h case    2:*/		return 0x8213ED4C;
		  /* 8213ED4Ch */ case    3:  		/* bl -702748 */
		/* 8213ED4Ch case    3:*/		regs.LR = 0x8213ED50; return 0x82093430;
		/* 8213ED4Ch case    3:*/		return 0x8213ED50;
		  /* 8213ED50h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213ED50h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213ED50h case    4:*/		return 0x8213ED54;
		  /* 8213ED54h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 8213ED54h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8213ED70;  }
		/* 8213ED54h case    5:*/		return 0x8213ED58;
		  /* 8213ED58h */ case    6:  		/* li R28, 3 */
		/* 8213ED58h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 8213ED58h case    6:*/		return 0x8213ED5C;
		  /* 8213ED5Ch */ case    7:  		/* cmpwi CR6, R21, 0 */
		/* 8213ED5Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213ED5Ch case    7:*/		return 0x8213ED60;
		  /* 8213ED60h */ case    8:  		/* li R11, 8 */
		/* 8213ED60h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8213ED60h case    8:*/		return 0x8213ED64;
		  /* 8213ED64h */ case    9:  		/* bc 4, CR6_EQ, -44 */
		/* 8213ED64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8213ED38;  }
		/* 8213ED64h case    9:*/		return 0x8213ED68;
		  /* 8213ED68h */ case   10:  		/* lwz R11, <#[R27 + 60]> */
		/* 8213ED68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 8213ED68h case   10:*/		return 0x8213ED6C;
		  /* 8213ED6Ch */ case   11:  		/* b -52 */
		/* 8213ED6Ch case   11:*/		return 0x8213ED38;
		/* 8213ED6Ch case   11:*/		return 0x8213ED70;
	}
	return 0x8213ED70;
} // Block from 8213ED40h-8213ED70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213ED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213ED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213ED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213ED70);
		  /* 8213ED70h */ case    0:  		/* lis R11, -32255 */
		/* 8213ED70h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213ED70h case    0:*/		return 0x8213ED74;
		  /* 8213ED74h */ case    1:  		/* addi R3, R1, 80 */
		/* 8213ED74h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213ED74h case    1:*/		return 0x8213ED78;
		  /* 8213ED78h */ case    2:  		/* addi R4, R11, 4972 */
		/* 8213ED78h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x136C);
		/* 8213ED78h case    2:*/		return 0x8213ED7C;
		  /* 8213ED7Ch */ case    3:  		/* bl -702796 */
		/* 8213ED7Ch case    3:*/		regs.LR = 0x8213ED80; return 0x82093430;
		/* 8213ED7Ch case    3:*/		return 0x8213ED80;
		  /* 8213ED80h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213ED80h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213ED80h case    4:*/		return 0x8213ED84;
		  /* 8213ED84h */ case    5:  		/* bc 12, CR0_EQ, 52 */
		/* 8213ED84h case    5:*/		if ( regs.CR[0].eq ) { return 0x8213EDB8;  }
		/* 8213ED84h case    5:*/		return 0x8213ED88;
		  /* 8213ED88h */ case    6:  		/* lis R11, -32255 */
		/* 8213ED88h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213ED88h case    6:*/		return 0x8213ED8C;
		  /* 8213ED8Ch */ case    7:  		/* addi R3, R1, 80 */
		/* 8213ED8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213ED8Ch case    7:*/		return 0x8213ED90;
		  /* 8213ED90h */ case    8:  		/* addi R4, R11, 4996 */
		/* 8213ED90h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1384);
		/* 8213ED90h case    8:*/		return 0x8213ED94;
		  /* 8213ED94h */ case    9:  		/* bl -702820 */
		/* 8213ED94h case    9:*/		regs.LR = 0x8213ED98; return 0x82093430;
		/* 8213ED94h case    9:*/		return 0x8213ED98;
		  /* 8213ED98h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8213ED98h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213ED98h case   10:*/		return 0x8213ED9C;
		  /* 8213ED9Ch */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 8213ED9Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8213EDB8;  }
		/* 8213ED9Ch case   11:*/		return 0x8213EDA0;
		  /* 8213EDA0h */ case   12:  		/* lis R11, -32255 */
		/* 8213EDA0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213EDA0h case   12:*/		return 0x8213EDA4;
		  /* 8213EDA4h */ case   13:  		/* addi R3, R1, 80 */
		/* 8213EDA4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213EDA4h case   13:*/		return 0x8213EDA8;
		  /* 8213EDA8h */ case   14:  		/* addi R4, R11, 5028 */
		/* 8213EDA8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x13A4);
		/* 8213EDA8h case   14:*/		return 0x8213EDAC;
		  /* 8213EDACh */ case   15:  		/* bl -702844 */
		/* 8213EDACh case   15:*/		regs.LR = 0x8213EDB0; return 0x82093430;
		/* 8213EDACh case   15:*/		return 0x8213EDB0;
		  /* 8213EDB0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213EDB0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EDB0h case   16:*/		return 0x8213EDB4;
		  /* 8213EDB4h */ case   17:  		/* bc 4, CR0_EQ, 24 */
		/* 8213EDB4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8213EDCC;  }
		/* 8213EDB4h case   17:*/		return 0x8213EDB8;
	}
	return 0x8213EDB8;
} // Block from 8213ED70h-8213EDB8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213EDB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EDB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EDB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EDB8);
		  /* 8213EDB8h */ case    0:  		/* subfc R11, R29, R31 */
		/* 8213EDB8h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 8213EDB8h case    0:*/		return 0x8213EDBC;
		  /* 8213EDBCh */ case    1:  		/* li R28, 4 */
		/* 8213EDBCh case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 8213EDBCh case    1:*/		return 0x8213EDC0;
	}
	return 0x8213EDC0;
} // Block from 8213EDB8h-8213EDC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213EDC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EDC0);
		  /* 8213EDC0h */ case    0:  		/* li R10, -1 */
		/* 8213EDC0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8213EDC0h case    0:*/		return 0x8213EDC4;
		  /* 8213EDC4h */ case    1:  		/* subfze R30, R10 */
		/* 8213EDC4h case    1:*/		cpu::op::subfze<0>(regs,&regs.R30,regs.R10);
		/* 8213EDC4h case    1:*/		return 0x8213EDC8;
		  /* 8213EDC8h */ case    2:  		/* b 124 */
		/* 8213EDC8h case    2:*/		return 0x8213EE44;
		/* 8213EDC8h case    2:*/		return 0x8213EDCC;
	}
	return 0x8213EDCC;
} // Block from 8213EDC0h-8213EDCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213EDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EDCC);
		  /* 8213EDCCh */ case    0:  		/* lis R11, -32253 */
		/* 8213EDCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EDCCh case    0:*/		return 0x8213EDD0;
		  /* 8213EDD0h */ case    1:  		/* addi R3, R1, 80 */
		/* 8213EDD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213EDD0h case    1:*/		return 0x8213EDD4;
		  /* 8213EDD4h */ case    2:  		/* addi R4, R11, 23808 */
		/* 8213EDD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5D00);
		/* 8213EDD4h case    2:*/		return 0x8213EDD8;
		  /* 8213EDD8h */ case    3:  		/* bl -702888 */
		/* 8213EDD8h case    3:*/		regs.LR = 0x8213EDDC; return 0x82093430;
		/* 8213EDD8h case    3:*/		return 0x8213EDDC;
		  /* 8213EDDCh */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213EDDCh case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EDDCh case    4:*/		return 0x8213EDE0;
		  /* 8213EDE0h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8213EDE0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8213EE04;  }
		/* 8213EDE0h case    5:*/		return 0x8213EDE4;
		  /* 8213EDE4h */ case    6:  		/* li R10, -1 */
		/* 8213EDE4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8213EDE4h case    6:*/		return 0x8213EDE8;
		  /* 8213EDE8h */ case    7:  		/* subfc R11, R29, R31 */
		/* 8213EDE8h case    7:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 8213EDE8h case    7:*/		return 0x8213EDEC;
		  /* 8213EDECh */ case    8:  		/* mr R28, R29 */
		/* 8213EDECh case    8:*/		regs.R28 = regs.R29;
		/* 8213EDECh case    8:*/		return 0x8213EDF0;
		  /* 8213EDF0h */ case    9:  		/* subfze. R30, R10 */
		/* 8213EDF0h case    9:*/		cpu::op::subfze<1>(regs,&regs.R30,regs.R10);
		/* 8213EDF0h case    9:*/		return 0x8213EDF4;
		  /* 8213EDF4h */ case   10:  		/* mr R24, R29 */
		/* 8213EDF4h case   10:*/		regs.R24 = regs.R29;
		/* 8213EDF4h case   10:*/		return 0x8213EDF8;
		  /* 8213EDF8h */ case   11:  		/* bc 4, CR0_EQ, 76 */
		/* 8213EDF8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8213EE44;  }
		/* 8213EDF8h case   11:*/		return 0x8213EDFC;
		  /* 8213EDFCh */ case   12:  		/* mr R31, R20 */
		/* 8213EDFCh case   12:*/		regs.R31 = regs.R20;
		/* 8213EDFCh case   12:*/		return 0x8213EE00;
		  /* 8213EE00h */ case   13:  		/* b 68 */
		/* 8213EE00h case   13:*/		return 0x8213EE44;
		/* 8213EE00h case   13:*/		return 0x8213EE04;
	}
	return 0x8213EE04;
} // Block from 8213EDCCh-8213EE04h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213EE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EE04);
		  /* 8213EE04h */ case    0:  		/* lis R11, -32253 */
		/* 8213EE04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EE04h case    0:*/		return 0x8213EE08;
		  /* 8213EE08h */ case    1:  		/* addi R3, R1, 80 */
		/* 8213EE08h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213EE08h case    1:*/		return 0x8213EE0C;
		  /* 8213EE0Ch */ case    2:  		/* addi R4, R11, 23796 */
		/* 8213EE0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5CF4);
		/* 8213EE0Ch case    2:*/		return 0x8213EE10;
		  /* 8213EE10h */ case    3:  		/* bl -702944 */
		/* 8213EE10h case    3:*/		regs.LR = 0x8213EE14; return 0x82093430;
		/* 8213EE10h case    3:*/		return 0x8213EE14;
		  /* 8213EE14h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213EE14h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EE14h case    4:*/		return 0x8213EE18;
		  /* 8213EE18h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8213EE18h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8213EE3C;  }
		/* 8213EE18h case    5:*/		return 0x8213EE1C;
		  /* 8213EE1Ch */ case    6:  		/* li R10, -1 */
		/* 8213EE1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8213EE1Ch case    6:*/		return 0x8213EE20;
		  /* 8213EE20h */ case    7:  		/* subfc R11, R29, R31 */
		/* 8213EE20h case    7:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 8213EE20h case    7:*/		return 0x8213EE24;
		  /* 8213EE24h */ case    8:  		/* mr R28, R29 */
		/* 8213EE24h case    8:*/		regs.R28 = regs.R29;
		/* 8213EE24h case    8:*/		return 0x8213EE28;
		  /* 8213EE28h */ case    9:  		/* subfze. R30, R10 */
		/* 8213EE28h case    9:*/		cpu::op::subfze<1>(regs,&regs.R30,regs.R10);
		/* 8213EE28h case    9:*/		return 0x8213EE2C;
		  /* 8213EE2Ch */ case   10:  		/* mr R24, R29 */
		/* 8213EE2Ch case   10:*/		regs.R24 = regs.R29;
		/* 8213EE2Ch case   10:*/		return 0x8213EE30;
		  /* 8213EE30h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 8213EE30h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8213EE44;  }
		/* 8213EE30h case   11:*/		return 0x8213EE34;
		  /* 8213EE34h */ case   12:  		/* mr R31, R29 */
		/* 8213EE34h case   12:*/		regs.R31 = regs.R29;
		/* 8213EE34h case   12:*/		return 0x8213EE38;
		  /* 8213EE38h */ case   13:  		/* b 12 */
		/* 8213EE38h case   13:*/		return 0x8213EE44;
		/* 8213EE38h case   13:*/		return 0x8213EE3C;
	}
	return 0x8213EE3C;
} // Block from 8213EE04h-8213EE3Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213EE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EE3C);
		  /* 8213EE3Ch */ case    0:  		/* mr R28, R20 */
		/* 8213EE3Ch case    0:*/		regs.R28 = regs.R20;
		/* 8213EE3Ch case    0:*/		return 0x8213EE40;
		  /* 8213EE40h */ case    1:  		/* mr R30, R29 */
		/* 8213EE40h case    1:*/		regs.R30 = regs.R29;
		/* 8213EE40h case    1:*/		return 0x8213EE44;
	}
	return 0x8213EE44;
} // Block from 8213EE3Ch-8213EE44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213EE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EE44);
		  /* 8213EE44h */ case    0:  		/* cmpwi CR6, R21, 0 */
		/* 8213EE44h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213EE44h case    0:*/		return 0x8213EE48;
		  /* 8213EE48h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8213EE48h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EE58;  }
		/* 8213EE48h case    1:*/		return 0x8213EE4C;
		  /* 8213EE4Ch */ case    2:  		/* lwz R11, <#[R26 + 16]> */
		/* 8213EE4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 8213EE4Ch case    2:*/		return 0x8213EE50;
		  /* 8213EE50h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213EE50h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EE50h case    3:*/		return 0x8213EE54;
		  /* 8213EE54h */ case    4:  		/* bc 4, CR6_EQ, 108 */
		/* 8213EE54h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213EEC0;  }
		/* 8213EE54h case    4:*/		return 0x8213EE58;
	}
	return 0x8213EE58;
} // Block from 8213EE44h-8213EE58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213EE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EE58);
		  /* 8213EE58h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8213EE58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213EE58h case    0:*/		return 0x8213EE5C;
		  /* 8213EE5Ch */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8213EE5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EE84;  }
		/* 8213EE5Ch case    1:*/		return 0x8213EE60;
		  /* 8213EE60h */ case    2:  		/* lis R11, -32253 */
		/* 8213EE60h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EE60h case    2:*/		return 0x8213EE64;
		  /* 8213EE64h */ case    3:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213EE64h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213EE64h case    3:*/		return 0x8213EE68;
		  /* 8213EE68h */ case    4:  		/* mr R8, R23 */
		/* 8213EE68h case    4:*/		regs.R8 = regs.R23;
		/* 8213EE68h case    4:*/		return 0x8213EE6C;
		  /* 8213EE6Ch */ case    5:  		/* addi R6, R11, 23768 */
		/* 8213EE6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5CD8);
		/* 8213EE6Ch case    5:*/		return 0x8213EE70;
		  /* 8213EE70h */ case    6:  		/* mr R7, R25 */
		/* 8213EE70h case    6:*/		regs.R7 = regs.R25;
		/* 8213EE70h case    6:*/		return 0x8213EE74;
		  /* 8213EE74h */ case    7:  		/* li R5, 4502 */
		/* 8213EE74h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 8213EE74h case    7:*/		return 0x8213EE78;
		  /* 8213EE78h */ case    8:  		/* mr R3, R27 */
		/* 8213EE78h case    8:*/		regs.R3 = regs.R27;
		/* 8213EE78h case    8:*/		return 0x8213EE7C;
		  /* 8213EE7Ch */ case    9:  		/* bl -198476 */
		/* 8213EE7Ch case    9:*/		regs.LR = 0x8213EE80; return 0x8210E730;
		/* 8213EE7Ch case    9:*/		return 0x8213EE80;
		  /* 8213EE80h */ case   10:  		/* b 64 */
		/* 8213EE80h case   10:*/		return 0x8213EEC0;
		/* 8213EE80h case   10:*/		return 0x8213EE84;
	}
	return 0x8213EE84;
} // Block from 8213EE58h-8213EE84h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213EE84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EE84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EE84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EE84);
		  /* 8213EE84h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 8213EE84h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8213EE84h case    0:*/		return 0x8213EE88;
		  /* 8213EE88h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8213EE88h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EEC0;  }
		/* 8213EE88h case    1:*/		return 0x8213EE8C;
		  /* 8213EE8Ch */ case    2:  		/* lis R11, -32217 */
		/* 8213EE8Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8213EE8Ch case    2:*/		return 0x8213EE90;
		  /* 8213EE90h */ case    3:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213EE90h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213EE90h case    3:*/		return 0x8213EE94;
		  /* 8213EE94h */ case    4:  		/* lis R8, -32253 */
		/* 8213EE94h case    4:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8213EE94h case    4:*/		return 0x8213EE98;
		  /* 8213EE98h */ case    5:  		/* addi R11, R11, 15752 */
		/* 8213EE98h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3D88);
		/* 8213EE98h case    5:*/		return 0x8213EE9C;
		  /* 8213EE9Ch */ case    6:  		/* rlwinm R9, R28, 2, 0, 29 */
		/* 8213EE9Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R28);
		/* 8213EE9Ch case    6:*/		return 0x8213EEA0;
		  /* 8213EEA0h */ case    7:  		/* addi R6, R8, 23708 */
		/* 8213EEA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x5C9C);
		/* 8213EEA0h case    7:*/		return 0x8213EEA4;
		  /* 8213EEA4h */ case    8:  		/* mr R10, R31 */
		/* 8213EEA4h case    8:*/		regs.R10 = regs.R31;
		/* 8213EEA4h case    8:*/		return 0x8213EEA8;
		  /* 8213EEA8h */ case    9:  		/* mr R8, R23 */
		/* 8213EEA8h case    9:*/		regs.R8 = regs.R23;
		/* 8213EEA8h case    9:*/		return 0x8213EEAC;
		  /* 8213EEACh */ case   10:  		/* mr R7, R25 */
		/* 8213EEACh case   10:*/		regs.R7 = regs.R25;
		/* 8213EEACh case   10:*/		return 0x8213EEB0;
		  /* 8213EEB0h */ case   11:  		/* li R5, 4705 */
		/* 8213EEB0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1261);
		/* 8213EEB0h case   11:*/		return 0x8213EEB4;
		  /* 8213EEB4h */ case   12:  		/* lwzx R9, <#[R9 + R11]> */
		/* 8213EEB4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8213EEB4h case   12:*/		return 0x8213EEB8;
		  /* 8213EEB8h */ case   13:  		/* mr R3, R27 */
		/* 8213EEB8h case   13:*/		regs.R3 = regs.R27;
		/* 8213EEB8h case   13:*/		return 0x8213EEBC;
		  /* 8213EEBCh */ case   14:  		/* bl -198348 */
		/* 8213EEBCh case   14:*/		regs.LR = 0x8213EEC0; return 0x8210E7F0;
		/* 8213EEBCh case   14:*/		return 0x8213EEC0;
	}
	return 0x8213EEC0;
} // Block from 8213EE84h-8213EEC0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8213EEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EEC0);
		  /* 8213EEC0h */ case    0:  		/* cmplwi CR6, R28, 4 */
		/* 8213EEC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 8213EEC0h case    0:*/		return 0x8213EEC4;
		  /* 8213EEC4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8213EEC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EED0;  }
		/* 8213EEC4h case    1:*/		return 0x8213EEC8;
		  /* 8213EEC8h */ case    2:  		/* cmpwi CR6, R30, 0 */
		/* 8213EEC8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213EEC8h case    2:*/		return 0x8213EECC;
		  /* 8213EECCh */ case    3:  		/* bc 12, CR6_EQ, 272 */
		/* 8213EECCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8213EFDC;  }
		/* 8213EECCh case    3:*/		return 0x8213EED0;
	}
	return 0x8213EED0;
} // Block from 8213EEC0h-8213EED0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213EED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EED0);
		  /* 8213EED0h */ case    0:  		/* lwz R11, <#[R27 + 1100]> */
		/* 8213EED0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000044C) );
		/* 8213EED0h case    0:*/		return 0x8213EED4;
		  /* 8213EED4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8213EED4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213EED4h case    1:*/		return 0x8213EED8;
		  /* 8213EED8h */ case    2:  		/* bc 4, CR6_EQ, 260 */
		/* 8213EED8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213EFDC;  }
		/* 8213EED8h case    2:*/		return 0x8213EEDC;
		  /* 8213EEDCh */ case    3:  		/* cmpwi CR6, R21, 0 */
		/* 8213EEDCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213EEDCh case    3:*/		return 0x8213EEE0;
		  /* 8213EEE0h */ case    4:  		/* bc 4, CR6_EQ, 252 */
		/* 8213EEE0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213EFDC;  }
		/* 8213EEE0h case    4:*/		return 0x8213EEE4;
		  /* 8213EEE4h */ case    5:  		/* lis R11, -32253 */
		/* 8213EEE4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EEE4h case    5:*/		return 0x8213EEE8;
		  /* 8213EEE8h */ case    6:  		/* mr R8, R23 */
		/* 8213EEE8h case    6:*/		regs.R8 = regs.R23;
		/* 8213EEE8h case    6:*/		return 0x8213EEEC;
		  /* 8213EEECh */ case    7:  		/* addi R6, R11, 23668 */
		/* 8213EEECh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5C74);
		/* 8213EEECh case    7:*/		return 0x8213EEF0;
		  /* 8213EEF0h */ case    8:  		/* mr R7, R25 */
		/* 8213EEF0h case    8:*/		regs.R7 = regs.R25;
		/* 8213EEF0h case    8:*/		return 0x8213EEF4;
	}
	return 0x8213EEF4;
} // Block from 8213EED0h-8213EEF4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213EEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EEF4);
		  /* 8213EEF4h */ case    0:  		/* stw R29, <#[R27 + 1100]> */
		/* 8213EEF4h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x0000044C) );
		/* 8213EEF4h case    0:*/		return 0x8213EEF8;
		  /* 8213EEF8h */ case    1:  		/* mr R3, R27 */
		/* 8213EEF8h case    1:*/		regs.R3 = regs.R27;
		/* 8213EEF8h case    1:*/		return 0x8213EEFC;
		  /* 8213EEFCh */ case    2:  		/* li R5, 4502 */
		/* 8213EEFCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 8213EEFCh case    2:*/		return 0x8213EF00;
		  /* 8213EF00h */ case    3:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213EF00h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213EF00h case    3:*/		return 0x8213EF04;
		  /* 8213EF04h */ case    4:  		/* bl -198612 */
		/* 8213EF04h case    4:*/		regs.LR = 0x8213EF08; return 0x8210E730;
		/* 8213EF04h case    4:*/		return 0x8213EF08;
		  /* 8213EF08h */ case    5:  		/* mr R30, R29 */
		/* 8213EF08h case    5:*/		regs.R30 = regs.R29;
		/* 8213EF08h case    5:*/		return 0x8213EF0C;
		  /* 8213EF0Ch */ case    6:  		/* b 208 */
		/* 8213EF0Ch case    6:*/		return 0x8213EFDC;
		/* 8213EF0Ch case    6:*/		return 0x8213EF10;
	}
	return 0x8213EF10;
} // Block from 8213EEF4h-8213EF10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF10);
		  /* 8213EF10h */ case    0:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8213EF10h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8213EF10h case    0:*/		return 0x8213EF14;
		  /* 8213EF14h */ case    1:  		/* bc 12, CR0_EQ, 456 */
		/* 8213EF14h case    1:*/		if ( regs.CR[0].eq ) { return 0x8213F0DC;  }
		/* 8213EF14h case    1:*/		return 0x8213EF18;
		  /* 8213EF18h */ case    2:  		/* lis R11, -32255 */
		/* 8213EF18h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213EF18h case    2:*/		return 0x8213EF1C;
		  /* 8213EF1Ch */ case    3:  		/* addi R3, R1, 80 */
		/* 8213EF1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213EF1Ch case    3:*/		return 0x8213EF20;
		  /* 8213EF20h */ case    4:  		/* addi R4, R11, 5080 */
		/* 8213EF20h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x13D8);
		/* 8213EF20h case    4:*/		return 0x8213EF24;
		  /* 8213EF24h */ case    5:  		/* bl -703220 */
		/* 8213EF24h case    5:*/		regs.LR = 0x8213EF28; return 0x82093430;
		/* 8213EF24h case    5:*/		return 0x8213EF28;
		  /* 8213EF28h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8213EF28h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EF28h case    6:*/		return 0x8213EF2C;
		  /* 8213EF2Ch */ case    7:  		/* bc 4, CR0_EQ, 28 */
		/* 8213EF2Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8213EF48;  }
		/* 8213EF2Ch case    7:*/		return 0x8213EF30;
		  /* 8213EF30h */ case    8:  		/* lwz R11, <#[R27 + 72]> */
		/* 8213EF30h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 8213EF30h case    8:*/		return 0x8213EF34;
		  /* 8213EF34h */ case    9:  		/* li R10, -1 */
		/* 8213EF34h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8213EF34h case    9:*/		return 0x8213EF38;
		  /* 8213EF38h */ case   10:  		/* mr R28, R29 */
		/* 8213EF38h case   10:*/		regs.R28 = regs.R29;
		/* 8213EF38h case   10:*/		return 0x8213EF3C;
		  /* 8213EF3Ch */ case   11:  		/* subfc R11, R11, R31 */
		/* 8213EF3Ch case   11:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8213EF3Ch case   11:*/		return 0x8213EF40;
		  /* 8213EF40h */ case   12:  		/* subfze R30, R10 */
		/* 8213EF40h case   12:*/		cpu::op::subfze<0>(regs,&regs.R30,regs.R10);
		/* 8213EF40h case   12:*/		return 0x8213EF44;
		  /* 8213EF44h */ case   13:  		/* b 44 */
		/* 8213EF44h case   13:*/		return 0x8213EF70;
		/* 8213EF44h case   13:*/		return 0x8213EF48;
	}
	return 0x8213EF48;
} // Block from 8213EF10h-8213EF48h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF48);
		  /* 8213EF48h */ case    0:  		/* lis R11, -32255 */
		/* 8213EF48h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8213EF48h case    0:*/		return 0x8213EF4C;
		  /* 8213EF4Ch */ case    1:  		/* addi R3, R1, 80 */
		/* 8213EF4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8213EF4Ch case    1:*/		return 0x8213EF50;
		  /* 8213EF50h */ case    2:  		/* addi R4, R11, 5156 */
		/* 8213EF50h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1424);
		/* 8213EF50h case    2:*/		return 0x8213EF54;
		  /* 8213EF54h */ case    3:  		/* bl -703268 */
		/* 8213EF54h case    3:*/		regs.LR = 0x8213EF58; return 0x82093430;
		/* 8213EF54h case    3:*/		return 0x8213EF58;
		  /* 8213EF58h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8213EF58h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213EF58h case    4:*/		return 0x8213EF5C;
		  /* 8213EF5Ch */ case    5:  		/* mr R30, R29 */
		/* 8213EF5Ch case    5:*/		regs.R30 = regs.R29;
		/* 8213EF5Ch case    5:*/		return 0x8213EF60;
		  /* 8213EF60h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 8213EF60h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8213EF6C;  }
		/* 8213EF60h case    6:*/		return 0x8213EF64;
		  /* 8213EF64h */ case    7:  		/* li R28, 4 */
		/* 8213EF64h case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 8213EF64h case    7:*/		return 0x8213EF68;
		  /* 8213EF68h */ case    8:  		/* b 16 */
		/* 8213EF68h case    8:*/		return 0x8213EF78;
		/* 8213EF68h case    8:*/		return 0x8213EF6C;
	}
	return 0x8213EF6C;
} // Block from 8213EF48h-8213EF6Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF6C);
		  /* 8213EF6Ch */ case    0:  		/* mr R28, R20 */
		/* 8213EF6Ch case    0:*/		regs.R28 = regs.R20;
		/* 8213EF6Ch case    0:*/		return 0x8213EF70;
	}
	return 0x8213EF70;
} // Block from 8213EF6Ch-8213EF70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF70);
		  /* 8213EF70h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8213EF70h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8213EF70h case    0:*/		return 0x8213EF74;
		  /* 8213EF74h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8213EF74h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EFAC;  }
		/* 8213EF74h case    1:*/		return 0x8213EF78;
	}
	return 0x8213EF78;
} // Block from 8213EF70h-8213EF78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF78);
		  /* 8213EF78h */ case    0:  		/* cmpwi CR6, R21, 0 */
		/* 8213EF78h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213EF78h case    0:*/		return 0x8213EF7C;
		  /* 8213EF7Ch */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8213EF7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8213EF8C;  }
		/* 8213EF7Ch case    1:*/		return 0x8213EF80;
		  /* 8213EF80h */ case    2:  		/* lwz R11, <#[R26 + 16]> */
		/* 8213EF80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 8213EF80h case    2:*/		return 0x8213EF84;
		  /* 8213EF84h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213EF84h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213EF84h case    3:*/		return 0x8213EF88;
		  /* 8213EF88h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 8213EF88h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213EFAC;  }
		/* 8213EF88h case    4:*/		return 0x8213EF8C;
	}
	return 0x8213EF8C;
} // Block from 8213EF78h-8213EF8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213EF8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EF8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EF8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EF8C);
		  /* 8213EF8Ch */ case    0:  		/* lis R11, -32253 */
		/* 8213EF8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EF8Ch case    0:*/		return 0x8213EF90;
		  /* 8213EF90h */ case    1:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213EF90h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213EF90h case    1:*/		return 0x8213EF94;
		  /* 8213EF94h */ case    2:  		/* mr R8, R23 */
		/* 8213EF94h case    2:*/		regs.R8 = regs.R23;
		/* 8213EF94h case    2:*/		return 0x8213EF98;
		  /* 8213EF98h */ case    3:  		/* addi R6, R11, 23768 */
		/* 8213EF98h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5CD8);
		/* 8213EF98h case    3:*/		return 0x8213EF9C;
		  /* 8213EF9Ch */ case    4:  		/* mr R7, R25 */
		/* 8213EF9Ch case    4:*/		regs.R7 = regs.R25;
		/* 8213EF9Ch case    4:*/		return 0x8213EFA0;
		  /* 8213EFA0h */ case    5:  		/* li R5, 4502 */
		/* 8213EFA0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 8213EFA0h case    5:*/		return 0x8213EFA4;
		  /* 8213EFA4h */ case    6:  		/* mr R3, R27 */
		/* 8213EFA4h case    6:*/		regs.R3 = regs.R27;
		/* 8213EFA4h case    6:*/		return 0x8213EFA8;
		  /* 8213EFA8h */ case    7:  		/* bl -198776 */
		/* 8213EFA8h case    7:*/		regs.LR = 0x8213EFAC; return 0x8210E730;
		/* 8213EFA8h case    7:*/		return 0x8213EFAC;
	}
	return 0x8213EFAC;
} // Block from 8213EF8Ch-8213EFACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213EFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EFAC);
		  /* 8213EFACh */ case    0:  		/* cmplwi CR6, R28, 4 */
		/* 8213EFACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 8213EFACh case    0:*/		return 0x8213EFB0;
		  /* 8213EFB0h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8213EFB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213EFDC;  }
		/* 8213EFB0h case    1:*/		return 0x8213EFB4;
		  /* 8213EFB4h */ case    2:  		/* cmpwi CR6, R21, 0 */
		/* 8213EFB4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213EFB4h case    2:*/		return 0x8213EFB8;
		  /* 8213EFB8h */ case    3:  		/* bc 4, CR6_EQ, 296 */
		/* 8213EFB8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213EFB8h case    3:*/		return 0x8213EFBC;
		  /* 8213EFBCh */ case    4:  		/* lis R11, -32253 */
		/* 8213EFBCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213EFBCh case    4:*/		return 0x8213EFC0;
		  /* 8213EFC0h */ case    5:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213EFC0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213EFC0h case    5:*/		return 0x8213EFC4;
		  /* 8213EFC4h */ case    6:  		/* mr R8, R23 */
		/* 8213EFC4h case    6:*/		regs.R8 = regs.R23;
		/* 8213EFC4h case    6:*/		return 0x8213EFC8;
		  /* 8213EFC8h */ case    7:  		/* addi R6, R11, 23620 */
		/* 8213EFC8h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5C44);
		/* 8213EFC8h case    7:*/		return 0x8213EFCC;
		  /* 8213EFCCh */ case    8:  		/* mr R7, R25 */
		/* 8213EFCCh case    8:*/		regs.R7 = regs.R25;
		/* 8213EFCCh case    8:*/		return 0x8213EFD0;
		  /* 8213EFD0h */ case    9:  		/* li R5, 4502 */
		/* 8213EFD0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 8213EFD0h case    9:*/		return 0x8213EFD4;
		  /* 8213EFD4h */ case   10:  		/* mr R3, R27 */
		/* 8213EFD4h case   10:*/		regs.R3 = regs.R27;
		/* 8213EFD4h case   10:*/		return 0x8213EFD8;
		  /* 8213EFD8h */ case   11:  		/* bl -198824 */
		/* 8213EFD8h case   11:*/		regs.LR = 0x8213EFDC; return 0x8210E730;
		/* 8213EFD8h case   11:*/		return 0x8213EFDC;
	}
	return 0x8213EFDC;
} // Block from 8213EFACh-8213EFDCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213EFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213EFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213EFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213EFDC);
		  /* 8213EFDCh */ case    0:  		/* cmplwi CR6, R28, 3 */
		/* 8213EFDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000003);
		/* 8213EFDCh case    0:*/		return 0x8213EFE0;
		  /* 8213EFE0h */ case    1:  		/* bc 4, CR6_EQ, 200 */
		/* 8213EFE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F0A8;  }
		/* 8213EFE0h case    1:*/		return 0x8213EFE4;
		  /* 8213EFE4h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8213EFE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8213EFE4h case    2:*/		return 0x8213EFE8;
		  /* 8213EFE8h */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 8213EFE8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213F068;  }
		/* 8213EFE8h case    3:*/		return 0x8213EFEC;
		  /* 8213EFECh */ case    4:  		/* cmplwi CR6, R31, 4 */
		/* 8213EFECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8213EFECh case    4:*/		return 0x8213EFF0;
		  /* 8213EFF0h */ case    5:  		/* bc 4, CR6_LT, 120 */
		/* 8213EFF0h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8213F068;  }
		/* 8213EFF0h case    5:*/		return 0x8213EFF4;
		  /* 8213EFF4h */ case    6:  		/* lwz R11, <#[R26 + 16]> */
		/* 8213EFF4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 8213EFF4h case    6:*/		return 0x8213EFF8;
		  /* 8213EFF8h */ case    7:  		/* cmplwi CR6, R11, 3 */
		/* 8213EFF8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8213EFF8h case    7:*/		return 0x8213EFFC;
		  /* 8213EFFCh */ case    8:  		/* bc 4, CR6_EQ, 108 */
		/* 8213EFFCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x8213F068;  }
		/* 8213EFFCh case    8:*/		return 0x8213F000;
		  /* 8213F000h */ case    9:  		/* lhz R11, <#[R27 + 202]> */
		/* 8213F000h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000CA) );
		/* 8213F000h case    9:*/		return 0x8213F004;
		  /* 8213F004h */ case   10:  		/* cmplwi CR6, R11, 260 */
		/* 8213F004h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8213F004h case   10:*/		return 0x8213F008;
		  /* 8213F008h */ case   11:  		/* bc 4, CR6_LT, 96 */
		/* 8213F008h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8213F068;  }
		/* 8213F008h case   11:*/		return 0x8213F00C;
		  /* 8213F00Ch */ case   12:  		/* lwz R11, <#[R27 + 1088]> */
		/* 8213F00Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000440) );
		/* 8213F00Ch case   12:*/		return 0x8213F010;
		  /* 8213F010h */ case   13:  		/* cmpwi CR6, R11, -1 */
		/* 8213F010h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213F010h case   13:*/		return 0x8213F014;
		  /* 8213F014h */ case   14:  		/* bc 4, CR6_EQ, 36 */
		/* 8213F014h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8213F038;  }
		/* 8213F014h case   14:*/		return 0x8213F018;
		  /* 8213F018h */ case   15:  		/* lis R11, -32253 */
		/* 8213F018h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213F018h case   15:*/		return 0x8213F01C;
		  /* 8213F01Ch */ case   16:  		/* li R7, 4 */
		/* 8213F01Ch case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 8213F01Ch case   16:*/		return 0x8213F020;
		  /* 8213F020h */ case   17:  		/* addi R4, R11, 23612 */
		/* 8213F020h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5C3C);
		/* 8213F020h case   17:*/		return 0x8213F024;
		  /* 8213F024h */ case   18:  		/* mr R6, R22 */
		/* 8213F024h case   18:*/		regs.R6 = regs.R22;
		/* 8213F024h case   18:*/		return 0x8213F028;
		  /* 8213F028h */ case   19:  		/* li R5, 81 */
		/* 8213F028h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x51);
		/* 8213F028h case   19:*/		return 0x8213F02C;
		  /* 8213F02Ch */ case   20:  		/* mr R3, R27 */
		/* 8213F02Ch case   20:*/		regs.R3 = regs.R27;
		/* 8213F02Ch case   20:*/		return 0x8213F030;
		  /* 8213F030h */ case   21:  		/* bl -269992 */
		/* 8213F030h case   21:*/		regs.LR = 0x8213F034; return 0x820FD188;
		/* 8213F030h case   21:*/		return 0x8213F034;
		  /* 8213F034h */ case   22:  		/* stw R3, <#[R27 + 1088]> */
		/* 8213F034h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000440) );
		/* 8213F034h case   22:*/		return 0x8213F038;
	}
	return 0x8213F038;
} // Block from 8213EFDCh-8213F038h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8213F038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F038);
		  /* 8213F038h */ case    0:  		/* lwz R11, <#[R27 + 1088]> */
		/* 8213F038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000440) );
		/* 8213F038h case    0:*/		return 0x8213F03C;
		  /* 8213F03Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8213F03Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8213F03Ch case    1:*/		return 0x8213F040;
		  /* 8213F040h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8213F040h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8213F050;  }
		/* 8213F040h case    2:*/		return 0x8213F044;
		  /* 8213F044h */ case    3:  		/* lis R3, -32761 */
		/* 8213F044h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8213F044h case    3:*/		return 0x8213F048;
		  /* 8213F048h */ case    4:  		/* ori R3, R3, 14 */
		/* 8213F048h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8213F048h case    4:*/		return 0x8213F04C;
		  /* 8213F04Ch */ case    5:  		/* b 188 */
		/* 8213F04Ch case    5:*/		return 0x8213F108;
		/* 8213F04Ch case    5:*/		return 0x8213F050;
	}
	return 0x8213F050;
} // Block from 8213F038h-8213F050h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213F050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F050);
		  /* 8213F050h */ case    0:  		/* addi R10, R31, -1 */
		/* 8213F050h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFFF);
		/* 8213F050h case    0:*/		return 0x8213F054;
		  /* 8213F054h */ case    1:  		/* stw R11, <#[R26 + 4]> */
		/* 8213F054h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8213F054h case    1:*/		return 0x8213F058;
		  /* 8213F058h */ case    2:  		/* li R28, 5 */
		/* 8213F058h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x5);
		/* 8213F058h case    2:*/		return 0x8213F05C;
		  /* 8213F05Ch */ case    3:  		/* stw R20, <#[R26 + 12]> */
		/* 8213F05Ch case    3:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R26 + 0x0000000C) );
		/* 8213F05Ch case    3:*/		return 0x8213F060;
		  /* 8213F060h */ case    4:  		/* stw R10, <#[R26 + 16]> */
		/* 8213F060h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000010) );
		/* 8213F060h case    4:*/		return 0x8213F064;
		  /* 8213F064h */ case    5:  		/* b 124 */
		/* 8213F064h case    5:*/		return 0x8213F0E0;
		/* 8213F064h case    5:*/		return 0x8213F068;
	}
	return 0x8213F068;
} // Block from 8213F050h-8213F068h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213F068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F068);
		  /* 8213F068h */ case    0:  		/* lwz R7, <#[R27 + 60]> */
		/* 8213F068h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x0000003C) );
		/* 8213F068h case    0:*/		return 0x8213F06C;
		  /* 8213F06Ch */ case    1:  		/* cmplw CR6, R31, R7 */
		/* 8213F06Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R7);
		/* 8213F06Ch case    1:*/		return 0x8213F070;
		  /* 8213F070h */ case    2:  		/* bc 12, CR6_LT, 112 */
		/* 8213F070h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213F0E0;  }
		/* 8213F070h case    2:*/		return 0x8213F074;
		  /* 8213F074h */ case    3:  		/* cmpwi CR6, R21, 0 */
		/* 8213F074h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 8213F074h case    3:*/		return 0x8213F078;
		  /* 8213F078h */ case    4:  		/* bc 4, CR6_EQ, 104 */
		/* 8213F078h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213F078h case    4:*/		return 0x8213F07C;
		  /* 8213F07Ch */ case    5:  		/* lwz R11, <#[R27 + 1100]> */
		/* 8213F07Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000044C) );
		/* 8213F07Ch case    5:*/		return 0x8213F080;
		  /* 8213F080h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8213F080h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213F080h case    6:*/		return 0x8213F084;
		  /* 8213F084h */ case    7:  		/* bc 4, CR6_EQ, 92 */
		/* 8213F084h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213F084h case    7:*/		return 0x8213F088;
		  /* 8213F088h */ case    8:  		/* stw R29, <#[R27 + 1100]> */
		/* 8213F088h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x0000044C) );
		/* 8213F088h case    8:*/		return 0x8213F08C;
		  /* 8213F08Ch */ case    9:  		/* lis R11, -32253 */
		/* 8213F08Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213F08Ch case    9:*/		return 0x8213F090;
		  /* 8213F090h */ case   10:  		/* li R5, 4502 */
		/* 8213F090h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 8213F090h case   10:*/		return 0x8213F094;
		  /* 8213F094h */ case   11:  		/* lwz R4, <#[R26 + 104]> */
		/* 8213F094h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000068) );
		/* 8213F094h case   11:*/		return 0x8213F098;
		  /* 8213F098h */ case   12:  		/* addi R6, R11, 23536 */
		/* 8213F098h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5BF0);
		/* 8213F098h case   12:*/		return 0x8213F09C;
		  /* 8213F09Ch */ case   13:  		/* mr R3, R27 */
		/* 8213F09Ch case   13:*/		regs.R3 = regs.R27;
		/* 8213F09Ch case   13:*/		return 0x8213F0A0;
		  /* 8213F0A0h */ case   14:  		/* bl -199024 */
		/* 8213F0A0h case   14:*/		regs.LR = 0x8213F0A4; return 0x8210E730;
		/* 8213F0A0h case   14:*/		return 0x8213F0A4;
		  /* 8213F0A4h */ case   15:  		/* mr R30, R29 */
		/* 8213F0A4h case   15:*/		regs.R30 = regs.R29;
		/* 8213F0A4h case   15:*/		return 0x8213F0A8;
	}
	return 0x8213F0A8;
} // Block from 8213F068h-8213F0A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213F0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F0A8);
		  /* 8213F0A8h */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 8213F0A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 8213F0A8h case    0:*/		return 0x8213F0AC;
		  /* 8213F0ACh */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 8213F0ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F0D4;  }
		/* 8213F0ACh case    1:*/		return 0x8213F0B0;
		  /* 8213F0B0h */ case    2:  		/* lis R11, -32256 */
		/* 8213F0B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8213F0B0h case    2:*/		return 0x8213F0B4;
		  /* 8213F0B4h */ case    3:  		/* lwz R10, <#[R26]> */
		/* 8213F0B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8213F0B4h case    3:*/		return 0x8213F0B8;
		  /* 8213F0B8h */ case    4:  		/* lis R9, -32256 */
		/* 8213F0B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8213F0B8h case    4:*/		return 0x8213F0BC;
		  /* 8213F0BCh */ case    5:  		/* ori R10, R10, 276 */
		/* 8213F0BCh case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x114);
		/* 8213F0BCh case    5:*/		return 0x8213F0C0;
		  /* 8213F0C0h */ case    6:  		/* stw R10, <#[R26]> */
		/* 8213F0C0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8213F0C0h case    6:*/		return 0x8213F0C4;
		  /* 8213F0C4h */ case    7:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 8213F0C4h case    7:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 8213F0C4h case    7:*/		return 0x8213F0C8;
		  /* 8213F0C8h */ case    8:  		/* lfd FR13, <#[R9 + 1848]> */
		/* 8213F0C8h case    8:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000738) );
		/* 8213F0C8h case    8:*/		return 0x8213F0CC;
		  /* 8213F0CCh */ case    9:  		/* stfd FR0, <#[R26 + 32]> */
		/* 8213F0CCh case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R26 + 0x00000020) );
		/* 8213F0CCh case    9:*/		return 0x8213F0D0;
		  /* 8213F0D0h */ case   10:  		/* stfd FR13, <#[R26 + 40]> */
		/* 8213F0D0h case   10:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R26 + 0x00000028) );
		/* 8213F0D0h case   10:*/		return 0x8213F0D4;
	}
	return 0x8213F0D4;
} // Block from 8213F0A8h-8213F0D4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213F0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F0D4);
		  /* 8213F0D4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8213F0D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8213F0D4h case    0:*/		return 0x8213F0D8;
		  /* 8213F0D8h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8213F0D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F0E0;  }
		/* 8213F0D8h case    1:*/		return 0x8213F0DC;
	}
	return 0x8213F0DC;
} // Block from 8213F0D4h-8213F0DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F0DC);
		  /* 8213F0DCh */ case    0:  		/* mr R30, R29 */
		/* 8213F0DCh case    0:*/		regs.R30 = regs.R29;
		/* 8213F0DCh case    0:*/		return 0x8213F0E0;
	}
	return 0x8213F0E0;
} // Block from 8213F0DCh-8213F0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213F0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F0E0);
		  /* 8213F0E0h */ case    0:  		/* cmplwi CR6, R31, 65535 */
		/* 8213F0E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000FFFF);
		/* 8213F0E0h case    0:*/		return 0x8213F0E4;
		  /* 8213F0E4h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8213F0E4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8213F0EC;  }
		/* 8213F0E4h case    1:*/		return 0x8213F0E8;
		  /* 8213F0E8h */ case    2:  		/* mr R30, R29 */
		/* 8213F0E8h case    2:*/		regs.R30 = regs.R29;
		/* 8213F0E8h case    2:*/		return 0x8213F0EC;
	}
	return 0x8213F0EC;
} // Block from 8213F0E0h-8213F0ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F0EC);
		  /* 8213F0ECh */ case    0:  		/* subfic R11, R30, 0 */
		/* 8213F0ECh case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R30,0x0);
		/* 8213F0ECh case    0:*/		return 0x8213F0F0;
		  /* 8213F0F0h */ case    1:  		/* lis R10, -32768 */
		/* 8213F0F0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8213F0F0h case    1:*/		return 0x8213F0F4;
		  /* 8213F0F4h */ case    2:  		/* subfe R11, R11, R11 */
		/* 8213F0F4h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8213F0F4h case    2:*/		return 0x8213F0F8;
		  /* 8213F0F8h */ case    3:  		/* ori R10, R10, 16389 */
		/* 8213F0F8h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 8213F0F8h case    3:*/		return 0x8213F0FC;
		  /* 8213F0FCh */ case    4:  		/* rlwimi R28, R31, 8, 0, 23 */
		/* 8213F0FCh case    4:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R28,regs.R31);
		/* 8213F0FCh case    4:*/		return 0x8213F100;
		  /* 8213F100h */ case    5:  		/* and R3, R11, R10 */
		/* 8213F100h case    5:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8213F100h case    5:*/		return 0x8213F104;
		  /* 8213F104h */ case    6:  		/* stw R28, <#[R26 + 108]> */
		/* 8213F104h case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R26 + 0x0000006C) );
		/* 8213F104h case    6:*/		return 0x8213F108;
	}
	return 0x8213F108;
} // Block from 8213F0ECh-8213F108h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F108);
		  /* 8213F108h */ case    0:  		/* addi R1, R1, 224 */
		/* 8213F108h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8213F108h case    0:*/		return 0x8213F10C;
		  /* 8213F10Ch */ case    1:  		/* b -712324 */
		/* 8213F10Ch case    1:*/		return 0x82091288;
		/* 8213F10Ch case    1:*/		return 0x8213F110;
	}
	return 0x8213F110;
} // Block from 8213F108h-8213F110h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F110h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F110);
		  /* 8213F110h */ case    0:  		/* mfspr R12, LR */
		/* 8213F110h case    0:*/		regs.R12 = regs.LR;
		/* 8213F110h case    0:*/		return 0x8213F114;
		  /* 8213F114h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213F114h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213F114h case    1:*/		return 0x8213F118;
		  /* 8213F118h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8213F118h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8213F118h case    2:*/		return 0x8213F11C;
		  /* 8213F11Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8213F11Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213F11Ch case    3:*/		return 0x8213F120;
		  /* 8213F120h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8213F120h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8213F120h case    4:*/		return 0x8213F124;
		  /* 8213F124h */ case    5:  		/* mr R30, R4 */
		/* 8213F124h case    5:*/		regs.R30 = regs.R4;
		/* 8213F124h case    5:*/		return 0x8213F128;
		  /* 8213F128h */ case    6:  		/* mr R4, R5 */
		/* 8213F128h case    6:*/		regs.R4 = regs.R5;
		/* 8213F128h case    6:*/		return 0x8213F12C;
		  /* 8213F12Ch */ case    7:  		/* mr R31, R3 */
		/* 8213F12Ch case    7:*/		regs.R31 = regs.R3;
		/* 8213F12Ch case    7:*/		return 0x8213F130;
		  /* 8213F130h */ case    8:  		/* bl -333088 */
		/* 8213F130h case    8:*/		regs.LR = 0x8213F134; return 0x820EDC10;
		/* 8213F130h case    8:*/		return 0x8213F134;
		  /* 8213F134h */ case    9:  		/* lis R11, -32253 */
		/* 8213F134h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213F134h case    9:*/		return 0x8213F138;
		  /* 8213F138h */ case   10:  		/* lis R10, -32217 */
		/* 8213F138h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8213F138h case   10:*/		return 0x8213F13C;
		  /* 8213F13Ch */ case   11:  		/* stw R30, <#[R31 + 348]> */
		/* 8213F13Ch case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000015C) );
		/* 8213F13Ch case   11:*/		return 0x8213F140;
		  /* 8213F140h */ case   12:  		/* lis R9, -32217 */
		/* 8213F140h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8213F140h case   12:*/		return 0x8213F144;
		  /* 8213F144h */ case   13:  		/* addi R11, R11, 23864 */
		/* 8213F144h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5D38);
		/* 8213F144h case   13:*/		return 0x8213F148;
		  /* 8213F148h */ case   14:  		/* addi R10, R10, 16008 */
		/* 8213F148h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3E88);
		/* 8213F148h case   14:*/		return 0x8213F14C;
		  /* 8213F14Ch */ case   15:  		/* addi R9, R9, 16584 */
		/* 8213F14Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x40C8);
		/* 8213F14Ch case   15:*/		return 0x8213F150;
		  /* 8213F150h */ case   16:  		/* stw R11, <#[R31]> */
		/* 8213F150h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F150h case   16:*/		return 0x8213F154;
		  /* 8213F154h */ case   17:  		/* stw R10, <#[R31 + 244]> */
		/* 8213F154h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000F4) );
		/* 8213F154h case   17:*/		return 0x8213F158;
		  /* 8213F158h */ case   18:  		/* mr R3, R31 */
		/* 8213F158h case   18:*/		regs.R3 = regs.R31;
		/* 8213F158h case   18:*/		return 0x8213F15C;
		  /* 8213F15Ch */ case   19:  		/* stw R9, <#[R31 + 248]> */
		/* 8213F15Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000000F8) );
		/* 8213F15Ch case   19:*/		return 0x8213F160;
		  /* 8213F160h */ case   20:  		/* addi R1, R1, 112 */
		/* 8213F160h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8213F160h case   20:*/		return 0x8213F164;
		  /* 8213F164h */ case   21:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213F164h case   21:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213F164h case   21:*/		return 0x8213F168;
		  /* 8213F168h */ case   22:  		/* mtspr LR, R12 */
		/* 8213F168h case   22:*/		regs.LR = regs.R12;
		/* 8213F168h case   22:*/		return 0x8213F16C;
		  /* 8213F16Ch */ case   23:  		/* ld R30, <#[R1 - 24]> */
		/* 8213F16Ch case   23:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8213F16Ch case   23:*/		return 0x8213F170;
		  /* 8213F170h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8213F170h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8213F170h case   24:*/		return 0x8213F174;
		  /* 8213F174h */ case   25:  		/* bclr 20, CR0_LT */
		/* 8213F174h case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213F174h case   25:*/		return 0x8213F178;
	}
	return 0x8213F178;
} // Block from 8213F110h-8213F178h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8213F178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F178);
		  /* 8213F178h */ case    0:  		/* mfspr R12, LR */
		/* 8213F178h case    0:*/		regs.R12 = regs.LR;
		/* 8213F178h case    0:*/		return 0x8213F17C;
		  /* 8213F17Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8213F17Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213F17Ch case    1:*/		return 0x8213F180;
		  /* 8213F180h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8213F180h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8213F180h case    2:*/		return 0x8213F184;
		  /* 8213F184h */ case    3:  		/* lwz R9, <#[R3 + 200]> */
		/* 8213F184h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x000000C8) );
		/* 8213F184h case    3:*/		return 0x8213F188;
		  /* 8213F188h */ case    4:  		/* lis R10, -2 */
		/* 8213F188h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFE);
		/* 8213F188h case    4:*/		return 0x8213F18C;
		  /* 8213F18Ch */ case    5:  		/* lwz R8, <#[R3 + 112]> */
		/* 8213F18Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000070) );
		/* 8213F18Ch case    5:*/		return 0x8213F190;
		  /* 8213F190h */ case    6:  		/* li R7, 256 */
		/* 8213F190h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x100);
		/* 8213F190h case    6:*/		return 0x8213F194;
		  /* 8213F194h */ case    7:  		/* ori R10, R10, 257 */
		/* 8213F194h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x101);
		/* 8213F194h case    7:*/		return 0x8213F198;
		  /* 8213F198h */ case    8:  		/* oris R8, R8, 256 */
		/* 8213F198h case    8:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x100);
		/* 8213F198h case    8:*/		return 0x8213F19C;
		  /* 8213F19Ch */ case    9:  		/* stw R7, <#[R3 + 56]> */
		/* 8213F19Ch case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000038) );
		/* 8213F19Ch case    9:*/		return 0x8213F1A0;
		  /* 8213F1A0h */ case   10:  		/* mr R11, R3 */
		/* 8213F1A0h case   10:*/		regs.R11 = regs.R3;
		/* 8213F1A0h case   10:*/		return 0x8213F1A4;
		  /* 8213F1A4h */ case   11:  		/* subf. R10, R10, R9 */
		/* 8213F1A4h case   11:*/		cpu::op::subf<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8213F1A4h case   11:*/		return 0x8213F1A8;
		  /* 8213F1A8h */ case   12:  		/* stw R8, <#[R3 + 112]> */
		/* 8213F1A8h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000070) );
		/* 8213F1A8h case   12:*/		return 0x8213F1AC;
		  /* 8213F1ACh */ case   13:  		/* stw R9, <#[R3 + 268]> */
		/* 8213F1ACh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x0000010C) );
		/* 8213F1ACh case   13:*/		return 0x8213F1B0;
		  /* 8213F1B0h */ case   14:  		/* bc 12, CR0_EQ, 336 */
		/* 8213F1B0h case   14:*/		if ( regs.CR[0].eq ) { return 0x8213F300;  }
		/* 8213F1B0h case   14:*/		return 0x8213F1B4;
		  /* 8213F1B4h */ case   15:  		/* cmplwi CR6, R10, 255 */
		/* 8213F1B4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x000000FF);
		/* 8213F1B4h case   15:*/		return 0x8213F1B8;
		  /* 8213F1B8h */ case   16:  		/* bc 12, CR6_EQ, 252 */
		/* 8213F1B8h case   16:*/		if ( regs.CR[6].eq ) { return 0x8213F2B4;  }
		/* 8213F1B8h case   16:*/		return 0x8213F1BC;
		  /* 8213F1BCh */ case   17:  		/* cmplwi CR6, R10, 257 */
		/* 8213F1BCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000101);
		/* 8213F1BCh case   17:*/		return 0x8213F1C0;
		  /* 8213F1C0h */ case   18:  		/* bc 12, CR6_EQ, 140 */
		/* 8213F1C0h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213F24C;  }
		/* 8213F1C0h case   18:*/		return 0x8213F1C4;
		  /* 8213F1C4h */ case   19:  		/* cmplwi CR6, R10, 510 */
		/* 8213F1C4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x000001FE);
		/* 8213F1C4h case   19:*/		return 0x8213F1C8;
		  /* 8213F1C8h */ case   20:  		/* bc 12, CR6_EQ, 36 */
		/* 8213F1C8h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213F1EC;  }
		/* 8213F1C8h case   20:*/		return 0x8213F1CC;
		  /* 8213F1CCh */ case   21:  		/* lis R10, -32253 */
		/* 8213F1CCh case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8213F1CCh case   21:*/		return 0x8213F1D0;
		  /* 8213F1D0h */ case   22:  		/* li R5, 0 */
		/* 8213F1D0h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8213F1D0h case   22:*/		return 0x8213F1D4;
		  /* 8213F1D4h */ case   23:  		/* addi R6, R10, 24240 */
		/* 8213F1D4h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5EB0);
		/* 8213F1D4h case   23:*/		return 0x8213F1D8;
		  /* 8213F1D8h */ case   24:  		/* li R4, 0 */
		/* 8213F1D8h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213F1D8h case   24:*/		return 0x8213F1DC;
		  /* 8213F1DCh */ case   25:  		/* bl -199340 */
		/* 8213F1DCh case   25:*/		regs.LR = 0x8213F1E0; return 0x8210E730;
		/* 8213F1DCh case   25:*/		return 0x8213F1E0;
		  /* 8213F1E0h */ case   26:  		/* lis R3, -32768 */
		/* 8213F1E0h case   26:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213F1E0h case   26:*/		return 0x8213F1E4;
		  /* 8213F1E4h */ case   27:  		/* ori R3, R3, 16389 */
		/* 8213F1E4h case   27:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213F1E4h case   27:*/		return 0x8213F1E8;
		  /* 8213F1E8h */ case   28:  		/* b 364 */
		/* 8213F1E8h case   28:*/		return 0x8213F354;
		/* 8213F1E8h case   28:*/		return 0x8213F1EC;
	}
	return 0x8213F1EC;
} // Block from 8213F178h-8213F1ECh (29 instructions)

//////////////////////////////////////////////////////
// Block at 8213F1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F1EC);
		  /* 8213F1ECh */ case    0:  		/* lwz R6, <#[R11 + 108]> */
		/* 8213F1ECh case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F1ECh case    0:*/		return 0x8213F1F0;
		  /* 8213F1F0h */ case    1:  		/* li R7, 2048 */
		/* 8213F1F0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x800);
		/* 8213F1F0h case    1:*/		return 0x8213F1F4;
		  /* 8213F1F4h */ case    2:  		/* li R5, 32 */
		/* 8213F1F4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8213F1F4h case    2:*/		return 0x8213F1F8;
		  /* 8213F1F8h */ case    3:  		/* oris R6, R6, 64 */
		/* 8213F1F8h case    3:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x40);
		/* 8213F1F8h case    3:*/		return 0x8213F1FC;
		  /* 8213F1FCh */ case    4:  		/* stw R7, <#[R11 + 96]> */
		/* 8213F1FCh case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000060) );
		/* 8213F1FCh case    4:*/		return 0x8213F200;
		  /* 8213F200h */ case    5:  		/* stw R5, <#[R11 + 44]> */
		/* 8213F200h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 8213F200h case    5:*/		return 0x8213F204;
		  /* 8213F204h */ case    6:  		/* li R9, 1 */
		/* 8213F204h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8213F204h case    6:*/		return 0x8213F208;
		  /* 8213F208h */ case    7:  		/* stw R7, <#[R11 + 64]> */
		/* 8213F208h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000040) );
		/* 8213F208h case    7:*/		return 0x8213F20C;
		  /* 8213F20Ch */ case    8:  		/* li R10, 16 */
		/* 8213F20Ch case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8213F20Ch case    8:*/		return 0x8213F210;
		  /* 8213F210h */ case    9:  		/* li R4, 8192 */
		/* 8213F210h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2000);
		/* 8213F210h case    9:*/		return 0x8213F214;
		  /* 8213F214h */ case   10:  		/* stw R9, <#[R11 + 48]> */
		/* 8213F214h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8213F214h case   10:*/		return 0x8213F218;
		  /* 8213F218h */ case   11:  		/* li R3, 255 */
		/* 8213F218h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0xFF);
		/* 8213F218h case   11:*/		return 0x8213F21C;
		  /* 8213F21Ch */ case   12:  		/* stw R9, <#[R11 + 100]> */
		/* 8213F21Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000064) );
		/* 8213F21Ch case   12:*/		return 0x8213F220;
		  /* 8213F220h */ case   13:  		/* ori R6, R6, 513 */
		/* 8213F220h case   13:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x201);
		/* 8213F220h case   13:*/		return 0x8213F224;
		  /* 8213F224h */ case   14:  		/* stw R4, <#[R11 + 56]> */
		/* 8213F224h case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000038) );
		/* 8213F224h case   14:*/		return 0x8213F228;
		  /* 8213F228h */ case   15:  		/* li R7, 24 */
		/* 8213F228h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x18);
		/* 8213F228h case   15:*/		return 0x8213F22C;
		  /* 8213F22Ch */ case   16:  		/* stw R3, <#[R11 + 104]> */
		/* 8213F22Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000068) );
		/* 8213F22Ch case   16:*/		return 0x8213F230;
		  /* 8213F230h */ case   17:  		/* li R5, 4 */
		/* 8213F230h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8213F230h case   17:*/		return 0x8213F234;
		  /* 8213F234h */ case   18:  		/* stw R6, <#[R11 + 108]> */
		/* 8213F234h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F234h case   18:*/		return 0x8213F238;
		  /* 8213F238h */ case   19:  		/* oris R8, R8, 4096 */
		/* 8213F238h case   19:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x1000);
		/* 8213F238h case   19:*/		return 0x8213F23C;
		  /* 8213F23Ch */ case   20:  		/* stw R10, <#[R11 + 84]> */
		/* 8213F23Ch case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 8213F23Ch case   20:*/		return 0x8213F240;
		  /* 8213F240h */ case   21:  		/* stw R7, <#[R11 + 88]> */
		/* 8213F240h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000058) );
		/* 8213F240h case   21:*/		return 0x8213F244;
		  /* 8213F244h */ case   22:  		/* stw R5, <#[R11 + 92]> */
		/* 8213F244h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x0000005C) );
		/* 8213F244h case   22:*/		return 0x8213F248;
		  /* 8213F248h */ case   23:  		/* b 220 */
		/* 8213F248h case   23:*/		return 0x8213F324;
		/* 8213F248h case   23:*/		return 0x8213F24C;
	}
	return 0x8213F24C;
} // Block from 8213F1ECh-8213F24Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213F24Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F24C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F24C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F24C);
		  /* 8213F24Ch */ case    0:  		/* lwz R7, <#[R11 + 108]> */
		/* 8213F24Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F24Ch case    0:*/		return 0x8213F250;
		  /* 8213F250h */ case    1:  		/* li R5, 13 */
		/* 8213F250h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8213F250h case    1:*/		return 0x8213F254;
		  /* 8213F254h */ case    2:  		/* li R4, 8192 */
		/* 8213F254h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x2000);
		/* 8213F254h case    2:*/		return 0x8213F258;
		  /* 8213F258h */ case    3:  		/* lis R6, -2 */
		/* 8213F258h case    3:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFFFFE);
		/* 8213F258h case    3:*/		return 0x8213F25C;
		  /* 8213F25Ch */ case    4:  		/* stw R5, <#[R11 + 44]> */
		/* 8213F25Ch case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 8213F25Ch case    4:*/		return 0x8213F260;
		  /* 8213F260h */ case    5:  		/* oris R7, R7, 64 */
		/* 8213F260h case    5:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R7,0x40);
		/* 8213F260h case    5:*/		return 0x8213F264;
		  /* 8213F264h */ case    6:  		/* stw R4, <#[R11 + 56]> */
		/* 8213F264h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000038) );
		/* 8213F264h case    6:*/		return 0x8213F268;
		  /* 8213F268h */ case    7:  		/* li R9, 1 */
		/* 8213F268h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8213F268h case    7:*/		return 0x8213F26C;
		  /* 8213F26Ch */ case    8:  		/* li R10, 16 */
		/* 8213F26Ch case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8213F26Ch case    8:*/		return 0x8213F270;
		  /* 8213F270h */ case    9:  		/* li R3, 255 */
		/* 8213F270h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0xFF);
		/* 8213F270h case    9:*/		return 0x8213F274;
		  /* 8213F274h */ case   10:  		/* stw R9, <#[R11 + 48]> */
		/* 8213F274h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8213F274h case   10:*/		return 0x8213F278;
		  /* 8213F278h */ case   11:  		/* ori R7, R7, 513 */
		/* 8213F278h case   11:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x201);
		/* 8213F278h case   11:*/		return 0x8213F27C;
		  /* 8213F27Ch */ case   12:  		/* stw R10, <#[R11 + 96]> */
		/* 8213F27Ch case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000060) );
		/* 8213F27Ch case   12:*/		return 0x8213F280;
		  /* 8213F280h */ case   13:  		/* li R5, 8 */
		/* 8213F280h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 8213F280h case   13:*/		return 0x8213F284;
		  /* 8213F284h */ case   14:  		/* stw R10, <#[R11 + 64]> */
		/* 8213F284h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 8213F284h case   14:*/		return 0x8213F288;
		  /* 8213F288h */ case   15:  		/* li R4, 24 */
		/* 8213F288h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8213F288h case   15:*/		return 0x8213F28C;
		  /* 8213F28Ch */ case   16:  		/* stw R3, <#[R11 + 104]> */
		/* 8213F28Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000068) );
		/* 8213F28Ch case   16:*/		return 0x8213F290;
		  /* 8213F290h */ case   17:  		/* ori R6, R6, 513 */
		/* 8213F290h case   17:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x201);
		/* 8213F290h case   17:*/		return 0x8213F294;
		  /* 8213F294h */ case   18:  		/* stw R9, <#[R11 + 100]> */
		/* 8213F294h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000064) );
		/* 8213F294h case   18:*/		return 0x8213F298;
		  /* 8213F298h */ case   19:  		/* oris R8, R8, 4096 */
		/* 8213F298h case   19:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x1000);
		/* 8213F298h case   19:*/		return 0x8213F29C;
		  /* 8213F29Ch */ case   20:  		/* stw R7, <#[R11 + 108]> */
		/* 8213F29Ch case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F29Ch case   20:*/		return 0x8213F2A0;
		  /* 8213F2A0h */ case   21:  		/* stw R5, <#[R11 + 84]> */
		/* 8213F2A0h case   21:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000054) );
		/* 8213F2A0h case   21:*/		return 0x8213F2A4;
		  /* 8213F2A4h */ case   22:  		/* stw R4, <#[R11 + 88]> */
		/* 8213F2A4h case   22:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000058) );
		/* 8213F2A4h case   22:*/		return 0x8213F2A8;
		  /* 8213F2A8h */ case   23:  		/* stw R9, <#[R11 + 92]> */
		/* 8213F2A8h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000005C) );
		/* 8213F2A8h case   23:*/		return 0x8213F2AC;
		  /* 8213F2ACh */ case   24:  		/* stw R6, <#[R11 + 200]> */
		/* 8213F2ACh case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x000000C8) );
		/* 8213F2ACh case   24:*/		return 0x8213F2B0;
		  /* 8213F2B0h */ case   25:  		/* b 116 */
		/* 8213F2B0h case   25:*/		return 0x8213F324;
		/* 8213F2B0h case   25:*/		return 0x8213F2B4;
	}
	return 0x8213F2B4;
} // Block from 8213F24Ch-8213F2B4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8213F2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F2B4);
		  /* 8213F2B4h */ case    0:  		/* lwz R7, <#[R11 + 108]> */
		/* 8213F2B4h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F2B4h case    0:*/		return 0x8213F2B8;
		  /* 8213F2B8h */ case    1:  		/* li R6, 12 */
		/* 8213F2B8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0xC);
		/* 8213F2B8h case    1:*/		return 0x8213F2BC;
		  /* 8213F2BCh */ case    2:  		/* li R9, 1 */
		/* 8213F2BCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8213F2BCh case    2:*/		return 0x8213F2C0;
		  /* 8213F2C0h */ case    3:  		/* oris R7, R7, 64 */
		/* 8213F2C0h case    3:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R7,0x40);
		/* 8213F2C0h case    3:*/		return 0x8213F2C4;
		  /* 8213F2C4h */ case    4:  		/* stw R6, <#[R11 + 44]> */
		/* 8213F2C4h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x0000002C) );
		/* 8213F2C4h case    4:*/		return 0x8213F2C8;
		  /* 8213F2C8h */ case    5:  		/* li R10, 16 */
		/* 8213F2C8h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8213F2C8h case    5:*/		return 0x8213F2CC;
		  /* 8213F2CCh */ case    6:  		/* stw R9, <#[R11 + 48]> */
		/* 8213F2CCh case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8213F2CCh case    6:*/		return 0x8213F2D0;
		  /* 8213F2D0h */ case    7:  		/* li R5, 255 */
		/* 8213F2D0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 8213F2D0h case    7:*/		return 0x8213F2D4;
		  /* 8213F2D4h */ case    8:  		/* stw R9, <#[R11 + 100]> */
		/* 8213F2D4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000064) );
		/* 8213F2D4h case    8:*/		return 0x8213F2D8;
		  /* 8213F2D8h */ case    9:  		/* ori R7, R7, 512 */
		/* 8213F2D8h case    9:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x200);
		/* 8213F2D8h case    9:*/		return 0x8213F2DC;
		  /* 8213F2DCh */ case   10:  		/* stw R10, <#[R11 + 96]> */
		/* 8213F2DCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000060) );
		/* 8213F2DCh case   10:*/		return 0x8213F2E0;
		  /* 8213F2E0h */ case   11:  		/* li R6, 8 */
		/* 8213F2E0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 8213F2E0h case   11:*/		return 0x8213F2E4;
		  /* 8213F2E4h */ case   12:  		/* stw R10, <#[R11 + 64]> */
		/* 8213F2E4h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 8213F2E4h case   12:*/		return 0x8213F2E8;
		  /* 8213F2E8h */ case   13:  		/* oris R8, R8, 8192 */
		/* 8213F2E8h case   13:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x2000);
		/* 8213F2E8h case   13:*/		return 0x8213F2EC;
		  /* 8213F2ECh */ case   14:  		/* stw R5, <#[R11 + 104]> */
		/* 8213F2ECh case   14:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000068) );
		/* 8213F2ECh case   14:*/		return 0x8213F2F0;
		  /* 8213F2F0h */ case   15:  		/* stw R7, <#[R11 + 108]> */
		/* 8213F2F0h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F2F0h case   15:*/		return 0x8213F2F4;
		  /* 8213F2F4h */ case   16:  		/* stw R6, <#[R11 + 84]> */
		/* 8213F2F4h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000054) );
		/* 8213F2F4h case   16:*/		return 0x8213F2F8;
		  /* 8213F2F8h */ case   17:  		/* stw R9, <#[R11 + 92]> */
		/* 8213F2F8h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000005C) );
		/* 8213F2F8h case   17:*/		return 0x8213F2FC;
		  /* 8213F2FCh */ case   18:  		/* b 40 */
		/* 8213F2FCh case   18:*/		return 0x8213F324;
		/* 8213F2FCh case   18:*/		return 0x8213F300;
	}
	return 0x8213F300;
} // Block from 8213F2B4h-8213F300h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213F300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F300);
		  /* 8213F300h */ case    0:  		/* lwz R9, <#[R11 + 108]> */
		/* 8213F300h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F300h case    0:*/		return 0x8213F304;
		  /* 8213F304h */ case    1:  		/* li R7, 12 */
		/* 8213F304h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 8213F304h case    1:*/		return 0x8213F308;
		  /* 8213F308h */ case    2:  		/* li R6, 10 */
		/* 8213F308h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8213F308h case    2:*/		return 0x8213F30C;
		  /* 8213F30Ch */ case    3:  		/* ori R9, R9, 64 */
		/* 8213F30Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x40);
		/* 8213F30Ch case    3:*/		return 0x8213F310;
		  /* 8213F310h */ case    4:  		/* stw R7, <#[R11 + 44]> */
		/* 8213F310h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000002C) );
		/* 8213F310h case    4:*/		return 0x8213F314;
		  /* 8213F314h */ case    5:  		/* li R10, 16 */
		/* 8213F314h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8213F314h case    5:*/		return 0x8213F318;
		  /* 8213F318h */ case    6:  		/* stw R6, <#[R11 + 100]> */
		/* 8213F318h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000064) );
		/* 8213F318h case    6:*/		return 0x8213F31C;
		  /* 8213F31Ch */ case    7:  		/* oris R8, R8, 8194 */
		/* 8213F31Ch case    7:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x2002);
		/* 8213F31Ch case    7:*/		return 0x8213F320;
		  /* 8213F320h */ case    8:  		/* stw R9, <#[R11 + 108]> */
		/* 8213F320h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F320h case    8:*/		return 0x8213F324;
	}
	return 0x8213F324;
} // Block from 8213F300h-8213F324h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213F324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F324);
		  /* 8213F324h */ case    0:  		/* stw R8, <#[R11 + 112]> */
		/* 8213F324h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000070) );
		/* 8213F324h case    0:*/		return 0x8213F328;
		  /* 8213F328h */ case    1:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 8213F328h case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 8213F328h case    1:*/		return 0x8213F32C;
		  /* 8213F32Ch */ case    2:  		/* lwz R9, <#[R11 + 108]> */
		/* 8213F32Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F32Ch case    2:*/		return 0x8213F330;
		  /* 8213F330h */ case    3:  		/* li R3, 0 */
		/* 8213F330h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213F330h case    3:*/		return 0x8213F334;
		  /* 8213F334h */ case    4:  		/* lwz R7, <#[R11 + 44]> */
		/* 8213F334h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000002C) );
		/* 8213F334h case    4:*/		return 0x8213F338;
		  /* 8213F338h */ case    5:  		/* oris R8, R8, 96 */
		/* 8213F338h case    5:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x60);
		/* 8213F338h case    5:*/		return 0x8213F33C;
		  /* 8213F33Ch */ case    6:  		/* oris R9, R9, 256 */
		/* 8213F33Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x100);
		/* 8213F33Ch case    6:*/		return 0x8213F340;
		  /* 8213F340h */ case    7:  		/* stw R10, <#[R11 + 40]> */
		/* 8213F340h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8213F340h case    7:*/		return 0x8213F344;
		  /* 8213F344h */ case    8:  		/* stw R10, <#[R11 + 68]> */
		/* 8213F344h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000044) );
		/* 8213F344h case    8:*/		return 0x8213F348;
		  /* 8213F348h */ case    9:  		/* stw R9, <#[R11 + 108]> */
		/* 8213F348h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000006C) );
		/* 8213F348h case    9:*/		return 0x8213F34C;
		  /* 8213F34Ch */ case   10:  		/* stw R8, <#[R11 + 112]> */
		/* 8213F34Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000070) );
		/* 8213F34Ch case   10:*/		return 0x8213F350;
		  /* 8213F350h */ case   11:  		/* stw R7, <#[R11 + 468]> */
		/* 8213F350h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x000001D4) );
		/* 8213F350h case   11:*/		return 0x8213F354;
	}
	return 0x8213F354;
} // Block from 8213F324h-8213F354h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213F354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F354);
		  /* 8213F354h */ case    0:  		/* addi R1, R1, 96 */
		/* 8213F354h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8213F354h case    0:*/		return 0x8213F358;
		  /* 8213F358h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8213F358h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8213F358h case    1:*/		return 0x8213F35C;
		  /* 8213F35Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8213F35Ch case    2:*/		regs.LR = regs.R12;
		/* 8213F35Ch case    2:*/		return 0x8213F360;
		  /* 8213F360h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8213F360h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213F360h case    3:*/		return 0x8213F364;
	}
	return 0x8213F364;
} // Block from 8213F354h-8213F364h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213F364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F364);
		  /* 8213F364h */ case    0:  		/* nop */
		/* 8213F364h case    0:*/		cpu::op::nop();
		/* 8213F364h case    0:*/		return 0x8213F368;
	}
	return 0x8213F368;
} // Block from 8213F364h-8213F368h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213F368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F368);
		  /* 8213F368h */ case    0:  		/* mfspr R12, LR */
		/* 8213F368h case    0:*/		regs.R12 = regs.LR;
		/* 8213F368h case    0:*/		return 0x8213F36C;
		  /* 8213F36Ch */ case    1:  		/* bl -713012 */
		/* 8213F36Ch case    1:*/		regs.LR = 0x8213F370; return 0x82091238;
		/* 8213F36Ch case    1:*/		return 0x8213F370;
		  /* 8213F370h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8213F370h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8213F370h case    2:*/		return 0x8213F374;
		  /* 8213F374h */ case    3:  		/* lwz R11, <#[R3 + 348]> */
		/* 8213F374h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000015C) );
		/* 8213F374h case    3:*/		return 0x8213F378;
		  /* 8213F378h */ case    4:  		/* mr R30, R3 */
		/* 8213F378h case    4:*/		regs.R30 = regs.R3;
		/* 8213F378h case    4:*/		return 0x8213F37C;
		  /* 8213F37Ch */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 8213F37Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213F37Ch case    5:*/		return 0x8213F380;
		  /* 8213F380h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8213F380h case    6:*/		if ( regs.CR[6].eq ) { return 0x8213F38C;  }
		/* 8213F380h case    6:*/		return 0x8213F384;
		  /* 8213F384h */ case    7:  		/* li R3, 0 */
		/* 8213F384h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213F384h case    7:*/		return 0x8213F388;
		  /* 8213F388h */ case    8:  		/* b 448 */
		/* 8213F388h case    8:*/		return 0x8213F548;
		/* 8213F388h case    8:*/		return 0x8213F38C;
	}
	return 0x8213F38C;
} // Block from 8213F368h-8213F38Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213F38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F38C);
		  /* 8213F38Ch */ case    0:  		/* addi R11, R1, 80 */
		/* 8213F38Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8213F38Ch case    0:*/		return 0x8213F390;
		  /* 8213F390h */ case    1:  		/* lwz R10, <#[R30 + 8]> */
		/* 8213F390h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8213F390h case    1:*/		return 0x8213F394;
		  /* 8213F394h */ case    2:  		/* li R21, 0 */
		/* 8213F394h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8213F394h case    2:*/		return 0x8213F398;
		  /* 8213F398h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8213F398h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213F398h case    3:*/		return 0x8213F39C;
		  /* 8213F39Ch */ case    4:  		/* mr R26, R21 */
		/* 8213F39Ch case    4:*/		regs.R26 = regs.R21;
		/* 8213F39Ch case    4:*/		return 0x8213F3A0;
		  /* 8213F3A0h */ case    5:  		/* mr R27, R21 */
		/* 8213F3A0h case    5:*/		regs.R27 = regs.R21;
		/* 8213F3A0h case    5:*/		return 0x8213F3A4;
		  /* 8213F3A4h */ case    6:  		/* std R21, <#[R11]> */
		/* 8213F3A4h case    6:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 8213F3A4h case    6:*/		return 0x8213F3A8;
		  /* 8213F3A8h */ case    7:  		/* mr R28, R21 */
		/* 8213F3A8h case    7:*/		regs.R28 = regs.R21;
		/* 8213F3A8h case    7:*/		return 0x8213F3AC;
		  /* 8213F3ACh */ case    8:  		/* std R21, <#[R11 + 8]> */
		/* 8213F3ACh case    8:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 8213F3ACh case    8:*/		return 0x8213F3B0;
		  /* 8213F3B0h */ case    9:  		/* mr R20, R21 */
		/* 8213F3B0h case    9:*/		regs.R20 = regs.R21;
		/* 8213F3B0h case    9:*/		return 0x8213F3B4;
		  /* 8213F3B4h */ case   10:  		/* mr R23, R21 */
		/* 8213F3B4h case   10:*/		regs.R23 = regs.R21;
		/* 8213F3B4h case   10:*/		return 0x8213F3B8;
		  /* 8213F3B8h */ case   11:  		/* bc 4, CR6_GT, 304 */
		/* 8213F3B8h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8213F4E8;  }
		/* 8213F3B8h case   11:*/		return 0x8213F3BC;
		  /* 8213F3BCh */ case   12:  		/* lis R11, -32253 */
		/* 8213F3BCh case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8213F3BCh case   12:*/		return 0x8213F3C0;
		  /* 8213F3C0h */ case   13:  		/* lis R10, -32254 */
		/* 8213F3C0h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8213F3C0h case   13:*/		return 0x8213F3C4;
		  /* 8213F3C4h */ case   14:  		/* mr R22, R21 */
		/* 8213F3C4h case   14:*/		regs.R22 = regs.R21;
		/* 8213F3C4h case   14:*/		return 0x8213F3C8;
		  /* 8213F3C8h */ case   15:  		/* addi R25, R11, 24308 */
		/* 8213F3C8h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x5EF4);
		/* 8213F3C8h case   15:*/		return 0x8213F3CC;
		  /* 8213F3CCh */ case   16:  		/* addi R24, R10, -14564 */
		/* 8213F3CCh case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFC71C);
		/* 8213F3CCh case   16:*/		return 0x8213F3D0;
		  /* 8213F3D0h */ case   17:  		/* lwz R11, <#[R30 + 20]> */
		/* 8213F3D0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8213F3D0h case   17:*/		return 0x8213F3D4;
		  /* 8213F3D4h */ case   18:  		/* lwz R10, <#[R30 + 16]> */
		/* 8213F3D4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8213F3D4h case   18:*/		return 0x8213F3D8;
		  /* 8213F3D8h */ case   19:  		/* lwzx R31, <#[R22 + R11]> */
		/* 8213F3D8h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 8213F3D8h case   19:*/		return 0x8213F3DC;
		  /* 8213F3DCh */ case   20:  		/* lwz R11, <#[R31 + 4]> */
		/* 8213F3DCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8213F3DCh case   20:*/		return 0x8213F3E0;
		  /* 8213F3E0h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213F3E0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213F3E0h case   21:*/		return 0x8213F3E4;
		  /* 8213F3E4h */ case   22:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8213F3E4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213F3E4h case   22:*/		return 0x8213F3E8;
		  /* 8213F3E8h */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213F3E8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213F3E8h case   23:*/		return 0x8213F3EC;
		  /* 8213F3ECh */ case   24:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8213F3ECh case   24:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8213F3ECh case   24:*/		return 0x8213F3F0;
		  /* 8213F3F0h */ case   25:  		/* bc 12, CR0_EQ, 228 */
		/* 8213F3F0h case   25:*/		if ( regs.CR[0].eq ) { return 0x8213F4D4;  }
		/* 8213F3F0h case   25:*/		return 0x8213F3F4;
		  /* 8213F3F4h */ case   26:  		/* lwz R11, <#[R30]> */
		/* 8213F3F4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213F3F4h case   26:*/		return 0x8213F3F8;
		  /* 8213F3F8h */ case   27:  		/* mr R3, R30 */
		/* 8213F3F8h case   27:*/		regs.R3 = regs.R30;
		/* 8213F3F8h case   27:*/		return 0x8213F3FC;
		  /* 8213F3FCh */ case   28:  		/* lwz R4, <#[R31 + 108]> */
		/* 8213F3FCh case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8213F3FCh case   28:*/		return 0x8213F400;
		  /* 8213F400h */ case   29:  		/* lwz R11, <#[R11 + 112]> */
		/* 8213F400h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8213F400h case   29:*/		return 0x8213F404;
		  /* 8213F404h */ case   30:  		/* mtspr CTR, R11 */
		/* 8213F404h case   30:*/		regs.CTR = regs.R11;
		/* 8213F404h case   30:*/		return 0x8213F408;
		  /* 8213F408h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 8213F408h case   31:*/		if ( 1 ) { regs.LR = 0x8213F40C; return (uint32)regs.CTR; }
		/* 8213F408h case   31:*/		return 0x8213F40C;
		  /* 8213F40Ch */ case   32:  		/* lwz R11, <#[R30]> */
		/* 8213F40Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213F40Ch case   32:*/		return 0x8213F410;
		  /* 8213F410h */ case   33:  		/* mr R29, R3 */
		/* 8213F410h case   33:*/		regs.R29 = regs.R3;
		/* 8213F410h case   33:*/		return 0x8213F414;
		  /* 8213F414h */ case   34:  		/* mr R3, R30 */
		/* 8213F414h case   34:*/		regs.R3 = regs.R30;
		/* 8213F414h case   34:*/		return 0x8213F418;
		  /* 8213F418h */ case   35:  		/* lwz R4, <#[R31 + 108]> */
		/* 8213F418h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8213F418h case   35:*/		return 0x8213F41C;
		  /* 8213F41Ch */ case   36:  		/* lwz R11, <#[R11 + 116]> */
		/* 8213F41Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8213F41Ch case   36:*/		return 0x8213F420;
		  /* 8213F420h */ case   37:  		/* mtspr CTR, R11 */
		/* 8213F420h case   37:*/		regs.CTR = regs.R11;
		/* 8213F420h case   37:*/		return 0x8213F424;
		  /* 8213F424h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8213F424h case   38:*/		if ( 1 ) { regs.LR = 0x8213F428; return (uint32)regs.CTR; }
		/* 8213F424h case   38:*/		return 0x8213F428;
		  /* 8213F428h */ case   39:  		/* cmplwi CR6, R29, 1 */
		/* 8213F428h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 8213F428h case   39:*/		return 0x8213F42C;
		  /* 8213F42Ch */ case   40:  		/* bc 12, CR6_EQ, 136 */
		/* 8213F42Ch case   40:*/		if ( regs.CR[6].eq ) { return 0x8213F4B4;  }
		/* 8213F42Ch case   40:*/		return 0x8213F430;
		  /* 8213F430h */ case   41:  		/* cmplwi CR6, R29, 5 */
		/* 8213F430h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 8213F430h case   41:*/		return 0x8213F434;
		  /* 8213F434h */ case   42:  		/* bc 12, CR6_EQ, 68 */
		/* 8213F434h case   42:*/		if ( regs.CR[6].eq ) { return 0x8213F478;  }
		/* 8213F434h case   42:*/		return 0x8213F438;
		  /* 8213F438h */ case   43:  		/* cmplwi CR6, R29, 12 */
		/* 8213F438h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000C);
		/* 8213F438h case   43:*/		return 0x8213F43C;
		  /* 8213F43Ch */ case   44:  		/* bc 4, CR6_EQ, 152 */
		/* 8213F43Ch case   44:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F43Ch case   44:*/		return 0x8213F440;
		  /* 8213F440h */ case   45:  		/* cmplwi CR6, R3, 0 */
		/* 8213F440h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213F440h case   45:*/		return 0x8213F444;
		  /* 8213F444h */ case   46:  		/* bc 4, CR6_EQ, 144 */
		/* 8213F444h case   46:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F444h case   46:*/		return 0x8213F448;
		  /* 8213F448h */ case   47:  		/* lwz R11, <#[R31 + 16]> */
		/* 8213F448h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8213F448h case   47:*/		return 0x8213F44C;
		  /* 8213F44Ch */ case   48:  		/* cmplwi CR6, R11, 0 */
		/* 8213F44Ch case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F44Ch case   48:*/		return 0x8213F450;
		  /* 8213F450h */ case   49:  		/* bc 4, CR6_GT, 132 */
		/* 8213F450h case   49:*/		if ( !regs.CR[6].gt ) { return 0x8213F4D4;  }
		/* 8213F450h case   49:*/		return 0x8213F454;
		  /* 8213F454h */ case   50:  		/* cmpwi CR6, R26, 0 */
		/* 8213F454h case   50:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8213F454h case   50:*/		return 0x8213F458;
		  /* 8213F458h */ case   51:  		/* bc 4, CR6_EQ, 124 */
		/* 8213F458h case   51:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F458h case   51:*/		return 0x8213F45C;
		  /* 8213F45Ch */ case   52:  		/* mr R6, R25 */
		/* 8213F45Ch case   52:*/		regs.R6 = regs.R25;
		/* 8213F45Ch case   52:*/		return 0x8213F460;
		  /* 8213F460h */ case   53:  		/* lwz R4, <#[R31 + 96]> */
		/* 8213F460h case   53:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000060) );
		/* 8213F460h case   53:*/		return 0x8213F464;
		  /* 8213F464h */ case   54:  		/* li R5, 4540 */
		/* 8213F464h case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x11BC);
		/* 8213F464h case   54:*/		return 0x8213F468;
		  /* 8213F468h */ case   55:  		/* mr R3, R30 */
		/* 8213F468h case   55:*/		regs.R3 = regs.R30;
		/* 8213F468h case   55:*/		return 0x8213F46C;
		  /* 8213F46Ch */ case   56:  		/* bl -199996 */
		/* 8213F46Ch case   56:*/		regs.LR = 0x8213F470; return 0x8210E730;
		/* 8213F46Ch case   56:*/		return 0x8213F470;
		  /* 8213F470h */ case   57:  		/* li R26, 1 */
		/* 8213F470h case   57:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8213F470h case   57:*/		return 0x8213F474;
		  /* 8213F474h */ case   58:  		/* b 56 */
		/* 8213F474h case   58:*/		return 0x8213F4AC;
		/* 8213F474h case   58:*/		return 0x8213F478;
	}
	return 0x8213F478;
} // Block from 8213F38Ch-8213F478h (59 instructions)

//////////////////////////////////////////////////////
// Block at 8213F478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F478);
		  /* 8213F478h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8213F478h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213F478h case    0:*/		return 0x8213F47C;
		  /* 8213F47Ch */ case    1:  		/* bc 4, CR6_EQ, 88 */
		/* 8213F47Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F47Ch case    1:*/		return 0x8213F480;
		  /* 8213F480h */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8213F480h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8213F480h case    2:*/		return 0x8213F484;
		  /* 8213F484h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213F484h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F484h case    3:*/		return 0x8213F488;
		  /* 8213F488h */ case    4:  		/* bc 4, CR6_GT, 76 */
		/* 8213F488h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213F4D4;  }
		/* 8213F488h case    4:*/		return 0x8213F48C;
		  /* 8213F48Ch */ case    5:  		/* cmpwi CR6, R27, 0 */
		/* 8213F48Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8213F48Ch case    5:*/		return 0x8213F490;
		  /* 8213F490h */ case    6:  		/* bc 4, CR6_EQ, 68 */
		/* 8213F490h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F490h case    6:*/		return 0x8213F494;
		  /* 8213F494h */ case    7:  		/* mr R6, R24 */
		/* 8213F494h case    7:*/		regs.R6 = regs.R24;
		/* 8213F494h case    7:*/		return 0x8213F498;
		  /* 8213F498h */ case    8:  		/* lwz R4, <#[R31 + 96]> */
		/* 8213F498h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000060) );
		/* 8213F498h case    8:*/		return 0x8213F49C;
		  /* 8213F49Ch */ case    9:  		/* li R5, 4540 */
		/* 8213F49Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x11BC);
		/* 8213F49Ch case    9:*/		return 0x8213F4A0;
		  /* 8213F4A0h */ case   10:  		/* mr R3, R30 */
		/* 8213F4A0h case   10:*/		regs.R3 = regs.R30;
		/* 8213F4A0h case   10:*/		return 0x8213F4A4;
		  /* 8213F4A4h */ case   11:  		/* bl -200052 */
		/* 8213F4A4h case   11:*/		regs.LR = 0x8213F4A8; return 0x8210E730;
		/* 8213F4A4h case   11:*/		return 0x8213F4A8;
		  /* 8213F4A8h */ case   12:  		/* li R27, 1 */
		/* 8213F4A8h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8213F4A8h case   12:*/		return 0x8213F4AC;
	}
	return 0x8213F4AC;
} // Block from 8213F478h-8213F4ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213F4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F4AC);
		  /* 8213F4ACh */ case    0:  		/* li R28, 1 */
		/* 8213F4ACh case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8213F4ACh case    0:*/		return 0x8213F4B0;
		  /* 8213F4B0h */ case    1:  		/* b 36 */
		/* 8213F4B0h case    1:*/		return 0x8213F4D4;
		/* 8213F4B0h case    1:*/		return 0x8213F4B4;
	}
	return 0x8213F4B4;
} // Block from 8213F4ACh-8213F4B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F4B4);
		  /* 8213F4B4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8213F4B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8213F4B4h case    0:*/		return 0x8213F4B8;
		  /* 8213F4B8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8213F4B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F4D4;  }
		/* 8213F4B8h case    1:*/		return 0x8213F4BC;
		  /* 8213F4BCh */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8213F4BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8213F4BCh case    2:*/		return 0x8213F4C0;
		  /* 8213F4C0h */ case    3:  		/* addi R10, R1, 80 */
		/* 8213F4C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8213F4C0h case    3:*/		return 0x8213F4C4;
		  /* 8213F4C4h */ case    4:  		/* li R9, 1 */
		/* 8213F4C4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8213F4C4h case    4:*/		return 0x8213F4C8;
		  /* 8213F4C8h */ case    5:  		/* lwz R20, <#[R31 + 96]> */
		/* 8213F4C8h case    5:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R31 + 0x00000060) );
		/* 8213F4C8h case    5:*/		return 0x8213F4CC;
		  /* 8213F4CCh */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213F4CCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213F4CCh case    6:*/		return 0x8213F4D0;
		  /* 8213F4D0h */ case    7:  		/* stwx R9, <#[R11 + R10]> */
		/* 8213F4D0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213F4D0h case    7:*/		return 0x8213F4D4;
	}
	return 0x8213F4D4;
} // Block from 8213F4B4h-8213F4D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213F4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F4D4);
		  /* 8213F4D4h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8213F4D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8213F4D4h case    0:*/		return 0x8213F4D8;
		  /* 8213F4D8h */ case    1:  		/* addi R23, R23, 1 */
		/* 8213F4D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8213F4D8h case    1:*/		return 0x8213F4DC;
		  /* 8213F4DCh */ case    2:  		/* addi R22, R22, 4 */
		/* 8213F4DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 8213F4DCh case    2:*/		return 0x8213F4E0;
		  /* 8213F4E0h */ case    3:  		/* cmplw CR6, R23, R11 */
		/* 8213F4E0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 8213F4E0h case    3:*/		return 0x8213F4E4;
		  /* 8213F4E4h */ case    4:  		/* bc 12, CR6_LT, -276 */
		/* 8213F4E4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213F3D0;  }
		/* 8213F4E4h case    4:*/		return 0x8213F4E8;
	}
	return 0x8213F4E8;
} // Block from 8213F4D4h-8213F4E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213F4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F4E8);
		  /* 8213F4E8h */ case    0:  		/* li R11, 4 */
		/* 8213F4E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8213F4E8h case    0:*/		return 0x8213F4EC;
		  /* 8213F4ECh */ case    1:  		/* mr R9, R21 */
		/* 8213F4ECh case    1:*/		regs.R9 = regs.R21;
		/* 8213F4ECh case    1:*/		return 0x8213F4F0;
		  /* 8213F4F0h */ case    2:  		/* addi R10, R1, 80 */
		/* 8213F4F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8213F4F0h case    2:*/		return 0x8213F4F4;
		  /* 8213F4F4h */ case    3:  		/* mtspr CTR, R11 */
		/* 8213F4F4h case    3:*/		regs.CTR = regs.R11;
		/* 8213F4F4h case    3:*/		return 0x8213F4F8;
		  /* 8213F4F8h */ case    4:  		/* lwz R11, <#[R10]> */
		/* 8213F4F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8213F4F8h case    4:*/		return 0x8213F4FC;
		  /* 8213F4FCh */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 8213F4FCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8213F4FCh case    5:*/		return 0x8213F500;
		  /* 8213F500h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 8213F500h case    6:*/		if ( regs.CR[6].eq ) { return 0x8213F508;  }
		/* 8213F500h case    6:*/		return 0x8213F504;
		  /* 8213F504h */ case    7:  		/* addi R9, R9, 1 */
		/* 8213F504h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8213F504h case    7:*/		return 0x8213F508;
	}
	return 0x8213F508;
} // Block from 8213F4E8h-8213F508h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213F508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F508);
		  /* 8213F508h */ case    0:  		/* addi R10, R10, 4 */
		/* 8213F508h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213F508h case    0:*/		return 0x8213F50C;
		  /* 8213F50Ch */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 8213F50Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213F4F8;  }
		/* 8213F50Ch case    1:*/		return 0x8213F510;
		  /* 8213F510h */ case    2:  		/* cmplwi CR6, R9, 4 */
		/* 8213F510h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 8213F510h case    2:*/		return 0x8213F514;
		  /* 8213F514h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8213F514h case    3:*/		if ( regs.CR[6].eq ) { return 0x8213F534;  }
		/* 8213F514h case    3:*/		return 0x8213F518;
		  /* 8213F518h */ case    4:  		/* lis R11, -32254 */
		/* 8213F518h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8213F518h case    4:*/		return 0x8213F51C;
		  /* 8213F51Ch */ case    5:  		/* li R5, 4541 */
		/* 8213F51Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x11BD);
		/* 8213F51Ch case    5:*/		return 0x8213F520;
		  /* 8213F520h */ case    6:  		/* addi R6, R11, -14632 */
		/* 8213F520h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC6D8);
		/* 8213F520h case    6:*/		return 0x8213F524;
		  /* 8213F524h */ case    7:  		/* mr R4, R20 */
		/* 8213F524h case    7:*/		regs.R4 = regs.R20;
		/* 8213F524h case    7:*/		return 0x8213F528;
		  /* 8213F528h */ case    8:  		/* mr R3, R30 */
		/* 8213F528h case    8:*/		regs.R3 = regs.R30;
		/* 8213F528h case    8:*/		return 0x8213F52C;
		  /* 8213F52Ch */ case    9:  		/* bl -200188 */
		/* 8213F52Ch case    9:*/		regs.LR = 0x8213F530; return 0x8210E730;
		/* 8213F52Ch case    9:*/		return 0x8213F530;
		  /* 8213F530h */ case   10:  		/* li R28, 1 */
		/* 8213F530h case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8213F530h case   10:*/		return 0x8213F534;
	}
	return 0x8213F534;
} // Block from 8213F508h-8213F534h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213F534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F534);
		  /* 8213F534h */ case    0:  		/* subfic R11, R28, 0 */
		/* 8213F534h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R28,0x0);
		/* 8213F534h case    0:*/		return 0x8213F538;
		  /* 8213F538h */ case    1:  		/* lis R10, -32768 */
		/* 8213F538h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8213F538h case    1:*/		return 0x8213F53C;
		  /* 8213F53Ch */ case    2:  		/* subfe R11, R11, R11 */
		/* 8213F53Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8213F53Ch case    2:*/		return 0x8213F540;
		  /* 8213F540h */ case    3:  		/* ori R10, R10, 16389 */
		/* 8213F540h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 8213F540h case    3:*/		return 0x8213F544;
		  /* 8213F544h */ case    4:  		/* and R3, R11, R10 */
		/* 8213F544h case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8213F544h case    4:*/		return 0x8213F548;
	}
	return 0x8213F548;
} // Block from 8213F534h-8213F548h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213F548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F548);
		  /* 8213F548h */ case    0:  		/* addi R1, R1, 208 */
		/* 8213F548h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8213F548h case    0:*/		return 0x8213F54C;
		  /* 8213F54Ch */ case    1:  		/* b -713412 */
		/* 8213F54Ch case    1:*/		return 0x82091288;
		/* 8213F54Ch case    1:*/		return 0x8213F550;
	}
	return 0x8213F550;
} // Block from 8213F548h-8213F550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F550);
		  /* 8213F550h */ case    0:  		/* mfspr R12, LR */
		/* 8213F550h case    0:*/		regs.R12 = regs.LR;
		/* 8213F550h case    0:*/		return 0x8213F554;
		  /* 8213F554h */ case    1:  		/* bl -713476 */
		/* 8213F554h case    1:*/		regs.LR = 0x8213F558; return 0x82091250;
		/* 8213F554h case    1:*/		return 0x8213F558;
		  /* 8213F558h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8213F558h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8213F558h case    2:*/		return 0x8213F55C;
		  /* 8213F55Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8213F55Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8213F55Ch case    3:*/		return 0x8213F560;
		  /* 8213F560h */ case    4:  		/* mr R26, R4 */
		/* 8213F560h case    4:*/		regs.R26 = regs.R4;
		/* 8213F560h case    4:*/		return 0x8213F564;
		  /* 8213F564h */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8213F564h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8213F564h case    5:*/		return 0x8213F568;
		  /* 8213F568h */ case    6:  		/* mr R27, R3 */
		/* 8213F568h case    6:*/		regs.R27 = regs.R3;
		/* 8213F568h case    6:*/		return 0x8213F56C;
		  /* 8213F56Ch */ case    7:  		/* mr R31, R5 */
		/* 8213F56Ch case    7:*/		regs.R31 = regs.R5;
		/* 8213F56Ch case    7:*/		return 0x8213F570;
		  /* 8213F570h */ case    8:  		/* mr R28, R6 */
		/* 8213F570h case    8:*/		regs.R28 = regs.R6;
		/* 8213F570h case    8:*/		return 0x8213F574;
		  /* 8213F574h */ case    9:  		/* mr R30, R7 */
		/* 8213F574h case    9:*/		regs.R30 = regs.R7;
		/* 8213F574h case    9:*/		return 0x8213F578;
		  /* 8213F578h */ case   10:  		/* lwz R11, <#[R11 + 112]> */
		/* 8213F578h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8213F578h case   10:*/		return 0x8213F57C;
		  /* 8213F57Ch */ case   11:  		/* mtspr CTR, R11 */
		/* 8213F57Ch case   11:*/		regs.CTR = regs.R11;
		/* 8213F57Ch case   11:*/		return 0x8213F580;
		  /* 8213F580h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8213F580h case   12:*/		if ( 1 ) { regs.LR = 0x8213F584; return (uint32)regs.CTR; }
		/* 8213F580h case   12:*/		return 0x8213F584;
		  /* 8213F584h */ case   13:  		/* lwz R11, <#[R27]> */
		/* 8213F584h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8213F584h case   13:*/		return 0x8213F588;
		  /* 8213F588h */ case   14:  		/* mr R29, R3 */
		/* 8213F588h case   14:*/		regs.R29 = regs.R3;
		/* 8213F588h case   14:*/		return 0x8213F58C;
		  /* 8213F58Ch */ case   15:  		/* mr R3, R27 */
		/* 8213F58Ch case   15:*/		regs.R3 = regs.R27;
		/* 8213F58Ch case   15:*/		return 0x8213F590;
		  /* 8213F590h */ case   16:  		/* lwz R4, <#[R26 + 108]> */
		/* 8213F590h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000006C) );
		/* 8213F590h case   16:*/		return 0x8213F594;
		  /* 8213F594h */ case   17:  		/* lwz R11, <#[R11 + 116]> */
		/* 8213F594h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8213F594h case   17:*/		return 0x8213F598;
		  /* 8213F598h */ case   18:  		/* mtspr CTR, R11 */
		/* 8213F598h case   18:*/		regs.CTR = regs.R11;
		/* 8213F598h case   18:*/		return 0x8213F59C;
		  /* 8213F59Ch */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8213F59Ch case   19:*/		if ( 1 ) { regs.LR = 0x8213F5A0; return (uint32)regs.CTR; }
		/* 8213F59Ch case   19:*/		return 0x8213F5A0;
		  /* 8213F5A0h */ case   20:  		/* li R11, 0 */
		/* 8213F5A0h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213F5A0h case   20:*/		return 0x8213F5A4;
		  /* 8213F5A4h */ case   21:  		/* stw R3, <#[R31]> */
		/* 8213F5A4h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F5A4h case   21:*/		return 0x8213F5A8;
		  /* 8213F5A8h */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 8213F5A8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213F5A8h case   22:*/		return 0x8213F5AC;
		  /* 8213F5ACh */ case   23:  		/* bc 12, CR6_EQ, 8 */
		/* 8213F5ACh case   23:*/		if ( regs.CR[6].eq ) { return 0x8213F5B4;  }
		/* 8213F5ACh case   23:*/		return 0x8213F5B0;
		  /* 8213F5B0h */ case   24:  		/* stw R11, <#[R30]> */
		/* 8213F5B0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213F5B0h case   24:*/		return 0x8213F5B4;
	}
	return 0x8213F5B4;
} // Block from 8213F550h-8213F5B4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8213F5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F5B4);
		  /* 8213F5B4h */ case    0:  		/* cmplwi CR6, R29, 1 */
		/* 8213F5B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 8213F5B4h case    0:*/		return 0x8213F5B8;
		  /* 8213F5B8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8213F5B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F5D8;  }
		/* 8213F5B8h case    1:*/		return 0x8213F5BC;
		  /* 8213F5BCh */ case    2:  		/* lwz R10, <#[R31]> */
		/* 8213F5BCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F5BCh case    2:*/		return 0x8213F5C0;
		  /* 8213F5C0h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8213F5C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8213F5C0h case    3:*/		return 0x8213F5C4;
		  /* 8213F5C4h */ case    4:  		/* bc 4, CR6_EQ, 200 */
		/* 8213F5C4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213F68C;  }
		/* 8213F5C4h case    4:*/		return 0x8213F5C8;
		  /* 8213F5C8h */ case    5:  		/* li R10, 4 */
		/* 8213F5C8h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8213F5C8h case    5:*/		return 0x8213F5CC;
		  /* 8213F5CCh */ case    6:  		/* stw R10, <#[R28]> */
		/* 8213F5CCh case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F5CCh case    6:*/		return 0x8213F5D0;
		  /* 8213F5D0h */ case    7:  		/* stw R11, <#[R31]> */
		/* 8213F5D0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F5D0h case    7:*/		return 0x8213F5D4;
		  /* 8213F5D4h */ case    8:  		/* b 176 */
		/* 8213F5D4h case    8:*/		return 0x8213F684;
		/* 8213F5D4h case    8:*/		return 0x8213F5D8;
	}
	return 0x8213F5D8;
} // Block from 8213F5B4h-8213F5D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8213F5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F5D8);
		  /* 8213F5D8h */ case    0:  		/* cmplwi CR6, R29, 5 */
		/* 8213F5D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000005);
		/* 8213F5D8h case    0:*/		return 0x8213F5DC;
		  /* 8213F5DCh */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8213F5DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F60C;  }
		/* 8213F5DCh case    1:*/		return 0x8213F5E0;
		  /* 8213F5E0h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8213F5E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F5E0h case    2:*/		return 0x8213F5E4;
		  /* 8213F5E4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213F5E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F5E4h case    3:*/		return 0x8213F5E8;
		  /* 8213F5E8h */ case    4:  		/* bc 4, CR6_EQ, 164 */
		/* 8213F5E8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213F68C;  }
		/* 8213F5E8h case    4:*/		return 0x8213F5EC;
		  /* 8213F5ECh */ case    5:  		/* li R11, 4 */
		/* 8213F5ECh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8213F5ECh case    5:*/		return 0x8213F5F0;
		  /* 8213F5F0h */ case    6:  		/* li R10, 2 */
		/* 8213F5F0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8213F5F0h case    6:*/		return 0x8213F5F4;
		  /* 8213F5F4h */ case    7:  		/* stw R11, <#[R28]> */
		/* 8213F5F4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F5F4h case    7:*/		return 0x8213F5F8;
		  /* 8213F5F8h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 8213F5F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213F5F8h case    8:*/		return 0x8213F5FC;
		  /* 8213F5FCh */ case    9:  		/* stw R10, <#[R31]> */
		/* 8213F5FCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F5FCh case    9:*/		return 0x8213F600;
		  /* 8213F600h */ case   10:  		/* bc 12, CR6_EQ, 132 */
		/* 8213F600h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213F684;  }
		/* 8213F600h case   10:*/		return 0x8213F604;
		  /* 8213F604h */ case   11:  		/* li R11, 1 */
		/* 8213F604h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213F604h case   11:*/		return 0x8213F608;
		  /* 8213F608h */ case   12:  		/* b 48 */
		/* 8213F608h case   12:*/		return 0x8213F638;
		/* 8213F608h case   12:*/		return 0x8213F60C;
	}
	return 0x8213F60C;
} // Block from 8213F5D8h-8213F60Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8213F60Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F60C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F60C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F60C);
		  /* 8213F60Ch */ case    0:  		/* cmplwi CR6, R29, 12 */
		/* 8213F60Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000C);
		/* 8213F60Ch case    0:*/		return 0x8213F610;
		  /* 8213F610h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8213F610h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F640;  }
		/* 8213F610h case    1:*/		return 0x8213F614;
		  /* 8213F614h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8213F614h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F614h case    2:*/		return 0x8213F618;
		  /* 8213F618h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213F618h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F618h case    3:*/		return 0x8213F61C;
		  /* 8213F61Ch */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 8213F61Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8213F68C;  }
		/* 8213F61Ch case    4:*/		return 0x8213F620;
		  /* 8213F620h */ case    5:  		/* li R10, 4 */
		/* 8213F620h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8213F620h case    5:*/		return 0x8213F624;
		  /* 8213F624h */ case    6:  		/* li R11, 1 */
		/* 8213F624h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213F624h case    6:*/		return 0x8213F628;
		  /* 8213F628h */ case    7:  		/* stw R10, <#[R28]> */
		/* 8213F628h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F628h case    7:*/		return 0x8213F62C;
		  /* 8213F62Ch */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 8213F62Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8213F62Ch case    8:*/		return 0x8213F630;
		  /* 8213F630h */ case    9:  		/* stw R11, <#[R31]> */
		/* 8213F630h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F630h case    9:*/		return 0x8213F634;
		  /* 8213F634h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 8213F634h case   10:*/		if ( regs.CR[6].eq ) { return 0x8213F684;  }
		/* 8213F634h case   10:*/		return 0x8213F638;
	}
	return 0x8213F638;
} // Block from 8213F60Ch-8213F638h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213F638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F638);
		  /* 8213F638h */ case    0:  		/* stw R11, <#[R30]> */
		/* 8213F638h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213F638h case    0:*/		return 0x8213F63C;
		  /* 8213F63Ch */ case    1:  		/* b 72 */
		/* 8213F63Ch case    1:*/		return 0x8213F684;
		/* 8213F63Ch case    1:*/		return 0x8213F640;
	}
	return 0x8213F640;
} // Block from 8213F638h-8213F640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F640);
		  /* 8213F640h */ case    0:  		/* cmplwi CR6, R29, 11 */
		/* 8213F640h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000B);
		/* 8213F640h case    0:*/		return 0x8213F644;
		  /* 8213F644h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8213F644h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F65C;  }
		/* 8213F644h case    1:*/		return 0x8213F648;
		  /* 8213F648h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8213F648h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F648h case    2:*/		return 0x8213F64C;
		  /* 8213F64Ch */ case    3:  		/* cmplwi CR6, R11, 2 */
		/* 8213F64Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8213F64Ch case    3:*/		return 0x8213F650;
		  /* 8213F650h */ case    4:  		/* bc 4, CR6_LT, 60 */
		/* 8213F650h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213F68C;  }
		/* 8213F650h case    4:*/		return 0x8213F654;
		  /* 8213F654h */ case    5:  		/* li R11, 5 */
		/* 8213F654h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8213F654h case    5:*/		return 0x8213F658;
		  /* 8213F658h */ case    6:  		/* b 40 */
		/* 8213F658h case    6:*/		return 0x8213F680;
		/* 8213F658h case    6:*/		return 0x8213F65C;
	}
	return 0x8213F65C;
} // Block from 8213F640h-8213F65Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F65C);
		  /* 8213F65Ch */ case    0:  		/* cmplwi CR6, R29, 6 */
		/* 8213F65Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 8213F65Ch case    0:*/		return 0x8213F660;
		  /* 8213F660h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8213F660h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F678;  }
		/* 8213F660h case    1:*/		return 0x8213F664;
		  /* 8213F664h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8213F664h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F664h case    2:*/		return 0x8213F668;
		  /* 8213F668h */ case    3:  		/* cmplwi CR6, R11, 8 */
		/* 8213F668h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 8213F668h case    3:*/		return 0x8213F66C;
		  /* 8213F66Ch */ case    4:  		/* bc 4, CR6_LT, 32 */
		/* 8213F66Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x8213F68C;  }
		/* 8213F66Ch case    4:*/		return 0x8213F670;
		  /* 8213F670h */ case    5:  		/* li R11, 6 */
		/* 8213F670h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8213F670h case    5:*/		return 0x8213F674;
		  /* 8213F674h */ case    6:  		/* b 12 */
		/* 8213F674h case    6:*/		return 0x8213F680;
		/* 8213F674h case    6:*/		return 0x8213F678;
	}
	return 0x8213F678;
} // Block from 8213F65Ch-8213F678h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F678);
		  /* 8213F678h */ case    0:  		/* cmplwi CR6, R29, 65535 */
		/* 8213F678h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000FFFF);
		/* 8213F678h case    0:*/		return 0x8213F67C;
		  /* 8213F67Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8213F67Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8213F68C;  }
		/* 8213F67Ch case    1:*/		return 0x8213F680;
	}
	return 0x8213F680;
} // Block from 8213F678h-8213F680h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F680);
		  /* 8213F680h */ case    0:  		/* stw R11, <#[R28]> */
		/* 8213F680h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F680h case    0:*/		return 0x8213F684;
	}
	return 0x8213F684;
} // Block from 8213F680h-8213F684h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213F684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F684);
		  /* 8213F684h */ case    0:  		/* li R3, 0 */
		/* 8213F684h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213F684h case    0:*/		return 0x8213F688;
		  /* 8213F688h */ case    1:  		/* b 12 */
		/* 8213F688h case    1:*/		return 0x8213F694;
		/* 8213F688h case    1:*/		return 0x8213F68C;
	}
	return 0x8213F68C;
} // Block from 8213F684h-8213F68Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F68C);
		  /* 8213F68Ch */ case    0:  		/* lis R3, -32768 */
		/* 8213F68Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8213F68Ch case    0:*/		return 0x8213F690;
		  /* 8213F690h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8213F690h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8213F690h case    1:*/		return 0x8213F694;
	}
	return 0x8213F694;
} // Block from 8213F68Ch-8213F694h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F694);
		  /* 8213F694h */ case    0:  		/* addi R1, R1, 144 */
		/* 8213F694h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8213F694h case    0:*/		return 0x8213F698;
		  /* 8213F698h */ case    1:  		/* b -713720 */
		/* 8213F698h case    1:*/		return 0x820912A0;
		/* 8213F698h case    1:*/		return 0x8213F69C;
		  /* 8213F69Ch */ case    2:  		/* nop */
		/* 8213F69Ch case    2:*/		cpu::op::nop();
		/* 8213F69Ch case    2:*/		return 0x8213F6A0;
	}
	return 0x8213F6A0;
} // Block from 8213F694h-8213F6A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F6A0);
		  /* 8213F6A0h */ case    0:  		/* mfspr R12, LR */
		/* 8213F6A0h case    0:*/		regs.R12 = regs.LR;
		/* 8213F6A0h case    0:*/		return 0x8213F6A4;
		  /* 8213F6A4h */ case    1:  		/* bl -713804 */
		/* 8213F6A4h case    1:*/		regs.LR = 0x8213F6A8; return 0x82091258;
		/* 8213F6A4h case    1:*/		return 0x8213F6A8;
		  /* 8213F6A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8213F6A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8213F6A8h case    2:*/		return 0x8213F6AC;
		  /* 8213F6ACh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8213F6ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8213F6ACh case    3:*/		return 0x8213F6B0;
		  /* 8213F6B0h */ case    4:  		/* mr R30, R4 */
		/* 8213F6B0h case    4:*/		regs.R30 = regs.R4;
		/* 8213F6B0h case    4:*/		return 0x8213F6B4;
		  /* 8213F6B4h */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8213F6B4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8213F6B4h case    5:*/		return 0x8213F6B8;
		  /* 8213F6B8h */ case    6:  		/* mr R31, R3 */
		/* 8213F6B8h case    6:*/		regs.R31 = regs.R3;
		/* 8213F6B8h case    6:*/		return 0x8213F6BC;
		  /* 8213F6BCh */ case    7:  		/* mr R29, R5 */
		/* 8213F6BCh case    7:*/		regs.R29 = regs.R5;
		/* 8213F6BCh case    7:*/		return 0x8213F6C0;
		  /* 8213F6C0h */ case    8:  		/* mr R28, R6 */
		/* 8213F6C0h case    8:*/		regs.R28 = regs.R6;
		/* 8213F6C0h case    8:*/		return 0x8213F6C4;
		  /* 8213F6C4h */ case    9:  		/* lwz R11, <#[R11 + 112]> */
		/* 8213F6C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 8213F6C4h case    9:*/		return 0x8213F6C8;
		  /* 8213F6C8h */ case   10:  		/* mtspr CTR, R11 */
		/* 8213F6C8h case   10:*/		regs.CTR = regs.R11;
		/* 8213F6C8h case   10:*/		return 0x8213F6CC;
		  /* 8213F6CCh */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8213F6CCh case   11:*/		if ( 1 ) { regs.LR = 0x8213F6D0; return (uint32)regs.CTR; }
		/* 8213F6CCh case   11:*/		return 0x8213F6D0;
		  /* 8213F6D0h */ case   12:  		/* cmplwi CR6, R3, 65535 */
		/* 8213F6D0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 8213F6D0h case   12:*/		return 0x8213F6D4;
		  /* 8213F6D4h */ case   13:  		/* bc 4, CR6_EQ, 44 */
		/* 8213F6D4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8213F700;  }
		/* 8213F6D4h case   13:*/		return 0x8213F6D8;
		  /* 8213F6D8h */ case   14:  		/* li R11, 0 */
		/* 8213F6D8h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213F6D8h case   14:*/		return 0x8213F6DC;
		  /* 8213F6DCh */ case   15:  		/* mr R3, R31 */
		/* 8213F6DCh case   15:*/		regs.R3 = regs.R31;
		/* 8213F6DCh case   15:*/		return 0x8213F6E0;
		  /* 8213F6E0h */ case   16:  		/* stw R11, <#[R28]> */
		/* 8213F6E0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F6E0h case   16:*/		return 0x8213F6E4;
		  /* 8213F6E4h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8213F6E4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8213F6E4h case   17:*/		return 0x8213F6E8;
		  /* 8213F6E8h */ case   18:  		/* lwz R11, <#[R11 + 116]> */
		/* 8213F6E8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 8213F6E8h case   18:*/		return 0x8213F6EC;
		  /* 8213F6ECh */ case   19:  		/* lwz R4, <#[R30 + 108]> */
		/* 8213F6ECh case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 8213F6ECh case   19:*/		return 0x8213F6F0;
	}
	return 0x8213F6F0;
} // Block from 8213F6A0h-8213F6F0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213F6F0h
// Function '?IndexSemantic@CPSLegacyProgram@D3DXShader@@UAAJPAVCArgument@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F6F0);
		  /* 8213F6F0h */ case    0:  		/* mtspr CTR, R11 */
		/* 8213F6F0h case    0:*/		regs.CTR = regs.R11;
		/* 8213F6F0h case    0:*/		return 0x8213F6F4;
		  /* 8213F6F4h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8213F6F4h case    1:*/		if ( 1 ) { regs.LR = 0x8213F6F8; return (uint32)regs.CTR; }
		/* 8213F6F4h case    1:*/		return 0x8213F6F8;
		  /* 8213F6F8h */ case    2:  		/* stw R3, <#[R29]> */
		/* 8213F6F8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8213F6F8h case    2:*/		return 0x8213F6FC;
		  /* 8213F6FCh */ case    3:  		/* b 20 */
		/* 8213F6FCh case    3:*/		return 0x8213F710;
		/* 8213F6FCh case    3:*/		return 0x8213F700;
	}
	return 0x8213F700;
} // Block from 8213F6F0h-8213F700h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213F700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F700);
		  /* 8213F700h */ case    0:  		/* li R11, 1 */
		/* 8213F700h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213F700h case    0:*/		return 0x8213F704;
		  /* 8213F704h */ case    1:  		/* stw R11, <#[R28]> */
		/* 8213F704h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213F704h case    1:*/		return 0x8213F708;
		  /* 8213F708h */ case    2:  		/* lwz R11, <#[R30 + 12]> */
		/* 8213F708h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8213F708h case    2:*/		return 0x8213F70C;
		  /* 8213F70Ch */ case    3:  		/* stw R11, <#[R29]> */
		/* 8213F70Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8213F70Ch case    3:*/		return 0x8213F710;
	}
	return 0x8213F710;
} // Block from 8213F700h-8213F710h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213F710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F710);
		  /* 8213F710h */ case    0:  		/* li R3, 0 */
		/* 8213F710h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213F710h case    0:*/		return 0x8213F714;
		  /* 8213F714h */ case    1:  		/* addi R1, R1, 128 */
		/* 8213F714h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8213F714h case    1:*/		return 0x8213F718;
		  /* 8213F718h */ case    2:  		/* b -713840 */
		/* 8213F718h case    2:*/		return 0x820912A8;
		/* 8213F718h case    2:*/		return 0x8213F71C;
		  /* 8213F71Ch */ case    3:  		/* nop */
		/* 8213F71Ch case    3:*/		cpu::op::nop();
		/* 8213F71Ch case    3:*/		return 0x8213F720;
	}
	return 0x8213F720;
} // Block from 8213F710h-8213F720h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213F720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F720);
		  /* 8213F720h */ case    0:  		/* lhz R11, <#[R3 + 202]> */
		/* 8213F720h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213F720h case    0:*/		return 0x8213F724;
		  /* 8213F724h */ case    1:  		/* cmplwi CR6, R11, 256 */
		/* 8213F724h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 8213F724h case    1:*/		return 0x8213F728;
		  /* 8213F728h */ case    2:  		/* li R11, 0 */
		/* 8213F728h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8213F728h case    2:*/		return 0x8213F72C;
		  /* 8213F72Ch */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 8213F72Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213F734;  }
		/* 8213F72Ch case    3:*/		return 0x8213F730;
		  /* 8213F730h */ case    4:  		/* li R11, 1 */
		/* 8213F730h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8213F730h case    4:*/		return 0x8213F734;
	}
	return 0x8213F734;
} // Block from 8213F720h-8213F734h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213F734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F734);
		  /* 8213F734h */ case    0:  		/* stw R11, <#[R3 + 344]> */
		/* 8213F734h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000158) );
		/* 8213F734h case    0:*/		return 0x8213F738;
		  /* 8213F738h */ case    1:  		/* b -305936 */
		/* 8213F738h case    1:*/		return 0x820F4C28;
		/* 8213F738h case    1:*/		return 0x8213F73C;
		  /* 8213F73Ch */ case    2:  		/* nop */
		/* 8213F73Ch case    2:*/		cpu::op::nop();
		/* 8213F73Ch case    2:*/		return 0x8213F740;
	}
	return 0x8213F740;
} // Block from 8213F734h-8213F740h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F740);
		  /* 8213F740h */ case    0:  		/* mfspr R12, LR */
		/* 8213F740h case    0:*/		regs.R12 = regs.LR;
		/* 8213F740h case    0:*/		return 0x8213F744;
		  /* 8213F744h */ case    1:  		/* bl -714000 */
		/* 8213F744h case    1:*/		regs.LR = 0x8213F748; return 0x82091234;
		/* 8213F744h case    1:*/		return 0x8213F748;
		  /* 8213F748h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8213F748h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8213F748h case    2:*/		return 0x8213F74C;
		  /* 8213F74Ch */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8213F74Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8213F74Ch case    3:*/		return 0x8213F750;
		  /* 8213F750h */ case    4:  		/* mr R31, R3 */
		/* 8213F750h case    4:*/		regs.R31 = regs.R3;
		/* 8213F750h case    4:*/		return 0x8213F754;
		  /* 8213F754h */ case    5:  		/* lis R21, 4416 */
		/* 8213F754h case    5:*/		cpu::op::lis<0>(regs,&regs.R21,0x1140);
		/* 8213F754h case    5:*/		return 0x8213F758;
		  /* 8213F758h */ case    6:  		/* li R30, 0 */
		/* 8213F758h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213F758h case    6:*/		return 0x8213F75C;
		  /* 8213F75Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8213F75Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F75Ch case    7:*/		return 0x8213F760;
		  /* 8213F760h */ case    8:  		/* bc 4, CR6_GT, 124 */
		/* 8213F760h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8213F7DC;  }
		/* 8213F760h case    8:*/		return 0x8213F764;
		  /* 8213F764h */ case    9:  		/* li R29, 0 */
		/* 8213F764h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213F764h case    9:*/		return 0x8213F768;
		  /* 8213F768h */ case   10:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213F768h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213F768h case   10:*/		return 0x8213F76C;
		  /* 8213F76Ch */ case   11:  		/* lis R9, 4160 */
		/* 8213F76Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x1040);
		/* 8213F76Ch case   11:*/		return 0x8213F770;
		  /* 8213F770h */ case   12:  		/* stw R30, <#[R31 + 256]> */
		/* 8213F770h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213F770h case   12:*/		return 0x8213F774;
		  /* 8213F774h */ case   13:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213F774h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213F774h case   13:*/		return 0x8213F778;
		  /* 8213F778h */ case   14:  		/* stw R11, <#[R31 + 260]> */
		/* 8213F778h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213F778h case   14:*/		return 0x8213F77C;
		  /* 8213F77Ch */ case   15:  		/* lwz R10, <#[R11]> */
		/* 8213F77Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213F77Ch case   15:*/		return 0x8213F780;
		  /* 8213F780h */ case   16:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213F780h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213F780h case   16:*/		return 0x8213F784;
		  /* 8213F784h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 8213F784h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8213F784h case   17:*/		return 0x8213F788;
		  /* 8213F788h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 8213F788h case   18:*/		if ( regs.CR[6].eq ) { return 0x8213F7A0;  }
		/* 8213F788h case   18:*/		return 0x8213F78C;
		  /* 8213F78Ch */ case   19:  		/* cmplw CR6, R10, R21 */
		/* 8213F78Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8213F78Ch case   19:*/		return 0x8213F790;
		  /* 8213F790h */ case   20:  		/* bc 4, CR6_EQ, 56 */
		/* 8213F790h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8213F7C8;  }
		/* 8213F790h case   20:*/		return 0x8213F794;
		  /* 8213F794h */ case   21:  		/* mr R3, R31 */
		/* 8213F794h case   21:*/		regs.R3 = regs.R31;
		/* 8213F794h case   21:*/		return 0x8213F798;
		  /* 8213F798h */ case   22:  		/* bl -360968 */
		/* 8213F798h case   22:*/		regs.LR = 0x8213F79C; return 0x820E7590;
		/* 8213F798h case   22:*/		return 0x8213F79C;
		  /* 8213F79Ch */ case   23:  		/* b 36 */
		/* 8213F79Ch case   23:*/		return 0x8213F7C0;
		/* 8213F79Ch case   23:*/		return 0x8213F7A0;
	}
	return 0x8213F7A0;
} // Block from 8213F740h-8213F7A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213F7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F7A0);
		  /* 8213F7A0h */ case    0:  		/* lwz R10, <#[R31 + 112]> */
		/* 8213F7A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 8213F7A0h case    0:*/		return 0x8213F7A4;
		  /* 8213F7A4h */ case    1:  		/* rlwinm. R10, R10, 0, 14, 14 */
		/* 8213F7A4h case    1:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R10,regs.R10);
		/* 8213F7A4h case    1:*/		return 0x8213F7A8;
		  /* 8213F7A8h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8213F7A8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8213F7BC;  }
		/* 8213F7A8h case    2:*/		return 0x8213F7AC;
		  /* 8213F7ACh */ case    3:  		/* lwz R10, <#[R11 + 12]> */
		/* 8213F7ACh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8213F7ACh case    3:*/		return 0x8213F7B0;
		  /* 8213F7B0h */ case    4:  		/* li R9, 113 */
		/* 8213F7B0h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x71);
		/* 8213F7B0h case    4:*/		return 0x8213F7B4;
		  /* 8213F7B4h */ case    5:  		/* rlwimi R10, R9, 24, 0, 11 */
		/* 8213F7B4h case    5:*/		cpu::op::rlwimi<0,24,0,11>(regs,&regs.R10,regs.R9);
		/* 8213F7B4h case    5:*/		return 0x8213F7B8;
		  /* 8213F7B8h */ case    6:  		/* stw R10, <#[R11]> */
		/* 8213F7B8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8213F7B8h case    6:*/		return 0x8213F7BC;
	}
	return 0x8213F7BC;
} // Block from 8213F7A0h-8213F7BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F7BC);
		  /* 8213F7BCh */ case    0:  		/* li R3, 0 */
		/* 8213F7BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213F7BCh case    0:*/		return 0x8213F7C0;
	}
	return 0x8213F7C0;
} // Block from 8213F7BCh-8213F7C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213F7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F7C0);
		  /* 8213F7C0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213F7C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213F7C0h case    0:*/		return 0x8213F7C4;
		  /* 8213F7C4h */ case    1:  		/* bc 12, CR6_LT, 1724 */
		/* 8213F7C4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213F7C4h case    1:*/		return 0x8213F7C8;
	}
	return 0x8213F7C8;
} // Block from 8213F7C0h-8213F7C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F7C8);
		  /* 8213F7C8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213F7C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213F7C8h case    0:*/		return 0x8213F7CC;
		  /* 8213F7CCh */ case    1:  		/* addi R30, R30, 1 */
		/* 8213F7CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213F7CCh case    1:*/		return 0x8213F7D0;
		  /* 8213F7D0h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213F7D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213F7D0h case    2:*/		return 0x8213F7D4;
		  /* 8213F7D4h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213F7D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213F7D4h case    3:*/		return 0x8213F7D8;
		  /* 8213F7D8h */ case    4:  		/* bc 12, CR6_LT, -112 */
		/* 8213F7D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213F768;  }
		/* 8213F7D8h case    4:*/		return 0x8213F7DC;
	}
	return 0x8213F7DC;
} // Block from 8213F7C8h-8213F7DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213F7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F7DC);
		  /* 8213F7DCh */ case    0:  		/* lwz R11, <#[R31 + 204]> */
		/* 8213F7DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 8213F7DCh case    0:*/		return 0x8213F7E0;
		  /* 8213F7E0h */ case    1:  		/* lis R19, 4176 */
		/* 8213F7E0h case    1:*/		cpu::op::lis<0>(regs,&regs.R19,0x1050);
		/* 8213F7E0h case    1:*/		return 0x8213F7E4;
		  /* 8213F7E4h */ case    2:  		/* lis R20, 28720 */
		/* 8213F7E4h case    2:*/		cpu::op::lis<0>(regs,&regs.R20,0x7030);
		/* 8213F7E4h case    2:*/		return 0x8213F7E8;
		  /* 8213F7E8h */ case    3:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8213F7E8h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8213F7E8h case    3:*/		return 0x8213F7EC;
		  /* 8213F7ECh */ case    4:  		/* lis R24, 29792 */
		/* 8213F7ECh case    4:*/		cpu::op::lis<0>(regs,&regs.R24,0x7460);
		/* 8213F7ECh case    4:*/		return 0x8213F7F0;
		  /* 8213F7F0h */ case    5:  		/* lis R23, 29808 */
		/* 8213F7F0h case    5:*/		cpu::op::lis<0>(regs,&regs.R23,0x7470);
		/* 8213F7F0h case    5:*/		return 0x8213F7F4;
		  /* 8213F7F4h */ case    6:  		/* lis R25, 29760 */
		/* 8213F7F4h case    6:*/		cpu::op::lis<0>(regs,&regs.R25,0x7440);
		/* 8213F7F4h case    6:*/		return 0x8213F7F8;
		  /* 8213F7F8h */ case    7:  		/* lis R22, 29776 */
		/* 8213F7F8h case    7:*/		cpu::op::lis<0>(regs,&regs.R22,0x7450);
		/* 8213F7F8h case    7:*/		return 0x8213F7FC;
		  /* 8213F7FCh */ case    8:  		/* bc 4, CR0_EQ, 792 */
		/* 8213F7FCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8213FB14;  }
		/* 8213F7FCh case    8:*/		return 0x8213F800;
		  /* 8213F800h */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213F800h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213F800h case    9:*/		return 0x8213F804;
		  /* 8213F804h */ case   10:  		/* li R30, 0 */
		/* 8213F804h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213F804h case   10:*/		return 0x8213F808;
		  /* 8213F808h */ case   11:  		/* lis R28, 8272 */
		/* 8213F808h case   11:*/		cpu::op::lis<0>(regs,&regs.R28,0x2050);
		/* 8213F808h case   11:*/		return 0x8213F80C;
		  /* 8213F80Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8213F80Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F80Ch case   12:*/		return 0x8213F810;
		  /* 8213F810h */ case   13:  		/* bc 4, CR6_GT, 252 */
		/* 8213F810h case   13:*/		if ( !regs.CR[6].gt ) { return 0x8213F90C;  }
		/* 8213F810h case   13:*/		return 0x8213F814;
		  /* 8213F814h */ case   14:  		/* li R29, 0 */
		/* 8213F814h case   14:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213F814h case   14:*/		return 0x8213F818;
		  /* 8213F818h */ case   15:  		/* stw R30, <#[R31 + 256]> */
		/* 8213F818h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213F818h case   15:*/		return 0x8213F81C;
		  /* 8213F81Ch */ case   16:  		/* lis R10, 4112 */
		/* 8213F81Ch case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 8213F81Ch case   16:*/		return 0x8213F820;
		  /* 8213F820h */ case   17:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213F820h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213F820h case   17:*/		return 0x8213F824;
		  /* 8213F824h */ case   18:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213F824h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213F824h case   18:*/		return 0x8213F828;
		  /* 8213F828h */ case   19:  		/* stw R11, <#[R31 + 260]> */
		/* 8213F828h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213F828h case   19:*/		return 0x8213F82C;
		  /* 8213F82Ch */ case   20:  		/* lwz R11, <#[R11]> */
		/* 8213F82Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213F82Ch case   20:*/		return 0x8213F830;
		  /* 8213F830h */ case   21:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213F830h case   21:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213F830h case   21:*/		return 0x8213F834;
		  /* 8213F834h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8213F834h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213F834h case   22:*/		return 0x8213F838;
		  /* 8213F838h */ case   23:  		/* bc 12, CR6_EQ, 172 */
		/* 8213F838h case   23:*/		if ( regs.CR[6].eq ) { return 0x8213F8E4;  }
		/* 8213F838h case   23:*/		return 0x8213F83C;
		  /* 8213F83Ch */ case   24:  		/* cmplw CR6, R11, R19 */
		/* 8213F83Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8213F83Ch case   24:*/		return 0x8213F840;
		  /* 8213F840h */ case   25:  		/* bc 12, CR6_EQ, 132 */
		/* 8213F840h case   25:*/		if ( regs.CR[6].eq ) { return 0x8213F8C4;  }
		/* 8213F840h case   25:*/		return 0x8213F844;
		  /* 8213F844h */ case   26:  		/* lis R10, 4336 */
		/* 8213F844h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x10F0);
		/* 8213F844h case   26:*/		return 0x8213F848;
		  /* 8213F848h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 8213F848h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213F848h case   27:*/		return 0x8213F84C;
		  /* 8213F84Ch */ case   28:  		/* bc 12, CR6_EQ, 108 */
		/* 8213F84Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x8213F8B8;  }
		/* 8213F84Ch case   28:*/		return 0x8213F850;
		  /* 8213F850h */ case   29:  		/* cmplw CR6, R11, R21 */
		/* 8213F850h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8213F850h case   29:*/		return 0x8213F854;
		  /* 8213F854h */ case   30:  		/* bc 12, CR6_EQ, 88 */
		/* 8213F854h case   30:*/		if ( regs.CR[6].eq ) { return 0x8213F8AC;  }
		/* 8213F854h case   30:*/		return 0x8213F858;
		  /* 8213F858h */ case   31:  		/* lis R10, 8208 */
		/* 8213F858h case   31:*/		cpu::op::lis<0>(regs,&regs.R10,0x2010);
		/* 8213F858h case   31:*/		return 0x8213F85C;
		  /* 8213F85Ch */ case   32:  		/* cmplw CR6, R11, R10 */
		/* 8213F85Ch case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213F85Ch case   32:*/		return 0x8213F860;
		  /* 8213F860h */ case   33:  		/* bc 12, CR6_EQ, 52 */
		/* 8213F860h case   33:*/		if ( regs.CR[6].eq ) { return 0x8213F894;  }
		/* 8213F860h case   33:*/		return 0x8213F864;
		  /* 8213F864h */ case   34:  		/* lis R10, 8256 */
		/* 8213F864h case   34:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 8213F864h case   34:*/		return 0x8213F868;
		  /* 8213F868h */ case   35:  		/* cmplw CR6, R11, R10 */
		/* 8213F868h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213F868h case   35:*/		return 0x8213F86C;
		  /* 8213F86Ch */ case   36:  		/* bc 12, CR6_EQ, 24 */
		/* 8213F86Ch case   36:*/		if ( regs.CR[6].eq ) { return 0x8213F884;  }
		/* 8213F86Ch case   36:*/		return 0x8213F870;
		  /* 8213F870h */ case   37:  		/* cmplw CR6, R11, R28 */
		/* 8213F870h case   37:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213F870h case   37:*/		return 0x8213F874;
		  /* 8213F874h */ case   38:  		/* bc 4, CR6_EQ, 132 */
		/* 8213F874h case   38:*/		if ( !regs.CR[6].eq ) { return 0x8213F8F8;  }
		/* 8213F874h case   38:*/		return 0x8213F878;
		  /* 8213F878h */ case   39:  		/* mr R3, R31 */
		/* 8213F878h case   39:*/		regs.R3 = regs.R31;
		/* 8213F878h case   39:*/		return 0x8213F87C;
		  /* 8213F87Ch */ case   40:  		/* bl -354300 */
		/* 8213F87Ch case   40:*/		regs.LR = 0x8213F880; return 0x820E9080;
		/* 8213F87Ch case   40:*/		return 0x8213F880;
		  /* 8213F880h */ case   41:  		/* b 112 */
		/* 8213F880h case   41:*/		return 0x8213F8F0;
		/* 8213F880h case   41:*/		return 0x8213F884;
	}
	return 0x8213F884;
} // Block from 8213F7DCh-8213F884h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8213F884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F884);
		  /* 8213F884h */ case    0:  		/* li R4, 1 */
		/* 8213F884h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8213F884h case    0:*/		return 0x8213F888;
		  /* 8213F888h */ case    1:  		/* mr R3, R31 */
		/* 8213F888h case    1:*/		regs.R3 = regs.R31;
		/* 8213F888h case    1:*/		return 0x8213F88C;
		  /* 8213F88Ch */ case    2:  		/* bl -325404 */
		/* 8213F88Ch case    2:*/		regs.LR = 0x8213F890; return 0x820F0170;
		/* 8213F88Ch case    2:*/		return 0x8213F890;
		  /* 8213F890h */ case    3:  		/* b 96 */
		/* 8213F890h case    3:*/		return 0x8213F8F0;
		/* 8213F890h case    3:*/		return 0x8213F894;
	}
	return 0x8213F894;
} // Block from 8213F884h-8213F894h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213F894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F894);
		  /* 8213F894h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213F894h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213F894h case    0:*/		return 0x8213F898;
		  /* 8213F898h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8213F898h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213F898h case    1:*/		return 0x8213F89C;
		  /* 8213F89Ch */ case    2:  		/* bc 12, CR6_LT, 64 */
		/* 8213F89Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8213F8DC;  }
		/* 8213F89Ch case    2:*/		return 0x8213F8A0;
		  /* 8213F8A0h */ case    3:  		/* mr R3, R31 */
		/* 8213F8A0h case    3:*/		regs.R3 = regs.R31;
		/* 8213F8A0h case    3:*/		return 0x8213F8A4;
		  /* 8213F8A4h */ case    4:  		/* bl -351220 */
		/* 8213F8A4h case    4:*/		regs.LR = 0x8213F8A8; return 0x820E9CB0;
		/* 8213F8A4h case    4:*/		return 0x8213F8A8;
		  /* 8213F8A8h */ case    5:  		/* b 72 */
		/* 8213F8A8h case    5:*/		return 0x8213F8F0;
		/* 8213F8A8h case    5:*/		return 0x8213F8AC;
	}
	return 0x8213F8AC;
} // Block from 8213F894h-8213F8ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8AC);
		  /* 8213F8ACh */ case    0:  		/* mr R3, R31 */
		/* 8213F8ACh case    0:*/		regs.R3 = regs.R31;
		/* 8213F8ACh case    0:*/		return 0x8213F8B0;
		  /* 8213F8B0h */ case    1:  		/* bl -361248 */
		/* 8213F8B0h case    1:*/		regs.LR = 0x8213F8B4; return 0x820E7590;
		/* 8213F8B0h case    1:*/		return 0x8213F8B4;
		  /* 8213F8B4h */ case    2:  		/* b 60 */
		/* 8213F8B4h case    2:*/		return 0x8213F8F0;
		/* 8213F8B4h case    2:*/		return 0x8213F8B8;
	}
	return 0x8213F8B8;
} // Block from 8213F8ACh-8213F8B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8B8);
		  /* 8213F8B8h */ case    0:  		/* mr R3, R31 */
		/* 8213F8B8h case    0:*/		regs.R3 = regs.R31;
		/* 8213F8B8h case    0:*/		return 0x8213F8BC;
		  /* 8213F8BCh */ case    1:  		/* bl -364756 */
		/* 8213F8BCh case    1:*/		regs.LR = 0x8213F8C0; return 0x820E67E8;
		/* 8213F8BCh case    1:*/		return 0x8213F8C0;
		  /* 8213F8C0h */ case    2:  		/* b 48 */
		/* 8213F8C0h case    2:*/		return 0x8213F8F0;
		/* 8213F8C0h case    2:*/		return 0x8213F8C4;
	}
	return 0x8213F8C4;
} // Block from 8213F8B8h-8213F8C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8C4);
		  /* 8213F8C4h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213F8C4h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213F8C4h case    0:*/		return 0x8213F8C8;
		  /* 8213F8C8h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8213F8C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213F8C8h case    1:*/		return 0x8213F8CC;
		  /* 8213F8CCh */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 8213F8CCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8213F8DC;  }
		/* 8213F8CCh case    2:*/		return 0x8213F8D0;
		  /* 8213F8D0h */ case    3:  		/* mr R3, R31 */
		/* 8213F8D0h case    3:*/		regs.R3 = regs.R31;
		/* 8213F8D0h case    3:*/		return 0x8213F8D4;
		  /* 8213F8D4h */ case    4:  		/* bl -369236 */
		/* 8213F8D4h case    4:*/		regs.LR = 0x8213F8D8; return 0x820E5680;
		/* 8213F8D4h case    4:*/		return 0x8213F8D8;
		  /* 8213F8D8h */ case    5:  		/* b 24 */
		/* 8213F8D8h case    5:*/		return 0x8213F8F0;
		/* 8213F8D8h case    5:*/		return 0x8213F8DC;
	}
	return 0x8213F8DC;
} // Block from 8213F8C4h-8213F8DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8DC);
		  /* 8213F8DCh */ case    0:  		/* li R3, 1 */
		/* 8213F8DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213F8DCh case    0:*/		return 0x8213F8E0;
		  /* 8213F8E0h */ case    1:  		/* b 16 */
		/* 8213F8E0h case    1:*/		return 0x8213F8F0;
		/* 8213F8E0h case    1:*/		return 0x8213F8E4;
	}
	return 0x8213F8E4;
} // Block from 8213F8DCh-8213F8E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8E4);
		  /* 8213F8E4h */ case    0:  		/* li R4, 1 */
		/* 8213F8E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8213F8E4h case    0:*/		return 0x8213F8E8;
		  /* 8213F8E8h */ case    1:  		/* mr R3, R31 */
		/* 8213F8E8h case    1:*/		regs.R3 = regs.R31;
		/* 8213F8E8h case    1:*/		return 0x8213F8EC;
		  /* 8213F8ECh */ case    2:  		/* bl -315620 */
		/* 8213F8ECh case    2:*/		regs.LR = 0x8213F8F0; return 0x820F2808;
		/* 8213F8ECh case    2:*/		return 0x8213F8F0;
	}
	return 0x8213F8F0;
} // Block from 8213F8E4h-8213F8F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8F0);
		  /* 8213F8F0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213F8F0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213F8F0h case    0:*/		return 0x8213F8F4;
		  /* 8213F8F4h */ case    1:  		/* bc 12, CR6_LT, 1420 */
		/* 8213F8F4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213F8F4h case    1:*/		return 0x8213F8F8;
	}
	return 0x8213F8F8;
} // Block from 8213F8F0h-8213F8F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213F8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F8F8);
		  /* 8213F8F8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213F8F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213F8F8h case    0:*/		return 0x8213F8FC;
		  /* 8213F8FCh */ case    1:  		/* addi R30, R30, 1 */
		/* 8213F8FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213F8FCh case    1:*/		return 0x8213F900;
		  /* 8213F900h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213F900h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213F900h case    2:*/		return 0x8213F904;
		  /* 8213F904h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213F904h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213F904h case    3:*/		return 0x8213F908;
		  /* 8213F908h */ case    4:  		/* bc 12, CR6_LT, -240 */
		/* 8213F908h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213F818;  }
		/* 8213F908h case    4:*/		return 0x8213F90C;
	}
	return 0x8213F90C;
} // Block from 8213F8F8h-8213F90Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213F90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F90C);
		  /* 8213F90Ch */ case    0:  		/* mr R3, R31 */
		/* 8213F90Ch case    0:*/		regs.R3 = regs.R31;
		/* 8213F90Ch case    0:*/		return 0x8213F910;
		  /* 8213F910h */ case    1:  		/* bl -231592 */
		/* 8213F910h case    1:*/		regs.LR = 0x8213F914; return 0x82107068;
		/* 8213F910h case    1:*/		return 0x8213F914;
		  /* 8213F914h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213F914h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213F914h case    2:*/		return 0x8213F918;
		  /* 8213F918h */ case    3:  		/* bc 12, CR0_LT, 1384 */
		/* 8213F918h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213F918h case    3:*/		return 0x8213F91C;
		  /* 8213F91Ch */ case    4:  		/* mr R3, R31 */
		/* 8213F91Ch case    4:*/		regs.R3 = regs.R31;
		/* 8213F91Ch case    4:*/		return 0x8213F920;
		  /* 8213F920h */ case    5:  		/* bl -373056 */
		/* 8213F920h case    5:*/		regs.LR = 0x8213F924; return 0x820E47E0;
		/* 8213F920h case    5:*/		return 0x8213F924;
		  /* 8213F924h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213F924h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213F924h case    6:*/		return 0x8213F928;
		  /* 8213F928h */ case    7:  		/* li R30, 0 */
		/* 8213F928h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213F928h case    7:*/		return 0x8213F92C;
		  /* 8213F92Ch */ case    8:  		/* lis R26, 29520 */
		/* 8213F92Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R26,0x7350);
		/* 8213F92Ch case    8:*/		return 0x8213F930;
		  /* 8213F930h */ case    9:  		/* lis R27, 29536 */
		/* 8213F930h case    9:*/		cpu::op::lis<0>(regs,&regs.R27,0x7360);
		/* 8213F930h case    9:*/		return 0x8213F934;
		  /* 8213F934h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8213F934h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213F934h case   10:*/		return 0x8213F938;
		  /* 8213F938h */ case   11:  		/* bc 4, CR6_GT, 220 */
		/* 8213F938h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8213FA14;  }
		/* 8213F938h case   11:*/		return 0x8213F93C;
		  /* 8213F93Ch */ case   12:  		/* li R29, 0 */
		/* 8213F93Ch case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213F93Ch case   12:*/		return 0x8213F940;
		  /* 8213F940h */ case   13:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213F940h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213F940h case   13:*/		return 0x8213F944;
		  /* 8213F944h */ case   14:  		/* stw R30, <#[R31 + 256]> */
		/* 8213F944h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213F944h case   14:*/		return 0x8213F948;
		  /* 8213F948h */ case   15:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213F948h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213F948h case   15:*/		return 0x8213F94C;
		  /* 8213F94Ch */ case   16:  		/* stw R11, <#[R31 + 260]> */
		/* 8213F94Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213F94Ch case   16:*/		return 0x8213F950;
		  /* 8213F950h */ case   17:  		/* lwz R11, <#[R11]> */
		/* 8213F950h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213F950h case   17:*/		return 0x8213F954;
		  /* 8213F954h */ case   18:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213F954h case   18:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213F954h case   18:*/		return 0x8213F958;
		  /* 8213F958h */ case   19:  		/* cmplw CR6, R11, R28 */
		/* 8213F958h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213F958h case   19:*/		return 0x8213F95C;
		  /* 8213F95Ch */ case   20:  		/* bc 12, CR6_EQ, 128 */
		/* 8213F95Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x8213F9DC;  }
		/* 8213F95Ch case   20:*/		return 0x8213F960;
		  /* 8213F960h */ case   21:  		/* cmplw CR6, R11, R20 */
		/* 8213F960h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8213F960h case   21:*/		return 0x8213F964;
		  /* 8213F964h */ case   22:  		/* bc 12, CR6_EQ, 92 */
		/* 8213F964h case   22:*/		if ( regs.CR[6].eq ) { return 0x8213F9C0;  }
		/* 8213F964h case   22:*/		return 0x8213F968;
		  /* 8213F968h */ case   23:  		/* cmplw CR6, R11, R26 */
		/* 8213F968h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8213F968h case   23:*/		return 0x8213F96C;
		  /* 8213F96Ch */ case   24:  		/* bc 12, CR6_EQ, 56 */
		/* 8213F96Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x8213F9A4;  }
		/* 8213F96Ch case   24:*/		return 0x8213F970;
		  /* 8213F970h */ case   25:  		/* cmplw CR6, R11, R27 */
		/* 8213F970h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213F970h case   25:*/		return 0x8213F974;
		  /* 8213F974h */ case   26:  		/* bc 12, CR6_EQ, 48 */
		/* 8213F974h case   26:*/		if ( regs.CR[6].eq ) { return 0x8213F9A4;  }
		/* 8213F974h case   26:*/		return 0x8213F978;
		  /* 8213F978h */ case   27:  		/* cmplw CR6, R11, R24 */
		/* 8213F978h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8213F978h case   27:*/		return 0x8213F97C;
		  /* 8213F97Ch */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 8213F97Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x8213F988;  }
		/* 8213F97Ch case   28:*/		return 0x8213F980;
		  /* 8213F980h */ case   29:  		/* cmplw CR6, R11, R23 */
		/* 8213F980h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213F980h case   29:*/		return 0x8213F984;
		  /* 8213F984h */ case   30:  		/* bc 4, CR6_EQ, 124 */
		/* 8213F984h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8213FA00;  }
		/* 8213F984h case   30:*/		return 0x8213F988;
	}
	return 0x8213F988;
} // Block from 8213F90Ch-8213F988h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8213F988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F988);
		  /* 8213F988h */ case    0:  		/* mr R3, R31 */
		/* 8213F988h case    0:*/		regs.R3 = regs.R31;
		/* 8213F988h case    0:*/		return 0x8213F98C;
		  /* 8213F98Ch */ case    1:  		/* bl -356060 */
		/* 8213F98Ch case    1:*/		regs.LR = 0x8213F990; return 0x820E8AB0;
		/* 8213F98Ch case    1:*/		return 0x8213F990;
		  /* 8213F990h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213F990h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213F990h case    2:*/		return 0x8213F994;
		  /* 8213F994h */ case    3:  		/* bc 12, CR0_LT, 1260 */
		/* 8213F994h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213F994h case    3:*/		return 0x8213F998;
		  /* 8213F998h */ case    4:  		/* mr R3, R31 */
		/* 8213F998h case    4:*/		regs.R3 = regs.R31;
		/* 8213F998h case    4:*/		return 0x8213F99C;
		  /* 8213F99Ch */ case    5:  		/* bl -355660 */
		/* 8213F99Ch case    5:*/		regs.LR = 0x8213F9A0; return 0x820E8C50;
		/* 8213F99Ch case    5:*/		return 0x8213F9A0;
		  /* 8213F9A0h */ case    6:  		/* b 88 */
		/* 8213F9A0h case    6:*/		return 0x8213F9F8;
		/* 8213F9A0h case    6:*/		return 0x8213F9A4;
	}
	return 0x8213F9A4;
} // Block from 8213F988h-8213F9A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F9A4);
		  /* 8213F9A4h */ case    0:  		/* mr R3, R31 */
		/* 8213F9A4h case    0:*/		regs.R3 = regs.R31;
		/* 8213F9A4h case    0:*/		return 0x8213F9A8;
		  /* 8213F9A8h */ case    1:  		/* bl -362984 */
		/* 8213F9A8h case    1:*/		regs.LR = 0x8213F9AC; return 0x820E6FC0;
		/* 8213F9A8h case    1:*/		return 0x8213F9AC;
		  /* 8213F9ACh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213F9ACh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213F9ACh case    2:*/		return 0x8213F9B0;
		  /* 8213F9B0h */ case    3:  		/* bc 12, CR0_LT, 1232 */
		/* 8213F9B0h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213F9B0h case    3:*/		return 0x8213F9B4;
		  /* 8213F9B4h */ case    4:  		/* mr R3, R31 */
		/* 8213F9B4h case    4:*/		regs.R3 = regs.R31;
		/* 8213F9B4h case    4:*/		return 0x8213F9B8;
		  /* 8213F9B8h */ case    5:  		/* bl -362584 */
		/* 8213F9B8h case    5:*/		regs.LR = 0x8213F9BC; return 0x820E7160;
		/* 8213F9B8h case    5:*/		return 0x8213F9BC;
		  /* 8213F9BCh */ case    6:  		/* b 60 */
		/* 8213F9BCh case    6:*/		return 0x8213F9F8;
		/* 8213F9BCh case    6:*/		return 0x8213F9C0;
	}
	return 0x8213F9C0;
} // Block from 8213F9A4h-8213F9C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F9C0);
		  /* 8213F9C0h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213F9C0h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213F9C0h case    0:*/		return 0x8213F9C4;
		  /* 8213F9C4h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8213F9C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213F9C4h case    1:*/		return 0x8213F9C8;
		  /* 8213F9C8h */ case    2:  		/* bc 12, CR6_LT, 44 */
		/* 8213F9C8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213F9F4;  }
		/* 8213F9C8h case    2:*/		return 0x8213F9CC;
		  /* 8213F9CCh */ case    3:  		/* li R4, 1 */
		/* 8213F9CCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8213F9CCh case    3:*/		return 0x8213F9D0;
		  /* 8213F9D0h */ case    4:  		/* mr R3, R31 */
		/* 8213F9D0h case    4:*/		regs.R3 = regs.R31;
		/* 8213F9D0h case    4:*/		return 0x8213F9D4;
		  /* 8213F9D4h */ case    5:  		/* bl -349276 */
		/* 8213F9D4h case    5:*/		regs.LR = 0x8213F9D8; return 0x820EA578;
		/* 8213F9D4h case    5:*/		return 0x8213F9D8;
		  /* 8213F9D8h */ case    6:  		/* b 32 */
		/* 8213F9D8h case    6:*/		return 0x8213F9F8;
		/* 8213F9D8h case    6:*/		return 0x8213F9DC;
	}
	return 0x8213F9DC;
} // Block from 8213F9C0h-8213F9DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213F9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F9DC);
		  /* 8213F9DCh */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213F9DCh case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213F9DCh case    0:*/		return 0x8213F9E0;
		  /* 8213F9E0h */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8213F9E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213F9E0h case    1:*/		return 0x8213F9E4;
		  /* 8213F9E4h */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 8213F9E4h case    2:*/		if ( regs.CR[6].lt ) { return 0x8213F9F4;  }
		/* 8213F9E4h case    2:*/		return 0x8213F9E8;
		  /* 8213F9E8h */ case    3:  		/* mr R3, R31 */
		/* 8213F9E8h case    3:*/		regs.R3 = regs.R31;
		/* 8213F9E8h case    3:*/		return 0x8213F9EC;
		  /* 8213F9ECh */ case    4:  		/* bl -354252 */
		/* 8213F9ECh case    4:*/		regs.LR = 0x8213F9F0; return 0x820E9220;
		/* 8213F9ECh case    4:*/		return 0x8213F9F0;
		  /* 8213F9F0h */ case    5:  		/* b 8 */
		/* 8213F9F0h case    5:*/		return 0x8213F9F8;
		/* 8213F9F0h case    5:*/		return 0x8213F9F4;
	}
	return 0x8213F9F4;
} // Block from 8213F9DCh-8213F9F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213F9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F9F4);
		  /* 8213F9F4h */ case    0:  		/* li R3, 1 */
		/* 8213F9F4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213F9F4h case    0:*/		return 0x8213F9F8;
	}
	return 0x8213F9F8;
} // Block from 8213F9F4h-8213F9F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213F9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213F9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213F9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213F9F8);
		  /* 8213F9F8h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213F9F8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213F9F8h case    0:*/		return 0x8213F9FC;
		  /* 8213F9FCh */ case    1:  		/* bc 12, CR6_LT, 1156 */
		/* 8213F9FCh case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213F9FCh case    1:*/		return 0x8213FA00;
	}
	return 0x8213FA00;
} // Block from 8213F9F8h-8213FA00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FA00);
		  /* 8213FA00h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FA00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FA00h case    0:*/		return 0x8213FA04;
		  /* 8213FA04h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FA04h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FA04h case    1:*/		return 0x8213FA08;
		  /* 8213FA08h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FA08h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FA08h case    2:*/		return 0x8213FA0C;
		  /* 8213FA0Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FA0Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FA0Ch case    3:*/		return 0x8213FA10;
		  /* 8213FA10h */ case    4:  		/* bc 12, CR6_LT, -208 */
		/* 8213FA10h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213F940;  }
		/* 8213FA10h case    4:*/		return 0x8213FA14;
	}
	return 0x8213FA14;
} // Block from 8213FA00h-8213FA14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FA14);
		  /* 8213FA14h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FA14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FA14h case    0:*/		return 0x8213FA18;
		  /* 8213FA18h */ case    1:  		/* li R30, 0 */
		/* 8213FA18h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FA18h case    1:*/		return 0x8213FA1C;
		  /* 8213FA1Ch */ case    2:  		/* lis R28, 29552 */
		/* 8213FA1Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R28,0x7370);
		/* 8213FA1Ch case    2:*/		return 0x8213FA20;
		  /* 8213FA20h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8213FA20h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FA20h case    3:*/		return 0x8213FA24;
		  /* 8213FA24h */ case    4:  		/* bc 4, CR6_GT, 152 */
		/* 8213FA24h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8213FABC;  }
		/* 8213FA24h case    4:*/		return 0x8213FA28;
		  /* 8213FA28h */ case    5:  		/* li R29, 0 */
		/* 8213FA28h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FA28h case    5:*/		return 0x8213FA2C;
		  /* 8213FA2Ch */ case    6:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FA2Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FA2Ch case    6:*/		return 0x8213FA30;
		  /* 8213FA30h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FA30h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FA30h case    7:*/		return 0x8213FA34;
		  /* 8213FA34h */ case    8:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FA34h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FA34h case    8:*/		return 0x8213FA38;
		  /* 8213FA38h */ case    9:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FA38h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FA38h case    9:*/		return 0x8213FA3C;
		  /* 8213FA3Ch */ case   10:  		/* lwz R11, <#[R11]> */
		/* 8213FA3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FA3Ch case   10:*/		return 0x8213FA40;
		  /* 8213FA40h */ case   11:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FA40h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FA40h case   11:*/		return 0x8213FA44;
		  /* 8213FA44h */ case   12:  		/* cmplw CR6, R11, R25 */
		/* 8213FA44h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8213FA44h case   12:*/		return 0x8213FA48;
		  /* 8213FA48h */ case   13:  		/* bc 12, CR6_GT, 56 */
		/* 8213FA48h case   13:*/		if ( regs.CR[6].gt ) { return 0x8213FA80;  }
		/* 8213FA48h case   13:*/		return 0x8213FA4C;
		  /* 8213FA4Ch */ case   14:  		/* bc 12, CR6_EQ, 76 */
		/* 8213FA4Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8213FA98;  }
		/* 8213FA4Ch case   14:*/		return 0x8213FA50;
		  /* 8213FA50h */ case   15:  		/* cmplw CR6, R11, R26 */
		/* 8213FA50h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8213FA50h case   15:*/		return 0x8213FA54;
		  /* 8213FA54h */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 8213FA54h case   16:*/		if ( regs.CR[6].eq ) { return 0x8213FA74;  }
		/* 8213FA54h case   16:*/		return 0x8213FA58;
		  /* 8213FA58h */ case   17:  		/* cmplw CR6, R11, R27 */
		/* 8213FA58h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8213FA58h case   17:*/		return 0x8213FA5C;
		  /* 8213FA5Ch */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 8213FA5Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8213FA74;  }
		/* 8213FA5Ch case   18:*/		return 0x8213FA60;
		  /* 8213FA60h */ case   19:  		/* cmplw CR6, R11, R28 */
		/* 8213FA60h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213FA60h case   19:*/		return 0x8213FA64;
		  /* 8213FA64h */ case   20:  		/* bc 12, CR6_EQ, 16 */
		/* 8213FA64h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213FA74;  }
		/* 8213FA64h case   20:*/		return 0x8213FA68;
		  /* 8213FA68h */ case   21:  		/* lis R10, 29568 */
		/* 8213FA68h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x7380);
		/* 8213FA68h case   21:*/		return 0x8213FA6C;
		  /* 8213FA6Ch */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8213FA6Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FA6Ch case   22:*/		return 0x8213FA70;
		  /* 8213FA70h */ case   23:  		/* bc 4, CR6_EQ, 56 */
		/* 8213FA70h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8213FAA8;  }
		/* 8213FA70h case   23:*/		return 0x8213FA74;
	}
	return 0x8213FA74;
} // Block from 8213FA14h-8213FA74h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8213FA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FA74);
		  /* 8213FA74h */ case    0:  		/* mr R3, R31 */
		/* 8213FA74h case    0:*/		regs.R3 = regs.R31;
		/* 8213FA74h case    0:*/		return 0x8213FA78;
		  /* 8213FA78h */ case    1:  		/* bl -362360 */
		/* 8213FA78h case    1:*/		regs.LR = 0x8213FA7C; return 0x820E7300;
		/* 8213FA78h case    1:*/		return 0x8213FA7C;
		  /* 8213FA7Ch */ case    2:  		/* b 36 */
		/* 8213FA7Ch case    2:*/		return 0x8213FAA0;
		/* 8213FA7Ch case    2:*/		return 0x8213FA80;
	}
	return 0x8213FA80;
} // Block from 8213FA74h-8213FA80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8213FA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FA80);
		  /* 8213FA80h */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 8213FA80h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8213FA80h case    0:*/		return 0x8213FA84;
		  /* 8213FA84h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8213FA84h case    1:*/		if ( regs.CR[6].eq ) { return 0x8213FA98;  }
		/* 8213FA84h case    1:*/		return 0x8213FA88;
		  /* 8213FA88h */ case    2:  		/* cmplw CR6, R11, R24 */
		/* 8213FA88h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8213FA88h case    2:*/		return 0x8213FA8C;
		  /* 8213FA8Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8213FA8Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8213FA98;  }
		/* 8213FA8Ch case    3:*/		return 0x8213FA90;
		  /* 8213FA90h */ case    4:  		/* cmplw CR6, R11, R23 */
		/* 8213FA90h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213FA90h case    4:*/		return 0x8213FA94;
		  /* 8213FA94h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8213FA94h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8213FAA8;  }
		/* 8213FA94h case    5:*/		return 0x8213FA98;
	}
	return 0x8213FA98;
} // Block from 8213FA80h-8213FA98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8213FA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FA98);
		  /* 8213FA98h */ case    0:  		/* mr R3, R31 */
		/* 8213FA98h case    0:*/		regs.R3 = regs.R31;
		/* 8213FA98h case    0:*/		return 0x8213FA9C;
		  /* 8213FA9Ch */ case    1:  		/* bl -355500 */
		/* 8213FA9Ch case    1:*/		regs.LR = 0x8213FAA0; return 0x820E8DF0;
		/* 8213FA9Ch case    1:*/		return 0x8213FAA0;
	}
	return 0x8213FAA0;
} // Block from 8213FA98h-8213FAA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FAA0);
		  /* 8213FAA0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213FAA0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213FAA0h case    0:*/		return 0x8213FAA4;
		  /* 8213FAA4h */ case    1:  		/* bc 12, CR6_LT, 988 */
		/* 8213FAA4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213FAA4h case    1:*/		return 0x8213FAA8;
	}
	return 0x8213FAA8;
} // Block from 8213FAA0h-8213FAA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FAA8);
		  /* 8213FAA8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FAA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FAA8h case    0:*/		return 0x8213FAAC;
		  /* 8213FAACh */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FAACh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FAACh case    1:*/		return 0x8213FAB0;
		  /* 8213FAB0h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FAB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FAB0h case    2:*/		return 0x8213FAB4;
		  /* 8213FAB4h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FAB4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FAB4h case    3:*/		return 0x8213FAB8;
		  /* 8213FAB8h */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 8213FAB8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FA2C;  }
		/* 8213FAB8h case    4:*/		return 0x8213FABC;
	}
	return 0x8213FABC;
} // Block from 8213FAA8h-8213FABCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FABC);
		  /* 8213FABCh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FABCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FABCh case    0:*/		return 0x8213FAC0;
		  /* 8213FAC0h */ case    1:  		/* li R30, 0 */
		/* 8213FAC0h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FAC0h case    1:*/		return 0x8213FAC4;
		  /* 8213FAC4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213FAC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FAC4h case    2:*/		return 0x8213FAC8;
		  /* 8213FAC8h */ case    3:  		/* bc 4, CR6_GT, 76 */
		/* 8213FAC8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213FB14;  }
		/* 8213FAC8h case    3:*/		return 0x8213FACC;
		  /* 8213FACCh */ case    4:  		/* li R29, 0 */
		/* 8213FACCh case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FACCh case    4:*/		return 0x8213FAD0;
		  /* 8213FAD0h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FAD0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FAD0h case    5:*/		return 0x8213FAD4;
		  /* 8213FAD4h */ case    6:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FAD4h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FAD4h case    6:*/		return 0x8213FAD8;
		  /* 8213FAD8h */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FAD8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FAD8h case    7:*/		return 0x8213FADC;
		  /* 8213FADCh */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FADCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FADCh case    8:*/		return 0x8213FAE0;
		  /* 8213FAE0h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8213FAE0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FAE0h case    9:*/		return 0x8213FAE4;
		  /* 8213FAE4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FAE4h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FAE4h case   10:*/		return 0x8213FAE8;
		  /* 8213FAE8h */ case   11:  		/* cmplw CR6, R11, R28 */
		/* 8213FAE8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8213FAE8h case   11:*/		return 0x8213FAEC;
		  /* 8213FAECh */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 8213FAECh case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213FB00;  }
		/* 8213FAECh case   12:*/		return 0x8213FAF0;
		  /* 8213FAF0h */ case   13:  		/* mr R3, R31 */
		/* 8213FAF0h case   13:*/		regs.R3 = regs.R31;
		/* 8213FAF0h case   13:*/		return 0x8213FAF4;
		  /* 8213FAF4h */ case   14:  		/* bl -363620 */
		/* 8213FAF4h case   14:*/		regs.LR = 0x8213FAF8; return 0x820E6E90;
		/* 8213FAF4h case   14:*/		return 0x8213FAF8;
		  /* 8213FAF8h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8213FAF8h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FAF8h case   15:*/		return 0x8213FAFC;
		  /* 8213FAFCh */ case   16:  		/* bc 12, CR0_LT, 900 */
		/* 8213FAFCh case   16:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FAFCh case   16:*/		return 0x8213FB00;
	}
	return 0x8213FB00;
} // Block from 8213FABCh-8213FB00h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213FB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FB00);
		  /* 8213FB00h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FB00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FB00h case    0:*/		return 0x8213FB04;
		  /* 8213FB04h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FB04h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FB04h case    1:*/		return 0x8213FB08;
		  /* 8213FB08h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FB08h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FB08h case    2:*/		return 0x8213FB0C;
		  /* 8213FB0Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FB0Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FB0Ch case    3:*/		return 0x8213FB10;
		  /* 8213FB10h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213FB10h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FAD0;  }
		/* 8213FB10h case    4:*/		return 0x8213FB14;
	}
	return 0x8213FB14;
} // Block from 8213FB00h-8213FB14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FB14);
		  /* 8213FB14h */ case    0:  		/* mr R3, R31 */
		/* 8213FB14h case    0:*/		regs.R3 = regs.R31;
		/* 8213FB14h case    0:*/		return 0x8213FB18;
		  /* 8213FB18h */ case    1:  		/* bl -373560 */
		/* 8213FB18h case    1:*/		regs.LR = 0x8213FB1C; return 0x820E47E0;
		/* 8213FB18h case    1:*/		return 0x8213FB1C;
		  /* 8213FB1Ch */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FB1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FB1Ch case    2:*/		return 0x8213FB20;
		  /* 8213FB20h */ case    3:  		/* li R30, 0 */
		/* 8213FB20h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FB20h case    3:*/		return 0x8213FB24;
		  /* 8213FB24h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213FB24h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FB24h case    4:*/		return 0x8213FB28;
		  /* 8213FB28h */ case    5:  		/* bc 4, CR6_GT, 100 */
		/* 8213FB28h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213FB8C;  }
		/* 8213FB28h case    5:*/		return 0x8213FB2C;
		  /* 8213FB2Ch */ case    6:  		/* li R29, 0 */
		/* 8213FB2Ch case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FB2Ch case    6:*/		return 0x8213FB30;
		  /* 8213FB30h */ case    7:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FB30h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FB30h case    7:*/		return 0x8213FB34;
		  /* 8213FB34h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FB34h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FB34h case    8:*/		return 0x8213FB38;
		  /* 8213FB38h */ case    9:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FB38h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FB38h case    9:*/		return 0x8213FB3C;
		  /* 8213FB3Ch */ case   10:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FB3Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FB3Ch case   10:*/		return 0x8213FB40;
		  /* 8213FB40h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8213FB40h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FB40h case   11:*/		return 0x8213FB44;
		  /* 8213FB44h */ case   12:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FB44h case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FB44h case   12:*/		return 0x8213FB48;
		  /* 8213FB48h */ case   13:  		/* cmplw CR6, R11, R24 */
		/* 8213FB48h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8213FB48h case   13:*/		return 0x8213FB4C;
		  /* 8213FB4Ch */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 8213FB4Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8213FB58;  }
		/* 8213FB4Ch case   14:*/		return 0x8213FB50;
		  /* 8213FB50h */ case   15:  		/* cmplw CR6, R11, R23 */
		/* 8213FB50h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213FB50h case   15:*/		return 0x8213FB54;
		  /* 8213FB54h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 8213FB54h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8213FB78;  }
		/* 8213FB54h case   16:*/		return 0x8213FB58;
	}
	return 0x8213FB58;
} // Block from 8213FB14h-8213FB58h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8213FB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FB58);
		  /* 8213FB58h */ case    0:  		/* mr R3, R31 */
		/* 8213FB58h case    0:*/		regs.R3 = regs.R31;
		/* 8213FB58h case    0:*/		return 0x8213FB5C;
		  /* 8213FB5Ch */ case    1:  		/* bl -356524 */
		/* 8213FB5Ch case    1:*/		regs.LR = 0x8213FB60; return 0x820E8AB0;
		/* 8213FB5Ch case    1:*/		return 0x8213FB60;
		  /* 8213FB60h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213FB60h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FB60h case    2:*/		return 0x8213FB64;
		  /* 8213FB64h */ case    3:  		/* bc 12, CR0_LT, 796 */
		/* 8213FB64h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FB64h case    3:*/		return 0x8213FB68;
		  /* 8213FB68h */ case    4:  		/* mr R3, R31 */
		/* 8213FB68h case    4:*/		regs.R3 = regs.R31;
		/* 8213FB68h case    4:*/		return 0x8213FB6C;
		  /* 8213FB6Ch */ case    5:  		/* bl -356124 */
		/* 8213FB6Ch case    5:*/		regs.LR = 0x8213FB70; return 0x820E8C50;
		/* 8213FB6Ch case    5:*/		return 0x8213FB70;
		  /* 8213FB70h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8213FB70h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FB70h case    6:*/		return 0x8213FB74;
		  /* 8213FB74h */ case    7:  		/* bc 12, CR0_LT, 780 */
		/* 8213FB74h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FB74h case    7:*/		return 0x8213FB78;
	}
	return 0x8213FB78;
} // Block from 8213FB58h-8213FB78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8213FB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FB78);
		  /* 8213FB78h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FB78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FB78h case    0:*/		return 0x8213FB7C;
		  /* 8213FB7Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FB7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FB7Ch case    1:*/		return 0x8213FB80;
		  /* 8213FB80h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FB80h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FB80h case    2:*/		return 0x8213FB84;
		  /* 8213FB84h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FB84h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FB84h case    3:*/		return 0x8213FB88;
		  /* 8213FB88h */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 8213FB88h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FB30;  }
		/* 8213FB88h case    4:*/		return 0x8213FB8C;
	}
	return 0x8213FB8C;
} // Block from 8213FB78h-8213FB8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FB8C);
		  /* 8213FB8Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FB8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FB8Ch case    0:*/		return 0x8213FB90;
		  /* 8213FB90h */ case    1:  		/* li R30, 0 */
		/* 8213FB90h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FB90h case    1:*/		return 0x8213FB94;
		  /* 8213FB94h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213FB94h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FB94h case    2:*/		return 0x8213FB98;
		  /* 8213FB98h */ case    3:  		/* bc 4, CR6_GT, 92 */
		/* 8213FB98h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213FBF4;  }
		/* 8213FB98h case    3:*/		return 0x8213FB9C;
		  /* 8213FB9Ch */ case    4:  		/* li R29, 0 */
		/* 8213FB9Ch case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FB9Ch case    4:*/		return 0x8213FBA0;
		  /* 8213FBA0h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FBA0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FBA0h case    5:*/		return 0x8213FBA4;
		  /* 8213FBA4h */ case    6:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FBA4h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FBA4h case    6:*/		return 0x8213FBA8;
		  /* 8213FBA8h */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FBA8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FBA8h case    7:*/		return 0x8213FBAC;
		  /* 8213FBACh */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FBACh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FBACh case    8:*/		return 0x8213FBB0;
		  /* 8213FBB0h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8213FBB0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FBB0h case    9:*/		return 0x8213FBB4;
		  /* 8213FBB4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FBB4h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FBB4h case   10:*/		return 0x8213FBB8;
		  /* 8213FBB8h */ case   11:  		/* cmplw CR6, R11, R25 */
		/* 8213FBB8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8213FBB8h case   11:*/		return 0x8213FBBC;
		  /* 8213FBBCh */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 8213FBBCh case   12:*/		if ( regs.CR[6].eq ) { return 0x8213FBD8;  }
		/* 8213FBBCh case   12:*/		return 0x8213FBC0;
		  /* 8213FBC0h */ case   13:  		/* cmplw CR6, R11, R22 */
		/* 8213FBC0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8213FBC0h case   13:*/		return 0x8213FBC4;
		  /* 8213FBC4h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 8213FBC4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8213FBD8;  }
		/* 8213FBC4h case   14:*/		return 0x8213FBC8;
		  /* 8213FBC8h */ case   15:  		/* cmplw CR6, R11, R24 */
		/* 8213FBC8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8213FBC8h case   15:*/		return 0x8213FBCC;
		  /* 8213FBCCh */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 8213FBCCh case   16:*/		if ( regs.CR[6].eq ) { return 0x8213FBD8;  }
		/* 8213FBCCh case   16:*/		return 0x8213FBD0;
		  /* 8213FBD0h */ case   17:  		/* cmplw CR6, R11, R23 */
		/* 8213FBD0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8213FBD0h case   17:*/		return 0x8213FBD4;
		  /* 8213FBD4h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 8213FBD4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8213FBE0;  }
		/* 8213FBD4h case   18:*/		return 0x8213FBD8;
	}
	return 0x8213FBD8;
} // Block from 8213FB8Ch-8213FBD8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213FBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FBD8);
		  /* 8213FBD8h */ case    0:  		/* mr R3, R31 */
		/* 8213FBD8h case    0:*/		regs.R3 = regs.R31;
		/* 8213FBD8h case    0:*/		return 0x8213FBDC;
		  /* 8213FBDCh */ case    1:  		/* bl -355820 */
		/* 8213FBDCh case    1:*/		regs.LR = 0x8213FBE0; return 0x820E8DF0;
		/* 8213FBDCh case    1:*/		return 0x8213FBE0;
	}
	return 0x8213FBE0;
} // Block from 8213FBD8h-8213FBE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FBE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FBE0);
		  /* 8213FBE0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FBE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FBE0h case    0:*/		return 0x8213FBE4;
		  /* 8213FBE4h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FBE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FBE4h case    1:*/		return 0x8213FBE8;
		  /* 8213FBE8h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FBE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FBE8h case    2:*/		return 0x8213FBEC;
		  /* 8213FBECh */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FBECh case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FBECh case    3:*/		return 0x8213FBF0;
		  /* 8213FBF0h */ case    4:  		/* bc 12, CR6_LT, -80 */
		/* 8213FBF0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FBA0;  }
		/* 8213FBF0h case    4:*/		return 0x8213FBF4;
	}
	return 0x8213FBF4;
} // Block from 8213FBE0h-8213FBF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FBF4);
		  /* 8213FBF4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FBF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FBF4h case    0:*/		return 0x8213FBF8;
		  /* 8213FBF8h */ case    1:  		/* li R30, 0 */
		/* 8213FBF8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FBF8h case    1:*/		return 0x8213FBFC;
		  /* 8213FBFCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213FBFCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FBFCh case    2:*/		return 0x8213FC00;
		  /* 8213FC00h */ case    3:  		/* bc 4, CR6_GT, 80 */
		/* 8213FC00h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213FC50;  }
		/* 8213FC00h case    3:*/		return 0x8213FC04;
		  /* 8213FC04h */ case    4:  		/* li R29, 0 */
		/* 8213FC04h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FC04h case    4:*/		return 0x8213FC08;
		  /* 8213FC08h */ case    5:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FC08h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FC08h case    5:*/		return 0x8213FC0C;
		  /* 8213FC0Ch */ case    6:  		/* lis R11, 8336 */
		/* 8213FC0Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x2090);
		/* 8213FC0Ch case    6:*/		return 0x8213FC10;
		  /* 8213FC10h */ case    7:  		/* lwz R10, <#[R31 + 24]> */
		/* 8213FC10h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FC10h case    7:*/		return 0x8213FC14;
		  /* 8213FC14h */ case    8:  		/* lwzx R10, <#[R10 + R29]> */
		/* 8213FC14h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 8213FC14h case    8:*/		return 0x8213FC18;
		  /* 8213FC18h */ case    9:  		/* stw R10, <#[R31 + 260]> */
		/* 8213FC18h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FC18h case    9:*/		return 0x8213FC1C;
		  /* 8213FC1Ch */ case   10:  		/* lwz R10, <#[R10]> */
		/* 8213FC1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8213FC1Ch case   10:*/		return 0x8213FC20;
		  /* 8213FC20h */ case   11:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213FC20h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213FC20h case   11:*/		return 0x8213FC24;
		  /* 8213FC24h */ case   12:  		/* cmplw CR6, R10, R11 */
		/* 8213FC24h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213FC24h case   12:*/		return 0x8213FC28;
		  /* 8213FC28h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 8213FC28h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8213FC3C;  }
		/* 8213FC28h case   13:*/		return 0x8213FC2C;
		  /* 8213FC2Ch */ case   14:  		/* mr R3, R31 */
		/* 8213FC2Ch case   14:*/		regs.R3 = regs.R31;
		/* 8213FC2Ch case   14:*/		return 0x8213FC30;
		  /* 8213FC30h */ case   15:  		/* bl -359304 */
		/* 8213FC30h case   15:*/		regs.LR = 0x8213FC34; return 0x820E80A8;
		/* 8213FC30h case   15:*/		return 0x8213FC34;
		  /* 8213FC34h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8213FC34h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FC34h case   16:*/		return 0x8213FC38;
		  /* 8213FC38h */ case   17:  		/* bc 12, CR0_LT, 584 */
		/* 8213FC38h case   17:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FC38h case   17:*/		return 0x8213FC3C;
	}
	return 0x8213FC3C;
} // Block from 8213FBF4h-8213FC3Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8213FC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FC3C);
		  /* 8213FC3Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FC3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FC3Ch case    0:*/		return 0x8213FC40;
		  /* 8213FC40h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FC40h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FC40h case    1:*/		return 0x8213FC44;
		  /* 8213FC44h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FC44h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FC44h case    2:*/		return 0x8213FC48;
		  /* 8213FC48h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FC48h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FC48h case    3:*/		return 0x8213FC4C;
		  /* 8213FC4Ch */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 8213FC4Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FC08;  }
		/* 8213FC4Ch case    4:*/		return 0x8213FC50;
	}
	return 0x8213FC50;
} // Block from 8213FC3Ch-8213FC50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FC50);
		  /* 8213FC50h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FC50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FC50h case    0:*/		return 0x8213FC54;
		  /* 8213FC54h */ case    1:  		/* li R30, 0 */
		/* 8213FC54h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FC54h case    1:*/		return 0x8213FC58;
		  /* 8213FC58h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213FC58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FC58h case    2:*/		return 0x8213FC5C;
		  /* 8213FC5Ch */ case    3:  		/* bc 4, CR6_GT, 76 */
		/* 8213FC5Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213FCA8;  }
		/* 8213FC5Ch case    3:*/		return 0x8213FC60;
		  /* 8213FC60h */ case    4:  		/* li R29, 0 */
		/* 8213FC60h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FC60h case    4:*/		return 0x8213FC64;
		  /* 8213FC64h */ case    5:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FC64h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FC64h case    5:*/		return 0x8213FC68;
		  /* 8213FC68h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FC68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FC68h case    6:*/		return 0x8213FC6C;
		  /* 8213FC6Ch */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FC6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FC6Ch case    7:*/		return 0x8213FC70;
		  /* 8213FC70h */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FC70h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FC70h case    8:*/		return 0x8213FC74;
		  /* 8213FC74h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8213FC74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FC74h case    9:*/		return 0x8213FC78;
		  /* 8213FC78h */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FC78h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FC78h case   10:*/		return 0x8213FC7C;
		  /* 8213FC7Ch */ case   11:  		/* cmplw CR6, R11, R21 */
		/* 8213FC7Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8213FC7Ch case   11:*/		return 0x8213FC80;
	}
	return 0x8213FC80;
} // Block from 8213FC50h-8213FC80h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8213FC80h
// Function '??0CVSProgram@D3DXShader@@QAA@HH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FC80);
		  /* 8213FC80h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 8213FC80h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8213FC94;  }
		/* 8213FC80h case    0:*/		return 0x8213FC84;
		  /* 8213FC84h */ case    1:  		/* mr R3, R31 */
		/* 8213FC84h case    1:*/		regs.R3 = regs.R31;
		/* 8213FC84h case    1:*/		return 0x8213FC88;
		  /* 8213FC88h */ case    2:  		/* bl -373472 */
		/* 8213FC88h case    2:*/		regs.LR = 0x8213FC8C; return 0x820E49A8;
		/* 8213FC88h case    2:*/		return 0x8213FC8C;
		  /* 8213FC8Ch */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8213FC8Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FC8Ch case    3:*/		return 0x8213FC90;
		  /* 8213FC90h */ case    4:  		/* bc 12, CR0_LT, 496 */
		/* 8213FC90h case    4:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FC90h case    4:*/		return 0x8213FC94;
	}
	return 0x8213FC94;
} // Block from 8213FC80h-8213FC94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FC94);
		  /* 8213FC94h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FC94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FC94h case    0:*/		return 0x8213FC98;
		  /* 8213FC98h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FC98h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FC98h case    1:*/		return 0x8213FC9C;
		  /* 8213FC9Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FC9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FC9Ch case    2:*/		return 0x8213FCA0;
		  /* 8213FCA0h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FCA0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FCA0h case    3:*/		return 0x8213FCA4;
		  /* 8213FCA4h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 8213FCA4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FC64;  }
		/* 8213FCA4h case    4:*/		return 0x8213FCA8;
	}
	return 0x8213FCA8;
} // Block from 8213FC94h-8213FCA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FCA8);
		  /* 8213FCA8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FCA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FCA8h case    0:*/		return 0x8213FCAC;
		  /* 8213FCACh */ case    1:  		/* li R30, 0 */
		/* 8213FCACh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FCACh case    1:*/		return 0x8213FCB0;
		  /* 8213FCB0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8213FCB0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FCB0h case    2:*/		return 0x8213FCB4;
		  /* 8213FCB4h */ case    3:  		/* bc 4, CR6_GT, 100 */
		/* 8213FCB4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8213FD18;  }
		/* 8213FCB4h case    3:*/		return 0x8213FCB8;
		  /* 8213FCB8h */ case    4:  		/* li R29, 0 */
		/* 8213FCB8h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FCB8h case    4:*/		return 0x8213FCBC;
		  /* 8213FCBCh */ case    5:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FCBCh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FCBCh case    5:*/		return 0x8213FCC0;
		  /* 8213FCC0h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FCC0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FCC0h case    6:*/		return 0x8213FCC4;
		  /* 8213FCC4h */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FCC4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FCC4h case    7:*/		return 0x8213FCC8;
		  /* 8213FCC8h */ case    8:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FCC8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FCC8h case    8:*/		return 0x8213FCCC;
		  /* 8213FCCCh */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8213FCCCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FCCCh case    9:*/		return 0x8213FCD0;
		  /* 8213FCD0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FCD0h case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FCD0h case   10:*/		return 0x8213FCD4;
		  /* 8213FCD4h */ case   11:  		/* cmplw CR6, R11, R20 */
		/* 8213FCD4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8213FCD4h case   11:*/		return 0x8213FCD8;
		  /* 8213FCD8h */ case   12:  		/* bc 4, CR6_EQ, 44 */
		/* 8213FCD8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8213FD04;  }
		/* 8213FCD8h case   12:*/		return 0x8213FCDC;
		  /* 8213FCDCh */ case   13:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213FCDCh case   13:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213FCDCh case   13:*/		return 0x8213FCE0;
		  /* 8213FCE0h */ case   14:  		/* cmplwi CR6, R11, 512 */
		/* 8213FCE0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213FCE0h case   14:*/		return 0x8213FCE4;
		  /* 8213FCE4h */ case   15:  		/* bc 12, CR6_LT, 20 */
		/* 8213FCE4h case   15:*/		if ( regs.CR[6].lt ) { return 0x8213FCF8;  }
		/* 8213FCE4h case   15:*/		return 0x8213FCE8;
	}
	return 0x8213FCE8;
} // Block from 8213FCA8h-8213FCE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8213FCE8h
// Function '?InitCaps@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FCE8);
		  /* 8213FCE8h */ case    0:  		/* li R4, 0 */
		/* 8213FCE8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8213FCE8h case    0:*/		return 0x8213FCEC;
		  /* 8213FCECh */ case    1:  		/* mr R3, R31 */
		/* 8213FCECh case    1:*/		regs.R3 = regs.R31;
		/* 8213FCECh case    1:*/		return 0x8213FCF0;
		  /* 8213FCF0h */ case    2:  		/* bl -350072 */
		/* 8213FCF0h case    2:*/		regs.LR = 0x8213FCF4; return 0x820EA578;
		/* 8213FCF0h case    2:*/		return 0x8213FCF4;
		  /* 8213FCF4h */ case    3:  		/* b 8 */
		/* 8213FCF4h case    3:*/		return 0x8213FCFC;
		/* 8213FCF4h case    3:*/		return 0x8213FCF8;
	}
	return 0x8213FCF8;
} // Block from 8213FCE8h-8213FCF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213FCF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FCF8);
		  /* 8213FCF8h */ case    0:  		/* li R3, 1 */
		/* 8213FCF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213FCF8h case    0:*/		return 0x8213FCFC;
	}
	return 0x8213FCFC;
} // Block from 8213FCF8h-8213FCFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213FCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FCFC);
		  /* 8213FCFCh */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213FCFCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213FCFCh case    0:*/		return 0x8213FD00;
		  /* 8213FD00h */ case    1:  		/* bc 12, CR6_LT, 384 */
		/* 8213FD00h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213FD00h case    1:*/		return 0x8213FD04;
	}
	return 0x8213FD04;
} // Block from 8213FCFCh-8213FD04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FD04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FD04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FD04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FD04);
		  /* 8213FD04h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FD04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FD04h case    0:*/		return 0x8213FD08;
		  /* 8213FD08h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FD08h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FD08h case    1:*/		return 0x8213FD0C;
		  /* 8213FD0Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FD0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FD0Ch case    2:*/		return 0x8213FD10;
		  /* 8213FD10h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FD10h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FD10h case    3:*/		return 0x8213FD14;
		  /* 8213FD14h */ case    4:  		/* bc 12, CR6_LT, -88 */
		/* 8213FD14h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FCBC;  }
		/* 8213FD14h case    4:*/		return 0x8213FD18;
	}
	return 0x8213FD18;
} // Block from 8213FD04h-8213FD18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FD18);
		  /* 8213FD18h */ case    0:  		/* mr R3, R31 */
		/* 8213FD18h case    0:*/		regs.R3 = regs.R31;
		/* 8213FD18h case    0:*/		return 0x8213FD1C;
		  /* 8213FD1Ch */ case    1:  		/* bl -374076 */
		/* 8213FD1Ch case    1:*/		regs.LR = 0x8213FD20; return 0x820E47E0;
		/* 8213FD1Ch case    1:*/		return 0x8213FD20;
		  /* 8213FD20h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FD20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FD20h case    2:*/		return 0x8213FD24;
		  /* 8213FD24h */ case    3:  		/* li R30, 0 */
		/* 8213FD24h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FD24h case    3:*/		return 0x8213FD28;
		  /* 8213FD28h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213FD28h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FD28h case    4:*/		return 0x8213FD2C;
		  /* 8213FD2Ch */ case    5:  		/* bc 4, CR6_GT, 164 */
		/* 8213FD2Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213FDD0;  }
		/* 8213FD2Ch case    5:*/		return 0x8213FD30;
		  /* 8213FD30h */ case    6:  		/* li R29, 0 */
		/* 8213FD30h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FD30h case    6:*/		return 0x8213FD34;
		  /* 8213FD34h */ case    7:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FD34h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FD34h case    7:*/		return 0x8213FD38;
		  /* 8213FD38h */ case    8:  		/* lis R10, 4144 */
		/* 8213FD38h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x1030);
		/* 8213FD38h case    8:*/		return 0x8213FD3C;
		  /* 8213FD3Ch */ case    9:  		/* lwz R11, <#[R31 + 24]> */
		/* 8213FD3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FD3Ch case    9:*/		return 0x8213FD40;
		  /* 8213FD40h */ case   10:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8213FD40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8213FD40h case   10:*/		return 0x8213FD44;
		  /* 8213FD44h */ case   11:  		/* stw R11, <#[R31 + 260]> */
		/* 8213FD44h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FD44h case   11:*/		return 0x8213FD48;
		  /* 8213FD48h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8213FD48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FD48h case   12:*/		return 0x8213FD4C;
		  /* 8213FD4Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8213FD4Ch case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8213FD4Ch case   13:*/		return 0x8213FD50;
		  /* 8213FD50h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 8213FD50h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FD50h case   14:*/		return 0x8213FD54;
		  /* 8213FD54h */ case   15:  		/* bc 12, CR6_EQ, 88 */
		/* 8213FD54h case   15:*/		if ( regs.CR[6].eq ) { return 0x8213FDAC;  }
		/* 8213FD54h case   15:*/		return 0x8213FD58;
		  /* 8213FD58h */ case   16:  		/* cmplw CR6, R11, R19 */
		/* 8213FD58h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8213FD58h case   16:*/		return 0x8213FD5C;
		  /* 8213FD5Ch */ case   17:  		/* bc 12, CR6_EQ, 80 */
		/* 8213FD5Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8213FDAC;  }
		/* 8213FD5Ch case   17:*/		return 0x8213FD60;
		  /* 8213FD60h */ case   18:  		/* lis R10, 4192 */
		/* 8213FD60h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x1060);
		/* 8213FD60h case   18:*/		return 0x8213FD64;
		  /* 8213FD64h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8213FD64h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FD64h case   19:*/		return 0x8213FD68;
		  /* 8213FD68h */ case   20:  		/* bc 12, CR6_EQ, 68 */
		/* 8213FD68h case   20:*/		if ( regs.CR[6].eq ) { return 0x8213FDAC;  }
		/* 8213FD68h case   20:*/		return 0x8213FD6C;
		  /* 8213FD6Ch */ case   21:  		/* lis R10, 4208 */
		/* 8213FD6Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x1070);
		/* 8213FD6Ch case   21:*/		return 0x8213FD70;
		  /* 8213FD70h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8213FD70h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FD70h case   22:*/		return 0x8213FD74;
		  /* 8213FD74h */ case   23:  		/* bc 12, CR6_EQ, 56 */
		/* 8213FD74h case   23:*/		if ( regs.CR[6].eq ) { return 0x8213FDAC;  }
		/* 8213FD74h case   23:*/		return 0x8213FD78;
		  /* 8213FD78h */ case   24:  		/* lis R10, 20480 */
		/* 8213FD78h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 8213FD78h case   24:*/		return 0x8213FD7C;
		  /* 8213FD7Ch */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 8213FD7Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FD7Ch case   25:*/		return 0x8213FD80;
		  /* 8213FD80h */ case   26:  		/* bc 12, CR6_EQ, 44 */
		/* 8213FD80h case   26:*/		if ( regs.CR[6].eq ) { return 0x8213FDAC;  }
		/* 8213FD80h case   26:*/		return 0x8213FD84;
		  /* 8213FD84h */ case   27:  		/* cmplw CR6, R11, R20 */
		/* 8213FD84h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8213FD84h case   27:*/		return 0x8213FD88;
		  /* 8213FD88h */ case   28:  		/* bc 4, CR6_EQ, 52 */
		/* 8213FD88h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8213FDBC;  }
		/* 8213FD88h case   28:*/		return 0x8213FD8C;
		  /* 8213FD8Ch */ case   29:  		/* lhz R11, <#[R31 + 202]> */
		/* 8213FD8Ch case   29:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 8213FD8Ch case   29:*/		return 0x8213FD90;
		  /* 8213FD90h */ case   30:  		/* cmplwi CR6, R11, 512 */
		/* 8213FD90h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8213FD90h case   30:*/		return 0x8213FD94;
		  /* 8213FD94h */ case   31:  		/* bc 12, CR6_LT, 16 */
		/* 8213FD94h case   31:*/		if ( regs.CR[6].lt ) { return 0x8213FDA4;  }
		/* 8213FD94h case   31:*/		return 0x8213FD98;
		  /* 8213FD98h */ case   32:  		/* mr R3, R31 */
		/* 8213FD98h case   32:*/		regs.R3 = regs.R31;
		/* 8213FD98h case   32:*/		return 0x8213FD9C;
		  /* 8213FD9Ch */ case   33:  		/* bl -325068 */
		/* 8213FD9Ch case   33:*/		regs.LR = 0x8213FDA0; return 0x820F07D0;
		/* 8213FD9Ch case   33:*/		return 0x8213FDA0;
		  /* 8213FDA0h */ case   34:  		/* b 20 */
		/* 8213FDA0h case   34:*/		return 0x8213FDB4;
		/* 8213FDA0h case   34:*/		return 0x8213FDA4;
	}
	return 0x8213FDA4;
} // Block from 8213FD18h-8213FDA4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8213FDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FDA4);
		  /* 8213FDA4h */ case    0:  		/* li R3, 1 */
		/* 8213FDA4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8213FDA4h case    0:*/		return 0x8213FDA8;
		  /* 8213FDA8h */ case    1:  		/* b 12 */
		/* 8213FDA8h case    1:*/		return 0x8213FDB4;
		/* 8213FDA8h case    1:*/		return 0x8213FDAC;
	}
	return 0x8213FDAC;
} // Block from 8213FDA4h-8213FDACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FDACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FDAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FDAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FDAC);
		  /* 8213FDACh */ case    0:  		/* mr R3, R31 */
		/* 8213FDACh case    0:*/		regs.R3 = regs.R31;
		/* 8213FDACh case    0:*/		return 0x8213FDB0;
		  /* 8213FDB0h */ case    1:  		/* bl -367056 */
		/* 8213FDB0h case    1:*/		regs.LR = 0x8213FDB4; return 0x820E63E0;
		/* 8213FDB0h case    1:*/		return 0x8213FDB4;
	}
	return 0x8213FDB4;
} // Block from 8213FDACh-8213FDB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FDB4);
		  /* 8213FDB4h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8213FDB4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8213FDB4h case    0:*/		return 0x8213FDB8;
		  /* 8213FDB8h */ case    1:  		/* bc 12, CR6_LT, 200 */
		/* 8213FDB8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8213FE80;  }
		/* 8213FDB8h case    1:*/		return 0x8213FDBC;
	}
	return 0x8213FDBC;
} // Block from 8213FDB4h-8213FDBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FDBC);
		  /* 8213FDBCh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FDBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FDBCh case    0:*/		return 0x8213FDC0;
		  /* 8213FDC0h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FDC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FDC0h case    1:*/		return 0x8213FDC4;
		  /* 8213FDC4h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FDC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FDC4h case    2:*/		return 0x8213FDC8;
		  /* 8213FDC8h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FDC8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FDC8h case    3:*/		return 0x8213FDCC;
		  /* 8213FDCCh */ case    4:  		/* bc 12, CR6_LT, -152 */
		/* 8213FDCCh case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FD34;  }
		/* 8213FDCCh case    4:*/		return 0x8213FDD0;
	}
	return 0x8213FDD0;
} // Block from 8213FDBCh-8213FDD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FDD0);
		  /* 8213FDD0h */ case    0:  		/* mr R3, R31 */
		/* 8213FDD0h case    0:*/		regs.R3 = regs.R31;
		/* 8213FDD0h case    0:*/		return 0x8213FDD4;
		  /* 8213FDD4h */ case    1:  		/* bl -374260 */
		/* 8213FDD4h case    1:*/		regs.LR = 0x8213FDD8; return 0x820E47E0;
		/* 8213FDD4h case    1:*/		return 0x8213FDD8;
		  /* 8213FDD8h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FDD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FDD8h case    2:*/		return 0x8213FDDC;
		  /* 8213FDDCh */ case    3:  		/* li R30, 0 */
		/* 8213FDDCh case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8213FDDCh case    3:*/		return 0x8213FDE0;
		  /* 8213FDE0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8213FDE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8213FDE0h case    4:*/		return 0x8213FDE4;
		  /* 8213FDE4h */ case    5:  		/* bc 4, CR6_GT, 80 */
		/* 8213FDE4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8213FE34;  }
		/* 8213FDE4h case    5:*/		return 0x8213FDE8;
		  /* 8213FDE8h */ case    6:  		/* li R29, 0 */
		/* 8213FDE8h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8213FDE8h case    6:*/		return 0x8213FDEC;
		  /* 8213FDECh */ case    7:  		/* stw R30, <#[R31 + 256]> */
		/* 8213FDECh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 8213FDECh case    7:*/		return 0x8213FDF0;
		  /* 8213FDF0h */ case    8:  		/* lis R11, 20528 */
		/* 8213FDF0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0x5030);
		/* 8213FDF0h case    8:*/		return 0x8213FDF4;
		  /* 8213FDF4h */ case    9:  		/* lwz R10, <#[R31 + 24]> */
		/* 8213FDF4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8213FDF4h case    9:*/		return 0x8213FDF8;
		  /* 8213FDF8h */ case   10:  		/* lwzx R10, <#[R10 + R29]> */
		/* 8213FDF8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 8213FDF8h case   10:*/		return 0x8213FDFC;
		  /* 8213FDFCh */ case   11:  		/* stw R10, <#[R31 + 260]> */
		/* 8213FDFCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 8213FDFCh case   11:*/		return 0x8213FE00;
		  /* 8213FE00h */ case   12:  		/* lwz R10, <#[R10]> */
		/* 8213FE00h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8213FE00h case   12:*/		return 0x8213FE04;
		  /* 8213FE04h */ case   13:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8213FE04h case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8213FE04h case   13:*/		return 0x8213FE08;
		  /* 8213FE08h */ case   14:  		/* cmplw CR6, R10, R11 */
		/* 8213FE08h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8213FE08h case   14:*/		return 0x8213FE0C;
		  /* 8213FE0Ch */ case   15:  		/* bc 4, CR6_EQ, 20 */
		/* 8213FE0Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x8213FE20;  }
		/* 8213FE0Ch case   15:*/		return 0x8213FE10;
		  /* 8213FE10h */ case   16:  		/* mr R3, R31 */
		/* 8213FE10h case   16:*/		regs.R3 = regs.R31;
		/* 8213FE10h case   16:*/		return 0x8213FE14;
		  /* 8213FE14h */ case   17:  		/* bl -372756 */
		/* 8213FE14h case   17:*/		regs.LR = 0x8213FE18; return 0x820E4E00;
		/* 8213FE14h case   17:*/		return 0x8213FE18;
		  /* 8213FE18h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 8213FE18h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FE18h case   18:*/		return 0x8213FE1C;
		  /* 8213FE1Ch */ case   19:  		/* bc 12, CR0_LT, 100 */
		/* 8213FE1Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FE1Ch case   19:*/		return 0x8213FE20;
	}
	return 0x8213FE20;
} // Block from 8213FDD0h-8213FE20h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8213FE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FE20);
		  /* 8213FE20h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8213FE20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8213FE20h case    0:*/		return 0x8213FE24;
		  /* 8213FE24h */ case    1:  		/* addi R30, R30, 1 */
		/* 8213FE24h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8213FE24h case    1:*/		return 0x8213FE28;
		  /* 8213FE28h */ case    2:  		/* addi R29, R29, 4 */
		/* 8213FE28h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8213FE28h case    2:*/		return 0x8213FE2C;
		  /* 8213FE2Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8213FE2Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8213FE2Ch case    3:*/		return 0x8213FE30;
		  /* 8213FE30h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 8213FE30h case    4:*/		if ( regs.CR[6].lt ) { return 0x8213FDEC;  }
		/* 8213FE30h case    4:*/		return 0x8213FE34;
	}
	return 0x8213FE34;
} // Block from 8213FE20h-8213FE34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FE34);
		  /* 8213FE34h */ case    0:  		/* mr R3, R31 */
		/* 8213FE34h case    0:*/		regs.R3 = regs.R31;
		/* 8213FE34h case    0:*/		return 0x8213FE38;
		  /* 8213FE38h */ case    1:  		/* bl -232912 */
		/* 8213FE38h case    1:*/		regs.LR = 0x8213FE3C; return 0x82107068;
		/* 8213FE38h case    1:*/		return 0x8213FE3C;
		  /* 8213FE3Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8213FE3Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FE3Ch case    2:*/		return 0x8213FE40;
		  /* 8213FE40h */ case    3:  		/* bc 12, CR0_LT, 64 */
		/* 8213FE40h case    3:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FE40h case    3:*/		return 0x8213FE44;
		  /* 8213FE44h */ case    4:  		/* mr R3, R31 */
		/* 8213FE44h case    4:*/		regs.R3 = regs.R31;
		/* 8213FE44h case    4:*/		return 0x8213FE48;
		  /* 8213FE48h */ case    5:  		/* bl -231136 */
		/* 8213FE48h case    5:*/		regs.LR = 0x8213FE4C; return 0x82107768;
		/* 8213FE48h case    5:*/		return 0x8213FE4C;
		  /* 8213FE4Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8213FE4Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FE4Ch case    6:*/		return 0x8213FE50;
		  /* 8213FE50h */ case    7:  		/* bc 12, CR0_LT, 48 */
		/* 8213FE50h case    7:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FE50h case    7:*/		return 0x8213FE54;
		  /* 8213FE54h */ case    8:  		/* mr R3, R31 */
		/* 8213FE54h case    8:*/		regs.R3 = regs.R31;
		/* 8213FE54h case    8:*/		return 0x8213FE58;
		  /* 8213FE58h */ case    9:  		/* bl -254456 */
		/* 8213FE58h case    9:*/		regs.LR = 0x8213FE5C; return 0x82101C60;
		/* 8213FE58h case    9:*/		return 0x8213FE5C;
		  /* 8213FE5Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8213FE5Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FE5Ch case   10:*/		return 0x8213FE60;
		  /* 8213FE60h */ case   11:  		/* bc 12, CR0_LT, 32 */
		/* 8213FE60h case   11:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FE60h case   11:*/		return 0x8213FE64;
		  /* 8213FE64h */ case   12:  		/* mr R3, R31 */
		/* 8213FE64h case   12:*/		regs.R3 = regs.R31;
		/* 8213FE64h case   12:*/		return 0x8213FE68;
		  /* 8213FE68h */ case   13:  		/* bl -220344 */
		/* 8213FE68h case   13:*/		regs.LR = 0x8213FE6C; return 0x8210A1B0;
		/* 8213FE68h case   13:*/		return 0x8213FE6C;
		  /* 8213FE6Ch */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8213FE6Ch case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8213FE6Ch case   14:*/		return 0x8213FE70;
		  /* 8213FE70h */ case   15:  		/* bc 12, CR0_LT, 16 */
		/* 8213FE70h case   15:*/		if ( regs.CR[0].lt ) { return 0x8213FE80;  }
		/* 8213FE70h case   15:*/		return 0x8213FE74;
		  /* 8213FE74h */ case   16:  		/* mr R3, R31 */
		/* 8213FE74h case   16:*/		regs.R3 = regs.R31;
		/* 8213FE74h case   16:*/		return 0x8213FE78;
		  /* 8213FE78h */ case   17:  		/* bl -374424 */
		/* 8213FE78h case   17:*/		regs.LR = 0x8213FE7C; return 0x820E47E0;
		/* 8213FE78h case   17:*/		return 0x8213FE7C;
		  /* 8213FE7Ch */ case   18:  		/* li R3, 0 */
		/* 8213FE7Ch case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213FE7Ch case   18:*/		return 0x8213FE80;
	}
	return 0x8213FE80;
} // Block from 8213FE34h-8213FE80h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8213FE80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FE80);
		  /* 8213FE80h */ case    0:  		/* addi R1, R1, 192 */
		/* 8213FE80h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8213FE80h case    0:*/		return 0x8213FE84;
		  /* 8213FE84h */ case    1:  		/* b -715776 */
		/* 8213FE84h case    1:*/		return 0x82091284;
		/* 8213FE84h case    1:*/		return 0x8213FE88;
	}
	return 0x8213FE88;
} // Block from 8213FE80h-8213FE88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8213FE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FE88);
		  /* 8213FE88h */ case    0:  		/* lhz R10, <#[R3 + 202]> */
		/* 8213FE88h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R3 + 0x000000CA) );
		/* 8213FE88h case    0:*/		return 0x8213FE8C;
		  /* 8213FE8Ch */ case    1:  		/* mr R11, R3 */
		/* 8213FE8Ch case    1:*/		regs.R11 = regs.R3;
		/* 8213FE8Ch case    1:*/		return 0x8213FE90;
		  /* 8213FE90h */ case    2:  		/* li R3, 0 */
		/* 8213FE90h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8213FE90h case    2:*/		return 0x8213FE94;
		  /* 8213FE94h */ case    3:  		/* cmplwi CR6, R10, 512 */
		/* 8213FE94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000200);
		/* 8213FE94h case    3:*/		return 0x8213FE98;
		  /* 8213FE98h */ case    4:  		/* bclr 12, CR6_LT */
		/* 8213FE98h case    4:*/		if ( regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 8213FE98h case    4:*/		return 0x8213FE9C;
	}
	return 0x8213FE9C;
} // Block from 8213FE88h-8213FE9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8213FE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FE9C);
		  /* 8213FE9Ch */ case    0:  		/* lwz R9, <#[R11 + 284]> */
		/* 8213FE9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000011C) );
		/* 8213FE9Ch case    0:*/		return 0x8213FEA0;
		  /* 8213FEA0h */ case    1:  		/* lwz R8, <#[R11 + 276]> */
		/* 8213FEA0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000114) );
		/* 8213FEA0h case    1:*/		return 0x8213FEA4;
		  /* 8213FEA4h */ case    2:  		/* lwz R10, <#[R11 + 272]> */
		/* 8213FEA4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000110) );
		/* 8213FEA4h case    2:*/		return 0x8213FEA8;
		  /* 8213FEA8h */ case    3:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 8213FEA8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 8213FEA8h case    3:*/		return 0x8213FEAC;
		  /* 8213FEACh */ case    4:  		/* subf R9, R9, R8 */
		/* 8213FEACh case    4:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8213FEACh case    4:*/		return 0x8213FEB0;
		  /* 8213FEB0h */ case    5:  		/* addi R9, R9, -1 */
		/* 8213FEB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8213FEB0h case    5:*/		return 0x8213FEB4;
		  /* 8213FEB4h */ case    6:  		/* lwzx R8, <#[R11 + R10]> */
		/* 8213FEB4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213FEB4h case    6:*/		return 0x8213FEB8;
		  /* 8213FEB8h */ case    7:  		/* rlwinm R9, R9, 24, 0, 7 */
		/* 8213FEB8h case    7:*/		cpu::op::rlwinm<0,24,0,7>(regs,&regs.R9,regs.R9);
		/* 8213FEB8h case    7:*/		return 0x8213FEBC;
		  /* 8213FEBCh */ case    8:  		/* or R9, R9, R8 */
		/* 8213FEBCh case    8:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8213FEBCh case    8:*/		return 0x8213FEC0;
		  /* 8213FEC0h */ case    9:  		/* stwx R9, <#[R11 + R10]> */
		/* 8213FEC0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8213FEC0h case    9:*/		return 0x8213FEC4;
		  /* 8213FEC4h */ case   10:  		/* bclr 20, CR0_LT */
		/* 8213FEC4h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8213FEC4h case   10:*/		return 0x8213FEC8;
	}
	return 0x8213FEC8;
} // Block from 8213FE9Ch-8213FEC8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8213FEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FEC8);
		  /* 8213FEC8h */ case    0:  		/* mfspr R12, LR */
		/* 8213FEC8h case    0:*/		regs.R12 = regs.LR;
		/* 8213FEC8h case    0:*/		return 0x8213FECC;
		  /* 8213FECCh */ case    1:  		/* bl -715916 */
		/* 8213FECCh case    1:*/		regs.LR = 0x8213FED0; return 0x82091240;
		/* 8213FECCh case    1:*/		return 0x8213FED0;
		  /* 8213FED0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8213FED0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8213FED0h case    2:*/		return 0x8213FED4;
		  /* 8213FED4h */ case    3:  		/* lwz R28, <#[R3 + 260]> */
		/* 8213FED4h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000104) );
		/* 8213FED4h case    3:*/		return 0x8213FED8;
	}
	return 0x8213FED8;
} // Block from 8213FEC8h-8213FED8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213FED8h
// Function '?ValidateOutput@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FED8);
		  /* 8213FED8h */ case    0:  		/* mr R27, R3 */
		/* 8213FED8h case    0:*/		regs.R27 = regs.R3;
		/* 8213FED8h case    0:*/		return 0x8213FEDC;
		  /* 8213FEDCh */ case    1:  		/* li R22, 0 */
		/* 8213FEDCh case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8213FEDCh case    1:*/		return 0x8213FEE0;
		  /* 8213FEE0h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 8213FEE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8213FEE0h case    2:*/		return 0x8213FEE4;
		  /* 8213FEE4h */ case    3:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 8213FEE4h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 8213FEE4h case    3:*/		return 0x8213FEE8;
		  /* 8213FEE8h */ case    4:  		/* cmplwi CR6, R29, 3 */
		/* 8213FEE8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 8213FEE8h case    4:*/		return 0x8213FEEC;
		  /* 8213FEECh */ case    5:  		/* bc 12, CR6_LT, 1184 */
		/* 8213FEECh case    5:*/		if ( regs.CR[6].lt ) { return 0x8214038C;  }
		/* 8213FEECh case    5:*/		return 0x8213FEF0;
		  /* 8213FEF0h */ case    6:  		/* lis R4, 4096 */
		/* 8213FEF0h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8213FEF0h case    6:*/		return 0x8213FEF4;
		  /* 8213FEF4h */ case    7:  		/* li R8, 1 */
		/* 8213FEF4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8213FEF4h case    7:*/		return 0x8213FEF8;
		  /* 8213FEF8h */ case    8:  		/* li R7, 2 */
		/* 8213FEF8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8213FEF8h case    8:*/		return 0x8213FEFC;
		  /* 8213FEFCh */ case    9:  		/* li R6, 0 */
		/* 8213FEFCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213FEFCh case    9:*/		return 0x8213FF00;
		  /* 8213FF00h */ case   10:  		/* mr R5, R28 */
		/* 8213FF00h case   10:*/		regs.R5 = regs.R28;
		/* 8213FF00h case   10:*/		return 0x8213FF04;
		  /* 8213FF04h */ case   11:  		/* ori R4, R4, 2 */
		/* 8213FF04h case   11:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 8213FF04h case   11:*/		return 0x8213FF08;
		  /* 8213FF08h */ case   12:  		/* bl -342752 */
		/* 8213FF08h case   12:*/		regs.LR = 0x8213FF0C; return 0x820EC428;
		/* 8213FF08h case   12:*/		return 0x8213FF0C;
		  /* 8213FF0Ch */ case   13:  		/* or. R30, R3, R3 */
		/* 8213FF0Ch case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213FF0Ch case   13:*/		return 0x8213FF10;
		  /* 8213FF10h */ case   14:  		/* bc 4, CR0_EQ, 84 */
		/* 8213FF10h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8213FF64;  }
		/* 8213FF10h case   14:*/		return 0x8213FF14;
		  /* 8213FF14h */ case   15:  		/* lis R4, 4096 */
		/* 8213FF14h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8213FF14h case   15:*/		return 0x8213FF18;
		  /* 8213FF18h */ case   16:  		/* li R8, 1 */
		/* 8213FF18h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8213FF18h case   16:*/		return 0x8213FF1C;
		  /* 8213FF1Ch */ case   17:  		/* li R7, 2 */
		/* 8213FF1Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8213FF1Ch case   17:*/		return 0x8213FF20;
		  /* 8213FF20h */ case   18:  		/* li R6, 0 */
		/* 8213FF20h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213FF20h case   18:*/		return 0x8213FF24;
		  /* 8213FF24h */ case   19:  		/* mr R5, R28 */
		/* 8213FF24h case   19:*/		regs.R5 = regs.R28;
		/* 8213FF24h case   19:*/		return 0x8213FF28;
		  /* 8213FF28h */ case   20:  		/* ori R4, R4, 3 */
		/* 8213FF28h case   20:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 8213FF28h case   20:*/		return 0x8213FF2C;
		  /* 8213FF2Ch */ case   21:  		/* mr R3, R27 */
		/* 8213FF2Ch case   21:*/		regs.R3 = regs.R27;
		/* 8213FF2Ch case   21:*/		return 0x8213FF30;
		  /* 8213FF30h */ case   22:  		/* bl -342792 */
		/* 8213FF30h case   22:*/		regs.LR = 0x8213FF34; return 0x820EC428;
		/* 8213FF30h case   22:*/		return 0x8213FF34;
		  /* 8213FF34h */ case   23:  		/* or. R30, R3, R3 */
		/* 8213FF34h case   23:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213FF34h case   23:*/		return 0x8213FF38;
		  /* 8213FF38h */ case   24:  		/* bc 4, CR0_EQ, 44 */
		/* 8213FF38h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8213FF64;  }
		/* 8213FF38h case   24:*/		return 0x8213FF3C;
		  /* 8213FF3Ch */ case   25:  		/* lis R4, 4096 */
		/* 8213FF3Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8213FF3Ch case   25:*/		return 0x8213FF40;
		  /* 8213FF40h */ case   26:  		/* li R8, 1 */
		/* 8213FF40h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8213FF40h case   26:*/		return 0x8213FF44;
		  /* 8213FF44h */ case   27:  		/* li R7, 2 */
		/* 8213FF44h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8213FF44h case   27:*/		return 0x8213FF48;
		  /* 8213FF48h */ case   28:  		/* li R6, 0 */
		/* 8213FF48h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8213FF48h case   28:*/		return 0x8213FF4C;
		  /* 8213FF4Ch */ case   29:  		/* mr R5, R28 */
		/* 8213FF4Ch case   29:*/		regs.R5 = regs.R28;
		/* 8213FF4Ch case   29:*/		return 0x8213FF50;
		  /* 8213FF50h */ case   30:  		/* ori R4, R4, 4 */
		/* 8213FF50h case   30:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4);
		/* 8213FF50h case   30:*/		return 0x8213FF54;
		  /* 8213FF54h */ case   31:  		/* mr R3, R27 */
		/* 8213FF54h case   31:*/		regs.R3 = regs.R27;
		/* 8213FF54h case   31:*/		return 0x8213FF58;
		  /* 8213FF58h */ case   32:  		/* bl -342832 */
		/* 8213FF58h case   32:*/		regs.LR = 0x8213FF5C; return 0x820EC428;
		/* 8213FF58h case   32:*/		return 0x8213FF5C;
		  /* 8213FF5Ch */ case   33:  		/* or. R30, R3, R3 */
		/* 8213FF5Ch case   33:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8213FF5Ch case   33:*/		return 0x8213FF60;
		  /* 8213FF60h */ case   34:  		/* bc 12, CR0_EQ, 360 */
		/* 8213FF60h case   34:*/		if ( regs.CR[0].eq ) { return 0x821400C8;  }
		/* 8213FF60h case   34:*/		return 0x8213FF64;
	}
	return 0x8213FF64;
} // Block from 8213FED8h-8213FF64h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8213FF64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FF64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FF64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FF64);
		  /* 8213FF64h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8213FF64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8213FF64h case    0:*/		return 0x8213FF68;
		  /* 8213FF68h */ case    1:  		/* lwz R6, <#[R27 + 20]> */
		/* 8213FF68h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000014) );
		/* 8213FF68h case    1:*/		return 0x8213FF6C;
		  /* 8213FF6Ch */ case    2:  		/* lwz R10, <#[R27 + 132]> */
		/* 8213FF6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000084) );
		/* 8213FF6Ch case    2:*/		return 0x8213FF70;
		  /* 8213FF70h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8213FF70h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8213FF70h case    3:*/		return 0x8213FF74;
		  /* 8213FF74h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213FF74h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213FF74h case    4:*/		return 0x8213FF78;
		  /* 8213FF78h */ case    5:  		/* lwzx R11, <#[R11 + R6]> */
		/* 8213FF78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8213FF78h case    5:*/		return 0x8213FF7C;
		  /* 8213FF7Ch */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 8213FF7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8213FF7Ch case    6:*/		return 0x8213FF80;
		  /* 8213FF80h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8213FF80h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8213FF80h case    7:*/		return 0x8213FF84;
		  /* 8213FF84h */ case    8:  		/* bc 4, CR6_EQ, 324 */
		/* 8213FF84h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821400C8;  }
		/* 8213FF84h case    8:*/		return 0x8213FF88;
		  /* 8213FF88h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8213FF88h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8213FF88h case    9:*/		return 0x8213FF8C;
		  /* 8213FF8Ch */ case   10:  		/* li R7, 1 */
		/* 8213FF8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8213FF8Ch case   10:*/		return 0x8213FF90;
		  /* 8213FF90h */ case   11:  		/* rlwinm. R11, R11, 0, 12, 31 */
		/* 8213FF90h case   11:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R11,regs.R11);
		/* 8213FF90h case   11:*/		return 0x8213FF94;
		  /* 8213FF94h */ case   12:  		/* bc 12, CR0_EQ, 76 */
		/* 8213FF94h case   12:*/		if ( regs.CR[0].eq ) { return 0x8213FFE0;  }
		/* 8213FF94h case   12:*/		return 0x8213FF98;
		  /* 8213FF98h */ case   13:  		/* lwz R8, <#[R28 + 16]> */
		/* 8213FF98h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 8213FF98h case   13:*/		return 0x8213FF9C;
		  /* 8213FF9Ch */ case   14:  		/* mr R10, R22 */
		/* 8213FF9Ch case   14:*/		regs.R10 = regs.R22;
		/* 8213FF9Ch case   14:*/		return 0x8213FFA0;
		  /* 8213FFA0h */ case   15:  		/* lwz R9, <#[R30 + 8]> */
		/* 8213FFA0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8213FFA0h case   15:*/		return 0x8213FFA4;
		  /* 8213FFA4h */ case   16:  		/* mtspr CTR, R11 */
		/* 8213FFA4h case   16:*/		regs.CTR = regs.R11;
		/* 8213FFA4h case   16:*/		return 0x8213FFA8;
		  /* 8213FFA8h */ case   17:  		/* lwz R8, <#[R8]> */
		/* 8213FFA8h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 8213FFA8h case   17:*/		return 0x8213FFAC;
		  /* 8213FFACh */ case   18:  		/* lwzx R11, <#[R10 + R9]> */
		/* 8213FFACh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8213FFACh case   18:*/		return 0x8213FFB0;
		  /* 8213FFB0h */ case   19:  		/* cmplw CR6, R11, R8 */
		/* 8213FFB0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8213FFB0h case   19:*/		return 0x8213FFB4;
		  /* 8213FFB4h */ case   20:  		/* bc 4, CR6_EQ, 24 */
		/* 8213FFB4h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8213FFCC;  }
		/* 8213FFB4h case   20:*/		return 0x8213FFB8;
		  /* 8213FFB8h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8213FFB8h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8213FFB8h case   21:*/		return 0x8213FFBC;
		  /* 8213FFBCh */ case   22:  		/* lwzx R11, <#[R11 + R6]> */
		/* 8213FFBCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8213FFBCh case   22:*/		return 0x8213FFC0;
		  /* 8213FFC0h */ case   23:  		/* lwz R11, <#[R11 + 52]> */
		/* 8213FFC0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 8213FFC0h case   23:*/		return 0x8213FFC4;
		  /* 8213FFC4h */ case   24:  		/* rlwinm. R11, R11, 0, 11, 22 */
		/* 8213FFC4h case   24:*/		cpu::op::rlwinm<1,0,11,22>(regs,&regs.R11,regs.R11);
		/* 8213FFC4h case   24:*/		return 0x8213FFC8;
		  /* 8213FFC8h */ case   25:  		/* bc 12, CR0_EQ, 8 */
		/* 8213FFC8h case   25:*/		if ( regs.CR[0].eq ) { return 0x8213FFD0;  }
		/* 8213FFC8h case   25:*/		return 0x8213FFCC;
	}
	return 0x8213FFCC;
} // Block from 8213FF64h-8213FFCCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8213FFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FFCC);
		  /* 8213FFCCh */ case    0:  		/* mr R7, R22 */
		/* 8213FFCCh case    0:*/		regs.R7 = regs.R22;
		/* 8213FFCCh case    0:*/		return 0x8213FFD0;
	}
	return 0x8213FFD0;
} // Block from 8213FFCCh-8213FFD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8213FFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FFD0);
		  /* 8213FFD0h */ case    0:  		/* addi R10, R10, 4 */
		/* 8213FFD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8213FFD0h case    0:*/		return 0x8213FFD4;
		  /* 8213FFD4h */ case    1:  		/* bc 16, CR0_LT, -40 */
		/* 8213FFD4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8213FFAC;  }
		/* 8213FFD4h case    1:*/		return 0x8213FFD8;
		  /* 8213FFD8h */ case    2:  		/* cmpwi CR6, R7, 0 */
		/* 8213FFD8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8213FFD8h case    2:*/		return 0x8213FFDC;
		  /* 8213FFDCh */ case    3:  		/* bc 12, CR6_EQ, 236 */
		/* 8213FFDCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821400C8;  }
		/* 8213FFDCh case    3:*/		return 0x8213FFE0;
	}
	return 0x8213FFE0;
} // Block from 8213FFD0h-8213FFE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8213FFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FFE0);
		  /* 8213FFE0h */ case    0:  		/* li R3, 116 */
		/* 8213FFE0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 8213FFE0h case    0:*/		return 0x8213FFE4;
		  /* 8213FFE4h */ case    1:  		/* bl -277068 */
		/* 8213FFE4h case    1:*/		regs.LR = 0x8213FFE8; return 0x820FC598;
		/* 8213FFE4h case    1:*/		return 0x8213FFE8;
		  /* 8213FFE8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8213FFE8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8213FFE8h case    2:*/		return 0x8213FFEC;
		  /* 8213FFECh */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 8213FFECh case    3:*/		if ( regs.CR[0].eq ) { return 0x8213FFFC;  }
		/* 8213FFECh case    3:*/		return 0x8213FFF0;
		  /* 8213FFF0h */ case    4:  		/* bl -278864 */
		/* 8213FFF0h case    4:*/		regs.LR = 0x8213FFF4; return 0x820FBEA0;
		/* 8213FFF0h case    4:*/		return 0x8213FFF4;
		  /* 8213FFF4h */ case    5:  		/* mr R31, R3 */
		/* 8213FFF4h case    5:*/		regs.R31 = regs.R3;
		/* 8213FFF4h case    5:*/		return 0x8213FFF8;
		  /* 8213FFF8h */ case    6:  		/* b 8 */
		/* 8213FFF8h case    6:*/		return 0x82140000;
		/* 8213FFF8h case    6:*/		return 0x8213FFFC;
	}
	return 0x8213FFFC;
} // Block from 8213FFE0h-8213FFFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8213FFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8213FFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8213FFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8213FFFC);
		  /* 8213FFFCh */ case    0:  		/* mr R31, R22 */
		/* 8213FFFCh case    0:*/		regs.R31 = regs.R22;
		/* 8213FFFCh case    0:*/		return 0x82140000;
	}
	return 0x82140000;
} // Block from 8213FFFCh-82140000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140000);
		  /* 82140000h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82140000h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82140000h case    0:*/		return 0x82140004;
		  /* 82140004h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82140004h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82140014;  }
		/* 82140004h case    1:*/		return 0x82140008;
		  /* 82140008h */ case    2:  		/* lis R3, -32761 */
		/* 82140008h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82140008h case    2:*/		return 0x8214000C;
		  /* 8214000Ch */ case    3:  		/* ori R3, R3, 14 */
		/* 8214000Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8214000Ch case    3:*/		return 0x82140010;
		  /* 82140010h */ case    4:  		/* b 896 */
		/* 82140010h case    4:*/		return 0x82140390;
		/* 82140010h case    4:*/		return 0x82140014;
	}
	return 0x82140014;
} // Block from 82140000h-82140014h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82140014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140014);
		  /* 82140014h */ case    0:  		/* li R11, 5 */
		/* 82140014h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82140014h case    0:*/		return 0x82140018;
		  /* 82140018h */ case    1:  		/* lwz R6, <#[R30 + 12]> */
		/* 82140018h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 82140018h case    1:*/		return 0x8214001C;
		  /* 8214001Ch */ case    2:  		/* mr R4, R29 */
		/* 8214001Ch case    2:*/		regs.R4 = regs.R29;
		/* 8214001Ch case    2:*/		return 0x82140020;
		  /* 82140020h */ case    3:  		/* lwz R5, <#[R28 + 4]> */
		/* 82140020h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000004) );
		/* 82140020h case    3:*/		return 0x82140024;
		  /* 82140024h */ case    4:  		/* li R7, 0 */
		/* 82140024h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82140024h case    4:*/		return 0x82140028;
		  /* 82140028h */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 82140028h case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 82140028h case    5:*/		return 0x8214002C;
		  /* 8214002Ch */ case    6:  		/* mr R3, R31 */
		/* 8214002Ch case    6:*/		regs.R3 = regs.R31;
		/* 8214002Ch case    6:*/		return 0x82140030;
		  /* 82140030h */ case    7:  		/* bl -276992 */
		/* 82140030h case    7:*/		regs.LR = 0x82140034; return 0x820FC630;
		/* 82140030h case    7:*/		return 0x82140034;
		  /* 82140034h */ case    8:  		/* or. R29, R3, R3 */
		/* 82140034h case    8:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82140034h case    8:*/		return 0x82140038;
		  /* 82140038h */ case    9:  		/* bc 12, CR0_LT, 120 */
		/* 82140038h case    9:*/		if ( regs.CR[0].lt ) { return 0x821400B0;  }
		/* 82140038h case    9:*/		return 0x8214003C;
		  /* 8214003Ch */ case   10:  		/* mr R4, R28 */
		/* 8214003Ch case   10:*/		regs.R4 = regs.R28;
		/* 8214003Ch case   10:*/		return 0x82140040;
		  /* 82140040h */ case   11:  		/* mr R3, R31 */
		/* 82140040h case   11:*/		regs.R3 = regs.R31;
		/* 82140040h case   11:*/		return 0x82140044;
		  /* 82140044h */ case   12:  		/* bl -278868 */
		/* 82140044h case   12:*/		regs.LR = 0x82140048; return 0x820FBEF0;
		/* 82140044h case   12:*/		return 0x82140048;
		  /* 82140048h */ case   13:  		/* or. R29, R3, R3 */
		/* 82140048h case   13:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82140048h case   13:*/		return 0x8214004C;
		  /* 8214004Ch */ case   14:  		/* bc 12, CR0_LT, 100 */
		/* 8214004Ch case   14:*/		if ( regs.CR[0].lt ) { return 0x821400B0;  }
		/* 8214004Ch case   14:*/		return 0x82140050;
		  /* 82140050h */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 82140050h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82140050h case   15:*/		return 0x82140054;
		  /* 82140054h */ case   16:  		/* lwz R4, <#[R30 + 16]> */
		/* 82140054h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 82140054h case   16:*/		return 0x82140058;
		  /* 82140058h */ case   17:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82140058h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82140058h case   17:*/		return 0x8214005C;
		  /* 8214005Ch */ case   18:  		/* lwz R3, <#[R31 + 16]> */
		/* 8214005Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8214005Ch case   18:*/		return 0x82140060;
		  /* 82140060h */ case   19:  		/* bl -714416 */
		/* 82140060h case   19:*/		regs.LR = 0x82140064; return 0x820919B0;
		/* 82140060h case   19:*/		return 0x82140064;
		  /* 82140064h */ case   20:  		/* lwz R11, <#[R31 + 4]> */
		/* 82140064h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82140064h case   20:*/		return 0x82140068;
		  /* 82140068h */ case   21:  		/* lwz R4, <#[R28 + 8]> */
		/* 82140068h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 82140068h case   21:*/		return 0x8214006C;
		  /* 8214006Ch */ case   22:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8214006Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8214006Ch case   22:*/		return 0x82140070;
		  /* 82140070h */ case   23:  		/* lwz R3, <#[R31 + 8]> */
		/* 82140070h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82140070h case   23:*/		return 0x82140074;
		  /* 82140074h */ case   24:  		/* bl -714436 */
		/* 82140074h case   24:*/		regs.LR = 0x82140078; return 0x820919B0;
		/* 82140074h case   24:*/		return 0x82140078;
		  /* 82140078h */ case   25:  		/* stw R22, <#[R30]> */
		/* 82140078h case   25:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000000) );
		/* 82140078h case   25:*/		return 0x8214007C;
		  /* 8214007Ch */ case   26:  		/* lwz R30, <#[R27 + 260]> */
		/* 8214007Ch case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000104) );
		/* 8214007Ch case   26:*/		return 0x82140080;
		  /* 82140080h */ case   27:  		/* cmplwi CR6, R30, 0 */
		/* 82140080h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82140080h case   27:*/		return 0x82140084;
		  /* 82140084h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 82140084h case   28:*/		if ( regs.CR[6].eq ) { return 0x82140098;  }
		/* 82140084h case   28:*/		return 0x82140088;
		  /* 82140088h */ case   29:  		/* mr R3, R30 */
		/* 82140088h case   29:*/		regs.R3 = regs.R30;
		/* 82140088h case   29:*/		return 0x8214008C;
		  /* 8214008Ch */ case   30:  		/* bl 906036 */
		/* 8214008Ch case   30:*/		regs.LR = 0x82140090; return 0x8221D3C0;
		/* 8214008Ch case   30:*/		return 0x82140090;
		  /* 82140090h */ case   31:  		/* mr R3, R30 */
		/* 82140090h case   31:*/		regs.R3 = regs.R30;
		/* 82140090h case   31:*/		return 0x82140094;
		  /* 82140094h */ case   32:  		/* bl -277156 */
		/* 82140094h case   32:*/		regs.LR = 0x82140098; return 0x820FC5F0;
		/* 82140094h case   32:*/		return 0x82140098;
	}
	return 0x82140098;
} // Block from 82140014h-82140098h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82140098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140098);
		  /* 82140098h */ case    0:  		/* lwz R11, <#[R27 + 256]> */
		/* 82140098h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000100) );
		/* 82140098h case    0:*/		return 0x8214009C;
		  /* 8214009Ch */ case    1:  		/* lwz R10, <#[R27 + 24]> */
		/* 8214009Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 8214009Ch case    1:*/		return 0x821400A0;
		  /* 821400A0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821400A0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821400A0h case    2:*/		return 0x821400A4;
		  /* 821400A4h */ case    3:  		/* stwx R31, <#[R11 + R10]> */
		/* 821400A4h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821400A4h case    3:*/		return 0x821400A8;
		  /* 821400A8h */ case    4:  		/* stw R31, <#[R27 + 260]> */
		/* 821400A8h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000104) );
		/* 821400A8h case    4:*/		return 0x821400AC;
		  /* 821400ACh */ case    5:  		/* b 736 */
		/* 821400ACh case    5:*/		return 0x8214038C;
		/* 821400ACh case    5:*/		return 0x821400B0;
	}
	return 0x821400B0;
} // Block from 82140098h-821400B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821400B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821400B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821400B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821400B0);
		  /* 821400B0h */ case    0:  		/* mr R3, R31 */
		/* 821400B0h case    0:*/		regs.R3 = regs.R31;
		/* 821400B0h case    0:*/		return 0x821400B4;
		  /* 821400B4h */ case    1:  		/* bl 905996 */
		/* 821400B4h case    1:*/		regs.LR = 0x821400B8; return 0x8221D3C0;
		/* 821400B4h case    1:*/		return 0x821400B8;
		  /* 821400B8h */ case    2:  		/* mr R3, R31 */
		/* 821400B8h case    2:*/		regs.R3 = regs.R31;
		/* 821400B8h case    2:*/		return 0x821400BC;
		  /* 821400BCh */ case    3:  		/* bl -277196 */
		/* 821400BCh case    3:*/		regs.LR = 0x821400C0; return 0x820FC5F0;
		/* 821400BCh case    3:*/		return 0x821400C0;
	}
	return 0x821400C0;
} // Block from 821400B0h-821400C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821400C0h
// Function '?FindOutput@CVSProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1PAH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821400C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821400C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821400C0);
		  /* 821400C0h */ case    0:  		/* mr R3, R29 */
		/* 821400C0h case    0:*/		regs.R3 = regs.R29;
		/* 821400C0h case    0:*/		return 0x821400C4;
		  /* 821400C4h */ case    1:  		/* b 716 */
		/* 821400C4h case    1:*/		return 0x82140390;
		/* 821400C4h case    1:*/		return 0x821400C8;
	}
	return 0x821400C8;
} // Block from 821400C0h-821400C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821400C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821400C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821400C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821400C8);
		  /* 821400C8h */ case    0:  		/* cmplwi CR6, R29, 3 */
		/* 821400C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 821400C8h case    0:*/		return 0x821400CC;
		  /* 821400CCh */ case    1:  		/* bc 4, CR6_EQ, 704 */
		/* 821400CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214038C;  }
		/* 821400CCh case    1:*/		return 0x821400D0;
		  /* 821400D0h */ case    2:  		/* lhz R11, <#[R27 + 202]> */
		/* 821400D0h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000CA) );
		/* 821400D0h case    2:*/		return 0x821400D4;
		  /* 821400D4h */ case    3:  		/* cmplwi CR6, R11, 512 */
		/* 821400D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 821400D4h case    3:*/		return 0x821400D8;
		  /* 821400D8h */ case    4:  		/* bc 12, CR6_LT, 692 */
		/* 821400D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214038C;  }
		/* 821400D8h case    4:*/		return 0x821400DC;
		  /* 821400DCh */ case    5:  		/* lwz R25, <#[R27 + 260]> */
		/* 821400DCh case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R27 + 0x00000104) );
		/* 821400DCh case    5:*/		return 0x821400E0;
		  /* 821400E0h */ case    6:  		/* lwz R11, <#[R25 + 8]> */
		/* 821400E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821400E0h case    6:*/		return 0x821400E4;
		  /* 821400E4h */ case    7:  		/* addi R10, R11, 12 */
		/* 821400E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xC);
		/* 821400E4h case    7:*/		return 0x821400E8;
		  /* 821400E8h */ case    8:  		/* addi R9, R11, 12 */
		/* 821400E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xC);
		/* 821400E8h case    8:*/		return 0x821400EC;
		  /* 821400ECh */ case    9:  		/* lbz R8, <#[R11]> */
		/* 821400ECh case    9:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821400ECh case    9:*/		return 0x821400F0;
		  /* 821400F0h */ case   10:  		/* lbz R7, <#[R10]> */
		/* 821400F0h case   10:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821400F0h case   10:*/		return 0x821400F4;
		  /* 821400F4h */ case   11:  		/* subf. R8, R7, R8 */
		/* 821400F4h case   11:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821400F4h case   11:*/		return 0x821400F8;
		  /* 821400F8h */ case   12:  		/* bc 4, CR0_EQ, 20 */
		/* 821400F8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8214010C;  }
		/* 821400F8h case   12:*/		return 0x821400FC;
		  /* 821400FCh */ case   13:  		/* addi R11, R11, 1 */
		/* 821400FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821400FCh case   13:*/		return 0x82140100;
		  /* 82140100h */ case   14:  		/* addi R10, R10, 1 */
		/* 82140100h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82140100h case   14:*/		return 0x82140104;
		  /* 82140104h */ case   15:  		/* cmpw CR6, R11, R9 */
		/* 82140104h case   15:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 82140104h case   15:*/		return 0x82140108;
		  /* 82140108h */ case   16:  		/* bc 4, CR6_EQ, -28 */
		/* 82140108h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821400EC;  }
		/* 82140108h case   16:*/		return 0x8214010C;
	}
	return 0x8214010C;
} // Block from 821400C8h-8214010Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214010Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214010C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214010C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214010C);
		  /* 8214010Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8214010Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8214010Ch case    0:*/		return 0x82140110;
		  /* 82140110h */ case    1:  		/* bc 4, CR0_EQ, 636 */
		/* 82140110h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214038C;  }
		/* 82140110h case    1:*/		return 0x82140114;
		  /* 82140114h */ case    2:  		/* lis R11, 4208 */
		/* 82140114h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x1070);
		/* 82140114h case    2:*/		return 0x82140118;
		  /* 82140118h */ case    3:  		/* li R8, 1 */
		/* 82140118h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82140118h case    3:*/		return 0x8214011C;
		  /* 8214011Ch */ case    4:  		/* ori R23, R11, 1 */
		/* 8214011Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R11,0x1);
		/* 8214011Ch case    4:*/		return 0x82140120;
		  /* 82140120h */ case    5:  		/* li R7, 2 */
		/* 82140120h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82140120h case    5:*/		return 0x82140124;
		  /* 82140124h */ case    6:  		/* li R6, 0 */
		/* 82140124h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82140124h case    6:*/		return 0x82140128;
		  /* 82140128h */ case    7:  		/* mr R5, R25 */
		/* 82140128h case    7:*/		regs.R5 = regs.R25;
		/* 82140128h case    7:*/		return 0x8214012C;
		  /* 8214012Ch */ case    8:  		/* mr R4, R23 */
		/* 8214012Ch case    8:*/		regs.R4 = regs.R23;
		/* 8214012Ch case    8:*/		return 0x82140130;
		  /* 82140130h */ case    9:  		/* mr R3, R27 */
		/* 82140130h case    9:*/		regs.R3 = regs.R27;
		/* 82140130h case    9:*/		return 0x82140134;
		  /* 82140134h */ case   10:  		/* bl -343308 */
		/* 82140134h case   10:*/		regs.LR = 0x82140138; return 0x820EC428;
		/* 82140134h case   10:*/		return 0x82140138;
		  /* 82140138h */ case   11:  		/* or. R24, R3, R3 */
		/* 82140138h case   11:*/		cpu::op::or<1>(regs,&regs.R24,regs.R3,regs.R3);
		/* 82140138h case   11:*/		return 0x8214013C;
		  /* 8214013Ch */ case   12:  		/* bc 12, CR0_EQ, 592 */
		/* 8214013Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8214038C;  }
		/* 8214013Ch case   12:*/		return 0x82140140;
		  /* 82140140h */ case   13:  		/* lis R4, 8272 */
		/* 82140140h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2050);
		/* 82140140h case   13:*/		return 0x82140144;
		  /* 82140144h */ case   14:  		/* li R8, 1 */
		/* 82140144h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82140144h case   14:*/		return 0x82140148;
		  /* 82140148h */ case   15:  		/* li R7, 2 */
		/* 82140148h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82140148h case   15:*/		return 0x8214014C;
		  /* 8214014Ch */ case   16:  		/* addi R6, R1, 80 */
		/* 8214014Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8214014Ch case   16:*/		return 0x82140150;
		  /* 82140150h */ case   17:  		/* mr R5, R24 */
		/* 82140150h case   17:*/		regs.R5 = regs.R24;
		/* 82140150h case   17:*/		return 0x82140154;
		  /* 82140154h */ case   18:  		/* ori R4, R4, 3 */
		/* 82140154h case   18:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3);
		/* 82140154h case   18:*/		return 0x82140158;
		  /* 82140158h */ case   19:  		/* mr R3, R27 */
		/* 82140158h case   19:*/		regs.R3 = regs.R27;
		/* 82140158h case   19:*/		return 0x8214015C;
		  /* 8214015Ch */ case   20:  		/* bl -343348 */
		/* 8214015Ch case   20:*/		regs.LR = 0x82140160; return 0x820EC428;
		/* 8214015Ch case   20:*/		return 0x82140160;
		  /* 82140160h */ case   21:  		/* or. R31, R3, R3 */
		/* 82140160h case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82140160h case   21:*/		return 0x82140164;
		  /* 82140164h */ case   22:  		/* bc 4, CR0_EQ, 44 */
		/* 82140164h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82140190;  }
		/* 82140164h case   22:*/		return 0x82140168;
		  /* 82140168h */ case   23:  		/* lis R4, 8272 */
		/* 82140168h case   23:*/		cpu::op::lis<0>(regs,&regs.R4,0x2050);
		/* 82140168h case   23:*/		return 0x8214016C;
		  /* 8214016Ch */ case   24:  		/* li R8, 1 */
		/* 8214016Ch case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8214016Ch case   24:*/		return 0x82140170;
		  /* 82140170h */ case   25:  		/* li R7, 2 */
		/* 82140170h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82140170h case   25:*/		return 0x82140174;
		  /* 82140174h */ case   26:  		/* addi R6, R1, 80 */
		/* 82140174h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82140174h case   26:*/		return 0x82140178;
		  /* 82140178h */ case   27:  		/* mr R5, R24 */
		/* 82140178h case   27:*/		regs.R5 = regs.R24;
		/* 82140178h case   27:*/		return 0x8214017C;
		  /* 8214017Ch */ case   28:  		/* ori R4, R4, 4 */
		/* 8214017Ch case   28:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4);
		/* 8214017Ch case   28:*/		return 0x82140180;
		  /* 82140180h */ case   29:  		/* mr R3, R27 */
		/* 82140180h case   29:*/		regs.R3 = regs.R27;
		/* 82140180h case   29:*/		return 0x82140184;
		  /* 82140184h */ case   30:  		/* bl -343388 */
		/* 82140184h case   30:*/		regs.LR = 0x82140188; return 0x820EC428;
		/* 82140184h case   30:*/		return 0x82140188;
		  /* 82140188h */ case   31:  		/* or. R31, R3, R3 */
		/* 82140188h case   31:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82140188h case   31:*/		return 0x8214018C;
		  /* 8214018Ch */ case   32:  		/* bc 12, CR0_EQ, 512 */
		/* 8214018Ch case   32:*/		if ( regs.CR[0].eq ) { return 0x8214038C;  }
		/* 8214018Ch case   32:*/		return 0x82140190;
	}
	return 0x82140190;
} // Block from 8214010Ch-82140190h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82140190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140190);
		  /* 82140190h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 82140190h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82140190h case    0:*/		return 0x82140194;
		  /* 82140194h */ case    1:  		/* lwz R8, <#[R31 + 16]> */
		/* 82140194h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82140194h case    1:*/		return 0x82140198;
		  /* 82140198h */ case    2:  		/* lwz R7, <#[R31]> */
		/* 82140198h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82140198h case    2:*/		return 0x8214019C;
		  /* 8214019Ch */ case    3:  		/* mr R9, R11 */
		/* 8214019Ch case    3:*/		regs.R9 = regs.R11;
		/* 8214019Ch case    3:*/		return 0x821401A0;
		  /* 821401A0h */ case    4:  		/* lwz R10, <#[R27 + 20]> */
		/* 821401A0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 821401A0h case    4:*/		return 0x821401A4;
		  /* 821401A4h */ case    5:  		/* rlwinm R29, R7, 0, 12, 31 */
		/* 821401A4h case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R7);
		/* 821401A4h case    5:*/		return 0x821401A8;
		  /* 821401A8h */ case    6:  		/* lwz R7, <#[R11]> */
		/* 821401A8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821401A8h case    6:*/		return 0x821401AC;
		  /* 821401ACh */ case    7:  		/* lwz R6, <#[R8]> */
		/* 821401ACh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000000) );
		/* 821401ACh case    7:*/		return 0x821401B0;
		  /* 821401B0h */ case    8:  		/* rlwinm R28, R29, 2, 0, 29 */
		/* 821401B0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R29);
		/* 821401B0h case    8:*/		return 0x821401B4;
		  /* 821401B4h */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821401B4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821401B4h case    9:*/		return 0x821401B8;
		  /* 821401B8h */ case   10:  		/* rlwinm R5, R7, 2, 0, 29 */
		/* 821401B8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R7);
		/* 821401B8h case   10:*/		return 0x821401BC;
		  /* 821401BCh */ case   11:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 821401BCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 821401BCh case   11:*/		return 0x821401C0;
		  /* 821401C0h */ case   12:  		/* add R11, R28, R11 */
		/* 821401C0h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821401C0h case   12:*/		return 0x821401C4;
		  /* 821401C4h */ case   13:  		/* addi R7, R11, 12 */
		/* 821401C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xC);
		/* 821401C4h case   13:*/		return 0x821401C8;
		  /* 821401C8h */ case   14:  		/* lwzx R5, <#[R5 + R10]> */
		/* 821401C8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 821401C8h case   14:*/		return 0x821401CC;
		  /* 821401CCh */ case   15:  		/* lwzx R4, <#[R6 + R10]> */
		/* 821401CCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 821401CCh case   15:*/		return 0x821401D0;
		  /* 821401D0h */ case   16:  		/* lbz R6, <#[R11]> */
		/* 821401D0h case   16:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821401D0h case   16:*/		return 0x821401D4;
		  /* 821401D4h */ case   17:  		/* lbz R3, <#[R9]> */
		/* 821401D4h case   17:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R9 + 0x00000000) );
		/* 821401D4h case   17:*/		return 0x821401D8;
		  /* 821401D8h */ case   18:  		/* subf. R6, R3, R6 */
		/* 821401D8h case   18:*/		cpu::op::subf<1>(regs,&regs.R6,regs.R3,regs.R6);
		/* 821401D8h case   18:*/		return 0x821401DC;
		  /* 821401DCh */ case   19:  		/* bc 4, CR0_EQ, 20 */
		/* 821401DCh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821401F0;  }
		/* 821401DCh case   19:*/		return 0x821401E0;
		  /* 821401E0h */ case   20:  		/* addi R11, R11, 1 */
		/* 821401E0h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821401E0h case   20:*/		return 0x821401E4;
		  /* 821401E4h */ case   21:  		/* addi R9, R9, 1 */
		/* 821401E4h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821401E4h case   21:*/		return 0x821401E8;
		  /* 821401E8h */ case   22:  		/* cmpw CR6, R11, R7 */
		/* 821401E8h case   22:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R7);
		/* 821401E8h case   22:*/		return 0x821401EC;
		  /* 821401ECh */ case   23:  		/* bc 4, CR6_EQ, -28 */
		/* 821401ECh case   23:*/		if ( !regs.CR[6].eq ) { return 0x821401D0;  }
		/* 821401ECh case   23:*/		return 0x821401F0;
	}
	return 0x821401F0;
} // Block from 82140190h-821401F0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821401F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821401F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821401F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821401F0);
		  /* 821401F0h */ case    0:  		/* cmpwi CR0, R6, 0 */
		/* 821401F0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R6,0x00000000);
		/* 821401F0h case    0:*/		return 0x821401F4;
		  /* 821401F4h */ case    1:  		/* bc 4, CR0_EQ, 408 */
		/* 821401F4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214038C;  }
		/* 821401F4h case    1:*/		return 0x821401F8;
		  /* 821401F8h */ case    2:  		/* mr R11, R22 */
		/* 821401F8h case    2:*/		regs.R11 = regs.R22;
		/* 821401F8h case    2:*/		return 0x821401FC;
		  /* 821401FCh */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821401FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821401FCh case    3:*/		return 0x82140200;
		  /* 82140200h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 82140200h case    4:*/		if ( regs.CR[6].eq ) { return 0x82140230;  }
		/* 82140200h case    4:*/		return 0x82140204;
		  /* 82140204h */ case    5:  		/* mr R9, R22 */
		/* 82140204h case    5:*/		regs.R9 = regs.R22;
		/* 82140204h case    5:*/		return 0x82140208;
		  /* 82140208h */ case    6:  		/* lwzx R7, <#[R9 + R8]> */
		/* 82140208h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82140208h case    6:*/		return 0x8214020C;
		  /* 8214020Ch */ case    7:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8214020Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8214020Ch case    7:*/		return 0x82140210;
	}
	return 0x82140210;
} // Block from 821401F0h-82140210h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140210h
// Function '?FindInput@CVSProgram@D3DXShader@@MAAJPAVCArgument@2@AAK1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140210);
		  /* 82140210h */ case    0:  		/* lwzx R7, <#[R7 + R10]> */
		/* 82140210h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82140210h case    0:*/		return 0x82140214;
		  /* 82140214h */ case    1:  		/* lwz R7, <#[R7 + 16]> */
		/* 82140214h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 82140214h case    1:*/		return 0x82140218;
		  /* 82140218h */ case    2:  		/* cmplw CR6, R7, R11 */
		/* 82140218h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82140218h case    2:*/		return 0x8214021C;
		  /* 8214021Ch */ case    3:  		/* bc 4, CR6_EQ, 368 */
		/* 8214021Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214038C;  }
		/* 8214021Ch case    3:*/		return 0x82140220;
		  /* 82140220h */ case    4:  		/* addi R11, R11, 1 */
		/* 82140220h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82140220h case    4:*/		return 0x82140224;
		  /* 82140224h */ case    5:  		/* addi R9, R9, 4 */
		/* 82140224h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82140224h case    5:*/		return 0x82140228;
		  /* 82140228h */ case    6:  		/* cmplw CR6, R11, R29 */
		/* 82140228h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82140228h case    6:*/		return 0x8214022C;
		  /* 8214022Ch */ case    7:  		/* bc 12, CR6_LT, -36 */
		/* 8214022Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x82140208;  }
		/* 8214022Ch case    7:*/		return 0x82140230;
	}
	return 0x82140230;
} // Block from 82140210h-82140230h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140230);
		  /* 82140230h */ case    0:  		/* lwz R11, <#[R5 + 4]> */
		/* 82140230h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82140230h case    0:*/		return 0x82140234;
		  /* 82140234h */ case    1:  		/* lwz R10, <#[R4 + 4]> */
		/* 82140234h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82140234h case    1:*/		return 0x82140238;
		  /* 82140238h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82140238h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82140238h case    2:*/		return 0x8214023C;
		  /* 8214023Ch */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 8214023Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82140250;  }
		/* 8214023Ch case    3:*/		return 0x82140240;
		  /* 82140240h */ case    4:  		/* lwz R11, <#[R5 + 12]> */
		/* 82140240h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000000C) );
		/* 82140240h case    4:*/		return 0x82140244;
		  /* 82140244h */ case    5:  		/* lwz R10, <#[R4 + 12]> */
		/* 82140244h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 82140244h case    5:*/		return 0x82140248;
		  /* 82140248h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82140248h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82140248h case    6:*/		return 0x8214024C;
		  /* 8214024Ch */ case    7:  		/* bc 12, CR6_EQ, 320 */
		/* 8214024Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8214038C;  }
		/* 8214024Ch case    7:*/		return 0x82140250;
	}
	return 0x82140250;
} // Block from 82140230h-82140250h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140250);
		  /* 82140250h */ case    0:  		/* li R3, 116 */
		/* 82140250h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82140250h case    0:*/		return 0x82140254;
		  /* 82140254h */ case    1:  		/* bl -277692 */
		/* 82140254h case    1:*/		regs.LR = 0x82140258; return 0x820FC598;
		/* 82140254h case    1:*/		return 0x82140258;
		  /* 82140258h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82140258h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82140258h case    2:*/		return 0x8214025C;
		  /* 8214025Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 8214025Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8214026C;  }
		/* 8214025Ch case    3:*/		return 0x82140260;
		  /* 82140260h */ case    4:  		/* bl -279488 */
		/* 82140260h case    4:*/		regs.LR = 0x82140264; return 0x820FBEA0;
		/* 82140260h case    4:*/		return 0x82140264;
		  /* 82140264h */ case    5:  		/* mr R30, R3 */
		/* 82140264h case    5:*/		regs.R30 = regs.R3;
		/* 82140264h case    5:*/		return 0x82140268;
		  /* 82140268h */ case    6:  		/* b 8 */
		/* 82140268h case    6:*/		return 0x82140270;
		/* 82140268h case    6:*/		return 0x8214026C;
	}
	return 0x8214026C;
} // Block from 82140250h-8214026Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214026Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214026C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214026C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214026C);
		  /* 8214026Ch */ case    0:  		/* mr R30, R22 */
		/* 8214026Ch case    0:*/		regs.R30 = regs.R22;
		/* 8214026Ch case    0:*/		return 0x82140270;
	}
	return 0x82140270;
} // Block from 8214026Ch-82140270h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140270);
		  /* 82140270h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82140270h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82140270h case    0:*/		return 0x82140274;
		  /* 82140274h */ case    1:  		/* bc 12, CR6_EQ, -620 */
		/* 82140274h case    1:*/		if ( regs.CR[6].eq ) { return 0x82140008;  }
		/* 82140274h case    1:*/		return 0x82140278;
		  /* 82140278h */ case    2:  		/* rlwinm R26, R29, 0, 12, 31 */
		/* 82140278h case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R29);
		/* 82140278h case    2:*/		return 0x8214027C;
		  /* 8214027Ch */ case    3:  		/* li R7, 0 */
		/* 8214027Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214027Ch case    3:*/		return 0x82140280;
		  /* 82140280h */ case    4:  		/* mr R6, R29 */
		/* 82140280h case    4:*/		regs.R6 = regs.R29;
		/* 82140280h case    4:*/		return 0x82140284;
		  /* 82140284h */ case    5:  		/* mr R5, R29 */
		/* 82140284h case    5:*/		regs.R5 = regs.R29;
		/* 82140284h case    5:*/		return 0x82140288;
		  /* 82140288h */ case    6:  		/* oris R4, R26, 28704 */
		/* 82140288h case    6:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R26,0x7020);
		/* 82140288h case    6:*/		return 0x8214028C;
		  /* 8214028Ch */ case    7:  		/* mr R3, R30 */
		/* 8214028Ch case    7:*/		regs.R3 = regs.R30;
		/* 8214028Ch case    7:*/		return 0x82140290;
	}
	return 0x82140290;
} // Block from 82140270h-82140290h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140290h
// Function '?GenerateCode@CVSProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140290);
		  /* 82140290h */ case    0:  		/* bl -277600 */
		/* 82140290h case    0:*/		regs.LR = 0x82140294; return 0x820FC630;
		/* 82140290h case    0:*/		return 0x82140294;
		  /* 82140294h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 82140294h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140294h case    1:*/		return 0x82140298;
		  /* 82140298h */ case    2:  		/* bc 12, CR0_LT, 248 */
		/* 82140298h case    2:*/		if ( regs.CR[0].lt ) { return 0x82140390;  }
		/* 82140298h case    2:*/		return 0x8214029C;
		  /* 8214029Ch */ case    3:  		/* mr R4, R31 */
		/* 8214029Ch case    3:*/		regs.R4 = regs.R31;
		/* 8214029Ch case    3:*/		return 0x821402A0;
		  /* 821402A0h */ case    4:  		/* mr R3, R30 */
		/* 821402A0h case    4:*/		regs.R3 = regs.R30;
		/* 821402A0h case    4:*/		return 0x821402A4;
		  /* 821402A4h */ case    5:  		/* bl -279476 */
		/* 821402A4h case    5:*/		regs.LR = 0x821402A8; return 0x820FBEF0;
		/* 821402A4h case    5:*/		return 0x821402A8;
		  /* 821402A8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821402A8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821402A8h case    6:*/		return 0x821402AC;
		  /* 821402ACh */ case    7:  		/* bc 12, CR0_LT, 228 */
		/* 821402ACh case    7:*/		if ( regs.CR[0].lt ) { return 0x82140390;  }
		/* 821402ACh case    7:*/		return 0x821402B0;
	}
	return 0x821402B0;
} // Block from 82140290h-821402B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821402B0h
// Function '?Translate@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821402B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821402B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821402B0);
		  /* 821402B0h */ case    0:  		/* mr R5, R28 */
		/* 821402B0h case    0:*/		regs.R5 = regs.R28;
		/* 821402B0h case    0:*/		return 0x821402B4;
		  /* 821402B4h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 821402B4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821402B4h case    1:*/		return 0x821402B8;
		  /* 821402B8h */ case    2:  		/* lwz R3, <#[R30 + 16]> */
		/* 821402B8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821402B8h case    2:*/		return 0x821402BC;
		  /* 821402BCh */ case    3:  		/* bl -715020 */
		/* 821402BCh case    3:*/		regs.LR = 0x821402C0; return 0x820919B0;
		/* 821402BCh case    3:*/		return 0x821402C0;
		  /* 821402C0h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821402C0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821402C0h case    4:*/		return 0x821402C4;
		  /* 821402C4h */ case    5:  		/* mr R5, R28 */
		/* 821402C4h case    5:*/		regs.R5 = regs.R28;
		/* 821402C4h case    5:*/		return 0x821402C8;
		  /* 821402C8h */ case    6:  		/* lwz R3, <#[R30 + 8]> */
		/* 821402C8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 821402C8h case    6:*/		return 0x821402CC;
		  /* 821402CCh */ case    7:  		/* add R4, R28, R11 */
		/* 821402CCh case    7:*/		cpu::op::add<0>(regs,&regs.R4,regs.R28,regs.R11);
		/* 821402CCh case    7:*/		return 0x821402D0;
		  /* 821402D0h */ case    8:  		/* bl -715040 */
		/* 821402D0h case    8:*/		regs.LR = 0x821402D4; return 0x820919B0;
		/* 821402D0h case    8:*/		return 0x821402D4;
		  /* 821402D4h */ case    9:  		/* lwz R11, <#[R27]> */
		/* 821402D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821402D4h case    9:*/		return 0x821402D8;
		  /* 821402D8h */ case   10:  		/* li R5, 0 */
		/* 821402D8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821402D8h case   10:*/		return 0x821402DC;
		  /* 821402DCh */ case   11:  		/* mr R4, R30 */
		/* 821402DCh case   11:*/		regs.R4 = regs.R30;
		/* 821402DCh case   11:*/		return 0x821402E0;
		  /* 821402E0h */ case   12:  		/* mr R3, R27 */
		/* 821402E0h case   12:*/		regs.R3 = regs.R27;
		/* 821402E0h case   12:*/		return 0x821402E4;
		  /* 821402E4h */ case   13:  		/* lwz R11, <#[R11 + 32]> */
		/* 821402E4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821402E4h case   13:*/		return 0x821402E8;
		  /* 821402E8h */ case   14:  		/* mtspr CTR, R11 */
		/* 821402E8h case   14:*/		regs.CTR = regs.R11;
		/* 821402E8h case   14:*/		return 0x821402EC;
		  /* 821402ECh */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 821402ECh case   15:*/		if ( 1 ) { regs.LR = 0x821402F0; return (uint32)regs.CTR; }
		/* 821402ECh case   15:*/		return 0x821402F0;
		  /* 821402F0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 821402F0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821402F0h case   16:*/		return 0x821402F4;
		  /* 821402F4h */ case   17:  		/* bc 4, CR0_EQ, 136 */
		/* 821402F4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8214037C;  }
		/* 821402F4h case   17:*/		return 0x821402F8;
		  /* 821402F8h */ case   18:  		/* stw R22, <#[R25]> */
		/* 821402F8h case   18:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R25 + 0x00000000) );
		/* 821402F8h case   18:*/		return 0x821402FC;
		  /* 821402FCh */ case   19:  		/* mr R4, R30 */
		/* 821402FCh case   19:*/		regs.R4 = regs.R30;
		/* 821402FCh case   19:*/		return 0x82140300;
		  /* 82140300h */ case   20:  		/* stw R22, <#[R24]> */
		/* 82140300h case   20:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R24 + 0x00000000) );
		/* 82140300h case   20:*/		return 0x82140304;
		  /* 82140304h */ case   21:  		/* mr R3, R27 */
		/* 82140304h case   21:*/		regs.R3 = regs.R27;
		/* 82140304h case   21:*/		return 0x82140308;
		  /* 82140308h */ case   22:  		/* stw R22, <#[R31]> */
		/* 82140308h case   22:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000000) );
		/* 82140308h case   22:*/		return 0x8214030C;
		  /* 8214030Ch */ case   23:  		/* lwz R11, <#[R27]> */
		/* 8214030Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8214030Ch case   23:*/		return 0x82140310;
		  /* 82140310h */ case   24:  		/* lwz R11, <#[R11 + 52]> */
		/* 82140310h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 82140310h case   24:*/		return 0x82140314;
		  /* 82140314h */ case   25:  		/* lwz R5, <#[R1 + 80]> */
		/* 82140314h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82140314h case   25:*/		return 0x82140318;
		  /* 82140318h */ case   26:  		/* mtspr CTR, R11 */
		/* 82140318h case   26:*/		regs.CTR = regs.R11;
		/* 82140318h case   26:*/		return 0x8214031C;
		  /* 8214031Ch */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 8214031Ch case   27:*/		if ( 1 ) { regs.LR = 0x82140320; return (uint32)regs.CTR; }
		/* 8214031Ch case   27:*/		return 0x82140320;
		  /* 82140320h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 82140320h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140320h case   28:*/		return 0x82140324;
		  /* 82140324h */ case   29:  		/* bc 4, CR0_EQ, 64 */
		/* 82140324h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82140364;  }
		/* 82140324h case   29:*/		return 0x82140328;
		  /* 82140328h */ case   30:  		/* lwz R11, <#[R1 + 80]> */
		/* 82140328h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82140328h case   30:*/		return 0x8214032C;
		  /* 8214032Ch */ case   31:  		/* lwz R10, <#[R27 + 24]> */
		/* 8214032Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 8214032Ch case   31:*/		return 0x82140330;
		  /* 82140330h */ case   32:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82140330h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82140330h case   32:*/		return 0x82140334;
		  /* 82140334h */ case   33:  		/* lwzx R31, <#[R11 + R10]> */
		/* 82140334h case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82140334h case   33:*/		return 0x82140338;
		  /* 82140338h */ case   34:  		/* cmplwi CR6, R31, 0 */
		/* 82140338h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82140338h case   34:*/		return 0x8214033C;
		  /* 8214033Ch */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 8214033Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x82140350;  }
		/* 8214033Ch case   35:*/		return 0x82140340;
		  /* 82140340h */ case   36:  		/* mr R3, R31 */
		/* 82140340h case   36:*/		regs.R3 = regs.R31;
		/* 82140340h case   36:*/		return 0x82140344;
		  /* 82140344h */ case   37:  		/* bl 905340 */
		/* 82140344h case   37:*/		regs.LR = 0x82140348; return 0x8221D3C0;
		/* 82140344h case   37:*/		return 0x82140348;
		  /* 82140348h */ case   38:  		/* mr R3, R31 */
		/* 82140348h case   38:*/		regs.R3 = regs.R31;
		/* 82140348h case   38:*/		return 0x8214034C;
		  /* 8214034Ch */ case   39:  		/* bl -277852 */
		/* 8214034Ch case   39:*/		regs.LR = 0x82140350; return 0x820FC5F0;
		/* 8214034Ch case   39:*/		return 0x82140350;
	}
	return 0x82140350;
} // Block from 821402B0h-82140350h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82140350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140350);
		  /* 82140350h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82140350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82140350h case    0:*/		return 0x82140354;
		  /* 82140354h */ case    1:  		/* lwz R10, <#[R27 + 24]> */
		/* 82140354h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 82140354h case    1:*/		return 0x82140358;
		  /* 82140358h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82140358h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82140358h case    2:*/		return 0x8214035C;
		  /* 8214035Ch */ case    3:  		/* stwx R30, <#[R11 + R10]> */
		/* 8214035Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214035Ch case    3:*/		return 0x82140360;
		  /* 82140360h */ case    4:  		/* b 44 */
		/* 82140360h case    4:*/		return 0x8214038C;
		/* 82140360h case    4:*/		return 0x82140364;
	}
	return 0x82140364;
} // Block from 82140350h-82140364h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82140364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140364);
		  /* 82140364h */ case    0:  		/* lis R11, 20480 */
		/* 82140364h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x5000);
		/* 82140364h case    0:*/		return 0x82140368;
		  /* 82140368h */ case    1:  		/* oris R10, R26, 8272 */
		/* 82140368h case    1:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R26,0x2050);
		/* 82140368h case    1:*/		return 0x8214036C;
		  /* 8214036Ch */ case    2:  		/* ori R11, R11, 3 */
		/* 8214036Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8214036Ch case    2:*/		return 0x82140370;
		  /* 82140370h */ case    3:  		/* stw R11, <#[R25]> */
		/* 82140370h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82140370h case    3:*/		return 0x82140374;
		  /* 82140374h */ case    4:  		/* stw R23, <#[R24]> */
		/* 82140374h case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R24 + 0x00000000) );
		/* 82140374h case    4:*/		return 0x82140378;
		  /* 82140378h */ case    5:  		/* stw R10, <#[R31]> */
		/* 82140378h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82140378h case    5:*/		return 0x8214037C;
	}
	return 0x8214037C;
} // Block from 82140364h-8214037Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214037Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214037C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214037C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214037C);
		  /* 8214037Ch */ case    0:  		/* mr R3, R30 */
		/* 8214037Ch case    0:*/		regs.R3 = regs.R30;
		/* 8214037Ch case    0:*/		return 0x82140380;
		  /* 82140380h */ case    1:  		/* bl 905280 */
		/* 82140380h case    1:*/		regs.LR = 0x82140384; return 0x8221D3C0;
		/* 82140380h case    1:*/		return 0x82140384;
		  /* 82140384h */ case    2:  		/* mr R3, R30 */
		/* 82140384h case    2:*/		regs.R3 = regs.R30;
		/* 82140384h case    2:*/		return 0x82140388;
		  /* 82140388h */ case    3:  		/* bl -277912 */
		/* 82140388h case    3:*/		regs.LR = 0x8214038C; return 0x820FC5F0;
		/* 82140388h case    3:*/		return 0x8214038C;
	}
	return 0x8214038C;
} // Block from 8214037Ch-8214038Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214038Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214038C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214038C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214038C);
		  /* 8214038Ch */ case    0:  		/* li R3, 0 */
		/* 8214038Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214038Ch case    0:*/		return 0x82140390;
	}
	return 0x82140390;
} // Block from 8214038Ch-82140390h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140390);
		  /* 82140390h */ case    0:  		/* addi R1, R1, 176 */
		/* 82140390h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82140390h case    0:*/		return 0x82140394;
		  /* 82140394h */ case    1:  		/* b -717060 */
		/* 82140394h case    1:*/		return 0x82091290;
		/* 82140394h case    1:*/		return 0x82140398;
	}
	return 0x82140398;
} // Block from 82140390h-82140398h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82140398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140398);
		  /* 82140398h */ case    0:  		/* mfspr R12, LR */
		/* 82140398h case    0:*/		regs.R12 = regs.LR;
		/* 82140398h case    0:*/		return 0x8214039C;
		  /* 8214039Ch */ case    1:  		/* bl -717140 */
		/* 8214039Ch case    1:*/		regs.LR = 0x821403A0; return 0x82091248;
		/* 8214039Ch case    1:*/		return 0x821403A0;
		  /* 821403A0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821403A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821403A0h case    2:*/		return 0x821403A4;
		  /* 821403A4h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 821403A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 821403A4h case    3:*/		return 0x821403A8;
		  /* 821403A8h */ case    4:  		/* li R31, 0 */
		/* 821403A8h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821403A8h case    4:*/		return 0x821403AC;
		  /* 821403ACh */ case    5:  		/* mr R30, R3 */
		/* 821403ACh case    5:*/		regs.R30 = regs.R3;
		/* 821403ACh case    5:*/		return 0x821403B0;
		  /* 821403B0h */ case    6:  		/* mr R25, R31 */
		/* 821403B0h case    6:*/		regs.R25 = regs.R31;
		/* 821403B0h case    6:*/		return 0x821403B4;
		  /* 821403B4h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821403B4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821403B4h case    7:*/		return 0x821403B8;
		  /* 821403B8h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821403B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821403B8h case    8:*/		return 0x821403BC;
		  /* 821403BCh */ case    9:  		/* cmplw CR6, R10, R11 */
		/* 821403BCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821403BCh case    9:*/		return 0x821403C0;
		  /* 821403C0h */ case   10:  		/* bc 4, CR6_GT, 228 */
		/* 821403C0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821404A4;  }
		/* 821403C0h case   10:*/		return 0x821403C4;
		  /* 821403C4h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 821403C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821403C4h case   11:*/		return 0x821403C8;
		  /* 821403C8h */ case   12:  		/* li R8, 0 */
		/* 821403C8h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821403C8h case   12:*/		return 0x821403CC;
		  /* 821403CCh */ case   13:  		/* li R7, 0 */
		/* 821403CCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821403CCh case   13:*/		return 0x821403D0;
		  /* 821403D0h */ case   14:  		/* lwz R4, <#[R3 + 256]> */
		/* 821403D0h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000100) );
		/* 821403D0h case   14:*/		return 0x821403D4;
		  /* 821403D4h */ case   15:  		/* li R6, 4 */
		/* 821403D4h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821403D4h case   15:*/		return 0x821403D8;
		  /* 821403D8h */ case   16:  		/* addi R5, R1, 112 */
		/* 821403D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821403D8h case   16:*/		return 0x821403DC;
		  /* 821403DCh */ case   17:  		/* lwz R11, <#[R11 + 340]> */
		/* 821403DCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 821403DCh case   17:*/		return 0x821403E0;
		  /* 821403E0h */ case   18:  		/* mtspr CTR, R11 */
		/* 821403E0h case   18:*/		regs.CTR = regs.R11;
		/* 821403E0h case   18:*/		return 0x821403E4;
		  /* 821403E4h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 821403E4h case   19:*/		if ( 1 ) { regs.LR = 0x821403E8; return (uint32)regs.CTR; }
		/* 821403E4h case   19:*/		return 0x821403E8;
		  /* 821403E8h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 821403E8h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821403E8h case   20:*/		return 0x821403EC;
		  /* 821403ECh */ case   21:  		/* bc 12, CR0_LT, 928 */
		/* 821403ECh case   21:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 821403ECh case   21:*/		return 0x821403F0;
		  /* 821403F0h */ case   22:  		/* lwz R11, <#[R30 + 260]> */
		/* 821403F0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 821403F0h case   22:*/		return 0x821403F4;
		  /* 821403F4h */ case   23:  		/* li R10, 1 */
		/* 821403F4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821403F4h case   23:*/		return 0x821403F8;
		  /* 821403F8h */ case   24:  		/* li R9, 0 */
		/* 821403F8h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821403F8h case   24:*/		return 0x821403FC;
		  /* 821403FCh */ case   25:  		/* stw R31, <#[R1 + 108]> */
		/* 821403FCh case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 821403FCh case   25:*/		return 0x82140400;
		  /* 82140400h */ case   26:  		/* li R8, 0 */
		/* 82140400h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140400h case   26:*/		return 0x82140404;
		  /* 82140404h */ case   27:  		/* stw R31, <#[R1 + 100]> */
		/* 82140404h case   27:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82140404h case   27:*/		return 0x82140408;
		  /* 82140408h */ case   28:  		/* li R6, 1 */
		/* 82140408h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140408h case   28:*/		return 0x8214040C;
		  /* 8214040Ch */ case   29:  		/* stw R31, <#[R1 + 92]> */
		/* 8214040Ch case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214040Ch case   29:*/		return 0x82140410;
		  /* 82140410h */ case   30:  		/* addi R5, R1, 116 */
		/* 82140410h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 82140410h case   30:*/		return 0x82140414;
		  /* 82140414h */ case   31:  		/* stw R31, <#[R1 + 84]> */
		/* 82140414h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82140414h case   31:*/		return 0x82140418;
		  /* 82140418h */ case   32:  		/* li R4, 78 */
		/* 82140418h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 82140418h case   32:*/		return 0x8214041C;
		  /* 8214041Ch */ case   33:  		/* lwz R7, <#[R11 + 8]> */
		/* 8214041Ch case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 8214041Ch case   33:*/		return 0x82140420;
		  /* 82140420h */ case   34:  		/* mr R3, R30 */
		/* 82140420h case   34:*/		regs.R3 = regs.R30;
		/* 82140420h case   34:*/		return 0x82140424;
		  /* 82140424h */ case   35:  		/* bl -303300 */
		/* 82140424h case   35:*/		regs.LR = 0x82140428; return 0x820F6360;
		/* 82140424h case   35:*/		return 0x82140428;
		  /* 82140428h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 82140428h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140428h case   36:*/		return 0x8214042C;
		  /* 8214042Ch */ case   37:  		/* bc 12, CR0_LT, 864 */
		/* 8214042Ch case   37:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 8214042Ch case   37:*/		return 0x82140430;
		  /* 82140430h */ case   38:  		/* lwz R10, <#[R30 + 260]> */
		/* 82140430h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 82140430h case   38:*/		return 0x82140434;
		  /* 82140434h */ case   39:  		/* mr R11, R31 */
		/* 82140434h case   39:*/		regs.R11 = regs.R31;
		/* 82140434h case   39:*/		return 0x82140438;
		  /* 82140438h */ case   40:  		/* lwz R9, <#[R10 + 12]> */
		/* 82140438h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 82140438h case   40:*/		return 0x8214043C;
		  /* 8214043Ch */ case   41:  		/* cmplwi CR6, R9, 0 */
		/* 8214043Ch case   41:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214043Ch case   41:*/		return 0x82140440;
		  /* 82140440h */ case   42:  		/* bc 4, CR6_GT, 32 */
		/* 82140440h case   42:*/		if ( !regs.CR[6].gt ) { return 0x82140460;  }
		/* 82140440h case   42:*/		return 0x82140444;
		  /* 82140444h */ case   43:  		/* addi R9, R1, 108 */
		/* 82140444h case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 82140444h case   43:*/		return 0x82140448;
		  /* 82140448h */ case   44:  		/* lwz R8, <#[R1 + 116]> */
		/* 82140448h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 82140448h case   44:*/		return 0x8214044C;
		  /* 8214044Ch */ case   45:  		/* addi R11, R11, 1 */
		/* 8214044Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214044Ch case   45:*/		return 0x82140450;
		  /* 82140450h */ case   46:  		/* stwu R8, <#[R9 + 4]> */
		/* 82140450h case   46:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 82140450h case   46:*/		return 0x82140454;
		  /* 82140454h */ case   47:  		/* lwz R8, <#[R10 + 12]> */
		/* 82140454h case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000000C) );
		/* 82140454h case   47:*/		return 0x82140458;
		  /* 82140458h */ case   48:  		/* cmplw CR6, R11, R8 */
		/* 82140458h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82140458h case   48:*/		return 0x8214045C;
		  /* 8214045Ch */ case   49:  		/* bc 12, CR6_LT, -20 */
		/* 8214045Ch case   49:*/		if ( regs.CR[6].lt ) { return 0x82140448;  }
		/* 8214045Ch case   49:*/		return 0x82140460;
	}
	return 0x82140460;
} // Block from 82140398h-82140460h (50 instructions)

//////////////////////////////////////////////////////
// Block at 82140460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140460);
		  /* 82140460h */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 82140460h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 82140460h case    0:*/		return 0x82140464;
		  /* 82140464h */ case    1:  		/* li R9, 0 */
		/* 82140464h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140464h case    1:*/		return 0x82140468;
		  /* 82140468h */ case    2:  		/* li R8, 0 */
		/* 82140468h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140468h case    2:*/		return 0x8214046C;
		  /* 8214046Ch */ case    3:  		/* stw R31, <#[R1 + 108]> */
		/* 8214046Ch case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214046Ch case    3:*/		return 0x82140470;
		  /* 82140470h */ case    4:  		/* addi R7, R1, 112 */
		/* 82140470h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82140470h case    4:*/		return 0x82140474;
		  /* 82140474h */ case    5:  		/* stw R31, <#[R1 + 100]> */
		/* 82140474h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82140474h case    5:*/		return 0x82140478;
		  /* 82140478h */ case    6:  		/* li R4, 1 */
		/* 82140478h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140478h case    6:*/		return 0x8214047C;
		  /* 8214047Ch */ case    7:  		/* stw R31, <#[R1 + 92]> */
		/* 8214047Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214047Ch case    7:*/		return 0x82140480;
		  /* 82140480h */ case    8:  		/* mr R3, R30 */
		/* 82140480h case    8:*/		regs.R3 = regs.R30;
		/* 82140480h case    8:*/		return 0x82140484;
		  /* 82140484h */ case    9:  		/* stw R31, <#[R1 + 84]> */
		/* 82140484h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82140484h case    9:*/		return 0x82140488;
		  /* 82140488h */ case   10:  		/* lwz R6, <#[R11 + 12]> */
		/* 82140488h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140488h case   10:*/		return 0x8214048C;
		  /* 8214048Ch */ case   11:  		/* lwz R5, <#[R11 + 16]> */
		/* 8214048Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 8214048Ch case   11:*/		return 0x82140490;
		  /* 82140490h */ case   12:  		/* mr R10, R6 */
		/* 82140490h case   12:*/		regs.R10 = regs.R6;
		/* 82140490h case   12:*/		return 0x82140494;
		  /* 82140494h */ case   13:  		/* bl -303412 */
		/* 82140494h case   13:*/		regs.LR = 0x82140498; return 0x820F6360;
		/* 82140494h case   13:*/		return 0x82140498;
		  /* 82140498h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82140498h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140498h case   14:*/		return 0x8214049C;
		  /* 8214049Ch */ case   15:  		/* bc 4, CR0_LT, 748 */
		/* 8214049Ch case   15:*/		if ( !regs.CR[0].lt ) { return 0x82140788;  }
		/* 8214049Ch case   15:*/		return 0x821404A0;
		  /* 821404A0h */ case   16:  		/* b 748 */
		/* 821404A0h case   16:*/		return 0x8214078C;
		/* 821404A0h case   16:*/		return 0x821404A4;
	}
	return 0x821404A4;
} // Block from 82140460h-821404A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821404A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821404A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821404A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821404A4);
		  /* 821404A4h */ case    0:  		/* mr R24, R31 */
		/* 821404A4h case    0:*/		regs.R24 = regs.R31;
		/* 821404A4h case    0:*/		return 0x821404A8;
		  /* 821404A8h */ case    1:  		/* lwz R11, <#[R30 + 260]> */
		/* 821404A8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 821404A8h case    1:*/		return 0x821404AC;
		  /* 821404ACh */ case    2:  		/* mr R26, R31 */
		/* 821404ACh case    2:*/		regs.R26 = regs.R31;
		/* 821404ACh case    2:*/		return 0x821404B0;
		  /* 821404B0h */ case    3:  		/* lwz R8, <#[R11 + 12]> */
		/* 821404B0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821404B0h case    3:*/		return 0x821404B4;
		  /* 821404B4h */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821404B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821404B4h case    4:*/		return 0x821404B8;
		  /* 821404B8h */ case    5:  		/* bc 12, CR6_EQ, 708 */
		/* 821404B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214077C;  }
		/* 821404B8h case    5:*/		return 0x821404BC;
		  /* 821404BCh */ case    6:  		/* mr R29, R31 */
		/* 821404BCh case    6:*/		regs.R29 = regs.R31;
		/* 821404BCh case    6:*/		return 0x821404C0;
		  /* 821404C0h */ case    7:  		/* li R27, 1 */
		/* 821404C0h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821404C0h case    7:*/		return 0x821404C4;
		  /* 821404C4h */ case    8:  		/* li R28, 2 */
		/* 821404C4h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 821404C4h case    8:*/		return 0x821404C8;
		  /* 821404C8h */ case    9:  		/* lwz R11, <#[R11 + 16]> */
		/* 821404C8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821404C8h case    9:*/		return 0x821404CC;
		  /* 821404CCh */ case   10:  		/* lwz R10, <#[R30 + 20]> */
		/* 821404CCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 821404CCh case   10:*/		return 0x821404D0;
		  /* 821404D0h */ case   11:  		/* add R11, R11, R29 */
		/* 821404D0h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821404D0h case   11:*/		return 0x821404D4;
		  /* 821404D4h */ case   12:  		/* lwz R9, <#[R11]> */
		/* 821404D4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821404D4h case   12:*/		return 0x821404D8;
		  /* 821404D8h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821404D8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821404D8h case   13:*/		return 0x821404DC;
		  /* 821404DCh */ case   14:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821404DCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821404DCh case   14:*/		return 0x821404E0;
		  /* 821404E0h */ case   15:  		/* lwz R9, <#[R9 + 16]> */
		/* 821404E0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 821404E0h case   15:*/		return 0x821404E4;
		  /* 821404E4h */ case   16:  		/* cmplwi CR6, R9, 1 */
		/* 821404E4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821404E4h case   16:*/		return 0x821404E8;
		  /* 821404E8h */ case   17:  		/* bc 4, CR6_EQ, 112 */
		/* 821404E8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82140558;  }
		/* 821404E8h case   17:*/		return 0x821404EC;
		  /* 821404ECh */ case   18:  		/* cmplw CR6, R28, R8 */
		/* 821404ECh case   18:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R8);
		/* 821404ECh case   18:*/		return 0x821404F0;
		  /* 821404F0h */ case   19:  		/* bc 4, CR6_LT, 104 */
		/* 821404F0h case   19:*/		if ( !regs.CR[6].lt ) { return 0x82140558;  }
		/* 821404F0h case   19:*/		return 0x821404F4;
		  /* 821404F4h */ case   20:  		/* cmplwi CR6, R24, 1 */
		/* 821404F4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 821404F4h case   20:*/		return 0x821404F8;
		  /* 821404F8h */ case   21:  		/* bc 4, CR6_EQ, 76 */
		/* 821404F8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82140544;  }
		/* 821404F8h case   21:*/		return 0x821404FC;
		  /* 821404FCh */ case   22:  		/* lwz R7, <#[R30 + 260]> */
		/* 821404FCh case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000104) );
		/* 821404FCh case   22:*/		return 0x82140500;
		  /* 82140500h */ case   23:  		/* li R10, 1 */
		/* 82140500h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140500h case   23:*/		return 0x82140504;
		  /* 82140504h */ case   24:  		/* li R9, 0 */
		/* 82140504h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140504h case   24:*/		return 0x82140508;
		  /* 82140508h */ case   25:  		/* stw R31, <#[R1 + 108]> */
		/* 82140508h case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140508h case   25:*/		return 0x8214050C;
		  /* 8214050Ch */ case   26:  		/* li R8, 0 */
		/* 8214050Ch case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214050Ch case   26:*/		return 0x82140510;
		  /* 82140510h */ case   27:  		/* stw R31, <#[R1 + 100]> */
		/* 82140510h case   27:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82140510h case   27:*/		return 0x82140514;
		  /* 82140514h */ case   28:  		/* li R6, 1 */
		/* 82140514h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140514h case   28:*/		return 0x82140518;
		  /* 82140518h */ case   29:  		/* stw R31, <#[R1 + 92]> */
		/* 82140518h case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140518h case   29:*/		return 0x8214051C;
		  /* 8214051Ch */ case   30:  		/* li R4, 78 */
		/* 8214051Ch case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 8214051Ch case   30:*/		return 0x82140520;
		  /* 82140520h */ case   31:  		/* stw R31, <#[R1 + 84]> */
		/* 82140520h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82140520h case   31:*/		return 0x82140524;
		  /* 82140524h */ case   32:  		/* lwz R5, <#[R7 + 16]> */
		/* 82140524h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000010) );
		/* 82140524h case   32:*/		return 0x82140528;
		  /* 82140528h */ case   33:  		/* mr R3, R30 */
		/* 82140528h case   33:*/		regs.R3 = regs.R30;
		/* 82140528h case   33:*/		return 0x8214052C;
		  /* 8214052Ch */ case   34:  		/* lwz R11, <#[R7 + 8]> */
		/* 8214052Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 8214052Ch case   34:*/		return 0x82140530;
		  /* 82140530h */ case   35:  		/* add R5, R5, R29 */
		/* 82140530h case   35:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R29);
		/* 82140530h case   35:*/		return 0x82140534;
		  /* 82140534h */ case   36:  		/* add R7, R11, R29 */
		/* 82140534h case   36:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140534h case   36:*/		return 0x82140538;
		  /* 82140538h */ case   37:  		/* bl -303576 */
		/* 82140538h case   37:*/		regs.LR = 0x8214053C; return 0x820F6360;
		/* 82140538h case   37:*/		return 0x8214053C;
		  /* 8214053Ch */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 8214053Ch case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214053Ch case   38:*/		return 0x82140540;
		  /* 82140540h */ case   39:  		/* bc 12, CR0_LT, 588 */
		/* 82140540h case   39:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 82140540h case   39:*/		return 0x82140544;
	}
	return 0x82140544;
} // Block from 821404A4h-82140544h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82140544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140544);
		  /* 82140544h */ case    0:  		/* addi R26, R26, 1 */
		/* 82140544h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82140544h case    0:*/		return 0x82140548;
		  /* 82140548h */ case    1:  		/* addi R28, R28, 1 */
		/* 82140548h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82140548h case    1:*/		return 0x8214054C;
		  /* 8214054Ch */ case    2:  		/* addi R27, R27, 1 */
		/* 8214054Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8214054Ch case    2:*/		return 0x82140550;
		  /* 82140550h */ case    3:  		/* addi R29, R29, 4 */
		/* 82140550h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82140550h case    3:*/		return 0x82140554;
		  /* 82140554h */ case    4:  		/* b 536 */
		/* 82140554h case    4:*/		return 0x8214076C;
		/* 82140554h case    4:*/		return 0x82140558;
	}
	return 0x82140558;
} // Block from 82140544h-82140558h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82140558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140558);
		  /* 82140558h */ case    0:  		/* cmplw CR6, R27, R8 */
		/* 82140558h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R8);
		/* 82140558h case    0:*/		return 0x8214055C;
		  /* 8214055Ch */ case    1:  		/* bc 12, CR6_LT, 204 */
		/* 8214055Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82140628;  }
		/* 8214055Ch case    1:*/		return 0x82140560;
		  /* 82140560h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 82140560h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82140560h case    2:*/		return 0x82140564;
		  /* 82140564h */ case    3:  		/* bc 4, CR6_EQ, -32 */
		/* 82140564h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82140544;  }
		/* 82140564h case    3:*/		return 0x82140568;
		  /* 82140568h */ case    4:  		/* cmpwi CR6, R25, 0 */
		/* 82140568h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82140568h case    4:*/		return 0x8214056C;
		  /* 8214056Ch */ case    5:  		/* bc 4, CR6_EQ, 56 */
		/* 8214056Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821405A4;  }
		/* 8214056Ch case    5:*/		return 0x82140570;
		  /* 82140570h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 82140570h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82140570h case    6:*/		return 0x82140574;
		  /* 82140574h */ case    7:  		/* li R8, 0 */
		/* 82140574h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140574h case    7:*/		return 0x82140578;
		  /* 82140578h */ case    8:  		/* li R7, 0 */
		/* 82140578h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82140578h case    8:*/		return 0x8214057C;
		  /* 8214057Ch */ case    9:  		/* lwz R4, <#[R30 + 256]> */
		/* 8214057Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000100) );
		/* 8214057Ch case    9:*/		return 0x82140580;
		  /* 82140580h */ case   10:  		/* li R6, 4 */
		/* 82140580h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82140580h case   10:*/		return 0x82140584;
		  /* 82140584h */ case   11:  		/* addi R5, R1, 112 */
		/* 82140584h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82140584h case   11:*/		return 0x82140588;
		  /* 82140588h */ case   12:  		/* mr R3, R30 */
		/* 82140588h case   12:*/		regs.R3 = regs.R30;
		/* 82140588h case   12:*/		return 0x8214058C;
		  /* 8214058Ch */ case   13:  		/* lwz R11, <#[R11 + 340]> */
		/* 8214058Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 8214058Ch case   13:*/		return 0x82140590;
		  /* 82140590h */ case   14:  		/* mtspr CTR, R11 */
		/* 82140590h case   14:*/		regs.CTR = regs.R11;
		/* 82140590h case   14:*/		return 0x82140594;
		  /* 82140594h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82140594h case   15:*/		if ( 1 ) { regs.LR = 0x82140598; return (uint32)regs.CTR; }
		/* 82140594h case   15:*/		return 0x82140598;
		  /* 82140598h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82140598h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140598h case   16:*/		return 0x8214059C;
		  /* 8214059Ch */ case   17:  		/* bc 12, CR0_LT, 496 */
		/* 8214059Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 8214059Ch case   17:*/		return 0x821405A0;
		  /* 821405A0h */ case   18:  		/* li R25, 1 */
		/* 821405A0h case   18:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821405A0h case   18:*/		return 0x821405A4;
	}
	return 0x821405A4;
} // Block from 82140558h-821405A4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821405A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821405A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821405A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821405A4);
		  /* 821405A4h */ case    0:  		/* stw R31, <#[R1 + 84]> */
		/* 821405A4h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821405A4h case    0:*/		return 0x821405A8;
		  /* 821405A8h */ case    1:  		/* li R10, 1 */
		/* 821405A8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821405A8h case    1:*/		return 0x821405AC;
		  /* 821405ACh */ case    2:  		/* stw R31, <#[R1 + 108]> */
		/* 821405ACh case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 821405ACh case    2:*/		return 0x821405B0;
		  /* 821405B0h */ case    3:  		/* li R9, 0 */
		/* 821405B0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821405B0h case    3:*/		return 0x821405B4;
		  /* 821405B4h */ case    4:  		/* stw R31, <#[R1 + 100]> */
		/* 821405B4h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 821405B4h case    4:*/		return 0x821405B8;
		  /* 821405B8h */ case    5:  		/* li R8, 0 */
		/* 821405B8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821405B8h case    5:*/		return 0x821405BC;
		  /* 821405BCh */ case    6:  		/* stw R31, <#[R1 + 92]> */
		/* 821405BCh case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 821405BCh case    6:*/		return 0x821405C0;
		  /* 821405C0h */ case    7:  		/* li R6, 1 */
		/* 821405C0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821405C0h case    7:*/		return 0x821405C4;
		  /* 821405C4h */ case    8:  		/* lwz R11, <#[R30 + 260]> */
		/* 821405C4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 821405C4h case    8:*/		return 0x821405C8;
		  /* 821405C8h */ case    9:  		/* addi R5, R1, 116 */
		/* 821405C8h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 821405C8h case    9:*/		return 0x821405CC;
		  /* 821405CCh */ case   10:  		/* li R4, 78 */
		/* 821405CCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 821405CCh case   10:*/		return 0x821405D0;
		  /* 821405D0h */ case   11:  		/* mr R3, R30 */
		/* 821405D0h case   11:*/		regs.R3 = regs.R30;
		/* 821405D0h case   11:*/		return 0x821405D4;
		  /* 821405D4h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 821405D4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821405D4h case   12:*/		return 0x821405D8;
		  /* 821405D8h */ case   13:  		/* add R7, R11, R29 */
		/* 821405D8h case   13:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 821405D8h case   13:*/		return 0x821405DC;
		  /* 821405DCh */ case   14:  		/* bl -303740 */
		/* 821405DCh case   14:*/		regs.LR = 0x821405E0; return 0x820F6360;
		/* 821405DCh case   14:*/		return 0x821405E0;
		  /* 821405E0h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 821405E0h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821405E0h case   15:*/		return 0x821405E4;
		  /* 821405E4h */ case   16:  		/* bc 12, CR0_LT, 424 */
		/* 821405E4h case   16:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 821405E4h case   16:*/		return 0x821405E8;
		  /* 821405E8h */ case   17:  		/* lwz R11, <#[R30 + 260]> */
		/* 821405E8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 821405E8h case   17:*/		return 0x821405EC;
		  /* 821405ECh */ case   18:  		/* li R10, 1 */
		/* 821405ECh case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821405ECh case   18:*/		return 0x821405F0;
		  /* 821405F0h */ case   19:  		/* li R9, 0 */
		/* 821405F0h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821405F0h case   19:*/		return 0x821405F4;
		  /* 821405F4h */ case   20:  		/* stw R31, <#[R1 + 84]> */
		/* 821405F4h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821405F4h case   20:*/		return 0x821405F8;
		  /* 821405F8h */ case   21:  		/* li R8, 0 */
		/* 821405F8h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821405F8h case   21:*/		return 0x821405FC;
		  /* 821405FCh */ case   22:  		/* stw R31, <#[R1 + 108]> */
		/* 821405FCh case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 821405FCh case   22:*/		return 0x82140600;
		  /* 82140600h */ case   23:  		/* addi R7, R1, 116 */
		/* 82140600h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x74);
		/* 82140600h case   23:*/		return 0x82140604;
		  /* 82140604h */ case   24:  		/* stw R31, <#[R1 + 100]> */
		/* 82140604h case   24:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82140604h case   24:*/		return 0x82140608;
		  /* 82140608h */ case   25:  		/* li R6, 1 */
		/* 82140608h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140608h case   25:*/		return 0x8214060C;
		  /* 8214060Ch */ case   26:  		/* stw R31, <#[R1 + 92]> */
		/* 8214060Ch case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214060Ch case   26:*/		return 0x82140610;
		  /* 82140610h */ case   27:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140610h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140610h case   27:*/		return 0x82140614;
		  /* 82140614h */ case   28:  		/* li R4, 1 */
		/* 82140614h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140614h case   28:*/		return 0x82140618;
		  /* 82140618h */ case   29:  		/* mr R3, R30 */
		/* 82140618h case   29:*/		regs.R3 = regs.R30;
		/* 82140618h case   29:*/		return 0x8214061C;
		  /* 8214061Ch */ case   30:  		/* add R5, R11, R29 */
		/* 8214061Ch case   30:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R29);
		/* 8214061Ch case   30:*/		return 0x82140620;
		  /* 82140620h */ case   31:  		/* bl -303808 */
		/* 82140620h case   31:*/		regs.LR = 0x82140624; return 0x820F6360;
		/* 82140620h case   31:*/		return 0x82140624;
		  /* 82140624h */ case   32:  		/* b -232 */
		/* 82140624h case   32:*/		return 0x8214053C;
		/* 82140624h case   32:*/		return 0x82140628;
	}
	return 0x82140628;
} // Block from 821405A4h-82140628h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82140628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140628);
		  /* 82140628h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82140628h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82140628h case    0:*/		return 0x8214062C;
		  /* 8214062Ch */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 8214062Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82140690;  }
		/* 8214062Ch case    1:*/		return 0x82140630;
		  /* 82140630h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82140630h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82140630h case    2:*/		return 0x82140634;
		  /* 82140634h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82140634h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82140634h case    3:*/		return 0x82140638;
		  /* 82140638h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82140638h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82140638h case    4:*/		return 0x8214063C;
		  /* 8214063Ch */ case    5:  		/* lwz R11, <#[R11 + 16]> */
		/* 8214063Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8214063Ch case    5:*/		return 0x82140640;
		  /* 82140640h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 82140640h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82140640h case    6:*/		return 0x82140644;
		  /* 82140644h */ case    7:  		/* bc 4, CR6_EQ, 76 */
		/* 82140644h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82140690;  }
		/* 82140644h case    7:*/		return 0x82140648;
		  /* 82140648h */ case    8:  		/* cmplwi CR6, R24, 1 */
		/* 82140648h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 82140648h case    8:*/		return 0x8214064C;
		  /* 8214064Ch */ case    9:  		/* bc 4, CR6_EQ, 272 */
		/* 8214064Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214075C;  }
		/* 8214064Ch case    9:*/		return 0x82140650;
		  /* 82140650h */ case   10:  		/* stw R31, <#[R1 + 108]> */
		/* 82140650h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140650h case   10:*/		return 0x82140654;
		  /* 82140654h */ case   11:  		/* li R10, 2 */
		/* 82140654h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82140654h case   11:*/		return 0x82140658;
		  /* 82140658h */ case   12:  		/* stw R31, <#[R1 + 100]> */
		/* 82140658h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82140658h case   12:*/		return 0x8214065C;
		  /* 8214065Ch */ case   13:  		/* li R8, 0 */
		/* 8214065Ch case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214065Ch case   13:*/		return 0x82140660;
		  /* 82140660h */ case   14:  		/* stw R31, <#[R1 + 92]> */
		/* 82140660h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140660h case   14:*/		return 0x82140664;
		  /* 82140664h */ case   15:  		/* li R6, 2 */
		/* 82140664h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82140664h case   15:*/		return 0x82140668;
		  /* 82140668h */ case   16:  		/* stw R31, <#[R1 + 84]> */
		/* 82140668h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82140668h case   16:*/		return 0x8214066C;
		  /* 8214066Ch */ case   17:  		/* li R4, 19 */
		/* 8214066Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 8214066Ch case   17:*/		return 0x82140670;
		  /* 82140670h */ case   18:  		/* lwz R11, <#[R30 + 260]> */
		/* 82140670h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 82140670h case   18:*/		return 0x82140674;
		  /* 82140674h */ case   19:  		/* mr R3, R30 */
		/* 82140674h case   19:*/		regs.R3 = regs.R30;
		/* 82140674h case   19:*/		return 0x82140678;
		  /* 82140678h */ case   20:  		/* lwz R7, <#[R11 + 8]> */
		/* 82140678h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82140678h case   20:*/		return 0x8214067C;
		  /* 8214067Ch */ case   21:  		/* lwz R11, <#[R11 + 16]> */
		/* 8214067Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8214067Ch case   21:*/		return 0x82140680;
		  /* 82140680h */ case   22:  		/* add R7, R7, R29 */
		/* 82140680h case   22:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R29);
		/* 82140680h case   22:*/		return 0x82140684;
		  /* 82140684h */ case   23:  		/* add R5, R11, R29 */
		/* 82140684h case   23:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R29);
		/* 82140684h case   23:*/		return 0x82140688;
		  /* 82140688h */ case   24:  		/* bl -303912 */
		/* 82140688h case   24:*/		regs.LR = 0x8214068C; return 0x820F6360;
		/* 82140688h case   24:*/		return 0x8214068C;
		  /* 8214068Ch */ case   25:  		/* b 200 */
		/* 8214068Ch case   25:*/		return 0x82140754;
		/* 8214068Ch case   25:*/		return 0x82140690;
	}
	return 0x82140690;
} // Block from 82140628h-82140690h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82140690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140690);
		  /* 82140690h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82140690h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82140690h case    0:*/		return 0x82140694;
		  /* 82140694h */ case    1:  		/* bc 4, CR6_EQ, 200 */
		/* 82140694h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214075C;  }
		/* 82140694h case    1:*/		return 0x82140698;
		  /* 82140698h */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 82140698h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82140698h case    2:*/		return 0x8214069C;
		  /* 8214069Ch */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 8214069Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821406D4;  }
		/* 8214069Ch case    3:*/		return 0x821406A0;
		  /* 821406A0h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 821406A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821406A0h case    4:*/		return 0x821406A4;
		  /* 821406A4h */ case    5:  		/* li R8, 0 */
		/* 821406A4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821406A4h case    5:*/		return 0x821406A8;
		  /* 821406A8h */ case    6:  		/* li R7, 0 */
		/* 821406A8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821406A8h case    6:*/		return 0x821406AC;
		  /* 821406ACh */ case    7:  		/* lwz R4, <#[R30 + 256]> */
		/* 821406ACh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000100) );
		/* 821406ACh case    7:*/		return 0x821406B0;
		  /* 821406B0h */ case    8:  		/* li R6, 4 */
		/* 821406B0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821406B0h case    8:*/		return 0x821406B4;
		  /* 821406B4h */ case    9:  		/* addi R5, R1, 112 */
		/* 821406B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821406B4h case    9:*/		return 0x821406B8;
		  /* 821406B8h */ case   10:  		/* mr R3, R30 */
		/* 821406B8h case   10:*/		regs.R3 = regs.R30;
		/* 821406B8h case   10:*/		return 0x821406BC;
		  /* 821406BCh */ case   11:  		/* lwz R11, <#[R11 + 340]> */
		/* 821406BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 821406BCh case   11:*/		return 0x821406C0;
		  /* 821406C0h */ case   12:  		/* mtspr CTR, R11 */
		/* 821406C0h case   12:*/		regs.CTR = regs.R11;
		/* 821406C0h case   12:*/		return 0x821406C4;
		  /* 821406C4h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 821406C4h case   13:*/		if ( 1 ) { regs.LR = 0x821406C8; return (uint32)regs.CTR; }
		/* 821406C4h case   13:*/		return 0x821406C8;
		  /* 821406C8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 821406C8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821406C8h case   14:*/		return 0x821406CC;
		  /* 821406CCh */ case   15:  		/* bc 12, CR0_LT, 192 */
		/* 821406CCh case   15:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 821406CCh case   15:*/		return 0x821406D0;
		  /* 821406D0h */ case   16:  		/* li R25, 1 */
		/* 821406D0h case   16:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821406D0h case   16:*/		return 0x821406D4;
	}
	return 0x821406D4;
} // Block from 82140690h-821406D4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821406D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821406D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821406D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821406D4);
		  /* 821406D4h */ case    0:  		/* stw R31, <#[R1 + 108]> */
		/* 821406D4h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 821406D4h case    0:*/		return 0x821406D8;
		  /* 821406D8h */ case    1:  		/* li R10, 2 */
		/* 821406D8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821406D8h case    1:*/		return 0x821406DC;
		  /* 821406DCh */ case    2:  		/* stw R31, <#[R1 + 100]> */
		/* 821406DCh case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 821406DCh case    2:*/		return 0x821406E0;
		  /* 821406E0h */ case    3:  		/* li R9, 0 */
		/* 821406E0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821406E0h case    3:*/		return 0x821406E4;
		  /* 821406E4h */ case    4:  		/* stw R31, <#[R1 + 92]> */
		/* 821406E4h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 821406E4h case    4:*/		return 0x821406E8;
		  /* 821406E8h */ case    5:  		/* li R8, 0 */
		/* 821406E8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821406E8h case    5:*/		return 0x821406EC;
		  /* 821406ECh */ case    6:  		/* stw R31, <#[R1 + 84]> */
		/* 821406ECh case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821406ECh case    6:*/		return 0x821406F0;
		  /* 821406F0h */ case    7:  		/* li R6, 2 */
		/* 821406F0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821406F0h case    7:*/		return 0x821406F4;
		  /* 821406F4h */ case    8:  		/* lwz R11, <#[R30 + 260]> */
		/* 821406F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 821406F4h case    8:*/		return 0x821406F8;
		  /* 821406F8h */ case    9:  		/* addi R5, R1, 112 */
		/* 821406F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821406F8h case    9:*/		return 0x821406FC;
		  /* 821406FCh */ case   10:  		/* li R4, 19 */
		/* 821406FCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 821406FCh case   10:*/		return 0x82140700;
		  /* 82140700h */ case   11:  		/* mr R3, R30 */
		/* 82140700h case   11:*/		regs.R3 = regs.R30;
		/* 82140700h case   11:*/		return 0x82140704;
		  /* 82140704h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82140704h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82140704h case   12:*/		return 0x82140708;
		  /* 82140708h */ case   13:  		/* add R7, R11, R29 */
		/* 82140708h case   13:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140708h case   13:*/		return 0x8214070C;
		  /* 8214070Ch */ case   14:  		/* bl -304044 */
		/* 8214070Ch case   14:*/		regs.LR = 0x82140710; return 0x820F6360;
		/* 8214070Ch case   14:*/		return 0x82140710;
		  /* 82140710h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82140710h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140710h case   15:*/		return 0x82140714;
		  /* 82140714h */ case   16:  		/* bc 12, CR0_LT, 120 */
		/* 82140714h case   16:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 82140714h case   16:*/		return 0x82140718;
		  /* 82140718h */ case   17:  		/* stw R31, <#[R1 + 84]> */
		/* 82140718h case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 82140718h case   17:*/		return 0x8214071C;
		  /* 8214071Ch */ case   18:  		/* li R10, 2 */
		/* 8214071Ch case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8214071Ch case   18:*/		return 0x82140720;
		  /* 82140720h */ case   19:  		/* stw R31, <#[R1 + 108]> */
		/* 82140720h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140720h case   19:*/		return 0x82140724;
		  /* 82140724h */ case   20:  		/* li R9, 0 */
		/* 82140724h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140724h case   20:*/		return 0x82140728;
		  /* 82140728h */ case   21:  		/* stw R31, <#[R1 + 92]> */
		/* 82140728h case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140728h case   21:*/		return 0x8214072C;
		  /* 8214072Ch */ case   22:  		/* li R8, 0 */
		/* 8214072Ch case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214072Ch case   22:*/		return 0x82140730;
		  /* 82140730h */ case   23:  		/* lwz R11, <#[R30 + 260]> */
		/* 82140730h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 82140730h case   23:*/		return 0x82140734;
		  /* 82140734h */ case   24:  		/* addi R7, R1, 112 */
		/* 82140734h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82140734h case   24:*/		return 0x82140738;
		  /* 82140738h */ case   25:  		/* li R6, 2 */
		/* 82140738h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82140738h case   25:*/		return 0x8214073C;
		  /* 8214073Ch */ case   26:  		/* stw R31, <#[R1 + 100]> */
		/* 8214073Ch case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 8214073Ch case   26:*/		return 0x82140740;
		  /* 82140740h */ case   27:  		/* li R4, 1 */
		/* 82140740h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140740h case   27:*/		return 0x82140744;
		  /* 82140744h */ case   28:  		/* mr R3, R30 */
		/* 82140744h case   28:*/		regs.R3 = regs.R30;
		/* 82140744h case   28:*/		return 0x82140748;
		  /* 82140748h */ case   29:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140748h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140748h case   29:*/		return 0x8214074C;
		  /* 8214074Ch */ case   30:  		/* add R5, R11, R29 */
		/* 8214074Ch case   30:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R29);
		/* 8214074Ch case   30:*/		return 0x82140750;
		  /* 82140750h */ case   31:  		/* bl -304112 */
		/* 82140750h case   31:*/		regs.LR = 0x82140754; return 0x820F6360;
		/* 82140750h case   31:*/		return 0x82140754;
	}
	return 0x82140754;
} // Block from 821406D4h-82140754h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82140754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140754);
		  /* 82140754h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82140754h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140754h case    0:*/		return 0x82140758;
		  /* 82140758h */ case    1:  		/* bc 12, CR0_LT, 52 */
		/* 82140758h case    1:*/		if ( regs.CR[0].lt ) { return 0x8214078C;  }
		/* 82140758h case    1:*/		return 0x8214075C;
	}
	return 0x8214075C;
} // Block from 82140754h-8214075Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214075Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214075C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214075C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214075C);
		  /* 8214075Ch */ case    0:  		/* addi R29, R29, 8 */
		/* 8214075Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 8214075Ch case    0:*/		return 0x82140760;
		  /* 82140760h */ case    1:  		/* addi R27, R27, 2 */
		/* 82140760h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 82140760h case    1:*/		return 0x82140764;
		  /* 82140764h */ case    2:  		/* addi R28, R28, 2 */
		/* 82140764h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 82140764h case    2:*/		return 0x82140768;
		  /* 82140768h */ case    3:  		/* addi R26, R26, 2 */
		/* 82140768h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x2);
		/* 82140768h case    3:*/		return 0x8214076C;
	}
	return 0x8214076C;
} // Block from 8214075Ch-8214076Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214076Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214076C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214076C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214076C);
		  /* 8214076Ch */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 8214076Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 8214076Ch case    0:*/		return 0x82140770;
		  /* 82140770h */ case    1:  		/* lwz R8, <#[R11 + 12]> */
		/* 82140770h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140770h case    1:*/		return 0x82140774;
		  /* 82140774h */ case    2:  		/* cmplw CR6, R26, R8 */
		/* 82140774h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R8);
		/* 82140774h case    2:*/		return 0x82140778;
		  /* 82140778h */ case    3:  		/* bc 12, CR6_LT, -688 */
		/* 82140778h case    3:*/		if ( regs.CR[6].lt ) { return 0x821404C8;  }
		/* 82140778h case    3:*/		return 0x8214077C;
	}
	return 0x8214077C;
} // Block from 8214076Ch-8214077Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214077Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214077C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214077C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214077C);
		  /* 8214077Ch */ case    0:  		/* addi R24, R24, 1 */
		/* 8214077Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8214077Ch case    0:*/		return 0x82140780;
		  /* 82140780h */ case    1:  		/* cmplwi CR6, R24, 2 */
		/* 82140780h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000002);
		/* 82140780h case    1:*/		return 0x82140784;
		  /* 82140784h */ case    2:  		/* bc 12, CR6_LT, -732 */
		/* 82140784h case    2:*/		if ( regs.CR[6].lt ) { return 0x821404A8;  }
		/* 82140784h case    2:*/		return 0x82140788;
	}
	return 0x82140788;
} // Block from 8214077Ch-82140788h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82140788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140788);
		  /* 82140788h */ case    0:  		/* li R3, 0 */
		/* 82140788h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82140788h case    0:*/		return 0x8214078C;
	}
	return 0x8214078C;
} // Block from 82140788h-8214078Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214078Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214078C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214078C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214078C);
		  /* 8214078Ch */ case    0:  		/* addi R1, R1, 208 */
		/* 8214078Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8214078Ch case    0:*/		return 0x82140790;
		  /* 82140790h */ case    1:  		/* b -718072 */
		/* 82140790h case    1:*/		return 0x82091298;
		/* 82140790h case    1:*/		return 0x82140794;
		  /* 82140794h */ case    2:  		/* nop */
		/* 82140794h case    2:*/		cpu::op::nop();
		/* 82140794h case    2:*/		return 0x82140798;
	}
	return 0x82140798;
} // Block from 8214078Ch-82140798h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82140798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140798);
		  /* 82140798h */ case    0:  		/* mfspr R12, LR */
		/* 82140798h case    0:*/		regs.R12 = regs.LR;
		/* 82140798h case    0:*/		return 0x8214079C;
		  /* 8214079Ch */ case    1:  		/* bl -718152 */
		/* 8214079Ch case    1:*/		regs.LR = 0x821407A0; return 0x82091254;
		/* 8214079Ch case    1:*/		return 0x821407A0;
		  /* 821407A0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821407A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821407A0h case    2:*/		return 0x821407A4;
		  /* 821407A4h */ case    3:  		/* lwz R8, <#[R3 + 260]> */
		/* 821407A4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000104) );
		/* 821407A4h case    3:*/		return 0x821407A8;
		  /* 821407A8h */ case    4:  		/* li R30, 0 */
		/* 821407A8h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821407A8h case    4:*/		return 0x821407AC;
		  /* 821407ACh */ case    5:  		/* mr R31, R3 */
		/* 821407ACh case    5:*/		regs.R31 = regs.R3;
		/* 821407ACh case    5:*/		return 0x821407B0;
		  /* 821407B0h */ case    6:  		/* mr R10, R30 */
		/* 821407B0h case    6:*/		regs.R10 = regs.R30;
		/* 821407B0h case    6:*/		return 0x821407B4;
		  /* 821407B4h */ case    7:  		/* lwz R9, <#[R8 + 12]> */
		/* 821407B4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 821407B4h case    7:*/		return 0x821407B8;
		  /* 821407B8h */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 821407B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821407B8h case    8:*/		return 0x821407BC;
		  /* 821407BCh */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 821407BCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821407F4;  }
		/* 821407BCh case    9:*/		return 0x821407C0;
		  /* 821407C0h */ case   10:  		/* lwz R7, <#[R3 + 20]> */
		/* 821407C0h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 821407C0h case   10:*/		return 0x821407C4;
		  /* 821407C4h */ case   11:  		/* mr R11, R30 */
		/* 821407C4h case   11:*/		regs.R11 = regs.R30;
		/* 821407C4h case   11:*/		return 0x821407C8;
		  /* 821407C8h */ case   12:  		/* lwz R6, <#[R8 + 16]> */
		/* 821407C8h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000010) );
		/* 821407C8h case   12:*/		return 0x821407CC;
		  /* 821407CCh */ case   13:  		/* lwzx R6, <#[R6 + R11]> */
		/* 821407CCh case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 821407CCh case   13:*/		return 0x821407D0;
		  /* 821407D0h */ case   14:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 821407D0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 821407D0h case   14:*/		return 0x821407D4;
		  /* 821407D4h */ case   15:  		/* lwzx R6, <#[R6 + R7]> */
		/* 821407D4h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 821407D4h case   15:*/		return 0x821407D8;
		  /* 821407D8h */ case   16:  		/* lwz R6, <#[R6]> */
		/* 821407D8h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000000) );
		/* 821407D8h case   16:*/		return 0x821407DC;
		  /* 821407DCh */ case   17:  		/* rlwinm. R6, R6, 0, 6, 6 */
		/* 821407DCh case   17:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R6,regs.R6);
		/* 821407DCh case   17:*/		return 0x821407E0;
		  /* 821407E0h */ case   18:  		/* bc 12, CR0_EQ, 20 */
		/* 821407E0h case   18:*/		if ( regs.CR[0].eq ) { return 0x821407F4;  }
		/* 821407E0h case   18:*/		return 0x821407E4;
		  /* 821407E4h */ case   19:  		/* addi R10, R10, 1 */
		/* 821407E4h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821407E4h case   19:*/		return 0x821407E8;
		  /* 821407E8h */ case   20:  		/* addi R11, R11, 4 */
		/* 821407E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821407E8h case   20:*/		return 0x821407EC;
		  /* 821407ECh */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 821407ECh case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821407ECh case   21:*/		return 0x821407F0;
		  /* 821407F0h */ case   22:  		/* bc 12, CR6_LT, -40 */
		/* 821407F0h case   22:*/		if ( regs.CR[6].lt ) { return 0x821407C8;  }
		/* 821407F0h case   22:*/		return 0x821407F4;
	}
	return 0x821407F4;
} // Block from 82140798h-821407F4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821407F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821407F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821407F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821407F4);
		  /* 821407F4h */ case    0:  		/* cmplw CR6, R10, R9 */
		/* 821407F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821407F4h case    0:*/		return 0x821407F8;
		  /* 821407F8h */ case    1:  		/* bc 4, CR6_LT, 48 */
		/* 821407F8h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82140828;  }
		/* 821407F8h case    1:*/		return 0x821407FC;
		  /* 821407FCh */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 821407FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 821407FCh case    2:*/		return 0x82140800;
		  /* 82140800h */ case    3:  		/* li R4, 14 */
		/* 82140800h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 82140800h case    3:*/		return 0x82140804;
		  /* 82140804h */ case    4:  		/* li R9, 0 */
		/* 82140804h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140804h case    4:*/		return 0x82140808;
		  /* 82140808h */ case    5:  		/* lwz R8, <#[R11 + 4]> */
		/* 82140808h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82140808h case    5:*/		return 0x8214080C;
		  /* 8214080Ch */ case    6:  		/* li R10, 0 */
		/* 8214080Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8214080Ch case    6:*/		return 0x82140810;
		  /* 82140810h */ case    7:  		/* lwz R7, <#[R11 + 12]> */
		/* 82140810h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140810h case    7:*/		return 0x82140814;
		  /* 82140814h */ case    8:  		/* mr R3, R31 */
		/* 82140814h case    8:*/		regs.R3 = regs.R31;
		/* 82140814h case    8:*/		return 0x82140818;
		  /* 82140818h */ case    9:  		/* lwz R6, <#[R11 + 8]> */
		/* 82140818h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 82140818h case    9:*/		return 0x8214081C;
		  /* 8214081Ch */ case   10:  		/* lwz R5, <#[R11 + 16]> */
		/* 8214081Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 8214081Ch case   10:*/		return 0x82140820;
		  /* 82140820h */ case   11:  		/* bl -294248 */
		/* 82140820h case   11:*/		regs.LR = 0x82140824; return 0x820F8AB8;
		/* 82140820h case   11:*/		return 0x82140824;
		  /* 82140824h */ case   12:  		/* b 684 */
		/* 82140824h case   12:*/		return 0x82140AD0;
		/* 82140824h case   12:*/		return 0x82140828;
	}
	return 0x82140828;
} // Block from 821407F4h-82140828h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82140828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140828);
		  /* 82140828h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 82140828h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 82140828h case    0:*/		return 0x8214082C;
		  /* 8214082Ch */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 8214082Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 8214082Ch case    1:*/		return 0x82140830;
		  /* 82140830h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140830h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140830h case    2:*/		return 0x82140834;
		  /* 82140834h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 82140834h case    3:*/		if ( regs.CR[6].lt ) { return 0x82140840;  }
		/* 82140834h case    3:*/		return 0x82140838;
		  /* 82140838h */ case    4:  		/* li R4, 78 */
		/* 82140838h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 82140838h case    4:*/		return 0x8214083C;
		  /* 8214083Ch */ case    5:  		/* b -56 */
		/* 8214083Ch case    5:*/		return 0x82140804;
		/* 8214083Ch case    5:*/		return 0x82140840;
	}
	return 0x82140840;
} // Block from 82140828h-82140840h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82140840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140840);
		  /* 82140840h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 82140840h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140840h case    0:*/		return 0x82140844;
		  /* 82140844h */ case    1:  		/* mr R27, R30 */
		/* 82140844h case    1:*/		regs.R27 = regs.R30;
		/* 82140844h case    1:*/		return 0x82140848;
		  /* 82140848h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82140848h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82140848h case    2:*/		return 0x8214084C;
		  /* 8214084Ch */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 8214084Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8214084Ch case    3:*/		return 0x82140850;
		  /* 82140850h */ case    4:  		/* bc 4, CR6_GT, 232 */
		/* 82140850h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82140938;  }
		/* 82140850h case    4:*/		return 0x82140854;
		  /* 82140854h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 82140854h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140854h case    5:*/		return 0x82140858;
		  /* 82140858h */ case    6:  		/* li R8, 0 */
		/* 82140858h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140858h case    6:*/		return 0x8214085C;
		  /* 8214085Ch */ case    7:  		/* li R7, 0 */
		/* 8214085Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214085Ch case    7:*/		return 0x82140860;
		  /* 82140860h */ case    8:  		/* lwz R4, <#[R31 + 256]> */
		/* 82140860h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 82140860h case    8:*/		return 0x82140864;
		  /* 82140864h */ case    9:  		/* li R6, 4 */
		/* 82140864h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82140864h case    9:*/		return 0x82140868;
		  /* 82140868h */ case   10:  		/* addi R5, R1, 112 */
		/* 82140868h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82140868h case   10:*/		return 0x8214086C;
		  /* 8214086Ch */ case   11:  		/* mr R3, R31 */
		/* 8214086Ch case   11:*/		regs.R3 = regs.R31;
		/* 8214086Ch case   11:*/		return 0x82140870;
		  /* 82140870h */ case   12:  		/* lwz R11, <#[R11 + 340]> */
		/* 82140870h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 82140870h case   12:*/		return 0x82140874;
		  /* 82140874h */ case   13:  		/* mtspr CTR, R11 */
		/* 82140874h case   13:*/		regs.CTR = regs.R11;
		/* 82140874h case   13:*/		return 0x82140878;
		  /* 82140878h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82140878h case   14:*/		if ( 1 ) { regs.LR = 0x8214087C; return (uint32)regs.CTR; }
		/* 82140878h case   14:*/		return 0x8214087C;
		  /* 8214087Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8214087Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214087Ch case   15:*/		return 0x82140880;
		  /* 82140880h */ case   16:  		/* bc 12, CR0_LT, 592 */
		/* 82140880h case   16:*/		if ( regs.CR[0].lt ) { return 0x82140AD0;  }
		/* 82140880h case   16:*/		return 0x82140884;
		  /* 82140884h */ case   17:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140884h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140884h case   17:*/		return 0x82140888;
		  /* 82140888h */ case   18:  		/* li R10, 1 */
		/* 82140888h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140888h case   18:*/		return 0x8214088C;
		  /* 8214088Ch */ case   19:  		/* li R9, 0 */
		/* 8214088Ch case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8214088Ch case   19:*/		return 0x82140890;
		  /* 82140890h */ case   20:  		/* stw R30, <#[R1 + 108]> */
		/* 82140890h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140890h case   20:*/		return 0x82140894;
		  /* 82140894h */ case   21:  		/* li R8, 0 */
		/* 82140894h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140894h case   21:*/		return 0x82140898;
		  /* 82140898h */ case   22:  		/* stw R30, <#[R1 + 100]> */
		/* 82140898h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140898h case   22:*/		return 0x8214089C;
		  /* 8214089Ch */ case   23:  		/* li R6, 1 */
		/* 8214089Ch case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8214089Ch case   23:*/		return 0x821408A0;
		  /* 821408A0h */ case   24:  		/* stw R30, <#[R1 + 92]> */
		/* 821408A0h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 821408A0h case   24:*/		return 0x821408A4;
		  /* 821408A4h */ case   25:  		/* addi R5, R1, 120 */
		/* 821408A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 821408A4h case   25:*/		return 0x821408A8;
		  /* 821408A8h */ case   26:  		/* stw R30, <#[R1 + 84]> */
		/* 821408A8h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821408A8h case   26:*/		return 0x821408AC;
		  /* 821408ACh */ case   27:  		/* li R4, 78 */
		/* 821408ACh case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 821408ACh case   27:*/		return 0x821408B0;
		  /* 821408B0h */ case   28:  		/* lwz R7, <#[R11 + 8]> */
		/* 821408B0h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821408B0h case   28:*/		return 0x821408B4;
		  /* 821408B4h */ case   29:  		/* mr R3, R31 */
		/* 821408B4h case   29:*/		regs.R3 = regs.R31;
		/* 821408B4h case   29:*/		return 0x821408B8;
		  /* 821408B8h */ case   30:  		/* bl -304472 */
		/* 821408B8h case   30:*/		regs.LR = 0x821408BC; return 0x820F6360;
		/* 821408B8h case   30:*/		return 0x821408BC;
		  /* 821408BCh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 821408BCh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821408BCh case   31:*/		return 0x821408C0;
		  /* 821408C0h */ case   32:  		/* bc 12, CR0_LT, 528 */
		/* 821408C0h case   32:*/		if ( regs.CR[0].lt ) { return 0x82140AD0;  }
		/* 821408C0h case   32:*/		return 0x821408C4;
		  /* 821408C4h */ case   33:  		/* lwz R10, <#[R31 + 260]> */
		/* 821408C4h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 821408C4h case   33:*/		return 0x821408C8;
		  /* 821408C8h */ case   34:  		/* mr R11, R30 */
		/* 821408C8h case   34:*/		regs.R11 = regs.R30;
		/* 821408C8h case   34:*/		return 0x821408CC;
		  /* 821408CCh */ case   35:  		/* lwz R9, <#[R10 + 12]> */
		/* 821408CCh case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821408CCh case   35:*/		return 0x821408D0;
		  /* 821408D0h */ case   36:  		/* cmplwi CR6, R9, 0 */
		/* 821408D0h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821408D0h case   36:*/		return 0x821408D4;
		  /* 821408D4h */ case   37:  		/* bc 4, CR6_GT, 32 */
		/* 821408D4h case   37:*/		if ( !regs.CR[6].gt ) { return 0x821408F4;  }
		/* 821408D4h case   37:*/		return 0x821408D8;
		  /* 821408D8h */ case   38:  		/* addi R9, R1, 108 */
		/* 821408D8h case   38:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 821408D8h case   38:*/		return 0x821408DC;
		  /* 821408DCh */ case   39:  		/* lwz R8, <#[R1 + 120]> */
		/* 821408DCh case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 821408DCh case   39:*/		return 0x821408E0;
		  /* 821408E0h */ case   40:  		/* addi R11, R11, 1 */
		/* 821408E0h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821408E0h case   40:*/		return 0x821408E4;
		  /* 821408E4h */ case   41:  		/* stwu R8, <#[R9 + 4]> */
		/* 821408E4h case   41:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821408E4h case   41:*/		return 0x821408E8;
		  /* 821408E8h */ case   42:  		/* lwz R8, <#[R10 + 12]> */
		/* 821408E8h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000000C) );
		/* 821408E8h case   42:*/		return 0x821408EC;
		  /* 821408ECh */ case   43:  		/* cmplw CR6, R11, R8 */
		/* 821408ECh case   43:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821408ECh case   43:*/		return 0x821408F0;
		  /* 821408F0h */ case   44:  		/* bc 12, CR6_LT, -20 */
		/* 821408F0h case   44:*/		if ( regs.CR[6].lt ) { return 0x821408DC;  }
		/* 821408F0h case   44:*/		return 0x821408F4;
	}
	return 0x821408F4;
} // Block from 82140840h-821408F4h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821408F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821408F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821408F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821408F4);
		  /* 821408F4h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 821408F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 821408F4h case    0:*/		return 0x821408F8;
		  /* 821408F8h */ case    1:  		/* li R9, 0 */
		/* 821408F8h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821408F8h case    1:*/		return 0x821408FC;
		  /* 821408FCh */ case    2:  		/* li R8, 0 */
		/* 821408FCh case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821408FCh case    2:*/		return 0x82140900;
		  /* 82140900h */ case    3:  		/* stw R30, <#[R1 + 108]> */
		/* 82140900h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140900h case    3:*/		return 0x82140904;
		  /* 82140904h */ case    4:  		/* addi R7, R1, 112 */
		/* 82140904h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82140904h case    4:*/		return 0x82140908;
		  /* 82140908h */ case    5:  		/* stw R30, <#[R1 + 100]> */
		/* 82140908h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140908h case    5:*/		return 0x8214090C;
		  /* 8214090Ch */ case    6:  		/* li R4, 1 */
		/* 8214090Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214090Ch case    6:*/		return 0x82140910;
		  /* 82140910h */ case    7:  		/* stw R30, <#[R1 + 92]> */
		/* 82140910h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140910h case    7:*/		return 0x82140914;
		  /* 82140914h */ case    8:  		/* mr R3, R31 */
		/* 82140914h case    8:*/		regs.R3 = regs.R31;
		/* 82140914h case    8:*/		return 0x82140918;
		  /* 82140918h */ case    9:  		/* stw R30, <#[R1 + 84]> */
		/* 82140918h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140918h case    9:*/		return 0x8214091C;
		  /* 8214091Ch */ case   10:  		/* lwz R6, <#[R11 + 12]> */
		/* 8214091Ch case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8214091Ch case   10:*/		return 0x82140920;
		  /* 82140920h */ case   11:  		/* lwz R5, <#[R11 + 16]> */
		/* 82140920h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82140920h case   11:*/		return 0x82140924;
		  /* 82140924h */ case   12:  		/* mr R10, R6 */
		/* 82140924h case   12:*/		regs.R10 = regs.R6;
		/* 82140924h case   12:*/		return 0x82140928;
		  /* 82140928h */ case   13:  		/* bl -304584 */
		/* 82140928h case   13:*/		regs.LR = 0x8214092C; return 0x820F6360;
		/* 82140928h case   13:*/		return 0x8214092C;
		  /* 8214092Ch */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8214092Ch case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214092Ch case   14:*/		return 0x82140930;
		  /* 82140930h */ case   15:  		/* bc 4, CR0_LT, 412 */
		/* 82140930h case   15:*/		if ( !regs.CR[0].lt ) { return 0x82140ACC;  }
		/* 82140930h case   15:*/		return 0x82140934;
		  /* 82140934h */ case   16:  		/* b 412 */
		/* 82140934h case   16:*/		return 0x82140AD0;
		/* 82140934h case   16:*/		return 0x82140938;
	}
	return 0x82140938;
} // Block from 821408F4h-82140938h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82140938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140938);
		  /* 82140938h */ case    0:  		/* mr R28, R30 */
		/* 82140938h case    0:*/		regs.R28 = regs.R30;
		/* 82140938h case    0:*/		return 0x8214093C;
		  /* 8214093Ch */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 8214093Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214093Ch case    1:*/		return 0x82140940;
		  /* 82140940h */ case    2:  		/* bc 12, CR6_EQ, 396 */
		/* 82140940h case    2:*/		if ( regs.CR[6].eq ) { return 0x82140ACC;  }
		/* 82140940h case    2:*/		return 0x82140944;
		  /* 82140944h */ case    3:  		/* mr R29, R30 */
		/* 82140944h case    3:*/		regs.R29 = regs.R30;
		/* 82140944h case    3:*/		return 0x82140948;
		  /* 82140948h */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140948h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140948h case    4:*/		return 0x8214094C;
		  /* 8214094Ch */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 8214094Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8214094Ch case    5:*/		return 0x82140950;
		  /* 82140950h */ case    6:  		/* lwz R9, <#[R11 + 16]> */
		/* 82140950h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82140950h case    6:*/		return 0x82140954;
		  /* 82140954h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 82140954h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82140954h case    7:*/		return 0x82140958;
		  /* 82140958h */ case    8:  		/* lwzx R9, <#[R9 + R29]> */
		/* 82140958h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 82140958h case    8:*/		return 0x8214095C;
		  /* 8214095Ch */ case    9:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8214095Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8214095Ch case    9:*/		return 0x82140960;
		  /* 82140960h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82140960h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82140960h case   10:*/		return 0x82140964;
		  /* 82140964h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82140964h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82140964h case   11:*/		return 0x82140968;
		  /* 82140968h */ case   12:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82140968h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82140968h case   12:*/		return 0x8214096C;
		  /* 8214096Ch */ case   13:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8214096Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214096Ch case   13:*/		return 0x82140970;
		  /* 82140970h */ case   14:  		/* lwz R11, <#[R9 + 16]> */
		/* 82140970h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 82140970h case   14:*/		return 0x82140974;
		  /* 82140974h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82140974h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82140974h case   15:*/		return 0x82140978;
		  /* 82140978h */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 82140978h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82140988;  }
		/* 82140978h case   16:*/		return 0x8214097C;
		  /* 8214097Ch */ case   17:  		/* lwz R9, <#[R10]> */
		/* 8214097Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8214097Ch case   17:*/		return 0x82140980;
		  /* 82140980h */ case   18:  		/* rlwinm. R9, R9, 0, 30, 30 */
		/* 82140980h case   18:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R9);
		/* 82140980h case   18:*/		return 0x82140984;
		  /* 82140984h */ case   19:  		/* bc 4, CR0_EQ, 232 */
		/* 82140984h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82140A6C;  }
		/* 82140984h case   19:*/		return 0x82140988;
	}
	return 0x82140988;
} // Block from 82140938h-82140988h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82140988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140988);
		  /* 82140988h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 82140988h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82140988h case    0:*/		return 0x8214098C;
		  /* 8214098Ch */ case    1:  		/* bc 12, CR6_EQ, 224 */
		/* 8214098Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82140A6C;  }
		/* 8214098Ch case    1:*/		return 0x82140990;
		  /* 82140990h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82140990h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82140990h case    2:*/		return 0x82140994;
		  /* 82140994h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 82140994h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821409AC;  }
		/* 82140994h case    3:*/		return 0x82140998;
		  /* 82140998h */ case    4:  		/* lwz R11, <#[R10]> */
		/* 82140998h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82140998h case    4:*/		return 0x8214099C;
		  /* 8214099Ch */ case    5:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 8214099Ch case    5:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 8214099Ch case    5:*/		return 0x821409A0;
		  /* 821409A0h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821409A0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821409AC;  }
		/* 821409A0h case    6:*/		return 0x821409A4;
		  /* 821409A4h */ case    7:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821409A4h case    7:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821409A4h case    7:*/		return 0x821409A8;
		  /* 821409A8h */ case    8:  		/* bc 4, CR0_EQ, 196 */
		/* 821409A8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82140A6C;  }
		/* 821409A8h case    8:*/		return 0x821409AC;
	}
	return 0x821409AC;
} // Block from 82140988h-821409ACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821409ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821409AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821409AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821409AC);
		  /* 821409ACh */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 821409ACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821409ACh case    0:*/		return 0x821409B0;
		  /* 821409B0h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 821409B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821409E8;  }
		/* 821409B0h case    1:*/		return 0x821409B4;
		  /* 821409B4h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821409B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821409B4h case    2:*/		return 0x821409B8;
		  /* 821409B8h */ case    3:  		/* li R8, 0 */
		/* 821409B8h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821409B8h case    3:*/		return 0x821409BC;
		  /* 821409BCh */ case    4:  		/* li R7, 0 */
		/* 821409BCh case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821409BCh case    4:*/		return 0x821409C0;
		  /* 821409C0h */ case    5:  		/* lwz R4, <#[R31 + 256]> */
		/* 821409C0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 821409C0h case    5:*/		return 0x821409C4;
		  /* 821409C4h */ case    6:  		/* li R6, 4 */
		/* 821409C4h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821409C4h case    6:*/		return 0x821409C8;
		  /* 821409C8h */ case    7:  		/* addi R5, R1, 112 */
		/* 821409C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821409C8h case    7:*/		return 0x821409CC;
		  /* 821409CCh */ case    8:  		/* mr R3, R31 */
		/* 821409CCh case    8:*/		regs.R3 = regs.R31;
		/* 821409CCh case    8:*/		return 0x821409D0;
		  /* 821409D0h */ case    9:  		/* lwz R11, <#[R11 + 340]> */
		/* 821409D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 821409D0h case    9:*/		return 0x821409D4;
		  /* 821409D4h */ case   10:  		/* mtspr CTR, R11 */
		/* 821409D4h case   10:*/		regs.CTR = regs.R11;
		/* 821409D4h case   10:*/		return 0x821409D8;
		  /* 821409D8h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 821409D8h case   11:*/		if ( 1 ) { regs.LR = 0x821409DC; return (uint32)regs.CTR; }
		/* 821409D8h case   11:*/		return 0x821409DC;
		  /* 821409DCh */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 821409DCh case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821409DCh case   12:*/		return 0x821409E0;
		  /* 821409E0h */ case   13:  		/* bc 12, CR0_LT, 240 */
		/* 821409E0h case   13:*/		if ( regs.CR[0].lt ) { return 0x82140AD0;  }
		/* 821409E0h case   13:*/		return 0x821409E4;
		  /* 821409E4h */ case   14:  		/* li R27, 1 */
		/* 821409E4h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821409E4h case   14:*/		return 0x821409E8;
	}
	return 0x821409E8;
} // Block from 821409ACh-821409E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821409E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821409E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821409E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821409E8);
		  /* 821409E8h */ case    0:  		/* stw R30, <#[R1 + 100]> */
		/* 821409E8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 821409E8h case    0:*/		return 0x821409EC;
		  /* 821409ECh */ case    1:  		/* li R10, 1 */
		/* 821409ECh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821409ECh case    1:*/		return 0x821409F0;
		  /* 821409F0h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 821409F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 821409F0h case    2:*/		return 0x821409F4;
		  /* 821409F4h */ case    3:  		/* li R9, 0 */
		/* 821409F4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821409F4h case    3:*/		return 0x821409F8;
	}
	return 0x821409F8;
} // Block from 821409E8h-821409F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821409F8h
// Function '?EmitSize@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821409F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821409F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821409F8);
		  /* 821409F8h */ case    0:  		/* li R8, 0 */
		/* 821409F8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821409F8h case    0:*/		return 0x821409FC;
		  /* 821409FCh */ case    1:  		/* stw R30, <#[R1 + 108]> */
		/* 821409FCh case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 821409FCh case    1:*/		return 0x82140A00;
		  /* 82140A00h */ case    2:  		/* li R6, 1 */
		/* 82140A00h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140A00h case    2:*/		return 0x82140A04;
		  /* 82140A04h */ case    3:  		/* stw R30, <#[R1 + 92]> */
		/* 82140A04h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140A04h case    3:*/		return 0x82140A08;
		  /* 82140A08h */ case    4:  		/* addi R5, R1, 120 */
		/* 82140A08h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 82140A08h case    4:*/		return 0x82140A0C;
		  /* 82140A0Ch */ case    5:  		/* stw R30, <#[R1 + 84]> */
		/* 82140A0Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140A0Ch case    5:*/		return 0x82140A10;
		  /* 82140A10h */ case    6:  		/* li R4, 78 */
		/* 82140A10h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 82140A10h case    6:*/		return 0x82140A14;
		  /* 82140A14h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 82140A14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82140A14h case    7:*/		return 0x82140A18;
		  /* 82140A18h */ case    8:  		/* mr R3, R31 */
		/* 82140A18h case    8:*/		regs.R3 = regs.R31;
		/* 82140A18h case    8:*/		return 0x82140A1C;
		  /* 82140A1Ch */ case    9:  		/* add R7, R11, R29 */
		/* 82140A1Ch case    9:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140A1Ch case    9:*/		return 0x82140A20;
		  /* 82140A20h */ case   10:  		/* bl -304832 */
		/* 82140A20h case   10:*/		regs.LR = 0x82140A24; return 0x820F6360;
		/* 82140A20h case   10:*/		return 0x82140A24;
		  /* 82140A24h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82140A24h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140A24h case   11:*/		return 0x82140A28;
		  /* 82140A28h */ case   12:  		/* bc 12, CR0_LT, 168 */
		/* 82140A28h case   12:*/		if ( regs.CR[0].lt ) { return 0x82140AD0;  }
		/* 82140A28h case   12:*/		return 0x82140A2C;
		  /* 82140A2Ch */ case   13:  		/* stw R30, <#[R1 + 84]> */
		/* 82140A2Ch case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140A2Ch case   13:*/		return 0x82140A30;
		  /* 82140A30h */ case   14:  		/* li R10, 1 */
		/* 82140A30h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140A30h case   14:*/		return 0x82140A34;
		  /* 82140A34h */ case   15:  		/* stw R30, <#[R1 + 92]> */
		/* 82140A34h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140A34h case   15:*/		return 0x82140A38;
	}
	return 0x82140A38;
} // Block from 821409F8h-82140A38h (16 instructions)

