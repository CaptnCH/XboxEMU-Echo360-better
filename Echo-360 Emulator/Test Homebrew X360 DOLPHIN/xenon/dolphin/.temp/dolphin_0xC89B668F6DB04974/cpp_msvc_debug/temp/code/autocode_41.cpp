#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 8220B870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B870);
		  /* 8220B870h */ case    0:  		/* mr R4, R31 */
		/* 8220B870h case    0:*/		regs.R4 = regs.R31;
		/* 8220B870h case    0:*/		return 0x8220B874;
		  /* 8220B874h */ case    1:  		/* mtspr CTR, R26 */
		/* 8220B874h case    1:*/		regs.CTR = regs.R26;
		/* 8220B874h case    1:*/		return 0x8220B878;
		  /* 8220B878h */ case    2:  		/* mr R3, R30 */
		/* 8220B878h case    2:*/		regs.R3 = regs.R30;
		/* 8220B878h case    2:*/		return 0x8220B87C;
		  /* 8220B87Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220B87Ch case    3:*/		if ( 1 ) { regs.LR = 0x8220B880; return (uint32)regs.CTR; }
		/* 8220B87Ch case    3:*/		return 0x8220B880;
		  /* 8220B880h */ case    4:  		/* li R31, 0 */
		/* 8220B880h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220B880h case    4:*/		return 0x8220B884;
	}
	return 0x8220B884;
} // Block from 8220B870h-8220B884h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220B884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B884);
		  /* 8220B884h */ case    0:  		/* mr R3, R31 */
		/* 8220B884h case    0:*/		regs.R3 = regs.R31;
		/* 8220B884h case    0:*/		return 0x8220B888;
		  /* 8220B888h */ case    1:  		/* addi R1, R1, 144 */
		/* 8220B888h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220B888h case    1:*/		return 0x8220B88C;
		  /* 8220B88Ch */ case    2:  		/* b -1549804 */
		/* 8220B88Ch case    2:*/		return 0x820912A0;
		/* 8220B88Ch case    2:*/		return 0x8220B890;
	}
	return 0x8220B890;
} // Block from 8220B884h-8220B890h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220B890h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B890);
		  /* 8220B890h */ case    0:  		/* mfspr R12, LR */
		/* 8220B890h case    0:*/		regs.R12 = regs.LR;
		/* 8220B890h case    0:*/		return 0x8220B894;
		  /* 8220B894h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220B894h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220B894h case    1:*/		return 0x8220B898;
		  /* 8220B898h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8220B898h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220B898h case    2:*/		return 0x8220B89C;
		  /* 8220B89Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220B89Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220B89Ch case    3:*/		return 0x8220B8A0;
		  /* 8220B8A0h */ case    4:  		/* mr R31, R3 */
		/* 8220B8A0h case    4:*/		regs.R31 = regs.R3;
		/* 8220B8A0h case    4:*/		return 0x8220B8A4;
		  /* 8220B8A4h */ case    5:  		/* b 48 */
		/* 8220B8A4h case    5:*/		return 0x8220B8D4;
		/* 8220B8A4h case    5:*/		return 0x8220B8A8;
		  /* 8220B8A8h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220B8A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B8A8h case    6:*/		return 0x8220B8AC;
		  /* 8220B8ACh */ case    7:  		/* lwz R4, <#[R31 + 12]> */
		/* 8220B8ACh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220B8ACh case    7:*/		return 0x8220B8B0;
		  /* 8220B8B0h */ case    8:  		/* lwz R3, <#[R31 + 8]> */
		/* 8220B8B0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B8B0h case    8:*/		return 0x8220B8B4;
		  /* 8220B8B4h */ case    9:  		/* mtspr CTR, R11 */
		/* 8220B8B4h case    9:*/		regs.CTR = regs.R11;
		/* 8220B8B4h case    9:*/		return 0x8220B8B8;
		  /* 8220B8B8h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8220B8B8h case   10:*/		if ( 1 ) { regs.LR = 0x8220B8BC; return (uint32)regs.CTR; }
		/* 8220B8B8h case   10:*/		return 0x8220B8BC;
		  /* 8220B8BCh */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220B8BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B8BCh case   11:*/		return 0x8220B8C0;
		  /* 8220B8C0h */ case   12:  		/* mr R4, R31 */
		/* 8220B8C0h case   12:*/		regs.R4 = regs.R31;
		/* 8220B8C0h case   12:*/		return 0x8220B8C4;
		  /* 8220B8C4h */ case   13:  		/* lwz R3, <#[R31 + 8]> */
		/* 8220B8C4h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B8C4h case   13:*/		return 0x8220B8C8;
		  /* 8220B8C8h */ case   14:  		/* mtspr CTR, R11 */
		/* 8220B8C8h case   14:*/		regs.CTR = regs.R11;
		/* 8220B8C8h case   14:*/		return 0x8220B8CC;
		  /* 8220B8CCh */ case   15:  		/* lwz R31, <#[R31 + 28]> */
		/* 8220B8CCh case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220B8CCh case   15:*/		return 0x8220B8D0;
		  /* 8220B8D0h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8220B8D0h case   16:*/		if ( 1 ) { regs.LR = 0x8220B8D4; return (uint32)regs.CTR; }
		/* 8220B8D0h case   16:*/		return 0x8220B8D4;
	}
	return 0x8220B8D4;
} // Block from 8220B890h-8220B8D4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220B8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B8D4);
		  /* 8220B8D4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220B8D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220B8D4h case    0:*/		return 0x8220B8D8;
		  /* 8220B8D8h */ case    1:  		/* bc 4, CR6_EQ, -48 */
		/* 8220B8D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220B8A8;  }
		/* 8220B8D8h case    1:*/		return 0x8220B8DC;
		  /* 8220B8DCh */ case    2:  		/* addi R1, R1, 96 */
		/* 8220B8DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220B8DCh case    2:*/		return 0x8220B8E0;
		  /* 8220B8E0h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220B8E0h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220B8E0h case    3:*/		return 0x8220B8E4;
		  /* 8220B8E4h */ case    4:  		/* mtspr LR, R12 */
		/* 8220B8E4h case    4:*/		regs.LR = regs.R12;
		/* 8220B8E4h case    4:*/		return 0x8220B8E8;
		  /* 8220B8E8h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8220B8E8h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220B8E8h case    5:*/		return 0x8220B8EC;
		  /* 8220B8ECh */ case    6:  		/* bclr 20, CR0_LT */
		/* 8220B8ECh case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220B8ECh case    6:*/		return 0x8220B8F0;
	}
	return 0x8220B8F0;
} // Block from 8220B8D4h-8220B8F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220B8F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B8F0);
		  /* 8220B8F0h */ case    0:  		/* mfspr R12, LR */
		/* 8220B8F0h case    0:*/		regs.R12 = regs.LR;
		/* 8220B8F0h case    0:*/		return 0x8220B8F4;
		  /* 8220B8F4h */ case    1:  		/* bl -1549984 */
		/* 8220B8F4h case    1:*/		regs.LR = 0x8220B8F8; return 0x82091254;
		/* 8220B8F4h case    1:*/		return 0x8220B8F8;
		  /* 8220B8F8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220B8F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220B8F8h case    2:*/		return 0x8220B8FC;
		  /* 8220B8FCh */ case    3:  		/* lis R10, -32253 */
		/* 8220B8FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220B8FCh case    3:*/		return 0x8220B900;
		  /* 8220B900h */ case    4:  		/* lis R9, -32252 */
		/* 8220B900h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220B900h case    4:*/		return 0x8220B904;
		  /* 8220B904h */ case    5:  		/* lis R11, -32252 */
		/* 8220B904h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220B904h case    5:*/		return 0x8220B908;
		  /* 8220B908h */ case    6:  		/* mr R31, R3 */
		/* 8220B908h case    6:*/		regs.R31 = regs.R3;
		/* 8220B908h case    6:*/		return 0x8220B90C;
		  /* 8220B90Ch */ case    7:  		/* li R30, 0 */
		/* 8220B90Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220B90Ch case    7:*/		return 0x8220B910;
		  /* 8220B910h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220B910h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220B910h case    8:*/		return 0x8220B914;
		  /* 8220B914h */ case    9:  		/* addi R29, R10, 27460 */
		/* 8220B914h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x6B44);
		/* 8220B914h case    9:*/		return 0x8220B918;
		  /* 8220B918h */ case   10:  		/* addi R28, R9, -21548 */
		/* 8220B918h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0xFFFFABD4);
		/* 8220B918h case   10:*/		return 0x8220B91C;
		  /* 8220B91Ch */ case   11:  		/* addi R27, R11, -10448 */
		/* 8220B91Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFD730);
		/* 8220B91Ch case   11:*/		return 0x8220B920;
		  /* 8220B920h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8220B920h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220B93C;  }
		/* 8220B920h case   12:*/		return 0x8220B924;
		  /* 8220B924h */ case   13:  		/* mr R6, R27 */
		/* 8220B924h case   13:*/		regs.R6 = regs.R27;
		/* 8220B924h case   13:*/		return 0x8220B928;
		  /* 8220B928h */ case   14:  		/* mr R5, R28 */
		/* 8220B928h case   14:*/		regs.R5 = regs.R28;
		/* 8220B928h case   14:*/		return 0x8220B92C;
		  /* 8220B92Ch */ case   15:  		/* mr R4, R29 */
		/* 8220B92Ch case   15:*/		regs.R4 = regs.R29;
		/* 8220B92Ch case   15:*/		return 0x8220B930;
		  /* 8220B930h */ case   16:  		/* li R7, 178 */
		/* 8220B930h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xB2);
		/* 8220B930h case   16:*/		return 0x8220B934;
		  /* 8220B934h */ case   17:  		/* li R3, 0 */
		/* 8220B934h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B934h case   17:*/		return 0x8220B938;
		  /* 8220B938h */ case   18:  		/* bl -736560 */
		/* 8220B938h case   18:*/		regs.LR = 0x8220B93C; return 0x82157C08;
		/* 8220B938h case   18:*/		return 0x8220B93C;
	}
	return 0x8220B93C;
} // Block from 8220B8F0h-8220B93Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220B93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B93C);
		  /* 8220B93Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220B93Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220B93Ch case    0:*/		return 0x8220B940;
		  /* 8220B940h */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 8220B940h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220B9D4;  }
		/* 8220B940h case    1:*/		return 0x8220B944;
		  /* 8220B944h */ case    2:  		/* lwz R11, <#[R31 + 24]> */
		/* 8220B944h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B944h case    2:*/		return 0x8220B948;
	}
	return 0x8220B948;
} // Block from 8220B93Ch-8220B948h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220B948h
// Function '?ProcCmdBufStateImm@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PP_STATE_POSTPROCESSOR@1@PAU_PS_PROGRAM_KEY@1@PAU_ABSTRACT_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B948);
		  /* 8220B948h */ case    0:  		/* addi R10, R31, 24 */
		/* 8220B948h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 8220B948h case    0:*/		return 0x8220B94C;
		  /* 8220B94Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220B94Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220B94Ch case    1:*/		return 0x8220B950;
		  /* 8220B950h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8220B950h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220B968;  }
		/* 8220B950h case    2:*/		return 0x8220B954;
		  /* 8220B954h */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220B954h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220B954h case    3:*/		return 0x8220B958;
		  /* 8220B958h */ case    4:  		/* lwz R30, <#[R11]> */
		/* 8220B958h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B958h case    4:*/		return 0x8220B95C;
		  /* 8220B95Ch */ case    5:  		/* lwz R10, <#[R30]> */
		/* 8220B95Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8220B95Ch case    5:*/		return 0x8220B960;
		  /* 8220B960h */ case    6:  		/* stw R10, <#[R11]> */
		/* 8220B960h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220B960h case    6:*/		return 0x8220B964;
		  /* 8220B964h */ case    7:  		/* b 80 */
		/* 8220B964h case    7:*/		return 0x8220B9B4;
		/* 8220B964h case    7:*/		return 0x8220B968;
	}
	return 0x8220B968;
} // Block from 8220B948h-8220B968h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220B968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B968);
		  /* 8220B968h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 8220B968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220B968h case    0:*/		return 0x8220B96C;
		  /* 8220B96Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220B96Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220B96Ch case    1:*/		return 0x8220B970;
		  /* 8220B970h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8220B970h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220B988;  }
		/* 8220B970h case    2:*/		return 0x8220B974;
		  /* 8220B974h */ case    3:  		/* lwz R9, <#[R11 + 24]> */
		/* 8220B974h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 8220B974h case    3:*/		return 0x8220B978;
		  /* 8220B978h */ case    4:  		/* addi R10, R11, 24 */
		/* 8220B978h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x18);
		/* 8220B978h case    4:*/		return 0x8220B97C;
		  /* 8220B97Ch */ case    5:  		/* mr R31, R11 */
		/* 8220B97Ch case    5:*/		regs.R31 = regs.R11;
		/* 8220B97Ch case    5:*/		return 0x8220B980;
		  /* 8220B980h */ case    6:  		/* cmplwi CR6, R9, 0 */
		/* 8220B980h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8220B980h case    6:*/		return 0x8220B984;
		  /* 8220B984h */ case    7:  		/* bc 12, CR6_EQ, -28 */
		/* 8220B984h case    7:*/		if ( regs.CR[6].eq ) { return 0x8220B968;  }
		/* 8220B984h case    7:*/		return 0x8220B988;
	}
	return 0x8220B988;
} // Block from 8220B968h-8220B988h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220B988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B988);
		  /* 8220B988h */ case    0:  		/* lwz R11, <#[R10]> */
		/* 8220B988h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8220B988h case    0:*/		return 0x8220B98C;
		  /* 8220B98Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220B98Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220B98Ch case    1:*/		return 0x8220B990;
		  /* 8220B990h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 8220B990h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220B93C;  }
		/* 8220B990h case    2:*/		return 0x8220B994;
		  /* 8220B994h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 8220B994h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8220B994h case    3:*/		return 0x8220B998;
		  /* 8220B998h */ case    4:  		/* lwz R7, <#[R31 + 8]> */
		/* 8220B998h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 8220B998h case    4:*/		return 0x8220B99C;
		  /* 8220B99Ch */ case    5:  		/* lwz R6, <#[R31 + 4]> */
		/* 8220B99Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 8220B99Ch case    5:*/		return 0x8220B9A0;
		  /* 8220B9A0h */ case    6:  		/* lwz R5, <#[R31]> */
		/* 8220B9A0h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 8220B9A0h case    6:*/		return 0x8220B9A4;
		  /* 8220B9A4h */ case    7:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220B9A4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220B9A4h case    7:*/		return 0x8220B9A8;
		  /* 8220B9A8h */ case    8:  		/* bl -472 */
		/* 8220B9A8h case    8:*/		regs.LR = 0x8220B9AC; return 0x8220B7D0;
		/* 8220B9A8h case    8:*/		return 0x8220B9AC;
		  /* 8220B9ACh */ case    9:  		/* stw R3, <#[R31 + 28]> */
		/* 8220B9ACh case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220B9ACh case    9:*/		return 0x8220B9B0;
		  /* 8220B9B0h */ case   10:  		/* mr R31, R3 */
		/* 8220B9B0h case   10:*/		regs.R31 = regs.R3;
		/* 8220B9B0h case   10:*/		return 0x8220B9B4;
	}
	return 0x8220B9B4;
} // Block from 8220B988h-8220B9B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220B9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B9B4);
		  /* 8220B9B4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220B9B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220B9B4h case    0:*/		return 0x8220B9B8;
		  /* 8220B9B8h */ case    1:  		/* bc 12, CR6_EQ, -124 */
		/* 8220B9B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220B93C;  }
		/* 8220B9B8h case    1:*/		return 0x8220B9BC;
		  /* 8220B9BCh */ case    2:  		/* lwz R11, <#[R31 + 24]> */
		/* 8220B9BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B9BCh case    2:*/		return 0x8220B9C0;
		  /* 8220B9C0h */ case    3:  		/* mr R3, R30 */
		/* 8220B9C0h case    3:*/		regs.R3 = regs.R30;
		/* 8220B9C0h case    3:*/		return 0x8220B9C4;
		  /* 8220B9C4h */ case    4:  		/* addi R11, R11, -1 */
		/* 8220B9C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220B9C4h case    4:*/		return 0x8220B9C8;
		  /* 8220B9C8h */ case    5:  		/* stw R11, <#[R31 + 24]> */
		/* 8220B9C8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8220B9C8h case    5:*/		return 0x8220B9CC;
		  /* 8220B9CCh */ case    6:  		/* addi R1, R1, 128 */
		/* 8220B9CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220B9CCh case    6:*/		return 0x8220B9D0;
		  /* 8220B9D0h */ case    7:  		/* b -1550124 */
		/* 8220B9D0h case    7:*/		return 0x820912A4;
		/* 8220B9D0h case    7:*/		return 0x8220B9D4;
	}
	return 0x8220B9D4;
} // Block from 8220B9B4h-8220B9D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220B9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B9D4);
		  /* 8220B9D4h */ case    0:  		/* mr R6, R27 */
		/* 8220B9D4h case    0:*/		regs.R6 = regs.R27;
		/* 8220B9D4h case    0:*/		return 0x8220B9D8;
		  /* 8220B9D8h */ case    1:  		/* mr R5, R28 */
		/* 8220B9D8h case    1:*/		regs.R5 = regs.R28;
		/* 8220B9D8h case    1:*/		return 0x8220B9DC;
		  /* 8220B9DCh */ case    2:  		/* mr R4, R29 */
		/* 8220B9DCh case    2:*/		regs.R4 = regs.R29;
		/* 8220B9DCh case    2:*/		return 0x8220B9E0;
		  /* 8220B9E0h */ case    3:  		/* li R7, 186 */
		/* 8220B9E0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xBA);
		/* 8220B9E0h case    3:*/		return 0x8220B9E4;
		  /* 8220B9E4h */ case    4:  		/* li R3, 0 */
		/* 8220B9E4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B9E4h case    4:*/		return 0x8220B9E8;
		  /* 8220B9E8h */ case    5:  		/* bl -736736 */
		/* 8220B9E8h case    5:*/		regs.LR = 0x8220B9EC; return 0x82157C08;
		/* 8220B9E8h case    5:*/		return 0x8220B9EC;
		  /* 8220B9ECh */ case    6:  		/* li R3, 0 */
		/* 8220B9ECh case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220B9ECh case    6:*/		return 0x8220B9F0;
		  /* 8220B9F0h */ case    7:  		/* b -36 */
		/* 8220B9F0h case    7:*/		return 0x8220B9CC;
		/* 8220B9F0h case    7:*/		return 0x8220B9F4;
		  /* 8220B9F4h */ case    8:  		/* nop */
		/* 8220B9F4h case    8:*/		cpu::op::nop();
		/* 8220B9F4h case    8:*/		return 0x8220B9F8;
	}
	return 0x8220B9F8;
} // Block from 8220B9D4h-8220B9F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220B9F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220B9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220B9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220B9F8);
		  /* 8220B9F8h */ case    0:  		/* lwz R8, <#[R3 + 16]> */
		/* 8220B9F8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000010) );
		/* 8220B9F8h case    0:*/		return 0x8220B9FC;
		  /* 8220B9FCh */ case    1:  		/* mr R11, R3 */
		/* 8220B9FCh case    1:*/		regs.R11 = regs.R3;
		/* 8220B9FCh case    1:*/		return 0x8220BA00;
		  /* 8220BA00h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 8220BA00h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220BA00h case    2:*/		return 0x8220BA04;
		  /* 8220BA04h */ case    3:  		/* cmplw CR6, R4, R10 */
		/* 8220BA04h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 8220BA04h case    3:*/		return 0x8220BA08;
		  /* 8220BA08h */ case    4:  		/* bc 12, CR6_LT, 24 */
		/* 8220BA08h case    4:*/		if ( regs.CR[6].lt ) { return 0x8220BA20;  }
		/* 8220BA08h case    4:*/		return 0x8220BA0C;
		  /* 8220BA0Ch */ case    5:  		/* lwz R9, <#[R11 + 20]> */
		/* 8220BA0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8220BA0Ch case    5:*/		return 0x8220BA10;
		  /* 8220BA10h */ case    6:  		/* mullw R9, R9, R8 */
		/* 8220BA10h case    6:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8220BA10h case    6:*/		return 0x8220BA14;
		  /* 8220BA14h */ case    7:  		/* add R10, R9, R10 */
		/* 8220BA14h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8220BA14h case    7:*/		return 0x8220BA18;
		  /* 8220BA18h */ case    8:  		/* cmplw CR6, R4, R10 */
		/* 8220BA18h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 8220BA18h case    8:*/		return 0x8220BA1C;
		  /* 8220BA1Ch */ case    9:  		/* bc 4, CR6_GT, 16 */
		/* 8220BA1Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x8220BA2C;  }
		/* 8220BA1Ch case    9:*/		return 0x8220BA20;
	}
	return 0x8220BA20;
} // Block from 8220B9F8h-8220BA20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220BA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BA20);
		  /* 8220BA20h */ case    0:  		/* lwz R11, <#[R11 + 28]> */
		/* 8220BA20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8220BA20h case    0:*/		return 0x8220BA24;
		  /* 8220BA24h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220BA24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BA24h case    1:*/		return 0x8220BA28;
		  /* 8220BA28h */ case    2:  		/* bc 4, CR6_EQ, -40 */
		/* 8220BA28h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220BA00;  }
		/* 8220BA28h case    2:*/		return 0x8220BA2C;
	}
	return 0x8220BA2C;
} // Block from 8220BA20h-8220BA2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220BA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BA2C);
		  /* 8220BA2Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8220BA2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BA2Ch case    0:*/		return 0x8220BA30;
		  /* 8220BA30h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8220BA30h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220BA58;  }
		/* 8220BA30h case    1:*/		return 0x8220BA34;
		  /* 8220BA34h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 8220BA34h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220BA34h case    2:*/		return 0x8220BA38;
		  /* 8220BA38h */ case    3:  		/* li R3, 0 */
		/* 8220BA38h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BA38h case    3:*/		return 0x8220BA3C;
		  /* 8220BA3Ch */ case    4:  		/* lwz R9, <#[R10]> */
		/* 8220BA3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8220BA3Ch case    4:*/		return 0x8220BA40;
		  /* 8220BA40h */ case    5:  		/* stw R9, <#[R4]> */
		/* 8220BA40h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 8220BA40h case    5:*/		return 0x8220BA44;
		  /* 8220BA44h */ case    6:  		/* stw R4, <#[R10]> */
		/* 8220BA44h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 8220BA44h case    6:*/		return 0x8220BA48;
		  /* 8220BA48h */ case    7:  		/* lwz R10, <#[R11 + 24]> */
		/* 8220BA48h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8220BA48h case    7:*/		return 0x8220BA4C;
		  /* 8220BA4Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 8220BA4Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8220BA4Ch case    8:*/		return 0x8220BA50;
		  /* 8220BA50h */ case    9:  		/* stw R10, <#[R11 + 24]> */
		/* 8220BA50h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8220BA50h case    9:*/		return 0x8220BA54;
		  /* 8220BA54h */ case   10:  		/* bclr 20, CR0_LT */
		/* 8220BA54h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220BA54h case   10:*/		return 0x8220BA58;
	}
	return 0x8220BA58;
} // Block from 8220BA2Ch-8220BA58h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220BA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BA58);
		  /* 8220BA58h */ case    0:  		/* li R3, 1 */
		/* 8220BA58h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220BA58h case    0:*/		return 0x8220BA5C;
		  /* 8220BA5Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8220BA5Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220BA5Ch case    1:*/		return 0x8220BA60;
	}
	return 0x8220BA60;
} // Block from 8220BA58h-8220BA60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220BA60h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BA60);
		  /* 8220BA60h */ case    0:  		/* mfspr R12, LR */
		/* 8220BA60h case    0:*/		regs.R12 = regs.LR;
		/* 8220BA60h case    0:*/		return 0x8220BA64;
		  /* 8220BA64h */ case    1:  		/* bl -1550344 */
		/* 8220BA64h case    1:*/		regs.LR = 0x8220BA68; return 0x8209125C;
		/* 8220BA64h case    1:*/		return 0x8220BA68;
		  /* 8220BA68h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220BA68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220BA68h case    2:*/		return 0x8220BA6C;
		  /* 8220BA6Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220BA6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BA6Ch case    3:*/		return 0x8220BA70;
		  /* 8220BA70h */ case    4:  		/* lis R10, -32252 */
		/* 8220BA70h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BA70h case    4:*/		return 0x8220BA74;
		  /* 8220BA74h */ case    5:  		/* mr R31, R3 */
		/* 8220BA74h case    5:*/		regs.R31 = regs.R3;
		/* 8220BA74h case    5:*/		return 0x8220BA78;
		  /* 8220BA78h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BA78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BA78h case    6:*/		return 0x8220BA7C;
		  /* 8220BA7Ch */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BA7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BA7Ch case    7:*/		return 0x8220BA80;
		  /* 8220BA80h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BA80h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BA80h case    8:*/		return 0x8220BA84;
		  /* 8220BA84h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BA84h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BAA4;  }
		/* 8220BA84h case    9:*/		return 0x8220BA88;
		  /* 8220BA88h */ case   10:  		/* lis R11, -32252 */
		/* 8220BA88h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BA88h case   10:*/		return 0x8220BA8C;
		  /* 8220BA8Ch */ case   11:  		/* mr R6, R29 */
		/* 8220BA8Ch case   11:*/		regs.R6 = regs.R29;
		/* 8220BA8Ch case   11:*/		return 0x8220BA90;
		  /* 8220BA90h */ case   12:  		/* addi R5, R11, -10584 */
		/* 8220BA90h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220BA90h case   12:*/		return 0x8220BA94;
		  /* 8220BA94h */ case   13:  		/* mr R4, R30 */
		/* 8220BA94h case   13:*/		regs.R4 = regs.R30;
		/* 8220BA94h case   13:*/		return 0x8220BA98;
		  /* 8220BA98h */ case   14:  		/* li R7, 150 */
		/* 8220BA98h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x96);
		/* 8220BA98h case   14:*/		return 0x8220BA9C;
		  /* 8220BA9Ch */ case   15:  		/* li R3, 0 */
		/* 8220BA9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BA9Ch case   15:*/		return 0x8220BAA0;
		  /* 8220BAA0h */ case   16:  		/* bl -736920 */
		/* 8220BAA0h case   16:*/		regs.LR = 0x8220BAA4; return 0x82157C08;
		/* 8220BAA0h case   16:*/		return 0x8220BAA4;
	}
	return 0x8220BAA4;
} // Block from 8220BA60h-8220BAA4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220BAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BAA4);
		  /* 8220BAA4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BAA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BAA4h case    0:*/		return 0x8220BAA8;
		  /* 8220BAA8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220BAA8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BAA8h case    1:*/		return 0x8220BAAC;
		  /* 8220BAACh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8220BAACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BACC;  }
		/* 8220BAACh case    2:*/		return 0x8220BAB0;
		  /* 8220BAB0h */ case    3:  		/* lis R11, -32252 */
		/* 8220BAB0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BAB0h case    3:*/		return 0x8220BAB4;
		  /* 8220BAB4h */ case    4:  		/* mr R6, R29 */
		/* 8220BAB4h case    4:*/		regs.R6 = regs.R29;
		/* 8220BAB4h case    4:*/		return 0x8220BAB8;
		  /* 8220BAB8h */ case    5:  		/* addi R5, R11, -10360 */
		/* 8220BAB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD788);
		/* 8220BAB8h case    5:*/		return 0x8220BABC;
		  /* 8220BABCh */ case    6:  		/* mr R4, R30 */
		/* 8220BABCh case    6:*/		regs.R4 = regs.R30;
		/* 8220BABCh case    6:*/		return 0x8220BAC0;
		  /* 8220BAC0h */ case    7:  		/* li R7, 151 */
		/* 8220BAC0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x97);
		/* 8220BAC0h case    7:*/		return 0x8220BAC4;
		  /* 8220BAC4h */ case    8:  		/* li R3, 0 */
		/* 8220BAC4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BAC4h case    8:*/		return 0x8220BAC8;
		  /* 8220BAC8h */ case    9:  		/* bl -736960 */
		/* 8220BAC8h case    9:*/		regs.LR = 0x8220BACC; return 0x82157C08;
		/* 8220BAC8h case    9:*/		return 0x8220BACC;
	}
	return 0x8220BACC;
} // Block from 8220BAA4h-8220BACCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220BACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BACC);
		  /* 8220BACCh */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220BACCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220BACCh case    0:*/		return 0x8220BAD0;
		  /* 8220BAD0h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BAD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BAD0h case    1:*/		return 0x8220BAD4;
		  /* 8220BAD4h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BAD4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BADC;  }
		/* 8220BAD4h case    2:*/		return 0x8220BAD8;
		  /* 8220BAD8h */ case    3:  		/* bl -584 */
		/* 8220BAD8h case    3:*/		regs.LR = 0x8220BADC; return 0x8220B890;
		/* 8220BAD8h case    3:*/		return 0x8220BADC;
	}
	return 0x8220BADC;
} // Block from 8220BACCh-8220BADCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BADC);
		  /* 8220BADCh */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BADCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BADCh case    0:*/		return 0x8220BAE0;
		  /* 8220BAE0h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BAE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BAE0h case    1:*/		return 0x8220BAE4;
		  /* 8220BAE4h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BAE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BAEC;  }
		/* 8220BAE4h case    2:*/		return 0x8220BAE8;
		  /* 8220BAE8h */ case    3:  		/* bl -600 */
		/* 8220BAE8h case    3:*/		regs.LR = 0x8220BAEC; return 0x8220B890;
		/* 8220BAE8h case    3:*/		return 0x8220BAEC;
	}
	return 0x8220BAEC;
} // Block from 8220BADCh-8220BAECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BAEC);
		  /* 8220BAECh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220BAECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220BAECh case    0:*/		return 0x8220BAF0;
		  /* 8220BAF0h */ case    1:  		/* mr R4, R31 */
		/* 8220BAF0h case    1:*/		regs.R4 = regs.R31;
		/* 8220BAF0h case    1:*/		return 0x8220BAF4;
		  /* 8220BAF4h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220BAF4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220BAF4h case    2:*/		return 0x8220BAF8;
		  /* 8220BAF8h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220BAF8h case    3:*/		regs.CTR = regs.R11;
		/* 8220BAF8h case    3:*/		return 0x8220BAFC;
		  /* 8220BAFCh */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220BAFCh case    4:*/		if ( 1 ) { regs.LR = 0x8220BB00; return (uint32)regs.CTR; }
		/* 8220BAFCh case    4:*/		return 0x8220BB00;
		  /* 8220BB00h */ case    5:  		/* addi R1, R1, 112 */
		/* 8220BB00h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220BB00h case    5:*/		return 0x8220BB04;
		  /* 8220BB04h */ case    6:  		/* b -1550424 */
		/* 8220BB04h case    6:*/		return 0x820912AC;
		/* 8220BB04h case    6:*/		return 0x8220BB08;
	}
	return 0x8220BB08;
} // Block from 8220BAECh-8220BB08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220BB08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BB08);
		  /* 8220BB08h */ case    0:  		/* mfspr R12, LR */
		/* 8220BB08h case    0:*/		regs.R12 = regs.LR;
		/* 8220BB08h case    0:*/		return 0x8220BB0C;
		  /* 8220BB0Ch */ case    1:  		/* bl -1550516 */
		/* 8220BB0Ch case    1:*/		regs.LR = 0x8220BB10; return 0x82091258;
		/* 8220BB0Ch case    1:*/		return 0x8220BB10;
		  /* 8220BB10h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220BB10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220BB10h case    2:*/		return 0x8220BB14;
		  /* 8220BB14h */ case    3:  		/* lis R11, -32253 */
		/* 8220BB14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BB14h case    3:*/		return 0x8220BB18;
		  /* 8220BB18h */ case    4:  		/* lis R10, -32252 */
		/* 8220BB18h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BB18h case    4:*/		return 0x8220BB1C;
		  /* 8220BB1Ch */ case    5:  		/* mr R31, R3 */
		/* 8220BB1Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220BB1Ch case    5:*/		return 0x8220BB20;
		  /* 8220BB20h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BB20h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BB20h case    6:*/		return 0x8220BB24;
		  /* 8220BB24h */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BB24h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BB24h case    7:*/		return 0x8220BB28;
		  /* 8220BB28h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BB28h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BB28h case    8:*/		return 0x8220BB2C;
		  /* 8220BB2Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BB2Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BB4C;  }
		/* 8220BB2Ch case    9:*/		return 0x8220BB30;
		  /* 8220BB30h */ case   10:  		/* lis R11, -32252 */
		/* 8220BB30h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BB30h case   10:*/		return 0x8220BB34;
		  /* 8220BB34h */ case   11:  		/* mr R6, R29 */
		/* 8220BB34h case   11:*/		regs.R6 = regs.R29;
		/* 8220BB34h case   11:*/		return 0x8220BB38;
		  /* 8220BB38h */ case   12:  		/* addi R5, R11, -10584 */
		/* 8220BB38h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220BB38h case   12:*/		return 0x8220BB3C;
		  /* 8220BB3Ch */ case   13:  		/* mr R4, R30 */
		/* 8220BB3Ch case   13:*/		regs.R4 = regs.R30;
		/* 8220BB3Ch case   13:*/		return 0x8220BB40;
		  /* 8220BB40h */ case   14:  		/* li R7, 186 */
		/* 8220BB40h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xBA);
		/* 8220BB40h case   14:*/		return 0x8220BB44;
		  /* 8220BB44h */ case   15:  		/* li R3, 0 */
		/* 8220BB44h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BB44h case   15:*/		return 0x8220BB48;
		  /* 8220BB48h */ case   16:  		/* bl -737088 */
		/* 8220BB48h case   16:*/		regs.LR = 0x8220BB4C; return 0x82157C08;
		/* 8220BB48h case   16:*/		return 0x8220BB4C;
	}
	return 0x8220BB4C;
} // Block from 8220BB08h-8220BB4Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220BB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BB4C);
		  /* 8220BB4Ch */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BB4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BB4Ch case    0:*/		return 0x8220BB50;
		  /* 8220BB50h */ case    1:  		/* bl -608 */
		/* 8220BB50h case    1:*/		regs.LR = 0x8220BB54; return 0x8220B8F0;
		/* 8220BB50h case    1:*/		return 0x8220BB54;
		  /* 8220BB54h */ case    2:  		/* or. R28, R3, R3 */
		/* 8220BB54h case    2:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8220BB54h case    2:*/		return 0x8220BB58;
		  /* 8220BB58h */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 8220BB58h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220BB7C;  }
		/* 8220BB58h case    3:*/		return 0x8220BB5C;
		  /* 8220BB5Ch */ case    4:  		/* lis R11, -32252 */
		/* 8220BB5Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BB5Ch case    4:*/		return 0x8220BB60;
		  /* 8220BB60h */ case    5:  		/* mr R6, R29 */
		/* 8220BB60h case    5:*/		regs.R6 = regs.R29;
		/* 8220BB60h case    5:*/		return 0x8220BB64;
		  /* 8220BB64h */ case    6:  		/* addi R5, R11, -21644 */
		/* 8220BB64h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB74);
		/* 8220BB64h case    6:*/		return 0x8220BB68;
		  /* 8220BB68h */ case    7:  		/* mr R4, R30 */
		/* 8220BB68h case    7:*/		regs.R4 = regs.R30;
		/* 8220BB68h case    7:*/		return 0x8220BB6C;
		  /* 8220BB6Ch */ case    8:  		/* li R7, 192 */
		/* 8220BB6Ch case    8:*/		cpu::op::li<0>(regs,&regs.R7,0xC0);
		/* 8220BB6Ch case    8:*/		return 0x8220BB70;
		  /* 8220BB70h */ case    9:  		/* li R3, 0 */
		/* 8220BB70h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BB70h case    9:*/		return 0x8220BB74;
		  /* 8220BB74h */ case   10:  		/* bl -737132 */
		/* 8220BB74h case   10:*/		regs.LR = 0x8220BB78; return 0x82157C08;
		/* 8220BB74h case   10:*/		return 0x8220BB78;
		  /* 8220BB78h */ case   11:  		/* b 40 */
		/* 8220BB78h case   11:*/		return 0x8220BBA0;
		/* 8220BB78h case   11:*/		return 0x8220BB7C;
	}
	return 0x8220BB7C;
} // Block from 8220BB4Ch-8220BB7Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220BB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BB7C);
		  /* 8220BB7Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BB7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BB7Ch case    0:*/		return 0x8220BB80;
		  /* 8220BB80h */ case    1:  		/* mr R3, R28 */
		/* 8220BB80h case    1:*/		regs.R3 = regs.R28;
		/* 8220BB80h case    1:*/		return 0x8220BB84;
		  /* 8220BB84h */ case    2:  		/* lwz R7, <#[R31 + 8]> */
		/* 8220BB84h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 8220BB84h case    2:*/		return 0x8220BB88;
		  /* 8220BB88h */ case    3:  		/* addi R11, R11, 1 */
		/* 8220BB88h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220BB88h case    3:*/		return 0x8220BB8C;
		  /* 8220BB8Ch */ case    4:  		/* lwz R6, <#[R31 + 4]> */
		/* 8220BB8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 8220BB8Ch case    4:*/		return 0x8220BB90;
		  /* 8220BB90h */ case    5:  		/* lwz R5, <#[R31]> */
		/* 8220BB90h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 8220BB90h case    5:*/		return 0x8220BB94;
		  /* 8220BB94h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 8220BB94h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BB94h case    6:*/		return 0x8220BB98;
		  /* 8220BB98h */ case    7:  		/* lwz R4, <#[R31 + 20]> */
		/* 8220BB98h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8220BB98h case    7:*/		return 0x8220BB9C;
		  /* 8220BB9Ch */ case    8:  		/* bl -721636 */
		/* 8220BB9Ch case    8:*/		regs.LR = 0x8220BBA0; return 0x8215B8B8;
		/* 8220BB9Ch case    8:*/		return 0x8220BBA0;
	}
	return 0x8220BBA0;
} // Block from 8220BB7Ch-8220BBA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220BBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BBA0);
		  /* 8220BBA0h */ case    0:  		/* mr R3, R28 */
		/* 8220BBA0h case    0:*/		regs.R3 = regs.R28;
		/* 8220BBA0h case    0:*/		return 0x8220BBA4;
		  /* 8220BBA4h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220BBA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220BBA4h case    1:*/		return 0x8220BBA8;
		  /* 8220BBA8h */ case    2:  		/* b -1550592 */
		/* 8220BBA8h case    2:*/		return 0x820912A8;
		/* 8220BBA8h case    2:*/		return 0x8220BBAC;
		  /* 8220BBACh */ case    3:  		/* nop */
		/* 8220BBACh case    3:*/		cpu::op::nop();
		/* 8220BBACh case    3:*/		return 0x8220BBB0;
	}
	return 0x8220BBB0;
} // Block from 8220BBA0h-8220BBB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BBB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BBB0);
		  /* 8220BBB0h */ case    0:  		/* mfspr R12, LR */
		/* 8220BBB0h case    0:*/		regs.R12 = regs.LR;
		/* 8220BBB0h case    0:*/		return 0x8220BBB4;
		  /* 8220BBB4h */ case    1:  		/* bl -1550684 */
		/* 8220BBB4h case    1:*/		regs.LR = 0x8220BBB8; return 0x82091258;
		/* 8220BBB4h case    1:*/		return 0x8220BBB8;
		  /* 8220BBB8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220BBB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220BBB8h case    2:*/		return 0x8220BBBC;
		  /* 8220BBBCh */ case    3:  		/* lis R11, -32253 */
		/* 8220BBBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BBBCh case    3:*/		return 0x8220BBC0;
		  /* 8220BBC0h */ case    4:  		/* lis R10, -32252 */
		/* 8220BBC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BBC0h case    4:*/		return 0x8220BBC4;
		  /* 8220BBC4h */ case    5:  		/* mr R31, R3 */
		/* 8220BBC4h case    5:*/		regs.R31 = regs.R3;
		/* 8220BBC4h case    5:*/		return 0x8220BBC8;
		  /* 8220BBC8h */ case    6:  		/* mr R28, R4 */
		/* 8220BBC8h case    6:*/		regs.R28 = regs.R4;
		/* 8220BBC8h case    6:*/		return 0x8220BBCC;
		  /* 8220BBCCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220BBCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BBCCh case    7:*/		return 0x8220BBD0;
		  /* 8220BBD0h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8220BBD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BBD0h case    8:*/		return 0x8220BBD4;
		  /* 8220BBD4h */ case    9:  		/* addi R29, R10, -10328 */
		/* 8220BBD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BBD4h case    9:*/		return 0x8220BBD8;
		  /* 8220BBD8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BBD8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220BBF8;  }
		/* 8220BBD8h case   10:*/		return 0x8220BBDC;
		  /* 8220BBDCh */ case   11:  		/* lis R11, -32252 */
		/* 8220BBDCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BBDCh case   11:*/		return 0x8220BBE0;
		  /* 8220BBE0h */ case   12:  		/* mr R6, R29 */
		/* 8220BBE0h case   12:*/		regs.R6 = regs.R29;
		/* 8220BBE0h case   12:*/		return 0x8220BBE4;
		  /* 8220BBE4h */ case   13:  		/* addi R5, R11, -10584 */
		/* 8220BBE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220BBE4h case   13:*/		return 0x8220BBE8;
		  /* 8220BBE8h */ case   14:  		/* mr R4, R30 */
		/* 8220BBE8h case   14:*/		regs.R4 = regs.R30;
		/* 8220BBE8h case   14:*/		return 0x8220BBEC;
		  /* 8220BBECh */ case   15:  		/* li R7, 224 */
		/* 8220BBECh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xE0);
		/* 8220BBECh case   15:*/		return 0x8220BBF0;
		  /* 8220BBF0h */ case   16:  		/* li R3, 0 */
		/* 8220BBF0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BBF0h case   16:*/		return 0x8220BBF4;
		  /* 8220BBF4h */ case   17:  		/* bl -737260 */
		/* 8220BBF4h case   17:*/		regs.LR = 0x8220BBF8; return 0x82157C08;
		/* 8220BBF4h case   17:*/		return 0x8220BBF8;
	}
	return 0x8220BBF8;
} // Block from 8220BBB0h-8220BBF8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220BBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BBF8);
		  /* 8220BBF8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220BBF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220BBF8h case    0:*/		return 0x8220BBFC;
		  /* 8220BBFCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BBFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220BC1C;  }
		/* 8220BBFCh case    1:*/		return 0x8220BC00;
		  /* 8220BC00h */ case    2:  		/* lis R11, -32252 */
		/* 8220BC00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BC00h case    2:*/		return 0x8220BC04;
		  /* 8220BC04h */ case    3:  		/* mr R6, R29 */
		/* 8220BC04h case    3:*/		regs.R6 = regs.R29;
		/* 8220BC04h case    3:*/		return 0x8220BC08;
		  /* 8220BC08h */ case    4:  		/* addi R5, R11, -21472 */
		/* 8220BC08h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220BC08h case    4:*/		return 0x8220BC0C;
		  /* 8220BC0Ch */ case    5:  		/* mr R4, R30 */
		/* 8220BC0Ch case    5:*/		regs.R4 = regs.R30;
		/* 8220BC0Ch case    5:*/		return 0x8220BC10;
		  /* 8220BC10h */ case    6:  		/* li R7, 225 */
		/* 8220BC10h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xE1);
		/* 8220BC10h case    6:*/		return 0x8220BC14;
		  /* 8220BC14h */ case    7:  		/* li R3, 0 */
		/* 8220BC14h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BC14h case    7:*/		return 0x8220BC18;
		  /* 8220BC18h */ case    8:  		/* bl -737296 */
		/* 8220BC18h case    8:*/		regs.LR = 0x8220BC1C; return 0x82157C08;
		/* 8220BC18h case    8:*/		return 0x8220BC1C;
	}
	return 0x8220BC1C;
} // Block from 8220BBF8h-8220BC1Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220BC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BC1C);
		  /* 8220BC1Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BC1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BC1Ch case    0:*/		return 0x8220BC20;
		  /* 8220BC20h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220BC20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BC20h case    1:*/		return 0x8220BC24;
		  /* 8220BC24h */ case    2:  		/* bc 12, CR6_GT, 32 */
		/* 8220BC24h case    2:*/		if ( regs.CR[6].gt ) { return 0x8220BC44;  }
		/* 8220BC24h case    2:*/		return 0x8220BC28;
		  /* 8220BC28h */ case    3:  		/* lis R11, -32252 */
		/* 8220BC28h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BC28h case    3:*/		return 0x8220BC2C;
		  /* 8220BC2Ch */ case    4:  		/* mr R6, R29 */
		/* 8220BC2Ch case    4:*/		regs.R6 = regs.R29;
		/* 8220BC2Ch case    4:*/		return 0x8220BC30;
		  /* 8220BC30h */ case    5:  		/* addi R5, R11, -10192 */
		/* 8220BC30h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD830);
		/* 8220BC30h case    5:*/		return 0x8220BC34;
		  /* 8220BC34h */ case    6:  		/* mr R4, R30 */
		/* 8220BC34h case    6:*/		regs.R4 = regs.R30;
		/* 8220BC34h case    6:*/		return 0x8220BC38;
		  /* 8220BC38h */ case    7:  		/* li R7, 229 */
		/* 8220BC38h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xE5);
		/* 8220BC38h case    7:*/		return 0x8220BC3C;
		  /* 8220BC3Ch */ case    8:  		/* li R3, 0 */
		/* 8220BC3Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BC3Ch case    8:*/		return 0x8220BC40;
		  /* 8220BC40h */ case    9:  		/* bl -737336 */
		/* 8220BC40h case    9:*/		regs.LR = 0x8220BC44; return 0x82157C08;
		/* 8220BC40h case    9:*/		return 0x8220BC44;
	}
	return 0x8220BC44;
} // Block from 8220BC1Ch-8220BC44h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220BC44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BC44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BC44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BC44);
		  /* 8220BC44h */ case    0:  		/* mr R3, R28 */
		/* 8220BC44h case    0:*/		regs.R3 = regs.R28;
		/* 8220BC44h case    0:*/		return 0x8220BC48;
		  /* 8220BC48h */ case    1:  		/* bl -719904 */
		/* 8220BC48h case    1:*/		regs.LR = 0x8220BC4C; return 0x8215C028;
		/* 8220BC48h case    1:*/		return 0x8220BC4C;
		  /* 8220BC4Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220BC4Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220BC4Ch case    2:*/		return 0x8220BC50;
		  /* 8220BC50h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8220BC50h case    3:*/		if ( regs.CR[0].eq ) { return 0x8220BC70;  }
		/* 8220BC50h case    3:*/		return 0x8220BC54;
		  /* 8220BC54h */ case    4:  		/* lis R11, -32252 */
		/* 8220BC54h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BC54h case    4:*/		return 0x8220BC58;
		  /* 8220BC58h */ case    5:  		/* mr R6, R29 */
		/* 8220BC58h case    5:*/		regs.R6 = regs.R29;
		/* 8220BC58h case    5:*/		return 0x8220BC5C;
		  /* 8220BC5Ch */ case    6:  		/* addi R5, R11, -10224 */
		/* 8220BC5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD810);
		/* 8220BC5Ch case    6:*/		return 0x8220BC60;
		  /* 8220BC60h */ case    7:  		/* mr R4, R30 */
		/* 8220BC60h case    7:*/		regs.R4 = regs.R30;
		/* 8220BC60h case    7:*/		return 0x8220BC64;
		  /* 8220BC64h */ case    8:  		/* li R7, 230 */
		/* 8220BC64h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0xE6);
		/* 8220BC64h case    8:*/		return 0x8220BC68;
		  /* 8220BC68h */ case    9:  		/* li R3, 0 */
		/* 8220BC68h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BC68h case    9:*/		return 0x8220BC6C;
		  /* 8220BC6Ch */ case   10:  		/* bl -737380 */
		/* 8220BC6Ch case   10:*/		regs.LR = 0x8220BC70; return 0x82157C08;
		/* 8220BC6Ch case   10:*/		return 0x8220BC70;
	}
	return 0x8220BC70;
} // Block from 8220BC44h-8220BC70h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220BC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BC70);
		  /* 8220BC70h */ case    0:  		/* mr R3, R28 */
		/* 8220BC70h case    0:*/		regs.R3 = regs.R28;
		/* 8220BC70h case    0:*/		return 0x8220BC74;
		  /* 8220BC74h */ case    1:  		/* bl -721524 */
		/* 8220BC74h case    1:*/		regs.LR = 0x8220BC78; return 0x8215BA00;
		/* 8220BC74h case    1:*/		return 0x8220BC78;
		  /* 8220BC78h */ case    2:  		/* bl -719640 */
		/* 8220BC78h case    2:*/		regs.LR = 0x8220BC7C; return 0x8215C160;
		/* 8220BC78h case    2:*/		return 0x8220BC7C;
		  /* 8220BC7Ch */ case    3:  		/* mr R5, R3 */
		/* 8220BC7Ch case    3:*/		regs.R5 = regs.R3;
		/* 8220BC7Ch case    3:*/		return 0x8220BC80;
		  /* 8220BC80h */ case    4:  		/* li R4, 0 */
		/* 8220BC80h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220BC80h case    4:*/		return 0x8220BC84;
		  /* 8220BC84h */ case    5:  		/* mr R3, R28 */
		/* 8220BC84h case    5:*/		regs.R3 = regs.R28;
		/* 8220BC84h case    5:*/		return 0x8220BC88;
		  /* 8220BC88h */ case    6:  		/* bl -1550664 */
		/* 8220BC88h case    6:*/		regs.LR = 0x8220BC8C; return 0x82091340;
		/* 8220BC88h case    6:*/		return 0x8220BC8C;
		  /* 8220BC8Ch */ case    7:  		/* mr R4, R28 */
		/* 8220BC8Ch case    7:*/		regs.R4 = regs.R28;
		/* 8220BC8Ch case    7:*/		return 0x8220BC90;
		  /* 8220BC90h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BC90h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BC90h case    8:*/		return 0x8220BC94;
		  /* 8220BC94h */ case    9:  		/* bl -668 */
		/* 8220BC94h case    9:*/		regs.LR = 0x8220BC98; return 0x8220B9F8;
		/* 8220BC94h case    9:*/		return 0x8220BC98;
		  /* 8220BC98h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BC98h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BC98h case   10:*/		return 0x8220BC9C;
		  /* 8220BC9Ch */ case   11:  		/* addi R11, R11, -1 */
		/* 8220BC9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220BC9Ch case   11:*/		return 0x8220BCA0;
		  /* 8220BCA0h */ case   12:  		/* stw R11, <#[R31 + 12]> */
		/* 8220BCA0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BCA0h case   12:*/		return 0x8220BCA4;
		  /* 8220BCA4h */ case   13:  		/* addi R1, R1, 128 */
		/* 8220BCA4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220BCA4h case   13:*/		return 0x8220BCA8;
		  /* 8220BCA8h */ case   14:  		/* b -1550848 */
		/* 8220BCA8h case   14:*/		return 0x820912A8;
		/* 8220BCA8h case   14:*/		return 0x8220BCAC;
		  /* 8220BCACh */ case   15:  		/* nop */
		/* 8220BCACh case   15:*/		cpu::op::nop();
		/* 8220BCACh case   15:*/		return 0x8220BCB0;
	}
	return 0x8220BCB0;
} // Block from 8220BC70h-8220BCB0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220BCB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BCB0);
		  /* 8220BCB0h */ case    0:  		/* mfspr R12, LR */
		/* 8220BCB0h case    0:*/		regs.R12 = regs.LR;
		/* 8220BCB0h case    0:*/		return 0x8220BCB4;
		  /* 8220BCB4h */ case    1:  		/* bl -1550936 */
		/* 8220BCB4h case    1:*/		regs.LR = 0x8220BCB8; return 0x8209125C;
		/* 8220BCB4h case    1:*/		return 0x8220BCB8;
		  /* 8220BCB8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220BCB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220BCB8h case    2:*/		return 0x8220BCBC;
		  /* 8220BCBCh */ case    3:  		/* lis R11, -32253 */
		/* 8220BCBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BCBCh case    3:*/		return 0x8220BCC0;
		  /* 8220BCC0h */ case    4:  		/* lis R10, -32252 */
		/* 8220BCC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BCC0h case    4:*/		return 0x8220BCC4;
		  /* 8220BCC4h */ case    5:  		/* mr R31, R3 */
		/* 8220BCC4h case    5:*/		regs.R31 = regs.R3;
		/* 8220BCC4h case    5:*/		return 0x8220BCC8;
		  /* 8220BCC8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BCC8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BCC8h case    6:*/		return 0x8220BCCC;
		  /* 8220BCCCh */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BCCCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BCCCh case    7:*/		return 0x8220BCD0;
		  /* 8220BCD0h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BCD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BCD0h case    8:*/		return 0x8220BCD4;
		  /* 8220BCD4h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BCD4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BCF4;  }
		/* 8220BCD4h case    9:*/		return 0x8220BCD8;
		  /* 8220BCD8h */ case   10:  		/* lis R11, -32252 */
		/* 8220BCD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BCD8h case   10:*/		return 0x8220BCDC;
		  /* 8220BCDCh */ case   11:  		/* mr R6, R29 */
		/* 8220BCDCh case   11:*/		regs.R6 = regs.R29;
		/* 8220BCDCh case   11:*/		return 0x8220BCE0;
		  /* 8220BCE0h */ case   12:  		/* addi R5, R11, -10604 */
		/* 8220BCE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD694);
		/* 8220BCE0h case   12:*/		return 0x8220BCE4;
		  /* 8220BCE4h */ case   13:  		/* mr R4, R30 */
		/* 8220BCE4h case   13:*/		regs.R4 = regs.R30;
		/* 8220BCE4h case   13:*/		return 0x8220BCE8;
		  /* 8220BCE8h */ case   14:  		/* li R7, 375 */
		/* 8220BCE8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x177);
		/* 8220BCE8h case   14:*/		return 0x8220BCEC;
		  /* 8220BCECh */ case   15:  		/* li R3, 0 */
		/* 8220BCECh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BCECh case   15:*/		return 0x8220BCF0;
		  /* 8220BCF0h */ case   16:  		/* bl -737512 */
		/* 8220BCF0h case   16:*/		regs.LR = 0x8220BCF4; return 0x82157C08;
		/* 8220BCF0h case   16:*/		return 0x8220BCF4;
	}
	return 0x8220BCF4;
} // Block from 8220BCB0h-8220BCF4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220BCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BCF4);
		  /* 8220BCF4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BCF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BCF4h case    0:*/		return 0x8220BCF8;
	}
	return 0x8220BCF8;
} // Block from 8220BCF4h-8220BCF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220BCF8h
// Function '?PP_Create@XGRAPHICS@@YAPAU_PP_STATE_POSTPROCESSOR@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SSM_REGISTRY@1@PAU_PS_PROGRAM_STORE@1@PAU_TS_TEXTURE_SERVER@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BCF8);
		  /* 8220BCF8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8220BCF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BCF8h case    0:*/		return 0x8220BCFC;
		  /* 8220BCFCh */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220BCFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8220BD1C;  }
		/* 8220BCFCh case    1:*/		return 0x8220BD00;
		  /* 8220BD00h */ case    2:  		/* lis R11, -32252 */
		/* 8220BD00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BD00h case    2:*/		return 0x8220BD04;
		  /* 8220BD04h */ case    3:  		/* mr R6, R29 */
		/* 8220BD04h case    3:*/		regs.R6 = regs.R29;
		/* 8220BD04h case    3:*/		return 0x8220BD08;
		  /* 8220BD08h */ case    4:  		/* addi R5, R11, -10164 */
		/* 8220BD08h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD84C);
		/* 8220BD08h case    4:*/		return 0x8220BD0C;
		  /* 8220BD0Ch */ case    5:  		/* mr R4, R30 */
		/* 8220BD0Ch case    5:*/		regs.R4 = regs.R30;
		/* 8220BD0Ch case    5:*/		return 0x8220BD10;
		  /* 8220BD10h */ case    6:  		/* li R7, 376 */
		/* 8220BD10h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x178);
		/* 8220BD10h case    6:*/		return 0x8220BD14;
		  /* 8220BD14h */ case    7:  		/* li R3, 0 */
		/* 8220BD14h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BD14h case    7:*/		return 0x8220BD18;
		  /* 8220BD18h */ case    8:  		/* bl -737552 */
		/* 8220BD18h case    8:*/		regs.LR = 0x8220BD1C; return 0x82157C08;
		/* 8220BD18h case    8:*/		return 0x8220BD1C;
	}
	return 0x8220BD1C;
} // Block from 8220BCF8h-8220BD1Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220BD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BD1C);
		  /* 8220BD1Ch */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220BD1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220BD1Ch case    0:*/		return 0x8220BD20;
		  /* 8220BD20h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BD20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BD20h case    1:*/		return 0x8220BD24;
		  /* 8220BD24h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BD24h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BD2C;  }
		/* 8220BD24h case    2:*/		return 0x8220BD28;
		  /* 8220BD28h */ case    3:  		/* bl -1176 */
		/* 8220BD28h case    3:*/		regs.LR = 0x8220BD2C; return 0x8220B890;
		/* 8220BD28h case    3:*/		return 0x8220BD2C;
	}
	return 0x8220BD2C;
} // Block from 8220BD1Ch-8220BD2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BD2C);
		  /* 8220BD2Ch */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BD2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BD2Ch case    0:*/		return 0x8220BD30;
		  /* 8220BD30h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BD30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BD30h case    1:*/		return 0x8220BD34;
		  /* 8220BD34h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BD34h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BD3C;  }
		/* 8220BD34h case    2:*/		return 0x8220BD38;
		  /* 8220BD38h */ case    3:  		/* bl -1192 */
		/* 8220BD38h case    3:*/		regs.LR = 0x8220BD3C; return 0x8220B890;
		/* 8220BD38h case    3:*/		return 0x8220BD3C;
	}
	return 0x8220BD3C;
} // Block from 8220BD2Ch-8220BD3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BD3C);
		  /* 8220BD3Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220BD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220BD3Ch case    0:*/		return 0x8220BD40;
		  /* 8220BD40h */ case    1:  		/* mr R4, R31 */
		/* 8220BD40h case    1:*/		regs.R4 = regs.R31;
		/* 8220BD40h case    1:*/		return 0x8220BD44;
		  /* 8220BD44h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220BD44h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220BD44h case    2:*/		return 0x8220BD48;
		  /* 8220BD48h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220BD48h case    3:*/		regs.CTR = regs.R11;
		/* 8220BD48h case    3:*/		return 0x8220BD4C;
		  /* 8220BD4Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220BD4Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220BD50; return (uint32)regs.CTR; }
		/* 8220BD4Ch case    4:*/		return 0x8220BD50;
		  /* 8220BD50h */ case    5:  		/* addi R1, R1, 112 */
		/* 8220BD50h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220BD50h case    5:*/		return 0x8220BD54;
		  /* 8220BD54h */ case    6:  		/* b -1551016 */
		/* 8220BD54h case    6:*/		return 0x820912AC;
		/* 8220BD54h case    6:*/		return 0x8220BD58;
	}
	return 0x8220BD58;
} // Block from 8220BD3Ch-8220BD58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220BD58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BD58);
		  /* 8220BD58h */ case    0:  		/* mfspr R12, LR */
		/* 8220BD58h case    0:*/		regs.R12 = regs.LR;
		/* 8220BD58h case    0:*/		return 0x8220BD5C;
		  /* 8220BD5Ch */ case    1:  		/* bl -1551108 */
		/* 8220BD5Ch case    1:*/		regs.LR = 0x8220BD60; return 0x82091258;
		/* 8220BD5Ch case    1:*/		return 0x8220BD60;
		  /* 8220BD60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220BD60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220BD60h case    2:*/		return 0x8220BD64;
		  /* 8220BD64h */ case    3:  		/* lis R11, -32253 */
		/* 8220BD64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BD64h case    3:*/		return 0x8220BD68;
		  /* 8220BD68h */ case    4:  		/* lis R10, -32252 */
		/* 8220BD68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BD68h case    4:*/		return 0x8220BD6C;
		  /* 8220BD6Ch */ case    5:  		/* mr R31, R3 */
		/* 8220BD6Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220BD6Ch case    5:*/		return 0x8220BD70;
		  /* 8220BD70h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BD70h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BD70h case    6:*/		return 0x8220BD74;
		  /* 8220BD74h */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BD74h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BD74h case    7:*/		return 0x8220BD78;
		  /* 8220BD78h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BD78h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BD78h case    8:*/		return 0x8220BD7C;
		  /* 8220BD7Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BD7Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BD9C;  }
		/* 8220BD7Ch case    9:*/		return 0x8220BD80;
		  /* 8220BD80h */ case   10:  		/* lis R11, -32252 */
		/* 8220BD80h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BD80h case   10:*/		return 0x8220BD84;
		  /* 8220BD84h */ case   11:  		/* mr R6, R29 */
		/* 8220BD84h case   11:*/		regs.R6 = regs.R29;
		/* 8220BD84h case   11:*/		return 0x8220BD88;
		  /* 8220BD88h */ case   12:  		/* addi R5, R11, -10604 */
		/* 8220BD88h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD694);
		/* 8220BD88h case   12:*/		return 0x8220BD8C;
		  /* 8220BD8Ch */ case   13:  		/* mr R4, R30 */
		/* 8220BD8Ch case   13:*/		regs.R4 = regs.R30;
		/* 8220BD8Ch case   13:*/		return 0x8220BD90;
		  /* 8220BD90h */ case   14:  		/* li R7, 411 */
		/* 8220BD90h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x19B);
		/* 8220BD90h case   14:*/		return 0x8220BD94;
		  /* 8220BD94h */ case   15:  		/* li R3, 0 */
		/* 8220BD94h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BD94h case   15:*/		return 0x8220BD98;
		  /* 8220BD98h */ case   16:  		/* bl -737680 */
		/* 8220BD98h case   16:*/		regs.LR = 0x8220BD9C; return 0x82157C08;
		/* 8220BD98h case   16:*/		return 0x8220BD9C;
	}
	return 0x8220BD9C;
} // Block from 8220BD58h-8220BD9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220BD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BD9C);
		  /* 8220BD9Ch */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BD9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BD9Ch case    0:*/		return 0x8220BDA0;
		  /* 8220BDA0h */ case    1:  		/* bl -1200 */
		/* 8220BDA0h case    1:*/		regs.LR = 0x8220BDA4; return 0x8220B8F0;
		/* 8220BDA0h case    1:*/		return 0x8220BDA4;
		  /* 8220BDA4h */ case    2:  		/* or. R28, R3, R3 */
		/* 8220BDA4h case    2:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8220BDA4h case    2:*/		return 0x8220BDA8;
		  /* 8220BDA8h */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 8220BDA8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220BDCC;  }
		/* 8220BDA8h case    3:*/		return 0x8220BDAC;
		  /* 8220BDACh */ case    4:  		/* lis R11, -32252 */
		/* 8220BDACh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BDACh case    4:*/		return 0x8220BDB0;
		  /* 8220BDB0h */ case    5:  		/* mr R6, R29 */
		/* 8220BDB0h case    5:*/		regs.R6 = regs.R29;
		/* 8220BDB0h case    5:*/		return 0x8220BDB4;
		  /* 8220BDB4h */ case    6:  		/* addi R5, R11, -21644 */
		/* 8220BDB4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB74);
		/* 8220BDB4h case    6:*/		return 0x8220BDB8;
		  /* 8220BDB8h */ case    7:  		/* mr R4, R30 */
		/* 8220BDB8h case    7:*/		regs.R4 = regs.R30;
		/* 8220BDB8h case    7:*/		return 0x8220BDBC;
		  /* 8220BDBCh */ case    8:  		/* li R7, 417 */
		/* 8220BDBCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1A1);
		/* 8220BDBCh case    8:*/		return 0x8220BDC0;
		  /* 8220BDC0h */ case    9:  		/* li R3, 0 */
		/* 8220BDC0h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BDC0h case    9:*/		return 0x8220BDC4;
		  /* 8220BDC4h */ case   10:  		/* bl -737724 */
		/* 8220BDC4h case   10:*/		regs.LR = 0x8220BDC8; return 0x82157C08;
		/* 8220BDC4h case   10:*/		return 0x8220BDC8;
		  /* 8220BDC8h */ case   11:  		/* b 28 */
		/* 8220BDC8h case   11:*/		return 0x8220BDE4;
		/* 8220BDC8h case   11:*/		return 0x8220BDCC;
	}
	return 0x8220BDCC;
} // Block from 8220BD9Ch-8220BDCCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220BDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BDCC);
		  /* 8220BDCCh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BDCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BDCCh case    0:*/		return 0x8220BDD0;
		  /* 8220BDD0h */ case    1:  		/* mr R3, R28 */
		/* 8220BDD0h case    1:*/		regs.R3 = regs.R28;
		/* 8220BDD0h case    1:*/		return 0x8220BDD4;
		  /* 8220BDD4h */ case    2:  		/* lwz R4, <#[R31 + 20]> */
		/* 8220BDD4h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8220BDD4h case    2:*/		return 0x8220BDD8;
		  /* 8220BDD8h */ case    3:  		/* addi R11, R11, 1 */
		/* 8220BDD8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220BDD8h case    3:*/		return 0x8220BDDC;
		  /* 8220BDDCh */ case    4:  		/* stw R11, <#[R31 + 12]> */
		/* 8220BDDCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BDDCh case    4:*/		return 0x8220BDE0;
		  /* 8220BDE0h */ case    5:  		/* bl -719992 */
		/* 8220BDE0h case    5:*/		regs.LR = 0x8220BDE4; return 0x8215C168;
		/* 8220BDE0h case    5:*/		return 0x8220BDE4;
	}
	return 0x8220BDE4;
} // Block from 8220BDCCh-8220BDE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220BDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BDE4);
		  /* 8220BDE4h */ case    0:  		/* mr R3, R28 */
		/* 8220BDE4h case    0:*/		regs.R3 = regs.R28;
		/* 8220BDE4h case    0:*/		return 0x8220BDE8;
		  /* 8220BDE8h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220BDE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220BDE8h case    1:*/		return 0x8220BDEC;
		  /* 8220BDECh */ case    2:  		/* b -1551172 */
		/* 8220BDECh case    2:*/		return 0x820912A8;
		/* 8220BDECh case    2:*/		return 0x8220BDF0;
	}
	return 0x8220BDF0;
} // Block from 8220BDE4h-8220BDF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220BDF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BDF0);
		  /* 8220BDF0h */ case    0:  		/* mfspr R12, LR */
		/* 8220BDF0h case    0:*/		regs.R12 = regs.LR;
		/* 8220BDF0h case    0:*/		return 0x8220BDF4;
		  /* 8220BDF4h */ case    1:  		/* bl -1551260 */
		/* 8220BDF4h case    1:*/		regs.LR = 0x8220BDF8; return 0x82091258;
		/* 8220BDF4h case    1:*/		return 0x8220BDF8;
		  /* 8220BDF8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220BDF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220BDF8h case    2:*/		return 0x8220BDFC;
		  /* 8220BDFCh */ case    3:  		/* lis R11, -32253 */
		/* 8220BDFCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BDFCh case    3:*/		return 0x8220BE00;
		  /* 8220BE00h */ case    4:  		/* lis R10, -32252 */
		/* 8220BE00h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BE00h case    4:*/		return 0x8220BE04;
		  /* 8220BE04h */ case    5:  		/* mr R31, R3 */
		/* 8220BE04h case    5:*/		regs.R31 = regs.R3;
		/* 8220BE04h case    5:*/		return 0x8220BE08;
		  /* 8220BE08h */ case    6:  		/* mr R28, R4 */
		/* 8220BE08h case    6:*/		regs.R28 = regs.R4;
		/* 8220BE08h case    6:*/		return 0x8220BE0C;
		  /* 8220BE0Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220BE0Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BE0Ch case    7:*/		return 0x8220BE10;
		  /* 8220BE10h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8220BE10h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BE10h case    8:*/		return 0x8220BE14;
		  /* 8220BE14h */ case    9:  		/* addi R29, R10, -10328 */
		/* 8220BE14h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BE14h case    9:*/		return 0x8220BE18;
		  /* 8220BE18h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BE18h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220BE38;  }
		/* 8220BE18h case   10:*/		return 0x8220BE1C;
		  /* 8220BE1Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220BE1Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BE1Ch case   11:*/		return 0x8220BE20;
		  /* 8220BE20h */ case   12:  		/* mr R6, R29 */
		/* 8220BE20h case   12:*/		regs.R6 = regs.R29;
		/* 8220BE20h case   12:*/		return 0x8220BE24;
		  /* 8220BE24h */ case   13:  		/* addi R5, R11, -10604 */
		/* 8220BE24h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD694);
		/* 8220BE24h case   13:*/		return 0x8220BE28;
	}
	return 0x8220BE28;
} // Block from 8220BDF0h-8220BE28h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220BE28h
// Function '?SC_Create@XGRAPHICS@@YAPAU_SC_STATE_CACHE@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_CC_STATE_COMPILER@1@PAU_PS_PROGRAM_STORE@1@PAU_PP_STATE_POSTPROCESSOR@1@PAU_INTEGER_LIST_FACTORY@1@PAU_ORDERED_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BE28);
		  /* 8220BE28h */ case    0:  		/* mr R4, R30 */
		/* 8220BE28h case    0:*/		regs.R4 = regs.R30;
		/* 8220BE28h case    0:*/		return 0x8220BE2C;
		  /* 8220BE2Ch */ case    1:  		/* li R7, 445 */
		/* 8220BE2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1BD);
		/* 8220BE2Ch case    1:*/		return 0x8220BE30;
		  /* 8220BE30h */ case    2:  		/* li R3, 0 */
		/* 8220BE30h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BE30h case    2:*/		return 0x8220BE34;
		  /* 8220BE34h */ case    3:  		/* bl -737836 */
		/* 8220BE34h case    3:*/		regs.LR = 0x8220BE38; return 0x82157C08;
		/* 8220BE34h case    3:*/		return 0x8220BE38;
	}
	return 0x8220BE38;
} // Block from 8220BE28h-8220BE38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BE38);
		  /* 8220BE38h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220BE38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220BE38h case    0:*/		return 0x8220BE3C;
		  /* 8220BE3Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BE3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220BE5C;  }
		/* 8220BE3Ch case    1:*/		return 0x8220BE40;
		  /* 8220BE40h */ case    2:  		/* lis R11, -32252 */
		/* 8220BE40h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BE40h case    2:*/		return 0x8220BE44;
		  /* 8220BE44h */ case    3:  		/* mr R6, R29 */
		/* 8220BE44h case    3:*/		regs.R6 = regs.R29;
		/* 8220BE44h case    3:*/		return 0x8220BE48;
		  /* 8220BE48h */ case    4:  		/* addi R5, R11, -21400 */
		/* 8220BE48h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC68);
		/* 8220BE48h case    4:*/		return 0x8220BE4C;
		  /* 8220BE4Ch */ case    5:  		/* mr R4, R30 */
		/* 8220BE4Ch case    5:*/		regs.R4 = regs.R30;
		/* 8220BE4Ch case    5:*/		return 0x8220BE50;
		  /* 8220BE50h */ case    6:  		/* li R7, 446 */
		/* 8220BE50h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1BE);
		/* 8220BE50h case    6:*/		return 0x8220BE54;
		  /* 8220BE54h */ case    7:  		/* li R3, 0 */
		/* 8220BE54h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BE54h case    7:*/		return 0x8220BE58;
		  /* 8220BE58h */ case    8:  		/* bl -737872 */
		/* 8220BE58h case    8:*/		regs.LR = 0x8220BE5C; return 0x82157C08;
		/* 8220BE58h case    8:*/		return 0x8220BE5C;
	}
	return 0x8220BE5C;
} // Block from 8220BE38h-8220BE5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220BE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BE5C);
		  /* 8220BE5Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BE5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BE5Ch case    0:*/		return 0x8220BE60;
		  /* 8220BE60h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220BE60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BE60h case    1:*/		return 0x8220BE64;
		  /* 8220BE64h */ case    2:  		/* bc 12, CR6_GT, 32 */
		/* 8220BE64h case    2:*/		if ( regs.CR[6].gt ) { return 0x8220BE84;  }
		/* 8220BE64h case    2:*/		return 0x8220BE68;
		  /* 8220BE68h */ case    3:  		/* lis R11, -32252 */
		/* 8220BE68h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BE68h case    3:*/		return 0x8220BE6C;
		  /* 8220BE6Ch */ case    4:  		/* mr R6, R29 */
		/* 8220BE6Ch case    4:*/		regs.R6 = regs.R29;
		/* 8220BE6Ch case    4:*/		return 0x8220BE70;
		  /* 8220BE70h */ case    5:  		/* addi R5, R11, -10100 */
		/* 8220BE70h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD88C);
		/* 8220BE70h case    5:*/		return 0x8220BE74;
		  /* 8220BE74h */ case    6:  		/* mr R4, R30 */
		/* 8220BE74h case    6:*/		regs.R4 = regs.R30;
		/* 8220BE74h case    6:*/		return 0x8220BE78;
		  /* 8220BE78h */ case    7:  		/* li R7, 450 */
		/* 8220BE78h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1C2);
		/* 8220BE78h case    7:*/		return 0x8220BE7C;
		  /* 8220BE7Ch */ case    8:  		/* li R3, 0 */
		/* 8220BE7Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BE7Ch case    8:*/		return 0x8220BE80;
		  /* 8220BE80h */ case    9:  		/* bl -737912 */
		/* 8220BE80h case    9:*/		regs.LR = 0x8220BE84; return 0x82157C08;
		/* 8220BE80h case    9:*/		return 0x8220BE84;
	}
	return 0x8220BE84;
} // Block from 8220BE5Ch-8220BE84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220BE84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BE84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BE84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BE84);
		  /* 8220BE84h */ case    0:  		/* mr R3, R28 */
		/* 8220BE84h case    0:*/		regs.R3 = regs.R28;
		/* 8220BE84h case    0:*/		return 0x8220BE88;
		  /* 8220BE88h */ case    1:  		/* bl -719544 */
		/* 8220BE88h case    1:*/		regs.LR = 0x8220BE8C; return 0x8215C3D0;
		/* 8220BE88h case    1:*/		return 0x8220BE8C;
		  /* 8220BE8Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220BE8Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220BE8Ch case    2:*/		return 0x8220BE90;
		  /* 8220BE90h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8220BE90h case    3:*/		if ( regs.CR[0].eq ) { return 0x8220BEB0;  }
		/* 8220BE90h case    3:*/		return 0x8220BE94;
		  /* 8220BE94h */ case    4:  		/* lis R11, -32252 */
		/* 8220BE94h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BE94h case    4:*/		return 0x8220BE98;
		  /* 8220BE98h */ case    5:  		/* mr R6, R29 */
		/* 8220BE98h case    5:*/		regs.R6 = regs.R29;
		/* 8220BE98h case    5:*/		return 0x8220BE9C;
		  /* 8220BE9Ch */ case    6:  		/* addi R5, R11, -10136 */
		/* 8220BE9Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD868);
		/* 8220BE9Ch case    6:*/		return 0x8220BEA0;
		  /* 8220BEA0h */ case    7:  		/* mr R4, R30 */
		/* 8220BEA0h case    7:*/		regs.R4 = regs.R30;
		/* 8220BEA0h case    7:*/		return 0x8220BEA4;
		  /* 8220BEA4h */ case    8:  		/* li R7, 451 */
		/* 8220BEA4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1C3);
		/* 8220BEA4h case    8:*/		return 0x8220BEA8;
		  /* 8220BEA8h */ case    9:  		/* li R3, 0 */
		/* 8220BEA8h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BEA8h case    9:*/		return 0x8220BEAC;
		  /* 8220BEACh */ case   10:  		/* bl -737956 */
		/* 8220BEACh case   10:*/		regs.LR = 0x8220BEB0; return 0x82157C08;
		/* 8220BEACh case   10:*/		return 0x8220BEB0;
	}
	return 0x8220BEB0;
} // Block from 8220BE84h-8220BEB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220BEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BEB0);
		  /* 8220BEB0h */ case    0:  		/* mr R3, R28 */
		/* 8220BEB0h case    0:*/		regs.R3 = regs.R28;
		/* 8220BEB0h case    0:*/		return 0x8220BEB4;
		  /* 8220BEB4h */ case    1:  		/* bl -719916 */
		/* 8220BEB4h case    1:*/		regs.LR = 0x8220BEB8; return 0x8215C288;
		/* 8220BEB4h case    1:*/		return 0x8220BEB8;
		  /* 8220BEB8h */ case    2:  		/* bl -716688 */
		/* 8220BEB8h case    2:*/		regs.LR = 0x8220BEBC; return 0x8215CF28;
		/* 8220BEB8h case    2:*/		return 0x8220BEBC;
		  /* 8220BEBCh */ case    3:  		/* mr R5, R3 */
		/* 8220BEBCh case    3:*/		regs.R5 = regs.R3;
		/* 8220BEBCh case    3:*/		return 0x8220BEC0;
		  /* 8220BEC0h */ case    4:  		/* li R4, 0 */
		/* 8220BEC0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220BEC0h case    4:*/		return 0x8220BEC4;
		  /* 8220BEC4h */ case    5:  		/* mr R3, R28 */
		/* 8220BEC4h case    5:*/		regs.R3 = regs.R28;
		/* 8220BEC4h case    5:*/		return 0x8220BEC8;
		  /* 8220BEC8h */ case    6:  		/* bl -1551240 */
		/* 8220BEC8h case    6:*/		regs.LR = 0x8220BECC; return 0x82091340;
		/* 8220BEC8h case    6:*/		return 0x8220BECC;
		  /* 8220BECCh */ case    7:  		/* mr R4, R28 */
		/* 8220BECCh case    7:*/		regs.R4 = regs.R28;
		/* 8220BECCh case    7:*/		return 0x8220BED0;
		  /* 8220BED0h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BED0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BED0h case    8:*/		return 0x8220BED4;
		  /* 8220BED4h */ case    9:  		/* bl -1244 */
		/* 8220BED4h case    9:*/		regs.LR = 0x8220BED8; return 0x8220B9F8;
		/* 8220BED4h case    9:*/		return 0x8220BED8;
		  /* 8220BED8h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BED8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BED8h case   10:*/		return 0x8220BEDC;
		  /* 8220BEDCh */ case   11:  		/* addi R11, R11, -1 */
		/* 8220BEDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220BEDCh case   11:*/		return 0x8220BEE0;
		  /* 8220BEE0h */ case   12:  		/* stw R11, <#[R31 + 12]> */
		/* 8220BEE0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BEE0h case   12:*/		return 0x8220BEE4;
		  /* 8220BEE4h */ case   13:  		/* addi R1, R1, 128 */
		/* 8220BEE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220BEE4h case   13:*/		return 0x8220BEE8;
		  /* 8220BEE8h */ case   14:  		/* b -1551424 */
		/* 8220BEE8h case   14:*/		return 0x820912A8;
		/* 8220BEE8h case   14:*/		return 0x8220BEEC;
		  /* 8220BEECh */ case   15:  		/* nop */
		/* 8220BEECh case   15:*/		cpu::op::nop();
		/* 8220BEECh case   15:*/		return 0x8220BEF0;
	}
	return 0x8220BEF0;
} // Block from 8220BEB0h-8220BEF0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220BEF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BEF0);
		  /* 8220BEF0h */ case    0:  		/* mfspr R12, LR */
		/* 8220BEF0h case    0:*/		regs.R12 = regs.LR;
		/* 8220BEF0h case    0:*/		return 0x8220BEF4;
		  /* 8220BEF4h */ case    1:  		/* bl -1551512 */
		/* 8220BEF4h case    1:*/		regs.LR = 0x8220BEF8; return 0x8209125C;
		/* 8220BEF4h case    1:*/		return 0x8220BEF8;
		  /* 8220BEF8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220BEF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220BEF8h case    2:*/		return 0x8220BEFC;
		  /* 8220BEFCh */ case    3:  		/* lis R11, -32253 */
		/* 8220BEFCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BEFCh case    3:*/		return 0x8220BF00;
		  /* 8220BF00h */ case    4:  		/* lis R10, -32252 */
		/* 8220BF00h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BF00h case    4:*/		return 0x8220BF04;
		  /* 8220BF04h */ case    5:  		/* mr R31, R3 */
		/* 8220BF04h case    5:*/		regs.R31 = regs.R3;
		/* 8220BF04h case    5:*/		return 0x8220BF08;
		  /* 8220BF08h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BF08h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BF08h case    6:*/		return 0x8220BF0C;
		  /* 8220BF0Ch */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BF0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BF0Ch case    7:*/		return 0x8220BF10;
		  /* 8220BF10h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BF10h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BF10h case    8:*/		return 0x8220BF14;
		  /* 8220BF14h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BF14h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BF34;  }
		/* 8220BF14h case    9:*/		return 0x8220BF18;
		  /* 8220BF18h */ case   10:  		/* lis R11, -32252 */
		/* 8220BF18h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BF18h case   10:*/		return 0x8220BF1C;
		  /* 8220BF1Ch */ case   11:  		/* mr R6, R29 */
		/* 8220BF1Ch case   11:*/		regs.R6 = regs.R29;
		/* 8220BF1Ch case   11:*/		return 0x8220BF20;
		  /* 8220BF20h */ case   12:  		/* addi R5, R11, -10584 */
		/* 8220BF20h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220BF20h case   12:*/		return 0x8220BF24;
		  /* 8220BF24h */ case   13:  		/* mr R4, R30 */
		/* 8220BF24h case   13:*/		regs.R4 = regs.R30;
		/* 8220BF24h case   13:*/		return 0x8220BF28;
		  /* 8220BF28h */ case   14:  		/* li R7, 596 */
		/* 8220BF28h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x254);
		/* 8220BF28h case   14:*/		return 0x8220BF2C;
		  /* 8220BF2Ch */ case   15:  		/* li R3, 0 */
		/* 8220BF2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BF2Ch case   15:*/		return 0x8220BF30;
		  /* 8220BF30h */ case   16:  		/* bl -738088 */
		/* 8220BF30h case   16:*/		regs.LR = 0x8220BF34; return 0x82157C08;
		/* 8220BF30h case   16:*/		return 0x8220BF34;
	}
	return 0x8220BF34;
} // Block from 8220BEF0h-8220BF34h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220BF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BF34);
		  /* 8220BF34h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220BF34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220BF34h case    0:*/		return 0x8220BF38;
		  /* 8220BF38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220BF38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220BF38h case    1:*/		return 0x8220BF3C;
		  /* 8220BF3Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8220BF3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BF5C;  }
		/* 8220BF3Ch case    2:*/		return 0x8220BF40;
		  /* 8220BF40h */ case    3:  		/* lis R11, -32252 */
		/* 8220BF40h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BF40h case    3:*/		return 0x8220BF44;
		  /* 8220BF44h */ case    4:  		/* mr R6, R29 */
		/* 8220BF44h case    4:*/		regs.R6 = regs.R29;
		/* 8220BF44h case    4:*/		return 0x8220BF48;
		  /* 8220BF48h */ case    5:  		/* addi R5, R11, -10360 */
		/* 8220BF48h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD788);
		/* 8220BF48h case    5:*/		return 0x8220BF4C;
		  /* 8220BF4Ch */ case    6:  		/* mr R4, R30 */
		/* 8220BF4Ch case    6:*/		regs.R4 = regs.R30;
		/* 8220BF4Ch case    6:*/		return 0x8220BF50;
		  /* 8220BF50h */ case    7:  		/* li R7, 597 */
		/* 8220BF50h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x255);
		/* 8220BF50h case    7:*/		return 0x8220BF54;
		  /* 8220BF54h */ case    8:  		/* li R3, 0 */
		/* 8220BF54h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BF54h case    8:*/		return 0x8220BF58;
		  /* 8220BF58h */ case    9:  		/* bl -738128 */
		/* 8220BF58h case    9:*/		regs.LR = 0x8220BF5C; return 0x82157C08;
		/* 8220BF58h case    9:*/		return 0x8220BF5C;
	}
	return 0x8220BF5C;
} // Block from 8220BF34h-8220BF5Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220BF5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BF5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BF5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BF5C);
		  /* 8220BF5Ch */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220BF5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220BF5Ch case    0:*/		return 0x8220BF60;
		  /* 8220BF60h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BF60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BF60h case    1:*/		return 0x8220BF64;
		  /* 8220BF64h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BF64h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BF6C;  }
		/* 8220BF64h case    2:*/		return 0x8220BF68;
		  /* 8220BF68h */ case    3:  		/* bl -1752 */
		/* 8220BF68h case    3:*/		regs.LR = 0x8220BF6C; return 0x8220B890;
		/* 8220BF68h case    3:*/		return 0x8220BF6C;
	}
	return 0x8220BF6C;
} // Block from 8220BF5Ch-8220BF6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BF6C);
		  /* 8220BF6Ch */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BF6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BF6Ch case    0:*/		return 0x8220BF70;
		  /* 8220BF70h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220BF70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BF70h case    1:*/		return 0x8220BF74;
		  /* 8220BF74h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220BF74h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220BF7C;  }
		/* 8220BF74h case    2:*/		return 0x8220BF78;
		  /* 8220BF78h */ case    3:  		/* bl -1768 */
		/* 8220BF78h case    3:*/		regs.LR = 0x8220BF7C; return 0x8220B890;
		/* 8220BF78h case    3:*/		return 0x8220BF7C;
	}
	return 0x8220BF7C;
} // Block from 8220BF6Ch-8220BF7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220BF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BF7C);
		  /* 8220BF7Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220BF7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220BF7Ch case    0:*/		return 0x8220BF80;
		  /* 8220BF80h */ case    1:  		/* mr R4, R31 */
		/* 8220BF80h case    1:*/		regs.R4 = regs.R31;
		/* 8220BF80h case    1:*/		return 0x8220BF84;
		  /* 8220BF84h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220BF84h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220BF84h case    2:*/		return 0x8220BF88;
		  /* 8220BF88h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220BF88h case    3:*/		regs.CTR = regs.R11;
		/* 8220BF88h case    3:*/		return 0x8220BF8C;
		  /* 8220BF8Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220BF8Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220BF90; return (uint32)regs.CTR; }
		/* 8220BF8Ch case    4:*/		return 0x8220BF90;
		  /* 8220BF90h */ case    5:  		/* addi R1, R1, 112 */
		/* 8220BF90h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220BF90h case    5:*/		return 0x8220BF94;
		  /* 8220BF94h */ case    6:  		/* b -1551592 */
		/* 8220BF94h case    6:*/		return 0x820912AC;
		/* 8220BF94h case    6:*/		return 0x8220BF98;
	}
	return 0x8220BF98;
} // Block from 8220BF7Ch-8220BF98h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220BF98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BF98);
		  /* 8220BF98h */ case    0:  		/* mfspr R12, LR */
		/* 8220BF98h case    0:*/		regs.R12 = regs.LR;
		/* 8220BF98h case    0:*/		return 0x8220BF9C;
		  /* 8220BF9Ch */ case    1:  		/* bl -1551684 */
		/* 8220BF9Ch case    1:*/		regs.LR = 0x8220BFA0; return 0x82091258;
		/* 8220BF9Ch case    1:*/		return 0x8220BFA0;
		  /* 8220BFA0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220BFA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220BFA0h case    2:*/		return 0x8220BFA4;
		  /* 8220BFA4h */ case    3:  		/* lis R11, -32253 */
		/* 8220BFA4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220BFA4h case    3:*/		return 0x8220BFA8;
		  /* 8220BFA8h */ case    4:  		/* lis R10, -32252 */
		/* 8220BFA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220BFA8h case    4:*/		return 0x8220BFAC;
		  /* 8220BFACh */ case    5:  		/* mr R31, R3 */
		/* 8220BFACh case    5:*/		regs.R31 = regs.R3;
		/* 8220BFACh case    5:*/		return 0x8220BFB0;
		  /* 8220BFB0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220BFB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220BFB0h case    6:*/		return 0x8220BFB4;
		  /* 8220BFB4h */ case    7:  		/* addi R30, R11, 27460 */
		/* 8220BFB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220BFB4h case    7:*/		return 0x8220BFB8;
		  /* 8220BFB8h */ case    8:  		/* addi R29, R10, -10328 */
		/* 8220BFB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220BFB8h case    8:*/		return 0x8220BFBC;
		  /* 8220BFBCh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220BFBCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220BFDC;  }
		/* 8220BFBCh case    9:*/		return 0x8220BFC0;
		  /* 8220BFC0h */ case   10:  		/* lis R11, -32252 */
		/* 8220BFC0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BFC0h case   10:*/		return 0x8220BFC4;
		  /* 8220BFC4h */ case   11:  		/* mr R6, R29 */
		/* 8220BFC4h case   11:*/		regs.R6 = regs.R29;
		/* 8220BFC4h case   11:*/		return 0x8220BFC8;
		  /* 8220BFC8h */ case   12:  		/* addi R5, R11, -10584 */
		/* 8220BFC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220BFC8h case   12:*/		return 0x8220BFCC;
		  /* 8220BFCCh */ case   13:  		/* mr R4, R30 */
		/* 8220BFCCh case   13:*/		regs.R4 = regs.R30;
		/* 8220BFCCh case   13:*/		return 0x8220BFD0;
		  /* 8220BFD0h */ case   14:  		/* li R7, 632 */
		/* 8220BFD0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x278);
		/* 8220BFD0h case   14:*/		return 0x8220BFD4;
		  /* 8220BFD4h */ case   15:  		/* li R3, 0 */
		/* 8220BFD4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220BFD4h case   15:*/		return 0x8220BFD8;
	}
	return 0x8220BFD8;
} // Block from 8220BF98h-8220BFD8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220BFD8h
// Function '?SC_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SC_STATE_CACHE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BFD8);
		  /* 8220BFD8h */ case    0:  		/* bl -738256 */
		/* 8220BFD8h case    0:*/		regs.LR = 0x8220BFDC; return 0x82157C08;
		/* 8220BFD8h case    0:*/		return 0x8220BFDC;
	}
	return 0x8220BFDC;
} // Block from 8220BFD8h-8220BFDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220BFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220BFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220BFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220BFDC);
		  /* 8220BFDCh */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220BFDCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220BFDCh case    0:*/		return 0x8220BFE0;
		  /* 8220BFE0h */ case    1:  		/* bl -1776 */
		/* 8220BFE0h case    1:*/		regs.LR = 0x8220BFE4; return 0x8220B8F0;
		/* 8220BFE0h case    1:*/		return 0x8220BFE4;
		  /* 8220BFE4h */ case    2:  		/* or. R28, R3, R3 */
		/* 8220BFE4h case    2:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8220BFE4h case    2:*/		return 0x8220BFE8;
		  /* 8220BFE8h */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 8220BFE8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220C00C;  }
		/* 8220BFE8h case    3:*/		return 0x8220BFEC;
		  /* 8220BFECh */ case    4:  		/* lis R11, -32252 */
		/* 8220BFECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220BFECh case    4:*/		return 0x8220BFF0;
		  /* 8220BFF0h */ case    5:  		/* mr R6, R29 */
		/* 8220BFF0h case    5:*/		regs.R6 = regs.R29;
		/* 8220BFF0h case    5:*/		return 0x8220BFF4;
		  /* 8220BFF4h */ case    6:  		/* addi R5, R11, -21644 */
		/* 8220BFF4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB74);
		/* 8220BFF4h case    6:*/		return 0x8220BFF8;
		  /* 8220BFF8h */ case    7:  		/* mr R4, R30 */
		/* 8220BFF8h case    7:*/		regs.R4 = regs.R30;
		/* 8220BFF8h case    7:*/		return 0x8220BFFC;
		  /* 8220BFFCh */ case    8:  		/* li R7, 638 */
		/* 8220BFFCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x27E);
		/* 8220BFFCh case    8:*/		return 0x8220C000;
		  /* 8220C000h */ case    9:  		/* li R3, 0 */
		/* 8220C000h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C000h case    9:*/		return 0x8220C004;
		  /* 8220C004h */ case   10:  		/* bl -738300 */
		/* 8220C004h case   10:*/		regs.LR = 0x8220C008; return 0x82157C08;
		/* 8220C004h case   10:*/		return 0x8220C008;
		  /* 8220C008h */ case   11:  		/* b 28 */
		/* 8220C008h case   11:*/		return 0x8220C024;
		/* 8220C008h case   11:*/		return 0x8220C00C;
	}
	return 0x8220C00C;
} // Block from 8220BFDCh-8220C00Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220C00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C00C);
		  /* 8220C00Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220C00Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C00Ch case    0:*/		return 0x8220C010;
		  /* 8220C010h */ case    1:  		/* mr R3, R28 */
		/* 8220C010h case    1:*/		regs.R3 = regs.R28;
		/* 8220C010h case    1:*/		return 0x8220C014;
		  /* 8220C014h */ case    2:  		/* lwz R4, <#[R31 + 20]> */
		/* 8220C014h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8220C014h case    2:*/		return 0x8220C018;
		  /* 8220C018h */ case    3:  		/* addi R11, R11, 1 */
		/* 8220C018h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220C018h case    3:*/		return 0x8220C01C;
		  /* 8220C01Ch */ case    4:  		/* stw R11, <#[R31 + 12]> */
		/* 8220C01Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C01Ch case    4:*/		return 0x8220C020;
		  /* 8220C020h */ case    5:  		/* bl -719640 */
		/* 8220C020h case    5:*/		regs.LR = 0x8220C024; return 0x8215C508;
		/* 8220C020h case    5:*/		return 0x8220C024;
	}
	return 0x8220C024;
} // Block from 8220C00Ch-8220C024h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220C024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C024);
		  /* 8220C024h */ case    0:  		/* mr R3, R28 */
		/* 8220C024h case    0:*/		regs.R3 = regs.R28;
		/* 8220C024h case    0:*/		return 0x8220C028;
		  /* 8220C028h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220C028h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220C028h case    1:*/		return 0x8220C02C;
		  /* 8220C02Ch */ case    2:  		/* b -1551748 */
		/* 8220C02Ch case    2:*/		return 0x820912A8;
		/* 8220C02Ch case    2:*/		return 0x8220C030;
	}
	return 0x8220C030;
} // Block from 8220C024h-8220C030h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C030h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C030);
		  /* 8220C030h */ case    0:  		/* mfspr R12, LR */
		/* 8220C030h case    0:*/		regs.R12 = regs.LR;
		/* 8220C030h case    0:*/		return 0x8220C034;
		  /* 8220C034h */ case    1:  		/* bl -1551836 */
		/* 8220C034h case    1:*/		regs.LR = 0x8220C038; return 0x82091258;
		/* 8220C034h case    1:*/		return 0x8220C038;
		  /* 8220C038h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220C038h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220C038h case    2:*/		return 0x8220C03C;
		  /* 8220C03Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220C03Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C03Ch case    3:*/		return 0x8220C040;
		  /* 8220C040h */ case    4:  		/* lis R10, -32252 */
		/* 8220C040h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C040h case    4:*/		return 0x8220C044;
		  /* 8220C044h */ case    5:  		/* mr R31, R3 */
		/* 8220C044h case    5:*/		regs.R31 = regs.R3;
		/* 8220C044h case    5:*/		return 0x8220C048;
		  /* 8220C048h */ case    6:  		/* mr R28, R4 */
		/* 8220C048h case    6:*/		regs.R28 = regs.R4;
		/* 8220C048h case    6:*/		return 0x8220C04C;
		  /* 8220C04Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220C04Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220C04Ch case    7:*/		return 0x8220C050;
		  /* 8220C050h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8220C050h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220C050h case    8:*/		return 0x8220C054;
		  /* 8220C054h */ case    9:  		/* addi R29, R10, -10328 */
		/* 8220C054h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD7A8);
		/* 8220C054h case    9:*/		return 0x8220C058;
		  /* 8220C058h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C058h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220C078;  }
		/* 8220C058h case   10:*/		return 0x8220C05C;
		  /* 8220C05Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220C05Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C05Ch case   11:*/		return 0x8220C060;
		  /* 8220C060h */ case   12:  		/* mr R6, R29 */
		/* 8220C060h case   12:*/		regs.R6 = regs.R29;
		/* 8220C060h case   12:*/		return 0x8220C064;
		  /* 8220C064h */ case   13:  		/* addi R5, R11, -10584 */
		/* 8220C064h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD6A8);
		/* 8220C064h case   13:*/		return 0x8220C068;
		  /* 8220C068h */ case   14:  		/* mr R4, R30 */
		/* 8220C068h case   14:*/		regs.R4 = regs.R30;
		/* 8220C068h case   14:*/		return 0x8220C06C;
		  /* 8220C06Ch */ case   15:  		/* li R7, 666 */
		/* 8220C06Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x29A);
		/* 8220C06Ch case   15:*/		return 0x8220C070;
		  /* 8220C070h */ case   16:  		/* li R3, 0 */
		/* 8220C070h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C070h case   16:*/		return 0x8220C074;
		  /* 8220C074h */ case   17:  		/* bl -738412 */
		/* 8220C074h case   17:*/		regs.LR = 0x8220C078; return 0x82157C08;
		/* 8220C074h case   17:*/		return 0x8220C078;
	}
	return 0x8220C078;
} // Block from 8220C030h-8220C078h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220C078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C078);
		  /* 8220C078h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220C078h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220C078h case    0:*/		return 0x8220C07C;
		  /* 8220C07Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C07Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C09C;  }
		/* 8220C07Ch case    1:*/		return 0x8220C080;
		  /* 8220C080h */ case    2:  		/* lis R11, -32252 */
		/* 8220C080h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C080h case    2:*/		return 0x8220C084;
		  /* 8220C084h */ case    3:  		/* mr R6, R29 */
		/* 8220C084h case    3:*/		regs.R6 = regs.R29;
		/* 8220C084h case    3:*/		return 0x8220C088;
		  /* 8220C088h */ case    4:  		/* addi R5, R11, -21312 */
		/* 8220C088h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8220C088h case    4:*/		return 0x8220C08C;
		  /* 8220C08Ch */ case    5:  		/* mr R4, R30 */
		/* 8220C08Ch case    5:*/		regs.R4 = regs.R30;
		/* 8220C08Ch case    5:*/		return 0x8220C090;
		  /* 8220C090h */ case    6:  		/* li R7, 667 */
		/* 8220C090h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x29B);
		/* 8220C090h case    6:*/		return 0x8220C094;
		  /* 8220C094h */ case    7:  		/* li R3, 0 */
		/* 8220C094h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C094h case    7:*/		return 0x8220C098;
	}
	return 0x8220C098;
} // Block from 8220C078h-8220C098h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220C098h
// Function '?SC_CreateDataObject@XGRAPHICS@@YAPAXPAU_SC_STATE_CACHE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C098);
		  /* 8220C098h */ case    0:  		/* bl -738448 */
		/* 8220C098h case    0:*/		regs.LR = 0x8220C09C; return 0x82157C08;
		/* 8220C098h case    0:*/		return 0x8220C09C;
	}
	return 0x8220C09C;
} // Block from 8220C098h-8220C09Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220C09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C09C);
		  /* 8220C09Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220C09Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C09Ch case    0:*/		return 0x8220C0A0;
		  /* 8220C0A0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220C0A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C0A0h case    1:*/		return 0x8220C0A4;
		  /* 8220C0A4h */ case    2:  		/* bc 12, CR6_GT, 32 */
		/* 8220C0A4h case    2:*/		if ( regs.CR[6].gt ) { return 0x8220C0C4;  }
		/* 8220C0A4h case    2:*/		return 0x8220C0A8;
		  /* 8220C0A8h */ case    3:  		/* lis R11, -32252 */
		/* 8220C0A8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C0A8h case    3:*/		return 0x8220C0AC;
		  /* 8220C0ACh */ case    4:  		/* mr R6, R29 */
		/* 8220C0ACh case    4:*/		regs.R6 = regs.R29;
		/* 8220C0ACh case    4:*/		return 0x8220C0B0;
		  /* 8220C0B0h */ case    5:  		/* addi R5, R11, -10192 */
		/* 8220C0B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD830);
		/* 8220C0B0h case    5:*/		return 0x8220C0B4;
		  /* 8220C0B4h */ case    6:  		/* mr R4, R30 */
		/* 8220C0B4h case    6:*/		regs.R4 = regs.R30;
		/* 8220C0B4h case    6:*/		return 0x8220C0B8;
		  /* 8220C0B8h */ case    7:  		/* li R7, 671 */
		/* 8220C0B8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x29F);
		/* 8220C0B8h case    7:*/		return 0x8220C0BC;
		  /* 8220C0BCh */ case    8:  		/* li R3, 0 */
		/* 8220C0BCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C0BCh case    8:*/		return 0x8220C0C0;
		  /* 8220C0C0h */ case    9:  		/* bl -738488 */
		/* 8220C0C0h case    9:*/		regs.LR = 0x8220C0C4; return 0x82157C08;
		/* 8220C0C0h case    9:*/		return 0x8220C0C4;
	}
	return 0x8220C0C4;
} // Block from 8220C09Ch-8220C0C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220C0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C0C4);
		  /* 8220C0C4h */ case    0:  		/* mr R3, R28 */
		/* 8220C0C4h case    0:*/		regs.R3 = regs.R28;
		/* 8220C0C4h case    0:*/		return 0x8220C0C8;
		  /* 8220C0C8h */ case    1:  		/* bl -719248 */
		/* 8220C0C8h case    1:*/		regs.LR = 0x8220C0CC; return 0x8215C738;
		/* 8220C0C8h case    1:*/		return 0x8220C0CC;
		  /* 8220C0CCh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220C0CCh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220C0CCh case    2:*/		return 0x8220C0D0;
		  /* 8220C0D0h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8220C0D0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8220C0F0;  }
		/* 8220C0D0h case    3:*/		return 0x8220C0D4;
		  /* 8220C0D4h */ case    4:  		/* lis R11, -32252 */
		/* 8220C0D4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C0D4h case    4:*/		return 0x8220C0D8;
		  /* 8220C0D8h */ case    5:  		/* mr R6, R29 */
		/* 8220C0D8h case    5:*/		regs.R6 = regs.R29;
		/* 8220C0D8h case    5:*/		return 0x8220C0DC;
		  /* 8220C0DCh */ case    6:  		/* addi R5, R11, -10072 */
		/* 8220C0DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD8A8);
		/* 8220C0DCh case    6:*/		return 0x8220C0E0;
	}
	return 0x8220C0E0;
} // Block from 8220C0C4h-8220C0E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220C0E0h
// Function '?SC_DestroyDataObject@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SC_STATE_CACHE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C0E0);
		  /* 8220C0E0h */ case    0:  		/* mr R4, R30 */
		/* 8220C0E0h case    0:*/		regs.R4 = regs.R30;
		/* 8220C0E0h case    0:*/		return 0x8220C0E4;
		  /* 8220C0E4h */ case    1:  		/* li R7, 672 */
		/* 8220C0E4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x2A0);
		/* 8220C0E4h case    1:*/		return 0x8220C0E8;
		  /* 8220C0E8h */ case    2:  		/* li R3, 0 */
		/* 8220C0E8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C0E8h case    2:*/		return 0x8220C0EC;
		  /* 8220C0ECh */ case    3:  		/* bl -738532 */
		/* 8220C0ECh case    3:*/		regs.LR = 0x8220C0F0; return 0x82157C08;
		/* 8220C0ECh case    3:*/		return 0x8220C0F0;
	}
	return 0x8220C0F0;
} // Block from 8220C0E0h-8220C0F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220C0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C0F0);
		  /* 8220C0F0h */ case    0:  		/* mr R3, R28 */
		/* 8220C0F0h case    0:*/		regs.R3 = regs.R28;
		/* 8220C0F0h case    0:*/		return 0x8220C0F4;
		  /* 8220C0F4h */ case    1:  		/* bl -719564 */
		/* 8220C0F4h case    1:*/		regs.LR = 0x8220C0F8; return 0x8215C628;
		/* 8220C0F4h case    1:*/		return 0x8220C0F8;
		  /* 8220C0F8h */ case    2:  		/* bl -717264 */
		/* 8220C0F8h case    2:*/		regs.LR = 0x8220C0FC; return 0x8215CF28;
		/* 8220C0F8h case    2:*/		return 0x8220C0FC;
		  /* 8220C0FCh */ case    3:  		/* mr R5, R3 */
		/* 8220C0FCh case    3:*/		regs.R5 = regs.R3;
		/* 8220C0FCh case    3:*/		return 0x8220C100;
		  /* 8220C100h */ case    4:  		/* li R4, 0 */
		/* 8220C100h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220C100h case    4:*/		return 0x8220C104;
		  /* 8220C104h */ case    5:  		/* mr R3, R28 */
		/* 8220C104h case    5:*/		regs.R3 = regs.R28;
		/* 8220C104h case    5:*/		return 0x8220C108;
		  /* 8220C108h */ case    6:  		/* bl -1551816 */
		/* 8220C108h case    6:*/		regs.LR = 0x8220C10C; return 0x82091340;
		/* 8220C108h case    6:*/		return 0x8220C10C;
		  /* 8220C10Ch */ case    7:  		/* mr R4, R28 */
		/* 8220C10Ch case    7:*/		regs.R4 = regs.R28;
		/* 8220C10Ch case    7:*/		return 0x8220C110;
		  /* 8220C110h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220C110h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C110h case    8:*/		return 0x8220C114;
		  /* 8220C114h */ case    9:  		/* bl -1820 */
		/* 8220C114h case    9:*/		regs.LR = 0x8220C118; return 0x8220B9F8;
		/* 8220C114h case    9:*/		return 0x8220C118;
		  /* 8220C118h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220C118h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C118h case   10:*/		return 0x8220C11C;
		  /* 8220C11Ch */ case   11:  		/* addi R11, R11, -1 */
		/* 8220C11Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220C11Ch case   11:*/		return 0x8220C120;
		  /* 8220C120h */ case   12:  		/* stw R11, <#[R31 + 12]> */
		/* 8220C120h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C120h case   12:*/		return 0x8220C124;
		  /* 8220C124h */ case   13:  		/* addi R1, R1, 128 */
		/* 8220C124h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220C124h case   13:*/		return 0x8220C128;
		  /* 8220C128h */ case   14:  		/* b -1552000 */
		/* 8220C128h case   14:*/		return 0x820912A8;
		/* 8220C128h case   14:*/		return 0x8220C12C;
		  /* 8220C12Ch */ case   15:  		/* nop */
		/* 8220C12Ch case   15:*/		cpu::op::nop();
		/* 8220C12Ch case   15:*/		return 0x8220C130;
	}
	return 0x8220C130;
} // Block from 8220C0F0h-8220C130h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220C130h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C130);
		  /* 8220C130h */ case    0:  		/* mfspr R12, LR */
		/* 8220C130h case    0:*/		regs.R12 = regs.LR;
		/* 8220C130h case    0:*/		return 0x8220C134;
		  /* 8220C134h */ case    1:  		/* bl -1552108 */
		/* 8220C134h case    1:*/		regs.LR = 0x8220C138; return 0x82091248;
		/* 8220C134h case    1:*/		return 0x8220C138;
		  /* 8220C138h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220C138h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220C138h case    2:*/		return 0x8220C13C;
		  /* 8220C13Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220C13Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C13Ch case    3:*/		return 0x8220C140;
		  /* 8220C140h */ case    4:  		/* lis R10, -32252 */
		/* 8220C140h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C140h case    4:*/		return 0x8220C144;
		  /* 8220C144h */ case    5:  		/* mr R29, R3 */
		/* 8220C144h case    5:*/		regs.R29 = regs.R3;
		/* 8220C144h case    5:*/		return 0x8220C148;
		  /* 8220C148h */ case    6:  		/* mr R30, R4 */
		/* 8220C148h case    6:*/		regs.R30 = regs.R4;
		/* 8220C148h case    6:*/		return 0x8220C14C;
		  /* 8220C14Ch */ case    7:  		/* mr R28, R5 */
		/* 8220C14Ch case    7:*/		regs.R28 = regs.R5;
		/* 8220C14Ch case    7:*/		return 0x8220C150;
		  /* 8220C150h */ case    8:  		/* mr R27, R6 */
		/* 8220C150h case    8:*/		regs.R27 = regs.R6;
		/* 8220C150h case    8:*/		return 0x8220C154;
		  /* 8220C154h */ case    9:  		/* mr R26, R7 */
		/* 8220C154h case    9:*/		regs.R26 = regs.R7;
		/* 8220C154h case    9:*/		return 0x8220C158;
	}
	return 0x8220C158;
} // Block from 8220C130h-8220C158h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220C158h
// Function '?SC_ReleaseProgKey@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SC_STATE_CACHE@1@PAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C158);
		  /* 8220C158h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8220C158h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220C158h case    0:*/		return 0x8220C15C;
		  /* 8220C15Ch */ case    1:  		/* addi R25, R11, 27460 */
		/* 8220C15Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220C15Ch case    1:*/		return 0x8220C160;
		  /* 8220C160h */ case    2:  		/* addi R24, R10, -10328 */
		/* 8220C160h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFD7A8);
		/* 8220C160h case    2:*/		return 0x8220C164;
		  /* 8220C164h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C164h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8220C184;  }
		/* 8220C164h case    3:*/		return 0x8220C168;
		  /* 8220C168h */ case    4:  		/* lis R11, -32252 */
		/* 8220C168h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C168h case    4:*/		return 0x8220C16C;
		  /* 8220C16Ch */ case    5:  		/* mr R6, R24 */
		/* 8220C16Ch case    5:*/		regs.R6 = regs.R24;
		/* 8220C16Ch case    5:*/		return 0x8220C170;
		  /* 8220C170h */ case    6:  		/* addi R5, R11, -21620 */
		/* 8220C170h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220C170h case    6:*/		return 0x8220C174;
		  /* 8220C174h */ case    7:  		/* mr R4, R25 */
		/* 8220C174h case    7:*/		regs.R4 = regs.R25;
		/* 8220C174h case    7:*/		return 0x8220C178;
		  /* 8220C178h */ case    8:  		/* li R7, 86 */
		/* 8220C178h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x56);
		/* 8220C178h case    8:*/		return 0x8220C17C;
		  /* 8220C17Ch */ case    9:  		/* li R3, 0 */
		/* 8220C17Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C17Ch case    9:*/		return 0x8220C180;
		  /* 8220C180h */ case   10:  		/* bl -738680 */
		/* 8220C180h case   10:*/		regs.LR = 0x8220C184; return 0x82157C08;
		/* 8220C180h case   10:*/		return 0x8220C184;
	}
	return 0x8220C184;
} // Block from 8220C158h-8220C184h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220C184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C184);
		  /* 8220C184h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220C184h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220C184h case    0:*/		return 0x8220C188;
		  /* 8220C188h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C188h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C1A8;  }
		/* 8220C188h case    1:*/		return 0x8220C18C;
		  /* 8220C18Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220C18Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C18Ch case    2:*/		return 0x8220C190;
		  /* 8220C190h */ case    3:  		/* mr R6, R24 */
		/* 8220C190h case    3:*/		regs.R6 = regs.R24;
		/* 8220C190h case    3:*/		return 0x8220C194;
		  /* 8220C194h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220C194h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220C194h case    4:*/		return 0x8220C198;
		  /* 8220C198h */ case    5:  		/* mr R4, R25 */
		/* 8220C198h case    5:*/		regs.R4 = regs.R25;
		/* 8220C198h case    5:*/		return 0x8220C19C;
		  /* 8220C19Ch */ case    6:  		/* li R7, 87 */
		/* 8220C19Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x57);
		/* 8220C19Ch case    6:*/		return 0x8220C1A0;
		  /* 8220C1A0h */ case    7:  		/* li R3, 0 */
		/* 8220C1A0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C1A0h case    7:*/		return 0x8220C1A4;
		  /* 8220C1A4h */ case    8:  		/* bl -738716 */
		/* 8220C1A4h case    8:*/		regs.LR = 0x8220C1A8; return 0x82157C08;
		/* 8220C1A4h case    8:*/		return 0x8220C1A8;
	}
	return 0x8220C1A8;
} // Block from 8220C184h-8220C1A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C1A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C1A8);
		  /* 8220C1A8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220C1A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220C1A8h case    0:*/		return 0x8220C1AC;
		  /* 8220C1ACh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C1ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C1CC;  }
		/* 8220C1ACh case    1:*/		return 0x8220C1B0;
		  /* 8220C1B0h */ case    2:  		/* lis R11, -32252 */
		/* 8220C1B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C1B0h case    2:*/		return 0x8220C1B4;
		  /* 8220C1B4h */ case    3:  		/* mr R6, R24 */
		/* 8220C1B4h case    3:*/		regs.R6 = regs.R24;
		/* 8220C1B4h case    3:*/		return 0x8220C1B8;
		  /* 8220C1B8h */ case    4:  		/* addi R5, R11, -9948 */
		/* 8220C1B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD924);
		/* 8220C1B8h case    4:*/		return 0x8220C1BC;
		  /* 8220C1BCh */ case    5:  		/* mr R4, R25 */
		/* 8220C1BCh case    5:*/		regs.R4 = regs.R25;
		/* 8220C1BCh case    5:*/		return 0x8220C1C0;
		  /* 8220C1C0h */ case    6:  		/* li R7, 88 */
		/* 8220C1C0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x58);
		/* 8220C1C0h case    6:*/		return 0x8220C1C4;
		  /* 8220C1C4h */ case    7:  		/* li R3, 0 */
		/* 8220C1C4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C1C4h case    7:*/		return 0x8220C1C8;
		  /* 8220C1C8h */ case    8:  		/* bl -738752 */
		/* 8220C1C8h case    8:*/		regs.LR = 0x8220C1CC; return 0x82157C08;
		/* 8220C1C8h case    8:*/		return 0x8220C1CC;
	}
	return 0x8220C1CC;
} // Block from 8220C1A8h-8220C1CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C1CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C1CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C1CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C1CC);
		  /* 8220C1CCh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220C1CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220C1CCh case    0:*/		return 0x8220C1D0;
		  /* 8220C1D0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C1D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C1F0;  }
		/* 8220C1D0h case    1:*/		return 0x8220C1D4;
		  /* 8220C1D4h */ case    2:  		/* lis R11, -32252 */
		/* 8220C1D4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C1D4h case    2:*/		return 0x8220C1D8;
		  /* 8220C1D8h */ case    3:  		/* mr R6, R24 */
		/* 8220C1D8h case    3:*/		regs.R6 = regs.R24;
		/* 8220C1D8h case    3:*/		return 0x8220C1DC;
		  /* 8220C1DCh */ case    4:  		/* addi R5, R11, -9968 */
		/* 8220C1DCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD910);
		/* 8220C1DCh case    4:*/		return 0x8220C1E0;
		  /* 8220C1E0h */ case    5:  		/* mr R4, R25 */
		/* 8220C1E0h case    5:*/		regs.R4 = regs.R25;
		/* 8220C1E0h case    5:*/		return 0x8220C1E4;
		  /* 8220C1E4h */ case    6:  		/* li R7, 89 */
		/* 8220C1E4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x59);
		/* 8220C1E4h case    6:*/		return 0x8220C1E8;
	}
	return 0x8220C1E8;
} // Block from 8220C1CCh-8220C1E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220C1E8h
// Function '?MemoryInit@XGRAPHICS@@YAPAU_MEM_HEAD@1@HHP6APAXPAXI@ZP6A?AW4_E_SSM_RETURNCODE@1@00@Z0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C1E8);
		  /* 8220C1E8h */ case    0:  		/* li R3, 0 */
		/* 8220C1E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C1E8h case    0:*/		return 0x8220C1EC;
		  /* 8220C1ECh */ case    1:  		/* bl -738788 */
		/* 8220C1ECh case    1:*/		regs.LR = 0x8220C1F0; return 0x82157C08;
		/* 8220C1ECh case    1:*/		return 0x8220C1F0;
	}
	return 0x8220C1F0;
} // Block from 8220C1E8h-8220C1F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C1F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C1F0);
		  /* 8220C1F0h */ case    0:  		/* li R4, 24 */
		/* 8220C1F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220C1F0h case    0:*/		return 0x8220C1F4;
		  /* 8220C1F4h */ case    1:  		/* mtspr CTR, R30 */
		/* 8220C1F4h case    1:*/		regs.CTR = regs.R30;
		/* 8220C1F4h case    1:*/		return 0x8220C1F8;
		  /* 8220C1F8h */ case    2:  		/* mr R3, R29 */
		/* 8220C1F8h case    2:*/		regs.R3 = regs.R29;
		/* 8220C1F8h case    2:*/		return 0x8220C1FC;
		  /* 8220C1FCh */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220C1FCh case    3:*/		if ( 1 ) { regs.LR = 0x8220C200; return (uint32)regs.CTR; }
		/* 8220C1FCh case    3:*/		return 0x8220C200;
		  /* 8220C200h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220C200h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220C200h case    4:*/		return 0x8220C204;
		  /* 8220C204h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8220C204h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220C228;  }
		/* 8220C204h case    5:*/		return 0x8220C208;
		  /* 8220C208h */ case    6:  		/* lis R11, -32252 */
		/* 8220C208h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C208h case    6:*/		return 0x8220C20C;
		  /* 8220C20Ch */ case    7:  		/* mr R6, R24 */
		/* 8220C20Ch case    7:*/		regs.R6 = regs.R24;
		/* 8220C20Ch case    7:*/		return 0x8220C210;
		  /* 8220C210h */ case    8:  		/* addi R5, R11, -9980 */
		/* 8220C210h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD904);
		/* 8220C210h case    8:*/		return 0x8220C214;
		  /* 8220C214h */ case    9:  		/* mr R4, R25 */
		/* 8220C214h case    9:*/		regs.R4 = regs.R25;
		/* 8220C214h case    9:*/		return 0x8220C218;
		  /* 8220C218h */ case   10:  		/* li R7, 96 */
		/* 8220C218h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x60);
		/* 8220C218h case   10:*/		return 0x8220C21C;
		  /* 8220C21Ch */ case   11:  		/* li R3, 0 */
		/* 8220C21Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C21Ch case   11:*/		return 0x8220C220;
		  /* 8220C220h */ case   12:  		/* bl -738840 */
		/* 8220C220h case   12:*/		regs.LR = 0x8220C224; return 0x82157C08;
		/* 8220C220h case   12:*/		return 0x8220C224;
		  /* 8220C224h */ case   13:  		/* b 152 */
		/* 8220C224h case   13:*/		return 0x8220C2BC;
		/* 8220C224h case   13:*/		return 0x8220C228;
	}
	return 0x8220C228;
} // Block from 8220C1F0h-8220C228h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220C228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C228);
		  /* 8220C228h */ case    0:  		/* li R11, 0 */
		/* 8220C228h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C228h case    0:*/		return 0x8220C22C;
		  /* 8220C22Ch */ case    1:  		/* stw R29, <#[R31]> */
		/* 8220C22Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8220C22Ch case    1:*/		return 0x8220C230;
		  /* 8220C230h */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8220C230h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220C230h case    2:*/		return 0x8220C234;
		  /* 8220C234h */ case    3:  		/* mr R6, R27 */
		/* 8220C234h case    3:*/		regs.R6 = regs.R27;
		/* 8220C234h case    3:*/		return 0x8220C238;
		  /* 8220C238h */ case    4:  		/* stw R28, <#[R31 + 8]> */
		/* 8220C238h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 8220C238h case    4:*/		return 0x8220C23C;
		  /* 8220C23Ch */ case    5:  		/* mr R5, R28 */
		/* 8220C23Ch case    5:*/		regs.R5 = regs.R28;
		/* 8220C23Ch case    5:*/		return 0x8220C240;
		  /* 8220C240h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 8220C240h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C240h case    6:*/		return 0x8220C244;
		  /* 8220C244h */ case    7:  		/* mr R4, R30 */
		/* 8220C244h case    7:*/		regs.R4 = regs.R30;
		/* 8220C244h case    7:*/		return 0x8220C248;
		  /* 8220C248h */ case    8:  		/* mr R3, R29 */
		/* 8220C248h case    8:*/		regs.R3 = regs.R29;
		/* 8220C248h case    8:*/		return 0x8220C24C;
		  /* 8220C24Ch */ case    9:  		/* bl -721356 */
		/* 8220C24Ch case    9:*/		regs.LR = 0x8220C250; return 0x8215C080;
		/* 8220C24Ch case    9:*/		return 0x8220C250;
		  /* 8220C250h */ case   10:  		/* stw R3, <#[R31 + 16]> */
		/* 8220C250h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C250h case   10:*/		return 0x8220C254;
		  /* 8220C254h */ case   11:  		/* mr R6, R26 */
		/* 8220C254h case   11:*/		regs.R6 = regs.R26;
		/* 8220C254h case   11:*/		return 0x8220C258;
		  /* 8220C258h */ case   12:  		/* mr R5, R28 */
		/* 8220C258h case   12:*/		regs.R5 = regs.R28;
		/* 8220C258h case   12:*/		return 0x8220C25C;
		  /* 8220C25Ch */ case   13:  		/* mr R4, R30 */
		/* 8220C25Ch case   13:*/		regs.R4 = regs.R30;
		/* 8220C25Ch case   13:*/		return 0x8220C260;
		  /* 8220C260h */ case   14:  		/* mr R3, R29 */
		/* 8220C260h case   14:*/		regs.R3 = regs.R29;
		/* 8220C260h case   14:*/		return 0x8220C264;
		  /* 8220C264h */ case   15:  		/* bl -721268 */
		/* 8220C264h case   15:*/		regs.LR = 0x8220C268; return 0x8215C0F0;
		/* 8220C264h case   15:*/		return 0x8220C268;
		  /* 8220C268h */ case   16:  		/* stw R3, <#[R31 + 20]> */
		/* 8220C268h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220C268h case   16:*/		return 0x8220C26C;
		  /* 8220C26Ch */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 8220C26Ch case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220C26Ch case   17:*/		return 0x8220C270;
		  /* 8220C270h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8220C270h case   18:*/		if ( regs.CR[0].eq ) { return 0x8220C280;  }
		/* 8220C270h case   18:*/		return 0x8220C274;
		  /* 8220C274h */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C274h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C274h case   19:*/		return 0x8220C278;
		  /* 8220C278h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 8220C278h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C278h case   20:*/		return 0x8220C27C;
		  /* 8220C27Ch */ case   21:  		/* bc 4, CR6_EQ, 64 */
		/* 8220C27Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x8220C2BC;  }
		/* 8220C27Ch case   21:*/		return 0x8220C280;
	}
	return 0x8220C280;
} // Block from 8220C228h-8220C280h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220C280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C280);
		  /* 8220C280h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8220C280h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220C280h case    0:*/		return 0x8220C284;
		  /* 8220C284h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8220C284h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C294;  }
		/* 8220C284h case    1:*/		return 0x8220C288;
		  /* 8220C288h */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C288h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C288h case    2:*/		return 0x8220C28C;
		  /* 8220C28Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8220C28Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C28Ch case    3:*/		return 0x8220C290;
		  /* 8220C290h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C290h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220C2B0;  }
		/* 8220C290h case    4:*/		return 0x8220C294;
	}
	return 0x8220C294;
} // Block from 8220C280h-8220C294h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C294);
		  /* 8220C294h */ case    0:  		/* lis R11, -32252 */
		/* 8220C294h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C294h case    0:*/		return 0x8220C298;
		  /* 8220C298h */ case    1:  		/* mr R6, R24 */
		/* 8220C298h case    1:*/		regs.R6 = regs.R24;
		/* 8220C298h case    1:*/		return 0x8220C29C;
		  /* 8220C29Ch */ case    2:  		/* addi R5, R11, -10036 */
		/* 8220C29Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD8CC);
		/* 8220C29Ch case    2:*/		return 0x8220C2A0;
		  /* 8220C2A0h */ case    3:  		/* mr R4, R25 */
		/* 8220C2A0h case    3:*/		regs.R4 = regs.R25;
		/* 8220C2A0h case    3:*/		return 0x8220C2A4;
		  /* 8220C2A4h */ case    4:  		/* li R7, 123 */
		/* 8220C2A4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x7B);
		/* 8220C2A4h case    4:*/		return 0x8220C2A8;
	}
	return 0x8220C2A8;
} // Block from 8220C294h-8220C2A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C2A8h
// Function '?MemoryTerminate@XGRAPHICS@@YAXPAU_MEM_HEAD@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C2A8);
		  /* 8220C2A8h */ case    0:  		/* li R3, 0 */
		/* 8220C2A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C2A8h case    0:*/		return 0x8220C2AC;
		  /* 8220C2ACh */ case    1:  		/* bl -738980 */
		/* 8220C2ACh case    1:*/		regs.LR = 0x8220C2B0; return 0x82157C08;
		/* 8220C2ACh case    1:*/		return 0x8220C2B0;
	}
	return 0x8220C2B0;
} // Block from 8220C2A8h-8220C2B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C2B0);
		  /* 8220C2B0h */ case    0:  		/* mr R3, R31 */
		/* 8220C2B0h case    0:*/		regs.R3 = regs.R31;
		/* 8220C2B0h case    0:*/		return 0x8220C2B4;
		  /* 8220C2B4h */ case    1:  		/* bl -2132 */
		/* 8220C2B4h case    1:*/		regs.LR = 0x8220C2B8; return 0x8220BA60;
		/* 8220C2B4h case    1:*/		return 0x8220C2B8;
		  /* 8220C2B8h */ case    2:  		/* li R31, 0 */
		/* 8220C2B8h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220C2B8h case    2:*/		return 0x8220C2BC;
	}
	return 0x8220C2BC;
} // Block from 8220C2B0h-8220C2BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C2BC);
		  /* 8220C2BCh */ case    0:  		/* mr R3, R31 */
		/* 8220C2BCh case    0:*/		regs.R3 = regs.R31;
		/* 8220C2BCh case    0:*/		return 0x8220C2C0;
		  /* 8220C2C0h */ case    1:  		/* addi R1, R1, 160 */
		/* 8220C2C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220C2C0h case    1:*/		return 0x8220C2C4;
		  /* 8220C2C4h */ case    2:  		/* b -1552428 */
		/* 8220C2C4h case    2:*/		return 0x82091298;
		/* 8220C2C4h case    2:*/		return 0x8220C2C8;
	}
	return 0x8220C2C8;
} // Block from 8220C2BCh-8220C2C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C2C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C2C8);
		  /* 8220C2C8h */ case    0:  		/* mfspr R12, LR */
		/* 8220C2C8h case    0:*/		regs.R12 = regs.LR;
		/* 8220C2C8h case    0:*/		return 0x8220C2CC;
		  /* 8220C2CCh */ case    1:  		/* bl -1552516 */
		/* 8220C2CCh case    1:*/		regs.LR = 0x8220C2D0; return 0x82091248;
		/* 8220C2CCh case    1:*/		return 0x8220C2D0;
		  /* 8220C2D0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220C2D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220C2D0h case    2:*/		return 0x8220C2D4;
		  /* 8220C2D4h */ case    3:  		/* lis R11, -32253 */
		/* 8220C2D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C2D4h case    3:*/		return 0x8220C2D8;
		  /* 8220C2D8h */ case    4:  		/* lis R10, -32252 */
		/* 8220C2D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C2D8h case    4:*/		return 0x8220C2DC;
		  /* 8220C2DCh */ case    5:  		/* mr R29, R3 */
		/* 8220C2DCh case    5:*/		regs.R29 = regs.R3;
		/* 8220C2DCh case    5:*/		return 0x8220C2E0;
		  /* 8220C2E0h */ case    6:  		/* mr R30, R4 */
		/* 8220C2E0h case    6:*/		regs.R30 = regs.R4;
		/* 8220C2E0h case    6:*/		return 0x8220C2E4;
		  /* 8220C2E4h */ case    7:  		/* mr R28, R5 */
		/* 8220C2E4h case    7:*/		regs.R28 = regs.R5;
		/* 8220C2E4h case    7:*/		return 0x8220C2E8;
		  /* 8220C2E8h */ case    8:  		/* mr R27, R6 */
		/* 8220C2E8h case    8:*/		regs.R27 = regs.R6;
		/* 8220C2E8h case    8:*/		return 0x8220C2EC;
		  /* 8220C2ECh */ case    9:  		/* mr R26, R7 */
		/* 8220C2ECh case    9:*/		regs.R26 = regs.R7;
		/* 8220C2ECh case    9:*/		return 0x8220C2F0;
		  /* 8220C2F0h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 8220C2F0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220C2F0h case   10:*/		return 0x8220C2F4;
		  /* 8220C2F4h */ case   11:  		/* addi R25, R11, 27460 */
		/* 8220C2F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220C2F4h case   11:*/		return 0x8220C2F8;
		  /* 8220C2F8h */ case   12:  		/* addi R24, R10, -10328 */
		/* 8220C2F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFD7A8);
		/* 8220C2F8h case   12:*/		return 0x8220C2FC;
		  /* 8220C2FCh */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C2FCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220C31C;  }
		/* 8220C2FCh case   13:*/		return 0x8220C300;
		  /* 8220C300h */ case   14:  		/* lis R11, -32252 */
		/* 8220C300h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C300h case   14:*/		return 0x8220C304;
		  /* 8220C304h */ case   15:  		/* mr R6, R24 */
		/* 8220C304h case   15:*/		regs.R6 = regs.R24;
		/* 8220C304h case   15:*/		return 0x8220C308;
	}
	return 0x8220C308;
} // Block from 8220C2C8h-8220C308h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8220C308h
// Function '?MemoryNewNode@XGRAPHICS@@YAPAU_MEM_NODE@1@PAU_MEM_HEAD@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C308);
		  /* 8220C308h */ case    0:  		/* addi R5, R11, -21620 */
		/* 8220C308h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220C308h case    0:*/		return 0x8220C30C;
		  /* 8220C30Ch */ case    1:  		/* mr R4, R25 */
		/* 8220C30Ch case    1:*/		regs.R4 = regs.R25;
		/* 8220C30Ch case    1:*/		return 0x8220C310;
		  /* 8220C310h */ case    2:  		/* li R7, 312 */
		/* 8220C310h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x138);
		/* 8220C310h case    2:*/		return 0x8220C314;
		  /* 8220C314h */ case    3:  		/* li R3, 0 */
		/* 8220C314h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C314h case    3:*/		return 0x8220C318;
		  /* 8220C318h */ case    4:  		/* bl -739088 */
		/* 8220C318h case    4:*/		regs.LR = 0x8220C31C; return 0x82157C08;
		/* 8220C318h case    4:*/		return 0x8220C31C;
	}
	return 0x8220C31C;
} // Block from 8220C308h-8220C31Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C31C);
		  /* 8220C31Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220C31Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220C31Ch case    0:*/		return 0x8220C320;
		  /* 8220C320h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C320h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C340;  }
		/* 8220C320h case    1:*/		return 0x8220C324;
		  /* 8220C324h */ case    2:  		/* lis R11, -32252 */
		/* 8220C324h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C324h case    2:*/		return 0x8220C328;
		  /* 8220C328h */ case    3:  		/* mr R6, R24 */
		/* 8220C328h case    3:*/		regs.R6 = regs.R24;
		/* 8220C328h case    3:*/		return 0x8220C32C;
		  /* 8220C32Ch */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220C32Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220C32Ch case    4:*/		return 0x8220C330;
		  /* 8220C330h */ case    5:  		/* mr R4, R25 */
		/* 8220C330h case    5:*/		regs.R4 = regs.R25;
		/* 8220C330h case    5:*/		return 0x8220C334;
		  /* 8220C334h */ case    6:  		/* li R7, 313 */
		/* 8220C334h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x139);
		/* 8220C334h case    6:*/		return 0x8220C338;
		  /* 8220C338h */ case    7:  		/* li R3, 0 */
		/* 8220C338h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C338h case    7:*/		return 0x8220C33C;
		  /* 8220C33Ch */ case    8:  		/* bl -739124 */
		/* 8220C33Ch case    8:*/		regs.LR = 0x8220C340; return 0x82157C08;
		/* 8220C33Ch case    8:*/		return 0x8220C340;
	}
	return 0x8220C340;
} // Block from 8220C31Ch-8220C340h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C340);
		  /* 8220C340h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220C340h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220C340h case    0:*/		return 0x8220C344;
		  /* 8220C344h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C344h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C364;  }
		/* 8220C344h case    1:*/		return 0x8220C348;
		  /* 8220C348h */ case    2:  		/* lis R11, -32252 */
		/* 8220C348h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C348h case    2:*/		return 0x8220C34C;
		  /* 8220C34Ch */ case    3:  		/* mr R6, R24 */
		/* 8220C34Ch case    3:*/		regs.R6 = regs.R24;
		/* 8220C34Ch case    3:*/		return 0x8220C350;
		  /* 8220C350h */ case    4:  		/* addi R5, R11, -9948 */
		/* 8220C350h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD924);
		/* 8220C350h case    4:*/		return 0x8220C354;
		  /* 8220C354h */ case    5:  		/* mr R4, R25 */
		/* 8220C354h case    5:*/		regs.R4 = regs.R25;
		/* 8220C354h case    5:*/		return 0x8220C358;
		  /* 8220C358h */ case    6:  		/* li R7, 314 */
		/* 8220C358h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x13A);
		/* 8220C358h case    6:*/		return 0x8220C35C;
		  /* 8220C35Ch */ case    7:  		/* li R3, 0 */
		/* 8220C35Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C35Ch case    7:*/		return 0x8220C360;
		  /* 8220C360h */ case    8:  		/* bl -739160 */
		/* 8220C360h case    8:*/		regs.LR = 0x8220C364; return 0x82157C08;
		/* 8220C360h case    8:*/		return 0x8220C364;
	}
	return 0x8220C364;
} // Block from 8220C340h-8220C364h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C364);
		  /* 8220C364h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220C364h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220C364h case    0:*/		return 0x8220C368;
		  /* 8220C368h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C368h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C388;  }
		/* 8220C368h case    1:*/		return 0x8220C36C;
		  /* 8220C36Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220C36Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C36Ch case    2:*/		return 0x8220C370;
		  /* 8220C370h */ case    3:  		/* mr R6, R24 */
		/* 8220C370h case    3:*/		regs.R6 = regs.R24;
		/* 8220C370h case    3:*/		return 0x8220C374;
		  /* 8220C374h */ case    4:  		/* addi R5, R11, -9968 */
		/* 8220C374h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD910);
		/* 8220C374h case    4:*/		return 0x8220C378;
		  /* 8220C378h */ case    5:  		/* mr R4, R25 */
		/* 8220C378h case    5:*/		regs.R4 = regs.R25;
		/* 8220C378h case    5:*/		return 0x8220C37C;
		  /* 8220C37Ch */ case    6:  		/* li R7, 315 */
		/* 8220C37Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x13B);
		/* 8220C37Ch case    6:*/		return 0x8220C380;
		  /* 8220C380h */ case    7:  		/* li R3, 0 */
		/* 8220C380h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C380h case    7:*/		return 0x8220C384;
		  /* 8220C384h */ case    8:  		/* bl -739196 */
		/* 8220C384h case    8:*/		regs.LR = 0x8220C388; return 0x82157C08;
		/* 8220C384h case    8:*/		return 0x8220C388;
	}
	return 0x8220C388;
} // Block from 8220C364h-8220C388h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C388);
		  /* 8220C388h */ case    0:  		/* li R4, 24 */
		/* 8220C388h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220C388h case    0:*/		return 0x8220C38C;
		  /* 8220C38Ch */ case    1:  		/* mtspr CTR, R30 */
		/* 8220C38Ch case    1:*/		regs.CTR = regs.R30;
		/* 8220C38Ch case    1:*/		return 0x8220C390;
		  /* 8220C390h */ case    2:  		/* mr R3, R29 */
		/* 8220C390h case    2:*/		regs.R3 = regs.R29;
		/* 8220C390h case    2:*/		return 0x8220C394;
		  /* 8220C394h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220C394h case    3:*/		if ( 1 ) { regs.LR = 0x8220C398; return (uint32)regs.CTR; }
		/* 8220C394h case    3:*/		return 0x8220C398;
		  /* 8220C398h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220C398h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220C398h case    4:*/		return 0x8220C39C;
		  /* 8220C39Ch */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8220C39Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220C3C0;  }
		/* 8220C39Ch case    5:*/		return 0x8220C3A0;
		  /* 8220C3A0h */ case    6:  		/* lis R11, -32252 */
		/* 8220C3A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C3A0h case    6:*/		return 0x8220C3A4;
		  /* 8220C3A4h */ case    7:  		/* mr R6, R24 */
		/* 8220C3A4h case    7:*/		regs.R6 = regs.R24;
		/* 8220C3A4h case    7:*/		return 0x8220C3A8;
		  /* 8220C3A8h */ case    8:  		/* addi R5, R11, -9980 */
		/* 8220C3A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD904);
		/* 8220C3A8h case    8:*/		return 0x8220C3AC;
		  /* 8220C3ACh */ case    9:  		/* mr R4, R25 */
		/* 8220C3ACh case    9:*/		regs.R4 = regs.R25;
		/* 8220C3ACh case    9:*/		return 0x8220C3B0;
		  /* 8220C3B0h */ case   10:  		/* li R7, 322 */
		/* 8220C3B0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x142);
		/* 8220C3B0h case   10:*/		return 0x8220C3B4;
		  /* 8220C3B4h */ case   11:  		/* li R3, 0 */
		/* 8220C3B4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C3B4h case   11:*/		return 0x8220C3B8;
		  /* 8220C3B8h */ case   12:  		/* bl -739248 */
		/* 8220C3B8h case   12:*/		regs.LR = 0x8220C3BC; return 0x82157C08;
		/* 8220C3B8h case   12:*/		return 0x8220C3BC;
		  /* 8220C3BCh */ case   13:  		/* b 152 */
		/* 8220C3BCh case   13:*/		return 0x8220C454;
		/* 8220C3BCh case   13:*/		return 0x8220C3C0;
	}
	return 0x8220C3C0;
} // Block from 8220C388h-8220C3C0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220C3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C3C0);
		  /* 8220C3C0h */ case    0:  		/* li R11, 0 */
		/* 8220C3C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C3C0h case    0:*/		return 0x8220C3C4;
		  /* 8220C3C4h */ case    1:  		/* stw R29, <#[R31]> */
		/* 8220C3C4h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8220C3C4h case    1:*/		return 0x8220C3C8;
		  /* 8220C3C8h */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8220C3C8h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220C3C8h case    2:*/		return 0x8220C3CC;
		  /* 8220C3CCh */ case    3:  		/* mr R6, R27 */
		/* 8220C3CCh case    3:*/		regs.R6 = regs.R27;
		/* 8220C3CCh case    3:*/		return 0x8220C3D0;
		  /* 8220C3D0h */ case    4:  		/* stw R28, <#[R31 + 8]> */
		/* 8220C3D0h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 8220C3D0h case    4:*/		return 0x8220C3D4;
		  /* 8220C3D4h */ case    5:  		/* mr R5, R28 */
		/* 8220C3D4h case    5:*/		regs.R5 = regs.R28;
		/* 8220C3D4h case    5:*/		return 0x8220C3D8;
		  /* 8220C3D8h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 8220C3D8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C3D8h case    6:*/		return 0x8220C3DC;
		  /* 8220C3DCh */ case    7:  		/* mr R4, R30 */
		/* 8220C3DCh case    7:*/		regs.R4 = regs.R30;
		/* 8220C3DCh case    7:*/		return 0x8220C3E0;
		  /* 8220C3E0h */ case    8:  		/* mr R3, R29 */
		/* 8220C3E0h case    8:*/		regs.R3 = regs.R29;
		/* 8220C3E0h case    8:*/		return 0x8220C3E4;
		  /* 8220C3E4h */ case    9:  		/* bl -720828 */
		/* 8220C3E4h case    9:*/		regs.LR = 0x8220C3E8; return 0x8215C428;
		/* 8220C3E4h case    9:*/		return 0x8220C3E8;
		  /* 8220C3E8h */ case   10:  		/* stw R3, <#[R31 + 16]> */
		/* 8220C3E8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C3E8h case   10:*/		return 0x8220C3EC;
		  /* 8220C3ECh */ case   11:  		/* mr R6, R26 */
		/* 8220C3ECh case   11:*/		regs.R6 = regs.R26;
		/* 8220C3ECh case   11:*/		return 0x8220C3F0;
		  /* 8220C3F0h */ case   12:  		/* mr R5, R28 */
		/* 8220C3F0h case   12:*/		regs.R5 = regs.R28;
		/* 8220C3F0h case   12:*/		return 0x8220C3F4;
		  /* 8220C3F4h */ case   13:  		/* mr R4, R30 */
		/* 8220C3F4h case   13:*/		regs.R4 = regs.R30;
		/* 8220C3F4h case   13:*/		return 0x8220C3F8;
		  /* 8220C3F8h */ case   14:  		/* mr R3, R29 */
		/* 8220C3F8h case   14:*/		regs.R3 = regs.R29;
		/* 8220C3F8h case   14:*/		return 0x8220C3FC;
		  /* 8220C3FCh */ case   15:  		/* bl -720740 */
		/* 8220C3FCh case   15:*/		regs.LR = 0x8220C400; return 0x8215C498;
		/* 8220C3FCh case   15:*/		return 0x8220C400;
		  /* 8220C400h */ case   16:  		/* stw R3, <#[R31 + 20]> */
		/* 8220C400h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220C400h case   16:*/		return 0x8220C404;
		  /* 8220C404h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 8220C404h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220C404h case   17:*/		return 0x8220C408;
		  /* 8220C408h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8220C408h case   18:*/		if ( regs.CR[0].eq ) { return 0x8220C418;  }
		/* 8220C408h case   18:*/		return 0x8220C40C;
		  /* 8220C40Ch */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C40Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C40Ch case   19:*/		return 0x8220C410;
	}
	return 0x8220C410;
} // Block from 8220C3C0h-8220C410h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220C410h
// Function '?MemoryFreeNode@XGRAPHICS@@YAHPAU_MEM_HEAD@1@PAU_MEM_NODE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C410);
		  /* 8220C410h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8220C410h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C410h case    0:*/		return 0x8220C414;
		  /* 8220C414h */ case    1:  		/* bc 4, CR6_EQ, 64 */
		/* 8220C414h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C454;  }
		/* 8220C414h case    1:*/		return 0x8220C418;
	}
	return 0x8220C418;
} // Block from 8220C410h-8220C418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C418);
		  /* 8220C418h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8220C418h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220C418h case    0:*/		return 0x8220C41C;
		  /* 8220C41Ch */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8220C41Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C42C;  }
		/* 8220C41Ch case    1:*/		return 0x8220C420;
		  /* 8220C420h */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C420h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C420h case    2:*/		return 0x8220C424;
		  /* 8220C424h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8220C424h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C424h case    3:*/		return 0x8220C428;
		  /* 8220C428h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C428h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220C448;  }
		/* 8220C428h case    4:*/		return 0x8220C42C;
	}
	return 0x8220C42C;
} // Block from 8220C418h-8220C42Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C42C);
		  /* 8220C42Ch */ case    0:  		/* lis R11, -32252 */
		/* 8220C42Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C42Ch case    0:*/		return 0x8220C430;
		  /* 8220C430h */ case    1:  		/* mr R6, R24 */
		/* 8220C430h case    1:*/		regs.R6 = regs.R24;
		/* 8220C430h case    1:*/		return 0x8220C434;
		  /* 8220C434h */ case    2:  		/* addi R5, R11, -10036 */
		/* 8220C434h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD8CC);
		/* 8220C434h case    2:*/		return 0x8220C438;
		  /* 8220C438h */ case    3:  		/* mr R4, R25 */
		/* 8220C438h case    3:*/		regs.R4 = regs.R25;
		/* 8220C438h case    3:*/		return 0x8220C43C;
		  /* 8220C43Ch */ case    4:  		/* li R7, 349 */
		/* 8220C43Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x15D);
		/* 8220C43Ch case    4:*/		return 0x8220C440;
		  /* 8220C440h */ case    5:  		/* li R3, 0 */
		/* 8220C440h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C440h case    5:*/		return 0x8220C444;
		  /* 8220C444h */ case    6:  		/* bl -739388 */
		/* 8220C444h case    6:*/		regs.LR = 0x8220C448; return 0x82157C08;
		/* 8220C444h case    6:*/		return 0x8220C448;
	}
	return 0x8220C448;
} // Block from 8220C42Ch-8220C448h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220C448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C448);
		  /* 8220C448h */ case    0:  		/* mr R3, R31 */
		/* 8220C448h case    0:*/		regs.R3 = regs.R31;
		/* 8220C448h case    0:*/		return 0x8220C44C;
		  /* 8220C44Ch */ case    1:  		/* bl -1948 */
		/* 8220C44Ch case    1:*/		regs.LR = 0x8220C450; return 0x8220BCB0;
		/* 8220C44Ch case    1:*/		return 0x8220C450;
		  /* 8220C450h */ case    2:  		/* li R31, 0 */
		/* 8220C450h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220C450h case    2:*/		return 0x8220C454;
	}
	return 0x8220C454;
} // Block from 8220C448h-8220C454h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C454);
		  /* 8220C454h */ case    0:  		/* mr R3, R31 */
		/* 8220C454h case    0:*/		regs.R3 = regs.R31;
		/* 8220C454h case    0:*/		return 0x8220C458;
		  /* 8220C458h */ case    1:  		/* addi R1, R1, 160 */
		/* 8220C458h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220C458h case    1:*/		return 0x8220C45C;
		  /* 8220C45Ch */ case    2:  		/* b -1552836 */
		/* 8220C45Ch case    2:*/		return 0x82091298;
		/* 8220C45Ch case    2:*/		return 0x8220C460;
	}
	return 0x8220C460;
} // Block from 8220C454h-8220C460h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C460h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C460);
		  /* 8220C460h */ case    0:  		/* mfspr R12, LR */
		/* 8220C460h case    0:*/		regs.R12 = regs.LR;
		/* 8220C460h case    0:*/		return 0x8220C464;
		  /* 8220C464h */ case    1:  		/* bl -1552924 */
		/* 8220C464h case    1:*/		regs.LR = 0x8220C468; return 0x82091248;
		/* 8220C464h case    1:*/		return 0x8220C468;
		  /* 8220C468h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220C468h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220C468h case    2:*/		return 0x8220C46C;
		  /* 8220C46Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220C46Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C46Ch case    3:*/		return 0x8220C470;
		  /* 8220C470h */ case    4:  		/* lis R10, -32252 */
		/* 8220C470h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C470h case    4:*/		return 0x8220C474;
		  /* 8220C474h */ case    5:  		/* mr R29, R3 */
		/* 8220C474h case    5:*/		regs.R29 = regs.R3;
		/* 8220C474h case    5:*/		return 0x8220C478;
	}
	return 0x8220C478;
} // Block from 8220C460h-8220C478h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220C478h
// Function '?OLF_Destroy@XGRAPHICS@@YAXPAU_ORDERED_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C478);
		  /* 8220C478h */ case    0:  		/* mr R30, R4 */
		/* 8220C478h case    0:*/		regs.R30 = regs.R4;
		/* 8220C478h case    0:*/		return 0x8220C47C;
		  /* 8220C47Ch */ case    1:  		/* mr R28, R5 */
		/* 8220C47Ch case    1:*/		regs.R28 = regs.R5;
		/* 8220C47Ch case    1:*/		return 0x8220C480;
		  /* 8220C480h */ case    2:  		/* mr R27, R6 */
		/* 8220C480h case    2:*/		regs.R27 = regs.R6;
		/* 8220C480h case    2:*/		return 0x8220C484;
		  /* 8220C484h */ case    3:  		/* mr R26, R7 */
		/* 8220C484h case    3:*/		regs.R26 = regs.R7;
		/* 8220C484h case    3:*/		return 0x8220C488;
		  /* 8220C488h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 8220C488h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220C488h case    4:*/		return 0x8220C48C;
		  /* 8220C48Ch */ case    5:  		/* addi R25, R11, 27460 */
		/* 8220C48Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220C48Ch case    5:*/		return 0x8220C490;
		  /* 8220C490h */ case    6:  		/* addi R24, R10, -10328 */
		/* 8220C490h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFD7A8);
		/* 8220C490h case    6:*/		return 0x8220C494;
		  /* 8220C494h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C494h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220C4B4;  }
		/* 8220C494h case    7:*/		return 0x8220C498;
		  /* 8220C498h */ case    8:  		/* lis R11, -32252 */
		/* 8220C498h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C498h case    8:*/		return 0x8220C49C;
		  /* 8220C49Ch */ case    9:  		/* mr R6, R24 */
		/* 8220C49Ch case    9:*/		regs.R6 = regs.R24;
		/* 8220C49Ch case    9:*/		return 0x8220C4A0;
		  /* 8220C4A0h */ case   10:  		/* addi R5, R11, -21620 */
		/* 8220C4A0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220C4A0h case   10:*/		return 0x8220C4A4;
		  /* 8220C4A4h */ case   11:  		/* mr R4, R25 */
		/* 8220C4A4h case   11:*/		regs.R4 = regs.R25;
		/* 8220C4A4h case   11:*/		return 0x8220C4A8;
		  /* 8220C4A8h */ case   12:  		/* li R7, 533 */
		/* 8220C4A8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x215);
		/* 8220C4A8h case   12:*/		return 0x8220C4AC;
		  /* 8220C4ACh */ case   13:  		/* li R3, 0 */
		/* 8220C4ACh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C4ACh case   13:*/		return 0x8220C4B0;
		  /* 8220C4B0h */ case   14:  		/* bl -739496 */
		/* 8220C4B0h case   14:*/		regs.LR = 0x8220C4B4; return 0x82157C08;
		/* 8220C4B0h case   14:*/		return 0x8220C4B4;
	}
	return 0x8220C4B4;
} // Block from 8220C478h-8220C4B4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220C4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C4B4);
		  /* 8220C4B4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220C4B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220C4B4h case    0:*/		return 0x8220C4B8;
		  /* 8220C4B8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C4B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C4D8;  }
		/* 8220C4B8h case    1:*/		return 0x8220C4BC;
		  /* 8220C4BCh */ case    2:  		/* lis R11, -32252 */
		/* 8220C4BCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C4BCh case    2:*/		return 0x8220C4C0;
		  /* 8220C4C0h */ case    3:  		/* mr R6, R24 */
		/* 8220C4C0h case    3:*/		regs.R6 = regs.R24;
		/* 8220C4C0h case    3:*/		return 0x8220C4C4;
		  /* 8220C4C4h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220C4C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220C4C4h case    4:*/		return 0x8220C4C8;
		  /* 8220C4C8h */ case    5:  		/* mr R4, R25 */
		/* 8220C4C8h case    5:*/		regs.R4 = regs.R25;
		/* 8220C4C8h case    5:*/		return 0x8220C4CC;
		  /* 8220C4CCh */ case    6:  		/* li R7, 534 */
		/* 8220C4CCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x216);
		/* 8220C4CCh case    6:*/		return 0x8220C4D0;
		  /* 8220C4D0h */ case    7:  		/* li R3, 0 */
		/* 8220C4D0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C4D0h case    7:*/		return 0x8220C4D4;
		  /* 8220C4D4h */ case    8:  		/* bl -739532 */
		/* 8220C4D4h case    8:*/		regs.LR = 0x8220C4D8; return 0x82157C08;
		/* 8220C4D4h case    8:*/		return 0x8220C4D8;
	}
	return 0x8220C4D8;
} // Block from 8220C4B4h-8220C4D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C4D8);
		  /* 8220C4D8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220C4D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220C4D8h case    0:*/		return 0x8220C4DC;
		  /* 8220C4DCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C4DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C4FC;  }
		/* 8220C4DCh case    1:*/		return 0x8220C4E0;
		  /* 8220C4E0h */ case    2:  		/* lis R11, -32252 */
		/* 8220C4E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C4E0h case    2:*/		return 0x8220C4E4;
		  /* 8220C4E4h */ case    3:  		/* mr R6, R24 */
		/* 8220C4E4h case    3:*/		regs.R6 = regs.R24;
		/* 8220C4E4h case    3:*/		return 0x8220C4E8;
		  /* 8220C4E8h */ case    4:  		/* addi R5, R11, -9948 */
		/* 8220C4E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD924);
		/* 8220C4E8h case    4:*/		return 0x8220C4EC;
		  /* 8220C4ECh */ case    5:  		/* mr R4, R25 */
		/* 8220C4ECh case    5:*/		regs.R4 = regs.R25;
		/* 8220C4ECh case    5:*/		return 0x8220C4F0;
		  /* 8220C4F0h */ case    6:  		/* li R7, 535 */
		/* 8220C4F0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x217);
		/* 8220C4F0h case    6:*/		return 0x8220C4F4;
		  /* 8220C4F4h */ case    7:  		/* li R3, 0 */
		/* 8220C4F4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C4F4h case    7:*/		return 0x8220C4F8;
		  /* 8220C4F8h */ case    8:  		/* bl -739568 */
		/* 8220C4F8h case    8:*/		regs.LR = 0x8220C4FC; return 0x82157C08;
		/* 8220C4F8h case    8:*/		return 0x8220C4FC;
	}
	return 0x8220C4FC;
} // Block from 8220C4D8h-8220C4FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C4FC);
		  /* 8220C4FCh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220C4FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220C4FCh case    0:*/		return 0x8220C500;
		  /* 8220C500h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C500h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C520;  }
		/* 8220C500h case    1:*/		return 0x8220C504;
		  /* 8220C504h */ case    2:  		/* lis R11, -32252 */
		/* 8220C504h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C504h case    2:*/		return 0x8220C508;
		  /* 8220C508h */ case    3:  		/* mr R6, R24 */
		/* 8220C508h case    3:*/		regs.R6 = regs.R24;
		/* 8220C508h case    3:*/		return 0x8220C50C;
		  /* 8220C50Ch */ case    4:  		/* addi R5, R11, -9968 */
		/* 8220C50Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD910);
		/* 8220C50Ch case    4:*/		return 0x8220C510;
		  /* 8220C510h */ case    5:  		/* mr R4, R25 */
		/* 8220C510h case    5:*/		regs.R4 = regs.R25;
		/* 8220C510h case    5:*/		return 0x8220C514;
		  /* 8220C514h */ case    6:  		/* li R7, 536 */
		/* 8220C514h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x218);
		/* 8220C514h case    6:*/		return 0x8220C518;
		  /* 8220C518h */ case    7:  		/* li R3, 0 */
		/* 8220C518h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C518h case    7:*/		return 0x8220C51C;
		  /* 8220C51Ch */ case    8:  		/* bl -739604 */
		/* 8220C51Ch case    8:*/		regs.LR = 0x8220C520; return 0x82157C08;
		/* 8220C51Ch case    8:*/		return 0x8220C520;
	}
	return 0x8220C520;
} // Block from 8220C4FCh-8220C520h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C520h
// Function '?OLF_AcquireList@XGRAPHICS@@YAPAU_KEY_LIST@1@PAU_ORDERED_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C520);
		  /* 8220C520h */ case    0:  		/* li R4, 24 */
		/* 8220C520h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220C520h case    0:*/		return 0x8220C524;
		  /* 8220C524h */ case    1:  		/* mtspr CTR, R30 */
		/* 8220C524h case    1:*/		regs.CTR = regs.R30;
		/* 8220C524h case    1:*/		return 0x8220C528;
		  /* 8220C528h */ case    2:  		/* mr R3, R29 */
		/* 8220C528h case    2:*/		regs.R3 = regs.R29;
		/* 8220C528h case    2:*/		return 0x8220C52C;
		  /* 8220C52Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220C52Ch case    3:*/		if ( 1 ) { regs.LR = 0x8220C530; return (uint32)regs.CTR; }
		/* 8220C52Ch case    3:*/		return 0x8220C530;
		  /* 8220C530h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220C530h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220C530h case    4:*/		return 0x8220C534;
		  /* 8220C534h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8220C534h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220C558;  }
		/* 8220C534h case    5:*/		return 0x8220C538;
		  /* 8220C538h */ case    6:  		/* lis R11, -32252 */
		/* 8220C538h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C538h case    6:*/		return 0x8220C53C;
		  /* 8220C53Ch */ case    7:  		/* mr R6, R24 */
		/* 8220C53Ch case    7:*/		regs.R6 = regs.R24;
		/* 8220C53Ch case    7:*/		return 0x8220C540;
		  /* 8220C540h */ case    8:  		/* addi R5, R11, -9980 */
		/* 8220C540h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD904);
		/* 8220C540h case    8:*/		return 0x8220C544;
		  /* 8220C544h */ case    9:  		/* mr R4, R25 */
		/* 8220C544h case    9:*/		regs.R4 = regs.R25;
		/* 8220C544h case    9:*/		return 0x8220C548;
		  /* 8220C548h */ case   10:  		/* li R7, 543 */
		/* 8220C548h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x21F);
		/* 8220C548h case   10:*/		return 0x8220C54C;
		  /* 8220C54Ch */ case   11:  		/* li R3, 0 */
		/* 8220C54Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C54Ch case   11:*/		return 0x8220C550;
		  /* 8220C550h */ case   12:  		/* bl -739656 */
		/* 8220C550h case   12:*/		regs.LR = 0x8220C554; return 0x82157C08;
		/* 8220C550h case   12:*/		return 0x8220C554;
		  /* 8220C554h */ case   13:  		/* b 152 */
		/* 8220C554h case   13:*/		return 0x8220C5EC;
		/* 8220C554h case   13:*/		return 0x8220C558;
	}
	return 0x8220C558;
} // Block from 8220C520h-8220C558h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220C558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C558);
		  /* 8220C558h */ case    0:  		/* li R11, 0 */
		/* 8220C558h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C558h case    0:*/		return 0x8220C55C;
		  /* 8220C55Ch */ case    1:  		/* stw R29, <#[R31]> */
		/* 8220C55Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8220C55Ch case    1:*/		return 0x8220C560;
		  /* 8220C560h */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8220C560h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220C560h case    2:*/		return 0x8220C564;
		  /* 8220C564h */ case    3:  		/* mr R6, R27 */
		/* 8220C564h case    3:*/		regs.R6 = regs.R27;
		/* 8220C564h case    3:*/		return 0x8220C568;
		  /* 8220C568h */ case    4:  		/* stw R28, <#[R31 + 8]> */
		/* 8220C568h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 8220C568h case    4:*/		return 0x8220C56C;
		  /* 8220C56Ch */ case    5:  		/* mr R5, R28 */
		/* 8220C56Ch case    5:*/		regs.R5 = regs.R28;
		/* 8220C56Ch case    5:*/		return 0x8220C570;
		  /* 8220C570h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 8220C570h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C570h case    6:*/		return 0x8220C574;
		  /* 8220C574h */ case    7:  		/* mr R4, R30 */
		/* 8220C574h case    7:*/		regs.R4 = regs.R30;
		/* 8220C574h case    7:*/		return 0x8220C578;
		  /* 8220C578h */ case    8:  		/* mr R3, R29 */
		/* 8220C578h case    8:*/		regs.R3 = regs.R29;
		/* 8220C578h case    8:*/		return 0x8220C57C;
		  /* 8220C57Ch */ case    9:  		/* bl -718644 */
		/* 8220C57Ch case    9:*/		regs.LR = 0x8220C580; return 0x8215CE48;
		/* 8220C57Ch case    9:*/		return 0x8220C580;
		  /* 8220C580h */ case   10:  		/* stw R3, <#[R31 + 16]> */
		/* 8220C580h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C580h case   10:*/		return 0x8220C584;
		  /* 8220C584h */ case   11:  		/* mr R6, R26 */
		/* 8220C584h case   11:*/		regs.R6 = regs.R26;
		/* 8220C584h case   11:*/		return 0x8220C588;
		  /* 8220C588h */ case   12:  		/* mr R5, R28 */
		/* 8220C588h case   12:*/		regs.R5 = regs.R28;
		/* 8220C588h case   12:*/		return 0x8220C58C;
		  /* 8220C58Ch */ case   13:  		/* mr R4, R30 */
		/* 8220C58Ch case   13:*/		regs.R4 = regs.R30;
		/* 8220C58Ch case   13:*/		return 0x8220C590;
		  /* 8220C590h */ case   14:  		/* mr R3, R29 */
		/* 8220C590h case   14:*/		regs.R3 = regs.R29;
		/* 8220C590h case   14:*/		return 0x8220C594;
		  /* 8220C594h */ case   15:  		/* bl -718556 */
		/* 8220C594h case   15:*/		regs.LR = 0x8220C598; return 0x8215CEB8;
		/* 8220C594h case   15:*/		return 0x8220C598;
		  /* 8220C598h */ case   16:  		/* stw R3, <#[R31 + 20]> */
		/* 8220C598h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220C598h case   16:*/		return 0x8220C59C;
		  /* 8220C59Ch */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 8220C59Ch case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220C59Ch case   17:*/		return 0x8220C5A0;
		  /* 8220C5A0h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8220C5A0h case   18:*/		if ( regs.CR[0].eq ) { return 0x8220C5B0;  }
		/* 8220C5A0h case   18:*/		return 0x8220C5A4;
		  /* 8220C5A4h */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C5A4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C5A4h case   19:*/		return 0x8220C5A8;
		  /* 8220C5A8h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 8220C5A8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C5A8h case   20:*/		return 0x8220C5AC;
		  /* 8220C5ACh */ case   21:  		/* bc 4, CR6_EQ, 64 */
		/* 8220C5ACh case   21:*/		if ( !regs.CR[6].eq ) { return 0x8220C5EC;  }
		/* 8220C5ACh case   21:*/		return 0x8220C5B0;
	}
	return 0x8220C5B0;
} // Block from 8220C558h-8220C5B0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5B0);
		  /* 8220C5B0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8220C5B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220C5B0h case    0:*/		return 0x8220C5B4;
		  /* 8220C5B4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8220C5B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C5C4;  }
		/* 8220C5B4h case    1:*/		return 0x8220C5B8;
		  /* 8220C5B8h */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220C5B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C5B8h case    2:*/		return 0x8220C5BC;
		  /* 8220C5BCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8220C5BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220C5BCh case    3:*/		return 0x8220C5C0;
		  /* 8220C5C0h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C5C0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220C5E0;  }
		/* 8220C5C0h case    4:*/		return 0x8220C5C4;
	}
	return 0x8220C5C4;
} // Block from 8220C5B0h-8220C5C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5C4);
		  /* 8220C5C4h */ case    0:  		/* lis R11, -32252 */
		/* 8220C5C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C5C4h case    0:*/		return 0x8220C5C8;
	}
	return 0x8220C5C8;
} // Block from 8220C5C4h-8220C5C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5C8h
// Function '?OLF_ReleaseList@XGRAPHICS@@YAXPAU_ORDERED_LIST_FACTORY@1@PAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5C8);
		  /* 8220C5C8h */ case    0:  		/* mr R6, R24 */
		/* 8220C5C8h case    0:*/		regs.R6 = regs.R24;
		/* 8220C5C8h case    0:*/		return 0x8220C5CC;
		  /* 8220C5CCh */ case    1:  		/* addi R5, R11, -10036 */
		/* 8220C5CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD8CC);
		/* 8220C5CCh case    1:*/		return 0x8220C5D0;
		  /* 8220C5D0h */ case    2:  		/* mr R4, R25 */
		/* 8220C5D0h case    2:*/		regs.R4 = regs.R25;
		/* 8220C5D0h case    2:*/		return 0x8220C5D4;
		  /* 8220C5D4h */ case    3:  		/* li R7, 570 */
		/* 8220C5D4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x23A);
		/* 8220C5D4h case    3:*/		return 0x8220C5D8;
		  /* 8220C5D8h */ case    4:  		/* li R3, 0 */
		/* 8220C5D8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C5D8h case    4:*/		return 0x8220C5DC;
		  /* 8220C5DCh */ case    5:  		/* bl -739796 */
		/* 8220C5DCh case    5:*/		regs.LR = 0x8220C5E0; return 0x82157C08;
		/* 8220C5DCh case    5:*/		return 0x8220C5E0;
	}
	return 0x8220C5E0;
} // Block from 8220C5C8h-8220C5E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5E0);
		  /* 8220C5E0h */ case    0:  		/* mr R3, R31 */
		/* 8220C5E0h case    0:*/		regs.R3 = regs.R31;
		/* 8220C5E0h case    0:*/		return 0x8220C5E4;
		  /* 8220C5E4h */ case    1:  		/* bl -1780 */
		/* 8220C5E4h case    1:*/		regs.LR = 0x8220C5E8; return 0x8220BEF0;
		/* 8220C5E4h case    1:*/		return 0x8220C5E8;
		  /* 8220C5E8h */ case    2:  		/* li R31, 0 */
		/* 8220C5E8h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220C5E8h case    2:*/		return 0x8220C5EC;
	}
	return 0x8220C5EC;
} // Block from 8220C5E0h-8220C5ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5EC);
		  /* 8220C5ECh */ case    0:  		/* mr R3, R31 */
		/* 8220C5ECh case    0:*/		regs.R3 = regs.R31;
		/* 8220C5ECh case    0:*/		return 0x8220C5F0;
		  /* 8220C5F0h */ case    1:  		/* addi R1, R1, 160 */
		/* 8220C5F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220C5F0h case    1:*/		return 0x8220C5F4;
		  /* 8220C5F4h */ case    2:  		/* b -1553244 */
		/* 8220C5F4h case    2:*/		return 0x82091298;
		/* 8220C5F4h case    2:*/		return 0x8220C5F8;
	}
	return 0x8220C5F8;
} // Block from 8220C5ECh-8220C5F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C5F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C5F8);
		  /* 8220C5F8h */ case    0:  		/* mfspr R12, LR */
		/* 8220C5F8h case    0:*/		regs.R12 = regs.LR;
		/* 8220C5F8h case    0:*/		return 0x8220C5FC;
		  /* 8220C5FCh */ case    1:  		/* bl -1553336 */
		/* 8220C5FCh case    1:*/		regs.LR = 0x8220C600; return 0x82091244;
		/* 8220C5FCh case    1:*/		return 0x8220C600;
		  /* 8220C600h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220C600h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220C600h case    2:*/		return 0x8220C604;
		  /* 8220C604h */ case    3:  		/* lis R11, -32253 */
		/* 8220C604h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C604h case    3:*/		return 0x8220C608;
		  /* 8220C608h */ case    4:  		/* lis R10, -32252 */
		/* 8220C608h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C608h case    4:*/		return 0x8220C60C;
		  /* 8220C60Ch */ case    5:  		/* mr R28, R3 */
		/* 8220C60Ch case    5:*/		regs.R28 = regs.R3;
		/* 8220C60Ch case    5:*/		return 0x8220C610;
		  /* 8220C610h */ case    6:  		/* mr R30, R4 */
		/* 8220C610h case    6:*/		regs.R30 = regs.R4;
		/* 8220C610h case    6:*/		return 0x8220C614;
		  /* 8220C614h */ case    7:  		/* mr R27, R5 */
		/* 8220C614h case    7:*/		regs.R27 = regs.R5;
		/* 8220C614h case    7:*/		return 0x8220C618;
		  /* 8220C618h */ case    8:  		/* mr R26, R6 */
		/* 8220C618h case    8:*/		regs.R26 = regs.R6;
		/* 8220C618h case    8:*/		return 0x8220C61C;
		  /* 8220C61Ch */ case    9:  		/* mr R29, R7 */
		/* 8220C61Ch case    9:*/		regs.R29 = regs.R7;
		/* 8220C61Ch case    9:*/		return 0x8220C620;
		  /* 8220C620h */ case   10:  		/* mr R25, R8 */
		/* 8220C620h case   10:*/		regs.R25 = regs.R8;
		/* 8220C620h case   10:*/		return 0x8220C624;
		  /* 8220C624h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 8220C624h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220C624h case   11:*/		return 0x8220C628;
		  /* 8220C628h */ case   12:  		/* addi R24, R11, 27460 */
		/* 8220C628h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 8220C628h case   12:*/		return 0x8220C62C;
		  /* 8220C62Ch */ case   13:  		/* addi R23, R10, -9888 */
		/* 8220C62Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFD960);
		/* 8220C62Ch case   13:*/		return 0x8220C630;
		  /* 8220C630h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C630h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220C650;  }
		/* 8220C630h case   14:*/		return 0x8220C634;
		  /* 8220C634h */ case   15:  		/* lis R11, -32252 */
		/* 8220C634h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C634h case   15:*/		return 0x8220C638;
		  /* 8220C638h */ case   16:  		/* mr R6, R23 */
		/* 8220C638h case   16:*/		regs.R6 = regs.R23;
		/* 8220C638h case   16:*/		return 0x8220C63C;
		  /* 8220C63Ch */ case   17:  		/* addi R5, R11, -21620 */
		/* 8220C63Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220C63Ch case   17:*/		return 0x8220C640;
		  /* 8220C640h */ case   18:  		/* mr R4, R24 */
		/* 8220C640h case   18:*/		regs.R4 = regs.R24;
		/* 8220C640h case   18:*/		return 0x8220C644;
		  /* 8220C644h */ case   19:  		/* li R7, 154 */
		/* 8220C644h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x9A);
		/* 8220C644h case   19:*/		return 0x8220C648;
		  /* 8220C648h */ case   20:  		/* li R3, 0 */
		/* 8220C648h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C648h case   20:*/		return 0x8220C64C;
		  /* 8220C64Ch */ case   21:  		/* bl -739908 */
		/* 8220C64Ch case   21:*/		regs.LR = 0x8220C650; return 0x82157C08;
		/* 8220C64Ch case   21:*/		return 0x8220C650;
	}
	return 0x8220C650;
} // Block from 8220C5F8h-8220C650h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220C650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C650);
		  /* 8220C650h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220C650h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220C650h case    0:*/		return 0x8220C654;
		  /* 8220C654h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C654h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C674;  }
		/* 8220C654h case    1:*/		return 0x8220C658;
		  /* 8220C658h */ case    2:  		/* lis R11, -32252 */
		/* 8220C658h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C658h case    2:*/		return 0x8220C65C;
		  /* 8220C65Ch */ case    3:  		/* mr R6, R23 */
		/* 8220C65Ch case    3:*/		regs.R6 = regs.R23;
		/* 8220C65Ch case    3:*/		return 0x8220C660;
		  /* 8220C660h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220C660h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220C660h case    4:*/		return 0x8220C664;
		  /* 8220C664h */ case    5:  		/* mr R4, R24 */
		/* 8220C664h case    5:*/		regs.R4 = regs.R24;
		/* 8220C664h case    5:*/		return 0x8220C668;
		  /* 8220C668h */ case    6:  		/* li R7, 155 */
		/* 8220C668h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9B);
		/* 8220C668h case    6:*/		return 0x8220C66C;
		  /* 8220C66Ch */ case    7:  		/* li R3, 0 */
		/* 8220C66Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C66Ch case    7:*/		return 0x8220C670;
		  /* 8220C670h */ case    8:  		/* bl -739944 */
		/* 8220C670h case    8:*/		regs.LR = 0x8220C674; return 0x82157C08;
		/* 8220C670h case    8:*/		return 0x8220C674;
	}
	return 0x8220C674;
} // Block from 8220C650h-8220C674h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C674);
		  /* 8220C674h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220C674h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220C674h case    0:*/		return 0x8220C678;
		  /* 8220C678h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C678h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C698;  }
		/* 8220C678h case    1:*/		return 0x8220C67C;
		  /* 8220C67Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220C67Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C67Ch case    2:*/		return 0x8220C680;
		  /* 8220C680h */ case    3:  		/* mr R6, R23 */
		/* 8220C680h case    3:*/		regs.R6 = regs.R23;
		/* 8220C680h case    3:*/		return 0x8220C684;
		  /* 8220C684h */ case    4:  		/* addi R5, R11, -21104 */
		/* 8220C684h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 8220C684h case    4:*/		return 0x8220C688;
		  /* 8220C688h */ case    5:  		/* mr R4, R24 */
		/* 8220C688h case    5:*/		regs.R4 = regs.R24;
		/* 8220C688h case    5:*/		return 0x8220C68C;
		  /* 8220C68Ch */ case    6:  		/* li R7, 156 */
		/* 8220C68Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9C);
		/* 8220C68Ch case    6:*/		return 0x8220C690;
		  /* 8220C690h */ case    7:  		/* li R3, 0 */
		/* 8220C690h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C690h case    7:*/		return 0x8220C694;
		  /* 8220C694h */ case    8:  		/* bl -739980 */
		/* 8220C694h case    8:*/		regs.LR = 0x8220C698; return 0x82157C08;
		/* 8220C694h case    8:*/		return 0x8220C698;
	}
	return 0x8220C698;
} // Block from 8220C674h-8220C698h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C698);
		  /* 8220C698h */ case    0:  		/* li R4, 1192 */
		/* 8220C698h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4A8);
		/* 8220C698h case    0:*/		return 0x8220C69C;
		  /* 8220C69Ch */ case    1:  		/* mtspr CTR, R30 */
		/* 8220C69Ch case    1:*/		regs.CTR = regs.R30;
		/* 8220C69Ch case    1:*/		return 0x8220C6A0;
		  /* 8220C6A0h */ case    2:  		/* mr R3, R28 */
		/* 8220C6A0h case    2:*/		regs.R3 = regs.R28;
		/* 8220C6A0h case    2:*/		return 0x8220C6A4;
		  /* 8220C6A4h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220C6A4h case    3:*/		if ( 1 ) { regs.LR = 0x8220C6A8; return (uint32)regs.CTR; }
		/* 8220C6A4h case    3:*/		return 0x8220C6A8;
		  /* 8220C6A8h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220C6A8h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220C6A8h case    4:*/		return 0x8220C6AC;
		  /* 8220C6ACh */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 8220C6ACh case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220C6D4;  }
		/* 8220C6ACh case    5:*/		return 0x8220C6B0;
		  /* 8220C6B0h */ case    6:  		/* lis R11, -32252 */
		/* 8220C6B0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C6B0h case    6:*/		return 0x8220C6B4;
		  /* 8220C6B4h */ case    7:  		/* mr R6, R23 */
		/* 8220C6B4h case    7:*/		regs.R6 = regs.R23;
		/* 8220C6B4h case    7:*/		return 0x8220C6B8;
		  /* 8220C6B8h */ case    8:  		/* addi R5, R11, -9900 */
		/* 8220C6B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD954);
		/* 8220C6B8h case    8:*/		return 0x8220C6BC;
		  /* 8220C6BCh */ case    9:  		/* mr R4, R24 */
		/* 8220C6BCh case    9:*/		regs.R4 = regs.R24;
		/* 8220C6BCh case    9:*/		return 0x8220C6C0;
		  /* 8220C6C0h */ case   10:  		/* li R7, 162 */
		/* 8220C6C0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xA2);
		/* 8220C6C0h case   10:*/		return 0x8220C6C4;
		  /* 8220C6C4h */ case   11:  		/* li R3, 0 */
		/* 8220C6C4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C6C4h case   11:*/		return 0x8220C6C8;
	}
	return 0x8220C6C8;
} // Block from 8220C698h-8220C6C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220C6C8h
// Function '?ILF_Destroy@XGRAPHICS@@YAXPAU_INTEGER_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C6C8);
		  /* 8220C6C8h */ case    0:  		/* bl -740032 */
		/* 8220C6C8h case    0:*/		regs.LR = 0x8220C6CC; return 0x82157C08;
		/* 8220C6C8h case    0:*/		return 0x8220C6CC;
		  /* 8220C6CCh */ case    1:  		/* li R3, 0 */
		/* 8220C6CCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C6CCh case    1:*/		return 0x8220C6D0;
		  /* 8220C6D0h */ case    2:  		/* b 112 */
		/* 8220C6D0h case    2:*/		return 0x8220C740;
		/* 8220C6D0h case    2:*/		return 0x8220C6D4;
	}
	return 0x8220C6D4;
} // Block from 8220C6C8h-8220C6D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C6D4);
		  /* 8220C6D4h */ case    0:  		/* stw R28, <#[R31]> */
		/* 8220C6D4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8220C6D4h case    0:*/		return 0x8220C6D8;
		  /* 8220C6D8h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 8220C6D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8220C6D8h case    1:*/		return 0x8220C6DC;
		  /* 8220C6DCh */ case    2:  		/* li R28, -1 */
		/* 8220C6DCh case    2:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 8220C6DCh case    2:*/		return 0x8220C6E0;
		  /* 8220C6E0h */ case    3:  		/* stw R30, <#[R31 + 4]> */
		/* 8220C6E0h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220C6E0h case    3:*/		return 0x8220C6E4;
		  /* 8220C6E4h */ case    4:  		/* stw R27, <#[R31 + 8]> */
		/* 8220C6E4h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000008) );
		/* 8220C6E4h case    4:*/		return 0x8220C6E8;
		  /* 8220C6E8h */ case    5:  		/* stw R26, <#[R31 + 12]> */
		/* 8220C6E8h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220C6E8h case    5:*/		return 0x8220C6EC;
		  /* 8220C6ECh */ case    6:  		/* stw R29, <#[R31 + 16]> */
		/* 8220C6ECh case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000010) );
		/* 8220C6ECh case    6:*/		return 0x8220C6F0;
		  /* 8220C6F0h */ case    7:  		/* stw R25, <#[R31 + 20]> */
		/* 8220C6F0h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 8220C6F0h case    7:*/		return 0x8220C6F4;
		  /* 8220C6F4h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 8220C6F4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8220C700;  }
		/* 8220C6F4h case    8:*/		return 0x8220C6F8;
		  /* 8220C6F8h */ case    9:  		/* stw R28, <#[R31 + 1176]> */
		/* 8220C6F8h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000498) );
		/* 8220C6F8h case    9:*/		return 0x8220C6FC;
		  /* 8220C6FCh */ case   10:  		/* b 48 */
		/* 8220C6FCh case   10:*/		return 0x8220C72C;
		/* 8220C6FCh case   10:*/		return 0x8220C700;
	}
	return 0x8220C700;
} // Block from 8220C6D4h-8220C700h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220C700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C700);
		  /* 8220C700h */ case    0:  		/* cmpwi CR6, R29, 1 */
		/* 8220C700h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 8220C700h case    0:*/		return 0x8220C704;
		  /* 8220C704h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220C704h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C724;  }
		/* 8220C704h case    1:*/		return 0x8220C708;
		  /* 8220C708h */ case    2:  		/* lis R11, -32252 */
		/* 8220C708h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C708h case    2:*/		return 0x8220C70C;
		  /* 8220C70Ch */ case    3:  		/* mr R6, R23 */
		/* 8220C70Ch case    3:*/		regs.R6 = regs.R23;
		/* 8220C70Ch case    3:*/		return 0x8220C710;
		  /* 8220C710h */ case    4:  		/* addi R5, R11, -9928 */
		/* 8220C710h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD938);
		/* 8220C710h case    4:*/		return 0x8220C714;
		  /* 8220C714h */ case    5:  		/* mr R4, R24 */
		/* 8220C714h case    5:*/		regs.R4 = regs.R24;
		/* 8220C714h case    5:*/		return 0x8220C718;
		  /* 8220C718h */ case    6:  		/* li R7, 186 */
		/* 8220C718h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xBA);
		/* 8220C718h case    6:*/		return 0x8220C71C;
		  /* 8220C71Ch */ case    7:  		/* li R3, 0 */
		/* 8220C71Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C71Ch case    7:*/		return 0x8220C720;
		  /* 8220C720h */ case    8:  		/* bl -740120 */
		/* 8220C720h case    8:*/		regs.LR = 0x8220C724; return 0x82157C08;
		/* 8220C720h case    8:*/		return 0x8220C724;
	}
	return 0x8220C724;
} // Block from 8220C700h-8220C724h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C724);
		  /* 8220C724h */ case    0:  		/* li R11, 32 */
		/* 8220C724h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8220C724h case    0:*/		return 0x8220C728;
		  /* 8220C728h */ case    1:  		/* stw R11, <#[R31 + 1176]> */
		/* 8220C728h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000498) );
		/* 8220C728h case    1:*/		return 0x8220C72C;
	}
	return 0x8220C72C;
} // Block from 8220C724h-8220C72Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C72C);
		  /* 8220C72Ch */ case    0:  		/* li R11, 0 */
		/* 8220C72Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C72Ch case    0:*/		return 0x8220C730;
		  /* 8220C730h */ case    1:  		/* stw R28, <#[R31 + 1180]> */
		/* 8220C730h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000049C) );
		/* 8220C730h case    1:*/		return 0x8220C734;
		  /* 8220C734h */ case    2:  		/* mr R3, R31 */
		/* 8220C734h case    2:*/		regs.R3 = regs.R31;
		/* 8220C734h case    2:*/		return 0x8220C738;
		  /* 8220C738h */ case    3:  		/* stw R11, <#[R31 + 1184]> */
		/* 8220C738h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000004A0) );
		/* 8220C738h case    3:*/		return 0x8220C73C;
		  /* 8220C73Ch */ case    4:  		/* stw R11, <#[R31 + 1188]> */
		/* 8220C73Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000004A4) );
		/* 8220C73Ch case    4:*/		return 0x8220C740;
	}
	return 0x8220C740;
} // Block from 8220C72Ch-8220C740h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220C740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C740);
		  /* 8220C740h */ case    0:  		/* addi R1, R1, 160 */
		/* 8220C740h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220C740h case    0:*/		return 0x8220C744;
		  /* 8220C744h */ case    1:  		/* b -1553584 */
		/* 8220C744h case    1:*/		return 0x82091294;
		/* 8220C744h case    1:*/		return 0x8220C748;
	}
	return 0x8220C748;
} // Block from 8220C740h-8220C748h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C748h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C748);
		  /* 8220C748h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8220C748h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220C748h case    0:*/		return 0x8220C74C;
		  /* 8220C74Ch */ case    1:  		/* mr R4, R3 */
		/* 8220C74Ch case    1:*/		regs.R4 = regs.R3;
		/* 8220C74Ch case    1:*/		return 0x8220C750;
		  /* 8220C750h */ case    2:  		/* lwz R3, <#[R3]> */
		/* 8220C750h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220C750h case    2:*/		return 0x8220C754;
		  /* 8220C754h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220C754h case    3:*/		regs.CTR = regs.R11;
		/* 8220C754h case    3:*/		return 0x8220C758;
		  /* 8220C758h */ case    4:  		/* bcctr 20, CR0_LT */
		/* 8220C758h case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8220C758h case    4:*/		return 0x8220C75C;
		  /* 8220C75Ch */ case    5:  		/* nop */
		/* 8220C75Ch case    5:*/		cpu::op::nop();
		/* 8220C75Ch case    5:*/		return 0x8220C760;
		  /* 8220C760h */ case    6:  		/* lwz R3, <#[R3 + 1188]> */
		/* 8220C760h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000004A4) );
		/* 8220C760h case    6:*/		return 0x8220C764;
		  /* 8220C764h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8220C764h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220C764h case    7:*/		return 0x8220C768;
	}
	return 0x8220C768;
} // Block from 8220C748h-8220C768h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220C768h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C768);
		  /* 8220C768h */ case    0:  		/* mfspr R12, LR */
		/* 8220C768h case    0:*/		regs.R12 = regs.LR;
		/* 8220C768h case    0:*/		return 0x8220C76C;
		  /* 8220C76Ch */ case    1:  		/* bl -1553696 */
		/* 8220C76Ch case    1:*/		regs.LR = 0x8220C770; return 0x8209124C;
		/* 8220C76Ch case    1:*/		return 0x8220C770;
	}
	return 0x8220C770;
} // Block from 8220C768h-8220C770h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220C770h
// Function '?ILF_AcquireList@XGRAPHICS@@YAPAU_INTEGER_LIST@1@PAU_INTEGER_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C770);
		  /* 8220C770h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220C770h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220C770h case    0:*/		return 0x8220C774;
		  /* 8220C774h */ case    1:  		/* lis R11, -32253 */
		/* 8220C774h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220C774h case    1:*/		return 0x8220C778;
		  /* 8220C778h */ case    2:  		/* lis R10, -32252 */
		/* 8220C778h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220C778h case    2:*/		return 0x8220C77C;
		  /* 8220C77Ch */ case    3:  		/* mr R29, R3 */
		/* 8220C77Ch case    3:*/		regs.R29 = regs.R3;
		/* 8220C77Ch case    3:*/		return 0x8220C780;
		  /* 8220C780h */ case    4:  		/* mr R28, R4 */
		/* 8220C780h case    4:*/		regs.R28 = regs.R4;
		/* 8220C780h case    4:*/		return 0x8220C784;
		  /* 8220C784h */ case    5:  		/* mr R27, R5 */
		/* 8220C784h case    5:*/		regs.R27 = regs.R5;
		/* 8220C784h case    5:*/		return 0x8220C788;
		  /* 8220C788h */ case    6:  		/* mr R26, R6 */
		/* 8220C788h case    6:*/		regs.R26 = regs.R6;
		/* 8220C788h case    6:*/		return 0x8220C78C;
		  /* 8220C78Ch */ case    7:  		/* mr R25, R7 */
		/* 8220C78Ch case    7:*/		regs.R25 = regs.R7;
		/* 8220C78Ch case    7:*/		return 0x8220C790;
		  /* 8220C790h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220C790h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220C790h case    8:*/		return 0x8220C794;
		  /* 8220C794h */ case    9:  		/* addi R31, R11, 27460 */
		/* 8220C794h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8220C794h case    9:*/		return 0x8220C798;
		  /* 8220C798h */ case   10:  		/* addi R30, R10, -9888 */
		/* 8220C798h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFD960);
		/* 8220C798h case   10:*/		return 0x8220C79C;
		  /* 8220C79Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C79Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220C7BC;  }
		/* 8220C79Ch case   11:*/		return 0x8220C7A0;
		  /* 8220C7A0h */ case   12:  		/* lis R11, -32252 */
		/* 8220C7A0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C7A0h case   12:*/		return 0x8220C7A4;
		  /* 8220C7A4h */ case   13:  		/* mr R6, R30 */
		/* 8220C7A4h case   13:*/		regs.R6 = regs.R30;
		/* 8220C7A4h case   13:*/		return 0x8220C7A8;
		  /* 8220C7A8h */ case   14:  		/* addi R5, R11, -9900 */
		/* 8220C7A8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD954);
		/* 8220C7A8h case   14:*/		return 0x8220C7AC;
		  /* 8220C7ACh */ case   15:  		/* mr R4, R31 */
		/* 8220C7ACh case   15:*/		regs.R4 = regs.R31;
		/* 8220C7ACh case   15:*/		return 0x8220C7B0;
		  /* 8220C7B0h */ case   16:  		/* li R7, 394 */
		/* 8220C7B0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x18A);
		/* 8220C7B0h case   16:*/		return 0x8220C7B4;
		  /* 8220C7B4h */ case   17:  		/* li R3, 0 */
		/* 8220C7B4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C7B4h case   17:*/		return 0x8220C7B8;
		  /* 8220C7B8h */ case   18:  		/* bl -740272 */
		/* 8220C7B8h case   18:*/		regs.LR = 0x8220C7BC; return 0x82157C08;
		/* 8220C7B8h case   18:*/		return 0x8220C7BC;
	}
	return 0x8220C7BC;
} // Block from 8220C770h-8220C7BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220C7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C7BC);
		  /* 8220C7BCh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220C7BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220C7BCh case    0:*/		return 0x8220C7C0;
		  /* 8220C7C0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C7C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C7E0;  }
		/* 8220C7C0h case    1:*/		return 0x8220C7C4;
		  /* 8220C7C4h */ case    2:  		/* lis R11, -32252 */
		/* 8220C7C4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C7C4h case    2:*/		return 0x8220C7C8;
		  /* 8220C7C8h */ case    3:  		/* mr R6, R30 */
		/* 8220C7C8h case    3:*/		regs.R6 = regs.R30;
		/* 8220C7C8h case    3:*/		return 0x8220C7CC;
		  /* 8220C7CCh */ case    4:  		/* addi R5, R11, -9588 */
		/* 8220C7CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA8C);
		/* 8220C7CCh case    4:*/		return 0x8220C7D0;
		  /* 8220C7D0h */ case    5:  		/* mr R4, R31 */
		/* 8220C7D0h case    5:*/		regs.R4 = regs.R31;
		/* 8220C7D0h case    5:*/		return 0x8220C7D4;
		  /* 8220C7D4h */ case    6:  		/* li R7, 395 */
		/* 8220C7D4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x18B);
		/* 8220C7D4h case    6:*/		return 0x8220C7D8;
		  /* 8220C7D8h */ case    7:  		/* li R3, 0 */
		/* 8220C7D8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C7D8h case    7:*/		return 0x8220C7DC;
		  /* 8220C7DCh */ case    8:  		/* bl -740308 */
		/* 8220C7DCh case    8:*/		regs.LR = 0x8220C7E0; return 0x82157C08;
		/* 8220C7DCh case    8:*/		return 0x8220C7E0;
	}
	return 0x8220C7E0;
} // Block from 8220C7BCh-8220C7E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C7E0);
		  /* 8220C7E0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220C7E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220C7E0h case    0:*/		return 0x8220C7E4;
		  /* 8220C7E4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C7E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C804;  }
		/* 8220C7E4h case    1:*/		return 0x8220C7E8;
		  /* 8220C7E8h */ case    2:  		/* lis R11, -32252 */
		/* 8220C7E8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C7E8h case    2:*/		return 0x8220C7EC;
		  /* 8220C7ECh */ case    3:  		/* mr R6, R30 */
		/* 8220C7ECh case    3:*/		regs.R6 = regs.R30;
		/* 8220C7ECh case    3:*/		return 0x8220C7F0;
		  /* 8220C7F0h */ case    4:  		/* addi R5, R11, -9600 */
		/* 8220C7F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA80);
		/* 8220C7F0h case    4:*/		return 0x8220C7F4;
		  /* 8220C7F4h */ case    5:  		/* mr R4, R31 */
		/* 8220C7F4h case    5:*/		regs.R4 = regs.R31;
		/* 8220C7F4h case    5:*/		return 0x8220C7F8;
		  /* 8220C7F8h */ case    6:  		/* li R7, 396 */
		/* 8220C7F8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x18C);
		/* 8220C7F8h case    6:*/		return 0x8220C7FC;
		  /* 8220C7FCh */ case    7:  		/* li R3, 0 */
		/* 8220C7FCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C7FCh case    7:*/		return 0x8220C800;
		  /* 8220C800h */ case    8:  		/* bl -740344 */
		/* 8220C800h case    8:*/		regs.LR = 0x8220C804; return 0x82157C08;
		/* 8220C800h case    8:*/		return 0x8220C804;
	}
	return 0x8220C804;
} // Block from 8220C7E0h-8220C804h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C804);
		  /* 8220C804h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 8220C804h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8220C804h case    0:*/		return 0x8220C808;
	}
	return 0x8220C808;
} // Block from 8220C804h-8220C808h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220C808h
// Function '?ILF_ReleaseList@XGRAPHICS@@YAXPAU_INTEGER_LIST_FACTORY@1@PAU_INTEGER_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C808);
		  /* 8220C808h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8220C808h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8220C808h case    0:*/		return 0x8220C80C;
		  /* 8220C80Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C80Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220C82C;  }
		/* 8220C80Ch case    1:*/		return 0x8220C810;
		  /* 8220C810h */ case    2:  		/* lis R11, -32252 */
		/* 8220C810h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C810h case    2:*/		return 0x8220C814;
		  /* 8220C814h */ case    3:  		/* mr R6, R30 */
		/* 8220C814h case    3:*/		regs.R6 = regs.R30;
		/* 8220C814h case    3:*/		return 0x8220C818;
		  /* 8220C818h */ case    4:  		/* addi R5, R11, -9632 */
		/* 8220C818h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA60);
		/* 8220C818h case    4:*/		return 0x8220C81C;
		  /* 8220C81Ch */ case    5:  		/* mr R4, R31 */
		/* 8220C81Ch case    5:*/		regs.R4 = regs.R31;
		/* 8220C81Ch case    5:*/		return 0x8220C820;
		  /* 8220C820h */ case    6:  		/* li R7, 397 */
		/* 8220C820h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x18D);
		/* 8220C820h case    6:*/		return 0x8220C824;
		  /* 8220C824h */ case    7:  		/* li R3, 0 */
		/* 8220C824h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C824h case    7:*/		return 0x8220C828;
		  /* 8220C828h */ case    8:  		/* bl -740384 */
		/* 8220C828h case    8:*/		regs.LR = 0x8220C82C; return 0x82157C08;
		/* 8220C828h case    8:*/		return 0x8220C82C;
	}
	return 0x8220C82C;
} // Block from 8220C808h-8220C82Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C82C);
		  /* 8220C82Ch */ case    0:  		/* cmpwi CR6, R28, 3 */
		/* 8220C82Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000003);
		/* 8220C82Ch case    0:*/		return 0x8220C830;
		  /* 8220C830h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8220C830h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C83C;  }
		/* 8220C830h case    1:*/		return 0x8220C834;
		  /* 8220C834h */ case    2:  		/* cmpwi CR6, R28, 2 */
		/* 8220C834h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000002);
		/* 8220C834h case    2:*/		return 0x8220C838;
		  /* 8220C838h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 8220C838h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8220C858;  }
		/* 8220C838h case    3:*/		return 0x8220C83C;
	}
	return 0x8220C83C;
} // Block from 8220C82Ch-8220C83Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220C83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C83C);
		  /* 8220C83Ch */ case    0:  		/* lis R11, -32252 */
		/* 8220C83Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C83Ch case    0:*/		return 0x8220C840;
		  /* 8220C840h */ case    1:  		/* mr R6, R30 */
		/* 8220C840h case    1:*/		regs.R6 = regs.R30;
		/* 8220C840h case    1:*/		return 0x8220C844;
		  /* 8220C844h */ case    2:  		/* addi R5, R11, -9712 */
		/* 8220C844h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA10);
		/* 8220C844h case    2:*/		return 0x8220C848;
		  /* 8220C848h */ case    3:  		/* mr R4, R31 */
		/* 8220C848h case    3:*/		regs.R4 = regs.R31;
		/* 8220C848h case    3:*/		return 0x8220C84C;
		  /* 8220C84Ch */ case    4:  		/* li R7, 400 */
		/* 8220C84Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x190);
		/* 8220C84Ch case    4:*/		return 0x8220C850;
		  /* 8220C850h */ case    5:  		/* li R3, 0 */
		/* 8220C850h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C850h case    5:*/		return 0x8220C854;
		  /* 8220C854h */ case    6:  		/* bl -740428 */
		/* 8220C854h case    6:*/		regs.LR = 0x8220C858; return 0x82157C08;
		/* 8220C854h case    6:*/		return 0x8220C858;
	}
	return 0x8220C858;
} // Block from 8220C83Ch-8220C858h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220C858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C858);
		  /* 8220C858h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 8220C858h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8220C858h case    0:*/		return 0x8220C85C;
		  /* 8220C85Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8220C85Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220C85Ch case    1:*/		return 0x8220C860;
		  /* 8220C860h */ case    2:  		/* bc 4, CR6_EQ, 76 */
		/* 8220C860h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220C8AC;  }
		/* 8220C860h case    2:*/		return 0x8220C864;
		  /* 8220C864h */ case    3:  		/* cmpwi CR6, R28, 1 */
		/* 8220C864h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 8220C864h case    3:*/		return 0x8220C868;
		  /* 8220C868h */ case    4:  		/* bc 4, CR6_EQ, 52 */
		/* 8220C868h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220C89C;  }
		/* 8220C868h case    4:*/		return 0x8220C86C;
		  /* 8220C86Ch */ case    5:  		/* cmplwi CR6, R27, 96 */
		/* 8220C86Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000060);
		/* 8220C86Ch case    5:*/		return 0x8220C870;
		  /* 8220C870h */ case    6:  		/* bc 12, CR6_LT, 12 */
		/* 8220C870h case    6:*/		if ( regs.CR[6].lt ) { return 0x8220C87C;  }
		/* 8220C870h case    6:*/		return 0x8220C874;
		  /* 8220C874h */ case    7:  		/* li R3, 1 */
		/* 8220C874h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220C874h case    7:*/		return 0x8220C878;
		  /* 8220C878h */ case    8:  		/* b 148 */
		/* 8220C878h case    8:*/		return 0x8220C90C;
		/* 8220C878h case    8:*/		return 0x8220C87C;
	}
	return 0x8220C87C;
} // Block from 8220C858h-8220C87Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C87C);
		  /* 8220C87Ch */ case    0:  		/* subfic R11, R27, 95 */
		/* 8220C87Ch case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R27,0x5F);
		/* 8220C87Ch case    0:*/		return 0x8220C880;
		  /* 8220C880h */ case    1:  		/* li R10, 3 */
		/* 8220C880h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8220C880h case    1:*/		return 0x8220C884;
		  /* 8220C884h */ case    2:  		/* divwu R9, R11, R10 */
		/* 8220C884h case    2:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8220C884h case    2:*/		return 0x8220C888;
		  /* 8220C888h */ case    3:  		/* divwu R10, R11, R10 */
		/* 8220C888h case    3:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8220C888h case    3:*/		return 0x8220C88C;
		  /* 8220C88Ch */ case    4:  		/* mulli R9, R9, 3 */
		/* 8220C88Ch case    4:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x3);
		/* 8220C88Ch case    4:*/		return 0x8220C890;
		  /* 8220C890h */ case    5:  		/* stw R10, <#[R26]> */
		/* 8220C890h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8220C890h case    5:*/		return 0x8220C894;
		  /* 8220C894h */ case    6:  		/* subf R11, R9, R11 */
		/* 8220C894h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220C894h case    6:*/		return 0x8220C898;
		  /* 8220C898h */ case    7:  		/* b 108 */
		/* 8220C898h case    7:*/		return 0x8220C904;
		/* 8220C898h case    7:*/		return 0x8220C89C;
	}
	return 0x8220C89C;
} // Block from 8220C87Ch-8220C89Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220C89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C89C);
		  /* 8220C89Ch */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 8220C89Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8220C89Ch case    0:*/		return 0x8220C8A0;
		  /* 8220C8A0h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8220C8A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C8F4;  }
		/* 8220C8A0h case    1:*/		return 0x8220C8A4;
		  /* 8220C8A4h */ case    2:  		/* li R7, 419 */
		/* 8220C8A4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1A3);
		/* 8220C8A4h case    2:*/		return 0x8220C8A8;
		  /* 8220C8A8h */ case    3:  		/* b 52 */
		/* 8220C8A8h case    3:*/		return 0x8220C8DC;
		/* 8220C8A8h case    3:*/		return 0x8220C8AC;
	}
	return 0x8220C8AC;
} // Block from 8220C89Ch-8220C8ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220C8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C8AC);
		  /* 8220C8ACh */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8220C8ACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220C8ACh case    0:*/		return 0x8220C8B0;
		  /* 8220C8B0h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220C8B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C8D0;  }
		/* 8220C8B0h case    1:*/		return 0x8220C8B4;
		  /* 8220C8B4h */ case    2:  		/* lis R11, -32252 */
		/* 8220C8B4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C8B4h case    2:*/		return 0x8220C8B8;
		  /* 8220C8B8h */ case    3:  		/* mr R6, R30 */
		/* 8220C8B8h case    3:*/		regs.R6 = regs.R30;
		/* 8220C8B8h case    3:*/		return 0x8220C8BC;
		  /* 8220C8BCh */ case    4:  		/* addi R5, R11, -9744 */
		/* 8220C8BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD9F0);
		/* 8220C8BCh case    4:*/		return 0x8220C8C0;
		  /* 8220C8C0h */ case    5:  		/* mr R4, R31 */
		/* 8220C8C0h case    5:*/		regs.R4 = regs.R31;
		/* 8220C8C0h case    5:*/		return 0x8220C8C4;
		  /* 8220C8C4h */ case    6:  		/* li R7, 431 */
		/* 8220C8C4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1AF);
		/* 8220C8C4h case    6:*/		return 0x8220C8C8;
		  /* 8220C8C8h */ case    7:  		/* li R3, 0 */
		/* 8220C8C8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C8C8h case    7:*/		return 0x8220C8CC;
		  /* 8220C8CCh */ case    8:  		/* bl -740548 */
		/* 8220C8CCh case    8:*/		regs.LR = 0x8220C8D0; return 0x82157C08;
		/* 8220C8CCh case    8:*/		return 0x8220C8D0;
	}
	return 0x8220C8D0;
} // Block from 8220C8ACh-8220C8D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C8D0);
		  /* 8220C8D0h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 8220C8D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8220C8D0h case    0:*/		return 0x8220C8D4;
		  /* 8220C8D4h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220C8D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C8F4;  }
		/* 8220C8D4h case    1:*/		return 0x8220C8D8;
		  /* 8220C8D8h */ case    2:  		/* li R7, 432 */
		/* 8220C8D8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1B0);
		/* 8220C8D8h case    2:*/		return 0x8220C8DC;
	}
	return 0x8220C8DC;
} // Block from 8220C8D0h-8220C8DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C8DC);
		  /* 8220C8DCh */ case    0:  		/* lis R11, -32252 */
		/* 8220C8DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C8DCh case    0:*/		return 0x8220C8E0;
		  /* 8220C8E0h */ case    1:  		/* mr R6, R30 */
		/* 8220C8E0h case    1:*/		regs.R6 = regs.R30;
		/* 8220C8E0h case    1:*/		return 0x8220C8E4;
		  /* 8220C8E4h */ case    2:  		/* addi R5, R11, -9776 */
		/* 8220C8E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD9D0);
		/* 8220C8E4h case    2:*/		return 0x8220C8E8;
		  /* 8220C8E8h */ case    3:  		/* mr R4, R31 */
		/* 8220C8E8h case    3:*/		regs.R4 = regs.R31;
		/* 8220C8E8h case    3:*/		return 0x8220C8EC;
		  /* 8220C8ECh */ case    4:  		/* li R3, 0 */
		/* 8220C8ECh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C8ECh case    4:*/		return 0x8220C8F0;
		  /* 8220C8F0h */ case    5:  		/* bl -740584 */
		/* 8220C8F0h case    5:*/		regs.LR = 0x8220C8F4; return 0x82157C08;
		/* 8220C8F0h case    5:*/		return 0x8220C8F4;
	}
	return 0x8220C8F4;
} // Block from 8220C8DCh-8220C8F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220C8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C8F4);
		  /* 8220C8F4h */ case    0:  		/* cmplwi CR6, R27, 32 */
		/* 8220C8F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000020);
		/* 8220C8F4h case    0:*/		return 0x8220C8F8;
		  /* 8220C8F8h */ case    1:  		/* bc 4, CR6_LT, -132 */
		/* 8220C8F8h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8220C874;  }
		/* 8220C8F8h case    1:*/		return 0x8220C8FC;
		  /* 8220C8FCh */ case    2:  		/* stw R27, <#[R26]> */
		/* 8220C8FCh case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 8220C8FCh case    2:*/		return 0x8220C900;
		  /* 8220C900h */ case    3:  		/* li R11, 0 */
		/* 8220C900h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C900h case    3:*/		return 0x8220C904;
	}
	return 0x8220C904;
} // Block from 8220C8F4h-8220C904h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220C904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C904);
		  /* 8220C904h */ case    0:  		/* stw R11, <#[R25]> */
		/* 8220C904h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8220C904h case    0:*/		return 0x8220C908;
	}
	return 0x8220C908;
} // Block from 8220C904h-8220C908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220C908h
// Function '?OBJLF_Destroy@XGRAPHICS@@YAXPAU_OBJECT_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C908);
		  /* 8220C908h */ case    0:  		/* li R3, 0 */
		/* 8220C908h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C908h case    0:*/		return 0x8220C90C;
	}
	return 0x8220C90C;
} // Block from 8220C908h-8220C90Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220C90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C90C);
		  /* 8220C90Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8220C90Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220C90Ch case    0:*/		return 0x8220C910;
		  /* 8220C910h */ case    1:  		/* b -1554036 */
		/* 8220C910h case    1:*/		return 0x8209129C;
		/* 8220C910h case    1:*/		return 0x8220C914;
		  /* 8220C914h */ case    2:  		/* nop */
		/* 8220C914h case    2:*/		cpu::op::nop();
		/* 8220C914h case    2:*/		return 0x8220C918;
	}
	return 0x8220C918;
} // Block from 8220C90Ch-8220C918h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C918);
		  /* 8220C918h */ case    0:  		/* mfspr R12, LR */
		/* 8220C918h case    0:*/		regs.R12 = regs.LR;
		/* 8220C918h case    0:*/		return 0x8220C91C;
		  /* 8220C91Ch */ case    1:  		/* bl -1554140 */
		/* 8220C91Ch case    1:*/		regs.LR = 0x8220C920; return 0x82091240;
		/* 8220C91Ch case    1:*/		return 0x8220C920;
		  /* 8220C920h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220C920h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220C920h case    2:*/		return 0x8220C924;
		  /* 8220C924h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8220C924h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8220C924h case    3:*/		return 0x8220C928;
		  /* 8220C928h */ case    4:  		/* lis R10, -32253 */
		/* 8220C928h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220C928h case    4:*/		return 0x8220C92C;
		  /* 8220C92Ch */ case    5:  		/* lis R9, -32252 */
		/* 8220C92Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220C92Ch case    5:*/		return 0x8220C930;
		  /* 8220C930h */ case    6:  		/* mr R31, R3 */
		/* 8220C930h case    6:*/		regs.R31 = regs.R3;
		/* 8220C930h case    6:*/		return 0x8220C934;
		  /* 8220C934h */ case    7:  		/* mr R25, R4 */
		/* 8220C934h case    7:*/		regs.R25 = regs.R4;
		/* 8220C934h case    7:*/		return 0x8220C938;
		  /* 8220C938h */ case    8:  		/* mr R24, R5 */
		/* 8220C938h case    8:*/		regs.R24 = regs.R5;
		/* 8220C938h case    8:*/		return 0x8220C93C;
		  /* 8220C93Ch */ case    9:  		/* mr R23, R6 */
		/* 8220C93Ch case    9:*/		regs.R23 = regs.R6;
		/* 8220C93Ch case    9:*/		return 0x8220C940;
		  /* 8220C940h */ case   10:  		/* mr R22, R7 */
		/* 8220C940h case   10:*/		regs.R22 = regs.R7;
		/* 8220C940h case   10:*/		return 0x8220C944;
		  /* 8220C944h */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 8220C944h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220C944h case   11:*/		return 0x8220C948;
		  /* 8220C948h */ case   12:  		/* addi R27, R10, 27460 */
		/* 8220C948h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6B44);
		/* 8220C948h case   12:*/		return 0x8220C94C;
		  /* 8220C94Ch */ case   13:  		/* addi R26, R9, -9888 */
		/* 8220C94Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFFD960);
		/* 8220C94Ch case   13:*/		return 0x8220C950;
		  /* 8220C950h */ case   14:  		/* bc 4, CR6_EQ, 16 */
		/* 8220C950h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220C960;  }
		/* 8220C950h case   14:*/		return 0x8220C954;
		  /* 8220C954h */ case   15:  		/* lwz R29, <#[R3 + 1188]> */
		/* 8220C954h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x000004A4) );
		/* 8220C954h case   15:*/		return 0x8220C958;
		  /* 8220C958h */ case   16:  		/* li R11, 0 */
		/* 8220C958h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220C958h case   16:*/		return 0x8220C95C;
		  /* 8220C95Ch */ case   17:  		/* b 52 */
		/* 8220C95Ch case   17:*/		return 0x8220C990;
		/* 8220C95Ch case   17:*/		return 0x8220C960;
	}
	return 0x8220C960;
} // Block from 8220C918h-8220C960h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220C960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C960);
		  /* 8220C960h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8220C960h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220C960h case    0:*/		return 0x8220C964;
		  /* 8220C964h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220C964h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220C984;  }
		/* 8220C964h case    1:*/		return 0x8220C968;
		  /* 8220C968h */ case    2:  		/* lis R11, -32252 */
		/* 8220C968h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C968h case    2:*/		return 0x8220C96C;
		  /* 8220C96Ch */ case    3:  		/* mr R6, R26 */
		/* 8220C96Ch case    3:*/		regs.R6 = regs.R26;
		/* 8220C96Ch case    3:*/		return 0x8220C970;
		  /* 8220C970h */ case    4:  		/* addi R5, R11, -9744 */
		/* 8220C970h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD9F0);
		/* 8220C970h case    4:*/		return 0x8220C974;
		  /* 8220C974h */ case    5:  		/* mr R4, R27 */
		/* 8220C974h case    5:*/		regs.R4 = regs.R27;
		/* 8220C974h case    5:*/		return 0x8220C978;
		  /* 8220C978h */ case    6:  		/* li R7, 666 */
		/* 8220C978h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x29A);
		/* 8220C978h case    6:*/		return 0x8220C97C;
		  /* 8220C97Ch */ case    7:  		/* li R3, 0 */
		/* 8220C97Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C97Ch case    7:*/		return 0x8220C980;
		  /* 8220C980h */ case    8:  		/* bl -740728 */
		/* 8220C980h case    8:*/		regs.LR = 0x8220C984; return 0x82157C08;
		/* 8220C980h case    8:*/		return 0x8220C984;
	}
	return 0x8220C984;
} // Block from 8220C960h-8220C984h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C984);
		  /* 8220C984h */ case    0:  		/* lwz R11, <#[R31 + 1188]> */
		/* 8220C984h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000004A4) );
		/* 8220C984h case    0:*/		return 0x8220C988;
		  /* 8220C988h */ case    1:  		/* li R29, 32 */
		/* 8220C988h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x20);
		/* 8220C988h case    1:*/		return 0x8220C98C;
		  /* 8220C98Ch */ case    2:  		/* subfic R11, R11, 32 */
		/* 8220C98Ch case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8220C98Ch case    2:*/		return 0x8220C990;
	}
	return 0x8220C990;
} // Block from 8220C984h-8220C990h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220C990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C990);
		  /* 8220C990h */ case    0:  		/* mr R30, R11 */
		/* 8220C990h case    0:*/		regs.R30 = regs.R11;
		/* 8220C990h case    0:*/		return 0x8220C994;
		  /* 8220C994h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 8220C994h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8220C994h case    1:*/		return 0x8220C998;
		  /* 8220C998h */ case    2:  		/* bc 4, CR6_LT, 148 */
		/* 8220C998h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8220CA2C;  }
		/* 8220C998h case    2:*/		return 0x8220C99C;
		  /* 8220C99Ch */ case    3:  		/* mulli R11, R11, 36 */
		/* 8220C99Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8220C99Ch case    3:*/		return 0x8220C9A0;
		  /* 8220C9A0h */ case    4:  		/* add R11, R11, R31 */
		/* 8220C9A0h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8220C9A0h case    4:*/		return 0x8220C9A4;
		  /* 8220C9A4h */ case    5:  		/* addi R31, R11, 32 */
		/* 8220C9A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x20);
		/* 8220C9A4h case    5:*/		return 0x8220C9A8;
		  /* 8220C9A8h */ case    6:  		/* lis R11, -32252 */
		/* 8220C9A8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220C9A8h case    6:*/		return 0x8220C9AC;
		  /* 8220C9ACh */ case    7:  		/* addi R28, R11, -9576 */
		/* 8220C9ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFDA98);
		/* 8220C9ACh case    7:*/		return 0x8220C9B0;
	}
	return 0x8220C9B0;
} // Block from 8220C990h-8220C9B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220C9B0h
// Function '?OBJLF_AcquireList@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAU_OBJECT_LIST_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C9B0);
		  /* 8220C9B0h */ case    0:  		/* lwz R11, <#[R31 - 8]> */
		/* 8220C9B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFF8) );
		/* 8220C9B0h case    0:*/		return 0x8220C9B4;
		  /* 8220C9B4h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220C9B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220C9B4h case    1:*/		return 0x8220C9B8;
		  /* 8220C9B8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8220C9B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220C9D4;  }
		/* 8220C9B8h case    2:*/		return 0x8220C9BC;
		  /* 8220C9BCh */ case    3:  		/* mr R6, R26 */
		/* 8220C9BCh case    3:*/		regs.R6 = regs.R26;
		/* 8220C9BCh case    3:*/		return 0x8220C9C0;
		  /* 8220C9C0h */ case    4:  		/* mr R5, R28 */
		/* 8220C9C0h case    4:*/		regs.R5 = regs.R28;
		/* 8220C9C0h case    4:*/		return 0x8220C9C4;
		  /* 8220C9C4h */ case    5:  		/* mr R4, R27 */
		/* 8220C9C4h case    5:*/		regs.R4 = regs.R27;
		/* 8220C9C4h case    5:*/		return 0x8220C9C8;
		  /* 8220C9C8h */ case    6:  		/* li R7, 674 */
		/* 8220C9C8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2A2);
		/* 8220C9C8h case    6:*/		return 0x8220C9CC;
		  /* 8220C9CCh */ case    7:  		/* li R3, 0 */
		/* 8220C9CCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220C9CCh case    7:*/		return 0x8220C9D0;
		  /* 8220C9D0h */ case    8:  		/* bl -740808 */
		/* 8220C9D0h case    8:*/		regs.LR = 0x8220C9D4; return 0x82157C08;
		/* 8220C9D0h case    8:*/		return 0x8220C9D4;
	}
	return 0x8220C9D4;
} // Block from 8220C9B0h-8220C9D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220C9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220C9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220C9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220C9D4);
		  /* 8220C9D4h */ case    0:  		/* lwz R11, <#[R31 - 4]> */
		/* 8220C9D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8220C9D4h case    0:*/		return 0x8220C9D8;
		  /* 8220C9D8h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8220C9D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220C9D8h case    1:*/		return 0x8220C9DC;
		  /* 8220C9DCh */ case    2:  		/* bc 4, CR6_EQ, 64 */
		/* 8220C9DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220CA1C;  }
		/* 8220C9DCh case    2:*/		return 0x8220C9E0;
		  /* 8220C9E0h */ case    3:  		/* lwz R9, <#[R31]> */
		/* 8220C9E0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8220C9E0h case    3:*/		return 0x8220C9E4;
		  /* 8220C9E4h */ case    4:  		/* li R10, 0 */
		/* 8220C9E4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8220C9E4h case    4:*/		return 0x8220C9E8;
		  /* 8220C9E8h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 8220C9E8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8220C9E8h case    5:*/		return 0x8220C9EC;
		  /* 8220C9ECh */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 8220C9ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x8220CA1C;  }
		/* 8220C9ECh case    6:*/		return 0x8220C9F0;
		  /* 8220C9F0h */ case    7:  		/* addi R11, R31, 16 */
		/* 8220C9F0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x10);
		/* 8220C9F0h case    7:*/		return 0x8220C9F4;
		  /* 8220C9F4h */ case    8:  		/* lwz R8, <#[R11 - 12]> */
		/* 8220C9F4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFF4) );
		/* 8220C9F4h case    8:*/		return 0x8220C9F8;
		  /* 8220C9F8h */ case    9:  		/* cmpw CR6, R8, R25 */
		/* 8220C9F8h case    9:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R25);
		/* 8220C9F8h case    9:*/		return 0x8220C9FC;
		  /* 8220C9FCh */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 8220C9FCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220CA0C;  }
		/* 8220C9FCh case   10:*/		return 0x8220CA00;
		  /* 8220CA00h */ case   11:  		/* lwz R8, <#[R11]> */
		/* 8220CA00h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8220CA00h case   11:*/		return 0x8220CA04;
		  /* 8220CA04h */ case   12:  		/* cmplw CR6, R8, R24 */
		/* 8220CA04h case   12:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R24);
		/* 8220CA04h case   12:*/		return 0x8220CA08;
		  /* 8220CA08h */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 8220CA08h case   13:*/		if ( regs.CR[6].eq ) { return 0x8220CA38;  }
		/* 8220CA08h case   13:*/		return 0x8220CA0C;
	}
	return 0x8220CA0C;
} // Block from 8220C9D4h-8220CA0Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA0C);
		  /* 8220CA0Ch */ case    0:  		/* addi R10, R10, 1 */
		/* 8220CA0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8220CA0Ch case    0:*/		return 0x8220CA10;
		  /* 8220CA10h */ case    1:  		/* addi R11, R11, 4 */
		/* 8220CA10h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8220CA10h case    1:*/		return 0x8220CA14;
		  /* 8220CA14h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 8220CA14h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8220CA14h case    2:*/		return 0x8220CA18;
		  /* 8220CA18h */ case    3:  		/* bc 12, CR6_LT, -36 */
		/* 8220CA18h case    3:*/		if ( regs.CR[6].lt ) { return 0x8220C9F4;  }
		/* 8220CA18h case    3:*/		return 0x8220CA1C;
	}
	return 0x8220CA1C;
} // Block from 8220CA0Ch-8220CA1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA1C);
		  /* 8220CA1Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 8220CA1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220CA1Ch case    0:*/		return 0x8220CA20;
		  /* 8220CA20h */ case    1:  		/* addi R31, R31, 36 */
		/* 8220CA20h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x24);
		/* 8220CA20h case    1:*/		return 0x8220CA24;
		  /* 8220CA24h */ case    2:  		/* cmplw CR6, R30, R29 */
		/* 8220CA24h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8220CA24h case    2:*/		return 0x8220CA28;
		  /* 8220CA28h */ case    3:  		/* bc 12, CR6_LT, -120 */
		/* 8220CA28h case    3:*/		if ( regs.CR[6].lt ) { return 0x8220C9B0;  }
		/* 8220CA28h case    3:*/		return 0x8220CA2C;
	}
	return 0x8220CA2C;
} // Block from 8220CA1Ch-8220CA2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA2C);
		  /* 8220CA2Ch */ case    0:  		/* li R3, 0 */
		/* 8220CA2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CA2Ch case    0:*/		return 0x8220CA30;
		  /* 8220CA30h */ case    1:  		/* addi R1, R1, 176 */
		/* 8220CA30h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8220CA30h case    1:*/		return 0x8220CA34;
		  /* 8220CA34h */ case    2:  		/* b -1554340 */
		/* 8220CA34h case    2:*/		return 0x82091290;
		/* 8220CA34h case    2:*/		return 0x8220CA38;
	}
	return 0x8220CA38;
} // Block from 8220CA2Ch-8220CA38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA38);
		  /* 8220CA38h */ case    0:  		/* stw R30, <#[R23]> */
		/* 8220CA38h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x00000000) );
		/* 8220CA38h case    0:*/		return 0x8220CA3C;
		  /* 8220CA3Ch */ case    1:  		/* li R3, 1 */
		/* 8220CA3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220CA3Ch case    1:*/		return 0x8220CA40;
		  /* 8220CA40h */ case    2:  		/* stw R10, <#[R22]> */
		/* 8220CA40h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R22 + 0x00000000) );
		/* 8220CA40h case    2:*/		return 0x8220CA44;
		  /* 8220CA44h */ case    3:  		/* b -20 */
		/* 8220CA44h case    3:*/		return 0x8220CA30;
		/* 8220CA44h case    3:*/		return 0x8220CA48;
	}
	return 0x8220CA48;
} // Block from 8220CA38h-8220CA48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA48h
// Function '?OBJLF_ReleaseList@XGRAPHICS@@YAXPAU_OBJECT_LIST_FACTORY@1@PAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA48);
		  /* 8220CA48h */ case    0:  		/* mfspr R12, LR */
		/* 8220CA48h case    0:*/		regs.R12 = regs.LR;
		/* 8220CA48h case    0:*/		return 0x8220CA4C;
		  /* 8220CA4Ch */ case    1:  		/* bl -1554444 */
		/* 8220CA4Ch case    1:*/		regs.LR = 0x8220CA50; return 0x82091240;
		/* 8220CA4Ch case    1:*/		return 0x8220CA50;
		  /* 8220CA50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220CA50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220CA50h case    2:*/		return 0x8220CA54;
		  /* 8220CA54h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8220CA54h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8220CA54h case    3:*/		return 0x8220CA58;
		  /* 8220CA58h */ case    4:  		/* lis R10, -32253 */
		/* 8220CA58h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220CA58h case    4:*/		return 0x8220CA5C;
		  /* 8220CA5Ch */ case    5:  		/* lis R9, -32252 */
		/* 8220CA5Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220CA5Ch case    5:*/		return 0x8220CA60;
		  /* 8220CA60h */ case    6:  		/* mr R31, R3 */
		/* 8220CA60h case    6:*/		regs.R31 = regs.R3;
		/* 8220CA60h case    6:*/		return 0x8220CA64;
		  /* 8220CA64h */ case    7:  		/* mr R25, R4 */
		/* 8220CA64h case    7:*/		regs.R25 = regs.R4;
		/* 8220CA64h case    7:*/		return 0x8220CA68;
		  /* 8220CA68h */ case    8:  		/* mr R24, R5 */
		/* 8220CA68h case    8:*/		regs.R24 = regs.R5;
		/* 8220CA68h case    8:*/		return 0x8220CA6C;
		  /* 8220CA6Ch */ case    9:  		/* mr R23, R6 */
		/* 8220CA6Ch case    9:*/		regs.R23 = regs.R6;
		/* 8220CA6Ch case    9:*/		return 0x8220CA70;
		  /* 8220CA70h */ case   10:  		/* mr R22, R7 */
		/* 8220CA70h case   10:*/		regs.R22 = regs.R7;
		/* 8220CA70h case   10:*/		return 0x8220CA74;
		  /* 8220CA74h */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 8220CA74h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220CA74h case   11:*/		return 0x8220CA78;
		  /* 8220CA78h */ case   12:  		/* addi R27, R10, 27460 */
		/* 8220CA78h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6B44);
		/* 8220CA78h case   12:*/		return 0x8220CA7C;
		  /* 8220CA7Ch */ case   13:  		/* addi R26, R9, -9888 */
		/* 8220CA7Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFFD960);
		/* 8220CA7Ch case   13:*/		return 0x8220CA80;
		  /* 8220CA80h */ case   14:  		/* bc 4, CR6_EQ, 16 */
		/* 8220CA80h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220CA90;  }
		/* 8220CA80h case   14:*/		return 0x8220CA84;
		  /* 8220CA84h */ case   15:  		/* lwz R28, <#[R3 + 1188]> */
		/* 8220CA84h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x000004A4) );
		/* 8220CA84h case   15:*/		return 0x8220CA88;
		  /* 8220CA88h */ case   16:  		/* li R11, 0 */
		/* 8220CA88h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220CA88h case   16:*/		return 0x8220CA8C;
		  /* 8220CA8Ch */ case   17:  		/* b 52 */
		/* 8220CA8Ch case   17:*/		return 0x8220CAC0;
		/* 8220CA8Ch case   17:*/		return 0x8220CA90;
	}
	return 0x8220CA90;
} // Block from 8220CA48h-8220CA90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220CA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CA90);
		  /* 8220CA90h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8220CA90h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220CA90h case    0:*/		return 0x8220CA94;
		  /* 8220CA94h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220CA94h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220CAB4;  }
		/* 8220CA94h case    1:*/		return 0x8220CA98;
		  /* 8220CA98h */ case    2:  		/* lis R11, -32252 */
		/* 8220CA98h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CA98h case    2:*/		return 0x8220CA9C;
		  /* 8220CA9Ch */ case    3:  		/* mr R6, R26 */
		/* 8220CA9Ch case    3:*/		regs.R6 = regs.R26;
		/* 8220CA9Ch case    3:*/		return 0x8220CAA0;
		  /* 8220CAA0h */ case    4:  		/* addi R5, R11, -9744 */
		/* 8220CAA0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD9F0);
		/* 8220CAA0h case    4:*/		return 0x8220CAA4;
		  /* 8220CAA4h */ case    5:  		/* mr R4, R27 */
		/* 8220CAA4h case    5:*/		regs.R4 = regs.R27;
		/* 8220CAA4h case    5:*/		return 0x8220CAA8;
		  /* 8220CAA8h */ case    6:  		/* li R7, 740 */
		/* 8220CAA8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2E4);
		/* 8220CAA8h case    6:*/		return 0x8220CAAC;
		  /* 8220CAACh */ case    7:  		/* li R3, 0 */
		/* 8220CAACh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CAACh case    7:*/		return 0x8220CAB0;
		  /* 8220CAB0h */ case    8:  		/* bl -741032 */
		/* 8220CAB0h case    8:*/		regs.LR = 0x8220CAB4; return 0x82157C08;
		/* 8220CAB0h case    8:*/		return 0x8220CAB4;
	}
	return 0x8220CAB4;
} // Block from 8220CA90h-8220CAB4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CAB4);
		  /* 8220CAB4h */ case    0:  		/* lwz R11, <#[R31 + 1188]> */
		/* 8220CAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000004A4) );
		/* 8220CAB4h case    0:*/		return 0x8220CAB8;
		  /* 8220CAB8h */ case    1:  		/* li R28, 32 */
		/* 8220CAB8h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x20);
		/* 8220CAB8h case    1:*/		return 0x8220CABC;
		  /* 8220CABCh */ case    2:  		/* subfic R11, R11, 32 */
		/* 8220CABCh case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8220CABCh case    2:*/		return 0x8220CAC0;
	}
	return 0x8220CAC0;
} // Block from 8220CAB4h-8220CAC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220CAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CAC0);
		  /* 8220CAC0h */ case    0:  		/* mr R30, R11 */
		/* 8220CAC0h case    0:*/		regs.R30 = regs.R11;
		/* 8220CAC0h case    0:*/		return 0x8220CAC4;
		  /* 8220CAC4h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 8220CAC4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8220CAC4h case    1:*/		return 0x8220CAC8;
		  /* 8220CAC8h */ case    2:  		/* bc 4, CR6_LT, 108 */
		/* 8220CAC8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8220CB34;  }
		/* 8220CAC8h case    2:*/		return 0x8220CACC;
		  /* 8220CACCh */ case    3:  		/* mulli R11, R11, 36 */
		/* 8220CACCh case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8220CACCh case    3:*/		return 0x8220CAD0;
		  /* 8220CAD0h */ case    4:  		/* add R11, R11, R31 */
		/* 8220CAD0h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8220CAD0h case    4:*/		return 0x8220CAD4;
		  /* 8220CAD4h */ case    5:  		/* addi R31, R11, 28 */
		/* 8220CAD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1C);
		/* 8220CAD4h case    5:*/		return 0x8220CAD8;
		  /* 8220CAD8h */ case    6:  		/* lis R11, -32252 */
		/* 8220CAD8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CAD8h case    6:*/		return 0x8220CADC;
		  /* 8220CADCh */ case    7:  		/* addi R29, R11, -9576 */
		/* 8220CADCh case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFDA98);
		/* 8220CADCh case    7:*/		return 0x8220CAE0;
		  /* 8220CAE0h */ case    8:  		/* lwz R11, <#[R31 - 4]> */
		/* 8220CAE0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8220CAE0h case    8:*/		return 0x8220CAE4;
		  /* 8220CAE4h */ case    9:  		/* cmplwi CR6, R11, 1 */
		/* 8220CAE4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220CAE4h case    9:*/		return 0x8220CAE8;
		  /* 8220CAE8h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 8220CAE8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8220CB04;  }
		/* 8220CAE8h case   10:*/		return 0x8220CAEC;
		  /* 8220CAECh */ case   11:  		/* mr R6, R26 */
		/* 8220CAECh case   11:*/		regs.R6 = regs.R26;
		/* 8220CAECh case   11:*/		return 0x8220CAF0;
		  /* 8220CAF0h */ case   12:  		/* mr R5, R29 */
		/* 8220CAF0h case   12:*/		regs.R5 = regs.R29;
		/* 8220CAF0h case   12:*/		return 0x8220CAF4;
		  /* 8220CAF4h */ case   13:  		/* mr R4, R27 */
		/* 8220CAF4h case   13:*/		regs.R4 = regs.R27;
		/* 8220CAF4h case   13:*/		return 0x8220CAF8;
		  /* 8220CAF8h */ case   14:  		/* li R7, 748 */
		/* 8220CAF8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x2EC);
		/* 8220CAF8h case   14:*/		return 0x8220CAFC;
		  /* 8220CAFCh */ case   15:  		/* li R3, 0 */
		/* 8220CAFCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CAFCh case   15:*/		return 0x8220CB00;
		  /* 8220CB00h */ case   16:  		/* bl -741112 */
		/* 8220CB00h case   16:*/		regs.LR = 0x8220CB04; return 0x82157C08;
		/* 8220CB00h case   16:*/		return 0x8220CB04;
	}
	return 0x8220CB04;
} // Block from 8220CAC0h-8220CB04h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB04);
		  /* 8220CB04h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220CB04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220CB04h case    0:*/		return 0x8220CB08;
		  /* 8220CB08h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8220CB08h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220CB08h case    1:*/		return 0x8220CB0C;
		  /* 8220CB0Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8220CB0Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8220CB24;  }
		/* 8220CB0Ch case    2:*/		return 0x8220CB10;
		  /* 8220CB10h */ case    3:  		/* cmpw CR6, R11, R25 */
		/* 8220CB10h case    3:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R25);
		/* 8220CB10h case    3:*/		return 0x8220CB14;
		  /* 8220CB14h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 8220CB14h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220CB24;  }
		/* 8220CB14h case    4:*/		return 0x8220CB18;
		  /* 8220CB18h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220CB18h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220CB18h case    5:*/		return 0x8220CB1C;
		  /* 8220CB1Ch */ case    6:  		/* cmplw CR6, R11, R24 */
		/* 8220CB1Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8220CB1Ch case    6:*/		return 0x8220CB20;
		  /* 8220CB20h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 8220CB20h case    7:*/		if ( regs.CR[6].eq ) { return 0x8220CB40;  }
		/* 8220CB20h case    7:*/		return 0x8220CB24;
	}
	return 0x8220CB24;
} // Block from 8220CB04h-8220CB24h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB24);
		  /* 8220CB24h */ case    0:  		/* addi R30, R30, 1 */
		/* 8220CB24h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220CB24h case    0:*/		return 0x8220CB28;
		  /* 8220CB28h */ case    1:  		/* addi R31, R31, 36 */
		/* 8220CB28h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x24);
		/* 8220CB28h case    1:*/		return 0x8220CB2C;
		  /* 8220CB2Ch */ case    2:  		/* cmplw CR6, R30, R28 */
		/* 8220CB2Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 8220CB2Ch case    2:*/		return 0x8220CB30;
		  /* 8220CB30h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 8220CB30h case    3:*/		if ( regs.CR[6].lt ) { return 0x8220CAE0;  }
		/* 8220CB30h case    3:*/		return 0x8220CB34;
	}
	return 0x8220CB34;
} // Block from 8220CB24h-8220CB34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB34);
		  /* 8220CB34h */ case    0:  		/* li R3, 0 */
		/* 8220CB34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CB34h case    0:*/		return 0x8220CB38;
		  /* 8220CB38h */ case    1:  		/* addi R1, R1, 176 */
		/* 8220CB38h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8220CB38h case    1:*/		return 0x8220CB3C;
		  /* 8220CB3Ch */ case    2:  		/* b -1554604 */
		/* 8220CB3Ch case    2:*/		return 0x82091290;
		/* 8220CB3Ch case    2:*/		return 0x8220CB40;
	}
	return 0x8220CB40;
} // Block from 8220CB34h-8220CB40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB40);
		  /* 8220CB40h */ case    0:  		/* li R11, -1 */
		/* 8220CB40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8220CB40h case    0:*/		return 0x8220CB44;
		  /* 8220CB44h */ case    1:  		/* stw R30, <#[R23]> */
		/* 8220CB44h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x00000000) );
		/* 8220CB44h case    1:*/		return 0x8220CB48;
	}
	return 0x8220CB48;
} // Block from 8220CB40h-8220CB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB48h
// Function '?OLF_Create@XGRAPHICS@@YAPAU_ORDERED_LIST_FACTORY@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB48);
		  /* 8220CB48h */ case    0:  		/* li R3, 1 */
		/* 8220CB48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220CB48h case    0:*/		return 0x8220CB4C;
		  /* 8220CB4Ch */ case    1:  		/* stw R11, <#[R22]> */
		/* 8220CB4Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 8220CB4Ch case    1:*/		return 0x8220CB50;
		  /* 8220CB50h */ case    2:  		/* b -24 */
		/* 8220CB50h case    2:*/		return 0x8220CB38;
		/* 8220CB50h case    2:*/		return 0x8220CB54;
		  /* 8220CB54h */ case    3:  		/* nop */
		/* 8220CB54h case    3:*/		cpu::op::nop();
		/* 8220CB54h case    3:*/		return 0x8220CB58;
	}
	return 0x8220CB58;
} // Block from 8220CB48h-8220CB58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB58);
		  /* 8220CB58h */ case    0:  		/* mfspr R12, LR */
		/* 8220CB58h case    0:*/		regs.R12 = regs.LR;
		/* 8220CB58h case    0:*/		return 0x8220CB5C;
		  /* 8220CB5Ch */ case    1:  		/* bl -1554736 */
		/* 8220CB5Ch case    1:*/		regs.LR = 0x8220CB60; return 0x8209122C;
		/* 8220CB5Ch case    1:*/		return 0x8220CB60;
		  /* 8220CB60h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8220CB60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8220CB60h case    2:*/		return 0x8220CB64;
		  /* 8220CB64h */ case    3:  		/* mr R31, R3 */
		/* 8220CB64h case    3:*/		regs.R31 = regs.R3;
		/* 8220CB64h case    3:*/		return 0x8220CB68;
		  /* 8220CB68h */ case    4:  		/* mr R20, R4 */
		/* 8220CB68h case    4:*/		regs.R20 = regs.R4;
		/* 8220CB68h case    4:*/		return 0x8220CB6C;
		  /* 8220CB6Ch */ case    5:  		/* mr R22, R5 */
		/* 8220CB6Ch case    5:*/		regs.R22 = regs.R5;
		/* 8220CB6Ch case    5:*/		return 0x8220CB70;
		  /* 8220CB70h */ case    6:  		/* mr R19, R6 */
		/* 8220CB70h case    6:*/		regs.R19 = regs.R6;
		/* 8220CB70h case    6:*/		return 0x8220CB74;
		  /* 8220CB74h */ case    7:  		/* mr R18, R7 */
		/* 8220CB74h case    7:*/		regs.R18 = regs.R7;
		/* 8220CB74h case    7:*/		return 0x8220CB78;
		  /* 8220CB78h */ case    8:  		/* mr R17, R8 */
		/* 8220CB78h case    8:*/		regs.R17 = regs.R8;
		/* 8220CB78h case    8:*/		return 0x8220CB7C;
		  /* 8220CB7Ch */ case    9:  		/* li R21, 0 */
		/* 8220CB7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8220CB7Ch case    9:*/		return 0x8220CB80;
		  /* 8220CB80h */ case   10:  		/* cmpwi CR6, R5, 1 */
		/* 8220CB80h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000001);
		/* 8220CB80h case   10:*/		return 0x8220CB84;
		  /* 8220CB84h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 8220CB84h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220CB9C;  }
		/* 8220CB84h case   11:*/		return 0x8220CB88;
		  /* 8220CB88h */ case   12:  		/* mr R5, R6 */
		/* 8220CB88h case   12:*/		regs.R5 = regs.R6;
		/* 8220CB88h case   12:*/		return 0x8220CB8C;
		  /* 8220CB8Ch */ case   13:  		/* li R4, 40 */
		/* 8220CB8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8220CB8Ch case   13:*/		return 0x8220CB90;
		  /* 8220CB90h */ case   14:  		/* mr R3, R20 */
		/* 8220CB90h case   14:*/		regs.R3 = regs.R20;
		/* 8220CB90h case   14:*/		return 0x8220CB94;
		  /* 8220CB94h */ case   15:  		/* bl -717652 */
		/* 8220CB94h case   15:*/		regs.LR = 0x8220CB98; return 0x8215D840;
		/* 8220CB94h case   15:*/		return 0x8220CB98;
		  /* 8220CB98h */ case   16:  		/* mr R21, R3 */
		/* 8220CB98h case   16:*/		regs.R21 = regs.R3;
		/* 8220CB98h case   16:*/		return 0x8220CB9C;
	}
	return 0x8220CB9C;
} // Block from 8220CB58h-8220CB9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220CB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CB9C);
		  /* 8220CB9Ch */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220CB9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220CB9Ch case    0:*/		return 0x8220CBA0;
		  /* 8220CBA0h */ case    1:  		/* lis R10, -32253 */
		/* 8220CBA0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220CBA0h case    1:*/		return 0x8220CBA4;
		  /* 8220CBA4h */ case    2:  		/* lis R9, -32252 */
		/* 8220CBA4h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220CBA4h case    2:*/		return 0x8220CBA8;
		  /* 8220CBA8h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 8220CBA8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220CBA8h case    3:*/		return 0x8220CBAC;
		  /* 8220CBACh */ case    4:  		/* addi R24, R10, 27460 */
		/* 8220CBACh case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x6B44);
		/* 8220CBACh case    4:*/		return 0x8220CBB0;
		  /* 8220CBB0h */ case    5:  		/* addi R23, R9, -9888 */
		/* 8220CBB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0xFFFFD960);
		/* 8220CBB0h case    5:*/		return 0x8220CBB4;
		  /* 8220CBB4h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 8220CBB4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8220CBC4;  }
		/* 8220CBB4h case    6:*/		return 0x8220CBB8;
		  /* 8220CBB8h */ case    7:  		/* lwz R25, <#[R31 + 1188]> */
		/* 8220CBB8h case    7:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x000004A4) );
		/* 8220CBB8h case    7:*/		return 0x8220CBBC;
		  /* 8220CBBCh */ case    8:  		/* li R11, 0 */
		/* 8220CBBCh case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220CBBCh case    8:*/		return 0x8220CBC0;
		  /* 8220CBC0h */ case    9:  		/* b 52 */
		/* 8220CBC0h case    9:*/		return 0x8220CBF4;
		/* 8220CBC0h case    9:*/		return 0x8220CBC4;
	}
	return 0x8220CBC4;
} // Block from 8220CB9Ch-8220CBC4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220CBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CBC4);
		  /* 8220CBC4h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8220CBC4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220CBC4h case    0:*/		return 0x8220CBC8;
		  /* 8220CBC8h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8220CBC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220CBE8;  }
		/* 8220CBC8h case    1:*/		return 0x8220CBCC;
		  /* 8220CBCCh */ case    2:  		/* lis R11, -32252 */
		/* 8220CBCCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CBCCh case    2:*/		return 0x8220CBD0;
		  /* 8220CBD0h */ case    3:  		/* mr R6, R23 */
		/* 8220CBD0h case    3:*/		regs.R6 = regs.R23;
		/* 8220CBD0h case    3:*/		return 0x8220CBD4;
		  /* 8220CBD4h */ case    4:  		/* addi R5, R11, -9744 */
		/* 8220CBD4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD9F0);
		/* 8220CBD4h case    4:*/		return 0x8220CBD8;
		  /* 8220CBD8h */ case    5:  		/* mr R4, R24 */
		/* 8220CBD8h case    5:*/		regs.R4 = regs.R24;
		/* 8220CBD8h case    5:*/		return 0x8220CBDC;
		  /* 8220CBDCh */ case    6:  		/* li R7, 571 */
		/* 8220CBDCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x23B);
		/* 8220CBDCh case    6:*/		return 0x8220CBE0;
		  /* 8220CBE0h */ case    7:  		/* li R3, 0 */
		/* 8220CBE0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CBE0h case    7:*/		return 0x8220CBE4;
		  /* 8220CBE4h */ case    8:  		/* bl -741340 */
		/* 8220CBE4h case    8:*/		regs.LR = 0x8220CBE8; return 0x82157C08;
		/* 8220CBE4h case    8:*/		return 0x8220CBE8;
	}
	return 0x8220CBE8;
} // Block from 8220CBC4h-8220CBE8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CBE8);
		  /* 8220CBE8h */ case    0:  		/* lwz R11, <#[R31 + 1188]> */
		/* 8220CBE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000004A4) );
		/* 8220CBE8h case    0:*/		return 0x8220CBEC;
		  /* 8220CBECh */ case    1:  		/* li R25, 32 */
		/* 8220CBECh case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x20);
		/* 8220CBECh case    1:*/		return 0x8220CBF0;
		  /* 8220CBF0h */ case    2:  		/* subfic R11, R11, 32 */
		/* 8220CBF0h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8220CBF0h case    2:*/		return 0x8220CBF4;
	}
	return 0x8220CBF4;
} // Block from 8220CBE8h-8220CBF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220CBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CBF4);
		  /* 8220CBF4h */ case    0:  		/* mr R28, R11 */
		/* 8220CBF4h case    0:*/		regs.R28 = regs.R11;
		/* 8220CBF4h case    0:*/		return 0x8220CBF8;
		  /* 8220CBF8h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 8220CBF8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8220CBF8h case    1:*/		return 0x8220CBFC;
		  /* 8220CBFCh */ case    2:  		/* bc 4, CR6_LT, 224 */
		/* 8220CBFCh case    2:*/		if ( !regs.CR[6].lt ) { return 0x8220CCDC;  }
		/* 8220CBFCh case    2:*/		return 0x8220CC00;
		  /* 8220CC00h */ case    3:  		/* mulli R11, R11, 36 */
		/* 8220CC00h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8220CC00h case    3:*/		return 0x8220CC04;
		  /* 8220CC04h */ case    4:  		/* add R11, R11, R31 */
		/* 8220CC04h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8220CC04h case    4:*/		return 0x8220CC08;
		  /* 8220CC08h */ case    5:  		/* lis R10, -32252 */
		/* 8220CC08h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220CC08h case    5:*/		return 0x8220CC0C;
		  /* 8220CC0Ch */ case    6:  		/* addi R29, R11, 32 */
		/* 8220CC0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x20);
		/* 8220CC0Ch case    6:*/		return 0x8220CC10;
		  /* 8220CC10h */ case    7:  		/* lis R11, -32252 */
		/* 8220CC10h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CC10h case    7:*/		return 0x8220CC14;
		  /* 8220CC14h */ case    8:  		/* addi R27, R10, -9540 */
		/* 8220CC14h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFDABC);
		/* 8220CC14h case    8:*/		return 0x8220CC18;
		  /* 8220CC18h */ case    9:  		/* addi R26, R11, -9576 */
		/* 8220CC18h case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFDA98);
		/* 8220CC18h case    9:*/		return 0x8220CC1C;
		  /* 8220CC1Ch */ case   10:  		/* lwz R11, <#[R29 - 8]> */
		/* 8220CC1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFFFFF8) );
		/* 8220CC1Ch case   10:*/		return 0x8220CC20;
		  /* 8220CC20h */ case   11:  		/* cmplwi CR6, R11, 1 */
		/* 8220CC20h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220CC20h case   11:*/		return 0x8220CC24;
		  /* 8220CC24h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 8220CC24h case   12:*/		if ( regs.CR[6].eq ) { return 0x8220CC40;  }
		/* 8220CC24h case   12:*/		return 0x8220CC28;
		  /* 8220CC28h */ case   13:  		/* mr R6, R23 */
		/* 8220CC28h case   13:*/		regs.R6 = regs.R23;
		/* 8220CC28h case   13:*/		return 0x8220CC2C;
		  /* 8220CC2Ch */ case   14:  		/* mr R5, R26 */
		/* 8220CC2Ch case   14:*/		regs.R5 = regs.R26;
		/* 8220CC2Ch case   14:*/		return 0x8220CC30;
		  /* 8220CC30h */ case   15:  		/* mr R4, R24 */
		/* 8220CC30h case   15:*/		regs.R4 = regs.R24;
		/* 8220CC30h case   15:*/		return 0x8220CC34;
		  /* 8220CC34h */ case   16:  		/* li R7, 579 */
		/* 8220CC34h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x243);
		/* 8220CC34h case   16:*/		return 0x8220CC38;
		  /* 8220CC38h */ case   17:  		/* li R3, 0 */
		/* 8220CC38h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CC38h case   17:*/		return 0x8220CC3C;
		  /* 8220CC3Ch */ case   18:  		/* bl -741428 */
		/* 8220CC3Ch case   18:*/		regs.LR = 0x8220CC40; return 0x82157C08;
		/* 8220CC3Ch case   18:*/		return 0x8220CC40;
	}
	return 0x8220CC40;
} // Block from 8220CBF4h-8220CC40h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220CC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CC40);
		  /* 8220CC40h */ case    0:  		/* lwz R11, <#[R29 - 4]> */
		/* 8220CC40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFFFFFC) );
		/* 8220CC40h case    0:*/		return 0x8220CC44;
		  /* 8220CC44h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8220CC44h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220CC44h case    1:*/		return 0x8220CC48;
		  /* 8220CC48h */ case    2:  		/* bc 4, CR6_EQ, 132 */
		/* 8220CC48h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220CCCC;  }
		/* 8220CC48h case    2:*/		return 0x8220CC4C;
		  /* 8220CC4Ch */ case    3:  		/* lwz R11, <#[R29]> */
		/* 8220CC4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8220CC4Ch case    3:*/		return 0x8220CC50;
		  /* 8220CC50h */ case    4:  		/* li R30, 0 */
		/* 8220CC50h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220CC50h case    4:*/		return 0x8220CC54;
		  /* 8220CC54h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8220CC54h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220CC54h case    5:*/		return 0x8220CC58;
		  /* 8220CC58h */ case    6:  		/* bc 4, CR6_GT, 116 */
		/* 8220CC58h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8220CCCC;  }
		/* 8220CC58h case    6:*/		return 0x8220CC5C;
		  /* 8220CC5Ch */ case    7:  		/* addi R31, R29, 16 */
		/* 8220CC5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x10);
		/* 8220CC5Ch case    7:*/		return 0x8220CC60;
		  /* 8220CC60h */ case    8:  		/* lwz R11, <#[R31 - 12]> */
		/* 8220CC60h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFF4) );
		/* 8220CC60h case    8:*/		return 0x8220CC64;
		  /* 8220CC64h */ case    9:  		/* cmpw CR6, R11, R22 */
		/* 8220CC64h case    9:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R22);
		/* 8220CC64h case    9:*/		return 0x8220CC68;
		  /* 8220CC68h */ case   10:  		/* bc 4, CR6_EQ, 80 */
		/* 8220CC68h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220CCB8;  }
		/* 8220CC68h case   10:*/		return 0x8220CC6C;
		  /* 8220CC6Ch */ case   11:  		/* cmpwi CR6, R22, 1 */
		/* 8220CC6Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000001);
		/* 8220CC6Ch case   11:*/		return 0x8220CC70;
		  /* 8220CC70h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8220CC70h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220CC8C;  }
		/* 8220CC70h case   12:*/		return 0x8220CC74;
		  /* 8220CC74h */ case   13:  		/* li R4, 40 */
		/* 8220CC74h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8220CC74h case   13:*/		return 0x8220CC78;
		  /* 8220CC78h */ case   14:  		/* lwz R5, <#[R31]> */
		/* 8220CC78h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 8220CC78h case   14:*/		return 0x8220CC7C;
		  /* 8220CC7Ch */ case   15:  		/* mr R3, R20 */
		/* 8220CC7Ch case   15:*/		regs.R3 = regs.R20;
		/* 8220CC7Ch case   15:*/		return 0x8220CC80;
		  /* 8220CC80h */ case   16:  		/* bl -717888 */
		/* 8220CC80h case   16:*/		regs.LR = 0x8220CC84; return 0x8215D840;
		/* 8220CC80h case   16:*/		return 0x8220CC84;
		  /* 8220CC84h */ case   17:  		/* cmplw CR6, R21, R3 */
		/* 8220CC84h case   17:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R3);
		/* 8220CC84h case   17:*/		return 0x8220CC88;
		  /* 8220CC88h */ case   18:  		/* b 44 */
		/* 8220CC88h case   18:*/		return 0x8220CCB4;
		/* 8220CC88h case   18:*/		return 0x8220CC8C;
	}
	return 0x8220CC8C;
} // Block from 8220CC40h-8220CC8Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220CC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CC8C);
		  /* 8220CC8Ch */ case    0:  		/* cmpwi CR6, R22, 3 */
		/* 8220CC8Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000003);
		/* 8220CC8Ch case    0:*/		return 0x8220CC90;
		  /* 8220CC90h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 8220CC90h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220CCAC;  }
		/* 8220CC90h case    1:*/		return 0x8220CC94;
		  /* 8220CC94h */ case    2:  		/* mr R6, R23 */
		/* 8220CC94h case    2:*/		regs.R6 = regs.R23;
		/* 8220CC94h case    2:*/		return 0x8220CC98;
		  /* 8220CC98h */ case    3:  		/* mr R5, R27 */
		/* 8220CC98h case    3:*/		regs.R5 = regs.R27;
		/* 8220CC98h case    3:*/		return 0x8220CC9C;
		  /* 8220CC9Ch */ case    4:  		/* mr R4, R24 */
		/* 8220CC9Ch case    4:*/		regs.R4 = regs.R24;
		/* 8220CC9Ch case    4:*/		return 0x8220CCA0;
		  /* 8220CCA0h */ case    5:  		/* li R7, 606 */
		/* 8220CCA0h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x25E);
		/* 8220CCA0h case    5:*/		return 0x8220CCA4;
		  /* 8220CCA4h */ case    6:  		/* li R3, 0 */
		/* 8220CCA4h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CCA4h case    6:*/		return 0x8220CCA8;
		  /* 8220CCA8h */ case    7:  		/* bl -741536 */
		/* 8220CCA8h case    7:*/		regs.LR = 0x8220CCAC; return 0x82157C08;
		/* 8220CCA8h case    7:*/		return 0x8220CCAC;
	}
	return 0x8220CCAC;
} // Block from 8220CC8Ch-8220CCACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCAC);
		  /* 8220CCACh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220CCACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220CCACh case    0:*/		return 0x8220CCB0;
		  /* 8220CCB0h */ case    1:  		/* cmplw CR6, R11, R19 */
		/* 8220CCB0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8220CCB0h case    1:*/		return 0x8220CCB4;
	}
	return 0x8220CCB4;
} // Block from 8220CCACh-8220CCB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCB4);
		  /* 8220CCB4h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 8220CCB4h case    0:*/		if ( regs.CR[6].eq ) { return 0x8220CCE8;  }
		/* 8220CCB4h case    0:*/		return 0x8220CCB8;
	}
	return 0x8220CCB8;
} // Block from 8220CCB4h-8220CCB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCB8);
		  /* 8220CCB8h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8220CCB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8220CCB8h case    0:*/		return 0x8220CCBC;
		  /* 8220CCBCh */ case    1:  		/* addi R30, R30, 1 */
		/* 8220CCBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220CCBCh case    1:*/		return 0x8220CCC0;
		  /* 8220CCC0h */ case    2:  		/* addi R31, R31, 4 */
		/* 8220CCC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220CCC0h case    2:*/		return 0x8220CCC4;
		  /* 8220CCC4h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 8220CCC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8220CCC4h case    3:*/		return 0x8220CCC8;
		  /* 8220CCC8h */ case    4:  		/* bc 12, CR6_LT, -104 */
		/* 8220CCC8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8220CC60;  }
		/* 8220CCC8h case    4:*/		return 0x8220CCCC;
	}
	return 0x8220CCCC;
} // Block from 8220CCB8h-8220CCCCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCCC);
		  /* 8220CCCCh */ case    0:  		/* addi R28, R28, 1 */
		/* 8220CCCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8220CCCCh case    0:*/		return 0x8220CCD0;
		  /* 8220CCD0h */ case    1:  		/* addi R29, R29, 36 */
		/* 8220CCD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x24);
		/* 8220CCD0h case    1:*/		return 0x8220CCD4;
		  /* 8220CCD4h */ case    2:  		/* cmplw CR6, R28, R25 */
		/* 8220CCD4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 8220CCD4h case    2:*/		return 0x8220CCD8;
		  /* 8220CCD8h */ case    3:  		/* bc 12, CR6_LT, -188 */
		/* 8220CCD8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8220CC1C;  }
		/* 8220CCD8h case    3:*/		return 0x8220CCDC;
	}
	return 0x8220CCDC;
} // Block from 8220CCCCh-8220CCDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCDC);
		  /* 8220CCDCh */ case    0:  		/* li R3, 0 */
		/* 8220CCDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CCDCh case    0:*/		return 0x8220CCE0;
	}
	return 0x8220CCE0;
} // Block from 8220CCDCh-8220CCE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCE0h
// Function '?ILF_Create@XGRAPHICS@@YAPAU_INTEGER_LIST_FACTORY@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCE0);
		  /* 8220CCE0h */ case    0:  		/* addi R1, R1, 208 */
		/* 8220CCE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8220CCE0h case    0:*/		return 0x8220CCE4;
		  /* 8220CCE4h */ case    1:  		/* b -1555048 */
		/* 8220CCE4h case    1:*/		return 0x8209127C;
		/* 8220CCE4h case    1:*/		return 0x8220CCE8;
	}
	return 0x8220CCE8;
} // Block from 8220CCE0h-8220CCE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCE8);
		  /* 8220CCE8h */ case    0:  		/* stw R28, <#[R18]> */
		/* 8220CCE8h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R18 + 0x00000000) );
		/* 8220CCE8h case    0:*/		return 0x8220CCEC;
		  /* 8220CCECh */ case    1:  		/* li R3, 1 */
		/* 8220CCECh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220CCECh case    1:*/		return 0x8220CCF0;
		  /* 8220CCF0h */ case    2:  		/* stw R30, <#[R17]> */
		/* 8220CCF0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R17 + 0x00000000) );
		/* 8220CCF0h case    2:*/		return 0x8220CCF4;
		  /* 8220CCF4h */ case    3:  		/* b -20 */
		/* 8220CCF4h case    3:*/		return 0x8220CCE0;
		/* 8220CCF4h case    3:*/		return 0x8220CCF8;
	}
	return 0x8220CCF8;
} // Block from 8220CCE8h-8220CCF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CCF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CCF8);
		  /* 8220CCF8h */ case    0:  		/* mfspr R12, LR */
		/* 8220CCF8h case    0:*/		regs.R12 = regs.LR;
		/* 8220CCF8h case    0:*/		return 0x8220CCFC;
		  /* 8220CCFCh */ case    1:  		/* bl -1555124 */
		/* 8220CCFCh case    1:*/		regs.LR = 0x8220CD00; return 0x82091248;
		/* 8220CCFCh case    1:*/		return 0x8220CD00;
		  /* 8220CD00h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220CD00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220CD00h case    2:*/		return 0x8220CD04;
		  /* 8220CD04h */ case    3:  		/* lis R11, -32253 */
		/* 8220CD04h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220CD04h case    3:*/		return 0x8220CD08;
		  /* 8220CD08h */ case    4:  		/* lis R10, -32252 */
		/* 8220CD08h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220CD08h case    4:*/		return 0x8220CD0C;
		  /* 8220CD0Ch */ case    5:  		/* mr R31, R3 */
		/* 8220CD0Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220CD0Ch case    5:*/		return 0x8220CD10;
		  /* 8220CD10h */ case    6:  		/* mr R24, R4 */
		/* 8220CD10h case    6:*/		regs.R24 = regs.R4;
		/* 8220CD10h case    6:*/		return 0x8220CD14;
		  /* 8220CD14h */ case    7:  		/* mr R30, R5 */
		/* 8220CD14h case    7:*/		regs.R30 = regs.R5;
		/* 8220CD14h case    7:*/		return 0x8220CD18;
		  /* 8220CD18h */ case    8:  		/* mr R25, R6 */
		/* 8220CD18h case    8:*/		regs.R25 = regs.R6;
		/* 8220CD18h case    8:*/		return 0x8220CD1C;
		  /* 8220CD1Ch */ case    9:  		/* mr R27, R7 */
		/* 8220CD1Ch case    9:*/		regs.R27 = regs.R7;
		/* 8220CD1Ch case    9:*/		return 0x8220CD20;
		  /* 8220CD20h */ case   10:  		/* mr R26, R8 */
		/* 8220CD20h case   10:*/		regs.R26 = regs.R8;
		/* 8220CD20h case   10:*/		return 0x8220CD24;
		  /* 8220CD24h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 8220CD24h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220CD24h case   11:*/		return 0x8220CD28;
		  /* 8220CD28h */ case   12:  		/* addi R29, R11, 27460 */
		/* 8220CD28h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220CD28h case   12:*/		return 0x8220CD2C;
		  /* 8220CD2Ch */ case   13:  		/* addi R28, R10, -9888 */
		/* 8220CD2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFD960);
		/* 8220CD2Ch case   13:*/		return 0x8220CD30;
		  /* 8220CD30h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CD30h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220CD50;  }
		/* 8220CD30h case   14:*/		return 0x8220CD34;
		  /* 8220CD34h */ case   15:  		/* lis R11, -32252 */
		/* 8220CD34h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CD34h case   15:*/		return 0x8220CD38;
		  /* 8220CD38h */ case   16:  		/* mr R6, R28 */
		/* 8220CD38h case   16:*/		regs.R6 = regs.R28;
		/* 8220CD38h case   16:*/		return 0x8220CD3C;
		  /* 8220CD3Ch */ case   17:  		/* addi R5, R11, -9900 */
		/* 8220CD3Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD954);
		/* 8220CD3Ch case   17:*/		return 0x8220CD40;
		  /* 8220CD40h */ case   18:  		/* mr R4, R29 */
		/* 8220CD40h case   18:*/		regs.R4 = regs.R29;
		/* 8220CD40h case   18:*/		return 0x8220CD44;
		  /* 8220CD44h */ case   19:  		/* li R7, 811 */
		/* 8220CD44h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x32B);
		/* 8220CD44h case   19:*/		return 0x8220CD48;
		  /* 8220CD48h */ case   20:  		/* li R3, 0 */
		/* 8220CD48h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CD48h case   20:*/		return 0x8220CD4C;
		  /* 8220CD4Ch */ case   21:  		/* bl -741700 */
		/* 8220CD4Ch case   21:*/		regs.LR = 0x8220CD50; return 0x82157C08;
		/* 8220CD4Ch case   21:*/		return 0x8220CD50;
	}
	return 0x8220CD50;
} // Block from 8220CCF8h-8220CD50h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220CD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CD50);
		  /* 8220CD50h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8220CD50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8220CD50h case    0:*/		return 0x8220CD54;
		  /* 8220CD54h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CD54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CD74;  }
		/* 8220CD54h case    1:*/		return 0x8220CD58;
		  /* 8220CD58h */ case    2:  		/* lis R11, -32252 */
		/* 8220CD58h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CD58h case    2:*/		return 0x8220CD5C;
		  /* 8220CD5Ch */ case    3:  		/* mr R6, R28 */
		/* 8220CD5Ch case    3:*/		regs.R6 = regs.R28;
		/* 8220CD5Ch case    3:*/		return 0x8220CD60;
		  /* 8220CD60h */ case    4:  		/* addi R5, R11, -22012 */
		/* 8220CD60h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8220CD60h case    4:*/		return 0x8220CD64;
		  /* 8220CD64h */ case    5:  		/* mr R4, R29 */
		/* 8220CD64h case    5:*/		regs.R4 = regs.R29;
		/* 8220CD64h case    5:*/		return 0x8220CD68;
		  /* 8220CD68h */ case    6:  		/* li R7, 812 */
		/* 8220CD68h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x32C);
		/* 8220CD68h case    6:*/		return 0x8220CD6C;
		  /* 8220CD6Ch */ case    7:  		/* li R3, 0 */
		/* 8220CD6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CD6Ch case    7:*/		return 0x8220CD70;
		  /* 8220CD70h */ case    8:  		/* bl -741736 */
		/* 8220CD70h case    8:*/		regs.LR = 0x8220CD74; return 0x82157C08;
		/* 8220CD70h case    8:*/		return 0x8220CD74;
	}
	return 0x8220CD74;
} // Block from 8220CD50h-8220CD74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CD74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CD74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CD74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CD74);
		  /* 8220CD74h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220CD74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220CD74h case    0:*/		return 0x8220CD78;
		  /* 8220CD78h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CD78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CD98;  }
		/* 8220CD78h case    1:*/		return 0x8220CD7C;
		  /* 8220CD7Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220CD7Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CD7Ch case    2:*/		return 0x8220CD80;
		  /* 8220CD80h */ case    3:  		/* mr R6, R28 */
		/* 8220CD80h case    3:*/		regs.R6 = regs.R28;
		/* 8220CD80h case    3:*/		return 0x8220CD84;
		  /* 8220CD84h */ case    4:  		/* addi R5, R11, -9588 */
		/* 8220CD84h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA8C);
		/* 8220CD84h case    4:*/		return 0x8220CD88;
		  /* 8220CD88h */ case    5:  		/* mr R4, R29 */
		/* 8220CD88h case    5:*/		regs.R4 = regs.R29;
		/* 8220CD88h case    5:*/		return 0x8220CD8C;
		  /* 8220CD8Ch */ case    6:  		/* li R7, 813 */
		/* 8220CD8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x32D);
		/* 8220CD8Ch case    6:*/		return 0x8220CD90;
		  /* 8220CD90h */ case    7:  		/* li R3, 0 */
		/* 8220CD90h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CD90h case    7:*/		return 0x8220CD94;
		  /* 8220CD94h */ case    8:  		/* bl -741772 */
		/* 8220CD94h case    8:*/		regs.LR = 0x8220CD98; return 0x82157C08;
		/* 8220CD94h case    8:*/		return 0x8220CD98;
	}
	return 0x8220CD98;
} // Block from 8220CD74h-8220CD98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CD98);
		  /* 8220CD98h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220CD98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220CD98h case    0:*/		return 0x8220CD9C;
		  /* 8220CD9Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CD9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CDBC;  }
		/* 8220CD9Ch case    1:*/		return 0x8220CDA0;
		  /* 8220CDA0h */ case    2:  		/* lis R11, -32252 */
		/* 8220CDA0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CDA0h case    2:*/		return 0x8220CDA4;
		  /* 8220CDA4h */ case    3:  		/* mr R6, R28 */
		/* 8220CDA4h case    3:*/		regs.R6 = regs.R28;
		/* 8220CDA4h case    3:*/		return 0x8220CDA8;
		  /* 8220CDA8h */ case    4:  		/* addi R5, R11, -9600 */
		/* 8220CDA8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA80);
		/* 8220CDA8h case    4:*/		return 0x8220CDAC;
		  /* 8220CDACh */ case    5:  		/* mr R4, R29 */
		/* 8220CDACh case    5:*/		regs.R4 = regs.R29;
		/* 8220CDACh case    5:*/		return 0x8220CDB0;
		  /* 8220CDB0h */ case    6:  		/* li R7, 814 */
		/* 8220CDB0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x32E);
		/* 8220CDB0h case    6:*/		return 0x8220CDB4;
		  /* 8220CDB4h */ case    7:  		/* li R3, 0 */
		/* 8220CDB4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CDB4h case    7:*/		return 0x8220CDB8;
		  /* 8220CDB8h */ case    8:  		/* bl -741808 */
		/* 8220CDB8h case    8:*/		regs.LR = 0x8220CDBC; return 0x82157C08;
		/* 8220CDB8h case    8:*/		return 0x8220CDBC;
	}
	return 0x8220CDBC;
} // Block from 8220CD98h-8220CDBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CDBC);
		  /* 8220CDBCh */ case    0:  		/* cmpwi CR6, R30, 1 */
		/* 8220CDBCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8220CDBCh case    0:*/		return 0x8220CDC0;
		  /* 8220CDC0h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8220CDC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220CE14;  }
		/* 8220CDC0h case    1:*/		return 0x8220CDC4;
		  /* 8220CDC4h */ case    2:  		/* cmpwi CR6, R30, 3 */
		/* 8220CDC4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000003);
		/* 8220CDC4h case    2:*/		return 0x8220CDC8;
		  /* 8220CDC8h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 8220CDC8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220CE14;  }
		/* 8220CDC8h case    3:*/		return 0x8220CDCC;
		  /* 8220CDCCh */ case    4:  		/* cmpwi CR6, R30, 2 */
		/* 8220CDCCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 8220CDCCh case    4:*/		return 0x8220CDD0;
		  /* 8220CDD0h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 8220CDD0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8220CDF8;  }
		/* 8220CDD0h case    5:*/		return 0x8220CDD4;
		  /* 8220CDD4h */ case    6:  		/* cmpwi CR6, R30, 0 */
		/* 8220CDD4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8220CDD4h case    6:*/		return 0x8220CDD8;
		  /* 8220CDD8h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 8220CDD8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8220CDF8;  }
		/* 8220CDD8h case    7:*/		return 0x8220CDDC;
		  /* 8220CDDCh */ case    8:  		/* lis R11, -32252 */
		/* 8220CDDCh case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CDDCh case    8:*/		return 0x8220CDE0;
		  /* 8220CDE0h */ case    9:  		/* mr R6, R28 */
		/* 8220CDE0h case    9:*/		regs.R6 = regs.R28;
		/* 8220CDE0h case    9:*/		return 0x8220CDE4;
		  /* 8220CDE4h */ case   10:  		/* addi R5, R11, -9496 */
		/* 8220CDE4h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDAE8);
		/* 8220CDE4h case   10:*/		return 0x8220CDE8;
		  /* 8220CDE8h */ case   11:  		/* mr R4, R29 */
		/* 8220CDE8h case   11:*/		regs.R4 = regs.R29;
		/* 8220CDE8h case   11:*/		return 0x8220CDEC;
		  /* 8220CDECh */ case   12:  		/* li R7, 833 */
		/* 8220CDECh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x341);
		/* 8220CDECh case   12:*/		return 0x8220CDF0;
		  /* 8220CDF0h */ case   13:  		/* li R3, 0 */
		/* 8220CDF0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CDF0h case   13:*/		return 0x8220CDF4;
		  /* 8220CDF4h */ case   14:  		/* bl -741868 */
		/* 8220CDF4h case   14:*/		regs.LR = 0x8220CDF8; return 0x82157C08;
		/* 8220CDF4h case   14:*/		return 0x8220CDF8;
	}
	return 0x8220CDF8;
} // Block from 8220CDBCh-8220CDF8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220CDF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CDF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CDF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CDF8);
		  /* 8220CDF8h */ case    0:  		/* mr R7, R26 */
		/* 8220CDF8h case    0:*/		regs.R7 = regs.R26;
		/* 8220CDF8h case    0:*/		return 0x8220CDFC;
		  /* 8220CDFCh */ case    1:  		/* mr R6, R27 */
		/* 8220CDFCh case    1:*/		regs.R6 = regs.R27;
		/* 8220CDFCh case    1:*/		return 0x8220CE00;
		  /* 8220CE00h */ case    2:  		/* mr R5, R25 */
		/* 8220CE00h case    2:*/		regs.R5 = regs.R25;
		/* 8220CE00h case    2:*/		return 0x8220CE04;
		  /* 8220CE04h */ case    3:  		/* mr R4, R30 */
		/* 8220CE04h case    3:*/		regs.R4 = regs.R30;
		/* 8220CE04h case    3:*/		return 0x8220CE08;
		  /* 8220CE08h */ case    4:  		/* mr R3, R31 */
		/* 8220CE08h case    4:*/		regs.R3 = regs.R31;
		/* 8220CE08h case    4:*/		return 0x8220CE0C;
		  /* 8220CE0Ch */ case    5:  		/* bl -964 */
		/* 8220CE0Ch case    5:*/		regs.LR = 0x8220CE10; return 0x8220CA48;
		/* 8220CE0Ch case    5:*/		return 0x8220CE10;
		  /* 8220CE10h */ case    6:  		/* b 68 */
		/* 8220CE10h case    6:*/		return 0x8220CE54;
		/* 8220CE10h case    6:*/		return 0x8220CE14;
	}
	return 0x8220CE14;
} // Block from 8220CDF8h-8220CE14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220CE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CE14);
		  /* 8220CE14h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220CE14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220CE14h case    0:*/		return 0x8220CE18;
		  /* 8220CE18h */ case    1:  		/* mr R3, R31 */
		/* 8220CE18h case    1:*/		regs.R3 = regs.R31;
		/* 8220CE18h case    1:*/		return 0x8220CE1C;
		  /* 8220CE1Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8220CE1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220CE1Ch case    2:*/		return 0x8220CE20;
		  /* 8220CE20h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8220CE20h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220CE40;  }
		/* 8220CE20h case    3:*/		return 0x8220CE24;
		  /* 8220CE24h */ case    4:  		/* mr R8, R26 */
		/* 8220CE24h case    4:*/		regs.R8 = regs.R26;
		/* 8220CE24h case    4:*/		return 0x8220CE28;
		  /* 8220CE28h */ case    5:  		/* mr R7, R27 */
		/* 8220CE28h case    5:*/		regs.R7 = regs.R27;
		/* 8220CE28h case    5:*/		return 0x8220CE2C;
		  /* 8220CE2Ch */ case    6:  		/* mr R6, R25 */
		/* 8220CE2Ch case    6:*/		regs.R6 = regs.R25;
		/* 8220CE2Ch case    6:*/		return 0x8220CE30;
		  /* 8220CE30h */ case    7:  		/* mr R5, R30 */
		/* 8220CE30h case    7:*/		regs.R5 = regs.R30;
		/* 8220CE30h case    7:*/		return 0x8220CE34;
		  /* 8220CE34h */ case    8:  		/* mr R4, R24 */
		/* 8220CE34h case    8:*/		regs.R4 = regs.R24;
		/* 8220CE34h case    8:*/		return 0x8220CE38;
		  /* 8220CE38h */ case    9:  		/* bl -736 */
		/* 8220CE38h case    9:*/		regs.LR = 0x8220CE3C; return 0x8220CB58;
		/* 8220CE38h case    9:*/		return 0x8220CE3C;
		  /* 8220CE3Ch */ case   10:  		/* b 24 */
		/* 8220CE3Ch case   10:*/		return 0x8220CE54;
		/* 8220CE3Ch case   10:*/		return 0x8220CE40;
	}
	return 0x8220CE40;
} // Block from 8220CE14h-8220CE40h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220CE40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CE40);
		  /* 8220CE40h */ case    0:  		/* mr R7, R26 */
		/* 8220CE40h case    0:*/		regs.R7 = regs.R26;
		/* 8220CE40h case    0:*/		return 0x8220CE44;
		  /* 8220CE44h */ case    1:  		/* mr R6, R27 */
		/* 8220CE44h case    1:*/		regs.R6 = regs.R27;
		/* 8220CE44h case    1:*/		return 0x8220CE48;
		  /* 8220CE48h */ case    2:  		/* mr R5, R25 */
		/* 8220CE48h case    2:*/		regs.R5 = regs.R25;
		/* 8220CE48h case    2:*/		return 0x8220CE4C;
		  /* 8220CE4Ch */ case    3:  		/* mr R4, R30 */
		/* 8220CE4Ch case    3:*/		regs.R4 = regs.R30;
		/* 8220CE4Ch case    3:*/		return 0x8220CE50;
		  /* 8220CE50h */ case    4:  		/* bl -1336 */
		/* 8220CE50h case    4:*/		regs.LR = 0x8220CE54; return 0x8220C918;
		/* 8220CE50h case    4:*/		return 0x8220CE54;
	}
	return 0x8220CE54;
} // Block from 8220CE40h-8220CE54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220CE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CE54);
		  /* 8220CE54h */ case    0:  		/* addi R1, R1, 160 */
		/* 8220CE54h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220CE54h case    0:*/		return 0x8220CE58;
		  /* 8220CE58h */ case    1:  		/* b -1555392 */
		/* 8220CE58h case    1:*/		return 0x82091298;
		/* 8220CE58h case    1:*/		return 0x8220CE5C;
		  /* 8220CE5Ch */ case    2:  		/* nop */
		/* 8220CE5Ch case    2:*/		cpu::op::nop();
		/* 8220CE5Ch case    2:*/		return 0x8220CE60;
	}
	return 0x8220CE60;
} // Block from 8220CE54h-8220CE60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220CE60h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CE60);
		  /* 8220CE60h */ case    0:  		/* mfspr R12, LR */
		/* 8220CE60h case    0:*/		regs.R12 = regs.LR;
		/* 8220CE60h case    0:*/		return 0x8220CE64;
		  /* 8220CE64h */ case    1:  		/* bl -1555488 */
		/* 8220CE64h case    1:*/		regs.LR = 0x8220CE68; return 0x82091244;
		/* 8220CE64h case    1:*/		return 0x8220CE68;
		  /* 8220CE68h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220CE68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220CE68h case    2:*/		return 0x8220CE6C;
		  /* 8220CE6Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220CE6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220CE6Ch case    3:*/		return 0x8220CE70;
		  /* 8220CE70h */ case    4:  		/* lis R10, -32252 */
		/* 8220CE70h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220CE70h case    4:*/		return 0x8220CE74;
		  /* 8220CE74h */ case    5:  		/* mr R31, R3 */
		/* 8220CE74h case    5:*/		regs.R31 = regs.R3;
		/* 8220CE74h case    5:*/		return 0x8220CE78;
	}
	return 0x8220CE78;
} // Block from 8220CE60h-8220CE78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220CE78h
// Function '?OBJLF_Create@XGRAPHICS@@YAPAU_OBJECT_LIST_FACTORY@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CE78);
		  /* 8220CE78h */ case    0:  		/* mr R26, R4 */
		/* 8220CE78h case    0:*/		regs.R26 = regs.R4;
		/* 8220CE78h case    0:*/		return 0x8220CE7C;
		  /* 8220CE7Ch */ case    1:  		/* mr R28, R5 */
		/* 8220CE7Ch case    1:*/		regs.R28 = regs.R5;
		/* 8220CE7Ch case    1:*/		return 0x8220CE80;
		  /* 8220CE80h */ case    2:  		/* mr R27, R6 */
		/* 8220CE80h case    2:*/		regs.R27 = regs.R6;
		/* 8220CE80h case    2:*/		return 0x8220CE84;
		  /* 8220CE84h */ case    3:  		/* mr R30, R7 */
		/* 8220CE84h case    3:*/		regs.R30 = regs.R7;
		/* 8220CE84h case    3:*/		return 0x8220CE88;
		  /* 8220CE88h */ case    4:  		/* mr R29, R8 */
		/* 8220CE88h case    4:*/		regs.R29 = regs.R8;
		/* 8220CE88h case    4:*/		return 0x8220CE8C;
		  /* 8220CE8Ch */ case    5:  		/* li R23, 0 */
		/* 8220CE8Ch case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8220CE8Ch case    5:*/		return 0x8220CE90;
		  /* 8220CE90h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220CE90h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220CE90h case    6:*/		return 0x8220CE94;
		  /* 8220CE94h */ case    7:  		/* addi R25, R11, 27460 */
		/* 8220CE94h case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220CE94h case    7:*/		return 0x8220CE98;
		  /* 8220CE98h */ case    8:  		/* addi R24, R10, -9888 */
		/* 8220CE98h case    8:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFD960);
		/* 8220CE98h case    8:*/		return 0x8220CE9C;
		  /* 8220CE9Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CE9Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220CEBC;  }
		/* 8220CE9Ch case    9:*/		return 0x8220CEA0;
		  /* 8220CEA0h */ case   10:  		/* lis R11, -32252 */
		/* 8220CEA0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CEA0h case   10:*/		return 0x8220CEA4;
		  /* 8220CEA4h */ case   11:  		/* mr R6, R24 */
		/* 8220CEA4h case   11:*/		regs.R6 = regs.R24;
		/* 8220CEA4h case   11:*/		return 0x8220CEA8;
		  /* 8220CEA8h */ case   12:  		/* addi R5, R11, -9900 */
		/* 8220CEA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD954);
		/* 8220CEA8h case   12:*/		return 0x8220CEAC;
		  /* 8220CEACh */ case   13:  		/* mr R4, R25 */
		/* 8220CEACh case   13:*/		regs.R4 = regs.R25;
		/* 8220CEACh case   13:*/		return 0x8220CEB0;
		  /* 8220CEB0h */ case   14:  		/* li R7, 882 */
		/* 8220CEB0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x372);
		/* 8220CEB0h case   14:*/		return 0x8220CEB4;
		  /* 8220CEB4h */ case   15:  		/* li R3, 0 */
		/* 8220CEB4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CEB4h case   15:*/		return 0x8220CEB8;
		  /* 8220CEB8h */ case   16:  		/* bl -742064 */
		/* 8220CEB8h case   16:*/		regs.LR = 0x8220CEBC; return 0x82157C08;
		/* 8220CEB8h case   16:*/		return 0x8220CEBC;
	}
	return 0x8220CEBC;
} // Block from 8220CE78h-8220CEBCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220CEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CEBC);
		  /* 8220CEBCh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8220CEBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220CEBCh case    0:*/		return 0x8220CEC0;
		  /* 8220CEC0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CEC0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CEE0;  }
		/* 8220CEC0h case    1:*/		return 0x8220CEC4;
		  /* 8220CEC4h */ case    2:  		/* lis R11, -32252 */
		/* 8220CEC4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CEC4h case    2:*/		return 0x8220CEC8;
		  /* 8220CEC8h */ case    3:  		/* mr R6, R24 */
		/* 8220CEC8h case    3:*/		regs.R6 = regs.R24;
		/* 8220CEC8h case    3:*/		return 0x8220CECC;
		  /* 8220CECCh */ case    4:  		/* addi R5, R11, -22012 */
		/* 8220CECCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8220CECCh case    4:*/		return 0x8220CED0;
		  /* 8220CED0h */ case    5:  		/* mr R4, R25 */
		/* 8220CED0h case    5:*/		regs.R4 = regs.R25;
		/* 8220CED0h case    5:*/		return 0x8220CED4;
		  /* 8220CED4h */ case    6:  		/* li R7, 883 */
		/* 8220CED4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x373);
		/* 8220CED4h case    6:*/		return 0x8220CED8;
		  /* 8220CED8h */ case    7:  		/* li R3, 0 */
		/* 8220CED8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CED8h case    7:*/		return 0x8220CEDC;
		  /* 8220CEDCh */ case    8:  		/* bl -742100 */
		/* 8220CEDCh case    8:*/		regs.LR = 0x8220CEE0; return 0x82157C08;
		/* 8220CEDCh case    8:*/		return 0x8220CEE0;
	}
	return 0x8220CEE0;
} // Block from 8220CEBCh-8220CEE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CEE0);
		  /* 8220CEE0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220CEE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220CEE0h case    0:*/		return 0x8220CEE4;
		  /* 8220CEE4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CEE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CF04;  }
		/* 8220CEE4h case    1:*/		return 0x8220CEE8;
		  /* 8220CEE8h */ case    2:  		/* lis R11, -32252 */
		/* 8220CEE8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CEE8h case    2:*/		return 0x8220CEEC;
		  /* 8220CEECh */ case    3:  		/* mr R6, R24 */
		/* 8220CEECh case    3:*/		regs.R6 = regs.R24;
		/* 8220CEECh case    3:*/		return 0x8220CEF0;
		  /* 8220CEF0h */ case    4:  		/* addi R5, R11, -9588 */
		/* 8220CEF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA8C);
		/* 8220CEF0h case    4:*/		return 0x8220CEF4;
		  /* 8220CEF4h */ case    5:  		/* mr R4, R25 */
		/* 8220CEF4h case    5:*/		regs.R4 = regs.R25;
		/* 8220CEF4h case    5:*/		return 0x8220CEF8;
		  /* 8220CEF8h */ case    6:  		/* li R7, 884 */
		/* 8220CEF8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x374);
		/* 8220CEF8h case    6:*/		return 0x8220CEFC;
		  /* 8220CEFCh */ case    7:  		/* li R3, 0 */
		/* 8220CEFCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CEFCh case    7:*/		return 0x8220CF00;
		  /* 8220CF00h */ case    8:  		/* bl -742136 */
		/* 8220CF00h case    8:*/		regs.LR = 0x8220CF04; return 0x82157C08;
		/* 8220CF00h case    8:*/		return 0x8220CF04;
	}
	return 0x8220CF04;
} // Block from 8220CEE0h-8220CF04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CF04);
		  /* 8220CF04h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8220CF04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220CF04h case    0:*/		return 0x8220CF08;
		  /* 8220CF08h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220CF08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220CF28;  }
		/* 8220CF08h case    1:*/		return 0x8220CF0C;
		  /* 8220CF0Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220CF0Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CF0Ch case    2:*/		return 0x8220CF10;
		  /* 8220CF10h */ case    3:  		/* mr R6, R24 */
		/* 8220CF10h case    3:*/		regs.R6 = regs.R24;
		/* 8220CF10h case    3:*/		return 0x8220CF14;
		  /* 8220CF14h */ case    4:  		/* addi R5, R11, -9600 */
		/* 8220CF14h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDA80);
		/* 8220CF14h case    4:*/		return 0x8220CF18;
		  /* 8220CF18h */ case    5:  		/* mr R4, R25 */
		/* 8220CF18h case    5:*/		regs.R4 = regs.R25;
		/* 8220CF18h case    5:*/		return 0x8220CF1C;
		  /* 8220CF1Ch */ case    6:  		/* li R7, 885 */
		/* 8220CF1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x375);
		/* 8220CF1Ch case    6:*/		return 0x8220CF20;
		  /* 8220CF20h */ case    7:  		/* li R3, 0 */
		/* 8220CF20h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CF20h case    7:*/		return 0x8220CF24;
		  /* 8220CF24h */ case    8:  		/* bl -742172 */
		/* 8220CF24h case    8:*/		regs.LR = 0x8220CF28; return 0x82157C08;
		/* 8220CF24h case    8:*/		return 0x8220CF28;
	}
	return 0x8220CF28;
} // Block from 8220CF04h-8220CF28h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220CF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CF28);
		  /* 8220CF28h */ case    0:  		/* mr R8, R29 */
		/* 8220CF28h case    0:*/		regs.R8 = regs.R29;
		/* 8220CF28h case    0:*/		return 0x8220CF2C;
		  /* 8220CF2Ch */ case    1:  		/* mr R7, R30 */
		/* 8220CF2Ch case    1:*/		regs.R7 = regs.R30;
		/* 8220CF2Ch case    1:*/		return 0x8220CF30;
		  /* 8220CF30h */ case    2:  		/* mr R6, R27 */
		/* 8220CF30h case    2:*/		regs.R6 = regs.R27;
		/* 8220CF30h case    2:*/		return 0x8220CF34;
		  /* 8220CF34h */ case    3:  		/* mr R5, R28 */
		/* 8220CF34h case    3:*/		regs.R5 = regs.R28;
		/* 8220CF34h case    3:*/		return 0x8220CF38;
		  /* 8220CF38h */ case    4:  		/* mr R4, R26 */
		/* 8220CF38h case    4:*/		regs.R4 = regs.R26;
		/* 8220CF38h case    4:*/		return 0x8220CF3C;
		  /* 8220CF3Ch */ case    5:  		/* mr R3, R31 */
		/* 8220CF3Ch case    5:*/		regs.R3 = regs.R31;
		/* 8220CF3Ch case    5:*/		return 0x8220CF40;
		  /* 8220CF40h */ case    6:  		/* bl -584 */
		/* 8220CF40h case    6:*/		regs.LR = 0x8220CF44; return 0x8220CCF8;
		/* 8220CF40h case    6:*/		return 0x8220CF44;
		  /* 8220CF44h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8220CF44h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220CF44h case    7:*/		return 0x8220CF48;
		  /* 8220CF48h */ case    8:  		/* bc 4, CR0_EQ, 64 */
		/* 8220CF48h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8220CF88;  }
		/* 8220CF48h case    8:*/		return 0x8220CF4C;
		  /* 8220CF4Ch */ case    9:  		/* mr R7, R29 */
		/* 8220CF4Ch case    9:*/		regs.R7 = regs.R29;
		/* 8220CF4Ch case    9:*/		return 0x8220CF50;
		  /* 8220CF50h */ case   10:  		/* mr R6, R30 */
		/* 8220CF50h case   10:*/		regs.R6 = regs.R30;
		/* 8220CF50h case   10:*/		return 0x8220CF54;
		  /* 8220CF54h */ case   11:  		/* mr R5, R27 */
		/* 8220CF54h case   11:*/		regs.R5 = regs.R27;
		/* 8220CF54h case   11:*/		return 0x8220CF58;
		  /* 8220CF58h */ case   12:  		/* mr R4, R28 */
		/* 8220CF58h case   12:*/		regs.R4 = regs.R28;
		/* 8220CF58h case   12:*/		return 0x8220CF5C;
		  /* 8220CF5Ch */ case   13:  		/* mr R3, R31 */
		/* 8220CF5Ch case   13:*/		regs.R3 = regs.R31;
		/* 8220CF5Ch case   13:*/		return 0x8220CF60;
		  /* 8220CF60h */ case   14:  		/* bl -2040 */
		/* 8220CF60h case   14:*/		regs.LR = 0x8220CF64; return 0x8220C768;
		/* 8220CF60h case   14:*/		return 0x8220CF64;
		  /* 8220CF64h */ case   15:  		/* or. R23, R3, R3 */
		/* 8220CF64h case   15:*/		cpu::op::or<1>(regs,&regs.R23,regs.R3,regs.R3);
		/* 8220CF64h case   15:*/		return 0x8220CF68;
		  /* 8220CF68h */ case   16:  		/* bc 12, CR0_EQ, 32 */
		/* 8220CF68h case   16:*/		if ( regs.CR[0].eq ) { return 0x8220CF88;  }
		/* 8220CF68h case   16:*/		return 0x8220CF6C;
		  /* 8220CF6Ch */ case   17:  		/* lis R11, -32252 */
		/* 8220CF6Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CF6Ch case   17:*/		return 0x8220CF70;
		  /* 8220CF70h */ case   18:  		/* mr R6, R24 */
		/* 8220CF70h case   18:*/		regs.R6 = regs.R24;
		/* 8220CF70h case   18:*/		return 0x8220CF74;
		  /* 8220CF74h */ case   19:  		/* addi R5, R11, -9424 */
		/* 8220CF74h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB30);
		/* 8220CF74h case   19:*/		return 0x8220CF78;
		  /* 8220CF78h */ case   20:  		/* mr R4, R25 */
		/* 8220CF78h case   20:*/		regs.R4 = regs.R25;
		/* 8220CF78h case   20:*/		return 0x8220CF7C;
		  /* 8220CF7Ch */ case   21:  		/* li R7, 893 */
		/* 8220CF7Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x37D);
		/* 8220CF7Ch case   21:*/		return 0x8220CF80;
		  /* 8220CF80h */ case   22:  		/* li R3, 0 */
		/* 8220CF80h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CF80h case   22:*/		return 0x8220CF84;
		  /* 8220CF84h */ case   23:  		/* bl -742268 */
		/* 8220CF84h case   23:*/		regs.LR = 0x8220CF88; return 0x82157C08;
		/* 8220CF84h case   23:*/		return 0x8220CF88;
	}
	return 0x8220CF88;
} // Block from 8220CF28h-8220CF88h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8220CF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CF88);
		  /* 8220CF88h */ case    0:  		/* mr R3, R23 */
		/* 8220CF88h case    0:*/		regs.R3 = regs.R23;
		/* 8220CF88h case    0:*/		return 0x8220CF8C;
		  /* 8220CF8Ch */ case    1:  		/* addi R1, R1, 160 */
		/* 8220CF8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220CF8Ch case    1:*/		return 0x8220CF90;
		  /* 8220CF90h */ case    2:  		/* b -1555708 */
		/* 8220CF90h case    2:*/		return 0x82091294;
		/* 8220CF90h case    2:*/		return 0x8220CF94;
		  /* 8220CF94h */ case    3:  		/* nop */
		/* 8220CF94h case    3:*/		cpu::op::nop();
		/* 8220CF94h case    3:*/		return 0x8220CF98;
	}
	return 0x8220CF98;
} // Block from 8220CF88h-8220CF98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220CF98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CF98);
		  /* 8220CF98h */ case    0:  		/* mfspr R12, LR */
		/* 8220CF98h case    0:*/		regs.R12 = regs.LR;
		/* 8220CF98h case    0:*/		return 0x8220CF9C;
		  /* 8220CF9Ch */ case    1:  		/* bl -1555784 */
		/* 8220CF9Ch case    1:*/		regs.LR = 0x8220CFA0; return 0x82091254;
		/* 8220CF9Ch case    1:*/		return 0x8220CFA0;
		  /* 8220CFA0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220CFA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220CFA0h case    2:*/		return 0x8220CFA4;
		  /* 8220CFA4h */ case    3:  		/* lis R11, -32253 */
		/* 8220CFA4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220CFA4h case    3:*/		return 0x8220CFA8;
		  /* 8220CFA8h */ case    4:  		/* lis R10, -32252 */
		/* 8220CFA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220CFA8h case    4:*/		return 0x8220CFAC;
		  /* 8220CFACh */ case    5:  		/* mr R31, R3 */
		/* 8220CFACh case    5:*/		regs.R31 = regs.R3;
		/* 8220CFACh case    5:*/		return 0x8220CFB0;
		  /* 8220CFB0h */ case    6:  		/* mr R28, R4 */
		/* 8220CFB0h case    6:*/		regs.R28 = regs.R4;
		/* 8220CFB0h case    6:*/		return 0x8220CFB4;
		  /* 8220CFB4h */ case    7:  		/* mr R27, R5 */
		/* 8220CFB4h case    7:*/		regs.R27 = regs.R5;
		/* 8220CFB4h case    7:*/		return 0x8220CFB8;
		  /* 8220CFB8h */ case    8:  		/* cmpwi CR6, R3, 0 */
		/* 8220CFB8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8220CFB8h case    8:*/		return 0x8220CFBC;
		  /* 8220CFBCh */ case    9:  		/* addi R30, R11, 27460 */
		/* 8220CFBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220CFBCh case    9:*/		return 0x8220CFC0;
		  /* 8220CFC0h */ case   10:  		/* addi R29, R10, -9392 */
		/* 8220CFC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFDB50);
		/* 8220CFC0h case   10:*/		return 0x8220CFC4;
		  /* 8220CFC4h */ case   11:  		/* bc 4, CR6_LT, 32 */
		/* 8220CFC4h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8220CFE4;  }
		/* 8220CFC4h case   11:*/		return 0x8220CFC8;
		  /* 8220CFC8h */ case   12:  		/* lis R11, -32252 */
		/* 8220CFC8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CFC8h case   12:*/		return 0x8220CFCC;
		  /* 8220CFCCh */ case   13:  		/* mr R6, R29 */
		/* 8220CFCCh case   13:*/		regs.R6 = regs.R29;
		/* 8220CFCCh case   13:*/		return 0x8220CFD0;
		  /* 8220CFD0h */ case   14:  		/* addi R5, R11, -9404 */
		/* 8220CFD0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB44);
		/* 8220CFD0h case   14:*/		return 0x8220CFD4;
		  /* 8220CFD4h */ case   15:  		/* mr R4, R30 */
		/* 8220CFD4h case   15:*/		regs.R4 = regs.R30;
		/* 8220CFD4h case   15:*/		return 0x8220CFD8;
		  /* 8220CFD8h */ case   16:  		/* li R7, 283 */
		/* 8220CFD8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x11B);
		/* 8220CFD8h case   16:*/		return 0x8220CFDC;
		  /* 8220CFDCh */ case   17:  		/* li R3, 0 */
		/* 8220CFDCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220CFDCh case   17:*/		return 0x8220CFE0;
		  /* 8220CFE0h */ case   18:  		/* bl -742360 */
		/* 8220CFE0h case   18:*/		regs.LR = 0x8220CFE4; return 0x82157C08;
		/* 8220CFE0h case   18:*/		return 0x8220CFE4;
	}
	return 0x8220CFE4;
} // Block from 8220CF98h-8220CFE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220CFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220CFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220CFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220CFE4);
		  /* 8220CFE4h */ case    0:  		/* cmpwi CR6, R31, 44 */
		/* 8220CFE4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000002C);
		/* 8220CFE4h case    0:*/		return 0x8220CFE8;
		  /* 8220CFE8h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8220CFE8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8220D008;  }
		/* 8220CFE8h case    1:*/		return 0x8220CFEC;
		  /* 8220CFECh */ case    2:  		/* lis R11, -32252 */
		/* 8220CFECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220CFECh case    2:*/		return 0x8220CFF0;
		  /* 8220CFF0h */ case    3:  		/* mr R6, R29 */
		/* 8220CFF0h case    3:*/		regs.R6 = regs.R29;
		/* 8220CFF0h case    3:*/		return 0x8220CFF4;
		  /* 8220CFF4h */ case    4:  		/* addi R5, R11, -9280 */
		/* 8220CFF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDBC0);
		/* 8220CFF4h case    4:*/		return 0x8220CFF8;
		  /* 8220CFF8h */ case    5:  		/* mr R4, R30 */
		/* 8220CFF8h case    5:*/		regs.R4 = regs.R30;
		/* 8220CFF8h case    5:*/		return 0x8220CFFC;
		  /* 8220CFFCh */ case    6:  		/* li R7, 284 */
		/* 8220CFFCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x11C);
		/* 8220CFFCh case    6:*/		return 0x8220D000;
		  /* 8220D000h */ case    7:  		/* li R3, 0 */
		/* 8220D000h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D000h case    7:*/		return 0x8220D004;
		  /* 8220D004h */ case    8:  		/* bl -742396 */
		/* 8220D004h case    8:*/		regs.LR = 0x8220D008; return 0x82157C08;
		/* 8220D004h case    8:*/		return 0x8220D008;
	}
	return 0x8220D008;
} // Block from 8220CFE4h-8220D008h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D008);
		  /* 8220D008h */ case    0:  		/* lis R11, -32217 */
		/* 8220D008h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8220D008h case    0:*/		return 0x8220D00C;
		  /* 8220D00Ch */ case    1:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 8220D00Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 8220D00Ch case    1:*/		return 0x8220D010;
	}
	return 0x8220D010;
} // Block from 8220D008h-8220D010h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D010h
// Function '?FA_Create@XGRAPHICS@@YAPAU_FA_FETCHCONST_ALLOC@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SSM_REGISTRY@1@W4E_FA_FETCH_ALLOCATOR_MODE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D010);
		  /* 8220D010h */ case    0:  		/* addi R11, R11, 22680 */
		/* 8220D010h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5898);
		/* 8220D010h case    0:*/		return 0x8220D014;
		  /* 8220D014h */ case    1:  		/* li R7, 0 */
		/* 8220D014h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220D014h case    1:*/		return 0x8220D018;
		  /* 8220D018h */ case    2:  		/* li R6, 0 */
		/* 8220D018h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8220D018h case    2:*/		return 0x8220D01C;
		  /* 8220D01Ch */ case    3:  		/* li R5, 0 */
		/* 8220D01Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220D01Ch case    3:*/		return 0x8220D020;
		  /* 8220D020h */ case    4:  		/* mr R4, R28 */
		/* 8220D020h case    4:*/		regs.R4 = regs.R28;
		/* 8220D020h case    4:*/		return 0x8220D024;
		  /* 8220D024h */ case    5:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8220D024h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220D024h case    5:*/		return 0x8220D028;
		  /* 8220D028h */ case    6:  		/* mr R3, R27 */
		/* 8220D028h case    6:*/		regs.R3 = regs.R27;
		/* 8220D028h case    6:*/		return 0x8220D02C;
		  /* 8220D02Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8220D02Ch case    7:*/		regs.CTR = regs.R11;
		/* 8220D02Ch case    7:*/		return 0x8220D030;
		  /* 8220D030h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8220D030h case    8:*/		if ( 1 ) { regs.LR = 0x8220D034; return (uint32)regs.CTR; }
		/* 8220D030h case    8:*/		return 0x8220D034;
		  /* 8220D034h */ case    9:  		/* addi R1, R1, 128 */
		/* 8220D034h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220D034h case    9:*/		return 0x8220D038;
		  /* 8220D038h */ case   10:  		/* b -1555860 */
		/* 8220D038h case   10:*/		return 0x820912A4;
		/* 8220D038h case   10:*/		return 0x8220D03C;
		  /* 8220D03Ch */ case   11:  		/* nop */
		/* 8220D03Ch case   11:*/		cpu::op::nop();
		/* 8220D03Ch case   11:*/		return 0x8220D040;
	}
	return 0x8220D040;
} // Block from 8220D010h-8220D040h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220D040h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D040);
		  /* 8220D040h */ case    0:  		/* mfspr R12, LR */
		/* 8220D040h case    0:*/		regs.R12 = regs.LR;
		/* 8220D040h case    0:*/		return 0x8220D044;
		  /* 8220D044h */ case    1:  		/* bl -1555952 */
		/* 8220D044h case    1:*/		regs.LR = 0x8220D048; return 0x82091254;
		/* 8220D044h case    1:*/		return 0x8220D048;
		  /* 8220D048h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220D048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220D048h case    2:*/		return 0x8220D04C;
		  /* 8220D04Ch */ case    3:  		/* mr R28, R3 */
		/* 8220D04Ch case    3:*/		regs.R28 = regs.R3;
		/* 8220D04Ch case    3:*/		return 0x8220D050;
		  /* 8220D050h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220D050h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D050h case    4:*/		return 0x8220D054;
		  /* 8220D054h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8220D054h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220D078;  }
		/* 8220D054h case    5:*/		return 0x8220D058;
		  /* 8220D058h */ case    6:  		/* lis R11, -32252 */
		/* 8220D058h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D058h case    6:*/		return 0x8220D05C;
		  /* 8220D05Ch */ case    7:  		/* lis R10, -32252 */
		/* 8220D05Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D05Ch case    7:*/		return 0x8220D060;
		  /* 8220D060h */ case    8:  		/* lis R9, -32253 */
		/* 8220D060h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220D060h case    8:*/		return 0x8220D064;
		  /* 8220D064h */ case    9:  		/* addi R6, R11, -9248 */
		/* 8220D064h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFDBE0);
		/* 8220D064h case    9:*/		return 0x8220D068;
		  /* 8220D068h */ case   10:  		/* addi R5, R10, -9252 */
		/* 8220D068h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDBDC);
		/* 8220D068h case   10:*/		return 0x8220D06C;
		  /* 8220D06Ch */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220D06Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220D06Ch case   11:*/		return 0x8220D070;
		  /* 8220D070h */ case   12:  		/* li R7, 285 */
		/* 8220D070h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x11D);
		/* 8220D070h case   12:*/		return 0x8220D074;
		  /* 8220D074h */ case   13:  		/* bl -742508 */
		/* 8220D074h case   13:*/		regs.LR = 0x8220D078; return 0x82157C08;
		/* 8220D074h case   13:*/		return 0x8220D078;
	}
	return 0x8220D078;
} // Block from 8220D040h-8220D078h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220D078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D078);
		  /* 8220D078h */ case    0:  		/* lwz R3, <#[R28 + 24]> */
		/* 8220D078h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000018) );
		/* 8220D078h case    0:*/		return 0x8220D07C;
		  /* 8220D07Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220D07Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D07Ch case    1:*/		return 0x8220D080;
		  /* 8220D080h */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 8220D080h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220D100;  }
		/* 8220D080h case    2:*/		return 0x8220D084;
		  /* 8220D084h */ case    3:  		/* b 104 */
		/* 8220D084h case    3:*/		return 0x8220D0EC;
		/* 8220D084h case    3:*/		return 0x8220D088;
		  /* 8220D088h */ case    4:  		/* mr R3, R30 */
		/* 8220D088h case    4:*/		regs.R3 = regs.R30;
		/* 8220D088h case    4:*/		return 0x8220D08C;
		  /* 8220D08Ch */ case    5:  		/* bl -721564 */
		/* 8220D08Ch case    5:*/		regs.LR = 0x8220D090; return 0x8215CDF0;
		/* 8220D08Ch case    5:*/		return 0x8220D090;
		  /* 8220D090h */ case    6:  		/* mr R29, R3 */
		/* 8220D090h case    6:*/		regs.R29 = regs.R3;
		/* 8220D090h case    6:*/		return 0x8220D094;
		  /* 8220D094h */ case    7:  		/* b 52 */
		/* 8220D094h case    7:*/		return 0x8220D0C8;
		/* 8220D094h case    7:*/		return 0x8220D098;
		  /* 8220D098h */ case    8:  		/* mr R3, R31 */
		/* 8220D098h case    8:*/		regs.R3 = regs.R31;
		/* 8220D098h case    8:*/		return 0x8220D09C;
		  /* 8220D09Ch */ case    9:  		/* bl -721580 */
		/* 8220D09Ch case    9:*/		regs.LR = 0x8220D0A0; return 0x8215CDF0;
		/* 8220D09Ch case    9:*/		return 0x8220D0A0;
		  /* 8220D0A0h */ case   10:  		/* mr R27, R3 */
		/* 8220D0A0h case   10:*/		regs.R27 = regs.R3;
		/* 8220D0A0h case   10:*/		return 0x8220D0A4;
		  /* 8220D0A4h */ case   11:  		/* lwz R3, <#[R3]> */
		/* 8220D0A4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220D0A4h case   11:*/		return 0x8220D0A8;
		  /* 8220D0A8h */ case   12:  		/* bl -720528 */
		/* 8220D0A8h case   12:*/		regs.LR = 0x8220D0AC; return 0x8215D218;
		/* 8220D0A8h case   12:*/		return 0x8220D0AC;
		  /* 8220D0ACh */ case   13:  		/* lwz R3, <#[R27 + 4]> */
		/* 8220D0ACh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000004) );
		/* 8220D0ACh case   13:*/		return 0x8220D0B0;
		  /* 8220D0B0h */ case   14:  		/* bl -720536 */
		/* 8220D0B0h case   14:*/		regs.LR = 0x8220D0B4; return 0x8215D218;
		/* 8220D0B0h case   14:*/		return 0x8220D0B4;
		  /* 8220D0B4h */ case   15:  		/* mr R4, R27 */
		/* 8220D0B4h case   15:*/		regs.R4 = regs.R27;
		/* 8220D0B4h case   15:*/		return 0x8220D0B8;
		  /* 8220D0B8h */ case   16:  		/* lwz R3, <#[R28 + 28]> */
		/* 8220D0B8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000001C) );
		/* 8220D0B8h case   16:*/		return 0x8220D0BC;
		  /* 8220D0BCh */ case   17:  		/* bl -5828 */
		/* 8220D0BCh case   17:*/		regs.LR = 0x8220D0C0; return 0x8220B9F8;
		/* 8220D0BCh case   17:*/		return 0x8220D0C0;
		  /* 8220D0C0h */ case   18:  		/* mr R3, R31 */
		/* 8220D0C0h case   18:*/		regs.R3 = regs.R31;
		/* 8220D0C0h case   18:*/		return 0x8220D0C4;
		  /* 8220D0C4h */ case   19:  		/* bl -721676 */
		/* 8220D0C4h case   19:*/		regs.LR = 0x8220D0C8; return 0x8215CDB8;
		/* 8220D0C4h case   19:*/		return 0x8220D0C8;
	}
	return 0x8220D0C8;
} // Block from 8220D078h-8220D0C8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220D0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D0C8);
		  /* 8220D0C8h */ case    0:  		/* mr R3, R29 */
		/* 8220D0C8h case    0:*/		regs.R3 = regs.R29;
		/* 8220D0C8h case    0:*/		return 0x8220D0CC;
		  /* 8220D0CCh */ case    1:  		/* bl -722412 */
		/* 8220D0CCh case    1:*/		regs.LR = 0x8220D0D0; return 0x8215CAE0;
		/* 8220D0CCh case    1:*/		return 0x8220D0D0;
		  /* 8220D0D0h */ case    2:  		/* or. R31, R3, R3 */
		/* 8220D0D0h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220D0D0h case    2:*/		return 0x8220D0D4;
		  /* 8220D0D4h */ case    3:  		/* bc 4, CR0_EQ, -60 */
		/* 8220D0D4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220D098;  }
		/* 8220D0D4h case    3:*/		return 0x8220D0D8;
		  /* 8220D0D8h */ case    4:  		/* mr R3, R29 */
		/* 8220D0D8h case    4:*/		regs.R3 = regs.R29;
		/* 8220D0D8h case    4:*/		return 0x8220D0DC;
		  /* 8220D0DCh */ case    5:  		/* bl -723636 */
		/* 8220D0DCh case    5:*/		regs.LR = 0x8220D0E0; return 0x8215C628;
		/* 8220D0DCh case    5:*/		return 0x8220D0E0;
		  /* 8220D0E0h */ case    6:  		/* mr R3, R30 */
		/* 8220D0E0h case    6:*/		regs.R3 = regs.R30;
		/* 8220D0E0h case    6:*/		return 0x8220D0E4;
		  /* 8220D0E4h */ case    7:  		/* bl -721708 */
		/* 8220D0E4h case    7:*/		regs.LR = 0x8220D0E8; return 0x8215CDB8;
		/* 8220D0E4h case    7:*/		return 0x8220D0E8;
		  /* 8220D0E8h */ case    8:  		/* lwz R3, <#[R28 + 24]> */
		/* 8220D0E8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000018) );
		/* 8220D0E8h case    8:*/		return 0x8220D0EC;
	}
	return 0x8220D0EC;
} // Block from 8220D0C8h-8220D0ECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D0EC);
		  /* 8220D0ECh */ case    0:  		/* bl -722444 */
		/* 8220D0ECh case    0:*/		regs.LR = 0x8220D0F0; return 0x8215CAE0;
		/* 8220D0ECh case    0:*/		return 0x8220D0F0;
		  /* 8220D0F0h */ case    1:  		/* or. R30, R3, R3 */
		/* 8220D0F0h case    1:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220D0F0h case    1:*/		return 0x8220D0F4;
		  /* 8220D0F4h */ case    2:  		/* bc 4, CR0_EQ, -108 */
		/* 8220D0F4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220D088;  }
		/* 8220D0F4h case    2:*/		return 0x8220D0F8;
		  /* 8220D0F8h */ case    3:  		/* lwz R3, <#[R28 + 24]> */
		/* 8220D0F8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000018) );
		/* 8220D0F8h case    3:*/		return 0x8220D0FC;
		  /* 8220D0FCh */ case    4:  		/* bl -723668 */
		/* 8220D0FCh case    4:*/		regs.LR = 0x8220D100; return 0x8215C628;
		/* 8220D0FCh case    4:*/		return 0x8220D100;
	}
	return 0x8220D100;
} // Block from 8220D0ECh-8220D100h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220D100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D100);
		  /* 8220D100h */ case    0:  		/* lwz R3, <#[R28 + 20]> */
		/* 8220D100h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000014) );
		/* 8220D100h case    0:*/		return 0x8220D104;
		  /* 8220D104h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220D104h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D104h case    1:*/		return 0x8220D108;
		  /* 8220D108h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220D108h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220D110;  }
		/* 8220D108h case    2:*/		return 0x8220D10C;
		  /* 8220D10Ch */ case    3:  		/* bl 164012 */
		/* 8220D10Ch case    3:*/		regs.LR = 0x8220D110; return 0x822351B8;
		/* 8220D10Ch case    3:*/		return 0x8220D110;
	}
	return 0x8220D110;
} // Block from 8220D100h-8220D110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220D110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D110);
		  /* 8220D110h */ case    0:  		/* lwz R3, <#[R28 + 28]> */
		/* 8220D110h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000001C) );
		/* 8220D110h case    0:*/		return 0x8220D114;
		  /* 8220D114h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8220D114h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D114h case    1:*/		return 0x8220D118;
		  /* 8220D118h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8220D118h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220D120;  }
		/* 8220D118h case    2:*/		return 0x8220D11C;
		  /* 8220D11Ch */ case    3:  		/* bl -6284 */
		/* 8220D11Ch case    3:*/		regs.LR = 0x8220D120; return 0x8220B890;
		/* 8220D11Ch case    3:*/		return 0x8220D120;
	}
	return 0x8220D120;
} // Block from 8220D110h-8220D120h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220D120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D120);
		  /* 8220D120h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8220D120h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8220D120h case    0:*/		return 0x8220D124;
		  /* 8220D124h */ case    1:  		/* mr R4, R28 */
		/* 8220D124h case    1:*/		regs.R4 = regs.R28;
		/* 8220D124h case    1:*/		return 0x8220D128;
		  /* 8220D128h */ case    2:  		/* lwz R3, <#[R28]> */
		/* 8220D128h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 8220D128h case    2:*/		return 0x8220D12C;
		  /* 8220D12Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8220D12Ch case    3:*/		regs.CTR = regs.R11;
		/* 8220D12Ch case    3:*/		return 0x8220D130;
		  /* 8220D130h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220D130h case    4:*/		if ( 1 ) { regs.LR = 0x8220D134; return (uint32)regs.CTR; }
		/* 8220D130h case    4:*/		return 0x8220D134;
		  /* 8220D134h */ case    5:  		/* li R3, 0 */
		/* 8220D134h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D134h case    5:*/		return 0x8220D138;
		  /* 8220D138h */ case    6:  		/* addi R1, R1, 128 */
		/* 8220D138h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220D138h case    6:*/		return 0x8220D13C;
		  /* 8220D13Ch */ case    7:  		/* b -1556120 */
		/* 8220D13Ch case    7:*/		return 0x820912A4;
		/* 8220D13Ch case    7:*/		return 0x8220D140;
	}
	return 0x8220D140;
} // Block from 8220D120h-8220D140h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220D140h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D140);
		  /* 8220D140h */ case    0:  		/* mfspr R12, LR */
		/* 8220D140h case    0:*/		regs.R12 = regs.LR;
		/* 8220D140h case    0:*/		return 0x8220D144;
		  /* 8220D144h */ case    1:  		/* bl -1556212 */
		/* 8220D144h case    1:*/		regs.LR = 0x8220D148; return 0x82091250;
		/* 8220D144h case    1:*/		return 0x8220D148;
		  /* 8220D148h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220D148h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220D148h case    2:*/		return 0x8220D14C;
		  /* 8220D14Ch */ case    3:  		/* li R9, 0 */
		/* 8220D14Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8220D14Ch case    3:*/		return 0x8220D150;
		  /* 8220D150h */ case    4:  		/* lis R11, -32253 */
		/* 8220D150h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220D150h case    4:*/		return 0x8220D154;
		  /* 8220D154h */ case    5:  		/* lis R10, -32252 */
		/* 8220D154h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D154h case    5:*/		return 0x8220D158;
		  /* 8220D158h */ case    6:  		/* stw R9, <#[R1 + 80]> */
		/* 8220D158h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8220D158h case    6:*/		return 0x8220D15C;
		  /* 8220D15Ch */ case    7:  		/* mr R31, R3 */
		/* 8220D15Ch case    7:*/		regs.R31 = regs.R3;
		/* 8220D15Ch case    7:*/		return 0x8220D160;
	}
	return 0x8220D160;
} // Block from 8220D140h-8220D160h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220D160h
// Function '?FA_Destroy@XGRAPHICS@@YAXPAU_FA_FETCHCONST_ALLOC@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D160);
		  /* 8220D160h */ case    0:  		/* mr R30, R4 */
		/* 8220D160h case    0:*/		regs.R30 = regs.R4;
		/* 8220D160h case    0:*/		return 0x8220D164;
		  /* 8220D164h */ case    1:  		/* mr R29, R5 */
		/* 8220D164h case    1:*/		regs.R29 = regs.R5;
		/* 8220D164h case    1:*/		return 0x8220D168;
		  /* 8220D168h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8220D168h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D168h case    2:*/		return 0x8220D16C;
		  /* 8220D16Ch */ case    3:  		/* addi R27, R11, 27460 */
		/* 8220D16Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8220D16Ch case    3:*/		return 0x8220D170;
		  /* 8220D170h */ case    4:  		/* addi R26, R10, -9248 */
		/* 8220D170h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFDBE0);
		/* 8220D170h case    4:*/		return 0x8220D174;
		  /* 8220D174h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D174h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220D194;  }
		/* 8220D174h case    5:*/		return 0x8220D178;
	}
	return 0x8220D178;
} // Block from 8220D160h-8220D178h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220D178h
// Function '?FA_GetMode@XGRAPHICS@@YA?AW4E_FA_FETCH_ALLOCATOR_MODE@1@PAU_FA_FETCHCONST_ALLOC@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D178);
		  /* 8220D178h */ case    0:  		/* lis R11, -32252 */
		/* 8220D178h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D178h case    0:*/		return 0x8220D17C;
		  /* 8220D17Ch */ case    1:  		/* mr R6, R26 */
		/* 8220D17Ch case    1:*/		regs.R6 = regs.R26;
		/* 8220D17Ch case    1:*/		return 0x8220D180;
	}
	return 0x8220D180;
} // Block from 8220D178h-8220D180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D180h
// Function '?FA_GetNumAllocatedConsts@XGRAPHICS@@YAIPAU_FA_FETCHCONST_ALLOC@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D180);
		  /* 8220D180h */ case    0:  		/* addi R5, R11, -9252 */
		/* 8220D180h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDBDC);
		/* 8220D180h case    0:*/		return 0x8220D184;
		  /* 8220D184h */ case    1:  		/* mr R4, R27 */
		/* 8220D184h case    1:*/		regs.R4 = regs.R27;
		/* 8220D184h case    1:*/		return 0x8220D188;
	}
	return 0x8220D188;
} // Block from 8220D180h-8220D188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D188h
// Function '?FA_AllocFetchConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_FA_FETCHCONST_ALLOC@1@W4E_FETCH_TYPE@1@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D188);
		  /* 8220D188h */ case    0:  		/* li R7, 371 */
		/* 8220D188h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x173);
		/* 8220D188h case    0:*/		return 0x8220D18C;
		  /* 8220D18Ch */ case    1:  		/* li R3, 0 */
		/* 8220D18Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D18Ch case    1:*/		return 0x8220D190;
		  /* 8220D190h */ case    2:  		/* bl -742792 */
		/* 8220D190h case    2:*/		regs.LR = 0x8220D194; return 0x82157C08;
		/* 8220D190h case    2:*/		return 0x8220D194;
	}
	return 0x8220D194;
} // Block from 8220D188h-8220D194h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220D194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D194);
		  /* 8220D194h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220D194h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220D194h case    0:*/		return 0x8220D198;
		  /* 8220D198h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D198h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D1B8;  }
		/* 8220D198h case    1:*/		return 0x8220D19C;
		  /* 8220D19Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220D19Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D19Ch case    2:*/		return 0x8220D1A0;
		  /* 8220D1A0h */ case    3:  		/* mr R6, R26 */
		/* 8220D1A0h case    3:*/		regs.R6 = regs.R26;
		/* 8220D1A0h case    3:*/		return 0x8220D1A4;
		  /* 8220D1A4h */ case    4:  		/* addi R5, R11, -9040 */
		/* 8220D1A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCB0);
		/* 8220D1A4h case    4:*/		return 0x8220D1A8;
		  /* 8220D1A8h */ case    5:  		/* mr R4, R27 */
		/* 8220D1A8h case    5:*/		regs.R4 = regs.R27;
		/* 8220D1A8h case    5:*/		return 0x8220D1AC;
		  /* 8220D1ACh */ case    6:  		/* li R7, 372 */
		/* 8220D1ACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x174);
		/* 8220D1ACh case    6:*/		return 0x8220D1B0;
		  /* 8220D1B0h */ case    7:  		/* li R3, 0 */
		/* 8220D1B0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D1B0h case    7:*/		return 0x8220D1B4;
		  /* 8220D1B4h */ case    8:  		/* bl -742828 */
		/* 8220D1B4h case    8:*/		regs.LR = 0x8220D1B8; return 0x82157C08;
		/* 8220D1B4h case    8:*/		return 0x8220D1B8;
	}
	return 0x8220D1B8;
} // Block from 8220D194h-8220D1B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D1B8);
		  /* 8220D1B8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8220D1B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220D1B8h case    0:*/		return 0x8220D1BC;
		  /* 8220D1BCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D1BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D1DC;  }
		/* 8220D1BCh case    1:*/		return 0x8220D1C0;
		  /* 8220D1C0h */ case    2:  		/* lis R11, -32252 */
		/* 8220D1C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D1C0h case    2:*/		return 0x8220D1C4;
		  /* 8220D1C4h */ case    3:  		/* mr R6, R26 */
		/* 8220D1C4h case    3:*/		regs.R6 = regs.R26;
		/* 8220D1C4h case    3:*/		return 0x8220D1C8;
		  /* 8220D1C8h */ case    4:  		/* addi R5, R11, -9048 */
		/* 8220D1C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCA8);
		/* 8220D1C8h case    4:*/		return 0x8220D1CC;
		  /* 8220D1CCh */ case    5:  		/* mr R4, R27 */
		/* 8220D1CCh case    5:*/		regs.R4 = regs.R27;
		/* 8220D1CCh case    5:*/		return 0x8220D1D0;
		  /* 8220D1D0h */ case    6:  		/* li R7, 373 */
		/* 8220D1D0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x175);
		/* 8220D1D0h case    6:*/		return 0x8220D1D4;
		  /* 8220D1D4h */ case    7:  		/* li R3, 0 */
		/* 8220D1D4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D1D4h case    7:*/		return 0x8220D1D8;
		  /* 8220D1D8h */ case    8:  		/* bl -742864 */
		/* 8220D1D8h case    8:*/		regs.LR = 0x8220D1DC; return 0x82157C08;
		/* 8220D1D8h case    8:*/		return 0x8220D1DC;
	}
	return 0x8220D1DC;
} // Block from 8220D1B8h-8220D1DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D1DC);
		  /* 8220D1DCh */ case    0:  		/* li R4, 10 */
		/* 8220D1DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 8220D1DCh case    0:*/		return 0x8220D1E0;
		  /* 8220D1E0h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220D1E0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220D1E0h case    1:*/		return 0x8220D1E4;
		  /* 8220D1E4h */ case    2:  		/* bl -12380 */
		/* 8220D1E4h case    2:*/		regs.LR = 0x8220D1E8; return 0x8220A188;
		/* 8220D1E4h case    2:*/		return 0x8220D1E8;
		  /* 8220D1E8h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8220D1E8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D1E8h case    3:*/		return 0x8220D1EC;
		  /* 8220D1ECh */ case    4:  		/* bc 12, CR0_EQ, 336 */
		/* 8220D1ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x8220D33C;  }
		/* 8220D1ECh case    4:*/		return 0x8220D1F0;
		  /* 8220D1F0h */ case    5:  		/* mr R3, R30 */
		/* 8220D1F0h case    5:*/		regs.R3 = regs.R30;
		/* 8220D1F0h case    5:*/		return 0x8220D1F4;
		  /* 8220D1F4h */ case    6:  		/* bl -720388 */
		/* 8220D1F4h case    6:*/		regs.LR = 0x8220D1F8; return 0x8215D3F0;
		/* 8220D1F4h case    6:*/		return 0x8220D1F8;
		  /* 8220D1F8h */ case    7:  		/* mr R3, R29 */
		/* 8220D1F8h case    7:*/		regs.R3 = regs.R29;
		/* 8220D1F8h case    7:*/		return 0x8220D1FC;
		  /* 8220D1FCh */ case    8:  		/* bl -720396 */
		/* 8220D1FCh case    8:*/		regs.LR = 0x8220D200; return 0x8215D3F0;
		/* 8220D1FCh case    8:*/		return 0x8220D200;
		  /* 8220D200h */ case    9:  		/* lwz R3, <#[R31 + 28]> */
		/* 8220D200h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220D200h case    9:*/		return 0x8220D204;
		  /* 8220D204h */ case   10:  		/* bl -6420 */
		/* 8220D204h case   10:*/		regs.LR = 0x8220D208; return 0x8220B8F0;
		/* 8220D204h case   10:*/		return 0x8220D208;
		  /* 8220D208h */ case   11:  		/* or. R28, R3, R3 */
		/* 8220D208h case   11:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8220D208h case   11:*/		return 0x8220D20C;
		  /* 8220D20Ch */ case   12:  		/* bc 4, CR0_EQ, 56 */
		/* 8220D20Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8220D244;  }
		/* 8220D20Ch case   12:*/		return 0x8220D210;
		  /* 8220D210h */ case   13:  		/* lis R11, -32252 */
		/* 8220D210h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D210h case   13:*/		return 0x8220D214;
		  /* 8220D214h */ case   14:  		/* mr R6, R26 */
		/* 8220D214h case   14:*/		regs.R6 = regs.R26;
		/* 8220D214h case   14:*/		return 0x8220D218;
		  /* 8220D218h */ case   15:  		/* addi R5, R11, -9120 */
		/* 8220D218h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDC60);
		/* 8220D218h case   15:*/		return 0x8220D21C;
		  /* 8220D21Ch */ case   16:  		/* mr R4, R27 */
		/* 8220D21Ch case   16:*/		regs.R4 = regs.R27;
		/* 8220D21Ch case   16:*/		return 0x8220D220;
		  /* 8220D220h */ case   17:  		/* li R7, 389 */
		/* 8220D220h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x185);
		/* 8220D220h case   17:*/		return 0x8220D224;
		  /* 8220D224h */ case   18:  		/* li R3, 0 */
		/* 8220D224h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D224h case   18:*/		return 0x8220D228;
		  /* 8220D228h */ case   19:  		/* bl -742944 */
		/* 8220D228h case   19:*/		regs.LR = 0x8220D22C; return 0x82157C08;
		/* 8220D228h case   19:*/		return 0x8220D22C;
		  /* 8220D22Ch */ case   20:  		/* mr R3, R30 */
		/* 8220D22Ch case   20:*/		regs.R3 = regs.R30;
		/* 8220D22Ch case   20:*/		return 0x8220D230;
		  /* 8220D230h */ case   21:  		/* bl -720920 */
		/* 8220D230h case   21:*/		regs.LR = 0x8220D234; return 0x8215D218;
		/* 8220D230h case   21:*/		return 0x8220D234;
		  /* 8220D234h */ case   22:  		/* mr R3, R29 */
		/* 8220D234h case   22:*/		regs.R3 = regs.R29;
		/* 8220D234h case   22:*/		return 0x8220D238;
		  /* 8220D238h */ case   23:  		/* bl -720928 */
		/* 8220D238h case   23:*/		regs.LR = 0x8220D23C; return 0x8215D218;
		/* 8220D238h case   23:*/		return 0x8220D23C;
		  /* 8220D23Ch */ case   24:  		/* li R3, 16 */
		/* 8220D23Ch case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8220D23Ch case   24:*/		return 0x8220D240;
		  /* 8220D240h */ case   25:  		/* b 256 */
		/* 8220D240h case   25:*/		return 0x8220D340;
		/* 8220D240h case   25:*/		return 0x8220D244;
	}
	return 0x8220D244;
} // Block from 8220D1DCh-8220D244h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8220D244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D244);
		  /* 8220D244h */ case    0:  		/* stw R30, <#[R28]> */
		/* 8220D244h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 8220D244h case    0:*/		return 0x8220D248;
		  /* 8220D248h */ case    1:  		/* mr R3, R30 */
		/* 8220D248h case    1:*/		regs.R3 = regs.R30;
		/* 8220D248h case    1:*/		return 0x8220D24C;
		  /* 8220D24Ch */ case    2:  		/* stw R29, <#[R28 + 4]> */
		/* 8220D24Ch case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000004) );
		/* 8220D24Ch case    2:*/		return 0x8220D250;
		  /* 8220D250h */ case    3:  		/* bl -719944 */
		/* 8220D250h case    3:*/		regs.LR = 0x8220D254; return 0x8215D608;
		/* 8220D250h case    3:*/		return 0x8220D254;
		  /* 8220D254h */ case    4:  		/* stw R3, <#[R1 + 88]> */
		/* 8220D254h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 8220D254h case    4:*/		return 0x8220D258;
		  /* 8220D258h */ case    5:  		/* mr R3, R29 */
		/* 8220D258h case    5:*/		regs.R3 = regs.R29;
		/* 8220D258h case    5:*/		return 0x8220D25C;
		  /* 8220D25Ch */ case    6:  		/* bl -719956 */
		/* 8220D25Ch case    6:*/		regs.LR = 0x8220D260; return 0x8215D608;
		/* 8220D25Ch case    6:*/		return 0x8220D260;
		  /* 8220D260h */ case    7:  		/* stw R3, <#[R1 + 92]> */
		/* 8220D260h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 8220D260h case    7:*/		return 0x8220D264;
		  /* 8220D264h */ case    8:  		/* addi R6, R1, 80 */
		/* 8220D264h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8220D264h case    8:*/		return 0x8220D268;
		  /* 8220D268h */ case    9:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220D268h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220D268h case    9:*/		return 0x8220D26C;
		  /* 8220D26Ch */ case   10:  		/* li R5, 2 */
		/* 8220D26Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8220D26Ch case   10:*/		return 0x8220D270;
		  /* 8220D270h */ case   11:  		/* addi R4, R1, 88 */
		/* 8220D270h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8220D270h case   11:*/		return 0x8220D274;
		  /* 8220D274h */ case   12:  		/* bl 162420 */
		/* 8220D274h case   12:*/		regs.LR = 0x8220D278; return 0x82234CE8;
		/* 8220D274h case   12:*/		return 0x8220D278;
		  /* 8220D278h */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 8220D278h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D278h case   13:*/		return 0x8220D27C;
		  /* 8220D27Ch */ case   14:  		/* bc 12, CR0_EQ, 20 */
		/* 8220D27Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x8220D290;  }
		/* 8220D27Ch case   14:*/		return 0x8220D280;
		  /* 8220D280h */ case   15:  		/* lwz R3, <#[R1 + 80]> */
		/* 8220D280h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8220D280h case   15:*/		return 0x8220D284;
		  /* 8220D284h */ case   16:  		/* bl 162596 */
		/* 8220D284h case   16:*/		regs.LR = 0x8220D288; return 0x82234DA8;
		/* 8220D284h case   16:*/		return 0x8220D288;
		  /* 8220D288h */ case   17:  		/* mr R30, R3 */
		/* 8220D288h case   17:*/		regs.R30 = regs.R3;
		/* 8220D288h case   17:*/		return 0x8220D28C;
		  /* 8220D28Ch */ case   18:  		/* b 92 */
		/* 8220D28Ch case   18:*/		return 0x8220D2E8;
		/* 8220D28Ch case   18:*/		return 0x8220D290;
	}
	return 0x8220D290;
} // Block from 8220D244h-8220D290h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220D290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D290);
		  /* 8220D290h */ case    0:  		/* li R6, 10 */
		/* 8220D290h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8220D290h case    0:*/		return 0x8220D294;
		  /* 8220D294h */ case    1:  		/* lwz R5, <#[R31 + 8]> */
		/* 8220D294h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8220D294h case    1:*/		return 0x8220D298;
		  /* 8220D298h */ case    2:  		/* lwz R4, <#[R31 + 4]> */
		/* 8220D298h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D298h case    2:*/		return 0x8220D29C;
		  /* 8220D29Ch */ case    3:  		/* lwz R3, <#[R31]> */
		/* 8220D29Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220D29Ch case    3:*/		return 0x8220D2A0;
		  /* 8220D2A0h */ case    4:  		/* bl -721776 */
		/* 8220D2A0h case    4:*/		regs.LR = 0x8220D2A4; return 0x8215CF30;
		/* 8220D2A0h case    4:*/		return 0x8220D2A4;
		  /* 8220D2A4h */ case    5:  		/* or. R30, R3, R3 */
		/* 8220D2A4h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220D2A4h case    5:*/		return 0x8220D2A8;
		  /* 8220D2A8h */ case    6:  		/* bc 4, CR0_EQ, 32 */
		/* 8220D2A8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8220D2C8;  }
		/* 8220D2A8h case    6:*/		return 0x8220D2AC;
		  /* 8220D2ACh */ case    7:  		/* lis R11, -32252 */
		/* 8220D2ACh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D2ACh case    7:*/		return 0x8220D2B0;
		  /* 8220D2B0h */ case    8:  		/* mr R6, R26 */
		/* 8220D2B0h case    8:*/		regs.R6 = regs.R26;
		/* 8220D2B0h case    8:*/		return 0x8220D2B4;
		  /* 8220D2B4h */ case    9:  		/* addi R5, R11, -9140 */
		/* 8220D2B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDC4C);
		/* 8220D2B4h case    9:*/		return 0x8220D2B8;
		  /* 8220D2B8h */ case   10:  		/* mr R4, R27 */
		/* 8220D2B8h case   10:*/		regs.R4 = regs.R27;
		/* 8220D2B8h case   10:*/		return 0x8220D2BC;
		  /* 8220D2BCh */ case   11:  		/* li R7, 422 */
		/* 8220D2BCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1A6);
		/* 8220D2BCh case   11:*/		return 0x8220D2C0;
		  /* 8220D2C0h */ case   12:  		/* li R3, 0 */
		/* 8220D2C0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D2C0h case   12:*/		return 0x8220D2C4;
		  /* 8220D2C4h */ case   13:  		/* bl -743100 */
		/* 8220D2C4h case   13:*/		regs.LR = 0x8220D2C8; return 0x82157C08;
		/* 8220D2C4h case   13:*/		return 0x8220D2C8;
	}
	return 0x8220D2C8;
} // Block from 8220D290h-8220D2C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220D2C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D2C8);
		  /* 8220D2C8h */ case    0:  		/* mr R4, R30 */
		/* 8220D2C8h case    0:*/		regs.R4 = regs.R30;
		/* 8220D2C8h case    0:*/		return 0x8220D2CC;
		  /* 8220D2CCh */ case    1:  		/* lwz R3, <#[R31 + 24]> */
		/* 8220D2CCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220D2CCh case    1:*/		return 0x8220D2D0;
		  /* 8220D2D0h */ case    2:  		/* bl -723232 */
		/* 8220D2D0h case    2:*/		regs.LR = 0x8220D2D4; return 0x8215C9B0;
		/* 8220D2D0h case    2:*/		return 0x8220D2D4;
		  /* 8220D2D4h */ case    3:  		/* mr R6, R30 */
		/* 8220D2D4h case    3:*/		regs.R6 = regs.R30;
		/* 8220D2D4h case    3:*/		return 0x8220D2D8;
		  /* 8220D2D8h */ case    4:  		/* li R5, 2 */
		/* 8220D2D8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8220D2D8h case    4:*/		return 0x8220D2DC;
		  /* 8220D2DCh */ case    5:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220D2DCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220D2DCh case    5:*/		return 0x8220D2E0;
		  /* 8220D2E0h */ case    6:  		/* addi R4, R1, 88 */
		/* 8220D2E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8220D2E0h case    6:*/		return 0x8220D2E4;
		  /* 8220D2E4h */ case    7:  		/* bl 162884 */
		/* 8220D2E4h case    7:*/		regs.LR = 0x8220D2E8; return 0x82234F28;
		/* 8220D2E4h case    7:*/		return 0x8220D2E8;
	}
	return 0x8220D2E8;
} // Block from 8220D2C8h-8220D2E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220D2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D2E8);
		  /* 8220D2E8h */ case    0:  		/* mr R4, R28 */
		/* 8220D2E8h case    0:*/		regs.R4 = regs.R28;
		/* 8220D2E8h case    0:*/		return 0x8220D2EC;
		  /* 8220D2ECh */ case    1:  		/* mr R3, R30 */
		/* 8220D2ECh case    1:*/		regs.R3 = regs.R30;
		/* 8220D2ECh case    1:*/		return 0x8220D2F0;
		  /* 8220D2F0h */ case    2:  		/* bl -723608 */
		/* 8220D2F0h case    2:*/		regs.LR = 0x8220D2F4; return 0x8215C858;
		/* 8220D2F0h case    2:*/		return 0x8220D2F4;
		  /* 8220D2F4h */ case    3:  		/* mr R3, R30 */
		/* 8220D2F4h case    3:*/		regs.R3 = regs.R30;
		/* 8220D2F4h case    3:*/		return 0x8220D2F8;
		  /* 8220D2F8h */ case    4:  		/* bl -723904 */
		/* 8220D2F8h case    4:*/		regs.LR = 0x8220D2FC; return 0x8215C738;
		/* 8220D2F8h case    4:*/		return 0x8220D2FC;
		  /* 8220D2FCh */ case    5:  		/* cmplwi CR6, R3, 10 */
		/* 8220D2FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000000A);
		/* 8220D2FCh case    5:*/		return 0x8220D300;
		  /* 8220D300h */ case    6:  		/* bc 4, CR6_GT, 60 */
		/* 8220D300h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8220D33C;  }
		/* 8220D300h case    6:*/		return 0x8220D304;
		  /* 8220D304h */ case    7:  		/* mr R3, R30 */
		/* 8220D304h case    7:*/		regs.R3 = regs.R30;
		/* 8220D304h case    7:*/		return 0x8220D308;
		  /* 8220D308h */ case    8:  		/* bl -722768 */
		/* 8220D308h case    8:*/		regs.LR = 0x8220D30C; return 0x8215CBB8;
		/* 8220D308h case    8:*/		return 0x8220D30C;
		  /* 8220D30Ch */ case    9:  		/* mr R30, R3 */
		/* 8220D30Ch case    9:*/		regs.R30 = regs.R3;
		/* 8220D30Ch case    9:*/		return 0x8220D310;
		  /* 8220D310h */ case   10:  		/* bl -722208 */
		/* 8220D310h case   10:*/		regs.LR = 0x8220D314; return 0x8215CDF0;
		/* 8220D310h case   10:*/		return 0x8220D314;
		  /* 8220D314h */ case   11:  		/* mr R29, R3 */
		/* 8220D314h case   11:*/		regs.R29 = regs.R3;
		/* 8220D314h case   11:*/		return 0x8220D318;
		  /* 8220D318h */ case   12:  		/* lwz R3, <#[R3]> */
		/* 8220D318h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220D318h case   12:*/		return 0x8220D31C;
		  /* 8220D31Ch */ case   13:  		/* bl -721156 */
		/* 8220D31Ch case   13:*/		regs.LR = 0x8220D320; return 0x8215D218;
		/* 8220D31Ch case   13:*/		return 0x8220D320;
		  /* 8220D320h */ case   14:  		/* lwz R3, <#[R29 + 4]> */
		/* 8220D320h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 8220D320h case   14:*/		return 0x8220D324;
		  /* 8220D324h */ case   15:  		/* bl -721164 */
		/* 8220D324h case   15:*/		regs.LR = 0x8220D328; return 0x8215D218;
		/* 8220D324h case   15:*/		return 0x8220D328;
		  /* 8220D328h */ case   16:  		/* mr R4, R29 */
		/* 8220D328h case   16:*/		regs.R4 = regs.R29;
		/* 8220D328h case   16:*/		return 0x8220D32C;
		  /* 8220D32Ch */ case   17:  		/* lwz R3, <#[R31 + 28]> */
		/* 8220D32Ch case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220D32Ch case   17:*/		return 0x8220D330;
		  /* 8220D330h */ case   18:  		/* bl -6456 */
		/* 8220D330h case   18:*/		regs.LR = 0x8220D334; return 0x8220B9F8;
		/* 8220D330h case   18:*/		return 0x8220D334;
		  /* 8220D334h */ case   19:  		/* mr R3, R30 */
		/* 8220D334h case   19:*/		regs.R3 = regs.R30;
		/* 8220D334h case   19:*/		return 0x8220D338;
	}
	return 0x8220D338;
} // Block from 8220D2E8h-8220D338h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220D338h
// Function '?FindVertexFetchConstUsingDecl@XGRAPHICS@@YAIPAU_FA_FETCHCONST_ALLOC@1@W4E_FETCH_TYPE@1@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D338);
		  /* 8220D338h */ case    0:  		/* bl -722304 */
		/* 8220D338h case    0:*/		regs.LR = 0x8220D33C; return 0x8215CDB8;
		/* 8220D338h case    0:*/		return 0x8220D33C;
	}
	return 0x8220D33C;
} // Block from 8220D338h-8220D33Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220D33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D33C);
		  /* 8220D33Ch */ case    0:  		/* li R3, 0 */
		/* 8220D33Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D33Ch case    0:*/		return 0x8220D340;
	}
	return 0x8220D340;
} // Block from 8220D33Ch-8220D340h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220D340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D340);
		  /* 8220D340h */ case    0:  		/* addi R1, R1, 160 */
		/* 8220D340h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220D340h case    0:*/		return 0x8220D344;
		  /* 8220D344h */ case    1:  		/* b -1556644 */
		/* 8220D344h case    1:*/		return 0x820912A0;
		/* 8220D344h case    1:*/		return 0x8220D348;
	}
	return 0x8220D348;
} // Block from 8220D340h-8220D348h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D348h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D348);
		  /* 8220D348h */ case    0:  		/* mfspr R12, LR */
		/* 8220D348h case    0:*/		regs.R12 = regs.LR;
		/* 8220D348h case    0:*/		return 0x8220D34C;
		  /* 8220D34Ch */ case    1:  		/* bl -1556740 */
		/* 8220D34Ch case    1:*/		regs.LR = 0x8220D350; return 0x82091248;
		/* 8220D34Ch case    1:*/		return 0x8220D350;
		  /* 8220D350h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220D350h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220D350h case    2:*/		return 0x8220D354;
		  /* 8220D354h */ case    3:  		/* lis R11, -32253 */
		/* 8220D354h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220D354h case    3:*/		return 0x8220D358;
		  /* 8220D358h */ case    4:  		/* lis R10, -32252 */
		/* 8220D358h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D358h case    4:*/		return 0x8220D35C;
		  /* 8220D35Ch */ case    5:  		/* mr R29, R3 */
		/* 8220D35Ch case    5:*/		regs.R29 = regs.R3;
		/* 8220D35Ch case    5:*/		return 0x8220D360;
		  /* 8220D360h */ case    6:  		/* mr R30, R4 */
		/* 8220D360h case    6:*/		regs.R30 = regs.R4;
		/* 8220D360h case    6:*/		return 0x8220D364;
		  /* 8220D364h */ case    7:  		/* mr R28, R5 */
		/* 8220D364h case    7:*/		regs.R28 = regs.R5;
		/* 8220D364h case    7:*/		return 0x8220D368;
		  /* 8220D368h */ case    8:  		/* mr R25, R6 */
		/* 8220D368h case    8:*/		regs.R25 = regs.R6;
		/* 8220D368h case    8:*/		return 0x8220D36C;
		  /* 8220D36Ch */ case    9:  		/* mr R24, R7 */
		/* 8220D36Ch case    9:*/		regs.R24 = regs.R7;
		/* 8220D36Ch case    9:*/		return 0x8220D370;
		  /* 8220D370h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 8220D370h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220D370h case   10:*/		return 0x8220D374;
		  /* 8220D374h */ case   11:  		/* addi R27, R11, 27460 */
		/* 8220D374h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8220D374h case   11:*/		return 0x8220D378;
		  /* 8220D378h */ case   12:  		/* addi R26, R10, -9248 */
		/* 8220D378h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFDBE0);
		/* 8220D378h case   12:*/		return 0x8220D37C;
		  /* 8220D37Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D37Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220D39C;  }
		/* 8220D37Ch case   13:*/		return 0x8220D380;
		  /* 8220D380h */ case   14:  		/* lis R11, -32252 */
		/* 8220D380h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D380h case   14:*/		return 0x8220D384;
		  /* 8220D384h */ case   15:  		/* mr R6, R26 */
		/* 8220D384h case   15:*/		regs.R6 = regs.R26;
		/* 8220D384h case   15:*/		return 0x8220D388;
		  /* 8220D388h */ case   16:  		/* addi R5, R11, -21620 */
		/* 8220D388h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220D388h case   16:*/		return 0x8220D38C;
		  /* 8220D38Ch */ case   17:  		/* mr R4, R27 */
		/* 8220D38Ch case   17:*/		regs.R4 = regs.R27;
		/* 8220D38Ch case   17:*/		return 0x8220D390;
		  /* 8220D390h */ case   18:  		/* li R7, 201 */
		/* 8220D390h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0xC9);
		/* 8220D390h case   18:*/		return 0x8220D394;
		  /* 8220D394h */ case   19:  		/* li R3, 0 */
		/* 8220D394h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D394h case   19:*/		return 0x8220D398;
		  /* 8220D398h */ case   20:  		/* bl -743312 */
		/* 8220D398h case   20:*/		regs.LR = 0x8220D39C; return 0x82157C08;
		/* 8220D398h case   20:*/		return 0x8220D39C;
	}
	return 0x8220D39C;
} // Block from 8220D348h-8220D39Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8220D39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D39C);
		  /* 8220D39Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220D39Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220D39Ch case    0:*/		return 0x8220D3A0;
		  /* 8220D3A0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D3A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D3C0;  }
		/* 8220D3A0h case    1:*/		return 0x8220D3A4;
		  /* 8220D3A4h */ case    2:  		/* lis R11, -32252 */
		/* 8220D3A4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D3A4h case    2:*/		return 0x8220D3A8;
		  /* 8220D3A8h */ case    3:  		/* mr R6, R26 */
		/* 8220D3A8h case    3:*/		regs.R6 = regs.R26;
		/* 8220D3A8h case    3:*/		return 0x8220D3AC;
		  /* 8220D3ACh */ case    4:  		/* addi R5, R11, -21632 */
		/* 8220D3ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220D3ACh case    4:*/		return 0x8220D3B0;
		  /* 8220D3B0h */ case    5:  		/* mr R4, R27 */
		/* 8220D3B0h case    5:*/		regs.R4 = regs.R27;
		/* 8220D3B0h case    5:*/		return 0x8220D3B4;
		  /* 8220D3B4h */ case    6:  		/* li R7, 202 */
		/* 8220D3B4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xCA);
		/* 8220D3B4h case    6:*/		return 0x8220D3B8;
		  /* 8220D3B8h */ case    7:  		/* li R3, 0 */
		/* 8220D3B8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D3B8h case    7:*/		return 0x8220D3BC;
		  /* 8220D3BCh */ case    8:  		/* bl -743348 */
		/* 8220D3BCh case    8:*/		regs.LR = 0x8220D3C0; return 0x82157C08;
		/* 8220D3BCh case    8:*/		return 0x8220D3C0;
	}
	return 0x8220D3C0;
} // Block from 8220D39Ch-8220D3C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D3C0);
		  /* 8220D3C0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220D3C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220D3C0h case    0:*/		return 0x8220D3C4;
		  /* 8220D3C4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D3C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D3E4;  }
		/* 8220D3C4h case    1:*/		return 0x8220D3C8;
		  /* 8220D3C8h */ case    2:  		/* lis R11, -32252 */
		/* 8220D3C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D3C8h case    2:*/		return 0x8220D3CC;
		  /* 8220D3CCh */ case    3:  		/* mr R6, R26 */
		/* 8220D3CCh case    3:*/		regs.R6 = regs.R26;
		/* 8220D3CCh case    3:*/		return 0x8220D3D0;
		  /* 8220D3D0h */ case    4:  		/* addi R5, R11, -18788 */
		/* 8220D3D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8220D3D0h case    4:*/		return 0x8220D3D4;
		  /* 8220D3D4h */ case    5:  		/* mr R4, R27 */
		/* 8220D3D4h case    5:*/		regs.R4 = regs.R27;
		/* 8220D3D4h case    5:*/		return 0x8220D3D8;
		  /* 8220D3D8h */ case    6:  		/* li R7, 203 */
		/* 8220D3D8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xCB);
		/* 8220D3D8h case    6:*/		return 0x8220D3DC;
		  /* 8220D3DCh */ case    7:  		/* li R3, 0 */
		/* 8220D3DCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D3DCh case    7:*/		return 0x8220D3E0;
		  /* 8220D3E0h */ case    8:  		/* bl -743384 */
		/* 8220D3E0h case    8:*/		regs.LR = 0x8220D3E4; return 0x82157C08;
		/* 8220D3E0h case    8:*/		return 0x8220D3E4;
	}
	return 0x8220D3E4;
} // Block from 8220D3C0h-8220D3E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D3E4);
		  /* 8220D3E4h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8220D3E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8220D3E4h case    0:*/		return 0x8220D3E8;
		  /* 8220D3E8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D3E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D408;  }
		/* 8220D3E8h case    1:*/		return 0x8220D3EC;
		  /* 8220D3ECh */ case    2:  		/* lis R11, -32252 */
		/* 8220D3ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D3ECh case    2:*/		return 0x8220D3F0;
		  /* 8220D3F0h */ case    3:  		/* mr R6, R26 */
		/* 8220D3F0h case    3:*/		regs.R6 = regs.R26;
		/* 8220D3F0h case    3:*/		return 0x8220D3F4;
		  /* 8220D3F4h */ case    4:  		/* addi R5, R11, -21104 */
		/* 8220D3F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 8220D3F4h case    4:*/		return 0x8220D3F8;
		  /* 8220D3F8h */ case    5:  		/* mr R4, R27 */
		/* 8220D3F8h case    5:*/		regs.R4 = regs.R27;
		/* 8220D3F8h case    5:*/		return 0x8220D3FC;
		  /* 8220D3FCh */ case    6:  		/* li R7, 204 */
		/* 8220D3FCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xCC);
		/* 8220D3FCh case    6:*/		return 0x8220D400;
		  /* 8220D400h */ case    7:  		/* li R3, 0 */
		/* 8220D400h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D400h case    7:*/		return 0x8220D404;
		  /* 8220D404h */ case    8:  		/* bl -743420 */
		/* 8220D404h case    8:*/		regs.LR = 0x8220D408; return 0x82157C08;
		/* 8220D404h case    8:*/		return 0x8220D408;
	}
	return 0x8220D408;
} // Block from 8220D3E4h-8220D408h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D408);
		  /* 8220D408h */ case    0:  		/* li R4, 32 */
		/* 8220D408h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8220D408h case    0:*/		return 0x8220D40C;
		  /* 8220D40Ch */ case    1:  		/* mtspr CTR, R30 */
		/* 8220D40Ch case    1:*/		regs.CTR = regs.R30;
		/* 8220D40Ch case    1:*/		return 0x8220D410;
		  /* 8220D410h */ case    2:  		/* mr R3, R29 */
		/* 8220D410h case    2:*/		regs.R3 = regs.R29;
		/* 8220D410h case    2:*/		return 0x8220D414;
		  /* 8220D414h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220D414h case    3:*/		if ( 1 ) { regs.LR = 0x8220D418; return (uint32)regs.CTR; }
		/* 8220D414h case    3:*/		return 0x8220D418;
		  /* 8220D418h */ case    4:  		/* or. R31, R3, R3 */
		/* 8220D418h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220D418h case    4:*/		return 0x8220D41C;
		  /* 8220D41Ch */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 8220D41Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220D444;  }
		/* 8220D41Ch case    5:*/		return 0x8220D420;
		  /* 8220D420h */ case    6:  		/* lis R11, -32252 */
		/* 8220D420h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D420h case    6:*/		return 0x8220D424;
		  /* 8220D424h */ case    7:  		/* mr R6, R26 */
		/* 8220D424h case    7:*/		regs.R6 = regs.R26;
		/* 8220D424h case    7:*/		return 0x8220D428;
		  /* 8220D428h */ case    8:  		/* addi R5, R11, -8856 */
		/* 8220D428h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDD68);
		/* 8220D428h case    8:*/		return 0x8220D42C;
		  /* 8220D42Ch */ case    9:  		/* mr R4, R27 */
		/* 8220D42Ch case    9:*/		regs.R4 = regs.R27;
		/* 8220D42Ch case    9:*/		return 0x8220D430;
		  /* 8220D430h */ case   10:  		/* li R7, 210 */
		/* 8220D430h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xD2);
		/* 8220D430h case   10:*/		return 0x8220D434;
		  /* 8220D434h */ case   11:  		/* li R3, 0 */
		/* 8220D434h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D434h case   11:*/		return 0x8220D438;
		  /* 8220D438h */ case   12:  		/* bl -743472 */
		/* 8220D438h case   12:*/		regs.LR = 0x8220D43C; return 0x82157C08;
		/* 8220D438h case   12:*/		return 0x8220D43C;
		  /* 8220D43Ch */ case   13:  		/* li R3, 0 */
		/* 8220D43Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D43Ch case   13:*/		return 0x8220D440;
		  /* 8220D440h */ case   14:  		/* b 200 */
		/* 8220D440h case   14:*/		return 0x8220D508;
		/* 8220D440h case   14:*/		return 0x8220D444;
	}
	return 0x8220D444;
} // Block from 8220D408h-8220D444h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220D444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D444);
		  /* 8220D444h */ case    0:  		/* stw R29, <#[R31]> */
		/* 8220D444h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8220D444h case    0:*/		return 0x8220D448;
		  /* 8220D448h */ case    1:  		/* li R6, 50 */
		/* 8220D448h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x32);
		/* 8220D448h case    1:*/		return 0x8220D44C;
		  /* 8220D44Ch */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8220D44Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D44Ch case    2:*/		return 0x8220D450;
		  /* 8220D450h */ case    3:  		/* mr R5, R28 */
		/* 8220D450h case    3:*/		regs.R5 = regs.R28;
		/* 8220D450h case    3:*/		return 0x8220D454;
		  /* 8220D454h */ case    4:  		/* stw R28, <#[R31 + 8]> */
		/* 8220D454h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 8220D454h case    4:*/		return 0x8220D458;
		  /* 8220D458h */ case    5:  		/* mr R4, R30 */
		/* 8220D458h case    5:*/		regs.R4 = regs.R30;
		/* 8220D458h case    5:*/		return 0x8220D45C;
		  /* 8220D45Ch */ case    6:  		/* stw R25, <#[R31 + 12]> */
		/* 8220D45Ch case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220D45Ch case    6:*/		return 0x8220D460;
		  /* 8220D460h */ case    7:  		/* mr R3, R29 */
		/* 8220D460h case    7:*/		regs.R3 = regs.R29;
		/* 8220D460h case    7:*/		return 0x8220D464;
		  /* 8220D464h */ case    8:  		/* stw R24, <#[R31 + 16]> */
		/* 8220D464h case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000010) );
		/* 8220D464h case    8:*/		return 0x8220D468;
	}
	return 0x8220D468;
} // Block from 8220D444h-8220D468h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D468h
// Function '?FindTextureFetchConst@XGRAPHICS@@YAIPAU_FA_FETCHCONST_ALLOC@1@W4E_FETCH_TYPE@1@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D468);
		  /* 8220D468h */ case    0:  		/* bl 162224 */
		/* 8220D468h case    0:*/		regs.LR = 0x8220D46C; return 0x82234E18;
		/* 8220D468h case    0:*/		return 0x8220D46C;
		  /* 8220D46Ch */ case    1:  		/* stw R3, <#[R31 + 20]> */
		/* 8220D46Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220D46Ch case    1:*/		return 0x8220D470;
		  /* 8220D470h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220D470h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D470h case    2:*/		return 0x8220D474;
		  /* 8220D474h */ case    3:  		/* bc 4, CR0_EQ, 44 */
		/* 8220D474h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220D4A0;  }
		/* 8220D474h case    3:*/		return 0x8220D478;
		  /* 8220D478h */ case    4:  		/* lis R11, -32252 */
		/* 8220D478h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D478h case    4:*/		return 0x8220D47C;
		  /* 8220D47Ch */ case    5:  		/* li R7, 229 */
		/* 8220D47Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0xE5);
		/* 8220D47Ch case    5:*/		return 0x8220D480;
		  /* 8220D480h */ case    6:  		/* addi R5, R11, -8912 */
		/* 8220D480h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDD30);
		/* 8220D480h case    6:*/		return 0x8220D484;
		  /* 8220D484h */ case    7:  		/* mr R6, R26 */
		/* 8220D484h case    7:*/		regs.R6 = regs.R26;
		/* 8220D484h case    7:*/		return 0x8220D488;
		  /* 8220D488h */ case    8:  		/* mr R4, R27 */
		/* 8220D488h case    8:*/		regs.R4 = regs.R27;
		/* 8220D488h case    8:*/		return 0x8220D48C;
		  /* 8220D48Ch */ case    9:  		/* li R3, 0 */
		/* 8220D48Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D48Ch case    9:*/		return 0x8220D490;
		  /* 8220D490h */ case   10:  		/* bl -743560 */
		/* 8220D490h case   10:*/		regs.LR = 0x8220D494; return 0x82157C08;
		/* 8220D490h case   10:*/		return 0x8220D494;
		  /* 8220D494h */ case   11:  		/* mr R3, R31 */
		/* 8220D494h case   11:*/		regs.R3 = regs.R31;
		/* 8220D494h case   11:*/		return 0x8220D498;
		  /* 8220D498h */ case   12:  		/* bl -1112 */
		/* 8220D498h case   12:*/		regs.LR = 0x8220D49C; return 0x8220D040;
		/* 8220D498h case   12:*/		return 0x8220D49C;
		  /* 8220D49Ch */ case   13:  		/* b -96 */
		/* 8220D49Ch case   13:*/		return 0x8220D43C;
		/* 8220D49Ch case   13:*/		return 0x8220D4A0;
	}
	return 0x8220D4A0;
} // Block from 8220D468h-8220D4A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220D4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D4A0);
		  /* 8220D4A0h */ case    0:  		/* li R6, 50 */
		/* 8220D4A0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x32);
		/* 8220D4A0h case    0:*/		return 0x8220D4A4;
		  /* 8220D4A4h */ case    1:  		/* mr R5, R28 */
		/* 8220D4A4h case    1:*/		regs.R5 = regs.R28;
		/* 8220D4A4h case    1:*/		return 0x8220D4A8;
		  /* 8220D4A8h */ case    2:  		/* mr R4, R30 */
		/* 8220D4A8h case    2:*/		regs.R4 = regs.R30;
		/* 8220D4A8h case    2:*/		return 0x8220D4AC;
		  /* 8220D4ACh */ case    3:  		/* mr R3, R29 */
		/* 8220D4ACh case    3:*/		regs.R3 = regs.R29;
		/* 8220D4ACh case    3:*/		return 0x8220D4B0;
		  /* 8220D4B0h */ case    4:  		/* bl -722304 */
		/* 8220D4B0h case    4:*/		regs.LR = 0x8220D4B4; return 0x8215CF30;
		/* 8220D4B0h case    4:*/		return 0x8220D4B4;
		  /* 8220D4B4h */ case    5:  		/* stw R3, <#[R31 + 24]> */
		/* 8220D4B4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8220D4B4h case    5:*/		return 0x8220D4B8;
		  /* 8220D4B8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8220D4B8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D4B8h case    6:*/		return 0x8220D4BC;
		  /* 8220D4BCh */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8220D4BCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8220D4D0;  }
		/* 8220D4BCh case    7:*/		return 0x8220D4C0;
		  /* 8220D4C0h */ case    8:  		/* lis R11, -32252 */
		/* 8220D4C0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D4C0h case    8:*/		return 0x8220D4C4;
		  /* 8220D4C4h */ case    9:  		/* li R7, 242 */
		/* 8220D4C4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xF2);
		/* 8220D4C4h case    9:*/		return 0x8220D4C8;
		  /* 8220D4C8h */ case   10:  		/* addi R5, R11, -8972 */
		/* 8220D4C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCF4);
		/* 8220D4C8h case   10:*/		return 0x8220D4CC;
		  /* 8220D4CCh */ case   11:  		/* b -72 */
		/* 8220D4CCh case   11:*/		return 0x8220D484;
		/* 8220D4CCh case   11:*/		return 0x8220D4D0;
	}
	return 0x8220D4D0;
} // Block from 8220D4A0h-8220D4D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220D4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D4D0);
		  /* 8220D4D0h */ case    0:  		/* mr R7, R29 */
		/* 8220D4D0h case    0:*/		regs.R7 = regs.R29;
		/* 8220D4D0h case    0:*/		return 0x8220D4D4;
		  /* 8220D4D4h */ case    1:  		/* mr R6, R28 */
		/* 8220D4D4h case    1:*/		regs.R6 = regs.R28;
		/* 8220D4D4h case    1:*/		return 0x8220D4D8;
		  /* 8220D4D8h */ case    2:  		/* mr R5, R30 */
		/* 8220D4D8h case    2:*/		regs.R5 = regs.R30;
		/* 8220D4D8h case    2:*/		return 0x8220D4DC;
		  /* 8220D4DCh */ case    3:  		/* li R4, 8 */
		/* 8220D4DCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8220D4DCh case    3:*/		return 0x8220D4E0;
		  /* 8220D4E0h */ case    4:  		/* li R3, 50 */
		/* 8220D4E0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x32);
		/* 8220D4E0h case    4:*/		return 0x8220D4E4;
		  /* 8220D4E4h */ case    5:  		/* bl -7444 */
		/* 8220D4E4h case    5:*/		regs.LR = 0x8220D4E8; return 0x8220B7D0;
		/* 8220D4E4h case    5:*/		return 0x8220D4E8;
		  /* 8220D4E8h */ case    6:  		/* stw R3, <#[R31 + 28]> */
		/* 8220D4E8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8220D4E8h case    6:*/		return 0x8220D4EC;
		  /* 8220D4ECh */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8220D4ECh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D4ECh case    7:*/		return 0x8220D4F0;
		  /* 8220D4F0h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 8220D4F0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8220D504;  }
		/* 8220D4F0h case    8:*/		return 0x8220D4F4;
		  /* 8220D4F4h */ case    9:  		/* lis R11, -32252 */
		/* 8220D4F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D4F4h case    9:*/		return 0x8220D4F8;
		  /* 8220D4F8h */ case   10:  		/* li R7, 255 */
		/* 8220D4F8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xFF);
		/* 8220D4F8h case   10:*/		return 0x8220D4FC;
		  /* 8220D4FCh */ case   11:  		/* addi R5, R11, -9032 */
		/* 8220D4FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCB8);
		/* 8220D4FCh case   11:*/		return 0x8220D500;
		  /* 8220D500h */ case   12:  		/* b -124 */
		/* 8220D500h case   12:*/		return 0x8220D484;
		/* 8220D500h case   12:*/		return 0x8220D504;
	}
	return 0x8220D504;
} // Block from 8220D4D0h-8220D504h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220D504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D504);
		  /* 8220D504h */ case    0:  		/* mr R3, R31 */
		/* 8220D504h case    0:*/		regs.R3 = regs.R31;
		/* 8220D504h case    0:*/		return 0x8220D508;
	}
	return 0x8220D508;
} // Block from 8220D504h-8220D508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220D508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D508);
		  /* 8220D508h */ case    0:  		/* addi R1, R1, 160 */
		/* 8220D508h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220D508h case    0:*/		return 0x8220D50C;
		  /* 8220D50Ch */ case    1:  		/* b -1557108 */
		/* 8220D50Ch case    1:*/		return 0x82091298;
		/* 8220D50Ch case    1:*/		return 0x8220D510;
	}
	return 0x8220D510;
} // Block from 8220D508h-8220D510h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D510);
		  /* 8220D510h */ case    0:  		/* mfspr R12, LR */
		/* 8220D510h case    0:*/		regs.R12 = regs.LR;
		/* 8220D510h case    0:*/		return 0x8220D514;
		  /* 8220D514h */ case    1:  		/* bl -1557208 */
		/* 8220D514h case    1:*/		regs.LR = 0x8220D518; return 0x8209123C;
		/* 8220D514h case    1:*/		return 0x8220D518;
		  /* 8220D518h */ case    2:  		/* stwu R1, <#[R1 - 496]> */
		/* 8220D518h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE10);
		/* 8220D518h case    2:*/		return 0x8220D51C;
		  /* 8220D51Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220D51Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220D51Ch case    3:*/		return 0x8220D520;
		  /* 8220D520h */ case    4:  		/* lis R10, -32252 */
		/* 8220D520h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D520h case    4:*/		return 0x8220D524;
		  /* 8220D524h */ case    5:  		/* mr R22, R3 */
		/* 8220D524h case    5:*/		regs.R22 = regs.R3;
		/* 8220D524h case    5:*/		return 0x8220D528;
		  /* 8220D528h */ case    6:  		/* mr R21, R4 */
		/* 8220D528h case    6:*/		regs.R21 = regs.R4;
		/* 8220D528h case    6:*/		return 0x8220D52C;
		  /* 8220D52Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220D52Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D52Ch case    7:*/		return 0x8220D530;
		  /* 8220D530h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8220D530h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220D530h case    8:*/		return 0x8220D534;
		  /* 8220D534h */ case    9:  		/* addi R28, R10, -9248 */
		/* 8220D534h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFDBE0);
		/* 8220D534h case    9:*/		return 0x8220D538;
		  /* 8220D538h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D538h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220D558;  }
		/* 8220D538h case   10:*/		return 0x8220D53C;
		  /* 8220D53Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220D53Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D53Ch case   11:*/		return 0x8220D540;
		  /* 8220D540h */ case   12:  		/* mr R6, R28 */
		/* 8220D540h case   12:*/		regs.R6 = regs.R28;
		/* 8220D540h case   12:*/		return 0x8220D544;
		  /* 8220D544h */ case   13:  		/* addi R5, R11, -9040 */
		/* 8220D544h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCB0);
		/* 8220D544h case   13:*/		return 0x8220D548;
		  /* 8220D548h */ case   14:  		/* mr R4, R29 */
		/* 8220D548h case   14:*/		regs.R4 = regs.R29;
		/* 8220D548h case   14:*/		return 0x8220D54C;
		  /* 8220D54Ch */ case   15:  		/* li R7, 496 */
		/* 8220D54Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1F0);
		/* 8220D54Ch case   15:*/		return 0x8220D550;
		  /* 8220D550h */ case   16:  		/* li R3, 0 */
		/* 8220D550h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D550h case   16:*/		return 0x8220D554;
		  /* 8220D554h */ case   17:  		/* bl -743756 */
		/* 8220D554h case   17:*/		regs.LR = 0x8220D558; return 0x82157C08;
		/* 8220D554h case   17:*/		return 0x8220D558;
	}
	return 0x8220D558;
} // Block from 8220D510h-8220D558h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220D558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D558);
		  /* 8220D558h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8220D558h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8220D558h case    0:*/		return 0x8220D55C;
		  /* 8220D55Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D55Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D57C;  }
		/* 8220D55Ch case    1:*/		return 0x8220D560;
		  /* 8220D560h */ case    2:  		/* lis R11, -32252 */
		/* 8220D560h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D560h case    2:*/		return 0x8220D564;
		  /* 8220D564h */ case    3:  		/* mr R6, R28 */
		/* 8220D564h case    3:*/		regs.R6 = regs.R28;
		/* 8220D564h case    3:*/		return 0x8220D568;
		  /* 8220D568h */ case    4:  		/* addi R5, R11, -9048 */
		/* 8220D568h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCA8);
		/* 8220D568h case    4:*/		return 0x8220D56C;
		  /* 8220D56Ch */ case    5:  		/* mr R4, R29 */
		/* 8220D56Ch case    5:*/		regs.R4 = regs.R29;
		/* 8220D56Ch case    5:*/		return 0x8220D570;
		  /* 8220D570h */ case    6:  		/* li R7, 497 */
		/* 8220D570h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1F1);
		/* 8220D570h case    6:*/		return 0x8220D574;
		  /* 8220D574h */ case    7:  		/* li R3, 0 */
		/* 8220D574h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D574h case    7:*/		return 0x8220D578;
	}
	return 0x8220D578;
} // Block from 8220D558h-8220D578h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220D578h
// Function '?FindVertexFetchConstUsingStream@XGRAPHICS@@YAIPAU_FA_FETCHCONST_ALLOC@1@PAU_ABSTRACT_STATE@1@W4E_FETCH_TYPE@1@IPAI3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D578);
		  /* 8220D578h */ case    0:  		/* bl -743792 */
		/* 8220D578h case    0:*/		regs.LR = 0x8220D57C; return 0x82157C08;
		/* 8220D578h case    0:*/		return 0x8220D57C;
	}
	return 0x8220D57C;
} // Block from 8220D578h-8220D57Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220D57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D57C);
		  /* 8220D57Ch */ case    0:  		/* mr R3, R22 */
		/* 8220D57Ch case    0:*/		regs.R3 = regs.R22;
		/* 8220D57Ch case    0:*/		return 0x8220D580;
		  /* 8220D580h */ case    1:  		/* bl -718040 */
		/* 8220D580h case    1:*/		regs.LR = 0x8220D584; return 0x8215E0A8;
		/* 8220D580h case    1:*/		return 0x8220D584;
		  /* 8220D584h */ case    2:  		/* mr R31, R3 */
		/* 8220D584h case    2:*/		regs.R31 = regs.R3;
		/* 8220D584h case    2:*/		return 0x8220D588;
		  /* 8220D588h */ case    3:  		/* mr R3, R21 */
		/* 8220D588h case    3:*/		regs.R3 = regs.R21;
		/* 8220D588h case    3:*/		return 0x8220D58C;
		  /* 8220D58Ch */ case    4:  		/* bl -718052 */
		/* 8220D58Ch case    4:*/		regs.LR = 0x8220D590; return 0x8215E0A8;
		/* 8220D58Ch case    4:*/		return 0x8220D590;
		  /* 8220D590h */ case    5:  		/* mr R30, R3 */
		/* 8220D590h case    5:*/		regs.R30 = regs.R3;
		/* 8220D590h case    5:*/		return 0x8220D594;
		  /* 8220D594h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8220D594h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220D594h case    6:*/		return 0x8220D598;
		  /* 8220D598h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D598h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220D5B8;  }
		/* 8220D598h case    7:*/		return 0x8220D59C;
		  /* 8220D59Ch */ case    8:  		/* lis R11, -32252 */
		/* 8220D59Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D59Ch case    8:*/		return 0x8220D5A0;
		  /* 8220D5A0h */ case    9:  		/* mr R6, R28 */
		/* 8220D5A0h case    9:*/		regs.R6 = regs.R28;
		/* 8220D5A0h case    9:*/		return 0x8220D5A4;
		  /* 8220D5A4h */ case   10:  		/* addi R5, R11, -8576 */
		/* 8220D5A4h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDE80);
		/* 8220D5A4h case   10:*/		return 0x8220D5A8;
		  /* 8220D5A8h */ case   11:  		/* mr R4, R29 */
		/* 8220D5A8h case   11:*/		regs.R4 = regs.R29;
		/* 8220D5A8h case   11:*/		return 0x8220D5AC;
		  /* 8220D5ACh */ case   12:  		/* li R7, 516 */
		/* 8220D5ACh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x204);
		/* 8220D5ACh case   12:*/		return 0x8220D5B0;
		  /* 8220D5B0h */ case   13:  		/* li R3, 0 */
		/* 8220D5B0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D5B0h case   13:*/		return 0x8220D5B4;
		  /* 8220D5B4h */ case   14:  		/* bl -743852 */
		/* 8220D5B4h case   14:*/		regs.LR = 0x8220D5B8; return 0x82157C08;
		/* 8220D5B4h case   14:*/		return 0x8220D5B8;
	}
	return 0x8220D5B8;
} // Block from 8220D57Ch-8220D5B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220D5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D5B8);
		  /* 8220D5B8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220D5B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220D5B8h case    0:*/		return 0x8220D5BC;
		  /* 8220D5BCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D5BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D5DC;  }
		/* 8220D5BCh case    1:*/		return 0x8220D5C0;
		  /* 8220D5C0h */ case    2:  		/* lis R11, -32252 */
		/* 8220D5C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D5C0h case    2:*/		return 0x8220D5C4;
		  /* 8220D5C4h */ case    3:  		/* mr R6, R28 */
		/* 8220D5C4h case    3:*/		regs.R6 = regs.R28;
		/* 8220D5C4h case    3:*/		return 0x8220D5C8;
		  /* 8220D5C8h */ case    4:  		/* addi R5, R11, -8584 */
		/* 8220D5C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDE78);
		/* 8220D5C8h case    4:*/		return 0x8220D5CC;
		  /* 8220D5CCh */ case    5:  		/* mr R4, R29 */
		/* 8220D5CCh case    5:*/		regs.R4 = regs.R29;
		/* 8220D5CCh case    5:*/		return 0x8220D5D0;
		  /* 8220D5D0h */ case    6:  		/* li R7, 517 */
		/* 8220D5D0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x205);
		/* 8220D5D0h case    6:*/		return 0x8220D5D4;
		  /* 8220D5D4h */ case    7:  		/* li R3, 0 */
		/* 8220D5D4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D5D4h case    7:*/		return 0x8220D5D8;
		  /* 8220D5D8h */ case    8:  		/* bl -743888 */
		/* 8220D5D8h case    8:*/		regs.LR = 0x8220D5DC; return 0x82157C08;
		/* 8220D5D8h case    8:*/		return 0x8220D5DC;
	}
	return 0x8220D5DC;
} // Block from 8220D5B8h-8220D5DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D5DC);
		  /* 8220D5DCh */ case    0:  		/* mr R3, R30 */
		/* 8220D5DCh case    0:*/		regs.R3 = regs.R30;
		/* 8220D5DCh case    0:*/		return 0x8220D5E0;
		  /* 8220D5E0h */ case    1:  		/* bl 271408 */
		/* 8220D5E0h case    1:*/		regs.LR = 0x8220D5E4; return 0x8224FA10;
		/* 8220D5E0h case    1:*/		return 0x8220D5E4;
		  /* 8220D5E4h */ case    2:  		/* mr R27, R3 */
		/* 8220D5E4h case    2:*/		regs.R27 = regs.R3;
		/* 8220D5E4h case    2:*/		return 0x8220D5E8;
		  /* 8220D5E8h */ case    3:  		/* mr R3, R31 */
		/* 8220D5E8h case    3:*/		regs.R3 = regs.R31;
		/* 8220D5E8h case    3:*/		return 0x8220D5EC;
		  /* 8220D5ECh */ case    4:  		/* bl 271396 */
		/* 8220D5ECh case    4:*/		regs.LR = 0x8220D5F0; return 0x8224FA10;
		/* 8220D5ECh case    4:*/		return 0x8220D5F0;
		  /* 8220D5F0h */ case    5:  		/* cmpw CR6, R3, R27 */
		/* 8220D5F0h case    5:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R27);
		/* 8220D5F0h case    5:*/		return 0x8220D5F4;
		  /* 8220D5F4h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D5F4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8220D614;  }
		/* 8220D5F4h case    6:*/		return 0x8220D5F8;
		  /* 8220D5F8h */ case    7:  		/* lis R11, -32252 */
		/* 8220D5F8h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D5F8h case    7:*/		return 0x8220D5FC;
		  /* 8220D5FCh */ case    8:  		/* mr R6, R28 */
		/* 8220D5FCh case    8:*/		regs.R6 = regs.R28;
		/* 8220D5FCh case    8:*/		return 0x8220D600;
		  /* 8220D600h */ case    9:  		/* addi R5, R11, -8628 */
		/* 8220D600h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDE4C);
		/* 8220D600h case    9:*/		return 0x8220D604;
		  /* 8220D604h */ case   10:  		/* mr R4, R29 */
		/* 8220D604h case   10:*/		regs.R4 = regs.R29;
		/* 8220D604h case   10:*/		return 0x8220D608;
		  /* 8220D608h */ case   11:  		/* li R7, 518 */
		/* 8220D608h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x206);
		/* 8220D608h case   11:*/		return 0x8220D60C;
		  /* 8220D60Ch */ case   12:  		/* li R3, 0 */
		/* 8220D60Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D60Ch case   12:*/		return 0x8220D610;
		  /* 8220D610h */ case   13:  		/* bl -743944 */
		/* 8220D610h case   13:*/		regs.LR = 0x8220D614; return 0x82157C08;
		/* 8220D610h case   13:*/		return 0x8220D614;
	}
	return 0x8220D614;
} // Block from 8220D5DCh-8220D614h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220D614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D614);
		  /* 8220D614h */ case    0:  		/* mr R3, R30 */
		/* 8220D614h case    0:*/		regs.R3 = regs.R30;
		/* 8220D614h case    0:*/		return 0x8220D618;
		  /* 8220D618h */ case    1:  		/* bl -3768 */
		/* 8220D618h case    1:*/		regs.LR = 0x8220D61C; return 0x8220C760;
		/* 8220D618h case    1:*/		return 0x8220D61C;
		  /* 8220D61Ch */ case    2:  		/* mr R30, R3 */
		/* 8220D61Ch case    2:*/		regs.R30 = regs.R3;
		/* 8220D61Ch case    2:*/		return 0x8220D620;
		  /* 8220D620h */ case    3:  		/* mr R3, R31 */
		/* 8220D620h case    3:*/		regs.R3 = regs.R31;
		/* 8220D620h case    3:*/		return 0x8220D624;
		  /* 8220D624h */ case    4:  		/* bl -3780 */
		/* 8220D624h case    4:*/		regs.LR = 0x8220D628; return 0x8220C760;
		/* 8220D624h case    4:*/		return 0x8220D628;
		  /* 8220D628h */ case    5:  		/* add R11, R30, R3 */
		/* 8220D628h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R3);
		/* 8220D628h case    5:*/		return 0x8220D62C;
		  /* 8220D62Ch */ case    6:  		/* cmplwi CR6, R11, 32 */
		/* 8220D62Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 8220D62Ch case    6:*/		return 0x8220D630;
		  /* 8220D630h */ case    7:  		/* bc 4, CR6_LT, 356 */
		/* 8220D630h case    7:*/		if ( !regs.CR[6].lt ) { return 0x8220D794;  }
		/* 8220D630h case    7:*/		return 0x8220D634;
		  /* 8220D634h */ case    8:  		/* lis R10, -32252 */
		/* 8220D634h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D634h case    8:*/		return 0x8220D638;
		  /* 8220D638h */ case    9:  		/* lis R9, -32252 */
		/* 8220D638h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220D638h case    9:*/		return 0x8220D63C;
		  /* 8220D63Ch */ case   10:  		/* lis R8, -32252 */
		/* 8220D63Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8220D63Ch case   10:*/		return 0x8220D640;
		  /* 8220D640h */ case   11:  		/* lis R11, -32252 */
		/* 8220D640h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D640h case   11:*/		return 0x8220D644;
		  /* 8220D644h */ case   12:  		/* li R23, 0 */
		/* 8220D644h case   12:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8220D644h case   12:*/		return 0x8220D648;
		  /* 8220D648h */ case   13:  		/* addi R26, R10, -8672 */
		/* 8220D648h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFDE20);
		/* 8220D648h case   13:*/		return 0x8220D64C;
		  /* 8220D64Ch */ case   14:  		/* addi R25, R9, -8716 */
		/* 8220D64Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0xFFFFDDF4);
		/* 8220D64Ch case   14:*/		return 0x8220D650;
		  /* 8220D650h */ case   15:  		/* addi R24, R8, -8764 */
		/* 8220D650h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R8,0xFFFFDDC4);
		/* 8220D650h case   15:*/		return 0x8220D654;
		  /* 8220D654h */ case   16:  		/* addi R27, R11, -8812 */
		/* 8220D654h case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFDD94);
		/* 8220D654h case   16:*/		return 0x8220D658;
		  /* 8220D658h */ case   17:  		/* addi R5, R1, 240 */
		/* 8220D658h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 8220D658h case   17:*/		return 0x8220D65C;
		  /* 8220D65Ch */ case   18:  		/* mr R4, R23 */
		/* 8220D65Ch case   18:*/		regs.R4 = regs.R23;
		/* 8220D65Ch case   18:*/		return 0x8220D660;
		  /* 8220D660h */ case   19:  		/* mr R3, R22 */
		/* 8220D660h case   19:*/		regs.R3 = regs.R22;
		/* 8220D660h case   19:*/		return 0x8220D664;
		  /* 8220D664h */ case   20:  		/* bl -720244 */
		/* 8220D664h case   20:*/		regs.LR = 0x8220D668; return 0x8215D8F0;
		/* 8220D664h case   20:*/		return 0x8220D668;
		  /* 8220D668h */ case   21:  		/* lwz R11, <#[R1 + 240]> */
		/* 8220D668h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 8220D668h case   21:*/		return 0x8220D66C;
		  /* 8220D66Ch */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 8220D66Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220D66Ch case   22:*/		return 0x8220D670;
		  /* 8220D670h */ case   23:  		/* bc 12, CR6_EQ, 272 */
		/* 8220D670h case   23:*/		if ( regs.CR[6].eq ) { return 0x8220D780;  }
		/* 8220D670h case   23:*/		return 0x8220D674;
		  /* 8220D674h */ case   24:  		/* addi R5, R1, 80 */
		/* 8220D674h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220D674h case   24:*/		return 0x8220D678;
		  /* 8220D678h */ case   25:  		/* mr R4, R23 */
		/* 8220D678h case   25:*/		regs.R4 = regs.R23;
		/* 8220D678h case   25:*/		return 0x8220D67C;
		  /* 8220D67Ch */ case   26:  		/* mr R3, R21 */
		/* 8220D67Ch case   26:*/		regs.R3 = regs.R21;
		/* 8220D67Ch case   26:*/		return 0x8220D680;
		  /* 8220D680h */ case   27:  		/* bl -720272 */
		/* 8220D680h case   27:*/		regs.LR = 0x8220D684; return 0x8215D8F0;
		/* 8220D680h case   27:*/		return 0x8220D684;
		  /* 8220D684h */ case   28:  		/* lwz R11, <#[R1 + 80]> */
		/* 8220D684h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8220D684h case   28:*/		return 0x8220D688;
		  /* 8220D688h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 8220D688h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220D688h case   29:*/		return 0x8220D68C;
		  /* 8220D68Ch */ case   30:  		/* bc 12, CR6_EQ, 264 */
		/* 8220D68Ch case   30:*/		if ( regs.CR[6].eq ) { return 0x8220D794;  }
		/* 8220D68Ch case   30:*/		return 0x8220D690;
		  /* 8220D690h */ case   31:  		/* lwz R11, <#[R1 + 372]> */
		/* 8220D690h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000174) );
		/* 8220D690h case   31:*/		return 0x8220D694;
		  /* 8220D694h */ case   32:  		/* lwz R10, <#[R1 + 212]> */
		/* 8220D694h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D4) );
		/* 8220D694h case   32:*/		return 0x8220D698;
		  /* 8220D698h */ case   33:  		/* cmpw CR6, R10, R11 */
		/* 8220D698h case   33:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8220D698h case   33:*/		return 0x8220D69C;
		  /* 8220D69Ch */ case   34:  		/* bc 12, CR6_EQ, 72 */
		/* 8220D69Ch case   34:*/		if ( regs.CR[6].eq ) { return 0x8220D6E4;  }
		/* 8220D69Ch case   34:*/		return 0x8220D6A0;
		  /* 8220D6A0h */ case   35:  		/* cmpwi CR6, R11, 2 */
		/* 8220D6A0h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8220D6A0h case   35:*/		return 0x8220D6A4;
		  /* 8220D6A4h */ case   36:  		/* bc 12, CR6_LT, 28 */
		/* 8220D6A4h case   36:*/		if ( regs.CR[6].lt ) { return 0x8220D6C0;  }
		/* 8220D6A4h case   36:*/		return 0x8220D6A8;
		  /* 8220D6A8h */ case   37:  		/* mr R6, R28 */
		/* 8220D6A8h case   37:*/		regs.R6 = regs.R28;
		/* 8220D6A8h case   37:*/		return 0x8220D6AC;
		  /* 8220D6ACh */ case   38:  		/* mr R5, R27 */
		/* 8220D6ACh case   38:*/		regs.R5 = regs.R27;
		/* 8220D6ACh case   38:*/		return 0x8220D6B0;
		  /* 8220D6B0h */ case   39:  		/* mr R4, R29 */
		/* 8220D6B0h case   39:*/		regs.R4 = regs.R29;
		/* 8220D6B0h case   39:*/		return 0x8220D6B4;
		  /* 8220D6B4h */ case   40:  		/* li R7, 554 */
		/* 8220D6B4h case   40:*/		cpu::op::li<0>(regs,&regs.R7,0x22A);
		/* 8220D6B4h case   40:*/		return 0x8220D6B8;
		  /* 8220D6B8h */ case   41:  		/* li R3, 0 */
		/* 8220D6B8h case   41:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D6B8h case   41:*/		return 0x8220D6BC;
		  /* 8220D6BCh */ case   42:  		/* bl -744116 */
		/* 8220D6BCh case   42:*/		regs.LR = 0x8220D6C0; return 0x82157C08;
		/* 8220D6BCh case   42:*/		return 0x8220D6C0;
	}
	return 0x8220D6C0;
} // Block from 8220D614h-8220D6C0h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8220D6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D6C0);
		  /* 8220D6C0h */ case    0:  		/* lwz R11, <#[R1 + 212]> */
		/* 8220D6C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D4) );
		/* 8220D6C0h case    0:*/		return 0x8220D6C4;
		  /* 8220D6C4h */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 8220D6C4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8220D6C4h case    1:*/		return 0x8220D6C8;
		  /* 8220D6C8h */ case    2:  		/* bc 12, CR6_LT, 28 */
		/* 8220D6C8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220D6E4;  }
		/* 8220D6C8h case    2:*/		return 0x8220D6CC;
		  /* 8220D6CCh */ case    3:  		/* mr R6, R28 */
		/* 8220D6CCh case    3:*/		regs.R6 = regs.R28;
		/* 8220D6CCh case    3:*/		return 0x8220D6D0;
		  /* 8220D6D0h */ case    4:  		/* mr R5, R24 */
		/* 8220D6D0h case    4:*/		regs.R5 = regs.R24;
		/* 8220D6D0h case    4:*/		return 0x8220D6D4;
		  /* 8220D6D4h */ case    5:  		/* mr R4, R29 */
		/* 8220D6D4h case    5:*/		regs.R4 = regs.R29;
		/* 8220D6D4h case    5:*/		return 0x8220D6D8;
		  /* 8220D6D8h */ case    6:  		/* li R7, 555 */
		/* 8220D6D8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x22B);
		/* 8220D6D8h case    6:*/		return 0x8220D6DC;
		  /* 8220D6DCh */ case    7:  		/* li R3, 0 */
		/* 8220D6DCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D6DCh case    7:*/		return 0x8220D6E0;
		  /* 8220D6E0h */ case    8:  		/* bl -744152 */
		/* 8220D6E0h case    8:*/		regs.LR = 0x8220D6E4; return 0x82157C08;
		/* 8220D6E0h case    8:*/		return 0x8220D6E4;
	}
	return 0x8220D6E4;
} // Block from 8220D6C0h-8220D6E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D6E4);
		  /* 8220D6E4h */ case    0:  		/* li R31, 0 */
		/* 8220D6E4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220D6E4h case    0:*/		return 0x8220D6E8;
		  /* 8220D6E8h */ case    1:  		/* addi R30, R1, 84 */
		/* 8220D6E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x54);
		/* 8220D6E8h case    1:*/		return 0x8220D6EC;
		  /* 8220D6ECh */ case    2:  		/* addi R11, R1, 244 */
		/* 8220D6ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF4);
		/* 8220D6ECh case    2:*/		return 0x8220D6F0;
		  /* 8220D6F0h */ case    3:  		/* lwzx R10, <#[R31 + R30]> */
		/* 8220D6F0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 8220D6F0h case    3:*/		return 0x8220D6F4;
		  /* 8220D6F4h */ case    4:  		/* lwzx R11, <#[R31 + R11]> */
		/* 8220D6F4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8220D6F4h case    4:*/		return 0x8220D6F8;
		  /* 8220D6F8h */ case    5:  		/* cmpw CR6, R10, R11 */
		/* 8220D6F8h case    5:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8220D6F8h case    5:*/		return 0x8220D6FC;
		  /* 8220D6FCh */ case    6:  		/* bc 12, CR6_EQ, 72 */
		/* 8220D6FCh case    6:*/		if ( regs.CR[6].eq ) { return 0x8220D744;  }
		/* 8220D6FCh case    6:*/		return 0x8220D700;
		  /* 8220D700h */ case    7:  		/* cmpwi CR6, R11, 13 */
		/* 8220D700h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 8220D700h case    7:*/		return 0x8220D704;
		  /* 8220D704h */ case    8:  		/* bc 12, CR6_LT, 28 */
		/* 8220D704h case    8:*/		if ( regs.CR[6].lt ) { return 0x8220D720;  }
		/* 8220D704h case    8:*/		return 0x8220D708;
		  /* 8220D708h */ case    9:  		/* mr R6, R28 */
		/* 8220D708h case    9:*/		regs.R6 = regs.R28;
		/* 8220D708h case    9:*/		return 0x8220D70C;
		  /* 8220D70Ch */ case   10:  		/* mr R5, R25 */
		/* 8220D70Ch case   10:*/		regs.R5 = regs.R25;
		/* 8220D70Ch case   10:*/		return 0x8220D710;
		  /* 8220D710h */ case   11:  		/* mr R4, R29 */
		/* 8220D710h case   11:*/		regs.R4 = regs.R29;
		/* 8220D710h case   11:*/		return 0x8220D714;
		  /* 8220D714h */ case   12:  		/* li R7, 568 */
		/* 8220D714h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x238);
		/* 8220D714h case   12:*/		return 0x8220D718;
	}
	return 0x8220D718;
} // Block from 8220D6E4h-8220D718h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220D718h
// Function '?FA_FindFetchConst@XGRAPHICS@@YAIPAU_FA_FETCHCONST_ALLOC@1@PAU_ABSTRACT_STATE@1@W4E_FETCH_TYPE@1@IPAI3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D718);
		  /* 8220D718h */ case    0:  		/* li R3, 0 */
		/* 8220D718h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D718h case    0:*/		return 0x8220D71C;
		  /* 8220D71Ch */ case    1:  		/* bl -744212 */
		/* 8220D71Ch case    1:*/		regs.LR = 0x8220D720; return 0x82157C08;
		/* 8220D71Ch case    1:*/		return 0x8220D720;
	}
	return 0x8220D720;
} // Block from 8220D718h-8220D720h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D720);
		  /* 8220D720h */ case    0:  		/* lwzx R11, <#[R31 + R30]> */
		/* 8220D720h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 8220D720h case    0:*/		return 0x8220D724;
		  /* 8220D724h */ case    1:  		/* cmpwi CR6, R11, 13 */
		/* 8220D724h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 8220D724h case    1:*/		return 0x8220D728;
		  /* 8220D728h */ case    2:  		/* bc 12, CR6_LT, 28 */
		/* 8220D728h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220D744;  }
		/* 8220D728h case    2:*/		return 0x8220D72C;
		  /* 8220D72Ch */ case    3:  		/* mr R6, R28 */
		/* 8220D72Ch case    3:*/		regs.R6 = regs.R28;
		/* 8220D72Ch case    3:*/		return 0x8220D730;
		  /* 8220D730h */ case    4:  		/* mr R5, R26 */
		/* 8220D730h case    4:*/		regs.R5 = regs.R26;
		/* 8220D730h case    4:*/		return 0x8220D734;
		  /* 8220D734h */ case    5:  		/* mr R4, R29 */
		/* 8220D734h case    5:*/		regs.R4 = regs.R29;
		/* 8220D734h case    5:*/		return 0x8220D738;
		  /* 8220D738h */ case    6:  		/* li R7, 569 */
		/* 8220D738h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x239);
		/* 8220D738h case    6:*/		return 0x8220D73C;
		  /* 8220D73Ch */ case    7:  		/* li R3, 0 */
		/* 8220D73Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D73Ch case    7:*/		return 0x8220D740;
		  /* 8220D740h */ case    8:  		/* bl -744248 */
		/* 8220D740h case    8:*/		regs.LR = 0x8220D744; return 0x82157C08;
		/* 8220D740h case    8:*/		return 0x8220D744;
	}
	return 0x8220D744;
} // Block from 8220D720h-8220D744h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D744);
		  /* 8220D744h */ case    0:  		/* addi R11, R1, 260 */
		/* 8220D744h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x104);
		/* 8220D744h case    0:*/		return 0x8220D748;
		  /* 8220D748h */ case    1:  		/* addi R10, R1, 100 */
		/* 8220D748h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x64);
		/* 8220D748h case    1:*/		return 0x8220D74C;
		  /* 8220D74Ch */ case    2:  		/* lwzx R11, <#[R31 + R11]> */
		/* 8220D74Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8220D74Ch case    2:*/		return 0x8220D750;
		  /* 8220D750h */ case    3:  		/* lwzx R10, <#[R31 + R10]> */
		/* 8220D750h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 8220D750h case    3:*/		return 0x8220D754;
		  /* 8220D754h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 8220D754h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8220D754h case    4:*/		return 0x8220D758;
		  /* 8220D758h */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 8220D758h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220D794;  }
		/* 8220D758h case    5:*/		return 0x8220D75C;
		  /* 8220D75Ch */ case    6:  		/* addi R11, R1, 356 */
		/* 8220D75Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x164);
		/* 8220D75Ch case    6:*/		return 0x8220D760;
		  /* 8220D760h */ case    7:  		/* addi R10, R1, 196 */
		/* 8220D760h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC4);
		/* 8220D760h case    7:*/		return 0x8220D764;
		  /* 8220D764h */ case    8:  		/* lwzx R11, <#[R31 + R11]> */
		/* 8220D764h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8220D764h case    8:*/		return 0x8220D768;
		  /* 8220D768h */ case    9:  		/* lwzx R10, <#[R31 + R10]> */
		/* 8220D768h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 8220D768h case    9:*/		return 0x8220D76C;
		  /* 8220D76Ch */ case   10:  		/* cmplw CR6, R10, R11 */
		/* 8220D76Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8220D76Ch case   10:*/		return 0x8220D770;
		  /* 8220D770h */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 8220D770h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220D794;  }
		/* 8220D770h case   11:*/		return 0x8220D774;
		  /* 8220D774h */ case   12:  		/* addi R31, R31, 4 */
		/* 8220D774h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220D774h case   12:*/		return 0x8220D778;
		  /* 8220D778h */ case   13:  		/* cmpwi CR6, R31, 16 */
		/* 8220D778h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000010);
		/* 8220D778h case   13:*/		return 0x8220D77C;
		  /* 8220D77Ch */ case   14:  		/* bc 12, CR6_LT, -148 */
		/* 8220D77Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x8220D6E8;  }
		/* 8220D77Ch case   14:*/		return 0x8220D780;
	}
	return 0x8220D780;
} // Block from 8220D744h-8220D780h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220D780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D780);
		  /* 8220D780h */ case    0:  		/* addi R23, R23, 1 */
		/* 8220D780h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8220D780h case    0:*/		return 0x8220D784;
		  /* 8220D784h */ case    1:  		/* cmplwi CR6, R23, 16 */
		/* 8220D784h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000010);
		/* 8220D784h case    1:*/		return 0x8220D788;
		  /* 8220D788h */ case    2:  		/* bc 12, CR6_LT, -304 */
		/* 8220D788h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220D658;  }
		/* 8220D788h case    2:*/		return 0x8220D78C;
		  /* 8220D78Ch */ case    3:  		/* li R3, 1 */
		/* 8220D78Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220D78Ch case    3:*/		return 0x8220D790;
		  /* 8220D790h */ case    4:  		/* b 8 */
		/* 8220D790h case    4:*/		return 0x8220D798;
		/* 8220D790h case    4:*/		return 0x8220D794;
	}
	return 0x8220D794;
} // Block from 8220D780h-8220D794h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220D794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D794);
		  /* 8220D794h */ case    0:  		/* li R3, 0 */
		/* 8220D794h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D794h case    0:*/		return 0x8220D798;
	}
	return 0x8220D798;
} // Block from 8220D794h-8220D798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220D798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D798);
		  /* 8220D798h */ case    0:  		/* addi R1, R1, 496 */
		/* 8220D798h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1F0);
		/* 8220D798h case    0:*/		return 0x8220D79C;
		  /* 8220D79Ch */ case    1:  		/* b -1557776 */
		/* 8220D79Ch case    1:*/		return 0x8209128C;
		/* 8220D79Ch case    1:*/		return 0x8220D7A0;
	}
	return 0x8220D7A0;
} // Block from 8220D798h-8220D7A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D7A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D7A0);
		  /* 8220D7A0h */ case    0:  		/* mfspr R12, LR */
		/* 8220D7A0h case    0:*/		regs.R12 = regs.LR;
		/* 8220D7A0h case    0:*/		return 0x8220D7A4;
		  /* 8220D7A4h */ case    1:  		/* bl -1557848 */
		/* 8220D7A4h case    1:*/		regs.LR = 0x8220D7A8; return 0x8209124C;
		/* 8220D7A4h case    1:*/		return 0x8220D7A8;
		  /* 8220D7A8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220D7A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220D7A8h case    2:*/		return 0x8220D7AC;
		  /* 8220D7ACh */ case    3:  		/* li R11, 0 */
		/* 8220D7ACh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220D7ACh case    3:*/		return 0x8220D7B0;
		  /* 8220D7B0h */ case    4:  		/* mr R28, R4 */
		/* 8220D7B0h case    4:*/		regs.R28 = regs.R4;
		/* 8220D7B0h case    4:*/		return 0x8220D7B4;
		  /* 8220D7B4h */ case    5:  		/* stw R11, <#[R1 + 80]> */
		/* 8220D7B4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8220D7B4h case    5:*/		return 0x8220D7B8;
		  /* 8220D7B8h */ case    6:  		/* li R4, 10 */
		/* 8220D7B8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 8220D7B8h case    6:*/		return 0x8220D7BC;
		  /* 8220D7BCh */ case    7:  		/* mr R31, R3 */
		/* 8220D7BCh case    7:*/		regs.R31 = regs.R3;
		/* 8220D7BCh case    7:*/		return 0x8220D7C0;
		  /* 8220D7C0h */ case    8:  		/* lwz R3, <#[R3 + 16]> */
		/* 8220D7C0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8220D7C0h case    8:*/		return 0x8220D7C4;
		  /* 8220D7C4h */ case    9:  		/* mr R25, R5 */
		/* 8220D7C4h case    9:*/		regs.R25 = regs.R5;
		/* 8220D7C4h case    9:*/		return 0x8220D7C8;
		  /* 8220D7C8h */ case   10:  		/* bl -13888 */
		/* 8220D7C8h case   10:*/		regs.LR = 0x8220D7CC; return 0x8220A188;
		/* 8220D7C8h case   10:*/		return 0x8220D7CC;
		  /* 8220D7CCh */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8220D7CCh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D7CCh case   11:*/		return 0x8220D7D0;
		  /* 8220D7D0h */ case   12:  		/* bc 12, CR0_EQ, 216 */
		/* 8220D7D0h case   12:*/		if ( regs.CR[0].eq ) { return 0x8220D8A8;  }
		/* 8220D7D0h case   12:*/		return 0x8220D7D4;
		  /* 8220D7D4h */ case   13:  		/* li R4, 1 */
		/* 8220D7D4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220D7D4h case   13:*/		return 0x8220D7D8;
		  /* 8220D7D8h */ case   14:  		/* mr R3, R28 */
		/* 8220D7D8h case   14:*/		regs.R3 = regs.R28;
		/* 8220D7D8h case   14:*/		return 0x8220D7DC;
		  /* 8220D7DCh */ case   15:  		/* bl -721612 */
		/* 8220D7DCh case   15:*/		regs.LR = 0x8220D7E0; return 0x8215D510;
		/* 8220D7DCh case   15:*/		return 0x8220D7E0;
		  /* 8220D7E0h */ case   16:  		/* stw R3, <#[R1 + 88]> */
		/* 8220D7E0h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 8220D7E0h case   16:*/		return 0x8220D7E4;
		  /* 8220D7E4h */ case   17:  		/* li R4, 0 */
		/* 8220D7E4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220D7E4h case   17:*/		return 0x8220D7E8;
		  /* 8220D7E8h */ case   18:  		/* mr R3, R28 */
		/* 8220D7E8h case   18:*/		regs.R3 = regs.R28;
		/* 8220D7E8h case   18:*/		return 0x8220D7EC;
		  /* 8220D7ECh */ case   19:  		/* bl -721628 */
		/* 8220D7ECh case   19:*/		regs.LR = 0x8220D7F0; return 0x8215D510;
		/* 8220D7ECh case   19:*/		return 0x8220D7F0;
		  /* 8220D7F0h */ case   20:  		/* stw R3, <#[R1 + 92]> */
		/* 8220D7F0h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 8220D7F0h case   20:*/		return 0x8220D7F4;
		  /* 8220D7F4h */ case   21:  		/* addi R6, R1, 80 */
		/* 8220D7F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8220D7F4h case   21:*/		return 0x8220D7F8;
		  /* 8220D7F8h */ case   22:  		/* lwz R3, <#[R31 + 20]> */
		/* 8220D7F8h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8220D7F8h case   22:*/		return 0x8220D7FC;
		  /* 8220D7FCh */ case   23:  		/* li R5, 2 */
		/* 8220D7FCh case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8220D7FCh case   23:*/		return 0x8220D800;
		  /* 8220D800h */ case   24:  		/* addi R4, R1, 88 */
		/* 8220D800h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8220D800h case   24:*/		return 0x8220D804;
		  /* 8220D804h */ case   25:  		/* bl 160996 */
		/* 8220D804h case   25:*/		regs.LR = 0x8220D808; return 0x82234CE8;
		/* 8220D804h case   25:*/		return 0x8220D808;
		  /* 8220D808h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 8220D808h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D808h case   26:*/		return 0x8220D80C;
		  /* 8220D80Ch */ case   27:  		/* bc 12, CR0_EQ, 156 */
		/* 8220D80Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x8220D8A8;  }
		/* 8220D80Ch case   27:*/		return 0x8220D810;
		  /* 8220D810h */ case   28:  		/* lwz R3, <#[R1 + 80]> */
		/* 8220D810h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8220D810h case   28:*/		return 0x8220D814;
		  /* 8220D814h */ case   29:  		/* bl 161172 */
		/* 8220D814h case   29:*/		regs.LR = 0x8220D818; return 0x82234DA8;
		/* 8220D814h case   29:*/		return 0x8220D818;
		  /* 8220D818h */ case   30:  		/* mr R30, R3 */
		/* 8220D818h case   30:*/		regs.R30 = regs.R3;
		/* 8220D818h case   30:*/		return 0x8220D81C;
		  /* 8220D81Ch */ case   31:  		/* bl -725220 */
		/* 8220D81Ch case   31:*/		regs.LR = 0x8220D820; return 0x8215C738;
		/* 8220D81Ch case   31:*/		return 0x8220D820;
		  /* 8220D820h */ case   32:  		/* lis R11, -32253 */
		/* 8220D820h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220D820h case   32:*/		return 0x8220D824;
		  /* 8220D824h */ case   33:  		/* lis R10, -32252 */
		/* 8220D824h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D824h case   33:*/		return 0x8220D828;
		  /* 8220D828h */ case   34:  		/* cmplwi CR0, R3, 0 */
		/* 8220D828h case   34:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D828h case   34:*/		return 0x8220D82C;
		  /* 8220D82Ch */ case   35:  		/* addi R27, R11, 27460 */
		/* 8220D82Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8220D82Ch case   35:*/		return 0x8220D830;
		  /* 8220D830h */ case   36:  		/* addi R26, R10, -9248 */
		/* 8220D830h case   36:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFDBE0);
		/* 8220D830h case   36:*/		return 0x8220D834;
		  /* 8220D834h */ case   37:  		/* bc 4, CR0_EQ, 32 */
		/* 8220D834h case   37:*/		if ( !regs.CR[0].eq ) { return 0x8220D854;  }
		/* 8220D834h case   37:*/		return 0x8220D838;
		  /* 8220D838h */ case   38:  		/* lis R11, -32252 */
		/* 8220D838h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D838h case   38:*/		return 0x8220D83C;
		  /* 8220D83Ch */ case   39:  		/* mr R6, R26 */
		/* 8220D83Ch case   39:*/		regs.R6 = regs.R26;
		/* 8220D83Ch case   39:*/		return 0x8220D840;
		  /* 8220D840h */ case   40:  		/* addi R5, R11, -8504 */
		/* 8220D840h case   40:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDEC8);
		/* 8220D840h case   40:*/		return 0x8220D844;
		  /* 8220D844h */ case   41:  		/* mr R4, R27 */
		/* 8220D844h case   41:*/		regs.R4 = regs.R27;
		/* 8220D844h case   41:*/		return 0x8220D848;
		  /* 8220D848h */ case   42:  		/* li R7, 685 */
		/* 8220D848h case   42:*/		cpu::op::li<0>(regs,&regs.R7,0x2AD);
		/* 8220D848h case   42:*/		return 0x8220D84C;
		  /* 8220D84Ch */ case   43:  		/* li R3, 0 */
		/* 8220D84Ch case   43:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D84Ch case   43:*/		return 0x8220D850;
		  /* 8220D850h */ case   44:  		/* bl -744520 */
		/* 8220D850h case   44:*/		regs.LR = 0x8220D854; return 0x82157C08;
		/* 8220D850h case   44:*/		return 0x8220D854;
	}
	return 0x8220D854;
} // Block from 8220D7A0h-8220D854h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8220D854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D854);
		  /* 8220D854h */ case    0:  		/* mr R3, R30 */
		/* 8220D854h case    0:*/		regs.R3 = regs.R30;
		/* 8220D854h case    0:*/		return 0x8220D858;
		  /* 8220D858h */ case    1:  		/* bl -724504 */
		/* 8220D858h case    1:*/		regs.LR = 0x8220D85C; return 0x8215CA40;
		/* 8220D858h case    1:*/		return 0x8220D85C;
		  /* 8220D85Ch */ case    2:  		/* b 68 */
		/* 8220D85Ch case    2:*/		return 0x8220D8A0;
		/* 8220D85Ch case    2:*/		return 0x8220D860;
		  /* 8220D860h */ case    3:  		/* mr R3, R29 */
		/* 8220D860h case    3:*/		regs.R3 = regs.R29;
		/* 8220D860h case    3:*/		return 0x8220D864;
		  /* 8220D864h */ case    4:  		/* bl -723572 */
		/* 8220D864h case    4:*/		regs.LR = 0x8220D868; return 0x8215CDF0;
		/* 8220D864h case    4:*/		return 0x8220D868;
		  /* 8220D868h */ case    5:  		/* mr R4, R28 */
		/* 8220D868h case    5:*/		regs.R4 = regs.R28;
		/* 8220D868h case    5:*/		return 0x8220D86C;
		  /* 8220D86Ch */ case    6:  		/* mr R31, R3 */
		/* 8220D86Ch case    6:*/		regs.R31 = regs.R3;
		/* 8220D86Ch case    6:*/		return 0x8220D870;
		  /* 8220D870h */ case    7:  		/* lwz R3, <#[R3]> */
		/* 8220D870h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220D870h case    7:*/		return 0x8220D874;
		  /* 8220D874h */ case    8:  		/* bl -719628 */
		/* 8220D874h case    8:*/		regs.LR = 0x8220D878; return 0x8215DD68;
		/* 8220D874h case    8:*/		return 0x8220D878;
		  /* 8220D878h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8220D878h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D878h case    9:*/		return 0x8220D87C;
		  /* 8220D87Ch */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 8220D87Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x8220D894;  }
		/* 8220D87Ch case   10:*/		return 0x8220D880;
	}
	return 0x8220D880;
} // Block from 8220D854h-8220D880h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220D880h
// Function '?FA_FindOrAllocFetchConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_FA_FETCHCONST_ALLOC@1@PAU_ABSTRACT_STATE@1@W4E_FETCH_TYPE@1@IPAI3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D880);
		  /* 8220D880h */ case    0:  		/* mr R4, R28 */
		/* 8220D880h case    0:*/		regs.R4 = regs.R28;
		/* 8220D880h case    0:*/		return 0x8220D884;
		  /* 8220D884h */ case    1:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220D884h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D884h case    1:*/		return 0x8220D888;
		  /* 8220D888h */ case    2:  		/* bl -719648 */
		/* 8220D888h case    2:*/		regs.LR = 0x8220D88C; return 0x8215DD68;
		/* 8220D888h case    2:*/		return 0x8220D88C;
		  /* 8220D88Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8220D88Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D88Ch case    3:*/		return 0x8220D890;
		  /* 8220D890h */ case    4:  		/* bc 4, CR0_EQ, 36 */
		/* 8220D890h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8220D8B4;  }
		/* 8220D890h case    4:*/		return 0x8220D894;
	}
	return 0x8220D894;
} // Block from 8220D880h-8220D894h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220D894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D894);
		  /* 8220D894h */ case    0:  		/* mr R4, R29 */
		/* 8220D894h case    0:*/		regs.R4 = regs.R29;
		/* 8220D894h case    0:*/		return 0x8220D898;
		  /* 8220D898h */ case    1:  		/* mr R3, R30 */
		/* 8220D898h case    1:*/		regs.R3 = regs.R30;
		/* 8220D898h case    1:*/		return 0x8220D89C;
		  /* 8220D89Ch */ case    2:  		/* bl -723804 */
		/* 8220D89Ch case    2:*/		regs.LR = 0x8220D8A0; return 0x8215CD40;
		/* 8220D89Ch case    2:*/		return 0x8220D8A0;
	}
	return 0x8220D8A0;
} // Block from 8220D894h-8220D8A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220D8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D8A0);
		  /* 8220D8A0h */ case    0:  		/* or. R29, R3, R3 */
		/* 8220D8A0h case    0:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8220D8A0h case    0:*/		return 0x8220D8A4;
		  /* 8220D8A4h */ case    1:  		/* bc 4, CR0_EQ, -68 */
		/* 8220D8A4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8220D860;  }
		/* 8220D8A4h case    1:*/		return 0x8220D8A8;
	}
	return 0x8220D8A8;
} // Block from 8220D8A0h-8220D8A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220D8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D8A8);
		  /* 8220D8A8h */ case    0:  		/* li R3, 0 */
		/* 8220D8A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D8A8h case    0:*/		return 0x8220D8AC;
		  /* 8220D8ACh */ case    1:  		/* addi R1, R1, 160 */
		/* 8220D8ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220D8ACh case    1:*/		return 0x8220D8B0;
		  /* 8220D8B0h */ case    2:  		/* b -1558036 */
		/* 8220D8B0h case    2:*/		return 0x8209129C;
		/* 8220D8B0h case    2:*/		return 0x8220D8B4;
	}
	return 0x8220D8B4;
} // Block from 8220D8A8h-8220D8B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220D8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D8B4);
		  /* 8220D8B4h */ case    0:  		/* lwz R4, <#[R31 + 4]> */
		/* 8220D8B4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D8B4h case    0:*/		return 0x8220D8B8;
		  /* 8220D8B8h */ case    1:  		/* lwz R3, <#[R31]> */
		/* 8220D8B8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220D8B8h case    1:*/		return 0x8220D8BC;
		  /* 8220D8BCh */ case    2:  		/* bl -940 */
		/* 8220D8BCh case    2:*/		regs.LR = 0x8220D8C0; return 0x8220D510;
		/* 8220D8BCh case    2:*/		return 0x8220D8C0;
		  /* 8220D8C0h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8220D8C0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D8C0h case    3:*/		return 0x8220D8C4;
		  /* 8220D8C4h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 8220D8C4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8220D8E0;  }
		/* 8220D8C4h case    4:*/		return 0x8220D8C8;
		  /* 8220D8C8h */ case    5:  		/* lis R11, -32252 */
		/* 8220D8C8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D8C8h case    5:*/		return 0x8220D8CC;
		  /* 8220D8CCh */ case    6:  		/* mr R6, R26 */
		/* 8220D8CCh case    6:*/		regs.R6 = regs.R26;
		/* 8220D8CCh case    6:*/		return 0x8220D8D0;
		  /* 8220D8D0h */ case    7:  		/* addi R5, R11, -8568 */
		/* 8220D8D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDE88);
		/* 8220D8D0h case    7:*/		return 0x8220D8D4;
		  /* 8220D8D4h */ case    8:  		/* mr R4, R27 */
		/* 8220D8D4h case    8:*/		regs.R4 = regs.R27;
		/* 8220D8D4h case    8:*/		return 0x8220D8D8;
		  /* 8220D8D8h */ case    9:  		/* li R7, 699 */
		/* 8220D8D8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2BB);
		/* 8220D8D8h case    9:*/		return 0x8220D8DC;
		  /* 8220D8DCh */ case   10:  		/* bl -744660 */
		/* 8220D8DCh case   10:*/		regs.LR = 0x8220D8E0; return 0x82157C08;
		/* 8220D8DCh case   10:*/		return 0x8220D8E0;
	}
	return 0x8220D8E0;
} // Block from 8220D8B4h-8220D8E0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220D8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D8E0);
		  /* 8220D8E0h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8220D8E0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220D8E0h case    0:*/		return 0x8220D8E4;
		  /* 8220D8E4h */ case    1:  		/* bl -722164 */
		/* 8220D8E4h case    1:*/		regs.LR = 0x8220D8E8; return 0x8215D3F0;
		/* 8220D8E4h case    1:*/		return 0x8220D8E8;
		  /* 8220D8E8h */ case    2:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220D8E8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D8E8h case    2:*/		return 0x8220D8EC;
		  /* 8220D8ECh */ case    3:  		/* bl -722172 */
		/* 8220D8ECh case    3:*/		regs.LR = 0x8220D8F0; return 0x8215D3F0;
		/* 8220D8ECh case    3:*/		return 0x8220D8F0;
		  /* 8220D8F0h */ case    4:  		/* mr R5, R28 */
		/* 8220D8F0h case    4:*/		regs.R5 = regs.R28;
		/* 8220D8F0h case    4:*/		return 0x8220D8F4;
		  /* 8220D8F4h */ case    5:  		/* lwz R4, <#[R31]> */
		/* 8220D8F4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8220D8F4h case    5:*/		return 0x8220D8F8;
		  /* 8220D8F8h */ case    6:  		/* mr R3, R25 */
		/* 8220D8F8h case    6:*/		regs.R3 = regs.R25;
		/* 8220D8F8h case    6:*/		return 0x8220D8FC;
		  /* 8220D8FCh */ case    7:  		/* bl 77196 */
		/* 8220D8FCh case    7:*/		regs.LR = 0x8220D900; return 0x82220688;
		/* 8220D8FCh case    7:*/		return 0x8220D900;
		  /* 8220D900h */ case    8:  		/* mr R5, R28 */
		/* 8220D900h case    8:*/		regs.R5 = regs.R28;
		/* 8220D900h case    8:*/		return 0x8220D904;
		  /* 8220D904h */ case    9:  		/* mr R3, R25 */
		/* 8220D904h case    9:*/		regs.R3 = regs.R25;
		/* 8220D904h case    9:*/		return 0x8220D908;
		  /* 8220D908h */ case   10:  		/* lwz R4, <#[R31 + 4]> */
		/* 8220D908h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8220D908h case   10:*/		return 0x8220D90C;
		  /* 8220D90Ch */ case   11:  		/* bl 77444 */
		/* 8220D90Ch case   11:*/		regs.LR = 0x8220D910; return 0x82220790;
		/* 8220D90Ch case   11:*/		return 0x8220D910;
		  /* 8220D910h */ case   12:  		/* mr R4, R29 */
		/* 8220D910h case   12:*/		regs.R4 = regs.R29;
		/* 8220D910h case   12:*/		return 0x8220D914;
		  /* 8220D914h */ case   13:  		/* mr R3, R30 */
		/* 8220D914h case   13:*/		regs.R3 = regs.R30;
		/* 8220D914h case   13:*/		return 0x8220D918;
		  /* 8220D918h */ case   14:  		/* bl -724104 */
		/* 8220D918h case   14:*/		regs.LR = 0x8220D91C; return 0x8215CC90;
		/* 8220D918h case   14:*/		return 0x8220D91C;
		  /* 8220D91Ch */ case   15:  		/* mr R4, R3 */
		/* 8220D91Ch case   15:*/		regs.R4 = regs.R3;
		/* 8220D91Ch case   15:*/		return 0x8220D920;
		  /* 8220D920h */ case   16:  		/* mr R3, R30 */
		/* 8220D920h case   16:*/		regs.R3 = regs.R30;
		/* 8220D920h case   16:*/		return 0x8220D924;
		  /* 8220D924h */ case   17:  		/* bl -725396 */
		/* 8220D924h case   17:*/		regs.LR = 0x8220D928; return 0x8215C790;
		/* 8220D924h case   17:*/		return 0x8220D928;
		  /* 8220D928h */ case   18:  		/* li R3, 1 */
		/* 8220D928h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220D928h case   18:*/		return 0x8220D92C;
		  /* 8220D92Ch */ case   19:  		/* b -128 */
		/* 8220D92Ch case   19:*/		return 0x8220D8AC;
		/* 8220D92Ch case   19:*/		return 0x8220D930;
	}
	return 0x8220D930;
} // Block from 8220D8E0h-8220D930h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220D930h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D930);
		  /* 8220D930h */ case    0:  		/* mfspr R12, LR */
		/* 8220D930h case    0:*/		regs.R12 = regs.LR;
		/* 8220D930h case    0:*/		return 0x8220D934;
		  /* 8220D934h */ case    1:  		/* bl -1558288 */
		/* 8220D934h case    1:*/		regs.LR = 0x8220D938; return 0x82091224;
		/* 8220D934h case    1:*/		return 0x8220D938;
		  /* 8220D938h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8220D938h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8220D938h case    2:*/		return 0x8220D93C;
		  /* 8220D93Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220D93Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220D93Ch case    3:*/		return 0x8220D940;
		  /* 8220D940h */ case    4:  		/* lis R10, -32252 */
		/* 8220D940h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220D940h case    4:*/		return 0x8220D944;
		  /* 8220D944h */ case    5:  		/* mr R31, R3 */
		/* 8220D944h case    5:*/		regs.R31 = regs.R3;
		/* 8220D944h case    5:*/		return 0x8220D948;
		  /* 8220D948h */ case    6:  		/* mr R18, R4 */
		/* 8220D948h case    6:*/		regs.R18 = regs.R4;
		/* 8220D948h case    6:*/		return 0x8220D94C;
		  /* 8220D94Ch */ case    7:  		/* mr R15, R5 */
		/* 8220D94Ch case    7:*/		regs.R15 = regs.R5;
		/* 8220D94Ch case    7:*/		return 0x8220D950;
		  /* 8220D950h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220D950h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220D950h case    8:*/		return 0x8220D954;
		  /* 8220D954h */ case    9:  		/* addi R17, R11, 27460 */
		/* 8220D954h case    9:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R11,0x6B44);
		/* 8220D954h case    9:*/		return 0x8220D958;
		  /* 8220D958h */ case   10:  		/* addi R16, R10, -9248 */
		/* 8220D958h case   10:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R10,0xFFFFDBE0);
		/* 8220D958h case   10:*/		return 0x8220D95C;
		  /* 8220D95Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D95Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220D97C;  }
		/* 8220D95Ch case   11:*/		return 0x8220D960;
		  /* 8220D960h */ case   12:  		/* lis R11, -32252 */
		/* 8220D960h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D960h case   12:*/		return 0x8220D964;
		  /* 8220D964h */ case   13:  		/* mr R6, R16 */
		/* 8220D964h case   13:*/		regs.R6 = regs.R16;
		/* 8220D964h case   13:*/		return 0x8220D968;
		  /* 8220D968h */ case   14:  		/* addi R5, R11, -9252 */
		/* 8220D968h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDBDC);
		/* 8220D968h case   14:*/		return 0x8220D96C;
		  /* 8220D96Ch */ case   15:  		/* mr R4, R17 */
		/* 8220D96Ch case   15:*/		regs.R4 = regs.R17;
		/* 8220D96Ch case   15:*/		return 0x8220D970;
		  /* 8220D970h */ case   16:  		/* li R7, 792 */
		/* 8220D970h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x318);
		/* 8220D970h case   16:*/		return 0x8220D974;
		  /* 8220D974h */ case   17:  		/* li R3, 0 */
		/* 8220D974h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D974h case   17:*/		return 0x8220D978;
		  /* 8220D978h */ case   18:  		/* bl -744816 */
		/* 8220D978h case   18:*/		regs.LR = 0x8220D97C; return 0x82157C08;
		/* 8220D978h case   18:*/		return 0x8220D97C;
	}
	return 0x8220D97C;
} // Block from 8220D930h-8220D97Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220D97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D97C);
		  /* 8220D97Ch */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 8220D97Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8220D97Ch case    0:*/		return 0x8220D980;
		  /* 8220D980h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D980h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D9A0;  }
		/* 8220D980h case    1:*/		return 0x8220D984;
		  /* 8220D984h */ case    2:  		/* lis R11, -32252 */
		/* 8220D984h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D984h case    2:*/		return 0x8220D988;
		  /* 8220D988h */ case    3:  		/* mr R6, R16 */
		/* 8220D988h case    3:*/		regs.R6 = regs.R16;
		/* 8220D988h case    3:*/		return 0x8220D98C;
		  /* 8220D98Ch */ case    4:  		/* addi R5, R11, -22012 */
		/* 8220D98Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8220D98Ch case    4:*/		return 0x8220D990;
		  /* 8220D990h */ case    5:  		/* mr R4, R17 */
		/* 8220D990h case    5:*/		regs.R4 = regs.R17;
		/* 8220D990h case    5:*/		return 0x8220D994;
		  /* 8220D994h */ case    6:  		/* li R7, 793 */
		/* 8220D994h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x319);
		/* 8220D994h case    6:*/		return 0x8220D998;
		  /* 8220D998h */ case    7:  		/* li R3, 0 */
		/* 8220D998h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D998h case    7:*/		return 0x8220D99C;
		  /* 8220D99Ch */ case    8:  		/* bl -744852 */
		/* 8220D99Ch case    8:*/		regs.LR = 0x8220D9A0; return 0x82157C08;
		/* 8220D99Ch case    8:*/		return 0x8220D9A0;
	}
	return 0x8220D9A0;
} // Block from 8220D97Ch-8220D9A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220D9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D9A0);
		  /* 8220D9A0h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 8220D9A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 8220D9A0h case    0:*/		return 0x8220D9A4;
		  /* 8220D9A4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220D9A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220D9C4;  }
		/* 8220D9A4h case    1:*/		return 0x8220D9A8;
		  /* 8220D9A8h */ case    2:  		/* lis R11, -32252 */
		/* 8220D9A8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220D9A8h case    2:*/		return 0x8220D9AC;
		  /* 8220D9ACh */ case    3:  		/* mr R6, R16 */
		/* 8220D9ACh case    3:*/		regs.R6 = regs.R16;
		/* 8220D9ACh case    3:*/		return 0x8220D9B0;
		  /* 8220D9B0h */ case    4:  		/* addi R5, R11, -8448 */
		/* 8220D9B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8220D9B0h case    4:*/		return 0x8220D9B4;
		  /* 8220D9B4h */ case    5:  		/* mr R4, R17 */
		/* 8220D9B4h case    5:*/		regs.R4 = regs.R17;
		/* 8220D9B4h case    5:*/		return 0x8220D9B8;
	}
	return 0x8220D9B8;
} // Block from 8220D9A0h-8220D9B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220D9B8h
// Function '?ProcessCompileWithFunction@XGRAPHICS@@YA?AW4_SSM_COMPILEWITH_RESULT@1@W4E_SSM_COMPILEWITH_QUERY@1@IPAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D9B8);
		  /* 8220D9B8h */ case    0:  		/* li R7, 794 */
		/* 8220D9B8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x31A);
		/* 8220D9B8h case    0:*/		return 0x8220D9BC;
		  /* 8220D9BCh */ case    1:  		/* li R3, 0 */
		/* 8220D9BCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220D9BCh case    1:*/		return 0x8220D9C0;
		  /* 8220D9C0h */ case    2:  		/* bl -744888 */
		/* 8220D9C0h case    2:*/		regs.LR = 0x8220D9C4; return 0x82157C08;
		/* 8220D9C0h case    2:*/		return 0x8220D9C4;
	}
	return 0x8220D9C4;
} // Block from 8220D9B8h-8220D9C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220D9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220D9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220D9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220D9C4);
		  /* 8220D9C4h */ case    0:  		/* li R4, 1 */
		/* 8220D9C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220D9C4h case    0:*/		return 0x8220D9C8;
		  /* 8220D9C8h */ case    1:  		/* mr R3, R18 */
		/* 8220D9C8h case    1:*/		regs.R3 = regs.R18;
		/* 8220D9C8h case    1:*/		return 0x8220D9CC;
		  /* 8220D9CCh */ case    2:  		/* bl -722108 */
		/* 8220D9CCh case    2:*/		regs.LR = 0x8220D9D0; return 0x8215D510;
		/* 8220D9CCh case    2:*/		return 0x8220D9D0;
		  /* 8220D9D0h */ case    3:  		/* mr R30, R3 */
		/* 8220D9D0h case    3:*/		regs.R30 = regs.R3;
		/* 8220D9D0h case    3:*/		return 0x8220D9D4;
		  /* 8220D9D4h */ case    4:  		/* li R4, 0 */
		/* 8220D9D4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220D9D4h case    4:*/		return 0x8220D9D8;
		  /* 8220D9D8h */ case    5:  		/* mr R3, R18 */
		/* 8220D9D8h case    5:*/		regs.R3 = regs.R18;
		/* 8220D9D8h case    5:*/		return 0x8220D9DC;
		  /* 8220D9DCh */ case    6:  		/* bl -722124 */
		/* 8220D9DCh case    6:*/		regs.LR = 0x8220D9E0; return 0x8215D510;
		/* 8220D9DCh case    6:*/		return 0x8220D9E0;
		  /* 8220D9E0h */ case    7:  		/* li R4, 9 */
		/* 8220D9E0h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 8220D9E0h case    7:*/		return 0x8220D9E4;
		  /* 8220D9E4h */ case    8:  		/* mr R29, R3 */
		/* 8220D9E4h case    8:*/		regs.R29 = regs.R3;
		/* 8220D9E4h case    8:*/		return 0x8220D9E8;
		  /* 8220D9E8h */ case    9:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220D9E8h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220D9E8h case    9:*/		return 0x8220D9EC;
		  /* 8220D9ECh */ case   10:  		/* bl -14436 */
		/* 8220D9ECh case   10:*/		regs.LR = 0x8220D9F0; return 0x8220A188;
		/* 8220D9ECh case   10:*/		return 0x8220D9F0;
		  /* 8220D9F0h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8220D9F0h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220D9F0h case   11:*/		return 0x8220D9F4;
		  /* 8220D9F4h */ case   12:  		/* bc 12, CR0_EQ, 416 */
		/* 8220D9F4h case   12:*/		if ( regs.CR[0].eq ) { return 0x8220DB94;  }
		/* 8220D9F4h case   12:*/		return 0x8220D9F8;
		  /* 8220D9F8h */ case   13:  		/* addi R11, R1, 80 */
		/* 8220D9F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8220D9F8h case   13:*/		return 0x8220D9FC;
		  /* 8220D9FCh */ case   14:  		/* lwz R3, <#[R31 + 12]> */
		/* 8220D9FCh case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220D9FCh case   14:*/		return 0x8220DA00;
		  /* 8220DA00h */ case   15:  		/* li R28, 0 */
		/* 8220DA00h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8220DA00h case   15:*/		return 0x8220DA04;
		  /* 8220DA04h */ case   16:  		/* mr R4, R30 */
		/* 8220DA04h case   16:*/		regs.R4 = regs.R30;
		/* 8220DA04h case   16:*/		return 0x8220DA08;
		  /* 8220DA08h */ case   17:  		/* std R28, <#[R11]> */
		/* 8220DA08h case   17:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 8220DA08h case   17:*/		return 0x8220DA0C;
		  /* 8220DA0Ch */ case   18:  		/* std R28, <#[R11 + 8]> */
		/* 8220DA0Ch case   18:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 8220DA0Ch case   18:*/		return 0x8220DA10;
		  /* 8220DA10h */ case   19:  		/* std R28, <#[R11 + 16]> */
		/* 8220DA10h case   19:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 8220DA10h case   19:*/		return 0x8220DA14;
		  /* 8220DA14h */ case   20:  		/* std R28, <#[R11 + 24]> */
		/* 8220DA14h case   20:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 8220DA14h case   20:*/		return 0x8220DA18;
		  /* 8220DA18h */ case   21:  		/* std R28, <#[R11 + 32]> */
		/* 8220DA18h case   21:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000020) );
		/* 8220DA18h case   21:*/		return 0x8220DA1C;
		  /* 8220DA1Ch */ case   22:  		/* bl -711396 */
		/* 8220DA1Ch case   22:*/		regs.LR = 0x8220DA20; return 0x8215FF38;
		/* 8220DA1Ch case   22:*/		return 0x8220DA20;
		  /* 8220DA20h */ case   23:  		/* mr R4, R29 */
		/* 8220DA20h case   23:*/		regs.R4 = regs.R29;
		/* 8220DA20h case   23:*/		return 0x8220DA24;
		  /* 8220DA24h */ case   24:  		/* mr R23, R3 */
		/* 8220DA24h case   24:*/		regs.R23 = regs.R3;
		/* 8220DA24h case   24:*/		return 0x8220DA28;
		  /* 8220DA28h */ case   25:  		/* lwz R3, <#[R31 + 12]> */
		/* 8220DA28h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220DA28h case   25:*/		return 0x8220DA2C;
		  /* 8220DA2Ch */ case   26:  		/* bl -711412 */
		/* 8220DA2Ch case   26:*/		regs.LR = 0x8220DA30; return 0x8215FF38;
		/* 8220DA2Ch case   26:*/		return 0x8220DA30;
		  /* 8220DA30h */ case   27:  		/* mr R24, R3 */
		/* 8220DA30h case   27:*/		regs.R24 = regs.R3;
		/* 8220DA30h case   27:*/		return 0x8220DA34;
		  /* 8220DA34h */ case   28:  		/* bl -725756 */
		/* 8220DA34h case   28:*/		regs.LR = 0x8220DA38; return 0x8215C738;
		/* 8220DA34h case   28:*/		return 0x8220DA38;
		  /* 8220DA38h */ case   29:  		/* mr R25, R3 */
		/* 8220DA38h case   29:*/		regs.R25 = regs.R3;
		/* 8220DA38h case   29:*/		return 0x8220DA3C;
		  /* 8220DA3Ch */ case   30:  		/* mr R3, R23 */
		/* 8220DA3Ch case   30:*/		regs.R3 = regs.R23;
		/* 8220DA3Ch case   30:*/		return 0x8220DA40;
		  /* 8220DA40h */ case   31:  		/* bl -725768 */
		/* 8220DA40h case   31:*/		regs.LR = 0x8220DA44; return 0x8215C738;
		/* 8220DA40h case   31:*/		return 0x8220DA44;
		  /* 8220DA44h */ case   32:  		/* cmplwi CR0, R3, 0 */
		/* 8220DA44h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220DA44h case   32:*/		return 0x8220DA48;
		  /* 8220DA48h */ case   33:  		/* bc 12, CR0_EQ, 332 */
		/* 8220DA48h case   33:*/		if ( regs.CR[0].eq ) { return 0x8220DB94;  }
		/* 8220DA48h case   33:*/		return 0x8220DA4C;
		  /* 8220DA4Ch */ case   34:  		/* cmplwi CR6, R25, 0 */
		/* 8220DA4Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220DA4Ch case   34:*/		return 0x8220DA50;
		  /* 8220DA50h */ case   35:  		/* bc 12, CR6_EQ, 324 */
		/* 8220DA50h case   35:*/		if ( regs.CR[6].eq ) { return 0x8220DB94;  }
		/* 8220DA50h case   35:*/		return 0x8220DA54;
		  /* 8220DA54h */ case   36:  		/* mr R3, R23 */
		/* 8220DA54h case   36:*/		regs.R3 = regs.R23;
		/* 8220DA54h case   36:*/		return 0x8220DA58;
		  /* 8220DA58h */ case   37:  		/* bl -725016 */
		/* 8220DA58h case   37:*/		regs.LR = 0x8220DA5C; return 0x8215CA40;
		/* 8220DA58h case   37:*/		return 0x8220DA5C;
		  /* 8220DA5Ch */ case   38:  		/* or. R19, R3, R3 */
		/* 8220DA5Ch case   38:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 8220DA5Ch case   38:*/		return 0x8220DA60;
	}
	return 0x8220DA60;
} // Block from 8220D9C4h-8220DA60h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8220DA60h
// Function '?SR_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SR_SHADER_RECYCLER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DA60);
		  /* 8220DA60h */ case    0:  		/* bc 12, CR0_EQ, 308 */
		/* 8220DA60h case    0:*/		if ( regs.CR[0].eq ) { return 0x8220DB94;  }
		/* 8220DA60h case    0:*/		return 0x8220DA64;
		  /* 8220DA64h */ case    1:  		/* lis R11, -32252 */
		/* 8220DA64h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DA64h case    1:*/		return 0x8220DA68;
		  /* 8220DA68h */ case    2:  		/* lis R10, -32252 */
		/* 8220DA68h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220DA68h case    2:*/		return 0x8220DA6C;
		  /* 8220DA6Ch */ case    3:  		/* lis R9, -32252 */
		/* 8220DA6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220DA6Ch case    3:*/		return 0x8220DA70;
		  /* 8220DA70h */ case    4:  		/* addi R22, R11, -9048 */
		/* 8220DA70h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFFDCA8);
		/* 8220DA70h case    4:*/		return 0x8220DA74;
		  /* 8220DA74h */ case    5:  		/* addi R21, R10, -8460 */
		/* 8220DA74h case    5:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0xFFFFDEF4);
		/* 8220DA74h case    5:*/		return 0x8220DA78;
		  /* 8220DA78h */ case    6:  		/* addi R20, R9, -9040 */
		/* 8220DA78h case    6:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R9,0xFFFFDCB0);
		/* 8220DA78h case    6:*/		return 0x8220DA7C;
		  /* 8220DA7Ch */ case    7:  		/* mr R3, R19 */
		/* 8220DA7Ch case    7:*/		regs.R3 = regs.R19;
		/* 8220DA7Ch case    7:*/		return 0x8220DA80;
		  /* 8220DA80h */ case    8:  		/* bl -724112 */
		/* 8220DA80h case    8:*/		regs.LR = 0x8220DA84; return 0x8215CDF0;
		/* 8220DA80h case    8:*/		return 0x8220DA84;
		  /* 8220DA84h */ case    9:  		/* or. R26, R3, R3 */
		/* 8220DA84h case    9:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8220DA84h case    9:*/		return 0x8220DA88;
		  /* 8220DA88h */ case   10:  		/* bc 4, CR0_EQ, 28 */
		/* 8220DA88h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8220DAA4;  }
		/* 8220DA88h case   10:*/		return 0x8220DA8C;
		  /* 8220DA8Ch */ case   11:  		/* mr R6, R16 */
		/* 8220DA8Ch case   11:*/		regs.R6 = regs.R16;
		/* 8220DA8Ch case   11:*/		return 0x8220DA90;
		  /* 8220DA90h */ case   12:  		/* mr R5, R20 */
		/* 8220DA90h case   12:*/		regs.R5 = regs.R20;
		/* 8220DA90h case   12:*/		return 0x8220DA94;
		  /* 8220DA94h */ case   13:  		/* mr R4, R17 */
		/* 8220DA94h case   13:*/		regs.R4 = regs.R17;
		/* 8220DA94h case   13:*/		return 0x8220DA98;
		  /* 8220DA98h */ case   14:  		/* li R7, 826 */
		/* 8220DA98h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x33A);
		/* 8220DA98h case   14:*/		return 0x8220DA9C;
		  /* 8220DA9Ch */ case   15:  		/* li R3, 0 */
		/* 8220DA9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DA9Ch case   15:*/		return 0x8220DAA0;
		  /* 8220DAA0h */ case   16:  		/* bl -745112 */
		/* 8220DAA0h case   16:*/		regs.LR = 0x8220DAA4; return 0x82157C08;
		/* 8220DAA0h case   16:*/		return 0x8220DAA4;
	}
	return 0x8220DAA4;
} // Block from 8220DA60h-8220DAA4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220DAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DAA4);
		  /* 8220DAA4h */ case    0:  		/* mr R4, R18 */
		/* 8220DAA4h case    0:*/		regs.R4 = regs.R18;
		/* 8220DAA4h case    0:*/		return 0x8220DAA8;
		  /* 8220DAA8h */ case    1:  		/* mr R3, R26 */
		/* 8220DAA8h case    1:*/		regs.R3 = regs.R26;
		/* 8220DAA8h case    1:*/		return 0x8220DAAC;
		  /* 8220DAACh */ case    2:  		/* bl -720196 */
		/* 8220DAACh case    2:*/		regs.LR = 0x8220DAB0; return 0x8215DD68;
		/* 8220DAACh case    2:*/		return 0x8220DAB0;
		  /* 8220DAB0h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8220DAB0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220DAB0h case    3:*/		return 0x8220DAB4;
		  /* 8220DAB4h */ case    4:  		/* bc 12, CR0_EQ, 204 */
		/* 8220DAB4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8220DB80;  }
		/* 8220DAB4h case    4:*/		return 0x8220DAB8;
		  /* 8220DAB8h */ case    5:  		/* mr R3, R24 */
		/* 8220DAB8h case    5:*/		regs.R3 = regs.R24;
		/* 8220DAB8h case    5:*/		return 0x8220DABC;
		  /* 8220DABCh */ case    6:  		/* bl -725116 */
		/* 8220DABCh case    6:*/		regs.LR = 0x8220DAC0; return 0x8215CA40;
		/* 8220DABCh case    6:*/		return 0x8220DAC0;
		  /* 8220DAC0h */ case    7:  		/* mr R27, R3 */
		/* 8220DAC0h case    7:*/		regs.R27 = regs.R3;
		/* 8220DAC0h case    7:*/		return 0x8220DAC4;
		  /* 8220DAC4h */ case    8:  		/* mr R29, R28 */
		/* 8220DAC4h case    8:*/		regs.R29 = regs.R28;
		/* 8220DAC4h case    8:*/		return 0x8220DAC8;
		  /* 8220DAC8h */ case    9:  		/* cmplwi CR6, R25, 0 */
		/* 8220DAC8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220DAC8h case    9:*/		return 0x8220DACC;
		  /* 8220DACCh */ case   10:  		/* bc 12, CR6_EQ, 180 */
		/* 8220DACCh case   10:*/		if ( regs.CR[6].eq ) { return 0x8220DB80;  }
		/* 8220DACCh case   10:*/		return 0x8220DAD0;
		  /* 8220DAD0h */ case   11:  		/* addi R30, R1, 80 */
		/* 8220DAD0h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 8220DAD0h case   11:*/		return 0x8220DAD4;
		  /* 8220DAD4h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 8220DAD4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220DAD4h case   12:*/		return 0x8220DAD8;
		  /* 8220DAD8h */ case   13:  		/* bc 4, CR6_EQ, 28 */
		/* 8220DAD8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220DAF4;  }
		/* 8220DAD8h case   13:*/		return 0x8220DADC;
		  /* 8220DADCh */ case   14:  		/* mr R6, R16 */
		/* 8220DADCh case   14:*/		regs.R6 = regs.R16;
		/* 8220DADCh case   14:*/		return 0x8220DAE0;
		  /* 8220DAE0h */ case   15:  		/* mr R5, R21 */
		/* 8220DAE0h case   15:*/		regs.R5 = regs.R21;
		/* 8220DAE0h case   15:*/		return 0x8220DAE4;
		  /* 8220DAE4h */ case   16:  		/* mr R4, R17 */
		/* 8220DAE4h case   16:*/		regs.R4 = regs.R17;
		/* 8220DAE4h case   16:*/		return 0x8220DAE8;
		  /* 8220DAE8h */ case   17:  		/* li R7, 840 */
		/* 8220DAE8h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x348);
		/* 8220DAE8h case   17:*/		return 0x8220DAEC;
		  /* 8220DAECh */ case   18:  		/* li R3, 0 */
		/* 8220DAECh case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DAECh case   18:*/		return 0x8220DAF0;
		  /* 8220DAF0h */ case   19:  		/* bl -745192 */
		/* 8220DAF0h case   19:*/		regs.LR = 0x8220DAF4; return 0x82157C08;
		/* 8220DAF0h case   19:*/		return 0x8220DAF4;
	}
	return 0x8220DAF4;
} // Block from 8220DAA4h-8220DAF4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220DAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DAF4);
		  /* 8220DAF4h */ case    0:  		/* mr R3, R27 */
		/* 8220DAF4h case    0:*/		regs.R3 = regs.R27;
		/* 8220DAF4h case    0:*/		return 0x8220DAF8;
		  /* 8220DAF8h */ case    1:  		/* bl -724232 */
		/* 8220DAF8h case    1:*/		regs.LR = 0x8220DAFC; return 0x8215CDF0;
		/* 8220DAF8h case    1:*/		return 0x8220DAFC;
		  /* 8220DAFCh */ case    2:  		/* or. R31, R3, R3 */
		/* 8220DAFCh case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220DAFCh case    2:*/		return 0x8220DB00;
		  /* 8220DB00h */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 8220DB00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220DB1C;  }
		/* 8220DB00h case    3:*/		return 0x8220DB04;
		  /* 8220DB04h */ case    4:  		/* mr R6, R16 */
		/* 8220DB04h case    4:*/		regs.R6 = regs.R16;
		/* 8220DB04h case    4:*/		return 0x8220DB08;
		  /* 8220DB08h */ case    5:  		/* mr R5, R22 */
		/* 8220DB08h case    5:*/		regs.R5 = regs.R22;
		/* 8220DB08h case    5:*/		return 0x8220DB0C;
		  /* 8220DB0Ch */ case    6:  		/* mr R4, R17 */
		/* 8220DB0Ch case    6:*/		regs.R4 = regs.R17;
		/* 8220DB0Ch case    6:*/		return 0x8220DB10;
		  /* 8220DB10h */ case    7:  		/* li R7, 843 */
		/* 8220DB10h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x34B);
		/* 8220DB10h case    7:*/		return 0x8220DB14;
		  /* 8220DB14h */ case    8:  		/* li R3, 0 */
		/* 8220DB14h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DB14h case    8:*/		return 0x8220DB18;
		  /* 8220DB18h */ case    9:  		/* bl -745232 */
		/* 8220DB18h case    9:*/		regs.LR = 0x8220DB1C; return 0x82157C08;
		/* 8220DB18h case    9:*/		return 0x8220DB1C;
	}
	return 0x8220DB1C;
} // Block from 8220DAF4h-8220DB1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB1C);
		  /* 8220DB1Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8220DB1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220DB1Ch case    0:*/		return 0x8220DB20;
		  /* 8220DB20h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8220DB20h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220DB20h case    1:*/		return 0x8220DB24;
		  /* 8220DB24h */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 8220DB24h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220DB50;  }
		/* 8220DB24h case    2:*/		return 0x8220DB28;
		  /* 8220DB28h */ case    3:  		/* mr R4, R18 */
		/* 8220DB28h case    3:*/		regs.R4 = regs.R18;
		/* 8220DB28h case    3:*/		return 0x8220DB2C;
		  /* 8220DB2Ch */ case    4:  		/* mr R3, R31 */
		/* 8220DB2Ch case    4:*/		regs.R3 = regs.R31;
		/* 8220DB2Ch case    4:*/		return 0x8220DB30;
		  /* 8220DB30h */ case    5:  		/* bl -720328 */
		/* 8220DB30h case    5:*/		regs.LR = 0x8220DB34; return 0x8215DD68;
		/* 8220DB30h case    5:*/		return 0x8220DB34;
		  /* 8220DB34h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8220DB34h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220DB34h case    6:*/		return 0x8220DB38;
		  /* 8220DB38h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 8220DB38h case    7:*/		if ( regs.CR[0].eq ) { return 0x8220DB48;  }
		/* 8220DB38h case    7:*/		return 0x8220DB3C;
		  /* 8220DB3Ch */ case    8:  		/* li R11, 1 */
		/* 8220DB3Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8220DB3Ch case    8:*/		return 0x8220DB40;
		  /* 8220DB40h */ case    9:  		/* stw R11, <#[R30]> */
		/* 8220DB40h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220DB40h case    9:*/		return 0x8220DB44;
		  /* 8220DB44h */ case   10:  		/* b 24 */
		/* 8220DB44h case   10:*/		return 0x8220DB5C;
		/* 8220DB44h case   10:*/		return 0x8220DB48;
	}
	return 0x8220DB48;
} // Block from 8220DB1Ch-8220DB48h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB48);
		  /* 8220DB48h */ case    0:  		/* li R11, 2 */
		/* 8220DB48h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8220DB48h case    0:*/		return 0x8220DB4C;
		  /* 8220DB4Ch */ case    1:  		/* stw R11, <#[R30]> */
		/* 8220DB4Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220DB4Ch case    1:*/		return 0x8220DB50;
	}
	return 0x8220DB50;
} // Block from 8220DB48h-8220DB50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB50);
		  /* 8220DB50h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8220DB50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220DB50h case    0:*/		return 0x8220DB54;
		  /* 8220DB54h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8220DB54h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220DB54h case    1:*/		return 0x8220DB58;
		  /* 8220DB58h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 8220DB58h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220DB70;  }
		/* 8220DB58h case    2:*/		return 0x8220DB5C;
	}
	return 0x8220DB5C;
} // Block from 8220DB50h-8220DB5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB5C);
		  /* 8220DB5Ch */ case    0:  		/* mr R4, R31 */
		/* 8220DB5Ch case    0:*/		regs.R4 = regs.R31;
		/* 8220DB5Ch case    0:*/		return 0x8220DB60;
	}
	return 0x8220DB60;
} // Block from 8220DB5Ch-8220DB60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB60h
// Function '?SR_StoreShaderPair@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SR_SHADER_RECYCLER@1@PAU_CS_COMPILED_SHADER@1@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB60);
		  /* 8220DB60h */ case    0:  		/* mr R3, R26 */
		/* 8220DB60h case    0:*/		regs.R3 = regs.R26;
		/* 8220DB60h case    0:*/		return 0x8220DB64;
		  /* 8220DB64h */ case    1:  		/* bl -1620 */
		/* 8220DB64h case    1:*/		regs.LR = 0x8220DB68; return 0x8220D510;
		/* 8220DB64h case    1:*/		return 0x8220DB68;
		  /* 8220DB68h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8220DB68h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220DB68h case    2:*/		return 0x8220DB6C;
		  /* 8220DB6Ch */ case    3:  		/* bc 4, CR0_EQ, 52 */
		/* 8220DB6Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220DBA0;  }
		/* 8220DB6Ch case    3:*/		return 0x8220DB70;
	}
	return 0x8220DB70;
} // Block from 8220DB60h-8220DB70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB70);
		  /* 8220DB70h */ case    0:  		/* addi R29, R29, 1 */
		/* 8220DB70h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8220DB70h case    0:*/		return 0x8220DB74;
		  /* 8220DB74h */ case    1:  		/* addi R30, R30, 4 */
		/* 8220DB74h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220DB74h case    1:*/		return 0x8220DB78;
		  /* 8220DB78h */ case    2:  		/* cmplw CR6, R29, R25 */
		/* 8220DB78h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8220DB78h case    2:*/		return 0x8220DB7C;
		  /* 8220DB7Ch */ case    3:  		/* bc 12, CR6_LT, -168 */
		/* 8220DB7Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8220DAD4;  }
		/* 8220DB7Ch case    3:*/		return 0x8220DB80;
	}
	return 0x8220DB80;
} // Block from 8220DB70h-8220DB80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB80);
		  /* 8220DB80h */ case    0:  		/* mr R4, R19 */
		/* 8220DB80h case    0:*/		regs.R4 = regs.R19;
		/* 8220DB80h case    0:*/		return 0x8220DB84;
		  /* 8220DB84h */ case    1:  		/* mr R3, R23 */
		/* 8220DB84h case    1:*/		regs.R3 = regs.R23;
		/* 8220DB84h case    1:*/		return 0x8220DB88;
		  /* 8220DB88h */ case    2:  		/* bl -724552 */
		/* 8220DB88h case    2:*/		regs.LR = 0x8220DB8C; return 0x8215CD40;
		/* 8220DB88h case    2:*/		return 0x8220DB8C;
		  /* 8220DB8Ch */ case    3:  		/* or. R19, R3, R3 */
		/* 8220DB8Ch case    3:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 8220DB8Ch case    3:*/		return 0x8220DB90;
		  /* 8220DB90h */ case    4:  		/* bc 4, CR0_EQ, -276 */
		/* 8220DB90h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8220DA7C;  }
		/* 8220DB90h case    4:*/		return 0x8220DB94;
	}
	return 0x8220DB94;
} // Block from 8220DB80h-8220DB94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220DB94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DB94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DB94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DB94);
		  /* 8220DB94h */ case    0:  		/* li R3, 0 */
		/* 8220DB94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DB94h case    0:*/		return 0x8220DB98;
		  /* 8220DB98h */ case    1:  		/* addi R1, R1, 272 */
		/* 8220DB98h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8220DB98h case    1:*/		return 0x8220DB9C;
		  /* 8220DB9Ch */ case    2:  		/* b -1558824 */
		/* 8220DB9Ch case    2:*/		return 0x82091274;
		/* 8220DB9Ch case    2:*/		return 0x8220DBA0;
	}
	return 0x8220DBA0;
} // Block from 8220DB94h-8220DBA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220DBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DBA0);
		  /* 8220DBA0h */ case    0:  		/* mr R3, R26 */
		/* 8220DBA0h case    0:*/		regs.R3 = regs.R26;
		/* 8220DBA0h case    0:*/		return 0x8220DBA4;
		  /* 8220DBA4h */ case    1:  		/* bl -722868 */
		/* 8220DBA4h case    1:*/		regs.LR = 0x8220DBA8; return 0x8215D3F0;
		/* 8220DBA4h case    1:*/		return 0x8220DBA8;
		  /* 8220DBA8h */ case    2:  		/* mr R3, R31 */
		/* 8220DBA8h case    2:*/		regs.R3 = regs.R31;
		/* 8220DBA8h case    2:*/		return 0x8220DBAC;
		  /* 8220DBACh */ case    3:  		/* bl -722876 */
		/* 8220DBACh case    3:*/		regs.LR = 0x8220DBB0; return 0x8215D3F0;
		/* 8220DBACh case    3:*/		return 0x8220DBB0;
		  /* 8220DBB0h */ case    4:  		/* mr R5, R18 */
		/* 8220DBB0h case    4:*/		regs.R5 = regs.R18;
		/* 8220DBB0h case    4:*/		return 0x8220DBB4;
		  /* 8220DBB4h */ case    5:  		/* mr R4, R26 */
		/* 8220DBB4h case    5:*/		regs.R4 = regs.R26;
		/* 8220DBB4h case    5:*/		return 0x8220DBB8;
		  /* 8220DBB8h */ case    6:  		/* mr R3, R15 */
		/* 8220DBB8h case    6:*/		regs.R3 = regs.R15;
		/* 8220DBB8h case    6:*/		return 0x8220DBBC;
		  /* 8220DBBCh */ case    7:  		/* bl 76492 */
		/* 8220DBBCh case    7:*/		regs.LR = 0x8220DBC0; return 0x82220688;
		/* 8220DBBCh case    7:*/		return 0x8220DBC0;
		  /* 8220DBC0h */ case    8:  		/* mr R5, R18 */
		/* 8220DBC0h case    8:*/		regs.R5 = regs.R18;
		/* 8220DBC0h case    8:*/		return 0x8220DBC4;
		  /* 8220DBC4h */ case    9:  		/* mr R4, R31 */
		/* 8220DBC4h case    9:*/		regs.R4 = regs.R31;
		/* 8220DBC4h case    9:*/		return 0x8220DBC8;
		  /* 8220DBC8h */ case   10:  		/* mr R3, R15 */
		/* 8220DBC8h case   10:*/		regs.R3 = regs.R15;
		/* 8220DBC8h case   10:*/		return 0x8220DBCC;
		  /* 8220DBCCh */ case   11:  		/* bl 76740 */
		/* 8220DBCCh case   11:*/		regs.LR = 0x8220DBD0; return 0x82220790;
		/* 8220DBCCh case   11:*/		return 0x8220DBD0;
		  /* 8220DBD0h */ case   12:  		/* li R3, 1 */
		/* 8220DBD0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8220DBD0h case   12:*/		return 0x8220DBD4;
		  /* 8220DBD4h */ case   13:  		/* b -60 */
		/* 8220DBD4h case   13:*/		return 0x8220DB98;
		/* 8220DBD4h case   13:*/		return 0x8220DBD8;
	}
	return 0x8220DBD8;
} // Block from 8220DBA0h-8220DBD8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220DBD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DBD8);
		  /* 8220DBD8h */ case    0:  		/* mfspr R12, LR */
		/* 8220DBD8h case    0:*/		regs.R12 = regs.LR;
		/* 8220DBD8h case    0:*/		return 0x8220DBDC;
		  /* 8220DBDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220DBDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220DBDCh case    1:*/		return 0x8220DBE0;
		  /* 8220DBE0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220DBE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220DBE0h case    2:*/		return 0x8220DBE4;
		  /* 8220DBE4h */ case    3:  		/* mr R11, R4 */
		/* 8220DBE4h case    3:*/		regs.R11 = regs.R4;
		/* 8220DBE4h case    3:*/		return 0x8220DBE8;
		  /* 8220DBE8h */ case    4:  		/* lwz R10, <#[R3 + 328]> */
		/* 8220DBE8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000148) );
		/* 8220DBE8h case    4:*/		return 0x8220DBEC;
		  /* 8220DBECh */ case    5:  		/* lwz R9, <#[R3 + 324]> */
		/* 8220DBECh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000144) );
		/* 8220DBECh case    5:*/		return 0x8220DBF0;
		  /* 8220DBF0h */ case    6:  		/* lwz R8, <#[R3 + 320]> */
		/* 8220DBF0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000140) );
		/* 8220DBF0h case    6:*/		return 0x8220DBF4;
		  /* 8220DBF4h */ case    7:  		/* lwz R7, <#[R3 + 20]> */
		/* 8220DBF4h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 8220DBF4h case    7:*/		return 0x8220DBF8;
		  /* 8220DBF8h */ case    8:  		/* lwz R6, <#[R3 + 24]> */
		/* 8220DBF8h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000018) );
		/* 8220DBF8h case    8:*/		return 0x8220DBFC;
		  /* 8220DBFCh */ case    9:  		/* lwz R5, <#[R3 + 8]> */
		/* 8220DBFCh case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000008) );
		/* 8220DBFCh case    9:*/		return 0x8220DC00;
		  /* 8220DC00h */ case   10:  		/* lwz R4, <#[R3 + 4]> */
		/* 8220DC00h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8220DC00h case   10:*/		return 0x8220DC04;
		  /* 8220DC04h */ case   11:  		/* lwz R3, <#[R3]> */
		/* 8220DC04h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220DC04h case   11:*/		return 0x8220DC08;
		  /* 8220DC08h */ case   12:  		/* stw R11, <#[R1 + 84]> */
		/* 8220DC08h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8220DC08h case   12:*/		return 0x8220DC0C;
		  /* 8220DC0Ch */ case   13:  		/* bl 75668 */
		/* 8220DC0Ch case   13:*/		regs.LR = 0x8220DC10; return 0x822203A0;
		/* 8220DC0Ch case   13:*/		return 0x8220DC10;
		  /* 8220DC10h */ case   14:  		/* addi R1, R1, 96 */
		/* 8220DC10h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220DC10h case   14:*/		return 0x8220DC14;
		  /* 8220DC14h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220DC14h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220DC14h case   15:*/		return 0x8220DC18;
		  /* 8220DC18h */ case   16:  		/* mtspr LR, R12 */
		/* 8220DC18h case   16:*/		regs.LR = regs.R12;
		/* 8220DC18h case   16:*/		return 0x8220DC1C;
		  /* 8220DC1Ch */ case   17:  		/* bclr 20, CR0_LT */
		/* 8220DC1Ch case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220DC1Ch case   17:*/		return 0x8220DC20;
	}
	return 0x8220DC20;
} // Block from 8220DBD8h-8220DC20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220DC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DC20);
		  /* 8220DC20h */ case    0:  		/* mfspr R12, LR */
		/* 8220DC20h case    0:*/		regs.R12 = regs.LR;
		/* 8220DC20h case    0:*/		return 0x8220DC24;
		  /* 8220DC24h */ case    1:  		/* bl -1559000 */
		/* 8220DC24h case    1:*/		regs.LR = 0x8220DC28; return 0x8209124C;
		/* 8220DC24h case    1:*/		return 0x8220DC28;
		  /* 8220DC28h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220DC28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220DC28h case    2:*/		return 0x8220DC2C;
		  /* 8220DC2Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220DC2Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220DC2Ch case    3:*/		return 0x8220DC30;
		  /* 8220DC30h */ case    4:  		/* lis R10, -32252 */
		/* 8220DC30h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220DC30h case    4:*/		return 0x8220DC34;
		  /* 8220DC34h */ case    5:  		/* mr R31, R3 */
		/* 8220DC34h case    5:*/		regs.R31 = regs.R3;
		/* 8220DC34h case    5:*/		return 0x8220DC38;
		  /* 8220DC38h */ case    6:  		/* mr R30, R4 */
		/* 8220DC38h case    6:*/		regs.R30 = regs.R4;
		/* 8220DC38h case    6:*/		return 0x8220DC3C;
		  /* 8220DC3Ch */ case    7:  		/* mr R27, R5 */
		/* 8220DC3Ch case    7:*/		regs.R27 = regs.R5;
		/* 8220DC3Ch case    7:*/		return 0x8220DC40;
		  /* 8220DC40h */ case    8:  		/* mr R25, R6 */
		/* 8220DC40h case    8:*/		regs.R25 = regs.R6;
		/* 8220DC40h case    8:*/		return 0x8220DC44;
		  /* 8220DC44h */ case    9:  		/* li R26, 0 */
		/* 8220DC44h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8220DC44h case    9:*/		return 0x8220DC48;
		  /* 8220DC48h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8220DC48h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220DC48h case   10:*/		return 0x8220DC4C;
		  /* 8220DC4Ch */ case   11:  		/* addi R29, R11, 27460 */
		/* 8220DC4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220DC4Ch case   11:*/		return 0x8220DC50;
		  /* 8220DC50h */ case   12:  		/* addi R28, R10, -8432 */
		/* 8220DC50h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFDF10);
		/* 8220DC50h case   12:*/		return 0x8220DC54;
		  /* 8220DC54h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DC54h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220DC74;  }
		/* 8220DC54h case   13:*/		return 0x8220DC58;
		  /* 8220DC58h */ case   14:  		/* lis R11, -32252 */
		/* 8220DC58h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DC58h case   14:*/		return 0x8220DC5C;
		  /* 8220DC5Ch */ case   15:  		/* mr R6, R28 */
		/* 8220DC5Ch case   15:*/		regs.R6 = regs.R28;
		/* 8220DC5Ch case   15:*/		return 0x8220DC60;
		  /* 8220DC60h */ case   16:  		/* addi R5, R11, -18052 */
		/* 8220DC60h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB97C);
		/* 8220DC60h case   16:*/		return 0x8220DC64;
		  /* 8220DC64h */ case   17:  		/* mr R4, R29 */
		/* 8220DC64h case   17:*/		regs.R4 = regs.R29;
		/* 8220DC64h case   17:*/		return 0x8220DC68;
		  /* 8220DC68h */ case   18:  		/* li R7, 733 */
		/* 8220DC68h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x2DD);
		/* 8220DC68h case   18:*/		return 0x8220DC6C;
		  /* 8220DC6Ch */ case   19:  		/* li R3, 0 */
		/* 8220DC6Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DC6Ch case   19:*/		return 0x8220DC70;
		  /* 8220DC70h */ case   20:  		/* bl -745576 */
		/* 8220DC70h case   20:*/		regs.LR = 0x8220DC74; return 0x82157C08;
		/* 8220DC70h case   20:*/		return 0x8220DC74;
	}
	return 0x8220DC74;
} // Block from 8220DC20h-8220DC74h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8220DC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DC74);
		  /* 8220DC74h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8220DC74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220DC74h case    0:*/		return 0x8220DC78;
		  /* 8220DC78h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DC78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220DC98;  }
		/* 8220DC78h case    1:*/		return 0x8220DC7C;
		  /* 8220DC7Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220DC7Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DC7Ch case    2:*/		return 0x8220DC80;
		  /* 8220DC80h */ case    3:  		/* mr R6, R28 */
		/* 8220DC80h case    3:*/		regs.R6 = regs.R28;
		/* 8220DC80h case    3:*/		return 0x8220DC84;
		  /* 8220DC84h */ case    4:  		/* addi R5, R11, -8444 */
		/* 8220DC84h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF04);
		/* 8220DC84h case    4:*/		return 0x8220DC88;
		  /* 8220DC88h */ case    5:  		/* mr R4, R29 */
		/* 8220DC88h case    5:*/		regs.R4 = regs.R29;
		/* 8220DC88h case    5:*/		return 0x8220DC8C;
		  /* 8220DC8Ch */ case    6:  		/* li R7, 734 */
		/* 8220DC8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2DE);
		/* 8220DC8Ch case    6:*/		return 0x8220DC90;
		  /* 8220DC90h */ case    7:  		/* li R3, 0 */
		/* 8220DC90h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DC90h case    7:*/		return 0x8220DC94;
		  /* 8220DC94h */ case    8:  		/* bl -745612 */
		/* 8220DC94h case    8:*/		regs.LR = 0x8220DC98; return 0x82157C08;
		/* 8220DC94h case    8:*/		return 0x8220DC98;
	}
	return 0x8220DC98;
} // Block from 8220DC74h-8220DC98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220DC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DC98);
		  /* 8220DC98h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220DC98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220DC98h case    0:*/		return 0x8220DC9C;
		  /* 8220DC9Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DC9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220DCBC;  }
		/* 8220DC9Ch case    1:*/		return 0x8220DCA0;
		  /* 8220DCA0h */ case    2:  		/* lis R11, -32252 */
		/* 8220DCA0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DCA0h case    2:*/		return 0x8220DCA4;
		  /* 8220DCA4h */ case    3:  		/* mr R6, R28 */
		/* 8220DCA4h case    3:*/		regs.R6 = regs.R28;
		/* 8220DCA4h case    3:*/		return 0x8220DCA8;
		  /* 8220DCA8h */ case    4:  		/* addi R5, R11, -8080 */
		/* 8220DCA8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE070);
		/* 8220DCA8h case    4:*/		return 0x8220DCAC;
		  /* 8220DCACh */ case    5:  		/* mr R4, R29 */
		/* 8220DCACh case    5:*/		regs.R4 = regs.R29;
		/* 8220DCACh case    5:*/		return 0x8220DCB0;
		  /* 8220DCB0h */ case    6:  		/* li R7, 735 */
		/* 8220DCB0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2DF);
		/* 8220DCB0h case    6:*/		return 0x8220DCB4;
		  /* 8220DCB4h */ case    7:  		/* li R3, 0 */
		/* 8220DCB4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DCB4h case    7:*/		return 0x8220DCB8;
		  /* 8220DCB8h */ case    8:  		/* bl -745648 */
		/* 8220DCB8h case    8:*/		regs.LR = 0x8220DCBC; return 0x82157C08;
		/* 8220DCB8h case    8:*/		return 0x8220DCBC;
	}
	return 0x8220DCBC;
} // Block from 8220DC98h-8220DCBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220DCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DCBC);
		  /* 8220DCBCh */ case    0:  		/* lwz R11, <#[R27 + 32]> */
		/* 8220DCBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DCBCh case    0:*/		return 0x8220DCC0;
		  /* 8220DCC0h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8220DCC0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8220DCC0h case    1:*/		return 0x8220DCC4;
		  /* 8220DCC4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8220DCC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220DCC4h case    2:*/		return 0x8220DCC8;
		  /* 8220DCC8h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DCC8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8220DCE8;  }
		/* 8220DCC8h case    3:*/		return 0x8220DCCC;
		  /* 8220DCCCh */ case    4:  		/* lis R11, -32252 */
		/* 8220DCCCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DCCCh case    4:*/		return 0x8220DCD0;
		  /* 8220DCD0h */ case    5:  		/* mr R6, R28 */
		/* 8220DCD0h case    5:*/		regs.R6 = regs.R28;
		/* 8220DCD0h case    5:*/		return 0x8220DCD4;
		  /* 8220DCD4h */ case    6:  		/* addi R5, R11, -8120 */
		/* 8220DCD4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE048);
		/* 8220DCD4h case    6:*/		return 0x8220DCD8;
		  /* 8220DCD8h */ case    7:  		/* mr R4, R29 */
		/* 8220DCD8h case    7:*/		regs.R4 = regs.R29;
		/* 8220DCD8h case    7:*/		return 0x8220DCDC;
		  /* 8220DCDCh */ case    8:  		/* li R7, 738 */
		/* 8220DCDCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x2E2);
		/* 8220DCDCh case    8:*/		return 0x8220DCE0;
		  /* 8220DCE0h */ case    9:  		/* li R3, 0 */
		/* 8220DCE0h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DCE0h case    9:*/		return 0x8220DCE4;
		  /* 8220DCE4h */ case   10:  		/* bl -745692 */
		/* 8220DCE4h case   10:*/		regs.LR = 0x8220DCE8; return 0x82157C08;
		/* 8220DCE4h case   10:*/		return 0x8220DCE8;
	}
	return 0x8220DCE8;
} // Block from 8220DCBCh-8220DCE8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220DCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DCE8);
		  /* 8220DCE8h */ case    0:  		/* lwz R11, <#[R27 + 32]> */
		/* 8220DCE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DCE8h case    0:*/		return 0x8220DCEC;
		  /* 8220DCECh */ case    1:  		/* addic. R11, R11, 8 */
		/* 8220DCECh case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0x8);
		/* 8220DCECh case    1:*/		return 0x8220DCF0;
		  /* 8220DCF0h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 8220DCF0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220DD10;  }
		/* 8220DCF0h case    2:*/		return 0x8220DCF4;
		  /* 8220DCF4h */ case    3:  		/* lis R11, -32252 */
		/* 8220DCF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DCF4h case    3:*/		return 0x8220DCF8;
		  /* 8220DCF8h */ case    4:  		/* mr R6, R28 */
		/* 8220DCF8h case    4:*/		regs.R6 = regs.R28;
		/* 8220DCF8h case    4:*/		return 0x8220DCFC;
		  /* 8220DCFCh */ case    5:  		/* addi R5, R11, -8148 */
		/* 8220DCFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE02C);
		/* 8220DCFCh case    5:*/		return 0x8220DD00;
		  /* 8220DD00h */ case    6:  		/* mr R4, R29 */
		/* 8220DD00h case    6:*/		regs.R4 = regs.R29;
		/* 8220DD00h case    6:*/		return 0x8220DD04;
		  /* 8220DD04h */ case    7:  		/* li R7, 739 */
		/* 8220DD04h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2E3);
		/* 8220DD04h case    7:*/		return 0x8220DD08;
		  /* 8220DD08h */ case    8:  		/* li R3, 0 */
		/* 8220DD08h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DD08h case    8:*/		return 0x8220DD0C;
		  /* 8220DD0Ch */ case    9:  		/* bl -745732 */
		/* 8220DD0Ch case    9:*/		regs.LR = 0x8220DD10; return 0x82157C08;
		/* 8220DD0Ch case    9:*/		return 0x8220DD10;
	}
	return 0x8220DD10;
} // Block from 8220DCE8h-8220DD10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220DD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DD10);
		  /* 8220DD10h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8220DD10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8220DD10h case    0:*/		return 0x8220DD14;
		  /* 8220DD14h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8220DD14h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8220DD14h case    1:*/		return 0x8220DD18;
		  /* 8220DD18h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DD18h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220DD38;  }
		/* 8220DD18h case    2:*/		return 0x8220DD1C;
		  /* 8220DD1Ch */ case    3:  		/* lis R11, -32252 */
		/* 8220DD1Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DD1Ch case    3:*/		return 0x8220DD20;
		  /* 8220DD20h */ case    4:  		/* mr R6, R28 */
		/* 8220DD20h case    4:*/		regs.R6 = regs.R28;
		/* 8220DD20h case    4:*/		return 0x8220DD24;
		  /* 8220DD24h */ case    5:  		/* addi R5, R11, -8176 */
		/* 8220DD24h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE010);
		/* 8220DD24h case    5:*/		return 0x8220DD28;
		  /* 8220DD28h */ case    6:  		/* mr R4, R29 */
		/* 8220DD28h case    6:*/		regs.R4 = regs.R29;
		/* 8220DD28h case    6:*/		return 0x8220DD2C;
		  /* 8220DD2Ch */ case    7:  		/* li R7, 740 */
		/* 8220DD2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2E4);
		/* 8220DD2Ch case    7:*/		return 0x8220DD30;
		  /* 8220DD30h */ case    8:  		/* li R3, 0 */
		/* 8220DD30h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DD30h case    8:*/		return 0x8220DD34;
		  /* 8220DD34h */ case    9:  		/* bl -745772 */
		/* 8220DD34h case    9:*/		regs.LR = 0x8220DD38; return 0x82157C08;
		/* 8220DD34h case    9:*/		return 0x8220DD38;
	}
	return 0x8220DD38;
} // Block from 8220DD10h-8220DD38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220DD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DD38);
		  /* 8220DD38h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8220DD38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8220DD38h case    0:*/		return 0x8220DD3C;
		  /* 8220DD3Ch */ case    1:  		/* addic. R11, R11, -1 */
		/* 8220DD3Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220DD3Ch case    1:*/		return 0x8220DD40;
		  /* 8220DD40h */ case    2:  		/* stw R11, <#[R27]> */
		/* 8220DD40h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8220DD40h case    2:*/		return 0x8220DD44;
		  /* 8220DD44h */ case    3:  		/* bc 4, CR0_EQ, 348 */
		/* 8220DD44h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220DEA0;  }
		/* 8220DD44h case    3:*/		return 0x8220DD48;
		  /* 8220DD48h */ case    4:  		/* lwz R11, <#[R27 + 32]> */
		/* 8220DD48h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DD48h case    4:*/		return 0x8220DD4C;
		  /* 8220DD4Ch */ case    5:  		/* mr R3, R30 */
		/* 8220DD4Ch case    5:*/		regs.R3 = regs.R30;
		/* 8220DD4Ch case    5:*/		return 0x8220DD50;
		  /* 8220DD50h */ case    6:  		/* addi R4, R11, 8 */
		/* 8220DD50h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x8);
		/* 8220DD50h case    6:*/		return 0x8220DD54;
		  /* 8220DD54h */ case    7:  		/* lwz R5, <#[R11]> */
		/* 8220DD54h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8220DD54h case    7:*/		return 0x8220DD58;
		  /* 8220DD58h */ case    8:  		/* bl 5016 */
		/* 8220DD58h case    8:*/		regs.LR = 0x8220DD5C; return 0x8220F0F0;
		/* 8220DD58h case    8:*/		return 0x8220DD5C;
		  /* 8220DD5Ch */ case    9:  		/* mr R30, R3 */
		/* 8220DD5Ch case    9:*/		regs.R30 = regs.R3;
		/* 8220DD5Ch case    9:*/		return 0x8220DD60;
		  /* 8220DD60h */ case   10:  		/* cmplw CR6, R3, R27 */
		/* 8220DD60h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 8220DD60h case   10:*/		return 0x8220DD64;
		  /* 8220DD64h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 8220DD64h case   11:*/		if ( regs.CR[6].eq ) { return 0x8220DD84;  }
		/* 8220DD64h case   11:*/		return 0x8220DD68;
	}
	return 0x8220DD68;
} // Block from 8220DD38h-8220DD68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220DD68h
// Function '?SR_Create@XGRAPHICS@@YAPAU_SR_SHADER_RECYCLER@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SS_SHADER_STORE@1@PAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DD68);
		  /* 8220DD68h */ case    0:  		/* lis R11, -32252 */
		/* 8220DD68h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DD68h case    0:*/		return 0x8220DD6C;
		  /* 8220DD6Ch */ case    1:  		/* mr R6, R28 */
		/* 8220DD6Ch case    1:*/		regs.R6 = regs.R28;
		/* 8220DD6Ch case    1:*/		return 0x8220DD70;
		  /* 8220DD70h */ case    2:  		/* addi R5, R11, -8208 */
		/* 8220DD70h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFF0);
		/* 8220DD70h case    2:*/		return 0x8220DD74;
		  /* 8220DD74h */ case    3:  		/* mr R4, R29 */
		/* 8220DD74h case    3:*/		regs.R4 = regs.R29;
		/* 8220DD74h case    3:*/		return 0x8220DD78;
		  /* 8220DD78h */ case    4:  		/* li R7, 754 */
		/* 8220DD78h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2F2);
		/* 8220DD78h case    4:*/		return 0x8220DD7C;
		  /* 8220DD7Ch */ case    5:  		/* li R3, 0 */
		/* 8220DD7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DD7Ch case    5:*/		return 0x8220DD80;
		  /* 8220DD80h */ case    6:  		/* bl -745848 */
		/* 8220DD80h case    6:*/		regs.LR = 0x8220DD84; return 0x82157C08;
		/* 8220DD80h case    6:*/		return 0x8220DD84;
	}
	return 0x8220DD84;
} // Block from 8220DD68h-8220DD84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220DD84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DD84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DD84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DD84);
		  /* 8220DD84h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 8220DD84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8220DD84h case    0:*/		return 0x8220DD88;
		  /* 8220DD88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220DD88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220DD88h case    1:*/		return 0x8220DD8C;
		  /* 8220DD8Ch */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 8220DD8Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8220DE30;  }
		/* 8220DD8Ch case    2:*/		return 0x8220DD90;
		  /* 8220DD90h */ case    3:  		/* cmpwi CR6, R25, 0 */
		/* 8220DD90h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8220DD90h case    3:*/		return 0x8220DD94;
		  /* 8220DD94h */ case    4:  		/* bc 12, CR6_LT, 12 */
		/* 8220DD94h case    4:*/		if ( regs.CR[6].lt ) { return 0x8220DDA0;  }
		/* 8220DD94h case    4:*/		return 0x8220DD98;
		  /* 8220DD98h */ case    5:  		/* cmpwi CR6, R25, 7 */
		/* 8220DD98h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000007);
		/* 8220DD98h case    5:*/		return 0x8220DD9C;
		  /* 8220DD9Ch */ case    6:  		/* bc 4, CR6_GT, 32 */
		/* 8220DD9Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x8220DDBC;  }
		/* 8220DD9Ch case    6:*/		return 0x8220DDA0;
	}
	return 0x8220DDA0;
} // Block from 8220DD84h-8220DDA0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220DDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DDA0);
		  /* 8220DDA0h */ case    0:  		/* lis R11, -32252 */
		/* 8220DDA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DDA0h case    0:*/		return 0x8220DDA4;
		  /* 8220DDA4h */ case    1:  		/* mr R6, R28 */
		/* 8220DDA4h case    1:*/		regs.R6 = regs.R28;
		/* 8220DDA4h case    1:*/		return 0x8220DDA8;
		  /* 8220DDA8h */ case    2:  		/* addi R5, R11, -8272 */
		/* 8220DDA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFB0);
		/* 8220DDA8h case    2:*/		return 0x8220DDAC;
		  /* 8220DDACh */ case    3:  		/* mr R4, R29 */
		/* 8220DDACh case    3:*/		regs.R4 = regs.R29;
		/* 8220DDACh case    3:*/		return 0x8220DDB0;
		  /* 8220DDB0h */ case    4:  		/* li R7, 762 */
		/* 8220DDB0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2FA);
		/* 8220DDB0h case    4:*/		return 0x8220DDB4;
		  /* 8220DDB4h */ case    5:  		/* li R3, 0 */
		/* 8220DDB4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DDB4h case    5:*/		return 0x8220DDB8;
		  /* 8220DDB8h */ case    6:  		/* bl -745904 */
		/* 8220DDB8h case    6:*/		regs.LR = 0x8220DDBC; return 0x82157C08;
		/* 8220DDB8h case    6:*/		return 0x8220DDBC;
	}
	return 0x8220DDBC;
} // Block from 8220DDA0h-8220DDBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220DDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DDBC);
		  /* 8220DDBCh */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8220DDBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8220DDBCh case    0:*/		return 0x8220DDC0;
		  /* 8220DDC0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220DDC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220DDC0h case    1:*/		return 0x8220DDC4;
		  /* 8220DDC4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DDC4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220DDE4;  }
		/* 8220DDC4h case    2:*/		return 0x8220DDC8;
		  /* 8220DDC8h */ case    3:  		/* lis R11, -32252 */
		/* 8220DDC8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DDC8h case    3:*/		return 0x8220DDCC;
		  /* 8220DDCCh */ case    4:  		/* mr R6, R28 */
		/* 8220DDCCh case    4:*/		regs.R6 = regs.R28;
		/* 8220DDCCh case    4:*/		return 0x8220DDD0;
		  /* 8220DDD0h */ case    5:  		/* addi R5, R11, -8308 */
		/* 8220DDD0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF8C);
		/* 8220DDD0h case    5:*/		return 0x8220DDD4;
		  /* 8220DDD4h */ case    6:  		/* mr R4, R29 */
		/* 8220DDD4h case    6:*/		regs.R4 = regs.R29;
		/* 8220DDD4h case    6:*/		return 0x8220DDD8;
		  /* 8220DDD8h */ case    7:  		/* li R7, 766 */
		/* 8220DDD8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2FE);
		/* 8220DDD8h case    7:*/		return 0x8220DDDC;
		  /* 8220DDDCh */ case    8:  		/* li R3, 0 */
		/* 8220DDDCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DDDCh case    8:*/		return 0x8220DDE0;
		  /* 8220DDE0h */ case    9:  		/* bl -745944 */
		/* 8220DDE0h case    9:*/		regs.LR = 0x8220DDE4; return 0x82157C08;
		/* 8220DDE0h case    9:*/		return 0x8220DDE4;
	}
	return 0x8220DDE4;
} // Block from 8220DDBCh-8220DDE4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220DDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DDE4);
		  /* 8220DDE4h */ case    0:  		/* lwz R10, <#[R30 + 32]> */
		/* 8220DDE4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000020) );
		/* 8220DDE4h case    0:*/		return 0x8220DDE8;
		  /* 8220DDE8h */ case    1:  		/* addi R11, R25, 71 */
		/* 8220DDE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x47);
		/* 8220DDE8h case    1:*/		return 0x8220DDEC;
		  /* 8220DDECh */ case    2:  		/* addi R4, R30, 4 */
		/* 8220DDECh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x4);
		/* 8220DDECh case    2:*/		return 0x8220DDF0;
		  /* 8220DDF0h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220DDF0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220DDF0h case    3:*/		return 0x8220DDF4;
		  /* 8220DDF4h */ case    4:  		/* lwz R10, <#[R10]> */
		/* 8220DDF4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8220DDF4h case    4:*/		return 0x8220DDF8;
		  /* 8220DDF8h */ case    5:  		/* lwzx R9, <#[R11 + R31]> */
		/* 8220DDF8h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8220DDF8h case    5:*/		return 0x8220DDFC;
		  /* 8220DDFCh */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8220DDFCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8220DDFCh case    6:*/		return 0x8220DE00;
		  /* 8220DE00h */ case    7:  		/* subf R10, R10, R9 */
		/* 8220DE00h case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8220DE00h case    7:*/		return 0x8220DE04;
		  /* 8220DE04h */ case    8:  		/* stwx R10, <#[R11 + R31]> */
		/* 8220DE04h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8220DE04h case    8:*/		return 0x8220DE08;
		  /* 8220DE08h */ case    9:  		/* lwz R3, <#[R31]> */
		/* 8220DE08h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220DE08h case    9:*/		return 0x8220DE0C;
		  /* 8220DE0Ch */ case   10:  		/* lwz R11, <#[R31 + 16]> */
		/* 8220DE0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8220DE0Ch case   10:*/		return 0x8220DE10;
		  /* 8220DE10h */ case   11:  		/* mtspr CTR, R11 */
		/* 8220DE10h case   11:*/		regs.CTR = regs.R11;
		/* 8220DE10h case   11:*/		return 0x8220DE14;
		  /* 8220DE14h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8220DE14h case   12:*/		if ( 1 ) { regs.LR = 0x8220DE18; return (uint32)regs.CTR; }
		/* 8220DE14h case   12:*/		return 0x8220DE18;
		  /* 8220DE18h */ case   13:  		/* addi R11, R25, 15 */
		/* 8220DE18h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xF);
		/* 8220DE18h case   13:*/		return 0x8220DE1C;
		  /* 8220DE1Ch */ case   14:  		/* lwz R4, <#[R30 + 24]> */
		/* 8220DE1Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000018) );
		/* 8220DE1Ch case   14:*/		return 0x8220DE20;
		  /* 8220DE20h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220DE20h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220DE20h case   15:*/		return 0x8220DE24;
		  /* 8220DE24h */ case   16:  		/* lwzx R3, <#[R11 + R31]> */
		/* 8220DE24h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8220DE24h case   16:*/		return 0x8220DE28;
		  /* 8220DE28h */ case   17:  		/* bl -725400 */
		/* 8220DE28h case   17:*/		regs.LR = 0x8220DE2C; return 0x8215CC90;
		/* 8220DE28h case   17:*/		return 0x8220DE2C;
		  /* 8220DE2Ch */ case   18:  		/* bl -725108 */
		/* 8220DE2Ch case   18:*/		regs.LR = 0x8220DE30; return 0x8215CDB8;
		/* 8220DE2Ch case   18:*/		return 0x8220DE30;
	}
	return 0x8220DE30;
} // Block from 8220DDE4h-8220DE30h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220DE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DE30);
		  /* 8220DE30h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220DE30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220DE30h case    0:*/		return 0x8220DE34;
		  /* 8220DE34h */ case    1:  		/* lwz R4, <#[R27 + 32]> */
		/* 8220DE34h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DE34h case    1:*/		return 0x8220DE38;
		  /* 8220DE38h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220DE38h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220DE38h case    2:*/		return 0x8220DE3C;
		  /* 8220DE3Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8220DE3Ch case    3:*/		regs.CTR = regs.R11;
		/* 8220DE3Ch case    3:*/		return 0x8220DE40;
		  /* 8220DE40h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220DE40h case    4:*/		if ( 1 ) { regs.LR = 0x8220DE44; return (uint32)regs.CTR; }
		/* 8220DE40h case    4:*/		return 0x8220DE44;
		  /* 8220DE44h */ case    5:  		/* lis R11, -32252 */
		/* 8220DE44h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DE44h case    5:*/		return 0x8220DE48;
		  /* 8220DE48h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8220DE48h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220DE48h case    6:*/		return 0x8220DE4C;
		  /* 8220DE4Ch */ case    7:  		/* addi R30, R11, -8328 */
		/* 8220DE4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFDF78);
		/* 8220DE4Ch case    7:*/		return 0x8220DE50;
		  /* 8220DE50h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 8220DE50h case    8:*/		if ( regs.CR[0].eq ) { return 0x8220DE6C;  }
		/* 8220DE50h case    8:*/		return 0x8220DE54;
		  /* 8220DE54h */ case    9:  		/* mr R6, R28 */
		/* 8220DE54h case    9:*/		regs.R6 = regs.R28;
		/* 8220DE54h case    9:*/		return 0x8220DE58;
		  /* 8220DE58h */ case   10:  		/* mr R5, R30 */
		/* 8220DE58h case   10:*/		regs.R5 = regs.R30;
		/* 8220DE58h case   10:*/		return 0x8220DE5C;
		  /* 8220DE5Ch */ case   11:  		/* mr R4, R29 */
		/* 8220DE5Ch case   11:*/		regs.R4 = regs.R29;
		/* 8220DE5Ch case   11:*/		return 0x8220DE60;
		  /* 8220DE60h */ case   12:  		/* li R7, 786 */
		/* 8220DE60h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x312);
		/* 8220DE60h case   12:*/		return 0x8220DE64;
		  /* 8220DE64h */ case   13:  		/* li R3, 0 */
		/* 8220DE64h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DE64h case   13:*/		return 0x8220DE68;
		  /* 8220DE68h */ case   14:  		/* bl -746080 */
		/* 8220DE68h case   14:*/		regs.LR = 0x8220DE6C; return 0x82157C08;
		/* 8220DE68h case   14:*/		return 0x8220DE6C;
	}
	return 0x8220DE6C;
} // Block from 8220DE30h-8220DE6Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220DE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DE6C);
		  /* 8220DE6Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220DE6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220DE6Ch case    0:*/		return 0x8220DE70;
		  /* 8220DE70h */ case    1:  		/* mr R4, R27 */
		/* 8220DE70h case    1:*/		regs.R4 = regs.R27;
		/* 8220DE70h case    1:*/		return 0x8220DE74;
		  /* 8220DE74h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8220DE74h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220DE74h case    2:*/		return 0x8220DE78;
		  /* 8220DE78h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220DE78h case    3:*/		regs.CTR = regs.R11;
		/* 8220DE78h case    3:*/		return 0x8220DE7C;
		  /* 8220DE7Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220DE7Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220DE80; return (uint32)regs.CTR; }
		/* 8220DE7Ch case    4:*/		return 0x8220DE80;
		  /* 8220DE80h */ case    5:  		/* or. R26, R3, R3 */
		/* 8220DE80h case    5:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8220DE80h case    5:*/		return 0x8220DE84;
		  /* 8220DE84h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8220DE84h case    6:*/		if ( regs.CR[0].eq ) { return 0x8220DEA0;  }
		/* 8220DE84h case    6:*/		return 0x8220DE88;
		  /* 8220DE88h */ case    7:  		/* mr R6, R28 */
		/* 8220DE88h case    7:*/		regs.R6 = regs.R28;
		/* 8220DE88h case    7:*/		return 0x8220DE8C;
		  /* 8220DE8Ch */ case    8:  		/* mr R5, R30 */
		/* 8220DE8Ch case    8:*/		regs.R5 = regs.R30;
		/* 8220DE8Ch case    8:*/		return 0x8220DE90;
		  /* 8220DE90h */ case    9:  		/* mr R4, R29 */
		/* 8220DE90h case    9:*/		regs.R4 = regs.R29;
		/* 8220DE90h case    9:*/		return 0x8220DE94;
		  /* 8220DE94h */ case   10:  		/* li R7, 795 */
		/* 8220DE94h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x31B);
		/* 8220DE94h case   10:*/		return 0x8220DE98;
		  /* 8220DE98h */ case   11:  		/* li R3, 0 */
		/* 8220DE98h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DE98h case   11:*/		return 0x8220DE9C;
		  /* 8220DE9Ch */ case   12:  		/* bl -746132 */
		/* 8220DE9Ch case   12:*/		regs.LR = 0x8220DEA0; return 0x82157C08;
		/* 8220DE9Ch case   12:*/		return 0x8220DEA0;
	}
	return 0x8220DEA0;
} // Block from 8220DE6Ch-8220DEA0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220DEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DEA0);
		  /* 8220DEA0h */ case    0:  		/* mr R3, R26 */
		/* 8220DEA0h case    0:*/		regs.R3 = regs.R26;
		/* 8220DEA0h case    0:*/		return 0x8220DEA4;
		  /* 8220DEA4h */ case    1:  		/* addi R1, R1, 144 */
		/* 8220DEA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220DEA4h case    1:*/		return 0x8220DEA8;
		  /* 8220DEA8h */ case    2:  		/* b -1559564 */
		/* 8220DEA8h case    2:*/		return 0x8209129C;
		/* 8220DEA8h case    2:*/		return 0x8220DEAC;
		  /* 8220DEACh */ case    3:  		/* nop */
		/* 8220DEACh case    3:*/		cpu::op::nop();
		/* 8220DEACh case    3:*/		return 0x8220DEB0;
	}
	return 0x8220DEB0;
} // Block from 8220DEA0h-8220DEB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220DEB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DEB0);
		  /* 8220DEB0h */ case    0:  		/* mfspr R12, LR */
		/* 8220DEB0h case    0:*/		regs.R12 = regs.LR;
		/* 8220DEB0h case    0:*/		return 0x8220DEB4;
		  /* 8220DEB4h */ case    1:  		/* bl -1559664 */
		/* 8220DEB4h case    1:*/		regs.LR = 0x8220DEB8; return 0x82091244;
		/* 8220DEB4h case    1:*/		return 0x8220DEB8;
		  /* 8220DEB8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220DEB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220DEB8h case    2:*/		return 0x8220DEBC;
		  /* 8220DEBCh */ case    3:  		/* lis R11, -32253 */
		/* 8220DEBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220DEBCh case    3:*/		return 0x8220DEC0;
		  /* 8220DEC0h */ case    4:  		/* lis R10, -32252 */
		/* 8220DEC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220DEC0h case    4:*/		return 0x8220DEC4;
		  /* 8220DEC4h */ case    5:  		/* mr R31, R3 */
		/* 8220DEC4h case    5:*/		regs.R31 = regs.R3;
		/* 8220DEC4h case    5:*/		return 0x8220DEC8;
		  /* 8220DEC8h */ case    6:  		/* mr R27, R4 */
		/* 8220DEC8h case    6:*/		regs.R27 = regs.R4;
		/* 8220DEC8h case    6:*/		return 0x8220DECC;
		  /* 8220DECCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220DECCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220DECCh case    7:*/		return 0x8220DED0;
		  /* 8220DED0h */ case    8:  		/* addi R25, R11, 27460 */
		/* 8220DED0h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220DED0h case    8:*/		return 0x8220DED4;
		  /* 8220DED4h */ case    9:  		/* addi R24, R10, -8432 */
		/* 8220DED4h case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFDF10);
		/* 8220DED4h case    9:*/		return 0x8220DED8;
		  /* 8220DED8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DED8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220DEF8;  }
		/* 8220DED8h case   10:*/		return 0x8220DEDC;
		  /* 8220DEDCh */ case   11:  		/* lis R11, -32252 */
		/* 8220DEDCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DEDCh case   11:*/		return 0x8220DEE0;
		  /* 8220DEE0h */ case   12:  		/* mr R6, R24 */
		/* 8220DEE0h case   12:*/		regs.R6 = regs.R24;
		/* 8220DEE0h case   12:*/		return 0x8220DEE4;
		  /* 8220DEE4h */ case   13:  		/* addi R5, R11, -18052 */
		/* 8220DEE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB97C);
		/* 8220DEE4h case   13:*/		return 0x8220DEE8;
		  /* 8220DEE8h */ case   14:  		/* mr R4, R25 */
		/* 8220DEE8h case   14:*/		regs.R4 = regs.R25;
		/* 8220DEE8h case   14:*/		return 0x8220DEEC;
		  /* 8220DEECh */ case   15:  		/* li R7, 833 */
		/* 8220DEECh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x341);
		/* 8220DEECh case   15:*/		return 0x8220DEF0;
		  /* 8220DEF0h */ case   16:  		/* li R3, 0 */
		/* 8220DEF0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DEF0h case   16:*/		return 0x8220DEF4;
		  /* 8220DEF4h */ case   17:  		/* bl -746220 */
		/* 8220DEF4h case   17:*/		regs.LR = 0x8220DEF8; return 0x82157C08;
		/* 8220DEF4h case   17:*/		return 0x8220DEF8;
	}
	return 0x8220DEF8;
} // Block from 8220DEB0h-8220DEF8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220DEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DEF8);
		  /* 8220DEF8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220DEF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220DEF8h case    0:*/		return 0x8220DEFC;
		  /* 8220DEFCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220DEFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220DF1C;  }
		/* 8220DEFCh case    1:*/		return 0x8220DF00;
		  /* 8220DF00h */ case    2:  		/* lis R11, -32252 */
		/* 8220DF00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DF00h case    2:*/		return 0x8220DF04;
		  /* 8220DF04h */ case    3:  		/* mr R6, R24 */
		/* 8220DF04h case    3:*/		regs.R6 = regs.R24;
		/* 8220DF04h case    3:*/		return 0x8220DF08;
		  /* 8220DF08h */ case    4:  		/* addi R5, R11, -8064 */
		/* 8220DF08h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE080);
		/* 8220DF08h case    4:*/		return 0x8220DF0C;
		  /* 8220DF0Ch */ case    5:  		/* mr R4, R25 */
		/* 8220DF0Ch case    5:*/		regs.R4 = regs.R25;
		/* 8220DF0Ch case    5:*/		return 0x8220DF10;
		  /* 8220DF10h */ case    6:  		/* li R7, 834 */
		/* 8220DF10h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x342);
		/* 8220DF10h case    6:*/		return 0x8220DF14;
		  /* 8220DF14h */ case    7:  		/* li R3, 0 */
		/* 8220DF14h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DF14h case    7:*/		return 0x8220DF18;
		  /* 8220DF18h */ case    8:  		/* bl -746256 */
		/* 8220DF18h case    8:*/		regs.LR = 0x8220DF1C; return 0x82157C08;
		/* 8220DF18h case    8:*/		return 0x8220DF1C;
	}
	return 0x8220DF1C;
} // Block from 8220DEF8h-8220DF1Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220DF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DF1C);
		  /* 8220DF1Ch */ case    0:  		/* li R23, 0 */
		/* 8220DF1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8220DF1Ch case    0:*/		return 0x8220DF20;
		  /* 8220DF20h */ case    1:  		/* lis R11, -32252 */
		/* 8220DF20h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220DF20h case    1:*/		return 0x8220DF24;
		  /* 8220DF24h */ case    2:  		/* mr R29, R27 */
		/* 8220DF24h case    2:*/		regs.R29 = regs.R27;
		/* 8220DF24h case    2:*/		return 0x8220DF28;
		  /* 8220DF28h */ case    3:  		/* mr R30, R23 */
		/* 8220DF28h case    3:*/		regs.R30 = regs.R23;
		/* 8220DF28h case    3:*/		return 0x8220DF2C;
		  /* 8220DF2Ch */ case    4:  		/* addi R28, R31, 28 */
		/* 8220DF2Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x1C);
		/* 8220DF2Ch case    4:*/		return 0x8220DF30;
	}
	return 0x8220DF30;
} // Block from 8220DF1Ch-8220DF30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220DF30h
// Function '?LinkableShaderPair@XGRAPHICS@@YAIPAU_CS_COMPILED_SHADER@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DF30);
		  /* 8220DF30h */ case    0:  		/* addi R26, R11, -8328 */
		/* 8220DF30h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFDF78);
		/* 8220DF30h case    0:*/		return 0x8220DF34;
		  /* 8220DF34h */ case    1:  		/* mr R6, R30 */
		/* 8220DF34h case    1:*/		regs.R6 = regs.R30;
		/* 8220DF34h case    1:*/		return 0x8220DF38;
		  /* 8220DF38h */ case    2:  		/* lwz R4, <#[R28]> */
		/* 8220DF38h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 8220DF38h case    2:*/		return 0x8220DF3C;
		  /* 8220DF3Ch */ case    3:  		/* mr R3, R31 */
		/* 8220DF3Ch case    3:*/		regs.R3 = regs.R31;
		/* 8220DF3Ch case    3:*/		return 0x8220DF40;
		  /* 8220DF40h */ case    4:  		/* lwz R5, <#[R29 + 4]> */
		/* 8220DF40h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 8220DF40h case    4:*/		return 0x8220DF44;
		  /* 8220DF44h */ case    5:  		/* bl -804 */
		/* 8220DF44h case    5:*/		regs.LR = 0x8220DF48; return 0x8220DC20;
		/* 8220DF44h case    5:*/		return 0x8220DF48;
		  /* 8220DF48h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8220DF48h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220DF48h case    6:*/		return 0x8220DF4C;
		  /* 8220DF4Ch */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8220DF4Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8220DF68;  }
		/* 8220DF4Ch case    7:*/		return 0x8220DF50;
		  /* 8220DF50h */ case    8:  		/* mr R6, R24 */
		/* 8220DF50h case    8:*/		regs.R6 = regs.R24;
		/* 8220DF50h case    8:*/		return 0x8220DF54;
		  /* 8220DF54h */ case    9:  		/* mr R5, R26 */
		/* 8220DF54h case    9:*/		regs.R5 = regs.R26;
		/* 8220DF54h case    9:*/		return 0x8220DF58;
		  /* 8220DF58h */ case   10:  		/* mr R4, R25 */
		/* 8220DF58h case   10:*/		regs.R4 = regs.R25;
		/* 8220DF58h case   10:*/		return 0x8220DF5C;
		  /* 8220DF5Ch */ case   11:  		/* li R7, 845 */
		/* 8220DF5Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x34D);
		/* 8220DF5Ch case   11:*/		return 0x8220DF60;
		  /* 8220DF60h */ case   12:  		/* li R3, 0 */
		/* 8220DF60h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DF60h case   12:*/		return 0x8220DF64;
		  /* 8220DF64h */ case   13:  		/* bl -746332 */
		/* 8220DF64h case   13:*/		regs.LR = 0x8220DF68; return 0x82157C08;
		/* 8220DF64h case   13:*/		return 0x8220DF68;
	}
	return 0x8220DF68;
} // Block from 8220DF30h-8220DF68h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220DF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DF68);
		  /* 8220DF68h */ case    0:  		/* addi R30, R30, 1 */
		/* 8220DF68h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220DF68h case    0:*/		return 0x8220DF6C;
		  /* 8220DF6Ch */ case    1:  		/* stwu R23, <#[R29 + 4]> */
		/* 8220DF6Ch case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8220DF6Ch case    1:*/		return 0x8220DF70;
		  /* 8220DF70h */ case    2:  		/* addi R28, R28, 4 */
		/* 8220DF70h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8220DF70h case    2:*/		return 0x8220DF74;
		  /* 8220DF74h */ case    3:  		/* cmplwi CR6, R30, 6 */
		/* 8220DF74h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 8220DF74h case    3:*/		return 0x8220DF78;
		  /* 8220DF78h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 8220DF78h case    4:*/		if ( regs.CR[6].lt ) { return 0x8220DF34;  }
		/* 8220DF78h case    4:*/		return 0x8220DF7C;
		  /* 8220DF7Ch */ case    5:  		/* li R6, 6 */
		/* 8220DF7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x6);
		/* 8220DF7Ch case    5:*/		return 0x8220DF80;
		  /* 8220DF80h */ case    6:  		/* lwz R4, <#[R31 + 52]> */
		/* 8220DF80h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000034) );
		/* 8220DF80h case    6:*/		return 0x8220DF84;
		  /* 8220DF84h */ case    7:  		/* mr R3, R31 */
		/* 8220DF84h case    7:*/		regs.R3 = regs.R31;
		/* 8220DF84h case    7:*/		return 0x8220DF88;
		  /* 8220DF88h */ case    8:  		/* lwz R5, <#[R27 + 28]> */
		/* 8220DF88h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000001C) );
		/* 8220DF88h case    8:*/		return 0x8220DF8C;
		  /* 8220DF8Ch */ case    9:  		/* bl -876 */
		/* 8220DF8Ch case    9:*/		regs.LR = 0x8220DF90; return 0x8220DC20;
		/* 8220DF8Ch case    9:*/		return 0x8220DF90;
		  /* 8220DF90h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8220DF90h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220DF90h case   10:*/		return 0x8220DF94;
		  /* 8220DF94h */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 8220DF94h case   11:*/		if ( regs.CR[0].eq ) { return 0x8220DFB0;  }
		/* 8220DF94h case   11:*/		return 0x8220DF98;
		  /* 8220DF98h */ case   12:  		/* mr R6, R24 */
		/* 8220DF98h case   12:*/		regs.R6 = regs.R24;
		/* 8220DF98h case   12:*/		return 0x8220DF9C;
		  /* 8220DF9Ch */ case   13:  		/* mr R5, R26 */
		/* 8220DF9Ch case   13:*/		regs.R5 = regs.R26;
		/* 8220DF9Ch case   13:*/		return 0x8220DFA0;
		  /* 8220DFA0h */ case   14:  		/* mr R4, R25 */
		/* 8220DFA0h case   14:*/		regs.R4 = regs.R25;
		/* 8220DFA0h case   14:*/		return 0x8220DFA4;
		  /* 8220DFA4h */ case   15:  		/* li R7, 855 */
		/* 8220DFA4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x357);
		/* 8220DFA4h case   15:*/		return 0x8220DFA8;
		  /* 8220DFA8h */ case   16:  		/* li R3, 0 */
		/* 8220DFA8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DFA8h case   16:*/		return 0x8220DFAC;
		  /* 8220DFACh */ case   17:  		/* bl -746404 */
		/* 8220DFACh case   17:*/		regs.LR = 0x8220DFB0; return 0x82157C08;
		/* 8220DFACh case   17:*/		return 0x8220DFB0;
	}
	return 0x8220DFB0;
} // Block from 8220DF68h-8220DFB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220DFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DFB0);
		  /* 8220DFB0h */ case    0:  		/* stw R23, <#[R27 + 28]> */
		/* 8220DFB0h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x0000001C) );
		/* 8220DFB0h case    0:*/		return 0x8220DFB4;
		  /* 8220DFB4h */ case    1:  		/* li R6, 7 */
		/* 8220DFB4h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x7);
		/* 8220DFB4h case    1:*/		return 0x8220DFB8;
		  /* 8220DFB8h */ case    2:  		/* mr R3, R31 */
		/* 8220DFB8h case    2:*/		regs.R3 = regs.R31;
		/* 8220DFB8h case    2:*/		return 0x8220DFBC;
		  /* 8220DFBCh */ case    3:  		/* lwz R4, <#[R31 + 56]> */
		/* 8220DFBCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000038) );
		/* 8220DFBCh case    3:*/		return 0x8220DFC0;
		  /* 8220DFC0h */ case    4:  		/* lwz R5, <#[R27 + 32]> */
		/* 8220DFC0h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DFC0h case    4:*/		return 0x8220DFC4;
		  /* 8220DFC4h */ case    5:  		/* bl -932 */
		/* 8220DFC4h case    5:*/		regs.LR = 0x8220DFC8; return 0x8220DC20;
		/* 8220DFC4h case    5:*/		return 0x8220DFC8;
		  /* 8220DFC8h */ case    6:  		/* or. R30, R3, R3 */
		/* 8220DFC8h case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220DFC8h case    6:*/		return 0x8220DFCC;
		  /* 8220DFCCh */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8220DFCCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8220DFE8;  }
		/* 8220DFCCh case    7:*/		return 0x8220DFD0;
		  /* 8220DFD0h */ case    8:  		/* mr R6, R24 */
		/* 8220DFD0h case    8:*/		regs.R6 = regs.R24;
		/* 8220DFD0h case    8:*/		return 0x8220DFD4;
		  /* 8220DFD4h */ case    9:  		/* mr R5, R26 */
		/* 8220DFD4h case    9:*/		regs.R5 = regs.R26;
		/* 8220DFD4h case    9:*/		return 0x8220DFD8;
		  /* 8220DFD8h */ case   10:  		/* mr R4, R25 */
		/* 8220DFD8h case   10:*/		regs.R4 = regs.R25;
		/* 8220DFD8h case   10:*/		return 0x8220DFDC;
		  /* 8220DFDCh */ case   11:  		/* li R7, 864 */
		/* 8220DFDCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x360);
		/* 8220DFDCh case   11:*/		return 0x8220DFE0;
		  /* 8220DFE0h */ case   12:  		/* li R3, 0 */
		/* 8220DFE0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220DFE0h case   12:*/		return 0x8220DFE4;
		  /* 8220DFE4h */ case   13:  		/* bl -746460 */
		/* 8220DFE4h case   13:*/		regs.LR = 0x8220DFE8; return 0x82157C08;
		/* 8220DFE4h case   13:*/		return 0x8220DFE8;
	}
	return 0x8220DFE8;
} // Block from 8220DFB0h-8220DFE8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220DFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220DFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220DFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220DFE8);
		  /* 8220DFE8h */ case    0:  		/* stw R23, <#[R27 + 32]> */
		/* 8220DFE8h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x00000020) );
		/* 8220DFE8h case    0:*/		return 0x8220DFEC;
		  /* 8220DFECh */ case    1:  		/* lwz R3, <#[R27]> */
		/* 8220DFECh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220DFECh case    1:*/		return 0x8220DFF0;
		  /* 8220DFF0h */ case    2:  		/* bl 71976 */
		/* 8220DFF0h case    2:*/		regs.LR = 0x8220DFF4; return 0x8221F918;
		/* 8220DFF0h case    2:*/		return 0x8220DFF4;
		  /* 8220DFF4h */ case    3:  		/* mr R4, R27 */
		/* 8220DFF4h case    3:*/		regs.R4 = regs.R27;
		/* 8220DFF4h case    3:*/		return 0x8220DFF8;
		  /* 8220DFF8h */ case    4:  		/* lwz R3, <#[R31 + 316]> */
		/* 8220DFF8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000013C) );
		/* 8220DFF8h case    4:*/		return 0x8220DFFC;
		  /* 8220DFFCh */ case    5:  		/* bl -9732 */
		/* 8220DFFCh case    5:*/		regs.LR = 0x8220E000; return 0x8220B9F8;
		/* 8220DFFCh case    5:*/		return 0x8220E000;
		  /* 8220E000h */ case    6:  		/* mr R3, R30 */
		/* 8220E000h case    6:*/		regs.R3 = regs.R30;
		/* 8220E000h case    6:*/		return 0x8220E004;
		  /* 8220E004h */ case    7:  		/* addi R1, R1, 160 */
		/* 8220E004h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220E004h case    7:*/		return 0x8220E008;
		  /* 8220E008h */ case    8:  		/* b -1559924 */
		/* 8220E008h case    8:*/		return 0x82091294;
		/* 8220E008h case    8:*/		return 0x8220E00C;
		  /* 8220E00Ch */ case    9:  		/* nop */
		/* 8220E00Ch case    9:*/		cpu::op::nop();
		/* 8220E00Ch case    9:*/		return 0x8220E010;
	}
	return 0x8220E010;
} // Block from 8220DFE8h-8220E010h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E010);
		  /* 8220E010h */ case    0:  		/* mfspr R12, LR */
		/* 8220E010h case    0:*/		regs.R12 = regs.LR;
		/* 8220E010h case    0:*/		return 0x8220E014;
		  /* 8220E014h */ case    1:  		/* bl -1559996 */
		/* 8220E014h case    1:*/		regs.LR = 0x8220E018; return 0x82091258;
		/* 8220E014h case    1:*/		return 0x8220E018;
		  /* 8220E018h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220E018h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220E018h case    2:*/		return 0x8220E01C;
		  /* 8220E01Ch */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8220E01Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8220E01Ch case    3:*/		return 0x8220E020;
		  /* 8220E020h */ case    4:  		/* addi R10, R4, 8 */
		/* 8220E020h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x8);
		/* 8220E020h case    4:*/		return 0x8220E024;
		  /* 8220E024h */ case    5:  		/* mr R31, R5 */
		/* 8220E024h case    5:*/		regs.R31 = regs.R5;
		/* 8220E024h case    5:*/		return 0x8220E028;
		  /* 8220E028h */ case    6:  		/* lwz R3, <#[R3]> */
		/* 8220E028h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220E028h case    6:*/		return 0x8220E02C;
		  /* 8220E02Ch */ case    7:  		/* mr R6, R5 */
		/* 8220E02Ch case    7:*/		regs.R6 = regs.R5;
		/* 8220E02Ch case    7:*/		return 0x8220E030;
		  /* 8220E030h */ case    8:  		/* li R5, 1 */
		/* 8220E030h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220E030h case    8:*/		return 0x8220E034;
		  /* 8220E034h */ case    9:  		/* rlwinm R4, R10, 2, 0, 29 */
		/* 8220E034h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R10);
		/* 8220E034h case    9:*/		return 0x8220E038;
		  /* 8220E038h */ case   10:  		/* mtspr CTR, R11 */
		/* 8220E038h case   10:*/		regs.CTR = regs.R11;
		/* 8220E038h case   10:*/		return 0x8220E03C;
		  /* 8220E03Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8220E03Ch case   11:*/		if ( 1 ) { regs.LR = 0x8220E040; return (uint32)regs.CTR; }
		/* 8220E03Ch case   11:*/		return 0x8220E040;
		  /* 8220E040h */ case   12:  		/* or. R28, R3, R3 */
		/* 8220E040h case   12:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8220E040h case   12:*/		return 0x8220E044;
		  /* 8220E044h */ case   13:  		/* bc 4, CR0_EQ, 128 */
		/* 8220E044h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8220E0C4;  }
		/* 8220E044h case   13:*/		return 0x8220E048;
		  /* 8220E048h */ case   14:  		/* lis R11, -32253 */
		/* 8220E048h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220E048h case   14:*/		return 0x8220E04C;
		  /* 8220E04Ch */ case   15:  		/* lis R10, -32252 */
		/* 8220E04Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220E04Ch case   15:*/		return 0x8220E050;
		  /* 8220E050h */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 8220E050h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220E050h case   16:*/		return 0x8220E054;
		  /* 8220E054h */ case   17:  		/* addi R30, R11, 27460 */
		/* 8220E054h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8220E054h case   17:*/		return 0x8220E058;
		  /* 8220E058h */ case   18:  		/* addi R29, R10, -8432 */
		/* 8220E058h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFDF10);
		/* 8220E058h case   18:*/		return 0x8220E05C;
		  /* 8220E05Ch */ case   19:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E05Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x8220E07C;  }
		/* 8220E05Ch case   19:*/		return 0x8220E060;
		  /* 8220E060h */ case   20:  		/* lis R11, -32252 */
		/* 8220E060h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E060h case   20:*/		return 0x8220E064;
		  /* 8220E064h */ case   21:  		/* mr R6, R29 */
		/* 8220E064h case   21:*/		regs.R6 = regs.R29;
		/* 8220E064h case   21:*/		return 0x8220E068;
		  /* 8220E068h */ case   22:  		/* addi R5, R11, -8032 */
		/* 8220E068h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE0A0);
		/* 8220E068h case   22:*/		return 0x8220E06C;
		  /* 8220E06Ch */ case   23:  		/* mr R4, R30 */
		/* 8220E06Ch case   23:*/		regs.R4 = regs.R30;
		/* 8220E06Ch case   23:*/		return 0x8220E070;
		  /* 8220E070h */ case   24:  		/* li R7, 1040 */
		/* 8220E070h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x410);
		/* 8220E070h case   24:*/		return 0x8220E074;
		  /* 8220E074h */ case   25:  		/* li R3, 0 */
		/* 8220E074h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E074h case   25:*/		return 0x8220E078;
		  /* 8220E078h */ case   26:  		/* bl -746608 */
		/* 8220E078h case   26:*/		regs.LR = 0x8220E07C; return 0x82157C08;
		/* 8220E078h case   26:*/		return 0x8220E07C;
	}
	return 0x8220E07C;
} // Block from 8220E010h-8220E07Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220E07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E07C);
		  /* 8220E07Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220E07Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220E07Ch case    0:*/		return 0x8220E080;
		  /* 8220E080h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220E080h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E080h case    1:*/		return 0x8220E084;
		  /* 8220E084h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E084h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E0A4;  }
		/* 8220E084h case    2:*/		return 0x8220E088;
		  /* 8220E088h */ case    3:  		/* lis R11, -32252 */
		/* 8220E088h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E088h case    3:*/		return 0x8220E08C;
		  /* 8220E08Ch */ case    4:  		/* mr R6, R29 */
		/* 8220E08Ch case    4:*/		regs.R6 = regs.R29;
		/* 8220E08Ch case    4:*/		return 0x8220E090;
		  /* 8220E090h */ case    5:  		/* addi R5, R11, -8056 */
		/* 8220E090h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE088);
		/* 8220E090h case    5:*/		return 0x8220E094;
		  /* 8220E094h */ case    6:  		/* mr R4, R30 */
		/* 8220E094h case    6:*/		regs.R4 = regs.R30;
		/* 8220E094h case    6:*/		return 0x8220E098;
		  /* 8220E098h */ case    7:  		/* li R7, 1041 */
		/* 8220E098h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x411);
		/* 8220E098h case    7:*/		return 0x8220E09C;
		  /* 8220E09Ch */ case    8:  		/* li R3, 0 */
		/* 8220E09Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E09Ch case    8:*/		return 0x8220E0A0;
		  /* 8220E0A0h */ case    9:  		/* bl -746648 */
		/* 8220E0A0h case    9:*/		regs.LR = 0x8220E0A4; return 0x82157C08;
		/* 8220E0A0h case    9:*/		return 0x8220E0A4;
	}
	return 0x8220E0A4;
} // Block from 8220E07Ch-8220E0A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E0A4);
		  /* 8220E0A4h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 8220E0A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220E0A4h case    0:*/		return 0x8220E0A8;
		  /* 8220E0A8h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220E0A8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220E0A8h case    1:*/		return 0x8220E0AC;
		  /* 8220E0ACh */ case    2:  		/* addi R10, R10, 32 */
		/* 8220E0ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x20);
		/* 8220E0ACh case    2:*/		return 0x8220E0B0;
		  /* 8220E0B0h */ case    3:  		/* addi R11, R11, 32 */
		/* 8220E0B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8220E0B0h case    3:*/		return 0x8220E0B4;
		  /* 8220E0B4h */ case    4:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 8220E0B4h case    4:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 8220E0B4h case    4:*/		return 0x8220E0B8;
		  /* 8220E0B8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 26 */
		/* 8220E0B8h case    5:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R11,regs.R11);
		/* 8220E0B8h case    5:*/		return 0x8220E0BC;
		  /* 8220E0BCh */ case    6:  		/* stw R10, <#[R31 + 4]> */
		/* 8220E0BCh case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8220E0BCh case    6:*/		return 0x8220E0C0;
		  /* 8220E0C0h */ case    7:  		/* stw R11, <#[R31 + 12]> */
		/* 8220E0C0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220E0C0h case    7:*/		return 0x8220E0C4;
	}
	return 0x8220E0C4;
} // Block from 8220E0A4h-8220E0C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220E0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E0C4);
		  /* 8220E0C4h */ case    0:  		/* mr R3, R28 */
		/* 8220E0C4h case    0:*/		regs.R3 = regs.R28;
		/* 8220E0C4h case    0:*/		return 0x8220E0C8;
		  /* 8220E0C8h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220E0C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220E0C8h case    1:*/		return 0x8220E0CC;
		  /* 8220E0CCh */ case    2:  		/* b -1560100 */
		/* 8220E0CCh case    2:*/		return 0x820912A8;
		/* 8220E0CCh case    2:*/		return 0x8220E0D0;
	}
	return 0x8220E0D0;
} // Block from 8220E0C4h-8220E0D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220E0D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E0D0);
		  /* 8220E0D0h */ case    0:  		/* li R10, 6 */
		/* 8220E0D0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 8220E0D0h case    0:*/		return 0x8220E0D4;
		  /* 8220E0D4h */ case    1:  		/* mr R11, R3 */
		/* 8220E0D4h case    1:*/		regs.R11 = regs.R3;
		/* 8220E0D4h case    1:*/		return 0x8220E0D8;
		  /* 8220E0D8h */ case    2:  		/* mtspr CTR, R10 */
		/* 8220E0D8h case    2:*/		regs.CTR = regs.R10;
		/* 8220E0D8h case    2:*/		return 0x8220E0DC;
		  /* 8220E0DCh */ case    3:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8220E0DCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8220E0DCh case    3:*/		return 0x8220E0E0;
		  /* 8220E0E0h */ case    4:  		/* stw R4, <#[R10 + 28]> */
		/* 8220E0E0h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + 0x0000001C) );
		/* 8220E0E0h case    4:*/		return 0x8220E0E4;
		  /* 8220E0E4h */ case    5:  		/* bc 16, CR0_LT, -8 */
		/* 8220E0E4h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8220E0DC;  }
		/* 8220E0E4h case    5:*/		return 0x8220E0E8;
		  /* 8220E0E8h */ case    6:  		/* lwz R11, <#[R3 + 28]> */
		/* 8220E0E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220E0E8h case    6:*/		return 0x8220E0EC;
		  /* 8220E0ECh */ case    7:  		/* stw R4, <#[R11 + 28]> */
		/* 8220E0ECh case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x0000001C) );
		/* 8220E0ECh case    7:*/		return 0x8220E0F0;
		  /* 8220E0F0h */ case    8:  		/* lwz R11, <#[R3 + 32]> */
		/* 8220E0F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8220E0F0h case    8:*/		return 0x8220E0F4;
		  /* 8220E0F4h */ case    9:  		/* stw R4, <#[R11 + 28]> */
		/* 8220E0F4h case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x0000001C) );
		/* 8220E0F4h case    9:*/		return 0x8220E0F8;
		  /* 8220E0F8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 8220E0F8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220E0F8h case   10:*/		return 0x8220E0FC;
	}
	return 0x8220E0FC;
} // Block from 8220E0D0h-8220E0FCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220E0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E0FC);
		  /* 8220E0FCh */ case    0:  		/* nop */
		/* 8220E0FCh case    0:*/		cpu::op::nop();
		/* 8220E0FCh case    0:*/		return 0x8220E100;
	}
	return 0x8220E100;
} // Block from 8220E0FCh-8220E100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220E100h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E100);
		  /* 8220E100h */ case    0:  		/* mfspr R12, LR */
		/* 8220E100h case    0:*/		regs.R12 = regs.LR;
		/* 8220E100h case    0:*/		return 0x8220E104;
		  /* 8220E104h */ case    1:  		/* bl -1560264 */
		/* 8220E104h case    1:*/		regs.LR = 0x8220E108; return 0x8209123C;
		/* 8220E104h case    1:*/		return 0x8220E108;
		  /* 8220E108h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220E108h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220E108h case    2:*/		return 0x8220E10C;
		  /* 8220E10Ch */ case    3:  		/* lis R11, -32252 */
		/* 8220E10Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E10Ch case    3:*/		return 0x8220E110;
		  /* 8220E110h */ case    4:  		/* lis R10, -32253 */
		/* 8220E110h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220E110h case    4:*/		return 0x8220E114;
		  /* 8220E114h */ case    5:  		/* lis R9, -32252 */
		/* 8220E114h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220E114h case    5:*/		return 0x8220E118;
		  /* 8220E118h */ case    6:  		/* lis R8, -32252 */
		/* 8220E118h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8220E118h case    6:*/		return 0x8220E11C;
		  /* 8220E11Ch */ case    7:  		/* mr R27, R3 */
		/* 8220E11Ch case    7:*/		regs.R27 = regs.R3;
		/* 8220E11Ch case    7:*/		return 0x8220E120;
		  /* 8220E120h */ case    8:  		/* addi R28, R3, 56 */
		/* 8220E120h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x38);
		/* 8220E120h case    8:*/		return 0x8220E124;
		  /* 8220E124h */ case    9:  		/* addi R23, R3, 92 */
		/* 8220E124h case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0x5C);
		/* 8220E124h case    9:*/		return 0x8220E128;
		  /* 8220E128h */ case   10:  		/* li R21, 8 */
		/* 8220E128h case   10:*/		cpu::op::li<0>(regs,&regs.R21,0x8);
		/* 8220E128h case   10:*/		return 0x8220E12C;
		  /* 8220E12Ch */ case   11:  		/* li R29, 0 */
		/* 8220E12Ch case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8220E12Ch case   11:*/		return 0x8220E130;
		  /* 8220E130h */ case   12:  		/* addi R24, R11, -8328 */
		/* 8220E130h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFDF78);
		/* 8220E130h case   12:*/		return 0x8220E134;
		  /* 8220E134h */ case   13:  		/* addi R26, R10, 27460 */
		/* 8220E134h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6B44);
		/* 8220E134h case   13:*/		return 0x8220E138;
		  /* 8220E138h */ case   14:  		/* addi R22, R9, -8024 */
		/* 8220E138h case   14:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R9,0xFFFFE0A8);
		/* 8220E138h case   14:*/		return 0x8220E13C;
		  /* 8220E13Ch */ case   15:  		/* addi R25, R8, -8432 */
		/* 8220E13Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R8,0xFFFFDF10);
		/* 8220E13Ch case   15:*/		return 0x8220E140;
		  /* 8220E140h */ case   16:  		/* b 100 */
		/* 8220E140h case   16:*/		return 0x8220E1A4;
		/* 8220E140h case   16:*/		return 0x8220E144;
		  /* 8220E144h */ case   17:  		/* mr R3, R30 */
		/* 8220E144h case   17:*/		regs.R3 = regs.R30;
		/* 8220E144h case   17:*/		return 0x8220E148;
		  /* 8220E148h */ case   18:  		/* bl -725848 */
		/* 8220E148h case   18:*/		regs.LR = 0x8220E14C; return 0x8215CDF0;
		/* 8220E148h case   18:*/		return 0x8220E14C;
		  /* 8220E14Ch */ case   19:  		/* lwz R11, <#[R3 + 20]> */
		/* 8220E14Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8220E14Ch case   19:*/		return 0x8220E150;
		  /* 8220E150h */ case   20:  		/* mr R31, R3 */
		/* 8220E150h case   20:*/		regs.R31 = regs.R3;
		/* 8220E150h case   20:*/		return 0x8220E154;
		  /* 8220E154h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 8220E154h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E154h case   21:*/		return 0x8220E158;
		  /* 8220E158h */ case   22:  		/* bc 4, CR6_EQ, 28 */
		/* 8220E158h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8220E174;  }
		/* 8220E158h case   22:*/		return 0x8220E15C;
		  /* 8220E15Ch */ case   23:  		/* mr R6, R25 */
		/* 8220E15Ch case   23:*/		regs.R6 = regs.R25;
		/* 8220E15Ch case   23:*/		return 0x8220E160;
		  /* 8220E160h */ case   24:  		/* mr R5, R22 */
		/* 8220E160h case   24:*/		regs.R5 = regs.R22;
		/* 8220E160h case   24:*/		return 0x8220E164;
		  /* 8220E164h */ case   25:  		/* mr R4, R26 */
		/* 8220E164h case   25:*/		regs.R4 = regs.R26;
		/* 8220E164h case   25:*/		return 0x8220E168;
		  /* 8220E168h */ case   26:  		/* li R7, 339 */
		/* 8220E168h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x153);
		/* 8220E168h case   26:*/		return 0x8220E16C;
		  /* 8220E16Ch */ case   27:  		/* li R3, 0 */
		/* 8220E16Ch case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E16Ch case   27:*/		return 0x8220E170;
		  /* 8220E170h */ case   28:  		/* bl -746856 */
		/* 8220E170h case   28:*/		regs.LR = 0x8220E174; return 0x82157C08;
		/* 8220E170h case   28:*/		return 0x8220E174;
	}
	return 0x8220E174;
} // Block from 8220E100h-8220E174h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8220E174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E174);
		  /* 8220E174h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 8220E174h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8220E174h case    0:*/		return 0x8220E178;
		  /* 8220E178h */ case    1:  		/* addi R4, R31, 4 */
		/* 8220E178h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x4);
		/* 8220E178h case    1:*/		return 0x8220E17C;
		  /* 8220E17Ch */ case    2:  		/* lwz R3, <#[R27]> */
		/* 8220E17Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220E17Ch case    2:*/		return 0x8220E180;
		  /* 8220E180h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220E180h case    3:*/		regs.CTR = regs.R11;
		/* 8220E180h case    3:*/		return 0x8220E184;
		  /* 8220E184h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220E184h case    4:*/		if ( 1 ) { regs.LR = 0x8220E188; return (uint32)regs.CTR; }
		/* 8220E184h case    4:*/		return 0x8220E188;
		  /* 8220E188h */ case    5:  		/* stw R29, <#[R31 + 4]> */
		/* 8220E188h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8220E188h case    5:*/		return 0x8220E18C;
		  /* 8220E18Ch */ case    6:  		/* mr R3, R30 */
		/* 8220E18Ch case    6:*/		regs.R3 = regs.R30;
		/* 8220E18Ch case    6:*/		return 0x8220E190;
		  /* 8220E190h */ case    7:  		/* stw R29, <#[R31 + 8]> */
		/* 8220E190h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 8220E190h case    7:*/		return 0x8220E194;
		  /* 8220E194h */ case    8:  		/* stw R29, <#[R31 + 12]> */
		/* 8220E194h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220E194h case    8:*/		return 0x8220E198;
		  /* 8220E198h */ case    9:  		/* stw R29, <#[R31 + 16]> */
		/* 8220E198h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000010) );
		/* 8220E198h case    9:*/		return 0x8220E19C;
		  /* 8220E19Ch */ case   10:  		/* stw R29, <#[R31 + 20]> */
		/* 8220E19Ch case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8220E19Ch case   10:*/		return 0x8220E1A0;
		  /* 8220E1A0h */ case   11:  		/* bl -725992 */
		/* 8220E1A0h case   11:*/		regs.LR = 0x8220E1A4; return 0x8215CDB8;
		/* 8220E1A0h case   11:*/		return 0x8220E1A4;
	}
	return 0x8220E1A4;
} // Block from 8220E174h-8220E1A4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220E1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E1A4);
		  /* 8220E1A4h */ case    0:  		/* lwz R3, <#[R28 + 4]> */
		/* 8220E1A4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000004) );
		/* 8220E1A4h case    0:*/		return 0x8220E1A8;
		  /* 8220E1A8h */ case    1:  		/* bl -726728 */
		/* 8220E1A8h case    1:*/		regs.LR = 0x8220E1AC; return 0x8215CAE0;
		/* 8220E1A8h case    1:*/		return 0x8220E1AC;
		  /* 8220E1ACh */ case    2:  		/* or. R30, R3, R3 */
		/* 8220E1ACh case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220E1ACh case    2:*/		return 0x8220E1B0;
		  /* 8220E1B0h */ case    3:  		/* bc 4, CR0_EQ, -108 */
		/* 8220E1B0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220E144;  }
		/* 8220E1B0h case    3:*/		return 0x8220E1B4;
		  /* 8220E1B4h */ case    4:  		/* lwz R11, <#[R28 + 196]> */
		/* 8220E1B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000C4) );
		/* 8220E1B4h case    4:*/		return 0x8220E1B8;
		  /* 8220E1B8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8220E1B8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E1B8h case    5:*/		return 0x8220E1BC;
		  /* 8220E1BCh */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 8220E1BCh case    6:*/		if ( regs.CR[6].eq ) { return 0x8220E24C;  }
		/* 8220E1BCh case    6:*/		return 0x8220E1C0;
	}
	return 0x8220E1C0;
} // Block from 8220E1A4h-8220E1C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220E1C0h
// Function '?SR_SearchRecyclableShaders@XGRAPHICS@@YAIPAU_SR_SHADER_RECYCLER@1@PAU_ABSTRACT_STATE@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E1C0);
		  /* 8220E1C0h */ case    0:  		/* stw R29, <#[R28 + 196]> */
		/* 8220E1C0h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x000000C4) );
		/* 8220E1C0h case    0:*/		return 0x8220E1C4;
		  /* 8220E1C4h */ case    1:  		/* mr R4, R23 */
		/* 8220E1C4h case    1:*/		regs.R4 = regs.R23;
		/* 8220E1C4h case    1:*/		return 0x8220E1C8;
		  /* 8220E1C8h */ case    2:  		/* lwz R3, <#[R27]> */
		/* 8220E1C8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220E1C8h case    2:*/		return 0x8220E1CC;
		  /* 8220E1CCh */ case    3:  		/* lwz R11, <#[R27 + 16]> */
		/* 8220E1CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8220E1CCh case    3:*/		return 0x8220E1D0;
		  /* 8220E1D0h */ case    4:  		/* mtspr CTR, R11 */
		/* 8220E1D0h case    4:*/		regs.CTR = regs.R11;
		/* 8220E1D0h case    4:*/		return 0x8220E1D4;
		  /* 8220E1D4h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8220E1D4h case    5:*/		if ( 1 ) { regs.LR = 0x8220E1D8; return (uint32)regs.CTR; }
		/* 8220E1D4h case    5:*/		return 0x8220E1D8;
		  /* 8220E1D8h */ case    6:  		/* b 116 */
		/* 8220E1D8h case    6:*/		return 0x8220E24C;
		/* 8220E1D8h case    6:*/		return 0x8220E1DC;
		  /* 8220E1DCh */ case    7:  		/* lwz R4, <#[R31 + 32]> */
		/* 8220E1DCh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 8220E1DCh case    7:*/		return 0x8220E1E0;
		  /* 8220E1E0h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 8220E1E0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220E1E0h case    8:*/		return 0x8220E1E4;
		  /* 8220E1E4h */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 8220E1E4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8220E218;  }
		/* 8220E1E4h case    9:*/		return 0x8220E1E8;
		  /* 8220E1E8h */ case   10:  		/* lwz R11, <#[R27 + 8]> */
		/* 8220E1E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8220E1E8h case   10:*/		return 0x8220E1EC;
		  /* 8220E1ECh */ case   11:  		/* lwz R3, <#[R27]> */
		/* 8220E1ECh case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220E1ECh case   11:*/		return 0x8220E1F0;
		  /* 8220E1F0h */ case   12:  		/* mtspr CTR, R11 */
		/* 8220E1F0h case   12:*/		regs.CTR = regs.R11;
		/* 8220E1F0h case   12:*/		return 0x8220E1F4;
		  /* 8220E1F4h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8220E1F4h case   13:*/		if ( 1 ) { regs.LR = 0x8220E1F8; return (uint32)regs.CTR; }
		/* 8220E1F4h case   13:*/		return 0x8220E1F8;
		  /* 8220E1F8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8220E1F8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E1F8h case   14:*/		return 0x8220E1FC;
		  /* 8220E1FCh */ case   15:  		/* bc 12, CR0_EQ, 28 */
		/* 8220E1FCh case   15:*/		if ( regs.CR[0].eq ) { return 0x8220E218;  }
		/* 8220E1FCh case   15:*/		return 0x8220E200;
		  /* 8220E200h */ case   16:  		/* mr R6, R25 */
		/* 8220E200h case   16:*/		regs.R6 = regs.R25;
		/* 8220E200h case   16:*/		return 0x8220E204;
		  /* 8220E204h */ case   17:  		/* mr R5, R24 */
		/* 8220E204h case   17:*/		regs.R5 = regs.R24;
		/* 8220E204h case   17:*/		return 0x8220E208;
		  /* 8220E208h */ case   18:  		/* mr R4, R26 */
		/* 8220E208h case   18:*/		regs.R4 = regs.R26;
		/* 8220E208h case   18:*/		return 0x8220E20C;
		  /* 8220E20Ch */ case   19:  		/* li R7, 384 */
		/* 8220E20Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x180);
		/* 8220E20Ch case   19:*/		return 0x8220E210;
		  /* 8220E210h */ case   20:  		/* li R3, 0 */
		/* 8220E210h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E210h case   20:*/		return 0x8220E214;
		  /* 8220E214h */ case   21:  		/* bl -747020 */
		/* 8220E214h case   21:*/		regs.LR = 0x8220E218; return 0x82157C08;
		/* 8220E214h case   21:*/		return 0x8220E218;
	}
	return 0x8220E218;
} // Block from 8220E1C0h-8220E218h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220E218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E218);
		  /* 8220E218h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 8220E218h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8220E218h case    0:*/		return 0x8220E21C;
		  /* 8220E21Ch */ case    1:  		/* mr R4, R31 */
		/* 8220E21Ch case    1:*/		regs.R4 = regs.R31;
		/* 8220E21Ch case    1:*/		return 0x8220E220;
		  /* 8220E220h */ case    2:  		/* lwz R3, <#[R27]> */
		/* 8220E220h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220E220h case    2:*/		return 0x8220E224;
		  /* 8220E224h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220E224h case    3:*/		regs.CTR = regs.R11;
		/* 8220E224h case    3:*/		return 0x8220E228;
		  /* 8220E228h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220E228h case    4:*/		if ( 1 ) { regs.LR = 0x8220E22C; return (uint32)regs.CTR; }
		/* 8220E228h case    4:*/		return 0x8220E22C;
		  /* 8220E22Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8220E22Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E22Ch case    5:*/		return 0x8220E230;
		  /* 8220E230h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8220E230h case    6:*/		if ( regs.CR[0].eq ) { return 0x8220E24C;  }
		/* 8220E230h case    6:*/		return 0x8220E234;
		  /* 8220E234h */ case    7:  		/* mr R6, R25 */
		/* 8220E234h case    7:*/		regs.R6 = regs.R25;
		/* 8220E234h case    7:*/		return 0x8220E238;
		  /* 8220E238h */ case    8:  		/* mr R5, R24 */
		/* 8220E238h case    8:*/		regs.R5 = regs.R24;
		/* 8220E238h case    8:*/		return 0x8220E23C;
		  /* 8220E23Ch */ case    9:  		/* mr R4, R26 */
		/* 8220E23Ch case    9:*/		regs.R4 = regs.R26;
		/* 8220E23Ch case    9:*/		return 0x8220E240;
		  /* 8220E240h */ case   10:  		/* li R7, 389 */
		/* 8220E240h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x185);
		/* 8220E240h case   10:*/		return 0x8220E244;
		  /* 8220E244h */ case   11:  		/* li R3, 0 */
		/* 8220E244h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E244h case   11:*/		return 0x8220E248;
		  /* 8220E248h */ case   12:  		/* bl -747072 */
		/* 8220E248h case   12:*/		regs.LR = 0x8220E24C; return 0x82157C08;
		/* 8220E248h case   12:*/		return 0x8220E24C;
	}
	return 0x8220E24C;
} // Block from 8220E218h-8220E24Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220E24Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E24C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E24C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E24C);
		  /* 8220E24Ch */ case    0:  		/* lwz R3, <#[R28 - 28]> */
		/* 8220E24Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0xFFFFFFE4) );
		/* 8220E24Ch case    0:*/		return 0x8220E250;
		  /* 8220E250h */ case    1:  		/* bl 3928 */
		/* 8220E250h case    1:*/		regs.LR = 0x8220E254; return 0x8220F1A8;
		/* 8220E250h case    1:*/		return 0x8220E254;
		  /* 8220E254h */ case    2:  		/* or. R31, R3, R3 */
		/* 8220E254h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220E254h case    2:*/		return 0x8220E258;
		  /* 8220E258h */ case    3:  		/* bc 4, CR0_EQ, -124 */
		/* 8220E258h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220E1DC;  }
		/* 8220E258h case    3:*/		return 0x8220E25C;
		  /* 8220E25Ch */ case    4:  		/* lwz R3, <#[R28 - 28]> */
		/* 8220E25Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0xFFFFFFE4) );
		/* 8220E25Ch case    4:*/		return 0x8220E260;
		  /* 8220E260h */ case    5:  		/* bl 3128 */
		/* 8220E260h case    5:*/		regs.LR = 0x8220E264; return 0x8220EE98;
		/* 8220E260h case    5:*/		return 0x8220E264;
		  /* 8220E264h */ case    6:  		/* stw R29, <#[R28 - 28]> */
		/* 8220E264h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0xFFFFFFE4) );
		/* 8220E264h case    6:*/		return 0x8220E268;
		  /* 8220E268h */ case    7:  		/* lwz R3, <#[R28 + 4]> */
		/* 8220E268h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000004) );
		/* 8220E268h case    7:*/		return 0x8220E26C;
		  /* 8220E26Ch */ case    8:  		/* bl -728132 */
		/* 8220E26Ch case    8:*/		regs.LR = 0x8220E270; return 0x8215C628;
		/* 8220E26Ch case    8:*/		return 0x8220E270;
		  /* 8220E270h */ case    9:  		/* addic. R21, R21, -1 */
		/* 8220E270h case    9:*/		cpu::op::addic<1>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 8220E270h case    9:*/		return 0x8220E274;
		  /* 8220E274h */ case   10:  		/* stwu R29, <#[R28 + 4]> */
		/* 8220E274h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 8220E274h case   10:*/		return 0x8220E278;
		  /* 8220E278h */ case   11:  		/* addi R23, R23, 20 */
		/* 8220E278h case   11:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x14);
		/* 8220E278h case   11:*/		return 0x8220E27C;
		  /* 8220E27Ch */ case   12:  		/* bc 4, CR0_EQ, -216 */
		/* 8220E27Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8220E1A4;  }
		/* 8220E27Ch case   12:*/		return 0x8220E280;
		  /* 8220E280h */ case   13:  		/* lwz R3, <#[R27 + 316]> */
		/* 8220E280h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x0000013C) );
		/* 8220E280h case   13:*/		return 0x8220E284;
		  /* 8220E284h */ case   14:  		/* bl -10740 */
		/* 8220E284h case   14:*/		regs.LR = 0x8220E288; return 0x8220B890;
		/* 8220E284h case   14:*/		return 0x8220E288;
		  /* 8220E288h */ case   15:  		/* lwz R11, <#[R27 + 8]> */
		/* 8220E288h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8220E288h case   15:*/		return 0x8220E28C;
		  /* 8220E28Ch */ case   16:  		/* mr R4, R27 */
		/* 8220E28Ch case   16:*/		regs.R4 = regs.R27;
		/* 8220E28Ch case   16:*/		return 0x8220E290;
		  /* 8220E290h */ case   17:  		/* lwz R3, <#[R27]> */
		/* 8220E290h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8220E290h case   17:*/		return 0x8220E294;
		  /* 8220E294h */ case   18:  		/* mtspr CTR, R11 */
		/* 8220E294h case   18:*/		regs.CTR = regs.R11;
		/* 8220E294h case   18:*/		return 0x8220E298;
		  /* 8220E298h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8220E298h case   19:*/		if ( 1 ) { regs.LR = 0x8220E29C; return (uint32)regs.CTR; }
		/* 8220E298h case   19:*/		return 0x8220E29C;
		  /* 8220E29Ch */ case   20:  		/* or. R31, R3, R3 */
		/* 8220E29Ch case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220E29Ch case   20:*/		return 0x8220E2A0;
		  /* 8220E2A0h */ case   21:  		/* bc 12, CR0_EQ, 28 */
		/* 8220E2A0h case   21:*/		if ( regs.CR[0].eq ) { return 0x8220E2BC;  }
		/* 8220E2A0h case   21:*/		return 0x8220E2A4;
		  /* 8220E2A4h */ case   22:  		/* mr R6, R25 */
		/* 8220E2A4h case   22:*/		regs.R6 = regs.R25;
		/* 8220E2A4h case   22:*/		return 0x8220E2A8;
		  /* 8220E2A8h */ case   23:  		/* mr R5, R24 */
		/* 8220E2A8h case   23:*/		regs.R5 = regs.R24;
		/* 8220E2A8h case   23:*/		return 0x8220E2AC;
		  /* 8220E2ACh */ case   24:  		/* mr R4, R26 */
		/* 8220E2ACh case   24:*/		regs.R4 = regs.R26;
		/* 8220E2ACh case   24:*/		return 0x8220E2B0;
		  /* 8220E2B0h */ case   25:  		/* li R7, 408 */
		/* 8220E2B0h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x198);
		/* 8220E2B0h case   25:*/		return 0x8220E2B4;
		  /* 8220E2B4h */ case   26:  		/* li R3, 0 */
		/* 8220E2B4h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E2B4h case   26:*/		return 0x8220E2B8;
		  /* 8220E2B8h */ case   27:  		/* bl -747184 */
		/* 8220E2B8h case   27:*/		regs.LR = 0x8220E2BC; return 0x82157C08;
		/* 8220E2B8h case   27:*/		return 0x8220E2BC;
	}
	return 0x8220E2BC;
} // Block from 8220E24Ch-8220E2BCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 8220E2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E2BC);
		  /* 8220E2BCh */ case    0:  		/* mr R3, R31 */
		/* 8220E2BCh case    0:*/		regs.R3 = regs.R31;
		/* 8220E2BCh case    0:*/		return 0x8220E2C0;
		  /* 8220E2C0h */ case    1:  		/* addi R1, R1, 176 */
		/* 8220E2C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8220E2C0h case    1:*/		return 0x8220E2C4;
		  /* 8220E2C4h */ case    2:  		/* b -1560632 */
		/* 8220E2C4h case    2:*/		return 0x8209128C;
		/* 8220E2C4h case    2:*/		return 0x8220E2C8;
	}
	return 0x8220E2C8;
} // Block from 8220E2BCh-8220E2C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220E2C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E2C8);
		  /* 8220E2C8h */ case    0:  		/* mfspr R12, LR */
		/* 8220E2C8h case    0:*/		regs.R12 = regs.LR;
		/* 8220E2C8h case    0:*/		return 0x8220E2CC;
		  /* 8220E2CCh */ case    1:  		/* bl -1560736 */
		/* 8220E2CCh case    1:*/		regs.LR = 0x8220E2D0; return 0x8209122C;
		/* 8220E2CCh case    1:*/		return 0x8220E2D0;
		  /* 8220E2D0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8220E2D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8220E2D0h case    2:*/		return 0x8220E2D4;
		  /* 8220E2D4h */ case    3:  		/* mr R18, R10 */
		/* 8220E2D4h case    3:*/		regs.R18 = regs.R10;
		/* 8220E2D4h case    3:*/		return 0x8220E2D8;
		  /* 8220E2D8h */ case    4:  		/* lis R11, -32253 */
		/* 8220E2D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220E2D8h case    4:*/		return 0x8220E2DC;
		  /* 8220E2DCh */ case    5:  		/* lis R10, -32252 */
		/* 8220E2DCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220E2DCh case    5:*/		return 0x8220E2E0;
		  /* 8220E2E0h */ case    6:  		/* mr R30, R3 */
		/* 8220E2E0h case    6:*/		regs.R30 = regs.R3;
		/* 8220E2E0h case    6:*/		return 0x8220E2E4;
		  /* 8220E2E4h */ case    7:  		/* mr R27, R4 */
		/* 8220E2E4h case    7:*/		regs.R27 = regs.R4;
		/* 8220E2E4h case    7:*/		return 0x8220E2E8;
		  /* 8220E2E8h */ case    8:  		/* mr R25, R5 */
		/* 8220E2E8h case    8:*/		regs.R25 = regs.R5;
		/* 8220E2E8h case    8:*/		return 0x8220E2EC;
		  /* 8220E2ECh */ case    9:  		/* mr R23, R6 */
		/* 8220E2ECh case    9:*/		regs.R23 = regs.R6;
		/* 8220E2ECh case    9:*/		return 0x8220E2F0;
		  /* 8220E2F0h */ case   10:  		/* mr R22, R7 */
		/* 8220E2F0h case   10:*/		regs.R22 = regs.R7;
		/* 8220E2F0h case   10:*/		return 0x8220E2F4;
		  /* 8220E2F4h */ case   11:  		/* mr R24, R8 */
		/* 8220E2F4h case   11:*/		regs.R24 = regs.R8;
		/* 8220E2F4h case   11:*/		return 0x8220E2F8;
		  /* 8220E2F8h */ case   12:  		/* mr R17, R9 */
		/* 8220E2F8h case   12:*/		regs.R17 = regs.R9;
		/* 8220E2F8h case   12:*/		return 0x8220E2FC;
		  /* 8220E2FCh */ case   13:  		/* cmplwi CR6, R3, 0 */
		/* 8220E2FCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220E2FCh case   13:*/		return 0x8220E300;
		  /* 8220E300h */ case   14:  		/* addi R21, R11, 27460 */
		/* 8220E300h case   14:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x6B44);
		/* 8220E300h case   14:*/		return 0x8220E304;
		  /* 8220E304h */ case   15:  		/* addi R20, R10, -8432 */
		/* 8220E304h case   15:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R10,0xFFFFDF10);
		/* 8220E304h case   15:*/		return 0x8220E308;
		  /* 8220E308h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E308h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8220E328;  }
		/* 8220E308h case   16:*/		return 0x8220E30C;
		  /* 8220E30Ch */ case   17:  		/* lis R11, -32252 */
		/* 8220E30Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E30Ch case   17:*/		return 0x8220E310;
		  /* 8220E310h */ case   18:  		/* mr R6, R20 */
		/* 8220E310h case   18:*/		regs.R6 = regs.R20;
		/* 8220E310h case   18:*/		return 0x8220E314;
		  /* 8220E314h */ case   19:  		/* addi R5, R11, -18036 */
		/* 8220E314h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB98C);
		/* 8220E314h case   19:*/		return 0x8220E318;
		  /* 8220E318h */ case   20:  		/* mr R4, R21 */
		/* 8220E318h case   20:*/		regs.R4 = regs.R21;
		/* 8220E318h case   20:*/		return 0x8220E31C;
		  /* 8220E31Ch */ case   21:  		/* li R7, 157 */
		/* 8220E31Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x9D);
		/* 8220E31Ch case   21:*/		return 0x8220E320;
		  /* 8220E320h */ case   22:  		/* li R3, 0 */
		/* 8220E320h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E320h case   22:*/		return 0x8220E324;
		  /* 8220E324h */ case   23:  		/* bl -747292 */
		/* 8220E324h case   23:*/		regs.LR = 0x8220E328; return 0x82157C08;
		/* 8220E324h case   23:*/		return 0x8220E328;
	}
	return 0x8220E328;
} // Block from 8220E2C8h-8220E328h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8220E328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E328);
		  /* 8220E328h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8220E328h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8220E328h case    0:*/		return 0x8220E32C;
		  /* 8220E32Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E32Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220E34C;  }
		/* 8220E32Ch case    1:*/		return 0x8220E330;
		  /* 8220E330h */ case    2:  		/* lis R11, -32252 */
		/* 8220E330h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E330h case    2:*/		return 0x8220E334;
		  /* 8220E334h */ case    3:  		/* mr R6, R20 */
		/* 8220E334h case    3:*/		regs.R6 = regs.R20;
		/* 8220E334h case    3:*/		return 0x8220E338;
		  /* 8220E338h */ case    4:  		/* addi R5, R11, -21620 */
		/* 8220E338h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8220E338h case    4:*/		return 0x8220E33C;
		  /* 8220E33Ch */ case    5:  		/* mr R4, R21 */
		/* 8220E33Ch case    5:*/		regs.R4 = regs.R21;
		/* 8220E33Ch case    5:*/		return 0x8220E340;
		  /* 8220E340h */ case    6:  		/* li R7, 158 */
		/* 8220E340h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9E);
		/* 8220E340h case    6:*/		return 0x8220E344;
		  /* 8220E344h */ case    7:  		/* li R3, 0 */
		/* 8220E344h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E344h case    7:*/		return 0x8220E348;
		  /* 8220E348h */ case    8:  		/* bl -747328 */
		/* 8220E348h case    8:*/		regs.LR = 0x8220E34C; return 0x82157C08;
		/* 8220E348h case    8:*/		return 0x8220E34C;
	}
	return 0x8220E34C;
} // Block from 8220E328h-8220E34Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E34C);
		  /* 8220E34Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8220E34Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8220E34Ch case    0:*/		return 0x8220E350;
	}
	return 0x8220E350;
} // Block from 8220E34Ch-8220E350h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220E350h
// Function '?SR_FindPatchableShaderPair@XGRAPHICS@@YAIPAU_SR_SHADER_RECYCLER@1@PAU_ABSTRACT_STATE@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E350);
		  /* 8220E350h */ case    0:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E350h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8220E370;  }
		/* 8220E350h case    0:*/		return 0x8220E354;
		  /* 8220E354h */ case    1:  		/* lis R11, -32252 */
		/* 8220E354h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E354h case    1:*/		return 0x8220E358;
		  /* 8220E358h */ case    2:  		/* mr R6, R20 */
		/* 8220E358h case    2:*/		regs.R6 = regs.R20;
		/* 8220E358h case    2:*/		return 0x8220E35C;
		  /* 8220E35Ch */ case    3:  		/* addi R5, R11, -21632 */
		/* 8220E35Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8220E35Ch case    3:*/		return 0x8220E360;
		  /* 8220E360h */ case    4:  		/* mr R4, R21 */
		/* 8220E360h case    4:*/		regs.R4 = regs.R21;
		/* 8220E360h case    4:*/		return 0x8220E364;
		  /* 8220E364h */ case    5:  		/* li R7, 159 */
		/* 8220E364h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x9F);
		/* 8220E364h case    5:*/		return 0x8220E368;
		  /* 8220E368h */ case    6:  		/* li R3, 0 */
		/* 8220E368h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E368h case    6:*/		return 0x8220E36C;
		  /* 8220E36Ch */ case    7:  		/* bl -747364 */
		/* 8220E36Ch case    7:*/		regs.LR = 0x8220E370; return 0x82157C08;
		/* 8220E36Ch case    7:*/		return 0x8220E370;
	}
	return 0x8220E370;
} // Block from 8220E350h-8220E370h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220E370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E370);
		  /* 8220E370h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8220E370h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8220E370h case    0:*/		return 0x8220E374;
		  /* 8220E374h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E374h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220E394;  }
		/* 8220E374h case    1:*/		return 0x8220E378;
		  /* 8220E378h */ case    2:  		/* lis R11, -32252 */
		/* 8220E378h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E378h case    2:*/		return 0x8220E37C;
		  /* 8220E37Ch */ case    3:  		/* mr R6, R20 */
		/* 8220E37Ch case    3:*/		regs.R6 = regs.R20;
		/* 8220E37Ch case    3:*/		return 0x8220E380;
		  /* 8220E380h */ case    4:  		/* addi R5, R11, -18080 */
		/* 8220E380h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB960);
		/* 8220E380h case    4:*/		return 0x8220E384;
		  /* 8220E384h */ case    5:  		/* mr R4, R21 */
		/* 8220E384h case    5:*/		regs.R4 = regs.R21;
		/* 8220E384h case    5:*/		return 0x8220E388;
		  /* 8220E388h */ case    6:  		/* li R7, 160 */
		/* 8220E388h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xA0);
		/* 8220E388h case    6:*/		return 0x8220E38C;
		  /* 8220E38Ch */ case    7:  		/* li R3, 0 */
		/* 8220E38Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E38Ch case    7:*/		return 0x8220E390;
		  /* 8220E390h */ case    8:  		/* bl -747400 */
		/* 8220E390h case    8:*/		regs.LR = 0x8220E394; return 0x82157C08;
		/* 8220E390h case    8:*/		return 0x8220E394;
	}
	return 0x8220E394;
} // Block from 8220E370h-8220E394h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E394);
		  /* 8220E394h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 8220E394h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8220E394h case    0:*/		return 0x8220E398;
		  /* 8220E398h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E398h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220E3B8;  }
		/* 8220E398h case    1:*/		return 0x8220E39C;
		  /* 8220E39Ch */ case    2:  		/* lis R11, -32252 */
		/* 8220E39Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E39Ch case    2:*/		return 0x8220E3A0;
		  /* 8220E3A0h */ case    3:  		/* mr R6, R20 */
		/* 8220E3A0h case    3:*/		regs.R6 = regs.R20;
		/* 8220E3A0h case    3:*/		return 0x8220E3A4;
		  /* 8220E3A4h */ case    4:  		/* addi R5, R11, -21104 */
		/* 8220E3A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 8220E3A4h case    4:*/		return 0x8220E3A8;
		  /* 8220E3A8h */ case    5:  		/* mr R4, R21 */
		/* 8220E3A8h case    5:*/		regs.R4 = regs.R21;
		/* 8220E3A8h case    5:*/		return 0x8220E3AC;
		  /* 8220E3ACh */ case    6:  		/* li R7, 161 */
		/* 8220E3ACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xA1);
		/* 8220E3ACh case    6:*/		return 0x8220E3B0;
		  /* 8220E3B0h */ case    7:  		/* li R3, 0 */
		/* 8220E3B0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E3B0h case    7:*/		return 0x8220E3B4;
		  /* 8220E3B4h */ case    8:  		/* bl -747436 */
		/* 8220E3B4h case    8:*/		regs.LR = 0x8220E3B8; return 0x82157C08;
		/* 8220E3B4h case    8:*/		return 0x8220E3B8;
	}
	return 0x8220E3B8;
} // Block from 8220E394h-8220E3B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E3B8);
		  /* 8220E3B8h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 8220E3B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8220E3B8h case    0:*/		return 0x8220E3BC;
		  /* 8220E3BCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E3BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220E3DC;  }
		/* 8220E3BCh case    1:*/		return 0x8220E3C0;
		  /* 8220E3C0h */ case    2:  		/* lis R11, -32252 */
		/* 8220E3C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E3C0h case    2:*/		return 0x8220E3C4;
		  /* 8220E3C4h */ case    3:  		/* mr R6, R20 */
		/* 8220E3C4h case    3:*/		regs.R6 = regs.R20;
		/* 8220E3C4h case    3:*/		return 0x8220E3C8;
		  /* 8220E3C8h */ case    4:  		/* addi R5, R11, -21120 */
		/* 8220E3C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD80);
		/* 8220E3C8h case    4:*/		return 0x8220E3CC;
		  /* 8220E3CCh */ case    5:  		/* mr R4, R21 */
		/* 8220E3CCh case    5:*/		regs.R4 = regs.R21;
		/* 8220E3CCh case    5:*/		return 0x8220E3D0;
		  /* 8220E3D0h */ case    6:  		/* li R7, 162 */
		/* 8220E3D0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xA2);
		/* 8220E3D0h case    6:*/		return 0x8220E3D4;
		  /* 8220E3D4h */ case    7:  		/* li R3, 0 */
		/* 8220E3D4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E3D4h case    7:*/		return 0x8220E3D8;
		  /* 8220E3D8h */ case    8:  		/* bl -747472 */
		/* 8220E3D8h case    8:*/		regs.LR = 0x8220E3DC; return 0x82157C08;
		/* 8220E3D8h case    8:*/		return 0x8220E3DC;
	}
	return 0x8220E3DC;
} // Block from 8220E3B8h-8220E3DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E3DC);
		  /* 8220E3DCh */ case    0:  		/* lwz R26, <#[R1 + 292]> */
		/* 8220E3DCh case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000124) );
		/* 8220E3DCh case    0:*/		return 0x8220E3E0;
		  /* 8220E3E0h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 8220E3E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8220E3E0h case    1:*/		return 0x8220E3E4;
		  /* 8220E3E4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E3E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E404;  }
		/* 8220E3E4h case    2:*/		return 0x8220E3E8;
		  /* 8220E3E8h */ case    3:  		/* lis R11, -32252 */
		/* 8220E3E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E3E8h case    3:*/		return 0x8220E3EC;
		  /* 8220E3ECh */ case    4:  		/* mr R6, R20 */
		/* 8220E3ECh case    4:*/		regs.R6 = regs.R20;
		/* 8220E3ECh case    4:*/		return 0x8220E3F0;
		  /* 8220E3F0h */ case    5:  		/* addi R5, R11, -21136 */
		/* 8220E3F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD70);
		/* 8220E3F0h case    5:*/		return 0x8220E3F4;
		  /* 8220E3F4h */ case    6:  		/* mr R4, R21 */
		/* 8220E3F4h case    6:*/		regs.R4 = regs.R21;
		/* 8220E3F4h case    6:*/		return 0x8220E3F8;
		  /* 8220E3F8h */ case    7:  		/* li R7, 163 */
		/* 8220E3F8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA3);
		/* 8220E3F8h case    7:*/		return 0x8220E3FC;
		  /* 8220E3FCh */ case    8:  		/* li R3, 0 */
		/* 8220E3FCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E3FCh case    8:*/		return 0x8220E400;
		  /* 8220E400h */ case    9:  		/* bl -747512 */
		/* 8220E400h case    9:*/		regs.LR = 0x8220E404; return 0x82157C08;
		/* 8220E400h case    9:*/		return 0x8220E404;
	}
	return 0x8220E404;
} // Block from 8220E3DCh-8220E404h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E404);
		  /* 8220E404h */ case    0:  		/* lwz R28, <#[R1 + 300]> */
		/* 8220E404h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000012C) );
		/* 8220E404h case    0:*/		return 0x8220E408;
		  /* 8220E408h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8220E408h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220E408h case    1:*/		return 0x8220E40C;
		  /* 8220E40Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E40Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E42C;  }
		/* 8220E40Ch case    2:*/		return 0x8220E410;
		  /* 8220E410h */ case    3:  		/* lis R11, -32252 */
		/* 8220E410h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E410h case    3:*/		return 0x8220E414;
		  /* 8220E414h */ case    4:  		/* mr R6, R20 */
		/* 8220E414h case    4:*/		regs.R6 = regs.R20;
		/* 8220E414h case    4:*/		return 0x8220E418;
		  /* 8220E418h */ case    5:  		/* addi R5, R11, -21152 */
		/* 8220E418h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD60);
		/* 8220E418h case    5:*/		return 0x8220E41C;
		  /* 8220E41Ch */ case    6:  		/* mr R4, R21 */
		/* 8220E41Ch case    6:*/		regs.R4 = regs.R21;
		/* 8220E41Ch case    6:*/		return 0x8220E420;
		  /* 8220E420h */ case    7:  		/* li R7, 164 */
		/* 8220E420h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA4);
		/* 8220E420h case    7:*/		return 0x8220E424;
		  /* 8220E424h */ case    8:  		/* li R3, 0 */
		/* 8220E424h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E424h case    8:*/		return 0x8220E428;
		  /* 8220E428h */ case    9:  		/* bl -747552 */
		/* 8220E428h case    9:*/		regs.LR = 0x8220E42C; return 0x82157C08;
		/* 8220E428h case    9:*/		return 0x8220E42C;
	}
	return 0x8220E42C;
} // Block from 8220E404h-8220E42Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E42C);
		  /* 8220E42Ch */ case    0:  		/* li R4, 332 */
		/* 8220E42Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x14C);
		/* 8220E42Ch case    0:*/		return 0x8220E430;
		  /* 8220E430h */ case    1:  		/* mtspr CTR, R27 */
		/* 8220E430h case    1:*/		regs.CTR = regs.R27;
		/* 8220E430h case    1:*/		return 0x8220E434;
		  /* 8220E434h */ case    2:  		/* mr R3, R30 */
		/* 8220E434h case    2:*/		regs.R3 = regs.R30;
		/* 8220E434h case    2:*/		return 0x8220E438;
		  /* 8220E438h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8220E438h case    3:*/		if ( 1 ) { regs.LR = 0x8220E43C; return (uint32)regs.CTR; }
		/* 8220E438h case    3:*/		return 0x8220E43C;
		  /* 8220E43Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 8220E43Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220E43Ch case    4:*/		return 0x8220E440;
		  /* 8220E440h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8220E440h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8220E464;  }
		/* 8220E440h case    5:*/		return 0x8220E444;
		  /* 8220E444h */ case    6:  		/* lis R11, -32252 */
		/* 8220E444h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E444h case    6:*/		return 0x8220E448;
		  /* 8220E448h */ case    7:  		/* mr R6, R20 */
		/* 8220E448h case    7:*/		regs.R6 = regs.R20;
		/* 8220E448h case    7:*/		return 0x8220E44C;
		  /* 8220E44Ch */ case    8:  		/* addi R5, R11, -18052 */
		/* 8220E44Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB97C);
		/* 8220E44Ch case    8:*/		return 0x8220E450;
		  /* 8220E450h */ case    9:  		/* mr R4, R21 */
		/* 8220E450h case    9:*/		regs.R4 = regs.R21;
		/* 8220E450h case    9:*/		return 0x8220E454;
		  /* 8220E454h */ case   10:  		/* li R7, 169 */
		/* 8220E454h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xA9);
		/* 8220E454h case   10:*/		return 0x8220E458;
		  /* 8220E458h */ case   11:  		/* li R3, 0 */
		/* 8220E458h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E458h case   11:*/		return 0x8220E45C;
		  /* 8220E45Ch */ case   12:  		/* bl -747604 */
		/* 8220E45Ch case   12:*/		regs.LR = 0x8220E460; return 0x82157C08;
		/* 8220E45Ch case   12:*/		return 0x8220E460;
		  /* 8220E460h */ case   13:  		/* b 484 */
		/* 8220E460h case   13:*/		return 0x8220E644;
		/* 8220E460h case   13:*/		return 0x8220E464;
	}
	return 0x8220E464;
} // Block from 8220E42Ch-8220E464h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220E464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E464);
		  /* 8220E464h */ case    0:  		/* lis R11, -32252 */
		/* 8220E464h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E464h case    0:*/		return 0x8220E468;
		  /* 8220E468h */ case    1:  		/* stw R24, <#[R31 + 24]> */
		/* 8220E468h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000018) );
		/* 8220E468h case    1:*/		return 0x8220E46C;
		  /* 8220E46Ch */ case    2:  		/* lis R10, -32252 */
		/* 8220E46Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220E46Ch case    2:*/		return 0x8220E470;
		  /* 8220E470h */ case    3:  		/* stw R26, <#[R31 + 324]> */
		/* 8220E470h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000144) );
		/* 8220E470h case    3:*/		return 0x8220E474;
		  /* 8220E474h */ case    4:  		/* lis R9, -32252 */
		/* 8220E474h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8220E474h case    4:*/		return 0x8220E478;
		  /* 8220E478h */ case    5:  		/* stw R28, <#[R31 + 328]> */
		/* 8220E478h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000148) );
		/* 8220E478h case    5:*/		return 0x8220E47C;
		  /* 8220E47Ch */ case    6:  		/* stw R30, <#[R31]> */
		/* 8220E47Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8220E47Ch case    6:*/		return 0x8220E480;
		  /* 8220E480h */ case    7:  		/* addi R29, R31, 28 */
		/* 8220E480h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x1C);
		/* 8220E480h case    7:*/		return 0x8220E484;
		  /* 8220E484h */ case    8:  		/* stw R27, <#[R31 + 4]> */
		/* 8220E484h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000004) );
		/* 8220E484h case    8:*/		return 0x8220E488;
		  /* 8220E488h */ case    9:  		/* li R19, 8 */
		/* 8220E488h case    9:*/		cpu::op::li<0>(regs,&regs.R19,0x8);
		/* 8220E488h case    9:*/		return 0x8220E48C;
		  /* 8220E48Ch */ case   10:  		/* stw R25, <#[R31 + 8]> */
		/* 8220E48Ch case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000008) );
		/* 8220E48Ch case   10:*/		return 0x8220E490;
		  /* 8220E490h */ case   11:  		/* addi R28, R11, -7908 */
		/* 8220E490h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFE11C);
		/* 8220E490h case   11:*/		return 0x8220E494;
		  /* 8220E494h */ case   12:  		/* stw R23, <#[R31 + 12]> */
		/* 8220E494h case   12:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220E494h case   12:*/		return 0x8220E498;
		  /* 8220E498h */ case   13:  		/* addi R26, R10, -7944 */
		/* 8220E498h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFE0F8);
		/* 8220E498h case   13:*/		return 0x8220E49C;
		  /* 8220E49Ch */ case   14:  		/* stw R22, <#[R31 + 16]> */
		/* 8220E49Ch case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000010) );
		/* 8220E49Ch case   14:*/		return 0x8220E4A0;
		  /* 8220E4A0h */ case   15:  		/* addi R24, R9, -7992 */
		/* 8220E4A0h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0xFFFFE0C8);
		/* 8220E4A0h case   15:*/		return 0x8220E4A4;
		  /* 8220E4A4h */ case   16:  		/* stw R17, <#[R31 + 20]> */
		/* 8220E4A4h case   16:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R31 + 0x00000014) );
		/* 8220E4A4h case   16:*/		return 0x8220E4A8;
		  /* 8220E4A8h */ case   17:  		/* stw R18, <#[R31 + 320]> */
		/* 8220E4A8h case   17:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000140) );
		/* 8220E4A8h case   17:*/		return 0x8220E4AC;
		  /* 8220E4ACh */ case   18:  		/* lwz R11, <#[R29 + 256]> */
		/* 8220E4ACh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000100) );
		/* 8220E4ACh case   18:*/		return 0x8220E4B0;
		  /* 8220E4B0h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8220E4B0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E4B0h case   19:*/		return 0x8220E4B4;
		  /* 8220E4B4h */ case   20:  		/* bc 12, CR6_EQ, 28 */
		/* 8220E4B4h case   20:*/		if ( regs.CR[6].eq ) { return 0x8220E4D0;  }
		/* 8220E4B4h case   20:*/		return 0x8220E4B8;
		  /* 8220E4B8h */ case   21:  		/* mr R6, R20 */
		/* 8220E4B8h case   21:*/		regs.R6 = regs.R20;
		/* 8220E4B8h case   21:*/		return 0x8220E4BC;
		  /* 8220E4BCh */ case   22:  		/* mr R5, R24 */
		/* 8220E4BCh case   22:*/		regs.R5 = regs.R24;
		/* 8220E4BCh case   22:*/		return 0x8220E4C0;
		  /* 8220E4C0h */ case   23:  		/* mr R4, R21 */
		/* 8220E4C0h case   23:*/		regs.R4 = regs.R21;
		/* 8220E4C0h case   23:*/		return 0x8220E4C4;
		  /* 8220E4C4h */ case   24:  		/* li R7, 194 */
		/* 8220E4C4h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0xC2);
		/* 8220E4C4h case   24:*/		return 0x8220E4C8;
		  /* 8220E4C8h */ case   25:  		/* li R3, 0 */
		/* 8220E4C8h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E4C8h case   25:*/		return 0x8220E4CC;
		  /* 8220E4CCh */ case   26:  		/* bl -747716 */
		/* 8220E4CCh case   26:*/		regs.LR = 0x8220E4D0; return 0x82157C08;
		/* 8220E4CCh case   26:*/		return 0x8220E4D0;
	}
	return 0x8220E4D0;
} // Block from 8220E464h-8220E4D0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220E4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E4D0);
		  /* 8220E4D0h */ case    0:  		/* li R7, 100 */
		/* 8220E4D0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 8220E4D0h case    0:*/		return 0x8220E4D4;
		  /* 8220E4D4h */ case    1:  		/* mr R6, R18 */
		/* 8220E4D4h case    1:*/		regs.R6 = regs.R18;
		/* 8220E4D4h case    1:*/		return 0x8220E4D8;
		  /* 8220E4D8h */ case    2:  		/* mr R5, R25 */
		/* 8220E4D8h case    2:*/		regs.R5 = regs.R25;
		/* 8220E4D8h case    2:*/		return 0x8220E4DC;
		  /* 8220E4DCh */ case    3:  		/* mr R4, R27 */
		/* 8220E4DCh case    3:*/		regs.R4 = regs.R27;
		/* 8220E4DCh case    3:*/		return 0x8220E4E0;
		  /* 8220E4E0h */ case    4:  		/* mr R3, R30 */
		/* 8220E4E0h case    4:*/		regs.R3 = regs.R30;
		/* 8220E4E0h case    4:*/		return 0x8220E4E4;
		  /* 8220E4E4h */ case    5:  		/* bl 2212 */
		/* 8220E4E4h case    5:*/		regs.LR = 0x8220E4E8; return 0x8220ED88;
		/* 8220E4E4h case    5:*/		return 0x8220E4E8;
		  /* 8220E4E8h */ case    6:  		/* stw R3, <#[R29]> */
		/* 8220E4E8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8220E4E8h case    6:*/		return 0x8220E4EC;
		  /* 8220E4ECh */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8220E4ECh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220E4ECh case    7:*/		return 0x8220E4F0;
		  /* 8220E4F0h */ case    8:  		/* bc 4, CR0_EQ, 24 */
		/* 8220E4F0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8220E508;  }
		/* 8220E4F0h case    8:*/		return 0x8220E4F4;
		  /* 8220E4F4h */ case    9:  		/* mr R6, R20 */
		/* 8220E4F4h case    9:*/		regs.R6 = regs.R20;
		/* 8220E4F4h case    9:*/		return 0x8220E4F8;
		  /* 8220E4F8h */ case   10:  		/* mr R5, R26 */
		/* 8220E4F8h case   10:*/		regs.R5 = regs.R26;
		/* 8220E4F8h case   10:*/		return 0x8220E4FC;
		  /* 8220E4FCh */ case   11:  		/* mr R4, R21 */
		/* 8220E4FCh case   11:*/		regs.R4 = regs.R21;
		/* 8220E4FCh case   11:*/		return 0x8220E500;
		  /* 8220E500h */ case   12:  		/* li R7, 200 */
		/* 8220E500h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0xC8);
		/* 8220E500h case   12:*/		return 0x8220E504;
		  /* 8220E504h */ case   13:  		/* bl -747772 */
		/* 8220E504h case   13:*/		regs.LR = 0x8220E508; return 0x82157C08;
		/* 8220E504h case   13:*/		return 0x8220E508;
	}
	return 0x8220E508;
} // Block from 8220E4D0h-8220E508h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220E508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E508);
		  /* 8220E508h */ case    0:  		/* li R6, 10 */
		/* 8220E508h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8220E508h case    0:*/		return 0x8220E50C;
		  /* 8220E50Ch */ case    1:  		/* mr R5, R25 */
		/* 8220E50Ch case    1:*/		regs.R5 = regs.R25;
		/* 8220E50Ch case    1:*/		return 0x8220E510;
		  /* 8220E510h */ case    2:  		/* mr R4, R27 */
		/* 8220E510h case    2:*/		regs.R4 = regs.R27;
		/* 8220E510h case    2:*/		return 0x8220E514;
		  /* 8220E514h */ case    3:  		/* mr R3, R30 */
		/* 8220E514h case    3:*/		regs.R3 = regs.R30;
		/* 8220E514h case    3:*/		return 0x8220E518;
		  /* 8220E518h */ case    4:  		/* bl -726504 */
		/* 8220E518h case    4:*/		regs.LR = 0x8220E51C; return 0x8215CF30;
		/* 8220E518h case    4:*/		return 0x8220E51C;
		  /* 8220E51Ch */ case    5:  		/* stw R3, <#[R29 + 32]> */
		/* 8220E51Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000020) );
		/* 8220E51Ch case    5:*/		return 0x8220E520;
		  /* 8220E520h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8220E520h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220E520h case    6:*/		return 0x8220E524;
		  /* 8220E524h */ case    7:  		/* bc 4, CR0_EQ, 24 */
		/* 8220E524h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8220E53C;  }
		/* 8220E524h case    7:*/		return 0x8220E528;
		  /* 8220E528h */ case    8:  		/* mr R6, R20 */
		/* 8220E528h case    8:*/		regs.R6 = regs.R20;
		/* 8220E528h case    8:*/		return 0x8220E52C;
		  /* 8220E52Ch */ case    9:  		/* mr R5, R28 */
		/* 8220E52Ch case    9:*/		regs.R5 = regs.R28;
		/* 8220E52Ch case    9:*/		return 0x8220E530;
		  /* 8220E530h */ case   10:  		/* mr R4, R21 */
		/* 8220E530h case   10:*/		regs.R4 = regs.R21;
		/* 8220E530h case   10:*/		return 0x8220E534;
		  /* 8220E534h */ case   11:  		/* li R7, 206 */
		/* 8220E534h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0xCE);
		/* 8220E534h case   11:*/		return 0x8220E538;
		  /* 8220E538h */ case   12:  		/* bl -747824 */
		/* 8220E538h case   12:*/		regs.LR = 0x8220E53C; return 0x82157C08;
		/* 8220E538h case   12:*/		return 0x8220E53C;
	}
	return 0x8220E53C;
} // Block from 8220E508h-8220E53Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220E53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E53C);
		  /* 8220E53Ch */ case    0:  		/* addic. R19, R19, -1 */
		/* 8220E53Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R19,regs.R19,0xFFFFFFFF);
		/* 8220E53Ch case    0:*/		return 0x8220E540;
		  /* 8220E540h */ case    1:  		/* addi R29, R29, 4 */
		/* 8220E540h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8220E540h case    1:*/		return 0x8220E544;
		  /* 8220E544h */ case    2:  		/* bc 4, CR0_EQ, -152 */
		/* 8220E544h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220E4AC;  }
		/* 8220E544h case    2:*/		return 0x8220E548;
		  /* 8220E548h */ case    3:  		/* mr R7, R30 */
		/* 8220E548h case    3:*/		regs.R7 = regs.R30;
		/* 8220E548h case    3:*/		return 0x8220E54C;
		  /* 8220E54Ch */ case    4:  		/* mr R6, R25 */
		/* 8220E54Ch case    4:*/		regs.R6 = regs.R25;
		/* 8220E54Ch case    4:*/		return 0x8220E550;
		  /* 8220E550h */ case    5:  		/* mr R5, R27 */
		/* 8220E550h case    5:*/		regs.R5 = regs.R27;
		/* 8220E550h case    5:*/		return 0x8220E554;
		  /* 8220E554h */ case    6:  		/* li R4, 36 */
		/* 8220E554h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 8220E554h case    6:*/		return 0x8220E558;
		  /* 8220E558h */ case    7:  		/* li R3, 100 */
		/* 8220E558h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x64);
		/* 8220E558h case    7:*/		return 0x8220E55C;
		  /* 8220E55Ch */ case    8:  		/* bl -11660 */
		/* 8220E55Ch case    8:*/		regs.LR = 0x8220E560; return 0x8220B7D0;
		/* 8220E55Ch case    8:*/		return 0x8220E560;
		  /* 8220E560h */ case    9:  		/* lwz R28, <#[R1 + 316]> */
		/* 8220E560h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000013C) );
		/* 8220E560h case    9:*/		return 0x8220E564;
		  /* 8220E564h */ case   10:  		/* stw R3, <#[R31 + 316]> */
		/* 8220E564h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000013C) );
		/* 8220E564h case   10:*/		return 0x8220E568;
		  /* 8220E568h */ case   11:  		/* li R25, 0 */
		/* 8220E568h case   11:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8220E568h case   11:*/		return 0x8220E56C;
		  /* 8220E56Ch */ case   12:  		/* addi R30, R31, 284 */
		/* 8220E56Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x11C);
		/* 8220E56Ch case   12:*/		return 0x8220E570;
		  /* 8220E570h */ case   13:  		/* addi R27, R31, 92 */
		/* 8220E570h case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x5C);
		/* 8220E570h case   13:*/		return 0x8220E574;
		  /* 8220E574h */ case   14:  		/* li R26, 1 */
		/* 8220E574h case   14:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8220E574h case   14:*/		return 0x8220E578;
		  /* 8220E578h */ case   15:  		/* lwz R11, <#[R28]> */
		/* 8220E578h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8220E578h case   15:*/		return 0x8220E57C;
		  /* 8220E57Ch */ case   16:  		/* mr R5, R27 */
		/* 8220E57Ch case   16:*/		regs.R5 = regs.R27;
		/* 8220E57Ch case   16:*/		return 0x8220E580;
		  /* 8220E580h */ case   17:  		/* mr R3, R31 */
		/* 8220E580h case   17:*/		regs.R3 = regs.R31;
		/* 8220E580h case   17:*/		return 0x8220E584;
		  /* 8220E584h */ case   18:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 8220E584h case   18:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 8220E584h case   18:*/		return 0x8220E588;
		  /* 8220E588h */ case   19:  		/* subf R11, R10, R11 */
		/* 8220E588h case   19:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220E588h case   19:*/		return 0x8220E58C;
		  /* 8220E58Ch */ case   20:  		/* addi R29, R11, 8 */
		/* 8220E58Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x8);
		/* 8220E58Ch case   20:*/		return 0x8220E590;
		  /* 8220E590h */ case   21:  		/* mr R4, R29 */
		/* 8220E590h case   21:*/		regs.R4 = regs.R29;
		/* 8220E590h case   21:*/		return 0x8220E594;
		  /* 8220E594h */ case   22:  		/* bl -1412 */
		/* 8220E594h case   22:*/		regs.LR = 0x8220E598; return 0x8220E010;
		/* 8220E594h case   22:*/		return 0x8220E598;
		  /* 8220E598h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8220E598h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220E598h case   23:*/		return 0x8220E59C;
		  /* 8220E59Ch */ case   24:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 8220E59Ch case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 8220E59Ch case   24:*/		return 0x8220E5A0;
		  /* 8220E5A0h */ case   25:  		/* stw R26, <#[R30 - 32]> */
		/* 8220E5A0h case   25:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0xFFFFFFE0) );
		/* 8220E5A0h case   25:*/		return 0x8220E5A4;
		  /* 8220E5A4h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 8220E5A4h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E5A4h case   26:*/		return 0x8220E5A8;
		  /* 8220E5A8h */ case   27:  		/* add R11, R10, R11 */
		/* 8220E5A8h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220E5A8h case   27:*/		return 0x8220E5AC;
		  /* 8220E5ACh */ case   28:  		/* stw R11, <#[R30]> */
		/* 8220E5ACh case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220E5ACh case   28:*/		return 0x8220E5B0;
		  /* 8220E5B0h */ case   29:  		/* bc 4, CR0_EQ, 148 */
		/* 8220E5B0h case   29:*/		if ( !regs.CR[0].eq ) { return 0x8220E644;  }
		/* 8220E5B0h case   29:*/		return 0x8220E5B4;
		  /* 8220E5B4h */ case   30:  		/* addi R25, R25, 1 */
		/* 8220E5B4h case   30:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8220E5B4h case   30:*/		return 0x8220E5B8;
		  /* 8220E5B8h */ case   31:  		/* addi R28, R28, 4 */
		/* 8220E5B8h case   31:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8220E5B8h case   31:*/		return 0x8220E5BC;
		  /* 8220E5BCh */ case   32:  		/* addi R30, R30, 4 */
		/* 8220E5BCh case   32:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220E5BCh case   32:*/		return 0x8220E5C0;
		  /* 8220E5C0h */ case   33:  		/* addi R27, R27, 20 */
		/* 8220E5C0h case   33:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x14);
		/* 8220E5C0h case   33:*/		return 0x8220E5C4;
		  /* 8220E5C4h */ case   34:  		/* cmpwi CR6, R25, 5 */
		/* 8220E5C4h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000005);
		/* 8220E5C4h case   34:*/		return 0x8220E5C8;
		  /* 8220E5C8h */ case   35:  		/* bc 4, CR6_GT, -80 */
		/* 8220E5C8h case   35:*/		if ( !regs.CR[6].gt ) { return 0x8220E578;  }
		/* 8220E5C8h case   35:*/		return 0x8220E5CC;
		  /* 8220E5CCh */ case   36:  		/* li R4, 6 */
		/* 8220E5CCh case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 8220E5CCh case   36:*/		return 0x8220E5D0;
		  /* 8220E5D0h */ case   37:  		/* mr R3, R17 */
		/* 8220E5D0h case   37:*/		regs.R3 = regs.R17;
		/* 8220E5D0h case   37:*/		return 0x8220E5D4;
		  /* 8220E5D4h */ case   38:  		/* bl -17484 */
		/* 8220E5D4h case   38:*/		regs.LR = 0x8220E5D8; return 0x8220A188;
		/* 8220E5D4h case   38:*/		return 0x8220E5D8;
		  /* 8220E5D8h */ case   39:  		/* rlwinm R30, R3, 30, 2, 31 */
		/* 8220E5D8h case   39:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R30,regs.R3);
		/* 8220E5D8h case   39:*/		return 0x8220E5DC;
		  /* 8220E5DCh */ case   40:  		/* addi R5, R31, 212 */
		/* 8220E5DCh case   40:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0xD4);
		/* 8220E5DCh case   40:*/		return 0x8220E5E0;
		  /* 8220E5E0h */ case   41:  		/* mr R4, R30 */
		/* 8220E5E0h case   41:*/		regs.R4 = regs.R30;
		/* 8220E5E0h case   41:*/		return 0x8220E5E4;
		  /* 8220E5E4h */ case   42:  		/* mr R3, R31 */
		/* 8220E5E4h case   42:*/		regs.R3 = regs.R31;
		/* 8220E5E4h case   42:*/		return 0x8220E5E8;
		  /* 8220E5E8h */ case   43:  		/* bl -1496 */
		/* 8220E5E8h case   43:*/		regs.LR = 0x8220E5EC; return 0x8220E010;
		/* 8220E5E8h case   43:*/		return 0x8220E5EC;
		  /* 8220E5ECh */ case   44:  		/* lwz R11, <#[R31 + 308]> */
		/* 8220E5ECh case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000134) );
		/* 8220E5ECh case   44:*/		return 0x8220E5F0;
		  /* 8220E5F0h */ case   45:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8220E5F0h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8220E5F0h case   45:*/		return 0x8220E5F4;
		  /* 8220E5F4h */ case   46:  		/* stw R26, <#[R31 + 276]> */
		/* 8220E5F4h case   46:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000114) );
		/* 8220E5F4h case   46:*/		return 0x8220E5F8;
	}
	return 0x8220E5F8;
} // Block from 8220E53Ch-8220E5F8h (47 instructions)

//////////////////////////////////////////////////////
// Block at 8220E5F8h
// Function '?PS_AllocCP@XGRAPHICS@@YAPAU_CP_COMPILED_PROGRAM@1@PAU_PS_PROGRAM_STORE@1@W4_E_COMPILED_PROGRAM_TYPE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E5F8);
		  /* 8220E5F8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 8220E5F8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E5F8h case    0:*/		return 0x8220E5FC;
		  /* 8220E5FCh */ case    1:  		/* add R11, R10, R11 */
		/* 8220E5FCh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220E5FCh case    1:*/		return 0x8220E600;
		  /* 8220E600h */ case    2:  		/* stw R11, <#[R31 + 308]> */
		/* 8220E600h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000134) );
		/* 8220E600h case    2:*/		return 0x8220E604;
		  /* 8220E604h */ case    3:  		/* bc 4, CR0_EQ, 64 */
		/* 8220E604h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8220E644;  }
		/* 8220E604h case    3:*/		return 0x8220E608;
		  /* 8220E608h */ case    4:  		/* li R4, 5 */
		/* 8220E608h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8220E608h case    4:*/		return 0x8220E60C;
		  /* 8220E60Ch */ case    5:  		/* mr R3, R17 */
		/* 8220E60Ch case    5:*/		regs.R3 = regs.R17;
		/* 8220E60Ch case    5:*/		return 0x8220E610;
		  /* 8220E610h */ case    6:  		/* bl -17544 */
		/* 8220E610h case    6:*/		regs.LR = 0x8220E614; return 0x8220A188;
		/* 8220E610h case    6:*/		return 0x8220E614;
		  /* 8220E614h */ case    7:  		/* rlwinm R30, R3, 30, 2, 31 */
		/* 8220E614h case    7:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R30,regs.R3);
		/* 8220E614h case    7:*/		return 0x8220E618;
		  /* 8220E618h */ case    8:  		/* addi R5, R31, 232 */
		/* 8220E618h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0xE8);
		/* 8220E618h case    8:*/		return 0x8220E61C;
		  /* 8220E61Ch */ case    9:  		/* mr R4, R30 */
		/* 8220E61Ch case    9:*/		regs.R4 = regs.R30;
		/* 8220E61Ch case    9:*/		return 0x8220E620;
		  /* 8220E620h */ case   10:  		/* mr R3, R31 */
		/* 8220E620h case   10:*/		regs.R3 = regs.R31;
		/* 8220E620h case   10:*/		return 0x8220E624;
		  /* 8220E624h */ case   11:  		/* bl -1556 */
		/* 8220E624h case   11:*/		regs.LR = 0x8220E628; return 0x8220E010;
		/* 8220E624h case   11:*/		return 0x8220E628;
		  /* 8220E628h */ case   12:  		/* lwz R11, <#[R31 + 312]> */
		/* 8220E628h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000138) );
		/* 8220E628h case   12:*/		return 0x8220E62C;
		  /* 8220E62Ch */ case   13:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8220E62Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8220E62Ch case   13:*/		return 0x8220E630;
		  /* 8220E630h */ case   14:  		/* stw R26, <#[R31 + 280]> */
		/* 8220E630h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000118) );
		/* 8220E630h case   14:*/		return 0x8220E634;
		  /* 8220E634h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8220E634h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E634h case   15:*/		return 0x8220E638;
		  /* 8220E638h */ case   16:  		/* add R11, R10, R11 */
		/* 8220E638h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220E638h case   16:*/		return 0x8220E63C;
		  /* 8220E63Ch */ case   17:  		/* stw R11, <#[R31 + 312]> */
		/* 8220E63Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000138) );
		/* 8220E63Ch case   17:*/		return 0x8220E640;
	}
	return 0x8220E640;
} // Block from 8220E5F8h-8220E640h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220E640h
// Function '?PS_RemoveBlock@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PS_PROGRAM_STORE@1@PAU_HASH_TABLE@1@PAU_PS_INTERNAL_BLOCK@1@W4_E_PS_BLOCK_TYPE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E640);
		  /* 8220E640h */ case    0:  		/* bc 12, CR0_EQ, 16 */
		/* 8220E640h case    0:*/		if ( regs.CR[0].eq ) { return 0x8220E650;  }
		/* 8220E640h case    0:*/		return 0x8220E644;
	}
	return 0x8220E644;
} // Block from 8220E640h-8220E644h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220E644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E644);
		  /* 8220E644h */ case    0:  		/* mr R3, R31 */
		/* 8220E644h case    0:*/		regs.R3 = regs.R31;
		/* 8220E644h case    0:*/		return 0x8220E648;
		  /* 8220E648h */ case    1:  		/* bl -1352 */
		/* 8220E648h case    1:*/		regs.LR = 0x8220E64C; return 0x8220E100;
		/* 8220E648h case    1:*/		return 0x8220E64C;
		  /* 8220E64Ch */ case    2:  		/* li R31, 0 */
		/* 8220E64Ch case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220E64Ch case    2:*/		return 0x8220E650;
	}
	return 0x8220E650;
} // Block from 8220E644h-8220E650h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220E650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E650);
		  /* 8220E650h */ case    0:  		/* mr R3, R31 */
		/* 8220E650h case    0:*/		regs.R3 = regs.R31;
		/* 8220E650h case    0:*/		return 0x8220E654;
		  /* 8220E654h */ case    1:  		/* addi R1, R1, 208 */
		/* 8220E654h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8220E654h case    1:*/		return 0x8220E658;
		  /* 8220E658h */ case    2:  		/* b -1561564 */
		/* 8220E658h case    2:*/		return 0x8209127C;
		/* 8220E658h case    2:*/		return 0x8220E65C;
		  /* 8220E65Ch */ case    3:  		/* nop */
		/* 8220E65Ch case    3:*/		cpu::op::nop();
		/* 8220E65Ch case    3:*/		return 0x8220E660;
	}
	return 0x8220E660;
} // Block from 8220E650h-8220E660h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220E660h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E660);
		  /* 8220E660h */ case    0:  		/* mfspr R12, LR */
		/* 8220E660h case    0:*/		regs.R12 = regs.LR;
		/* 8220E660h case    0:*/		return 0x8220E664;
		  /* 8220E664h */ case    1:  		/* bl -1561612 */
		/* 8220E664h case    1:*/		regs.LR = 0x8220E668; return 0x82091258;
		/* 8220E664h case    1:*/		return 0x8220E668;
		  /* 8220E668h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220E668h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220E668h case    2:*/		return 0x8220E66C;
		  /* 8220E66Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220E66Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220E66Ch case    3:*/		return 0x8220E670;
		  /* 8220E670h */ case    4:  		/* lis R10, -32252 */
		/* 8220E670h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220E670h case    4:*/		return 0x8220E674;
		  /* 8220E674h */ case    5:  		/* mr R28, R3 */
		/* 8220E674h case    5:*/		regs.R28 = regs.R3;
		/* 8220E674h case    5:*/		return 0x8220E678;
		  /* 8220E678h */ case    6:  		/* mr R29, R4 */
		/* 8220E678h case    6:*/		regs.R29 = regs.R4;
		/* 8220E678h case    6:*/		return 0x8220E67C;
		  /* 8220E67Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220E67Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220E67Ch case    7:*/		return 0x8220E680;
		  /* 8220E680h */ case    8:  		/* addi R31, R11, 27460 */
		/* 8220E680h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8220E680h case    8:*/		return 0x8220E684;
		  /* 8220E684h */ case    9:  		/* addi R30, R10, -7688 */
		/* 8220E684h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFE1F8);
		/* 8220E684h case    9:*/		return 0x8220E688;
		  /* 8220E688h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E688h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220E6A8;  }
		/* 8220E688h case   10:*/		return 0x8220E68C;
		  /* 8220E68Ch */ case   11:  		/* lis R11, -32252 */
		/* 8220E68Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E68Ch case   11:*/		return 0x8220E690;
		  /* 8220E690h */ case   12:  		/* mr R6, R30 */
		/* 8220E690h case   12:*/		regs.R6 = regs.R30;
		/* 8220E690h case   12:*/		return 0x8220E694;
		  /* 8220E694h */ case   13:  		/* addi R5, R11, -7708 */
		/* 8220E694h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE1E4);
		/* 8220E694h case   13:*/		return 0x8220E698;
		  /* 8220E698h */ case   14:  		/* mr R4, R31 */
		/* 8220E698h case   14:*/		regs.R4 = regs.R31;
		/* 8220E698h case   14:*/		return 0x8220E69C;
		  /* 8220E69Ch */ case   15:  		/* li R7, 157 */
		/* 8220E69Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x9D);
		/* 8220E69Ch case   15:*/		return 0x8220E6A0;
		  /* 8220E6A0h */ case   16:  		/* li R3, 0 */
		/* 8220E6A0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E6A0h case   16:*/		return 0x8220E6A4;
		  /* 8220E6A4h */ case   17:  		/* bl -748188 */
		/* 8220E6A4h case   17:*/		regs.LR = 0x8220E6A8; return 0x82157C08;
		/* 8220E6A4h case   17:*/		return 0x8220E6A8;
	}
	return 0x8220E6A8;
} // Block from 8220E660h-8220E6A8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220E6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E6A8);
		  /* 8220E6A8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8220E6A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220E6A8h case    0:*/		return 0x8220E6AC;
		  /* 8220E6ACh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E6ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220E6CC;  }
		/* 8220E6ACh case    1:*/		return 0x8220E6B0;
		  /* 8220E6B0h */ case    2:  		/* lis R11, -32252 */
		/* 8220E6B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E6B0h case    2:*/		return 0x8220E6B4;
		  /* 8220E6B4h */ case    3:  		/* mr R6, R30 */
		/* 8220E6B4h case    3:*/		regs.R6 = regs.R30;
		/* 8220E6B4h case    3:*/		return 0x8220E6B8;
		  /* 8220E6B8h */ case    4:  		/* addi R5, R11, -7728 */
		/* 8220E6B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE1D0);
		/* 8220E6B8h case    4:*/		return 0x8220E6BC;
		  /* 8220E6BCh */ case    5:  		/* mr R4, R31 */
		/* 8220E6BCh case    5:*/		regs.R4 = regs.R31;
		/* 8220E6BCh case    5:*/		return 0x8220E6C0;
		  /* 8220E6C0h */ case    6:  		/* li R7, 158 */
		/* 8220E6C0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9E);
		/* 8220E6C0h case    6:*/		return 0x8220E6C4;
		  /* 8220E6C4h */ case    7:  		/* li R3, 0 */
		/* 8220E6C4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E6C4h case    7:*/		return 0x8220E6C8;
		  /* 8220E6C8h */ case    8:  		/* bl -748224 */
		/* 8220E6C8h case    8:*/		regs.LR = 0x8220E6CC; return 0x82157C08;
		/* 8220E6C8h case    8:*/		return 0x8220E6CC;
	}
	return 0x8220E6CC;
} // Block from 8220E6A8h-8220E6CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E6CC);
		  /* 8220E6CCh */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 8220E6CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8220E6CCh case    0:*/		return 0x8220E6D0;
		  /* 8220E6D0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220E6D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E6D0h case    1:*/		return 0x8220E6D4;
		  /* 8220E6D4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E6D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E6F4;  }
		/* 8220E6D4h case    2:*/		return 0x8220E6D8;
		  /* 8220E6D8h */ case    3:  		/* lis R11, -32252 */
		/* 8220E6D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E6D8h case    3:*/		return 0x8220E6DC;
		  /* 8220E6DCh */ case    4:  		/* mr R6, R30 */
		/* 8220E6DCh case    4:*/		regs.R6 = regs.R30;
		/* 8220E6DCh case    4:*/		return 0x8220E6E0;
		  /* 8220E6E0h */ case    5:  		/* addi R5, R11, -7764 */
		/* 8220E6E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE1AC);
		/* 8220E6E0h case    5:*/		return 0x8220E6E4;
		  /* 8220E6E4h */ case    6:  		/* mr R4, R31 */
		/* 8220E6E4h case    6:*/		regs.R4 = regs.R31;
		/* 8220E6E4h case    6:*/		return 0x8220E6E8;
		  /* 8220E6E8h */ case    7:  		/* li R7, 159 */
		/* 8220E6E8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x9F);
		/* 8220E6E8h case    7:*/		return 0x8220E6EC;
		  /* 8220E6ECh */ case    8:  		/* li R3, 0 */
		/* 8220E6ECh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E6ECh case    8:*/		return 0x8220E6F0;
		  /* 8220E6F0h */ case    9:  		/* bl -748264 */
		/* 8220E6F0h case    9:*/		regs.LR = 0x8220E6F4; return 0x82157C08;
		/* 8220E6F0h case    9:*/		return 0x8220E6F4;
	}
	return 0x8220E6F4;
} // Block from 8220E6CCh-8220E6F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E6F4);
		  /* 8220E6F4h */ case    0:  		/* lwz R11, <#[R29 + 24]> */
		/* 8220E6F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 8220E6F4h case    0:*/		return 0x8220E6F8;
		  /* 8220E6F8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220E6F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E6F8h case    1:*/		return 0x8220E6FC;
		  /* 8220E6FCh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E6FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E71C;  }
		/* 8220E6FCh case    2:*/		return 0x8220E700;
		  /* 8220E700h */ case    3:  		/* lis R11, -32252 */
		/* 8220E700h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E700h case    3:*/		return 0x8220E704;
		  /* 8220E704h */ case    4:  		/* mr R6, R30 */
		/* 8220E704h case    4:*/		regs.R6 = regs.R30;
		/* 8220E704h case    4:*/		return 0x8220E708;
		  /* 8220E708h */ case    5:  		/* addi R5, R11, -7796 */
		/* 8220E708h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE18C);
		/* 8220E708h case    5:*/		return 0x8220E70C;
		  /* 8220E70Ch */ case    6:  		/* mr R4, R31 */
		/* 8220E70Ch case    6:*/		regs.R4 = regs.R31;
		/* 8220E70Ch case    6:*/		return 0x8220E710;
		  /* 8220E710h */ case    7:  		/* li R7, 160 */
		/* 8220E710h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA0);
		/* 8220E710h case    7:*/		return 0x8220E714;
		  /* 8220E714h */ case    8:  		/* li R3, 0 */
		/* 8220E714h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E714h case    8:*/		return 0x8220E718;
		  /* 8220E718h */ case    9:  		/* bl -748304 */
		/* 8220E718h case    9:*/		regs.LR = 0x8220E71C; return 0x82157C08;
		/* 8220E718h case    9:*/		return 0x8220E71C;
	}
	return 0x8220E71C;
} // Block from 8220E6F4h-8220E71Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E71C);
		  /* 8220E71Ch */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 8220E71Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 8220E71Ch case    0:*/		return 0x8220E720;
		  /* 8220E720h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220E720h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E720h case    1:*/		return 0x8220E724;
		  /* 8220E724h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E724h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E744;  }
		/* 8220E724h case    2:*/		return 0x8220E728;
		  /* 8220E728h */ case    3:  		/* lis R11, -32252 */
		/* 8220E728h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E728h case    3:*/		return 0x8220E72C;
		  /* 8220E72Ch */ case    4:  		/* mr R6, R30 */
		/* 8220E72Ch case    4:*/		regs.R6 = regs.R30;
		/* 8220E72Ch case    4:*/		return 0x8220E730;
		  /* 8220E730h */ case    5:  		/* addi R5, R11, -7832 */
		/* 8220E730h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE168);
		/* 8220E730h case    5:*/		return 0x8220E734;
		  /* 8220E734h */ case    6:  		/* mr R4, R31 */
		/* 8220E734h case    6:*/		regs.R4 = regs.R31;
		/* 8220E734h case    6:*/		return 0x8220E738;
		  /* 8220E738h */ case    7:  		/* li R7, 161 */
		/* 8220E738h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA1);
		/* 8220E738h case    7:*/		return 0x8220E73C;
		  /* 8220E73Ch */ case    8:  		/* li R3, 0 */
		/* 8220E73Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E73Ch case    8:*/		return 0x8220E740;
		  /* 8220E740h */ case    9:  		/* bl -748344 */
		/* 8220E740h case    9:*/		regs.LR = 0x8220E744; return 0x82157C08;
		/* 8220E740h case    9:*/		return 0x8220E744;
	}
	return 0x8220E744;
} // Block from 8220E71Ch-8220E744h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E744);
		  /* 8220E744h */ case    0:  		/* lwz R11, <#[R29 + 32]> */
		/* 8220E744h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 8220E744h case    0:*/		return 0x8220E748;
		  /* 8220E748h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220E748h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E748h case    1:*/		return 0x8220E74C;
		  /* 8220E74Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E74Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220E76C;  }
		/* 8220E74Ch case    2:*/		return 0x8220E750;
		  /* 8220E750h */ case    3:  		/* lis R11, -32252 */
		/* 8220E750h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E750h case    3:*/		return 0x8220E754;
		  /* 8220E754h */ case    4:  		/* mr R6, R30 */
		/* 8220E754h case    4:*/		regs.R6 = regs.R30;
		/* 8220E754h case    4:*/		return 0x8220E758;
		  /* 8220E758h */ case    5:  		/* addi R5, R11, -7864 */
		/* 8220E758h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE148);
		/* 8220E758h case    5:*/		return 0x8220E75C;
		  /* 8220E75Ch */ case    6:  		/* mr R4, R31 */
		/* 8220E75Ch case    6:*/		regs.R4 = regs.R31;
		/* 8220E75Ch case    6:*/		return 0x8220E760;
		  /* 8220E760h */ case    7:  		/* li R7, 162 */
		/* 8220E760h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA2);
		/* 8220E760h case    7:*/		return 0x8220E764;
		  /* 8220E764h */ case    8:  		/* li R3, 0 */
		/* 8220E764h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E764h case    8:*/		return 0x8220E768;
		  /* 8220E768h */ case    9:  		/* bl -748384 */
		/* 8220E768h case    9:*/		regs.LR = 0x8220E76C; return 0x82157C08;
		/* 8220E768h case    9:*/		return 0x8220E76C;
	}
	return 0x8220E76C;
} // Block from 8220E744h-8220E76Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220E76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E76C);
		  /* 8220E76Ch */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 8220E76Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8220E76Ch case    0:*/		return 0x8220E770;
		  /* 8220E770h */ case    1:  		/* li R4, 544 */
		/* 8220E770h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x220);
		/* 8220E770h case    1:*/		return 0x8220E774;
		  /* 8220E774h */ case    2:  		/* lwz R3, <#[R29 + 16]> */
		/* 8220E774h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8220E774h case    2:*/		return 0x8220E778;
		  /* 8220E778h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220E778h case    3:*/		regs.CTR = regs.R11;
		/* 8220E778h case    3:*/		return 0x8220E77C;
		  /* 8220E77Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220E77Ch case    4:*/		if ( 1 ) { regs.LR = 0x8220E780; return (uint32)regs.CTR; }
		/* 8220E77Ch case    4:*/		return 0x8220E780;
		  /* 8220E780h */ case    5:  		/* or. R31, R3, R3 */
		/* 8220E780h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220E780h case    5:*/		return 0x8220E784;
		  /* 8220E784h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 8220E784h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8220E790;  }
		/* 8220E784h case    6:*/		return 0x8220E788;
		  /* 8220E788h */ case    7:  		/* li R3, 0 */
		/* 8220E788h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E788h case    7:*/		return 0x8220E78C;
		  /* 8220E78Ch */ case    8:  		/* b 64 */
		/* 8220E78Ch case    8:*/		return 0x8220E7CC;
		/* 8220E78Ch case    8:*/		return 0x8220E790;
	}
	return 0x8220E790;
} // Block from 8220E76Ch-8220E790h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E790);
		  /* 8220E790h */ case    0:  		/* li R5, 544 */
		/* 8220E790h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x220);
		/* 8220E790h case    0:*/		return 0x8220E794;
		  /* 8220E794h */ case    1:  		/* li R4, 0 */
		/* 8220E794h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220E794h case    1:*/		return 0x8220E798;
		  /* 8220E798h */ case    2:  		/* mr R3, R31 */
		/* 8220E798h case    2:*/		regs.R3 = regs.R31;
		/* 8220E798h case    2:*/		return 0x8220E79C;
		  /* 8220E79Ch */ case    3:  		/* bl -1561692 */
		/* 8220E79Ch case    3:*/		regs.LR = 0x8220E7A0; return 0x82091340;
		/* 8220E79Ch case    3:*/		return 0x8220E7A0;
		  /* 8220E7A0h */ case    4:  		/* li R11, 0 */
		/* 8220E7A0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220E7A0h case    4:*/		return 0x8220E7A4;
		  /* 8220E7A4h */ case    5:  		/* addi R3, R31, 152 */
		/* 8220E7A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x98);
		/* 8220E7A4h case    5:*/		return 0x8220E7A8;
		  /* 8220E7A8h */ case    6:  		/* stw R11, <#[R31]> */
		/* 8220E7A8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220E7A8h case    6:*/		return 0x8220E7AC;
		  /* 8220E7ACh */ case    7:  		/* li R5, 32 */
		/* 8220E7ACh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8220E7ACh case    7:*/		return 0x8220E7B0;
		  /* 8220E7B0h */ case    8:  		/* mr R4, R28 */
		/* 8220E7B0h case    8:*/		regs.R4 = regs.R28;
		/* 8220E7B0h case    8:*/		return 0x8220E7B4;
		  /* 8220E7B4h */ case    9:  		/* bl -1560068 */
		/* 8220E7B4h case    9:*/		regs.LR = 0x8220E7B8; return 0x820919B0;
		/* 8220E7B4h case    9:*/		return 0x8220E7B8;
		  /* 8220E7B8h */ case   10:  		/* addi R3, R31, 472 */
		/* 8220E7B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1D8);
		/* 8220E7B8h case   10:*/		return 0x8220E7BC;
		  /* 8220E7BCh */ case   11:  		/* li R5, 72 */
		/* 8220E7BCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x48);
		/* 8220E7BCh case   11:*/		return 0x8220E7C0;
		  /* 8220E7C0h */ case   12:  		/* mr R4, R29 */
		/* 8220E7C0h case   12:*/		regs.R4 = regs.R29;
		/* 8220E7C0h case   12:*/		return 0x8220E7C4;
		  /* 8220E7C4h */ case   13:  		/* bl -1560084 */
		/* 8220E7C4h case   13:*/		regs.LR = 0x8220E7C8; return 0x820919B0;
		/* 8220E7C4h case   13:*/		return 0x8220E7C8;
		  /* 8220E7C8h */ case   14:  		/* mr R3, R31 */
		/* 8220E7C8h case   14:*/		regs.R3 = regs.R31;
		/* 8220E7C8h case   14:*/		return 0x8220E7CC;
	}
	return 0x8220E7CC;
} // Block from 8220E790h-8220E7CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220E7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E7CC);
		  /* 8220E7CCh */ case    0:  		/* addi R1, R1, 128 */
		/* 8220E7CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220E7CCh case    0:*/		return 0x8220E7D0;
		  /* 8220E7D0h */ case    1:  		/* b -1561896 */
		/* 8220E7D0h case    1:*/		return 0x820912A8;
		/* 8220E7D0h case    1:*/		return 0x8220E7D4;
		  /* 8220E7D4h */ case    2:  		/* nop */
		/* 8220E7D4h case    2:*/		cpu::op::nop();
		/* 8220E7D4h case    2:*/		return 0x8220E7D8;
	}
	return 0x8220E7D8;
} // Block from 8220E7CCh-8220E7D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220E7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E7D8);
		  /* 8220E7D8h */ case    0:  		/* mfspr R12, LR */
		/* 8220E7D8h case    0:*/		regs.R12 = regs.LR;
		/* 8220E7D8h case    0:*/		return 0x8220E7DC;
		  /* 8220E7DCh */ case    1:  		/* bl -1561992 */
		/* 8220E7DCh case    1:*/		regs.LR = 0x8220E7E0; return 0x82091254;
		/* 8220E7DCh case    1:*/		return 0x8220E7E0;
		  /* 8220E7E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220E7E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220E7E0h case    2:*/		return 0x8220E7E4;
		  /* 8220E7E4h */ case    3:  		/* lis R11, -32253 */
		/* 8220E7E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220E7E4h case    3:*/		return 0x8220E7E8;
		  /* 8220E7E8h */ case    4:  		/* lis R10, -32252 */
		/* 8220E7E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220E7E8h case    4:*/		return 0x8220E7EC;
		  /* 8220E7ECh */ case    5:  		/* mr R31, R3 */
		/* 8220E7ECh case    5:*/		regs.R31 = regs.R3;
		/* 8220E7ECh case    5:*/		return 0x8220E7F0;
		  /* 8220E7F0h */ case    6:  		/* mr R30, R4 */
		/* 8220E7F0h case    6:*/		regs.R30 = regs.R4;
		/* 8220E7F0h case    6:*/		return 0x8220E7F4;
		  /* 8220E7F4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220E7F4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220E7F4h case    7:*/		return 0x8220E7F8;
		  /* 8220E7F8h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8220E7F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220E7F8h case    8:*/		return 0x8220E7FC;
		  /* 8220E7FCh */ case    9:  		/* addi R27, R10, -7688 */
		/* 8220E7FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE1F8);
		/* 8220E7FCh case    9:*/		return 0x8220E800;
		  /* 8220E800h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220E800h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220E820;  }
		/* 8220E800h case   10:*/		return 0x8220E804;
		  /* 8220E804h */ case   11:  		/* lis R11, -32252 */
		/* 8220E804h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E804h case   11:*/		return 0x8220E808;
		  /* 8220E808h */ case   12:  		/* mr R6, R27 */
		/* 8220E808h case   12:*/		regs.R6 = regs.R27;
		/* 8220E808h case   12:*/		return 0x8220E80C;
		  /* 8220E80Ch */ case   13:  		/* addi R5, R11, -7544 */
		/* 8220E80Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE288);
		/* 8220E80Ch case   13:*/		return 0x8220E810;
		  /* 8220E810h */ case   14:  		/* mr R4, R28 */
		/* 8220E810h case   14:*/		regs.R4 = regs.R28;
		/* 8220E810h case   14:*/		return 0x8220E814;
		  /* 8220E814h */ case   15:  		/* li R7, 285 */
		/* 8220E814h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x11D);
		/* 8220E814h case   15:*/		return 0x8220E818;
		  /* 8220E818h */ case   16:  		/* li R3, 0 */
		/* 8220E818h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E818h case   16:*/		return 0x8220E81C;
		  /* 8220E81Ch */ case   17:  		/* bl -748564 */
		/* 8220E81Ch case   17:*/		regs.LR = 0x8220E820; return 0x82157C08;
		/* 8220E81Ch case   17:*/		return 0x8220E820;
	}
	return 0x8220E820;
} // Block from 8220E7D8h-8220E820h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220E820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E820);
		  /* 8220E820h */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 8220E820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 8220E820h case    0:*/		return 0x8220E824;
		  /* 8220E824h */ case    1:  		/* bc 12, CR6_LT, 40 */
		/* 8220E824h case    1:*/		if ( regs.CR[6].lt ) { return 0x8220E84C;  }
		/* 8220E824h case    1:*/		return 0x8220E828;
		  /* 8220E828h */ case    2:  		/* lis R11, -32252 */
		/* 8220E828h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E828h case    2:*/		return 0x8220E82C;
		  /* 8220E82Ch */ case    3:  		/* mr R6, R27 */
		/* 8220E82Ch case    3:*/		regs.R6 = regs.R27;
		/* 8220E82Ch case    3:*/		return 0x8220E830;
		  /* 8220E830h */ case    4:  		/* addi R5, R11, -7588 */
		/* 8220E830h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE25C);
		/* 8220E830h case    4:*/		return 0x8220E834;
		  /* 8220E834h */ case    5:  		/* mr R4, R28 */
		/* 8220E834h case    5:*/		regs.R4 = regs.R28;
		/* 8220E834h case    5:*/		return 0x8220E838;
		  /* 8220E838h */ case    6:  		/* li R7, 286 */
		/* 8220E838h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x11E);
		/* 8220E838h case    6:*/		return 0x8220E83C;
		  /* 8220E83Ch */ case    7:  		/* li R3, 0 */
		/* 8220E83Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E83Ch case    7:*/		return 0x8220E840;
		  /* 8220E840h */ case    8:  		/* bl -748600 */
		/* 8220E840h case    8:*/		regs.LR = 0x8220E844; return 0x82157C08;
		/* 8220E840h case    8:*/		return 0x8220E844;
		  /* 8220E844h */ case    9:  		/* li R3, 25 */
		/* 8220E844h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x19);
		/* 8220E844h case    9:*/		return 0x8220E848;
		  /* 8220E848h */ case   10:  		/* b 164 */
		/* 8220E848h case   10:*/		return 0x8220E8EC;
		/* 8220E848h case   10:*/		return 0x8220E84C;
	}
	return 0x8220E84C;
} // Block from 8220E820h-8220E84Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8220E84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E84C);
		  /* 8220E84Ch */ case    0:  		/* mulli R11, R30, 44 */
		/* 8220E84Ch case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x2C);
		/* 8220E84Ch case    0:*/		return 0x8220E850;
		  /* 8220E850h */ case    1:  		/* add R30, R11, R31 */
		/* 8220E850h case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R31);
		/* 8220E850h case    1:*/		return 0x8220E854;
		  /* 8220E854h */ case    2:  		/* lis R11, -32252 */
		/* 8220E854h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220E854h case    2:*/		return 0x8220E858;
		  /* 8220E858h */ case    3:  		/* addi R29, R11, -25364 */
		/* 8220E858h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF9CEC);
		/* 8220E858h case    3:*/		return 0x8220E85C;
		  /* 8220E85Ch */ case    4:  		/* lwz R11, <#[R30 + 332]> */
		/* 8220E85Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000014C) );
		/* 8220E85Ch case    4:*/		return 0x8220E860;
		  /* 8220E860h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8220E860h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220E860h case    5:*/		return 0x8220E864;
		  /* 8220E864h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 8220E864h case    6:*/		if ( regs.CR[6].eq ) { return 0x8220E89C;  }
		/* 8220E864h case    6:*/		return 0x8220E868;
		  /* 8220E868h */ case    7:  		/* lwz R11, <#[R31 + 504]> */
		/* 8220E868h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000001F8) );
		/* 8220E868h case    7:*/		return 0x8220E86C;
		  /* 8220E86Ch */ case    8:  		/* addi R4, R30, 316 */
		/* 8220E86Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x13C);
		/* 8220E86Ch case    8:*/		return 0x8220E870;
		  /* 8220E870h */ case    9:  		/* lwz R3, <#[R31 + 488]> */
		/* 8220E870h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000001E8) );
		/* 8220E870h case    9:*/		return 0x8220E874;
		  /* 8220E874h */ case   10:  		/* mtspr CTR, R11 */
		/* 8220E874h case   10:*/		regs.CTR = regs.R11;
		/* 8220E874h case   10:*/		return 0x8220E878;
		  /* 8220E878h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8220E878h case   11:*/		if ( 1 ) { regs.LR = 0x8220E87C; return (uint32)regs.CTR; }
		/* 8220E878h case   11:*/		return 0x8220E87C;
		  /* 8220E87Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8220E87Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E87Ch case   12:*/		return 0x8220E880;
		  /* 8220E880h */ case   13:  		/* bc 12, CR0_EQ, 28 */
		/* 8220E880h case   13:*/		if ( regs.CR[0].eq ) { return 0x8220E89C;  }
		/* 8220E880h case   13:*/		return 0x8220E884;
		  /* 8220E884h */ case   14:  		/* mr R6, R27 */
		/* 8220E884h case   14:*/		regs.R6 = regs.R27;
		/* 8220E884h case   14:*/		return 0x8220E888;
		  /* 8220E888h */ case   15:  		/* mr R5, R29 */
		/* 8220E888h case   15:*/		regs.R5 = regs.R29;
		/* 8220E888h case   15:*/		return 0x8220E88C;
		  /* 8220E88Ch */ case   16:  		/* mr R4, R28 */
		/* 8220E88Ch case   16:*/		regs.R4 = regs.R28;
		/* 8220E88Ch case   16:*/		return 0x8220E890;
		  /* 8220E890h */ case   17:  		/* li R7, 299 */
		/* 8220E890h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x12B);
		/* 8220E890h case   17:*/		return 0x8220E894;
		  /* 8220E894h */ case   18:  		/* li R3, 0 */
		/* 8220E894h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E894h case   18:*/		return 0x8220E898;
		  /* 8220E898h */ case   19:  		/* bl -748688 */
		/* 8220E898h case   19:*/		regs.LR = 0x8220E89C; return 0x82157C08;
		/* 8220E898h case   19:*/		return 0x8220E89C;
	}
	return 0x8220E89C;
} // Block from 8220E84Ch-8220E89Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220E89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E89C);
		  /* 8220E89Ch */ case    0:  		/* lwz R4, <#[R30 + 336]> */
		/* 8220E89Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000150) );
		/* 8220E89Ch case    0:*/		return 0x8220E8A0;
		  /* 8220E8A0h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8220E8A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8220E8A0h case    1:*/		return 0x8220E8A4;
		  /* 8220E8A4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8220E8A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220E8D8;  }
		/* 8220E8A4h case    2:*/		return 0x8220E8A8;
		  /* 8220E8A8h */ case    3:  		/* lwz R11, <#[R31 + 496]> */
		/* 8220E8A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000001F0) );
		/* 8220E8A8h case    3:*/		return 0x8220E8AC;
		  /* 8220E8ACh */ case    4:  		/* lwz R3, <#[R31 + 488]> */
		/* 8220E8ACh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000001E8) );
		/* 8220E8ACh case    4:*/		return 0x8220E8B0;
		  /* 8220E8B0h */ case    5:  		/* mtspr CTR, R11 */
		/* 8220E8B0h case    5:*/		regs.CTR = regs.R11;
		/* 8220E8B0h case    5:*/		return 0x8220E8B4;
		  /* 8220E8B4h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8220E8B4h case    6:*/		if ( 1 ) { regs.LR = 0x8220E8B8; return (uint32)regs.CTR; }
		/* 8220E8B4h case    6:*/		return 0x8220E8B8;
		  /* 8220E8B8h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8220E8B8h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8220E8B8h case    7:*/		return 0x8220E8BC;
		  /* 8220E8BCh */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 8220E8BCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8220E8D8;  }
		/* 8220E8BCh case    8:*/		return 0x8220E8C0;
		  /* 8220E8C0h */ case    9:  		/* mr R6, R27 */
		/* 8220E8C0h case    9:*/		regs.R6 = regs.R27;
		/* 8220E8C0h case    9:*/		return 0x8220E8C4;
		  /* 8220E8C4h */ case   10:  		/* mr R5, R29 */
		/* 8220E8C4h case   10:*/		regs.R5 = regs.R29;
		/* 8220E8C4h case   10:*/		return 0x8220E8C8;
		  /* 8220E8C8h */ case   11:  		/* mr R4, R28 */
		/* 8220E8C8h case   11:*/		regs.R4 = regs.R28;
		/* 8220E8C8h case   11:*/		return 0x8220E8CC;
		  /* 8220E8CCh */ case   12:  		/* li R7, 308 */
		/* 8220E8CCh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x134);
		/* 8220E8CCh case   12:*/		return 0x8220E8D0;
	}
	return 0x8220E8D0;
} // Block from 8220E89Ch-8220E8D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220E8D0h
// Function '?PS_Release@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PS_PROGRAM_STORE@1@PAU_PS_PROGRAM_KEY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E8D0);
		  /* 8220E8D0h */ case    0:  		/* li R3, 0 */
		/* 8220E8D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E8D0h case    0:*/		return 0x8220E8D4;
		  /* 8220E8D4h */ case    1:  		/* bl -748748 */
		/* 8220E8D4h case    1:*/		regs.LR = 0x8220E8D8; return 0x82157C08;
		/* 8220E8D4h case    1:*/		return 0x8220E8D8;
	}
	return 0x8220E8D8;
} // Block from 8220E8D0h-8220E8D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220E8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E8D8);
		  /* 8220E8D8h */ case    0:  		/* li R5, 44 */
		/* 8220E8D8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2C);
		/* 8220E8D8h case    0:*/		return 0x8220E8DC;
		  /* 8220E8DCh */ case    1:  		/* li R4, 0 */
		/* 8220E8DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8220E8DCh case    1:*/		return 0x8220E8E0;
		  /* 8220E8E0h */ case    2:  		/* addi R3, R30, 296 */
		/* 8220E8E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x128);
		/* 8220E8E0h case    2:*/		return 0x8220E8E4;
		  /* 8220E8E4h */ case    3:  		/* bl -1562020 */
		/* 8220E8E4h case    3:*/		regs.LR = 0x8220E8E8; return 0x82091340;
		/* 8220E8E4h case    3:*/		return 0x8220E8E8;
		  /* 8220E8E8h */ case    4:  		/* li R3, 0 */
		/* 8220E8E8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E8E8h case    4:*/		return 0x8220E8EC;
	}
	return 0x8220E8EC;
} // Block from 8220E8D8h-8220E8ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220E8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E8EC);
		  /* 8220E8ECh */ case    0:  		/* addi R1, R1, 128 */
		/* 8220E8ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220E8ECh case    0:*/		return 0x8220E8F0;
		  /* 8220E8F0h */ case    1:  		/* b -1562188 */
		/* 8220E8F0h case    1:*/		return 0x820912A4;
		/* 8220E8F0h case    1:*/		return 0x8220E8F4;
		  /* 8220E8F4h */ case    2:  		/* nop */
		/* 8220E8F4h case    2:*/		cpu::op::nop();
		/* 8220E8F4h case    2:*/		return 0x8220E8F8;
	}
	return 0x8220E8F8;
} // Block from 8220E8ECh-8220E8F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220E8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E8F8);
		  /* 8220E8F8h */ case    0:  		/* mfspr R12, LR */
		/* 8220E8F8h case    0:*/		regs.R12 = regs.LR;
		/* 8220E8F8h case    0:*/		return 0x8220E8FC;
		  /* 8220E8FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220E8FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220E8FCh case    1:*/		return 0x8220E900;
		  /* 8220E900h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8220E900h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220E900h case    2:*/		return 0x8220E904;
		  /* 8220E904h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8220E904h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220E904h case    3:*/		return 0x8220E908;
		  /* 8220E908h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220E908h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220E908h case    4:*/		return 0x8220E90C;
		  /* 8220E90Ch */ case    5:  		/* lwz R11, <#[R3 + 68]> */
		/* 8220E90Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000044) );
		/* 8220E90Ch case    5:*/		return 0x8220E910;
		  /* 8220E910h */ case    6:  		/* mr R31, R3 */
		/* 8220E910h case    6:*/		regs.R31 = regs.R3;
		/* 8220E910h case    6:*/		return 0x8220E914;
		  /* 8220E914h */ case    7:  		/* mr R30, R4 */
		/* 8220E914h case    7:*/		regs.R30 = regs.R4;
		/* 8220E914h case    7:*/		return 0x8220E918;
		  /* 8220E918h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 8220E918h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8220E918h case    8:*/		return 0x8220E91C;
		  /* 8220E91Ch */ case    9:  		/* bc 12, CR6_LT, 40 */
		/* 8220E91Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8220E944;  }
		/* 8220E91Ch case    9:*/		return 0x8220E920;
		  /* 8220E920h */ case   10:  		/* lis R11, -32253 */
		/* 8220E920h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220E920h case   10:*/		return 0x8220E924;
		  /* 8220E924h */ case   11:  		/* lis R10, -32253 */
		/* 8220E924h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220E924h case   11:*/		return 0x8220E928;
		  /* 8220E928h */ case   12:  		/* lis R9, -32253 */
		/* 8220E928h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220E928h case   12:*/		return 0x8220E92C;
		  /* 8220E92Ch */ case   13:  		/* addi R6, R11, 27808 */
		/* 8220E92Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6CA0);
		/* 8220E92Ch case   13:*/		return 0x8220E930;
		  /* 8220E930h */ case   14:  		/* addi R5, R10, 27736 */
		/* 8220E930h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C58);
		/* 8220E930h case   14:*/		return 0x8220E934;
		  /* 8220E934h */ case   15:  		/* addi R4, R9, 27460 */
		/* 8220E934h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220E934h case   15:*/		return 0x8220E938;
		  /* 8220E938h */ case   16:  		/* li R7, 338 */
		/* 8220E938h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x152);
		/* 8220E938h case   16:*/		return 0x8220E93C;
		  /* 8220E93Ch */ case   17:  		/* li R3, 0 */
		/* 8220E93Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220E93Ch case   17:*/		return 0x8220E940;
		  /* 8220E940h */ case   18:  		/* bl -748856 */
		/* 8220E940h case   18:*/		regs.LR = 0x8220E944; return 0x82157C08;
		/* 8220E940h case   18:*/		return 0x8220E944;
	}
	return 0x8220E944;
} // Block from 8220E8F8h-8220E944h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220E944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E944);
		  /* 8220E944h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220E944h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220E944h case    0:*/		return 0x8220E948;
		  /* 8220E948h */ case    1:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8220E948h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8220E948h case    1:*/		return 0x8220E94C;
		  /* 8220E94Ch */ case    2:  		/* lfsx FR1, <#[R11 + R10]> */
		/* 8220E94Ch case    2:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220E94Ch case    2:*/		return 0x8220E950;
		  /* 8220E950h */ case    3:  		/* addi R1, R1, 112 */
		/* 8220E950h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220E950h case    3:*/		return 0x8220E954;
		  /* 8220E954h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220E954h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220E954h case    4:*/		return 0x8220E958;
		  /* 8220E958h */ case    5:  		/* mtspr LR, R12 */
		/* 8220E958h case    5:*/		regs.LR = regs.R12;
		/* 8220E958h case    5:*/		return 0x8220E95C;
		  /* 8220E95Ch */ case    6:  		/* ld R30, <#[R1 - 24]> */
		/* 8220E95Ch case    6:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220E95Ch case    6:*/		return 0x8220E960;
		  /* 8220E960h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 8220E960h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220E960h case    7:*/		return 0x8220E964;
		  /* 8220E964h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8220E964h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220E964h case    8:*/		return 0x8220E968;
	}
	return 0x8220E968;
} // Block from 8220E944h-8220E968h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220E968h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E968);
		  /* 8220E968h */ case    0:  		/* mfspr R12, LR */
		/* 8220E968h case    0:*/		regs.R12 = regs.LR;
		/* 8220E968h case    0:*/		return 0x8220E96C;
		  /* 8220E96Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220E96Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220E96Ch case    1:*/		return 0x8220E970;
		  /* 8220E970h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8220E970h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220E970h case    2:*/		return 0x8220E974;
		  /* 8220E974h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8220E974h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220E974h case    3:*/		return 0x8220E978;
		  /* 8220E978h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220E978h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220E978h case    4:*/		return 0x8220E97C;
		  /* 8220E97Ch */ case    5:  		/* mr R30, R3 */
		/* 8220E97Ch case    5:*/		regs.R30 = regs.R3;
		/* 8220E97Ch case    5:*/		return 0x8220E980;
		  /* 8220E980h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8220E980h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220E980h case    6:*/		return 0x8220E984;
		  /* 8220E984h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 8220E984h case    7:*/		if ( regs.CR[6].eq ) { return 0x8220E9B8;  }
		/* 8220E984h case    7:*/		return 0x8220E988;
		  /* 8220E988h */ case    8:  		/* li R31, 0 */
		/* 8220E988h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220E988h case    8:*/		return 0x8220E98C;
		  /* 8220E98Ch */ case    9:  		/* mr R4, R31 */
		/* 8220E98Ch case    9:*/		regs.R4 = regs.R31;
		/* 8220E98Ch case    9:*/		return 0x8220E990;
		  /* 8220E990h */ case   10:  		/* mr R3, R30 */
		/* 8220E990h case   10:*/		regs.R3 = regs.R30;
		/* 8220E990h case   10:*/		return 0x8220E994;
		  /* 8220E994h */ case   11:  		/* bl -444 */
		/* 8220E994h case   11:*/		regs.LR = 0x8220E998; return 0x8220E7D8;
		/* 8220E994h case   11:*/		return 0x8220E998;
		  /* 8220E998h */ case   12:  		/* addi R31, R31, 1 */
		/* 8220E998h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8220E998h case   12:*/		return 0x8220E99C;
		  /* 8220E99Ch */ case   13:  		/* cmplwi CR6, R31, 4 */
		/* 8220E99Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8220E99Ch case   13:*/		return 0x8220E9A0;
		  /* 8220E9A0h */ case   14:  		/* bc 12, CR6_LT, -20 */
		/* 8220E9A0h case   14:*/		if ( regs.CR[6].lt ) { return 0x8220E98C;  }
		/* 8220E9A0h case   14:*/		return 0x8220E9A4;
		  /* 8220E9A4h */ case   15:  		/* lwz R11, <#[R30 + 496]> */
		/* 8220E9A4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000001F0) );
		/* 8220E9A4h case   15:*/		return 0x8220E9A8;
		  /* 8220E9A8h */ case   16:  		/* mr R4, R30 */
		/* 8220E9A8h case   16:*/		regs.R4 = regs.R30;
		/* 8220E9A8h case   16:*/		return 0x8220E9AC;
		  /* 8220E9ACh */ case   17:  		/* lwz R3, <#[R30 + 488]> */
		/* 8220E9ACh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000001E8) );
		/* 8220E9ACh case   17:*/		return 0x8220E9B0;
		  /* 8220E9B0h */ case   18:  		/* mtspr CTR, R11 */
		/* 8220E9B0h case   18:*/		regs.CTR = regs.R11;
		/* 8220E9B0h case   18:*/		return 0x8220E9B4;
		  /* 8220E9B4h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8220E9B4h case   19:*/		if ( 1 ) { regs.LR = 0x8220E9B8; return (uint32)regs.CTR; }
		/* 8220E9B4h case   19:*/		return 0x8220E9B8;
	}
	return 0x8220E9B8;
} // Block from 8220E968h-8220E9B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220E9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E9B8);
		  /* 8220E9B8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8220E9B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220E9B8h case    0:*/		return 0x8220E9BC;
		  /* 8220E9BCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220E9BCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220E9BCh case    1:*/		return 0x8220E9C0;
		  /* 8220E9C0h */ case    2:  		/* mtspr LR, R12 */
		/* 8220E9C0h case    2:*/		regs.LR = regs.R12;
		/* 8220E9C0h case    2:*/		return 0x8220E9C4;
		  /* 8220E9C4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8220E9C4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8220E9C4h case    3:*/		return 0x8220E9C8;
		  /* 8220E9C8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8220E9C8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220E9C8h case    4:*/		return 0x8220E9CC;
		  /* 8220E9CCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8220E9CCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220E9CCh case    5:*/		return 0x8220E9D0;
	}
	return 0x8220E9D0;
} // Block from 8220E9B8h-8220E9D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220E9D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220E9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220E9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220E9D0);
		  /* 8220E9D0h */ case    0:  		/* mfspr R12, LR */
		/* 8220E9D0h case    0:*/		regs.R12 = regs.LR;
		/* 8220E9D0h case    0:*/		return 0x8220E9D4;
		  /* 8220E9D4h */ case    1:  		/* bl -1562508 */
		/* 8220E9D4h case    1:*/		regs.LR = 0x8220E9D8; return 0x82091248;
		/* 8220E9D4h case    1:*/		return 0x8220E9D8;
		  /* 8220E9D8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220E9D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220E9D8h case    2:*/		return 0x8220E9DC;
		  /* 8220E9DCh */ case    3:  		/* mr R29, R4 */
		/* 8220E9DCh case    3:*/		regs.R29 = regs.R4;
		/* 8220E9DCh case    3:*/		return 0x8220E9E0;
		  /* 8220E9E0h */ case    4:  		/* li R4, 24 */
		/* 8220E9E0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220E9E0h case    4:*/		return 0x8220E9E4;
		  /* 8220E9E4h */ case    5:  		/* mr R30, R3 */
		/* 8220E9E4h case    5:*/		regs.R30 = regs.R3;
		/* 8220E9E4h case    5:*/		return 0x8220E9E8;
		  /* 8220E9E8h */ case    6:  		/* mr R27, R5 */
		/* 8220E9E8h case    6:*/		regs.R27 = regs.R5;
		/* 8220E9E8h case    6:*/		return 0x8220E9EC;
		  /* 8220E9ECh */ case    7:  		/* mr R26, R6 */
		/* 8220E9ECh case    7:*/		regs.R26 = regs.R6;
		/* 8220E9ECh case    7:*/		return 0x8220E9F0;
		  /* 8220E9F0h */ case    8:  		/* mr R28, R7 */
		/* 8220E9F0h case    8:*/		regs.R28 = regs.R7;
		/* 8220E9F0h case    8:*/		return 0x8220E9F4;
		  /* 8220E9F4h */ case    9:  		/* mtspr CTR, R29 */
		/* 8220E9F4h case    9:*/		regs.CTR = regs.R29;
		/* 8220E9F4h case    9:*/		return 0x8220E9F8;
		  /* 8220E9F8h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8220E9F8h case   10:*/		if ( 1 ) { regs.LR = 0x8220E9FC; return (uint32)regs.CTR; }
		/* 8220E9F8h case   10:*/		return 0x8220E9FC;
		  /* 8220E9FCh */ case   11:  		/* lis R10, -32253 */
		/* 8220E9FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220E9FCh case   11:*/		return 0x8220EA00;
		  /* 8220EA00h */ case   12:  		/* lis R11, -32252 */
		/* 8220EA00h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EA00h case   12:*/		return 0x8220EA04;
		  /* 8220EA04h */ case   13:  		/* or. R31, R3, R3 */
		/* 8220EA04h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220EA04h case   13:*/		return 0x8220EA08;
		  /* 8220EA08h */ case   14:  		/* addi R25, R10, 27460 */
		/* 8220EA08h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0x6B44);
		/* 8220EA08h case   14:*/		return 0x8220EA0C;
		  /* 8220EA0Ch */ case   15:  		/* addi R24, R11, -7496 */
		/* 8220EA0Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFE2B8);
		/* 8220EA0Ch case   15:*/		return 0x8220EA10;
		  /* 8220EA10h */ case   16:  		/* bc 4, CR0_EQ, 32 */
		/* 8220EA10h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8220EA30;  }
		/* 8220EA10h case   16:*/		return 0x8220EA14;
		  /* 8220EA14h */ case   17:  		/* lis R11, -32252 */
		/* 8220EA14h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EA14h case   17:*/		return 0x8220EA18;
		  /* 8220EA18h */ case   18:  		/* mr R6, R24 */
		/* 8220EA18h case   18:*/		regs.R6 = regs.R24;
		/* 8220EA18h case   18:*/		return 0x8220EA1C;
		  /* 8220EA1Ch */ case   19:  		/* addi R5, R11, -7508 */
		/* 8220EA1Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE2AC);
		/* 8220EA1Ch case   19:*/		return 0x8220EA20;
		  /* 8220EA20h */ case   20:  		/* mr R4, R25 */
		/* 8220EA20h case   20:*/		regs.R4 = regs.R25;
		/* 8220EA20h case   20:*/		return 0x8220EA24;
		  /* 8220EA24h */ case   21:  		/* li R7, 94 */
		/* 8220EA24h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x5E);
		/* 8220EA24h case   21:*/		return 0x8220EA28;
		  /* 8220EA28h */ case   22:  		/* li R3, 0 */
		/* 8220EA28h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EA28h case   22:*/		return 0x8220EA2C;
		  /* 8220EA2Ch */ case   23:  		/* bl -749092 */
		/* 8220EA2Ch case   23:*/		regs.LR = 0x8220EA30; return 0x82157C08;
		/* 8220EA2Ch case   23:*/		return 0x8220EA30;
	}
	return 0x8220EA30;
} // Block from 8220E9D0h-8220EA30h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8220EA30h
// Function '?AllocVidMem@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PS_PROGRAM_STORE@1@IPAU_SSM_VIDMEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EA30);
		  /* 8220EA30h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8220EA30h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EA30h case    0:*/		return 0x8220EA34;
		  /* 8220EA34h */ case    1:  		/* rlwinm R4, R28, 2, 0, 29 */
		/* 8220EA34h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R28);
		/* 8220EA34h case    1:*/		return 0x8220EA38;
		  /* 8220EA38h */ case    2:  		/* stw R29, <#[R31 + 8]> */
		/* 8220EA38h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 8220EA38h case    2:*/		return 0x8220EA3C;
		  /* 8220EA3Ch */ case    3:  		/* mr R3, R30 */
		/* 8220EA3Ch case    3:*/		regs.R3 = regs.R30;
		/* 8220EA3Ch case    3:*/		return 0x8220EA40;
		  /* 8220EA40h */ case    4:  		/* stw R27, <#[R31 + 12]> */
		/* 8220EA40h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EA40h case    4:*/		return 0x8220EA44;
		  /* 8220EA44h */ case    5:  		/* mtspr CTR, R29 */
		/* 8220EA44h case    5:*/		regs.CTR = regs.R29;
		/* 8220EA44h case    5:*/		return 0x8220EA48;
		  /* 8220EA48h */ case    6:  		/* stw R26, <#[R31 + 16]> */
		/* 8220EA48h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 8220EA48h case    6:*/		return 0x8220EA4C;
		  /* 8220EA4Ch */ case    7:  		/* stw R28, <#[R31 + 20]> */
		/* 8220EA4Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EA4Ch case    7:*/		return 0x8220EA50;
		  /* 8220EA50h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8220EA50h case    8:*/		if ( 1 ) { regs.LR = 0x8220EA54; return (uint32)regs.CTR; }
		/* 8220EA50h case    8:*/		return 0x8220EA54;
		  /* 8220EA54h */ case    9:  		/* stw R3, <#[R31]> */
		/* 8220EA54h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EA54h case    9:*/		return 0x8220EA58;
		  /* 8220EA58h */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 8220EA58h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220EA58h case   10:*/		return 0x8220EA5C;
		  /* 8220EA5Ch */ case   11:  		/* bc 12, CR6_EQ, 84 */
		/* 8220EA5Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8220EAB0;  }
		/* 8220EA5Ch case   11:*/		return 0x8220EA60;
		  /* 8220EA60h */ case   12:  		/* lis R11, -32252 */
		/* 8220EA60h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EA60h case   12:*/		return 0x8220EA64;
		  /* 8220EA64h */ case   13:  		/* li R30, 0 */
		/* 8220EA64h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220EA64h case   13:*/		return 0x8220EA68;
		  /* 8220EA68h */ case   14:  		/* addi R29, R11, -7536 */
		/* 8220EA68h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFE290);
		/* 8220EA68h case   14:*/		return 0x8220EA6C;
		  /* 8220EA6Ch */ case   15:  		/* mr R3, R26 */
		/* 8220EA6Ch case   15:*/		regs.R3 = regs.R26;
		/* 8220EA6Ch case   15:*/		return 0x8220EA70;
		  /* 8220EA70h */ case   16:  		/* bl -12136 */
		/* 8220EA70h case   16:*/		regs.LR = 0x8220EA74; return 0x8220BB08;
		/* 8220EA70h case   16:*/		return 0x8220EA74;
		  /* 8220EA74h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8220EA74h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EA74h case   17:*/		return 0x8220EA78;
		  /* 8220EA78h */ case   18:  		/* stwx R3, <#[R11 + R30]> */
		/* 8220EA78h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8220EA78h case   18:*/		return 0x8220EA7C;
		  /* 8220EA7Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 8220EA7Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EA7Ch case   19:*/		return 0x8220EA80;
		  /* 8220EA80h */ case   20:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8220EA80h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8220EA80h case   20:*/		return 0x8220EA84;
		  /* 8220EA84h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 8220EA84h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220EA84h case   21:*/		return 0x8220EA88;
		  /* 8220EA88h */ case   22:  		/* bc 4, CR6_EQ, 28 */
		/* 8220EA88h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8220EAA4;  }
		/* 8220EA88h case   22:*/		return 0x8220EA8C;
		  /* 8220EA8Ch */ case   23:  		/* mr R6, R24 */
		/* 8220EA8Ch case   23:*/		regs.R6 = regs.R24;
		/* 8220EA8Ch case   23:*/		return 0x8220EA90;
		  /* 8220EA90h */ case   24:  		/* mr R5, R29 */
		/* 8220EA90h case   24:*/		regs.R5 = regs.R29;
		/* 8220EA90h case   24:*/		return 0x8220EA94;
		  /* 8220EA94h */ case   25:  		/* mr R4, R25 */
		/* 8220EA94h case   25:*/		regs.R4 = regs.R25;
		/* 8220EA94h case   25:*/		return 0x8220EA98;
		  /* 8220EA98h */ case   26:  		/* li R7, 110 */
		/* 8220EA98h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x6E);
		/* 8220EA98h case   26:*/		return 0x8220EA9C;
		  /* 8220EA9Ch */ case   27:  		/* li R3, 0 */
		/* 8220EA9Ch case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EA9Ch case   27:*/		return 0x8220EAA0;
		  /* 8220EAA0h */ case   28:  		/* bl -749208 */
		/* 8220EAA0h case   28:*/		regs.LR = 0x8220EAA4; return 0x82157C08;
		/* 8220EAA0h case   28:*/		return 0x8220EAA4;
	}
	return 0x8220EAA4;
} // Block from 8220EA30h-8220EAA4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8220EAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EAA4);
		  /* 8220EAA4h */ case    0:  		/* addic. R28, R28, -1 */
		/* 8220EAA4h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8220EAA4h case    0:*/		return 0x8220EAA8;
		  /* 8220EAA8h */ case    1:  		/* addi R30, R30, 4 */
		/* 8220EAA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220EAA8h case    1:*/		return 0x8220EAAC;
		  /* 8220EAACh */ case    2:  		/* bc 4, CR0_EQ, -64 */
		/* 8220EAACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220EA6C;  }
		/* 8220EAACh case    2:*/		return 0x8220EAB0;
	}
	return 0x8220EAB0;
} // Block from 8220EAA4h-8220EAB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220EAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EAB0);
		  /* 8220EAB0h */ case    0:  		/* mr R3, R31 */
		/* 8220EAB0h case    0:*/		regs.R3 = regs.R31;
		/* 8220EAB0h case    0:*/		return 0x8220EAB4;
		  /* 8220EAB4h */ case    1:  		/* addi R1, R1, 160 */
		/* 8220EAB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220EAB4h case    1:*/		return 0x8220EAB8;
		  /* 8220EAB8h */ case    2:  		/* b -1562656 */
		/* 8220EAB8h case    2:*/		return 0x82091298;
		/* 8220EAB8h case    2:*/		return 0x8220EABC;
		  /* 8220EABCh */ case    3:  		/* nop */
		/* 8220EABCh case    3:*/		cpu::op::nop();
		/* 8220EABCh case    3:*/		return 0x8220EAC0;
	}
	return 0x8220EAC0;
} // Block from 8220EAB0h-8220EAC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220EAC0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EAC0);
		  /* 8220EAC0h */ case    0:  		/* mfspr R12, LR */
		/* 8220EAC0h case    0:*/		regs.R12 = regs.LR;
		/* 8220EAC0h case    0:*/		return 0x8220EAC4;
		  /* 8220EAC4h */ case    1:  		/* bl -1562728 */
		/* 8220EAC4h case    1:*/		regs.LR = 0x8220EAC8; return 0x8209125C;
		/* 8220EAC4h case    1:*/		return 0x8220EAC8;
		  /* 8220EAC8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220EAC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220EAC8h case    2:*/		return 0x8220EACC;
		  /* 8220EACCh */ case    3:  		/* mr R31, R3 */
		/* 8220EACCh case    3:*/		regs.R31 = regs.R3;
		/* 8220EACCh case    3:*/		return 0x8220EAD0;
		  /* 8220EAD0h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220EAD0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220EAD0h case    4:*/		return 0x8220EAD4;
		  /* 8220EAD4h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8220EAD4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220EAF8;  }
		/* 8220EAD4h case    5:*/		return 0x8220EAD8;
		  /* 8220EAD8h */ case    6:  		/* lis R11, -32252 */
		/* 8220EAD8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EAD8h case    6:*/		return 0x8220EADC;
		  /* 8220EADCh */ case    7:  		/* lis R10, -32252 */
		/* 8220EADCh case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EADCh case    7:*/		return 0x8220EAE0;
		  /* 8220EAE0h */ case    8:  		/* lis R9, -32253 */
		/* 8220EAE0h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220EAE0h case    8:*/		return 0x8220EAE4;
		  /* 8220EAE4h */ case    9:  		/* addi R6, R11, -7496 */
		/* 8220EAE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE2B8);
		/* 8220EAE4h case    9:*/		return 0x8220EAE8;
		  /* 8220EAE8h */ case   10:  		/* addi R5, R10, -7508 */
		/* 8220EAE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE2AC);
		/* 8220EAE8h case   10:*/		return 0x8220EAEC;
		  /* 8220EAECh */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220EAECh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220EAECh case   11:*/		return 0x8220EAF0;
	}
	return 0x8220EAF0;
} // Block from 8220EAC0h-8220EAF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220EAF0h
// Function '?PS_UpdateProgKeyTS@XGRAPHICS@@YAXPAU_PS_PROGRAM_KEY@1@PA_K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EAF0);
		  /* 8220EAF0h */ case    0:  		/* li R7, 141 */
		/* 8220EAF0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x8D);
		/* 8220EAF0h case    0:*/		return 0x8220EAF4;
		  /* 8220EAF4h */ case    1:  		/* bl -749292 */
		/* 8220EAF4h case    1:*/		regs.LR = 0x8220EAF8; return 0x82157C08;
		/* 8220EAF4h case    1:*/		return 0x8220EAF8;
	}
	return 0x8220EAF8;
} // Block from 8220EAF0h-8220EAF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220EAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EAF8);
		  /* 8220EAF8h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EAF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EAF8h case    0:*/		return 0x8220EAFC;
		  /* 8220EAFCh */ case    1:  		/* li R29, 0 */
		/* 8220EAFCh case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8220EAFCh case    1:*/		return 0x8220EB00;
		  /* 8220EB00h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8220EB00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220EB00h case    2:*/		return 0x8220EB04;
		  /* 8220EB04h */ case    3:  		/* bc 4, CR6_GT, 44 */
		/* 8220EB04h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8220EB30;  }
		/* 8220EB04h case    3:*/		return 0x8220EB08;
		  /* 8220EB08h */ case    4:  		/* li R30, 0 */
		/* 8220EB08h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220EB08h case    4:*/		return 0x8220EB0C;
		  /* 8220EB0Ch */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8220EB0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EB0Ch case    5:*/		return 0x8220EB10;
		  /* 8220EB10h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220EB10h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220EB10h case    6:*/		return 0x8220EB14;
		  /* 8220EB14h */ case    7:  		/* lwzx R4, <#[R30 + R11]> */
		/* 8220EB14h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8220EB14h case    7:*/		return 0x8220EB18;
		  /* 8220EB18h */ case    8:  		/* bl -12136 */
		/* 8220EB18h case    8:*/		regs.LR = 0x8220EB1C; return 0x8220BBB0;
		/* 8220EB18h case    8:*/		return 0x8220EB1C;
		  /* 8220EB1Ch */ case    9:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EB1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EB1Ch case    9:*/		return 0x8220EB20;
	}
	return 0x8220EB20;
} // Block from 8220EAF8h-8220EB20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220EB20h
// Function '?PS_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_PS_PROGRAM_STORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EB20);
		  /* 8220EB20h */ case    0:  		/* addi R29, R29, 1 */
		/* 8220EB20h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8220EB20h case    0:*/		return 0x8220EB24;
		  /* 8220EB24h */ case    1:  		/* addi R30, R30, 4 */
		/* 8220EB24h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220EB24h case    1:*/		return 0x8220EB28;
		  /* 8220EB28h */ case    2:  		/* cmplw CR6, R29, R11 */
		/* 8220EB28h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8220EB28h case    2:*/		return 0x8220EB2C;
		  /* 8220EB2Ch */ case    3:  		/* bc 12, CR6_LT, -32 */
		/* 8220EB2Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8220EB0C;  }
		/* 8220EB2Ch case    3:*/		return 0x8220EB30;
	}
	return 0x8220EB30;
} // Block from 8220EB20h-8220EB30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220EB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EB30);
		  /* 8220EB30h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220EB30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EB30h case    0:*/		return 0x8220EB34;
		  /* 8220EB34h */ case    1:  		/* lwz R4, <#[R31]> */
		/* 8220EB34h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EB34h case    1:*/		return 0x8220EB38;
		  /* 8220EB38h */ case    2:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220EB38h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EB38h case    2:*/		return 0x8220EB3C;
		  /* 8220EB3Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8220EB3Ch case    3:*/		regs.CTR = regs.R11;
		/* 8220EB3Ch case    3:*/		return 0x8220EB40;
		  /* 8220EB40h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220EB40h case    4:*/		if ( 1 ) { regs.LR = 0x8220EB44; return (uint32)regs.CTR; }
		/* 8220EB40h case    4:*/		return 0x8220EB44;
		  /* 8220EB44h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220EB44h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EB44h case    5:*/		return 0x8220EB48;
		  /* 8220EB48h */ case    6:  		/* mr R4, R31 */
		/* 8220EB48h case    6:*/		regs.R4 = regs.R31;
		/* 8220EB48h case    6:*/		return 0x8220EB4C;
		  /* 8220EB4Ch */ case    7:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220EB4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EB4Ch case    7:*/		return 0x8220EB50;
		  /* 8220EB50h */ case    8:  		/* mtspr CTR, R11 */
		/* 8220EB50h case    8:*/		regs.CTR = regs.R11;
		/* 8220EB50h case    8:*/		return 0x8220EB54;
		  /* 8220EB54h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8220EB54h case    9:*/		if ( 1 ) { regs.LR = 0x8220EB58; return (uint32)regs.CTR; }
		/* 8220EB54h case    9:*/		return 0x8220EB58;
		  /* 8220EB58h */ case   10:  		/* addi R1, R1, 112 */
		/* 8220EB58h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220EB58h case   10:*/		return 0x8220EB5C;
		  /* 8220EB5Ch */ case   11:  		/* b -1562800 */
		/* 8220EB5Ch case   11:*/		return 0x820912AC;
		/* 8220EB5Ch case   11:*/		return 0x8220EB60;
	}
	return 0x8220EB60;
} // Block from 8220EB30h-8220EB60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220EB60h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EB60);
		  /* 8220EB60h */ case    0:  		/* mfspr R12, LR */
		/* 8220EB60h case    0:*/		regs.R12 = regs.LR;
		/* 8220EB60h case    0:*/		return 0x8220EB64;
		  /* 8220EB64h */ case    1:  		/* bl -1562896 */
		/* 8220EB64h case    1:*/		regs.LR = 0x8220EB68; return 0x82091254;
		/* 8220EB64h case    1:*/		return 0x8220EB68;
		  /* 8220EB68h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220EB68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220EB68h case    2:*/		return 0x8220EB6C;
		  /* 8220EB6Ch */ case    3:  		/* lis R11, -32253 */
		/* 8220EB6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220EB6Ch case    3:*/		return 0x8220EB70;
		  /* 8220EB70h */ case    4:  		/* lis R10, -32252 */
		/* 8220EB70h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EB70h case    4:*/		return 0x8220EB74;
		  /* 8220EB74h */ case    5:  		/* mr R31, R3 */
		/* 8220EB74h case    5:*/		regs.R31 = regs.R3;
		/* 8220EB74h case    5:*/		return 0x8220EB78;
		  /* 8220EB78h */ case    6:  		/* mr R30, R4 */
		/* 8220EB78h case    6:*/		regs.R30 = regs.R4;
		/* 8220EB78h case    6:*/		return 0x8220EB7C;
		  /* 8220EB7Ch */ case    7:  		/* mr R27, R5 */
		/* 8220EB7Ch case    7:*/		regs.R27 = regs.R5;
		/* 8220EB7Ch case    7:*/		return 0x8220EB80;
		  /* 8220EB80h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220EB80h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220EB80h case    8:*/		return 0x8220EB84;
		  /* 8220EB84h */ case    9:  		/* addi R29, R11, 27460 */
		/* 8220EB84h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220EB84h case    9:*/		return 0x8220EB88;
		  /* 8220EB88h */ case   10:  		/* addi R28, R10, -7496 */
		/* 8220EB88h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFE2B8);
		/* 8220EB88h case   10:*/		return 0x8220EB8C;
		  /* 8220EB8Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EB8Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220EBAC;  }
		/* 8220EB8Ch case   11:*/		return 0x8220EB90;
		  /* 8220EB90h */ case   12:  		/* lis R11, -32252 */
		/* 8220EB90h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EB90h case   12:*/		return 0x8220EB94;
		  /* 8220EB94h */ case   13:  		/* mr R6, R28 */
		/* 8220EB94h case   13:*/		regs.R6 = regs.R28;
		/* 8220EB94h case   13:*/		return 0x8220EB98;
		  /* 8220EB98h */ case   14:  		/* addi R5, R11, -7508 */
		/* 8220EB98h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE2AC);
		/* 8220EB98h case   14:*/		return 0x8220EB9C;
		  /* 8220EB9Ch */ case   15:  		/* mr R4, R29 */
		/* 8220EB9Ch case   15:*/		regs.R4 = regs.R29;
		/* 8220EB9Ch case   15:*/		return 0x8220EBA0;
		  /* 8220EBA0h */ case   16:  		/* li R7, 182 */
		/* 8220EBA0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0xB6);
		/* 8220EBA0h case   16:*/		return 0x8220EBA4;
		  /* 8220EBA4h */ case   17:  		/* li R3, 0 */
		/* 8220EBA4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EBA4h case   17:*/		return 0x8220EBA8;
		  /* 8220EBA8h */ case   18:  		/* bl -749472 */
		/* 8220EBA8h case   18:*/		regs.LR = 0x8220EBAC; return 0x82157C08;
		/* 8220EBA8h case   18:*/		return 0x8220EBAC;
	}
	return 0x8220EBAC;
} // Block from 8220EB60h-8220EBACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220EBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EBAC);
		  /* 8220EBACh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EBACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EBACh case    0:*/		return 0x8220EBB0;
		  /* 8220EBB0h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 8220EBB0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EBB0h case    1:*/		return 0x8220EBB4;
		  /* 8220EBB4h */ case    2:  		/* divwu R9, R30, R11 */
		/* 8220EBB4h case    2:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R30,regs.R11);
		/* 8220EBB4h case    2:*/		return 0x8220EBB8;
		  /* 8220EBB8h */ case    3:  		/* twi 6, R11, 0 */
		/* 8220EBB8h case    3:*/		cpu::op::tw<6>(regs, 0x8220EBB8, regs.R11, 0x00000000);
		/* 8220EBB8h case    3:*/		return 0x8220EBBC;
		  /* 8220EBBCh */ case    4:  		/* mullw R11, R9, R11 */
		/* 8220EBBCh case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220EBBCh case    4:*/		return 0x8220EBC0;
		  /* 8220EBC0h */ case    5:  		/* subf R11, R11, R30 */
		/* 8220EBC0h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8220EBC0h case    5:*/		return 0x8220EBC4;
		  /* 8220EBC4h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220EBC4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220EBC4h case    6:*/		return 0x8220EBC8;
		  /* 8220EBC8h */ case    7:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8220EBC8h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220EBC8h case    7:*/		return 0x8220EBCC;
		  /* 8220EBCCh */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8220EBCCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220EBCCh case    8:*/		return 0x8220EBD0;
		  /* 8220EBD0h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EBD0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220EBF0;  }
		/* 8220EBD0h case    9:*/		return 0x8220EBD4;
		  /* 8220EBD4h */ case   10:  		/* lis R11, -32252 */
		/* 8220EBD4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EBD4h case   10:*/		return 0x8220EBD8;
		  /* 8220EBD8h */ case   11:  		/* mr R6, R28 */
		/* 8220EBD8h case   11:*/		regs.R6 = regs.R28;
		/* 8220EBD8h case   11:*/		return 0x8220EBDC;
		  /* 8220EBDCh */ case   12:  		/* addi R5, R11, -21472 */
		/* 8220EBDCh case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220EBDCh case   12:*/		return 0x8220EBE0;
		  /* 8220EBE0h */ case   13:  		/* mr R4, R29 */
		/* 8220EBE0h case   13:*/		regs.R4 = regs.R29;
		/* 8220EBE0h case   13:*/		return 0x8220EBE4;
		  /* 8220EBE4h */ case   14:  		/* li R7, 189 */
		/* 8220EBE4h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xBD);
		/* 8220EBE4h case   14:*/		return 0x8220EBE8;
		  /* 8220EBE8h */ case   15:  		/* li R3, 0 */
		/* 8220EBE8h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EBE8h case   15:*/		return 0x8220EBEC;
		  /* 8220EBECh */ case   16:  		/* bl -749540 */
		/* 8220EBECh case   16:*/		regs.LR = 0x8220EBF0; return 0x82157C08;
		/* 8220EBECh case   16:*/		return 0x8220EBF0;
	}
	return 0x8220EBF0;
} // Block from 8220EBACh-8220EBF0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220EBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EBF0);
		  /* 8220EBF0h */ case    0:  		/* mr R5, R27 */
		/* 8220EBF0h case    0:*/		regs.R5 = regs.R27;
		/* 8220EBF0h case    0:*/		return 0x8220EBF4;
		  /* 8220EBF4h */ case    1:  		/* mr R4, R30 */
		/* 8220EBF4h case    1:*/		regs.R4 = regs.R30;
		/* 8220EBF4h case    1:*/		return 0x8220EBF8;
		  /* 8220EBF8h */ case    2:  		/* mr R3, R31 */
		/* 8220EBF8h case    2:*/		regs.R3 = regs.R31;
		/* 8220EBF8h case    2:*/		return 0x8220EBFC;
		  /* 8220EBFCh */ case    3:  		/* bl -733420 */
		/* 8220EBFCh case    3:*/		regs.LR = 0x8220EC00; return 0x8215BB10;
		/* 8220EBFCh case    3:*/		return 0x8220EC00;
		  /* 8220EC00h */ case    4:  		/* addi R1, R1, 128 */
		/* 8220EC00h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220EC00h case    4:*/		return 0x8220EC04;
		  /* 8220EC04h */ case    5:  		/* b -1562976 */
		/* 8220EC04h case    5:*/		return 0x820912A4;
		/* 8220EC04h case    5:*/		return 0x8220EC08;
	}
	return 0x8220EC08;
} // Block from 8220EBF0h-8220EC08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220EC08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EC08);
		  /* 8220EC08h */ case    0:  		/* mfspr R12, LR */
		/* 8220EC08h case    0:*/		regs.R12 = regs.LR;
		/* 8220EC08h case    0:*/		return 0x8220EC0C;
		  /* 8220EC0Ch */ case    1:  		/* bl -1563064 */
		/* 8220EC0Ch case    1:*/		regs.LR = 0x8220EC10; return 0x82091254;
		/* 8220EC0Ch case    1:*/		return 0x8220EC10;
		  /* 8220EC10h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220EC10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220EC10h case    2:*/		return 0x8220EC14;
		  /* 8220EC14h */ case    3:  		/* lis R11, -32253 */
		/* 8220EC14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220EC14h case    3:*/		return 0x8220EC18;
		  /* 8220EC18h */ case    4:  		/* lis R10, -32252 */
		/* 8220EC18h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EC18h case    4:*/		return 0x8220EC1C;
		  /* 8220EC1Ch */ case    5:  		/* mr R31, R3 */
		/* 8220EC1Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220EC1Ch case    5:*/		return 0x8220EC20;
		  /* 8220EC20h */ case    6:  		/* mr R30, R4 */
		/* 8220EC20h case    6:*/		regs.R30 = regs.R4;
		/* 8220EC20h case    6:*/		return 0x8220EC24;
		  /* 8220EC24h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220EC24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220EC24h case    7:*/		return 0x8220EC28;
		  /* 8220EC28h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8220EC28h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220EC28h case    8:*/		return 0x8220EC2C;
		  /* 8220EC2Ch */ case    9:  		/* addi R27, R10, -7496 */
		/* 8220EC2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE2B8);
		/* 8220EC2Ch case    9:*/		return 0x8220EC30;
		  /* 8220EC30h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EC30h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220EC50;  }
		/* 8220EC30h case   10:*/		return 0x8220EC34;
		  /* 8220EC34h */ case   11:  		/* lis R11, -32252 */
		/* 8220EC34h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EC34h case   11:*/		return 0x8220EC38;
		  /* 8220EC38h */ case   12:  		/* mr R6, R27 */
		/* 8220EC38h case   12:*/		regs.R6 = regs.R27;
		/* 8220EC38h case   12:*/		return 0x8220EC3C;
		  /* 8220EC3Ch */ case   13:  		/* addi R5, R11, -7508 */
		/* 8220EC3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE2AC);
		/* 8220EC3Ch case   13:*/		return 0x8220EC40;
		  /* 8220EC40h */ case   14:  		/* mr R4, R28 */
		/* 8220EC40h case   14:*/		regs.R4 = regs.R28;
		/* 8220EC40h case   14:*/		return 0x8220EC44;
		  /* 8220EC44h */ case   15:  		/* li R7, 261 */
		/* 8220EC44h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x105);
		/* 8220EC44h case   15:*/		return 0x8220EC48;
		  /* 8220EC48h */ case   16:  		/* li R3, 0 */
		/* 8220EC48h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EC48h case   16:*/		return 0x8220EC4C;
		  /* 8220EC4Ch */ case   17:  		/* bl -749636 */
		/* 8220EC4Ch case   17:*/		regs.LR = 0x8220EC50; return 0x82157C08;
		/* 8220EC4Ch case   17:*/		return 0x8220EC50;
	}
	return 0x8220EC50;
} // Block from 8220EC08h-8220EC50h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220EC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EC50);
		  /* 8220EC50h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EC50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EC50h case    0:*/		return 0x8220EC54;
		  /* 8220EC54h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 8220EC54h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EC54h case    1:*/		return 0x8220EC58;
		  /* 8220EC58h */ case    2:  		/* divwu R9, R30, R11 */
		/* 8220EC58h case    2:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R30,regs.R11);
		/* 8220EC58h case    2:*/		return 0x8220EC5C;
		  /* 8220EC5Ch */ case    3:  		/* twi 6, R11, 0 */
		/* 8220EC5Ch case    3:*/		cpu::op::tw<6>(regs, 0x8220EC5C, regs.R11, 0x00000000);
		/* 8220EC5Ch case    3:*/		return 0x8220EC60;
		  /* 8220EC60h */ case    4:  		/* mullw R11, R9, R11 */
		/* 8220EC60h case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220EC60h case    4:*/		return 0x8220EC64;
		  /* 8220EC64h */ case    5:  		/* subf R11, R11, R30 */
		/* 8220EC64h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8220EC64h case    5:*/		return 0x8220EC68;
		  /* 8220EC68h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220EC68h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220EC68h case    6:*/		return 0x8220EC6C;
		  /* 8220EC6Ch */ case    7:  		/* lwzx R29, <#[R11 + R10]> */
		/* 8220EC6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220EC6Ch case    7:*/		return 0x8220EC70;
		  /* 8220EC70h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 8220EC70h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220EC70h case    8:*/		return 0x8220EC74;
		  /* 8220EC74h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EC74h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220EC94;  }
		/* 8220EC74h case    9:*/		return 0x8220EC78;
		  /* 8220EC78h */ case   10:  		/* lis R11, -32252 */
		/* 8220EC78h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EC78h case   10:*/		return 0x8220EC7C;
		  /* 8220EC7Ch */ case   11:  		/* mr R6, R27 */
		/* 8220EC7Ch case   11:*/		regs.R6 = regs.R27;
		/* 8220EC7Ch case   11:*/		return 0x8220EC80;
		  /* 8220EC80h */ case   12:  		/* addi R5, R11, -21472 */
		/* 8220EC80h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220EC80h case   12:*/		return 0x8220EC84;
		  /* 8220EC84h */ case   13:  		/* mr R4, R28 */
		/* 8220EC84h case   13:*/		regs.R4 = regs.R28;
		/* 8220EC84h case   13:*/		return 0x8220EC88;
		  /* 8220EC88h */ case   14:  		/* li R7, 268 */
		/* 8220EC88h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x10C);
		/* 8220EC88h case   14:*/		return 0x8220EC8C;
		  /* 8220EC8Ch */ case   15:  		/* li R3, 0 */
		/* 8220EC8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EC8Ch case   15:*/		return 0x8220EC90;
		  /* 8220EC90h */ case   16:  		/* bl -749704 */
		/* 8220EC90h case   16:*/		regs.LR = 0x8220EC94; return 0x82157C08;
		/* 8220EC90h case   16:*/		return 0x8220EC94;
	}
	return 0x8220EC94;
} // Block from 8220EC50h-8220EC94h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220EC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EC94);
		  /* 8220EC94h */ case    0:  		/* mr R4, R30 */
		/* 8220EC94h case    0:*/		regs.R4 = regs.R30;
		/* 8220EC94h case    0:*/		return 0x8220EC98;
		  /* 8220EC98h */ case    1:  		/* mr R3, R29 */
		/* 8220EC98h case    1:*/		regs.R3 = regs.R29;
		/* 8220EC98h case    1:*/		return 0x8220EC9C;
		  /* 8220EC9Ch */ case    2:  		/* bl -733092 */
		/* 8220EC9Ch case    2:*/		regs.LR = 0x8220ECA0; return 0x8215BCF8;
		/* 8220EC9Ch case    2:*/		return 0x8220ECA0;
		  /* 8220ECA0h */ case    3:  		/* or. R31, R3, R3 */
		/* 8220ECA0h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220ECA0h case    3:*/		return 0x8220ECA4;
		  /* 8220ECA4h */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 8220ECA4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8220ECD8;  }
		/* 8220ECA4h case    4:*/		return 0x8220ECA8;
		  /* 8220ECA8h */ case    5:  		/* mr R3, R29 */
		/* 8220ECA8h case    5:*/		regs.R3 = regs.R29;
		/* 8220ECA8h case    5:*/		return 0x8220ECAC;
		  /* 8220ECACh */ case    6:  		/* bl -732932 */
		/* 8220ECACh case    6:*/		regs.LR = 0x8220ECB0; return 0x8215BDA8;
		/* 8220ECACh case    6:*/		return 0x8220ECB0;
		  /* 8220ECB0h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8220ECB0h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220ECB0h case    7:*/		return 0x8220ECB4;
		  /* 8220ECB4h */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 8220ECB4h case    8:*/		if ( regs.CR[0].eq ) { return 0x8220ECD8;  }
		/* 8220ECB4h case    8:*/		return 0x8220ECB8;
		  /* 8220ECB8h */ case    9:  		/* lis R11, -32252 */
		/* 8220ECB8h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ECB8h case    9:*/		return 0x8220ECBC;
		  /* 8220ECBCh */ case   10:  		/* mr R6, R27 */
		/* 8220ECBCh case   10:*/		regs.R6 = regs.R27;
		/* 8220ECBCh case   10:*/		return 0x8220ECC0;
		  /* 8220ECC0h */ case   11:  		/* addi R5, R11, -7404 */
		/* 8220ECC0h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE314);
		/* 8220ECC0h case   11:*/		return 0x8220ECC4;
		  /* 8220ECC4h */ case   12:  		/* mr R4, R28 */
		/* 8220ECC4h case   12:*/		regs.R4 = regs.R28;
		/* 8220ECC4h case   12:*/		return 0x8220ECC8;
		  /* 8220ECC8h */ case   13:  		/* li R7, 275 */
		/* 8220ECC8h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x113);
		/* 8220ECC8h case   13:*/		return 0x8220ECCC;
		  /* 8220ECCCh */ case   14:  		/* li R3, 0 */
		/* 8220ECCCh case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ECCCh case   14:*/		return 0x8220ECD0;
		  /* 8220ECD0h */ case   15:  		/* bl -749768 */
		/* 8220ECD0h case   15:*/		regs.LR = 0x8220ECD4; return 0x82157C08;
		/* 8220ECD0h case   15:*/		return 0x8220ECD4;
		  /* 8220ECD4h */ case   16:  		/* li R31, 0 */
		/* 8220ECD4h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220ECD4h case   16:*/		return 0x8220ECD8;
	}
	return 0x8220ECD8;
} // Block from 8220EC94h-8220ECD8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220ECD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ECD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ECD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ECD8);
		  /* 8220ECD8h */ case    0:  		/* mr R3, R31 */
		/* 8220ECD8h case    0:*/		regs.R3 = regs.R31;
		/* 8220ECD8h case    0:*/		return 0x8220ECDC;
		  /* 8220ECDCh */ case    1:  		/* addi R1, R1, 128 */
		/* 8220ECDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220ECDCh case    1:*/		return 0x8220ECE0;
		  /* 8220ECE0h */ case    2:  		/* b -1563196 */
		/* 8220ECE0h case    2:*/		return 0x820912A4;
		/* 8220ECE0h case    2:*/		return 0x8220ECE4;
		  /* 8220ECE4h */ case    3:  		/* nop */
		/* 8220ECE4h case    3:*/		cpu::op::nop();
		/* 8220ECE4h case    3:*/		return 0x8220ECE8;
	}
	return 0x8220ECE8;
} // Block from 8220ECD8h-8220ECE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220ECE8h
// Function '?PS_Create@XGRAPHICS@@YAPAU_PS_PROGRAM_STORE@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZP6A?AW431@0IW4_E_SSM_VIDMEMHEAP@1@PAU_SSM_VIDMEM@1@@ZP6A?AW431@04@ZPAU_TS_TEXTURE_SERVER@1@PAU_SSM_REGISTRY@1@PAU_ORDERED_LIST_FACTORY@1@PAU_INTEGER_LIST_FACTORY@1@PAU_OBJECT_LIST_FACTORY@1@IPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ECE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ECE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ECE8);
		  /* 8220ECE8h */ case    0:  		/* mfspr R12, LR */
		/* 8220ECE8h case    0:*/		regs.R12 = regs.LR;
		/* 8220ECE8h case    0:*/		return 0x8220ECEC;
		  /* 8220ECECh */ case    1:  		/* bl -1563284 */
		/* 8220ECECh case    1:*/		regs.LR = 0x8220ECF0; return 0x82091258;
		/* 8220ECECh case    1:*/		return 0x8220ECF0;
		  /* 8220ECF0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220ECF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220ECF0h case    2:*/		return 0x8220ECF4;
		  /* 8220ECF4h */ case    3:  		/* lis R11, -32253 */
		/* 8220ECF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220ECF4h case    3:*/		return 0x8220ECF8;
		  /* 8220ECF8h */ case    4:  		/* lis R10, -32252 */
		/* 8220ECF8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220ECF8h case    4:*/		return 0x8220ECFC;
		  /* 8220ECFCh */ case    5:  		/* mr R31, R3 */
		/* 8220ECFCh case    5:*/		regs.R31 = regs.R3;
		/* 8220ECFCh case    5:*/		return 0x8220ED00;
		  /* 8220ED00h */ case    6:  		/* mr R30, R4 */
		/* 8220ED00h case    6:*/		regs.R30 = regs.R4;
		/* 8220ED00h case    6:*/		return 0x8220ED04;
		  /* 8220ED04h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8220ED04h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220ED04h case    7:*/		return 0x8220ED08;
		  /* 8220ED08h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8220ED08h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220ED08h case    8:*/		return 0x8220ED0C;
		  /* 8220ED0Ch */ case    9:  		/* addi R28, R10, -7496 */
		/* 8220ED0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFE2B8);
		/* 8220ED0Ch case    9:*/		return 0x8220ED10;
		  /* 8220ED10h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ED10h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8220ED30;  }
		/* 8220ED10h case   10:*/		return 0x8220ED14;
		  /* 8220ED14h */ case   11:  		/* lis R11, -32252 */
		/* 8220ED14h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ED14h case   11:*/		return 0x8220ED18;
		  /* 8220ED18h */ case   12:  		/* mr R6, R28 */
		/* 8220ED18h case   12:*/		regs.R6 = regs.R28;
		/* 8220ED18h case   12:*/		return 0x8220ED1C;
		  /* 8220ED1Ch */ case   13:  		/* addi R5, R11, -7508 */
		/* 8220ED1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE2AC);
		/* 8220ED1Ch case   13:*/		return 0x8220ED20;
		  /* 8220ED20h */ case   14:  		/* mr R4, R29 */
		/* 8220ED20h case   14:*/		regs.R4 = regs.R29;
		/* 8220ED20h case   14:*/		return 0x8220ED24;
		  /* 8220ED24h */ case   15:  		/* li R7, 311 */
		/* 8220ED24h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x137);
		/* 8220ED24h case   15:*/		return 0x8220ED28;
		  /* 8220ED28h */ case   16:  		/* li R3, 0 */
		/* 8220ED28h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ED28h case   16:*/		return 0x8220ED2C;
		  /* 8220ED2Ch */ case   17:  		/* bl -749860 */
		/* 8220ED2Ch case   17:*/		regs.LR = 0x8220ED30; return 0x82157C08;
		/* 8220ED2Ch case   17:*/		return 0x8220ED30;
	}
	return 0x8220ED30;
} // Block from 8220ECE8h-8220ED30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220ED30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ED30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ED30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ED30);
		  /* 8220ED30h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220ED30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220ED30h case    0:*/		return 0x8220ED34;
		  /* 8220ED34h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 8220ED34h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220ED34h case    1:*/		return 0x8220ED38;
		  /* 8220ED38h */ case    2:  		/* divwu R9, R30, R11 */
		/* 8220ED38h case    2:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R30,regs.R11);
		/* 8220ED38h case    2:*/		return 0x8220ED3C;
		  /* 8220ED3Ch */ case    3:  		/* twi 6, R11, 0 */
		/* 8220ED3Ch case    3:*/		cpu::op::tw<6>(regs, 0x8220ED3C, regs.R11, 0x00000000);
		/* 8220ED3Ch case    3:*/		return 0x8220ED40;
		  /* 8220ED40h */ case    4:  		/* mullw R11, R9, R11 */
		/* 8220ED40h case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220ED40h case    4:*/		return 0x8220ED44;
		  /* 8220ED44h */ case    5:  		/* subf R11, R11, R30 */
		/* 8220ED44h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8220ED44h case    5:*/		return 0x8220ED48;
		  /* 8220ED48h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220ED48h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220ED48h case    6:*/		return 0x8220ED4C;
		  /* 8220ED4Ch */ case    7:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8220ED4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220ED4Ch case    7:*/		return 0x8220ED50;
		  /* 8220ED50h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8220ED50h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220ED50h case    8:*/		return 0x8220ED54;
		  /* 8220ED54h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8220ED54h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8220ED74;  }
		/* 8220ED54h case    9:*/		return 0x8220ED58;
		  /* 8220ED58h */ case   10:  		/* lis R11, -32252 */
		/* 8220ED58h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220ED58h case   10:*/		return 0x8220ED5C;
		  /* 8220ED5Ch */ case   11:  		/* mr R6, R28 */
		/* 8220ED5Ch case   11:*/		regs.R6 = regs.R28;
		/* 8220ED5Ch case   11:*/		return 0x8220ED60;
		  /* 8220ED60h */ case   12:  		/* addi R5, R11, -21472 */
		/* 8220ED60h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220ED60h case   12:*/		return 0x8220ED64;
		  /* 8220ED64h */ case   13:  		/* mr R4, R29 */
		/* 8220ED64h case   13:*/		regs.R4 = regs.R29;
		/* 8220ED64h case   13:*/		return 0x8220ED68;
		  /* 8220ED68h */ case   14:  		/* li R7, 318 */
		/* 8220ED68h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x13E);
		/* 8220ED68h case   14:*/		return 0x8220ED6C;
		  /* 8220ED6Ch */ case   15:  		/* li R3, 0 */
		/* 8220ED6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220ED6Ch case   15:*/		return 0x8220ED70;
		  /* 8220ED70h */ case   16:  		/* bl -749928 */
		/* 8220ED70h case   16:*/		regs.LR = 0x8220ED74; return 0x82157C08;
		/* 8220ED70h case   16:*/		return 0x8220ED74;
	}
	return 0x8220ED74;
} // Block from 8220ED30h-8220ED74h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220ED74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ED74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ED74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ED74);
		  /* 8220ED74h */ case    0:  		/* mr R4, R30 */
		/* 8220ED74h case    0:*/		regs.R4 = regs.R30;
		/* 8220ED74h case    0:*/		return 0x8220ED78;
		  /* 8220ED78h */ case    1:  		/* mr R3, R31 */
		/* 8220ED78h case    1:*/		regs.R3 = regs.R31;
		/* 8220ED78h case    1:*/		return 0x8220ED7C;
		  /* 8220ED7Ch */ case    2:  		/* bl -732964 */
		/* 8220ED7Ch case    2:*/		regs.LR = 0x8220ED80; return 0x8215BE58;
		/* 8220ED7Ch case    2:*/		return 0x8220ED80;
		  /* 8220ED80h */ case    3:  		/* addi R1, R1, 128 */
		/* 8220ED80h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220ED80h case    3:*/		return 0x8220ED84;
		  /* 8220ED84h */ case    4:  		/* b -1563356 */
		/* 8220ED84h case    4:*/		return 0x820912A8;
		/* 8220ED84h case    4:*/		return 0x8220ED88;
	}
	return 0x8220ED88;
} // Block from 8220ED74h-8220ED88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220ED88h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220ED88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220ED88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220ED88);
		  /* 8220ED88h */ case    0:  		/* mfspr R12, LR */
		/* 8220ED88h case    0:*/		regs.R12 = regs.LR;
		/* 8220ED88h case    0:*/		return 0x8220ED8C;
		  /* 8220ED8Ch */ case    1:  		/* bl -1563460 */
		/* 8220ED8Ch case    1:*/		regs.LR = 0x8220ED90; return 0x82091248;
		/* 8220ED8Ch case    1:*/		return 0x8220ED90;
		  /* 8220ED90h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8220ED90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8220ED90h case    2:*/		return 0x8220ED94;
		  /* 8220ED94h */ case    3:  		/* mr R29, R4 */
		/* 8220ED94h case    3:*/		regs.R29 = regs.R4;
		/* 8220ED94h case    3:*/		return 0x8220ED98;
		  /* 8220ED98h */ case    4:  		/* li R4, 24 */
		/* 8220ED98h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220ED98h case    4:*/		return 0x8220ED9C;
		  /* 8220ED9Ch */ case    5:  		/* mr R30, R3 */
		/* 8220ED9Ch case    5:*/		regs.R30 = regs.R3;
		/* 8220ED9Ch case    5:*/		return 0x8220EDA0;
		  /* 8220EDA0h */ case    6:  		/* mr R27, R5 */
		/* 8220EDA0h case    6:*/		regs.R27 = regs.R5;
		/* 8220EDA0h case    6:*/		return 0x8220EDA4;
		  /* 8220EDA4h */ case    7:  		/* mr R26, R6 */
		/* 8220EDA4h case    7:*/		regs.R26 = regs.R6;
		/* 8220EDA4h case    7:*/		return 0x8220EDA8;
		  /* 8220EDA8h */ case    8:  		/* mr R28, R7 */
		/* 8220EDA8h case    8:*/		regs.R28 = regs.R7;
		/* 8220EDA8h case    8:*/		return 0x8220EDAC;
		  /* 8220EDACh */ case    9:  		/* mtspr CTR, R29 */
		/* 8220EDACh case    9:*/		regs.CTR = regs.R29;
		/* 8220EDACh case    9:*/		return 0x8220EDB0;
		  /* 8220EDB0h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8220EDB0h case   10:*/		if ( 1 ) { regs.LR = 0x8220EDB4; return (uint32)regs.CTR; }
		/* 8220EDB0h case   10:*/		return 0x8220EDB4;
		  /* 8220EDB4h */ case   11:  		/* lis R11, -32253 */
		/* 8220EDB4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220EDB4h case   11:*/		return 0x8220EDB8;
		  /* 8220EDB8h */ case   12:  		/* lis R10, -32252 */
		/* 8220EDB8h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EDB8h case   12:*/		return 0x8220EDBC;
		  /* 8220EDBCh */ case   13:  		/* or. R31, R3, R3 */
		/* 8220EDBCh case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8220EDBCh case   13:*/		return 0x8220EDC0;
		  /* 8220EDC0h */ case   14:  		/* addi R25, R11, 27460 */
		/* 8220EDC0h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 8220EDC0h case   14:*/		return 0x8220EDC4;
		  /* 8220EDC4h */ case   15:  		/* addi R24, R10, -7496 */
		/* 8220EDC4h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFFE2B8);
		/* 8220EDC4h case   15:*/		return 0x8220EDC8;
		  /* 8220EDC8h */ case   16:  		/* bc 4, CR0_EQ, 32 */
		/* 8220EDC8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8220EDE8;  }
		/* 8220EDC8h case   16:*/		return 0x8220EDCC;
		  /* 8220EDCCh */ case   17:  		/* lis R11, -32252 */
		/* 8220EDCCh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EDCCh case   17:*/		return 0x8220EDD0;
		  /* 8220EDD0h */ case   18:  		/* mr R6, R24 */
		/* 8220EDD0h case   18:*/		regs.R6 = regs.R24;
		/* 8220EDD0h case   18:*/		return 0x8220EDD4;
		  /* 8220EDD4h */ case   19:  		/* addi R5, R11, -7328 */
		/* 8220EDD4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE360);
		/* 8220EDD4h case   19:*/		return 0x8220EDD8;
		  /* 8220EDD8h */ case   20:  		/* mr R4, R25 */
		/* 8220EDD8h case   20:*/		regs.R4 = regs.R25;
		/* 8220EDD8h case   20:*/		return 0x8220EDDC;
		  /* 8220EDDCh */ case   21:  		/* li R7, 480 */
		/* 8220EDDCh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x1E0);
		/* 8220EDDCh case   21:*/		return 0x8220EDE0;
		  /* 8220EDE0h */ case   22:  		/* li R3, 0 */
		/* 8220EDE0h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EDE0h case   22:*/		return 0x8220EDE4;
		  /* 8220EDE4h */ case   23:  		/* bl -750044 */
		/* 8220EDE4h case   23:*/		regs.LR = 0x8220EDE8; return 0x82157C08;
		/* 8220EDE4h case   23:*/		return 0x8220EDE8;
	}
	return 0x8220EDE8;
} // Block from 8220ED88h-8220EDE8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8220EDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EDE8);
		  /* 8220EDE8h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8220EDE8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EDE8h case    0:*/		return 0x8220EDEC;
		  /* 8220EDECh */ case    1:  		/* rlwinm R4, R28, 2, 0, 29 */
		/* 8220EDECh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R28);
		/* 8220EDECh case    1:*/		return 0x8220EDF0;
		  /* 8220EDF0h */ case    2:  		/* stw R29, <#[R31 + 8]> */
		/* 8220EDF0h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 8220EDF0h case    2:*/		return 0x8220EDF4;
		  /* 8220EDF4h */ case    3:  		/* mr R3, R30 */
		/* 8220EDF4h case    3:*/		regs.R3 = regs.R30;
		/* 8220EDF4h case    3:*/		return 0x8220EDF8;
		  /* 8220EDF8h */ case    4:  		/* stw R27, <#[R31 + 12]> */
		/* 8220EDF8h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EDF8h case    4:*/		return 0x8220EDFC;
		  /* 8220EDFCh */ case    5:  		/* mtspr CTR, R29 */
		/* 8220EDFCh case    5:*/		regs.CTR = regs.R29;
		/* 8220EDFCh case    5:*/		return 0x8220EE00;
		  /* 8220EE00h */ case    6:  		/* stw R26, <#[R31 + 16]> */
		/* 8220EE00h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 8220EE00h case    6:*/		return 0x8220EE04;
		  /* 8220EE04h */ case    7:  		/* stw R28, <#[R31 + 20]> */
		/* 8220EE04h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EE04h case    7:*/		return 0x8220EE08;
		  /* 8220EE08h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8220EE08h case    8:*/		if ( 1 ) { regs.LR = 0x8220EE0C; return (uint32)regs.CTR; }
		/* 8220EE08h case    8:*/		return 0x8220EE0C;
		  /* 8220EE0Ch */ case    9:  		/* stw R3, <#[R31]> */
		/* 8220EE0Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EE0Ch case    9:*/		return 0x8220EE10;
		  /* 8220EE10h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 8220EE10h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220EE10h case   10:*/		return 0x8220EE14;
		  /* 8220EE14h */ case   11:  		/* bc 4, CR0_EQ, 28 */
		/* 8220EE14h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8220EE30;  }
		/* 8220EE14h case   11:*/		return 0x8220EE18;
		  /* 8220EE18h */ case   12:  		/* lis R11, -32252 */
		/* 8220EE18h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EE18h case   12:*/		return 0x8220EE1C;
		  /* 8220EE1Ch */ case   13:  		/* mr R6, R24 */
		/* 8220EE1Ch case   13:*/		regs.R6 = regs.R24;
		/* 8220EE1Ch case   13:*/		return 0x8220EE20;
		  /* 8220EE20h */ case   14:  		/* addi R5, R11, -7352 */
		/* 8220EE20h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE348);
		/* 8220EE20h case   14:*/		return 0x8220EE24;
		  /* 8220EE24h */ case   15:  		/* mr R4, R25 */
		/* 8220EE24h case   15:*/		regs.R4 = regs.R25;
		/* 8220EE24h case   15:*/		return 0x8220EE28;
		  /* 8220EE28h */ case   16:  		/* li R7, 493 */
		/* 8220EE28h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1ED);
		/* 8220EE28h case   16:*/		return 0x8220EE2C;
		  /* 8220EE2Ch */ case   17:  		/* bl -750116 */
		/* 8220EE2Ch case   17:*/		regs.LR = 0x8220EE30; return 0x82157C08;
		/* 8220EE2Ch case   17:*/		return 0x8220EE30;
	}
	return 0x8220EE30;
} // Block from 8220EDE8h-8220EE30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8220EE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EE30);
		  /* 8220EE30h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8220EE30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8220EE30h case    0:*/		return 0x8220EE34;
		  /* 8220EE34h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8220EE34h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220EE88;  }
		/* 8220EE34h case    1:*/		return 0x8220EE38;
		  /* 8220EE38h */ case    2:  		/* lis R11, -32252 */
		/* 8220EE38h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EE38h case    2:*/		return 0x8220EE3C;
		  /* 8220EE3Ch */ case    3:  		/* li R30, 0 */
		/* 8220EE3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220EE3Ch case    3:*/		return 0x8220EE40;
		  /* 8220EE40h */ case    4:  		/* addi R29, R11, -7380 */
		/* 8220EE40h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFE32C);
		/* 8220EE40h case    4:*/		return 0x8220EE44;
		  /* 8220EE44h */ case    5:  		/* mr R3, R26 */
		/* 8220EE44h case    5:*/		regs.R3 = regs.R26;
		/* 8220EE44h case    5:*/		return 0x8220EE48;
		  /* 8220EE48h */ case    6:  		/* bl -13120 */
		/* 8220EE48h case    6:*/		regs.LR = 0x8220EE4C; return 0x8220BB08;
		/* 8220EE48h case    6:*/		return 0x8220EE4C;
		  /* 8220EE4Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8220EE4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EE4Ch case    7:*/		return 0x8220EE50;
		  /* 8220EE50h */ case    8:  		/* stwx R3, <#[R11 + R30]> */
		/* 8220EE50h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8220EE50h case    8:*/		return 0x8220EE54;
		  /* 8220EE54h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8220EE54h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EE54h case    9:*/		return 0x8220EE58;
		  /* 8220EE58h */ case   10:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8220EE58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8220EE58h case   10:*/		return 0x8220EE5C;
		  /* 8220EE5Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8220EE5Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220EE5Ch case   11:*/		return 0x8220EE60;
		  /* 8220EE60h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8220EE60h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220EE7C;  }
		/* 8220EE60h case   12:*/		return 0x8220EE64;
		  /* 8220EE64h */ case   13:  		/* mr R6, R24 */
		/* 8220EE64h case   13:*/		regs.R6 = regs.R24;
		/* 8220EE64h case   13:*/		return 0x8220EE68;
		  /* 8220EE68h */ case   14:  		/* mr R5, R29 */
		/* 8220EE68h case   14:*/		regs.R5 = regs.R29;
		/* 8220EE68h case   14:*/		return 0x8220EE6C;
		  /* 8220EE6Ch */ case   15:  		/* mr R4, R25 */
		/* 8220EE6Ch case   15:*/		regs.R4 = regs.R25;
		/* 8220EE6Ch case   15:*/		return 0x8220EE70;
		  /* 8220EE70h */ case   16:  		/* li R7, 500 */
		/* 8220EE70h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1F4);
		/* 8220EE70h case   16:*/		return 0x8220EE74;
		  /* 8220EE74h */ case   17:  		/* li R3, 0 */
		/* 8220EE74h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EE74h case   17:*/		return 0x8220EE78;
		  /* 8220EE78h */ case   18:  		/* bl -750192 */
		/* 8220EE78h case   18:*/		regs.LR = 0x8220EE7C; return 0x82157C08;
		/* 8220EE78h case   18:*/		return 0x8220EE7C;
	}
	return 0x8220EE7C;
} // Block from 8220EE30h-8220EE7Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220EE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EE7C);
		  /* 8220EE7Ch */ case    0:  		/* addic. R28, R28, -1 */
		/* 8220EE7Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8220EE7Ch case    0:*/		return 0x8220EE80;
		  /* 8220EE80h */ case    1:  		/* addi R30, R30, 4 */
		/* 8220EE80h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220EE80h case    1:*/		return 0x8220EE84;
		  /* 8220EE84h */ case    2:  		/* bc 4, CR0_EQ, -64 */
		/* 8220EE84h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8220EE44;  }
		/* 8220EE84h case    2:*/		return 0x8220EE88;
	}
	return 0x8220EE88;
} // Block from 8220EE7Ch-8220EE88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220EE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EE88);
		  /* 8220EE88h */ case    0:  		/* mr R3, R31 */
		/* 8220EE88h case    0:*/		regs.R3 = regs.R31;
		/* 8220EE88h case    0:*/		return 0x8220EE8C;
		  /* 8220EE8Ch */ case    1:  		/* addi R1, R1, 160 */
		/* 8220EE8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8220EE8Ch case    1:*/		return 0x8220EE90;
		  /* 8220EE90h */ case    2:  		/* b -1563640 */
		/* 8220EE90h case    2:*/		return 0x82091298;
		/* 8220EE90h case    2:*/		return 0x8220EE94;
		  /* 8220EE94h */ case    3:  		/* nop */
		/* 8220EE94h case    3:*/		cpu::op::nop();
		/* 8220EE94h case    3:*/		return 0x8220EE98;
	}
	return 0x8220EE98;
} // Block from 8220EE88h-8220EE98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220EE98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EE98);
		  /* 8220EE98h */ case    0:  		/* mfspr R12, LR */
		/* 8220EE98h case    0:*/		regs.R12 = regs.LR;
		/* 8220EE98h case    0:*/		return 0x8220EE9C;
		  /* 8220EE9Ch */ case    1:  		/* bl -1563712 */
		/* 8220EE9Ch case    1:*/		regs.LR = 0x8220EEA0; return 0x8209125C;
		/* 8220EE9Ch case    1:*/		return 0x8220EEA0;
		  /* 8220EEA0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220EEA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220EEA0h case    2:*/		return 0x8220EEA4;
		  /* 8220EEA4h */ case    3:  		/* mr R31, R3 */
		/* 8220EEA4h case    3:*/		regs.R31 = regs.R3;
		/* 8220EEA4h case    3:*/		return 0x8220EEA8;
		  /* 8220EEA8h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220EEA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220EEA8h case    4:*/		return 0x8220EEAC;
		  /* 8220EEACh */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8220EEACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220EED0;  }
		/* 8220EEACh case    5:*/		return 0x8220EEB0;
		  /* 8220EEB0h */ case    6:  		/* lis R11, -32252 */
		/* 8220EEB0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EEB0h case    6:*/		return 0x8220EEB4;
		  /* 8220EEB4h */ case    7:  		/* lis R10, -32252 */
		/* 8220EEB4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EEB4h case    7:*/		return 0x8220EEB8;
		  /* 8220EEB8h */ case    8:  		/* lis R9, -32253 */
		/* 8220EEB8h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220EEB8h case    8:*/		return 0x8220EEBC;
		  /* 8220EEBCh */ case    9:  		/* addi R6, R11, -7496 */
		/* 8220EEBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE2B8);
		/* 8220EEBCh case    9:*/		return 0x8220EEC0;
		  /* 8220EEC0h */ case   10:  		/* addi R5, R10, -7328 */
		/* 8220EEC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE360);
		/* 8220EEC0h case   10:*/		return 0x8220EEC4;
		  /* 8220EEC4h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220EEC4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220EEC4h case   11:*/		return 0x8220EEC8;
		  /* 8220EEC8h */ case   12:  		/* li R7, 531 */
		/* 8220EEC8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x213);
		/* 8220EEC8h case   12:*/		return 0x8220EECC;
		  /* 8220EECCh */ case   13:  		/* bl -750276 */
		/* 8220EECCh case   13:*/		regs.LR = 0x8220EED0; return 0x82157C08;
		/* 8220EECCh case   13:*/		return 0x8220EED0;
	}
	return 0x8220EED0;
} // Block from 8220EE98h-8220EED0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220EED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EED0);
		  /* 8220EED0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EED0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EED0h case    0:*/		return 0x8220EED4;
		  /* 8220EED4h */ case    1:  		/* li R29, 0 */
		/* 8220EED4h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8220EED4h case    1:*/		return 0x8220EED8;
		  /* 8220EED8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8220EED8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220EED8h case    2:*/		return 0x8220EEDC;
		  /* 8220EEDCh */ case    3:  		/* bc 4, CR6_GT, 44 */
		/* 8220EEDCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x8220EF08;  }
		/* 8220EEDCh case    3:*/		return 0x8220EEE0;
		  /* 8220EEE0h */ case    4:  		/* li R30, 0 */
		/* 8220EEE0h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220EEE0h case    4:*/		return 0x8220EEE4;
		  /* 8220EEE4h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8220EEE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EEE4h case    5:*/		return 0x8220EEE8;
		  /* 8220EEE8h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8220EEE8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8220EEE8h case    6:*/		return 0x8220EEEC;
		  /* 8220EEECh */ case    7:  		/* lwzx R4, <#[R30 + R11]> */
		/* 8220EEECh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8220EEECh case    7:*/		return 0x8220EEF0;
		  /* 8220EEF0h */ case    8:  		/* bl -13120 */
		/* 8220EEF0h case    8:*/		regs.LR = 0x8220EEF4; return 0x8220BBB0;
		/* 8220EEF0h case    8:*/		return 0x8220EEF4;
		  /* 8220EEF4h */ case    9:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EEF4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EEF4h case    9:*/		return 0x8220EEF8;
		  /* 8220EEF8h */ case   10:  		/* addi R29, R29, 1 */
		/* 8220EEF8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8220EEF8h case   10:*/		return 0x8220EEFC;
		  /* 8220EEFCh */ case   11:  		/* addi R30, R30, 4 */
		/* 8220EEFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220EEFCh case   11:*/		return 0x8220EF00;
		  /* 8220EF00h */ case   12:  		/* cmplw CR6, R29, R11 */
		/* 8220EF00h case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8220EF00h case   12:*/		return 0x8220EF04;
		  /* 8220EF04h */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 8220EF04h case   13:*/		if ( regs.CR[6].lt ) { return 0x8220EEE4;  }
		/* 8220EF04h case   13:*/		return 0x8220EF08;
	}
	return 0x8220EF08;
} // Block from 8220EED0h-8220EF08h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220EF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EF08);
		  /* 8220EF08h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220EF08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EF08h case    0:*/		return 0x8220EF0C;
		  /* 8220EF0Ch */ case    1:  		/* lwz R4, <#[R31]> */
		/* 8220EF0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EF0Ch case    1:*/		return 0x8220EF10;
		  /* 8220EF10h */ case    2:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220EF10h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EF10h case    2:*/		return 0x8220EF14;
		  /* 8220EF14h */ case    3:  		/* mtspr CTR, R11 */
		/* 8220EF14h case    3:*/		regs.CTR = regs.R11;
		/* 8220EF14h case    3:*/		return 0x8220EF18;
		  /* 8220EF18h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8220EF18h case    4:*/		if ( 1 ) { regs.LR = 0x8220EF1C; return (uint32)regs.CTR; }
		/* 8220EF18h case    4:*/		return 0x8220EF1C;
		  /* 8220EF1Ch */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 8220EF1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8220EF1Ch case    5:*/		return 0x8220EF20;
		  /* 8220EF20h */ case    6:  		/* mr R4, R31 */
		/* 8220EF20h case    6:*/		regs.R4 = regs.R31;
		/* 8220EF20h case    6:*/		return 0x8220EF24;
		  /* 8220EF24h */ case    7:  		/* lwz R3, <#[R31 + 4]> */
		/* 8220EF24h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220EF24h case    7:*/		return 0x8220EF28;
		  /* 8220EF28h */ case    8:  		/* mtspr CTR, R11 */
		/* 8220EF28h case    8:*/		regs.CTR = regs.R11;
		/* 8220EF28h case    8:*/		return 0x8220EF2C;
		  /* 8220EF2Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8220EF2Ch case    9:*/		if ( 1 ) { regs.LR = 0x8220EF30; return (uint32)regs.CTR; }
		/* 8220EF2Ch case    9:*/		return 0x8220EF30;
		  /* 8220EF30h */ case   10:  		/* addi R1, R1, 112 */
		/* 8220EF30h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220EF30h case   10:*/		return 0x8220EF34;
		  /* 8220EF34h */ case   11:  		/* b -1563784 */
		/* 8220EF34h case   11:*/		return 0x820912AC;
		/* 8220EF34h case   11:*/		return 0x8220EF38;
	}
	return 0x8220EF38;
} // Block from 8220EF08h-8220EF38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220EF38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EF38);
		  /* 8220EF38h */ case    0:  		/* mfspr R12, LR */
		/* 8220EF38h case    0:*/		regs.R12 = regs.LR;
		/* 8220EF38h case    0:*/		return 0x8220EF3C;
		  /* 8220EF3Ch */ case    1:  		/* bl -1563884 */
		/* 8220EF3Ch case    1:*/		regs.LR = 0x8220EF40; return 0x82091250;
		/* 8220EF3Ch case    1:*/		return 0x8220EF40;
		  /* 8220EF40h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220EF40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220EF40h case    2:*/		return 0x8220EF44;
		  /* 8220EF44h */ case    3:  		/* lis R11, -32253 */
		/* 8220EF44h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220EF44h case    3:*/		return 0x8220EF48;
		  /* 8220EF48h */ case    4:  		/* lis R10, -32252 */
		/* 8220EF48h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220EF48h case    4:*/		return 0x8220EF4C;
		  /* 8220EF4Ch */ case    5:  		/* mr R31, R3 */
		/* 8220EF4Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220EF4Ch case    5:*/		return 0x8220EF50;
		  /* 8220EF50h */ case    6:  		/* mr R30, R4 */
		/* 8220EF50h case    6:*/		regs.R30 = regs.R4;
		/* 8220EF50h case    6:*/		return 0x8220EF54;
		  /* 8220EF54h */ case    7:  		/* mr R29, R5 */
		/* 8220EF54h case    7:*/		regs.R29 = regs.R5;
		/* 8220EF54h case    7:*/		return 0x8220EF58;
		  /* 8220EF58h */ case    8:  		/* mr R26, R6 */
		/* 8220EF58h case    8:*/		regs.R26 = regs.R6;
		/* 8220EF58h case    8:*/		return 0x8220EF5C;
		  /* 8220EF5Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8220EF5Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220EF5Ch case    9:*/		return 0x8220EF60;
		  /* 8220EF60h */ case   10:  		/* addi R28, R11, 27460 */
		/* 8220EF60h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220EF60h case   10:*/		return 0x8220EF64;
		  /* 8220EF64h */ case   11:  		/* addi R27, R10, -7496 */
		/* 8220EF64h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE2B8);
		/* 8220EF64h case   11:*/		return 0x8220EF68;
		  /* 8220EF68h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EF68h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8220EF88;  }
		/* 8220EF68h case   12:*/		return 0x8220EF6C;
		  /* 8220EF6Ch */ case   13:  		/* lis R11, -32252 */
		/* 8220EF6Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EF6Ch case   13:*/		return 0x8220EF70;
		  /* 8220EF70h */ case   14:  		/* mr R6, R27 */
		/* 8220EF70h case   14:*/		regs.R6 = regs.R27;
		/* 8220EF70h case   14:*/		return 0x8220EF74;
		  /* 8220EF74h */ case   15:  		/* addi R5, R11, -7328 */
		/* 8220EF74h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE360);
		/* 8220EF74h case   15:*/		return 0x8220EF78;
		  /* 8220EF78h */ case   16:  		/* mr R4, R28 */
		/* 8220EF78h case   16:*/		regs.R4 = regs.R28;
		/* 8220EF78h case   16:*/		return 0x8220EF7C;
		  /* 8220EF7Ch */ case   17:  		/* li R7, 578 */
		/* 8220EF7Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x242);
		/* 8220EF7Ch case   17:*/		return 0x8220EF80;
		  /* 8220EF80h */ case   18:  		/* li R3, 0 */
		/* 8220EF80h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EF80h case   18:*/		return 0x8220EF84;
		  /* 8220EF84h */ case   19:  		/* bl -750460 */
		/* 8220EF84h case   19:*/		regs.LR = 0x8220EF88; return 0x82157C08;
		/* 8220EF84h case   19:*/		return 0x8220EF88;
	}
	return 0x8220EF88;
} // Block from 8220EF38h-8220EF88h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220EF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EF88);
		  /* 8220EF88h */ case    0:  		/* li R5, 0 */
		/* 8220EF88h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220EF88h case    0:*/		return 0x8220EF8C;
		  /* 8220EF8Ch */ case    1:  		/* mr R4, R29 */
		/* 8220EF8Ch case    1:*/		regs.R4 = regs.R29;
		/* 8220EF8Ch case    1:*/		return 0x8220EF90;
		  /* 8220EF90h */ case    2:  		/* mr R3, R30 */
		/* 8220EF90h case    2:*/		regs.R3 = regs.R30;
		/* 8220EF90h case    2:*/		return 0x8220EF94;
		  /* 8220EF94h */ case    3:  		/* bl 156316 */
		/* 8220EF94h case    3:*/		regs.LR = 0x8220EF98; return 0x82235230;
		/* 8220EF94h case    3:*/		return 0x8220EF98;
		  /* 8220EF98h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220EF98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220EF98h case    4:*/		return 0x8220EF9C;
		  /* 8220EF9Ch */ case    5:  		/* lwz R10, <#[R31]> */
		/* 8220EF9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220EF9Ch case    5:*/		return 0x8220EFA0;
		  /* 8220EFA0h */ case    6:  		/* mr R30, R3 */
		/* 8220EFA0h case    6:*/		regs.R30 = regs.R3;
		/* 8220EFA0h case    6:*/		return 0x8220EFA4;
		  /* 8220EFA4h */ case    7:  		/* divwu R9, R3, R11 */
		/* 8220EFA4h case    7:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R3,regs.R11);
		/* 8220EFA4h case    7:*/		return 0x8220EFA8;
		  /* 8220EFA8h */ case    8:  		/* twi 6, R11, 0 */
		/* 8220EFA8h case    8:*/		cpu::op::tw<6>(regs, 0x8220EFA8, regs.R11, 0x00000000);
		/* 8220EFA8h case    8:*/		return 0x8220EFAC;
		  /* 8220EFACh */ case    9:  		/* mullw R11, R9, R11 */
		/* 8220EFACh case    9:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220EFACh case    9:*/		return 0x8220EFB0;
		  /* 8220EFB0h */ case   10:  		/* subf R11, R11, R3 */
		/* 8220EFB0h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8220EFB0h case   10:*/		return 0x8220EFB4;
		  /* 8220EFB4h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220EFB4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220EFB4h case   11:*/		return 0x8220EFB8;
		  /* 8220EFB8h */ case   12:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8220EFB8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220EFB8h case   12:*/		return 0x8220EFBC;
		  /* 8220EFBCh */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 8220EFBCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220EFBCh case   13:*/		return 0x8220EFC0;
		  /* 8220EFC0h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220EFC0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220EFE0;  }
		/* 8220EFC0h case   14:*/		return 0x8220EFC4;
		  /* 8220EFC4h */ case   15:  		/* lis R11, -32252 */
		/* 8220EFC4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220EFC4h case   15:*/		return 0x8220EFC8;
		  /* 8220EFC8h */ case   16:  		/* mr R6, R27 */
		/* 8220EFC8h case   16:*/		regs.R6 = regs.R27;
		/* 8220EFC8h case   16:*/		return 0x8220EFCC;
		  /* 8220EFCCh */ case   17:  		/* addi R5, R11, -21472 */
		/* 8220EFCCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220EFCCh case   17:*/		return 0x8220EFD0;
		  /* 8220EFD0h */ case   18:  		/* mr R4, R28 */
		/* 8220EFD0h case   18:*/		regs.R4 = regs.R28;
		/* 8220EFD0h case   18:*/		return 0x8220EFD4;
		  /* 8220EFD4h */ case   19:  		/* li R7, 589 */
		/* 8220EFD4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x24D);
		/* 8220EFD4h case   19:*/		return 0x8220EFD8;
		  /* 8220EFD8h */ case   20:  		/* li R3, 0 */
		/* 8220EFD8h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220EFD8h case   20:*/		return 0x8220EFDC;
		  /* 8220EFDCh */ case   21:  		/* bl -750548 */
		/* 8220EFDCh case   21:*/		regs.LR = 0x8220EFE0; return 0x82157C08;
		/* 8220EFDCh case   21:*/		return 0x8220EFE0;
	}
	return 0x8220EFE0;
} // Block from 8220EF88h-8220EFE0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220EFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EFE0);
		  /* 8220EFE0h */ case    0:  		/* mr R5, R26 */
		/* 8220EFE0h case    0:*/		regs.R5 = regs.R26;
		/* 8220EFE0h case    0:*/		return 0x8220EFE4;
		  /* 8220EFE4h */ case    1:  		/* mr R4, R30 */
		/* 8220EFE4h case    1:*/		regs.R4 = regs.R30;
		/* 8220EFE4h case    1:*/		return 0x8220EFE8;
		  /* 8220EFE8h */ case    2:  		/* mr R3, R31 */
		/* 8220EFE8h case    2:*/		regs.R3 = regs.R31;
		/* 8220EFE8h case    2:*/		return 0x8220EFEC;
		  /* 8220EFECh */ case    3:  		/* bl -734428 */
		/* 8220EFECh case    3:*/		regs.LR = 0x8220EFF0; return 0x8215BB10;
		/* 8220EFECh case    3:*/		return 0x8220EFF0;
		  /* 8220EFF0h */ case    4:  		/* addi R1, R1, 144 */
		/* 8220EFF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220EFF0h case    4:*/		return 0x8220EFF4;
		  /* 8220EFF4h */ case    5:  		/* b -1563988 */
		/* 8220EFF4h case    5:*/		return 0x820912A0;
		/* 8220EFF4h case    5:*/		return 0x8220EFF8;
	}
	return 0x8220EFF8;
} // Block from 8220EFE0h-8220EFF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220EFF8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220EFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220EFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220EFF8);
		  /* 8220EFF8h */ case    0:  		/* mfspr R12, LR */
		/* 8220EFF8h case    0:*/		regs.R12 = regs.LR;
		/* 8220EFF8h case    0:*/		return 0x8220EFFC;
		  /* 8220EFFCh */ case    1:  		/* bl -1564072 */
		/* 8220EFFCh case    1:*/		regs.LR = 0x8220F000; return 0x82091254;
		/* 8220EFFCh case    1:*/		return 0x8220F000;
		  /* 8220F000h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220F000h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220F000h case    2:*/		return 0x8220F004;
		  /* 8220F004h */ case    3:  		/* lis R11, -32253 */
		/* 8220F004h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F004h case    3:*/		return 0x8220F008;
		  /* 8220F008h */ case    4:  		/* lis R10, -32252 */
		/* 8220F008h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F008h case    4:*/		return 0x8220F00C;
		  /* 8220F00Ch */ case    5:  		/* mr R31, R3 */
		/* 8220F00Ch case    5:*/		regs.R31 = regs.R3;
		/* 8220F00Ch case    5:*/		return 0x8220F010;
		  /* 8220F010h */ case    6:  		/* mr R30, R4 */
		/* 8220F010h case    6:*/		regs.R30 = regs.R4;
		/* 8220F010h case    6:*/		return 0x8220F014;
		  /* 8220F014h */ case    7:  		/* mr R29, R5 */
		/* 8220F014h case    7:*/		regs.R29 = regs.R5;
		/* 8220F014h case    7:*/		return 0x8220F018;
		  /* 8220F018h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220F018h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220F018h case    8:*/		return 0x8220F01C;
		  /* 8220F01Ch */ case    9:  		/* addi R28, R11, 27460 */
		/* 8220F01Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220F01Ch case    9:*/		return 0x8220F020;
		  /* 8220F020h */ case   10:  		/* addi R27, R10, -7496 */
		/* 8220F020h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE2B8);
		/* 8220F020h case   10:*/		return 0x8220F024;
		  /* 8220F024h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8220F024h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220F044;  }
		/* 8220F024h case   11:*/		return 0x8220F028;
		  /* 8220F028h */ case   12:  		/* lis R11, -32252 */
		/* 8220F028h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F028h case   12:*/		return 0x8220F02C;
		  /* 8220F02Ch */ case   13:  		/* mr R6, R27 */
		/* 8220F02Ch case   13:*/		regs.R6 = regs.R27;
		/* 8220F02Ch case   13:*/		return 0x8220F030;
		  /* 8220F030h */ case   14:  		/* addi R5, R11, -7328 */
		/* 8220F030h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE360);
		/* 8220F030h case   14:*/		return 0x8220F034;
		  /* 8220F034h */ case   15:  		/* mr R4, R28 */
		/* 8220F034h case   15:*/		regs.R4 = regs.R28;
		/* 8220F034h case   15:*/		return 0x8220F038;
		  /* 8220F038h */ case   16:  		/* li R7, 683 */
		/* 8220F038h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2AB);
		/* 8220F038h case   16:*/		return 0x8220F03C;
		  /* 8220F03Ch */ case   17:  		/* li R3, 0 */
		/* 8220F03Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F03Ch case   17:*/		return 0x8220F040;
		  /* 8220F040h */ case   18:  		/* bl -750648 */
		/* 8220F040h case   18:*/		regs.LR = 0x8220F044; return 0x82157C08;
		/* 8220F040h case   18:*/		return 0x8220F044;
	}
	return 0x8220F044;
} // Block from 8220EFF8h-8220F044h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220F044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F044);
		  /* 8220F044h */ case    0:  		/* li R5, 0 */
		/* 8220F044h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220F044h case    0:*/		return 0x8220F048;
		  /* 8220F048h */ case    1:  		/* mr R4, R29 */
		/* 8220F048h case    1:*/		regs.R4 = regs.R29;
		/* 8220F048h case    1:*/		return 0x8220F04C;
		  /* 8220F04Ch */ case    2:  		/* mr R3, R30 */
		/* 8220F04Ch case    2:*/		regs.R3 = regs.R30;
		/* 8220F04Ch case    2:*/		return 0x8220F050;
		  /* 8220F050h */ case    3:  		/* bl 156128 */
		/* 8220F050h case    3:*/		regs.LR = 0x8220F054; return 0x82235230;
		/* 8220F050h case    3:*/		return 0x8220F054;
		  /* 8220F054h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220F054h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220F054h case    4:*/		return 0x8220F058;
		  /* 8220F058h */ case    5:  		/* lwz R10, <#[R31]> */
		/* 8220F058h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F058h case    5:*/		return 0x8220F05C;
		  /* 8220F05Ch */ case    6:  		/* mr R30, R3 */
		/* 8220F05Ch case    6:*/		regs.R30 = regs.R3;
		/* 8220F05Ch case    6:*/		return 0x8220F060;
		  /* 8220F060h */ case    7:  		/* divwu R9, R3, R11 */
		/* 8220F060h case    7:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R3,regs.R11);
		/* 8220F060h case    7:*/		return 0x8220F064;
		  /* 8220F064h */ case    8:  		/* twi 6, R11, 0 */
		/* 8220F064h case    8:*/		cpu::op::tw<6>(regs, 0x8220F064, regs.R11, 0x00000000);
		/* 8220F064h case    8:*/		return 0x8220F068;
		  /* 8220F068h */ case    9:  		/* mullw R11, R9, R11 */
		/* 8220F068h case    9:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220F068h case    9:*/		return 0x8220F06C;
		  /* 8220F06Ch */ case   10:  		/* subf R11, R11, R3 */
		/* 8220F06Ch case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8220F06Ch case   10:*/		return 0x8220F070;
		  /* 8220F070h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220F070h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220F070h case   11:*/		return 0x8220F074;
		  /* 8220F074h */ case   12:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8220F074h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220F074h case   12:*/		return 0x8220F078;
		  /* 8220F078h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 8220F078h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220F078h case   13:*/		return 0x8220F07C;
		  /* 8220F07Ch */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220F07Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220F09C;  }
		/* 8220F07Ch case   14:*/		return 0x8220F080;
	}
	return 0x8220F080;
} // Block from 8220F044h-8220F080h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220F080h
// Function '?TX_Create@XGRAPHICS@@YAPAU_TS_TEXTURE_SERVER@1@PBU_TS_TXCREATE_INFO@1@PBU_SSM_SSMDEVICE2CLIENT_INTERFACE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F080);
		  /* 8220F080h */ case    0:  		/* lis R11, -32252 */
		/* 8220F080h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F080h case    0:*/		return 0x8220F084;
		  /* 8220F084h */ case    1:  		/* mr R6, R27 */
		/* 8220F084h case    1:*/		regs.R6 = regs.R27;
		/* 8220F084h case    1:*/		return 0x8220F088;
		  /* 8220F088h */ case    2:  		/* addi R5, R11, -21472 */
		/* 8220F088h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220F088h case    2:*/		return 0x8220F08C;
		  /* 8220F08Ch */ case    3:  		/* mr R4, R28 */
		/* 8220F08Ch case    3:*/		regs.R4 = regs.R28;
		/* 8220F08Ch case    3:*/		return 0x8220F090;
		  /* 8220F090h */ case    4:  		/* li R7, 694 */
		/* 8220F090h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2B6);
		/* 8220F090h case    4:*/		return 0x8220F094;
		  /* 8220F094h */ case    5:  		/* li R3, 0 */
		/* 8220F094h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F094h case    5:*/		return 0x8220F098;
		  /* 8220F098h */ case    6:  		/* bl -750736 */
		/* 8220F098h case    6:*/		regs.LR = 0x8220F09C; return 0x82157C08;
		/* 8220F098h case    6:*/		return 0x8220F09C;
	}
	return 0x8220F09C;
} // Block from 8220F080h-8220F09Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220F09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F09C);
		  /* 8220F09Ch */ case    0:  		/* mr R4, R30 */
		/* 8220F09Ch case    0:*/		regs.R4 = regs.R30;
		/* 8220F09Ch case    0:*/		return 0x8220F0A0;
		  /* 8220F0A0h */ case    1:  		/* mr R3, R31 */
		/* 8220F0A0h case    1:*/		regs.R3 = regs.R31;
		/* 8220F0A0h case    1:*/		return 0x8220F0A4;
		  /* 8220F0A4h */ case    2:  		/* bl -734124 */
		/* 8220F0A4h case    2:*/		regs.LR = 0x8220F0A8; return 0x8215BCF8;
		/* 8220F0A4h case    2:*/		return 0x8220F0A8;
		  /* 8220F0A8h */ case    3:  		/* or. R30, R3, R3 */
		/* 8220F0A8h case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8220F0A8h case    3:*/		return 0x8220F0AC;
		  /* 8220F0ACh */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 8220F0ACh case    4:*/		if ( regs.CR[0].eq ) { return 0x8220F0E0;  }
		/* 8220F0ACh case    4:*/		return 0x8220F0B0;
		  /* 8220F0B0h */ case    5:  		/* mr R3, R31 */
		/* 8220F0B0h case    5:*/		regs.R3 = regs.R31;
		/* 8220F0B0h case    5:*/		return 0x8220F0B4;
		  /* 8220F0B4h */ case    6:  		/* bl -733964 */
		/* 8220F0B4h case    6:*/		regs.LR = 0x8220F0B8; return 0x8215BDA8;
		/* 8220F0B4h case    6:*/		return 0x8220F0B8;
		  /* 8220F0B8h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8220F0B8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8220F0B8h case    7:*/		return 0x8220F0BC;
		  /* 8220F0BCh */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 8220F0BCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8220F0E0;  }
		/* 8220F0BCh case    8:*/		return 0x8220F0C0;
		  /* 8220F0C0h */ case    9:  		/* lis R11, -32252 */
		/* 8220F0C0h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F0C0h case    9:*/		return 0x8220F0C4;
		  /* 8220F0C4h */ case   10:  		/* mr R6, R27 */
		/* 8220F0C4h case   10:*/		regs.R6 = regs.R27;
		/* 8220F0C4h case   10:*/		return 0x8220F0C8;
		  /* 8220F0C8h */ case   11:  		/* addi R5, R11, -7404 */
		/* 8220F0C8h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE314);
		/* 8220F0C8h case   11:*/		return 0x8220F0CC;
		  /* 8220F0CCh */ case   12:  		/* mr R4, R28 */
		/* 8220F0CCh case   12:*/		regs.R4 = regs.R28;
		/* 8220F0CCh case   12:*/		return 0x8220F0D0;
		  /* 8220F0D0h */ case   13:  		/* li R7, 701 */
		/* 8220F0D0h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x2BD);
		/* 8220F0D0h case   13:*/		return 0x8220F0D4;
		  /* 8220F0D4h */ case   14:  		/* li R3, 0 */
		/* 8220F0D4h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F0D4h case   14:*/		return 0x8220F0D8;
		  /* 8220F0D8h */ case   15:  		/* bl -750800 */
		/* 8220F0D8h case   15:*/		regs.LR = 0x8220F0DC; return 0x82157C08;
		/* 8220F0D8h case   15:*/		return 0x8220F0DC;
		  /* 8220F0DCh */ case   16:  		/* li R30, 0 */
		/* 8220F0DCh case   16:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220F0DCh case   16:*/		return 0x8220F0E0;
	}
	return 0x8220F0E0;
} // Block from 8220F09Ch-8220F0E0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220F0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F0E0);
		  /* 8220F0E0h */ case    0:  		/* mr R3, R30 */
		/* 8220F0E0h case    0:*/		regs.R3 = regs.R30;
		/* 8220F0E0h case    0:*/		return 0x8220F0E4;
		  /* 8220F0E4h */ case    1:  		/* addi R1, R1, 128 */
		/* 8220F0E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220F0E4h case    1:*/		return 0x8220F0E8;
		  /* 8220F0E8h */ case    2:  		/* b -1564228 */
		/* 8220F0E8h case    2:*/		return 0x820912A4;
		/* 8220F0E8h case    2:*/		return 0x8220F0EC;
		  /* 8220F0ECh */ case    3:  		/* nop */
		/* 8220F0ECh case    3:*/		cpu::op::nop();
		/* 8220F0ECh case    3:*/		return 0x8220F0F0;
	}
	return 0x8220F0F0;
} // Block from 8220F0E0h-8220F0F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220F0F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F0F0);
		  /* 8220F0F0h */ case    0:  		/* mfspr R12, LR */
		/* 8220F0F0h case    0:*/		regs.R12 = regs.LR;
		/* 8220F0F0h case    0:*/		return 0x8220F0F4;
		  /* 8220F0F4h */ case    1:  		/* bl -1564320 */
		/* 8220F0F4h case    1:*/		regs.LR = 0x8220F0F8; return 0x82091254;
		/* 8220F0F4h case    1:*/		return 0x8220F0F8;
		  /* 8220F0F8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220F0F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220F0F8h case    2:*/		return 0x8220F0FC;
		  /* 8220F0FCh */ case    3:  		/* lis R11, -32253 */
		/* 8220F0FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F0FCh case    3:*/		return 0x8220F100;
		  /* 8220F100h */ case    4:  		/* lis R10, -32252 */
		/* 8220F100h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F100h case    4:*/		return 0x8220F104;
		  /* 8220F104h */ case    5:  		/* mr R31, R3 */
		/* 8220F104h case    5:*/		regs.R31 = regs.R3;
		/* 8220F104h case    5:*/		return 0x8220F108;
		  /* 8220F108h */ case    6:  		/* mr R30, R4 */
		/* 8220F108h case    6:*/		regs.R30 = regs.R4;
		/* 8220F108h case    6:*/		return 0x8220F10C;
		  /* 8220F10Ch */ case    7:  		/* mr R29, R5 */
		/* 8220F10Ch case    7:*/		regs.R29 = regs.R5;
		/* 8220F10Ch case    7:*/		return 0x8220F110;
		  /* 8220F110h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8220F110h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220F110h case    8:*/		return 0x8220F114;
		  /* 8220F114h */ case    9:  		/* addi R28, R11, 27460 */
		/* 8220F114h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220F114h case    9:*/		return 0x8220F118;
		  /* 8220F118h */ case   10:  		/* addi R27, R10, -7496 */
		/* 8220F118h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE2B8);
		/* 8220F118h case   10:*/		return 0x8220F11C;
		  /* 8220F11Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8220F11Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220F13C;  }
		/* 8220F11Ch case   11:*/		return 0x8220F120;
		  /* 8220F120h */ case   12:  		/* lis R11, -32252 */
		/* 8220F120h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F120h case   12:*/		return 0x8220F124;
		  /* 8220F124h */ case   13:  		/* mr R6, R27 */
		/* 8220F124h case   13:*/		regs.R6 = regs.R27;
		/* 8220F124h case   13:*/		return 0x8220F128;
		  /* 8220F128h */ case   14:  		/* addi R5, R11, -7328 */
		/* 8220F128h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE360);
		/* 8220F128h case   14:*/		return 0x8220F12C;
		  /* 8220F12Ch */ case   15:  		/* mr R4, R28 */
		/* 8220F12Ch case   15:*/		regs.R4 = regs.R28;
		/* 8220F12Ch case   15:*/		return 0x8220F130;
		  /* 8220F130h */ case   16:  		/* li R7, 746 */
		/* 8220F130h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2EA);
		/* 8220F130h case   16:*/		return 0x8220F134;
		  /* 8220F134h */ case   17:  		/* li R3, 0 */
		/* 8220F134h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F134h case   17:*/		return 0x8220F138;
		  /* 8220F138h */ case   18:  		/* bl -750896 */
		/* 8220F138h case   18:*/		regs.LR = 0x8220F13C; return 0x82157C08;
		/* 8220F138h case   18:*/		return 0x8220F13C;
	}
	return 0x8220F13C;
} // Block from 8220F0F0h-8220F13Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220F13Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F13C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F13C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F13C);
		  /* 8220F13Ch */ case    0:  		/* li R5, 0 */
		/* 8220F13Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220F13Ch case    0:*/		return 0x8220F140;
		  /* 8220F140h */ case    1:  		/* mr R4, R29 */
		/* 8220F140h case    1:*/		regs.R4 = regs.R29;
		/* 8220F140h case    1:*/		return 0x8220F144;
		  /* 8220F144h */ case    2:  		/* mr R3, R30 */
		/* 8220F144h case    2:*/		regs.R3 = regs.R30;
		/* 8220F144h case    2:*/		return 0x8220F148;
		  /* 8220F148h */ case    3:  		/* bl 155880 */
		/* 8220F148h case    3:*/		regs.LR = 0x8220F14C; return 0x82235230;
		/* 8220F148h case    3:*/		return 0x8220F14C;
		  /* 8220F14Ch */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 8220F14Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8220F14Ch case    4:*/		return 0x8220F150;
		  /* 8220F150h */ case    5:  		/* lwz R10, <#[R31]> */
		/* 8220F150h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F150h case    5:*/		return 0x8220F154;
		  /* 8220F154h */ case    6:  		/* mr R30, R3 */
		/* 8220F154h case    6:*/		regs.R30 = regs.R3;
		/* 8220F154h case    6:*/		return 0x8220F158;
		  /* 8220F158h */ case    7:  		/* divwu R9, R3, R11 */
		/* 8220F158h case    7:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R3,regs.R11);
		/* 8220F158h case    7:*/		return 0x8220F15C;
		  /* 8220F15Ch */ case    8:  		/* twi 6, R11, 0 */
		/* 8220F15Ch case    8:*/		cpu::op::tw<6>(regs, 0x8220F15C, regs.R11, 0x00000000);
		/* 8220F15Ch case    8:*/		return 0x8220F160;
		  /* 8220F160h */ case    9:  		/* mullw R11, R9, R11 */
		/* 8220F160h case    9:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220F160h case    9:*/		return 0x8220F164;
		  /* 8220F164h */ case   10:  		/* subf R11, R11, R3 */
		/* 8220F164h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8220F164h case   10:*/		return 0x8220F168;
		  /* 8220F168h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8220F168h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8220F168h case   11:*/		return 0x8220F16C;
		  /* 8220F16Ch */ case   12:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8220F16Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8220F16Ch case   12:*/		return 0x8220F170;
		  /* 8220F170h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 8220F170h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220F170h case   13:*/		return 0x8220F174;
		  /* 8220F174h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8220F174h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8220F194;  }
		/* 8220F174h case   14:*/		return 0x8220F178;
		  /* 8220F178h */ case   15:  		/* lis R11, -32252 */
		/* 8220F178h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F178h case   15:*/		return 0x8220F17C;
		  /* 8220F17Ch */ case   16:  		/* mr R6, R27 */
		/* 8220F17Ch case   16:*/		regs.R6 = regs.R27;
		/* 8220F17Ch case   16:*/		return 0x8220F180;
		  /* 8220F180h */ case   17:  		/* addi R5, R11, -21472 */
		/* 8220F180h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8220F180h case   17:*/		return 0x8220F184;
		  /* 8220F184h */ case   18:  		/* mr R4, R28 */
		/* 8220F184h case   18:*/		regs.R4 = regs.R28;
		/* 8220F184h case   18:*/		return 0x8220F188;
		  /* 8220F188h */ case   19:  		/* li R7, 757 */
		/* 8220F188h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x2F5);
		/* 8220F188h case   19:*/		return 0x8220F18C;
		  /* 8220F18Ch */ case   20:  		/* li R3, 0 */
		/* 8220F18Ch case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F18Ch case   20:*/		return 0x8220F190;
		  /* 8220F190h */ case   21:  		/* bl -750984 */
		/* 8220F190h case   21:*/		regs.LR = 0x8220F194; return 0x82157C08;
		/* 8220F190h case   21:*/		return 0x8220F194;
	}
	return 0x8220F194;
} // Block from 8220F13Ch-8220F194h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8220F194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F194);
		  /* 8220F194h */ case    0:  		/* mr R4, R30 */
		/* 8220F194h case    0:*/		regs.R4 = regs.R30;
		/* 8220F194h case    0:*/		return 0x8220F198;
		  /* 8220F198h */ case    1:  		/* mr R3, R31 */
		/* 8220F198h case    1:*/		regs.R3 = regs.R31;
		/* 8220F198h case    1:*/		return 0x8220F19C;
		  /* 8220F19Ch */ case    2:  		/* bl -734020 */
		/* 8220F19Ch case    2:*/		regs.LR = 0x8220F1A0; return 0x8215BE58;
		/* 8220F19Ch case    2:*/		return 0x8220F1A0;
		  /* 8220F1A0h */ case    3:  		/* addi R1, R1, 128 */
		/* 8220F1A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220F1A0h case    3:*/		return 0x8220F1A4;
		  /* 8220F1A4h */ case    4:  		/* b -1564416 */
		/* 8220F1A4h case    4:*/		return 0x820912A4;
		/* 8220F1A4h case    4:*/		return 0x8220F1A8;
	}
	return 0x8220F1A8;
} // Block from 8220F194h-8220F1A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220F1A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F1A8);
		  /* 8220F1A8h */ case    0:  		/* mfspr R12, LR */
		/* 8220F1A8h case    0:*/		regs.R12 = regs.LR;
		/* 8220F1A8h case    0:*/		return 0x8220F1AC;
		  /* 8220F1ACh */ case    1:  		/* bl -1564496 */
		/* 8220F1ACh case    1:*/		regs.LR = 0x8220F1B0; return 0x8209125C;
		/* 8220F1ACh case    1:*/		return 0x8220F1B0;
		  /* 8220F1B0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8220F1B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8220F1B0h case    2:*/		return 0x8220F1B4;
		  /* 8220F1B4h */ case    3:  		/* mr R29, R3 */
		/* 8220F1B4h case    3:*/		regs.R29 = regs.R3;
		/* 8220F1B4h case    3:*/		return 0x8220F1B8;
		  /* 8220F1B8h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8220F1B8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220F1B8h case    4:*/		return 0x8220F1BC;
		  /* 8220F1BCh */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8220F1BCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220F1E0;  }
		/* 8220F1BCh case    5:*/		return 0x8220F1C0;
		  /* 8220F1C0h */ case    6:  		/* lis R11, -32252 */
		/* 8220F1C0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F1C0h case    6:*/		return 0x8220F1C4;
		  /* 8220F1C4h */ case    7:  		/* lis R10, -32252 */
		/* 8220F1C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F1C4h case    7:*/		return 0x8220F1C8;
		  /* 8220F1C8h */ case    8:  		/* lis R9, -32253 */
		/* 8220F1C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220F1C8h case    8:*/		return 0x8220F1CC;
		  /* 8220F1CCh */ case    9:  		/* addi R6, R11, -7496 */
		/* 8220F1CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE2B8);
		/* 8220F1CCh case    9:*/		return 0x8220F1D0;
		  /* 8220F1D0h */ case   10:  		/* addi R5, R10, -7328 */
		/* 8220F1D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE360);
		/* 8220F1D0h case   10:*/		return 0x8220F1D4;
		  /* 8220F1D4h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220F1D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220F1D4h case   11:*/		return 0x8220F1D8;
		  /* 8220F1D8h */ case   12:  		/* li R7, 866 */
		/* 8220F1D8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x362);
		/* 8220F1D8h case   12:*/		return 0x8220F1DC;
		  /* 8220F1DCh */ case   13:  		/* bl -751060 */
		/* 8220F1DCh case   13:*/		regs.LR = 0x8220F1E0; return 0x82157C08;
		/* 8220F1DCh case   13:*/		return 0x8220F1E0;
	}
	return 0x8220F1E0;
} // Block from 8220F1A8h-8220F1E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8220F1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F1E0);
		  /* 8220F1E0h */ case    0:  		/* li R3, 0 */
		/* 8220F1E0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F1E0h case    0:*/		return 0x8220F1E4;
		  /* 8220F1E4h */ case    1:  		/* li R30, 0 */
		/* 8220F1E4h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8220F1E4h case    1:*/		return 0x8220F1E8;
		  /* 8220F1E8h */ case    2:  		/* li R31, 0 */
		/* 8220F1E8h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8220F1E8h case    2:*/		return 0x8220F1EC;
		  /* 8220F1ECh */ case    3:  		/* lwz R11, <#[R29 + 20]> */
		/* 8220F1ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8220F1ECh case    3:*/		return 0x8220F1F0;
		  /* 8220F1F0h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 8220F1F0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8220F1F0h case    4:*/		return 0x8220F1F4;
		  /* 8220F1F4h */ case    5:  		/* bc 4, CR6_LT, 44 */
		/* 8220F1F4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8220F220;  }
		/* 8220F1F4h case    5:*/		return 0x8220F1F8;
	}
	return 0x8220F1F8;
} // Block from 8220F1E0h-8220F1F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220F1F8h
// Function '?TX_IntTxRelease@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_TS_TEXTURE_SERVER@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F1F8);
		  /* 8220F1F8h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8220F1F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8220F1F8h case    0:*/		return 0x8220F1FC;
		  /* 8220F1FCh */ case    1:  		/* lwzx R11, <#[R31 + R11]> */
		/* 8220F1FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8220F1FCh case    1:*/		return 0x8220F200;
		  /* 8220F200h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8220F200h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220F200h case    2:*/		return 0x8220F204;
		  /* 8220F204h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8220F204h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220F210;  }
		/* 8220F204h case    3:*/		return 0x8220F208;
		  /* 8220F208h */ case    4:  		/* mr R3, R11 */
		/* 8220F208h case    4:*/		regs.R3 = regs.R11;
		/* 8220F208h case    4:*/		return 0x8220F20C;
		  /* 8220F20Ch */ case    5:  		/* bl -733884 */
		/* 8220F20Ch case    5:*/		regs.LR = 0x8220F210; return 0x8215BF50;
		/* 8220F20Ch case    5:*/		return 0x8220F210;
	}
	return 0x8220F210;
} // Block from 8220F1F8h-8220F210h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220F210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F210);
		  /* 8220F210h */ case    0:  		/* addi R30, R30, 1 */
		/* 8220F210h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8220F210h case    0:*/		return 0x8220F214;
		  /* 8220F214h */ case    1:  		/* addi R31, R31, 4 */
		/* 8220F214h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8220F214h case    1:*/		return 0x8220F218;
		  /* 8220F218h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8220F218h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8220F218h case    2:*/		return 0x8220F21C;
		  /* 8220F21Ch */ case    3:  		/* bc 12, CR6_EQ, -48 */
		/* 8220F21Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8220F1EC;  }
		/* 8220F21Ch case    3:*/		return 0x8220F220;
	}
	return 0x8220F220;
} // Block from 8220F210h-8220F220h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220F220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F220);
		  /* 8220F220h */ case    0:  		/* addi R1, R1, 112 */
		/* 8220F220h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8220F220h case    0:*/		return 0x8220F224;
		  /* 8220F224h */ case    1:  		/* b -1564536 */
		/* 8220F224h case    1:*/		return 0x820912AC;
		/* 8220F224h case    1:*/		return 0x8220F228;
	}
	return 0x8220F228;
} // Block from 8220F220h-8220F228h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F228);
		  /* 8220F228h */ case    0:  		/* mfspr R12, LR */
		/* 8220F228h case    0:*/		regs.R12 = regs.LR;
		/* 8220F228h case    0:*/		return 0x8220F22C;
		  /* 8220F22Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220F22Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220F22Ch case    1:*/		return 0x8220F230;
		  /* 8220F230h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220F230h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220F230h case    2:*/		return 0x8220F234;
		  /* 8220F234h */ case    3:  		/* lwz R11, <#[R3 + 28]> */
		/* 8220F234h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220F234h case    3:*/		return 0x8220F238;
		  /* 8220F238h */ case    4:  		/* li R8, 0 */
		/* 8220F238h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220F238h case    4:*/		return 0x8220F23C;
		  /* 8220F23Ch */ case    5:  		/* lwz R10, <#[R11 + 23200]> */
		/* 8220F23Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00005AA0) );
		/* 8220F23Ch case    5:*/		return 0x8220F240;
		  /* 8220F240h */ case    6:  		/* addi R9, R10, 1 */
		/* 8220F240h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 8220F240h case    6:*/		return 0x8220F244;
		  /* 8220F244h */ case    7:  		/* stw R9, <#[R11 + 23200]> */
		/* 8220F244h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00005AA0) );
		/* 8220F244h case    7:*/		return 0x8220F248;
		  /* 8220F248h */ case    8:  		/* add R9, R8, R10 */
		/* 8220F248h case    8:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 8220F248h case    8:*/		return 0x8220F24C;
		  /* 8220F24Ch */ case    9:  		/* rlwinm R3, R9, 0, 26, 31 */
		/* 8220F24Ch case    9:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R3,regs.R9);
		/* 8220F24Ch case    9:*/		return 0x8220F250;
		  /* 8220F250h */ case   10:  		/* addi R9, R3, 4456 */
		/* 8220F250h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0x1168);
		/* 8220F250h case   10:*/		return 0x8220F254;
		  /* 8220F254h */ case   11:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8220F254h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8220F254h case   11:*/		return 0x8220F258;
		  /* 8220F258h */ case   12:  		/* lwzx R7, <#[R9 + R11]> */
		/* 8220F258h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8220F258h case   12:*/		return 0x8220F25C;
		  /* 8220F25Ch */ case   13:  		/* cmpwi CR6, R7, -1 */
		/* 8220F25Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R7,0xFFFFFFFF);
		/* 8220F25Ch case   13:*/		return 0x8220F260;
		  /* 8220F260h */ case   14:  		/* bc 12, CR6_EQ, 72 */
		/* 8220F260h case   14:*/		if ( regs.CR[6].eq ) { return 0x8220F2A8;  }
		/* 8220F260h case   14:*/		return 0x8220F264;
		  /* 8220F264h */ case   15:  		/* addi R8, R8, 1 */
		/* 8220F264h case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8220F264h case   15:*/		return 0x8220F268;
		  /* 8220F268h */ case   16:  		/* cmplwi CR6, R8, 64 */
		/* 8220F268h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000040);
		/* 8220F268h case   16:*/		return 0x8220F26C;
		  /* 8220F26Ch */ case   17:  		/* bc 12, CR6_LT, -36 */
		/* 8220F26Ch case   17:*/		if ( regs.CR[6].lt ) { return 0x8220F248;  }
		/* 8220F26Ch case   17:*/		return 0x8220F270;
		  /* 8220F270h */ case   18:  		/* lis R11, -32252 */
		/* 8220F270h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F270h case   18:*/		return 0x8220F274;
		  /* 8220F274h */ case   19:  		/* lis R10, -32252 */
		/* 8220F274h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F274h case   19:*/		return 0x8220F278;
		  /* 8220F278h */ case   20:  		/* lis R9, -32253 */
		/* 8220F278h case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220F278h case   20:*/		return 0x8220F27C;
		  /* 8220F27Ch */ case   21:  		/* addi R6, R11, -7312 */
		/* 8220F27Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220F27Ch case   21:*/		return 0x8220F280;
		  /* 8220F280h */ case   22:  		/* addi R5, R10, -25364 */
		/* 8220F280h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 8220F280h case   22:*/		return 0x8220F284;
		  /* 8220F284h */ case   23:  		/* addi R4, R9, 27460 */
		/* 8220F284h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220F284h case   23:*/		return 0x8220F288;
		  /* 8220F288h */ case   24:  		/* li R7, 602 */
		/* 8220F288h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x25A);
		/* 8220F288h case   24:*/		return 0x8220F28C;
		  /* 8220F28Ch */ case   25:  		/* li R3, 0 */
		/* 8220F28Ch case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F28Ch case   25:*/		return 0x8220F290;
		  /* 8220F290h */ case   26:  		/* bl -751240 */
		/* 8220F290h case   26:*/		regs.LR = 0x8220F294; return 0x82157C08;
		/* 8220F290h case   26:*/		return 0x8220F294;
		  /* 8220F294h */ case   27:  		/* li R3, 0 */
		/* 8220F294h case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F294h case   27:*/		return 0x8220F298;
		  /* 8220F298h */ case   28:  		/* addi R1, R1, 96 */
		/* 8220F298h case   28:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220F298h case   28:*/		return 0x8220F29C;
		  /* 8220F29Ch */ case   29:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220F29Ch case   29:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220F29Ch case   29:*/		return 0x8220F2A0;
		  /* 8220F2A0h */ case   30:  		/* mtspr LR, R12 */
		/* 8220F2A0h case   30:*/		regs.LR = regs.R12;
		/* 8220F2A0h case   30:*/		return 0x8220F2A4;
		  /* 8220F2A4h */ case   31:  		/* bclr 20, CR0_LT */
		/* 8220F2A4h case   31:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220F2A4h case   31:*/		return 0x8220F2A8;
	}
	return 0x8220F2A8;
} // Block from 8220F228h-8220F2A8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8220F2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F2A8);
		  /* 8220F2A8h */ case    0:  		/* stwx R10, <#[R9 + R11]> */
		/* 8220F2A8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8220F2A8h case    0:*/		return 0x8220F2AC;
		  /* 8220F2ACh */ case    1:  		/* b -20 */
		/* 8220F2ACh case    1:*/		return 0x8220F298;
		/* 8220F2ACh case    1:*/		return 0x8220F2B0;
	}
	return 0x8220F2B0;
} // Block from 8220F2A8h-8220F2B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F2B0);
		  /* 8220F2B0h */ case    0:  		/* mfspr R12, LR */
		/* 8220F2B0h case    0:*/		regs.R12 = regs.LR;
		/* 8220F2B0h case    0:*/		return 0x8220F2B4;
		  /* 8220F2B4h */ case    1:  		/* bl -1564768 */
		/* 8220F2B4h case    1:*/		regs.LR = 0x8220F2B8; return 0x82091254;
		/* 8220F2B4h case    1:*/		return 0x8220F2B8;
		  /* 8220F2B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220F2B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220F2B8h case    2:*/		return 0x8220F2BC;
		  /* 8220F2BCh */ case    3:  		/* lwz R11, <#[R4]> */
		/* 8220F2BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8220F2BCh case    3:*/		return 0x8220F2C0;
		  /* 8220F2C0h */ case    4:  		/* mr R29, R3 */
		/* 8220F2C0h case    4:*/		regs.R29 = regs.R3;
		/* 8220F2C0h case    4:*/		return 0x8220F2C4;
		  /* 8220F2C4h */ case    5:  		/* mr R30, R4 */
		/* 8220F2C4h case    5:*/		regs.R30 = regs.R4;
		/* 8220F2C4h case    5:*/		return 0x8220F2C8;
		  /* 8220F2C8h */ case    6:  		/* mr R28, R5 */
		/* 8220F2C8h case    6:*/		regs.R28 = regs.R5;
		/* 8220F2C8h case    6:*/		return 0x8220F2CC;
		  /* 8220F2CCh */ case    7:  		/* mr R27, R6 */
		/* 8220F2CCh case    7:*/		regs.R27 = regs.R6;
		/* 8220F2CCh case    7:*/		return 0x8220F2D0;
		  /* 8220F2D0h */ case    8:  		/* b 32 */
		/* 8220F2D0h case    8:*/		return 0x8220F2F0;
		/* 8220F2D0h case    8:*/		return 0x8220F2D4;
		  /* 8220F2D4h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8220F2D4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8220F2D4h case    9:*/		return 0x8220F2D8;
		  /* 8220F2D8h */ case   10:  		/* cmplw CR6, R10, R28 */
		/* 8220F2D8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 8220F2D8h case   10:*/		return 0x8220F2DC;
		  /* 8220F2DCh */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 8220F2DCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8220F2EC;  }
		/* 8220F2DCh case   11:*/		return 0x8220F2E0;
		  /* 8220F2E0h */ case   12:  		/* lwz R10, <#[R11 + 8]> */
		/* 8220F2E0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8220F2E0h case   12:*/		return 0x8220F2E4;
		  /* 8220F2E4h */ case   13:  		/* cmplw CR6, R10, R27 */
		/* 8220F2E4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8220F2E4h case   13:*/		return 0x8220F2E8;
		  /* 8220F2E8h */ case   14:  		/* bc 12, CR6_EQ, 80 */
		/* 8220F2E8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8220F338;  }
		/* 8220F2E8h case   14:*/		return 0x8220F2EC;
	}
	return 0x8220F2EC;
} // Block from 8220F2B0h-8220F2ECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8220F2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F2EC);
		  /* 8220F2ECh */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 8220F2ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220F2ECh case    0:*/		return 0x8220F2F0;
	}
	return 0x8220F2F0;
} // Block from 8220F2ECh-8220F2F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220F2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F2F0);
		  /* 8220F2F0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8220F2F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220F2F0h case    0:*/		return 0x8220F2F4;
		  /* 8220F2F4h */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 8220F2F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220F2D4;  }
		/* 8220F2F4h case    1:*/		return 0x8220F2F8;
		  /* 8220F2F8h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 8220F2F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8220F2F8h case    2:*/		return 0x8220F2FC;
		  /* 8220F2FCh */ case    3:  		/* li R4, 16 */
		/* 8220F2FCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8220F2FCh case    3:*/		return 0x8220F300;
		  /* 8220F300h */ case    4:  		/* lwz R3, <#[R29]> */
		/* 8220F300h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8220F300h case    4:*/		return 0x8220F304;
		  /* 8220F304h */ case    5:  		/* mtspr CTR, R11 */
		/* 8220F304h case    5:*/		regs.CTR = regs.R11;
		/* 8220F304h case    5:*/		return 0x8220F308;
		  /* 8220F308h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8220F308h case    6:*/		if ( 1 ) { regs.LR = 0x8220F30C; return (uint32)regs.CTR; }
		/* 8220F308h case    6:*/		return 0x8220F30C;
		  /* 8220F30Ch */ case    7:  		/* mr R31, R3 */
		/* 8220F30Ch case    7:*/		regs.R31 = regs.R3;
		/* 8220F30Ch case    7:*/		return 0x8220F310;
		  /* 8220F310h */ case    8:  		/* mr R3, R29 */
		/* 8220F310h case    8:*/		regs.R3 = regs.R29;
		/* 8220F310h case    8:*/		return 0x8220F314;
		  /* 8220F314h */ case    9:  		/* bl -236 */
		/* 8220F314h case    9:*/		regs.LR = 0x8220F318; return 0x8220F228;
		/* 8220F314h case    9:*/		return 0x8220F318;
	}
	return 0x8220F318;
} // Block from 8220F2F0h-8220F318h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220F318h
// Function '?AS_GetStateF@XGRAPHICS@@YAMPAU_ABSTRACT_STATE@1@W4_E_AS_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F318);
		  /* 8220F318h */ case    0:  		/* stw R28, <#[R31 + 4]> */
		/* 8220F318h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F318h case    0:*/		return 0x8220F31C;
		  /* 8220F31Ch */ case    1:  		/* stw R3, <#[R31]> */
		/* 8220F31Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F31Ch case    1:*/		return 0x8220F320;
		  /* 8220F320h */ case    2:  		/* stw R27, <#[R31 + 8]> */
		/* 8220F320h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F320h case    2:*/		return 0x8220F324;
		  /* 8220F324h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 8220F324h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F324h case    3:*/		return 0x8220F328;
		  /* 8220F328h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8220F328h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220F328h case    4:*/		return 0x8220F32C;
		  /* 8220F32Ch */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8220F32Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220F340;  }
		/* 8220F32Ch case    5:*/		return 0x8220F330;
		  /* 8220F330h */ case    6:  		/* stw R31, <#[R30]> */
		/* 8220F330h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F330h case    6:*/		return 0x8220F334;
		  /* 8220F334h */ case    7:  		/* b 20 */
		/* 8220F334h case    7:*/		return 0x8220F348;
		/* 8220F334h case    7:*/		return 0x8220F338;
	}
	return 0x8220F338;
} // Block from 8220F318h-8220F338h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220F338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F338);
		  /* 8220F338h */ case    0:  		/* lwz R3, <#[R11]> */
		/* 8220F338h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8220F338h case    0:*/		return 0x8220F33C;
		  /* 8220F33Ch */ case    1:  		/* b 28 */
		/* 8220F33Ch case    1:*/		return 0x8220F358;
		/* 8220F33Ch case    1:*/		return 0x8220F340;
	}
	return 0x8220F340;
} // Block from 8220F338h-8220F340h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F340);
		  /* 8220F340h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8220F340h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F340h case    0:*/		return 0x8220F344;
		  /* 8220F344h */ case    1:  		/* stw R31, <#[R11 + 12]> */
		/* 8220F344h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 8220F344h case    1:*/		return 0x8220F348;
	}
	return 0x8220F348;
} // Block from 8220F340h-8220F348h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F348);
		  /* 8220F348h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220F348h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F348h case    0:*/		return 0x8220F34C;
		  /* 8220F34Ch */ case    1:  		/* stw R31, <#[R30 + 4]> */
		/* 8220F34Ch case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F34Ch case    1:*/		return 0x8220F350;
		  /* 8220F350h */ case    2:  		/* addi R11, R11, 1 */
		/* 8220F350h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220F350h case    2:*/		return 0x8220F354;
		  /* 8220F354h */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 8220F354h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F354h case    3:*/		return 0x8220F358;
	}
	return 0x8220F358;
} // Block from 8220F348h-8220F358h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220F358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F358);
		  /* 8220F358h */ case    0:  		/* addi R1, R1, 128 */
		/* 8220F358h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220F358h case    0:*/		return 0x8220F35C;
		  /* 8220F35Ch */ case    1:  		/* b -1564856 */
		/* 8220F35Ch case    1:*/		return 0x820912A4;
		/* 8220F35Ch case    1:*/		return 0x8220F360;
	}
	return 0x8220F360;
} // Block from 8220F358h-8220F360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F360);
		  /* 8220F360h */ case    0:  		/* mfspr R12, LR */
		/* 8220F360h case    0:*/		regs.R12 = regs.LR;
		/* 8220F360h case    0:*/		return 0x8220F364;
		  /* 8220F364h */ case    1:  		/* bl -1564940 */
		/* 8220F364h case    1:*/		regs.LR = 0x8220F368; return 0x82091258;
		/* 8220F364h case    1:*/		return 0x8220F368;
		  /* 8220F368h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220F368h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220F368h case    2:*/		return 0x8220F36C;
		  /* 8220F36Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8220F36Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8220F36Ch case    3:*/		return 0x8220F370;
		  /* 8220F370h */ case    4:  		/* mr R31, R4 */
		/* 8220F370h case    4:*/		regs.R31 = regs.R4;
		/* 8220F370h case    4:*/		return 0x8220F374;
		  /* 8220F374h */ case    5:  		/* li R4, 24 */
		/* 8220F374h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8220F374h case    5:*/		return 0x8220F378;
		  /* 8220F378h */ case    6:  		/* lwz R3, <#[R3]> */
		/* 8220F378h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8220F378h case    6:*/		return 0x8220F37C;
		  /* 8220F37Ch */ case    7:  		/* mr R29, R5 */
		/* 8220F37Ch case    7:*/		regs.R29 = regs.R5;
		/* 8220F37Ch case    7:*/		return 0x8220F380;
		  /* 8220F380h */ case    8:  		/* mr R28, R6 */
		/* 8220F380h case    8:*/		regs.R28 = regs.R6;
		/* 8220F380h case    8:*/		return 0x8220F384;
		  /* 8220F384h */ case    9:  		/* mr R30, R7 */
		/* 8220F384h case    9:*/		regs.R30 = regs.R7;
		/* 8220F384h case    9:*/		return 0x8220F388;
	}
	return 0x8220F388;
} // Block from 8220F360h-8220F388h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220F388h
// Function '?TX_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_TS_TEXTURE_SERVER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F388);
		  /* 8220F388h */ case    0:  		/* mtspr CTR, R11 */
		/* 8220F388h case    0:*/		regs.CTR = regs.R11;
		/* 8220F388h case    0:*/		return 0x8220F38C;
		  /* 8220F38Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8220F38Ch case    1:*/		if ( 1 ) { regs.LR = 0x8220F390; return (uint32)regs.CTR; }
		/* 8220F38Ch case    1:*/		return 0x8220F390;
		  /* 8220F390h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 8220F390h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220F390h case    2:*/		return 0x8220F394;
		  /* 8220F394h */ case    3:  		/* stw R29, <#[R3 + 4]> */
		/* 8220F394h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		/* 8220F394h case    3:*/		return 0x8220F398;
		  /* 8220F398h */ case    4:  		/* stw R28, <#[R3]> */
		/* 8220F398h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8220F398h case    4:*/		return 0x8220F39C;
		  /* 8220F39Ch */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8220F39Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8220F3B8;  }
		/* 8220F39Ch case    5:*/		return 0x8220F3A0;
		  /* 8220F3A0h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 8220F3A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F3A0h case    6:*/		return 0x8220F3A4;
		  /* 8220F3A4h */ case    7:  		/* stw R11, <#[R3 + 8]> */
		/* 8220F3A4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8220F3A4h case    7:*/		return 0x8220F3A8;
		  /* 8220F3A8h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 8220F3A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F3A8h case    8:*/		return 0x8220F3AC;
		  /* 8220F3ACh */ case    9:  		/* stw R11, <#[R3 + 12]> */
		/* 8220F3ACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8220F3ACh case    9:*/		return 0x8220F3B0;
		  /* 8220F3B0h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 8220F3B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F3B0h case   10:*/		return 0x8220F3B4;
		  /* 8220F3B4h */ case   11:  		/* stw R11, <#[R3 + 16]> */
		/* 8220F3B4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8220F3B4h case   11:*/		return 0x8220F3B8;
	}
	return 0x8220F3B8;
} // Block from 8220F388h-8220F3B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220F3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F3B8);
		  /* 8220F3B8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220F3B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F3B8h case    0:*/		return 0x8220F3BC;
		  /* 8220F3BCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8220F3BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220F3BCh case    1:*/		return 0x8220F3C0;
		  /* 8220F3C0h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8220F3C0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220F3CC;  }
		/* 8220F3C0h case    2:*/		return 0x8220F3C4;
		  /* 8220F3C4h */ case    3:  		/* stw R3, <#[R31]> */
		/* 8220F3C4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F3C4h case    3:*/		return 0x8220F3C8;
		  /* 8220F3C8h */ case    4:  		/* b 12 */
		/* 8220F3C8h case    4:*/		return 0x8220F3D4;
		/* 8220F3C8h case    4:*/		return 0x8220F3CC;
	}
	return 0x8220F3CC;
} // Block from 8220F3B8h-8220F3CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220F3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F3CC);
		  /* 8220F3CCh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8220F3CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F3CCh case    0:*/		return 0x8220F3D0;
		  /* 8220F3D0h */ case    1:  		/* stw R3, <#[R11 + 20]> */
		/* 8220F3D0h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000014) );
		/* 8220F3D0h case    1:*/		return 0x8220F3D4;
	}
	return 0x8220F3D4;
} // Block from 8220F3CCh-8220F3D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F3D4);
		  /* 8220F3D4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220F3D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F3D4h case    0:*/		return 0x8220F3D8;
		  /* 8220F3D8h */ case    1:  		/* stw R3, <#[R31 + 4]> */
		/* 8220F3D8h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F3D8h case    1:*/		return 0x8220F3DC;
		  /* 8220F3DCh */ case    2:  		/* addi R11, R11, 1 */
		/* 8220F3DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220F3DCh case    2:*/		return 0x8220F3E0;
		  /* 8220F3E0h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 8220F3E0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F3E0h case    3:*/		return 0x8220F3E4;
		  /* 8220F3E4h */ case    4:  		/* addi R1, R1, 128 */
		/* 8220F3E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220F3E4h case    4:*/		return 0x8220F3E8;
		  /* 8220F3E8h */ case    5:  		/* b -1564992 */
		/* 8220F3E8h case    5:*/		return 0x820912A8;
		/* 8220F3E8h case    5:*/		return 0x8220F3EC;
		  /* 8220F3ECh */ case    6:  		/* nop */
		/* 8220F3ECh case    6:*/		cpu::op::nop();
		/* 8220F3ECh case    6:*/		return 0x8220F3F0;
	}
	return 0x8220F3F0;
} // Block from 8220F3D4h-8220F3F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220F3F0h
// Function '?HASHTABLE_Create@XGRAPHICS@@YAPAU_HASH_TABLE@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_ORDERED_LIST_FACTORY@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F3F0);
		  /* 8220F3F0h */ case    0:  		/* mfspr R12, LR */
		/* 8220F3F0h case    0:*/		regs.R12 = regs.LR;
		/* 8220F3F0h case    0:*/		return 0x8220F3F4;
		  /* 8220F3F4h */ case    1:  		/* bl -1565104 */
		/* 8220F3F4h case    1:*/		regs.LR = 0x8220F3F8; return 0x82091244;
		/* 8220F3F4h case    1:*/		return 0x8220F3F8;
		  /* 8220F3F8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8220F3F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8220F3F8h case    2:*/		return 0x8220F3FC;
		  /* 8220F3FCh */ case    3:  		/* li R25, 0 */
		/* 8220F3FCh case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8220F3FCh case    3:*/		return 0x8220F400;
		  /* 8220F400h */ case    4:  		/* lwz R28, <#[R3 + 28]> */
		/* 8220F400h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220F400h case    4:*/		return 0x8220F404;
		  /* 8220F404h */ case    5:  		/* mr R30, R4 */
		/* 8220F404h case    5:*/		regs.R30 = regs.R4;
		/* 8220F404h case    5:*/		return 0x8220F408;
		  /* 8220F408h */ case    6:  		/* stw R25, <#[R1 + 80]> */
		/* 8220F408h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 8220F408h case    6:*/		return 0x8220F40C;
		  /* 8220F40Ch */ case    7:  		/* mr R26, R5 */
		/* 8220F40Ch case    7:*/		regs.R26 = regs.R5;
		/* 8220F40Ch case    7:*/		return 0x8220F410;
		  /* 8220F410h */ case    8:  		/* mr R29, R7 */
		/* 8220F410h case    8:*/		regs.R29 = regs.R7;
		/* 8220F410h case    8:*/		return 0x8220F414;
		  /* 8220F414h */ case    9:  		/* mr R4, R5 */
		/* 8220F414h case    9:*/		regs.R4 = regs.R5;
		/* 8220F414h case    9:*/		return 0x8220F418;
		  /* 8220F418h */ case   10:  		/* mr R31, R6 */
		/* 8220F418h case   10:*/		regs.R31 = regs.R6;
		/* 8220F418h case   10:*/		return 0x8220F41C;
		  /* 8220F41Ch */ case   11:  		/* lwz R6, <#[R3 + 12]> */
		/* 8220F41Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x0000000C) );
		/* 8220F41Ch case   11:*/		return 0x8220F420;
		  /* 8220F420h */ case   12:  		/* li R8, 0 */
		/* 8220F420h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220F420h case   12:*/		return 0x8220F424;
		  /* 8220F424h */ case   13:  		/* li R7, 0 */
		/* 8220F424h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220F424h case   13:*/		return 0x8220F428;
		  /* 8220F428h */ case   14:  		/* addi R5, R1, 80 */
		/* 8220F428h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8220F428h case   14:*/		return 0x8220F42C;
		  /* 8220F42Ch */ case   15:  		/* mr R27, R3 */
		/* 8220F42Ch case   15:*/		regs.R27 = regs.R3;
		/* 8220F42Ch case   15:*/		return 0x8220F430;
		  /* 8220F430h */ case   16:  		/* lwz R3, <#[R3 + 20]> */
		/* 8220F430h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000014) );
		/* 8220F430h case   16:*/		return 0x8220F434;
		  /* 8220F434h */ case   17:  		/* bl 146212 */
		/* 8220F434h case   17:*/		regs.LR = 0x8220F438; return 0x82232F58;
		/* 8220F434h case   17:*/		return 0x8220F438;
		  /* 8220F438h */ case   18:  		/* mr R4, R26 */
		/* 8220F438h case   18:*/		regs.R4 = regs.R26;
		/* 8220F438h case   18:*/		return 0x8220F43C;
		  /* 8220F43Ch */ case   19:  		/* li R8, 0 */
		/* 8220F43Ch case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220F43Ch case   19:*/		return 0x8220F440;
		  /* 8220F440h */ case   20:  		/* lwz R6, <#[R27 + 12]> */
		/* 8220F440h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x0000000C) );
		/* 8220F440h case   20:*/		return 0x8220F444;
		  /* 8220F444h */ case   21:  		/* li R7, 0 */
		/* 8220F444h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220F444h case   21:*/		return 0x8220F448;
		  /* 8220F448h */ case   22:  		/* lwz R3, <#[R27 + 20]> */
		/* 8220F448h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000014) );
		/* 8220F448h case   22:*/		return 0x8220F44C;
		  /* 8220F44Ch */ case   23:  		/* addi R5, R1, 112 */
		/* 8220F44Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8220F44Ch case   23:*/		return 0x8220F450;
		  /* 8220F450h */ case   24:  		/* bl 144536 */
		/* 8220F450h case   24:*/		regs.LR = 0x8220F454; return 0x822328E8;
		/* 8220F450h case   24:*/		return 0x8220F454;
		  /* 8220F454h */ case   25:  		/* mr R4, R26 */
		/* 8220F454h case   25:*/		regs.R4 = regs.R26;
		/* 8220F454h case   25:*/		return 0x8220F458;
		  /* 8220F458h */ case   26:  		/* li R9, 0 */
		/* 8220F458h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8220F458h case   26:*/		return 0x8220F45C;
		  /* 8220F45Ch */ case   27:  		/* lwz R7, <#[R27 + 12]> */
		/* 8220F45Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x0000000C) );
		/* 8220F45Ch case   27:*/		return 0x8220F460;
		  /* 8220F460h */ case   28:  		/* li R8, 0 */
		/* 8220F460h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8220F460h case   28:*/		return 0x8220F464;
		  /* 8220F464h */ case   29:  		/* lwz R3, <#[R27 + 20]> */
		/* 8220F464h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000014) );
		/* 8220F464h case   29:*/		return 0x8220F468;
		  /* 8220F468h */ case   30:  		/* addi R6, R1, 84 */
		/* 8220F468h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8220F468h case   30:*/		return 0x8220F46C;
		  /* 8220F46Ch */ case   31:  		/* li R5, 0 */
		/* 8220F46Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220F46Ch case   31:*/		return 0x8220F470;
		  /* 8220F470h */ case   32:  		/* bl 145176 */
		/* 8220F470h case   32:*/		regs.LR = 0x8220F474; return 0x82232B88;
		/* 8220F470h case   32:*/		return 0x8220F474;
		  /* 8220F474h */ case   33:  		/* lwz R11, <#[R27 + 28]> */
		/* 8220F474h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8220F474h case   33:*/		return 0x8220F478;
		  /* 8220F478h */ case   34:  		/* addi R8, R1, 92 */
		/* 8220F478h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x5C);
		/* 8220F478h case   34:*/		return 0x8220F47C;
		  /* 8220F47Ch */ case   35:  		/* lwz R3, <#[R27 + 16]> */
		/* 8220F47Ch case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000010) );
		/* 8220F47Ch case   35:*/		return 0x8220F480;
		  /* 8220F480h */ case   36:  		/* addi R7, R1, 88 */
		/* 8220F480h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8220F480h case   36:*/		return 0x8220F484;
		  /* 8220F484h */ case   37:  		/* mr R6, R26 */
		/* 8220F484h case   37:*/		regs.R6 = regs.R26;
		/* 8220F484h case   37:*/		return 0x8220F488;
		  /* 8220F488h */ case   38:  		/* li R5, 1 */
		/* 8220F488h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8220F488h case   38:*/		return 0x8220F48C;
		  /* 8220F48Ch */ case   39:  		/* lwz R4, <#[R11]> */
		/* 8220F48Ch case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8220F48Ch case   39:*/		return 0x8220F490;
		  /* 8220F490h */ case   40:  		/* bl 68424 */
		/* 8220F490h case   40:*/		regs.LR = 0x8220F494; return 0x8221FFD8;
		/* 8220F490h case   40:*/		return 0x8220F494;
		  /* 8220F494h */ case   41:  		/* lis R11, -32253 */
		/* 8220F494h case   41:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F494h case   41:*/		return 0x8220F498;
		  /* 8220F498h */ case   42:  		/* lis R10, -32252 */
		/* 8220F498h case   42:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F498h case   42:*/		return 0x8220F49C;
		  /* 8220F49Ch */ case   43:  		/* addi R24, R11, 27460 */
		/* 8220F49Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 8220F49Ch case   43:*/		return 0x8220F4A0;
		  /* 8220F4A0h */ case   44:  		/* addi R23, R10, -7312 */
		/* 8220F4A0h case   44:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFE370);
		/* 8220F4A0h case   44:*/		return 0x8220F4A4;
		  /* 8220F4A4h */ case   45:  		/* lwz R11, <#[R1 + 80]> */
		/* 8220F4A4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8220F4A4h case   45:*/		return 0x8220F4A8;
		  /* 8220F4A8h */ case   46:  		/* cmpwi CR6, R11, 1 */
		/* 8220F4A8h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220F4A8h case   46:*/		return 0x8220F4AC;
		  /* 8220F4ACh */ case   47:  		/* bc 12, CR6_EQ, 32 */
		/* 8220F4ACh case   47:*/		if ( regs.CR[6].eq ) { return 0x8220F4CC;  }
		/* 8220F4ACh case   47:*/		return 0x8220F4B0;
		  /* 8220F4B0h */ case   48:  		/* lis R11, -32252 */
		/* 8220F4B0h case   48:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F4B0h case   48:*/		return 0x8220F4B4;
		  /* 8220F4B4h */ case   49:  		/* mr R6, R23 */
		/* 8220F4B4h case   49:*/		regs.R6 = regs.R23;
		/* 8220F4B4h case   49:*/		return 0x8220F4B8;
		  /* 8220F4B8h */ case   50:  		/* addi R5, R11, -7144 */
		/* 8220F4B8h case   50:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE418);
		/* 8220F4B8h case   50:*/		return 0x8220F4BC;
		  /* 8220F4BCh */ case   51:  		/* mr R4, R24 */
		/* 8220F4BCh case   51:*/		regs.R4 = regs.R24;
		/* 8220F4BCh case   51:*/		return 0x8220F4C0;
		  /* 8220F4C0h */ case   52:  		/* li R7, 1272 */
		/* 8220F4C0h case   52:*/		cpu::op::li<0>(regs,&regs.R7,0x4F8);
		/* 8220F4C0h case   52:*/		return 0x8220F4C4;
		  /* 8220F4C4h */ case   53:  		/* li R3, 0 */
		/* 8220F4C4h case   53:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F4C4h case   53:*/		return 0x8220F4C8;
		  /* 8220F4C8h */ case   54:  		/* bl -751808 */
		/* 8220F4C8h case   54:*/		regs.LR = 0x8220F4CC; return 0x82157C08;
		/* 8220F4C8h case   54:*/		return 0x8220F4CC;
	}
	return 0x8220F4CC;
} // Block from 8220F3F0h-8220F4CCh (55 instructions)

//////////////////////////////////////////////////////
// Block at 8220F4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F4CC);
		  /* 8220F4CCh */ case    0:  		/* rlwimi R30, R31, 7, 19, 24 */
		/* 8220F4CCh case    0:*/		cpu::op::rlwimi<0,7,19,24>(regs,&regs.R30,regs.R31);
		/* 8220F4CCh case    0:*/		return 0x8220F4D0;
		  /* 8220F4D0h */ case    1:  		/* lwz R31, <#[R28 + 12024]> */
		/* 8220F4D0h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00002EF8) );
		/* 8220F4D0h case    1:*/		return 0x8220F4D4;
		  /* 8220F4D4h */ case    2:  		/* rlwinm R11, R29, 0, 30, 31 */
		/* 8220F4D4h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R29);
		/* 8220F4D4h case    2:*/		return 0x8220F4D8;
		  /* 8220F4D8h */ case    3:  		/* rlwinm R10, R30, 14, 5, 17 */
		/* 8220F4D8h case    3:*/		cpu::op::rlwinm<0,14,5,17>(regs,&regs.R10,regs.R30);
		/* 8220F4D8h case    3:*/		return 0x8220F4DC;
		  /* 8220F4DCh */ case    4:  		/* li R26, 3 */
		/* 8220F4DCh case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 8220F4DCh case    4:*/		return 0x8220F4E0;
	}
	return 0x8220F4E0;
} // Block from 8220F4CCh-8220F4E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220F4E0h
// Function '?HASHTABLE_Destroy@XGRAPHICS@@YAXPAU_HASH_TABLE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F4E0);
		  /* 8220F4E0h */ case    0:  		/* rlwinm R10, R10, 0, 12, 10 */
		/* 8220F4E0h case    0:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R10,regs.R10);
		/* 8220F4E0h case    0:*/		return 0x8220F4E4;
		  /* 8220F4E4h */ case    1:  		/* lwz R9, <#[R31]> */
		/* 8220F4E4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F4E4h case    1:*/		return 0x8220F4E8;
		  /* 8220F4E8h */ case    2:  		/* mr R29, R25 */
		/* 8220F4E8h case    2:*/		regs.R29 = regs.R25;
		/* 8220F4E8h case    2:*/		return 0x8220F4EC;
		  /* 8220F4ECh */ case    3:  		/* lwz R8, <#[R31 + 4]> */
		/* 8220F4ECh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F4ECh case    3:*/		return 0x8220F4F0;
		  /* 8220F4F0h */ case    4:  		/* addi R30, R1, 96 */
		/* 8220F4F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x60);
		/* 8220F4F0h case    4:*/		return 0x8220F4F4;
		  /* 8220F4F4h */ case    5:  		/* rlwinm R9, R9, 0, 20, 29 */
		/* 8220F4F4h case    5:*/		cpu::op::rlwinm<0,0,20,29>(regs,&regs.R9,regs.R9);
		/* 8220F4F4h case    5:*/		return 0x8220F4F8;
		  /* 8220F4F8h */ case    6:  		/* rlwinm R8, R8, 0, 31, 29 */
		/* 8220F4F8h case    6:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R8,regs.R8);
		/* 8220F4F8h case    6:*/		return 0x8220F4FC;
		  /* 8220F4FCh */ case    7:  		/* or R10, R10, R9 */
		/* 8220F4FCh case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8220F4FCh case    7:*/		return 0x8220F500;
		  /* 8220F500h */ case    8:  		/* rlwinm R8, R8, 0, 24, 21 */
		/* 8220F500h case    8:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R8,regs.R8);
		/* 8220F500h case    8:*/		return 0x8220F504;
		  /* 8220F504h */ case    9:  		/* or R11, R10, R11 */
		/* 8220F504h case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220F504h case    9:*/		return 0x8220F508;
		  /* 8220F508h */ case   10:  		/* ori R11, R11, 4096 */
		/* 8220F508h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 8220F508h case   10:*/		return 0x8220F50C;
		  /* 8220F50Ch */ case   11:  		/* mr R10, R11 */
		/* 8220F50Ch case   11:*/		regs.R10 = regs.R11;
		/* 8220F50Ch case   11:*/		return 0x8220F510;
		  /* 8220F510h */ case   12:  		/* stw R11, <#[R31]> */
		/* 8220F510h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F510h case   12:*/		return 0x8220F514;
		  /* 8220F514h */ case   13:  		/* lwz R11, <#[R1 + 88]> */
		/* 8220F514h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8220F514h case   13:*/		return 0x8220F518;
		  /* 8220F518h */ case   14:  		/* rlwimi R10, R11, 7, 20, 24 */
		/* 8220F518h case   14:*/		cpu::op::rlwimi<0,7,20,24>(regs,&regs.R10,regs.R11);
		/* 8220F518h case   14:*/		return 0x8220F51C;
		  /* 8220F51Ch */ case   15:  		/* mr R11, R10 */
		/* 8220F51Ch case   15:*/		regs.R11 = regs.R10;
		/* 8220F51Ch case   15:*/		return 0x8220F520;
		  /* 8220F520h */ case   16:  		/* stw R10, <#[R31]> */
		/* 8220F520h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F520h case   16:*/		return 0x8220F524;
		  /* 8220F524h */ case   17:  		/* lwz R10, <#[R1 + 92]> */
		/* 8220F524h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8220F524h case   17:*/		return 0x8220F528;
		  /* 8220F528h */ case   18:  		/* rlwimi R11, R10, 5, 25, 26 */
		/* 8220F528h case   18:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R11,regs.R10);
		/* 8220F528h case   18:*/		return 0x8220F52C;
		  /* 8220F52Ch */ case   19:  		/* stw R11, <#[R31]> */
		/* 8220F52Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F52Ch case   19:*/		return 0x8220F530;
		  /* 8220F530h */ case   20:  		/* lwz R11, <#[R1 + 140]> */
		/* 8220F530h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8220F530h case   20:*/		return 0x8220F534;
		  /* 8220F534h */ case   21:  		/* srawi R11, R11, 2 */
		/* 8220F534h case   21:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 8220F534h case   21:*/		return 0x8220F538;
		  /* 8220F538h */ case   22:  		/* addze R11, R11 */
		/* 8220F538h case   22:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8220F538h case   22:*/		return 0x8220F53C;
		  /* 8220F53Ch */ case   23:  		/* lwz R10, <#[R31]> */
		/* 8220F53Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F53Ch case   23:*/		return 0x8220F540;
		  /* 8220F540h */ case   24:  		/* stb R11, <#[R31 + 8]> */
		/* 8220F540h case   24:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F540h case   24:*/		return 0x8220F544;
		  /* 8220F544h */ case   25:  		/* lwz R11, <#[R31 + 8]> */
		/* 8220F544h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F544h case   25:*/		return 0x8220F548;
		  /* 8220F548h */ case   26:  		/* lwz R9, <#[R1 + 144]> */
		/* 8220F548h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000090) );
		/* 8220F548h case   26:*/		return 0x8220F54C;
		  /* 8220F54Ch */ case   27:  		/* srawi R9, R9, 2 */
		/* 8220F54Ch case   27:*/		cpu::op::srawi<0,2>(regs,&regs.R9,regs.R9);
		/* 8220F54Ch case   27:*/		return 0x8220F550;
		  /* 8220F550h */ case   28:  		/* addze R9, R9 */
		/* 8220F550h case   28:*/		cpu::op::addze<0>(regs,&regs.R9,regs.R9);
		/* 8220F550h case   28:*/		return 0x8220F554;
		  /* 8220F554h */ case   29:  		/* stw R8, <#[R31 + 4]> */
		/* 8220F554h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F554h case   29:*/		return 0x8220F558;
		  /* 8220F558h */ case   30:  		/* rlwimi R10, R26, 2, 27, 29 */
		/* 8220F558h case   30:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R10,regs.R26);
		/* 8220F558h case   30:*/		return 0x8220F55C;
		  /* 8220F55Ch */ case   31:  		/* rlwimi R11, R9, 1, 8, 30 */
		/* 8220F55Ch case   31:*/		cpu::op::rlwimi<0,1,8,30>(regs,&regs.R11,regs.R9);
		/* 8220F55Ch case   31:*/		return 0x8220F560;
		  /* 8220F560h */ case   32:  		/* stw R10, <#[R31]> */
		/* 8220F560h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F560h case   32:*/		return 0x8220F564;
		  /* 8220F564h */ case   33:  		/* stw R11, <#[R31 + 8]> */
		/* 8220F564h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8220F564h case   33:*/		return 0x8220F568;
		  /* 8220F568h */ case   34:  		/* lis R11, -32252 */
		/* 8220F568h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F568h case   34:*/		return 0x8220F56C;
		  /* 8220F56Ch */ case   35:  		/* lwz R9, <#[R1 + 84]> */
		/* 8220F56Ch case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8220F56Ch case   35:*/		return 0x8220F570;
		  /* 8220F570h */ case   36:  		/* addi R27, R11, -7164 */
		/* 8220F570h case   36:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFE404);
		/* 8220F570h case   36:*/		return 0x8220F574;
		  /* 8220F574h */ case   37:  		/* lbzx R10, <#[R29 + R9]> */
		/* 8220F574h case   37:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 8220F574h case   37:*/		return 0x8220F578;
		  /* 8220F578h */ case   38:  		/* mr R11, R10 */
		/* 8220F578h case   38:*/		regs.R11 = regs.R10;
		/* 8220F578h case   38:*/		return 0x8220F57C;
		  /* 8220F57Ch */ case   39:  		/* cmplwi CR6, R10, 48 */
		/* 8220F57Ch case   39:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 8220F57Ch case   39:*/		return 0x8220F580;
	}
	return 0x8220F580;
} // Block from 8220F4E0h-8220F580h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8220F580h
// Function '?HASHTABLE_InsertItem@XGRAPHICS@@YAXPAU_HASH_TABLE@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F580);
		  /* 8220F580h */ case    0:  		/* bc 12, CR6_EQ, 152 */
		/* 8220F580h case    0:*/		if ( regs.CR[6].eq ) { return 0x8220F618;  }
		/* 8220F580h case    0:*/		return 0x8220F584;
		  /* 8220F584h */ case    1:  		/* cmplwi CR6, R10, 49 */
		/* 8220F584h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000031);
		/* 8220F584h case    1:*/		return 0x8220F588;
		  /* 8220F588h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 8220F588h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220F610;  }
		/* 8220F588h case    2:*/		return 0x8220F58C;
		  /* 8220F58Ch */ case    3:  		/* cmplwi CR6, R10, 95 */
		/* 8220F58Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005F);
		/* 8220F58Ch case    3:*/		return 0x8220F590;
		  /* 8220F590h */ case    4:  		/* bc 12, CR6_EQ, 120 */
		/* 8220F590h case    4:*/		if ( regs.CR[6].eq ) { return 0x8220F608;  }
		/* 8220F590h case    4:*/		return 0x8220F594;
		  /* 8220F594h */ case    5:  		/* cmplwi CR6, R10, 119 */
		/* 8220F594h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000077);
		/* 8220F594h case    5:*/		return 0x8220F598;
		  /* 8220F598h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 8220F598h case    6:*/		if ( regs.CR[6].eq ) { return 0x8220F600;  }
		/* 8220F598h case    6:*/		return 0x8220F59C;
		  /* 8220F59Ch */ case    7:  		/* cmplwi CR6, R10, 120 */
		/* 8220F59Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000078);
		/* 8220F59Ch case    7:*/		return 0x8220F5A0;
		  /* 8220F5A0h */ case    8:  		/* bc 12, CR6_EQ, 88 */
		/* 8220F5A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8220F5F8;  }
		/* 8220F5A0h case    8:*/		return 0x8220F5A4;
		  /* 8220F5A4h */ case    9:  		/* cmplwi CR6, R10, 121 */
		/* 8220F5A4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000079);
		/* 8220F5A4h case    9:*/		return 0x8220F5A8;
		  /* 8220F5A8h */ case   10:  		/* bc 12, CR6_EQ, 72 */
		/* 8220F5A8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8220F5F0;  }
		/* 8220F5A8h case   10:*/		return 0x8220F5AC;
		  /* 8220F5ACh */ case   11:  		/* cmplwi CR6, R10, 122 */
		/* 8220F5ACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007A);
		/* 8220F5ACh case   11:*/		return 0x8220F5B0;
		  /* 8220F5B0h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 8220F5B0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8220F5E8;  }
		/* 8220F5B0h case   12:*/		return 0x8220F5B4;
		  /* 8220F5B4h */ case   13:  		/* extsb R11, R10 */
		/* 8220F5B4h case   13:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R10);
		/* 8220F5B4h case   13:*/		return 0x8220F5B8;
		  /* 8220F5B8h */ case   14:  		/* cmpwi CR6, R11, 7 */
		/* 8220F5B8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 8220F5B8h case   14:*/		return 0x8220F5BC;
		  /* 8220F5BCh */ case   15:  		/* bc 4, CR6_GT, 32 */
		/* 8220F5BCh case   15:*/		if ( !regs.CR[6].gt ) { return 0x8220F5DC;  }
		/* 8220F5BCh case   15:*/		return 0x8220F5C0;
		  /* 8220F5C0h */ case   16:  		/* mr R6, R23 */
		/* 8220F5C0h case   16:*/		regs.R6 = regs.R23;
		/* 8220F5C0h case   16:*/		return 0x8220F5C4;
		  /* 8220F5C4h */ case   17:  		/* mr R5, R27 */
		/* 8220F5C4h case   17:*/		regs.R5 = regs.R27;
		/* 8220F5C4h case   17:*/		return 0x8220F5C8;
		  /* 8220F5C8h */ case   18:  		/* mr R4, R24 */
		/* 8220F5C8h case   18:*/		regs.R4 = regs.R24;
		/* 8220F5C8h case   18:*/		return 0x8220F5CC;
		  /* 8220F5CCh */ case   19:  		/* li R7, 1324 */
		/* 8220F5CCh case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x52C);
		/* 8220F5CCh case   19:*/		return 0x8220F5D0;
		  /* 8220F5D0h */ case   20:  		/* li R3, 0 */
		/* 8220F5D0h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F5D0h case   20:*/		return 0x8220F5D4;
		  /* 8220F5D4h */ case   21:  		/* bl -752076 */
		/* 8220F5D4h case   21:*/		regs.LR = 0x8220F5D8; return 0x82157C08;
		/* 8220F5D4h case   21:*/		return 0x8220F5D8;
		  /* 8220F5D8h */ case   22:  		/* lwz R9, <#[R1 + 84]> */
		/* 8220F5D8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8220F5D8h case   22:*/		return 0x8220F5DC;
	}
	return 0x8220F5DC;
} // Block from 8220F580h-8220F5DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8220F5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F5DC);
		  /* 8220F5DCh */ case    0:  		/* lbzx R11, <#[R29 + R9]> */
		/* 8220F5DCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 8220F5DCh case    0:*/		return 0x8220F5E0;
		  /* 8220F5E0h */ case    1:  		/* extsb R11, R11 */
		/* 8220F5E0h case    1:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 8220F5E0h case    1:*/		return 0x8220F5E4;
		  /* 8220F5E4h */ case    2:  		/* b 56 */
		/* 8220F5E4h case    2:*/		return 0x8220F61C;
		/* 8220F5E4h case    2:*/		return 0x8220F5E8;
	}
	return 0x8220F5E8;
} // Block from 8220F5DCh-8220F5E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220F5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F5E8);
		  /* 8220F5E8h */ case    0:  		/* li R11, 2 */
		/* 8220F5E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8220F5E8h case    0:*/		return 0x8220F5EC;
		  /* 8220F5ECh */ case    1:  		/* b 48 */
		/* 8220F5ECh case    1:*/		return 0x8220F61C;
		/* 8220F5ECh case    1:*/		return 0x8220F5F0;
	}
	return 0x8220F5F0;
} // Block from 8220F5E8h-8220F5F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F5F0);
		  /* 8220F5F0h */ case    0:  		/* li R11, 1 */
		/* 8220F5F0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8220F5F0h case    0:*/		return 0x8220F5F4;
		  /* 8220F5F4h */ case    1:  		/* b 40 */
		/* 8220F5F4h case    1:*/		return 0x8220F61C;
		/* 8220F5F4h case    1:*/		return 0x8220F5F8;
	}
	return 0x8220F5F8;
} // Block from 8220F5F0h-8220F5F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F5F8);
		  /* 8220F5F8h */ case    0:  		/* stw R25, <#[R30]> */
		/* 8220F5F8h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F5F8h case    0:*/		return 0x8220F5FC;
		  /* 8220F5FCh */ case    1:  		/* b 36 */
		/* 8220F5FCh case    1:*/		return 0x8220F620;
		/* 8220F5FCh case    1:*/		return 0x8220F600;
	}
	return 0x8220F600;
} // Block from 8220F5F8h-8220F600h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F600);
		  /* 8220F600h */ case    0:  		/* stw R26, <#[R30]> */
		/* 8220F600h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F600h case    0:*/		return 0x8220F604;
		  /* 8220F604h */ case    1:  		/* b 28 */
		/* 8220F604h case    1:*/		return 0x8220F620;
		/* 8220F604h case    1:*/		return 0x8220F608;
	}
	return 0x8220F608;
} // Block from 8220F600h-8220F608h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F608);
		  /* 8220F608h */ case    0:  		/* li R11, 7 */
		/* 8220F608h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8220F608h case    0:*/		return 0x8220F60C;
		  /* 8220F60Ch */ case    1:  		/* b 16 */
		/* 8220F60Ch case    1:*/		return 0x8220F61C;
		/* 8220F60Ch case    1:*/		return 0x8220F610;
	}
	return 0x8220F610;
} // Block from 8220F608h-8220F610h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F610);
		  /* 8220F610h */ case    0:  		/* li R11, 5 */
		/* 8220F610h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8220F610h case    0:*/		return 0x8220F614;
		  /* 8220F614h */ case    1:  		/* b 8 */
		/* 8220F614h case    1:*/		return 0x8220F61C;
		/* 8220F614h case    1:*/		return 0x8220F618;
	}
	return 0x8220F618;
} // Block from 8220F610h-8220F618h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F618);
		  /* 8220F618h */ case    0:  		/* li R11, 4 */
		/* 8220F618h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8220F618h case    0:*/		return 0x8220F61C;
	}
	return 0x8220F61C;
} // Block from 8220F618h-8220F61Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220F61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F61C);
		  /* 8220F61Ch */ case    0:  		/* stw R11, <#[R30]> */
		/* 8220F61Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F61Ch case    0:*/		return 0x8220F620;
	}
	return 0x8220F620;
} // Block from 8220F61Ch-8220F620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220F620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F620);
		  /* 8220F620h */ case    0:  		/* addi R29, R29, 1 */
		/* 8220F620h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8220F620h case    0:*/		return 0x8220F624;
		  /* 8220F624h */ case    1:  		/* addi R30, R30, 4 */
		/* 8220F624h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8220F624h case    1:*/		return 0x8220F628;
	}
	return 0x8220F628;
} // Block from 8220F620h-8220F628h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220F628h
// Function '?HASHTABLE_GetSingleItem@XGRAPHICS@@YAPAXPAU_HASH_TABLE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F628);
		  /* 8220F628h */ case    0:  		/* cmplwi CR6, R29, 4 */
		/* 8220F628h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 8220F628h case    0:*/		return 0x8220F62C;
		  /* 8220F62Ch */ case    1:  		/* bc 12, CR6_LT, -184 */
		/* 8220F62Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8220F574;  }
		/* 8220F62Ch case    1:*/		return 0x8220F630;
		  /* 8220F630h */ case    2:  		/* lwz R10, <#[R1 + 100]> */
		/* 8220F630h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 8220F630h case    2:*/		return 0x8220F634;
		  /* 8220F634h */ case    3:  		/* lwz R11, <#[R1 + 104]> */
		/* 8220F634h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8220F634h case    3:*/		return 0x8220F638;
		  /* 8220F638h */ case    4:  		/* lwz R9, <#[R31 + 4]> */
		/* 8220F638h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F638h case    4:*/		return 0x8220F63C;
		  /* 8220F63Ch */ case    5:  		/* rlwimi R11, R10, 3, 26, 28 */
		/* 8220F63Ch case    5:*/		cpu::op::rlwimi<0,3,26,28>(regs,&regs.R11,regs.R10);
		/* 8220F63Ch case    5:*/		return 0x8220F640;
		  /* 8220F640h */ case    6:  		/* lwz R8, <#[R1 + 96]> */
		/* 8220F640h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 8220F640h case    6:*/		return 0x8220F644;
		  /* 8220F644h */ case    7:  		/* lwz R10, <#[R1 + 108]> */
		/* 8220F644h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8220F644h case    7:*/		return 0x8220F648;
		  /* 8220F648h */ case    8:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 8220F648h case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 8220F648h case    8:*/		return 0x8220F64C;
		  /* 8220F64Ch */ case    9:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8220F64Ch case    9:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8220F64Ch case    9:*/		return 0x8220F650;
		  /* 8220F650h */ case   10:  		/* rlwinm R8, R8, 29, 0, 2 */
		/* 8220F650h case   10:*/		cpu::op::rlwinm<0,29,0,2>(regs,&regs.R8,regs.R8);
		/* 8220F650h case   10:*/		return 0x8220F654;
		  /* 8220F654h */ case   11:  		/* rlwimi R10, R11, 3, 0, 28 */
		/* 8220F654h case   11:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R10,regs.R11);
		/* 8220F654h case   11:*/		return 0x8220F658;
		  /* 8220F658h */ case   12:  		/* or R9, R8, R9 */
		/* 8220F658h case   12:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8220F658h case   12:*/		return 0x8220F65C;
		  /* 8220F65Ch */ case   13:  		/* rlwinm R10, R10, 20, 0, 11 */
		/* 8220F65Ch case   13:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R10,regs.R10);
		/* 8220F65Ch case   13:*/		return 0x8220F660;
		  /* 8220F660h */ case   14:  		/* rlwinm R11, R9, 0, 12, 2 */
		/* 8220F660h case   14:*/		cpu::op::rlwinm<0,0,12,2>(regs,&regs.R11,regs.R9);
		/* 8220F660h case   14:*/		return 0x8220F664;
		  /* 8220F664h */ case   15:  		/* or R11, R10, R11 */
		/* 8220F664h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220F664h case   15:*/		return 0x8220F668;
		  /* 8220F668h */ case   16:  		/* mr R10, R11 */
		/* 8220F668h case   16:*/		regs.R10 = regs.R11;
		/* 8220F668h case   16:*/		return 0x8220F66C;
		  /* 8220F66Ch */ case   17:  		/* stw R11, <#[R31 + 4]> */
		/* 8220F66Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F66Ch case   17:*/		return 0x8220F670;
		  /* 8220F670h */ case   18:  		/* lwz R11, <#[R1 + 116]> */
		/* 8220F670h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8220F670h case   18:*/		return 0x8220F674;
		  /* 8220F674h */ case   19:  		/* rlwimi R10, R11, 19, 12, 12 */
		/* 8220F674h case   19:*/		cpu::op::rlwimi<0,19,12,12>(regs,&regs.R10,regs.R11);
		/* 8220F674h case   19:*/		return 0x8220F678;
		  /* 8220F678h */ case   20:  		/* stw R10, <#[R31 + 4]> */
		/* 8220F678h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F678h case   20:*/		return 0x8220F67C;
		  /* 8220F67Ch */ case   21:  		/* lwz R11, <#[R1 + 120]> */
		/* 8220F67Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8220F67Ch case   21:*/		return 0x8220F680;
		  /* 8220F680h */ case   22:  		/* rlwimi R10, R11, 18, 13, 13 */
		/* 8220F680h case   22:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R10,regs.R11);
		/* 8220F680h case   22:*/		return 0x8220F684;
		  /* 8220F684h */ case   23:  		/* stw R10, <#[R31 + 4]> */
		/* 8220F684h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F684h case   23:*/		return 0x8220F688;
		  /* 8220F688h */ case   24:  		/* lwz R11, <#[R1 + 132]> */
		/* 8220F688h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 8220F688h case   24:*/		return 0x8220F68C;
		  /* 8220F68Ch */ case   25:  		/* rlwimi R10, R11, 10, 16, 21 */
		/* 8220F68Ch case   25:*/		cpu::op::rlwimi<0,10,16,21>(regs,&regs.R10,regs.R11);
		/* 8220F68Ch case   25:*/		return 0x8220F690;
		  /* 8220F690h */ case   26:  		/* stw R10, <#[R31 + 4]> */
		/* 8220F690h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8220F690h case   26:*/		return 0x8220F694;
		  /* 8220F694h */ case   27:  		/* lwz R11, <#[R28 + 10820]> */
		/* 8220F694h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00002A44) );
		/* 8220F694h case   27:*/		return 0x8220F698;
		  /* 8220F698h */ case   28:  		/* cmplwi CR6, R11, 100 */
		/* 8220F698h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000064);
		/* 8220F698h case   28:*/		return 0x8220F69C;
		  /* 8220F69Ch */ case   29:  		/* bc 4, CR6_GT, 32 */
		/* 8220F69Ch case   29:*/		if ( !regs.CR[6].gt ) { return 0x8220F6BC;  }
		/* 8220F69Ch case   29:*/		return 0x8220F6A0;
		  /* 8220F6A0h */ case   30:  		/* lis R11, -32252 */
		/* 8220F6A0h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F6A0h case   30:*/		return 0x8220F6A4;
		  /* 8220F6A4h */ case   31:  		/* mr R6, R23 */
		/* 8220F6A4h case   31:*/		regs.R6 = regs.R23;
		/* 8220F6A4h case   31:*/		return 0x8220F6A8;
		  /* 8220F6A8h */ case   32:  		/* addi R5, R11, -7212 */
		/* 8220F6A8h case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE3D4);
		/* 8220F6A8h case   32:*/		return 0x8220F6AC;
		  /* 8220F6ACh */ case   33:  		/* mr R4, R24 */
		/* 8220F6ACh case   33:*/		regs.R4 = regs.R24;
		/* 8220F6ACh case   33:*/		return 0x8220F6B0;
		  /* 8220F6B0h */ case   34:  		/* li R7, 1338 */
		/* 8220F6B0h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x53A);
		/* 8220F6B0h case   34:*/		return 0x8220F6B4;
		  /* 8220F6B4h */ case   35:  		/* li R3, 0 */
		/* 8220F6B4h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F6B4h case   35:*/		return 0x8220F6B8;
		  /* 8220F6B8h */ case   36:  		/* bl -752304 */
		/* 8220F6B8h case   36:*/		regs.LR = 0x8220F6BC; return 0x82157C08;
		/* 8220F6B8h case   36:*/		return 0x8220F6BC;
	}
	return 0x8220F6BC;
} // Block from 8220F628h-8220F6BCh (37 instructions)

//////////////////////////////////////////////////////
// Block at 8220F6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F6BC);
		  /* 8220F6BCh */ case    0:  		/* lwz R11, <#[R28 + 12024]> */
		/* 8220F6BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00002EF8) );
		/* 8220F6BCh case    0:*/		return 0x8220F6C0;
		  /* 8220F6C0h */ case    1:  		/* lwz R10, <#[R28 + 10820]> */
		/* 8220F6C0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00002A44) );
		/* 8220F6C0h case    1:*/		return 0x8220F6C4;
		  /* 8220F6C4h */ case    2:  		/* addi R11, R11, 12 */
		/* 8220F6C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8220F6C4h case    2:*/		return 0x8220F6C8;
		  /* 8220F6C8h */ case    3:  		/* addi R10, R10, 1 */
		/* 8220F6C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8220F6C8h case    3:*/		return 0x8220F6CC;
		  /* 8220F6CCh */ case    4:  		/* stw R11, <#[R28 + 12024]> */
		/* 8220F6CCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00002EF8) );
		/* 8220F6CCh case    4:*/		return 0x8220F6D0;
		  /* 8220F6D0h */ case    5:  		/* stw R10, <#[R28 + 10820]> */
		/* 8220F6D0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00002A44) );
		/* 8220F6D0h case    5:*/		return 0x8220F6D4;
		  /* 8220F6D4h */ case    6:  		/* addi R1, R1, 240 */
		/* 8220F6D4h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8220F6D4h case    6:*/		return 0x8220F6D8;
		  /* 8220F6D8h */ case    7:  		/* b -1565764 */
		/* 8220F6D8h case    7:*/		return 0x82091294;
		/* 8220F6D8h case    7:*/		return 0x8220F6DC;
		  /* 8220F6DCh */ case    8:  		/* nop */
		/* 8220F6DCh case    8:*/		cpu::op::nop();
		/* 8220F6DCh case    8:*/		return 0x8220F6E0;
	}
	return 0x8220F6E0;
} // Block from 8220F6BCh-8220F6E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220F6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F6E0);
		  /* 8220F6E0h */ case    0:  		/* mfspr R12, LR */
		/* 8220F6E0h case    0:*/		regs.R12 = regs.LR;
		/* 8220F6E0h case    0:*/		return 0x8220F6E4;
		  /* 8220F6E4h */ case    1:  		/* bl -1565856 */
		/* 8220F6E4h case    1:*/		regs.LR = 0x8220F6E8; return 0x82091244;
		/* 8220F6E4h case    1:*/		return 0x8220F6E8;
		  /* 8220F6E8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8220F6E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8220F6E8h case    2:*/		return 0x8220F6EC;
		  /* 8220F6ECh */ case    3:  		/* mr R30, R3 */
		/* 8220F6ECh case    3:*/		regs.R30 = regs.R3;
		/* 8220F6ECh case    3:*/		return 0x8220F6F0;
		  /* 8220F6F0h */ case    4:  		/* mr R28, R5 */
		/* 8220F6F0h case    4:*/		regs.R28 = regs.R5;
		/* 8220F6F0h case    4:*/		return 0x8220F6F4;
		  /* 8220F6F4h */ case    5:  		/* addi R3, R1, 96 */
		/* 8220F6F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8220F6F4h case    5:*/		return 0x8220F6F8;
		  /* 8220F6F8h */ case    6:  		/* li R5, 40 */
		/* 8220F6F8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 8220F6F8h case    6:*/		return 0x8220F6FC;
		  /* 8220F6FCh */ case    7:  		/* mr R29, R4 */
		/* 8220F6FCh case    7:*/		regs.R29 = regs.R4;
		/* 8220F6FCh case    7:*/		return 0x8220F700;
		  /* 8220F700h */ case    8:  		/* lwz R31, <#[R30 + 28]> */
		/* 8220F700h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8220F700h case    8:*/		return 0x8220F704;
		  /* 8220F704h */ case    9:  		/* mr R27, R6 */
		/* 8220F704h case    9:*/		regs.R27 = regs.R6;
		/* 8220F704h case    9:*/		return 0x8220F708;
	}
	return 0x8220F708;
} // Block from 8220F6E0h-8220F708h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8220F708h
// Function '?HASHTABLE_RemoveItem@XGRAPHICS@@YAPAXPAU_HASH_TABLE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F708);
		  /* 8220F708h */ case    0:  		/* mr R26, R7 */
		/* 8220F708h case    0:*/		regs.R26 = regs.R7;
		/* 8220F708h case    0:*/		return 0x8220F70C;
		  /* 8220F70Ch */ case    1:  		/* mr R25, R8 */
		/* 8220F70Ch case    1:*/		regs.R25 = regs.R8;
		/* 8220F70Ch case    1:*/		return 0x8220F710;
		  /* 8220F710h */ case    2:  		/* mr R24, R9 */
		/* 8220F710h case    2:*/		regs.R24 = regs.R9;
		/* 8220F710h case    2:*/		return 0x8220F714;
		  /* 8220F714h */ case    3:  		/* mr R23, R10 */
		/* 8220F714h case    3:*/		regs.R23 = regs.R10;
		/* 8220F714h case    3:*/		return 0x8220F718;
		  /* 8220F718h */ case    4:  		/* bl -1564008 */
		/* 8220F718h case    4:*/		regs.LR = 0x8220F71C; return 0x820919B0;
		/* 8220F718h case    4:*/		return 0x8220F71C;
		  /* 8220F71Ch */ case    5:  		/* addi R8, R1, 84 */
		/* 8220F71Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8220F71Ch case    5:*/		return 0x8220F720;
		  /* 8220F720h */ case    6:  		/* lwz R3, <#[R30 + 16]> */
		/* 8220F720h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8220F720h case    6:*/		return 0x8220F724;
		  /* 8220F724h */ case    7:  		/* addi R7, R1, 80 */
		/* 8220F724h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8220F724h case    7:*/		return 0x8220F728;
		  /* 8220F728h */ case    8:  		/* lwz R4, <#[R31]> */
		/* 8220F728h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8220F728h case    8:*/		return 0x8220F72C;
		  /* 8220F72Ch */ case    9:  		/* mr R6, R27 */
		/* 8220F72Ch case    9:*/		regs.R6 = regs.R27;
		/* 8220F72Ch case    9:*/		return 0x8220F730;
		  /* 8220F730h */ case   10:  		/* lwz R30, <#[R31 + 12024]> */
		/* 8220F730h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00002EF8) );
		/* 8220F730h case   10:*/		return 0x8220F734;
		  /* 8220F734h */ case   11:  		/* li R5, 0 */
		/* 8220F734h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220F734h case   11:*/		return 0x8220F738;
		  /* 8220F738h */ case   12:  		/* bl 67744 */
		/* 8220F738h case   12:*/		regs.LR = 0x8220F73C; return 0x8221FFD8;
		/* 8220F738h case   12:*/		return 0x8220F73C;
		  /* 8220F73Ch */ case   13:  		/* lwz R6, <#[R1 + 104]> */
		/* 8220F73Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 8220F73Ch case   13:*/		return 0x8220F740;
		  /* 8220F740h */ case   14:  		/* lwz R7, <#[R1 + 108]> */
		/* 8220F740h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 8220F740h case   14:*/		return 0x8220F744;
		  /* 8220F744h */ case   15:  		/* rlwimi R24, R26, 7, 19, 24 */
		/* 8220F744h case   15:*/		cpu::op::rlwimi<0,7,19,24>(regs,&regs.R24,regs.R26);
		/* 8220F744h case   15:*/		return 0x8220F748;
		  /* 8220F748h */ case   16:  		/* lwz R5, <#[R1 + 112]> */
		/* 8220F748h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 8220F748h case   16:*/		return 0x8220F74C;
		  /* 8220F74Ch */ case   17:  		/* mr R26, R23 */
		/* 8220F74Ch case   17:*/		regs.R26 = regs.R23;
		/* 8220F74Ch case   17:*/		return 0x8220F750;
		  /* 8220F750h */ case   18:  		/* rlwimi R7, R6, 2, 28, 29 */
		/* 8220F750h case   18:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R6);
		/* 8220F750h case   18:*/		return 0x8220F754;
		  /* 8220F754h */ case   19:  		/* lwz R6, <#[R1 + 116]> */
		/* 8220F754h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000074) );
		/* 8220F754h case   19:*/		return 0x8220F758;
		  /* 8220F758h */ case   20:  		/* lwz R3, <#[R1 + 120]> */
		/* 8220F758h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 8220F758h case   20:*/		return 0x8220F75C;
		  /* 8220F75Ch */ case   21:  		/* rlwimi R26, R23, 7, 23, 24 */
		/* 8220F75Ch case   21:*/		cpu::op::rlwimi<0,7,23,24>(regs,&regs.R26,regs.R23);
		/* 8220F75Ch case   21:*/		return 0x8220F760;
		  /* 8220F760h */ case   22:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 8220F760h case   22:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 8220F760h case   22:*/		return 0x8220F764;
		  /* 8220F764h */ case   23:  		/* lwz R27, <#[R1 + 128]> */
		/* 8220F764h case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 8220F764h case   23:*/		return 0x8220F768;
		  /* 8220F768h */ case   24:  		/* rlwinm R11, R28, 27, 0, 4 */
		/* 8220F768h case   24:*/		cpu::op::rlwinm<0,27,0,4>(regs,&regs.R11,regs.R28);
		/* 8220F768h case   24:*/		return 0x8220F76C;
		  /* 8220F76Ch */ case   25:  		/* lwz R28, <#[R1 + 124]> */
		/* 8220F76Ch case   25:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000007C) );
		/* 8220F76Ch case   25:*/		return 0x8220F770;
		  /* 8220F770h */ case   26:  		/* rlwimi R5, R7, 2, 0, 29 */
		/* 8220F770h case   26:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R5,regs.R7);
		/* 8220F770h case   26:*/		return 0x8220F774;
		  /* 8220F774h */ case   27:  		/* lwz R7, <#[R1 + 132]> */
		/* 8220F774h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000084) );
		/* 8220F774h case   27:*/		return 0x8220F778;
		  /* 8220F778h */ case   28:  		/* mr R8, R25 */
		/* 8220F778h case   28:*/		regs.R8 = regs.R25;
		/* 8220F778h case   28:*/		return 0x8220F77C;
		  /* 8220F77Ch */ case   29:  		/* lwz R10, <#[R1 + 96]> */
		/* 8220F77Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8220F77Ch case   29:*/		return 0x8220F780;
		  /* 8220F780h */ case   30:  		/* rlwimi R6, R5, 3, 0, 28 */
		/* 8220F780h case   30:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R6,regs.R5);
		/* 8220F780h case   30:*/		return 0x8220F784;
		  /* 8220F784h */ case   31:  		/* lwz R9, <#[R1 + 100]> */
		/* 8220F784h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 8220F784h case   31:*/		return 0x8220F788;
		  /* 8220F788h */ case   32:  		/* rlwinm R5, R23, 0, 22, 23 */
		/* 8220F788h case   32:*/		cpu::op::rlwinm<0,0,22,23>(regs,&regs.R5,regs.R23);
		/* 8220F788h case   32:*/		return 0x8220F78C;
		  /* 8220F78Ch */ case   33:  		/* rlwimi R3, R6, 3, 0, 28 */
		/* 8220F78Ch case   33:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R3,regs.R6);
		/* 8220F78Ch case   33:*/		return 0x8220F790;
		  /* 8220F790h */ case   34:  		/* rlwinm R6, R26, 7, 16, 20 */
		/* 8220F790h case   34:*/		cpu::op::rlwinm<0,7,16,20>(regs,&regs.R6,regs.R26);
		/* 8220F790h case   34:*/		return 0x8220F794;
		  /* 8220F794h */ case   35:  		/* rlwimi R8, R25, 26, 28, 29 */
		/* 8220F794h case   35:*/		cpu::op::rlwimi<0,26,28,29>(regs,&regs.R8,regs.R25);
		/* 8220F794h case   35:*/		return 0x8220F798;
		  /* 8220F798h */ case   36:  		/* rlwinm R6, R6, 0, 19, 17 */
		/* 8220F798h case   36:*/		cpu::op::rlwinm<0,0,19,17>(regs,&regs.R6,regs.R6);
		/* 8220F798h case   36:*/		return 0x8220F79C;
		  /* 8220F79Ch */ case   37:  		/* rlwimi R28, R3, 2, 0, 29 */
		/* 8220F79Ch case   37:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R28,regs.R3);
		/* 8220F79Ch case   37:*/		return 0x8220F7A0;
		  /* 8220F7A0h */ case   38:  		/* or R6, R6, R5 */
		/* 8220F7A0h case   38:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 8220F7A0h case   38:*/		return 0x8220F7A4;
		  /* 8220F7A4h */ case   39:  		/* rlwinm R4, R25, 4, 26, 27 */
		/* 8220F7A4h case   39:*/		cpu::op::rlwinm<0,4,26,27>(regs,&regs.R4,regs.R25);
		/* 8220F7A4h case   39:*/		return 0x8220F7A8;
	}
	return 0x8220F7A8;
} // Block from 8220F708h-8220F7A8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8220F7A8h
// Function '?SHASHTABLE_Create@XGRAPHICS@@YAPAU_HASH_TABLE@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_ORDERED_LIST_FACTORY@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F7A8);
		  /* 8220F7A8h */ case    0:  		/* rlwinm R8, R8, 30, 28, 31 */
		/* 8220F7A8h case    0:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R8,regs.R8);
		/* 8220F7A8h case    0:*/		return 0x8220F7AC;
		  /* 8220F7ACh */ case    1:  		/* rlwimi R27, R28, 2, 0, 29 */
		/* 8220F7ACh case    1:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R27,regs.R28);
		/* 8220F7ACh case    1:*/		return 0x8220F7B0;
		  /* 8220F7B0h */ case    2:  		/* lwz R5, <#[R30]> */
		/* 8220F7B0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F7B0h case    2:*/		return 0x8220F7B4;
		  /* 8220F7B4h */ case    3:  		/* or R8, R8, R4 */
		/* 8220F7B4h case    3:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 8220F7B4h case    3:*/		return 0x8220F7B8;
		  /* 8220F7B8h */ case    4:  		/* lwz R3, <#[R30 + 4]> */
		/* 8220F7B8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F7B8h case    4:*/		return 0x8220F7BC;
		  /* 8220F7BCh */ case    5:  		/* rlwinm R4, R27, 4, 0, 27 */
		/* 8220F7BCh case    5:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R4,regs.R27);
		/* 8220F7BCh case    5:*/		return 0x8220F7C0;
		  /* 8220F7C0h */ case    6:  		/* rlwinm R5, R5, 0, 19, 31 */
		/* 8220F7C0h case    6:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R5,regs.R5);
		/* 8220F7C0h case    6:*/		return 0x8220F7C4;
		  /* 8220F7C4h */ case    7:  		/* lwz R28, <#[R30 + 8]> */
		/* 8220F7C4h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F7C4h case    7:*/		return 0x8220F7C8;
		  /* 8220F7C8h */ case    8:  		/* rlwinm R3, R3, 0, 28, 11 */
		/* 8220F7C8h case    8:*/		cpu::op::rlwinm<0,0,28,11>(regs,&regs.R3,regs.R3);
		/* 8220F7C8h case    8:*/		return 0x8220F7CC;
		  /* 8220F7CCh */ case    9:  		/* or R11, R5, R11 */
		/* 8220F7CCh case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 8220F7CCh case    9:*/		return 0x8220F7D0;
		  /* 8220F7D0h */ case   10:  		/* rlwimi R28, R7, 30, 1, 1 */
		/* 8220F7D0h case   10:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R28,regs.R7);
		/* 8220F7D0h case   10:*/		return 0x8220F7D4;
		  /* 8220F7D4h */ case   11:  		/* rlwimi R11, R24, 14, 12, 17 */
		/* 8220F7D4h case   11:*/		cpu::op::rlwimi<0,14,12,17>(regs,&regs.R11,regs.R24);
		/* 8220F7D4h case   11:*/		return 0x8220F7D8;
		  /* 8220F7D8h */ case   12:  		/* or R7, R4, R3 */
		/* 8220F7D8h case   12:*/		cpu::op::or<0>(regs,&regs.R7,regs.R4,regs.R3);
		/* 8220F7D8h case   12:*/		return 0x8220F7DC;
		  /* 8220F7DCh */ case   13:  		/* rlwimi R11, R24, 14, 5, 10 */
		/* 8220F7DCh case   13:*/		cpu::op::rlwimi<0,14,5,10>(regs,&regs.R11,regs.R24);
		/* 8220F7DCh case   13:*/		return 0x8220F7E0;
		  /* 8220F7E0h */ case   14:  		/* mr R5, R7 */
		/* 8220F7E0h case   14:*/		regs.R5 = regs.R7;
		/* 8220F7E0h case   14:*/		return 0x8220F7E4;
		  /* 8220F7E4h */ case   15:  		/* rlwinm R11, R11, 0, 19, 17 */
		/* 8220F7E4h case   15:*/		cpu::op::rlwinm<0,0,19,17>(regs,&regs.R11,regs.R11);
		/* 8220F7E4h case   15:*/		return 0x8220F7E8;
		  /* 8220F7E8h */ case   16:  		/* rlwinm R11, R11, 0, 12, 10 */
		/* 8220F7E8h case   16:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R11,regs.R11);
		/* 8220F7E8h case   16:*/		return 0x8220F7EC;
		  /* 8220F7ECh */ case   17:  		/* stw R11, <#[R30]> */
		/* 8220F7ECh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F7ECh case   17:*/		return 0x8220F7F0;
		  /* 8220F7F0h */ case   18:  		/* rlwinm R11, R11, 0, 26, 18 */
		/* 8220F7F0h case   18:*/		cpu::op::rlwinm<0,0,26,18>(regs,&regs.R11,regs.R11);
		/* 8220F7F0h case   18:*/		return 0x8220F7F4;
		  /* 8220F7F4h */ case   19:  		/* lwz R4, <#[R1 + 80]> */
		/* 8220F7F4h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8220F7F4h case   19:*/		return 0x8220F7F8;
		  /* 8220F7F8h */ case   20:  		/* rlwimi R4, R10, 5, 26, 26 */
		/* 8220F7F8h case   20:*/		cpu::op::rlwimi<0,5,26,26>(regs,&regs.R4,regs.R10);
		/* 8220F7F8h case   20:*/		return 0x8220F7FC;
		  /* 8220F7FCh */ case   21:  		/* rlwinm R10, R4, 0, 26, 31 */
		/* 8220F7FCh case   21:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R10,regs.R4);
		/* 8220F7FCh case   21:*/		return 0x8220F800;
		  /* 8220F800h */ case   22:  		/* stw R7, <#[R30 + 4]> */
		/* 8220F800h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F800h case   22:*/		return 0x8220F804;
		  /* 8220F804h */ case   23:  		/* stw R28, <#[R30 + 8]> */
		/* 8220F804h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F804h case   23:*/		return 0x8220F808;
		  /* 8220F808h */ case   24:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 8220F808h case   24:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 8220F808h case   24:*/		return 0x8220F80C;
		  /* 8220F80Ch */ case   25:  		/* rlwinm R10, R9, 6, 0, 25 */
		/* 8220F80Ch case   25:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R10,regs.R9);
		/* 8220F80Ch case   25:*/		return 0x8220F810;
		  /* 8220F810h */ case   26:  		/* or R11, R10, R11 */
		/* 8220F810h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8220F810h case   26:*/		return 0x8220F814;
		  /* 8220F814h */ case   27:  		/* stw R11, <#[R30]> */
		/* 8220F814h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F814h case   27:*/		return 0x8220F818;
		  /* 8220F818h */ case   28:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8220F818h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8220F818h case   28:*/		return 0x8220F81C;
		  /* 8220F81Ch */ case   29:  		/* lwz R10, <#[R29 + 84]> */
		/* 8220F81Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000054) );
		/* 8220F81Ch case   29:*/		return 0x8220F820;
		  /* 8220F820h */ case   30:  		/* rlwimi R5, R10, 3, 28, 28 */
		/* 8220F820h case   30:*/		cpu::op::rlwimi<0,3,28,28>(regs,&regs.R5,regs.R10);
		/* 8220F820h case   30:*/		return 0x8220F824;
		  /* 8220F824h */ case   31:  		/* rlwinm R11, R11, 0, 0, 25 */
		/* 8220F824h case   31:*/		cpu::op::rlwinm<0,0,0,25>(regs,&regs.R11,regs.R11);
		/* 8220F824h case   31:*/		return 0x8220F828;
		  /* 8220F828h */ case   32:  		/* stw R5, <#[R30 + 4]> */
		/* 8220F828h case   32:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F828h case   32:*/		return 0x8220F82C;
		  /* 8220F82Ch */ case   33:  		/* mr R10, R5 */
		/* 8220F82Ch case   33:*/		regs.R10 = regs.R5;
		/* 8220F82Ch case   33:*/		return 0x8220F830;
		  /* 8220F830h */ case   34:  		/* lwz R9, <#[R29 + 88]> */
		/* 8220F830h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000058) );
		/* 8220F830h case   34:*/		return 0x8220F834;
		  /* 8220F834h */ case   35:  		/* or R11, R8, R11 */
		/* 8220F834h case   35:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8220F834h case   35:*/		return 0x8220F838;
		  /* 8220F838h */ case   36:  		/* stw R11, <#[R30]> */
		/* 8220F838h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8220F838h case   36:*/		return 0x8220F83C;
		  /* 8220F83Ch */ case   37:  		/* rlwimi R10, R9, 1, 29, 30 */
		/* 8220F83Ch case   37:*/		cpu::op::rlwimi<0,1,29,30>(regs,&regs.R10,regs.R9);
		/* 8220F83Ch case   37:*/		return 0x8220F840;
		  /* 8220F840h */ case   38:  		/* rlwinm R9, R6, 7, 0, 24 */
		/* 8220F840h case   38:*/		cpu::op::rlwinm<0,7,0,24>(regs,&regs.R9,regs.R6);
		/* 8220F840h case   38:*/		return 0x8220F844;
		  /* 8220F844h */ case   39:  		/* rlwinm R11, R23, 0, 18, 19 */
		/* 8220F844h case   39:*/		cpu::op::rlwinm<0,0,18,19>(regs,&regs.R11,regs.R23);
		/* 8220F844h case   39:*/		return 0x8220F848;
		  /* 8220F848h */ case   40:  		/* stw R10, <#[R30 + 4]> */
		/* 8220F848h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F848h case   40:*/		return 0x8220F84C;
		  /* 8220F84Ch */ case   41:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8220F84Ch case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8220F84Ch case   41:*/		return 0x8220F850;
		  /* 8220F850h */ case   42:  		/* or R11, R9, R11 */
		/* 8220F850h case   42:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8220F850h case   42:*/		return 0x8220F854;
		  /* 8220F854h */ case   43:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 8220F854h case   43:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 8220F854h case   43:*/		return 0x8220F858;
		  /* 8220F858h */ case   44:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 8220F858h case   44:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 8220F858h case   44:*/		return 0x8220F85C;
		  /* 8220F85Ch */ case   45:  		/* rlwinm R9, R28, 0, 1, 1 */
		/* 8220F85Ch case   45:*/		cpu::op::rlwinm<0,0,1,1>(regs,&regs.R9,regs.R28);
		/* 8220F85Ch case   45:*/		return 0x8220F860;
		  /* 8220F860h */ case   46:  		/* or R11, R11, R10 */
		/* 8220F860h case   46:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8220F860h case   46:*/		return 0x8220F864;
		  /* 8220F864h */ case   47:  		/* stw R9, <#[R30 + 8]> */
		/* 8220F864h case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8220F864h case   47:*/		return 0x8220F868;
		  /* 8220F868h */ case   48:  		/* stw R11, <#[R30 + 4]> */
		/* 8220F868h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F868h case   48:*/		return 0x8220F86C;
		  /* 8220F86Ch */ case   49:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8220F86Ch case   49:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8220F86Ch case   49:*/		return 0x8220F870;
		  /* 8220F870h */ case   50:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8220F870h case   50:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8220F870h case   50:*/		return 0x8220F874;
		  /* 8220F874h */ case   51:  		/* stw R11, <#[R30 + 4]> */
		/* 8220F874h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8220F874h case   51:*/		return 0x8220F878;
		  /* 8220F878h */ case   52:  		/* lwz R11, <#[R31 + 10820]> */
		/* 8220F878h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002A44) );
		/* 8220F878h case   52:*/		return 0x8220F87C;
		  /* 8220F87Ch */ case   53:  		/* cmplwi CR6, R11, 100 */
		/* 8220F87Ch case   53:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000064);
		/* 8220F87Ch case   53:*/		return 0x8220F880;
		  /* 8220F880h */ case   54:  		/* bc 4, CR6_GT, 40 */
		/* 8220F880h case   54:*/		if ( !regs.CR[6].gt ) { return 0x8220F8A8;  }
		/* 8220F880h case   54:*/		return 0x8220F884;
		  /* 8220F884h */ case   55:  		/* lis R11, -32252 */
		/* 8220F884h case   55:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F884h case   55:*/		return 0x8220F888;
		  /* 8220F888h */ case   56:  		/* lis R10, -32252 */
		/* 8220F888h case   56:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F888h case   56:*/		return 0x8220F88C;
		  /* 8220F88Ch */ case   57:  		/* lis R9, -32253 */
		/* 8220F88Ch case   57:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220F88Ch case   57:*/		return 0x8220F890;
		  /* 8220F890h */ case   58:  		/* addi R6, R11, -7312 */
		/* 8220F890h case   58:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220F890h case   58:*/		return 0x8220F894;
		  /* 8220F894h */ case   59:  		/* addi R5, R10, -7212 */
		/* 8220F894h case   59:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE3D4);
		/* 8220F894h case   59:*/		return 0x8220F898;
		  /* 8220F898h */ case   60:  		/* addi R4, R9, 27460 */
		/* 8220F898h case   60:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220F898h case   60:*/		return 0x8220F89C;
		  /* 8220F89Ch */ case   61:  		/* li R7, 1435 */
		/* 8220F89Ch case   61:*/		cpu::op::li<0>(regs,&regs.R7,0x59B);
		/* 8220F89Ch case   61:*/		return 0x8220F8A0;
		  /* 8220F8A0h */ case   62:  		/* li R3, 0 */
		/* 8220F8A0h case   62:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F8A0h case   62:*/		return 0x8220F8A4;
		  /* 8220F8A4h */ case   63:  		/* bl -752796 */
		/* 8220F8A4h case   63:*/		regs.LR = 0x8220F8A8; return 0x82157C08;
		/* 8220F8A4h case   63:*/		return 0x8220F8A8;
	}
	return 0x8220F8A8;
} // Block from 8220F7A8h-8220F8A8h (64 instructions)

//////////////////////////////////////////////////////
// Block at 8220F8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F8A8);
		  /* 8220F8A8h */ case    0:  		/* lwz R11, <#[R31 + 12024]> */
		/* 8220F8A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002EF8) );
		/* 8220F8A8h case    0:*/		return 0x8220F8AC;
		  /* 8220F8ACh */ case    1:  		/* lwz R10, <#[R31 + 10820]> */
		/* 8220F8ACh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002A44) );
		/* 8220F8ACh case    1:*/		return 0x8220F8B0;
		  /* 8220F8B0h */ case    2:  		/* addi R11, R11, 12 */
		/* 8220F8B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8220F8B0h case    2:*/		return 0x8220F8B4;
		  /* 8220F8B4h */ case    3:  		/* addi R10, R10, 1 */
		/* 8220F8B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8220F8B4h case    3:*/		return 0x8220F8B8;
	}
	return 0x8220F8B8;
} // Block from 8220F8A8h-8220F8B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220F8B8h
// Function '?SHASHTABLE_Destroy@XGRAPHICS@@YAXPAU_HASH_TABLE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F8B8);
		  /* 8220F8B8h */ case    0:  		/* stw R11, <#[R31 + 12024]> */
		/* 8220F8B8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002EF8) );
		/* 8220F8B8h case    0:*/		return 0x8220F8BC;
		  /* 8220F8BCh */ case    1:  		/* stw R10, <#[R31 + 10820]> */
		/* 8220F8BCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002A44) );
		/* 8220F8BCh case    1:*/		return 0x8220F8C0;
		  /* 8220F8C0h */ case    2:  		/* addi R1, R1, 224 */
		/* 8220F8C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8220F8C0h case    2:*/		return 0x8220F8C4;
		  /* 8220F8C4h */ case    3:  		/* b -1566256 */
		/* 8220F8C4h case    3:*/		return 0x82091294;
		/* 8220F8C4h case    3:*/		return 0x8220F8C8;
	}
	return 0x8220F8C8;
} // Block from 8220F8B8h-8220F8C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220F8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F8C8);
		  /* 8220F8C8h */ case    0:  		/* mfspr R12, LR */
		/* 8220F8C8h case    0:*/		regs.R12 = regs.LR;
		/* 8220F8C8h case    0:*/		return 0x8220F8CC;
		  /* 8220F8CCh */ case    1:  		/* bl -1566328 */
		/* 8220F8CCh case    1:*/		regs.LR = 0x8220F8D0; return 0x82091254;
		/* 8220F8CCh case    1:*/		return 0x8220F8D0;
		  /* 8220F8D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8220F8D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8220F8D0h case    2:*/		return 0x8220F8D4;
		  /* 8220F8D4h */ case    3:  		/* lwz R9, <#[R3 + 72]> */
		/* 8220F8D4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000048) );
		/* 8220F8D4h case    3:*/		return 0x8220F8D8;
		  /* 8220F8D8h */ case    4:  		/* lis R11, -32253 */
		/* 8220F8D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F8D8h case    4:*/		return 0x8220F8DC;
		  /* 8220F8DCh */ case    5:  		/* lis R10, -32253 */
		/* 8220F8DCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8220F8DCh case    5:*/		return 0x8220F8E0;
		  /* 8220F8E0h */ case    6:  		/* mr R31, R3 */
		/* 8220F8E0h case    6:*/		regs.R31 = regs.R3;
		/* 8220F8E0h case    6:*/		return 0x8220F8E4;
		  /* 8220F8E4h */ case    7:  		/* mr R30, R4 */
		/* 8220F8E4h case    7:*/		regs.R30 = regs.R4;
		/* 8220F8E4h case    7:*/		return 0x8220F8E8;
		  /* 8220F8E8h */ case    8:  		/* mr R29, R5 */
		/* 8220F8E8h case    8:*/		regs.R29 = regs.R5;
		/* 8220F8E8h case    8:*/		return 0x8220F8EC;
		  /* 8220F8ECh */ case    9:  		/* cmplw CR6, R4, R9 */
		/* 8220F8ECh case    9:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8220F8ECh case    9:*/		return 0x8220F8F0;
		  /* 8220F8F0h */ case   10:  		/* addi R28, R11, 27460 */
		/* 8220F8F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8220F8F0h case   10:*/		return 0x8220F8F4;
		  /* 8220F8F4h */ case   11:  		/* addi R27, R10, 27808 */
		/* 8220F8F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6CA0);
		/* 8220F8F4h case   11:*/		return 0x8220F8F8;
		  /* 8220F8F8h */ case   12:  		/* bc 12, CR6_LT, 32 */
		/* 8220F8F8h case   12:*/		if ( regs.CR[6].lt ) { return 0x8220F918;  }
		/* 8220F8F8h case   12:*/		return 0x8220F8FC;
		  /* 8220F8FCh */ case   13:  		/* lis R11, -32253 */
		/* 8220F8FCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F8FCh case   13:*/		return 0x8220F900;
		  /* 8220F900h */ case   14:  		/* mr R6, R27 */
		/* 8220F900h case   14:*/		regs.R6 = regs.R27;
		/* 8220F900h case   14:*/		return 0x8220F904;
		  /* 8220F904h */ case   15:  		/* addi R5, R11, 27976 */
		/* 8220F904h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D48);
		/* 8220F904h case   15:*/		return 0x8220F908;
		  /* 8220F908h */ case   16:  		/* mr R4, R28 */
		/* 8220F908h case   16:*/		regs.R4 = regs.R28;
		/* 8220F908h case   16:*/		return 0x8220F90C;
		  /* 8220F90Ch */ case   17:  		/* li R7, 670 */
		/* 8220F90Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x29E);
		/* 8220F90Ch case   17:*/		return 0x8220F910;
		  /* 8220F910h */ case   18:  		/* li R3, 0 */
		/* 8220F910h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F910h case   18:*/		return 0x8220F914;
		  /* 8220F914h */ case   19:  		/* bl -752908 */
		/* 8220F914h case   19:*/		regs.LR = 0x8220F918; return 0x82157C08;
		/* 8220F914h case   19:*/		return 0x8220F918;
	}
	return 0x8220F918;
} // Block from 8220F8C8h-8220F918h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8220F918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F918);
		  /* 8220F918h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8220F918h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8220F918h case    0:*/		return 0x8220F91C;
		  /* 8220F91Ch */ case    1:  		/* mulli R30, R30, 12 */
		/* 8220F91Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R30,0xC);
		/* 8220F91Ch case    1:*/		return 0x8220F920;
		  /* 8220F920h */ case    2:  		/* add R11, R30, R11 */
		/* 8220F920h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8220F920h case    2:*/		return 0x8220F924;
		  /* 8220F924h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8220F924h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8220F924h case    3:*/		return 0x8220F928;
		  /* 8220F928h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8220F928h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8220F928h case    4:*/		return 0x8220F92C;
		  /* 8220F92Ch */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8220F92Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x8220F94C;  }
		/* 8220F92Ch case    5:*/		return 0x8220F930;
		  /* 8220F930h */ case    6:  		/* lis R11, -32253 */
		/* 8220F930h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F930h case    6:*/		return 0x8220F934;
		  /* 8220F934h */ case    7:  		/* mr R6, R27 */
		/* 8220F934h case    7:*/		regs.R6 = regs.R27;
		/* 8220F934h case    7:*/		return 0x8220F938;
		  /* 8220F938h */ case    8:  		/* addi R5, R11, 27904 */
		/* 8220F938h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D00);
		/* 8220F938h case    8:*/		return 0x8220F93C;
		  /* 8220F93Ch */ case    9:  		/* mr R4, R28 */
		/* 8220F93Ch case    9:*/		regs.R4 = regs.R28;
		/* 8220F93Ch case    9:*/		return 0x8220F940;
		  /* 8220F940h */ case   10:  		/* li R7, 670 */
		/* 8220F940h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x29E);
		/* 8220F940h case   10:*/		return 0x8220F944;
		  /* 8220F944h */ case   11:  		/* li R3, 0 */
		/* 8220F944h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F944h case   11:*/		return 0x8220F948;
		  /* 8220F948h */ case   12:  		/* bl -752960 */
		/* 8220F948h case   12:*/		regs.LR = 0x8220F94C; return 0x82157C08;
		/* 8220F948h case   12:*/		return 0x8220F94C;
	}
	return 0x8220F94C;
} // Block from 8220F918h-8220F94Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220F94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F94C);
		  /* 8220F94Ch */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8220F94Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8220F94Ch case    0:*/		return 0x8220F950;
		  /* 8220F950h */ case    1:  		/* mr R3, R31 */
		/* 8220F950h case    1:*/		regs.R3 = regs.R31;
		/* 8220F950h case    1:*/		return 0x8220F954;
		  /* 8220F954h */ case    2:  		/* add R11, R30, R11 */
		/* 8220F954h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8220F954h case    2:*/		return 0x8220F958;
	}
	return 0x8220F958;
} // Block from 8220F94Ch-8220F958h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220F958h
// Function '?SHASHTABLE_InsertItem@XGRAPHICS@@YAXPAU_HASH_TABLE@1@QAIIPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F958);
		  /* 8220F958h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 8220F958h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8220F958h case    0:*/		return 0x8220F95C;
		  /* 8220F95Ch */ case    1:  		/* lwz R10, <#[R11]> */
		/* 8220F95Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220F95Ch case    1:*/		return 0x8220F960;
		  /* 8220F960h */ case    2:  		/* mullw R11, R9, R29 */
		/* 8220F960h case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 8220F960h case    2:*/		return 0x8220F964;
		  /* 8220F964h */ case    3:  		/* add R4, R11, R10 */
		/* 8220F964h case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 8220F964h case    3:*/		return 0x8220F968;
		  /* 8220F968h */ case    4:  		/* bl -4208 */
		/* 8220F968h case    4:*/		regs.LR = 0x8220F96C; return 0x8220E8F8;
		/* 8220F968h case    4:*/		return 0x8220F96C;
		  /* 8220F96Ch */ case    5:  		/* addi R1, R1, 128 */
		/* 8220F96Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8220F96Ch case    5:*/		return 0x8220F970;
		  /* 8220F970h */ case    6:  		/* b -1566412 */
		/* 8220F970h case    6:*/		return 0x820912A4;
		/* 8220F970h case    6:*/		return 0x8220F974;
		  /* 8220F974h */ case    7:  		/* nop */
		/* 8220F974h case    7:*/		cpu::op::nop();
		/* 8220F974h case    7:*/		return 0x8220F978;
	}
	return 0x8220F978;
} // Block from 8220F958h-8220F978h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220F978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F978);
		  /* 8220F978h */ case    0:  		/* mfspr R12, LR */
		/* 8220F978h case    0:*/		regs.R12 = regs.LR;
		/* 8220F978h case    0:*/		return 0x8220F97C;
		  /* 8220F97Ch */ case    1:  		/* bl -1566504 */
		/* 8220F97Ch case    1:*/		regs.LR = 0x8220F980; return 0x82091254;
		/* 8220F97Ch case    1:*/		return 0x8220F980;
		  /* 8220F980h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8220F980h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8220F980h case    2:*/		return 0x8220F984;
		  /* 8220F984h */ case    3:  		/* lis R11, -32253 */
		/* 8220F984h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8220F984h case    3:*/		return 0x8220F988;
		  /* 8220F988h */ case    4:  		/* lwz R30, <#[R3 + 28]> */
		/* 8220F988h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220F988h case    4:*/		return 0x8220F98C;
		  /* 8220F98Ch */ case    5:  		/* lis R10, -32252 */
		/* 8220F98Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220F98Ch case    5:*/		return 0x8220F990;
		  /* 8220F990h */ case    6:  		/* mr R27, R3 */
		/* 8220F990h case    6:*/		regs.R27 = regs.R3;
		/* 8220F990h case    6:*/		return 0x8220F994;
		  /* 8220F994h */ case    7:  		/* mr R31, R4 */
		/* 8220F994h case    7:*/		regs.R31 = regs.R4;
		/* 8220F994h case    7:*/		return 0x8220F998;
		  /* 8220F998h */ case    8:  		/* cmplwi CR6, R4, 3 */
		/* 8220F998h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000003);
		/* 8220F998h case    8:*/		return 0x8220F99C;
		  /* 8220F99Ch */ case    9:  		/* addi R29, R11, 27460 */
		/* 8220F99Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8220F99Ch case    9:*/		return 0x8220F9A0;
		  /* 8220F9A0h */ case   10:  		/* addi R28, R10, -7312 */
		/* 8220F9A0h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFE370);
		/* 8220F9A0h case   10:*/		return 0x8220F9A4;
		  /* 8220F9A4h */ case   11:  		/* bc 4, CR6_GT, 32 */
		/* 8220F9A4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8220F9C4;  }
		/* 8220F9A4h case   11:*/		return 0x8220F9A8;
		  /* 8220F9A8h */ case   12:  		/* lis R11, -32252 */
		/* 8220F9A8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F9A8h case   12:*/		return 0x8220F9AC;
		  /* 8220F9ACh */ case   13:  		/* mr R6, R28 */
		/* 8220F9ACh case   13:*/		regs.R6 = regs.R28;
		/* 8220F9ACh case   13:*/		return 0x8220F9B0;
		  /* 8220F9B0h */ case   14:  		/* addi R5, R11, -7088 */
		/* 8220F9B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE450);
		/* 8220F9B0h case   14:*/		return 0x8220F9B4;
		  /* 8220F9B4h */ case   15:  		/* mr R4, R29 */
		/* 8220F9B4h case   15:*/		regs.R4 = regs.R29;
		/* 8220F9B4h case   15:*/		return 0x8220F9B8;
		  /* 8220F9B8h */ case   16:  		/* li R7, 1461 */
		/* 8220F9B8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x5B5);
		/* 8220F9B8h case   16:*/		return 0x8220F9BC;
		  /* 8220F9BCh */ case   17:  		/* li R3, 0 */
		/* 8220F9BCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F9BCh case   17:*/		return 0x8220F9C0;
		  /* 8220F9C0h */ case   18:  		/* bl -753080 */
		/* 8220F9C0h case   18:*/		regs.LR = 0x8220F9C4; return 0x82157C08;
		/* 8220F9C0h case   18:*/		return 0x8220F9C4;
	}
	return 0x8220F9C4;
} // Block from 8220F978h-8220F9C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8220F9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F9C4);
		  /* 8220F9C4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8220F9C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8220F9C4h case    0:*/		return 0x8220F9C8;
		  /* 8220F9C8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8220F9C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220F9E8;  }
		/* 8220F9C8h case    1:*/		return 0x8220F9CC;
		  /* 8220F9CCh */ case    2:  		/* lis R11, -32252 */
		/* 8220F9CCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220F9CCh case    2:*/		return 0x8220F9D0;
		  /* 8220F9D0h */ case    3:  		/* mr R6, R28 */
		/* 8220F9D0h case    3:*/		regs.R6 = regs.R28;
		/* 8220F9D0h case    3:*/		return 0x8220F9D4;
		  /* 8220F9D4h */ case    4:  		/* addi R5, R11, -7128 */
		/* 8220F9D4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE428);
		/* 8220F9D4h case    4:*/		return 0x8220F9D8;
		  /* 8220F9D8h */ case    5:  		/* mr R4, R29 */
		/* 8220F9D8h case    5:*/		regs.R4 = regs.R29;
		/* 8220F9D8h case    5:*/		return 0x8220F9DC;
		  /* 8220F9DCh */ case    6:  		/* li R7, 1462 */
		/* 8220F9DCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5B6);
		/* 8220F9DCh case    6:*/		return 0x8220F9E0;
		  /* 8220F9E0h */ case    7:  		/* li R3, 0 */
		/* 8220F9E0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220F9E0h case    7:*/		return 0x8220F9E4;
		  /* 8220F9E4h */ case    8:  		/* bl -753116 */
		/* 8220F9E4h case    8:*/		regs.LR = 0x8220F9E8; return 0x82157C08;
		/* 8220F9E4h case    8:*/		return 0x8220F9E8;
	}
	return 0x8220F9E8;
} // Block from 8220F9C4h-8220F9E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220F9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220F9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220F9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220F9E8);
		  /* 8220F9E8h */ case    0:  		/* addi R11, R31, 4196 */
		/* 8220F9E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1064);
		/* 8220F9E8h case    0:*/		return 0x8220F9EC;
		  /* 8220F9ECh */ case    1:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8220F9ECh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8220F9ECh case    1:*/		return 0x8220F9F0;
		  /* 8220F9F0h */ case    2:  		/* lwzx R11, <#[R10 + R30]> */
		/* 8220F9F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8220F9F0h case    2:*/		return 0x8220F9F4;
		  /* 8220F9F4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8220F9F4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8220F9F4h case    3:*/		return 0x8220F9F8;
		  /* 8220F9F8h */ case    4:  		/* bc 4, CR6_EQ, 64 */
		/* 8220F9F8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8220FA38;  }
		/* 8220F9F8h case    4:*/		return 0x8220F9FC;
		  /* 8220F9FCh */ case    5:  		/* stw R31, <#[R1 + 80]> */
		/* 8220F9FCh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 8220F9FCh case    5:*/		return 0x8220FA00;
		  /* 8220FA00h */ case    6:  		/* cmplwi CR6, R31, 1 */
		/* 8220FA00h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 8220FA00h case    6:*/		return 0x8220FA04;
		  /* 8220FA04h */ case    7:  		/* bc 4, CR6_EQ, 60 */
		/* 8220FA04h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220FA40;  }
		/* 8220FA04h case    7:*/		return 0x8220FA08;
		  /* 8220FA08h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 8220FA08h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8220FA08h case    8:*/		return 0x8220FA0C;
		  /* 8220FA0Ch */ case    9:  		/* li R11, 1 */
		/* 8220FA0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8220FA0Ch case    9:*/		return 0x8220FA10;
		  /* 8220FA10h */ case   10:  		/* stwx R11, <#[R10 + R30]> */
		/* 8220FA10h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8220FA10h case   10:*/		return 0x8220FA14;
		  /* 8220FA14h */ case   11:  		/* addi R7, R1, 80 */
		/* 8220FA14h case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8220FA14h case   11:*/		return 0x8220FA18;
	}
	return 0x8220FA18;
} // Block from 8220F9E8h-8220FA18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8220FA18h
// Function '?SHASHTABLE_GetSingleItem@XGRAPHICS@@YAPAXPAU_HASH_TABLE@1@QAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FA18);
		  /* 8220FA18h */ case    0:  		/* lwz R5, <#[R30 + 12]> */
		/* 8220FA18h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 8220FA18h case    0:*/		return 0x8220FA1C;
		  /* 8220FA1Ch */ case    1:  		/* li R6, 1 */
		/* 8220FA1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8220FA1Ch case    1:*/		return 0x8220FA20;
		  /* 8220FA20h */ case    2:  		/* addi R4, R30, 13152 */
		/* 8220FA20h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x3360);
		/* 8220FA20h case    2:*/		return 0x8220FA24;
		  /* 8220FA24h */ case    3:  		/* mr R3, R27 */
		/* 8220FA24h case    3:*/		regs.R3 = regs.R27;
		/* 8220FA24h case    3:*/		return 0x8220FA28;
		  /* 8220FA28h */ case    4:  		/* bl -1736 */
		/* 8220FA28h case    4:*/		regs.LR = 0x8220FA2C; return 0x8220F360;
		/* 8220FA28h case    4:*/		return 0x8220FA2C;
		  /* 8220FA2Ch */ case    5:  		/* lwz R11, <#[R30 + 13164]> */
		/* 8220FA2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000336C) );
		/* 8220FA2Ch case    5:*/		return 0x8220FA30;
		  /* 8220FA30h */ case    6:  		/* addi R11, R11, 1 */
		/* 8220FA30h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220FA30h case    6:*/		return 0x8220FA34;
		  /* 8220FA34h */ case    7:  		/* stw R11, <#[R30 + 13164]> */
		/* 8220FA34h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000336C) );
		/* 8220FA34h case    7:*/		return 0x8220FA38;
	}
	return 0x8220FA38;
} // Block from 8220FA18h-8220FA38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8220FA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FA38);
		  /* 8220FA38h */ case    0:  		/* addi R1, R1, 144 */
		/* 8220FA38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8220FA38h case    0:*/		return 0x8220FA3C;
		  /* 8220FA3Ch */ case    1:  		/* b -1566616 */
		/* 8220FA3Ch case    1:*/		return 0x820912A4;
		/* 8220FA3Ch case    1:*/		return 0x8220FA40;
	}
	return 0x8220FA40;
} // Block from 8220FA38h-8220FA40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FA40);
		  /* 8220FA40h */ case    0:  		/* cmplwi CR6, R31, 2 */
		/* 8220FA40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 8220FA40h case    0:*/		return 0x8220FA44;
		  /* 8220FA44h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8220FA44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220FA54;  }
		/* 8220FA44h case    1:*/		return 0x8220FA48;
		  /* 8220FA48h */ case    2:  		/* lwz R11, <#[R30 + 23204]> */
		/* 8220FA48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00005AA4) );
		/* 8220FA48h case    2:*/		return 0x8220FA4C;
		  /* 8220FA4Ch */ case    3:  		/* addi R11, R11, -1 */
		/* 8220FA4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8220FA4Ch case    3:*/		return 0x8220FA50;
		  /* 8220FA50h */ case    4:  		/* b -72 */
		/* 8220FA50h case    4:*/		return 0x8220FA08;
		/* 8220FA50h case    4:*/		return 0x8220FA54;
	}
	return 0x8220FA54;
} // Block from 8220FA40h-8220FA54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220FA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FA54);
		  /* 8220FA54h */ case    0:  		/* cmplwi CR6, R31, 3 */
		/* 8220FA54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000003);
		/* 8220FA54h case    0:*/		return 0x8220FA58;
		  /* 8220FA58h */ case    1:  		/* bc 4, CR6_EQ, -76 */
		/* 8220FA58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220FA0C;  }
		/* 8220FA58h case    1:*/		return 0x8220FA5C;
		  /* 8220FA5Ch */ case    2:  		/* li R11, 0 */
		/* 8220FA5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8220FA5Ch case    2:*/		return 0x8220FA60;
		  /* 8220FA60h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 8220FA60h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8220FA60h case    3:*/		return 0x8220FA64;
		  /* 8220FA64h */ case    4:  		/* b -80 */
		/* 8220FA64h case    4:*/		return 0x8220FA14;
		/* 8220FA64h case    4:*/		return 0x8220FA68;
		  /* 8220FA68h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 8220FA68h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8220FA68h case    5:*/		return 0x8220FA6C;
		  /* 8220FA6Ch */ case    6:  		/* rlwinm R11, R10, 28, 30, 31 */
		/* 8220FA6Ch case    6:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R11,regs.R10);
		/* 8220FA6Ch case    6:*/		return 0x8220FA70;
		  /* 8220FA70h */ case    7:  		/* rlwinm R3, R10, 0, 30, 31 */
		/* 8220FA70h case    7:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R3,regs.R10);
		/* 8220FA70h case    7:*/		return 0x8220FA74;
		  /* 8220FA74h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 8220FA74h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FA74h case    8:*/		return 0x8220FA78;
		  /* 8220FA78h */ case    9:  		/* bc 12, CR6_LT, 44 */
		/* 8220FA78h case    9:*/		if ( regs.CR[6].lt ) { return 0x8220FAA4;  }
		/* 8220FA78h case    9:*/		return 0x8220FA7C;
		  /* 8220FA7Ch */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 8220FA7Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8220FAAC;  }
		/* 8220FA7Ch case   10:*/		return 0x8220FA80;
		  /* 8220FA80h */ case   11:  		/* cmplwi CR6, R11, 3 */
		/* 8220FA80h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FA80h case   11:*/		return 0x8220FA84;
		  /* 8220FA84h */ case   12:  		/* bc 12, CR6_LT, 20 */
		/* 8220FA84h case   12:*/		if ( regs.CR[6].lt ) { return 0x8220FA98;  }
		/* 8220FA84h case   12:*/		return 0x8220FA88;
		  /* 8220FA88h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 8220FA88h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8220FAAC;  }
		/* 8220FA88h case   13:*/		return 0x8220FA8C;
		  /* 8220FA8Ch */ case   14:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FA8Ch case   14:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FA8Ch case   14:*/		return 0x8220FA90;
		  /* 8220FA90h */ case   15:  		/* ori R3, R11, 8 */
		/* 8220FA90h case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x8);
		/* 8220FA90h case   15:*/		return 0x8220FA94;
		  /* 8220FA94h */ case   16:  		/* b 24 */
		/* 8220FA94h case   16:*/		return 0x8220FAAC;
		/* 8220FA94h case   16:*/		return 0x8220FA98;
	}
	return 0x8220FA98;
} // Block from 8220FA54h-8220FA98h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220FA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FA98);
		  /* 8220FA98h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FA98h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FA98h case    0:*/		return 0x8220FA9C;
		  /* 8220FA9Ch */ case    1:  		/* ori R3, R11, 4 */
		/* 8220FA9Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x4);
		/* 8220FA9Ch case    1:*/		return 0x8220FAA0;
		  /* 8220FAA0h */ case    2:  		/* b 12 */
		/* 8220FAA0h case    2:*/		return 0x8220FAAC;
		/* 8220FAA0h case    2:*/		return 0x8220FAA4;
	}
	return 0x8220FAA4;
} // Block from 8220FA98h-8220FAA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FAA4);
		  /* 8220FAA4h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FAA4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FAA4h case    0:*/		return 0x8220FAA8;
		  /* 8220FAA8h */ case    1:  		/* ori R3, R11, 12 */
		/* 8220FAA8h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0xC);
		/* 8220FAA8h case    1:*/		return 0x8220FAAC;
	}
	return 0x8220FAAC;
} // Block from 8220FAA4h-8220FAACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FAAC);
		  /* 8220FAACh */ case    0:  		/* rlwinm R11, R10, 24, 30, 31 */
		/* 8220FAACh case    0:*/		cpu::op::rlwinm<0,24,30,31>(regs,&regs.R11,regs.R10);
		/* 8220FAACh case    0:*/		return 0x8220FAB0;
		  /* 8220FAB0h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FAB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FAB0h case    1:*/		return 0x8220FAB4;
		  /* 8220FAB4h */ case    2:  		/* bc 12, CR6_LT, 40 */
		/* 8220FAB4h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FADC;  }
		/* 8220FAB4h case    2:*/		return 0x8220FAB8;
		  /* 8220FAB8h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8220FAB8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FAD0;  }
		/* 8220FAB8h case    3:*/		return 0x8220FABC;
		  /* 8220FABCh */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FABCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FABCh case    4:*/		return 0x8220FAC0;
		  /* 8220FAC0h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8220FAC0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220FAE4;  }
		/* 8220FAC0h case    5:*/		return 0x8220FAC4;
		  /* 8220FAC4h */ case    6:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FAC4h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FAC4h case    6:*/		return 0x8220FAC8;
		  /* 8220FAC8h */ case    7:  		/* ori R3, R11, 16 */
		/* 8220FAC8h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x10);
		/* 8220FAC8h case    7:*/		return 0x8220FACC;
		  /* 8220FACCh */ case    8:  		/* b 24 */
		/* 8220FACCh case    8:*/		return 0x8220FAE4;
		/* 8220FACCh case    8:*/		return 0x8220FAD0;
	}
	return 0x8220FAD0;
} // Block from 8220FAACh-8220FAD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220FAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FAD0);
		  /* 8220FAD0h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FAD0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FAD0h case    0:*/		return 0x8220FAD4;
		  /* 8220FAD4h */ case    1:  		/* ori R3, R11, 48 */
		/* 8220FAD4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x30);
		/* 8220FAD4h case    1:*/		return 0x8220FAD8;
		  /* 8220FAD8h */ case    2:  		/* b 12 */
		/* 8220FAD8h case    2:*/		return 0x8220FAE4;
		/* 8220FAD8h case    2:*/		return 0x8220FADC;
	}
	return 0x8220FADC;
} // Block from 8220FAD0h-8220FADCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FADC);
		  /* 8220FADCh */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FADCh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FADCh case    0:*/		return 0x8220FAE0;
		  /* 8220FAE0h */ case    1:  		/* ori R3, R11, 32 */
		/* 8220FAE0h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x20);
		/* 8220FAE0h case    1:*/		return 0x8220FAE4;
	}
	return 0x8220FAE4;
} // Block from 8220FADCh-8220FAE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FAE4);
		  /* 8220FAE4h */ case    0:  		/* rlwinm R11, R10, 20, 30, 31 */
		/* 8220FAE4h case    0:*/		cpu::op::rlwinm<0,20,30,31>(regs,&regs.R11,regs.R10);
		/* 8220FAE4h case    0:*/		return 0x8220FAE8;
		  /* 8220FAE8h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FAE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FAE8h case    1:*/		return 0x8220FAEC;
		  /* 8220FAECh */ case    2:  		/* bc 12, CR6_LT, 40 */
		/* 8220FAECh case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FB14;  }
		/* 8220FAECh case    2:*/		return 0x8220FAF0;
		  /* 8220FAF0h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8220FAF0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FB08;  }
		/* 8220FAF0h case    3:*/		return 0x8220FAF4;
		  /* 8220FAF4h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FAF4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FAF4h case    4:*/		return 0x8220FAF8;
		  /* 8220FAF8h */ case    5:  		/* bclr 4, CR6_LT */
		/* 8220FAF8h case    5:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 8220FAF8h case    5:*/		return 0x8220FAFC;
	}
	return 0x8220FAFC;
} // Block from 8220FAE4h-8220FAFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220FAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FAFC);
		  /* 8220FAFCh */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FAFCh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FAFCh case    0:*/		return 0x8220FB00;
		  /* 8220FB00h */ case    1:  		/* ori R3, R11, 192 */
		/* 8220FB00h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0xC0);
		/* 8220FB00h case    1:*/		return 0x8220FB04;
		  /* 8220FB04h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8220FB04h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220FB04h case    2:*/		return 0x8220FB08;
	}
	return 0x8220FB08;
} // Block from 8220FAFCh-8220FB08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FB08);
		  /* 8220FB08h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FB08h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FB08h case    0:*/		return 0x8220FB0C;
		  /* 8220FB0Ch */ case    1:  		/* ori R3, R11, 128 */
		/* 8220FB0Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x80);
		/* 8220FB0Ch case    1:*/		return 0x8220FB10;
	}
	return 0x8220FB10;
} // Block from 8220FB08h-8220FB10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FB10h
// Function '?SHASHTABLE_RemoveItem@XGRAPHICS@@YAPAXPAU_HASH_TABLE@1@QAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FB10);
		  /* 8220FB10h */ case    0:  		/* bclr 20, CR0_LT */
		/* 8220FB10h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220FB10h case    0:*/		return 0x8220FB14;
	}
	return 0x8220FB14;
} // Block from 8220FB10h-8220FB14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FB14);
		  /* 8220FB14h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8220FB14h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8220FB14h case    0:*/		return 0x8220FB18;
		  /* 8220FB18h */ case    1:  		/* ori R3, R11, 64 */
		/* 8220FB18h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x40);
		/* 8220FB18h case    1:*/		return 0x8220FB1C;
		  /* 8220FB1Ch */ case    2:  		/* bclr 20, CR0_LT */
		/* 8220FB1Ch case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220FB1Ch case    2:*/		return 0x8220FB20;
	}
	return 0x8220FB20;
} // Block from 8220FB14h-8220FB20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FB20);
		  /* 8220FB20h */ case    0:  		/* mfspr R12, LR */
		/* 8220FB20h case    0:*/		regs.R12 = regs.LR;
		/* 8220FB20h case    0:*/		return 0x8220FB24;
		  /* 8220FB24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8220FB24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220FB24h case    1:*/		return 0x8220FB28;
		  /* 8220FB28h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8220FB28h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220FB28h case    2:*/		return 0x8220FB2C;
		  /* 8220FB2Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8220FB2Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8220FB2Ch case    3:*/		return 0x8220FB30;
		  /* 8220FB30h */ case    4:  		/* lwz R11, <#[R3 + 28]> */
		/* 8220FB30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220FB30h case    4:*/		return 0x8220FB34;
		  /* 8220FB34h */ case    5:  		/* cmplwi CR6, R4, 13 */
		/* 8220FB34h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000000D);
		/* 8220FB34h case    5:*/		return 0x8220FB38;
		  /* 8220FB38h */ case    6:  		/* lwz R31, <#[R11 + 10816]> */
		/* 8220FB38h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00002A40) );
		/* 8220FB38h case    6:*/		return 0x8220FB3C;
		  /* 8220FB3Ch */ case    7:  		/* bc 12, CR6_EQ, 720 */
		/* 8220FB3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8220FE0C;  }
		/* 8220FB3Ch case    7:*/		return 0x8220FB40;
		  /* 8220FB40h */ case    8:  		/* cmplwi CR6, R4, 72 */
		/* 8220FB40h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000048);
		/* 8220FB40h case    8:*/		return 0x8220FB44;
		  /* 8220FB44h */ case    9:  		/* bc 12, CR6_EQ, 620 */
		/* 8220FB44h case    9:*/		if ( regs.CR[6].eq ) { return 0x8220FDB0;  }
		/* 8220FB44h case    9:*/		return 0x8220FB48;
		  /* 8220FB48h */ case   10:  		/* cmplwi CR6, R4, 81 */
		/* 8220FB48h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000051);
		/* 8220FB48h case   10:*/		return 0x8220FB4C;
		  /* 8220FB4Ch */ case   11:  		/* bc 12, CR6_EQ, 512 */
		/* 8220FB4Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8220FD4C;  }
		/* 8220FB4Ch case   11:*/		return 0x8220FB50;
		  /* 8220FB50h */ case   12:  		/* cmplwi CR6, R4, 85 */
		/* 8220FB50h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000055);
		/* 8220FB50h case   12:*/		return 0x8220FB54;
		  /* 8220FB54h */ case   13:  		/* bc 12, CR6_EQ, 388 */
		/* 8220FB54h case   13:*/		if ( regs.CR[6].eq ) { return 0x8220FCD8;  }
		/* 8220FB54h case   13:*/		return 0x8220FB58;
		  /* 8220FB58h */ case   14:  		/* cmplwi CR6, R4, 86 */
		/* 8220FB58h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000056);
		/* 8220FB58h case   14:*/		return 0x8220FB5C;
		  /* 8220FB5Ch */ case   15:  		/* bc 12, CR6_EQ, 304 */
		/* 8220FB5Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8220FC8C;  }
		/* 8220FB5Ch case   15:*/		return 0x8220FB60;
		  /* 8220FB60h */ case   16:  		/* cmplwi CR6, R4, 108 */
		/* 8220FB60h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000006C);
		/* 8220FB60h case   16:*/		return 0x8220FB64;
		  /* 8220FB64h */ case   17:  		/* bc 12, CR6_EQ, 192 */
		/* 8220FB64h case   17:*/		if ( regs.CR[6].eq ) { return 0x8220FC24;  }
		/* 8220FB64h case   17:*/		return 0x8220FB68;
		  /* 8220FB68h */ case   18:  		/* cmplwi CR6, R4, 109 */
		/* 8220FB68h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000006D);
		/* 8220FB68h case   18:*/		return 0x8220FB6C;
		  /* 8220FB6Ch */ case   19:  		/* bc 12, CR6_EQ, 76 */
		/* 8220FB6Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8220FBB8;  }
		/* 8220FB6Ch case   19:*/		return 0x8220FB70;
		  /* 8220FB70h */ case   20:  		/* lis R11, -32216 */
		/* 8220FB70h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8220FB70h case   20:*/		return 0x8220FB74;
		  /* 8220FB74h */ case   21:  		/* lwz R8, <#[R31 + 8]> */
		/* 8220FB74h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FB74h case   21:*/		return 0x8220FB78;
		  /* 8220FB78h */ case   22:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 8220FB78h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 8220FB78h case   22:*/		return 0x8220FB7C;
		  /* 8220FB7Ch */ case   23:  		/* addi R11, R11, 8512 */
		/* 8220FB7Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2140);
		/* 8220FB7Ch case   23:*/		return 0x8220FB80;
		  /* 8220FB80h */ case   24:  		/* cmplwi CR6, R6, 0 */
		/* 8220FB80h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8220FB80h case   24:*/		return 0x8220FB84;
		  /* 8220FB84h */ case   25:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8220FB84h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220FB84h case   25:*/		return 0x8220FB88;
		  /* 8220FB88h */ case   26:  		/* lwz R10, <#[R31]> */
		/* 8220FB88h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FB88h case   26:*/		return 0x8220FB8C;
		  /* 8220FB8Ch */ case   27:  		/* bc 12, CR6_EQ, 20 */
		/* 8220FB8Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x8220FBA0;  }
		/* 8220FB8Ch case   27:*/		return 0x8220FB90;
		  /* 8220FB90h */ case   28:  		/* li R9, 5 */
		/* 8220FB90h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 8220FB90h case   28:*/		return 0x8220FB94;
		  /* 8220FB94h */ case   29:  		/* rlwimi R8, R11, 3, 24, 28 */
		/* 8220FB94h case   29:*/		cpu::op::rlwimi<0,3,24,28>(regs,&regs.R8,regs.R11);
		/* 8220FB94h case   29:*/		return 0x8220FB98;
		  /* 8220FB98h */ case   30:  		/* rlwimi R10, R9, 0, 26, 31 */
		/* 8220FB98h case   30:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R10,regs.R9);
		/* 8220FB98h case   30:*/		return 0x8220FB9C;
		  /* 8220FB9Ch */ case   31:  		/* b 16 */
		/* 8220FB9Ch case   31:*/		return 0x8220FBAC;
		/* 8220FB9Ch case   31:*/		return 0x8220FBA0;
	}
	return 0x8220FBA0;
} // Block from 8220FB20h-8220FBA0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBA0);
		  /* 8220FBA0h */ case    0:  		/* li R9, 1 */
		/* 8220FBA0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8220FBA0h case    0:*/		return 0x8220FBA4;
		  /* 8220FBA4h */ case    1:  		/* rlwimi R10, R11, 0, 26, 31 */
		/* 8220FBA4h case    1:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R10,regs.R11);
		/* 8220FBA4h case    1:*/		return 0x8220FBA8;
		  /* 8220FBA8h */ case    2:  		/* rlwimi R8, R9, 4, 24, 28 */
		/* 8220FBA8h case    2:*/		cpu::op::rlwimi<0,4,24,28>(regs,&regs.R8,regs.R9);
		/* 8220FBA8h case    2:*/		return 0x8220FBAC;
	}
	return 0x8220FBAC;
} // Block from 8220FBA0h-8220FBACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBAC);
		  /* 8220FBACh */ case    0:  		/* stw R10, <#[R31]> */
		/* 8220FBACh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FBACh case    0:*/		return 0x8220FBB0;
		  /* 8220FBB0h */ case    1:  		/* stw R8, <#[R31 + 8]> */
		/* 8220FBB0h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FBB0h case    1:*/		return 0x8220FBB4;
		  /* 8220FBB4h */ case    2:  		/* b 716 */
		/* 8220FBB4h case    2:*/		return 0x8220FE80;
		/* 8220FBB4h case    2:*/		return 0x8220FBB8;
	}
	return 0x8220FBB8;
} // Block from 8220FBACh-8220FBB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBB8);
		  /* 8220FBB8h */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FBB8h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FBB8h case    0:*/		return 0x8220FBBC;
		  /* 8220FBBCh */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FBBCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FBBCh case    1:*/		return 0x8220FBC0;
		  /* 8220FBC0h */ case    2:  		/* bc 12, CR6_LT, 84 */
		/* 8220FBC0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FC14;  }
		/* 8220FBC0h case    2:*/		return 0x8220FBC4;
		  /* 8220FBC4h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 8220FBC4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FC0C;  }
		/* 8220FBC4h case    3:*/		return 0x8220FBC8;
	}
	return 0x8220FBC8;
} // Block from 8220FBB8h-8220FBC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBC8h
// Function '?SHASHTABLE_RemoveAnyItem@XGRAPHICS@@YAPAXPAU_HASH_TABLE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBC8);
		  /* 8220FBC8h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 8220FBC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FBC8h case    0:*/		return 0x8220FBCC;
		  /* 8220FBCCh */ case    1:  		/* bc 12, CR6_LT, 36 */
		/* 8220FBCCh case    1:*/		if ( regs.CR[6].lt ) { return 0x8220FBF0;  }
		/* 8220FBCCh case    1:*/		return 0x8220FBD0;
		  /* 8220FBD0h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8220FBD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220FBDC;  }
		/* 8220FBD0h case    2:*/		return 0x8220FBD4;
		  /* 8220FBD4h */ case    3:  		/* li R7, 1768 */
		/* 8220FBD4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x6E8);
		/* 8220FBD4h case    3:*/		return 0x8220FBD8;
		  /* 8220FBD8h */ case    4:  		/* b 596 */
		/* 8220FBD8h case    4:*/		return 0x8220FE2C;
		/* 8220FBD8h case    4:*/		return 0x8220FBDC;
	}
	return 0x8220FBDC;
} // Block from 8220FBC8h-8220FBDCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBDC);
		  /* 8220FBDCh */ case    0:  		/* li R8, 29 */
		/* 8220FBDCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1D);
		/* 8220FBDCh case    0:*/		return 0x8220FBE0;
		  /* 8220FBE0h */ case    1:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FBE0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FBE0h case    1:*/		return 0x8220FBE4;
		  /* 8220FBE4h */ case    2:  		/* li R10, 1 */
		/* 8220FBE4h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8220FBE4h case    2:*/		return 0x8220FBE8;
		  /* 8220FBE8h */ case    3:  		/* rlwimi R9, R10, 4, 24, 28 */
		/* 8220FBE8h case    3:*/		cpu::op::rlwimi<0,4,24,28>(regs,&regs.R9,regs.R10);
		/* 8220FBE8h case    3:*/		return 0x8220FBEC;
		  /* 8220FBECh */ case    4:  		/* b 644 */
		/* 8220FBECh case    4:*/		return 0x8220FE70;
		/* 8220FBECh case    4:*/		return 0x8220FBF0;
	}
	return 0x8220FBF0;
} // Block from 8220FBDCh-8220FBF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220FBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FBF0);
		  /* 8220FBF0h */ case    0:  		/* li R8, 15 */
		/* 8220FBF0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0xF);
		/* 8220FBF0h case    0:*/		return 0x8220FBF4;
		  /* 8220FBF4h */ case    1:  		/* lwz R11, <#[R31]> */
		/* 8220FBF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FBF4h case    1:*/		return 0x8220FBF8;
		  /* 8220FBF8h */ case    2:  		/* rlwimi R11, R8, 1, 26, 31 */
		/* 8220FBF8h case    2:*/		cpu::op::rlwimi<0,1,26,31>(regs,&regs.R11,regs.R8);
		/* 8220FBF8h case    2:*/		return 0x8220FBFC;
		  /* 8220FBFCh */ case    3:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FBFCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FBFCh case    3:*/		return 0x8220FC00;
		  /* 8220FC00h */ case    4:  		/* li R10, 1 */
		/* 8220FC00h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8220FC00h case    4:*/		return 0x8220FC04;
		  /* 8220FC04h */ case    5:  		/* rlwimi R9, R10, 4, 24, 28 */
		/* 8220FC04h case    5:*/		cpu::op::rlwimi<0,4,24,28>(regs,&regs.R9,regs.R10);
		/* 8220FC04h case    5:*/		return 0x8220FC08;
		  /* 8220FC08h */ case    6:  		/* b 624 */
		/* 8220FC08h case    6:*/		return 0x8220FE78;
		/* 8220FC08h case    6:*/		return 0x8220FC0C;
	}
	return 0x8220FC0C;
} // Block from 8220FBF0h-8220FC0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC0C);
		  /* 8220FC0Ch */ case    0:  		/* li R8, 27 */
		/* 8220FC0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1B);
		/* 8220FC0Ch case    0:*/		return 0x8220FC10;
		  /* 8220FC10h */ case    1:  		/* b -48 */
		/* 8220FC10h case    1:*/		return 0x8220FBE0;
		/* 8220FC10h case    1:*/		return 0x8220FC14;
	}
	return 0x8220FC14;
} // Block from 8220FC0Ch-8220FC14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC14);
		  /* 8220FC14h */ case    0:  		/* li R8, 7 */
		/* 8220FC14h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x7);
		/* 8220FC14h case    0:*/		return 0x8220FC18;
		  /* 8220FC18h */ case    1:  		/* lwz R11, <#[R31]> */
		/* 8220FC18h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FC18h case    1:*/		return 0x8220FC1C;
		  /* 8220FC1Ch */ case    2:  		/* rlwimi R11, R8, 2, 26, 31 */
		/* 8220FC1Ch case    2:*/		cpu::op::rlwimi<0,2,26,31>(regs,&regs.R11,regs.R8);
		/* 8220FC1Ch case    2:*/		return 0x8220FC20;
		  /* 8220FC20h */ case    3:  		/* b -36 */
		/* 8220FC20h case    3:*/		return 0x8220FBFC;
		/* 8220FC20h case    3:*/		return 0x8220FC24;
	}
	return 0x8220FC24;
} // Block from 8220FC14h-8220FC24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC24);
		  /* 8220FC24h */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FC24h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FC24h case    0:*/		return 0x8220FC28;
		  /* 8220FC28h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FC28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FC28h case    1:*/		return 0x8220FC2C;
		  /* 8220FC2Ch */ case    2:  		/* bc 12, CR6_LT, 88 */
		/* 8220FC2Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FC84;  }
		/* 8220FC2Ch case    2:*/		return 0x8220FC30;
		  /* 8220FC30h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 8220FC30h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FC68;  }
		/* 8220FC30h case    3:*/		return 0x8220FC34;
		  /* 8220FC34h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FC34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FC34h case    4:*/		return 0x8220FC38;
		  /* 8220FC38h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8220FC38h case    5:*/		if ( regs.CR[6].lt ) { return 0x8220FC58;  }
		/* 8220FC38h case    5:*/		return 0x8220FC3C;
		  /* 8220FC3Ch */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8220FC3Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8220FC48;  }
		/* 8220FC3Ch case    6:*/		return 0x8220FC40;
		  /* 8220FC40h */ case    7:  		/* li R7, 1743 */
		/* 8220FC40h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x6CF);
		/* 8220FC40h case    7:*/		return 0x8220FC44;
		  /* 8220FC44h */ case    8:  		/* b 488 */
		/* 8220FC44h case    8:*/		return 0x8220FE2C;
		/* 8220FC44h case    8:*/		return 0x8220FC48;
	}
	return 0x8220FC48;
} // Block from 8220FC24h-8220FC48h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC48h
// Function '?GetAvailableTemp@XGRAPHICS@@YAIPAU_XLT_CONTEXT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC48);
		  /* 8220FC48h */ case    0:  		/* li R10, 23 */
		/* 8220FC48h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 8220FC48h case    0:*/		return 0x8220FC4C;
		  /* 8220FC4Ch */ case    1:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FC4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FC4Ch case    1:*/		return 0x8220FC50;
		  /* 8220FC50h */ case    2:  		/* rlwimi R9, R10, 3, 24, 28 */
		/* 8220FC50h case    2:*/		cpu::op::rlwimi<0,3,24,28>(regs,&regs.R9,regs.R10);
		/* 8220FC50h case    2:*/		return 0x8220FC54;
		  /* 8220FC54h */ case    3:  		/* b 536 */
		/* 8220FC54h case    3:*/		return 0x8220FE6C;
		/* 8220FC54h case    3:*/		return 0x8220FC58;
	}
	return 0x8220FC58;
} // Block from 8220FC48h-8220FC58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC58);
		  /* 8220FC58h */ case    0:  		/* li R10, 11 */
		/* 8220FC58h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xB);
		/* 8220FC58h case    0:*/		return 0x8220FC5C;
		  /* 8220FC5Ch */ case    1:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FC5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FC5Ch case    1:*/		return 0x8220FC60;
		  /* 8220FC60h */ case    2:  		/* rlwimi R9, R10, 4, 24, 28 */
		/* 8220FC60h case    2:*/		cpu::op::rlwimi<0,4,24,28>(regs,&regs.R9,regs.R10);
		/* 8220FC60h case    2:*/		return 0x8220FC64;
		  /* 8220FC64h */ case    3:  		/* b 520 */
		/* 8220FC64h case    3:*/		return 0x8220FE6C;
		/* 8220FC64h case    3:*/		return 0x8220FC68;
	}
	return 0x8220FC68;
} // Block from 8220FC58h-8220FC68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC68);
		  /* 8220FC68h */ case    0:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FC68h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FC68h case    0:*/		return 0x8220FC6C;
		  /* 8220FC6Ch */ case    1:  		/* li R11, 5 */
		/* 8220FC6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8220FC6Ch case    1:*/		return 0x8220FC70;
		  /* 8220FC70h */ case    2:  		/* rlwimi R9, R11, 5, 24, 28 */
		/* 8220FC70h case    2:*/		cpu::op::rlwimi<0,5,24,28>(regs,&regs.R9,regs.R11);
		/* 8220FC70h case    2:*/		return 0x8220FC74;
		  /* 8220FC74h */ case    3:  		/* lwz R10, <#[R31]> */
		/* 8220FC74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FC74h case    3:*/		return 0x8220FC78;
		  /* 8220FC78h */ case    4:  		/* rlwimi R10, R11, 0, 26, 31 */
		/* 8220FC78h case    4:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R10,regs.R11);
		/* 8220FC78h case    4:*/		return 0x8220FC7C;
		  /* 8220FC7Ch */ case    5:  		/* stw R10, <#[R31]> */
		/* 8220FC7Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FC7Ch case    5:*/		return 0x8220FC80;
		  /* 8220FC80h */ case    6:  		/* b 508 */
		/* 8220FC80h case    6:*/		return 0x8220FE7C;
		/* 8220FC80h case    6:*/		return 0x8220FC84;
	}
	return 0x8220FC84;
} // Block from 8220FC68h-8220FC84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC84);
		  /* 8220FC84h */ case    0:  		/* li R10, 21 */
		/* 8220FC84h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x15);
		/* 8220FC84h case    0:*/		return 0x8220FC88;
		  /* 8220FC88h */ case    1:  		/* b -60 */
		/* 8220FC88h case    1:*/		return 0x8220FC4C;
		/* 8220FC88h case    1:*/		return 0x8220FC8C;
	}
	return 0x8220FC8C;
} // Block from 8220FC84h-8220FC8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FC8C);
		  /* 8220FC8Ch */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FC8Ch case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FC8Ch case    0:*/		return 0x8220FC90;
		  /* 8220FC90h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FC90h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FC90h case    1:*/		return 0x8220FC94;
		  /* 8220FC94h */ case    2:  		/* bc 12, CR6_LT, 60 */
		/* 8220FC94h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FCD0;  }
		/* 8220FC94h case    2:*/		return 0x8220FC98;
		  /* 8220FC98h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8220FC98h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FCC8;  }
		/* 8220FC98h case    3:*/		return 0x8220FC9C;
		  /* 8220FC9Ch */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FC9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FC9Ch case    4:*/		return 0x8220FCA0;
		  /* 8220FCA0h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8220FCA0h case    5:*/		if ( regs.CR[6].lt ) { return 0x8220FCC0;  }
		/* 8220FCA0h case    5:*/		return 0x8220FCA4;
		  /* 8220FCA4h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8220FCA4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8220FCB0;  }
		/* 8220FCA4h case    6:*/		return 0x8220FCA8;
		  /* 8220FCA8h */ case    7:  		/* li R7, 1678 */
		/* 8220FCA8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x68E);
		/* 8220FCA8h case    7:*/		return 0x8220FCAC;
		  /* 8220FCACh */ case    8:  		/* b 384 */
		/* 8220FCACh case    8:*/		return 0x8220FE2C;
		/* 8220FCACh case    8:*/		return 0x8220FCB0;
	}
	return 0x8220FCB0;
} // Block from 8220FC8Ch-8220FCB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220FCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FCB0);
		  /* 8220FCB0h */ case    0:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FCB0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FCB0h case    0:*/		return 0x8220FCB4;
		  /* 8220FCB4h */ case    1:  		/* li R11, 5 */
		/* 8220FCB4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8220FCB4h case    1:*/		return 0x8220FCB8;
		  /* 8220FCB8h */ case    2:  		/* rlwimi R9, R11, 3, 24, 28 */
		/* 8220FCB8h case    2:*/		cpu::op::rlwimi<0,3,24,28>(regs,&regs.R9,regs.R11);
		/* 8220FCB8h case    2:*/		return 0x8220FCBC;
		  /* 8220FCBCh */ case    3:  		/* b -72 */
		/* 8220FCBCh case    3:*/		return 0x8220FC74;
		/* 8220FCBCh case    3:*/		return 0x8220FCC0;
	}
	return 0x8220FCC0;
} // Block from 8220FCB0h-8220FCC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FCC0);
		  /* 8220FCC0h */ case    0:  		/* li R10, 3 */
		/* 8220FCC0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8220FCC0h case    0:*/		return 0x8220FCC4;
		  /* 8220FCC4h */ case    1:  		/* b -104 */
		/* 8220FCC4h case    1:*/		return 0x8220FC5C;
		/* 8220FCC4h case    1:*/		return 0x8220FCC8;
	}
	return 0x8220FCC8;
} // Block from 8220FCC0h-8220FCC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FCC8);
		  /* 8220FCC8h */ case    0:  		/* li R10, 1 */
		/* 8220FCC8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8220FCC8h case    0:*/		return 0x8220FCCC;
		  /* 8220FCCCh */ case    1:  		/* b 408 */
		/* 8220FCCCh case    1:*/		return 0x8220FE64;
		/* 8220FCCCh case    1:*/		return 0x8220FCD0;
	}
	return 0x8220FCD0;
} // Block from 8220FCC8h-8220FCD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FCD0h
// Function '?AddExportInfo@XGRAPHICS@@YAIPAU_XLT_CONTEXT@1@PAU_XLT_EXPORT_CACHE@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FCD0);
		  /* 8220FCD0h */ case    0:  		/* li R10, 7 */
		/* 8220FCD0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 8220FCD0h case    0:*/		return 0x8220FCD4;
		  /* 8220FCD4h */ case    1:  		/* b -136 */
		/* 8220FCD4h case    1:*/		return 0x8220FC4C;
		/* 8220FCD4h case    1:*/		return 0x8220FCD8;
	}
	return 0x8220FCD8;
} // Block from 8220FCD0h-8220FCD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FCD8);
		  /* 8220FCD8h */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FCD8h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FCD8h case    0:*/		return 0x8220FCDC;
		  /* 8220FCDCh */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FCDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FCDCh case    1:*/		return 0x8220FCE0;
		  /* 8220FCE0h */ case    2:  		/* bc 12, CR6_LT, 100 */
		/* 8220FCE0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FD44;  }
		/* 8220FCE0h case    2:*/		return 0x8220FCE4;
		  /* 8220FCE4h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 8220FCE4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FD3C;  }
		/* 8220FCE4h case    3:*/		return 0x8220FCE8;
		  /* 8220FCE8h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FCE8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FCE8h case    4:*/		return 0x8220FCEC;
		  /* 8220FCECh */ case    5:  		/* bc 12, CR6_LT, 72 */
		/* 8220FCECh case    5:*/		if ( regs.CR[6].lt ) { return 0x8220FD34;  }
		/* 8220FCECh case    5:*/		return 0x8220FCF0;
		  /* 8220FCF0h */ case    6:  		/* lis R11, -32252 */
		/* 8220FCF0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220FCF0h case    6:*/		return 0x8220FCF4;
		  /* 8220FCF4h */ case    7:  		/* lis R10, -32252 */
		/* 8220FCF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220FCF4h case    7:*/		return 0x8220FCF8;
		  /* 8220FCF8h */ case    8:  		/* lis R9, -32253 */
		/* 8220FCF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220FCF8h case    8:*/		return 0x8220FCFC;
		  /* 8220FCFCh */ case    9:  		/* addi R6, R11, -7312 */
		/* 8220FCFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220FCFCh case    9:*/		return 0x8220FD00;
		  /* 8220FD00h */ case   10:  		/* addi R5, R10, -25364 */
		/* 8220FD00h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 8220FD00h case   10:*/		return 0x8220FD04;
		  /* 8220FD04h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220FD04h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220FD04h case   11:*/		return 0x8220FD08;
		  /* 8220FD08h */ case   12:  		/* li R7, 1650 */
		/* 8220FD08h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x672);
		/* 8220FD08h case   12:*/		return 0x8220FD0C;
		  /* 8220FD0Ch */ case   13:  		/* li R3, 0 */
		/* 8220FD0Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FD0Ch case   13:*/		return 0x8220FD10;
		  /* 8220FD10h */ case   14:  		/* bl -753928 */
		/* 8220FD10h case   14:*/		regs.LR = 0x8220FD14; return 0x82157C08;
		/* 8220FD10h case   14:*/		return 0x8220FD14;
		  /* 8220FD14h */ case   15:  		/* lwz R8, <#[R31]> */
		/* 8220FD14h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FD14h case   15:*/		return 0x8220FD18;
		  /* 8220FD18h */ case   16:  		/* li R10, 21 */
		/* 8220FD18h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x15);
		/* 8220FD18h case   16:*/		return 0x8220FD1C;
		  /* 8220FD1Ch */ case   17:  		/* rlwimi R8, R10, 0, 26, 31 */
		/* 8220FD1Ch case   17:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R8,regs.R10);
		/* 8220FD1Ch case   17:*/		return 0x8220FD20;
		  /* 8220FD20h */ case   18:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FD20h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FD20h case   18:*/		return 0x8220FD24;
		  /* 8220FD24h */ case   19:  		/* li R11, 1 */
		/* 8220FD24h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8220FD24h case   19:*/		return 0x8220FD28;
		  /* 8220FD28h */ case   20:  		/* stw R8, <#[R31]> */
		/* 8220FD28h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FD28h case   20:*/		return 0x8220FD2C;
		  /* 8220FD2Ch */ case   21:  		/* rlwimi R9, R11, 4, 24, 28 */
		/* 8220FD2Ch case   21:*/		cpu::op::rlwimi<0,4,24,28>(regs,&regs.R9,regs.R11);
		/* 8220FD2Ch case   21:*/		return 0x8220FD30;
		  /* 8220FD30h */ case   22:  		/* b 332 */
		/* 8220FD30h case   22:*/		return 0x8220FE7C;
		/* 8220FD30h case   22:*/		return 0x8220FD34;
	}
	return 0x8220FD34;
} // Block from 8220FCD8h-8220FD34h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD34);
		  /* 8220FD34h */ case    0:  		/* li R8, 11 */
		/* 8220FD34h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0xB);
		/* 8220FD34h case    0:*/		return 0x8220FD38;
		  /* 8220FD38h */ case    1:  		/* b -324 */
		/* 8220FD38h case    1:*/		return 0x8220FBF4;
		/* 8220FD38h case    1:*/		return 0x8220FD3C;
	}
	return 0x8220FD3C;
} // Block from 8220FD34h-8220FD3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD3C);
		  /* 8220FD3Ch */ case    0:  		/* li R8, 21 */
		/* 8220FD3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x15);
		/* 8220FD3Ch case    0:*/		return 0x8220FD40;
		  /* 8220FD40h */ case    1:  		/* b -352 */
		/* 8220FD40h case    1:*/		return 0x8220FBE0;
		/* 8220FD40h case    1:*/		return 0x8220FD44;
	}
	return 0x8220FD44;
} // Block from 8220FD3Ch-8220FD44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD44);
		  /* 8220FD44h */ case    0:  		/* li R8, 5 */
		/* 8220FD44h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x5);
		/* 8220FD44h case    0:*/		return 0x8220FD48;
		  /* 8220FD48h */ case    1:  		/* b -304 */
		/* 8220FD48h case    1:*/		return 0x8220FC18;
		/* 8220FD48h case    1:*/		return 0x8220FD4C;
	}
	return 0x8220FD4C;
} // Block from 8220FD44h-8220FD4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD4C);
		  /* 8220FD4Ch */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FD4Ch case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FD4Ch case    0:*/		return 0x8220FD50;
		  /* 8220FD50h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FD50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FD50h case    1:*/		return 0x8220FD54;
		  /* 8220FD54h */ case    2:  		/* bc 12, CR6_LT, 84 */
		/* 8220FD54h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FDA8;  }
		/* 8220FD54h case    2:*/		return 0x8220FD58;
		  /* 8220FD58h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 8220FD58h case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FDA0;  }
		/* 8220FD58h case    3:*/		return 0x8220FD5C;
		  /* 8220FD5Ch */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FD5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FD5Ch case    4:*/		return 0x8220FD60;
		  /* 8220FD60h */ case    5:  		/* bc 12, CR6_LT, 56 */
		/* 8220FD60h case    5:*/		if ( regs.CR[6].lt ) { return 0x8220FD98;  }
		/* 8220FD60h case    5:*/		return 0x8220FD64;
		  /* 8220FD64h */ case    6:  		/* lis R11, -32252 */
		/* 8220FD64h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220FD64h case    6:*/		return 0x8220FD68;
		  /* 8220FD68h */ case    7:  		/* lis R10, -32252 */
		/* 8220FD68h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220FD68h case    7:*/		return 0x8220FD6C;
		  /* 8220FD6Ch */ case    8:  		/* lis R9, -32253 */
		/* 8220FD6Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220FD6Ch case    8:*/		return 0x8220FD70;
		  /* 8220FD70h */ case    9:  		/* addi R6, R11, -7312 */
		/* 8220FD70h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220FD70h case    9:*/		return 0x8220FD74;
		  /* 8220FD74h */ case   10:  		/* addi R5, R10, -25364 */
		/* 8220FD74h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 8220FD74h case   10:*/		return 0x8220FD78;
		  /* 8220FD78h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8220FD78h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220FD78h case   11:*/		return 0x8220FD7C;
		  /* 8220FD7Ch */ case   12:  		/* li R7, 1627 */
		/* 8220FD7Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x65B);
		/* 8220FD7Ch case   12:*/		return 0x8220FD80;
	}
	return 0x8220FD80;
} // Block from 8220FD4Ch-8220FD80h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD80h
// Function '?AddExecInfo@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PAU_XLT_EXEC_INFO@1@IIPAT_XLT_EXEC_INFO_DATA@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD80);
		  /* 8220FD80h */ case    0:  		/* li R3, 0 */
		/* 8220FD80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FD80h case    0:*/		return 0x8220FD84;
		  /* 8220FD84h */ case    1:  		/* bl -754044 */
		/* 8220FD84h case    1:*/		regs.LR = 0x8220FD88; return 0x82157C08;
		/* 8220FD84h case    1:*/		return 0x8220FD88;
		  /* 8220FD88h */ case    2:  		/* lwz R8, <#[R31]> */
		/* 8220FD88h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FD88h case    2:*/		return 0x8220FD8C;
		  /* 8220FD8Ch */ case    3:  		/* li R10, 9 */
		/* 8220FD8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 8220FD8Ch case    3:*/		return 0x8220FD90;
		  /* 8220FD90h */ case    4:  		/* rlwimi R8, R10, 1, 26, 31 */
		/* 8220FD90h case    4:*/		cpu::op::rlwimi<0,1,26,31>(regs,&regs.R8,regs.R10);
		/* 8220FD90h case    4:*/		return 0x8220FD94;
		  /* 8220FD94h */ case    5:  		/* b -116 */
		/* 8220FD94h case    5:*/		return 0x8220FD20;
		/* 8220FD94h case    5:*/		return 0x8220FD98;
	}
	return 0x8220FD98;
} // Block from 8220FD80h-8220FD98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220FD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FD98);
		  /* 8220FD98h */ case    0:  		/* li R8, 19 */
		/* 8220FD98h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x13);
		/* 8220FD98h case    0:*/		return 0x8220FD9C;
		  /* 8220FD9Ch */ case    1:  		/* b -444 */
		/* 8220FD9Ch case    1:*/		return 0x8220FBE0;
		/* 8220FD9Ch case    1:*/		return 0x8220FDA0;
	}
	return 0x8220FDA0;
} // Block from 8220FD98h-8220FDA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FDA0);
		  /* 8220FDA0h */ case    0:  		/* li R8, 9 */
		/* 8220FDA0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x9);
		/* 8220FDA0h case    0:*/		return 0x8220FDA4;
		  /* 8220FDA4h */ case    1:  		/* b -432 */
		/* 8220FDA4h case    1:*/		return 0x8220FBF4;
		/* 8220FDA4h case    1:*/		return 0x8220FDA8;
	}
	return 0x8220FDA8;
} // Block from 8220FDA0h-8220FDA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FDA8);
		  /* 8220FDA8h */ case    0:  		/* li R8, 17 */
		/* 8220FDA8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 8220FDA8h case    0:*/		return 0x8220FDAC;
		  /* 8220FDACh */ case    1:  		/* b -460 */
		/* 8220FDACh case    1:*/		return 0x8220FBE0;
		/* 8220FDACh case    1:*/		return 0x8220FDB0;
	}
	return 0x8220FDB0;
} // Block from 8220FDA8h-8220FDB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FDB0);
		  /* 8220FDB0h */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FDB0h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FDB0h case    0:*/		return 0x8220FDB4;
		  /* 8220FDB4h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8220FDB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FDB4h case    1:*/		return 0x8220FDB8;
		  /* 8220FDB8h */ case    2:  		/* bc 12, CR6_LT, 68 */
		/* 8220FDB8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8220FDFC;  }
		/* 8220FDB8h case    2:*/		return 0x8220FDBC;
		  /* 8220FDBCh */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 8220FDBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FDF4;  }
		/* 8220FDBCh case    3:*/		return 0x8220FDC0;
		  /* 8220FDC0h */ case    4:  		/* lis R11, -32252 */
		/* 8220FDC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220FDC0h case    4:*/		return 0x8220FDC4;
		  /* 8220FDC4h */ case    5:  		/* lis R10, -32252 */
		/* 8220FDC4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220FDC4h case    5:*/		return 0x8220FDC8;
		  /* 8220FDC8h */ case    6:  		/* lis R9, -32253 */
		/* 8220FDC8h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220FDC8h case    6:*/		return 0x8220FDCC;
		  /* 8220FDCCh */ case    7:  		/* addi R6, R11, -7312 */
		/* 8220FDCCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220FDCCh case    7:*/		return 0x8220FDD0;
		  /* 8220FDD0h */ case    8:  		/* addi R5, R10, -25364 */
		/* 8220FDD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 8220FDD0h case    8:*/		return 0x8220FDD4;
		  /* 8220FDD4h */ case    9:  		/* addi R4, R9, 27460 */
		/* 8220FDD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220FDD4h case    9:*/		return 0x8220FDD8;
		  /* 8220FDD8h */ case   10:  		/* li R7, 1716 */
		/* 8220FDD8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x6B4);
		/* 8220FDD8h case   10:*/		return 0x8220FDDC;
		  /* 8220FDDCh */ case   11:  		/* li R3, 0 */
		/* 8220FDDCh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FDDCh case   11:*/		return 0x8220FDE0;
		  /* 8220FDE0h */ case   12:  		/* bl -754136 */
		/* 8220FDE0h case   12:*/		regs.LR = 0x8220FDE4; return 0x82157C08;
		/* 8220FDE0h case   12:*/		return 0x8220FDE4;
		  /* 8220FDE4h */ case   13:  		/* lwz R8, <#[R31]> */
		/* 8220FDE4h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FDE4h case   13:*/		return 0x8220FDE8;
		  /* 8220FDE8h */ case   14:  		/* li R10, 3 */
		/* 8220FDE8h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8220FDE8h case   14:*/		return 0x8220FDEC;
		  /* 8220FDECh */ case   15:  		/* rlwimi R8, R10, 3, 26, 31 */
		/* 8220FDECh case   15:*/		cpu::op::rlwimi<0,3,26,31>(regs,&regs.R8,regs.R10);
		/* 8220FDECh case   15:*/		return 0x8220FDF0;
		  /* 8220FDF0h */ case   16:  		/* b -208 */
		/* 8220FDF0h case   16:*/		return 0x8220FD20;
		/* 8220FDF0h case   16:*/		return 0x8220FDF4;
	}
	return 0x8220FDF4;
} // Block from 8220FDB0h-8220FDF4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8220FDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FDF4);
		  /* 8220FDF4h */ case    0:  		/* li R8, 23 */
		/* 8220FDF4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x17);
		/* 8220FDF4h case    0:*/		return 0x8220FDF8;
		  /* 8220FDF8h */ case    1:  		/* b -536 */
		/* 8220FDF8h case    1:*/		return 0x8220FBE0;
		/* 8220FDF8h case    1:*/		return 0x8220FDFC;
	}
	return 0x8220FDFC;
} // Block from 8220FDF4h-8220FDFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FDFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FDFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FDFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FDFC);
		  /* 8220FDFCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220FDFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FDFCh case    0:*/		return 0x8220FE00;
		  /* 8220FE00h */ case    1:  		/* li R8, 3 */
		/* 8220FE00h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8220FE00h case    1:*/		return 0x8220FE04;
		  /* 8220FE04h */ case    2:  		/* rlwimi R11, R8, 3, 26, 31 */
		/* 8220FE04h case    2:*/		cpu::op::rlwimi<0,3,26,31>(regs,&regs.R11,regs.R8);
		/* 8220FE04h case    2:*/		return 0x8220FE08;
		  /* 8220FE08h */ case    3:  		/* b -524 */
		/* 8220FE08h case    3:*/		return 0x8220FBFC;
		/* 8220FE08h case    3:*/		return 0x8220FE0C;
	}
	return 0x8220FE0C;
} // Block from 8220FDFCh-8220FE0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE0C);
		  /* 8220FE0Ch */ case    0:  		/* rlwinm R11, R5, 0, 29, 31 */
		/* 8220FE0Ch case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R5);
		/* 8220FE0Ch case    0:*/		return 0x8220FE10;
	}
	return 0x8220FE10;
} // Block from 8220FE0Ch-8220FE10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE10h
// Function '?InsertVFetch@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@IIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE10);
		  /* 8220FE10h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 8220FE10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8220FE10h case    0:*/		return 0x8220FE14;
		  /* 8220FE14h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 8220FE14h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220FE60;  }
		/* 8220FE14h case    1:*/		return 0x8220FE18;
		  /* 8220FE18h */ case    2:  		/* cmplwi CR6, R11, 2 */
		/* 8220FE18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8220FE18h case    2:*/		return 0x8220FE1C;
		  /* 8220FE1Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8220FE1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8220FE58;  }
		/* 8220FE1Ch case    3:*/		return 0x8220FE20;
		  /* 8220FE20h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8220FE20h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8220FE20h case    4:*/		return 0x8220FE24;
		  /* 8220FE24h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 8220FE24h case    5:*/		if ( regs.CR[6].eq ) { return 0x8220FE50;  }
		/* 8220FE24h case    5:*/		return 0x8220FE28;
		  /* 8220FE28h */ case    6:  		/* li R7, 1699 */
		/* 8220FE28h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6A3);
		/* 8220FE28h case    6:*/		return 0x8220FE2C;
	}
	return 0x8220FE2C;
} // Block from 8220FE10h-8220FE2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE2C);
		  /* 8220FE2Ch */ case    0:  		/* lis R9, -32253 */
		/* 8220FE2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220FE2Ch case    0:*/		return 0x8220FE30;
		  /* 8220FE30h */ case    1:  		/* lis R10, -32252 */
		/* 8220FE30h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8220FE30h case    1:*/		return 0x8220FE34;
		  /* 8220FE34h */ case    2:  		/* lis R11, -32252 */
		/* 8220FE34h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8220FE34h case    2:*/		return 0x8220FE38;
		  /* 8220FE38h */ case    3:  		/* addi R4, R9, 27460 */
		/* 8220FE38h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8220FE38h case    3:*/		return 0x8220FE3C;
		  /* 8220FE3Ch */ case    4:  		/* addi R5, R10, -25364 */
		/* 8220FE3Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 8220FE3Ch case    4:*/		return 0x8220FE40;
		  /* 8220FE40h */ case    5:  		/* addi R6, R11, -7312 */
		/* 8220FE40h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 8220FE40h case    5:*/		return 0x8220FE44;
		  /* 8220FE44h */ case    6:  		/* li R3, 0 */
		/* 8220FE44h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FE44h case    6:*/		return 0x8220FE48;
		  /* 8220FE48h */ case    7:  		/* bl -754240 */
		/* 8220FE48h case    7:*/		regs.LR = 0x8220FE4C; return 0x82157C08;
		/* 8220FE48h case    7:*/		return 0x8220FE4C;
		  /* 8220FE4Ch */ case    8:  		/* b 52 */
		/* 8220FE4Ch case    8:*/		return 0x8220FE80;
		/* 8220FE4Ch case    8:*/		return 0x8220FE50;
	}
	return 0x8220FE50;
} // Block from 8220FE2Ch-8220FE50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE50);
		  /* 8220FE50h */ case    0:  		/* li R10, 7 */
		/* 8220FE50h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 8220FE50h case    0:*/		return 0x8220FE54;
		  /* 8220FE54h */ case    1:  		/* b -504 */
		/* 8220FE54h case    1:*/		return 0x8220FC5C;
		/* 8220FE54h case    1:*/		return 0x8220FE58;
	}
	return 0x8220FE58;
} // Block from 8220FE50h-8220FE58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE58);
		  /* 8220FE58h */ case    0:  		/* li R10, 13 */
		/* 8220FE58h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xD);
		/* 8220FE58h case    0:*/		return 0x8220FE5C;
		  /* 8220FE5Ch */ case    1:  		/* b -528 */
		/* 8220FE5Ch case    1:*/		return 0x8220FC4C;
		/* 8220FE5Ch case    1:*/		return 0x8220FE60;
	}
	return 0x8220FE60;
} // Block from 8220FE58h-8220FE60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE60);
		  /* 8220FE60h */ case    0:  		/* li R10, 3 */
		/* 8220FE60h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8220FE60h case    0:*/		return 0x8220FE64;
	}
	return 0x8220FE64;
} // Block from 8220FE60h-8220FE64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE64);
		  /* 8220FE64h */ case    0:  		/* lwz R9, <#[R31 + 8]> */
		/* 8220FE64h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FE64h case    0:*/		return 0x8220FE68;
		  /* 8220FE68h */ case    1:  		/* rlwimi R9, R10, 5, 24, 28 */
		/* 8220FE68h case    1:*/		cpu::op::rlwimi<0,5,24,28>(regs,&regs.R9,regs.R10);
		/* 8220FE68h case    1:*/		return 0x8220FE6C;
	}
	return 0x8220FE6C;
} // Block from 8220FE64h-8220FE6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE6C);
		  /* 8220FE6Ch */ case    0:  		/* li R8, 5 */
		/* 8220FE6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x5);
		/* 8220FE6Ch case    0:*/		return 0x8220FE70;
	}
	return 0x8220FE70;
} // Block from 8220FE6Ch-8220FE70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE70);
		  /* 8220FE70h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8220FE70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FE70h case    0:*/		return 0x8220FE74;
		  /* 8220FE74h */ case    1:  		/* rlwimi R11, R8, 0, 26, 31 */
		/* 8220FE74h case    1:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R11,regs.R8);
		/* 8220FE74h case    1:*/		return 0x8220FE78;
	}
	return 0x8220FE78;
} // Block from 8220FE70h-8220FE78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE78);
		  /* 8220FE78h */ case    0:  		/* stw R11, <#[R31]> */
		/* 8220FE78h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FE78h case    0:*/		return 0x8220FE7C;
	}
	return 0x8220FE7C;
} // Block from 8220FE78h-8220FE7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE7C);
		  /* 8220FE7Ch */ case    0:  		/* stw R9, <#[R31 + 8]> */
		/* 8220FE7Ch case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8220FE7Ch case    0:*/		return 0x8220FE80;
	}
	return 0x8220FE80;
} // Block from 8220FE7Ch-8220FE80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE80);
		  /* 8220FE80h */ case    0:  		/* addi R1, R1, 96 */
		/* 8220FE80h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8220FE80h case    0:*/		return 0x8220FE84;
		  /* 8220FE84h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8220FE84h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8220FE84h case    1:*/		return 0x8220FE88;
		  /* 8220FE88h */ case    2:  		/* mtspr LR, R12 */
		/* 8220FE88h case    2:*/		regs.LR = regs.R12;
		/* 8220FE88h case    2:*/		return 0x8220FE8C;
		  /* 8220FE8Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8220FE8Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8220FE8Ch case    3:*/		return 0x8220FE90;
		  /* 8220FE90h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8220FE90h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8220FE90h case    4:*/		return 0x8220FE94;
	}
	return 0x8220FE94;
} // Block from 8220FE80h-8220FE94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE94);
		  /* 8220FE94h */ case    0:  		/* nop */
		/* 8220FE94h case    0:*/		cpu::op::nop();
		/* 8220FE94h case    0:*/		return 0x8220FE98;
	}
	return 0x8220FE98;
} // Block from 8220FE94h-8220FE98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FE98);
		  /* 8220FE98h */ case    0:  		/* mfspr R12, LR */
		/* 8220FE98h case    0:*/		regs.R12 = regs.LR;
		/* 8220FE98h case    0:*/		return 0x8220FE9C;
		  /* 8220FE9Ch */ case    1:  		/* bl -1567836 */
		/* 8220FE9Ch case    1:*/		regs.LR = 0x8220FEA0; return 0x82091240;
		/* 8220FE9Ch case    1:*/		return 0x8220FEA0;
		  /* 8220FEA0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8220FEA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8220FEA0h case    2:*/		return 0x8220FEA4;
		  /* 8220FEA4h */ case    3:  		/* mr R23, R6 */
		/* 8220FEA4h case    3:*/		regs.R23 = regs.R6;
		/* 8220FEA4h case    3:*/		return 0x8220FEA8;
		  /* 8220FEA8h */ case    4:  		/* lwz R6, <#[R4]> */
		/* 8220FEA8h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000000) );
		/* 8220FEA8h case    4:*/		return 0x8220FEAC;
		  /* 8220FEACh */ case    5:  		/* lwz R11, <#[R3 + 28]> */
		/* 8220FEACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8220FEACh case    5:*/		return 0x8220FEB0;
		  /* 8220FEB0h */ case    6:  		/* mr R24, R7 */
		/* 8220FEB0h case    6:*/		regs.R24 = regs.R7;
		/* 8220FEB0h case    6:*/		return 0x8220FEB4;
		  /* 8220FEB4h */ case    7:  		/* mr R22, R8 */
		/* 8220FEB4h case    7:*/		regs.R22 = regs.R8;
		/* 8220FEB4h case    7:*/		return 0x8220FEB8;
		  /* 8220FEB8h */ case    8:  		/* rlwinm R10, R6, 16, 26, 31 */
		/* 8220FEB8h case    8:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R10,regs.R6);
		/* 8220FEB8h case    8:*/		return 0x8220FEBC;
		  /* 8220FEBCh */ case    9:  		/* lis R9, -32253 */
		/* 8220FEBCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8220FEBCh case    9:*/		return 0x8220FEC0;
		  /* 8220FEC0h */ case   10:  		/* lis R8, -32252 */
		/* 8220FEC0h case   10:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8220FEC0h case   10:*/		return 0x8220FEC4;
		  /* 8220FEC4h */ case   11:  		/* lis R7, -32252 */
		/* 8220FEC4h case   11:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8220FEC4h case   11:*/		return 0x8220FEC8;
		  /* 8220FEC8h */ case   12:  		/* lwz R31, <#[R11 + 10816]> */
		/* 8220FEC8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00002A40) );
		/* 8220FEC8h case   12:*/		return 0x8220FECC;
		  /* 8220FECCh */ case   13:  		/* mr R30, R3 */
		/* 8220FECCh case   13:*/		regs.R30 = regs.R3;
		/* 8220FECCh case   13:*/		return 0x8220FED0;
		  /* 8220FED0h */ case   14:  		/* mr R25, R4 */
		/* 8220FED0h case   14:*/		regs.R25 = regs.R4;
		/* 8220FED0h case   14:*/		return 0x8220FED4;
		  /* 8220FED4h */ case   15:  		/* mr R26, R5 */
		/* 8220FED4h case   15:*/		regs.R26 = regs.R5;
		/* 8220FED4h case   15:*/		return 0x8220FED8;
		  /* 8220FED8h */ case   16:  		/* rlwinm R6, R6, 0, 16, 31 */
		/* 8220FED8h case   16:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R6,regs.R6);
		/* 8220FED8h case   16:*/		return 0x8220FEDC;
		  /* 8220FEDCh */ case   17:  		/* cmplwi CR6, R10, 25 */
		/* 8220FEDCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000019);
		/* 8220FEDCh case   17:*/		return 0x8220FEE0;
		  /* 8220FEE0h */ case   18:  		/* addi R28, R9, 27460 */
		/* 8220FEE0h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x6B44);
		/* 8220FEE0h case   18:*/		return 0x8220FEE4;
		  /* 8220FEE4h */ case   19:  		/* addi R29, R8, -25364 */
		/* 8220FEE4h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0xFFFF9CEC);
		/* 8220FEE4h case   19:*/		return 0x8220FEE8;
		  /* 8220FEE8h */ case   20:  		/* addi R27, R7, -7312 */
		/* 8220FEE8h case   20:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R7,0xFFFFE370);
		/* 8220FEE8h case   20:*/		return 0x8220FEEC;
		  /* 8220FEECh */ case   21:  		/* bc 4, CR6_LT, 56 */
		/* 8220FEECh case   21:*/		if ( !regs.CR[6].lt ) { return 0x8220FF24;  }
		/* 8220FEECh case   21:*/		return 0x8220FEF0;
		  /* 8220FEF0h */ case   22:  		/* rlwinm R10, R10, 6, 0, 25 */
		/* 8220FEF0h case   22:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R10,regs.R10);
		/* 8220FEF0h case   22:*/		return 0x8220FEF4;
		  /* 8220FEF4h */ case   23:  		/* lwz R9, <#[R31]> */
		/* 8220FEF4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FEF4h case   23:*/		return 0x8220FEF8;
		  /* 8220FEF8h */ case   24:  		/* add R10, R10, R6 */
		/* 8220FEF8h case   24:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 8220FEF8h case   24:*/		return 0x8220FEFC;
		  /* 8220FEFCh */ case   25:  		/* addi R10, R10, 4200 */
		/* 8220FEFCh case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1068);
		/* 8220FEFCh case   25:*/		return 0x8220FF00;
		  /* 8220FF00h */ case   26:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8220FF00h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8220FF00h case   26:*/		return 0x8220FF04;
		  /* 8220FF04h */ case   27:  		/* lwzx R8, <#[R10 + R11]> */
		/* 8220FF04h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220FF04h case   27:*/		return 0x8220FF08;
		  /* 8220FF08h */ case   28:  		/* rlwimi R9, R8, 26, 0, 5 */
		/* 8220FF08h case   28:*/		cpu::op::rlwimi<0,26,0,5>(regs,&regs.R9,regs.R8);
		/* 8220FF08h case   28:*/		return 0x8220FF0C;
		  /* 8220FF0Ch */ case   29:  		/* stw R9, <#[R31]> */
		/* 8220FF0Ch case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FF0Ch case   29:*/		return 0x8220FF10;
		  /* 8220FF10h */ case   30:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8220FF10h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8220FF10h case   30:*/		return 0x8220FF14;
		  /* 8220FF14h */ case   31:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8220FF14h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8220FF14h case   31:*/		return 0x8220FF18;
		  /* 8220FF18h */ case   32:  		/* rlwimi R10, R11, 18, 8, 13 */
		/* 8220FF18h case   32:*/		cpu::op::rlwimi<0,18,8,13>(regs,&regs.R10,regs.R11);
		/* 8220FF18h case   32:*/		return 0x8220FF1C;
		  /* 8220FF1Ch */ case   33:  		/* stw R10, <#[R31]> */
		/* 8220FF1Ch case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FF1Ch case   33:*/		return 0x8220FF20;
		  /* 8220FF20h */ case   34:  		/* b 88 */
		/* 8220FF20h case   34:*/		return 0x8220FF78;
		/* 8220FF20h case   34:*/		return 0x8220FF24;
	}
	return 0x8220FF24;
} // Block from 8220FE98h-8220FF24h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8220FF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FF24);
		  /* 8220FF24h */ case    0:  		/* cmplwi CR6, R10, 26 */
		/* 8220FF24h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001A);
		/* 8220FF24h case    0:*/		return 0x8220FF28;
		  /* 8220FF28h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8220FF28h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220FF40;  }
		/* 8220FF28h case    1:*/		return 0x8220FF2C;
		  /* 8220FF2Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8220FF2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FF2Ch case    2:*/		return 0x8220FF30;
		  /* 8220FF30h */ case    3:  		/* li R10, 257 */
		/* 8220FF30h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x101);
		/* 8220FF30h case    3:*/		return 0x8220FF34;
		  /* 8220FF34h */ case    4:  		/* rlwimi R11, R10, 23, 0, 5 */
		/* 8220FF34h case    4:*/		cpu::op::rlwimi<0,23,0,5>(regs,&regs.R11,regs.R10);
		/* 8220FF34h case    4:*/		return 0x8220FF38;
		  /* 8220FF38h */ case    5:  		/* rlwimi R11, R10, 23, 8, 13 */
		/* 8220FF38h case    5:*/		cpu::op::rlwimi<0,23,8,13>(regs,&regs.R11,regs.R10);
		/* 8220FF38h case    5:*/		return 0x8220FF3C;
		  /* 8220FF3Ch */ case    6:  		/* b 28 */
		/* 8220FF3Ch case    6:*/		return 0x8220FF58;
		/* 8220FF3Ch case    6:*/		return 0x8220FF40;
	}
	return 0x8220FF40;
} // Block from 8220FF24h-8220FF40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8220FF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FF40);
		  /* 8220FF40h */ case    0:  		/* cmplwi CR6, R10, 27 */
		/* 8220FF40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001B);
		/* 8220FF40h case    0:*/		return 0x8220FF44;
		  /* 8220FF44h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8220FF44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8220FF60;  }
		/* 8220FF44h case    1:*/		return 0x8220FF48;
		  /* 8220FF48h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8220FF48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FF48h case    2:*/		return 0x8220FF4C;
		  /* 8220FF4Ch */ case    3:  		/* li R10, 8481 */
		/* 8220FF4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x2121);
		/* 8220FF4Ch case    3:*/		return 0x8220FF50;
		  /* 8220FF50h */ case    4:  		/* rlwimi R11, R10, 18, 0, 5 */
		/* 8220FF50h case    4:*/		cpu::op::rlwimi<0,18,0,5>(regs,&regs.R11,regs.R10);
		/* 8220FF50h case    4:*/		return 0x8220FF54;
		  /* 8220FF54h */ case    5:  		/* rlwimi R11, R10, 18, 8, 13 */
		/* 8220FF54h case    5:*/		cpu::op::rlwimi<0,18,8,13>(regs,&regs.R11,regs.R10);
		/* 8220FF54h case    5:*/		return 0x8220FF58;
	}
	return 0x8220FF58;
} // Block from 8220FF40h-8220FF58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220FF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FF58);
		  /* 8220FF58h */ case    0:  		/* stw R11, <#[R31]> */
		/* 8220FF58h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FF58h case    0:*/		return 0x8220FF5C;
		  /* 8220FF5Ch */ case    1:  		/* b 28 */
		/* 8220FF5Ch case    1:*/		return 0x8220FF78;
		/* 8220FF5Ch case    1:*/		return 0x8220FF60;
	}
	return 0x8220FF60;
} // Block from 8220FF58h-8220FF60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8220FF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FF60);
		  /* 8220FF60h */ case    0:  		/* mr R6, R27 */
		/* 8220FF60h case    0:*/		regs.R6 = regs.R27;
		/* 8220FF60h case    0:*/		return 0x8220FF64;
		  /* 8220FF64h */ case    1:  		/* mr R5, R29 */
		/* 8220FF64h case    1:*/		regs.R5 = regs.R29;
		/* 8220FF64h case    1:*/		return 0x8220FF68;
		  /* 8220FF68h */ case    2:  		/* mr R4, R28 */
		/* 8220FF68h case    2:*/		regs.R4 = regs.R28;
		/* 8220FF68h case    2:*/		return 0x8220FF6C;
		  /* 8220FF6Ch */ case    3:  		/* li R7, 1865 */
		/* 8220FF6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x749);
		/* 8220FF6Ch case    3:*/		return 0x8220FF70;
		  /* 8220FF70h */ case    4:  		/* li R3, 0 */
		/* 8220FF70h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FF70h case    4:*/		return 0x8220FF74;
		  /* 8220FF74h */ case    5:  		/* bl -754540 */
		/* 8220FF74h case    5:*/		regs.LR = 0x8220FF78; return 0x82157C08;
		/* 8220FF74h case    5:*/		return 0x8220FF78;
	}
	return 0x8220FF78;
} // Block from 8220FF60h-8220FF78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8220FF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FF78);
		  /* 8220FF78h */ case    0:  		/* lhz R11, <#[R25]> */
		/* 8220FF78h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8220FF78h case    0:*/		return 0x8220FF7C;
		  /* 8220FF7Ch */ case    1:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8220FF7Ch case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8220FF7Ch case    1:*/		return 0x8220FF80;
		  /* 8220FF80h */ case    2:  		/* cmplwi CR6, R11, 27 */
		/* 8220FF80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001B);
		/* 8220FF80h case    2:*/		return 0x8220FF84;
		  /* 8220FF84h */ case    3:  		/* bc 12, CR6_GT, 100 */
		/* 8220FF84h case    3:*/		if ( regs.CR[6].gt ) { return 0x8220FFE8;  }
		/* 8220FF84h case    3:*/		return 0x8220FF88;
		  /* 8220FF88h */ case    4:  		/* lis R12, -32252 */
		/* 8220FF88h case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 8220FF88h case    4:*/		return 0x8220FF8C;
		  /* 8220FF8Ch */ case    5:  		/* addi R12, R12, -7048 */
		/* 8220FF8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFE478);
		/* 8220FF8Ch case    5:*/		return 0x8220FF90;
		  /* 8220FF90h */ case    6:  		/* lbzx R0, <#[R12 + R11]> */
		/* 8220FF90h case    6:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 8220FF90h case    6:*/		return 0x8220FF94;
		  /* 8220FF94h */ case    7:  		/* lis R12, -32223 */
		/* 8220FF94h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8221);
		/* 8220FF94h case    7:*/		return 0x8220FF98;
		  /* 8220FF98h */ case    8:  		/* ori R0, R0, 0 */
		/* 8220FF98h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8220FF98h case    8:*/		return 0x8220FF9C;
		  /* 8220FF9Ch */ case    9:  		/* addi R12, R12, -80 */
		/* 8220FF9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFFFB0);
		/* 8220FF9Ch case    9:*/		return 0x8220FFA0;
		  /* 8220FFA0h */ case   10:  		/* ori R0, R0, 0 */
		/* 8220FFA0h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8220FFA0h case   10:*/		return 0x8220FFA4;
		  /* 8220FFA4h */ case   11:  		/* add R12, R12, R0 */
		/* 8220FFA4h case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8220FFA4h case   11:*/		return 0x8220FFA8;
		  /* 8220FFA8h */ case   12:  		/* mtspr CTR, R12 */
		/* 8220FFA8h case   12:*/		regs.CTR = regs.R12;
		/* 8220FFA8h case   12:*/		return 0x8220FFAC;
		  /* 8220FFACh */ case   13:  		/* bcctr 20, CR0_LT */
		/* 8220FFACh case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8220FFACh case   13:*/		return 0x8220FFB0;
		  /* 8220FFB0h */ case   14:  		/* li R4, 1 */
		/* 8220FFB0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8220FFB0h case   14:*/		return 0x8220FFB4;
		  /* 8220FFB4h */ case   15:  		/* mr R3, R30 */
		/* 8220FFB4h case   15:*/		regs.R3 = regs.R30;
		/* 8220FFB4h case   15:*/		return 0x8220FFB8;
		  /* 8220FFB8h */ case   16:  		/* bl -1600 */
		/* 8220FFB8h case   16:*/		regs.LR = 0x8220FFBC; return 0x8220F978;
		/* 8220FFB8h case   16:*/		return 0x8220FFBC;
		  /* 8220FFBCh */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8220FFBCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FFBCh case   17:*/		return 0x8220FFC0;
		  /* 8220FFC0h */ case   18:  		/* oris R11, R11, 1 */
		/* 8220FFC0h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220FFC0h case   18:*/		return 0x8220FFC4;
		  /* 8220FFC4h */ case   19:  		/* stw R11, <#[R31]> */
		/* 8220FFC4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8220FFC4h case   19:*/		return 0x8220FFC8;
		  /* 8220FFC8h */ case   20:  		/* lwz R11, <#[R30 + 1640]> */
		/* 8220FFC8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000668) );
		/* 8220FFC8h case   20:*/		return 0x8220FFCC;
		  /* 8220FFCCh */ case   21:  		/* addi R11, R11, 1 */
		/* 8220FFCCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8220FFCCh case   21:*/		return 0x8220FFD0;
		  /* 8220FFD0h */ case   22:  		/* stw R11, <#[R30 + 1640]> */
		/* 8220FFD0h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000668) );
		/* 8220FFD0h case   22:*/		return 0x8220FFD4;
		  /* 8220FFD4h */ case   23:  		/* b 44 */
		/* 8220FFD4h case   23:*/		return 0x82210000;
		/* 8220FFD4h case   23:*/		return 0x8220FFD8;
		  /* 8220FFD8h */ case   24:  		/* li R4, 2 */
		/* 8220FFD8h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8220FFD8h case   24:*/		return 0x8220FFDC;
		  /* 8220FFDCh */ case   25:  		/* b -40 */
		/* 8220FFDCh case   25:*/		return 0x8220FFB4;
		/* 8220FFDCh case   25:*/		return 0x8220FFE0;
		  /* 8220FFE0h */ case   26:  		/* li R7, 1944 */
		/* 8220FFE0h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x798);
		/* 8220FFE0h case   26:*/		return 0x8220FFE4;
		  /* 8220FFE4h */ case   27:  		/* b 8 */
		/* 8220FFE4h case   27:*/		return 0x8220FFEC;
		/* 8220FFE4h case   27:*/		return 0x8220FFE8;
	}
	return 0x8220FFE8;
} // Block from 8220FF78h-8220FFE8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8220FFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FFE8);
		  /* 8220FFE8h */ case    0:  		/* li R7, 1949 */
		/* 8220FFE8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x79D);
		/* 8220FFE8h case    0:*/		return 0x8220FFEC;
	}
	return 0x8220FFEC;
} // Block from 8220FFE8h-8220FFECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8220FFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220FFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220FFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220FFEC);
		  /* 8220FFECh */ case    0:  		/* mr R6, R27 */
		/* 8220FFECh case    0:*/		regs.R6 = regs.R27;
		/* 8220FFECh case    0:*/		return 0x8220FFF0;
		  /* 8220FFF0h */ case    1:  		/* mr R5, R29 */
		/* 8220FFF0h case    1:*/		regs.R5 = regs.R29;
		/* 8220FFF0h case    1:*/		return 0x8220FFF4;
		  /* 8220FFF4h */ case    2:  		/* mr R4, R28 */
		/* 8220FFF4h case    2:*/		regs.R4 = regs.R28;
		/* 8220FFF4h case    2:*/		return 0x8220FFF8;
		  /* 8220FFF8h */ case    3:  		/* li R3, 0 */
		/* 8220FFF8h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8220FFF8h case    3:*/		return 0x8220FFFC;
		  /* 8220FFFCh */ case    4:  		/* bl -754676 */
		/* 8220FFFCh case    4:*/		regs.LR = 0x82210000; return 0x82157C08;
		/* 8220FFFCh case    4:*/		return 0x82210000;
	}
	return 0x82210000;
} // Block from 8220FFECh-82210000h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82210000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210000);
		  /* 82210000h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82210000h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82210000h case    0:*/		return 0x82210004;
		  /* 82210004h */ case    1:  		/* lis R10, 1 */
		/* 82210004h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82210004h case    1:*/		return 0x82210008;
		  /* 82210008h */ case    2:  		/* rlwinm R9, R11, 0, 15, 15 */
		/* 82210008h case    2:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R9,regs.R11);
		/* 82210008h case    2:*/		return 0x8221000C;
		  /* 8221000Ch */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 8221000Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8221000Ch case    3:*/		return 0x82210010;
		  /* 82210010h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82210010h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221001C;  }
		/* 82210010h case    4:*/		return 0x82210014;
		  /* 82210014h */ case    5:  		/* rlwinm R11, R11, 0, 14, 7 */
		/* 82210014h case    5:*/		cpu::op::rlwinm<0,0,14,7>(regs,&regs.R11,regs.R11);
		/* 82210014h case    5:*/		return 0x82210018;
		  /* 82210018h */ case    6:  		/* stw R11, <#[R31]> */
		/* 82210018h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82210018h case    6:*/		return 0x8221001C;
	}
	return 0x8221001C;
} // Block from 82210000h-8221001Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221001Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221001C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221001C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221001C);
		  /* 8221001Ch */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8221001Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8221001Ch case    0:*/		return 0x82210020;
		  /* 82210020h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82210020h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82210020h case    1:*/		return 0x82210024;
		  /* 82210024h */ case    2:  		/* bc 12, CR0_EQ, 332 */
		/* 82210024h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210170;  }
		/* 82210024h case    2:*/		return 0x82210028;
		  /* 82210028h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 82210028h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82210028h case    3:*/		return 0x8221002C;
		  /* 8221002Ch */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8221002Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221004C;  }
		/* 8221002Ch case    4:*/		return 0x82210030;
		  /* 82210030h */ case    5:  		/* lis R11, -32252 */
		/* 82210030h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210030h case    5:*/		return 0x82210034;
		  /* 82210034h */ case    6:  		/* mr R6, R27 */
		/* 82210034h case    6:*/		regs.R6 = regs.R27;
		/* 82210034h case    6:*/		return 0x82210038;
		  /* 82210038h */ case    7:  		/* addi R5, R11, -6348 */
		/* 82210038h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE734);
		/* 82210038h case    7:*/		return 0x8221003C;
		  /* 8221003Ch */ case    8:  		/* mr R4, R28 */
		/* 8221003Ch case    8:*/		regs.R4 = regs.R28;
		/* 8221003Ch case    8:*/		return 0x82210040;
		  /* 82210040h */ case    9:  		/* li R7, 1965 */
		/* 82210040h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x7AD);
		/* 82210040h case    9:*/		return 0x82210044;
		  /* 82210044h */ case   10:  		/* li R3, 0 */
		/* 82210044h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210044h case   10:*/		return 0x82210048;
		  /* 82210048h */ case   11:  		/* bl -754752 */
		/* 82210048h case   11:*/		regs.LR = 0x8221004C; return 0x82157C08;
		/* 82210048h case   11:*/		return 0x8221004C;
	}
	return 0x8221004C;
} // Block from 8221001Ch-8221004Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221004Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221004C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221004C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221004C);
		  /* 8221004Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8221004Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8221004Ch case    0:*/		return 0x82210050;
		  /* 82210050h */ case    1:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82210050h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82210050h case    1:*/		return 0x82210054;
		  /* 82210054h */ case    2:  		/* cmplwi CR6, R11, 2 */
		/* 82210054h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82210054h case    2:*/		return 0x82210058;
		  /* 82210058h */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 82210058h case    3:*/		if ( regs.CR[6].lt ) { return 0x82210078;  }
		/* 82210058h case    3:*/		return 0x8221005C;
		  /* 8221005Ch */ case    4:  		/* lis R11, -32252 */
		/* 8221005Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221005Ch case    4:*/		return 0x82210060;
		  /* 82210060h */ case    5:  		/* mr R6, R27 */
		/* 82210060h case    5:*/		regs.R6 = regs.R27;
		/* 82210060h case    5:*/		return 0x82210064;
		  /* 82210064h */ case    6:  		/* addi R5, R11, -6396 */
		/* 82210064h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE704);
		/* 82210064h case    6:*/		return 0x82210068;
		  /* 82210068h */ case    7:  		/* mr R4, R28 */
		/* 82210068h case    7:*/		regs.R4 = regs.R28;
		/* 82210068h case    7:*/		return 0x8221006C;
		  /* 8221006Ch */ case    8:  		/* li R7, 1968 */
		/* 8221006Ch case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x7B0);
		/* 8221006Ch case    8:*/		return 0x82210070;
		  /* 82210070h */ case    9:  		/* li R3, 0 */
		/* 82210070h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210070h case    9:*/		return 0x82210074;
		  /* 82210074h */ case   10:  		/* bl -754796 */
		/* 82210074h case   10:*/		regs.LR = 0x82210078; return 0x82157C08;
		/* 82210074h case   10:*/		return 0x82210078;
	}
	return 0x82210078;
} // Block from 8221004Ch-82210078h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82210078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210078);
		  /* 82210078h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 82210078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82210078h case    0:*/		return 0x8221007C;
		  /* 8221007Ch */ case    1:  		/* rlwinm R11, R11, 0, 28, 29 */
		/* 8221007Ch case    1:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R11,regs.R11);
		/* 8221007Ch case    1:*/		return 0x82210080;
		  /* 82210080h */ case    2:  		/* cmplwi CR6, R11, 8 */
		/* 82210080h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 82210080h case    2:*/		return 0x82210084;
		  /* 82210084h */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 82210084h case    3:*/		if ( regs.CR[6].lt ) { return 0x822100A4;  }
		/* 82210084h case    3:*/		return 0x82210088;
		  /* 82210088h */ case    4:  		/* lis R11, -32252 */
		/* 82210088h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210088h case    4:*/		return 0x8221008C;
		  /* 8221008Ch */ case    5:  		/* mr R6, R27 */
		/* 8221008Ch case    5:*/		regs.R6 = regs.R27;
		/* 8221008Ch case    5:*/		return 0x82210090;
		  /* 82210090h */ case    6:  		/* addi R5, R11, -6444 */
		/* 82210090h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE6D4);
		/* 82210090h case    6:*/		return 0x82210094;
		  /* 82210094h */ case    7:  		/* mr R4, R28 */
		/* 82210094h case    7:*/		regs.R4 = regs.R28;
		/* 82210094h case    7:*/		return 0x82210098;
		  /* 82210098h */ case    8:  		/* li R7, 1969 */
		/* 82210098h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x7B1);
		/* 82210098h case    8:*/		return 0x8221009C;
		  /* 8221009Ch */ case    9:  		/* li R3, 0 */
		/* 8221009Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221009Ch case    9:*/		return 0x822100A0;
		  /* 822100A0h */ case   10:  		/* bl -754840 */
		/* 822100A0h case   10:*/		regs.LR = 0x822100A4; return 0x82157C08;
		/* 822100A0h case   10:*/		return 0x822100A4;
	}
	return 0x822100A4;
} // Block from 82210078h-822100A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822100A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822100A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822100A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822100A4);
		  /* 822100A4h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 822100A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822100A4h case    0:*/		return 0x822100A8;
		  /* 822100A8h */ case    1:  		/* rlwinm R11, R11, 0, 26, 27 */
		/* 822100A8h case    1:*/		cpu::op::rlwinm<0,0,26,27>(regs,&regs.R11,regs.R11);
		/* 822100A8h case    1:*/		return 0x822100AC;
		  /* 822100ACh */ case    2:  		/* cmplwi CR6, R11, 32 */
		/* 822100ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 822100ACh case    2:*/		return 0x822100B0;
		  /* 822100B0h */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 822100B0h case    3:*/		if ( regs.CR[6].lt ) { return 0x822100D0;  }
		/* 822100B0h case    3:*/		return 0x822100B4;
		  /* 822100B4h */ case    4:  		/* lis R11, -32252 */
		/* 822100B4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822100B4h case    4:*/		return 0x822100B8;
		  /* 822100B8h */ case    5:  		/* mr R6, R27 */
		/* 822100B8h case    5:*/		regs.R6 = regs.R27;
		/* 822100B8h case    5:*/		return 0x822100BC;
		  /* 822100BCh */ case    6:  		/* addi R5, R11, -6492 */
		/* 822100BCh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE6A4);
		/* 822100BCh case    6:*/		return 0x822100C0;
		  /* 822100C0h */ case    7:  		/* mr R4, R28 */
		/* 822100C0h case    7:*/		regs.R4 = regs.R28;
		/* 822100C0h case    7:*/		return 0x822100C4;
		  /* 822100C4h */ case    8:  		/* li R7, 1970 */
		/* 822100C4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x7B2);
		/* 822100C4h case    8:*/		return 0x822100C8;
		  /* 822100C8h */ case    9:  		/* li R3, 0 */
		/* 822100C8h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822100C8h case    9:*/		return 0x822100CC;
		  /* 822100CCh */ case   10:  		/* bl -754884 */
		/* 822100CCh case   10:*/		regs.LR = 0x822100D0; return 0x82157C08;
		/* 822100CCh case   10:*/		return 0x822100D0;
	}
	return 0x822100D0;
} // Block from 822100A4h-822100D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822100D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822100D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822100D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822100D0);
		  /* 822100D0h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 822100D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822100D0h case    0:*/		return 0x822100D4;
		  /* 822100D4h */ case    1:  		/* rlwinm R11, R11, 0, 24, 25 */
		/* 822100D4h case    1:*/		cpu::op::rlwinm<0,0,24,25>(regs,&regs.R11,regs.R11);
		/* 822100D4h case    1:*/		return 0x822100D8;
		  /* 822100D8h */ case    2:  		/* cmplwi CR6, R11, 128 */
		/* 822100D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 822100D8h case    2:*/		return 0x822100DC;
		  /* 822100DCh */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 822100DCh case    3:*/		if ( regs.CR[6].lt ) { return 0x822100FC;  }
		/* 822100DCh case    3:*/		return 0x822100E0;
		  /* 822100E0h */ case    4:  		/* lis R11, -32252 */
		/* 822100E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822100E0h case    4:*/		return 0x822100E4;
		  /* 822100E4h */ case    5:  		/* mr R6, R27 */
		/* 822100E4h case    5:*/		regs.R6 = regs.R27;
		/* 822100E4h case    5:*/		return 0x822100E8;
		  /* 822100E8h */ case    6:  		/* addi R5, R11, -6540 */
		/* 822100E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE674);
		/* 822100E8h case    6:*/		return 0x822100EC;
		  /* 822100ECh */ case    7:  		/* mr R4, R28 */
		/* 822100ECh case    7:*/		regs.R4 = regs.R28;
		/* 822100ECh case    7:*/		return 0x822100F0;
		  /* 822100F0h */ case    8:  		/* li R7, 1971 */
		/* 822100F0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x7B3);
		/* 822100F0h case    8:*/		return 0x822100F4;
		  /* 822100F4h */ case    9:  		/* li R3, 0 */
		/* 822100F4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822100F4h case    9:*/		return 0x822100F8;
		  /* 822100F8h */ case   10:  		/* bl -754928 */
		/* 822100F8h case   10:*/		regs.LR = 0x822100FC; return 0x82157C08;
		/* 822100F8h case   10:*/		return 0x822100FC;
	}
	return 0x822100FC;
} // Block from 822100D0h-822100FCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822100FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822100FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822100FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822100FC);
		  /* 822100FCh */ case    0:  		/* lwz R11, <#[R26]> */
		/* 822100FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822100FCh case    0:*/		return 0x82210100;
	}
	return 0x82210100;
} // Block from 822100FCh-82210100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210100h
// Function '?InsertTFetch@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PAU_XLT_TEXTURE_INFO@1@IIIIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210100);
		  /* 82210100h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82210100h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82210100h case    0:*/		return 0x82210104;
		  /* 82210104h */ case    1:  		/* mr R10, R11 */
		/* 82210104h case    1:*/		regs.R10 = regs.R11;
		/* 82210104h case    1:*/		return 0x82210108;
		  /* 82210108h */ case    2:  		/* mr R9, R11 */
		/* 82210108h case    2:*/		regs.R9 = regs.R11;
		/* 82210108h case    2:*/		return 0x8221010C;
		  /* 8221010Ch */ case    3:  		/* rlwimi R10, R11, 31, 26, 26 */
		/* 8221010Ch case    3:*/		cpu::op::rlwimi<0,31,26,26>(regs,&regs.R10,regs.R11);
		/* 8221010Ch case    3:*/		return 0x82210110;
		  /* 82210110h */ case    4:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82210110h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82210110h case    4:*/		return 0x82210114;
		  /* 82210114h */ case    5:  		/* rlwimi R9, R10, 31, 27, 28 */
		/* 82210114h case    5:*/		cpu::op::rlwimi<0,31,27,28>(regs,&regs.R9,regs.R10);
		/* 82210114h case    5:*/		return 0x82210118;
		  /* 82210118h */ case    6:  		/* rlwinm R10, R9, 31, 28, 30 */
		/* 82210118h case    6:*/		cpu::op::rlwinm<0,31,28,30>(regs,&regs.R10,regs.R9);
		/* 82210118h case    6:*/		return 0x8221011C;
		  /* 8221011Ch */ case    7:  		/* or R11, R10, R11 */
		/* 8221011Ch case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221011Ch case    7:*/		return 0x82210120;
		  /* 82210120h */ case    8:  		/* lwz R10, <#[R31]> */
		/* 82210120h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82210120h case    8:*/		return 0x82210124;
		  /* 82210124h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 82210124h case    9:*/		if ( regs.CR[6].eq ) { return 0x82210138;  }
		/* 82210124h case    9:*/		return 0x82210128;
		  /* 82210128h */ case   10:  		/* rlwimi R10, R11, 12, 16, 19 */
		/* 82210128h case   10:*/		cpu::op::rlwimi<0,12,16,19>(regs,&regs.R10,regs.R11);
		/* 82210128h case   10:*/		return 0x8221012C;
		  /* 8221012Ch */ case   11:  		/* rlwinm R11, R10, 0, 24, 19 */
		/* 8221012Ch case   11:*/		cpu::op::rlwinm<0,0,24,19>(regs,&regs.R11,regs.R10);
		/* 8221012Ch case   11:*/		return 0x82210130;
		  /* 82210130h */ case   12:  		/* stw R11, <#[R31]> */
		/* 82210130h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82210130h case   12:*/		return 0x82210134;
		  /* 82210134h */ case   13:  		/* b 24 */
		/* 82210134h case   13:*/		return 0x8221014C;
		/* 82210134h case   13:*/		return 0x82210138;
	}
	return 0x82210138;
} // Block from 82210100h-82210138h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82210138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210138);
		  /* 82210138h */ case    0:  		/* rlwinm R10, R10, 0, 20, 15 */
		/* 82210138h case    0:*/		cpu::op::rlwinm<0,0,20,15>(regs,&regs.R10,regs.R10);
		/* 82210138h case    0:*/		return 0x8221013C;
		  /* 8221013Ch */ case    1:  		/* stw R10, <#[R31]> */
		/* 8221013Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221013Ch case    1:*/		return 0x82210140;
		  /* 82210140h */ case    2:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82210140h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82210140h case    2:*/		return 0x82210144;
		  /* 82210144h */ case    3:  		/* rlwimi R10, R11, 8, 20, 23 */
		/* 82210144h case    3:*/		cpu::op::rlwimi<0,8,20,23>(regs,&regs.R10,regs.R11);
		/* 82210144h case    3:*/		return 0x82210148;
		  /* 82210148h */ case    4:  		/* stw R10, <#[R31]> */
		/* 82210148h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82210148h case    4:*/		return 0x8221014C;
	}
	return 0x8221014C;
} // Block from 82210138h-8221014Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221014Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221014C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221014C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221014C);
		  /* 8221014Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 8221014Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8221014Ch case    0:*/		return 0x82210150;
		  /* 82210150h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82210150h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82210150h case    1:*/		return 0x82210154;
		  /* 82210154h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 82210154h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82210154h case    2:*/		return 0x82210158;
		  /* 82210158h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82210158h case    3:*/		if ( regs.CR[6].eq ) { return 0x82210164;  }
		/* 82210158h case    3:*/		return 0x8221015C;
		  /* 8221015Ch */ case    4:  		/* rlwimi R10, R11, 31, 24, 24 */
		/* 8221015Ch case    4:*/		cpu::op::rlwimi<0,31,24,24>(regs,&regs.R10,regs.R11);
		/* 8221015Ch case    4:*/		return 0x82210160;
		  /* 82210160h */ case    5:  		/* b 8 */
		/* 82210160h case    5:*/		return 0x82210168;
		/* 82210160h case    5:*/		return 0x82210164;
	}
	return 0x82210164;
} // Block from 8221014Ch-82210164h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210164);
		  /* 82210164h */ case    0:  		/* rlwimi R10, R11, 30, 25, 25 */
		/* 82210164h case    0:*/		cpu::op::rlwimi<0,30,25,25>(regs,&regs.R10,regs.R11);
		/* 82210164h case    0:*/		return 0x82210168;
	}
	return 0x82210168;
} // Block from 82210164h-82210168h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210168);
		  /* 82210168h */ case    0:  		/* stw R10, <#[R31]> */
		/* 82210168h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82210168h case    0:*/		return 0x8221016C;
		  /* 8221016Ch */ case    1:  		/* b 36 */
		/* 8221016Ch case    1:*/		return 0x82210190;
		/* 8221016Ch case    1:*/		return 0x82210170;
	}
	return 0x82210170;
} // Block from 82210168h-82210170h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82210170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210170);
		  /* 82210170h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82210170h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82210170h case    0:*/		return 0x82210174;
		  /* 82210174h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82210174h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82210174h case    1:*/		return 0x82210178;
		  /* 82210178h */ case    2:  		/* li R10, 15 */
		/* 82210178h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0xF);
		/* 82210178h case    2:*/		return 0x8221017C;
		  /* 8221017Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8221017Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82210188;  }
		/* 8221017Ch case    3:*/		return 0x82210180;
		  /* 82210180h */ case    4:  		/* rlwimi R11, R10, 12, 16, 25 */
		/* 82210180h case    4:*/		cpu::op::rlwimi<0,12,16,25>(regs,&regs.R11,regs.R10);
		/* 82210180h case    4:*/		return 0x82210184;
		  /* 82210184h */ case    5:  		/* b 8 */
		/* 82210184h case    5:*/		return 0x8221018C;
		/* 82210184h case    5:*/		return 0x82210188;
	}
	return 0x82210188;
} // Block from 82210170h-82210188h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210188);
		  /* 82210188h */ case    0:  		/* rlwimi R11, R10, 8, 16, 25 */
		/* 82210188h case    0:*/		cpu::op::rlwimi<0,8,16,25>(regs,&regs.R11,regs.R10);
		/* 82210188h case    0:*/		return 0x8221018C;
	}
	return 0x8221018C;
} // Block from 82210188h-8221018Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221018Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221018C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221018C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221018C);
		  /* 8221018Ch */ case    0:  		/* stw R11, <#[R31]> */
		/* 8221018Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221018Ch case    0:*/		return 0x82210190;
	}
	return 0x82210190;
} // Block from 8221018Ch-82210190h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210190);
		  /* 82210190h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 82210190h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82210190h case    0:*/		return 0x82210194;
		  /* 82210194h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82210194h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82210194h case    1:*/		return 0x82210198;
		  /* 82210198h */ case    2:  		/* bc 12, CR0_EQ, 60 */
		/* 82210198h case    2:*/		if ( regs.CR[0].eq ) { return 0x822101D4;  }
		/* 82210198h case    2:*/		return 0x8221019C;
		  /* 8221019Ch */ case    3:  		/* lhz R11, <#[R23]> */
		/* 8221019Ch case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8221019Ch case    3:*/		return 0x822101A0;
		  /* 822101A0h */ case    4:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 822101A0h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822101A0h case    4:*/		return 0x822101A4;
		  /* 822101A4h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 822101A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822101A4h case    5:*/		return 0x822101A8;
		  /* 822101A8h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 822101A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x822101C8;  }
		/* 822101A8h case    6:*/		return 0x822101AC;
		  /* 822101ACh */ case    7:  		/* lis R11, -32252 */
		/* 822101ACh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822101ACh case    7:*/		return 0x822101B0;
		  /* 822101B0h */ case    8:  		/* mr R6, R27 */
		/* 822101B0h case    8:*/		regs.R6 = regs.R27;
		/* 822101B0h case    8:*/		return 0x822101B4;
		  /* 822101B4h */ case    9:  		/* addi R5, R11, -6584 */
		/* 822101B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE648);
		/* 822101B4h case    9:*/		return 0x822101B8;
		  /* 822101B8h */ case   10:  		/* mr R4, R28 */
		/* 822101B8h case   10:*/		regs.R4 = regs.R28;
		/* 822101B8h case   10:*/		return 0x822101BC;
		  /* 822101BCh */ case   11:  		/* li R7, 2021 */
		/* 822101BCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x7E5);
		/* 822101BCh case   11:*/		return 0x822101C0;
		  /* 822101C0h */ case   12:  		/* li R3, 0 */
		/* 822101C0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822101C0h case   12:*/		return 0x822101C4;
		  /* 822101C4h */ case   13:  		/* bl -755132 */
		/* 822101C4h case   13:*/		regs.LR = 0x822101C8; return 0x82157C08;
		/* 822101C4h case   13:*/		return 0x822101C8;
	}
	return 0x822101C8;
} // Block from 82210190h-822101C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822101C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822101C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822101C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822101C8);
		  /* 822101C8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 822101C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822101C8h case    0:*/		return 0x822101CC;
		  /* 822101CCh */ case    1:  		/* oris R11, R11, 514 */
		/* 822101CCh case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x202);
		/* 822101CCh case    1:*/		return 0x822101D0;
		  /* 822101D0h */ case    2:  		/* stw R11, <#[R31]> */
		/* 822101D0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822101D0h case    2:*/		return 0x822101D4;
	}
	return 0x822101D4;
} // Block from 822101C8h-822101D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822101D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822101D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822101D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822101D4);
		  /* 822101D4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 822101D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822101D4h case    0:*/		return 0x822101D8;
		  /* 822101D8h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 822101D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 822101D8h case    1:*/		return 0x822101DC;
		  /* 822101DCh */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 822101DCh case    2:*/		if ( regs.CR[6].eq ) { return 0x822101E8;  }
		/* 822101DCh case    2:*/		return 0x822101E0;
		  /* 822101E0h */ case    3:  		/* ori R11, R11, 24 */
		/* 822101E0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x18);
		/* 822101E0h case    3:*/		return 0x822101E4;
		  /* 822101E4h */ case    4:  		/* b 8 */
		/* 822101E4h case    4:*/		return 0x822101EC;
		/* 822101E4h case    4:*/		return 0x822101E8;
	}
	return 0x822101E8;
} // Block from 822101D4h-822101E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822101E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822101E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822101E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822101E8);
		  /* 822101E8h */ case    0:  		/* rlwinm R11, R11, 0, 29, 26 */
		/* 822101E8h case    0:*/		cpu::op::rlwinm<0,0,29,26>(regs,&regs.R11,regs.R11);
		/* 822101E8h case    0:*/		return 0x822101EC;
	}
	return 0x822101EC;
} // Block from 822101E8h-822101ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822101ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822101EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822101EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822101EC);
		  /* 822101ECh */ case    0:  		/* stw R11, <#[R31 + 4]> */
		/* 822101ECh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822101ECh case    0:*/		return 0x822101F0;
		  /* 822101F0h */ case    1:  		/* addi R1, R1, 176 */
		/* 822101F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 822101F0h case    1:*/		return 0x822101F4;
		  /* 822101F4h */ case    2:  		/* b -1568612 */
		/* 822101F4h case    2:*/		return 0x82091290;
		/* 822101F4h case    2:*/		return 0x822101F8;
	}
	return 0x822101F8;
} // Block from 822101ECh-822101F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822101F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822101F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822101F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822101F8);
		  /* 822101F8h */ case    0:  		/* mfspr R12, LR */
		/* 822101F8h case    0:*/		regs.R12 = regs.LR;
		/* 822101F8h case    0:*/		return 0x822101FC;
		  /* 822101FCh */ case    1:  		/* bl -1568704 */
		/* 822101FCh case    1:*/		regs.LR = 0x82210200; return 0x8209123C;
		/* 822101FCh case    1:*/		return 0x82210200;
		  /* 82210200h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82210200h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82210200h case    2:*/		return 0x82210204;
		  /* 82210204h */ case    3:  		/* lwz R9, <#[R4]> */
		/* 82210204h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82210204h case    3:*/		return 0x82210208;
		  /* 82210208h */ case    4:  		/* mr R22, R8 */
		/* 82210208h case    4:*/		regs.R22 = regs.R8;
		/* 82210208h case    4:*/		return 0x8221020C;
		  /* 8221020Ch */ case    5:  		/* lwz R8, <#[R3 + 28]> */
		/* 8221020Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221020Ch case    5:*/		return 0x82210210;
		  /* 82210210h */ case    6:  		/* mr R24, R4 */
		/* 82210210h case    6:*/		regs.R24 = regs.R4;
		/* 82210210h case    6:*/		return 0x82210214;
		  /* 82210214h */ case    7:  		/* rlwinm R10, R9, 22, 20, 25 */
		/* 82210214h case    7:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R10,regs.R9);
		/* 82210214h case    7:*/		return 0x82210218;
		  /* 82210218h */ case    8:  		/* rlwinm R11, R9, 0, 16, 31 */
		/* 82210218h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R9);
		/* 82210218h case    8:*/		return 0x8221021C;
		  /* 8221021Ch */ case    9:  		/* mr R21, R6 */
		/* 8221021Ch case    9:*/		regs.R21 = regs.R6;
		/* 8221021Ch case    9:*/		return 0x82210220;
		  /* 82210220h */ case   10:  		/* add R11, R10, R11 */
		/* 82210220h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82210220h case   10:*/		return 0x82210224;
		  /* 82210224h */ case   11:  		/* lwz R31, <#[R8 + 10816]> */
		/* 82210224h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R8 + 0x00002A40) );
		/* 82210224h case   11:*/		return 0x82210228;
		  /* 82210228h */ case   12:  		/* mr R30, R7 */
		/* 82210228h case   12:*/		regs.R30 = regs.R7;
		/* 82210228h case   12:*/		return 0x8221022C;
		  /* 8221022Ch */ case   13:  		/* addi R11, R11, 4200 */
		/* 8221022Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 8221022Ch case   13:*/		return 0x82210230;
		  /* 82210230h */ case   14:  		/* cmplwi CR6, R5, 0 */
		/* 82210230h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82210230h case   14:*/		return 0x82210234;
		  /* 82210234h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82210234h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82210234h case   15:*/		return 0x82210238;
		  /* 82210238h */ case   16:  		/* rlwinm R9, R9, 16, 26, 31 */
		/* 82210238h case   16:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R9,regs.R9);
		/* 82210238h case   16:*/		return 0x8221023C;
		  /* 8221023Ch */ case   17:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8221023Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8221023Ch case   17:*/		return 0x82210240;
		  /* 82210240h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 82210240h case   18:*/		if ( regs.CR[6].eq ) { return 0x82210250;  }
		/* 82210240h case   18:*/		return 0x82210244;
		  /* 82210244h */ case   19:  		/* lwz R28, <#[R5]> */
		/* 82210244h case   19:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x00000000) );
		/* 82210244h case   19:*/		return 0x82210248;
		  /* 82210248h */ case   20:  		/* stw R28, <#[R1 + 80]> */
		/* 82210248h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 82210248h case   20:*/		return 0x8221024C;
		  /* 8221024Ch */ case   21:  		/* b 8 */
		/* 8221024Ch case   21:*/		return 0x82210254;
		/* 8221024Ch case   21:*/		return 0x82210250;
	}
	return 0x82210250;
} // Block from 822101F8h-82210250h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82210250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210250);
		  /* 82210250h */ case    0:  		/* lwz R28, <#[R1 + 80]> */
		/* 82210250h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 82210250h case    0:*/		return 0x82210254;
	}
	return 0x82210254;
} // Block from 82210250h-82210254h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210254);
		  /* 82210254h */ case    0:  		/* lis R10, -32253 */
		/* 82210254h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82210254h case    0:*/		return 0x82210258;
		  /* 82210258h */ case    1:  		/* lis R8, -32252 */
		/* 82210258h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 82210258h case    1:*/		return 0x8221025C;
		  /* 8221025Ch */ case    2:  		/* lis R7, -32252 */
		/* 8221025Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8221025Ch case    2:*/		return 0x82210260;
		  /* 82210260h */ case    3:  		/* li R29, 0 */
		/* 82210260h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82210260h case    3:*/		return 0x82210264;
		  /* 82210264h */ case    4:  		/* li R27, 1 */
		/* 82210264h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82210264h case    4:*/		return 0x82210268;
		  /* 82210268h */ case    5:  		/* cmplwi CR6, R9, 24 */
		/* 82210268h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000018);
		/* 82210268h case    5:*/		return 0x8221026C;
		  /* 8221026Ch */ case    6:  		/* addi R26, R10, 27460 */
		/* 8221026Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6B44);
		/* 8221026Ch case    6:*/		return 0x82210270;
		  /* 82210270h */ case    7:  		/* addi R23, R8, -25364 */
		/* 82210270h case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R8,0xFFFF9CEC);
		/* 82210270h case    7:*/		return 0x82210274;
		  /* 82210274h */ case    8:  		/* addi R25, R7, -7312 */
		/* 82210274h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0xFFFFE370);
		/* 82210274h case    8:*/		return 0x82210278;
		  /* 82210278h */ case    9:  		/* bc 12, CR6_GT, 232 */
		/* 82210278h case    9:*/		if ( regs.CR[6].gt ) { return 0x82210360;  }
		/* 82210278h case    9:*/		return 0x8221027C;
		  /* 8221027Ch */ case   10:  		/* lis R12, -32252 */
		/* 8221027Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 8221027Ch case   10:*/		return 0x82210280;
		  /* 82210280h */ case   11:  		/* addi R12, R12, -7016 */
		/* 82210280h case   11:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFE498);
		/* 82210280h case   11:*/		return 0x82210284;
		  /* 82210284h */ case   12:  		/* lbzx R0, <#[R12 + R9]> */
		/* 82210284h case   12:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R9 + 0x00000000) );
		/* 82210284h case   12:*/		return 0x82210288;
		  /* 82210288h */ case   13:  		/* lis R12, -32223 */
		/* 82210288h case   13:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8221);
		/* 82210288h case   13:*/		return 0x8221028C;
		  /* 8221028Ch */ case   14:  		/* ori R0, R0, 0 */
		/* 8221028Ch case   14:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8221028Ch case   14:*/		return 0x82210290;
		  /* 82210290h */ case   15:  		/* addi R12, R12, 676 */
		/* 82210290h case   15:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2A4);
		/* 82210290h case   15:*/		return 0x82210294;
		  /* 82210294h */ case   16:  		/* ori R0, R0, 0 */
		/* 82210294h case   16:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82210294h case   16:*/		return 0x82210298;
		  /* 82210298h */ case   17:  		/* add R12, R12, R0 */
		/* 82210298h case   17:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82210298h case   17:*/		return 0x8221029C;
		  /* 8221029Ch */ case   18:  		/* mtspr CTR, R12 */
		/* 8221029Ch case   18:*/		regs.CTR = regs.R12;
		/* 8221029Ch case   18:*/		return 0x822102A0;
		  /* 822102A0h */ case   19:  		/* bcctr 20, CR0_LT */
		/* 822102A0h case   19:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 822102A0h case   19:*/		return 0x822102A4;
		  /* 822102A4h */ case   20:  		/* slw R8, R27, R30 */
		/* 822102A4h case   20:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R27,regs.R30);
		/* 822102A4h case   20:*/		return 0x822102A8;
		  /* 822102A8h */ case   21:  		/* lwz R9, <#[R31 + 8]> */
		/* 822102A8h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 822102A8h case   21:*/		return 0x822102AC;
		  /* 822102ACh */ case   22:  		/* rlwinm R10, R30, 3, 0, 28 */
		/* 822102ACh case   22:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R30);
		/* 822102ACh case   22:*/		return 0x822102B0;
		  /* 822102B0h */ case   23:  		/* rlwinm R8, R8, 0, 29, 31 */
		/* 822102B0h case   23:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R8);
		/* 822102B0h case   23:*/		return 0x822102B4;
		  /* 822102B4h */ case   24:  		/* slw R11, R11, R10 */
		/* 822102B4h case   24:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822102B4h case   24:*/		return 0x822102B8;
		  /* 822102B8h */ case   25:  		/* or R10, R8, R9 */
		/* 822102B8h case   25:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 822102B8h case   25:*/		return 0x822102BC;
		  /* 822102BCh */ case   26:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 822102BCh case   26:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 822102BCh case   26:*/		return 0x822102C0;
		  /* 822102C0h */ case   27:  		/* or R11, R11, R10 */
		/* 822102C0h case   27:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822102C0h case   27:*/		return 0x822102C4;
		  /* 822102C4h */ case   28:  		/* rlwimi R11, R10, 0, 24, 31 */
		/* 822102C4h case   28:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R11,regs.R10);
		/* 822102C4h case   28:*/		return 0x822102C8;
		  /* 822102C8h */ case   29:  		/* stw R11, <#[R31 + 8]> */
		/* 822102C8h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822102C8h case   29:*/		return 0x822102CC;
		  /* 822102CCh */ case   30:  		/* b 148 */
		/* 822102CCh case   30:*/		return 0x82210360;
		/* 822102CCh case   30:*/		return 0x822102D0;
		  /* 822102D0h */ case   31:  		/* li R7, 2119 */
		/* 822102D0h case   31:*/		cpu::op::li<0>(regs,&regs.R7,0x847);
		/* 822102D0h case   31:*/		return 0x822102D4;
		  /* 822102D4h */ case   32:  		/* b 120 */
		/* 822102D4h case   32:*/		return 0x8221034C;
		/* 822102D4h case   32:*/		return 0x822102D8;
		  /* 822102D8h */ case   33:  		/* li R12, -30584 */
		/* 822102D8h case   33:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822102D8h case   33:*/		return 0x822102DC;
		  /* 822102DCh */ case   34:  		/* and R28, R28, R12 */
		/* 822102DCh case   34:*/		cpu::op::and<0>(regs,&regs.R28,regs.R28,regs.R12);
		/* 822102DCh case   34:*/		return 0x822102E0;
		  /* 822102E0h */ case   35:  		/* stw R28, <#[R1 + 80]> */
		/* 822102E0h case   35:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 822102E0h case   35:*/		return 0x822102E4;
		  /* 822102E4h */ case   36:  		/* b -64 */
		/* 822102E4h case   36:*/		return 0x822102A4;
		/* 822102E4h case   36:*/		return 0x822102E8;
	}
	return 0x822102E8;
} // Block from 82210254h-822102E8h (37 instructions)

//////////////////////////////////////////////////////
// Block at 822102E8h
// Function '?AS_GetArrayStateF@XGRAPHICS@@YAMPAU_ABSTRACT_STATE@1@W4_E_AS_ARRAY_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822102E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822102E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822102E8);
		  /* 822102E8h */ case    0:  		/* slw R8, R27, R30 */
		/* 822102E8h case    0:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R27,regs.R30);
		/* 822102E8h case    0:*/		return 0x822102EC;
		  /* 822102ECh */ case    1:  		/* lwz R9, <#[R31 + 8]> */
		/* 822102ECh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 822102ECh case    1:*/		return 0x822102F0;
		  /* 822102F0h */ case    2:  		/* rlwinm R10, R30, 3, 0, 28 */
		/* 822102F0h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R30);
		/* 822102F0h case    2:*/		return 0x822102F4;
		  /* 822102F4h */ case    3:  		/* rlwinm R8, R8, 0, 29, 31 */
		/* 822102F4h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R8);
		/* 822102F4h case    3:*/		return 0x822102F8;
		  /* 822102F8h */ case    4:  		/* li R12, -26215 */
		/* 822102F8h case    4:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 822102F8h case    4:*/		return 0x822102FC;
		  /* 822102FCh */ case    5:  		/* slw R11, R11, R10 */
		/* 822102FCh case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822102FCh case    5:*/		return 0x82210300;
		  /* 82210300h */ case    6:  		/* or R10, R8, R9 */
		/* 82210300h case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 82210300h case    6:*/		return 0x82210304;
		  /* 82210304h */ case    7:  		/* and R9, R28, R12 */
		/* 82210304h case    7:*/		cpu::op::and<0>(regs,&regs.R9,regs.R28,regs.R12);
		/* 82210304h case    7:*/		return 0x82210308;
		  /* 82210308h */ case    8:  		/* ori R28, R9, 4369 */
		/* 82210308h case    8:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x1111);
		/* 82210308h case    8:*/		return 0x8221030C;
		  /* 8221030Ch */ case    9:  		/* stw R28, <#[R1 + 80]> */
		/* 8221030Ch case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 8221030Ch case    9:*/		return 0x82210310;
		  /* 82210310h */ case   10:  		/* b -84 */
		/* 82210310h case   10:*/		return 0x822102BC;
		/* 82210310h case   10:*/		return 0x82210314;
		  /* 82210314h */ case   11:  		/* slw R11, R29, R30 */
		/* 82210314h case   11:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 82210314h case   11:*/		return 0x82210318;
		  /* 82210318h */ case   12:  		/* lwz R10, <#[R31 + 8]> */
		/* 82210318h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82210318h case   12:*/		return 0x8221031C;
		  /* 8221031Ch */ case   13:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8221031Ch case   13:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8221031Ch case   13:*/		return 0x82210320;
		  /* 82210320h */ case   14:  		/* rlwinm R9, R30, 3, 0, 28 */
		/* 82210320h case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R30);
		/* 82210320h case   14:*/		return 0x82210324;
		  /* 82210324h */ case   15:  		/* or R11, R11, R10 */
		/* 82210324h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82210324h case   15:*/		return 0x82210328;
		  /* 82210328h */ case   16:  		/* stw R11, <#[R31 + 8]> */
		/* 82210328h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82210328h case   16:*/		return 0x8221032C;
		  /* 8221032Ch */ case   17:  		/* lhz R10, <#[R24 + 2]> */
		/* 8221032Ch case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000002) );
		/* 8221032Ch case   17:*/		return 0x82210330;
		  /* 82210330h */ case   18:  		/* slw R10, R10, R9 */
		/* 82210330h case   18:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82210330h case   18:*/		return 0x82210334;
		  /* 82210334h */ case   19:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 82210334h case   19:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 82210334h case   19:*/		return 0x82210338;
		  /* 82210338h */ case   20:  		/* or R10, R10, R11 */
		/* 82210338h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82210338h case   20:*/		return 0x8221033C;
		  /* 8221033Ch */ case   21:  		/* rlwimi R10, R11, 0, 24, 31 */
		/* 8221033Ch case   21:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 8221033Ch case   21:*/		return 0x82210340;
		  /* 82210340h */ case   22:  		/* stw R10, <#[R31 + 8]> */
		/* 82210340h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82210340h case   22:*/		return 0x82210344;
		  /* 82210344h */ case   23:  		/* b 28 */
		/* 82210344h case   23:*/		return 0x82210360;
		/* 82210344h case   23:*/		return 0x82210348;
		  /* 82210348h */ case   24:  		/* li R7, 2179 */
		/* 82210348h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x883);
		/* 82210348h case   24:*/		return 0x8221034C;
	}
	return 0x8221034C;
} // Block from 822102E8h-8221034Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8221034Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221034C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221034C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221034C);
		  /* 8221034Ch */ case    0:  		/* mr R6, R25 */
		/* 8221034Ch case    0:*/		regs.R6 = regs.R25;
		/* 8221034Ch case    0:*/		return 0x82210350;
		  /* 82210350h */ case    1:  		/* mr R5, R23 */
		/* 82210350h case    1:*/		regs.R5 = regs.R23;
		/* 82210350h case    1:*/		return 0x82210354;
		  /* 82210354h */ case    2:  		/* mr R4, R26 */
		/* 82210354h case    2:*/		regs.R4 = regs.R26;
		/* 82210354h case    2:*/		return 0x82210358;
		  /* 82210358h */ case    3:  		/* li R3, 0 */
		/* 82210358h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210358h case    3:*/		return 0x8221035C;
		  /* 8221035Ch */ case    4:  		/* bl -755540 */
		/* 8221035Ch case    4:*/		regs.LR = 0x82210360; return 0x82157C08;
		/* 8221035Ch case    4:*/		return 0x82210360;
	}
	return 0x82210360;
} // Block from 8221034Ch-82210360h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82210360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210360);
		  /* 82210360h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 82210360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82210360h case    0:*/		return 0x82210364;
		  /* 82210364h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82210364h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82210364h case    1:*/		return 0x82210368;
		  /* 82210368h */ case    2:  		/* bc 12, CR0_EQ, 352 */
		/* 82210368h case    2:*/		if ( regs.CR[0].eq ) { return 0x822104C8;  }
		/* 82210368h case    2:*/		return 0x8221036C;
		  /* 8221036Ch */ case    3:  		/* rlwinm R8, R28, 0, 29, 31 */
		/* 8221036Ch case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R28);
		/* 8221036Ch case    3:*/		return 0x82210370;
		  /* 82210370h */ case    4:  		/* cmplwi CR6, R8, 4 */
		/* 82210370h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 82210370h case    4:*/		return 0x82210374;
		  /* 82210374h */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 82210374h case    5:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 82210374h case    5:*/		return 0x82210378;
		  /* 82210378h */ case    6:  		/* rlwinm R9, R28, 28, 29, 31 */
		/* 82210378h case    6:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R9,regs.R28);
		/* 82210378h case    6:*/		return 0x8221037C;
		  /* 8221037Ch */ case    7:  		/* cmplwi CR6, R9, 4 */
		/* 8221037Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 8221037Ch case    7:*/		return 0x82210380;
		  /* 82210380h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 82210380h case    8:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 82210380h case    8:*/		return 0x82210384;
		  /* 82210384h */ case    9:  		/* rlwinm R10, R28, 24, 29, 31 */
		/* 82210384h case    9:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R10,regs.R28);
		/* 82210384h case    9:*/		return 0x82210388;
		  /* 82210388h */ case   10:  		/* cmplwi CR6, R10, 4 */
		/* 82210388h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82210388h case   10:*/		return 0x8221038C;
		  /* 8221038Ch */ case   11:  		/* bc 12, CR6_EQ, 92 */
		/* 8221038Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 8221038Ch case   11:*/		return 0x82210390;
		  /* 82210390h */ case   12:  		/* rlwinm R11, R28, 20, 29, 31 */
		/* 82210390h case   12:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R11,regs.R28);
		/* 82210390h case   12:*/		return 0x82210394;
		  /* 82210394h */ case   13:  		/* cmplwi CR6, R11, 4 */
		/* 82210394h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82210394h case   13:*/		return 0x82210398;
	}
	return 0x82210398;
} // Block from 82210360h-82210398h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82210398h
// Function '?InsertAlloc@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210398);
		  /* 82210398h */ case    0:  		/* bc 12, CR6_EQ, 80 */
		/* 82210398h case    0:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 82210398h case    0:*/		return 0x8221039C;
		  /* 8221039Ch */ case    1:  		/* cmplwi CR6, R8, 5 */
		/* 8221039Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000005);
		/* 8221039Ch case    1:*/		return 0x822103A0;
		  /* 822103A0h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 822103A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 822103A0h case    2:*/		return 0x822103A4;
		  /* 822103A4h */ case    3:  		/* cmplwi CR6, R9, 5 */
		/* 822103A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 822103A4h case    3:*/		return 0x822103A8;
		  /* 822103A8h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 822103A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 822103A8h case    4:*/		return 0x822103AC;
		  /* 822103ACh */ case    5:  		/* cmplwi CR6, R10, 5 */
		/* 822103ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 822103ACh case    5:*/		return 0x822103B0;
		  /* 822103B0h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 822103B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 822103B0h case    6:*/		return 0x822103B4;
		  /* 822103B4h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 822103B4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 822103B4h case    7:*/		return 0x822103B8;
		  /* 822103B8h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 822103B8h case    8:*/		if ( regs.CR[6].eq ) { return 0x822103E8;  }
		/* 822103B8h case    8:*/		return 0x822103BC;
		  /* 822103BCh */ case    9:  		/* addi R3, R1, 80 */
		/* 822103BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 822103BCh case    9:*/		return 0x822103C0;
		  /* 822103C0h */ case   10:  		/* bl -2392 */
		/* 822103C0h case   10:*/		regs.LR = 0x822103C4; return 0x8220FA68;
		/* 822103C0h case   10:*/		return 0x822103C4;
		  /* 822103C4h */ case   11:  		/* rlwinm R11, R30, 3, 0, 28 */
		/* 822103C4h case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R30);
		/* 822103C4h case   11:*/		return 0x822103C8;
		  /* 822103C8h */ case   12:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 822103C8h case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 822103C8h case   12:*/		return 0x822103CC;
		  /* 822103CCh */ case   13:  		/* lwz R9, <#[R31 + 4]> */
		/* 822103CCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 822103CCh case   13:*/		return 0x822103D0;
		  /* 822103D0h */ case   14:  		/* slw R11, R10, R11 */
		/* 822103D0h case   14:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 822103D0h case   14:*/		return 0x822103D4;
		  /* 822103D4h */ case   15:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 822103D4h case   15:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 822103D4h case   15:*/		return 0x822103D8;
		  /* 822103D8h */ case   16:  		/* or R11, R11, R9 */
		/* 822103D8h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 822103D8h case   16:*/		return 0x822103DC;
		  /* 822103DCh */ case   17:  		/* rlwimi R11, R9, 0, 24, 31 */
		/* 822103DCh case   17:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R11,regs.R9);
		/* 822103DCh case   17:*/		return 0x822103E0;
		  /* 822103E0h */ case   18:  		/* stw R11, <#[R31 + 4]> */
		/* 822103E0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822103E0h case   18:*/		return 0x822103E4;
		  /* 822103E4h */ case   19:  		/* b 28 */
		/* 822103E4h case   19:*/		return 0x82210400;
		/* 822103E4h case   19:*/		return 0x822103E8;
	}
	return 0x822103E8;
} // Block from 82210398h-822103E8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822103E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822103E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822103E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822103E8);
		  /* 822103E8h */ case    0:  		/* mr R6, R25 */
		/* 822103E8h case    0:*/		regs.R6 = regs.R25;
		/* 822103E8h case    0:*/		return 0x822103EC;
		  /* 822103ECh */ case    1:  		/* mr R5, R23 */
		/* 822103ECh case    1:*/		regs.R5 = regs.R23;
		/* 822103ECh case    1:*/		return 0x822103F0;
		  /* 822103F0h */ case    2:  		/* mr R4, R26 */
		/* 822103F0h case    2:*/		regs.R4 = regs.R26;
		/* 822103F0h case    2:*/		return 0x822103F4;
		  /* 822103F4h */ case    3:  		/* li R7, 2196 */
		/* 822103F4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x894);
		/* 822103F4h case    3:*/		return 0x822103F8;
		  /* 822103F8h */ case    4:  		/* li R3, 0 */
		/* 822103F8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822103F8h case    4:*/		return 0x822103FC;
		  /* 822103FCh */ case    5:  		/* bl -755700 */
		/* 822103FCh case    5:*/		regs.LR = 0x82210400; return 0x82157C08;
		/* 822103FCh case    5:*/		return 0x82210400;
	}
	return 0x82210400;
} // Block from 822103E8h-82210400h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210400);
		  /* 82210400h */ case    0:  		/* rlwinm R29, R28, 29, 31, 31 */
		/* 82210400h case    0:*/		cpu::op::rlwinm<0,29,31,31>(regs,&regs.R29,regs.R28);
		/* 82210400h case    0:*/		return 0x82210404;
		  /* 82210404h */ case    1:  		/* rlwinm R11, R28, 25, 31, 31 */
		/* 82210404h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R11,regs.R28);
		/* 82210404h case    1:*/		return 0x82210408;
		  /* 82210408h */ case    2:  		/* cmplw CR6, R29, R11 */
		/* 82210408h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82210408h case    2:*/		return 0x8221040C;
		  /* 8221040Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8221040Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8221042C;  }
		/* 8221040Ch case    3:*/		return 0x82210410;
		  /* 82210410h */ case    4:  		/* lis R11, -32252 */
		/* 82210410h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210410h case    4:*/		return 0x82210414;
		  /* 82210414h */ case    5:  		/* mr R6, R25 */
		/* 82210414h case    5:*/		regs.R6 = regs.R25;
		/* 82210414h case    5:*/		return 0x82210418;
		  /* 82210418h */ case    6:  		/* addi R5, R11, -6064 */
		/* 82210418h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE850);
		/* 82210418h case    6:*/		return 0x8221041C;
		  /* 8221041Ch */ case    7:  		/* mr R4, R26 */
		/* 8221041Ch case    7:*/		regs.R4 = regs.R26;
		/* 8221041Ch case    7:*/		return 0x82210420;
		  /* 82210420h */ case    8:  		/* li R7, 2203 */
		/* 82210420h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x89B);
		/* 82210420h case    8:*/		return 0x82210424;
		  /* 82210424h */ case    9:  		/* li R3, 0 */
		/* 82210424h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210424h case    9:*/		return 0x82210428;
		  /* 82210428h */ case   10:  		/* bl -755744 */
		/* 82210428h case   10:*/		regs.LR = 0x8221042C; return 0x82157C08;
		/* 82210428h case   10:*/		return 0x8221042C;
	}
	return 0x8221042C;
} // Block from 82210400h-8221042Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221042Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221042C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221042C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221042C);
		  /* 8221042Ch */ case    0:  		/* rlwinm R11, R28, 21, 31, 31 */
		/* 8221042Ch case    0:*/		cpu::op::rlwinm<0,21,31,31>(regs,&regs.R11,regs.R28);
		/* 8221042Ch case    0:*/		return 0x82210430;
		  /* 82210430h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 82210430h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82210430h case    1:*/		return 0x82210434;
		  /* 82210434h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82210434h case    2:*/		if ( regs.CR[6].eq ) { return 0x82210454;  }
		/* 82210434h case    2:*/		return 0x82210438;
		  /* 82210438h */ case    3:  		/* lis R11, -32252 */
		/* 82210438h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210438h case    3:*/		return 0x8221043C;
		  /* 8221043Ch */ case    4:  		/* mr R6, R25 */
		/* 8221043Ch case    4:*/		regs.R6 = regs.R25;
		/* 8221043Ch case    4:*/		return 0x82210440;
		  /* 82210440h */ case    5:  		/* addi R5, R11, -6136 */
		/* 82210440h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE808);
		/* 82210440h case    5:*/		return 0x82210444;
		  /* 82210444h */ case    6:  		/* mr R4, R26 */
		/* 82210444h case    6:*/		regs.R4 = regs.R26;
		/* 82210444h case    6:*/		return 0x82210448;
		  /* 82210448h */ case    7:  		/* li R7, 2204 */
		/* 82210448h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x89C);
		/* 82210448h case    7:*/		return 0x8221044C;
		  /* 8221044Ch */ case    8:  		/* li R3, 0 */
		/* 8221044Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221044Ch case    8:*/		return 0x82210450;
		  /* 82210450h */ case    9:  		/* bl -755784 */
		/* 82210450h case    9:*/		regs.LR = 0x82210454; return 0x82157C08;
		/* 82210450h case    9:*/		return 0x82210454;
	}
	return 0x82210454;
} // Block from 8221042Ch-82210454h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82210454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210454);
		  /* 82210454h */ case    0:  		/* rlwinm R11, R28, 17, 31, 31 */
		/* 82210454h case    0:*/		cpu::op::rlwinm<0,17,31,31>(regs,&regs.R11,regs.R28);
		/* 82210454h case    0:*/		return 0x82210458;
		  /* 82210458h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 82210458h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82210458h case    1:*/		return 0x8221045C;
		  /* 8221045Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8221045Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221047C;  }
		/* 8221045Ch case    2:*/		return 0x82210460;
		  /* 82210460h */ case    3:  		/* lis R11, -32252 */
		/* 82210460h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210460h case    3:*/		return 0x82210464;
		  /* 82210464h */ case    4:  		/* mr R6, R25 */
		/* 82210464h case    4:*/		regs.R6 = regs.R25;
		/* 82210464h case    4:*/		return 0x82210468;
		  /* 82210468h */ case    5:  		/* addi R5, R11, -6208 */
		/* 82210468h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE7C0);
		/* 82210468h case    5:*/		return 0x8221046C;
		  /* 8221046Ch */ case    6:  		/* mr R4, R26 */
		/* 8221046Ch case    6:*/		regs.R4 = regs.R26;
		/* 8221046Ch case    6:*/		return 0x82210470;
		  /* 82210470h */ case    7:  		/* li R7, 2205 */
		/* 82210470h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x89D);
		/* 82210470h case    7:*/		return 0x82210474;
		  /* 82210474h */ case    8:  		/* li R3, 0 */
		/* 82210474h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210474h case    8:*/		return 0x82210478;
		  /* 82210478h */ case    9:  		/* bl -755824 */
		/* 82210478h case    9:*/		regs.LR = 0x8221047C; return 0x82157C08;
		/* 82210478h case    9:*/		return 0x8221047C;
	}
	return 0x8221047C;
} // Block from 82210454h-8221047Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221047Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221047C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221047C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221047C);
		  /* 8221047Ch */ case    0:  		/* slw R11, R29, R30 */
		/* 8221047Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 8221047Ch case    0:*/		return 0x82210480;
		  /* 82210480h */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 82210480h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82210480h case    1:*/		return 0x82210484;
		  /* 82210484h */ case    2:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 82210484h case    2:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 82210484h case    2:*/		return 0x82210488;
	}
	return 0x82210488;
} // Block from 8221047Ch-82210488h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82210488h
// Function '?SetHardwareSwizzle@XGRAPHICS@@YAEPATIL_Src_Mod@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210488);
		  /* 82210488h */ case    0:  		/* or R11, R11, R10 */
		/* 82210488h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82210488h case    0:*/		return 0x8221048C;
		  /* 8221048Ch */ case    1:  		/* rlwimi R11, R10, 0, 27, 23 */
		/* 8221048Ch case    1:*/		cpu::op::rlwimi<0,0,27,23>(regs,&regs.R11,regs.R10);
		/* 8221048Ch case    1:*/		return 0x82210490;
		  /* 82210490h */ case    2:  		/* stw R11, <#[R31 + 4]> */
		/* 82210490h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210490h case    2:*/		return 0x82210494;
		  /* 82210494h */ case    3:  		/* lhz R11, <#[R24]> */
		/* 82210494h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82210494h case    3:*/		return 0x82210498;
		  /* 82210498h */ case    4:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 82210498h case    4:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 82210498h case    4:*/		return 0x8221049C;
		  /* 8221049Ch */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 8221049Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221049Ch case    5:*/		return 0x822104A0;
		  /* 822104A0h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 822104A0h case    6:*/		if ( regs.CR[6].eq ) { return 0x822104F4;  }
		/* 822104A0h case    6:*/		return 0x822104A4;
		  /* 822104A4h */ case    7:  		/* rlwinm R11, R28, 19, 24, 24 */
		/* 822104A4h case    7:*/		cpu::op::rlwinm<0,19,24,24>(regs,&regs.R11,regs.R28);
		/* 822104A4h case    7:*/		return 0x822104A8;
		  /* 822104A8h */ case    8:  		/* lwz R10, <#[R31 + 8]> */
		/* 822104A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 822104A8h case    8:*/		return 0x822104AC;
		  /* 822104ACh */ case    9:  		/* rlwinm R9, R30, 3, 0, 28 */
		/* 822104ACh case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R30);
		/* 822104ACh case    9:*/		return 0x822104B0;
		  /* 822104B0h */ case   10:  		/* slw R11, R11, R9 */
		/* 822104B0h case   10:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 822104B0h case   10:*/		return 0x822104B4;
		  /* 822104B4h */ case   11:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 822104B4h case   11:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 822104B4h case   11:*/		return 0x822104B8;
		  /* 822104B8h */ case   12:  		/* or R11, R11, R10 */
		/* 822104B8h case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822104B8h case   12:*/		return 0x822104BC;
		  /* 822104BCh */ case   13:  		/* rlwimi R11, R10, 0, 24, 31 */
		/* 822104BCh case   13:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R11,regs.R10);
		/* 822104BCh case   13:*/		return 0x822104C0;
		  /* 822104C0h */ case   14:  		/* stw R11, <#[R31 + 8]> */
		/* 822104C0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822104C0h case   14:*/		return 0x822104C4;
		  /* 822104C4h */ case   15:  		/* b 48 */
		/* 822104C4h case   15:*/		return 0x822104F4;
		/* 822104C4h case   15:*/		return 0x822104C8;
	}
	return 0x822104C8;
} // Block from 82210488h-822104C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822104C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822104C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822104C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822104C8);
		  /* 822104C8h */ case    0:  		/* rlwinm R11, R30, 3, 0, 28 */
		/* 822104C8h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R30);
		/* 822104C8h case    0:*/		return 0x822104CC;
		  /* 822104CCh */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 822104CCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 822104CCh case    1:*/		return 0x822104D0;
		  /* 822104D0h */ case    2:  		/* slw R9, R29, R30 */
		/* 822104D0h case    2:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R30);
		/* 822104D0h case    2:*/		return 0x822104D4;
		  /* 822104D4h */ case    3:  		/* slw R11, R29, R11 */
		/* 822104D4h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 822104D4h case    3:*/		return 0x822104D8;
		  /* 822104D8h */ case    4:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 822104D8h case    4:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 822104D8h case    4:*/		return 0x822104DC;
		  /* 822104DCh */ case    5:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 822104DCh case    5:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 822104DCh case    5:*/		return 0x822104E0;
		  /* 822104E0h */ case    6:  		/* or R11, R11, R10 */
		/* 822104E0h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822104E0h case    6:*/		return 0x822104E4;
		  /* 822104E4h */ case    7:  		/* rlwimi R11, R10, 0, 24, 31 */
		/* 822104E4h case    7:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R11,regs.R10);
		/* 822104E4h case    7:*/		return 0x822104E8;
		  /* 822104E8h */ case    8:  		/* or R10, R9, R11 */
		/* 822104E8h case    8:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 822104E8h case    8:*/		return 0x822104EC;
		  /* 822104ECh */ case    9:  		/* rlwimi R10, R11, 0, 27, 23 */
		/* 822104ECh case    9:*/		cpu::op::rlwimi<0,0,27,23>(regs,&regs.R10,regs.R11);
		/* 822104ECh case    9:*/		return 0x822104F0;
		  /* 822104F0h */ case   10:  		/* stw R10, <#[R31 + 4]> */
		/* 822104F0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 822104F0h case   10:*/		return 0x822104F4;
	}
	return 0x822104F4;
} // Block from 822104C8h-822104F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822104F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822104F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822104F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822104F4);
		  /* 822104F4h */ case    0:  		/* lbz R11, <#[R24]> */
		/* 822104F4h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 822104F4h case    0:*/		return 0x822104F8;
		  /* 822104F8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822104F8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822104F8h case    1:*/		return 0x822104FC;
		  /* 822104FCh */ case    2:  		/* bc 12, CR0_EQ, 100 */
		/* 822104FCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82210560;  }
		/* 822104FCh case    2:*/		return 0x82210500;
		  /* 82210500h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 82210500h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210500h case    3:*/		return 0x82210504;
		  /* 82210504h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82210504h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82210504h case    4:*/		return 0x82210508;
		  /* 82210508h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 82210508h case    5:*/		if ( regs.CR[0].eq ) { return 0x82210528;  }
		/* 82210508h case    5:*/		return 0x8221050C;
		  /* 8221050Ch */ case    6:  		/* lis R11, -32252 */
		/* 8221050Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221050Ch case    6:*/		return 0x82210510;
		  /* 82210510h */ case    7:  		/* mr R6, R25 */
		/* 82210510h case    7:*/		regs.R6 = regs.R25;
		/* 82210510h case    7:*/		return 0x82210514;
		  /* 82210514h */ case    8:  		/* addi R5, R11, -6240 */
		/* 82210514h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE7A0);
		/* 82210514h case    8:*/		return 0x82210518;
		  /* 82210518h */ case    9:  		/* mr R4, R26 */
		/* 82210518h case    9:*/		regs.R4 = regs.R26;
		/* 82210518h case    9:*/		return 0x8221051C;
		  /* 8221051Ch */ case   10:  		/* li R7, 2226 */
		/* 8221051Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8B2);
		/* 8221051Ch case   10:*/		return 0x82210520;
		  /* 82210520h */ case   11:  		/* li R3, 0 */
		/* 82210520h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210520h case   11:*/		return 0x82210524;
		  /* 82210524h */ case   12:  		/* bl -755996 */
		/* 82210524h case   12:*/		regs.LR = 0x82210528; return 0x82157C08;
		/* 82210524h case   12:*/		return 0x82210528;
	}
	return 0x82210528;
} // Block from 822104F4h-82210528h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82210528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210528);
		  /* 82210528h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82210528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210528h case    0:*/		return 0x8221052C;
		  /* 8221052Ch */ case    1:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 8221052Ch case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 8221052Ch case    1:*/		return 0x82210530;
		  /* 82210530h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 82210530h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210550;  }
		/* 82210530h case    2:*/		return 0x82210534;
		  /* 82210534h */ case    3:  		/* lis R11, -32252 */
		/* 82210534h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210534h case    3:*/		return 0x82210538;
		  /* 82210538h */ case    4:  		/* mr R6, R25 */
		/* 82210538h case    4:*/		regs.R6 = regs.R25;
		/* 82210538h case    4:*/		return 0x8221053C;
		  /* 8221053Ch */ case    5:  		/* addi R5, R11, -6268 */
		/* 8221053Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE784);
		/* 8221053Ch case    5:*/		return 0x82210540;
	}
	return 0x82210540;
} // Block from 82210528h-82210540h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210540h
// Function '?SetOpcode@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210540);
		  /* 82210540h */ case    0:  		/* mr R4, R26 */
		/* 82210540h case    0:*/		regs.R4 = regs.R26;
		/* 82210540h case    0:*/		return 0x82210544;
		  /* 82210544h */ case    1:  		/* li R7, 2227 */
		/* 82210544h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x8B3);
		/* 82210544h case    1:*/		return 0x82210548;
		  /* 82210548h */ case    2:  		/* li R3, 0 */
		/* 82210548h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210548h case    2:*/		return 0x8221054C;
		  /* 8221054Ch */ case    3:  		/* bl -756036 */
		/* 8221054Ch case    3:*/		regs.LR = 0x82210550; return 0x82157C08;
		/* 8221054Ch case    3:*/		return 0x82210550;
	}
	return 0x82210550;
} // Block from 82210540h-82210550h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82210550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210550);
		  /* 82210550h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82210550h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210550h case    0:*/		return 0x82210554;
		  /* 82210554h */ case    1:  		/* rlwimi R11, R27, 2, 29, 31 */
		/* 82210554h case    1:*/		cpu::op::rlwimi<0,2,29,31>(regs,&regs.R11,regs.R27);
		/* 82210554h case    1:*/		return 0x82210558;
		  /* 82210558h */ case    2:  		/* stw R11, <#[R31 + 4]> */
		/* 82210558h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210558h case    2:*/		return 0x8221055C;
		  /* 8221055Ch */ case    3:  		/* stw R27, <#[R22]> */
		/* 8221055Ch case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R22 + 0x00000000) );
		/* 8221055Ch case    3:*/		return 0x82210560;
	}
	return 0x82210560;
} // Block from 82210550h-82210560h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82210560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210560);
		  /* 82210560h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 82210560h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82210560h case    0:*/		return 0x82210564;
		  /* 82210564h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82210564h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82210564h case    1:*/		return 0x82210568;
		  /* 82210568h */ case    2:  		/* bc 12, CR0_EQ, 260 */
		/* 82210568h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221066C;  }
		/* 82210568h case    2:*/		return 0x8221056C;
		  /* 8221056Ch */ case    3:  		/* lwz R11, <#[R22]> */
		/* 8221056Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 8221056Ch case    3:*/		return 0x82210570;
		  /* 82210570h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82210570h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82210570h case    4:*/		return 0x82210574;
		  /* 82210574h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82210574h case    5:*/		if ( regs.CR[6].eq ) { return 0x82210594;  }
		/* 82210574h case    5:*/		return 0x82210578;
		  /* 82210578h */ case    6:  		/* lis R11, -32252 */
		/* 82210578h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82210578h case    6:*/		return 0x8221057C;
		  /* 8221057Ch */ case    7:  		/* mr R6, R25 */
		/* 8221057Ch case    7:*/		regs.R6 = regs.R25;
		/* 8221057Ch case    7:*/		return 0x82210580;
		  /* 82210580h */ case    8:  		/* addi R5, R11, -6296 */
		/* 82210580h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE768);
		/* 82210580h case    8:*/		return 0x82210584;
		  /* 82210584h */ case    9:  		/* mr R4, R26 */
		/* 82210584h case    9:*/		regs.R4 = regs.R26;
		/* 82210584h case    9:*/		return 0x82210588;
		  /* 82210588h */ case   10:  		/* li R7, 2246 */
		/* 82210588h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8C6);
		/* 82210588h case   10:*/		return 0x8221058C;
		  /* 8221058Ch */ case   11:  		/* li R3, 0 */
		/* 8221058Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221058Ch case   11:*/		return 0x82210590;
		  /* 82210590h */ case   12:  		/* bl -756104 */
		/* 82210590h case   12:*/		regs.LR = 0x82210594; return 0x82157C08;
		/* 82210590h case   12:*/		return 0x82210594;
	}
	return 0x82210594;
} // Block from 82210560h-82210594h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82210594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210594);
		  /* 82210594h */ case    0:  		/* lhz R11, <#[R24]> */
		/* 82210594h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82210594h case    0:*/		return 0x82210598;
		  /* 82210598h */ case    1:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 82210598h case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 82210598h case    1:*/		return 0x8221059C;
		  /* 8221059Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8221059Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221059Ch case    2:*/		return 0x822105A0;
		  /* 822105A0h */ case    3:  		/* bc 12, CR6_EQ, 100 */
		/* 822105A0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82210604;  }
		/* 822105A0h case    3:*/		return 0x822105A4;
		  /* 822105A4h */ case    4:  		/* cmplwi CR6, R11, 2 */
		/* 822105A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 822105A4h case    4:*/		return 0x822105A8;
		  /* 822105A8h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 822105A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82210604;  }
		/* 822105A8h case    5:*/		return 0x822105AC;
		  /* 822105ACh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 822105ACh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822105ACh case    6:*/		return 0x822105B0;
		  /* 822105B0h */ case    7:  		/* bc 12, CR6_EQ, 84 */
		/* 822105B0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82210604;  }
		/* 822105B0h case    7:*/		return 0x822105B4;
		  /* 822105B4h */ case    8:  		/* lhz R11, <#[R21]> */
		/* 822105B4h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 822105B4h case    8:*/		return 0x822105B8;
		  /* 822105B8h */ case    9:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 822105B8h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822105B8h case    9:*/		return 0x822105BC;
		  /* 822105BCh */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 822105BCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822105BCh case   10:*/		return 0x822105C0;
		  /* 822105C0h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 822105C0h case   11:*/		if ( regs.CR[6].eq ) { return 0x822105E0;  }
		/* 822105C0h case   11:*/		return 0x822105C4;
		  /* 822105C4h */ case   12:  		/* lis R11, -32252 */
		/* 822105C4h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822105C4h case   12:*/		return 0x822105C8;
		  /* 822105C8h */ case   13:  		/* mr R6, R25 */
		/* 822105C8h case   13:*/		regs.R6 = regs.R25;
		/* 822105C8h case   13:*/		return 0x822105CC;
		  /* 822105CCh */ case   14:  		/* addi R5, R11, -6340 */
		/* 822105CCh case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE73C);
		/* 822105CCh case   14:*/		return 0x822105D0;
		  /* 822105D0h */ case   15:  		/* mr R4, R26 */
		/* 822105D0h case   15:*/		regs.R4 = regs.R26;
		/* 822105D0h case   15:*/		return 0x822105D4;
		  /* 822105D4h */ case   16:  		/* li R7, 2253 */
		/* 822105D4h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x8CD);
		/* 822105D4h case   16:*/		return 0x822105D8;
		  /* 822105D8h */ case   17:  		/* li R3, 0 */
		/* 822105D8h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822105D8h case   17:*/		return 0x822105DC;
		  /* 822105DCh */ case   18:  		/* bl -756180 */
		/* 822105DCh case   18:*/		regs.LR = 0x822105E0; return 0x82157C08;
		/* 822105DCh case   18:*/		return 0x822105E0;
	}
	return 0x822105E0;
} // Block from 82210594h-822105E0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 822105E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822105E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822105E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822105E0);
		  /* 822105E0h */ case    0:  		/* rlwinm R11, R30, 3, 0, 28 */
		/* 822105E0h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R30);
		/* 822105E0h case    0:*/		return 0x822105E4;
		  /* 822105E4h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 822105E4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 822105E4h case    1:*/		return 0x822105E8;
		  /* 822105E8h */ case    2:  		/* li R9, 64 */
		/* 822105E8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 822105E8h case    2:*/		return 0x822105EC;
		  /* 822105ECh */ case    3:  		/* slw R11, R9, R11 */
		/* 822105ECh case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 822105ECh case    3:*/		return 0x822105F0;
		  /* 822105F0h */ case    4:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 822105F0h case    4:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 822105F0h case    4:*/		return 0x822105F4;
		  /* 822105F4h */ case    5:  		/* or R11, R11, R10 */
		/* 822105F4h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822105F4h case    5:*/		return 0x822105F8;
		  /* 822105F8h */ case    6:  		/* rlwimi R11, R10, 0, 24, 31 */
		/* 822105F8h case    6:*/		cpu::op::rlwimi<0,0,24,31>(regs,&regs.R11,regs.R10);
		/* 822105F8h case    6:*/		return 0x822105FC;
		  /* 822105FCh */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 822105FCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822105FCh case    7:*/		return 0x82210600;
		  /* 82210600h */ case    8:  		/* b 108 */
		/* 82210600h case    8:*/		return 0x8221066C;
		/* 82210600h case    8:*/		return 0x82210604;
	}
	return 0x82210604;
} // Block from 822105E0h-82210604h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82210604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210604);
		  /* 82210604h */ case    0:  		/* lhz R11, <#[R21]> */
		/* 82210604h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 82210604h case    0:*/		return 0x82210608;
		  /* 82210608h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82210608h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82210608h case    1:*/		return 0x8221060C;
		  /* 8221060Ch */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221060Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221060Ch case    2:*/		return 0x82210610;
		  /* 82210610h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82210610h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8221061C;  }
		/* 82210610h case    3:*/		return 0x82210614;
		  /* 82210614h */ case    4:  		/* ori R11, R11, 4 */
		/* 82210614h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210614h case    4:*/		return 0x82210618;
		  /* 82210618h */ case    5:  		/* b 8 */
		/* 82210618h case    5:*/		return 0x82210620;
		/* 82210618h case    5:*/		return 0x8221061C;
	}
	return 0x8221061C;
} // Block from 82210604h-8221061Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221061Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221061C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221061C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221061C);
		  /* 8221061Ch */ case    0:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 8221061Ch case    0:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 8221061Ch case    0:*/		return 0x82210620;
	}
	return 0x82210620;
} // Block from 8221061Ch-82210620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210620);
		  /* 82210620h */ case    0:  		/* stw R11, <#[R31 + 4]> */
		/* 82210620h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210620h case    0:*/		return 0x82210624;
		  /* 82210624h */ case    1:  		/* cmplwi CR6, R30, 1 */
		/* 82210624h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 82210624h case    1:*/		return 0x82210628;
		  /* 82210628h */ case    2:  		/* bc 12, CR6_LT, 76 */
		/* 82210628h case    2:*/		if ( regs.CR[6].lt ) { return 0x82210674;  }
		/* 82210628h case    2:*/		return 0x8221062C;
		  /* 8221062Ch */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 8221062Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82210654;  }
		/* 8221062Ch case    3:*/		return 0x82210630;
		  /* 82210630h */ case    4:  		/* cmplwi CR6, R30, 3 */
		/* 82210630h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 82210630h case    4:*/		return 0x82210634;
		  /* 82210634h */ case    5:  		/* bc 12, CR6_LT, 84 */
		/* 82210634h case    5:*/		if ( regs.CR[6].lt ) { return 0x82210688;  }
		/* 82210634h case    5:*/		return 0x82210638;
		  /* 82210638h */ case    6:  		/* mr R6, R25 */
		/* 82210638h case    6:*/		regs.R6 = regs.R25;
		/* 82210638h case    6:*/		return 0x8221063C;
		  /* 8221063Ch */ case    7:  		/* mr R5, R23 */
		/* 8221063Ch case    7:*/		regs.R5 = regs.R23;
		/* 8221063Ch case    7:*/		return 0x82210640;
		  /* 82210640h */ case    8:  		/* mr R4, R26 */
		/* 82210640h case    8:*/		regs.R4 = regs.R26;
		/* 82210640h case    8:*/		return 0x82210644;
		  /* 82210644h */ case    9:  		/* li R7, 2302 */
		/* 82210644h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x8FE);
		/* 82210644h case    9:*/		return 0x82210648;
		  /* 82210648h */ case   10:  		/* li R3, 0 */
		/* 82210648h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82210648h case   10:*/		return 0x8221064C;
		  /* 8221064Ch */ case   11:  		/* bl -756292 */
		/* 8221064Ch case   11:*/		regs.LR = 0x82210650; return 0x82157C08;
		/* 8221064Ch case   11:*/		return 0x82210650;
		  /* 82210650h */ case   12:  		/* b 56 */
		/* 82210650h case   12:*/		return 0x82210688;
		/* 82210650h case   12:*/		return 0x82210654;
	}
	return 0x82210654;
} // Block from 82210620h-82210654h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82210654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210654);
		  /* 82210654h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82210654h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82210654h case    0:*/		return 0x82210658;
		  /* 82210658h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82210658h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82210658h case    1:*/		return 0x8221065C;
		  /* 8221065Ch */ case    2:  		/* bc 4, CR0_EQ, 44 */
		/* 8221065Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82210688;  }
		/* 8221065Ch case    2:*/		return 0x82210660;
		  /* 82210660h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 82210660h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210660h case    3:*/		return 0x82210664;
		  /* 82210664h */ case    4:  		/* ori R11, R11, 2 */
		/* 82210664h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82210664h case    4:*/		return 0x82210668;
		  /* 82210668h */ case    5:  		/* stw R11, <#[R31 + 4]> */
		/* 82210668h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210668h case    5:*/		return 0x8221066C;
	}
	return 0x8221066C;
} // Block from 82210654h-8221066Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221066Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221066C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221066C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221066C);
		  /* 8221066Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 8221066Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8221066Ch case    0:*/		return 0x82210670;
		  /* 82210670h */ case    1:  		/* b -1569764 */
		/* 82210670h case    1:*/		return 0x8209128C;
		/* 82210670h case    1:*/		return 0x82210674;
	}
	return 0x82210674;
} // Block from 8221066Ch-82210674h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82210674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210674);
		  /* 82210674h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82210674h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82210674h case    0:*/		return 0x82210678;
		  /* 82210678h */ case    1:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 82210678h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 82210678h case    1:*/		return 0x8221067C;
		  /* 8221067Ch */ case    2:  		/* bc 12, CR0_EQ, -28 */
		/* 8221067Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82210660;  }
		/* 8221067Ch case    2:*/		return 0x82210680;
		  /* 82210680h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82210680h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82210680h case    3:*/		return 0x82210684;
		  /* 82210684h */ case    4:  		/* bc 12, CR0_EQ, -36 */
		/* 82210684h case    4:*/		if ( regs.CR[0].eq ) { return 0x82210660;  }
		/* 82210684h case    4:*/		return 0x82210688;
	}
	return 0x82210688;
} // Block from 82210674h-82210688h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82210688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210688);
		  /* 82210688h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82210688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82210688h case    0:*/		return 0x8221068C;
		  /* 8221068Ch */ case    1:  		/* ori R11, R11, 1 */
		/* 8221068Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221068Ch case    1:*/		return 0x82210690;
		  /* 82210690h */ case    2:  		/* b -40 */
		/* 82210690h case    2:*/		return 0x82210668;
		/* 82210690h case    2:*/		return 0x82210694;
		  /* 82210694h */ case    3:  		/* nop */
		/* 82210694h case    3:*/		cpu::op::nop();
		/* 82210694h case    3:*/		return 0x82210698;
		  /* 82210698h */ case    4:  		/* li R9, 65 */
		/* 82210698h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x41);
		/* 82210698h case    4:*/		return 0x8221069C;
		  /* 8221069Ch */ case    5:  		/* addi R10, R4, 4 */
		/* 8221069Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x4);
		/* 8221069Ch case    5:*/		return 0x822106A0;
		  /* 822106A0h */ case    6:  		/* sth R9, <#[R4 + 2]> */
		/* 822106A0h case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R4 + 0x00000002) );
		/* 822106A0h case    6:*/		return 0x822106A4;
		  /* 822106A4h */ case    7:  		/* mr R11, R3 */
		/* 822106A4h case    7:*/		regs.R11 = regs.R3;
		/* 822106A4h case    7:*/		return 0x822106A8;
		  /* 822106A8h */ case    8:  		/* lwz R9, <#[R4]> */
		/* 822106A8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 822106A8h case    8:*/		return 0x822106AC;
		  /* 822106ACh */ case    9:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 822106ACh case    9:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 822106ACh case    9:*/		return 0x822106B0;
		  /* 822106B0h */ case   10:  		/* stw R9, <#[R4]> */
		/* 822106B0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 822106B0h case   10:*/		return 0x822106B4;
		  /* 822106B4h */ case   11:  		/* addi R10, R10, 4 */
		/* 822106B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822106B4h case   11:*/		return 0x822106B8;
		  /* 822106B8h */ case   12:  		/* lwz R9, <#[R3 + 4]> */
		/* 822106B8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 822106B8h case   12:*/		return 0x822106BC;
		  /* 822106BCh */ case   13:  		/* sth R9, <#[R4 + 6]> */
		/* 822106BCh case   13:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R4 + 0x00000006) );
		/* 822106BCh case   13:*/		return 0x822106C0;
		  /* 822106C0h */ case   14:  		/* lwz R9, <#[R4 + 4]> */
		/* 822106C0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 822106C0h case   14:*/		return 0x822106C4;
		  /* 822106C4h */ case   15:  		/* lwz R8, <#[R3 + 4]> */
		/* 822106C4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000004) );
		/* 822106C4h case   15:*/		return 0x822106C8;
		  /* 822106C8h */ case   16:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 822106C8h case   16:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 822106C8h case   16:*/		return 0x822106CC;
		  /* 822106CCh */ case   17:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822106CCh case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822106CCh case   17:*/		return 0x822106D0;
		  /* 822106D0h */ case   18:  		/* stw R8, <#[R4 + 4]> */
		/* 822106D0h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + 0x00000004) );
		/* 822106D0h case   18:*/		return 0x822106D4;
		  /* 822106D4h */ case   19:  		/* lwz R8, <#[R3 + 4]> */
		/* 822106D4h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000004) );
		/* 822106D4h case   19:*/		return 0x822106D8;
		  /* 822106D8h */ case   20:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 822106D8h case   20:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 822106D8h case   20:*/		return 0x822106DC;
		  /* 822106DCh */ case   21:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822106DCh case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822106DCh case   21:*/		return 0x822106E0;
		  /* 822106E0h */ case   22:  		/* stw R8, <#[R4 + 4]> */
		/* 822106E0h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + 0x00000004) );
		/* 822106E0h case   22:*/		return 0x822106E4;
		  /* 822106E4h */ case   23:  		/* lwz R8, <#[R3 + 4]> */
		/* 822106E4h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000004) );
		/* 822106E4h case   23:*/		return 0x822106E8;
		  /* 822106E8h */ case   24:  		/* rlwimi R8, R9, 0, 10, 8 */
		/* 822106E8h case   24:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R8,regs.R9);
		/* 822106E8h case   24:*/		return 0x822106EC;
		  /* 822106ECh */ case   25:  		/* stw R8, <#[R4 + 4]> */
		/* 822106ECh case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + 0x00000004) );
		/* 822106ECh case   25:*/		return 0x822106F0;
		  /* 822106F0h */ case   26:  		/* lwz R9, <#[R3 + 4]> */
		/* 822106F0h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 822106F0h case   26:*/		return 0x822106F4;
		  /* 822106F4h */ case   27:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 822106F4h case   27:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 822106F4h case   27:*/		return 0x822106F8;
		  /* 822106F8h */ case   28:  		/* bc 12, CR0_EQ, 16 */
		/* 822106F8h case   28:*/		if ( regs.CR[0].eq ) { return 0x82210708;  }
		/* 822106F8h case   28:*/		return 0x822106FC;
		  /* 822106FCh */ case   29:  		/* lwz R9, <#[R3 + 8]> */
		/* 822106FCh case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 822106FCh case   29:*/		return 0x82210700;
		  /* 82210700h */ case   30:  		/* stw R9, <#[R10]> */
		/* 82210700h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210700h case   30:*/		return 0x82210704;
		  /* 82210704h */ case   31:  		/* addi R10, R10, 4 */
		/* 82210704h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82210704h case   31:*/		return 0x82210708;
	}
	return 0x82210708;
} // Block from 82210688h-82210708h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82210708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210708);
		  /* 82210708h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 82210708h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82210708h case    0:*/		return 0x8221070C;
		  /* 8221070Ch */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 8221070Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 8221070Ch case    1:*/		return 0x82210710;
		  /* 82210710h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82210710h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210720;  }
		/* 82210710h case    2:*/		return 0x82210714;
		  /* 82210714h */ case    3:  		/* lwz R9, <#[R11 + 12]> */
		/* 82210714h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82210714h case    3:*/		return 0x82210718;
		  /* 82210718h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82210718h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210718h case    4:*/		return 0x8221071C;
		  /* 8221071Ch */ case    5:  		/* addi R10, R10, 4 */
		/* 8221071Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221071Ch case    5:*/		return 0x82210720;
	}
	return 0x82210720;
} // Block from 82210708h-82210720h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210720);
		  /* 82210720h */ case    0:  		/* lwz R9, <#[R11 + 16]> */
		/* 82210720h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82210720h case    0:*/		return 0x82210724;
		  /* 82210724h */ case    1:  		/* sth R9, <#[R10 + 2]> */
		/* 82210724h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82210724h case    1:*/		return 0x82210728;
		  /* 82210728h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 82210728h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210728h case    2:*/		return 0x8221072C;
		  /* 8221072Ch */ case    3:  		/* lwz R8, <#[R11 + 16]> */
		/* 8221072Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8221072Ch case    3:*/		return 0x82210730;
		  /* 82210730h */ case    4:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82210730h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82210730h case    4:*/		return 0x82210734;
		  /* 82210734h */ case    5:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210734h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210734h case    5:*/		return 0x82210738;
		  /* 82210738h */ case    6:  		/* stw R8, <#[R10]> */
		/* 82210738h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82210738h case    6:*/		return 0x8221073C;
		  /* 8221073Ch */ case    7:  		/* lwz R8, <#[R11 + 16]> */
		/* 8221073Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8221073Ch case    7:*/		return 0x82210740;
		  /* 82210740h */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82210740h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82210740h case    8:*/		return 0x82210744;
		  /* 82210744h */ case    9:  		/* oris R9, R8, 64 */
		/* 82210744h case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82210744h case    9:*/		return 0x82210748;
		  /* 82210748h */ case   10:  		/* stw R9, <#[R10]> */
		/* 82210748h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210748h case   10:*/		return 0x8221074C;
		  /* 8221074Ch */ case   11:  		/* lwzu R9, <#[R10 + 4]> */
		/* 8221074Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221074Ch case   11:*/		return 0x82210750;
		  /* 82210750h */ case   12:  		/* lwz R8, <#[R11 + 28]> */
		/* 82210750h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 82210750h case   12:*/		return 0x82210754;
		  /* 82210754h */ case   13:  		/* rlwimi R9, R8, 0, 29, 31 */
		/* 82210754h case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R9,regs.R8);
		/* 82210754h case   13:*/		return 0x82210758;
		  /* 82210758h */ case   14:  		/* stw R9, <#[R10]> */
		/* 82210758h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210758h case   14:*/		return 0x8221075C;
		  /* 8221075Ch */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8221075Ch case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8221075Ch case   15:*/		return 0x82210760;
		  /* 82210760h */ case   16:  		/* lwz R8, <#[R11 + 28]> */
		/* 82210760h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 82210760h case   16:*/		return 0x82210764;
		  /* 82210764h */ case   17:  		/* rlwimi R9, R8, 0, 25, 27 */
		/* 82210764h case   17:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R9,regs.R8);
		/* 82210764h case   17:*/		return 0x82210768;
		  /* 82210768h */ case   18:  		/* stw R9, <#[R10]> */
		/* 82210768h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210768h case   18:*/		return 0x8221076C;
		  /* 8221076Ch */ case   19:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8221076Ch case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8221076Ch case   19:*/		return 0x82210770;
		  /* 82210770h */ case   20:  		/* lwz R8, <#[R11 + 28]> */
		/* 82210770h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 82210770h case   20:*/		return 0x82210774;
		  /* 82210774h */ case   21:  		/* rlwimi R9, R8, 0, 21, 23 */
		/* 82210774h case   21:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R9,regs.R8);
		/* 82210774h case   21:*/		return 0x82210778;
		  /* 82210778h */ case   22:  		/* stw R9, <#[R10]> */
		/* 82210778h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210778h case   22:*/		return 0x8221077C;
		  /* 8221077Ch */ case   23:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8221077Ch case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8221077Ch case   23:*/		return 0x82210780;
		  /* 82210780h */ case   24:  		/* lwz R8, <#[R11 + 28]> */
		/* 82210780h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 82210780h case   24:*/		return 0x82210784;
		  /* 82210784h */ case   25:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 82210784h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 82210784h case   25:*/		return 0x82210788;
		  /* 82210788h */ case   26:  		/* stw R8, <#[R10]> */
		/* 82210788h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82210788h case   26:*/		return 0x8221078C;
		  /* 8221078Ch */ case   27:  		/* addi R10, R10, 4 */
		/* 8221078Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221078Ch case   27:*/		return 0x82210790;
		  /* 82210790h */ case   28:  		/* lwz R9, <#[R11 + 16]> */
		/* 82210790h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82210790h case   28:*/		return 0x82210794;
		  /* 82210794h */ case   29:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210794h case   29:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210794h case   29:*/		return 0x82210798;
		  /* 82210798h */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 82210798h case   30:*/		if ( regs.CR[0].eq ) { return 0x822107A8;  }
		/* 82210798h case   30:*/		return 0x8221079C;
		  /* 8221079Ch */ case   31:  		/* lwz R9, <#[R11 + 40]> */
		/* 8221079Ch case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 8221079Ch case   31:*/		return 0x822107A0;
		  /* 822107A0h */ case   32:  		/* stw R9, <#[R10]> */
		/* 822107A0h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822107A0h case   32:*/		return 0x822107A4;
		  /* 822107A4h */ case   33:  		/* addi R10, R10, 4 */
		/* 822107A4h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822107A4h case   33:*/		return 0x822107A8;
	}
	return 0x822107A8;
} // Block from 82210720h-822107A8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 822107A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822107A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822107A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822107A8);
		  /* 822107A8h */ case    0:  		/* lwz R9, <#[R11 + 16]> */
		/* 822107A8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 822107A8h case    0:*/		return 0x822107AC;
		  /* 822107ACh */ case    1:  		/* sth R9, <#[R10 + 2]> */
		/* 822107ACh case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 822107ACh case    1:*/		return 0x822107B0;
		  /* 822107B0h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 822107B0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822107B0h case    2:*/		return 0x822107B4;
		  /* 822107B4h */ case    3:  		/* lwz R8, <#[R11 + 16]> */
		/* 822107B4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 822107B4h case    3:*/		return 0x822107B8;
		  /* 822107B8h */ case    4:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 822107B8h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 822107B8h case    4:*/		return 0x822107BC;
		  /* 822107BCh */ case    5:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822107BCh case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822107BCh case    5:*/		return 0x822107C0;
		  /* 822107C0h */ case    6:  		/* stw R8, <#[R10]> */
		/* 822107C0h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 822107C0h case    6:*/		return 0x822107C4;
		  /* 822107C4h */ case    7:  		/* lwz R8, <#[R11 + 16]> */
		/* 822107C4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 822107C4h case    7:*/		return 0x822107C8;
		  /* 822107C8h */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 822107C8h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 822107C8h case    8:*/		return 0x822107CC;
		  /* 822107CCh */ case    9:  		/* oris R9, R8, 64 */
		/* 822107CCh case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 822107CCh case    9:*/		return 0x822107D0;
		  /* 822107D0h */ case   10:  		/* stw R9, <#[R10]> */
		/* 822107D0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822107D0h case   10:*/		return 0x822107D4;
		  /* 822107D4h */ case   11:  		/* lwz R9, <#[R11 + 28]> */
		/* 822107D4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 822107D4h case   11:*/		return 0x822107D8;
		  /* 822107D8h */ case   12:  		/* lwzu R8, <#[R10 + 4]> */
		/* 822107D8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 822107D8h case   12:*/		return 0x822107DC;
		  /* 822107DCh */ case   13:  		/* rlwimi R8, R9, 0, 29, 31 */
		/* 822107DCh case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R9);
		/* 822107DCh case   13:*/		return 0x822107E0;
		  /* 822107E0h */ case   14:  		/* stw R8, <#[R10]> */
		/* 822107E0h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 822107E0h case   14:*/		return 0x822107E4;
		  /* 822107E4h */ case   15:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822107E4h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822107E4h case   15:*/		return 0x822107E8;
		  /* 822107E8h */ case   16:  		/* addi R3, R10, 4 */
		/* 822107E8h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0x4);
		/* 822107E8h case   16:*/		return 0x822107EC;
		  /* 822107ECh */ case   17:  		/* lwz R8, <#[R11 + 28]> */
		/* 822107ECh case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 822107ECh case   17:*/		return 0x822107F0;
		  /* 822107F0h */ case   18:  		/* rlwimi R9, R8, 0, 25, 27 */
		/* 822107F0h case   18:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R9,regs.R8);
		/* 822107F0h case   18:*/		return 0x822107F4;
		  /* 822107F4h */ case   19:  		/* stw R9, <#[R10]> */
		/* 822107F4h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822107F4h case   19:*/		return 0x822107F8;
		  /* 822107F8h */ case   20:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822107F8h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822107F8h case   20:*/		return 0x822107FC;
		  /* 822107FCh */ case   21:  		/* lwz R8, <#[R11 + 28]> */
		/* 822107FCh case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 822107FCh case   21:*/		return 0x82210800;
		  /* 82210800h */ case   22:  		/* rlwimi R9, R8, 0, 21, 23 */
		/* 82210800h case   22:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R9,regs.R8);
		/* 82210800h case   22:*/		return 0x82210804;
		  /* 82210804h */ case   23:  		/* stw R9, <#[R10]> */
		/* 82210804h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210804h case   23:*/		return 0x82210808;
		  /* 82210808h */ case   24:  		/* lwz R8, <#[R10]> */
		/* 82210808h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82210808h case   24:*/		return 0x8221080C;
		  /* 8221080Ch */ case   25:  		/* lwz R9, <#[R11 + 28]> */
		/* 8221080Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 8221080Ch case   25:*/		return 0x82210810;
		  /* 82210810h */ case   26:  		/* rlwimi R9, R8, 0, 20, 16 */
		/* 82210810h case   26:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R8);
		/* 82210810h case   26:*/		return 0x82210814;
		  /* 82210814h */ case   27:  		/* ori R9, R9, 34952 */
		/* 82210814h case   27:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8888);
		/* 82210814h case   27:*/		return 0x82210818;
		  /* 82210818h */ case   28:  		/* stw R9, <#[R10]> */
		/* 82210818h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82210818h case   28:*/		return 0x8221081C;
		  /* 8221081Ch */ case   29:  		/* lwz R10, <#[R11 + 16]> */
		/* 8221081Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8221081Ch case   29:*/		return 0x82210820;
		  /* 82210820h */ case   30:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82210820h case   30:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82210820h case   30:*/		return 0x82210824;
		  /* 82210824h */ case   31:  		/* bclr 12, CR0_EQ */
		/* 82210824h case   31:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82210824h case   31:*/		return 0x82210828;
	}
	return 0x82210828;
} // Block from 822107A8h-82210828h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82210828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210828);
		  /* 82210828h */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 82210828h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82210828h case    0:*/		return 0x8221082C;
		  /* 8221082Ch */ case    1:  		/* stw R11, <#[R3]> */
		/* 8221082Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221082Ch case    1:*/		return 0x82210830;
		  /* 82210830h */ case    2:  		/* addi R3, R3, 4 */
		/* 82210830h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82210830h case    2:*/		return 0x82210834;
		  /* 82210834h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82210834h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82210834h case    3:*/		return 0x82210838;
	}
	return 0x82210838;
} // Block from 82210828h-82210838h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82210838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210838);
		  /* 82210838h */ case    0:  		/* mfspr R12, LR */
		/* 82210838h case    0:*/		regs.R12 = regs.LR;
		/* 82210838h case    0:*/		return 0x8221083C;
		  /* 8221083Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221083Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221083Ch case    1:*/		return 0x82210840;
		  /* 82210840h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82210840h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82210840h case    2:*/		return 0x82210844;
		  /* 82210844h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82210844h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82210844h case    3:*/		return 0x82210848;
		  /* 82210848h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82210848h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82210848h case    4:*/		return 0x8221084C;
		  /* 8221084Ch */ case    5:  		/* mr R31, R4 */
		/* 8221084Ch case    5:*/		regs.R31 = regs.R4;
		/* 8221084Ch case    5:*/		return 0x82210850;
		  /* 82210850h */ case    6:  		/* mr R30, R5 */
		/* 82210850h case    6:*/		regs.R30 = regs.R5;
		/* 82210850h case    6:*/		return 0x82210854;
		  /* 82210854h */ case    7:  		/* bl -5676 */
		/* 82210854h case    7:*/		regs.LR = 0x82210858; return 0x8220F228;
		/* 82210854h case    7:*/		return 0x82210858;
		  /* 82210858h */ case    8:  		/* li R6, 3 */
		/* 82210858h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82210858h case    8:*/		return 0x8221085C;
		  /* 8221085Ch */ case    9:  		/* lwz R10, <#[R31]> */
		/* 8221085Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221085Ch case    9:*/		return 0x82210860;
		  /* 82210860h */ case   10:  		/* rlwinm R5, R3, 0, 16, 31 */
		/* 82210860h case   10:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R3);
		/* 82210860h case   10:*/		return 0x82210864;
		  /* 82210864h */ case   11:  		/* sth R6, <#[R30 + 2]> */
		/* 82210864h case   11:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R30 + 0x00000002) );
		/* 82210864h case   11:*/		return 0x82210868;
		  /* 82210868h */ case   12:  		/* li R7, 1 */
		/* 82210868h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82210868h case   12:*/		return 0x8221086C;
		  /* 8221086Ch */ case   13:  		/* lwz R11, <#[R30]> */
		/* 8221086Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221086Ch case   13:*/		return 0x82210870;
		  /* 82210870h */ case   14:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82210870h case   14:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82210870h case   14:*/		return 0x82210874;
		  /* 82210874h */ case   15:  		/* stw R11, <#[R30]> */
		/* 82210874h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82210874h case   15:*/		return 0x82210878;
		  /* 82210878h */ case   16:  		/* addi R11, R30, 4 */
		/* 82210878h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82210878h case   16:*/		return 0x8221087C;
		  /* 8221087Ch */ case   17:  		/* sth R5, <#[R30 + 6]> */
		/* 8221087Ch case   17:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R30 + 0x00000006) );
		/* 8221087Ch case   17:*/		return 0x82210880;
		  /* 82210880h */ case   18:  		/* rlwinm R9, R10, 10, 29, 31 */
		/* 82210880h case   18:*/		cpu::op::rlwinm<0,10,29,31>(regs,&regs.R9,regs.R10);
		/* 82210880h case   18:*/		return 0x82210884;
		  /* 82210884h */ case   19:  		/* lwz R8, <#[R30 + 4]> */
		/* 82210884h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82210884h case   19:*/		return 0x82210888;
		  /* 82210888h */ case   20:  		/* rlwimi R8, R7, 18, 8, 15 */
		/* 82210888h case   20:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R7);
		/* 82210888h case   20:*/		return 0x8221088C;
		  /* 8221088Ch */ case   21:  		/* stw R8, <#[R30 + 4]> */
		/* 8221088Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 8221088Ch case   21:*/		return 0x82210890;
		  /* 82210890h */ case   22:  		/* rlwinm R8, R10, 16, 29, 31 */
		/* 82210890h case   22:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R8,regs.R10);
		/* 82210890h case   22:*/		return 0x82210894;
		  /* 82210894h */ case   23:  		/* lwz R4, <#[R31 + 16]> */
		/* 82210894h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82210894h case   23:*/		return 0x82210898;
		  /* 82210898h */ case   24:  		/* li R10, 0 */
		/* 82210898h case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82210898h case   24:*/		return 0x8221089C;
		  /* 8221089Ch */ case   25:  		/* stwu R4, <#[R11 + 4]> */
		/* 8221089Ch case   25:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221089Ch case   25:*/		return 0x822108A0;
		  /* 822108A0h */ case   26:  		/* lwz R4, <#[R31 + 16]> */
		/* 822108A0h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 822108A0h case   26:*/		return 0x822108A4;
		  /* 822108A4h */ case   27:  		/* rlwinm. R4, R4, 0, 9, 9 */
		/* 822108A4h case   27:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R4,regs.R4);
		/* 822108A4h case   27:*/		return 0x822108A8;
		  /* 822108A8h */ case   28:  		/* addi R11, R11, 4 */
		/* 822108A8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822108A8h case   28:*/		return 0x822108AC;
		  /* 822108ACh */ case   29:  		/* bc 12, CR0_EQ, 16 */
		/* 822108ACh case   29:*/		if ( regs.CR[0].eq ) { return 0x822108BC;  }
		/* 822108ACh case   29:*/		return 0x822108B0;
		  /* 822108B0h */ case   30:  		/* lwz R4, <#[R31 + 28]> */
		/* 822108B0h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822108B0h case   30:*/		return 0x822108B4;
		  /* 822108B4h */ case   31:  		/* stw R4, <#[R11]> */
		/* 822108B4h case   31:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822108B4h case   31:*/		return 0x822108B8;
	}
	return 0x822108B8;
} // Block from 82210838h-822108B8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 822108B8h
// Function '?SetDst@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PATIL_Dst@1@PATIL_Dst_Mod@1@PATIL_Rel_Addr@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822108B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822108B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822108B8);
		  /* 822108B8h */ case    0:  		/* addi R11, R11, 4 */
		/* 822108B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822108B8h case    0:*/		return 0x822108BC;
	}
	return 0x822108BC;
} // Block from 822108B8h-822108BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822108BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822108BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822108BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822108BC);
		  /* 822108BCh */ case    0:  		/* lwz R4, <#[R31 + 16]> */
		/* 822108BCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 822108BCh case    0:*/		return 0x822108C0;
		  /* 822108C0h */ case    1:  		/* rlwinm. R4, R4, 0, 8, 8 */
		/* 822108C0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R4,regs.R4);
		/* 822108C0h case    1:*/		return 0x822108C4;
		  /* 822108C4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822108C4h case    2:*/		if ( regs.CR[0].eq ) { return 0x822108D4;  }
		/* 822108C4h case    2:*/		return 0x822108C8;
		  /* 822108C8h */ case    3:  		/* lwz R4, <#[R31 + 40]> */
		/* 822108C8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 822108C8h case    3:*/		return 0x822108CC;
		  /* 822108CCh */ case    4:  		/* stw R4, <#[R11]> */
		/* 822108CCh case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822108CCh case    4:*/		return 0x822108D0;
		  /* 822108D0h */ case    5:  		/* addi R11, R11, 4 */
		/* 822108D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822108D0h case    5:*/		return 0x822108D4;
	}
	return 0x822108D4;
} // Block from 822108BCh-822108D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822108D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822108D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822108D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822108D4);
		  /* 822108D4h */ case    0:  		/* cmplwi CR6, R9, 1 */
		/* 822108D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 822108D4h case    0:*/		return 0x822108D8;
		  /* 822108D8h */ case    1:  		/* bc 12, CR6_LT, 44 */
		/* 822108D8h case    1:*/		if ( regs.CR[6].lt ) { return 0x82210904;  }
		/* 822108D8h case    1:*/		return 0x822108DC;
		  /* 822108DCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 822108DCh case    2:*/		if ( regs.CR[6].eq ) { return 0x822108FC;  }
		/* 822108DCh case    2:*/		return 0x822108E0;
		  /* 822108E0h */ case    3:  		/* cmplwi CR6, R9, 3 */
		/* 822108E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 822108E0h case    3:*/		return 0x822108E4;
		  /* 822108E4h */ case    4:  		/* bc 12, CR6_LT, 16 */
		/* 822108E4h case    4:*/		if ( regs.CR[6].lt ) { return 0x822108F4;  }
		/* 822108E4h case    4:*/		return 0x822108E8;
		  /* 822108E8h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 822108E8h case    5:*/		if ( regs.CR[6].eq ) { return 0x822108FC;  }
		/* 822108E8h case    5:*/		return 0x822108EC;
		  /* 822108ECh */ case    6:  		/* cmplwi CR6, R9, 5 */
		/* 822108ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 822108ECh case    6:*/		return 0x822108F0;
		  /* 822108F0h */ case    7:  		/* bc 4, CR6_LT, 24 */
		/* 822108F0h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82210908;  }
		/* 822108F0h case    7:*/		return 0x822108F4;
	}
	return 0x822108F4;
} // Block from 822108D4h-822108F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822108F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822108F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822108F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822108F4);
		  /* 822108F4h */ case    0:  		/* mr R10, R7 */
		/* 822108F4h case    0:*/		regs.R10 = regs.R7;
		/* 822108F4h case    0:*/		return 0x822108F8;
		  /* 822108F8h */ case    1:  		/* b 16 */
		/* 822108F8h case    1:*/		return 0x82210908;
		/* 822108F8h case    1:*/		return 0x822108FC;
	}
	return 0x822108FC;
} // Block from 822108F4h-822108FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822108FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822108FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822108FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822108FC);
		  /* 822108FCh */ case    0:  		/* li R10, 2 */
		/* 822108FCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 822108FCh case    0:*/		return 0x82210900;
		  /* 82210900h */ case    1:  		/* b 8 */
		/* 82210900h case    1:*/		return 0x82210908;
		/* 82210900h case    1:*/		return 0x82210904;
	}
	return 0x82210904;
} // Block from 822108FCh-82210904h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82210904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210904);
		  /* 82210904h */ case    0:  		/* li R10, 0 */
		/* 82210904h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82210904h case    0:*/		return 0x82210908;
	}
	return 0x82210908;
} // Block from 82210904h-82210908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210908);
		  /* 82210908h */ case    0:  		/* li R4, 0 */
		/* 82210908h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82210908h case    0:*/		return 0x8221090C;
		  /* 8221090Ch */ case    1:  		/* li R3, 65 */
		/* 8221090Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x41);
		/* 8221090Ch case    1:*/		return 0x82210910;
		  /* 82210910h */ case    2:  		/* sth R4, <#[R11 + 2]> */
		/* 82210910h case    2:*/		cpu::mem::store16( regs, regs.R4, (uint32)(regs.R11 + 0x00000002) );
		/* 82210910h case    2:*/		return 0x82210914;
		  /* 82210914h */ case    3:  		/* cmplwi CR6, R9, 3 */
		/* 82210914h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 82210914h case    3:*/		return 0x82210918;
		  /* 82210918h */ case    4:  		/* lwz R30, <#[R11]> */
		/* 82210918h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82210918h case    4:*/		return 0x8221091C;
		  /* 8221091Ch */ case    5:  		/* rlwimi R30, R3, 16, 8, 15 */
		/* 8221091Ch case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R30,regs.R3);
		/* 8221091Ch case    5:*/		return 0x82210920;
		  /* 82210920h */ case    6:  		/* stw R30, <#[R11]> */
		/* 82210920h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82210920h case    6:*/		return 0x82210924;
		  /* 82210924h */ case    7:  		/* rlwinm R4, R10, 0, 29, 31 */
		/* 82210924h case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R4,regs.R10);
		/* 82210924h case    7:*/		return 0x82210928;
		  /* 82210928h */ case    8:  		/* stb R7, <#[R11]> */
		/* 82210928h case    8:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82210928h case    8:*/		return 0x8221092C;
		  /* 8221092Ch */ case    9:  		/* lwzu R9, <#[R11 + 4]> */
		/* 8221092Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221092Ch case    9:*/		return 0x82210930;
		  /* 82210930h */ case   10:  		/* rlwinm R9, R9, 0, 0, 28 */
		/* 82210930h case   10:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R9,regs.R9);
		/* 82210930h case   10:*/		return 0x82210934;
		  /* 82210934h */ case   11:  		/* or R9, R9, R4 */
		/* 82210934h case   11:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82210934h case   11:*/		return 0x82210938;
		  /* 82210938h */ case   12:  		/* rlwimi R9, R10, 4, 25, 27 */
		/* 82210938h case   12:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R9,regs.R10);
		/* 82210938h case   12:*/		return 0x8221093C;
		  /* 8221093Ch */ case   13:  		/* rlwimi R9, R10, 8, 21, 23 */
		/* 8221093Ch case   13:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R9,regs.R10);
		/* 8221093Ch case   13:*/		return 0x82210940;
		  /* 82210940h */ case   14:  		/* stw R9, <#[R11]> */
		/* 82210940h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210940h case   14:*/		return 0x82210944;
		  /* 82210944h */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210944h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210944h case   15:*/		return 0x82210948;
		  /* 82210948h */ case   16:  		/* rlwimi R9, R10, 12, 17, 19 */
		/* 82210948h case   16:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R9,regs.R10);
		/* 82210948h case   16:*/		return 0x8221094C;
		  /* 8221094Ch */ case   17:  		/* stw R9, <#[R11]> */
		/* 8221094Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221094Ch case   17:*/		return 0x82210950;
		  /* 82210950h */ case   18:  		/* bc 4, CR6_LT, 12 */
		/* 82210950h case   18:*/		if ( !regs.CR[6].lt ) { return 0x8221095C;  }
		/* 82210950h case   18:*/		return 0x82210954;
		  /* 82210954h */ case   19:  		/* ori R10, R9, 34952 */
		/* 82210954h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R9,0x8888);
		/* 82210954h case   19:*/		return 0x82210958;
		  /* 82210958h */ case   20:  		/* stw R10, <#[R11]> */
		/* 82210958h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210958h case   20:*/		return 0x8221095C;
	}
	return 0x8221095C;
} // Block from 82210908h-8221095Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8221095Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221095C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221095C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221095C);
		  /* 8221095Ch */ case    0:  		/* addi R3, R11, 4 */
		/* 8221095Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 8221095Ch case    0:*/		return 0x82210960;
		  /* 82210960h */ case    1:  		/* cmplwi CR6, R8, 1 */
		/* 82210960h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82210960h case    1:*/		return 0x82210964;
		  /* 82210964h */ case    2:  		/* bc 12, CR6_LT, 20 */
		/* 82210964h case    2:*/		if ( regs.CR[6].lt ) { return 0x82210978;  }
		/* 82210964h case    2:*/		return 0x82210968;
		  /* 82210968h */ case    3:  		/* cmplwi CR6, R8, 4 */
		/* 82210968h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 82210968h case    3:*/		return 0x8221096C;
		  /* 8221096Ch */ case    4:  		/* bc 12, CR6_LT, 40 */
		/* 8221096Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82210994;  }
		/* 8221096Ch case    4:*/		return 0x82210970;
		  /* 82210970h */ case    5:  		/* cmplwi CR6, R8, 6 */
		/* 82210970h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000006);
		/* 82210970h case    5:*/		return 0x82210974;
		  /* 82210974h */ case    6:  		/* bc 4, CR6_LT, 604 */
		/* 82210974h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82210BD0;  }
		/* 82210974h case    6:*/		return 0x82210978;
	}
	return 0x82210978;
} // Block from 8221095Ch-82210978h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82210978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210978);
		  /* 82210978h */ case    0:  		/* li R10, 13 */
		/* 82210978h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xD);
		/* 82210978h case    0:*/		return 0x8221097C;
		  /* 8221097Ch */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 8221097Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8221097Ch case    1:*/		return 0x82210980;
		  /* 82210980h */ case    2:  		/* sth R10, <#[R3 + 2]> */
		/* 82210980h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R3 + 0x00000002) );
		/* 82210980h case    2:*/		return 0x82210984;
		  /* 82210984h */ case    3:  		/* lwz R10, <#[R3]> */
		/* 82210984h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82210984h case    3:*/		return 0x82210988;
		  /* 82210988h */ case    4:  		/* bc 4, CR6_EQ, 212 */
		/* 82210988h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82210A5C;  }
		/* 82210988h case    4:*/		return 0x8221098C;
		  /* 8221098Ch */ case    5:  		/* rlwimi R10, R7, 16, 3, 15 */
		/* 8221098Ch case    5:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R10,regs.R7);
		/* 8221098Ch case    5:*/		return 0x82210990;
		  /* 82210990h */ case    6:  		/* b 224 */
		/* 82210990h case    6:*/		return 0x82210A70;
		/* 82210990h case    6:*/		return 0x82210994;
	}
	return 0x82210994;
} // Block from 82210978h-82210994h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82210994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210994);
		  /* 82210994h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82210994h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82210994h case    0:*/		return 0x82210998;
		  /* 82210998h */ case    1:  		/* stw R11, <#[R3]> */
		/* 82210998h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82210998h case    1:*/		return 0x8221099C;
		  /* 8221099Ch */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221099Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221099Ch case    2:*/		return 0x822109A0;
		  /* 822109A0h */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 822109A0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 822109A0h case    3:*/		return 0x822109A4;
		  /* 822109A4h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 822109A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822109A4h case    4:*/		return 0x822109A8;
		  /* 822109A8h */ case    5:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 822109A8h case    5:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 822109A8h case    5:*/		return 0x822109AC;
		  /* 822109ACh */ case    6:  		/* addi R11, R3, 4 */
		/* 822109ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 822109ACh case    6:*/		return 0x822109B0;
		  /* 822109B0h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 822109B0h case    7:*/		if ( regs.CR[0].eq ) { return 0x822109C0;  }
		/* 822109B0h case    7:*/		return 0x822109B4;
		  /* 822109B4h */ case    8:  		/* lwz R10, <#[R31 + 8]> */
		/* 822109B4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 822109B4h case    8:*/		return 0x822109B8;
		  /* 822109B8h */ case    9:  		/* stw R10, <#[R11]> */
		/* 822109B8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822109B8h case    9:*/		return 0x822109BC;
		  /* 822109BCh */ case   10:  		/* addi R11, R11, 4 */
		/* 822109BCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822109BCh case   10:*/		return 0x822109C0;
	}
	return 0x822109C0;
} // Block from 82210994h-822109C0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822109C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822109C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822109C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822109C0);
		  /* 822109C0h */ case    0:  		/* lwz R10, <#[R31 + 4]> */
		/* 822109C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 822109C0h case    0:*/		return 0x822109C4;
		  /* 822109C4h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822109C4h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822109C4h case    1:*/		return 0x822109C8;
		  /* 822109C8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822109C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x822109D8;  }
		/* 822109C8h case    2:*/		return 0x822109CC;
		  /* 822109CCh */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 822109CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 822109CCh case    3:*/		return 0x822109D0;
		  /* 822109D0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822109D0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822109D0h case    4:*/		return 0x822109D4;
		  /* 822109D4h */ case    5:  		/* addi R11, R11, 4 */
		/* 822109D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822109D4h case    5:*/		return 0x822109D8;
	}
	return 0x822109D8;
} // Block from 822109C0h-822109D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822109D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822109D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822109D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822109D8);
		  /* 822109D8h */ case    0:  		/* sth R5, <#[R11 + 2]> */
		/* 822109D8h case    0:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 822109D8h case    0:*/		return 0x822109DC;
		  /* 822109DCh */ case    1:  		/* lwz R10, <#[R11]> */
		/* 822109DCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822109DCh case    1:*/		return 0x822109E0;
		  /* 822109E0h */ case    2:  		/* rlwimi R10, R7, 18, 8, 15 */
		/* 822109E0h case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R7);
		/* 822109E0h case    2:*/		return 0x822109E4;
		  /* 822109E4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 822109E4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822109E4h case    3:*/		return 0x822109E8;
		  /* 822109E8h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 822109E8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 822109E8h case    4:*/		return 0x822109EC;
		  /* 822109ECh */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 822109ECh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822109ECh case    5:*/		return 0x822109F0;
		  /* 822109F0h */ case    6:  		/* lwz R10, <#[R31 + 20]> */
		/* 822109F0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 822109F0h case    6:*/		return 0x822109F4;
		  /* 822109F4h */ case    7:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 822109F4h case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 822109F4h case    7:*/		return 0x822109F8;
		  /* 822109F8h */ case    8:  		/* addi R11, R11, 4 */
		/* 822109F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822109F8h case    8:*/		return 0x822109FC;
		  /* 822109FCh */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 822109FCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82210A0C;  }
		/* 822109FCh case    9:*/		return 0x82210A00;
		  /* 82210A00h */ case   10:  		/* lwz R10, <#[R31 + 32]> */
		/* 82210A00h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82210A00h case   10:*/		return 0x82210A04;
		  /* 82210A04h */ case   11:  		/* stw R10, <#[R11]> */
		/* 82210A04h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A04h case   11:*/		return 0x82210A08;
		  /* 82210A08h */ case   12:  		/* addi R11, R11, 4 */
		/* 82210A08h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210A08h case   12:*/		return 0x82210A0C;
	}
	return 0x82210A0C;
} // Block from 822109D8h-82210A0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82210A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A0C);
		  /* 82210A0Ch */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 82210A0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82210A0Ch case    0:*/		return 0x82210A10;
		  /* 82210A10h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82210A10h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82210A10h case    1:*/		return 0x82210A14;
		  /* 82210A14h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82210A14h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210A24;  }
		/* 82210A14h case    2:*/		return 0x82210A18;
		  /* 82210A18h */ case    3:  		/* lwz R10, <#[R31 + 44]> */
		/* 82210A18h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 82210A18h case    3:*/		return 0x82210A1C;
		  /* 82210A1Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 82210A1Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A1Ch case    4:*/		return 0x82210A20;
		  /* 82210A20h */ case    5:  		/* addi R11, R11, 4 */
		/* 82210A20h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210A20h case    5:*/		return 0x82210A24;
	}
	return 0x82210A24;
} // Block from 82210A0Ch-82210A24h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A24);
		  /* 82210A24h */ case    0:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210A24h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210A24h case    0:*/		return 0x82210A28;
		  /* 82210A28h */ case    1:  		/* addi R3, R11, 4 */
		/* 82210A28h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82210A28h case    1:*/		return 0x82210A2C;
		  /* 82210A2Ch */ case    2:  		/* stw R10, <#[R11]> */
		/* 82210A2Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A2Ch case    2:*/		return 0x82210A30;
		  /* 82210A30h */ case    3:  		/* lwz R11, <#[R31 + 24]> */
		/* 82210A30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82210A30h case    3:*/		return 0x82210A34;
		  /* 82210A34h */ case    4:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82210A34h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82210A34h case    4:*/		return 0x82210A38;
		  /* 82210A38h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82210A38h case    5:*/		if ( regs.CR[0].eq ) { return 0x82210A48;  }
		/* 82210A38h case    5:*/		return 0x82210A3C;
		  /* 82210A3Ch */ case    6:  		/* lwz R11, <#[R31 + 36]> */
		/* 82210A3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82210A3Ch case    6:*/		return 0x82210A40;
		  /* 82210A40h */ case    7:  		/* stw R11, <#[R3]> */
		/* 82210A40h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82210A40h case    7:*/		return 0x82210A44;
		  /* 82210A44h */ case    8:  		/* addi R3, R3, 4 */
		/* 82210A44h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82210A44h case    8:*/		return 0x82210A48;
	}
	return 0x82210A48;
} // Block from 82210A24h-82210A48h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82210A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A48);
		  /* 82210A48h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 82210A48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82210A48h case    0:*/		return 0x82210A4C;
		  /* 82210A4Ch */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82210A4Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82210A4Ch case    1:*/		return 0x82210A50;
		  /* 82210A50h */ case    2:  		/* bc 12, CR0_EQ, 384 */
		/* 82210A50h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210BD0;  }
		/* 82210A50h case    2:*/		return 0x82210A54;
		  /* 82210A54h */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 82210A54h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82210A54h case    3:*/		return 0x82210A58;
		  /* 82210A58h */ case    4:  		/* b 368 */
		/* 82210A58h case    4:*/		return 0x82210BC8;
		/* 82210A58h case    4:*/		return 0x82210A5C;
	}
	return 0x82210A5C;
} // Block from 82210A48h-82210A5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82210A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A5C);
		  /* 82210A5Ch */ case    0:  		/* cmplwi CR6, R8, 5 */
		/* 82210A5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000005);
		/* 82210A5Ch case    0:*/		return 0x82210A60;
		  /* 82210A60h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82210A60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82210A6C;  }
		/* 82210A60h case    1:*/		return 0x82210A64;
		  /* 82210A64h */ case    2:  		/* rlwimi R10, R7, 17, 3, 15 */
		/* 82210A64h case    2:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R10,regs.R7);
		/* 82210A64h case    2:*/		return 0x82210A68;
		  /* 82210A68h */ case    3:  		/* b 8 */
		/* 82210A68h case    3:*/		return 0x82210A70;
		/* 82210A68h case    3:*/		return 0x82210A6C;
	}
	return 0x82210A6C;
} // Block from 82210A5Ch-82210A6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82210A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A6C);
		  /* 82210A6Ch */ case    0:  		/* rlwimi R10, R6, 16, 3, 15 */
		/* 82210A6Ch case    0:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R10,regs.R6);
		/* 82210A6Ch case    0:*/		return 0x82210A70;
	}
	return 0x82210A70;
} // Block from 82210A6Ch-82210A70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82210A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210A70);
		  /* 82210A70h */ case    0:  		/* stw R10, <#[R3]> */
		/* 82210A70h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82210A70h case    0:*/		return 0x82210A74;
		  /* 82210A74h */ case    1:  		/* addi R11, R3, 4 */
		/* 82210A74h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82210A74h case    1:*/		return 0x82210A78;
		  /* 82210A78h */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 82210A78h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82210A78h case    2:*/		return 0x82210A7C;
		  /* 82210A7Ch */ case    3:  		/* sth R10, <#[R11 + 2]> */
		/* 82210A7Ch case    3:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82210A7Ch case    3:*/		return 0x82210A80;
		  /* 82210A80h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 82210A80h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82210A80h case    4:*/		return 0x82210A84;
		  /* 82210A84h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 82210A84h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A84h case    5:*/		return 0x82210A88;
		  /* 82210A88h */ case    6:  		/* rlwimi R10, R9, 0, 16, 9 */
		/* 82210A88h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R10,regs.R9);
		/* 82210A88h case    6:*/		return 0x82210A8C;
		  /* 82210A8Ch */ case    7:  		/* stw R10, <#[R11]> */
		/* 82210A8Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A8Ch case    7:*/		return 0x82210A90;
		  /* 82210A90h */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82210A90h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82210A90h case    8:*/		return 0x82210A94;
		  /* 82210A94h */ case    9:  		/* lwz R9, <#[R31 + 4]> */
		/* 82210A94h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82210A94h case    9:*/		return 0x82210A98;
		  /* 82210A98h */ case   10:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82210A98h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82210A98h case   10:*/		return 0x82210A9C;
		  /* 82210A9Ch */ case   11:  		/* stw R9, <#[R11]> */
		/* 82210A9Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210A9Ch case   11:*/		return 0x82210AA0;
		  /* 82210AA0h */ case   12:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82210AA0h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82210AA0h case   12:*/		return 0x82210AA4;
		  /* 82210AA4h */ case   13:  		/* lwz R9, <#[R31 + 4]> */
		/* 82210AA4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82210AA4h case   13:*/		return 0x82210AA8;
		  /* 82210AA8h */ case   14:  		/* rlwimi R9, R10, 0, 10, 8 */
		/* 82210AA8h case   14:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R9,regs.R10);
		/* 82210AA8h case   14:*/		return 0x82210AAC;
		  /* 82210AACh */ case   15:  		/* stw R9, <#[R11]> */
		/* 82210AACh case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210AACh case   15:*/		return 0x82210AB0;
		  /* 82210AB0h */ case   16:  		/* lwz R10, <#[R31 + 4]> */
		/* 82210AB0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82210AB0h case   16:*/		return 0x82210AB4;
		  /* 82210AB4h */ case   17:  		/* addi R11, R11, 4 */
		/* 82210AB4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210AB4h case   17:*/		return 0x82210AB8;
		  /* 82210AB8h */ case   18:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82210AB8h case   18:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82210AB8h case   18:*/		return 0x82210ABC;
		  /* 82210ABCh */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 82210ABCh case   19:*/		if ( regs.CR[0].eq ) { return 0x82210ACC;  }
		/* 82210ABCh case   19:*/		return 0x82210AC0;
		  /* 82210AC0h */ case   20:  		/* lwz R10, <#[R31 + 8]> */
		/* 82210AC0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82210AC0h case   20:*/		return 0x82210AC4;
		  /* 82210AC4h */ case   21:  		/* stw R10, <#[R11]> */
		/* 82210AC4h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210AC4h case   21:*/		return 0x82210AC8;
		  /* 82210AC8h */ case   22:  		/* addi R11, R11, 4 */
		/* 82210AC8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210AC8h case   22:*/		return 0x82210ACC;
	}
	return 0x82210ACC;
} // Block from 82210A70h-82210ACCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 82210ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210ACC);
		  /* 82210ACCh */ case    0:  		/* lwz R10, <#[R31 + 4]> */
		/* 82210ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82210ACCh case    0:*/		return 0x82210AD0;
		  /* 82210AD0h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82210AD0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82210AD0h case    1:*/		return 0x82210AD4;
		  /* 82210AD4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82210AD4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210AE4;  }
		/* 82210AD4h case    2:*/		return 0x82210AD8;
		  /* 82210AD8h */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 82210AD8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82210AD8h case    3:*/		return 0x82210ADC;
		  /* 82210ADCh */ case    4:  		/* stw R10, <#[R11]> */
		/* 82210ADCh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210ADCh case    4:*/		return 0x82210AE0;
		  /* 82210AE0h */ case    5:  		/* addi R11, R11, 4 */
		/* 82210AE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210AE0h case    5:*/		return 0x82210AE4;
	}
	return 0x82210AE4;
} // Block from 82210ACCh-82210AE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210AE4);
		  /* 82210AE4h */ case    0:  		/* sth R5, <#[R11 + 2]> */
		/* 82210AE4h case    0:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82210AE4h case    0:*/		return 0x82210AE8;
		  /* 82210AE8h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 82210AE8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210AE8h case    1:*/		return 0x82210AEC;
		  /* 82210AECh */ case    2:  		/* rlwimi R10, R7, 18, 8, 15 */
		/* 82210AECh case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R7);
		/* 82210AECh case    2:*/		return 0x82210AF0;
		  /* 82210AF0h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82210AF0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210AF0h case    3:*/		return 0x82210AF4;
		  /* 82210AF4h */ case    4:  		/* addi R11, R11, 4 */
		/* 82210AF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210AF4h case    4:*/		return 0x82210AF8;
		  /* 82210AF8h */ case    5:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210AF8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210AF8h case    5:*/		return 0x82210AFC;
		  /* 82210AFCh */ case    6:  		/* sth R10, <#[R11 + 2]> */
		/* 82210AFCh case    6:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82210AFCh case    6:*/		return 0x82210B00;
		  /* 82210B00h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82210B00h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B00h case    7:*/		return 0x82210B04;
		  /* 82210B04h */ case    8:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210B04h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210B04h case    8:*/		return 0x82210B08;
		  /* 82210B08h */ case    9:  		/* rlwimi R10, R9, 0, 16, 9 */
		/* 82210B08h case    9:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R10,regs.R9);
		/* 82210B08h case    9:*/		return 0x82210B0C;
		  /* 82210B0Ch */ case   10:  		/* stw R10, <#[R11]> */
		/* 82210B0Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B0Ch case   10:*/		return 0x82210B10;
		  /* 82210B10h */ case   11:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82210B10h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82210B10h case   11:*/		return 0x82210B14;
		  /* 82210B14h */ case   12:  		/* lwz R9, <#[R31 + 24]> */
		/* 82210B14h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82210B14h case   12:*/		return 0x82210B18;
		  /* 82210B18h */ case   13:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82210B18h case   13:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82210B18h case   13:*/		return 0x82210B1C;
		  /* 82210B1Ch */ case   14:  		/* stw R9, <#[R11]> */
		/* 82210B1Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B1Ch case   14:*/		return 0x82210B20;
		  /* 82210B20h */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210B20h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210B20h case   15:*/		return 0x82210B24;
		  /* 82210B24h */ case   16:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210B24h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210B24h case   16:*/		return 0x82210B28;
		  /* 82210B28h */ case   17:  		/* rlwimi R10, R9, 0, 10, 8 */
		/* 82210B28h case   17:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 82210B28h case   17:*/		return 0x82210B2C;
		  /* 82210B2Ch */ case   18:  		/* stw R10, <#[R11]> */
		/* 82210B2Ch case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B2Ch case   18:*/		return 0x82210B30;
		  /* 82210B30h */ case   19:  		/* addi R11, R11, 4 */
		/* 82210B30h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210B30h case   19:*/		return 0x82210B34;
		  /* 82210B34h */ case   20:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210B34h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210B34h case   20:*/		return 0x82210B38;
		  /* 82210B38h */ case   21:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82210B38h case   21:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82210B38h case   21:*/		return 0x82210B3C;
		  /* 82210B3Ch */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 82210B3Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x82210B4C;  }
		/* 82210B3Ch case   22:*/		return 0x82210B40;
		  /* 82210B40h */ case   23:  		/* lwz R10, <#[R31 + 36]> */
		/* 82210B40h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 82210B40h case   23:*/		return 0x82210B44;
		  /* 82210B44h */ case   24:  		/* stw R10, <#[R11]> */
		/* 82210B44h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B44h case   24:*/		return 0x82210B48;
		  /* 82210B48h */ case   25:  		/* addi R11, R11, 4 */
		/* 82210B48h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210B48h case   25:*/		return 0x82210B4C;
	}
	return 0x82210B4C;
} // Block from 82210AE4h-82210B4Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 82210B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210B4C);
		  /* 82210B4Ch */ case    0:  		/* lwz R10, <#[R31 + 24]> */
		/* 82210B4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82210B4Ch case    0:*/		return 0x82210B50;
		  /* 82210B50h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82210B50h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82210B50h case    1:*/		return 0x82210B54;
		  /* 82210B54h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82210B54h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210B64;  }
		/* 82210B54h case    2:*/		return 0x82210B58;
		  /* 82210B58h */ case    3:  		/* lwz R10, <#[R31 + 48]> */
		/* 82210B58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82210B58h case    3:*/		return 0x82210B5C;
		  /* 82210B5Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 82210B5Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B5Ch case    4:*/		return 0x82210B60;
		  /* 82210B60h */ case    5:  		/* addi R11, R11, 4 */
		/* 82210B60h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210B60h case    5:*/		return 0x82210B64;
	}
	return 0x82210B64;
} // Block from 82210B4Ch-82210B64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210B64);
		  /* 82210B64h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 82210B64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82210B64h case    0:*/		return 0x82210B68;
		  /* 82210B68h */ case    1:  		/* addi R3, R11, 4 */
		/* 82210B68h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82210B68h case    1:*/		return 0x82210B6C;
		  /* 82210B6Ch */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 82210B6Ch case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82210B6Ch case    2:*/		return 0x82210B70;
		  /* 82210B70h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82210B70h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B70h case    3:*/		return 0x82210B74;
		  /* 82210B74h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 82210B74h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82210B74h case    4:*/		return 0x82210B78;
		  /* 82210B78h */ case    5:  		/* rlwimi R10, R9, 0, 16, 9 */
		/* 82210B78h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R10,regs.R9);
		/* 82210B78h case    5:*/		return 0x82210B7C;
		  /* 82210B7Ch */ case    6:  		/* stw R10, <#[R11]> */
		/* 82210B7Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B7Ch case    6:*/		return 0x82210B80;
		  /* 82210B80h */ case    7:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82210B80h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82210B80h case    7:*/		return 0x82210B84;
		  /* 82210B84h */ case    8:  		/* lwz R9, <#[R31 + 20]> */
		/* 82210B84h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82210B84h case    8:*/		return 0x82210B88;
		  /* 82210B88h */ case    9:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82210B88h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82210B88h case    9:*/		return 0x82210B8C;
		  /* 82210B8Ch */ case   10:  		/* stw R9, <#[R11]> */
		/* 82210B8Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B8Ch case   10:*/		return 0x82210B90;
		  /* 82210B90h */ case   11:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210B90h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210B90h case   11:*/		return 0x82210B94;
		  /* 82210B94h */ case   12:  		/* lwz R10, <#[R31 + 20]> */
		/* 82210B94h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82210B94h case   12:*/		return 0x82210B98;
		  /* 82210B98h */ case   13:  		/* rlwimi R10, R9, 0, 10, 8 */
		/* 82210B98h case   13:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 82210B98h case   13:*/		return 0x82210B9C;
		  /* 82210B9Ch */ case   14:  		/* stw R10, <#[R11]> */
		/* 82210B9Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210B9Ch case   14:*/		return 0x82210BA0;
		  /* 82210BA0h */ case   15:  		/* lwz R11, <#[R31 + 20]> */
		/* 82210BA0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82210BA0h case   15:*/		return 0x82210BA4;
		  /* 82210BA4h */ case   16:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82210BA4h case   16:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82210BA4h case   16:*/		return 0x82210BA8;
		  /* 82210BA8h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82210BA8h case   17:*/		if ( regs.CR[0].eq ) { return 0x82210BB8;  }
		/* 82210BA8h case   17:*/		return 0x82210BAC;
		  /* 82210BACh */ case   18:  		/* lwz R11, <#[R31 + 32]> */
		/* 82210BACh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82210BACh case   18:*/		return 0x82210BB0;
		  /* 82210BB0h */ case   19:  		/* stw R11, <#[R3]> */
		/* 82210BB0h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82210BB0h case   19:*/		return 0x82210BB4;
		  /* 82210BB4h */ case   20:  		/* addi R3, R3, 4 */
		/* 82210BB4h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82210BB4h case   20:*/		return 0x82210BB8;
	}
	return 0x82210BB8;
} // Block from 82210B64h-82210BB8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82210BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210BB8);
		  /* 82210BB8h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82210BB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82210BB8h case    0:*/		return 0x82210BBC;
		  /* 82210BBCh */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82210BBCh case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82210BBCh case    1:*/		return 0x82210BC0;
		  /* 82210BC0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82210BC0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82210BD0;  }
		/* 82210BC0h case    2:*/		return 0x82210BC4;
		  /* 82210BC4h */ case    3:  		/* lwz R11, <#[R31 + 44]> */
		/* 82210BC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82210BC4h case    3:*/		return 0x82210BC8;
	}
	return 0x82210BC8;
} // Block from 82210BB8h-82210BC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82210BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210BC8);
		  /* 82210BC8h */ case    0:  		/* stw R11, <#[R3]> */
		/* 82210BC8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82210BC8h case    0:*/		return 0x82210BCC;
		  /* 82210BCCh */ case    1:  		/* addi R3, R3, 4 */
		/* 82210BCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82210BCCh case    1:*/		return 0x82210BD0;
	}
	return 0x82210BD0;
} // Block from 82210BC8h-82210BD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82210BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210BD0);
		  /* 82210BD0h */ case    0:  		/* addi R1, R1, 112 */
		/* 82210BD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82210BD0h case    0:*/		return 0x82210BD4;
		  /* 82210BD4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82210BD4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82210BD4h case    1:*/		return 0x82210BD8;
		  /* 82210BD8h */ case    2:  		/* mtspr LR, R12 */
		/* 82210BD8h case    2:*/		regs.LR = regs.R12;
		/* 82210BD8h case    2:*/		return 0x82210BDC;
		  /* 82210BDCh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82210BDCh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82210BDCh case    3:*/		return 0x82210BE0;
		  /* 82210BE0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82210BE0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82210BE0h case    4:*/		return 0x82210BE4;
		  /* 82210BE4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82210BE4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82210BE4h case    5:*/		return 0x82210BE8;
	}
	return 0x82210BE8;
} // Block from 82210BD0h-82210BE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82210BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210BE8);
		  /* 82210BE8h */ case    0:  		/* mfspr R12, LR */
		/* 82210BE8h case    0:*/		regs.R12 = regs.LR;
		/* 82210BE8h case    0:*/		return 0x82210BEC;
		  /* 82210BECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82210BECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82210BECh case    1:*/		return 0x82210BF0;
		  /* 82210BF0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82210BF0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82210BF0h case    2:*/		return 0x82210BF4;
		  /* 82210BF4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82210BF4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82210BF4h case    3:*/		return 0x82210BF8;
		  /* 82210BF8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82210BF8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82210BF8h case    4:*/		return 0x82210BFC;
		  /* 82210BFCh */ case    5:  		/* mr R31, R4 */
		/* 82210BFCh case    5:*/		regs.R31 = regs.R4;
		/* 82210BFCh case    5:*/		return 0x82210C00;
		  /* 82210C00h */ case    6:  		/* mr R30, R5 */
		/* 82210C00h case    6:*/		regs.R30 = regs.R5;
		/* 82210C00h case    6:*/		return 0x82210C04;
		  /* 82210C04h */ case    7:  		/* bl -6620 */
		/* 82210C04h case    7:*/		regs.LR = 0x82210C08; return 0x8220F228;
		/* 82210C04h case    7:*/		return 0x82210C08;
		  /* 82210C08h */ case    8:  		/* li R11, 73 */
		/* 82210C08h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x49);
		/* 82210C08h case    8:*/		return 0x82210C0C;
		  /* 82210C0Ch */ case    9:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 82210C0Ch case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 82210C0Ch case    9:*/		return 0x82210C10;
		  /* 82210C10h */ case   10:  		/* sth R11, <#[R30 + 2]> */
		/* 82210C10h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82210C10h case   10:*/		return 0x82210C14;
		  /* 82210C14h */ case   11:  		/* li R9, 1 */
		/* 82210C14h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82210C14h case   11:*/		return 0x82210C18;
	}
	return 0x82210C18;
} // Block from 82210BE8h-82210C18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82210C18h
// Function '?SetSrc@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210C18);
		  /* 82210C18h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82210C18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82210C18h case    0:*/		return 0x82210C1C;
		  /* 82210C1Ch */ case    1:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82210C1Ch case    1:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82210C1Ch case    1:*/		return 0x82210C20;
		  /* 82210C20h */ case    2:  		/* stw R11, <#[R30]> */
		/* 82210C20h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82210C20h case    2:*/		return 0x82210C24;
		  /* 82210C24h */ case    3:  		/* addi R11, R30, 4 */
		/* 82210C24h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82210C24h case    3:*/		return 0x82210C28;
		  /* 82210C28h */ case    4:  		/* sth R10, <#[R30 + 6]> */
		/* 82210C28h case    4:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 82210C28h case    4:*/		return 0x82210C2C;
		  /* 82210C2Ch */ case    5:  		/* li R12, -18038 */
		/* 82210C2Ch case    5:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFB98A);
		/* 82210C2Ch case    5:*/		return 0x82210C30;
		  /* 82210C30h */ case    6:  		/* lwz R8, <#[R30 + 4]> */
		/* 82210C30h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82210C30h case    6:*/		return 0x82210C34;
		  /* 82210C34h */ case    7:  		/* addi R11, R11, 4 */
		/* 82210C34h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210C34h case    7:*/		return 0x82210C38;
		  /* 82210C38h */ case    8:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 82210C38h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 82210C38h case    8:*/		return 0x82210C3C;
		  /* 82210C3Ch */ case    9:  		/* stw R8, <#[R30 + 4]> */
		/* 82210C3Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82210C3Ch case    9:*/		return 0x82210C40;
		  /* 82210C40h */ case   10:  		/* lwz R9, <#[R31 + 16]> */
		/* 82210C40h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82210C40h case   10:*/		return 0x82210C44;
		  /* 82210C44h */ case   11:  		/* sth R9, <#[R11 + 2]> */
		/* 82210C44h case   11:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210C44h case   11:*/		return 0x82210C48;
		  /* 82210C48h */ case   12:  		/* lwz R9, <#[R11]> */
		/* 82210C48h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C48h case   12:*/		return 0x82210C4C;
		  /* 82210C4Ch */ case   13:  		/* lwz R8, <#[R31 + 16]> */
		/* 82210C4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82210C4Ch case   13:*/		return 0x82210C50;
		  /* 82210C50h */ case   14:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82210C50h case   14:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82210C50h case   14:*/		return 0x82210C54;
		  /* 82210C54h */ case   15:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210C54h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210C54h case   15:*/		return 0x82210C58;
		  /* 82210C58h */ case   16:  		/* stw R8, <#[R11]> */
		/* 82210C58h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C58h case   16:*/		return 0x82210C5C;
		  /* 82210C5Ch */ case   17:  		/* lwz R8, <#[R31 + 16]> */
		/* 82210C5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82210C5Ch case   17:*/		return 0x82210C60;
		  /* 82210C60h */ case   18:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82210C60h case   18:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82210C60h case   18:*/		return 0x82210C64;
		  /* 82210C64h */ case   19:  		/* oris R9, R8, 64 */
		/* 82210C64h case   19:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82210C64h case   19:*/		return 0x82210C68;
		  /* 82210C68h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82210C68h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C68h case   20:*/		return 0x82210C6C;
		  /* 82210C6Ch */ case   21:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82210C6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210C6Ch case   21:*/		return 0x82210C70;
		  /* 82210C70h */ case   22:  		/* and R9, R9, R12 */
		/* 82210C70h case   22:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82210C70h case   22:*/		return 0x82210C74;
		  /* 82210C74h */ case   23:  		/* ori R9, R9, 12546 */
		/* 82210C74h case   23:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3102);
		/* 82210C74h case   23:*/		return 0x82210C78;
		  /* 82210C78h */ case   24:  		/* mr R8, R9 */
		/* 82210C78h case   24:*/		regs.R8 = regs.R9;
		/* 82210C78h case   24:*/		return 0x82210C7C;
		  /* 82210C7Ch */ case   25:  		/* stw R9, <#[R11]> */
		/* 82210C7Ch case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C7Ch case   25:*/		return 0x82210C80;
		  /* 82210C80h */ case   26:  		/* lwz R9, <#[R31 + 28]> */
		/* 82210C80h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210C80h case   26:*/		return 0x82210C84;
		  /* 82210C84h */ case   27:  		/* rlwimi R8, R9, 24, 28, 28 */
		/* 82210C84h case   27:*/		cpu::op::rlwimi<0,24,28,28>(regs,&regs.R8,regs.R9);
		/* 82210C84h case   27:*/		return 0x82210C88;
		  /* 82210C88h */ case   28:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210C88h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210C88h case   28:*/		return 0x82210C8C;
		  /* 82210C8Ch */ case   29:  		/* stw R8, <#[R11]> */
		/* 82210C8Ch case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C8Ch case   29:*/		return 0x82210C90;
		  /* 82210C90h */ case   30:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210C90h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210C90h case   30:*/		return 0x82210C94;
		  /* 82210C94h */ case   31:  		/* rlwimi R9, R8, 4, 24, 24 */
		/* 82210C94h case   31:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R9,regs.R8);
		/* 82210C94h case   31:*/		return 0x82210C98;
		  /* 82210C98h */ case   32:  		/* stw R9, <#[R11]> */
		/* 82210C98h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210C98h case   32:*/		return 0x82210C9C;
		  /* 82210C9Ch */ case   33:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210C9Ch case   33:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210C9Ch case   33:*/		return 0x82210CA0;
		  /* 82210CA0h */ case   34:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210CA0h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210CA0h case   34:*/		return 0x82210CA4;
		  /* 82210CA4h */ case   35:  		/* rlwimi R9, R8, 4, 20, 20 */
		/* 82210CA4h case   35:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R9,regs.R8);
		/* 82210CA4h case   35:*/		return 0x82210CA8;
		  /* 82210CA8h */ case   36:  		/* stw R9, <#[R11]> */
		/* 82210CA8h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210CA8h case   36:*/		return 0x82210CAC;
		  /* 82210CACh */ case   37:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210CACh case   37:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210CACh case   37:*/		return 0x82210CB0;
		  /* 82210CB0h */ case   38:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210CB0h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210CB0h case   38:*/		return 0x82210CB4;
		  /* 82210CB4h */ case   39:  		/* rlwimi R8, R9, 0, 17, 15 */
		/* 82210CB4h case   39:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R8,regs.R9);
		/* 82210CB4h case   39:*/		return 0x82210CB8;
		  /* 82210CB8h */ case   40:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210CB8h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210CB8h case   40:*/		return 0x82210CBC;
		  /* 82210CBCh */ case   41:  		/* stw R8, <#[R11]> */
		/* 82210CBCh case   41:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210CBCh case   41:*/		return 0x82210CC0;
		  /* 82210CC0h */ case   42:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210CC0h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210CC0h case   42:*/		return 0x82210CC4;
		  /* 82210CC4h */ case   43:  		/* rlwimi R8, R9, 0, 12, 10 */
		/* 82210CC4h case   43:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R8,regs.R9);
		/* 82210CC4h case   43:*/		return 0x82210CC8;
		  /* 82210CC8h */ case   44:  		/* stw R8, <#[R11]> */
		/* 82210CC8h case   44:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210CC8h case   44:*/		return 0x82210CCC;
		  /* 82210CCCh */ case   45:  		/* addi R11, R11, 4 */
		/* 82210CCCh case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210CCCh case   45:*/		return 0x82210CD0;
		  /* 82210CD0h */ case   46:  		/* lwz R9, <#[R31 + 16]> */
		/* 82210CD0h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82210CD0h case   46:*/		return 0x82210CD4;
		  /* 82210CD4h */ case   47:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210CD4h case   47:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210CD4h case   47:*/		return 0x82210CD8;
		  /* 82210CD8h */ case   48:  		/* bc 12, CR0_EQ, 16 */
		/* 82210CD8h case   48:*/		if ( regs.CR[0].eq ) { return 0x82210CE8;  }
		/* 82210CD8h case   48:*/		return 0x82210CDC;
		  /* 82210CDCh */ case   49:  		/* lwz R9, <#[R31 + 40]> */
		/* 82210CDCh case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82210CDCh case   49:*/		return 0x82210CE0;
		  /* 82210CE0h */ case   50:  		/* stw R9, <#[R11]> */
		/* 82210CE0h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210CE0h case   50:*/		return 0x82210CE4;
		  /* 82210CE4h */ case   51:  		/* addi R11, R11, 4 */
		/* 82210CE4h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210CE4h case   51:*/		return 0x82210CE8;
	}
	return 0x82210CE8;
} // Block from 82210C18h-82210CE8h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82210CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210CE8);
		  /* 82210CE8h */ case    0:  		/* lwz R9, <#[R31 + 20]> */
		/* 82210CE8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82210CE8h case    0:*/		return 0x82210CEC;
		  /* 82210CECh */ case    1:  		/* li R12, -18263 */
		/* 82210CECh case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFB8A9);
		/* 82210CECh case    1:*/		return 0x82210CF0;
		  /* 82210CF0h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82210CF0h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210CF0h case    2:*/		return 0x82210CF4;
		  /* 82210CF4h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82210CF4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210CF4h case    3:*/		return 0x82210CF8;
		  /* 82210CF8h */ case    4:  		/* lwz R8, <#[R31 + 20]> */
		/* 82210CF8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82210CF8h case    4:*/		return 0x82210CFC;
		  /* 82210CFCh */ case    5:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82210CFCh case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82210CFCh case    5:*/		return 0x82210D00;
		  /* 82210D00h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82210D00h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D00h case    6:*/		return 0x82210D04;
		  /* 82210D04h */ case    7:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210D04h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210D04h case    7:*/		return 0x82210D08;
		  /* 82210D08h */ case    8:  		/* lwz R8, <#[R31 + 20]> */
		/* 82210D08h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82210D08h case    8:*/		return 0x82210D0C;
		  /* 82210D0Ch */ case    9:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82210D0Ch case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82210D0Ch case    9:*/		return 0x82210D10;
		  /* 82210D10h */ case   10:  		/* oris R9, R8, 64 */
		/* 82210D10h case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82210D10h case   10:*/		return 0x82210D14;
		  /* 82210D14h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82210D14h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D14h case   11:*/		return 0x82210D18;
		  /* 82210D18h */ case   12:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82210D18h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210D18h case   12:*/		return 0x82210D1C;
		  /* 82210D1Ch */ case   13:  		/* and R9, R9, R12 */
		/* 82210D1Ch case   13:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82210D1Ch case   13:*/		return 0x82210D20;
		  /* 82210D20h */ case   14:  		/* ori R9, R9, 12321 */
		/* 82210D20h case   14:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3021);
		/* 82210D20h case   14:*/		return 0x82210D24;
		  /* 82210D24h */ case   15:  		/* mr R8, R9 */
		/* 82210D24h case   15:*/		regs.R8 = regs.R9;
		/* 82210D24h case   15:*/		return 0x82210D28;
		  /* 82210D28h */ case   16:  		/* stw R9, <#[R11]> */
		/* 82210D28h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D28h case   16:*/		return 0x82210D2C;
		  /* 82210D2Ch */ case   17:  		/* lwz R9, <#[R31 + 32]> */
		/* 82210D2Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82210D2Ch case   17:*/		return 0x82210D30;
		  /* 82210D30h */ case   18:  		/* rlwimi R8, R9, 28, 28, 28 */
		/* 82210D30h case   18:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R8,regs.R9);
		/* 82210D30h case   18:*/		return 0x82210D34;
		  /* 82210D34h */ case   19:  		/* stw R8, <#[R11]> */
		/* 82210D34h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D34h case   19:*/		return 0x82210D38;
		  /* 82210D38h */ case   20:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210D38h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210D38h case   20:*/		return 0x82210D3C;
		  /* 82210D3Ch */ case   21:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210D3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210D3Ch case   21:*/		return 0x82210D40;
		  /* 82210D40h */ case   22:  		/* rlwimi R9, R8, 28, 24, 24 */
		/* 82210D40h case   22:*/		cpu::op::rlwimi<0,28,24,24>(regs,&regs.R9,regs.R8);
		/* 82210D40h case   22:*/		return 0x82210D44;
		  /* 82210D44h */ case   23:  		/* stw R9, <#[R11]> */
		/* 82210D44h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D44h case   23:*/		return 0x82210D48;
		  /* 82210D48h */ case   24:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210D48h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210D48h case   24:*/		return 0x82210D4C;
		  /* 82210D4Ch */ case   25:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210D4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210D4Ch case   25:*/		return 0x82210D50;
		  /* 82210D50h */ case   26:  		/* rlwimi R9, R8, 8, 20, 20 */
		/* 82210D50h case   26:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R9,regs.R8);
		/* 82210D50h case   26:*/		return 0x82210D54;
		  /* 82210D54h */ case   27:  		/* stw R9, <#[R11]> */
		/* 82210D54h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D54h case   27:*/		return 0x82210D58;
		  /* 82210D58h */ case   28:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210D58h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210D58h case   28:*/		return 0x82210D5C;
		  /* 82210D5Ch */ case   29:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210D5Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210D5Ch case   29:*/		return 0x82210D60;
		  /* 82210D60h */ case   30:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 82210D60h case   30:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 82210D60h case   30:*/		return 0x82210D64;
		  /* 82210D64h */ case   31:  		/* stw R9, <#[R11]> */
		/* 82210D64h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D64h case   31:*/		return 0x82210D68;
		  /* 82210D68h */ case   32:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210D68h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210D68h case   32:*/		return 0x82210D6C;
		  /* 82210D6Ch */ case   33:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210D6Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210D6Ch case   33:*/		return 0x82210D70;
		  /* 82210D70h */ case   34:  		/* rlwimi R9, R8, 0, 11, 11 */
		/* 82210D70h case   34:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R9,regs.R8);
		/* 82210D70h case   34:*/		return 0x82210D74;
		  /* 82210D74h */ case   35:  		/* stw R9, <#[R11]> */
		/* 82210D74h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D74h case   35:*/		return 0x82210D78;
		  /* 82210D78h */ case   36:  		/* addi R11, R11, 4 */
		/* 82210D78h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210D78h case   36:*/		return 0x82210D7C;
		  /* 82210D7Ch */ case   37:  		/* lwz R9, <#[R31 + 20]> */
		/* 82210D7Ch case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82210D7Ch case   37:*/		return 0x82210D80;
		  /* 82210D80h */ case   38:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210D80h case   38:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210D80h case   38:*/		return 0x82210D84;
		  /* 82210D84h */ case   39:  		/* bc 12, CR0_EQ, 16 */
		/* 82210D84h case   39:*/		if ( regs.CR[0].eq ) { return 0x82210D94;  }
		/* 82210D84h case   39:*/		return 0x82210D88;
		  /* 82210D88h */ case   40:  		/* lwz R9, <#[R31 + 44]> */
		/* 82210D88h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 82210D88h case   40:*/		return 0x82210D8C;
		  /* 82210D8Ch */ case   41:  		/* stw R9, <#[R11]> */
		/* 82210D8Ch case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210D8Ch case   41:*/		return 0x82210D90;
		  /* 82210D90h */ case   42:  		/* addi R11, R11, 4 */
		/* 82210D90h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210D90h case   42:*/		return 0x82210D94;
	}
	return 0x82210D94;
} // Block from 82210CE8h-82210D94h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82210D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210D94);
		  /* 82210D94h */ case    0:  		/* li R9, 64 */
		/* 82210D94h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 82210D94h case    0:*/		return 0x82210D98;
		  /* 82210D98h */ case    1:  		/* li R8, 0 */
		/* 82210D98h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82210D98h case    1:*/		return 0x82210D9C;
		  /* 82210D9Ch */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82210D9Ch case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210D9Ch case    2:*/		return 0x82210DA0;
		  /* 82210DA0h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82210DA0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DA0h case    3:*/		return 0x82210DA4;
		  /* 82210DA4h */ case    4:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82210DA4h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82210DA4h case    4:*/		return 0x82210DA8;
		  /* 82210DA8h */ case    5:  		/* stw R9, <#[R11]> */
		/* 82210DA8h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DA8h case    5:*/		return 0x82210DAC;
		  /* 82210DACh */ case    6:  		/* addi R11, R11, 4 */
		/* 82210DACh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210DACh case    6:*/		return 0x82210DB0;
		  /* 82210DB0h */ case    7:  		/* lwz R9, <#[R31 + 4]> */
		/* 82210DB0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82210DB0h case    7:*/		return 0x82210DB4;
		  /* 82210DB4h */ case    8:  		/* sth R9, <#[R11 + 2]> */
		/* 82210DB4h case    8:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210DB4h case    8:*/		return 0x82210DB8;
		  /* 82210DB8h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82210DB8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DB8h case    9:*/		return 0x82210DBC;
		  /* 82210DBCh */ case   10:  		/* lwz R7, <#[R31 + 4]> */
		/* 82210DBCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82210DBCh case   10:*/		return 0x82210DC0;
		  /* 82210DC0h */ case   11:  		/* rlwimi R7, R9, 0, 16, 9 */
		/* 82210DC0h case   11:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R9);
		/* 82210DC0h case   11:*/		return 0x82210DC4;
		  /* 82210DC4h */ case   12:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 82210DC4h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 82210DC4h case   12:*/		return 0x82210DC8;
		  /* 82210DC8h */ case   13:  		/* stw R7, <#[R11]> */
		/* 82210DC8h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DC8h case   13:*/		return 0x82210DCC;
		  /* 82210DCCh */ case   14:  		/* lwz R7, <#[R31 + 4]> */
		/* 82210DCCh case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82210DCCh case   14:*/		return 0x82210DD0;
		  /* 82210DD0h */ case   15:  		/* rlwimi R7, R9, 0, 9, 7 */
		/* 82210DD0h case   15:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R9);
		/* 82210DD0h case   15:*/		return 0x82210DD4;
		  /* 82210DD4h */ case   16:  		/* oris R9, R7, 64 */
		/* 82210DD4h case   16:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R7,0x40);
		/* 82210DD4h case   16:*/		return 0x82210DD8;
		  /* 82210DD8h */ case   17:  		/* stw R9, <#[R11]> */
		/* 82210DD8h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DD8h case   17:*/		return 0x82210DDC;
		  /* 82210DDCh */ case   18:  		/* stwu R8, <#[R11 + 4]> */
		/* 82210DDCh case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210DDCh case   18:*/		return 0x82210DE0;
		  /* 82210DE0h */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 82210DE0h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82210DE0h case   19:*/		return 0x82210DE4;
		  /* 82210DE4h */ case   20:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 82210DE4h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 82210DE4h case   20:*/		return 0x82210DE8;
		  /* 82210DE8h */ case   21:  		/* stw R9, <#[R11]> */
		/* 82210DE8h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DE8h case   21:*/		return 0x82210DEC;
		  /* 82210DECh */ case   22:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210DECh case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210DECh case   22:*/		return 0x82210DF0;
		  /* 82210DF0h */ case   23:  		/* lwz R8, <#[R31 + 8]> */
		/* 82210DF0h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82210DF0h case   23:*/		return 0x82210DF4;
		  /* 82210DF4h */ case   24:  		/* rlwimi R8, R9, 0, 30, 27 */
		/* 82210DF4h case   24:*/		cpu::op::rlwimi<0,0,30,27>(regs,&regs.R8,regs.R9);
		/* 82210DF4h case   24:*/		return 0x82210DF8;
		  /* 82210DF8h */ case   25:  		/* stw R8, <#[R11]> */
		/* 82210DF8h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210DF8h case   25:*/		return 0x82210DFC;
		  /* 82210DFCh */ case   26:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210DFCh case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210DFCh case   26:*/		return 0x82210E00;
		  /* 82210E00h */ case   27:  		/* lwz R8, <#[R31 + 8]> */
		/* 82210E00h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82210E00h case   27:*/		return 0x82210E04;
		  /* 82210E04h */ case   28:  		/* rlwimi R8, R9, 0, 28, 25 */
		/* 82210E04h case   28:*/		cpu::op::rlwimi<0,0,28,25>(regs,&regs.R8,regs.R9);
		/* 82210E04h case   28:*/		return 0x82210E08;
		  /* 82210E08h */ case   29:  		/* stw R8, <#[R11]> */
		/* 82210E08h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E08h case   29:*/		return 0x82210E0C;
		  /* 82210E0Ch */ case   30:  		/* addi R11, R11, 4 */
		/* 82210E0Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210E0Ch case   30:*/		return 0x82210E10;
		  /* 82210E10h */ case   31:  		/* lwz R9, <#[R31 + 4]> */
		/* 82210E10h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82210E10h case   31:*/		return 0x82210E14;
		  /* 82210E14h */ case   32:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210E14h case   32:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210E14h case   32:*/		return 0x82210E18;
		  /* 82210E18h */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 82210E18h case   33:*/		if ( regs.CR[0].eq ) { return 0x82210E28;  }
		/* 82210E18h case   33:*/		return 0x82210E1C;
		  /* 82210E1Ch */ case   34:  		/* lwz R9, <#[R31 + 12]> */
		/* 82210E1Ch case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82210E1Ch case   34:*/		return 0x82210E20;
		  /* 82210E20h */ case   35:  		/* stw R9, <#[R11]> */
		/* 82210E20h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E20h case   35:*/		return 0x82210E24;
		  /* 82210E24h */ case   36:  		/* addi R11, R11, 4 */
		/* 82210E24h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210E24h case   36:*/		return 0x82210E28;
	}
	return 0x82210E28;
} // Block from 82210D94h-82210E28h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82210E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210E28);
		  /* 82210E28h */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 82210E28h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82210E28h case    0:*/		return 0x82210E2C;
		  /* 82210E2Ch */ case    1:  		/* li R12, -18263 */
		/* 82210E2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFB8A9);
		/* 82210E2Ch case    1:*/		return 0x82210E30;
		  /* 82210E30h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82210E30h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210E30h case    2:*/		return 0x82210E34;
		  /* 82210E34h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82210E34h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E34h case    3:*/		return 0x82210E38;
		  /* 82210E38h */ case    4:  		/* lwz R8, <#[R31 + 16]> */
		/* 82210E38h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82210E38h case    4:*/		return 0x82210E3C;
		  /* 82210E3Ch */ case    5:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82210E3Ch case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82210E3Ch case    5:*/		return 0x82210E40;
		  /* 82210E40h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82210E40h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E40h case    6:*/		return 0x82210E44;
		  /* 82210E44h */ case    7:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82210E44h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82210E44h case    7:*/		return 0x82210E48;
		  /* 82210E48h */ case    8:  		/* lwz R9, <#[R31 + 16]> */
		/* 82210E48h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82210E48h case    8:*/		return 0x82210E4C;
		  /* 82210E4Ch */ case    9:  		/* rlwimi R9, R8, 0, 9, 7 */
		/* 82210E4Ch case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R8);
		/* 82210E4Ch case    9:*/		return 0x82210E50;
		  /* 82210E50h */ case   10:  		/* oris R9, R9, 64 */
		/* 82210E50h case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 82210E50h case   10:*/		return 0x82210E54;
		  /* 82210E54h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82210E54h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E54h case   11:*/		return 0x82210E58;
		  /* 82210E58h */ case   12:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82210E58h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210E58h case   12:*/		return 0x82210E5C;
		  /* 82210E5Ch */ case   13:  		/* and R9, R9, R12 */
		/* 82210E5Ch case   13:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82210E5Ch case   13:*/		return 0x82210E60;
		  /* 82210E60h */ case   14:  		/* ori R9, R9, 12321 */
		/* 82210E60h case   14:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3021);
		/* 82210E60h case   14:*/		return 0x82210E64;
		  /* 82210E64h */ case   15:  		/* stw R9, <#[R11]> */
		/* 82210E64h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E64h case   15:*/		return 0x82210E68;
		  /* 82210E68h */ case   16:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210E68h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210E68h case   16:*/		return 0x82210E6C;
		  /* 82210E6Ch */ case   17:  		/* rlwimi R9, R8, 24, 28, 28 */
		/* 82210E6Ch case   17:*/		cpu::op::rlwimi<0,24,28,28>(regs,&regs.R9,regs.R8);
		/* 82210E6Ch case   17:*/		return 0x82210E70;
		  /* 82210E70h */ case   18:  		/* stw R9, <#[R11]> */
		/* 82210E70h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E70h case   18:*/		return 0x82210E74;
		  /* 82210E74h */ case   19:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210E74h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210E74h case   19:*/		return 0x82210E78;
		  /* 82210E78h */ case   20:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210E78h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210E78h case   20:*/		return 0x82210E7C;
		  /* 82210E7Ch */ case   21:  		/* rlwimi R9, R8, 4, 24, 24 */
		/* 82210E7Ch case   21:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R9,regs.R8);
		/* 82210E7Ch case   21:*/		return 0x82210E80;
		  /* 82210E80h */ case   22:  		/* stw R9, <#[R11]> */
		/* 82210E80h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E80h case   22:*/		return 0x82210E84;
		  /* 82210E84h */ case   23:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210E84h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210E84h case   23:*/		return 0x82210E88;
		  /* 82210E88h */ case   24:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210E88h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210E88h case   24:*/		return 0x82210E8C;
		  /* 82210E8Ch */ case   25:  		/* rlwimi R9, R8, 4, 20, 20 */
		/* 82210E8Ch case   25:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R9,regs.R8);
		/* 82210E8Ch case   25:*/		return 0x82210E90;
		  /* 82210E90h */ case   26:  		/* stw R9, <#[R11]> */
		/* 82210E90h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E90h case   26:*/		return 0x82210E94;
		  /* 82210E94h */ case   27:  		/* lwz R8, <#[R11]> */
		/* 82210E94h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210E94h case   27:*/		return 0x82210E98;
		  /* 82210E98h */ case   28:  		/* lwz R9, <#[R31 + 28]> */
		/* 82210E98h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210E98h case   28:*/		return 0x82210E9C;
		  /* 82210E9Ch */ case   29:  		/* rlwimi R9, R8, 0, 17, 15 */
		/* 82210E9Ch case   29:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R9,regs.R8);
		/* 82210E9Ch case   29:*/		return 0x82210EA0;
		  /* 82210EA0h */ case   30:  		/* stw R9, <#[R11]> */
		/* 82210EA0h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EA0h case   30:*/		return 0x82210EA4;
		  /* 82210EA4h */ case   31:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210EA4h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210EA4h case   31:*/		return 0x82210EA8;
		  /* 82210EA8h */ case   32:  		/* lwz R8, <#[R31 + 28]> */
		/* 82210EA8h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82210EA8h case   32:*/		return 0x82210EAC;
		  /* 82210EACh */ case   33:  		/* rlwimi R8, R9, 0, 12, 10 */
		/* 82210EACh case   33:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R8,regs.R9);
		/* 82210EACh case   33:*/		return 0x82210EB0;
		  /* 82210EB0h */ case   34:  		/* stw R8, <#[R11]> */
		/* 82210EB0h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EB0h case   34:*/		return 0x82210EB4;
		  /* 82210EB4h */ case   35:  		/* addi R11, R11, 4 */
		/* 82210EB4h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210EB4h case   35:*/		return 0x82210EB8;
		  /* 82210EB8h */ case   36:  		/* lwz R9, <#[R31 + 16]> */
		/* 82210EB8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82210EB8h case   36:*/		return 0x82210EBC;
		  /* 82210EBCh */ case   37:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210EBCh case   37:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210EBCh case   37:*/		return 0x82210EC0;
		  /* 82210EC0h */ case   38:  		/* bc 12, CR0_EQ, 16 */
		/* 82210EC0h case   38:*/		if ( regs.CR[0].eq ) { return 0x82210ED0;  }
		/* 82210EC0h case   38:*/		return 0x82210EC4;
		  /* 82210EC4h */ case   39:  		/* lwz R9, <#[R31 + 40]> */
		/* 82210EC4h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82210EC4h case   39:*/		return 0x82210EC8;
		  /* 82210EC8h */ case   40:  		/* stw R9, <#[R11]> */
		/* 82210EC8h case   40:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EC8h case   40:*/		return 0x82210ECC;
		  /* 82210ECCh */ case   41:  		/* addi R11, R11, 4 */
		/* 82210ECCh case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210ECCh case   41:*/		return 0x82210ED0;
	}
	return 0x82210ED0;
} // Block from 82210E28h-82210ED0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82210ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210ED0);
		  /* 82210ED0h */ case    0:  		/* lwz R9, <#[R31 + 20]> */
		/* 82210ED0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82210ED0h case    0:*/		return 0x82210ED4;
		  /* 82210ED4h */ case    1:  		/* li R12, -18038 */
		/* 82210ED4h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFB98A);
		/* 82210ED4h case    1:*/		return 0x82210ED8;
		  /* 82210ED8h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82210ED8h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82210ED8h case    2:*/		return 0x82210EDC;
		  /* 82210EDCh */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82210EDCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EDCh case    3:*/		return 0x82210EE0;
		  /* 82210EE0h */ case    4:  		/* lwz R8, <#[R31 + 20]> */
		/* 82210EE0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82210EE0h case    4:*/		return 0x82210EE4;
		  /* 82210EE4h */ case    5:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82210EE4h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82210EE4h case    5:*/		return 0x82210EE8;
		  /* 82210EE8h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82210EE8h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EE8h case    6:*/		return 0x82210EEC;
		  /* 82210EECh */ case    7:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82210EECh case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82210EECh case    7:*/		return 0x82210EF0;
		  /* 82210EF0h */ case    8:  		/* lwz R8, <#[R31 + 20]> */
		/* 82210EF0h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82210EF0h case    8:*/		return 0x82210EF4;
		  /* 82210EF4h */ case    9:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82210EF4h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82210EF4h case    9:*/		return 0x82210EF8;
		  /* 82210EF8h */ case   10:  		/* oris R9, R8, 64 */
		/* 82210EF8h case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82210EF8h case   10:*/		return 0x82210EFC;
		  /* 82210EFCh */ case   11:  		/* stw R9, <#[R11]> */
		/* 82210EFCh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210EFCh case   11:*/		return 0x82210F00;
		  /* 82210F00h */ case   12:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82210F00h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210F00h case   12:*/		return 0x82210F04;
		  /* 82210F04h */ case   13:  		/* and R9, R9, R12 */
		/* 82210F04h case   13:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82210F04h case   13:*/		return 0x82210F08;
		  /* 82210F08h */ case   14:  		/* ori R9, R9, 12546 */
		/* 82210F08h case   14:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3102);
		/* 82210F08h case   14:*/		return 0x82210F0C;
		  /* 82210F0Ch */ case   15:  		/* stw R9, <#[R11]> */
		/* 82210F0Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F0Ch case   15:*/		return 0x82210F10;
		  /* 82210F10h */ case   16:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210F10h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210F10h case   16:*/		return 0x82210F14;
		  /* 82210F14h */ case   17:  		/* rlwimi R9, R8, 28, 28, 28 */
		/* 82210F14h case   17:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R9,regs.R8);
		/* 82210F14h case   17:*/		return 0x82210F18;
		  /* 82210F18h */ case   18:  		/* stw R9, <#[R11]> */
		/* 82210F18h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F18h case   18:*/		return 0x82210F1C;
		  /* 82210F1Ch */ case   19:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210F1Ch case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210F1Ch case   19:*/		return 0x82210F20;
		  /* 82210F20h */ case   20:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210F20h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210F20h case   20:*/		return 0x82210F24;
		  /* 82210F24h */ case   21:  		/* rlwimi R9, R8, 28, 24, 24 */
		/* 82210F24h case   21:*/		cpu::op::rlwimi<0,28,24,24>(regs,&regs.R9,regs.R8);
		/* 82210F24h case   21:*/		return 0x82210F28;
		  /* 82210F28h */ case   22:  		/* stw R9, <#[R11]> */
		/* 82210F28h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F28h case   22:*/		return 0x82210F2C;
		  /* 82210F2Ch */ case   23:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210F2Ch case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210F2Ch case   23:*/		return 0x82210F30;
		  /* 82210F30h */ case   24:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210F30h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210F30h case   24:*/		return 0x82210F34;
		  /* 82210F34h */ case   25:  		/* rlwimi R9, R8, 8, 20, 20 */
		/* 82210F34h case   25:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R9,regs.R8);
		/* 82210F34h case   25:*/		return 0x82210F38;
		  /* 82210F38h */ case   26:  		/* stw R9, <#[R11]> */
		/* 82210F38h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F38h case   26:*/		return 0x82210F3C;
		  /* 82210F3Ch */ case   27:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210F3Ch case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210F3Ch case   27:*/		return 0x82210F40;
		  /* 82210F40h */ case   28:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210F40h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210F40h case   28:*/		return 0x82210F44;
		  /* 82210F44h */ case   29:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 82210F44h case   29:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 82210F44h case   29:*/		return 0x82210F48;
		  /* 82210F48h */ case   30:  		/* stw R9, <#[R11]> */
		/* 82210F48h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F48h case   30:*/		return 0x82210F4C;
		  /* 82210F4Ch */ case   31:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82210F4Ch case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82210F4Ch case   31:*/		return 0x82210F50;
		  /* 82210F50h */ case   32:  		/* lwz R8, <#[R31 + 32]> */
		/* 82210F50h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 82210F50h case   32:*/		return 0x82210F54;
		  /* 82210F54h */ case   33:  		/* rlwimi R9, R8, 0, 11, 11 */
		/* 82210F54h case   33:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R9,regs.R8);
		/* 82210F54h case   33:*/		return 0x82210F58;
		  /* 82210F58h */ case   34:  		/* stw R9, <#[R11]> */
		/* 82210F58h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F58h case   34:*/		return 0x82210F5C;
		  /* 82210F5Ch */ case   35:  		/* addi R11, R11, 4 */
		/* 82210F5Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210F5Ch case   35:*/		return 0x82210F60;
		  /* 82210F60h */ case   36:  		/* lwz R9, <#[R31 + 20]> */
		/* 82210F60h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82210F60h case   36:*/		return 0x82210F64;
		  /* 82210F64h */ case   37:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82210F64h case   37:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82210F64h case   37:*/		return 0x82210F68;
		  /* 82210F68h */ case   38:  		/* bc 12, CR0_EQ, 16 */
		/* 82210F68h case   38:*/		if ( regs.CR[0].eq ) { return 0x82210F78;  }
		/* 82210F68h case   38:*/		return 0x82210F6C;
		  /* 82210F6Ch */ case   39:  		/* lwz R9, <#[R31 + 44]> */
		/* 82210F6Ch case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 82210F6Ch case   39:*/		return 0x82210F70;
		  /* 82210F70h */ case   40:  		/* stw R9, <#[R11]> */
		/* 82210F70h case   40:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F70h case   40:*/		return 0x82210F74;
		  /* 82210F74h */ case   41:  		/* addi R11, R11, 4 */
		/* 82210F74h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82210F74h case   41:*/		return 0x82210F78;
	}
	return 0x82210F78;
} // Block from 82210ED0h-82210F78h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82210F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210F78);
		  /* 82210F78h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82210F78h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82210F78h case    0:*/		return 0x82210F7C;
		  /* 82210F7Ch */ case    1:  		/* li R9, 17 */
		/* 82210F7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 82210F7Ch case    1:*/		return 0x82210F80;
		  /* 82210F80h */ case    2:  		/* li R8, 5971 */
		/* 82210F80h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1753);
		/* 82210F80h case    2:*/		return 0x82210F84;
		  /* 82210F84h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82210F84h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F84h case    3:*/		return 0x82210F88;
		  /* 82210F88h */ case    4:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 82210F88h case    4:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 82210F88h case    4:*/		return 0x82210F8C;
		  /* 82210F8Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 82210F8Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F8Ch case    5:*/		return 0x82210F90;
		  /* 82210F90h */ case    6:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82210F90h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82210F90h case    6:*/		return 0x82210F94;
		  /* 82210F94h */ case    7:  		/* rlwimi R10, R8, 3, 16, 31 */
		/* 82210F94h case    7:*/		cpu::op::rlwimi<0,3,16,31>(regs,&regs.R10,regs.R8);
		/* 82210F94h case    7:*/		return 0x82210F98;
		  /* 82210F98h */ case    8:  		/* addi R3, R11, 4 */
		/* 82210F98h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82210F98h case    8:*/		return 0x82210F9C;
		  /* 82210F9Ch */ case    9:  		/* stw R10, <#[R11]> */
		/* 82210F9Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82210F9Ch case    9:*/		return 0x82210FA0;
		  /* 82210FA0h */ case   10:  		/* addi R1, R1, 112 */
		/* 82210FA0h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82210FA0h case   10:*/		return 0x82210FA4;
		  /* 82210FA4h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82210FA4h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82210FA4h case   11:*/		return 0x82210FA8;
		  /* 82210FA8h */ case   12:  		/* mtspr LR, R12 */
		/* 82210FA8h case   12:*/		regs.LR = regs.R12;
		/* 82210FA8h case   12:*/		return 0x82210FAC;
		  /* 82210FACh */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 82210FACh case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82210FACh case   13:*/		return 0x82210FB0;
		  /* 82210FB0h */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 82210FB0h case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82210FB0h case   14:*/		return 0x82210FB4;
		  /* 82210FB4h */ case   15:  		/* bclr 20, CR0_LT */
		/* 82210FB4h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82210FB4h case   15:*/		return 0x82210FB8;
	}
	return 0x82210FB8;
} // Block from 82210F78h-82210FB8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82210FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82210FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82210FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82210FB8);
		  /* 82210FB8h */ case    0:  		/* mfspr R12, LR */
		/* 82210FB8h case    0:*/		regs.R12 = regs.LR;
		/* 82210FB8h case    0:*/		return 0x82210FBC;
		  /* 82210FBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82210FBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82210FBCh case    1:*/		return 0x82210FC0;
		  /* 82210FC0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82210FC0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82210FC0h case    2:*/		return 0x82210FC4;
		  /* 82210FC4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82210FC4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82210FC4h case    3:*/		return 0x82210FC8;
		  /* 82210FC8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82210FC8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82210FC8h case    4:*/		return 0x82210FCC;
		  /* 82210FCCh */ case    5:  		/* mr R31, R4 */
		/* 82210FCCh case    5:*/		regs.R31 = regs.R4;
		/* 82210FCCh case    5:*/		return 0x82210FD0;
		  /* 82210FD0h */ case    6:  		/* mr R30, R5 */
		/* 82210FD0h case    6:*/		regs.R30 = regs.R5;
		/* 82210FD0h case    6:*/		return 0x82210FD4;
		  /* 82210FD4h */ case    7:  		/* bl -7596 */
		/* 82210FD4h case    7:*/		regs.LR = 0x82210FD8; return 0x8220F228;
		/* 82210FD4h case    7:*/		return 0x82210FD8;
		  /* 82210FD8h */ case    8:  		/* li R9, 81 */
		/* 82210FD8h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x51);
		/* 82210FD8h case    8:*/		return 0x82210FDC;
		  /* 82210FDCh */ case    9:  		/* rlwinm R8, R3, 0, 16, 31 */
		/* 82210FDCh case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R3);
		/* 82210FDCh case    9:*/		return 0x82210FE0;
		  /* 82210FE0h */ case   10:  		/* sth R9, <#[R30 + 2]> */
		/* 82210FE0h case   10:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x00000002) );
		/* 82210FE0h case   10:*/		return 0x82210FE4;
		  /* 82210FE4h */ case   11:  		/* li R10, 17 */
		/* 82210FE4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x11);
		/* 82210FE4h case   11:*/		return 0x82210FE8;
		  /* 82210FE8h */ case   12:  		/* lwz R7, <#[R30]> */
		/* 82210FE8h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82210FE8h case   12:*/		return 0x82210FEC;
		  /* 82210FECh */ case   13:  		/* addi R11, R30, 4 */
		/* 82210FECh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82210FECh case   13:*/		return 0x82210FF0;
		  /* 82210FF0h */ case   14:  		/* lwz R6, <#[R31]> */
		/* 82210FF0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82210FF0h case   14:*/		return 0x82210FF4;
		  /* 82210FF4h */ case   15:  		/* rlwimi R6, R7, 0, 16, 2 */
		/* 82210FF4h case   15:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R6,regs.R7);
		/* 82210FF4h case   15:*/		return 0x82210FF8;
		  /* 82210FF8h */ case   16:  		/* stw R6, <#[R30]> */
		/* 82210FF8h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 82210FF8h case   16:*/		return 0x82210FFC;
		  /* 82210FFCh */ case   17:  		/* li R7, 1 */
		/* 82210FFCh case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82210FFCh case   17:*/		return 0x82211000;
		  /* 82211000h */ case   18:  		/* sth R8, <#[R30 + 6]> */
		/* 82211000h case   18:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R30 + 0x00000006) );
		/* 82211000h case   18:*/		return 0x82211004;
		  /* 82211004h */ case   19:  		/* li R12, -30584 */
		/* 82211004h case   19:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82211004h case   19:*/		return 0x82211008;
		  /* 82211008h */ case   20:  		/* lwz R6, <#[R30 + 4]> */
		/* 82211008h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82211008h case   20:*/		return 0x8221100C;
		  /* 8221100Ch */ case   21:  		/* rlwimi R6, R10, 18, 8, 15 */
		/* 8221100Ch case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R10);
		/* 8221100Ch case   21:*/		return 0x82211010;
		  /* 82211010h */ case   22:  		/* stw R6, <#[R30 + 4]> */
		/* 82211010h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82211010h case   22:*/		return 0x82211014;
		  /* 82211014h */ case   23:  		/* stwu R7, <#[R11 + 4]> */
		/* 82211014h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211014h case   23:*/		return 0x82211018;
		  /* 82211018h */ case   24:  		/* lwz R6, <#[R31 + 20]> */
		/* 82211018h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82211018h case   24:*/		return 0x8221101C;
		  /* 8221101Ch */ case   25:  		/* addi R11, R11, 4 */
		/* 8221101Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221101Ch case   25:*/		return 0x82211020;
		  /* 82211020h */ case   26:  		/* sth R6, <#[R11 + 2]> */
		/* 82211020h case   26:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211020h case   26:*/		return 0x82211024;
		  /* 82211024h */ case   27:  		/* lwz R6, <#[R11]> */
		/* 82211024h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211024h case   27:*/		return 0x82211028;
		  /* 82211028h */ case   28:  		/* lwz R5, <#[R31 + 20]> */
		/* 82211028h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82211028h case   28:*/		return 0x8221102C;
		  /* 8221102Ch */ case   29:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 8221102Ch case   29:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 8221102Ch case   29:*/		return 0x82211030;
		  /* 82211030h */ case   30:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82211030h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82211030h case   30:*/		return 0x82211034;
		  /* 82211034h */ case   31:  		/* stw R5, <#[R11]> */
		/* 82211034h case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211034h case   31:*/		return 0x82211038;
		  /* 82211038h */ case   32:  		/* lwz R5, <#[R31 + 20]> */
		/* 82211038h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82211038h case   32:*/		return 0x8221103C;
		  /* 8221103Ch */ case   33:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 8221103Ch case   33:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 8221103Ch case   33:*/		return 0x82211040;
		  /* 82211040h */ case   34:  		/* oris R6, R5, 64 */
		/* 82211040h case   34:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 82211040h case   34:*/		return 0x82211044;
		  /* 82211044h */ case   35:  		/* stw R6, <#[R11]> */
		/* 82211044h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211044h case   35:*/		return 0x82211048;
		  /* 82211048h */ case   36:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82211048h case   36:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211048h case   36:*/		return 0x8221104C;
		  /* 8221104Ch */ case   37:  		/* and R6, R6, R12 */
		/* 8221104Ch case   37:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 8221104Ch case   37:*/		return 0x82211050;
		  /* 82211050h */ case   38:  		/* stw R6, <#[R11]> */
		/* 82211050h case   38:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211050h case   38:*/		return 0x82211054;
		  /* 82211054h */ case   39:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211054h case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211054h case   39:*/		return 0x82211058;
		  /* 82211058h */ case   40:  		/* rlwimi R5, R6, 0, 29, 27 */
		/* 82211058h case   40:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R5,regs.R6);
		/* 82211058h case   40:*/		return 0x8221105C;
		  /* 8221105Ch */ case   41:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 8221105Ch case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 8221105Ch case   41:*/		return 0x82211060;
		  /* 82211060h */ case   42:  		/* stw R5, <#[R11]> */
		/* 82211060h case   42:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211060h case   42:*/		return 0x82211064;
		  /* 82211064h */ case   43:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211064h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211064h case   43:*/		return 0x82211068;
		  /* 82211068h */ case   44:  		/* rlwimi R6, R5, 4, 24, 24 */
		/* 82211068h case   44:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R6,regs.R5);
		/* 82211068h case   44:*/		return 0x8221106C;
		  /* 8221106Ch */ case   45:  		/* stw R6, <#[R11]> */
		/* 8221106Ch case   45:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221106Ch case   45:*/		return 0x82211070;
		  /* 82211070h */ case   46:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82211070h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82211070h case   46:*/		return 0x82211074;
		  /* 82211074h */ case   47:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211074h case   47:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211074h case   47:*/		return 0x82211078;
		  /* 82211078h */ case   48:  		/* rlwimi R6, R5, 8, 20, 20 */
		/* 82211078h case   48:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R6,regs.R5);
		/* 82211078h case   48:*/		return 0x8221107C;
		  /* 8221107Ch */ case   49:  		/* stw R6, <#[R11]> */
		/* 8221107Ch case   49:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221107Ch case   49:*/		return 0x82211080;
		  /* 82211080h */ case   50:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82211080h case   50:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82211080h case   50:*/		return 0x82211084;
		  /* 82211084h */ case   51:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211084h case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211084h case   51:*/		return 0x82211088;
		  /* 82211088h */ case   52:  		/* rlwimi R6, R5, 12, 16, 16 */
		/* 82211088h case   52:*/		cpu::op::rlwimi<0,12,16,16>(regs,&regs.R6,regs.R5);
		/* 82211088h case   52:*/		return 0x8221108C;
		  /* 8221108Ch */ case   53:  		/* stw R6, <#[R11]> */
		/* 8221108Ch case   53:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221108Ch case   53:*/		return 0x82211090;
		  /* 82211090h */ case   54:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82211090h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82211090h case   54:*/		return 0x82211094;
		  /* 82211094h */ case   55:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211094h case   55:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211094h case   55:*/		return 0x82211098;
		  /* 82211098h */ case   56:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 82211098h case   56:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 82211098h case   56:*/		return 0x8221109C;
		  /* 8221109Ch */ case   57:  		/* stw R5, <#[R11]> */
		/* 8221109Ch case   57:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221109Ch case   57:*/		return 0x822110A0;
		  /* 822110A0h */ case   58:  		/* addi R11, R11, 4 */
		/* 822110A0h case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822110A0h case   58:*/		return 0x822110A4;
		  /* 822110A4h */ case   59:  		/* lwz R6, <#[R31 + 20]> */
		/* 822110A4h case   59:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 822110A4h case   59:*/		return 0x822110A8;
		  /* 822110A8h */ case   60:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 822110A8h case   60:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 822110A8h case   60:*/		return 0x822110AC;
		  /* 822110ACh */ case   61:  		/* bc 12, CR0_EQ, 16 */
		/* 822110ACh case   61:*/		if ( regs.CR[0].eq ) { return 0x822110BC;  }
		/* 822110ACh case   61:*/		return 0x822110B0;
		  /* 822110B0h */ case   62:  		/* lwz R6, <#[R31 + 44]> */
		/* 822110B0h case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 822110B0h case   62:*/		return 0x822110B4;
		  /* 822110B4h */ case   63:  		/* stw R6, <#[R11]> */
		/* 822110B4h case   63:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822110B4h case   63:*/		return 0x822110B8;
	}
	return 0x822110B8;
} // Block from 82210FB8h-822110B8h (64 instructions)

//////////////////////////////////////////////////////
// Block at 822110B8h
// Function '?DoAbs@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822110B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822110B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822110B8);
		  /* 822110B8h */ case    0:  		/* addi R11, R11, 4 */
		/* 822110B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822110B8h case    0:*/		return 0x822110BC;
	}
	return 0x822110BC;
} // Block from 822110B8h-822110BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822110BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822110BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822110BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822110BC);
		  /* 822110BCh */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 822110BCh case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822110BCh case    0:*/		return 0x822110C0;
		  /* 822110C0h */ case    1:  		/* li R6, 4 */
		/* 822110C0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 822110C0h case    1:*/		return 0x822110C4;
		  /* 822110C4h */ case    2:  		/* lwz R5, <#[R11]> */
		/* 822110C4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822110C4h case    2:*/		return 0x822110C8;
		  /* 822110C8h */ case    3:  		/* li R12, -26215 */
		/* 822110C8h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 822110C8h case    3:*/		return 0x822110CC;
		  /* 822110CCh */ case    4:  		/* lwz R4, <#[R31]> */
		/* 822110CCh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 822110CCh case    4:*/		return 0x822110D0;
		  /* 822110D0h */ case    5:  		/* rlwimi R4, R5, 0, 16, 2 */
		/* 822110D0h case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R4,regs.R5);
		/* 822110D0h case    5:*/		return 0x822110D4;
		  /* 822110D4h */ case    6:  		/* stw R4, <#[R11]> */
		/* 822110D4h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822110D4h case    6:*/		return 0x822110D8;
		  /* 822110D8h */ case    7:  		/* addi R11, R11, 4 */
		/* 822110D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822110D8h case    7:*/		return 0x822110DC;
		  /* 822110DCh */ case    8:  		/* sth R8, <#[R11 + 2]> */
		/* 822110DCh case    8:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822110DCh case    8:*/		return 0x822110E0;
		  /* 822110E0h */ case    9:  		/* lwz R5, <#[R11]> */
		/* 822110E0h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822110E0h case    9:*/		return 0x822110E4;
		  /* 822110E4h */ case   10:  		/* rlwimi R5, R10, 18, 8, 15 */
		/* 822110E4h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R10);
		/* 822110E4h case   10:*/		return 0x822110E8;
		  /* 822110E8h */ case   11:  		/* stw R5, <#[R11]> */
		/* 822110E8h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822110E8h case   11:*/		return 0x822110EC;
		  /* 822110ECh */ case   12:  		/* stwu R6, <#[R11 + 4]> */
		/* 822110ECh case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822110ECh case   12:*/		return 0x822110F0;
		  /* 822110F0h */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 822110F0h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 822110F0h case   13:*/		return 0x822110F4;
		  /* 822110F4h */ case   14:  		/* addi R11, R11, 4 */
		/* 822110F4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822110F4h case   14:*/		return 0x822110F8;
		  /* 822110F8h */ case   15:  		/* sth R6, <#[R11 + 2]> */
		/* 822110F8h case   15:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822110F8h case   15:*/		return 0x822110FC;
		  /* 822110FCh */ case   16:  		/* lwz R6, <#[R11]> */
		/* 822110FCh case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822110FCh case   16:*/		return 0x82211100;
		  /* 82211100h */ case   17:  		/* lwz R5, <#[R31 + 20]> */
		/* 82211100h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82211100h case   17:*/		return 0x82211104;
		  /* 82211104h */ case   18:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 82211104h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 82211104h case   18:*/		return 0x82211108;
		  /* 82211108h */ case   19:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82211108h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82211108h case   19:*/		return 0x8221110C;
		  /* 8221110Ch */ case   20:  		/* stw R5, <#[R11]> */
		/* 8221110Ch case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221110Ch case   20:*/		return 0x82211110;
		  /* 82211110h */ case   21:  		/* lwz R5, <#[R31 + 20]> */
		/* 82211110h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82211110h case   21:*/		return 0x82211114;
		  /* 82211114h */ case   22:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 82211114h case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 82211114h case   22:*/		return 0x82211118;
		  /* 82211118h */ case   23:  		/* oris R6, R5, 64 */
		/* 82211118h case   23:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 82211118h case   23:*/		return 0x8221111C;
		  /* 8221111Ch */ case   24:  		/* stw R6, <#[R11]> */
		/* 8221111Ch case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221111Ch case   24:*/		return 0x82211120;
		  /* 82211120h */ case   25:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82211120h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211120h case   25:*/		return 0x82211124;
		  /* 82211124h */ case   26:  		/* and R6, R6, R12 */
		/* 82211124h case   26:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 82211124h case   26:*/		return 0x82211128;
		  /* 82211128h */ case   27:  		/* ori R6, R6, 4369 */
		/* 82211128h case   27:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x1111);
		/* 82211128h case   27:*/		return 0x8221112C;
		  /* 8221112Ch */ case   28:  		/* mr R5, R6 */
		/* 8221112Ch case   28:*/		regs.R5 = regs.R6;
		/* 8221112Ch case   28:*/		return 0x82211130;
		  /* 82211130h */ case   29:  		/* stw R6, <#[R11]> */
		/* 82211130h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211130h case   29:*/		return 0x82211134;
		  /* 82211134h */ case   30:  		/* lwz R6, <#[R31 + 32]> */
		/* 82211134h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000020) );
		/* 82211134h case   30:*/		return 0x82211138;
		  /* 82211138h */ case   31:  		/* rlwimi R5, R6, 28, 28, 28 */
		/* 82211138h case   31:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R5,regs.R6);
		/* 82211138h case   31:*/		return 0x8221113C;
		  /* 8221113Ch */ case   32:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 8221113Ch case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 8221113Ch case   32:*/		return 0x82211140;
		  /* 82211140h */ case   33:  		/* stw R5, <#[R11]> */
		/* 82211140h case   33:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211140h case   33:*/		return 0x82211144;
		  /* 82211144h */ case   34:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211144h case   34:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211144h case   34:*/		return 0x82211148;
		  /* 82211148h */ case   35:  		/* rlwimi R5, R6, 0, 25, 23 */
		/* 82211148h case   35:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R5,regs.R6);
		/* 82211148h case   35:*/		return 0x8221114C;
		  /* 8221114Ch */ case   36:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 8221114Ch case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 8221114Ch case   36:*/		return 0x82211150;
		  /* 82211150h */ case   37:  		/* stw R5, <#[R11]> */
		/* 82211150h case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211150h case   37:*/		return 0x82211154;
		  /* 82211154h */ case   38:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211154h case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211154h case   38:*/		return 0x82211158;
		  /* 82211158h */ case   39:  		/* rlwimi R6, R5, 4, 20, 20 */
		/* 82211158h case   39:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R6,regs.R5);
		/* 82211158h case   39:*/		return 0x8221115C;
		  /* 8221115Ch */ case   40:  		/* stw R6, <#[R11]> */
		/* 8221115Ch case   40:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221115Ch case   40:*/		return 0x82211160;
		  /* 82211160h */ case   41:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82211160h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82211160h case   41:*/		return 0x82211164;
		  /* 82211164h */ case   42:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211164h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211164h case   42:*/		return 0x82211168;
		  /* 82211168h */ case   43:  		/* rlwimi R6, R5, 8, 16, 16 */
		/* 82211168h case   43:*/		cpu::op::rlwimi<0,8,16,16>(regs,&regs.R6,regs.R5);
		/* 82211168h case   43:*/		return 0x8221116C;
		  /* 8221116Ch */ case   44:  		/* stw R6, <#[R11]> */
		/* 8221116Ch case   44:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221116Ch case   44:*/		return 0x82211170;
		  /* 82211170h */ case   45:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82211170h case   45:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82211170h case   45:*/		return 0x82211174;
		  /* 82211174h */ case   46:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211174h case   46:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211174h case   46:*/		return 0x82211178;
		  /* 82211178h */ case   47:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 82211178h case   47:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 82211178h case   47:*/		return 0x8221117C;
		  /* 8221117Ch */ case   48:  		/* stw R5, <#[R11]> */
		/* 8221117Ch case   48:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221117Ch case   48:*/		return 0x82211180;
		  /* 82211180h */ case   49:  		/* lwz R6, <#[R31 + 20]> */
		/* 82211180h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82211180h case   49:*/		return 0x82211184;
		  /* 82211184h */ case   50:  		/* addi R11, R11, 4 */
		/* 82211184h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211184h case   50:*/		return 0x82211188;
		  /* 82211188h */ case   51:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 82211188h case   51:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 82211188h case   51:*/		return 0x8221118C;
		  /* 8221118Ch */ case   52:  		/* bc 12, CR0_EQ, 16 */
		/* 8221118Ch case   52:*/		if ( regs.CR[0].eq ) { return 0x8221119C;  }
		/* 8221118Ch case   52:*/		return 0x82211190;
		  /* 82211190h */ case   53:  		/* lwz R6, <#[R31 + 44]> */
		/* 82211190h case   53:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 82211190h case   53:*/		return 0x82211194;
		  /* 82211194h */ case   54:  		/* stw R6, <#[R11]> */
		/* 82211194h case   54:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211194h case   54:*/		return 0x82211198;
		  /* 82211198h */ case   55:  		/* addi R11, R11, 4 */
		/* 82211198h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211198h case   55:*/		return 0x8221119C;
	}
	return 0x8221119C;
} // Block from 822110BCh-8221119Ch (56 instructions)

//////////////////////////////////////////////////////
// Block at 8221119Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221119C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221119C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221119C);
		  /* 8221119Ch */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 8221119Ch case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221119Ch case    0:*/		return 0x822111A0;
		  /* 822111A0h */ case    1:  		/* li R6, 16 */
		/* 822111A0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 822111A0h case    1:*/		return 0x822111A4;
		  /* 822111A4h */ case    2:  		/* li R12, -21846 */
		/* 822111A4h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 822111A4h case    2:*/		return 0x822111A8;
		  /* 822111A8h */ case    3:  		/* lwz R5, <#[R11]> */
		/* 822111A8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822111A8h case    3:*/		return 0x822111AC;
		  /* 822111ACh */ case    4:  		/* lwz R4, <#[R31]> */
		/* 822111ACh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 822111ACh case    4:*/		return 0x822111B0;
		  /* 822111B0h */ case    5:  		/* rlwimi R4, R5, 0, 16, 2 */
		/* 822111B0h case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R4,regs.R5);
		/* 822111B0h case    5:*/		return 0x822111B4;
		  /* 822111B4h */ case    6:  		/* stw R4, <#[R11]> */
		/* 822111B4h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822111B4h case    6:*/		return 0x822111B8;
		  /* 822111B8h */ case    7:  		/* addi R11, R11, 4 */
		/* 822111B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822111B8h case    7:*/		return 0x822111BC;
		  /* 822111BCh */ case    8:  		/* sth R8, <#[R11 + 2]> */
		/* 822111BCh case    8:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822111BCh case    8:*/		return 0x822111C0;
		  /* 822111C0h */ case    9:  		/* lwz R5, <#[R11]> */
		/* 822111C0h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822111C0h case    9:*/		return 0x822111C4;
		  /* 822111C4h */ case   10:  		/* rlwimi R5, R10, 18, 8, 15 */
		/* 822111C4h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R10);
		/* 822111C4h case   10:*/		return 0x822111C8;
		  /* 822111C8h */ case   11:  		/* stw R5, <#[R11]> */
		/* 822111C8h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822111C8h case   11:*/		return 0x822111CC;
		  /* 822111CCh */ case   12:  		/* stwu R6, <#[R11 + 4]> */
		/* 822111CCh case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822111CCh case   12:*/		return 0x822111D0;
		  /* 822111D0h */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 822111D0h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 822111D0h case   13:*/		return 0x822111D4;
		  /* 822111D4h */ case   14:  		/* addi R11, R11, 4 */
		/* 822111D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822111D4h case   14:*/		return 0x822111D8;
		  /* 822111D8h */ case   15:  		/* sth R6, <#[R11 + 2]> */
		/* 822111D8h case   15:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822111D8h case   15:*/		return 0x822111DC;
		  /* 822111DCh */ case   16:  		/* lwz R5, <#[R31 + 20]> */
		/* 822111DCh case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 822111DCh case   16:*/		return 0x822111E0;
		  /* 822111E0h */ case   17:  		/* lwz R6, <#[R11]> */
		/* 822111E0h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822111E0h case   17:*/		return 0x822111E4;
		  /* 822111E4h */ case   18:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 822111E4h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 822111E4h case   18:*/		return 0x822111E8;
		  /* 822111E8h */ case   19:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 822111E8h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 822111E8h case   19:*/		return 0x822111EC;
		  /* 822111ECh */ case   20:  		/* stw R5, <#[R11]> */
		/* 822111ECh case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822111ECh case   20:*/		return 0x822111F0;
		  /* 822111F0h */ case   21:  		/* lwz R5, <#[R31 + 20]> */
		/* 822111F0h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 822111F0h case   21:*/		return 0x822111F4;
		  /* 822111F4h */ case   22:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 822111F4h case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 822111F4h case   22:*/		return 0x822111F8;
		  /* 822111F8h */ case   23:  		/* oris R6, R5, 64 */
		/* 822111F8h case   23:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 822111F8h case   23:*/		return 0x822111FC;
		  /* 822111FCh */ case   24:  		/* stw R6, <#[R11]> */
		/* 822111FCh case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822111FCh case   24:*/		return 0x82211200;
		  /* 82211200h */ case   25:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82211200h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211200h case   25:*/		return 0x82211204;
		  /* 82211204h */ case   26:  		/* and R6, R6, R12 */
		/* 82211204h case   26:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 82211204h case   26:*/		return 0x82211208;
		  /* 82211208h */ case   27:  		/* ori R6, R6, 8738 */
		/* 82211208h case   27:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2222);
		/* 82211208h case   27:*/		return 0x8221120C;
		  /* 8221120Ch */ case   28:  		/* stw R6, <#[R11]> */
		/* 8221120Ch case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221120Ch case   28:*/		return 0x82211210;
		  /* 82211210h */ case   29:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211210h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211210h case   29:*/		return 0x82211214;
		  /* 82211214h */ case   30:  		/* rlwimi R6, R5, 24, 28, 28 */
		/* 82211214h case   30:*/		cpu::op::rlwimi<0,24,28,28>(regs,&regs.R6,regs.R5);
		/* 82211214h case   30:*/		return 0x82211218;
		  /* 82211218h */ case   31:  		/* stw R6, <#[R11]> */
		/* 82211218h case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211218h case   31:*/		return 0x8221121C;
		  /* 8221121Ch */ case   32:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 8221121Ch case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 8221121Ch case   32:*/		return 0x82211220;
		  /* 82211220h */ case   33:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211220h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211220h case   33:*/		return 0x82211224;
		  /* 82211224h */ case   34:  		/* rlwimi R6, R5, 28, 24, 24 */
		/* 82211224h case   34:*/		cpu::op::rlwimi<0,28,24,24>(regs,&regs.R6,regs.R5);
		/* 82211224h case   34:*/		return 0x82211228;
		  /* 82211228h */ case   35:  		/* stw R6, <#[R11]> */
		/* 82211228h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211228h case   35:*/		return 0x8221122C;
		  /* 8221122Ch */ case   36:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 8221122Ch case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 8221122Ch case   36:*/		return 0x82211230;
		  /* 82211230h */ case   37:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211230h case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211230h case   37:*/		return 0x82211234;
		  /* 82211234h */ case   38:  		/* rlwimi R5, R6, 0, 21, 19 */
		/* 82211234h case   38:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R5,regs.R6);
		/* 82211234h case   38:*/		return 0x82211238;
		  /* 82211238h */ case   39:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82211238h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82211238h case   39:*/		return 0x8221123C;
		  /* 8221123Ch */ case   40:  		/* stw R5, <#[R11]> */
		/* 8221123Ch case   40:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221123Ch case   40:*/		return 0x82211240;
		  /* 82211240h */ case   41:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211240h case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211240h case   41:*/		return 0x82211244;
		  /* 82211244h */ case   42:  		/* rlwimi R6, R5, 4, 16, 16 */
		/* 82211244h case   42:*/		cpu::op::rlwimi<0,4,16,16>(regs,&regs.R6,regs.R5);
		/* 82211244h case   42:*/		return 0x82211248;
		  /* 82211248h */ case   43:  		/* stw R6, <#[R11]> */
		/* 82211248h case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211248h case   43:*/		return 0x8221124C;
		  /* 8221124Ch */ case   44:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 8221124Ch case   44:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 8221124Ch case   44:*/		return 0x82211250;
		  /* 82211250h */ case   45:  		/* lwz R5, <#[R31 + 32]> */
		/* 82211250h case   45:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82211250h case   45:*/		return 0x82211254;
		  /* 82211254h */ case   46:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 82211254h case   46:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 82211254h case   46:*/		return 0x82211258;
	}
	return 0x82211258;
} // Block from 8221119Ch-82211258h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82211258h
// Function '?DoCmp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211258);
		  /* 82211258h */ case    0:  		/* stw R5, <#[R11]> */
		/* 82211258h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211258h case    0:*/		return 0x8221125C;
		  /* 8221125Ch */ case    1:  		/* lwz R6, <#[R31 + 20]> */
		/* 8221125Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 8221125Ch case    1:*/		return 0x82211260;
		  /* 82211260h */ case    2:  		/* addi R11, R11, 4 */
		/* 82211260h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211260h case    2:*/		return 0x82211264;
		  /* 82211264h */ case    3:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 82211264h case    3:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 82211264h case    3:*/		return 0x82211268;
		  /* 82211268h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82211268h case    4:*/		if ( regs.CR[0].eq ) { return 0x82211278;  }
		/* 82211268h case    4:*/		return 0x8221126C;
		  /* 8221126Ch */ case    5:  		/* lwz R6, <#[R31 + 44]> */
		/* 8221126Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221126Ch case    5:*/		return 0x82211270;
		  /* 82211270h */ case    6:  		/* stw R6, <#[R11]> */
		/* 82211270h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211270h case    6:*/		return 0x82211274;
		  /* 82211274h */ case    7:  		/* addi R11, R11, 4 */
		/* 82211274h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211274h case    7:*/		return 0x82211278;
	}
	return 0x82211278;
} // Block from 82211258h-82211278h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82211278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211278);
		  /* 82211278h */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 82211278h case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211278h case    0:*/		return 0x8221127C;
		  /* 8221127Ch */ case    1:  		/* li R9, 64 */
		/* 8221127Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 8221127Ch case    1:*/		return 0x82211280;
		  /* 82211280h */ case    2:  		/* li R12, -17477 */
		/* 82211280h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82211280h case    2:*/		return 0x82211284;
		  /* 82211284h */ case    3:  		/* lwz R6, <#[R11]> */
		/* 82211284h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211284h case    3:*/		return 0x82211288;
		  /* 82211288h */ case    4:  		/* lwz R5, <#[R31]> */
		/* 82211288h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82211288h case    4:*/		return 0x8221128C;
		  /* 8221128Ch */ case    5:  		/* rlwimi R5, R6, 0, 16, 2 */
		/* 8221128Ch case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R5,regs.R6);
		/* 8221128Ch case    5:*/		return 0x82211290;
		  /* 82211290h */ case    6:  		/* stw R5, <#[R11]> */
		/* 82211290h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211290h case    6:*/		return 0x82211294;
		  /* 82211294h */ case    7:  		/* addi R11, R11, 4 */
		/* 82211294h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211294h case    7:*/		return 0x82211298;
		  /* 82211298h */ case    8:  		/* sth R8, <#[R11 + 2]> */
		/* 82211298h case    8:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82211298h case    8:*/		return 0x8221129C;
		  /* 8221129Ch */ case    9:  		/* lwz R6, <#[R11]> */
		/* 8221129Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221129Ch case    9:*/		return 0x822112A0;
		  /* 822112A0h */ case   10:  		/* rlwimi R6, R10, 18, 8, 15 */
		/* 822112A0h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R10);
		/* 822112A0h case   10:*/		return 0x822112A4;
		  /* 822112A4h */ case   11:  		/* stw R6, <#[R11]> */
		/* 822112A4h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822112A4h case   11:*/		return 0x822112A8;
		  /* 822112A8h */ case   12:  		/* stwu R9, <#[R11 + 4]> */
		/* 822112A8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822112A8h case   12:*/		return 0x822112AC;
		  /* 822112ACh */ case   13:  		/* addi R11, R11, 4 */
		/* 822112ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822112ACh case   13:*/		return 0x822112B0;
		  /* 822112B0h */ case   14:  		/* lwz R10, <#[R31 + 20]> */
		/* 822112B0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 822112B0h case   14:*/		return 0x822112B4;
		  /* 822112B4h */ case   15:  		/* sth R10, <#[R11 + 2]> */
		/* 822112B4h case   15:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822112B4h case   15:*/		return 0x822112B8;
		  /* 822112B8h */ case   16:  		/* lwz R9, <#[R31 + 20]> */
		/* 822112B8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 822112B8h case   16:*/		return 0x822112BC;
		  /* 822112BCh */ case   17:  		/* lwz R10, <#[R11]> */
		/* 822112BCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822112BCh case   17:*/		return 0x822112C0;
		  /* 822112C0h */ case   18:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 822112C0h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 822112C0h case   18:*/		return 0x822112C4;
		  /* 822112C4h */ case   19:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822112C4h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822112C4h case   19:*/		return 0x822112C8;
		  /* 822112C8h */ case   20:  		/* stw R9, <#[R11]> */
		/* 822112C8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822112C8h case   20:*/		return 0x822112CC;
		  /* 822112CCh */ case   21:  		/* lwz R9, <#[R31 + 20]> */
		/* 822112CCh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 822112CCh case   21:*/		return 0x822112D0;
		  /* 822112D0h */ case   22:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 822112D0h case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 822112D0h case   22:*/		return 0x822112D4;
		  /* 822112D4h */ case   23:  		/* oris R10, R9, 64 */
		/* 822112D4h case   23:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 822112D4h case   23:*/		return 0x822112D8;
		  /* 822112D8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 822112D8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822112D8h case   24:*/		return 0x822112DC;
		  /* 822112DCh */ case   25:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822112DCh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822112DCh case   25:*/		return 0x822112E0;
		  /* 822112E0h */ case   26:  		/* and R10, R10, R12 */
		/* 822112E0h case   26:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 822112E0h case   26:*/		return 0x822112E4;
		  /* 822112E4h */ case   27:  		/* ori R10, R10, 13107 */
		/* 822112E4h case   27:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3333);
		/* 822112E4h case   27:*/		return 0x822112E8;
		  /* 822112E8h */ case   28:  		/* stw R10, <#[R11]> */
		/* 822112E8h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822112E8h case   28:*/		return 0x822112EC;
		  /* 822112ECh */ case   29:  		/* lwz R9, <#[R31 + 32]> */
		/* 822112ECh case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 822112ECh case   29:*/		return 0x822112F0;
		  /* 822112F0h */ case   30:  		/* rlwimi R10, R9, 20, 28, 28 */
		/* 822112F0h case   30:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R10,regs.R9);
		/* 822112F0h case   30:*/		return 0x822112F4;
		  /* 822112F4h */ case   31:  		/* stw R10, <#[R11]> */
		/* 822112F4h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822112F4h case   31:*/		return 0x822112F8;
		  /* 822112F8h */ case   32:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822112F8h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822112F8h case   32:*/		return 0x822112FC;
		  /* 822112FCh */ case   33:  		/* lwz R9, <#[R31 + 32]> */
		/* 822112FCh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 822112FCh case   33:*/		return 0x82211300;
		  /* 82211300h */ case   34:  		/* rlwimi R10, R9, 24, 24, 24 */
		/* 82211300h case   34:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R10,regs.R9);
		/* 82211300h case   34:*/		return 0x82211304;
		  /* 82211304h */ case   35:  		/* stw R10, <#[R11]> */
		/* 82211304h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211304h case   35:*/		return 0x82211308;
		  /* 82211308h */ case   36:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82211308h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82211308h case   36:*/		return 0x8221130C;
		  /* 8221130Ch */ case   37:  		/* lwz R9, <#[R31 + 32]> */
		/* 8221130Ch case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8221130Ch case   37:*/		return 0x82211310;
		  /* 82211310h */ case   38:  		/* rlwimi R10, R9, 28, 20, 20 */
		/* 82211310h case   38:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R10,regs.R9);
		/* 82211310h case   38:*/		return 0x82211314;
		  /* 82211314h */ case   39:  		/* stw R10, <#[R11]> */
		/* 82211314h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211314h case   39:*/		return 0x82211318;
		  /* 82211318h */ case   40:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82211318h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82211318h case   40:*/		return 0x8221131C;
		  /* 8221131Ch */ case   41:  		/* lwz R9, <#[R31 + 32]> */
		/* 8221131Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8221131Ch case   41:*/		return 0x82211320;
		  /* 82211320h */ case   42:  		/* rlwimi R9, R10, 0, 17, 15 */
		/* 82211320h case   42:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R9,regs.R10);
		/* 82211320h case   42:*/		return 0x82211324;
		  /* 82211324h */ case   43:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82211324h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82211324h case   43:*/		return 0x82211328;
		  /* 82211328h */ case   44:  		/* stw R9, <#[R11]> */
		/* 82211328h case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211328h case   44:*/		return 0x8221132C;
		  /* 8221132Ch */ case   45:  		/* lwz R9, <#[R31 + 32]> */
		/* 8221132Ch case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8221132Ch case   45:*/		return 0x82211330;
		  /* 82211330h */ case   46:  		/* rlwimi R9, R10, 0, 12, 10 */
		/* 82211330h case   46:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R9,regs.R10);
		/* 82211330h case   46:*/		return 0x82211334;
		  /* 82211334h */ case   47:  		/* stw R9, <#[R11]> */
		/* 82211334h case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211334h case   47:*/		return 0x82211338;
		  /* 82211338h */ case   48:  		/* addi R11, R11, 4 */
		/* 82211338h case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211338h case   48:*/		return 0x8221133C;
		  /* 8221133Ch */ case   49:  		/* lwz R10, <#[R31 + 20]> */
		/* 8221133Ch case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8221133Ch case   49:*/		return 0x82211340;
		  /* 82211340h */ case   50:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82211340h case   50:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82211340h case   50:*/		return 0x82211344;
		  /* 82211344h */ case   51:  		/* bc 12, CR0_EQ, 16 */
		/* 82211344h case   51:*/		if ( regs.CR[0].eq ) { return 0x82211354;  }
		/* 82211344h case   51:*/		return 0x82211348;
		  /* 82211348h */ case   52:  		/* lwz R10, <#[R31 + 44]> */
		/* 82211348h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 82211348h case   52:*/		return 0x8221134C;
		  /* 8221134Ch */ case   53:  		/* stw R10, <#[R11]> */
		/* 8221134Ch case   53:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221134Ch case   53:*/		return 0x82211350;
		  /* 82211350h */ case   54:  		/* addi R11, R11, 4 */
		/* 82211350h case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211350h case   54:*/		return 0x82211354;
	}
	return 0x82211354;
} // Block from 82211278h-82211354h (55 instructions)

//////////////////////////////////////////////////////
// Block at 82211354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211354);
		  /* 82211354h */ case    0:  		/* li R10, 73 */
		/* 82211354h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x49);
		/* 82211354h case    0:*/		return 0x82211358;
		  /* 82211358h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82211358h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211358h case    1:*/		return 0x8221135C;
		  /* 8221135Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8221135Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221135Ch case    2:*/		return 0x82211360;
		  /* 82211360h */ case    3:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82211360h case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82211360h case    3:*/		return 0x82211364;
		  /* 82211364h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82211364h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211364h case    4:*/		return 0x82211368;
		  /* 82211368h */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 82211368h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82211368h case    5:*/		return 0x8221136C;
		  /* 8221136Ch */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 8221136Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221136Ch case    6:*/		return 0x82211370;
		  /* 82211370h */ case    7:  		/* lwz R10, <#[R31 + 4]> */
		/* 82211370h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82211370h case    7:*/		return 0x82211374;
		  /* 82211374h */ case    8:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82211374h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82211374h case    8:*/		return 0x82211378;
		  /* 82211378h */ case    9:  		/* addi R11, R11, 4 */
		/* 82211378h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211378h case    9:*/		return 0x8221137C;
		  /* 8221137Ch */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 8221137Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x8221138C;  }
		/* 8221137Ch case   10:*/		return 0x82211380;
		  /* 82211380h */ case   11:  		/* lwz R10, <#[R31 + 8]> */
		/* 82211380h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82211380h case   11:*/		return 0x82211384;
		  /* 82211384h */ case   12:  		/* stw R10, <#[R11]> */
		/* 82211384h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211384h case   12:*/		return 0x82211388;
		  /* 82211388h */ case   13:  		/* addi R11, R11, 4 */
		/* 82211388h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211388h case   13:*/		return 0x8221138C;
	}
	return 0x8221138C;
} // Block from 82211354h-8221138Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221138Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221138C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221138C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221138C);
		  /* 8221138Ch */ case    0:  		/* lwz R10, <#[R31 + 4]> */
		/* 8221138Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8221138Ch case    0:*/		return 0x82211390;
		  /* 82211390h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82211390h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82211390h case    1:*/		return 0x82211394;
		  /* 82211394h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82211394h case    2:*/		if ( regs.CR[0].eq ) { return 0x822113A4;  }
		/* 82211394h case    2:*/		return 0x82211398;
		  /* 82211398h */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 82211398h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82211398h case    3:*/		return 0x8221139C;
		  /* 8221139Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 8221139Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221139Ch case    4:*/		return 0x822113A0;
		  /* 822113A0h */ case    5:  		/* addi R11, R11, 4 */
		/* 822113A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822113A0h case    5:*/		return 0x822113A4;
	}
	return 0x822113A4;
} // Block from 8221138Ch-822113A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822113A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822113A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822113A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822113A4);
		  /* 822113A4h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 822113A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 822113A4h case    0:*/		return 0x822113A8;
		  /* 822113A8h */ case    1:  		/* stw R10, <#[R11]> */
		/* 822113A8h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822113A8h case    1:*/		return 0x822113AC;
		  /* 822113ACh */ case    2:  		/* addi R11, R11, 4 */
		/* 822113ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822113ACh case    2:*/		return 0x822113B0;
		  /* 822113B0h */ case    3:  		/* lwz R10, <#[R31 + 16]> */
		/* 822113B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 822113B0h case    3:*/		return 0x822113B4;
		  /* 822113B4h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 822113B4h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 822113B4h case    4:*/		return 0x822113B8;
		  /* 822113B8h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 822113B8h case    5:*/		if ( regs.CR[0].eq ) { return 0x822113C8;  }
		/* 822113B8h case    5:*/		return 0x822113BC;
		  /* 822113BCh */ case    6:  		/* lwz R10, <#[R31 + 28]> */
		/* 822113BCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 822113BCh case    6:*/		return 0x822113C0;
		  /* 822113C0h */ case    7:  		/* stw R10, <#[R11]> */
		/* 822113C0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822113C0h case    7:*/		return 0x822113C4;
		  /* 822113C4h */ case    8:  		/* addi R11, R11, 4 */
		/* 822113C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822113C4h case    8:*/		return 0x822113C8;
	}
	return 0x822113C8;
} // Block from 822113A4h-822113C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822113C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822113C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822113C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822113C8);
		  /* 822113C8h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 822113C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 822113C8h case    0:*/		return 0x822113CC;
		  /* 822113CCh */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822113CCh case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822113CCh case    1:*/		return 0x822113D0;
		  /* 822113D0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822113D0h case    2:*/		if ( regs.CR[0].eq ) { return 0x822113E0;  }
		/* 822113D0h case    2:*/		return 0x822113D4;
		  /* 822113D4h */ case    3:  		/* lwz R10, <#[R31 + 40]> */
		/* 822113D4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 822113D4h case    3:*/		return 0x822113D8;
		  /* 822113D8h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822113D8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822113D8h case    4:*/		return 0x822113DC;
		  /* 822113DCh */ case    5:  		/* addi R11, R11, 4 */
		/* 822113DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822113DCh case    5:*/		return 0x822113E0;
	}
	return 0x822113E0;
} // Block from 822113C8h-822113E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822113E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822113E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822113E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822113E0);
		  /* 822113E0h */ case    0:  		/* sth R8, <#[R11 + 2]> */
		/* 822113E0h case    0:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822113E0h case    0:*/		return 0x822113E4;
		  /* 822113E4h */ case    1:  		/* addi R3, R11, 4 */
		/* 822113E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822113E4h case    1:*/		return 0x822113E8;
		  /* 822113E8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 822113E8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822113E8h case    2:*/		return 0x822113EC;
		  /* 822113ECh */ case    3:  		/* rlwimi R10, R7, 18, 8, 15 */
		/* 822113ECh case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R7);
		/* 822113ECh case    3:*/		return 0x822113F0;
		  /* 822113F0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822113F0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822113F0h case    4:*/		return 0x822113F4;
		  /* 822113F4h */ case    5:  		/* addi R1, R1, 112 */
		/* 822113F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822113F4h case    5:*/		return 0x822113F8;
		  /* 822113F8h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 822113F8h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822113F8h case    6:*/		return 0x822113FC;
		  /* 822113FCh */ case    7:  		/* mtspr LR, R12 */
		/* 822113FCh case    7:*/		regs.LR = regs.R12;
		/* 822113FCh case    7:*/		return 0x82211400;
		  /* 82211400h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 82211400h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82211400h case    8:*/		return 0x82211404;
		  /* 82211404h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82211404h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82211404h case    9:*/		return 0x82211408;
		  /* 82211408h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82211408h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82211408h case   10:*/		return 0x8221140C;
	}
	return 0x8221140C;
} // Block from 822113E0h-8221140Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221140Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221140C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221140C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221140C);
		  /* 8221140Ch */ case    0:  		/* nop */
		/* 8221140Ch case    0:*/		cpu::op::nop();
		/* 8221140Ch case    0:*/		return 0x82211410;
	}
	return 0x82211410;
} // Block from 8221140Ch-82211410h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82211410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211410);
		  /* 82211410h */ case    0:  		/* mfspr R12, LR */
		/* 82211410h case    0:*/		regs.R12 = regs.LR;
		/* 82211410h case    0:*/		return 0x82211414;
		  /* 82211414h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82211414h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82211414h case    1:*/		return 0x82211418;
		  /* 82211418h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82211418h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82211418h case    2:*/		return 0x8221141C;
		  /* 8221141Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221141Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221141Ch case    3:*/		return 0x82211420;
		  /* 82211420h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82211420h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82211420h case    4:*/		return 0x82211424;
		  /* 82211424h */ case    5:  		/* mr R31, R4 */
		/* 82211424h case    5:*/		regs.R31 = regs.R4;
		/* 82211424h case    5:*/		return 0x82211428;
		  /* 82211428h */ case    6:  		/* mr R30, R5 */
		/* 82211428h case    6:*/		regs.R30 = regs.R5;
		/* 82211428h case    6:*/		return 0x8221142C;
		  /* 8221142Ch */ case    7:  		/* bl -8708 */
		/* 8221142Ch case    7:*/		regs.LR = 0x82211430; return 0x8220F228;
		/* 8221142Ch case    7:*/		return 0x82211430;
		  /* 82211430h */ case    8:  		/* li R11, 48 */
		/* 82211430h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x30);
		/* 82211430h case    8:*/		return 0x82211434;
		  /* 82211434h */ case    9:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82211434h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82211434h case    9:*/		return 0x82211438;
		  /* 82211438h */ case   10:  		/* sth R11, <#[R30 + 2]> */
		/* 82211438h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82211438h case   10:*/		return 0x8221143C;
		  /* 8221143Ch */ case   11:  		/* li R8, 17 */
		/* 8221143Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 8221143Ch case   11:*/		return 0x82211440;
		  /* 82211440h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 82211440h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82211440h case   12:*/		return 0x82211444;
		  /* 82211444h */ case   13:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82211444h case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82211444h case   13:*/		return 0x82211448;
		  /* 82211448h */ case   14:  		/* stw R11, <#[R30]> */
		/* 82211448h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82211448h case   14:*/		return 0x8221144C;
		  /* 8221144Ch */ case   15:  		/* addi R11, R30, 4 */
		/* 8221144Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8221144Ch case   15:*/		return 0x82211450;
		  /* 82211450h */ case   16:  		/* sth R9, <#[R30 + 6]> */
		/* 82211450h case   16:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 82211450h case   16:*/		return 0x82211454;
		  /* 82211454h */ case   17:  		/* li R10, 64 */
		/* 82211454h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 82211454h case   17:*/		return 0x82211458;
		  /* 82211458h */ case   18:  		/* lwz R7, <#[R30 + 4]> */
		/* 82211458h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82211458h case   18:*/		return 0x8221145C;
		  /* 8221145Ch */ case   19:  		/* rlwimi R7, R8, 18, 8, 15 */
		/* 8221145Ch case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R8);
		/* 8221145Ch case   19:*/		return 0x82211460;
		  /* 82211460h */ case   20:  		/* stw R7, <#[R30 + 4]> */
		/* 82211460h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82211460h case   20:*/		return 0x82211464;
		  /* 82211464h */ case   21:  		/* stwu R10, <#[R11 + 4]> */
		/* 82211464h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211464h case   21:*/		return 0x82211468;
		  /* 82211468h */ case   22:  		/* lwz R10, <#[R31 + 16]> */
		/* 82211468h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82211468h case   22:*/		return 0x8221146C;
		  /* 8221146Ch */ case   23:  		/* addi R11, R11, 4 */
		/* 8221146Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221146Ch case   23:*/		return 0x82211470;
		  /* 82211470h */ case   24:  		/* sth R10, <#[R11 + 2]> */
		/* 82211470h case   24:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211470h case   24:*/		return 0x82211474;
		  /* 82211474h */ case   25:  		/* lwz R10, <#[R11]> */
		/* 82211474h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211474h case   25:*/		return 0x82211478;
		  /* 82211478h */ case   26:  		/* lwz R7, <#[R31 + 16]> */
		/* 82211478h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82211478h case   26:*/		return 0x8221147C;
		  /* 8221147Ch */ case   27:  		/* rlwimi R7, R10, 0, 16, 9 */
		/* 8221147Ch case   27:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R10);
		/* 8221147Ch case   27:*/		return 0x82211480;
		  /* 82211480h */ case   28:  		/* rlwinm R10, R7, 0, 0, 31 */
		/* 82211480h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R7);
		/* 82211480h case   28:*/		return 0x82211484;
		  /* 82211484h */ case   29:  		/* stw R7, <#[R11]> */
		/* 82211484h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82211484h case   29:*/		return 0x82211488;
		  /* 82211488h */ case   30:  		/* lwz R7, <#[R31 + 16]> */
		/* 82211488h case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82211488h case   30:*/		return 0x8221148C;
		  /* 8221148Ch */ case   31:  		/* rlwimi R7, R10, 0, 9, 7 */
		/* 8221148Ch case   31:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R10);
		/* 8221148Ch case   31:*/		return 0x82211490;
		  /* 82211490h */ case   32:  		/* oris R10, R7, 64 */
		/* 82211490h case   32:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R7,0x40);
		/* 82211490h case   32:*/		return 0x82211494;
		  /* 82211494h */ case   33:  		/* stw R10, <#[R11]> */
		/* 82211494h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211494h case   33:*/		return 0x82211498;
		  /* 82211498h */ case   34:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82211498h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211498h case   34:*/		return 0x8221149C;
		  /* 8221149Ch */ case   35:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221149Ch case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221149Ch case   35:*/		return 0x822114A0;
		  /* 822114A0h */ case   36:  		/* rlwimi R10, R7, 20, 29, 31 */
		/* 822114A0h case   36:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R10,regs.R7);
		/* 822114A0h case   36:*/		return 0x822114A4;
		  /* 822114A4h */ case   37:  		/* stw R10, <#[R11]> */
		/* 822114A4h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822114A4h case   37:*/		return 0x822114A8;
		  /* 822114A8h */ case   38:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822114A8h case   38:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822114A8h case   38:*/		return 0x822114AC;
		  /* 822114ACh */ case   39:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114ACh case   39:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114ACh case   39:*/		return 0x822114B0;
		  /* 822114B0h */ case   40:  		/* rlwimi R10, R7, 24, 25, 27 */
		/* 822114B0h case   40:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R10,regs.R7);
		/* 822114B0h case   40:*/		return 0x822114B4;
		  /* 822114B4h */ case   41:  		/* stw R10, <#[R11]> */
		/* 822114B4h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822114B4h case   41:*/		return 0x822114B8;
		  /* 822114B8h */ case   42:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822114B8h case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822114B8h case   42:*/		return 0x822114BC;
		  /* 822114BCh */ case   43:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114BCh case   43:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114BCh case   43:*/		return 0x822114C0;
		  /* 822114C0h */ case   44:  		/* rlwimi R10, R7, 28, 21, 23 */
		/* 822114C0h case   44:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R10,regs.R7);
		/* 822114C0h case   44:*/		return 0x822114C4;
		  /* 822114C4h */ case   45:  		/* stw R10, <#[R11]> */
		/* 822114C4h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822114C4h case   45:*/		return 0x822114C8;
		  /* 822114C8h */ case   46:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822114C8h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822114C8h case   46:*/		return 0x822114CC;
		  /* 822114CCh */ case   47:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114CCh case   47:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114CCh case   47:*/		return 0x822114D0;
		  /* 822114D0h */ case   48:  		/* rlwimi R7, R10, 0, 20, 16 */
		/* 822114D0h case   48:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R7,regs.R10);
		/* 822114D0h case   48:*/		return 0x822114D4;
		  /* 822114D4h */ case   49:  		/* rlwinm R10, R7, 0, 0, 31 */
		/* 822114D4h case   49:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R7);
		/* 822114D4h case   49:*/		return 0x822114D8;
		  /* 822114D8h */ case   50:  		/* stw R7, <#[R11]> */
		/* 822114D8h case   50:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822114D8h case   50:*/		return 0x822114DC;
		  /* 822114DCh */ case   51:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114DCh case   51:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114DCh case   51:*/		return 0x822114E0;
		  /* 822114E0h */ case   52:  		/* rlwimi R10, R7, 20, 28, 28 */
		/* 822114E0h case   52:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R10,regs.R7);
		/* 822114E0h case   52:*/		return 0x822114E4;
		  /* 822114E4h */ case   53:  		/* stw R10, <#[R11]> */
		/* 822114E4h case   53:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822114E4h case   53:*/		return 0x822114E8;
		  /* 822114E8h */ case   54:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822114E8h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822114E8h case   54:*/		return 0x822114EC;
		  /* 822114ECh */ case   55:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114ECh case   55:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114ECh case   55:*/		return 0x822114F0;
		  /* 822114F0h */ case   56:  		/* rlwimi R10, R7, 24, 24, 24 */
		/* 822114F0h case   56:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R10,regs.R7);
		/* 822114F0h case   56:*/		return 0x822114F4;
		  /* 822114F4h */ case   57:  		/* stw R10, <#[R11]> */
		/* 822114F4h case   57:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822114F4h case   57:*/		return 0x822114F8;
		  /* 822114F8h */ case   58:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822114F8h case   58:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822114F8h case   58:*/		return 0x822114FC;
		  /* 822114FCh */ case   59:  		/* lwz R7, <#[R31 + 28]> */
		/* 822114FCh case   59:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822114FCh case   59:*/		return 0x82211500;
		  /* 82211500h */ case   60:  		/* rlwimi R10, R7, 28, 20, 20 */
		/* 82211500h case   60:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R10,regs.R7);
		/* 82211500h case   60:*/		return 0x82211504;
		  /* 82211504h */ case   61:  		/* stw R10, <#[R11]> */
		/* 82211504h case   61:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211504h case   61:*/		return 0x82211508;
		  /* 82211508h */ case   62:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82211508h case   62:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82211508h case   62:*/		return 0x8221150C;
		  /* 8221150Ch */ case   63:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221150Ch case   63:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221150Ch case   63:*/		return 0x82211510;
		  /* 82211510h */ case   64:  		/* rlwimi R10, R7, 0, 16, 16 */
		/* 82211510h case   64:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R10,regs.R7);
		/* 82211510h case   64:*/		return 0x82211514;
		  /* 82211514h */ case   65:  		/* oris R10, R10, 16 */
		/* 82211514h case   65:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82211514h case   65:*/		return 0x82211518;
		  /* 82211518h */ case   66:  		/* stw R10, <#[R11]> */
		/* 82211518h case   66:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211518h case   66:*/		return 0x8221151C;
		  /* 8221151Ch */ case   67:  		/* addi R11, R11, 4 */
		/* 8221151Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221151Ch case   67:*/		return 0x82211520;
		  /* 82211520h */ case   68:  		/* lwz R10, <#[R31 + 16]> */
		/* 82211520h case   68:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82211520h case   68:*/		return 0x82211524;
		  /* 82211524h */ case   69:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82211524h case   69:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82211524h case   69:*/		return 0x82211528;
		  /* 82211528h */ case   70:  		/* bc 12, CR0_EQ, 16 */
		/* 82211528h case   70:*/		if ( regs.CR[0].eq ) { return 0x82211538;  }
		/* 82211528h case   70:*/		return 0x8221152C;
		  /* 8221152Ch */ case   71:  		/* lwz R10, <#[R31 + 40]> */
		/* 8221152Ch case   71:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8221152Ch case   71:*/		return 0x82211530;
		  /* 82211530h */ case   72:  		/* stw R10, <#[R11]> */
		/* 82211530h case   72:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82211530h case   72:*/		return 0x82211534;
		  /* 82211534h */ case   73:  		/* addi R11, R11, 4 */
		/* 82211534h case   73:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211534h case   73:*/		return 0x82211538;
	}
	return 0x82211538;
} // Block from 82211410h-82211538h (74 instructions)

//////////////////////////////////////////////////////
// Block at 82211538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211538);
		  /* 82211538h */ case    0:  		/* li R7, 45 */
		/* 82211538h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x2D);
		/* 82211538h case    0:*/		return 0x8221153C;
		  /* 8221153Ch */ case    1:  		/* li R10, 0 */
		/* 8221153Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8221153Ch case    1:*/		return 0x82211540;
		  /* 82211540h */ case    2:  		/* sth R7, <#[R11 + 2]> */
		/* 82211540h case    2:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82211540h case    2:*/		return 0x82211544;
		  /* 82211544h */ case    3:  		/* lwz R6, <#[R11]> */
		/* 82211544h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211544h case    3:*/		return 0x82211548;
		  /* 82211548h */ case    4:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 82211548h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 82211548h case    4:*/		return 0x8221154C;
		  /* 8221154Ch */ case    5:  		/* stw R6, <#[R11]> */
		/* 8221154Ch case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221154Ch case    5:*/		return 0x82211550;
		  /* 82211550h */ case    6:  		/* addi R11, R11, 4 */
		/* 82211550h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211550h case    6:*/		return 0x82211554;
		  /* 82211554h */ case    7:  		/* lwz R6, <#[R31 + 4]> */
		/* 82211554h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82211554h case    7:*/		return 0x82211558;
		  /* 82211558h */ case    8:  		/* sth R6, <#[R11 + 2]> */
		/* 82211558h case    8:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211558h case    8:*/		return 0x8221155C;
		  /* 8221155Ch */ case    9:  		/* lwz R6, <#[R31 + 4]> */
		/* 8221155Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 8221155Ch case    9:*/		return 0x82211560;
		  /* 82211560h */ case   10:  		/* lwz R5, <#[R11]> */
		/* 82211560h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82211560h case   10:*/		return 0x82211564;
		  /* 82211564h */ case   11:  		/* rlwimi R5, R6, 0, 10, 15 */
		/* 82211564h case   11:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R5,regs.R6);
		/* 82211564h case   11:*/		return 0x82211568;
		  /* 82211568h */ case   12:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82211568h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82211568h case   12:*/		return 0x8221156C;
		  /* 8221156Ch */ case   13:  		/* stw R5, <#[R11]> */
		/* 8221156Ch case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221156Ch case   13:*/		return 0x82211570;
		  /* 82211570h */ case   14:  		/* lwz R5, <#[R31 + 4]> */
		/* 82211570h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 82211570h case   14:*/		return 0x82211574;
		  /* 82211574h */ case   15:  		/* rlwimi R6, R5, 0, 8, 8 */
		/* 82211574h case   15:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R6,regs.R5);
		/* 82211574h case   15:*/		return 0x82211578;
		  /* 82211578h */ case   16:  		/* oris R6, R6, 64 */
		/* 82211578h case   16:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x40);
		/* 82211578h case   16:*/		return 0x8221157C;
		  /* 8221157Ch */ case   17:  		/* stw R6, <#[R11]> */
		/* 8221157Ch case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221157Ch case   17:*/		return 0x82211580;
		  /* 82211580h */ case   18:  		/* stwu R10, <#[R11 + 4]> */
		/* 82211580h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211580h case   18:*/		return 0x82211584;
		  /* 82211584h */ case   19:  		/* lwz R6, <#[R31 + 8]> */
		/* 82211584h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 82211584h case   19:*/		return 0x82211588;
		  /* 82211588h */ case   20:  		/* rlwinm R6, R6, 0, 30, 31 */
		/* 82211588h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R6);
		/* 82211588h case   20:*/		return 0x8221158C;
		  /* 8221158Ch */ case   21:  		/* stw R6, <#[R11]> */
		/* 8221158Ch case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221158Ch case   21:*/		return 0x82211590;
		  /* 82211590h */ case   22:  		/* addi R11, R11, 4 */
		/* 82211590h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211590h case   22:*/		return 0x82211594;
		  /* 82211594h */ case   23:  		/* lwz R6, <#[R31 + 4]> */
		/* 82211594h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82211594h case   23:*/		return 0x82211598;
		  /* 82211598h */ case   24:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 82211598h case   24:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 82211598h case   24:*/		return 0x8221159C;
		  /* 8221159Ch */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 8221159Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x822115AC;  }
		/* 8221159Ch case   25:*/		return 0x822115A0;
		  /* 822115A0h */ case   26:  		/* lwz R6, <#[R31 + 12]> */
		/* 822115A0h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 822115A0h case   26:*/		return 0x822115A4;
		  /* 822115A4h */ case   27:  		/* stw R6, <#[R11]> */
		/* 822115A4h case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822115A4h case   27:*/		return 0x822115A8;
		  /* 822115A8h */ case   28:  		/* addi R11, R11, 4 */
		/* 822115A8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822115A8h case   28:*/		return 0x822115AC;
	}
	return 0x822115AC;
} // Block from 82211538h-822115ACh (29 instructions)

//////////////////////////////////////////////////////
// Block at 822115ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822115AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822115AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822115AC);
		  /* 822115ACh */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 822115ACh case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822115ACh case    0:*/		return 0x822115B0;
		  /* 822115B0h */ case    1:  		/* li R12, -17477 */
		/* 822115B0h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 822115B0h case    1:*/		return 0x822115B4;
		  /* 822115B4h */ case    2:  		/* lwz R6, <#[R11]> */
		/* 822115B4h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822115B4h case    2:*/		return 0x822115B8;
		  /* 822115B8h */ case    3:  		/* rlwimi R6, R8, 18, 8, 15 */
		/* 822115B8h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R8);
		/* 822115B8h case    3:*/		return 0x822115BC;
		  /* 822115BCh */ case    4:  		/* stw R6, <#[R11]> */
		/* 822115BCh case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822115BCh case    4:*/		return 0x822115C0;
		  /* 822115C0h */ case    5:  		/* li R9, 49 */
		/* 822115C0h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x31);
		/* 822115C0h case    5:*/		return 0x822115C4;
		  /* 822115C4h */ case    6:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822115C4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822115C4h case    6:*/		return 0x822115C8;
		  /* 822115C8h */ case    7:  		/* and R8, R8, R12 */
		/* 822115C8h case    7:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 822115C8h case    7:*/		return 0x822115CC;
		  /* 822115CCh */ case    8:  		/* ori R8, R8, 13107 */
		/* 822115CCh case    8:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3333);
		/* 822115CCh case    8:*/		return 0x822115D0;
		  /* 822115D0h */ case    9:  		/* stw R8, <#[R11]> */
		/* 822115D0h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822115D0h case    9:*/		return 0x822115D4;
		  /* 822115D4h */ case   10:  		/* addi R11, R11, 4 */
		/* 822115D4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822115D4h case   10:*/		return 0x822115D8;
		  /* 822115D8h */ case   11:  		/* sth R9, <#[R11 + 2]> */
		/* 822115D8h case   11:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822115D8h case   11:*/		return 0x822115DC;
		  /* 822115DCh */ case   12:  		/* lwz R9, <#[R11]> */
		/* 822115DCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822115DCh case   12:*/		return 0x822115E0;
		  /* 822115E0h */ case   13:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 822115E0h case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 822115E0h case   13:*/		return 0x822115E4;
		  /* 822115E4h */ case   14:  		/* stw R9, <#[R11]> */
		/* 822115E4h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822115E4h case   14:*/		return 0x822115E8;
		  /* 822115E8h */ case   15:  		/* addi R11, R11, 4 */
		/* 822115E8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822115E8h case   15:*/		return 0x822115EC;
		  /* 822115ECh */ case   16:  		/* lwz R9, <#[R31 + 4]> */
		/* 822115ECh case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 822115ECh case   16:*/		return 0x822115F0;
		  /* 822115F0h */ case   17:  		/* sth R9, <#[R11 + 2]> */
		/* 822115F0h case   17:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822115F0h case   17:*/		return 0x822115F4;
		  /* 822115F4h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 822115F4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822115F4h case   18:*/		return 0x822115F8;
		  /* 822115F8h */ case   19:  		/* lwz R8, <#[R31 + 4]> */
		/* 822115F8h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822115F8h case   19:*/		return 0x822115FC;
		  /* 822115FCh */ case   20:  		/* rlwimi R9, R8, 0, 10, 15 */
		/* 822115FCh case   20:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R9,regs.R8);
		/* 822115FCh case   20:*/		return 0x82211600;
		  /* 82211600h */ case   21:  		/* stw R9, <#[R11]> */
		/* 82211600h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211600h case   21:*/		return 0x82211604;
		  /* 82211604h */ case   22:  		/* lwz R9, <#[R31 + 4]> */
		/* 82211604h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82211604h case   22:*/		return 0x82211608;
	}
	return 0x82211608;
} // Block from 822115ACh-82211608h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82211608h
// Function '?DoCrs@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211608);
		  /* 82211608h */ case    0:  		/* lwz R8, <#[R11]> */
		/* 82211608h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211608h case    0:*/		return 0x8221160C;
		  /* 8221160Ch */ case    1:  		/* rlwimi R8, R9, 0, 8, 8 */
		/* 8221160Ch case    1:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R8,regs.R9);
		/* 8221160Ch case    1:*/		return 0x82211610;
		  /* 82211610h */ case    2:  		/* oris R9, R8, 64 */
		/* 82211610h case    2:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82211610h case    2:*/		return 0x82211614;
		  /* 82211614h */ case    3:  		/* stw R9, <#[R11]> */
		/* 82211614h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211614h case    3:*/		return 0x82211618;
		  /* 82211618h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82211618h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211618h case    4:*/		return 0x8221161C;
		  /* 8221161Ch */ case    5:  		/* lwz R9, <#[R31 + 8]> */
		/* 8221161Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8221161Ch case    5:*/		return 0x82211620;
		  /* 82211620h */ case    6:  		/* rlwinm R9, R9, 0, 28, 29 */
		/* 82211620h case    6:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R9,regs.R9);
		/* 82211620h case    6:*/		return 0x82211624;
		  /* 82211624h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82211624h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211624h case    7:*/		return 0x82211628;
		  /* 82211628h */ case    8:  		/* addi R11, R11, 4 */
		/* 82211628h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211628h case    8:*/		return 0x8221162C;
		  /* 8221162Ch */ case    9:  		/* lwz R9, <#[R31 + 4]> */
		/* 8221162Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8221162Ch case    9:*/		return 0x82211630;
		  /* 82211630h */ case   10:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82211630h case   10:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82211630h case   10:*/		return 0x82211634;
		  /* 82211634h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 82211634h case   11:*/		if ( regs.CR[0].eq ) { return 0x82211644;  }
		/* 82211634h case   11:*/		return 0x82211638;
		  /* 82211638h */ case   12:  		/* lwz R9, <#[R31 + 12]> */
		/* 82211638h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82211638h case   12:*/		return 0x8221163C;
		  /* 8221163Ch */ case   13:  		/* stw R9, <#[R11]> */
		/* 8221163Ch case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221163Ch case   13:*/		return 0x82211640;
		  /* 82211640h */ case   14:  		/* addi R11, R11, 4 */
		/* 82211640h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211640h case   14:*/		return 0x82211644;
	}
	return 0x82211644;
} // Block from 82211608h-82211644h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82211644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211644);
		  /* 82211644h */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 82211644h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82211644h case    0:*/		return 0x82211648;
		  /* 82211648h */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 82211648h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211648h case    1:*/		return 0x8221164C;
		  /* 8221164Ch */ case    2:  		/* lwz R8, <#[R31 + 16]> */
		/* 8221164Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8221164Ch case    2:*/		return 0x82211650;
		  /* 82211650h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82211650h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211650h case    3:*/		return 0x82211654;
		  /* 82211654h */ case    4:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82211654h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82211654h case    4:*/		return 0x82211658;
		  /* 82211658h */ case    5:  		/* stw R8, <#[R11]> */
		/* 82211658h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211658h case    5:*/		return 0x8221165C;
		  /* 8221165Ch */ case    6:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 8221165Ch case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 8221165Ch case    6:*/		return 0x82211660;
		  /* 82211660h */ case    7:  		/* lwz R8, <#[R31 + 16]> */
		/* 82211660h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82211660h case    7:*/		return 0x82211664;
		  /* 82211664h */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82211664h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82211664h case    8:*/		return 0x82211668;
		  /* 82211668h */ case    9:  		/* oris R9, R8, 64 */
		/* 82211668h case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82211668h case    9:*/		return 0x8221166C;
		  /* 8221166Ch */ case   10:  		/* stw R9, <#[R11]> */
		/* 8221166Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221166Ch case   10:*/		return 0x82211670;
		  /* 82211670h */ case   11:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82211670h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211670h case   11:*/		return 0x82211674;
		  /* 82211674h */ case   12:  		/* lwz R8, <#[R31 + 28]> */
		/* 82211674h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211674h case   12:*/		return 0x82211678;
		  /* 82211678h */ case   13:  		/* rlwimi R9, R8, 20, 29, 31 */
		/* 82211678h case   13:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R9,regs.R8);
		/* 82211678h case   13:*/		return 0x8221167C;
		  /* 8221167Ch */ case   14:  		/* stw R9, <#[R11]> */
		/* 8221167Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221167Ch case   14:*/		return 0x82211680;
		  /* 82211680h */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211680h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211680h case   15:*/		return 0x82211684;
		  /* 82211684h */ case   16:  		/* lwz R8, <#[R31 + 28]> */
		/* 82211684h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211684h case   16:*/		return 0x82211688;
		  /* 82211688h */ case   17:  		/* rlwimi R9, R8, 24, 25, 27 */
		/* 82211688h case   17:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R9,regs.R8);
		/* 82211688h case   17:*/		return 0x8221168C;
		  /* 8221168Ch */ case   18:  		/* stw R9, <#[R11]> */
		/* 8221168Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221168Ch case   18:*/		return 0x82211690;
		  /* 82211690h */ case   19:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211690h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211690h case   19:*/		return 0x82211694;
		  /* 82211694h */ case   20:  		/* lwz R8, <#[R31 + 28]> */
		/* 82211694h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211694h case   20:*/		return 0x82211698;
		  /* 82211698h */ case   21:  		/* rlwimi R9, R8, 28, 21, 23 */
		/* 82211698h case   21:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R9,regs.R8);
		/* 82211698h case   21:*/		return 0x8221169C;
		  /* 8221169Ch */ case   22:  		/* stw R9, <#[R11]> */
		/* 8221169Ch case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221169Ch case   22:*/		return 0x822116A0;
		  /* 822116A0h */ case   23:  		/* lwz R8, <#[R11]> */
		/* 822116A0h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822116A0h case   23:*/		return 0x822116A4;
		  /* 822116A4h */ case   24:  		/* lwz R9, <#[R31 + 28]> */
		/* 822116A4h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 822116A4h case   24:*/		return 0x822116A8;
		  /* 822116A8h */ case   25:  		/* rlwimi R9, R8, 0, 20, 16 */
		/* 822116A8h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R8);
		/* 822116A8h case   25:*/		return 0x822116AC;
		  /* 822116ACh */ case   26:  		/* stw R9, <#[R11]> */
		/* 822116ACh case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822116ACh case   26:*/		return 0x822116B0;
		  /* 822116B0h */ case   27:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822116B0h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822116B0h case   27:*/		return 0x822116B4;
		  /* 822116B4h */ case   28:  		/* lwz R8, <#[R31 + 28]> */
		/* 822116B4h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822116B4h case   28:*/		return 0x822116B8;
		  /* 822116B8h */ case   29:  		/* rlwimi R9, R8, 20, 28, 28 */
		/* 822116B8h case   29:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R9,regs.R8);
		/* 822116B8h case   29:*/		return 0x822116BC;
		  /* 822116BCh */ case   30:  		/* stw R9, <#[R11]> */
		/* 822116BCh case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822116BCh case   30:*/		return 0x822116C0;
		  /* 822116C0h */ case   31:  		/* lwz R9, <#[R31 + 28]> */
		/* 822116C0h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 822116C0h case   31:*/		return 0x822116C4;
		  /* 822116C4h */ case   32:  		/* lwz R8, <#[R11]> */
		/* 822116C4h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822116C4h case   32:*/		return 0x822116C8;
		  /* 822116C8h */ case   33:  		/* rlwimi R8, R9, 24, 24, 24 */
		/* 822116C8h case   33:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R8,regs.R9);
		/* 822116C8h case   33:*/		return 0x822116CC;
		  /* 822116CCh */ case   34:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822116CCh case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822116CCh case   34:*/		return 0x822116D0;
		  /* 822116D0h */ case   35:  		/* stw R8, <#[R11]> */
		/* 822116D0h case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822116D0h case   35:*/		return 0x822116D4;
		  /* 822116D4h */ case   36:  		/* lwz R8, <#[R31 + 28]> */
		/* 822116D4h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822116D4h case   36:*/		return 0x822116D8;
		  /* 822116D8h */ case   37:  		/* rlwimi R9, R8, 28, 20, 20 */
		/* 822116D8h case   37:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R9,regs.R8);
		/* 822116D8h case   37:*/		return 0x822116DC;
		  /* 822116DCh */ case   38:  		/* stw R9, <#[R11]> */
		/* 822116DCh case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822116DCh case   38:*/		return 0x822116E0;
		  /* 822116E0h */ case   39:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822116E0h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822116E0h case   39:*/		return 0x822116E4;
		  /* 822116E4h */ case   40:  		/* lwz R8, <#[R31 + 28]> */
		/* 822116E4h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822116E4h case   40:*/		return 0x822116E8;
		  /* 822116E8h */ case   41:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 822116E8h case   41:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 822116E8h case   41:*/		return 0x822116EC;
		  /* 822116ECh */ case   42:  		/* oris R9, R9, 16 */
		/* 822116ECh case   42:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x10);
		/* 822116ECh case   42:*/		return 0x822116F0;
		  /* 822116F0h */ case   43:  		/* stw R9, <#[R11]> */
		/* 822116F0h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822116F0h case   43:*/		return 0x822116F4;
		  /* 822116F4h */ case   44:  		/* addi R11, R11, 4 */
		/* 822116F4h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822116F4h case   44:*/		return 0x822116F8;
		  /* 822116F8h */ case   45:  		/* lwz R9, <#[R31 + 16]> */
		/* 822116F8h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 822116F8h case   45:*/		return 0x822116FC;
		  /* 822116FCh */ case   46:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 822116FCh case   46:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 822116FCh case   46:*/		return 0x82211700;
		  /* 82211700h */ case   47:  		/* bc 12, CR0_EQ, 16 */
		/* 82211700h case   47:*/		if ( regs.CR[0].eq ) { return 0x82211710;  }
		/* 82211700h case   47:*/		return 0x82211704;
		  /* 82211704h */ case   48:  		/* lwz R9, <#[R31 + 40]> */
		/* 82211704h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82211704h case   48:*/		return 0x82211708;
		  /* 82211708h */ case   49:  		/* stw R9, <#[R11]> */
		/* 82211708h case   49:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211708h case   49:*/		return 0x8221170C;
		  /* 8221170Ch */ case   50:  		/* addi R11, R11, 4 */
		/* 8221170Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221170Ch case   50:*/		return 0x82211710;
	}
	return 0x82211710;
} // Block from 82211644h-82211710h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82211710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211710);
		  /* 82211710h */ case    0:  		/* sth R7, <#[R11 + 2]> */
		/* 82211710h case    0:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82211710h case    0:*/		return 0x82211714;
		  /* 82211714h */ case    1:  		/* lwz R9, <#[R11]> */
		/* 82211714h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211714h case    1:*/		return 0x82211718;
		  /* 82211718h */ case    2:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82211718h case    2:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82211718h case    2:*/		return 0x8221171C;
		  /* 8221171Ch */ case    3:  		/* stw R9, <#[R11]> */
		/* 8221171Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221171Ch case    3:*/		return 0x82211720;
		  /* 82211720h */ case    4:  		/* addi R11, R11, 4 */
		/* 82211720h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211720h case    4:*/		return 0x82211724;
		  /* 82211724h */ case    5:  		/* lwz R9, <#[R31 + 4]> */
		/* 82211724h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82211724h case    5:*/		return 0x82211728;
		  /* 82211728h */ case    6:  		/* sth R9, <#[R11 + 2]> */
		/* 82211728h case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211728h case    6:*/		return 0x8221172C;
		  /* 8221172Ch */ case    7:  		/* lwz R9, <#[R11]> */
		/* 8221172Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221172Ch case    7:*/		return 0x82211730;
		  /* 82211730h */ case    8:  		/* lwz R8, <#[R31 + 4]> */
		/* 82211730h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82211730h case    8:*/		return 0x82211734;
		  /* 82211734h */ case    9:  		/* rlwimi R9, R8, 0, 10, 15 */
		/* 82211734h case    9:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R9,regs.R8);
		/* 82211734h case    9:*/		return 0x82211738;
		  /* 82211738h */ case   10:  		/* stw R9, <#[R11]> */
		/* 82211738h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211738h case   10:*/		return 0x8221173C;
		  /* 8221173Ch */ case   11:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8221173Ch case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8221173Ch case   11:*/		return 0x82211740;
		  /* 82211740h */ case   12:  		/* lwz R8, <#[R31 + 4]> */
		/* 82211740h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82211740h case   12:*/		return 0x82211744;
		  /* 82211744h */ case   13:  		/* rlwimi R9, R8, 0, 8, 8 */
		/* 82211744h case   13:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R9,regs.R8);
		/* 82211744h case   13:*/		return 0x82211748;
		  /* 82211748h */ case   14:  		/* oris R9, R9, 64 */
		/* 82211748h case   14:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 82211748h case   14:*/		return 0x8221174C;
		  /* 8221174Ch */ case   15:  		/* stw R9, <#[R11]> */
		/* 8221174Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221174Ch case   15:*/		return 0x82211750;
		  /* 82211750h */ case   16:  		/* stwu R10, <#[R11 + 4]> */
		/* 82211750h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211750h case   16:*/		return 0x82211754;
		  /* 82211754h */ case   17:  		/* lwz R9, <#[R31 + 8]> */
		/* 82211754h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82211754h case   17:*/		return 0x82211758;
		  /* 82211758h */ case   18:  		/* rlwinm R9, R9, 0, 26, 27 */
		/* 82211758h case   18:*/		cpu::op::rlwinm<0,0,26,27>(regs,&regs.R9,regs.R9);
		/* 82211758h case   18:*/		return 0x8221175C;
		  /* 8221175Ch */ case   19:  		/* stw R9, <#[R11]> */
		/* 8221175Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221175Ch case   19:*/		return 0x82211760;
		  /* 82211760h */ case   20:  		/* addi R11, R11, 4 */
		/* 82211760h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211760h case   20:*/		return 0x82211764;
		  /* 82211764h */ case   21:  		/* lwz R9, <#[R31 + 4]> */
		/* 82211764h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82211764h case   21:*/		return 0x82211768;
		  /* 82211768h */ case   22:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82211768h case   22:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82211768h case   22:*/		return 0x8221176C;
		  /* 8221176Ch */ case   23:  		/* bc 12, CR0_EQ, 16 */
		/* 8221176Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x8221177C;  }
		/* 8221176Ch case   23:*/		return 0x82211770;
		  /* 82211770h */ case   24:  		/* lwz R9, <#[R31 + 12]> */
		/* 82211770h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82211770h case   24:*/		return 0x82211774;
		  /* 82211774h */ case   25:  		/* stw R9, <#[R11]> */
		/* 82211774h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211774h case   25:*/		return 0x82211778;
		  /* 82211778h */ case   26:  		/* addi R11, R11, 4 */
		/* 82211778h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211778h case   26:*/		return 0x8221177C;
	}
	return 0x8221177C;
} // Block from 82211710h-8221177Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8221177Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221177C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221177C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221177C);
		  /* 8221177Ch */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 8221177Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221177Ch case    0:*/		return 0x82211780;
		  /* 82211780h */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 82211780h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211780h case    1:*/		return 0x82211784;
		  /* 82211784h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 82211784h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211784h case    2:*/		return 0x82211788;
		  /* 82211788h */ case    3:  		/* lwz R9, <#[R31 + 16]> */
		/* 82211788h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82211788h case    3:*/		return 0x8221178C;
		  /* 8221178Ch */ case    4:  		/* rlwimi R9, R8, 0, 16, 9 */
		/* 8221178Ch case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R8);
		/* 8221178Ch case    4:*/		return 0x82211790;
		  /* 82211790h */ case    5:  		/* stw R9, <#[R11]> */
		/* 82211790h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211790h case    5:*/		return 0x82211794;
		  /* 82211794h */ case    6:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211794h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211794h case    6:*/		return 0x82211798;
		  /* 82211798h */ case    7:  		/* lwz R8, <#[R31 + 16]> */
		/* 82211798h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82211798h case    7:*/		return 0x8221179C;
		  /* 8221179Ch */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 8221179Ch case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 8221179Ch case    8:*/		return 0x822117A0;
		  /* 822117A0h */ case    9:  		/* oris R9, R8, 64 */
		/* 822117A0h case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 822117A0h case    9:*/		return 0x822117A4;
		  /* 822117A4h */ case   10:  		/* stw R9, <#[R11]> */
		/* 822117A4h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822117A4h case   10:*/		return 0x822117A8;
		  /* 822117A8h */ case   11:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822117A8h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822117A8h case   11:*/		return 0x822117AC;
		  /* 822117ACh */ case   12:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117ACh case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117ACh case   12:*/		return 0x822117B0;
		  /* 822117B0h */ case   13:  		/* rlwimi R9, R8, 20, 29, 31 */
		/* 822117B0h case   13:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R9,regs.R8);
		/* 822117B0h case   13:*/		return 0x822117B4;
		  /* 822117B4h */ case   14:  		/* stw R9, <#[R11]> */
		/* 822117B4h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822117B4h case   14:*/		return 0x822117B8;
		  /* 822117B8h */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822117B8h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822117B8h case   15:*/		return 0x822117BC;
		  /* 822117BCh */ case   16:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117BCh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117BCh case   16:*/		return 0x822117C0;
		  /* 822117C0h */ case   17:  		/* rlwimi R9, R8, 24, 25, 27 */
		/* 822117C0h case   17:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R9,regs.R8);
		/* 822117C0h case   17:*/		return 0x822117C4;
		  /* 822117C4h */ case   18:  		/* stw R9, <#[R11]> */
		/* 822117C4h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822117C4h case   18:*/		return 0x822117C8;
		  /* 822117C8h */ case   19:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822117C8h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822117C8h case   19:*/		return 0x822117CC;
		  /* 822117CCh */ case   20:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117CCh case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117CCh case   20:*/		return 0x822117D0;
		  /* 822117D0h */ case   21:  		/* rlwimi R9, R8, 28, 21, 23 */
		/* 822117D0h case   21:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R9,regs.R8);
		/* 822117D0h case   21:*/		return 0x822117D4;
		  /* 822117D4h */ case   22:  		/* stw R9, <#[R11]> */
		/* 822117D4h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822117D4h case   22:*/		return 0x822117D8;
		  /* 822117D8h */ case   23:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822117D8h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822117D8h case   23:*/		return 0x822117DC;
		  /* 822117DCh */ case   24:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117DCh case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117DCh case   24:*/		return 0x822117E0;
		  /* 822117E0h */ case   25:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 822117E0h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 822117E0h case   25:*/		return 0x822117E4;
		  /* 822117E4h */ case   26:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822117E4h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822117E4h case   26:*/		return 0x822117E8;
		  /* 822117E8h */ case   27:  		/* stw R8, <#[R11]> */
		/* 822117E8h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822117E8h case   27:*/		return 0x822117EC;
		  /* 822117ECh */ case   28:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117ECh case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117ECh case   28:*/		return 0x822117F0;
		  /* 822117F0h */ case   29:  		/* rlwimi R9, R8, 20, 28, 28 */
		/* 822117F0h case   29:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R9,regs.R8);
		/* 822117F0h case   29:*/		return 0x822117F4;
		  /* 822117F4h */ case   30:  		/* stw R9, <#[R11]> */
		/* 822117F4h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822117F4h case   30:*/		return 0x822117F8;
		  /* 822117F8h */ case   31:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822117F8h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822117F8h case   31:*/		return 0x822117FC;
		  /* 822117FCh */ case   32:  		/* lwz R8, <#[R31 + 28]> */
		/* 822117FCh case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822117FCh case   32:*/		return 0x82211800;
		  /* 82211800h */ case   33:  		/* rlwimi R9, R8, 24, 24, 24 */
		/* 82211800h case   33:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R9,regs.R8);
		/* 82211800h case   33:*/		return 0x82211804;
		  /* 82211804h */ case   34:  		/* stw R9, <#[R11]> */
		/* 82211804h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211804h case   34:*/		return 0x82211808;
		  /* 82211808h */ case   35:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211808h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211808h case   35:*/		return 0x8221180C;
		  /* 8221180Ch */ case   36:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221180Ch case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221180Ch case   36:*/		return 0x82211810;
		  /* 82211810h */ case   37:  		/* rlwimi R9, R8, 28, 20, 20 */
		/* 82211810h case   37:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R9,regs.R8);
		/* 82211810h case   37:*/		return 0x82211814;
		  /* 82211814h */ case   38:  		/* stw R9, <#[R11]> */
		/* 82211814h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211814h case   38:*/		return 0x82211818;
		  /* 82211818h */ case   39:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211818h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211818h case   39:*/		return 0x8221181C;
		  /* 8221181Ch */ case   40:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221181Ch case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221181Ch case   40:*/		return 0x82211820;
		  /* 82211820h */ case   41:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 82211820h case   41:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 82211820h case   41:*/		return 0x82211824;
		  /* 82211824h */ case   42:  		/* oris R9, R9, 16 */
		/* 82211824h case   42:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x10);
		/* 82211824h case   42:*/		return 0x82211828;
		  /* 82211828h */ case   43:  		/* stw R9, <#[R11]> */
		/* 82211828h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211828h case   43:*/		return 0x8221182C;
		  /* 8221182Ch */ case   44:  		/* addi R11, R11, 4 */
		/* 8221182Ch case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221182Ch case   44:*/		return 0x82211830;
		  /* 82211830h */ case   45:  		/* lwz R9, <#[R31 + 16]> */
		/* 82211830h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82211830h case   45:*/		return 0x82211834;
		  /* 82211834h */ case   46:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82211834h case   46:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82211834h case   46:*/		return 0x82211838;
		  /* 82211838h */ case   47:  		/* bc 12, CR0_EQ, 16 */
		/* 82211838h case   47:*/		if ( regs.CR[0].eq ) { return 0x82211848;  }
		/* 82211838h case   47:*/		return 0x8221183C;
		  /* 8221183Ch */ case   48:  		/* lwz R9, <#[R31 + 40]> */
		/* 8221183Ch case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 8221183Ch case   48:*/		return 0x82211840;
		  /* 82211840h */ case   49:  		/* stw R9, <#[R11]> */
		/* 82211840h case   49:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211840h case   49:*/		return 0x82211844;
		  /* 82211844h */ case   50:  		/* addi R11, R11, 4 */
		/* 82211844h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211844h case   50:*/		return 0x82211848;
	}
	return 0x82211848;
} // Block from 8221177Ch-82211848h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82211848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211848);
		  /* 82211848h */ case    0:  		/* li R9, 65 */
		/* 82211848h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x41);
		/* 82211848h case    0:*/		return 0x8221184C;
		  /* 8221184Ch */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 8221184Ch case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221184Ch case    1:*/		return 0x82211850;
		  /* 82211850h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 82211850h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211850h case    2:*/		return 0x82211854;
		  /* 82211854h */ case    3:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82211854h case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82211854h case    3:*/		return 0x82211858;
		  /* 82211858h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82211858h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211858h case    4:*/		return 0x8221185C;
		  /* 8221185Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221185Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221185Ch case    5:*/		return 0x82211860;
		  /* 82211860h */ case    6:  		/* lwz R8, <#[R31 + 4]> */
		/* 82211860h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82211860h case    6:*/		return 0x82211864;
		  /* 82211864h */ case    7:  		/* sth R8, <#[R11 + 2]> */
		/* 82211864h case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82211864h case    7:*/		return 0x82211868;
		  /* 82211868h */ case    8:  		/* lwz R8, <#[R31 + 4]> */
		/* 82211868h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82211868h case    8:*/		return 0x8221186C;
		  /* 8221186Ch */ case    9:  		/* lwz R7, <#[R11]> */
		/* 8221186Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221186Ch case    9:*/		return 0x82211870;
		  /* 82211870h */ case   10:  		/* rlwimi R7, R8, 0, 10, 15 */
		/* 82211870h case   10:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R7,regs.R8);
		/* 82211870h case   10:*/		return 0x82211874;
		  /* 82211874h */ case   11:  		/* stw R7, <#[R11]> */
		/* 82211874h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82211874h case   11:*/		return 0x82211878;
		  /* 82211878h */ case   12:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 82211878h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 82211878h case   12:*/		return 0x8221187C;
		  /* 8221187Ch */ case   13:  		/* lwz R8, <#[R31 + 4]> */
		/* 8221187Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221187Ch case   13:*/		return 0x82211880;
		  /* 82211880h */ case   14:  		/* rlwimi R7, R8, 0, 8, 8 */
		/* 82211880h case   14:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R7,regs.R8);
		/* 82211880h case   14:*/		return 0x82211884;
		  /* 82211884h */ case   15:  		/* oris R8, R7, 64 */
		/* 82211884h case   15:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 82211884h case   15:*/		return 0x82211888;
		  /* 82211888h */ case   16:  		/* stw R8, <#[R11]> */
		/* 82211888h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211888h case   16:*/		return 0x8221188C;
		  /* 8221188Ch */ case   17:  		/* stwu R10, <#[R11 + 4]> */
		/* 8221188Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221188Ch case   17:*/		return 0x82211890;
		  /* 82211890h */ case   18:  		/* lwz R8, <#[R31 + 8]> */
		/* 82211890h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82211890h case   18:*/		return 0x82211894;
		  /* 82211894h */ case   19:  		/* rlwinm R8, R8, 0, 24, 25 */
		/* 82211894h case   19:*/		cpu::op::rlwinm<0,0,24,25>(regs,&regs.R8,regs.R8);
		/* 82211894h case   19:*/		return 0x82211898;
		  /* 82211898h */ case   20:  		/* stw R8, <#[R11]> */
		/* 82211898h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82211898h case   20:*/		return 0x8221189C;
		  /* 8221189Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 8221189Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221189Ch case   21:*/		return 0x822118A0;
		  /* 822118A0h */ case   22:  		/* lwz R8, <#[R31 + 4]> */
		/* 822118A0h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822118A0h case   22:*/		return 0x822118A4;
		  /* 822118A4h */ case   23:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822118A4h case   23:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822118A4h case   23:*/		return 0x822118A8;
		  /* 822118A8h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 822118A8h case   24:*/		if ( regs.CR[0].eq ) { return 0x822118B8;  }
		/* 822118A8h case   24:*/		return 0x822118AC;
		  /* 822118ACh */ case   25:  		/* lwz R8, <#[R31 + 12]> */
		/* 822118ACh case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 822118ACh case   25:*/		return 0x822118B0;
		  /* 822118B0h */ case   26:  		/* stw R8, <#[R11]> */
		/* 822118B0h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822118B0h case   26:*/		return 0x822118B4;
		  /* 822118B4h */ case   27:  		/* addi R11, R11, 4 */
		/* 822118B4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822118B4h case   27:*/		return 0x822118B8;
	}
	return 0x822118B8;
} // Block from 82211848h-822118B8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 822118B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822118B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822118B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822118B8);
		  /* 822118B8h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 822118B8h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822118B8h case    0:*/		return 0x822118BC;
		  /* 822118BCh */ case    1:  		/* li R8, 1 */
		/* 822118BCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 822118BCh case    1:*/		return 0x822118C0;
		  /* 822118C0h */ case    2:  		/* li R12, -26215 */
		/* 822118C0h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 822118C0h case    2:*/		return 0x822118C4;
		  /* 822118C4h */ case    3:  		/* lwz R7, <#[R11]> */
		/* 822118C4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822118C4h case    3:*/		return 0x822118C8;
		  /* 822118C8h */ case    4:  		/* rlwimi R7, R9, 16, 8, 15 */
		/* 822118C8h case    4:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R9);
		/* 822118C8h case    4:*/		return 0x822118CC;
		  /* 822118CCh */ case    5:  		/* stw R7, <#[R11]> */
		/* 822118CCh case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822118CCh case    5:*/		return 0x822118D0;
		  /* 822118D0h */ case    6:  		/* stb R8, <#[R11]> */
		/* 822118D0h case    6:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822118D0h case    6:*/		return 0x822118D4;
		  /* 822118D4h */ case    7:  		/* lwzu R7, <#[R11 + 4]> */
		/* 822118D4h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822118D4h case    7:*/		return 0x822118D8;
		  /* 822118D8h */ case    8:  		/* and R7, R7, R12 */
		/* 822118D8h case    8:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 822118D8h case    8:*/		return 0x822118DC;
		  /* 822118DCh */ case    9:  		/* ori R7, R7, 4369 */
		/* 822118DCh case    9:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x1111);
		/* 822118DCh case    9:*/		return 0x822118E0;
		  /* 822118E0h */ case   10:  		/* stw R7, <#[R11]> */
		/* 822118E0h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822118E0h case   10:*/		return 0x822118E4;
		  /* 822118E4h */ case   11:  		/* addi R11, R11, 4 */
		/* 822118E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822118E4h case   11:*/		return 0x822118E8;
		  /* 822118E8h */ case   12:  		/* sth R10, <#[R11 + 2]> */
		/* 822118E8h case   12:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822118E8h case   12:*/		return 0x822118EC;
		  /* 822118ECh */ case   13:  		/* lwz R10, <#[R11]> */
		/* 822118ECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822118ECh case   13:*/		return 0x822118F0;
		  /* 822118F0h */ case   14:  		/* rlwimi R10, R9, 16, 8, 15 */
		/* 822118F0h case   14:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R9);
		/* 822118F0h case   14:*/		return 0x822118F4;
		  /* 822118F4h */ case   15:  		/* stw R10, <#[R11]> */
		/* 822118F4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822118F4h case   15:*/		return 0x822118F8;
		  /* 822118F8h */ case   16:  		/* stb R8, <#[R11]> */
		/* 822118F8h case   16:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822118F8h case   16:*/		return 0x822118FC;
		  /* 822118FCh */ case   17:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822118FCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822118FCh case   17:*/		return 0x82211900;
		  /* 82211900h */ case   18:  		/* and R10, R10, R12 */
		/* 82211900h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82211900h case   18:*/		return 0x82211904;
		  /* 82211904h */ case   19:  		/* ori R10, R10, 4369 */
		/* 82211904h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1111);
		/* 82211904h case   19:*/		return 0x82211908;
		  /* 82211908h */ case   20:  		/* addi R3, R11, 4 */
		/* 82211908h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82211908h case   20:*/		return 0x8221190C;
		  /* 8221190Ch */ case   21:  		/* stw R10, <#[R11]> */
		/* 8221190Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221190Ch case   21:*/		return 0x82211910;
		  /* 82211910h */ case   22:  		/* addi R1, R1, 112 */
		/* 82211910h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82211910h case   22:*/		return 0x82211914;
		  /* 82211914h */ case   23:  		/* lwz R12, <#[R1 - 8]> */
		/* 82211914h case   23:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82211914h case   23:*/		return 0x82211918;
		  /* 82211918h */ case   24:  		/* mtspr LR, R12 */
		/* 82211918h case   24:*/		regs.LR = regs.R12;
		/* 82211918h case   24:*/		return 0x8221191C;
		  /* 8221191Ch */ case   25:  		/* ld R30, <#[R1 - 24]> */
		/* 8221191Ch case   25:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221191Ch case   25:*/		return 0x82211920;
		  /* 82211920h */ case   26:  		/* ld R31, <#[R1 - 16]> */
		/* 82211920h case   26:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82211920h case   26:*/		return 0x82211924;
		  /* 82211924h */ case   27:  		/* bclr 20, CR0_LT */
		/* 82211924h case   27:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82211924h case   27:*/		return 0x82211928;
	}
	return 0x82211928;
} // Block from 822118B8h-82211928h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82211928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211928);
		  /* 82211928h */ case    0:  		/* mfspr R12, LR */
		/* 82211928h case    0:*/		regs.R12 = regs.LR;
		/* 82211928h case    0:*/		return 0x8221192C;
		  /* 8221192Ch */ case    1:  		/* bl -1574616 */
		/* 8221192Ch case    1:*/		regs.LR = 0x82211930; return 0x82091254;
		/* 8221192Ch case    1:*/		return 0x82211930;
		  /* 82211930h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82211930h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82211930h case    2:*/		return 0x82211934;
		  /* 82211934h */ case    3:  		/* mr R29, R3 */
		/* 82211934h case    3:*/		regs.R29 = regs.R3;
		/* 82211934h case    3:*/		return 0x82211938;
		  /* 82211938h */ case    4:  		/* mr R31, R4 */
		/* 82211938h case    4:*/		regs.R31 = regs.R4;
		/* 82211938h case    4:*/		return 0x8221193C;
		  /* 8221193Ch */ case    5:  		/* mr R30, R5 */
		/* 8221193Ch case    5:*/		regs.R30 = regs.R5;
		/* 8221193Ch case    5:*/		return 0x82211940;
		  /* 82211940h */ case    6:  		/* bl -10008 */
		/* 82211940h case    6:*/		regs.LR = 0x82211944; return 0x8220F228;
		/* 82211940h case    6:*/		return 0x82211944;
		  /* 82211944h */ case    7:  		/* li R7, 65 */
		/* 82211944h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x41);
		/* 82211944h case    7:*/		return 0x82211948;
		  /* 82211948h */ case    8:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 82211948h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 82211948h case    8:*/		return 0x8221194C;
		  /* 8221194Ch */ case    9:  		/* sth R7, <#[R30 + 2]> */
		/* 8221194Ch case    9:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R30 + 0x00000002) );
		/* 8221194Ch case    9:*/		return 0x82211950;
		  /* 82211950h */ case   10:  		/* li R8, 17 */
		/* 82211950h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 82211950h case   10:*/		return 0x82211954;
		  /* 82211954h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 82211954h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82211954h case   11:*/		return 0x82211958;
		  /* 82211958h */ case   12:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82211958h case   12:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82211958h case   12:*/		return 0x8221195C;
		  /* 8221195Ch */ case   13:  		/* stw R11, <#[R30]> */
		/* 8221195Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221195Ch case   13:*/		return 0x82211960;
		  /* 82211960h */ case   14:  		/* addi R11, R30, 4 */
		/* 82211960h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82211960h case   14:*/		return 0x82211964;
		  /* 82211964h */ case   15:  		/* sth R10, <#[R30 + 6]> */
		/* 82211964h case   15:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 82211964h case   15:*/		return 0x82211968;
		  /* 82211968h */ case   16:  		/* li R4, 4 */
		/* 82211968h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82211968h case   16:*/		return 0x8221196C;
		  /* 8221196Ch */ case   17:  		/* lwz R9, <#[R30 + 4]> */
		/* 8221196Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8221196Ch case   17:*/		return 0x82211970;
		  /* 82211970h */ case   18:  		/* rlwimi R9, R8, 18, 8, 15 */
		/* 82211970h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R8);
		/* 82211970h case   18:*/		return 0x82211974;
		  /* 82211974h */ case   19:  		/* stw R9, <#[R30 + 4]> */
		/* 82211974h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82211974h case   19:*/		return 0x82211978;
		  /* 82211978h */ case   20:  		/* stwu R4, <#[R11 + 4]> */
		/* 82211978h case   20:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211978h case   20:*/		return 0x8221197C;
		  /* 8221197Ch */ case   21:  		/* lwz R9, <#[R31 + 16]> */
		/* 8221197Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221197Ch case   21:*/		return 0x82211980;
		  /* 82211980h */ case   22:  		/* addi R11, R11, 4 */
		/* 82211980h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211980h case   22:*/		return 0x82211984;
		  /* 82211984h */ case   23:  		/* sth R9, <#[R11 + 2]> */
		/* 82211984h case   23:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211984h case   23:*/		return 0x82211988;
		  /* 82211988h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 82211988h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211988h case   24:*/		return 0x8221198C;
		  /* 8221198Ch */ case   25:  		/* lwz R6, <#[R31 + 16]> */
		/* 8221198Ch case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 8221198Ch case   25:*/		return 0x82211990;
		  /* 82211990h */ case   26:  		/* rlwimi R6, R9, 0, 16, 9 */
		/* 82211990h case   26:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R9);
		/* 82211990h case   26:*/		return 0x82211994;
		  /* 82211994h */ case   27:  		/* rlwinm R9, R6, 0, 0, 31 */
		/* 82211994h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R6);
		/* 82211994h case   27:*/		return 0x82211998;
		  /* 82211998h */ case   28:  		/* stw R6, <#[R11]> */
		/* 82211998h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82211998h case   28:*/		return 0x8221199C;
		  /* 8221199Ch */ case   29:  		/* lwz R6, <#[R31 + 16]> */
		/* 8221199Ch case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 8221199Ch case   29:*/		return 0x822119A0;
		  /* 822119A0h */ case   30:  		/* rlwimi R6, R9, 0, 9, 7 */
		/* 822119A0h case   30:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R6,regs.R9);
		/* 822119A0h case   30:*/		return 0x822119A4;
		  /* 822119A4h */ case   31:  		/* oris R9, R6, 64 */
		/* 822119A4h case   31:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R6,0x40);
		/* 822119A4h case   31:*/		return 0x822119A8;
		  /* 822119A8h */ case   32:  		/* stw R9, <#[R11]> */
		/* 822119A8h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119A8h case   32:*/		return 0x822119AC;
		  /* 822119ACh */ case   33:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822119ACh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822119ACh case   33:*/		return 0x822119B0;
		  /* 822119B0h */ case   34:  		/* lwz R6, <#[R31 + 28]> */
		/* 822119B0h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822119B0h case   34:*/		return 0x822119B4;
		  /* 822119B4h */ case   35:  		/* rlwimi R9, R6, 28, 29, 31 */
		/* 822119B4h case   35:*/		cpu::op::rlwimi<0,28,29,31>(regs,&regs.R9,regs.R6);
		/* 822119B4h case   35:*/		return 0x822119B8;
		  /* 822119B8h */ case   36:  		/* stw R9, <#[R11]> */
		/* 822119B8h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119B8h case   36:*/		return 0x822119BC;
		  /* 822119BCh */ case   37:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822119BCh case   37:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822119BCh case   37:*/		return 0x822119C0;
		  /* 822119C0h */ case   38:  		/* lwz R6, <#[R31 + 28]> */
		/* 822119C0h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822119C0h case   38:*/		return 0x822119C4;
		  /* 822119C4h */ case   39:  		/* rlwimi R9, R6, 0, 25, 27 */
		/* 822119C4h case   39:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R9,regs.R6);
		/* 822119C4h case   39:*/		return 0x822119C8;
		  /* 822119C8h */ case   40:  		/* stw R9, <#[R11]> */
		/* 822119C8h case   40:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119C8h case   40:*/		return 0x822119CC;
		  /* 822119CCh */ case   41:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822119CCh case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822119CCh case   41:*/		return 0x822119D0;
		  /* 822119D0h */ case   42:  		/* lwz R6, <#[R31 + 28]> */
		/* 822119D0h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822119D0h case   42:*/		return 0x822119D4;
		  /* 822119D4h */ case   43:  		/* rlwimi R9, R6, 4, 21, 23 */
		/* 822119D4h case   43:*/		cpu::op::rlwimi<0,4,21,23>(regs,&regs.R9,regs.R6);
		/* 822119D4h case   43:*/		return 0x822119D8;
	}
	return 0x822119D8;
} // Block from 82211928h-822119D8h (44 instructions)

//////////////////////////////////////////////////////
// Block at 822119D8h
// Function '?DoDiv@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822119D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822119D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822119D8);
		  /* 822119D8h */ case    0:  		/* stw R9, <#[R11]> */
		/* 822119D8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119D8h case    0:*/		return 0x822119DC;
		  /* 822119DCh */ case    1:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822119DCh case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822119DCh case    1:*/		return 0x822119E0;
		  /* 822119E0h */ case    2:  		/* lwz R6, <#[R31 + 28]> */
		/* 822119E0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822119E0h case    2:*/		return 0x822119E4;
		  /* 822119E4h */ case    3:  		/* rlwimi R9, R6, 8, 17, 19 */
		/* 822119E4h case    3:*/		cpu::op::rlwimi<0,8,17,19>(regs,&regs.R9,regs.R6);
		/* 822119E4h case    3:*/		return 0x822119E8;
		  /* 822119E8h */ case    4:  		/* stw R9, <#[R11]> */
		/* 822119E8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119E8h case    4:*/		return 0x822119EC;
		  /* 822119ECh */ case    5:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822119ECh case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822119ECh case    5:*/		return 0x822119F0;
		  /* 822119F0h */ case    6:  		/* lwz R6, <#[R31 + 28]> */
		/* 822119F0h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822119F0h case    6:*/		return 0x822119F4;
		  /* 822119F4h */ case    7:  		/* rlwimi R9, R6, 28, 28, 28 */
		/* 822119F4h case    7:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R9,regs.R6);
		/* 822119F4h case    7:*/		return 0x822119F8;
		  /* 822119F8h */ case    8:  		/* stw R9, <#[R11]> */
		/* 822119F8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822119F8h case    8:*/		return 0x822119FC;
		  /* 822119FCh */ case    9:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822119FCh case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822119FCh case    9:*/		return 0x82211A00;
		  /* 82211A00h */ case   10:  		/* lwz R6, <#[R31 + 28]> */
		/* 82211A00h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211A00h case   10:*/		return 0x82211A04;
		  /* 82211A04h */ case   11:  		/* rlwimi R9, R6, 0, 24, 24 */
		/* 82211A04h case   11:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R9,regs.R6);
		/* 82211A04h case   11:*/		return 0x82211A08;
		  /* 82211A08h */ case   12:  		/* stw R9, <#[R11]> */
		/* 82211A08h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A08h case   12:*/		return 0x82211A0C;
		  /* 82211A0Ch */ case   13:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211A0Ch case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211A0Ch case   13:*/		return 0x82211A10;
		  /* 82211A10h */ case   14:  		/* lwz R6, <#[R31 + 28]> */
		/* 82211A10h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211A10h case   14:*/		return 0x82211A14;
		  /* 82211A14h */ case   15:  		/* rlwimi R9, R6, 4, 20, 20 */
		/* 82211A14h case   15:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R9,regs.R6);
		/* 82211A14h case   15:*/		return 0x82211A18;
		  /* 82211A18h */ case   16:  		/* stw R9, <#[R11]> */
		/* 82211A18h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A18h case   16:*/		return 0x82211A1C;
		  /* 82211A1Ch */ case   17:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211A1Ch case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211A1Ch case   17:*/		return 0x82211A20;
		  /* 82211A20h */ case   18:  		/* lwz R6, <#[R31 + 28]> */
		/* 82211A20h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211A20h case   18:*/		return 0x82211A24;
		  /* 82211A24h */ case   19:  		/* rlwimi R9, R6, 8, 16, 16 */
		/* 82211A24h case   19:*/		cpu::op::rlwimi<0,8,16,16>(regs,&regs.R9,regs.R6);
		/* 82211A24h case   19:*/		return 0x82211A28;
		  /* 82211A28h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82211A28h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A28h case   20:*/		return 0x82211A2C;
		  /* 82211A2Ch */ case   21:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82211A2Ch case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82211A2Ch case   21:*/		return 0x82211A30;
		  /* 82211A30h */ case   22:  		/* lwz R6, <#[R31 + 28]> */
		/* 82211A30h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211A30h case   22:*/		return 0x82211A34;
		  /* 82211A34h */ case   23:  		/* rlwimi R9, R6, 0, 11, 11 */
		/* 82211A34h case   23:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R9,regs.R6);
		/* 82211A34h case   23:*/		return 0x82211A38;
		  /* 82211A38h */ case   24:  		/* stw R9, <#[R11]> */
		/* 82211A38h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A38h case   24:*/		return 0x82211A3C;
		  /* 82211A3Ch */ case   25:  		/* addi R11, R11, 4 */
		/* 82211A3Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211A3Ch case   25:*/		return 0x82211A40;
		  /* 82211A40h */ case   26:  		/* lwz R9, <#[R31 + 16]> */
		/* 82211A40h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82211A40h case   26:*/		return 0x82211A44;
		  /* 82211A44h */ case   27:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82211A44h case   27:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82211A44h case   27:*/		return 0x82211A48;
		  /* 82211A48h */ case   28:  		/* bc 12, CR0_EQ, 16 */
		/* 82211A48h case   28:*/		if ( regs.CR[0].eq ) { return 0x82211A58;  }
		/* 82211A48h case   28:*/		return 0x82211A4C;
		  /* 82211A4Ch */ case   29:  		/* lwz R9, <#[R31 + 40]> */
		/* 82211A4Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82211A4Ch case   29:*/		return 0x82211A50;
		  /* 82211A50h */ case   30:  		/* stw R9, <#[R11]> */
		/* 82211A50h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A50h case   30:*/		return 0x82211A54;
		  /* 82211A54h */ case   31:  		/* addi R11, R11, 4 */
		/* 82211A54h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211A54h case   31:*/		return 0x82211A58;
	}
	return 0x82211A58;
} // Block from 822119D8h-82211A58h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82211A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211A58);
		  /* 82211A58h */ case    0:  		/* li R6, 0 */
		/* 82211A58h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82211A58h case    0:*/		return 0x82211A5C;
		  /* 82211A5Ch */ case    1:  		/* li R9, 1 */
		/* 82211A5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82211A5Ch case    1:*/		return 0x82211A60;
		  /* 82211A60h */ case    2:  		/* sth R6, <#[R11 + 2]> */
		/* 82211A60h case    2:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211A60h case    2:*/		return 0x82211A64;
		  /* 82211A64h */ case    3:  		/* li R12, -30584 */
		/* 82211A64h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82211A64h case    3:*/		return 0x82211A68;
		  /* 82211A68h */ case    4:  		/* lwz R3, <#[R11]> */
		/* 82211A68h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A68h case    4:*/		return 0x82211A6C;
		  /* 82211A6Ch */ case    5:  		/* rlwimi R3, R7, 16, 8, 15 */
		/* 82211A6Ch case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R7);
		/* 82211A6Ch case    5:*/		return 0x82211A70;
		  /* 82211A70h */ case    6:  		/* stw R3, <#[R11]> */
		/* 82211A70h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A70h case    6:*/		return 0x82211A74;
		  /* 82211A74h */ case    7:  		/* li R5, 64 */
		/* 82211A74h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 82211A74h case    7:*/		return 0x82211A78;
		  /* 82211A78h */ case    8:  		/* stb R9, <#[R11]> */
		/* 82211A78h case    8:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A78h case    8:*/		return 0x82211A7C;
		  /* 82211A7Ch */ case    9:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211A7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211A7Ch case    9:*/		return 0x82211A80;
		  /* 82211A80h */ case   10:  		/* and R3, R3, R12 */
		/* 82211A80h case   10:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82211A80h case   10:*/		return 0x82211A84;
		  /* 82211A84h */ case   11:  		/* stw R3, <#[R11]> */
		/* 82211A84h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A84h case   11:*/		return 0x82211A88;
		  /* 82211A88h */ case   12:  		/* addi R11, R11, 4 */
		/* 82211A88h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211A88h case   12:*/		return 0x82211A8C;
		  /* 82211A8Ch */ case   13:  		/* sth R7, <#[R11 + 2]> */
		/* 82211A8Ch case   13:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82211A8Ch case   13:*/		return 0x82211A90;
		  /* 82211A90h */ case   14:  		/* lwz R3, <#[R11]> */
		/* 82211A90h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A90h case   14:*/		return 0x82211A94;
		  /* 82211A94h */ case   15:  		/* rlwinm R3, R3, 0, 16, 2 */
		/* 82211A94h case   15:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R3,regs.R3);
		/* 82211A94h case   15:*/		return 0x82211A98;
		  /* 82211A98h */ case   16:  		/* stw R3, <#[R11]> */
		/* 82211A98h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211A98h case   16:*/		return 0x82211A9C;
		  /* 82211A9Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 82211A9Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211A9Ch case   17:*/		return 0x82211AA0;
		  /* 82211AA0h */ case   18:  		/* sth R10, <#[R11 + 2]> */
		/* 82211AA0h case   18:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211AA0h case   18:*/		return 0x82211AA4;
		  /* 82211AA4h */ case   19:  		/* lwz R3, <#[R11]> */
		/* 82211AA4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AA4h case   19:*/		return 0x82211AA8;
		  /* 82211AA8h */ case   20:  		/* rlwimi R3, R8, 18, 8, 15 */
		/* 82211AA8h case   20:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R8);
		/* 82211AA8h case   20:*/		return 0x82211AAC;
		  /* 82211AACh */ case   21:  		/* stw R3, <#[R11]> */
		/* 82211AACh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AACh case   21:*/		return 0x82211AB0;
		  /* 82211AB0h */ case   22:  		/* stwu R5, <#[R11 + 4]> */
		/* 82211AB0h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211AB0h case   22:*/		return 0x82211AB4;
		  /* 82211AB4h */ case   23:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211AB4h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211AB4h case   23:*/		return 0x82211AB8;
		  /* 82211AB8h */ case   24:  		/* addi R11, R11, 4 */
		/* 82211AB8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211AB8h case   24:*/		return 0x82211ABC;
		  /* 82211ABCh */ case   25:  		/* sth R3, <#[R11 + 2]> */
		/* 82211ABCh case   25:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211ABCh case   25:*/		return 0x82211AC0;
		  /* 82211AC0h */ case   26:  		/* lwz R3, <#[R11]> */
		/* 82211AC0h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AC0h case   26:*/		return 0x82211AC4;
		  /* 82211AC4h */ case   27:  		/* lwz R30, <#[R31 + 16]> */
		/* 82211AC4h case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 82211AC4h case   27:*/		return 0x82211AC8;
		  /* 82211AC8h */ case   28:  		/* rlwimi R30, R3, 0, 16, 9 */
		/* 82211AC8h case   28:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R30,regs.R3);
		/* 82211AC8h case   28:*/		return 0x82211ACC;
		  /* 82211ACCh */ case   29:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82211ACCh case   29:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82211ACCh case   29:*/		return 0x82211AD0;
		  /* 82211AD0h */ case   30:  		/* stw R30, <#[R11]> */
		/* 82211AD0h case   30:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AD0h case   30:*/		return 0x82211AD4;
		  /* 82211AD4h */ case   31:  		/* lwz R30, <#[R31 + 16]> */
		/* 82211AD4h case   31:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 82211AD4h case   31:*/		return 0x82211AD8;
		  /* 82211AD8h */ case   32:  		/* rlwimi R30, R3, 0, 9, 7 */
		/* 82211AD8h case   32:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R30,regs.R3);
		/* 82211AD8h case   32:*/		return 0x82211ADC;
		  /* 82211ADCh */ case   33:  		/* oris R3, R30, 64 */
		/* 82211ADCh case   33:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R30,0x40);
		/* 82211ADCh case   33:*/		return 0x82211AE0;
		  /* 82211AE0h */ case   34:  		/* stw R3, <#[R11]> */
		/* 82211AE0h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AE0h case   34:*/		return 0x82211AE4;
		  /* 82211AE4h */ case   35:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211AE4h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211AE4h case   35:*/		return 0x82211AE8;
		  /* 82211AE8h */ case   36:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211AE8h case   36:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211AE8h case   36:*/		return 0x82211AEC;
		  /* 82211AECh */ case   37:  		/* rlwimi R3, R30, 20, 29, 31 */
		/* 82211AECh case   37:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R3,regs.R30);
		/* 82211AECh case   37:*/		return 0x82211AF0;
		  /* 82211AF0h */ case   38:  		/* stw R3, <#[R11]> */
		/* 82211AF0h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211AF0h case   38:*/		return 0x82211AF4;
		  /* 82211AF4h */ case   39:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211AF4h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211AF4h case   39:*/		return 0x82211AF8;
		  /* 82211AF8h */ case   40:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211AF8h case   40:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211AF8h case   40:*/		return 0x82211AFC;
		  /* 82211AFCh */ case   41:  		/* rlwimi R3, R30, 24, 25, 27 */
		/* 82211AFCh case   41:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R3,regs.R30);
		/* 82211AFCh case   41:*/		return 0x82211B00;
		  /* 82211B00h */ case   42:  		/* stw R3, <#[R11]> */
		/* 82211B00h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B00h case   42:*/		return 0x82211B04;
		  /* 82211B04h */ case   43:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211B04h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211B04h case   43:*/		return 0x82211B08;
		  /* 82211B08h */ case   44:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B08h case   44:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B08h case   44:*/		return 0x82211B0C;
		  /* 82211B0Ch */ case   45:  		/* rlwimi R3, R30, 28, 21, 23 */
		/* 82211B0Ch case   45:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R3,regs.R30);
		/* 82211B0Ch case   45:*/		return 0x82211B10;
		  /* 82211B10h */ case   46:  		/* stw R3, <#[R11]> */
		/* 82211B10h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B10h case   46:*/		return 0x82211B14;
		  /* 82211B14h */ case   47:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211B14h case   47:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211B14h case   47:*/		return 0x82211B18;
		  /* 82211B18h */ case   48:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B18h case   48:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B18h case   48:*/		return 0x82211B1C;
		  /* 82211B1Ch */ case   49:  		/* rlwimi R30, R3, 0, 20, 16 */
		/* 82211B1Ch case   49:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R30,regs.R3);
		/* 82211B1Ch case   49:*/		return 0x82211B20;
		  /* 82211B20h */ case   50:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82211B20h case   50:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82211B20h case   50:*/		return 0x82211B24;
		  /* 82211B24h */ case   51:  		/* stw R30, <#[R11]> */
		/* 82211B24h case   51:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B24h case   51:*/		return 0x82211B28;
		  /* 82211B28h */ case   52:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B28h case   52:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B28h case   52:*/		return 0x82211B2C;
		  /* 82211B2Ch */ case   53:  		/* rlwimi R3, R30, 20, 28, 28 */
		/* 82211B2Ch case   53:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R3,regs.R30);
		/* 82211B2Ch case   53:*/		return 0x82211B30;
		  /* 82211B30h */ case   54:  		/* stw R3, <#[R11]> */
		/* 82211B30h case   54:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B30h case   54:*/		return 0x82211B34;
		  /* 82211B34h */ case   55:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211B34h case   55:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211B34h case   55:*/		return 0x82211B38;
		  /* 82211B38h */ case   56:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B38h case   56:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B38h case   56:*/		return 0x82211B3C;
		  /* 82211B3Ch */ case   57:  		/* rlwimi R3, R30, 24, 24, 24 */
		/* 82211B3Ch case   57:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R3,regs.R30);
		/* 82211B3Ch case   57:*/		return 0x82211B40;
		  /* 82211B40h */ case   58:  		/* stw R3, <#[R11]> */
		/* 82211B40h case   58:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B40h case   58:*/		return 0x82211B44;
		  /* 82211B44h */ case   59:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211B44h case   59:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211B44h case   59:*/		return 0x82211B48;
		  /* 82211B48h */ case   60:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B48h case   60:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B48h case   60:*/		return 0x82211B4C;
		  /* 82211B4Ch */ case   61:  		/* rlwimi R3, R30, 28, 20, 20 */
		/* 82211B4Ch case   61:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R3,regs.R30);
		/* 82211B4Ch case   61:*/		return 0x82211B50;
		  /* 82211B50h */ case   62:  		/* stw R3, <#[R11]> */
		/* 82211B50h case   62:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B50h case   62:*/		return 0x82211B54;
		  /* 82211B54h */ case   63:  		/* lwz R3, <#[R31 + 28]> */
		/* 82211B54h case   63:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B54h case   63:*/		return 0x82211B58;
		  /* 82211B58h */ case   64:  		/* lwz R30, <#[R11]> */
		/* 82211B58h case   64:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B58h case   64:*/		return 0x82211B5C;
		  /* 82211B5Ch */ case   65:  		/* rlwimi R30, R3, 0, 16, 16 */
		/* 82211B5Ch case   65:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R30,regs.R3);
		/* 82211B5Ch case   65:*/		return 0x82211B60;
		  /* 82211B60h */ case   66:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82211B60h case   66:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82211B60h case   66:*/		return 0x82211B64;
		  /* 82211B64h */ case   67:  		/* stw R30, <#[R11]> */
		/* 82211B64h case   67:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B64h case   67:*/		return 0x82211B68;
		  /* 82211B68h */ case   68:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211B68h case   68:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211B68h case   68:*/		return 0x82211B6C;
		  /* 82211B6Ch */ case   69:  		/* rlwimi R3, R30, 0, 11, 11 */
		/* 82211B6Ch case   69:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R3,regs.R30);
		/* 82211B6Ch case   69:*/		return 0x82211B70;
		  /* 82211B70h */ case   70:  		/* stw R3, <#[R11]> */
		/* 82211B70h case   70:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B70h case   70:*/		return 0x82211B74;
		  /* 82211B74h */ case   71:  		/* addi R11, R11, 4 */
		/* 82211B74h case   71:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211B74h case   71:*/		return 0x82211B78;
		  /* 82211B78h */ case   72:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211B78h case   72:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211B78h case   72:*/		return 0x82211B7C;
		  /* 82211B7Ch */ case   73:  		/* rlwinm. R3, R3, 0, 8, 8 */
		/* 82211B7Ch case   73:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R3,regs.R3);
		/* 82211B7Ch case   73:*/		return 0x82211B80;
		  /* 82211B80h */ case   74:  		/* bc 12, CR0_EQ, 16 */
		/* 82211B80h case   74:*/		if ( regs.CR[0].eq ) { return 0x82211B90;  }
		/* 82211B80h case   74:*/		return 0x82211B84;
		  /* 82211B84h */ case   75:  		/* lwz R3, <#[R31 + 40]> */
		/* 82211B84h case   75:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82211B84h case   75:*/		return 0x82211B88;
		  /* 82211B88h */ case   76:  		/* stw R3, <#[R11]> */
		/* 82211B88h case   76:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B88h case   76:*/		return 0x82211B8C;
		  /* 82211B8Ch */ case   77:  		/* addi R11, R11, 4 */
		/* 82211B8Ch case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211B8Ch case   77:*/		return 0x82211B90;
	}
	return 0x82211B90;
} // Block from 82211A58h-82211B90h (78 instructions)

//////////////////////////////////////////////////////
// Block at 82211B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211B90);
		  /* 82211B90h */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 82211B90h case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211B90h case    0:*/		return 0x82211B94;
		  /* 82211B94h */ case    1:  		/* li R12, -30584 */
		/* 82211B94h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82211B94h case    1:*/		return 0x82211B98;
		  /* 82211B98h */ case    2:  		/* lwz R30, <#[R11]> */
		/* 82211B98h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211B98h case    2:*/		return 0x82211B9C;
		  /* 82211B9Ch */ case    3:  		/* rlwimi R30, R7, 16, 8, 15 */
		/* 82211B9Ch case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R30,regs.R7);
		/* 82211B9Ch case    3:*/		return 0x82211BA0;
		  /* 82211BA0h */ case    4:  		/* stw R30, <#[R11]> */
		/* 82211BA0h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BA0h case    4:*/		return 0x82211BA4;
		  /* 82211BA4h */ case    5:  		/* li R3, 68 */
		/* 82211BA4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x44);
		/* 82211BA4h case    5:*/		return 0x82211BA8;
		  /* 82211BA8h */ case    6:  		/* stb R9, <#[R11]> */
		/* 82211BA8h case    6:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BA8h case    6:*/		return 0x82211BAC;
		  /* 82211BACh */ case    7:  		/* lwzu R30, <#[R11 + 4]> */
		/* 82211BACh case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211BACh case    7:*/		return 0x82211BB0;
		  /* 82211BB0h */ case    8:  		/* and R30, R30, R12 */
		/* 82211BB0h case    8:*/		cpu::op::and<0>(regs,&regs.R30,regs.R30,regs.R12);
		/* 82211BB0h case    8:*/		return 0x82211BB4;
		  /* 82211BB4h */ case    9:  		/* stw R30, <#[R11]> */
		/* 82211BB4h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BB4h case    9:*/		return 0x82211BB8;
		  /* 82211BB8h */ case   10:  		/* addi R11, R11, 4 */
		/* 82211BB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211BB8h case   10:*/		return 0x82211BBC;
		  /* 82211BBCh */ case   11:  		/* li R12, -17477 */
		/* 82211BBCh case   11:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82211BBCh case   11:*/		return 0x82211BC0;
		  /* 82211BC0h */ case   12:  		/* sth R3, <#[R11 + 2]> */
		/* 82211BC0h case   12:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211BC0h case   12:*/		return 0x82211BC4;
		  /* 82211BC4h */ case   13:  		/* lwz R3, <#[R11]> */
		/* 82211BC4h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BC4h case   13:*/		return 0x82211BC8;
		  /* 82211BC8h */ case   14:  		/* rlwinm R3, R3, 0, 16, 2 */
		/* 82211BC8h case   14:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R3,regs.R3);
		/* 82211BC8h case   14:*/		return 0x82211BCC;
		  /* 82211BCCh */ case   15:  		/* stw R3, <#[R11]> */
		/* 82211BCCh case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BCCh case   15:*/		return 0x82211BD0;
		  /* 82211BD0h */ case   16:  		/* addi R11, R11, 4 */
		/* 82211BD0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211BD0h case   16:*/		return 0x82211BD4;
		  /* 82211BD4h */ case   17:  		/* sth R10, <#[R11 + 2]> */
		/* 82211BD4h case   17:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211BD4h case   17:*/		return 0x82211BD8;
		  /* 82211BD8h */ case   18:  		/* lwz R3, <#[R11]> */
		/* 82211BD8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BD8h case   18:*/		return 0x82211BDC;
		  /* 82211BDCh */ case   19:  		/* rlwimi R3, R8, 18, 8, 15 */
		/* 82211BDCh case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R8);
		/* 82211BDCh case   19:*/		return 0x82211BE0;
		  /* 82211BE0h */ case   20:  		/* stw R3, <#[R11]> */
		/* 82211BE0h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BE0h case   20:*/		return 0x82211BE4;
		  /* 82211BE4h */ case   21:  		/* stwu R5, <#[R11 + 4]> */
		/* 82211BE4h case   21:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211BE4h case   21:*/		return 0x82211BE8;
		  /* 82211BE8h */ case   22:  		/* addi R11, R11, 4 */
		/* 82211BE8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211BE8h case   22:*/		return 0x82211BEC;
		  /* 82211BECh */ case   23:  		/* sth R10, <#[R11 + 2]> */
		/* 82211BECh case   23:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211BECh case   23:*/		return 0x82211BF0;
		  /* 82211BF0h */ case   24:  		/* lwz R3, <#[R11]> */
		/* 82211BF0h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BF0h case   24:*/		return 0x82211BF4;
		  /* 82211BF4h */ case   25:  		/* rlwimi R3, R8, 18, 8, 15 */
		/* 82211BF4h case   25:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R8);
		/* 82211BF4h case   25:*/		return 0x82211BF8;
		  /* 82211BF8h */ case   26:  		/* stw R3, <#[R11]> */
		/* 82211BF8h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211BF8h case   26:*/		return 0x82211BFC;
		  /* 82211BFCh */ case   27:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211BFCh case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211BFCh case   27:*/		return 0x82211C00;
		  /* 82211C00h */ case   28:  		/* and R3, R3, R12 */
		/* 82211C00h case   28:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82211C00h case   28:*/		return 0x82211C04;
		  /* 82211C04h */ case   29:  		/* li R12, -26215 */
		/* 82211C04h case   29:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82211C04h case   29:*/		return 0x82211C08;
		  /* 82211C08h */ case   30:  		/* ori R3, R3, 13107 */
		/* 82211C08h case   30:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x3333);
		/* 82211C08h case   30:*/		return 0x82211C0C;
		  /* 82211C0Ch */ case   31:  		/* stw R3, <#[R11]> */
		/* 82211C0Ch case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C0Ch case   31:*/		return 0x82211C10;
		  /* 82211C10h */ case   32:  		/* addi R11, R11, 4 */
		/* 82211C10h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211C10h case   32:*/		return 0x82211C14;
		  /* 82211C14h */ case   33:  		/* sth R9, <#[R11 + 2]> */
		/* 82211C14h case   33:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82211C14h case   33:*/		return 0x82211C18;
		  /* 82211C18h */ case   34:  		/* lwz R3, <#[R11]> */
		/* 82211C18h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C18h case   34:*/		return 0x82211C1C;
		  /* 82211C1Ch */ case   35:  		/* rlwimi R3, R7, 16, 8, 15 */
		/* 82211C1Ch case   35:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R7);
		/* 82211C1Ch case   35:*/		return 0x82211C20;
		  /* 82211C20h */ case   36:  		/* stw R3, <#[R11]> */
		/* 82211C20h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C20h case   36:*/		return 0x82211C24;
		  /* 82211C24h */ case   37:  		/* stb R9, <#[R11]> */
		/* 82211C24h case   37:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C24h case   37:*/		return 0x82211C28;
		  /* 82211C28h */ case   38:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211C28h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211C28h case   38:*/		return 0x82211C2C;
		  /* 82211C2Ch */ case   39:  		/* and R3, R3, R12 */
		/* 82211C2Ch case   39:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82211C2Ch case   39:*/		return 0x82211C30;
		  /* 82211C30h */ case   40:  		/* ori R3, R3, 4369 */
		/* 82211C30h case   40:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1111);
		/* 82211C30h case   40:*/		return 0x82211C34;
		  /* 82211C34h */ case   41:  		/* stw R3, <#[R11]> */
		/* 82211C34h case   41:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C34h case   41:*/		return 0x82211C38;
		  /* 82211C38h */ case   42:  		/* addi R11, R11, 4 */
		/* 82211C38h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211C38h case   42:*/		return 0x82211C3C;
		  /* 82211C3Ch */ case   43:  		/* sth R7, <#[R11 + 2]> */
		/* 82211C3Ch case   43:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82211C3Ch case   43:*/		return 0x82211C40;
		  /* 82211C40h */ case   44:  		/* lwz R3, <#[R11]> */
		/* 82211C40h case   44:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C40h case   44:*/		return 0x82211C44;
		  /* 82211C44h */ case   45:  		/* rlwinm R3, R3, 0, 16, 2 */
		/* 82211C44h case   45:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R3,regs.R3);
		/* 82211C44h case   45:*/		return 0x82211C48;
		  /* 82211C48h */ case   46:  		/* stw R3, <#[R11]> */
		/* 82211C48h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C48h case   46:*/		return 0x82211C4C;
		  /* 82211C4Ch */ case   47:  		/* addi R11, R11, 4 */
		/* 82211C4Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211C4Ch case   47:*/		return 0x82211C50;
		  /* 82211C50h */ case   48:  		/* lwz R3, <#[R31 + 4]> */
		/* 82211C50h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82211C50h case   48:*/		return 0x82211C54;
		  /* 82211C54h */ case   49:  		/* sth R3, <#[R11 + 2]> */
		/* 82211C54h case   49:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211C54h case   49:*/		return 0x82211C58;
		  /* 82211C58h */ case   50:  		/* lwz R3, <#[R11]> */
		/* 82211C58h case   50:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C58h case   50:*/		return 0x82211C5C;
		  /* 82211C5Ch */ case   51:  		/* lwz R30, <#[R31 + 4]> */
		/* 82211C5Ch case   51:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82211C5Ch case   51:*/		return 0x82211C60;
		  /* 82211C60h */ case   52:  		/* rlwimi R30, R3, 0, 16, 9 */
		/* 82211C60h case   52:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R30,regs.R3);
		/* 82211C60h case   52:*/		return 0x82211C64;
		  /* 82211C64h */ case   53:  		/* stw R30, <#[R11]> */
		/* 82211C64h case   53:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C64h case   53:*/		return 0x82211C68;
		  /* 82211C68h */ case   54:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82211C68h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82211C68h case   54:*/		return 0x82211C6C;
		  /* 82211C6Ch */ case   55:  		/* lwz R30, <#[R31 + 4]> */
		/* 82211C6Ch case   55:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82211C6Ch case   55:*/		return 0x82211C70;
		  /* 82211C70h */ case   56:  		/* rlwimi R30, R3, 0, 9, 7 */
		/* 82211C70h case   56:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R30,regs.R3);
		/* 82211C70h case   56:*/		return 0x82211C74;
		  /* 82211C74h */ case   57:  		/* oris R3, R30, 64 */
		/* 82211C74h case   57:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R30,0x40);
		/* 82211C74h case   57:*/		return 0x82211C78;
		  /* 82211C78h */ case   58:  		/* stw R3, <#[R11]> */
		/* 82211C78h case   58:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C78h case   58:*/		return 0x82211C7C;
		  /* 82211C7Ch */ case   59:  		/* stwu R6, <#[R11 + 4]> */
		/* 82211C7Ch case   59:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211C7Ch case   59:*/		return 0x82211C80;
		  /* 82211C80h */ case   60:  		/* lwz R3, <#[R31 + 8]> */
		/* 82211C80h case   60:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82211C80h case   60:*/		return 0x82211C84;
		  /* 82211C84h */ case   61:  		/* rlwinm R3, R3, 0, 30, 31 */
		/* 82211C84h case   61:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R3,regs.R3);
		/* 82211C84h case   61:*/		return 0x82211C88;
		  /* 82211C88h */ case   62:  		/* stw R3, <#[R11]> */
		/* 82211C88h case   62:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C88h case   62:*/		return 0x82211C8C;
		  /* 82211C8Ch */ case   63:  		/* lwz R3, <#[R31 + 8]> */
		/* 82211C8Ch case   63:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82211C8Ch case   63:*/		return 0x82211C90;
		  /* 82211C90h */ case   64:  		/* lwz R30, <#[R11]> */
		/* 82211C90h case   64:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C90h case   64:*/		return 0x82211C94;
		  /* 82211C94h */ case   65:  		/* rlwimi R30, R3, 0, 24, 25 */
		/* 82211C94h case   65:*/		cpu::op::rlwimi<0,0,24,25>(regs,&regs.R30,regs.R3);
		/* 82211C94h case   65:*/		return 0x82211C98;
		  /* 82211C98h */ case   66:  		/* stw R30, <#[R11]> */
		/* 82211C98h case   66:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211C98h case   66:*/		return 0x82211C9C;
		  /* 82211C9Ch */ case   67:  		/* addi R11, R11, 4 */
		/* 82211C9Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211C9Ch case   67:*/		return 0x82211CA0;
		  /* 82211CA0h */ case   68:  		/* lwz R3, <#[R31 + 4]> */
		/* 82211CA0h case   68:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82211CA0h case   68:*/		return 0x82211CA4;
		  /* 82211CA4h */ case   69:  		/* rlwinm. R3, R3, 0, 8, 8 */
		/* 82211CA4h case   69:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R3,regs.R3);
		/* 82211CA4h case   69:*/		return 0x82211CA8;
		  /* 82211CA8h */ case   70:  		/* bc 12, CR0_EQ, 16 */
		/* 82211CA8h case   70:*/		if ( regs.CR[0].eq ) { return 0x82211CB8;  }
		/* 82211CA8h case   70:*/		return 0x82211CAC;
		  /* 82211CACh */ case   71:  		/* lwz R3, <#[R31 + 12]> */
		/* 82211CACh case   71:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82211CACh case   71:*/		return 0x82211CB0;
		  /* 82211CB0h */ case   72:  		/* stw R3, <#[R11]> */
		/* 82211CB0h case   72:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CB0h case   72:*/		return 0x82211CB4;
		  /* 82211CB4h */ case   73:  		/* addi R11, R11, 4 */
		/* 82211CB4h case   73:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211CB4h case   73:*/		return 0x82211CB8;
	}
	return 0x82211CB8;
} // Block from 82211B90h-82211CB8h (74 instructions)

//////////////////////////////////////////////////////
// Block at 82211CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211CB8);
		  /* 82211CB8h */ case    0:  		/* sth R6, <#[R11 + 2]> */
		/* 82211CB8h case    0:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211CB8h case    0:*/		return 0x82211CBC;
		  /* 82211CBCh */ case    1:  		/* li R12, -26215 */
		/* 82211CBCh case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82211CBCh case    1:*/		return 0x82211CC0;
		  /* 82211CC0h */ case    2:  		/* lwz R3, <#[R11]> */
		/* 82211CC0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CC0h case    2:*/		return 0x82211CC4;
		  /* 82211CC4h */ case    3:  		/* rlwimi R3, R7, 16, 8, 15 */
		/* 82211CC4h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R7);
		/* 82211CC4h case    3:*/		return 0x82211CC8;
		  /* 82211CC8h */ case    4:  		/* stw R3, <#[R11]> */
		/* 82211CC8h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CC8h case    4:*/		return 0x82211CCC;
		  /* 82211CCCh */ case    5:  		/* stb R9, <#[R11]> */
		/* 82211CCCh case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CCCh case    5:*/		return 0x82211CD0;
		  /* 82211CD0h */ case    6:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211CD0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211CD0h case    6:*/		return 0x82211CD4;
		  /* 82211CD4h */ case    7:  		/* and R3, R3, R12 */
		/* 82211CD4h case    7:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82211CD4h case    7:*/		return 0x82211CD8;
		  /* 82211CD8h */ case    8:  		/* ori R3, R3, 4369 */
		/* 82211CD8h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1111);
		/* 82211CD8h case    8:*/		return 0x82211CDC;
		  /* 82211CDCh */ case    9:  		/* stw R3, <#[R11]> */
		/* 82211CDCh case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CDCh case    9:*/		return 0x82211CE0;
		  /* 82211CE0h */ case   10:  		/* addi R11, R11, 4 */
		/* 82211CE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211CE0h case   10:*/		return 0x82211CE4;
		  /* 82211CE4h */ case   11:  		/* sth R6, <#[R11 + 2]> */
		/* 82211CE4h case   11:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211CE4h case   11:*/		return 0x82211CE8;
		  /* 82211CE8h */ case   12:  		/* lwz R3, <#[R11]> */
		/* 82211CE8h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CE8h case   12:*/		return 0x82211CEC;
		  /* 82211CECh */ case   13:  		/* rlwimi R3, R7, 16, 8, 15 */
		/* 82211CECh case   13:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R7);
		/* 82211CECh case   13:*/		return 0x82211CF0;
		  /* 82211CF0h */ case   14:  		/* stw R3, <#[R11]> */
		/* 82211CF0h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CF0h case   14:*/		return 0x82211CF4;
		  /* 82211CF4h */ case   15:  		/* stb R9, <#[R11]> */
		/* 82211CF4h case   15:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211CF4h case   15:*/		return 0x82211CF8;
		  /* 82211CF8h */ case   16:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211CF8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211CF8h case   16:*/		return 0x82211CFC;
		  /* 82211CFCh */ case   17:  		/* and R3, R3, R12 */
		/* 82211CFCh case   17:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82211CFCh case   17:*/		return 0x82211D00;
		  /* 82211D00h */ case   18:  		/* ori R3, R3, 4369 */
		/* 82211D00h case   18:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1111);
		/* 82211D00h case   18:*/		return 0x82211D04;
		  /* 82211D04h */ case   19:  		/* stw R3, <#[R11]> */
		/* 82211D04h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D04h case   19:*/		return 0x82211D08;
		  /* 82211D08h */ case   20:  		/* addi R11, R11, 4 */
		/* 82211D08h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211D08h case   20:*/		return 0x82211D0C;
		  /* 82211D0Ch */ case   21:  		/* sth R7, <#[R11 + 2]> */
		/* 82211D0Ch case   21:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82211D0Ch case   21:*/		return 0x82211D10;
		  /* 82211D10h */ case   22:  		/* lwz R3, <#[R11]> */
		/* 82211D10h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D10h case   22:*/		return 0x82211D14;
		  /* 82211D14h */ case   23:  		/* rlwinm R3, R3, 0, 16, 2 */
		/* 82211D14h case   23:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R3,regs.R3);
		/* 82211D14h case   23:*/		return 0x82211D18;
		  /* 82211D18h */ case   24:  		/* stw R3, <#[R11]> */
		/* 82211D18h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D18h case   24:*/		return 0x82211D1C;
		  /* 82211D1Ch */ case   25:  		/* addi R11, R11, 4 */
		/* 82211D1Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211D1Ch case   25:*/		return 0x82211D20;
		  /* 82211D20h */ case   26:  		/* lwz R3, <#[R31 + 4]> */
		/* 82211D20h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82211D20h case   26:*/		return 0x82211D24;
		  /* 82211D24h */ case   27:  		/* sth R3, <#[R11 + 2]> */
		/* 82211D24h case   27:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211D24h case   27:*/		return 0x82211D28;
		  /* 82211D28h */ case   28:  		/* lwz R30, <#[R11]> */
		/* 82211D28h case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D28h case   28:*/		return 0x82211D2C;
		  /* 82211D2Ch */ case   29:  		/* lwz R3, <#[R31 + 4]> */
		/* 82211D2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82211D2Ch case   29:*/		return 0x82211D30;
		  /* 82211D30h */ case   30:  		/* rlwimi R3, R30, 0, 16, 9 */
		/* 82211D30h case   30:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R30);
		/* 82211D30h case   30:*/		return 0x82211D34;
		  /* 82211D34h */ case   31:  		/* stw R3, <#[R11]> */
		/* 82211D34h case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D34h case   31:*/		return 0x82211D38;
		  /* 82211D38h */ case   32:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211D38h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211D38h case   32:*/		return 0x82211D3C;
		  /* 82211D3Ch */ case   33:  		/* lwz R30, <#[R31 + 4]> */
		/* 82211D3Ch case   33:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82211D3Ch case   33:*/		return 0x82211D40;
		  /* 82211D40h */ case   34:  		/* rlwimi R30, R3, 0, 9, 7 */
		/* 82211D40h case   34:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R30,regs.R3);
		/* 82211D40h case   34:*/		return 0x82211D44;
		  /* 82211D44h */ case   35:  		/* oris R3, R30, 64 */
		/* 82211D44h case   35:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R30,0x40);
		/* 82211D44h case   35:*/		return 0x82211D48;
		  /* 82211D48h */ case   36:  		/* stw R3, <#[R11]> */
		/* 82211D48h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D48h case   36:*/		return 0x82211D4C;
		  /* 82211D4Ch */ case   37:  		/* stwu R6, <#[R11 + 4]> */
		/* 82211D4Ch case   37:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211D4Ch case   37:*/		return 0x82211D50;
		  /* 82211D50h */ case   38:  		/* lwz R3, <#[R31 + 8]> */
		/* 82211D50h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82211D50h case   38:*/		return 0x82211D54;
		  /* 82211D54h */ case   39:  		/* rlwinm R3, R3, 0, 28, 29 */
		/* 82211D54h case   39:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R3,regs.R3);
		/* 82211D54h case   39:*/		return 0x82211D58;
		  /* 82211D58h */ case   40:  		/* stw R3, <#[R11]> */
		/* 82211D58h case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D58h case   40:*/		return 0x82211D5C;
		  /* 82211D5Ch */ case   41:  		/* addi R11, R11, 4 */
		/* 82211D5Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211D5Ch case   41:*/		return 0x82211D60;
		  /* 82211D60h */ case   42:  		/* lwz R3, <#[R31 + 4]> */
		/* 82211D60h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82211D60h case   42:*/		return 0x82211D64;
		  /* 82211D64h */ case   43:  		/* rlwinm. R3, R3, 0, 8, 8 */
		/* 82211D64h case   43:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R3,regs.R3);
		/* 82211D64h case   43:*/		return 0x82211D68;
		  /* 82211D68h */ case   44:  		/* bc 12, CR0_EQ, 16 */
		/* 82211D68h case   44:*/		if ( regs.CR[0].eq ) { return 0x82211D78;  }
		/* 82211D68h case   44:*/		return 0x82211D6C;
		  /* 82211D6Ch */ case   45:  		/* lwz R3, <#[R31 + 12]> */
		/* 82211D6Ch case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82211D6Ch case   45:*/		return 0x82211D70;
		  /* 82211D70h */ case   46:  		/* stw R3, <#[R11]> */
		/* 82211D70h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D70h case   46:*/		return 0x82211D74;
		  /* 82211D74h */ case   47:  		/* addi R11, R11, 4 */
		/* 82211D74h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211D74h case   47:*/		return 0x82211D78;
	}
	return 0x82211D78;
} // Block from 82211CB8h-82211D78h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82211D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211D78);
		  /* 82211D78h */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211D78h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211D78h case    0:*/		return 0x82211D7C;
		  /* 82211D7Ch */ case    1:  		/* sth R3, <#[R11 + 2]> */
		/* 82211D7Ch case    1:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211D7Ch case    1:*/		return 0x82211D80;
		  /* 82211D80h */ case    2:  		/* lwz R30, <#[R11]> */
		/* 82211D80h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D80h case    2:*/		return 0x82211D84;
		  /* 82211D84h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211D84h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211D84h case    3:*/		return 0x82211D88;
		  /* 82211D88h */ case    4:  		/* rlwimi R3, R30, 0, 16, 9 */
		/* 82211D88h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R30);
		/* 82211D88h case    4:*/		return 0x82211D8C;
		  /* 82211D8Ch */ case    5:  		/* stw R3, <#[R11]> */
		/* 82211D8Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211D8Ch case    5:*/		return 0x82211D90;
		  /* 82211D90h */ case    6:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211D90h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211D90h case    6:*/		return 0x82211D94;
		  /* 82211D94h */ case    7:  		/* lwz R30, <#[R31 + 16]> */
		/* 82211D94h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 82211D94h case    7:*/		return 0x82211D98;
		  /* 82211D98h */ case    8:  		/* rlwimi R30, R3, 0, 9, 7 */
		/* 82211D98h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R30,regs.R3);
		/* 82211D98h case    8:*/		return 0x82211D9C;
		  /* 82211D9Ch */ case    9:  		/* oris R3, R30, 64 */
		/* 82211D9Ch case    9:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R30,0x40);
		/* 82211D9Ch case    9:*/		return 0x82211DA0;
		  /* 82211DA0h */ case   10:  		/* stw R3, <#[R11]> */
		/* 82211DA0h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DA0h case   10:*/		return 0x82211DA4;
		  /* 82211DA4h */ case   11:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211DA4h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DA4h case   11:*/		return 0x82211DA8;
		  /* 82211DA8h */ case   12:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211DA8h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211DA8h case   12:*/		return 0x82211DAC;
		  /* 82211DACh */ case   13:  		/* rlwimi R3, R30, 0, 29, 31 */
		/* 82211DACh case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R3,regs.R30);
		/* 82211DACh case   13:*/		return 0x82211DB0;
		  /* 82211DB0h */ case   14:  		/* stw R3, <#[R11]> */
		/* 82211DB0h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DB0h case   14:*/		return 0x82211DB4;
		  /* 82211DB4h */ case   15:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211DB4h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211DB4h case   15:*/		return 0x82211DB8;
		  /* 82211DB8h */ case   16:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211DB8h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DB8h case   16:*/		return 0x82211DBC;
		  /* 82211DBCh */ case   17:  		/* rlwimi R3, R30, 4, 25, 27 */
		/* 82211DBCh case   17:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R3,regs.R30);
		/* 82211DBCh case   17:*/		return 0x82211DC0;
		  /* 82211DC0h */ case   18:  		/* stw R3, <#[R11]> */
		/* 82211DC0h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DC0h case   18:*/		return 0x82211DC4;
		  /* 82211DC4h */ case   19:  		/* lwz R30, <#[R11]> */
		/* 82211DC4h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DC4h case   19:*/		return 0x82211DC8;
		  /* 82211DC8h */ case   20:  		/* lwz R3, <#[R31 + 28]> */
		/* 82211DC8h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DC8h case   20:*/		return 0x82211DCC;
		  /* 82211DCCh */ case   21:  		/* rlwimi R30, R3, 8, 21, 23 */
		/* 82211DCCh case   21:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R30,regs.R3);
		/* 82211DCCh case   21:*/		return 0x82211DD0;
		  /* 82211DD0h */ case   22:  		/* stw R30, <#[R11]> */
		/* 82211DD0h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DD0h case   22:*/		return 0x82211DD4;
		  /* 82211DD4h */ case   23:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82211DD4h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82211DD4h case   23:*/		return 0x82211DD8;
		  /* 82211DD8h */ case   24:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211DD8h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DD8h case   24:*/		return 0x82211DDC;
		  /* 82211DDCh */ case   25:  		/* rlwimi R3, R30, 12, 17, 19 */
		/* 82211DDCh case   25:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R3,regs.R30);
		/* 82211DDCh case   25:*/		return 0x82211DE0;
		  /* 82211DE0h */ case   26:  		/* stw R3, <#[R11]> */
		/* 82211DE0h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DE0h case   26:*/		return 0x82211DE4;
		  /* 82211DE4h */ case   27:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211DE4h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211DE4h case   27:*/		return 0x82211DE8;
		  /* 82211DE8h */ case   28:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211DE8h case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DE8h case   28:*/		return 0x82211DEC;
		  /* 82211DECh */ case   29:  		/* rlwimi R3, R30, 0, 28, 28 */
		/* 82211DECh case   29:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R3,regs.R30);
		/* 82211DECh case   29:*/		return 0x82211DF0;
		  /* 82211DF0h */ case   30:  		/* stw R3, <#[R11]> */
		/* 82211DF0h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211DF0h case   30:*/		return 0x82211DF4;
		  /* 82211DF4h */ case   31:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211DF4h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211DF4h case   31:*/		return 0x82211DF8;
		  /* 82211DF8h */ case   32:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211DF8h case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211DF8h case   32:*/		return 0x82211DFC;
		  /* 82211DFCh */ case   33:  		/* rlwimi R3, R30, 4, 24, 24 */
		/* 82211DFCh case   33:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R3,regs.R30);
		/* 82211DFCh case   33:*/		return 0x82211E00;
		  /* 82211E00h */ case   34:  		/* stw R3, <#[R11]> */
		/* 82211E00h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E00h case   34:*/		return 0x82211E04;
		  /* 82211E04h */ case   35:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211E04h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211E04h case   35:*/		return 0x82211E08;
		  /* 82211E08h */ case   36:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211E08h case   36:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211E08h case   36:*/		return 0x82211E0C;
		  /* 82211E0Ch */ case   37:  		/* rlwimi R3, R30, 8, 20, 20 */
		/* 82211E0Ch case   37:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R3,regs.R30);
		/* 82211E0Ch case   37:*/		return 0x82211E10;
		  /* 82211E10h */ case   38:  		/* stw R3, <#[R11]> */
		/* 82211E10h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E10h case   38:*/		return 0x82211E14;
		  /* 82211E14h */ case   39:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82211E14h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82211E14h case   39:*/		return 0x82211E18;
		  /* 82211E18h */ case   40:  		/* lwz R30, <#[R31 + 28]> */
		/* 82211E18h case   40:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211E18h case   40:*/		return 0x82211E1C;
		  /* 82211E1Ch */ case   41:  		/* rlwimi R3, R30, 12, 16, 16 */
		/* 82211E1Ch case   41:*/		cpu::op::rlwimi<0,12,16,16>(regs,&regs.R3,regs.R30);
		/* 82211E1Ch case   41:*/		return 0x82211E20;
		  /* 82211E20h */ case   42:  		/* stw R3, <#[R11]> */
		/* 82211E20h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E20h case   42:*/		return 0x82211E24;
		  /* 82211E24h */ case   43:  		/* lwz R3, <#[R31 + 28]> */
		/* 82211E24h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211E24h case   43:*/		return 0x82211E28;
		  /* 82211E28h */ case   44:  		/* lwz R30, <#[R11]> */
		/* 82211E28h case   44:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E28h case   44:*/		return 0x82211E2C;
		  /* 82211E2Ch */ case   45:  		/* rlwimi R30, R3, 0, 11, 11 */
		/* 82211E2Ch case   45:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R30,regs.R3);
		/* 82211E2Ch case   45:*/		return 0x82211E30;
	}
	return 0x82211E30;
} // Block from 82211D78h-82211E30h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82211E30h
// Function '?DoExpp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211E30);
		  /* 82211E30h */ case    0:  		/* stw R30, <#[R11]> */
		/* 82211E30h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E30h case    0:*/		return 0x82211E34;
		  /* 82211E34h */ case    1:  		/* addi R11, R11, 4 */
		/* 82211E34h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211E34h case    1:*/		return 0x82211E38;
		  /* 82211E38h */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211E38h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211E38h case    2:*/		return 0x82211E3C;
		  /* 82211E3Ch */ case    3:  		/* rlwinm. R3, R3, 0, 8, 8 */
		/* 82211E3Ch case    3:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R3,regs.R3);
		/* 82211E3Ch case    3:*/		return 0x82211E40;
		  /* 82211E40h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82211E40h case    4:*/		if ( regs.CR[0].eq ) { return 0x82211E50;  }
		/* 82211E40h case    4:*/		return 0x82211E44;
		  /* 82211E44h */ case    5:  		/* lwz R3, <#[R31 + 40]> */
		/* 82211E44h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82211E44h case    5:*/		return 0x82211E48;
		  /* 82211E48h */ case    6:  		/* stw R3, <#[R11]> */
		/* 82211E48h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E48h case    6:*/		return 0x82211E4C;
		  /* 82211E4Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 82211E4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211E4Ch case    7:*/		return 0x82211E50;
	}
	return 0x82211E50;
} // Block from 82211E30h-82211E50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82211E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82211E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82211E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82211E50);
		  /* 82211E50h */ case    0:  		/* sth R6, <#[R11 + 2]> */
		/* 82211E50h case    0:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82211E50h case    0:*/		return 0x82211E54;
		  /* 82211E54h */ case    1:  		/* li R12, -30584 */
		/* 82211E54h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82211E54h case    1:*/		return 0x82211E58;
		  /* 82211E58h */ case    2:  		/* li R3, 60 */
		/* 82211E58h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x3C);
		/* 82211E58h case    2:*/		return 0x82211E5C;
		  /* 82211E5Ch */ case    3:  		/* li R30, 73 */
		/* 82211E5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x49);
		/* 82211E5Ch case    3:*/		return 0x82211E60;
		  /* 82211E60h */ case    4:  		/* li R28, 45 */
		/* 82211E60h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x2D);
		/* 82211E60h case    4:*/		return 0x82211E64;
		  /* 82211E64h */ case    5:  		/* lwz R27, <#[R11]> */
		/* 82211E64h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E64h case    5:*/		return 0x82211E68;
		  /* 82211E68h */ case    6:  		/* rlwimi R27, R7, 16, 8, 15 */
		/* 82211E68h case    6:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R27,regs.R7);
		/* 82211E68h case    6:*/		return 0x82211E6C;
		  /* 82211E6Ch */ case    7:  		/* stw R27, <#[R11]> */
		/* 82211E6Ch case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E6Ch case    7:*/		return 0x82211E70;
		  /* 82211E70h */ case    8:  		/* stb R9, <#[R11]> */
		/* 82211E70h case    8:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E70h case    8:*/		return 0x82211E74;
		  /* 82211E74h */ case    9:  		/* lwzu R27, <#[R11 + 4]> */
		/* 82211E74h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211E74h case    9:*/		return 0x82211E78;
		  /* 82211E78h */ case   10:  		/* and R27, R27, R12 */
		/* 82211E78h case   10:*/		cpu::op::and<0>(regs,&regs.R27,regs.R27,regs.R12);
		/* 82211E78h case   10:*/		return 0x82211E7C;
		  /* 82211E7Ch */ case   11:  		/* stw R27, <#[R11]> */
		/* 82211E7Ch case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E7Ch case   11:*/		return 0x82211E80;
		  /* 82211E80h */ case   12:  		/* addi R11, R11, 4 */
		/* 82211E80h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211E80h case   12:*/		return 0x82211E84;
		  /* 82211E84h */ case   13:  		/* li R12, -26215 */
		/* 82211E84h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82211E84h case   13:*/		return 0x82211E88;
		  /* 82211E88h */ case   14:  		/* sth R3, <#[R11 + 2]> */
		/* 82211E88h case   14:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82211E88h case   14:*/		return 0x82211E8C;
		  /* 82211E8Ch */ case   15:  		/* lwz R3, <#[R11]> */
		/* 82211E8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E8Ch case   15:*/		return 0x82211E90;
		  /* 82211E90h */ case   16:  		/* rlwinm R3, R3, 0, 16, 2 */
		/* 82211E90h case   16:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R3,regs.R3);
		/* 82211E90h case   16:*/		return 0x82211E94;
		  /* 82211E94h */ case   17:  		/* stw R3, <#[R11]> */
		/* 82211E94h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211E94h case   17:*/		return 0x82211E98;
		  /* 82211E98h */ case   18:  		/* addi R11, R11, 4 */
		/* 82211E98h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211E98h case   18:*/		return 0x82211E9C;
		  /* 82211E9Ch */ case   19:  		/* sth R10, <#[R11 + 2]> */
		/* 82211E9Ch case   19:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211E9Ch case   19:*/		return 0x82211EA0;
		  /* 82211EA0h */ case   20:  		/* lwz R3, <#[R11]> */
		/* 82211EA0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EA0h case   20:*/		return 0x82211EA4;
		  /* 82211EA4h */ case   21:  		/* rlwimi R3, R8, 18, 8, 15 */
		/* 82211EA4h case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R8);
		/* 82211EA4h case   21:*/		return 0x82211EA8;
		  /* 82211EA8h */ case   22:  		/* stw R3, <#[R11]> */
		/* 82211EA8h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EA8h case   22:*/		return 0x82211EAC;
		  /* 82211EACh */ case   23:  		/* stwu R4, <#[R11 + 4]> */
		/* 82211EACh case   23:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211EACh case   23:*/		return 0x82211EB0;
		  /* 82211EB0h */ case   24:  		/* addi R11, R11, 4 */
		/* 82211EB0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211EB0h case   24:*/		return 0x82211EB4;
		  /* 82211EB4h */ case   25:  		/* sth R10, <#[R11 + 2]> */
		/* 82211EB4h case   25:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211EB4h case   25:*/		return 0x82211EB8;
		  /* 82211EB8h */ case   26:  		/* lwz R4, <#[R11]> */
		/* 82211EB8h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EB8h case   26:*/		return 0x82211EBC;
		  /* 82211EBCh */ case   27:  		/* rlwimi R4, R8, 18, 8, 15 */
		/* 82211EBCh case   27:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R8);
		/* 82211EBCh case   27:*/		return 0x82211EC0;
		  /* 82211EC0h */ case   28:  		/* stw R4, <#[R11]> */
		/* 82211EC0h case   28:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EC0h case   28:*/		return 0x82211EC4;
		  /* 82211EC4h */ case   29:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82211EC4h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211EC4h case   29:*/		return 0x82211EC8;
		  /* 82211EC8h */ case   30:  		/* and R4, R4, R12 */
		/* 82211EC8h case   30:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82211EC8h case   30:*/		return 0x82211ECC;
		  /* 82211ECCh */ case   31:  		/* ori R4, R4, 4369 */
		/* 82211ECCh case   31:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1111);
		/* 82211ECCh case   31:*/		return 0x82211ED0;
		  /* 82211ED0h */ case   32:  		/* li R12, -17477 */
		/* 82211ED0h case   32:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82211ED0h case   32:*/		return 0x82211ED4;
		  /* 82211ED4h */ case   33:  		/* stw R4, <#[R11]> */
		/* 82211ED4h case   33:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211ED4h case   33:*/		return 0x82211ED8;
		  /* 82211ED8h */ case   34:  		/* addi R11, R11, 4 */
		/* 82211ED8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211ED8h case   34:*/		return 0x82211EDC;
		  /* 82211EDCh */ case   35:  		/* sth R30, <#[R11 + 2]> */
		/* 82211EDCh case   35:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 82211EDCh case   35:*/		return 0x82211EE0;
		  /* 82211EE0h */ case   36:  		/* lwz R4, <#[R11]> */
		/* 82211EE0h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EE0h case   36:*/		return 0x82211EE4;
		  /* 82211EE4h */ case   37:  		/* rlwinm R4, R4, 0, 16, 2 */
		/* 82211EE4h case   37:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R4,regs.R4);
		/* 82211EE4h case   37:*/		return 0x82211EE8;
		  /* 82211EE8h */ case   38:  		/* stw R4, <#[R11]> */
		/* 82211EE8h case   38:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EE8h case   38:*/		return 0x82211EEC;
		  /* 82211EECh */ case   39:  		/* addi R11, R11, 4 */
		/* 82211EECh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211EECh case   39:*/		return 0x82211EF0;
		  /* 82211EF0h */ case   40:  		/* sth R10, <#[R11 + 2]> */
		/* 82211EF0h case   40:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211EF0h case   40:*/		return 0x82211EF4;
		  /* 82211EF4h */ case   41:  		/* lwz R4, <#[R11]> */
		/* 82211EF4h case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EF4h case   41:*/		return 0x82211EF8;
		  /* 82211EF8h */ case   42:  		/* rlwimi R4, R8, 18, 8, 15 */
		/* 82211EF8h case   42:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R8);
		/* 82211EF8h case   42:*/		return 0x82211EFC;
		  /* 82211EFCh */ case   43:  		/* stw R4, <#[R11]> */
		/* 82211EFCh case   43:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211EFCh case   43:*/		return 0x82211F00;
		  /* 82211F00h */ case   44:  		/* stwu R5, <#[R11 + 4]> */
		/* 82211F00h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211F00h case   44:*/		return 0x82211F04;
		  /* 82211F04h */ case   45:  		/* li R5, 13 */
		/* 82211F04h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 82211F04h case   45:*/		return 0x82211F08;
		  /* 82211F08h */ case   46:  		/* addi R11, R11, 4 */
		/* 82211F08h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F08h case   46:*/		return 0x82211F0C;
		  /* 82211F0Ch */ case   47:  		/* sth R10, <#[R11 + 2]> */
		/* 82211F0Ch case   47:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211F0Ch case   47:*/		return 0x82211F10;
		  /* 82211F10h */ case   48:  		/* lwz R4, <#[R11]> */
		/* 82211F10h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F10h case   48:*/		return 0x82211F14;
		  /* 82211F14h */ case   49:  		/* rlwimi R4, R8, 18, 8, 15 */
		/* 82211F14h case   49:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R8);
		/* 82211F14h case   49:*/		return 0x82211F18;
		  /* 82211F18h */ case   50:  		/* stw R4, <#[R11]> */
		/* 82211F18h case   50:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F18h case   50:*/		return 0x82211F1C;
		  /* 82211F1Ch */ case   51:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82211F1Ch case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211F1Ch case   51:*/		return 0x82211F20;
		  /* 82211F20h */ case   52:  		/* and R4, R4, R12 */
		/* 82211F20h case   52:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82211F20h case   52:*/		return 0x82211F24;
		  /* 82211F24h */ case   53:  		/* ori R4, R4, 13107 */
		/* 82211F24h case   53:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3333);
		/* 82211F24h case   53:*/		return 0x82211F28;
		  /* 82211F28h */ case   54:  		/* li R12, -26215 */
		/* 82211F28h case   54:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82211F28h case   54:*/		return 0x82211F2C;
		  /* 82211F2Ch */ case   55:  		/* stw R4, <#[R11]> */
		/* 82211F2Ch case   55:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F2Ch case   55:*/		return 0x82211F30;
		  /* 82211F30h */ case   56:  		/* addi R11, R11, 4 */
		/* 82211F30h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F30h case   56:*/		return 0x82211F34;
		  /* 82211F34h */ case   57:  		/* sth R10, <#[R11 + 2]> */
		/* 82211F34h case   57:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211F34h case   57:*/		return 0x82211F38;
		  /* 82211F38h */ case   58:  		/* lwz R4, <#[R11]> */
		/* 82211F38h case   58:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F38h case   58:*/		return 0x82211F3C;
		  /* 82211F3Ch */ case   59:  		/* rlwimi R4, R8, 18, 8, 15 */
		/* 82211F3Ch case   59:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R8);
		/* 82211F3Ch case   59:*/		return 0x82211F40;
		  /* 82211F40h */ case   60:  		/* stw R4, <#[R11]> */
		/* 82211F40h case   60:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F40h case   60:*/		return 0x82211F44;
		  /* 82211F44h */ case   61:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82211F44h case   61:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211F44h case   61:*/		return 0x82211F48;
		  /* 82211F48h */ case   62:  		/* and R4, R4, R12 */
		/* 82211F48h case   62:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82211F48h case   62:*/		return 0x82211F4C;
		  /* 82211F4Ch */ case   63:  		/* ori R4, R4, 4369 */
		/* 82211F4Ch case   63:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1111);
		/* 82211F4Ch case   63:*/		return 0x82211F50;
		  /* 82211F50h */ case   64:  		/* stw R4, <#[R11]> */
		/* 82211F50h case   64:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F50h case   64:*/		return 0x82211F54;
		  /* 82211F54h */ case   65:  		/* addi R11, R11, 4 */
		/* 82211F54h case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F54h case   65:*/		return 0x82211F58;
		  /* 82211F58h */ case   66:  		/* sth R28, <#[R11 + 2]> */
		/* 82211F58h case   66:*/		cpu::mem::store16( regs, regs.R28, (uint32)(regs.R11 + 0x00000002) );
		/* 82211F58h case   66:*/		return 0x82211F5C;
		  /* 82211F5Ch */ case   67:  		/* lwz R4, <#[R11]> */
		/* 82211F5Ch case   67:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F5Ch case   67:*/		return 0x82211F60;
		  /* 82211F60h */ case   68:  		/* rlwinm R4, R4, 0, 16, 2 */
		/* 82211F60h case   68:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R4,regs.R4);
		/* 82211F60h case   68:*/		return 0x82211F64;
		  /* 82211F64h */ case   69:  		/* stw R4, <#[R11]> */
		/* 82211F64h case   69:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F64h case   69:*/		return 0x82211F68;
		  /* 82211F68h */ case   70:  		/* addi R11, R11, 4 */
		/* 82211F68h case   70:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F68h case   70:*/		return 0x82211F6C;
		  /* 82211F6Ch */ case   71:  		/* sth R10, <#[R11 + 2]> */
		/* 82211F6Ch case   71:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211F6Ch case   71:*/		return 0x82211F70;
		  /* 82211F70h */ case   72:  		/* lwz R4, <#[R11]> */
		/* 82211F70h case   72:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F70h case   72:*/		return 0x82211F74;
		  /* 82211F74h */ case   73:  		/* rlwimi R4, R9, 18, 8, 15 */
		/* 82211F74h case   73:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R9);
		/* 82211F74h case   73:*/		return 0x82211F78;
		  /* 82211F78h */ case   74:  		/* stw R4, <#[R11]> */
		/* 82211F78h case   74:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F78h case   74:*/		return 0x82211F7C;
		  /* 82211F7Ch */ case   75:  		/* addi R11, R11, 4 */
		/* 82211F7Ch case   75:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F7Ch case   75:*/		return 0x82211F80;
		  /* 82211F80h */ case   76:  		/* sth R10, <#[R11 + 2]> */
		/* 82211F80h case   76:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211F80h case   76:*/		return 0x82211F84;
		  /* 82211F84h */ case   77:  		/* lwz R4, <#[R11]> */
		/* 82211F84h case   77:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F84h case   77:*/		return 0x82211F88;
		  /* 82211F88h */ case   78:  		/* rlwimi R4, R9, 18, 8, 15 */
		/* 82211F88h case   78:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R9);
		/* 82211F88h case   78:*/		return 0x82211F8C;
		  /* 82211F8Ch */ case   79:  		/* stw R4, <#[R11]> */
		/* 82211F8Ch case   79:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211F8Ch case   79:*/		return 0x82211F90;
		  /* 82211F90h */ case   80:  		/* addi R11, R11, 4 */
		/* 82211F90h case   80:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211F90h case   80:*/		return 0x82211F94;
		  /* 82211F94h */ case   81:  		/* lwz R4, <#[R29 + 28]> */
		/* 82211F94h case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000001C) );
		/* 82211F94h case   81:*/		return 0x82211F98;
		  /* 82211F98h */ case   82:  		/* lwz R4, <#[R4 + 4]> */
		/* 82211F98h case   82:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 82211F98h case   82:*/		return 0x82211F9C;
		  /* 82211F9Ch */ case   83:  		/* cmplwi CR6, R4, 1 */
		/* 82211F9Ch case   83:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000001);
		/* 82211F9Ch case   83:*/		return 0x82211FA0;
		  /* 82211FA0h */ case   84:  		/* bc 12, CR6_EQ, 340 */
		/* 82211FA0h case   84:*/		if ( regs.CR[6].eq ) { return 0x822120F4;  }
		/* 82211FA0h case   84:*/		return 0x82211FA4;
		  /* 82211FA4h */ case   85:  		/* sth R5, <#[R11 + 2]> */
		/* 82211FA4h case   85:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82211FA4h case   85:*/		return 0x82211FA8;
		  /* 82211FA8h */ case   86:  		/* lwz R4, <#[R11]> */
		/* 82211FA8h case   86:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FA8h case   86:*/		return 0x82211FAC;
		  /* 82211FACh */ case   87:  		/* rlwimi R4, R9, 16, 3, 15 */
		/* 82211FACh case   87:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R4,regs.R9);
		/* 82211FACh case   87:*/		return 0x82211FB0;
		  /* 82211FB0h */ case   88:  		/* stw R4, <#[R11]> */
		/* 82211FB0h case   88:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FB0h case   88:*/		return 0x82211FB4;
		  /* 82211FB4h */ case   89:  		/* addi R11, R11, 4 */
		/* 82211FB4h case   89:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211FB4h case   89:*/		return 0x82211FB8;
		  /* 82211FB8h */ case   90:  		/* sth R10, <#[R11 + 2]> */
		/* 82211FB8h case   90:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82211FB8h case   90:*/		return 0x82211FBC;
		  /* 82211FBCh */ case   91:  		/* lwz R4, <#[R11]> */
		/* 82211FBCh case   91:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FBCh case   91:*/		return 0x82211FC0;
		  /* 82211FC0h */ case   92:  		/* rlwimi R4, R9, 18, 8, 15 */
		/* 82211FC0h case   92:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R9);
		/* 82211FC0h case   92:*/		return 0x82211FC4;
		  /* 82211FC4h */ case   93:  		/* stw R4, <#[R11]> */
		/* 82211FC4h case   93:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FC4h case   93:*/		return 0x82211FC8;
		  /* 82211FC8h */ case   94:  		/* addi R11, R11, 4 */
		/* 82211FC8h case   94:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82211FC8h case   94:*/		return 0x82211FCC;
		  /* 82211FCCh */ case   95:  		/* lwz R4, <#[R31 + 16]> */
		/* 82211FCCh case   95:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82211FCCh case   95:*/		return 0x82211FD0;
		  /* 82211FD0h */ case   96:  		/* sth R4, <#[R11 + 2]> */
		/* 82211FD0h case   96:*/		cpu::mem::store16( regs, regs.R4, (uint32)(regs.R11 + 0x00000002) );
		/* 82211FD0h case   96:*/		return 0x82211FD4;
		  /* 82211FD4h */ case   97:  		/* lwz R4, <#[R11]> */
		/* 82211FD4h case   97:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FD4h case   97:*/		return 0x82211FD8;
		  /* 82211FD8h */ case   98:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211FD8h case   98:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211FD8h case   98:*/		return 0x82211FDC;
		  /* 82211FDCh */ case   99:  		/* rlwimi R3, R4, 0, 16, 9 */
		/* 82211FDCh case   99:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R4);
		/* 82211FDCh case   99:*/		return 0x82211FE0;
		  /* 82211FE0h */ case  100:  		/* stw R3, <#[R11]> */
		/* 82211FE0h case  100:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FE0h case  100:*/		return 0x82211FE4;
		  /* 82211FE4h */ case  101:  		/* rlwinm R4, R3, 0, 0, 31 */
		/* 82211FE4h case  101:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R3);
		/* 82211FE4h case  101:*/		return 0x82211FE8;
		  /* 82211FE8h */ case  102:  		/* lwz R3, <#[R31 + 16]> */
		/* 82211FE8h case  102:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82211FE8h case  102:*/		return 0x82211FEC;
		  /* 82211FECh */ case  103:  		/* rlwimi R3, R4, 0, 9, 7 */
		/* 82211FECh case  103:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R3,regs.R4);
		/* 82211FECh case  103:*/		return 0x82211FF0;
		  /* 82211FF0h */ case  104:  		/* oris R4, R3, 64 */
		/* 82211FF0h case  104:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R3,0x40);
		/* 82211FF0h case  104:*/		return 0x82211FF4;
		  /* 82211FF4h */ case  105:  		/* stw R4, <#[R11]> */
		/* 82211FF4h case  105:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82211FF4h case  105:*/		return 0x82211FF8;
		  /* 82211FF8h */ case  106:  		/* lwz R4, <#[R31 + 28]> */
		/* 82211FF8h case  106:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82211FF8h case  106:*/		return 0x82211FFC;
		  /* 82211FFCh */ case  107:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82211FFCh case  107:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82211FFCh case  107:*/		return 0x82212000;
		  /* 82212000h */ case  108:  		/* rlwimi R3, R4, 28, 29, 31 */
		/* 82212000h case  108:*/		cpu::op::rlwimi<0,28,29,31>(regs,&regs.R3,regs.R4);
		/* 82212000h case  108:*/		return 0x82212004;
		  /* 82212004h */ case  109:  		/* stw R3, <#[R11]> */
		/* 82212004h case  109:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212004h case  109:*/		return 0x82212008;
		  /* 82212008h */ case  110:  		/* rlwinm R4, R3, 0, 0, 31 */
		/* 82212008h case  110:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R3);
		/* 82212008h case  110:*/		return 0x8221200C;
		  /* 8221200Ch */ case  111:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221200Ch case  111:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221200Ch case  111:*/		return 0x82212010;
		  /* 82212010h */ case  112:  		/* rlwimi R4, R3, 0, 25, 27 */
		/* 82212010h case  112:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R4,regs.R3);
		/* 82212010h case  112:*/		return 0x82212014;
		  /* 82212014h */ case  113:  		/* stw R4, <#[R11]> */
		/* 82212014h case  113:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212014h case  113:*/		return 0x82212018;
		  /* 82212018h */ case  114:  		/* rlwinm R4, R4, 0, 0, 31 */
		/* 82212018h case  114:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R4);
		/* 82212018h case  114:*/		return 0x8221201C;
		  /* 8221201Ch */ case  115:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221201Ch case  115:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221201Ch case  115:*/		return 0x82212020;
		  /* 82212020h */ case  116:  		/* rlwimi R4, R3, 4, 21, 23 */
		/* 82212020h case  116:*/		cpu::op::rlwimi<0,4,21,23>(regs,&regs.R4,regs.R3);
		/* 82212020h case  116:*/		return 0x82212024;
		  /* 82212024h */ case  117:  		/* stw R4, <#[R11]> */
		/* 82212024h case  117:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212024h case  117:*/		return 0x82212028;
		  /* 82212028h */ case  118:  		/* rlwinm R4, R4, 0, 0, 31 */
		/* 82212028h case  118:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R4);
		/* 82212028h case  118:*/		return 0x8221202C;
		  /* 8221202Ch */ case  119:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221202Ch case  119:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221202Ch case  119:*/		return 0x82212030;
		  /* 82212030h */ case  120:  		/* rlwimi R4, R3, 8, 17, 19 */
		/* 82212030h case  120:*/		cpu::op::rlwimi<0,8,17,19>(regs,&regs.R4,regs.R3);
		/* 82212030h case  120:*/		return 0x82212034;
		  /* 82212034h */ case  121:  		/* stw R4, <#[R11]> */
		/* 82212034h case  121:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212034h case  121:*/		return 0x82212038;
		  /* 82212038h */ case  122:  		/* rlwinm R4, R4, 0, 0, 31 */
		/* 82212038h case  122:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R4);
		/* 82212038h case  122:*/		return 0x8221203C;
		  /* 8221203Ch */ case  123:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221203Ch case  123:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221203Ch case  123:*/		return 0x82212040;
		  /* 82212040h */ case  124:  		/* rlwimi R4, R3, 28, 28, 28 */
		/* 82212040h case  124:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R4,regs.R3);
		/* 82212040h case  124:*/		return 0x82212044;
		  /* 82212044h */ case  125:  		/* stw R4, <#[R11]> */
		/* 82212044h case  125:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212044h case  125:*/		return 0x82212048;
		  /* 82212048h */ case  126:  		/* lwz R3, <#[R11]> */
		/* 82212048h case  126:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212048h case  126:*/		return 0x8221204C;
		  /* 8221204Ch */ case  127:  		/* lwz R4, <#[R31 + 28]> */
		/* 8221204Ch case  127:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221204Ch case  127:*/		return 0x82212050;
		  /* 82212050h */ case  128:  		/* rlwimi R3, R4, 0, 24, 24 */
		/* 82212050h case  128:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R3,regs.R4);
		/* 82212050h case  128:*/		return 0x82212054;
		  /* 82212054h */ case  129:  		/* stw R3, <#[R11]> */
		/* 82212054h case  129:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212054h case  129:*/		return 0x82212058;
		  /* 82212058h */ case  130:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82212058h case  130:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82212058h case  130:*/		return 0x8221205C;
		  /* 8221205Ch */ case  131:  		/* lwz R4, <#[R31 + 28]> */
		/* 8221205Ch case  131:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221205Ch case  131:*/		return 0x82212060;
		  /* 82212060h */ case  132:  		/* rlwimi R3, R4, 4, 20, 20 */
		/* 82212060h case  132:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R3,regs.R4);
		/* 82212060h case  132:*/		return 0x82212064;
		  /* 82212064h */ case  133:  		/* stw R3, <#[R11]> */
		/* 82212064h case  133:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212064h case  133:*/		return 0x82212068;
		  /* 82212068h */ case  134:  		/* rlwinm R4, R3, 0, 0, 31 */
		/* 82212068h case  134:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R3);
		/* 82212068h case  134:*/		return 0x8221206C;
		  /* 8221206Ch */ case  135:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221206Ch case  135:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221206Ch case  135:*/		return 0x82212070;
		  /* 82212070h */ case  136:  		/* rlwimi R4, R3, 8, 16, 16 */
		/* 82212070h case  136:*/		cpu::op::rlwimi<0,8,16,16>(regs,&regs.R4,regs.R3);
		/* 82212070h case  136:*/		return 0x82212074;
		  /* 82212074h */ case  137:  		/* stw R4, <#[R11]> */
		/* 82212074h case  137:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212074h case  137:*/		return 0x82212078;
		  /* 82212078h */ case  138:  		/* rlwinm R4, R4, 0, 0, 31 */
		/* 82212078h case  138:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R4);
		/* 82212078h case  138:*/		return 0x8221207C;
		  /* 8221207Ch */ case  139:  		/* lwz R3, <#[R31 + 28]> */
		/* 8221207Ch case  139:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221207Ch case  139:*/		return 0x82212080;
		  /* 82212080h */ case  140:  		/* rlwimi R4, R3, 0, 11, 11 */
		/* 82212080h case  140:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R4,regs.R3);
		/* 82212080h case  140:*/		return 0x82212084;
		  /* 82212084h */ case  141:  		/* stw R4, <#[R11]> */
		/* 82212084h case  141:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212084h case  141:*/		return 0x82212088;
		  /* 82212088h */ case  142:  		/* addi R11, R11, 4 */
		/* 82212088h case  142:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212088h case  142:*/		return 0x8221208C;
		  /* 8221208Ch */ case  143:  		/* lwz R4, <#[R31 + 16]> */
		/* 8221208Ch case  143:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8221208Ch case  143:*/		return 0x82212090;
		  /* 82212090h */ case  144:  		/* rlwinm. R4, R4, 0, 8, 8 */
		/* 82212090h case  144:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R4,regs.R4);
		/* 82212090h case  144:*/		return 0x82212094;
		  /* 82212094h */ case  145:  		/* bc 12, CR0_EQ, 16 */
		/* 82212094h case  145:*/		if ( regs.CR[0].eq ) { return 0x822120A4;  }
		/* 82212094h case  145:*/		return 0x82212098;
		  /* 82212098h */ case  146:  		/* lwz R4, <#[R31 + 40]> */
		/* 82212098h case  146:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 82212098h case  146:*/		return 0x8221209C;
		  /* 8221209Ch */ case  147:  		/* stw R4, <#[R11]> */
		/* 8221209Ch case  147:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8221209Ch case  147:*/		return 0x822120A0;
		  /* 822120A0h */ case  148:  		/* addi R11, R11, 4 */
		/* 822120A0h case  148:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822120A0h case  148:*/		return 0x822120A4;
	}
	return 0x822120A4;
} // Block from 82211E50h-822120A4h (149 instructions)

//////////////////////////////////////////////////////
// Block at 822120A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822120A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822120A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822120A4);
		  /* 822120A4h */ case    0:  		/* sth R6, <#[R11 + 2]> */
		/* 822120A4h case    0:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822120A4h case    0:*/		return 0x822120A8;
		  /* 822120A8h */ case    1:  		/* li R12, -30584 */
		/* 822120A8h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822120A8h case    1:*/		return 0x822120AC;
		  /* 822120ACh */ case    2:  		/* lwz R4, <#[R11]> */
		/* 822120ACh case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120ACh case    2:*/		return 0x822120B0;
		  /* 822120B0h */ case    3:  		/* rlwimi R4, R7, 16, 8, 15 */
		/* 822120B0h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R4,regs.R7);
		/* 822120B0h case    3:*/		return 0x822120B4;
		  /* 822120B4h */ case    4:  		/* stw R4, <#[R11]> */
		/* 822120B4h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120B4h case    4:*/		return 0x822120B8;
		  /* 822120B8h */ case    5:  		/* stb R9, <#[R11]> */
		/* 822120B8h case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822120B8h case    5:*/		return 0x822120BC;
		  /* 822120BCh */ case    6:  		/* lwzu R4, <#[R11 + 4]> */
		/* 822120BCh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822120BCh case    6:*/		return 0x822120C0;
		  /* 822120C0h */ case    7:  		/* and R4, R4, R12 */
		/* 822120C0h case    7:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 822120C0h case    7:*/		return 0x822120C4;
		  /* 822120C4h */ case    8:  		/* li R12, -17477 */
		/* 822120C4h case    8:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 822120C4h case    8:*/		return 0x822120C8;
		  /* 822120C8h */ case    9:  		/* stw R4, <#[R11]> */
		/* 822120C8h case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120C8h case    9:*/		return 0x822120CC;
		  /* 822120CCh */ case   10:  		/* addi R11, R11, 4 */
		/* 822120CCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822120CCh case   10:*/		return 0x822120D0;
		  /* 822120D0h */ case   11:  		/* sth R10, <#[R11 + 2]> */
		/* 822120D0h case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822120D0h case   11:*/		return 0x822120D4;
		  /* 822120D4h */ case   12:  		/* lwz R4, <#[R11]> */
		/* 822120D4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120D4h case   12:*/		return 0x822120D8;
		  /* 822120D8h */ case   13:  		/* rlwimi R4, R8, 18, 8, 15 */
		/* 822120D8h case   13:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R8);
		/* 822120D8h case   13:*/		return 0x822120DC;
		  /* 822120DCh */ case   14:  		/* stw R4, <#[R11]> */
		/* 822120DCh case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120DCh case   14:*/		return 0x822120E0;
		  /* 822120E0h */ case   15:  		/* lwzu R4, <#[R11 + 4]> */
		/* 822120E0h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822120E0h case   15:*/		return 0x822120E4;
		  /* 822120E4h */ case   16:  		/* and R4, R4, R12 */
		/* 822120E4h case   16:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 822120E4h case   16:*/		return 0x822120E8;
		  /* 822120E8h */ case   17:  		/* ori R4, R4, 13107 */
		/* 822120E8h case   17:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3333);
		/* 822120E8h case   17:*/		return 0x822120EC;
		  /* 822120ECh */ case   18:  		/* stw R4, <#[R11]> */
		/* 822120ECh case   18:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120ECh case   18:*/		return 0x822120F0;
		  /* 822120F0h */ case   19:  		/* addi R11, R11, 4 */
		/* 822120F0h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822120F0h case   19:*/		return 0x822120F4;
	}
	return 0x822120F4;
} // Block from 822120A4h-822120F4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822120F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822120F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822120F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822120F4);
		  /* 822120F4h */ case    0:  		/* sth R5, <#[R11 + 2]> */
		/* 822120F4h case    0:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 822120F4h case    0:*/		return 0x822120F8;
		  /* 822120F8h */ case    1:  		/* li R5, 3 */
		/* 822120F8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822120F8h case    1:*/		return 0x822120FC;
		  /* 822120FCh */ case    2:  		/* lwz R4, <#[R11]> */
		/* 822120FCh case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822120FCh case    2:*/		return 0x82212100;
		  /* 82212100h */ case    3:  		/* rlwimi R4, R5, 16, 3, 15 */
		/* 82212100h case    3:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R4,regs.R5);
		/* 82212100h case    3:*/		return 0x82212104;
		  /* 82212104h */ case    4:  		/* stw R4, <#[R11]> */
		/* 82212104h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212104h case    4:*/		return 0x82212108;
		  /* 82212108h */ case    5:  		/* lwz R5, <#[R31 + 4]> */
		/* 82212108h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 82212108h case    5:*/		return 0x8221210C;
		  /* 8221210Ch */ case    6:  		/* addi R11, R11, 4 */
		/* 8221210Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221210Ch case    6:*/		return 0x82212110;
		  /* 82212110h */ case    7:  		/* sth R5, <#[R11 + 2]> */
		/* 82212110h case    7:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82212110h case    7:*/		return 0x82212114;
		  /* 82212114h */ case    8:  		/* lwz R4, <#[R11]> */
		/* 82212114h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212114h case    8:*/		return 0x82212118;
		  /* 82212118h */ case    9:  		/* lwz R5, <#[R31 + 4]> */
		/* 82212118h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 82212118h case    9:*/		return 0x8221211C;
		  /* 8221211Ch */ case   10:  		/* rlwimi R5, R4, 0, 16, 9 */
		/* 8221211Ch case   10:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R4);
		/* 8221211Ch case   10:*/		return 0x82212120;
		  /* 82212120h */ case   11:  		/* stw R5, <#[R11]> */
		/* 82212120h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212120h case   11:*/		return 0x82212124;
		  /* 82212124h */ case   12:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 82212124h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 82212124h case   12:*/		return 0x82212128;
		  /* 82212128h */ case   13:  		/* lwz R4, <#[R31 + 4]> */
		/* 82212128h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82212128h case   13:*/		return 0x8221212C;
		  /* 8221212Ch */ case   14:  		/* rlwimi R4, R5, 0, 9, 7 */
		/* 8221212Ch case   14:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R4,regs.R5);
		/* 8221212Ch case   14:*/		return 0x82212130;
		  /* 82212130h */ case   15:  		/* oris R5, R4, 64 */
		/* 82212130h case   15:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R4,0x40);
		/* 82212130h case   15:*/		return 0x82212134;
		  /* 82212134h */ case   16:  		/* stw R5, <#[R11]> */
		/* 82212134h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212134h case   16:*/		return 0x82212138;
		  /* 82212138h */ case   17:  		/* stwu R6, <#[R11 + 4]> */
		/* 82212138h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212138h case   17:*/		return 0x8221213C;
		  /* 8221213Ch */ case   18:  		/* lwz R5, <#[R31 + 8]> */
		/* 8221213Ch case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8221213Ch case   18:*/		return 0x82212140;
		  /* 82212140h */ case   19:  		/* rlwinm R5, R5, 0, 26, 27 */
		/* 82212140h case   19:*/		cpu::op::rlwinm<0,0,26,27>(regs,&regs.R5,regs.R5);
		/* 82212140h case   19:*/		return 0x82212144;
		  /* 82212144h */ case   20:  		/* stw R5, <#[R11]> */
		/* 82212144h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212144h case   20:*/		return 0x82212148;
		  /* 82212148h */ case   21:  		/* addi R11, R11, 4 */
		/* 82212148h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212148h case   21:*/		return 0x8221214C;
		  /* 8221214Ch */ case   22:  		/* lwz R5, <#[R31 + 4]> */
		/* 8221214Ch case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 8221214Ch case   22:*/		return 0x82212150;
		  /* 82212150h */ case   23:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 82212150h case   23:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 82212150h case   23:*/		return 0x82212154;
		  /* 82212154h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 82212154h case   24:*/		if ( regs.CR[0].eq ) { return 0x82212164;  }
		/* 82212154h case   24:*/		return 0x82212158;
		  /* 82212158h */ case   25:  		/* lwz R5, <#[R31 + 12]> */
		/* 82212158h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 82212158h case   25:*/		return 0x8221215C;
		  /* 8221215Ch */ case   26:  		/* stw R5, <#[R11]> */
		/* 8221215Ch case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221215Ch case   26:*/		return 0x82212160;
		  /* 82212160h */ case   27:  		/* addi R11, R11, 4 */
		/* 82212160h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212160h case   27:*/		return 0x82212164;
	}
	return 0x82212164;
} // Block from 822120F4h-82212164h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82212164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212164);
		  /* 82212164h */ case    0:  		/* lwz R5, <#[R31 + 16]> */
		/* 82212164h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82212164h case    0:*/		return 0x82212168;
		  /* 82212168h */ case    1:  		/* sth R5, <#[R11 + 2]> */
		/* 82212168h case    1:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82212168h case    1:*/		return 0x8221216C;
		  /* 8221216Ch */ case    2:  		/* lwz R5, <#[R11]> */
		/* 8221216Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221216Ch case    2:*/		return 0x82212170;
		  /* 82212170h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 82212170h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82212170h case    3:*/		return 0x82212174;
		  /* 82212174h */ case    4:  		/* rlwimi R4, R5, 0, 16, 9 */
		/* 82212174h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R4,regs.R5);
		/* 82212174h case    4:*/		return 0x82212178;
		  /* 82212178h */ case    5:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82212178h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82212178h case    5:*/		return 0x8221217C;
		  /* 8221217Ch */ case    6:  		/* stw R4, <#[R11]> */
		/* 8221217Ch case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8221217Ch case    6:*/		return 0x82212180;
		  /* 82212180h */ case    7:  		/* lwz R4, <#[R31 + 16]> */
		/* 82212180h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82212180h case    7:*/		return 0x82212184;
		  /* 82212184h */ case    8:  		/* rlwimi R4, R5, 0, 9, 7 */
		/* 82212184h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R4,regs.R5);
		/* 82212184h case    8:*/		return 0x82212188;
		  /* 82212188h */ case    9:  		/* oris R5, R4, 64 */
		/* 82212188h case    9:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R4,0x40);
		/* 82212188h case    9:*/		return 0x8221218C;
		  /* 8221218Ch */ case   10:  		/* stw R5, <#[R11]> */
		/* 8221218Ch case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221218Ch case   10:*/		return 0x82212190;
		  /* 82212190h */ case   11:  		/* lwzu R5, <#[R11 + 4]> */
		/* 82212190h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212190h case   11:*/		return 0x82212194;
		  /* 82212194h */ case   12:  		/* lwz R4, <#[R31 + 28]> */
		/* 82212194h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82212194h case   12:*/		return 0x82212198;
		  /* 82212198h */ case   13:  		/* rlwimi R5, R4, 0, 29, 31 */
		/* 82212198h case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R5,regs.R4);
		/* 82212198h case   13:*/		return 0x8221219C;
		  /* 8221219Ch */ case   14:  		/* stw R5, <#[R11]> */
		/* 8221219Ch case   14:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221219Ch case   14:*/		return 0x822121A0;
		  /* 822121A0h */ case   15:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121A0h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121A0h case   15:*/		return 0x822121A4;
		  /* 822121A4h */ case   16:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121A4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121A4h case   16:*/		return 0x822121A8;
		  /* 822121A8h */ case   17:  		/* rlwimi R5, R4, 4, 25, 27 */
		/* 822121A8h case   17:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R5,regs.R4);
		/* 822121A8h case   17:*/		return 0x822121AC;
		  /* 822121ACh */ case   18:  		/* stw R5, <#[R11]> */
		/* 822121ACh case   18:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121ACh case   18:*/		return 0x822121B0;
		  /* 822121B0h */ case   19:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121B0h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121B0h case   19:*/		return 0x822121B4;
		  /* 822121B4h */ case   20:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121B4h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121B4h case   20:*/		return 0x822121B8;
		  /* 822121B8h */ case   21:  		/* rlwimi R5, R4, 8, 21, 23 */
		/* 822121B8h case   21:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R5,regs.R4);
		/* 822121B8h case   21:*/		return 0x822121BC;
		  /* 822121BCh */ case   22:  		/* stw R5, <#[R11]> */
		/* 822121BCh case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121BCh case   22:*/		return 0x822121C0;
		  /* 822121C0h */ case   23:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121C0h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121C0h case   23:*/		return 0x822121C4;
		  /* 822121C4h */ case   24:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121C4h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121C4h case   24:*/		return 0x822121C8;
		  /* 822121C8h */ case   25:  		/* rlwimi R5, R4, 12, 17, 19 */
		/* 822121C8h case   25:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R5,regs.R4);
		/* 822121C8h case   25:*/		return 0x822121CC;
		  /* 822121CCh */ case   26:  		/* stw R5, <#[R11]> */
		/* 822121CCh case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121CCh case   26:*/		return 0x822121D0;
		  /* 822121D0h */ case   27:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121D0h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121D0h case   27:*/		return 0x822121D4;
		  /* 822121D4h */ case   28:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121D4h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121D4h case   28:*/		return 0x822121D8;
		  /* 822121D8h */ case   29:  		/* rlwimi R5, R4, 0, 28, 28 */
		/* 822121D8h case   29:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R5,regs.R4);
		/* 822121D8h case   29:*/		return 0x822121DC;
		  /* 822121DCh */ case   30:  		/* stw R5, <#[R11]> */
		/* 822121DCh case   30:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121DCh case   30:*/		return 0x822121E0;
		  /* 822121E0h */ case   31:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121E0h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121E0h case   31:*/		return 0x822121E4;
		  /* 822121E4h */ case   32:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121E4h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121E4h case   32:*/		return 0x822121E8;
		  /* 822121E8h */ case   33:  		/* rlwimi R5, R4, 4, 24, 24 */
		/* 822121E8h case   33:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R5,regs.R4);
		/* 822121E8h case   33:*/		return 0x822121EC;
		  /* 822121ECh */ case   34:  		/* stw R5, <#[R11]> */
		/* 822121ECh case   34:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121ECh case   34:*/		return 0x822121F0;
		  /* 822121F0h */ case   35:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 822121F0h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 822121F0h case   35:*/		return 0x822121F4;
		  /* 822121F4h */ case   36:  		/* lwz R4, <#[R31 + 28]> */
		/* 822121F4h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 822121F4h case   36:*/		return 0x822121F8;
		  /* 822121F8h */ case   37:  		/* rlwimi R5, R4, 8, 20, 20 */
		/* 822121F8h case   37:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R5,regs.R4);
		/* 822121F8h case   37:*/		return 0x822121FC;
		  /* 822121FCh */ case   38:  		/* stw R5, <#[R11]> */
		/* 822121FCh case   38:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822121FCh case   38:*/		return 0x82212200;
		  /* 82212200h */ case   39:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 82212200h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 82212200h case   39:*/		return 0x82212204;
		  /* 82212204h */ case   40:  		/* lwz R4, <#[R31 + 28]> */
		/* 82212204h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82212204h case   40:*/		return 0x82212208;
		  /* 82212208h */ case   41:  		/* rlwimi R5, R4, 12, 16, 16 */
		/* 82212208h case   41:*/		cpu::op::rlwimi<0,12,16,16>(regs,&regs.R5,regs.R4);
		/* 82212208h case   41:*/		return 0x8221220C;
		  /* 8221220Ch */ case   42:  		/* stw R5, <#[R11]> */
		/* 8221220Ch case   42:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221220Ch case   42:*/		return 0x82212210;
		  /* 82212210h */ case   43:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 82212210h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 82212210h case   43:*/		return 0x82212214;
		  /* 82212214h */ case   44:  		/* lwz R4, <#[R31 + 28]> */
		/* 82212214h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82212214h case   44:*/		return 0x82212218;
		  /* 82212218h */ case   45:  		/* rlwimi R5, R4, 0, 11, 11 */
		/* 82212218h case   45:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R5,regs.R4);
		/* 82212218h case   45:*/		return 0x8221221C;
		  /* 8221221Ch */ case   46:  		/* stw R5, <#[R11]> */
		/* 8221221Ch case   46:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221221Ch case   46:*/		return 0x82212220;
		  /* 82212220h */ case   47:  		/* addi R11, R11, 4 */
		/* 82212220h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212220h case   47:*/		return 0x82212224;
		  /* 82212224h */ case   48:  		/* lwz R5, <#[R31 + 16]> */
		/* 82212224h case   48:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82212224h case   48:*/		return 0x82212228;
		  /* 82212228h */ case   49:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 82212228h case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 82212228h case   49:*/		return 0x8221222C;
		  /* 8221222Ch */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 8221222Ch case   50:*/		if ( regs.CR[0].eq ) { return 0x8221223C;  }
		/* 8221222Ch case   50:*/		return 0x82212230;
		  /* 82212230h */ case   51:  		/* lwz R5, <#[R31 + 40]> */
		/* 82212230h case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000028) );
		/* 82212230h case   51:*/		return 0x82212234;
		  /* 82212234h */ case   52:  		/* stw R5, <#[R11]> */
		/* 82212234h case   52:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212234h case   52:*/		return 0x82212238;
		  /* 82212238h */ case   53:  		/* addi R11, R11, 4 */
		/* 82212238h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212238h case   53:*/		return 0x8221223C;
	}
	return 0x8221223C;
} // Block from 82212164h-8221223Ch (54 instructions)

//////////////////////////////////////////////////////
// Block at 8221223Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221223C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221223C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221223C);
		  /* 8221223Ch */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 8221223Ch case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221223Ch case    0:*/		return 0x82212240;
		  /* 82212240h */ case    1:  		/* li R12, -17477 */
		/* 82212240h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82212240h case    1:*/		return 0x82212244;
		  /* 82212244h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82212244h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212244h case    2:*/		return 0x82212248;
		  /* 82212248h */ case    3:  		/* rlwimi R10, R8, 18, 8, 15 */
		/* 82212248h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R8);
		/* 82212248h case    3:*/		return 0x8221224C;
		  /* 8221224Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 8221224Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221224Ch case    4:*/		return 0x82212250;
		  /* 82212250h */ case    5:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82212250h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212250h case    5:*/		return 0x82212254;
		  /* 82212254h */ case    6:  		/* and R10, R10, R12 */
		/* 82212254h case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82212254h case    6:*/		return 0x82212258;
		  /* 82212258h */ case    7:  		/* li R12, -30584 */
		/* 82212258h case    7:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82212258h case    7:*/		return 0x8221225C;
		  /* 8221225Ch */ case    8:  		/* ori R10, R10, 13107 */
		/* 8221225Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3333);
		/* 8221225Ch case    8:*/		return 0x82212260;
		  /* 82212260h */ case    9:  		/* stw R10, <#[R11]> */
		/* 82212260h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212260h case    9:*/		return 0x82212264;
		  /* 82212264h */ case   10:  		/* addi R11, R11, 4 */
		/* 82212264h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212264h case   10:*/		return 0x82212268;
		  /* 82212268h */ case   11:  		/* sth R6, <#[R11 + 2]> */
		/* 82212268h case   11:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82212268h case   11:*/		return 0x8221226C;
		  /* 8221226Ch */ case   12:  		/* lwz R10, <#[R11]> */
		/* 8221226Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221226Ch case   12:*/		return 0x82212270;
		  /* 82212270h */ case   13:  		/* rlwimi R10, R7, 16, 8, 15 */
		/* 82212270h case   13:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R7);
		/* 82212270h case   13:*/		return 0x82212274;
		  /* 82212274h */ case   14:  		/* stw R10, <#[R11]> */
		/* 82212274h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212274h case   14:*/		return 0x82212278;
		  /* 82212278h */ case   15:  		/* stb R9, <#[R11]> */
		/* 82212278h case   15:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212278h case   15:*/		return 0x8221227C;
		  /* 8221227Ch */ case   16:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8221227Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221227Ch case   16:*/		return 0x82212280;
		  /* 82212280h */ case   17:  		/* and R10, R10, R12 */
		/* 82212280h case   17:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82212280h case   17:*/		return 0x82212284;
		  /* 82212284h */ case   18:  		/* addi R3, R11, 4 */
		/* 82212284h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82212284h case   18:*/		return 0x82212288;
		  /* 82212288h */ case   19:  		/* stw R10, <#[R11]> */
		/* 82212288h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212288h case   19:*/		return 0x8221228C;
		  /* 8221228Ch */ case   20:  		/* addi R1, R1, 128 */
		/* 8221228Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221228Ch case   20:*/		return 0x82212290;
		  /* 82212290h */ case   21:  		/* b -1576940 */
		/* 82212290h case   21:*/		return 0x820912A4;
		/* 82212290h case   21:*/		return 0x82212294;
		  /* 82212294h */ case   22:  		/* nop */
		/* 82212294h case   22:*/		cpu::op::nop();
		/* 82212294h case   22:*/		return 0x82212298;
	}
	return 0x82212298;
} // Block from 8221223Ch-82212298h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82212298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212298);
		  /* 82212298h */ case    0:  		/* mfspr R12, LR */
		/* 82212298h case    0:*/		regs.R12 = regs.LR;
		/* 82212298h case    0:*/		return 0x8221229C;
		  /* 8221229Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221229Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221229Ch case    1:*/		return 0x822122A0;
		  /* 822122A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 822122A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822122A0h case    2:*/		return 0x822122A4;
		  /* 822122A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 822122A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822122A4h case    3:*/		return 0x822122A8;
		  /* 822122A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 822122A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822122A8h case    4:*/		return 0x822122AC;
		  /* 822122ACh */ case    5:  		/* mr R31, R4 */
		/* 822122ACh case    5:*/		regs.R31 = regs.R4;
		/* 822122ACh case    5:*/		return 0x822122B0;
		  /* 822122B0h */ case    6:  		/* mr R30, R5 */
		/* 822122B0h case    6:*/		regs.R30 = regs.R5;
		/* 822122B0h case    6:*/		return 0x822122B4;
		  /* 822122B4h */ case    7:  		/* bl -12428 */
		/* 822122B4h case    7:*/		regs.LR = 0x822122B8; return 0x8220F228;
		/* 822122B4h case    7:*/		return 0x822122B8;
		  /* 822122B8h */ case    8:  		/* li R11, 60 */
		/* 822122B8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x3C);
		/* 822122B8h case    8:*/		return 0x822122BC;
		  /* 822122BCh */ case    9:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 822122BCh case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 822122BCh case    9:*/		return 0x822122C0;
		  /* 822122C0h */ case   10:  		/* sth R11, <#[R30 + 2]> */
		/* 822122C0h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 822122C0h case   10:*/		return 0x822122C4;
		  /* 822122C4h */ case   11:  		/* li R7, 1 */
		/* 822122C4h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822122C4h case   11:*/		return 0x822122C8;
		  /* 822122C8h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 822122C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822122C8h case   12:*/		return 0x822122CC;
		  /* 822122CCh */ case   13:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 822122CCh case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 822122CCh case   13:*/		return 0x822122D0;
		  /* 822122D0h */ case   14:  		/* stw R11, <#[R30]> */
		/* 822122D0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822122D0h case   14:*/		return 0x822122D4;
		  /* 822122D4h */ case   15:  		/* addi R11, R30, 4 */
		/* 822122D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 822122D4h case   15:*/		return 0x822122D8;
		  /* 822122D8h */ case   16:  		/* sth R10, <#[R30 + 6]> */
		/* 822122D8h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 822122D8h case   16:*/		return 0x822122DC;
		  /* 822122DCh */ case   17:  		/* lwz R9, <#[R30 + 4]> */
		/* 822122DCh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 822122DCh case   17:*/		return 0x822122E0;
		  /* 822122E0h */ case   18:  		/* addi R11, R11, 4 */
		/* 822122E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822122E0h case   18:*/		return 0x822122E4;
		  /* 822122E4h */ case   19:  		/* rlwimi R9, R7, 18, 8, 15 */
		/* 822122E4h case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R7);
		/* 822122E4h case   19:*/		return 0x822122E8;
		  /* 822122E8h */ case   20:  		/* stw R9, <#[R30 + 4]> */
		/* 822122E8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 822122E8h case   20:*/		return 0x822122EC;
		  /* 822122ECh */ case   21:  		/* lwz R9, <#[R31 + 16]> */
		/* 822122ECh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 822122ECh case   21:*/		return 0x822122F0;
		  /* 822122F0h */ case   22:  		/* sth R9, <#[R11 + 2]> */
		/* 822122F0h case   22:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822122F0h case   22:*/		return 0x822122F4;
		  /* 822122F4h */ case   23:  		/* lwz R9, <#[R11]> */
		/* 822122F4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822122F4h case   23:*/		return 0x822122F8;
		  /* 822122F8h */ case   24:  		/* lwz R8, <#[R31 + 16]> */
		/* 822122F8h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 822122F8h case   24:*/		return 0x822122FC;
		  /* 822122FCh */ case   25:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 822122FCh case   25:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 822122FCh case   25:*/		return 0x82212300;
		  /* 82212300h */ case   26:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82212300h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82212300h case   26:*/		return 0x82212304;
		  /* 82212304h */ case   27:  		/* stw R8, <#[R11]> */
		/* 82212304h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82212304h case   27:*/		return 0x82212308;
		  /* 82212308h */ case   28:  		/* lwz R8, <#[R31 + 16]> */
		/* 82212308h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82212308h case   28:*/		return 0x8221230C;
		  /* 8221230Ch */ case   29:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 8221230Ch case   29:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 8221230Ch case   29:*/		return 0x82212310;
		  /* 82212310h */ case   30:  		/* oris R9, R8, 64 */
		/* 82212310h case   30:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82212310h case   30:*/		return 0x82212314;
		  /* 82212314h */ case   31:  		/* stw R9, <#[R11]> */
		/* 82212314h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212314h case   31:*/		return 0x82212318;
		  /* 82212318h */ case   32:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82212318h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212318h case   32:*/		return 0x8221231C;
		  /* 8221231Ch */ case   33:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221231Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221231Ch case   33:*/		return 0x82212320;
		  /* 82212320h */ case   34:  		/* rlwimi R9, R8, 20, 29, 31 */
		/* 82212320h case   34:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R9,regs.R8);
		/* 82212320h case   34:*/		return 0x82212324;
		  /* 82212324h */ case   35:  		/* stw R9, <#[R11]> */
		/* 82212324h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212324h case   35:*/		return 0x82212328;
		  /* 82212328h */ case   36:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212328h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212328h case   36:*/		return 0x8221232C;
		  /* 8221232Ch */ case   37:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221232Ch case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221232Ch case   37:*/		return 0x82212330;
		  /* 82212330h */ case   38:  		/* rlwimi R9, R8, 24, 25, 27 */
		/* 82212330h case   38:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R9,regs.R8);
		/* 82212330h case   38:*/		return 0x82212334;
		  /* 82212334h */ case   39:  		/* stw R9, <#[R11]> */
		/* 82212334h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212334h case   39:*/		return 0x82212338;
		  /* 82212338h */ case   40:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212338h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212338h case   40:*/		return 0x8221233C;
		  /* 8221233Ch */ case   41:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221233Ch case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221233Ch case   41:*/		return 0x82212340;
		  /* 82212340h */ case   42:  		/* rlwimi R9, R8, 28, 21, 23 */
		/* 82212340h case   42:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R9,regs.R8);
		/* 82212340h case   42:*/		return 0x82212344;
		  /* 82212344h */ case   43:  		/* stw R9, <#[R11]> */
		/* 82212344h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212344h case   43:*/		return 0x82212348;
	}
	return 0x82212348;
} // Block from 82212298h-82212348h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82212348h
// Function '?DoLit@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212348);
		  /* 82212348h */ case    0:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212348h case    0:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212348h case    0:*/		return 0x8221234C;
		  /* 8221234Ch */ case    1:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221234Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221234Ch case    1:*/		return 0x82212350;
		  /* 82212350h */ case    2:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 82212350h case    2:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 82212350h case    2:*/		return 0x82212354;
		  /* 82212354h */ case    3:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82212354h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82212354h case    3:*/		return 0x82212358;
		  /* 82212358h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82212358h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82212358h case    4:*/		return 0x8221235C;
		  /* 8221235Ch */ case    5:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221235Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221235Ch case    5:*/		return 0x82212360;
		  /* 82212360h */ case    6:  		/* rlwimi R9, R8, 20, 28, 28 */
		/* 82212360h case    6:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R9,regs.R8);
		/* 82212360h case    6:*/		return 0x82212364;
		  /* 82212364h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82212364h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212364h case    7:*/		return 0x82212368;
		  /* 82212368h */ case    8:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212368h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212368h case    8:*/		return 0x8221236C;
		  /* 8221236Ch */ case    9:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221236Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221236Ch case    9:*/		return 0x82212370;
		  /* 82212370h */ case   10:  		/* rlwimi R9, R8, 24, 24, 24 */
		/* 82212370h case   10:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R9,regs.R8);
		/* 82212370h case   10:*/		return 0x82212374;
		  /* 82212374h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82212374h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212374h case   11:*/		return 0x82212378;
		  /* 82212378h */ case   12:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212378h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212378h case   12:*/		return 0x8221237C;
		  /* 8221237Ch */ case   13:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221237Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221237Ch case   13:*/		return 0x82212380;
		  /* 82212380h */ case   14:  		/* rlwimi R9, R8, 28, 20, 20 */
		/* 82212380h case   14:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R9,regs.R8);
		/* 82212380h case   14:*/		return 0x82212384;
		  /* 82212384h */ case   15:  		/* stw R9, <#[R11]> */
		/* 82212384h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212384h case   15:*/		return 0x82212388;
		  /* 82212388h */ case   16:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212388h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212388h case   16:*/		return 0x8221238C;
		  /* 8221238Ch */ case   17:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221238Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221238Ch case   17:*/		return 0x82212390;
		  /* 82212390h */ case   18:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 82212390h case   18:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 82212390h case   18:*/		return 0x82212394;
		  /* 82212394h */ case   19:  		/* oris R9, R9, 16 */
		/* 82212394h case   19:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x10);
		/* 82212394h case   19:*/		return 0x82212398;
		  /* 82212398h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82212398h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212398h case   20:*/		return 0x8221239C;
		  /* 8221239Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 8221239Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221239Ch case   21:*/		return 0x822123A0;
		  /* 822123A0h */ case   22:  		/* lwz R9, <#[R31 + 16]> */
		/* 822123A0h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 822123A0h case   22:*/		return 0x822123A4;
		  /* 822123A4h */ case   23:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 822123A4h case   23:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 822123A4h case   23:*/		return 0x822123A8;
		  /* 822123A8h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 822123A8h case   24:*/		if ( regs.CR[0].eq ) { return 0x822123B8;  }
		/* 822123A8h case   24:*/		return 0x822123AC;
		  /* 822123ACh */ case   25:  		/* lwz R9, <#[R31 + 40]> */
		/* 822123ACh case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 822123ACh case   25:*/		return 0x822123B0;
		  /* 822123B0h */ case   26:  		/* stw R9, <#[R11]> */
		/* 822123B0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822123B0h case   26:*/		return 0x822123B4;
		  /* 822123B4h */ case   27:  		/* addi R11, R11, 4 */
		/* 822123B4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822123B4h case   27:*/		return 0x822123B8;
	}
	return 0x822123B8;
} // Block from 82212348h-822123B8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 822123B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822123B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822123B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822123B8);
		  /* 822123B8h */ case    0:  		/* li R9, 48 */
		/* 822123B8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x30);
		/* 822123B8h case    0:*/		return 0x822123BC;
		  /* 822123BCh */ case    1:  		/* li R8, 0 */
		/* 822123BCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 822123BCh case    1:*/		return 0x822123C0;
		  /* 822123C0h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 822123C0h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822123C0h case    2:*/		return 0x822123C4;
		  /* 822123C4h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 822123C4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822123C4h case    3:*/		return 0x822123C8;
		  /* 822123C8h */ case    4:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 822123C8h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 822123C8h case    4:*/		return 0x822123CC;
		  /* 822123CCh */ case    5:  		/* stw R9, <#[R11]> */
		/* 822123CCh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822123CCh case    5:*/		return 0x822123D0;
		  /* 822123D0h */ case    6:  		/* addi R11, R11, 4 */
		/* 822123D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822123D0h case    6:*/		return 0x822123D4;
		  /* 822123D4h */ case    7:  		/* lwz R9, <#[R31 + 4]> */
		/* 822123D4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 822123D4h case    7:*/		return 0x822123D8;
		  /* 822123D8h */ case    8:  		/* sth R9, <#[R11 + 2]> */
		/* 822123D8h case    8:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822123D8h case    8:*/		return 0x822123DC;
		  /* 822123DCh */ case    9:  		/* lwz R9, <#[R31 + 4]> */
		/* 822123DCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 822123DCh case    9:*/		return 0x822123E0;
		  /* 822123E0h */ case   10:  		/* lwz R6, <#[R11]> */
		/* 822123E0h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822123E0h case   10:*/		return 0x822123E4;
		  /* 822123E4h */ case   11:  		/* rlwimi R6, R9, 0, 10, 15 */
		/* 822123E4h case   11:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R6,regs.R9);
		/* 822123E4h case   11:*/		return 0x822123E8;
		  /* 822123E8h */ case   12:  		/* stw R6, <#[R11]> */
		/* 822123E8h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822123E8h case   12:*/		return 0x822123EC;
		  /* 822123ECh */ case   13:  		/* rlwinm R9, R6, 0, 0, 31 */
		/* 822123ECh case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R6);
		/* 822123ECh case   13:*/		return 0x822123F0;
		  /* 822123F0h */ case   14:  		/* lwz R6, <#[R31 + 4]> */
		/* 822123F0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 822123F0h case   14:*/		return 0x822123F4;
		  /* 822123F4h */ case   15:  		/* rlwimi R9, R6, 0, 8, 8 */
		/* 822123F4h case   15:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R9,regs.R6);
		/* 822123F4h case   15:*/		return 0x822123F8;
		  /* 822123F8h */ case   16:  		/* oris R9, R9, 64 */
		/* 822123F8h case   16:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 822123F8h case   16:*/		return 0x822123FC;
		  /* 822123FCh */ case   17:  		/* stw R9, <#[R11]> */
		/* 822123FCh case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822123FCh case   17:*/		return 0x82212400;
		  /* 82212400h */ case   18:  		/* stwu R8, <#[R11 + 4]> */
		/* 82212400h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212400h case   18:*/		return 0x82212404;
		  /* 82212404h */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 82212404h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82212404h case   19:*/		return 0x82212408;
		  /* 82212408h */ case   20:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 82212408h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 82212408h case   20:*/		return 0x8221240C;
		  /* 8221240Ch */ case   21:  		/* stw R9, <#[R11]> */
		/* 8221240Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221240Ch case   21:*/		return 0x82212410;
		  /* 82212410h */ case   22:  		/* addi R11, R11, 4 */
		/* 82212410h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212410h case   22:*/		return 0x82212414;
		  /* 82212414h */ case   23:  		/* lwz R9, <#[R31 + 4]> */
		/* 82212414h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82212414h case   23:*/		return 0x82212418;
		  /* 82212418h */ case   24:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82212418h case   24:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82212418h case   24:*/		return 0x8221241C;
		  /* 8221241Ch */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 8221241Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x8221242C;  }
		/* 8221241Ch case   25:*/		return 0x82212420;
		  /* 82212420h */ case   26:  		/* lwz R9, <#[R31 + 12]> */
		/* 82212420h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82212420h case   26:*/		return 0x82212424;
		  /* 82212424h */ case   27:  		/* stw R9, <#[R11]> */
		/* 82212424h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212424h case   27:*/		return 0x82212428;
		  /* 82212428h */ case   28:  		/* addi R11, R11, 4 */
		/* 82212428h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212428h case   28:*/		return 0x8221242C;
	}
	return 0x8221242C;
} // Block from 822123B8h-8221242Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 8221242Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221242C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221242C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221242C);
		  /* 8221242Ch */ case    0:  		/* li R9, 17 */
		/* 8221242Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 8221242Ch case    0:*/		return 0x82212430;
		  /* 82212430h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82212430h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212430h case    1:*/		return 0x82212434;
		  /* 82212434h */ case    2:  		/* lwz R5, <#[R11]> */
		/* 82212434h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212434h case    2:*/		return 0x82212438;
		  /* 82212438h */ case    3:  		/* li R12, -17477 */
		/* 82212438h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82212438h case    3:*/		return 0x8221243C;
		  /* 8221243Ch */ case    4:  		/* rlwimi R5, R9, 18, 8, 15 */
		/* 8221243Ch case    4:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R9);
		/* 8221243Ch case    4:*/		return 0x82212440;
		  /* 82212440h */ case    5:  		/* stw R5, <#[R11]> */
		/* 82212440h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212440h case    5:*/		return 0x82212444;
		  /* 82212444h */ case    6:  		/* lwzu R5, <#[R11 + 4]> */
		/* 82212444h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212444h case    6:*/		return 0x82212448;
		  /* 82212448h */ case    7:  		/* and R5, R5, R12 */
		/* 82212448h case    7:*/		cpu::op::and<0>(regs,&regs.R5,regs.R5,regs.R12);
		/* 82212448h case    7:*/		return 0x8221244C;
		  /* 8221244Ch */ case    8:  		/* ori R5, R5, 13107 */
		/* 8221244Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3333);
		/* 8221244Ch case    8:*/		return 0x82212450;
		  /* 82212450h */ case    9:  		/* li R6, 65 */
		/* 82212450h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 82212450h case    9:*/		return 0x82212454;
		  /* 82212454h */ case   10:  		/* stw R5, <#[R11]> */
		/* 82212454h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212454h case   10:*/		return 0x82212458;
		  /* 82212458h */ case   11:  		/* addi R11, R11, 4 */
		/* 82212458h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212458h case   11:*/		return 0x8221245C;
		  /* 8221245Ch */ case   12:  		/* sth R6, <#[R11 + 2]> */
		/* 8221245Ch case   12:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 8221245Ch case   12:*/		return 0x82212460;
		  /* 82212460h */ case   13:  		/* lwz R5, <#[R11]> */
		/* 82212460h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212460h case   13:*/		return 0x82212464;
		  /* 82212464h */ case   14:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 82212464h case   14:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 82212464h case   14:*/		return 0x82212468;
		  /* 82212468h */ case   15:  		/* stw R5, <#[R11]> */
		/* 82212468h case   15:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212468h case   15:*/		return 0x8221246C;
		  /* 8221246Ch */ case   16:  		/* addi R11, R11, 4 */
		/* 8221246Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221246Ch case   16:*/		return 0x82212470;
		  /* 82212470h */ case   17:  		/* lwz R5, <#[R31 + 4]> */
		/* 82212470h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 82212470h case   17:*/		return 0x82212474;
		  /* 82212474h */ case   18:  		/* sth R5, <#[R11 + 2]> */
		/* 82212474h case   18:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82212474h case   18:*/		return 0x82212478;
		  /* 82212478h */ case   19:  		/* lwz R4, <#[R11]> */
		/* 82212478h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212478h case   19:*/		return 0x8221247C;
		  /* 8221247Ch */ case   20:  		/* lwz R5, <#[R31 + 4]> */
		/* 8221247Ch case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 8221247Ch case   20:*/		return 0x82212480;
		  /* 82212480h */ case   21:  		/* rlwimi R4, R5, 0, 10, 15 */
		/* 82212480h case   21:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R4,regs.R5);
		/* 82212480h case   21:*/		return 0x82212484;
		  /* 82212484h */ case   22:  		/* stw R4, <#[R11]> */
		/* 82212484h case   22:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212484h case   22:*/		return 0x82212488;
		  /* 82212488h */ case   23:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82212488h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82212488h case   23:*/		return 0x8221248C;
		  /* 8221248Ch */ case   24:  		/* lwz R4, <#[R31 + 4]> */
		/* 8221248Ch case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8221248Ch case   24:*/		return 0x82212490;
		  /* 82212490h */ case   25:  		/* rlwimi R5, R4, 0, 8, 8 */
		/* 82212490h case   25:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R5,regs.R4);
		/* 82212490h case   25:*/		return 0x82212494;
		  /* 82212494h */ case   26:  		/* oris R5, R5, 64 */
		/* 82212494h case   26:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R5,0x40);
		/* 82212494h case   26:*/		return 0x82212498;
		  /* 82212498h */ case   27:  		/* stw R5, <#[R11]> */
		/* 82212498h case   27:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212498h case   27:*/		return 0x8221249C;
		  /* 8221249Ch */ case   28:  		/* stwu R8, <#[R11 + 4]> */
		/* 8221249Ch case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221249Ch case   28:*/		return 0x822124A0;
		  /* 822124A0h */ case   29:  		/* lwz R5, <#[R31 + 8]> */
		/* 822124A0h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 822124A0h case   29:*/		return 0x822124A4;
		  /* 822124A4h */ case   30:  		/* rlwinm R5, R5, 0, 26, 27 */
		/* 822124A4h case   30:*/		cpu::op::rlwinm<0,0,26,27>(regs,&regs.R5,regs.R5);
		/* 822124A4h case   30:*/		return 0x822124A8;
		  /* 822124A8h */ case   31:  		/* stw R5, <#[R11]> */
		/* 822124A8h case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822124A8h case   31:*/		return 0x822124AC;
		  /* 822124ACh */ case   32:  		/* addi R11, R11, 4 */
		/* 822124ACh case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822124ACh case   32:*/		return 0x822124B0;
		  /* 822124B0h */ case   33:  		/* lwz R5, <#[R31 + 4]> */
		/* 822124B0h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 822124B0h case   33:*/		return 0x822124B4;
		  /* 822124B4h */ case   34:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 822124B4h case   34:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 822124B4h case   34:*/		return 0x822124B8;
		  /* 822124B8h */ case   35:  		/* bc 12, CR0_EQ, 16 */
		/* 822124B8h case   35:*/		if ( regs.CR[0].eq ) { return 0x822124C8;  }
		/* 822124B8h case   35:*/		return 0x822124BC;
		  /* 822124BCh */ case   36:  		/* lwz R5, <#[R31 + 12]> */
		/* 822124BCh case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 822124BCh case   36:*/		return 0x822124C0;
		  /* 822124C0h */ case   37:  		/* stw R5, <#[R11]> */
		/* 822124C0h case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822124C0h case   37:*/		return 0x822124C4;
		  /* 822124C4h */ case   38:  		/* addi R11, R11, 4 */
		/* 822124C4h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822124C4h case   38:*/		return 0x822124C8;
	}
	return 0x822124C8;
} // Block from 8221242Ch-822124C8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 822124C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822124C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822124C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822124C8);
		  /* 822124C8h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 822124C8h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822124C8h case    0:*/		return 0x822124CC;
		  /* 822124CCh */ case    1:  		/* li R12, -17477 */
		/* 822124CCh case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 822124CCh case    1:*/		return 0x822124D0;
		  /* 822124D0h */ case    2:  		/* lwz R4, <#[R11]> */
		/* 822124D0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822124D0h case    2:*/		return 0x822124D4;
		  /* 822124D4h */ case    3:  		/* rlwimi R4, R9, 18, 8, 15 */
		/* 822124D4h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R4,regs.R9);
		/* 822124D4h case    3:*/		return 0x822124D8;
		  /* 822124D8h */ case    4:  		/* stw R4, <#[R11]> */
		/* 822124D8h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822124D8h case    4:*/		return 0x822124DC;
		  /* 822124DCh */ case    5:  		/* li R5, 49 */
		/* 822124DCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x31);
		/* 822124DCh case    5:*/		return 0x822124E0;
		  /* 822124E0h */ case    6:  		/* lwzu R3, <#[R11 + 4]> */
		/* 822124E0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822124E0h case    6:*/		return 0x822124E4;
		  /* 822124E4h */ case    7:  		/* and R3, R3, R12 */
		/* 822124E4h case    7:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 822124E4h case    7:*/		return 0x822124E8;
		  /* 822124E8h */ case    8:  		/* ori R3, R3, 13107 */
		/* 822124E8h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x3333);
		/* 822124E8h case    8:*/		return 0x822124EC;
		  /* 822124ECh */ case    9:  		/* li R4, 45 */
		/* 822124ECh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 822124ECh case    9:*/		return 0x822124F0;
		  /* 822124F0h */ case   10:  		/* stw R3, <#[R11]> */
		/* 822124F0h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822124F0h case   10:*/		return 0x822124F4;
		  /* 822124F4h */ case   11:  		/* addi R11, R11, 4 */
		/* 822124F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822124F4h case   11:*/		return 0x822124F8;
		  /* 822124F8h */ case   12:  		/* sth R10, <#[R11 + 2]> */
		/* 822124F8h case   12:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822124F8h case   12:*/		return 0x822124FC;
		  /* 822124FCh */ case   13:  		/* lwz R3, <#[R11]> */
		/* 822124FCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822124FCh case   13:*/		return 0x82212500;
		  /* 82212500h */ case   14:  		/* rlwimi R3, R9, 18, 8, 15 */
		/* 82212500h case   14:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R9);
		/* 82212500h case   14:*/		return 0x82212504;
		  /* 82212504h */ case   15:  		/* stw R3, <#[R11]> */
		/* 82212504h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212504h case   15:*/		return 0x82212508;
		  /* 82212508h */ case   16:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82212508h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212508h case   16:*/		return 0x8221250C;
		  /* 8221250Ch */ case   17:  		/* and R3, R3, R12 */
		/* 8221250Ch case   17:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 8221250Ch case   17:*/		return 0x82212510;
		  /* 82212510h */ case   18:  		/* ori R3, R3, 13107 */
		/* 82212510h case   18:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x3333);
		/* 82212510h case   18:*/		return 0x82212514;
		  /* 82212514h */ case   19:  		/* stw R3, <#[R11]> */
		/* 82212514h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82212514h case   19:*/		return 0x82212518;
		  /* 82212518h */ case   20:  		/* addi R11, R11, 4 */
		/* 82212518h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212518h case   20:*/		return 0x8221251C;
		  /* 8221251Ch */ case   21:  		/* sth R5, <#[R11 + 2]> */
		/* 8221251Ch case   21:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 8221251Ch case   21:*/		return 0x82212520;
		  /* 82212520h */ case   22:  		/* lwz R5, <#[R11]> */
		/* 82212520h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212520h case   22:*/		return 0x82212524;
		  /* 82212524h */ case   23:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 82212524h case   23:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 82212524h case   23:*/		return 0x82212528;
		  /* 82212528h */ case   24:  		/* stw R5, <#[R11]> */
		/* 82212528h case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212528h case   24:*/		return 0x8221252C;
		  /* 8221252Ch */ case   25:  		/* addi R11, R11, 4 */
		/* 8221252Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221252Ch case   25:*/		return 0x82212530;
		  /* 82212530h */ case   26:  		/* sth R10, <#[R11 + 2]> */
		/* 82212530h case   26:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212530h case   26:*/		return 0x82212534;
		  /* 82212534h */ case   27:  		/* lwz R5, <#[R11]> */
		/* 82212534h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212534h case   27:*/		return 0x82212538;
		  /* 82212538h */ case   28:  		/* rlwimi R5, R7, 18, 8, 15 */
		/* 82212538h case   28:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R7);
		/* 82212538h case   28:*/		return 0x8221253C;
		  /* 8221253Ch */ case   29:  		/* stw R5, <#[R11]> */
		/* 8221253Ch case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221253Ch case   29:*/		return 0x82212540;
		  /* 82212540h */ case   30:  		/* addi R11, R11, 4 */
		/* 82212540h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212540h case   30:*/		return 0x82212544;
		  /* 82212544h */ case   31:  		/* sth R10, <#[R11 + 2]> */
		/* 82212544h case   31:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212544h case   31:*/		return 0x82212548;
		  /* 82212548h */ case   32:  		/* lwz R5, <#[R11]> */
		/* 82212548h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212548h case   32:*/		return 0x8221254C;
		  /* 8221254Ch */ case   33:  		/* rlwimi R5, R7, 18, 8, 15 */
		/* 8221254Ch case   33:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R7);
		/* 8221254Ch case   33:*/		return 0x82212550;
		  /* 82212550h */ case   34:  		/* stw R5, <#[R11]> */
		/* 82212550h case   34:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212550h case   34:*/		return 0x82212554;
		  /* 82212554h */ case   35:  		/* addi R11, R11, 4 */
		/* 82212554h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212554h case   35:*/		return 0x82212558;
		  /* 82212558h */ case   36:  		/* sth R4, <#[R11 + 2]> */
		/* 82212558h case   36:*/		cpu::mem::store16( regs, regs.R4, (uint32)(regs.R11 + 0x00000002) );
		/* 82212558h case   36:*/		return 0x8221255C;
		  /* 8221255Ch */ case   37:  		/* lwz R5, <#[R11]> */
		/* 8221255Ch case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221255Ch case   37:*/		return 0x82212560;
		  /* 82212560h */ case   38:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 82212560h case   38:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 82212560h case   38:*/		return 0x82212564;
		  /* 82212564h */ case   39:  		/* stw R5, <#[R11]> */
		/* 82212564h case   39:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212564h case   39:*/		return 0x82212568;
		  /* 82212568h */ case   40:  		/* addi R11, R11, 4 */
		/* 82212568h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212568h case   40:*/		return 0x8221256C;
		  /* 8221256Ch */ case   41:  		/* lwz R5, <#[R31 + 4]> */
		/* 8221256Ch case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 8221256Ch case   41:*/		return 0x82212570;
		  /* 82212570h */ case   42:  		/* sth R5, <#[R11 + 2]> */
		/* 82212570h case   42:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82212570h case   42:*/		return 0x82212574;
		  /* 82212574h */ case   43:  		/* lwz R5, <#[R11]> */
		/* 82212574h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212574h case   43:*/		return 0x82212578;
		  /* 82212578h */ case   44:  		/* lwz R4, <#[R31 + 4]> */
		/* 82212578h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82212578h case   44:*/		return 0x8221257C;
		  /* 8221257Ch */ case   45:  		/* rlwimi R5, R4, 0, 10, 15 */
		/* 8221257Ch case   45:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R5,regs.R4);
		/* 8221257Ch case   45:*/		return 0x82212580;
		  /* 82212580h */ case   46:  		/* stw R5, <#[R11]> */
		/* 82212580h case   46:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212580h case   46:*/		return 0x82212584;
		  /* 82212584h */ case   47:  		/* rlwinm R5, R5, 0, 0, 31 */
		/* 82212584h case   47:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R5);
		/* 82212584h case   47:*/		return 0x82212588;
		  /* 82212588h */ case   48:  		/* lwz R4, <#[R31 + 4]> */
		/* 82212588h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82212588h case   48:*/		return 0x8221258C;
		  /* 8221258Ch */ case   49:  		/* rlwimi R5, R4, 0, 8, 8 */
		/* 8221258Ch case   49:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R5,regs.R4);
		/* 8221258Ch case   49:*/		return 0x82212590;
		  /* 82212590h */ case   50:  		/* oris R5, R5, 64 */
		/* 82212590h case   50:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R5,0x40);
		/* 82212590h case   50:*/		return 0x82212594;
		  /* 82212594h */ case   51:  		/* stw R5, <#[R11]> */
		/* 82212594h case   51:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212594h case   51:*/		return 0x82212598;
		  /* 82212598h */ case   52:  		/* stwu R8, <#[R11 + 4]> */
		/* 82212598h case   52:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212598h case   52:*/		return 0x8221259C;
		  /* 8221259Ch */ case   53:  		/* lwz R5, <#[R31 + 8]> */
		/* 8221259Ch case   53:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8221259Ch case   53:*/		return 0x822125A0;
		  /* 822125A0h */ case   54:  		/* rlwinm R5, R5, 0, 28, 29 */
		/* 822125A0h case   54:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R5,regs.R5);
		/* 822125A0h case   54:*/		return 0x822125A4;
		  /* 822125A4h */ case   55:  		/* stw R5, <#[R11]> */
		/* 822125A4h case   55:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822125A4h case   55:*/		return 0x822125A8;
		  /* 822125A8h */ case   56:  		/* addi R11, R11, 4 */
		/* 822125A8h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822125A8h case   56:*/		return 0x822125AC;
		  /* 822125ACh */ case   57:  		/* lwz R5, <#[R31 + 4]> */
		/* 822125ACh case   57:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 822125ACh case   57:*/		return 0x822125B0;
		  /* 822125B0h */ case   58:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 822125B0h case   58:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 822125B0h case   58:*/		return 0x822125B4;
		  /* 822125B4h */ case   59:  		/* bc 12, CR0_EQ, 16 */
		/* 822125B4h case   59:*/		if ( regs.CR[0].eq ) { return 0x822125C4;  }
		/* 822125B4h case   59:*/		return 0x822125B8;
		  /* 822125B8h */ case   60:  		/* lwz R5, <#[R31 + 12]> */
		/* 822125B8h case   60:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 822125B8h case   60:*/		return 0x822125BC;
		  /* 822125BCh */ case   61:  		/* stw R5, <#[R11]> */
		/* 822125BCh case   61:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822125BCh case   61:*/		return 0x822125C0;
		  /* 822125C0h */ case   62:  		/* addi R11, R11, 4 */
		/* 822125C0h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822125C0h case   62:*/		return 0x822125C4;
	}
	return 0x822125C4;
} // Block from 822124C8h-822125C4h (63 instructions)

//////////////////////////////////////////////////////
// Block at 822125C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822125C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822125C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822125C4);
		  /* 822125C4h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 822125C4h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822125C4h case    0:*/		return 0x822125C8;
		  /* 822125C8h */ case    1:  		/* li R12, -17477 */
		/* 822125C8h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 822125C8h case    1:*/		return 0x822125CC;
		  /* 822125CCh */ case    2:  		/* lwz R10, <#[R11]> */
		/* 822125CCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822125CCh case    2:*/		return 0x822125D0;
		  /* 822125D0h */ case    3:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 822125D0h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 822125D0h case    3:*/		return 0x822125D4;
		  /* 822125D4h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822125D4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822125D4h case    4:*/		return 0x822125D8;
		  /* 822125D8h */ case    5:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822125D8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822125D8h case    5:*/		return 0x822125DC;
		  /* 822125DCh */ case    6:  		/* and R10, R10, R12 */
		/* 822125DCh case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 822125DCh case    6:*/		return 0x822125E0;
		  /* 822125E0h */ case    7:  		/* ori R10, R10, 13107 */
		/* 822125E0h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3333);
		/* 822125E0h case    7:*/		return 0x822125E4;
		  /* 822125E4h */ case    8:  		/* stw R10, <#[R11]> */
		/* 822125E4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822125E4h case    8:*/		return 0x822125E8;
		  /* 822125E8h */ case    9:  		/* addi R11, R11, 4 */
		/* 822125E8h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822125E8h case    9:*/		return 0x822125EC;
		  /* 822125ECh */ case   10:  		/* sth R6, <#[R11 + 2]> */
		/* 822125ECh case   10:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822125ECh case   10:*/		return 0x822125F0;
		  /* 822125F0h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 822125F0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822125F0h case   11:*/		return 0x822125F4;
		  /* 822125F4h */ case   12:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 822125F4h case   12:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 822125F4h case   12:*/		return 0x822125F8;
		  /* 822125F8h */ case   13:  		/* stw R10, <#[R11]> */
		/* 822125F8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822125F8h case   13:*/		return 0x822125FC;
		  /* 822125FCh */ case   14:  		/* addi R11, R11, 4 */
		/* 822125FCh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822125FCh case   14:*/		return 0x82212600;
		  /* 82212600h */ case   15:  		/* lwz R10, <#[R31 + 4]> */
		/* 82212600h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212600h case   15:*/		return 0x82212604;
		  /* 82212604h */ case   16:  		/* sth R10, <#[R11 + 2]> */
		/* 82212604h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212604h case   16:*/		return 0x82212608;
		  /* 82212608h */ case   17:  		/* lwz R10, <#[R31 + 4]> */
		/* 82212608h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212608h case   17:*/		return 0x8221260C;
		  /* 8221260Ch */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8221260Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221260Ch case   18:*/		return 0x82212610;
		  /* 82212610h */ case   19:  		/* rlwimi R9, R10, 0, 10, 15 */
		/* 82212610h case   19:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R9,regs.R10);
		/* 82212610h case   19:*/		return 0x82212614;
		  /* 82212614h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82212614h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212614h case   20:*/		return 0x82212618;
		  /* 82212618h */ case   21:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212618h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212618h case   21:*/		return 0x8221261C;
		  /* 8221261Ch */ case   22:  		/* lwz R9, <#[R31 + 4]> */
		/* 8221261Ch case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8221261Ch case   22:*/		return 0x82212620;
		  /* 82212620h */ case   23:  		/* rlwimi R10, R9, 0, 8, 8 */
		/* 82212620h case   23:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R9);
		/* 82212620h case   23:*/		return 0x82212624;
		  /* 82212624h */ case   24:  		/* oris R10, R10, 64 */
		/* 82212624h case   24:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 82212624h case   24:*/		return 0x82212628;
		  /* 82212628h */ case   25:  		/* stw R10, <#[R11]> */
		/* 82212628h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212628h case   25:*/		return 0x8221262C;
		  /* 8221262Ch */ case   26:  		/* stwu R8, <#[R11 + 4]> */
		/* 8221262Ch case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221262Ch case   26:*/		return 0x82212630;
		  /* 82212630h */ case   27:  		/* lwz R10, <#[R31 + 8]> */
		/* 82212630h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82212630h case   27:*/		return 0x82212634;
		  /* 82212634h */ case   28:  		/* rlwinm R10, R10, 0, 24, 25 */
		/* 82212634h case   28:*/		cpu::op::rlwinm<0,0,24,25>(regs,&regs.R10,regs.R10);
		/* 82212634h case   28:*/		return 0x82212638;
		  /* 82212638h */ case   29:  		/* stw R10, <#[R11]> */
		/* 82212638h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212638h case   29:*/		return 0x8221263C;
		  /* 8221263Ch */ case   30:  		/* addi R11, R11, 4 */
		/* 8221263Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221263Ch case   30:*/		return 0x82212640;
		  /* 82212640h */ case   31:  		/* lwz R10, <#[R31 + 4]> */
		/* 82212640h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212640h case   31:*/		return 0x82212644;
		  /* 82212644h */ case   32:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212644h case   32:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212644h case   32:*/		return 0x82212648;
		  /* 82212648h */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 82212648h case   33:*/		if ( regs.CR[0].eq ) { return 0x82212658;  }
		/* 82212648h case   33:*/		return 0x8221264C;
		  /* 8221264Ch */ case   34:  		/* lwz R10, <#[R31 + 12]> */
		/* 8221264Ch case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221264Ch case   34:*/		return 0x82212650;
		  /* 82212650h */ case   35:  		/* stw R10, <#[R11]> */
		/* 82212650h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212650h case   35:*/		return 0x82212654;
		  /* 82212654h */ case   36:  		/* addi R11, R11, 4 */
		/* 82212654h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212654h case   36:*/		return 0x82212658;
	}
	return 0x82212658;
} // Block from 822125C4h-82212658h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82212658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212658);
		  /* 82212658h */ case    0:  		/* sth R8, <#[R11 + 2]> */
		/* 82212658h case    0:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82212658h case    0:*/		return 0x8221265C;
		  /* 8221265Ch */ case    1:  		/* li R12, -26215 */
		/* 8221265Ch case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 8221265Ch case    1:*/		return 0x82212660;
		  /* 82212660h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82212660h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212660h case    2:*/		return 0x82212664;
		  /* 82212664h */ case    3:  		/* rlwimi R10, R6, 16, 8, 15 */
		/* 82212664h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R6);
		/* 82212664h case    3:*/		return 0x82212668;
		  /* 82212668h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212668h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212668h case    4:*/		return 0x8221266C;
		  /* 8221266Ch */ case    5:  		/* stb R7, <#[R11]> */
		/* 8221266Ch case    5:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221266Ch case    5:*/		return 0x82212670;
		  /* 82212670h */ case    6:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82212670h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212670h case    6:*/		return 0x82212674;
		  /* 82212674h */ case    7:  		/* and R10, R10, R12 */
		/* 82212674h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82212674h case    7:*/		return 0x82212678;
		  /* 82212678h */ case    8:  		/* ori R10, R10, 4369 */
		/* 82212678h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1111);
		/* 82212678h case    8:*/		return 0x8221267C;
		  /* 8221267Ch */ case    9:  		/* stw R10, <#[R11]> */
		/* 8221267Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221267Ch case    9:*/		return 0x82212680;
		  /* 82212680h */ case   10:  		/* addi R11, R11, 4 */
		/* 82212680h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212680h case   10:*/		return 0x82212684;
		  /* 82212684h */ case   11:  		/* sth R8, <#[R11 + 2]> */
		/* 82212684h case   11:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82212684h case   11:*/		return 0x82212688;
		  /* 82212688h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 82212688h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212688h case   12:*/		return 0x8221268C;
		  /* 8221268Ch */ case   13:  		/* rlwimi R10, R6, 16, 8, 15 */
		/* 8221268Ch case   13:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R6);
		/* 8221268Ch case   13:*/		return 0x82212690;
		  /* 82212690h */ case   14:  		/* stw R10, <#[R11]> */
		/* 82212690h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212690h case   14:*/		return 0x82212694;
		  /* 82212694h */ case   15:  		/* stb R7, <#[R11]> */
		/* 82212694h case   15:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82212694h case   15:*/		return 0x82212698;
		  /* 82212698h */ case   16:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82212698h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212698h case   16:*/		return 0x8221269C;
		  /* 8221269Ch */ case   17:  		/* and R10, R10, R12 */
		/* 8221269Ch case   17:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8221269Ch case   17:*/		return 0x822126A0;
		  /* 822126A0h */ case   18:  		/* addi R3, R11, 4 */
		/* 822126A0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822126A0h case   18:*/		return 0x822126A4;
		  /* 822126A4h */ case   19:  		/* ori R10, R10, 4369 */
		/* 822126A4h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1111);
		/* 822126A4h case   19:*/		return 0x822126A8;
		  /* 822126A8h */ case   20:  		/* stw R10, <#[R11]> */
		/* 822126A8h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822126A8h case   20:*/		return 0x822126AC;
		  /* 822126ACh */ case   21:  		/* addi R1, R1, 112 */
		/* 822126ACh case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822126ACh case   21:*/		return 0x822126B0;
		  /* 822126B0h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 822126B0h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822126B0h case   22:*/		return 0x822126B4;
		  /* 822126B4h */ case   23:  		/* mtspr LR, R12 */
		/* 822126B4h case   23:*/		regs.LR = regs.R12;
		/* 822126B4h case   23:*/		return 0x822126B8;
		  /* 822126B8h */ case   24:  		/* ld R30, <#[R1 - 24]> */
		/* 822126B8h case   24:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822126B8h case   24:*/		return 0x822126BC;
		  /* 822126BCh */ case   25:  		/* ld R31, <#[R1 - 16]> */
		/* 822126BCh case   25:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822126BCh case   25:*/		return 0x822126C0;
		  /* 822126C0h */ case   26:  		/* bclr 20, CR0_LT */
		/* 822126C0h case   26:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822126C0h case   26:*/		return 0x822126C4;
	}
	return 0x822126C4;
} // Block from 82212658h-822126C4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 822126C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822126C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822126C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822126C4);
		  /* 822126C4h */ case    0:  		/* nop */
		/* 822126C4h case    0:*/		cpu::op::nop();
		/* 822126C4h case    0:*/		return 0x822126C8;
	}
	return 0x822126C8;
} // Block from 822126C4h-822126C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822126C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822126C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822126C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822126C8);
		  /* 822126C8h */ case    0:  		/* mfspr R12, LR */
		/* 822126C8h case    0:*/		regs.R12 = regs.LR;
		/* 822126C8h case    0:*/		return 0x822126CC;
		  /* 822126CCh */ case    1:  		/* bl -1578100 */
		/* 822126CCh case    1:*/		regs.LR = 0x822126D0; return 0x82091258;
		/* 822126CCh case    1:*/		return 0x822126D0;
		  /* 822126D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822126D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822126D0h case    2:*/		return 0x822126D4;
		  /* 822126D4h */ case    3:  		/* mr R29, R3 */
		/* 822126D4h case    3:*/		regs.R29 = regs.R3;
		/* 822126D4h case    3:*/		return 0x822126D8;
		  /* 822126D8h */ case    4:  		/* mr R31, R4 */
		/* 822126D8h case    4:*/		regs.R31 = regs.R4;
		/* 822126D8h case    4:*/		return 0x822126DC;
		  /* 822126DCh */ case    5:  		/* mr R30, R5 */
		/* 822126DCh case    5:*/		regs.R30 = regs.R5;
		/* 822126DCh case    5:*/		return 0x822126E0;
		  /* 822126E0h */ case    6:  		/* bl -13496 */
		/* 822126E0h case    6:*/		regs.LR = 0x822126E4; return 0x8220F228;
		/* 822126E0h case    6:*/		return 0x822126E4;
		  /* 822126E4h */ case    7:  		/* mr R28, R3 */
		/* 822126E4h case    7:*/		regs.R28 = regs.R3;
		/* 822126E4h case    7:*/		return 0x822126E8;
		  /* 822126E8h */ case    8:  		/* mr R3, R29 */
		/* 822126E8h case    8:*/		regs.R3 = regs.R29;
		/* 822126E8h case    8:*/		return 0x822126EC;
		  /* 822126ECh */ case    9:  		/* bl -13508 */
		/* 822126ECh case    9:*/		regs.LR = 0x822126F0; return 0x8220F228;
		/* 822126ECh case    9:*/		return 0x822126F0;
		  /* 822126F0h */ case   10:  		/* li R11, 73 */
		/* 822126F0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x49);
		/* 822126F0h case   10:*/		return 0x822126F4;
		  /* 822126F4h */ case   11:  		/* rlwinm R8, R28, 0, 16, 31 */
		/* 822126F4h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R28);
		/* 822126F4h case   11:*/		return 0x822126F8;
		  /* 822126F8h */ case   12:  		/* sth R11, <#[R30 + 2]> */
		/* 822126F8h case   12:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 822126F8h case   12:*/		return 0x822126FC;
		  /* 822126FCh */ case   13:  		/* li R9, 1 */
		/* 822126FCh case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822126FCh case   13:*/		return 0x82212700;
		  /* 82212700h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 82212700h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82212700h case   14:*/		return 0x82212704;
		  /* 82212704h */ case   15:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82212704h case   15:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82212704h case   15:*/		return 0x82212708;
		  /* 82212708h */ case   16:  		/* stw R11, <#[R30]> */
		/* 82212708h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82212708h case   16:*/		return 0x8221270C;
		  /* 8221270Ch */ case   17:  		/* addi R11, R30, 4 */
		/* 8221270Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8221270Ch case   17:*/		return 0x82212710;
		  /* 82212710h */ case   18:  		/* sth R8, <#[R30 + 6]> */
		/* 82212710h case   18:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R30 + 0x00000006) );
		/* 82212710h case   18:*/		return 0x82212714;
		  /* 82212714h */ case   19:  		/* lwz R10, <#[R30 + 4]> */
		/* 82212714h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82212714h case   19:*/		return 0x82212718;
		  /* 82212718h */ case   20:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 82212718h case   20:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 82212718h case   20:*/		return 0x8221271C;
		  /* 8221271Ch */ case   21:  		/* stw R10, <#[R30 + 4]> */
		/* 8221271Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8221271Ch case   21:*/		return 0x82212720;
		  /* 82212720h */ case   22:  		/* lwz R10, <#[R31 + 16]> */
		/* 82212720h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82212720h case   22:*/		return 0x82212724;
		  /* 82212724h */ case   23:  		/* stwu R10, <#[R11 + 4]> */
		/* 82212724h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212724h case   23:*/		return 0x82212728;
		  /* 82212728h */ case   24:  		/* lwz R10, <#[R31 + 16]> */
		/* 82212728h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82212728h case   24:*/		return 0x8221272C;
		  /* 8221272Ch */ case   25:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8221272Ch case   25:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8221272Ch case   25:*/		return 0x82212730;
		  /* 82212730h */ case   26:  		/* addi R11, R11, 4 */
		/* 82212730h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212730h case   26:*/		return 0x82212734;
		  /* 82212734h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 82212734h case   27:*/		if ( regs.CR[0].eq ) { return 0x82212744;  }
		/* 82212734h case   27:*/		return 0x82212738;
		  /* 82212738h */ case   28:  		/* lwz R10, <#[R31 + 28]> */
		/* 82212738h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82212738h case   28:*/		return 0x8221273C;
		  /* 8221273Ch */ case   29:  		/* stw R10, <#[R11]> */
		/* 8221273Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221273Ch case   29:*/		return 0x82212740;
		  /* 82212740h */ case   30:  		/* addi R11, R11, 4 */
		/* 82212740h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212740h case   30:*/		return 0x82212744;
	}
	return 0x82212744;
} // Block from 822126C8h-82212744h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82212744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212744);
		  /* 82212744h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 82212744h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82212744h case    0:*/		return 0x82212748;
		  /* 82212748h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212748h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212748h case    1:*/		return 0x8221274C;
		  /* 8221274Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8221274Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8221275C;  }
		/* 8221274Ch case    2:*/		return 0x82212750;
		  /* 82212750h */ case    3:  		/* lwz R10, <#[R31 + 40]> */
		/* 82212750h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82212750h case    3:*/		return 0x82212754;
		  /* 82212754h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212754h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212754h case    4:*/		return 0x82212758;
		  /* 82212758h */ case    5:  		/* addi R11, R11, 4 */
		/* 82212758h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212758h case    5:*/		return 0x8221275C;
	}
	return 0x8221275C;
} // Block from 82212744h-8221275Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221275Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221275C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221275C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221275C);
		  /* 8221275Ch */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 8221275Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8221275Ch case    0:*/		return 0x82212760;
		  /* 82212760h */ case    1:  		/* stw R10, <#[R11]> */
		/* 82212760h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212760h case    1:*/		return 0x82212764;
		  /* 82212764h */ case    2:  		/* addi R11, R11, 4 */
		/* 82212764h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212764h case    2:*/		return 0x82212768;
		  /* 82212768h */ case    3:  		/* lwz R10, <#[R31 + 20]> */
		/* 82212768h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82212768h case    3:*/		return 0x8221276C;
		  /* 8221276Ch */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8221276Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8221276Ch case    4:*/		return 0x82212770;
		  /* 82212770h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82212770h case    5:*/		if ( regs.CR[0].eq ) { return 0x82212780;  }
		/* 82212770h case    5:*/		return 0x82212774;
		  /* 82212774h */ case    6:  		/* lwz R10, <#[R31 + 32]> */
		/* 82212774h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82212774h case    6:*/		return 0x82212778;
		  /* 82212778h */ case    7:  		/* stw R10, <#[R11]> */
		/* 82212778h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212778h case    7:*/		return 0x8221277C;
		  /* 8221277Ch */ case    8:  		/* addi R11, R11, 4 */
		/* 8221277Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221277Ch case    8:*/		return 0x82212780;
	}
	return 0x82212780;
} // Block from 8221275Ch-82212780h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82212780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212780);
		  /* 82212780h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 82212780h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82212780h case    0:*/		return 0x82212784;
		  /* 82212784h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212784h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212784h case    1:*/		return 0x82212788;
		  /* 82212788h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212788h case    2:*/		if ( regs.CR[0].eq ) { return 0x82212798;  }
		/* 82212788h case    2:*/		return 0x8221278C;
		  /* 8221278Ch */ case    3:  		/* lwz R10, <#[R31 + 44]> */
		/* 8221278Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221278Ch case    3:*/		return 0x82212790;
		  /* 82212790h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212790h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212790h case    4:*/		return 0x82212794;
		  /* 82212794h */ case    5:  		/* addi R11, R11, 4 */
		/* 82212794h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212794h case    5:*/		return 0x82212798;
	}
	return 0x82212798;
} // Block from 82212780h-82212798h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212798);
		  /* 82212798h */ case    0:  		/* li R7, 3 */
		/* 82212798h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82212798h case    0:*/		return 0x8221279C;
		  /* 8221279Ch */ case    1:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 8221279Ch case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 8221279Ch case    1:*/		return 0x822127A0;
		  /* 822127A0h */ case    2:  		/* sth R7, <#[R11 + 2]> */
		/* 822127A0h case    2:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822127A0h case    2:*/		return 0x822127A4;
		  /* 822127A4h */ case    3:  		/* li R7, 0 */
		/* 822127A4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822127A4h case    3:*/		return 0x822127A8;
		  /* 822127A8h */ case    4:  		/* lwz R6, <#[R11]> */
		/* 822127A8h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822127A8h case    4:*/		return 0x822127AC;
		  /* 822127ACh */ case    5:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 822127ACh case    5:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 822127ACh case    5:*/		return 0x822127B0;
		  /* 822127B0h */ case    6:  		/* stw R6, <#[R11]> */
		/* 822127B0h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822127B0h case    6:*/		return 0x822127B4;
		  /* 822127B4h */ case    7:  		/* addi R11, R11, 4 */
		/* 822127B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822127B4h case    7:*/		return 0x822127B8;
		  /* 822127B8h */ case    8:  		/* li R6, 65 */
		/* 822127B8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 822127B8h case    8:*/		return 0x822127BC;
		  /* 822127BCh */ case    9:  		/* li R12, -26215 */
		/* 822127BCh case    9:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 822127BCh case    9:*/		return 0x822127C0;
		  /* 822127C0h */ case   10:  		/* sth R10, <#[R11 + 2]> */
		/* 822127C0h case   10:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822127C0h case   10:*/		return 0x822127C4;
		  /* 822127C4h */ case   11:  		/* lwz R5, <#[R11]> */
		/* 822127C4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822127C4h case   11:*/		return 0x822127C8;
		  /* 822127C8h */ case   12:  		/* rlwimi R5, R9, 18, 8, 15 */
		/* 822127C8h case   12:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R9);
		/* 822127C8h case   12:*/		return 0x822127CC;
		  /* 822127CCh */ case   13:  		/* stw R5, <#[R11]> */
		/* 822127CCh case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822127CCh case   13:*/		return 0x822127D0;
		  /* 822127D0h */ case   14:  		/* addi R11, R11, 4 */
		/* 822127D0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822127D0h case   14:*/		return 0x822127D4;
		  /* 822127D4h */ case   15:  		/* sth R7, <#[R11 + 2]> */
		/* 822127D4h case   15:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822127D4h case   15:*/		return 0x822127D8;
		  /* 822127D8h */ case   16:  		/* lwz R7, <#[R11]> */
		/* 822127D8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822127D8h case   16:*/		return 0x822127DC;
		  /* 822127DCh */ case   17:  		/* rlwimi R7, R6, 16, 8, 15 */
		/* 822127DCh case   17:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R6);
		/* 822127DCh case   17:*/		return 0x822127E0;
		  /* 822127E0h */ case   18:  		/* stw R7, <#[R11]> */
		/* 822127E0h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822127E0h case   18:*/		return 0x822127E4;
		  /* 822127E4h */ case   19:  		/* stb R9, <#[R11]> */
		/* 822127E4h case   19:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822127E4h case   19:*/		return 0x822127E8;
		  /* 822127E8h */ case   20:  		/* lwzu R7, <#[R11 + 4]> */
		/* 822127E8h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822127E8h case   20:*/		return 0x822127EC;
		  /* 822127ECh */ case   21:  		/* and R7, R7, R12 */
		/* 822127ECh case   21:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 822127ECh case   21:*/		return 0x822127F0;
		  /* 822127F0h */ case   22:  		/* ori R7, R7, 4369 */
		/* 822127F0h case   22:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x1111);
		/* 822127F0h case   22:*/		return 0x822127F4;
		  /* 822127F4h */ case   23:  		/* stw R7, <#[R11]> */
		/* 822127F4h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822127F4h case   23:*/		return 0x822127F8;
		  /* 822127F8h */ case   24:  		/* addi R11, R11, 4 */
		/* 822127F8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822127F8h case   24:*/		return 0x822127FC;
		  /* 822127FCh */ case   25:  		/* lwz R7, <#[R31 + 16]> */
		/* 822127FCh case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822127FCh case   25:*/		return 0x82212800;
		  /* 82212800h */ case   26:  		/* sth R7, <#[R11 + 2]> */
		/* 82212800h case   26:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82212800h case   26:*/		return 0x82212804;
		  /* 82212804h */ case   27:  		/* lwz R7, <#[R11]> */
		/* 82212804h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82212804h case   27:*/		return 0x82212808;
		  /* 82212808h */ case   28:  		/* lwz R6, <#[R31 + 16]> */
		/* 82212808h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 82212808h case   28:*/		return 0x8221280C;
		  /* 8221280Ch */ case   29:  		/* rlwimi R6, R7, 0, 16, 9 */
		/* 8221280Ch case   29:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R7);
		/* 8221280Ch case   29:*/		return 0x82212810;
		  /* 82212810h */ case   30:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82212810h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82212810h case   30:*/		return 0x82212814;
		  /* 82212814h */ case   31:  		/* stw R6, <#[R11]> */
		/* 82212814h case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212814h case   31:*/		return 0x82212818;
		  /* 82212818h */ case   32:  		/* lwz R6, <#[R31 + 16]> */
		/* 82212818h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000010) );
		/* 82212818h case   32:*/		return 0x8221281C;
		  /* 8221281Ch */ case   33:  		/* rlwimi R6, R7, 0, 9, 7 */
		/* 8221281Ch case   33:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R6,regs.R7);
		/* 8221281Ch case   33:*/		return 0x82212820;
		  /* 82212820h */ case   34:  		/* oris R7, R6, 64 */
		/* 82212820h case   34:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R6,0x40);
		/* 82212820h case   34:*/		return 0x82212824;
		  /* 82212824h */ case   35:  		/* stw R7, <#[R11]> */
		/* 82212824h case   35:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82212824h case   35:*/		return 0x82212828;
		  /* 82212828h */ case   36:  		/* lwzu R7, <#[R11 + 4]> */
		/* 82212828h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212828h case   36:*/		return 0x8221282C;
		  /* 8221282Ch */ case   37:  		/* lwz R6, <#[R31 + 28]> */
		/* 8221282Ch case   37:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221282Ch case   37:*/		return 0x82212830;
		  /* 82212830h */ case   38:  		/* rlwimi R6, R7, 0, 0, 28 */
		/* 82212830h case   38:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R6,regs.R7);
		/* 82212830h case   38:*/		return 0x82212834;
		  /* 82212834h */ case   39:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82212834h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82212834h case   39:*/		return 0x82212838;
		  /* 82212838h */ case   40:  		/* stw R6, <#[R11]> */
		/* 82212838h case   40:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212838h case   40:*/		return 0x8221283C;
		  /* 8221283Ch */ case   41:  		/* lwz R6, <#[R31 + 28]> */
		/* 8221283Ch case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221283Ch case   41:*/		return 0x82212840;
		  /* 82212840h */ case   42:  		/* rlwimi R6, R7, 0, 28, 24 */
		/* 82212840h case   42:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R6,regs.R7);
		/* 82212840h case   42:*/		return 0x82212844;
		  /* 82212844h */ case   43:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82212844h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82212844h case   43:*/		return 0x82212848;
		  /* 82212848h */ case   44:  		/* stw R6, <#[R11]> */
		/* 82212848h case   44:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212848h case   44:*/		return 0x8221284C;
		  /* 8221284Ch */ case   45:  		/* lwz R6, <#[R31 + 28]> */
		/* 8221284Ch case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221284Ch case   45:*/		return 0x82212850;
		  /* 82212850h */ case   46:  		/* rlwimi R6, R7, 0, 24, 20 */
		/* 82212850h case   46:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R6,regs.R7);
		/* 82212850h case   46:*/		return 0x82212854;
		  /* 82212854h */ case   47:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82212854h case   47:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82212854h case   47:*/		return 0x82212858;
		  /* 82212858h */ case   48:  		/* stw R6, <#[R11]> */
		/* 82212858h case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212858h case   48:*/		return 0x8221285C;
		  /* 8221285Ch */ case   49:  		/* lwz R6, <#[R31 + 28]> */
		/* 8221285Ch case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221285Ch case   49:*/		return 0x82212860;
		  /* 82212860h */ case   50:  		/* rlwimi R6, R7, 0, 20, 16 */
		/* 82212860h case   50:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R6,regs.R7);
		/* 82212860h case   50:*/		return 0x82212864;
		  /* 82212864h */ case   51:  		/* stw R6, <#[R11]> */
		/* 82212864h case   51:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212864h case   51:*/		return 0x82212868;
		  /* 82212868h */ case   52:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82212868h case   52:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82212868h case   52:*/		return 0x8221286C;
		  /* 8221286Ch */ case   53:  		/* lwz R6, <#[R31 + 28]> */
		/* 8221286Ch case   53:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221286Ch case   53:*/		return 0x82212870;
		  /* 82212870h */ case   54:  		/* nor R6, R6, R6 */
		/* 82212870h case   54:*/		cpu::op::nor<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 82212870h case   54:*/		return 0x82212874;
		  /* 82212874h */ case   55:  		/* rlwimi R6, R7, 0, 29, 27 */
		/* 82212874h case   55:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R6,regs.R7);
		/* 82212874h case   55:*/		return 0x82212878;
		  /* 82212878h */ case   56:  		/* stw R6, <#[R11]> */
		/* 82212878h case   56:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212878h case   56:*/		return 0x8221287C;
		  /* 8221287Ch */ case   57:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221287Ch case   57:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221287Ch case   57:*/		return 0x82212880;
		  /* 82212880h */ case   58:  		/* nor R7, R7, R7 */
		/* 82212880h case   58:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 82212880h case   58:*/		return 0x82212884;
		  /* 82212884h */ case   59:  		/* rlwimi R7, R6, 0, 25, 23 */
		/* 82212884h case   59:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R7,regs.R6);
		/* 82212884h case   59:*/		return 0x82212888;
		  /* 82212888h */ case   60:  		/* stw R7, <#[R11]> */
		/* 82212888h case   60:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82212888h case   60:*/		return 0x8221288C;
		  /* 8221288Ch */ case   61:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 8221288Ch case   61:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 8221288Ch case   61:*/		return 0x82212890;
		  /* 82212890h */ case   62:  		/* lwz R6, <#[R31 + 28]> */
		/* 82212890h case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 82212890h case   62:*/		return 0x82212894;
		  /* 82212894h */ case   63:  		/* nor R6, R6, R6 */
		/* 82212894h case   63:*/		cpu::op::nor<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 82212894h case   63:*/		return 0x82212898;
		  /* 82212898h */ case   64:  		/* rlwimi R6, R7, 0, 21, 19 */
		/* 82212898h case   64:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R6,regs.R7);
		/* 82212898h case   64:*/		return 0x8221289C;
		  /* 8221289Ch */ case   65:  		/* stw R6, <#[R11]> */
		/* 8221289Ch case   65:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221289Ch case   65:*/		return 0x822128A0;
		  /* 822128A0h */ case   66:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 822128A0h case   66:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 822128A0h case   66:*/		return 0x822128A4;
		  /* 822128A4h */ case   67:  		/* lwz R6, <#[R31 + 28]> */
		/* 822128A4h case   67:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 822128A4h case   67:*/		return 0x822128A8;
		  /* 822128A8h */ case   68:  		/* nor R6, R6, R6 */
		/* 822128A8h case   68:*/		cpu::op::nor<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 822128A8h case   68:*/		return 0x822128AC;
		  /* 822128ACh */ case   69:  		/* rlwimi R6, R7, 0, 17, 15 */
		/* 822128ACh case   69:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R6,regs.R7);
		/* 822128ACh case   69:*/		return 0x822128B0;
		  /* 822128B0h */ case   70:  		/* stw R6, <#[R11]> */
		/* 822128B0h case   70:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822128B0h case   70:*/		return 0x822128B4;
		  /* 822128B4h */ case   71:  		/* addi R11, R11, 4 */
		/* 822128B4h case   71:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822128B4h case   71:*/		return 0x822128B8;
		  /* 822128B8h */ case   72:  		/* lwz R7, <#[R31 + 16]> */
		/* 822128B8h case   72:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822128B8h case   72:*/		return 0x822128BC;
		  /* 822128BCh */ case   73:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 822128BCh case   73:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 822128BCh case   73:*/		return 0x822128C0;
		  /* 822128C0h */ case   74:  		/* bc 12, CR0_EQ, 16 */
		/* 822128C0h case   74:*/		if ( regs.CR[0].eq ) { return 0x822128D0;  }
		/* 822128C0h case   74:*/		return 0x822128C4;
		  /* 822128C4h */ case   75:  		/* lwz R7, <#[R31 + 40]> */
		/* 822128C4h case   75:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000028) );
		/* 822128C4h case   75:*/		return 0x822128C8;
		  /* 822128C8h */ case   76:  		/* stw R7, <#[R11]> */
		/* 822128C8h case   76:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822128C8h case   76:*/		return 0x822128CC;
		  /* 822128CCh */ case   77:  		/* addi R11, R11, 4 */
		/* 822128CCh case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822128CCh case   77:*/		return 0x822128D0;
	}
	return 0x822128D0;
} // Block from 82212798h-822128D0h (78 instructions)

//////////////////////////////////////////////////////
// Block at 822128D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822128D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822128D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822128D0);
		  /* 822128D0h */ case    0:  		/* li R7, 64 */
		/* 822128D0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 822128D0h case    0:*/		return 0x822128D4;
		  /* 822128D4h */ case    1:  		/* sth R7, <#[R11 + 2]> */
		/* 822128D4h case    1:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822128D4h case    1:*/		return 0x822128D8;
		  /* 822128D8h */ case    2:  		/* lwz R7, <#[R11]> */
		/* 822128D8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822128D8h case    2:*/		return 0x822128DC;
		  /* 822128DCh */ case    3:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 822128DCh case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 822128DCh case    3:*/		return 0x822128E0;
		  /* 822128E0h */ case    4:  		/* stw R7, <#[R11]> */
		/* 822128E0h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822128E0h case    4:*/		return 0x822128E4;
		  /* 822128E4h */ case    5:  		/* addi R11, R11, 4 */
		/* 822128E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822128E4h case    5:*/		return 0x822128E8;
		  /* 822128E8h */ case    6:  		/* lwz R7, <#[R31 + 4]> */
		/* 822128E8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822128E8h case    6:*/		return 0x822128EC;
		  /* 822128ECh */ case    7:  		/* sth R7, <#[R11 + 2]> */
		/* 822128ECh case    7:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822128ECh case    7:*/		return 0x822128F0;
		  /* 822128F0h */ case    8:  		/* lwz R7, <#[R11]> */
		/* 822128F0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822128F0h case    8:*/		return 0x822128F4;
		  /* 822128F4h */ case    9:  		/* lwz R6, <#[R31 + 4]> */
		/* 822128F4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 822128F4h case    9:*/		return 0x822128F8;
		  /* 822128F8h */ case   10:  		/* rlwimi R6, R7, 0, 16, 9 */
		/* 822128F8h case   10:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R7);
		/* 822128F8h case   10:*/		return 0x822128FC;
		  /* 822128FCh */ case   11:  		/* stw R6, <#[R11]> */
		/* 822128FCh case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822128FCh case   11:*/		return 0x82212900;
		  /* 82212900h */ case   12:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212900h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212900h case   12:*/		return 0x82212904;
		  /* 82212904h */ case   13:  		/* lwz R7, <#[R31 + 4]> */
		/* 82212904h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82212904h case   13:*/		return 0x82212908;
		  /* 82212908h */ case   14:  		/* rlwimi R7, R6, 0, 9, 7 */
		/* 82212908h case   14:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R6);
		/* 82212908h case   14:*/		return 0x8221290C;
		  /* 8221290Ch */ case   15:  		/* stw R7, <#[R11]> */
		/* 8221290Ch case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221290Ch case   15:*/		return 0x82212910;
		  /* 82212910h */ case   16:  		/* lwz R7, <#[R31 + 4]> */
		/* 82212910h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82212910h case   16:*/		return 0x82212914;
		  /* 82212914h */ case   17:  		/* lwz R6, <#[R11]> */
		/* 82212914h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212914h case   17:*/		return 0x82212918;
		  /* 82212918h */ case   18:  		/* rlwimi R7, R6, 0, 10, 8 */
		/* 82212918h case   18:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R7,regs.R6);
		/* 82212918h case   18:*/		return 0x8221291C;
		  /* 8221291Ch */ case   19:  		/* stw R7, <#[R11]> */
		/* 8221291Ch case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221291Ch case   19:*/		return 0x82212920;
		  /* 82212920h */ case   20:  		/* addi R11, R11, 4 */
		/* 82212920h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212920h case   20:*/		return 0x82212924;
		  /* 82212924h */ case   21:  		/* lwz R7, <#[R31 + 4]> */
		/* 82212924h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82212924h case   21:*/		return 0x82212928;
		  /* 82212928h */ case   22:  		/* rlwinm. R7, R7, 0, 9, 9 */
		/* 82212928h case   22:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R7,regs.R7);
		/* 82212928h case   22:*/		return 0x8221292C;
		  /* 8221292Ch */ case   23:  		/* bc 12, CR0_EQ, 16 */
		/* 8221292Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x8221293C;  }
		/* 8221292Ch case   23:*/		return 0x82212930;
		  /* 82212930h */ case   24:  		/* lwz R7, <#[R31 + 8]> */
		/* 82212930h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 82212930h case   24:*/		return 0x82212934;
		  /* 82212934h */ case   25:  		/* stw R7, <#[R11]> */
		/* 82212934h case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82212934h case   25:*/		return 0x82212938;
		  /* 82212938h */ case   26:  		/* addi R11, R11, 4 */
		/* 82212938h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212938h case   26:*/		return 0x8221293C;
	}
	return 0x8221293C;
} // Block from 822128D0h-8221293Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8221293Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221293C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221293C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221293C);
		  /* 8221293Ch */ case    0:  		/* lwz R7, <#[R31 + 4]> */
		/* 8221293Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 8221293Ch case    0:*/		return 0x82212940;
		  /* 82212940h */ case    1:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 82212940h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 82212940h case    1:*/		return 0x82212944;
		  /* 82212944h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212944h case    2:*/		if ( regs.CR[0].eq ) { return 0x82212954;  }
		/* 82212944h case    2:*/		return 0x82212948;
		  /* 82212948h */ case    3:  		/* lwz R7, <#[R31 + 12]> */
		/* 82212948h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82212948h case    3:*/		return 0x8221294C;
		  /* 8221294Ch */ case    4:  		/* stw R7, <#[R11]> */
		/* 8221294Ch case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221294Ch case    4:*/		return 0x82212950;
		  /* 82212950h */ case    5:  		/* addi R11, R11, 4 */
		/* 82212950h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212950h case    5:*/		return 0x82212954;
	}
	return 0x82212954;
} // Block from 8221293Ch-82212954h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212954);
		  /* 82212954h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82212954h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212954h case    0:*/		return 0x82212958;
		  /* 82212958h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 82212958h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212958h case    1:*/		return 0x8221295C;
		  /* 8221295Ch */ case    2:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 8221295Ch case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 8221295Ch case    2:*/		return 0x82212960;
		  /* 82212960h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82212960h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212960h case    3:*/		return 0x82212964;
		  /* 82212964h */ case    4:  		/* lwz R10, <#[R31 + 24]> */
		/* 82212964h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82212964h case    4:*/		return 0x82212968;
		  /* 82212968h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 82212968h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212968h case    5:*/		return 0x8221296C;
		  /* 8221296Ch */ case    6:  		/* lwz R10, <#[R31 + 24]> */
		/* 8221296Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8221296Ch case    6:*/		return 0x82212970;
		  /* 82212970h */ case    7:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82212970h case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82212970h case    7:*/		return 0x82212974;
		  /* 82212974h */ case    8:  		/* addi R11, R11, 4 */
		/* 82212974h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212974h case    8:*/		return 0x82212978;
		  /* 82212978h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 82212978h case    9:*/		if ( regs.CR[0].eq ) { return 0x82212988;  }
		/* 82212978h case    9:*/		return 0x8221297C;
		  /* 8221297Ch */ case   10:  		/* lwz R10, <#[R31 + 36]> */
		/* 8221297Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 8221297Ch case   10:*/		return 0x82212980;
		  /* 82212980h */ case   11:  		/* stw R10, <#[R11]> */
		/* 82212980h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212980h case   11:*/		return 0x82212984;
		  /* 82212984h */ case   12:  		/* addi R11, R11, 4 */
		/* 82212984h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212984h case   12:*/		return 0x82212988;
	}
	return 0x82212988;
} // Block from 82212954h-82212988h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82212988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212988);
		  /* 82212988h */ case    0:  		/* lwz R10, <#[R31 + 24]> */
		/* 82212988h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82212988h case    0:*/		return 0x8221298C;
		  /* 8221298Ch */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 8221298Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 8221298Ch case    1:*/		return 0x82212990;
		  /* 82212990h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212990h case    2:*/		if ( regs.CR[0].eq ) { return 0x822129A0;  }
		/* 82212990h case    2:*/		return 0x82212994;
		  /* 82212994h */ case    3:  		/* lwz R10, <#[R31 + 48]> */
		/* 82212994h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82212994h case    3:*/		return 0x82212998;
		  /* 82212998h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212998h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212998h case    4:*/		return 0x8221299C;
		  /* 8221299Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221299Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221299Ch case    5:*/		return 0x822129A0;
	}
	return 0x822129A0;
} // Block from 82212988h-822129A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822129A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822129A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822129A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822129A0);
		  /* 822129A0h */ case    0:  		/* sth R8, <#[R11 + 2]> */
		/* 822129A0h case    0:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822129A0h case    0:*/		return 0x822129A4;
		  /* 822129A4h */ case    1:  		/* addi R3, R11, 4 */
		/* 822129A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822129A4h case    1:*/		return 0x822129A8;
		  /* 822129A8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 822129A8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822129A8h case    2:*/		return 0x822129AC;
		  /* 822129ACh */ case    3:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 822129ACh case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 822129ACh case    3:*/		return 0x822129B0;
		  /* 822129B0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822129B0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822129B0h case    4:*/		return 0x822129B4;
		  /* 822129B4h */ case    5:  		/* addi R1, R1, 128 */
		/* 822129B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 822129B4h case    5:*/		return 0x822129B8;
		  /* 822129B8h */ case    6:  		/* b -1578768 */
		/* 822129B8h case    6:*/		return 0x820912A8;
		/* 822129B8h case    6:*/		return 0x822129BC;
		  /* 822129BCh */ case    7:  		/* nop */
		/* 822129BCh case    7:*/		cpu::op::nop();
		/* 822129BCh case    7:*/		return 0x822129C0;
	}
	return 0x822129C0;
} // Block from 822129A0h-822129C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822129C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822129C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822129C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822129C0);
		  /* 822129C0h */ case    0:  		/* mfspr R12, LR */
		/* 822129C0h case    0:*/		regs.R12 = regs.LR;
		/* 822129C0h case    0:*/		return 0x822129C4;
		  /* 822129C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822129C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822129C4h case    1:*/		return 0x822129C8;
		  /* 822129C8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 822129C8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822129C8h case    2:*/		return 0x822129CC;
		  /* 822129CCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 822129CCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 822129CCh case    3:*/		return 0x822129D0;
		  /* 822129D0h */ case    4:  		/* lhz R11, <#[R3]> */
		/* 822129D0h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822129D0h case    4:*/		return 0x822129D4;
		  /* 822129D4h */ case    5:  		/* mr R31, R4 */
		/* 822129D4h case    5:*/		regs.R31 = regs.R4;
		/* 822129D4h case    5:*/		return 0x822129D8;
		  /* 822129D8h */ case    6:  		/* li R7, 4 */
		/* 822129D8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 822129D8h case    6:*/		return 0x822129DC;
		  /* 822129DCh */ case    7:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 822129DCh case    7:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 822129DCh case    7:*/		return 0x822129E0;
		  /* 822129E0h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 822129E0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822129E0h case    8:*/		return 0x822129E4;
		  /* 822129E4h */ case    9:  		/* bc 12, CR6_LT, 588 */
		/* 822129E4h case    9:*/		if ( regs.CR[6].lt ) { return 0x82212C30;  }
		/* 822129E4h case    9:*/		return 0x822129E8;
		  /* 822129E8h */ case   10:  		/* bc 12, CR6_EQ, 580 */
		/* 822129E8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82212C2C;  }
		/* 822129E8h case   10:*/		return 0x822129EC;
		  /* 822129ECh */ case   11:  		/* cmplwi CR6, R11, 3 */
		/* 822129ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 822129ECh case   11:*/		return 0x822129F0;
		  /* 822129F0h */ case   12:  		/* bc 12, CR6_LT, 64 */
		/* 822129F0h case   12:*/		if ( regs.CR[6].lt ) { return 0x82212A30;  }
		/* 822129F0h case   12:*/		return 0x822129F4;
		  /* 822129F4h */ case   13:  		/* bc 12, CR6_EQ, 56 */
		/* 822129F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82212A2C;  }
		/* 822129F4h case   13:*/		return 0x822129F8;
		  /* 822129F8h */ case   14:  		/* cmplwi CR6, R11, 5 */
		/* 822129F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 822129F8h case   14:*/		return 0x822129FC;
		  /* 822129FCh */ case   15:  		/* bc 12, CR6_LT, 44 */
		/* 822129FCh case   15:*/		if ( regs.CR[6].lt ) { return 0x82212A28;  }
		/* 822129FCh case   15:*/		return 0x82212A00;
		  /* 82212A00h */ case   16:  		/* lis R11, -32252 */
		/* 82212A00h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82212A00h case   16:*/		return 0x82212A04;
		  /* 82212A04h */ case   17:  		/* lis R10, -32252 */
		/* 82212A04h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82212A04h case   17:*/		return 0x82212A08;
		  /* 82212A08h */ case   18:  		/* lis R9, -32253 */
		/* 82212A08h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82212A08h case   18:*/		return 0x82212A0C;
		  /* 82212A0Ch */ case   19:  		/* addi R6, R11, -7312 */
		/* 82212A0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 82212A0Ch case   19:*/		return 0x82212A10;
		  /* 82212A10h */ case   20:  		/* addi R5, R10, -25364 */
		/* 82212A10h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 82212A10h case   20:*/		return 0x82212A14;
		  /* 82212A14h */ case   21:  		/* addi R4, R9, 27460 */
		/* 82212A14h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82212A14h case   21:*/		return 0x82212A18;
		  /* 82212A18h */ case   22:  		/* li R7, 5708 */
		/* 82212A18h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x164C);
		/* 82212A18h case   22:*/		return 0x82212A1C;
		  /* 82212A1Ch */ case   23:  		/* li R3, 0 */
		/* 82212A1Ch case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82212A1Ch case   23:*/		return 0x82212A20;
		  /* 82212A20h */ case   24:  		/* bl -765464 */
		/* 82212A20h case   24:*/		regs.LR = 0x82212A24; return 0x82157C08;
		/* 82212A20h case   24:*/		return 0x82212A24;
		  /* 82212A24h */ case   25:  		/* b 1028 */
		/* 82212A24h case   25:*/		return 0x82212E28;
		/* 82212A24h case   25:*/		return 0x82212A28;
	}
	return 0x82212A28;
} // Block from 822129C0h-82212A28h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82212A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212A28);
		  /* 82212A28h */ case    0:  		/* li R7, 3 */
		/* 82212A28h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82212A28h case    0:*/		return 0x82212A2C;
	}
	return 0x82212A2C;
} // Block from 82212A28h-82212A2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212A2C);
		  /* 82212A2Ch */ case    0:  		/* addi R7, R7, -1 */
		/* 82212A2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 82212A2Ch case    0:*/		return 0x82212A30;
	}
	return 0x82212A30;
} // Block from 82212A2Ch-82212A30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212A30);
		  /* 82212A30h */ case    0:  		/* li R8, 0 */
		/* 82212A30h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82212A30h case    0:*/		return 0x82212A34;
		  /* 82212A34h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 82212A34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82212A34h case    1:*/		return 0x82212A38;
		  /* 82212A38h */ case    2:  		/* bc 12, CR6_EQ, 1008 */
		/* 82212A38h case    2:*/		if ( regs.CR[6].eq ) { return 0x82212E28;  }
		/* 82212A38h case    2:*/		return 0x82212A3C;
		  /* 82212A3Ch */ case    3:  		/* li R10, 34 */
		/* 82212A3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82212A3Ch case    3:*/		return 0x82212A40;
		  /* 82212A40h */ case    4:  		/* addi R11, R31, 4 */
		/* 82212A40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82212A40h case    4:*/		return 0x82212A44;
		  /* 82212A44h */ case    5:  		/* sth R10, <#[R31 + 2]> */
		/* 82212A44h case    5:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82212A44h case    5:*/		return 0x82212A48;
		  /* 82212A48h */ case    6:  		/* cmplwi CR6, R8, 0 */
		/* 82212A48h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82212A48h case    6:*/		return 0x82212A4C;
		  /* 82212A4Ch */ case    7:  		/* lwz R10, <#[R31]> */
		/* 82212A4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82212A4Ch case    7:*/		return 0x82212A50;
		  /* 82212A50h */ case    8:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82212A50h case    8:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82212A50h case    8:*/		return 0x82212A54;
		  /* 82212A54h */ case    9:  		/* stw R10, <#[R31]> */
		/* 82212A54h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82212A54h case    9:*/		return 0x82212A58;
		  /* 82212A58h */ case   10:  		/* lwz R10, <#[R3 + 4]> */
		/* 82212A58h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82212A58h case   10:*/		return 0x82212A5C;
		  /* 82212A5Ch */ case   11:  		/* sth R10, <#[R31 + 6]> */
		/* 82212A5Ch case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82212A5Ch case   11:*/		return 0x82212A60;
		  /* 82212A60h */ case   12:  		/* lwz R9, <#[R3 + 4]> */
		/* 82212A60h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 82212A60h case   12:*/		return 0x82212A64;
		  /* 82212A64h */ case   13:  		/* lwz R10, <#[R31 + 4]> */
		/* 82212A64h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212A64h case   13:*/		return 0x82212A68;
		  /* 82212A68h */ case   14:  		/* rlwimi R10, R9, 0, 10, 15 */
		/* 82212A68h case   14:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R10,regs.R9);
		/* 82212A68h case   14:*/		return 0x82212A6C;
		  /* 82212A6Ch */ case   15:  		/* stw R10, <#[R31 + 4]> */
		/* 82212A6Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212A6Ch case   15:*/		return 0x82212A70;
		  /* 82212A70h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82212A70h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82212A70h case   16:*/		return 0x82212A74;
		  /* 82212A74h */ case   17:  		/* lwz R9, <#[R3 + 4]> */
		/* 82212A74h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 82212A74h case   17:*/		return 0x82212A78;
		  /* 82212A78h */ case   18:  		/* rlwimi R10, R9, 0, 8, 8 */
		/* 82212A78h case   18:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R9);
		/* 82212A78h case   18:*/		return 0x82212A7C;
		  /* 82212A7Ch */ case   19:  		/* oris R10, R10, 64 */
		/* 82212A7Ch case   19:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 82212A7Ch case   19:*/		return 0x82212A80;
		  /* 82212A80h */ case   20:  		/* stw R10, <#[R31 + 4]> */
		/* 82212A80h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212A80h case   20:*/		return 0x82212A84;
		  /* 82212A84h */ case   21:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82212A84h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212A84h case   21:*/		return 0x82212A88;
		  /* 82212A88h */ case   22:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212A88h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212A88h case   22:*/		return 0x82212A8C;
		  /* 82212A8Ch */ case   23:  		/* rlwimi R9, R10, 0, 24, 22 */
		/* 82212A8Ch case   23:*/		cpu::op::rlwimi<0,0,24,22>(regs,&regs.R9,regs.R10);
		/* 82212A8Ch case   23:*/		return 0x82212A90;
		  /* 82212A90h */ case   24:  		/* stw R9, <#[R11]> */
		/* 82212A90h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212A90h case   24:*/		return 0x82212A94;
		  /* 82212A94h */ case   25:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212A94h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212A94h case   25:*/		return 0x82212A98;
		  /* 82212A98h */ case   26:  		/* lwz R10, <#[R3 + 8]> */
		/* 82212A98h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82212A98h case   26:*/		return 0x82212A9C;
		  /* 82212A9Ch */ case   27:  		/* rlwimi R10, R9, 0, 23, 18 */
		/* 82212A9Ch case   27:*/		cpu::op::rlwimi<0,0,23,18>(regs,&regs.R10,regs.R9);
		/* 82212A9Ch case   27:*/		return 0x82212AA0;
		  /* 82212AA0h */ case   28:  		/* stw R10, <#[R11]> */
		/* 82212AA0h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212AA0h case   28:*/		return 0x82212AA4;
		  /* 82212AA4h */ case   29:  		/* bc 4, CR6_EQ, 16 */
		/* 82212AA4h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82212AB4;  }
		/* 82212AA4h case   29:*/		return 0x82212AA8;
		  /* 82212AA8h */ case   30:  		/* lwz R10, <#[R3 + 8]> */
		/* 82212AA8h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82212AA8h case   30:*/		return 0x82212AAC;
		  /* 82212AACh */ case   31:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 82212AACh case   31:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 82212AACh case   31:*/		return 0x82212AB0;
		  /* 82212AB0h */ case   32:  		/* b 8 */
		/* 82212AB0h case   32:*/		return 0x82212AB8;
		/* 82212AB0h case   32:*/		return 0x82212AB4;
	}
	return 0x82212AB4;
} // Block from 82212A30h-82212AB4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82212AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212AB4);
		  /* 82212AB4h */ case    0:  		/* li R10, 0 */
		/* 82212AB4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82212AB4h case    0:*/		return 0x82212AB8;
	}
	return 0x82212AB8;
} // Block from 82212AB4h-82212AB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212AB8);
		  /* 82212AB8h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 82212AB8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212AB8h case    0:*/		return 0x82212ABC;
		  /* 82212ABCh */ case    1:  		/* cmplwi CR6, R8, 1 */
		/* 82212ABCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82212ABCh case    1:*/		return 0x82212AC0;
		  /* 82212AC0h */ case    2:  		/* rlwimi R10, R9, 0, 0, 29 */
		/* 82212AC0h case    2:*/		cpu::op::rlwimi<0,0,0,29>(regs,&regs.R10,regs.R9);
		/* 82212AC0h case    2:*/		return 0x82212AC4;
		  /* 82212AC4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82212AC4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212AC4h case    3:*/		return 0x82212AC8;
		  /* 82212AC8h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 82212AC8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82212AD8;  }
		/* 82212AC8h case    4:*/		return 0x82212ACC;
		  /* 82212ACCh */ case    5:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212ACCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212ACCh case    5:*/		return 0x82212AD0;
		  /* 82212AD0h */ case    6:  		/* rlwinm R9, R9, 30, 30, 31 */
		/* 82212AD0h case    6:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R9,regs.R9);
		/* 82212AD0h case    6:*/		return 0x82212AD4;
		  /* 82212AD4h */ case    7:  		/* b 8 */
		/* 82212AD4h case    7:*/		return 0x82212ADC;
		/* 82212AD4h case    7:*/		return 0x82212AD8;
	}
	return 0x82212AD8;
} // Block from 82212AB8h-82212AD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82212AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212AD8);
		  /* 82212AD8h */ case    0:  		/* li R9, 0 */
		/* 82212AD8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212AD8h case    0:*/		return 0x82212ADC;
	}
	return 0x82212ADC;
} // Block from 82212AD8h-82212ADCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212ADC);
		  /* 82212ADCh */ case    0:  		/* rlwimi R10, R9, 2, 28, 29 */
		/* 82212ADCh case    0:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R10,regs.R9);
		/* 82212ADCh case    0:*/		return 0x82212AE0;
		  /* 82212AE0h */ case    1:  		/* cmplwi CR6, R8, 2 */
		/* 82212AE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 82212AE0h case    1:*/		return 0x82212AE4;
		  /* 82212AE4h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82212AE4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212AE4h case    2:*/		return 0x82212AE8;
		  /* 82212AE8h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82212AE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82212AF8;  }
		/* 82212AE8h case    3:*/		return 0x82212AEC;
		  /* 82212AECh */ case    4:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212AECh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212AECh case    4:*/		return 0x82212AF0;
		  /* 82212AF0h */ case    5:  		/* rlwinm R9, R9, 28, 30, 31 */
		/* 82212AF0h case    5:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R9,regs.R9);
		/* 82212AF0h case    5:*/		return 0x82212AF4;
		  /* 82212AF4h */ case    6:  		/* b 8 */
		/* 82212AF4h case    6:*/		return 0x82212AFC;
		/* 82212AF4h case    6:*/		return 0x82212AF8;
	}
	return 0x82212AF8;
} // Block from 82212ADCh-82212AF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82212AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212AF8);
		  /* 82212AF8h */ case    0:  		/* li R9, 0 */
		/* 82212AF8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212AF8h case    0:*/		return 0x82212AFC;
	}
	return 0x82212AFC;
} // Block from 82212AF8h-82212AFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212AFC);
		  /* 82212AFCh */ case    0:  		/* rlwimi R10, R9, 4, 26, 27 */
		/* 82212AFCh case    0:*/		cpu::op::rlwimi<0,4,26,27>(regs,&regs.R10,regs.R9);
		/* 82212AFCh case    0:*/		return 0x82212B00;
		  /* 82212B00h */ case    1:  		/* cmplwi CR6, R8, 3 */
		/* 82212B00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000003);
		/* 82212B00h case    1:*/		return 0x82212B04;
		  /* 82212B04h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82212B04h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B04h case    2:*/		return 0x82212B08;
		  /* 82212B08h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82212B08h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82212B18;  }
		/* 82212B08h case    3:*/		return 0x82212B0C;
		  /* 82212B0Ch */ case    4:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212B0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212B0Ch case    4:*/		return 0x82212B10;
		  /* 82212B10h */ case    5:  		/* rlwinm R9, R9, 26, 30, 31 */
		/* 82212B10h case    5:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R9,regs.R9);
		/* 82212B10h case    5:*/		return 0x82212B14;
		  /* 82212B14h */ case    6:  		/* b 8 */
		/* 82212B14h case    6:*/		return 0x82212B1C;
		/* 82212B14h case    6:*/		return 0x82212B18;
	}
	return 0x82212B18;
} // Block from 82212AFCh-82212B18h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82212B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212B18);
		  /* 82212B18h */ case    0:  		/* li R9, 0 */
		/* 82212B18h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212B18h case    0:*/		return 0x82212B1C;
	}
	return 0x82212B1C;
} // Block from 82212B18h-82212B1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212B1C);
		  /* 82212B1Ch */ case    0:  		/* rlwimi R10, R9, 6, 24, 25 */
		/* 82212B1Ch case    0:*/		cpu::op::rlwimi<0,6,24,25>(regs,&regs.R10,regs.R9);
		/* 82212B1Ch case    0:*/		return 0x82212B20;
		  /* 82212B20h */ case    1:  		/* stw R10, <#[R11]> */
		/* 82212B20h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B20h case    1:*/		return 0x82212B24;
		  /* 82212B24h */ case    2:  		/* addi R11, R11, 4 */
		/* 82212B24h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212B24h case    2:*/		return 0x82212B28;
		  /* 82212B28h */ case    3:  		/* lwz R10, <#[R3 + 4]> */
		/* 82212B28h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82212B28h case    3:*/		return 0x82212B2C;
		  /* 82212B2Ch */ case    4:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212B2Ch case    4:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212B2Ch case    4:*/		return 0x82212B30;
		  /* 82212B30h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82212B30h case    5:*/		if ( regs.CR[0].eq ) { return 0x82212B40;  }
		/* 82212B30h case    5:*/		return 0x82212B34;
		  /* 82212B34h */ case    6:  		/* lwz R10, <#[R3 + 12]> */
		/* 82212B34h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82212B34h case    6:*/		return 0x82212B38;
		  /* 82212B38h */ case    7:  		/* stw R10, <#[R11]> */
		/* 82212B38h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B38h case    7:*/		return 0x82212B3C;
		  /* 82212B3Ch */ case    8:  		/* addi R11, R11, 4 */
		/* 82212B3Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212B3Ch case    8:*/		return 0x82212B40;
	}
	return 0x82212B40;
} // Block from 82212B1Ch-82212B40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82212B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212B40);
		  /* 82212B40h */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212B40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B40h case    0:*/		return 0x82212B44;
		  /* 82212B44h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82212B44h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212B44h case    1:*/		return 0x82212B48;
		  /* 82212B48h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82212B48h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B48h case    2:*/		return 0x82212B4C;
		  /* 82212B4Ch */ case    3:  		/* lwz R9, <#[R3 + 16]> */
		/* 82212B4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B4Ch case    3:*/		return 0x82212B50;
		  /* 82212B50h */ case    4:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82212B50h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82212B50h case    4:*/		return 0x82212B54;
		  /* 82212B54h */ case    5:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212B54h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212B54h case    5:*/		return 0x82212B58;
		  /* 82212B58h */ case    6:  		/* stw R9, <#[R11]> */
		/* 82212B58h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B58h case    6:*/		return 0x82212B5C;
		  /* 82212B5Ch */ case    7:  		/* lwz R9, <#[R3 + 16]> */
		/* 82212B5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B5Ch case    7:*/		return 0x82212B60;
		  /* 82212B60h */ case    8:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82212B60h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82212B60h case    8:*/		return 0x82212B64;
		  /* 82212B64h */ case    9:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212B64h case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212B64h case    9:*/		return 0x82212B68;
		  /* 82212B68h */ case   10:  		/* stw R9, <#[R11]> */
		/* 82212B68h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B68h case   10:*/		return 0x82212B6C;
		  /* 82212B6Ch */ case   11:  		/* lwz R9, <#[R3 + 16]> */
		/* 82212B6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B6Ch case   11:*/		return 0x82212B70;
		  /* 82212B70h */ case   12:  		/* rlwimi R9, R10, 0, 10, 8 */
		/* 82212B70h case   12:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R9,regs.R10);
		/* 82212B70h case   12:*/		return 0x82212B74;
		  /* 82212B74h */ case   13:  		/* stw R9, <#[R11]> */
		/* 82212B74h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B74h case   13:*/		return 0x82212B78;
		  /* 82212B78h */ case   14:  		/* addi R11, R11, 4 */
		/* 82212B78h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212B78h case   14:*/		return 0x82212B7C;
		  /* 82212B7Ch */ case   15:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212B7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B7Ch case   15:*/		return 0x82212B80;
		  /* 82212B80h */ case   16:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82212B80h case   16:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82212B80h case   16:*/		return 0x82212B84;
		  /* 82212B84h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82212B84h case   17:*/		if ( regs.CR[0].eq ) { return 0x82212B94;  }
		/* 82212B84h case   17:*/		return 0x82212B88;
		  /* 82212B88h */ case   18:  		/* lwz R10, <#[R3 + 28]> */
		/* 82212B88h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 82212B88h case   18:*/		return 0x82212B8C;
		  /* 82212B8Ch */ case   19:  		/* stw R10, <#[R11]> */
		/* 82212B8Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212B8Ch case   19:*/		return 0x82212B90;
		  /* 82212B90h */ case   20:  		/* addi R11, R11, 4 */
		/* 82212B90h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212B90h case   20:*/		return 0x82212B94;
	}
	return 0x82212B94;
} // Block from 82212B40h-82212B94h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82212B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212B94);
		  /* 82212B94h */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212B94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212B94h case    0:*/		return 0x82212B98;
		  /* 82212B98h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212B98h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212B98h case    1:*/		return 0x82212B9C;
		  /* 82212B9Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212B9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82212BAC;  }
		/* 82212B9Ch case    2:*/		return 0x82212BA0;
		  /* 82212BA0h */ case    3:  		/* lwz R10, <#[R3 + 40]> */
		/* 82212BA0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82212BA0h case    3:*/		return 0x82212BA4;
		  /* 82212BA4h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212BA4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BA4h case    4:*/		return 0x82212BA8;
		  /* 82212BA8h */ case    5:  		/* addi R11, R11, 4 */
		/* 82212BA8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212BA8h case    5:*/		return 0x82212BAC;
	}
	return 0x82212BAC;
} // Block from 82212B94h-82212BACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212BAC);
		  /* 82212BACh */ case    0:  		/* lwz R10, <#[R3 + 20]> */
		/* 82212BACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 82212BACh case    0:*/		return 0x82212BB0;
		  /* 82212BB0h */ case    1:  		/* addi R31, R11, 4 */
		/* 82212BB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82212BB0h case    1:*/		return 0x82212BB4;
		  /* 82212BB4h */ case    2:  		/* add R10, R10, R8 */
		/* 82212BB4h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82212BB4h case    2:*/		return 0x82212BB8;
		  /* 82212BB8h */ case    3:  		/* sth R10, <#[R11 + 2]> */
		/* 82212BB8h case    3:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212BB8h case    3:*/		return 0x82212BBC;
		  /* 82212BBCh */ case    4:  		/* lwz R9, <#[R3 + 20]> */
		/* 82212BBCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82212BBCh case    4:*/		return 0x82212BC0;
		  /* 82212BC0h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82212BC0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BC0h case    5:*/		return 0x82212BC4;
		  /* 82212BC4h */ case    6:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82212BC4h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82212BC4h case    6:*/		return 0x82212BC8;
		  /* 82212BC8h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82212BC8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BC8h case    7:*/		return 0x82212BCC;
		  /* 82212BCCh */ case    8:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212BCCh case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212BCCh case    8:*/		return 0x82212BD0;
		  /* 82212BD0h */ case    9:  		/* lwz R10, <#[R3 + 20]> */
		/* 82212BD0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 82212BD0h case    9:*/		return 0x82212BD4;
		  /* 82212BD4h */ case   10:  		/* rlwimi R10, R9, 0, 9, 7 */
		/* 82212BD4h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R10,regs.R9);
		/* 82212BD4h case   10:*/		return 0x82212BD8;
		  /* 82212BD8h */ case   11:  		/* stw R10, <#[R11]> */
		/* 82212BD8h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BD8h case   11:*/		return 0x82212BDC;
		  /* 82212BDCh */ case   12:  		/* lwz R10, <#[R3 + 20]> */
		/* 82212BDCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 82212BDCh case   12:*/		return 0x82212BE0;
		  /* 82212BE0h */ case   13:  		/* lwz R9, <#[R11]> */
		/* 82212BE0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BE0h case   13:*/		return 0x82212BE4;
		  /* 82212BE4h */ case   14:  		/* rlwimi R10, R9, 0, 10, 8 */
		/* 82212BE4h case   14:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 82212BE4h case   14:*/		return 0x82212BE8;
		  /* 82212BE8h */ case   15:  		/* stw R10, <#[R11]> */
		/* 82212BE8h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212BE8h case   15:*/		return 0x82212BEC;
		  /* 82212BECh */ case   16:  		/* lwz R11, <#[R3 + 20]> */
		/* 82212BECh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82212BECh case   16:*/		return 0x82212BF0;
		  /* 82212BF0h */ case   17:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82212BF0h case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82212BF0h case   17:*/		return 0x82212BF4;
		  /* 82212BF4h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 82212BF4h case   18:*/		if ( regs.CR[0].eq ) { return 0x82212C04;  }
		/* 82212BF4h case   18:*/		return 0x82212BF8;
		  /* 82212BF8h */ case   19:  		/* lwz R11, <#[R3 + 32]> */
		/* 82212BF8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82212BF8h case   19:*/		return 0x82212BFC;
		  /* 82212BFCh */ case   20:  		/* stw R11, <#[R31]> */
		/* 82212BFCh case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82212BFCh case   20:*/		return 0x82212C00;
		  /* 82212C00h */ case   21:  		/* addi R31, R31, 4 */
		/* 82212C00h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82212C00h case   21:*/		return 0x82212C04;
	}
	return 0x82212C04;
} // Block from 82212BACh-82212C04h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82212C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212C04);
		  /* 82212C04h */ case    0:  		/* lwz R11, <#[R3 + 20]> */
		/* 82212C04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82212C04h case    0:*/		return 0x82212C08;
		  /* 82212C08h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82212C08h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82212C08h case    1:*/		return 0x82212C0C;
		  /* 82212C0Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212C0Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82212C1C;  }
		/* 82212C0Ch case    2:*/		return 0x82212C10;
		  /* 82212C10h */ case    3:  		/* lwz R11, <#[R3 + 44]> */
		/* 82212C10h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 82212C10h case    3:*/		return 0x82212C14;
		  /* 82212C14h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82212C14h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82212C14h case    4:*/		return 0x82212C18;
		  /* 82212C18h */ case    5:  		/* addi R31, R31, 4 */
		/* 82212C18h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82212C18h case    5:*/		return 0x82212C1C;
	}
	return 0x82212C1C;
} // Block from 82212C04h-82212C1Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212C1C);
		  /* 82212C1Ch */ case    0:  		/* addi R8, R8, 1 */
		/* 82212C1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82212C1Ch case    0:*/		return 0x82212C20;
		  /* 82212C20h */ case    1:  		/* cmplw CR6, R8, R7 */
		/* 82212C20h case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 82212C20h case    1:*/		return 0x82212C24;
		  /* 82212C24h */ case    2:  		/* bc 12, CR6_LT, -488 */
		/* 82212C24h case    2:*/		if ( regs.CR[6].lt ) { return 0x82212A3C;  }
		/* 82212C24h case    2:*/		return 0x82212C28;
		  /* 82212C28h */ case    3:  		/* b 512 */
		/* 82212C28h case    3:*/		return 0x82212E28;
		/* 82212C28h case    3:*/		return 0x82212C2C;
	}
	return 0x82212C2C;
} // Block from 82212C1Ch-82212C2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82212C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212C2C);
		  /* 82212C2Ch */ case    0:  		/* li R7, 3 */
		/* 82212C2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82212C2Ch case    0:*/		return 0x82212C30;
	}
	return 0x82212C30;
} // Block from 82212C2Ch-82212C30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212C30);
		  /* 82212C30h */ case    0:  		/* li R8, 0 */
		/* 82212C30h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82212C30h case    0:*/		return 0x82212C34;
		  /* 82212C34h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 82212C34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82212C34h case    1:*/		return 0x82212C38;
		  /* 82212C38h */ case    2:  		/* bc 12, CR6_EQ, 496 */
		/* 82212C38h case    2:*/		if ( regs.CR[6].eq ) { return 0x82212E28;  }
		/* 82212C38h case    2:*/		return 0x82212C3C;
		  /* 82212C3Ch */ case    3:  		/* li R10, 35 */
		/* 82212C3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x23);
		/* 82212C3Ch case    3:*/		return 0x82212C40;
		  /* 82212C40h */ case    4:  		/* addi R11, R31, 4 */
		/* 82212C40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82212C40h case    4:*/		return 0x82212C44;
		  /* 82212C44h */ case    5:  		/* sth R10, <#[R31 + 2]> */
		/* 82212C44h case    5:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82212C44h case    5:*/		return 0x82212C48;
		  /* 82212C48h */ case    6:  		/* cmplwi CR6, R8, 0 */
		/* 82212C48h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82212C48h case    6:*/		return 0x82212C4C;
		  /* 82212C4Ch */ case    7:  		/* lwz R10, <#[R31]> */
		/* 82212C4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82212C4Ch case    7:*/		return 0x82212C50;
		  /* 82212C50h */ case    8:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82212C50h case    8:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82212C50h case    8:*/		return 0x82212C54;
		  /* 82212C54h */ case    9:  		/* stw R10, <#[R31]> */
		/* 82212C54h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82212C54h case    9:*/		return 0x82212C58;
		  /* 82212C58h */ case   10:  		/* lwz R10, <#[R3 + 4]> */
		/* 82212C58h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82212C58h case   10:*/		return 0x82212C5C;
		  /* 82212C5Ch */ case   11:  		/* sth R10, <#[R31 + 6]> */
		/* 82212C5Ch case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82212C5Ch case   11:*/		return 0x82212C60;
		  /* 82212C60h */ case   12:  		/* lwz R10, <#[R31 + 4]> */
		/* 82212C60h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212C60h case   12:*/		return 0x82212C64;
		  /* 82212C64h */ case   13:  		/* lwz R9, <#[R3 + 4]> */
		/* 82212C64h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 82212C64h case   13:*/		return 0x82212C68;
		  /* 82212C68h */ case   14:  		/* rlwimi R10, R9, 0, 10, 15 */
		/* 82212C68h case   14:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R10,regs.R9);
		/* 82212C68h case   14:*/		return 0x82212C6C;
		  /* 82212C6Ch */ case   15:  		/* stw R10, <#[R31 + 4]> */
		/* 82212C6Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212C6Ch case   15:*/		return 0x82212C70;
		  /* 82212C70h */ case   16:  		/* lwz R10, <#[R3 + 4]> */
		/* 82212C70h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82212C70h case   16:*/		return 0x82212C74;
		  /* 82212C74h */ case   17:  		/* lwz R9, <#[R31 + 4]> */
		/* 82212C74h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82212C74h case   17:*/		return 0x82212C78;
		  /* 82212C78h */ case   18:  		/* rlwimi R9, R10, 0, 8, 8 */
		/* 82212C78h case   18:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R9,regs.R10);
		/* 82212C78h case   18:*/		return 0x82212C7C;
		  /* 82212C7Ch */ case   19:  		/* oris R10, R9, 64 */
		/* 82212C7Ch case   19:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 82212C7Ch case   19:*/		return 0x82212C80;
		  /* 82212C80h */ case   20:  		/* stw R10, <#[R31 + 4]> */
		/* 82212C80h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82212C80h case   20:*/		return 0x82212C84;
		  /* 82212C84h */ case   21:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82212C84h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212C84h case   21:*/		return 0x82212C88;
		  /* 82212C88h */ case   22:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212C88h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212C88h case   22:*/		return 0x82212C8C;
		  /* 82212C8Ch */ case   23:  		/* rlwimi R9, R10, 0, 24, 22 */
		/* 82212C8Ch case   23:*/		cpu::op::rlwimi<0,0,24,22>(regs,&regs.R9,regs.R10);
		/* 82212C8Ch case   23:*/		return 0x82212C90;
		  /* 82212C90h */ case   24:  		/* stw R9, <#[R11]> */
		/* 82212C90h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212C90h case   24:*/		return 0x82212C94;
		  /* 82212C94h */ case   25:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212C94h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212C94h case   25:*/		return 0x82212C98;
		  /* 82212C98h */ case   26:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212C98h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212C98h case   26:*/		return 0x82212C9C;
		  /* 82212C9Ch */ case   27:  		/* rlwimi R9, R10, 0, 23, 18 */
		/* 82212C9Ch case   27:*/		cpu::op::rlwimi<0,0,23,18>(regs,&regs.R9,regs.R10);
		/* 82212C9Ch case   27:*/		return 0x82212CA0;
		  /* 82212CA0h */ case   28:  		/* stw R9, <#[R11]> */
		/* 82212CA0h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212CA0h case   28:*/		return 0x82212CA4;
		  /* 82212CA4h */ case   29:  		/* bc 4, CR6_EQ, 16 */
		/* 82212CA4h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82212CB4;  }
		/* 82212CA4h case   29:*/		return 0x82212CA8;
		  /* 82212CA8h */ case   30:  		/* lwz R10, <#[R3 + 8]> */
		/* 82212CA8h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82212CA8h case   30:*/		return 0x82212CAC;
		  /* 82212CACh */ case   31:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 82212CACh case   31:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 82212CACh case   31:*/		return 0x82212CB0;
		  /* 82212CB0h */ case   32:  		/* b 8 */
		/* 82212CB0h case   32:*/		return 0x82212CB8;
		/* 82212CB0h case   32:*/		return 0x82212CB4;
	}
	return 0x82212CB4;
} // Block from 82212C30h-82212CB4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82212CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CB4);
		  /* 82212CB4h */ case    0:  		/* li R10, 0 */
		/* 82212CB4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82212CB4h case    0:*/		return 0x82212CB8;
	}
	return 0x82212CB8;
} // Block from 82212CB4h-82212CB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212CB8h
// Function '?DoLogp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CB8);
		  /* 82212CB8h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 82212CB8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212CB8h case    0:*/		return 0x82212CBC;
		  /* 82212CBCh */ case    1:  		/* cmplwi CR6, R8, 1 */
		/* 82212CBCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 82212CBCh case    1:*/		return 0x82212CC0;
		  /* 82212CC0h */ case    2:  		/* rlwimi R10, R9, 0, 0, 29 */
		/* 82212CC0h case    2:*/		cpu::op::rlwimi<0,0,0,29>(regs,&regs.R10,regs.R9);
		/* 82212CC0h case    2:*/		return 0x82212CC4;
		  /* 82212CC4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82212CC4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212CC4h case    3:*/		return 0x82212CC8;
		  /* 82212CC8h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 82212CC8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82212CD8;  }
		/* 82212CC8h case    4:*/		return 0x82212CCC;
		  /* 82212CCCh */ case    5:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212CCCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212CCCh case    5:*/		return 0x82212CD0;
		  /* 82212CD0h */ case    6:  		/* rlwinm R9, R9, 30, 30, 31 */
		/* 82212CD0h case    6:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R9,regs.R9);
		/* 82212CD0h case    6:*/		return 0x82212CD4;
		  /* 82212CD4h */ case    7:  		/* b 8 */
		/* 82212CD4h case    7:*/		return 0x82212CDC;
		/* 82212CD4h case    7:*/		return 0x82212CD8;
	}
	return 0x82212CD8;
} // Block from 82212CB8h-82212CD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82212CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CD8);
		  /* 82212CD8h */ case    0:  		/* li R9, 0 */
		/* 82212CD8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212CD8h case    0:*/		return 0x82212CDC;
	}
	return 0x82212CDC;
} // Block from 82212CD8h-82212CDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CDC);
		  /* 82212CDCh */ case    0:  		/* rlwimi R10, R9, 2, 28, 29 */
		/* 82212CDCh case    0:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R10,regs.R9);
		/* 82212CDCh case    0:*/		return 0x82212CE0;
		  /* 82212CE0h */ case    1:  		/* cmplwi CR6, R8, 2 */
		/* 82212CE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 82212CE0h case    1:*/		return 0x82212CE4;
		  /* 82212CE4h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82212CE4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212CE4h case    2:*/		return 0x82212CE8;
		  /* 82212CE8h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82212CE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82212CF8;  }
		/* 82212CE8h case    3:*/		return 0x82212CEC;
		  /* 82212CECh */ case    4:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212CECh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212CECh case    4:*/		return 0x82212CF0;
		  /* 82212CF0h */ case    5:  		/* rlwinm R9, R9, 28, 30, 31 */
		/* 82212CF0h case    5:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R9,regs.R9);
		/* 82212CF0h case    5:*/		return 0x82212CF4;
		  /* 82212CF4h */ case    6:  		/* b 8 */
		/* 82212CF4h case    6:*/		return 0x82212CFC;
		/* 82212CF4h case    6:*/		return 0x82212CF8;
	}
	return 0x82212CF8;
} // Block from 82212CDCh-82212CF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82212CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CF8);
		  /* 82212CF8h */ case    0:  		/* li R9, 0 */
		/* 82212CF8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212CF8h case    0:*/		return 0x82212CFC;
	}
	return 0x82212CFC;
} // Block from 82212CF8h-82212CFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212CFC);
		  /* 82212CFCh */ case    0:  		/* rlwimi R10, R9, 4, 26, 27 */
		/* 82212CFCh case    0:*/		cpu::op::rlwimi<0,4,26,27>(regs,&regs.R10,regs.R9);
		/* 82212CFCh case    0:*/		return 0x82212D00;
		  /* 82212D00h */ case    1:  		/* cmplwi CR6, R8, 3 */
		/* 82212D00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000003);
		/* 82212D00h case    1:*/		return 0x82212D04;
		  /* 82212D04h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82212D04h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D04h case    2:*/		return 0x82212D08;
		  /* 82212D08h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82212D08h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82212D18;  }
		/* 82212D08h case    3:*/		return 0x82212D0C;
		  /* 82212D0Ch */ case    4:  		/* lwz R9, <#[R3 + 8]> */
		/* 82212D0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82212D0Ch case    4:*/		return 0x82212D10;
		  /* 82212D10h */ case    5:  		/* rlwinm R9, R9, 26, 30, 31 */
		/* 82212D10h case    5:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R9,regs.R9);
		/* 82212D10h case    5:*/		return 0x82212D14;
		  /* 82212D14h */ case    6:  		/* b 8 */
		/* 82212D14h case    6:*/		return 0x82212D1C;
		/* 82212D14h case    6:*/		return 0x82212D18;
	}
	return 0x82212D18;
} // Block from 82212CFCh-82212D18h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82212D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212D18);
		  /* 82212D18h */ case    0:  		/* li R9, 0 */
		/* 82212D18h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82212D18h case    0:*/		return 0x82212D1C;
	}
	return 0x82212D1C;
} // Block from 82212D18h-82212D1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82212D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212D1C);
		  /* 82212D1Ch */ case    0:  		/* rlwimi R10, R9, 6, 24, 25 */
		/* 82212D1Ch case    0:*/		cpu::op::rlwimi<0,6,24,25>(regs,&regs.R10,regs.R9);
		/* 82212D1Ch case    0:*/		return 0x82212D20;
		  /* 82212D20h */ case    1:  		/* stw R10, <#[R11]> */
		/* 82212D20h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D20h case    1:*/		return 0x82212D24;
		  /* 82212D24h */ case    2:  		/* addi R11, R11, 4 */
		/* 82212D24h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212D24h case    2:*/		return 0x82212D28;
		  /* 82212D28h */ case    3:  		/* lwz R10, <#[R3 + 4]> */
		/* 82212D28h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82212D28h case    3:*/		return 0x82212D2C;
		  /* 82212D2Ch */ case    4:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212D2Ch case    4:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212D2Ch case    4:*/		return 0x82212D30;
		  /* 82212D30h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82212D30h case    5:*/		if ( regs.CR[0].eq ) { return 0x82212D40;  }
		/* 82212D30h case    5:*/		return 0x82212D34;
		  /* 82212D34h */ case    6:  		/* lwz R10, <#[R3 + 12]> */
		/* 82212D34h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82212D34h case    6:*/		return 0x82212D38;
		  /* 82212D38h */ case    7:  		/* stw R10, <#[R11]> */
		/* 82212D38h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D38h case    7:*/		return 0x82212D3C;
		  /* 82212D3Ch */ case    8:  		/* addi R11, R11, 4 */
		/* 82212D3Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212D3Ch case    8:*/		return 0x82212D40;
	}
	return 0x82212D40;
} // Block from 82212D1Ch-82212D40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82212D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212D40);
		  /* 82212D40h */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212D40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D40h case    0:*/		return 0x82212D44;
		  /* 82212D44h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82212D44h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212D44h case    1:*/		return 0x82212D48;
		  /* 82212D48h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82212D48h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D48h case    2:*/		return 0x82212D4C;
		  /* 82212D4Ch */ case    3:  		/* lwz R9, <#[R3 + 16]> */
		/* 82212D4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D4Ch case    3:*/		return 0x82212D50;
		  /* 82212D50h */ case    4:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82212D50h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82212D50h case    4:*/		return 0x82212D54;
		  /* 82212D54h */ case    5:  		/* stw R9, <#[R11]> */
		/* 82212D54h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D54h case    5:*/		return 0x82212D58;
		  /* 82212D58h */ case    6:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82212D58h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82212D58h case    6:*/		return 0x82212D5C;
		  /* 82212D5Ch */ case    7:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212D5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D5Ch case    7:*/		return 0x82212D60;
		  /* 82212D60h */ case    8:  		/* rlwimi R10, R9, 0, 9, 7 */
		/* 82212D60h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R10,regs.R9);
		/* 82212D60h case    8:*/		return 0x82212D64;
		  /* 82212D64h */ case    9:  		/* stw R10, <#[R11]> */
		/* 82212D64h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D64h case    9:*/		return 0x82212D68;
		  /* 82212D68h */ case   10:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82212D68h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82212D68h case   10:*/		return 0x82212D6C;
		  /* 82212D6Ch */ case   11:  		/* lwz R9, <#[R3 + 16]> */
		/* 82212D6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D6Ch case   11:*/		return 0x82212D70;
		  /* 82212D70h */ case   12:  		/* rlwimi R9, R10, 0, 10, 8 */
		/* 82212D70h case   12:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R9,regs.R10);
		/* 82212D70h case   12:*/		return 0x82212D74;
		  /* 82212D74h */ case   13:  		/* stw R9, <#[R11]> */
		/* 82212D74h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D74h case   13:*/		return 0x82212D78;
		  /* 82212D78h */ case   14:  		/* addi R11, R11, 4 */
		/* 82212D78h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212D78h case   14:*/		return 0x82212D7C;
		  /* 82212D7Ch */ case   15:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212D7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D7Ch case   15:*/		return 0x82212D80;
		  /* 82212D80h */ case   16:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82212D80h case   16:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82212D80h case   16:*/		return 0x82212D84;
		  /* 82212D84h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82212D84h case   17:*/		if ( regs.CR[0].eq ) { return 0x82212D94;  }
		/* 82212D84h case   17:*/		return 0x82212D88;
		  /* 82212D88h */ case   18:  		/* lwz R10, <#[R3 + 28]> */
		/* 82212D88h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 82212D88h case   18:*/		return 0x82212D8C;
		  /* 82212D8Ch */ case   19:  		/* stw R10, <#[R11]> */
		/* 82212D8Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212D8Ch case   19:*/		return 0x82212D90;
		  /* 82212D90h */ case   20:  		/* addi R11, R11, 4 */
		/* 82212D90h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212D90h case   20:*/		return 0x82212D94;
	}
	return 0x82212D94;
} // Block from 82212D40h-82212D94h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82212D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212D94);
		  /* 82212D94h */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 82212D94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82212D94h case    0:*/		return 0x82212D98;
		  /* 82212D98h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82212D98h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82212D98h case    1:*/		return 0x82212D9C;
		  /* 82212D9Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212D9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82212DAC;  }
		/* 82212D9Ch case    2:*/		return 0x82212DA0;
		  /* 82212DA0h */ case    3:  		/* lwz R10, <#[R3 + 40]> */
		/* 82212DA0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82212DA0h case    3:*/		return 0x82212DA4;
		  /* 82212DA4h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82212DA4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212DA4h case    4:*/		return 0x82212DA8;
		  /* 82212DA8h */ case    5:  		/* addi R11, R11, 4 */
		/* 82212DA8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212DA8h case    5:*/		return 0x82212DAC;
	}
	return 0x82212DAC;
} // Block from 82212D94h-82212DACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212DAC);
		  /* 82212DACh */ case    0:  		/* lwz R10, <#[R3 + 20]> */
		/* 82212DACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 82212DACh case    0:*/		return 0x82212DB0;
		  /* 82212DB0h */ case    1:  		/* addi R31, R11, 4 */
		/* 82212DB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82212DB0h case    1:*/		return 0x82212DB4;
		  /* 82212DB4h */ case    2:  		/* add R10, R10, R8 */
		/* 82212DB4h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82212DB4h case    2:*/		return 0x82212DB8;
		  /* 82212DB8h */ case    3:  		/* sth R10, <#[R11 + 2]> */
		/* 82212DB8h case    3:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212DB8h case    3:*/		return 0x82212DBC;
		  /* 82212DBCh */ case    4:  		/* lwz R9, <#[R3 + 20]> */
		/* 82212DBCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82212DBCh case    4:*/		return 0x82212DC0;
		  /* 82212DC0h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82212DC0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82212DC0h case    5:*/		return 0x82212DC4;
		  /* 82212DC4h */ case    6:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82212DC4h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82212DC4h case    6:*/		return 0x82212DC8;
		  /* 82212DC8h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82212DC8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212DC8h case    7:*/		return 0x82212DCC;
		  /* 82212DCCh */ case    8:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212DCCh case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212DCCh case    8:*/		return 0x82212DD0;
		  /* 82212DD0h */ case    9:  		/* lwz R9, <#[R3 + 20]> */
		/* 82212DD0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82212DD0h case    9:*/		return 0x82212DD4;
		  /* 82212DD4h */ case   10:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82212DD4h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82212DD4h case   10:*/		return 0x82212DD8;
		  /* 82212DD8h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82212DD8h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212DD8h case   11:*/		return 0x82212DDC;
		  /* 82212DDCh */ case   12:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82212DDCh case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82212DDCh case   12:*/		return 0x82212DE0;
		  /* 82212DE0h */ case   13:  		/* lwz R9, <#[R3 + 20]> */
		/* 82212DE0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82212DE0h case   13:*/		return 0x82212DE4;
		  /* 82212DE4h */ case   14:  		/* rlwimi R9, R10, 0, 10, 8 */
		/* 82212DE4h case   14:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R9,regs.R10);
		/* 82212DE4h case   14:*/		return 0x82212DE8;
		  /* 82212DE8h */ case   15:  		/* stw R9, <#[R11]> */
		/* 82212DE8h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82212DE8h case   15:*/		return 0x82212DEC;
		  /* 82212DECh */ case   16:  		/* lwz R11, <#[R3 + 20]> */
		/* 82212DECh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82212DECh case   16:*/		return 0x82212DF0;
		  /* 82212DF0h */ case   17:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82212DF0h case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82212DF0h case   17:*/		return 0x82212DF4;
		  /* 82212DF4h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 82212DF4h case   18:*/		if ( regs.CR[0].eq ) { return 0x82212E04;  }
		/* 82212DF4h case   18:*/		return 0x82212DF8;
		  /* 82212DF8h */ case   19:  		/* lwz R11, <#[R3 + 32]> */
		/* 82212DF8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82212DF8h case   19:*/		return 0x82212DFC;
		  /* 82212DFCh */ case   20:  		/* stw R11, <#[R31]> */
		/* 82212DFCh case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82212DFCh case   20:*/		return 0x82212E00;
		  /* 82212E00h */ case   21:  		/* addi R31, R31, 4 */
		/* 82212E00h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82212E00h case   21:*/		return 0x82212E04;
	}
	return 0x82212E04;
} // Block from 82212DACh-82212E04h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82212E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212E04);
		  /* 82212E04h */ case    0:  		/* lwz R11, <#[R3 + 20]> */
		/* 82212E04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82212E04h case    0:*/		return 0x82212E08;
		  /* 82212E08h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82212E08h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82212E08h case    1:*/		return 0x82212E0C;
		  /* 82212E0Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82212E0Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82212E1C;  }
		/* 82212E0Ch case    2:*/		return 0x82212E10;
		  /* 82212E10h */ case    3:  		/* lwz R11, <#[R3 + 44]> */
		/* 82212E10h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 82212E10h case    3:*/		return 0x82212E14;
		  /* 82212E14h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82212E14h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82212E14h case    4:*/		return 0x82212E18;
		  /* 82212E18h */ case    5:  		/* addi R31, R31, 4 */
		/* 82212E18h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82212E18h case    5:*/		return 0x82212E1C;
	}
	return 0x82212E1C;
} // Block from 82212E04h-82212E1Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212E1C);
		  /* 82212E1Ch */ case    0:  		/* addi R8, R8, 1 */
		/* 82212E1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82212E1Ch case    0:*/		return 0x82212E20;
		  /* 82212E20h */ case    1:  		/* cmplw CR6, R8, R7 */
		/* 82212E20h case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 82212E20h case    1:*/		return 0x82212E24;
		  /* 82212E24h */ case    2:  		/* bc 12, CR6_LT, -488 */
		/* 82212E24h case    2:*/		if ( regs.CR[6].lt ) { return 0x82212C3C;  }
		/* 82212E24h case    2:*/		return 0x82212E28;
	}
	return 0x82212E28;
} // Block from 82212E1Ch-82212E28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82212E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212E28);
		  /* 82212E28h */ case    0:  		/* mr R3, R31 */
		/* 82212E28h case    0:*/		regs.R3 = regs.R31;
		/* 82212E28h case    0:*/		return 0x82212E2C;
		  /* 82212E2Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 82212E2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82212E2Ch case    1:*/		return 0x82212E30;
		  /* 82212E30h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82212E30h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82212E30h case    2:*/		return 0x82212E34;
		  /* 82212E34h */ case    3:  		/* mtspr LR, R12 */
		/* 82212E34h case    3:*/		regs.LR = regs.R12;
		/* 82212E34h case    3:*/		return 0x82212E38;
		  /* 82212E38h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82212E38h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82212E38h case    4:*/		return 0x82212E3C;
		  /* 82212E3Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 82212E3Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82212E3Ch case    5:*/		return 0x82212E40;
	}
	return 0x82212E40;
} // Block from 82212E28h-82212E40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82212E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212E40);
		  /* 82212E40h */ case    0:  		/* mfspr R12, LR */
		/* 82212E40h case    0:*/		regs.R12 = regs.LR;
		/* 82212E40h case    0:*/		return 0x82212E44;
		  /* 82212E44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82212E44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82212E44h case    1:*/		return 0x82212E48;
		  /* 82212E48h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82212E48h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82212E48h case    2:*/		return 0x82212E4C;
		  /* 82212E4Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82212E4Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82212E4Ch case    3:*/		return 0x82212E50;
		  /* 82212E50h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82212E50h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82212E50h case    4:*/		return 0x82212E54;
		  /* 82212E54h */ case    5:  		/* mr R31, R4 */
		/* 82212E54h case    5:*/		regs.R31 = regs.R4;
		/* 82212E54h case    5:*/		return 0x82212E58;
		  /* 82212E58h */ case    6:  		/* mr R30, R5 */
		/* 82212E58h case    6:*/		regs.R30 = regs.R5;
		/* 82212E58h case    6:*/		return 0x82212E5C;
		  /* 82212E5Ch */ case    7:  		/* bl -15412 */
		/* 82212E5Ch case    7:*/		regs.LR = 0x82212E60; return 0x8220F228;
		/* 82212E5Ch case    7:*/		return 0x82212E60;
		  /* 82212E60h */ case    8:  		/* li R7, 81 */
		/* 82212E60h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x51);
		/* 82212E60h case    8:*/		return 0x82212E64;
		  /* 82212E64h */ case    9:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 82212E64h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 82212E64h case    9:*/		return 0x82212E68;
		  /* 82212E68h */ case   10:  		/* sth R7, <#[R30 + 2]> */
		/* 82212E68h case   10:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R30 + 0x00000002) );
		/* 82212E68h case   10:*/		return 0x82212E6C;
		  /* 82212E6Ch */ case   11:  		/* li R8, 17 */
		/* 82212E6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 82212E6Ch case   11:*/		return 0x82212E70;
		  /* 82212E70h */ case   12:  		/* lwz R9, <#[R30]> */
		/* 82212E70h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82212E70h case   12:*/		return 0x82212E74;
		  /* 82212E74h */ case   13:  		/* addi R11, R30, 4 */
		/* 82212E74h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82212E74h case   13:*/		return 0x82212E78;
		  /* 82212E78h */ case   14:  		/* lwz R6, <#[R31]> */
		/* 82212E78h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82212E78h case   14:*/		return 0x82212E7C;
		  /* 82212E7Ch */ case   15:  		/* rlwimi R6, R9, 0, 16, 2 */
		/* 82212E7Ch case   15:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R6,regs.R9);
		/* 82212E7Ch case   15:*/		return 0x82212E80;
		  /* 82212E80h */ case   16:  		/* stw R6, <#[R30]> */
		/* 82212E80h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 82212E80h case   16:*/		return 0x82212E84;
		  /* 82212E84h */ case   17:  		/* li R9, 1 */
		/* 82212E84h case   17:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82212E84h case   17:*/		return 0x82212E88;
		  /* 82212E88h */ case   18:  		/* sth R10, <#[R30 + 6]> */
		/* 82212E88h case   18:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 82212E88h case   18:*/		return 0x82212E8C;
		  /* 82212E8Ch */ case   19:  		/* li R12, -30584 */
		/* 82212E8Ch case   19:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82212E8Ch case   19:*/		return 0x82212E90;
		  /* 82212E90h */ case   20:  		/* lwz R6, <#[R30 + 4]> */
		/* 82212E90h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82212E90h case   20:*/		return 0x82212E94;
		  /* 82212E94h */ case   21:  		/* rlwimi R6, R8, 18, 8, 15 */
		/* 82212E94h case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R8);
		/* 82212E94h case   21:*/		return 0x82212E98;
		  /* 82212E98h */ case   22:  		/* stw R6, <#[R30 + 4]> */
		/* 82212E98h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82212E98h case   22:*/		return 0x82212E9C;
		  /* 82212E9Ch */ case   23:  		/* stwu R9, <#[R11 + 4]> */
		/* 82212E9Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212E9Ch case   23:*/		return 0x82212EA0;
		  /* 82212EA0h */ case   24:  		/* lwz R6, <#[R31 + 20]> */
		/* 82212EA0h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82212EA0h case   24:*/		return 0x82212EA4;
		  /* 82212EA4h */ case   25:  		/* addi R11, R11, 4 */
		/* 82212EA4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212EA4h case   25:*/		return 0x82212EA8;
		  /* 82212EA8h */ case   26:  		/* sth R6, <#[R11 + 2]> */
		/* 82212EA8h case   26:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82212EA8h case   26:*/		return 0x82212EAC;
		  /* 82212EACh */ case   27:  		/* lwz R6, <#[R11]> */
		/* 82212EACh case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212EACh case   27:*/		return 0x82212EB0;
		  /* 82212EB0h */ case   28:  		/* lwz R5, <#[R31 + 20]> */
		/* 82212EB0h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82212EB0h case   28:*/		return 0x82212EB4;
		  /* 82212EB4h */ case   29:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 82212EB4h case   29:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 82212EB4h case   29:*/		return 0x82212EB8;
		  /* 82212EB8h */ case   30:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82212EB8h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82212EB8h case   30:*/		return 0x82212EBC;
		  /* 82212EBCh */ case   31:  		/* stw R5, <#[R11]> */
		/* 82212EBCh case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212EBCh case   31:*/		return 0x82212EC0;
		  /* 82212EC0h */ case   32:  		/* lwz R5, <#[R31 + 20]> */
		/* 82212EC0h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82212EC0h case   32:*/		return 0x82212EC4;
		  /* 82212EC4h */ case   33:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 82212EC4h case   33:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 82212EC4h case   33:*/		return 0x82212EC8;
		  /* 82212EC8h */ case   34:  		/* oris R6, R5, 64 */
		/* 82212EC8h case   34:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 82212EC8h case   34:*/		return 0x82212ECC;
		  /* 82212ECCh */ case   35:  		/* stw R6, <#[R11]> */
		/* 82212ECCh case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212ECCh case   35:*/		return 0x82212ED0;
		  /* 82212ED0h */ case   36:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82212ED0h case   36:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212ED0h case   36:*/		return 0x82212ED4;
		  /* 82212ED4h */ case   37:  		/* and R6, R6, R12 */
		/* 82212ED4h case   37:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 82212ED4h case   37:*/		return 0x82212ED8;
		  /* 82212ED8h */ case   38:  		/* stw R6, <#[R11]> */
		/* 82212ED8h case   38:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212ED8h case   38:*/		return 0x82212EDC;
		  /* 82212EDCh */ case   39:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212EDCh case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212EDCh case   39:*/		return 0x82212EE0;
		  /* 82212EE0h */ case   40:  		/* rlwimi R5, R6, 0, 29, 27 */
		/* 82212EE0h case   40:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R5,regs.R6);
		/* 82212EE0h case   40:*/		return 0x82212EE4;
		  /* 82212EE4h */ case   41:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82212EE4h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82212EE4h case   41:*/		return 0x82212EE8;
		  /* 82212EE8h */ case   42:  		/* stw R5, <#[R11]> */
		/* 82212EE8h case   42:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212EE8h case   42:*/		return 0x82212EEC;
		  /* 82212EECh */ case   43:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212EECh case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212EECh case   43:*/		return 0x82212EF0;
		  /* 82212EF0h */ case   44:  		/* rlwimi R6, R5, 4, 24, 24 */
		/* 82212EF0h case   44:*/		cpu::op::rlwimi<0,4,24,24>(regs,&regs.R6,regs.R5);
		/* 82212EF0h case   44:*/		return 0x82212EF4;
		  /* 82212EF4h */ case   45:  		/* stw R6, <#[R11]> */
		/* 82212EF4h case   45:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212EF4h case   45:*/		return 0x82212EF8;
		  /* 82212EF8h */ case   46:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212EF8h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212EF8h case   46:*/		return 0x82212EFC;
		  /* 82212EFCh */ case   47:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212EFCh case   47:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212EFCh case   47:*/		return 0x82212F00;
		  /* 82212F00h */ case   48:  		/* rlwimi R6, R5, 8, 20, 20 */
		/* 82212F00h case   48:*/		cpu::op::rlwimi<0,8,20,20>(regs,&regs.R6,regs.R5);
		/* 82212F00h case   48:*/		return 0x82212F04;
		  /* 82212F04h */ case   49:  		/* stw R6, <#[R11]> */
		/* 82212F04h case   49:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F04h case   49:*/		return 0x82212F08;
		  /* 82212F08h */ case   50:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212F08h case   50:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212F08h case   50:*/		return 0x82212F0C;
		  /* 82212F0Ch */ case   51:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212F0Ch case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212F0Ch case   51:*/		return 0x82212F10;
		  /* 82212F10h */ case   52:  		/* rlwimi R6, R5, 12, 16, 16 */
		/* 82212F10h case   52:*/		cpu::op::rlwimi<0,12,16,16>(regs,&regs.R6,regs.R5);
		/* 82212F10h case   52:*/		return 0x82212F14;
		  /* 82212F14h */ case   53:  		/* stw R6, <#[R11]> */
		/* 82212F14h case   53:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F14h case   53:*/		return 0x82212F18;
		  /* 82212F18h */ case   54:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212F18h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212F18h case   54:*/		return 0x82212F1C;
		  /* 82212F1Ch */ case   55:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212F1Ch case   55:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212F1Ch case   55:*/		return 0x82212F20;
		  /* 82212F20h */ case   56:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 82212F20h case   56:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 82212F20h case   56:*/		return 0x82212F24;
		  /* 82212F24h */ case   57:  		/* stw R5, <#[R11]> */
		/* 82212F24h case   57:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F24h case   57:*/		return 0x82212F28;
		  /* 82212F28h */ case   58:  		/* addi R11, R11, 4 */
		/* 82212F28h case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212F28h case   58:*/		return 0x82212F2C;
		  /* 82212F2Ch */ case   59:  		/* lwz R6, <#[R31 + 20]> */
		/* 82212F2Ch case   59:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82212F2Ch case   59:*/		return 0x82212F30;
		  /* 82212F30h */ case   60:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 82212F30h case   60:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 82212F30h case   60:*/		return 0x82212F34;
		  /* 82212F34h */ case   61:  		/* bc 12, CR0_EQ, 16 */
		/* 82212F34h case   61:*/		if ( regs.CR[0].eq ) { return 0x82212F44;  }
		/* 82212F34h case   61:*/		return 0x82212F38;
		  /* 82212F38h */ case   62:  		/* lwz R6, <#[R31 + 44]> */
		/* 82212F38h case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 82212F38h case   62:*/		return 0x82212F3C;
		  /* 82212F3Ch */ case   63:  		/* stw R6, <#[R11]> */
		/* 82212F3Ch case   63:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F3Ch case   63:*/		return 0x82212F40;
		  /* 82212F40h */ case   64:  		/* addi R11, R11, 4 */
		/* 82212F40h case   64:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212F40h case   64:*/		return 0x82212F44;
	}
	return 0x82212F44;
} // Block from 82212E40h-82212F44h (65 instructions)

//////////////////////////////////////////////////////
// Block at 82212F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82212F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82212F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82212F44);
		  /* 82212F44h */ case    0:  		/* sth R7, <#[R11 + 2]> */
		/* 82212F44h case    0:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82212F44h case    0:*/		return 0x82212F48;
		  /* 82212F48h */ case    1:  		/* li R6, 4 */
		/* 82212F48h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82212F48h case    1:*/		return 0x82212F4C;
		  /* 82212F4Ch */ case    2:  		/* lwz R5, <#[R11]> */
		/* 82212F4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F4Ch case    2:*/		return 0x82212F50;
		  /* 82212F50h */ case    3:  		/* li R12, -26215 */
		/* 82212F50h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82212F50h case    3:*/		return 0x82212F54;
		  /* 82212F54h */ case    4:  		/* lwz R4, <#[R31]> */
		/* 82212F54h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82212F54h case    4:*/		return 0x82212F58;
		  /* 82212F58h */ case    5:  		/* rlwimi R4, R5, 0, 16, 2 */
		/* 82212F58h case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R4,regs.R5);
		/* 82212F58h case    5:*/		return 0x82212F5C;
		  /* 82212F5Ch */ case    6:  		/* stw R4, <#[R11]> */
		/* 82212F5Ch case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F5Ch case    6:*/		return 0x82212F60;
		  /* 82212F60h */ case    7:  		/* addi R11, R11, 4 */
		/* 82212F60h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212F60h case    7:*/		return 0x82212F64;
		  /* 82212F64h */ case    8:  		/* sth R10, <#[R11 + 2]> */
		/* 82212F64h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82212F64h case    8:*/		return 0x82212F68;
		  /* 82212F68h */ case    9:  		/* lwz R5, <#[R11]> */
		/* 82212F68h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F68h case    9:*/		return 0x82212F6C;
		  /* 82212F6Ch */ case   10:  		/* rlwimi R5, R8, 18, 8, 15 */
		/* 82212F6Ch case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R8);
		/* 82212F6Ch case   10:*/		return 0x82212F70;
		  /* 82212F70h */ case   11:  		/* stw R5, <#[R11]> */
		/* 82212F70h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F70h case   11:*/		return 0x82212F74;
		  /* 82212F74h */ case   12:  		/* stwu R6, <#[R11 + 4]> */
		/* 82212F74h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212F74h case   12:*/		return 0x82212F78;
		  /* 82212F78h */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 82212F78h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82212F78h case   13:*/		return 0x82212F7C;
		  /* 82212F7Ch */ case   14:  		/* addi R11, R11, 4 */
		/* 82212F7Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82212F7Ch case   14:*/		return 0x82212F80;
		  /* 82212F80h */ case   15:  		/* sth R6, <#[R11 + 2]> */
		/* 82212F80h case   15:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82212F80h case   15:*/		return 0x82212F84;
		  /* 82212F84h */ case   16:  		/* lwz R6, <#[R11]> */
		/* 82212F84h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F84h case   16:*/		return 0x82212F88;
		  /* 82212F88h */ case   17:  		/* lwz R5, <#[R31 + 20]> */
		/* 82212F88h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82212F88h case   17:*/		return 0x82212F8C;
		  /* 82212F8Ch */ case   18:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 82212F8Ch case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 82212F8Ch case   18:*/		return 0x82212F90;
		  /* 82212F90h */ case   19:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82212F90h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82212F90h case   19:*/		return 0x82212F94;
		  /* 82212F94h */ case   20:  		/* stw R5, <#[R11]> */
		/* 82212F94h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212F94h case   20:*/		return 0x82212F98;
		  /* 82212F98h */ case   21:  		/* lwz R5, <#[R31 + 20]> */
		/* 82212F98h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82212F98h case   21:*/		return 0x82212F9C;
		  /* 82212F9Ch */ case   22:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 82212F9Ch case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 82212F9Ch case   22:*/		return 0x82212FA0;
		  /* 82212FA0h */ case   23:  		/* oris R6, R5, 64 */
		/* 82212FA0h case   23:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 82212FA0h case   23:*/		return 0x82212FA4;
		  /* 82212FA4h */ case   24:  		/* stw R6, <#[R11]> */
		/* 82212FA4h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FA4h case   24:*/		return 0x82212FA8;
		  /* 82212FA8h */ case   25:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82212FA8h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82212FA8h case   25:*/		return 0x82212FAC;
		  /* 82212FACh */ case   26:  		/* and R6, R6, R12 */
		/* 82212FACh case   26:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 82212FACh case   26:*/		return 0x82212FB0;
		  /* 82212FB0h */ case   27:  		/* ori R6, R6, 4369 */
		/* 82212FB0h case   27:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x1111);
		/* 82212FB0h case   27:*/		return 0x82212FB4;
		  /* 82212FB4h */ case   28:  		/* mr R5, R6 */
		/* 82212FB4h case   28:*/		regs.R5 = regs.R6;
		/* 82212FB4h case   28:*/		return 0x82212FB8;
		  /* 82212FB8h */ case   29:  		/* stw R6, <#[R11]> */
		/* 82212FB8h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FB8h case   29:*/		return 0x82212FBC;
		  /* 82212FBCh */ case   30:  		/* lwz R6, <#[R31 + 32]> */
		/* 82212FBCh case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000020) );
		/* 82212FBCh case   30:*/		return 0x82212FC0;
		  /* 82212FC0h */ case   31:  		/* rlwimi R5, R6, 28, 28, 28 */
		/* 82212FC0h case   31:*/		cpu::op::rlwimi<0,28,28,28>(regs,&regs.R5,regs.R6);
		/* 82212FC0h case   31:*/		return 0x82212FC4;
		  /* 82212FC4h */ case   32:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82212FC4h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82212FC4h case   32:*/		return 0x82212FC8;
		  /* 82212FC8h */ case   33:  		/* stw R5, <#[R11]> */
		/* 82212FC8h case   33:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FC8h case   33:*/		return 0x82212FCC;
		  /* 82212FCCh */ case   34:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212FCCh case   34:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212FCCh case   34:*/		return 0x82212FD0;
		  /* 82212FD0h */ case   35:  		/* rlwimi R5, R6, 0, 25, 23 */
		/* 82212FD0h case   35:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R5,regs.R6);
		/* 82212FD0h case   35:*/		return 0x82212FD4;
		  /* 82212FD4h */ case   36:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82212FD4h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82212FD4h case   36:*/		return 0x82212FD8;
		  /* 82212FD8h */ case   37:  		/* stw R5, <#[R11]> */
		/* 82212FD8h case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FD8h case   37:*/		return 0x82212FDC;
		  /* 82212FDCh */ case   38:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212FDCh case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212FDCh case   38:*/		return 0x82212FE0;
		  /* 82212FE0h */ case   39:  		/* rlwimi R6, R5, 4, 20, 20 */
		/* 82212FE0h case   39:*/		cpu::op::rlwimi<0,4,20,20>(regs,&regs.R6,regs.R5);
		/* 82212FE0h case   39:*/		return 0x82212FE4;
		  /* 82212FE4h */ case   40:  		/* stw R6, <#[R11]> */
		/* 82212FE4h case   40:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FE4h case   40:*/		return 0x82212FE8;
		  /* 82212FE8h */ case   41:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212FE8h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212FE8h case   41:*/		return 0x82212FEC;
		  /* 82212FECh */ case   42:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212FECh case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212FECh case   42:*/		return 0x82212FF0;
		  /* 82212FF0h */ case   43:  		/* rlwimi R6, R5, 8, 16, 16 */
		/* 82212FF0h case   43:*/		cpu::op::rlwimi<0,8,16,16>(regs,&regs.R6,regs.R5);
		/* 82212FF0h case   43:*/		return 0x82212FF4;
		  /* 82212FF4h */ case   44:  		/* stw R6, <#[R11]> */
		/* 82212FF4h case   44:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82212FF4h case   44:*/		return 0x82212FF8;
		  /* 82212FF8h */ case   45:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82212FF8h case   45:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82212FF8h case   45:*/		return 0x82212FFC;
		  /* 82212FFCh */ case   46:  		/* lwz R5, <#[R31 + 32]> */
		/* 82212FFCh case   46:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82212FFCh case   46:*/		return 0x82213000;
		  /* 82213000h */ case   47:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 82213000h case   47:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 82213000h case   47:*/		return 0x82213004;
		  /* 82213004h */ case   48:  		/* stw R5, <#[R11]> */
		/* 82213004h case   48:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213004h case   48:*/		return 0x82213008;
		  /* 82213008h */ case   49:  		/* lwz R6, <#[R31 + 20]> */
		/* 82213008h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82213008h case   49:*/		return 0x8221300C;
		  /* 8221300Ch */ case   50:  		/* addi R11, R11, 4 */
		/* 8221300Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221300Ch case   50:*/		return 0x82213010;
		  /* 82213010h */ case   51:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 82213010h case   51:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 82213010h case   51:*/		return 0x82213014;
		  /* 82213014h */ case   52:  		/* bc 12, CR0_EQ, 16 */
		/* 82213014h case   52:*/		if ( regs.CR[0].eq ) { return 0x82213024;  }
		/* 82213014h case   52:*/		return 0x82213018;
		  /* 82213018h */ case   53:  		/* lwz R6, <#[R31 + 44]> */
		/* 82213018h case   53:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 82213018h case   53:*/		return 0x8221301C;
		  /* 8221301Ch */ case   54:  		/* stw R6, <#[R11]> */
		/* 8221301Ch case   54:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221301Ch case   54:*/		return 0x82213020;
		  /* 82213020h */ case   55:  		/* addi R11, R11, 4 */
		/* 82213020h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213020h case   55:*/		return 0x82213024;
	}
	return 0x82213024;
} // Block from 82212F44h-82213024h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82213024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213024);
		  /* 82213024h */ case    0:  		/* sth R7, <#[R11 + 2]> */
		/* 82213024h case    0:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82213024h case    0:*/		return 0x82213028;
		  /* 82213028h */ case    1:  		/* li R6, 16 */
		/* 82213028h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82213028h case    1:*/		return 0x8221302C;
		  /* 8221302Ch */ case    2:  		/* li R12, -21846 */
		/* 8221302Ch case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 8221302Ch case    2:*/		return 0x82213030;
		  /* 82213030h */ case    3:  		/* lwz R5, <#[R11]> */
		/* 82213030h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213030h case    3:*/		return 0x82213034;
		  /* 82213034h */ case    4:  		/* lwz R4, <#[R31]> */
		/* 82213034h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82213034h case    4:*/		return 0x82213038;
		  /* 82213038h */ case    5:  		/* rlwimi R4, R5, 0, 16, 2 */
		/* 82213038h case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R4,regs.R5);
		/* 82213038h case    5:*/		return 0x8221303C;
		  /* 8221303Ch */ case    6:  		/* stw R4, <#[R11]> */
		/* 8221303Ch case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8221303Ch case    6:*/		return 0x82213040;
		  /* 82213040h */ case    7:  		/* addi R11, R11, 4 */
		/* 82213040h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213040h case    7:*/		return 0x82213044;
		  /* 82213044h */ case    8:  		/* sth R10, <#[R11 + 2]> */
		/* 82213044h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213044h case    8:*/		return 0x82213048;
		  /* 82213048h */ case    9:  		/* lwz R5, <#[R11]> */
		/* 82213048h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213048h case    9:*/		return 0x8221304C;
		  /* 8221304Ch */ case   10:  		/* rlwimi R5, R8, 18, 8, 15 */
		/* 8221304Ch case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R8);
		/* 8221304Ch case   10:*/		return 0x82213050;
		  /* 82213050h */ case   11:  		/* stw R5, <#[R11]> */
		/* 82213050h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213050h case   11:*/		return 0x82213054;
		  /* 82213054h */ case   12:  		/* stwu R6, <#[R11 + 4]> */
		/* 82213054h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213054h case   12:*/		return 0x82213058;
		  /* 82213058h */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 82213058h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82213058h case   13:*/		return 0x8221305C;
		  /* 8221305Ch */ case   14:  		/* addi R11, R11, 4 */
		/* 8221305Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221305Ch case   14:*/		return 0x82213060;
		  /* 82213060h */ case   15:  		/* sth R6, <#[R11 + 2]> */
		/* 82213060h case   15:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82213060h case   15:*/		return 0x82213064;
		  /* 82213064h */ case   16:  		/* lwz R5, <#[R31 + 20]> */
		/* 82213064h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82213064h case   16:*/		return 0x82213068;
		  /* 82213068h */ case   17:  		/* lwz R6, <#[R11]> */
		/* 82213068h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213068h case   17:*/		return 0x8221306C;
		  /* 8221306Ch */ case   18:  		/* rlwimi R5, R6, 0, 16, 9 */
		/* 8221306Ch case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R5,regs.R6);
		/* 8221306Ch case   18:*/		return 0x82213070;
		  /* 82213070h */ case   19:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 82213070h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 82213070h case   19:*/		return 0x82213074;
		  /* 82213074h */ case   20:  		/* stw R5, <#[R11]> */
		/* 82213074h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213074h case   20:*/		return 0x82213078;
		  /* 82213078h */ case   21:  		/* lwz R5, <#[R31 + 20]> */
		/* 82213078h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000014) );
		/* 82213078h case   21:*/		return 0x8221307C;
		  /* 8221307Ch */ case   22:  		/* rlwimi R5, R6, 0, 9, 7 */
		/* 8221307Ch case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R6);
		/* 8221307Ch case   22:*/		return 0x82213080;
		  /* 82213080h */ case   23:  		/* oris R6, R5, 64 */
		/* 82213080h case   23:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R5,0x40);
		/* 82213080h case   23:*/		return 0x82213084;
		  /* 82213084h */ case   24:  		/* stw R6, <#[R11]> */
		/* 82213084h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213084h case   24:*/		return 0x82213088;
		  /* 82213088h */ case   25:  		/* lwzu R6, <#[R11 + 4]> */
		/* 82213088h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213088h case   25:*/		return 0x8221308C;
		  /* 8221308Ch */ case   26:  		/* and R6, R6, R12 */
		/* 8221308Ch case   26:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 8221308Ch case   26:*/		return 0x82213090;
		  /* 82213090h */ case   27:  		/* ori R6, R6, 8738 */
		/* 82213090h case   27:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2222);
		/* 82213090h case   27:*/		return 0x82213094;
		  /* 82213094h */ case   28:  		/* stw R6, <#[R11]> */
		/* 82213094h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213094h case   28:*/		return 0x82213098;
		  /* 82213098h */ case   29:  		/* lwz R5, <#[R31 + 32]> */
		/* 82213098h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 82213098h case   29:*/		return 0x8221309C;
		  /* 8221309Ch */ case   30:  		/* rlwimi R6, R5, 24, 28, 28 */
		/* 8221309Ch case   30:*/		cpu::op::rlwimi<0,24,28,28>(regs,&regs.R6,regs.R5);
		/* 8221309Ch case   30:*/		return 0x822130A0;
		  /* 822130A0h */ case   31:  		/* stw R6, <#[R11]> */
		/* 822130A0h case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822130A0h case   31:*/		return 0x822130A4;
		  /* 822130A4h */ case   32:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 822130A4h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 822130A4h case   32:*/		return 0x822130A8;
		  /* 822130A8h */ case   33:  		/* lwz R5, <#[R31 + 32]> */
		/* 822130A8h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 822130A8h case   33:*/		return 0x822130AC;
		  /* 822130ACh */ case   34:  		/* rlwimi R6, R5, 28, 24, 24 */
		/* 822130ACh case   34:*/		cpu::op::rlwimi<0,28,24,24>(regs,&regs.R6,regs.R5);
		/* 822130ACh case   34:*/		return 0x822130B0;
		  /* 822130B0h */ case   35:  		/* stw R6, <#[R11]> */
		/* 822130B0h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822130B0h case   35:*/		return 0x822130B4;
		  /* 822130B4h */ case   36:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 822130B4h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 822130B4h case   36:*/		return 0x822130B8;
		  /* 822130B8h */ case   37:  		/* lwz R5, <#[R31 + 32]> */
		/* 822130B8h case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 822130B8h case   37:*/		return 0x822130BC;
		  /* 822130BCh */ case   38:  		/* rlwimi R5, R6, 0, 21, 19 */
		/* 822130BCh case   38:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R5,regs.R6);
		/* 822130BCh case   38:*/		return 0x822130C0;
		  /* 822130C0h */ case   39:  		/* rlwinm R6, R5, 0, 0, 31 */
		/* 822130C0h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R5);
		/* 822130C0h case   39:*/		return 0x822130C4;
		  /* 822130C4h */ case   40:  		/* stw R5, <#[R11]> */
		/* 822130C4h case   40:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822130C4h case   40:*/		return 0x822130C8;
		  /* 822130C8h */ case   41:  		/* lwz R5, <#[R31 + 32]> */
		/* 822130C8h case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 822130C8h case   41:*/		return 0x822130CC;
		  /* 822130CCh */ case   42:  		/* rlwimi R6, R5, 4, 16, 16 */
		/* 822130CCh case   42:*/		cpu::op::rlwimi<0,4,16,16>(regs,&regs.R6,regs.R5);
		/* 822130CCh case   42:*/		return 0x822130D0;
		  /* 822130D0h */ case   43:  		/* stw R6, <#[R11]> */
		/* 822130D0h case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822130D0h case   43:*/		return 0x822130D4;
		  /* 822130D4h */ case   44:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 822130D4h case   44:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 822130D4h case   44:*/		return 0x822130D8;
		  /* 822130D8h */ case   45:  		/* lwz R5, <#[R31 + 32]> */
		/* 822130D8h case   45:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 822130D8h case   45:*/		return 0x822130DC;
		  /* 822130DCh */ case   46:  		/* rlwimi R5, R6, 0, 12, 10 */
		/* 822130DCh case   46:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R5,regs.R6);
		/* 822130DCh case   46:*/		return 0x822130E0;
		  /* 822130E0h */ case   47:  		/* stw R5, <#[R11]> */
		/* 822130E0h case   47:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822130E0h case   47:*/		return 0x822130E4;
		  /* 822130E4h */ case   48:  		/* lwz R6, <#[R31 + 20]> */
		/* 822130E4h case   48:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 822130E4h case   48:*/		return 0x822130E8;
	}
	return 0x822130E8;
} // Block from 82213024h-822130E8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 822130E8h
// Function '?DoLrp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822130E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822130E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822130E8);
		  /* 822130E8h */ case    0:  		/* addi R11, R11, 4 */
		/* 822130E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822130E8h case    0:*/		return 0x822130EC;
		  /* 822130ECh */ case    1:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 822130ECh case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 822130ECh case    1:*/		return 0x822130F0;
		  /* 822130F0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822130F0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213100;  }
		/* 822130F0h case    2:*/		return 0x822130F4;
		  /* 822130F4h */ case    3:  		/* lwz R6, <#[R31 + 44]> */
		/* 822130F4h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 822130F4h case    3:*/		return 0x822130F8;
		  /* 822130F8h */ case    4:  		/* stw R6, <#[R11]> */
		/* 822130F8h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822130F8h case    4:*/		return 0x822130FC;
		  /* 822130FCh */ case    5:  		/* addi R11, R11, 4 */
		/* 822130FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822130FCh case    5:*/		return 0x82213100;
	}
	return 0x82213100;
} // Block from 822130E8h-82213100h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213100);
		  /* 82213100h */ case    0:  		/* sth R7, <#[R11 + 2]> */
		/* 82213100h case    0:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82213100h case    0:*/		return 0x82213104;
		  /* 82213104h */ case    1:  		/* li R7, 64 */
		/* 82213104h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 82213104h case    1:*/		return 0x82213108;
		  /* 82213108h */ case    2:  		/* li R12, -17477 */
		/* 82213108h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82213108h case    2:*/		return 0x8221310C;
		  /* 8221310Ch */ case    3:  		/* lwz R6, <#[R11]> */
		/* 8221310Ch case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221310Ch case    3:*/		return 0x82213110;
		  /* 82213110h */ case    4:  		/* lwz R5, <#[R31]> */
		/* 82213110h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82213110h case    4:*/		return 0x82213114;
		  /* 82213114h */ case    5:  		/* rlwimi R5, R6, 0, 16, 2 */
		/* 82213114h case    5:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R5,regs.R6);
		/* 82213114h case    5:*/		return 0x82213118;
		  /* 82213118h */ case    6:  		/* stw R5, <#[R11]> */
		/* 82213118h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213118h case    6:*/		return 0x8221311C;
		  /* 8221311Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 8221311Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221311Ch case    7:*/		return 0x82213120;
		  /* 82213120h */ case    8:  		/* sth R10, <#[R11 + 2]> */
		/* 82213120h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213120h case    8:*/		return 0x82213124;
		  /* 82213124h */ case    9:  		/* lwz R6, <#[R11]> */
		/* 82213124h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213124h case    9:*/		return 0x82213128;
		  /* 82213128h */ case   10:  		/* rlwimi R6, R8, 18, 8, 15 */
		/* 82213128h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R8);
		/* 82213128h case   10:*/		return 0x8221312C;
		  /* 8221312Ch */ case   11:  		/* stw R6, <#[R11]> */
		/* 8221312Ch case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221312Ch case   11:*/		return 0x82213130;
		  /* 82213130h */ case   12:  		/* stwu R7, <#[R11 + 4]> */
		/* 82213130h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213130h case   12:*/		return 0x82213134;
		  /* 82213134h */ case   13:  		/* addi R11, R11, 4 */
		/* 82213134h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213134h case   13:*/		return 0x82213138;
		  /* 82213138h */ case   14:  		/* lwz R8, <#[R31 + 20]> */
		/* 82213138h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82213138h case   14:*/		return 0x8221313C;
		  /* 8221313Ch */ case   15:  		/* sth R8, <#[R11 + 2]> */
		/* 8221313Ch case   15:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 8221313Ch case   15:*/		return 0x82213140;
		  /* 82213140h */ case   16:  		/* lwz R7, <#[R31 + 20]> */
		/* 82213140h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 82213140h case   16:*/		return 0x82213144;
		  /* 82213144h */ case   17:  		/* lwz R8, <#[R11]> */
		/* 82213144h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213144h case   17:*/		return 0x82213148;
		  /* 82213148h */ case   18:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 82213148h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 82213148h case   18:*/		return 0x8221314C;
		  /* 8221314Ch */ case   19:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 8221314Ch case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 8221314Ch case   19:*/		return 0x82213150;
		  /* 82213150h */ case   20:  		/* stw R7, <#[R11]> */
		/* 82213150h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213150h case   20:*/		return 0x82213154;
		  /* 82213154h */ case   21:  		/* lwz R7, <#[R31 + 20]> */
		/* 82213154h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 82213154h case   21:*/		return 0x82213158;
		  /* 82213158h */ case   22:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 82213158h case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 82213158h case   22:*/		return 0x8221315C;
		  /* 8221315Ch */ case   23:  		/* oris R8, R7, 64 */
		/* 8221315Ch case   23:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 8221315Ch case   23:*/		return 0x82213160;
		  /* 82213160h */ case   24:  		/* stw R8, <#[R11]> */
		/* 82213160h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213160h case   24:*/		return 0x82213164;
		  /* 82213164h */ case   25:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82213164h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213164h case   25:*/		return 0x82213168;
		  /* 82213168h */ case   26:  		/* and R8, R8, R12 */
		/* 82213168h case   26:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 82213168h case   26:*/		return 0x8221316C;
		  /* 8221316Ch */ case   27:  		/* ori R8, R8, 13107 */
		/* 8221316Ch case   27:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3333);
		/* 8221316Ch case   27:*/		return 0x82213170;
		  /* 82213170h */ case   28:  		/* stw R8, <#[R11]> */
		/* 82213170h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213170h case   28:*/		return 0x82213174;
		  /* 82213174h */ case   29:  		/* lwz R7, <#[R31 + 32]> */
		/* 82213174h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 82213174h case   29:*/		return 0x82213178;
		  /* 82213178h */ case   30:  		/* rlwimi R8, R7, 20, 28, 28 */
		/* 82213178h case   30:*/		cpu::op::rlwimi<0,20,28,28>(regs,&regs.R8,regs.R7);
		/* 82213178h case   30:*/		return 0x8221317C;
		  /* 8221317Ch */ case   31:  		/* stw R8, <#[R11]> */
		/* 8221317Ch case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221317Ch case   31:*/		return 0x82213180;
		  /* 82213180h */ case   32:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213180h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213180h case   32:*/		return 0x82213184;
		  /* 82213184h */ case   33:  		/* lwz R7, <#[R31 + 32]> */
		/* 82213184h case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 82213184h case   33:*/		return 0x82213188;
		  /* 82213188h */ case   34:  		/* rlwimi R8, R7, 24, 24, 24 */
		/* 82213188h case   34:*/		cpu::op::rlwimi<0,24,24,24>(regs,&regs.R8,regs.R7);
		/* 82213188h case   34:*/		return 0x8221318C;
		  /* 8221318Ch */ case   35:  		/* stw R8, <#[R11]> */
		/* 8221318Ch case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221318Ch case   35:*/		return 0x82213190;
		  /* 82213190h */ case   36:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213190h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213190h case   36:*/		return 0x82213194;
		  /* 82213194h */ case   37:  		/* lwz R7, <#[R31 + 32]> */
		/* 82213194h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 82213194h case   37:*/		return 0x82213198;
		  /* 82213198h */ case   38:  		/* rlwimi R8, R7, 28, 20, 20 */
		/* 82213198h case   38:*/		cpu::op::rlwimi<0,28,20,20>(regs,&regs.R8,regs.R7);
		/* 82213198h case   38:*/		return 0x8221319C;
		  /* 8221319Ch */ case   39:  		/* stw R8, <#[R11]> */
		/* 8221319Ch case   39:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221319Ch case   39:*/		return 0x822131A0;
		  /* 822131A0h */ case   40:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 822131A0h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 822131A0h case   40:*/		return 0x822131A4;
		  /* 822131A4h */ case   41:  		/* lwz R7, <#[R31 + 32]> */
		/* 822131A4h case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 822131A4h case   41:*/		return 0x822131A8;
		  /* 822131A8h */ case   42:  		/* rlwimi R7, R8, 0, 17, 15 */
		/* 822131A8h case   42:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R7,regs.R8);
		/* 822131A8h case   42:*/		return 0x822131AC;
		  /* 822131ACh */ case   43:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822131ACh case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822131ACh case   43:*/		return 0x822131B0;
		  /* 822131B0h */ case   44:  		/* stw R7, <#[R11]> */
		/* 822131B0h case   44:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822131B0h case   44:*/		return 0x822131B4;
		  /* 822131B4h */ case   45:  		/* lwz R7, <#[R31 + 32]> */
		/* 822131B4h case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 822131B4h case   45:*/		return 0x822131B8;
		  /* 822131B8h */ case   46:  		/* rlwimi R7, R8, 0, 12, 10 */
		/* 822131B8h case   46:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R7,regs.R8);
		/* 822131B8h case   46:*/		return 0x822131BC;
		  /* 822131BCh */ case   47:  		/* stw R7, <#[R11]> */
		/* 822131BCh case   47:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822131BCh case   47:*/		return 0x822131C0;
		  /* 822131C0h */ case   48:  		/* addi R11, R11, 4 */
		/* 822131C0h case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822131C0h case   48:*/		return 0x822131C4;
		  /* 822131C4h */ case   49:  		/* lwz R8, <#[R31 + 20]> */
		/* 822131C4h case   49:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 822131C4h case   49:*/		return 0x822131C8;
		  /* 822131C8h */ case   50:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822131C8h case   50:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822131C8h case   50:*/		return 0x822131CC;
		  /* 822131CCh */ case   51:  		/* bc 12, CR0_EQ, 16 */
		/* 822131CCh case   51:*/		if ( regs.CR[0].eq ) { return 0x822131DC;  }
		/* 822131CCh case   51:*/		return 0x822131D0;
		  /* 822131D0h */ case   52:  		/* lwz R8, <#[R31 + 44]> */
		/* 822131D0h case   52:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 822131D0h case   52:*/		return 0x822131D4;
		  /* 822131D4h */ case   53:  		/* stw R8, <#[R11]> */
		/* 822131D4h case   53:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822131D4h case   53:*/		return 0x822131D8;
		  /* 822131D8h */ case   54:  		/* addi R11, R11, 4 */
		/* 822131D8h case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822131D8h case   54:*/		return 0x822131DC;
	}
	return 0x822131DC;
} // Block from 82213100h-822131DCh (55 instructions)

//////////////////////////////////////////////////////
// Block at 822131DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822131DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822131DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822131DC);
		  /* 822131DCh */ case    0:  		/* li R8, 73 */
		/* 822131DCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x49);
		/* 822131DCh case    0:*/		return 0x822131E0;
		  /* 822131E0h */ case    1:  		/* sth R8, <#[R11 + 2]> */
		/* 822131E0h case    1:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822131E0h case    1:*/		return 0x822131E4;
		  /* 822131E4h */ case    2:  		/* lwz R7, <#[R11]> */
		/* 822131E4h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822131E4h case    2:*/		return 0x822131E8;
		  /* 822131E8h */ case    3:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 822131E8h case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 822131E8h case    3:*/		return 0x822131EC;
		  /* 822131ECh */ case    4:  		/* stw R7, <#[R11]> */
		/* 822131ECh case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822131ECh case    4:*/		return 0x822131F0;
		  /* 822131F0h */ case    5:  		/* addi R11, R11, 4 */
		/* 822131F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822131F0h case    5:*/		return 0x822131F4;
		  /* 822131F4h */ case    6:  		/* sth R10, <#[R11 + 2]> */
		/* 822131F4h case    6:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822131F4h case    6:*/		return 0x822131F8;
		  /* 822131F8h */ case    7:  		/* lwz R7, <#[R11]> */
		/* 822131F8h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822131F8h case    7:*/		return 0x822131FC;
		  /* 822131FCh */ case    8:  		/* rlwimi R7, R9, 18, 8, 15 */
		/* 822131FCh case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R9);
		/* 822131FCh case    8:*/		return 0x82213200;
		  /* 82213200h */ case    9:  		/* stw R7, <#[R11]> */
		/* 82213200h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213200h case    9:*/		return 0x82213204;
		  /* 82213204h */ case   10:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213204h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213204h case   10:*/		return 0x82213208;
		  /* 82213208h */ case   11:  		/* stwu R7, <#[R11 + 4]> */
		/* 82213208h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213208h case   11:*/		return 0x8221320C;
		  /* 8221320Ch */ case   12:  		/* lwz R7, <#[R31 + 16]> */
		/* 8221320Ch case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 8221320Ch case   12:*/		return 0x82213210;
		  /* 82213210h */ case   13:  		/* rlwinm. R7, R7, 0, 9, 9 */
		/* 82213210h case   13:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R7,regs.R7);
		/* 82213210h case   13:*/		return 0x82213214;
		  /* 82213214h */ case   14:  		/* addi R11, R11, 4 */
		/* 82213214h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213214h case   14:*/		return 0x82213218;
		  /* 82213218h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 82213218h case   15:*/		if ( regs.CR[0].eq ) { return 0x82213228;  }
		/* 82213218h case   15:*/		return 0x8221321C;
		  /* 8221321Ch */ case   16:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221321Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221321Ch case   16:*/		return 0x82213220;
		  /* 82213220h */ case   17:  		/* stw R7, <#[R11]> */
		/* 82213220h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213220h case   17:*/		return 0x82213224;
		  /* 82213224h */ case   18:  		/* addi R11, R11, 4 */
		/* 82213224h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213224h case   18:*/		return 0x82213228;
	}
	return 0x82213228;
} // Block from 822131DCh-82213228h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82213228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213228);
		  /* 82213228h */ case    0:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213228h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213228h case    0:*/		return 0x8221322C;
		  /* 8221322Ch */ case    1:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 8221322Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 8221322Ch case    1:*/		return 0x82213230;
		  /* 82213230h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213230h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213240;  }
		/* 82213230h case    2:*/		return 0x82213234;
		  /* 82213234h */ case    3:  		/* lwz R7, <#[R31 + 40]> */
		/* 82213234h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000028) );
		/* 82213234h case    3:*/		return 0x82213238;
		  /* 82213238h */ case    4:  		/* stw R7, <#[R11]> */
		/* 82213238h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213238h case    4:*/		return 0x8221323C;
		  /* 8221323Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221323Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221323Ch case    5:*/		return 0x82213240;
	}
	return 0x82213240;
} // Block from 82213228h-82213240h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213240);
		  /* 82213240h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82213240h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213240h case    0:*/		return 0x82213244;
		  /* 82213244h */ case    1:  		/* li R7, 99 */
		/* 82213244h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x63);
		/* 82213244h case    1:*/		return 0x82213248;
		  /* 82213248h */ case    2:  		/* lwz R6, <#[R11]> */
		/* 82213248h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213248h case    2:*/		return 0x8221324C;
		  /* 8221324Ch */ case    3:  		/* rlwimi R6, R9, 18, 8, 15 */
		/* 8221324Ch case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R9);
		/* 8221324Ch case    3:*/		return 0x82213250;
		  /* 82213250h */ case    4:  		/* stw R6, <#[R11]> */
		/* 82213250h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82213250h case    4:*/		return 0x82213254;
		  /* 82213254h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213254h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213254h case    5:*/		return 0x82213258;
		  /* 82213258h */ case    6:  		/* sth R7, <#[R11 + 2]> */
		/* 82213258h case    6:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82213258h case    6:*/		return 0x8221325C;
		  /* 8221325Ch */ case    7:  		/* lwz R7, <#[R11]> */
		/* 8221325Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221325Ch case    7:*/		return 0x82213260;
		  /* 82213260h */ case    8:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 82213260h case    8:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 82213260h case    8:*/		return 0x82213264;
		  /* 82213264h */ case    9:  		/* stw R7, <#[R11]> */
		/* 82213264h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213264h case    9:*/		return 0x82213268;
		  /* 82213268h */ case   10:  		/* addi R11, R11, 4 */
		/* 82213268h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213268h case   10:*/		return 0x8221326C;
		  /* 8221326Ch */ case   11:  		/* sth R10, <#[R11 + 2]> */
		/* 8221326Ch case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221326Ch case   11:*/		return 0x82213270;
		  /* 82213270h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 82213270h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213270h case   12:*/		return 0x82213274;
		  /* 82213274h */ case   13:  		/* rlwimi R7, R9, 18, 8, 15 */
		/* 82213274h case   13:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R9);
		/* 82213274h case   13:*/		return 0x82213278;
		  /* 82213278h */ case   14:  		/* stw R7, <#[R11]> */
		/* 82213278h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213278h case   14:*/		return 0x8221327C;
		  /* 8221327Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 8221327Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221327Ch case   15:*/		return 0x82213280;
		  /* 82213280h */ case   16:  		/* sth R10, <#[R11 + 2]> */
		/* 82213280h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213280h case   16:*/		return 0x82213284;
		  /* 82213284h */ case   17:  		/* lwz R7, <#[R11]> */
		/* 82213284h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213284h case   17:*/		return 0x82213288;
		  /* 82213288h */ case   18:  		/* rlwimi R7, R9, 18, 8, 15 */
		/* 82213288h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R9);
		/* 82213288h case   18:*/		return 0x8221328C;
		  /* 8221328Ch */ case   19:  		/* stw R7, <#[R11]> */
		/* 8221328Ch case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221328Ch case   19:*/		return 0x82213290;
		  /* 82213290h */ case   20:  		/* addi R11, R11, 4 */
		/* 82213290h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213290h case   20:*/		return 0x82213294;
		  /* 82213294h */ case   21:  		/* sth R8, <#[R11 + 2]> */
		/* 82213294h case   21:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213294h case   21:*/		return 0x82213298;
		  /* 82213298h */ case   22:  		/* lwz R7, <#[R11]> */
		/* 82213298h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213298h case   22:*/		return 0x8221329C;
		  /* 8221329Ch */ case   23:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 8221329Ch case   23:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 8221329Ch case   23:*/		return 0x822132A0;
		  /* 822132A0h */ case   24:  		/* stw R7, <#[R11]> */
		/* 822132A0h case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132A0h case   24:*/		return 0x822132A4;
		  /* 822132A4h */ case   25:  		/* addi R11, R11, 4 */
		/* 822132A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822132A4h case   25:*/		return 0x822132A8;
		  /* 822132A8h */ case   26:  		/* sth R10, <#[R11 + 2]> */
		/* 822132A8h case   26:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822132A8h case   26:*/		return 0x822132AC;
		  /* 822132ACh */ case   27:  		/* lwz R7, <#[R11]> */
		/* 822132ACh case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132ACh case   27:*/		return 0x822132B0;
		  /* 822132B0h */ case   28:  		/* rlwimi R7, R9, 18, 8, 15 */
		/* 822132B0h case   28:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R9);
		/* 822132B0h case   28:*/		return 0x822132B4;
		  /* 822132B4h */ case   29:  		/* stw R7, <#[R11]> */
		/* 822132B4h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132B4h case   29:*/		return 0x822132B8;
		  /* 822132B8h */ case   30:  		/* addi R11, R11, 4 */
		/* 822132B8h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822132B8h case   30:*/		return 0x822132BC;
		  /* 822132BCh */ case   31:  		/* sth R10, <#[R11 + 2]> */
		/* 822132BCh case   31:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822132BCh case   31:*/		return 0x822132C0;
		  /* 822132C0h */ case   32:  		/* lwz R7, <#[R11]> */
		/* 822132C0h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132C0h case   32:*/		return 0x822132C4;
		  /* 822132C4h */ case   33:  		/* rlwimi R7, R9, 18, 8, 15 */
		/* 822132C4h case   33:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R9);
		/* 822132C4h case   33:*/		return 0x822132C8;
		  /* 822132C8h */ case   34:  		/* stw R7, <#[R11]> */
		/* 822132C8h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132C8h case   34:*/		return 0x822132CC;
		  /* 822132CCh */ case   35:  		/* lwz R7, <#[R31 + 20]> */
		/* 822132CCh case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822132CCh case   35:*/		return 0x822132D0;
		  /* 822132D0h */ case   36:  		/* stwu R7, <#[R11 + 4]> */
		/* 822132D0h case   36:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822132D0h case   36:*/		return 0x822132D4;
		  /* 822132D4h */ case   37:  		/* lwz R7, <#[R31 + 20]> */
		/* 822132D4h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822132D4h case   37:*/		return 0x822132D8;
		  /* 822132D8h */ case   38:  		/* addi R11, R11, 4 */
		/* 822132D8h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822132D8h case   38:*/		return 0x822132DC;
		  /* 822132DCh */ case   39:  		/* rlwinm. R7, R7, 0, 9, 9 */
		/* 822132DCh case   39:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R7,regs.R7);
		/* 822132DCh case   39:*/		return 0x822132E0;
		  /* 822132E0h */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 822132E0h case   40:*/		if ( regs.CR[0].eq ) { return 0x822132F0;  }
		/* 822132E0h case   40:*/		return 0x822132E4;
		  /* 822132E4h */ case   41:  		/* lwz R7, <#[R31 + 32]> */
		/* 822132E4h case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 822132E4h case   41:*/		return 0x822132E8;
		  /* 822132E8h */ case   42:  		/* stw R7, <#[R11]> */
		/* 822132E8h case   42:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822132E8h case   42:*/		return 0x822132EC;
		  /* 822132ECh */ case   43:  		/* addi R11, R11, 4 */
		/* 822132ECh case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822132ECh case   43:*/		return 0x822132F0;
	}
	return 0x822132F0;
} // Block from 82213240h-822132F0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 822132F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822132F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822132F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822132F0);
		  /* 822132F0h */ case    0:  		/* lwz R7, <#[R31 + 20]> */
		/* 822132F0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822132F0h case    0:*/		return 0x822132F4;
		  /* 822132F4h */ case    1:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 822132F4h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 822132F4h case    1:*/		return 0x822132F8;
		  /* 822132F8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822132F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213308;  }
		/* 822132F8h case    2:*/		return 0x822132FC;
		  /* 822132FCh */ case    3:  		/* lwz R7, <#[R31 + 44]> */
		/* 822132FCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000002C) );
		/* 822132FCh case    3:*/		return 0x82213300;
		  /* 82213300h */ case    4:  		/* stw R7, <#[R11]> */
		/* 82213300h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213300h case    4:*/		return 0x82213304;
		  /* 82213304h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213304h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213304h case    5:*/		return 0x82213308;
	}
	return 0x82213308;
} // Block from 822132F0h-82213308h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213308);
		  /* 82213308h */ case    0:  		/* sth R8, <#[R11 + 2]> */
		/* 82213308h case    0:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213308h case    0:*/		return 0x8221330C;
		  /* 8221330Ch */ case    1:  		/* lwz R8, <#[R11]> */
		/* 8221330Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221330Ch case    1:*/		return 0x82213310;
		  /* 82213310h */ case    2:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82213310h case    2:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82213310h case    2:*/		return 0x82213314;
		  /* 82213314h */ case    3:  		/* stw R8, <#[R11]> */
		/* 82213314h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213314h case    3:*/		return 0x82213318;
		  /* 82213318h */ case    4:  		/* addi R11, R11, 4 */
		/* 82213318h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213318h case    4:*/		return 0x8221331C;
		  /* 8221331Ch */ case    5:  		/* sth R10, <#[R11 + 2]> */
		/* 8221331Ch case    5:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221331Ch case    5:*/		return 0x82213320;
		  /* 82213320h */ case    6:  		/* lwz R8, <#[R11]> */
		/* 82213320h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213320h case    6:*/		return 0x82213324;
		  /* 82213324h */ case    7:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 82213324h case    7:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 82213324h case    7:*/		return 0x82213328;
		  /* 82213328h */ case    8:  		/* stw R8, <#[R11]> */
		/* 82213328h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213328h case    8:*/		return 0x8221332C;
		  /* 8221332Ch */ case    9:  		/* lwz R8, <#[R31 + 16]> */
		/* 8221332Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8221332Ch case    9:*/		return 0x82213330;
		  /* 82213330h */ case   10:  		/* stwu R8, <#[R11 + 4]> */
		/* 82213330h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213330h case   10:*/		return 0x82213334;
		  /* 82213334h */ case   11:  		/* addi R11, R11, 4 */
		/* 82213334h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213334h case   11:*/		return 0x82213338;
		  /* 82213338h */ case   12:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213338h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213338h case   12:*/		return 0x8221333C;
		  /* 8221333Ch */ case   13:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 8221333Ch case   13:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 8221333Ch case   13:*/		return 0x82213340;
		  /* 82213340h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 82213340h case   14:*/		if ( regs.CR[0].eq ) { return 0x82213350;  }
		/* 82213340h case   14:*/		return 0x82213344;
		  /* 82213344h */ case   15:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213344h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213344h case   15:*/		return 0x82213348;
		  /* 82213348h */ case   16:  		/* stw R8, <#[R11]> */
		/* 82213348h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213348h case   16:*/		return 0x8221334C;
		  /* 8221334Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 8221334Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221334Ch case   17:*/		return 0x82213350;
	}
	return 0x82213350;
} // Block from 82213308h-82213350h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82213350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213350);
		  /* 82213350h */ case    0:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213350h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213350h case    0:*/		return 0x82213354;
		  /* 82213354h */ case    1:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 82213354h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82213354h case    1:*/		return 0x82213358;
		  /* 82213358h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213358h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213368;  }
		/* 82213358h case    2:*/		return 0x8221335C;
		  /* 8221335Ch */ case    3:  		/* lwz R8, <#[R31 + 40]> */
		/* 8221335Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 8221335Ch case    3:*/		return 0x82213360;
		  /* 82213360h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82213360h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213360h case    4:*/		return 0x82213364;
		  /* 82213364h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213364h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213364h case    5:*/		return 0x82213368;
	}
	return 0x82213368;
} // Block from 82213350h-82213368h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213368);
		  /* 82213368h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82213368h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213368h case    0:*/		return 0x8221336C;
		  /* 8221336Ch */ case    1:  		/* addi R3, R11, 4 */
		/* 8221336Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 8221336Ch case    1:*/		return 0x82213370;
		  /* 82213370h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82213370h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213370h case    2:*/		return 0x82213374;
		  /* 82213374h */ case    3:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 82213374h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 82213374h case    3:*/		return 0x82213378;
		  /* 82213378h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82213378h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213378h case    4:*/		return 0x8221337C;
		  /* 8221337Ch */ case    5:  		/* addi R1, R1, 112 */
		/* 8221337Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221337Ch case    5:*/		return 0x82213380;
		  /* 82213380h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82213380h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82213380h case    6:*/		return 0x82213384;
		  /* 82213384h */ case    7:  		/* mtspr LR, R12 */
		/* 82213384h case    7:*/		regs.LR = regs.R12;
		/* 82213384h case    7:*/		return 0x82213388;
		  /* 82213388h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 82213388h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82213388h case    8:*/		return 0x8221338C;
		  /* 8221338Ch */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 8221338Ch case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221338Ch case    9:*/		return 0x82213390;
		  /* 82213390h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82213390h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82213390h case   10:*/		return 0x82213394;
	}
	return 0x82213394;
} // Block from 82213368h-82213394h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82213394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213394);
		  /* 82213394h */ case    0:  		/* nop */
		/* 82213394h case    0:*/		cpu::op::nop();
		/* 82213394h case    0:*/		return 0x82213398;
	}
	return 0x82213398;
} // Block from 82213394h-82213398h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82213398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213398);
		  /* 82213398h */ case    0:  		/* mfspr R12, LR */
		/* 82213398h case    0:*/		regs.R12 = regs.LR;
		/* 82213398h case    0:*/		return 0x8221339C;
		  /* 8221339Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221339Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221339Ch case    1:*/		return 0x822133A0;
		  /* 822133A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 822133A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822133A0h case    2:*/		return 0x822133A4;
		  /* 822133A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 822133A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822133A4h case    3:*/		return 0x822133A8;
		  /* 822133A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 822133A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822133A8h case    4:*/		return 0x822133AC;
		  /* 822133ACh */ case    5:  		/* mr R31, R4 */
		/* 822133ACh case    5:*/		regs.R31 = regs.R4;
		/* 822133ACh case    5:*/		return 0x822133B0;
		  /* 822133B0h */ case    6:  		/* mr R30, R5 */
		/* 822133B0h case    6:*/		regs.R30 = regs.R5;
		/* 822133B0h case    6:*/		return 0x822133B4;
		  /* 822133B4h */ case    7:  		/* bl -16780 */
		/* 822133B4h case    7:*/		regs.LR = 0x822133B8; return 0x8220F228;
		/* 822133B4h case    7:*/		return 0x822133B8;
		  /* 822133B8h */ case    8:  		/* li R11, 34 */
		/* 822133B8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 822133B8h case    8:*/		return 0x822133BC;
		  /* 822133BCh */ case    9:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 822133BCh case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 822133BCh case    9:*/		return 0x822133C0;
		  /* 822133C0h */ case   10:  		/* sth R11, <#[R30 + 2]> */
		/* 822133C0h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 822133C0h case   10:*/		return 0x822133C4;
		  /* 822133C4h */ case   11:  		/* li R9, 1 */
		/* 822133C4h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822133C4h case   11:*/		return 0x822133C8;
		  /* 822133C8h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 822133C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822133C8h case   12:*/		return 0x822133CC;
		  /* 822133CCh */ case   13:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 822133CCh case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 822133CCh case   13:*/		return 0x822133D0;
		  /* 822133D0h */ case   14:  		/* stw R11, <#[R30]> */
		/* 822133D0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822133D0h case   14:*/		return 0x822133D4;
		  /* 822133D4h */ case   15:  		/* addi R11, R30, 4 */
		/* 822133D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 822133D4h case   15:*/		return 0x822133D8;
		  /* 822133D8h */ case   16:  		/* sth R10, <#[R30 + 6]> */
		/* 822133D8h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 822133D8h case   16:*/		return 0x822133DC;
		  /* 822133DCh */ case   17:  		/* lwz R8, <#[R30 + 4]> */
		/* 822133DCh case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822133DCh case   17:*/		return 0x822133E0;
	}
	return 0x822133E0;
} // Block from 82213398h-822133E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 822133E0h
// Function '?DoMMul@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822133E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822133E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822133E0);
		  /* 822133E0h */ case    0:  		/* addi R11, R11, 4 */
		/* 822133E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822133E0h case    0:*/		return 0x822133E4;
		  /* 822133E4h */ case    1:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 822133E4h case    1:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 822133E4h case    1:*/		return 0x822133E8;
		  /* 822133E8h */ case    2:  		/* stw R8, <#[R30 + 4]> */
		/* 822133E8h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822133E8h case    2:*/		return 0x822133EC;
		  /* 822133ECh */ case    3:  		/* lwz R8, <#[R31 + 16]> */
		/* 822133ECh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 822133ECh case    3:*/		return 0x822133F0;
		  /* 822133F0h */ case    4:  		/* sth R8, <#[R11 + 2]> */
		/* 822133F0h case    4:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822133F0h case    4:*/		return 0x822133F4;
		  /* 822133F4h */ case    5:  		/* lwz R8, <#[R11]> */
		/* 822133F4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822133F4h case    5:*/		return 0x822133F8;
		  /* 822133F8h */ case    6:  		/* lwz R7, <#[R31 + 16]> */
		/* 822133F8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822133F8h case    6:*/		return 0x822133FC;
		  /* 822133FCh */ case    7:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822133FCh case    7:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822133FCh case    7:*/		return 0x82213400;
		  /* 82213400h */ case    8:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82213400h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82213400h case    8:*/		return 0x82213404;
		  /* 82213404h */ case    9:  		/* stw R7, <#[R11]> */
		/* 82213404h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213404h case    9:*/		return 0x82213408;
		  /* 82213408h */ case   10:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213408h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213408h case   10:*/		return 0x8221340C;
		  /* 8221340Ch */ case   11:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 8221340Ch case   11:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 8221340Ch case   11:*/		return 0x82213410;
		  /* 82213410h */ case   12:  		/* oris R8, R7, 64 */
		/* 82213410h case   12:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 82213410h case   12:*/		return 0x82213414;
		  /* 82213414h */ case   13:  		/* stw R8, <#[R11]> */
		/* 82213414h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213414h case   13:*/		return 0x82213418;
		  /* 82213418h */ case   14:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82213418h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213418h case   14:*/		return 0x8221341C;
		  /* 8221341Ch */ case   15:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221341Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221341Ch case   15:*/		return 0x82213420;
		  /* 82213420h */ case   16:  		/* rlwimi R8, R7, 0, 29, 31 */
		/* 82213420h case   16:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R7);
		/* 82213420h case   16:*/		return 0x82213424;
		  /* 82213424h */ case   17:  		/* stw R8, <#[R11]> */
		/* 82213424h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213424h case   17:*/		return 0x82213428;
		  /* 82213428h */ case   18:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213428h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213428h case   18:*/		return 0x8221342C;
		  /* 8221342Ch */ case   19:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221342Ch case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221342Ch case   19:*/		return 0x82213430;
		  /* 82213430h */ case   20:  		/* rlwimi R8, R7, 0, 25, 27 */
		/* 82213430h case   20:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R8,regs.R7);
		/* 82213430h case   20:*/		return 0x82213434;
		  /* 82213434h */ case   21:  		/* stw R8, <#[R11]> */
		/* 82213434h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213434h case   21:*/		return 0x82213438;
		  /* 82213438h */ case   22:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213438h case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213438h case   22:*/		return 0x8221343C;
		  /* 8221343Ch */ case   23:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221343Ch case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221343Ch case   23:*/		return 0x82213440;
		  /* 82213440h */ case   24:  		/* rlwimi R8, R7, 0, 21, 23 */
		/* 82213440h case   24:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R8,regs.R7);
		/* 82213440h case   24:*/		return 0x82213444;
		  /* 82213444h */ case   25:  		/* stw R8, <#[R11]> */
		/* 82213444h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213444h case   25:*/		return 0x82213448;
		  /* 82213448h */ case   26:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213448h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213448h case   26:*/		return 0x8221344C;
		  /* 8221344Ch */ case   27:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221344Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221344Ch case   27:*/		return 0x82213450;
		  /* 82213450h */ case   28:  		/* rlwimi R7, R8, 0, 20, 16 */
		/* 82213450h case   28:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R7,regs.R8);
		/* 82213450h case   28:*/		return 0x82213454;
		  /* 82213454h */ case   29:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82213454h case   29:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82213454h case   29:*/		return 0x82213458;
		  /* 82213458h */ case   30:  		/* stw R7, <#[R11]> */
		/* 82213458h case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213458h case   30:*/		return 0x8221345C;
		  /* 8221345Ch */ case   31:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221345Ch case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221345Ch case   31:*/		return 0x82213460;
		  /* 82213460h */ case   32:  		/* rlwimi R8, R7, 0, 28, 28 */
		/* 82213460h case   32:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R8,regs.R7);
		/* 82213460h case   32:*/		return 0x82213464;
		  /* 82213464h */ case   33:  		/* stw R8, <#[R11]> */
		/* 82213464h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213464h case   33:*/		return 0x82213468;
		  /* 82213468h */ case   34:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213468h case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213468h case   34:*/		return 0x8221346C;
		  /* 8221346Ch */ case   35:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221346Ch case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221346Ch case   35:*/		return 0x82213470;
		  /* 82213470h */ case   36:  		/* rlwimi R8, R7, 0, 24, 24 */
		/* 82213470h case   36:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R8,regs.R7);
		/* 82213470h case   36:*/		return 0x82213474;
		  /* 82213474h */ case   37:  		/* stw R8, <#[R11]> */
		/* 82213474h case   37:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213474h case   37:*/		return 0x82213478;
		  /* 82213478h */ case   38:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213478h case   38:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213478h case   38:*/		return 0x8221347C;
		  /* 8221347Ch */ case   39:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221347Ch case   39:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221347Ch case   39:*/		return 0x82213480;
		  /* 82213480h */ case   40:  		/* rlwimi R8, R7, 0, 20, 20 */
		/* 82213480h case   40:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R8,regs.R7);
		/* 82213480h case   40:*/		return 0x82213484;
		  /* 82213484h */ case   41:  		/* stw R8, <#[R11]> */
		/* 82213484h case   41:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213484h case   41:*/		return 0x82213488;
		  /* 82213488h */ case   42:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213488h case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213488h case   42:*/		return 0x8221348C;
		  /* 8221348Ch */ case   43:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221348Ch case   43:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221348Ch case   43:*/		return 0x82213490;
		  /* 82213490h */ case   44:  		/* rlwimi R8, R7, 0, 16, 16 */
		/* 82213490h case   44:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R8,regs.R7);
		/* 82213490h case   44:*/		return 0x82213494;
		  /* 82213494h */ case   45:  		/* stw R8, <#[R11]> */
		/* 82213494h case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213494h case   45:*/		return 0x82213498;
		  /* 82213498h */ case   46:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213498h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213498h case   46:*/		return 0x8221349C;
		  /* 8221349Ch */ case   47:  		/* lwz R7, <#[R31 + 28]> */
		/* 8221349Ch case   47:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221349Ch case   47:*/		return 0x822134A0;
		  /* 822134A0h */ case   48:  		/* rlwimi R8, R7, 0, 11, 11 */
		/* 822134A0h case   48:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R8,regs.R7);
		/* 822134A0h case   48:*/		return 0x822134A4;
		  /* 822134A4h */ case   49:  		/* stw R8, <#[R11]> */
		/* 822134A4h case   49:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822134A4h case   49:*/		return 0x822134A8;
		  /* 822134A8h */ case   50:  		/* addi R11, R11, 4 */
		/* 822134A8h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822134A8h case   50:*/		return 0x822134AC;
		  /* 822134ACh */ case   51:  		/* lwz R8, <#[R31 + 16]> */
		/* 822134ACh case   51:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 822134ACh case   51:*/		return 0x822134B0;
		  /* 822134B0h */ case   52:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822134B0h case   52:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822134B0h case   52:*/		return 0x822134B4;
		  /* 822134B4h */ case   53:  		/* bc 12, CR0_EQ, 16 */
		/* 822134B4h case   53:*/		if ( regs.CR[0].eq ) { return 0x822134C4;  }
		/* 822134B4h case   53:*/		return 0x822134B8;
		  /* 822134B8h */ case   54:  		/* lwz R8, <#[R31 + 40]> */
		/* 822134B8h case   54:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 822134B8h case   54:*/		return 0x822134BC;
		  /* 822134BCh */ case   55:  		/* stw R8, <#[R11]> */
		/* 822134BCh case   55:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822134BCh case   55:*/		return 0x822134C0;
		  /* 822134C0h */ case   56:  		/* addi R11, R11, 4 */
		/* 822134C0h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822134C0h case   56:*/		return 0x822134C4;
	}
	return 0x822134C4;
} // Block from 822133E0h-822134C4h (57 instructions)

//////////////////////////////////////////////////////
// Block at 822134C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822134C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822134C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822134C4);
		  /* 822134C4h */ case    0:  		/* lwz R8, <#[R31 + 16]> */
		/* 822134C4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 822134C4h case    0:*/		return 0x822134C8;
		  /* 822134C8h */ case    1:  		/* sth R8, <#[R11 + 2]> */
		/* 822134C8h case    1:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822134C8h case    1:*/		return 0x822134CC;
		  /* 822134CCh */ case    2:  		/* lwz R8, <#[R11]> */
		/* 822134CCh case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822134CCh case    2:*/		return 0x822134D0;
		  /* 822134D0h */ case    3:  		/* lwz R7, <#[R31 + 16]> */
		/* 822134D0h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822134D0h case    3:*/		return 0x822134D4;
		  /* 822134D4h */ case    4:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822134D4h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822134D4h case    4:*/		return 0x822134D8;
		  /* 822134D8h */ case    5:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822134D8h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822134D8h case    5:*/		return 0x822134DC;
		  /* 822134DCh */ case    6:  		/* stw R7, <#[R11]> */
		/* 822134DCh case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822134DCh case    6:*/		return 0x822134E0;
		  /* 822134E0h */ case    7:  		/* lwz R7, <#[R31 + 16]> */
		/* 822134E0h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822134E0h case    7:*/		return 0x822134E4;
		  /* 822134E4h */ case    8:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 822134E4h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 822134E4h case    8:*/		return 0x822134E8;
		  /* 822134E8h */ case    9:  		/* oris R8, R7, 64 */
		/* 822134E8h case    9:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 822134E8h case    9:*/		return 0x822134EC;
		  /* 822134ECh */ case   10:  		/* stw R8, <#[R11]> */
		/* 822134ECh case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822134ECh case   10:*/		return 0x822134F0;
		  /* 822134F0h */ case   11:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822134F0h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822134F0h case   11:*/		return 0x822134F4;
		  /* 822134F4h */ case   12:  		/* lwz R7, <#[R31 + 28]> */
		/* 822134F4h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822134F4h case   12:*/		return 0x822134F8;
		  /* 822134F8h */ case   13:  		/* rlwimi R8, R7, 0, 29, 31 */
		/* 822134F8h case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R7);
		/* 822134F8h case   13:*/		return 0x822134FC;
		  /* 822134FCh */ case   14:  		/* stw R8, <#[R11]> */
		/* 822134FCh case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822134FCh case   14:*/		return 0x82213500;
		  /* 82213500h */ case   15:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213500h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213500h case   15:*/		return 0x82213504;
		  /* 82213504h */ case   16:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213504h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213504h case   16:*/		return 0x82213508;
		  /* 82213508h */ case   17:  		/* rlwimi R8, R7, 0, 25, 27 */
		/* 82213508h case   17:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R8,regs.R7);
		/* 82213508h case   17:*/		return 0x8221350C;
		  /* 8221350Ch */ case   18:  		/* stw R8, <#[R11]> */
		/* 8221350Ch case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221350Ch case   18:*/		return 0x82213510;
		  /* 82213510h */ case   19:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213510h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213510h case   19:*/		return 0x82213514;
		  /* 82213514h */ case   20:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213514h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213514h case   20:*/		return 0x82213518;
		  /* 82213518h */ case   21:  		/* rlwimi R8, R7, 0, 21, 23 */
		/* 82213518h case   21:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R8,regs.R7);
		/* 82213518h case   21:*/		return 0x8221351C;
		  /* 8221351Ch */ case   22:  		/* stw R8, <#[R11]> */
		/* 8221351Ch case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221351Ch case   22:*/		return 0x82213520;
		  /* 82213520h */ case   23:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213520h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213520h case   23:*/		return 0x82213524;
		  /* 82213524h */ case   24:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213524h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213524h case   24:*/		return 0x82213528;
		  /* 82213528h */ case   25:  		/* rlwimi R7, R8, 0, 20, 16 */
		/* 82213528h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R7,regs.R8);
		/* 82213528h case   25:*/		return 0x8221352C;
		  /* 8221352Ch */ case   26:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 8221352Ch case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 8221352Ch case   26:*/		return 0x82213530;
		  /* 82213530h */ case   27:  		/* stw R7, <#[R11]> */
		/* 82213530h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213530h case   27:*/		return 0x82213534;
		  /* 82213534h */ case   28:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213534h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213534h case   28:*/		return 0x82213538;
		  /* 82213538h */ case   29:  		/* rlwimi R8, R7, 0, 28, 28 */
		/* 82213538h case   29:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R8,regs.R7);
		/* 82213538h case   29:*/		return 0x8221353C;
		  /* 8221353Ch */ case   30:  		/* stw R8, <#[R11]> */
		/* 8221353Ch case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221353Ch case   30:*/		return 0x82213540;
		  /* 82213540h */ case   31:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213540h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213540h case   31:*/		return 0x82213544;
		  /* 82213544h */ case   32:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213544h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213544h case   32:*/		return 0x82213548;
		  /* 82213548h */ case   33:  		/* rlwimi R8, R7, 0, 24, 24 */
		/* 82213548h case   33:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R8,regs.R7);
		/* 82213548h case   33:*/		return 0x8221354C;
		  /* 8221354Ch */ case   34:  		/* stw R8, <#[R11]> */
		/* 8221354Ch case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221354Ch case   34:*/		return 0x82213550;
		  /* 82213550h */ case   35:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213550h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213550h case   35:*/		return 0x82213554;
		  /* 82213554h */ case   36:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213554h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213554h case   36:*/		return 0x82213558;
		  /* 82213558h */ case   37:  		/* rlwimi R8, R7, 0, 20, 20 */
		/* 82213558h case   37:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R8,regs.R7);
		/* 82213558h case   37:*/		return 0x8221355C;
		  /* 8221355Ch */ case   38:  		/* stw R8, <#[R11]> */
		/* 8221355Ch case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221355Ch case   38:*/		return 0x82213560;
		  /* 82213560h */ case   39:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213560h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213560h case   39:*/		return 0x82213564;
		  /* 82213564h */ case   40:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213564h case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213564h case   40:*/		return 0x82213568;
		  /* 82213568h */ case   41:  		/* rlwimi R8, R7, 0, 16, 16 */
		/* 82213568h case   41:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R8,regs.R7);
		/* 82213568h case   41:*/		return 0x8221356C;
		  /* 8221356Ch */ case   42:  		/* stw R8, <#[R11]> */
		/* 8221356Ch case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221356Ch case   42:*/		return 0x82213570;
		  /* 82213570h */ case   43:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82213570h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82213570h case   43:*/		return 0x82213574;
		  /* 82213574h */ case   44:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213574h case   44:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213574h case   44:*/		return 0x82213578;
		  /* 82213578h */ case   45:  		/* rlwimi R8, R7, 0, 11, 11 */
		/* 82213578h case   45:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R8,regs.R7);
		/* 82213578h case   45:*/		return 0x8221357C;
		  /* 8221357Ch */ case   46:  		/* stw R8, <#[R11]> */
		/* 8221357Ch case   46:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221357Ch case   46:*/		return 0x82213580;
		  /* 82213580h */ case   47:  		/* addi R11, R11, 4 */
		/* 82213580h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213580h case   47:*/		return 0x82213584;
		  /* 82213584h */ case   48:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213584h case   48:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213584h case   48:*/		return 0x82213588;
		  /* 82213588h */ case   49:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 82213588h case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82213588h case   49:*/		return 0x8221358C;
		  /* 8221358Ch */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 8221358Ch case   50:*/		if ( regs.CR[0].eq ) { return 0x8221359C;  }
		/* 8221358Ch case   50:*/		return 0x82213590;
		  /* 82213590h */ case   51:  		/* lwz R8, <#[R31 + 40]> */
		/* 82213590h case   51:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 82213590h case   51:*/		return 0x82213594;
		  /* 82213594h */ case   52:  		/* stw R8, <#[R11]> */
		/* 82213594h case   52:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213594h case   52:*/		return 0x82213598;
		  /* 82213598h */ case   53:  		/* addi R11, R11, 4 */
		/* 82213598h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213598h case   53:*/		return 0x8221359C;
	}
	return 0x8221359C;
} // Block from 822134C4h-8221359Ch (54 instructions)

//////////////////////////////////////////////////////
// Block at 8221359Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221359C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221359C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221359C);
		  /* 8221359Ch */ case    0:  		/* li R7, 85 */
		/* 8221359Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x55);
		/* 8221359Ch case    0:*/		return 0x822135A0;
		  /* 822135A0h */ case    1:  		/* li R8, 17 */
		/* 822135A0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 822135A0h case    1:*/		return 0x822135A4;
		  /* 822135A4h */ case    2:  		/* sth R7, <#[R11 + 2]> */
		/* 822135A4h case    2:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822135A4h case    2:*/		return 0x822135A8;
		  /* 822135A8h */ case    3:  		/* li R12, -30584 */
		/* 822135A8h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822135A8h case    3:*/		return 0x822135AC;
		  /* 822135ACh */ case    4:  		/* lwz R5, <#[R11]> */
		/* 822135ACh case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822135ACh case    4:*/		return 0x822135B0;
		  /* 822135B0h */ case    5:  		/* li R7, 73 */
		/* 822135B0h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x49);
		/* 822135B0h case    5:*/		return 0x822135B4;
		  /* 822135B4h */ case    6:  		/* lwz R6, <#[R31]> */
		/* 822135B4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 822135B4h case    6:*/		return 0x822135B8;
		  /* 822135B8h */ case    7:  		/* rlwimi R6, R5, 0, 16, 2 */
		/* 822135B8h case    7:*/		cpu::op::rlwimi<0,0,16,2>(regs,&regs.R6,regs.R5);
		/* 822135B8h case    7:*/		return 0x822135BC;
		  /* 822135BCh */ case    8:  		/* stw R6, <#[R11]> */
		/* 822135BCh case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822135BCh case    8:*/		return 0x822135C0;
		  /* 822135C0h */ case    9:  		/* addi R11, R11, 4 */
		/* 822135C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822135C0h case    9:*/		return 0x822135C4;
		  /* 822135C4h */ case   10:  		/* sth R10, <#[R11 + 2]> */
		/* 822135C4h case   10:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822135C4h case   10:*/		return 0x822135C8;
		  /* 822135C8h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 822135C8h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822135C8h case   11:*/		return 0x822135CC;
		  /* 822135CCh */ case   12:  		/* rlwimi R6, R9, 18, 8, 15 */
		/* 822135CCh case   12:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R9);
		/* 822135CCh case   12:*/		return 0x822135D0;
		  /* 822135D0h */ case   13:  		/* stw R6, <#[R11]> */
		/* 822135D0h case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822135D0h case   13:*/		return 0x822135D4;
		  /* 822135D4h */ case   14:  		/* addi R11, R11, 4 */
		/* 822135D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822135D4h case   14:*/		return 0x822135D8;
		  /* 822135D8h */ case   15:  		/* sth R10, <#[R11 + 2]> */
		/* 822135D8h case   15:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822135D8h case   15:*/		return 0x822135DC;
		  /* 822135DCh */ case   16:  		/* lwz R9, <#[R11]> */
		/* 822135DCh case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822135DCh case   16:*/		return 0x822135E0;
		  /* 822135E0h */ case   17:  		/* rlwimi R9, R8, 18, 8, 15 */
		/* 822135E0h case   17:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R8);
		/* 822135E0h case   17:*/		return 0x822135E4;
		  /* 822135E4h */ case   18:  		/* stw R9, <#[R11]> */
		/* 822135E4h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822135E4h case   18:*/		return 0x822135E8;
		  /* 822135E8h */ case   19:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822135E8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822135E8h case   19:*/		return 0x822135EC;
		  /* 822135ECh */ case   20:  		/* and R9, R9, R12 */
		/* 822135ECh case   20:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 822135ECh case   20:*/		return 0x822135F0;
		  /* 822135F0h */ case   21:  		/* stw R9, <#[R11]> */
		/* 822135F0h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822135F0h case   21:*/		return 0x822135F4;
		  /* 822135F4h */ case   22:  		/* addi R11, R11, 4 */
		/* 822135F4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822135F4h case   22:*/		return 0x822135F8;
		  /* 822135F8h */ case   23:  		/* sth R7, <#[R11 + 2]> */
		/* 822135F8h case   23:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822135F8h case   23:*/		return 0x822135FC;
		  /* 822135FCh */ case   24:  		/* lwz R9, <#[R11]> */
		/* 822135FCh case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822135FCh case   24:*/		return 0x82213600;
		  /* 82213600h */ case   25:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82213600h case   25:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82213600h case   25:*/		return 0x82213604;
		  /* 82213604h */ case   26:  		/* stw R9, <#[R11]> */
		/* 82213604h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213604h case   26:*/		return 0x82213608;
		  /* 82213608h */ case   27:  		/* addi R11, R11, 4 */
		/* 82213608h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213608h case   27:*/		return 0x8221360C;
		  /* 8221360Ch */ case   28:  		/* lwz R9, <#[R31 + 4]> */
		/* 8221360Ch case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8221360Ch case   28:*/		return 0x82213610;
		  /* 82213610h */ case   29:  		/* sth R9, <#[R11 + 2]> */
		/* 82213610h case   29:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82213610h case   29:*/		return 0x82213614;
		  /* 82213614h */ case   30:  		/* lwz R7, <#[R11]> */
		/* 82213614h case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213614h case   30:*/		return 0x82213618;
		  /* 82213618h */ case   31:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213618h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213618h case   31:*/		return 0x8221361C;
		  /* 8221361Ch */ case   32:  		/* rlwimi R9, R7, 0, 16, 9 */
		/* 8221361Ch case   32:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R7);
		/* 8221361Ch case   32:*/		return 0x82213620;
		  /* 82213620h */ case   33:  		/* stw R9, <#[R11]> */
		/* 82213620h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213620h case   33:*/		return 0x82213624;
		  /* 82213624h */ case   34:  		/* lwz R7, <#[R11]> */
		/* 82213624h case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213624h case   34:*/		return 0x82213628;
		  /* 82213628h */ case   35:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213628h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213628h case   35:*/		return 0x8221362C;
		  /* 8221362Ch */ case   36:  		/* rlwimi R9, R7, 0, 9, 7 */
		/* 8221362Ch case   36:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R7);
		/* 8221362Ch case   36:*/		return 0x82213630;
		  /* 82213630h */ case   37:  		/* stw R9, <#[R11]> */
		/* 82213630h case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213630h case   37:*/		return 0x82213634;
		  /* 82213634h */ case   38:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82213634h case   38:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82213634h case   38:*/		return 0x82213638;
		  /* 82213638h */ case   39:  		/* lwz R7, <#[R31 + 4]> */
		/* 82213638h case   39:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82213638h case   39:*/		return 0x8221363C;
		  /* 8221363Ch */ case   40:  		/* rlwimi R7, R9, 0, 10, 8 */
		/* 8221363Ch case   40:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R7,regs.R9);
		/* 8221363Ch case   40:*/		return 0x82213640;
		  /* 82213640h */ case   41:  		/* stw R7, <#[R11]> */
		/* 82213640h case   41:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213640h case   41:*/		return 0x82213644;
		  /* 82213644h */ case   42:  		/* addi R11, R11, 4 */
		/* 82213644h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213644h case   42:*/		return 0x82213648;
		  /* 82213648h */ case   43:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213648h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213648h case   43:*/		return 0x8221364C;
		  /* 8221364Ch */ case   44:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8221364Ch case   44:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8221364Ch case   44:*/		return 0x82213650;
		  /* 82213650h */ case   45:  		/* bc 12, CR0_EQ, 16 */
		/* 82213650h case   45:*/		if ( regs.CR[0].eq ) { return 0x82213660;  }
		/* 82213650h case   45:*/		return 0x82213654;
		  /* 82213654h */ case   46:  		/* lwz R9, <#[R31 + 8]> */
		/* 82213654h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82213654h case   46:*/		return 0x82213658;
		  /* 82213658h */ case   47:  		/* stw R9, <#[R11]> */
		/* 82213658h case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213658h case   47:*/		return 0x8221365C;
		  /* 8221365Ch */ case   48:  		/* addi R11, R11, 4 */
		/* 8221365Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221365Ch case   48:*/		return 0x82213660;
	}
	return 0x82213660;
} // Block from 8221359Ch-82213660h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82213660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213660);
		  /* 82213660h */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213660h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213660h case    0:*/		return 0x82213664;
		  /* 82213664h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213664h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213664h case    1:*/		return 0x82213668;
		  /* 82213668h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213668h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213678;  }
		/* 82213668h case    2:*/		return 0x8221366C;
		  /* 8221366Ch */ case    3:  		/* lwz R9, <#[R31 + 12]> */
		/* 8221366Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221366Ch case    3:*/		return 0x82213670;
		  /* 82213670h */ case    4:  		/* stw R9, <#[R11]> */
		/* 82213670h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213670h case    4:*/		return 0x82213674;
		  /* 82213674h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213674h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213674h case    5:*/		return 0x82213678;
	}
	return 0x82213678;
} // Block from 82213660h-82213678h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213678);
		  /* 82213678h */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 82213678h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82213678h case    0:*/		return 0x8221367C;
		  /* 8221367Ch */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 8221367Ch case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221367Ch case    1:*/		return 0x82213680;
		  /* 82213680h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 82213680h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213680h case    2:*/		return 0x82213684;
		  /* 82213684h */ case    3:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213684h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213684h case    3:*/		return 0x82213688;
		  /* 82213688h */ case    4:  		/* rlwimi R7, R9, 0, 16, 9 */
		/* 82213688h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R9);
		/* 82213688h case    4:*/		return 0x8221368C;
		  /* 8221368Ch */ case    5:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 8221368Ch case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 8221368Ch case    5:*/		return 0x82213690;
		  /* 82213690h */ case    6:  		/* stw R7, <#[R11]> */
		/* 82213690h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213690h case    6:*/		return 0x82213694;
		  /* 82213694h */ case    7:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213694h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213694h case    7:*/		return 0x82213698;
		  /* 82213698h */ case    8:  		/* rlwimi R7, R9, 0, 9, 7 */
		/* 82213698h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R9);
		/* 82213698h case    8:*/		return 0x8221369C;
		  /* 8221369Ch */ case    9:  		/* oris R9, R7, 64 */
		/* 8221369Ch case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R7,0x40);
		/* 8221369Ch case    9:*/		return 0x822136A0;
		  /* 822136A0h */ case   10:  		/* stw R9, <#[R11]> */
		/* 822136A0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822136A0h case   10:*/		return 0x822136A4;
		  /* 822136A4h */ case   11:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822136A4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822136A4h case   11:*/		return 0x822136A8;
		  /* 822136A8h */ case   12:  		/* lwz R7, <#[R31 + 28]> */
		/* 822136A8h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136A8h case   12:*/		return 0x822136AC;
		  /* 822136ACh */ case   13:  		/* rlwimi R9, R7, 0, 29, 31 */
		/* 822136ACh case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R9,regs.R7);
		/* 822136ACh case   13:*/		return 0x822136B0;
		  /* 822136B0h */ case   14:  		/* stw R9, <#[R11]> */
		/* 822136B0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822136B0h case   14:*/		return 0x822136B4;
		  /* 822136B4h */ case   15:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822136B4h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822136B4h case   15:*/		return 0x822136B8;
		  /* 822136B8h */ case   16:  		/* lwz R7, <#[R31 + 28]> */
		/* 822136B8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136B8h case   16:*/		return 0x822136BC;
		  /* 822136BCh */ case   17:  		/* rlwimi R9, R7, 0, 25, 27 */
		/* 822136BCh case   17:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R9,regs.R7);
		/* 822136BCh case   17:*/		return 0x822136C0;
		  /* 822136C0h */ case   18:  		/* stw R9, <#[R11]> */
		/* 822136C0h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822136C0h case   18:*/		return 0x822136C4;
		  /* 822136C4h */ case   19:  		/* lwz R9, <#[R31 + 28]> */
		/* 822136C4h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136C4h case   19:*/		return 0x822136C8;
		  /* 822136C8h */ case   20:  		/* lwz R7, <#[R11]> */
		/* 822136C8h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822136C8h case   20:*/		return 0x822136CC;
		  /* 822136CCh */ case   21:  		/* rlwimi R7, R9, 0, 21, 23 */
		/* 822136CCh case   21:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R7,regs.R9);
		/* 822136CCh case   21:*/		return 0x822136D0;
		  /* 822136D0h */ case   22:  		/* stw R7, <#[R11]> */
		/* 822136D0h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822136D0h case   22:*/		return 0x822136D4;
		  /* 822136D4h */ case   23:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 822136D4h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 822136D4h case   23:*/		return 0x822136D8;
		  /* 822136D8h */ case   24:  		/* lwz R7, <#[R31 + 28]> */
		/* 822136D8h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136D8h case   24:*/		return 0x822136DC;
		  /* 822136DCh */ case   25:  		/* rlwimi R7, R9, 0, 20, 16 */
		/* 822136DCh case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R7,regs.R9);
		/* 822136DCh case   25:*/		return 0x822136E0;
		  /* 822136E0h */ case   26:  		/* stw R7, <#[R11]> */
		/* 822136E0h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822136E0h case   26:*/		return 0x822136E4;
		  /* 822136E4h */ case   27:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 822136E4h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 822136E4h case   27:*/		return 0x822136E8;
		  /* 822136E8h */ case   28:  		/* lwz R7, <#[R31 + 28]> */
		/* 822136E8h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136E8h case   28:*/		return 0x822136EC;
		  /* 822136ECh */ case   29:  		/* rlwimi R9, R7, 0, 28, 28 */
		/* 822136ECh case   29:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R9,regs.R7);
		/* 822136ECh case   29:*/		return 0x822136F0;
		  /* 822136F0h */ case   30:  		/* stw R9, <#[R11]> */
		/* 822136F0h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822136F0h case   30:*/		return 0x822136F4;
		  /* 822136F4h */ case   31:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822136F4h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822136F4h case   31:*/		return 0x822136F8;
		  /* 822136F8h */ case   32:  		/* lwz R7, <#[R31 + 28]> */
		/* 822136F8h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 822136F8h case   32:*/		return 0x822136FC;
		  /* 822136FCh */ case   33:  		/* rlwimi R9, R7, 0, 24, 24 */
		/* 822136FCh case   33:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R9,regs.R7);
		/* 822136FCh case   33:*/		return 0x82213700;
		  /* 82213700h */ case   34:  		/* stw R9, <#[R11]> */
		/* 82213700h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213700h case   34:*/		return 0x82213704;
		  /* 82213704h */ case   35:  		/* lwz R9, <#[R31 + 28]> */
		/* 82213704h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213704h case   35:*/		return 0x82213708;
		  /* 82213708h */ case   36:  		/* lwz R7, <#[R11]> */
		/* 82213708h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213708h case   36:*/		return 0x8221370C;
		  /* 8221370Ch */ case   37:  		/* rlwimi R7, R9, 0, 20, 20 */
		/* 8221370Ch case   37:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R7,regs.R9);
		/* 8221370Ch case   37:*/		return 0x82213710;
		  /* 82213710h */ case   38:  		/* stw R7, <#[R11]> */
		/* 82213710h case   38:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213710h case   38:*/		return 0x82213714;
		  /* 82213714h */ case   39:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 82213714h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 82213714h case   39:*/		return 0x82213718;
		  /* 82213718h */ case   40:  		/* lwz R7, <#[R31 + 28]> */
		/* 82213718h case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213718h case   40:*/		return 0x8221371C;
		  /* 8221371Ch */ case   41:  		/* rlwimi R9, R7, 0, 16, 16 */
		/* 8221371Ch case   41:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R7);
		/* 8221371Ch case   41:*/		return 0x82213720;
		  /* 82213720h */ case   42:  		/* stw R9, <#[R11]> */
		/* 82213720h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213720h case   42:*/		return 0x82213724;
		  /* 82213724h */ case   43:  		/* lwz R9, <#[R31 + 28]> */
		/* 82213724h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213724h case   43:*/		return 0x82213728;
		  /* 82213728h */ case   44:  		/* lwz R7, <#[R11]> */
		/* 82213728h case   44:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213728h case   44:*/		return 0x8221372C;
		  /* 8221372Ch */ case   45:  		/* rlwimi R7, R9, 0, 11, 11 */
		/* 8221372Ch case   45:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R7,regs.R9);
		/* 8221372Ch case   45:*/		return 0x82213730;
		  /* 82213730h */ case   46:  		/* stw R7, <#[R11]> */
		/* 82213730h case   46:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213730h case   46:*/		return 0x82213734;
		  /* 82213734h */ case   47:  		/* addi R11, R11, 4 */
		/* 82213734h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213734h case   47:*/		return 0x82213738;
		  /* 82213738h */ case   48:  		/* lwz R9, <#[R31 + 16]> */
		/* 82213738h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82213738h case   48:*/		return 0x8221373C;
		  /* 8221373Ch */ case   49:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 8221373Ch case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 8221373Ch case   49:*/		return 0x82213740;
		  /* 82213740h */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 82213740h case   50:*/		if ( regs.CR[0].eq ) { return 0x82213750;  }
		/* 82213740h case   50:*/		return 0x82213744;
		  /* 82213744h */ case   51:  		/* lwz R9, <#[R31 + 40]> */
		/* 82213744h case   51:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82213744h case   51:*/		return 0x82213748;
		  /* 82213748h */ case   52:  		/* stw R9, <#[R11]> */
		/* 82213748h case   52:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213748h case   52:*/		return 0x8221374C;
		  /* 8221374Ch */ case   53:  		/* addi R11, R11, 4 */
		/* 8221374Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221374Ch case   53:*/		return 0x82213750;
	}
	return 0x82213750;
} // Block from 82213678h-82213750h (54 instructions)

//////////////////////////////////////////////////////
// Block at 82213750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213750);
		  /* 82213750h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82213750h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213750h case    0:*/		return 0x82213754;
		  /* 82213754h */ case    1:  		/* li R12, -30584 */
		/* 82213754h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82213754h case    1:*/		return 0x82213758;
		  /* 82213758h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82213758h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213758h case    2:*/		return 0x8221375C;
		  /* 8221375Ch */ case    3:  		/* rlwimi R10, R8, 18, 8, 15 */
		/* 8221375Ch case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R8);
		/* 8221375Ch case    3:*/		return 0x82213760;
		  /* 82213760h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82213760h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213760h case    4:*/		return 0x82213764;
		  /* 82213764h */ case    5:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82213764h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213764h case    5:*/		return 0x82213768;
		  /* 82213768h */ case    6:  		/* and R10, R10, R12 */
		/* 82213768h case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82213768h case    6:*/		return 0x8221376C;
		  /* 8221376Ch */ case    7:  		/* stw R10, <#[R11]> */
		/* 8221376Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221376Ch case    7:*/		return 0x82213770;
		  /* 82213770h */ case    8:  		/* addi R3, R11, 4 */
		/* 82213770h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82213770h case    8:*/		return 0x82213774;
		  /* 82213774h */ case    9:  		/* addi R1, R1, 112 */
		/* 82213774h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82213774h case    9:*/		return 0x82213778;
		  /* 82213778h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 82213778h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82213778h case   10:*/		return 0x8221377C;
		  /* 8221377Ch */ case   11:  		/* mtspr LR, R12 */
		/* 8221377Ch case   11:*/		regs.LR = regs.R12;
		/* 8221377Ch case   11:*/		return 0x82213780;
		  /* 82213780h */ case   12:  		/* ld R30, <#[R1 - 24]> */
		/* 82213780h case   12:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82213780h case   12:*/		return 0x82213784;
		  /* 82213784h */ case   13:  		/* ld R31, <#[R1 - 16]> */
		/* 82213784h case   13:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82213784h case   13:*/		return 0x82213788;
		  /* 82213788h */ case   14:  		/* bclr 20, CR0_LT */
		/* 82213788h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82213788h case   14:*/		return 0x8221378C;
	}
	return 0x8221378C;
} // Block from 82213750h-8221378Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221378Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221378C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221378C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221378C);
		  /* 8221378Ch */ case    0:  		/* nop */
		/* 8221378Ch case    0:*/		cpu::op::nop();
		/* 8221378Ch case    0:*/		return 0x82213790;
	}
	return 0x82213790;
} // Block from 8221378Ch-82213790h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82213790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213790);
		  /* 82213790h */ case    0:  		/* mfspr R12, LR */
		/* 82213790h case    0:*/		regs.R12 = regs.LR;
		/* 82213790h case    0:*/		return 0x82213794;
		  /* 82213794h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82213794h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82213794h case    1:*/		return 0x82213798;
		  /* 82213798h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82213798h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82213798h case    2:*/		return 0x8221379C;
		  /* 8221379Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221379Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221379Ch case    3:*/		return 0x822137A0;
		  /* 822137A0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 822137A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822137A0h case    4:*/		return 0x822137A4;
		  /* 822137A4h */ case    5:  		/* mr R31, R4 */
		/* 822137A4h case    5:*/		regs.R31 = regs.R4;
		/* 822137A4h case    5:*/		return 0x822137A8;
		  /* 822137A8h */ case    6:  		/* mr R30, R5 */
		/* 822137A8h case    6:*/		regs.R30 = regs.R5;
		/* 822137A8h case    6:*/		return 0x822137AC;
		  /* 822137ACh */ case    7:  		/* bl -17796 */
		/* 822137ACh case    7:*/		regs.LR = 0x822137B0; return 0x8220F228;
		/* 822137ACh case    7:*/		return 0x822137B0;
		  /* 822137B0h */ case    8:  		/* li R11, 60 */
		/* 822137B0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x3C);
		/* 822137B0h case    8:*/		return 0x822137B4;
		  /* 822137B4h */ case    9:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 822137B4h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 822137B4h case    9:*/		return 0x822137B8;
		  /* 822137B8h */ case   10:  		/* sth R11, <#[R30 + 2]> */
		/* 822137B8h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 822137B8h case   10:*/		return 0x822137BC;
		  /* 822137BCh */ case   11:  		/* li R9, 1 */
		/* 822137BCh case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822137BCh case   11:*/		return 0x822137C0;
		  /* 822137C0h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 822137C0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822137C0h case   12:*/		return 0x822137C4;
		  /* 822137C4h */ case   13:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 822137C4h case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 822137C4h case   13:*/		return 0x822137C8;
		  /* 822137C8h */ case   14:  		/* stw R11, <#[R30]> */
		/* 822137C8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822137C8h case   14:*/		return 0x822137CC;
		  /* 822137CCh */ case   15:  		/* addi R11, R30, 4 */
		/* 822137CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 822137CCh case   15:*/		return 0x822137D0;
		  /* 822137D0h */ case   16:  		/* sth R10, <#[R30 + 6]> */
		/* 822137D0h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 822137D0h case   16:*/		return 0x822137D4;
		  /* 822137D4h */ case   17:  		/* lwz R8, <#[R30 + 4]> */
		/* 822137D4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822137D4h case   17:*/		return 0x822137D8;
		  /* 822137D8h */ case   18:  		/* addi R11, R11, 4 */
		/* 822137D8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822137D8h case   18:*/		return 0x822137DC;
		  /* 822137DCh */ case   19:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 822137DCh case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 822137DCh case   19:*/		return 0x822137E0;
		  /* 822137E0h */ case   20:  		/* stw R8, <#[R30 + 4]> */
		/* 822137E0h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822137E0h case   20:*/		return 0x822137E4;
		  /* 822137E4h */ case   21:  		/* lwz R8, <#[R31 + 16]> */
		/* 822137E4h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 822137E4h case   21:*/		return 0x822137E8;
		  /* 822137E8h */ case   22:  		/* sth R8, <#[R11 + 2]> */
		/* 822137E8h case   22:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822137E8h case   22:*/		return 0x822137EC;
		  /* 822137ECh */ case   23:  		/* lwz R8, <#[R11]> */
		/* 822137ECh case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822137ECh case   23:*/		return 0x822137F0;
		  /* 822137F0h */ case   24:  		/* lwz R7, <#[R31 + 16]> */
		/* 822137F0h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 822137F0h case   24:*/		return 0x822137F4;
		  /* 822137F4h */ case   25:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822137F4h case   25:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822137F4h case   25:*/		return 0x822137F8;
		  /* 822137F8h */ case   26:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822137F8h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822137F8h case   26:*/		return 0x822137FC;
		  /* 822137FCh */ case   27:  		/* stw R7, <#[R11]> */
		/* 822137FCh case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822137FCh case   27:*/		return 0x82213800;
		  /* 82213800h */ case   28:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213800h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213800h case   28:*/		return 0x82213804;
		  /* 82213804h */ case   29:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 82213804h case   29:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 82213804h case   29:*/		return 0x82213808;
		  /* 82213808h */ case   30:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82213808h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82213808h case   30:*/		return 0x8221380C;
		  /* 8221380Ch */ case   31:  		/* stw R7, <#[R11]> */
		/* 8221380Ch case   31:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221380Ch case   31:*/		return 0x82213810;
		  /* 82213810h */ case   32:  		/* lwz R7, <#[R31 + 16]> */
		/* 82213810h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 82213810h case   32:*/		return 0x82213814;
		  /* 82213814h */ case   33:  		/* rlwimi R7, R8, 0, 10, 8 */
		/* 82213814h case   33:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R7,regs.R8);
		/* 82213814h case   33:*/		return 0x82213818;
		  /* 82213818h */ case   34:  		/* stw R7, <#[R11]> */
		/* 82213818h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213818h case   34:*/		return 0x8221381C;
		  /* 8221381Ch */ case   35:  		/* addi R11, R11, 4 */
		/* 8221381Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221381Ch case   35:*/		return 0x82213820;
		  /* 82213820h */ case   36:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213820h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213820h case   36:*/		return 0x82213824;
		  /* 82213824h */ case   37:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 82213824h case   37:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 82213824h case   37:*/		return 0x82213828;
		  /* 82213828h */ case   38:  		/* bc 12, CR0_EQ, 16 */
		/* 82213828h case   38:*/		if ( regs.CR[0].eq ) { return 0x82213838;  }
		/* 82213828h case   38:*/		return 0x8221382C;
		  /* 8221382Ch */ case   39:  		/* lwz R8, <#[R31 + 28]> */
		/* 8221382Ch case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221382Ch case   39:*/		return 0x82213830;
		  /* 82213830h */ case   40:  		/* stw R8, <#[R11]> */
		/* 82213830h case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213830h case   40:*/		return 0x82213834;
		  /* 82213834h */ case   41:  		/* addi R11, R11, 4 */
		/* 82213834h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213834h case   41:*/		return 0x82213838;
	}
	return 0x82213838;
} // Block from 82213790h-82213838h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82213838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213838);
		  /* 82213838h */ case    0:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213838h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213838h case    0:*/		return 0x8221383C;
		  /* 8221383Ch */ case    1:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 8221383Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 8221383Ch case    1:*/		return 0x82213840;
		  /* 82213840h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213840h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213850;  }
		/* 82213840h case    2:*/		return 0x82213844;
		  /* 82213844h */ case    3:  		/* lwz R8, <#[R31 + 40]> */
		/* 82213844h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 82213844h case    3:*/		return 0x82213848;
		  /* 82213848h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82213848h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213848h case    4:*/		return 0x8221384C;
		  /* 8221384Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221384Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221384Ch case    5:*/		return 0x82213850;
	}
	return 0x82213850;
} // Block from 82213838h-82213850h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213850);
		  /* 82213850h */ case    0:  		/* li R8, 73 */
		/* 82213850h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x49);
		/* 82213850h case    0:*/		return 0x82213854;
		  /* 82213854h */ case    1:  		/* li R7, 17 */
		/* 82213854h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x11);
		/* 82213854h case    1:*/		return 0x82213858;
		  /* 82213858h */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 82213858h case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213858h case    2:*/		return 0x8221385C;
		  /* 8221385Ch */ case    3:  		/* lwz R8, <#[R11]> */
		/* 8221385Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221385Ch case    3:*/		return 0x82213860;
	}
	return 0x82213860;
} // Block from 82213850h-82213860h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82213860h
// Function '?DoMod@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213860);
		  /* 82213860h */ case    0:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82213860h case    0:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82213860h case    0:*/		return 0x82213864;
		  /* 82213864h */ case    1:  		/* stw R8, <#[R11]> */
		/* 82213864h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213864h case    1:*/		return 0x82213868;
		  /* 82213868h */ case    2:  		/* addi R11, R11, 4 */
		/* 82213868h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213868h case    2:*/		return 0x8221386C;
		  /* 8221386Ch */ case    3:  		/* sth R10, <#[R11 + 2]> */
		/* 8221386Ch case    3:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221386Ch case    3:*/		return 0x82213870;
		  /* 82213870h */ case    4:  		/* lwz R8, <#[R11]> */
		/* 82213870h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213870h case    4:*/		return 0x82213874;
		  /* 82213874h */ case    5:  		/* rlwimi R8, R7, 18, 8, 15 */
		/* 82213874h case    5:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R7);
		/* 82213874h case    5:*/		return 0x82213878;
		  /* 82213878h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82213878h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213878h case    6:*/		return 0x8221387C;
		  /* 8221387Ch */ case    7:  		/* lwzu R8, <#[R11 + 4]> */
		/* 8221387Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221387Ch case    7:*/		return 0x82213880;
		  /* 82213880h */ case    8:  		/* rlwimi R8, R9, 6, 19, 31 */
		/* 82213880h case    8:*/		cpu::op::rlwimi<0,6,19,31>(regs,&regs.R8,regs.R9);
		/* 82213880h case    8:*/		return 0x82213884;
		  /* 82213884h */ case    9:  		/* stw R8, <#[R11]> */
		/* 82213884h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213884h case    9:*/		return 0x82213888;
		  /* 82213888h */ case   10:  		/* addi R11, R11, 4 */
		/* 82213888h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213888h case   10:*/		return 0x8221388C;
		  /* 8221388Ch */ case   11:  		/* sth R10, <#[R11 + 2]> */
		/* 8221388Ch case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221388Ch case   11:*/		return 0x82213890;
		  /* 82213890h */ case   12:  		/* lwz R8, <#[R11]> */
		/* 82213890h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213890h case   12:*/		return 0x82213894;
		  /* 82213894h */ case   13:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 82213894h case   13:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 82213894h case   13:*/		return 0x82213898;
		  /* 82213898h */ case   14:  		/* stw R8, <#[R11]> */
		/* 82213898h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213898h case   14:*/		return 0x8221389C;
		  /* 8221389Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 8221389Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221389Ch case   15:*/		return 0x822138A0;
		  /* 822138A0h */ case   16:  		/* lwz R8, <#[R31 + 20]> */
		/* 822138A0h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 822138A0h case   16:*/		return 0x822138A4;
		  /* 822138A4h */ case   17:  		/* sth R8, <#[R11 + 2]> */
		/* 822138A4h case   17:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822138A4h case   17:*/		return 0x822138A8;
		  /* 822138A8h */ case   18:  		/* lwz R8, <#[R11]> */
		/* 822138A8h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822138A8h case   18:*/		return 0x822138AC;
		  /* 822138ACh */ case   19:  		/* lwz R7, <#[R31 + 20]> */
		/* 822138ACh case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822138ACh case   19:*/		return 0x822138B0;
		  /* 822138B0h */ case   20:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822138B0h case   20:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822138B0h case   20:*/		return 0x822138B4;
		  /* 822138B4h */ case   21:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822138B4h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822138B4h case   21:*/		return 0x822138B8;
		  /* 822138B8h */ case   22:  		/* stw R7, <#[R11]> */
		/* 822138B8h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822138B8h case   22:*/		return 0x822138BC;
		  /* 822138BCh */ case   23:  		/* lwz R7, <#[R31 + 20]> */
		/* 822138BCh case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822138BCh case   23:*/		return 0x822138C0;
		  /* 822138C0h */ case   24:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 822138C0h case   24:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 822138C0h case   24:*/		return 0x822138C4;
		  /* 822138C4h */ case   25:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822138C4h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822138C4h case   25:*/		return 0x822138C8;
		  /* 822138C8h */ case   26:  		/* stw R7, <#[R11]> */
		/* 822138C8h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822138C8h case   26:*/		return 0x822138CC;
		  /* 822138CCh */ case   27:  		/* lwz R7, <#[R31 + 20]> */
		/* 822138CCh case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 822138CCh case   27:*/		return 0x822138D0;
		  /* 822138D0h */ case   28:  		/* rlwimi R7, R8, 0, 10, 8 */
		/* 822138D0h case   28:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R7,regs.R8);
		/* 822138D0h case   28:*/		return 0x822138D4;
		  /* 822138D4h */ case   29:  		/* stw R7, <#[R11]> */
		/* 822138D4h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822138D4h case   29:*/		return 0x822138D8;
		  /* 822138D8h */ case   30:  		/* addi R11, R11, 4 */
		/* 822138D8h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822138D8h case   30:*/		return 0x822138DC;
		  /* 822138DCh */ case   31:  		/* lwz R8, <#[R31 + 20]> */
		/* 822138DCh case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 822138DCh case   31:*/		return 0x822138E0;
		  /* 822138E0h */ case   32:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 822138E0h case   32:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 822138E0h case   32:*/		return 0x822138E4;
		  /* 822138E4h */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 822138E4h case   33:*/		if ( regs.CR[0].eq ) { return 0x822138F4;  }
		/* 822138E4h case   33:*/		return 0x822138E8;
		  /* 822138E8h */ case   34:  		/* lwz R8, <#[R31 + 32]> */
		/* 822138E8h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 822138E8h case   34:*/		return 0x822138EC;
		  /* 822138ECh */ case   35:  		/* stw R8, <#[R11]> */
		/* 822138ECh case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822138ECh case   35:*/		return 0x822138F0;
		  /* 822138F0h */ case   36:  		/* addi R11, R11, 4 */
		/* 822138F0h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822138F0h case   36:*/		return 0x822138F4;
	}
	return 0x822138F4;
} // Block from 82213860h-822138F4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 822138F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822138F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822138F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822138F4);
		  /* 822138F4h */ case    0:  		/* lwz R8, <#[R31 + 20]> */
		/* 822138F4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 822138F4h case    0:*/		return 0x822138F8;
		  /* 822138F8h */ case    1:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822138F8h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822138F8h case    1:*/		return 0x822138FC;
		  /* 822138FCh */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 822138FCh case    2:*/		if ( regs.CR[0].eq ) { return 0x8221390C;  }
		/* 822138FCh case    2:*/		return 0x82213900;
		  /* 82213900h */ case    3:  		/* lwz R8, <#[R31 + 44]> */
		/* 82213900h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 82213900h case    3:*/		return 0x82213904;
		  /* 82213904h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82213904h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213904h case    4:*/		return 0x82213908;
		  /* 82213908h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213908h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213908h case    5:*/		return 0x8221390C;
	}
	return 0x8221390C;
} // Block from 822138F4h-8221390Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221390Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221390C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221390C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221390C);
		  /* 8221390Ch */ case    0:  		/* li R8, 45 */
		/* 8221390Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x2D);
		/* 8221390Ch case    0:*/		return 0x82213910;
		  /* 82213910h */ case    1:  		/* sth R8, <#[R11 + 2]> */
		/* 82213910h case    1:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213910h case    1:*/		return 0x82213914;
		  /* 82213914h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 82213914h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213914h case    2:*/		return 0x82213918;
		  /* 82213918h */ case    3:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82213918h case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82213918h case    3:*/		return 0x8221391C;
		  /* 8221391Ch */ case    4:  		/* stw R8, <#[R11]> */
		/* 8221391Ch case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221391Ch case    4:*/		return 0x82213920;
		  /* 82213920h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213920h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213920h case    5:*/		return 0x82213924;
		  /* 82213924h */ case    6:  		/* lwz R8, <#[R31 + 4]> */
		/* 82213924h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82213924h case    6:*/		return 0x82213928;
		  /* 82213928h */ case    7:  		/* sth R8, <#[R11 + 2]> */
		/* 82213928h case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213928h case    7:*/		return 0x8221392C;
		  /* 8221392Ch */ case    8:  		/* lwz R8, <#[R11]> */
		/* 8221392Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221392Ch case    8:*/		return 0x82213930;
		  /* 82213930h */ case    9:  		/* lwz R7, <#[R31 + 4]> */
		/* 82213930h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82213930h case    9:*/		return 0x82213934;
		  /* 82213934h */ case   10:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 82213934h case   10:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 82213934h case   10:*/		return 0x82213938;
		  /* 82213938h */ case   11:  		/* stw R7, <#[R11]> */
		/* 82213938h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213938h case   11:*/		return 0x8221393C;
		  /* 8221393Ch */ case   12:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 8221393Ch case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 8221393Ch case   12:*/		return 0x82213940;
		  /* 82213940h */ case   13:  		/* lwz R7, <#[R31 + 4]> */
		/* 82213940h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82213940h case   13:*/		return 0x82213944;
		  /* 82213944h */ case   14:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 82213944h case   14:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 82213944h case   14:*/		return 0x82213948;
		  /* 82213948h */ case   15:  		/* stw R7, <#[R11]> */
		/* 82213948h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213948h case   15:*/		return 0x8221394C;
		  /* 8221394Ch */ case   16:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 8221394Ch case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 8221394Ch case   16:*/		return 0x82213950;
		  /* 82213950h */ case   17:  		/* lwz R7, <#[R31 + 4]> */
		/* 82213950h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82213950h case   17:*/		return 0x82213954;
		  /* 82213954h */ case   18:  		/* rlwimi R7, R8, 0, 10, 8 */
		/* 82213954h case   18:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R7,regs.R8);
		/* 82213954h case   18:*/		return 0x82213958;
		  /* 82213958h */ case   19:  		/* stw R7, <#[R11]> */
		/* 82213958h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213958h case   19:*/		return 0x8221395C;
		  /* 8221395Ch */ case   20:  		/* addi R11, R11, 4 */
		/* 8221395Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221395Ch case   20:*/		return 0x82213960;
		  /* 82213960h */ case   21:  		/* lwz R8, <#[R31 + 4]> */
		/* 82213960h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82213960h case   21:*/		return 0x82213964;
		  /* 82213964h */ case   22:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 82213964h case   22:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 82213964h case   22:*/		return 0x82213968;
		  /* 82213968h */ case   23:  		/* bc 12, CR0_EQ, 16 */
		/* 82213968h case   23:*/		if ( regs.CR[0].eq ) { return 0x82213978;  }
		/* 82213968h case   23:*/		return 0x8221396C;
		  /* 8221396Ch */ case   24:  		/* lwz R8, <#[R31 + 8]> */
		/* 8221396Ch case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 8221396Ch case   24:*/		return 0x82213970;
		  /* 82213970h */ case   25:  		/* stw R8, <#[R11]> */
		/* 82213970h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213970h case   25:*/		return 0x82213974;
		  /* 82213974h */ case   26:  		/* addi R11, R11, 4 */
		/* 82213974h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213974h case   26:*/		return 0x82213978;
	}
	return 0x82213978;
} // Block from 8221390Ch-82213978h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82213978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213978);
		  /* 82213978h */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 82213978h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82213978h case    0:*/		return 0x8221397C;
		  /* 8221397Ch */ case    1:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 8221397Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 8221397Ch case    1:*/		return 0x82213980;
		  /* 82213980h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213980h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213990;  }
		/* 82213980h case    2:*/		return 0x82213984;
		  /* 82213984h */ case    3:  		/* lwz R8, <#[R31 + 12]> */
		/* 82213984h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82213984h case    3:*/		return 0x82213988;
		  /* 82213988h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82213988h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213988h case    4:*/		return 0x8221398C;
		  /* 8221398Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221398Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221398Ch case    5:*/		return 0x82213990;
	}
	return 0x82213990;
} // Block from 82213978h-82213990h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213990);
		  /* 82213990h */ case    0:  		/* sth R10, <#[R11 + 2]> */
		/* 82213990h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213990h case    0:*/		return 0x82213994;
		  /* 82213994h */ case    1:  		/* addi R3, R11, 4 */
		/* 82213994h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82213994h case    1:*/		return 0x82213998;
		  /* 82213998h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82213998h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213998h case    2:*/		return 0x8221399C;
		  /* 8221399Ch */ case    3:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 8221399Ch case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 8221399Ch case    3:*/		return 0x822139A0;
		  /* 822139A0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 822139A0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822139A0h case    4:*/		return 0x822139A4;
		  /* 822139A4h */ case    5:  		/* addi R1, R1, 112 */
		/* 822139A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822139A4h case    5:*/		return 0x822139A8;
		  /* 822139A8h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 822139A8h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822139A8h case    6:*/		return 0x822139AC;
		  /* 822139ACh */ case    7:  		/* mtspr LR, R12 */
		/* 822139ACh case    7:*/		regs.LR = regs.R12;
		/* 822139ACh case    7:*/		return 0x822139B0;
		  /* 822139B0h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 822139B0h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822139B0h case    8:*/		return 0x822139B4;
		  /* 822139B4h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 822139B4h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822139B4h case    9:*/		return 0x822139B8;
		  /* 822139B8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 822139B8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822139B8h case   10:*/		return 0x822139BC;
	}
	return 0x822139BC;
} // Block from 82213990h-822139BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822139BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822139BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822139BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822139BC);
		  /* 822139BCh */ case    0:  		/* nop */
		/* 822139BCh case    0:*/		cpu::op::nop();
		/* 822139BCh case    0:*/		return 0x822139C0;
		  /* 822139C0h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 822139C0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 822139C0h case    1:*/		return 0x822139C4;
		  /* 822139C4h */ case    2:  		/* mr R11, R3 */
		/* 822139C4h case    2:*/		regs.R11 = regs.R3;
		/* 822139C4h case    2:*/		return 0x822139C8;
		  /* 822139C8h */ case    3:  		/* rlwinm R9, R10, 16, 29, 31 */
		/* 822139C8h case    3:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R10);
		/* 822139C8h case    3:*/		return 0x822139CC;
		  /* 822139CCh */ case    4:  		/* cmplwi CR6, R9, 4 */
		/* 822139CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 822139CCh case    4:*/		return 0x822139D0;
		  /* 822139D0h */ case    5:  		/* bc 12, CR6_LT, 380 */
		/* 822139D0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82213B4C;  }
		/* 822139D0h case    5:*/		return 0x822139D4;
		  /* 822139D4h */ case    6:  		/* cmplwi CR6, R9, 6 */
		/* 822139D4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000006);
		/* 822139D4h case    6:*/		return 0x822139D8;
		  /* 822139D8h */ case    7:  		/* bc 4, CR6_LT, 556 */
		/* 822139D8h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82213C04;  }
		/* 822139D8h case    7:*/		return 0x822139DC;
		  /* 822139DCh */ case    8:  		/* li R10, 86 */
		/* 822139DCh case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x56);
		/* 822139DCh case    8:*/		return 0x822139E0;
		  /* 822139E0h */ case    9:  		/* cmplwi CR6, R9, 4 */
		/* 822139E0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 822139E0h case    9:*/		return 0x822139E4;
		  /* 822139E4h */ case   10:  		/* sth R10, <#[R4 + 2]> */
		/* 822139E4h case   10:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R4 + 0x00000002) );
		/* 822139E4h case   10:*/		return 0x822139E8;
		  /* 822139E8h */ case   11:  		/* addi R10, R4, 4 */
		/* 822139E8h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x4);
		/* 822139E8h case   11:*/		return 0x822139EC;
		  /* 822139ECh */ case   12:  		/* lwz R8, <#[R4]> */
		/* 822139ECh case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 822139ECh case   12:*/		return 0x822139F0;
		  /* 822139F0h */ case   13:  		/* bc 4, CR6_EQ, 16 */
		/* 822139F0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82213A00;  }
		/* 822139F0h case   13:*/		return 0x822139F4;
		  /* 822139F4h */ case   14:  		/* li R9, 1 */
		/* 822139F4h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822139F4h case   14:*/		return 0x822139F8;
		  /* 822139F8h */ case   15:  		/* rlwimi R8, R9, 17, 3, 15 */
		/* 822139F8h case   15:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R8,regs.R9);
		/* 822139F8h case   15:*/		return 0x822139FC;
		  /* 822139FCh */ case   16:  		/* b 12 */
		/* 822139FCh case   16:*/		return 0x82213A08;
		/* 822139FCh case   16:*/		return 0x82213A00;
	}
	return 0x82213A00;
} // Block from 822139BCh-82213A00h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82213A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213A00);
		  /* 82213A00h */ case    0:  		/* li R9, 3 */
		/* 82213A00h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82213A00h case    0:*/		return 0x82213A04;
		  /* 82213A04h */ case    1:  		/* rlwimi R8, R9, 16, 3, 15 */
		/* 82213A04h case    1:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R8,regs.R9);
		/* 82213A04h case    1:*/		return 0x82213A08;
	}
	return 0x82213A08;
} // Block from 82213A00h-82213A08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82213A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213A08);
		  /* 82213A08h */ case    0:  		/* stw R8, <#[R4]> */
		/* 82213A08h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82213A08h case    0:*/		return 0x82213A0C;
		  /* 82213A0Ch */ case    1:  		/* lwz R9, <#[R11 + 4]> */
		/* 82213A0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A0Ch case    1:*/		return 0x82213A10;
		  /* 82213A10h */ case    2:  		/* sth R9, <#[R10 + 2]> */
		/* 82213A10h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82213A10h case    2:*/		return 0x82213A14;
		  /* 82213A14h */ case    3:  		/* lwz R9, <#[R11 + 4]> */
		/* 82213A14h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A14h case    3:*/		return 0x82213A18;
		  /* 82213A18h */ case    4:  		/* lwz R8, <#[R10]> */
		/* 82213A18h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A18h case    4:*/		return 0x82213A1C;
		  /* 82213A1Ch */ case    5:  		/* rlwimi R9, R8, 0, 16, 9 */
		/* 82213A1Ch case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R8);
		/* 82213A1Ch case    5:*/		return 0x82213A20;
		  /* 82213A20h */ case    6:  		/* stw R9, <#[R10]> */
		/* 82213A20h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A20h case    6:*/		return 0x82213A24;
		  /* 82213A24h */ case    7:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82213A24h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82213A24h case    7:*/		return 0x82213A28;
		  /* 82213A28h */ case    8:  		/* lwz R8, <#[R11 + 4]> */
		/* 82213A28h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A28h case    8:*/		return 0x82213A2C;
		  /* 82213A2Ch */ case    9:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82213A2Ch case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82213A2Ch case    9:*/		return 0x82213A30;
		  /* 82213A30h */ case   10:  		/* stw R8, <#[R10]> */
		/* 82213A30h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A30h case   10:*/		return 0x82213A34;
		  /* 82213A34h */ case   11:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213A34h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213A34h case   11:*/		return 0x82213A38;
		  /* 82213A38h */ case   12:  		/* lwz R8, <#[R11 + 4]> */
		/* 82213A38h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A38h case   12:*/		return 0x82213A3C;
		  /* 82213A3Ch */ case   13:  		/* rlwimi R8, R9, 0, 10, 8 */
		/* 82213A3Ch case   13:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R8,regs.R9);
		/* 82213A3Ch case   13:*/		return 0x82213A40;
		  /* 82213A40h */ case   14:  		/* stw R8, <#[R10]> */
		/* 82213A40h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A40h case   14:*/		return 0x82213A44;
		  /* 82213A44h */ case   15:  		/* lwz R9, <#[R11 + 4]> */
		/* 82213A44h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A44h case   15:*/		return 0x82213A48;
		  /* 82213A48h */ case   16:  		/* addi R10, R10, 4 */
		/* 82213A48h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213A48h case   16:*/		return 0x82213A4C;
		  /* 82213A4Ch */ case   17:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82213A4Ch case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82213A4Ch case   17:*/		return 0x82213A50;
		  /* 82213A50h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 82213A50h case   18:*/		if ( regs.CR[0].eq ) { return 0x82213A60;  }
		/* 82213A50h case   18:*/		return 0x82213A54;
		  /* 82213A54h */ case   19:  		/* lwz R9, <#[R11 + 8]> */
		/* 82213A54h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82213A54h case   19:*/		return 0x82213A58;
		  /* 82213A58h */ case   20:  		/* stw R9, <#[R10]> */
		/* 82213A58h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A58h case   20:*/		return 0x82213A5C;
		  /* 82213A5Ch */ case   21:  		/* addi R10, R10, 4 */
		/* 82213A5Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213A5Ch case   21:*/		return 0x82213A60;
	}
	return 0x82213A60;
} // Block from 82213A08h-82213A60h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82213A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213A60);
		  /* 82213A60h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 82213A60h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82213A60h case    0:*/		return 0x82213A64;
		  /* 82213A64h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213A64h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213A64h case    1:*/		return 0x82213A68;
		  /* 82213A68h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213A68h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213A78;  }
		/* 82213A68h case    2:*/		return 0x82213A6C;
		  /* 82213A6Ch */ case    3:  		/* lwz R9, <#[R11 + 12]> */
		/* 82213A6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82213A6Ch case    3:*/		return 0x82213A70;
		  /* 82213A70h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82213A70h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A70h case    4:*/		return 0x82213A74;
		  /* 82213A74h */ case    5:  		/* addi R10, R10, 4 */
		/* 82213A74h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213A74h case    5:*/		return 0x82213A78;
	}
	return 0x82213A78;
} // Block from 82213A60h-82213A78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213A78);
		  /* 82213A78h */ case    0:  		/* lwz R9, <#[R11 + 20]> */
		/* 82213A78h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82213A78h case    0:*/		return 0x82213A7C;
		  /* 82213A7Ch */ case    1:  		/* sth R9, <#[R10 + 2]> */
		/* 82213A7Ch case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82213A7Ch case    1:*/		return 0x82213A80;
		  /* 82213A80h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 82213A80h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A80h case    2:*/		return 0x82213A84;
		  /* 82213A84h */ case    3:  		/* lwz R8, <#[R11 + 20]> */
		/* 82213A84h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 82213A84h case    3:*/		return 0x82213A88;
		  /* 82213A88h */ case    4:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82213A88h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82213A88h case    4:*/		return 0x82213A8C;
		  /* 82213A8Ch */ case    5:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213A8Ch case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213A8Ch case    5:*/		return 0x82213A90;
		  /* 82213A90h */ case    6:  		/* stw R8, <#[R10]> */
		/* 82213A90h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213A90h case    6:*/		return 0x82213A94;
		  /* 82213A94h */ case    7:  		/* lwz R8, <#[R11 + 20]> */
		/* 82213A94h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 82213A94h case    7:*/		return 0x82213A98;
		  /* 82213A98h */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82213A98h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82213A98h case    8:*/		return 0x82213A9C;
		  /* 82213A9Ch */ case    9:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213A9Ch case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213A9Ch case    9:*/		return 0x82213AA0;
		  /* 82213AA0h */ case   10:  		/* stw R8, <#[R10]> */
		/* 82213AA0h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213AA0h case   10:*/		return 0x82213AA4;
		  /* 82213AA4h */ case   11:  		/* lwz R8, <#[R11 + 20]> */
		/* 82213AA4h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 82213AA4h case   11:*/		return 0x82213AA8;
		  /* 82213AA8h */ case   12:  		/* rlwimi R8, R9, 0, 10, 8 */
		/* 82213AA8h case   12:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R8,regs.R9);
		/* 82213AA8h case   12:*/		return 0x82213AAC;
		  /* 82213AACh */ case   13:  		/* stw R8, <#[R10]> */
		/* 82213AACh case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213AACh case   13:*/		return 0x82213AB0;
		  /* 82213AB0h */ case   14:  		/* addi R10, R10, 4 */
		/* 82213AB0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213AB0h case   14:*/		return 0x82213AB4;
		  /* 82213AB4h */ case   15:  		/* lwz R9, <#[R11 + 20]> */
		/* 82213AB4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82213AB4h case   15:*/		return 0x82213AB8;
		  /* 82213AB8h */ case   16:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82213AB8h case   16:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82213AB8h case   16:*/		return 0x82213ABC;
		  /* 82213ABCh */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82213ABCh case   17:*/		if ( regs.CR[0].eq ) { return 0x82213ACC;  }
		/* 82213ABCh case   17:*/		return 0x82213AC0;
		  /* 82213AC0h */ case   18:  		/* lwz R9, <#[R11 + 32]> */
		/* 82213AC0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 82213AC0h case   18:*/		return 0x82213AC4;
		  /* 82213AC4h */ case   19:  		/* stw R9, <#[R10]> */
		/* 82213AC4h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213AC4h case   19:*/		return 0x82213AC8;
		  /* 82213AC8h */ case   20:  		/* addi R10, R10, 4 */
		/* 82213AC8h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213AC8h case   20:*/		return 0x82213ACC;
	}
	return 0x82213ACC;
} // Block from 82213A78h-82213ACCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 82213ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213ACC);
		  /* 82213ACCh */ case    0:  		/* lwz R9, <#[R11 + 20]> */
		/* 82213ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82213ACCh case    0:*/		return 0x82213AD0;
		  /* 82213AD0h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213AD0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213AD0h case    1:*/		return 0x82213AD4;
		  /* 82213AD4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213AD4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213AE4;  }
		/* 82213AD4h case    2:*/		return 0x82213AD8;
		  /* 82213AD8h */ case    3:  		/* lwz R9, <#[R11 + 44]> */
		/* 82213AD8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 82213AD8h case    3:*/		return 0x82213ADC;
		  /* 82213ADCh */ case    4:  		/* stw R9, <#[R10]> */
		/* 82213ADCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213ADCh case    4:*/		return 0x82213AE0;
		  /* 82213AE0h */ case    5:  		/* addi R10, R10, 4 */
		/* 82213AE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213AE0h case    5:*/		return 0x82213AE4;
	}
	return 0x82213AE4;
} // Block from 82213ACCh-82213AE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213AE4);
		  /* 82213AE4h */ case    0:  		/* lwz R9, <#[R11 + 16]> */
		/* 82213AE4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82213AE4h case    0:*/		return 0x82213AE8;
		  /* 82213AE8h */ case    1:  		/* addi R4, R10, 4 */
		/* 82213AE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x4);
		/* 82213AE8h case    1:*/		return 0x82213AEC;
		  /* 82213AECh */ case    2:  		/* sth R9, <#[R10 + 2]> */
		/* 82213AECh case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82213AECh case    2:*/		return 0x82213AF0;
		  /* 82213AF0h */ case    3:  		/* lwz R8, <#[R11 + 16]> */
		/* 82213AF0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 82213AF0h case    3:*/		return 0x82213AF4;
		  /* 82213AF4h */ case    4:  		/* lwz R9, <#[R10]> */
		/* 82213AF4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213AF4h case    4:*/		return 0x82213AF8;
		  /* 82213AF8h */ case    5:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82213AF8h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82213AF8h case    5:*/		return 0x82213AFC;
		  /* 82213AFCh */ case    6:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213AFCh case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213AFCh case    6:*/		return 0x82213B00;
		  /* 82213B00h */ case    7:  		/* stw R8, <#[R10]> */
		/* 82213B00h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B00h case    7:*/		return 0x82213B04;
		  /* 82213B04h */ case    8:  		/* lwz R8, <#[R11 + 16]> */
		/* 82213B04h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B04h case    8:*/		return 0x82213B08;
		  /* 82213B08h */ case    9:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82213B08h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82213B08h case    9:*/		return 0x82213B0C;
		  /* 82213B0Ch */ case   10:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213B0Ch case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213B0Ch case   10:*/		return 0x82213B10;
		  /* 82213B10h */ case   11:  		/* stw R8, <#[R10]> */
		/* 82213B10h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B10h case   11:*/		return 0x82213B14;
		  /* 82213B14h */ case   12:  		/* lwz R8, <#[R11 + 16]> */
		/* 82213B14h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B14h case   12:*/		return 0x82213B18;
		  /* 82213B18h */ case   13:  		/* rlwimi R8, R9, 0, 10, 8 */
		/* 82213B18h case   13:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R8,regs.R9);
		/* 82213B18h case   13:*/		return 0x82213B1C;
		  /* 82213B1Ch */ case   14:  		/* stw R8, <#[R10]> */
		/* 82213B1Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B1Ch case   14:*/		return 0x82213B20;
		  /* 82213B20h */ case   15:  		/* lwz R10, <#[R11 + 16]> */
		/* 82213B20h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B20h case   15:*/		return 0x82213B24;
		  /* 82213B24h */ case   16:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82213B24h case   16:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82213B24h case   16:*/		return 0x82213B28;
		  /* 82213B28h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82213B28h case   17:*/		if ( regs.CR[0].eq ) { return 0x82213B38;  }
		/* 82213B28h case   17:*/		return 0x82213B2C;
		  /* 82213B2Ch */ case   18:  		/* lwz R10, <#[R11 + 28]> */
		/* 82213B2Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82213B2Ch case   18:*/		return 0x82213B30;
		  /* 82213B30h */ case   19:  		/* stw R10, <#[R4]> */
		/* 82213B30h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82213B30h case   19:*/		return 0x82213B34;
		  /* 82213B34h */ case   20:  		/* addi R4, R4, 4 */
		/* 82213B34h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82213B34h case   20:*/		return 0x82213B38;
	}
	return 0x82213B38;
} // Block from 82213AE4h-82213B38h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82213B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213B38);
		  /* 82213B38h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 82213B38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B38h case    0:*/		return 0x82213B3C;
		  /* 82213B3Ch */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82213B3Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82213B3Ch case    1:*/		return 0x82213B40;
		  /* 82213B40h */ case    2:  		/* bc 12, CR0_EQ, 196 */
		/* 82213B40h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213C04;  }
		/* 82213B40h case    2:*/		return 0x82213B44;
		  /* 82213B44h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 82213B44h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82213B44h case    3:*/		return 0x82213B48;
		  /* 82213B48h */ case    4:  		/* b 180 */
		/* 82213B48h case    4:*/		return 0x82213BFC;
		/* 82213B48h case    4:*/		return 0x82213B4C;
	}
	return 0x82213B4C;
} // Block from 82213B38h-82213B4Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82213B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213B4C);
		  /* 82213B4Ch */ case    0:  		/* stw R10, <#[R4]> */
		/* 82213B4Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82213B4Ch case    0:*/		return 0x82213B50;
		  /* 82213B50h */ case    1:  		/* lwz R10, <#[R11 + 4]> */
		/* 82213B50h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82213B50h case    1:*/		return 0x82213B54;
		  /* 82213B54h */ case    2:  		/* stwu R10, <#[R4 + 4]> */
		/* 82213B54h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82213B54h case    2:*/		return 0x82213B58;
		  /* 82213B58h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 82213B58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82213B58h case    3:*/		return 0x82213B5C;
		  /* 82213B5Ch */ case    4:  		/* rlwinm. R9, R10, 0, 9, 9 */
		/* 82213B5Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R10);
		/* 82213B5Ch case    4:*/		return 0x82213B60;
		  /* 82213B60h */ case    5:  		/* addi R10, R4, 4 */
		/* 82213B60h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x4);
		/* 82213B60h case    5:*/		return 0x82213B64;
		  /* 82213B64h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 82213B64h case    6:*/		if ( regs.CR[0].eq ) { return 0x82213B74;  }
		/* 82213B64h case    6:*/		return 0x82213B68;
		  /* 82213B68h */ case    7:  		/* lwz R9, <#[R11 + 8]> */
		/* 82213B68h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82213B68h case    7:*/		return 0x82213B6C;
		  /* 82213B6Ch */ case    8:  		/* stw R9, <#[R10]> */
		/* 82213B6Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B6Ch case    8:*/		return 0x82213B70;
		  /* 82213B70h */ case    9:  		/* addi R10, R10, 4 */
		/* 82213B70h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213B70h case    9:*/		return 0x82213B74;
	}
	return 0x82213B74;
} // Block from 82213B4Ch-82213B74h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82213B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213B74);
		  /* 82213B74h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 82213B74h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82213B74h case    0:*/		return 0x82213B78;
		  /* 82213B78h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213B78h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213B78h case    1:*/		return 0x82213B7C;
		  /* 82213B7Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213B7Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82213B8C;  }
		/* 82213B7Ch case    2:*/		return 0x82213B80;
		  /* 82213B80h */ case    3:  		/* lwz R9, <#[R11 + 12]> */
		/* 82213B80h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82213B80h case    3:*/		return 0x82213B84;
		  /* 82213B84h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82213B84h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B84h case    4:*/		return 0x82213B88;
		  /* 82213B88h */ case    5:  		/* addi R10, R10, 4 */
		/* 82213B88h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213B88h case    5:*/		return 0x82213B8C;
	}
	return 0x82213B8C;
} // Block from 82213B74h-82213B8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213B8C);
		  /* 82213B8Ch */ case    0:  		/* lwz R9, <#[R11 + 16]> */
		/* 82213B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B8Ch case    0:*/		return 0x82213B90;
		  /* 82213B90h */ case    1:  		/* stw R9, <#[R10]> */
		/* 82213B90h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213B90h case    1:*/		return 0x82213B94;
		  /* 82213B94h */ case    2:  		/* addi R10, R10, 4 */
		/* 82213B94h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213B94h case    2:*/		return 0x82213B98;
		  /* 82213B98h */ case    3:  		/* lwz R9, <#[R11 + 16]> */
		/* 82213B98h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82213B98h case    3:*/		return 0x82213B9C;
		  /* 82213B9Ch */ case    4:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82213B9Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82213B9Ch case    4:*/		return 0x82213BA0;
		  /* 82213BA0h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82213BA0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82213BB0;  }
		/* 82213BA0h case    5:*/		return 0x82213BA4;
		  /* 82213BA4h */ case    6:  		/* lwz R9, <#[R11 + 28]> */
		/* 82213BA4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 82213BA4h case    6:*/		return 0x82213BA8;
		  /* 82213BA8h */ case    7:  		/* stw R9, <#[R10]> */
		/* 82213BA8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213BA8h case    7:*/		return 0x82213BAC;
		  /* 82213BACh */ case    8:  		/* addi R10, R10, 4 */
		/* 82213BACh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213BACh case    8:*/		return 0x82213BB0;
	}
	return 0x82213BB0;
} // Block from 82213B8Ch-82213BB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82213BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213BB0);
		  /* 82213BB0h */ case    0:  		/* lwz R9, <#[R11 + 16]> */
		/* 82213BB0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82213BB0h case    0:*/		return 0x82213BB4;
		  /* 82213BB4h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213BB4h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213BB4h case    1:*/		return 0x82213BB8;
		  /* 82213BB8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213BB8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213BC8;  }
		/* 82213BB8h case    2:*/		return 0x82213BBC;
		  /* 82213BBCh */ case    3:  		/* lwz R9, <#[R11 + 40]> */
		/* 82213BBCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 82213BBCh case    3:*/		return 0x82213BC0;
		  /* 82213BC0h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82213BC0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213BC0h case    4:*/		return 0x82213BC4;
		  /* 82213BC4h */ case    5:  		/* addi R10, R10, 4 */
		/* 82213BC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82213BC4h case    5:*/		return 0x82213BC8;
	}
	return 0x82213BC8;
} // Block from 82213BB0h-82213BC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213BC8);
		  /* 82213BC8h */ case    0:  		/* lwz R9, <#[R11 + 20]> */
		/* 82213BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82213BC8h case    0:*/		return 0x82213BCC;
		  /* 82213BCCh */ case    1:  		/* addi R4, R10, 4 */
		/* 82213BCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x4);
		/* 82213BCCh case    1:*/		return 0x82213BD0;
		  /* 82213BD0h */ case    2:  		/* stw R9, <#[R10]> */
		/* 82213BD0h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82213BD0h case    2:*/		return 0x82213BD4;
		  /* 82213BD4h */ case    3:  		/* lwz R10, <#[R11 + 20]> */
		/* 82213BD4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82213BD4h case    3:*/		return 0x82213BD8;
		  /* 82213BD8h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82213BD8h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82213BD8h case    4:*/		return 0x82213BDC;
		  /* 82213BDCh */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82213BDCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82213BEC;  }
		/* 82213BDCh case    5:*/		return 0x82213BE0;
		  /* 82213BE0h */ case    6:  		/* lwz R10, <#[R11 + 32]> */
		/* 82213BE0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82213BE0h case    6:*/		return 0x82213BE4;
		  /* 82213BE4h */ case    7:  		/* stw R10, <#[R4]> */
		/* 82213BE4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82213BE4h case    7:*/		return 0x82213BE8;
		  /* 82213BE8h */ case    8:  		/* addi R4, R4, 4 */
		/* 82213BE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82213BE8h case    8:*/		return 0x82213BEC;
	}
	return 0x82213BEC;
} // Block from 82213BC8h-82213BECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82213BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213BEC);
		  /* 82213BECh */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 82213BECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82213BECh case    0:*/		return 0x82213BF0;
		  /* 82213BF0h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82213BF0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82213BF0h case    1:*/		return 0x82213BF4;
		  /* 82213BF4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213BF4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213C04;  }
		/* 82213BF4h case    2:*/		return 0x82213BF8;
		  /* 82213BF8h */ case    3:  		/* lwz R11, <#[R11 + 44]> */
		/* 82213BF8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82213BF8h case    3:*/		return 0x82213BFC;
	}
	return 0x82213BFC;
} // Block from 82213BECh-82213BFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82213BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213BFC);
		  /* 82213BFCh */ case    0:  		/* stw R11, <#[R4]> */
		/* 82213BFCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82213BFCh case    0:*/		return 0x82213C00;
		  /* 82213C00h */ case    1:  		/* addi R4, R4, 4 */
		/* 82213C00h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82213C00h case    1:*/		return 0x82213C04;
	}
	return 0x82213C04;
} // Block from 82213BFCh-82213C04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82213C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213C04);
		  /* 82213C04h */ case    0:  		/* mr R3, R4 */
		/* 82213C04h case    0:*/		regs.R3 = regs.R4;
		/* 82213C04h case    0:*/		return 0x82213C08;
		  /* 82213C08h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82213C08h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82213C08h case    1:*/		return 0x82213C0C;
	}
	return 0x82213C0C;
} // Block from 82213C04h-82213C0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82213C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213C0C);
		  /* 82213C0Ch */ case    0:  		/* nop */
		/* 82213C0Ch case    0:*/		cpu::op::nop();
		/* 82213C0Ch case    0:*/		return 0x82213C10;
	}
	return 0x82213C10;
} // Block from 82213C0Ch-82213C10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82213C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213C10);
		  /* 82213C10h */ case    0:  		/* mfspr R12, LR */
		/* 82213C10h case    0:*/		regs.R12 = regs.LR;
		/* 82213C10h case    0:*/		return 0x82213C14;
		  /* 82213C14h */ case    1:  		/* bl -1583548 */
		/* 82213C14h case    1:*/		regs.LR = 0x82213C18; return 0x82091258;
		/* 82213C14h case    1:*/		return 0x82213C18;
		  /* 82213C18h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82213C18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82213C18h case    2:*/		return 0x82213C1C;
		  /* 82213C1Ch */ case    3:  		/* mr R29, R3 */
		/* 82213C1Ch case    3:*/		regs.R29 = regs.R3;
		/* 82213C1Ch case    3:*/		return 0x82213C20;
		  /* 82213C20h */ case    4:  		/* mr R31, R4 */
		/* 82213C20h case    4:*/		regs.R31 = regs.R4;
		/* 82213C20h case    4:*/		return 0x82213C24;
		  /* 82213C24h */ case    5:  		/* mr R30, R5 */
		/* 82213C24h case    5:*/		regs.R30 = regs.R5;
		/* 82213C24h case    5:*/		return 0x82213C28;
		  /* 82213C28h */ case    6:  		/* bl -18944 */
		/* 82213C28h case    6:*/		regs.LR = 0x82213C2C; return 0x8220F228;
		/* 82213C28h case    6:*/		return 0x82213C2C;
		  /* 82213C2Ch */ case    7:  		/* mr R28, R3 */
		/* 82213C2Ch case    7:*/		regs.R28 = regs.R3;
		/* 82213C2Ch case    7:*/		return 0x82213C30;
		  /* 82213C30h */ case    8:  		/* mr R3, R29 */
		/* 82213C30h case    8:*/		regs.R3 = regs.R29;
		/* 82213C30h case    8:*/		return 0x82213C34;
		  /* 82213C34h */ case    9:  		/* bl -18956 */
		/* 82213C34h case    9:*/		regs.LR = 0x82213C38; return 0x8220F228;
		/* 82213C34h case    9:*/		return 0x82213C38;
		  /* 82213C38h */ case   10:  		/* li R11, 13 */
		/* 82213C38h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 82213C38h case   10:*/		return 0x82213C3C;
		  /* 82213C3Ch */ case   11:  		/* li R10, 1 */
		/* 82213C3Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82213C3Ch case   11:*/		return 0x82213C40;
		  /* 82213C40h */ case   12:  		/* sth R11, <#[R30 + 2]> */
		/* 82213C40h case   12:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82213C40h case   12:*/		return 0x82213C44;
		  /* 82213C44h */ case   13:  		/* rlwinm R6, R28, 0, 16, 31 */
		/* 82213C44h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R6,regs.R28);
		/* 82213C44h case   13:*/		return 0x82213C48;
		  /* 82213C48h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 82213C48h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82213C48h case   14:*/		return 0x82213C4C;
		  /* 82213C4Ch */ case   15:  		/* rlwimi R11, R10, 17, 3, 15 */
		/* 82213C4Ch case   15:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R11,regs.R10);
		/* 82213C4Ch case   15:*/		return 0x82213C50;
		  /* 82213C50h */ case   16:  		/* stw R11, <#[R30]> */
		/* 82213C50h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82213C50h case   16:*/		return 0x82213C54;
		  /* 82213C54h */ case   17:  		/* addi R11, R30, 4 */
		/* 82213C54h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82213C54h case   17:*/		return 0x82213C58;
		  /* 82213C58h */ case   18:  		/* sth R6, <#[R30 + 6]> */
		/* 82213C58h case   18:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R30 + 0x00000006) );
		/* 82213C58h case   18:*/		return 0x82213C5C;
		  /* 82213C5Ch */ case   19:  		/* lwz R9, <#[R30 + 4]> */
		/* 82213C5Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82213C5Ch case   19:*/		return 0x82213C60;
		  /* 82213C60h */ case   20:  		/* addi R11, R11, 4 */
		/* 82213C60h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213C60h case   20:*/		return 0x82213C64;
		  /* 82213C64h */ case   21:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82213C64h case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82213C64h case   21:*/		return 0x82213C68;
		  /* 82213C68h */ case   22:  		/* stw R9, <#[R30 + 4]> */
		/* 82213C68h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82213C68h case   22:*/		return 0x82213C6C;
		  /* 82213C6Ch */ case   23:  		/* lwz R9, <#[R31 + 16]> */
		/* 82213C6Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82213C6Ch case   23:*/		return 0x82213C70;
		  /* 82213C70h */ case   24:  		/* sth R9, <#[R11 + 2]> */
		/* 82213C70h case   24:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82213C70h case   24:*/		return 0x82213C74;
		  /* 82213C74h */ case   25:  		/* lwz R9, <#[R11]> */
		/* 82213C74h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213C74h case   25:*/		return 0x82213C78;
		  /* 82213C78h */ case   26:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213C78h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213C78h case   26:*/		return 0x82213C7C;
		  /* 82213C7Ch */ case   27:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82213C7Ch case   27:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82213C7Ch case   27:*/		return 0x82213C80;
		  /* 82213C80h */ case   28:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213C80h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213C80h case   28:*/		return 0x82213C84;
		  /* 82213C84h */ case   29:  		/* stw R8, <#[R11]> */
		/* 82213C84h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213C84h case   29:*/		return 0x82213C88;
		  /* 82213C88h */ case   30:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213C88h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213C88h case   30:*/		return 0x82213C8C;
		  /* 82213C8Ch */ case   31:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82213C8Ch case   31:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82213C8Ch case   31:*/		return 0x82213C90;
		  /* 82213C90h */ case   32:  		/* oris R9, R8, 64 */
		/* 82213C90h case   32:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82213C90h case   32:*/		return 0x82213C94;
		  /* 82213C94h */ case   33:  		/* stw R9, <#[R11]> */
		/* 82213C94h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213C94h case   33:*/		return 0x82213C98;
		  /* 82213C98h */ case   34:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82213C98h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213C98h case   34:*/		return 0x82213C9C;
		  /* 82213C9Ch */ case   35:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213C9Ch case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213C9Ch case   35:*/		return 0x82213CA0;
		  /* 82213CA0h */ case   36:  		/* rlwimi R8, R9, 0, 0, 28 */
		/* 82213CA0h case   36:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R8,regs.R9);
		/* 82213CA0h case   36:*/		return 0x82213CA4;
		  /* 82213CA4h */ case   37:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213CA4h case   37:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213CA4h case   37:*/		return 0x82213CA8;
		  /* 82213CA8h */ case   38:  		/* stw R8, <#[R11]> */
		/* 82213CA8h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213CA8h case   38:*/		return 0x82213CAC;
		  /* 82213CACh */ case   39:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213CACh case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213CACh case   39:*/		return 0x82213CB0;
		  /* 82213CB0h */ case   40:  		/* rlwimi R8, R9, 0, 28, 24 */
		/* 82213CB0h case   40:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R8,regs.R9);
		/* 82213CB0h case   40:*/		return 0x82213CB4;
		  /* 82213CB4h */ case   41:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213CB4h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213CB4h case   41:*/		return 0x82213CB8;
		  /* 82213CB8h */ case   42:  		/* stw R8, <#[R11]> */
		/* 82213CB8h case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213CB8h case   42:*/		return 0x82213CBC;
		  /* 82213CBCh */ case   43:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213CBCh case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213CBCh case   43:*/		return 0x82213CC0;
		  /* 82213CC0h */ case   44:  		/* rlwimi R8, R9, 0, 24, 20 */
		/* 82213CC0h case   44:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R9);
		/* 82213CC0h case   44:*/		return 0x82213CC4;
		  /* 82213CC4h */ case   45:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82213CC4h case   45:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82213CC4h case   45:*/		return 0x82213CC8;
		  /* 82213CC8h */ case   46:  		/* stw R8, <#[R11]> */
		/* 82213CC8h case   46:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213CC8h case   46:*/		return 0x82213CCC;
		  /* 82213CCCh */ case   47:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213CCCh case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213CCCh case   47:*/		return 0x82213CD0;
		  /* 82213CD0h */ case   48:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 82213CD0h case   48:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 82213CD0h case   48:*/		return 0x82213CD4;
		  /* 82213CD4h */ case   49:  		/* stw R8, <#[R11]> */
		/* 82213CD4h case   49:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213CD4h case   49:*/		return 0x82213CD8;
		  /* 82213CD8h */ case   50:  		/* addi R11, R11, 4 */
		/* 82213CD8h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213CD8h case   50:*/		return 0x82213CDC;
		  /* 82213CDCh */ case   51:  		/* lwz R9, <#[R31 + 16]> */
		/* 82213CDCh case   51:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82213CDCh case   51:*/		return 0x82213CE0;
		  /* 82213CE0h */ case   52:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213CE0h case   52:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213CE0h case   52:*/		return 0x82213CE4;
		  /* 82213CE4h */ case   53:  		/* bc 12, CR0_EQ, 16 */
		/* 82213CE4h case   53:*/		if ( regs.CR[0].eq ) { return 0x82213CF4;  }
		/* 82213CE4h case   53:*/		return 0x82213CE8;
		  /* 82213CE8h */ case   54:  		/* lwz R9, <#[R31 + 40]> */
		/* 82213CE8h case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82213CE8h case   54:*/		return 0x82213CEC;
		  /* 82213CECh */ case   55:  		/* stw R9, <#[R11]> */
		/* 82213CECh case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213CECh case   55:*/		return 0x82213CF0;
		  /* 82213CF0h */ case   56:  		/* addi R11, R11, 4 */
		/* 82213CF0h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213CF0h case   56:*/		return 0x82213CF4;
	}
	return 0x82213CF4;
} // Block from 82213C10h-82213CF4h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82213CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213CF4);
		  /* 82213CF4h */ case    0:  		/* li R8, 0 */
		/* 82213CF4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82213CF4h case    0:*/		return 0x82213CF8;
		  /* 82213CF8h */ case    1:  		/* li R9, 65 */
		/* 82213CF8h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x41);
		/* 82213CF8h case    1:*/		return 0x82213CFC;
		  /* 82213CFCh */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 82213CFCh case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213CFCh case    2:*/		return 0x82213D00;
		  /* 82213D00h */ case    3:  		/* li R12, -26215 */
		/* 82213D00h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82213D00h case    3:*/		return 0x82213D04;
		  /* 82213D04h */ case    4:  		/* lwz R7, <#[R11]> */
		/* 82213D04h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D04h case    4:*/		return 0x82213D08;
		  /* 82213D08h */ case    5:  		/* rlwimi R7, R9, 16, 8, 15 */
		/* 82213D08h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R9);
		/* 82213D08h case    5:*/		return 0x82213D0C;
		  /* 82213D0Ch */ case    6:  		/* stw R7, <#[R11]> */
		/* 82213D0Ch case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D0Ch case    6:*/		return 0x82213D10;
		  /* 82213D10h */ case    7:  		/* li R5, 86 */
		/* 82213D10h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x56);
		/* 82213D10h case    7:*/		return 0x82213D14;
		  /* 82213D14h */ case    8:  		/* stb R10, <#[R11]> */
		/* 82213D14h case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D14h case    8:*/		return 0x82213D18;
		  /* 82213D18h */ case    9:  		/* rlwinm R7, R3, 0, 16, 31 */
		/* 82213D18h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R3);
		/* 82213D18h case    9:*/		return 0x82213D1C;
		  /* 82213D1Ch */ case   10:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82213D1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213D1Ch case   10:*/		return 0x82213D20;
		  /* 82213D20h */ case   11:  		/* and R4, R4, R12 */
		/* 82213D20h case   11:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82213D20h case   11:*/		return 0x82213D24;
		  /* 82213D24h */ case   12:  		/* ori R4, R4, 4369 */
		/* 82213D24h case   12:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1111);
		/* 82213D24h case   12:*/		return 0x82213D28;
		  /* 82213D28h */ case   13:  		/* li R12, -17477 */
		/* 82213D28h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82213D28h case   13:*/		return 0x82213D2C;
		  /* 82213D2Ch */ case   14:  		/* stw R4, <#[R11]> */
		/* 82213D2Ch case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D2Ch case   14:*/		return 0x82213D30;
		  /* 82213D30h */ case   15:  		/* addi R11, R11, 4 */
		/* 82213D30h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213D30h case   15:*/		return 0x82213D34;
		  /* 82213D34h */ case   16:  		/* sth R8, <#[R11 + 2]> */
		/* 82213D34h case   16:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213D34h case   16:*/		return 0x82213D38;
		  /* 82213D38h */ case   17:  		/* lwz R4, <#[R11]> */
		/* 82213D38h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D38h case   17:*/		return 0x82213D3C;
		  /* 82213D3Ch */ case   18:  		/* rlwimi R4, R9, 16, 8, 15 */
		/* 82213D3Ch case   18:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R4,regs.R9);
		/* 82213D3Ch case   18:*/		return 0x82213D40;
		  /* 82213D40h */ case   19:  		/* stw R4, <#[R11]> */
		/* 82213D40h case   19:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D40h case   19:*/		return 0x82213D44;
		  /* 82213D44h */ case   20:  		/* stb R10, <#[R11]> */
		/* 82213D44h case   20:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D44h case   20:*/		return 0x82213D48;
		  /* 82213D48h */ case   21:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82213D48h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213D48h case   21:*/		return 0x82213D4C;
		  /* 82213D4Ch */ case   22:  		/* and R4, R4, R12 */
		/* 82213D4Ch case   22:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82213D4Ch case   22:*/		return 0x82213D50;
		  /* 82213D50h */ case   23:  		/* ori R4, R4, 13107 */
		/* 82213D50h case   23:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3333);
		/* 82213D50h case   23:*/		return 0x82213D54;
		  /* 82213D54h */ case   24:  		/* stw R4, <#[R11]> */
		/* 82213D54h case   24:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D54h case   24:*/		return 0x82213D58;
		  /* 82213D58h */ case   25:  		/* addi R11, R11, 4 */
		/* 82213D58h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213D58h case   25:*/		return 0x82213D5C;
		  /* 82213D5Ch */ case   26:  		/* sth R5, <#[R11 + 2]> */
		/* 82213D5Ch case   26:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82213D5Ch case   26:*/		return 0x82213D60;
		  /* 82213D60h */ case   27:  		/* lwz R5, <#[R11]> */
		/* 82213D60h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D60h case   27:*/		return 0x82213D64;
		  /* 82213D64h */ case   28:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 82213D64h case   28:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 82213D64h case   28:*/		return 0x82213D68;
		  /* 82213D68h */ case   29:  		/* stw R5, <#[R11]> */
		/* 82213D68h case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D68h case   29:*/		return 0x82213D6C;
		  /* 82213D6Ch */ case   30:  		/* addi R11, R11, 4 */
		/* 82213D6Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213D6Ch case   30:*/		return 0x82213D70;
		  /* 82213D70h */ case   31:  		/* sth R7, <#[R11 + 2]> */
		/* 82213D70h case   31:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82213D70h case   31:*/		return 0x82213D74;
		  /* 82213D74h */ case   32:  		/* lwz R5, <#[R11]> */
		/* 82213D74h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D74h case   32:*/		return 0x82213D78;
		  /* 82213D78h */ case   33:  		/* rlwimi R5, R10, 18, 8, 15 */
		/* 82213D78h case   33:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R10);
		/* 82213D78h case   33:*/		return 0x82213D7C;
		  /* 82213D7Ch */ case   34:  		/* stw R5, <#[R11]> */
		/* 82213D7Ch case   34:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D7Ch case   34:*/		return 0x82213D80;
		  /* 82213D80h */ case   35:  		/* addi R11, R11, 4 */
		/* 82213D80h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213D80h case   35:*/		return 0x82213D84;
		  /* 82213D84h */ case   36:  		/* lwz R5, <#[R31 + 16]> */
		/* 82213D84h case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82213D84h case   36:*/		return 0x82213D88;
		  /* 82213D88h */ case   37:  		/* sth R5, <#[R11 + 2]> */
		/* 82213D88h case   37:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82213D88h case   37:*/		return 0x82213D8C;
		  /* 82213D8Ch */ case   38:  		/* lwz R5, <#[R11]> */
		/* 82213D8Ch case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D8Ch case   38:*/		return 0x82213D90;
		  /* 82213D90h */ case   39:  		/* lwz R4, <#[R31 + 16]> */
		/* 82213D90h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82213D90h case   39:*/		return 0x82213D94;
		  /* 82213D94h */ case   40:  		/* rlwimi R4, R5, 0, 16, 9 */
		/* 82213D94h case   40:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R4,regs.R5);
		/* 82213D94h case   40:*/		return 0x82213D98;
		  /* 82213D98h */ case   41:  		/* stw R4, <#[R11]> */
		/* 82213D98h case   41:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213D98h case   41:*/		return 0x82213D9C;
		  /* 82213D9Ch */ case   42:  		/* rlwinm R4, R4, 0, 0, 31 */
		/* 82213D9Ch case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R4);
		/* 82213D9Ch case   42:*/		return 0x82213DA0;
		  /* 82213DA0h */ case   43:  		/* lwz R5, <#[R31 + 16]> */
		/* 82213DA0h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82213DA0h case   43:*/		return 0x82213DA4;
		  /* 82213DA4h */ case   44:  		/* rlwimi R5, R4, 0, 9, 7 */
		/* 82213DA4h case   44:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R5,regs.R4);
		/* 82213DA4h case   44:*/		return 0x82213DA8;
		  /* 82213DA8h */ case   45:  		/* oris R5, R5, 64 */
		/* 82213DA8h case   45:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R5,0x40);
		/* 82213DA8h case   45:*/		return 0x82213DAC;
		  /* 82213DACh */ case   46:  		/* stw R5, <#[R11]> */
		/* 82213DACh case   46:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213DACh case   46:*/		return 0x82213DB0;
		  /* 82213DB0h */ case   47:  		/* lwzu R5, <#[R11 + 4]> */
		/* 82213DB0h case   47:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213DB0h case   47:*/		return 0x82213DB4;
		  /* 82213DB4h */ case   48:  		/* lwz R4, <#[R31 + 28]> */
		/* 82213DB4h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213DB4h case   48:*/		return 0x82213DB8;
	}
	return 0x82213DB8;
} // Block from 82213CF4h-82213DB8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82213DB8h
// Function '?DoNrm@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213DB8);
		  /* 82213DB8h */ case    0:  		/* rlwimi R4, R5, 0, 0, 28 */
		/* 82213DB8h case    0:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R4,regs.R5);
		/* 82213DB8h case    0:*/		return 0x82213DBC;
		  /* 82213DBCh */ case    1:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82213DBCh case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82213DBCh case    1:*/		return 0x82213DC0;
		  /* 82213DC0h */ case    2:  		/* stw R4, <#[R11]> */
		/* 82213DC0h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213DC0h case    2:*/		return 0x82213DC4;
		  /* 82213DC4h */ case    3:  		/* lwz R4, <#[R31 + 28]> */
		/* 82213DC4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213DC4h case    3:*/		return 0x82213DC8;
		  /* 82213DC8h */ case    4:  		/* rlwimi R4, R5, 0, 28, 24 */
		/* 82213DC8h case    4:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R4,regs.R5);
		/* 82213DC8h case    4:*/		return 0x82213DCC;
		  /* 82213DCCh */ case    5:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82213DCCh case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82213DCCh case    5:*/		return 0x82213DD0;
		  /* 82213DD0h */ case    6:  		/* stw R4, <#[R11]> */
		/* 82213DD0h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213DD0h case    6:*/		return 0x82213DD4;
		  /* 82213DD4h */ case    7:  		/* lwz R4, <#[R31 + 28]> */
		/* 82213DD4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213DD4h case    7:*/		return 0x82213DD8;
		  /* 82213DD8h */ case    8:  		/* rlwimi R4, R5, 0, 24, 20 */
		/* 82213DD8h case    8:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R4,regs.R5);
		/* 82213DD8h case    8:*/		return 0x82213DDC;
		  /* 82213DDCh */ case    9:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82213DDCh case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82213DDCh case    9:*/		return 0x82213DE0;
		  /* 82213DE0h */ case   10:  		/* stw R4, <#[R11]> */
		/* 82213DE0h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213DE0h case   10:*/		return 0x82213DE4;
		  /* 82213DE4h */ case   11:  		/* lwz R4, <#[R31 + 28]> */
		/* 82213DE4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213DE4h case   11:*/		return 0x82213DE8;
		  /* 82213DE8h */ case   12:  		/* rlwimi R4, R5, 0, 20, 16 */
		/* 82213DE8h case   12:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R4,regs.R5);
		/* 82213DE8h case   12:*/		return 0x82213DEC;
		  /* 82213DECh */ case   13:  		/* stw R4, <#[R11]> */
		/* 82213DECh case   13:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82213DECh case   13:*/		return 0x82213DF0;
		  /* 82213DF0h */ case   14:  		/* addi R11, R11, 4 */
		/* 82213DF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213DF0h case   14:*/		return 0x82213DF4;
		  /* 82213DF4h */ case   15:  		/* lwz R5, <#[R31 + 16]> */
		/* 82213DF4h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82213DF4h case   15:*/		return 0x82213DF8;
		  /* 82213DF8h */ case   16:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 82213DF8h case   16:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 82213DF8h case   16:*/		return 0x82213DFC;
		  /* 82213DFCh */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82213DFCh case   17:*/		if ( regs.CR[0].eq ) { return 0x82213E0C;  }
		/* 82213DFCh case   17:*/		return 0x82213E00;
		  /* 82213E00h */ case   18:  		/* lwz R5, <#[R31 + 40]> */
		/* 82213E00h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000028) );
		/* 82213E00h case   18:*/		return 0x82213E04;
		  /* 82213E04h */ case   19:  		/* stw R5, <#[R11]> */
		/* 82213E04h case   19:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E04h case   19:*/		return 0x82213E08;
		  /* 82213E08h */ case   20:  		/* addi R11, R11, 4 */
		/* 82213E08h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213E08h case   20:*/		return 0x82213E0C;
	}
	return 0x82213E0C;
} // Block from 82213DB8h-82213E0Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82213E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213E0C);
		  /* 82213E0Ch */ case    0:  		/* sth R8, <#[R11 + 2]> */
		/* 82213E0Ch case    0:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213E0Ch case    0:*/		return 0x82213E10;
		  /* 82213E10h */ case    1:  		/* li R12, -30584 */
		/* 82213E10h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82213E10h case    1:*/		return 0x82213E14;
		  /* 82213E14h */ case    2:  		/* lwz R5, <#[R11]> */
		/* 82213E14h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E14h case    2:*/		return 0x82213E18;
		  /* 82213E18h */ case    3:  		/* rlwimi R5, R9, 16, 8, 15 */
		/* 82213E18h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R5,regs.R9);
		/* 82213E18h case    3:*/		return 0x82213E1C;
		  /* 82213E1Ch */ case    4:  		/* stw R5, <#[R11]> */
		/* 82213E1Ch case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E1Ch case    4:*/		return 0x82213E20;
		  /* 82213E20h */ case    5:  		/* li R8, 73 */
		/* 82213E20h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x49);
		/* 82213E20h case    5:*/		return 0x82213E24;
		  /* 82213E24h */ case    6:  		/* stb R10, <#[R11]> */
		/* 82213E24h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E24h case    6:*/		return 0x82213E28;
		  /* 82213E28h */ case    7:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82213E28h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213E28h case    7:*/		return 0x82213E2C;
		  /* 82213E2Ch */ case    8:  		/* and R9, R9, R12 */
		/* 82213E2Ch case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82213E2Ch case    8:*/		return 0x82213E30;
		  /* 82213E30h */ case    9:  		/* stw R9, <#[R11]> */
		/* 82213E30h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E30h case    9:*/		return 0x82213E34;
		  /* 82213E34h */ case   10:  		/* addi R11, R11, 4 */
		/* 82213E34h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213E34h case   10:*/		return 0x82213E38;
		  /* 82213E38h */ case   11:  		/* sth R8, <#[R11 + 2]> */
		/* 82213E38h case   11:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82213E38h case   11:*/		return 0x82213E3C;
		  /* 82213E3Ch */ case   12:  		/* lwz R9, <#[R11]> */
		/* 82213E3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E3Ch case   12:*/		return 0x82213E40;
		  /* 82213E40h */ case   13:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82213E40h case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82213E40h case   13:*/		return 0x82213E44;
		  /* 82213E44h */ case   14:  		/* stw R9, <#[R11]> */
		/* 82213E44h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E44h case   14:*/		return 0x82213E48;
		  /* 82213E48h */ case   15:  		/* addi R11, R11, 4 */
		/* 82213E48h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213E48h case   15:*/		return 0x82213E4C;
		  /* 82213E4Ch */ case   16:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213E4Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213E4Ch case   16:*/		return 0x82213E50;
		  /* 82213E50h */ case   17:  		/* sth R9, <#[R11 + 2]> */
		/* 82213E50h case   17:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82213E50h case   17:*/		return 0x82213E54;
		  /* 82213E54h */ case   18:  		/* lwz R8, <#[R11]> */
		/* 82213E54h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E54h case   18:*/		return 0x82213E58;
		  /* 82213E58h */ case   19:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213E58h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213E58h case   19:*/		return 0x82213E5C;
		  /* 82213E5Ch */ case   20:  		/* rlwimi R9, R8, 0, 16, 9 */
		/* 82213E5Ch case   20:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R8);
		/* 82213E5Ch case   20:*/		return 0x82213E60;
		  /* 82213E60h */ case   21:  		/* stw R9, <#[R11]> */
		/* 82213E60h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E60h case   21:*/		return 0x82213E64;
		  /* 82213E64h */ case   22:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213E64h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213E64h case   22:*/		return 0x82213E68;
		  /* 82213E68h */ case   23:  		/* lwz R8, <#[R11]> */
		/* 82213E68h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E68h case   23:*/		return 0x82213E6C;
		  /* 82213E6Ch */ case   24:  		/* rlwimi R9, R8, 0, 9, 7 */
		/* 82213E6Ch case   24:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R8);
		/* 82213E6Ch case   24:*/		return 0x82213E70;
		  /* 82213E70h */ case   25:  		/* stw R9, <#[R11]> */
		/* 82213E70h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E70h case   25:*/		return 0x82213E74;
		  /* 82213E74h */ case   26:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82213E74h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82213E74h case   26:*/		return 0x82213E78;
		  /* 82213E78h */ case   27:  		/* lwz R8, <#[R31 + 4]> */
		/* 82213E78h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82213E78h case   27:*/		return 0x82213E7C;
		  /* 82213E7Ch */ case   28:  		/* rlwimi R8, R9, 0, 10, 8 */
		/* 82213E7Ch case   28:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R8,regs.R9);
		/* 82213E7Ch case   28:*/		return 0x82213E80;
		  /* 82213E80h */ case   29:  		/* stw R8, <#[R11]> */
		/* 82213E80h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E80h case   29:*/		return 0x82213E84;
		  /* 82213E84h */ case   30:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213E84h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213E84h case   30:*/		return 0x82213E88;
		  /* 82213E88h */ case   31:  		/* addi R11, R11, 4 */
		/* 82213E88h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213E88h case   31:*/		return 0x82213E8C;
		  /* 82213E8Ch */ case   32:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82213E8Ch case   32:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82213E8Ch case   32:*/		return 0x82213E90;
		  /* 82213E90h */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 82213E90h case   33:*/		if ( regs.CR[0].eq ) { return 0x82213EA0;  }
		/* 82213E90h case   33:*/		return 0x82213E94;
		  /* 82213E94h */ case   34:  		/* lwz R9, <#[R31 + 8]> */
		/* 82213E94h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82213E94h case   34:*/		return 0x82213E98;
		  /* 82213E98h */ case   35:  		/* stw R9, <#[R11]> */
		/* 82213E98h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213E98h case   35:*/		return 0x82213E9C;
		  /* 82213E9Ch */ case   36:  		/* addi R11, R11, 4 */
		/* 82213E9Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213E9Ch case   36:*/		return 0x82213EA0;
	}
	return 0x82213EA0;
} // Block from 82213E0Ch-82213EA0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82213EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213EA0);
		  /* 82213EA0h */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 82213EA0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82213EA0h case    0:*/		return 0x82213EA4;
		  /* 82213EA4h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82213EA4h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82213EA4h case    1:*/		return 0x82213EA8;
		  /* 82213EA8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82213EA8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82213EB8;  }
		/* 82213EA8h case    2:*/		return 0x82213EAC;
		  /* 82213EACh */ case    3:  		/* lwz R9, <#[R31 + 12]> */
		/* 82213EACh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82213EACh case    3:*/		return 0x82213EB0;
		  /* 82213EB0h */ case    4:  		/* stw R9, <#[R11]> */
		/* 82213EB0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213EB0h case    4:*/		return 0x82213EB4;
		  /* 82213EB4h */ case    5:  		/* addi R11, R11, 4 */
		/* 82213EB4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213EB4h case    5:*/		return 0x82213EB8;
	}
	return 0x82213EB8;
} // Block from 82213EA0h-82213EB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82213EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213EB8);
		  /* 82213EB8h */ case    0:  		/* sth R6, <#[R11 + 2]> */
		/* 82213EB8h case    0:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82213EB8h case    0:*/		return 0x82213EBC;
		  /* 82213EBCh */ case    1:  		/* lwz R9, <#[R11]> */
		/* 82213EBCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213EBCh case    1:*/		return 0x82213EC0;
		  /* 82213EC0h */ case    2:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82213EC0h case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82213EC0h case    2:*/		return 0x82213EC4;
		  /* 82213EC4h */ case    3:  		/* stw R9, <#[R11]> */
		/* 82213EC4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213EC4h case    3:*/		return 0x82213EC8;
		  /* 82213EC8h */ case    4:  		/* addi R11, R11, 4 */
		/* 82213EC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213EC8h case    4:*/		return 0x82213ECC;
		  /* 82213ECCh */ case    5:  		/* addi R3, R11, 4 */
		/* 82213ECCh case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82213ECCh case    5:*/		return 0x82213ED0;
		  /* 82213ED0h */ case    6:  		/* sth R7, <#[R11 + 2]> */
		/* 82213ED0h case    6:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82213ED0h case    6:*/		return 0x82213ED4;
		  /* 82213ED4h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82213ED4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213ED4h case    7:*/		return 0x82213ED8;
		  /* 82213ED8h */ case    8:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82213ED8h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82213ED8h case    8:*/		return 0x82213EDC;
		  /* 82213EDCh */ case    9:  		/* stw R9, <#[R11]> */
		/* 82213EDCh case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82213EDCh case    9:*/		return 0x82213EE0;
		  /* 82213EE0h */ case   10:  		/* addi R1, R1, 128 */
		/* 82213EE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82213EE0h case   10:*/		return 0x82213EE4;
		  /* 82213EE4h */ case   11:  		/* b -1584188 */
		/* 82213EE4h case   11:*/		return 0x820912A8;
		/* 82213EE4h case   11:*/		return 0x82213EE8;
	}
	return 0x82213EE8;
} // Block from 82213EB8h-82213EE8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82213EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82213EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82213EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82213EE8);
		  /* 82213EE8h */ case    0:  		/* mfspr R12, LR */
		/* 82213EE8h case    0:*/		regs.R12 = regs.LR;
		/* 82213EE8h case    0:*/		return 0x82213EEC;
		  /* 82213EECh */ case    1:  		/* bl -1584272 */
		/* 82213EECh case    1:*/		regs.LR = 0x82213EF0; return 0x8209125C;
		/* 82213EECh case    1:*/		return 0x82213EF0;
		  /* 82213EF0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82213EF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82213EF0h case    2:*/		return 0x82213EF4;
		  /* 82213EF4h */ case    3:  		/* mr R31, R4 */
		/* 82213EF4h case    3:*/		regs.R31 = regs.R4;
		/* 82213EF4h case    3:*/		return 0x82213EF8;
		  /* 82213EF8h */ case    4:  		/* mr R30, R5 */
		/* 82213EF8h case    4:*/		regs.R30 = regs.R5;
		/* 82213EF8h case    4:*/		return 0x82213EFC;
		  /* 82213EFCh */ case    5:  		/* bl -19668 */
		/* 82213EFCh case    5:*/		regs.LR = 0x82213F00; return 0x8220F228;
		/* 82213EFCh case    5:*/		return 0x82213F00;
		  /* 82213F00h */ case    6:  		/* li R29, 73 */
		/* 82213F00h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x49);
		/* 82213F00h case    6:*/		return 0x82213F04;
		  /* 82213F04h */ case    7:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82213F04h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82213F04h case    7:*/		return 0x82213F08;
		  /* 82213F08h */ case    8:  		/* sth R29, <#[R30 + 2]> */
		/* 82213F08h case    8:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R30 + 0x00000002) );
		/* 82213F08h case    8:*/		return 0x82213F0C;
		  /* 82213F0Ch */ case    9:  		/* li R7, 17 */
		/* 82213F0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x11);
		/* 82213F0Ch case    9:*/		return 0x82213F10;
		  /* 82213F10h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 82213F10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82213F10h case   10:*/		return 0x82213F14;
		  /* 82213F14h */ case   11:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82213F14h case   11:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82213F14h case   11:*/		return 0x82213F18;
		  /* 82213F18h */ case   12:  		/* stw R11, <#[R30]> */
		/* 82213F18h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82213F18h case   12:*/		return 0x82213F1C;
		  /* 82213F1Ch */ case   13:  		/* addi R11, R30, 4 */
		/* 82213F1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82213F1Ch case   13:*/		return 0x82213F20;
		  /* 82213F20h */ case   14:  		/* sth R9, <#[R30 + 6]> */
		/* 82213F20h case   14:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 82213F20h case   14:*/		return 0x82213F24;
		  /* 82213F24h */ case   15:  		/* li R10, 16 */
		/* 82213F24h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 82213F24h case   15:*/		return 0x82213F28;
		  /* 82213F28h */ case   16:  		/* lwz R8, <#[R30 + 4]> */
		/* 82213F28h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82213F28h case   16:*/		return 0x82213F2C;
		  /* 82213F2Ch */ case   17:  		/* rlwimi R8, R7, 18, 8, 15 */
		/* 82213F2Ch case   17:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R7);
		/* 82213F2Ch case   17:*/		return 0x82213F30;
		  /* 82213F30h */ case   18:  		/* stw R8, <#[R30 + 4]> */
		/* 82213F30h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82213F30h case   18:*/		return 0x82213F34;
		  /* 82213F34h */ case   19:  		/* stwu R10, <#[R11 + 4]> */
		/* 82213F34h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213F34h case   19:*/		return 0x82213F38;
		  /* 82213F38h */ case   20:  		/* lwz R10, <#[R31 + 16]> */
		/* 82213F38h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82213F38h case   20:*/		return 0x82213F3C;
		  /* 82213F3Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 82213F3Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213F3Ch case   21:*/		return 0x82213F40;
		  /* 82213F40h */ case   22:  		/* sth R10, <#[R11 + 2]> */
		/* 82213F40h case   22:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82213F40h case   22:*/		return 0x82213F44;
		  /* 82213F44h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 82213F44h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F44h case   23:*/		return 0x82213F48;
		  /* 82213F48h */ case   24:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213F48h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213F48h case   24:*/		return 0x82213F4C;
		  /* 82213F4Ch */ case   25:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82213F4Ch case   25:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82213F4Ch case   25:*/		return 0x82213F50;
		  /* 82213F50h */ case   26:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82213F50h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82213F50h case   26:*/		return 0x82213F54;
		  /* 82213F54h */ case   27:  		/* stw R8, <#[R11]> */
		/* 82213F54h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F54h case   27:*/		return 0x82213F58;
		  /* 82213F58h */ case   28:  		/* lwz R8, <#[R31 + 16]> */
		/* 82213F58h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82213F58h case   28:*/		return 0x82213F5C;
		  /* 82213F5Ch */ case   29:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82213F5Ch case   29:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82213F5Ch case   29:*/		return 0x82213F60;
		  /* 82213F60h */ case   30:  		/* oris R10, R8, 64 */
		/* 82213F60h case   30:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 82213F60h case   30:*/		return 0x82213F64;
		  /* 82213F64h */ case   31:  		/* stw R10, <#[R11]> */
		/* 82213F64h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F64h case   31:*/		return 0x82213F68;
		  /* 82213F68h */ case   32:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82213F68h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82213F68h case   32:*/		return 0x82213F6C;
		  /* 82213F6Ch */ case   33:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213F6Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213F6Ch case   33:*/		return 0x82213F70;
		  /* 82213F70h */ case   34:  		/* rlwimi R10, R8, 20, 29, 31 */
		/* 82213F70h case   34:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R10,regs.R8);
		/* 82213F70h case   34:*/		return 0x82213F74;
		  /* 82213F74h */ case   35:  		/* stw R10, <#[R11]> */
		/* 82213F74h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F74h case   35:*/		return 0x82213F78;
		  /* 82213F78h */ case   36:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213F78h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213F78h case   36:*/		return 0x82213F7C;
		  /* 82213F7Ch */ case   37:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213F7Ch case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213F7Ch case   37:*/		return 0x82213F80;
		  /* 82213F80h */ case   38:  		/* rlwimi R10, R8, 24, 25, 27 */
		/* 82213F80h case   38:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R10,regs.R8);
		/* 82213F80h case   38:*/		return 0x82213F84;
		  /* 82213F84h */ case   39:  		/* stw R10, <#[R11]> */
		/* 82213F84h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F84h case   39:*/		return 0x82213F88;
		  /* 82213F88h */ case   40:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213F88h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213F88h case   40:*/		return 0x82213F8C;
		  /* 82213F8Ch */ case   41:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213F8Ch case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213F8Ch case   41:*/		return 0x82213F90;
		  /* 82213F90h */ case   42:  		/* rlwimi R10, R8, 28, 21, 23 */
		/* 82213F90h case   42:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R10,regs.R8);
		/* 82213F90h case   42:*/		return 0x82213F94;
		  /* 82213F94h */ case   43:  		/* stw R10, <#[R11]> */
		/* 82213F94h case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213F94h case   43:*/		return 0x82213F98;
		  /* 82213F98h */ case   44:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213F98h case   44:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213F98h case   44:*/		return 0x82213F9C;
		  /* 82213F9Ch */ case   45:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213F9Ch case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213F9Ch case   45:*/		return 0x82213FA0;
		  /* 82213FA0h */ case   46:  		/* rlwimi R8, R10, 0, 20, 16 */
		/* 82213FA0h case   46:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R10);
		/* 82213FA0h case   46:*/		return 0x82213FA4;
		  /* 82213FA4h */ case   47:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82213FA4h case   47:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82213FA4h case   47:*/		return 0x82213FA8;
		  /* 82213FA8h */ case   48:  		/* stw R8, <#[R11]> */
		/* 82213FA8h case   48:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FA8h case   48:*/		return 0x82213FAC;
		  /* 82213FACh */ case   49:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213FACh case   49:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213FACh case   49:*/		return 0x82213FB0;
		  /* 82213FB0h */ case   50:  		/* rlwimi R10, R8, 0, 28, 28 */
		/* 82213FB0h case   50:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R10,regs.R8);
		/* 82213FB0h case   50:*/		return 0x82213FB4;
		  /* 82213FB4h */ case   51:  		/* stw R10, <#[R11]> */
		/* 82213FB4h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FB4h case   51:*/		return 0x82213FB8;
		  /* 82213FB8h */ case   52:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213FB8h case   52:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213FB8h case   52:*/		return 0x82213FBC;
		  /* 82213FBCh */ case   53:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213FBCh case   53:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213FBCh case   53:*/		return 0x82213FC0;
		  /* 82213FC0h */ case   54:  		/* rlwimi R10, R8, 0, 24, 24 */
		/* 82213FC0h case   54:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R10,regs.R8);
		/* 82213FC0h case   54:*/		return 0x82213FC4;
		  /* 82213FC4h */ case   55:  		/* stw R10, <#[R11]> */
		/* 82213FC4h case   55:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FC4h case   55:*/		return 0x82213FC8;
		  /* 82213FC8h */ case   56:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213FC8h case   56:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213FC8h case   56:*/		return 0x82213FCC;
		  /* 82213FCCh */ case   57:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213FCCh case   57:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213FCCh case   57:*/		return 0x82213FD0;
		  /* 82213FD0h */ case   58:  		/* rlwimi R10, R8, 0, 20, 20 */
		/* 82213FD0h case   58:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R10,regs.R8);
		/* 82213FD0h case   58:*/		return 0x82213FD4;
		  /* 82213FD4h */ case   59:  		/* stw R10, <#[R11]> */
		/* 82213FD4h case   59:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FD4h case   59:*/		return 0x82213FD8;
		  /* 82213FD8h */ case   60:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213FD8h case   60:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213FD8h case   60:*/		return 0x82213FDC;
		  /* 82213FDCh */ case   61:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213FDCh case   61:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213FDCh case   61:*/		return 0x82213FE0;
		  /* 82213FE0h */ case   62:  		/* rlwimi R10, R8, 0, 16, 16 */
		/* 82213FE0h case   62:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R10,regs.R8);
		/* 82213FE0h case   62:*/		return 0x82213FE4;
		  /* 82213FE4h */ case   63:  		/* stw R10, <#[R11]> */
		/* 82213FE4h case   63:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FE4h case   63:*/		return 0x82213FE8;
		  /* 82213FE8h */ case   64:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82213FE8h case   64:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82213FE8h case   64:*/		return 0x82213FEC;
		  /* 82213FECh */ case   65:  		/* lwz R8, <#[R31 + 28]> */
		/* 82213FECh case   65:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82213FECh case   65:*/		return 0x82213FF0;
		  /* 82213FF0h */ case   66:  		/* rlwimi R10, R8, 0, 11, 11 */
		/* 82213FF0h case   66:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R10,regs.R8);
		/* 82213FF0h case   66:*/		return 0x82213FF4;
		  /* 82213FF4h */ case   67:  		/* stw R10, <#[R11]> */
		/* 82213FF4h case   67:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82213FF4h case   67:*/		return 0x82213FF8;
		  /* 82213FF8h */ case   68:  		/* addi R11, R11, 4 */
		/* 82213FF8h case   68:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82213FF8h case   68:*/		return 0x82213FFC;
		  /* 82213FFCh */ case   69:  		/* lwz R10, <#[R31 + 16]> */
		/* 82213FFCh case   69:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82213FFCh case   69:*/		return 0x82214000;
		  /* 82214000h */ case   70:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82214000h case   70:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82214000h case   70:*/		return 0x82214004;
		  /* 82214004h */ case   71:  		/* bc 12, CR0_EQ, 16 */
		/* 82214004h case   71:*/		if ( regs.CR[0].eq ) { return 0x82214014;  }
		/* 82214004h case   71:*/		return 0x82214008;
		  /* 82214008h */ case   72:  		/* lwz R10, <#[R31 + 40]> */
		/* 82214008h case   72:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82214008h case   72:*/		return 0x8221400C;
		  /* 8221400Ch */ case   73:  		/* stw R10, <#[R11]> */
		/* 8221400Ch case   73:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221400Ch case   73:*/		return 0x82214010;
		  /* 82214010h */ case   74:  		/* addi R11, R11, 4 */
		/* 82214010h case   74:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214010h case   74:*/		return 0x82214014;
	}
	return 0x82214014;
} // Block from 82213EE8h-82214014h (75 instructions)

//////////////////////////////////////////////////////
// Block at 82214014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214014);
		  /* 82214014h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 82214014h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82214014h case    0:*/		return 0x82214018;
		  /* 82214018h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82214018h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82214018h case    1:*/		return 0x8221401C;
		  /* 8221401Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8221401Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221401Ch case    2:*/		return 0x82214020;
		  /* 82214020h */ case    3:  		/* lwz R8, <#[R31 + 16]> */
		/* 82214020h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82214020h case    3:*/		return 0x82214024;
		  /* 82214024h */ case    4:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82214024h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82214024h case    4:*/		return 0x82214028;
		  /* 82214028h */ case    5:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82214028h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82214028h case    5:*/		return 0x8221402C;
		  /* 8221402Ch */ case    6:  		/* stw R8, <#[R11]> */
		/* 8221402Ch case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221402Ch case    6:*/		return 0x82214030;
		  /* 82214030h */ case    7:  		/* lwz R8, <#[R31 + 16]> */
		/* 82214030h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82214030h case    7:*/		return 0x82214034;
		  /* 82214034h */ case    8:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82214034h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82214034h case    8:*/		return 0x82214038;
		  /* 82214038h */ case    9:  		/* oris R10, R8, 64 */
		/* 82214038h case    9:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 82214038h case    9:*/		return 0x8221403C;
		  /* 8221403Ch */ case   10:  		/* stw R10, <#[R11]> */
		/* 8221403Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221403Ch case   10:*/		return 0x82214040;
		  /* 82214040h */ case   11:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82214040h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214040h case   11:*/		return 0x82214044;
		  /* 82214044h */ case   12:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214044h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214044h case   12:*/		return 0x82214048;
		  /* 82214048h */ case   13:  		/* rlwimi R10, R8, 20, 29, 31 */
		/* 82214048h case   13:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R10,regs.R8);
		/* 82214048h case   13:*/		return 0x8221404C;
		  /* 8221404Ch */ case   14:  		/* stw R10, <#[R11]> */
		/* 8221404Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221404Ch case   14:*/		return 0x82214050;
		  /* 82214050h */ case   15:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214050h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214050h case   15:*/		return 0x82214054;
		  /* 82214054h */ case   16:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214054h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214054h case   16:*/		return 0x82214058;
		  /* 82214058h */ case   17:  		/* rlwimi R10, R8, 24, 25, 27 */
		/* 82214058h case   17:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R10,regs.R8);
		/* 82214058h case   17:*/		return 0x8221405C;
		  /* 8221405Ch */ case   18:  		/* stw R10, <#[R11]> */
		/* 8221405Ch case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221405Ch case   18:*/		return 0x82214060;
		  /* 82214060h */ case   19:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214060h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214060h case   19:*/		return 0x82214064;
		  /* 82214064h */ case   20:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214064h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214064h case   20:*/		return 0x82214068;
		  /* 82214068h */ case   21:  		/* rlwimi R10, R8, 28, 21, 23 */
		/* 82214068h case   21:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R10,regs.R8);
		/* 82214068h case   21:*/		return 0x8221406C;
		  /* 8221406Ch */ case   22:  		/* stw R10, <#[R11]> */
		/* 8221406Ch case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221406Ch case   22:*/		return 0x82214070;
		  /* 82214070h */ case   23:  		/* lwz R8, <#[R11]> */
		/* 82214070h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214070h case   23:*/		return 0x82214074;
		  /* 82214074h */ case   24:  		/* lwz R10, <#[R31 + 28]> */
		/* 82214074h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214074h case   24:*/		return 0x82214078;
		  /* 82214078h */ case   25:  		/* rlwimi R10, R8, 0, 20, 16 */
		/* 82214078h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R10,regs.R8);
		/* 82214078h case   25:*/		return 0x8221407C;
		  /* 8221407Ch */ case   26:  		/* stw R10, <#[R11]> */
		/* 8221407Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221407Ch case   26:*/		return 0x82214080;
		  /* 82214080h */ case   27:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214080h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214080h case   27:*/		return 0x82214084;
		  /* 82214084h */ case   28:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214084h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214084h case   28:*/		return 0x82214088;
		  /* 82214088h */ case   29:  		/* rlwimi R10, R8, 0, 28, 28 */
		/* 82214088h case   29:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R10,regs.R8);
		/* 82214088h case   29:*/		return 0x8221408C;
		  /* 8221408Ch */ case   30:  		/* stw R10, <#[R11]> */
		/* 8221408Ch case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221408Ch case   30:*/		return 0x82214090;
		  /* 82214090h */ case   31:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214090h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214090h case   31:*/		return 0x82214094;
		  /* 82214094h */ case   32:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214094h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214094h case   32:*/		return 0x82214098;
		  /* 82214098h */ case   33:  		/* rlwimi R10, R8, 0, 24, 24 */
		/* 82214098h case   33:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R10,regs.R8);
		/* 82214098h case   33:*/		return 0x8221409C;
		  /* 8221409Ch */ case   34:  		/* stw R10, <#[R11]> */
		/* 8221409Ch case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221409Ch case   34:*/		return 0x822140A0;
		  /* 822140A0h */ case   35:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822140A0h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822140A0h case   35:*/		return 0x822140A4;
		  /* 822140A4h */ case   36:  		/* lwz R8, <#[R31 + 28]> */
		/* 822140A4h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822140A4h case   36:*/		return 0x822140A8;
		  /* 822140A8h */ case   37:  		/* rlwimi R10, R8, 0, 20, 20 */
		/* 822140A8h case   37:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R10,regs.R8);
		/* 822140A8h case   37:*/		return 0x822140AC;
		  /* 822140ACh */ case   38:  		/* stw R10, <#[R11]> */
		/* 822140ACh case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822140ACh case   38:*/		return 0x822140B0;
		  /* 822140B0h */ case   39:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822140B0h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822140B0h case   39:*/		return 0x822140B4;
		  /* 822140B4h */ case   40:  		/* lwz R8, <#[R31 + 28]> */
		/* 822140B4h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822140B4h case   40:*/		return 0x822140B8;
		  /* 822140B8h */ case   41:  		/* rlwimi R10, R8, 0, 16, 16 */
		/* 822140B8h case   41:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R10,regs.R8);
		/* 822140B8h case   41:*/		return 0x822140BC;
		  /* 822140BCh */ case   42:  		/* stw R10, <#[R11]> */
		/* 822140BCh case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822140BCh case   42:*/		return 0x822140C0;
		  /* 822140C0h */ case   43:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 822140C0h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 822140C0h case   43:*/		return 0x822140C4;
		  /* 822140C4h */ case   44:  		/* lwz R8, <#[R31 + 28]> */
		/* 822140C4h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822140C4h case   44:*/		return 0x822140C8;
		  /* 822140C8h */ case   45:  		/* rlwimi R10, R8, 0, 11, 11 */
		/* 822140C8h case   45:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R10,regs.R8);
		/* 822140C8h case   45:*/		return 0x822140CC;
		  /* 822140CCh */ case   46:  		/* stw R10, <#[R11]> */
		/* 822140CCh case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822140CCh case   46:*/		return 0x822140D0;
		  /* 822140D0h */ case   47:  		/* addi R11, R11, 4 */
		/* 822140D0h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822140D0h case   47:*/		return 0x822140D4;
		  /* 822140D4h */ case   48:  		/* lwz R10, <#[R31 + 16]> */
		/* 822140D4h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 822140D4h case   48:*/		return 0x822140D8;
		  /* 822140D8h */ case   49:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822140D8h case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822140D8h case   49:*/		return 0x822140DC;
		  /* 822140DCh */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 822140DCh case   50:*/		if ( regs.CR[0].eq ) { return 0x822140EC;  }
		/* 822140DCh case   50:*/		return 0x822140E0;
		  /* 822140E0h */ case   51:  		/* lwz R10, <#[R31 + 40]> */
		/* 822140E0h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 822140E0h case   51:*/		return 0x822140E4;
		  /* 822140E4h */ case   52:  		/* stw R10, <#[R11]> */
		/* 822140E4h case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822140E4h case   52:*/		return 0x822140E8;
		  /* 822140E8h */ case   53:  		/* addi R11, R11, 4 */
		/* 822140E8h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822140E8h case   53:*/		return 0x822140EC;
	}
	return 0x822140EC;
} // Block from 82214014h-822140ECh (54 instructions)

//////////////////////////////////////////////////////
// Block at 822140ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822140EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822140EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822140EC);
		  /* 822140ECh */ case    0:  		/* li R8, 64 */
		/* 822140ECh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x40);
		/* 822140ECh case    0:*/		return 0x822140F0;
		  /* 822140F0h */ case    1:  		/* li R4, 5 */
		/* 822140F0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 822140F0h case    1:*/		return 0x822140F4;
		  /* 822140F4h */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 822140F4h case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822140F4h case    2:*/		return 0x822140F8;
		  /* 822140F8h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 822140F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822140F8h case    3:*/		return 0x822140FC;
		  /* 822140FCh */ case    4:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 822140FCh case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 822140FCh case    4:*/		return 0x82214100;
		  /* 82214100h */ case    5:  		/* stw R10, <#[R11]> */
		/* 82214100h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214100h case    5:*/		return 0x82214104;
		  /* 82214104h */ case    6:  		/* addi R11, R11, 4 */
		/* 82214104h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214104h case    6:*/		return 0x82214108;
		  /* 82214108h */ case    7:  		/* lwz R10, <#[R31 + 4]> */
		/* 82214108h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82214108h case    7:*/		return 0x8221410C;
		  /* 8221410Ch */ case    8:  		/* sth R10, <#[R11 + 2]> */
		/* 8221410Ch case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221410Ch case    8:*/		return 0x82214110;
		  /* 82214110h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 82214110h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214110h case    9:*/		return 0x82214114;
		  /* 82214114h */ case   10:  		/* lwz R6, <#[R31 + 4]> */
		/* 82214114h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82214114h case   10:*/		return 0x82214118;
		  /* 82214118h */ case   11:  		/* rlwimi R6, R10, 0, 16, 9 */
		/* 82214118h case   11:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R10);
		/* 82214118h case   11:*/		return 0x8221411C;
		  /* 8221411Ch */ case   12:  		/* stw R6, <#[R11]> */
		/* 8221411Ch case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221411Ch case   12:*/		return 0x82214120;
		  /* 82214120h */ case   13:  		/* rlwinm R6, R6, 0, 0, 31 */
		/* 82214120h case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R6);
		/* 82214120h case   13:*/		return 0x82214124;
		  /* 82214124h */ case   14:  		/* lwz R10, <#[R31 + 4]> */
		/* 82214124h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82214124h case   14:*/		return 0x82214128;
		  /* 82214128h */ case   15:  		/* rlwimi R10, R6, 0, 9, 7 */
		/* 82214128h case   15:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R10,regs.R6);
		/* 82214128h case   15:*/		return 0x8221412C;
		  /* 8221412Ch */ case   16:  		/* oris R10, R10, 64 */
		/* 8221412Ch case   16:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 8221412Ch case   16:*/		return 0x82214130;
		  /* 82214130h */ case   17:  		/* stw R10, <#[R11]> */
		/* 82214130h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214130h case   17:*/		return 0x82214134;
		  /* 82214134h */ case   18:  		/* stwu R4, <#[R11 + 4]> */
		/* 82214134h case   18:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214134h case   18:*/		return 0x82214138;
		  /* 82214138h */ case   19:  		/* lwz R10, <#[R31 + 4]> */
		/* 82214138h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82214138h case   19:*/		return 0x8221413C;
		  /* 8221413Ch */ case   20:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 8221413Ch case   20:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 8221413Ch case   20:*/		return 0x82214140;
		  /* 82214140h */ case   21:  		/* addi R11, R11, 4 */
		/* 82214140h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214140h case   21:*/		return 0x82214144;
		  /* 82214144h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 82214144h case   22:*/		if ( regs.CR[0].eq ) { return 0x82214154;  }
		/* 82214144h case   22:*/		return 0x82214148;
		  /* 82214148h */ case   23:  		/* lwz R10, <#[R31 + 12]> */
		/* 82214148h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82214148h case   23:*/		return 0x8221414C;
		  /* 8221414Ch */ case   24:  		/* stw R10, <#[R11]> */
		/* 8221414Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221414Ch case   24:*/		return 0x82214150;
		  /* 82214150h */ case   25:  		/* addi R11, R11, 4 */
		/* 82214150h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214150h case   25:*/		return 0x82214154;
	}
	return 0x82214154;
} // Block from 822140ECh-82214154h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82214154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214154);
		  /* 82214154h */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 82214154h case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214154h case    0:*/		return 0x82214158;
		  /* 82214158h */ case    1:  		/* li R12, -21846 */
		/* 82214158h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 82214158h case    1:*/		return 0x8221415C;
		  /* 8221415Ch */ case    2:  		/* li R6, 8 */
		/* 8221415Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 8221415Ch case    2:*/		return 0x82214160;
		  /* 82214160h */ case    3:  		/* li R5, 65 */
		/* 82214160h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x41);
		/* 82214160h case    3:*/		return 0x82214164;
		  /* 82214164h */ case    4:  		/* li R10, 1 */
		/* 82214164h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82214164h case    4:*/		return 0x82214168;
		  /* 82214168h */ case    5:  		/* lwz R3, <#[R11]> */
		/* 82214168h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214168h case    5:*/		return 0x8221416C;
		  /* 8221416Ch */ case    6:  		/* rlwimi R3, R7, 18, 8, 15 */
		/* 8221416Ch case    6:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R7);
		/* 8221416Ch case    6:*/		return 0x82214170;
		  /* 82214170h */ case    7:  		/* stw R3, <#[R11]> */
		/* 82214170h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214170h case    7:*/		return 0x82214174;
		  /* 82214174h */ case    8:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82214174h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214174h case    8:*/		return 0x82214178;
		  /* 82214178h */ case    9:  		/* and R3, R3, R12 */
		/* 82214178h case    9:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82214178h case    9:*/		return 0x8221417C;
		  /* 8221417Ch */ case   10:  		/* ori R3, R3, 8738 */
		/* 8221417Ch case   10:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x2222);
		/* 8221417Ch case   10:*/		return 0x82214180;
		  /* 82214180h */ case   11:  		/* li R12, -26216 */
		/* 82214180h case   11:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 82214180h case   11:*/		return 0x82214184;
		  /* 82214184h */ case   12:  		/* stw R3, <#[R11]> */
		/* 82214184h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214184h case   12:*/		return 0x82214188;
		  /* 82214188h */ case   13:  		/* addi R11, R11, 4 */
		/* 82214188h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214188h case   13:*/		return 0x8221418C;
		  /* 8221418Ch */ case   14:  		/* sth R6, <#[R11 + 2]> */
		/* 8221418Ch case   14:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 8221418Ch case   14:*/		return 0x82214190;
		  /* 82214190h */ case   15:  		/* lwz R3, <#[R11]> */
		/* 82214190h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214190h case   15:*/		return 0x82214194;
		  /* 82214194h */ case   16:  		/* rlwimi R3, R5, 16, 8, 15 */
		/* 82214194h case   16:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R5);
		/* 82214194h case   16:*/		return 0x82214198;
		  /* 82214198h */ case   17:  		/* stw R3, <#[R11]> */
		/* 82214198h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214198h case   17:*/		return 0x8221419C;
		  /* 8221419Ch */ case   18:  		/* stb R10, <#[R11]> */
		/* 8221419Ch case   18:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221419Ch case   18:*/		return 0x822141A0;
		  /* 822141A0h */ case   19:  		/* lwzu R3, <#[R11 + 4]> */
		/* 822141A0h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822141A0h case   19:*/		return 0x822141A4;
		  /* 822141A4h */ case   20:  		/* and R3, R3, R12 */
		/* 822141A4h case   20:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 822141A4h case   20:*/		return 0x822141A8;
		  /* 822141A8h */ case   21:  		/* ori R3, R3, 4368 */
		/* 822141A8h case   21:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1110);
		/* 822141A8h case   21:*/		return 0x822141AC;
		  /* 822141ACh */ case   22:  		/* li R12, -21845 */
		/* 822141ACh case   22:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAB);
		/* 822141ACh case   22:*/		return 0x822141B0;
	}
	return 0x822141B0;
} // Block from 82214154h-822141B0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822141B0h
// Function '?DoPow@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822141B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822141B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822141B0);
		  /* 822141B0h */ case    0:  		/* stw R3, <#[R11]> */
		/* 822141B0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822141B0h case    0:*/		return 0x822141B4;
		  /* 822141B4h */ case    1:  		/* addi R11, R11, 4 */
		/* 822141B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822141B4h case    1:*/		return 0x822141B8;
		  /* 822141B8h */ case    2:  		/* sth R6, <#[R11 + 2]> */
		/* 822141B8h case    2:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822141B8h case    2:*/		return 0x822141BC;
		  /* 822141BCh */ case    3:  		/* lwz R6, <#[R11]> */
		/* 822141BCh case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141BCh case    3:*/		return 0x822141C0;
		  /* 822141C0h */ case    4:  		/* rlwimi R6, R5, 16, 8, 15 */
		/* 822141C0h case    4:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R6,regs.R5);
		/* 822141C0h case    4:*/		return 0x822141C4;
		  /* 822141C4h */ case    5:  		/* stw R6, <#[R11]> */
		/* 822141C4h case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141C4h case    5:*/		return 0x822141C8;
		  /* 822141C8h */ case    6:  		/* stb R10, <#[R11]> */
		/* 822141C8h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822141C8h case    6:*/		return 0x822141CC;
		  /* 822141CCh */ case    7:  		/* lwzu R6, <#[R11 + 4]> */
		/* 822141CCh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822141CCh case    7:*/		return 0x822141D0;
		  /* 822141D0h */ case    8:  		/* and R6, R6, R12 */
		/* 822141D0h case    8:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 822141D0h case    8:*/		return 0x822141D4;
		  /* 822141D4h */ case    9:  		/* ori R6, R6, 8739 */
		/* 822141D4h case    9:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2223);
		/* 822141D4h case    9:*/		return 0x822141D8;
		  /* 822141D8h */ case   10:  		/* stw R6, <#[R11]> */
		/* 822141D8h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141D8h case   10:*/		return 0x822141DC;
		  /* 822141DCh */ case   11:  		/* addi R11, R11, 4 */
		/* 822141DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822141DCh case   11:*/		return 0x822141E0;
		  /* 822141E0h */ case   12:  		/* sth R8, <#[R11 + 2]> */
		/* 822141E0h case   12:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822141E0h case   12:*/		return 0x822141E4;
		  /* 822141E4h */ case   13:  		/* lwz R6, <#[R11]> */
		/* 822141E4h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141E4h case   13:*/		return 0x822141E8;
		  /* 822141E8h */ case   14:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 822141E8h case   14:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 822141E8h case   14:*/		return 0x822141EC;
		  /* 822141ECh */ case   15:  		/* stw R6, <#[R11]> */
		/* 822141ECh case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141ECh case   15:*/		return 0x822141F0;
		  /* 822141F0h */ case   16:  		/* addi R11, R11, 4 */
		/* 822141F0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822141F0h case   16:*/		return 0x822141F4;
		  /* 822141F4h */ case   17:  		/* lwz R6, <#[R31 + 4]> */
		/* 822141F4h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 822141F4h case   17:*/		return 0x822141F8;
		  /* 822141F8h */ case   18:  		/* sth R6, <#[R11 + 2]> */
		/* 822141F8h case   18:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822141F8h case   18:*/		return 0x822141FC;
		  /* 822141FCh */ case   19:  		/* lwz R6, <#[R11]> */
		/* 822141FCh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822141FCh case   19:*/		return 0x82214200;
		  /* 82214200h */ case   20:  		/* lwz R3, <#[R31 + 4]> */
		/* 82214200h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82214200h case   20:*/		return 0x82214204;
		  /* 82214204h */ case   21:  		/* rlwimi R3, R6, 0, 16, 9 */
		/* 82214204h case   21:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R6);
		/* 82214204h case   21:*/		return 0x82214208;
		  /* 82214208h */ case   22:  		/* stw R3, <#[R11]> */
		/* 82214208h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214208h case   22:*/		return 0x8221420C;
		  /* 8221420Ch */ case   23:  		/* rlwinm R6, R3, 0, 0, 31 */
		/* 8221420Ch case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R3);
		/* 8221420Ch case   23:*/		return 0x82214210;
		  /* 82214210h */ case   24:  		/* lwz R3, <#[R31 + 4]> */
		/* 82214210h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82214210h case   24:*/		return 0x82214214;
		  /* 82214214h */ case   25:  		/* rlwimi R3, R6, 0, 9, 7 */
		/* 82214214h case   25:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R3,regs.R6);
		/* 82214214h case   25:*/		return 0x82214218;
		  /* 82214218h */ case   26:  		/* oris R6, R3, 64 */
		/* 82214218h case   26:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R3,0x40);
		/* 82214218h case   26:*/		return 0x8221421C;
		  /* 8221421Ch */ case   27:  		/* stw R6, <#[R11]> */
		/* 8221421Ch case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221421Ch case   27:*/		return 0x82214220;
		  /* 82214220h */ case   28:  		/* stwu R4, <#[R11 + 4]> */
		/* 82214220h case   28:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214220h case   28:*/		return 0x82214224;
		  /* 82214224h */ case   29:  		/* addi R11, R11, 4 */
		/* 82214224h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214224h case   29:*/		return 0x82214228;
		  /* 82214228h */ case   30:  		/* lwz R6, <#[R31 + 4]> */
		/* 82214228h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82214228h case   30:*/		return 0x8221422C;
		  /* 8221422Ch */ case   31:  		/* rlwinm. R6, R6, 0, 8, 8 */
		/* 8221422Ch case   31:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R6,regs.R6);
		/* 8221422Ch case   31:*/		return 0x82214230;
		  /* 82214230h */ case   32:  		/* bc 12, CR0_EQ, 16 */
		/* 82214230h case   32:*/		if ( regs.CR[0].eq ) { return 0x82214240;  }
		/* 82214230h case   32:*/		return 0x82214234;
		  /* 82214234h */ case   33:  		/* lwz R6, <#[R31 + 12]> */
		/* 82214234h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 82214234h case   33:*/		return 0x82214238;
		  /* 82214238h */ case   34:  		/* stw R6, <#[R11]> */
		/* 82214238h case   34:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82214238h case   34:*/		return 0x8221423C;
		  /* 8221423Ch */ case   35:  		/* addi R11, R11, 4 */
		/* 8221423Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221423Ch case   35:*/		return 0x82214240;
	}
	return 0x82214240;
} // Block from 822141B0h-82214240h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82214240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214240);
		  /* 82214240h */ case    0:  		/* lwz R3, <#[R31 + 4]> */
		/* 82214240h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82214240h case    0:*/		return 0x82214244;
		  /* 82214244h */ case    1:  		/* li R12, -26216 */
		/* 82214244h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 82214244h case    1:*/		return 0x82214248;
		  /* 82214248h */ case    2:  		/* li R6, 9 */
		/* 82214248h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x9);
		/* 82214248h case    2:*/		return 0x8221424C;
		  /* 8221424Ch */ case    3:  		/* sth R3, <#[R11 + 2]> */
		/* 8221424Ch case    3:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 8221424Ch case    3:*/		return 0x82214250;
		  /* 82214250h */ case    4:  		/* lwz R30, <#[R31 + 4]> */
		/* 82214250h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82214250h case    4:*/		return 0x82214254;
		  /* 82214254h */ case    5:  		/* lwz R3, <#[R11]> */
		/* 82214254h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214254h case    5:*/		return 0x82214258;
		  /* 82214258h */ case    6:  		/* rlwimi R30, R3, 0, 16, 9 */
		/* 82214258h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R30,regs.R3);
		/* 82214258h case    6:*/		return 0x8221425C;
		  /* 8221425Ch */ case    7:  		/* stw R30, <#[R11]> */
		/* 8221425Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8221425Ch case    7:*/		return 0x82214260;
		  /* 82214260h */ case    8:  		/* rlwinm R3, R30, 0, 0, 31 */
		/* 82214260h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R30);
		/* 82214260h case    8:*/		return 0x82214264;
		  /* 82214264h */ case    9:  		/* lwz R30, <#[R31 + 4]> */
		/* 82214264h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82214264h case    9:*/		return 0x82214268;
		  /* 82214268h */ case   10:  		/* rlwimi R30, R3, 0, 9, 7 */
		/* 82214268h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R30,regs.R3);
		/* 82214268h case   10:*/		return 0x8221426C;
		  /* 8221426Ch */ case   11:  		/* oris R3, R30, 64 */
		/* 8221426Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R30,0x40);
		/* 8221426Ch case   11:*/		return 0x82214270;
		  /* 82214270h */ case   12:  		/* stw R3, <#[R11]> */
		/* 82214270h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214270h case   12:*/		return 0x82214274;
		  /* 82214274h */ case   13:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82214274h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214274h case   13:*/		return 0x82214278;
		  /* 82214278h */ case   14:  		/* and R3, R3, R12 */
		/* 82214278h case   14:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 82214278h case   14:*/		return 0x8221427C;
		  /* 8221427Ch */ case   15:  		/* ori R3, R3, 4368 */
		/* 8221427Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1110);
		/* 8221427Ch case   15:*/		return 0x82214280;
		  /* 82214280h */ case   16:  		/* li R12, -21846 */
		/* 82214280h case   16:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 82214280h case   16:*/		return 0x82214284;
		  /* 82214284h */ case   17:  		/* stw R3, <#[R11]> */
		/* 82214284h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214284h case   17:*/		return 0x82214288;
		  /* 82214288h */ case   18:  		/* addi R11, R11, 4 */
		/* 82214288h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214288h case   18:*/		return 0x8221428C;
		  /* 8221428Ch */ case   19:  		/* sth R9, <#[R11 + 2]> */
		/* 8221428Ch case   19:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221428Ch case   19:*/		return 0x82214290;
		  /* 82214290h */ case   20:  		/* lwz R3, <#[R11]> */
		/* 82214290h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214290h case   20:*/		return 0x82214294;
		  /* 82214294h */ case   21:  		/* rlwimi R3, R7, 18, 8, 15 */
		/* 82214294h case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R7);
		/* 82214294h case   21:*/		return 0x82214298;
		  /* 82214298h */ case   22:  		/* stw R3, <#[R11]> */
		/* 82214298h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214298h case   22:*/		return 0x8221429C;
		  /* 8221429Ch */ case   23:  		/* lwzu R3, <#[R11 + 4]> */
		/* 8221429Ch case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221429Ch case   23:*/		return 0x822142A0;
		  /* 822142A0h */ case   24:  		/* and R3, R3, R12 */
		/* 822142A0h case   24:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 822142A0h case   24:*/		return 0x822142A4;
		  /* 822142A4h */ case   25:  		/* ori R3, R3, 8738 */
		/* 822142A4h case   25:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x2222);
		/* 822142A4h case   25:*/		return 0x822142A8;
		  /* 822142A8h */ case   26:  		/* li R12, -26216 */
		/* 822142A8h case   26:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 822142A8h case   26:*/		return 0x822142AC;
		  /* 822142ACh */ case   27:  		/* stw R3, <#[R11]> */
		/* 822142ACh case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822142ACh case   27:*/		return 0x822142B0;
		  /* 822142B0h */ case   28:  		/* addi R11, R11, 4 */
		/* 822142B0h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822142B0h case   28:*/		return 0x822142B4;
		  /* 822142B4h */ case   29:  		/* sth R6, <#[R11 + 2]> */
		/* 822142B4h case   29:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822142B4h case   29:*/		return 0x822142B8;
		  /* 822142B8h */ case   30:  		/* lwz R3, <#[R11]> */
		/* 822142B8h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822142B8h case   30:*/		return 0x822142BC;
		  /* 822142BCh */ case   31:  		/* rlwimi R3, R5, 16, 8, 15 */
		/* 822142BCh case   31:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R5);
		/* 822142BCh case   31:*/		return 0x822142C0;
		  /* 822142C0h */ case   32:  		/* stw R3, <#[R11]> */
		/* 822142C0h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822142C0h case   32:*/		return 0x822142C4;
		  /* 822142C4h */ case   33:  		/* stb R10, <#[R11]> */
		/* 822142C4h case   33:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822142C4h case   33:*/		return 0x822142C8;
		  /* 822142C8h */ case   34:  		/* lwzu R3, <#[R11 + 4]> */
		/* 822142C8h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822142C8h case   34:*/		return 0x822142CC;
		  /* 822142CCh */ case   35:  		/* and R3, R3, R12 */
		/* 822142CCh case   35:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R12);
		/* 822142CCh case   35:*/		return 0x822142D0;
		  /* 822142D0h */ case   36:  		/* ori R3, R3, 4368 */
		/* 822142D0h case   36:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1110);
		/* 822142D0h case   36:*/		return 0x822142D4;
		  /* 822142D4h */ case   37:  		/* stw R3, <#[R11]> */
		/* 822142D4h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822142D4h case   37:*/		return 0x822142D8;
		  /* 822142D8h */ case   38:  		/* addi R11, R11, 4 */
		/* 822142D8h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822142D8h case   38:*/		return 0x822142DC;
		  /* 822142DCh */ case   39:  		/* sth R8, <#[R11 + 2]> */
		/* 822142DCh case   39:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822142DCh case   39:*/		return 0x822142E0;
		  /* 822142E0h */ case   40:  		/* lwz R8, <#[R11]> */
		/* 822142E0h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822142E0h case   40:*/		return 0x822142E4;
		  /* 822142E4h */ case   41:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 822142E4h case   41:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 822142E4h case   41:*/		return 0x822142E8;
		  /* 822142E8h */ case   42:  		/* stw R8, <#[R11]> */
		/* 822142E8h case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822142E8h case   42:*/		return 0x822142EC;
		  /* 822142ECh */ case   43:  		/* addi R11, R11, 4 */
		/* 822142ECh case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822142ECh case   43:*/		return 0x822142F0;
		  /* 822142F0h */ case   44:  		/* lwz R8, <#[R31 + 4]> */
		/* 822142F0h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822142F0h case   44:*/		return 0x822142F4;
		  /* 822142F4h */ case   45:  		/* sth R8, <#[R11 + 2]> */
		/* 822142F4h case   45:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822142F4h case   45:*/		return 0x822142F8;
		  /* 822142F8h */ case   46:  		/* lwz R8, <#[R11]> */
		/* 822142F8h case   46:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822142F8h case   46:*/		return 0x822142FC;
		  /* 822142FCh */ case   47:  		/* lwz R3, <#[R31 + 4]> */
		/* 822142FCh case   47:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 822142FCh case   47:*/		return 0x82214300;
		  /* 82214300h */ case   48:  		/* rlwimi R3, R8, 0, 16, 9 */
		/* 82214300h case   48:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R8);
		/* 82214300h case   48:*/		return 0x82214304;
		  /* 82214304h */ case   49:  		/* rlwinm R8, R3, 0, 0, 31 */
		/* 82214304h case   49:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R3);
		/* 82214304h case   49:*/		return 0x82214308;
		  /* 82214308h */ case   50:  		/* stw R3, <#[R11]> */
		/* 82214308h case   50:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214308h case   50:*/		return 0x8221430C;
		  /* 8221430Ch */ case   51:  		/* lwz R3, <#[R31 + 4]> */
		/* 8221430Ch case   51:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8221430Ch case   51:*/		return 0x82214310;
		  /* 82214310h */ case   52:  		/* rlwimi R3, R8, 0, 9, 7 */
		/* 82214310h case   52:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R3,regs.R8);
		/* 82214310h case   52:*/		return 0x82214314;
		  /* 82214314h */ case   53:  		/* oris R8, R3, 64 */
		/* 82214314h case   53:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R3,0x40);
		/* 82214314h case   53:*/		return 0x82214318;
		  /* 82214318h */ case   54:  		/* stw R8, <#[R11]> */
		/* 82214318h case   54:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214318h case   54:*/		return 0x8221431C;
		  /* 8221431Ch */ case   55:  		/* stwu R4, <#[R11 + 4]> */
		/* 8221431Ch case   55:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221431Ch case   55:*/		return 0x82214320;
		  /* 82214320h */ case   56:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214320h case   56:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214320h case   56:*/		return 0x82214324;
		  /* 82214324h */ case   57:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 82214324h case   57:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82214324h case   57:*/		return 0x82214328;
		  /* 82214328h */ case   58:  		/* addi R11, R11, 4 */
		/* 82214328h case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214328h case   58:*/		return 0x8221432C;
		  /* 8221432Ch */ case   59:  		/* bc 12, CR0_EQ, 16 */
		/* 8221432Ch case   59:*/		if ( regs.CR[0].eq ) { return 0x8221433C;  }
		/* 8221432Ch case   59:*/		return 0x82214330;
		  /* 82214330h */ case   60:  		/* lwz R8, <#[R31 + 12]> */
		/* 82214330h case   60:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82214330h case   60:*/		return 0x82214334;
		  /* 82214334h */ case   61:  		/* stw R8, <#[R11]> */
		/* 82214334h case   61:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214334h case   61:*/		return 0x82214338;
		  /* 82214338h */ case   62:  		/* addi R11, R11, 4 */
		/* 82214338h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214338h case   62:*/		return 0x8221433C;
	}
	return 0x8221433C;
} // Block from 82214240h-8221433Ch (63 instructions)

//////////////////////////////////////////////////////
// Block at 8221433Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221433C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221433C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221433C);
		  /* 8221433Ch */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 8221433Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221433Ch case    0:*/		return 0x82214340;
		  /* 82214340h */ case    1:  		/* li R12, -26216 */
		/* 82214340h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 82214340h case    1:*/		return 0x82214344;
		  /* 82214344h */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 82214344h case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82214344h case    2:*/		return 0x82214348;
		  /* 82214348h */ case    3:  		/* lwz R8, <#[R11]> */
		/* 82214348h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214348h case    3:*/		return 0x8221434C;
		  /* 8221434Ch */ case    4:  		/* lwz R3, <#[R31 + 4]> */
		/* 8221434Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8221434Ch case    4:*/		return 0x82214350;
		  /* 82214350h */ case    5:  		/* rlwimi R3, R8, 0, 16, 9 */
		/* 82214350h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R3,regs.R8);
		/* 82214350h case    5:*/		return 0x82214354;
		  /* 82214354h */ case    6:  		/* stw R3, <#[R11]> */
		/* 82214354h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82214354h case    6:*/		return 0x82214358;
		  /* 82214358h */ case    7:  		/* rlwinm R8, R3, 0, 0, 31 */
		/* 82214358h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R3);
		/* 82214358h case    7:*/		return 0x8221435C;
		  /* 8221435Ch */ case    8:  		/* lwz R3, <#[R31 + 4]> */
		/* 8221435Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8221435Ch case    8:*/		return 0x82214360;
		  /* 82214360h */ case    9:  		/* rlwimi R3, R8, 0, 9, 7 */
		/* 82214360h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R3,regs.R8);
		/* 82214360h case    9:*/		return 0x82214364;
		  /* 82214364h */ case   10:  		/* oris R8, R3, 64 */
		/* 82214364h case   10:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R3,0x40);
		/* 82214364h case   10:*/		return 0x82214368;
		  /* 82214368h */ case   11:  		/* stw R8, <#[R11]> */
		/* 82214368h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214368h case   11:*/		return 0x8221436C;
		  /* 8221436Ch */ case   12:  		/* lwzu R8, <#[R11 + 4]> */
		/* 8221436Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221436Ch case   12:*/		return 0x82214370;
		  /* 82214370h */ case   13:  		/* and R8, R8, R12 */
		/* 82214370h case   13:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 82214370h case   13:*/		return 0x82214374;
		  /* 82214374h */ case   14:  		/* ori R8, R8, 4368 */
		/* 82214374h case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1110);
		/* 82214374h case   14:*/		return 0x82214378;
		  /* 82214378h */ case   15:  		/* li R12, -21846 */
		/* 82214378h case   15:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 82214378h case   15:*/		return 0x8221437C;
		  /* 8221437Ch */ case   16:  		/* stw R8, <#[R11]> */
		/* 8221437Ch case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221437Ch case   16:*/		return 0x82214380;
		  /* 82214380h */ case   17:  		/* addi R11, R11, 4 */
		/* 82214380h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214380h case   17:*/		return 0x82214384;
		  /* 82214384h */ case   18:  		/* sth R9, <#[R11 + 2]> */
		/* 82214384h case   18:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214384h case   18:*/		return 0x82214388;
		  /* 82214388h */ case   19:  		/* lwz R9, <#[R11]> */
		/* 82214388h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214388h case   19:*/		return 0x8221438C;
		  /* 8221438Ch */ case   20:  		/* rlwimi R9, R7, 18, 8, 15 */
		/* 8221438Ch case   20:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R7);
		/* 8221438Ch case   20:*/		return 0x82214390;
		  /* 82214390h */ case   21:  		/* stw R9, <#[R11]> */
		/* 82214390h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214390h case   21:*/		return 0x82214394;
		  /* 82214394h */ case   22:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82214394h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214394h case   22:*/		return 0x82214398;
		  /* 82214398h */ case   23:  		/* and R9, R9, R12 */
		/* 82214398h case   23:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82214398h case   23:*/		return 0x8221439C;
		  /* 8221439Ch */ case   24:  		/* ori R9, R9, 8738 */
		/* 8221439Ch case   24:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2222);
		/* 8221439Ch case   24:*/		return 0x822143A0;
		  /* 822143A0h */ case   25:  		/* li R12, -21845 */
		/* 822143A0h case   25:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAB);
		/* 822143A0h case   25:*/		return 0x822143A4;
		  /* 822143A4h */ case   26:  		/* stw R9, <#[R11]> */
		/* 822143A4h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143A4h case   26:*/		return 0x822143A8;
		  /* 822143A8h */ case   27:  		/* addi R11, R11, 4 */
		/* 822143A8h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822143A8h case   27:*/		return 0x822143AC;
		  /* 822143ACh */ case   28:  		/* sth R6, <#[R11 + 2]> */
		/* 822143ACh case   28:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822143ACh case   28:*/		return 0x822143B0;
		  /* 822143B0h */ case   29:  		/* lwz R9, <#[R11]> */
		/* 822143B0h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143B0h case   29:*/		return 0x822143B4;
		  /* 822143B4h */ case   30:  		/* rlwimi R9, R5, 16, 8, 15 */
		/* 822143B4h case   30:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R9,regs.R5);
		/* 822143B4h case   30:*/		return 0x822143B8;
		  /* 822143B8h */ case   31:  		/* stw R9, <#[R11]> */
		/* 822143B8h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143B8h case   31:*/		return 0x822143BC;
		  /* 822143BCh */ case   32:  		/* stb R10, <#[R11]> */
		/* 822143BCh case   32:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822143BCh case   32:*/		return 0x822143C0;
		  /* 822143C0h */ case   33:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822143C0h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822143C0h case   33:*/		return 0x822143C4;
		  /* 822143C4h */ case   34:  		/* and R9, R9, R12 */
		/* 822143C4h case   34:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 822143C4h case   34:*/		return 0x822143C8;
		  /* 822143C8h */ case   35:  		/* ori R9, R9, 8739 */
		/* 822143C8h case   35:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2223);
		/* 822143C8h case   35:*/		return 0x822143CC;
		  /* 822143CCh */ case   36:  		/* stw R9, <#[R11]> */
		/* 822143CCh case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143CCh case   36:*/		return 0x822143D0;
		  /* 822143D0h */ case   37:  		/* addi R11, R11, 4 */
		/* 822143D0h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822143D0h case   37:*/		return 0x822143D4;
		  /* 822143D4h */ case   38:  		/* sth R29, <#[R11 + 2]> */
		/* 822143D4h case   38:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 822143D4h case   38:*/		return 0x822143D8;
		  /* 822143D8h */ case   39:  		/* lwz R9, <#[R11]> */
		/* 822143D8h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143D8h case   39:*/		return 0x822143DC;
		  /* 822143DCh */ case   40:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 822143DCh case   40:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 822143DCh case   40:*/		return 0x822143E0;
	}
	return 0x822143E0;
} // Block from 8221433Ch-822143E0h (41 instructions)

//////////////////////////////////////////////////////
// Block at 822143E0h
// Function '?DoSet@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822143E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822143E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822143E0);
		  /* 822143E0h */ case    0:  		/* stw R9, <#[R11]> */
		/* 822143E0h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143E0h case    0:*/		return 0x822143E4;
		  /* 822143E4h */ case    1:  		/* addi R11, R11, 4 */
		/* 822143E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822143E4h case    1:*/		return 0x822143E8;
		  /* 822143E8h */ case    2:  		/* lwz R9, <#[R31 + 4]> */
		/* 822143E8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 822143E8h case    2:*/		return 0x822143EC;
		  /* 822143ECh */ case    3:  		/* sth R9, <#[R11 + 2]> */
		/* 822143ECh case    3:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822143ECh case    3:*/		return 0x822143F0;
		  /* 822143F0h */ case    4:  		/* lwz R9, <#[R11]> */
		/* 822143F0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822143F0h case    4:*/		return 0x822143F4;
		  /* 822143F4h */ case    5:  		/* lwz R8, <#[R31 + 4]> */
		/* 822143F4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822143F4h case    5:*/		return 0x822143F8;
		  /* 822143F8h */ case    6:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 822143F8h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 822143F8h case    6:*/		return 0x822143FC;
		  /* 822143FCh */ case    7:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822143FCh case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822143FCh case    7:*/		return 0x82214400;
		  /* 82214400h */ case    8:  		/* stw R8, <#[R11]> */
		/* 82214400h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214400h case    8:*/		return 0x82214404;
		  /* 82214404h */ case    9:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214404h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214404h case    9:*/		return 0x82214408;
		  /* 82214408h */ case   10:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82214408h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82214408h case   10:*/		return 0x8221440C;
		  /* 8221440Ch */ case   11:  		/* oris R9, R8, 64 */
		/* 8221440Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 8221440Ch case   11:*/		return 0x82214410;
		  /* 82214410h */ case   12:  		/* stw R9, <#[R11]> */
		/* 82214410h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214410h case   12:*/		return 0x82214414;
		  /* 82214414h */ case   13:  		/* stwu R10, <#[R11 + 4]> */
		/* 82214414h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214414h case   13:*/		return 0x82214418;
		  /* 82214418h */ case   14:  		/* addi R11, R11, 4 */
		/* 82214418h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214418h case   14:*/		return 0x8221441C;
		  /* 8221441Ch */ case   15:  		/* lwz R9, <#[R31 + 4]> */
		/* 8221441Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8221441Ch case   15:*/		return 0x82214420;
		  /* 82214420h */ case   16:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214420h case   16:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214420h case   16:*/		return 0x82214424;
		  /* 82214424h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82214424h case   17:*/		if ( regs.CR[0].eq ) { return 0x82214434;  }
		/* 82214424h case   17:*/		return 0x82214428;
		  /* 82214428h */ case   18:  		/* lwz R9, <#[R31 + 12]> */
		/* 82214428h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 82214428h case   18:*/		return 0x8221442C;
		  /* 8221442Ch */ case   19:  		/* stw R9, <#[R11]> */
		/* 8221442Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221442Ch case   19:*/		return 0x82214430;
		  /* 82214430h */ case   20:  		/* addi R11, R11, 4 */
		/* 82214430h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214430h case   20:*/		return 0x82214434;
	}
	return 0x82214434;
} // Block from 822143E0h-82214434h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82214434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214434);
		  /* 82214434h */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214434h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214434h case    0:*/		return 0x82214438;
		  /* 82214438h */ case    1:  		/* li R12, -30584 */
		/* 82214438h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82214438h case    1:*/		return 0x8221443C;
		  /* 8221443Ch */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 8221443Ch case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221443Ch case    2:*/		return 0x82214440;
		  /* 82214440h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82214440h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214440h case    3:*/		return 0x82214444;
		  /* 82214444h */ case    4:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214444h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214444h case    4:*/		return 0x82214448;
		  /* 82214448h */ case    5:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82214448h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82214448h case    5:*/		return 0x8221444C;
		  /* 8221444Ch */ case    6:  		/* stw R8, <#[R11]> */
		/* 8221444Ch case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221444Ch case    6:*/		return 0x82214450;
		  /* 82214450h */ case    7:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82214450h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82214450h case    7:*/		return 0x82214454;
		  /* 82214454h */ case    8:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214454h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214454h case    8:*/		return 0x82214458;
		  /* 82214458h */ case    9:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82214458h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82214458h case    9:*/		return 0x8221445C;
		  /* 8221445Ch */ case   10:  		/* oris R9, R8, 64 */
		/* 8221445Ch case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 8221445Ch case   10:*/		return 0x82214460;
		  /* 82214460h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82214460h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214460h case   11:*/		return 0x82214464;
		  /* 82214464h */ case   12:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82214464h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214464h case   12:*/		return 0x82214468;
		  /* 82214468h */ case   13:  		/* and R9, R9, R12 */
		/* 82214468h case   13:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82214468h case   13:*/		return 0x8221446C;
		  /* 8221446Ch */ case   14:  		/* stw R9, <#[R11]> */
		/* 8221446Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221446Ch case   14:*/		return 0x82214470;
		  /* 82214470h */ case   15:  		/* addi R11, R11, 4 */
		/* 82214470h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214470h case   15:*/		return 0x82214474;
		  /* 82214474h */ case   16:  		/* lwz R9, <#[R31 + 16]> */
		/* 82214474h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82214474h case   16:*/		return 0x82214478;
		  /* 82214478h */ case   17:  		/* sth R9, <#[R11 + 2]> */
		/* 82214478h case   17:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214478h case   17:*/		return 0x8221447C;
		  /* 8221447Ch */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8221447Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221447Ch case   18:*/		return 0x82214480;
		  /* 82214480h */ case   19:  		/* lwz R8, <#[R31 + 16]> */
		/* 82214480h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82214480h case   19:*/		return 0x82214484;
		  /* 82214484h */ case   20:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82214484h case   20:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82214484h case   20:*/		return 0x82214488;
		  /* 82214488h */ case   21:  		/* stw R8, <#[R11]> */
		/* 82214488h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214488h case   21:*/		return 0x8221448C;
		  /* 8221448Ch */ case   22:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 8221448Ch case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 8221448Ch case   22:*/		return 0x82214490;
		  /* 82214490h */ case   23:  		/* lwz R8, <#[R31 + 16]> */
		/* 82214490h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 82214490h case   23:*/		return 0x82214494;
		  /* 82214494h */ case   24:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82214494h case   24:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82214494h case   24:*/		return 0x82214498;
		  /* 82214498h */ case   25:  		/* oris R9, R8, 64 */
		/* 82214498h case   25:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82214498h case   25:*/		return 0x8221449C;
		  /* 8221449Ch */ case   26:  		/* stw R9, <#[R11]> */
		/* 8221449Ch case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221449Ch case   26:*/		return 0x822144A0;
		  /* 822144A0h */ case   27:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822144A0h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822144A0h case   27:*/		return 0x822144A4;
		  /* 822144A4h */ case   28:  		/* lwz R9, <#[R31 + 28]> */
		/* 822144A4h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144A4h case   28:*/		return 0x822144A8;
		  /* 822144A8h */ case   29:  		/* rlwimi R8, R9, 20, 29, 31 */
		/* 822144A8h case   29:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R8,regs.R9);
		/* 822144A8h case   29:*/		return 0x822144AC;
		  /* 822144ACh */ case   30:  		/* stw R8, <#[R11]> */
		/* 822144ACh case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822144ACh case   30:*/		return 0x822144B0;
		  /* 822144B0h */ case   31:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822144B0h case   31:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822144B0h case   31:*/		return 0x822144B4;
		  /* 822144B4h */ case   32:  		/* lwz R8, <#[R31 + 28]> */
		/* 822144B4h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144B4h case   32:*/		return 0x822144B8;
		  /* 822144B8h */ case   33:  		/* rlwimi R9, R8, 24, 25, 27 */
		/* 822144B8h case   33:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R9,regs.R8);
		/* 822144B8h case   33:*/		return 0x822144BC;
		  /* 822144BCh */ case   34:  		/* stw R9, <#[R11]> */
		/* 822144BCh case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822144BCh case   34:*/		return 0x822144C0;
		  /* 822144C0h */ case   35:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822144C0h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822144C0h case   35:*/		return 0x822144C4;
		  /* 822144C4h */ case   36:  		/* lwz R8, <#[R31 + 28]> */
		/* 822144C4h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144C4h case   36:*/		return 0x822144C8;
		  /* 822144C8h */ case   37:  		/* rlwimi R9, R8, 28, 21, 23 */
		/* 822144C8h case   37:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R9,regs.R8);
		/* 822144C8h case   37:*/		return 0x822144CC;
		  /* 822144CCh */ case   38:  		/* stw R9, <#[R11]> */
		/* 822144CCh case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822144CCh case   38:*/		return 0x822144D0;
		  /* 822144D0h */ case   39:  		/* lwz R8, <#[R11]> */
		/* 822144D0h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822144D0h case   39:*/		return 0x822144D4;
		  /* 822144D4h */ case   40:  		/* lwz R9, <#[R31 + 28]> */
		/* 822144D4h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144D4h case   40:*/		return 0x822144D8;
		  /* 822144D8h */ case   41:  		/* rlwimi R9, R8, 0, 20, 16 */
		/* 822144D8h case   41:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R8);
		/* 822144D8h case   41:*/		return 0x822144DC;
		  /* 822144DCh */ case   42:  		/* stw R9, <#[R11]> */
		/* 822144DCh case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822144DCh case   42:*/		return 0x822144E0;
		  /* 822144E0h */ case   43:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822144E0h case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822144E0h case   43:*/		return 0x822144E4;
		  /* 822144E4h */ case   44:  		/* lwz R8, <#[R31 + 28]> */
		/* 822144E4h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144E4h case   44:*/		return 0x822144E8;
		  /* 822144E8h */ case   45:  		/* rlwimi R9, R8, 0, 28, 28 */
		/* 822144E8h case   45:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R9,regs.R8);
		/* 822144E8h case   45:*/		return 0x822144EC;
		  /* 822144ECh */ case   46:  		/* stw R9, <#[R11]> */
		/* 822144ECh case   46:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822144ECh case   46:*/		return 0x822144F0;
		  /* 822144F0h */ case   47:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822144F0h case   47:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822144F0h case   47:*/		return 0x822144F4;
		  /* 822144F4h */ case   48:  		/* lwz R8, <#[R31 + 28]> */
		/* 822144F4h case   48:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 822144F4h case   48:*/		return 0x822144F8;
		  /* 822144F8h */ case   49:  		/* rlwimi R9, R8, 0, 24, 24 */
		/* 822144F8h case   49:*/		cpu::op::rlwimi<0,0,24,24>(regs,&regs.R9,regs.R8);
		/* 822144F8h case   49:*/		return 0x822144FC;
		  /* 822144FCh */ case   50:  		/* stw R9, <#[R11]> */
		/* 822144FCh case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822144FCh case   50:*/		return 0x82214500;
		  /* 82214500h */ case   51:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82214500h case   51:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82214500h case   51:*/		return 0x82214504;
		  /* 82214504h */ case   52:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214504h case   52:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214504h case   52:*/		return 0x82214508;
		  /* 82214508h */ case   53:  		/* rlwimi R9, R8, 0, 20, 20 */
		/* 82214508h case   53:*/		cpu::op::rlwimi<0,0,20,20>(regs,&regs.R9,regs.R8);
		/* 82214508h case   53:*/		return 0x8221450C;
		  /* 8221450Ch */ case   54:  		/* stw R9, <#[R11]> */
		/* 8221450Ch case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221450Ch case   54:*/		return 0x82214510;
		  /* 82214510h */ case   55:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82214510h case   55:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82214510h case   55:*/		return 0x82214514;
		  /* 82214514h */ case   56:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214514h case   56:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214514h case   56:*/		return 0x82214518;
		  /* 82214518h */ case   57:  		/* rlwimi R9, R8, 0, 16, 16 */
		/* 82214518h case   57:*/		cpu::op::rlwimi<0,0,16,16>(regs,&regs.R9,regs.R8);
		/* 82214518h case   57:*/		return 0x8221451C;
		  /* 8221451Ch */ case   58:  		/* stw R9, <#[R11]> */
		/* 8221451Ch case   58:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221451Ch case   58:*/		return 0x82214520;
		  /* 82214520h */ case   59:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82214520h case   59:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82214520h case   59:*/		return 0x82214524;
		  /* 82214524h */ case   60:  		/* lwz R8, <#[R31 + 28]> */
		/* 82214524h case   60:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82214524h case   60:*/		return 0x82214528;
		  /* 82214528h */ case   61:  		/* rlwimi R9, R8, 0, 11, 11 */
		/* 82214528h case   61:*/		cpu::op::rlwimi<0,0,11,11>(regs,&regs.R9,regs.R8);
		/* 82214528h case   61:*/		return 0x8221452C;
		  /* 8221452Ch */ case   62:  		/* stw R9, <#[R11]> */
		/* 8221452Ch case   62:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221452Ch case   62:*/		return 0x82214530;
		  /* 82214530h */ case   63:  		/* addi R11, R11, 4 */
		/* 82214530h case   63:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214530h case   63:*/		return 0x82214534;
		  /* 82214534h */ case   64:  		/* lwz R9, <#[R31 + 16]> */
		/* 82214534h case   64:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82214534h case   64:*/		return 0x82214538;
		  /* 82214538h */ case   65:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214538h case   65:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214538h case   65:*/		return 0x8221453C;
		  /* 8221453Ch */ case   66:  		/* bc 12, CR0_EQ, 16 */
		/* 8221453Ch case   66:*/		if ( regs.CR[0].eq ) { return 0x8221454C;  }
		/* 8221453Ch case   66:*/		return 0x82214540;
		  /* 82214540h */ case   67:  		/* lwz R9, <#[R31 + 40]> */
		/* 82214540h case   67:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 82214540h case   67:*/		return 0x82214544;
		  /* 82214544h */ case   68:  		/* stw R9, <#[R11]> */
		/* 82214544h case   68:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214544h case   68:*/		return 0x82214548;
		  /* 82214548h */ case   69:  		/* addi R11, R11, 4 */
		/* 82214548h case   69:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214548h case   69:*/		return 0x8221454C;
	}
	return 0x8221454C;
} // Block from 82214434h-8221454Ch (70 instructions)

//////////////////////////////////////////////////////
// Block at 8221454Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221454C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221454C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221454C);
		  /* 8221454Ch */ case    0:  		/* sth R29, <#[R11 + 2]> */
		/* 8221454Ch case    0:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 8221454Ch case    0:*/		return 0x82214550;
		  /* 82214550h */ case    1:  		/* lwz R9, <#[R11]> */
		/* 82214550h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214550h case    1:*/		return 0x82214554;
		  /* 82214554h */ case    2:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82214554h case    2:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82214554h case    2:*/		return 0x82214558;
		  /* 82214558h */ case    3:  		/* stw R9, <#[R11]> */
		/* 82214558h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214558h case    3:*/		return 0x8221455C;
		  /* 8221455Ch */ case    4:  		/* addi R11, R11, 4 */
		/* 8221455Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221455Ch case    4:*/		return 0x82214560;
		  /* 82214560h */ case    5:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214560h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214560h case    5:*/		return 0x82214564;
		  /* 82214564h */ case    6:  		/* sth R9, <#[R11 + 2]> */
		/* 82214564h case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214564h case    6:*/		return 0x82214568;
		  /* 82214568h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82214568h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214568h case    7:*/		return 0x8221456C;
		  /* 8221456Ch */ case    8:  		/* lwz R8, <#[R31 + 4]> */
		/* 8221456Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221456Ch case    8:*/		return 0x82214570;
		  /* 82214570h */ case    9:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82214570h case    9:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82214570h case    9:*/		return 0x82214574;
		  /* 82214574h */ case   10:  		/* stw R8, <#[R11]> */
		/* 82214574h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214574h case   10:*/		return 0x82214578;
		  /* 82214578h */ case   11:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82214578h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82214578h case   11:*/		return 0x8221457C;
		  /* 8221457Ch */ case   12:  		/* lwz R8, <#[R31 + 4]> */
		/* 8221457Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221457Ch case   12:*/		return 0x82214580;
		  /* 82214580h */ case   13:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82214580h case   13:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82214580h case   13:*/		return 0x82214584;
		  /* 82214584h */ case   14:  		/* oris R9, R8, 64 */
		/* 82214584h case   14:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82214584h case   14:*/		return 0x82214588;
		  /* 82214588h */ case   15:  		/* stw R9, <#[R11]> */
		/* 82214588h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214588h case   15:*/		return 0x8221458C;
		  /* 8221458Ch */ case   16:  		/* stwu R4, <#[R11 + 4]> */
		/* 8221458Ch case   16:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221458Ch case   16:*/		return 0x82214590;
		  /* 82214590h */ case   17:  		/* addi R11, R11, 4 */
		/* 82214590h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214590h case   17:*/		return 0x82214594;
		  /* 82214594h */ case   18:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214594h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214594h case   18:*/		return 0x82214598;
		  /* 82214598h */ case   19:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214598h case   19:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214598h case   19:*/		return 0x8221459C;
		  /* 8221459Ch */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 8221459Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x822145AC;  }
		/* 8221459Ch case   20:*/		return 0x822145A0;
		  /* 822145A0h */ case   21:  		/* lwz R9, <#[R31 + 12]> */
		/* 822145A0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 822145A0h case   21:*/		return 0x822145A4;
		  /* 822145A4h */ case   22:  		/* stw R9, <#[R11]> */
		/* 822145A4h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822145A4h case   22:*/		return 0x822145A8;
		  /* 822145A8h */ case   23:  		/* addi R11, R11, 4 */
		/* 822145A8h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822145A8h case   23:*/		return 0x822145AC;
	}
	return 0x822145AC;
} // Block from 8221454Ch-822145ACh (24 instructions)

//////////////////////////////////////////////////////
// Block at 822145ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822145AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822145AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822145AC);
		  /* 822145ACh */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 822145ACh case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822145ACh case    0:*/		return 0x822145B0;
		  /* 822145B0h */ case    1:  		/* li R12, -26216 */
		/* 822145B0h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 822145B0h case    1:*/		return 0x822145B4;
		  /* 822145B4h */ case    2:  		/* li R9, 3 */
		/* 822145B4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 822145B4h case    2:*/		return 0x822145B8;
		  /* 822145B8h */ case    3:  		/* sth R8, <#[R11 + 2]> */
		/* 822145B8h case    3:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822145B8h case    3:*/		return 0x822145BC;
		  /* 822145BCh */ case    4:  		/* lwz R8, <#[R11]> */
		/* 822145BCh case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822145BCh case    4:*/		return 0x822145C0;
		  /* 822145C0h */ case    5:  		/* lwz R7, <#[R31 + 4]> */
		/* 822145C0h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822145C0h case    5:*/		return 0x822145C4;
		  /* 822145C4h */ case    6:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822145C4h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822145C4h case    6:*/		return 0x822145C8;
		  /* 822145C8h */ case    7:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822145C8h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822145C8h case    7:*/		return 0x822145CC;
		  /* 822145CCh */ case    8:  		/* stw R7, <#[R11]> */
		/* 822145CCh case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822145CCh case    8:*/		return 0x822145D0;
		  /* 822145D0h */ case    9:  		/* lwz R7, <#[R31 + 4]> */
		/* 822145D0h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822145D0h case    9:*/		return 0x822145D4;
		  /* 822145D4h */ case   10:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 822145D4h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 822145D4h case   10:*/		return 0x822145D8;
		  /* 822145D8h */ case   11:  		/* oris R8, R7, 64 */
		/* 822145D8h case   11:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 822145D8h case   11:*/		return 0x822145DC;
		  /* 822145DCh */ case   12:  		/* stw R8, <#[R11]> */
		/* 822145DCh case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822145DCh case   12:*/		return 0x822145E0;
		  /* 822145E0h */ case   13:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822145E0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822145E0h case   13:*/		return 0x822145E4;
		  /* 822145E4h */ case   14:  		/* and R8, R8, R12 */
		/* 822145E4h case   14:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 822145E4h case   14:*/		return 0x822145E8;
		  /* 822145E8h */ case   15:  		/* ori R8, R8, 4368 */
		/* 822145E8h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1110);
		/* 822145E8h case   15:*/		return 0x822145EC;
		  /* 822145ECh */ case   16:  		/* li R12, -30584 */
		/* 822145ECh case   16:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822145ECh case   16:*/		return 0x822145F0;
		  /* 822145F0h */ case   17:  		/* stw R8, <#[R11]> */
		/* 822145F0h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822145F0h case   17:*/		return 0x822145F4;
		  /* 822145F4h */ case   18:  		/* addi R11, R11, 4 */
		/* 822145F4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822145F4h case   18:*/		return 0x822145F8;
		  /* 822145F8h */ case   19:  		/* lwz R8, <#[R31 + 4]> */
		/* 822145F8h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822145F8h case   19:*/		return 0x822145FC;
		  /* 822145FCh */ case   20:  		/* sth R8, <#[R11 + 2]> */
		/* 822145FCh case   20:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822145FCh case   20:*/		return 0x82214600;
		  /* 82214600h */ case   21:  		/* lwz R8, <#[R11]> */
		/* 82214600h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214600h case   21:*/		return 0x82214604;
		  /* 82214604h */ case   22:  		/* lwz R7, <#[R31 + 4]> */
		/* 82214604h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82214604h case   22:*/		return 0x82214608;
		  /* 82214608h */ case   23:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 82214608h case   23:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 82214608h case   23:*/		return 0x8221460C;
		  /* 8221460Ch */ case   24:  		/* stw R7, <#[R11]> */
		/* 8221460Ch case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221460Ch case   24:*/		return 0x82214610;
		  /* 82214610h */ case   25:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82214610h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82214610h case   25:*/		return 0x82214614;
		  /* 82214614h */ case   26:  		/* lwz R7, <#[R31 + 4]> */
		/* 82214614h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82214614h case   26:*/		return 0x82214618;
		  /* 82214618h */ case   27:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 82214618h case   27:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 82214618h case   27:*/		return 0x8221461C;
		  /* 8221461Ch */ case   28:  		/* oris R8, R7, 64 */
		/* 8221461Ch case   28:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 8221461Ch case   28:*/		return 0x82214620;
		  /* 82214620h */ case   29:  		/* stw R8, <#[R11]> */
		/* 82214620h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214620h case   29:*/		return 0x82214624;
		  /* 82214624h */ case   30:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82214624h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214624h case   30:*/		return 0x82214628;
		  /* 82214628h */ case   31:  		/* and R8, R8, R12 */
		/* 82214628h case   31:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 82214628h case   31:*/		return 0x8221462C;
		  /* 8221462Ch */ case   32:  		/* stw R8, <#[R11]> */
		/* 8221462Ch case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221462Ch case   32:*/		return 0x82214630;
	}
	return 0x82214630;
} // Block from 822145ACh-82214630h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82214630h
// Function '?DoSgn@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214630);
		  /* 82214630h */ case    0:  		/* addi R11, R11, 4 */
		/* 82214630h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214630h case    0:*/		return 0x82214634;
		  /* 82214634h */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 82214634h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214634h case    1:*/		return 0x82214638;
		  /* 82214638h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 82214638h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214638h case    2:*/		return 0x8221463C;
		  /* 8221463Ch */ case    3:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 8221463Ch case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 8221463Ch case    3:*/		return 0x82214640;
		  /* 82214640h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82214640h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214640h case    4:*/		return 0x82214644;
		  /* 82214644h */ case    5:  		/* addi R11, R11, 4 */
		/* 82214644h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214644h case    5:*/		return 0x82214648;
		  /* 82214648h */ case    6:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214648h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214648h case    6:*/		return 0x8221464C;
		  /* 8221464Ch */ case    7:  		/* sth R8, <#[R11 + 2]> */
		/* 8221464Ch case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 8221464Ch case    7:*/		return 0x82214650;
		  /* 82214650h */ case    8:  		/* lwz R8, <#[R11]> */
		/* 82214650h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214650h case    8:*/		return 0x82214654;
		  /* 82214654h */ case    9:  		/* lwz R7, <#[R31 + 4]> */
		/* 82214654h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82214654h case    9:*/		return 0x82214658;
		  /* 82214658h */ case   10:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 82214658h case   10:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 82214658h case   10:*/		return 0x8221465C;
		  /* 8221465Ch */ case   11:  		/* stw R7, <#[R11]> */
		/* 8221465Ch case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221465Ch case   11:*/		return 0x82214660;
		  /* 82214660h */ case   12:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82214660h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82214660h case   12:*/		return 0x82214664;
		  /* 82214664h */ case   13:  		/* lwz R7, <#[R31 + 4]> */
		/* 82214664h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82214664h case   13:*/		return 0x82214668;
		  /* 82214668h */ case   14:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 82214668h case   14:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 82214668h case   14:*/		return 0x8221466C;
		  /* 8221466Ch */ case   15:  		/* oris R8, R7, 64 */
		/* 8221466Ch case   15:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 8221466Ch case   15:*/		return 0x82214670;
		  /* 82214670h */ case   16:  		/* stw R8, <#[R11]> */
		/* 82214670h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214670h case   16:*/		return 0x82214674;
		  /* 82214674h */ case   17:  		/* stwu R4, <#[R11 + 4]> */
		/* 82214674h case   17:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214674h case   17:*/		return 0x82214678;
		  /* 82214678h */ case   18:  		/* addi R11, R11, 4 */
		/* 82214678h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214678h case   18:*/		return 0x8221467C;
		  /* 8221467Ch */ case   19:  		/* lwz R8, <#[R31 + 4]> */
		/* 8221467Ch case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221467Ch case   19:*/		return 0x82214680;
		  /* 82214680h */ case   20:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 82214680h case   20:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82214680h case   20:*/		return 0x82214684;
		  /* 82214684h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 82214684h case   21:*/		if ( regs.CR[0].eq ) { return 0x82214694;  }
		/* 82214684h case   21:*/		return 0x82214688;
		  /* 82214688h */ case   22:  		/* lwz R8, <#[R31 + 12]> */
		/* 82214688h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82214688h case   22:*/		return 0x8221468C;
		  /* 8221468Ch */ case   23:  		/* stw R8, <#[R11]> */
		/* 8221468Ch case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221468Ch case   23:*/		return 0x82214690;
		  /* 82214690h */ case   24:  		/* addi R11, R11, 4 */
		/* 82214690h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214690h case   24:*/		return 0x82214694;
	}
	return 0x82214694;
} // Block from 82214630h-82214694h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82214694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214694);
		  /* 82214694h */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214694h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214694h case    0:*/		return 0x82214698;
		  /* 82214698h */ case    1:  		/* li R12, -26216 */
		/* 82214698h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9998);
		/* 82214698h case    1:*/		return 0x8221469C;
		  /* 8221469Ch */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 8221469Ch case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 8221469Ch case    2:*/		return 0x822146A0;
		  /* 822146A0h */ case    3:  		/* lwz R8, <#[R11]> */
		/* 822146A0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822146A0h case    3:*/		return 0x822146A4;
		  /* 822146A4h */ case    4:  		/* lwz R7, <#[R31 + 4]> */
		/* 822146A4h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822146A4h case    4:*/		return 0x822146A8;
		  /* 822146A8h */ case    5:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822146A8h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822146A8h case    5:*/		return 0x822146AC;
		  /* 822146ACh */ case    6:  		/* stw R7, <#[R11]> */
		/* 822146ACh case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822146ACh case    6:*/		return 0x822146B0;
		  /* 822146B0h */ case    7:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822146B0h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822146B0h case    7:*/		return 0x822146B4;
		  /* 822146B4h */ case    8:  		/* lwz R7, <#[R31 + 4]> */
		/* 822146B4h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822146B4h case    8:*/		return 0x822146B8;
		  /* 822146B8h */ case    9:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 822146B8h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 822146B8h case    9:*/		return 0x822146BC;
		  /* 822146BCh */ case   10:  		/* oris R8, R7, 64 */
		/* 822146BCh case   10:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 822146BCh case   10:*/		return 0x822146C0;
		  /* 822146C0h */ case   11:  		/* stw R8, <#[R11]> */
		/* 822146C0h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822146C0h case   11:*/		return 0x822146C4;
		  /* 822146C4h */ case   12:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822146C4h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822146C4h case   12:*/		return 0x822146C8;
		  /* 822146C8h */ case   13:  		/* and R8, R8, R12 */
		/* 822146C8h case   13:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 822146C8h case   13:*/		return 0x822146CC;
		  /* 822146CCh */ case   14:  		/* ori R8, R8, 4368 */
		/* 822146CCh case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1110);
		/* 822146CCh case   14:*/		return 0x822146D0;
		  /* 822146D0h */ case   15:  		/* stw R8, <#[R11]> */
		/* 822146D0h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822146D0h case   15:*/		return 0x822146D4;
		  /* 822146D4h */ case   16:  		/* addi R11, R11, 4 */
		/* 822146D4h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822146D4h case   16:*/		return 0x822146D8;
		  /* 822146D8h */ case   17:  		/* lwz R8, <#[R31 + 4]> */
		/* 822146D8h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822146D8h case   17:*/		return 0x822146DC;
		  /* 822146DCh */ case   18:  		/* sth R8, <#[R11 + 2]> */
		/* 822146DCh case   18:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822146DCh case   18:*/		return 0x822146E0;
		  /* 822146E0h */ case   19:  		/* lwz R8, <#[R11]> */
		/* 822146E0h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822146E0h case   19:*/		return 0x822146E4;
		  /* 822146E4h */ case   20:  		/* lwz R7, <#[R31 + 4]> */
		/* 822146E4h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822146E4h case   20:*/		return 0x822146E8;
		  /* 822146E8h */ case   21:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822146E8h case   21:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822146E8h case   21:*/		return 0x822146EC;
		  /* 822146ECh */ case   22:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822146ECh case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822146ECh case   22:*/		return 0x822146F0;
		  /* 822146F0h */ case   23:  		/* stw R7, <#[R11]> */
		/* 822146F0h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822146F0h case   23:*/		return 0x822146F4;
		  /* 822146F4h */ case   24:  		/* lwz R7, <#[R31 + 4]> */
		/* 822146F4h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822146F4h case   24:*/		return 0x822146F8;
		  /* 822146F8h */ case   25:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 822146F8h case   25:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 822146F8h case   25:*/		return 0x822146FC;
		  /* 822146FCh */ case   26:  		/* oris R8, R7, 64 */
		/* 822146FCh case   26:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 822146FCh case   26:*/		return 0x82214700;
		  /* 82214700h */ case   27:  		/* stw R8, <#[R11]> */
		/* 82214700h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214700h case   27:*/		return 0x82214704;
		  /* 82214704h */ case   28:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82214704h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214704h case   28:*/		return 0x82214708;
		  /* 82214708h */ case   29:  		/* and R8, R8, R12 */
		/* 82214708h case   29:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 82214708h case   29:*/		return 0x8221470C;
		  /* 8221470Ch */ case   30:  		/* ori R8, R8, 4368 */
		/* 8221470Ch case   30:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1110);
		/* 8221470Ch case   30:*/		return 0x82214710;
		  /* 82214710h */ case   31:  		/* stw R8, <#[R11]> */
		/* 82214710h case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214710h case   31:*/		return 0x82214714;
		  /* 82214714h */ case   32:  		/* addi R11, R11, 4 */
		/* 82214714h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214714h case   32:*/		return 0x82214718;
		  /* 82214718h */ case   33:  		/* sth R9, <#[R11 + 2]> */
		/* 82214718h case   33:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214718h case   33:*/		return 0x8221471C;
		  /* 8221471Ch */ case   34:  		/* lwz R9, <#[R11]> */
		/* 8221471Ch case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221471Ch case   34:*/		return 0x82214720;
		  /* 82214720h */ case   35:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82214720h case   35:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82214720h case   35:*/		return 0x82214724;
		  /* 82214724h */ case   36:  		/* stw R9, <#[R11]> */
		/* 82214724h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214724h case   36:*/		return 0x82214728;
		  /* 82214728h */ case   37:  		/* addi R11, R11, 4 */
		/* 82214728h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214728h case   37:*/		return 0x8221472C;
		  /* 8221472Ch */ case   38:  		/* lwz R9, <#[R31 + 4]> */
		/* 8221472Ch case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8221472Ch case   38:*/		return 0x82214730;
		  /* 82214730h */ case   39:  		/* sth R9, <#[R11 + 2]> */
		/* 82214730h case   39:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214730h case   39:*/		return 0x82214734;
		  /* 82214734h */ case   40:  		/* lwz R8, <#[R11]> */
		/* 82214734h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214734h case   40:*/		return 0x82214738;
		  /* 82214738h */ case   41:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214738h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214738h case   41:*/		return 0x8221473C;
		  /* 8221473Ch */ case   42:  		/* rlwimi R9, R8, 0, 16, 9 */
		/* 8221473Ch case   42:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R8);
		/* 8221473Ch case   42:*/		return 0x82214740;
		  /* 82214740h */ case   43:  		/* stw R9, <#[R11]> */
		/* 82214740h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214740h case   43:*/		return 0x82214744;
		  /* 82214744h */ case   44:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82214744h case   44:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82214744h case   44:*/		return 0x82214748;
		  /* 82214748h */ case   45:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214748h case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214748h case   45:*/		return 0x8221474C;
		  /* 8221474Ch */ case   46:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 8221474Ch case   46:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 8221474Ch case   46:*/		return 0x82214750;
		  /* 82214750h */ case   47:  		/* oris R9, R8, 64 */
		/* 82214750h case   47:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82214750h case   47:*/		return 0x82214754;
		  /* 82214754h */ case   48:  		/* stw R9, <#[R11]> */
		/* 82214754h case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214754h case   48:*/		return 0x82214758;
		  /* 82214758h */ case   49:  		/* stwu R10, <#[R11 + 4]> */
		/* 82214758h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214758h case   49:*/		return 0x8221475C;
		  /* 8221475Ch */ case   50:  		/* addi R11, R11, 4 */
		/* 8221475Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221475Ch case   50:*/		return 0x82214760;
		  /* 82214760h */ case   51:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214760h case   51:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214760h case   51:*/		return 0x82214764;
		  /* 82214764h */ case   52:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214764h case   52:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214764h case   52:*/		return 0x82214768;
		  /* 82214768h */ case   53:  		/* bc 12, CR0_EQ, 16 */
		/* 82214768h case   53:*/		if ( regs.CR[0].eq ) { return 0x82214778;  }
		/* 82214768h case   53:*/		return 0x8221476C;
		  /* 8221476Ch */ case   54:  		/* lwz R9, <#[R31 + 12]> */
		/* 8221476Ch case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221476Ch case   54:*/		return 0x82214770;
		  /* 82214770h */ case   55:  		/* stw R9, <#[R11]> */
		/* 82214770h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214770h case   55:*/		return 0x82214774;
		  /* 82214774h */ case   56:  		/* addi R11, R11, 4 */
		/* 82214774h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214774h case   56:*/		return 0x82214778;
	}
	return 0x82214778;
} // Block from 82214694h-82214778h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82214778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214778);
		  /* 82214778h */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214778h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214778h case    0:*/		return 0x8221477C;
		  /* 8221477Ch */ case    1:  		/* li R8, 4915 */
		/* 8221477Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1333);
		/* 8221477Ch case    1:*/		return 0x82214780;
		  /* 82214780h */ case    2:  		/* li R12, -21846 */
		/* 82214780h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 82214780h case    2:*/		return 0x82214784;
		  /* 82214784h */ case    3:  		/* sth R9, <#[R11 + 2]> */
		/* 82214784h case    3:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214784h case    3:*/		return 0x82214788;
		  /* 82214788h */ case    4:  		/* lwz R7, <#[R31 + 4]> */
		/* 82214788h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82214788h case    4:*/		return 0x8221478C;
		  /* 8221478Ch */ case    5:  		/* lwz R9, <#[R11]> */
		/* 8221478Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221478Ch case    5:*/		return 0x82214790;
		  /* 82214790h */ case    6:  		/* rlwimi R7, R9, 0, 16, 9 */
		/* 82214790h case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R9);
		/* 82214790h case    6:*/		return 0x82214794;
		  /* 82214794h */ case    7:  		/* stw R7, <#[R11]> */
		/* 82214794h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82214794h case    7:*/		return 0x82214798;
		  /* 82214798h */ case    8:  		/* rlwinm R9, R7, 0, 0, 31 */
		/* 82214798h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R7);
		/* 82214798h case    8:*/		return 0x8221479C;
		  /* 8221479Ch */ case    9:  		/* lwz R7, <#[R31 + 4]> */
		/* 8221479Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 8221479Ch case    9:*/		return 0x822147A0;
		  /* 822147A0h */ case   10:  		/* rlwimi R7, R9, 0, 9, 7 */
		/* 822147A0h case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R9);
		/* 822147A0h case   10:*/		return 0x822147A4;
		  /* 822147A4h */ case   11:  		/* oris R9, R7, 64 */
		/* 822147A4h case   11:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R7,0x40);
		/* 822147A4h case   11:*/		return 0x822147A8;
		  /* 822147A8h */ case   12:  		/* stw R9, <#[R11]> */
		/* 822147A8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822147A8h case   12:*/		return 0x822147AC;
		  /* 822147ACh */ case   13:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822147ACh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822147ACh case   13:*/		return 0x822147B0;
		  /* 822147B0h */ case   14:  		/* rlwimi R9, R8, 3, 16, 31 */
		/* 822147B0h case   14:*/		cpu::op::rlwimi<0,3,16,31>(regs,&regs.R9,regs.R8);
		/* 822147B0h case   14:*/		return 0x822147B4;
		  /* 822147B4h */ case   15:  		/* stw R9, <#[R11]> */
		/* 822147B4h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822147B4h case   15:*/		return 0x822147B8;
		  /* 822147B8h */ case   16:  		/* addi R11, R11, 4 */
		/* 822147B8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822147B8h case   16:*/		return 0x822147BC;
		  /* 822147BCh */ case   17:  		/* sth R6, <#[R11 + 2]> */
		/* 822147BCh case   17:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822147BCh case   17:*/		return 0x822147C0;
		  /* 822147C0h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 822147C0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822147C0h case   18:*/		return 0x822147C4;
		  /* 822147C4h */ case   19:  		/* rlwimi R9, R5, 16, 8, 15 */
		/* 822147C4h case   19:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R9,regs.R5);
		/* 822147C4h case   19:*/		return 0x822147C8;
		  /* 822147C8h */ case   20:  		/* stw R9, <#[R11]> */
		/* 822147C8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822147C8h case   20:*/		return 0x822147CC;
		  /* 822147CCh */ case   21:  		/* stb R10, <#[R11]> */
		/* 822147CCh case   21:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822147CCh case   21:*/		return 0x822147D0;
		  /* 822147D0h */ case   22:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822147D0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822147D0h case   22:*/		return 0x822147D4;
		  /* 822147D4h */ case   23:  		/* and R10, R10, R12 */
		/* 822147D4h case   23:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 822147D4h case   23:*/		return 0x822147D8;
		  /* 822147D8h */ case   24:  		/* ori R10, R10, 8738 */
		/* 822147D8h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2222);
		/* 822147D8h case   24:*/		return 0x822147DC;
		  /* 822147DCh */ case   25:  		/* addi R3, R11, 4 */
		/* 822147DCh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822147DCh case   25:*/		return 0x822147E0;
		  /* 822147E0h */ case   26:  		/* stw R10, <#[R11]> */
		/* 822147E0h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822147E0h case   26:*/		return 0x822147E4;
		  /* 822147E4h */ case   27:  		/* addi R1, R1, 112 */
		/* 822147E4h case   27:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822147E4h case   27:*/		return 0x822147E8;
		  /* 822147E8h */ case   28:  		/* b -1586492 */
		/* 822147E8h case   28:*/		return 0x820912AC;
		/* 822147E8h case   28:*/		return 0x822147EC;
		  /* 822147ECh */ case   29:  		/* nop */
		/* 822147ECh case   29:*/		cpu::op::nop();
		/* 822147ECh case   29:*/		return 0x822147F0;
		  /* 822147F0h */ case   30:  		/* li R11, 3 */
		/* 822147F0h case   30:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 822147F0h case   30:*/		return 0x822147F4;
		  /* 822147F4h */ case   31:  		/* mr R10, R3 */
		/* 822147F4h case   31:*/		regs.R10 = regs.R3;
		/* 822147F4h case   31:*/		return 0x822147F8;
		  /* 822147F8h */ case   32:  		/* sth R11, <#[R4 + 2]> */
		/* 822147F8h case   32:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R4 + 0x00000002) );
		/* 822147F8h case   32:*/		return 0x822147FC;
		  /* 822147FCh */ case   33:  		/* lwz R11, <#[R4]> */
		/* 822147FCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 822147FCh case   33:*/		return 0x82214800;
		  /* 82214800h */ case   34:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82214800h case   34:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82214800h case   34:*/		return 0x82214804;
		  /* 82214804h */ case   35:  		/* stw R11, <#[R4]> */
		/* 82214804h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82214804h case   35:*/		return 0x82214808;
		  /* 82214808h */ case   36:  		/* lwz R11, <#[R3 + 4]> */
		/* 82214808h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82214808h case   36:*/		return 0x8221480C;
		  /* 8221480Ch */ case   37:  		/* stwu R11, <#[R4 + 4]> */
		/* 8221480Ch case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 8221480Ch case   37:*/		return 0x82214810;
		  /* 82214810h */ case   38:  		/* lwz R11, <#[R3 + 4]> */
		/* 82214810h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82214810h case   38:*/		return 0x82214814;
		  /* 82214814h */ case   39:  		/* rlwinm. R9, R11, 0, 9, 9 */
		/* 82214814h case   39:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R11);
		/* 82214814h case   39:*/		return 0x82214818;
		  /* 82214818h */ case   40:  		/* addi R11, R4, 4 */
		/* 82214818h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x4);
		/* 82214818h case   40:*/		return 0x8221481C;
		  /* 8221481Ch */ case   41:  		/* bc 12, CR0_EQ, 16 */
		/* 8221481Ch case   41:*/		if ( regs.CR[0].eq ) { return 0x8221482C;  }
		/* 8221481Ch case   41:*/		return 0x82214820;
		  /* 82214820h */ case   42:  		/* lwz R9, <#[R3 + 8]> */
		/* 82214820h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82214820h case   42:*/		return 0x82214824;
		  /* 82214824h */ case   43:  		/* stw R9, <#[R11]> */
		/* 82214824h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214824h case   43:*/		return 0x82214828;
		  /* 82214828h */ case   44:  		/* addi R11, R11, 4 */
		/* 82214828h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214828h case   44:*/		return 0x8221482C;
	}
	return 0x8221482C;
} // Block from 82214778h-8221482Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 8221482Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221482C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221482C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221482C);
		  /* 8221482Ch */ case    0:  		/* lwz R9, <#[R10 + 4]> */
		/* 8221482Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8221482Ch case    0:*/		return 0x82214830;
		  /* 82214830h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214830h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214830h case    1:*/		return 0x82214834;
		  /* 82214834h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214834h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214844;  }
		/* 82214834h case    2:*/		return 0x82214838;
		  /* 82214838h */ case    3:  		/* lwz R9, <#[R10 + 12]> */
		/* 82214838h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 82214838h case    3:*/		return 0x8221483C;
		  /* 8221483Ch */ case    4:  		/* stw R9, <#[R11]> */
		/* 8221483Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221483Ch case    4:*/		return 0x82214840;
		  /* 82214840h */ case    5:  		/* addi R11, R11, 4 */
		/* 82214840h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214840h case    5:*/		return 0x82214844;
	}
	return 0x82214844;
} // Block from 8221482Ch-82214844h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214844);
		  /* 82214844h */ case    0:  		/* lwz R9, <#[R10 + 16]> */
		/* 82214844h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82214844h case    0:*/		return 0x82214848;
		  /* 82214848h */ case    1:  		/* stw R9, <#[R11]> */
		/* 82214848h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214848h case    1:*/		return 0x8221484C;
		  /* 8221484Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 8221484Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221484Ch case    2:*/		return 0x82214850;
		  /* 82214850h */ case    3:  		/* lwz R9, <#[R10 + 16]> */
		/* 82214850h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82214850h case    3:*/		return 0x82214854;
		  /* 82214854h */ case    4:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82214854h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82214854h case    4:*/		return 0x82214858;
		  /* 82214858h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82214858h case    5:*/		if ( regs.CR[0].eq ) { return 0x82214868;  }
		/* 82214858h case    5:*/		return 0x8221485C;
		  /* 8221485Ch */ case    6:  		/* lwz R9, <#[R10 + 28]> */
		/* 8221485Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000001C) );
		/* 8221485Ch case    6:*/		return 0x82214860;
		  /* 82214860h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82214860h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214860h case    7:*/		return 0x82214864;
		  /* 82214864h */ case    8:  		/* addi R11, R11, 4 */
		/* 82214864h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214864h case    8:*/		return 0x82214868;
	}
	return 0x82214868;
} // Block from 82214844h-82214868h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82214868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214868);
		  /* 82214868h */ case    0:  		/* lwz R9, <#[R10 + 16]> */
		/* 82214868h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82214868h case    0:*/		return 0x8221486C;
		  /* 8221486Ch */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 8221486Ch case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 8221486Ch case    1:*/		return 0x82214870;
		  /* 82214870h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214870h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214880;  }
		/* 82214870h case    2:*/		return 0x82214874;
		  /* 82214874h */ case    3:  		/* lwz R9, <#[R10 + 40]> */
		/* 82214874h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000028) );
		/* 82214874h case    3:*/		return 0x82214878;
		  /* 82214878h */ case    4:  		/* stw R9, <#[R11]> */
		/* 82214878h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214878h case    4:*/		return 0x8221487C;
		  /* 8221487Ch */ case    5:  		/* addi R11, R11, 4 */
		/* 8221487Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221487Ch case    5:*/		return 0x82214880;
	}
	return 0x82214880;
} // Block from 82214868h-82214880h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214880);
		  /* 82214880h */ case    0:  		/* lwz R9, <#[R10 + 20]> */
		/* 82214880h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 82214880h case    0:*/		return 0x82214884;
		  /* 82214884h */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 82214884h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214884h case    1:*/		return 0x82214888;
		  /* 82214888h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 82214888h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214888h case    2:*/		return 0x8221488C;
		  /* 8221488Ch */ case    3:  		/* lwz R8, <#[R10 + 20]> */
		/* 8221488Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 8221488Ch case    3:*/		return 0x82214890;
		  /* 82214890h */ case    4:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82214890h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82214890h case    4:*/		return 0x82214894;
		  /* 82214894h */ case    5:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82214894h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82214894h case    5:*/		return 0x82214898;
		  /* 82214898h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82214898h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214898h case    6:*/		return 0x8221489C;
		  /* 8221489Ch */ case    7:  		/* lwz R8, <#[R10 + 20]> */
		/* 8221489Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 8221489Ch case    7:*/		return 0x822148A0;
		  /* 822148A0h */ case    8:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 822148A0h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 822148A0h case    8:*/		return 0x822148A4;
		  /* 822148A4h */ case    9:  		/* oris R9, R8, 64 */
		/* 822148A4h case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 822148A4h case    9:*/		return 0x822148A8;
		  /* 822148A8h */ case   10:  		/* stw R9, <#[R11]> */
		/* 822148A8h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822148A8h case   10:*/		return 0x822148AC;
		  /* 822148ACh */ case   11:  		/* lwz R9, <#[R10 + 32]> */
		/* 822148ACh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000020) );
		/* 822148ACh case   11:*/		return 0x822148B0;
		  /* 822148B0h */ case   12:  		/* lwzu R8, <#[R11 + 4]> */
		/* 822148B0h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822148B0h case   12:*/		return 0x822148B4;
		  /* 822148B4h */ case   13:  		/* addi R3, R11, 4 */
		/* 822148B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822148B4h case   13:*/		return 0x822148B8;
		  /* 822148B8h */ case   14:  		/* rlwimi R8, R9, 0, 29, 31 */
		/* 822148B8h case   14:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R9);
		/* 822148B8h case   14:*/		return 0x822148BC;
		  /* 822148BCh */ case   15:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822148BCh case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822148BCh case   15:*/		return 0x822148C0;
		  /* 822148C0h */ case   16:  		/* stw R8, <#[R11]> */
		/* 822148C0h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822148C0h case   16:*/		return 0x822148C4;
		  /* 822148C4h */ case   17:  		/* lwz R8, <#[R10 + 32]> */
		/* 822148C4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 822148C4h case   17:*/		return 0x822148C8;
		  /* 822148C8h */ case   18:  		/* rlwimi R9, R8, 0, 25, 27 */
		/* 822148C8h case   18:*/		cpu::op::rlwimi<0,0,25,27>(regs,&regs.R9,regs.R8);
		/* 822148C8h case   18:*/		return 0x822148CC;
		  /* 822148CCh */ case   19:  		/* stw R9, <#[R11]> */
		/* 822148CCh case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822148CCh case   19:*/		return 0x822148D0;
		  /* 822148D0h */ case   20:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822148D0h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822148D0h case   20:*/		return 0x822148D4;
		  /* 822148D4h */ case   21:  		/* lwz R8, <#[R10 + 32]> */
		/* 822148D4h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 822148D4h case   21:*/		return 0x822148D8;
		  /* 822148D8h */ case   22:  		/* rlwimi R9, R8, 0, 21, 23 */
		/* 822148D8h case   22:*/		cpu::op::rlwimi<0,0,21,23>(regs,&regs.R9,regs.R8);
		/* 822148D8h case   22:*/		return 0x822148DC;
		  /* 822148DCh */ case   23:  		/* stw R9, <#[R11]> */
		/* 822148DCh case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822148DCh case   23:*/		return 0x822148E0;
		  /* 822148E0h */ case   24:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 822148E0h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 822148E0h case   24:*/		return 0x822148E4;
		  /* 822148E4h */ case   25:  		/* lwz R8, <#[R10 + 32]> */
		/* 822148E4h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 822148E4h case   25:*/		return 0x822148E8;
		  /* 822148E8h */ case   26:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 822148E8h case   26:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 822148E8h case   26:*/		return 0x822148EC;
		  /* 822148ECh */ case   27:  		/* stw R8, <#[R11]> */
		/* 822148ECh case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822148ECh case   27:*/		return 0x822148F0;
		  /* 822148F0h */ case   28:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822148F0h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822148F0h case   28:*/		return 0x822148F4;
		  /* 822148F4h */ case   29:  		/* lwz R8, <#[R10 + 32]> */
		/* 822148F4h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 822148F4h case   29:*/		return 0x822148F8;
		  /* 822148F8h */ case   30:  		/* nor R8, R8, R8 */
		/* 822148F8h case   30:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 822148F8h case   30:*/		return 0x822148FC;
		  /* 822148FCh */ case   31:  		/* rlwimi R8, R9, 0, 29, 27 */
		/* 822148FCh case   31:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R8,regs.R9);
		/* 822148FCh case   31:*/		return 0x82214900;
		  /* 82214900h */ case   32:  		/* stw R8, <#[R11]> */
		/* 82214900h case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214900h case   32:*/		return 0x82214904;
		  /* 82214904h */ case   33:  		/* lwz R9, <#[R10 + 32]> */
		/* 82214904h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000020) );
		/* 82214904h case   33:*/		return 0x82214908;
	}
	return 0x82214908;
} // Block from 82214880h-82214908h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82214908h
// Function '?DoSinCos@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214908);
		  /* 82214908h */ case    0:  		/* nor R9, R9, R9 */
		/* 82214908h case    0:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82214908h case    0:*/		return 0x8221490C;
		  /* 8221490Ch */ case    1:  		/* rlwimi R9, R8, 0, 25, 23 */
		/* 8221490Ch case    1:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R9,regs.R8);
		/* 8221490Ch case    1:*/		return 0x82214910;
		  /* 82214910h */ case    2:  		/* stw R9, <#[R11]> */
		/* 82214910h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214910h case    2:*/		return 0x82214914;
		  /* 82214914h */ case    3:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82214914h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82214914h case    3:*/		return 0x82214918;
		  /* 82214918h */ case    4:  		/* lwz R8, <#[R10 + 32]> */
		/* 82214918h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 82214918h case    4:*/		return 0x8221491C;
		  /* 8221491Ch */ case    5:  		/* nor R8, R8, R8 */
		/* 8221491Ch case    5:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 8221491Ch case    5:*/		return 0x82214920;
		  /* 82214920h */ case    6:  		/* rlwimi R8, R9, 0, 21, 19 */
		/* 82214920h case    6:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R8,regs.R9);
		/* 82214920h case    6:*/		return 0x82214924;
		  /* 82214924h */ case    7:  		/* stw R8, <#[R11]> */
		/* 82214924h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214924h case    7:*/		return 0x82214928;
		  /* 82214928h */ case    8:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82214928h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82214928h case    8:*/		return 0x8221492C;
		  /* 8221492Ch */ case    9:  		/* lwz R8, <#[R10 + 32]> */
		/* 8221492Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000020) );
		/* 8221492Ch case    9:*/		return 0x82214930;
		  /* 82214930h */ case   10:  		/* nor R8, R8, R8 */
		/* 82214930h case   10:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82214930h case   10:*/		return 0x82214934;
		  /* 82214934h */ case   11:  		/* rlwimi R8, R9, 0, 17, 15 */
		/* 82214934h case   11:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R8,regs.R9);
		/* 82214934h case   11:*/		return 0x82214938;
		  /* 82214938h */ case   12:  		/* stw R8, <#[R11]> */
		/* 82214938h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214938h case   12:*/		return 0x8221493C;
		  /* 8221493Ch */ case   13:  		/* lwz R11, <#[R10 + 16]> */
		/* 8221493Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8221493Ch case   13:*/		return 0x82214940;
		  /* 82214940h */ case   14:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82214940h case   14:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82214940h case   14:*/		return 0x82214944;
		  /* 82214944h */ case   15:  		/* bclr 12, CR0_EQ */
		/* 82214944h case   15:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82214944h case   15:*/		return 0x82214948;
	}
	return 0x82214948;
} // Block from 82214908h-82214948h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82214948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214948);
		  /* 82214948h */ case    0:  		/* lwz R11, <#[R10 + 40]> */
		/* 82214948h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 82214948h case    0:*/		return 0x8221494C;
		  /* 8221494Ch */ case    1:  		/* stw R11, <#[R3]> */
		/* 8221494Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221494Ch case    1:*/		return 0x82214950;
		  /* 82214950h */ case    2:  		/* addi R3, R3, 4 */
		/* 82214950h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82214950h case    2:*/		return 0x82214954;
		  /* 82214954h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82214954h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82214954h case    3:*/		return 0x82214958;
	}
	return 0x82214958;
} // Block from 82214948h-82214958h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82214958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214958);
		  /* 82214958h */ case    0:  		/* mfspr R12, LR */
		/* 82214958h case    0:*/		regs.R12 = regs.LR;
		/* 82214958h case    0:*/		return 0x8221495C;
		  /* 8221495Ch */ case    1:  		/* bl -1586944 */
		/* 8221495Ch case    1:*/		regs.LR = 0x82214960; return 0x8209125C;
		/* 8221495Ch case    1:*/		return 0x82214960;
		  /* 82214960h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82214960h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82214960h case    2:*/		return 0x82214964;
		  /* 82214964h */ case    3:  		/* lwz R29, <#[R3 + 28]> */
		/* 82214964h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000001C) );
		/* 82214964h case    3:*/		return 0x82214968;
		  /* 82214968h */ case    4:  		/* mr R30, R4 */
		/* 82214968h case    4:*/		regs.R30 = regs.R4;
		/* 82214968h case    4:*/		return 0x8221496C;
		  /* 8221496Ch */ case    5:  		/* mr R31, R5 */
		/* 8221496Ch case    5:*/		regs.R31 = regs.R5;
		/* 8221496Ch case    5:*/		return 0x82214970;
		  /* 82214970h */ case    6:  		/* bl -22344 */
		/* 82214970h case    6:*/		regs.LR = 0x82214974; return 0x8220F228;
		/* 82214970h case    6:*/		return 0x82214974;
		  /* 82214974h */ case    7:  		/* lhz R11, <#[R30]> */
		/* 82214974h case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82214974h case    7:*/		return 0x82214978;
		  /* 82214978h */ case    8:  		/* li R10, 1 */
		/* 82214978h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82214978h case    8:*/		return 0x8221497C;
		  /* 8221497Ch */ case    9:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8221497Ch case    9:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8221497Ch case    9:*/		return 0x82214980;
		  /* 82214980h */ case   10:  		/* cmplwi CR6, R11, 4 */
		/* 82214980h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82214980h case   10:*/		return 0x82214984;
		  /* 82214984h */ case   11:  		/* bc 12, CR6_LT, 204 */
		/* 82214984h case   11:*/		if ( regs.CR[6].lt ) { return 0x82214A50;  }
		/* 82214984h case   11:*/		return 0x82214988;
		  /* 82214988h */ case   12:  		/* cmplwi CR6, R11, 6 */
		/* 82214988h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82214988h case   12:*/		return 0x8221498C;
		  /* 8221498Ch */ case   13:  		/* bc 4, CR6_LT, 356 */
		/* 8221498Ch case   13:*/		if ( !regs.CR[6].lt ) { return 0x82214AF0;  }
		/* 8221498Ch case   13:*/		return 0x82214990;
		  /* 82214990h */ case   14:  		/* cmplwi CR6, R11, 4 */
		/* 82214990h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82214990h case   14:*/		return 0x82214994;
		  /* 82214994h */ case   15:  		/* bc 4, CR6_EQ, 28 */
		/* 82214994h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822149B0;  }
		/* 82214994h case   15:*/		return 0x82214998;
		  /* 82214998h */ case   16:  		/* li R9, 86 */
		/* 82214998h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x56);
		/* 82214998h case   16:*/		return 0x8221499C;
		  /* 8221499Ch */ case   17:  		/* sth R9, <#[R31 + 2]> */
		/* 8221499Ch case   17:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 8221499Ch case   17:*/		return 0x822149A0;
		  /* 822149A0h */ case   18:  		/* lwz R9, <#[R31]> */
		/* 822149A0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 822149A0h case   18:*/		return 0x822149A4;
		  /* 822149A4h */ case   19:  		/* rlwimi R9, R10, 17, 3, 15 */
		/* 822149A4h case   19:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R9,regs.R10);
		/* 822149A4h case   19:*/		return 0x822149A8;
		  /* 822149A8h */ case   20:  		/* stw R9, <#[R31]> */
		/* 822149A8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 822149A8h case   20:*/		return 0x822149AC;
		  /* 822149ACh */ case   21:  		/* b 28 */
		/* 822149ACh case   21:*/		return 0x822149C8;
		/* 822149ACh case   21:*/		return 0x822149B0;
	}
	return 0x822149B0;
} // Block from 82214958h-822149B0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822149B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822149B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822149B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822149B0);
		  /* 822149B0h */ case    0:  		/* li R11, 86 */
		/* 822149B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x56);
		/* 822149B0h case    0:*/		return 0x822149B4;
		  /* 822149B4h */ case    1:  		/* li R9, 3 */
		/* 822149B4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 822149B4h case    1:*/		return 0x822149B8;
		  /* 822149B8h */ case    2:  		/* sth R11, <#[R31 + 2]> */
		/* 822149B8h case    2:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 822149B8h case    2:*/		return 0x822149BC;
		  /* 822149BCh */ case    3:  		/* lwz R8, <#[R31]> */
		/* 822149BCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 822149BCh case    3:*/		return 0x822149C0;
		  /* 822149C0h */ case    4:  		/* rlwimi R8, R9, 16, 3, 15 */
		/* 822149C0h case    4:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R8,regs.R9);
		/* 822149C0h case    4:*/		return 0x822149C4;
		  /* 822149C4h */ case    5:  		/* stw R8, <#[R31]> */
		/* 822149C4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 822149C4h case    5:*/		return 0x822149C8;
	}
	return 0x822149C8;
} // Block from 822149B0h-822149C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822149C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822149C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822149C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822149C8);
		  /* 822149C8h */ case    0:  		/* addi R11, R31, 4 */
		/* 822149C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 822149C8h case    0:*/		return 0x822149CC;
		  /* 822149CCh */ case    1:  		/* sth R3, <#[R11 + 2]> */
		/* 822149CCh case    1:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 822149CCh case    1:*/		return 0x822149D0;
		  /* 822149D0h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 822149D0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822149D0h case    2:*/		return 0x822149D4;
		  /* 822149D4h */ case    3:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 822149D4h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 822149D4h case    3:*/		return 0x822149D8;
		  /* 822149D8h */ case    4:  		/* stw R9, <#[R11]> */
		/* 822149D8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822149D8h case    4:*/		return 0x822149DC;
		  /* 822149DCh */ case    5:  		/* lwz R9, <#[R30 + 20]> */
		/* 822149DCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 822149DCh case    5:*/		return 0x822149E0;
		  /* 822149E0h */ case    6:  		/* stwu R9, <#[R11 + 4]> */
		/* 822149E0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822149E0h case    6:*/		return 0x822149E4;
		  /* 822149E4h */ case    7:  		/* lwz R9, <#[R30 + 20]> */
		/* 822149E4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 822149E4h case    7:*/		return 0x822149E8;
		  /* 822149E8h */ case    8:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 822149E8h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 822149E8h case    8:*/		return 0x822149EC;
		  /* 822149ECh */ case    9:  		/* addi R11, R11, 4 */
		/* 822149ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822149ECh case    9:*/		return 0x822149F0;
		  /* 822149F0h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 822149F0h case   10:*/		if ( regs.CR[0].eq ) { return 0x82214A00;  }
		/* 822149F0h case   10:*/		return 0x822149F4;
		  /* 822149F4h */ case   11:  		/* lwz R9, <#[R30 + 32]> */
		/* 822149F4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 822149F4h case   11:*/		return 0x822149F8;
		  /* 822149F8h */ case   12:  		/* stw R9, <#[R11]> */
		/* 822149F8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822149F8h case   12:*/		return 0x822149FC;
		  /* 822149FCh */ case   13:  		/* addi R11, R11, 4 */
		/* 822149FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822149FCh case   13:*/		return 0x82214A00;
	}
	return 0x82214A00;
} // Block from 822149C8h-82214A00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82214A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214A00);
		  /* 82214A00h */ case    0:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214A00h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214A00h case    0:*/		return 0x82214A04;
		  /* 82214A04h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214A04h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214A04h case    1:*/		return 0x82214A08;
		  /* 82214A08h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214A08h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214A18;  }
		/* 82214A08h case    2:*/		return 0x82214A0C;
		  /* 82214A0Ch */ case    3:  		/* lwz R9, <#[R30 + 44]> */
		/* 82214A0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000002C) );
		/* 82214A0Ch case    3:*/		return 0x82214A10;
		  /* 82214A10h */ case    4:  		/* stw R9, <#[R11]> */
		/* 82214A10h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214A10h case    4:*/		return 0x82214A14;
		  /* 82214A14h */ case    5:  		/* addi R11, R11, 4 */
		/* 82214A14h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214A14h case    5:*/		return 0x82214A18;
	}
	return 0x82214A18;
} // Block from 82214A00h-82214A18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214A18);
		  /* 82214A18h */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214A18h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A18h case    0:*/		return 0x82214A1C;
		  /* 82214A1Ch */ case    1:  		/* addi R31, R11, 4 */
		/* 82214A1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82214A1Ch case    1:*/		return 0x82214A20;
		  /* 82214A20h */ case    2:  		/* stw R9, <#[R11]> */
		/* 82214A20h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214A20h case    2:*/		return 0x82214A24;
		  /* 82214A24h */ case    3:  		/* lwz R11, <#[R30 + 16]> */
		/* 82214A24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A24h case    3:*/		return 0x82214A28;
		  /* 82214A28h */ case    4:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82214A28h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82214A28h case    4:*/		return 0x82214A2C;
		  /* 82214A2Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82214A2Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82214A3C;  }
		/* 82214A2Ch case    5:*/		return 0x82214A30;
		  /* 82214A30h */ case    6:  		/* lwz R11, <#[R30 + 28]> */
		/* 82214A30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214A30h case    6:*/		return 0x82214A34;
		  /* 82214A34h */ case    7:  		/* stw R11, <#[R31]> */
		/* 82214A34h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82214A34h case    7:*/		return 0x82214A38;
		  /* 82214A38h */ case    8:  		/* addi R31, R31, 4 */
		/* 82214A38h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214A38h case    8:*/		return 0x82214A3C;
	}
	return 0x82214A3C;
} // Block from 82214A18h-82214A3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82214A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214A3C);
		  /* 82214A3Ch */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 82214A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A3Ch case    0:*/		return 0x82214A40;
		  /* 82214A40h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82214A40h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82214A40h case    1:*/		return 0x82214A44;
		  /* 82214A44h */ case    2:  		/* bc 12, CR0_EQ, 172 */
		/* 82214A44h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214AF0;  }
		/* 82214A44h case    2:*/		return 0x82214A48;
		  /* 82214A48h */ case    3:  		/* lwz R11, <#[R30 + 40]> */
		/* 82214A48h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 82214A48h case    3:*/		return 0x82214A4C;
		  /* 82214A4Ch */ case    4:  		/* b 156 */
		/* 82214A4Ch case    4:*/		return 0x82214AE8;
		/* 82214A4Ch case    4:*/		return 0x82214A50;
	}
	return 0x82214A50;
} // Block from 82214A3Ch-82214A50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82214A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214A50);
		  /* 82214A50h */ case    0:  		/* li R9, 86 */
		/* 82214A50h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x56);
		/* 82214A50h case    0:*/		return 0x82214A54;
		  /* 82214A54h */ case    1:  		/* sth R9, <#[R31 + 2]> */
		/* 82214A54h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 82214A54h case    1:*/		return 0x82214A58;
		  /* 82214A58h */ case    2:  		/* lwz R9, <#[R31]> */
		/* 82214A58h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214A58h case    2:*/		return 0x82214A5C;
		  /* 82214A5Ch */ case    3:  		/* rlwimi R9, R11, 16, 3, 15 */
		/* 82214A5Ch case    3:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R9,regs.R11);
		/* 82214A5Ch case    3:*/		return 0x82214A60;
		  /* 82214A60h */ case    4:  		/* addi R11, R31, 4 */
		/* 82214A60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82214A60h case    4:*/		return 0x82214A64;
		  /* 82214A64h */ case    5:  		/* stw R9, <#[R31]> */
		/* 82214A64h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214A64h case    5:*/		return 0x82214A68;
		  /* 82214A68h */ case    6:  		/* sth R3, <#[R31 + 6]> */
		/* 82214A68h case    6:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000006) );
		/* 82214A68h case    6:*/		return 0x82214A6C;
		  /* 82214A6Ch */ case    7:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214A6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214A6Ch case    7:*/		return 0x82214A70;
		  /* 82214A70h */ case    8:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82214A70h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82214A70h case    8:*/		return 0x82214A74;
		  /* 82214A74h */ case    9:  		/* stw R9, <#[R31 + 4]> */
		/* 82214A74h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214A74h case    9:*/		return 0x82214A78;
		  /* 82214A78h */ case   10:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214A78h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A78h case   10:*/		return 0x82214A7C;
		  /* 82214A7Ch */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 82214A7Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214A7Ch case   11:*/		return 0x82214A80;
		  /* 82214A80h */ case   12:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214A80h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A80h case   12:*/		return 0x82214A84;
		  /* 82214A84h */ case   13:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82214A84h case   13:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82214A84h case   13:*/		return 0x82214A88;
		  /* 82214A88h */ case   14:  		/* addi R11, R11, 4 */
		/* 82214A88h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214A88h case   14:*/		return 0x82214A8C;
		  /* 82214A8Ch */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 82214A8Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x82214A9C;  }
		/* 82214A8Ch case   15:*/		return 0x82214A90;
		  /* 82214A90h */ case   16:  		/* lwz R9, <#[R30 + 28]> */
		/* 82214A90h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214A90h case   16:*/		return 0x82214A94;
		  /* 82214A94h */ case   17:  		/* stw R9, <#[R11]> */
		/* 82214A94h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214A94h case   17:*/		return 0x82214A98;
		  /* 82214A98h */ case   18:  		/* addi R11, R11, 4 */
		/* 82214A98h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214A98h case   18:*/		return 0x82214A9C;
	}
	return 0x82214A9C;
} // Block from 82214A50h-82214A9Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82214A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214A9C);
		  /* 82214A9Ch */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214A9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214A9Ch case    0:*/		return 0x82214AA0;
		  /* 82214AA0h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214AA0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214AA0h case    1:*/		return 0x82214AA4;
		  /* 82214AA4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214AA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214AB4;  }
		/* 82214AA4h case    2:*/		return 0x82214AA8;
		  /* 82214AA8h */ case    3:  		/* lwz R9, <#[R30 + 40]> */
		/* 82214AA8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 82214AA8h case    3:*/		return 0x82214AAC;
		  /* 82214AACh */ case    4:  		/* stw R9, <#[R11]> */
		/* 82214AACh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214AACh case    4:*/		return 0x82214AB0;
		  /* 82214AB0h */ case    5:  		/* addi R11, R11, 4 */
		/* 82214AB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214AB0h case    5:*/		return 0x82214AB4;
	}
	return 0x82214AB4;
} // Block from 82214A9Ch-82214AB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214AB4);
		  /* 82214AB4h */ case    0:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214AB4h case    0:*/		return 0x82214AB8;
		  /* 82214AB8h */ case    1:  		/* addi R31, R11, 4 */
		/* 82214AB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82214AB8h case    1:*/		return 0x82214ABC;
		  /* 82214ABCh */ case    2:  		/* stw R9, <#[R11]> */
		/* 82214ABCh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214ABCh case    2:*/		return 0x82214AC0;
		  /* 82214AC0h */ case    3:  		/* lwz R11, <#[R30 + 20]> */
		/* 82214AC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82214AC0h case    3:*/		return 0x82214AC4;
		  /* 82214AC4h */ case    4:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82214AC4h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82214AC4h case    4:*/		return 0x82214AC8;
		  /* 82214AC8h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82214AC8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82214AD8;  }
		/* 82214AC8h case    5:*/		return 0x82214ACC;
		  /* 82214ACCh */ case    6:  		/* lwz R11, <#[R30 + 32]> */
		/* 82214ACCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82214ACCh case    6:*/		return 0x82214AD0;
		  /* 82214AD0h */ case    7:  		/* stw R11, <#[R31]> */
		/* 82214AD0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82214AD0h case    7:*/		return 0x82214AD4;
		  /* 82214AD4h */ case    8:  		/* addi R31, R31, 4 */
		/* 82214AD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214AD4h case    8:*/		return 0x82214AD8;
	}
	return 0x82214AD8;
} // Block from 82214AB4h-82214AD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82214AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214AD8);
		  /* 82214AD8h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 82214AD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82214AD8h case    0:*/		return 0x82214ADC;
		  /* 82214ADCh */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82214ADCh case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82214ADCh case    1:*/		return 0x82214AE0;
		  /* 82214AE0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214AE0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214AF0;  }
		/* 82214AE0h case    2:*/		return 0x82214AE4;
		  /* 82214AE4h */ case    3:  		/* lwz R11, <#[R30 + 44]> */
		/* 82214AE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 82214AE4h case    3:*/		return 0x82214AE8;
	}
	return 0x82214AE8;
} // Block from 82214AD8h-82214AE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82214AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214AE8);
		  /* 82214AE8h */ case    0:  		/* stw R11, <#[R31]> */
		/* 82214AE8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82214AE8h case    0:*/		return 0x82214AEC;
		  /* 82214AECh */ case    1:  		/* addi R31, R31, 4 */
		/* 82214AECh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214AECh case    1:*/		return 0x82214AF0;
	}
	return 0x82214AF0;
} // Block from 82214AE8h-82214AF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82214AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214AF0);
		  /* 82214AF0h */ case    0:  		/* li R9, 108 */
		/* 82214AF0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x6C);
		/* 82214AF0h case    0:*/		return 0x82214AF4;
		  /* 82214AF4h */ case    1:  		/* addi R11, R31, 4 */
		/* 82214AF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82214AF4h case    1:*/		return 0x82214AF8;
		  /* 82214AF8h */ case    2:  		/* sth R9, <#[R31 + 2]> */
		/* 82214AF8h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 82214AF8h case    2:*/		return 0x82214AFC;
		  /* 82214AFCh */ case    3:  		/* mr R9, R3 */
		/* 82214AFCh case    3:*/		regs.R9 = regs.R3;
		/* 82214AFCh case    3:*/		return 0x82214B00;
		  /* 82214B00h */ case    4:  		/* lwz R8, <#[R31]> */
		/* 82214B00h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82214B00h case    4:*/		return 0x82214B04;
		  /* 82214B04h */ case    5:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82214B04h case    5:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82214B04h case    5:*/		return 0x82214B08;
		  /* 82214B08h */ case    6:  		/* stw R8, <#[R31]> */
		/* 82214B08h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82214B08h case    6:*/		return 0x82214B0C;
		  /* 82214B0Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 82214B0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214B0Ch case    7:*/		return 0x82214B10;
		  /* 82214B10h */ case    8:  		/* lwz R8, <#[R29 + 23360]> */
		/* 82214B10h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214B10h case    8:*/		return 0x82214B14;
		  /* 82214B14h */ case    9:  		/* sth R8, <#[R31 + 6]> */
		/* 82214B14h case    9:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R31 + 0x00000006) );
		/* 82214B14h case    9:*/		return 0x82214B18;
		  /* 82214B18h */ case   10:  		/* lwz R8, <#[R31 + 4]> */
		/* 82214B18h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214B18h case   10:*/		return 0x82214B1C;
		  /* 82214B1Ch */ case   11:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82214B1Ch case   11:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82214B1Ch case   11:*/		return 0x82214B20;
		  /* 82214B20h */ case   12:  		/* stw R8, <#[R31 + 4]> */
		/* 82214B20h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82214B20h case   12:*/		return 0x82214B24;
		  /* 82214B24h */ case   13:  		/* lwz R8, <#[R29 + 23360]> */
		/* 82214B24h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214B24h case   13:*/		return 0x82214B28;
		  /* 82214B28h */ case   14:  		/* sth R8, <#[R11 + 2]> */
		/* 82214B28h case   14:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82214B28h case   14:*/		return 0x82214B2C;
		  /* 82214B2Ch */ case   15:  		/* lwz R8, <#[R11]> */
		/* 82214B2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214B2Ch case   15:*/		return 0x82214B30;
		  /* 82214B30h */ case   16:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82214B30h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82214B30h case   16:*/		return 0x82214B34;
		  /* 82214B34h */ case   17:  		/* stw R8, <#[R11]> */
		/* 82214B34h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214B34h case   17:*/		return 0x82214B38;
		  /* 82214B38h */ case   18:  		/* addi R11, R11, 4 */
		/* 82214B38h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214B38h case   18:*/		return 0x82214B3C;
		  /* 82214B3Ch */ case   19:  		/* addi R3, R11, 4 */
		/* 82214B3Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82214B3Ch case   19:*/		return 0x82214B40;
		  /* 82214B40h */ case   20:  		/* sth R9, <#[R11 + 2]> */
		/* 82214B40h case   20:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214B40h case   20:*/		return 0x82214B44;
		  /* 82214B44h */ case   21:  		/* lwz R9, <#[R11]> */
		/* 82214B44h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214B44h case   21:*/		return 0x82214B48;
		  /* 82214B48h */ case   22:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82214B48h case   22:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82214B48h case   22:*/		return 0x82214B4C;
		  /* 82214B4Ch */ case   23:  		/* stw R9, <#[R11]> */
		/* 82214B4Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214B4Ch case   23:*/		return 0x82214B50;
		  /* 82214B50h */ case   24:  		/* addi R1, R1, 112 */
		/* 82214B50h case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82214B50h case   24:*/		return 0x82214B54;
		  /* 82214B54h */ case   25:  		/* b -1587368 */
		/* 82214B54h case   25:*/		return 0x820912AC;
		/* 82214B54h case   25:*/		return 0x82214B58;
	}
	return 0x82214B58;
} // Block from 82214AF0h-82214B58h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82214B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214B58);
		  /* 82214B58h */ case    0:  		/* mfspr R12, LR */
		/* 82214B58h case    0:*/		regs.R12 = regs.LR;
		/* 82214B58h case    0:*/		return 0x82214B5C;
		  /* 82214B5Ch */ case    1:  		/* bl -1587456 */
		/* 82214B5Ch case    1:*/		regs.LR = 0x82214B60; return 0x8209125C;
		/* 82214B5Ch case    1:*/		return 0x82214B60;
		  /* 82214B60h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82214B60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82214B60h case    2:*/		return 0x82214B64;
		  /* 82214B64h */ case    3:  		/* lwz R29, <#[R3 + 28]> */
		/* 82214B64h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000001C) );
		/* 82214B64h case    3:*/		return 0x82214B68;
		  /* 82214B68h */ case    4:  		/* mr R30, R4 */
		/* 82214B68h case    4:*/		regs.R30 = regs.R4;
		/* 82214B68h case    4:*/		return 0x82214B6C;
		  /* 82214B6Ch */ case    5:  		/* mr R31, R5 */
		/* 82214B6Ch case    5:*/		regs.R31 = regs.R5;
		/* 82214B6Ch case    5:*/		return 0x82214B70;
		  /* 82214B70h */ case    6:  		/* bl -22856 */
		/* 82214B70h case    6:*/		regs.LR = 0x82214B74; return 0x8220F228;
		/* 82214B70h case    6:*/		return 0x82214B74;
		  /* 82214B74h */ case    7:  		/* lhz R10, <#[R30]> */
		/* 82214B74h case    7:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82214B74h case    7:*/		return 0x82214B78;
		  /* 82214B78h */ case    8:  		/* li R11, 1 */
		/* 82214B78h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82214B78h case    8:*/		return 0x82214B7C;
		  /* 82214B7Ch */ case    9:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82214B7Ch case    9:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82214B7Ch case    9:*/		return 0x82214B80;
		  /* 82214B80h */ case   10:  		/* cmplwi CR6, R10, 4 */
		/* 82214B80h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82214B80h case   10:*/		return 0x82214B84;
		  /* 82214B84h */ case   11:  		/* bc 12, CR6_LT, 204 */
		/* 82214B84h case   11:*/		if ( regs.CR[6].lt ) { return 0x82214C50;  }
		/* 82214B84h case   11:*/		return 0x82214B88;
		  /* 82214B88h */ case   12:  		/* cmplwi CR6, R10, 6 */
		/* 82214B88h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 82214B88h case   12:*/		return 0x82214B8C;
		  /* 82214B8Ch */ case   13:  		/* bc 4, CR6_LT, 356 */
		/* 82214B8Ch case   13:*/		if ( !regs.CR[6].lt ) { return 0x82214CF0;  }
		/* 82214B8Ch case   13:*/		return 0x82214B90;
		  /* 82214B90h */ case   14:  		/* cmplwi CR6, R10, 4 */
		/* 82214B90h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82214B90h case   14:*/		return 0x82214B94;
		  /* 82214B94h */ case   15:  		/* bc 4, CR6_EQ, 28 */
		/* 82214B94h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82214BB0;  }
		/* 82214B94h case   15:*/		return 0x82214B98;
		  /* 82214B98h */ case   16:  		/* li R9, 86 */
		/* 82214B98h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x56);
		/* 82214B98h case   16:*/		return 0x82214B9C;
		  /* 82214B9Ch */ case   17:  		/* sth R9, <#[R31 + 2]> */
		/* 82214B9Ch case   17:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 82214B9Ch case   17:*/		return 0x82214BA0;
		  /* 82214BA0h */ case   18:  		/* lwz R9, <#[R31]> */
		/* 82214BA0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214BA0h case   18:*/		return 0x82214BA4;
		  /* 82214BA4h */ case   19:  		/* rlwimi R9, R11, 17, 3, 15 */
		/* 82214BA4h case   19:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R9,regs.R11);
		/* 82214BA4h case   19:*/		return 0x82214BA8;
		  /* 82214BA8h */ case   20:  		/* stw R9, <#[R31]> */
		/* 82214BA8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214BA8h case   20:*/		return 0x82214BAC;
		  /* 82214BACh */ case   21:  		/* b 28 */
		/* 82214BACh case   21:*/		return 0x82214BC8;
		/* 82214BACh case   21:*/		return 0x82214BB0;
	}
	return 0x82214BB0;
} // Block from 82214B58h-82214BB0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82214BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214BB0);
		  /* 82214BB0h */ case    0:  		/* li R10, 86 */
		/* 82214BB0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x56);
		/* 82214BB0h case    0:*/		return 0x82214BB4;
		  /* 82214BB4h */ case    1:  		/* li R9, 3 */
		/* 82214BB4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82214BB4h case    1:*/		return 0x82214BB8;
		  /* 82214BB8h */ case    2:  		/* sth R10, <#[R31 + 2]> */
		/* 82214BB8h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82214BB8h case    2:*/		return 0x82214BBC;
		  /* 82214BBCh */ case    3:  		/* lwz R8, <#[R31]> */
		/* 82214BBCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82214BBCh case    3:*/		return 0x82214BC0;
		  /* 82214BC0h */ case    4:  		/* rlwimi R8, R9, 16, 3, 15 */
		/* 82214BC0h case    4:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R8,regs.R9);
		/* 82214BC0h case    4:*/		return 0x82214BC4;
		  /* 82214BC4h */ case    5:  		/* stw R8, <#[R31]> */
		/* 82214BC4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82214BC4h case    5:*/		return 0x82214BC8;
	}
	return 0x82214BC8;
} // Block from 82214BB0h-82214BC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214BC8);
		  /* 82214BC8h */ case    0:  		/* addi R10, R31, 4 */
		/* 82214BC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82214BC8h case    0:*/		return 0x82214BCC;
		  /* 82214BCCh */ case    1:  		/* sth R3, <#[R10 + 2]> */
		/* 82214BCCh case    1:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R10 + 0x00000002) );
		/* 82214BCCh case    1:*/		return 0x82214BD0;
		  /* 82214BD0h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 82214BD0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214BD0h case    2:*/		return 0x82214BD4;
		  /* 82214BD4h */ case    3:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214BD4h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214BD4h case    3:*/		return 0x82214BD8;
		  /* 82214BD8h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82214BD8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214BD8h case    4:*/		return 0x82214BDC;
		  /* 82214BDCh */ case    5:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214BDCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214BDCh case    5:*/		return 0x82214BE0;
		  /* 82214BE0h */ case    6:  		/* stwu R9, <#[R10 + 4]> */
		/* 82214BE0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82214BE0h case    6:*/		return 0x82214BE4;
		  /* 82214BE4h */ case    7:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214BE4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214BE4h case    7:*/		return 0x82214BE8;
		  /* 82214BE8h */ case    8:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82214BE8h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82214BE8h case    8:*/		return 0x82214BEC;
		  /* 82214BECh */ case    9:  		/* addi R10, R10, 4 */
		/* 82214BECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214BECh case    9:*/		return 0x82214BF0;
		  /* 82214BF0h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 82214BF0h case   10:*/		if ( regs.CR[0].eq ) { return 0x82214C00;  }
		/* 82214BF0h case   10:*/		return 0x82214BF4;
		  /* 82214BF4h */ case   11:  		/* lwz R9, <#[R30 + 32]> */
		/* 82214BF4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 82214BF4h case   11:*/		return 0x82214BF8;
		  /* 82214BF8h */ case   12:  		/* stw R9, <#[R10]> */
		/* 82214BF8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214BF8h case   12:*/		return 0x82214BFC;
		  /* 82214BFCh */ case   13:  		/* addi R10, R10, 4 */
		/* 82214BFCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214BFCh case   13:*/		return 0x82214C00;
	}
	return 0x82214C00;
} // Block from 82214BC8h-82214C00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82214C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214C00);
		  /* 82214C00h */ case    0:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214C00h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214C00h case    0:*/		return 0x82214C04;
		  /* 82214C04h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214C04h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214C04h case    1:*/		return 0x82214C08;
		  /* 82214C08h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214C08h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214C18;  }
		/* 82214C08h case    2:*/		return 0x82214C0C;
		  /* 82214C0Ch */ case    3:  		/* lwz R9, <#[R30 + 44]> */
		/* 82214C0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000002C) );
		/* 82214C0Ch case    3:*/		return 0x82214C10;
		  /* 82214C10h */ case    4:  		/* stw R9, <#[R10]> */
		/* 82214C10h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214C10h case    4:*/		return 0x82214C14;
		  /* 82214C14h */ case    5:  		/* addi R10, R10, 4 */
		/* 82214C14h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214C14h case    5:*/		return 0x82214C18;
	}
	return 0x82214C18;
} // Block from 82214C00h-82214C18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214C18);
		  /* 82214C18h */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214C18h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C18h case    0:*/		return 0x82214C1C;
		  /* 82214C1Ch */ case    1:  		/* addi R31, R10, 4 */
		/* 82214C1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0x4);
		/* 82214C1Ch case    1:*/		return 0x82214C20;
		  /* 82214C20h */ case    2:  		/* stw R9, <#[R10]> */
		/* 82214C20h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214C20h case    2:*/		return 0x82214C24;
		  /* 82214C24h */ case    3:  		/* lwz R10, <#[R30 + 16]> */
		/* 82214C24h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C24h case    3:*/		return 0x82214C28;
		  /* 82214C28h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82214C28h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82214C28h case    4:*/		return 0x82214C2C;
		  /* 82214C2Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82214C2Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82214C3C;  }
		/* 82214C2Ch case    5:*/		return 0x82214C30;
		  /* 82214C30h */ case    6:  		/* lwz R10, <#[R30 + 28]> */
		/* 82214C30h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214C30h case    6:*/		return 0x82214C34;
		  /* 82214C34h */ case    7:  		/* stw R10, <#[R31]> */
		/* 82214C34h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82214C34h case    7:*/		return 0x82214C38;
		  /* 82214C38h */ case    8:  		/* addi R31, R31, 4 */
		/* 82214C38h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214C38h case    8:*/		return 0x82214C3C;
	}
	return 0x82214C3C;
} // Block from 82214C18h-82214C3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82214C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214C3C);
		  /* 82214C3Ch */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 82214C3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C3Ch case    0:*/		return 0x82214C40;
		  /* 82214C40h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82214C40h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82214C40h case    1:*/		return 0x82214C44;
		  /* 82214C44h */ case    2:  		/* bc 12, CR0_EQ, 172 */
		/* 82214C44h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214CF0;  }
		/* 82214C44h case    2:*/		return 0x82214C48;
		  /* 82214C48h */ case    3:  		/* lwz R10, <#[R30 + 40]> */
		/* 82214C48h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 82214C48h case    3:*/		return 0x82214C4C;
		  /* 82214C4Ch */ case    4:  		/* b 156 */
		/* 82214C4Ch case    4:*/		return 0x82214CE8;
		/* 82214C4Ch case    4:*/		return 0x82214C50;
	}
	return 0x82214C50;
} // Block from 82214C3Ch-82214C50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82214C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214C50);
		  /* 82214C50h */ case    0:  		/* li R9, 86 */
		/* 82214C50h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x56);
		/* 82214C50h case    0:*/		return 0x82214C54;
		  /* 82214C54h */ case    1:  		/* sth R9, <#[R31 + 2]> */
		/* 82214C54h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 82214C54h case    1:*/		return 0x82214C58;
		  /* 82214C58h */ case    2:  		/* lwz R9, <#[R31]> */
		/* 82214C58h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214C58h case    2:*/		return 0x82214C5C;
		  /* 82214C5Ch */ case    3:  		/* rlwimi R9, R10, 16, 3, 15 */
		/* 82214C5Ch case    3:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R9,regs.R10);
		/* 82214C5Ch case    3:*/		return 0x82214C60;
		  /* 82214C60h */ case    4:  		/* addi R10, R31, 4 */
		/* 82214C60h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82214C60h case    4:*/		return 0x82214C64;
		  /* 82214C64h */ case    5:  		/* stw R9, <#[R31]> */
		/* 82214C64h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82214C64h case    5:*/		return 0x82214C68;
		  /* 82214C68h */ case    6:  		/* sth R3, <#[R31 + 6]> */
		/* 82214C68h case    6:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000006) );
		/* 82214C68h case    6:*/		return 0x82214C6C;
		  /* 82214C6Ch */ case    7:  		/* lwz R9, <#[R31 + 4]> */
		/* 82214C6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214C6Ch case    7:*/		return 0x82214C70;
		  /* 82214C70h */ case    8:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214C70h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214C70h case    8:*/		return 0x82214C74;
		  /* 82214C74h */ case    9:  		/* stw R9, <#[R31 + 4]> */
		/* 82214C74h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82214C74h case    9:*/		return 0x82214C78;
		  /* 82214C78h */ case   10:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214C78h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C78h case   10:*/		return 0x82214C7C;
		  /* 82214C7Ch */ case   11:  		/* stwu R9, <#[R10 + 4]> */
		/* 82214C7Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82214C7Ch case   11:*/		return 0x82214C80;
		  /* 82214C80h */ case   12:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214C80h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C80h case   12:*/		return 0x82214C84;
		  /* 82214C84h */ case   13:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82214C84h case   13:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82214C84h case   13:*/		return 0x82214C88;
		  /* 82214C88h */ case   14:  		/* addi R10, R10, 4 */
		/* 82214C88h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214C88h case   14:*/		return 0x82214C8C;
		  /* 82214C8Ch */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 82214C8Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x82214C9C;  }
		/* 82214C8Ch case   15:*/		return 0x82214C90;
		  /* 82214C90h */ case   16:  		/* lwz R9, <#[R30 + 28]> */
		/* 82214C90h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214C90h case   16:*/		return 0x82214C94;
		  /* 82214C94h */ case   17:  		/* stw R9, <#[R10]> */
		/* 82214C94h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214C94h case   17:*/		return 0x82214C98;
		  /* 82214C98h */ case   18:  		/* addi R10, R10, 4 */
		/* 82214C98h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214C98h case   18:*/		return 0x82214C9C;
	}
	return 0x82214C9C;
} // Block from 82214C50h-82214C9Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82214C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214C9C);
		  /* 82214C9Ch */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 82214C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82214C9Ch case    0:*/		return 0x82214CA0;
		  /* 82214CA0h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82214CA0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82214CA0h case    1:*/		return 0x82214CA4;
		  /* 82214CA4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214CA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214CB4;  }
		/* 82214CA4h case    2:*/		return 0x82214CA8;
		  /* 82214CA8h */ case    3:  		/* lwz R9, <#[R30 + 40]> */
		/* 82214CA8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 82214CA8h case    3:*/		return 0x82214CAC;
		  /* 82214CACh */ case    4:  		/* stw R9, <#[R10]> */
		/* 82214CACh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214CACh case    4:*/		return 0x82214CB0;
		  /* 82214CB0h */ case    5:  		/* addi R10, R10, 4 */
		/* 82214CB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214CB0h case    5:*/		return 0x82214CB4;
	}
	return 0x82214CB4;
} // Block from 82214C9Ch-82214CB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82214CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214CB4);
		  /* 82214CB4h */ case    0:  		/* lwz R9, <#[R30 + 20]> */
		/* 82214CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82214CB4h case    0:*/		return 0x82214CB8;
		  /* 82214CB8h */ case    1:  		/* addi R31, R10, 4 */
		/* 82214CB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0x4);
		/* 82214CB8h case    1:*/		return 0x82214CBC;
		  /* 82214CBCh */ case    2:  		/* stw R9, <#[R10]> */
		/* 82214CBCh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214CBCh case    2:*/		return 0x82214CC0;
		  /* 82214CC0h */ case    3:  		/* lwz R10, <#[R30 + 20]> */
		/* 82214CC0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82214CC0h case    3:*/		return 0x82214CC4;
		  /* 82214CC4h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82214CC4h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82214CC4h case    4:*/		return 0x82214CC8;
		  /* 82214CC8h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82214CC8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82214CD8;  }
		/* 82214CC8h case    5:*/		return 0x82214CCC;
		  /* 82214CCCh */ case    6:  		/* lwz R10, <#[R30 + 32]> */
		/* 82214CCCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000020) );
		/* 82214CCCh case    6:*/		return 0x82214CD0;
		  /* 82214CD0h */ case    7:  		/* stw R10, <#[R31]> */
		/* 82214CD0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82214CD0h case    7:*/		return 0x82214CD4;
		  /* 82214CD4h */ case    8:  		/* addi R31, R31, 4 */
		/* 82214CD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214CD4h case    8:*/		return 0x82214CD8;
	}
	return 0x82214CD8;
} // Block from 82214CB4h-82214CD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82214CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214CD8);
		  /* 82214CD8h */ case    0:  		/* lwz R10, <#[R30 + 20]> */
		/* 82214CD8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82214CD8h case    0:*/		return 0x82214CDC;
		  /* 82214CDCh */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82214CDCh case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82214CDCh case    1:*/		return 0x82214CE0;
		  /* 82214CE0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82214CE0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82214CF0;  }
		/* 82214CE0h case    2:*/		return 0x82214CE4;
		  /* 82214CE4h */ case    3:  		/* lwz R10, <#[R30 + 44]> */
		/* 82214CE4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000002C) );
		/* 82214CE4h case    3:*/		return 0x82214CE8;
	}
	return 0x82214CE8;
} // Block from 82214CD8h-82214CE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82214CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214CE8);
		  /* 82214CE8h */ case    0:  		/* stw R10, <#[R31]> */
		/* 82214CE8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82214CE8h case    0:*/		return 0x82214CEC;
		  /* 82214CECh */ case    1:  		/* addi R31, R31, 4 */
		/* 82214CECh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82214CECh case    1:*/		return 0x82214CF0;
	}
	return 0x82214CF0;
} // Block from 82214CE8h-82214CF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82214CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214CF0);
		  /* 82214CF0h */ case    0:  		/* li R9, 108 */
		/* 82214CF0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x6C);
		/* 82214CF0h case    0:*/		return 0x82214CF4;
		  /* 82214CF4h */ case    1:  		/* addi R10, R31, 4 */
		/* 82214CF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82214CF4h case    1:*/		return 0x82214CF8;
		  /* 82214CF8h */ case    2:  		/* sth R9, <#[R31 + 2]> */
		/* 82214CF8h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x00000002) );
		/* 82214CF8h case    2:*/		return 0x82214CFC;
		  /* 82214CFCh */ case    3:  		/* li R8, 112 */
		/* 82214CFCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x70);
		/* 82214CFCh case    3:*/		return 0x82214D00;
		  /* 82214D00h */ case    4:  		/* lwz R6, <#[R31]> */
		/* 82214D00h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82214D00h case    4:*/		return 0x82214D04;
		  /* 82214D04h */ case    5:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 82214D04h case    5:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 82214D04h case    5:*/		return 0x82214D08;
		  /* 82214D08h */ case    6:  		/* stw R6, <#[R31]> */
		/* 82214D08h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82214D08h case    6:*/		return 0x82214D0C;
		  /* 82214D0Ch */ case    7:  		/* addi R10, R10, 4 */
		/* 82214D0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D0Ch case    7:*/		return 0x82214D10;
		  /* 82214D10h */ case    8:  		/* li R7, 111 */
		/* 82214D10h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x6F);
		/* 82214D10h case    8:*/		return 0x82214D14;
		  /* 82214D14h */ case    9:  		/* lwz R6, <#[R29 + 23360]> */
		/* 82214D14h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214D14h case    9:*/		return 0x82214D18;
		  /* 82214D18h */ case   10:  		/* sth R6, <#[R31 + 6]> */
		/* 82214D18h case   10:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R31 + 0x00000006) );
		/* 82214D18h case   10:*/		return 0x82214D1C;
		  /* 82214D1Ch */ case   11:  		/* lwz R6, <#[R31 + 4]> */
		/* 82214D1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82214D1Ch case   11:*/		return 0x82214D20;
		  /* 82214D20h */ case   12:  		/* rlwimi R6, R11, 18, 8, 15 */
		/* 82214D20h case   12:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R11);
		/* 82214D20h case   12:*/		return 0x82214D24;
		  /* 82214D24h */ case   13:  		/* stw R6, <#[R31 + 4]> */
		/* 82214D24h case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82214D24h case   13:*/		return 0x82214D28;
		  /* 82214D28h */ case   14:  		/* lwz R6, <#[R29 + 23360]> */
		/* 82214D28h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214D28h case   14:*/		return 0x82214D2C;
		  /* 82214D2Ch */ case   15:  		/* sth R6, <#[R10 + 2]> */
		/* 82214D2Ch case   15:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D2Ch case   15:*/		return 0x82214D30;
		  /* 82214D30h */ case   16:  		/* lwz R6, <#[R10]> */
		/* 82214D30h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D30h case   16:*/		return 0x82214D34;
		  /* 82214D34h */ case   17:  		/* rlwimi R6, R11, 18, 8, 15 */
		/* 82214D34h case   17:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R11);
		/* 82214D34h case   17:*/		return 0x82214D38;
		  /* 82214D38h */ case   18:  		/* stw R6, <#[R10]> */
		/* 82214D38h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D38h case   18:*/		return 0x82214D3C;
		  /* 82214D3Ch */ case   19:  		/* addi R10, R10, 4 */
		/* 82214D3Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D3Ch case   19:*/		return 0x82214D40;
		  /* 82214D40h */ case   20:  		/* sth R3, <#[R10 + 2]> */
		/* 82214D40h case   20:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D40h case   20:*/		return 0x82214D44;
		  /* 82214D44h */ case   21:  		/* lwz R9, <#[R10]> */
		/* 82214D44h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D44h case   21:*/		return 0x82214D48;
		  /* 82214D48h */ case   22:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214D48h case   22:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214D48h case   22:*/		return 0x82214D4C;
		  /* 82214D4Ch */ case   23:  		/* stw R9, <#[R10]> */
		/* 82214D4Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D4Ch case   23:*/		return 0x82214D50;
		  /* 82214D50h */ case   24:  		/* addi R10, R10, 4 */
		/* 82214D50h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D50h case   24:*/		return 0x82214D54;
		  /* 82214D54h */ case   25:  		/* sth R8, <#[R10 + 2]> */
		/* 82214D54h case   25:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D54h case   25:*/		return 0x82214D58;
		  /* 82214D58h */ case   26:  		/* lwz R9, <#[R10]> */
		/* 82214D58h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D58h case   26:*/		return 0x82214D5C;
		  /* 82214D5Ch */ case   27:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82214D5Ch case   27:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82214D5Ch case   27:*/		return 0x82214D60;
		  /* 82214D60h */ case   28:  		/* stw R9, <#[R10]> */
		/* 82214D60h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D60h case   28:*/		return 0x82214D64;
		  /* 82214D64h */ case   29:  		/* addi R10, R10, 4 */
		/* 82214D64h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D64h case   29:*/		return 0x82214D68;
		  /* 82214D68h */ case   30:  		/* lwz R9, <#[R29 + 23360]> */
		/* 82214D68h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214D68h case   30:*/		return 0x82214D6C;
		  /* 82214D6Ch */ case   31:  		/* sth R9, <#[R10 + 2]> */
		/* 82214D6Ch case   31:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D6Ch case   31:*/		return 0x82214D70;
		  /* 82214D70h */ case   32:  		/* lwz R9, <#[R10]> */
		/* 82214D70h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D70h case   32:*/		return 0x82214D74;
		  /* 82214D74h */ case   33:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214D74h case   33:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214D74h case   33:*/		return 0x82214D78;
		  /* 82214D78h */ case   34:  		/* stw R9, <#[R10]> */
		/* 82214D78h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D78h case   34:*/		return 0x82214D7C;
		  /* 82214D7Ch */ case   35:  		/* addi R10, R10, 4 */
		/* 82214D7Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D7Ch case   35:*/		return 0x82214D80;
		  /* 82214D80h */ case   36:  		/* lwz R9, <#[R29 + 23360]> */
		/* 82214D80h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214D80h case   36:*/		return 0x82214D84;
		  /* 82214D84h */ case   37:  		/* sth R9, <#[R10 + 2]> */
		/* 82214D84h case   37:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D84h case   37:*/		return 0x82214D88;
		  /* 82214D88h */ case   38:  		/* lwz R9, <#[R10]> */
		/* 82214D88h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D88h case   38:*/		return 0x82214D8C;
		  /* 82214D8Ch */ case   39:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214D8Ch case   39:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214D8Ch case   39:*/		return 0x82214D90;
		  /* 82214D90h */ case   40:  		/* stw R9, <#[R10]> */
		/* 82214D90h case   40:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D90h case   40:*/		return 0x82214D94;
		  /* 82214D94h */ case   41:  		/* addi R10, R10, 4 */
		/* 82214D94h case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214D94h case   41:*/		return 0x82214D98;
		  /* 82214D98h */ case   42:  		/* sth R7, <#[R10 + 2]> */
		/* 82214D98h case   42:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R10 + 0x00000002) );
		/* 82214D98h case   42:*/		return 0x82214D9C;
		  /* 82214D9Ch */ case   43:  		/* lwz R9, <#[R10]> */
		/* 82214D9Ch case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214D9Ch case   43:*/		return 0x82214DA0;
		  /* 82214DA0h */ case   44:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82214DA0h case   44:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82214DA0h case   44:*/		return 0x82214DA4;
		  /* 82214DA4h */ case   45:  		/* stw R9, <#[R10]> */
		/* 82214DA4h case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214DA4h case   45:*/		return 0x82214DA8;
		  /* 82214DA8h */ case   46:  		/* addi R10, R10, 4 */
		/* 82214DA8h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214DA8h case   46:*/		return 0x82214DAC;
		  /* 82214DACh */ case   47:  		/* lwz R9, <#[R29 + 23360]> */
		/* 82214DACh case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214DACh case   47:*/		return 0x82214DB0;
		  /* 82214DB0h */ case   48:  		/* sth R9, <#[R10 + 2]> */
		/* 82214DB0h case   48:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82214DB0h case   48:*/		return 0x82214DB4;
		  /* 82214DB4h */ case   49:  		/* lwz R9, <#[R10]> */
		/* 82214DB4h case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214DB4h case   49:*/		return 0x82214DB8;
		  /* 82214DB8h */ case   50:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214DB8h case   50:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214DB8h case   50:*/		return 0x82214DBC;
		  /* 82214DBCh */ case   51:  		/* stw R9, <#[R10]> */
		/* 82214DBCh case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214DBCh case   51:*/		return 0x82214DC0;
		  /* 82214DC0h */ case   52:  		/* addi R10, R10, 4 */
		/* 82214DC0h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82214DC0h case   52:*/		return 0x82214DC4;
		  /* 82214DC4h */ case   53:  		/* lwz R9, <#[R29 + 23360]> */
		/* 82214DC4h case   53:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B40) );
		/* 82214DC4h case   53:*/		return 0x82214DC8;
		  /* 82214DC8h */ case   54:  		/* addi R3, R10, 4 */
		/* 82214DC8h case   54:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0x4);
		/* 82214DC8h case   54:*/		return 0x82214DCC;
		  /* 82214DCCh */ case   55:  		/* sth R9, <#[R10 + 2]> */
		/* 82214DCCh case   55:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 82214DCCh case   55:*/		return 0x82214DD0;
		  /* 82214DD0h */ case   56:  		/* lwz R9, <#[R10]> */
		/* 82214DD0h case   56:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214DD0h case   56:*/		return 0x82214DD4;
		  /* 82214DD4h */ case   57:  		/* rlwimi R9, R11, 18, 8, 15 */
		/* 82214DD4h case   57:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R11);
		/* 82214DD4h case   57:*/		return 0x82214DD8;
		  /* 82214DD8h */ case   58:  		/* stw R9, <#[R10]> */
		/* 82214DD8h case   58:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82214DD8h case   58:*/		return 0x82214DDC;
		  /* 82214DDCh */ case   59:  		/* addi R1, R1, 112 */
		/* 82214DDCh case   59:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82214DDCh case   59:*/		return 0x82214DE0;
		  /* 82214DE0h */ case   60:  		/* b -1588020 */
		/* 82214DE0h case   60:*/		return 0x820912AC;
		/* 82214DE0h case   60:*/		return 0x82214DE4;
		  /* 82214DE4h */ case   61:  		/* nop */
		/* 82214DE4h case   61:*/		cpu::op::nop();
		/* 82214DE4h case   61:*/		return 0x82214DE8;
	}
	return 0x82214DE8;
} // Block from 82214CF0h-82214DE8h (62 instructions)

//////////////////////////////////////////////////////
// Block at 82214DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214DE8);
		  /* 82214DE8h */ case    0:  		/* mfspr R12, LR */
		/* 82214DE8h case    0:*/		regs.R12 = regs.LR;
		/* 82214DE8h case    0:*/		return 0x82214DEC;
		  /* 82214DECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82214DECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82214DECh case    1:*/		return 0x82214DF0;
		  /* 82214DF0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82214DF0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82214DF0h case    2:*/		return 0x82214DF4;
		  /* 82214DF4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82214DF4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82214DF4h case    3:*/		return 0x82214DF8;
		  /* 82214DF8h */ case    4:  		/* li R11, 113 */
		/* 82214DF8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x71);
		/* 82214DF8h case    4:*/		return 0x82214DFC;
		  /* 82214DFCh */ case    5:  		/* lwz R9, <#[R3 + 28]> */
		/* 82214DFCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000001C) );
		/* 82214DFCh case    5:*/		return 0x82214E00;
		  /* 82214E00h */ case    6:  		/* lhz R10, <#[R4]> */
		/* 82214E00h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82214E00h case    6:*/		return 0x82214E04;
		  /* 82214E04h */ case    7:  		/* li R8, 1 */
		/* 82214E04h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82214E04h case    7:*/		return 0x82214E08;
		  /* 82214E08h */ case    8:  		/* sth R11, <#[R5 + 2]> */
		/* 82214E08h case    8:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R5 + 0x00000002) );
		/* 82214E08h case    8:*/		return 0x82214E0C;
		  /* 82214E0Ch */ case    9:  		/* addi R11, R5, 4 */
		/* 82214E0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x4);
		/* 82214E0Ch case    9:*/		return 0x82214E10;
		  /* 82214E10h */ case   10:  		/* lwz R7, <#[R5]> */
		/* 82214E10h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000000) );
		/* 82214E10h case   10:*/		return 0x82214E14;
		  /* 82214E14h */ case   11:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 82214E14h case   11:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 82214E14h case   11:*/		return 0x82214E18;
		  /* 82214E18h */ case   12:  		/* stw R7, <#[R5]> */
		/* 82214E18h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R5 + 0x00000000) );
		/* 82214E18h case   12:*/		return 0x82214E1C;
		  /* 82214E1Ch */ case   13:  		/* addi R11, R11, 4 */
		/* 82214E1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214E1Ch case   13:*/		return 0x82214E20;
		  /* 82214E20h */ case   14:  		/* lwz R7, <#[R9 + 23360]> */
		/* 82214E20h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00005B40) );
		/* 82214E20h case   14:*/		return 0x82214E24;
		  /* 82214E24h */ case   15:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82214E24h case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82214E24h case   15:*/		return 0x82214E28;
		  /* 82214E28h */ case   16:  		/* sth R7, <#[R5 + 6]> */
		/* 82214E28h case   16:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R5 + 0x00000006) );
		/* 82214E28h case   16:*/		return 0x82214E2C;
		  /* 82214E2Ch */ case   17:  		/* li R7, 17 */
		/* 82214E2Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x11);
		/* 82214E2Ch case   17:*/		return 0x82214E30;
		  /* 82214E30h */ case   18:  		/* lwz R6, <#[R5 + 4]> */
		/* 82214E30h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + 0x00000004) );
		/* 82214E30h case   18:*/		return 0x82214E34;
		  /* 82214E34h */ case   19:  		/* rlwimi R6, R8, 18, 8, 15 */
		/* 82214E34h case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R8);
		/* 82214E34h case   19:*/		return 0x82214E38;
		  /* 82214E38h */ case   20:  		/* stw R6, <#[R5 + 4]> */
		/* 82214E38h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000004) );
		/* 82214E38h case   20:*/		return 0x82214E3C;
		  /* 82214E3Ch */ case   21:  		/* cmplwi CR6, R10, 1 */
		/* 82214E3Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82214E3Ch case   21:*/		return 0x82214E40;
		  /* 82214E40h */ case   22:  		/* lwz R9, <#[R9 + 23364]> */
		/* 82214E40h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00005B44) );
		/* 82214E40h case   22:*/		return 0x82214E44;
		  /* 82214E44h */ case   23:  		/* addi R31, R11, 4 */
		/* 82214E44h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82214E44h case   23:*/		return 0x82214E48;
		  /* 82214E48h */ case   24:  		/* sth R9, <#[R11 + 2]> */
		/* 82214E48h case   24:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82214E48h case   24:*/		return 0x82214E4C;
		  /* 82214E4Ch */ case   25:  		/* lwz R9, <#[R11]> */
		/* 82214E4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214E4Ch case   25:*/		return 0x82214E50;
		  /* 82214E50h */ case   26:  		/* rlwimi R9, R7, 18, 8, 15 */
		/* 82214E50h case   26:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R7);
		/* 82214E50h case   26:*/		return 0x82214E54;
		  /* 82214E54h */ case   27:  		/* stw R9, <#[R11]> */
		/* 82214E54h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82214E54h case   27:*/		return 0x82214E58;
		  /* 82214E58h */ case   28:  		/* bc 12, CR6_EQ, 64 */
		/* 82214E58h case   28:*/		if ( regs.CR[6].eq ) { return 0x82214E98;  }
		/* 82214E58h case   28:*/		return 0x82214E5C;
		  /* 82214E5Ch */ case   29:  		/* cmplwi CR6, R10, 2 */
		/* 82214E5Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 82214E5Ch case   29:*/		return 0x82214E60;
		  /* 82214E60h */ case   30:  		/* bc 12, CR6_EQ, 148 */
		/* 82214E60h case   30:*/		if ( regs.CR[6].eq ) { return 0x82214EF4;  }
		/* 82214E60h case   30:*/		return 0x82214E64;
		  /* 82214E64h */ case   31:  		/* cmplwi CR6, R10, 3 */
		/* 82214E64h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 82214E64h case   31:*/		return 0x82214E68;
		  /* 82214E68h */ case   32:  		/* bc 12, CR6_EQ, 132 */
		/* 82214E68h case   32:*/		if ( regs.CR[6].eq ) { return 0x82214EEC;  }
		/* 82214E68h case   32:*/		return 0x82214E6C;
		  /* 82214E6Ch */ case   33:  		/* cmplwi CR6, R10, 4 */
		/* 82214E6Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82214E6Ch case   33:*/		return 0x82214E70;
		  /* 82214E70h */ case   34:  		/* bc 12, CR6_EQ, 116 */
		/* 82214E70h case   34:*/		if ( regs.CR[6].eq ) { return 0x82214EE4;  }
		/* 82214E70h case   34:*/		return 0x82214E74;
		  /* 82214E74h */ case   35:  		/* lis R11, -32252 */
		/* 82214E74h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82214E74h case   35:*/		return 0x82214E78;
		  /* 82214E78h */ case   36:  		/* lis R10, -32252 */
		/* 82214E78h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82214E78h case   36:*/		return 0x82214E7C;
		  /* 82214E7Ch */ case   37:  		/* lis R9, -32253 */
		/* 82214E7Ch case   37:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82214E7Ch case   37:*/		return 0x82214E80;
		  /* 82214E80h */ case   38:  		/* addi R6, R11, -7312 */
		/* 82214E80h case   38:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 82214E80h case   38:*/		return 0x82214E84;
		  /* 82214E84h */ case   39:  		/* addi R5, R10, -25364 */
		/* 82214E84h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 82214E84h case   39:*/		return 0x82214E88;
		  /* 82214E88h */ case   40:  		/* addi R4, R9, 27460 */
		/* 82214E88h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82214E88h case   40:*/		return 0x82214E8C;
		  /* 82214E8Ch */ case   41:  		/* li R7, 8374 */
		/* 82214E8Ch case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x20B6);
		/* 82214E8Ch case   41:*/		return 0x82214E90;
		  /* 82214E90h */ case   42:  		/* li R3, 0 */
		/* 82214E90h case   42:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82214E90h case   42:*/		return 0x82214E94;
		  /* 82214E94h */ case   43:  		/* bl -774796 */
		/* 82214E94h case   43:*/		regs.LR = 0x82214E98; return 0x82157C08;
		/* 82214E94h case   43:*/		return 0x82214E98;
	}
	return 0x82214E98;
} // Block from 82214DE8h-82214E98h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82214E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214E98);
		  /* 82214E98h */ case    0:  		/* li R11, 0 */
		/* 82214E98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82214E98h case    0:*/		return 0x82214E9C;
		  /* 82214E9Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82214E9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82214E9Ch case    1:*/		return 0x82214EA0;
		  /* 82214EA0h */ case    2:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 82214EA0h case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 82214EA0h case    2:*/		return 0x82214EA4;
		  /* 82214EA4h */ case    3:  		/* addi R3, R31, 4 */
		/* 82214EA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82214EA4h case    3:*/		return 0x82214EA8;
		  /* 82214EA8h */ case    4:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 82214EA8h case    4:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 82214EA8h case    4:*/		return 0x82214EAC;
		  /* 82214EACh */ case    5:  		/* mr R8, R9 */
		/* 82214EACh case    5:*/		regs.R8 = regs.R9;
		/* 82214EACh case    5:*/		return 0x82214EB0;
		  /* 82214EB0h */ case    6:  		/* or R10, R10, R9 */
		/* 82214EB0h case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82214EB0h case    6:*/		return 0x82214EB4;
		  /* 82214EB4h */ case    7:  		/* rlwimi R8, R11, 4, 25, 27 */
		/* 82214EB4h case    7:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R8,regs.R11);
		/* 82214EB4h case    7:*/		return 0x82214EB8;
		  /* 82214EB8h */ case    8:  		/* rlwinm R10, R10, 0, 28, 24 */
		/* 82214EB8h case    8:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R10,regs.R10);
		/* 82214EB8h case    8:*/		return 0x82214EBC;
		  /* 82214EBCh */ case    9:  		/* rlwinm R9, R8, 4, 0, 27 */
		/* 82214EBCh case    9:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R9,regs.R8);
		/* 82214EBCh case    9:*/		return 0x82214EC0;
		  /* 82214EC0h */ case   10:  		/* rlwinm R10, R10, 0, 24, 20 */
		/* 82214EC0h case   10:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R10,regs.R10);
		/* 82214EC0h case   10:*/		return 0x82214EC4;
		  /* 82214EC4h */ case   11:  		/* or R10, R9, R10 */
		/* 82214EC4h case   11:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82214EC4h case   11:*/		return 0x82214EC8;
		  /* 82214EC8h */ case   12:  		/* rlwimi R10, R11, 12, 17, 19 */
		/* 82214EC8h case   12:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R10,regs.R11);
		/* 82214EC8h case   12:*/		return 0x82214ECC;
		  /* 82214ECCh */ case   13:  		/* stw R10, <#[R31]> */
		/* 82214ECCh case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82214ECCh case   13:*/		return 0x82214ED0;
		  /* 82214ED0h */ case   14:  		/* addi R1, R1, 96 */
		/* 82214ED0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82214ED0h case   14:*/		return 0x82214ED4;
		  /* 82214ED4h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 82214ED4h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82214ED4h case   15:*/		return 0x82214ED8;
		  /* 82214ED8h */ case   16:  		/* mtspr LR, R12 */
		/* 82214ED8h case   16:*/		regs.LR = regs.R12;
		/* 82214ED8h case   16:*/		return 0x82214EDC;
		  /* 82214EDCh */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 82214EDCh case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82214EDCh case   17:*/		return 0x82214EE0;
		  /* 82214EE0h */ case   18:  		/* bclr 20, CR0_LT */
		/* 82214EE0h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82214EE0h case   18:*/		return 0x82214EE4;
	}
	return 0x82214EE4;
} // Block from 82214E98h-82214EE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82214EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214EE4);
		  /* 82214EE4h */ case    0:  		/* li R11, 3 */
		/* 82214EE4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82214EE4h case    0:*/		return 0x82214EE8;
		  /* 82214EE8h */ case    1:  		/* b -76 */
		/* 82214EE8h case    1:*/		return 0x82214E9C;
		/* 82214EE8h case    1:*/		return 0x82214EEC;
	}
	return 0x82214EEC;
} // Block from 82214EE4h-82214EECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82214EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214EEC);
		  /* 82214EECh */ case    0:  		/* li R11, 2 */
		/* 82214EECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82214EECh case    0:*/		return 0x82214EF0;
		  /* 82214EF0h */ case    1:  		/* b -84 */
		/* 82214EF0h case    1:*/		return 0x82214E9C;
		/* 82214EF0h case    1:*/		return 0x82214EF4;
	}
	return 0x82214EF4;
} // Block from 82214EECh-82214EF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82214EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214EF4);
		  /* 82214EF4h */ case    0:  		/* li R11, 1 */
		/* 82214EF4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82214EF4h case    0:*/		return 0x82214EF8;
		  /* 82214EF8h */ case    1:  		/* b -92 */
		/* 82214EF8h case    1:*/		return 0x82214E9C;
		/* 82214EF8h case    1:*/		return 0x82214EFC;
		  /* 82214EFCh */ case    2:  		/* nop */
		/* 82214EFCh case    2:*/		cpu::op::nop();
		/* 82214EFCh case    2:*/		return 0x82214F00;
	}
	return 0x82214F00;
} // Block from 82214EF4h-82214F00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82214F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214F00);
		  /* 82214F00h */ case    0:  		/* mfspr R12, LR */
		/* 82214F00h case    0:*/		regs.R12 = regs.LR;
		/* 82214F00h case    0:*/		return 0x82214F04;
		  /* 82214F04h */ case    1:  		/* bl -1588392 */
		/* 82214F04h case    1:*/		regs.LR = 0x82214F08; return 0x8209125C;
		/* 82214F04h case    1:*/		return 0x82214F08;
		  /* 82214F08h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82214F08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82214F08h case    2:*/		return 0x82214F0C;
		  /* 82214F0Ch */ case    3:  		/* mr R31, R4 */
		/* 82214F0Ch case    3:*/		regs.R31 = regs.R4;
		/* 82214F0Ch case    3:*/		return 0x82214F10;
		  /* 82214F10h */ case    4:  		/* mr R30, R5 */
		/* 82214F10h case    4:*/		regs.R30 = regs.R5;
		/* 82214F10h case    4:*/		return 0x82214F14;
		  /* 82214F14h */ case    5:  		/* mr R29, R6 */
		/* 82214F14h case    5:*/		regs.R29 = regs.R6;
		/* 82214F14h case    5:*/		return 0x82214F18;
		  /* 82214F18h */ case    6:  		/* bl -23792 */
		/* 82214F18h case    6:*/		regs.LR = 0x82214F1C; return 0x8220F228;
		/* 82214F18h case    6:*/		return 0x82214F1C;
		  /* 82214F1Ch */ case    7:  		/* li R11, 107 */
		/* 82214F1Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x6B);
		/* 82214F1Ch case    7:*/		return 0x82214F20;
		  /* 82214F20h */ case    8:  		/* li R9, 1 */
		/* 82214F20h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82214F20h case    8:*/		return 0x82214F24;
		  /* 82214F24h */ case    9:  		/* sth R11, <#[R29 + 2]> */
		/* 82214F24h case    9:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 82214F24h case    9:*/		return 0x82214F28;
		  /* 82214F28h */ case   10:  		/* addi R11, R29, 4 */
		/* 82214F28h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82214F28h case   10:*/		return 0x82214F2C;
		  /* 82214F2Ch */ case   11:  		/* lwz R10, <#[R29]> */
		/* 82214F2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82214F2Ch case   11:*/		return 0x82214F30;
		  /* 82214F30h */ case   12:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82214F30h case   12:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82214F30h case   12:*/		return 0x82214F34;
		  /* 82214F34h */ case   13:  		/* stw R10, <#[R29]> */
		/* 82214F34h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82214F34h case   13:*/		return 0x82214F38;
		  /* 82214F38h */ case   14:  		/* addi R11, R11, 4 */
		/* 82214F38h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214F38h case   14:*/		return 0x82214F3C;
		  /* 82214F3Ch */ case   15:  		/* lwz R10, <#[R31 + 76]> */
		/* 82214F3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 82214F3Ch case   15:*/		return 0x82214F40;
		  /* 82214F40h */ case   16:  		/* sth R10, <#[R29 + 6]> */
		/* 82214F40h case   16:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R29 + 0x00000006) );
		/* 82214F40h case   16:*/		return 0x82214F44;
		  /* 82214F44h */ case   17:  		/* lwz R10, <#[R29 + 4]> */
		/* 82214F44h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82214F44h case   17:*/		return 0x82214F48;
		  /* 82214F48h */ case   18:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 82214F48h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 82214F48h case   18:*/		return 0x82214F4C;
		  /* 82214F4Ch */ case   19:  		/* stw R10, <#[R29 + 4]> */
		/* 82214F4Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82214F4Ch case   19:*/		return 0x82214F50;
		  /* 82214F50h */ case   20:  		/* lwz R10, <#[R30 + 16]> */
		/* 82214F50h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82214F50h case   20:*/		return 0x82214F54;
		  /* 82214F54h */ case   21:  		/* sth R10, <#[R11 + 2]> */
		/* 82214F54h case   21:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82214F54h case   21:*/		return 0x82214F58;
		  /* 82214F58h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 82214F58h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214F58h case   22:*/		return 0x82214F5C;
		  /* 82214F5Ch */ case   23:  		/* lwz R8, <#[R30 + 16]> */
		/* 82214F5Ch case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 82214F5Ch case   23:*/		return 0x82214F60;
		  /* 82214F60h */ case   24:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82214F60h case   24:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82214F60h case   24:*/		return 0x82214F64;
		  /* 82214F64h */ case   25:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82214F64h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82214F64h case   25:*/		return 0x82214F68;
		  /* 82214F68h */ case   26:  		/* stw R8, <#[R11]> */
		/* 82214F68h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214F68h case   26:*/		return 0x82214F6C;
		  /* 82214F6Ch */ case   27:  		/* lwz R8, <#[R30 + 16]> */
		/* 82214F6Ch case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 82214F6Ch case   27:*/		return 0x82214F70;
		  /* 82214F70h */ case   28:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82214F70h case   28:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82214F70h case   28:*/		return 0x82214F74;
		  /* 82214F74h */ case   29:  		/* oris R10, R8, 64 */
		/* 82214F74h case   29:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 82214F74h case   29:*/		return 0x82214F78;
		  /* 82214F78h */ case   30:  		/* stw R10, <#[R11]> */
		/* 82214F78h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214F78h case   30:*/		return 0x82214F7C;
		  /* 82214F7Ch */ case   31:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82214F7Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82214F7Ch case   31:*/		return 0x82214F80;
		  /* 82214F80h */ case   32:  		/* lwz R8, <#[R30 + 28]> */
		/* 82214F80h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214F80h case   32:*/		return 0x82214F84;
		  /* 82214F84h */ case   33:  		/* rlwimi R10, R8, 24, 29, 31 */
		/* 82214F84h case   33:*/		cpu::op::rlwimi<0,24,29,31>(regs,&regs.R10,regs.R8);
		/* 82214F84h case   33:*/		return 0x82214F88;
		  /* 82214F88h */ case   34:  		/* stw R10, <#[R11]> */
		/* 82214F88h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214F88h case   34:*/		return 0x82214F8C;
		  /* 82214F8Ch */ case   35:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214F8Ch case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214F8Ch case   35:*/		return 0x82214F90;
		  /* 82214F90h */ case   36:  		/* lwz R8, <#[R30 + 28]> */
		/* 82214F90h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214F90h case   36:*/		return 0x82214F94;
		  /* 82214F94h */ case   37:  		/* rlwimi R10, R8, 28, 25, 27 */
		/* 82214F94h case   37:*/		cpu::op::rlwimi<0,28,25,27>(regs,&regs.R10,regs.R8);
		/* 82214F94h case   37:*/		return 0x82214F98;
		  /* 82214F98h */ case   38:  		/* stw R10, <#[R11]> */
		/* 82214F98h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214F98h case   38:*/		return 0x82214F9C;
		  /* 82214F9Ch */ case   39:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214F9Ch case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214F9Ch case   39:*/		return 0x82214FA0;
		  /* 82214FA0h */ case   40:  		/* lwz R8, <#[R30 + 28]> */
		/* 82214FA0h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214FA0h case   40:*/		return 0x82214FA4;
		  /* 82214FA4h */ case   41:  		/* rlwimi R10, R8, 8, 21, 23 */
		/* 82214FA4h case   41:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R10,regs.R8);
		/* 82214FA4h case   41:*/		return 0x82214FA8;
		  /* 82214FA8h */ case   42:  		/* stw R10, <#[R11]> */
		/* 82214FA8h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214FA8h case   42:*/		return 0x82214FAC;
		  /* 82214FACh */ case   43:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82214FACh case   43:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82214FACh case   43:*/		return 0x82214FB0;
		  /* 82214FB0h */ case   44:  		/* lwz R8, <#[R30 + 28]> */
		/* 82214FB0h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82214FB0h case   44:*/		return 0x82214FB4;
		  /* 82214FB4h */ case   45:  		/* rlwimi R10, R8, 8, 17, 19 */
		/* 82214FB4h case   45:*/		cpu::op::rlwimi<0,8,17,19>(regs,&regs.R10,regs.R8);
		/* 82214FB4h case   45:*/		return 0x82214FB8;
		  /* 82214FB8h */ case   46:  		/* stw R10, <#[R11]> */
		/* 82214FB8h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214FB8h case   46:*/		return 0x82214FBC;
		  /* 82214FBCh */ case   47:  		/* addi R11, R11, 4 */
		/* 82214FBCh case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214FBCh case   47:*/		return 0x82214FC0;
		  /* 82214FC0h */ case   48:  		/* lwz R10, <#[R30 + 4]> */
		/* 82214FC0h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82214FC0h case   48:*/		return 0x82214FC4;
		  /* 82214FC4h */ case   49:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82214FC4h case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82214FC4h case   49:*/		return 0x82214FC8;
		  /* 82214FC8h */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 82214FC8h case   50:*/		if ( regs.CR[0].eq ) { return 0x82214FD8;  }
		/* 82214FC8h case   50:*/		return 0x82214FCC;
		  /* 82214FCCh */ case   51:  		/* lwz R10, <#[R30 + 12]> */
		/* 82214FCCh case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82214FCCh case   51:*/		return 0x82214FD0;
		  /* 82214FD0h */ case   52:  		/* stw R10, <#[R11]> */
		/* 82214FD0h case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214FD0h case   52:*/		return 0x82214FD4;
		  /* 82214FD4h */ case   53:  		/* addi R11, R11, 4 */
		/* 82214FD4h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82214FD4h case   53:*/		return 0x82214FD8;
	}
	return 0x82214FD8;
} // Block from 82214F00h-82214FD8h (54 instructions)

//////////////////////////////////////////////////////
// Block at 82214FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82214FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82214FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82214FD8);
		  /* 82214FD8h */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 82214FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82214FD8h case    0:*/		return 0x82214FDC;
		  /* 82214FDCh */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 82214FDCh case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82214FDCh case    1:*/		return 0x82214FE0;
		  /* 82214FE0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82214FE0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82214FE0h case    2:*/		return 0x82214FE4;
		  /* 82214FE4h */ case    3:  		/* lwz R8, <#[R30 + 16]> */
		/* 82214FE4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 82214FE4h case    3:*/		return 0x82214FE8;
		  /* 82214FE8h */ case    4:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82214FE8h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82214FE8h case    4:*/		return 0x82214FEC;
		  /* 82214FECh */ case    5:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82214FECh case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82214FECh case    5:*/		return 0x82214FF0;
		  /* 82214FF0h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82214FF0h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82214FF0h case    6:*/		return 0x82214FF4;
		  /* 82214FF4h */ case    7:  		/* lwz R8, <#[R30 + 16]> */
		/* 82214FF4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 82214FF4h case    7:*/		return 0x82214FF8;
		  /* 82214FF8h */ case    8:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82214FF8h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82214FF8h case    8:*/		return 0x82214FFC;
		  /* 82214FFCh */ case    9:  		/* oris R10, R8, 64 */
		/* 82214FFCh case    9:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 82214FFCh case    9:*/		return 0x82215000;
		  /* 82215000h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82215000h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215000h case   10:*/		return 0x82215004;
		  /* 82215004h */ case   11:  		/* lwz R8, <#[R30 + 28]> */
		/* 82215004h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82215004h case   11:*/		return 0x82215008;
		  /* 82215008h */ case   12:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82215008h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215008h case   12:*/		return 0x8221500C;
		  /* 8221500Ch */ case   13:  		/* rlwimi R10, R8, 28, 29, 31 */
		/* 8221500Ch case   13:*/		cpu::op::rlwimi<0,28,29,31>(regs,&regs.R10,regs.R8);
		/* 8221500Ch case   13:*/		return 0x82215010;
		  /* 82215010h */ case   14:  		/* stw R10, <#[R11]> */
		/* 82215010h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215010h case   14:*/		return 0x82215014;
		  /* 82215014h */ case   15:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82215014h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82215014h case   15:*/		return 0x82215018;
		  /* 82215018h */ case   16:  		/* lwz R8, <#[R30 + 28]> */
		/* 82215018h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82215018h case   16:*/		return 0x8221501C;
		  /* 8221501Ch */ case   17:  		/* rlwimi R10, R8, 4, 25, 27 */
		/* 8221501Ch case   17:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R10,regs.R8);
		/* 8221501Ch case   17:*/		return 0x82215020;
		  /* 82215020h */ case   18:  		/* stw R10, <#[R11]> */
		/* 82215020h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215020h case   18:*/		return 0x82215024;
		  /* 82215024h */ case   19:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82215024h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82215024h case   19:*/		return 0x82215028;
		  /* 82215028h */ case   20:  		/* lwz R8, <#[R30 + 28]> */
		/* 82215028h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82215028h case   20:*/		return 0x8221502C;
		  /* 8221502Ch */ case   21:  		/* rlwimi R8, R10, 0, 24, 20 */
		/* 8221502Ch case   21:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R10);
		/* 8221502Ch case   21:*/		return 0x82215030;
		  /* 82215030h */ case   22:  		/* stw R8, <#[R11]> */
		/* 82215030h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215030h case   22:*/		return 0x82215034;
		  /* 82215034h */ case   23:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215034h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215034h case   23:*/		return 0x82215038;
		  /* 82215038h */ case   24:  		/* lwz R8, <#[R30 + 28]> */
		/* 82215038h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 82215038h case   24:*/		return 0x8221503C;
		  /* 8221503Ch */ case   25:  		/* rlwimi R10, R8, 4, 17, 19 */
		/* 8221503Ch case   25:*/		cpu::op::rlwimi<0,4,17,19>(regs,&regs.R10,regs.R8);
		/* 8221503Ch case   25:*/		return 0x82215040;
		  /* 82215040h */ case   26:  		/* stw R10, <#[R11]> */
		/* 82215040h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215040h case   26:*/		return 0x82215044;
		  /* 82215044h */ case   27:  		/* addi R11, R11, 4 */
		/* 82215044h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215044h case   27:*/		return 0x82215048;
		  /* 82215048h */ case   28:  		/* lwz R10, <#[R30 + 4]> */
		/* 82215048h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82215048h case   28:*/		return 0x8221504C;
		  /* 8221504Ch */ case   29:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 8221504Ch case   29:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 8221504Ch case   29:*/		return 0x82215050;
		  /* 82215050h */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 82215050h case   30:*/		if ( regs.CR[0].eq ) { return 0x82215060;  }
		/* 82215050h case   30:*/		return 0x82215054;
		  /* 82215054h */ case   31:  		/* lwz R10, <#[R30 + 12]> */
		/* 82215054h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82215054h case   31:*/		return 0x82215058;
		  /* 82215058h */ case   32:  		/* stw R10, <#[R11]> */
		/* 82215058h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215058h case   32:*/		return 0x8221505C;
		  /* 8221505Ch */ case   33:  		/* addi R11, R11, 4 */
		/* 8221505Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221505Ch case   33:*/		return 0x82215060;
	}
	return 0x82215060;
} // Block from 82214FD8h-82215060h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82215060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215060);
		  /* 82215060h */ case    0:  		/* li R10, 81 */
		/* 82215060h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x51);
		/* 82215060h case    0:*/		return 0x82215064;
		  /* 82215064h */ case    1:  		/* rlwinm R7, R3, 0, 16, 31 */
		/* 82215064h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R3);
		/* 82215064h case    1:*/		return 0x82215068;
		  /* 82215068h */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 82215068h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82215068h case    2:*/		return 0x8221506C;
		  /* 8221506Ch */ case    3:  		/* li R10, 17 */
		/* 8221506Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x11);
		/* 8221506Ch case    3:*/		return 0x82215070;
		  /* 82215070h */ case    4:  		/* lwz R8, <#[R11]> */
		/* 82215070h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215070h case    4:*/		return 0x82215074;
		  /* 82215074h */ case    5:  		/* rlwimi R8, R9, 17, 3, 15 */
		/* 82215074h case    5:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R8,regs.R9);
		/* 82215074h case    5:*/		return 0x82215078;
		  /* 82215078h */ case    6:  		/* stw R8, <#[R11]> */
		/* 82215078h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215078h case    6:*/		return 0x8221507C;
		  /* 8221507Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 8221507Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221507Ch case    7:*/		return 0x82215080;
		  /* 82215080h */ case    8:  		/* li R6, 16 */
		/* 82215080h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82215080h case    8:*/		return 0x82215084;
		  /* 82215084h */ case    9:  		/* li R12, -21846 */
		/* 82215084h case    9:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 82215084h case    9:*/		return 0x82215088;
		  /* 82215088h */ case   10:  		/* li R5, 64 */
		/* 82215088h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 82215088h case   10:*/		return 0x8221508C;
		  /* 8221508Ch */ case   11:  		/* li R4, 5 */
		/* 8221508Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8221508Ch case   11:*/		return 0x82215090;
		  /* 82215090h */ case   12:  		/* sth R7, <#[R11 + 2]> */
		/* 82215090h case   12:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215090h case   12:*/		return 0x82215094;
		  /* 82215094h */ case   13:  		/* li R3, 3 */
		/* 82215094h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82215094h case   13:*/		return 0x82215098;
		  /* 82215098h */ case   14:  		/* li R8, 65 */
		/* 82215098h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82215098h case   14:*/		return 0x8221509C;
		  /* 8221509Ch */ case   15:  		/* lwz R30, <#[R11]> */
		/* 8221509Ch case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8221509Ch case   15:*/		return 0x822150A0;
		  /* 822150A0h */ case   16:  		/* rlwimi R30, R10, 18, 8, 15 */
		/* 822150A0h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R30,regs.R10);
		/* 822150A0h case   16:*/		return 0x822150A4;
		  /* 822150A4h */ case   17:  		/* stw R30, <#[R11]> */
		/* 822150A4h case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 822150A4h case   17:*/		return 0x822150A8;
		  /* 822150A8h */ case   18:  		/* stwu R6, <#[R11 + 4]> */
		/* 822150A8h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822150A8h case   18:*/		return 0x822150AC;
		  /* 822150ACh */ case   19:  		/* lwz R6, <#[R31 + 76]> */
		/* 822150ACh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000004C) );
		/* 822150ACh case   19:*/		return 0x822150B0;
		  /* 822150B0h */ case   20:  		/* addi R11, R11, 4 */
		/* 822150B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822150B0h case   20:*/		return 0x822150B4;
		  /* 822150B4h */ case   21:  		/* sth R6, <#[R11 + 2]> */
		/* 822150B4h case   21:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822150B4h case   21:*/		return 0x822150B8;
		  /* 822150B8h */ case   22:  		/* lwz R6, <#[R11]> */
		/* 822150B8h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150B8h case   22:*/		return 0x822150BC;
		  /* 822150BCh */ case   23:  		/* rlwimi R6, R10, 18, 8, 15 */
		/* 822150BCh case   23:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R10);
		/* 822150BCh case   23:*/		return 0x822150C0;
		  /* 822150C0h */ case   24:  		/* stw R6, <#[R11]> */
		/* 822150C0h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150C0h case   24:*/		return 0x822150C4;
		  /* 822150C4h */ case   25:  		/* lwzu R6, <#[R11 + 4]> */
		/* 822150C4h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822150C4h case   25:*/		return 0x822150C8;
		  /* 822150C8h */ case   26:  		/* and R6, R6, R12 */
		/* 822150C8h case   26:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 822150C8h case   26:*/		return 0x822150CC;
		  /* 822150CCh */ case   27:  		/* oris R6, R6, 16 */
		/* 822150CCh case   27:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x10);
		/* 822150CCh case   27:*/		return 0x822150D0;
		  /* 822150D0h */ case   28:  		/* ori R6, R6, 8738 */
		/* 822150D0h case   28:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2222);
		/* 822150D0h case   28:*/		return 0x822150D4;
		  /* 822150D4h */ case   29:  		/* stw R6, <#[R11]> */
		/* 822150D4h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150D4h case   29:*/		return 0x822150D8;
		  /* 822150D8h */ case   30:  		/* addi R11, R11, 4 */
		/* 822150D8h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822150D8h case   30:*/		return 0x822150DC;
		  /* 822150DCh */ case   31:  		/* sth R5, <#[R11 + 2]> */
		/* 822150DCh case   31:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 822150DCh case   31:*/		return 0x822150E0;
		  /* 822150E0h */ case   32:  		/* lwz R6, <#[R11]> */
		/* 822150E0h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150E0h case   32:*/		return 0x822150E4;
		  /* 822150E4h */ case   33:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 822150E4h case   33:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 822150E4h case   33:*/		return 0x822150E8;
		  /* 822150E8h */ case   34:  		/* stw R6, <#[R11]> */
		/* 822150E8h case   34:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150E8h case   34:*/		return 0x822150EC;
		  /* 822150ECh */ case   35:  		/* addi R11, R11, 4 */
		/* 822150ECh case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822150ECh case   35:*/		return 0x822150F0;
		  /* 822150F0h */ case   36:  		/* lwz R6, <#[R31 + 76]> */
		/* 822150F0h case   36:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000004C) );
		/* 822150F0h case   36:*/		return 0x822150F4;
		  /* 822150F4h */ case   37:  		/* sth R6, <#[R11 + 2]> */
		/* 822150F4h case   37:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822150F4h case   37:*/		return 0x822150F8;
		  /* 822150F8h */ case   38:  		/* lwz R6, <#[R11]> */
		/* 822150F8h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822150F8h case   38:*/		return 0x822150FC;
		  /* 822150FCh */ case   39:  		/* rlwimi R6, R10, 18, 8, 15 */
		/* 822150FCh case   39:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R10);
		/* 822150FCh case   39:*/		return 0x82215100;
		  /* 82215100h */ case   40:  		/* stw R6, <#[R11]> */
		/* 82215100h case   40:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82215100h case   40:*/		return 0x82215104;
		  /* 82215104h */ case   41:  		/* stwu R4, <#[R11 + 4]> */
		/* 82215104h case   41:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215104h case   41:*/		return 0x82215108;
		  /* 82215108h */ case   42:  		/* lwz R6, <#[R31 + 76]> */
		/* 82215108h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000004C) );
		/* 82215108h case   42:*/		return 0x8221510C;
		  /* 8221510Ch */ case   43:  		/* addi R11, R11, 4 */
		/* 8221510Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221510Ch case   43:*/		return 0x82215110;
		  /* 82215110h */ case   44:  		/* sth R6, <#[R11 + 2]> */
		/* 82215110h case   44:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82215110h case   44:*/		return 0x82215114;
		  /* 82215114h */ case   45:  		/* lwz R6, <#[R11]> */
		/* 82215114h case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82215114h case   45:*/		return 0x82215118;
		  /* 82215118h */ case   46:  		/* rlwimi R6, R9, 18, 8, 15 */
		/* 82215118h case   46:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R9);
		/* 82215118h case   46:*/		return 0x8221511C;
		  /* 8221511Ch */ case   47:  		/* stw R6, <#[R11]> */
		/* 8221511Ch case   47:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221511Ch case   47:*/		return 0x82215120;
		  /* 82215120h */ case   48:  		/* addi R11, R11, 4 */
		/* 82215120h case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215120h case   48:*/		return 0x82215124;
		  /* 82215124h */ case   49:  		/* sth R7, <#[R11 + 2]> */
		/* 82215124h case   49:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215124h case   49:*/		return 0x82215128;
		  /* 82215128h */ case   50:  		/* lwz R7, <#[R11]> */
		/* 82215128h case   50:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215128h case   50:*/		return 0x8221512C;
		  /* 8221512Ch */ case   51:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 8221512Ch case   51:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 8221512Ch case   51:*/		return 0x82215130;
		  /* 82215130h */ case   52:  		/* stw R7, <#[R11]> */
		/* 82215130h case   52:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215130h case   52:*/		return 0x82215134;
		  /* 82215134h */ case   53:  		/* lwzu R7, <#[R11 + 4]> */
		/* 82215134h case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215134h case   53:*/		return 0x82215138;
		  /* 82215138h */ case   54:  		/* and R7, R7, R12 */
		/* 82215138h case   54:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 82215138h case   54:*/		return 0x8221513C;
		  /* 8221513Ch */ case   55:  		/* ori R7, R7, 8738 */
		/* 8221513Ch case   55:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2222);
		/* 8221513Ch case   55:*/		return 0x82215140;
		  /* 82215140h */ case   56:  		/* li R12, -17477 */
		/* 82215140h case   56:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82215140h case   56:*/		return 0x82215144;
		  /* 82215144h */ case   57:  		/* stw R7, <#[R11]> */
		/* 82215144h case   57:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215144h case   57:*/		return 0x82215148;
		  /* 82215148h */ case   58:  		/* addi R11, R11, 4 */
		/* 82215148h case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215148h case   58:*/		return 0x8221514C;
		  /* 8221514Ch */ case   59:  		/* sth R3, <#[R11 + 2]> */
		/* 8221514Ch case   59:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 8221514Ch case   59:*/		return 0x82215150;
		  /* 82215150h */ case   60:  		/* lwz R7, <#[R11]> */
		/* 82215150h case   60:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215150h case   60:*/		return 0x82215154;
		  /* 82215154h */ case   61:  		/* rlwimi R7, R8, 16, 8, 15 */
		/* 82215154h case   61:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R8);
		/* 82215154h case   61:*/		return 0x82215158;
		  /* 82215158h */ case   62:  		/* stw R7, <#[R11]> */
		/* 82215158h case   62:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215158h case   62:*/		return 0x8221515C;
		  /* 8221515Ch */ case   63:  		/* stb R9, <#[R11]> */
		/* 8221515Ch case   63:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221515Ch case   63:*/		return 0x82215160;
		  /* 82215160h */ case   64:  		/* lwzu R7, <#[R11 + 4]> */
		/* 82215160h case   64:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215160h case   64:*/		return 0x82215164;
		  /* 82215164h */ case   65:  		/* and R7, R7, R12 */
		/* 82215164h case   65:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 82215164h case   65:*/		return 0x82215168;
		  /* 82215168h */ case   66:  		/* ori R7, R7, 13107 */
		/* 82215168h case   66:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x3333);
		/* 82215168h case   66:*/		return 0x8221516C;
		  /* 8221516Ch */ case   67:  		/* stw R7, <#[R11]> */
		/* 8221516Ch case   67:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221516Ch case   67:*/		return 0x82215170;
		  /* 82215170h */ case   68:  		/* addi R11, R11, 4 */
		/* 82215170h case   68:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215170h case   68:*/		return 0x82215174;
		  /* 82215174h */ case   69:  		/* sth R8, <#[R11 + 2]> */
		/* 82215174h case   69:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82215174h case   69:*/		return 0x82215178;
		  /* 82215178h */ case   70:  		/* lwz R8, <#[R11]> */
		/* 82215178h case   70:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215178h case   70:*/		return 0x8221517C;
		  /* 8221517Ch */ case   71:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 8221517Ch case   71:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 8221517Ch case   71:*/		return 0x82215180;
		  /* 82215180h */ case   72:  		/* stw R8, <#[R11]> */
		/* 82215180h case   72:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215180h case   72:*/		return 0x82215184;
		  /* 82215184h */ case   73:  		/* addi R11, R11, 4 */
		/* 82215184h case   73:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215184h case   73:*/		return 0x82215188;
		  /* 82215188h */ case   74:  		/* lwz R8, <#[R31 + 76]> */
		/* 82215188h case   74:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000004C) );
		/* 82215188h case   74:*/		return 0x8221518C;
		  /* 8221518Ch */ case   75:  		/* sth R8, <#[R11 + 2]> */
		/* 8221518Ch case   75:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 8221518Ch case   75:*/		return 0x82215190;
		  /* 82215190h */ case   76:  		/* lwz R8, <#[R11]> */
		/* 82215190h case   76:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215190h case   76:*/		return 0x82215194;
		  /* 82215194h */ case   77:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 82215194h case   77:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 82215194h case   77:*/		return 0x82215198;
		  /* 82215198h */ case   78:  		/* stw R8, <#[R11]> */
		/* 82215198h case   78:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215198h case   78:*/		return 0x8221519C;
		  /* 8221519Ch */ case   79:  		/* addi R11, R11, 4 */
		/* 8221519Ch case   79:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221519Ch case   79:*/		return 0x822151A0;
		  /* 822151A0h */ case   80:  		/* lwz R9, <#[R31 + 76]> */
		/* 822151A0h case   80:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 822151A0h case   80:*/		return 0x822151A4;
		  /* 822151A4h */ case   81:  		/* sth R9, <#[R11 + 2]> */
		/* 822151A4h case   81:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822151A4h case   81:*/		return 0x822151A8;
		  /* 822151A8h */ case   82:  		/* li R12, -17527 */
		/* 822151A8h case   82:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBB89);
		/* 822151A8h case   82:*/		return 0x822151AC;
		  /* 822151ACh */ case   83:  		/* lwz R9, <#[R11]> */
		/* 822151ACh case   83:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822151ACh case   83:*/		return 0x822151B0;
		  /* 822151B0h */ case   84:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 822151B0h case   84:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 822151B0h case   84:*/		return 0x822151B4;
		  /* 822151B4h */ case   85:  		/* stw R9, <#[R11]> */
		/* 822151B4h case   85:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822151B4h case   85:*/		return 0x822151B8;
		  /* 822151B8h */ case   86:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822151B8h case   86:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822151B8h case   86:*/		return 0x822151BC;
		  /* 822151BCh */ case   87:  		/* and R9, R9, R12 */
		/* 822151BCh case   87:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 822151BCh case   87:*/		return 0x822151C0;
		  /* 822151C0h */ case   88:  		/* ori R9, R9, 13057 */
		/* 822151C0h case   88:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3301);
		/* 822151C0h case   88:*/		return 0x822151C4;
		  /* 822151C4h */ case   89:  		/* stw R9, <#[R11]> */
		/* 822151C4h case   89:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822151C4h case   89:*/		return 0x822151C8;
		  /* 822151C8h */ case   90:  		/* addi R11, R11, 4 */
		/* 822151C8h case   90:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822151C8h case   90:*/		return 0x822151CC;
		  /* 822151CCh */ case   91:  		/* lwz R9, <#[R31 + 76]> */
		/* 822151CCh case   91:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 822151CCh case   91:*/		return 0x822151D0;
		  /* 822151D0h */ case   92:  		/* sth R9, <#[R11 + 2]> */
		/* 822151D0h case   92:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822151D0h case   92:*/		return 0x822151D4;
		  /* 822151D4h */ case   93:  		/* lwz R9, <#[R11]> */
		/* 822151D4h case   93:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822151D4h case   93:*/		return 0x822151D8;
		  /* 822151D8h */ case   94:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 822151D8h case   94:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 822151D8h case   94:*/		return 0x822151DC;
		  /* 822151DCh */ case   95:  		/* stw R9, <#[R11]> */
		/* 822151DCh case   95:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822151DCh case   95:*/		return 0x822151E0;
		  /* 822151E0h */ case   96:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822151E0h case   96:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822151E0h case   96:*/		return 0x822151E4;
		  /* 822151E4h */ case   97:  		/* and R10, R10, R12 */
		/* 822151E4h case   97:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 822151E4h case   97:*/		return 0x822151E8;
		  /* 822151E8h */ case   98:  		/* addi R3, R11, 4 */
		/* 822151E8h case   98:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822151E8h case   98:*/		return 0x822151EC;
		  /* 822151ECh */ case   99:  		/* ori R10, R10, 13057 */
		/* 822151ECh case   99:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3301);
		/* 822151ECh case   99:*/		return 0x822151F0;
		  /* 822151F0h */ case  100:  		/* stw R10, <#[R11]> */
		/* 822151F0h case  100:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822151F0h case  100:*/		return 0x822151F4;
		  /* 822151F4h */ case  101:  		/* addi R1, R1, 112 */
		/* 822151F4h case  101:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822151F4h case  101:*/		return 0x822151F8;
		  /* 822151F8h */ case  102:  		/* b -1589068 */
		/* 822151F8h case  102:*/		return 0x820912AC;
		/* 822151F8h case  102:*/		return 0x822151FC;
		  /* 822151FCh */ case  103:  		/* nop */
		/* 822151FCh case  103:*/		cpu::op::nop();
		/* 822151FCh case  103:*/		return 0x82215200;
	}
	return 0x82215200;
} // Block from 82215060h-82215200h (104 instructions)

//////////////////////////////////////////////////////
// Block at 82215200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215200);
		  /* 82215200h */ case    0:  		/* mfspr R12, LR */
		/* 82215200h case    0:*/		regs.R12 = regs.LR;
		/* 82215200h case    0:*/		return 0x82215204;
		  /* 82215204h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82215204h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82215204h case    1:*/		return 0x82215208;
		  /* 82215208h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82215208h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82215208h case    2:*/		return 0x8221520C;
		  /* 8221520Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221520Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221520Ch case    3:*/		return 0x82215210;
	}
	return 0x82215210;
} // Block from 82215200h-82215210h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82215210h
// Function '?DoSub@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215210);
		  /* 82215210h */ case    0:  		/* stwu R1, <#[R1 - 112]> */
		/* 82215210h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82215210h case    0:*/		return 0x82215214;
		  /* 82215214h */ case    1:  		/* mr R31, R4 */
		/* 82215214h case    1:*/		regs.R31 = regs.R4;
		/* 82215214h case    1:*/		return 0x82215218;
		  /* 82215218h */ case    2:  		/* mr R30, R5 */
		/* 82215218h case    2:*/		regs.R30 = regs.R5;
		/* 82215218h case    2:*/		return 0x8221521C;
		  /* 8221521Ch */ case    3:  		/* bl -24564 */
		/* 8221521Ch case    3:*/		regs.LR = 0x82215220; return 0x8220F228;
		/* 8221521Ch case    3:*/		return 0x82215220;
		  /* 82215220h */ case    4:  		/* li R8, 64 */
		/* 82215220h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x40);
		/* 82215220h case    4:*/		return 0x82215224;
		  /* 82215224h */ case    5:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82215224h case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82215224h case    5:*/		return 0x82215228;
		  /* 82215228h */ case    6:  		/* sth R8, <#[R30 + 2]> */
		/* 82215228h case    6:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R30 + 0x00000002) );
		/* 82215228h case    6:*/		return 0x8221522C;
		  /* 8221522Ch */ case    7:  		/* li R10, 1 */
		/* 8221522Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221522Ch case    7:*/		return 0x82215230;
		  /* 82215230h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82215230h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82215230h case    8:*/		return 0x82215234;
		  /* 82215234h */ case    9:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82215234h case    9:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82215234h case    9:*/		return 0x82215238;
		  /* 82215238h */ case   10:  		/* stw R11, <#[R30]> */
		/* 82215238h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82215238h case   10:*/		return 0x8221523C;
		  /* 8221523Ch */ case   11:  		/* addi R11, R30, 4 */
		/* 8221523Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8221523Ch case   11:*/		return 0x82215240;
		  /* 82215240h */ case   12:  		/* sth R9, <#[R30 + 6]> */
		/* 82215240h case   12:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 82215240h case   12:*/		return 0x82215244;
		  /* 82215244h */ case   13:  		/* li R12, -26215 */
		/* 82215244h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82215244h case   13:*/		return 0x82215248;
		  /* 82215248h */ case   14:  		/* lwz R7, <#[R30 + 4]> */
		/* 82215248h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82215248h case   14:*/		return 0x8221524C;
		  /* 8221524Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 8221524Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221524Ch case   15:*/		return 0x82215250;
		  /* 82215250h */ case   16:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 82215250h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 82215250h case   16:*/		return 0x82215254;
		  /* 82215254h */ case   17:  		/* stw R7, <#[R30 + 4]> */
		/* 82215254h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82215254h case   17:*/		return 0x82215258;
		  /* 82215258h */ case   18:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215258h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215258h case   18:*/		return 0x8221525C;
		  /* 8221525Ch */ case   19:  		/* sth R7, <#[R11 + 2]> */
		/* 8221525Ch case   19:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 8221525Ch case   19:*/		return 0x82215260;
		  /* 82215260h */ case   20:  		/* lwz R7, <#[R11]> */
		/* 82215260h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215260h case   20:*/		return 0x82215264;
		  /* 82215264h */ case   21:  		/* lwz R6, <#[R31 + 4]> */
		/* 82215264h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82215264h case   21:*/		return 0x82215268;
		  /* 82215268h */ case   22:  		/* rlwimi R6, R7, 0, 16, 9 */
		/* 82215268h case   22:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R7);
		/* 82215268h case   22:*/		return 0x8221526C;
		  /* 8221526Ch */ case   23:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 8221526Ch case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 8221526Ch case   23:*/		return 0x82215270;
		  /* 82215270h */ case   24:  		/* stw R6, <#[R11]> */
		/* 82215270h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82215270h case   24:*/		return 0x82215274;
		  /* 82215274h */ case   25:  		/* lwz R6, <#[R31 + 4]> */
		/* 82215274h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82215274h case   25:*/		return 0x82215278;
		  /* 82215278h */ case   26:  		/* rlwimi R6, R7, 0, 9, 7 */
		/* 82215278h case   26:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R6,regs.R7);
		/* 82215278h case   26:*/		return 0x8221527C;
		  /* 8221527Ch */ case   27:  		/* oris R7, R6, 64 */
		/* 8221527Ch case   27:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R6,0x40);
		/* 8221527Ch case   27:*/		return 0x82215280;
		  /* 82215280h */ case   28:  		/* stw R7, <#[R11]> */
		/* 82215280h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215280h case   28:*/		return 0x82215284;
		  /* 82215284h */ case   29:  		/* lwzu R7, <#[R11 + 4]> */
		/* 82215284h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215284h case   29:*/		return 0x82215288;
		  /* 82215288h */ case   30:  		/* and R7, R7, R12 */
		/* 82215288h case   30:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 82215288h case   30:*/		return 0x8221528C;
		  /* 8221528Ch */ case   31:  		/* ori R7, R7, 4369 */
		/* 8221528Ch case   31:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x1111);
		/* 8221528Ch case   31:*/		return 0x82215290;
		  /* 82215290h */ case   32:  		/* stw R7, <#[R11]> */
		/* 82215290h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215290h case   32:*/		return 0x82215294;
		  /* 82215294h */ case   33:  		/* addi R11, R11, 4 */
		/* 82215294h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215294h case   33:*/		return 0x82215298;
		  /* 82215298h */ case   34:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215298h case   34:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215298h case   34:*/		return 0x8221529C;
		  /* 8221529Ch */ case   35:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 8221529Ch case   35:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 8221529Ch case   35:*/		return 0x822152A0;
		  /* 822152A0h */ case   36:  		/* bc 12, CR0_EQ, 16 */
		/* 822152A0h case   36:*/		if ( regs.CR[0].eq ) { return 0x822152B0;  }
		/* 822152A0h case   36:*/		return 0x822152A4;
		  /* 822152A4h */ case   37:  		/* lwz R7, <#[R31 + 12]> */
		/* 822152A4h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 822152A4h case   37:*/		return 0x822152A8;
		  /* 822152A8h */ case   38:  		/* stw R7, <#[R11]> */
		/* 822152A8h case   38:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152A8h case   38:*/		return 0x822152AC;
		  /* 822152ACh */ case   39:  		/* addi R11, R11, 4 */
		/* 822152ACh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822152ACh case   39:*/		return 0x822152B0;
	}
	return 0x822152B0;
} // Block from 82215210h-822152B0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 822152B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822152B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822152B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822152B0);
		  /* 822152B0h */ case    0:  		/* li R7, 5 */
		/* 822152B0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 822152B0h case    0:*/		return 0x822152B4;
		  /* 822152B4h */ case    1:  		/* li R6, 4 */
		/* 822152B4h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 822152B4h case    1:*/		return 0x822152B8;
		  /* 822152B8h */ case    2:  		/* sth R7, <#[R11 + 2]> */
		/* 822152B8h case    2:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822152B8h case    2:*/		return 0x822152BC;
		  /* 822152BCh */ case    3:  		/* li R12, -21846 */
		/* 822152BCh case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFAAAA);
		/* 822152BCh case    3:*/		return 0x822152C0;
		  /* 822152C0h */ case    4:  		/* lwz R7, <#[R11]> */
		/* 822152C0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152C0h case    4:*/		return 0x822152C4;
		  /* 822152C4h */ case    5:  		/* rlwimi R7, R10, 16, 8, 15 */
		/* 822152C4h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R10);
		/* 822152C4h case    5:*/		return 0x822152C8;
		  /* 822152C8h */ case    6:  		/* stw R7, <#[R11]> */
		/* 822152C8h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152C8h case    6:*/		return 0x822152CC;
		  /* 822152CCh */ case    7:  		/* stb R10, <#[R11]> */
		/* 822152CCh case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822152CCh case    7:*/		return 0x822152D0;
		  /* 822152D0h */ case    8:  		/* addi R11, R11, 4 */
		/* 822152D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822152D0h case    8:*/		return 0x822152D4;
		  /* 822152D4h */ case    9:  		/* sth R6, <#[R11 + 2]> */
		/* 822152D4h case    9:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 822152D4h case    9:*/		return 0x822152D8;
		  /* 822152D8h */ case   10:  		/* lwz R7, <#[R11]> */
		/* 822152D8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152D8h case   10:*/		return 0x822152DC;
		  /* 822152DCh */ case   11:  		/* rlwimi R7, R10, 16, 8, 15 */
		/* 822152DCh case   11:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R10);
		/* 822152DCh case   11:*/		return 0x822152E0;
		  /* 822152E0h */ case   12:  		/* stw R7, <#[R11]> */
		/* 822152E0h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152E0h case   12:*/		return 0x822152E4;
		  /* 822152E4h */ case   13:  		/* stb R10, <#[R11]> */
		/* 822152E4h case   13:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822152E4h case   13:*/		return 0x822152E8;
		  /* 822152E8h */ case   14:  		/* addi R11, R11, 4 */
		/* 822152E8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822152E8h case   14:*/		return 0x822152EC;
		  /* 822152ECh */ case   15:  		/* sth R8, <#[R11 + 2]> */
		/* 822152ECh case   15:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822152ECh case   15:*/		return 0x822152F0;
		  /* 822152F0h */ case   16:  		/* lwz R7, <#[R11]> */
		/* 822152F0h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152F0h case   16:*/		return 0x822152F4;
		  /* 822152F4h */ case   17:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 822152F4h case   17:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 822152F4h case   17:*/		return 0x822152F8;
		  /* 822152F8h */ case   18:  		/* stw R7, <#[R11]> */
		/* 822152F8h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822152F8h case   18:*/		return 0x822152FC;
		  /* 822152FCh */ case   19:  		/* addi R11, R11, 4 */
		/* 822152FCh case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822152FCh case   19:*/		return 0x82215300;
		  /* 82215300h */ case   20:  		/* sth R9, <#[R11 + 2]> */
		/* 82215300h case   20:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215300h case   20:*/		return 0x82215304;
		  /* 82215304h */ case   21:  		/* lwz R7, <#[R11]> */
		/* 82215304h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215304h case   21:*/		return 0x82215308;
		  /* 82215308h */ case   22:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 82215308h case   22:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 82215308h case   22:*/		return 0x8221530C;
		  /* 8221530Ch */ case   23:  		/* stw R7, <#[R11]> */
		/* 8221530Ch case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221530Ch case   23:*/		return 0x82215310;
		  /* 82215310h */ case   24:  		/* addi R11, R11, 4 */
		/* 82215310h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215310h case   24:*/		return 0x82215314;
		  /* 82215314h */ case   25:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215314h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215314h case   25:*/		return 0x82215318;
		  /* 82215318h */ case   26:  		/* sth R7, <#[R11 + 2]> */
		/* 82215318h case   26:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215318h case   26:*/		return 0x8221531C;
		  /* 8221531Ch */ case   27:  		/* lwz R7, <#[R11]> */
		/* 8221531Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221531Ch case   27:*/		return 0x82215320;
		  /* 82215320h */ case   28:  		/* lwz R6, <#[R31 + 4]> */
		/* 82215320h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82215320h case   28:*/		return 0x82215324;
		  /* 82215324h */ case   29:  		/* rlwimi R6, R7, 0, 16, 9 */
		/* 82215324h case   29:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R6,regs.R7);
		/* 82215324h case   29:*/		return 0x82215328;
		  /* 82215328h */ case   30:  		/* rlwinm R7, R6, 0, 0, 31 */
		/* 82215328h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R6);
		/* 82215328h case   30:*/		return 0x8221532C;
		  /* 8221532Ch */ case   31:  		/* stw R6, <#[R11]> */
		/* 8221532Ch case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221532Ch case   31:*/		return 0x82215330;
		  /* 82215330h */ case   32:  		/* lwz R6, <#[R31 + 4]> */
		/* 82215330h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82215330h case   32:*/		return 0x82215334;
		  /* 82215334h */ case   33:  		/* rlwimi R6, R7, 0, 9, 7 */
		/* 82215334h case   33:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R6,regs.R7);
		/* 82215334h case   33:*/		return 0x82215338;
		  /* 82215338h */ case   34:  		/* oris R7, R6, 64 */
		/* 82215338h case   34:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R6,0x40);
		/* 82215338h case   34:*/		return 0x8221533C;
		  /* 8221533Ch */ case   35:  		/* stw R7, <#[R11]> */
		/* 8221533Ch case   35:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221533Ch case   35:*/		return 0x82215340;
		  /* 82215340h */ case   36:  		/* lwzu R7, <#[R11 + 4]> */
		/* 82215340h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215340h case   36:*/		return 0x82215344;
		  /* 82215344h */ case   37:  		/* and R7, R7, R12 */
		/* 82215344h case   37:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 82215344h case   37:*/		return 0x82215348;
		  /* 82215348h */ case   38:  		/* ori R7, R7, 8738 */
		/* 82215348h case   38:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2222);
		/* 82215348h case   38:*/		return 0x8221534C;
		  /* 8221534Ch */ case   39:  		/* stw R7, <#[R11]> */
		/* 8221534Ch case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221534Ch case   39:*/		return 0x82215350;
		  /* 82215350h */ case   40:  		/* addi R11, R11, 4 */
		/* 82215350h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215350h case   40:*/		return 0x82215354;
		  /* 82215354h */ case   41:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215354h case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215354h case   41:*/		return 0x82215358;
		  /* 82215358h */ case   42:  		/* rlwinm. R7, R7, 0, 8, 8 */
		/* 82215358h case   42:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R7,regs.R7);
		/* 82215358h case   42:*/		return 0x8221535C;
		  /* 8221535Ch */ case   43:  		/* bc 12, CR0_EQ, 16 */
		/* 8221535Ch case   43:*/		if ( regs.CR[0].eq ) { return 0x8221536C;  }
		/* 8221535Ch case   43:*/		return 0x82215360;
		  /* 82215360h */ case   44:  		/* lwz R7, <#[R31 + 12]> */
		/* 82215360h case   44:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82215360h case   44:*/		return 0x82215364;
		  /* 82215364h */ case   45:  		/* stw R7, <#[R11]> */
		/* 82215364h case   45:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215364h case   45:*/		return 0x82215368;
		  /* 82215368h */ case   46:  		/* addi R11, R11, 4 */
		/* 82215368h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215368h case   46:*/		return 0x8221536C;
	}
	return 0x8221536C;
} // Block from 822152B0h-8221536Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 8221536Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221536C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221536C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221536C);
		  /* 8221536Ch */ case    0:  		/* li R7, 6 */
		/* 8221536Ch case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x6);
		/* 8221536Ch case    0:*/		return 0x82215370;
		  /* 82215370h */ case    1:  		/* sth R7, <#[R11 + 2]> */
		/* 82215370h case    1:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215370h case    1:*/		return 0x82215374;
		  /* 82215374h */ case    2:  		/* lwz R7, <#[R11]> */
		/* 82215374h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215374h case    2:*/		return 0x82215378;
	}
	return 0x82215378;
} // Block from 8221536Ch-82215378h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82215378h
// Function '?DoPredIfc@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215378);
		  /* 82215378h */ case    0:  		/* rlwimi R7, R10, 16, 8, 15 */
		/* 82215378h case    0:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R10);
		/* 82215378h case    0:*/		return 0x8221537C;
		  /* 8221537Ch */ case    1:  		/* stw R7, <#[R11]> */
		/* 8221537Ch case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221537Ch case    1:*/		return 0x82215380;
		  /* 82215380h */ case    2:  		/* stb R10, <#[R11]> */
		/* 82215380h case    2:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215380h case    2:*/		return 0x82215384;
		  /* 82215384h */ case    3:  		/* addi R11, R11, 4 */
		/* 82215384h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215384h case    3:*/		return 0x82215388;
		  /* 82215388h */ case    4:  		/* sth R9, <#[R11 + 2]> */
		/* 82215388h case    4:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215388h case    4:*/		return 0x8221538C;
		  /* 8221538Ch */ case    5:  		/* lwz R7, <#[R11]> */
		/* 8221538Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221538Ch case    5:*/		return 0x82215390;
		  /* 82215390h */ case    6:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 82215390h case    6:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 82215390h case    6:*/		return 0x82215394;
		  /* 82215394h */ case    7:  		/* stw R7, <#[R11]> */
		/* 82215394h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215394h case    7:*/		return 0x82215398;
		  /* 82215398h */ case    8:  		/* addi R11, R11, 4 */
		/* 82215398h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215398h case    8:*/		return 0x8221539C;
		  /* 8221539Ch */ case    9:  		/* sth R8, <#[R11 + 2]> */
		/* 8221539Ch case    9:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 8221539Ch case    9:*/		return 0x822153A0;
		  /* 822153A0h */ case   10:  		/* lwz R8, <#[R11]> */
		/* 822153A0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822153A0h case   10:*/		return 0x822153A4;
		  /* 822153A4h */ case   11:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 822153A4h case   11:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 822153A4h case   11:*/		return 0x822153A8;
		  /* 822153A8h */ case   12:  		/* stw R8, <#[R11]> */
		/* 822153A8h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822153A8h case   12:*/		return 0x822153AC;
		  /* 822153ACh */ case   13:  		/* addi R11, R11, 4 */
		/* 822153ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822153ACh case   13:*/		return 0x822153B0;
		  /* 822153B0h */ case   14:  		/* lwz R8, <#[R31 + 4]> */
		/* 822153B0h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822153B0h case   14:*/		return 0x822153B4;
		  /* 822153B4h */ case   15:  		/* sth R8, <#[R11 + 2]> */
		/* 822153B4h case   15:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822153B4h case   15:*/		return 0x822153B8;
		  /* 822153B8h */ case   16:  		/* lwz R8, <#[R11]> */
		/* 822153B8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822153B8h case   16:*/		return 0x822153BC;
		  /* 822153BCh */ case   17:  		/* lwz R7, <#[R31 + 4]> */
		/* 822153BCh case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822153BCh case   17:*/		return 0x822153C0;
		  /* 822153C0h */ case   18:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 822153C0h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 822153C0h case   18:*/		return 0x822153C4;
		  /* 822153C4h */ case   19:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 822153C4h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 822153C4h case   19:*/		return 0x822153C8;
		  /* 822153C8h */ case   20:  		/* stw R7, <#[R11]> */
		/* 822153C8h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822153C8h case   20:*/		return 0x822153CC;
		  /* 822153CCh */ case   21:  		/* lwz R7, <#[R31 + 4]> */
		/* 822153CCh case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 822153CCh case   21:*/		return 0x822153D0;
		  /* 822153D0h */ case   22:  		/* rlwimi R7, R8, 0, 10, 7 */
		/* 822153D0h case   22:*/		cpu::op::rlwimi<0,0,10,7>(regs,&regs.R7,regs.R8);
		/* 822153D0h case   22:*/		return 0x822153D4;
		  /* 822153D4h */ case   23:  		/* rlwinm R8, R7, 0, 10, 8 */
		/* 822153D4h case   23:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R8,regs.R7);
		/* 822153D4h case   23:*/		return 0x822153D8;
		  /* 822153D8h */ case   24:  		/* stw R8, <#[R11]> */
		/* 822153D8h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822153D8h case   24:*/		return 0x822153DC;
		  /* 822153DCh */ case   25:  		/* addi R11, R11, 4 */
		/* 822153DCh case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822153DCh case   25:*/		return 0x822153E0;
		  /* 822153E0h */ case   26:  		/* lwz R8, <#[R31 + 4]> */
		/* 822153E0h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822153E0h case   26:*/		return 0x822153E4;
		  /* 822153E4h */ case   27:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822153E4h case   27:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822153E4h case   27:*/		return 0x822153E8;
		  /* 822153E8h */ case   28:  		/* bc 12, CR0_EQ, 16 */
		/* 822153E8h case   28:*/		if ( regs.CR[0].eq ) { return 0x822153F8;  }
		/* 822153E8h case   28:*/		return 0x822153EC;
		  /* 822153ECh */ case   29:  		/* lwz R8, <#[R31 + 12]> */
		/* 822153ECh case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 822153ECh case   29:*/		return 0x822153F0;
		  /* 822153F0h */ case   30:  		/* stw R8, <#[R11]> */
		/* 822153F0h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822153F0h case   30:*/		return 0x822153F4;
		  /* 822153F4h */ case   31:  		/* addi R11, R11, 4 */
		/* 822153F4h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822153F4h case   31:*/		return 0x822153F8;
	}
	return 0x822153F8;
} // Block from 82215378h-822153F8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 822153F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822153F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822153F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822153F8);
		  /* 822153F8h */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 822153F8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822153F8h case    0:*/		return 0x822153FC;
		  /* 822153FCh */ case    1:  		/* li R12, -30584 */
		/* 822153FCh case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822153FCh case    1:*/		return 0x82215400;
		  /* 82215400h */ case    2:  		/* sth R8, <#[R11 + 2]> */
		/* 82215400h case    2:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82215400h case    2:*/		return 0x82215404;
		  /* 82215404h */ case    3:  		/* lwz R8, <#[R11]> */
		/* 82215404h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215404h case    3:*/		return 0x82215408;
		  /* 82215408h */ case    4:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215408h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215408h case    4:*/		return 0x8221540C;
		  /* 8221540Ch */ case    5:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 8221540Ch case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 8221540Ch case    5:*/		return 0x82215410;
		  /* 82215410h */ case    6:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82215410h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82215410h case    6:*/		return 0x82215414;
		  /* 82215414h */ case    7:  		/* stw R7, <#[R11]> */
		/* 82215414h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215414h case    7:*/		return 0x82215418;
		  /* 82215418h */ case    8:  		/* lwz R7, <#[R31 + 4]> */
		/* 82215418h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82215418h case    8:*/		return 0x8221541C;
		  /* 8221541Ch */ case    9:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 8221541Ch case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 8221541Ch case    9:*/		return 0x82215420;
		  /* 82215420h */ case   10:  		/* oris R8, R7, 64 */
		/* 82215420h case   10:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 82215420h case   10:*/		return 0x82215424;
		  /* 82215424h */ case   11:  		/* stw R8, <#[R11]> */
		/* 82215424h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215424h case   11:*/		return 0x82215428;
		  /* 82215428h */ case   12:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82215428h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215428h case   12:*/		return 0x8221542C;
		  /* 8221542Ch */ case   13:  		/* and R8, R8, R12 */
		/* 8221542Ch case   13:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 8221542Ch case   13:*/		return 0x82215430;
		  /* 82215430h */ case   14:  		/* stw R8, <#[R11]> */
		/* 82215430h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215430h case   14:*/		return 0x82215434;
		  /* 82215434h */ case   15:  		/* addi R11, R11, 4 */
		/* 82215434h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215434h case   15:*/		return 0x82215438;
		  /* 82215438h */ case   16:  		/* lwz R8, <#[R31 + 4]> */
		/* 82215438h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82215438h case   16:*/		return 0x8221543C;
		  /* 8221543Ch */ case   17:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 8221543Ch case   17:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 8221543Ch case   17:*/		return 0x82215440;
		  /* 82215440h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 82215440h case   18:*/		if ( regs.CR[0].eq ) { return 0x82215450;  }
		/* 82215440h case   18:*/		return 0x82215444;
		  /* 82215444h */ case   19:  		/* lwz R8, <#[R31 + 12]> */
		/* 82215444h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82215444h case   19:*/		return 0x82215448;
		  /* 82215448h */ case   20:  		/* stw R8, <#[R11]> */
		/* 82215448h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215448h case   20:*/		return 0x8221544C;
		  /* 8221544Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 8221544Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221544Ch case   21:*/		return 0x82215450;
	}
	return 0x82215450;
} // Block from 822153F8h-82215450h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82215450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215450);
		  /* 82215450h */ case    0:  		/* li R8, 7 */
		/* 82215450h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x7);
		/* 82215450h case    0:*/		return 0x82215454;
		  /* 82215454h */ case    1:  		/* sth R8, <#[R11 + 2]> */
		/* 82215454h case    1:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82215454h case    1:*/		return 0x82215458;
		  /* 82215458h */ case    2:  		/* lwz R8, <#[R11]> */
		/* 82215458h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215458h case    2:*/		return 0x8221545C;
		  /* 8221545Ch */ case    3:  		/* rlwimi R8, R10, 16, 8, 15 */
		/* 8221545Ch case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R8,regs.R10);
		/* 8221545Ch case    3:*/		return 0x82215460;
		  /* 82215460h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82215460h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215460h case    4:*/		return 0x82215464;
		  /* 82215464h */ case    5:  		/* stb R10, <#[R11]> */
		/* 82215464h case    5:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215464h case    5:*/		return 0x82215468;
		  /* 82215468h */ case    6:  		/* addi R11, R11, 4 */
		/* 82215468h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215468h case    6:*/		return 0x8221546C;
		  /* 8221546Ch */ case    7:  		/* addi R3, R11, 4 */
		/* 8221546Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 8221546Ch case    7:*/		return 0x82215470;
		  /* 82215470h */ case    8:  		/* sth R9, <#[R11 + 2]> */
		/* 82215470h case    8:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215470h case    8:*/		return 0x82215474;
		  /* 82215474h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82215474h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215474h case    9:*/		return 0x82215478;
		  /* 82215478h */ case   10:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82215478h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82215478h case   10:*/		return 0x8221547C;
		  /* 8221547Ch */ case   11:  		/* stw R9, <#[R11]> */
		/* 8221547Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221547Ch case   11:*/		return 0x82215480;
		  /* 82215480h */ case   12:  		/* addi R1, R1, 112 */
		/* 82215480h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82215480h case   12:*/		return 0x82215484;
		  /* 82215484h */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 82215484h case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82215484h case   13:*/		return 0x82215488;
		  /* 82215488h */ case   14:  		/* mtspr LR, R12 */
		/* 82215488h case   14:*/		regs.LR = regs.R12;
		/* 82215488h case   14:*/		return 0x8221548C;
		  /* 8221548Ch */ case   15:  		/* ld R30, <#[R1 - 24]> */
		/* 8221548Ch case   15:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221548Ch case   15:*/		return 0x82215490;
		  /* 82215490h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 82215490h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82215490h case   16:*/		return 0x82215494;
		  /* 82215494h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82215494h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82215494h case   17:*/		return 0x82215498;
	}
	return 0x82215498;
} // Block from 82215450h-82215498h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82215498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215498);
		  /* 82215498h */ case    0:  		/* mfspr R12, LR */
		/* 82215498h case    0:*/		regs.R12 = regs.LR;
		/* 82215498h case    0:*/		return 0x8221549C;
		  /* 8221549Ch */ case    1:  		/* bl -1589844 */
		/* 8221549Ch case    1:*/		regs.LR = 0x822154A0; return 0x82091248;
		/* 8221549Ch case    1:*/		return 0x822154A0;
		  /* 822154A0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822154A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822154A0h case    2:*/		return 0x822154A4;
		  /* 822154A4h */ case    3:  		/* lwz R10, <#[R3 + 28]> */
		/* 822154A4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 822154A4h case    3:*/		return 0x822154A8;
		  /* 822154A8h */ case    4:  		/* mr R30, R5 */
		/* 822154A8h case    4:*/		regs.R30 = regs.R5;
		/* 822154A8h case    4:*/		return 0x822154AC;
		  /* 822154ACh */ case    5:  		/* mr R24, R6 */
		/* 822154ACh case    5:*/		regs.R24 = regs.R6;
		/* 822154ACh case    5:*/		return 0x822154B0;
		  /* 822154B0h */ case    6:  		/* li R6, 0 */
		/* 822154B0h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822154B0h case    6:*/		return 0x822154B4;
		  /* 822154B4h */ case    7:  		/* mr R31, R3 */
		/* 822154B4h case    7:*/		regs.R31 = regs.R3;
		/* 822154B4h case    7:*/		return 0x822154B8;
		  /* 822154B8h */ case    8:  		/* mr R29, R4 */
		/* 822154B8h case    8:*/		regs.R29 = regs.R4;
		/* 822154B8h case    8:*/		return 0x822154BC;
		  /* 822154BCh */ case    9:  		/* lwz R11, <#[R10 + 23208]> */
		/* 822154BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00005AA8) );
		/* 822154BCh case    9:*/		return 0x822154C0;
		  /* 822154C0h */ case   10:  		/* addi R9, R11, 1 */
		/* 822154C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 822154C0h case   10:*/		return 0x822154C4;
		  /* 822154C4h */ case   11:  		/* subfic R28, R11, 30 */
		/* 822154C4h case   11:*/		cpu::op::subfic<0>(regs,&regs.R28,regs.R11,0x1E);
		/* 822154C4h case   11:*/		return 0x822154C8;
		  /* 822154C8h */ case   12:  		/* stw R9, <#[R10 + 23208]> */
		/* 822154C8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00005AA8) );
		/* 822154C8h case   12:*/		return 0x822154CC;
		  /* 822154CCh */ case   13:  		/* lfs FR1, <#[R4 + 52]> */
		/* 822154CCh case   13:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R4 + 0x00000034) );
		/* 822154CCh case   13:*/		return 0x822154D0;
		  /* 822154D0h */ case   14:  		/* mr R5, R28 */
		/* 822154D0h case   14:*/		regs.R5 = regs.R28;
		/* 822154D0h case   14:*/		return 0x822154D4;
		  /* 822154D4h */ case   15:  		/* lwz R11, <#[R3 + 28]> */
		/* 822154D4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 822154D4h case   15:*/		return 0x822154D8;
		  /* 822154D8h */ case   16:  		/* lwz R4, <#[R11]> */
		/* 822154D8h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822154D8h case   16:*/		return 0x822154DC;
		  /* 822154DCh */ case   17:  		/* lwz R3, <#[R3 + 16]> */
		/* 822154DCh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 822154DCh case   17:*/		return 0x822154E0;
		  /* 822154E0h */ case   18:  		/* bl 43944 */
		/* 822154E0h case   18:*/		regs.LR = 0x822154E4; return 0x82220088;
		/* 822154E0h case   18:*/		return 0x822154E4;
		  /* 822154E4h */ case   19:  		/* lis R9, -32253 */
		/* 822154E4h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822154E4h case   19:*/		return 0x822154E8;
		  /* 822154E8h */ case   20:  		/* lis R10, -32252 */
		/* 822154E8h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822154E8h case   20:*/		return 0x822154EC;
		  /* 822154ECh */ case   21:  		/* lis R11, -32252 */
		/* 822154ECh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822154ECh case   21:*/		return 0x822154F0;
		  /* 822154F0h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 822154F0h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822154F0h case   22:*/		return 0x822154F4;
		  /* 822154F4h */ case   23:  		/* addi R27, R9, 27460 */
		/* 822154F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x6B44);
		/* 822154F4h case   23:*/		return 0x822154F8;
		  /* 822154F8h */ case   24:  		/* addi R26, R10, -5996 */
		/* 822154F8h case   24:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFE894);
		/* 822154F8h case   24:*/		return 0x822154FC;
		  /* 822154FCh */ case   25:  		/* addi R25, R11, -7312 */
		/* 822154FCh case   25:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFE370);
		/* 822154FCh case   25:*/		return 0x82215500;
		  /* 82215500h */ case   26:  		/* bc 12, CR0_EQ, 28 */
		/* 82215500h case   26:*/		if ( regs.CR[0].eq ) { return 0x8221551C;  }
		/* 82215500h case   26:*/		return 0x82215504;
		  /* 82215504h */ case   27:  		/* mr R6, R25 */
		/* 82215504h case   27:*/		regs.R6 = regs.R25;
		/* 82215504h case   27:*/		return 0x82215508;
		  /* 82215508h */ case   28:  		/* mr R5, R26 */
		/* 82215508h case   28:*/		regs.R5 = regs.R26;
		/* 82215508h case   28:*/		return 0x8221550C;
		  /* 8221550Ch */ case   29:  		/* mr R4, R27 */
		/* 8221550Ch case   29:*/		regs.R4 = regs.R27;
		/* 8221550Ch case   29:*/		return 0x82215510;
		  /* 82215510h */ case   30:  		/* li R7, 8897 */
		/* 82215510h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x22C1);
		/* 82215510h case   30:*/		return 0x82215514;
		  /* 82215514h */ case   31:  		/* li R3, 0 */
		/* 82215514h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82215514h case   31:*/		return 0x82215518;
		  /* 82215518h */ case   32:  		/* bl -776464 */
		/* 82215518h case   32:*/		regs.LR = 0x8221551C; return 0x82157C08;
		/* 82215518h case   32:*/		return 0x8221551C;
	}
	return 0x8221551C;
} // Block from 82215498h-8221551Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8221551Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221551C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221551C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221551C);
		  /* 8221551Ch */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221551Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221551Ch case    0:*/		return 0x82215520;
		  /* 82215520h */ case    1:  		/* li R6, 1 */
		/* 82215520h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82215520h case    1:*/		return 0x82215524;
		  /* 82215524h */ case    2:  		/* mr R5, R28 */
		/* 82215524h case    2:*/		regs.R5 = regs.R28;
		/* 82215524h case    2:*/		return 0x82215528;
		  /* 82215528h */ case    3:  		/* lfs FR1, <#[R29 + 56]> */
		/* 82215528h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000038) );
		/* 82215528h case    3:*/		return 0x8221552C;
		  /* 8221552Ch */ case    4:  		/* lwz R3, <#[R31 + 16]> */
		/* 8221552Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8221552Ch case    4:*/		return 0x82215530;
		  /* 82215530h */ case    5:  		/* lwz R4, <#[R11]> */
		/* 82215530h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215530h case    5:*/		return 0x82215534;
		  /* 82215534h */ case    6:  		/* bl 43860 */
		/* 82215534h case    6:*/		regs.LR = 0x82215538; return 0x82220088;
		/* 82215534h case    6:*/		return 0x82215538;
		  /* 82215538h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82215538h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82215538h case    7:*/		return 0x8221553C;
		  /* 8221553Ch */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 8221553Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82215558;  }
		/* 8221553Ch case    8:*/		return 0x82215540;
		  /* 82215540h */ case    9:  		/* mr R6, R25 */
		/* 82215540h case    9:*/		regs.R6 = regs.R25;
		/* 82215540h case    9:*/		return 0x82215544;
		  /* 82215544h */ case   10:  		/* mr R5, R26 */
		/* 82215544h case   10:*/		regs.R5 = regs.R26;
		/* 82215544h case   10:*/		return 0x82215548;
		  /* 82215548h */ case   11:  		/* mr R4, R27 */
		/* 82215548h case   11:*/		regs.R4 = regs.R27;
		/* 82215548h case   11:*/		return 0x8221554C;
		  /* 8221554Ch */ case   12:  		/* li R7, 8903 */
		/* 8221554Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x22C7);
		/* 8221554Ch case   12:*/		return 0x82215550;
		  /* 82215550h */ case   13:  		/* li R3, 0 */
		/* 82215550h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82215550h case   13:*/		return 0x82215554;
		  /* 82215554h */ case   14:  		/* bl -776524 */
		/* 82215554h case   14:*/		regs.LR = 0x82215558; return 0x82157C08;
		/* 82215554h case   14:*/		return 0x82215558;
	}
	return 0x82215558;
} // Block from 8221551Ch-82215558h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82215558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215558);
		  /* 82215558h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82215558h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82215558h case    0:*/		return 0x8221555C;
		  /* 8221555Ch */ case    1:  		/* li R6, 2 */
		/* 8221555Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221555Ch case    1:*/		return 0x82215560;
		  /* 82215560h */ case    2:  		/* mr R5, R28 */
		/* 82215560h case    2:*/		regs.R5 = regs.R28;
		/* 82215560h case    2:*/		return 0x82215564;
		  /* 82215564h */ case    3:  		/* lfs FR1, <#[R29 + 60]> */
		/* 82215564h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x0000003C) );
		/* 82215564h case    3:*/		return 0x82215568;
		  /* 82215568h */ case    4:  		/* lwz R3, <#[R31 + 16]> */
		/* 82215568h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82215568h case    4:*/		return 0x8221556C;
		  /* 8221556Ch */ case    5:  		/* lwz R4, <#[R11]> */
		/* 8221556Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8221556Ch case    5:*/		return 0x82215570;
		  /* 82215570h */ case    6:  		/* bl 43800 */
		/* 82215570h case    6:*/		regs.LR = 0x82215574; return 0x82220088;
		/* 82215570h case    6:*/		return 0x82215574;
		  /* 82215574h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82215574h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82215574h case    7:*/		return 0x82215578;
	}
	return 0x82215578;
} // Block from 82215558h-82215578h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82215578h
// Function '?DoPredBreakc@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215578);
		  /* 82215578h */ case    0:  		/* bc 12, CR0_EQ, 28 */
		/* 82215578h case    0:*/		if ( regs.CR[0].eq ) { return 0x82215594;  }
		/* 82215578h case    0:*/		return 0x8221557C;
		  /* 8221557Ch */ case    1:  		/* mr R6, R25 */
		/* 8221557Ch case    1:*/		regs.R6 = regs.R25;
		/* 8221557Ch case    1:*/		return 0x82215580;
		  /* 82215580h */ case    2:  		/* mr R5, R26 */
		/* 82215580h case    2:*/		regs.R5 = regs.R26;
		/* 82215580h case    2:*/		return 0x82215584;
		  /* 82215584h */ case    3:  		/* mr R4, R27 */
		/* 82215584h case    3:*/		regs.R4 = regs.R27;
		/* 82215584h case    3:*/		return 0x82215588;
		  /* 82215588h */ case    4:  		/* li R7, 8909 */
		/* 82215588h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x22CD);
		/* 82215588h case    4:*/		return 0x8221558C;
		  /* 8221558Ch */ case    5:  		/* li R3, 0 */
		/* 8221558Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221558Ch case    5:*/		return 0x82215590;
		  /* 82215590h */ case    6:  		/* bl -776584 */
		/* 82215590h case    6:*/		regs.LR = 0x82215594; return 0x82157C08;
		/* 82215590h case    6:*/		return 0x82215594;
	}
	return 0x82215594;
} // Block from 82215578h-82215594h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82215594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215594);
		  /* 82215594h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82215594h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82215594h case    0:*/		return 0x82215598;
		  /* 82215598h */ case    1:  		/* li R6, 3 */
		/* 82215598h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82215598h case    1:*/		return 0x8221559C;
		  /* 8221559Ch */ case    2:  		/* mr R5, R28 */
		/* 8221559Ch case    2:*/		regs.R5 = regs.R28;
		/* 8221559Ch case    2:*/		return 0x822155A0;
		  /* 822155A0h */ case    3:  		/* lfs FR1, <#[R29 + 64]> */
		/* 822155A0h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000040) );
		/* 822155A0h case    3:*/		return 0x822155A4;
		  /* 822155A4h */ case    4:  		/* lwz R3, <#[R31 + 16]> */
		/* 822155A4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 822155A4h case    4:*/		return 0x822155A8;
		  /* 822155A8h */ case    5:  		/* lwz R4, <#[R11]> */
		/* 822155A8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822155A8h case    5:*/		return 0x822155AC;
		  /* 822155ACh */ case    6:  		/* bl 43740 */
		/* 822155ACh case    6:*/		regs.LR = 0x822155B0; return 0x82220088;
		/* 822155ACh case    6:*/		return 0x822155B0;
		  /* 822155B0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 822155B0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822155B0h case    7:*/		return 0x822155B4;
		  /* 822155B4h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 822155B4h case    8:*/		if ( regs.CR[0].eq ) { return 0x822155D0;  }
		/* 822155B4h case    8:*/		return 0x822155B8;
		  /* 822155B8h */ case    9:  		/* mr R6, R25 */
		/* 822155B8h case    9:*/		regs.R6 = regs.R25;
		/* 822155B8h case    9:*/		return 0x822155BC;
		  /* 822155BCh */ case   10:  		/* mr R5, R26 */
		/* 822155BCh case   10:*/		regs.R5 = regs.R26;
		/* 822155BCh case   10:*/		return 0x822155C0;
		  /* 822155C0h */ case   11:  		/* mr R4, R27 */
		/* 822155C0h case   11:*/		regs.R4 = regs.R27;
		/* 822155C0h case   11:*/		return 0x822155C4;
		  /* 822155C4h */ case   12:  		/* li R7, 8915 */
		/* 822155C4h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x22D3);
		/* 822155C4h case   12:*/		return 0x822155C8;
		  /* 822155C8h */ case   13:  		/* li R3, 0 */
		/* 822155C8h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822155C8h case   13:*/		return 0x822155CC;
		  /* 822155CCh */ case   14:  		/* bl -776644 */
		/* 822155CCh case   14:*/		regs.LR = 0x822155D0; return 0x82157C08;
		/* 822155CCh case   14:*/		return 0x822155D0;
	}
	return 0x822155D0;
} // Block from 82215594h-822155D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822155D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822155D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822155D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822155D0);
		  /* 822155D0h */ case    0:  		/* li R10, 64 */
		/* 822155D0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 822155D0h case    0:*/		return 0x822155D4;
		  /* 822155D4h */ case    1:  		/* addi R11, R24, 4 */
		/* 822155D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x4);
		/* 822155D4h case    1:*/		return 0x822155D8;
		  /* 822155D8h */ case    2:  		/* sth R10, <#[R24 + 2]> */
		/* 822155D8h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R24 + 0x00000002) );
		/* 822155D8h case    2:*/		return 0x822155DC;
		  /* 822155DCh */ case    3:  		/* lwz R10, <#[R24]> */
		/* 822155DCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 822155DCh case    3:*/		return 0x822155E0;
		  /* 822155E0h */ case    4:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 822155E0h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 822155E0h case    4:*/		return 0x822155E4;
		  /* 822155E4h */ case    5:  		/* stw R10, <#[R24]> */
		/* 822155E4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 822155E4h case    5:*/		return 0x822155E8;
		  /* 822155E8h */ case    6:  		/* addi R11, R11, 4 */
		/* 822155E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822155E8h case    6:*/		return 0x822155EC;
		  /* 822155ECh */ case    7:  		/* lwz R10, <#[R30 + 4]> */
		/* 822155ECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 822155ECh case    7:*/		return 0x822155F0;
		  /* 822155F0h */ case    8:  		/* sth R10, <#[R24 + 6]> */
		/* 822155F0h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R24 + 0x00000006) );
		/* 822155F0h case    8:*/		return 0x822155F4;
		  /* 822155F4h */ case    9:  		/* lwz R10, <#[R24 + 4]> */
		/* 822155F4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 822155F4h case    9:*/		return 0x822155F8;
		  /* 822155F8h */ case   10:  		/* lwz R9, <#[R30 + 4]> */
		/* 822155F8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 822155F8h case   10:*/		return 0x822155FC;
		  /* 822155FCh */ case   11:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 822155FCh case   11:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 822155FCh case   11:*/		return 0x82215600;
		  /* 82215600h */ case   12:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82215600h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82215600h case   12:*/		return 0x82215604;
		  /* 82215604h */ case   13:  		/* stw R9, <#[R24 + 4]> */
		/* 82215604h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R24 + 0x00000004) );
		/* 82215604h case   13:*/		return 0x82215608;
		  /* 82215608h */ case   14:  		/* lwz R9, <#[R30 + 4]> */
		/* 82215608h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82215608h case   14:*/		return 0x8221560C;
		  /* 8221560Ch */ case   15:  		/* rlwimi R9, R10, 0, 10, 7 */
		/* 8221560Ch case   15:*/		cpu::op::rlwimi<0,0,10,7>(regs,&regs.R9,regs.R10);
		/* 8221560Ch case   15:*/		return 0x82215610;
		  /* 82215610h */ case   16:  		/* rlwinm R10, R9, 0, 10, 8 */
		/* 82215610h case   16:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 82215610h case   16:*/		return 0x82215614;
		  /* 82215614h */ case   17:  		/* stw R10, <#[R24 + 4]> */
		/* 82215614h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 82215614h case   17:*/		return 0x82215618;
		  /* 82215618h */ case   18:  		/* lwz R10, <#[R30 + 4]> */
		/* 82215618h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82215618h case   18:*/		return 0x8221561C;
		  /* 8221561Ch */ case   19:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 8221561Ch case   19:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 8221561Ch case   19:*/		return 0x82215620;
		  /* 82215620h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 82215620h case   20:*/		if ( regs.CR[0].eq ) { return 0x82215630;  }
		/* 82215620h case   20:*/		return 0x82215624;
		  /* 82215624h */ case   21:  		/* lwz R10, <#[R30 + 12]> */
		/* 82215624h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82215624h case   21:*/		return 0x82215628;
		  /* 82215628h */ case   22:  		/* stw R10, <#[R11]> */
		/* 82215628h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215628h case   22:*/		return 0x8221562C;
		  /* 8221562Ch */ case   23:  		/* addi R11, R11, 4 */
		/* 8221562Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221562Ch case   23:*/		return 0x82215630;
	}
	return 0x82215630;
} // Block from 822155D0h-82215630h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82215630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215630);
		  /* 82215630h */ case    0:  		/* lwz R9, <#[R29 + 80]> */
		/* 82215630h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000050) );
		/* 82215630h case    0:*/		return 0x82215634;
		  /* 82215634h */ case    1:  		/* li R10, 1 */
		/* 82215634h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82215634h case    1:*/		return 0x82215638;
		  /* 82215638h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82215638h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215638h case    2:*/		return 0x8221563C;
		  /* 8221563Ch */ case    3:  		/* lwz R9, <#[R11]> */
		/* 8221563Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221563Ch case    3:*/		return 0x82215640;
		  /* 82215640h */ case    4:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82215640h case    4:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82215640h case    4:*/		return 0x82215644;
		  /* 82215644h */ case    5:  		/* stw R9, <#[R11]> */
		/* 82215644h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215644h case    5:*/		return 0x82215648;
		  /* 82215648h */ case    6:  		/* addi R11, R11, 4 */
		/* 82215648h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215648h case    6:*/		return 0x8221564C;
		  /* 8221564Ch */ case    7:  		/* sth R28, <#[R11 + 2]> */
		/* 8221564Ch case    7:*/		cpu::mem::store16( regs, regs.R28, (uint32)(regs.R11 + 0x00000002) );
		/* 8221564Ch case    7:*/		return 0x82215650;
		  /* 82215650h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 82215650h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215650h case    8:*/		return 0x82215654;
		  /* 82215654h */ case    9:  		/* rlwimi R9, R10, 16, 8, 15 */
		/* 82215654h case    9:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R9,regs.R10);
		/* 82215654h case    9:*/		return 0x82215658;
		  /* 82215658h */ case   10:  		/* stw R9, <#[R11]> */
		/* 82215658h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215658h case   10:*/		return 0x8221565C;
		  /* 8221565Ch */ case   11:  		/* stb R10, <#[R11]> */
		/* 8221565Ch case   11:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221565Ch case   11:*/		return 0x82215660;
		  /* 82215660h */ case   12:  		/* addi R11, R11, 4 */
		/* 82215660h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215660h case   12:*/		return 0x82215664;
		  /* 82215664h */ case   13:  		/* lwz R10, <#[R30 + 4]> */
		/* 82215664h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82215664h case   13:*/		return 0x82215668;
		  /* 82215668h */ case   14:  		/* addi R3, R11, 4 */
		/* 82215668h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82215668h case   14:*/		return 0x8221566C;
		  /* 8221566Ch */ case   15:  		/* sth R10, <#[R11 + 2]> */
		/* 8221566Ch case   15:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221566Ch case   15:*/		return 0x82215670;
		  /* 82215670h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 82215670h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215670h case   16:*/		return 0x82215674;
		  /* 82215674h */ case   17:  		/* lwz R10, <#[R30 + 4]> */
		/* 82215674h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82215674h case   17:*/		return 0x82215678;
		  /* 82215678h */ case   18:  		/* rlwimi R10, R9, 0, 16, 9 */
		/* 82215678h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R10,regs.R9);
		/* 82215678h case   18:*/		return 0x8221567C;
		  /* 8221567Ch */ case   19:  		/* stw R10, <#[R11]> */
		/* 8221567Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221567Ch case   19:*/		return 0x82215680;
		  /* 82215680h */ case   20:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82215680h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82215680h case   20:*/		return 0x82215684;
		  /* 82215684h */ case   21:  		/* lwz R9, <#[R30 + 4]> */
		/* 82215684h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82215684h case   21:*/		return 0x82215688;
		  /* 82215688h */ case   22:  		/* rlwimi R9, R10, 0, 10, 7 */
		/* 82215688h case   22:*/		cpu::op::rlwimi<0,0,10,7>(regs,&regs.R9,regs.R10);
		/* 82215688h case   22:*/		return 0x8221568C;
		  /* 8221568Ch */ case   23:  		/* rlwinm R10, R9, 0, 10, 8 */
		/* 8221568Ch case   23:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 8221568Ch case   23:*/		return 0x82215690;
		  /* 82215690h */ case   24:  		/* stw R10, <#[R11]> */
		/* 82215690h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215690h case   24:*/		return 0x82215694;
		  /* 82215694h */ case   25:  		/* lwz R11, <#[R30 + 4]> */
		/* 82215694h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82215694h case   25:*/		return 0x82215698;
		  /* 82215698h */ case   26:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82215698h case   26:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82215698h case   26:*/		return 0x8221569C;
		  /* 8221569Ch */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 8221569Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x822156AC;  }
		/* 8221569Ch case   27:*/		return 0x822156A0;
		  /* 822156A0h */ case   28:  		/* lwz R11, <#[R30 + 12]> */
		/* 822156A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 822156A0h case   28:*/		return 0x822156A4;
		  /* 822156A4h */ case   29:  		/* stw R11, <#[R3]> */
		/* 822156A4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822156A4h case   29:*/		return 0x822156A8;
		  /* 822156A8h */ case   30:  		/* addi R3, R3, 4 */
		/* 822156A8h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 822156A8h case   30:*/		return 0x822156AC;
	}
	return 0x822156AC;
} // Block from 82215630h-822156ACh (31 instructions)

//////////////////////////////////////////////////////
// Block at 822156ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822156AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822156AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822156AC);
		  /* 822156ACh */ case    0:  		/* addi R1, R1, 160 */
		/* 822156ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822156ACh case    0:*/		return 0x822156B0;
		  /* 822156B0h */ case    1:  		/* b -1590296 */
		/* 822156B0h case    1:*/		return 0x82091298;
		/* 822156B0h case    1:*/		return 0x822156B4;
		  /* 822156B4h */ case    2:  		/* nop */
		/* 822156B4h case    2:*/		cpu::op::nop();
		/* 822156B4h case    2:*/		return 0x822156B8;
	}
	return 0x822156B8;
} // Block from 822156ACh-822156B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822156B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822156B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822156B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822156B8);
		  /* 822156B8h */ case    0:  		/* mfspr R12, LR */
		/* 822156B8h case    0:*/		regs.R12 = regs.LR;
		/* 822156B8h case    0:*/		return 0x822156BC;
		  /* 822156BCh */ case    1:  		/* bl -1590380 */
		/* 822156BCh case    1:*/		regs.LR = 0x822156C0; return 0x82091250;
		/* 822156BCh case    1:*/		return 0x822156C0;
		  /* 822156C0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 822156C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 822156C0h case    2:*/		return 0x822156C4;
		  /* 822156C4h */ case    3:  		/* lwz R29, <#[R3 + 28]> */
		/* 822156C4h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000001C) );
		/* 822156C4h case    3:*/		return 0x822156C8;
		  /* 822156C8h */ case    4:  		/* mr R26, R6 */
		/* 822156C8h case    4:*/		regs.R26 = regs.R6;
		/* 822156C8h case    4:*/		return 0x822156CC;
		  /* 822156CCh */ case    5:  		/* lhz R11, <#[R4]> */
		/* 822156CCh case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 822156CCh case    5:*/		return 0x822156D0;
		  /* 822156D0h */ case    6:  		/* mr R30, R5 */
		/* 822156D0h case    6:*/		regs.R30 = regs.R5;
		/* 822156D0h case    6:*/		return 0x822156D4;
		  /* 822156D4h */ case    7:  		/* mr R27, R3 */
		/* 822156D4h case    7:*/		regs.R27 = regs.R3;
		/* 822156D4h case    7:*/		return 0x822156D8;
		  /* 822156D8h */ case    8:  		/* rlwinm R6, R11, 0, 26, 31 */
		/* 822156D8h case    8:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R6,regs.R11);
		/* 822156D8h case    8:*/		return 0x822156DC;
		  /* 822156DCh */ case    9:  		/* mr R31, R4 */
		/* 822156DCh case    9:*/		regs.R31 = regs.R4;
		/* 822156DCh case    9:*/		return 0x822156E0;
		  /* 822156E0h */ case   10:  		/* lwz R11, <#[R29 + 23208]> */
		/* 822156E0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00005AA8) );
		/* 822156E0h case   10:*/		return 0x822156E4;
		  /* 822156E4h */ case   11:  		/* addi R10, R11, 1 */
		/* 822156E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 822156E4h case   11:*/		return 0x822156E8;
		  /* 822156E8h */ case   12:  		/* subfic R28, R11, 30 */
		/* 822156E8h case   12:*/		cpu::op::subfic<0>(regs,&regs.R28,regs.R11,0x1E);
		/* 822156E8h case   12:*/		return 0x822156EC;
		  /* 822156ECh */ case   13:  		/* stw R10, <#[R29 + 23208]> */
		/* 822156ECh case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00005AA8) );
		/* 822156ECh case   13:*/		return 0x822156F0;
		  /* 822156F0h */ case   14:  		/* mr R5, R28 */
		/* 822156F0h case   14:*/		regs.R5 = regs.R28;
		/* 822156F0h case   14:*/		return 0x822156F4;
		  /* 822156F4h */ case   15:  		/* lwz R4, <#[R29]> */
		/* 822156F4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 822156F4h case   15:*/		return 0x822156F8;
		  /* 822156F8h */ case   16:  		/* lwz R3, <#[R3 + 16]> */
		/* 822156F8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 822156F8h case   16:*/		return 0x822156FC;
		  /* 822156FCh */ case   17:  		/* bl 43580 */
		/* 822156FCh case   17:*/		regs.LR = 0x82215700; return 0x82220138;
		/* 822156FCh case   17:*/		return 0x82215700;
		  /* 82215700h */ case   18:  		/* li R11, 64 */
		/* 82215700h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 82215700h case   18:*/		return 0x82215704;
		  /* 82215704h */ case   19:  		/* sth R11, <#[R30 + 2]> */
		/* 82215704h case   19:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82215704h case   19:*/		return 0x82215708;
		  /* 82215708h */ case   20:  		/* li R9, 0 */
		/* 82215708h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82215708h case   20:*/		return 0x8221570C;
		  /* 8221570Ch */ case   21:  		/* lwz R11, <#[R30]> */
		/* 8221570Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221570Ch case   21:*/		return 0x82215710;
		  /* 82215710h */ case   22:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82215710h case   22:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82215710h case   22:*/		return 0x82215714;
		  /* 82215714h */ case   23:  		/* stw R11, <#[R30]> */
		/* 82215714h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82215714h case   23:*/		return 0x82215718;
		  /* 82215718h */ case   24:  		/* addi R11, R30, 4 */
		/* 82215718h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82215718h case   24:*/		return 0x8221571C;
		  /* 8221571Ch */ case   25:  		/* li R10, 13 */
		/* 8221571Ch case   25:*/		cpu::op::li<0>(regs,&regs.R10,0xD);
		/* 8221571Ch case   25:*/		return 0x82215720;
		  /* 82215720h */ case   26:  		/* sth R9, <#[R30 + 6]> */
		/* 82215720h case   26:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 82215720h case   26:*/		return 0x82215724;
		  /* 82215724h */ case   27:  		/* lwz R8, <#[R30 + 4]> */
		/* 82215724h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82215724h case   27:*/		return 0x82215728;
		  /* 82215728h */ case   28:  		/* addi R11, R11, 4 */
		/* 82215728h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215728h case   28:*/		return 0x8221572C;
		  /* 8221572Ch */ case   29:  		/* rlwimi R8, R10, 17, 8, 15 */
		/* 8221572Ch case   29:*/		cpu::op::rlwimi<0,17,8,15>(regs,&regs.R8,regs.R10);
		/* 8221572Ch case   29:*/		return 0x82215730;
		  /* 82215730h */ case   30:  		/* stw R8, <#[R30 + 4]> */
		/* 82215730h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82215730h case   30:*/		return 0x82215734;
		  /* 82215734h */ case   31:  		/* li R12, -30584 */
		/* 82215734h case   31:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82215734h case   31:*/		return 0x82215738;
		  /* 82215738h */ case   32:  		/* lwz R10, <#[R31 + 4]> */
		/* 82215738h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82215738h case   32:*/		return 0x8221573C;
		  /* 8221573Ch */ case   33:  		/* sth R10, <#[R11 + 2]> */
		/* 8221573Ch case   33:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221573Ch case   33:*/		return 0x82215740;
		  /* 82215740h */ case   34:  		/* lwz R10, <#[R11]> */
		/* 82215740h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215740h case   34:*/		return 0x82215744;
		  /* 82215744h */ case   35:  		/* lwz R8, <#[R31 + 4]> */
		/* 82215744h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82215744h case   35:*/		return 0x82215748;
		  /* 82215748h */ case   36:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82215748h case   36:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82215748h case   36:*/		return 0x8221574C;
		  /* 8221574Ch */ case   37:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 8221574Ch case   37:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 8221574Ch case   37:*/		return 0x82215750;
		  /* 82215750h */ case   38:  		/* stw R8, <#[R11]> */
		/* 82215750h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215750h case   38:*/		return 0x82215754;
		  /* 82215754h */ case   39:  		/* lwz R8, <#[R31 + 4]> */
		/* 82215754h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82215754h case   39:*/		return 0x82215758;
		  /* 82215758h */ case   40:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82215758h case   40:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82215758h case   40:*/		return 0x8221575C;
		  /* 8221575Ch */ case   41:  		/* oris R10, R8, 64 */
		/* 8221575Ch case   41:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 8221575Ch case   41:*/		return 0x82215760;
		  /* 82215760h */ case   42:  		/* stw R10, <#[R11]> */
		/* 82215760h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215760h case   42:*/		return 0x82215764;
		  /* 82215764h */ case   43:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82215764h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215764h case   43:*/		return 0x82215768;
		  /* 82215768h */ case   44:  		/* and R10, R10, R12 */
		/* 82215768h case   44:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82215768h case   44:*/		return 0x8221576C;
		  /* 8221576Ch */ case   45:  		/* stw R10, <#[R11]> */
		/* 8221576Ch case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221576Ch case   45:*/		return 0x82215770;
		  /* 82215770h */ case   46:  		/* addi R11, R11, 4 */
		/* 82215770h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215770h case   46:*/		return 0x82215774;
		  /* 82215774h */ case   47:  		/* lwz R10, <#[R31 + 4]> */
		/* 82215774h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82215774h case   47:*/		return 0x82215778;
		  /* 82215778h */ case   48:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82215778h case   48:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82215778h case   48:*/		return 0x8221577C;
		  /* 8221577Ch */ case   49:  		/* bc 12, CR0_EQ, 16 */
		/* 8221577Ch case   49:*/		if ( regs.CR[0].eq ) { return 0x8221578C;  }
		/* 8221577Ch case   49:*/		return 0x82215780;
		  /* 82215780h */ case   50:  		/* lwz R10, <#[R31 + 12]> */
		/* 82215780h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82215780h case   50:*/		return 0x82215784;
		  /* 82215784h */ case   51:  		/* stw R10, <#[R11]> */
		/* 82215784h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215784h case   51:*/		return 0x82215788;
		  /* 82215788h */ case   52:  		/* addi R11, R11, 4 */
		/* 82215788h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215788h case   52:*/		return 0x8221578C;
	}
	return 0x8221578C;
} // Block from 822156B8h-8221578Ch (53 instructions)

//////////////////////////////////////////////////////
// Block at 8221578Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221578C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221578C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221578C);
		  /* 8221578Ch */ case    0:  		/* li R8, 65 */
		/* 8221578Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 8221578Ch case    0:*/		return 0x82215790;
		  /* 82215790h */ case    1:  		/* sth R9, <#[R11 + 2]> */
		/* 82215790h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215790h case    1:*/		return 0x82215794;
		  /* 82215794h */ case    2:  		/* lwz R7, <#[R11]> */
		/* 82215794h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215794h case    2:*/		return 0x82215798;
		  /* 82215798h */ case    3:  		/* li R10, 1 */
		/* 82215798h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82215798h case    3:*/		return 0x8221579C;
		  /* 8221579Ch */ case    4:  		/* rlwimi R7, R8, 16, 8, 15 */
		/* 8221579Ch case    4:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R8);
		/* 8221579Ch case    4:*/		return 0x822157A0;
		  /* 822157A0h */ case    5:  		/* stw R7, <#[R11]> */
		/* 822157A0h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822157A0h case    5:*/		return 0x822157A4;
		  /* 822157A4h */ case    6:  		/* li R12, -30568 */
		/* 822157A4h case    6:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8898);
		/* 822157A4h case    6:*/		return 0x822157A8;
		  /* 822157A8h */ case    7:  		/* stb R10, <#[R11]> */
		/* 822157A8h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157A8h case    7:*/		return 0x822157AC;
		  /* 822157ACh */ case    8:  		/* lwzu R5, <#[R11 + 4]> */
		/* 822157ACh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822157ACh case    8:*/		return 0x822157B0;
		  /* 822157B0h */ case    9:  		/* li R6, 27 */
		/* 822157B0h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1B);
		/* 822157B0h case    9:*/		return 0x822157B4;
		  /* 822157B4h */ case   10:  		/* and R5, R5, R12 */
		/* 822157B4h case   10:*/		cpu::op::and<0>(regs,&regs.R5,regs.R5,regs.R12);
		/* 822157B4h case   10:*/		return 0x822157B8;
		  /* 822157B8h */ case   11:  		/* ori R5, R5, 16 */
		/* 822157B8h case   11:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x10);
		/* 822157B8h case   11:*/		return 0x822157BC;
		  /* 822157BCh */ case   12:  		/* stw R5, <#[R11]> */
		/* 822157BCh case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822157BCh case   12:*/		return 0x822157C0;
		  /* 822157C0h */ case   13:  		/* addi R11, R11, 4 */
		/* 822157C0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822157C0h case   13:*/		return 0x822157C4;
		  /* 822157C4h */ case   14:  		/* sth R28, <#[R11 + 2]> */
		/* 822157C4h case   14:*/		cpu::mem::store16( regs, regs.R28, (uint32)(regs.R11 + 0x00000002) );
		/* 822157C4h case   14:*/		return 0x822157C8;
		  /* 822157C8h */ case   15:  		/* lwz R7, <#[R11]> */
		/* 822157C8h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822157C8h case   15:*/		return 0x822157CC;
		  /* 822157CCh */ case   16:  		/* rlwimi R7, R10, 16, 8, 15 */
		/* 822157CCh case   16:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R10);
		/* 822157CCh case   16:*/		return 0x822157D0;
		  /* 822157D0h */ case   17:  		/* stw R7, <#[R11]> */
		/* 822157D0h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822157D0h case   17:*/		return 0x822157D4;
		  /* 822157D4h */ case   18:  		/* stb R10, <#[R11]> */
		/* 822157D4h case   18:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157D4h case   18:*/		return 0x822157D8;
		  /* 822157D8h */ case   19:  		/* addi R11, R11, 4 */
		/* 822157D8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822157D8h case   19:*/		return 0x822157DC;
		  /* 822157DCh */ case   20:  		/* sth R8, <#[R11 + 2]> */
		/* 822157DCh case   20:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822157DCh case   20:*/		return 0x822157E0;
		  /* 822157E0h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 822157E0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157E0h case   21:*/		return 0x822157E4;
		  /* 822157E4h */ case   22:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 822157E4h case   22:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 822157E4h case   22:*/		return 0x822157E8;
		  /* 822157E8h */ case   23:  		/* stw R10, <#[R11]> */
		/* 822157E8h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157E8h case   23:*/		return 0x822157EC;
		  /* 822157ECh */ case   24:  		/* addi R11, R11, 4 */
		/* 822157ECh case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822157ECh case   24:*/		return 0x822157F0;
		  /* 822157F0h */ case   25:  		/* sth R9, <#[R11 + 2]> */
		/* 822157F0h case   25:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822157F0h case   25:*/		return 0x822157F4;
		  /* 822157F4h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 822157F4h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157F4h case   26:*/		return 0x822157F8;
		  /* 822157F8h */ case   27:  		/* rlwimi R10, R6, 16, 8, 15 */
		/* 822157F8h case   27:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R6);
		/* 822157F8h case   27:*/		return 0x822157FC;
		  /* 822157FCh */ case   28:  		/* stw R10, <#[R11]> */
		/* 822157FCh case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822157FCh case   28:*/		return 0x82215800;
		  /* 82215800h */ case   29:  		/* lwz R10, <#[R31 + 16]> */
		/* 82215800h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82215800h case   29:*/		return 0x82215804;
		  /* 82215804h */ case   30:  		/* stwu R10, <#[R11 + 4]> */
		/* 82215804h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215804h case   30:*/		return 0x82215808;
	}
	return 0x82215808;
} // Block from 8221578Ch-82215808h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82215808h
// Function '?DoPredEndLoop@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215808);
		  /* 82215808h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 82215808h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82215808h case    0:*/		return 0x8221580C;
		  /* 8221580Ch */ case    1:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8221580Ch case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8221580Ch case    1:*/		return 0x82215810;
		  /* 82215810h */ case    2:  		/* addi R11, R11, 4 */
		/* 82215810h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215810h case    2:*/		return 0x82215814;
		  /* 82215814h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82215814h case    3:*/		if ( regs.CR[0].eq ) { return 0x82215824;  }
		/* 82215814h case    3:*/		return 0x82215818;
		  /* 82215818h */ case    4:  		/* lwz R10, <#[R31 + 28]> */
		/* 82215818h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82215818h case    4:*/		return 0x8221581C;
		  /* 8221581Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 8221581Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221581Ch case    5:*/		return 0x82215820;
		  /* 82215820h */ case    6:  		/* addi R11, R11, 4 */
		/* 82215820h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215820h case    6:*/		return 0x82215824;
	}
	return 0x82215824;
} // Block from 82215808h-82215824h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82215824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215824);
		  /* 82215824h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 82215824h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82215824h case    0:*/		return 0x82215828;
		  /* 82215828h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82215828h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82215828h case    1:*/		return 0x8221582C;
		  /* 8221582Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8221582Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8221583C;  }
		/* 8221582Ch case    2:*/		return 0x82215830;
		  /* 82215830h */ case    3:  		/* lwz R10, <#[R31 + 40]> */
		/* 82215830h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82215830h case    3:*/		return 0x82215834;
		  /* 82215834h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82215834h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215834h case    4:*/		return 0x82215838;
		  /* 82215838h */ case    5:  		/* addi R11, R11, 4 */
		/* 82215838h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215838h case    5:*/		return 0x8221583C;
	}
	return 0x8221583C;
} // Block from 82215824h-8221583Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221583Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221583C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221583C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221583C);
		  /* 8221583Ch */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8221583Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8221583Ch case    0:*/		return 0x82215840;
		  /* 82215840h */ case    1:  		/* addi R30, R11, 4 */
		/* 82215840h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 82215840h case    1:*/		return 0x82215844;
		  /* 82215844h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82215844h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215844h case    2:*/		return 0x82215848;
		  /* 82215848h */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 82215848h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82215848h case    3:*/		return 0x8221584C;
		  /* 8221584Ch */ case    4:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8221584Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8221584Ch case    4:*/		return 0x82215850;
		  /* 82215850h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82215850h case    5:*/		if ( regs.CR[0].eq ) { return 0x82215860;  }
		/* 82215850h case    5:*/		return 0x82215854;
		  /* 82215854h */ case    6:  		/* lwz R11, <#[R31 + 28]> */
		/* 82215854h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82215854h case    6:*/		return 0x82215858;
		  /* 82215858h */ case    7:  		/* stw R11, <#[R30]> */
		/* 82215858h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82215858h case    7:*/		return 0x8221585C;
		  /* 8221585Ch */ case    8:  		/* addi R30, R30, 4 */
		/* 8221585Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221585Ch case    8:*/		return 0x82215860;
	}
	return 0x82215860;
} // Block from 8221583Ch-82215860h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82215860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215860);
		  /* 82215860h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82215860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82215860h case    0:*/		return 0x82215864;
		  /* 82215864h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82215864h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82215864h case    1:*/		return 0x82215868;
		  /* 82215868h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82215868h case    2:*/		if ( regs.CR[0].eq ) { return 0x82215878;  }
		/* 82215868h case    2:*/		return 0x8221586C;
		  /* 8221586Ch */ case    3:  		/* lwz R11, <#[R31 + 40]> */
		/* 8221586Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221586Ch case    3:*/		return 0x82215870;
		  /* 82215870h */ case    4:  		/* stw R11, <#[R30]> */
		/* 82215870h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82215870h case    4:*/		return 0x82215874;
		  /* 82215874h */ case    5:  		/* addi R30, R30, 4 */
		/* 82215874h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82215874h case    5:*/		return 0x82215878;
	}
	return 0x82215878;
} // Block from 82215860h-82215878h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82215878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215878);
		  /* 82215878h */ case    0:  		/* li R11, 2 */
		/* 82215878h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82215878h case    0:*/		return 0x8221587C;
		  /* 8221587Ch */ case    1:  		/* stw R9, <#[R1 + 84]> */
		/* 8221587Ch case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8221587Ch case    1:*/		return 0x82215880;
		  /* 82215880h */ case    2:  		/* lis R6, 0 */
		/* 82215880h case    2:*/		cpu::op::lis<0>(regs,&regs.R6,0x0);
		/* 82215880h case    2:*/		return 0x82215884;
		  /* 82215884h */ case    3:  		/* lwz R5, <#[R29 + 12]> */
		/* 82215884h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 82215884h case    3:*/		return 0x82215888;
		  /* 82215888h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 82215888h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82215888h case    4:*/		return 0x8221588C;
		  /* 8221588Ch */ case    5:  		/* addi R7, R1, 80 */
		/* 8221588Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8221588Ch case    5:*/		return 0x82215890;
		  /* 82215890h */ case    6:  		/* ori R6, R6, 32768 */
		/* 82215890h case    6:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x8000);
		/* 82215890h case    6:*/		return 0x82215894;
		  /* 82215894h */ case    7:  		/* addi R4, R29, 13152 */
		/* 82215894h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 82215894h case    7:*/		return 0x82215898;
		  /* 82215898h */ case    8:  		/* mr R3, R27 */
		/* 82215898h case    8:*/		regs.R3 = regs.R27;
		/* 82215898h case    8:*/		return 0x8221589C;
		  /* 8221589Ch */ case    9:  		/* bl -25916 */
		/* 8221589Ch case    9:*/		regs.LR = 0x822158A0; return 0x8220F360;
		/* 8221589Ch case    9:*/		return 0x822158A0;
		  /* 822158A0h */ case   10:  		/* lwz R11, <#[R26]> */
		/* 822158A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822158A0h case   10:*/		return 0x822158A4;
		  /* 822158A4h */ case   11:  		/* mr R3, R30 */
		/* 822158A4h case   11:*/		regs.R3 = regs.R30;
		/* 822158A4h case   11:*/		return 0x822158A8;
		  /* 822158A8h */ case   12:  		/* addi R11, R11, 2 */
		/* 822158A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 822158A8h case   12:*/		return 0x822158AC;
		  /* 822158ACh */ case   13:  		/* stw R11, <#[R26]> */
		/* 822158ACh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 822158ACh case   13:*/		return 0x822158B0;
		  /* 822158B0h */ case   14:  		/* addi R1, R1, 160 */
		/* 822158B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822158B0h case   14:*/		return 0x822158B4;
		  /* 822158B4h */ case   15:  		/* b -1590804 */
		/* 822158B4h case   15:*/		return 0x820912A0;
		/* 822158B4h case   15:*/		return 0x822158B8;
	}
	return 0x822158B8;
} // Block from 82215878h-822158B8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822158B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822158B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822158B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822158B8);
		  /* 822158B8h */ case    0:  		/* mfspr R12, LR */
		/* 822158B8h case    0:*/		regs.R12 = regs.LR;
		/* 822158B8h case    0:*/		return 0x822158BC;
		  /* 822158BCh */ case    1:  		/* bl -1590880 */
		/* 822158BCh case    1:*/		regs.LR = 0x822158C0; return 0x8209125C;
		/* 822158BCh case    1:*/		return 0x822158C0;
		  /* 822158C0h */ case    2:  		/* li R29, 65 */
		/* 822158C0h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x41);
		/* 822158C0h case    2:*/		return 0x822158C4;
		  /* 822158C4h */ case    3:  		/* rlwinm R8, R6, 0, 16, 31 */
		/* 822158C4h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R6);
		/* 822158C4h case    3:*/		return 0x822158C8;
		  /* 822158C8h */ case    4:  		/* sth R29, <#[R7 + 2]> */
		/* 822158C8h case    4:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R7 + 0x00000002) );
		/* 822158C8h case    4:*/		return 0x822158CC;
		  /* 822158CCh */ case    5:  		/* li R31, 17 */
		/* 822158CCh case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x11);
		/* 822158CCh case    5:*/		return 0x822158D0;
		  /* 822158D0h */ case    6:  		/* lwz R11, <#[R7]> */
		/* 822158D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 822158D0h case    6:*/		return 0x822158D4;
		  /* 822158D4h */ case    7:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 822158D4h case    7:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 822158D4h case    7:*/		return 0x822158D8;
		  /* 822158D8h */ case    8:  		/* stw R11, <#[R7]> */
		/* 822158D8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 822158D8h case    8:*/		return 0x822158DC;
		  /* 822158DCh */ case    9:  		/* addi R11, R7, 4 */
		/* 822158DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4);
		/* 822158DCh case    9:*/		return 0x822158E0;
		  /* 822158E0h */ case   10:  		/* sth R8, <#[R7 + 6]> */
		/* 822158E0h case   10:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R7 + 0x00000006) );
		/* 822158E0h case   10:*/		return 0x822158E4;
		  /* 822158E4h */ case   11:  		/* li R30, 1 */
		/* 822158E4h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 822158E4h case   11:*/		return 0x822158E8;
		  /* 822158E8h */ case   12:  		/* lwz R10, <#[R7 + 4]> */
		/* 822158E8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 822158E8h case   12:*/		return 0x822158EC;
		  /* 822158ECh */ case   13:  		/* rlwimi R10, R31, 18, 8, 15 */
		/* 822158ECh case   13:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R31);
		/* 822158ECh case   13:*/		return 0x822158F0;
		  /* 822158F0h */ case   14:  		/* stw R10, <#[R7 + 4]> */
		/* 822158F0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 822158F0h case   14:*/		return 0x822158F4;
		  /* 822158F4h */ case   15:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822158F4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822158F4h case   15:*/		return 0x822158F8;
		  /* 822158F8h */ case   16:  		/* rlwinm R10, R10, 0, 24, 18 */
		/* 822158F8h case   16:*/		cpu::op::rlwinm<0,0,24,18>(regs,&regs.R10,regs.R10);
		/* 822158F8h case   16:*/		return 0x822158FC;
		  /* 822158FCh */ case   17:  		/* stw R10, <#[R11]> */
		/* 822158FCh case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822158FCh case   17:*/		return 0x82215900;
		  /* 82215900h */ case   18:  		/* lwz R9, <#[R4]> */
		/* 82215900h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82215900h case   18:*/		return 0x82215904;
		  /* 82215904h */ case   19:  		/* rlwinm R9, R9, 0, 29, 31 */
		/* 82215904h case   19:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R9);
		/* 82215904h case   19:*/		return 0x82215908;
		  /* 82215908h */ case   20:  		/* cmplwi CR6, R9, 4 */
		/* 82215908h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82215908h case   20:*/		return 0x8221590C;
		  /* 8221590Ch */ case   21:  		/* bc 12, CR6_EQ, 20 */
		/* 8221590Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x82215920;  }
		/* 8221590Ch case   21:*/		return 0x82215910;
		  /* 82215910h */ case   22:  		/* cmplwi CR6, R9, 5 */
		/* 82215910h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 82215910h case   22:*/		return 0x82215914;
		  /* 82215914h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82215914h case   23:*/		if ( regs.CR[6].eq ) { return 0x82215920;  }
		/* 82215914h case   23:*/		return 0x82215918;
		  /* 82215918h */ case   24:  		/* rlwimi R10, R30, 0, 30, 31 */
		/* 82215918h case   24:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R10,regs.R30);
		/* 82215918h case   24:*/		return 0x8221591C;
		  /* 8221591Ch */ case   25:  		/* stw R10, <#[R11]> */
		/* 8221591Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221591Ch case   25:*/		return 0x82215920;
	}
	return 0x82215920;
} // Block from 822158B8h-82215920h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82215920h
// Function '?DoTexConv_CubeMap@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_TEXTURE_INFO@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215920);
		  /* 82215920h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215920h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215920h case    0:*/		return 0x82215924;
		  /* 82215924h */ case    1:  		/* rlwinm R10, R10, 28, 29, 31 */
		/* 82215924h case    1:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R10,regs.R10);
		/* 82215924h case    1:*/		return 0x82215928;
		  /* 82215928h */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82215928h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215928h case    2:*/		return 0x8221592C;
		  /* 8221592Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8221592Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82215944;  }
		/* 8221592Ch case    3:*/		return 0x82215930;
		  /* 82215930h */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215930h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215930h case    4:*/		return 0x82215934;
		  /* 82215934h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82215934h case    5:*/		if ( regs.CR[6].eq ) { return 0x82215944;  }
		/* 82215934h case    5:*/		return 0x82215938;
		  /* 82215938h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 82215938h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215938h case    6:*/		return 0x8221593C;
		  /* 8221593Ch */ case    7:  		/* rlwimi R10, R30, 2, 28, 29 */
		/* 8221593Ch case    7:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R10,regs.R30);
		/* 8221593Ch case    7:*/		return 0x82215940;
		  /* 82215940h */ case    8:  		/* stw R10, <#[R11]> */
		/* 82215940h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215940h case    8:*/		return 0x82215944;
	}
	return 0x82215944;
} // Block from 82215920h-82215944h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82215944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215944);
		  /* 82215944h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215944h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215944h case    0:*/		return 0x82215948;
		  /* 82215948h */ case    1:  		/* rlwinm R10, R10, 24, 29, 31 */
		/* 82215948h case    1:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R10,regs.R10);
		/* 82215948h case    1:*/		return 0x8221594C;
		  /* 8221594Ch */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 8221594Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8221594Ch case    2:*/		return 0x82215950;
		  /* 82215950h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82215950h case    3:*/		if ( regs.CR[6].eq ) { return 0x82215968;  }
		/* 82215950h case    3:*/		return 0x82215954;
		  /* 82215954h */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215954h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215954h case    4:*/		return 0x82215958;
		  /* 82215958h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82215958h case    5:*/		if ( regs.CR[6].eq ) { return 0x82215968;  }
		/* 82215958h case    5:*/		return 0x8221595C;
		  /* 8221595Ch */ case    6:  		/* lwz R10, <#[R11]> */
		/* 8221595Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221595Ch case    6:*/		return 0x82215960;
		  /* 82215960h */ case    7:  		/* rlwimi R10, R30, 4, 26, 27 */
		/* 82215960h case    7:*/		cpu::op::rlwimi<0,4,26,27>(regs,&regs.R10,regs.R30);
		/* 82215960h case    7:*/		return 0x82215964;
		  /* 82215964h */ case    8:  		/* stw R10, <#[R11]> */
		/* 82215964h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215964h case    8:*/		return 0x82215968;
	}
	return 0x82215968;
} // Block from 82215944h-82215968h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82215968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215968);
		  /* 82215968h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215968h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215968h case    0:*/		return 0x8221596C;
		  /* 8221596Ch */ case    1:  		/* rlwinm R10, R10, 20, 29, 31 */
		/* 8221596Ch case    1:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R10,regs.R10);
		/* 8221596Ch case    1:*/		return 0x82215970;
		  /* 82215970h */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82215970h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215970h case    2:*/		return 0x82215974;
		  /* 82215974h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82215974h case    3:*/		if ( regs.CR[6].eq ) { return 0x8221598C;  }
		/* 82215974h case    3:*/		return 0x82215978;
		  /* 82215978h */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215978h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215978h case    4:*/		return 0x8221597C;
		  /* 8221597Ch */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 8221597Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8221598C;  }
		/* 8221597Ch case    5:*/		return 0x82215980;
		  /* 82215980h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 82215980h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215980h case    6:*/		return 0x82215984;
		  /* 82215984h */ case    7:  		/* rlwimi R10, R30, 6, 24, 25 */
		/* 82215984h case    7:*/		cpu::op::rlwimi<0,6,24,25>(regs,&regs.R10,regs.R30);
		/* 82215984h case    7:*/		return 0x82215988;
		  /* 82215988h */ case    8:  		/* stw R10, <#[R11]> */
		/* 82215988h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215988h case    8:*/		return 0x8221598C;
	}
	return 0x8221598C;
} // Block from 82215968h-8221598Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221598Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221598C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221598C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221598C);
		  /* 8221598Ch */ case    0:  		/* li R10, 2 */
		/* 8221598Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8221598Ch case    0:*/		return 0x82215990;
		  /* 82215990h */ case    1:  		/* addi R11, R11, 4 */
		/* 82215990h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215990h case    1:*/		return 0x82215994;
		  /* 82215994h */ case    2:  		/* mtspr CTR, R10 */
		/* 82215994h case    2:*/		regs.CTR = regs.R10;
		/* 82215994h case    2:*/		return 0x82215998;
		  /* 82215998h */ case    3:  		/* lwz R10, <#[R3]> */
		/* 82215998h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82215998h case    3:*/		return 0x8221599C;
		  /* 8221599Ch */ case    4:  		/* sth R10, <#[R11 + 2]> */
		/* 8221599Ch case    4:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221599Ch case    4:*/		return 0x822159A0;
		  /* 822159A0h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 822159A0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822159A0h case    5:*/		return 0x822159A4;
		  /* 822159A4h */ case    6:  		/* lwz R9, <#[R3]> */
		/* 822159A4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 822159A4h case    6:*/		return 0x822159A8;
		  /* 822159A8h */ case    7:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 822159A8h case    7:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 822159A8h case    7:*/		return 0x822159AC;
		  /* 822159ACh */ case    8:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822159ACh case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822159ACh case    8:*/		return 0x822159B0;
		  /* 822159B0h */ case    9:  		/* stw R9, <#[R11]> */
		/* 822159B0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822159B0h case    9:*/		return 0x822159B4;
		  /* 822159B4h */ case   10:  		/* lwz R9, <#[R3]> */
		/* 822159B4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 822159B4h case   10:*/		return 0x822159B8;
		  /* 822159B8h */ case   11:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 822159B8h case   11:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 822159B8h case   11:*/		return 0x822159BC;
		  /* 822159BCh */ case   12:  		/* oris R10, R9, 64 */
		/* 822159BCh case   12:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 822159BCh case   12:*/		return 0x822159C0;
		  /* 822159C0h */ case   13:  		/* stw R10, <#[R11]> */
		/* 822159C0h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822159C0h case   13:*/		return 0x822159C4;
		  /* 822159C4h */ case   14:  		/* addi R11, R11, 4 */
		/* 822159C4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822159C4h case   14:*/		return 0x822159C8;
		  /* 822159C8h */ case   15:  		/* lwz R10, <#[R4]> */
		/* 822159C8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 822159C8h case   15:*/		return 0x822159CC;
		  /* 822159CCh */ case   16:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 822159CCh case   16:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 822159CCh case   16:*/		return 0x822159D0;
		  /* 822159D0h */ case   17:  		/* cmplwi CR6, R10, 4 */
		/* 822159D0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 822159D0h case   17:*/		return 0x822159D4;
		  /* 822159D4h */ case   18:  		/* bc 12, CR6_EQ, 28 */
		/* 822159D4h case   18:*/		if ( regs.CR[6].eq ) { return 0x822159F0;  }
		/* 822159D4h case   18:*/		return 0x822159D8;
		  /* 822159D8h */ case   19:  		/* cmplwi CR6, R10, 5 */
		/* 822159D8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 822159D8h case   19:*/		return 0x822159DC;
		  /* 822159DCh */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 822159DCh case   20:*/		if ( regs.CR[6].eq ) { return 0x822159F0;  }
		/* 822159DCh case   20:*/		return 0x822159E0;
		  /* 822159E0h */ case   21:  		/* lwz R9, <#[R11]> */
		/* 822159E0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822159E0h case   21:*/		return 0x822159E4;
		  /* 822159E4h */ case   22:  		/* rlwinm R9, R9, 0, 0, 28 */
		/* 822159E4h case   22:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R9,regs.R9);
		/* 822159E4h case   22:*/		return 0x822159E8;
		  /* 822159E8h */ case   23:  		/* or R10, R9, R10 */
		/* 822159E8h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 822159E8h case   23:*/		return 0x822159EC;
		  /* 822159ECh */ case   24:  		/* b 12 */
		/* 822159ECh case   24:*/		return 0x822159F8;
		/* 822159ECh case   24:*/		return 0x822159F0;
	}
	return 0x822159F0;
} // Block from 8221598Ch-822159F0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 822159F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822159F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822159F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822159F0);
		  /* 822159F0h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 822159F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822159F0h case    0:*/		return 0x822159F4;
		  /* 822159F4h */ case    1:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 822159F4h case    1:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 822159F4h case    1:*/		return 0x822159F8;
	}
	return 0x822159F8;
} // Block from 822159F0h-822159F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822159F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822159F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822159F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822159F8);
		  /* 822159F8h */ case    0:  		/* stw R10, <#[R11]> */
		/* 822159F8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822159F8h case    0:*/		return 0x822159FC;
		  /* 822159FCh */ case    1:  		/* lwz R10, <#[R4]> */
		/* 822159FCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 822159FCh case    1:*/		return 0x82215A00;
		  /* 82215A00h */ case    2:  		/* rlwinm R9, R10, 28, 29, 31 */
		/* 82215A00h case    2:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R9,regs.R10);
		/* 82215A00h case    2:*/		return 0x82215A04;
		  /* 82215A04h */ case    3:  		/* cmplwi CR6, R9, 4 */
		/* 82215A04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82215A04h case    3:*/		return 0x82215A08;
		  /* 82215A08h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82215A08h case    4:*/		if ( regs.CR[6].eq ) { return 0x82215A20;  }
		/* 82215A08h case    4:*/		return 0x82215A0C;
		  /* 82215A0Ch */ case    5:  		/* cmplwi CR6, R9, 5 */
		/* 82215A0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 82215A0Ch case    5:*/		return 0x82215A10;
		  /* 82215A10h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82215A10h case    6:*/		if ( regs.CR[6].eq ) { return 0x82215A20;  }
		/* 82215A10h case    6:*/		return 0x82215A14;
		  /* 82215A14h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82215A14h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A14h case    7:*/		return 0x82215A18;
		  /* 82215A18h */ case    8:  		/* rlwimi R10, R9, 0, 28, 24 */
		/* 82215A18h case    8:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R10,regs.R9);
		/* 82215A18h case    8:*/		return 0x82215A1C;
		  /* 82215A1Ch */ case    9:  		/* b 12 */
		/* 82215A1Ch case    9:*/		return 0x82215A28;
		/* 82215A1Ch case    9:*/		return 0x82215A20;
	}
	return 0x82215A20;
} // Block from 822159F8h-82215A20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82215A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A20);
		  /* 82215A20h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215A20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A20h case    0:*/		return 0x82215A24;
		  /* 82215A24h */ case    1:  		/* rlwinm R10, R10, 0, 28, 24 */
		/* 82215A24h case    1:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R10,regs.R10);
		/* 82215A24h case    1:*/		return 0x82215A28;
	}
	return 0x82215A28;
} // Block from 82215A20h-82215A28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82215A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A28);
		  /* 82215A28h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215A28h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A28h case    0:*/		return 0x82215A2C;
		  /* 82215A2Ch */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82215A2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215A2Ch case    1:*/		return 0x82215A30;
		  /* 82215A30h */ case    2:  		/* rlwinm R9, R10, 24, 29, 31 */
		/* 82215A30h case    2:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R9,regs.R10);
		/* 82215A30h case    2:*/		return 0x82215A34;
		  /* 82215A34h */ case    3:  		/* cmplwi CR6, R9, 4 */
		/* 82215A34h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82215A34h case    3:*/		return 0x82215A38;
		  /* 82215A38h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82215A38h case    4:*/		if ( regs.CR[6].eq ) { return 0x82215A50;  }
		/* 82215A38h case    4:*/		return 0x82215A3C;
		  /* 82215A3Ch */ case    5:  		/* cmplwi CR6, R9, 5 */
		/* 82215A3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 82215A3Ch case    5:*/		return 0x82215A40;
		  /* 82215A40h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82215A40h case    6:*/		if ( regs.CR[6].eq ) { return 0x82215A50;  }
		/* 82215A40h case    6:*/		return 0x82215A44;
		  /* 82215A44h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82215A44h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A44h case    7:*/		return 0x82215A48;
		  /* 82215A48h */ case    8:  		/* rlwimi R10, R9, 0, 24, 20 */
		/* 82215A48h case    8:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R10,regs.R9);
		/* 82215A48h case    8:*/		return 0x82215A4C;
		  /* 82215A4Ch */ case    9:  		/* b 12 */
		/* 82215A4Ch case    9:*/		return 0x82215A58;
		/* 82215A4Ch case    9:*/		return 0x82215A50;
	}
	return 0x82215A50;
} // Block from 82215A28h-82215A50h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82215A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A50);
		  /* 82215A50h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215A50h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A50h case    0:*/		return 0x82215A54;
		  /* 82215A54h */ case    1:  		/* rlwinm R10, R10, 0, 24, 20 */
		/* 82215A54h case    1:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R10,regs.R10);
		/* 82215A54h case    1:*/		return 0x82215A58;
	}
	return 0x82215A58;
} // Block from 82215A50h-82215A58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82215A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A58);
		  /* 82215A58h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215A58h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A58h case    0:*/		return 0x82215A5C;
		  /* 82215A5Ch */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82215A5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215A5Ch case    1:*/		return 0x82215A60;
		  /* 82215A60h */ case    2:  		/* rlwinm R9, R10, 20, 29, 31 */
		/* 82215A60h case    2:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R9,regs.R10);
		/* 82215A60h case    2:*/		return 0x82215A64;
		  /* 82215A64h */ case    3:  		/* cmplwi CR6, R9, 4 */
		/* 82215A64h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82215A64h case    3:*/		return 0x82215A68;
		  /* 82215A68h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82215A68h case    4:*/		if ( regs.CR[6].eq ) { return 0x82215A80;  }
		/* 82215A68h case    4:*/		return 0x82215A6C;
		  /* 82215A6Ch */ case    5:  		/* cmplwi CR6, R9, 5 */
		/* 82215A6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 82215A6Ch case    5:*/		return 0x82215A70;
		  /* 82215A70h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82215A70h case    6:*/		if ( regs.CR[6].eq ) { return 0x82215A80;  }
		/* 82215A70h case    6:*/		return 0x82215A74;
		  /* 82215A74h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82215A74h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A74h case    7:*/		return 0x82215A78;
		  /* 82215A78h */ case    8:  		/* rlwimi R10, R9, 0, 20, 16 */
		/* 82215A78h case    8:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R10,regs.R9);
		/* 82215A78h case    8:*/		return 0x82215A7C;
		  /* 82215A7Ch */ case    9:  		/* b 12 */
		/* 82215A7Ch case    9:*/		return 0x82215A88;
		/* 82215A7Ch case    9:*/		return 0x82215A80;
	}
	return 0x82215A80;
} // Block from 82215A58h-82215A80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82215A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A80);
		  /* 82215A80h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215A80h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A80h case    0:*/		return 0x82215A84;
		  /* 82215A84h */ case    1:  		/* rlwinm R10, R10, 0, 20, 16 */
		/* 82215A84h case    1:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R10,regs.R10);
		/* 82215A84h case    1:*/		return 0x82215A88;
	}
	return 0x82215A88;
} // Block from 82215A80h-82215A88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82215A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215A88);
		  /* 82215A88h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215A88h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215A88h case    0:*/		return 0x82215A8C;
		  /* 82215A8Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 82215A8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215A8Ch case    1:*/		return 0x82215A90;
		  /* 82215A90h */ case    2:  		/* lwz R10, <#[R3]> */
		/* 82215A90h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82215A90h case    2:*/		return 0x82215A94;
		  /* 82215A94h */ case    3:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82215A94h case    3:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82215A94h case    3:*/		return 0x82215A98;
		  /* 82215A98h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82215A98h case    4:*/		if ( regs.CR[0].eq ) { return 0x82215AA8;  }
		/* 82215A98h case    4:*/		return 0x82215A9C;
		  /* 82215A9Ch */ case    5:  		/* lwz R10, <#[R5]> */
		/* 82215A9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82215A9Ch case    5:*/		return 0x82215AA0;
		  /* 82215AA0h */ case    6:  		/* stw R10, <#[R11]> */
		/* 82215AA0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AA0h case    6:*/		return 0x82215AA4;
		  /* 82215AA4h */ case    7:  		/* addi R11, R11, 4 */
		/* 82215AA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215AA4h case    7:*/		return 0x82215AA8;
	}
	return 0x82215AA8;
} // Block from 82215A88h-82215AA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82215AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215AA8);
		  /* 82215AA8h */ case    0:  		/* bc 16, CR0_LT, -272 */
		/* 82215AA8h case    0:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82215998;  }
		/* 82215AA8h case    0:*/		return 0x82215AAC;
		  /* 82215AACh */ case    1:  		/* sth R29, <#[R11 + 2]> */
		/* 82215AACh case    1:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 82215AACh case    1:*/		return 0x82215AB0;
		  /* 82215AB0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82215AB0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AB0h case    2:*/		return 0x82215AB4;
		  /* 82215AB4h */ case    3:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82215AB4h case    3:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82215AB4h case    3:*/		return 0x82215AB8;
		  /* 82215AB8h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82215AB8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AB8h case    4:*/		return 0x82215ABC;
		  /* 82215ABCh */ case    5:  		/* addi R11, R11, 4 */
		/* 82215ABCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215ABCh case    5:*/		return 0x82215AC0;
		  /* 82215AC0h */ case    6:  		/* sth R8, <#[R11 + 2]> */
		/* 82215AC0h case    6:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82215AC0h case    6:*/		return 0x82215AC4;
		  /* 82215AC4h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 82215AC4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AC4h case    7:*/		return 0x82215AC8;
		  /* 82215AC8h */ case    8:  		/* rlwimi R10, R31, 18, 8, 15 */
		/* 82215AC8h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R31);
		/* 82215AC8h case    8:*/		return 0x82215ACC;
		  /* 82215ACCh */ case    9:  		/* stw R10, <#[R11]> */
		/* 82215ACCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215ACCh case    9:*/		return 0x82215AD0;
		  /* 82215AD0h */ case   10:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82215AD0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215AD0h case   10:*/		return 0x82215AD4;
		  /* 82215AD4h */ case   11:  		/* rlwinm R10, R10, 0, 24, 18 */
		/* 82215AD4h case   11:*/		cpu::op::rlwinm<0,0,24,18>(regs,&regs.R10,regs.R10);
		/* 82215AD4h case   11:*/		return 0x82215AD8;
		  /* 82215AD8h */ case   12:  		/* stw R10, <#[R11]> */
		/* 82215AD8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AD8h case   12:*/		return 0x82215ADC;
		  /* 82215ADCh */ case   13:  		/* lwz R9, <#[R4]> */
		/* 82215ADCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82215ADCh case   13:*/		return 0x82215AE0;
		  /* 82215AE0h */ case   14:  		/* rlwinm R9, R9, 0, 29, 31 */
		/* 82215AE0h case   14:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R9);
		/* 82215AE0h case   14:*/		return 0x82215AE4;
		  /* 82215AE4h */ case   15:  		/* cmplwi CR6, R9, 4 */
		/* 82215AE4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82215AE4h case   15:*/		return 0x82215AE8;
		  /* 82215AE8h */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 82215AE8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82215AF4;  }
		/* 82215AE8h case   16:*/		return 0x82215AEC;
		  /* 82215AECh */ case   17:  		/* cmplwi CR6, R9, 5 */
		/* 82215AECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 82215AECh case   17:*/		return 0x82215AF0;
		  /* 82215AF0h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 82215AF0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82215AFC;  }
		/* 82215AF0h case   18:*/		return 0x82215AF4;
	}
	return 0x82215AF4;
} // Block from 82215AA8h-82215AF4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82215AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215AF4);
		  /* 82215AF4h */ case    0:  		/* rlwimi R10, R30, 0, 30, 31 */
		/* 82215AF4h case    0:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R10,regs.R30);
		/* 82215AF4h case    0:*/		return 0x82215AF8;
		  /* 82215AF8h */ case    1:  		/* stw R10, <#[R11]> */
		/* 82215AF8h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215AF8h case    1:*/		return 0x82215AFC;
	}
	return 0x82215AFC;
} // Block from 82215AF4h-82215AFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82215AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215AFC);
		  /* 82215AFCh */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215AFCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215AFCh case    0:*/		return 0x82215B00;
		  /* 82215B00h */ case    1:  		/* rlwinm R10, R10, 28, 29, 31 */
		/* 82215B00h case    1:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R10,regs.R10);
		/* 82215B00h case    1:*/		return 0x82215B04;
		  /* 82215B04h */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82215B04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215B04h case    2:*/		return 0x82215B08;
		  /* 82215B08h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82215B08h case    3:*/		if ( regs.CR[6].eq ) { return 0x82215B14;  }
		/* 82215B08h case    3:*/		return 0x82215B0C;
		  /* 82215B0Ch */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215B0Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215B0Ch case    4:*/		return 0x82215B10;
		  /* 82215B10h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82215B10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215B20;  }
		/* 82215B10h case    5:*/		return 0x82215B14;
	}
	return 0x82215B14;
} // Block from 82215AFCh-82215B14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82215B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B14);
		  /* 82215B14h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215B14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B14h case    0:*/		return 0x82215B18;
		  /* 82215B18h */ case    1:  		/* rlwimi R10, R30, 2, 28, 29 */
		/* 82215B18h case    1:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R10,regs.R30);
		/* 82215B18h case    1:*/		return 0x82215B1C;
		  /* 82215B1Ch */ case    2:  		/* stw R10, <#[R11]> */
		/* 82215B1Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B1Ch case    2:*/		return 0x82215B20;
	}
	return 0x82215B20;
} // Block from 82215B14h-82215B20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82215B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B20);
		  /* 82215B20h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215B20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215B20h case    0:*/		return 0x82215B24;
		  /* 82215B24h */ case    1:  		/* rlwinm R10, R10, 24, 29, 31 */
		/* 82215B24h case    1:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R10,regs.R10);
		/* 82215B24h case    1:*/		return 0x82215B28;
		  /* 82215B28h */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82215B28h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215B28h case    2:*/		return 0x82215B2C;
		  /* 82215B2Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82215B2Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82215B38;  }
		/* 82215B2Ch case    3:*/		return 0x82215B30;
		  /* 82215B30h */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215B30h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215B30h case    4:*/		return 0x82215B34;
		  /* 82215B34h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82215B34h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215B44;  }
		/* 82215B34h case    5:*/		return 0x82215B38;
	}
	return 0x82215B38;
} // Block from 82215B20h-82215B38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82215B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B38);
		  /* 82215B38h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215B38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B38h case    0:*/		return 0x82215B3C;
		  /* 82215B3Ch */ case    1:  		/* rlwimi R10, R30, 4, 26, 27 */
		/* 82215B3Ch case    1:*/		cpu::op::rlwimi<0,4,26,27>(regs,&regs.R10,regs.R30);
		/* 82215B3Ch case    1:*/		return 0x82215B40;
		  /* 82215B40h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82215B40h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B40h case    2:*/		return 0x82215B44;
	}
	return 0x82215B44;
} // Block from 82215B38h-82215B44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82215B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B44);
		  /* 82215B44h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82215B44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215B44h case    0:*/		return 0x82215B48;
		  /* 82215B48h */ case    1:  		/* rlwinm R10, R10, 20, 29, 31 */
		/* 82215B48h case    1:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R10,regs.R10);
		/* 82215B48h case    1:*/		return 0x82215B4C;
		  /* 82215B4Ch */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82215B4Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215B4Ch case    2:*/		return 0x82215B50;
		  /* 82215B50h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82215B50h case    3:*/		if ( regs.CR[6].eq ) { return 0x82215B5C;  }
		/* 82215B50h case    3:*/		return 0x82215B54;
		  /* 82215B54h */ case    4:  		/* cmplwi CR6, R10, 5 */
		/* 82215B54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82215B54h case    4:*/		return 0x82215B58;
		  /* 82215B58h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82215B58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215B68;  }
		/* 82215B58h case    5:*/		return 0x82215B5C;
	}
	return 0x82215B5C;
} // Block from 82215B44h-82215B5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82215B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B5C);
		  /* 82215B5Ch */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82215B5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B5Ch case    0:*/		return 0x82215B60;
		  /* 82215B60h */ case    1:  		/* rlwimi R10, R30, 6, 24, 25 */
		/* 82215B60h case    1:*/		cpu::op::rlwimi<0,6,24,25>(regs,&regs.R10,regs.R30);
		/* 82215B60h case    1:*/		return 0x82215B64;
		  /* 82215B64h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82215B64h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B64h case    2:*/		return 0x82215B68;
	}
	return 0x82215B68;
} // Block from 82215B5Ch-82215B68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82215B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215B68);
		  /* 82215B68h */ case    0:  		/* li R10, 2 */
		/* 82215B68h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82215B68h case    0:*/		return 0x82215B6C;
		  /* 82215B6Ch */ case    1:  		/* addi R3, R11, 4 */
		/* 82215B6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82215B6Ch case    1:*/		return 0x82215B70;
		  /* 82215B70h */ case    2:  		/* mtspr CTR, R10 */
		/* 82215B70h case    2:*/		regs.CTR = regs.R10;
		/* 82215B70h case    2:*/		return 0x82215B74;
		  /* 82215B74h */ case    3:  		/* li R10, 0 */
		/* 82215B74h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82215B74h case    3:*/		return 0x82215B78;
		  /* 82215B78h */ case    4:  		/* addi R11, R3, 4 */
		/* 82215B78h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82215B78h case    4:*/		return 0x82215B7C;
		  /* 82215B7Ch */ case    5:  		/* sth R10, <#[R3 + 2]> */
		/* 82215B7Ch case    5:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R3 + 0x00000002) );
		/* 82215B7Ch case    5:*/		return 0x82215B80;
		  /* 82215B80h */ case    6:  		/* lwz R10, <#[R3]> */
		/* 82215B80h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82215B80h case    6:*/		return 0x82215B84;
		  /* 82215B84h */ case    7:  		/* rlwimi R10, R29, 16, 8, 15 */
		/* 82215B84h case    7:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R29);
		/* 82215B84h case    7:*/		return 0x82215B88;
		  /* 82215B88h */ case    8:  		/* stw R10, <#[R3]> */
		/* 82215B88h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82215B88h case    8:*/		return 0x82215B8C;
		  /* 82215B8Ch */ case    9:  		/* stb R30, <#[R3]> */
		/* 82215B8Ch case    9:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82215B8Ch case    9:*/		return 0x82215B90;
		  /* 82215B90h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 82215B90h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215B90h case   10:*/		return 0x82215B94;
		  /* 82215B94h */ case   11:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82215B94h case   11:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82215B94h case   11:*/		return 0x82215B98;
		  /* 82215B98h */ case   12:  		/* cmplwi CR6, R10, 4 */
		/* 82215B98h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82215B98h case   12:*/		return 0x82215B9C;
		  /* 82215B9Ch */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82215B9Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215B9Ch case   13:*/		return 0x82215BA0;
		  /* 82215BA0h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 82215BA0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82215BAC;  }
		/* 82215BA0h case   14:*/		return 0x82215BA4;
		  /* 82215BA4h */ case   15:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 82215BA4h case   15:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 82215BA4h case   15:*/		return 0x82215BA8;
		  /* 82215BA8h */ case   16:  		/* b 8 */
		/* 82215BA8h case   16:*/		return 0x82215BB0;
		/* 82215BA8h case   16:*/		return 0x82215BAC;
	}
	return 0x82215BAC;
} // Block from 82215B68h-82215BACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82215BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BAC);
		  /* 82215BACh */ case    0:  		/* rlwimi R10, R30, 0, 29, 31 */
		/* 82215BACh case    0:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R10,regs.R30);
		/* 82215BACh case    0:*/		return 0x82215BB0;
	}
	return 0x82215BB0;
} // Block from 82215BACh-82215BB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BB0);
		  /* 82215BB0h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215BB0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215BB0h case    0:*/		return 0x82215BB4;
		  /* 82215BB4h */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82215BB4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215BB4h case    1:*/		return 0x82215BB8;
		  /* 82215BB8h */ case    2:  		/* rlwinm R10, R10, 0, 25, 27 */
		/* 82215BB8h case    2:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R10,regs.R10);
		/* 82215BB8h case    2:*/		return 0x82215BBC;
		  /* 82215BBCh */ case    3:  		/* cmplwi CR6, R10, 64 */
		/* 82215BBCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 82215BBCh case    3:*/		return 0x82215BC0;
		  /* 82215BC0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82215BC0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215BC0h case    4:*/		return 0x82215BC4;
		  /* 82215BC4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82215BC4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215BD0;  }
		/* 82215BC4h case    5:*/		return 0x82215BC8;
		  /* 82215BC8h */ case    6:  		/* rlwinm R10, R10, 0, 28, 24 */
		/* 82215BC8h case    6:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R10,regs.R10);
		/* 82215BC8h case    6:*/		return 0x82215BCC;
		  /* 82215BCCh */ case    7:  		/* b 8 */
		/* 82215BCCh case    7:*/		return 0x82215BD4;
		/* 82215BCCh case    7:*/		return 0x82215BD0;
	}
	return 0x82215BD0;
} // Block from 82215BB0h-82215BD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82215BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BD0);
		  /* 82215BD0h */ case    0:  		/* rlwimi R10, R30, 4, 25, 27 */
		/* 82215BD0h case    0:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R10,regs.R30);
		/* 82215BD0h case    0:*/		return 0x82215BD4;
	}
	return 0x82215BD4;
} // Block from 82215BD0h-82215BD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BD4);
		  /* 82215BD4h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215BD4h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215BD4h case    0:*/		return 0x82215BD8;
		  /* 82215BD8h */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82215BD8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215BD8h case    1:*/		return 0x82215BDC;
		  /* 82215BDCh */ case    2:  		/* rlwinm R10, R10, 0, 21, 23 */
		/* 82215BDCh case    2:*/		cpu::op::rlwinm<0,0,21,23>(regs,&regs.R10,regs.R10);
		/* 82215BDCh case    2:*/		return 0x82215BE0;
		  /* 82215BE0h */ case    3:  		/* cmplwi CR6, R10, 1024 */
		/* 82215BE0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000400);
		/* 82215BE0h case    3:*/		return 0x82215BE4;
		  /* 82215BE4h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82215BE4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215BE4h case    4:*/		return 0x82215BE8;
		  /* 82215BE8h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82215BE8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215BF4;  }
		/* 82215BE8h case    5:*/		return 0x82215BEC;
		  /* 82215BECh */ case    6:  		/* rlwinm R10, R10, 0, 24, 20 */
		/* 82215BECh case    6:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R10,regs.R10);
		/* 82215BECh case    6:*/		return 0x82215BF0;
		  /* 82215BF0h */ case    7:  		/* b 8 */
		/* 82215BF0h case    7:*/		return 0x82215BF8;
		/* 82215BF0h case    7:*/		return 0x82215BF4;
	}
	return 0x82215BF4;
} // Block from 82215BD4h-82215BF4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82215BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BF4);
		  /* 82215BF4h */ case    0:  		/* rlwimi R10, R30, 8, 21, 23 */
		/* 82215BF4h case    0:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R10,regs.R30);
		/* 82215BF4h case    0:*/		return 0x82215BF8;
	}
	return 0x82215BF8;
} // Block from 82215BF4h-82215BF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215BF8);
		  /* 82215BF8h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215BF8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215BF8h case    0:*/		return 0x82215BFC;
		  /* 82215BFCh */ case    1:  		/* lwz R10, <#[R4]> */
		/* 82215BFCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215BFCh case    1:*/		return 0x82215C00;
		  /* 82215C00h */ case    2:  		/* rlwinm R10, R10, 0, 17, 19 */
		/* 82215C00h case    2:*/		cpu::op::rlwinm<0,0,17,19>(regs,&regs.R10,regs.R10);
		/* 82215C00h case    2:*/		return 0x82215C04;
		  /* 82215C04h */ case    3:  		/* cmplwi CR6, R10, 16384 */
		/* 82215C04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00004000);
		/* 82215C04h case    3:*/		return 0x82215C08;
		  /* 82215C08h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82215C08h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C08h case    4:*/		return 0x82215C0C;
		  /* 82215C0Ch */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82215C0Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82215C18;  }
		/* 82215C0Ch case    5:*/		return 0x82215C10;
		  /* 82215C10h */ case    6:  		/* rlwinm R10, R10, 0, 20, 16 */
		/* 82215C10h case    6:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R10,regs.R10);
		/* 82215C10h case    6:*/		return 0x82215C14;
		  /* 82215C14h */ case    7:  		/* b 8 */
		/* 82215C14h case    7:*/		return 0x82215C1C;
		/* 82215C14h case    7:*/		return 0x82215C18;
	}
	return 0x82215C18;
} // Block from 82215BF8h-82215C18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82215C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215C18);
		  /* 82215C18h */ case    0:  		/* rlwimi R10, R30, 12, 17, 19 */
		/* 82215C18h case    0:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R10,regs.R30);
		/* 82215C18h case    0:*/		return 0x82215C1C;
	}
	return 0x82215C1C;
} // Block from 82215C18h-82215C1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215C1C);
		  /* 82215C1Ch */ case    0:  		/* stw R10, <#[R11]> */
		/* 82215C1Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C1Ch case    0:*/		return 0x82215C20;
	}
	return 0x82215C20;
} // Block from 82215C1Ch-82215C20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215C20h
// Function '?DoTexConv_YUV@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215C20);
		  /* 82215C20h */ case    0:  		/* addi R3, R11, 4 */
		/* 82215C20h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82215C20h case    0:*/		return 0x82215C24;
		  /* 82215C24h */ case    1:  		/* bc 16, CR0_LT, -176 */
		/* 82215C24h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82215B74;  }
		/* 82215C24h case    1:*/		return 0x82215C28;
		  /* 82215C28h */ case    2:  		/* b -1591676 */
		/* 82215C28h case    2:*/		return 0x820912AC;
		/* 82215C28h case    2:*/		return 0x82215C2C;
		  /* 82215C2Ch */ case    3:  		/* nop */
		/* 82215C2Ch case    3:*/		cpu::op::nop();
		/* 82215C2Ch case    3:*/		return 0x82215C30;
		  /* 82215C30h */ case    4:  		/* li R10, 3 */
		/* 82215C30h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82215C30h case    4:*/		return 0x82215C34;
		  /* 82215C34h */ case    5:  		/* addi R11, R7, 4 */
		/* 82215C34h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4);
		/* 82215C34h case    5:*/		return 0x82215C38;
		  /* 82215C38h */ case    6:  		/* sth R10, <#[R7 + 2]> */
		/* 82215C38h case    6:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R7 + 0x00000002) );
		/* 82215C38h case    6:*/		return 0x82215C3C;
		  /* 82215C3Ch */ case    7:  		/* li R12, -26215 */
		/* 82215C3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82215C3Ch case    7:*/		return 0x82215C40;
		  /* 82215C40h */ case    8:  		/* lwz R10, <#[R7]> */
		/* 82215C40h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82215C40h case    8:*/		return 0x82215C44;
		  /* 82215C44h */ case    9:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82215C44h case    9:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82215C44h case    9:*/		return 0x82215C48;
		  /* 82215C48h */ case   10:  		/* stw R10, <#[R7]> */
		/* 82215C48h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82215C48h case   10:*/		return 0x82215C4C;
		  /* 82215C4Ch */ case   11:  		/* li R10, 1 */
		/* 82215C4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82215C4Ch case   11:*/		return 0x82215C50;
		  /* 82215C50h */ case   12:  		/* sth R6, <#[R7 + 6]> */
		/* 82215C50h case   12:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R7 + 0x00000006) );
		/* 82215C50h case   12:*/		return 0x82215C54;
		  /* 82215C54h */ case   13:  		/* addi R11, R11, 4 */
		/* 82215C54h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215C54h case   13:*/		return 0x82215C58;
		  /* 82215C58h */ case   14:  		/* lwz R8, <#[R7 + 4]> */
		/* 82215C58h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 82215C58h case   14:*/		return 0x82215C5C;
		  /* 82215C5Ch */ case   15:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82215C5Ch case   15:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82215C5Ch case   15:*/		return 0x82215C60;
		  /* 82215C60h */ case   16:  		/* stw R8, <#[R7 + 4]> */
		/* 82215C60h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 82215C60h case   16:*/		return 0x82215C64;
		  /* 82215C64h */ case   17:  		/* li R6, 0 */
		/* 82215C64h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82215C64h case   17:*/		return 0x82215C68;
		  /* 82215C68h */ case   18:  		/* li R8, 65 */
		/* 82215C68h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82215C68h case   18:*/		return 0x82215C6C;
		  /* 82215C6Ch */ case   19:  		/* sth R6, <#[R11 + 2]> */
		/* 82215C6Ch case   19:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82215C6Ch case   19:*/		return 0x82215C70;
		  /* 82215C70h */ case   20:  		/* mr R9, R3 */
		/* 82215C70h case   20:*/		regs.R9 = regs.R3;
		/* 82215C70h case   20:*/		return 0x82215C74;
		  /* 82215C74h */ case   21:  		/* lwz R7, <#[R11]> */
		/* 82215C74h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C74h case   21:*/		return 0x82215C78;
		  /* 82215C78h */ case   22:  		/* rlwimi R7, R8, 16, 8, 15 */
		/* 82215C78h case   22:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R8);
		/* 82215C78h case   22:*/		return 0x82215C7C;
		  /* 82215C7Ch */ case   23:  		/* stw R7, <#[R11]> */
		/* 82215C7Ch case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C7Ch case   23:*/		return 0x82215C80;
		  /* 82215C80h */ case   24:  		/* stb R10, <#[R11]> */
		/* 82215C80h case   24:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C80h case   24:*/		return 0x82215C84;
		  /* 82215C84h */ case   25:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82215C84h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215C84h case   25:*/		return 0x82215C88;
		  /* 82215C88h */ case   26:  		/* and R10, R10, R12 */
		/* 82215C88h case   26:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82215C88h case   26:*/		return 0x82215C8C;
		  /* 82215C8Ch */ case   27:  		/* ori R10, R10, 4369 */
		/* 82215C8Ch case   27:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1111);
		/* 82215C8Ch case   27:*/		return 0x82215C90;
		  /* 82215C90h */ case   28:  		/* stw R10, <#[R11]> */
		/* 82215C90h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215C90h case   28:*/		return 0x82215C94;
		  /* 82215C94h */ case   29:  		/* addi R11, R11, 4 */
		/* 82215C94h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215C94h case   29:*/		return 0x82215C98;
		  /* 82215C98h */ case   30:  		/* lwz R10, <#[R3]> */
		/* 82215C98h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82215C98h case   30:*/		return 0x82215C9C;
		  /* 82215C9Ch */ case   31:  		/* sth R10, <#[R11 + 2]> */
		/* 82215C9Ch case   31:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82215C9Ch case   31:*/		return 0x82215CA0;
		  /* 82215CA0h */ case   32:  		/* lwz R10, <#[R11]> */
		/* 82215CA0h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CA0h case   32:*/		return 0x82215CA4;
		  /* 82215CA4h */ case   33:  		/* lwz R8, <#[R3]> */
		/* 82215CA4h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82215CA4h case   33:*/		return 0x82215CA8;
		  /* 82215CA8h */ case   34:  		/* rlwimi R8, R10, 0, 16, 9 */
		/* 82215CA8h case   34:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R10);
		/* 82215CA8h case   34:*/		return 0x82215CAC;
		  /* 82215CACh */ case   35:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215CACh case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215CACh case   35:*/		return 0x82215CB0;
		  /* 82215CB0h */ case   36:  		/* stw R8, <#[R11]> */
		/* 82215CB0h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CB0h case   36:*/		return 0x82215CB4;
		  /* 82215CB4h */ case   37:  		/* lwz R8, <#[R3]> */
		/* 82215CB4h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82215CB4h case   37:*/		return 0x82215CB8;
		  /* 82215CB8h */ case   38:  		/* rlwimi R8, R10, 0, 9, 7 */
		/* 82215CB8h case   38:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R10);
		/* 82215CB8h case   38:*/		return 0x82215CBC;
		  /* 82215CBCh */ case   39:  		/* oris R10, R8, 64 */
		/* 82215CBCh case   39:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R8,0x40);
		/* 82215CBCh case   39:*/		return 0x82215CC0;
		  /* 82215CC0h */ case   40:  		/* stw R10, <#[R11]> */
		/* 82215CC0h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CC0h case   40:*/		return 0x82215CC4;
		  /* 82215CC4h */ case   41:  		/* lwz R10, <#[R4]> */
		/* 82215CC4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82215CC4h case   41:*/		return 0x82215CC8;
		  /* 82215CC8h */ case   42:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82215CC8h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215CC8h case   42:*/		return 0x82215CCC;
		  /* 82215CCCh */ case   43:  		/* addi R3, R11, 4 */
		/* 82215CCCh case   43:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82215CCCh case   43:*/		return 0x82215CD0;
		  /* 82215CD0h */ case   44:  		/* rlwimi R10, R8, 0, 0, 28 */
		/* 82215CD0h case   44:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R8);
		/* 82215CD0h case   44:*/		return 0x82215CD4;
		  /* 82215CD4h */ case   45:  		/* stw R10, <#[R11]> */
		/* 82215CD4h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CD4h case   45:*/		return 0x82215CD8;
		  /* 82215CD8h */ case   46:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82215CD8h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82215CD8h case   46:*/		return 0x82215CDC;
		  /* 82215CDCh */ case   47:  		/* lwz R8, <#[R4]> */
		/* 82215CDCh case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215CDCh case   47:*/		return 0x82215CE0;
		  /* 82215CE0h */ case   48:  		/* rlwimi R8, R10, 0, 28, 24 */
		/* 82215CE0h case   48:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R8,regs.R10);
		/* 82215CE0h case   48:*/		return 0x82215CE4;
		  /* 82215CE4h */ case   49:  		/* stw R8, <#[R11]> */
		/* 82215CE4h case   49:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CE4h case   49:*/		return 0x82215CE8;
		  /* 82215CE8h */ case   50:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215CE8h case   50:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215CE8h case   50:*/		return 0x82215CEC;
		  /* 82215CECh */ case   51:  		/* lwz R8, <#[R4]> */
		/* 82215CECh case   51:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215CECh case   51:*/		return 0x82215CF0;
		  /* 82215CF0h */ case   52:  		/* rlwimi R8, R10, 0, 24, 20 */
		/* 82215CF0h case   52:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R10);
		/* 82215CF0h case   52:*/		return 0x82215CF4;
		  /* 82215CF4h */ case   53:  		/* stw R8, <#[R11]> */
		/* 82215CF4h case   53:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215CF4h case   53:*/		return 0x82215CF8;
		  /* 82215CF8h */ case   54:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215CF8h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215CF8h case   54:*/		return 0x82215CFC;
		  /* 82215CFCh */ case   55:  		/* lwz R8, <#[R4]> */
		/* 82215CFCh case   55:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215CFCh case   55:*/		return 0x82215D00;
		  /* 82215D00h */ case   56:  		/* rlwimi R8, R10, 0, 20, 16 */
		/* 82215D00h case   56:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R10);
		/* 82215D00h case   56:*/		return 0x82215D04;
		  /* 82215D04h */ case   57:  		/* stw R8, <#[R11]> */
		/* 82215D04h case   57:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215D04h case   57:*/		return 0x82215D08;
		  /* 82215D08h */ case   58:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215D08h case   58:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215D08h case   58:*/		return 0x82215D0C;
		  /* 82215D0Ch */ case   59:  		/* lwz R8, <#[R4]> */
		/* 82215D0Ch case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215D0Ch case   59:*/		return 0x82215D10;
		  /* 82215D10h */ case   60:  		/* nor R8, R8, R8 */
		/* 82215D10h case   60:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82215D10h case   60:*/		return 0x82215D14;
		  /* 82215D14h */ case   61:  		/* rlwimi R8, R10, 0, 29, 27 */
		/* 82215D14h case   61:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R8,regs.R10);
		/* 82215D14h case   61:*/		return 0x82215D18;
		  /* 82215D18h */ case   62:  		/* stw R8, <#[R11]> */
		/* 82215D18h case   62:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215D18h case   62:*/		return 0x82215D1C;
		  /* 82215D1Ch */ case   63:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215D1Ch case   63:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215D1Ch case   63:*/		return 0x82215D20;
		  /* 82215D20h */ case   64:  		/* lwz R8, <#[R4]> */
		/* 82215D20h case   64:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215D20h case   64:*/		return 0x82215D24;
		  /* 82215D24h */ case   65:  		/* nor R8, R8, R8 */
		/* 82215D24h case   65:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82215D24h case   65:*/		return 0x82215D28;
		  /* 82215D28h */ case   66:  		/* rlwimi R8, R10, 0, 25, 23 */
		/* 82215D28h case   66:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R8,regs.R10);
		/* 82215D28h case   66:*/		return 0x82215D2C;
		  /* 82215D2Ch */ case   67:  		/* stw R8, <#[R11]> */
		/* 82215D2Ch case   67:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215D2Ch case   67:*/		return 0x82215D30;
		  /* 82215D30h */ case   68:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215D30h case   68:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215D30h case   68:*/		return 0x82215D34;
		  /* 82215D34h */ case   69:  		/* lwz R8, <#[R4]> */
		/* 82215D34h case   69:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215D34h case   69:*/		return 0x82215D38;
		  /* 82215D38h */ case   70:  		/* nor R8, R8, R8 */
		/* 82215D38h case   70:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82215D38h case   70:*/		return 0x82215D3C;
		  /* 82215D3Ch */ case   71:  		/* rlwimi R8, R10, 0, 21, 19 */
		/* 82215D3Ch case   71:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R8,regs.R10);
		/* 82215D3Ch case   71:*/		return 0x82215D40;
		  /* 82215D40h */ case   72:  		/* stw R8, <#[R11]> */
		/* 82215D40h case   72:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215D40h case   72:*/		return 0x82215D44;
		  /* 82215D44h */ case   73:  		/* rlwinm R10, R8, 0, 0, 31 */
		/* 82215D44h case   73:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R8);
		/* 82215D44h case   73:*/		return 0x82215D48;
		  /* 82215D48h */ case   74:  		/* lwz R8, <#[R4]> */
		/* 82215D48h case   74:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82215D48h case   74:*/		return 0x82215D4C;
		  /* 82215D4Ch */ case   75:  		/* nor R8, R8, R8 */
		/* 82215D4Ch case   75:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82215D4Ch case   75:*/		return 0x82215D50;
		  /* 82215D50h */ case   76:  		/* rlwimi R8, R10, 0, 17, 15 */
		/* 82215D50h case   76:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R8,regs.R10);
		/* 82215D50h case   76:*/		return 0x82215D54;
		  /* 82215D54h */ case   77:  		/* stw R8, <#[R11]> */
		/* 82215D54h case   77:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215D54h case   77:*/		return 0x82215D58;
		  /* 82215D58h */ case   78:  		/* lwz R11, <#[R9]> */
		/* 82215D58h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82215D58h case   78:*/		return 0x82215D5C;
		  /* 82215D5Ch */ case   79:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82215D5Ch case   79:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82215D5Ch case   79:*/		return 0x82215D60;
		  /* 82215D60h */ case   80:  		/* bclr 12, CR0_EQ */
		/* 82215D60h case   80:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82215D60h case   80:*/		return 0x82215D64;
	}
	return 0x82215D64;
} // Block from 82215C20h-82215D64h (81 instructions)

//////////////////////////////////////////////////////
// Block at 82215D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215D64);
		  /* 82215D64h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82215D64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82215D64h case    0:*/		return 0x82215D68;
		  /* 82215D68h */ case    1:  		/* stw R11, <#[R3]> */
		/* 82215D68h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82215D68h case    1:*/		return 0x82215D6C;
		  /* 82215D6Ch */ case    2:  		/* addi R3, R3, 4 */
		/* 82215D6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82215D6Ch case    2:*/		return 0x82215D70;
		  /* 82215D70h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82215D70h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82215D70h case    3:*/		return 0x82215D74;
	}
	return 0x82215D74;
} // Block from 82215D64h-82215D74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82215D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215D74);
		  /* 82215D74h */ case    0:  		/* nop */
		/* 82215D74h case    0:*/		cpu::op::nop();
		/* 82215D74h case    0:*/		return 0x82215D78;
	}
	return 0x82215D78;
} // Block from 82215D74h-82215D78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82215D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215D78);
		  /* 82215D78h */ case    0:  		/* mfspr R12, LR */
		/* 82215D78h case    0:*/		regs.R12 = regs.LR;
		/* 82215D78h case    0:*/		return 0x82215D7C;
		  /* 82215D7Ch */ case    1:  		/* bl -1592104 */
		/* 82215D7Ch case    1:*/		regs.LR = 0x82215D80; return 0x82091254;
		/* 82215D7Ch case    1:*/		return 0x82215D80;
		  /* 82215D80h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82215D80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82215D80h case    2:*/		return 0x82215D84;
		  /* 82215D84h */ case    3:  		/* mr R31, R4 */
		/* 82215D84h case    3:*/		regs.R31 = regs.R4;
		/* 82215D84h case    3:*/		return 0x82215D88;
		  /* 82215D88h */ case    4:  		/* mr R30, R5 */
		/* 82215D88h case    4:*/		regs.R30 = regs.R5;
		/* 82215D88h case    4:*/		return 0x82215D8C;
		  /* 82215D8Ch */ case    5:  		/* mr R28, R6 */
		/* 82215D8Ch case    5:*/		regs.R28 = regs.R6;
		/* 82215D8Ch case    5:*/		return 0x82215D90;
		  /* 82215D90h */ case    6:  		/* mr R27, R7 */
		/* 82215D90h case    6:*/		regs.R27 = regs.R7;
		/* 82215D90h case    6:*/		return 0x82215D94;
		  /* 82215D94h */ case    7:  		/* mr R29, R8 */
		/* 82215D94h case    7:*/		regs.R29 = regs.R8;
		/* 82215D94h case    7:*/		return 0x82215D98;
		  /* 82215D98h */ case    8:  		/* bl -27504 */
		/* 82215D98h case    8:*/		regs.LR = 0x82215D9C; return 0x8220F228;
		/* 82215D98h case    8:*/		return 0x82215D9C;
		  /* 82215D9Ch */ case    9:  		/* li R11, 13 */
		/* 82215D9Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 82215D9Ch case    9:*/		return 0x82215DA0;
		  /* 82215DA0h */ case   10:  		/* li R10, 1 */
		/* 82215DA0h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82215DA0h case   10:*/		return 0x82215DA4;
		  /* 82215DA4h */ case   11:  		/* sth R11, <#[R29 + 2]> */
		/* 82215DA4h case   11:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 82215DA4h case   11:*/		return 0x82215DA8;
		  /* 82215DA8h */ case   12:  		/* rlwinm R6, R27, 0, 16, 31 */
		/* 82215DA8h case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R6,regs.R27);
		/* 82215DA8h case   12:*/		return 0x82215DAC;
		  /* 82215DACh */ case   13:  		/* lwz R11, <#[R29]> */
		/* 82215DACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82215DACh case   13:*/		return 0x82215DB0;
		  /* 82215DB0h */ case   14:  		/* rlwimi R11, R10, 17, 3, 15 */
		/* 82215DB0h case   14:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R11,regs.R10);
		/* 82215DB0h case   14:*/		return 0x82215DB4;
		  /* 82215DB4h */ case   15:  		/* stw R11, <#[R29]> */
		/* 82215DB4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82215DB4h case   15:*/		return 0x82215DB8;
		  /* 82215DB8h */ case   16:  		/* addi R11, R29, 4 */
		/* 82215DB8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82215DB8h case   16:*/		return 0x82215DBC;
		  /* 82215DBCh */ case   17:  		/* sth R6, <#[R29 + 6]> */
		/* 82215DBCh case   17:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R29 + 0x00000006) );
		/* 82215DBCh case   17:*/		return 0x82215DC0;
		  /* 82215DC0h */ case   18:  		/* lwz R9, <#[R29 + 4]> */
		/* 82215DC0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 82215DC0h case   18:*/		return 0x82215DC4;
		  /* 82215DC4h */ case   19:  		/* addi R11, R11, 4 */
		/* 82215DC4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215DC4h case   19:*/		return 0x82215DC8;
		  /* 82215DC8h */ case   20:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82215DC8h case   20:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82215DC8h case   20:*/		return 0x82215DCC;
		  /* 82215DCCh */ case   21:  		/* stw R9, <#[R29 + 4]> */
		/* 82215DCCh case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 82215DCCh case   21:*/		return 0x82215DD0;
		  /* 82215DD0h */ case   22:  		/* lwz R9, <#[R31]> */
		/* 82215DD0h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82215DD0h case   22:*/		return 0x82215DD4;
		  /* 82215DD4h */ case   23:  		/* sth R9, <#[R11 + 2]> */
		/* 82215DD4h case   23:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215DD4h case   23:*/		return 0x82215DD8;
		  /* 82215DD8h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 82215DD8h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215DD8h case   24:*/		return 0x82215DDC;
		  /* 82215DDCh */ case   25:  		/* lwz R8, <#[R31]> */
		/* 82215DDCh case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82215DDCh case   25:*/		return 0x82215DE0;
		  /* 82215DE0h */ case   26:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 82215DE0h case   26:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 82215DE0h case   26:*/		return 0x82215DE4;
		  /* 82215DE4h */ case   27:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82215DE4h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82215DE4h case   27:*/		return 0x82215DE8;
		  /* 82215DE8h */ case   28:  		/* stw R8, <#[R11]> */
		/* 82215DE8h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215DE8h case   28:*/		return 0x82215DEC;
		  /* 82215DECh */ case   29:  		/* lwz R8, <#[R31]> */
		/* 82215DECh case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82215DECh case   29:*/		return 0x82215DF0;
		  /* 82215DF0h */ case   30:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 82215DF0h case   30:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 82215DF0h case   30:*/		return 0x82215DF4;
		  /* 82215DF4h */ case   31:  		/* oris R9, R8, 64 */
		/* 82215DF4h case   31:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82215DF4h case   31:*/		return 0x82215DF8;
		  /* 82215DF8h */ case   32:  		/* stw R9, <#[R11]> */
		/* 82215DF8h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215DF8h case   32:*/		return 0x82215DFC;
		  /* 82215DFCh */ case   33:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82215DFCh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215DFCh case   33:*/		return 0x82215E00;
		  /* 82215E00h */ case   34:  		/* lwz R8, <#[R30]> */
		/* 82215E00h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82215E00h case   34:*/		return 0x82215E04;
		  /* 82215E04h */ case   35:  		/* rlwimi R8, R9, 0, 0, 28 */
		/* 82215E04h case   35:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R8,regs.R9);
		/* 82215E04h case   35:*/		return 0x82215E08;
		  /* 82215E08h */ case   36:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82215E08h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82215E08h case   36:*/		return 0x82215E0C;
		  /* 82215E0Ch */ case   37:  		/* stw R8, <#[R11]> */
		/* 82215E0Ch case   37:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E0Ch case   37:*/		return 0x82215E10;
		  /* 82215E10h */ case   38:  		/* lwz R8, <#[R30]> */
		/* 82215E10h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82215E10h case   38:*/		return 0x82215E14;
		  /* 82215E14h */ case   39:  		/* rlwimi R8, R9, 0, 28, 24 */
		/* 82215E14h case   39:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R8,regs.R9);
		/* 82215E14h case   39:*/		return 0x82215E18;
		  /* 82215E18h */ case   40:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82215E18h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82215E18h case   40:*/		return 0x82215E1C;
		  /* 82215E1Ch */ case   41:  		/* stw R8, <#[R11]> */
		/* 82215E1Ch case   41:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E1Ch case   41:*/		return 0x82215E20;
		  /* 82215E20h */ case   42:  		/* lwz R8, <#[R30]> */
		/* 82215E20h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82215E20h case   42:*/		return 0x82215E24;
		  /* 82215E24h */ case   43:  		/* rlwimi R8, R9, 0, 24, 20 */
		/* 82215E24h case   43:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R9);
		/* 82215E24h case   43:*/		return 0x82215E28;
		  /* 82215E28h */ case   44:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82215E28h case   44:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82215E28h case   44:*/		return 0x82215E2C;
		  /* 82215E2Ch */ case   45:  		/* stw R8, <#[R11]> */
		/* 82215E2Ch case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E2Ch case   45:*/		return 0x82215E30;
		  /* 82215E30h */ case   46:  		/* lwz R8, <#[R30]> */
		/* 82215E30h case   46:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82215E30h case   46:*/		return 0x82215E34;
		  /* 82215E34h */ case   47:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 82215E34h case   47:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 82215E34h case   47:*/		return 0x82215E38;
		  /* 82215E38h */ case   48:  		/* stw R8, <#[R11]> */
		/* 82215E38h case   48:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E38h case   48:*/		return 0x82215E3C;
		  /* 82215E3Ch */ case   49:  		/* addi R11, R11, 4 */
		/* 82215E3Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215E3Ch case   49:*/		return 0x82215E40;
		  /* 82215E40h */ case   50:  		/* lwz R9, <#[R31]> */
		/* 82215E40h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82215E40h case   50:*/		return 0x82215E44;
		  /* 82215E44h */ case   51:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82215E44h case   51:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82215E44h case   51:*/		return 0x82215E48;
		  /* 82215E48h */ case   52:  		/* bc 12, CR0_EQ, 16 */
		/* 82215E48h case   52:*/		if ( regs.CR[0].eq ) { return 0x82215E58;  }
		/* 82215E48h case   52:*/		return 0x82215E4C;
		  /* 82215E4Ch */ case   53:  		/* lwz R9, <#[R28]> */
		/* 82215E4Ch case   53:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82215E4Ch case   53:*/		return 0x82215E50;
		  /* 82215E50h */ case   54:  		/* stw R9, <#[R11]> */
		/* 82215E50h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E50h case   54:*/		return 0x82215E54;
		  /* 82215E54h */ case   55:  		/* addi R11, R11, 4 */
		/* 82215E54h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215E54h case   55:*/		return 0x82215E58;
	}
	return 0x82215E58;
} // Block from 82215D78h-82215E58h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82215E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215E58);
		  /* 82215E58h */ case    0:  		/* li R7, 0 */
		/* 82215E58h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82215E58h case    0:*/		return 0x82215E5C;
		  /* 82215E5Ch */ case    1:  		/* li R8, 65 */
		/* 82215E5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82215E5Ch case    1:*/		return 0x82215E60;
		  /* 82215E60h */ case    2:  		/* sth R7, <#[R11 + 2]> */
		/* 82215E60h case    2:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215E60h case    2:*/		return 0x82215E64;
		  /* 82215E64h */ case    3:  		/* li R12, -26215 */
		/* 82215E64h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82215E64h case    3:*/		return 0x82215E68;
		  /* 82215E68h */ case    4:  		/* lwz R9, <#[R11]> */
		/* 82215E68h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E68h case    4:*/		return 0x82215E6C;
		  /* 82215E6Ch */ case    5:  		/* rlwimi R9, R8, 16, 8, 15 */
		/* 82215E6Ch case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R9,regs.R8);
		/* 82215E6Ch case    5:*/		return 0x82215E70;
		  /* 82215E70h */ case    6:  		/* stw R9, <#[R11]> */
		/* 82215E70h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E70h case    6:*/		return 0x82215E74;
		  /* 82215E74h */ case    7:  		/* li R5, 86 */
		/* 82215E74h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x56);
		/* 82215E74h case    7:*/		return 0x82215E78;
		  /* 82215E78h */ case    8:  		/* stb R10, <#[R11]> */
		/* 82215E78h case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E78h case    8:*/		return 0x82215E7C;
		  /* 82215E7Ch */ case    9:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82215E7Ch case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82215E7Ch case    9:*/		return 0x82215E80;
		  /* 82215E80h */ case   10:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82215E80h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215E80h case   10:*/		return 0x82215E84;
		  /* 82215E84h */ case   11:  		/* and R4, R4, R12 */
		/* 82215E84h case   11:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82215E84h case   11:*/		return 0x82215E88;
		  /* 82215E88h */ case   12:  		/* ori R4, R4, 4369 */
		/* 82215E88h case   12:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1111);
		/* 82215E88h case   12:*/		return 0x82215E8C;
		  /* 82215E8Ch */ case   13:  		/* li R12, -17477 */
		/* 82215E8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 82215E8Ch case   13:*/		return 0x82215E90;
		  /* 82215E90h */ case   14:  		/* stw R4, <#[R11]> */
		/* 82215E90h case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E90h case   14:*/		return 0x82215E94;
		  /* 82215E94h */ case   15:  		/* addi R11, R11, 4 */
		/* 82215E94h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215E94h case   15:*/		return 0x82215E98;
		  /* 82215E98h */ case   16:  		/* sth R7, <#[R11 + 2]> */
		/* 82215E98h case   16:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215E98h case   16:*/		return 0x82215E9C;
		  /* 82215E9Ch */ case   17:  		/* lwz R4, <#[R11]> */
		/* 82215E9Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215E9Ch case   17:*/		return 0x82215EA0;
		  /* 82215EA0h */ case   18:  		/* rlwimi R4, R8, 16, 8, 15 */
		/* 82215EA0h case   18:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R4,regs.R8);
		/* 82215EA0h case   18:*/		return 0x82215EA4;
		  /* 82215EA4h */ case   19:  		/* stw R4, <#[R11]> */
		/* 82215EA4h case   19:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EA4h case   19:*/		return 0x82215EA8;
		  /* 82215EA8h */ case   20:  		/* stb R10, <#[R11]> */
		/* 82215EA8h case   20:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EA8h case   20:*/		return 0x82215EAC;
		  /* 82215EACh */ case   21:  		/* lwzu R4, <#[R11 + 4]> */
		/* 82215EACh case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215EACh case   21:*/		return 0x82215EB0;
		  /* 82215EB0h */ case   22:  		/* and R4, R4, R12 */
		/* 82215EB0h case   22:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82215EB0h case   22:*/		return 0x82215EB4;
		  /* 82215EB4h */ case   23:  		/* ori R4, R4, 13107 */
		/* 82215EB4h case   23:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x3333);
		/* 82215EB4h case   23:*/		return 0x82215EB8;
	}
	return 0x82215EB8;
} // Block from 82215E58h-82215EB8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82215EB8h
// Function '?DoTexConv_BdrClr@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_TEXTURE_INFO@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215EB8);
		  /* 82215EB8h */ case    0:  		/* stw R4, <#[R11]> */
		/* 82215EB8h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EB8h case    0:*/		return 0x82215EBC;
		  /* 82215EBCh */ case    1:  		/* addi R11, R11, 4 */
		/* 82215EBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215EBCh case    1:*/		return 0x82215EC0;
		  /* 82215EC0h */ case    2:  		/* sth R5, <#[R11 + 2]> */
		/* 82215EC0h case    2:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82215EC0h case    2:*/		return 0x82215EC4;
		  /* 82215EC4h */ case    3:  		/* lwz R5, <#[R11]> */
		/* 82215EC4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EC4h case    3:*/		return 0x82215EC8;
		  /* 82215EC8h */ case    4:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 82215EC8h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 82215EC8h case    4:*/		return 0x82215ECC;
		  /* 82215ECCh */ case    5:  		/* stw R5, <#[R11]> */
		/* 82215ECCh case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215ECCh case    5:*/		return 0x82215ED0;
		  /* 82215ED0h */ case    6:  		/* addi R11, R11, 4 */
		/* 82215ED0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215ED0h case    6:*/		return 0x82215ED4;
		  /* 82215ED4h */ case    7:  		/* sth R9, <#[R11 + 2]> */
		/* 82215ED4h case    7:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215ED4h case    7:*/		return 0x82215ED8;
		  /* 82215ED8h */ case    8:  		/* lwz R5, <#[R11]> */
		/* 82215ED8h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215ED8h case    8:*/		return 0x82215EDC;
		  /* 82215EDCh */ case    9:  		/* rlwimi R5, R10, 18, 8, 15 */
		/* 82215EDCh case    9:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R5,regs.R10);
		/* 82215EDCh case    9:*/		return 0x82215EE0;
		  /* 82215EE0h */ case   10:  		/* stw R5, <#[R11]> */
		/* 82215EE0h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EE0h case   10:*/		return 0x82215EE4;
		  /* 82215EE4h */ case   11:  		/* addi R11, R11, 4 */
		/* 82215EE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215EE4h case   11:*/		return 0x82215EE8;
		  /* 82215EE8h */ case   12:  		/* lwz R5, <#[R31]> */
		/* 82215EE8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82215EE8h case   12:*/		return 0x82215EEC;
		  /* 82215EECh */ case   13:  		/* sth R5, <#[R11 + 2]> */
		/* 82215EECh case   13:*/		cpu::mem::store16( regs, regs.R5, (uint32)(regs.R11 + 0x00000002) );
		/* 82215EECh case   13:*/		return 0x82215EF0;
		  /* 82215EF0h */ case   14:  		/* lwz R5, <#[R11]> */
		/* 82215EF0h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215EF0h case   14:*/		return 0x82215EF4;
		  /* 82215EF4h */ case   15:  		/* lwz R4, <#[R31]> */
		/* 82215EF4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82215EF4h case   15:*/		return 0x82215EF8;
		  /* 82215EF8h */ case   16:  		/* rlwimi R4, R5, 0, 16, 9 */
		/* 82215EF8h case   16:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R4,regs.R5);
		/* 82215EF8h case   16:*/		return 0x82215EFC;
		  /* 82215EFCh */ case   17:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82215EFCh case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82215EFCh case   17:*/		return 0x82215F00;
		  /* 82215F00h */ case   18:  		/* stw R4, <#[R11]> */
		/* 82215F00h case   18:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F00h case   18:*/		return 0x82215F04;
		  /* 82215F04h */ case   19:  		/* lwz R4, <#[R31]> */
		/* 82215F04h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82215F04h case   19:*/		return 0x82215F08;
		  /* 82215F08h */ case   20:  		/* rlwimi R4, R5, 0, 9, 7 */
		/* 82215F08h case   20:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R4,regs.R5);
		/* 82215F08h case   20:*/		return 0x82215F0C;
		  /* 82215F0Ch */ case   21:  		/* oris R5, R4, 64 */
		/* 82215F0Ch case   21:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R4,0x40);
		/* 82215F0Ch case   21:*/		return 0x82215F10;
		  /* 82215F10h */ case   22:  		/* stw R5, <#[R11]> */
		/* 82215F10h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F10h case   22:*/		return 0x82215F14;
		  /* 82215F14h */ case   23:  		/* lwzu R5, <#[R11 + 4]> */
		/* 82215F14h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215F14h case   23:*/		return 0x82215F18;
		  /* 82215F18h */ case   24:  		/* lwz R4, <#[R30]> */
		/* 82215F18h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82215F18h case   24:*/		return 0x82215F1C;
		  /* 82215F1Ch */ case   25:  		/* rlwimi R4, R5, 0, 0, 28 */
		/* 82215F1Ch case   25:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R4,regs.R5);
		/* 82215F1Ch case   25:*/		return 0x82215F20;
		  /* 82215F20h */ case   26:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82215F20h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82215F20h case   26:*/		return 0x82215F24;
		  /* 82215F24h */ case   27:  		/* stw R4, <#[R11]> */
		/* 82215F24h case   27:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F24h case   27:*/		return 0x82215F28;
		  /* 82215F28h */ case   28:  		/* lwz R4, <#[R30]> */
		/* 82215F28h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82215F28h case   28:*/		return 0x82215F2C;
		  /* 82215F2Ch */ case   29:  		/* rlwimi R4, R5, 0, 28, 24 */
		/* 82215F2Ch case   29:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R4,regs.R5);
		/* 82215F2Ch case   29:*/		return 0x82215F30;
		  /* 82215F30h */ case   30:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82215F30h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82215F30h case   30:*/		return 0x82215F34;
		  /* 82215F34h */ case   31:  		/* stw R4, <#[R11]> */
		/* 82215F34h case   31:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F34h case   31:*/		return 0x82215F38;
		  /* 82215F38h */ case   32:  		/* lwz R4, <#[R30]> */
		/* 82215F38h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82215F38h case   32:*/		return 0x82215F3C;
		  /* 82215F3Ch */ case   33:  		/* rlwimi R4, R5, 0, 24, 20 */
		/* 82215F3Ch case   33:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R4,regs.R5);
		/* 82215F3Ch case   33:*/		return 0x82215F40;
		  /* 82215F40h */ case   34:  		/* rlwinm R5, R4, 0, 0, 31 */
		/* 82215F40h case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R4);
		/* 82215F40h case   34:*/		return 0x82215F44;
		  /* 82215F44h */ case   35:  		/* stw R4, <#[R11]> */
		/* 82215F44h case   35:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F44h case   35:*/		return 0x82215F48;
		  /* 82215F48h */ case   36:  		/* lwz R4, <#[R30]> */
		/* 82215F48h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82215F48h case   36:*/		return 0x82215F4C;
		  /* 82215F4Ch */ case   37:  		/* rlwimi R4, R5, 0, 20, 16 */
		/* 82215F4Ch case   37:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R4,regs.R5);
		/* 82215F4Ch case   37:*/		return 0x82215F50;
		  /* 82215F50h */ case   38:  		/* stw R4, <#[R11]> */
		/* 82215F50h case   38:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F50h case   38:*/		return 0x82215F54;
		  /* 82215F54h */ case   39:  		/* addi R11, R11, 4 */
		/* 82215F54h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215F54h case   39:*/		return 0x82215F58;
		  /* 82215F58h */ case   40:  		/* lwz R5, <#[R31]> */
		/* 82215F58h case   40:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82215F58h case   40:*/		return 0x82215F5C;
		  /* 82215F5Ch */ case   41:  		/* rlwinm. R5, R5, 0, 8, 8 */
		/* 82215F5Ch case   41:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R5,regs.R5);
		/* 82215F5Ch case   41:*/		return 0x82215F60;
		  /* 82215F60h */ case   42:  		/* bc 12, CR0_EQ, 16 */
		/* 82215F60h case   42:*/		if ( regs.CR[0].eq ) { return 0x82215F70;  }
		/* 82215F60h case   42:*/		return 0x82215F64;
		  /* 82215F64h */ case   43:  		/* lwz R5, <#[R28]> */
		/* 82215F64h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000000) );
		/* 82215F64h case   43:*/		return 0x82215F68;
		  /* 82215F68h */ case   44:  		/* stw R5, <#[R11]> */
		/* 82215F68h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F68h case   44:*/		return 0x82215F6C;
		  /* 82215F6Ch */ case   45:  		/* addi R11, R11, 4 */
		/* 82215F6Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215F6Ch case   45:*/		return 0x82215F70;
	}
	return 0x82215F70;
} // Block from 82215EB8h-82215F70h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82215F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215F70);
		  /* 82215F70h */ case    0:  		/* sth R7, <#[R11 + 2]> */
		/* 82215F70h case    0:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215F70h case    0:*/		return 0x82215F74;
		  /* 82215F74h */ case    1:  		/* li R12, -30584 */
		/* 82215F74h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82215F74h case    1:*/		return 0x82215F78;
		  /* 82215F78h */ case    2:  		/* lwz R5, <#[R11]> */
		/* 82215F78h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F78h case    2:*/		return 0x82215F7C;
		  /* 82215F7Ch */ case    3:  		/* rlwimi R5, R8, 16, 8, 15 */
		/* 82215F7Ch case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R5,regs.R8);
		/* 82215F7Ch case    3:*/		return 0x82215F80;
		  /* 82215F80h */ case    4:  		/* stw R5, <#[R11]> */
		/* 82215F80h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F80h case    4:*/		return 0x82215F84;
		  /* 82215F84h */ case    5:  		/* li R7, 73 */
		/* 82215F84h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x49);
		/* 82215F84h case    5:*/		return 0x82215F88;
		  /* 82215F88h */ case    6:  		/* stb R10, <#[R11]> */
		/* 82215F88h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F88h case    6:*/		return 0x82215F8C;
		  /* 82215F8Ch */ case    7:  		/* lwzu R8, <#[R11 + 4]> */
		/* 82215F8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82215F8Ch case    7:*/		return 0x82215F90;
		  /* 82215F90h */ case    8:  		/* and R8, R8, R12 */
		/* 82215F90h case    8:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R12);
		/* 82215F90h case    8:*/		return 0x82215F94;
		  /* 82215F94h */ case    9:  		/* stw R8, <#[R11]> */
		/* 82215F94h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215F94h case    9:*/		return 0x82215F98;
		  /* 82215F98h */ case   10:  		/* addi R11, R11, 4 */
		/* 82215F98h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215F98h case   10:*/		return 0x82215F9C;
		  /* 82215F9Ch */ case   11:  		/* sth R7, <#[R11 + 2]> */
		/* 82215F9Ch case   11:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82215F9Ch case   11:*/		return 0x82215FA0;
		  /* 82215FA0h */ case   12:  		/* lwz R8, <#[R11]> */
		/* 82215FA0h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FA0h case   12:*/		return 0x82215FA4;
		  /* 82215FA4h */ case   13:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82215FA4h case   13:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82215FA4h case   13:*/		return 0x82215FA8;
		  /* 82215FA8h */ case   14:  		/* stw R8, <#[R11]> */
		/* 82215FA8h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FA8h case   14:*/		return 0x82215FAC;
		  /* 82215FACh */ case   15:  		/* addi R11, R11, 4 */
		/* 82215FACh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215FACh case   15:*/		return 0x82215FB0;
		  /* 82215FB0h */ case   16:  		/* sth R6, <#[R11 + 2]> */
		/* 82215FB0h case   16:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82215FB0h case   16:*/		return 0x82215FB4;
		  /* 82215FB4h */ case   17:  		/* lwz R8, <#[R11]> */
		/* 82215FB4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FB4h case   17:*/		return 0x82215FB8;
		  /* 82215FB8h */ case   18:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82215FB8h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82215FB8h case   18:*/		return 0x82215FBC;
		  /* 82215FBCh */ case   19:  		/* stw R8, <#[R11]> */
		/* 82215FBCh case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FBCh case   19:*/		return 0x82215FC0;
		  /* 82215FC0h */ case   20:  		/* addi R11, R11, 4 */
		/* 82215FC0h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215FC0h case   20:*/		return 0x82215FC4;
		  /* 82215FC4h */ case   21:  		/* sth R6, <#[R11 + 2]> */
		/* 82215FC4h case   21:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000002) );
		/* 82215FC4h case   21:*/		return 0x82215FC8;
		  /* 82215FC8h */ case   22:  		/* lwz R8, <#[R11]> */
		/* 82215FC8h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FC8h case   22:*/		return 0x82215FCC;
		  /* 82215FCCh */ case   23:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82215FCCh case   23:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82215FCCh case   23:*/		return 0x82215FD0;
		  /* 82215FD0h */ case   24:  		/* stw R8, <#[R11]> */
		/* 82215FD0h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FD0h case   24:*/		return 0x82215FD4;
		  /* 82215FD4h */ case   25:  		/* addi R11, R11, 4 */
		/* 82215FD4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82215FD4h case   25:*/		return 0x82215FD8;
		  /* 82215FD8h */ case   26:  		/* addi R3, R11, 4 */
		/* 82215FD8h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82215FD8h case   26:*/		return 0x82215FDC;
		  /* 82215FDCh */ case   27:  		/* sth R9, <#[R11 + 2]> */
		/* 82215FDCh case   27:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82215FDCh case   27:*/		return 0x82215FE0;
		  /* 82215FE0h */ case   28:  		/* lwz R9, <#[R11]> */
		/* 82215FE0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FE0h case   28:*/		return 0x82215FE4;
		  /* 82215FE4h */ case   29:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82215FE4h case   29:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82215FE4h case   29:*/		return 0x82215FE8;
		  /* 82215FE8h */ case   30:  		/* stw R9, <#[R11]> */
		/* 82215FE8h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82215FE8h case   30:*/		return 0x82215FEC;
		  /* 82215FECh */ case   31:  		/* addi R1, R1, 128 */
		/* 82215FECh case   31:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82215FECh case   31:*/		return 0x82215FF0;
		  /* 82215FF0h */ case   32:  		/* b -1592652 */
		/* 82215FF0h case   32:*/		return 0x820912A4;
		/* 82215FF0h case   32:*/		return 0x82215FF4;
		  /* 82215FF4h */ case   33:  		/* nop */
		/* 82215FF4h case   33:*/		cpu::op::nop();
		/* 82215FF4h case   33:*/		return 0x82215FF8;
	}
	return 0x82215FF8;
} // Block from 82215F70h-82215FF8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82215FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82215FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82215FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82215FF8);
		  /* 82215FF8h */ case    0:  		/* mfspr R12, LR */
		/* 82215FF8h case    0:*/		regs.R12 = regs.LR;
		/* 82215FF8h case    0:*/		return 0x82215FFC;
		  /* 82215FFCh */ case    1:  		/* bl -1592752 */
		/* 82215FFCh case    1:*/		regs.LR = 0x82216000; return 0x8209124C;
		/* 82215FFCh case    1:*/		return 0x82216000;
		  /* 82216000h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82216000h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82216000h case    2:*/		return 0x82216004;
		  /* 82216004h */ case    3:  		/* li R11, 81 */
		/* 82216004h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x51);
		/* 82216004h case    3:*/		return 0x82216008;
		  /* 82216008h */ case    4:  		/* lwz R10, <#[R4]> */
		/* 82216008h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82216008h case    4:*/		return 0x8221600C;
		  /* 8221600Ch */ case    5:  		/* li R26, 1 */
		/* 8221600Ch case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8221600Ch case    5:*/		return 0x82216010;
		  /* 82216010h */ case    6:  		/* sth R11, <#[R7 + 2]> */
		/* 82216010h case    6:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R7 + 0x00000002) );
		/* 82216010h case    6:*/		return 0x82216014;
		  /* 82216014h */ case    7:  		/* rlwinm R27, R6, 0, 16, 31 */
		/* 82216014h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R27,regs.R6);
		/* 82216014h case    7:*/		return 0x82216018;
		  /* 82216018h */ case    8:  		/* lwz R11, <#[R7]> */
		/* 82216018h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82216018h case    8:*/		return 0x8221601C;
		  /* 8221601Ch */ case    9:  		/* rlwimi R11, R26, 17, 3, 15 */
		/* 8221601Ch case    9:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R11,regs.R26);
		/* 8221601Ch case    9:*/		return 0x82216020;
		  /* 82216020h */ case   10:  		/* stw R11, <#[R7]> */
		/* 82216020h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82216020h case   10:*/		return 0x82216024;
		  /* 82216024h */ case   11:  		/* addi R11, R7, 4 */
		/* 82216024h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4);
		/* 82216024h case   11:*/		return 0x82216028;
		  /* 82216028h */ case   12:  		/* sth R27, <#[R7 + 6]> */
		/* 82216028h case   12:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R7 + 0x00000006) );
		/* 82216028h case   12:*/		return 0x8221602C;
		  /* 8221602Ch */ case   13:  		/* rlwinm R28, R10, 11, 29, 31 */
		/* 8221602Ch case   13:*/		cpu::op::rlwinm<0,11,29,31>(regs,&regs.R28,regs.R10);
		/* 8221602Ch case   13:*/		return 0x82216030;
		  /* 82216030h */ case   14:  		/* lwz R10, <#[R7 + 4]> */
		/* 82216030h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 82216030h case   14:*/		return 0x82216034;
		  /* 82216034h */ case   15:  		/* addi R11, R11, 4 */
		/* 82216034h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216034h case   15:*/		return 0x82216038;
		  /* 82216038h */ case   16:  		/* rlwimi R10, R26, 18, 8, 15 */
		/* 82216038h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R26);
		/* 82216038h case   16:*/		return 0x8221603C;
		  /* 8221603Ch */ case   17:  		/* stw R10, <#[R7 + 4]> */
		/* 8221603Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 8221603Ch case   17:*/		return 0x82216040;
		  /* 82216040h */ case   18:  		/* mr R31, R3 */
		/* 82216040h case   18:*/		regs.R31 = regs.R3;
		/* 82216040h case   18:*/		return 0x82216044;
		  /* 82216044h */ case   19:  		/* lwz R10, <#[R3]> */
		/* 82216044h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82216044h case   19:*/		return 0x82216048;
		  /* 82216048h */ case   20:  		/* mr R30, R4 */
		/* 82216048h case   20:*/		regs.R30 = regs.R4;
		/* 82216048h case   20:*/		return 0x8221604C;
		  /* 8221604Ch */ case   21:  		/* sth R10, <#[R11 + 2]> */
		/* 8221604Ch case   21:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221604Ch case   21:*/		return 0x82216050;
		  /* 82216050h */ case   22:  		/* mr R25, R5 */
		/* 82216050h case   22:*/		regs.R25 = regs.R5;
		/* 82216050h case   22:*/		return 0x82216054;
		  /* 82216054h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 82216054h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216054h case   23:*/		return 0x82216058;
		  /* 82216058h */ case   24:  		/* cmplwi CR6, R28, 1 */
		/* 82216058h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82216058h case   24:*/		return 0x8221605C;
		  /* 8221605Ch */ case   25:  		/* lwz R9, <#[R3]> */
		/* 8221605Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8221605Ch case   25:*/		return 0x82216060;
		  /* 82216060h */ case   26:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82216060h case   26:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82216060h case   26:*/		return 0x82216064;
		  /* 82216064h */ case   27:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216064h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216064h case   27:*/		return 0x82216068;
		  /* 82216068h */ case   28:  		/* stw R9, <#[R11]> */
		/* 82216068h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216068h case   28:*/		return 0x8221606C;
		  /* 8221606Ch */ case   29:  		/* lwz R9, <#[R3]> */
		/* 8221606Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8221606Ch case   29:*/		return 0x82216070;
		  /* 82216070h */ case   30:  		/* addi R29, R11, 4 */
		/* 82216070h case   30:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4);
		/* 82216070h case   30:*/		return 0x82216074;
		  /* 82216074h */ case   31:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82216074h case   31:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82216074h case   31:*/		return 0x82216078;
		  /* 82216078h */ case   32:  		/* oris R10, R9, 64 */
		/* 82216078h case   32:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 82216078h case   32:*/		return 0x8221607C;
		  /* 8221607Ch */ case   33:  		/* stw R10, <#[R11]> */
		/* 8221607Ch case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221607Ch case   33:*/		return 0x82216080;
		  /* 82216080h */ case   34:  		/* bc 12, CR6_EQ, 72 */
		/* 82216080h case   34:*/		if ( regs.CR[6].eq ) { return 0x822160C8;  }
		/* 82216080h case   34:*/		return 0x82216084;
		  /* 82216084h */ case   35:  		/* cmplwi CR6, R28, 2 */
		/* 82216084h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 82216084h case   35:*/		return 0x82216088;
		  /* 82216088h */ case   36:  		/* bc 12, CR6_EQ, 56 */
		/* 82216088h case   36:*/		if ( regs.CR[6].eq ) { return 0x822160C0;  }
		/* 82216088h case   36:*/		return 0x8221608C;
		  /* 8221608Ch */ case   37:  		/* cmplwi CR6, R28, 3 */
		/* 8221608Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000003);
		/* 8221608Ch case   37:*/		return 0x82216090;
		  /* 82216090h */ case   38:  		/* bc 12, CR6_EQ, 40 */
		/* 82216090h case   38:*/		if ( regs.CR[6].eq ) { return 0x822160B8;  }
		/* 82216090h case   38:*/		return 0x82216094;
		  /* 82216094h */ case   39:  		/* lis R11, -32252 */
		/* 82216094h case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216094h case   39:*/		return 0x82216098;
		  /* 82216098h */ case   40:  		/* lis R10, -32252 */
		/* 82216098h case   40:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82216098h case   40:*/		return 0x8221609C;
		  /* 8221609Ch */ case   41:  		/* lis R9, -32253 */
		/* 8221609Ch case   41:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221609Ch case   41:*/		return 0x822160A0;
		  /* 822160A0h */ case   42:  		/* addi R6, R11, -7312 */
		/* 822160A0h case   42:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 822160A0h case   42:*/		return 0x822160A4;
		  /* 822160A4h */ case   43:  		/* addi R5, R10, -25364 */
		/* 822160A4h case   43:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 822160A4h case   43:*/		return 0x822160A8;
		  /* 822160A8h */ case   44:  		/* addi R4, R9, 27460 */
		/* 822160A8h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 822160A8h case   44:*/		return 0x822160AC;
		  /* 822160ACh */ case   45:  		/* li R7, 10629 */
		/* 822160ACh case   45:*/		cpu::op::li<0>(regs,&regs.R7,0x2985);
		/* 822160ACh case   45:*/		return 0x822160B0;
		  /* 822160B0h */ case   46:  		/* li R3, 0 */
		/* 822160B0h case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822160B0h case   46:*/		return 0x822160B4;
		  /* 822160B4h */ case   47:  		/* bl -779436 */
		/* 822160B4h case   47:*/		regs.LR = 0x822160B8; return 0x82157C08;
		/* 822160B4h case   47:*/		return 0x822160B8;
	}
	return 0x822160B8;
} // Block from 82215FF8h-822160B8h (48 instructions)

//////////////////////////////////////////////////////
// Block at 822160B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822160B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822160B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822160B8);
		  /* 822160B8h */ case    0:  		/* li R11, 3 */
		/* 822160B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 822160B8h case    0:*/		return 0x822160BC;
		  /* 822160BCh */ case    1:  		/* b 16 */
		/* 822160BCh case    1:*/		return 0x822160CC;
		/* 822160BCh case    1:*/		return 0x822160C0;
	}
	return 0x822160C0;
} // Block from 822160B8h-822160C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822160C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822160C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822160C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822160C0);
		  /* 822160C0h */ case    0:  		/* li R11, 2 */
		/* 822160C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 822160C0h case    0:*/		return 0x822160C4;
		  /* 822160C4h */ case    1:  		/* b 8 */
		/* 822160C4h case    1:*/		return 0x822160CC;
		/* 822160C4h case    1:*/		return 0x822160C8;
	}
	return 0x822160C8;
} // Block from 822160C0h-822160C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822160C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822160C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822160C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822160C8);
		  /* 822160C8h */ case    0:  		/* mr R11, R26 */
		/* 822160C8h case    0:*/		regs.R11 = regs.R26;
		/* 822160C8h case    0:*/		return 0x822160CC;
	}
	return 0x822160CC;
} // Block from 822160C8h-822160CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822160CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822160CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822160CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822160CC);
		  /* 822160CCh */ case    0:  		/* lwz R10, <#[R29]> */
		/* 822160CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 822160CCh case    0:*/		return 0x822160D0;
		  /* 822160D0h */ case    1:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 822160D0h case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 822160D0h case    1:*/		return 0x822160D4;
		  /* 822160D4h */ case    2:  		/* li R8, 73 */
		/* 822160D4h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x49);
		/* 822160D4h case    2:*/		return 0x822160D8;
	}
	return 0x822160D8;
} // Block from 822160CCh-822160D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822160D8h
// Function '?DoMemExport@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822160D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822160D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822160D8);
		  /* 822160D8h */ case    0:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 822160D8h case    0:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 822160D8h case    0:*/		return 0x822160DC;
		  /* 822160DCh */ case    1:  		/* mr R7, R9 */
		/* 822160DCh case    1:*/		regs.R7 = regs.R9;
		/* 822160DCh case    1:*/		return 0x822160E0;
		  /* 822160E0h */ case    2:  		/* or R10, R10, R9 */
		/* 822160E0h case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 822160E0h case    2:*/		return 0x822160E4;
		  /* 822160E4h */ case    3:  		/* rlwimi R7, R11, 4, 25, 27 */
		/* 822160E4h case    3:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R7,regs.R11);
		/* 822160E4h case    3:*/		return 0x822160E8;
		  /* 822160E8h */ case    4:  		/* rlwinm R10, R10, 0, 28, 24 */
		/* 822160E8h case    4:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R10,regs.R10);
		/* 822160E8h case    4:*/		return 0x822160EC;
		  /* 822160ECh */ case    5:  		/* rlwinm R7, R7, 4, 0, 27 */
		/* 822160ECh case    5:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R7,regs.R7);
		/* 822160ECh case    5:*/		return 0x822160F0;
		  /* 822160F0h */ case    6:  		/* rlwinm R10, R10, 0, 24, 20 */
		/* 822160F0h case    6:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R10,regs.R10);
		/* 822160F0h case    6:*/		return 0x822160F4;
		  /* 822160F4h */ case    7:  		/* li R9, 17 */
		/* 822160F4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 822160F4h case    7:*/		return 0x822160F8;
		  /* 822160F8h */ case    8:  		/* or R7, R7, R10 */
		/* 822160F8h case    8:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 822160F8h case    8:*/		return 0x822160FC;
		  /* 822160FCh */ case    9:  		/* li R10, 0 */
		/* 822160FCh case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822160FCh case    9:*/		return 0x82216100;
		  /* 82216100h */ case   10:  		/* rlwimi R7, R11, 12, 17, 19 */
		/* 82216100h case   10:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R7,regs.R11);
		/* 82216100h case   10:*/		return 0x82216104;
		  /* 82216104h */ case   11:  		/* addi R11, R29, 4 */
		/* 82216104h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82216104h case   11:*/		return 0x82216108;
		  /* 82216108h */ case   12:  		/* stw R7, <#[R29]> */
		/* 82216108h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 82216108h case   12:*/		return 0x8221610C;
		  /* 8221610Ch */ case   13:  		/* cmplwi CR6, R28, 1 */
		/* 8221610Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 8221610Ch case   13:*/		return 0x82216110;
		  /* 82216110h */ case   14:  		/* sth R8, <#[R29 + 6]> */
		/* 82216110h case   14:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R29 + 0x00000006) );
		/* 82216110h case   14:*/		return 0x82216114;
		  /* 82216114h */ case   15:  		/* addi R11, R11, 4 */
		/* 82216114h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216114h case   15:*/		return 0x82216118;
		  /* 82216118h */ case   16:  		/* lwz R8, <#[R29 + 4]> */
		/* 82216118h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000004) );
		/* 82216118h case   16:*/		return 0x8221611C;
		  /* 8221611Ch */ case   17:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 8221611Ch case   17:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 8221611Ch case   17:*/		return 0x82216120;
		  /* 82216120h */ case   18:  		/* stw R8, <#[R29 + 4]> */
		/* 82216120h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000004) );
		/* 82216120h case   18:*/		return 0x82216124;
		  /* 82216124h */ case   19:  		/* sth R27, <#[R11 + 2]> */
		/* 82216124h case   19:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 82216124h case   19:*/		return 0x82216128;
		  /* 82216128h */ case   20:  		/* lwz R8, <#[R11]> */
		/* 82216128h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216128h case   20:*/		return 0x8221612C;
		  /* 8221612Ch */ case   21:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 8221612Ch case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 8221612Ch case   21:*/		return 0x82216130;
		  /* 82216130h */ case   22:  		/* stw R8, <#[R11]> */
		/* 82216130h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216130h case   22:*/		return 0x82216134;
		  /* 82216134h */ case   23:  		/* stwu R10, <#[R11 + 4]> */
		/* 82216134h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216134h case   23:*/		return 0x82216138;
		  /* 82216138h */ case   24:  		/* bc 12, CR6_EQ, 48 */
		/* 82216138h case   24:*/		if ( regs.CR[6].eq ) { return 0x82216168;  }
		/* 82216138h case   24:*/		return 0x8221613C;
		  /* 8221613Ch */ case   25:  		/* cmplwi CR6, R28, 2 */
		/* 8221613Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 8221613Ch case   25:*/		return 0x82216140;
		  /* 82216140h */ case   26:  		/* bc 12, CR6_EQ, 28 */
		/* 82216140h case   26:*/		if ( regs.CR[6].eq ) { return 0x8221615C;  }
		/* 82216140h case   26:*/		return 0x82216144;
		  /* 82216144h */ case   27:  		/* cmplwi CR6, R28, 3 */
		/* 82216144h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000003);
		/* 82216144h case   27:*/		return 0x82216148;
		  /* 82216148h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 82216148h case   28:*/		if ( regs.CR[6].eq ) { return 0x82216154;  }
		/* 82216148h case   28:*/		return 0x8221614C;
		  /* 8221614Ch */ case   29:  		/* li R8, 85 */
		/* 8221614Ch case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x55);
		/* 8221614Ch case   29:*/		return 0x82216150;
		  /* 82216150h */ case   30:  		/* b 36 */
		/* 82216150h case   30:*/		return 0x82216174;
		/* 82216150h case   30:*/		return 0x82216154;
	}
	return 0x82216154;
} // Block from 822160D8h-82216154h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82216154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216154);
		  /* 82216154h */ case    0:  		/* li R8, 64 */
		/* 82216154h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x40);
		/* 82216154h case    0:*/		return 0x82216158;
		  /* 82216158h */ case    1:  		/* stw R8, <#[R11]> */
		/* 82216158h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216158h case    1:*/		return 0x8221615C;
	}
	return 0x8221615C;
} // Block from 82216154h-8221615Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221615Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221615C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221615C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221615C);
		  /* 8221615Ch */ case    0:  		/* lwz R8, <#[R11]> */
		/* 8221615Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221615Ch case    0:*/		return 0x82216160;
		  /* 82216160h */ case    1:  		/* rlwimi R8, R26, 4, 26, 27 */
		/* 82216160h case    1:*/		cpu::op::rlwimi<0,4,26,27>(regs,&regs.R8,regs.R26);
		/* 82216160h case    1:*/		return 0x82216164;
		  /* 82216164h */ case    2:  		/* stw R8, <#[R11]> */
		/* 82216164h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216164h case    2:*/		return 0x82216168;
	}
	return 0x82216168;
} // Block from 8221615Ch-82216168h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216168);
		  /* 82216168h */ case    0:  		/* lwz R8, <#[R11]> */
		/* 82216168h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216168h case    0:*/		return 0x8221616C;
		  /* 8221616Ch */ case    1:  		/* li R7, 5 */
		/* 8221616Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 8221616Ch case    1:*/		return 0x82216170;
		  /* 82216170h */ case    2:  		/* rlwimi R8, R7, 0, 28, 31 */
		/* 82216170h case    2:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R8,regs.R7);
		/* 82216170h case    2:*/		return 0x82216174;
	}
	return 0x82216174;
} // Block from 82216168h-82216174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216174);
		  /* 82216174h */ case    0:  		/* stw R8, <#[R11]> */
		/* 82216174h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216174h case    0:*/		return 0x82216178;
		  /* 82216178h */ case    1:  		/* addi R11, R11, 4 */
		/* 82216178h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216178h case    1:*/		return 0x8221617C;
		  /* 8221617Ch */ case    2:  		/* lwz R8, <#[R31]> */
		/* 8221617Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8221617Ch case    2:*/		return 0x82216180;
		  /* 82216180h */ case    3:  		/* sth R8, <#[R11 + 2]> */
		/* 82216180h case    3:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82216180h case    3:*/		return 0x82216184;
		  /* 82216184h */ case    4:  		/* lwz R7, <#[R31]> */
		/* 82216184h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82216184h case    4:*/		return 0x82216188;
		  /* 82216188h */ case    5:  		/* lwz R8, <#[R11]> */
		/* 82216188h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216188h case    5:*/		return 0x8221618C;
		  /* 8221618Ch */ case    6:  		/* rlwimi R7, R8, 0, 16, 9 */
		/* 8221618Ch case    6:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R7,regs.R8);
		/* 8221618Ch case    6:*/		return 0x82216190;
		  /* 82216190h */ case    7:  		/* stw R7, <#[R11]> */
		/* 82216190h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216190h case    7:*/		return 0x82216194;
		  /* 82216194h */ case    8:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82216194h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82216194h case    8:*/		return 0x82216198;
		  /* 82216198h */ case    9:  		/* lwz R7, <#[R31]> */
		/* 82216198h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82216198h case    9:*/		return 0x8221619C;
		  /* 8221619Ch */ case   10:  		/* rlwimi R7, R8, 0, 9, 7 */
		/* 8221619Ch case   10:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R7,regs.R8);
		/* 8221619Ch case   10:*/		return 0x822161A0;
		  /* 822161A0h */ case   11:  		/* oris R8, R7, 64 */
		/* 822161A0h case   11:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R7,0x40);
		/* 822161A0h case   11:*/		return 0x822161A4;
		  /* 822161A4h */ case   12:  		/* stw R8, <#[R11]> */
		/* 822161A4h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822161A4h case   12:*/		return 0x822161A8;
		  /* 822161A8h */ case   13:  		/* lwzu R7, <#[R11 + 4]> */
		/* 822161A8h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822161A8h case   13:*/		return 0x822161AC;
		  /* 822161ACh */ case   14:  		/* lwz R8, <#[R30]> */
		/* 822161ACh case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 822161ACh case   14:*/		return 0x822161B0;
		  /* 822161B0h */ case   15:  		/* rlwimi R8, R7, 0, 0, 28 */
		/* 822161B0h case   15:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R8,regs.R7);
		/* 822161B0h case   15:*/		return 0x822161B4;
		  /* 822161B4h */ case   16:  		/* stw R8, <#[R11]> */
		/* 822161B4h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822161B4h case   16:*/		return 0x822161B8;
		  /* 822161B8h */ case   17:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 822161B8h case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 822161B8h case   17:*/		return 0x822161BC;
		  /* 822161BCh */ case   18:  		/* lwz R7, <#[R30]> */
		/* 822161BCh case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 822161BCh case   18:*/		return 0x822161C0;
		  /* 822161C0h */ case   19:  		/* rlwimi R7, R8, 0, 28, 24 */
		/* 822161C0h case   19:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R7,regs.R8);
		/* 822161C0h case   19:*/		return 0x822161C4;
		  /* 822161C4h */ case   20:  		/* stw R7, <#[R11]> */
		/* 822161C4h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822161C4h case   20:*/		return 0x822161C8;
		  /* 822161C8h */ case   21:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 822161C8h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 822161C8h case   21:*/		return 0x822161CC;
		  /* 822161CCh */ case   22:  		/* lwz R8, <#[R30]> */
		/* 822161CCh case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 822161CCh case   22:*/		return 0x822161D0;
		  /* 822161D0h */ case   23:  		/* rlwimi R8, R7, 0, 24, 20 */
		/* 822161D0h case   23:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R7);
		/* 822161D0h case   23:*/		return 0x822161D4;
		  /* 822161D4h */ case   24:  		/* stw R8, <#[R11]> */
		/* 822161D4h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822161D4h case   24:*/		return 0x822161D8;
		  /* 822161D8h */ case   25:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 822161D8h case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 822161D8h case   25:*/		return 0x822161DC;
		  /* 822161DCh */ case   26:  		/* lwz R7, <#[R30]> */
		/* 822161DCh case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 822161DCh case   26:*/		return 0x822161E0;
		  /* 822161E0h */ case   27:  		/* rlwimi R7, R8, 0, 20, 16 */
		/* 822161E0h case   27:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R7,regs.R8);
		/* 822161E0h case   27:*/		return 0x822161E4;
		  /* 822161E4h */ case   28:  		/* stw R7, <#[R11]> */
		/* 822161E4h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822161E4h case   28:*/		return 0x822161E8;
		  /* 822161E8h */ case   29:  		/* addi R11, R11, 4 */
		/* 822161E8h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822161E8h case   29:*/		return 0x822161EC;
		  /* 822161ECh */ case   30:  		/* lwz R8, <#[R31]> */
		/* 822161ECh case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 822161ECh case   30:*/		return 0x822161F0;
		  /* 822161F0h */ case   31:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 822161F0h case   31:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 822161F0h case   31:*/		return 0x822161F4;
		  /* 822161F4h */ case   32:  		/* bc 12, CR0_EQ, 16 */
		/* 822161F4h case   32:*/		if ( regs.CR[0].eq ) { return 0x82216204;  }
		/* 822161F4h case   32:*/		return 0x822161F8;
		  /* 822161F8h */ case   33:  		/* lwz R8, <#[R25]> */
		/* 822161F8h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000000) );
		/* 822161F8h case   33:*/		return 0x822161FC;
		  /* 822161FCh */ case   34:  		/* stw R8, <#[R11]> */
		/* 822161FCh case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822161FCh case   34:*/		return 0x82216200;
		  /* 82216200h */ case   35:  		/* addi R11, R11, 4 */
		/* 82216200h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216200h case   35:*/		return 0x82216204;
	}
	return 0x82216204;
} // Block from 82216174h-82216204h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82216204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216204);
		  /* 82216204h */ case    0:  		/* sth R27, <#[R11 + 2]> */
		/* 82216204h case    0:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 82216204h case    0:*/		return 0x82216208;
		  /* 82216208h */ case    1:  		/* li R8, 65 */
		/* 82216208h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82216208h case    1:*/		return 0x8221620C;
		  /* 8221620Ch */ case    2:  		/* lwz R7, <#[R11]> */
		/* 8221620Ch case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221620Ch case    2:*/		return 0x82216210;
		  /* 82216210h */ case    3:  		/* rlwimi R7, R26, 18, 8, 15 */
		/* 82216210h case    3:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R26);
		/* 82216210h case    3:*/		return 0x82216214;
		  /* 82216214h */ case    4:  		/* stw R7, <#[R11]> */
		/* 82216214h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216214h case    4:*/		return 0x82216218;
		  /* 82216218h */ case    5:  		/* addi R11, R11, 4 */
		/* 82216218h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216218h case    5:*/		return 0x8221621C;
		  /* 8221621Ch */ case    6:  		/* cmplwi CR6, R28, 1 */
		/* 8221621Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 8221621Ch case    6:*/		return 0x82216220;
		  /* 82216220h */ case    7:  		/* sth R8, <#[R11 + 2]> */
		/* 82216220h case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82216220h case    7:*/		return 0x82216224;
		  /* 82216224h */ case    8:  		/* lwz R8, <#[R11]> */
		/* 82216224h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216224h case    8:*/		return 0x82216228;
		  /* 82216228h */ case    9:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82216228h case    9:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82216228h case    9:*/		return 0x8221622C;
		  /* 8221622Ch */ case   10:  		/* stw R8, <#[R11]> */
		/* 8221622Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221622Ch case   10:*/		return 0x82216230;
		  /* 82216230h */ case   11:  		/* addi R11, R11, 4 */
		/* 82216230h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216230h case   11:*/		return 0x82216234;
		  /* 82216234h */ case   12:  		/* sth R27, <#[R11 + 2]> */
		/* 82216234h case   12:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 82216234h case   12:*/		return 0x82216238;
		  /* 82216238h */ case   13:  		/* lwz R8, <#[R11]> */
		/* 82216238h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216238h case   13:*/		return 0x8221623C;
		  /* 8221623Ch */ case   14:  		/* rlwimi R8, R9, 18, 8, 15 */
		/* 8221623Ch case   14:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R9);
		/* 8221623Ch case   14:*/		return 0x82216240;
		  /* 82216240h */ case   15:  		/* stw R8, <#[R11]> */
		/* 82216240h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216240h case   15:*/		return 0x82216244;
		  /* 82216244h */ case   16:  		/* stwu R10, <#[R11 + 4]> */
		/* 82216244h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216244h case   16:*/		return 0x82216248;
		  /* 82216248h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 82216248h case   17:*/		if ( regs.CR[6].eq ) { return 0x82216258;  }
		/* 82216248h case   17:*/		return 0x8221624C;
		  /* 8221624Ch */ case   18:  		/* cmplwi CR6, R28, 2 */
		/* 8221624Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 8221624Ch case   18:*/		return 0x82216250;
		  /* 82216250h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 82216250h case   19:*/		if ( regs.CR[6].eq ) { return 0x82216260;  }
		/* 82216250h case   19:*/		return 0x82216254;
		  /* 82216254h */ case   20:  		/* b 24 */
		/* 82216254h case   20:*/		return 0x8221626C;
		/* 82216254h case   20:*/		return 0x82216258;
	}
	return 0x82216258;
} // Block from 82216204h-82216258h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82216258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216258);
		  /* 82216258h */ case    0:  		/* li R10, 16 */
		/* 82216258h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 82216258h case    0:*/		return 0x8221625C;
		  /* 8221625Ch */ case    1:  		/* stw R10, <#[R11]> */
		/* 8221625Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221625Ch case    1:*/		return 0x82216260;
	}
	return 0x82216260;
} // Block from 82216258h-82216260h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82216260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216260);
		  /* 82216260h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 82216260h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216260h case    0:*/		return 0x82216264;
		  /* 82216264h */ case    1:  		/* rlwimi R10, R26, 6, 24, 25 */
		/* 82216264h case    1:*/		cpu::op::rlwimi<0,6,24,25>(regs,&regs.R10,regs.R26);
		/* 82216264h case    1:*/		return 0x82216268;
		  /* 82216268h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82216268h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216268h case    2:*/		return 0x8221626C;
	}
	return 0x8221626C;
} // Block from 82216260h-8221626Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221626Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221626C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221626C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221626C);
		  /* 8221626Ch */ case    0:  		/* lwz R10, <#[R31]> */
		/* 8221626Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221626Ch case    0:*/		return 0x82216270;
		  /* 82216270h */ case    1:  		/* addi R11, R11, 4 */
		/* 82216270h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216270h case    1:*/		return 0x82216274;
		  /* 82216274h */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 82216274h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82216274h case    2:*/		return 0x82216278;
		  /* 82216278h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82216278h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216278h case    3:*/		return 0x8221627C;
		  /* 8221627Ch */ case    4:  		/* lwz R9, <#[R31]> */
		/* 8221627Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8221627Ch case    4:*/		return 0x82216280;
		  /* 82216280h */ case    5:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82216280h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82216280h case    5:*/		return 0x82216284;
		  /* 82216284h */ case    6:  		/* stw R9, <#[R11]> */
		/* 82216284h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216284h case    6:*/		return 0x82216288;
		  /* 82216288h */ case    7:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216288h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216288h case    7:*/		return 0x8221628C;
		  /* 8221628Ch */ case    8:  		/* lwz R9, <#[R31]> */
		/* 8221628Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8221628Ch case    8:*/		return 0x82216290;
		  /* 82216290h */ case    9:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82216290h case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82216290h case    9:*/		return 0x82216294;
		  /* 82216294h */ case   10:  		/* oris R10, R9, 64 */
		/* 82216294h case   10:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 82216294h case   10:*/		return 0x82216298;
		  /* 82216298h */ case   11:  		/* stw R10, <#[R11]> */
		/* 82216298h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216298h case   11:*/		return 0x8221629C;
		  /* 8221629Ch */ case   12:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8221629Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221629Ch case   12:*/		return 0x822162A0;
		  /* 822162A0h */ case   13:  		/* lwz R9, <#[R30]> */
		/* 822162A0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822162A0h case   13:*/		return 0x822162A4;
		  /* 822162A4h */ case   14:  		/* rlwimi R9, R10, 0, 0, 28 */
		/* 822162A4h case   14:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R9,regs.R10);
		/* 822162A4h case   14:*/		return 0x822162A8;
		  /* 822162A8h */ case   15:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822162A8h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822162A8h case   15:*/		return 0x822162AC;
		  /* 822162ACh */ case   16:  		/* stw R9, <#[R11]> */
		/* 822162ACh case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822162ACh case   16:*/		return 0x822162B0;
		  /* 822162B0h */ case   17:  		/* lwz R9, <#[R30]> */
		/* 822162B0h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822162B0h case   17:*/		return 0x822162B4;
		  /* 822162B4h */ case   18:  		/* rlwimi R9, R10, 0, 28, 24 */
		/* 822162B4h case   18:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R9,regs.R10);
		/* 822162B4h case   18:*/		return 0x822162B8;
		  /* 822162B8h */ case   19:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822162B8h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822162B8h case   19:*/		return 0x822162BC;
		  /* 822162BCh */ case   20:  		/* stw R9, <#[R11]> */
		/* 822162BCh case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822162BCh case   20:*/		return 0x822162C0;
		  /* 822162C0h */ case   21:  		/* lwz R9, <#[R30]> */
		/* 822162C0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822162C0h case   21:*/		return 0x822162C4;
		  /* 822162C4h */ case   22:  		/* rlwimi R9, R10, 0, 24, 20 */
		/* 822162C4h case   22:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R9,regs.R10);
		/* 822162C4h case   22:*/		return 0x822162C8;
		  /* 822162C8h */ case   23:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822162C8h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822162C8h case   23:*/		return 0x822162CC;
		  /* 822162CCh */ case   24:  		/* stw R9, <#[R11]> */
		/* 822162CCh case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822162CCh case   24:*/		return 0x822162D0;
		  /* 822162D0h */ case   25:  		/* lwz R9, <#[R30]> */
		/* 822162D0h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822162D0h case   25:*/		return 0x822162D4;
		  /* 822162D4h */ case   26:  		/* rlwimi R9, R10, 0, 20, 16 */
		/* 822162D4h case   26:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R10);
		/* 822162D4h case   26:*/		return 0x822162D8;
	}
	return 0x822162D8;
} // Block from 8221626Ch-822162D8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 822162D8h
// Function '?DoSrc01Swizzle@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IPAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822162D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822162D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822162D8);
		  /* 822162D8h */ case    0:  		/* stw R9, <#[R11]> */
		/* 822162D8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822162D8h case    0:*/		return 0x822162DC;
		  /* 822162DCh */ case    1:  		/* addi R11, R11, 4 */
		/* 822162DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822162DCh case    1:*/		return 0x822162E0;
		  /* 822162E0h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 822162E0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 822162E0h case    2:*/		return 0x822162E4;
		  /* 822162E4h */ case    3:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822162E4h case    3:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822162E4h case    3:*/		return 0x822162E8;
		  /* 822162E8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 822162E8h case    4:*/		if ( regs.CR[0].eq ) { return 0x822162F8;  }
		/* 822162E8h case    4:*/		return 0x822162EC;
		  /* 822162ECh */ case    5:  		/* lwz R10, <#[R25]> */
		/* 822162ECh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 822162ECh case    5:*/		return 0x822162F0;
		  /* 822162F0h */ case    6:  		/* stw R10, <#[R11]> */
		/* 822162F0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822162F0h case    6:*/		return 0x822162F4;
		  /* 822162F4h */ case    7:  		/* addi R11, R11, 4 */
		/* 822162F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822162F4h case    7:*/		return 0x822162F8;
	}
	return 0x822162F8;
} // Block from 822162D8h-822162F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822162F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822162F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822162F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822162F8);
		  /* 822162F8h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 822162F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 822162F8h case    0:*/		return 0x822162FC;
		  /* 822162FCh */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 822162FCh case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822162FCh case    1:*/		return 0x82216300;
		  /* 82216300h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 82216300h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216300h case    2:*/		return 0x82216304;
		  /* 82216304h */ case    3:  		/* lwz R10, <#[R31]> */
		/* 82216304h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216304h case    3:*/		return 0x82216308;
		  /* 82216308h */ case    4:  		/* rlwimi R10, R9, 0, 16, 9 */
		/* 82216308h case    4:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R10,regs.R9);
		/* 82216308h case    4:*/		return 0x8221630C;
		  /* 8221630Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 8221630Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221630Ch case    5:*/		return 0x82216310;
		  /* 82216310h */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216310h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216310h case    6:*/		return 0x82216314;
		  /* 82216314h */ case    7:  		/* lwz R9, <#[R31]> */
		/* 82216314h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82216314h case    7:*/		return 0x82216318;
		  /* 82216318h */ case    8:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82216318h case    8:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82216318h case    8:*/		return 0x8221631C;
		  /* 8221631Ch */ case    9:  		/* oris R10, R9, 64 */
		/* 8221631Ch case    9:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 8221631Ch case    9:*/		return 0x82216320;
		  /* 82216320h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82216320h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216320h case   10:*/		return 0x82216324;
		  /* 82216324h */ case   11:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82216324h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216324h case   11:*/		return 0x82216328;
		  /* 82216328h */ case   12:  		/* addi R3, R11, 4 */
		/* 82216328h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82216328h case   12:*/		return 0x8221632C;
		  /* 8221632Ch */ case   13:  		/* lwz R9, <#[R30]> */
		/* 8221632Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8221632Ch case   13:*/		return 0x82216330;
		  /* 82216330h */ case   14:  		/* rlwimi R9, R10, 0, 0, 28 */
		/* 82216330h case   14:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R9,regs.R10);
		/* 82216330h case   14:*/		return 0x82216334;
		  /* 82216334h */ case   15:  		/* stw R9, <#[R11]> */
		/* 82216334h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216334h case   15:*/		return 0x82216338;
		  /* 82216338h */ case   16:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216338h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216338h case   16:*/		return 0x8221633C;
		  /* 8221633Ch */ case   17:  		/* lwz R9, <#[R30]> */
		/* 8221633Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8221633Ch case   17:*/		return 0x82216340;
		  /* 82216340h */ case   18:  		/* rlwimi R9, R10, 0, 28, 24 */
		/* 82216340h case   18:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R9,regs.R10);
		/* 82216340h case   18:*/		return 0x82216344;
		  /* 82216344h */ case   19:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216344h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216344h case   19:*/		return 0x82216348;
		  /* 82216348h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82216348h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216348h case   20:*/		return 0x8221634C;
		  /* 8221634Ch */ case   21:  		/* lwz R9, <#[R30]> */
		/* 8221634Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8221634Ch case   21:*/		return 0x82216350;
		  /* 82216350h */ case   22:  		/* rlwimi R9, R10, 0, 24, 20 */
		/* 82216350h case   22:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R9,regs.R10);
		/* 82216350h case   22:*/		return 0x82216354;
		  /* 82216354h */ case   23:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216354h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216354h case   23:*/		return 0x82216358;
		  /* 82216358h */ case   24:  		/* stw R9, <#[R11]> */
		/* 82216358h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216358h case   24:*/		return 0x8221635C;
		  /* 8221635Ch */ case   25:  		/* lwz R9, <#[R30]> */
		/* 8221635Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8221635Ch case   25:*/		return 0x82216360;
		  /* 82216360h */ case   26:  		/* rlwimi R9, R10, 0, 20, 16 */
		/* 82216360h case   26:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R10);
		/* 82216360h case   26:*/		return 0x82216364;
		  /* 82216364h */ case   27:  		/* stw R9, <#[R11]> */
		/* 82216364h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216364h case   27:*/		return 0x82216368;
		  /* 82216368h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 82216368h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216368h case   28:*/		return 0x8221636C;
		  /* 8221636Ch */ case   29:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221636Ch case   29:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221636Ch case   29:*/		return 0x82216370;
		  /* 82216370h */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 82216370h case   30:*/		if ( regs.CR[0].eq ) { return 0x82216380;  }
		/* 82216370h case   30:*/		return 0x82216374;
		  /* 82216374h */ case   31:  		/* lwz R11, <#[R25]> */
		/* 82216374h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82216374h case   31:*/		return 0x82216378;
		  /* 82216378h */ case   32:  		/* stw R11, <#[R3]> */
		/* 82216378h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82216378h case   32:*/		return 0x8221637C;
		  /* 8221637Ch */ case   33:  		/* addi R3, R3, 4 */
		/* 8221637Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 8221637Ch case   33:*/		return 0x82216380;
	}
	return 0x82216380;
} // Block from 822162F8h-82216380h (34 instructions)

